// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7575 0 0
// CreateNature ;
  57: CALL 20994 0 0
// PrepareRussian ;
  61: CALL 5705 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 10894 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 41628 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 41628 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 41628 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 41628 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 41628 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 41628 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 41628 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 41628 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 41628 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 41628 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 41628 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: PUSH
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 21
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 70
2583: OR
2584: IFFALSE 2602
// begin area := HarrisonSupportArea2 ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 31
2593: ST_TO_ADDR
// dir := 1 ;
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// end ; uc_side = 1 ;
2602: LD_ADDR_OWVAR 20
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// uc_nation = 1 ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// vc_engine := engine_combustion ;
2618: LD_ADDR_OWVAR 39
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// vc_control := control_manual ;
2626: LD_ADDR_OWVAR 38
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2634: LD_ADDR_OWVAR 40
2638: PUSH
2639: LD_INT 4
2641: PUSH
2642: LD_INT 4
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh := CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := class_engineer ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2825: LD_ADDR_EXP 18
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 18
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine := engine_combustion ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control := control_manual ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 5
2875: PUSH
2876: LD_INT 3
2878: PUSH
2879: LD_INT 3
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_OWVAR 67
2892: ARRAY
2893: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2894: LD_ADDR_OWVAR 37
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// veh := CreateVehicle ;
2902: LD_ADDR_VAR 0 3
2906: PUSH
2907: CALL_OW 45
2911: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_VAR 0 5
2921: PPUSH
2922: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_VAR 0 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_INT 50
2950: PPUSH
2951: CALL_OW 240
// hc_class := class_soldier ;
2955: LD_ADDR_OWVAR 28
2959: PUSH
2960: LD_INT 1
2962: ST_TO_ADDR
// hc_sex := sex_female ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 2
2970: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2971: LD_ADDR_OWVAR 33
2975: PUSH
2976: LD_STRING SecondCharsGal
2978: ST_TO_ADDR
// hc_face_number := 42 ;
2979: LD_ADDR_OWVAR 34
2983: PUSH
2984: LD_INT 42
2986: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2987: LD_ADDR_OWVAR 29
2991: PUSH
2992: LD_INT 11
2994: PUSH
2995: LD_INT 10
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
3002: LD_ADDR_OWVAR 26
3006: PUSH
3007: LD_STRING Ingrid Jonsson
3009: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
3010: LD_ADDR_OWVAR 30
3014: PUSH
3015: LD_INT 1
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: LD_INT 0
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3033: LD_ADDR_OWVAR 31
3037: PUSH
3038: LD_INT 3
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: LD_INT 1
3046: PUSH
3047: LD_INT 0
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3056: LD_ADDR_EXP 19
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3066: LD_EXP 19
3070: PPUSH
3071: LD_VAR 0 3
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: LD_VAR 0 1
3084: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3091: LD_ADDR_VAR 0 4
3095: PUSH
3096: LD_INT 22
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 23
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 26
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: PUSH
3136: LD_EXP 3
3140: PUSH
3141: LD_EXP 4
3145: PUSH
3146: LD_EXP 8
3150: PUSH
3151: LD_EXP 9
3155: PUSH
3156: LD_EXP 5
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: DIFF
3168: ST_TO_ADDR
// for i in _tmp do
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 4
3178: PUSH
3179: FOR_IN
3180: IFFALSE 3221
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 32
3189: PPUSH
3190: CALL_OW 308
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 302
3204: AND
3205: IFFALSE 3219
// begin tmp := i ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// break ;
3217: GO 3221
// end ;
3219: GO 3179
3221: POP
3222: POP
// if not tmp then
3223: LD_VAR 0 3
3227: NOT
3228: IFFALSE 3240
// tmp := JMM ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_EXP 1
3239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// if IsDead ( tmp ) then
3247: LD_VAR 0 3
3251: PPUSH
3252: CALL_OW 301
3256: IFFALSE 3268
// tmp := JMM ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: LD_EXP 1
3267: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3268: LD_INT 81
3270: PUSH
3271: LD_INT 1
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 91
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: LD_INT 15
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: PUSH
3304: LD_EXP 27
3308: PUSH
3309: LD_INT 6300
3311: LESS
3312: OR
3313: IFFALSE 3240
// blockSpawn := 1 ;
3315: LD_ADDR_EXP 30
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// uc_side := 4 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 4
3330: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3331: LD_ADDR_EXP 16
3335: PUSH
3336: LD_STRING Joan
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: LD_EXP 44
3346: PPUSH
3347: CALL 41628 0 3
3351: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3352: LD_EXP 16
3356: PPUSH
3357: LD_VAR 0 3
3361: PPUSH
3362: CALL_OW 250
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL_OW 251
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 1
3382: PPUSH
3383: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3387: LD_EXP 16
3391: PPUSH
3392: LD_INT 250
3394: PPUSH
3395: CALL_OW 234
// InGameOn ;
3399: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3403: LD_EXP 16
3407: PPUSH
3408: CALL_OW 87
// wait ( 0 0$2 ) ;
3412: LD_INT 70
3414: PPUSH
3415: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3419: LD_VAR 0 3
3423: PPUSH
3424: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3428: LD_VAR 0 3
3432: PPUSH
3433: CALL_OW 122
// wait ( 0 0$1 ) ;
3437: LD_INT 35
3439: PPUSH
3440: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_EXP 16
3453: PPUSH
3454: CALL_OW 112
// wait ( 0 0$2 ) ;
3458: LD_INT 70
3460: PPUSH
3461: CALL_OW 67
// DialogueOn ;
3465: CALL_OW 6
// if tmp = JMM then
3469: LD_VAR 0 3
3473: PUSH
3474: LD_EXP 1
3478: EQUAL
3479: IFFALSE 3628
// begin ComTurnUnit ( JMM , Joan ) ;
3481: LD_EXP 1
3485: PPUSH
3486: LD_EXP 16
3490: PPUSH
3491: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3495: LD_EXP 1
3499: PPUSH
3500: LD_STRING D5b-JMM-1
3502: PPUSH
3503: CALL_OW 88
// DialogueOff ;
3507: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3511: LD_EXP 16
3515: PPUSH
3516: LD_INT 500
3518: PPUSH
3519: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3523: LD_EXP 16
3527: PPUSH
3528: LD_EXP 1
3532: PPUSH
3533: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3537: LD_EXP 1
3541: PPUSH
3542: LD_EXP 16
3546: PPUSH
3547: CALL_OW 119
// wait ( 0 0$1 ) ;
3551: LD_INT 35
3553: PPUSH
3554: CALL_OW 67
// DialogueOn ;
3558: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3562: LD_EXP 16
3566: PPUSH
3567: LD_STRING D5b-Joan-1
3569: PPUSH
3570: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3574: LD_EXP 1
3578: PPUSH
3579: LD_STRING D5b-JMM-2
3581: PPUSH
3582: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3586: LD_EXP 16
3590: PPUSH
3591: LD_STRING D5b-Joan-2
3593: PPUSH
3594: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3598: LD_EXP 1
3602: PPUSH
3603: LD_STRING D5b-JMM-3
3605: PPUSH
3606: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3610: LD_EXP 16
3614: PPUSH
3615: LD_STRING D5b-Joan-3
3617: PPUSH
3618: CALL_OW 88
// DialogueOff ;
3622: CALL_OW 7
// end else
3626: GO 3993
// begin ComTurnUnit ( tmp , Joan ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_EXP 16
3637: PPUSH
3638: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3642: LD_VAR 0 3
3646: PPUSH
3647: LD_STRING D5a-Sol1-1
3649: PPUSH
3650: CALL_OW 88
// DialogueOff ;
3654: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_INT 500
3665: PPUSH
3666: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3670: LD_EXP 16
3674: PPUSH
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3684: LD_VAR 0 3
3688: PPUSH
3689: LD_EXP 16
3693: PPUSH
3694: CALL_OW 119
// wait ( 0 0$1 ) ;
3698: LD_INT 35
3700: PPUSH
3701: CALL_OW 67
// DialogueOn ;
3705: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3709: LD_EXP 16
3713: PPUSH
3714: LD_STRING D5a-Joan-1
3716: PPUSH
3717: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_STRING D5a-Sol1-2
3728: PPUSH
3729: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3733: LD_EXP 16
3737: PPUSH
3738: LD_STRING D5a-Joan-2
3740: PPUSH
3741: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_STRING D5a-Sol1-3
3752: PPUSH
3753: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3757: LD_EXP 16
3761: PPUSH
3762: LD_STRING D5a-Joan-3
3764: PPUSH
3765: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_STRING D5a-Sol1-4
3776: PPUSH
3777: CALL_OW 88
// DialogueOff ;
3781: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3785: LD_EXP 1
3789: PUSH
3790: LD_INT 55
3792: PUSH
3793: EMPTY
3794: LIST
3795: PPUSH
3796: CALL_OW 69
3800: IN
3801: IFFALSE 3824
// begin ComMoveUnit ( JMM , Joan ) ;
3803: LD_EXP 1
3807: PPUSH
3808: LD_EXP 16
3812: PPUSH
3813: CALL_OW 112
// wait ( 0 0$05 ) ;
3817: LD_INT 175
3819: PPUSH
3820: CALL_OW 67
// end ; ComExit ( JMM ) ;
3824: LD_EXP 1
3828: PPUSH
3829: CALL 79347 0 1
// wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3840: LD_INT 35
3842: PPUSH
3843: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3847: LD_EXP 16
3851: PUSH
3852: LD_VAR 0 3
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PPUSH
3861: LD_EXP 1
3865: PPUSH
3866: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3870: LD_EXP 16
3874: PPUSH
3875: LD_EXP 1
3879: PPUSH
3880: CALL_OW 296
3884: PUSH
3885: LD_INT 5
3887: LESS
3888: IFFALSE 3840
// ComTurnUnit ( Joan , JMM ) ;
3890: LD_EXP 16
3894: PPUSH
3895: LD_EXP 1
3899: PPUSH
3900: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3904: LD_EXP 1
3908: PPUSH
3909: LD_EXP 16
3913: PPUSH
3914: CALL_OW 119
// wait ( 0 0$1 ) ;
3918: LD_INT 35
3920: PPUSH
3921: CALL_OW 67
// DialogueOn ;
3925: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3929: LD_EXP 16
3933: PPUSH
3934: LD_STRING D5a-Joan-4
3936: PPUSH
3937: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3941: LD_EXP 1
3945: PPUSH
3946: LD_STRING D5a-JMM-4
3948: PPUSH
3949: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3953: LD_EXP 16
3957: PPUSH
3958: LD_STRING D5a-Joan-5
3960: PPUSH
3961: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3965: LD_EXP 1
3969: PPUSH
3970: LD_STRING D5a-JMM-5
3972: PPUSH
3973: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3977: LD_EXP 16
3981: PPUSH
3982: LD_STRING D5a-Joan-6
3984: PPUSH
3985: CALL_OW 88
// DialogueOff ;
3989: CALL_OW 7
// end ; DialogueOn ;
3993: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3997: LD_EXP 1
4001: PPUSH
4002: LD_STRING D6-JMM-1
4004: PPUSH
4005: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4009: LD_EXP 16
4013: PPUSH
4014: LD_STRING D6-Joan-1
4016: PPUSH
4017: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4021: LD_EXP 1
4025: PPUSH
4026: LD_STRING D6-JMM-2
4028: PPUSH
4029: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4033: LD_EXP 16
4037: PPUSH
4038: LD_STRING D6-Joan-2
4040: PPUSH
4041: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4045: LD_EXP 1
4049: PPUSH
4050: LD_STRING D6-JMM-3
4052: PPUSH
4053: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4057: LD_EXP 16
4061: PPUSH
4062: LD_STRING D6-Joan-3
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING D6-JMM-4
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// InGameOff ;
4085: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4089: LD_EXP 16
4093: PPUSH
4094: LD_INT 1
4096: PPUSH
4097: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4101: LD_STRING MJ
4103: PPUSH
4104: CALL_OW 337
// joanStatus = 1 ;
4108: LD_ADDR_EXP 17
4112: PUSH
4113: LD_INT 1
4115: ST_TO_ADDR
// blockSpawn = 0 ;
4116: LD_ADDR_EXP 30
4120: PUSH
4121: LD_INT 0
4123: ST_TO_ADDR
// end ;
4124: LD_VAR 0 1
4128: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4129: LD_INT 0
4131: PPUSH
4132: PPUSH
// if not number or number > 8 then
4133: LD_VAR 0 1
4137: NOT
4138: PUSH
4139: LD_VAR 0 1
4143: PUSH
4144: LD_INT 8
4146: GREATER
4147: OR
4148: IFFALSE 4152
// exit ;
4150: GO 5700
// repeat wait ( 0 0$7 ) ;
4152: LD_INT 245
4154: PPUSH
4155: CALL_OW 67
// until blockSpawn = 0 ;
4159: LD_EXP 30
4163: PUSH
4164: LD_INT 0
4166: EQUAL
4167: IFFALSE 4152
// uc_side := 1 ;
4169: LD_ADDR_OWVAR 20
4173: PUSH
4174: LD_INT 1
4176: ST_TO_ADDR
// uc_nation := 1 ;
4177: LD_ADDR_OWVAR 21
4181: PUSH
4182: LD_INT 1
4184: ST_TO_ADDR
// InitHc ;
4185: CALL_OW 19
// if number = 1 then
4189: LD_VAR 0 1
4193: PUSH
4194: LD_INT 1
4196: EQUAL
4197: IFFALSE 4373
// begin hc_class := 3 ;
4199: LD_ADDR_OWVAR 28
4203: PUSH
4204: LD_INT 3
4206: ST_TO_ADDR
// hc_sex := sex_male ;
4207: LD_ADDR_OWVAR 27
4211: PUSH
4212: LD_INT 1
4214: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4215: LD_ADDR_OWVAR 33
4219: PUSH
4220: LD_STRING SecondCharsGal
4222: ST_TO_ADDR
// hc_face_number := 55 ;
4223: LD_ADDR_OWVAR 34
4227: PUSH
4228: LD_INT 55
4230: ST_TO_ADDR
// hc_name := George McCarthy ;
4231: LD_ADDR_OWVAR 26
4235: PUSH
4236: LD_STRING George McCarthy
4238: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4239: LD_ADDR_OWVAR 29
4243: PUSH
4244: LD_INT 11
4246: PUSH
4247: LD_INT 10
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4254: LD_ADDR_OWVAR 30
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: LD_INT 0
4264: PUSH
4265: LD_INT 2
4267: PUSH
4268: LD_INT 0
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4277: LD_ADDR_OWVAR 31
4281: PUSH
4282: LD_INT 1
4284: PUSH
4285: LD_INT 2
4287: PUSH
4288: LD_INT 3
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: ST_TO_ADDR
// un = CreateHuman ;
4300: LD_ADDR_VAR 0 3
4304: PUSH
4305: CALL_OW 44
4309: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4310: LD_VAR 0 3
4314: PPUSH
4315: LD_INT 23
4317: PPUSH
4318: LD_INT 1
4320: PPUSH
4321: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4325: LD_VAR 0 3
4329: PPUSH
4330: CALL_OW 87
// wait ( 0 0$1 ) ;
4334: LD_INT 35
4336: PPUSH
4337: CALL_OW 67
// DialogueOn ;
4341: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4345: LD_VAR 0 3
4349: PPUSH
4350: LD_STRING D11d-Sol4-1
4352: PPUSH
4353: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4357: LD_EXP 1
4361: PPUSH
4362: LD_STRING D11d-JMM-1
4364: PPUSH
4365: CALL_OW 88
// DialogueOff ;
4369: CALL_OW 7
// end ; if number = 2 then
4373: LD_VAR 0 1
4377: PUSH
4378: LD_INT 2
4380: EQUAL
4381: IFFALSE 4557
// begin hc_class := 1 ;
4383: LD_ADDR_OWVAR 28
4387: PUSH
4388: LD_INT 1
4390: ST_TO_ADDR
// hc_sex := sex_male ;
4391: LD_ADDR_OWVAR 27
4395: PUSH
4396: LD_INT 1
4398: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4399: LD_ADDR_OWVAR 33
4403: PUSH
4404: LD_STRING AmGalRemake
4406: ST_TO_ADDR
// hc_face_number := 7 ;
4407: LD_ADDR_OWVAR 34
4411: PUSH
4412: LD_INT 7
4414: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4415: LD_ADDR_OWVAR 26
4419: PUSH
4420: LD_STRING Bobby Jordan
4422: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4423: LD_ADDR_OWVAR 29
4427: PUSH
4428: LD_INT 9
4430: PUSH
4431: LD_INT 11
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4438: LD_ADDR_OWVAR 30
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: LD_INT 0
4448: PUSH
4449: LD_INT 0
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4461: LD_ADDR_OWVAR 31
4465: PUSH
4466: LD_INT 2
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// un = CreateHuman ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: CALL_OW 44
4493: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4494: LD_VAR 0 3
4498: PPUSH
4499: LD_INT 24
4501: PPUSH
4502: LD_INT 1
4504: PPUSH
4505: CALL_OW 49
// wait ( 0 0$1 ) ;
4509: LD_INT 35
4511: PPUSH
4512: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4516: LD_VAR 0 3
4520: PPUSH
4521: CALL_OW 87
// DialogueOn ;
4525: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4529: LD_VAR 0 3
4533: PPUSH
4534: LD_STRING D11b-Sol3-1
4536: PPUSH
4537: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4541: LD_EXP 1
4545: PPUSH
4546: LD_STRING D11b-JMM-1
4548: PPUSH
4549: CALL_OW 88
// DialogueOff ;
4553: CALL_OW 7
// end ; if number = 3 then
4557: LD_VAR 0 1
4561: PUSH
4562: LD_INT 3
4564: EQUAL
4565: IFFALSE 4729
// begin hc_class := 1 ;
4567: LD_ADDR_OWVAR 28
4571: PUSH
4572: LD_INT 1
4574: ST_TO_ADDR
// hc_sex := sex_male ;
4575: LD_ADDR_OWVAR 27
4579: PUSH
4580: LD_INT 1
4582: ST_TO_ADDR
// hc_gallery := DJ ;
4583: LD_ADDR_OWVAR 33
4587: PUSH
4588: LD_STRING DJ
4590: ST_TO_ADDR
// hc_face_number := 1 ;
4591: LD_ADDR_OWVAR 34
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// hc_name := Darius Dajay ;
4599: LD_ADDR_OWVAR 26
4603: PUSH
4604: LD_STRING Darius Dajay
4606: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4607: LD_ADDR_OWVAR 29
4611: PUSH
4612: LD_INT 11
4614: PUSH
4615: LD_INT 11
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4622: LD_ADDR_OWVAR 30
4626: PUSH
4627: LD_INT 2
4629: PUSH
4630: LD_INT 0
4632: PUSH
4633: LD_INT 0
4635: PUSH
4636: LD_INT 0
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4645: LD_ADDR_OWVAR 31
4649: PUSH
4650: LD_INT 4
4652: PUSH
4653: LD_INT 0
4655: PUSH
4656: LD_INT 1
4658: PUSH
4659: LD_INT 0
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: ST_TO_ADDR
// un = CreateHuman ;
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: CALL_OW 44
4677: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_INT 25
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4693: LD_VAR 0 3
4697: PPUSH
4698: CALL_OW 87
// wait ( 0 0$1 ) ;
4702: LD_INT 35
4704: PPUSH
4705: CALL_OW 67
// DialogueOn ;
4709: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4713: LD_VAR 0 3
4717: PPUSH
4718: LD_STRING D11f-Sol5-1
4720: PPUSH
4721: CALL_OW 88
// DialogueOff ;
4725: CALL_OW 7
// end ; if number = 4 then
4729: LD_VAR 0 1
4733: PUSH
4734: LD_INT 4
4736: EQUAL
4737: IFFALSE 4874
// begin hc_class := 2 ;
4739: LD_ADDR_OWVAR 28
4743: PUSH
4744: LD_INT 2
4746: ST_TO_ADDR
// hc_sex := sex_female ;
4747: LD_ADDR_OWVAR 27
4751: PUSH
4752: LD_INT 2
4754: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4755: LD_ADDR_OWVAR 33
4759: PUSH
4760: LD_STRING SecondCharsGal
4762: ST_TO_ADDR
// hc_face_number := 46 ;
4763: LD_ADDR_OWVAR 34
4767: PUSH
4768: LD_INT 46
4770: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4771: LD_ADDR_OWVAR 26
4775: PUSH
4776: LD_STRING Sylvia Creak
4778: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4779: LD_ADDR_OWVAR 29
4783: PUSH
4784: LD_INT 10
4786: PUSH
4787: LD_INT 9
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4794: LD_ADDR_OWVAR 30
4798: PUSH
4799: LD_INT 0
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: LD_INT 1
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4817: LD_ADDR_OWVAR 31
4821: PUSH
4822: LD_INT 1
4824: PUSH
4825: LD_INT 3
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: ST_TO_ADDR
// un = CreateHuman ;
4840: LD_ADDR_VAR 0 3
4844: PUSH
4845: CALL_OW 44
4849: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4850: LD_VAR 0 3
4854: PPUSH
4855: LD_INT 26
4857: PPUSH
4858: LD_INT 1
4860: PPUSH
4861: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4865: LD_VAR 0 3
4869: PPUSH
4870: CALL_OW 87
// end ; if number = 5 then
4874: LD_VAR 0 1
4878: PUSH
4879: LD_INT 5
4881: EQUAL
4882: IFFALSE 5058
// begin hc_class := 1 ;
4884: LD_ADDR_OWVAR 28
4888: PUSH
4889: LD_INT 1
4891: ST_TO_ADDR
// hc_sex := sex_female ;
4892: LD_ADDR_OWVAR 27
4896: PUSH
4897: LD_INT 2
4899: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4900: LD_ADDR_OWVAR 33
4904: PUSH
4905: LD_STRING SecondCharsGal
4907: ST_TO_ADDR
// hc_face_number := 37 ;
4908: LD_ADDR_OWVAR 34
4912: PUSH
4913: LD_INT 37
4915: ST_TO_ADDR
// hc_name := Malena Johnson ;
4916: LD_ADDR_OWVAR 26
4920: PUSH
4921: LD_STRING Malena Johnson
4923: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4924: LD_ADDR_OWVAR 29
4928: PUSH
4929: LD_INT 11
4931: PUSH
4932: LD_INT 10
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4939: LD_ADDR_OWVAR 30
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: LD_INT 1
4949: PUSH
4950: LD_INT 0
4952: PUSH
4953: LD_INT 0
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4962: LD_ADDR_OWVAR 31
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: LD_INT 1
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: ST_TO_ADDR
// un = CreateHuman ;
4985: LD_ADDR_VAR 0 3
4989: PUSH
4990: CALL_OW 44
4994: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4995: LD_VAR 0 3
4999: PPUSH
5000: LD_INT 27
5002: PPUSH
5003: LD_INT 1
5005: PPUSH
5006: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5010: LD_VAR 0 3
5014: PPUSH
5015: CALL_OW 87
// wait ( 0 0$1 ) ;
5019: LD_INT 35
5021: PPUSH
5022: CALL_OW 67
// DialogueOn ;
5026: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5030: LD_VAR 0 3
5034: PPUSH
5035: LD_STRING D11c-FSol3-1
5037: PPUSH
5038: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5042: LD_EXP 1
5046: PPUSH
5047: LD_STRING D11c-JMM-1
5049: PPUSH
5050: CALL_OW 88
// DialogueOff ;
5054: CALL_OW 7
// end ; if number = 6 then
5058: LD_VAR 0 1
5062: PUSH
5063: LD_INT 6
5065: EQUAL
5066: IFFALSE 5240
// begin hc_class := 1 ;
5068: LD_ADDR_OWVAR 28
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// hc_sex := sex_male ;
5076: LD_ADDR_OWVAR 27
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5084: LD_ADDR_OWVAR 33
5088: PUSH
5089: LD_STRING AmGalRemake
5091: ST_TO_ADDR
// hc_face_number := 1 ;
5092: LD_ADDR_OWVAR 34
5096: PUSH
5097: LD_INT 1
5099: ST_TO_ADDR
// hc_name := Charles Brown ;
5100: LD_ADDR_OWVAR 26
5104: PUSH
5105: LD_STRING Charles Brown
5107: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5108: LD_ADDR_OWVAR 29
5112: PUSH
5113: LD_INT 12
5115: PUSH
5116: LD_INT 11
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5123: LD_ADDR_OWVAR 30
5127: PUSH
5128: LD_INT 2
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: LD_INT 0
5136: PUSH
5137: LD_INT 0
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5146: LD_ADDR_OWVAR 31
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: LD_INT 0
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: ST_TO_ADDR
// un = CreateHuman ;
5169: LD_ADDR_VAR 0 3
5173: PUSH
5174: CALL_OW 44
5178: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_INT 28
5186: PPUSH
5187: LD_INT 1
5189: PPUSH
5190: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5194: LD_VAR 0 3
5198: PPUSH
5199: CALL_OW 87
// wait ( 0 0$1 ) ;
5203: LD_INT 35
5205: PPUSH
5206: CALL_OW 67
// DialogueOn ;
5210: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5214: LD_VAR 0 3
5218: PPUSH
5219: LD_STRING D4-Sol1-5
5221: PPUSH
5222: CALL_OW 88
// DialogueOff ;
5226: CALL_OW 7
// tempCharles = un ;
5230: LD_ADDR_EXP 14
5234: PUSH
5235: LD_VAR 0 3
5239: ST_TO_ADDR
// end ; if number = 7 then
5240: LD_VAR 0 1
5244: PUSH
5245: LD_INT 7
5247: EQUAL
5248: IFFALSE 5520
// begin hc_class := 1 ;
5250: LD_ADDR_OWVAR 28
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// hc_sex := sex_female ;
5258: LD_ADDR_OWVAR 27
5262: PUSH
5263: LD_INT 2
5265: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5266: LD_ADDR_OWVAR 33
5270: PUSH
5271: LD_STRING AmGalRemake
5273: ST_TO_ADDR
// hc_face_number := 2 ;
5274: LD_ADDR_OWVAR 34
5278: PUSH
5279: LD_INT 2
5281: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5282: LD_ADDR_OWVAR 26
5286: PUSH
5287: LD_STRING Rebecca Macdonald
5289: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5290: LD_ADDR_OWVAR 29
5294: PUSH
5295: LD_INT 10
5297: PUSH
5298: LD_INT 10
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5305: LD_ADDR_OWVAR 30
5309: PUSH
5310: LD_INT 1
5312: PUSH
5313: LD_INT 0
5315: PUSH
5316: LD_INT 0
5318: PUSH
5319: LD_INT 1
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5328: LD_ADDR_OWVAR 31
5332: PUSH
5333: LD_INT 1
5335: PUSH
5336: LD_INT 0
5338: PUSH
5339: LD_INT 0
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: ST_TO_ADDR
// un = CreateHuman ;
5351: LD_ADDR_VAR 0 3
5355: PUSH
5356: CALL_OW 44
5360: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5361: LD_VAR 0 3
5365: PPUSH
5366: LD_INT 29
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: CALL_OW 87
// wait ( 0 0$1 ) ;
5385: LD_INT 35
5387: PPUSH
5388: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5392: LD_INT 30
5394: PPUSH
5395: LD_INT 22
5397: PUSH
5398: LD_INT 3
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: PPUSH
5405: CALL_OW 70
5409: IFFALSE 5520
// begin DialogueOn ;
5411: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5415: LD_VAR 0 3
5419: PPUSH
5420: CALL_OW 250
5424: PPUSH
5425: LD_VAR 0 3
5429: PPUSH
5430: CALL_OW 251
5434: PPUSH
5435: LD_INT 1
5437: PPUSH
5438: LD_INT 15
5440: NEG
5441: PPUSH
5442: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5446: LD_VAR 0 3
5450: PPUSH
5451: CALL_OW 250
5455: PPUSH
5456: LD_VAR 0 3
5460: PPUSH
5461: CALL_OW 251
5465: PPUSH
5466: LD_INT 1
5468: PPUSH
5469: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5473: LD_VAR 0 3
5477: PPUSH
5478: LD_STRING D11a-FSol2-1
5480: PPUSH
5481: CALL_OW 88
// DialogueOff ;
5485: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5489: LD_INT 3
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 471
// wait ( 0 0$2 ) ;
5501: LD_INT 70
5503: PPUSH
5504: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5508: LD_INT 3
5510: PPUSH
5511: LD_VAR 0 3
5515: PPUSH
5516: CALL_OW 472
// end ; end ; if number = 8 then
5520: LD_VAR 0 1
5524: PUSH
5525: LD_INT 8
5527: EQUAL
5528: IFFALSE 5684
// begin hc_class := 1 ;
5530: LD_ADDR_OWVAR 28
5534: PUSH
5535: LD_INT 1
5537: ST_TO_ADDR
// hc_sex := sex_female ;
5538: LD_ADDR_OWVAR 27
5542: PUSH
5543: LD_INT 2
5545: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5546: LD_ADDR_OWVAR 33
5550: PUSH
5551: LD_STRING SecondCharsGal
5553: ST_TO_ADDR
// hc_face_number := 45 ;
5554: LD_ADDR_OWVAR 34
5558: PUSH
5559: LD_INT 45
5561: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5562: LD_ADDR_OWVAR 26
5566: PUSH
5567: LD_STRING Margherite Simpson
5569: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5570: LD_ADDR_OWVAR 29
5574: PUSH
5575: LD_INT 12
5577: PUSH
5578: LD_INT 10
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5585: LD_ADDR_OWVAR 30
5589: PUSH
5590: LD_INT 1
5592: PUSH
5593: LD_INT 2
5595: PUSH
5596: LD_INT 0
5598: PUSH
5599: LD_INT 0
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5608: LD_ADDR_OWVAR 31
5612: PUSH
5613: LD_INT 1
5615: PUSH
5616: LD_INT 2
5618: PUSH
5619: LD_INT 0
5621: PUSH
5622: LD_INT 1
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: ST_TO_ADDR
// un = CreateHuman ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: CALL_OW 44
5640: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_INT 33
5648: PPUSH
5649: LD_INT 1
5651: PPUSH
5652: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5656: LD_VAR 0 3
5660: PPUSH
5661: CALL_OW 87
// wait ( 0 0$1 ) ;
5665: LD_INT 35
5667: PPUSH
5668: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5672: LD_VAR 0 3
5676: PPUSH
5677: LD_STRING D11e-FSol4-1
5679: PPUSH
5680: CALL_OW 88
// end ; arrivals := arrivals union un ;
5684: LD_ADDR_EXP 45
5688: PUSH
5689: LD_EXP 45
5693: PUSH
5694: LD_VAR 0 3
5698: UNION
5699: ST_TO_ADDR
// end ; end_of_file
5700: LD_VAR 0 2
5704: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
// ruAttackers := [ ] ;
5709: LD_ADDR_EXP 48
5713: PUSH
5714: EMPTY
5715: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5716: LD_ADDR_EXP 49
5720: PUSH
5721: EMPTY
5722: ST_TO_ADDR
// if Difficulty < 3 then
5723: LD_OWVAR 67
5727: PUSH
5728: LD_INT 3
5730: LESS
5731: IFFALSE 5748
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5733: LD_INT 130
5735: PPUSH
5736: LD_INT 81
5738: PPUSH
5739: CALL_OW 428
5743: PPUSH
5744: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5748: LD_INT 3
5750: PPUSH
5751: LD_INT 3
5753: PPUSH
5754: LD_INT 2
5756: PPUSH
5757: LD_EXP 35
5761: PPUSH
5762: LD_EXP 36
5766: PPUSH
5767: CALL_OW 12
5771: PPUSH
5772: LD_INT 2
5774: PPUSH
5775: LD_INT 4
5777: PPUSH
5778: CALL 7329 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5782: LD_INT 3
5784: PPUSH
5785: LD_INT 3
5787: PPUSH
5788: LD_INT 8
5790: PPUSH
5791: LD_EXP 35
5795: PPUSH
5796: LD_EXP 36
5800: PPUSH
5801: CALL_OW 12
5805: PPUSH
5806: LD_INT 1
5808: PPUSH
5809: LD_INT 4
5811: PPUSH
5812: CALL 7329 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5816: LD_INT 3
5818: PPUSH
5819: LD_INT 3
5821: PPUSH
5822: LD_INT 67
5824: PPUSH
5825: LD_EXP 35
5829: PPUSH
5830: LD_EXP 36
5834: PPUSH
5835: CALL_OW 12
5839: PPUSH
5840: LD_INT 1
5842: PPUSH
5843: LD_INT 2
5845: PPUSH
5846: CALL 7329 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 3
5855: PPUSH
5856: LD_INT 21
5858: PPUSH
5859: LD_EXP 35
5863: PPUSH
5864: LD_EXP 36
5868: PPUSH
5869: CALL_OW 12
5873: PPUSH
5874: LD_INT 3
5876: PPUSH
5877: LD_INT 6
5879: PPUSH
5880: CALL 7329 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5884: LD_INT 3
5886: PPUSH
5887: LD_INT 3
5889: PPUSH
5890: LD_INT 17
5892: PPUSH
5893: LD_EXP 35
5897: PPUSH
5898: LD_EXP 36
5902: PPUSH
5903: CALL_OW 12
5907: PPUSH
5908: LD_INT 3
5910: PPUSH
5911: LD_INT 6
5913: PPUSH
5914: CALL 7329 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5918: LD_INT 3
5920: PPUSH
5921: LD_INT 3
5923: PPUSH
5924: LD_INT 32
5926: PPUSH
5927: LD_EXP 35
5931: PPUSH
5932: LD_EXP 36
5936: PPUSH
5937: CALL_OW 12
5941: PPUSH
5942: LD_INT 4
5944: PPUSH
5945: LD_INT 2
5947: PPUSH
5948: CALL 7329 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_INT 22
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 21
5969: PUSH
5970: LD_INT 3
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 30
5979: PUSH
5980: LD_INT 32
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL_OW 69
5996: PUSH
5997: FOR_IN
5998: IFFALSE 6038
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6000: LD_INT 3
6002: PPUSH
6003: LD_INT 3
6005: PPUSH
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_EXP 35
6015: PPUSH
6016: LD_EXP 36
6020: PPUSH
6021: CALL_OW 12
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: LD_INT 1
6031: PPUSH
6032: CALL 7329 0 6
6036: GO 5997
6038: POP
6039: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_INT 22
6047: PUSH
6048: LD_INT 3
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 21
6057: PUSH
6058: LD_INT 3
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: LD_INT 30
6067: PUSH
6068: LD_INT 31
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: PPUSH
6080: CALL_OW 69
6084: PUSH
6085: FOR_IN
6086: IFFALSE 6114
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6088: LD_EXP 35
6092: PPUSH
6093: LD_EXP 36
6097: PPUSH
6098: CALL_OW 12
6102: PPUSH
6103: LD_VAR 0 2
6107: PPUSH
6108: CALL 7439 0 2
6112: GO 6085
6114: POP
6115: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6116: LD_INT 3
6118: PPUSH
6119: LD_INT 32
6121: PPUSH
6122: LD_INT 3
6124: PPUSH
6125: CALL 7718 0 3
// end ;
6129: LD_VAR 0 1
6133: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 32
6146: PUSH
6147: LD_INT 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: IFFALSE 6239
6164: GO 6166
6166: DISABLE
6167: LD_INT 0
6169: PPUSH
// begin enable ;
6170: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6171: LD_ADDR_VAR 0 1
6175: PUSH
6176: LD_INT 22
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 32
6188: PUSH
6189: LD_INT 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PPUSH
6200: CALL_OW 69
6204: PUSH
6205: FOR_IN
6206: IFFALSE 6237
// if GetFuel ( i ) < 3 then
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 261
6217: PUSH
6218: LD_INT 3
6220: LESS
6221: IFFALSE 6235
// SetFuel ( i , 3 ) ;
6223: LD_VAR 0 1
6227: PPUSH
6228: LD_INT 3
6230: PPUSH
6231: CALL_OW 240
6235: GO 6205
6237: POP
6238: POP
// end ;
6239: PPOPN 1
6241: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6242: LD_OWVAR 67
6246: PUSH
6247: LD_INT 1
6249: GREATER
6250: IFFALSE 6819
6252: GO 6254
6254: DISABLE
6255: LD_INT 0
6257: PPUSH
6258: PPUSH
6259: PPUSH
6260: PPUSH
// begin uc_side := 3 ;
6261: LD_ADDR_OWVAR 20
6265: PUSH
6266: LD_INT 3
6268: ST_TO_ADDR
// uc_nation := 3 ;
6269: LD_ADDR_OWVAR 21
6273: PUSH
6274: LD_INT 3
6276: ST_TO_ADDR
// for i := 1 to 2 do
6277: LD_ADDR_VAR 0 1
6281: PUSH
6282: DOUBLE
6283: LD_INT 1
6285: DEC
6286: ST_TO_ADDR
6287: LD_INT 2
6289: PUSH
6290: FOR_TO
6291: IFFALSE 6405
// begin InitHC_All ( ) ;
6293: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 4
6302: PUSH
6303: LD_INT 5
6305: PUSH
6306: LD_INT 6
6308: PUSH
6309: LD_INT 6
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: LD_OWVAR 67
6322: ARRAY
6323: PPUSH
6324: CALL_OW 381
// un := CreateHuman ;
6328: LD_ADDR_VAR 0 2
6332: PUSH
6333: CALL_OW 44
6337: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6338: LD_VAR 0 2
6342: PPUSH
6343: LD_INT 91
6345: PPUSH
6346: LD_INT 87
6348: PPUSH
6349: LD_INT 3
6351: PPUSH
6352: LD_INT 0
6354: PPUSH
6355: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6359: LD_ADDR_EXP 49
6363: PUSH
6364: LD_EXP 49
6368: PPUSH
6369: LD_EXP 49
6373: PUSH
6374: LD_INT 1
6376: PLUS
6377: PPUSH
6378: LD_VAR 0 2
6382: PPUSH
6383: CALL_OW 1
6387: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6388: LD_VAR 0 2
6392: PPUSH
6393: LD_INT 46
6395: PPUSH
6396: LD_INT 78
6398: PPUSH
6399: CALL_OW 114
// end ;
6403: GO 6290
6405: POP
6406: POP
// if Difficulty > 2 then
6407: LD_OWVAR 67
6411: PUSH
6412: LD_INT 2
6414: GREATER
6415: IFFALSE 6547
// begin for i := 1 to 3 do
6417: LD_ADDR_VAR 0 1
6421: PUSH
6422: DOUBLE
6423: LD_INT 1
6425: DEC
6426: ST_TO_ADDR
6427: LD_INT 3
6429: PUSH
6430: FOR_TO
6431: IFFALSE 6545
// begin InitHC_All ( ) ;
6433: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6437: LD_INT 0
6439: PPUSH
6440: LD_INT 4
6442: PUSH
6443: LD_INT 5
6445: PUSH
6446: LD_INT 6
6448: PUSH
6449: LD_INT 6
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: PUSH
6458: LD_OWVAR 67
6462: ARRAY
6463: PPUSH
6464: CALL_OW 381
// un := CreateHuman ;
6468: LD_ADDR_VAR 0 2
6472: PUSH
6473: CALL_OW 44
6477: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6478: LD_VAR 0 2
6482: PPUSH
6483: LD_INT 91
6485: PPUSH
6486: LD_INT 87
6488: PPUSH
6489: LD_INT 3
6491: PPUSH
6492: LD_INT 0
6494: PPUSH
6495: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6499: LD_ADDR_EXP 49
6503: PUSH
6504: LD_EXP 49
6508: PPUSH
6509: LD_EXP 49
6513: PUSH
6514: LD_INT 1
6516: PLUS
6517: PPUSH
6518: LD_VAR 0 2
6522: PPUSH
6523: CALL_OW 1
6527: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6528: LD_VAR 0 2
6532: PPUSH
6533: LD_INT 89
6535: PPUSH
6536: LD_INT 148
6538: PPUSH
6539: CALL_OW 114
// end ;
6543: GO 6430
6545: POP
6546: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6547: LD_ADDR_VAR 0 3
6551: PUSH
6552: LD_INT 33
6554: PUSH
6555: LD_INT 61
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 49
6564: PUSH
6565: LD_INT 85
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 76
6574: PUSH
6575: LD_INT 99
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 81
6584: PUSH
6585: LD_INT 135
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 111
6594: PUSH
6595: LD_INT 155
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 147
6604: PUSH
6605: LD_INT 158
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6620: LD_INT 1050
6622: PPUSH
6623: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6627: LD_ADDR_VAR 0 1
6631: PUSH
6632: DOUBLE
6633: LD_INT 1
6635: DEC
6636: ST_TO_ADDR
6637: LD_EXP 49
6641: PUSH
6642: FOR_TO
6643: IFFALSE 6810
// begin un := ruAttackersInForest [ i ] ;
6645: LD_ADDR_VAR 0 2
6649: PUSH
6650: LD_EXP 49
6654: PUSH
6655: LD_VAR 0 1
6659: ARRAY
6660: ST_TO_ADDR
// tag := GetTag ( un ) ;
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: LD_VAR 0 2
6670: PPUSH
6671: CALL_OW 110
6675: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6676: LD_VAR 0 2
6680: PPUSH
6681: CALL_OW 302
6685: PUSH
6686: LD_VAR 0 2
6690: PPUSH
6691: CALL_OW 314
6695: NOT
6696: AND
6697: IFFALSE 6808
// begin if tag <> i then
6699: LD_VAR 0 4
6703: PUSH
6704: LD_VAR 0 1
6708: NONEQUAL
6709: IFFALSE 6737
// begin SetTag ( un , i ) ;
6711: LD_VAR 0 2
6715: PPUSH
6716: LD_VAR 0 1
6720: PPUSH
6721: CALL_OW 109
// tag := i ;
6725: LD_ADDR_VAR 0 4
6729: PUSH
6730: LD_VAR 0 1
6734: ST_TO_ADDR
// end else
6735: GO 6769
// begin SetTag ( un , i + 1 ) ;
6737: LD_VAR 0 2
6741: PPUSH
6742: LD_VAR 0 1
6746: PUSH
6747: LD_INT 1
6749: PLUS
6750: PPUSH
6751: CALL_OW 109
// tag := i + 1 ;
6755: LD_ADDR_VAR 0 4
6759: PUSH
6760: LD_VAR 0 1
6764: PUSH
6765: LD_INT 1
6767: PLUS
6768: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6769: LD_VAR 0 2
6773: PPUSH
6774: LD_VAR 0 3
6778: PUSH
6779: LD_VAR 0 4
6783: ARRAY
6784: PUSH
6785: LD_INT 1
6787: ARRAY
6788: PPUSH
6789: LD_VAR 0 3
6793: PUSH
6794: LD_VAR 0 4
6798: ARRAY
6799: PUSH
6800: LD_INT 2
6802: ARRAY
6803: PPUSH
6804: CALL_OW 114
// end ; end ;
6808: GO 6642
6810: POP
6811: POP
// until not ruAttackersInForest ;
6812: LD_EXP 49
6816: NOT
6817: IFFALSE 6620
// end ;
6819: PPOPN 4
6821: END
// every 0 0$2 trigger FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) do var i , tmp , bar , e ;
6822: LD_INT 10
6824: PPUSH
6825: LD_INT 22
6827: PUSH
6828: LD_INT 1
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PPUSH
6835: CALL_OW 70
6839: IFFALSE 7188
6841: GO 6843
6843: DISABLE
6844: LD_INT 0
6846: PPUSH
6847: PPUSH
6848: PPUSH
6849: PPUSH
// begin enable ;
6850: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] , [ f_tag , 111 ] ] ) ;
6851: LD_ADDR_VAR 0 2
6855: PUSH
6856: LD_INT 22
6858: PUSH
6859: LD_INT 3
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 25
6868: PUSH
6869: LD_INT 1
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: LD_INT 120
6878: PUSH
6879: LD_INT 111
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: PPUSH
6891: CALL_OW 69
6895: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
6896: LD_ADDR_VAR 0 3
6900: PUSH
6901: LD_INT 22
6903: PUSH
6904: LD_INT 3
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PUSH
6911: LD_INT 50
6913: PUSH
6914: EMPTY
6915: LIST
6916: PUSH
6917: LD_INT 2
6919: PUSH
6920: LD_INT 30
6922: PUSH
6923: LD_INT 4
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 30
6932: PUSH
6933: LD_INT 5
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: PPUSH
6950: CALL_OW 69
6954: ST_TO_ADDR
// if not tmp then
6955: LD_VAR 0 2
6959: NOT
6960: IFFALSE 7058
// begin if not bar then
6962: LD_VAR 0 3
6966: NOT
6967: IFFALSE 6972
// begin disable ;
6969: DISABLE
// exit ;
6970: GO 7188
// end ; tmp := [ ] ;
6972: LD_ADDR_VAR 0 2
6976: PUSH
6977: EMPTY
6978: ST_TO_ADDR
// for i in bar do
6979: LD_ADDR_VAR 0 1
6983: PUSH
6984: LD_VAR 0 3
6988: PUSH
6989: FOR_IN
6990: IFFALSE 7015
// tmp := tmp union UnitsInside ( i ) ;
6992: LD_ADDR_VAR 0 2
6996: PUSH
6997: LD_VAR 0 2
7001: PUSH
7002: LD_VAR 0 1
7006: PPUSH
7007: CALL_OW 313
7011: UNION
7012: ST_TO_ADDR
7013: GO 6989
7015: POP
7016: POP
// if not tmp then
7017: LD_VAR 0 2
7021: NOT
7022: IFFALSE 7027
// begin disable ;
7024: DISABLE
// exit ;
7025: GO 7188
// end ; for i in tmp do
7027: LD_ADDR_VAR 0 1
7031: PUSH
7032: LD_VAR 0 2
7036: PUSH
7037: FOR_IN
7038: IFFALSE 7054
// SetTag ( i , 111 ) ;
7040: LD_VAR 0 1
7044: PPUSH
7045: LD_INT 111
7047: PPUSH
7048: CALL_OW 109
7052: GO 7037
7054: POP
7055: POP
// end else
7056: GO 7188
// begin e := FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) ;
7058: LD_ADDR_VAR 0 4
7062: PUSH
7063: LD_INT 10
7065: PPUSH
7066: LD_INT 22
7068: PUSH
7069: LD_INT 1
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PPUSH
7076: CALL_OW 70
7080: ST_TO_ADDR
// for i in tmp do
7081: LD_ADDR_VAR 0 1
7085: PUSH
7086: LD_VAR 0 2
7090: PUSH
7091: FOR_IN
7092: IFFALSE 7186
// if IsOk ( i ) then
7094: LD_VAR 0 1
7098: PPUSH
7099: CALL_OW 302
7103: IFFALSE 7184
// begin if IsInUnit ( i ) then
7105: LD_VAR 0 1
7109: PPUSH
7110: CALL_OW 310
7114: IFFALSE 7125
// ComExitBuilding ( i ) ;
7116: LD_VAR 0 1
7120: PPUSH
7121: CALL_OW 122
// wait ( 3 ) ;
7125: LD_INT 3
7127: PPUSH
7128: CALL_OW 67
// ComAttackUnit ( i , NearestUnitToUnit ( e , i ) ) ;
7132: LD_VAR 0 1
7136: PPUSH
7137: LD_VAR 0 4
7141: PPUSH
7142: LD_VAR 0 1
7146: PPUSH
7147: CALL_OW 74
7151: PPUSH
7152: CALL_OW 115
// AddComEnterUnit ( i , bar [ rand ( 1 , bar ) ] ) ;
7156: LD_VAR 0 1
7160: PPUSH
7161: LD_VAR 0 3
7165: PUSH
7166: LD_INT 1
7168: PPUSH
7169: LD_VAR 0 3
7173: PPUSH
7174: CALL_OW 12
7178: ARRAY
7179: PPUSH
7180: CALL_OW 180
// end ;
7184: GO 7091
7186: POP
7187: POP
// end ; end ; end_of_file
7188: PPOPN 4
7190: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7191: LD_INT 0
7193: PPUSH
7194: PPUSH
7195: PPUSH
// if not characters then
7196: LD_VAR 0 1
7200: NOT
7201: IFFALSE 7205
// exit ;
7203: GO 7284
// speaker := characters [ rand ( 1 , characters ) ] ;
7205: LD_ADDR_VAR 0 6
7209: PUSH
7210: LD_VAR 0 1
7214: PUSH
7215: LD_INT 1
7217: PPUSH
7218: LD_VAR 0 1
7222: PPUSH
7223: CALL_OW 12
7227: ARRAY
7228: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7229: LD_VAR 0 6
7233: PPUSH
7234: CALL_OW 258
7238: PUSH
7239: LD_INT 1
7241: EQUAL
7242: IFFALSE 7260
// Say ( speaker , dialogMID ) else
7244: LD_VAR 0 6
7248: PPUSH
7249: LD_VAR 0 2
7253: PPUSH
7254: CALL_OW 88
7258: GO 7274
// Say ( speaker , dialogFID ) ;
7260: LD_VAR 0 6
7264: PPUSH
7265: LD_VAR 0 3
7269: PPUSH
7270: CALL_OW 88
// result := speaker ;
7274: LD_ADDR_VAR 0 4
7278: PUSH
7279: LD_VAR 0 6
7283: ST_TO_ADDR
// end ;
7284: LD_VAR 0 4
7288: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7289: LD_INT 0
7291: PPUSH
7292: PPUSH
// for i in charactersList do
7293: LD_ADDR_VAR 0 4
7297: PUSH
7298: LD_VAR 0 1
7302: PUSH
7303: FOR_IN
7304: IFFALSE 7322
// SaveCharacters ( i , ident ) ;
7306: LD_VAR 0 4
7310: PPUSH
7311: LD_VAR 0 2
7315: PPUSH
7316: CALL_OW 38
7320: GO 7303
7322: POP
7323: POP
// end ;
7324: LD_VAR 0 3
7328: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7329: LD_INT 0
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
// for i = 1 to count do
7335: LD_ADDR_VAR 0 8
7339: PUSH
7340: DOUBLE
7341: LD_INT 1
7343: DEC
7344: ST_TO_ADDR
7345: LD_VAR 0 6
7349: PUSH
7350: FOR_TO
7351: IFFALSE 7432
// begin uc_side = side ;
7353: LD_ADDR_OWVAR 20
7357: PUSH
7358: LD_VAR 0 1
7362: ST_TO_ADDR
// uc_nation = nation ;
7363: LD_ADDR_OWVAR 21
7367: PUSH
7368: LD_VAR 0 2
7372: ST_TO_ADDR
// hc_gallery =  ;
7373: LD_ADDR_OWVAR 33
7377: PUSH
7378: LD_STRING 
7380: ST_TO_ADDR
// hc_name =  ;
7381: LD_ADDR_OWVAR 26
7385: PUSH
7386: LD_STRING 
7388: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7389: LD_INT 0
7391: PPUSH
7392: LD_VAR 0 5
7396: PPUSH
7397: LD_VAR 0 4
7401: PPUSH
7402: CALL_OW 380
// un = CreateHuman ;
7406: LD_ADDR_VAR 0 10
7410: PUSH
7411: CALL_OW 44
7415: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7416: LD_VAR 0 10
7420: PPUSH
7421: LD_VAR 0 3
7425: PPUSH
7426: CALL_OW 52
// end ;
7430: GO 7350
7432: POP
7433: POP
// end ;
7434: LD_VAR 0 7
7438: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7439: LD_INT 0
7441: PPUSH
7442: PPUSH
7443: PPUSH
// uc_side := GetSide ( b ) ;
7444: LD_ADDR_OWVAR 20
7448: PUSH
7449: LD_VAR 0 2
7453: PPUSH
7454: CALL_OW 255
7458: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7459: LD_ADDR_OWVAR 21
7463: PUSH
7464: LD_VAR 0 2
7468: PPUSH
7469: CALL_OW 248
7473: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7474: LD_INT 0
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: LD_VAR 0 1
7484: PPUSH
7485: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7489: LD_ADDR_VAR 0 5
7493: PUSH
7494: LD_VAR 0 2
7498: PPUSH
7499: CALL_OW 254
7503: PUSH
7504: LD_INT 3
7506: MINUS
7507: ST_TO_ADDR
// if dir < 0 then
7508: LD_VAR 0 5
7512: PUSH
7513: LD_INT 0
7515: LESS
7516: IFFALSE 7532
// dir := 6 + dir ;
7518: LD_ADDR_VAR 0 5
7522: PUSH
7523: LD_INT 6
7525: PUSH
7526: LD_VAR 0 5
7530: PLUS
7531: ST_TO_ADDR
// un := CreateHuman ;
7532: LD_ADDR_VAR 0 4
7536: PUSH
7537: CALL_OW 44
7541: ST_TO_ADDR
// SetDir ( un , dir ) ;
7542: LD_VAR 0 4
7546: PPUSH
7547: LD_VAR 0 5
7551: PPUSH
7552: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7556: LD_VAR 0 4
7560: PPUSH
7561: LD_VAR 0 2
7565: PPUSH
7566: CALL_OW 52
// end ;
7570: LD_VAR 0 3
7574: RET
// export function PrepareDifficulty ; begin
7575: LD_INT 0
7577: PPUSH
// case Difficulty of 1 :
7578: LD_OWVAR 67
7582: PUSH
7583: LD_INT 1
7585: DOUBLE
7586: EQUAL
7587: IFTRUE 7591
7589: GO 7610
7591: POP
// begin RuSolMinLevel = 2 ;
7592: LD_ADDR_EXP 35
7596: PUSH
7597: LD_INT 2
7599: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7600: LD_ADDR_EXP 36
7604: PUSH
7605: LD_INT 3
7607: ST_TO_ADDR
// end ; 2 :
7608: GO 7671
7610: LD_INT 2
7612: DOUBLE
7613: EQUAL
7614: IFTRUE 7618
7616: GO 7637
7618: POP
// begin RuSolMinLevel = 3 ;
7619: LD_ADDR_EXP 35
7623: PUSH
7624: LD_INT 3
7626: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7627: LD_ADDR_EXP 36
7631: PUSH
7632: LD_INT 5
7634: ST_TO_ADDR
// end ; 3 .. 4 :
7635: GO 7671
7637: LD_INT 3
7639: DOUBLE
7640: GREATEREQUAL
7641: IFFALSE 7649
7643: LD_INT 4
7645: DOUBLE
7646: LESSEQUAL
7647: IFTRUE 7651
7649: GO 7670
7651: POP
// begin RuSolMinLevel = 4 ;
7652: LD_ADDR_EXP 35
7656: PUSH
7657: LD_INT 4
7659: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7660: LD_ADDR_EXP 36
7664: PUSH
7665: LD_INT 6
7667: ST_TO_ADDR
// end ; end ;
7668: GO 7671
7670: POP
// end ;
7671: LD_VAR 0 1
7675: RET
// export function ShowQuery1 ; begin
7676: LD_INT 0
7678: PPUSH
// result := Query ( QKill ) ;
7679: LD_ADDR_VAR 0 1
7683: PUSH
7684: LD_STRING QKill
7686: PPUSH
7687: CALL_OW 97
7691: ST_TO_ADDR
// end ;
7692: LD_VAR 0 1
7696: RET
// export function ShowQuery2 ; begin
7697: LD_INT 0
7699: PPUSH
// result := Query ( QKill2 ) ;
7700: LD_ADDR_VAR 0 1
7704: PUSH
7705: LD_STRING QKill2
7707: PPUSH
7708: CALL_OW 97
7712: ST_TO_ADDR
// end ;
7713: LD_VAR 0 1
7717: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7718: LD_INT 0
7720: PPUSH
7721: PPUSH
7722: PPUSH
7723: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
7724: LD_ADDR_VAR 0 7
7728: PUSH
7729: LD_INT 48
7731: PUSH
7732: LD_INT 49
7734: PUSH
7735: LD_INT 50
7737: PUSH
7738: LD_INT 20
7740: PUSH
7741: LD_INT 1
7743: PUSH
7744: LD_INT 51
7746: PUSH
7747: LD_INT 52
7749: PUSH
7750: LD_INT 69
7752: PUSH
7753: LD_INT 39
7755: PUSH
7756: LD_INT 34
7758: PUSH
7759: LD_INT 40
7761: PUSH
7762: LD_INT 53
7764: PUSH
7765: LD_INT 71
7767: PUSH
7768: LD_INT 57
7770: PUSH
7771: LD_INT 58
7773: PUSH
7774: LD_INT 44
7776: PUSH
7777: LD_INT 32
7779: PUSH
7780: LD_INT 27
7782: PUSH
7783: LD_INT 23
7785: PUSH
7786: LD_INT 33
7788: PUSH
7789: LD_INT 59
7791: PUSH
7792: LD_INT 54
7794: PUSH
7795: LD_INT 55
7797: PUSH
7798: LD_INT 56
7800: PUSH
7801: LD_INT 63
7803: PUSH
7804: LD_INT 64
7806: PUSH
7807: LD_INT 65
7809: PUSH
7810: LD_INT 30
7812: PUSH
7813: LD_INT 31
7815: PUSH
7816: LD_INT 21
7818: PUSH
7819: LD_INT 22
7821: PUSH
7822: LD_INT 25
7824: PUSH
7825: LD_INT 82
7827: PUSH
7828: LD_INT 83
7830: PUSH
7831: LD_INT 84
7833: PUSH
7834: LD_INT 85
7836: PUSH
7837: LD_INT 86
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: ST_TO_ADDR
// for i = 1 to list do
7879: LD_ADDR_VAR 0 5
7883: PUSH
7884: DOUBLE
7885: LD_INT 1
7887: DEC
7888: ST_TO_ADDR
7889: LD_VAR 0 7
7893: PUSH
7894: FOR_TO
7895: IFFALSE 7967
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7897: LD_VAR 0 7
7901: PUSH
7902: LD_VAR 0 5
7906: ARRAY
7907: PPUSH
7908: LD_VAR 0 1
7912: PPUSH
7913: CALL_OW 321
7917: PUSH
7918: LD_INT 1
7920: EQUAL
7921: PUSH
7922: LD_VAR 0 7
7926: PUSH
7927: LD_VAR 0 5
7931: ARRAY
7932: PPUSH
7933: LD_VAR 0 3
7937: PPUSH
7938: CALL_OW 482
7942: AND
7943: IFFALSE 7965
// AddComResearch ( lab , list [ i ] ) ;
7945: LD_VAR 0 2
7949: PPUSH
7950: LD_VAR 0 7
7954: PUSH
7955: LD_VAR 0 5
7959: ARRAY
7960: PPUSH
7961: CALL_OW 184
7965: GO 7894
7967: POP
7968: POP
// end ;
7969: LD_VAR 0 4
7973: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7974: LD_INT 0
7976: PPUSH
7977: PPUSH
7978: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7979: LD_INT 22
7981: PUSH
7982: LD_VAR 0 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 21
7993: PUSH
7994: LD_INT 2
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PPUSH
8005: CALL_OW 69
8009: PUSH
8010: LD_VAR 0 3
8014: LESSEQUAL
8015: IFFALSE 8123
// begin for i = 1 to vehCount do
8017: LD_ADDR_VAR 0 9
8021: PUSH
8022: DOUBLE
8023: LD_INT 1
8025: DEC
8026: ST_TO_ADDR
8027: LD_VAR 0 3
8031: PUSH
8032: FOR_TO
8033: IFFALSE 8121
// begin weapon := weaponTab [ i ] ;
8035: LD_ADDR_VAR 0 10
8039: PUSH
8040: LD_VAR 0 4
8044: PUSH
8045: LD_VAR 0 9
8049: ARRAY
8050: ST_TO_ADDR
// if weapon = ru_heavy_gun then
8051: LD_VAR 0 10
8055: PUSH
8056: LD_INT 46
8058: EQUAL
8059: IFFALSE 8090
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
8061: LD_VAR 0 2
8065: PPUSH
8066: LD_INT 24
8068: PPUSH
8069: LD_VAR 0 5
8073: PPUSH
8074: LD_VAR 0 6
8078: PPUSH
8079: LD_VAR 0 10
8083: PPUSH
8084: CALL_OW 185
8088: GO 8119
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 7
8099: PPUSH
8100: LD_VAR 0 5
8104: PPUSH
8105: LD_VAR 0 6
8109: PPUSH
8110: LD_VAR 0 10
8114: PPUSH
8115: CALL_OW 185
// end ;
8119: GO 8032
8121: POP
8122: POP
// end ; end ;
8123: LD_VAR 0 8
8127: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
8128: LD_INT 0
8130: PPUSH
8131: PPUSH
8132: PPUSH
8133: PPUSH
8134: PPUSH
8135: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
8136: LD_ADDR_VAR 0 8
8140: PUSH
8141: LD_VAR 0 2
8145: PPUSH
8146: CALL_OW 313
8150: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8151: LD_ADDR_VAR 0 9
8155: PUSH
8156: LD_VAR 0 3
8160: PPUSH
8161: LD_INT 22
8163: PUSH
8164: LD_VAR 0 1
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 25
8175: PUSH
8176: LD_INT 2
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: LD_INT 24
8185: PUSH
8186: LD_INT 750
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: PUSH
8193: LD_INT 3
8195: PUSH
8196: LD_INT 54
8198: PUSH
8199: EMPTY
8200: LIST
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: PPUSH
8212: CALL_OW 70
8216: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8217: LD_ADDR_VAR 0 6
8221: PUSH
8222: LD_VAR 0 3
8226: PPUSH
8227: LD_INT 22
8229: PUSH
8230: LD_VAR 0 1
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PUSH
8239: LD_INT 21
8241: PUSH
8242: LD_INT 3
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 3
8251: PUSH
8252: LD_INT 24
8254: PUSH
8255: LD_INT 1000
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: LIST
8270: PUSH
8271: EMPTY
8272: LIST
8273: PPUSH
8274: CALL_OW 70
8278: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8279: LD_VAR 0 6
8283: NOT
8284: PUSH
8285: LD_INT 22
8287: PUSH
8288: LD_VAR 0 1
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PUSH
8297: LD_INT 25
8299: PUSH
8300: LD_INT 2
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 24
8309: PUSH
8310: LD_INT 250
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: LIST
8321: PPUSH
8322: CALL_OW 69
8326: NOT
8327: AND
8328: IFFALSE 8332
// exit ;
8330: GO 8490
// if buildingsList and engineerOkInside then
8332: LD_VAR 0 6
8336: PUSH
8337: LD_VAR 0 8
8341: AND
8342: IFFALSE 8353
// ComExitBuilding ( engineerOkInside ) ;
8344: LD_VAR 0 8
8348: PPUSH
8349: CALL_OW 122
// if buildingsList and engineerOkOutside then
8353: LD_VAR 0 6
8357: PUSH
8358: LD_VAR 0 9
8362: AND
8363: IFFALSE 8383
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
8365: LD_VAR 0 9
8369: PPUSH
8370: LD_VAR 0 6
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PPUSH
8379: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8383: LD_VAR 0 6
8387: PUSH
8388: LD_INT 0
8390: EQUAL
8391: PUSH
8392: LD_VAR 0 4
8396: PUSH
8397: LD_INT 0
8399: EQUAL
8400: AND
8401: PUSH
8402: LD_VAR 0 9
8406: AND
8407: IFFALSE 8423
// ComEnterUnit ( engineerOkOutside , depot ) ;
8409: LD_VAR 0 9
8413: PPUSH
8414: LD_VAR 0 2
8418: PPUSH
8419: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8423: LD_VAR 0 9
8427: PUSH
8428: LD_VAR 0 6
8432: PUSH
8433: LD_INT 0
8435: EQUAL
8436: AND
8437: PUSH
8438: LD_VAR 0 4
8442: AND
8443: IFFALSE 8490
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8445: LD_VAR 0 9
8449: PPUSH
8450: LD_VAR 0 4
8454: PUSH
8455: LD_INT 1
8457: ARRAY
8458: PPUSH
8459: LD_VAR 0 4
8463: PUSH
8464: LD_INT 2
8466: ARRAY
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_INT 3
8475: ARRAY
8476: PPUSH
8477: LD_VAR 0 4
8481: PUSH
8482: LD_INT 4
8484: ARRAY
8485: PPUSH
8486: CALL_OW 145
// end ;
8490: LD_VAR 0 5
8494: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8495: LD_INT 0
8497: PPUSH
8498: PPUSH
8499: PPUSH
8500: PPUSH
8501: PPUSH
8502: PPUSH
8503: PPUSH
8504: PPUSH
8505: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8506: LD_ADDR_VAR 0 6
8510: PUSH
8511: LD_INT 22
8513: PUSH
8514: LD_VAR 0 1
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: LD_INT 25
8525: PUSH
8526: LD_INT 4
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 23
8535: PUSH
8536: LD_INT 2
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 24
8545: PUSH
8546: LD_INT 251
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: PPUSH
8559: CALL_OW 69
8563: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8564: LD_ADDR_VAR 0 7
8568: PUSH
8569: LD_VAR 0 3
8573: PPUSH
8574: LD_INT 22
8576: PUSH
8577: LD_VAR 0 1
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 23
8588: PUSH
8589: LD_INT 2
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 25
8598: PUSH
8599: LD_INT 4
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: LD_INT 50
8608: PUSH
8609: EMPTY
8610: LIST
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 70
8622: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8623: LD_ADDR_VAR 0 10
8627: PUSH
8628: LD_VAR 0 3
8632: PPUSH
8633: LD_INT 22
8635: PUSH
8636: LD_VAR 0 1
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: LD_INT 21
8647: PUSH
8648: LD_INT 1
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 3
8657: PUSH
8658: LD_INT 25
8660: PUSH
8661: LD_INT 3
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: LD_INT 3
8674: PUSH
8675: LD_INT 24
8677: PUSH
8678: LD_INT 750
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: PPUSH
8695: CALL_OW 70
8699: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8700: LD_ADDR_VAR 0 11
8704: PUSH
8705: LD_VAR 0 2
8709: PPUSH
8710: LD_INT 22
8712: PUSH
8713: LD_VAR 0 1
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PUSH
8722: LD_INT 21
8724: PUSH
8725: LD_INT 1
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PUSH
8732: LD_INT 3
8734: PUSH
8735: LD_INT 25
8737: PUSH
8738: LD_INT 3
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: PUSH
8749: LD_INT 3
8751: PUSH
8752: LD_INT 24
8754: PUSH
8755: LD_INT 1000
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: PPUSH
8772: CALL_OW 70
8776: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8777: LD_VAR 0 10
8781: NOT
8782: PUSH
8783: LD_VAR 0 11
8787: NOT
8788: AND
8789: PUSH
8790: LD_VAR 0 6
8794: NOT
8795: AND
8796: IFFALSE 8800
// exit ;
8798: GO 9006
// if damageUnits and sci_list then
8800: LD_VAR 0 10
8804: PUSH
8805: LD_VAR 0 6
8809: AND
8810: IFFALSE 8826
// ComMoveToArea ( damageUnits , healArea ) ;
8812: LD_VAR 0 10
8816: PPUSH
8817: LD_VAR 0 2
8821: PPUSH
8822: CALL_OW 113
// if unitsToHeal and sci_list then
8826: LD_VAR 0 11
8830: PUSH
8831: LD_VAR 0 6
8835: AND
8836: IFFALSE 8847
// ComExitBuilding ( sci_list ) ;
8838: LD_VAR 0 6
8842: PPUSH
8843: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8847: LD_VAR 0 11
8851: PUSH
8852: LD_VAR 0 7
8856: AND
8857: IFFALSE 8877
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8859: LD_VAR 0 7
8863: PPUSH
8864: LD_VAR 0 11
8868: PUSH
8869: LD_INT 1
8871: ARRAY
8872: PPUSH
8873: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8877: LD_VAR 0 10
8881: PUSH
8882: LD_INT 0
8884: EQUAL
8885: PUSH
8886: LD_VAR 0 11
8890: PUSH
8891: LD_INT 0
8893: EQUAL
8894: AND
8895: PUSH
8896: LD_VAR 0 7
8900: AND
8901: IFFALSE 9006
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8903: LD_ADDR_VAR 0 12
8907: PUSH
8908: LD_INT 22
8910: PUSH
8911: LD_VAR 0 1
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 21
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 30
8932: PUSH
8933: LD_INT 8
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: PPUSH
8945: CALL_OW 69
8949: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8950: LD_ADDR_VAR 0 13
8954: PUSH
8955: LD_INT 1
8957: PPUSH
8958: LD_VAR 0 12
8962: PPUSH
8963: CALL_OW 12
8967: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8968: LD_VAR 0 7
8972: PPUSH
8973: LD_INT 3
8975: PUSH
8976: LD_INT 60
8978: PUSH
8979: EMPTY
8980: LIST
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PPUSH
8986: CALL_OW 72
8990: PPUSH
8991: LD_VAR 0 12
8995: PUSH
8996: LD_VAR 0 13
9000: ARRAY
9001: PPUSH
9002: CALL_OW 120
// end ; end ;
9006: LD_VAR 0 5
9010: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
9011: LD_INT 0
9013: PPUSH
9014: PPUSH
9015: PPUSH
9016: PPUSH
9017: PPUSH
// tmp := [ ] ;
9018: LD_ADDR_VAR 0 6
9022: PUSH
9023: EMPTY
9024: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
9025: LD_ADDR_VAR 0 7
9029: PUSH
9030: LD_INT 22
9032: PUSH
9033: LD_VAR 0 1
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 30
9044: PUSH
9045: LD_INT 32
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PPUSH
9056: CALL_OW 69
9060: ST_TO_ADDR
// if bunkers then
9061: LD_VAR 0 7
9065: IFFALSE 9135
// for i in bunkers do
9067: LD_ADDR_VAR 0 4
9071: PUSH
9072: LD_VAR 0 7
9076: PUSH
9077: FOR_IN
9078: IFFALSE 9133
// for j in UnitsInside ( i ) do
9080: LD_ADDR_VAR 0 5
9084: PUSH
9085: LD_VAR 0 4
9089: PPUSH
9090: CALL_OW 313
9094: PUSH
9095: FOR_IN
9096: IFFALSE 9129
// tmp := Replace ( tmp , tmp + 1 , j ) ;
9098: LD_ADDR_VAR 0 6
9102: PUSH
9103: LD_VAR 0 6
9107: PPUSH
9108: LD_VAR 0 6
9112: PUSH
9113: LD_INT 1
9115: PLUS
9116: PPUSH
9117: LD_VAR 0 5
9121: PPUSH
9122: CALL_OW 1
9126: ST_TO_ADDR
9127: GO 9095
9129: POP
9130: POP
9131: GO 9077
9133: POP
9134: POP
// if tmp then
9135: LD_VAR 0 6
9139: IFFALSE 9179
// begin ComExitBuilding ( tmp ) ;
9141: LD_VAR 0 6
9145: PPUSH
9146: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
9150: LD_VAR 0 6
9154: PPUSH
9155: LD_VAR 0 2
9159: PPUSH
9160: CALL_OW 250
9164: PPUSH
9165: LD_VAR 0 2
9169: PPUSH
9170: CALL_OW 251
9174: PPUSH
9175: CALL_OW 174
// end ; end ;
9179: LD_VAR 0 3
9183: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
9184: LD_INT 0
9186: PPUSH
9187: PPUSH
9188: PPUSH
// enable ;
9189: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
9190: LD_ADDR_VAR 0 6
9194: PUSH
9195: LD_VAR 0 3
9199: PPUSH
9200: CALL_OW 435
9204: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9205: LD_ADDR_VAR 0 5
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_VAR 0 1
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: LD_INT 34
9224: PUSH
9225: LD_VAR 0 2
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PPUSH
9238: CALL_OW 69
9242: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
9243: LD_VAR 0 5
9247: PUSH
9248: LD_VAR 0 3
9252: PPUSH
9253: CALL_OW 435
9257: AND
9258: PUSH
9259: LD_VAR 0 6
9263: AND
9264: IFFALSE 9297
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
9266: LD_VAR 0 5
9270: PUSH
9271: LD_INT 1
9273: ARRAY
9274: PPUSH
9275: LD_VAR 0 6
9279: PUSH
9280: LD_INT 1
9282: ARRAY
9283: PPUSH
9284: LD_VAR 0 6
9288: PUSH
9289: LD_INT 2
9291: ARRAY
9292: PPUSH
9293: CALL_OW 177
// end ;
9297: LD_VAR 0 4
9301: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
9302: LD_INT 0
9304: PPUSH
9305: PPUSH
9306: PPUSH
9307: PPUSH
9308: PPUSH
9309: PPUSH
9310: PPUSH
9311: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
9312: LD_ADDR_VAR 0 6
9316: PUSH
9317: LD_VAR 0 2
9321: PPUSH
9322: LD_INT 22
9324: PUSH
9325: LD_VAR 0 1
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 56
9336: PUSH
9337: EMPTY
9338: LIST
9339: PUSH
9340: LD_INT 24
9342: PUSH
9343: LD_INT 700
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 3
9352: PUSH
9353: LD_INT 60
9355: PUSH
9356: EMPTY
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: LD_INT 2
9365: PUSH
9366: LD_INT 25
9368: PUSH
9369: LD_INT 1
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 25
9378: PUSH
9379: LD_INT 5
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: PUSH
9386: LD_INT 25
9388: PUSH
9389: LD_INT 8
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 25
9398: PUSH
9399: LD_INT 9
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 70
9424: PUSH
9425: LD_EXP 48
9429: PUSH
9430: LD_EXP 49
9434: UNION
9435: DIFF
9436: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9437: LD_ADDR_VAR 0 7
9441: PUSH
9442: LD_VAR 0 2
9446: PPUSH
9447: LD_INT 22
9449: PUSH
9450: LD_VAR 0 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 30
9461: PUSH
9462: LD_INT 32
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 58
9471: PUSH
9472: EMPTY
9473: LIST
9474: PUSH
9475: LD_INT 24
9477: PUSH
9478: LD_INT 251
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: PPUSH
9491: CALL_OW 70
9495: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9496: LD_ADDR_VAR 0 9
9500: PUSH
9501: LD_VAR 0 2
9505: PPUSH
9506: LD_INT 22
9508: PUSH
9509: LD_VAR 0 1
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: LD_INT 2
9520: PUSH
9521: LD_INT 30
9523: PUSH
9524: LD_INT 4
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 30
9533: PUSH
9534: LD_INT 5
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 24
9548: PUSH
9549: LD_INT 251
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: LIST
9560: PPUSH
9561: CALL_OW 70
9565: ST_TO_ADDR
// if barrackList then
9566: LD_VAR 0 9
9570: IFFALSE 9726
// begin if turretList = 0 then
9572: LD_VAR 0 7
9576: PUSH
9577: LD_INT 0
9579: EQUAL
9580: IFFALSE 9618
// begin if soldiersList then
9582: LD_VAR 0 6
9586: IFFALSE 9616
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9588: LD_VAR 0 6
9592: PPUSH
9593: LD_VAR 0 9
9597: PUSH
9598: LD_INT 1
9600: PPUSH
9601: LD_VAR 0 9
9605: PPUSH
9606: CALL_OW 12
9610: ARRAY
9611: PPUSH
9612: CALL_OW 120
// end else
9616: GO 9726
// begin for i in barrackList do
9618: LD_ADDR_VAR 0 4
9622: PUSH
9623: LD_VAR 0 9
9627: PUSH
9628: FOR_IN
9629: IFFALSE 9724
// begin if not turretList then
9631: LD_VAR 0 7
9635: NOT
9636: IFFALSE 9642
// exit ;
9638: POP
9639: POP
9640: GO 9726
// insideUnits = UnitsInside ( i ) ;
9642: LD_ADDR_VAR 0 10
9646: PUSH
9647: LD_VAR 0 4
9651: PPUSH
9652: CALL_OW 313
9656: ST_TO_ADDR
// if insideUnits then
9657: LD_VAR 0 10
9661: IFFALSE 9722
// begin tmp := insideUnits [ 1 ] ;
9663: LD_ADDR_VAR 0 8
9667: PUSH
9668: LD_VAR 0 10
9672: PUSH
9673: LD_INT 1
9675: ARRAY
9676: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9677: LD_VAR 0 8
9681: PPUSH
9682: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9686: LD_VAR 0 8
9690: PPUSH
9691: LD_VAR 0 7
9695: PUSH
9696: LD_INT 1
9698: ARRAY
9699: PPUSH
9700: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9704: LD_ADDR_VAR 0 7
9708: PUSH
9709: LD_VAR 0 7
9713: PPUSH
9714: LD_INT 1
9716: PPUSH
9717: CALL_OW 3
9721: ST_TO_ADDR
// end ; end ;
9722: GO 9628
9724: POP
9725: POP
// end ; end ; end ;
9726: LD_VAR 0 3
9730: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9731: LD_INT 0
9733: PPUSH
9734: PPUSH
9735: PPUSH
9736: PPUSH
9737: PPUSH
9738: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9739: LD_ADDR_VAR 0 8
9743: PUSH
9744: LD_INT 22
9746: PUSH
9747: LD_VAR 0 1
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 21
9758: PUSH
9759: LD_INT 2
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 34
9768: PUSH
9769: LD_INT 52
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: PPUSH
9781: CALL_OW 69
9785: ST_TO_ADDR
// if not craneList then
9786: LD_VAR 0 8
9790: NOT
9791: IFFALSE 9795
// exit ;
9793: GO 10229
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9795: LD_ADDR_VAR 0 9
9799: PUSH
9800: LD_INT 22
9802: PUSH
9803: LD_VAR 0 1
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 21
9814: PUSH
9815: LD_INT 3
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: PUSH
9822: LD_INT 3
9824: PUSH
9825: LD_INT 24
9827: PUSH
9828: LD_INT 1000
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: LIST
9843: PUSH
9844: EMPTY
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9852: LD_VAR 0 9
9856: PUSH
9857: LD_VAR 0 8
9861: PPUSH
9862: LD_INT 24
9864: PUSH
9865: LD_INT 750
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PPUSH
9872: CALL_OW 72
9876: AND
9877: IFFALSE 9912
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9879: LD_VAR 0 8
9883: PPUSH
9884: LD_INT 24
9886: PUSH
9887: LD_INT 750
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 72
9898: PPUSH
9899: LD_VAR 0 9
9903: PUSH
9904: LD_INT 1
9906: ARRAY
9907: PPUSH
9908: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9912: LD_VAR 0 8
9916: PPUSH
9917: LD_INT 3
9919: PUSH
9920: LD_INT 24
9922: PUSH
9923: LD_INT 750
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PPUSH
9934: CALL_OW 72
9938: IFFALSE 9976
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9940: LD_VAR 0 8
9944: PPUSH
9945: LD_INT 3
9947: PUSH
9948: LD_INT 24
9950: PUSH
9951: LD_INT 750
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PPUSH
9962: CALL_OW 72
9966: PPUSH
9967: LD_VAR 0 2
9971: PPUSH
9972: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9976: LD_VAR 0 8
9980: PUSH
9981: LD_VAR 0 9
9985: PUSH
9986: LD_INT 0
9988: EQUAL
9989: AND
9990: PUSH
9991: LD_VAR 0 3
9995: AND
9996: IFFALSE 10043
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9998: LD_VAR 0 8
10002: PPUSH
10003: LD_VAR 0 3
10007: PUSH
10008: LD_INT 1
10010: ARRAY
10011: PPUSH
10012: LD_VAR 0 3
10016: PUSH
10017: LD_INT 2
10019: ARRAY
10020: PPUSH
10021: LD_VAR 0 3
10025: PUSH
10026: LD_INT 3
10028: ARRAY
10029: PPUSH
10030: LD_VAR 0 3
10034: PUSH
10035: LD_INT 4
10037: ARRAY
10038: PPUSH
10039: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10043: LD_ADDR_VAR 0 7
10047: PUSH
10048: LD_VAR 0 2
10052: PPUSH
10053: LD_INT 22
10055: PUSH
10056: LD_VAR 0 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 21
10067: PUSH
10068: LD_INT 2
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 34
10077: PUSH
10078: LD_INT 52
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 3
10087: PUSH
10088: LD_INT 24
10090: PUSH
10091: LD_INT 750
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: PPUSH
10108: CALL_OW 70
10112: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10113: LD_ADDR_VAR 0 6
10117: PUSH
10118: LD_VAR 0 2
10122: PPUSH
10123: LD_INT 22
10125: PUSH
10126: LD_VAR 0 1
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: LD_INT 2
10137: PUSH
10138: LD_INT 30
10140: PUSH
10141: LD_INT 0
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 30
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PPUSH
10167: CALL_OW 70
10171: ST_TO_ADDR
// if crane then
10172: LD_VAR 0 7
10176: IFFALSE 10229
// for i in crane do
10178: LD_ADDR_VAR 0 5
10182: PUSH
10183: LD_VAR 0 7
10187: PUSH
10188: FOR_IN
10189: IFFALSE 10227
// begin if dep then
10191: LD_VAR 0 6
10195: IFFALSE 10211
// ComMoveUnit ( i , dep ) ;
10197: LD_VAR 0 5
10201: PPUSH
10202: LD_VAR 0 6
10206: PPUSH
10207: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10211: LD_VAR 0 5
10215: PPUSH
10216: CALL_OW 311
10220: PPUSH
10221: CALL 80769 0 1
// end ;
10225: GO 10188
10227: POP
10228: POP
// end ;
10229: LD_VAR 0 4
10233: RET
// export function BuildBulldozer ; begin
10234: LD_INT 0
10236: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
10237: LD_INT 17
10239: PPUSH
10240: CALL_OW 302
10244: NOT
10245: PUSH
10246: LD_INT 17
10248: PPUSH
10249: CALL_OW 255
10253: PUSH
10254: LD_INT 3
10256: NONEQUAL
10257: OR
10258: IFFALSE 10262
// exit ;
10260: GO 10281
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
10262: LD_INT 17
10264: PPUSH
10265: LD_INT 24
10267: PPUSH
10268: LD_INT 1
10270: PPUSH
10271: LD_INT 1
10273: PPUSH
10274: LD_INT 53
10276: PPUSH
10277: CALL_OW 185
// end ;
10281: LD_VAR 0 1
10285: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
10286: LD_INT 0
10288: PPUSH
10289: PPUSH
10290: PPUSH
10291: PPUSH
10292: PPUSH
// if not bulldozer then
10293: LD_VAR 0 1
10297: NOT
10298: IFFALSE 10302
// exit ;
10300: GO 10584
// list := ListEnvironmentArea ( area ) ;
10302: LD_ADDR_VAR 0 5
10306: PUSH
10307: LD_VAR 0 2
10311: PPUSH
10312: CALL_OW 353
10316: ST_TO_ADDR
// tmp := [ ] ;
10317: LD_ADDR_VAR 0 6
10321: PUSH
10322: EMPTY
10323: ST_TO_ADDR
// for i = 1 to list do
10324: LD_ADDR_VAR 0 4
10328: PUSH
10329: DOUBLE
10330: LD_INT 1
10332: DEC
10333: ST_TO_ADDR
10334: LD_VAR 0 5
10338: PUSH
10339: FOR_TO
10340: IFFALSE 10438
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
10342: LD_VAR 0 5
10346: PUSH
10347: LD_VAR 0 4
10351: ARRAY
10352: PUSH
10353: LD_INT 1
10355: ARRAY
10356: PPUSH
10357: LD_VAR 0 5
10361: PUSH
10362: LD_VAR 0 4
10366: ARRAY
10367: PUSH
10368: LD_INT 2
10370: ARRAY
10371: PPUSH
10372: CALL_OW 554
10376: IFFALSE 10436
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10378: LD_ADDR_VAR 0 6
10382: PUSH
10383: LD_VAR 0 6
10387: PPUSH
10388: LD_VAR 0 6
10392: PUSH
10393: LD_INT 1
10395: PLUS
10396: PPUSH
10397: LD_VAR 0 5
10401: PUSH
10402: LD_VAR 0 4
10406: ARRAY
10407: PUSH
10408: LD_INT 1
10410: ARRAY
10411: PUSH
10412: LD_VAR 0 5
10416: PUSH
10417: LD_VAR 0 4
10421: ARRAY
10422: PUSH
10423: LD_INT 2
10425: ARRAY
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PPUSH
10431: CALL_OW 1
10435: ST_TO_ADDR
// end ;
10436: GO 10339
10438: POP
10439: POP
// ComStop ( bulldozer ) ;
10440: LD_VAR 0 1
10444: PPUSH
10445: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10449: LD_ADDR_VAR 0 7
10453: PUSH
10454: LD_VAR 0 1
10458: PPUSH
10459: CALL_OW 250
10463: PUSH
10464: LD_VAR 0 1
10468: PPUSH
10469: CALL_OW 251
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: ST_TO_ADDR
// for i = tmp downto 1 do
10478: LD_ADDR_VAR 0 4
10482: PUSH
10483: DOUBLE
10484: LD_VAR 0 6
10488: INC
10489: ST_TO_ADDR
10490: LD_INT 1
10492: PUSH
10493: FOR_DOWNTO
10494: IFFALSE 10582
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10496: LD_ADDR_VAR 0 7
10500: PUSH
10501: LD_VAR 0 7
10505: PUSH
10506: LD_INT 1
10508: ARRAY
10509: PPUSH
10510: LD_VAR 0 7
10514: PUSH
10515: LD_INT 2
10517: ARRAY
10518: PPUSH
10519: LD_VAR 0 6
10523: PPUSH
10524: CALL 10685 0 3
10528: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10529: LD_VAR 0 1
10533: PPUSH
10534: LD_VAR 0 7
10538: PUSH
10539: LD_INT 1
10541: ARRAY
10542: PPUSH
10543: LD_VAR 0 7
10547: PUSH
10548: LD_INT 2
10550: ARRAY
10551: PPUSH
10552: CALL 10589 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10556: LD_ADDR_VAR 0 6
10560: PUSH
10561: LD_VAR 0 6
10565: PPUSH
10566: LD_VAR 0 7
10570: PUSH
10571: LD_INT 3
10573: ARRAY
10574: PPUSH
10575: CALL_OW 3
10579: ST_TO_ADDR
// end ;
10580: GO 10493
10582: POP
10583: POP
// end ;
10584: LD_VAR 0 3
10588: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10589: LD_INT 0
10591: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10592: LD_VAR 0 2
10596: PPUSH
10597: LD_VAR 0 3
10601: PPUSH
10602: CALL_OW 351
10606: PUSH
10607: LD_VAR 0 2
10611: PPUSH
10612: LD_VAR 0 3
10616: PPUSH
10617: CALL_OW 554
10621: AND
10622: PUSH
10623: LD_VAR 0 2
10627: PPUSH
10628: LD_VAR 0 3
10632: PPUSH
10633: CALL_OW 488
10637: AND
10638: PUSH
10639: LD_VAR 0 2
10643: PPUSH
10644: LD_VAR 0 3
10648: PPUSH
10649: CALL_OW 428
10653: PUSH
10654: LD_INT 1
10656: NEG
10657: EQUAL
10658: AND
10659: IFFALSE 10680
// AddComMoveXY ( bulldozer , x , y ) ;
10661: LD_VAR 0 1
10665: PPUSH
10666: LD_VAR 0 2
10670: PPUSH
10671: LD_VAR 0 3
10675: PPUSH
10676: CALL_OW 171
// end ;
10680: LD_VAR 0 4
10684: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
10685: LD_INT 0
10687: PPUSH
10688: PPUSH
10689: PPUSH
10690: PPUSH
10691: PPUSH
10692: PPUSH
10693: PPUSH
// dist := 99999 ;
10694: LD_ADDR_VAR 0 6
10698: PUSH
10699: LD_INT 99999
10701: ST_TO_ADDR
// for i = 1 to list do
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: DOUBLE
10708: LD_INT 1
10710: DEC
10711: ST_TO_ADDR
10712: LD_VAR 0 3
10716: PUSH
10717: FOR_TO
10718: IFFALSE 10856
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
10720: LD_ADDR_VAR 0 7
10724: PUSH
10725: LD_VAR 0 1
10729: PPUSH
10730: LD_VAR 0 2
10734: PPUSH
10735: LD_VAR 0 3
10739: PUSH
10740: LD_VAR 0 5
10744: ARRAY
10745: PUSH
10746: LD_INT 1
10748: ARRAY
10749: PPUSH
10750: LD_VAR 0 3
10754: PUSH
10755: LD_VAR 0 5
10759: ARRAY
10760: PUSH
10761: LD_INT 2
10763: ARRAY
10764: PPUSH
10765: CALL_OW 298
10769: ST_TO_ADDR
// if d = 0 then
10770: LD_VAR 0 7
10774: PUSH
10775: LD_INT 0
10777: EQUAL
10778: IFFALSE 10782
// continue ;
10780: GO 10717
// if d < dist then
10782: LD_VAR 0 7
10786: PUSH
10787: LD_VAR 0 6
10791: LESS
10792: IFFALSE 10854
// begin _x := list [ i ] [ 1 ] ;
10794: LD_ADDR_VAR 0 8
10798: PUSH
10799: LD_VAR 0 3
10803: PUSH
10804: LD_VAR 0 5
10808: ARRAY
10809: PUSH
10810: LD_INT 1
10812: ARRAY
10813: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
10814: LD_ADDR_VAR 0 9
10818: PUSH
10819: LD_VAR 0 3
10823: PUSH
10824: LD_VAR 0 5
10828: ARRAY
10829: PUSH
10830: LD_INT 2
10832: ARRAY
10833: ST_TO_ADDR
// _i := i ;
10834: LD_ADDR_VAR 0 10
10838: PUSH
10839: LD_VAR 0 5
10843: ST_TO_ADDR
// dist := d ;
10844: LD_ADDR_VAR 0 6
10848: PUSH
10849: LD_VAR 0 7
10853: ST_TO_ADDR
// end ; end ;
10854: GO 10717
10856: POP
10857: POP
// result := [ _x , _y , _i , dist ] ;
10858: LD_ADDR_VAR 0 4
10862: PUSH
10863: LD_VAR 0 8
10867: PUSH
10868: LD_VAR 0 9
10872: PUSH
10873: LD_VAR 0 10
10877: PUSH
10878: LD_VAR 0 6
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: ST_TO_ADDR
// end ; end_of_file
10889: LD_VAR 0 4
10893: RET
// export function Action ; begin
10894: LD_INT 0
10896: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
10897: LD_INT 66
10899: PPUSH
10900: LD_INT 4
10902: PPUSH
10903: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10907: LD_INT 22
10909: PUSH
10910: LD_INT 1
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 25
10919: PUSH
10920: LD_INT 2
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: PPUSH
10931: CALL_OW 69
10935: PUSH
10936: LD_INT 0
10938: EQUAL
10939: IFFALSE 10953
// SetClass ( JMM , 2 ) ;
10941: LD_EXP 1
10945: PPUSH
10946: LD_INT 2
10948: PPUSH
10949: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10953: LD_STRING M1
10955: PPUSH
10956: CALL_OW 337
// case Difficulty of 1 :
10960: LD_OWVAR 67
10964: PUSH
10965: LD_INT 1
10967: DOUBLE
10968: EQUAL
10969: IFTRUE 10973
10971: GO 10983
10973: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10974: LD_STRING M1-1
10976: PPUSH
10977: CALL_OW 337
10981: GO 11038
10983: LD_INT 2
10985: DOUBLE
10986: EQUAL
10987: IFTRUE 10991
10989: GO 11001
10991: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10992: LD_STRING M1-2
10994: PPUSH
10995: CALL_OW 337
10999: GO 11038
11001: LD_INT 3
11003: DOUBLE
11004: EQUAL
11005: IFTRUE 11009
11007: GO 11019
11009: POP
// ChangeMissionObjectives ( M1-3 ) ; 4 :
11010: LD_STRING M1-3
11012: PPUSH
11013: CALL_OW 337
11017: GO 11038
11019: LD_INT 4
11021: DOUBLE
11022: EQUAL
11023: IFTRUE 11027
11025: GO 11037
11027: POP
// ChangeMissionObjectives ( M1-4 ) ; end ;
11028: LD_STRING M1-4
11030: PPUSH
11031: CALL_OW 337
11035: GO 11038
11037: POP
// ChangeMissionObjectives ( M1cont ) ;
11038: LD_STRING M1cont
11040: PPUSH
11041: CALL_OW 337
// SaveForQuickRestart ;
11045: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
11049: LD_INT 525
11051: PPUSH
11052: LD_INT 700
11054: PPUSH
11055: CALL_OW 12
11059: PPUSH
11060: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
11064: LD_INT 5
11066: PPUSH
11067: LD_INT 82
11069: PPUSH
11070: LD_INT 38
11072: PPUSH
11073: LD_INT 10
11075: PPUSH
11076: LD_INT 1
11078: PPUSH
11079: CALL_OW 56
// wait ( 0 0$14 ) ;
11083: LD_INT 490
11085: PPUSH
11086: CALL_OW 67
// firstCrateSpawn := true ;
11090: LD_ADDR_EXP 41
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// end ;
11098: LD_VAR 0 1
11102: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
11103: LD_EXP 41
11107: IFFALSE 11496
11109: GO 11111
11111: DISABLE
11112: LD_INT 0
11114: PPUSH
// begin if IsOk ( Lisa ) then
11115: LD_EXP 2
11119: PPUSH
11120: CALL_OW 302
11124: IFFALSE 11140
// Say ( Lisa , DR0-Lisa-1 ) else
11126: LD_EXP 2
11130: PPUSH
11131: LD_STRING DR0-Lisa-1
11133: PPUSH
11134: CALL_OW 88
11138: GO 11286
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11140: LD_INT 22
11142: PUSH
11143: LD_INT 1
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 21
11152: PUSH
11153: LD_INT 1
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 26
11162: PUSH
11163: LD_INT 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: LD_INT 25
11175: PUSH
11176: LD_INT 1
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: LD_INT 25
11185: PUSH
11186: LD_INT 2
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 25
11195: PUSH
11196: LD_INT 3
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 25
11205: PUSH
11206: LD_INT 4
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: PPUSH
11226: CALL_OW 69
11230: PUSH
11231: LD_EXP 1
11235: PUSH
11236: LD_EXP 8
11240: PUSH
11241: LD_EXP 5
11245: PUSH
11246: LD_EXP 6
11250: PUSH
11251: LD_EXP 7
11255: PUSH
11256: LD_EXP 4
11260: PUSH
11261: LD_EXP 3
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: DIFF
11275: PPUSH
11276: LD_STRING DR0-Sol1-1
11278: PPUSH
11279: LD_STRING DR0-Sol1-1
11281: PPUSH
11282: CALL 7191 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11286: LD_ADDR_VAR 0 1
11290: PUSH
11291: LD_INT 22
11293: PUSH
11294: LD_INT 1
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: LD_INT 21
11303: PUSH
11304: LD_INT 1
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 26
11313: PUSH
11314: LD_INT 1
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 2
11323: PUSH
11324: LD_INT 25
11326: PUSH
11327: LD_INT 1
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: LD_INT 25
11336: PUSH
11337: LD_INT 2
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 25
11346: PUSH
11347: LD_INT 3
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 25
11356: PUSH
11357: LD_INT 4
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: PPUSH
11377: CALL_OW 69
11381: PUSH
11382: LD_EXP 1
11386: PUSH
11387: LD_EXP 8
11391: PUSH
11392: LD_EXP 5
11396: PUSH
11397: LD_EXP 2
11401: PUSH
11402: LD_EXP 6
11406: PUSH
11407: LD_EXP 7
11411: PUSH
11412: LD_EXP 4
11416: PUSH
11417: LD_EXP 3
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: DIFF
11432: PPUSH
11433: LD_STRING DR0-Sol2-1
11435: PPUSH
11436: LD_STRING DR0-Sol2-1
11438: PPUSH
11439: CALL 7191 0 3
11443: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11444: LD_EXP 4
11448: PPUSH
11449: CALL_OW 302
11453: IFFALSE 11467
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11455: LD_EXP 4
11459: PPUSH
11460: LD_STRING DR0-Cyrus-1
11462: PPUSH
11463: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11467: LD_EXP 2
11471: PPUSH
11472: CALL_OW 302
11476: PUSH
11477: LD_VAR 0 1
11481: OR
11482: IFFALSE 11496
// Say ( JMM , DR0-JMM-1 ) ;
11484: LD_EXP 1
11488: PPUSH
11489: LD_STRING DR0-JMM-1
11491: PPUSH
11492: CALL_OW 88
// end ;
11496: PPOPN 1
11498: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11499: LD_EXP 5
11503: PPUSH
11504: CALL_OW 302
11508: PUSH
11509: LD_INT 22
11511: PUSH
11512: LD_INT 1
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 25
11521: PUSH
11522: LD_INT 16
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 69
11537: PUSH
11538: LD_INT 0
11540: GREATER
11541: AND
11542: PUSH
11543: LD_INT 1
11545: PPUSH
11546: CALL_OW 463
11550: NOT
11551: AND
11552: IFFALSE 11830
11554: GO 11556
11556: DISABLE
// begin DialogueOn ;
11557: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11561: LD_EXP 5
11565: PPUSH
11566: LD_STRING D10-Frank-1
11568: PPUSH
11569: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11573: LD_INT 22
11575: PUSH
11576: LD_INT 1
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 21
11585: PUSH
11586: LD_INT 1
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: LD_INT 2
11595: PUSH
11596: LD_INT 25
11598: PUSH
11599: LD_INT 1
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 25
11608: PUSH
11609: LD_INT 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 25
11618: PUSH
11619: LD_INT 3
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 25
11628: PUSH
11629: LD_INT 4
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: LIST
11647: PPUSH
11648: CALL_OW 69
11652: PUSH
11653: LD_EXP 1
11657: PUSH
11658: LD_EXP 5
11662: PUSH
11663: LD_EXP 2
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: DIFF
11673: PPUSH
11674: LD_STRING D10-Sol1-1
11676: PPUSH
11677: LD_STRING D10-FSol1-1
11679: PPUSH
11680: CALL 7191 0 3
// Say ( Frank , D10-Frank-2 ) ;
11684: LD_EXP 5
11688: PPUSH
11689: LD_STRING D10-Frank-2
11691: PPUSH
11692: CALL_OW 88
// if IsOk ( Lisa ) then
11696: LD_EXP 2
11700: PPUSH
11701: CALL_OW 302
11705: IFFALSE 11721
// Say ( Lisa , D10-Lisa-2 ) else
11707: LD_EXP 2
11711: PPUSH
11712: LD_STRING D10-Lisa-2
11714: PPUSH
11715: CALL_OW 88
11719: GO 11826
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11721: LD_INT 22
11723: PUSH
11724: LD_INT 1
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 21
11733: PUSH
11734: LD_INT 1
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 2
11743: PUSH
11744: LD_INT 25
11746: PUSH
11747: LD_INT 1
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 25
11756: PUSH
11757: LD_INT 2
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 3
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 25
11776: PUSH
11777: LD_INT 4
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: LIST
11795: PPUSH
11796: CALL_OW 69
11800: PUSH
11801: LD_EXP 1
11805: PUSH
11806: LD_EXP 5
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: DIFF
11815: PPUSH
11816: LD_STRING D10-Sol1-2
11818: PPUSH
11819: LD_STRING D10-FSol1-2
11821: PPUSH
11822: CALL 7191 0 3
// DialogueOff ;
11826: CALL_OW 7
// end ;
11830: END
// every 10 10$30 trigger not InBattle ( 1 ) do
11831: LD_INT 1
11833: PPUSH
11834: CALL_OW 463
11838: NOT
11839: IFFALSE 12122
11841: GO 11843
11843: DISABLE
// begin HarrisonSupport ;
11844: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11848: LD_EXP 18
11852: PPUSH
11853: CALL_OW 310
11857: PPUSH
11858: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11862: LD_EXP 18
11866: PPUSH
11867: LD_STRING DEng-Eng1-1
11869: PPUSH
11870: CALL_OW 88
// wait ( 1 1$0 ) ;
11874: LD_INT 2100
11876: PPUSH
11877: CALL_OW 67
// DialogueOn ;
11881: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11885: LD_EXP 15
11889: PPUSH
11890: LD_STRING DRem-Har-1
11892: PPUSH
11893: CALL_OW 94
// if contactWithRussian then
11897: LD_EXP 23
11901: IFFALSE 11917
// Say ( JMM , DRem-JMM-1 ) else
11903: LD_EXP 1
11907: PPUSH
11908: LD_STRING DRem-JMM-1
11910: PPUSH
11911: CALL_OW 88
11915: GO 11929
// Say ( JMM , DRem-JMM-1a ) ;
11917: LD_EXP 1
11921: PPUSH
11922: LD_STRING DRem-JMM-1a
11924: PPUSH
11925: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
11929: LD_EXP 15
11933: PPUSH
11934: LD_STRING DRem-Har-2
11936: PPUSH
11937: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11941: LD_STRING DenisInDelta
11943: PPUSH
11944: LD_INT 0
11946: PPUSH
11947: CALL_OW 30
11951: IFFALSE 11967
// Say ( JMM , DRem-JMM-2 ) else
11953: LD_EXP 1
11957: PPUSH
11958: LD_STRING DRem-JMM-2
11960: PPUSH
11961: CALL_OW 88
11965: GO 11979
// Say ( JMM , DRem-JMM-2a ) ;
11967: LD_EXP 1
11971: PPUSH
11972: LD_STRING DRem-JMM-2a
11974: PPUSH
11975: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
11979: LD_EXP 15
11983: PPUSH
11984: LD_STRING DRem-Har-3
11986: PPUSH
11987: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11991: LD_EXP 1
11995: PPUSH
11996: LD_STRING DRem-JMM-3
11998: PPUSH
11999: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12003: LD_EXP 15
12007: PPUSH
12008: LD_STRING DRem-Har-4
12010: PPUSH
12011: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12015: LD_STRING DenisInDelta
12017: PPUSH
12018: LD_INT 0
12020: PPUSH
12021: CALL_OW 30
12025: IFFALSE 12085
// begin Say ( JMM , DRem-JMM-4 ) ;
12027: LD_EXP 1
12031: PPUSH
12032: LD_STRING DRem-JMM-4
12034: PPUSH
12035: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12039: LD_EXP 15
12043: PPUSH
12044: LD_STRING DRem-Har-5
12046: PPUSH
12047: CALL_OW 94
// DialogueOff ;
12051: CALL_OW 7
// wait ( 4 4$00 ) ;
12055: LD_INT 8400
12057: PPUSH
12058: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
12062: LD_INT 35
12064: PPUSH
12065: CALL_OW 67
// until not InBattle ( 1 ) ;
12069: LD_INT 1
12071: PPUSH
12072: CALL_OW 463
12076: NOT
12077: IFFALSE 12062
// SpawnDenis ;
12079: CALL 12123 0 0
// end else
12083: GO 12122
// begin DialogueOff ;
12085: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12089: LD_INT 36
12091: PPUSH
12092: LD_INT 1
12094: PPUSH
12095: LD_INT 1
12097: PPUSH
12098: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12102: LD_INT 15
12104: PPUSH
12105: LD_INT 1
12107: PPUSH
12108: LD_INT 1
12110: PPUSH
12111: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12115: LD_STRING MR
12117: PPUSH
12118: CALL_OW 337
// end ; end ;
12122: END
// export function SpawnDenis ; var tmp ; begin
12123: LD_INT 0
12125: PPUSH
12126: PPUSH
// PrepareDenis ;
12127: CALL 2244 0 0
// if not Denis then
12131: LD_EXP 9
12135: NOT
12136: IFFALSE 12140
// exit ;
12138: GO 12361
// CenterNowOnUnits ( Denis ) ;
12140: LD_EXP 9
12144: PPUSH
12145: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
12149: LD_ADDR_VAR 0 2
12153: PUSH
12154: LD_INT 22
12156: PUSH
12157: LD_INT 1
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PPUSH
12164: CALL_OW 69
12168: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
12169: LD_EXP 9
12173: PPUSH
12174: LD_VAR 0 2
12178: PPUSH
12179: LD_EXP 9
12183: PPUSH
12184: CALL_OW 74
12188: PPUSH
12189: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
12193: LD_INT 35
12195: PPUSH
12196: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
12200: LD_INT 22
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 91
12212: PUSH
12213: LD_EXP 9
12217: PUSH
12218: LD_INT 10
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PPUSH
12230: CALL_OW 69
12234: IFFALSE 12193
// SetSide ( Denis , 1 ) ;
12236: LD_EXP 9
12240: PPUSH
12241: LD_INT 1
12243: PPUSH
12244: CALL_OW 235
// DialogueOn ;
12248: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12252: LD_EXP 9
12256: PPUSH
12257: LD_STRING DDen-Den-1
12259: PPUSH
12260: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12264: LD_EXP 1
12268: PPUSH
12269: LD_STRING DDen-JMM-1
12271: PPUSH
12272: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12276: LD_EXP 9
12280: PPUSH
12281: LD_STRING DDen-Den-2
12283: PPUSH
12284: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12288: LD_EXP 1
12292: PPUSH
12293: LD_STRING DDen-JMM-2
12295: PPUSH
12296: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12300: LD_EXP 9
12304: PPUSH
12305: LD_STRING DDen-Den-3
12307: PPUSH
12308: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12312: LD_EXP 1
12316: PPUSH
12317: LD_STRING DDen-JMM-3
12319: PPUSH
12320: CALL_OW 88
// DialogueOff ;
12324: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12328: LD_INT 36
12330: PPUSH
12331: LD_INT 1
12333: PPUSH
12334: LD_INT 1
12336: PPUSH
12337: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12341: LD_INT 15
12343: PPUSH
12344: LD_INT 1
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12354: LD_STRING MR
12356: PPUSH
12357: CALL_OW 337
// end ;
12361: LD_VAR 0 1
12365: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
12366: LD_INT 22
12368: PUSH
12369: LD_INT 1
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 30
12378: PUSH
12379: LD_INT 15
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PPUSH
12390: CALL_OW 69
12394: PUSH
12395: LD_EXP 9
12399: PPUSH
12400: CALL_OW 302
12404: AND
12405: PUSH
12406: LD_INT 1
12408: PPUSH
12409: CALL_OW 463
12413: NOT
12414: AND
12415: IFFALSE 12444
12417: GO 12419
12419: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12420: LD_EXP 9
12424: PPUSH
12425: LD_STRING DR1-Den-1
12427: PPUSH
12428: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12432: LD_EXP 1
12436: PPUSH
12437: LD_STRING DR1-JMM-1
12439: PPUSH
12440: CALL_OW 88
// end ;
12444: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12445: LD_INT 15
12447: PPUSH
12448: LD_INT 1
12450: PPUSH
12451: CALL_OW 321
12455: PUSH
12456: LD_INT 2
12458: EQUAL
12459: PUSH
12460: LD_EXP 9
12464: PPUSH
12465: CALL_OW 302
12469: AND
12470: PUSH
12471: LD_INT 1
12473: PPUSH
12474: CALL_OW 463
12478: NOT
12479: AND
12480: IFFALSE 12689
12482: GO 12484
12484: DISABLE
// begin DialogueOn ;
12485: CALL_OW 6
// if IsOK ( Denis ) then
12489: LD_EXP 9
12493: PPUSH
12494: CALL_OW 302
12498: IFFALSE 12514
// Say ( Denis , DR2-Den-1 ) else
12500: LD_EXP 9
12504: PPUSH
12505: LD_STRING DR2-Den-1
12507: PPUSH
12508: CALL_OW 88
12512: GO 12573
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12514: LD_INT 22
12516: PUSH
12517: LD_INT 1
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 21
12526: PUSH
12527: LD_INT 1
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 25
12536: PUSH
12537: LD_INT 4
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: LIST
12548: PPUSH
12549: CALL_OW 69
12553: PUSH
12554: LD_EXP 1
12558: PUSH
12559: EMPTY
12560: LIST
12561: DIFF
12562: PPUSH
12563: LD_STRING DR2-Sci1-1
12565: PPUSH
12566: LD_STRING DR2-FSci1-1
12568: PPUSH
12569: CALL 7191 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12573: LD_EXP 1
12577: PPUSH
12578: LD_STRING DR2-JMM-1
12580: PPUSH
12581: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12585: LD_INT 22
12587: PUSH
12588: LD_INT 1
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PUSH
12595: LD_INT 21
12597: PUSH
12598: LD_INT 1
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 26
12607: PUSH
12608: LD_INT 1
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: LD_INT 23
12617: PUSH
12618: LD_INT 1
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PPUSH
12631: CALL_OW 69
12635: PUSH
12636: LD_EXP 1
12640: PUSH
12641: LD_EXP 9
12645: PUSH
12646: LD_EXP 8
12650: PUSH
12651: LD_EXP 5
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: DIFF
12662: PPUSH
12663: LD_STRING DR2-Sol1-1
12665: PPUSH
12666: LD_STRING 
12668: PPUSH
12669: CALL 7191 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12673: LD_EXP 1
12677: PPUSH
12678: LD_STRING DR2-JMM-2
12680: PPUSH
12681: CALL_OW 88
// DialogueOff ;
12685: CALL_OW 7
// end ;
12689: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
12690: LD_INT 22
12692: PUSH
12693: LD_INT 1
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 30
12702: PUSH
12703: LD_INT 36
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 69
12718: PUSH
12719: LD_INT 0
12721: EQUAL
12722: PUSH
12723: LD_INT 22
12725: PUSH
12726: LD_INT 1
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: LD_INT 21
12735: PUSH
12736: LD_INT 2
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: LD_INT 33
12745: PUSH
12746: LD_INT 2
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: PUSH
12763: LD_INT 0
12765: GREATER
12766: AND
12767: PUSH
12768: LD_EXP 24
12772: PUSH
12773: LD_INT 0
12775: EQUAL
12776: AND
12777: PUSH
12778: LD_INT 1
12780: PPUSH
12781: CALL_OW 463
12785: NOT
12786: AND
12787: IFFALSE 12924
12789: GO 12791
12791: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
12792: LD_INT 22
12794: PUSH
12795: LD_INT 1
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 21
12804: PUSH
12805: LD_INT 1
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 25
12814: PUSH
12815: LD_INT 3
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 26
12824: PUSH
12825: LD_INT 1
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PPUSH
12838: CALL_OW 69
12842: PUSH
12843: LD_EXP 1
12847: PUSH
12848: LD_EXP 6
12852: PUSH
12853: LD_EXP 7
12857: PUSH
12858: LD_EXP 9
12862: PUSH
12863: LD_EXP 16
12867: PUSH
12868: LD_EXP 3
12872: PUSH
12873: LD_EXP 4
12877: PUSH
12878: LD_EXP 2
12882: PUSH
12883: LD_EXP 5
12887: PUSH
12888: LD_EXP 8
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: DIFF
12905: PPUSH
12906: LD_STRING D3a-Mech1-1
12908: PPUSH
12909: LD_STRING 
12911: PPUSH
12912: CALL 7191 0 3
// firstTower = 2 ;
12916: LD_ADDR_EXP 24
12920: PUSH
12921: LD_INT 2
12923: ST_TO_ADDR
// end ;
12924: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12925: LD_INT 22
12927: PUSH
12928: LD_INT 3
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: LD_INT 21
12937: PUSH
12938: LD_INT 3
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PPUSH
12949: CALL_OW 69
12953: PUSH
12954: LD_INT 0
12956: EQUAL
12957: IFFALSE 13088
12959: GO 12961
12961: DISABLE
12962: LD_INT 0
12964: PPUSH
// begin stop_talking := true ;
12965: LD_ADDR_OWVAR 56
12969: PUSH
12970: LD_INT 1
12972: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12973: LD_ADDR_VAR 0 1
12977: PUSH
12978: LD_INT 22
12980: PUSH
12981: LD_INT 1
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 21
12990: PUSH
12991: LD_INT 1
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 2
13000: PUSH
13001: LD_INT 25
13003: PUSH
13004: LD_INT 1
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PUSH
13011: LD_INT 25
13013: PUSH
13014: LD_INT 2
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: LD_INT 25
13023: PUSH
13024: LD_INT 3
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PUSH
13031: LD_INT 25
13033: PUSH
13034: LD_INT 4
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: LIST
13052: PPUSH
13053: CALL_OW 69
13057: PUSH
13058: FOR_IN
13059: IFFALSE 13078
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
13061: LD_VAR 0 1
13065: PPUSH
13066: LD_INT 1
13068: PPUSH
13069: LD_INT 7500
13071: PPUSH
13072: CALL_OW 591
13076: GO 13058
13078: POP
13079: POP
// stop_talking := false ;
13080: LD_ADDR_OWVAR 56
13084: PUSH
13085: LD_INT 0
13087: ST_TO_ADDR
// end ;
13088: PPOPN 1
13090: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13091: LD_INT 22
13093: PUSH
13094: LD_INT 1
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: PUSH
13101: LD_INT 30
13103: PUSH
13104: LD_INT 36
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PPUSH
13115: CALL_OW 69
13119: PUSH
13120: LD_INT 22
13122: PUSH
13123: LD_INT 1
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PUSH
13130: LD_INT 21
13132: PUSH
13133: LD_INT 2
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 33
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: LIST
13154: PPUSH
13155: CALL_OW 69
13159: AND
13160: PUSH
13161: CALL 13713 0 0
13165: AND
13166: PUSH
13167: LD_INT 1
13169: PPUSH
13170: CALL_OW 463
13174: NOT
13175: AND
13176: IFFALSE 13710
13178: GO 13180
13180: DISABLE
13181: LD_INT 0
13183: PPUSH
13184: PPUSH
13185: PPUSH
13186: PPUSH
13187: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13188: LD_ADDR_VAR 0 3
13192: PUSH
13193: LD_INT 22
13195: PUSH
13196: LD_INT 1
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 30
13205: PUSH
13206: LD_INT 36
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PPUSH
13217: CALL_OW 69
13221: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13222: LD_ADDR_VAR 0 4
13226: PUSH
13227: LD_INT 22
13229: PUSH
13230: LD_INT 1
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 21
13239: PUSH
13240: LD_INT 2
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 33
13249: PUSH
13250: LD_INT 2
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: LIST
13261: PPUSH
13262: CALL_OW 69
13266: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13267: LD_ADDR_VAR 0 5
13271: PUSH
13272: EMPTY
13273: ST_TO_ADDR
// for i in tmpControlTowers do
13274: LD_ADDR_VAR 0 1
13278: PUSH
13279: LD_VAR 0 3
13283: PUSH
13284: FOR_IN
13285: IFFALSE 13708
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
13287: LD_EXP 1
13291: PPUSH
13292: CALL_OW 310
13296: PUSH
13297: LD_VAR 0 1
13301: EQUAL
13302: PUSH
13303: LD_EXP 1
13307: PPUSH
13308: CALL_OW 257
13312: PUSH
13313: LD_INT 3
13315: EQUAL
13316: AND
13317: IFFALSE 13451
// begin InGameOn ;
13319: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13323: LD_VAR 0 4
13327: PUSH
13328: LD_INT 1
13330: ARRAY
13331: PPUSH
13332: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13336: LD_EXP 1
13340: PPUSH
13341: LD_STRING D4a-JMM-1
13343: PPUSH
13344: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13348: LD_VAR 0 4
13352: PUSH
13353: LD_INT 1
13355: ARRAY
13356: PPUSH
13357: LD_EXP 1
13361: PPUSH
13362: CALL_OW 53
// wait ( 0 0$1 ) ;
13366: LD_INT 35
13368: PPUSH
13369: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13373: LD_VAR 0 4
13377: PUSH
13378: LD_INT 1
13380: ARRAY
13381: PPUSH
13382: LD_VAR 0 4
13386: PUSH
13387: LD_INT 1
13389: ARRAY
13390: PPUSH
13391: CALL_OW 250
13395: PUSH
13396: LD_INT 3
13398: PLUS
13399: PPUSH
13400: LD_VAR 0 4
13404: PUSH
13405: LD_INT 1
13407: ARRAY
13408: PPUSH
13409: CALL_OW 251
13413: PUSH
13414: LD_INT 2
13416: MINUS
13417: PPUSH
13418: CALL_OW 111
// wait ( 0 0$2 ) ;
13422: LD_INT 70
13424: PPUSH
13425: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13429: LD_EXP 1
13433: PPUSH
13434: LD_STRING D4b-JMM-1
13436: PPUSH
13437: CALL_OW 88
// InGameOff ;
13441: CALL_OW 9
// exit ;
13445: POP
13446: POP
13447: GO 13710
// end else
13449: GO 13706
// begin InGameOn ;
13451: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13455: LD_ADDR_VAR 0 5
13459: PUSH
13460: LD_VAR 0 1
13464: PPUSH
13465: CALL_OW 313
13469: PPUSH
13470: LD_INT 25
13472: PUSH
13473: LD_INT 3
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 72
13484: ST_TO_ADDR
// if not tmpMechanicInside then
13485: LD_VAR 0 5
13489: NOT
13490: IFFALSE 13494
// continue ;
13492: GO 13284
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13494: LD_VAR 0 5
13498: PUSH
13499: LD_INT 1
13501: ARRAY
13502: PPUSH
13503: CALL_OW 258
13507: PUSH
13508: LD_INT 1
13510: EQUAL
13511: IFFALSE 13531
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13513: LD_VAR 0 5
13517: PUSH
13518: LD_INT 1
13520: ARRAY
13521: PPUSH
13522: LD_STRING D4a-Mech1-1
13524: PPUSH
13525: CALL_OW 88
13529: GO 13547
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13531: LD_VAR 0 5
13535: PUSH
13536: LD_INT 1
13538: ARRAY
13539: PPUSH
13540: LD_STRING D4a-FMech1-1
13542: PPUSH
13543: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13547: LD_VAR 0 4
13551: PUSH
13552: LD_INT 1
13554: ARRAY
13555: PPUSH
13556: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13560: LD_VAR 0 4
13564: PUSH
13565: LD_INT 1
13567: ARRAY
13568: PPUSH
13569: LD_VAR 0 5
13573: PUSH
13574: LD_INT 1
13576: ARRAY
13577: PPUSH
13578: CALL_OW 53
// wait ( 0 0$1 ) ;
13582: LD_INT 35
13584: PPUSH
13585: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13589: LD_VAR 0 4
13593: PUSH
13594: LD_INT 1
13596: ARRAY
13597: PPUSH
13598: LD_VAR 0 4
13602: PUSH
13603: LD_INT 1
13605: ARRAY
13606: PPUSH
13607: CALL_OW 250
13611: PUSH
13612: LD_INT 3
13614: PLUS
13615: PPUSH
13616: LD_VAR 0 4
13620: PUSH
13621: LD_INT 1
13623: ARRAY
13624: PPUSH
13625: CALL_OW 251
13629: PUSH
13630: LD_INT 2
13632: MINUS
13633: PPUSH
13634: CALL_OW 111
// wait ( 0 0$2 ) ;
13638: LD_INT 70
13640: PPUSH
13641: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13645: LD_VAR 0 5
13649: PUSH
13650: LD_INT 1
13652: ARRAY
13653: PPUSH
13654: CALL_OW 258
13658: PUSH
13659: LD_INT 1
13661: EQUAL
13662: IFFALSE 13682
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
13664: LD_VAR 0 5
13668: PUSH
13669: LD_INT 1
13671: ARRAY
13672: PPUSH
13673: LD_STRING D4b-Mech1-1
13675: PPUSH
13676: CALL_OW 88
13680: GO 13698
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13682: LD_VAR 0 5
13686: PUSH
13687: LD_INT 1
13689: ARRAY
13690: PPUSH
13691: LD_STRING D4b-FMech1-1
13693: PPUSH
13694: CALL_OW 88
// InGameOff ;
13698: CALL_OW 9
// exit ;
13702: POP
13703: POP
13704: GO 13710
// end ; end ;
13706: GO 13284
13708: POP
13709: POP
// end ;
13710: PPOPN 5
13712: END
// function CheckMehInside ; var i , j , tmp ; begin
13713: LD_INT 0
13715: PPUSH
13716: PPUSH
13717: PPUSH
13718: PPUSH
// result := false ;
13719: LD_ADDR_VAR 0 1
13723: PUSH
13724: LD_INT 0
13726: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13727: LD_ADDR_VAR 0 4
13731: PUSH
13732: LD_INT 22
13734: PUSH
13735: LD_INT 1
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PUSH
13742: LD_INT 30
13744: PUSH
13745: LD_INT 36
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PPUSH
13756: CALL_OW 69
13760: ST_TO_ADDR
// if not tmp then
13761: LD_VAR 0 4
13765: NOT
13766: IFFALSE 13770
// exit ;
13768: GO 13834
// for i in tmp do
13770: LD_ADDR_VAR 0 2
13774: PUSH
13775: LD_VAR 0 4
13779: PUSH
13780: FOR_IN
13781: IFFALSE 13832
// for j in UnitsInside ( i ) do
13783: LD_ADDR_VAR 0 3
13787: PUSH
13788: LD_VAR 0 2
13792: PPUSH
13793: CALL_OW 313
13797: PUSH
13798: FOR_IN
13799: IFFALSE 13828
// if GetClass ( j ) = class_mechanic then
13801: LD_VAR 0 3
13805: PPUSH
13806: CALL_OW 257
13810: PUSH
13811: LD_INT 3
13813: EQUAL
13814: IFFALSE 13826
// begin result := true ;
13816: LD_ADDR_VAR 0 1
13820: PUSH
13821: LD_INT 1
13823: ST_TO_ADDR
// break ;
13824: GO 13828
// end ;
13826: GO 13798
13828: POP
13829: POP
13830: GO 13780
13832: POP
13833: POP
// end ;
13834: LD_VAR 0 1
13838: RET
// every 12 12$0 do
13839: GO 13841
13841: DISABLE
// begin repeat wait ( 0 0$1 ) ;
13842: LD_INT 35
13844: PPUSH
13845: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 5 5$00 ;
13849: LD_INT 1
13851: PPUSH
13852: CALL_OW 463
13856: NOT
13857: PUSH
13858: LD_INT 32
13860: PPUSH
13861: LD_INT 81
13863: PUSH
13864: LD_INT 1
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PPUSH
13871: CALL_OW 70
13875: NOT
13876: AND
13877: PUSH
13878: LD_EXP 27
13882: PUSH
13883: LD_INT 10500
13885: LESS
13886: OR
13887: IFFALSE 13842
// PrepareKurt ;
13889: CALL 16522 0 0
// end ;
13893: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
13894: LD_EXP 16
13898: PPUSH
13899: CALL_OW 302
13903: PUSH
13904: LD_EXP 16
13908: PPUSH
13909: CALL_OW 255
13913: PUSH
13914: LD_INT 1
13916: EQUAL
13917: AND
13918: PUSH
13919: LD_EXP 2
13923: AND
13924: IFFALSE 14089
13926: GO 13928
13928: DISABLE
// begin wait ( 0 0$50 ) ;
13929: LD_INT 1750
13931: PPUSH
13932: CALL_OW 67
// if not IsOk ( Joan ) then
13936: LD_EXP 16
13940: PPUSH
13941: CALL_OW 302
13945: NOT
13946: IFFALSE 13950
// exit ;
13948: GO 14089
// if IsOK ( Lisa ) then
13950: LD_EXP 2
13954: PPUSH
13955: CALL_OW 302
13959: IFFALSE 14089
// begin DialogueOn ;
13961: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13965: LD_EXP 2
13969: PPUSH
13970: LD_STRING D7-Lisa-1
13972: PPUSH
13973: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13977: LD_EXP 1
13981: PPUSH
13982: LD_STRING D7-JMM-1
13984: PPUSH
13985: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13989: LD_EXP 2
13993: PPUSH
13994: LD_STRING D7-Lisa-2
13996: PPUSH
13997: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14001: LD_EXP 1
14005: PPUSH
14006: LD_STRING D7-JMM-2
14008: PPUSH
14009: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14013: LD_EXP 2
14017: PPUSH
14018: LD_STRING D7-Lisa-3
14020: PPUSH
14021: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14025: LD_EXP 1
14029: PPUSH
14030: LD_STRING D7-JMM-3
14032: PPUSH
14033: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14037: LD_EXP 2
14041: PPUSH
14042: LD_STRING D7-Lisa-4
14044: PPUSH
14045: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14049: LD_EXP 1
14053: PPUSH
14054: LD_STRING D7-JMM-4
14056: PPUSH
14057: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14061: LD_EXP 1
14065: PPUSH
14066: LD_STRING D7-JMM-4a
14068: PPUSH
14069: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14073: LD_EXP 2
14077: PPUSH
14078: LD_STRING D7-Lisa-5
14080: PPUSH
14081: CALL_OW 88
// DialogueOff ;
14085: CALL_OW 7
// end ; end ;
14089: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
14090: LD_EXP 14
14094: PUSH
14095: LD_INT 22
14097: PUSH
14098: LD_INT 1
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 91
14107: PUSH
14108: LD_EXP 14
14112: PUSH
14113: LD_INT 10
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 2
14123: PUSH
14124: LD_INT 25
14126: PUSH
14127: LD_INT 1
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 25
14136: PUSH
14137: LD_INT 2
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 25
14146: PUSH
14147: LD_INT 3
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 25
14156: PUSH
14157: LD_INT 4
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: LIST
14175: PPUSH
14176: CALL_OW 69
14180: PUSH
14181: LD_INT 1
14183: GREATER
14184: AND
14185: IFFALSE 14202
14187: GO 14189
14189: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14190: LD_EXP 14
14194: PPUSH
14195: LD_STRING D5-Sol1-1
14197: PPUSH
14198: CALL_OW 88
14202: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14203: LD_INT 22
14205: PUSH
14206: LD_INT 1
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: LD_INT 33
14215: PUSH
14216: LD_INT 2
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PPUSH
14227: CALL_OW 69
14231: PUSH
14232: LD_INT 2
14234: GREATEREQUAL
14235: IFFALSE 14255
14237: GO 14239
14239: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14240: LD_STRING MRa
14242: PPUSH
14243: CALL_OW 337
// remoteVehiclesBuild := 1 ;
14247: LD_ADDR_EXP 29
14251: PUSH
14252: LD_INT 1
14254: ST_TO_ADDR
// end ;
14255: END
// every 2 2$00 do var i , last ;
14256: GO 14258
14258: DISABLE
14259: LD_INT 0
14261: PPUSH
14262: PPUSH
// begin last := 8 ;
14263: LD_ADDR_VAR 0 2
14267: PUSH
14268: LD_INT 8
14270: ST_TO_ADDR
// for i = 1 to last do
14271: LD_ADDR_VAR 0 1
14275: PUSH
14276: DOUBLE
14277: LD_INT 1
14279: DEC
14280: ST_TO_ADDR
14281: LD_VAR 0 2
14285: PUSH
14286: FOR_TO
14287: IFFALSE 14315
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
14289: LD_INT 6300
14291: PPUSH
14292: LD_INT 12600
14294: PPUSH
14295: CALL_OW 12
14299: PPUSH
14300: CALL_OW 67
// PrepareRandoms ( i ) ;
14304: LD_VAR 0 1
14308: PPUSH
14309: CALL 4129 0 1
// end ;
14313: GO 14286
14315: POP
14316: POP
// end ;
14317: PPOPN 2
14319: END
// every 5 5$20 do
14320: GO 14322
14322: DISABLE
// begin DialogueOn ;
14323: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14327: LD_EXP 10
14331: PPUSH
14332: LD_STRING D12a-Sci-1
14334: PPUSH
14335: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14339: LD_EXP 1
14343: PPUSH
14344: LD_STRING D12a-JMM-1
14346: PPUSH
14347: CALL_OW 88
// DialogueOff ;
14351: CALL_OW 7
// cratesStatus := 1 ;
14355: LD_ADDR_EXP 39
14359: PUSH
14360: LD_INT 1
14362: ST_TO_ADDR
// end ;
14363: END
// every 13 13$0 do
14364: GO 14366
14366: DISABLE
// begin DialogueOn ;
14367: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14371: LD_EXP 10
14375: PPUSH
14376: LD_STRING D12b-Sci-1
14378: PPUSH
14379: CALL_OW 94
// DialogueOff ;
14383: CALL_OW 7
// cratesStatus := 2 ;
14387: LD_ADDR_EXP 39
14391: PUSH
14392: LD_INT 2
14394: ST_TO_ADDR
// BuildBulldozer ;
14395: CALL 10234 0 0
// end ;
14399: END
// every 32 32$0 do
14400: GO 14402
14402: DISABLE
// begin DialogueOn ;
14403: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14407: LD_EXP 10
14411: PPUSH
14412: LD_STRING D12c-Sci-1
14414: PPUSH
14415: CALL_OW 94
// DialogueOff ;
14419: CALL_OW 7
// wait ( 3 3$0 ) ;
14423: LD_INT 6300
14425: PPUSH
14426: CALL_OW 67
// DialogueOn ;
14430: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14434: LD_EXP 10
14438: PPUSH
14439: LD_STRING D12d-Sci-1
14441: PPUSH
14442: CALL_OW 94
// DialogueOff ;
14446: CALL_OW 7
// cratesStatus = 1 ;
14450: LD_ADDR_EXP 39
14454: PUSH
14455: LD_INT 1
14457: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14458: CALL 20772 0 0
// wait ( 2 2$30 ) ;
14462: LD_INT 5250
14464: PPUSH
14465: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14469: LD_INT 35
14471: PPUSH
14472: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14476: LD_INT 1
14478: PPUSH
14479: CALL_OW 463
14483: NOT
14484: PUSH
14485: LD_INT 32
14487: PPUSH
14488: LD_INT 81
14490: PUSH
14491: LD_INT 1
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PPUSH
14498: CALL_OW 70
14502: NOT
14503: AND
14504: PUSH
14505: LD_EXP 27
14509: PUSH
14510: LD_INT 6300
14512: LESS
14513: OR
14514: IFFALSE 14469
// PrepareJoan ;
14516: CALL 3085 0 0
// end ;
14520: END
// every 42 42$0 do
14521: GO 14523
14523: DISABLE
// begin DialogueOn ;
14524: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14528: LD_EXP 10
14532: PPUSH
14533: LD_STRING D12e-Sci-1
14535: PPUSH
14536: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14540: LD_EXP 1
14544: PPUSH
14545: LD_STRING D12e-JMM-1
14547: PPUSH
14548: CALL_OW 88
// DialogueOff ;
14552: CALL_OW 7
// cratesStatus := 2 ;
14556: LD_ADDR_EXP 39
14560: PUSH
14561: LD_INT 2
14563: ST_TO_ADDR
// end ; end_of_file
14564: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14565: LD_VAR 0 1
14569: PUSH
14570: LD_INT 1
14572: EQUAL
14573: PUSH
14574: LD_VAR 0 2
14578: PUSH
14579: LD_INT 3
14581: EQUAL
14582: AND
14583: IFFALSE 14593
// contactWithRussian := 1 ;
14585: LD_ADDR_EXP 23
14589: PUSH
14590: LD_INT 1
14592: ST_TO_ADDR
// end ;
14593: PPOPN 2
14595: END
// on BuildingComplete ( building ) do var i ;
14596: LD_INT 0
14598: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14599: LD_VAR 0 1
14603: PPUSH
14604: CALL_OW 266
14608: PUSH
14609: LD_INT 36
14611: EQUAL
14612: PUSH
14613: LD_VAR 0 1
14617: PPUSH
14618: CALL_OW 255
14622: PUSH
14623: LD_INT 1
14625: EQUAL
14626: AND
14627: PUSH
14628: LD_EXP 24
14632: PUSH
14633: LD_INT 0
14635: EQUAL
14636: AND
14637: IFFALSE 14717
// begin firstTower = 1 ;
14639: LD_ADDR_EXP 24
14643: PUSH
14644: LD_INT 1
14646: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14647: LD_INT 22
14649: PUSH
14650: LD_INT 1
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: LD_INT 21
14659: PUSH
14660: LD_INT 1
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 25
14669: PUSH
14670: LD_INT 3
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 26
14679: PUSH
14680: LD_INT 1
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: PPUSH
14693: CALL_OW 69
14697: PUSH
14698: LD_EXP 1
14702: PUSH
14703: EMPTY
14704: LIST
14705: DIFF
14706: PPUSH
14707: LD_STRING D3b-Mech1-1
14709: PPUSH
14710: LD_STRING D3b-Mech1-1
14712: PPUSH
14713: CALL 7191 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14717: LD_VAR 0 1
14721: PPUSH
14722: CALL_OW 266
14726: PUSH
14727: LD_INT 0
14729: EQUAL
14730: PUSH
14731: LD_VAR 0 1
14735: PPUSH
14736: CALL_OW 255
14740: PUSH
14741: LD_INT 1
14743: EQUAL
14744: AND
14745: IFFALSE 14759
// SetBName ( building , theta ) ;
14747: LD_VAR 0 1
14751: PPUSH
14752: LD_STRING theta
14754: PPUSH
14755: CALL_OW 500
// if GetSide ( building ) = 3 then
14759: LD_VAR 0 1
14763: PPUSH
14764: CALL_OW 255
14768: PUSH
14769: LD_INT 3
14771: EQUAL
14772: IFFALSE 14812
// begin for i := 1 to 4 do
14774: LD_ADDR_VAR 0 2
14778: PUSH
14779: DOUBLE
14780: LD_INT 1
14782: DEC
14783: ST_TO_ADDR
14784: LD_INT 4
14786: PUSH
14787: FOR_TO
14788: IFFALSE 14810
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14790: LD_ADDR_EXP 32
14794: PUSH
14795: LD_EXP 32
14799: PPUSH
14800: LD_INT 1
14802: PPUSH
14803: CALL_OW 3
14807: ST_TO_ADDR
14808: GO 14787
14810: POP
14811: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14812: LD_VAR 0 1
14816: PPUSH
14817: CALL_OW 255
14821: PUSH
14822: LD_INT 3
14824: EQUAL
14825: PUSH
14826: LD_VAR 0 1
14830: PPUSH
14831: CALL_OW 266
14835: PUSH
14836: LD_INT 0
14838: EQUAL
14839: PUSH
14840: LD_VAR 0 1
14844: PPUSH
14845: CALL_OW 266
14849: PUSH
14850: LD_INT 2
14852: EQUAL
14853: OR
14854: PUSH
14855: LD_VAR 0 1
14859: PPUSH
14860: CALL_OW 266
14864: PUSH
14865: LD_INT 4
14867: EQUAL
14868: OR
14869: PUSH
14870: EMPTY
14871: LIST
14872: AND
14873: IFFALSE 14884
// ComUpgrade ( building ) ;
14875: LD_VAR 0 1
14879: PPUSH
14880: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14884: LD_VAR 0 1
14888: PPUSH
14889: CALL_OW 255
14893: PUSH
14894: LD_INT 3
14896: EQUAL
14897: PUSH
14898: LD_VAR 0 1
14902: PPUSH
14903: CALL_OW 266
14907: PUSH
14908: LD_INT 32
14910: EQUAL
14911: AND
14912: IFFALSE 14953
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14914: LD_VAR 0 1
14918: PPUSH
14919: LD_INT 42
14921: PUSH
14922: LD_INT 43
14924: PUSH
14925: LD_INT 44
14927: PUSH
14928: LD_INT 46
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 1
14939: PPUSH
14940: LD_INT 4
14942: PPUSH
14943: CALL_OW 12
14947: ARRAY
14948: PPUSH
14949: CALL_OW 208
// end ;
14953: PPOPN 2
14955: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14956: LD_VAR 0 1
14960: PPUSH
14961: CALL 37339 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
14965: LD_VAR 0 1
14969: PUSH
14970: LD_INT 22
14972: PUSH
14973: LD_INT 1
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: LD_INT 21
14982: PUSH
14983: LD_INT 1
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 23
14992: PUSH
14993: LD_INT 1
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: LIST
15004: PPUSH
15005: CALL_OW 69
15009: IN
15010: IFFALSE 15026
// killCounter := killCounter + 1 ;
15012: LD_ADDR_EXP 46
15016: PUSH
15017: LD_EXP 46
15021: PUSH
15022: LD_INT 1
15024: PLUS
15025: ST_TO_ADDR
// if unit in ruAttackersInForest then
15026: LD_VAR 0 1
15030: PUSH
15031: LD_EXP 49
15035: IN
15036: IFFALSE 15054
// ruAttackersInForest := ruAttackersInForest diff unit ;
15038: LD_ADDR_EXP 49
15042: PUSH
15043: LD_EXP 49
15047: PUSH
15048: LD_VAR 0 1
15052: DIFF
15053: ST_TO_ADDR
// if unit in ruAttackers then
15054: LD_VAR 0 1
15058: PUSH
15059: LD_EXP 48
15063: IN
15064: IFFALSE 15082
// ruAttackers := ruAttackers diff unit ;
15066: LD_ADDR_EXP 48
15070: PUSH
15071: LD_EXP 48
15075: PUSH
15076: LD_VAR 0 1
15080: DIFF
15081: ST_TO_ADDR
// if unit = JMM then
15082: LD_VAR 0 1
15086: PUSH
15087: LD_EXP 1
15091: EQUAL
15092: IFFALSE 15101
// YouLost ( JMM ) ;
15094: LD_STRING JMM
15096: PPUSH
15097: CALL_OW 104
// if unit = Joan then
15101: LD_VAR 0 1
15105: PUSH
15106: LD_EXP 16
15110: EQUAL
15111: IFFALSE 15121
// JoanStatus := 0 ;
15113: LD_ADDR_EXP 17
15117: PUSH
15118: LD_INT 0
15120: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
15121: LD_VAR 0 1
15125: PPUSH
15126: CALL_OW 255
15130: PUSH
15131: LD_INT 1
15133: EQUAL
15134: PUSH
15135: LD_VAR 0 1
15139: PPUSH
15140: CALL_OW 247
15144: PUSH
15145: LD_INT 1
15147: EQUAL
15148: AND
15149: PUSH
15150: LD_VAR 0 1
15154: PPUSH
15155: CALL_OW 248
15159: PUSH
15160: LD_INT 1
15162: EQUAL
15163: AND
15164: IFFALSE 15180
// unitLost = unitLost + 1 ;
15166: LD_ADDR_EXP 31
15170: PUSH
15171: LD_EXP 31
15175: PUSH
15176: LD_INT 1
15178: PLUS
15179: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
15180: LD_VAR 0 1
15184: PPUSH
15185: CALL_OW 255
15189: PUSH
15190: LD_INT 3
15192: EQUAL
15193: PUSH
15194: LD_VAR 0 1
15198: PPUSH
15199: CALL_OW 247
15203: PUSH
15204: LD_INT 3
15206: EQUAL
15207: AND
15208: PUSH
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 266
15218: PUSH
15219: LD_INT 4
15221: PUSH
15222: LD_INT 5
15224: PUSH
15225: LD_INT 32
15227: PUSH
15228: LD_INT 31
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: IN
15237: AND
15238: IFFALSE 15324
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15240: LD_ADDR_EXP 32
15244: PUSH
15245: LD_EXP 32
15249: PUSH
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 266
15259: ADD
15260: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15261: LD_ADDR_EXP 32
15265: PUSH
15266: LD_EXP 32
15270: PUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 250
15280: ADD
15281: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15282: LD_ADDR_EXP 32
15286: PUSH
15287: LD_EXP 32
15291: PUSH
15292: LD_VAR 0 1
15296: PPUSH
15297: CALL_OW 251
15301: ADD
15302: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15303: LD_ADDR_EXP 32
15307: PUSH
15308: LD_EXP 32
15312: PUSH
15313: LD_VAR 0 1
15317: PPUSH
15318: CALL_OW 254
15322: ADD
15323: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15324: LD_EXP 47
15328: PUSH
15329: LD_VAR 0 1
15333: PPUSH
15334: CALL_OW 257
15338: PUSH
15339: LD_INT 3
15341: EQUAL
15342: AND
15343: PUSH
15344: LD_VAR 0 1
15348: PPUSH
15349: CALL_OW 255
15353: PUSH
15354: LD_INT 3
15356: EQUAL
15357: AND
15358: PUSH
15359: LD_INT 21
15361: PPUSH
15362: CALL_OW 302
15366: AND
15367: PUSH
15368: LD_INT 21
15370: PPUSH
15371: CALL_OW 255
15375: PUSH
15376: LD_INT 3
15378: EQUAL
15379: AND
15380: IFFALSE 15462
// begin ruMechCounter := ruMechCounter - 1 ;
15382: LD_ADDR_EXP 47
15386: PUSH
15387: LD_EXP 47
15391: PUSH
15392: LD_INT 1
15394: MINUS
15395: ST_TO_ADDR
// uc_side := 3 ;
15396: LD_ADDR_OWVAR 20
15400: PUSH
15401: LD_INT 3
15403: ST_TO_ADDR
// uc_nation := 3 ;
15404: LD_ADDR_OWVAR 21
15408: PUSH
15409: LD_INT 3
15411: ST_TO_ADDR
// hc_gallery :=  ;
15412: LD_ADDR_OWVAR 33
15416: PUSH
15417: LD_STRING 
15419: ST_TO_ADDR
// hc_name :=  ;
15420: LD_ADDR_OWVAR 26
15424: PUSH
15425: LD_STRING 
15427: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15428: LD_INT 0
15430: PPUSH
15431: LD_EXP 35
15435: PPUSH
15436: LD_EXP 36
15440: PPUSH
15441: CALL_OW 12
15445: PPUSH
15446: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15450: CALL_OW 44
15454: PPUSH
15455: LD_INT 21
15457: PPUSH
15458: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15462: LD_VAR 0 1
15466: PPUSH
15467: CALL_OW 255
15471: PUSH
15472: LD_INT 3
15474: EQUAL
15475: PUSH
15476: LD_VAR 0 1
15480: PPUSH
15481: CALL_OW 264
15485: PUSH
15486: LD_INT 52
15488: EQUAL
15489: AND
15490: PUSH
15491: LD_INT 21
15493: PPUSH
15494: CALL_OW 302
15498: AND
15499: PUSH
15500: LD_INT 21
15502: PPUSH
15503: CALL_OW 255
15507: PUSH
15508: LD_INT 3
15510: EQUAL
15511: AND
15512: IFFALSE 15533
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15514: LD_INT 21
15516: PPUSH
15517: LD_INT 22
15519: PPUSH
15520: LD_INT 1
15522: PPUSH
15523: LD_INT 1
15525: PPUSH
15526: LD_INT 52
15528: PPUSH
15529: CALL_OW 125
// end ;
15533: PPOPN 1
15535: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15536: LD_INT 0
15538: PPUSH
15539: PPUSH
15540: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15541: LD_VAR 0 1
15545: PPUSH
15546: LD_VAR 0 2
15550: PPUSH
15551: CALL 37459 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15555: LD_VAR 0 1
15559: PPUSH
15560: CALL_OW 255
15564: PUSH
15565: LD_INT 3
15567: EQUAL
15568: PUSH
15569: LD_VAR 0 1
15573: PPUSH
15574: CALL_OW 264
15578: PUSH
15579: LD_INT 51
15581: PUSH
15582: LD_INT 52
15584: PUSH
15585: LD_INT 53
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: LIST
15592: IN
15593: NOT
15594: AND
15595: IFFALSE 15626
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15597: LD_ADDR_EXP 48
15601: PUSH
15602: LD_EXP 48
15606: PPUSH
15607: LD_EXP 48
15611: PUSH
15612: LD_INT 1
15614: PLUS
15615: PPUSH
15616: LD_VAR 0 1
15620: PPUSH
15621: CALL_OW 1
15625: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15626: LD_VAR 0 1
15630: PPUSH
15631: CALL_OW 264
15635: PUSH
15636: LD_INT 53
15638: EQUAL
15639: IFFALSE 15794
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15641: LD_VAR 0 1
15645: PPUSH
15646: LD_INT 60
15648: PPUSH
15649: LD_INT 85
15651: PPUSH
15652: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
15656: LD_VAR 0 1
15660: PPUSH
15661: LD_INT 43
15663: PPUSH
15664: LD_INT 69
15666: PPUSH
15667: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
15671: LD_VAR 0 1
15675: PPUSH
15676: LD_INT 37
15678: PPUSH
15679: LD_INT 46
15681: PPUSH
15682: CALL_OW 171
// wait ( 0 0$1 ) ;
15686: LD_INT 35
15688: PPUSH
15689: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15693: LD_INT 35
15695: PPUSH
15696: CALL_OW 67
// until not HasTask ( vehicle ) ;
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 314
15709: NOT
15710: IFFALSE 15693
// CutTreeInArea ( vehicle , cutTreeArea ) ;
15712: LD_VAR 0 1
15716: PPUSH
15717: LD_INT 34
15719: PPUSH
15720: CALL 10286 0 2
// repeat wait ( 0 0$1 ) ;
15724: LD_INT 35
15726: PPUSH
15727: CALL_OW 67
// until not HasTask ( vehicle ) ;
15731: LD_VAR 0 1
15735: PPUSH
15736: CALL_OW 314
15740: NOT
15741: IFFALSE 15724
// un := IsDrivenBy ( vehicle ) ;
15743: LD_ADDR_VAR 0 4
15747: PUSH
15748: LD_VAR 0 1
15752: PPUSH
15753: CALL_OW 311
15757: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
15758: LD_VAR 0 4
15762: PPUSH
15763: LD_INT 96
15765: PPUSH
15766: LD_INT 77
15768: PPUSH
15769: CALL_OW 171
// AddComExitVehicle ( un ) ;
15773: LD_VAR 0 4
15777: PPUSH
15778: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
15782: LD_VAR 0 4
15786: PPUSH
15787: LD_INT 17
15789: PPUSH
15790: CALL_OW 180
// end ; end ;
15794: PPOPN 5
15796: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15797: LD_VAR 0 1
15801: PPUSH
15802: CALL_OW 255
15806: PUSH
15807: LD_INT 3
15809: EQUAL
15810: IFFALSE 15841
// begin tamedApemans = tamedApemans + 1 ;
15812: LD_ADDR_EXP 33
15816: PUSH
15817: LD_EXP 33
15821: PUSH
15822: LD_INT 1
15824: PLUS
15825: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
15826: LD_VAR 0 1
15830: PPUSH
15831: LD_INT 106
15833: PPUSH
15834: LD_INT 85
15836: PPUSH
15837: CALL_OW 111
// end ; end ;
15841: PPOPN 2
15843: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
15844: LD_VAR 0 2
15848: PPUSH
15849: CALL_OW 255
15853: PUSH
15854: LD_INT 3
15856: EQUAL
15857: PUSH
15858: LD_VAR 0 1
15862: PPUSH
15863: CALL_OW 255
15867: PUSH
15868: LD_INT 3
15870: EQUAL
15871: AND
15872: PUSH
15873: LD_INT 21
15875: PPUSH
15876: CALL_OW 302
15880: AND
15881: IFFALSE 15895
// ComEnterUnit ( human , rufab ) ;
15883: LD_VAR 0 1
15887: PPUSH
15888: LD_INT 21
15890: PPUSH
15891: CALL_OW 120
// end ;
15895: PPOPN 4
15897: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
15898: LD_VAR 0 1
15902: PUSH
15903: LD_INT 21
15905: EQUAL
15906: PUSH
15907: LD_VAR 0 2
15911: PPUSH
15912: CALL_OW 255
15916: PUSH
15917: LD_INT 3
15919: EQUAL
15920: AND
15921: IFFALSE 15935
// SetLives ( human , 1000 ) ;
15923: LD_VAR 0 2
15927: PPUSH
15928: LD_INT 1000
15930: PPUSH
15931: CALL_OW 234
// end ;
15935: PPOPN 2
15937: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15938: LD_VAR 0 1
15942: PPUSH
15943: CALL 37443 0 1
// end ; end_of_file
15947: PPOPN 1
15949: END
// every 0 0$30 trigger cratesStatus = 1 do
15950: LD_EXP 39
15954: PUSH
15955: LD_INT 1
15957: EQUAL
15958: IFFALSE 16011
15960: GO 15962
15962: DISABLE
// begin enable ;
15963: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
15964: LD_INT 350
15966: PUSH
15967: LD_INT 875
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 1
15976: PPUSH
15977: LD_INT 2
15979: PPUSH
15980: CALL_OW 12
15984: ARRAY
15985: PPUSH
15986: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
15990: LD_INT 1
15992: PPUSH
15993: LD_INT 5
15995: PPUSH
15996: CALL_OW 12
16000: PPUSH
16001: LD_INT 7
16003: PPUSH
16004: LD_INT 1
16006: PPUSH
16007: CALL_OW 55
// end ;
16011: END
// every 1 1$0 trigger cratesStatus = 2 do
16012: LD_EXP 39
16016: PUSH
16017: LD_INT 2
16019: EQUAL
16020: IFFALSE 16103
16022: GO 16024
16024: DISABLE
// begin enable ;
16025: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16026: LD_INT 3150
16028: PUSH
16029: LD_INT 4550
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 1
16038: PPUSH
16039: LD_INT 2
16041: PPUSH
16042: CALL_OW 12
16046: ARRAY
16047: PPUSH
16048: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
16052: LD_INT 2
16054: PUSH
16055: LD_INT 5
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 1
16064: PPUSH
16065: LD_INT 2
16067: PPUSH
16068: CALL_OW 12
16072: ARRAY
16073: PPUSH
16074: LD_INT 6
16076: PUSH
16077: LD_INT 7
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 1
16086: PPUSH
16087: LD_INT 2
16089: PPUSH
16090: CALL_OW 12
16094: ARRAY
16095: PPUSH
16096: LD_INT 1
16098: PPUSH
16099: CALL_OW 55
// end ;
16103: END
// every 0 0$30 + 0 0$10 do
16104: GO 16106
16106: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16107: LD_INT 4
16109: PUSH
16110: LD_INT 5
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 1
16119: PPUSH
16120: LD_INT 2
16122: PPUSH
16123: CALL_OW 12
16127: ARRAY
16128: PPUSH
16129: LD_INT 7
16131: PPUSH
16132: LD_INT 1
16134: PPUSH
16135: CALL_OW 55
// Wait ( 0 0$15 ) ;
16139: LD_INT 525
16141: PPUSH
16142: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16146: LD_INT 4
16148: PUSH
16149: LD_INT 5
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 1
16158: PPUSH
16159: LD_INT 2
16161: PPUSH
16162: CALL_OW 12
16166: ARRAY
16167: PPUSH
16168: LD_INT 7
16170: PPUSH
16171: LD_INT 1
16173: PPUSH
16174: CALL_OW 55
// Wait ( 0 0$20 ) ;
16178: LD_INT 700
16180: PPUSH
16181: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16185: LD_INT 4
16187: PUSH
16188: LD_INT 5
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 1
16197: PPUSH
16198: LD_INT 2
16200: PPUSH
16201: CALL_OW 12
16205: ARRAY
16206: PPUSH
16207: LD_INT 7
16209: PPUSH
16210: LD_INT 1
16212: PPUSH
16213: CALL_OW 55
// end ; end_of_file
16217: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16218: LD_EXP 25
16222: PUSH
16223: LD_INT 1
16225: EQUAL
16226: IFFALSE 16519
16228: GO 16230
16230: DISABLE
16231: LD_INT 0
16233: PPUSH
16234: PPUSH
16235: PPUSH
// begin enable ;
16236: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16237: LD_ADDR_VAR 0 2
16241: PUSH
16242: LD_INT 22
16244: PUSH
16245: LD_INT 1
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 21
16254: PUSH
16255: LD_INT 3
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: LD_INT 30
16267: PUSH
16268: LD_INT 0
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: LD_INT 30
16277: PUSH
16278: LD_INT 1
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: LIST
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: LIST
16294: PPUSH
16295: CALL_OW 69
16299: ST_TO_ADDR
// for i in tmp do
16300: LD_ADDR_VAR 0 1
16304: PUSH
16305: LD_VAR 0 2
16309: PUSH
16310: FOR_IN
16311: IFFALSE 16344
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16313: LD_ADDR_VAR 0 3
16317: PUSH
16318: LD_VAR 0 3
16322: PUSH
16323: LD_VAR 0 1
16327: PPUSH
16328: CALL_OW 274
16332: PPUSH
16333: LD_INT 1
16335: PPUSH
16336: CALL_OW 275
16340: PLUS
16341: ST_TO_ADDR
16342: GO 16310
16344: POP
16345: POP
// strings = [ ] ;
16346: LD_ADDR_EXP 28
16350: PUSH
16351: EMPTY
16352: ST_TO_ADDR
// if tmp = 0 then
16353: LD_VAR 0 2
16357: PUSH
16358: LD_INT 0
16360: EQUAL
16361: IFFALSE 16386
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16363: LD_ADDR_EXP 28
16367: PUSH
16368: LD_EXP 28
16372: PUSH
16373: LD_STRING #Am06-1
16375: PUSH
16376: LD_EXP 26
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: ADD
16385: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16386: LD_VAR 0 2
16390: PUSH
16391: LD_EXP 26
16395: PUSH
16396: LD_VAR 0 3
16400: GREATER
16401: AND
16402: IFFALSE 16433
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16404: LD_ADDR_EXP 28
16408: PUSH
16409: LD_EXP 28
16413: PUSH
16414: LD_STRING #Am06-1
16416: PUSH
16417: LD_EXP 26
16421: PUSH
16422: LD_VAR 0 3
16426: MINUS
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: ADD
16432: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16433: LD_VAR 0 2
16437: PUSH
16438: LD_EXP 26
16442: PUSH
16443: LD_VAR 0 3
16447: LESSEQUAL
16448: AND
16449: IFFALSE 16472
// strings = strings ^ [ #Am06-1 , 0 ] ;
16451: LD_ADDR_EXP 28
16455: PUSH
16456: LD_EXP 28
16460: PUSH
16461: LD_STRING #Am06-1
16463: PUSH
16464: LD_INT 0
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: ADD
16471: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16472: LD_ADDR_EXP 27
16476: PUSH
16477: LD_EXP 27
16481: PUSH
16482: LD_INT 35
16484: MINUS
16485: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16486: LD_ADDR_EXP 28
16490: PUSH
16491: LD_EXP 28
16495: PUSH
16496: LD_STRING #Am06-2
16498: PUSH
16499: LD_EXP 27
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: ADD
16508: ST_TO_ADDR
// display_strings = strings ;
16509: LD_ADDR_OWVAR 47
16513: PUSH
16514: LD_EXP 28
16518: ST_TO_ADDR
// end ; end_of_file
16519: PPOPN 3
16521: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 , forceJMM ; begin
16522: LD_INT 0
16524: PPUSH
16525: PPUSH
16526: PPUSH
16527: PPUSH
16528: PPUSH
16529: PPUSH
16530: PPUSH
16531: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16532: LD_ADDR_VAR 0 3
16536: PUSH
16537: LD_INT 22
16539: PUSH
16540: LD_INT 1
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 2
16549: PUSH
16550: LD_INT 30
16552: PUSH
16553: LD_INT 0
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 30
16562: PUSH
16563: LD_INT 1
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: LIST
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: PPUSH
16579: CALL_OW 69
16583: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16584: LD_INT 35
16586: PPUSH
16587: CALL_OW 67
// until depot ;
16591: LD_VAR 0 3
16595: IFFALSE 16532
// forceJMM := false ;
16597: LD_ADDR_VAR 0 8
16601: PUSH
16602: LD_INT 0
16604: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16605: LD_INT 35
16607: PPUSH
16608: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ) ;
16612: LD_ADDR_VAR 0 4
16616: PUSH
16617: LD_INT 22
16619: PUSH
16620: LD_INT 1
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 91
16629: PUSH
16630: LD_VAR 0 3
16634: PUSH
16635: LD_INT 1
16637: ARRAY
16638: PUSH
16639: LD_INT 15
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 21
16649: PUSH
16650: LD_INT 1
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 2
16659: PUSH
16660: LD_INT 25
16662: PUSH
16663: LD_INT 1
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 25
16672: PUSH
16673: LD_INT 2
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 25
16682: PUSH
16683: LD_INT 3
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 25
16692: PUSH
16693: LD_INT 4
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 3
16709: PUSH
16710: LD_INT 54
16712: PUSH
16713: EMPTY
16714: LIST
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 3
16722: PUSH
16723: LD_INT 55
16725: PUSH
16726: EMPTY
16727: LIST
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: PPUSH
16741: CALL_OW 69
16745: PUSH
16746: LD_EXP 2
16750: PUSH
16751: LD_EXP 3
16755: PUSH
16756: LD_EXP 4
16760: PUSH
16761: LD_EXP 5
16765: PUSH
16766: LD_EXP 7
16770: PUSH
16771: LD_EXP 8
16775: PUSH
16776: LD_EXP 9
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: DIFF
16790: ST_TO_ADDR
// if timeToEnd < 10 10$00 then
16791: LD_EXP 27
16795: PUSH
16796: LD_INT 21000
16798: LESS
16799: IFFALSE 16811
// begin forceJMM := true ;
16801: LD_ADDR_VAR 0 8
16805: PUSH
16806: LD_INT 1
16808: ST_TO_ADDR
// break ;
16809: GO 16827
// end ; until tmp and not InBattle ( 1 ) ;
16811: LD_VAR 0 4
16815: PUSH
16816: LD_INT 1
16818: PPUSH
16819: CALL_OW 463
16823: NOT
16824: AND
16825: IFFALSE 16605
// if not forceJMM then
16827: LD_VAR 0 8
16831: NOT
16832: IFFALSE 16860
// tmp := tmp [ rand ( 1 , tmp ) ] else
16834: LD_ADDR_VAR 0 4
16838: PUSH
16839: LD_VAR 0 4
16843: PUSH
16844: LD_INT 1
16846: PPUSH
16847: LD_VAR 0 4
16851: PPUSH
16852: CALL_OW 12
16856: ARRAY
16857: ST_TO_ADDR
16858: GO 16870
// tmp := JMM ;
16860: LD_ADDR_VAR 0 4
16864: PUSH
16865: LD_EXP 1
16869: ST_TO_ADDR
// blockSpawn := 1 ;
16870: LD_ADDR_EXP 30
16874: PUSH
16875: LD_INT 1
16877: ST_TO_ADDR
// uc_side := 2 ;
16878: LD_ADDR_OWVAR 20
16882: PUSH
16883: LD_INT 2
16885: ST_TO_ADDR
// uc_nation := 2 ;
16886: LD_ADDR_OWVAR 21
16890: PUSH
16891: LD_INT 2
16893: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
16894: LD_ADDR_EXP 20
16898: PUSH
16899: LD_STRING Kurt
16901: PPUSH
16902: LD_INT 0
16904: PPUSH
16905: LD_STRING 
16907: PPUSH
16908: CALL 41628 0 3
16912: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
16913: LD_EXP 20
16917: PPUSH
16918: LD_VAR 0 4
16922: PPUSH
16923: CALL_OW 250
16927: PPUSH
16928: LD_VAR 0 4
16932: PPUSH
16933: CALL_OW 251
16937: PPUSH
16938: LD_INT 5
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: CALL_OW 50
// InGameOn ;
16948: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
16952: LD_EXP 20
16956: PPUSH
16957: CALL_OW 87
// wait ( 0 0$2 ) ;
16961: LD_INT 70
16963: PPUSH
16964: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
16968: LD_EXP 20
16972: PPUSH
16973: LD_VAR 0 4
16977: PPUSH
16978: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
16982: LD_VAR 0 4
16986: PPUSH
16987: LD_EXP 20
16991: PPUSH
16992: CALL_OW 112
// wait ( 0 0$1 ) ;
16996: LD_INT 35
16998: PPUSH
16999: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
17003: LD_VAR 0 4
17007: PPUSH
17008: LD_EXP 20
17012: PPUSH
17013: CALL_OW 119
// DialogueOn ;
17017: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17021: LD_EXP 20
17025: PPUSH
17026: LD_STRING D2-Kurt-1
17028: PPUSH
17029: CALL_OW 88
// if tmp = JMM then
17033: LD_VAR 0 4
17037: PUSH
17038: LD_EXP 1
17042: EQUAL
17043: IFFALSE 17135
// begin Say ( JMM , D2-JMM-1 ) ;
17045: LD_EXP 1
17049: PPUSH
17050: LD_STRING D2-JMM-1
17052: PPUSH
17053: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17057: LD_EXP 20
17061: PPUSH
17062: LD_STRING D2-Kurt-2
17064: PPUSH
17065: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17069: LD_EXP 1
17073: PPUSH
17074: LD_STRING D2-JMM-2
17076: PPUSH
17077: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17081: LD_EXP 20
17085: PPUSH
17086: LD_STRING D2-Kurt-3
17088: PPUSH
17089: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17093: LD_EXP 1
17097: PPUSH
17098: LD_STRING D2-JMM-3
17100: PPUSH
17101: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17105: LD_EXP 20
17109: PPUSH
17110: LD_STRING D2-Kurt-4
17112: PPUSH
17113: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17117: LD_EXP 1
17121: PPUSH
17122: LD_STRING D2-JMM-4
17124: PPUSH
17125: CALL_OW 88
// DialogueOff ;
17129: CALL_OW 7
// end else
17133: GO 17363
// begin if GetSex ( tmp ) = 1 then
17135: LD_VAR 0 4
17139: PPUSH
17140: CALL_OW 258
17144: PUSH
17145: LD_INT 1
17147: EQUAL
17148: IFFALSE 17164
// Say ( tmp , D2-Sol1-1 ) else
17150: LD_VAR 0 4
17154: PPUSH
17155: LD_STRING D2-Sol1-1
17157: PPUSH
17158: CALL_OW 88
17162: GO 17176
// Say ( tmp , D2-FSol1-1 ) ;
17164: LD_VAR 0 4
17168: PPUSH
17169: LD_STRING D2-FSol1-1
17171: PPUSH
17172: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17176: LD_EXP 20
17180: PPUSH
17181: LD_STRING D2-Kurt-2
17183: PPUSH
17184: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17188: LD_VAR 0 4
17192: PPUSH
17193: CALL_OW 258
17197: PUSH
17198: LD_INT 1
17200: EQUAL
17201: IFFALSE 17217
// Say ( tmp , D2-Sol1-2 ) else
17203: LD_VAR 0 4
17207: PPUSH
17208: LD_STRING D2-Sol1-2
17210: PPUSH
17211: CALL_OW 88
17215: GO 17229
// Say ( tmp , D2-FSol1-2 ) ;
17217: LD_VAR 0 4
17221: PPUSH
17222: LD_STRING D2-FSol1-2
17224: PPUSH
17225: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17229: LD_EXP 20
17233: PPUSH
17234: LD_STRING D2-Kurt-3
17236: PPUSH
17237: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17241: LD_VAR 0 4
17245: PPUSH
17246: CALL_OW 258
17250: PUSH
17251: LD_INT 1
17253: EQUAL
17254: IFFALSE 17270
// Say ( tmp , D2-Sol1-3 ) else
17256: LD_VAR 0 4
17260: PPUSH
17261: LD_STRING D2-Sol1-3
17263: PPUSH
17264: CALL_OW 88
17268: GO 17282
// Say ( tmp , D2-FSol1-3 ) ;
17270: LD_VAR 0 4
17274: PPUSH
17275: LD_STRING D2-FSol1-3
17277: PPUSH
17278: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17282: LD_EXP 20
17286: PPUSH
17287: LD_STRING D2-Kurt-4
17289: PPUSH
17290: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17294: LD_VAR 0 4
17298: PPUSH
17299: CALL_OW 258
17303: PUSH
17304: LD_INT 1
17306: EQUAL
17307: IFFALSE 17335
// begin Say ( tmp , D2-Sol1-4 ) ;
17309: LD_VAR 0 4
17313: PPUSH
17314: LD_STRING D2-Sol1-4
17316: PPUSH
17317: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
17321: LD_VAR 0 4
17325: PPUSH
17326: LD_STRING D2-Sol1-5
17328: PPUSH
17329: CALL_OW 88
// end else
17333: GO 17359
// begin Say ( tmp , D2-FSol1-4 ) ;
17335: LD_VAR 0 4
17339: PPUSH
17340: LD_STRING D2-FSol1-4
17342: PPUSH
17343: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
17347: LD_VAR 0 4
17351: PPUSH
17352: LD_STRING D2-FSol1-5
17354: PPUSH
17355: CALL_OW 88
// end ; DialogueOff ;
17359: CALL_OW 7
// end ; dec := ShowQuery1 ;
17363: LD_ADDR_VAR 0 6
17367: PUSH
17368: CALL 7676 0 0
17372: ST_TO_ADDR
// if dec = 1 then
17373: LD_VAR 0 6
17377: PUSH
17378: LD_INT 1
17380: EQUAL
17381: IFFALSE 17443
// begin DialogueOn ;
17383: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17387: LD_EXP 20
17391: PPUSH
17392: LD_STRING D2a-Kurt-1
17394: PPUSH
17395: CALL_OW 88
// DialogueOff ;
17399: CALL_OW 7
// InGameOff ;
17403: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17407: LD_INT 1
17409: PPUSH
17410: LD_INT 2
17412: PPUSH
17413: LD_INT 2
17415: PPUSH
17416: LD_INT 1
17418: PPUSH
17419: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17423: LD_EXP 20
17427: PPUSH
17428: LD_INT 8
17430: PPUSH
17431: CALL_OW 113
// readyToEscape := 1 ;
17435: LD_ADDR_EXP 22
17439: PUSH
17440: LD_INT 1
17442: ST_TO_ADDR
// end ; if dec = 2 then
17443: LD_VAR 0 6
17447: PUSH
17448: LD_INT 2
17450: EQUAL
17451: IFFALSE 17919
// begin DialogueOn ;
17453: CALL_OW 6
// if tmp = JMM then
17457: LD_VAR 0 4
17461: PUSH
17462: LD_EXP 1
17466: EQUAL
17467: IFFALSE 17523
// begin Say ( JMM , D2b-JMM-1 ) ;
17469: LD_EXP 1
17473: PPUSH
17474: LD_STRING D2b-JMM-1
17476: PPUSH
17477: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17481: LD_EXP 20
17485: PPUSH
17486: LD_STRING D2b-Kurt-1
17488: PPUSH
17489: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17493: LD_EXP 1
17497: PPUSH
17498: LD_STRING D2b-JMM-2
17500: PPUSH
17501: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17505: LD_EXP 20
17509: PPUSH
17510: LD_STRING D2b-Kurt-2
17512: PPUSH
17513: CALL_OW 88
// DialogueOff ;
17517: CALL_OW 7
// end else
17521: GO 17674
// begin if GetSex ( tmp ) = 1 then
17523: LD_VAR 0 4
17527: PPUSH
17528: CALL_OW 258
17532: PUSH
17533: LD_INT 1
17535: EQUAL
17536: IFFALSE 17552
// Say ( tmp , D2b-Sol1-1 ) else
17538: LD_VAR 0 4
17542: PPUSH
17543: LD_STRING D2b-Sol1-1
17545: PPUSH
17546: CALL_OW 88
17550: GO 17564
// Say ( tmp , D2b-FSol1-1 ) ;
17552: LD_VAR 0 4
17556: PPUSH
17557: LD_STRING D2b-FSol1-1
17559: PPUSH
17560: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17564: LD_EXP 20
17568: PPUSH
17569: LD_STRING D2b-Kurt-1
17571: PPUSH
17572: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17576: LD_VAR 0 4
17580: PPUSH
17581: CALL_OW 258
17585: PUSH
17586: LD_INT 1
17588: EQUAL
17589: IFFALSE 17605
// Say ( tmp , D2b-Sol1-2 ) else
17591: LD_VAR 0 4
17595: PPUSH
17596: LD_STRING D2b-Sol1-2
17598: PPUSH
17599: CALL_OW 88
17603: GO 17617
// Say ( tmp , D2b-FSol1-2 ) ;
17605: LD_VAR 0 4
17609: PPUSH
17610: LD_STRING D2b-FSol1-2
17612: PPUSH
17613: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17617: LD_EXP 20
17621: PPUSH
17622: LD_STRING D2b-Kurt-2
17624: PPUSH
17625: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17629: LD_VAR 0 4
17633: PPUSH
17634: CALL_OW 258
17638: PUSH
17639: LD_INT 1
17641: EQUAL
17642: IFFALSE 17658
// Say ( tmp , D2c-Sol1-2 ) else
17644: LD_VAR 0 4
17648: PPUSH
17649: LD_STRING D2c-Sol1-2
17651: PPUSH
17652: CALL_OW 88
17656: GO 17670
// Say ( tmp , D2c-FSol1-2 ) ;
17658: LD_VAR 0 4
17662: PPUSH
17663: LD_STRING D2c-FSol1-2
17665: PPUSH
17666: CALL_OW 88
// DialogueOff ;
17670: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
17674: LD_ADDR_VAR 0 7
17678: PUSH
17679: CALL 7697 0 0
17683: ST_TO_ADDR
// if dec2 = 1 then
17684: LD_VAR 0 7
17688: PUSH
17689: LD_INT 1
17691: EQUAL
17692: IFFALSE 17754
// begin DialogueOn ;
17694: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17698: LD_EXP 20
17702: PPUSH
17703: LD_STRING D2a-Kurt-1
17705: PPUSH
17706: CALL_OW 88
// DialogueOff ;
17710: CALL_OW 7
// InGameOff ;
17714: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17718: LD_INT 1
17720: PPUSH
17721: LD_INT 2
17723: PPUSH
17724: LD_INT 2
17726: PPUSH
17727: LD_INT 1
17729: PPUSH
17730: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17734: LD_EXP 20
17738: PPUSH
17739: LD_INT 8
17741: PPUSH
17742: CALL_OW 113
// readyToEscape := 1 ;
17746: LD_ADDR_EXP 22
17750: PUSH
17751: LD_INT 1
17753: ST_TO_ADDR
// end ; if dec2 = 2 then
17754: LD_VAR 0 7
17758: PUSH
17759: LD_INT 2
17761: EQUAL
17762: IFFALSE 17919
// begin if tmp = JMM then
17764: LD_VAR 0 4
17768: PUSH
17769: LD_EXP 1
17773: EQUAL
17774: IFFALSE 17834
// begin DialogueOn ;
17776: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17780: LD_EXP 1
17784: PPUSH
17785: LD_STRING D2c-JMM-1
17787: PPUSH
17788: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17792: LD_EXP 20
17796: PPUSH
17797: LD_STRING D2c-Kurt-1
17799: PPUSH
17800: CALL_OW 88
// DialogueOff ;
17804: CALL_OW 7
// InGameOff ;
17808: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17812: LD_EXP 20
17816: PPUSH
17817: LD_INT 8
17819: PPUSH
17820: CALL_OW 113
// readyToEscape := 1 ;
17824: LD_ADDR_EXP 22
17828: PUSH
17829: LD_INT 1
17831: ST_TO_ADDR
// end else
17832: GO 17919
// begin DialogueOn ;
17834: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17838: LD_VAR 0 4
17842: PPUSH
17843: CALL_OW 258
17847: PUSH
17848: LD_INT 1
17850: EQUAL
17851: IFFALSE 17867
// Say ( tmp , D2c-Sol1-1 ) else
17853: LD_VAR 0 4
17857: PPUSH
17858: LD_STRING D2c-Sol1-1
17860: PPUSH
17861: CALL_OW 88
17865: GO 17879
// Say ( tmp , D2c-FSol1-1 ) ;
17867: LD_VAR 0 4
17871: PPUSH
17872: LD_STRING D2c-FSol1-1
17874: PPUSH
17875: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17879: LD_EXP 20
17883: PPUSH
17884: LD_STRING D2c-Kurt-1
17886: PPUSH
17887: CALL_OW 88
// DialogueOff ;
17891: CALL_OW 7
// InGameOff ;
17895: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17899: LD_EXP 20
17903: PPUSH
17904: LD_INT 8
17906: PPUSH
17907: CALL_OW 113
// readyToEscape := 1 ;
17911: LD_ADDR_EXP 22
17915: PUSH
17916: LD_INT 1
17918: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17919: LD_VAR 0 6
17923: PUSH
17924: LD_INT 3
17926: EQUAL
17927: IFFALSE 18088
// begin DialogueOn ;
17929: CALL_OW 6
// if tmp = JMM then
17933: LD_VAR 0 4
17937: PUSH
17938: LD_EXP 1
17942: EQUAL
17943: IFFALSE 18003
// begin DialogueOn ;
17945: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17949: LD_EXP 1
17953: PPUSH
17954: LD_STRING D2c-JMM-1
17956: PPUSH
17957: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17961: LD_EXP 20
17965: PPUSH
17966: LD_STRING D2c-Kurt-1
17968: PPUSH
17969: CALL_OW 88
// DialogueOff ;
17973: CALL_OW 7
// InGameOff ;
17977: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17981: LD_EXP 20
17985: PPUSH
17986: LD_INT 8
17988: PPUSH
17989: CALL_OW 113
// readyToEscape := 1 ;
17993: LD_ADDR_EXP 22
17997: PUSH
17998: LD_INT 1
18000: ST_TO_ADDR
// end else
18001: GO 18088
// begin DialogueOn ;
18003: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18007: LD_VAR 0 4
18011: PPUSH
18012: CALL_OW 258
18016: PUSH
18017: LD_INT 1
18019: EQUAL
18020: IFFALSE 18036
// Say ( tmp , D2c-Sol1-1 ) else
18022: LD_VAR 0 4
18026: PPUSH
18027: LD_STRING D2c-Sol1-1
18029: PPUSH
18030: CALL_OW 88
18034: GO 18048
// Say ( tmp , D2c-FSol1-1 ) ;
18036: LD_VAR 0 4
18040: PPUSH
18041: LD_STRING D2c-FSol1-1
18043: PPUSH
18044: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18048: LD_EXP 20
18052: PPUSH
18053: LD_STRING D2c-Kurt-1
18055: PPUSH
18056: CALL_OW 88
// DialogueOff ;
18060: CALL_OW 7
// InGameOff ;
18064: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18068: LD_EXP 20
18072: PPUSH
18073: LD_INT 8
18075: PPUSH
18076: CALL_OW 113
// readyToEscape := 1 ;
18080: LD_ADDR_EXP 22
18084: PUSH
18085: LD_INT 1
18087: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
18088: LD_ADDR_EXP 30
18092: PUSH
18093: LD_INT 0
18095: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18096: LD_INT 35
18098: PPUSH
18099: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
18103: LD_EXP 20
18107: PPUSH
18108: LD_INT 8
18110: PPUSH
18111: CALL_OW 308
18115: PUSH
18116: LD_EXP 22
18120: AND
18121: PUSH
18122: LD_EXP 20
18126: PPUSH
18127: CALL_OW 301
18131: OR
18132: IFFALSE 18096
// if IsDead ( Kurt ) then
18134: LD_EXP 20
18138: PPUSH
18139: CALL_OW 301
18143: IFFALSE 18147
// exit ;
18145: GO 18202
// RemoveUnit ( Kurt ) ;
18147: LD_EXP 20
18151: PPUSH
18152: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
18156: LD_EXP 20
18160: PPUSH
18161: LD_STRING Kurt
18163: PPUSH
18164: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
18168: LD_INT 1
18170: PPUSH
18171: LD_INT 2
18173: PPUSH
18174: CALL_OW 81
18178: PUSH
18179: LD_INT 0
18181: EQUAL
18182: IFFALSE 18194
// kurtStatus = 1 else
18184: LD_ADDR_EXP 21
18188: PUSH
18189: LD_INT 1
18191: ST_TO_ADDR
18192: GO 18202
// kurtStatus = 2 ;
18194: LD_ADDR_EXP 21
18198: PUSH
18199: LD_INT 2
18201: ST_TO_ADDR
// end ; end_of_file
18202: LD_VAR 0 1
18206: RET
// every 0 0$2 do
18207: GO 18209
18209: DISABLE
// begin enable ;
18210: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
18211: LD_INT 3
18213: PPUSH
18214: LD_INT 2
18216: PPUSH
18217: LD_INT 10
18219: PPUSH
18220: LD_EXP 32
18224: PPUSH
18225: CALL 8128 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
18229: LD_INT 3
18231: PPUSH
18232: LD_INT 12
18234: PPUSH
18235: LD_EXP 32
18239: PPUSH
18240: CALL 9731 0 3
// if disableHealAI = 0 then
18244: LD_EXP 34
18248: PUSH
18249: LD_INT 0
18251: EQUAL
18252: IFFALSE 18273
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
18254: LD_INT 3
18256: PPUSH
18257: LD_INT 9
18259: PPUSH
18260: LD_INT 10
18262: PPUSH
18263: LD_INT 32
18265: PUSH
18266: EMPTY
18267: LIST
18268: PPUSH
18269: CALL 8495 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18273: LD_INT 3
18275: PPUSH
18276: LD_INT 51
18278: PPUSH
18279: LD_INT 6
18281: PPUSH
18282: CALL 9184 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
18286: LD_INT 2
18288: PPUSH
18289: CALL_OW 303
18293: PUSH
18294: LD_INT 2
18296: PPUSH
18297: CALL_OW 255
18301: PUSH
18302: LD_INT 1
18304: EQUAL
18305: OR
18306: IFFALSE 18320
// DefendDepot ( 3 , rudepo ) else
18308: LD_INT 3
18310: PPUSH
18311: LD_INT 2
18313: PPUSH
18314: CALL 9011 0 2
18318: GO 18330
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18320: LD_INT 3
18322: PPUSH
18323: LD_INT 10
18325: PPUSH
18326: CALL 9302 0 2
// end ;
18330: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
18331: LD_INT 22
18333: PUSH
18334: LD_INT 3
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 21
18343: PUSH
18344: LD_INT 2
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 55
18353: PUSH
18354: EMPTY
18355: LIST
18356: PUSH
18357: LD_INT 3
18359: PUSH
18360: LD_INT 34
18362: PUSH
18363: LD_INT 51
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: PPUSH
18380: CALL_OW 69
18384: PUSH
18385: LD_INT 0
18387: EQUAL
18388: PUSH
18389: LD_INT 21
18391: PPUSH
18392: CALL_OW 255
18396: PUSH
18397: LD_INT 3
18399: EQUAL
18400: AND
18401: PUSH
18402: LD_INT 21
18404: PPUSH
18405: CALL_OW 302
18409: AND
18410: PUSH
18411: LD_INT 2
18413: PPUSH
18414: CALL_OW 255
18418: PUSH
18419: LD_INT 3
18421: EQUAL
18422: AND
18423: PUSH
18424: LD_INT 2
18426: PPUSH
18427: CALL_OW 302
18431: AND
18432: PUSH
18433: LD_INT 21
18435: PPUSH
18436: CALL_OW 313
18440: AND
18441: PUSH
18442: LD_EXP 48
18446: PUSH
18447: LD_INT 4
18449: PUSH
18450: LD_INT 5
18452: PUSH
18453: LD_INT 6
18455: PUSH
18456: LD_INT 6
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: PUSH
18465: LD_OWVAR 67
18469: ARRAY
18470: LESS
18471: AND
18472: IFFALSE 18693
18474: GO 18476
18476: DISABLE
// begin enable ;
18477: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18478: LD_INT 2
18480: PPUSH
18481: CALL_OW 274
18485: PPUSH
18486: LD_INT 1
18488: PPUSH
18489: LD_INT 2000
18491: PPUSH
18492: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18496: LD_INT 3
18498: PPUSH
18499: LD_INT 21
18501: PPUSH
18502: LD_INT 4
18504: PUSH
18505: LD_INT 5
18507: PUSH
18508: LD_INT 6
18510: PUSH
18511: LD_INT 6
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: PUSH
18520: LD_OWVAR 67
18524: ARRAY
18525: PUSH
18526: LD_EXP 48
18530: MINUS
18531: PPUSH
18532: LD_INT 43
18534: PUSH
18535: LD_INT 43
18537: PUSH
18538: LD_INT 44
18540: PUSH
18541: LD_INT 44
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 43
18552: PUSH
18553: LD_INT 43
18555: PUSH
18556: LD_INT 43
18558: PUSH
18559: LD_INT 44
18561: PUSH
18562: LD_INT 44
18564: PUSH
18565: LD_INT 46
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 43
18578: PUSH
18579: LD_INT 43
18581: PUSH
18582: LD_INT 43
18584: PUSH
18585: LD_INT 44
18587: PUSH
18588: LD_INT 44
18590: PUSH
18591: LD_INT 46
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 43
18604: PUSH
18605: LD_INT 43
18607: PUSH
18608: LD_INT 44
18610: PUSH
18611: LD_INT 46
18613: PUSH
18614: LD_INT 46
18616: PUSH
18617: LD_INT 46
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: PUSH
18634: LD_OWVAR 67
18638: ARRAY
18639: PPUSH
18640: LD_INT 1
18642: PPUSH
18643: LD_INT 1
18645: PPUSH
18646: LD_INT 22
18648: PUSH
18649: LD_INT 22
18651: PUSH
18652: LD_INT 24
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 1
18661: PPUSH
18662: LD_INT 2
18664: PPUSH
18665: CALL_OW 12
18669: ARRAY
18670: PUSH
18671: LD_INT 24
18673: PUSH
18674: LD_INT 24
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: PUSH
18683: LD_OWVAR 67
18687: ARRAY
18688: PPUSH
18689: CALL 7974 0 7
// end ;
18693: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
18694: LD_INT 17
18696: PPUSH
18697: CALL_OW 255
18701: PUSH
18702: LD_INT 3
18704: EQUAL
18705: PUSH
18706: LD_INT 17
18708: PPUSH
18709: CALL_OW 302
18713: AND
18714: PUSH
18715: LD_INT 2
18717: PPUSH
18718: CALL_OW 255
18722: PUSH
18723: LD_INT 3
18725: EQUAL
18726: AND
18727: PUSH
18728: LD_INT 2
18730: PPUSH
18731: CALL_OW 302
18735: AND
18736: PUSH
18737: LD_EXP 48
18741: PUSH
18742: LD_INT 4
18744: PUSH
18745: LD_INT 5
18747: PUSH
18748: LD_INT 6
18750: PUSH
18751: LD_INT 7
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: PUSH
18760: LD_OWVAR 67
18764: ARRAY
18765: LESS
18766: AND
18767: IFFALSE 18815
18769: GO 18771
18771: DISABLE
// begin enable ;
18772: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18773: LD_INT 17
18775: PPUSH
18776: LD_INT 22
18778: PPUSH
18779: LD_INT 1
18781: PPUSH
18782: LD_INT 1
18784: PPUSH
18785: LD_INT 42
18787: PUSH
18788: LD_INT 43
18790: PUSH
18791: LD_INT 44
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 1
18801: PPUSH
18802: LD_INT 3
18804: PPUSH
18805: CALL_OW 12
18809: ARRAY
18810: PPUSH
18811: CALL_OW 185
// end ;
18815: END
// every 2 2$0 do var i , j ;
18816: GO 18818
18818: DISABLE
18819: LD_INT 0
18821: PPUSH
18822: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18823: LD_INT 14700
18825: PUSH
18826: LD_INT 33600
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 1
18835: PPUSH
18836: LD_INT 2
18838: PPUSH
18839: CALL_OW 12
18843: ARRAY
18844: PPUSH
18845: CALL_OW 67
// disableHealAI = 1 ;
18849: LD_ADDR_EXP 34
18853: PUSH
18854: LD_INT 1
18856: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18857: LD_ADDR_VAR 0 1
18861: PUSH
18862: LD_INT 22
18864: PUSH
18865: LD_INT 3
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 25
18874: PUSH
18875: LD_INT 4
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PPUSH
18886: CALL_OW 69
18890: PUSH
18891: FOR_IN
18892: IFFALSE 18905
// ComExitBuilding ( i ) ;
18894: LD_VAR 0 1
18898: PPUSH
18899: CALL_OW 122
18903: GO 18891
18905: POP
18906: POP
// wait ( 0 0$1 ) ;
18907: LD_INT 35
18909: PPUSH
18910: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18914: LD_INT 35
18916: PPUSH
18917: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18921: LD_ADDR_VAR 0 1
18925: PUSH
18926: LD_INT 22
18928: PUSH
18929: LD_INT 3
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 25
18938: PUSH
18939: LD_INT 4
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PPUSH
18950: CALL_OW 69
18954: PUSH
18955: FOR_IN
18956: IFFALSE 19033
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18958: LD_ADDR_VAR 0 2
18962: PUSH
18963: LD_INT 17
18965: PPUSH
18966: LD_INT 22
18968: PUSH
18969: LD_INT 0
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: LD_INT 25
18978: PUSH
18979: LD_INT 12
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PPUSH
18990: CALL_OW 70
18994: PUSH
18995: FOR_IN
18996: IFFALSE 19029
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18998: LD_VAR 0 1
19002: PPUSH
19003: LD_VAR 0 2
19007: PPUSH
19008: CALL_OW 250
19012: PPUSH
19013: LD_VAR 0 2
19017: PPUSH
19018: CALL_OW 251
19022: PPUSH
19023: CALL_OW 191
19027: GO 18995
19029: POP
19030: POP
19031: GO 18955
19033: POP
19034: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19035: LD_INT 22
19037: PUSH
19038: LD_INT 3
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 25
19047: PUSH
19048: LD_INT 4
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PPUSH
19059: CALL_OW 69
19063: PUSH
19064: LD_INT 0
19066: EQUAL
19067: PUSH
19068: LD_EXP 33
19072: PUSH
19073: LD_INT 6
19075: PUSH
19076: LD_INT 7
19078: PUSH
19079: LD_INT 8
19081: PUSH
19082: LD_INT 8
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: PUSH
19091: LD_OWVAR 67
19095: ARRAY
19096: GREATEREQUAL
19097: OR
19098: PUSH
19099: LD_INT 17
19101: PPUSH
19102: LD_INT 22
19104: PUSH
19105: LD_INT 0
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 25
19114: PUSH
19115: LD_INT 12
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PPUSH
19126: CALL_OW 70
19130: PUSH
19131: LD_INT 0
19133: EQUAL
19134: OR
19135: IFFALSE 18914
// disableHealAI = 0 ;
19137: LD_ADDR_EXP 34
19141: PUSH
19142: LD_INT 0
19144: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19145: LD_ADDR_VAR 0 1
19149: PUSH
19150: LD_INT 22
19152: PUSH
19153: LD_INT 3
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 25
19162: PUSH
19163: LD_INT 12
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PPUSH
19174: CALL_OW 69
19178: PUSH
19179: FOR_IN
19180: IFFALSE 19196
// SetClass ( i , 16 ) ;
19182: LD_VAR 0 1
19186: PPUSH
19187: LD_INT 16
19189: PPUSH
19190: CALL_OW 336
19194: GO 19179
19196: POP
19197: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19198: LD_ADDR_VAR 0 1
19202: PUSH
19203: LD_INT 22
19205: PUSH
19206: LD_INT 3
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 25
19215: PUSH
19216: LD_INT 4
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PPUSH
19227: CALL_OW 69
19231: PUSH
19232: FOR_IN
19233: IFFALSE 19249
// ComEnterUnit ( i , rulab ) ;
19235: LD_VAR 0 1
19239: PPUSH
19240: LD_INT 32
19242: PPUSH
19243: CALL_OW 120
19247: GO 19232
19249: POP
19250: POP
// end ; end_of_file
19251: PPOPN 2
19253: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19254: LD_EXP 27
19258: PUSH
19259: LD_INT 0
19261: LESSEQUAL
19262: IFFALSE 19416
19264: GO 19266
19266: DISABLE
19267: LD_INT 0
19269: PPUSH
19270: PPUSH
19271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19272: LD_ADDR_VAR 0 2
19276: PUSH
19277: LD_INT 22
19279: PUSH
19280: LD_INT 1
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 21
19289: PUSH
19290: LD_INT 3
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: LD_INT 30
19302: PUSH
19303: LD_INT 0
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 30
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: LIST
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: LIST
19329: PPUSH
19330: CALL_OW 69
19334: ST_TO_ADDR
// for i in tmp do
19335: LD_ADDR_VAR 0 1
19339: PUSH
19340: LD_VAR 0 2
19344: PUSH
19345: FOR_IN
19346: IFFALSE 19379
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19348: LD_ADDR_VAR 0 3
19352: PUSH
19353: LD_VAR 0 3
19357: PUSH
19358: LD_VAR 0 1
19362: PPUSH
19363: CALL_OW 274
19367: PPUSH
19368: LD_INT 1
19370: PPUSH
19371: CALL_OW 275
19375: PLUS
19376: ST_TO_ADDR
19377: GO 19345
19379: POP
19380: POP
// if yourCrates >= needCrates then
19381: LD_VAR 0 3
19385: PUSH
19386: LD_EXP 26
19390: GREATEREQUAL
19391: IFFALSE 19409
// FinishMission ( yourCrates , needCrates ) else
19393: LD_VAR 0 3
19397: PPUSH
19398: LD_EXP 26
19402: PPUSH
19403: CALL 19419 0 2
19407: GO 19416
// YouLost ( matmin ) ;
19409: LD_STRING matmin
19411: PPUSH
19412: CALL_OW 104
// end ;
19416: PPOPN 3
19418: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
19419: LD_INT 0
19421: PPUSH
19422: PPUSH
19423: PPUSH
19424: PPUSH
// if killCounter = 0 then
19425: LD_EXP 46
19429: PUSH
19430: LD_INT 0
19432: EQUAL
19433: IFFALSE 19442
// SetAchievement ( ACH_SURV ) ;
19435: LD_STRING ACH_SURV
19437: PPUSH
19438: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19442: LD_INT 22
19444: PUSH
19445: LD_INT 3
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 21
19454: PUSH
19455: LD_INT 3
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PPUSH
19466: CALL_OW 69
19470: PUSH
19471: LD_INT 0
19473: EQUAL
19474: IFFALSE 19490
// begin wait ( 3 ) ;
19476: LD_INT 3
19478: PPUSH
19479: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19483: LD_STRING ACH_BASEDESTROYER
19485: PPUSH
19486: CALL_OW 543
// end ; m1 := false ;
19490: LD_ADDR_VAR 0 4
19494: PUSH
19495: LD_INT 0
19497: ST_TO_ADDR
// m2 := false ;
19498: LD_ADDR_VAR 0 5
19502: PUSH
19503: LD_INT 0
19505: ST_TO_ADDR
// m3 := false ;
19506: LD_ADDR_VAR 0 6
19510: PUSH
19511: LD_INT 0
19513: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19514: LD_VAR 0 1
19518: PUSH
19519: LD_INT 100
19521: PUSH
19522: LD_INT 140
19524: PUSH
19525: LD_INT 180
19527: PUSH
19528: LD_INT 220
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: PUSH
19537: LD_OWVAR 67
19541: ARRAY
19542: PLUS
19543: PUSH
19544: LD_VAR 0 2
19548: GREATER
19549: IFFALSE 19581
// begin AddMedal ( cans , 1 ) ;
19551: LD_STRING cans
19553: PPUSH
19554: LD_INT 1
19556: PPUSH
19557: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19561: LD_INT 1
19563: PPUSH
19564: LD_STRING 06_crates_1
19566: PPUSH
19567: CALL_OW 39
// m1 := true ;
19571: LD_ADDR_VAR 0 4
19575: PUSH
19576: LD_INT 1
19578: ST_TO_ADDR
// end else
19579: GO 19602
// begin AddMedal ( cans , - 1 ) ;
19581: LD_STRING cans
19583: PPUSH
19584: LD_INT 1
19586: NEG
19587: PPUSH
19588: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19592: LD_INT 0
19594: PPUSH
19595: LD_STRING 06_crates_1
19597: PPUSH
19598: CALL_OW 39
// end ; if unitLost < 3 then
19602: LD_EXP 31
19606: PUSH
19607: LD_INT 3
19609: LESS
19610: IFFALSE 19632
// begin AddMedal ( people , 1 ) ;
19612: LD_STRING people
19614: PPUSH
19615: LD_INT 1
19617: PPUSH
19618: CALL_OW 101
// m2 := true ;
19622: LD_ADDR_VAR 0 5
19626: PUSH
19627: LD_INT 1
19629: ST_TO_ADDR
// end else
19630: GO 19643
// AddMedal ( people , - 1 ) ;
19632: LD_STRING people
19634: PPUSH
19635: LD_INT 1
19637: NEG
19638: PPUSH
19639: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19643: LD_EXP 29
19647: PPUSH
19648: LD_STRING 06_remoteVehs_1
19650: PPUSH
19651: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19655: LD_EXP 29
19659: PUSH
19660: LD_INT 1
19662: EQUAL
19663: IFFALSE 19685
// begin AddMedal ( remote , 1 ) ;
19665: LD_STRING remote
19667: PPUSH
19668: LD_INT 1
19670: PPUSH
19671: CALL_OW 101
// m3 := true ;
19675: LD_ADDR_VAR 0 6
19679: PUSH
19680: LD_INT 1
19682: ST_TO_ADDR
// end else
19683: GO 19725
// begin if GetTech ( 18 , 1 ) = state_enabled then
19685: LD_INT 18
19687: PPUSH
19688: LD_INT 1
19690: PPUSH
19691: CALL_OW 321
19695: PUSH
19696: LD_INT 1
19698: EQUAL
19699: IFFALSE 19714
// AddMedal ( remote , - 1 ) else
19701: LD_STRING remote
19703: PPUSH
19704: LD_INT 1
19706: NEG
19707: PPUSH
19708: CALL_OW 101
19712: GO 19725
// AddMedal ( remote , - 2 ) ;
19714: LD_STRING remote
19716: PPUSH
19717: LD_INT 2
19719: NEG
19720: PPUSH
19721: CALL_OW 101
// end ; if m1 and m2 and m3 then
19725: LD_VAR 0 4
19729: PUSH
19730: LD_VAR 0 5
19734: AND
19735: PUSH
19736: LD_VAR 0 6
19740: AND
19741: IFFALSE 19757
// begin wait ( 3 ) ;
19743: LD_INT 3
19745: PPUSH
19746: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
19750: LD_STRING ACH_ASPEED_6
19752: PPUSH
19753: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
19757: LD_OWVAR 67
19761: PUSH
19762: LD_INT 3
19764: GREATEREQUAL
19765: PUSH
19766: LD_VAR 0 4
19770: AND
19771: PUSH
19772: LD_VAR 0 5
19776: AND
19777: PUSH
19778: LD_VAR 0 6
19782: AND
19783: IFFALSE 19795
// SetAchievementEX ( ACH_AMER , 6 ) ;
19785: LD_STRING ACH_AMER
19787: PPUSH
19788: LD_INT 6
19790: PPUSH
19791: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
19795: LD_EXP 21
19799: PPUSH
19800: LD_STRING 06_KurtStatus_1
19802: PPUSH
19803: CALL_OW 39
// GiveMedals ( Main ) ;
19807: LD_STRING Main
19809: PPUSH
19810: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19814: LD_INT 22
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 21
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 50
19836: PUSH
19837: EMPTY
19838: LIST
19839: PUSH
19840: LD_INT 2
19842: PUSH
19843: LD_INT 25
19845: PUSH
19846: LD_INT 1
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 25
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 25
19865: PUSH
19866: LD_INT 3
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 25
19875: PUSH
19876: LD_INT 4
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: PPUSH
19896: CALL_OW 69
19900: PPUSH
19901: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19905: LD_EXP 1
19909: PPUSH
19910: LD_EXP 43
19914: PUSH
19915: LD_STRING JMM
19917: STR
19918: PPUSH
19919: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19923: LD_EXP 2
19927: PPUSH
19928: LD_EXP 43
19932: PUSH
19933: LD_STRING Lisa
19935: STR
19936: PPUSH
19937: CALL 7289 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19941: LD_EXP 3
19945: PPUSH
19946: LD_EXP 43
19950: PUSH
19951: LD_STRING Bobby
19953: STR
19954: PPUSH
19955: CALL 7289 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19959: LD_EXP 4
19963: PPUSH
19964: LD_EXP 43
19968: PUSH
19969: LD_STRING Cyrus
19971: STR
19972: PPUSH
19973: CALL 7289 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19977: LD_EXP 5
19981: PPUSH
19982: LD_EXP 43
19986: PUSH
19987: LD_STRING Frank
19989: STR
19990: PPUSH
19991: CALL 7289 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19995: LD_EXP 6
19999: PPUSH
20000: LD_EXP 43
20004: PUSH
20005: LD_STRING Brown
20007: STR
20008: PPUSH
20009: CALL 7289 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20013: LD_EXP 7
20017: PPUSH
20018: LD_EXP 43
20022: PUSH
20023: LD_STRING Donaldson
20025: STR
20026: PPUSH
20027: CALL 7289 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20031: LD_EXP 8
20035: PPUSH
20036: LD_EXP 43
20040: PUSH
20041: LD_STRING Gladstone
20043: STR
20044: PPUSH
20045: CALL 7289 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20049: LD_EXP 9
20053: PPUSH
20054: LD_EXP 43
20058: PUSH
20059: LD_STRING Denis
20061: STR
20062: PPUSH
20063: CALL 7289 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20067: LD_EXP 16
20071: PPUSH
20072: LD_EXP 43
20076: PUSH
20077: LD_STRING Joan
20079: STR
20080: PPUSH
20081: CALL 7289 0 2
// if IsLive ( Mike ) then
20085: LD_EXP 11
20089: PPUSH
20090: CALL_OW 300
20094: IFFALSE 20114
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
20096: LD_EXP 11
20100: PPUSH
20101: LD_EXP 43
20105: PUSH
20106: LD_STRING Mike
20108: STR
20109: PPUSH
20110: CALL_OW 38
// if IsLive ( Joan ) then
20114: LD_EXP 16
20118: PPUSH
20119: CALL_OW 300
20123: IFFALSE 20137
// SaveCharacters ( Joan , Joan ) ;
20125: LD_EXP 16
20129: PPUSH
20130: LD_STRING Joan
20132: PPUSH
20133: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
20137: LD_EXP 17
20141: PPUSH
20142: LD_STRING 06_JoanStatus_1
20144: PPUSH
20145: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20149: LD_INT 50
20151: PUSH
20152: EMPTY
20153: LIST
20154: PUSH
20155: LD_INT 22
20157: PUSH
20158: LD_INT 1
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 21
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 2
20177: PUSH
20178: LD_INT 25
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 25
20190: PUSH
20191: LD_INT 2
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 25
20200: PUSH
20201: LD_INT 3
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 25
20210: PUSH
20211: LD_INT 4
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: PPUSH
20231: CALL_OW 69
20235: PUSH
20236: LD_EXP 1
20240: PUSH
20241: LD_EXP 2
20245: PUSH
20246: LD_EXP 3
20250: PUSH
20251: LD_EXP 4
20255: PUSH
20256: LD_EXP 5
20260: PUSH
20261: LD_EXP 6
20265: PUSH
20266: LD_EXP 7
20270: PUSH
20271: LD_EXP 8
20275: PUSH
20276: LD_EXP 9
20280: PUSH
20281: LD_EXP 16
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: DIFF
20298: PPUSH
20299: LD_STRING 06_other_survivors
20301: PPUSH
20302: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20306: LD_INT 50
20308: PUSH
20309: EMPTY
20310: LIST
20311: PUSH
20312: LD_INT 22
20314: PUSH
20315: LD_INT 1
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 21
20324: PUSH
20325: LD_INT 1
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: LD_INT 25
20337: PUSH
20338: LD_INT 12
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 25
20347: PUSH
20348: LD_INT 16
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: LIST
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: PPUSH
20366: CALL_OW 69
20370: PPUSH
20371: LD_STRING 06_other_apemans
20373: PPUSH
20374: CALL_OW 38
// YouWin ;
20378: CALL_OW 103
// end ; end_of_file
20382: LD_VAR 0 3
20386: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
20387: LD_EXP 48
20391: PUSH
20392: LD_OWVAR 1
20396: PUSH
20397: LD_INT 23100
20399: PUSH
20400: LD_INT 21000
20402: PUSH
20403: LD_INT 18900
20405: PUSH
20406: LD_INT 16800
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: PUSH
20415: LD_OWVAR 67
20419: ARRAY
20420: GREATER
20421: AND
20422: IFFALSE 20769
20424: GO 20426
20426: DISABLE
20427: LD_INT 0
20429: PPUSH
20430: PPUSH
20431: PPUSH
20432: PPUSH
// begin enable ;
20433: ENABLE
// for i in ruAttackers do
20434: LD_ADDR_VAR 0 1
20438: PUSH
20439: LD_EXP 48
20443: PUSH
20444: FOR_IN
20445: IFFALSE 20767
// begin if not IsDrivenBy ( i ) then
20447: LD_VAR 0 1
20451: PPUSH
20452: CALL_OW 311
20456: NOT
20457: IFFALSE 20461
// continue ;
20459: GO 20444
// if i mod 2 = 0 then
20461: LD_VAR 0 1
20465: PUSH
20466: LD_INT 2
20468: MOD
20469: PUSH
20470: LD_INT 0
20472: EQUAL
20473: IFFALSE 20528
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] ] else
20475: LD_ADDR_VAR 0 3
20479: PUSH
20480: LD_INT 91
20482: PUSH
20483: LD_INT 52
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 82
20492: PUSH
20493: LD_INT 34
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 90
20502: PUSH
20503: LD_INT 26
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 86
20512: PUSH
20513: LD_INT 16
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: ST_TO_ADDR
20526: GO 20623
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 44 , 42 ] , [ 33 , 34 ] , [ 29 , 23 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20528: LD_ADDR_VAR 0 3
20532: PUSH
20533: LD_INT 91
20535: PUSH
20536: LD_INT 52
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 68
20545: PUSH
20546: LD_INT 46
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 48
20555: PUSH
20556: LD_INT 43
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 44
20565: PUSH
20566: LD_INT 42
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 33
20575: PUSH
20576: LD_INT 34
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 29
20585: PUSH
20586: LD_INT 23
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 30
20595: PUSH
20596: LD_INT 19
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 38
20605: PUSH
20606: LD_INT 16
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
20623: LD_VAR 0 1
20627: PPUSH
20628: CALL_OW 256
20632: PUSH
20633: LD_INT 1000
20635: EQUAL
20636: IFFALSE 20654
// AgressiveMove ( i , path ) else
20638: LD_VAR 0 1
20642: PPUSH
20643: LD_VAR 0 3
20647: PPUSH
20648: CALL 81553 0 2
20652: GO 20765
// if GetLives ( i ) < 650 then
20654: LD_VAR 0 1
20658: PPUSH
20659: CALL_OW 256
20663: PUSH
20664: LD_INT 650
20666: LESS
20667: IFFALSE 20765
// begin if not IsInArea ( i , russianRepairArea ) then
20669: LD_VAR 0 1
20673: PPUSH
20674: LD_INT 12
20676: PPUSH
20677: CALL_OW 308
20681: NOT
20682: IFFALSE 20751
// begin SetTag ( i , 0 ) ;
20684: LD_VAR 0 1
20688: PPUSH
20689: LD_INT 0
20691: PPUSH
20692: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
20696: LD_VAR 0 1
20700: PPUSH
20701: CALL_OW 261
20705: PUSH
20706: LD_INT 50
20708: LESS
20709: PUSH
20710: LD_INT 21
20712: PPUSH
20713: CALL_OW 302
20717: AND
20718: IFFALSE 20734
// ComMoveUnit ( i , rufab ) else
20720: LD_VAR 0 1
20724: PPUSH
20725: LD_INT 21
20727: PPUSH
20728: CALL_OW 112
20732: GO 20749
// ComMoveXY ( i , 121 , 99 ) ;
20734: LD_VAR 0 1
20738: PPUSH
20739: LD_INT 121
20741: PPUSH
20742: LD_INT 99
20744: PPUSH
20745: CALL_OW 111
// end else
20749: GO 20765
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
20751: LD_VAR 0 1
20755: PPUSH
20756: CALL_OW 311
20760: PPUSH
20761: CALL 80649 0 1
// end ; end ;
20765: GO 20444
20767: POP
20768: POP
// end ;
20769: PPOPN 4
20771: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
20772: LD_INT 0
20774: PPUSH
20775: PPUSH
20776: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
20777: LD_ADDR_VAR 0 2
20781: PUSH
20782: DOUBLE
20783: LD_INT 1
20785: DEC
20786: ST_TO_ADDR
20787: LD_INT 4
20789: PUSH
20790: LD_INT 5
20792: PUSH
20793: LD_INT 6
20795: PUSH
20796: LD_INT 6
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: PUSH
20805: LD_OWVAR 67
20809: ARRAY
20810: PUSH
20811: FOR_TO
20812: IFFALSE 20987
// begin uc_side := 3 ;
20814: LD_ADDR_OWVAR 20
20818: PUSH
20819: LD_INT 3
20821: ST_TO_ADDR
// uc_nation := 3 ;
20822: LD_ADDR_OWVAR 21
20826: PUSH
20827: LD_INT 3
20829: ST_TO_ADDR
// InitHC_All ( ) ;
20830: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
20834: LD_INT 0
20836: PPUSH
20837: LD_INT 4
20839: PUSH
20840: LD_INT 5
20842: PUSH
20843: LD_INT 6
20845: PUSH
20846: LD_INT 6
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: PUSH
20855: LD_OWVAR 67
20859: ARRAY
20860: PPUSH
20861: CALL_OW 381
// un := CreateHuman ;
20865: LD_ADDR_VAR 0 3
20869: PUSH
20870: CALL_OW 44
20874: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
20875: LD_VAR 0 3
20879: PPUSH
20880: LD_INT 127
20882: PPUSH
20883: LD_INT 62
20885: PPUSH
20886: LD_INT 3
20888: PPUSH
20889: LD_INT 0
20891: PPUSH
20892: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
20896: LD_ADDR_EXP 49
20900: PUSH
20901: LD_EXP 49
20905: PPUSH
20906: LD_EXP 49
20910: PUSH
20911: LD_INT 1
20913: PLUS
20914: PPUSH
20915: LD_VAR 0 3
20919: PPUSH
20920: CALL_OW 1
20924: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
20925: LD_VAR 0 3
20929: PPUSH
20930: LD_INT 83
20932: PPUSH
20933: LD_INT 49
20935: PPUSH
20936: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
20940: LD_VAR 0 3
20944: PPUSH
20945: LD_INT 49
20947: PPUSH
20948: LD_INT 43
20950: PPUSH
20951: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
20955: LD_VAR 0 3
20959: PPUSH
20960: LD_INT 31
20962: PPUSH
20963: LD_INT 15
20965: PPUSH
20966: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
20970: LD_VAR 0 3
20974: PPUSH
20975: LD_INT 63
20977: PPUSH
20978: LD_INT 9
20980: PPUSH
20981: CALL_OW 174
// end ;
20985: GO 20811
20987: POP
20988: POP
// end ; end_of_file
20989: LD_VAR 0 1
20993: RET
// export function CreateNature ; var i , un ; begin
20994: LD_INT 0
20996: PPUSH
20997: PPUSH
20998: PPUSH
// for i := 1 to Difficulty + 2 do
20999: LD_ADDR_VAR 0 2
21003: PUSH
21004: DOUBLE
21005: LD_INT 1
21007: DEC
21008: ST_TO_ADDR
21009: LD_OWVAR 67
21013: PUSH
21014: LD_INT 2
21016: PLUS
21017: PUSH
21018: FOR_TO
21019: IFFALSE 21128
// begin hc_sex := sex_male ;
21021: LD_ADDR_OWVAR 27
21025: PUSH
21026: LD_INT 1
21028: ST_TO_ADDR
// uc_side := 0 ;
21029: LD_ADDR_OWVAR 20
21033: PUSH
21034: LD_INT 0
21036: ST_TO_ADDR
// uc_nation := nation_nature ;
21037: LD_ADDR_OWVAR 21
21041: PUSH
21042: LD_INT 0
21044: ST_TO_ADDR
// hc_class := class_tiger ;
21045: LD_ADDR_OWVAR 28
21049: PUSH
21050: LD_INT 14
21052: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21053: LD_ADDR_OWVAR 31
21057: PUSH
21058: LD_EXP 36
21062: PUSH
21063: LD_INT 0
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: LD_INT 0
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
21078: LD_ADDR_OWVAR 35
21082: PUSH
21083: LD_INT 5
21085: NEG
21086: PPUSH
21087: LD_INT 5
21089: PPUSH
21090: CALL_OW 12
21094: PUSH
21095: LD_OWVAR 67
21099: MUL
21100: ST_TO_ADDR
// un := CreateHuman ;
21101: LD_ADDR_VAR 0 3
21105: PUSH
21106: CALL_OW 44
21110: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21111: LD_VAR 0 3
21115: PPUSH
21116: LD_INT 18
21118: PPUSH
21119: LD_INT 0
21121: PPUSH
21122: CALL_OW 49
// end ;
21126: GO 21018
21128: POP
21129: POP
// for i = 1 to rand ( 3 , 4 ) do
21130: LD_ADDR_VAR 0 2
21134: PUSH
21135: DOUBLE
21136: LD_INT 1
21138: DEC
21139: ST_TO_ADDR
21140: LD_INT 3
21142: PPUSH
21143: LD_INT 4
21145: PPUSH
21146: CALL_OW 12
21150: PUSH
21151: FOR_TO
21152: IFFALSE 21222
// begin hc_class := class_phororhacos ;
21154: LD_ADDR_OWVAR 28
21158: PUSH
21159: LD_INT 18
21161: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21162: LD_ADDR_OWVAR 31
21166: PUSH
21167: LD_EXP 36
21171: PUSH
21172: LD_INT 0
21174: PUSH
21175: LD_INT 0
21177: PUSH
21178: LD_INT 0
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: ST_TO_ADDR
// hc_agressivity := 0 ;
21187: LD_ADDR_OWVAR 35
21191: PUSH
21192: LD_INT 0
21194: ST_TO_ADDR
// un = CreateHuman ;
21195: LD_ADDR_VAR 0 3
21199: PUSH
21200: CALL_OW 44
21204: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21205: LD_VAR 0 3
21209: PPUSH
21210: LD_INT 18
21212: PPUSH
21213: LD_INT 0
21215: PPUSH
21216: CALL_OW 49
// end ;
21220: GO 21151
21222: POP
21223: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
21224: LD_ADDR_VAR 0 2
21228: PUSH
21229: DOUBLE
21230: LD_INT 1
21232: DEC
21233: ST_TO_ADDR
21234: LD_INT 3
21236: PUSH
21237: LD_INT 3
21239: PUSH
21240: LD_INT 4
21242: PUSH
21243: LD_INT 5
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: PUSH
21252: LD_OWVAR 67
21256: ARRAY
21257: PUSH
21258: FOR_TO
21259: IFFALSE 21400
// begin hc_class := class_apeman ;
21261: LD_ADDR_OWVAR 28
21265: PUSH
21266: LD_INT 12
21268: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21269: LD_ADDR_OWVAR 31
21273: PUSH
21274: LD_INT 2
21276: PPUSH
21277: LD_INT 5
21279: PPUSH
21280: CALL_OW 12
21284: PUSH
21285: LD_INT 0
21287: PPUSH
21288: LD_INT 2
21290: PPUSH
21291: CALL_OW 12
21295: PUSH
21296: LD_INT 0
21298: PUSH
21299: LD_INT 0
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: ST_TO_ADDR
// hc_agressivity := [ rand ( - 5 , 10 ) , rand ( - 10 , 20 ) , rand ( - 20 , 25 ) , rand ( - 30 , 30 ) ] [ Difficulty ] ;
21308: LD_ADDR_OWVAR 35
21312: PUSH
21313: LD_INT 5
21315: NEG
21316: PPUSH
21317: LD_INT 10
21319: PPUSH
21320: CALL_OW 12
21324: PUSH
21325: LD_INT 10
21327: NEG
21328: PPUSH
21329: LD_INT 20
21331: PPUSH
21332: CALL_OW 12
21336: PUSH
21337: LD_INT 20
21339: NEG
21340: PPUSH
21341: LD_INT 25
21343: PPUSH
21344: CALL_OW 12
21348: PUSH
21349: LD_INT 30
21351: NEG
21352: PPUSH
21353: LD_INT 30
21355: PPUSH
21356: CALL_OW 12
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: PUSH
21367: LD_OWVAR 67
21371: ARRAY
21372: ST_TO_ADDR
// un := CreateHuman ;
21373: LD_ADDR_VAR 0 3
21377: PUSH
21378: CALL_OW 44
21382: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21383: LD_VAR 0 3
21387: PPUSH
21388: LD_INT 19
21390: PPUSH
21391: LD_INT 0
21393: PPUSH
21394: CALL_OW 49
// end ;
21398: GO 21258
21400: POP
21401: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
21402: LD_ADDR_VAR 0 2
21406: PUSH
21407: DOUBLE
21408: LD_INT 1
21410: DEC
21411: ST_TO_ADDR
21412: LD_INT 3
21414: PUSH
21415: LD_INT 4
21417: PUSH
21418: LD_INT 5
21420: PUSH
21421: LD_INT 6
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: PUSH
21430: LD_OWVAR 67
21434: ARRAY
21435: PUSH
21436: FOR_TO
21437: IFFALSE 21530
// begin hc_class := class_apeman ;
21439: LD_ADDR_OWVAR 28
21443: PUSH
21444: LD_INT 12
21446: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21447: LD_ADDR_OWVAR 31
21451: PUSH
21452: LD_INT 2
21454: PPUSH
21455: LD_INT 5
21457: PPUSH
21458: CALL_OW 12
21462: PUSH
21463: LD_INT 0
21465: PPUSH
21466: LD_INT 2
21468: PPUSH
21469: CALL_OW 12
21473: PUSH
21474: LD_INT 0
21476: PUSH
21477: LD_INT 0
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: ST_TO_ADDR
// hc_agressivity := rand ( - 15 , 15 ) ;
21486: LD_ADDR_OWVAR 35
21490: PUSH
21491: LD_INT 15
21493: NEG
21494: PPUSH
21495: LD_INT 15
21497: PPUSH
21498: CALL_OW 12
21502: ST_TO_ADDR
// un = CreateHuman ;
21503: LD_ADDR_VAR 0 3
21507: PUSH
21508: CALL_OW 44
21512: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21513: LD_VAR 0 3
21517: PPUSH
21518: LD_INT 20
21520: PPUSH
21521: LD_INT 0
21523: PPUSH
21524: CALL_OW 49
// end ;
21528: GO 21436
21530: POP
21531: POP
// end ; end_of_file end_of_file
21532: LD_VAR 0 1
21536: RET
// export globalGameSaveCounter ; every 0 0$1 do
21537: GO 21539
21539: DISABLE
// begin enable ;
21540: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21541: LD_STRING updateTimer(
21543: PUSH
21544: LD_OWVAR 1
21548: STR
21549: PUSH
21550: LD_STRING );
21552: STR
21553: PPUSH
21554: CALL_OW 559
// end ;
21558: END
// every 0 0$1 do
21559: GO 21561
21561: DISABLE
// begin globalGameSaveCounter := 0 ;
21562: LD_ADDR_EXP 50
21566: PUSH
21567: LD_INT 0
21569: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
21570: LD_STRING setGameSaveCounter(0)
21572: PPUSH
21573: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
21577: LD_STRING initStreamRollete();
21579: PPUSH
21580: CALL_OW 559
// InitStreamMode ;
21584: CALL 22910 0 0
// DefineStreamItems ( false ) ;
21588: LD_INT 0
21590: PPUSH
21591: CALL 23374 0 1
// end ;
21595: END
// export function SOS_MapStart ( ) ; begin
21596: LD_INT 0
21598: PPUSH
// if streamModeActive then
21599: LD_EXP 51
21603: IFFALSE 21612
// DefineStreamItems ( true ) ;
21605: LD_INT 1
21607: PPUSH
21608: CALL 23374 0 1
// UpdateLuaVariables ( ) ;
21612: CALL 21629 0 0
// UpdateFactoryWaypoints ( ) ;
21616: CALL 36243 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21620: CALL 36500 0 0
// end ;
21624: LD_VAR 0 1
21628: RET
// function UpdateLuaVariables ( ) ; begin
21629: LD_INT 0
21631: PPUSH
// if globalGameSaveCounter then
21632: LD_EXP 50
21636: IFFALSE 21670
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
21638: LD_ADDR_EXP 50
21642: PUSH
21643: LD_EXP 50
21647: PPUSH
21648: CALL 80310 0 1
21652: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21653: LD_STRING setGameSaveCounter(
21655: PUSH
21656: LD_EXP 50
21660: STR
21661: PUSH
21662: LD_STRING )
21664: STR
21665: PPUSH
21666: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
21670: LD_STRING setGameDifficulty(
21672: PUSH
21673: LD_OWVAR 67
21677: STR
21678: PUSH
21679: LD_STRING )
21681: STR
21682: PPUSH
21683: CALL_OW 559
// end ;
21687: LD_VAR 0 1
21691: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21692: LD_INT 0
21694: PPUSH
// if p2 = stream_mode then
21695: LD_VAR 0 2
21699: PUSH
21700: LD_INT 100
21702: EQUAL
21703: IFFALSE 22706
// begin if not StreamModeActive then
21705: LD_EXP 51
21709: NOT
21710: IFFALSE 21720
// StreamModeActive := true ;
21712: LD_ADDR_EXP 51
21716: PUSH
21717: LD_INT 1
21719: ST_TO_ADDR
// if p3 = 0 then
21720: LD_VAR 0 3
21724: PUSH
21725: LD_INT 0
21727: EQUAL
21728: IFFALSE 21734
// InitStreamMode ;
21730: CALL 22910 0 0
// if p3 = 1 then
21734: LD_VAR 0 3
21738: PUSH
21739: LD_INT 1
21741: EQUAL
21742: IFFALSE 21752
// sRocket := true ;
21744: LD_ADDR_EXP 56
21748: PUSH
21749: LD_INT 1
21751: ST_TO_ADDR
// if p3 = 2 then
21752: LD_VAR 0 3
21756: PUSH
21757: LD_INT 2
21759: EQUAL
21760: IFFALSE 21770
// sSpeed := true ;
21762: LD_ADDR_EXP 55
21766: PUSH
21767: LD_INT 1
21769: ST_TO_ADDR
// if p3 = 3 then
21770: LD_VAR 0 3
21774: PUSH
21775: LD_INT 3
21777: EQUAL
21778: IFFALSE 21788
// sEngine := true ;
21780: LD_ADDR_EXP 57
21784: PUSH
21785: LD_INT 1
21787: ST_TO_ADDR
// if p3 = 4 then
21788: LD_VAR 0 3
21792: PUSH
21793: LD_INT 4
21795: EQUAL
21796: IFFALSE 21806
// sSpec := true ;
21798: LD_ADDR_EXP 54
21802: PUSH
21803: LD_INT 1
21805: ST_TO_ADDR
// if p3 = 5 then
21806: LD_VAR 0 3
21810: PUSH
21811: LD_INT 5
21813: EQUAL
21814: IFFALSE 21824
// sLevel := true ;
21816: LD_ADDR_EXP 58
21820: PUSH
21821: LD_INT 1
21823: ST_TO_ADDR
// if p3 = 6 then
21824: LD_VAR 0 3
21828: PUSH
21829: LD_INT 6
21831: EQUAL
21832: IFFALSE 21842
// sArmoury := true ;
21834: LD_ADDR_EXP 59
21838: PUSH
21839: LD_INT 1
21841: ST_TO_ADDR
// if p3 = 7 then
21842: LD_VAR 0 3
21846: PUSH
21847: LD_INT 7
21849: EQUAL
21850: IFFALSE 21860
// sRadar := true ;
21852: LD_ADDR_EXP 60
21856: PUSH
21857: LD_INT 1
21859: ST_TO_ADDR
// if p3 = 8 then
21860: LD_VAR 0 3
21864: PUSH
21865: LD_INT 8
21867: EQUAL
21868: IFFALSE 21878
// sBunker := true ;
21870: LD_ADDR_EXP 61
21874: PUSH
21875: LD_INT 1
21877: ST_TO_ADDR
// if p3 = 9 then
21878: LD_VAR 0 3
21882: PUSH
21883: LD_INT 9
21885: EQUAL
21886: IFFALSE 21896
// sHack := true ;
21888: LD_ADDR_EXP 62
21892: PUSH
21893: LD_INT 1
21895: ST_TO_ADDR
// if p3 = 10 then
21896: LD_VAR 0 3
21900: PUSH
21901: LD_INT 10
21903: EQUAL
21904: IFFALSE 21914
// sFire := true ;
21906: LD_ADDR_EXP 63
21910: PUSH
21911: LD_INT 1
21913: ST_TO_ADDR
// if p3 = 11 then
21914: LD_VAR 0 3
21918: PUSH
21919: LD_INT 11
21921: EQUAL
21922: IFFALSE 21932
// sRefresh := true ;
21924: LD_ADDR_EXP 64
21928: PUSH
21929: LD_INT 1
21931: ST_TO_ADDR
// if p3 = 12 then
21932: LD_VAR 0 3
21936: PUSH
21937: LD_INT 12
21939: EQUAL
21940: IFFALSE 21950
// sExp := true ;
21942: LD_ADDR_EXP 65
21946: PUSH
21947: LD_INT 1
21949: ST_TO_ADDR
// if p3 = 13 then
21950: LD_VAR 0 3
21954: PUSH
21955: LD_INT 13
21957: EQUAL
21958: IFFALSE 21968
// sDepot := true ;
21960: LD_ADDR_EXP 66
21964: PUSH
21965: LD_INT 1
21967: ST_TO_ADDR
// if p3 = 14 then
21968: LD_VAR 0 3
21972: PUSH
21973: LD_INT 14
21975: EQUAL
21976: IFFALSE 21986
// sFlag := true ;
21978: LD_ADDR_EXP 67
21982: PUSH
21983: LD_INT 1
21985: ST_TO_ADDR
// if p3 = 15 then
21986: LD_VAR 0 3
21990: PUSH
21991: LD_INT 15
21993: EQUAL
21994: IFFALSE 22004
// sKamikadze := true ;
21996: LD_ADDR_EXP 75
22000: PUSH
22001: LD_INT 1
22003: ST_TO_ADDR
// if p3 = 16 then
22004: LD_VAR 0 3
22008: PUSH
22009: LD_INT 16
22011: EQUAL
22012: IFFALSE 22022
// sTroll := true ;
22014: LD_ADDR_EXP 76
22018: PUSH
22019: LD_INT 1
22021: ST_TO_ADDR
// if p3 = 17 then
22022: LD_VAR 0 3
22026: PUSH
22027: LD_INT 17
22029: EQUAL
22030: IFFALSE 22040
// sSlow := true ;
22032: LD_ADDR_EXP 77
22036: PUSH
22037: LD_INT 1
22039: ST_TO_ADDR
// if p3 = 18 then
22040: LD_VAR 0 3
22044: PUSH
22045: LD_INT 18
22047: EQUAL
22048: IFFALSE 22058
// sLack := true ;
22050: LD_ADDR_EXP 78
22054: PUSH
22055: LD_INT 1
22057: ST_TO_ADDR
// if p3 = 19 then
22058: LD_VAR 0 3
22062: PUSH
22063: LD_INT 19
22065: EQUAL
22066: IFFALSE 22076
// sTank := true ;
22068: LD_ADDR_EXP 80
22072: PUSH
22073: LD_INT 1
22075: ST_TO_ADDR
// if p3 = 20 then
22076: LD_VAR 0 3
22080: PUSH
22081: LD_INT 20
22083: EQUAL
22084: IFFALSE 22094
// sRemote := true ;
22086: LD_ADDR_EXP 81
22090: PUSH
22091: LD_INT 1
22093: ST_TO_ADDR
// if p3 = 21 then
22094: LD_VAR 0 3
22098: PUSH
22099: LD_INT 21
22101: EQUAL
22102: IFFALSE 22112
// sPowell := true ;
22104: LD_ADDR_EXP 82
22108: PUSH
22109: LD_INT 1
22111: ST_TO_ADDR
// if p3 = 22 then
22112: LD_VAR 0 3
22116: PUSH
22117: LD_INT 22
22119: EQUAL
22120: IFFALSE 22130
// sTeleport := true ;
22122: LD_ADDR_EXP 85
22126: PUSH
22127: LD_INT 1
22129: ST_TO_ADDR
// if p3 = 23 then
22130: LD_VAR 0 3
22134: PUSH
22135: LD_INT 23
22137: EQUAL
22138: IFFALSE 22148
// sOilTower := true ;
22140: LD_ADDR_EXP 87
22144: PUSH
22145: LD_INT 1
22147: ST_TO_ADDR
// if p3 = 24 then
22148: LD_VAR 0 3
22152: PUSH
22153: LD_INT 24
22155: EQUAL
22156: IFFALSE 22166
// sShovel := true ;
22158: LD_ADDR_EXP 88
22162: PUSH
22163: LD_INT 1
22165: ST_TO_ADDR
// if p3 = 25 then
22166: LD_VAR 0 3
22170: PUSH
22171: LD_INT 25
22173: EQUAL
22174: IFFALSE 22184
// sSheik := true ;
22176: LD_ADDR_EXP 89
22180: PUSH
22181: LD_INT 1
22183: ST_TO_ADDR
// if p3 = 26 then
22184: LD_VAR 0 3
22188: PUSH
22189: LD_INT 26
22191: EQUAL
22192: IFFALSE 22202
// sEarthquake := true ;
22194: LD_ADDR_EXP 91
22198: PUSH
22199: LD_INT 1
22201: ST_TO_ADDR
// if p3 = 27 then
22202: LD_VAR 0 3
22206: PUSH
22207: LD_INT 27
22209: EQUAL
22210: IFFALSE 22220
// sAI := true ;
22212: LD_ADDR_EXP 92
22216: PUSH
22217: LD_INT 1
22219: ST_TO_ADDR
// if p3 = 28 then
22220: LD_VAR 0 3
22224: PUSH
22225: LD_INT 28
22227: EQUAL
22228: IFFALSE 22238
// sCargo := true ;
22230: LD_ADDR_EXP 95
22234: PUSH
22235: LD_INT 1
22237: ST_TO_ADDR
// if p3 = 29 then
22238: LD_VAR 0 3
22242: PUSH
22243: LD_INT 29
22245: EQUAL
22246: IFFALSE 22256
// sDLaser := true ;
22248: LD_ADDR_EXP 96
22252: PUSH
22253: LD_INT 1
22255: ST_TO_ADDR
// if p3 = 30 then
22256: LD_VAR 0 3
22260: PUSH
22261: LD_INT 30
22263: EQUAL
22264: IFFALSE 22274
// sExchange := true ;
22266: LD_ADDR_EXP 97
22270: PUSH
22271: LD_INT 1
22273: ST_TO_ADDR
// if p3 = 31 then
22274: LD_VAR 0 3
22278: PUSH
22279: LD_INT 31
22281: EQUAL
22282: IFFALSE 22292
// sFac := true ;
22284: LD_ADDR_EXP 98
22288: PUSH
22289: LD_INT 1
22291: ST_TO_ADDR
// if p3 = 32 then
22292: LD_VAR 0 3
22296: PUSH
22297: LD_INT 32
22299: EQUAL
22300: IFFALSE 22310
// sPower := true ;
22302: LD_ADDR_EXP 99
22306: PUSH
22307: LD_INT 1
22309: ST_TO_ADDR
// if p3 = 33 then
22310: LD_VAR 0 3
22314: PUSH
22315: LD_INT 33
22317: EQUAL
22318: IFFALSE 22328
// sRandom := true ;
22320: LD_ADDR_EXP 100
22324: PUSH
22325: LD_INT 1
22327: ST_TO_ADDR
// if p3 = 34 then
22328: LD_VAR 0 3
22332: PUSH
22333: LD_INT 34
22335: EQUAL
22336: IFFALSE 22346
// sShield := true ;
22338: LD_ADDR_EXP 101
22342: PUSH
22343: LD_INT 1
22345: ST_TO_ADDR
// if p3 = 35 then
22346: LD_VAR 0 3
22350: PUSH
22351: LD_INT 35
22353: EQUAL
22354: IFFALSE 22364
// sTime := true ;
22356: LD_ADDR_EXP 102
22360: PUSH
22361: LD_INT 1
22363: ST_TO_ADDR
// if p3 = 36 then
22364: LD_VAR 0 3
22368: PUSH
22369: LD_INT 36
22371: EQUAL
22372: IFFALSE 22382
// sTools := true ;
22374: LD_ADDR_EXP 103
22378: PUSH
22379: LD_INT 1
22381: ST_TO_ADDR
// if p3 = 101 then
22382: LD_VAR 0 3
22386: PUSH
22387: LD_INT 101
22389: EQUAL
22390: IFFALSE 22400
// sSold := true ;
22392: LD_ADDR_EXP 68
22396: PUSH
22397: LD_INT 1
22399: ST_TO_ADDR
// if p3 = 102 then
22400: LD_VAR 0 3
22404: PUSH
22405: LD_INT 102
22407: EQUAL
22408: IFFALSE 22418
// sDiff := true ;
22410: LD_ADDR_EXP 69
22414: PUSH
22415: LD_INT 1
22417: ST_TO_ADDR
// if p3 = 103 then
22418: LD_VAR 0 3
22422: PUSH
22423: LD_INT 103
22425: EQUAL
22426: IFFALSE 22436
// sFog := true ;
22428: LD_ADDR_EXP 72
22432: PUSH
22433: LD_INT 1
22435: ST_TO_ADDR
// if p3 = 104 then
22436: LD_VAR 0 3
22440: PUSH
22441: LD_INT 104
22443: EQUAL
22444: IFFALSE 22454
// sReset := true ;
22446: LD_ADDR_EXP 73
22450: PUSH
22451: LD_INT 1
22453: ST_TO_ADDR
// if p3 = 105 then
22454: LD_VAR 0 3
22458: PUSH
22459: LD_INT 105
22461: EQUAL
22462: IFFALSE 22472
// sSun := true ;
22464: LD_ADDR_EXP 74
22468: PUSH
22469: LD_INT 1
22471: ST_TO_ADDR
// if p3 = 106 then
22472: LD_VAR 0 3
22476: PUSH
22477: LD_INT 106
22479: EQUAL
22480: IFFALSE 22490
// sTiger := true ;
22482: LD_ADDR_EXP 70
22486: PUSH
22487: LD_INT 1
22489: ST_TO_ADDR
// if p3 = 107 then
22490: LD_VAR 0 3
22494: PUSH
22495: LD_INT 107
22497: EQUAL
22498: IFFALSE 22508
// sBomb := true ;
22500: LD_ADDR_EXP 71
22504: PUSH
22505: LD_INT 1
22507: ST_TO_ADDR
// if p3 = 108 then
22508: LD_VAR 0 3
22512: PUSH
22513: LD_INT 108
22515: EQUAL
22516: IFFALSE 22526
// sWound := true ;
22518: LD_ADDR_EXP 79
22522: PUSH
22523: LD_INT 1
22525: ST_TO_ADDR
// if p3 = 109 then
22526: LD_VAR 0 3
22530: PUSH
22531: LD_INT 109
22533: EQUAL
22534: IFFALSE 22544
// sBetray := true ;
22536: LD_ADDR_EXP 83
22540: PUSH
22541: LD_INT 1
22543: ST_TO_ADDR
// if p3 = 110 then
22544: LD_VAR 0 3
22548: PUSH
22549: LD_INT 110
22551: EQUAL
22552: IFFALSE 22562
// sContamin := true ;
22554: LD_ADDR_EXP 84
22558: PUSH
22559: LD_INT 1
22561: ST_TO_ADDR
// if p3 = 111 then
22562: LD_VAR 0 3
22566: PUSH
22567: LD_INT 111
22569: EQUAL
22570: IFFALSE 22580
// sOil := true ;
22572: LD_ADDR_EXP 86
22576: PUSH
22577: LD_INT 1
22579: ST_TO_ADDR
// if p3 = 112 then
22580: LD_VAR 0 3
22584: PUSH
22585: LD_INT 112
22587: EQUAL
22588: IFFALSE 22598
// sStu := true ;
22590: LD_ADDR_EXP 90
22594: PUSH
22595: LD_INT 1
22597: ST_TO_ADDR
// if p3 = 113 then
22598: LD_VAR 0 3
22602: PUSH
22603: LD_INT 113
22605: EQUAL
22606: IFFALSE 22616
// sBazooka := true ;
22608: LD_ADDR_EXP 93
22612: PUSH
22613: LD_INT 1
22615: ST_TO_ADDR
// if p3 = 114 then
22616: LD_VAR 0 3
22620: PUSH
22621: LD_INT 114
22623: EQUAL
22624: IFFALSE 22634
// sMortar := true ;
22626: LD_ADDR_EXP 94
22630: PUSH
22631: LD_INT 1
22633: ST_TO_ADDR
// if p3 = 115 then
22634: LD_VAR 0 3
22638: PUSH
22639: LD_INT 115
22641: EQUAL
22642: IFFALSE 22652
// sRanger := true ;
22644: LD_ADDR_EXP 104
22648: PUSH
22649: LD_INT 1
22651: ST_TO_ADDR
// if p3 = 116 then
22652: LD_VAR 0 3
22656: PUSH
22657: LD_INT 116
22659: EQUAL
22660: IFFALSE 22670
// sComputer := true ;
22662: LD_ADDR_EXP 105
22666: PUSH
22667: LD_INT 1
22669: ST_TO_ADDR
// if p3 = 117 then
22670: LD_VAR 0 3
22674: PUSH
22675: LD_INT 117
22677: EQUAL
22678: IFFALSE 22688
// s30 := true ;
22680: LD_ADDR_EXP 106
22684: PUSH
22685: LD_INT 1
22687: ST_TO_ADDR
// if p3 = 118 then
22688: LD_VAR 0 3
22692: PUSH
22693: LD_INT 118
22695: EQUAL
22696: IFFALSE 22706
// s60 := true ;
22698: LD_ADDR_EXP 107
22702: PUSH
22703: LD_INT 1
22705: ST_TO_ADDR
// end ; if p2 = hack_mode then
22706: LD_VAR 0 2
22710: PUSH
22711: LD_INT 101
22713: EQUAL
22714: IFFALSE 22842
// begin case p3 of 1 :
22716: LD_VAR 0 3
22720: PUSH
22721: LD_INT 1
22723: DOUBLE
22724: EQUAL
22725: IFTRUE 22729
22727: GO 22736
22729: POP
// hHackUnlimitedResources ; 2 :
22730: CALL 34989 0 0
22734: GO 22842
22736: LD_INT 2
22738: DOUBLE
22739: EQUAL
22740: IFTRUE 22744
22742: GO 22751
22744: POP
// hHackSetLevel10 ; 3 :
22745: CALL 35122 0 0
22749: GO 22842
22751: LD_INT 3
22753: DOUBLE
22754: EQUAL
22755: IFTRUE 22759
22757: GO 22766
22759: POP
// hHackSetLevel10YourUnits ; 4 :
22760: CALL 35207 0 0
22764: GO 22842
22766: LD_INT 4
22768: DOUBLE
22769: EQUAL
22770: IFTRUE 22774
22772: GO 22781
22774: POP
// hHackInvincible ; 5 :
22775: CALL 35655 0 0
22779: GO 22842
22781: LD_INT 5
22783: DOUBLE
22784: EQUAL
22785: IFTRUE 22789
22787: GO 22796
22789: POP
// hHackInvisible ; 6 :
22790: CALL 35766 0 0
22794: GO 22842
22796: LD_INT 6
22798: DOUBLE
22799: EQUAL
22800: IFTRUE 22804
22802: GO 22811
22804: POP
// hHackChangeYourSide ; 7 :
22805: CALL 35823 0 0
22809: GO 22842
22811: LD_INT 7
22813: DOUBLE
22814: EQUAL
22815: IFTRUE 22819
22817: GO 22826
22819: POP
// hHackChangeUnitSide ; 8 :
22820: CALL 35865 0 0
22824: GO 22842
22826: LD_INT 8
22828: DOUBLE
22829: EQUAL
22830: IFTRUE 22834
22832: GO 22841
22834: POP
// hHackFog ; end ;
22835: CALL 35966 0 0
22839: GO 22842
22841: POP
// end ; if p2 = game_save_mode then
22842: LD_VAR 0 2
22846: PUSH
22847: LD_INT 102
22849: EQUAL
22850: IFFALSE 22905
// begin if p3 = 1 then
22852: LD_VAR 0 3
22856: PUSH
22857: LD_INT 1
22859: EQUAL
22860: IFFALSE 22872
// globalGameSaveCounter := p4 ;
22862: LD_ADDR_EXP 50
22866: PUSH
22867: LD_VAR 0 4
22871: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
22872: LD_VAR 0 3
22876: PUSH
22877: LD_INT 2
22879: EQUAL
22880: PUSH
22881: LD_EXP 50
22885: AND
22886: IFFALSE 22905
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22888: LD_STRING setGameSaveCounter(
22890: PUSH
22891: LD_EXP 50
22895: STR
22896: PUSH
22897: LD_STRING )
22899: STR
22900: PPUSH
22901: CALL_OW 559
// end ; end ;
22905: LD_VAR 0 7
22909: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
22910: LD_INT 0
22912: PPUSH
// streamModeActive := false ;
22913: LD_ADDR_EXP 51
22917: PUSH
22918: LD_INT 0
22920: ST_TO_ADDR
// normalCounter := 36 ;
22921: LD_ADDR_EXP 52
22925: PUSH
22926: LD_INT 36
22928: ST_TO_ADDR
// hardcoreCounter := 18 ;
22929: LD_ADDR_EXP 53
22933: PUSH
22934: LD_INT 18
22936: ST_TO_ADDR
// sRocket := false ;
22937: LD_ADDR_EXP 56
22941: PUSH
22942: LD_INT 0
22944: ST_TO_ADDR
// sSpeed := false ;
22945: LD_ADDR_EXP 55
22949: PUSH
22950: LD_INT 0
22952: ST_TO_ADDR
// sEngine := false ;
22953: LD_ADDR_EXP 57
22957: PUSH
22958: LD_INT 0
22960: ST_TO_ADDR
// sSpec := false ;
22961: LD_ADDR_EXP 54
22965: PUSH
22966: LD_INT 0
22968: ST_TO_ADDR
// sLevel := false ;
22969: LD_ADDR_EXP 58
22973: PUSH
22974: LD_INT 0
22976: ST_TO_ADDR
// sArmoury := false ;
22977: LD_ADDR_EXP 59
22981: PUSH
22982: LD_INT 0
22984: ST_TO_ADDR
// sRadar := false ;
22985: LD_ADDR_EXP 60
22989: PUSH
22990: LD_INT 0
22992: ST_TO_ADDR
// sBunker := false ;
22993: LD_ADDR_EXP 61
22997: PUSH
22998: LD_INT 0
23000: ST_TO_ADDR
// sHack := false ;
23001: LD_ADDR_EXP 62
23005: PUSH
23006: LD_INT 0
23008: ST_TO_ADDR
// sFire := false ;
23009: LD_ADDR_EXP 63
23013: PUSH
23014: LD_INT 0
23016: ST_TO_ADDR
// sRefresh := false ;
23017: LD_ADDR_EXP 64
23021: PUSH
23022: LD_INT 0
23024: ST_TO_ADDR
// sExp := false ;
23025: LD_ADDR_EXP 65
23029: PUSH
23030: LD_INT 0
23032: ST_TO_ADDR
// sDepot := false ;
23033: LD_ADDR_EXP 66
23037: PUSH
23038: LD_INT 0
23040: ST_TO_ADDR
// sFlag := false ;
23041: LD_ADDR_EXP 67
23045: PUSH
23046: LD_INT 0
23048: ST_TO_ADDR
// sKamikadze := false ;
23049: LD_ADDR_EXP 75
23053: PUSH
23054: LD_INT 0
23056: ST_TO_ADDR
// sTroll := false ;
23057: LD_ADDR_EXP 76
23061: PUSH
23062: LD_INT 0
23064: ST_TO_ADDR
// sSlow := false ;
23065: LD_ADDR_EXP 77
23069: PUSH
23070: LD_INT 0
23072: ST_TO_ADDR
// sLack := false ;
23073: LD_ADDR_EXP 78
23077: PUSH
23078: LD_INT 0
23080: ST_TO_ADDR
// sTank := false ;
23081: LD_ADDR_EXP 80
23085: PUSH
23086: LD_INT 0
23088: ST_TO_ADDR
// sRemote := false ;
23089: LD_ADDR_EXP 81
23093: PUSH
23094: LD_INT 0
23096: ST_TO_ADDR
// sPowell := false ;
23097: LD_ADDR_EXP 82
23101: PUSH
23102: LD_INT 0
23104: ST_TO_ADDR
// sTeleport := false ;
23105: LD_ADDR_EXP 85
23109: PUSH
23110: LD_INT 0
23112: ST_TO_ADDR
// sOilTower := false ;
23113: LD_ADDR_EXP 87
23117: PUSH
23118: LD_INT 0
23120: ST_TO_ADDR
// sShovel := false ;
23121: LD_ADDR_EXP 88
23125: PUSH
23126: LD_INT 0
23128: ST_TO_ADDR
// sSheik := false ;
23129: LD_ADDR_EXP 89
23133: PUSH
23134: LD_INT 0
23136: ST_TO_ADDR
// sEarthquake := false ;
23137: LD_ADDR_EXP 91
23141: PUSH
23142: LD_INT 0
23144: ST_TO_ADDR
// sAI := false ;
23145: LD_ADDR_EXP 92
23149: PUSH
23150: LD_INT 0
23152: ST_TO_ADDR
// sCargo := false ;
23153: LD_ADDR_EXP 95
23157: PUSH
23158: LD_INT 0
23160: ST_TO_ADDR
// sDLaser := false ;
23161: LD_ADDR_EXP 96
23165: PUSH
23166: LD_INT 0
23168: ST_TO_ADDR
// sExchange := false ;
23169: LD_ADDR_EXP 97
23173: PUSH
23174: LD_INT 0
23176: ST_TO_ADDR
// sFac := false ;
23177: LD_ADDR_EXP 98
23181: PUSH
23182: LD_INT 0
23184: ST_TO_ADDR
// sPower := false ;
23185: LD_ADDR_EXP 99
23189: PUSH
23190: LD_INT 0
23192: ST_TO_ADDR
// sRandom := false ;
23193: LD_ADDR_EXP 100
23197: PUSH
23198: LD_INT 0
23200: ST_TO_ADDR
// sShield := false ;
23201: LD_ADDR_EXP 101
23205: PUSH
23206: LD_INT 0
23208: ST_TO_ADDR
// sTime := false ;
23209: LD_ADDR_EXP 102
23213: PUSH
23214: LD_INT 0
23216: ST_TO_ADDR
// sTools := false ;
23217: LD_ADDR_EXP 103
23221: PUSH
23222: LD_INT 0
23224: ST_TO_ADDR
// sSold := false ;
23225: LD_ADDR_EXP 68
23229: PUSH
23230: LD_INT 0
23232: ST_TO_ADDR
// sDiff := false ;
23233: LD_ADDR_EXP 69
23237: PUSH
23238: LD_INT 0
23240: ST_TO_ADDR
// sFog := false ;
23241: LD_ADDR_EXP 72
23245: PUSH
23246: LD_INT 0
23248: ST_TO_ADDR
// sReset := false ;
23249: LD_ADDR_EXP 73
23253: PUSH
23254: LD_INT 0
23256: ST_TO_ADDR
// sSun := false ;
23257: LD_ADDR_EXP 74
23261: PUSH
23262: LD_INT 0
23264: ST_TO_ADDR
// sTiger := false ;
23265: LD_ADDR_EXP 70
23269: PUSH
23270: LD_INT 0
23272: ST_TO_ADDR
// sBomb := false ;
23273: LD_ADDR_EXP 71
23277: PUSH
23278: LD_INT 0
23280: ST_TO_ADDR
// sWound := false ;
23281: LD_ADDR_EXP 79
23285: PUSH
23286: LD_INT 0
23288: ST_TO_ADDR
// sBetray := false ;
23289: LD_ADDR_EXP 83
23293: PUSH
23294: LD_INT 0
23296: ST_TO_ADDR
// sContamin := false ;
23297: LD_ADDR_EXP 84
23301: PUSH
23302: LD_INT 0
23304: ST_TO_ADDR
// sOil := false ;
23305: LD_ADDR_EXP 86
23309: PUSH
23310: LD_INT 0
23312: ST_TO_ADDR
// sStu := false ;
23313: LD_ADDR_EXP 90
23317: PUSH
23318: LD_INT 0
23320: ST_TO_ADDR
// sBazooka := false ;
23321: LD_ADDR_EXP 93
23325: PUSH
23326: LD_INT 0
23328: ST_TO_ADDR
// sMortar := false ;
23329: LD_ADDR_EXP 94
23333: PUSH
23334: LD_INT 0
23336: ST_TO_ADDR
// sRanger := false ;
23337: LD_ADDR_EXP 104
23341: PUSH
23342: LD_INT 0
23344: ST_TO_ADDR
// sComputer := false ;
23345: LD_ADDR_EXP 105
23349: PUSH
23350: LD_INT 0
23352: ST_TO_ADDR
// s30 := false ;
23353: LD_ADDR_EXP 106
23357: PUSH
23358: LD_INT 0
23360: ST_TO_ADDR
// s60 := false ;
23361: LD_ADDR_EXP 107
23365: PUSH
23366: LD_INT 0
23368: ST_TO_ADDR
// end ;
23369: LD_VAR 0 1
23373: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
23374: LD_INT 0
23376: PPUSH
23377: PPUSH
23378: PPUSH
23379: PPUSH
23380: PPUSH
23381: PPUSH
23382: PPUSH
// result := [ ] ;
23383: LD_ADDR_VAR 0 2
23387: PUSH
23388: EMPTY
23389: ST_TO_ADDR
// if campaign_id = 1 then
23390: LD_OWVAR 69
23394: PUSH
23395: LD_INT 1
23397: EQUAL
23398: IFFALSE 26564
// begin case mission_number of 1 :
23400: LD_OWVAR 70
23404: PUSH
23405: LD_INT 1
23407: DOUBLE
23408: EQUAL
23409: IFTRUE 23413
23411: GO 23489
23413: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23414: LD_ADDR_VAR 0 2
23418: PUSH
23419: LD_INT 2
23421: PUSH
23422: LD_INT 4
23424: PUSH
23425: LD_INT 11
23427: PUSH
23428: LD_INT 12
23430: PUSH
23431: LD_INT 15
23433: PUSH
23434: LD_INT 16
23436: PUSH
23437: LD_INT 22
23439: PUSH
23440: LD_INT 23
23442: PUSH
23443: LD_INT 26
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 101
23459: PUSH
23460: LD_INT 102
23462: PUSH
23463: LD_INT 106
23465: PUSH
23466: LD_INT 116
23468: PUSH
23469: LD_INT 117
23471: PUSH
23472: LD_INT 118
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: ST_TO_ADDR
23487: GO 26562
23489: LD_INT 2
23491: DOUBLE
23492: EQUAL
23493: IFTRUE 23497
23495: GO 23581
23497: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23498: LD_ADDR_VAR 0 2
23502: PUSH
23503: LD_INT 2
23505: PUSH
23506: LD_INT 4
23508: PUSH
23509: LD_INT 11
23511: PUSH
23512: LD_INT 12
23514: PUSH
23515: LD_INT 15
23517: PUSH
23518: LD_INT 16
23520: PUSH
23521: LD_INT 22
23523: PUSH
23524: LD_INT 23
23526: PUSH
23527: LD_INT 26
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 101
23543: PUSH
23544: LD_INT 102
23546: PUSH
23547: LD_INT 105
23549: PUSH
23550: LD_INT 106
23552: PUSH
23553: LD_INT 108
23555: PUSH
23556: LD_INT 116
23558: PUSH
23559: LD_INT 117
23561: PUSH
23562: LD_INT 118
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: ST_TO_ADDR
23579: GO 26562
23581: LD_INT 3
23583: DOUBLE
23584: EQUAL
23585: IFTRUE 23589
23587: GO 23677
23589: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
23590: LD_ADDR_VAR 0 2
23594: PUSH
23595: LD_INT 2
23597: PUSH
23598: LD_INT 4
23600: PUSH
23601: LD_INT 5
23603: PUSH
23604: LD_INT 11
23606: PUSH
23607: LD_INT 12
23609: PUSH
23610: LD_INT 15
23612: PUSH
23613: LD_INT 16
23615: PUSH
23616: LD_INT 22
23618: PUSH
23619: LD_INT 26
23621: PUSH
23622: LD_INT 36
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 101
23639: PUSH
23640: LD_INT 102
23642: PUSH
23643: LD_INT 105
23645: PUSH
23646: LD_INT 106
23648: PUSH
23649: LD_INT 108
23651: PUSH
23652: LD_INT 116
23654: PUSH
23655: LD_INT 117
23657: PUSH
23658: LD_INT 118
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: ST_TO_ADDR
23675: GO 26562
23677: LD_INT 4
23679: DOUBLE
23680: EQUAL
23681: IFTRUE 23685
23683: GO 23781
23685: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23686: LD_ADDR_VAR 0 2
23690: PUSH
23691: LD_INT 2
23693: PUSH
23694: LD_INT 4
23696: PUSH
23697: LD_INT 5
23699: PUSH
23700: LD_INT 8
23702: PUSH
23703: LD_INT 11
23705: PUSH
23706: LD_INT 12
23708: PUSH
23709: LD_INT 15
23711: PUSH
23712: LD_INT 16
23714: PUSH
23715: LD_INT 22
23717: PUSH
23718: LD_INT 23
23720: PUSH
23721: LD_INT 26
23723: PUSH
23724: LD_INT 36
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 101
23743: PUSH
23744: LD_INT 102
23746: PUSH
23747: LD_INT 105
23749: PUSH
23750: LD_INT 106
23752: PUSH
23753: LD_INT 108
23755: PUSH
23756: LD_INT 116
23758: PUSH
23759: LD_INT 117
23761: PUSH
23762: LD_INT 118
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: ST_TO_ADDR
23779: GO 26562
23781: LD_INT 5
23783: DOUBLE
23784: EQUAL
23785: IFTRUE 23789
23787: GO 23901
23789: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23790: LD_ADDR_VAR 0 2
23794: PUSH
23795: LD_INT 2
23797: PUSH
23798: LD_INT 4
23800: PUSH
23801: LD_INT 5
23803: PUSH
23804: LD_INT 6
23806: PUSH
23807: LD_INT 8
23809: PUSH
23810: LD_INT 11
23812: PUSH
23813: LD_INT 12
23815: PUSH
23816: LD_INT 15
23818: PUSH
23819: LD_INT 16
23821: PUSH
23822: LD_INT 22
23824: PUSH
23825: LD_INT 23
23827: PUSH
23828: LD_INT 25
23830: PUSH
23831: LD_INT 26
23833: PUSH
23834: LD_INT 36
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 101
23855: PUSH
23856: LD_INT 102
23858: PUSH
23859: LD_INT 105
23861: PUSH
23862: LD_INT 106
23864: PUSH
23865: LD_INT 108
23867: PUSH
23868: LD_INT 109
23870: PUSH
23871: LD_INT 112
23873: PUSH
23874: LD_INT 116
23876: PUSH
23877: LD_INT 117
23879: PUSH
23880: LD_INT 118
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: ST_TO_ADDR
23899: GO 26562
23901: LD_INT 6
23903: DOUBLE
23904: EQUAL
23905: IFTRUE 23909
23907: GO 24041
23909: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23910: LD_ADDR_VAR 0 2
23914: PUSH
23915: LD_INT 2
23917: PUSH
23918: LD_INT 4
23920: PUSH
23921: LD_INT 5
23923: PUSH
23924: LD_INT 6
23926: PUSH
23927: LD_INT 8
23929: PUSH
23930: LD_INT 11
23932: PUSH
23933: LD_INT 12
23935: PUSH
23936: LD_INT 15
23938: PUSH
23939: LD_INT 16
23941: PUSH
23942: LD_INT 20
23944: PUSH
23945: LD_INT 21
23947: PUSH
23948: LD_INT 22
23950: PUSH
23951: LD_INT 23
23953: PUSH
23954: LD_INT 25
23956: PUSH
23957: LD_INT 26
23959: PUSH
23960: LD_INT 30
23962: PUSH
23963: LD_INT 31
23965: PUSH
23966: LD_INT 32
23968: PUSH
23969: LD_INT 36
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 101
23995: PUSH
23996: LD_INT 102
23998: PUSH
23999: LD_INT 105
24001: PUSH
24002: LD_INT 106
24004: PUSH
24005: LD_INT 108
24007: PUSH
24008: LD_INT 109
24010: PUSH
24011: LD_INT 112
24013: PUSH
24014: LD_INT 116
24016: PUSH
24017: LD_INT 117
24019: PUSH
24020: LD_INT 118
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: ST_TO_ADDR
24039: GO 26562
24041: LD_INT 7
24043: DOUBLE
24044: EQUAL
24045: IFTRUE 24049
24047: GO 24161
24049: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
24050: LD_ADDR_VAR 0 2
24054: PUSH
24055: LD_INT 2
24057: PUSH
24058: LD_INT 4
24060: PUSH
24061: LD_INT 5
24063: PUSH
24064: LD_INT 7
24066: PUSH
24067: LD_INT 11
24069: PUSH
24070: LD_INT 12
24072: PUSH
24073: LD_INT 15
24075: PUSH
24076: LD_INT 16
24078: PUSH
24079: LD_INT 20
24081: PUSH
24082: LD_INT 21
24084: PUSH
24085: LD_INT 22
24087: PUSH
24088: LD_INT 23
24090: PUSH
24091: LD_INT 25
24093: PUSH
24094: LD_INT 26
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 101
24115: PUSH
24116: LD_INT 102
24118: PUSH
24119: LD_INT 103
24121: PUSH
24122: LD_INT 105
24124: PUSH
24125: LD_INT 106
24127: PUSH
24128: LD_INT 108
24130: PUSH
24131: LD_INT 112
24133: PUSH
24134: LD_INT 116
24136: PUSH
24137: LD_INT 117
24139: PUSH
24140: LD_INT 118
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: ST_TO_ADDR
24159: GO 26562
24161: LD_INT 8
24163: DOUBLE
24164: EQUAL
24165: IFTRUE 24169
24167: GO 24309
24169: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
24170: LD_ADDR_VAR 0 2
24174: PUSH
24175: LD_INT 2
24177: PUSH
24178: LD_INT 4
24180: PUSH
24181: LD_INT 5
24183: PUSH
24184: LD_INT 6
24186: PUSH
24187: LD_INT 7
24189: PUSH
24190: LD_INT 8
24192: PUSH
24193: LD_INT 11
24195: PUSH
24196: LD_INT 12
24198: PUSH
24199: LD_INT 15
24201: PUSH
24202: LD_INT 16
24204: PUSH
24205: LD_INT 20
24207: PUSH
24208: LD_INT 21
24210: PUSH
24211: LD_INT 22
24213: PUSH
24214: LD_INT 23
24216: PUSH
24217: LD_INT 25
24219: PUSH
24220: LD_INT 26
24222: PUSH
24223: LD_INT 30
24225: PUSH
24226: LD_INT 31
24228: PUSH
24229: LD_INT 32
24231: PUSH
24232: LD_INT 36
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 101
24259: PUSH
24260: LD_INT 102
24262: PUSH
24263: LD_INT 103
24265: PUSH
24266: LD_INT 105
24268: PUSH
24269: LD_INT 106
24271: PUSH
24272: LD_INT 108
24274: PUSH
24275: LD_INT 109
24277: PUSH
24278: LD_INT 112
24280: PUSH
24281: LD_INT 116
24283: PUSH
24284: LD_INT 117
24286: PUSH
24287: LD_INT 118
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: ST_TO_ADDR
24307: GO 26562
24309: LD_INT 9
24311: DOUBLE
24312: EQUAL
24313: IFTRUE 24317
24315: GO 24465
24317: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
24318: LD_ADDR_VAR 0 2
24322: PUSH
24323: LD_INT 2
24325: PUSH
24326: LD_INT 4
24328: PUSH
24329: LD_INT 5
24331: PUSH
24332: LD_INT 6
24334: PUSH
24335: LD_INT 7
24337: PUSH
24338: LD_INT 8
24340: PUSH
24341: LD_INT 11
24343: PUSH
24344: LD_INT 12
24346: PUSH
24347: LD_INT 15
24349: PUSH
24350: LD_INT 16
24352: PUSH
24353: LD_INT 20
24355: PUSH
24356: LD_INT 21
24358: PUSH
24359: LD_INT 22
24361: PUSH
24362: LD_INT 23
24364: PUSH
24365: LD_INT 25
24367: PUSH
24368: LD_INT 26
24370: PUSH
24371: LD_INT 28
24373: PUSH
24374: LD_INT 30
24376: PUSH
24377: LD_INT 31
24379: PUSH
24380: LD_INT 32
24382: PUSH
24383: LD_INT 36
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 101
24411: PUSH
24412: LD_INT 102
24414: PUSH
24415: LD_INT 103
24417: PUSH
24418: LD_INT 105
24420: PUSH
24421: LD_INT 106
24423: PUSH
24424: LD_INT 108
24426: PUSH
24427: LD_INT 109
24429: PUSH
24430: LD_INT 112
24432: PUSH
24433: LD_INT 114
24435: PUSH
24436: LD_INT 116
24438: PUSH
24439: LD_INT 117
24441: PUSH
24442: LD_INT 118
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: ST_TO_ADDR
24463: GO 26562
24465: LD_INT 10
24467: DOUBLE
24468: EQUAL
24469: IFTRUE 24473
24471: GO 24669
24473: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24474: LD_ADDR_VAR 0 2
24478: PUSH
24479: LD_INT 2
24481: PUSH
24482: LD_INT 4
24484: PUSH
24485: LD_INT 5
24487: PUSH
24488: LD_INT 6
24490: PUSH
24491: LD_INT 7
24493: PUSH
24494: LD_INT 8
24496: PUSH
24497: LD_INT 9
24499: PUSH
24500: LD_INT 10
24502: PUSH
24503: LD_INT 11
24505: PUSH
24506: LD_INT 12
24508: PUSH
24509: LD_INT 13
24511: PUSH
24512: LD_INT 14
24514: PUSH
24515: LD_INT 15
24517: PUSH
24518: LD_INT 16
24520: PUSH
24521: LD_INT 17
24523: PUSH
24524: LD_INT 18
24526: PUSH
24527: LD_INT 19
24529: PUSH
24530: LD_INT 20
24532: PUSH
24533: LD_INT 21
24535: PUSH
24536: LD_INT 22
24538: PUSH
24539: LD_INT 23
24541: PUSH
24542: LD_INT 24
24544: PUSH
24545: LD_INT 25
24547: PUSH
24548: LD_INT 26
24550: PUSH
24551: LD_INT 28
24553: PUSH
24554: LD_INT 30
24556: PUSH
24557: LD_INT 31
24559: PUSH
24560: LD_INT 32
24562: PUSH
24563: LD_INT 36
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 101
24599: PUSH
24600: LD_INT 102
24602: PUSH
24603: LD_INT 103
24605: PUSH
24606: LD_INT 104
24608: PUSH
24609: LD_INT 105
24611: PUSH
24612: LD_INT 106
24614: PUSH
24615: LD_INT 107
24617: PUSH
24618: LD_INT 108
24620: PUSH
24621: LD_INT 109
24623: PUSH
24624: LD_INT 110
24626: PUSH
24627: LD_INT 111
24629: PUSH
24630: LD_INT 112
24632: PUSH
24633: LD_INT 114
24635: PUSH
24636: LD_INT 116
24638: PUSH
24639: LD_INT 117
24641: PUSH
24642: LD_INT 118
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: ST_TO_ADDR
24667: GO 26562
24669: LD_INT 11
24671: DOUBLE
24672: EQUAL
24673: IFTRUE 24677
24675: GO 24881
24677: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24678: LD_ADDR_VAR 0 2
24682: PUSH
24683: LD_INT 2
24685: PUSH
24686: LD_INT 3
24688: PUSH
24689: LD_INT 4
24691: PUSH
24692: LD_INT 5
24694: PUSH
24695: LD_INT 6
24697: PUSH
24698: LD_INT 7
24700: PUSH
24701: LD_INT 8
24703: PUSH
24704: LD_INT 9
24706: PUSH
24707: LD_INT 10
24709: PUSH
24710: LD_INT 11
24712: PUSH
24713: LD_INT 12
24715: PUSH
24716: LD_INT 13
24718: PUSH
24719: LD_INT 14
24721: PUSH
24722: LD_INT 15
24724: PUSH
24725: LD_INT 16
24727: PUSH
24728: LD_INT 17
24730: PUSH
24731: LD_INT 18
24733: PUSH
24734: LD_INT 19
24736: PUSH
24737: LD_INT 20
24739: PUSH
24740: LD_INT 21
24742: PUSH
24743: LD_INT 22
24745: PUSH
24746: LD_INT 23
24748: PUSH
24749: LD_INT 24
24751: PUSH
24752: LD_INT 25
24754: PUSH
24755: LD_INT 26
24757: PUSH
24758: LD_INT 28
24760: PUSH
24761: LD_INT 30
24763: PUSH
24764: LD_INT 31
24766: PUSH
24767: LD_INT 32
24769: PUSH
24770: LD_INT 34
24772: PUSH
24773: LD_INT 36
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 101
24811: PUSH
24812: LD_INT 102
24814: PUSH
24815: LD_INT 103
24817: PUSH
24818: LD_INT 104
24820: PUSH
24821: LD_INT 105
24823: PUSH
24824: LD_INT 106
24826: PUSH
24827: LD_INT 107
24829: PUSH
24830: LD_INT 108
24832: PUSH
24833: LD_INT 109
24835: PUSH
24836: LD_INT 110
24838: PUSH
24839: LD_INT 111
24841: PUSH
24842: LD_INT 112
24844: PUSH
24845: LD_INT 114
24847: PUSH
24848: LD_INT 116
24850: PUSH
24851: LD_INT 117
24853: PUSH
24854: LD_INT 118
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: ST_TO_ADDR
24879: GO 26562
24881: LD_INT 12
24883: DOUBLE
24884: EQUAL
24885: IFTRUE 24889
24887: GO 25109
24889: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24890: LD_ADDR_VAR 0 2
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: LD_INT 3
24903: PUSH
24904: LD_INT 4
24906: PUSH
24907: LD_INT 5
24909: PUSH
24910: LD_INT 6
24912: PUSH
24913: LD_INT 7
24915: PUSH
24916: LD_INT 8
24918: PUSH
24919: LD_INT 9
24921: PUSH
24922: LD_INT 10
24924: PUSH
24925: LD_INT 11
24927: PUSH
24928: LD_INT 12
24930: PUSH
24931: LD_INT 13
24933: PUSH
24934: LD_INT 14
24936: PUSH
24937: LD_INT 15
24939: PUSH
24940: LD_INT 16
24942: PUSH
24943: LD_INT 17
24945: PUSH
24946: LD_INT 18
24948: PUSH
24949: LD_INT 19
24951: PUSH
24952: LD_INT 20
24954: PUSH
24955: LD_INT 21
24957: PUSH
24958: LD_INT 22
24960: PUSH
24961: LD_INT 23
24963: PUSH
24964: LD_INT 24
24966: PUSH
24967: LD_INT 25
24969: PUSH
24970: LD_INT 26
24972: PUSH
24973: LD_INT 27
24975: PUSH
24976: LD_INT 28
24978: PUSH
24979: LD_INT 30
24981: PUSH
24982: LD_INT 31
24984: PUSH
24985: LD_INT 32
24987: PUSH
24988: LD_INT 33
24990: PUSH
24991: LD_INT 34
24993: PUSH
24994: LD_INT 36
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 101
25035: PUSH
25036: LD_INT 102
25038: PUSH
25039: LD_INT 103
25041: PUSH
25042: LD_INT 104
25044: PUSH
25045: LD_INT 105
25047: PUSH
25048: LD_INT 106
25050: PUSH
25051: LD_INT 107
25053: PUSH
25054: LD_INT 108
25056: PUSH
25057: LD_INT 109
25059: PUSH
25060: LD_INT 110
25062: PUSH
25063: LD_INT 111
25065: PUSH
25066: LD_INT 112
25068: PUSH
25069: LD_INT 113
25071: PUSH
25072: LD_INT 114
25074: PUSH
25075: LD_INT 116
25077: PUSH
25078: LD_INT 117
25080: PUSH
25081: LD_INT 118
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: ST_TO_ADDR
25107: GO 26562
25109: LD_INT 13
25111: DOUBLE
25112: EQUAL
25113: IFTRUE 25117
25115: GO 25325
25117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
25118: LD_ADDR_VAR 0 2
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: LD_INT 2
25128: PUSH
25129: LD_INT 3
25131: PUSH
25132: LD_INT 4
25134: PUSH
25135: LD_INT 5
25137: PUSH
25138: LD_INT 8
25140: PUSH
25141: LD_INT 9
25143: PUSH
25144: LD_INT 10
25146: PUSH
25147: LD_INT 11
25149: PUSH
25150: LD_INT 12
25152: PUSH
25153: LD_INT 14
25155: PUSH
25156: LD_INT 15
25158: PUSH
25159: LD_INT 16
25161: PUSH
25162: LD_INT 17
25164: PUSH
25165: LD_INT 18
25167: PUSH
25168: LD_INT 19
25170: PUSH
25171: LD_INT 20
25173: PUSH
25174: LD_INT 21
25176: PUSH
25177: LD_INT 22
25179: PUSH
25180: LD_INT 23
25182: PUSH
25183: LD_INT 24
25185: PUSH
25186: LD_INT 25
25188: PUSH
25189: LD_INT 26
25191: PUSH
25192: LD_INT 27
25194: PUSH
25195: LD_INT 28
25197: PUSH
25198: LD_INT 30
25200: PUSH
25201: LD_INT 31
25203: PUSH
25204: LD_INT 32
25206: PUSH
25207: LD_INT 33
25209: PUSH
25210: LD_INT 34
25212: PUSH
25213: LD_INT 36
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 101
25251: PUSH
25252: LD_INT 102
25254: PUSH
25255: LD_INT 103
25257: PUSH
25258: LD_INT 104
25260: PUSH
25261: LD_INT 105
25263: PUSH
25264: LD_INT 106
25266: PUSH
25267: LD_INT 107
25269: PUSH
25270: LD_INT 108
25272: PUSH
25273: LD_INT 109
25275: PUSH
25276: LD_INT 110
25278: PUSH
25279: LD_INT 111
25281: PUSH
25282: LD_INT 112
25284: PUSH
25285: LD_INT 113
25287: PUSH
25288: LD_INT 114
25290: PUSH
25291: LD_INT 116
25293: PUSH
25294: LD_INT 117
25296: PUSH
25297: LD_INT 118
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: ST_TO_ADDR
25323: GO 26562
25325: LD_INT 14
25327: DOUBLE
25328: EQUAL
25329: IFTRUE 25333
25331: GO 25557
25333: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
25334: LD_ADDR_VAR 0 2
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: LD_INT 2
25344: PUSH
25345: LD_INT 3
25347: PUSH
25348: LD_INT 4
25350: PUSH
25351: LD_INT 5
25353: PUSH
25354: LD_INT 6
25356: PUSH
25357: LD_INT 7
25359: PUSH
25360: LD_INT 8
25362: PUSH
25363: LD_INT 9
25365: PUSH
25366: LD_INT 10
25368: PUSH
25369: LD_INT 11
25371: PUSH
25372: LD_INT 12
25374: PUSH
25375: LD_INT 13
25377: PUSH
25378: LD_INT 14
25380: PUSH
25381: LD_INT 15
25383: PUSH
25384: LD_INT 16
25386: PUSH
25387: LD_INT 17
25389: PUSH
25390: LD_INT 18
25392: PUSH
25393: LD_INT 19
25395: PUSH
25396: LD_INT 20
25398: PUSH
25399: LD_INT 21
25401: PUSH
25402: LD_INT 22
25404: PUSH
25405: LD_INT 23
25407: PUSH
25408: LD_INT 24
25410: PUSH
25411: LD_INT 25
25413: PUSH
25414: LD_INT 26
25416: PUSH
25417: LD_INT 27
25419: PUSH
25420: LD_INT 28
25422: PUSH
25423: LD_INT 29
25425: PUSH
25426: LD_INT 30
25428: PUSH
25429: LD_INT 31
25431: PUSH
25432: LD_INT 32
25434: PUSH
25435: LD_INT 33
25437: PUSH
25438: LD_INT 34
25440: PUSH
25441: LD_INT 36
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 101
25483: PUSH
25484: LD_INT 102
25486: PUSH
25487: LD_INT 103
25489: PUSH
25490: LD_INT 104
25492: PUSH
25493: LD_INT 105
25495: PUSH
25496: LD_INT 106
25498: PUSH
25499: LD_INT 107
25501: PUSH
25502: LD_INT 108
25504: PUSH
25505: LD_INT 109
25507: PUSH
25508: LD_INT 110
25510: PUSH
25511: LD_INT 111
25513: PUSH
25514: LD_INT 112
25516: PUSH
25517: LD_INT 113
25519: PUSH
25520: LD_INT 114
25522: PUSH
25523: LD_INT 116
25525: PUSH
25526: LD_INT 117
25528: PUSH
25529: LD_INT 118
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: ST_TO_ADDR
25555: GO 26562
25557: LD_INT 15
25559: DOUBLE
25560: EQUAL
25561: IFTRUE 25565
25563: GO 25789
25565: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
25566: LD_ADDR_VAR 0 2
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: LD_INT 2
25576: PUSH
25577: LD_INT 3
25579: PUSH
25580: LD_INT 4
25582: PUSH
25583: LD_INT 5
25585: PUSH
25586: LD_INT 6
25588: PUSH
25589: LD_INT 7
25591: PUSH
25592: LD_INT 8
25594: PUSH
25595: LD_INT 9
25597: PUSH
25598: LD_INT 10
25600: PUSH
25601: LD_INT 11
25603: PUSH
25604: LD_INT 12
25606: PUSH
25607: LD_INT 13
25609: PUSH
25610: LD_INT 14
25612: PUSH
25613: LD_INT 15
25615: PUSH
25616: LD_INT 16
25618: PUSH
25619: LD_INT 17
25621: PUSH
25622: LD_INT 18
25624: PUSH
25625: LD_INT 19
25627: PUSH
25628: LD_INT 20
25630: PUSH
25631: LD_INT 21
25633: PUSH
25634: LD_INT 22
25636: PUSH
25637: LD_INT 23
25639: PUSH
25640: LD_INT 24
25642: PUSH
25643: LD_INT 25
25645: PUSH
25646: LD_INT 26
25648: PUSH
25649: LD_INT 27
25651: PUSH
25652: LD_INT 28
25654: PUSH
25655: LD_INT 29
25657: PUSH
25658: LD_INT 30
25660: PUSH
25661: LD_INT 31
25663: PUSH
25664: LD_INT 32
25666: PUSH
25667: LD_INT 33
25669: PUSH
25670: LD_INT 34
25672: PUSH
25673: LD_INT 36
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 101
25715: PUSH
25716: LD_INT 102
25718: PUSH
25719: LD_INT 103
25721: PUSH
25722: LD_INT 104
25724: PUSH
25725: LD_INT 105
25727: PUSH
25728: LD_INT 106
25730: PUSH
25731: LD_INT 107
25733: PUSH
25734: LD_INT 108
25736: PUSH
25737: LD_INT 109
25739: PUSH
25740: LD_INT 110
25742: PUSH
25743: LD_INT 111
25745: PUSH
25746: LD_INT 112
25748: PUSH
25749: LD_INT 113
25751: PUSH
25752: LD_INT 114
25754: PUSH
25755: LD_INT 116
25757: PUSH
25758: LD_INT 117
25760: PUSH
25761: LD_INT 118
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: ST_TO_ADDR
25787: GO 26562
25789: LD_INT 16
25791: DOUBLE
25792: EQUAL
25793: IFTRUE 25797
25795: GO 25933
25797: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25798: LD_ADDR_VAR 0 2
25802: PUSH
25803: LD_INT 2
25805: PUSH
25806: LD_INT 4
25808: PUSH
25809: LD_INT 5
25811: PUSH
25812: LD_INT 7
25814: PUSH
25815: LD_INT 11
25817: PUSH
25818: LD_INT 12
25820: PUSH
25821: LD_INT 15
25823: PUSH
25824: LD_INT 16
25826: PUSH
25827: LD_INT 20
25829: PUSH
25830: LD_INT 21
25832: PUSH
25833: LD_INT 22
25835: PUSH
25836: LD_INT 23
25838: PUSH
25839: LD_INT 25
25841: PUSH
25842: LD_INT 26
25844: PUSH
25845: LD_INT 30
25847: PUSH
25848: LD_INT 31
25850: PUSH
25851: LD_INT 32
25853: PUSH
25854: LD_INT 33
25856: PUSH
25857: LD_INT 34
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 101
25883: PUSH
25884: LD_INT 102
25886: PUSH
25887: LD_INT 103
25889: PUSH
25890: LD_INT 106
25892: PUSH
25893: LD_INT 108
25895: PUSH
25896: LD_INT 112
25898: PUSH
25899: LD_INT 113
25901: PUSH
25902: LD_INT 114
25904: PUSH
25905: LD_INT 116
25907: PUSH
25908: LD_INT 117
25910: PUSH
25911: LD_INT 118
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: ST_TO_ADDR
25931: GO 26562
25933: LD_INT 17
25935: DOUBLE
25936: EQUAL
25937: IFTRUE 25941
25939: GO 26165
25941: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25942: LD_ADDR_VAR 0 2
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: LD_INT 2
25952: PUSH
25953: LD_INT 3
25955: PUSH
25956: LD_INT 4
25958: PUSH
25959: LD_INT 5
25961: PUSH
25962: LD_INT 6
25964: PUSH
25965: LD_INT 7
25967: PUSH
25968: LD_INT 8
25970: PUSH
25971: LD_INT 9
25973: PUSH
25974: LD_INT 10
25976: PUSH
25977: LD_INT 11
25979: PUSH
25980: LD_INT 12
25982: PUSH
25983: LD_INT 13
25985: PUSH
25986: LD_INT 14
25988: PUSH
25989: LD_INT 15
25991: PUSH
25992: LD_INT 16
25994: PUSH
25995: LD_INT 17
25997: PUSH
25998: LD_INT 18
26000: PUSH
26001: LD_INT 19
26003: PUSH
26004: LD_INT 20
26006: PUSH
26007: LD_INT 21
26009: PUSH
26010: LD_INT 22
26012: PUSH
26013: LD_INT 23
26015: PUSH
26016: LD_INT 24
26018: PUSH
26019: LD_INT 25
26021: PUSH
26022: LD_INT 26
26024: PUSH
26025: LD_INT 27
26027: PUSH
26028: LD_INT 28
26030: PUSH
26031: LD_INT 29
26033: PUSH
26034: LD_INT 30
26036: PUSH
26037: LD_INT 31
26039: PUSH
26040: LD_INT 32
26042: PUSH
26043: LD_INT 33
26045: PUSH
26046: LD_INT 34
26048: PUSH
26049: LD_INT 36
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 101
26091: PUSH
26092: LD_INT 102
26094: PUSH
26095: LD_INT 103
26097: PUSH
26098: LD_INT 104
26100: PUSH
26101: LD_INT 105
26103: PUSH
26104: LD_INT 106
26106: PUSH
26107: LD_INT 107
26109: PUSH
26110: LD_INT 108
26112: PUSH
26113: LD_INT 109
26115: PUSH
26116: LD_INT 110
26118: PUSH
26119: LD_INT 111
26121: PUSH
26122: LD_INT 112
26124: PUSH
26125: LD_INT 113
26127: PUSH
26128: LD_INT 114
26130: PUSH
26131: LD_INT 116
26133: PUSH
26134: LD_INT 117
26136: PUSH
26137: LD_INT 118
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: ST_TO_ADDR
26163: GO 26562
26165: LD_INT 18
26167: DOUBLE
26168: EQUAL
26169: IFTRUE 26173
26171: GO 26321
26173: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
26174: LD_ADDR_VAR 0 2
26178: PUSH
26179: LD_INT 2
26181: PUSH
26182: LD_INT 4
26184: PUSH
26185: LD_INT 5
26187: PUSH
26188: LD_INT 7
26190: PUSH
26191: LD_INT 11
26193: PUSH
26194: LD_INT 12
26196: PUSH
26197: LD_INT 15
26199: PUSH
26200: LD_INT 16
26202: PUSH
26203: LD_INT 20
26205: PUSH
26206: LD_INT 21
26208: PUSH
26209: LD_INT 22
26211: PUSH
26212: LD_INT 23
26214: PUSH
26215: LD_INT 25
26217: PUSH
26218: LD_INT 26
26220: PUSH
26221: LD_INT 30
26223: PUSH
26224: LD_INT 31
26226: PUSH
26227: LD_INT 32
26229: PUSH
26230: LD_INT 33
26232: PUSH
26233: LD_INT 34
26235: PUSH
26236: LD_INT 35
26238: PUSH
26239: LD_INT 36
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 101
26267: PUSH
26268: LD_INT 102
26270: PUSH
26271: LD_INT 103
26273: PUSH
26274: LD_INT 106
26276: PUSH
26277: LD_INT 108
26279: PUSH
26280: LD_INT 112
26282: PUSH
26283: LD_INT 113
26285: PUSH
26286: LD_INT 114
26288: PUSH
26289: LD_INT 115
26291: PUSH
26292: LD_INT 116
26294: PUSH
26295: LD_INT 117
26297: PUSH
26298: LD_INT 118
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: ST_TO_ADDR
26319: GO 26562
26321: LD_INT 19
26323: DOUBLE
26324: EQUAL
26325: IFTRUE 26329
26327: GO 26561
26329: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
26330: LD_ADDR_VAR 0 2
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: LD_INT 2
26340: PUSH
26341: LD_INT 3
26343: PUSH
26344: LD_INT 4
26346: PUSH
26347: LD_INT 5
26349: PUSH
26350: LD_INT 6
26352: PUSH
26353: LD_INT 7
26355: PUSH
26356: LD_INT 8
26358: PUSH
26359: LD_INT 9
26361: PUSH
26362: LD_INT 10
26364: PUSH
26365: LD_INT 11
26367: PUSH
26368: LD_INT 12
26370: PUSH
26371: LD_INT 13
26373: PUSH
26374: LD_INT 14
26376: PUSH
26377: LD_INT 15
26379: PUSH
26380: LD_INT 16
26382: PUSH
26383: LD_INT 17
26385: PUSH
26386: LD_INT 18
26388: PUSH
26389: LD_INT 19
26391: PUSH
26392: LD_INT 20
26394: PUSH
26395: LD_INT 21
26397: PUSH
26398: LD_INT 22
26400: PUSH
26401: LD_INT 23
26403: PUSH
26404: LD_INT 24
26406: PUSH
26407: LD_INT 25
26409: PUSH
26410: LD_INT 26
26412: PUSH
26413: LD_INT 27
26415: PUSH
26416: LD_INT 28
26418: PUSH
26419: LD_INT 29
26421: PUSH
26422: LD_INT 30
26424: PUSH
26425: LD_INT 31
26427: PUSH
26428: LD_INT 32
26430: PUSH
26431: LD_INT 33
26433: PUSH
26434: LD_INT 34
26436: PUSH
26437: LD_INT 35
26439: PUSH
26440: LD_INT 36
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 101
26483: PUSH
26484: LD_INT 102
26486: PUSH
26487: LD_INT 103
26489: PUSH
26490: LD_INT 104
26492: PUSH
26493: LD_INT 105
26495: PUSH
26496: LD_INT 106
26498: PUSH
26499: LD_INT 107
26501: PUSH
26502: LD_INT 108
26504: PUSH
26505: LD_INT 109
26507: PUSH
26508: LD_INT 110
26510: PUSH
26511: LD_INT 111
26513: PUSH
26514: LD_INT 112
26516: PUSH
26517: LD_INT 113
26519: PUSH
26520: LD_INT 114
26522: PUSH
26523: LD_INT 115
26525: PUSH
26526: LD_INT 116
26528: PUSH
26529: LD_INT 117
26531: PUSH
26532: LD_INT 118
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: ST_TO_ADDR
26559: GO 26562
26561: POP
// end else
26562: GO 26793
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
26564: LD_ADDR_VAR 0 2
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: LD_INT 2
26574: PUSH
26575: LD_INT 3
26577: PUSH
26578: LD_INT 4
26580: PUSH
26581: LD_INT 5
26583: PUSH
26584: LD_INT 6
26586: PUSH
26587: LD_INT 7
26589: PUSH
26590: LD_INT 8
26592: PUSH
26593: LD_INT 9
26595: PUSH
26596: LD_INT 10
26598: PUSH
26599: LD_INT 11
26601: PUSH
26602: LD_INT 12
26604: PUSH
26605: LD_INT 13
26607: PUSH
26608: LD_INT 14
26610: PUSH
26611: LD_INT 15
26613: PUSH
26614: LD_INT 16
26616: PUSH
26617: LD_INT 17
26619: PUSH
26620: LD_INT 18
26622: PUSH
26623: LD_INT 19
26625: PUSH
26626: LD_INT 20
26628: PUSH
26629: LD_INT 21
26631: PUSH
26632: LD_INT 22
26634: PUSH
26635: LD_INT 23
26637: PUSH
26638: LD_INT 24
26640: PUSH
26641: LD_INT 25
26643: PUSH
26644: LD_INT 26
26646: PUSH
26647: LD_INT 27
26649: PUSH
26650: LD_INT 28
26652: PUSH
26653: LD_INT 29
26655: PUSH
26656: LD_INT 30
26658: PUSH
26659: LD_INT 31
26661: PUSH
26662: LD_INT 32
26664: PUSH
26665: LD_INT 33
26667: PUSH
26668: LD_INT 34
26670: PUSH
26671: LD_INT 35
26673: PUSH
26674: LD_INT 36
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 101
26717: PUSH
26718: LD_INT 102
26720: PUSH
26721: LD_INT 103
26723: PUSH
26724: LD_INT 104
26726: PUSH
26727: LD_INT 105
26729: PUSH
26730: LD_INT 106
26732: PUSH
26733: LD_INT 107
26735: PUSH
26736: LD_INT 108
26738: PUSH
26739: LD_INT 109
26741: PUSH
26742: LD_INT 110
26744: PUSH
26745: LD_INT 111
26747: PUSH
26748: LD_INT 112
26750: PUSH
26751: LD_INT 113
26753: PUSH
26754: LD_INT 114
26756: PUSH
26757: LD_INT 115
26759: PUSH
26760: LD_INT 116
26762: PUSH
26763: LD_INT 117
26765: PUSH
26766: LD_INT 118
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: ST_TO_ADDR
// if result then
26793: LD_VAR 0 2
26797: IFFALSE 27583
// begin normal :=  ;
26799: LD_ADDR_VAR 0 5
26803: PUSH
26804: LD_STRING 
26806: ST_TO_ADDR
// hardcore :=  ;
26807: LD_ADDR_VAR 0 6
26811: PUSH
26812: LD_STRING 
26814: ST_TO_ADDR
// active :=  ;
26815: LD_ADDR_VAR 0 7
26819: PUSH
26820: LD_STRING 
26822: ST_TO_ADDR
// for i = 1 to normalCounter do
26823: LD_ADDR_VAR 0 8
26827: PUSH
26828: DOUBLE
26829: LD_INT 1
26831: DEC
26832: ST_TO_ADDR
26833: LD_EXP 52
26837: PUSH
26838: FOR_TO
26839: IFFALSE 26940
// begin tmp := 0 ;
26841: LD_ADDR_VAR 0 3
26845: PUSH
26846: LD_STRING 0
26848: ST_TO_ADDR
// if result [ 1 ] then
26849: LD_VAR 0 2
26853: PUSH
26854: LD_INT 1
26856: ARRAY
26857: IFFALSE 26922
// if result [ 1 ] [ 1 ] = i then
26859: LD_VAR 0 2
26863: PUSH
26864: LD_INT 1
26866: ARRAY
26867: PUSH
26868: LD_INT 1
26870: ARRAY
26871: PUSH
26872: LD_VAR 0 8
26876: EQUAL
26877: IFFALSE 26922
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26879: LD_ADDR_VAR 0 2
26883: PUSH
26884: LD_VAR 0 2
26888: PPUSH
26889: LD_INT 1
26891: PPUSH
26892: LD_VAR 0 2
26896: PUSH
26897: LD_INT 1
26899: ARRAY
26900: PPUSH
26901: LD_INT 1
26903: PPUSH
26904: CALL_OW 3
26908: PPUSH
26909: CALL_OW 1
26913: ST_TO_ADDR
// tmp := 1 ;
26914: LD_ADDR_VAR 0 3
26918: PUSH
26919: LD_STRING 1
26921: ST_TO_ADDR
// end ; normal := normal & tmp ;
26922: LD_ADDR_VAR 0 5
26926: PUSH
26927: LD_VAR 0 5
26931: PUSH
26932: LD_VAR 0 3
26936: STR
26937: ST_TO_ADDR
// end ;
26938: GO 26838
26940: POP
26941: POP
// for i = 1 to hardcoreCounter do
26942: LD_ADDR_VAR 0 8
26946: PUSH
26947: DOUBLE
26948: LD_INT 1
26950: DEC
26951: ST_TO_ADDR
26952: LD_EXP 53
26956: PUSH
26957: FOR_TO
26958: IFFALSE 27063
// begin tmp := 0 ;
26960: LD_ADDR_VAR 0 3
26964: PUSH
26965: LD_STRING 0
26967: ST_TO_ADDR
// if result [ 2 ] then
26968: LD_VAR 0 2
26972: PUSH
26973: LD_INT 2
26975: ARRAY
26976: IFFALSE 27045
// if result [ 2 ] [ 1 ] = 100 + i then
26978: LD_VAR 0 2
26982: PUSH
26983: LD_INT 2
26985: ARRAY
26986: PUSH
26987: LD_INT 1
26989: ARRAY
26990: PUSH
26991: LD_INT 100
26993: PUSH
26994: LD_VAR 0 8
26998: PLUS
26999: EQUAL
27000: IFFALSE 27045
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27002: LD_ADDR_VAR 0 2
27006: PUSH
27007: LD_VAR 0 2
27011: PPUSH
27012: LD_INT 2
27014: PPUSH
27015: LD_VAR 0 2
27019: PUSH
27020: LD_INT 2
27022: ARRAY
27023: PPUSH
27024: LD_INT 1
27026: PPUSH
27027: CALL_OW 3
27031: PPUSH
27032: CALL_OW 1
27036: ST_TO_ADDR
// tmp := 1 ;
27037: LD_ADDR_VAR 0 3
27041: PUSH
27042: LD_STRING 1
27044: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27045: LD_ADDR_VAR 0 6
27049: PUSH
27050: LD_VAR 0 6
27054: PUSH
27055: LD_VAR 0 3
27059: STR
27060: ST_TO_ADDR
// end ;
27061: GO 26957
27063: POP
27064: POP
// if isGameLoad then
27065: LD_VAR 0 1
27069: IFFALSE 27544
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
27071: LD_ADDR_VAR 0 4
27075: PUSH
27076: LD_EXP 56
27080: PUSH
27081: LD_EXP 55
27085: PUSH
27086: LD_EXP 57
27090: PUSH
27091: LD_EXP 54
27095: PUSH
27096: LD_EXP 58
27100: PUSH
27101: LD_EXP 59
27105: PUSH
27106: LD_EXP 60
27110: PUSH
27111: LD_EXP 61
27115: PUSH
27116: LD_EXP 62
27120: PUSH
27121: LD_EXP 63
27125: PUSH
27126: LD_EXP 64
27130: PUSH
27131: LD_EXP 65
27135: PUSH
27136: LD_EXP 66
27140: PUSH
27141: LD_EXP 67
27145: PUSH
27146: LD_EXP 75
27150: PUSH
27151: LD_EXP 76
27155: PUSH
27156: LD_EXP 77
27160: PUSH
27161: LD_EXP 78
27165: PUSH
27166: LD_EXP 80
27170: PUSH
27171: LD_EXP 81
27175: PUSH
27176: LD_EXP 82
27180: PUSH
27181: LD_EXP 85
27185: PUSH
27186: LD_EXP 87
27190: PUSH
27191: LD_EXP 88
27195: PUSH
27196: LD_EXP 89
27200: PUSH
27201: LD_EXP 91
27205: PUSH
27206: LD_EXP 92
27210: PUSH
27211: LD_EXP 95
27215: PUSH
27216: LD_EXP 96
27220: PUSH
27221: LD_EXP 97
27225: PUSH
27226: LD_EXP 98
27230: PUSH
27231: LD_EXP 99
27235: PUSH
27236: LD_EXP 100
27240: PUSH
27241: LD_EXP 101
27245: PUSH
27246: LD_EXP 102
27250: PUSH
27251: LD_EXP 103
27255: PUSH
27256: LD_EXP 68
27260: PUSH
27261: LD_EXP 69
27265: PUSH
27266: LD_EXP 72
27270: PUSH
27271: LD_EXP 73
27275: PUSH
27276: LD_EXP 74
27280: PUSH
27281: LD_EXP 70
27285: PUSH
27286: LD_EXP 71
27290: PUSH
27291: LD_EXP 79
27295: PUSH
27296: LD_EXP 83
27300: PUSH
27301: LD_EXP 84
27305: PUSH
27306: LD_EXP 86
27310: PUSH
27311: LD_EXP 90
27315: PUSH
27316: LD_EXP 93
27320: PUSH
27321: LD_EXP 94
27325: PUSH
27326: LD_EXP 104
27330: PUSH
27331: LD_EXP 105
27335: PUSH
27336: LD_EXP 106
27340: PUSH
27341: LD_EXP 107
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: ST_TO_ADDR
// tmp :=  ;
27402: LD_ADDR_VAR 0 3
27406: PUSH
27407: LD_STRING 
27409: ST_TO_ADDR
// for i = 1 to normalCounter do
27410: LD_ADDR_VAR 0 8
27414: PUSH
27415: DOUBLE
27416: LD_INT 1
27418: DEC
27419: ST_TO_ADDR
27420: LD_EXP 52
27424: PUSH
27425: FOR_TO
27426: IFFALSE 27462
// begin if flags [ i ] then
27428: LD_VAR 0 4
27432: PUSH
27433: LD_VAR 0 8
27437: ARRAY
27438: IFFALSE 27460
// tmp := tmp & i & ; ;
27440: LD_ADDR_VAR 0 3
27444: PUSH
27445: LD_VAR 0 3
27449: PUSH
27450: LD_VAR 0 8
27454: STR
27455: PUSH
27456: LD_STRING ;
27458: STR
27459: ST_TO_ADDR
// end ;
27460: GO 27425
27462: POP
27463: POP
// for i = 1 to hardcoreCounter do
27464: LD_ADDR_VAR 0 8
27468: PUSH
27469: DOUBLE
27470: LD_INT 1
27472: DEC
27473: ST_TO_ADDR
27474: LD_EXP 53
27478: PUSH
27479: FOR_TO
27480: IFFALSE 27526
// begin if flags [ normalCounter + i ] then
27482: LD_VAR 0 4
27486: PUSH
27487: LD_EXP 52
27491: PUSH
27492: LD_VAR 0 8
27496: PLUS
27497: ARRAY
27498: IFFALSE 27524
// tmp := tmp & ( 100 + i ) & ; ;
27500: LD_ADDR_VAR 0 3
27504: PUSH
27505: LD_VAR 0 3
27509: PUSH
27510: LD_INT 100
27512: PUSH
27513: LD_VAR 0 8
27517: PLUS
27518: STR
27519: PUSH
27520: LD_STRING ;
27522: STR
27523: ST_TO_ADDR
// end ;
27524: GO 27479
27526: POP
27527: POP
// if tmp then
27528: LD_VAR 0 3
27532: IFFALSE 27544
// active := tmp ;
27534: LD_ADDR_VAR 0 7
27538: PUSH
27539: LD_VAR 0 3
27543: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27544: LD_STRING getStreamItemsFromMission("
27546: PUSH
27547: LD_VAR 0 5
27551: STR
27552: PUSH
27553: LD_STRING ","
27555: STR
27556: PUSH
27557: LD_VAR 0 6
27561: STR
27562: PUSH
27563: LD_STRING ","
27565: STR
27566: PUSH
27567: LD_VAR 0 7
27571: STR
27572: PUSH
27573: LD_STRING ")
27575: STR
27576: PPUSH
27577: CALL_OW 559
// end else
27581: GO 27590
// ToLua ( getStreamItemsFromMission("","","") ) ;
27583: LD_STRING getStreamItemsFromMission("","","")
27585: PPUSH
27586: CALL_OW 559
// end ;
27590: LD_VAR 0 2
27594: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27595: LD_EXP 51
27599: PUSH
27600: LD_EXP 56
27604: AND
27605: IFFALSE 27729
27607: GO 27609
27609: DISABLE
27610: LD_INT 0
27612: PPUSH
27613: PPUSH
// begin enable ;
27614: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27615: LD_ADDR_VAR 0 2
27619: PUSH
27620: LD_INT 22
27622: PUSH
27623: LD_OWVAR 2
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 2
27634: PUSH
27635: LD_INT 34
27637: PUSH
27638: LD_INT 7
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 34
27647: PUSH
27648: LD_INT 45
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 34
27657: PUSH
27658: LD_INT 28
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 34
27667: PUSH
27668: LD_INT 47
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PPUSH
27686: CALL_OW 69
27690: ST_TO_ADDR
// if not tmp then
27691: LD_VAR 0 2
27695: NOT
27696: IFFALSE 27700
// exit ;
27698: GO 27729
// for i in tmp do
27700: LD_ADDR_VAR 0 1
27704: PUSH
27705: LD_VAR 0 2
27709: PUSH
27710: FOR_IN
27711: IFFALSE 27727
// begin SetLives ( i , 0 ) ;
27713: LD_VAR 0 1
27717: PPUSH
27718: LD_INT 0
27720: PPUSH
27721: CALL_OW 234
// end ;
27725: GO 27710
27727: POP
27728: POP
// end ;
27729: PPOPN 2
27731: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27732: LD_EXP 51
27736: PUSH
27737: LD_EXP 57
27741: AND
27742: IFFALSE 27826
27744: GO 27746
27746: DISABLE
27747: LD_INT 0
27749: PPUSH
27750: PPUSH
// begin enable ;
27751: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27752: LD_ADDR_VAR 0 2
27756: PUSH
27757: LD_INT 22
27759: PUSH
27760: LD_OWVAR 2
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 32
27771: PUSH
27772: LD_INT 3
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PPUSH
27783: CALL_OW 69
27787: ST_TO_ADDR
// if not tmp then
27788: LD_VAR 0 2
27792: NOT
27793: IFFALSE 27797
// exit ;
27795: GO 27826
// for i in tmp do
27797: LD_ADDR_VAR 0 1
27801: PUSH
27802: LD_VAR 0 2
27806: PUSH
27807: FOR_IN
27808: IFFALSE 27824
// begin SetLives ( i , 0 ) ;
27810: LD_VAR 0 1
27814: PPUSH
27815: LD_INT 0
27817: PPUSH
27818: CALL_OW 234
// end ;
27822: GO 27807
27824: POP
27825: POP
// end ;
27826: PPOPN 2
27828: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27829: LD_EXP 51
27833: PUSH
27834: LD_EXP 54
27838: AND
27839: IFFALSE 27932
27841: GO 27843
27843: DISABLE
27844: LD_INT 0
27846: PPUSH
// begin enable ;
27847: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27848: LD_ADDR_VAR 0 1
27852: PUSH
27853: LD_INT 22
27855: PUSH
27856: LD_OWVAR 2
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 2
27867: PUSH
27868: LD_INT 25
27870: PUSH
27871: LD_INT 5
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 25
27880: PUSH
27881: LD_INT 9
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 25
27890: PUSH
27891: LD_INT 8
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PPUSH
27908: CALL_OW 69
27912: PUSH
27913: FOR_IN
27914: IFFALSE 27930
// begin SetClass ( i , 1 ) ;
27916: LD_VAR 0 1
27920: PPUSH
27921: LD_INT 1
27923: PPUSH
27924: CALL_OW 336
// end ;
27928: GO 27913
27930: POP
27931: POP
// end ;
27932: PPOPN 1
27934: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27935: LD_EXP 51
27939: PUSH
27940: LD_EXP 55
27944: AND
27945: PUSH
27946: LD_OWVAR 65
27950: PUSH
27951: LD_INT 7
27953: LESS
27954: AND
27955: IFFALSE 27969
27957: GO 27959
27959: DISABLE
// begin enable ;
27960: ENABLE
// game_speed := 7 ;
27961: LD_ADDR_OWVAR 65
27965: PUSH
27966: LD_INT 7
27968: ST_TO_ADDR
// end ;
27969: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27970: LD_EXP 51
27974: PUSH
27975: LD_EXP 58
27979: AND
27980: IFFALSE 28182
27982: GO 27984
27984: DISABLE
27985: LD_INT 0
27987: PPUSH
27988: PPUSH
27989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27990: LD_ADDR_VAR 0 3
27994: PUSH
27995: LD_INT 81
27997: PUSH
27998: LD_OWVAR 2
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 21
28009: PUSH
28010: LD_INT 1
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PPUSH
28021: CALL_OW 69
28025: ST_TO_ADDR
// if not tmp then
28026: LD_VAR 0 3
28030: NOT
28031: IFFALSE 28035
// exit ;
28033: GO 28182
// if tmp > 5 then
28035: LD_VAR 0 3
28039: PUSH
28040: LD_INT 5
28042: GREATER
28043: IFFALSE 28055
// k := 5 else
28045: LD_ADDR_VAR 0 2
28049: PUSH
28050: LD_INT 5
28052: ST_TO_ADDR
28053: GO 28065
// k := tmp ;
28055: LD_ADDR_VAR 0 2
28059: PUSH
28060: LD_VAR 0 3
28064: ST_TO_ADDR
// for i := 1 to k do
28065: LD_ADDR_VAR 0 1
28069: PUSH
28070: DOUBLE
28071: LD_INT 1
28073: DEC
28074: ST_TO_ADDR
28075: LD_VAR 0 2
28079: PUSH
28080: FOR_TO
28081: IFFALSE 28180
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28083: LD_VAR 0 3
28087: PUSH
28088: LD_VAR 0 1
28092: ARRAY
28093: PPUSH
28094: LD_VAR 0 1
28098: PUSH
28099: LD_INT 4
28101: MOD
28102: PUSH
28103: LD_INT 1
28105: PLUS
28106: PPUSH
28107: CALL_OW 259
28111: PUSH
28112: LD_INT 10
28114: LESS
28115: IFFALSE 28178
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28117: LD_VAR 0 3
28121: PUSH
28122: LD_VAR 0 1
28126: ARRAY
28127: PPUSH
28128: LD_VAR 0 1
28132: PUSH
28133: LD_INT 4
28135: MOD
28136: PUSH
28137: LD_INT 1
28139: PLUS
28140: PPUSH
28141: LD_VAR 0 3
28145: PUSH
28146: LD_VAR 0 1
28150: ARRAY
28151: PPUSH
28152: LD_VAR 0 1
28156: PUSH
28157: LD_INT 4
28159: MOD
28160: PUSH
28161: LD_INT 1
28163: PLUS
28164: PPUSH
28165: CALL_OW 259
28169: PUSH
28170: LD_INT 1
28172: PLUS
28173: PPUSH
28174: CALL_OW 237
28178: GO 28080
28180: POP
28181: POP
// end ;
28182: PPOPN 3
28184: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28185: LD_EXP 51
28189: PUSH
28190: LD_EXP 59
28194: AND
28195: IFFALSE 28215
28197: GO 28199
28199: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28200: LD_INT 4
28202: PPUSH
28203: LD_OWVAR 2
28207: PPUSH
28208: LD_INT 0
28210: PPUSH
28211: CALL_OW 324
28215: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28216: LD_EXP 51
28220: PUSH
28221: LD_EXP 88
28225: AND
28226: IFFALSE 28246
28228: GO 28230
28230: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28231: LD_INT 19
28233: PPUSH
28234: LD_OWVAR 2
28238: PPUSH
28239: LD_INT 0
28241: PPUSH
28242: CALL_OW 324
28246: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28247: LD_EXP 51
28251: PUSH
28252: LD_EXP 60
28256: AND
28257: IFFALSE 28359
28259: GO 28261
28261: DISABLE
28262: LD_INT 0
28264: PPUSH
28265: PPUSH
// begin enable ;
28266: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28267: LD_ADDR_VAR 0 2
28271: PUSH
28272: LD_INT 22
28274: PUSH
28275: LD_OWVAR 2
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 2
28286: PUSH
28287: LD_INT 34
28289: PUSH
28290: LD_INT 11
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 34
28299: PUSH
28300: LD_INT 30
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PPUSH
28316: CALL_OW 69
28320: ST_TO_ADDR
// if not tmp then
28321: LD_VAR 0 2
28325: NOT
28326: IFFALSE 28330
// exit ;
28328: GO 28359
// for i in tmp do
28330: LD_ADDR_VAR 0 1
28334: PUSH
28335: LD_VAR 0 2
28339: PUSH
28340: FOR_IN
28341: IFFALSE 28357
// begin SetLives ( i , 0 ) ;
28343: LD_VAR 0 1
28347: PPUSH
28348: LD_INT 0
28350: PPUSH
28351: CALL_OW 234
// end ;
28355: GO 28340
28357: POP
28358: POP
// end ;
28359: PPOPN 2
28361: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28362: LD_EXP 51
28366: PUSH
28367: LD_EXP 61
28371: AND
28372: IFFALSE 28392
28374: GO 28376
28376: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28377: LD_INT 32
28379: PPUSH
28380: LD_OWVAR 2
28384: PPUSH
28385: LD_INT 0
28387: PPUSH
28388: CALL_OW 324
28392: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28393: LD_EXP 51
28397: PUSH
28398: LD_EXP 62
28402: AND
28403: IFFALSE 28584
28405: GO 28407
28407: DISABLE
28408: LD_INT 0
28410: PPUSH
28411: PPUSH
28412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28413: LD_ADDR_VAR 0 2
28417: PUSH
28418: LD_INT 22
28420: PUSH
28421: LD_OWVAR 2
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 33
28432: PUSH
28433: LD_INT 3
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PPUSH
28444: CALL_OW 69
28448: ST_TO_ADDR
// if not tmp then
28449: LD_VAR 0 2
28453: NOT
28454: IFFALSE 28458
// exit ;
28456: GO 28584
// side := 0 ;
28458: LD_ADDR_VAR 0 3
28462: PUSH
28463: LD_INT 0
28465: ST_TO_ADDR
// for i := 1 to 8 do
28466: LD_ADDR_VAR 0 1
28470: PUSH
28471: DOUBLE
28472: LD_INT 1
28474: DEC
28475: ST_TO_ADDR
28476: LD_INT 8
28478: PUSH
28479: FOR_TO
28480: IFFALSE 28528
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28482: LD_OWVAR 2
28486: PUSH
28487: LD_VAR 0 1
28491: NONEQUAL
28492: PUSH
28493: LD_OWVAR 2
28497: PPUSH
28498: LD_VAR 0 1
28502: PPUSH
28503: CALL_OW 81
28507: PUSH
28508: LD_INT 2
28510: EQUAL
28511: AND
28512: IFFALSE 28526
// begin side := i ;
28514: LD_ADDR_VAR 0 3
28518: PUSH
28519: LD_VAR 0 1
28523: ST_TO_ADDR
// break ;
28524: GO 28528
// end ;
28526: GO 28479
28528: POP
28529: POP
// if not side then
28530: LD_VAR 0 3
28534: NOT
28535: IFFALSE 28539
// exit ;
28537: GO 28584
// for i := 1 to tmp do
28539: LD_ADDR_VAR 0 1
28543: PUSH
28544: DOUBLE
28545: LD_INT 1
28547: DEC
28548: ST_TO_ADDR
28549: LD_VAR 0 2
28553: PUSH
28554: FOR_TO
28555: IFFALSE 28582
// if Prob ( 60 ) then
28557: LD_INT 60
28559: PPUSH
28560: CALL_OW 13
28564: IFFALSE 28580
// SetSide ( i , side ) ;
28566: LD_VAR 0 1
28570: PPUSH
28571: LD_VAR 0 3
28575: PPUSH
28576: CALL_OW 235
28580: GO 28554
28582: POP
28583: POP
// end ;
28584: PPOPN 3
28586: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28587: LD_EXP 51
28591: PUSH
28592: LD_EXP 64
28596: AND
28597: IFFALSE 28716
28599: GO 28601
28601: DISABLE
28602: LD_INT 0
28604: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28605: LD_ADDR_VAR 0 1
28609: PUSH
28610: LD_INT 22
28612: PUSH
28613: LD_OWVAR 2
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 21
28624: PUSH
28625: LD_INT 1
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 3
28634: PUSH
28635: LD_INT 23
28637: PUSH
28638: LD_INT 0
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: LIST
28653: PPUSH
28654: CALL_OW 69
28658: PUSH
28659: FOR_IN
28660: IFFALSE 28714
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28662: LD_VAR 0 1
28666: PPUSH
28667: CALL_OW 257
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: LD_INT 2
28677: PUSH
28678: LD_INT 3
28680: PUSH
28681: LD_INT 4
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: IN
28690: IFFALSE 28712
// SetClass ( un , rand ( 1 , 4 ) ) ;
28692: LD_VAR 0 1
28696: PPUSH
28697: LD_INT 1
28699: PPUSH
28700: LD_INT 4
28702: PPUSH
28703: CALL_OW 12
28707: PPUSH
28708: CALL_OW 336
28712: GO 28659
28714: POP
28715: POP
// end ;
28716: PPOPN 1
28718: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28719: LD_EXP 51
28723: PUSH
28724: LD_EXP 63
28728: AND
28729: IFFALSE 28808
28731: GO 28733
28733: DISABLE
28734: LD_INT 0
28736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28737: LD_ADDR_VAR 0 1
28741: PUSH
28742: LD_INT 22
28744: PUSH
28745: LD_OWVAR 2
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 21
28756: PUSH
28757: LD_INT 3
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PPUSH
28768: CALL_OW 69
28772: ST_TO_ADDR
// if not tmp then
28773: LD_VAR 0 1
28777: NOT
28778: IFFALSE 28782
// exit ;
28780: GO 28808
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28782: LD_VAR 0 1
28786: PUSH
28787: LD_INT 1
28789: PPUSH
28790: LD_VAR 0 1
28794: PPUSH
28795: CALL_OW 12
28799: ARRAY
28800: PPUSH
28801: LD_INT 100
28803: PPUSH
28804: CALL_OW 234
// end ;
28808: PPOPN 1
28810: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28811: LD_EXP 51
28815: PUSH
28816: LD_EXP 65
28820: AND
28821: IFFALSE 28919
28823: GO 28825
28825: DISABLE
28826: LD_INT 0
28828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28829: LD_ADDR_VAR 0 1
28833: PUSH
28834: LD_INT 22
28836: PUSH
28837: LD_OWVAR 2
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 21
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PPUSH
28860: CALL_OW 69
28864: ST_TO_ADDR
// if not tmp then
28865: LD_VAR 0 1
28869: NOT
28870: IFFALSE 28874
// exit ;
28872: GO 28919
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28874: LD_VAR 0 1
28878: PUSH
28879: LD_INT 1
28881: PPUSH
28882: LD_VAR 0 1
28886: PPUSH
28887: CALL_OW 12
28891: ARRAY
28892: PPUSH
28893: LD_INT 1
28895: PPUSH
28896: LD_INT 4
28898: PPUSH
28899: CALL_OW 12
28903: PPUSH
28904: LD_INT 3000
28906: PPUSH
28907: LD_INT 9000
28909: PPUSH
28910: CALL_OW 12
28914: PPUSH
28915: CALL_OW 492
// end ;
28919: PPOPN 1
28921: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28922: LD_EXP 51
28926: PUSH
28927: LD_EXP 66
28931: AND
28932: IFFALSE 28952
28934: GO 28936
28936: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28937: LD_INT 1
28939: PPUSH
28940: LD_OWVAR 2
28944: PPUSH
28945: LD_INT 0
28947: PPUSH
28948: CALL_OW 324
28952: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28953: LD_EXP 51
28957: PUSH
28958: LD_EXP 67
28962: AND
28963: IFFALSE 29046
28965: GO 28967
28967: DISABLE
28968: LD_INT 0
28970: PPUSH
28971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28972: LD_ADDR_VAR 0 2
28976: PUSH
28977: LD_INT 22
28979: PUSH
28980: LD_OWVAR 2
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 21
28991: PUSH
28992: LD_INT 3
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PPUSH
29003: CALL_OW 69
29007: ST_TO_ADDR
// if not tmp then
29008: LD_VAR 0 2
29012: NOT
29013: IFFALSE 29017
// exit ;
29015: GO 29046
// for i in tmp do
29017: LD_ADDR_VAR 0 1
29021: PUSH
29022: LD_VAR 0 2
29026: PUSH
29027: FOR_IN
29028: IFFALSE 29044
// SetBLevel ( i , 10 ) ;
29030: LD_VAR 0 1
29034: PPUSH
29035: LD_INT 10
29037: PPUSH
29038: CALL_OW 241
29042: GO 29027
29044: POP
29045: POP
// end ;
29046: PPOPN 2
29048: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29049: LD_EXP 51
29053: PUSH
29054: LD_EXP 68
29058: AND
29059: IFFALSE 29170
29061: GO 29063
29063: DISABLE
29064: LD_INT 0
29066: PPUSH
29067: PPUSH
29068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29069: LD_ADDR_VAR 0 3
29073: PUSH
29074: LD_INT 22
29076: PUSH
29077: LD_OWVAR 2
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 25
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PPUSH
29100: CALL_OW 69
29104: ST_TO_ADDR
// if not tmp then
29105: LD_VAR 0 3
29109: NOT
29110: IFFALSE 29114
// exit ;
29112: GO 29170
// un := tmp [ rand ( 1 , tmp ) ] ;
29114: LD_ADDR_VAR 0 2
29118: PUSH
29119: LD_VAR 0 3
29123: PUSH
29124: LD_INT 1
29126: PPUSH
29127: LD_VAR 0 3
29131: PPUSH
29132: CALL_OW 12
29136: ARRAY
29137: ST_TO_ADDR
// if Crawls ( un ) then
29138: LD_VAR 0 2
29142: PPUSH
29143: CALL_OW 318
29147: IFFALSE 29158
// ComWalk ( un ) ;
29149: LD_VAR 0 2
29153: PPUSH
29154: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29158: LD_VAR 0 2
29162: PPUSH
29163: LD_INT 5
29165: PPUSH
29166: CALL_OW 336
// end ;
29170: PPOPN 3
29172: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29173: LD_EXP 51
29177: PUSH
29178: LD_EXP 69
29182: AND
29183: PUSH
29184: LD_OWVAR 67
29188: PUSH
29189: LD_INT 4
29191: LESS
29192: AND
29193: IFFALSE 29212
29195: GO 29197
29197: DISABLE
// begin Difficulty := Difficulty + 1 ;
29198: LD_ADDR_OWVAR 67
29202: PUSH
29203: LD_OWVAR 67
29207: PUSH
29208: LD_INT 1
29210: PLUS
29211: ST_TO_ADDR
// end ;
29212: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29213: LD_EXP 51
29217: PUSH
29218: LD_EXP 70
29222: AND
29223: IFFALSE 29326
29225: GO 29227
29227: DISABLE
29228: LD_INT 0
29230: PPUSH
// begin for i := 1 to 5 do
29231: LD_ADDR_VAR 0 1
29235: PUSH
29236: DOUBLE
29237: LD_INT 1
29239: DEC
29240: ST_TO_ADDR
29241: LD_INT 5
29243: PUSH
29244: FOR_TO
29245: IFFALSE 29324
// begin uc_nation := nation_nature ;
29247: LD_ADDR_OWVAR 21
29251: PUSH
29252: LD_INT 0
29254: ST_TO_ADDR
// uc_side := 0 ;
29255: LD_ADDR_OWVAR 20
29259: PUSH
29260: LD_INT 0
29262: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29263: LD_ADDR_OWVAR 29
29267: PUSH
29268: LD_INT 12
29270: PUSH
29271: LD_INT 12
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: ST_TO_ADDR
// hc_agressivity := 20 ;
29278: LD_ADDR_OWVAR 35
29282: PUSH
29283: LD_INT 20
29285: ST_TO_ADDR
// hc_class := class_tiger ;
29286: LD_ADDR_OWVAR 28
29290: PUSH
29291: LD_INT 14
29293: ST_TO_ADDR
// hc_gallery :=  ;
29294: LD_ADDR_OWVAR 33
29298: PUSH
29299: LD_STRING 
29301: ST_TO_ADDR
// hc_name :=  ;
29302: LD_ADDR_OWVAR 26
29306: PUSH
29307: LD_STRING 
29309: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29310: CALL_OW 44
29314: PPUSH
29315: LD_INT 0
29317: PPUSH
29318: CALL_OW 51
// end ;
29322: GO 29244
29324: POP
29325: POP
// end ;
29326: PPOPN 1
29328: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29329: LD_EXP 51
29333: PUSH
29334: LD_EXP 71
29338: AND
29339: IFFALSE 29348
29341: GO 29343
29343: DISABLE
// StreamSibBomb ;
29344: CALL 29349 0 0
29348: END
// export function StreamSibBomb ; var i , x , y ; begin
29349: LD_INT 0
29351: PPUSH
29352: PPUSH
29353: PPUSH
29354: PPUSH
// result := false ;
29355: LD_ADDR_VAR 0 1
29359: PUSH
29360: LD_INT 0
29362: ST_TO_ADDR
// for i := 1 to 16 do
29363: LD_ADDR_VAR 0 2
29367: PUSH
29368: DOUBLE
29369: LD_INT 1
29371: DEC
29372: ST_TO_ADDR
29373: LD_INT 16
29375: PUSH
29376: FOR_TO
29377: IFFALSE 29576
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29379: LD_ADDR_VAR 0 3
29383: PUSH
29384: LD_INT 10
29386: PUSH
29387: LD_INT 20
29389: PUSH
29390: LD_INT 30
29392: PUSH
29393: LD_INT 40
29395: PUSH
29396: LD_INT 50
29398: PUSH
29399: LD_INT 60
29401: PUSH
29402: LD_INT 70
29404: PUSH
29405: LD_INT 80
29407: PUSH
29408: LD_INT 90
29410: PUSH
29411: LD_INT 100
29413: PUSH
29414: LD_INT 110
29416: PUSH
29417: LD_INT 120
29419: PUSH
29420: LD_INT 130
29422: PUSH
29423: LD_INT 140
29425: PUSH
29426: LD_INT 150
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: PPUSH
29449: LD_INT 15
29451: PPUSH
29452: CALL_OW 12
29456: ARRAY
29457: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29458: LD_ADDR_VAR 0 4
29462: PUSH
29463: LD_INT 10
29465: PUSH
29466: LD_INT 20
29468: PUSH
29469: LD_INT 30
29471: PUSH
29472: LD_INT 40
29474: PUSH
29475: LD_INT 50
29477: PUSH
29478: LD_INT 60
29480: PUSH
29481: LD_INT 70
29483: PUSH
29484: LD_INT 80
29486: PUSH
29487: LD_INT 90
29489: PUSH
29490: LD_INT 100
29492: PUSH
29493: LD_INT 110
29495: PUSH
29496: LD_INT 120
29498: PUSH
29499: LD_INT 130
29501: PUSH
29502: LD_INT 140
29504: PUSH
29505: LD_INT 150
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 1
29527: PPUSH
29528: LD_INT 15
29530: PPUSH
29531: CALL_OW 12
29535: ARRAY
29536: ST_TO_ADDR
// if ValidHex ( x , y ) then
29537: LD_VAR 0 3
29541: PPUSH
29542: LD_VAR 0 4
29546: PPUSH
29547: CALL_OW 488
29551: IFFALSE 29574
// begin result := [ x , y ] ;
29553: LD_ADDR_VAR 0 1
29557: PUSH
29558: LD_VAR 0 3
29562: PUSH
29563: LD_VAR 0 4
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: ST_TO_ADDR
// break ;
29572: GO 29576
// end ; end ;
29574: GO 29376
29576: POP
29577: POP
// if result then
29578: LD_VAR 0 1
29582: IFFALSE 29642
// begin ToLua ( playSibBomb() ) ;
29584: LD_STRING playSibBomb()
29586: PPUSH
29587: CALL_OW 559
// wait ( 0 0$14 ) ;
29591: LD_INT 490
29593: PPUSH
29594: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29598: LD_VAR 0 1
29602: PUSH
29603: LD_INT 1
29605: ARRAY
29606: PPUSH
29607: LD_VAR 0 1
29611: PUSH
29612: LD_INT 2
29614: ARRAY
29615: PPUSH
29616: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29620: LD_VAR 0 1
29624: PUSH
29625: LD_INT 1
29627: ARRAY
29628: PPUSH
29629: LD_VAR 0 1
29633: PUSH
29634: LD_INT 2
29636: ARRAY
29637: PPUSH
29638: CALL_OW 429
// end ; end ;
29642: LD_VAR 0 1
29646: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29647: LD_EXP 51
29651: PUSH
29652: LD_EXP 73
29656: AND
29657: IFFALSE 29669
29659: GO 29661
29661: DISABLE
// YouLost (  ) ;
29662: LD_STRING 
29664: PPUSH
29665: CALL_OW 104
29669: END
// every 0 0$1 trigger StreamModeActive and sFog do
29670: LD_EXP 51
29674: PUSH
29675: LD_EXP 72
29679: AND
29680: IFFALSE 29694
29682: GO 29684
29684: DISABLE
// FogOff ( your_side ) ;
29685: LD_OWVAR 2
29689: PPUSH
29690: CALL_OW 344
29694: END
// every 0 0$1 trigger StreamModeActive and sSun do
29695: LD_EXP 51
29699: PUSH
29700: LD_EXP 74
29704: AND
29705: IFFALSE 29733
29707: GO 29709
29709: DISABLE
// begin solar_recharge_percent := 0 ;
29710: LD_ADDR_OWVAR 79
29714: PUSH
29715: LD_INT 0
29717: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29718: LD_INT 10500
29720: PPUSH
29721: CALL_OW 67
// solar_recharge_percent := 100 ;
29725: LD_ADDR_OWVAR 79
29729: PUSH
29730: LD_INT 100
29732: ST_TO_ADDR
// end ;
29733: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29734: LD_EXP 51
29738: PUSH
29739: LD_EXP 75
29743: AND
29744: IFFALSE 29983
29746: GO 29748
29748: DISABLE
29749: LD_INT 0
29751: PPUSH
29752: PPUSH
29753: PPUSH
// begin tmp := [ ] ;
29754: LD_ADDR_VAR 0 3
29758: PUSH
29759: EMPTY
29760: ST_TO_ADDR
// for i := 1 to 6 do
29761: LD_ADDR_VAR 0 1
29765: PUSH
29766: DOUBLE
29767: LD_INT 1
29769: DEC
29770: ST_TO_ADDR
29771: LD_INT 6
29773: PUSH
29774: FOR_TO
29775: IFFALSE 29880
// begin uc_nation := nation_nature ;
29777: LD_ADDR_OWVAR 21
29781: PUSH
29782: LD_INT 0
29784: ST_TO_ADDR
// uc_side := 0 ;
29785: LD_ADDR_OWVAR 20
29789: PUSH
29790: LD_INT 0
29792: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29793: LD_ADDR_OWVAR 29
29797: PUSH
29798: LD_INT 12
29800: PUSH
29801: LD_INT 12
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: ST_TO_ADDR
// hc_agressivity := 20 ;
29808: LD_ADDR_OWVAR 35
29812: PUSH
29813: LD_INT 20
29815: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29816: LD_ADDR_OWVAR 28
29820: PUSH
29821: LD_INT 17
29823: ST_TO_ADDR
// hc_gallery :=  ;
29824: LD_ADDR_OWVAR 33
29828: PUSH
29829: LD_STRING 
29831: ST_TO_ADDR
// hc_name :=  ;
29832: LD_ADDR_OWVAR 26
29836: PUSH
29837: LD_STRING 
29839: ST_TO_ADDR
// un := CreateHuman ;
29840: LD_ADDR_VAR 0 2
29844: PUSH
29845: CALL_OW 44
29849: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29850: LD_VAR 0 2
29854: PPUSH
29855: LD_INT 1
29857: PPUSH
29858: CALL_OW 51
// tmp := tmp ^ un ;
29862: LD_ADDR_VAR 0 3
29866: PUSH
29867: LD_VAR 0 3
29871: PUSH
29872: LD_VAR 0 2
29876: ADD
29877: ST_TO_ADDR
// end ;
29878: GO 29774
29880: POP
29881: POP
// repeat wait ( 0 0$1 ) ;
29882: LD_INT 35
29884: PPUSH
29885: CALL_OW 67
// for un in tmp do
29889: LD_ADDR_VAR 0 2
29893: PUSH
29894: LD_VAR 0 3
29898: PUSH
29899: FOR_IN
29900: IFFALSE 29974
// begin if IsDead ( un ) then
29902: LD_VAR 0 2
29906: PPUSH
29907: CALL_OW 301
29911: IFFALSE 29931
// begin tmp := tmp diff un ;
29913: LD_ADDR_VAR 0 3
29917: PUSH
29918: LD_VAR 0 3
29922: PUSH
29923: LD_VAR 0 2
29927: DIFF
29928: ST_TO_ADDR
// continue ;
29929: GO 29899
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29931: LD_VAR 0 2
29935: PPUSH
29936: LD_INT 3
29938: PUSH
29939: LD_INT 22
29941: PUSH
29942: LD_INT 0
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PPUSH
29953: CALL_OW 69
29957: PPUSH
29958: LD_VAR 0 2
29962: PPUSH
29963: CALL_OW 74
29967: PPUSH
29968: CALL_OW 115
// end ;
29972: GO 29899
29974: POP
29975: POP
// until not tmp ;
29976: LD_VAR 0 3
29980: NOT
29981: IFFALSE 29882
// end ;
29983: PPOPN 3
29985: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29986: LD_EXP 51
29990: PUSH
29991: LD_EXP 76
29995: AND
29996: IFFALSE 30050
29998: GO 30000
30000: DISABLE
// begin ToLua ( displayTroll(); ) ;
30001: LD_STRING displayTroll();
30003: PPUSH
30004: CALL_OW 559
// wait ( 3 3$00 ) ;
30008: LD_INT 6300
30010: PPUSH
30011: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30015: LD_STRING hideTroll();
30017: PPUSH
30018: CALL_OW 559
// wait ( 1 1$00 ) ;
30022: LD_INT 2100
30024: PPUSH
30025: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30029: LD_STRING displayTroll();
30031: PPUSH
30032: CALL_OW 559
// wait ( 1 1$00 ) ;
30036: LD_INT 2100
30038: PPUSH
30039: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30043: LD_STRING hideTroll();
30045: PPUSH
30046: CALL_OW 559
// end ;
30050: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30051: LD_EXP 51
30055: PUSH
30056: LD_EXP 77
30060: AND
30061: IFFALSE 30124
30063: GO 30065
30065: DISABLE
30066: LD_INT 0
30068: PPUSH
// begin p := 0 ;
30069: LD_ADDR_VAR 0 1
30073: PUSH
30074: LD_INT 0
30076: ST_TO_ADDR
// repeat game_speed := 1 ;
30077: LD_ADDR_OWVAR 65
30081: PUSH
30082: LD_INT 1
30084: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30085: LD_INT 35
30087: PPUSH
30088: CALL_OW 67
// p := p + 1 ;
30092: LD_ADDR_VAR 0 1
30096: PUSH
30097: LD_VAR 0 1
30101: PUSH
30102: LD_INT 1
30104: PLUS
30105: ST_TO_ADDR
// until p >= 60 ;
30106: LD_VAR 0 1
30110: PUSH
30111: LD_INT 60
30113: GREATEREQUAL
30114: IFFALSE 30077
// game_speed := 4 ;
30116: LD_ADDR_OWVAR 65
30120: PUSH
30121: LD_INT 4
30123: ST_TO_ADDR
// end ;
30124: PPOPN 1
30126: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30127: LD_EXP 51
30131: PUSH
30132: LD_EXP 78
30136: AND
30137: IFFALSE 30283
30139: GO 30141
30141: DISABLE
30142: LD_INT 0
30144: PPUSH
30145: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30146: LD_ADDR_VAR 0 1
30150: PUSH
30151: LD_INT 22
30153: PUSH
30154: LD_OWVAR 2
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 2
30165: PUSH
30166: LD_INT 30
30168: PUSH
30169: LD_INT 0
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 30
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: LIST
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PPUSH
30195: CALL_OW 69
30199: ST_TO_ADDR
// if not depot then
30200: LD_VAR 0 1
30204: NOT
30205: IFFALSE 30209
// exit ;
30207: GO 30283
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30209: LD_ADDR_VAR 0 2
30213: PUSH
30214: LD_VAR 0 1
30218: PUSH
30219: LD_INT 1
30221: PPUSH
30222: LD_VAR 0 1
30226: PPUSH
30227: CALL_OW 12
30231: ARRAY
30232: PPUSH
30233: CALL_OW 274
30237: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30238: LD_VAR 0 2
30242: PPUSH
30243: LD_INT 1
30245: PPUSH
30246: LD_INT 0
30248: PPUSH
30249: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30253: LD_VAR 0 2
30257: PPUSH
30258: LD_INT 2
30260: PPUSH
30261: LD_INT 0
30263: PPUSH
30264: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30268: LD_VAR 0 2
30272: PPUSH
30273: LD_INT 3
30275: PPUSH
30276: LD_INT 0
30278: PPUSH
30279: CALL_OW 277
// end ;
30283: PPOPN 2
30285: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30286: LD_EXP 51
30290: PUSH
30291: LD_EXP 79
30295: AND
30296: IFFALSE 30393
30298: GO 30300
30300: DISABLE
30301: LD_INT 0
30303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30304: LD_ADDR_VAR 0 1
30308: PUSH
30309: LD_INT 22
30311: PUSH
30312: LD_OWVAR 2
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 21
30323: PUSH
30324: LD_INT 1
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 3
30333: PUSH
30334: LD_INT 23
30336: PUSH
30337: LD_INT 0
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: LIST
30352: PPUSH
30353: CALL_OW 69
30357: ST_TO_ADDR
// if not tmp then
30358: LD_VAR 0 1
30362: NOT
30363: IFFALSE 30367
// exit ;
30365: GO 30393
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30367: LD_VAR 0 1
30371: PUSH
30372: LD_INT 1
30374: PPUSH
30375: LD_VAR 0 1
30379: PPUSH
30380: CALL_OW 12
30384: ARRAY
30385: PPUSH
30386: LD_INT 200
30388: PPUSH
30389: CALL_OW 234
// end ;
30393: PPOPN 1
30395: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30396: LD_EXP 51
30400: PUSH
30401: LD_EXP 80
30405: AND
30406: IFFALSE 30485
30408: GO 30410
30410: DISABLE
30411: LD_INT 0
30413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30414: LD_ADDR_VAR 0 1
30418: PUSH
30419: LD_INT 22
30421: PUSH
30422: LD_OWVAR 2
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 21
30433: PUSH
30434: LD_INT 2
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PPUSH
30445: CALL_OW 69
30449: ST_TO_ADDR
// if not tmp then
30450: LD_VAR 0 1
30454: NOT
30455: IFFALSE 30459
// exit ;
30457: GO 30485
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30459: LD_VAR 0 1
30463: PUSH
30464: LD_INT 1
30466: PPUSH
30467: LD_VAR 0 1
30471: PPUSH
30472: CALL_OW 12
30476: ARRAY
30477: PPUSH
30478: LD_INT 60
30480: PPUSH
30481: CALL_OW 234
// end ;
30485: PPOPN 1
30487: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30488: LD_EXP 51
30492: PUSH
30493: LD_EXP 81
30497: AND
30498: IFFALSE 30597
30500: GO 30502
30502: DISABLE
30503: LD_INT 0
30505: PPUSH
30506: PPUSH
// begin enable ;
30507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30508: LD_ADDR_VAR 0 1
30512: PUSH
30513: LD_INT 22
30515: PUSH
30516: LD_OWVAR 2
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 61
30527: PUSH
30528: EMPTY
30529: LIST
30530: PUSH
30531: LD_INT 33
30533: PUSH
30534: LD_INT 2
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: PPUSH
30546: CALL_OW 69
30550: ST_TO_ADDR
// if not tmp then
30551: LD_VAR 0 1
30555: NOT
30556: IFFALSE 30560
// exit ;
30558: GO 30597
// for i in tmp do
30560: LD_ADDR_VAR 0 2
30564: PUSH
30565: LD_VAR 0 1
30569: PUSH
30570: FOR_IN
30571: IFFALSE 30595
// if IsControledBy ( i ) then
30573: LD_VAR 0 2
30577: PPUSH
30578: CALL_OW 312
30582: IFFALSE 30593
// ComUnlink ( i ) ;
30584: LD_VAR 0 2
30588: PPUSH
30589: CALL_OW 136
30593: GO 30570
30595: POP
30596: POP
// end ;
30597: PPOPN 2
30599: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30600: LD_EXP 51
30604: PUSH
30605: LD_EXP 82
30609: AND
30610: IFFALSE 30750
30612: GO 30614
30614: DISABLE
30615: LD_INT 0
30617: PPUSH
30618: PPUSH
// begin ToLua ( displayPowell(); ) ;
30619: LD_STRING displayPowell();
30621: PPUSH
30622: CALL_OW 559
// uc_side := 0 ;
30626: LD_ADDR_OWVAR 20
30630: PUSH
30631: LD_INT 0
30633: ST_TO_ADDR
// uc_nation := 2 ;
30634: LD_ADDR_OWVAR 21
30638: PUSH
30639: LD_INT 2
30641: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30642: LD_ADDR_OWVAR 37
30646: PUSH
30647: LD_INT 14
30649: ST_TO_ADDR
// vc_engine := engine_siberite ;
30650: LD_ADDR_OWVAR 39
30654: PUSH
30655: LD_INT 3
30657: ST_TO_ADDR
// vc_control := control_apeman ;
30658: LD_ADDR_OWVAR 38
30662: PUSH
30663: LD_INT 5
30665: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30666: LD_ADDR_OWVAR 40
30670: PUSH
30671: LD_INT 29
30673: ST_TO_ADDR
// un := CreateVehicle ;
30674: LD_ADDR_VAR 0 2
30678: PUSH
30679: CALL_OW 45
30683: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30684: LD_VAR 0 2
30688: PPUSH
30689: LD_INT 1
30691: PPUSH
30692: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30696: LD_INT 35
30698: PPUSH
30699: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30703: LD_VAR 0 2
30707: PPUSH
30708: LD_INT 22
30710: PUSH
30711: LD_OWVAR 2
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PPUSH
30720: CALL_OW 69
30724: PPUSH
30725: LD_VAR 0 2
30729: PPUSH
30730: CALL_OW 74
30734: PPUSH
30735: CALL_OW 115
// until IsDead ( un ) ;
30739: LD_VAR 0 2
30743: PPUSH
30744: CALL_OW 301
30748: IFFALSE 30696
// end ;
30750: PPOPN 2
30752: END
// every 0 0$1 trigger StreamModeActive and sStu do
30753: LD_EXP 51
30757: PUSH
30758: LD_EXP 90
30762: AND
30763: IFFALSE 30779
30765: GO 30767
30767: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30768: LD_STRING displayStucuk();
30770: PPUSH
30771: CALL_OW 559
// ResetFog ;
30775: CALL_OW 335
// end ;
30779: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30780: LD_EXP 51
30784: PUSH
30785: LD_EXP 83
30789: AND
30790: IFFALSE 30931
30792: GO 30794
30794: DISABLE
30795: LD_INT 0
30797: PPUSH
30798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30799: LD_ADDR_VAR 0 2
30803: PUSH
30804: LD_INT 22
30806: PUSH
30807: LD_OWVAR 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 21
30818: PUSH
30819: LD_INT 1
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PPUSH
30830: CALL_OW 69
30834: ST_TO_ADDR
// if not tmp then
30835: LD_VAR 0 2
30839: NOT
30840: IFFALSE 30844
// exit ;
30842: GO 30931
// un := tmp [ rand ( 1 , tmp ) ] ;
30844: LD_ADDR_VAR 0 1
30848: PUSH
30849: LD_VAR 0 2
30853: PUSH
30854: LD_INT 1
30856: PPUSH
30857: LD_VAR 0 2
30861: PPUSH
30862: CALL_OW 12
30866: ARRAY
30867: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30868: LD_VAR 0 1
30872: PPUSH
30873: LD_INT 0
30875: PPUSH
30876: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30880: LD_VAR 0 1
30884: PPUSH
30885: LD_OWVAR 3
30889: PUSH
30890: LD_VAR 0 1
30894: DIFF
30895: PPUSH
30896: LD_VAR 0 1
30900: PPUSH
30901: CALL_OW 74
30905: PPUSH
30906: CALL_OW 115
// wait ( 0 0$20 ) ;
30910: LD_INT 700
30912: PPUSH
30913: CALL_OW 67
// SetSide ( un , your_side ) ;
30917: LD_VAR 0 1
30921: PPUSH
30922: LD_OWVAR 2
30926: PPUSH
30927: CALL_OW 235
// end ;
30931: PPOPN 2
30933: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30934: LD_EXP 51
30938: PUSH
30939: LD_EXP 84
30943: AND
30944: IFFALSE 31050
30946: GO 30948
30948: DISABLE
30949: LD_INT 0
30951: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30952: LD_ADDR_VAR 0 1
30956: PUSH
30957: LD_INT 22
30959: PUSH
30960: LD_OWVAR 2
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 2
30971: PUSH
30972: LD_INT 30
30974: PUSH
30975: LD_INT 0
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 30
30984: PUSH
30985: LD_INT 1
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: LIST
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PPUSH
31001: CALL_OW 69
31005: ST_TO_ADDR
// if not depot then
31006: LD_VAR 0 1
31010: NOT
31011: IFFALSE 31015
// exit ;
31013: GO 31050
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31015: LD_VAR 0 1
31019: PUSH
31020: LD_INT 1
31022: ARRAY
31023: PPUSH
31024: CALL_OW 250
31028: PPUSH
31029: LD_VAR 0 1
31033: PUSH
31034: LD_INT 1
31036: ARRAY
31037: PPUSH
31038: CALL_OW 251
31042: PPUSH
31043: LD_INT 70
31045: PPUSH
31046: CALL_OW 495
// end ;
31050: PPOPN 1
31052: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31053: LD_EXP 51
31057: PUSH
31058: LD_EXP 85
31062: AND
31063: IFFALSE 31274
31065: GO 31067
31067: DISABLE
31068: LD_INT 0
31070: PPUSH
31071: PPUSH
31072: PPUSH
31073: PPUSH
31074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31075: LD_ADDR_VAR 0 5
31079: PUSH
31080: LD_INT 22
31082: PUSH
31083: LD_OWVAR 2
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 21
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PPUSH
31106: CALL_OW 69
31110: ST_TO_ADDR
// if not tmp then
31111: LD_VAR 0 5
31115: NOT
31116: IFFALSE 31120
// exit ;
31118: GO 31274
// for i in tmp do
31120: LD_ADDR_VAR 0 1
31124: PUSH
31125: LD_VAR 0 5
31129: PUSH
31130: FOR_IN
31131: IFFALSE 31272
// begin d := rand ( 0 , 5 ) ;
31133: LD_ADDR_VAR 0 4
31137: PUSH
31138: LD_INT 0
31140: PPUSH
31141: LD_INT 5
31143: PPUSH
31144: CALL_OW 12
31148: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31149: LD_ADDR_VAR 0 2
31153: PUSH
31154: LD_VAR 0 1
31158: PPUSH
31159: CALL_OW 250
31163: PPUSH
31164: LD_VAR 0 4
31168: PPUSH
31169: LD_INT 3
31171: PPUSH
31172: LD_INT 12
31174: PPUSH
31175: CALL_OW 12
31179: PPUSH
31180: CALL_OW 272
31184: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31185: LD_ADDR_VAR 0 3
31189: PUSH
31190: LD_VAR 0 1
31194: PPUSH
31195: CALL_OW 251
31199: PPUSH
31200: LD_VAR 0 4
31204: PPUSH
31205: LD_INT 3
31207: PPUSH
31208: LD_INT 12
31210: PPUSH
31211: CALL_OW 12
31215: PPUSH
31216: CALL_OW 273
31220: ST_TO_ADDR
// if ValidHex ( x , y ) then
31221: LD_VAR 0 2
31225: PPUSH
31226: LD_VAR 0 3
31230: PPUSH
31231: CALL_OW 488
31235: IFFALSE 31270
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31237: LD_VAR 0 1
31241: PPUSH
31242: LD_VAR 0 2
31246: PPUSH
31247: LD_VAR 0 3
31251: PPUSH
31252: LD_INT 3
31254: PPUSH
31255: LD_INT 6
31257: PPUSH
31258: CALL_OW 12
31262: PPUSH
31263: LD_INT 1
31265: PPUSH
31266: CALL_OW 483
// end ;
31270: GO 31130
31272: POP
31273: POP
// end ;
31274: PPOPN 5
31276: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31277: LD_EXP 51
31281: PUSH
31282: LD_EXP 86
31286: AND
31287: IFFALSE 31381
31289: GO 31291
31291: DISABLE
31292: LD_INT 0
31294: PPUSH
31295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31296: LD_ADDR_VAR 0 2
31300: PUSH
31301: LD_INT 22
31303: PUSH
31304: LD_OWVAR 2
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 32
31315: PUSH
31316: LD_INT 1
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 21
31325: PUSH
31326: LD_INT 2
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: LIST
31337: PPUSH
31338: CALL_OW 69
31342: ST_TO_ADDR
// if not tmp then
31343: LD_VAR 0 2
31347: NOT
31348: IFFALSE 31352
// exit ;
31350: GO 31381
// for i in tmp do
31352: LD_ADDR_VAR 0 1
31356: PUSH
31357: LD_VAR 0 2
31361: PUSH
31362: FOR_IN
31363: IFFALSE 31379
// SetFuel ( i , 0 ) ;
31365: LD_VAR 0 1
31369: PPUSH
31370: LD_INT 0
31372: PPUSH
31373: CALL_OW 240
31377: GO 31362
31379: POP
31380: POP
// end ;
31381: PPOPN 2
31383: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31384: LD_EXP 51
31388: PUSH
31389: LD_EXP 87
31393: AND
31394: IFFALSE 31460
31396: GO 31398
31398: DISABLE
31399: LD_INT 0
31401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31402: LD_ADDR_VAR 0 1
31406: PUSH
31407: LD_INT 22
31409: PUSH
31410: LD_OWVAR 2
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 30
31421: PUSH
31422: LD_INT 29
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PPUSH
31433: CALL_OW 69
31437: ST_TO_ADDR
// if not tmp then
31438: LD_VAR 0 1
31442: NOT
31443: IFFALSE 31447
// exit ;
31445: GO 31460
// DestroyUnit ( tmp [ 1 ] ) ;
31447: LD_VAR 0 1
31451: PUSH
31452: LD_INT 1
31454: ARRAY
31455: PPUSH
31456: CALL_OW 65
// end ;
31460: PPOPN 1
31462: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31463: LD_EXP 51
31467: PUSH
31468: LD_EXP 89
31472: AND
31473: IFFALSE 31602
31475: GO 31477
31477: DISABLE
31478: LD_INT 0
31480: PPUSH
// begin uc_side := 0 ;
31481: LD_ADDR_OWVAR 20
31485: PUSH
31486: LD_INT 0
31488: ST_TO_ADDR
// uc_nation := nation_arabian ;
31489: LD_ADDR_OWVAR 21
31493: PUSH
31494: LD_INT 2
31496: ST_TO_ADDR
// hc_gallery :=  ;
31497: LD_ADDR_OWVAR 33
31501: PUSH
31502: LD_STRING 
31504: ST_TO_ADDR
// hc_name :=  ;
31505: LD_ADDR_OWVAR 26
31509: PUSH
31510: LD_STRING 
31512: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31513: LD_INT 1
31515: PPUSH
31516: LD_INT 11
31518: PPUSH
31519: LD_INT 10
31521: PPUSH
31522: CALL_OW 380
// un := CreateHuman ;
31526: LD_ADDR_VAR 0 1
31530: PUSH
31531: CALL_OW 44
31535: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31536: LD_VAR 0 1
31540: PPUSH
31541: LD_INT 1
31543: PPUSH
31544: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31548: LD_INT 35
31550: PPUSH
31551: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31555: LD_VAR 0 1
31559: PPUSH
31560: LD_INT 22
31562: PUSH
31563: LD_OWVAR 2
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PPUSH
31572: CALL_OW 69
31576: PPUSH
31577: LD_VAR 0 1
31581: PPUSH
31582: CALL_OW 74
31586: PPUSH
31587: CALL_OW 115
// until IsDead ( un ) ;
31591: LD_VAR 0 1
31595: PPUSH
31596: CALL_OW 301
31600: IFFALSE 31548
// end ;
31602: PPOPN 1
31604: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31605: LD_EXP 51
31609: PUSH
31610: LD_EXP 91
31614: AND
31615: IFFALSE 31627
31617: GO 31619
31619: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31620: LD_STRING earthquake(getX(game), 0, 32)
31622: PPUSH
31623: CALL_OW 559
31627: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31628: LD_EXP 51
31632: PUSH
31633: LD_EXP 92
31637: AND
31638: IFFALSE 31729
31640: GO 31642
31642: DISABLE
31643: LD_INT 0
31645: PPUSH
// begin enable ;
31646: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31647: LD_ADDR_VAR 0 1
31651: PUSH
31652: LD_INT 22
31654: PUSH
31655: LD_OWVAR 2
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 21
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 33
31676: PUSH
31677: LD_INT 3
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: LIST
31688: PPUSH
31689: CALL_OW 69
31693: ST_TO_ADDR
// if not tmp then
31694: LD_VAR 0 1
31698: NOT
31699: IFFALSE 31703
// exit ;
31701: GO 31729
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31703: LD_VAR 0 1
31707: PUSH
31708: LD_INT 1
31710: PPUSH
31711: LD_VAR 0 1
31715: PPUSH
31716: CALL_OW 12
31720: ARRAY
31721: PPUSH
31722: LD_INT 1
31724: PPUSH
31725: CALL_OW 234
// end ;
31729: PPOPN 1
31731: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31732: LD_EXP 51
31736: PUSH
31737: LD_EXP 93
31741: AND
31742: IFFALSE 31883
31744: GO 31746
31746: DISABLE
31747: LD_INT 0
31749: PPUSH
31750: PPUSH
31751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31752: LD_ADDR_VAR 0 3
31756: PUSH
31757: LD_INT 22
31759: PUSH
31760: LD_OWVAR 2
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 25
31771: PUSH
31772: LD_INT 1
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PPUSH
31783: CALL_OW 69
31787: ST_TO_ADDR
// if not tmp then
31788: LD_VAR 0 3
31792: NOT
31793: IFFALSE 31797
// exit ;
31795: GO 31883
// un := tmp [ rand ( 1 , tmp ) ] ;
31797: LD_ADDR_VAR 0 2
31801: PUSH
31802: LD_VAR 0 3
31806: PUSH
31807: LD_INT 1
31809: PPUSH
31810: LD_VAR 0 3
31814: PPUSH
31815: CALL_OW 12
31819: ARRAY
31820: ST_TO_ADDR
// if Crawls ( un ) then
31821: LD_VAR 0 2
31825: PPUSH
31826: CALL_OW 318
31830: IFFALSE 31841
// ComWalk ( un ) ;
31832: LD_VAR 0 2
31836: PPUSH
31837: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31841: LD_VAR 0 2
31845: PPUSH
31846: LD_INT 9
31848: PPUSH
31849: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31853: LD_INT 28
31855: PPUSH
31856: LD_OWVAR 2
31860: PPUSH
31861: LD_INT 2
31863: PPUSH
31864: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31868: LD_INT 29
31870: PPUSH
31871: LD_OWVAR 2
31875: PPUSH
31876: LD_INT 2
31878: PPUSH
31879: CALL_OW 322
// end ;
31883: PPOPN 3
31885: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31886: LD_EXP 51
31890: PUSH
31891: LD_EXP 94
31895: AND
31896: IFFALSE 32007
31898: GO 31900
31900: DISABLE
31901: LD_INT 0
31903: PPUSH
31904: PPUSH
31905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31906: LD_ADDR_VAR 0 3
31910: PUSH
31911: LD_INT 22
31913: PUSH
31914: LD_OWVAR 2
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 25
31925: PUSH
31926: LD_INT 1
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PPUSH
31937: CALL_OW 69
31941: ST_TO_ADDR
// if not tmp then
31942: LD_VAR 0 3
31946: NOT
31947: IFFALSE 31951
// exit ;
31949: GO 32007
// un := tmp [ rand ( 1 , tmp ) ] ;
31951: LD_ADDR_VAR 0 2
31955: PUSH
31956: LD_VAR 0 3
31960: PUSH
31961: LD_INT 1
31963: PPUSH
31964: LD_VAR 0 3
31968: PPUSH
31969: CALL_OW 12
31973: ARRAY
31974: ST_TO_ADDR
// if Crawls ( un ) then
31975: LD_VAR 0 2
31979: PPUSH
31980: CALL_OW 318
31984: IFFALSE 31995
// ComWalk ( un ) ;
31986: LD_VAR 0 2
31990: PPUSH
31991: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31995: LD_VAR 0 2
31999: PPUSH
32000: LD_INT 8
32002: PPUSH
32003: CALL_OW 336
// end ;
32007: PPOPN 3
32009: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32010: LD_EXP 51
32014: PUSH
32015: LD_EXP 95
32019: AND
32020: IFFALSE 32164
32022: GO 32024
32024: DISABLE
32025: LD_INT 0
32027: PPUSH
32028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32029: LD_ADDR_VAR 0 2
32033: PUSH
32034: LD_INT 22
32036: PUSH
32037: LD_OWVAR 2
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 21
32048: PUSH
32049: LD_INT 2
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 2
32058: PUSH
32059: LD_INT 34
32061: PUSH
32062: LD_INT 12
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 34
32071: PUSH
32072: LD_INT 51
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 34
32081: PUSH
32082: LD_INT 32
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: LIST
32099: PPUSH
32100: CALL_OW 69
32104: ST_TO_ADDR
// if not tmp then
32105: LD_VAR 0 2
32109: NOT
32110: IFFALSE 32114
// exit ;
32112: GO 32164
// for i in tmp do
32114: LD_ADDR_VAR 0 1
32118: PUSH
32119: LD_VAR 0 2
32123: PUSH
32124: FOR_IN
32125: IFFALSE 32162
// if GetCargo ( i , mat_artifact ) = 0 then
32127: LD_VAR 0 1
32131: PPUSH
32132: LD_INT 4
32134: PPUSH
32135: CALL_OW 289
32139: PUSH
32140: LD_INT 0
32142: EQUAL
32143: IFFALSE 32160
// SetCargo ( i , mat_siberit , 100 ) ;
32145: LD_VAR 0 1
32149: PPUSH
32150: LD_INT 3
32152: PPUSH
32153: LD_INT 100
32155: PPUSH
32156: CALL_OW 290
32160: GO 32124
32162: POP
32163: POP
// end ;
32164: PPOPN 2
32166: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32167: LD_EXP 51
32171: PUSH
32172: LD_EXP 96
32176: AND
32177: IFFALSE 32360
32179: GO 32181
32181: DISABLE
32182: LD_INT 0
32184: PPUSH
32185: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32186: LD_ADDR_VAR 0 2
32190: PUSH
32191: LD_INT 22
32193: PUSH
32194: LD_OWVAR 2
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PPUSH
32203: CALL_OW 69
32207: ST_TO_ADDR
// if not tmp then
32208: LD_VAR 0 2
32212: NOT
32213: IFFALSE 32217
// exit ;
32215: GO 32360
// for i := 1 to 2 do
32217: LD_ADDR_VAR 0 1
32221: PUSH
32222: DOUBLE
32223: LD_INT 1
32225: DEC
32226: ST_TO_ADDR
32227: LD_INT 2
32229: PUSH
32230: FOR_TO
32231: IFFALSE 32358
// begin uc_side := your_side ;
32233: LD_ADDR_OWVAR 20
32237: PUSH
32238: LD_OWVAR 2
32242: ST_TO_ADDR
// uc_nation := nation_american ;
32243: LD_ADDR_OWVAR 21
32247: PUSH
32248: LD_INT 1
32250: ST_TO_ADDR
// vc_chassis := us_morphling ;
32251: LD_ADDR_OWVAR 37
32255: PUSH
32256: LD_INT 5
32258: ST_TO_ADDR
// vc_engine := engine_siberite ;
32259: LD_ADDR_OWVAR 39
32263: PUSH
32264: LD_INT 3
32266: ST_TO_ADDR
// vc_control := control_computer ;
32267: LD_ADDR_OWVAR 38
32271: PUSH
32272: LD_INT 3
32274: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32275: LD_ADDR_OWVAR 40
32279: PUSH
32280: LD_INT 10
32282: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32283: LD_VAR 0 2
32287: PUSH
32288: LD_INT 1
32290: ARRAY
32291: PPUSH
32292: CALL_OW 310
32296: NOT
32297: IFFALSE 32344
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32299: CALL_OW 45
32303: PPUSH
32304: LD_VAR 0 2
32308: PUSH
32309: LD_INT 1
32311: ARRAY
32312: PPUSH
32313: CALL_OW 250
32317: PPUSH
32318: LD_VAR 0 2
32322: PUSH
32323: LD_INT 1
32325: ARRAY
32326: PPUSH
32327: CALL_OW 251
32331: PPUSH
32332: LD_INT 12
32334: PPUSH
32335: LD_INT 1
32337: PPUSH
32338: CALL_OW 50
32342: GO 32356
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32344: CALL_OW 45
32348: PPUSH
32349: LD_INT 1
32351: PPUSH
32352: CALL_OW 51
// end ;
32356: GO 32230
32358: POP
32359: POP
// end ;
32360: PPOPN 2
32362: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32363: LD_EXP 51
32367: PUSH
32368: LD_EXP 97
32372: AND
32373: IFFALSE 32595
32375: GO 32377
32377: DISABLE
32378: LD_INT 0
32380: PPUSH
32381: PPUSH
32382: PPUSH
32383: PPUSH
32384: PPUSH
32385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32386: LD_ADDR_VAR 0 6
32390: PUSH
32391: LD_INT 22
32393: PUSH
32394: LD_OWVAR 2
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 21
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 3
32415: PUSH
32416: LD_INT 23
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: LIST
32434: PPUSH
32435: CALL_OW 69
32439: ST_TO_ADDR
// if not tmp then
32440: LD_VAR 0 6
32444: NOT
32445: IFFALSE 32449
// exit ;
32447: GO 32595
// s1 := rand ( 1 , 4 ) ;
32449: LD_ADDR_VAR 0 2
32453: PUSH
32454: LD_INT 1
32456: PPUSH
32457: LD_INT 4
32459: PPUSH
32460: CALL_OW 12
32464: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32465: LD_ADDR_VAR 0 4
32469: PUSH
32470: LD_VAR 0 6
32474: PUSH
32475: LD_INT 1
32477: ARRAY
32478: PPUSH
32479: LD_VAR 0 2
32483: PPUSH
32484: CALL_OW 259
32488: ST_TO_ADDR
// if s1 = 1 then
32489: LD_VAR 0 2
32493: PUSH
32494: LD_INT 1
32496: EQUAL
32497: IFFALSE 32517
// s2 := rand ( 2 , 4 ) else
32499: LD_ADDR_VAR 0 3
32503: PUSH
32504: LD_INT 2
32506: PPUSH
32507: LD_INT 4
32509: PPUSH
32510: CALL_OW 12
32514: ST_TO_ADDR
32515: GO 32525
// s2 := 1 ;
32517: LD_ADDR_VAR 0 3
32521: PUSH
32522: LD_INT 1
32524: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32525: LD_ADDR_VAR 0 5
32529: PUSH
32530: LD_VAR 0 6
32534: PUSH
32535: LD_INT 1
32537: ARRAY
32538: PPUSH
32539: LD_VAR 0 3
32543: PPUSH
32544: CALL_OW 259
32548: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32549: LD_VAR 0 6
32553: PUSH
32554: LD_INT 1
32556: ARRAY
32557: PPUSH
32558: LD_VAR 0 2
32562: PPUSH
32563: LD_VAR 0 5
32567: PPUSH
32568: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32572: LD_VAR 0 6
32576: PUSH
32577: LD_INT 1
32579: ARRAY
32580: PPUSH
32581: LD_VAR 0 3
32585: PPUSH
32586: LD_VAR 0 4
32590: PPUSH
32591: CALL_OW 237
// end ;
32595: PPOPN 6
32597: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32598: LD_EXP 51
32602: PUSH
32603: LD_EXP 98
32607: AND
32608: IFFALSE 32687
32610: GO 32612
32612: DISABLE
32613: LD_INT 0
32615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32616: LD_ADDR_VAR 0 1
32620: PUSH
32621: LD_INT 22
32623: PUSH
32624: LD_OWVAR 2
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 30
32635: PUSH
32636: LD_INT 3
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PPUSH
32647: CALL_OW 69
32651: ST_TO_ADDR
// if not tmp then
32652: LD_VAR 0 1
32656: NOT
32657: IFFALSE 32661
// exit ;
32659: GO 32687
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32661: LD_VAR 0 1
32665: PUSH
32666: LD_INT 1
32668: PPUSH
32669: LD_VAR 0 1
32673: PPUSH
32674: CALL_OW 12
32678: ARRAY
32679: PPUSH
32680: LD_INT 1
32682: PPUSH
32683: CALL_OW 234
// end ;
32687: PPOPN 1
32689: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32690: LD_EXP 51
32694: PUSH
32695: LD_EXP 99
32699: AND
32700: IFFALSE 32812
32702: GO 32704
32704: DISABLE
32705: LD_INT 0
32707: PPUSH
32708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32709: LD_ADDR_VAR 0 2
32713: PUSH
32714: LD_INT 22
32716: PUSH
32717: LD_OWVAR 2
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: LD_INT 30
32731: PUSH
32732: LD_INT 27
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 30
32741: PUSH
32742: LD_INT 26
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 30
32751: PUSH
32752: LD_INT 28
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PPUSH
32769: CALL_OW 69
32773: ST_TO_ADDR
// if not tmp then
32774: LD_VAR 0 2
32778: NOT
32779: IFFALSE 32783
// exit ;
32781: GO 32812
// for i in tmp do
32783: LD_ADDR_VAR 0 1
32787: PUSH
32788: LD_VAR 0 2
32792: PUSH
32793: FOR_IN
32794: IFFALSE 32810
// SetLives ( i , 1 ) ;
32796: LD_VAR 0 1
32800: PPUSH
32801: LD_INT 1
32803: PPUSH
32804: CALL_OW 234
32808: GO 32793
32810: POP
32811: POP
// end ;
32812: PPOPN 2
32814: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32815: LD_EXP 51
32819: PUSH
32820: LD_EXP 100
32824: AND
32825: IFFALSE 33112
32827: GO 32829
32829: DISABLE
32830: LD_INT 0
32832: PPUSH
32833: PPUSH
32834: PPUSH
// begin i := rand ( 1 , 7 ) ;
32835: LD_ADDR_VAR 0 1
32839: PUSH
32840: LD_INT 1
32842: PPUSH
32843: LD_INT 7
32845: PPUSH
32846: CALL_OW 12
32850: ST_TO_ADDR
// case i of 1 :
32851: LD_VAR 0 1
32855: PUSH
32856: LD_INT 1
32858: DOUBLE
32859: EQUAL
32860: IFTRUE 32864
32862: GO 32874
32864: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32865: LD_STRING earthquake(getX(game), 0, 32)
32867: PPUSH
32868: CALL_OW 559
32872: GO 33112
32874: LD_INT 2
32876: DOUBLE
32877: EQUAL
32878: IFTRUE 32882
32880: GO 32896
32882: POP
// begin ToLua ( displayStucuk(); ) ;
32883: LD_STRING displayStucuk();
32885: PPUSH
32886: CALL_OW 559
// ResetFog ;
32890: CALL_OW 335
// end ; 3 :
32894: GO 33112
32896: LD_INT 3
32898: DOUBLE
32899: EQUAL
32900: IFTRUE 32904
32902: GO 33008
32904: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32905: LD_ADDR_VAR 0 2
32909: PUSH
32910: LD_INT 22
32912: PUSH
32913: LD_OWVAR 2
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 25
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PPUSH
32936: CALL_OW 69
32940: ST_TO_ADDR
// if not tmp then
32941: LD_VAR 0 2
32945: NOT
32946: IFFALSE 32950
// exit ;
32948: GO 33112
// un := tmp [ rand ( 1 , tmp ) ] ;
32950: LD_ADDR_VAR 0 3
32954: PUSH
32955: LD_VAR 0 2
32959: PUSH
32960: LD_INT 1
32962: PPUSH
32963: LD_VAR 0 2
32967: PPUSH
32968: CALL_OW 12
32972: ARRAY
32973: ST_TO_ADDR
// if Crawls ( un ) then
32974: LD_VAR 0 3
32978: PPUSH
32979: CALL_OW 318
32983: IFFALSE 32994
// ComWalk ( un ) ;
32985: LD_VAR 0 3
32989: PPUSH
32990: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32994: LD_VAR 0 3
32998: PPUSH
32999: LD_INT 8
33001: PPUSH
33002: CALL_OW 336
// end ; 4 :
33006: GO 33112
33008: LD_INT 4
33010: DOUBLE
33011: EQUAL
33012: IFTRUE 33016
33014: GO 33090
33016: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33017: LD_ADDR_VAR 0 2
33021: PUSH
33022: LD_INT 22
33024: PUSH
33025: LD_OWVAR 2
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 30
33036: PUSH
33037: LD_INT 29
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PPUSH
33048: CALL_OW 69
33052: ST_TO_ADDR
// if not tmp then
33053: LD_VAR 0 2
33057: NOT
33058: IFFALSE 33062
// exit ;
33060: GO 33112
// CenterNowOnUnits ( tmp [ 1 ] ) ;
33062: LD_VAR 0 2
33066: PUSH
33067: LD_INT 1
33069: ARRAY
33070: PPUSH
33071: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
33075: LD_VAR 0 2
33079: PUSH
33080: LD_INT 1
33082: ARRAY
33083: PPUSH
33084: CALL_OW 65
// end ; 5 .. 7 :
33088: GO 33112
33090: LD_INT 5
33092: DOUBLE
33093: GREATEREQUAL
33094: IFFALSE 33102
33096: LD_INT 7
33098: DOUBLE
33099: LESSEQUAL
33100: IFTRUE 33104
33102: GO 33111
33104: POP
// StreamSibBomb ; end ;
33105: CALL 29349 0 0
33109: GO 33112
33111: POP
// end ;
33112: PPOPN 3
33114: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33115: LD_EXP 51
33119: PUSH
33120: LD_EXP 101
33124: AND
33125: IFFALSE 33281
33127: GO 33129
33129: DISABLE
33130: LD_INT 0
33132: PPUSH
33133: PPUSH
33134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33135: LD_ADDR_VAR 0 2
33139: PUSH
33140: LD_INT 81
33142: PUSH
33143: LD_OWVAR 2
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: LD_INT 21
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 21
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: LIST
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PPUSH
33184: CALL_OW 69
33188: ST_TO_ADDR
// if not tmp then
33189: LD_VAR 0 2
33193: NOT
33194: IFFALSE 33198
// exit ;
33196: GO 33281
// p := 0 ;
33198: LD_ADDR_VAR 0 3
33202: PUSH
33203: LD_INT 0
33205: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33206: LD_INT 35
33208: PPUSH
33209: CALL_OW 67
// p := p + 1 ;
33213: LD_ADDR_VAR 0 3
33217: PUSH
33218: LD_VAR 0 3
33222: PUSH
33223: LD_INT 1
33225: PLUS
33226: ST_TO_ADDR
// for i in tmp do
33227: LD_ADDR_VAR 0 1
33231: PUSH
33232: LD_VAR 0 2
33236: PUSH
33237: FOR_IN
33238: IFFALSE 33269
// if GetLives ( i ) < 1000 then
33240: LD_VAR 0 1
33244: PPUSH
33245: CALL_OW 256
33249: PUSH
33250: LD_INT 1000
33252: LESS
33253: IFFALSE 33267
// SetLives ( i , 1000 ) ;
33255: LD_VAR 0 1
33259: PPUSH
33260: LD_INT 1000
33262: PPUSH
33263: CALL_OW 234
33267: GO 33237
33269: POP
33270: POP
// until p > 20 ;
33271: LD_VAR 0 3
33275: PUSH
33276: LD_INT 20
33278: GREATER
33279: IFFALSE 33206
// end ;
33281: PPOPN 3
33283: END
// every 0 0$1 trigger StreamModeActive and sTime do
33284: LD_EXP 51
33288: PUSH
33289: LD_EXP 102
33293: AND
33294: IFFALSE 33329
33296: GO 33298
33298: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33299: LD_INT 28
33301: PPUSH
33302: LD_OWVAR 2
33306: PPUSH
33307: LD_INT 2
33309: PPUSH
33310: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33314: LD_INT 30
33316: PPUSH
33317: LD_OWVAR 2
33321: PPUSH
33322: LD_INT 2
33324: PPUSH
33325: CALL_OW 322
// end ;
33329: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33330: LD_EXP 51
33334: PUSH
33335: LD_EXP 103
33339: AND
33340: IFFALSE 33461
33342: GO 33344
33344: DISABLE
33345: LD_INT 0
33347: PPUSH
33348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33349: LD_ADDR_VAR 0 2
33353: PUSH
33354: LD_INT 22
33356: PUSH
33357: LD_OWVAR 2
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 21
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 3
33378: PUSH
33379: LD_INT 23
33381: PUSH
33382: LD_INT 0
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: LIST
33397: PPUSH
33398: CALL_OW 69
33402: ST_TO_ADDR
// if not tmp then
33403: LD_VAR 0 2
33407: NOT
33408: IFFALSE 33412
// exit ;
33410: GO 33461
// for i in tmp do
33412: LD_ADDR_VAR 0 1
33416: PUSH
33417: LD_VAR 0 2
33421: PUSH
33422: FOR_IN
33423: IFFALSE 33459
// begin if Crawls ( i ) then
33425: LD_VAR 0 1
33429: PPUSH
33430: CALL_OW 318
33434: IFFALSE 33445
// ComWalk ( i ) ;
33436: LD_VAR 0 1
33440: PPUSH
33441: CALL_OW 138
// SetClass ( i , 2 ) ;
33445: LD_VAR 0 1
33449: PPUSH
33450: LD_INT 2
33452: PPUSH
33453: CALL_OW 336
// end ;
33457: GO 33422
33459: POP
33460: POP
// end ;
33461: PPOPN 2
33463: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33464: LD_EXP 51
33468: PUSH
33469: LD_EXP 104
33473: AND
33474: IFFALSE 33762
33476: GO 33478
33478: DISABLE
33479: LD_INT 0
33481: PPUSH
33482: PPUSH
33483: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33484: LD_OWVAR 2
33488: PPUSH
33489: LD_INT 9
33491: PPUSH
33492: LD_INT 1
33494: PPUSH
33495: LD_INT 1
33497: PPUSH
33498: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33502: LD_INT 9
33504: PPUSH
33505: LD_OWVAR 2
33509: PPUSH
33510: CALL_OW 343
// uc_side := 9 ;
33514: LD_ADDR_OWVAR 20
33518: PUSH
33519: LD_INT 9
33521: ST_TO_ADDR
// uc_nation := 2 ;
33522: LD_ADDR_OWVAR 21
33526: PUSH
33527: LD_INT 2
33529: ST_TO_ADDR
// hc_name := Dark Warrior ;
33530: LD_ADDR_OWVAR 26
33534: PUSH
33535: LD_STRING Dark Warrior
33537: ST_TO_ADDR
// hc_gallery :=  ;
33538: LD_ADDR_OWVAR 33
33542: PUSH
33543: LD_STRING 
33545: ST_TO_ADDR
// hc_noskilllimit := true ;
33546: LD_ADDR_OWVAR 76
33550: PUSH
33551: LD_INT 1
33553: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33554: LD_ADDR_OWVAR 31
33558: PUSH
33559: LD_INT 30
33561: PUSH
33562: LD_INT 30
33564: PUSH
33565: LD_INT 30
33567: PUSH
33568: LD_INT 30
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: ST_TO_ADDR
// un := CreateHuman ;
33577: LD_ADDR_VAR 0 3
33581: PUSH
33582: CALL_OW 44
33586: ST_TO_ADDR
// hc_noskilllimit := false ;
33587: LD_ADDR_OWVAR 76
33591: PUSH
33592: LD_INT 0
33594: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33595: LD_VAR 0 3
33599: PPUSH
33600: LD_INT 1
33602: PPUSH
33603: CALL_OW 51
// ToLua ( playRanger() ) ;
33607: LD_STRING playRanger()
33609: PPUSH
33610: CALL_OW 559
// p := 0 ;
33614: LD_ADDR_VAR 0 2
33618: PUSH
33619: LD_INT 0
33621: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33622: LD_INT 35
33624: PPUSH
33625: CALL_OW 67
// p := p + 1 ;
33629: LD_ADDR_VAR 0 2
33633: PUSH
33634: LD_VAR 0 2
33638: PUSH
33639: LD_INT 1
33641: PLUS
33642: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33643: LD_VAR 0 3
33647: PPUSH
33648: CALL_OW 256
33652: PUSH
33653: LD_INT 1000
33655: LESS
33656: IFFALSE 33670
// SetLives ( un , 1000 ) ;
33658: LD_VAR 0 3
33662: PPUSH
33663: LD_INT 1000
33665: PPUSH
33666: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33670: LD_VAR 0 3
33674: PPUSH
33675: LD_INT 81
33677: PUSH
33678: LD_OWVAR 2
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 91
33689: PUSH
33690: LD_VAR 0 3
33694: PUSH
33695: LD_INT 30
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: LIST
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PPUSH
33707: CALL_OW 69
33711: PPUSH
33712: LD_VAR 0 3
33716: PPUSH
33717: CALL_OW 74
33721: PPUSH
33722: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33726: LD_VAR 0 2
33730: PUSH
33731: LD_INT 80
33733: GREATER
33734: PUSH
33735: LD_VAR 0 3
33739: PPUSH
33740: CALL_OW 301
33744: OR
33745: IFFALSE 33622
// if un then
33747: LD_VAR 0 3
33751: IFFALSE 33762
// RemoveUnit ( un ) ;
33753: LD_VAR 0 3
33757: PPUSH
33758: CALL_OW 64
// end ;
33762: PPOPN 3
33764: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33765: LD_EXP 105
33769: IFFALSE 33885
33771: GO 33773
33773: DISABLE
33774: LD_INT 0
33776: PPUSH
33777: PPUSH
33778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33779: LD_ADDR_VAR 0 2
33783: PUSH
33784: LD_INT 81
33786: PUSH
33787: LD_OWVAR 2
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 21
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PPUSH
33810: CALL_OW 69
33814: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33815: LD_STRING playComputer()
33817: PPUSH
33818: CALL_OW 559
// if not tmp then
33822: LD_VAR 0 2
33826: NOT
33827: IFFALSE 33831
// exit ;
33829: GO 33885
// for i in tmp do
33831: LD_ADDR_VAR 0 1
33835: PUSH
33836: LD_VAR 0 2
33840: PUSH
33841: FOR_IN
33842: IFFALSE 33883
// for j := 1 to 4 do
33844: LD_ADDR_VAR 0 3
33848: PUSH
33849: DOUBLE
33850: LD_INT 1
33852: DEC
33853: ST_TO_ADDR
33854: LD_INT 4
33856: PUSH
33857: FOR_TO
33858: IFFALSE 33879
// SetSkill ( i , j , 10 ) ;
33860: LD_VAR 0 1
33864: PPUSH
33865: LD_VAR 0 3
33869: PPUSH
33870: LD_INT 10
33872: PPUSH
33873: CALL_OW 237
33877: GO 33857
33879: POP
33880: POP
33881: GO 33841
33883: POP
33884: POP
// end ;
33885: PPOPN 3
33887: END
// every 0 0$1 trigger s30 do var i , tmp ;
33888: LD_EXP 106
33892: IFFALSE 33961
33894: GO 33896
33896: DISABLE
33897: LD_INT 0
33899: PPUSH
33900: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33901: LD_ADDR_VAR 0 2
33905: PUSH
33906: LD_INT 22
33908: PUSH
33909: LD_OWVAR 2
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PPUSH
33918: CALL_OW 69
33922: ST_TO_ADDR
// if not tmp then
33923: LD_VAR 0 2
33927: NOT
33928: IFFALSE 33932
// exit ;
33930: GO 33961
// for i in tmp do
33932: LD_ADDR_VAR 0 1
33936: PUSH
33937: LD_VAR 0 2
33941: PUSH
33942: FOR_IN
33943: IFFALSE 33959
// SetLives ( i , 300 ) ;
33945: LD_VAR 0 1
33949: PPUSH
33950: LD_INT 300
33952: PPUSH
33953: CALL_OW 234
33957: GO 33942
33959: POP
33960: POP
// end ;
33961: PPOPN 2
33963: END
// every 0 0$1 trigger s60 do var i , tmp ;
33964: LD_EXP 107
33968: IFFALSE 34037
33970: GO 33972
33972: DISABLE
33973: LD_INT 0
33975: PPUSH
33976: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33977: LD_ADDR_VAR 0 2
33981: PUSH
33982: LD_INT 22
33984: PUSH
33985: LD_OWVAR 2
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PPUSH
33994: CALL_OW 69
33998: ST_TO_ADDR
// if not tmp then
33999: LD_VAR 0 2
34003: NOT
34004: IFFALSE 34008
// exit ;
34006: GO 34037
// for i in tmp do
34008: LD_ADDR_VAR 0 1
34012: PUSH
34013: LD_VAR 0 2
34017: PUSH
34018: FOR_IN
34019: IFFALSE 34035
// SetLives ( i , 600 ) ;
34021: LD_VAR 0 1
34025: PPUSH
34026: LD_INT 600
34028: PPUSH
34029: CALL_OW 234
34033: GO 34018
34035: POP
34036: POP
// end ;
34037: PPOPN 2
34039: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34040: LD_INT 0
34042: PPUSH
// case cmd of 301 :
34043: LD_VAR 0 1
34047: PUSH
34048: LD_INT 301
34050: DOUBLE
34051: EQUAL
34052: IFTRUE 34056
34054: GO 34088
34056: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34057: LD_VAR 0 6
34061: PPUSH
34062: LD_VAR 0 7
34066: PPUSH
34067: LD_VAR 0 8
34071: PPUSH
34072: LD_VAR 0 4
34076: PPUSH
34077: LD_VAR 0 5
34081: PPUSH
34082: CALL 35297 0 5
34086: GO 34209
34088: LD_INT 302
34090: DOUBLE
34091: EQUAL
34092: IFTRUE 34096
34094: GO 34133
34096: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34097: LD_VAR 0 6
34101: PPUSH
34102: LD_VAR 0 7
34106: PPUSH
34107: LD_VAR 0 8
34111: PPUSH
34112: LD_VAR 0 9
34116: PPUSH
34117: LD_VAR 0 4
34121: PPUSH
34122: LD_VAR 0 5
34126: PPUSH
34127: CALL 35388 0 6
34131: GO 34209
34133: LD_INT 303
34135: DOUBLE
34136: EQUAL
34137: IFTRUE 34141
34139: GO 34178
34141: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34142: LD_VAR 0 6
34146: PPUSH
34147: LD_VAR 0 7
34151: PPUSH
34152: LD_VAR 0 8
34156: PPUSH
34157: LD_VAR 0 9
34161: PPUSH
34162: LD_VAR 0 4
34166: PPUSH
34167: LD_VAR 0 5
34171: PPUSH
34172: CALL 34214 0 6
34176: GO 34209
34178: LD_INT 304
34180: DOUBLE
34181: EQUAL
34182: IFTRUE 34186
34184: GO 34208
34186: POP
// hHackTeleport ( unit , x , y ) ; end ;
34187: LD_VAR 0 2
34191: PPUSH
34192: LD_VAR 0 4
34196: PPUSH
34197: LD_VAR 0 5
34201: PPUSH
34202: CALL 35981 0 3
34206: GO 34209
34208: POP
// end ;
34209: LD_VAR 0 12
34213: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34214: LD_INT 0
34216: PPUSH
34217: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34218: LD_VAR 0 1
34222: PUSH
34223: LD_INT 1
34225: LESS
34226: PUSH
34227: LD_VAR 0 1
34231: PUSH
34232: LD_INT 3
34234: GREATER
34235: OR
34236: PUSH
34237: LD_VAR 0 5
34241: PPUSH
34242: LD_VAR 0 6
34246: PPUSH
34247: CALL_OW 428
34251: OR
34252: IFFALSE 34256
// exit ;
34254: GO 34984
// uc_side := your_side ;
34256: LD_ADDR_OWVAR 20
34260: PUSH
34261: LD_OWVAR 2
34265: ST_TO_ADDR
// uc_nation := nation ;
34266: LD_ADDR_OWVAR 21
34270: PUSH
34271: LD_VAR 0 1
34275: ST_TO_ADDR
// bc_level = 1 ;
34276: LD_ADDR_OWVAR 43
34280: PUSH
34281: LD_INT 1
34283: ST_TO_ADDR
// case btype of 1 :
34284: LD_VAR 0 2
34288: PUSH
34289: LD_INT 1
34291: DOUBLE
34292: EQUAL
34293: IFTRUE 34297
34295: GO 34308
34297: POP
// bc_type := b_depot ; 2 :
34298: LD_ADDR_OWVAR 42
34302: PUSH
34303: LD_INT 0
34305: ST_TO_ADDR
34306: GO 34928
34308: LD_INT 2
34310: DOUBLE
34311: EQUAL
34312: IFTRUE 34316
34314: GO 34327
34316: POP
// bc_type := b_warehouse ; 3 :
34317: LD_ADDR_OWVAR 42
34321: PUSH
34322: LD_INT 1
34324: ST_TO_ADDR
34325: GO 34928
34327: LD_INT 3
34329: DOUBLE
34330: EQUAL
34331: IFTRUE 34335
34333: GO 34346
34335: POP
// bc_type := b_lab ; 4 .. 9 :
34336: LD_ADDR_OWVAR 42
34340: PUSH
34341: LD_INT 6
34343: ST_TO_ADDR
34344: GO 34928
34346: LD_INT 4
34348: DOUBLE
34349: GREATEREQUAL
34350: IFFALSE 34358
34352: LD_INT 9
34354: DOUBLE
34355: LESSEQUAL
34356: IFTRUE 34360
34358: GO 34420
34360: POP
// begin bc_type := b_lab_half ;
34361: LD_ADDR_OWVAR 42
34365: PUSH
34366: LD_INT 7
34368: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34369: LD_ADDR_OWVAR 44
34373: PUSH
34374: LD_INT 10
34376: PUSH
34377: LD_INT 11
34379: PUSH
34380: LD_INT 12
34382: PUSH
34383: LD_INT 15
34385: PUSH
34386: LD_INT 14
34388: PUSH
34389: LD_INT 13
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: PUSH
34400: LD_VAR 0 2
34404: PUSH
34405: LD_INT 3
34407: MINUS
34408: ARRAY
34409: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
34410: LD_ADDR_OWVAR 45
34414: PUSH
34415: LD_INT 9
34417: ST_TO_ADDR
// end ; 10 .. 13 :
34418: GO 34928
34420: LD_INT 10
34422: DOUBLE
34423: GREATEREQUAL
34424: IFFALSE 34432
34426: LD_INT 13
34428: DOUBLE
34429: LESSEQUAL
34430: IFTRUE 34434
34432: GO 34511
34434: POP
// begin bc_type := b_lab_full ;
34435: LD_ADDR_OWVAR 42
34439: PUSH
34440: LD_INT 8
34442: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34443: LD_ADDR_OWVAR 44
34447: PUSH
34448: LD_INT 10
34450: PUSH
34451: LD_INT 12
34453: PUSH
34454: LD_INT 14
34456: PUSH
34457: LD_INT 13
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: PUSH
34466: LD_VAR 0 2
34470: PUSH
34471: LD_INT 9
34473: MINUS
34474: ARRAY
34475: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34476: LD_ADDR_OWVAR 45
34480: PUSH
34481: LD_INT 11
34483: PUSH
34484: LD_INT 15
34486: PUSH
34487: LD_INT 12
34489: PUSH
34490: LD_INT 15
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: PUSH
34499: LD_VAR 0 2
34503: PUSH
34504: LD_INT 9
34506: MINUS
34507: ARRAY
34508: ST_TO_ADDR
// end ; 14 :
34509: GO 34928
34511: LD_INT 14
34513: DOUBLE
34514: EQUAL
34515: IFTRUE 34519
34517: GO 34530
34519: POP
// bc_type := b_workshop ; 15 :
34520: LD_ADDR_OWVAR 42
34524: PUSH
34525: LD_INT 2
34527: ST_TO_ADDR
34528: GO 34928
34530: LD_INT 15
34532: DOUBLE
34533: EQUAL
34534: IFTRUE 34538
34536: GO 34549
34538: POP
// bc_type := b_factory ; 16 :
34539: LD_ADDR_OWVAR 42
34543: PUSH
34544: LD_INT 3
34546: ST_TO_ADDR
34547: GO 34928
34549: LD_INT 16
34551: DOUBLE
34552: EQUAL
34553: IFTRUE 34557
34555: GO 34568
34557: POP
// bc_type := b_ext_gun ; 17 :
34558: LD_ADDR_OWVAR 42
34562: PUSH
34563: LD_INT 17
34565: ST_TO_ADDR
34566: GO 34928
34568: LD_INT 17
34570: DOUBLE
34571: EQUAL
34572: IFTRUE 34576
34574: GO 34604
34576: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34577: LD_ADDR_OWVAR 42
34581: PUSH
34582: LD_INT 19
34584: PUSH
34585: LD_INT 23
34587: PUSH
34588: LD_INT 19
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: LIST
34595: PUSH
34596: LD_VAR 0 1
34600: ARRAY
34601: ST_TO_ADDR
34602: GO 34928
34604: LD_INT 18
34606: DOUBLE
34607: EQUAL
34608: IFTRUE 34612
34610: GO 34623
34612: POP
// bc_type := b_ext_radar ; 19 :
34613: LD_ADDR_OWVAR 42
34617: PUSH
34618: LD_INT 20
34620: ST_TO_ADDR
34621: GO 34928
34623: LD_INT 19
34625: DOUBLE
34626: EQUAL
34627: IFTRUE 34631
34629: GO 34642
34631: POP
// bc_type := b_ext_radio ; 20 :
34632: LD_ADDR_OWVAR 42
34636: PUSH
34637: LD_INT 22
34639: ST_TO_ADDR
34640: GO 34928
34642: LD_INT 20
34644: DOUBLE
34645: EQUAL
34646: IFTRUE 34650
34648: GO 34661
34650: POP
// bc_type := b_ext_siberium ; 21 :
34651: LD_ADDR_OWVAR 42
34655: PUSH
34656: LD_INT 21
34658: ST_TO_ADDR
34659: GO 34928
34661: LD_INT 21
34663: DOUBLE
34664: EQUAL
34665: IFTRUE 34669
34667: GO 34680
34669: POP
// bc_type := b_ext_computer ; 22 :
34670: LD_ADDR_OWVAR 42
34674: PUSH
34675: LD_INT 24
34677: ST_TO_ADDR
34678: GO 34928
34680: LD_INT 22
34682: DOUBLE
34683: EQUAL
34684: IFTRUE 34688
34686: GO 34699
34688: POP
// bc_type := b_ext_track ; 23 :
34689: LD_ADDR_OWVAR 42
34693: PUSH
34694: LD_INT 16
34696: ST_TO_ADDR
34697: GO 34928
34699: LD_INT 23
34701: DOUBLE
34702: EQUAL
34703: IFTRUE 34707
34705: GO 34718
34707: POP
// bc_type := b_ext_laser ; 24 :
34708: LD_ADDR_OWVAR 42
34712: PUSH
34713: LD_INT 25
34715: ST_TO_ADDR
34716: GO 34928
34718: LD_INT 24
34720: DOUBLE
34721: EQUAL
34722: IFTRUE 34726
34724: GO 34737
34726: POP
// bc_type := b_control_tower ; 25 :
34727: LD_ADDR_OWVAR 42
34731: PUSH
34732: LD_INT 36
34734: ST_TO_ADDR
34735: GO 34928
34737: LD_INT 25
34739: DOUBLE
34740: EQUAL
34741: IFTRUE 34745
34743: GO 34756
34745: POP
// bc_type := b_breastwork ; 26 :
34746: LD_ADDR_OWVAR 42
34750: PUSH
34751: LD_INT 31
34753: ST_TO_ADDR
34754: GO 34928
34756: LD_INT 26
34758: DOUBLE
34759: EQUAL
34760: IFTRUE 34764
34762: GO 34775
34764: POP
// bc_type := b_bunker ; 27 :
34765: LD_ADDR_OWVAR 42
34769: PUSH
34770: LD_INT 32
34772: ST_TO_ADDR
34773: GO 34928
34775: LD_INT 27
34777: DOUBLE
34778: EQUAL
34779: IFTRUE 34783
34781: GO 34794
34783: POP
// bc_type := b_turret ; 28 :
34784: LD_ADDR_OWVAR 42
34788: PUSH
34789: LD_INT 33
34791: ST_TO_ADDR
34792: GO 34928
34794: LD_INT 28
34796: DOUBLE
34797: EQUAL
34798: IFTRUE 34802
34800: GO 34813
34802: POP
// bc_type := b_armoury ; 29 :
34803: LD_ADDR_OWVAR 42
34807: PUSH
34808: LD_INT 4
34810: ST_TO_ADDR
34811: GO 34928
34813: LD_INT 29
34815: DOUBLE
34816: EQUAL
34817: IFTRUE 34821
34819: GO 34832
34821: POP
// bc_type := b_barracks ; 30 :
34822: LD_ADDR_OWVAR 42
34826: PUSH
34827: LD_INT 5
34829: ST_TO_ADDR
34830: GO 34928
34832: LD_INT 30
34834: DOUBLE
34835: EQUAL
34836: IFTRUE 34840
34838: GO 34851
34840: POP
// bc_type := b_solar_power ; 31 :
34841: LD_ADDR_OWVAR 42
34845: PUSH
34846: LD_INT 27
34848: ST_TO_ADDR
34849: GO 34928
34851: LD_INT 31
34853: DOUBLE
34854: EQUAL
34855: IFTRUE 34859
34857: GO 34870
34859: POP
// bc_type := b_oil_power ; 32 :
34860: LD_ADDR_OWVAR 42
34864: PUSH
34865: LD_INT 26
34867: ST_TO_ADDR
34868: GO 34928
34870: LD_INT 32
34872: DOUBLE
34873: EQUAL
34874: IFTRUE 34878
34876: GO 34889
34878: POP
// bc_type := b_siberite_power ; 33 :
34879: LD_ADDR_OWVAR 42
34883: PUSH
34884: LD_INT 28
34886: ST_TO_ADDR
34887: GO 34928
34889: LD_INT 33
34891: DOUBLE
34892: EQUAL
34893: IFTRUE 34897
34895: GO 34908
34897: POP
// bc_type := b_oil_mine ; 34 :
34898: LD_ADDR_OWVAR 42
34902: PUSH
34903: LD_INT 29
34905: ST_TO_ADDR
34906: GO 34928
34908: LD_INT 34
34910: DOUBLE
34911: EQUAL
34912: IFTRUE 34916
34914: GO 34927
34916: POP
// bc_type := b_siberite_mine ; end ;
34917: LD_ADDR_OWVAR 42
34921: PUSH
34922: LD_INT 30
34924: ST_TO_ADDR
34925: GO 34928
34927: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34928: LD_ADDR_VAR 0 8
34932: PUSH
34933: LD_VAR 0 5
34937: PPUSH
34938: LD_VAR 0 6
34942: PPUSH
34943: LD_VAR 0 3
34947: PPUSH
34948: CALL_OW 47
34952: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34953: LD_OWVAR 42
34957: PUSH
34958: LD_INT 32
34960: PUSH
34961: LD_INT 33
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: IN
34968: IFFALSE 34984
// PlaceWeaponTurret ( b , weapon ) ;
34970: LD_VAR 0 8
34974: PPUSH
34975: LD_VAR 0 4
34979: PPUSH
34980: CALL_OW 431
// end ;
34984: LD_VAR 0 7
34988: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34989: LD_INT 0
34991: PPUSH
34992: PPUSH
34993: PPUSH
34994: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34995: LD_ADDR_VAR 0 4
34999: PUSH
35000: LD_INT 22
35002: PUSH
35003: LD_OWVAR 2
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 2
35014: PUSH
35015: LD_INT 30
35017: PUSH
35018: LD_INT 0
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 30
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: LIST
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PPUSH
35044: CALL_OW 69
35048: ST_TO_ADDR
// if not tmp then
35049: LD_VAR 0 4
35053: NOT
35054: IFFALSE 35058
// exit ;
35056: GO 35117
// for i in tmp do
35058: LD_ADDR_VAR 0 2
35062: PUSH
35063: LD_VAR 0 4
35067: PUSH
35068: FOR_IN
35069: IFFALSE 35115
// for j = 1 to 3 do
35071: LD_ADDR_VAR 0 3
35075: PUSH
35076: DOUBLE
35077: LD_INT 1
35079: DEC
35080: ST_TO_ADDR
35081: LD_INT 3
35083: PUSH
35084: FOR_TO
35085: IFFALSE 35111
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35087: LD_VAR 0 2
35091: PPUSH
35092: CALL_OW 274
35096: PPUSH
35097: LD_VAR 0 3
35101: PPUSH
35102: LD_INT 99999
35104: PPUSH
35105: CALL_OW 277
35109: GO 35084
35111: POP
35112: POP
35113: GO 35068
35115: POP
35116: POP
// end ;
35117: LD_VAR 0 1
35121: RET
// export function hHackSetLevel10 ; var i , j ; begin
35122: LD_INT 0
35124: PPUSH
35125: PPUSH
35126: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35127: LD_ADDR_VAR 0 2
35131: PUSH
35132: LD_INT 21
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PPUSH
35142: CALL_OW 69
35146: PUSH
35147: FOR_IN
35148: IFFALSE 35200
// if IsSelected ( i ) then
35150: LD_VAR 0 2
35154: PPUSH
35155: CALL_OW 306
35159: IFFALSE 35198
// begin for j := 1 to 4 do
35161: LD_ADDR_VAR 0 3
35165: PUSH
35166: DOUBLE
35167: LD_INT 1
35169: DEC
35170: ST_TO_ADDR
35171: LD_INT 4
35173: PUSH
35174: FOR_TO
35175: IFFALSE 35196
// SetSkill ( i , j , 10 ) ;
35177: LD_VAR 0 2
35181: PPUSH
35182: LD_VAR 0 3
35186: PPUSH
35187: LD_INT 10
35189: PPUSH
35190: CALL_OW 237
35194: GO 35174
35196: POP
35197: POP
// end ;
35198: GO 35147
35200: POP
35201: POP
// end ;
35202: LD_VAR 0 1
35206: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35207: LD_INT 0
35209: PPUSH
35210: PPUSH
35211: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35212: LD_ADDR_VAR 0 2
35216: PUSH
35217: LD_INT 22
35219: PUSH
35220: LD_OWVAR 2
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 21
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PPUSH
35243: CALL_OW 69
35247: PUSH
35248: FOR_IN
35249: IFFALSE 35290
// begin for j := 1 to 4 do
35251: LD_ADDR_VAR 0 3
35255: PUSH
35256: DOUBLE
35257: LD_INT 1
35259: DEC
35260: ST_TO_ADDR
35261: LD_INT 4
35263: PUSH
35264: FOR_TO
35265: IFFALSE 35286
// SetSkill ( i , j , 10 ) ;
35267: LD_VAR 0 2
35271: PPUSH
35272: LD_VAR 0 3
35276: PPUSH
35277: LD_INT 10
35279: PPUSH
35280: CALL_OW 237
35284: GO 35264
35286: POP
35287: POP
// end ;
35288: GO 35248
35290: POP
35291: POP
// end ;
35292: LD_VAR 0 1
35296: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35297: LD_INT 0
35299: PPUSH
// uc_side := your_side ;
35300: LD_ADDR_OWVAR 20
35304: PUSH
35305: LD_OWVAR 2
35309: ST_TO_ADDR
// uc_nation := nation ;
35310: LD_ADDR_OWVAR 21
35314: PUSH
35315: LD_VAR 0 1
35319: ST_TO_ADDR
// InitHc ;
35320: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35324: LD_INT 0
35326: PPUSH
35327: LD_VAR 0 2
35331: PPUSH
35332: LD_VAR 0 3
35336: PPUSH
35337: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35341: LD_VAR 0 4
35345: PPUSH
35346: LD_VAR 0 5
35350: PPUSH
35351: CALL_OW 428
35355: PUSH
35356: LD_INT 0
35358: EQUAL
35359: IFFALSE 35383
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35361: CALL_OW 44
35365: PPUSH
35366: LD_VAR 0 4
35370: PPUSH
35371: LD_VAR 0 5
35375: PPUSH
35376: LD_INT 1
35378: PPUSH
35379: CALL_OW 48
// end ;
35383: LD_VAR 0 6
35387: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35388: LD_INT 0
35390: PPUSH
35391: PPUSH
// uc_side := your_side ;
35392: LD_ADDR_OWVAR 20
35396: PUSH
35397: LD_OWVAR 2
35401: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35402: LD_VAR 0 1
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: LD_INT 2
35412: PUSH
35413: LD_INT 3
35415: PUSH
35416: LD_INT 4
35418: PUSH
35419: LD_INT 5
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: IN
35429: IFFALSE 35441
// uc_nation := nation_american else
35431: LD_ADDR_OWVAR 21
35435: PUSH
35436: LD_INT 1
35438: ST_TO_ADDR
35439: GO 35484
// if chassis in [ 11 , 12 , 13 , 14 ] then
35441: LD_VAR 0 1
35445: PUSH
35446: LD_INT 11
35448: PUSH
35449: LD_INT 12
35451: PUSH
35452: LD_INT 13
35454: PUSH
35455: LD_INT 14
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: IN
35464: IFFALSE 35476
// uc_nation := nation_arabian else
35466: LD_ADDR_OWVAR 21
35470: PUSH
35471: LD_INT 2
35473: ST_TO_ADDR
35474: GO 35484
// uc_nation := nation_russian ;
35476: LD_ADDR_OWVAR 21
35480: PUSH
35481: LD_INT 3
35483: ST_TO_ADDR
// vc_chassis := chassis ;
35484: LD_ADDR_OWVAR 37
35488: PUSH
35489: LD_VAR 0 1
35493: ST_TO_ADDR
// vc_engine := engine ;
35494: LD_ADDR_OWVAR 39
35498: PUSH
35499: LD_VAR 0 2
35503: ST_TO_ADDR
// vc_control := control ;
35504: LD_ADDR_OWVAR 38
35508: PUSH
35509: LD_VAR 0 3
35513: ST_TO_ADDR
// vc_weapon := weapon ;
35514: LD_ADDR_OWVAR 40
35518: PUSH
35519: LD_VAR 0 4
35523: ST_TO_ADDR
// un := CreateVehicle ;
35524: LD_ADDR_VAR 0 8
35528: PUSH
35529: CALL_OW 45
35533: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35534: LD_VAR 0 8
35538: PPUSH
35539: LD_INT 0
35541: PPUSH
35542: LD_INT 5
35544: PPUSH
35545: CALL_OW 12
35549: PPUSH
35550: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35554: LD_VAR 0 8
35558: PPUSH
35559: LD_VAR 0 5
35563: PPUSH
35564: LD_VAR 0 6
35568: PPUSH
35569: LD_INT 1
35571: PPUSH
35572: CALL_OW 48
// end ;
35576: LD_VAR 0 7
35580: RET
// export hInvincible ; every 1 do
35581: GO 35583
35583: DISABLE
// hInvincible := [ ] ;
35584: LD_ADDR_EXP 108
35588: PUSH
35589: EMPTY
35590: ST_TO_ADDR
35591: END
// every 10 do var i ;
35592: GO 35594
35594: DISABLE
35595: LD_INT 0
35597: PPUSH
// begin enable ;
35598: ENABLE
// if not hInvincible then
35599: LD_EXP 108
35603: NOT
35604: IFFALSE 35608
// exit ;
35606: GO 35652
// for i in hInvincible do
35608: LD_ADDR_VAR 0 1
35612: PUSH
35613: LD_EXP 108
35617: PUSH
35618: FOR_IN
35619: IFFALSE 35650
// if GetLives ( i ) < 1000 then
35621: LD_VAR 0 1
35625: PPUSH
35626: CALL_OW 256
35630: PUSH
35631: LD_INT 1000
35633: LESS
35634: IFFALSE 35648
// SetLives ( i , 1000 ) ;
35636: LD_VAR 0 1
35640: PPUSH
35641: LD_INT 1000
35643: PPUSH
35644: CALL_OW 234
35648: GO 35618
35650: POP
35651: POP
// end ;
35652: PPOPN 1
35654: END
// export function hHackInvincible ; var i ; begin
35655: LD_INT 0
35657: PPUSH
35658: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35659: LD_ADDR_VAR 0 2
35663: PUSH
35664: LD_INT 2
35666: PUSH
35667: LD_INT 21
35669: PUSH
35670: LD_INT 1
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 21
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: PPUSH
35692: CALL_OW 69
35696: PUSH
35697: FOR_IN
35698: IFFALSE 35759
// if IsSelected ( i ) then
35700: LD_VAR 0 2
35704: PPUSH
35705: CALL_OW 306
35709: IFFALSE 35757
// begin if i in hInvincible then
35711: LD_VAR 0 2
35715: PUSH
35716: LD_EXP 108
35720: IN
35721: IFFALSE 35741
// hInvincible := hInvincible diff i else
35723: LD_ADDR_EXP 108
35727: PUSH
35728: LD_EXP 108
35732: PUSH
35733: LD_VAR 0 2
35737: DIFF
35738: ST_TO_ADDR
35739: GO 35757
// hInvincible := hInvincible union i ;
35741: LD_ADDR_EXP 108
35745: PUSH
35746: LD_EXP 108
35750: PUSH
35751: LD_VAR 0 2
35755: UNION
35756: ST_TO_ADDR
// end ;
35757: GO 35697
35759: POP
35760: POP
// end ;
35761: LD_VAR 0 1
35765: RET
// export function hHackInvisible ; var i , j ; begin
35766: LD_INT 0
35768: PPUSH
35769: PPUSH
35770: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35771: LD_ADDR_VAR 0 2
35775: PUSH
35776: LD_INT 21
35778: PUSH
35779: LD_INT 1
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PPUSH
35786: CALL_OW 69
35790: PUSH
35791: FOR_IN
35792: IFFALSE 35816
// if IsSelected ( i ) then
35794: LD_VAR 0 2
35798: PPUSH
35799: CALL_OW 306
35803: IFFALSE 35814
// ComForceInvisible ( i ) ;
35805: LD_VAR 0 2
35809: PPUSH
35810: CALL_OW 496
35814: GO 35791
35816: POP
35817: POP
// end ;
35818: LD_VAR 0 1
35822: RET
// export function hHackChangeYourSide ; begin
35823: LD_INT 0
35825: PPUSH
// if your_side = 8 then
35826: LD_OWVAR 2
35830: PUSH
35831: LD_INT 8
35833: EQUAL
35834: IFFALSE 35846
// your_side := 0 else
35836: LD_ADDR_OWVAR 2
35840: PUSH
35841: LD_INT 0
35843: ST_TO_ADDR
35844: GO 35860
// your_side := your_side + 1 ;
35846: LD_ADDR_OWVAR 2
35850: PUSH
35851: LD_OWVAR 2
35855: PUSH
35856: LD_INT 1
35858: PLUS
35859: ST_TO_ADDR
// end ;
35860: LD_VAR 0 1
35864: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35865: LD_INT 0
35867: PPUSH
35868: PPUSH
35869: PPUSH
// for i in all_units do
35870: LD_ADDR_VAR 0 2
35874: PUSH
35875: LD_OWVAR 3
35879: PUSH
35880: FOR_IN
35881: IFFALSE 35959
// if IsSelected ( i ) then
35883: LD_VAR 0 2
35887: PPUSH
35888: CALL_OW 306
35892: IFFALSE 35957
// begin j := GetSide ( i ) ;
35894: LD_ADDR_VAR 0 3
35898: PUSH
35899: LD_VAR 0 2
35903: PPUSH
35904: CALL_OW 255
35908: ST_TO_ADDR
// if j = 8 then
35909: LD_VAR 0 3
35913: PUSH
35914: LD_INT 8
35916: EQUAL
35917: IFFALSE 35929
// j := 0 else
35919: LD_ADDR_VAR 0 3
35923: PUSH
35924: LD_INT 0
35926: ST_TO_ADDR
35927: GO 35943
// j := j + 1 ;
35929: LD_ADDR_VAR 0 3
35933: PUSH
35934: LD_VAR 0 3
35938: PUSH
35939: LD_INT 1
35941: PLUS
35942: ST_TO_ADDR
// SetSide ( i , j ) ;
35943: LD_VAR 0 2
35947: PPUSH
35948: LD_VAR 0 3
35952: PPUSH
35953: CALL_OW 235
// end ;
35957: GO 35880
35959: POP
35960: POP
// end ;
35961: LD_VAR 0 1
35965: RET
// export function hHackFog ; begin
35966: LD_INT 0
35968: PPUSH
// FogOff ( true ) ;
35969: LD_INT 1
35971: PPUSH
35972: CALL_OW 344
// end ;
35976: LD_VAR 0 1
35980: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35981: LD_INT 0
35983: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35984: LD_VAR 0 1
35988: PPUSH
35989: LD_VAR 0 2
35993: PPUSH
35994: LD_VAR 0 3
35998: PPUSH
35999: LD_INT 1
36001: PPUSH
36002: LD_INT 1
36004: PPUSH
36005: CALL_OW 483
// CenterOnXY ( x , y ) ;
36009: LD_VAR 0 2
36013: PPUSH
36014: LD_VAR 0 3
36018: PPUSH
36019: CALL_OW 84
// end ;
36023: LD_VAR 0 4
36027: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36028: LD_INT 0
36030: PPUSH
36031: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36032: LD_VAR 0 1
36036: NOT
36037: PUSH
36038: LD_VAR 0 2
36042: PPUSH
36043: LD_VAR 0 3
36047: PPUSH
36048: CALL_OW 488
36052: NOT
36053: OR
36054: PUSH
36055: LD_VAR 0 1
36059: PPUSH
36060: CALL_OW 266
36064: PUSH
36065: LD_INT 3
36067: NONEQUAL
36068: PUSH
36069: LD_VAR 0 1
36073: PPUSH
36074: CALL_OW 247
36078: PUSH
36079: LD_INT 1
36081: EQUAL
36082: NOT
36083: AND
36084: OR
36085: IFFALSE 36089
// exit ;
36087: GO 36238
// if GetType ( factory ) = unit_human then
36089: LD_VAR 0 1
36093: PPUSH
36094: CALL_OW 247
36098: PUSH
36099: LD_INT 1
36101: EQUAL
36102: IFFALSE 36119
// factory := IsInUnit ( factory ) ;
36104: LD_ADDR_VAR 0 1
36108: PUSH
36109: LD_VAR 0 1
36113: PPUSH
36114: CALL_OW 310
36118: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36119: LD_VAR 0 1
36123: PPUSH
36124: CALL_OW 266
36128: PUSH
36129: LD_INT 3
36131: NONEQUAL
36132: IFFALSE 36136
// exit ;
36134: GO 36238
// if HexInfo ( x , y ) = factory then
36136: LD_VAR 0 2
36140: PPUSH
36141: LD_VAR 0 3
36145: PPUSH
36146: CALL_OW 428
36150: PUSH
36151: LD_VAR 0 1
36155: EQUAL
36156: IFFALSE 36183
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
36158: LD_ADDR_EXP 109
36162: PUSH
36163: LD_EXP 109
36167: PPUSH
36168: LD_VAR 0 1
36172: PPUSH
36173: LD_INT 0
36175: PPUSH
36176: CALL_OW 1
36180: ST_TO_ADDR
36181: GO 36234
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
36183: LD_ADDR_EXP 109
36187: PUSH
36188: LD_EXP 109
36192: PPUSH
36193: LD_VAR 0 1
36197: PPUSH
36198: LD_VAR 0 1
36202: PPUSH
36203: CALL_OW 255
36207: PUSH
36208: LD_VAR 0 1
36212: PUSH
36213: LD_VAR 0 2
36217: PUSH
36218: LD_VAR 0 3
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: PPUSH
36229: CALL_OW 1
36233: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36234: CALL 36243 0 0
// end ;
36238: LD_VAR 0 4
36242: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
36243: LD_INT 0
36245: PPUSH
36246: PPUSH
36247: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
36248: LD_STRING resetFactoryWaypoint();
36250: PPUSH
36251: CALL_OW 559
// if factoryWaypoints then
36255: LD_EXP 109
36259: IFFALSE 36385
// begin list := PrepareArray ( factoryWaypoints ) ;
36261: LD_ADDR_VAR 0 3
36265: PUSH
36266: LD_EXP 109
36270: PPUSH
36271: CALL 82707 0 1
36275: ST_TO_ADDR
// for i := 1 to list do
36276: LD_ADDR_VAR 0 2
36280: PUSH
36281: DOUBLE
36282: LD_INT 1
36284: DEC
36285: ST_TO_ADDR
36286: LD_VAR 0 3
36290: PUSH
36291: FOR_TO
36292: IFFALSE 36383
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36294: LD_STRING setFactoryWaypointXY(
36296: PUSH
36297: LD_VAR 0 3
36301: PUSH
36302: LD_VAR 0 2
36306: ARRAY
36307: PUSH
36308: LD_INT 1
36310: ARRAY
36311: STR
36312: PUSH
36313: LD_STRING ,
36315: STR
36316: PUSH
36317: LD_VAR 0 3
36321: PUSH
36322: LD_VAR 0 2
36326: ARRAY
36327: PUSH
36328: LD_INT 2
36330: ARRAY
36331: STR
36332: PUSH
36333: LD_STRING ,
36335: STR
36336: PUSH
36337: LD_VAR 0 3
36341: PUSH
36342: LD_VAR 0 2
36346: ARRAY
36347: PUSH
36348: LD_INT 3
36350: ARRAY
36351: STR
36352: PUSH
36353: LD_STRING ,
36355: STR
36356: PUSH
36357: LD_VAR 0 3
36361: PUSH
36362: LD_VAR 0 2
36366: ARRAY
36367: PUSH
36368: LD_INT 4
36370: ARRAY
36371: STR
36372: PUSH
36373: LD_STRING )
36375: STR
36376: PPUSH
36377: CALL_OW 559
36381: GO 36291
36383: POP
36384: POP
// end ; end ;
36385: LD_VAR 0 1
36389: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
36390: LD_INT 0
36392: PPUSH
// if HexInfo ( x , y ) = warehouse then
36393: LD_VAR 0 2
36397: PPUSH
36398: LD_VAR 0 3
36402: PPUSH
36403: CALL_OW 428
36407: PUSH
36408: LD_VAR 0 1
36412: EQUAL
36413: IFFALSE 36440
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
36415: LD_ADDR_EXP 110
36419: PUSH
36420: LD_EXP 110
36424: PPUSH
36425: LD_VAR 0 1
36429: PPUSH
36430: LD_INT 0
36432: PPUSH
36433: CALL_OW 1
36437: ST_TO_ADDR
36438: GO 36491
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
36440: LD_ADDR_EXP 110
36444: PUSH
36445: LD_EXP 110
36449: PPUSH
36450: LD_VAR 0 1
36454: PPUSH
36455: LD_VAR 0 1
36459: PPUSH
36460: CALL_OW 255
36464: PUSH
36465: LD_VAR 0 1
36469: PUSH
36470: LD_VAR 0 2
36474: PUSH
36475: LD_VAR 0 3
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: PPUSH
36486: CALL_OW 1
36490: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
36491: CALL 36500 0 0
// end ;
36495: LD_VAR 0 4
36499: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
36500: LD_INT 0
36502: PPUSH
36503: PPUSH
36504: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
36505: LD_STRING resetWarehouseGatheringPoints();
36507: PPUSH
36508: CALL_OW 559
// if warehouseGatheringPoints then
36512: LD_EXP 110
36516: IFFALSE 36642
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36518: LD_ADDR_VAR 0 3
36522: PUSH
36523: LD_EXP 110
36527: PPUSH
36528: CALL 82707 0 1
36532: ST_TO_ADDR
// for i := 1 to list do
36533: LD_ADDR_VAR 0 2
36537: PUSH
36538: DOUBLE
36539: LD_INT 1
36541: DEC
36542: ST_TO_ADDR
36543: LD_VAR 0 3
36547: PUSH
36548: FOR_TO
36549: IFFALSE 36640
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36551: LD_STRING setWarehouseGatheringPointXY(
36553: PUSH
36554: LD_VAR 0 3
36558: PUSH
36559: LD_VAR 0 2
36563: ARRAY
36564: PUSH
36565: LD_INT 1
36567: ARRAY
36568: STR
36569: PUSH
36570: LD_STRING ,
36572: STR
36573: PUSH
36574: LD_VAR 0 3
36578: PUSH
36579: LD_VAR 0 2
36583: ARRAY
36584: PUSH
36585: LD_INT 2
36587: ARRAY
36588: STR
36589: PUSH
36590: LD_STRING ,
36592: STR
36593: PUSH
36594: LD_VAR 0 3
36598: PUSH
36599: LD_VAR 0 2
36603: ARRAY
36604: PUSH
36605: LD_INT 3
36607: ARRAY
36608: STR
36609: PUSH
36610: LD_STRING ,
36612: STR
36613: PUSH
36614: LD_VAR 0 3
36618: PUSH
36619: LD_VAR 0 2
36623: ARRAY
36624: PUSH
36625: LD_INT 4
36627: ARRAY
36628: STR
36629: PUSH
36630: LD_STRING )
36632: STR
36633: PPUSH
36634: CALL_OW 559
36638: GO 36548
36640: POP
36641: POP
// end ; end ;
36642: LD_VAR 0 1
36646: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36647: LD_EXP 110
36651: IFFALSE 37336
36653: GO 36655
36655: DISABLE
36656: LD_INT 0
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
36662: PPUSH
36663: PPUSH
36664: PPUSH
36665: PPUSH
36666: PPUSH
// begin enable ;
36667: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36668: LD_ADDR_VAR 0 3
36672: PUSH
36673: LD_EXP 110
36677: PPUSH
36678: CALL 82707 0 1
36682: ST_TO_ADDR
// if not list then
36683: LD_VAR 0 3
36687: NOT
36688: IFFALSE 36692
// exit ;
36690: GO 37336
// for i := 1 to list do
36692: LD_ADDR_VAR 0 1
36696: PUSH
36697: DOUBLE
36698: LD_INT 1
36700: DEC
36701: ST_TO_ADDR
36702: LD_VAR 0 3
36706: PUSH
36707: FOR_TO
36708: IFFALSE 37334
// begin depot := list [ i ] [ 2 ] ;
36710: LD_ADDR_VAR 0 8
36714: PUSH
36715: LD_VAR 0 3
36719: PUSH
36720: LD_VAR 0 1
36724: ARRAY
36725: PUSH
36726: LD_INT 2
36728: ARRAY
36729: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36730: LD_ADDR_VAR 0 5
36734: PUSH
36735: LD_VAR 0 3
36739: PUSH
36740: LD_VAR 0 1
36744: ARRAY
36745: PUSH
36746: LD_INT 1
36748: ARRAY
36749: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36750: LD_VAR 0 8
36754: PPUSH
36755: CALL_OW 301
36759: PUSH
36760: LD_VAR 0 5
36764: PUSH
36765: LD_VAR 0 8
36769: PPUSH
36770: CALL_OW 255
36774: NONEQUAL
36775: OR
36776: IFFALSE 36805
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36778: LD_ADDR_EXP 110
36782: PUSH
36783: LD_EXP 110
36787: PPUSH
36788: LD_VAR 0 8
36792: PPUSH
36793: LD_INT 0
36795: PPUSH
36796: CALL_OW 1
36800: ST_TO_ADDR
// exit ;
36801: POP
36802: POP
36803: GO 37336
// end ; x := list [ i ] [ 3 ] ;
36805: LD_ADDR_VAR 0 6
36809: PUSH
36810: LD_VAR 0 3
36814: PUSH
36815: LD_VAR 0 1
36819: ARRAY
36820: PUSH
36821: LD_INT 3
36823: ARRAY
36824: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36825: LD_ADDR_VAR 0 7
36829: PUSH
36830: LD_VAR 0 3
36834: PUSH
36835: LD_VAR 0 1
36839: ARRAY
36840: PUSH
36841: LD_INT 4
36843: ARRAY
36844: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36845: LD_ADDR_VAR 0 9
36849: PUSH
36850: LD_VAR 0 6
36854: PPUSH
36855: LD_VAR 0 7
36859: PPUSH
36860: LD_INT 16
36862: PPUSH
36863: CALL 81295 0 3
36867: ST_TO_ADDR
// if not cratesNearbyPoint then
36868: LD_VAR 0 9
36872: NOT
36873: IFFALSE 36879
// exit ;
36875: POP
36876: POP
36877: GO 37336
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36879: LD_ADDR_VAR 0 4
36883: PUSH
36884: LD_INT 22
36886: PUSH
36887: LD_VAR 0 5
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 3
36898: PUSH
36899: LD_INT 60
36901: PUSH
36902: EMPTY
36903: LIST
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 91
36911: PUSH
36912: LD_VAR 0 8
36916: PUSH
36917: LD_INT 6
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: LD_INT 25
36930: PUSH
36931: LD_INT 2
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 25
36940: PUSH
36941: LD_INT 16
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: LIST
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: PPUSH
36959: CALL_OW 69
36963: PUSH
36964: LD_VAR 0 8
36968: PPUSH
36969: CALL_OW 313
36973: PPUSH
36974: LD_INT 3
36976: PUSH
36977: LD_INT 60
36979: PUSH
36980: EMPTY
36981: LIST
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 2
36989: PUSH
36990: LD_INT 25
36992: PUSH
36993: LD_INT 2
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 25
37002: PUSH
37003: LD_INT 16
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: LIST
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PPUSH
37019: CALL_OW 72
37023: UNION
37024: ST_TO_ADDR
// if tmp then
37025: LD_VAR 0 4
37029: IFFALSE 37109
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37031: LD_ADDR_VAR 0 4
37035: PUSH
37036: LD_VAR 0 4
37040: PPUSH
37041: LD_INT 3
37043: PPUSH
37044: CALL 79264 0 2
37048: ST_TO_ADDR
// for j in tmp do
37049: LD_ADDR_VAR 0 2
37053: PUSH
37054: LD_VAR 0 4
37058: PUSH
37059: FOR_IN
37060: IFFALSE 37103
// begin if IsInUnit ( j ) then
37062: LD_VAR 0 2
37066: PPUSH
37067: CALL_OW 310
37071: IFFALSE 37082
// ComExit ( j ) ;
37073: LD_VAR 0 2
37077: PPUSH
37078: CALL 79347 0 1
// AddComCollect ( j , x , y ) ;
37082: LD_VAR 0 2
37086: PPUSH
37087: LD_VAR 0 6
37091: PPUSH
37092: LD_VAR 0 7
37096: PPUSH
37097: CALL_OW 177
// end ;
37101: GO 37059
37103: POP
37104: POP
// exit ;
37105: POP
37106: POP
37107: GO 37336
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
37109: LD_ADDR_VAR 0 4
37113: PUSH
37114: LD_INT 22
37116: PUSH
37117: LD_VAR 0 5
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 91
37128: PUSH
37129: LD_VAR 0 8
37133: PUSH
37134: LD_INT 8
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 2
37144: PUSH
37145: LD_INT 34
37147: PUSH
37148: LD_INT 12
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 34
37157: PUSH
37158: LD_INT 51
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 34
37167: PUSH
37168: LD_INT 32
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 34
37177: PUSH
37178: LD_INT 89
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: LIST
37196: PPUSH
37197: CALL_OW 69
37201: ST_TO_ADDR
// if tmp then
37202: LD_VAR 0 4
37206: IFFALSE 37332
// begin for j in tmp do
37208: LD_ADDR_VAR 0 2
37212: PUSH
37213: LD_VAR 0 4
37217: PUSH
37218: FOR_IN
37219: IFFALSE 37330
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
37221: LD_VAR 0 2
37225: PPUSH
37226: CALL_OW 262
37230: PUSH
37231: LD_INT 3
37233: EQUAL
37234: PUSH
37235: LD_VAR 0 2
37239: PPUSH
37240: CALL_OW 261
37244: PUSH
37245: LD_INT 20
37247: GREATER
37248: OR
37249: PUSH
37250: LD_VAR 0 2
37254: PPUSH
37255: CALL_OW 314
37259: NOT
37260: AND
37261: PUSH
37262: LD_VAR 0 2
37266: PPUSH
37267: CALL_OW 263
37271: PUSH
37272: LD_INT 1
37274: NONEQUAL
37275: PUSH
37276: LD_VAR 0 2
37280: PPUSH
37281: CALL_OW 311
37285: OR
37286: AND
37287: IFFALSE 37328
// begin ComCollect ( j , x , y ) ;
37289: LD_VAR 0 2
37293: PPUSH
37294: LD_VAR 0 6
37298: PPUSH
37299: LD_VAR 0 7
37303: PPUSH
37304: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
37308: LD_VAR 0 2
37312: PPUSH
37313: LD_VAR 0 8
37317: PPUSH
37318: CALL_OW 172
// exit ;
37322: POP
37323: POP
37324: POP
37325: POP
37326: GO 37336
// end ;
37328: GO 37218
37330: POP
37331: POP
// end ; end ;
37332: GO 36707
37334: POP
37335: POP
// end ; end_of_file
37336: PPOPN 9
37338: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37339: LD_INT 0
37341: PPUSH
37342: PPUSH
37343: PPUSH
37344: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37345: LD_VAR 0 1
37349: PPUSH
37350: CALL_OW 264
37354: PUSH
37355: LD_INT 91
37357: EQUAL
37358: IFFALSE 37430
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37360: LD_INT 68
37362: PPUSH
37363: LD_VAR 0 1
37367: PPUSH
37368: CALL_OW 255
37372: PPUSH
37373: CALL_OW 321
37377: PUSH
37378: LD_INT 2
37380: EQUAL
37381: IFFALSE 37393
// eff := 70 else
37383: LD_ADDR_VAR 0 4
37387: PUSH
37388: LD_INT 70
37390: ST_TO_ADDR
37391: GO 37401
// eff := 30 ;
37393: LD_ADDR_VAR 0 4
37397: PUSH
37398: LD_INT 30
37400: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37401: LD_VAR 0 1
37405: PPUSH
37406: CALL_OW 250
37410: PPUSH
37411: LD_VAR 0 1
37415: PPUSH
37416: CALL_OW 251
37420: PPUSH
37421: LD_VAR 0 4
37425: PPUSH
37426: CALL_OW 495
// end ; end ;
37430: LD_VAR 0 2
37434: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37435: LD_INT 0
37437: PPUSH
// end ;
37438: LD_VAR 0 4
37442: RET
// export function SOS_Command ( cmd ) ; begin
37443: LD_INT 0
37445: PPUSH
// end ;
37446: LD_VAR 0 2
37450: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37451: LD_INT 0
37453: PPUSH
// end ;
37454: LD_VAR 0 6
37458: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
37459: LD_INT 0
37461: PPUSH
37462: PPUSH
// if not vehicle or not factory then
37463: LD_VAR 0 1
37467: NOT
37468: PUSH
37469: LD_VAR 0 2
37473: NOT
37474: OR
37475: IFFALSE 37479
// exit ;
37477: GO 37710
// if factoryWaypoints >= factory then
37479: LD_EXP 109
37483: PUSH
37484: LD_VAR 0 2
37488: GREATEREQUAL
37489: IFFALSE 37710
// if factoryWaypoints [ factory ] then
37491: LD_EXP 109
37495: PUSH
37496: LD_VAR 0 2
37500: ARRAY
37501: IFFALSE 37710
// begin if GetControl ( vehicle ) = control_manual then
37503: LD_VAR 0 1
37507: PPUSH
37508: CALL_OW 263
37512: PUSH
37513: LD_INT 1
37515: EQUAL
37516: IFFALSE 37597
// begin driver := IsDrivenBy ( vehicle ) ;
37518: LD_ADDR_VAR 0 4
37522: PUSH
37523: LD_VAR 0 1
37527: PPUSH
37528: CALL_OW 311
37532: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37533: LD_VAR 0 4
37537: PPUSH
37538: LD_EXP 109
37542: PUSH
37543: LD_VAR 0 2
37547: ARRAY
37548: PUSH
37549: LD_INT 3
37551: ARRAY
37552: PPUSH
37553: LD_EXP 109
37557: PUSH
37558: LD_VAR 0 2
37562: ARRAY
37563: PUSH
37564: LD_INT 4
37566: ARRAY
37567: PPUSH
37568: CALL_OW 171
// AddComExitVehicle ( driver ) ;
37572: LD_VAR 0 4
37576: PPUSH
37577: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
37581: LD_VAR 0 4
37585: PPUSH
37586: LD_VAR 0 2
37590: PPUSH
37591: CALL_OW 180
// end else
37595: GO 37710
// if GetControl ( vehicle ) = control_remote then
37597: LD_VAR 0 1
37601: PPUSH
37602: CALL_OW 263
37606: PUSH
37607: LD_INT 2
37609: EQUAL
37610: IFFALSE 37671
// begin wait ( 0 0$2 ) ;
37612: LD_INT 70
37614: PPUSH
37615: CALL_OW 67
// if Connect ( vehicle ) then
37619: LD_VAR 0 1
37623: PPUSH
37624: CALL 49568 0 1
37628: IFFALSE 37669
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37630: LD_VAR 0 1
37634: PPUSH
37635: LD_EXP 109
37639: PUSH
37640: LD_VAR 0 2
37644: ARRAY
37645: PUSH
37646: LD_INT 3
37648: ARRAY
37649: PPUSH
37650: LD_EXP 109
37654: PUSH
37655: LD_VAR 0 2
37659: ARRAY
37660: PUSH
37661: LD_INT 4
37663: ARRAY
37664: PPUSH
37665: CALL_OW 171
// end else
37669: GO 37710
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37671: LD_VAR 0 1
37675: PPUSH
37676: LD_EXP 109
37680: PUSH
37681: LD_VAR 0 2
37685: ARRAY
37686: PUSH
37687: LD_INT 3
37689: ARRAY
37690: PPUSH
37691: LD_EXP 109
37695: PUSH
37696: LD_VAR 0 2
37700: ARRAY
37701: PUSH
37702: LD_INT 4
37704: ARRAY
37705: PPUSH
37706: CALL_OW 171
// end ; end ;
37710: LD_VAR 0 3
37714: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37715: LD_INT 0
37717: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37718: LD_VAR 0 1
37722: PUSH
37723: LD_INT 250
37725: EQUAL
37726: PUSH
37727: LD_VAR 0 2
37731: PPUSH
37732: CALL_OW 264
37736: PUSH
37737: LD_INT 81
37739: EQUAL
37740: AND
37741: IFFALSE 37762
// MinerPlaceMine ( unit , x , y ) ;
37743: LD_VAR 0 2
37747: PPUSH
37748: LD_VAR 0 4
37752: PPUSH
37753: LD_VAR 0 5
37757: PPUSH
37758: CALL 40147 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37762: LD_VAR 0 1
37766: PUSH
37767: LD_INT 251
37769: EQUAL
37770: PUSH
37771: LD_VAR 0 2
37775: PPUSH
37776: CALL_OW 264
37780: PUSH
37781: LD_INT 81
37783: EQUAL
37784: AND
37785: IFFALSE 37806
// MinerDetonateMine ( unit , x , y ) ;
37787: LD_VAR 0 2
37791: PPUSH
37792: LD_VAR 0 4
37796: PPUSH
37797: LD_VAR 0 5
37801: PPUSH
37802: CALL 40422 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37806: LD_VAR 0 1
37810: PUSH
37811: LD_INT 252
37813: EQUAL
37814: PUSH
37815: LD_VAR 0 2
37819: PPUSH
37820: CALL_OW 264
37824: PUSH
37825: LD_INT 81
37827: EQUAL
37828: AND
37829: IFFALSE 37850
// MinerCreateMinefield ( unit , x , y ) ;
37831: LD_VAR 0 2
37835: PPUSH
37836: LD_VAR 0 4
37840: PPUSH
37841: LD_VAR 0 5
37845: PPUSH
37846: CALL 40839 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37850: LD_VAR 0 1
37854: PUSH
37855: LD_INT 253
37857: EQUAL
37858: PUSH
37859: LD_VAR 0 2
37863: PPUSH
37864: CALL_OW 257
37868: PUSH
37869: LD_INT 5
37871: EQUAL
37872: AND
37873: IFFALSE 37894
// ComBinocular ( unit , x , y ) ;
37875: LD_VAR 0 2
37879: PPUSH
37880: LD_VAR 0 4
37884: PPUSH
37885: LD_VAR 0 5
37889: PPUSH
37890: CALL 41208 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37894: LD_VAR 0 1
37898: PUSH
37899: LD_INT 254
37901: EQUAL
37902: PUSH
37903: LD_VAR 0 2
37907: PPUSH
37908: CALL_OW 264
37912: PUSH
37913: LD_INT 99
37915: EQUAL
37916: AND
37917: PUSH
37918: LD_VAR 0 3
37922: PPUSH
37923: CALL_OW 263
37927: PUSH
37928: LD_INT 3
37930: EQUAL
37931: AND
37932: IFFALSE 37948
// HackDestroyVehicle ( unit , selectedUnit ) ;
37934: LD_VAR 0 2
37938: PPUSH
37939: LD_VAR 0 3
37943: PPUSH
37944: CALL 39511 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37948: LD_VAR 0 1
37952: PUSH
37953: LD_INT 255
37955: EQUAL
37956: PUSH
37957: LD_VAR 0 2
37961: PPUSH
37962: CALL_OW 264
37966: PUSH
37967: LD_INT 14
37969: PUSH
37970: LD_INT 53
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: IN
37977: AND
37978: PUSH
37979: LD_VAR 0 4
37983: PPUSH
37984: LD_VAR 0 5
37988: PPUSH
37989: CALL_OW 488
37993: AND
37994: IFFALSE 38018
// CutTreeXYR ( unit , x , y , 12 ) ;
37996: LD_VAR 0 2
38000: PPUSH
38001: LD_VAR 0 4
38005: PPUSH
38006: LD_VAR 0 5
38010: PPUSH
38011: LD_INT 12
38013: PPUSH
38014: CALL 38081 0 4
// if cmd = 256 then
38018: LD_VAR 0 1
38022: PUSH
38023: LD_INT 256
38025: EQUAL
38026: IFFALSE 38047
// SetFactoryWaypoint ( unit , x , y ) ;
38028: LD_VAR 0 2
38032: PPUSH
38033: LD_VAR 0 4
38037: PPUSH
38038: LD_VAR 0 5
38042: PPUSH
38043: CALL 36028 0 3
// if cmd = 257 then
38047: LD_VAR 0 1
38051: PUSH
38052: LD_INT 257
38054: EQUAL
38055: IFFALSE 38076
// SetWarehouseGatheringPoint ( unit , x , y ) ;
38057: LD_VAR 0 2
38061: PPUSH
38062: LD_VAR 0 4
38066: PPUSH
38067: LD_VAR 0 5
38071: PPUSH
38072: CALL 36390 0 3
// end ;
38076: LD_VAR 0 6
38080: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38081: LD_INT 0
38083: PPUSH
38084: PPUSH
38085: PPUSH
38086: PPUSH
38087: PPUSH
38088: PPUSH
38089: PPUSH
38090: PPUSH
38091: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
38092: LD_VAR 0 1
38096: NOT
38097: PUSH
38098: LD_VAR 0 2
38102: PPUSH
38103: LD_VAR 0 3
38107: PPUSH
38108: CALL_OW 488
38112: NOT
38113: OR
38114: PUSH
38115: LD_VAR 0 4
38119: NOT
38120: OR
38121: IFFALSE 38125
// exit ;
38123: GO 38465
// list := [ ] ;
38125: LD_ADDR_VAR 0 13
38129: PUSH
38130: EMPTY
38131: ST_TO_ADDR
// if x - r < 0 then
38132: LD_VAR 0 2
38136: PUSH
38137: LD_VAR 0 4
38141: MINUS
38142: PUSH
38143: LD_INT 0
38145: LESS
38146: IFFALSE 38158
// min_x := 0 else
38148: LD_ADDR_VAR 0 7
38152: PUSH
38153: LD_INT 0
38155: ST_TO_ADDR
38156: GO 38174
// min_x := x - r ;
38158: LD_ADDR_VAR 0 7
38162: PUSH
38163: LD_VAR 0 2
38167: PUSH
38168: LD_VAR 0 4
38172: MINUS
38173: ST_TO_ADDR
// if y - r < 0 then
38174: LD_VAR 0 3
38178: PUSH
38179: LD_VAR 0 4
38183: MINUS
38184: PUSH
38185: LD_INT 0
38187: LESS
38188: IFFALSE 38200
// min_y := 0 else
38190: LD_ADDR_VAR 0 8
38194: PUSH
38195: LD_INT 0
38197: ST_TO_ADDR
38198: GO 38216
// min_y := y - r ;
38200: LD_ADDR_VAR 0 8
38204: PUSH
38205: LD_VAR 0 3
38209: PUSH
38210: LD_VAR 0 4
38214: MINUS
38215: ST_TO_ADDR
// max_x := x + r ;
38216: LD_ADDR_VAR 0 9
38220: PUSH
38221: LD_VAR 0 2
38225: PUSH
38226: LD_VAR 0 4
38230: PLUS
38231: ST_TO_ADDR
// max_y := y + r ;
38232: LD_ADDR_VAR 0 10
38236: PUSH
38237: LD_VAR 0 3
38241: PUSH
38242: LD_VAR 0 4
38246: PLUS
38247: ST_TO_ADDR
// for _x = min_x to max_x do
38248: LD_ADDR_VAR 0 11
38252: PUSH
38253: DOUBLE
38254: LD_VAR 0 7
38258: DEC
38259: ST_TO_ADDR
38260: LD_VAR 0 9
38264: PUSH
38265: FOR_TO
38266: IFFALSE 38383
// for _y = min_y to max_y do
38268: LD_ADDR_VAR 0 12
38272: PUSH
38273: DOUBLE
38274: LD_VAR 0 8
38278: DEC
38279: ST_TO_ADDR
38280: LD_VAR 0 10
38284: PUSH
38285: FOR_TO
38286: IFFALSE 38379
// begin if not ValidHex ( _x , _y ) then
38288: LD_VAR 0 11
38292: PPUSH
38293: LD_VAR 0 12
38297: PPUSH
38298: CALL_OW 488
38302: NOT
38303: IFFALSE 38307
// continue ;
38305: GO 38285
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38307: LD_VAR 0 11
38311: PPUSH
38312: LD_VAR 0 12
38316: PPUSH
38317: CALL_OW 351
38321: PUSH
38322: LD_VAR 0 11
38326: PPUSH
38327: LD_VAR 0 12
38331: PPUSH
38332: CALL_OW 554
38336: AND
38337: IFFALSE 38377
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38339: LD_ADDR_VAR 0 13
38343: PUSH
38344: LD_VAR 0 13
38348: PPUSH
38349: LD_VAR 0 13
38353: PUSH
38354: LD_INT 1
38356: PLUS
38357: PPUSH
38358: LD_VAR 0 11
38362: PUSH
38363: LD_VAR 0 12
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PPUSH
38372: CALL_OW 2
38376: ST_TO_ADDR
// end ;
38377: GO 38285
38379: POP
38380: POP
38381: GO 38265
38383: POP
38384: POP
// if not list then
38385: LD_VAR 0 13
38389: NOT
38390: IFFALSE 38394
// exit ;
38392: GO 38465
// for i in list do
38394: LD_ADDR_VAR 0 6
38398: PUSH
38399: LD_VAR 0 13
38403: PUSH
38404: FOR_IN
38405: IFFALSE 38463
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38407: LD_VAR 0 1
38411: PPUSH
38412: LD_STRING M
38414: PUSH
38415: LD_VAR 0 6
38419: PUSH
38420: LD_INT 1
38422: ARRAY
38423: PUSH
38424: LD_VAR 0 6
38428: PUSH
38429: LD_INT 2
38431: ARRAY
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: LD_INT 0
38441: PUSH
38442: LD_INT 0
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: PUSH
38454: EMPTY
38455: LIST
38456: PPUSH
38457: CALL_OW 447
38461: GO 38404
38463: POP
38464: POP
// end ;
38465: LD_VAR 0 5
38469: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38470: LD_EXP 112
38474: NOT
38475: IFFALSE 38525
38477: GO 38479
38479: DISABLE
// begin initHack := true ;
38480: LD_ADDR_EXP 112
38484: PUSH
38485: LD_INT 1
38487: ST_TO_ADDR
// hackTanks := [ ] ;
38488: LD_ADDR_EXP 113
38492: PUSH
38493: EMPTY
38494: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38495: LD_ADDR_EXP 114
38499: PUSH
38500: EMPTY
38501: ST_TO_ADDR
// hackLimit := 3 ;
38502: LD_ADDR_EXP 115
38506: PUSH
38507: LD_INT 3
38509: ST_TO_ADDR
// hackDist := 12 ;
38510: LD_ADDR_EXP 116
38514: PUSH
38515: LD_INT 12
38517: ST_TO_ADDR
// hackCounter := [ ] ;
38518: LD_ADDR_EXP 117
38522: PUSH
38523: EMPTY
38524: ST_TO_ADDR
// end ;
38525: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38526: LD_EXP 112
38530: PUSH
38531: LD_INT 34
38533: PUSH
38534: LD_INT 99
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PPUSH
38541: CALL_OW 69
38545: AND
38546: IFFALSE 38799
38548: GO 38550
38550: DISABLE
38551: LD_INT 0
38553: PPUSH
38554: PPUSH
// begin enable ;
38555: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38556: LD_ADDR_VAR 0 1
38560: PUSH
38561: LD_INT 34
38563: PUSH
38564: LD_INT 99
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PPUSH
38571: CALL_OW 69
38575: PUSH
38576: FOR_IN
38577: IFFALSE 38797
// begin if not i in hackTanks then
38579: LD_VAR 0 1
38583: PUSH
38584: LD_EXP 113
38588: IN
38589: NOT
38590: IFFALSE 38673
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38592: LD_ADDR_EXP 113
38596: PUSH
38597: LD_EXP 113
38601: PPUSH
38602: LD_EXP 113
38606: PUSH
38607: LD_INT 1
38609: PLUS
38610: PPUSH
38611: LD_VAR 0 1
38615: PPUSH
38616: CALL_OW 1
38620: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38621: LD_ADDR_EXP 114
38625: PUSH
38626: LD_EXP 114
38630: PPUSH
38631: LD_EXP 114
38635: PUSH
38636: LD_INT 1
38638: PLUS
38639: PPUSH
38640: EMPTY
38641: PPUSH
38642: CALL_OW 1
38646: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38647: LD_ADDR_EXP 117
38651: PUSH
38652: LD_EXP 117
38656: PPUSH
38657: LD_EXP 117
38661: PUSH
38662: LD_INT 1
38664: PLUS
38665: PPUSH
38666: EMPTY
38667: PPUSH
38668: CALL_OW 1
38672: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38673: LD_VAR 0 1
38677: PPUSH
38678: CALL_OW 302
38682: NOT
38683: IFFALSE 38696
// begin HackUnlinkAll ( i ) ;
38685: LD_VAR 0 1
38689: PPUSH
38690: CALL 38802 0 1
// continue ;
38694: GO 38576
// end ; HackCheckCapturedStatus ( i ) ;
38696: LD_VAR 0 1
38700: PPUSH
38701: CALL 39245 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38705: LD_ADDR_VAR 0 2
38709: PUSH
38710: LD_INT 81
38712: PUSH
38713: LD_VAR 0 1
38717: PPUSH
38718: CALL_OW 255
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 33
38729: PUSH
38730: LD_INT 3
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 91
38739: PUSH
38740: LD_VAR 0 1
38744: PUSH
38745: LD_EXP 116
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 50
38757: PUSH
38758: EMPTY
38759: LIST
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: PPUSH
38767: CALL_OW 69
38771: ST_TO_ADDR
// if not tmp then
38772: LD_VAR 0 2
38776: NOT
38777: IFFALSE 38781
// continue ;
38779: GO 38576
// HackLink ( i , tmp ) ;
38781: LD_VAR 0 1
38785: PPUSH
38786: LD_VAR 0 2
38790: PPUSH
38791: CALL 38938 0 2
// end ;
38795: GO 38576
38797: POP
38798: POP
// end ;
38799: PPOPN 2
38801: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38802: LD_INT 0
38804: PPUSH
38805: PPUSH
38806: PPUSH
// if not hack in hackTanks then
38807: LD_VAR 0 1
38811: PUSH
38812: LD_EXP 113
38816: IN
38817: NOT
38818: IFFALSE 38822
// exit ;
38820: GO 38933
// index := GetElementIndex ( hackTanks , hack ) ;
38822: LD_ADDR_VAR 0 4
38826: PUSH
38827: LD_EXP 113
38831: PPUSH
38832: LD_VAR 0 1
38836: PPUSH
38837: CALL 46375 0 2
38841: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38842: LD_EXP 114
38846: PUSH
38847: LD_VAR 0 4
38851: ARRAY
38852: IFFALSE 38933
// begin for i in hackTanksCaptured [ index ] do
38854: LD_ADDR_VAR 0 3
38858: PUSH
38859: LD_EXP 114
38863: PUSH
38864: LD_VAR 0 4
38868: ARRAY
38869: PUSH
38870: FOR_IN
38871: IFFALSE 38897
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38873: LD_VAR 0 3
38877: PUSH
38878: LD_INT 1
38880: ARRAY
38881: PPUSH
38882: LD_VAR 0 3
38886: PUSH
38887: LD_INT 2
38889: ARRAY
38890: PPUSH
38891: CALL_OW 235
38895: GO 38870
38897: POP
38898: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38899: LD_ADDR_EXP 114
38903: PUSH
38904: LD_EXP 114
38908: PPUSH
38909: LD_VAR 0 4
38913: PPUSH
38914: EMPTY
38915: PPUSH
38916: CALL_OW 1
38920: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38921: LD_VAR 0 1
38925: PPUSH
38926: LD_INT 0
38928: PPUSH
38929: CALL_OW 505
// end ; end ;
38933: LD_VAR 0 2
38937: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38938: LD_INT 0
38940: PPUSH
38941: PPUSH
38942: PPUSH
// if not hack in hackTanks or not vehicles then
38943: LD_VAR 0 1
38947: PUSH
38948: LD_EXP 113
38952: IN
38953: NOT
38954: PUSH
38955: LD_VAR 0 2
38959: NOT
38960: OR
38961: IFFALSE 38965
// exit ;
38963: GO 39240
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38965: LD_ADDR_VAR 0 2
38969: PUSH
38970: LD_VAR 0 1
38974: PPUSH
38975: LD_VAR 0 2
38979: PPUSH
38980: LD_INT 1
38982: PPUSH
38983: LD_INT 1
38985: PPUSH
38986: CALL 47025 0 4
38990: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38991: LD_ADDR_VAR 0 5
38995: PUSH
38996: LD_EXP 113
39000: PPUSH
39001: LD_VAR 0 1
39005: PPUSH
39006: CALL 46375 0 2
39010: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39011: LD_EXP 114
39015: PUSH
39016: LD_VAR 0 5
39020: ARRAY
39021: PUSH
39022: LD_EXP 115
39026: LESS
39027: IFFALSE 39216
// begin for i := 1 to vehicles do
39029: LD_ADDR_VAR 0 4
39033: PUSH
39034: DOUBLE
39035: LD_INT 1
39037: DEC
39038: ST_TO_ADDR
39039: LD_VAR 0 2
39043: PUSH
39044: FOR_TO
39045: IFFALSE 39214
// begin if hackTanksCaptured [ index ] = hackLimit then
39047: LD_EXP 114
39051: PUSH
39052: LD_VAR 0 5
39056: ARRAY
39057: PUSH
39058: LD_EXP 115
39062: EQUAL
39063: IFFALSE 39067
// break ;
39065: GO 39214
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39067: LD_ADDR_EXP 117
39071: PUSH
39072: LD_EXP 117
39076: PPUSH
39077: LD_VAR 0 5
39081: PPUSH
39082: LD_EXP 117
39086: PUSH
39087: LD_VAR 0 5
39091: ARRAY
39092: PUSH
39093: LD_INT 1
39095: PLUS
39096: PPUSH
39097: CALL_OW 1
39101: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39102: LD_ADDR_EXP 114
39106: PUSH
39107: LD_EXP 114
39111: PPUSH
39112: LD_VAR 0 5
39116: PUSH
39117: LD_EXP 114
39121: PUSH
39122: LD_VAR 0 5
39126: ARRAY
39127: PUSH
39128: LD_INT 1
39130: PLUS
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PPUSH
39136: LD_VAR 0 2
39140: PUSH
39141: LD_VAR 0 4
39145: ARRAY
39146: PUSH
39147: LD_VAR 0 2
39151: PUSH
39152: LD_VAR 0 4
39156: ARRAY
39157: PPUSH
39158: CALL_OW 255
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PPUSH
39167: CALL 46590 0 3
39171: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39172: LD_VAR 0 2
39176: PUSH
39177: LD_VAR 0 4
39181: ARRAY
39182: PPUSH
39183: LD_VAR 0 1
39187: PPUSH
39188: CALL_OW 255
39192: PPUSH
39193: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39197: LD_VAR 0 2
39201: PUSH
39202: LD_VAR 0 4
39206: ARRAY
39207: PPUSH
39208: CALL_OW 141
// end ;
39212: GO 39044
39214: POP
39215: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39216: LD_VAR 0 1
39220: PPUSH
39221: LD_EXP 114
39225: PUSH
39226: LD_VAR 0 5
39230: ARRAY
39231: PUSH
39232: LD_INT 0
39234: PLUS
39235: PPUSH
39236: CALL_OW 505
// end ;
39240: LD_VAR 0 3
39244: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39245: LD_INT 0
39247: PPUSH
39248: PPUSH
39249: PPUSH
39250: PPUSH
// if not hack in hackTanks then
39251: LD_VAR 0 1
39255: PUSH
39256: LD_EXP 113
39260: IN
39261: NOT
39262: IFFALSE 39266
// exit ;
39264: GO 39506
// index := GetElementIndex ( hackTanks , hack ) ;
39266: LD_ADDR_VAR 0 4
39270: PUSH
39271: LD_EXP 113
39275: PPUSH
39276: LD_VAR 0 1
39280: PPUSH
39281: CALL 46375 0 2
39285: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39286: LD_ADDR_VAR 0 3
39290: PUSH
39291: DOUBLE
39292: LD_EXP 114
39296: PUSH
39297: LD_VAR 0 4
39301: ARRAY
39302: INC
39303: ST_TO_ADDR
39304: LD_INT 1
39306: PUSH
39307: FOR_DOWNTO
39308: IFFALSE 39480
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39310: LD_ADDR_VAR 0 5
39314: PUSH
39315: LD_EXP 114
39319: PUSH
39320: LD_VAR 0 4
39324: ARRAY
39325: PUSH
39326: LD_VAR 0 3
39330: ARRAY
39331: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39332: LD_VAR 0 5
39336: PUSH
39337: LD_INT 1
39339: ARRAY
39340: PPUSH
39341: CALL_OW 302
39345: NOT
39346: PUSH
39347: LD_VAR 0 5
39351: PUSH
39352: LD_INT 1
39354: ARRAY
39355: PPUSH
39356: CALL_OW 255
39360: PUSH
39361: LD_VAR 0 1
39365: PPUSH
39366: CALL_OW 255
39370: NONEQUAL
39371: OR
39372: IFFALSE 39478
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39374: LD_VAR 0 5
39378: PUSH
39379: LD_INT 1
39381: ARRAY
39382: PPUSH
39383: CALL_OW 305
39387: PUSH
39388: LD_VAR 0 5
39392: PUSH
39393: LD_INT 1
39395: ARRAY
39396: PPUSH
39397: CALL_OW 255
39401: PUSH
39402: LD_VAR 0 1
39406: PPUSH
39407: CALL_OW 255
39411: EQUAL
39412: AND
39413: IFFALSE 39437
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39415: LD_VAR 0 5
39419: PUSH
39420: LD_INT 1
39422: ARRAY
39423: PPUSH
39424: LD_VAR 0 5
39428: PUSH
39429: LD_INT 2
39431: ARRAY
39432: PPUSH
39433: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39437: LD_ADDR_EXP 114
39441: PUSH
39442: LD_EXP 114
39446: PPUSH
39447: LD_VAR 0 4
39451: PPUSH
39452: LD_EXP 114
39456: PUSH
39457: LD_VAR 0 4
39461: ARRAY
39462: PPUSH
39463: LD_VAR 0 3
39467: PPUSH
39468: CALL_OW 3
39472: PPUSH
39473: CALL_OW 1
39477: ST_TO_ADDR
// end ; end ;
39478: GO 39307
39480: POP
39481: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39482: LD_VAR 0 1
39486: PPUSH
39487: LD_EXP 114
39491: PUSH
39492: LD_VAR 0 4
39496: ARRAY
39497: PUSH
39498: LD_INT 0
39500: PLUS
39501: PPUSH
39502: CALL_OW 505
// end ;
39506: LD_VAR 0 2
39510: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39511: LD_INT 0
39513: PPUSH
39514: PPUSH
39515: PPUSH
39516: PPUSH
// if not hack in hackTanks then
39517: LD_VAR 0 1
39521: PUSH
39522: LD_EXP 113
39526: IN
39527: NOT
39528: IFFALSE 39532
// exit ;
39530: GO 39617
// index := GetElementIndex ( hackTanks , hack ) ;
39532: LD_ADDR_VAR 0 5
39536: PUSH
39537: LD_EXP 113
39541: PPUSH
39542: LD_VAR 0 1
39546: PPUSH
39547: CALL 46375 0 2
39551: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39552: LD_ADDR_VAR 0 4
39556: PUSH
39557: DOUBLE
39558: LD_INT 1
39560: DEC
39561: ST_TO_ADDR
39562: LD_EXP 114
39566: PUSH
39567: LD_VAR 0 5
39571: ARRAY
39572: PUSH
39573: FOR_TO
39574: IFFALSE 39615
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39576: LD_EXP 114
39580: PUSH
39581: LD_VAR 0 5
39585: ARRAY
39586: PUSH
39587: LD_VAR 0 4
39591: ARRAY
39592: PUSH
39593: LD_INT 1
39595: ARRAY
39596: PUSH
39597: LD_VAR 0 2
39601: EQUAL
39602: IFFALSE 39613
// KillUnit ( vehicle ) ;
39604: LD_VAR 0 2
39608: PPUSH
39609: CALL_OW 66
39613: GO 39573
39615: POP
39616: POP
// end ;
39617: LD_VAR 0 3
39621: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39622: LD_EXP 118
39626: NOT
39627: IFFALSE 39662
39629: GO 39631
39631: DISABLE
// begin initMiner := true ;
39632: LD_ADDR_EXP 118
39636: PUSH
39637: LD_INT 1
39639: ST_TO_ADDR
// minersList := [ ] ;
39640: LD_ADDR_EXP 119
39644: PUSH
39645: EMPTY
39646: ST_TO_ADDR
// minerMinesList := [ ] ;
39647: LD_ADDR_EXP 120
39651: PUSH
39652: EMPTY
39653: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39654: LD_ADDR_EXP 121
39658: PUSH
39659: LD_INT 5
39661: ST_TO_ADDR
// end ;
39662: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39663: LD_EXP 118
39667: PUSH
39668: LD_INT 34
39670: PUSH
39671: LD_INT 81
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PPUSH
39678: CALL_OW 69
39682: AND
39683: IFFALSE 40144
39685: GO 39687
39687: DISABLE
39688: LD_INT 0
39690: PPUSH
39691: PPUSH
39692: PPUSH
39693: PPUSH
// begin enable ;
39694: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39695: LD_ADDR_VAR 0 1
39699: PUSH
39700: LD_INT 34
39702: PUSH
39703: LD_INT 81
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PPUSH
39710: CALL_OW 69
39714: PUSH
39715: FOR_IN
39716: IFFALSE 39788
// begin if not i in minersList then
39718: LD_VAR 0 1
39722: PUSH
39723: LD_EXP 119
39727: IN
39728: NOT
39729: IFFALSE 39786
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39731: LD_ADDR_EXP 119
39735: PUSH
39736: LD_EXP 119
39740: PPUSH
39741: LD_EXP 119
39745: PUSH
39746: LD_INT 1
39748: PLUS
39749: PPUSH
39750: LD_VAR 0 1
39754: PPUSH
39755: CALL_OW 1
39759: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39760: LD_ADDR_EXP 120
39764: PUSH
39765: LD_EXP 120
39769: PPUSH
39770: LD_EXP 120
39774: PUSH
39775: LD_INT 1
39777: PLUS
39778: PPUSH
39779: EMPTY
39780: PPUSH
39781: CALL_OW 1
39785: ST_TO_ADDR
// end end ;
39786: GO 39715
39788: POP
39789: POP
// for i := minerMinesList downto 1 do
39790: LD_ADDR_VAR 0 1
39794: PUSH
39795: DOUBLE
39796: LD_EXP 120
39800: INC
39801: ST_TO_ADDR
39802: LD_INT 1
39804: PUSH
39805: FOR_DOWNTO
39806: IFFALSE 40142
// begin if IsLive ( minersList [ i ] ) then
39808: LD_EXP 119
39812: PUSH
39813: LD_VAR 0 1
39817: ARRAY
39818: PPUSH
39819: CALL_OW 300
39823: IFFALSE 39851
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39825: LD_EXP 119
39829: PUSH
39830: LD_VAR 0 1
39834: ARRAY
39835: PPUSH
39836: LD_EXP 120
39840: PUSH
39841: LD_VAR 0 1
39845: ARRAY
39846: PPUSH
39847: CALL_OW 505
// if not minerMinesList [ i ] then
39851: LD_EXP 120
39855: PUSH
39856: LD_VAR 0 1
39860: ARRAY
39861: NOT
39862: IFFALSE 39866
// continue ;
39864: GO 39805
// for j := minerMinesList [ i ] downto 1 do
39866: LD_ADDR_VAR 0 2
39870: PUSH
39871: DOUBLE
39872: LD_EXP 120
39876: PUSH
39877: LD_VAR 0 1
39881: ARRAY
39882: INC
39883: ST_TO_ADDR
39884: LD_INT 1
39886: PUSH
39887: FOR_DOWNTO
39888: IFFALSE 40138
// begin side := GetSide ( minersList [ i ] ) ;
39890: LD_ADDR_VAR 0 3
39894: PUSH
39895: LD_EXP 119
39899: PUSH
39900: LD_VAR 0 1
39904: ARRAY
39905: PPUSH
39906: CALL_OW 255
39910: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39911: LD_ADDR_VAR 0 4
39915: PUSH
39916: LD_EXP 120
39920: PUSH
39921: LD_VAR 0 1
39925: ARRAY
39926: PUSH
39927: LD_VAR 0 2
39931: ARRAY
39932: PUSH
39933: LD_INT 1
39935: ARRAY
39936: PPUSH
39937: LD_EXP 120
39941: PUSH
39942: LD_VAR 0 1
39946: ARRAY
39947: PUSH
39948: LD_VAR 0 2
39952: ARRAY
39953: PUSH
39954: LD_INT 2
39956: ARRAY
39957: PPUSH
39958: CALL_OW 428
39962: ST_TO_ADDR
// if not tmp then
39963: LD_VAR 0 4
39967: NOT
39968: IFFALSE 39972
// continue ;
39970: GO 39887
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39972: LD_VAR 0 4
39976: PUSH
39977: LD_INT 81
39979: PUSH
39980: LD_VAR 0 3
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PPUSH
39989: CALL_OW 69
39993: IN
39994: PUSH
39995: LD_EXP 120
39999: PUSH
40000: LD_VAR 0 1
40004: ARRAY
40005: PUSH
40006: LD_VAR 0 2
40010: ARRAY
40011: PUSH
40012: LD_INT 1
40014: ARRAY
40015: PPUSH
40016: LD_EXP 120
40020: PUSH
40021: LD_VAR 0 1
40025: ARRAY
40026: PUSH
40027: LD_VAR 0 2
40031: ARRAY
40032: PUSH
40033: LD_INT 2
40035: ARRAY
40036: PPUSH
40037: CALL_OW 458
40041: AND
40042: IFFALSE 40136
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40044: LD_EXP 120
40048: PUSH
40049: LD_VAR 0 1
40053: ARRAY
40054: PUSH
40055: LD_VAR 0 2
40059: ARRAY
40060: PUSH
40061: LD_INT 1
40063: ARRAY
40064: PPUSH
40065: LD_EXP 120
40069: PUSH
40070: LD_VAR 0 1
40074: ARRAY
40075: PUSH
40076: LD_VAR 0 2
40080: ARRAY
40081: PUSH
40082: LD_INT 2
40084: ARRAY
40085: PPUSH
40086: LD_VAR 0 3
40090: PPUSH
40091: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40095: LD_ADDR_EXP 120
40099: PUSH
40100: LD_EXP 120
40104: PPUSH
40105: LD_VAR 0 1
40109: PPUSH
40110: LD_EXP 120
40114: PUSH
40115: LD_VAR 0 1
40119: ARRAY
40120: PPUSH
40121: LD_VAR 0 2
40125: PPUSH
40126: CALL_OW 3
40130: PPUSH
40131: CALL_OW 1
40135: ST_TO_ADDR
// end ; end ;
40136: GO 39887
40138: POP
40139: POP
// end ;
40140: GO 39805
40142: POP
40143: POP
// end ;
40144: PPOPN 4
40146: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40147: LD_INT 0
40149: PPUSH
40150: PPUSH
// result := false ;
40151: LD_ADDR_VAR 0 4
40155: PUSH
40156: LD_INT 0
40158: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40159: LD_VAR 0 1
40163: PPUSH
40164: CALL_OW 264
40168: PUSH
40169: LD_INT 81
40171: EQUAL
40172: NOT
40173: IFFALSE 40177
// exit ;
40175: GO 40417
// index := GetElementIndex ( minersList , unit ) ;
40177: LD_ADDR_VAR 0 5
40181: PUSH
40182: LD_EXP 119
40186: PPUSH
40187: LD_VAR 0 1
40191: PPUSH
40192: CALL 46375 0 2
40196: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40197: LD_EXP 120
40201: PUSH
40202: LD_VAR 0 5
40206: ARRAY
40207: PUSH
40208: LD_EXP 121
40212: GREATEREQUAL
40213: IFFALSE 40217
// exit ;
40215: GO 40417
// ComMoveXY ( unit , x , y ) ;
40217: LD_VAR 0 1
40221: PPUSH
40222: LD_VAR 0 2
40226: PPUSH
40227: LD_VAR 0 3
40231: PPUSH
40232: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40236: LD_INT 35
40238: PPUSH
40239: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40243: LD_VAR 0 1
40247: PPUSH
40248: LD_VAR 0 2
40252: PPUSH
40253: LD_VAR 0 3
40257: PPUSH
40258: CALL 77759 0 3
40262: NOT
40263: PUSH
40264: LD_VAR 0 1
40268: PPUSH
40269: CALL_OW 314
40273: AND
40274: IFFALSE 40278
// exit ;
40276: GO 40417
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40278: LD_VAR 0 2
40282: PPUSH
40283: LD_VAR 0 3
40287: PPUSH
40288: CALL_OW 428
40292: PUSH
40293: LD_VAR 0 1
40297: EQUAL
40298: PUSH
40299: LD_VAR 0 1
40303: PPUSH
40304: CALL_OW 314
40308: NOT
40309: AND
40310: IFFALSE 40236
// PlaySoundXY ( x , y , PlantMine ) ;
40312: LD_VAR 0 2
40316: PPUSH
40317: LD_VAR 0 3
40321: PPUSH
40322: LD_STRING PlantMine
40324: PPUSH
40325: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40329: LD_VAR 0 2
40333: PPUSH
40334: LD_VAR 0 3
40338: PPUSH
40339: LD_VAR 0 1
40343: PPUSH
40344: CALL_OW 255
40348: PPUSH
40349: LD_INT 0
40351: PPUSH
40352: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40356: LD_ADDR_EXP 120
40360: PUSH
40361: LD_EXP 120
40365: PPUSH
40366: LD_VAR 0 5
40370: PUSH
40371: LD_EXP 120
40375: PUSH
40376: LD_VAR 0 5
40380: ARRAY
40381: PUSH
40382: LD_INT 1
40384: PLUS
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PPUSH
40390: LD_VAR 0 2
40394: PUSH
40395: LD_VAR 0 3
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PPUSH
40404: CALL 46590 0 3
40408: ST_TO_ADDR
// result := true ;
40409: LD_ADDR_VAR 0 4
40413: PUSH
40414: LD_INT 1
40416: ST_TO_ADDR
// end ;
40417: LD_VAR 0 4
40421: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40422: LD_INT 0
40424: PPUSH
40425: PPUSH
40426: PPUSH
// if not unit in minersList then
40427: LD_VAR 0 1
40431: PUSH
40432: LD_EXP 119
40436: IN
40437: NOT
40438: IFFALSE 40442
// exit ;
40440: GO 40834
// index := GetElementIndex ( minersList , unit ) ;
40442: LD_ADDR_VAR 0 6
40446: PUSH
40447: LD_EXP 119
40451: PPUSH
40452: LD_VAR 0 1
40456: PPUSH
40457: CALL 46375 0 2
40461: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40462: LD_ADDR_VAR 0 5
40466: PUSH
40467: DOUBLE
40468: LD_EXP 120
40472: PUSH
40473: LD_VAR 0 6
40477: ARRAY
40478: INC
40479: ST_TO_ADDR
40480: LD_INT 1
40482: PUSH
40483: FOR_DOWNTO
40484: IFFALSE 40645
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40486: LD_EXP 120
40490: PUSH
40491: LD_VAR 0 6
40495: ARRAY
40496: PUSH
40497: LD_VAR 0 5
40501: ARRAY
40502: PUSH
40503: LD_INT 1
40505: ARRAY
40506: PUSH
40507: LD_VAR 0 2
40511: EQUAL
40512: PUSH
40513: LD_EXP 120
40517: PUSH
40518: LD_VAR 0 6
40522: ARRAY
40523: PUSH
40524: LD_VAR 0 5
40528: ARRAY
40529: PUSH
40530: LD_INT 2
40532: ARRAY
40533: PUSH
40534: LD_VAR 0 3
40538: EQUAL
40539: AND
40540: IFFALSE 40643
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40542: LD_EXP 120
40546: PUSH
40547: LD_VAR 0 6
40551: ARRAY
40552: PUSH
40553: LD_VAR 0 5
40557: ARRAY
40558: PUSH
40559: LD_INT 1
40561: ARRAY
40562: PPUSH
40563: LD_EXP 120
40567: PUSH
40568: LD_VAR 0 6
40572: ARRAY
40573: PUSH
40574: LD_VAR 0 5
40578: ARRAY
40579: PUSH
40580: LD_INT 2
40582: ARRAY
40583: PPUSH
40584: LD_VAR 0 1
40588: PPUSH
40589: CALL_OW 255
40593: PPUSH
40594: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40598: LD_ADDR_EXP 120
40602: PUSH
40603: LD_EXP 120
40607: PPUSH
40608: LD_VAR 0 6
40612: PPUSH
40613: LD_EXP 120
40617: PUSH
40618: LD_VAR 0 6
40622: ARRAY
40623: PPUSH
40624: LD_VAR 0 5
40628: PPUSH
40629: CALL_OW 3
40633: PPUSH
40634: CALL_OW 1
40638: ST_TO_ADDR
// exit ;
40639: POP
40640: POP
40641: GO 40834
// end ; end ;
40643: GO 40483
40645: POP
40646: POP
// for i := minerMinesList [ index ] downto 1 do
40647: LD_ADDR_VAR 0 5
40651: PUSH
40652: DOUBLE
40653: LD_EXP 120
40657: PUSH
40658: LD_VAR 0 6
40662: ARRAY
40663: INC
40664: ST_TO_ADDR
40665: LD_INT 1
40667: PUSH
40668: FOR_DOWNTO
40669: IFFALSE 40832
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40671: LD_EXP 120
40675: PUSH
40676: LD_VAR 0 6
40680: ARRAY
40681: PUSH
40682: LD_VAR 0 5
40686: ARRAY
40687: PUSH
40688: LD_INT 1
40690: ARRAY
40691: PPUSH
40692: LD_EXP 120
40696: PUSH
40697: LD_VAR 0 6
40701: ARRAY
40702: PUSH
40703: LD_VAR 0 5
40707: ARRAY
40708: PUSH
40709: LD_INT 2
40711: ARRAY
40712: PPUSH
40713: LD_VAR 0 2
40717: PPUSH
40718: LD_VAR 0 3
40722: PPUSH
40723: CALL_OW 298
40727: PUSH
40728: LD_INT 6
40730: LESS
40731: IFFALSE 40830
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40733: LD_EXP 120
40737: PUSH
40738: LD_VAR 0 6
40742: ARRAY
40743: PUSH
40744: LD_VAR 0 5
40748: ARRAY
40749: PUSH
40750: LD_INT 1
40752: ARRAY
40753: PPUSH
40754: LD_EXP 120
40758: PUSH
40759: LD_VAR 0 6
40763: ARRAY
40764: PUSH
40765: LD_VAR 0 5
40769: ARRAY
40770: PUSH
40771: LD_INT 2
40773: ARRAY
40774: PPUSH
40775: LD_VAR 0 1
40779: PPUSH
40780: CALL_OW 255
40784: PPUSH
40785: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40789: LD_ADDR_EXP 120
40793: PUSH
40794: LD_EXP 120
40798: PPUSH
40799: LD_VAR 0 6
40803: PPUSH
40804: LD_EXP 120
40808: PUSH
40809: LD_VAR 0 6
40813: ARRAY
40814: PPUSH
40815: LD_VAR 0 5
40819: PPUSH
40820: CALL_OW 3
40824: PPUSH
40825: CALL_OW 1
40829: ST_TO_ADDR
// end ; end ;
40830: GO 40668
40832: POP
40833: POP
// end ;
40834: LD_VAR 0 4
40838: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40839: LD_INT 0
40841: PPUSH
40842: PPUSH
40843: PPUSH
40844: PPUSH
40845: PPUSH
40846: PPUSH
40847: PPUSH
40848: PPUSH
40849: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40850: LD_VAR 0 1
40854: PPUSH
40855: CALL_OW 264
40859: PUSH
40860: LD_INT 81
40862: EQUAL
40863: NOT
40864: PUSH
40865: LD_VAR 0 1
40869: PUSH
40870: LD_EXP 119
40874: IN
40875: NOT
40876: OR
40877: IFFALSE 40881
// exit ;
40879: GO 41203
// index := GetElementIndex ( minersList , unit ) ;
40881: LD_ADDR_VAR 0 6
40885: PUSH
40886: LD_EXP 119
40890: PPUSH
40891: LD_VAR 0 1
40895: PPUSH
40896: CALL 46375 0 2
40900: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40901: LD_ADDR_VAR 0 8
40905: PUSH
40906: LD_EXP 121
40910: PUSH
40911: LD_EXP 120
40915: PUSH
40916: LD_VAR 0 6
40920: ARRAY
40921: MINUS
40922: ST_TO_ADDR
// if not minesFreeAmount then
40923: LD_VAR 0 8
40927: NOT
40928: IFFALSE 40932
// exit ;
40930: GO 41203
// tmp := [ ] ;
40932: LD_ADDR_VAR 0 7
40936: PUSH
40937: EMPTY
40938: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40939: LD_ADDR_VAR 0 5
40943: PUSH
40944: DOUBLE
40945: LD_INT 1
40947: DEC
40948: ST_TO_ADDR
40949: LD_VAR 0 8
40953: PUSH
40954: FOR_TO
40955: IFFALSE 41150
// begin _d := rand ( 0 , 5 ) ;
40957: LD_ADDR_VAR 0 11
40961: PUSH
40962: LD_INT 0
40964: PPUSH
40965: LD_INT 5
40967: PPUSH
40968: CALL_OW 12
40972: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40973: LD_ADDR_VAR 0 12
40977: PUSH
40978: LD_INT 2
40980: PPUSH
40981: LD_INT 6
40983: PPUSH
40984: CALL_OW 12
40988: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40989: LD_ADDR_VAR 0 9
40993: PUSH
40994: LD_VAR 0 2
40998: PPUSH
40999: LD_VAR 0 11
41003: PPUSH
41004: LD_VAR 0 12
41008: PPUSH
41009: CALL_OW 272
41013: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41014: LD_ADDR_VAR 0 10
41018: PUSH
41019: LD_VAR 0 3
41023: PPUSH
41024: LD_VAR 0 11
41028: PPUSH
41029: LD_VAR 0 12
41033: PPUSH
41034: CALL_OW 273
41038: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41039: LD_VAR 0 9
41043: PPUSH
41044: LD_VAR 0 10
41048: PPUSH
41049: CALL_OW 488
41053: PUSH
41054: LD_VAR 0 9
41058: PUSH
41059: LD_VAR 0 10
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_VAR 0 7
41072: IN
41073: NOT
41074: AND
41075: PUSH
41076: LD_VAR 0 9
41080: PPUSH
41081: LD_VAR 0 10
41085: PPUSH
41086: CALL_OW 458
41090: NOT
41091: AND
41092: IFFALSE 41134
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41094: LD_ADDR_VAR 0 7
41098: PUSH
41099: LD_VAR 0 7
41103: PPUSH
41104: LD_VAR 0 7
41108: PUSH
41109: LD_INT 1
41111: PLUS
41112: PPUSH
41113: LD_VAR 0 9
41117: PUSH
41118: LD_VAR 0 10
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PPUSH
41127: CALL_OW 1
41131: ST_TO_ADDR
41132: GO 41148
// i := i - 1 ;
41134: LD_ADDR_VAR 0 5
41138: PUSH
41139: LD_VAR 0 5
41143: PUSH
41144: LD_INT 1
41146: MINUS
41147: ST_TO_ADDR
// end ;
41148: GO 40954
41150: POP
41151: POP
// for i in tmp do
41152: LD_ADDR_VAR 0 5
41156: PUSH
41157: LD_VAR 0 7
41161: PUSH
41162: FOR_IN
41163: IFFALSE 41201
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41165: LD_VAR 0 1
41169: PPUSH
41170: LD_VAR 0 5
41174: PUSH
41175: LD_INT 1
41177: ARRAY
41178: PPUSH
41179: LD_VAR 0 5
41183: PUSH
41184: LD_INT 2
41186: ARRAY
41187: PPUSH
41188: CALL 40147 0 3
41192: NOT
41193: IFFALSE 41199
// exit ;
41195: POP
41196: POP
41197: GO 41203
41199: GO 41162
41201: POP
41202: POP
// end ;
41203: LD_VAR 0 4
41207: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
41208: LD_INT 0
41210: PPUSH
41211: PPUSH
41212: PPUSH
41213: PPUSH
41214: PPUSH
41215: PPUSH
41216: PPUSH
// if not GetClass ( unit ) = class_sniper then
41217: LD_VAR 0 1
41221: PPUSH
41222: CALL_OW 257
41226: PUSH
41227: LD_INT 5
41229: EQUAL
41230: NOT
41231: IFFALSE 41235
// exit ;
41233: GO 41623
// dist := 8 ;
41235: LD_ADDR_VAR 0 5
41239: PUSH
41240: LD_INT 8
41242: ST_TO_ADDR
// viewRange := 12 ;
41243: LD_ADDR_VAR 0 7
41247: PUSH
41248: LD_INT 12
41250: ST_TO_ADDR
// side := GetSide ( unit ) ;
41251: LD_ADDR_VAR 0 6
41255: PUSH
41256: LD_VAR 0 1
41260: PPUSH
41261: CALL_OW 255
41265: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41266: LD_INT 61
41268: PPUSH
41269: LD_VAR 0 6
41273: PPUSH
41274: CALL_OW 321
41278: PUSH
41279: LD_INT 2
41281: EQUAL
41282: IFFALSE 41292
// viewRange := 16 ;
41284: LD_ADDR_VAR 0 7
41288: PUSH
41289: LD_INT 16
41291: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41292: LD_VAR 0 1
41296: PPUSH
41297: LD_VAR 0 2
41301: PPUSH
41302: LD_VAR 0 3
41306: PPUSH
41307: CALL_OW 297
41311: PUSH
41312: LD_VAR 0 5
41316: GREATER
41317: IFFALSE 41396
// begin ComMoveXY ( unit , x , y ) ;
41319: LD_VAR 0 1
41323: PPUSH
41324: LD_VAR 0 2
41328: PPUSH
41329: LD_VAR 0 3
41333: PPUSH
41334: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41338: LD_INT 35
41340: PPUSH
41341: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41345: LD_VAR 0 1
41349: PPUSH
41350: LD_VAR 0 2
41354: PPUSH
41355: LD_VAR 0 3
41359: PPUSH
41360: CALL 77759 0 3
41364: NOT
41365: IFFALSE 41369
// exit ;
41367: GO 41623
// until GetDistUnitXY ( unit , x , y ) < dist ;
41369: LD_VAR 0 1
41373: PPUSH
41374: LD_VAR 0 2
41378: PPUSH
41379: LD_VAR 0 3
41383: PPUSH
41384: CALL_OW 297
41388: PUSH
41389: LD_VAR 0 5
41393: LESS
41394: IFFALSE 41338
// end ; ComTurnXY ( unit , x , y ) ;
41396: LD_VAR 0 1
41400: PPUSH
41401: LD_VAR 0 2
41405: PPUSH
41406: LD_VAR 0 3
41410: PPUSH
41411: CALL_OW 118
// wait ( 5 ) ;
41415: LD_INT 5
41417: PPUSH
41418: CALL_OW 67
// _d := GetDir ( unit ) ;
41422: LD_ADDR_VAR 0 10
41426: PUSH
41427: LD_VAR 0 1
41431: PPUSH
41432: CALL_OW 254
41436: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41437: LD_ADDR_VAR 0 8
41441: PUSH
41442: LD_VAR 0 1
41446: PPUSH
41447: CALL_OW 250
41451: PPUSH
41452: LD_VAR 0 10
41456: PPUSH
41457: LD_VAR 0 5
41461: PPUSH
41462: CALL_OW 272
41466: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41467: LD_ADDR_VAR 0 9
41471: PUSH
41472: LD_VAR 0 1
41476: PPUSH
41477: CALL_OW 251
41481: PPUSH
41482: LD_VAR 0 10
41486: PPUSH
41487: LD_VAR 0 5
41491: PPUSH
41492: CALL_OW 273
41496: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41497: LD_VAR 0 8
41501: PPUSH
41502: LD_VAR 0 9
41506: PPUSH
41507: CALL_OW 488
41511: NOT
41512: IFFALSE 41516
// exit ;
41514: GO 41623
// ComAnimCustom ( unit , 1 ) ;
41516: LD_VAR 0 1
41520: PPUSH
41521: LD_INT 1
41523: PPUSH
41524: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41528: LD_VAR 0 8
41532: PPUSH
41533: LD_VAR 0 9
41537: PPUSH
41538: LD_VAR 0 6
41542: PPUSH
41543: LD_VAR 0 7
41547: PPUSH
41548: CALL_OW 330
// repeat wait ( 1 ) ;
41552: LD_INT 1
41554: PPUSH
41555: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41559: LD_VAR 0 1
41563: PPUSH
41564: CALL_OW 316
41568: PUSH
41569: LD_VAR 0 1
41573: PPUSH
41574: CALL_OW 314
41578: OR
41579: PUSH
41580: LD_VAR 0 1
41584: PPUSH
41585: CALL_OW 302
41589: NOT
41590: OR
41591: PUSH
41592: LD_VAR 0 1
41596: PPUSH
41597: CALL_OW 301
41601: OR
41602: IFFALSE 41552
// RemoveSeeing ( _x , _y , side ) ;
41604: LD_VAR 0 8
41608: PPUSH
41609: LD_VAR 0 9
41613: PPUSH
41614: LD_VAR 0 6
41618: PPUSH
41619: CALL_OW 331
// end ; end_of_file
41623: LD_VAR 0 4
41627: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41628: LD_INT 0
41630: PPUSH
41631: PPUSH
// if exist_mode then
41632: LD_VAR 0 2
41636: IFFALSE 41661
// unit := CreateCharacter ( prefix & ident ) else
41638: LD_ADDR_VAR 0 5
41642: PUSH
41643: LD_VAR 0 3
41647: PUSH
41648: LD_VAR 0 1
41652: STR
41653: PPUSH
41654: CALL_OW 34
41658: ST_TO_ADDR
41659: GO 41676
// unit := NewCharacter ( ident ) ;
41661: LD_ADDR_VAR 0 5
41665: PUSH
41666: LD_VAR 0 1
41670: PPUSH
41671: CALL_OW 25
41675: ST_TO_ADDR
// result := unit ;
41676: LD_ADDR_VAR 0 4
41680: PUSH
41681: LD_VAR 0 5
41685: ST_TO_ADDR
// end ;
41686: LD_VAR 0 4
41690: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41691: LD_INT 0
41693: PPUSH
41694: PPUSH
// if not side or not nation then
41695: LD_VAR 0 1
41699: NOT
41700: PUSH
41701: LD_VAR 0 2
41705: NOT
41706: OR
41707: IFFALSE 41711
// exit ;
41709: GO 42479
// case nation of nation_american :
41711: LD_VAR 0 2
41715: PUSH
41716: LD_INT 1
41718: DOUBLE
41719: EQUAL
41720: IFTRUE 41724
41722: GO 41938
41724: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41725: LD_ADDR_VAR 0 4
41729: PUSH
41730: LD_INT 35
41732: PUSH
41733: LD_INT 45
41735: PUSH
41736: LD_INT 46
41738: PUSH
41739: LD_INT 47
41741: PUSH
41742: LD_INT 82
41744: PUSH
41745: LD_INT 83
41747: PUSH
41748: LD_INT 84
41750: PUSH
41751: LD_INT 85
41753: PUSH
41754: LD_INT 86
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: LD_INT 6
41765: PUSH
41766: LD_INT 15
41768: PUSH
41769: LD_INT 16
41771: PUSH
41772: LD_INT 7
41774: PUSH
41775: LD_INT 12
41777: PUSH
41778: LD_INT 13
41780: PUSH
41781: LD_INT 10
41783: PUSH
41784: LD_INT 14
41786: PUSH
41787: LD_INT 20
41789: PUSH
41790: LD_INT 21
41792: PUSH
41793: LD_INT 22
41795: PUSH
41796: LD_INT 25
41798: PUSH
41799: LD_INT 32
41801: PUSH
41802: LD_INT 27
41804: PUSH
41805: LD_INT 36
41807: PUSH
41808: LD_INT 69
41810: PUSH
41811: LD_INT 39
41813: PUSH
41814: LD_INT 34
41816: PUSH
41817: LD_INT 40
41819: PUSH
41820: LD_INT 48
41822: PUSH
41823: LD_INT 49
41825: PUSH
41826: LD_INT 50
41828: PUSH
41829: LD_INT 51
41831: PUSH
41832: LD_INT 52
41834: PUSH
41835: LD_INT 53
41837: PUSH
41838: LD_INT 54
41840: PUSH
41841: LD_INT 55
41843: PUSH
41844: LD_INT 56
41846: PUSH
41847: LD_INT 57
41849: PUSH
41850: LD_INT 58
41852: PUSH
41853: LD_INT 59
41855: PUSH
41856: LD_INT 60
41858: PUSH
41859: LD_INT 61
41861: PUSH
41862: LD_INT 62
41864: PUSH
41865: LD_INT 80
41867: PUSH
41868: LD_INT 82
41870: PUSH
41871: LD_INT 83
41873: PUSH
41874: LD_INT 84
41876: PUSH
41877: LD_INT 85
41879: PUSH
41880: LD_INT 86
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: ST_TO_ADDR
41936: GO 42403
41938: LD_INT 2
41940: DOUBLE
41941: EQUAL
41942: IFTRUE 41946
41944: GO 42172
41946: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41947: LD_ADDR_VAR 0 4
41951: PUSH
41952: LD_INT 35
41954: PUSH
41955: LD_INT 45
41957: PUSH
41958: LD_INT 46
41960: PUSH
41961: LD_INT 47
41963: PUSH
41964: LD_INT 82
41966: PUSH
41967: LD_INT 83
41969: PUSH
41970: LD_INT 84
41972: PUSH
41973: LD_INT 85
41975: PUSH
41976: LD_INT 87
41978: PUSH
41979: LD_INT 70
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 11
41987: PUSH
41988: LD_INT 3
41990: PUSH
41991: LD_INT 4
41993: PUSH
41994: LD_INT 5
41996: PUSH
41997: LD_INT 6
41999: PUSH
42000: LD_INT 15
42002: PUSH
42003: LD_INT 18
42005: PUSH
42006: LD_INT 7
42008: PUSH
42009: LD_INT 17
42011: PUSH
42012: LD_INT 8
42014: PUSH
42015: LD_INT 20
42017: PUSH
42018: LD_INT 21
42020: PUSH
42021: LD_INT 22
42023: PUSH
42024: LD_INT 72
42026: PUSH
42027: LD_INT 26
42029: PUSH
42030: LD_INT 69
42032: PUSH
42033: LD_INT 39
42035: PUSH
42036: LD_INT 40
42038: PUSH
42039: LD_INT 41
42041: PUSH
42042: LD_INT 42
42044: PUSH
42045: LD_INT 43
42047: PUSH
42048: LD_INT 48
42050: PUSH
42051: LD_INT 49
42053: PUSH
42054: LD_INT 50
42056: PUSH
42057: LD_INT 51
42059: PUSH
42060: LD_INT 52
42062: PUSH
42063: LD_INT 53
42065: PUSH
42066: LD_INT 54
42068: PUSH
42069: LD_INT 55
42071: PUSH
42072: LD_INT 56
42074: PUSH
42075: LD_INT 60
42077: PUSH
42078: LD_INT 61
42080: PUSH
42081: LD_INT 62
42083: PUSH
42084: LD_INT 66
42086: PUSH
42087: LD_INT 67
42089: PUSH
42090: LD_INT 68
42092: PUSH
42093: LD_INT 81
42095: PUSH
42096: LD_INT 82
42098: PUSH
42099: LD_INT 83
42101: PUSH
42102: LD_INT 84
42104: PUSH
42105: LD_INT 85
42107: PUSH
42108: LD_INT 87
42110: PUSH
42111: LD_INT 88
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: ST_TO_ADDR
42170: GO 42403
42172: LD_INT 3
42174: DOUBLE
42175: EQUAL
42176: IFTRUE 42180
42178: GO 42402
42180: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42181: LD_ADDR_VAR 0 4
42185: PUSH
42186: LD_INT 46
42188: PUSH
42189: LD_INT 47
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: LD_INT 2
42197: PUSH
42198: LD_INT 82
42200: PUSH
42201: LD_INT 83
42203: PUSH
42204: LD_INT 84
42206: PUSH
42207: LD_INT 85
42209: PUSH
42210: LD_INT 86
42212: PUSH
42213: LD_INT 11
42215: PUSH
42216: LD_INT 9
42218: PUSH
42219: LD_INT 20
42221: PUSH
42222: LD_INT 19
42224: PUSH
42225: LD_INT 21
42227: PUSH
42228: LD_INT 24
42230: PUSH
42231: LD_INT 22
42233: PUSH
42234: LD_INT 25
42236: PUSH
42237: LD_INT 28
42239: PUSH
42240: LD_INT 29
42242: PUSH
42243: LD_INT 30
42245: PUSH
42246: LD_INT 31
42248: PUSH
42249: LD_INT 37
42251: PUSH
42252: LD_INT 38
42254: PUSH
42255: LD_INT 32
42257: PUSH
42258: LD_INT 27
42260: PUSH
42261: LD_INT 33
42263: PUSH
42264: LD_INT 69
42266: PUSH
42267: LD_INT 39
42269: PUSH
42270: LD_INT 34
42272: PUSH
42273: LD_INT 40
42275: PUSH
42276: LD_INT 71
42278: PUSH
42279: LD_INT 23
42281: PUSH
42282: LD_INT 44
42284: PUSH
42285: LD_INT 48
42287: PUSH
42288: LD_INT 49
42290: PUSH
42291: LD_INT 50
42293: PUSH
42294: LD_INT 51
42296: PUSH
42297: LD_INT 52
42299: PUSH
42300: LD_INT 53
42302: PUSH
42303: LD_INT 54
42305: PUSH
42306: LD_INT 55
42308: PUSH
42309: LD_INT 56
42311: PUSH
42312: LD_INT 57
42314: PUSH
42315: LD_INT 58
42317: PUSH
42318: LD_INT 59
42320: PUSH
42321: LD_INT 63
42323: PUSH
42324: LD_INT 64
42326: PUSH
42327: LD_INT 65
42329: PUSH
42330: LD_INT 82
42332: PUSH
42333: LD_INT 83
42335: PUSH
42336: LD_INT 84
42338: PUSH
42339: LD_INT 85
42341: PUSH
42342: LD_INT 86
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: ST_TO_ADDR
42400: GO 42403
42402: POP
// if state > - 1 and state < 3 then
42403: LD_VAR 0 3
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: GREATER
42412: PUSH
42413: LD_VAR 0 3
42417: PUSH
42418: LD_INT 3
42420: LESS
42421: AND
42422: IFFALSE 42479
// for i in result do
42424: LD_ADDR_VAR 0 5
42428: PUSH
42429: LD_VAR 0 4
42433: PUSH
42434: FOR_IN
42435: IFFALSE 42477
// if GetTech ( i , side ) <> state then
42437: LD_VAR 0 5
42441: PPUSH
42442: LD_VAR 0 1
42446: PPUSH
42447: CALL_OW 321
42451: PUSH
42452: LD_VAR 0 3
42456: NONEQUAL
42457: IFFALSE 42475
// result := result diff i ;
42459: LD_ADDR_VAR 0 4
42463: PUSH
42464: LD_VAR 0 4
42468: PUSH
42469: LD_VAR 0 5
42473: DIFF
42474: ST_TO_ADDR
42475: GO 42434
42477: POP
42478: POP
// end ;
42479: LD_VAR 0 4
42483: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42484: LD_INT 0
42486: PPUSH
42487: PPUSH
42488: PPUSH
// result := true ;
42489: LD_ADDR_VAR 0 3
42493: PUSH
42494: LD_INT 1
42496: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42497: LD_ADDR_VAR 0 5
42501: PUSH
42502: LD_VAR 0 2
42506: PPUSH
42507: CALL_OW 480
42511: ST_TO_ADDR
// if not tmp then
42512: LD_VAR 0 5
42516: NOT
42517: IFFALSE 42521
// exit ;
42519: GO 42570
// for i in tmp do
42521: LD_ADDR_VAR 0 4
42525: PUSH
42526: LD_VAR 0 5
42530: PUSH
42531: FOR_IN
42532: IFFALSE 42568
// if GetTech ( i , side ) <> state_researched then
42534: LD_VAR 0 4
42538: PPUSH
42539: LD_VAR 0 1
42543: PPUSH
42544: CALL_OW 321
42548: PUSH
42549: LD_INT 2
42551: NONEQUAL
42552: IFFALSE 42566
// begin result := false ;
42554: LD_ADDR_VAR 0 3
42558: PUSH
42559: LD_INT 0
42561: ST_TO_ADDR
// exit ;
42562: POP
42563: POP
42564: GO 42570
// end ;
42566: GO 42531
42568: POP
42569: POP
// end ;
42570: LD_VAR 0 3
42574: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42575: LD_INT 0
42577: PPUSH
42578: PPUSH
42579: PPUSH
42580: PPUSH
42581: PPUSH
42582: PPUSH
42583: PPUSH
42584: PPUSH
42585: PPUSH
42586: PPUSH
42587: PPUSH
42588: PPUSH
42589: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42590: LD_VAR 0 1
42594: NOT
42595: PUSH
42596: LD_VAR 0 1
42600: PPUSH
42601: CALL_OW 257
42605: PUSH
42606: LD_INT 9
42608: NONEQUAL
42609: OR
42610: IFFALSE 42614
// exit ;
42612: GO 43187
// side := GetSide ( unit ) ;
42614: LD_ADDR_VAR 0 9
42618: PUSH
42619: LD_VAR 0 1
42623: PPUSH
42624: CALL_OW 255
42628: ST_TO_ADDR
// tech_space := tech_spacanom ;
42629: LD_ADDR_VAR 0 12
42633: PUSH
42634: LD_INT 29
42636: ST_TO_ADDR
// tech_time := tech_taurad ;
42637: LD_ADDR_VAR 0 13
42641: PUSH
42642: LD_INT 28
42644: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42645: LD_ADDR_VAR 0 11
42649: PUSH
42650: LD_VAR 0 1
42654: PPUSH
42655: CALL_OW 310
42659: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42660: LD_VAR 0 11
42664: PPUSH
42665: CALL_OW 247
42669: PUSH
42670: LD_INT 2
42672: EQUAL
42673: IFFALSE 42677
// exit ;
42675: GO 43187
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42677: LD_ADDR_VAR 0 8
42681: PUSH
42682: LD_INT 81
42684: PUSH
42685: LD_VAR 0 9
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 3
42696: PUSH
42697: LD_INT 21
42699: PUSH
42700: LD_INT 3
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PPUSH
42715: CALL_OW 69
42719: ST_TO_ADDR
// if not tmp then
42720: LD_VAR 0 8
42724: NOT
42725: IFFALSE 42729
// exit ;
42727: GO 43187
// if in_unit then
42729: LD_VAR 0 11
42733: IFFALSE 42757
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42735: LD_ADDR_VAR 0 10
42739: PUSH
42740: LD_VAR 0 8
42744: PPUSH
42745: LD_VAR 0 11
42749: PPUSH
42750: CALL_OW 74
42754: ST_TO_ADDR
42755: GO 42777
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42757: LD_ADDR_VAR 0 10
42761: PUSH
42762: LD_VAR 0 8
42766: PPUSH
42767: LD_VAR 0 1
42771: PPUSH
42772: CALL_OW 74
42776: ST_TO_ADDR
// if not enemy then
42777: LD_VAR 0 10
42781: NOT
42782: IFFALSE 42786
// exit ;
42784: GO 43187
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42786: LD_VAR 0 11
42790: PUSH
42791: LD_VAR 0 11
42795: PPUSH
42796: LD_VAR 0 10
42800: PPUSH
42801: CALL_OW 296
42805: PUSH
42806: LD_INT 13
42808: GREATER
42809: AND
42810: PUSH
42811: LD_VAR 0 1
42815: PPUSH
42816: LD_VAR 0 10
42820: PPUSH
42821: CALL_OW 296
42825: PUSH
42826: LD_INT 12
42828: GREATER
42829: OR
42830: IFFALSE 42834
// exit ;
42832: GO 43187
// missile := [ 1 ] ;
42834: LD_ADDR_VAR 0 14
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: EMPTY
42843: LIST
42844: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42845: LD_VAR 0 9
42849: PPUSH
42850: LD_VAR 0 12
42854: PPUSH
42855: CALL_OW 325
42859: IFFALSE 42888
// missile := Replace ( missile , missile + 1 , 2 ) ;
42861: LD_ADDR_VAR 0 14
42865: PUSH
42866: LD_VAR 0 14
42870: PPUSH
42871: LD_VAR 0 14
42875: PUSH
42876: LD_INT 1
42878: PLUS
42879: PPUSH
42880: LD_INT 2
42882: PPUSH
42883: CALL_OW 1
42887: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42888: LD_VAR 0 9
42892: PPUSH
42893: LD_VAR 0 13
42897: PPUSH
42898: CALL_OW 325
42902: PUSH
42903: LD_VAR 0 10
42907: PPUSH
42908: CALL_OW 255
42912: PPUSH
42913: LD_VAR 0 13
42917: PPUSH
42918: CALL_OW 325
42922: NOT
42923: AND
42924: IFFALSE 42953
// missile := Replace ( missile , missile + 1 , 3 ) ;
42926: LD_ADDR_VAR 0 14
42930: PUSH
42931: LD_VAR 0 14
42935: PPUSH
42936: LD_VAR 0 14
42940: PUSH
42941: LD_INT 1
42943: PLUS
42944: PPUSH
42945: LD_INT 3
42947: PPUSH
42948: CALL_OW 1
42952: ST_TO_ADDR
// if missile < 2 then
42953: LD_VAR 0 14
42957: PUSH
42958: LD_INT 2
42960: LESS
42961: IFFALSE 42965
// exit ;
42963: GO 43187
// x := GetX ( enemy ) ;
42965: LD_ADDR_VAR 0 4
42969: PUSH
42970: LD_VAR 0 10
42974: PPUSH
42975: CALL_OW 250
42979: ST_TO_ADDR
// y := GetY ( enemy ) ;
42980: LD_ADDR_VAR 0 5
42984: PUSH
42985: LD_VAR 0 10
42989: PPUSH
42990: CALL_OW 251
42994: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42995: LD_ADDR_VAR 0 6
42999: PUSH
43000: LD_VAR 0 4
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PPUSH
43009: LD_INT 1
43011: PPUSH
43012: CALL_OW 12
43016: PLUS
43017: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43018: LD_ADDR_VAR 0 7
43022: PUSH
43023: LD_VAR 0 5
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PPUSH
43032: LD_INT 1
43034: PPUSH
43035: CALL_OW 12
43039: PLUS
43040: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43041: LD_VAR 0 6
43045: PPUSH
43046: LD_VAR 0 7
43050: PPUSH
43051: CALL_OW 488
43055: NOT
43056: IFFALSE 43078
// begin _x := x ;
43058: LD_ADDR_VAR 0 6
43062: PUSH
43063: LD_VAR 0 4
43067: ST_TO_ADDR
// _y := y ;
43068: LD_ADDR_VAR 0 7
43072: PUSH
43073: LD_VAR 0 5
43077: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43078: LD_ADDR_VAR 0 3
43082: PUSH
43083: LD_INT 1
43085: PPUSH
43086: LD_VAR 0 14
43090: PPUSH
43091: CALL_OW 12
43095: ST_TO_ADDR
// case i of 1 :
43096: LD_VAR 0 3
43100: PUSH
43101: LD_INT 1
43103: DOUBLE
43104: EQUAL
43105: IFTRUE 43109
43107: GO 43126
43109: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43110: LD_VAR 0 1
43114: PPUSH
43115: LD_VAR 0 10
43119: PPUSH
43120: CALL_OW 115
43124: GO 43187
43126: LD_INT 2
43128: DOUBLE
43129: EQUAL
43130: IFTRUE 43134
43132: GO 43156
43134: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43135: LD_VAR 0 1
43139: PPUSH
43140: LD_VAR 0 6
43144: PPUSH
43145: LD_VAR 0 7
43149: PPUSH
43150: CALL_OW 153
43154: GO 43187
43156: LD_INT 3
43158: DOUBLE
43159: EQUAL
43160: IFTRUE 43164
43162: GO 43186
43164: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43165: LD_VAR 0 1
43169: PPUSH
43170: LD_VAR 0 6
43174: PPUSH
43175: LD_VAR 0 7
43179: PPUSH
43180: CALL_OW 154
43184: GO 43187
43186: POP
// end ;
43187: LD_VAR 0 2
43191: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43192: LD_INT 0
43194: PPUSH
43195: PPUSH
43196: PPUSH
43197: PPUSH
43198: PPUSH
43199: PPUSH
// if not unit or not building then
43200: LD_VAR 0 1
43204: NOT
43205: PUSH
43206: LD_VAR 0 2
43210: NOT
43211: OR
43212: IFFALSE 43216
// exit ;
43214: GO 43374
// x := GetX ( building ) ;
43216: LD_ADDR_VAR 0 5
43220: PUSH
43221: LD_VAR 0 2
43225: PPUSH
43226: CALL_OW 250
43230: ST_TO_ADDR
// y := GetY ( building ) ;
43231: LD_ADDR_VAR 0 6
43235: PUSH
43236: LD_VAR 0 2
43240: PPUSH
43241: CALL_OW 251
43245: ST_TO_ADDR
// for i = 0 to 5 do
43246: LD_ADDR_VAR 0 4
43250: PUSH
43251: DOUBLE
43252: LD_INT 0
43254: DEC
43255: ST_TO_ADDR
43256: LD_INT 5
43258: PUSH
43259: FOR_TO
43260: IFFALSE 43372
// begin _x := ShiftX ( x , i , 3 ) ;
43262: LD_ADDR_VAR 0 7
43266: PUSH
43267: LD_VAR 0 5
43271: PPUSH
43272: LD_VAR 0 4
43276: PPUSH
43277: LD_INT 3
43279: PPUSH
43280: CALL_OW 272
43284: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43285: LD_ADDR_VAR 0 8
43289: PUSH
43290: LD_VAR 0 6
43294: PPUSH
43295: LD_VAR 0 4
43299: PPUSH
43300: LD_INT 3
43302: PPUSH
43303: CALL_OW 273
43307: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43308: LD_VAR 0 7
43312: PPUSH
43313: LD_VAR 0 8
43317: PPUSH
43318: CALL_OW 488
43322: NOT
43323: IFFALSE 43327
// continue ;
43325: GO 43259
// if HexInfo ( _x , _y ) = 0 then
43327: LD_VAR 0 7
43331: PPUSH
43332: LD_VAR 0 8
43336: PPUSH
43337: CALL_OW 428
43341: PUSH
43342: LD_INT 0
43344: EQUAL
43345: IFFALSE 43370
// begin ComMoveXY ( unit , _x , _y ) ;
43347: LD_VAR 0 1
43351: PPUSH
43352: LD_VAR 0 7
43356: PPUSH
43357: LD_VAR 0 8
43361: PPUSH
43362: CALL_OW 111
// exit ;
43366: POP
43367: POP
43368: GO 43374
// end ; end ;
43370: GO 43259
43372: POP
43373: POP
// end ;
43374: LD_VAR 0 3
43378: RET
// export function ScanBase ( side , base_area ) ; begin
43379: LD_INT 0
43381: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43382: LD_ADDR_VAR 0 3
43386: PUSH
43387: LD_VAR 0 2
43391: PPUSH
43392: LD_INT 81
43394: PUSH
43395: LD_VAR 0 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PPUSH
43404: CALL_OW 70
43408: ST_TO_ADDR
// end ;
43409: LD_VAR 0 3
43413: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43414: LD_INT 0
43416: PPUSH
43417: PPUSH
43418: PPUSH
43419: PPUSH
// result := false ;
43420: LD_ADDR_VAR 0 2
43424: PUSH
43425: LD_INT 0
43427: ST_TO_ADDR
// side := GetSide ( unit ) ;
43428: LD_ADDR_VAR 0 3
43432: PUSH
43433: LD_VAR 0 1
43437: PPUSH
43438: CALL_OW 255
43442: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43443: LD_ADDR_VAR 0 4
43447: PUSH
43448: LD_VAR 0 1
43452: PPUSH
43453: CALL_OW 248
43457: ST_TO_ADDR
// case nat of 1 :
43458: LD_VAR 0 4
43462: PUSH
43463: LD_INT 1
43465: DOUBLE
43466: EQUAL
43467: IFTRUE 43471
43469: GO 43482
43471: POP
// tech := tech_lassight ; 2 :
43472: LD_ADDR_VAR 0 5
43476: PUSH
43477: LD_INT 12
43479: ST_TO_ADDR
43480: GO 43521
43482: LD_INT 2
43484: DOUBLE
43485: EQUAL
43486: IFTRUE 43490
43488: GO 43501
43490: POP
// tech := tech_mortar ; 3 :
43491: LD_ADDR_VAR 0 5
43495: PUSH
43496: LD_INT 41
43498: ST_TO_ADDR
43499: GO 43521
43501: LD_INT 3
43503: DOUBLE
43504: EQUAL
43505: IFTRUE 43509
43507: GO 43520
43509: POP
// tech := tech_bazooka ; end ;
43510: LD_ADDR_VAR 0 5
43514: PUSH
43515: LD_INT 44
43517: ST_TO_ADDR
43518: GO 43521
43520: POP
// if Researched ( side , tech ) then
43521: LD_VAR 0 3
43525: PPUSH
43526: LD_VAR 0 5
43530: PPUSH
43531: CALL_OW 325
43535: IFFALSE 43562
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43537: LD_ADDR_VAR 0 2
43541: PUSH
43542: LD_INT 5
43544: PUSH
43545: LD_INT 8
43547: PUSH
43548: LD_INT 9
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: LIST
43555: PUSH
43556: LD_VAR 0 4
43560: ARRAY
43561: ST_TO_ADDR
// end ;
43562: LD_VAR 0 2
43566: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43567: LD_INT 0
43569: PPUSH
43570: PPUSH
43571: PPUSH
// if not mines then
43572: LD_VAR 0 2
43576: NOT
43577: IFFALSE 43581
// exit ;
43579: GO 43725
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43581: LD_ADDR_VAR 0 5
43585: PUSH
43586: LD_INT 81
43588: PUSH
43589: LD_VAR 0 1
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 3
43600: PUSH
43601: LD_INT 21
43603: PUSH
43604: LD_INT 3
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PPUSH
43619: CALL_OW 69
43623: ST_TO_ADDR
// for i in mines do
43624: LD_ADDR_VAR 0 4
43628: PUSH
43629: LD_VAR 0 2
43633: PUSH
43634: FOR_IN
43635: IFFALSE 43723
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43637: LD_VAR 0 4
43641: PUSH
43642: LD_INT 1
43644: ARRAY
43645: PPUSH
43646: LD_VAR 0 4
43650: PUSH
43651: LD_INT 2
43653: ARRAY
43654: PPUSH
43655: CALL_OW 458
43659: NOT
43660: IFFALSE 43664
// continue ;
43662: GO 43634
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43664: LD_VAR 0 4
43668: PUSH
43669: LD_INT 1
43671: ARRAY
43672: PPUSH
43673: LD_VAR 0 4
43677: PUSH
43678: LD_INT 2
43680: ARRAY
43681: PPUSH
43682: CALL_OW 428
43686: PUSH
43687: LD_VAR 0 5
43691: IN
43692: IFFALSE 43721
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43694: LD_VAR 0 4
43698: PUSH
43699: LD_INT 1
43701: ARRAY
43702: PPUSH
43703: LD_VAR 0 4
43707: PUSH
43708: LD_INT 2
43710: ARRAY
43711: PPUSH
43712: LD_VAR 0 1
43716: PPUSH
43717: CALL_OW 456
// end ;
43721: GO 43634
43723: POP
43724: POP
// end ;
43725: LD_VAR 0 3
43729: RET
// export function Count ( array ) ; begin
43730: LD_INT 0
43732: PPUSH
// result := array + 0 ;
43733: LD_ADDR_VAR 0 2
43737: PUSH
43738: LD_VAR 0 1
43742: PUSH
43743: LD_INT 0
43745: PLUS
43746: ST_TO_ADDR
// end ;
43747: LD_VAR 0 2
43751: RET
// export function IsEmpty ( building ) ; begin
43752: LD_INT 0
43754: PPUSH
// if not building then
43755: LD_VAR 0 1
43759: NOT
43760: IFFALSE 43764
// exit ;
43762: GO 43807
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43764: LD_ADDR_VAR 0 2
43768: PUSH
43769: LD_VAR 0 1
43773: PUSH
43774: LD_INT 22
43776: PUSH
43777: LD_VAR 0 1
43781: PPUSH
43782: CALL_OW 255
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 58
43793: PUSH
43794: EMPTY
43795: LIST
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PPUSH
43801: CALL_OW 69
43805: IN
43806: ST_TO_ADDR
// end ;
43807: LD_VAR 0 2
43811: RET
// export function IsNotFull ( building ) ; var places ; begin
43812: LD_INT 0
43814: PPUSH
43815: PPUSH
// if not building then
43816: LD_VAR 0 1
43820: NOT
43821: IFFALSE 43825
// exit ;
43823: GO 43853
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43825: LD_ADDR_VAR 0 2
43829: PUSH
43830: LD_VAR 0 1
43834: PPUSH
43835: LD_INT 3
43837: PUSH
43838: LD_INT 62
43840: PUSH
43841: EMPTY
43842: LIST
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PPUSH
43848: CALL_OW 72
43852: ST_TO_ADDR
// end ;
43853: LD_VAR 0 2
43857: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43858: LD_INT 0
43860: PPUSH
43861: PPUSH
43862: PPUSH
43863: PPUSH
// tmp := [ ] ;
43864: LD_ADDR_VAR 0 3
43868: PUSH
43869: EMPTY
43870: ST_TO_ADDR
// list := [ ] ;
43871: LD_ADDR_VAR 0 5
43875: PUSH
43876: EMPTY
43877: ST_TO_ADDR
// for i = 16 to 25 do
43878: LD_ADDR_VAR 0 4
43882: PUSH
43883: DOUBLE
43884: LD_INT 16
43886: DEC
43887: ST_TO_ADDR
43888: LD_INT 25
43890: PUSH
43891: FOR_TO
43892: IFFALSE 43965
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43894: LD_ADDR_VAR 0 3
43898: PUSH
43899: LD_VAR 0 3
43903: PUSH
43904: LD_INT 22
43906: PUSH
43907: LD_VAR 0 1
43911: PPUSH
43912: CALL_OW 255
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 91
43923: PUSH
43924: LD_VAR 0 1
43928: PUSH
43929: LD_INT 6
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 30
43939: PUSH
43940: LD_VAR 0 4
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: LIST
43953: PUSH
43954: EMPTY
43955: LIST
43956: PPUSH
43957: CALL_OW 69
43961: ADD
43962: ST_TO_ADDR
43963: GO 43891
43965: POP
43966: POP
// for i = 1 to tmp do
43967: LD_ADDR_VAR 0 4
43971: PUSH
43972: DOUBLE
43973: LD_INT 1
43975: DEC
43976: ST_TO_ADDR
43977: LD_VAR 0 3
43981: PUSH
43982: FOR_TO
43983: IFFALSE 44071
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43985: LD_ADDR_VAR 0 5
43989: PUSH
43990: LD_VAR 0 5
43994: PUSH
43995: LD_VAR 0 3
43999: PUSH
44000: LD_VAR 0 4
44004: ARRAY
44005: PPUSH
44006: CALL_OW 266
44010: PUSH
44011: LD_VAR 0 3
44015: PUSH
44016: LD_VAR 0 4
44020: ARRAY
44021: PPUSH
44022: CALL_OW 250
44026: PUSH
44027: LD_VAR 0 3
44031: PUSH
44032: LD_VAR 0 4
44036: ARRAY
44037: PPUSH
44038: CALL_OW 251
44042: PUSH
44043: LD_VAR 0 3
44047: PUSH
44048: LD_VAR 0 4
44052: ARRAY
44053: PPUSH
44054: CALL_OW 254
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: PUSH
44065: EMPTY
44066: LIST
44067: ADD
44068: ST_TO_ADDR
44069: GO 43982
44071: POP
44072: POP
// result := list ;
44073: LD_ADDR_VAR 0 2
44077: PUSH
44078: LD_VAR 0 5
44082: ST_TO_ADDR
// end ;
44083: LD_VAR 0 2
44087: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44088: LD_INT 0
44090: PPUSH
44091: PPUSH
44092: PPUSH
44093: PPUSH
44094: PPUSH
44095: PPUSH
44096: PPUSH
// if not factory then
44097: LD_VAR 0 1
44101: NOT
44102: IFFALSE 44106
// exit ;
44104: GO 44699
// if control = control_apeman then
44106: LD_VAR 0 4
44110: PUSH
44111: LD_INT 5
44113: EQUAL
44114: IFFALSE 44223
// begin tmp := UnitsInside ( factory ) ;
44116: LD_ADDR_VAR 0 8
44120: PUSH
44121: LD_VAR 0 1
44125: PPUSH
44126: CALL_OW 313
44130: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44131: LD_VAR 0 8
44135: PPUSH
44136: LD_INT 25
44138: PUSH
44139: LD_INT 12
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PPUSH
44146: CALL_OW 72
44150: NOT
44151: IFFALSE 44161
// control := control_manual ;
44153: LD_ADDR_VAR 0 4
44157: PUSH
44158: LD_INT 1
44160: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44161: LD_ADDR_VAR 0 8
44165: PUSH
44166: LD_VAR 0 1
44170: PPUSH
44171: CALL 43858 0 1
44175: ST_TO_ADDR
// if tmp then
44176: LD_VAR 0 8
44180: IFFALSE 44223
// begin for i in tmp do
44182: LD_ADDR_VAR 0 7
44186: PUSH
44187: LD_VAR 0 8
44191: PUSH
44192: FOR_IN
44193: IFFALSE 44221
// if i [ 1 ] = b_ext_radio then
44195: LD_VAR 0 7
44199: PUSH
44200: LD_INT 1
44202: ARRAY
44203: PUSH
44204: LD_INT 22
44206: EQUAL
44207: IFFALSE 44219
// begin control := control_remote ;
44209: LD_ADDR_VAR 0 4
44213: PUSH
44214: LD_INT 2
44216: ST_TO_ADDR
// break ;
44217: GO 44221
// end ;
44219: GO 44192
44221: POP
44222: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44223: LD_VAR 0 1
44227: PPUSH
44228: LD_VAR 0 2
44232: PPUSH
44233: LD_VAR 0 3
44237: PPUSH
44238: LD_VAR 0 4
44242: PPUSH
44243: LD_VAR 0 5
44247: PPUSH
44248: CALL_OW 448
44252: IFFALSE 44287
// begin result := [ chassis , engine , control , weapon ] ;
44254: LD_ADDR_VAR 0 6
44258: PUSH
44259: LD_VAR 0 2
44263: PUSH
44264: LD_VAR 0 3
44268: PUSH
44269: LD_VAR 0 4
44273: PUSH
44274: LD_VAR 0 5
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: ST_TO_ADDR
// exit ;
44285: GO 44699
// end ; _chassis := AvailableChassisList ( factory ) ;
44287: LD_ADDR_VAR 0 9
44291: PUSH
44292: LD_VAR 0 1
44296: PPUSH
44297: CALL_OW 475
44301: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44302: LD_ADDR_VAR 0 11
44306: PUSH
44307: LD_VAR 0 1
44311: PPUSH
44312: CALL_OW 476
44316: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44317: LD_ADDR_VAR 0 12
44321: PUSH
44322: LD_VAR 0 1
44326: PPUSH
44327: CALL_OW 477
44331: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44332: LD_ADDR_VAR 0 10
44336: PUSH
44337: LD_VAR 0 1
44341: PPUSH
44342: CALL_OW 478
44346: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44347: LD_VAR 0 9
44351: NOT
44352: PUSH
44353: LD_VAR 0 11
44357: NOT
44358: OR
44359: PUSH
44360: LD_VAR 0 12
44364: NOT
44365: OR
44366: PUSH
44367: LD_VAR 0 10
44371: NOT
44372: OR
44373: IFFALSE 44408
// begin result := [ chassis , engine , control , weapon ] ;
44375: LD_ADDR_VAR 0 6
44379: PUSH
44380: LD_VAR 0 2
44384: PUSH
44385: LD_VAR 0 3
44389: PUSH
44390: LD_VAR 0 4
44394: PUSH
44395: LD_VAR 0 5
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: ST_TO_ADDR
// exit ;
44406: GO 44699
// end ; if not chassis in _chassis then
44408: LD_VAR 0 2
44412: PUSH
44413: LD_VAR 0 9
44417: IN
44418: NOT
44419: IFFALSE 44445
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44421: LD_ADDR_VAR 0 2
44425: PUSH
44426: LD_VAR 0 9
44430: PUSH
44431: LD_INT 1
44433: PPUSH
44434: LD_VAR 0 9
44438: PPUSH
44439: CALL_OW 12
44443: ARRAY
44444: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44445: LD_VAR 0 2
44449: PPUSH
44450: LD_VAR 0 3
44454: PPUSH
44455: CALL 44704 0 2
44459: NOT
44460: IFFALSE 44519
// repeat engine := _engine [ 1 ] ;
44462: LD_ADDR_VAR 0 3
44466: PUSH
44467: LD_VAR 0 11
44471: PUSH
44472: LD_INT 1
44474: ARRAY
44475: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44476: LD_ADDR_VAR 0 11
44480: PUSH
44481: LD_VAR 0 11
44485: PPUSH
44486: LD_INT 1
44488: PPUSH
44489: CALL_OW 3
44493: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44494: LD_VAR 0 2
44498: PPUSH
44499: LD_VAR 0 3
44503: PPUSH
44504: CALL 44704 0 2
44508: PUSH
44509: LD_VAR 0 11
44513: PUSH
44514: EMPTY
44515: EQUAL
44516: OR
44517: IFFALSE 44462
// if not control in _control then
44519: LD_VAR 0 4
44523: PUSH
44524: LD_VAR 0 12
44528: IN
44529: NOT
44530: IFFALSE 44556
// control := _control [ rand ( 1 , _control ) ] ;
44532: LD_ADDR_VAR 0 4
44536: PUSH
44537: LD_VAR 0 12
44541: PUSH
44542: LD_INT 1
44544: PPUSH
44545: LD_VAR 0 12
44549: PPUSH
44550: CALL_OW 12
44554: ARRAY
44555: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44556: LD_VAR 0 2
44560: PPUSH
44561: LD_VAR 0 5
44565: PPUSH
44566: CALL 44924 0 2
44570: NOT
44571: IFFALSE 44630
// repeat weapon := _weapon [ 1 ] ;
44573: LD_ADDR_VAR 0 5
44577: PUSH
44578: LD_VAR 0 10
44582: PUSH
44583: LD_INT 1
44585: ARRAY
44586: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44587: LD_ADDR_VAR 0 10
44591: PUSH
44592: LD_VAR 0 10
44596: PPUSH
44597: LD_INT 1
44599: PPUSH
44600: CALL_OW 3
44604: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44605: LD_VAR 0 2
44609: PPUSH
44610: LD_VAR 0 5
44614: PPUSH
44615: CALL 44924 0 2
44619: PUSH
44620: LD_VAR 0 10
44624: PUSH
44625: EMPTY
44626: EQUAL
44627: OR
44628: IFFALSE 44573
// result := [ ] ;
44630: LD_ADDR_VAR 0 6
44634: PUSH
44635: EMPTY
44636: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44637: LD_VAR 0 1
44641: PPUSH
44642: LD_VAR 0 2
44646: PPUSH
44647: LD_VAR 0 3
44651: PPUSH
44652: LD_VAR 0 4
44656: PPUSH
44657: LD_VAR 0 5
44661: PPUSH
44662: CALL_OW 448
44666: IFFALSE 44699
// result := [ chassis , engine , control , weapon ] ;
44668: LD_ADDR_VAR 0 6
44672: PUSH
44673: LD_VAR 0 2
44677: PUSH
44678: LD_VAR 0 3
44682: PUSH
44683: LD_VAR 0 4
44687: PUSH
44688: LD_VAR 0 5
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: ST_TO_ADDR
// end ;
44699: LD_VAR 0 6
44703: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44704: LD_INT 0
44706: PPUSH
// if not chassis or not engine then
44707: LD_VAR 0 1
44711: NOT
44712: PUSH
44713: LD_VAR 0 2
44717: NOT
44718: OR
44719: IFFALSE 44723
// exit ;
44721: GO 44919
// case engine of engine_solar :
44723: LD_VAR 0 2
44727: PUSH
44728: LD_INT 2
44730: DOUBLE
44731: EQUAL
44732: IFTRUE 44736
44734: GO 44774
44736: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44737: LD_ADDR_VAR 0 3
44741: PUSH
44742: LD_INT 11
44744: PUSH
44745: LD_INT 12
44747: PUSH
44748: LD_INT 13
44750: PUSH
44751: LD_INT 14
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: LD_INT 2
44759: PUSH
44760: LD_INT 3
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: ST_TO_ADDR
44772: GO 44903
44774: LD_INT 1
44776: DOUBLE
44777: EQUAL
44778: IFTRUE 44782
44780: GO 44844
44782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44783: LD_ADDR_VAR 0 3
44787: PUSH
44788: LD_INT 11
44790: PUSH
44791: LD_INT 12
44793: PUSH
44794: LD_INT 13
44796: PUSH
44797: LD_INT 14
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: LD_INT 3
44808: PUSH
44809: LD_INT 4
44811: PUSH
44812: LD_INT 5
44814: PUSH
44815: LD_INT 21
44817: PUSH
44818: LD_INT 23
44820: PUSH
44821: LD_INT 22
44823: PUSH
44824: LD_INT 24
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: ST_TO_ADDR
44842: GO 44903
44844: LD_INT 3
44846: DOUBLE
44847: EQUAL
44848: IFTRUE 44852
44850: GO 44902
44852: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44853: LD_ADDR_VAR 0 3
44857: PUSH
44858: LD_INT 13
44860: PUSH
44861: LD_INT 14
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: LD_INT 3
44869: PUSH
44870: LD_INT 4
44872: PUSH
44873: LD_INT 5
44875: PUSH
44876: LD_INT 21
44878: PUSH
44879: LD_INT 22
44881: PUSH
44882: LD_INT 23
44884: PUSH
44885: LD_INT 24
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: ST_TO_ADDR
44900: GO 44903
44902: POP
// result := ( chassis in result ) ;
44903: LD_ADDR_VAR 0 3
44907: PUSH
44908: LD_VAR 0 1
44912: PUSH
44913: LD_VAR 0 3
44917: IN
44918: ST_TO_ADDR
// end ;
44919: LD_VAR 0 3
44923: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44924: LD_INT 0
44926: PPUSH
// if not chassis or not weapon then
44927: LD_VAR 0 1
44931: NOT
44932: PUSH
44933: LD_VAR 0 2
44937: NOT
44938: OR
44939: IFFALSE 44943
// exit ;
44941: GO 46003
// case weapon of us_machine_gun :
44943: LD_VAR 0 2
44947: PUSH
44948: LD_INT 2
44950: DOUBLE
44951: EQUAL
44952: IFTRUE 44956
44954: GO 44986
44956: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44957: LD_ADDR_VAR 0 3
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: LD_INT 2
44967: PUSH
44968: LD_INT 3
44970: PUSH
44971: LD_INT 4
44973: PUSH
44974: LD_INT 5
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: ST_TO_ADDR
44984: GO 45987
44986: LD_INT 3
44988: DOUBLE
44989: EQUAL
44990: IFTRUE 44994
44992: GO 45024
44994: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44995: LD_ADDR_VAR 0 3
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: LD_INT 3
45008: PUSH
45009: LD_INT 4
45011: PUSH
45012: LD_INT 5
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: ST_TO_ADDR
45022: GO 45987
45024: LD_INT 11
45026: DOUBLE
45027: EQUAL
45028: IFTRUE 45032
45030: GO 45062
45032: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45033: LD_ADDR_VAR 0 3
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: LD_INT 2
45043: PUSH
45044: LD_INT 3
45046: PUSH
45047: LD_INT 4
45049: PUSH
45050: LD_INT 5
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: ST_TO_ADDR
45060: GO 45987
45062: LD_INT 4
45064: DOUBLE
45065: EQUAL
45066: IFTRUE 45070
45068: GO 45096
45070: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45071: LD_ADDR_VAR 0 3
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: LD_INT 3
45081: PUSH
45082: LD_INT 4
45084: PUSH
45085: LD_INT 5
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: ST_TO_ADDR
45094: GO 45987
45096: LD_INT 5
45098: DOUBLE
45099: EQUAL
45100: IFTRUE 45104
45102: GO 45130
45104: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45105: LD_ADDR_VAR 0 3
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: LD_INT 3
45115: PUSH
45116: LD_INT 4
45118: PUSH
45119: LD_INT 5
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: ST_TO_ADDR
45128: GO 45987
45130: LD_INT 9
45132: DOUBLE
45133: EQUAL
45134: IFTRUE 45138
45136: GO 45164
45138: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45139: LD_ADDR_VAR 0 3
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: LD_INT 3
45149: PUSH
45150: LD_INT 4
45152: PUSH
45153: LD_INT 5
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: ST_TO_ADDR
45162: GO 45987
45164: LD_INT 7
45166: DOUBLE
45167: EQUAL
45168: IFTRUE 45172
45170: GO 45198
45172: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45173: LD_ADDR_VAR 0 3
45177: PUSH
45178: LD_INT 2
45180: PUSH
45181: LD_INT 3
45183: PUSH
45184: LD_INT 4
45186: PUSH
45187: LD_INT 5
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: ST_TO_ADDR
45196: GO 45987
45198: LD_INT 12
45200: DOUBLE
45201: EQUAL
45202: IFTRUE 45206
45204: GO 45232
45206: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45207: LD_ADDR_VAR 0 3
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: LD_INT 3
45217: PUSH
45218: LD_INT 4
45220: PUSH
45221: LD_INT 5
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: ST_TO_ADDR
45230: GO 45987
45232: LD_INT 13
45234: DOUBLE
45235: EQUAL
45236: IFTRUE 45240
45238: GO 45266
45240: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45241: LD_ADDR_VAR 0 3
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: LD_INT 3
45251: PUSH
45252: LD_INT 4
45254: PUSH
45255: LD_INT 5
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: ST_TO_ADDR
45264: GO 45987
45266: LD_INT 14
45268: DOUBLE
45269: EQUAL
45270: IFTRUE 45274
45272: GO 45292
45274: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45275: LD_ADDR_VAR 0 3
45279: PUSH
45280: LD_INT 4
45282: PUSH
45283: LD_INT 5
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: ST_TO_ADDR
45290: GO 45987
45292: LD_INT 6
45294: DOUBLE
45295: EQUAL
45296: IFTRUE 45300
45298: GO 45318
45300: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45301: LD_ADDR_VAR 0 3
45305: PUSH
45306: LD_INT 4
45308: PUSH
45309: LD_INT 5
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: ST_TO_ADDR
45316: GO 45987
45318: LD_INT 10
45320: DOUBLE
45321: EQUAL
45322: IFTRUE 45326
45324: GO 45344
45326: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45327: LD_ADDR_VAR 0 3
45331: PUSH
45332: LD_INT 4
45334: PUSH
45335: LD_INT 5
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: ST_TO_ADDR
45342: GO 45987
45344: LD_INT 22
45346: DOUBLE
45347: EQUAL
45348: IFTRUE 45352
45350: GO 45378
45352: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45353: LD_ADDR_VAR 0 3
45357: PUSH
45358: LD_INT 11
45360: PUSH
45361: LD_INT 12
45363: PUSH
45364: LD_INT 13
45366: PUSH
45367: LD_INT 14
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: ST_TO_ADDR
45376: GO 45987
45378: LD_INT 23
45380: DOUBLE
45381: EQUAL
45382: IFTRUE 45386
45384: GO 45412
45386: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45387: LD_ADDR_VAR 0 3
45391: PUSH
45392: LD_INT 11
45394: PUSH
45395: LD_INT 12
45397: PUSH
45398: LD_INT 13
45400: PUSH
45401: LD_INT 14
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: ST_TO_ADDR
45410: GO 45987
45412: LD_INT 24
45414: DOUBLE
45415: EQUAL
45416: IFTRUE 45420
45418: GO 45446
45420: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45421: LD_ADDR_VAR 0 3
45425: PUSH
45426: LD_INT 11
45428: PUSH
45429: LD_INT 12
45431: PUSH
45432: LD_INT 13
45434: PUSH
45435: LD_INT 14
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: ST_TO_ADDR
45444: GO 45987
45446: LD_INT 30
45448: DOUBLE
45449: EQUAL
45450: IFTRUE 45454
45452: GO 45480
45454: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45455: LD_ADDR_VAR 0 3
45459: PUSH
45460: LD_INT 11
45462: PUSH
45463: LD_INT 12
45465: PUSH
45466: LD_INT 13
45468: PUSH
45469: LD_INT 14
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: ST_TO_ADDR
45478: GO 45987
45480: LD_INT 25
45482: DOUBLE
45483: EQUAL
45484: IFTRUE 45488
45486: GO 45506
45488: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45489: LD_ADDR_VAR 0 3
45493: PUSH
45494: LD_INT 13
45496: PUSH
45497: LD_INT 14
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: ST_TO_ADDR
45504: GO 45987
45506: LD_INT 27
45508: DOUBLE
45509: EQUAL
45510: IFTRUE 45514
45512: GO 45532
45514: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45515: LD_ADDR_VAR 0 3
45519: PUSH
45520: LD_INT 13
45522: PUSH
45523: LD_INT 14
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: ST_TO_ADDR
45530: GO 45987
45532: LD_INT 92
45534: DOUBLE
45535: EQUAL
45536: IFTRUE 45540
45538: GO 45566
45540: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45541: LD_ADDR_VAR 0 3
45545: PUSH
45546: LD_INT 11
45548: PUSH
45549: LD_INT 12
45551: PUSH
45552: LD_INT 13
45554: PUSH
45555: LD_INT 14
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: ST_TO_ADDR
45564: GO 45987
45566: LD_INT 28
45568: DOUBLE
45569: EQUAL
45570: IFTRUE 45574
45572: GO 45592
45574: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45575: LD_ADDR_VAR 0 3
45579: PUSH
45580: LD_INT 13
45582: PUSH
45583: LD_INT 14
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: ST_TO_ADDR
45590: GO 45987
45592: LD_INT 29
45594: DOUBLE
45595: EQUAL
45596: IFTRUE 45600
45598: GO 45618
45600: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45601: LD_ADDR_VAR 0 3
45605: PUSH
45606: LD_INT 13
45608: PUSH
45609: LD_INT 14
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: ST_TO_ADDR
45616: GO 45987
45618: LD_INT 31
45620: DOUBLE
45621: EQUAL
45622: IFTRUE 45626
45624: GO 45644
45626: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45627: LD_ADDR_VAR 0 3
45631: PUSH
45632: LD_INT 13
45634: PUSH
45635: LD_INT 14
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: ST_TO_ADDR
45642: GO 45987
45644: LD_INT 26
45646: DOUBLE
45647: EQUAL
45648: IFTRUE 45652
45650: GO 45670
45652: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45653: LD_ADDR_VAR 0 3
45657: PUSH
45658: LD_INT 13
45660: PUSH
45661: LD_INT 14
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: ST_TO_ADDR
45668: GO 45987
45670: LD_INT 42
45672: DOUBLE
45673: EQUAL
45674: IFTRUE 45678
45676: GO 45704
45678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45679: LD_ADDR_VAR 0 3
45683: PUSH
45684: LD_INT 21
45686: PUSH
45687: LD_INT 22
45689: PUSH
45690: LD_INT 23
45692: PUSH
45693: LD_INT 24
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: ST_TO_ADDR
45702: GO 45987
45704: LD_INT 43
45706: DOUBLE
45707: EQUAL
45708: IFTRUE 45712
45710: GO 45738
45712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45713: LD_ADDR_VAR 0 3
45717: PUSH
45718: LD_INT 21
45720: PUSH
45721: LD_INT 22
45723: PUSH
45724: LD_INT 23
45726: PUSH
45727: LD_INT 24
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: ST_TO_ADDR
45736: GO 45987
45738: LD_INT 44
45740: DOUBLE
45741: EQUAL
45742: IFTRUE 45746
45744: GO 45772
45746: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45747: LD_ADDR_VAR 0 3
45751: PUSH
45752: LD_INT 21
45754: PUSH
45755: LD_INT 22
45757: PUSH
45758: LD_INT 23
45760: PUSH
45761: LD_INT 24
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: ST_TO_ADDR
45770: GO 45987
45772: LD_INT 45
45774: DOUBLE
45775: EQUAL
45776: IFTRUE 45780
45778: GO 45806
45780: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45781: LD_ADDR_VAR 0 3
45785: PUSH
45786: LD_INT 21
45788: PUSH
45789: LD_INT 22
45791: PUSH
45792: LD_INT 23
45794: PUSH
45795: LD_INT 24
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: ST_TO_ADDR
45804: GO 45987
45806: LD_INT 49
45808: DOUBLE
45809: EQUAL
45810: IFTRUE 45814
45812: GO 45840
45814: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45815: LD_ADDR_VAR 0 3
45819: PUSH
45820: LD_INT 21
45822: PUSH
45823: LD_INT 22
45825: PUSH
45826: LD_INT 23
45828: PUSH
45829: LD_INT 24
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: ST_TO_ADDR
45838: GO 45987
45840: LD_INT 51
45842: DOUBLE
45843: EQUAL
45844: IFTRUE 45848
45846: GO 45874
45848: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45849: LD_ADDR_VAR 0 3
45853: PUSH
45854: LD_INT 21
45856: PUSH
45857: LD_INT 22
45859: PUSH
45860: LD_INT 23
45862: PUSH
45863: LD_INT 24
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: ST_TO_ADDR
45872: GO 45987
45874: LD_INT 52
45876: DOUBLE
45877: EQUAL
45878: IFTRUE 45882
45880: GO 45908
45882: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45883: LD_ADDR_VAR 0 3
45887: PUSH
45888: LD_INT 21
45890: PUSH
45891: LD_INT 22
45893: PUSH
45894: LD_INT 23
45896: PUSH
45897: LD_INT 24
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: ST_TO_ADDR
45906: GO 45987
45908: LD_INT 53
45910: DOUBLE
45911: EQUAL
45912: IFTRUE 45916
45914: GO 45934
45916: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45917: LD_ADDR_VAR 0 3
45921: PUSH
45922: LD_INT 23
45924: PUSH
45925: LD_INT 24
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: ST_TO_ADDR
45932: GO 45987
45934: LD_INT 46
45936: DOUBLE
45937: EQUAL
45938: IFTRUE 45942
45940: GO 45960
45942: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45943: LD_ADDR_VAR 0 3
45947: PUSH
45948: LD_INT 23
45950: PUSH
45951: LD_INT 24
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: ST_TO_ADDR
45958: GO 45987
45960: LD_INT 47
45962: DOUBLE
45963: EQUAL
45964: IFTRUE 45968
45966: GO 45986
45968: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45969: LD_ADDR_VAR 0 3
45973: PUSH
45974: LD_INT 23
45976: PUSH
45977: LD_INT 24
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: ST_TO_ADDR
45984: GO 45987
45986: POP
// result := ( chassis in result ) ;
45987: LD_ADDR_VAR 0 3
45991: PUSH
45992: LD_VAR 0 1
45996: PUSH
45997: LD_VAR 0 3
46001: IN
46002: ST_TO_ADDR
// end ;
46003: LD_VAR 0 3
46007: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46008: LD_INT 0
46010: PPUSH
46011: PPUSH
46012: PPUSH
46013: PPUSH
46014: PPUSH
46015: PPUSH
46016: PPUSH
// result := array ;
46017: LD_ADDR_VAR 0 5
46021: PUSH
46022: LD_VAR 0 1
46026: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46027: LD_VAR 0 1
46031: NOT
46032: PUSH
46033: LD_VAR 0 2
46037: NOT
46038: OR
46039: PUSH
46040: LD_VAR 0 3
46044: NOT
46045: OR
46046: PUSH
46047: LD_VAR 0 2
46051: PUSH
46052: LD_VAR 0 1
46056: GREATER
46057: OR
46058: PUSH
46059: LD_VAR 0 3
46063: PUSH
46064: LD_VAR 0 1
46068: GREATER
46069: OR
46070: IFFALSE 46074
// exit ;
46072: GO 46370
// if direction then
46074: LD_VAR 0 4
46078: IFFALSE 46142
// begin d := 1 ;
46080: LD_ADDR_VAR 0 9
46084: PUSH
46085: LD_INT 1
46087: ST_TO_ADDR
// if i_from > i_to then
46088: LD_VAR 0 2
46092: PUSH
46093: LD_VAR 0 3
46097: GREATER
46098: IFFALSE 46124
// length := ( array - i_from ) + i_to else
46100: LD_ADDR_VAR 0 11
46104: PUSH
46105: LD_VAR 0 1
46109: PUSH
46110: LD_VAR 0 2
46114: MINUS
46115: PUSH
46116: LD_VAR 0 3
46120: PLUS
46121: ST_TO_ADDR
46122: GO 46140
// length := i_to - i_from ;
46124: LD_ADDR_VAR 0 11
46128: PUSH
46129: LD_VAR 0 3
46133: PUSH
46134: LD_VAR 0 2
46138: MINUS
46139: ST_TO_ADDR
// end else
46140: GO 46203
// begin d := - 1 ;
46142: LD_ADDR_VAR 0 9
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: ST_TO_ADDR
// if i_from > i_to then
46151: LD_VAR 0 2
46155: PUSH
46156: LD_VAR 0 3
46160: GREATER
46161: IFFALSE 46181
// length := i_from - i_to else
46163: LD_ADDR_VAR 0 11
46167: PUSH
46168: LD_VAR 0 2
46172: PUSH
46173: LD_VAR 0 3
46177: MINUS
46178: ST_TO_ADDR
46179: GO 46203
// length := ( array - i_to ) + i_from ;
46181: LD_ADDR_VAR 0 11
46185: PUSH
46186: LD_VAR 0 1
46190: PUSH
46191: LD_VAR 0 3
46195: MINUS
46196: PUSH
46197: LD_VAR 0 2
46201: PLUS
46202: ST_TO_ADDR
// end ; if not length then
46203: LD_VAR 0 11
46207: NOT
46208: IFFALSE 46212
// exit ;
46210: GO 46370
// tmp := array ;
46212: LD_ADDR_VAR 0 10
46216: PUSH
46217: LD_VAR 0 1
46221: ST_TO_ADDR
// for i = 1 to length do
46222: LD_ADDR_VAR 0 6
46226: PUSH
46227: DOUBLE
46228: LD_INT 1
46230: DEC
46231: ST_TO_ADDR
46232: LD_VAR 0 11
46236: PUSH
46237: FOR_TO
46238: IFFALSE 46358
// begin for j = 1 to array do
46240: LD_ADDR_VAR 0 7
46244: PUSH
46245: DOUBLE
46246: LD_INT 1
46248: DEC
46249: ST_TO_ADDR
46250: LD_VAR 0 1
46254: PUSH
46255: FOR_TO
46256: IFFALSE 46344
// begin k := j + d ;
46258: LD_ADDR_VAR 0 8
46262: PUSH
46263: LD_VAR 0 7
46267: PUSH
46268: LD_VAR 0 9
46272: PLUS
46273: ST_TO_ADDR
// if k > array then
46274: LD_VAR 0 8
46278: PUSH
46279: LD_VAR 0 1
46283: GREATER
46284: IFFALSE 46294
// k := 1 ;
46286: LD_ADDR_VAR 0 8
46290: PUSH
46291: LD_INT 1
46293: ST_TO_ADDR
// if not k then
46294: LD_VAR 0 8
46298: NOT
46299: IFFALSE 46311
// k := array ;
46301: LD_ADDR_VAR 0 8
46305: PUSH
46306: LD_VAR 0 1
46310: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46311: LD_ADDR_VAR 0 10
46315: PUSH
46316: LD_VAR 0 10
46320: PPUSH
46321: LD_VAR 0 8
46325: PPUSH
46326: LD_VAR 0 1
46330: PUSH
46331: LD_VAR 0 7
46335: ARRAY
46336: PPUSH
46337: CALL_OW 1
46341: ST_TO_ADDR
// end ;
46342: GO 46255
46344: POP
46345: POP
// array := tmp ;
46346: LD_ADDR_VAR 0 1
46350: PUSH
46351: LD_VAR 0 10
46355: ST_TO_ADDR
// end ;
46356: GO 46237
46358: POP
46359: POP
// result := array ;
46360: LD_ADDR_VAR 0 5
46364: PUSH
46365: LD_VAR 0 1
46369: ST_TO_ADDR
// end ;
46370: LD_VAR 0 5
46374: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46375: LD_INT 0
46377: PPUSH
46378: PPUSH
// result := 0 ;
46379: LD_ADDR_VAR 0 3
46383: PUSH
46384: LD_INT 0
46386: ST_TO_ADDR
// if not array or not value in array then
46387: LD_VAR 0 1
46391: NOT
46392: PUSH
46393: LD_VAR 0 2
46397: PUSH
46398: LD_VAR 0 1
46402: IN
46403: NOT
46404: OR
46405: IFFALSE 46409
// exit ;
46407: GO 46463
// for i = 1 to array do
46409: LD_ADDR_VAR 0 4
46413: PUSH
46414: DOUBLE
46415: LD_INT 1
46417: DEC
46418: ST_TO_ADDR
46419: LD_VAR 0 1
46423: PUSH
46424: FOR_TO
46425: IFFALSE 46461
// if value = array [ i ] then
46427: LD_VAR 0 2
46431: PUSH
46432: LD_VAR 0 1
46436: PUSH
46437: LD_VAR 0 4
46441: ARRAY
46442: EQUAL
46443: IFFALSE 46459
// begin result := i ;
46445: LD_ADDR_VAR 0 3
46449: PUSH
46450: LD_VAR 0 4
46454: ST_TO_ADDR
// exit ;
46455: POP
46456: POP
46457: GO 46463
// end ;
46459: GO 46424
46461: POP
46462: POP
// end ;
46463: LD_VAR 0 3
46467: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46468: LD_INT 0
46470: PPUSH
// vc_chassis := chassis ;
46471: LD_ADDR_OWVAR 37
46475: PUSH
46476: LD_VAR 0 1
46480: ST_TO_ADDR
// vc_engine := engine ;
46481: LD_ADDR_OWVAR 39
46485: PUSH
46486: LD_VAR 0 2
46490: ST_TO_ADDR
// vc_control := control ;
46491: LD_ADDR_OWVAR 38
46495: PUSH
46496: LD_VAR 0 3
46500: ST_TO_ADDR
// vc_weapon := weapon ;
46501: LD_ADDR_OWVAR 40
46505: PUSH
46506: LD_VAR 0 4
46510: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46511: LD_ADDR_OWVAR 41
46515: PUSH
46516: LD_VAR 0 5
46520: ST_TO_ADDR
// end ;
46521: LD_VAR 0 6
46525: RET
// export function WantPlant ( unit ) ; var task ; begin
46526: LD_INT 0
46528: PPUSH
46529: PPUSH
// result := false ;
46530: LD_ADDR_VAR 0 2
46534: PUSH
46535: LD_INT 0
46537: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46538: LD_ADDR_VAR 0 3
46542: PUSH
46543: LD_VAR 0 1
46547: PPUSH
46548: CALL_OW 437
46552: ST_TO_ADDR
// if task then
46553: LD_VAR 0 3
46557: IFFALSE 46585
// if task [ 1 ] [ 1 ] = p then
46559: LD_VAR 0 3
46563: PUSH
46564: LD_INT 1
46566: ARRAY
46567: PUSH
46568: LD_INT 1
46570: ARRAY
46571: PUSH
46572: LD_STRING p
46574: EQUAL
46575: IFFALSE 46585
// result := true ;
46577: LD_ADDR_VAR 0 2
46581: PUSH
46582: LD_INT 1
46584: ST_TO_ADDR
// end ;
46585: LD_VAR 0 2
46589: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46590: LD_INT 0
46592: PPUSH
46593: PPUSH
46594: PPUSH
46595: PPUSH
// if pos < 1 then
46596: LD_VAR 0 2
46600: PUSH
46601: LD_INT 1
46603: LESS
46604: IFFALSE 46608
// exit ;
46606: GO 46911
// if pos = 1 then
46608: LD_VAR 0 2
46612: PUSH
46613: LD_INT 1
46615: EQUAL
46616: IFFALSE 46649
// result := Replace ( arr , pos [ 1 ] , value ) else
46618: LD_ADDR_VAR 0 4
46622: PUSH
46623: LD_VAR 0 1
46627: PPUSH
46628: LD_VAR 0 2
46632: PUSH
46633: LD_INT 1
46635: ARRAY
46636: PPUSH
46637: LD_VAR 0 3
46641: PPUSH
46642: CALL_OW 1
46646: ST_TO_ADDR
46647: GO 46911
// begin tmp := arr ;
46649: LD_ADDR_VAR 0 6
46653: PUSH
46654: LD_VAR 0 1
46658: ST_TO_ADDR
// s_arr := [ tmp ] ;
46659: LD_ADDR_VAR 0 7
46663: PUSH
46664: LD_VAR 0 6
46668: PUSH
46669: EMPTY
46670: LIST
46671: ST_TO_ADDR
// for i = 1 to pos - 1 do
46672: LD_ADDR_VAR 0 5
46676: PUSH
46677: DOUBLE
46678: LD_INT 1
46680: DEC
46681: ST_TO_ADDR
46682: LD_VAR 0 2
46686: PUSH
46687: LD_INT 1
46689: MINUS
46690: PUSH
46691: FOR_TO
46692: IFFALSE 46737
// begin tmp := tmp [ pos [ i ] ] ;
46694: LD_ADDR_VAR 0 6
46698: PUSH
46699: LD_VAR 0 6
46703: PUSH
46704: LD_VAR 0 2
46708: PUSH
46709: LD_VAR 0 5
46713: ARRAY
46714: ARRAY
46715: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46716: LD_ADDR_VAR 0 7
46720: PUSH
46721: LD_VAR 0 7
46725: PUSH
46726: LD_VAR 0 6
46730: PUSH
46731: EMPTY
46732: LIST
46733: ADD
46734: ST_TO_ADDR
// end ;
46735: GO 46691
46737: POP
46738: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46739: LD_ADDR_VAR 0 6
46743: PUSH
46744: LD_VAR 0 6
46748: PPUSH
46749: LD_VAR 0 2
46753: PUSH
46754: LD_VAR 0 2
46758: ARRAY
46759: PPUSH
46760: LD_VAR 0 3
46764: PPUSH
46765: CALL_OW 1
46769: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46770: LD_ADDR_VAR 0 7
46774: PUSH
46775: LD_VAR 0 7
46779: PPUSH
46780: LD_VAR 0 7
46784: PPUSH
46785: LD_VAR 0 6
46789: PPUSH
46790: CALL_OW 1
46794: ST_TO_ADDR
// for i = s_arr downto 2 do
46795: LD_ADDR_VAR 0 5
46799: PUSH
46800: DOUBLE
46801: LD_VAR 0 7
46805: INC
46806: ST_TO_ADDR
46807: LD_INT 2
46809: PUSH
46810: FOR_DOWNTO
46811: IFFALSE 46895
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46813: LD_ADDR_VAR 0 6
46817: PUSH
46818: LD_VAR 0 7
46822: PUSH
46823: LD_VAR 0 5
46827: PUSH
46828: LD_INT 1
46830: MINUS
46831: ARRAY
46832: PPUSH
46833: LD_VAR 0 2
46837: PUSH
46838: LD_VAR 0 5
46842: PUSH
46843: LD_INT 1
46845: MINUS
46846: ARRAY
46847: PPUSH
46848: LD_VAR 0 7
46852: PUSH
46853: LD_VAR 0 5
46857: ARRAY
46858: PPUSH
46859: CALL_OW 1
46863: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46864: LD_ADDR_VAR 0 7
46868: PUSH
46869: LD_VAR 0 7
46873: PPUSH
46874: LD_VAR 0 5
46878: PUSH
46879: LD_INT 1
46881: MINUS
46882: PPUSH
46883: LD_VAR 0 6
46887: PPUSH
46888: CALL_OW 1
46892: ST_TO_ADDR
// end ;
46893: GO 46810
46895: POP
46896: POP
// result := s_arr [ 1 ] ;
46897: LD_ADDR_VAR 0 4
46901: PUSH
46902: LD_VAR 0 7
46906: PUSH
46907: LD_INT 1
46909: ARRAY
46910: ST_TO_ADDR
// end ; end ;
46911: LD_VAR 0 4
46915: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46916: LD_INT 0
46918: PPUSH
46919: PPUSH
// if not list then
46920: LD_VAR 0 1
46924: NOT
46925: IFFALSE 46929
// exit ;
46927: GO 47020
// i := list [ pos1 ] ;
46929: LD_ADDR_VAR 0 5
46933: PUSH
46934: LD_VAR 0 1
46938: PUSH
46939: LD_VAR 0 2
46943: ARRAY
46944: ST_TO_ADDR
// if not i then
46945: LD_VAR 0 5
46949: NOT
46950: IFFALSE 46954
// exit ;
46952: GO 47020
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46954: LD_ADDR_VAR 0 1
46958: PUSH
46959: LD_VAR 0 1
46963: PPUSH
46964: LD_VAR 0 2
46968: PPUSH
46969: LD_VAR 0 1
46973: PUSH
46974: LD_VAR 0 3
46978: ARRAY
46979: PPUSH
46980: CALL_OW 1
46984: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46985: LD_ADDR_VAR 0 1
46989: PUSH
46990: LD_VAR 0 1
46994: PPUSH
46995: LD_VAR 0 3
46999: PPUSH
47000: LD_VAR 0 5
47004: PPUSH
47005: CALL_OW 1
47009: ST_TO_ADDR
// result := list ;
47010: LD_ADDR_VAR 0 4
47014: PUSH
47015: LD_VAR 0 1
47019: ST_TO_ADDR
// end ;
47020: LD_VAR 0 4
47024: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47025: LD_INT 0
47027: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47028: LD_ADDR_VAR 0 5
47032: PUSH
47033: LD_VAR 0 1
47037: PPUSH
47038: CALL_OW 250
47042: PPUSH
47043: LD_VAR 0 1
47047: PPUSH
47048: CALL_OW 251
47052: PPUSH
47053: LD_VAR 0 2
47057: PPUSH
47058: LD_VAR 0 3
47062: PPUSH
47063: LD_VAR 0 4
47067: PPUSH
47068: CALL 47078 0 5
47072: ST_TO_ADDR
// end ;
47073: LD_VAR 0 5
47077: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47078: LD_INT 0
47080: PPUSH
47081: PPUSH
47082: PPUSH
47083: PPUSH
// if not list then
47084: LD_VAR 0 3
47088: NOT
47089: IFFALSE 47093
// exit ;
47091: GO 47481
// result := [ ] ;
47093: LD_ADDR_VAR 0 6
47097: PUSH
47098: EMPTY
47099: ST_TO_ADDR
// for i in list do
47100: LD_ADDR_VAR 0 7
47104: PUSH
47105: LD_VAR 0 3
47109: PUSH
47110: FOR_IN
47111: IFFALSE 47313
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47113: LD_ADDR_VAR 0 9
47117: PUSH
47118: LD_VAR 0 7
47122: PPUSH
47123: LD_VAR 0 1
47127: PPUSH
47128: LD_VAR 0 2
47132: PPUSH
47133: CALL_OW 297
47137: ST_TO_ADDR
// if not result then
47138: LD_VAR 0 6
47142: NOT
47143: IFFALSE 47169
// result := [ [ i , tmp ] ] else
47145: LD_ADDR_VAR 0 6
47149: PUSH
47150: LD_VAR 0 7
47154: PUSH
47155: LD_VAR 0 9
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: EMPTY
47165: LIST
47166: ST_TO_ADDR
47167: GO 47311
// begin if result [ result ] [ 2 ] < tmp then
47169: LD_VAR 0 6
47173: PUSH
47174: LD_VAR 0 6
47178: ARRAY
47179: PUSH
47180: LD_INT 2
47182: ARRAY
47183: PUSH
47184: LD_VAR 0 9
47188: LESS
47189: IFFALSE 47231
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47191: LD_ADDR_VAR 0 6
47195: PUSH
47196: LD_VAR 0 6
47200: PPUSH
47201: LD_VAR 0 6
47205: PUSH
47206: LD_INT 1
47208: PLUS
47209: PPUSH
47210: LD_VAR 0 7
47214: PUSH
47215: LD_VAR 0 9
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PPUSH
47224: CALL_OW 2
47228: ST_TO_ADDR
47229: GO 47311
// for j = 1 to result do
47231: LD_ADDR_VAR 0 8
47235: PUSH
47236: DOUBLE
47237: LD_INT 1
47239: DEC
47240: ST_TO_ADDR
47241: LD_VAR 0 6
47245: PUSH
47246: FOR_TO
47247: IFFALSE 47309
// begin if tmp < result [ j ] [ 2 ] then
47249: LD_VAR 0 9
47253: PUSH
47254: LD_VAR 0 6
47258: PUSH
47259: LD_VAR 0 8
47263: ARRAY
47264: PUSH
47265: LD_INT 2
47267: ARRAY
47268: LESS
47269: IFFALSE 47307
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47271: LD_ADDR_VAR 0 6
47275: PUSH
47276: LD_VAR 0 6
47280: PPUSH
47281: LD_VAR 0 8
47285: PPUSH
47286: LD_VAR 0 7
47290: PUSH
47291: LD_VAR 0 9
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PPUSH
47300: CALL_OW 2
47304: ST_TO_ADDR
// break ;
47305: GO 47309
// end ; end ;
47307: GO 47246
47309: POP
47310: POP
// end ; end ;
47311: GO 47110
47313: POP
47314: POP
// if result and not asc then
47315: LD_VAR 0 6
47319: PUSH
47320: LD_VAR 0 4
47324: NOT
47325: AND
47326: IFFALSE 47401
// begin tmp := result ;
47328: LD_ADDR_VAR 0 9
47332: PUSH
47333: LD_VAR 0 6
47337: ST_TO_ADDR
// for i = tmp downto 1 do
47338: LD_ADDR_VAR 0 7
47342: PUSH
47343: DOUBLE
47344: LD_VAR 0 9
47348: INC
47349: ST_TO_ADDR
47350: LD_INT 1
47352: PUSH
47353: FOR_DOWNTO
47354: IFFALSE 47399
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47356: LD_ADDR_VAR 0 6
47360: PUSH
47361: LD_VAR 0 6
47365: PPUSH
47366: LD_VAR 0 9
47370: PUSH
47371: LD_VAR 0 7
47375: MINUS
47376: PUSH
47377: LD_INT 1
47379: PLUS
47380: PPUSH
47381: LD_VAR 0 9
47385: PUSH
47386: LD_VAR 0 7
47390: ARRAY
47391: PPUSH
47392: CALL_OW 1
47396: ST_TO_ADDR
47397: GO 47353
47399: POP
47400: POP
// end ; tmp := [ ] ;
47401: LD_ADDR_VAR 0 9
47405: PUSH
47406: EMPTY
47407: ST_TO_ADDR
// if mode then
47408: LD_VAR 0 5
47412: IFFALSE 47481
// begin for i = 1 to result do
47414: LD_ADDR_VAR 0 7
47418: PUSH
47419: DOUBLE
47420: LD_INT 1
47422: DEC
47423: ST_TO_ADDR
47424: LD_VAR 0 6
47428: PUSH
47429: FOR_TO
47430: IFFALSE 47469
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47432: LD_ADDR_VAR 0 9
47436: PUSH
47437: LD_VAR 0 9
47441: PPUSH
47442: LD_VAR 0 7
47446: PPUSH
47447: LD_VAR 0 6
47451: PUSH
47452: LD_VAR 0 7
47456: ARRAY
47457: PUSH
47458: LD_INT 1
47460: ARRAY
47461: PPUSH
47462: CALL_OW 1
47466: ST_TO_ADDR
47467: GO 47429
47469: POP
47470: POP
// result := tmp ;
47471: LD_ADDR_VAR 0 6
47475: PUSH
47476: LD_VAR 0 9
47480: ST_TO_ADDR
// end ; end ;
47481: LD_VAR 0 6
47485: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47486: LD_INT 0
47488: PPUSH
47489: PPUSH
47490: PPUSH
47491: PPUSH
47492: PPUSH
47493: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47494: LD_ADDR_VAR 0 5
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: EMPTY
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: ST_TO_ADDR
// if not x or not y then
47516: LD_VAR 0 2
47520: NOT
47521: PUSH
47522: LD_VAR 0 3
47526: NOT
47527: OR
47528: IFFALSE 47532
// exit ;
47530: GO 49182
// if not range then
47532: LD_VAR 0 4
47536: NOT
47537: IFFALSE 47547
// range := 10 ;
47539: LD_ADDR_VAR 0 4
47543: PUSH
47544: LD_INT 10
47546: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47547: LD_ADDR_VAR 0 8
47551: PUSH
47552: LD_INT 81
47554: PUSH
47555: LD_VAR 0 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 92
47566: PUSH
47567: LD_VAR 0 2
47571: PUSH
47572: LD_VAR 0 3
47576: PUSH
47577: LD_VAR 0 4
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 3
47590: PUSH
47591: LD_INT 21
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: LIST
47609: PPUSH
47610: CALL_OW 69
47614: ST_TO_ADDR
// if not tmp then
47615: LD_VAR 0 8
47619: NOT
47620: IFFALSE 47624
// exit ;
47622: GO 49182
// for i in tmp do
47624: LD_ADDR_VAR 0 6
47628: PUSH
47629: LD_VAR 0 8
47633: PUSH
47634: FOR_IN
47635: IFFALSE 49157
// begin points := [ 0 , 0 , 0 ] ;
47637: LD_ADDR_VAR 0 9
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: LIST
47655: ST_TO_ADDR
// bpoints := 1 ;
47656: LD_ADDR_VAR 0 10
47660: PUSH
47661: LD_INT 1
47663: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47664: LD_VAR 0 6
47668: PPUSH
47669: CALL_OW 247
47673: PUSH
47674: LD_INT 1
47676: DOUBLE
47677: EQUAL
47678: IFTRUE 47682
47680: GO 48260
47682: POP
// begin if GetClass ( i ) = 1 then
47683: LD_VAR 0 6
47687: PPUSH
47688: CALL_OW 257
47692: PUSH
47693: LD_INT 1
47695: EQUAL
47696: IFFALSE 47717
// points := [ 10 , 5 , 3 ] ;
47698: LD_ADDR_VAR 0 9
47702: PUSH
47703: LD_INT 10
47705: PUSH
47706: LD_INT 5
47708: PUSH
47709: LD_INT 3
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: LIST
47716: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47717: LD_VAR 0 6
47721: PPUSH
47722: CALL_OW 257
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: LD_INT 3
47732: PUSH
47733: LD_INT 4
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: LIST
47740: IN
47741: IFFALSE 47762
// points := [ 3 , 2 , 1 ] ;
47743: LD_ADDR_VAR 0 9
47747: PUSH
47748: LD_INT 3
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: LIST
47761: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47762: LD_VAR 0 6
47766: PPUSH
47767: CALL_OW 257
47771: PUSH
47772: LD_INT 5
47774: EQUAL
47775: IFFALSE 47796
// points := [ 130 , 5 , 2 ] ;
47777: LD_ADDR_VAR 0 9
47781: PUSH
47782: LD_INT 130
47784: PUSH
47785: LD_INT 5
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: LIST
47795: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47796: LD_VAR 0 6
47800: PPUSH
47801: CALL_OW 257
47805: PUSH
47806: LD_INT 8
47808: EQUAL
47809: IFFALSE 47830
// points := [ 35 , 35 , 30 ] ;
47811: LD_ADDR_VAR 0 9
47815: PUSH
47816: LD_INT 35
47818: PUSH
47819: LD_INT 35
47821: PUSH
47822: LD_INT 30
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47830: LD_VAR 0 6
47834: PPUSH
47835: CALL_OW 257
47839: PUSH
47840: LD_INT 9
47842: EQUAL
47843: IFFALSE 47864
// points := [ 20 , 55 , 40 ] ;
47845: LD_ADDR_VAR 0 9
47849: PUSH
47850: LD_INT 20
47852: PUSH
47853: LD_INT 55
47855: PUSH
47856: LD_INT 40
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: LIST
47863: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47864: LD_VAR 0 6
47868: PPUSH
47869: CALL_OW 257
47873: PUSH
47874: LD_INT 12
47876: PUSH
47877: LD_INT 16
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: IN
47884: IFFALSE 47905
// points := [ 5 , 3 , 2 ] ;
47886: LD_ADDR_VAR 0 9
47890: PUSH
47891: LD_INT 5
47893: PUSH
47894: LD_INT 3
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: LIST
47904: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47905: LD_VAR 0 6
47909: PPUSH
47910: CALL_OW 257
47914: PUSH
47915: LD_INT 17
47917: EQUAL
47918: IFFALSE 47939
// points := [ 100 , 50 , 75 ] ;
47920: LD_ADDR_VAR 0 9
47924: PUSH
47925: LD_INT 100
47927: PUSH
47928: LD_INT 50
47930: PUSH
47931: LD_INT 75
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: LIST
47938: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47939: LD_VAR 0 6
47943: PPUSH
47944: CALL_OW 257
47948: PUSH
47949: LD_INT 15
47951: EQUAL
47952: IFFALSE 47973
// points := [ 10 , 5 , 3 ] ;
47954: LD_ADDR_VAR 0 9
47958: PUSH
47959: LD_INT 10
47961: PUSH
47962: LD_INT 5
47964: PUSH
47965: LD_INT 3
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: LIST
47972: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47973: LD_VAR 0 6
47977: PPUSH
47978: CALL_OW 257
47982: PUSH
47983: LD_INT 14
47985: EQUAL
47986: IFFALSE 48007
// points := [ 10 , 0 , 0 ] ;
47988: LD_ADDR_VAR 0 9
47992: PUSH
47993: LD_INT 10
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: LIST
48006: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48007: LD_VAR 0 6
48011: PPUSH
48012: CALL_OW 257
48016: PUSH
48017: LD_INT 11
48019: EQUAL
48020: IFFALSE 48041
// points := [ 30 , 10 , 5 ] ;
48022: LD_ADDR_VAR 0 9
48026: PUSH
48027: LD_INT 30
48029: PUSH
48030: LD_INT 10
48032: PUSH
48033: LD_INT 5
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: LIST
48040: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48041: LD_VAR 0 1
48045: PPUSH
48046: LD_INT 5
48048: PPUSH
48049: CALL_OW 321
48053: PUSH
48054: LD_INT 2
48056: EQUAL
48057: IFFALSE 48074
// bpoints := bpoints * 1.8 ;
48059: LD_ADDR_VAR 0 10
48063: PUSH
48064: LD_VAR 0 10
48068: PUSH
48069: LD_REAL  1.80000000000000E+0000
48072: MUL
48073: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48074: LD_VAR 0 6
48078: PPUSH
48079: CALL_OW 257
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: LD_INT 3
48092: PUSH
48093: LD_INT 4
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: IN
48102: PUSH
48103: LD_VAR 0 1
48107: PPUSH
48108: LD_INT 51
48110: PPUSH
48111: CALL_OW 321
48115: PUSH
48116: LD_INT 2
48118: EQUAL
48119: AND
48120: IFFALSE 48137
// bpoints := bpoints * 1.2 ;
48122: LD_ADDR_VAR 0 10
48126: PUSH
48127: LD_VAR 0 10
48131: PUSH
48132: LD_REAL  1.20000000000000E+0000
48135: MUL
48136: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48137: LD_VAR 0 6
48141: PPUSH
48142: CALL_OW 257
48146: PUSH
48147: LD_INT 5
48149: PUSH
48150: LD_INT 7
48152: PUSH
48153: LD_INT 9
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: LIST
48160: IN
48161: PUSH
48162: LD_VAR 0 1
48166: PPUSH
48167: LD_INT 52
48169: PPUSH
48170: CALL_OW 321
48174: PUSH
48175: LD_INT 2
48177: EQUAL
48178: AND
48179: IFFALSE 48196
// bpoints := bpoints * 1.5 ;
48181: LD_ADDR_VAR 0 10
48185: PUSH
48186: LD_VAR 0 10
48190: PUSH
48191: LD_REAL  1.50000000000000E+0000
48194: MUL
48195: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48196: LD_VAR 0 1
48200: PPUSH
48201: LD_INT 66
48203: PPUSH
48204: CALL_OW 321
48208: PUSH
48209: LD_INT 2
48211: EQUAL
48212: IFFALSE 48229
// bpoints := bpoints * 1.1 ;
48214: LD_ADDR_VAR 0 10
48218: PUSH
48219: LD_VAR 0 10
48223: PUSH
48224: LD_REAL  1.10000000000000E+0000
48227: MUL
48228: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48229: LD_ADDR_VAR 0 10
48233: PUSH
48234: LD_VAR 0 10
48238: PUSH
48239: LD_VAR 0 6
48243: PPUSH
48244: LD_INT 1
48246: PPUSH
48247: CALL_OW 259
48251: PUSH
48252: LD_REAL  1.15000000000000E+0000
48255: MUL
48256: MUL
48257: ST_TO_ADDR
// end ; unit_vehicle :
48258: GO 49086
48260: LD_INT 2
48262: DOUBLE
48263: EQUAL
48264: IFTRUE 48268
48266: GO 49074
48268: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48269: LD_VAR 0 6
48273: PPUSH
48274: CALL_OW 264
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: LD_INT 42
48284: PUSH
48285: LD_INT 24
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: LIST
48292: IN
48293: IFFALSE 48314
// points := [ 25 , 5 , 3 ] ;
48295: LD_ADDR_VAR 0 9
48299: PUSH
48300: LD_INT 25
48302: PUSH
48303: LD_INT 5
48305: PUSH
48306: LD_INT 3
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: LIST
48313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48314: LD_VAR 0 6
48318: PPUSH
48319: CALL_OW 264
48323: PUSH
48324: LD_INT 4
48326: PUSH
48327: LD_INT 43
48329: PUSH
48330: LD_INT 25
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: LIST
48337: IN
48338: IFFALSE 48359
// points := [ 40 , 15 , 5 ] ;
48340: LD_ADDR_VAR 0 9
48344: PUSH
48345: LD_INT 40
48347: PUSH
48348: LD_INT 15
48350: PUSH
48351: LD_INT 5
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: LIST
48358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48359: LD_VAR 0 6
48363: PPUSH
48364: CALL_OW 264
48368: PUSH
48369: LD_INT 3
48371: PUSH
48372: LD_INT 23
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: IN
48379: IFFALSE 48400
// points := [ 7 , 25 , 8 ] ;
48381: LD_ADDR_VAR 0 9
48385: PUSH
48386: LD_INT 7
48388: PUSH
48389: LD_INT 25
48391: PUSH
48392: LD_INT 8
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: LIST
48399: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48400: LD_VAR 0 6
48404: PPUSH
48405: CALL_OW 264
48409: PUSH
48410: LD_INT 5
48412: PUSH
48413: LD_INT 27
48415: PUSH
48416: LD_INT 44
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: LIST
48423: IN
48424: IFFALSE 48445
// points := [ 14 , 50 , 16 ] ;
48426: LD_ADDR_VAR 0 9
48430: PUSH
48431: LD_INT 14
48433: PUSH
48434: LD_INT 50
48436: PUSH
48437: LD_INT 16
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: LIST
48444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48445: LD_VAR 0 6
48449: PPUSH
48450: CALL_OW 264
48454: PUSH
48455: LD_INT 6
48457: PUSH
48458: LD_INT 46
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: IN
48465: IFFALSE 48486
// points := [ 32 , 120 , 70 ] ;
48467: LD_ADDR_VAR 0 9
48471: PUSH
48472: LD_INT 32
48474: PUSH
48475: LD_INT 120
48477: PUSH
48478: LD_INT 70
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: LIST
48485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48486: LD_VAR 0 6
48490: PPUSH
48491: CALL_OW 264
48495: PUSH
48496: LD_INT 7
48498: PUSH
48499: LD_INT 28
48501: PUSH
48502: LD_INT 45
48504: PUSH
48505: LD_INT 92
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: IN
48514: IFFALSE 48535
// points := [ 35 , 20 , 45 ] ;
48516: LD_ADDR_VAR 0 9
48520: PUSH
48521: LD_INT 35
48523: PUSH
48524: LD_INT 20
48526: PUSH
48527: LD_INT 45
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: LIST
48534: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48535: LD_VAR 0 6
48539: PPUSH
48540: CALL_OW 264
48544: PUSH
48545: LD_INT 47
48547: PUSH
48548: EMPTY
48549: LIST
48550: IN
48551: IFFALSE 48572
// points := [ 67 , 45 , 75 ] ;
48553: LD_ADDR_VAR 0 9
48557: PUSH
48558: LD_INT 67
48560: PUSH
48561: LD_INT 45
48563: PUSH
48564: LD_INT 75
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: LIST
48571: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48572: LD_VAR 0 6
48576: PPUSH
48577: CALL_OW 264
48581: PUSH
48582: LD_INT 26
48584: PUSH
48585: EMPTY
48586: LIST
48587: IN
48588: IFFALSE 48609
// points := [ 120 , 30 , 80 ] ;
48590: LD_ADDR_VAR 0 9
48594: PUSH
48595: LD_INT 120
48597: PUSH
48598: LD_INT 30
48600: PUSH
48601: LD_INT 80
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: LIST
48608: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48609: LD_VAR 0 6
48613: PPUSH
48614: CALL_OW 264
48618: PUSH
48619: LD_INT 22
48621: PUSH
48622: EMPTY
48623: LIST
48624: IN
48625: IFFALSE 48646
// points := [ 40 , 1 , 1 ] ;
48627: LD_ADDR_VAR 0 9
48631: PUSH
48632: LD_INT 40
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: LIST
48645: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48646: LD_VAR 0 6
48650: PPUSH
48651: CALL_OW 264
48655: PUSH
48656: LD_INT 29
48658: PUSH
48659: EMPTY
48660: LIST
48661: IN
48662: IFFALSE 48683
// points := [ 70 , 200 , 400 ] ;
48664: LD_ADDR_VAR 0 9
48668: PUSH
48669: LD_INT 70
48671: PUSH
48672: LD_INT 200
48674: PUSH
48675: LD_INT 400
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: LIST
48682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48683: LD_VAR 0 6
48687: PPUSH
48688: CALL_OW 264
48692: PUSH
48693: LD_INT 14
48695: PUSH
48696: LD_INT 53
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: IN
48703: IFFALSE 48724
// points := [ 40 , 10 , 20 ] ;
48705: LD_ADDR_VAR 0 9
48709: PUSH
48710: LD_INT 40
48712: PUSH
48713: LD_INT 10
48715: PUSH
48716: LD_INT 20
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: LIST
48723: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48724: LD_VAR 0 6
48728: PPUSH
48729: CALL_OW 264
48733: PUSH
48734: LD_INT 9
48736: PUSH
48737: EMPTY
48738: LIST
48739: IN
48740: IFFALSE 48761
// points := [ 5 , 70 , 20 ] ;
48742: LD_ADDR_VAR 0 9
48746: PUSH
48747: LD_INT 5
48749: PUSH
48750: LD_INT 70
48752: PUSH
48753: LD_INT 20
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: LIST
48760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48761: LD_VAR 0 6
48765: PPUSH
48766: CALL_OW 264
48770: PUSH
48771: LD_INT 10
48773: PUSH
48774: EMPTY
48775: LIST
48776: IN
48777: IFFALSE 48798
// points := [ 35 , 110 , 70 ] ;
48779: LD_ADDR_VAR 0 9
48783: PUSH
48784: LD_INT 35
48786: PUSH
48787: LD_INT 110
48789: PUSH
48790: LD_INT 70
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: LIST
48797: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48798: LD_VAR 0 6
48802: PPUSH
48803: CALL_OW 265
48807: PUSH
48808: LD_INT 25
48810: EQUAL
48811: IFFALSE 48832
// points := [ 80 , 65 , 100 ] ;
48813: LD_ADDR_VAR 0 9
48817: PUSH
48818: LD_INT 80
48820: PUSH
48821: LD_INT 65
48823: PUSH
48824: LD_INT 100
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: LIST
48831: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48832: LD_VAR 0 6
48836: PPUSH
48837: CALL_OW 263
48841: PUSH
48842: LD_INT 1
48844: EQUAL
48845: IFFALSE 48880
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48847: LD_ADDR_VAR 0 10
48851: PUSH
48852: LD_VAR 0 10
48856: PUSH
48857: LD_VAR 0 6
48861: PPUSH
48862: CALL_OW 311
48866: PPUSH
48867: LD_INT 3
48869: PPUSH
48870: CALL_OW 259
48874: PUSH
48875: LD_INT 4
48877: MUL
48878: MUL
48879: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48880: LD_VAR 0 6
48884: PPUSH
48885: CALL_OW 263
48889: PUSH
48890: LD_INT 2
48892: EQUAL
48893: IFFALSE 48944
// begin j := IsControledBy ( i ) ;
48895: LD_ADDR_VAR 0 7
48899: PUSH
48900: LD_VAR 0 6
48904: PPUSH
48905: CALL_OW 312
48909: ST_TO_ADDR
// if j then
48910: LD_VAR 0 7
48914: IFFALSE 48944
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48916: LD_ADDR_VAR 0 10
48920: PUSH
48921: LD_VAR 0 10
48925: PUSH
48926: LD_VAR 0 7
48930: PPUSH
48931: LD_INT 3
48933: PPUSH
48934: CALL_OW 259
48938: PUSH
48939: LD_INT 3
48941: MUL
48942: MUL
48943: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48944: LD_VAR 0 6
48948: PPUSH
48949: CALL_OW 264
48953: PUSH
48954: LD_INT 5
48956: PUSH
48957: LD_INT 6
48959: PUSH
48960: LD_INT 46
48962: PUSH
48963: LD_INT 44
48965: PUSH
48966: LD_INT 47
48968: PUSH
48969: LD_INT 45
48971: PUSH
48972: LD_INT 28
48974: PUSH
48975: LD_INT 7
48977: PUSH
48978: LD_INT 27
48980: PUSH
48981: LD_INT 29
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: IN
48996: PUSH
48997: LD_VAR 0 1
49001: PPUSH
49002: LD_INT 52
49004: PPUSH
49005: CALL_OW 321
49009: PUSH
49010: LD_INT 2
49012: EQUAL
49013: AND
49014: IFFALSE 49031
// bpoints := bpoints * 1.2 ;
49016: LD_ADDR_VAR 0 10
49020: PUSH
49021: LD_VAR 0 10
49025: PUSH
49026: LD_REAL  1.20000000000000E+0000
49029: MUL
49030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49031: LD_VAR 0 6
49035: PPUSH
49036: CALL_OW 264
49040: PUSH
49041: LD_INT 6
49043: PUSH
49044: LD_INT 46
49046: PUSH
49047: LD_INT 47
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: LIST
49054: IN
49055: IFFALSE 49072
// bpoints := bpoints * 1.2 ;
49057: LD_ADDR_VAR 0 10
49061: PUSH
49062: LD_VAR 0 10
49066: PUSH
49067: LD_REAL  1.20000000000000E+0000
49070: MUL
49071: ST_TO_ADDR
// end ; unit_building :
49072: GO 49086
49074: LD_INT 3
49076: DOUBLE
49077: EQUAL
49078: IFTRUE 49082
49080: GO 49085
49082: POP
// ; end ;
49083: GO 49086
49085: POP
// for j = 1 to 3 do
49086: LD_ADDR_VAR 0 7
49090: PUSH
49091: DOUBLE
49092: LD_INT 1
49094: DEC
49095: ST_TO_ADDR
49096: LD_INT 3
49098: PUSH
49099: FOR_TO
49100: IFFALSE 49153
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49102: LD_ADDR_VAR 0 5
49106: PUSH
49107: LD_VAR 0 5
49111: PPUSH
49112: LD_VAR 0 7
49116: PPUSH
49117: LD_VAR 0 5
49121: PUSH
49122: LD_VAR 0 7
49126: ARRAY
49127: PUSH
49128: LD_VAR 0 9
49132: PUSH
49133: LD_VAR 0 7
49137: ARRAY
49138: PUSH
49139: LD_VAR 0 10
49143: MUL
49144: PLUS
49145: PPUSH
49146: CALL_OW 1
49150: ST_TO_ADDR
49151: GO 49099
49153: POP
49154: POP
// end ;
49155: GO 47634
49157: POP
49158: POP
// result := Replace ( result , 4 , tmp ) ;
49159: LD_ADDR_VAR 0 5
49163: PUSH
49164: LD_VAR 0 5
49168: PPUSH
49169: LD_INT 4
49171: PPUSH
49172: LD_VAR 0 8
49176: PPUSH
49177: CALL_OW 1
49181: ST_TO_ADDR
// end ;
49182: LD_VAR 0 5
49186: RET
// export function DangerAtRange ( unit , range ) ; begin
49187: LD_INT 0
49189: PPUSH
// if not unit then
49190: LD_VAR 0 1
49194: NOT
49195: IFFALSE 49199
// exit ;
49197: GO 49244
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49199: LD_ADDR_VAR 0 3
49203: PUSH
49204: LD_VAR 0 1
49208: PPUSH
49209: CALL_OW 255
49213: PPUSH
49214: LD_VAR 0 1
49218: PPUSH
49219: CALL_OW 250
49223: PPUSH
49224: LD_VAR 0 1
49228: PPUSH
49229: CALL_OW 251
49233: PPUSH
49234: LD_VAR 0 2
49238: PPUSH
49239: CALL 47486 0 4
49243: ST_TO_ADDR
// end ;
49244: LD_VAR 0 3
49248: RET
// export function DangerInArea ( side , area ) ; begin
49249: LD_INT 0
49251: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49252: LD_ADDR_VAR 0 3
49256: PUSH
49257: LD_VAR 0 2
49261: PPUSH
49262: LD_INT 81
49264: PUSH
49265: LD_VAR 0 1
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PPUSH
49274: CALL_OW 70
49278: ST_TO_ADDR
// end ;
49279: LD_VAR 0 3
49283: RET
// export function IsExtension ( b ) ; begin
49284: LD_INT 0
49286: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49287: LD_ADDR_VAR 0 2
49291: PUSH
49292: LD_VAR 0 1
49296: PUSH
49297: LD_INT 23
49299: PUSH
49300: LD_INT 20
49302: PUSH
49303: LD_INT 22
49305: PUSH
49306: LD_INT 17
49308: PUSH
49309: LD_INT 24
49311: PUSH
49312: LD_INT 21
49314: PUSH
49315: LD_INT 19
49317: PUSH
49318: LD_INT 16
49320: PUSH
49321: LD_INT 25
49323: PUSH
49324: LD_INT 18
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: IN
49339: ST_TO_ADDR
// end ;
49340: LD_VAR 0 2
49344: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49345: LD_INT 0
49347: PPUSH
49348: PPUSH
49349: PPUSH
// result := [ ] ;
49350: LD_ADDR_VAR 0 4
49354: PUSH
49355: EMPTY
49356: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49357: LD_ADDR_VAR 0 5
49361: PUSH
49362: LD_VAR 0 2
49366: PPUSH
49367: LD_INT 21
49369: PUSH
49370: LD_INT 3
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PPUSH
49377: CALL_OW 70
49381: ST_TO_ADDR
// if not tmp then
49382: LD_VAR 0 5
49386: NOT
49387: IFFALSE 49391
// exit ;
49389: GO 49455
// if checkLink then
49391: LD_VAR 0 3
49395: IFFALSE 49445
// begin for i in tmp do
49397: LD_ADDR_VAR 0 6
49401: PUSH
49402: LD_VAR 0 5
49406: PUSH
49407: FOR_IN
49408: IFFALSE 49443
// if GetBase ( i ) <> base then
49410: LD_VAR 0 6
49414: PPUSH
49415: CALL_OW 274
49419: PUSH
49420: LD_VAR 0 1
49424: NONEQUAL
49425: IFFALSE 49441
// ComLinkToBase ( base , i ) ;
49427: LD_VAR 0 1
49431: PPUSH
49432: LD_VAR 0 6
49436: PPUSH
49437: CALL_OW 169
49441: GO 49407
49443: POP
49444: POP
// end ; result := tmp ;
49445: LD_ADDR_VAR 0 4
49449: PUSH
49450: LD_VAR 0 5
49454: ST_TO_ADDR
// end ;
49455: LD_VAR 0 4
49459: RET
// export function ComComplete ( units , b ) ; var i ; begin
49460: LD_INT 0
49462: PPUSH
49463: PPUSH
// if not units then
49464: LD_VAR 0 1
49468: NOT
49469: IFFALSE 49473
// exit ;
49471: GO 49563
// for i in units do
49473: LD_ADDR_VAR 0 4
49477: PUSH
49478: LD_VAR 0 1
49482: PUSH
49483: FOR_IN
49484: IFFALSE 49561
// if BuildingStatus ( b ) = bs_build then
49486: LD_VAR 0 2
49490: PPUSH
49491: CALL_OW 461
49495: PUSH
49496: LD_INT 1
49498: EQUAL
49499: IFFALSE 49559
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49501: LD_VAR 0 4
49505: PPUSH
49506: LD_STRING h
49508: PUSH
49509: LD_VAR 0 2
49513: PPUSH
49514: CALL_OW 250
49518: PUSH
49519: LD_VAR 0 2
49523: PPUSH
49524: CALL_OW 251
49528: PUSH
49529: LD_VAR 0 2
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: PUSH
49552: EMPTY
49553: LIST
49554: PPUSH
49555: CALL_OW 446
49559: GO 49483
49561: POP
49562: POP
// end ;
49563: LD_VAR 0 3
49567: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49568: LD_INT 0
49570: PPUSH
49571: PPUSH
49572: PPUSH
49573: PPUSH
49574: PPUSH
49575: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49576: LD_VAR 0 1
49580: NOT
49581: PUSH
49582: LD_VAR 0 1
49586: PPUSH
49587: CALL_OW 263
49591: PUSH
49592: LD_INT 2
49594: NONEQUAL
49595: OR
49596: IFFALSE 49600
// exit ;
49598: GO 49916
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49600: LD_ADDR_VAR 0 6
49604: PUSH
49605: LD_INT 22
49607: PUSH
49608: LD_VAR 0 1
49612: PPUSH
49613: CALL_OW 255
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: LD_INT 30
49627: PUSH
49628: LD_INT 36
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 34
49637: PUSH
49638: LD_INT 31
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: LIST
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PPUSH
49654: CALL_OW 69
49658: ST_TO_ADDR
// if not tmp then
49659: LD_VAR 0 6
49663: NOT
49664: IFFALSE 49668
// exit ;
49666: GO 49916
// result := [ ] ;
49668: LD_ADDR_VAR 0 2
49672: PUSH
49673: EMPTY
49674: ST_TO_ADDR
// for i in tmp do
49675: LD_ADDR_VAR 0 3
49679: PUSH
49680: LD_VAR 0 6
49684: PUSH
49685: FOR_IN
49686: IFFALSE 49757
// begin t := UnitsInside ( i ) ;
49688: LD_ADDR_VAR 0 4
49692: PUSH
49693: LD_VAR 0 3
49697: PPUSH
49698: CALL_OW 313
49702: ST_TO_ADDR
// if t then
49703: LD_VAR 0 4
49707: IFFALSE 49755
// for j in t do
49709: LD_ADDR_VAR 0 7
49713: PUSH
49714: LD_VAR 0 4
49718: PUSH
49719: FOR_IN
49720: IFFALSE 49753
// result := Replace ( result , result + 1 , j ) ;
49722: LD_ADDR_VAR 0 2
49726: PUSH
49727: LD_VAR 0 2
49731: PPUSH
49732: LD_VAR 0 2
49736: PUSH
49737: LD_INT 1
49739: PLUS
49740: PPUSH
49741: LD_VAR 0 7
49745: PPUSH
49746: CALL_OW 1
49750: ST_TO_ADDR
49751: GO 49719
49753: POP
49754: POP
// end ;
49755: GO 49685
49757: POP
49758: POP
// if not result then
49759: LD_VAR 0 2
49763: NOT
49764: IFFALSE 49768
// exit ;
49766: GO 49916
// mech := result [ 1 ] ;
49768: LD_ADDR_VAR 0 5
49772: PUSH
49773: LD_VAR 0 2
49777: PUSH
49778: LD_INT 1
49780: ARRAY
49781: ST_TO_ADDR
// if result > 1 then
49782: LD_VAR 0 2
49786: PUSH
49787: LD_INT 1
49789: GREATER
49790: IFFALSE 49902
// begin for i = 2 to result do
49792: LD_ADDR_VAR 0 3
49796: PUSH
49797: DOUBLE
49798: LD_INT 2
49800: DEC
49801: ST_TO_ADDR
49802: LD_VAR 0 2
49806: PUSH
49807: FOR_TO
49808: IFFALSE 49900
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49810: LD_ADDR_VAR 0 4
49814: PUSH
49815: LD_VAR 0 2
49819: PUSH
49820: LD_VAR 0 3
49824: ARRAY
49825: PPUSH
49826: LD_INT 3
49828: PPUSH
49829: CALL_OW 259
49833: PUSH
49834: LD_VAR 0 2
49838: PUSH
49839: LD_VAR 0 3
49843: ARRAY
49844: PPUSH
49845: CALL_OW 432
49849: MINUS
49850: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49851: LD_VAR 0 4
49855: PUSH
49856: LD_VAR 0 5
49860: PPUSH
49861: LD_INT 3
49863: PPUSH
49864: CALL_OW 259
49868: PUSH
49869: LD_VAR 0 5
49873: PPUSH
49874: CALL_OW 432
49878: MINUS
49879: GREATEREQUAL
49880: IFFALSE 49898
// mech := result [ i ] ;
49882: LD_ADDR_VAR 0 5
49886: PUSH
49887: LD_VAR 0 2
49891: PUSH
49892: LD_VAR 0 3
49896: ARRAY
49897: ST_TO_ADDR
// end ;
49898: GO 49807
49900: POP
49901: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49902: LD_VAR 0 1
49906: PPUSH
49907: LD_VAR 0 5
49911: PPUSH
49912: CALL_OW 135
// end ;
49916: LD_VAR 0 2
49920: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49921: LD_INT 0
49923: PPUSH
49924: PPUSH
49925: PPUSH
49926: PPUSH
49927: PPUSH
49928: PPUSH
49929: PPUSH
49930: PPUSH
49931: PPUSH
49932: PPUSH
49933: PPUSH
49934: PPUSH
49935: PPUSH
// result := [ ] ;
49936: LD_ADDR_VAR 0 7
49940: PUSH
49941: EMPTY
49942: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49943: LD_VAR 0 1
49947: PPUSH
49948: CALL_OW 266
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: IN
49963: NOT
49964: IFFALSE 49968
// exit ;
49966: GO 51602
// if name then
49968: LD_VAR 0 3
49972: IFFALSE 49988
// SetBName ( base_dep , name ) ;
49974: LD_VAR 0 1
49978: PPUSH
49979: LD_VAR 0 3
49983: PPUSH
49984: CALL_OW 500
// base := GetBase ( base_dep ) ;
49988: LD_ADDR_VAR 0 15
49992: PUSH
49993: LD_VAR 0 1
49997: PPUSH
49998: CALL_OW 274
50002: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50003: LD_ADDR_VAR 0 16
50007: PUSH
50008: LD_VAR 0 1
50012: PPUSH
50013: CALL_OW 255
50017: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50018: LD_ADDR_VAR 0 17
50022: PUSH
50023: LD_VAR 0 1
50027: PPUSH
50028: CALL_OW 248
50032: ST_TO_ADDR
// if sources then
50033: LD_VAR 0 5
50037: IFFALSE 50084
// for i = 1 to 3 do
50039: LD_ADDR_VAR 0 8
50043: PUSH
50044: DOUBLE
50045: LD_INT 1
50047: DEC
50048: ST_TO_ADDR
50049: LD_INT 3
50051: PUSH
50052: FOR_TO
50053: IFFALSE 50082
// AddResourceType ( base , i , sources [ i ] ) ;
50055: LD_VAR 0 15
50059: PPUSH
50060: LD_VAR 0 8
50064: PPUSH
50065: LD_VAR 0 5
50069: PUSH
50070: LD_VAR 0 8
50074: ARRAY
50075: PPUSH
50076: CALL_OW 276
50080: GO 50052
50082: POP
50083: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50084: LD_ADDR_VAR 0 18
50088: PUSH
50089: LD_VAR 0 15
50093: PPUSH
50094: LD_VAR 0 2
50098: PPUSH
50099: LD_INT 1
50101: PPUSH
50102: CALL 49345 0 3
50106: ST_TO_ADDR
// InitHc ;
50107: CALL_OW 19
// InitUc ;
50111: CALL_OW 18
// uc_side := side ;
50115: LD_ADDR_OWVAR 20
50119: PUSH
50120: LD_VAR 0 16
50124: ST_TO_ADDR
// uc_nation := nation ;
50125: LD_ADDR_OWVAR 21
50129: PUSH
50130: LD_VAR 0 17
50134: ST_TO_ADDR
// if buildings then
50135: LD_VAR 0 18
50139: IFFALSE 51461
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50141: LD_ADDR_VAR 0 19
50145: PUSH
50146: LD_VAR 0 18
50150: PPUSH
50151: LD_INT 2
50153: PUSH
50154: LD_INT 30
50156: PUSH
50157: LD_INT 29
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 30
50166: PUSH
50167: LD_INT 30
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: LIST
50178: PPUSH
50179: CALL_OW 72
50183: ST_TO_ADDR
// if tmp then
50184: LD_VAR 0 19
50188: IFFALSE 50236
// for i in tmp do
50190: LD_ADDR_VAR 0 8
50194: PUSH
50195: LD_VAR 0 19
50199: PUSH
50200: FOR_IN
50201: IFFALSE 50234
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50203: LD_VAR 0 8
50207: PPUSH
50208: CALL_OW 250
50212: PPUSH
50213: LD_VAR 0 8
50217: PPUSH
50218: CALL_OW 251
50222: PPUSH
50223: LD_VAR 0 16
50227: PPUSH
50228: CALL_OW 441
50232: GO 50200
50234: POP
50235: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50236: LD_VAR 0 18
50240: PPUSH
50241: LD_INT 2
50243: PUSH
50244: LD_INT 30
50246: PUSH
50247: LD_INT 32
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 30
50256: PUSH
50257: LD_INT 33
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: LIST
50268: PPUSH
50269: CALL_OW 72
50273: IFFALSE 50361
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50275: LD_ADDR_VAR 0 8
50279: PUSH
50280: LD_VAR 0 18
50284: PPUSH
50285: LD_INT 2
50287: PUSH
50288: LD_INT 30
50290: PUSH
50291: LD_INT 32
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 30
50300: PUSH
50301: LD_INT 33
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: LIST
50312: PPUSH
50313: CALL_OW 72
50317: PUSH
50318: FOR_IN
50319: IFFALSE 50359
// begin if not GetBWeapon ( i ) then
50321: LD_VAR 0 8
50325: PPUSH
50326: CALL_OW 269
50330: NOT
50331: IFFALSE 50357
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50333: LD_VAR 0 8
50337: PPUSH
50338: LD_VAR 0 8
50342: PPUSH
50343: LD_VAR 0 2
50347: PPUSH
50348: CALL 51607 0 2
50352: PPUSH
50353: CALL_OW 431
// end ;
50357: GO 50318
50359: POP
50360: POP
// end ; for i = 1 to personel do
50361: LD_ADDR_VAR 0 8
50365: PUSH
50366: DOUBLE
50367: LD_INT 1
50369: DEC
50370: ST_TO_ADDR
50371: LD_VAR 0 6
50375: PUSH
50376: FOR_TO
50377: IFFALSE 51441
// begin if i > 4 then
50379: LD_VAR 0 8
50383: PUSH
50384: LD_INT 4
50386: GREATER
50387: IFFALSE 50391
// break ;
50389: GO 51441
// case i of 1 :
50391: LD_VAR 0 8
50395: PUSH
50396: LD_INT 1
50398: DOUBLE
50399: EQUAL
50400: IFTRUE 50404
50402: GO 50484
50404: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50405: LD_ADDR_VAR 0 12
50409: PUSH
50410: LD_VAR 0 18
50414: PPUSH
50415: LD_INT 22
50417: PUSH
50418: LD_VAR 0 16
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 58
50429: PUSH
50430: EMPTY
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: LD_INT 30
50438: PUSH
50439: LD_INT 32
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 30
50448: PUSH
50449: LD_INT 4
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 30
50458: PUSH
50459: LD_INT 5
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: LIST
50476: PPUSH
50477: CALL_OW 72
50481: ST_TO_ADDR
50482: GO 50706
50484: LD_INT 2
50486: DOUBLE
50487: EQUAL
50488: IFTRUE 50492
50490: GO 50554
50492: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50493: LD_ADDR_VAR 0 12
50497: PUSH
50498: LD_VAR 0 18
50502: PPUSH
50503: LD_INT 22
50505: PUSH
50506: LD_VAR 0 16
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 2
50517: PUSH
50518: LD_INT 30
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 30
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: LIST
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PPUSH
50547: CALL_OW 72
50551: ST_TO_ADDR
50552: GO 50706
50554: LD_INT 3
50556: DOUBLE
50557: EQUAL
50558: IFTRUE 50562
50560: GO 50624
50562: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50563: LD_ADDR_VAR 0 12
50567: PUSH
50568: LD_VAR 0 18
50572: PPUSH
50573: LD_INT 22
50575: PUSH
50576: LD_VAR 0 16
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: LD_INT 30
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 30
50600: PUSH
50601: LD_INT 3
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: LIST
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PPUSH
50617: CALL_OW 72
50621: ST_TO_ADDR
50622: GO 50706
50624: LD_INT 4
50626: DOUBLE
50627: EQUAL
50628: IFTRUE 50632
50630: GO 50705
50632: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50633: LD_ADDR_VAR 0 12
50637: PUSH
50638: LD_VAR 0 18
50642: PPUSH
50643: LD_INT 22
50645: PUSH
50646: LD_VAR 0 16
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: LD_INT 30
50660: PUSH
50661: LD_INT 6
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 30
50670: PUSH
50671: LD_INT 7
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 30
50680: PUSH
50681: LD_INT 8
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PPUSH
50698: CALL_OW 72
50702: ST_TO_ADDR
50703: GO 50706
50705: POP
// if i = 1 then
50706: LD_VAR 0 8
50710: PUSH
50711: LD_INT 1
50713: EQUAL
50714: IFFALSE 50825
// begin tmp := [ ] ;
50716: LD_ADDR_VAR 0 19
50720: PUSH
50721: EMPTY
50722: ST_TO_ADDR
// for j in f do
50723: LD_ADDR_VAR 0 9
50727: PUSH
50728: LD_VAR 0 12
50732: PUSH
50733: FOR_IN
50734: IFFALSE 50807
// if GetBType ( j ) = b_bunker then
50736: LD_VAR 0 9
50740: PPUSH
50741: CALL_OW 266
50745: PUSH
50746: LD_INT 32
50748: EQUAL
50749: IFFALSE 50776
// tmp := Insert ( tmp , 1 , j ) else
50751: LD_ADDR_VAR 0 19
50755: PUSH
50756: LD_VAR 0 19
50760: PPUSH
50761: LD_INT 1
50763: PPUSH
50764: LD_VAR 0 9
50768: PPUSH
50769: CALL_OW 2
50773: ST_TO_ADDR
50774: GO 50805
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50776: LD_ADDR_VAR 0 19
50780: PUSH
50781: LD_VAR 0 19
50785: PPUSH
50786: LD_VAR 0 19
50790: PUSH
50791: LD_INT 1
50793: PLUS
50794: PPUSH
50795: LD_VAR 0 9
50799: PPUSH
50800: CALL_OW 2
50804: ST_TO_ADDR
50805: GO 50733
50807: POP
50808: POP
// if tmp then
50809: LD_VAR 0 19
50813: IFFALSE 50825
// f := tmp ;
50815: LD_ADDR_VAR 0 12
50819: PUSH
50820: LD_VAR 0 19
50824: ST_TO_ADDR
// end ; x := personel [ i ] ;
50825: LD_ADDR_VAR 0 13
50829: PUSH
50830: LD_VAR 0 6
50834: PUSH
50835: LD_VAR 0 8
50839: ARRAY
50840: ST_TO_ADDR
// if x = - 1 then
50841: LD_VAR 0 13
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: EQUAL
50850: IFFALSE 51059
// begin for j in f do
50852: LD_ADDR_VAR 0 9
50856: PUSH
50857: LD_VAR 0 12
50861: PUSH
50862: FOR_IN
50863: IFFALSE 51055
// repeat InitHc ;
50865: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50869: LD_VAR 0 9
50873: PPUSH
50874: CALL_OW 266
50878: PUSH
50879: LD_INT 5
50881: EQUAL
50882: IFFALSE 50952
// begin if UnitsInside ( j ) < 3 then
50884: LD_VAR 0 9
50888: PPUSH
50889: CALL_OW 313
50893: PUSH
50894: LD_INT 3
50896: LESS
50897: IFFALSE 50933
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50899: LD_INT 0
50901: PPUSH
50902: LD_INT 5
50904: PUSH
50905: LD_INT 8
50907: PUSH
50908: LD_INT 9
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: LIST
50915: PUSH
50916: LD_VAR 0 17
50920: ARRAY
50921: PPUSH
50922: LD_VAR 0 4
50926: PPUSH
50927: CALL_OW 380
50931: GO 50950
// PrepareHuman ( false , i , skill ) ;
50933: LD_INT 0
50935: PPUSH
50936: LD_VAR 0 8
50940: PPUSH
50941: LD_VAR 0 4
50945: PPUSH
50946: CALL_OW 380
// end else
50950: GO 50969
// PrepareHuman ( false , i , skill ) ;
50952: LD_INT 0
50954: PPUSH
50955: LD_VAR 0 8
50959: PPUSH
50960: LD_VAR 0 4
50964: PPUSH
50965: CALL_OW 380
// un := CreateHuman ;
50969: LD_ADDR_VAR 0 14
50973: PUSH
50974: CALL_OW 44
50978: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50979: LD_ADDR_VAR 0 7
50983: PUSH
50984: LD_VAR 0 7
50988: PPUSH
50989: LD_INT 1
50991: PPUSH
50992: LD_VAR 0 14
50996: PPUSH
50997: CALL_OW 2
51001: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51002: LD_VAR 0 14
51006: PPUSH
51007: LD_VAR 0 9
51011: PPUSH
51012: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51016: LD_VAR 0 9
51020: PPUSH
51021: CALL_OW 313
51025: PUSH
51026: LD_INT 6
51028: EQUAL
51029: PUSH
51030: LD_VAR 0 9
51034: PPUSH
51035: CALL_OW 266
51039: PUSH
51040: LD_INT 32
51042: PUSH
51043: LD_INT 31
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: IN
51050: OR
51051: IFFALSE 50865
51053: GO 50862
51055: POP
51056: POP
// end else
51057: GO 51439
// for j = 1 to x do
51059: LD_ADDR_VAR 0 9
51063: PUSH
51064: DOUBLE
51065: LD_INT 1
51067: DEC
51068: ST_TO_ADDR
51069: LD_VAR 0 13
51073: PUSH
51074: FOR_TO
51075: IFFALSE 51437
// begin InitHc ;
51077: CALL_OW 19
// if not f then
51081: LD_VAR 0 12
51085: NOT
51086: IFFALSE 51175
// begin PrepareHuman ( false , i , skill ) ;
51088: LD_INT 0
51090: PPUSH
51091: LD_VAR 0 8
51095: PPUSH
51096: LD_VAR 0 4
51100: PPUSH
51101: CALL_OW 380
// un := CreateHuman ;
51105: LD_ADDR_VAR 0 14
51109: PUSH
51110: CALL_OW 44
51114: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51115: LD_ADDR_VAR 0 7
51119: PUSH
51120: LD_VAR 0 7
51124: PPUSH
51125: LD_INT 1
51127: PPUSH
51128: LD_VAR 0 14
51132: PPUSH
51133: CALL_OW 2
51137: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51138: LD_VAR 0 14
51142: PPUSH
51143: LD_VAR 0 1
51147: PPUSH
51148: CALL_OW 250
51152: PPUSH
51153: LD_VAR 0 1
51157: PPUSH
51158: CALL_OW 251
51162: PPUSH
51163: LD_INT 10
51165: PPUSH
51166: LD_INT 0
51168: PPUSH
51169: CALL_OW 50
// continue ;
51173: GO 51074
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51175: LD_VAR 0 12
51179: PUSH
51180: LD_INT 1
51182: ARRAY
51183: PPUSH
51184: CALL_OW 313
51188: PUSH
51189: LD_VAR 0 12
51193: PUSH
51194: LD_INT 1
51196: ARRAY
51197: PPUSH
51198: CALL_OW 266
51202: PUSH
51203: LD_INT 32
51205: PUSH
51206: LD_INT 31
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: IN
51213: AND
51214: PUSH
51215: LD_VAR 0 12
51219: PUSH
51220: LD_INT 1
51222: ARRAY
51223: PPUSH
51224: CALL_OW 313
51228: PUSH
51229: LD_INT 6
51231: EQUAL
51232: OR
51233: IFFALSE 51253
// f := Delete ( f , 1 ) ;
51235: LD_ADDR_VAR 0 12
51239: PUSH
51240: LD_VAR 0 12
51244: PPUSH
51245: LD_INT 1
51247: PPUSH
51248: CALL_OW 3
51252: ST_TO_ADDR
// if not f then
51253: LD_VAR 0 12
51257: NOT
51258: IFFALSE 51276
// begin x := x + 2 ;
51260: LD_ADDR_VAR 0 13
51264: PUSH
51265: LD_VAR 0 13
51269: PUSH
51270: LD_INT 2
51272: PLUS
51273: ST_TO_ADDR
// continue ;
51274: GO 51074
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51276: LD_VAR 0 12
51280: PUSH
51281: LD_INT 1
51283: ARRAY
51284: PPUSH
51285: CALL_OW 266
51289: PUSH
51290: LD_INT 5
51292: EQUAL
51293: IFFALSE 51367
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51295: LD_VAR 0 12
51299: PUSH
51300: LD_INT 1
51302: ARRAY
51303: PPUSH
51304: CALL_OW 313
51308: PUSH
51309: LD_INT 3
51311: LESS
51312: IFFALSE 51348
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51314: LD_INT 0
51316: PPUSH
51317: LD_INT 5
51319: PUSH
51320: LD_INT 8
51322: PUSH
51323: LD_INT 9
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: LIST
51330: PUSH
51331: LD_VAR 0 17
51335: ARRAY
51336: PPUSH
51337: LD_VAR 0 4
51341: PPUSH
51342: CALL_OW 380
51346: GO 51365
// PrepareHuman ( false , i , skill ) ;
51348: LD_INT 0
51350: PPUSH
51351: LD_VAR 0 8
51355: PPUSH
51356: LD_VAR 0 4
51360: PPUSH
51361: CALL_OW 380
// end else
51365: GO 51384
// PrepareHuman ( false , i , skill ) ;
51367: LD_INT 0
51369: PPUSH
51370: LD_VAR 0 8
51374: PPUSH
51375: LD_VAR 0 4
51379: PPUSH
51380: CALL_OW 380
// un := CreateHuman ;
51384: LD_ADDR_VAR 0 14
51388: PUSH
51389: CALL_OW 44
51393: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51394: LD_ADDR_VAR 0 7
51398: PUSH
51399: LD_VAR 0 7
51403: PPUSH
51404: LD_INT 1
51406: PPUSH
51407: LD_VAR 0 14
51411: PPUSH
51412: CALL_OW 2
51416: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51417: LD_VAR 0 14
51421: PPUSH
51422: LD_VAR 0 12
51426: PUSH
51427: LD_INT 1
51429: ARRAY
51430: PPUSH
51431: CALL_OW 52
// end ;
51435: GO 51074
51437: POP
51438: POP
// end ;
51439: GO 50376
51441: POP
51442: POP
// result := result ^ buildings ;
51443: LD_ADDR_VAR 0 7
51447: PUSH
51448: LD_VAR 0 7
51452: PUSH
51453: LD_VAR 0 18
51457: ADD
51458: ST_TO_ADDR
// end else
51459: GO 51602
// begin for i = 1 to personel do
51461: LD_ADDR_VAR 0 8
51465: PUSH
51466: DOUBLE
51467: LD_INT 1
51469: DEC
51470: ST_TO_ADDR
51471: LD_VAR 0 6
51475: PUSH
51476: FOR_TO
51477: IFFALSE 51600
// begin if i > 4 then
51479: LD_VAR 0 8
51483: PUSH
51484: LD_INT 4
51486: GREATER
51487: IFFALSE 51491
// break ;
51489: GO 51600
// x := personel [ i ] ;
51491: LD_ADDR_VAR 0 13
51495: PUSH
51496: LD_VAR 0 6
51500: PUSH
51501: LD_VAR 0 8
51505: ARRAY
51506: ST_TO_ADDR
// if x = - 1 then
51507: LD_VAR 0 13
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: EQUAL
51516: IFFALSE 51520
// continue ;
51518: GO 51476
// PrepareHuman ( false , i , skill ) ;
51520: LD_INT 0
51522: PPUSH
51523: LD_VAR 0 8
51527: PPUSH
51528: LD_VAR 0 4
51532: PPUSH
51533: CALL_OW 380
// un := CreateHuman ;
51537: LD_ADDR_VAR 0 14
51541: PUSH
51542: CALL_OW 44
51546: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51547: LD_VAR 0 14
51551: PPUSH
51552: LD_VAR 0 1
51556: PPUSH
51557: CALL_OW 250
51561: PPUSH
51562: LD_VAR 0 1
51566: PPUSH
51567: CALL_OW 251
51571: PPUSH
51572: LD_INT 10
51574: PPUSH
51575: LD_INT 0
51577: PPUSH
51578: CALL_OW 50
// result := result ^ un ;
51582: LD_ADDR_VAR 0 7
51586: PUSH
51587: LD_VAR 0 7
51591: PUSH
51592: LD_VAR 0 14
51596: ADD
51597: ST_TO_ADDR
// end ;
51598: GO 51476
51600: POP
51601: POP
// end ; end ;
51602: LD_VAR 0 7
51606: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51607: LD_INT 0
51609: PPUSH
51610: PPUSH
51611: PPUSH
51612: PPUSH
51613: PPUSH
51614: PPUSH
51615: PPUSH
51616: PPUSH
51617: PPUSH
51618: PPUSH
51619: PPUSH
51620: PPUSH
51621: PPUSH
51622: PPUSH
51623: PPUSH
51624: PPUSH
// result := false ;
51625: LD_ADDR_VAR 0 3
51629: PUSH
51630: LD_INT 0
51632: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51633: LD_VAR 0 1
51637: NOT
51638: PUSH
51639: LD_VAR 0 1
51643: PPUSH
51644: CALL_OW 266
51648: PUSH
51649: LD_INT 32
51651: PUSH
51652: LD_INT 33
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: IN
51659: NOT
51660: OR
51661: IFFALSE 51665
// exit ;
51663: GO 52774
// nat := GetNation ( tower ) ;
51665: LD_ADDR_VAR 0 12
51669: PUSH
51670: LD_VAR 0 1
51674: PPUSH
51675: CALL_OW 248
51679: ST_TO_ADDR
// side := GetSide ( tower ) ;
51680: LD_ADDR_VAR 0 16
51684: PUSH
51685: LD_VAR 0 1
51689: PPUSH
51690: CALL_OW 255
51694: ST_TO_ADDR
// x := GetX ( tower ) ;
51695: LD_ADDR_VAR 0 10
51699: PUSH
51700: LD_VAR 0 1
51704: PPUSH
51705: CALL_OW 250
51709: ST_TO_ADDR
// y := GetY ( tower ) ;
51710: LD_ADDR_VAR 0 11
51714: PUSH
51715: LD_VAR 0 1
51719: PPUSH
51720: CALL_OW 251
51724: ST_TO_ADDR
// if not x or not y then
51725: LD_VAR 0 10
51729: NOT
51730: PUSH
51731: LD_VAR 0 11
51735: NOT
51736: OR
51737: IFFALSE 51741
// exit ;
51739: GO 52774
// weapon := 0 ;
51741: LD_ADDR_VAR 0 18
51745: PUSH
51746: LD_INT 0
51748: ST_TO_ADDR
// fac_list := [ ] ;
51749: LD_ADDR_VAR 0 17
51753: PUSH
51754: EMPTY
51755: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51756: LD_ADDR_VAR 0 6
51760: PUSH
51761: LD_VAR 0 1
51765: PPUSH
51766: CALL_OW 274
51770: PPUSH
51771: LD_VAR 0 2
51775: PPUSH
51776: LD_INT 0
51778: PPUSH
51779: CALL 49345 0 3
51783: PPUSH
51784: LD_INT 30
51786: PUSH
51787: LD_INT 3
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PPUSH
51794: CALL_OW 72
51798: ST_TO_ADDR
// if not factories then
51799: LD_VAR 0 6
51803: NOT
51804: IFFALSE 51808
// exit ;
51806: GO 52774
// for i in factories do
51808: LD_ADDR_VAR 0 8
51812: PUSH
51813: LD_VAR 0 6
51817: PUSH
51818: FOR_IN
51819: IFFALSE 51844
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51821: LD_ADDR_VAR 0 17
51825: PUSH
51826: LD_VAR 0 17
51830: PUSH
51831: LD_VAR 0 8
51835: PPUSH
51836: CALL_OW 478
51840: UNION
51841: ST_TO_ADDR
51842: GO 51818
51844: POP
51845: POP
// if not fac_list then
51846: LD_VAR 0 17
51850: NOT
51851: IFFALSE 51855
// exit ;
51853: GO 52774
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51855: LD_ADDR_VAR 0 5
51859: PUSH
51860: LD_INT 4
51862: PUSH
51863: LD_INT 5
51865: PUSH
51866: LD_INT 9
51868: PUSH
51869: LD_INT 10
51871: PUSH
51872: LD_INT 6
51874: PUSH
51875: LD_INT 7
51877: PUSH
51878: LD_INT 11
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 27
51892: PUSH
51893: LD_INT 28
51895: PUSH
51896: LD_INT 26
51898: PUSH
51899: LD_INT 30
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 43
51910: PUSH
51911: LD_INT 44
51913: PUSH
51914: LD_INT 46
51916: PUSH
51917: LD_INT 45
51919: PUSH
51920: LD_INT 47
51922: PUSH
51923: LD_INT 49
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: LIST
51938: PUSH
51939: LD_VAR 0 12
51943: ARRAY
51944: ST_TO_ADDR
// list := list isect fac_list ;
51945: LD_ADDR_VAR 0 5
51949: PUSH
51950: LD_VAR 0 5
51954: PUSH
51955: LD_VAR 0 17
51959: ISECT
51960: ST_TO_ADDR
// if not list then
51961: LD_VAR 0 5
51965: NOT
51966: IFFALSE 51970
// exit ;
51968: GO 52774
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51970: LD_VAR 0 12
51974: PUSH
51975: LD_INT 3
51977: EQUAL
51978: PUSH
51979: LD_INT 49
51981: PUSH
51982: LD_VAR 0 5
51986: IN
51987: AND
51988: PUSH
51989: LD_INT 31
51991: PPUSH
51992: LD_VAR 0 16
51996: PPUSH
51997: CALL_OW 321
52001: PUSH
52002: LD_INT 2
52004: EQUAL
52005: AND
52006: IFFALSE 52066
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52008: LD_INT 22
52010: PUSH
52011: LD_VAR 0 16
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 35
52022: PUSH
52023: LD_INT 49
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 91
52032: PUSH
52033: LD_VAR 0 1
52037: PUSH
52038: LD_INT 10
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: LIST
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: LIST
52050: PPUSH
52051: CALL_OW 69
52055: NOT
52056: IFFALSE 52066
// weapon := ru_time_lapser ;
52058: LD_ADDR_VAR 0 18
52062: PUSH
52063: LD_INT 49
52065: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52066: LD_VAR 0 12
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: IN
52081: PUSH
52082: LD_INT 11
52084: PUSH
52085: LD_VAR 0 5
52089: IN
52090: PUSH
52091: LD_INT 30
52093: PUSH
52094: LD_VAR 0 5
52098: IN
52099: OR
52100: AND
52101: PUSH
52102: LD_INT 6
52104: PPUSH
52105: LD_VAR 0 16
52109: PPUSH
52110: CALL_OW 321
52114: PUSH
52115: LD_INT 2
52117: EQUAL
52118: AND
52119: IFFALSE 52284
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52121: LD_INT 22
52123: PUSH
52124: LD_VAR 0 16
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: LD_INT 35
52138: PUSH
52139: LD_INT 11
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 35
52148: PUSH
52149: LD_INT 30
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 91
52163: PUSH
52164: LD_VAR 0 1
52168: PUSH
52169: LD_INT 18
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: LIST
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: LIST
52181: PPUSH
52182: CALL_OW 69
52186: NOT
52187: PUSH
52188: LD_INT 22
52190: PUSH
52191: LD_VAR 0 16
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: LD_INT 30
52205: PUSH
52206: LD_INT 32
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 30
52215: PUSH
52216: LD_INT 33
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 91
52230: PUSH
52231: LD_VAR 0 1
52235: PUSH
52236: LD_INT 12
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: LIST
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: LIST
52248: PUSH
52249: EMPTY
52250: LIST
52251: PPUSH
52252: CALL_OW 69
52256: PUSH
52257: LD_INT 2
52259: GREATER
52260: AND
52261: IFFALSE 52284
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52263: LD_ADDR_VAR 0 18
52267: PUSH
52268: LD_INT 11
52270: PUSH
52271: LD_INT 30
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_VAR 0 12
52282: ARRAY
52283: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52284: LD_VAR 0 18
52288: NOT
52289: PUSH
52290: LD_INT 40
52292: PPUSH
52293: LD_VAR 0 16
52297: PPUSH
52298: CALL_OW 321
52302: PUSH
52303: LD_INT 2
52305: EQUAL
52306: AND
52307: PUSH
52308: LD_INT 7
52310: PUSH
52311: LD_VAR 0 5
52315: IN
52316: PUSH
52317: LD_INT 28
52319: PUSH
52320: LD_VAR 0 5
52324: IN
52325: OR
52326: PUSH
52327: LD_INT 45
52329: PUSH
52330: LD_VAR 0 5
52334: IN
52335: OR
52336: AND
52337: IFFALSE 52591
// begin hex := GetHexInfo ( x , y ) ;
52339: LD_ADDR_VAR 0 4
52343: PUSH
52344: LD_VAR 0 10
52348: PPUSH
52349: LD_VAR 0 11
52353: PPUSH
52354: CALL_OW 546
52358: ST_TO_ADDR
// if hex [ 1 ] then
52359: LD_VAR 0 4
52363: PUSH
52364: LD_INT 1
52366: ARRAY
52367: IFFALSE 52371
// exit ;
52369: GO 52774
// height := hex [ 2 ] ;
52371: LD_ADDR_VAR 0 15
52375: PUSH
52376: LD_VAR 0 4
52380: PUSH
52381: LD_INT 2
52383: ARRAY
52384: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52385: LD_ADDR_VAR 0 14
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: LD_INT 2
52395: PUSH
52396: LD_INT 3
52398: PUSH
52399: LD_INT 5
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: ST_TO_ADDR
// for i in tmp do
52408: LD_ADDR_VAR 0 8
52412: PUSH
52413: LD_VAR 0 14
52417: PUSH
52418: FOR_IN
52419: IFFALSE 52589
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52421: LD_ADDR_VAR 0 9
52425: PUSH
52426: LD_VAR 0 10
52430: PPUSH
52431: LD_VAR 0 8
52435: PPUSH
52436: LD_INT 5
52438: PPUSH
52439: CALL_OW 272
52443: PUSH
52444: LD_VAR 0 11
52448: PPUSH
52449: LD_VAR 0 8
52453: PPUSH
52454: LD_INT 5
52456: PPUSH
52457: CALL_OW 273
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52466: LD_VAR 0 9
52470: PUSH
52471: LD_INT 1
52473: ARRAY
52474: PPUSH
52475: LD_VAR 0 9
52479: PUSH
52480: LD_INT 2
52482: ARRAY
52483: PPUSH
52484: CALL_OW 488
52488: IFFALSE 52587
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52490: LD_ADDR_VAR 0 4
52494: PUSH
52495: LD_VAR 0 9
52499: PUSH
52500: LD_INT 1
52502: ARRAY
52503: PPUSH
52504: LD_VAR 0 9
52508: PUSH
52509: LD_INT 2
52511: ARRAY
52512: PPUSH
52513: CALL_OW 546
52517: ST_TO_ADDR
// if hex [ 1 ] then
52518: LD_VAR 0 4
52522: PUSH
52523: LD_INT 1
52525: ARRAY
52526: IFFALSE 52530
// continue ;
52528: GO 52418
// h := hex [ 2 ] ;
52530: LD_ADDR_VAR 0 13
52534: PUSH
52535: LD_VAR 0 4
52539: PUSH
52540: LD_INT 2
52542: ARRAY
52543: ST_TO_ADDR
// if h + 7 < height then
52544: LD_VAR 0 13
52548: PUSH
52549: LD_INT 7
52551: PLUS
52552: PUSH
52553: LD_VAR 0 15
52557: LESS
52558: IFFALSE 52587
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52560: LD_ADDR_VAR 0 18
52564: PUSH
52565: LD_INT 7
52567: PUSH
52568: LD_INT 28
52570: PUSH
52571: LD_INT 45
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: LIST
52578: PUSH
52579: LD_VAR 0 12
52583: ARRAY
52584: ST_TO_ADDR
// break ;
52585: GO 52589
// end ; end ; end ;
52587: GO 52418
52589: POP
52590: POP
// end ; if not weapon then
52591: LD_VAR 0 18
52595: NOT
52596: IFFALSE 52656
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52598: LD_ADDR_VAR 0 5
52602: PUSH
52603: LD_VAR 0 5
52607: PUSH
52608: LD_INT 11
52610: PUSH
52611: LD_INT 30
52613: PUSH
52614: LD_INT 49
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: LIST
52621: DIFF
52622: ST_TO_ADDR
// if not list then
52623: LD_VAR 0 5
52627: NOT
52628: IFFALSE 52632
// exit ;
52630: GO 52774
// weapon := list [ rand ( 1 , list ) ] ;
52632: LD_ADDR_VAR 0 18
52636: PUSH
52637: LD_VAR 0 5
52641: PUSH
52642: LD_INT 1
52644: PPUSH
52645: LD_VAR 0 5
52649: PPUSH
52650: CALL_OW 12
52654: ARRAY
52655: ST_TO_ADDR
// end ; if weapon then
52656: LD_VAR 0 18
52660: IFFALSE 52774
// begin tmp := CostOfWeapon ( weapon ) ;
52662: LD_ADDR_VAR 0 14
52666: PUSH
52667: LD_VAR 0 18
52671: PPUSH
52672: CALL_OW 451
52676: ST_TO_ADDR
// j := GetBase ( tower ) ;
52677: LD_ADDR_VAR 0 9
52681: PUSH
52682: LD_VAR 0 1
52686: PPUSH
52687: CALL_OW 274
52691: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52692: LD_VAR 0 9
52696: PPUSH
52697: LD_INT 1
52699: PPUSH
52700: CALL_OW 275
52704: PUSH
52705: LD_VAR 0 14
52709: PUSH
52710: LD_INT 1
52712: ARRAY
52713: GREATEREQUAL
52714: PUSH
52715: LD_VAR 0 9
52719: PPUSH
52720: LD_INT 2
52722: PPUSH
52723: CALL_OW 275
52727: PUSH
52728: LD_VAR 0 14
52732: PUSH
52733: LD_INT 2
52735: ARRAY
52736: GREATEREQUAL
52737: AND
52738: PUSH
52739: LD_VAR 0 9
52743: PPUSH
52744: LD_INT 3
52746: PPUSH
52747: CALL_OW 275
52751: PUSH
52752: LD_VAR 0 14
52756: PUSH
52757: LD_INT 3
52759: ARRAY
52760: GREATEREQUAL
52761: AND
52762: IFFALSE 52774
// result := weapon ;
52764: LD_ADDR_VAR 0 3
52768: PUSH
52769: LD_VAR 0 18
52773: ST_TO_ADDR
// end ; end ;
52774: LD_VAR 0 3
52778: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52779: LD_INT 0
52781: PPUSH
52782: PPUSH
// result := true ;
52783: LD_ADDR_VAR 0 3
52787: PUSH
52788: LD_INT 1
52790: ST_TO_ADDR
// if array1 = array2 then
52791: LD_VAR 0 1
52795: PUSH
52796: LD_VAR 0 2
52800: EQUAL
52801: IFFALSE 52861
// begin for i = 1 to array1 do
52803: LD_ADDR_VAR 0 4
52807: PUSH
52808: DOUBLE
52809: LD_INT 1
52811: DEC
52812: ST_TO_ADDR
52813: LD_VAR 0 1
52817: PUSH
52818: FOR_TO
52819: IFFALSE 52857
// if array1 [ i ] <> array2 [ i ] then
52821: LD_VAR 0 1
52825: PUSH
52826: LD_VAR 0 4
52830: ARRAY
52831: PUSH
52832: LD_VAR 0 2
52836: PUSH
52837: LD_VAR 0 4
52841: ARRAY
52842: NONEQUAL
52843: IFFALSE 52855
// begin result := false ;
52845: LD_ADDR_VAR 0 3
52849: PUSH
52850: LD_INT 0
52852: ST_TO_ADDR
// break ;
52853: GO 52857
// end ;
52855: GO 52818
52857: POP
52858: POP
// end else
52859: GO 52869
// result := false ;
52861: LD_ADDR_VAR 0 3
52865: PUSH
52866: LD_INT 0
52868: ST_TO_ADDR
// end ;
52869: LD_VAR 0 3
52873: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52874: LD_INT 0
52876: PPUSH
52877: PPUSH
// if not array1 or not array2 then
52878: LD_VAR 0 1
52882: NOT
52883: PUSH
52884: LD_VAR 0 2
52888: NOT
52889: OR
52890: IFFALSE 52894
// exit ;
52892: GO 52958
// result := true ;
52894: LD_ADDR_VAR 0 3
52898: PUSH
52899: LD_INT 1
52901: ST_TO_ADDR
// for i = 1 to array1 do
52902: LD_ADDR_VAR 0 4
52906: PUSH
52907: DOUBLE
52908: LD_INT 1
52910: DEC
52911: ST_TO_ADDR
52912: LD_VAR 0 1
52916: PUSH
52917: FOR_TO
52918: IFFALSE 52956
// if array1 [ i ] <> array2 [ i ] then
52920: LD_VAR 0 1
52924: PUSH
52925: LD_VAR 0 4
52929: ARRAY
52930: PUSH
52931: LD_VAR 0 2
52935: PUSH
52936: LD_VAR 0 4
52940: ARRAY
52941: NONEQUAL
52942: IFFALSE 52954
// begin result := false ;
52944: LD_ADDR_VAR 0 3
52948: PUSH
52949: LD_INT 0
52951: ST_TO_ADDR
// break ;
52952: GO 52956
// end ;
52954: GO 52917
52956: POP
52957: POP
// end ;
52958: LD_VAR 0 3
52962: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52963: LD_INT 0
52965: PPUSH
52966: PPUSH
52967: PPUSH
// pom := GetBase ( fac ) ;
52968: LD_ADDR_VAR 0 5
52972: PUSH
52973: LD_VAR 0 1
52977: PPUSH
52978: CALL_OW 274
52982: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52983: LD_ADDR_VAR 0 4
52987: PUSH
52988: LD_VAR 0 2
52992: PUSH
52993: LD_INT 1
52995: ARRAY
52996: PPUSH
52997: LD_VAR 0 2
53001: PUSH
53002: LD_INT 2
53004: ARRAY
53005: PPUSH
53006: LD_VAR 0 2
53010: PUSH
53011: LD_INT 3
53013: ARRAY
53014: PPUSH
53015: LD_VAR 0 2
53019: PUSH
53020: LD_INT 4
53022: ARRAY
53023: PPUSH
53024: CALL_OW 449
53028: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53029: LD_ADDR_VAR 0 3
53033: PUSH
53034: LD_VAR 0 5
53038: PPUSH
53039: LD_INT 1
53041: PPUSH
53042: CALL_OW 275
53046: PUSH
53047: LD_VAR 0 4
53051: PUSH
53052: LD_INT 1
53054: ARRAY
53055: GREATEREQUAL
53056: PUSH
53057: LD_VAR 0 5
53061: PPUSH
53062: LD_INT 2
53064: PPUSH
53065: CALL_OW 275
53069: PUSH
53070: LD_VAR 0 4
53074: PUSH
53075: LD_INT 2
53077: ARRAY
53078: GREATEREQUAL
53079: AND
53080: PUSH
53081: LD_VAR 0 5
53085: PPUSH
53086: LD_INT 3
53088: PPUSH
53089: CALL_OW 275
53093: PUSH
53094: LD_VAR 0 4
53098: PUSH
53099: LD_INT 3
53101: ARRAY
53102: GREATEREQUAL
53103: AND
53104: ST_TO_ADDR
// end ;
53105: LD_VAR 0 3
53109: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53110: LD_INT 0
53112: PPUSH
53113: PPUSH
53114: PPUSH
53115: PPUSH
// pom := GetBase ( building ) ;
53116: LD_ADDR_VAR 0 3
53120: PUSH
53121: LD_VAR 0 1
53125: PPUSH
53126: CALL_OW 274
53130: ST_TO_ADDR
// if not pom then
53131: LD_VAR 0 3
53135: NOT
53136: IFFALSE 53140
// exit ;
53138: GO 53310
// btype := GetBType ( building ) ;
53140: LD_ADDR_VAR 0 5
53144: PUSH
53145: LD_VAR 0 1
53149: PPUSH
53150: CALL_OW 266
53154: ST_TO_ADDR
// if btype = b_armoury then
53155: LD_VAR 0 5
53159: PUSH
53160: LD_INT 4
53162: EQUAL
53163: IFFALSE 53173
// btype := b_barracks ;
53165: LD_ADDR_VAR 0 5
53169: PUSH
53170: LD_INT 5
53172: ST_TO_ADDR
// if btype = b_depot then
53173: LD_VAR 0 5
53177: PUSH
53178: LD_INT 0
53180: EQUAL
53181: IFFALSE 53191
// btype := b_warehouse ;
53183: LD_ADDR_VAR 0 5
53187: PUSH
53188: LD_INT 1
53190: ST_TO_ADDR
// if btype = b_workshop then
53191: LD_VAR 0 5
53195: PUSH
53196: LD_INT 2
53198: EQUAL
53199: IFFALSE 53209
// btype := b_factory ;
53201: LD_ADDR_VAR 0 5
53205: PUSH
53206: LD_INT 3
53208: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53209: LD_ADDR_VAR 0 4
53213: PUSH
53214: LD_VAR 0 5
53218: PPUSH
53219: LD_VAR 0 1
53223: PPUSH
53224: CALL_OW 248
53228: PPUSH
53229: CALL_OW 450
53233: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53234: LD_ADDR_VAR 0 2
53238: PUSH
53239: LD_VAR 0 3
53243: PPUSH
53244: LD_INT 1
53246: PPUSH
53247: CALL_OW 275
53251: PUSH
53252: LD_VAR 0 4
53256: PUSH
53257: LD_INT 1
53259: ARRAY
53260: GREATEREQUAL
53261: PUSH
53262: LD_VAR 0 3
53266: PPUSH
53267: LD_INT 2
53269: PPUSH
53270: CALL_OW 275
53274: PUSH
53275: LD_VAR 0 4
53279: PUSH
53280: LD_INT 2
53282: ARRAY
53283: GREATEREQUAL
53284: AND
53285: PUSH
53286: LD_VAR 0 3
53290: PPUSH
53291: LD_INT 3
53293: PPUSH
53294: CALL_OW 275
53298: PUSH
53299: LD_VAR 0 4
53303: PUSH
53304: LD_INT 3
53306: ARRAY
53307: GREATEREQUAL
53308: AND
53309: ST_TO_ADDR
// end ;
53310: LD_VAR 0 2
53314: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53315: LD_INT 0
53317: PPUSH
53318: PPUSH
53319: PPUSH
// pom := GetBase ( building ) ;
53320: LD_ADDR_VAR 0 4
53324: PUSH
53325: LD_VAR 0 1
53329: PPUSH
53330: CALL_OW 274
53334: ST_TO_ADDR
// if not pom then
53335: LD_VAR 0 4
53339: NOT
53340: IFFALSE 53344
// exit ;
53342: GO 53445
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53344: LD_ADDR_VAR 0 5
53348: PUSH
53349: LD_VAR 0 2
53353: PPUSH
53354: LD_VAR 0 1
53358: PPUSH
53359: CALL_OW 248
53363: PPUSH
53364: CALL_OW 450
53368: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53369: LD_ADDR_VAR 0 3
53373: PUSH
53374: LD_VAR 0 4
53378: PPUSH
53379: LD_INT 1
53381: PPUSH
53382: CALL_OW 275
53386: PUSH
53387: LD_VAR 0 5
53391: PUSH
53392: LD_INT 1
53394: ARRAY
53395: GREATEREQUAL
53396: PUSH
53397: LD_VAR 0 4
53401: PPUSH
53402: LD_INT 2
53404: PPUSH
53405: CALL_OW 275
53409: PUSH
53410: LD_VAR 0 5
53414: PUSH
53415: LD_INT 2
53417: ARRAY
53418: GREATEREQUAL
53419: AND
53420: PUSH
53421: LD_VAR 0 4
53425: PPUSH
53426: LD_INT 3
53428: PPUSH
53429: CALL_OW 275
53433: PUSH
53434: LD_VAR 0 5
53438: PUSH
53439: LD_INT 3
53441: ARRAY
53442: GREATEREQUAL
53443: AND
53444: ST_TO_ADDR
// end ;
53445: LD_VAR 0 3
53449: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53450: LD_INT 0
53452: PPUSH
53453: PPUSH
53454: PPUSH
53455: PPUSH
53456: PPUSH
53457: PPUSH
53458: PPUSH
53459: PPUSH
53460: PPUSH
53461: PPUSH
53462: PPUSH
// result := false ;
53463: LD_ADDR_VAR 0 8
53467: PUSH
53468: LD_INT 0
53470: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53471: LD_VAR 0 5
53475: NOT
53476: PUSH
53477: LD_VAR 0 1
53481: NOT
53482: OR
53483: PUSH
53484: LD_VAR 0 2
53488: NOT
53489: OR
53490: PUSH
53491: LD_VAR 0 3
53495: NOT
53496: OR
53497: IFFALSE 53501
// exit ;
53499: GO 54315
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53501: LD_ADDR_VAR 0 14
53505: PUSH
53506: LD_VAR 0 1
53510: PPUSH
53511: LD_VAR 0 2
53515: PPUSH
53516: LD_VAR 0 3
53520: PPUSH
53521: LD_VAR 0 4
53525: PPUSH
53526: LD_VAR 0 5
53530: PUSH
53531: LD_INT 1
53533: ARRAY
53534: PPUSH
53535: CALL_OW 248
53539: PPUSH
53540: LD_INT 0
53542: PPUSH
53543: CALL 55568 0 6
53547: ST_TO_ADDR
// if not hexes then
53548: LD_VAR 0 14
53552: NOT
53553: IFFALSE 53557
// exit ;
53555: GO 54315
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53557: LD_ADDR_VAR 0 17
53561: PUSH
53562: LD_VAR 0 5
53566: PPUSH
53567: LD_INT 22
53569: PUSH
53570: LD_VAR 0 13
53574: PPUSH
53575: CALL_OW 255
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: LD_INT 30
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 30
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: LIST
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PPUSH
53616: CALL_OW 72
53620: ST_TO_ADDR
// for i = 1 to hexes do
53621: LD_ADDR_VAR 0 9
53625: PUSH
53626: DOUBLE
53627: LD_INT 1
53629: DEC
53630: ST_TO_ADDR
53631: LD_VAR 0 14
53635: PUSH
53636: FOR_TO
53637: IFFALSE 54313
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53639: LD_ADDR_VAR 0 13
53643: PUSH
53644: LD_VAR 0 14
53648: PUSH
53649: LD_VAR 0 9
53653: ARRAY
53654: PUSH
53655: LD_INT 1
53657: ARRAY
53658: PPUSH
53659: LD_VAR 0 14
53663: PUSH
53664: LD_VAR 0 9
53668: ARRAY
53669: PUSH
53670: LD_INT 2
53672: ARRAY
53673: PPUSH
53674: CALL_OW 428
53678: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53679: LD_VAR 0 14
53683: PUSH
53684: LD_VAR 0 9
53688: ARRAY
53689: PUSH
53690: LD_INT 1
53692: ARRAY
53693: PPUSH
53694: LD_VAR 0 14
53698: PUSH
53699: LD_VAR 0 9
53703: ARRAY
53704: PUSH
53705: LD_INT 2
53707: ARRAY
53708: PPUSH
53709: CALL_OW 351
53713: PUSH
53714: LD_VAR 0 14
53718: PUSH
53719: LD_VAR 0 9
53723: ARRAY
53724: PUSH
53725: LD_INT 1
53727: ARRAY
53728: PPUSH
53729: LD_VAR 0 14
53733: PUSH
53734: LD_VAR 0 9
53738: ARRAY
53739: PUSH
53740: LD_INT 2
53742: ARRAY
53743: PPUSH
53744: CALL_OW 488
53748: NOT
53749: OR
53750: PUSH
53751: LD_VAR 0 13
53755: PPUSH
53756: CALL_OW 247
53760: PUSH
53761: LD_INT 3
53763: EQUAL
53764: OR
53765: IFFALSE 53771
// exit ;
53767: POP
53768: POP
53769: GO 54315
// if not tmp then
53771: LD_VAR 0 13
53775: NOT
53776: IFFALSE 53780
// continue ;
53778: GO 53636
// result := true ;
53780: LD_ADDR_VAR 0 8
53784: PUSH
53785: LD_INT 1
53787: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53788: LD_VAR 0 6
53792: PUSH
53793: LD_VAR 0 13
53797: PPUSH
53798: CALL_OW 247
53802: PUSH
53803: LD_INT 2
53805: EQUAL
53806: AND
53807: PUSH
53808: LD_VAR 0 13
53812: PPUSH
53813: CALL_OW 263
53817: PUSH
53818: LD_INT 1
53820: EQUAL
53821: AND
53822: IFFALSE 53986
// begin if IsDrivenBy ( tmp ) then
53824: LD_VAR 0 13
53828: PPUSH
53829: CALL_OW 311
53833: IFFALSE 53837
// continue ;
53835: GO 53636
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53837: LD_VAR 0 6
53841: PPUSH
53842: LD_INT 3
53844: PUSH
53845: LD_INT 60
53847: PUSH
53848: EMPTY
53849: LIST
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 3
53857: PUSH
53858: LD_INT 55
53860: PUSH
53861: EMPTY
53862: LIST
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PPUSH
53872: CALL_OW 72
53876: IFFALSE 53984
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53878: LD_ADDR_VAR 0 18
53882: PUSH
53883: LD_VAR 0 6
53887: PPUSH
53888: LD_INT 3
53890: PUSH
53891: LD_INT 60
53893: PUSH
53894: EMPTY
53895: LIST
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 3
53903: PUSH
53904: LD_INT 55
53906: PUSH
53907: EMPTY
53908: LIST
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PPUSH
53918: CALL_OW 72
53922: PUSH
53923: LD_INT 1
53925: ARRAY
53926: ST_TO_ADDR
// if IsInUnit ( driver ) then
53927: LD_VAR 0 18
53931: PPUSH
53932: CALL_OW 310
53936: IFFALSE 53947
// ComExit ( driver ) ;
53938: LD_VAR 0 18
53942: PPUSH
53943: CALL 79347 0 1
// AddComEnterUnit ( driver , tmp ) ;
53947: LD_VAR 0 18
53951: PPUSH
53952: LD_VAR 0 13
53956: PPUSH
53957: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53961: LD_VAR 0 18
53965: PPUSH
53966: LD_VAR 0 7
53970: PPUSH
53971: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53975: LD_VAR 0 18
53979: PPUSH
53980: CALL_OW 181
// end ; continue ;
53984: GO 53636
// end ; if not cleaners or not tmp in cleaners then
53986: LD_VAR 0 6
53990: NOT
53991: PUSH
53992: LD_VAR 0 13
53996: PUSH
53997: LD_VAR 0 6
54001: IN
54002: NOT
54003: OR
54004: IFFALSE 54311
// begin if dep then
54006: LD_VAR 0 17
54010: IFFALSE 54146
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54012: LD_ADDR_VAR 0 16
54016: PUSH
54017: LD_VAR 0 17
54021: PUSH
54022: LD_INT 1
54024: ARRAY
54025: PPUSH
54026: CALL_OW 250
54030: PPUSH
54031: LD_VAR 0 17
54035: PUSH
54036: LD_INT 1
54038: ARRAY
54039: PPUSH
54040: CALL_OW 254
54044: PPUSH
54045: LD_INT 5
54047: PPUSH
54048: CALL_OW 272
54052: PUSH
54053: LD_VAR 0 17
54057: PUSH
54058: LD_INT 1
54060: ARRAY
54061: PPUSH
54062: CALL_OW 251
54066: PPUSH
54067: LD_VAR 0 17
54071: PUSH
54072: LD_INT 1
54074: ARRAY
54075: PPUSH
54076: CALL_OW 254
54080: PPUSH
54081: LD_INT 5
54083: PPUSH
54084: CALL_OW 273
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54093: LD_VAR 0 16
54097: PUSH
54098: LD_INT 1
54100: ARRAY
54101: PPUSH
54102: LD_VAR 0 16
54106: PUSH
54107: LD_INT 2
54109: ARRAY
54110: PPUSH
54111: CALL_OW 488
54115: IFFALSE 54146
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54117: LD_VAR 0 13
54121: PPUSH
54122: LD_VAR 0 16
54126: PUSH
54127: LD_INT 1
54129: ARRAY
54130: PPUSH
54131: LD_VAR 0 16
54135: PUSH
54136: LD_INT 2
54138: ARRAY
54139: PPUSH
54140: CALL_OW 111
// continue ;
54144: GO 53636
// end ; end ; r := GetDir ( tmp ) ;
54146: LD_ADDR_VAR 0 15
54150: PUSH
54151: LD_VAR 0 13
54155: PPUSH
54156: CALL_OW 254
54160: ST_TO_ADDR
// if r = 5 then
54161: LD_VAR 0 15
54165: PUSH
54166: LD_INT 5
54168: EQUAL
54169: IFFALSE 54179
// r := 0 ;
54171: LD_ADDR_VAR 0 15
54175: PUSH
54176: LD_INT 0
54178: ST_TO_ADDR
// for j = r to 5 do
54179: LD_ADDR_VAR 0 10
54183: PUSH
54184: DOUBLE
54185: LD_VAR 0 15
54189: DEC
54190: ST_TO_ADDR
54191: LD_INT 5
54193: PUSH
54194: FOR_TO
54195: IFFALSE 54309
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54197: LD_ADDR_VAR 0 11
54201: PUSH
54202: LD_VAR 0 13
54206: PPUSH
54207: CALL_OW 250
54211: PPUSH
54212: LD_VAR 0 10
54216: PPUSH
54217: LD_INT 2
54219: PPUSH
54220: CALL_OW 272
54224: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54225: LD_ADDR_VAR 0 12
54229: PUSH
54230: LD_VAR 0 13
54234: PPUSH
54235: CALL_OW 251
54239: PPUSH
54240: LD_VAR 0 10
54244: PPUSH
54245: LD_INT 2
54247: PPUSH
54248: CALL_OW 273
54252: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54253: LD_VAR 0 11
54257: PPUSH
54258: LD_VAR 0 12
54262: PPUSH
54263: CALL_OW 488
54267: PUSH
54268: LD_VAR 0 11
54272: PPUSH
54273: LD_VAR 0 12
54277: PPUSH
54278: CALL_OW 428
54282: NOT
54283: AND
54284: IFFALSE 54307
// begin ComMoveXY ( tmp , _x , _y ) ;
54286: LD_VAR 0 13
54290: PPUSH
54291: LD_VAR 0 11
54295: PPUSH
54296: LD_VAR 0 12
54300: PPUSH
54301: CALL_OW 111
// break ;
54305: GO 54309
// end ; end ;
54307: GO 54194
54309: POP
54310: POP
// end ; end ;
54311: GO 53636
54313: POP
54314: POP
// end ;
54315: LD_VAR 0 8
54319: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54320: LD_INT 0
54322: PPUSH
// result := true ;
54323: LD_ADDR_VAR 0 3
54327: PUSH
54328: LD_INT 1
54330: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54331: LD_VAR 0 2
54335: PUSH
54336: LD_INT 24
54338: DOUBLE
54339: EQUAL
54340: IFTRUE 54350
54342: LD_INT 33
54344: DOUBLE
54345: EQUAL
54346: IFTRUE 54350
54348: GO 54375
54350: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54351: LD_ADDR_VAR 0 3
54355: PUSH
54356: LD_INT 32
54358: PPUSH
54359: LD_VAR 0 1
54363: PPUSH
54364: CALL_OW 321
54368: PUSH
54369: LD_INT 2
54371: EQUAL
54372: ST_TO_ADDR
54373: GO 54691
54375: LD_INT 20
54377: DOUBLE
54378: EQUAL
54379: IFTRUE 54383
54381: GO 54408
54383: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54384: LD_ADDR_VAR 0 3
54388: PUSH
54389: LD_INT 6
54391: PPUSH
54392: LD_VAR 0 1
54396: PPUSH
54397: CALL_OW 321
54401: PUSH
54402: LD_INT 2
54404: EQUAL
54405: ST_TO_ADDR
54406: GO 54691
54408: LD_INT 22
54410: DOUBLE
54411: EQUAL
54412: IFTRUE 54422
54414: LD_INT 36
54416: DOUBLE
54417: EQUAL
54418: IFTRUE 54422
54420: GO 54447
54422: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54423: LD_ADDR_VAR 0 3
54427: PUSH
54428: LD_INT 15
54430: PPUSH
54431: LD_VAR 0 1
54435: PPUSH
54436: CALL_OW 321
54440: PUSH
54441: LD_INT 2
54443: EQUAL
54444: ST_TO_ADDR
54445: GO 54691
54447: LD_INT 30
54449: DOUBLE
54450: EQUAL
54451: IFTRUE 54455
54453: GO 54480
54455: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54456: LD_ADDR_VAR 0 3
54460: PUSH
54461: LD_INT 20
54463: PPUSH
54464: LD_VAR 0 1
54468: PPUSH
54469: CALL_OW 321
54473: PUSH
54474: LD_INT 2
54476: EQUAL
54477: ST_TO_ADDR
54478: GO 54691
54480: LD_INT 28
54482: DOUBLE
54483: EQUAL
54484: IFTRUE 54494
54486: LD_INT 21
54488: DOUBLE
54489: EQUAL
54490: IFTRUE 54494
54492: GO 54519
54494: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54495: LD_ADDR_VAR 0 3
54499: PUSH
54500: LD_INT 21
54502: PPUSH
54503: LD_VAR 0 1
54507: PPUSH
54508: CALL_OW 321
54512: PUSH
54513: LD_INT 2
54515: EQUAL
54516: ST_TO_ADDR
54517: GO 54691
54519: LD_INT 16
54521: DOUBLE
54522: EQUAL
54523: IFTRUE 54527
54525: GO 54552
54527: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54528: LD_ADDR_VAR 0 3
54532: PUSH
54533: LD_INT 84
54535: PPUSH
54536: LD_VAR 0 1
54540: PPUSH
54541: CALL_OW 321
54545: PUSH
54546: LD_INT 2
54548: EQUAL
54549: ST_TO_ADDR
54550: GO 54691
54552: LD_INT 19
54554: DOUBLE
54555: EQUAL
54556: IFTRUE 54566
54558: LD_INT 23
54560: DOUBLE
54561: EQUAL
54562: IFTRUE 54566
54564: GO 54591
54566: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54567: LD_ADDR_VAR 0 3
54571: PUSH
54572: LD_INT 83
54574: PPUSH
54575: LD_VAR 0 1
54579: PPUSH
54580: CALL_OW 321
54584: PUSH
54585: LD_INT 2
54587: EQUAL
54588: ST_TO_ADDR
54589: GO 54691
54591: LD_INT 17
54593: DOUBLE
54594: EQUAL
54595: IFTRUE 54599
54597: GO 54624
54599: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54600: LD_ADDR_VAR 0 3
54604: PUSH
54605: LD_INT 39
54607: PPUSH
54608: LD_VAR 0 1
54612: PPUSH
54613: CALL_OW 321
54617: PUSH
54618: LD_INT 2
54620: EQUAL
54621: ST_TO_ADDR
54622: GO 54691
54624: LD_INT 18
54626: DOUBLE
54627: EQUAL
54628: IFTRUE 54632
54630: GO 54657
54632: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54633: LD_ADDR_VAR 0 3
54637: PUSH
54638: LD_INT 40
54640: PPUSH
54641: LD_VAR 0 1
54645: PPUSH
54646: CALL_OW 321
54650: PUSH
54651: LD_INT 2
54653: EQUAL
54654: ST_TO_ADDR
54655: GO 54691
54657: LD_INT 27
54659: DOUBLE
54660: EQUAL
54661: IFTRUE 54665
54663: GO 54690
54665: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54666: LD_ADDR_VAR 0 3
54670: PUSH
54671: LD_INT 35
54673: PPUSH
54674: LD_VAR 0 1
54678: PPUSH
54679: CALL_OW 321
54683: PUSH
54684: LD_INT 2
54686: EQUAL
54687: ST_TO_ADDR
54688: GO 54691
54690: POP
// end ;
54691: LD_VAR 0 3
54695: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54696: LD_INT 0
54698: PPUSH
54699: PPUSH
54700: PPUSH
54701: PPUSH
54702: PPUSH
54703: PPUSH
54704: PPUSH
54705: PPUSH
54706: PPUSH
54707: PPUSH
54708: PPUSH
// result := false ;
54709: LD_ADDR_VAR 0 6
54713: PUSH
54714: LD_INT 0
54716: ST_TO_ADDR
// if btype = b_depot then
54717: LD_VAR 0 2
54721: PUSH
54722: LD_INT 0
54724: EQUAL
54725: IFFALSE 54737
// begin result := true ;
54727: LD_ADDR_VAR 0 6
54731: PUSH
54732: LD_INT 1
54734: ST_TO_ADDR
// exit ;
54735: GO 55563
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54737: LD_VAR 0 1
54741: NOT
54742: PUSH
54743: LD_VAR 0 1
54747: PPUSH
54748: CALL_OW 266
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: IN
54763: NOT
54764: OR
54765: PUSH
54766: LD_VAR 0 2
54770: NOT
54771: OR
54772: PUSH
54773: LD_VAR 0 5
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: LD_INT 3
54789: PUSH
54790: LD_INT 4
54792: PUSH
54793: LD_INT 5
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: IN
54804: NOT
54805: OR
54806: PUSH
54807: LD_VAR 0 3
54811: PPUSH
54812: LD_VAR 0 4
54816: PPUSH
54817: CALL_OW 488
54821: NOT
54822: OR
54823: IFFALSE 54827
// exit ;
54825: GO 55563
// side := GetSide ( depot ) ;
54827: LD_ADDR_VAR 0 9
54831: PUSH
54832: LD_VAR 0 1
54836: PPUSH
54837: CALL_OW 255
54841: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54842: LD_VAR 0 9
54846: PPUSH
54847: LD_VAR 0 2
54851: PPUSH
54852: CALL 54320 0 2
54856: NOT
54857: IFFALSE 54861
// exit ;
54859: GO 55563
// pom := GetBase ( depot ) ;
54861: LD_ADDR_VAR 0 10
54865: PUSH
54866: LD_VAR 0 1
54870: PPUSH
54871: CALL_OW 274
54875: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54876: LD_ADDR_VAR 0 11
54880: PUSH
54881: LD_VAR 0 2
54885: PPUSH
54886: LD_VAR 0 1
54890: PPUSH
54891: CALL_OW 248
54895: PPUSH
54896: CALL_OW 450
54900: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54901: LD_VAR 0 10
54905: PPUSH
54906: LD_INT 1
54908: PPUSH
54909: CALL_OW 275
54913: PUSH
54914: LD_VAR 0 11
54918: PUSH
54919: LD_INT 1
54921: ARRAY
54922: GREATEREQUAL
54923: PUSH
54924: LD_VAR 0 10
54928: PPUSH
54929: LD_INT 2
54931: PPUSH
54932: CALL_OW 275
54936: PUSH
54937: LD_VAR 0 11
54941: PUSH
54942: LD_INT 2
54944: ARRAY
54945: GREATEREQUAL
54946: AND
54947: PUSH
54948: LD_VAR 0 10
54952: PPUSH
54953: LD_INT 3
54955: PPUSH
54956: CALL_OW 275
54960: PUSH
54961: LD_VAR 0 11
54965: PUSH
54966: LD_INT 3
54968: ARRAY
54969: GREATEREQUAL
54970: AND
54971: NOT
54972: IFFALSE 54976
// exit ;
54974: GO 55563
// if GetBType ( depot ) = b_depot then
54976: LD_VAR 0 1
54980: PPUSH
54981: CALL_OW 266
54985: PUSH
54986: LD_INT 0
54988: EQUAL
54989: IFFALSE 55001
// dist := 28 else
54991: LD_ADDR_VAR 0 14
54995: PUSH
54996: LD_INT 28
54998: ST_TO_ADDR
54999: GO 55009
// dist := 36 ;
55001: LD_ADDR_VAR 0 14
55005: PUSH
55006: LD_INT 36
55008: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55009: LD_VAR 0 1
55013: PPUSH
55014: LD_VAR 0 3
55018: PPUSH
55019: LD_VAR 0 4
55023: PPUSH
55024: CALL_OW 297
55028: PUSH
55029: LD_VAR 0 14
55033: GREATER
55034: IFFALSE 55038
// exit ;
55036: GO 55563
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55038: LD_ADDR_VAR 0 12
55042: PUSH
55043: LD_VAR 0 2
55047: PPUSH
55048: LD_VAR 0 3
55052: PPUSH
55053: LD_VAR 0 4
55057: PPUSH
55058: LD_VAR 0 5
55062: PPUSH
55063: LD_VAR 0 1
55067: PPUSH
55068: CALL_OW 248
55072: PPUSH
55073: LD_INT 0
55075: PPUSH
55076: CALL 55568 0 6
55080: ST_TO_ADDR
// if not hexes then
55081: LD_VAR 0 12
55085: NOT
55086: IFFALSE 55090
// exit ;
55088: GO 55563
// hex := GetHexInfo ( x , y ) ;
55090: LD_ADDR_VAR 0 15
55094: PUSH
55095: LD_VAR 0 3
55099: PPUSH
55100: LD_VAR 0 4
55104: PPUSH
55105: CALL_OW 546
55109: ST_TO_ADDR
// if hex [ 1 ] then
55110: LD_VAR 0 15
55114: PUSH
55115: LD_INT 1
55117: ARRAY
55118: IFFALSE 55122
// exit ;
55120: GO 55563
// height := hex [ 2 ] ;
55122: LD_ADDR_VAR 0 13
55126: PUSH
55127: LD_VAR 0 15
55131: PUSH
55132: LD_INT 2
55134: ARRAY
55135: ST_TO_ADDR
// for i = 1 to hexes do
55136: LD_ADDR_VAR 0 7
55140: PUSH
55141: DOUBLE
55142: LD_INT 1
55144: DEC
55145: ST_TO_ADDR
55146: LD_VAR 0 12
55150: PUSH
55151: FOR_TO
55152: IFFALSE 55482
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55154: LD_VAR 0 12
55158: PUSH
55159: LD_VAR 0 7
55163: ARRAY
55164: PUSH
55165: LD_INT 1
55167: ARRAY
55168: PPUSH
55169: LD_VAR 0 12
55173: PUSH
55174: LD_VAR 0 7
55178: ARRAY
55179: PUSH
55180: LD_INT 2
55182: ARRAY
55183: PPUSH
55184: CALL_OW 488
55188: NOT
55189: PUSH
55190: LD_VAR 0 12
55194: PUSH
55195: LD_VAR 0 7
55199: ARRAY
55200: PUSH
55201: LD_INT 1
55203: ARRAY
55204: PPUSH
55205: LD_VAR 0 12
55209: PUSH
55210: LD_VAR 0 7
55214: ARRAY
55215: PUSH
55216: LD_INT 2
55218: ARRAY
55219: PPUSH
55220: CALL_OW 428
55224: PUSH
55225: LD_INT 0
55227: GREATER
55228: OR
55229: PUSH
55230: LD_VAR 0 12
55234: PUSH
55235: LD_VAR 0 7
55239: ARRAY
55240: PUSH
55241: LD_INT 1
55243: ARRAY
55244: PPUSH
55245: LD_VAR 0 12
55249: PUSH
55250: LD_VAR 0 7
55254: ARRAY
55255: PUSH
55256: LD_INT 2
55258: ARRAY
55259: PPUSH
55260: CALL_OW 351
55264: OR
55265: IFFALSE 55271
// exit ;
55267: POP
55268: POP
55269: GO 55563
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55271: LD_ADDR_VAR 0 8
55275: PUSH
55276: LD_VAR 0 12
55280: PUSH
55281: LD_VAR 0 7
55285: ARRAY
55286: PUSH
55287: LD_INT 1
55289: ARRAY
55290: PPUSH
55291: LD_VAR 0 12
55295: PUSH
55296: LD_VAR 0 7
55300: ARRAY
55301: PUSH
55302: LD_INT 2
55304: ARRAY
55305: PPUSH
55306: CALL_OW 546
55310: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55311: LD_VAR 0 8
55315: PUSH
55316: LD_INT 1
55318: ARRAY
55319: PUSH
55320: LD_VAR 0 8
55324: PUSH
55325: LD_INT 2
55327: ARRAY
55328: PUSH
55329: LD_VAR 0 13
55333: PUSH
55334: LD_INT 2
55336: PLUS
55337: GREATER
55338: OR
55339: PUSH
55340: LD_VAR 0 8
55344: PUSH
55345: LD_INT 2
55347: ARRAY
55348: PUSH
55349: LD_VAR 0 13
55353: PUSH
55354: LD_INT 2
55356: MINUS
55357: LESS
55358: OR
55359: PUSH
55360: LD_VAR 0 8
55364: PUSH
55365: LD_INT 3
55367: ARRAY
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 8
55374: PUSH
55375: LD_INT 9
55377: PUSH
55378: LD_INT 10
55380: PUSH
55381: LD_INT 11
55383: PUSH
55384: LD_INT 12
55386: PUSH
55387: LD_INT 13
55389: PUSH
55390: LD_INT 16
55392: PUSH
55393: LD_INT 17
55395: PUSH
55396: LD_INT 18
55398: PUSH
55399: LD_INT 19
55401: PUSH
55402: LD_INT 20
55404: PUSH
55405: LD_INT 21
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: IN
55423: NOT
55424: OR
55425: PUSH
55426: LD_VAR 0 8
55430: PUSH
55431: LD_INT 5
55433: ARRAY
55434: NOT
55435: OR
55436: PUSH
55437: LD_VAR 0 8
55441: PUSH
55442: LD_INT 6
55444: ARRAY
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: LD_INT 7
55454: PUSH
55455: LD_INT 9
55457: PUSH
55458: LD_INT 10
55460: PUSH
55461: LD_INT 11
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: IN
55472: NOT
55473: OR
55474: IFFALSE 55480
// exit ;
55476: POP
55477: POP
55478: GO 55563
// end ;
55480: GO 55151
55482: POP
55483: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55484: LD_VAR 0 9
55488: PPUSH
55489: LD_VAR 0 3
55493: PPUSH
55494: LD_VAR 0 4
55498: PPUSH
55499: LD_INT 20
55501: PPUSH
55502: CALL 47486 0 4
55506: PUSH
55507: LD_INT 4
55509: ARRAY
55510: IFFALSE 55514
// exit ;
55512: GO 55563
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55514: LD_VAR 0 2
55518: PUSH
55519: LD_INT 29
55521: PUSH
55522: LD_INT 30
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: IN
55529: PUSH
55530: LD_VAR 0 3
55534: PPUSH
55535: LD_VAR 0 4
55539: PPUSH
55540: LD_VAR 0 9
55544: PPUSH
55545: CALL_OW 440
55549: NOT
55550: AND
55551: IFFALSE 55555
// exit ;
55553: GO 55563
// result := true ;
55555: LD_ADDR_VAR 0 6
55559: PUSH
55560: LD_INT 1
55562: ST_TO_ADDR
// end ;
55563: LD_VAR 0 6
55567: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55568: LD_INT 0
55570: PPUSH
55571: PPUSH
55572: PPUSH
55573: PPUSH
55574: PPUSH
55575: PPUSH
55576: PPUSH
55577: PPUSH
55578: PPUSH
55579: PPUSH
55580: PPUSH
55581: PPUSH
55582: PPUSH
55583: PPUSH
55584: PPUSH
55585: PPUSH
55586: PPUSH
55587: PPUSH
55588: PPUSH
55589: PPUSH
55590: PPUSH
55591: PPUSH
55592: PPUSH
55593: PPUSH
55594: PPUSH
55595: PPUSH
55596: PPUSH
55597: PPUSH
55598: PPUSH
55599: PPUSH
55600: PPUSH
55601: PPUSH
55602: PPUSH
55603: PPUSH
55604: PPUSH
55605: PPUSH
55606: PPUSH
55607: PPUSH
55608: PPUSH
55609: PPUSH
55610: PPUSH
55611: PPUSH
55612: PPUSH
55613: PPUSH
55614: PPUSH
55615: PPUSH
55616: PPUSH
55617: PPUSH
55618: PPUSH
55619: PPUSH
55620: PPUSH
55621: PPUSH
55622: PPUSH
55623: PPUSH
55624: PPUSH
55625: PPUSH
55626: PPUSH
55627: PPUSH
// result = [ ] ;
55628: LD_ADDR_VAR 0 7
55632: PUSH
55633: EMPTY
55634: ST_TO_ADDR
// temp_list = [ ] ;
55635: LD_ADDR_VAR 0 9
55639: PUSH
55640: EMPTY
55641: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55642: LD_VAR 0 4
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: LD_INT 3
55658: PUSH
55659: LD_INT 4
55661: PUSH
55662: LD_INT 5
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: IN
55673: NOT
55674: PUSH
55675: LD_VAR 0 1
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: IN
55690: PUSH
55691: LD_VAR 0 5
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: LD_INT 2
55701: PUSH
55702: LD_INT 3
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: LIST
55709: IN
55710: NOT
55711: AND
55712: OR
55713: IFFALSE 55717
// exit ;
55715: GO 74108
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55717: LD_VAR 0 1
55721: PUSH
55722: LD_INT 6
55724: PUSH
55725: LD_INT 7
55727: PUSH
55728: LD_INT 8
55730: PUSH
55731: LD_INT 13
55733: PUSH
55734: LD_INT 12
55736: PUSH
55737: LD_INT 15
55739: PUSH
55740: LD_INT 11
55742: PUSH
55743: LD_INT 14
55745: PUSH
55746: LD_INT 10
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: IN
55760: IFFALSE 55770
// btype = b_lab ;
55762: LD_ADDR_VAR 0 1
55766: PUSH
55767: LD_INT 6
55769: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55770: LD_VAR 0 6
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: LIST
55788: IN
55789: NOT
55790: PUSH
55791: LD_VAR 0 1
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: LD_INT 3
55807: PUSH
55808: LD_INT 6
55810: PUSH
55811: LD_INT 36
55813: PUSH
55814: LD_INT 4
55816: PUSH
55817: LD_INT 5
55819: PUSH
55820: LD_INT 31
55822: PUSH
55823: LD_INT 32
55825: PUSH
55826: LD_INT 33
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: IN
55842: NOT
55843: PUSH
55844: LD_VAR 0 6
55848: PUSH
55849: LD_INT 1
55851: EQUAL
55852: AND
55853: OR
55854: PUSH
55855: LD_VAR 0 1
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: LD_INT 3
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: IN
55870: NOT
55871: PUSH
55872: LD_VAR 0 6
55876: PUSH
55877: LD_INT 2
55879: EQUAL
55880: AND
55881: OR
55882: IFFALSE 55892
// mode = 0 ;
55884: LD_ADDR_VAR 0 6
55888: PUSH
55889: LD_INT 0
55891: ST_TO_ADDR
// case mode of 0 :
55892: LD_VAR 0 6
55896: PUSH
55897: LD_INT 0
55899: DOUBLE
55900: EQUAL
55901: IFTRUE 55905
55903: GO 67358
55905: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55906: LD_ADDR_VAR 0 11
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: LD_INT 2
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 3
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 3
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: LD_INT 2
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56099: LD_ADDR_VAR 0 12
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: LD_INT 1
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 2
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 3
56256: NEG
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 3
56267: NEG
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56295: LD_ADDR_VAR 0 13
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 2
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 2
56418: NEG
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 2
56430: NEG
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 2
56442: NEG
56443: PUSH
56444: LD_INT 3
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 3
56454: NEG
56455: PUSH
56456: LD_INT 2
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 3
56466: NEG
56467: PUSH
56468: LD_INT 3
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56494: LD_ADDR_VAR 0 14
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 2
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: LD_INT 2
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 3
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 3
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56690: LD_ADDR_VAR 0 15
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 3
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 3
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56883: LD_ADDR_VAR 0 16
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: LD_INT 2
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: LD_INT 2
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 2
57006: NEG
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 2
57018: NEG
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 3
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: LD_INT 3
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: LD_INT 3
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57076: LD_ADDR_VAR 0 17
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: LD_INT 2
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 2
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: LD_INT 1
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: LD_INT 2
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: LD_INT 2
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 2
57252: NEG
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: NEG
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 2
57275: NEG
57276: PUSH
57277: LD_INT 2
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57306: LD_ADDR_VAR 0 18
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: LD_INT 2
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 2
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 2
57493: NEG
57494: PUSH
57495: LD_INT 1
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 2
57505: NEG
57506: PUSH
57507: LD_INT 2
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57536: LD_ADDR_VAR 0 19
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: LD_INT 1
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 2
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: LD_INT 2
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: LD_INT 0
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: NEG
57736: PUSH
57737: LD_INT 2
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57766: LD_ADDR_VAR 0 20
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: LD_INT 2
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 2
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 2
57942: NEG
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 2
57953: NEG
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 2
57965: NEG
57966: PUSH
57967: LD_INT 2
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57996: LD_ADDR_VAR 0 21
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 1
58065: NEG
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: LD_INT 2
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 2
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: LD_INT 1
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 2
58172: NEG
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: NEG
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 2
58195: NEG
58196: PUSH
58197: LD_INT 2
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58226: LD_ADDR_VAR 0 22
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 1
58284: NEG
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: LD_INT 2
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: LD_INT 2
58322: NEG
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 2
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 2
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 2
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: LD_INT 2
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: LD_INT 2
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 2
58402: NEG
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 2
58413: NEG
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: LD_INT 2
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58456: LD_ADDR_VAR 0 23
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 1
58514: NEG
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: LD_INT 2
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: LD_INT 2
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 2
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: LD_INT 2
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: LD_INT 2
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: LD_INT 2
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: LD_INT 1
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 2
58643: NEG
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: NEG
58656: PUSH
58657: LD_INT 2
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 2
58667: NEG
58668: PUSH
58669: LD_INT 3
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: LD_INT 3
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58736: LD_ADDR_VAR 0 24
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 0
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 2
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: LD_INT 2
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: LD_INT 2
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 0
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: LD_INT 1
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 2
58923: NEG
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 2
58935: NEG
58936: PUSH
58937: LD_INT 2
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: LD_INT 2
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 3
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 3
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59012: LD_ADDR_VAR 0 25
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: LD_INT 2
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 2
59188: NEG
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 2
59199: NEG
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 2
59211: NEG
59212: PUSH
59213: LD_INT 2
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 3
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 2
59243: PUSH
59244: LD_INT 3
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: LD_INT 3
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59286: LD_ADDR_VAR 0 26
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: LD_INT 2
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 2
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 2
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 2
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: LD_INT 1
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 2
59497: PUSH
59498: LD_INT 3
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: LD_INT 3
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: LD_INT 2
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59562: LD_ADDR_VAR 0 27
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: LD_INT 2
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 2
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: LD_INT 2
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: LD_INT 2
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 2
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: LD_INT 1
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 2
59738: NEG
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 2
59761: NEG
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: NEG
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 2
59784: NEG
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 3
59795: NEG
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 3
59807: NEG
59808: PUSH
59809: LD_INT 2
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59842: LD_ADDR_VAR 0 28
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: NEG
59924: PUSH
59925: LD_INT 2
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: LD_INT 2
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: LD_INT 2
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: NEG
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 2
60018: NEG
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 2
60041: NEG
60042: PUSH
60043: LD_INT 2
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 2
60053: NEG
60054: PUSH
60055: LD_INT 3
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: LD_INT 3
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 3
60077: NEG
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 3
60089: NEG
60090: PUSH
60091: LD_INT 2
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60124: LD_ADDR_VAR 0 29
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: LD_INT 1
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: LD_INT 1
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: LD_INT 2
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: LD_INT 2
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 2
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 2
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: LD_INT 2
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: LD_INT 2
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 1
60279: NEG
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 2
60290: NEG
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 2
60302: NEG
60303: PUSH
60304: LD_INT 2
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: LD_INT 3
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 2
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 3
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 3
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 1
60357: NEG
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 3
60368: NEG
60369: PUSH
60370: LD_INT 2
60372: NEG
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60403: LD_ADDR_VAR 0 30
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: LD_INT 1
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: LD_INT 1
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 1
60461: NEG
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: LD_INT 1
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: LD_INT 2
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 2
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 2
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 2
60538: PUSH
60539: LD_INT 2
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 2
60569: NEG
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 2
60580: NEG
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: LD_INT 3
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: LD_INT 2
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 3
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: PUSH
60626: LD_INT 3
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 3
60646: NEG
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60681: LD_ADDR_VAR 0 31
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: LD_INT 1
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: LD_INT 2
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 1
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 2
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 2
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 2
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: LD_INT 1
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: LD_INT 2
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 2
60870: NEG
60871: PUSH
60872: LD_INT 3
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 3
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: PUSH
60904: LD_INT 3
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: NEG
60914: PUSH
60915: LD_INT 2
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 3
60924: NEG
60925: PUSH
60926: LD_INT 2
60928: NEG
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60959: LD_ADDR_VAR 0 32
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: LD_INT 1
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: NEG
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: LD_INT 1
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: NEG
61041: PUSH
61042: LD_INT 2
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: PUSH
61064: LD_INT 1
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: PUSH
61085: LD_INT 2
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: LD_INT 2
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 2
61125: NEG
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 2
61136: NEG
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: NEG
61149: PUSH
61150: LD_INT 3
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: LD_INT 2
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 3
61171: PUSH
61172: LD_INT 2
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 2
61181: PUSH
61182: LD_INT 3
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 2
61191: NEG
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 3
61202: NEG
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61237: LD_ADDR_VAR 0 33
61241: PUSH
61242: LD_INT 0
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: LD_INT 0
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 1
61295: NEG
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 1
61318: NEG
61319: PUSH
61320: LD_INT 2
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: LD_INT 1
61333: NEG
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 2
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 2
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 1
61361: PUSH
61362: LD_INT 2
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: LD_INT 2
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 1
61381: NEG
61382: PUSH
61383: LD_INT 1
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 2
61392: NEG
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 2
61403: NEG
61404: PUSH
61405: LD_INT 1
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 2
61415: NEG
61416: PUSH
61417: LD_INT 2
61419: NEG
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: LD_INT 3
61431: NEG
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 2
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 3
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: LD_INT 3
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 1
61470: NEG
61471: PUSH
61472: LD_INT 2
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 3
61481: NEG
61482: PUSH
61483: LD_INT 2
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61516: LD_ADDR_VAR 0 34
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: LD_INT 1
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 1
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: LD_INT 1
61589: NEG
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: LD_INT 2
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: LD_INT 2
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 2
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 2
61641: PUSH
61642: LD_INT 2
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: LD_INT 2
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 1
61661: NEG
61662: PUSH
61663: LD_INT 1
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 2
61672: NEG
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 2
61683: NEG
61684: PUSH
61685: LD_INT 1
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 2
61695: NEG
61696: PUSH
61697: LD_INT 2
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: PUSH
61709: LD_INT 3
61711: NEG
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 1
61719: PUSH
61720: LD_INT 2
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 3
61730: PUSH
61731: LD_INT 2
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 2
61740: PUSH
61741: LD_INT 3
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 2
61750: NEG
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 3
61761: NEG
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61796: LD_ADDR_VAR 0 35
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 1
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: LD_INT 1
61869: NEG
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 2
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 2
61887: NEG
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61908: LD_ADDR_VAR 0 36
61912: PUSH
61913: LD_INT 0
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 0
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 1
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 0
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: NEG
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: NEG
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: LD_INT 2
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: PUSH
62002: LD_INT 2
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62020: LD_ADDR_VAR 0 37
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: LD_INT 1
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 1
62112: NEG
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62132: LD_ADDR_VAR 0 38
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 0
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: LD_INT 1
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: LD_INT 1
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 2
62223: NEG
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62244: LD_ADDR_VAR 0 39
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 0
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 1
62302: NEG
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: LD_INT 2
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: LD_INT 2
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62356: LD_ADDR_VAR 0 40
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: LD_INT 1
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: LD_INT 1
62429: NEG
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 1
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62468: LD_ADDR_VAR 0 41
62472: PUSH
62473: LD_INT 0
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: LD_INT 1
62488: NEG
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: LD_INT 0
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: LD_INT 1
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: LD_INT 1
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: PUSH
62539: LD_INT 1
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: LD_INT 2
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: LD_INT 1
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 2
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: LD_INT 1
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 2
62592: PUSH
62593: LD_INT 2
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 1
62602: PUSH
62603: LD_INT 2
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 1
62612: NEG
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 2
62623: NEG
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 2
62634: NEG
62635: PUSH
62636: LD_INT 1
62638: NEG
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 2
62646: NEG
62647: PUSH
62648: LD_INT 2
62650: NEG
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 2
62658: NEG
62659: PUSH
62660: LD_INT 3
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 3
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 3
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 3
62701: PUSH
62702: LD_INT 2
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 3
62711: PUSH
62712: LD_INT 3
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: LD_INT 3
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 2
62731: NEG
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 3
62742: NEG
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 3
62753: NEG
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 3
62765: NEG
62766: PUSH
62767: LD_INT 2
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 3
62777: NEG
62778: PUSH
62779: LD_INT 3
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62818: LD_ADDR_VAR 0 42
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: LD_INT 1
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: LD_INT 0
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: LD_INT 1
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: LD_INT 2
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: LD_INT 2
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: LD_INT 1
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 2
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: PUSH
62944: LD_INT 2
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: LD_INT 2
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: LD_INT 2
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: NEG
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 2
62984: NEG
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 2
62996: NEG
62997: PUSH
62998: LD_INT 2
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 2
63008: NEG
63009: PUSH
63010: LD_INT 3
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 1
63020: NEG
63021: PUSH
63022: LD_INT 3
63024: NEG
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: LD_INT 3
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 1
63043: PUSH
63044: LD_INT 2
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 3
63054: PUSH
63055: LD_INT 2
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 3
63064: PUSH
63065: LD_INT 3
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 2
63074: PUSH
63075: LD_INT 3
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 1
63084: PUSH
63085: LD_INT 3
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 0
63094: PUSH
63095: LD_INT 3
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 1
63104: NEG
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 3
63115: NEG
63116: PUSH
63117: LD_INT 2
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 3
63127: NEG
63128: PUSH
63129: LD_INT 3
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63168: LD_ADDR_VAR 0 43
63172: PUSH
63173: LD_INT 0
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: LD_INT 1
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: LD_INT 0
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 1
63206: PUSH
63207: LD_INT 1
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: LD_INT 1
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: NEG
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: LD_INT 1
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 1
63249: NEG
63250: PUSH
63251: LD_INT 2
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: LD_INT 2
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 1
63272: PUSH
63273: LD_INT 1
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 2
63283: PUSH
63284: LD_INT 0
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 2
63293: PUSH
63294: LD_INT 1
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: LD_INT 2
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: LD_INT 2
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: LD_INT 1
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 2
63334: NEG
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 2
63345: NEG
63346: PUSH
63347: LD_INT 1
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: LD_INT 3
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 0
63369: PUSH
63370: LD_INT 3
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: LD_INT 2
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 2
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 3
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 3
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 1
63422: PUSH
63423: LD_INT 3
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: LD_INT 3
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 1
63442: NEG
63443: PUSH
63444: LD_INT 2
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 2
63453: NEG
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 3
63464: NEG
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 3
63475: NEG
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63516: LD_ADDR_VAR 0 44
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: LD_INT 1
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: LD_INT 1
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: LD_INT 1
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 1
63574: NEG
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: LD_INT 1
63589: NEG
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: PUSH
63599: LD_INT 2
63601: NEG
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 1
63609: PUSH
63610: LD_INT 1
63612: NEG
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 2
63620: PUSH
63621: LD_INT 0
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 2
63630: PUSH
63631: LD_INT 1
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 2
63640: PUSH
63641: LD_INT 2
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 1
63650: PUSH
63651: LD_INT 2
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 1
63660: NEG
63661: PUSH
63662: LD_INT 1
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 2
63671: NEG
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 2
63682: NEG
63683: PUSH
63684: LD_INT 1
63686: NEG
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 2
63694: NEG
63695: PUSH
63696: LD_INT 2
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 2
63706: NEG
63707: PUSH
63708: LD_INT 3
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 2
63718: PUSH
63719: LD_INT 1
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 3
63729: PUSH
63730: LD_INT 0
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 3
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 3
63749: PUSH
63750: LD_INT 2
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 3
63759: PUSH
63760: LD_INT 3
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: LD_INT 3
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 2
63779: NEG
63780: PUSH
63781: LD_INT 1
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 3
63790: NEG
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 3
63801: NEG
63802: PUSH
63803: LD_INT 1
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 3
63813: NEG
63814: PUSH
63815: LD_INT 2
63817: NEG
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 3
63825: NEG
63826: PUSH
63827: LD_INT 3
63829: NEG
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63866: LD_ADDR_VAR 0 45
63870: PUSH
63871: LD_INT 0
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: LD_INT 1
63886: NEG
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: LD_INT 0
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 1
63904: PUSH
63905: LD_INT 1
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 0
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 1
63924: NEG
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 1
63935: NEG
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 1
63947: NEG
63948: PUSH
63949: LD_INT 2
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: LD_INT 2
63962: NEG
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 1
63970: PUSH
63971: LD_INT 1
63973: NEG
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 2
63981: PUSH
63982: LD_INT 1
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 2
63991: PUSH
63992: LD_INT 2
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: LD_INT 2
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: LD_INT 2
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: LD_INT 1
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 2
64032: NEG
64033: PUSH
64034: LD_INT 1
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 2
64044: NEG
64045: PUSH
64046: LD_INT 2
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 2
64056: NEG
64057: PUSH
64058: LD_INT 3
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 1
64068: NEG
64069: PUSH
64070: LD_INT 3
64072: NEG
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: LD_INT 3
64083: NEG
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 1
64091: PUSH
64092: LD_INT 2
64094: NEG
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 3
64102: PUSH
64103: LD_INT 2
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 3
64112: PUSH
64113: LD_INT 3
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 2
64122: PUSH
64123: LD_INT 3
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 1
64132: PUSH
64133: LD_INT 3
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: LD_INT 3
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 1
64152: NEG
64153: PUSH
64154: LD_INT 2
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 3
64163: NEG
64164: PUSH
64165: LD_INT 2
64167: NEG
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 3
64175: NEG
64176: PUSH
64177: LD_INT 3
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64216: LD_ADDR_VAR 0 46
64220: PUSH
64221: LD_INT 0
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 0
64233: PUSH
64234: LD_INT 1
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 1
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 1
64254: PUSH
64255: LD_INT 1
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 0
64264: PUSH
64265: LD_INT 1
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 1
64274: NEG
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 1
64285: NEG
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 1
64297: NEG
64298: PUSH
64299: LD_INT 2
64301: NEG
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: LD_INT 2
64312: NEG
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: LD_INT 1
64323: NEG
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 2
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 2
64341: PUSH
64342: LD_INT 1
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: LD_INT 2
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: LD_INT 2
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: NEG
64372: PUSH
64373: LD_INT 1
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 2
64382: NEG
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 2
64393: NEG
64394: PUSH
64395: LD_INT 1
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 1
64405: NEG
64406: PUSH
64407: LD_INT 3
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: LD_INT 3
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 1
64428: PUSH
64429: LD_INT 2
64431: NEG
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 2
64439: PUSH
64440: LD_INT 1
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 3
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 3
64460: PUSH
64461: LD_INT 1
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: PUSH
64471: LD_INT 3
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: LD_INT 3
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: LD_INT 2
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 2
64501: NEG
64502: PUSH
64503: LD_INT 1
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 3
64512: NEG
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 3
64523: NEG
64524: PUSH
64525: LD_INT 1
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64564: LD_ADDR_VAR 0 47
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: LD_INT 1
64584: NEG
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 1
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 1
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 0
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 1
64622: NEG
64623: PUSH
64624: LD_INT 0
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 1
64633: NEG
64634: PUSH
64635: LD_INT 1
64637: NEG
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 1
64645: NEG
64646: PUSH
64647: LD_INT 2
64649: NEG
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: LD_INT 2
64660: NEG
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: PUSH
64669: LD_INT 1
64671: NEG
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 2
64679: NEG
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 2
64691: NEG
64692: PUSH
64693: LD_INT 2
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64715: LD_ADDR_VAR 0 48
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 0
64732: PUSH
64733: LD_INT 1
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 1
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 1
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: LD_INT 1
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 1
64773: NEG
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 1
64796: NEG
64797: PUSH
64798: LD_INT 2
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: LD_INT 2
64811: NEG
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 1
64819: PUSH
64820: LD_INT 1
64822: NEG
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 2
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 2
64840: PUSH
64841: LD_INT 1
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64862: LD_ADDR_VAR 0 49
64866: PUSH
64867: LD_INT 0
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: LD_INT 1
64882: NEG
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 1
64890: PUSH
64891: LD_INT 0
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: LD_INT 1
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 0
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 1
64920: NEG
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 1
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 2
64954: PUSH
64955: LD_INT 0
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: LD_INT 1
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 2
64974: PUSH
64975: LD_INT 2
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: LD_INT 2
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65006: LD_ADDR_VAR 0 50
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: LD_INT 1
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 1
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: LD_INT 1
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 0
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 1
65064: NEG
65065: PUSH
65066: LD_INT 0
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 1
65075: NEG
65076: PUSH
65077: LD_INT 1
65079: NEG
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 2
65087: PUSH
65088: LD_INT 1
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 2
65097: PUSH
65098: LD_INT 2
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 1
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: LD_INT 2
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 1
65127: NEG
65128: PUSH
65129: LD_INT 1
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65150: LD_ADDR_VAR 0 51
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: LD_INT 1
65170: NEG
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 1
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 1
65188: PUSH
65189: LD_INT 1
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 0
65198: PUSH
65199: LD_INT 1
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: NEG
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 1
65219: NEG
65220: PUSH
65221: LD_INT 1
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 1
65231: PUSH
65232: LD_INT 2
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 0
65241: PUSH
65242: LD_INT 2
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: LD_INT 1
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 2
65262: NEG
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 2
65273: NEG
65274: PUSH
65275: LD_INT 1
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65297: LD_ADDR_VAR 0 52
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 0
65314: PUSH
65315: LD_INT 1
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 1
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 1
65335: PUSH
65336: LD_INT 1
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: LD_INT 1
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 1
65355: NEG
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 1
65366: NEG
65367: PUSH
65368: LD_INT 1
65370: NEG
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 1
65378: NEG
65379: PUSH
65380: LD_INT 2
65382: NEG
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 1
65390: NEG
65391: PUSH
65392: LD_INT 1
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 2
65401: NEG
65402: PUSH
65403: LD_INT 0
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 2
65412: NEG
65413: PUSH
65414: LD_INT 1
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 2
65424: NEG
65425: PUSH
65426: LD_INT 2
65428: NEG
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65448: LD_ADDR_VAR 0 53
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: LD_INT 0
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: LD_INT 1
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 1
65476: PUSH
65477: LD_INT 0
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 1
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 0
65496: PUSH
65497: LD_INT 1
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 1
65506: NEG
65507: PUSH
65508: LD_INT 0
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 1
65517: NEG
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 1
65529: NEG
65530: PUSH
65531: LD_INT 2
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 0
65541: PUSH
65542: LD_INT 2
65544: NEG
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: LD_INT 1
65555: NEG
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 2
65563: PUSH
65564: LD_INT 0
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 2
65573: PUSH
65574: LD_INT 1
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 2
65583: PUSH
65584: LD_INT 2
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 1
65593: PUSH
65594: LD_INT 2
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 0
65603: PUSH
65604: LD_INT 2
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: NEG
65614: PUSH
65615: LD_INT 1
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 2
65624: NEG
65625: PUSH
65626: LD_INT 0
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 2
65635: NEG
65636: PUSH
65637: LD_INT 1
65639: NEG
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 2
65647: NEG
65648: PUSH
65649: LD_INT 2
65651: NEG
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65678: LD_ADDR_VAR 0 54
65682: PUSH
65683: LD_INT 0
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: LD_INT 1
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 1
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 1
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 0
65726: PUSH
65727: LD_INT 1
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 1
65736: NEG
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: LD_INT 1
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 1
65759: NEG
65760: PUSH
65761: LD_INT 2
65763: NEG
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: LD_INT 2
65774: NEG
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 1
65782: PUSH
65783: LD_INT 1
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 2
65793: PUSH
65794: LD_INT 0
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 2
65803: PUSH
65804: LD_INT 1
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: LD_INT 2
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: LD_INT 2
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 0
65833: PUSH
65834: LD_INT 2
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 1
65843: NEG
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 2
65854: NEG
65855: PUSH
65856: LD_INT 0
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 2
65865: NEG
65866: PUSH
65867: LD_INT 1
65869: NEG
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 2
65877: NEG
65878: PUSH
65879: LD_INT 2
65881: NEG
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65908: LD_ADDR_VAR 0 55
65912: PUSH
65913: LD_INT 0
65915: PUSH
65916: LD_INT 0
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: LD_INT 1
65928: NEG
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 1
65936: PUSH
65937: LD_INT 0
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 1
65946: PUSH
65947: LD_INT 1
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: LD_INT 1
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 1
65966: NEG
65967: PUSH
65968: LD_INT 0
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 1
65977: NEG
65978: PUSH
65979: LD_INT 1
65981: NEG
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 1
65989: NEG
65990: PUSH
65991: LD_INT 2
65993: NEG
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 0
66001: PUSH
66002: LD_INT 2
66004: NEG
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 1
66012: PUSH
66013: LD_INT 1
66015: NEG
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 2
66023: PUSH
66024: LD_INT 0
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 2
66033: PUSH
66034: LD_INT 1
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 2
66043: PUSH
66044: LD_INT 2
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 1
66053: PUSH
66054: LD_INT 2
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 0
66063: PUSH
66064: LD_INT 2
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 1
66073: NEG
66074: PUSH
66075: LD_INT 1
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 2
66084: NEG
66085: PUSH
66086: LD_INT 0
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 2
66095: NEG
66096: PUSH
66097: LD_INT 1
66099: NEG
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 2
66107: NEG
66108: PUSH
66109: LD_INT 2
66111: NEG
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66138: LD_ADDR_VAR 0 56
66142: PUSH
66143: LD_INT 0
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 0
66155: PUSH
66156: LD_INT 1
66158: NEG
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 1
66166: PUSH
66167: LD_INT 0
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 1
66176: PUSH
66177: LD_INT 1
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 0
66186: PUSH
66187: LD_INT 1
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 1
66196: NEG
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 1
66207: NEG
66208: PUSH
66209: LD_INT 1
66211: NEG
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: PUSH
66221: LD_INT 2
66223: NEG
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 0
66231: PUSH
66232: LD_INT 2
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 1
66242: PUSH
66243: LD_INT 1
66245: NEG
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 2
66253: PUSH
66254: LD_INT 0
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 2
66263: PUSH
66264: LD_INT 1
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 2
66273: PUSH
66274: LD_INT 2
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 1
66283: PUSH
66284: LD_INT 2
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 0
66293: PUSH
66294: LD_INT 2
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 1
66303: NEG
66304: PUSH
66305: LD_INT 1
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 2
66314: NEG
66315: PUSH
66316: LD_INT 0
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 2
66325: NEG
66326: PUSH
66327: LD_INT 1
66329: NEG
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 2
66337: NEG
66338: PUSH
66339: LD_INT 2
66341: NEG
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66368: LD_ADDR_VAR 0 57
66372: PUSH
66373: LD_INT 0
66375: PUSH
66376: LD_INT 0
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 0
66385: PUSH
66386: LD_INT 1
66388: NEG
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 1
66396: PUSH
66397: LD_INT 0
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 1
66406: PUSH
66407: LD_INT 1
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 0
66416: PUSH
66417: LD_INT 1
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 1
66426: NEG
66427: PUSH
66428: LD_INT 0
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 1
66437: NEG
66438: PUSH
66439: LD_INT 1
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 1
66449: NEG
66450: PUSH
66451: LD_INT 2
66453: NEG
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 0
66461: PUSH
66462: LD_INT 2
66464: NEG
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 1
66472: PUSH
66473: LD_INT 1
66475: NEG
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 2
66483: PUSH
66484: LD_INT 0
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 2
66493: PUSH
66494: LD_INT 1
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 2
66503: PUSH
66504: LD_INT 2
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: LD_INT 2
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 0
66523: PUSH
66524: LD_INT 2
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 1
66533: NEG
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 2
66544: NEG
66545: PUSH
66546: LD_INT 0
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 2
66555: NEG
66556: PUSH
66557: LD_INT 1
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 2
66567: NEG
66568: PUSH
66569: LD_INT 2
66571: NEG
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66598: LD_ADDR_VAR 0 58
66602: PUSH
66603: LD_INT 0
66605: PUSH
66606: LD_INT 0
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: LD_INT 1
66618: NEG
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 1
66626: PUSH
66627: LD_INT 0
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 1
66636: PUSH
66637: LD_INT 1
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 0
66646: PUSH
66647: LD_INT 1
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 1
66656: NEG
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 1
66667: NEG
66668: PUSH
66669: LD_INT 1
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 1
66679: NEG
66680: PUSH
66681: LD_INT 2
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 0
66691: PUSH
66692: LD_INT 2
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 1
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 2
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 2
66723: PUSH
66724: LD_INT 1
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 2
66733: PUSH
66734: LD_INT 2
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 1
66743: PUSH
66744: LD_INT 2
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 0
66753: PUSH
66754: LD_INT 2
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 1
66763: NEG
66764: PUSH
66765: LD_INT 1
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 2
66774: NEG
66775: PUSH
66776: LD_INT 0
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 2
66785: NEG
66786: PUSH
66787: LD_INT 1
66789: NEG
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 2
66797: NEG
66798: PUSH
66799: LD_INT 2
66801: NEG
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66828: LD_ADDR_VAR 0 59
66832: PUSH
66833: LD_INT 0
66835: PUSH
66836: LD_INT 0
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 0
66845: PUSH
66846: LD_INT 1
66848: NEG
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 1
66856: PUSH
66857: LD_INT 0
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 1
66866: PUSH
66867: LD_INT 1
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 0
66876: PUSH
66877: LD_INT 1
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 1
66886: NEG
66887: PUSH
66888: LD_INT 0
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 1
66897: NEG
66898: PUSH
66899: LD_INT 1
66901: NEG
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66916: LD_ADDR_VAR 0 60
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: LD_INT 0
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 0
66933: PUSH
66934: LD_INT 1
66936: NEG
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 1
66944: PUSH
66945: LD_INT 0
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 1
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 0
66964: PUSH
66965: LD_INT 1
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 1
66974: NEG
66975: PUSH
66976: LD_INT 0
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 1
66985: NEG
66986: PUSH
66987: LD_INT 1
66989: NEG
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67004: LD_ADDR_VAR 0 61
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 0
67021: PUSH
67022: LD_INT 1
67024: NEG
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 1
67032: PUSH
67033: LD_INT 0
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 1
67042: PUSH
67043: LD_INT 1
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 0
67052: PUSH
67053: LD_INT 1
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 1
67062: NEG
67063: PUSH
67064: LD_INT 0
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 1
67073: NEG
67074: PUSH
67075: LD_INT 1
67077: NEG
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67092: LD_ADDR_VAR 0 62
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: LD_INT 0
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 0
67109: PUSH
67110: LD_INT 1
67112: NEG
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 1
67120: PUSH
67121: LD_INT 0
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 1
67130: PUSH
67131: LD_INT 1
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 0
67140: PUSH
67141: LD_INT 1
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 1
67150: NEG
67151: PUSH
67152: LD_INT 0
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 1
67161: NEG
67162: PUSH
67163: LD_INT 1
67165: NEG
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67180: LD_ADDR_VAR 0 63
67184: PUSH
67185: LD_INT 0
67187: PUSH
67188: LD_INT 0
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 0
67197: PUSH
67198: LD_INT 1
67200: NEG
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 1
67208: PUSH
67209: LD_INT 0
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 1
67218: PUSH
67219: LD_INT 1
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 0
67228: PUSH
67229: LD_INT 1
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 1
67238: NEG
67239: PUSH
67240: LD_INT 0
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 1
67249: NEG
67250: PUSH
67251: LD_INT 1
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67268: LD_ADDR_VAR 0 64
67272: PUSH
67273: LD_INT 0
67275: PUSH
67276: LD_INT 0
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 0
67285: PUSH
67286: LD_INT 1
67288: NEG
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 1
67296: PUSH
67297: LD_INT 0
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 1
67306: PUSH
67307: LD_INT 1
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 0
67316: PUSH
67317: LD_INT 1
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 1
67326: NEG
67327: PUSH
67328: LD_INT 0
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 1
67337: NEG
67338: PUSH
67339: LD_INT 1
67341: NEG
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: ST_TO_ADDR
// end ; 1 :
67356: GO 73253
67358: LD_INT 1
67360: DOUBLE
67361: EQUAL
67362: IFTRUE 67366
67364: GO 69989
67366: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67367: LD_ADDR_VAR 0 11
67371: PUSH
67372: LD_INT 1
67374: NEG
67375: PUSH
67376: LD_INT 3
67378: NEG
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 0
67386: PUSH
67387: LD_INT 3
67389: NEG
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 1
67397: PUSH
67398: LD_INT 2
67400: NEG
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: LIST
67410: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67411: LD_ADDR_VAR 0 12
67415: PUSH
67416: LD_INT 2
67418: PUSH
67419: LD_INT 1
67421: NEG
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 3
67429: PUSH
67430: LD_INT 0
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 3
67439: PUSH
67440: LD_INT 1
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: LIST
67451: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67452: LD_ADDR_VAR 0 13
67456: PUSH
67457: LD_INT 3
67459: PUSH
67460: LD_INT 2
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 3
67469: PUSH
67470: LD_INT 3
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 2
67479: PUSH
67480: LD_INT 3
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: LIST
67491: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67492: LD_ADDR_VAR 0 14
67496: PUSH
67497: LD_INT 1
67499: PUSH
67500: LD_INT 3
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: LD_INT 3
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 1
67519: NEG
67520: PUSH
67521: LD_INT 2
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: LIST
67532: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67533: LD_ADDR_VAR 0 15
67537: PUSH
67538: LD_INT 2
67540: NEG
67541: PUSH
67542: LD_INT 1
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 3
67551: NEG
67552: PUSH
67553: LD_INT 0
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 3
67562: NEG
67563: PUSH
67564: LD_INT 1
67566: NEG
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: LIST
67576: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67577: LD_ADDR_VAR 0 16
67581: PUSH
67582: LD_INT 2
67584: NEG
67585: PUSH
67586: LD_INT 3
67588: NEG
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 3
67596: NEG
67597: PUSH
67598: LD_INT 2
67600: NEG
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 3
67608: NEG
67609: PUSH
67610: LD_INT 3
67612: NEG
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: LIST
67622: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67623: LD_ADDR_VAR 0 17
67627: PUSH
67628: LD_INT 1
67630: NEG
67631: PUSH
67632: LD_INT 3
67634: NEG
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 0
67642: PUSH
67643: LD_INT 3
67645: NEG
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 1
67653: PUSH
67654: LD_INT 2
67656: NEG
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: LIST
67666: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67667: LD_ADDR_VAR 0 18
67671: PUSH
67672: LD_INT 2
67674: PUSH
67675: LD_INT 1
67677: NEG
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 3
67685: PUSH
67686: LD_INT 0
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 3
67695: PUSH
67696: LD_INT 1
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: LIST
67707: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67708: LD_ADDR_VAR 0 19
67712: PUSH
67713: LD_INT 3
67715: PUSH
67716: LD_INT 2
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 3
67725: PUSH
67726: LD_INT 3
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 2
67735: PUSH
67736: LD_INT 3
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: LIST
67747: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67748: LD_ADDR_VAR 0 20
67752: PUSH
67753: LD_INT 1
67755: PUSH
67756: LD_INT 3
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 0
67765: PUSH
67766: LD_INT 3
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 1
67775: NEG
67776: PUSH
67777: LD_INT 2
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: LIST
67788: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67789: LD_ADDR_VAR 0 21
67793: PUSH
67794: LD_INT 2
67796: NEG
67797: PUSH
67798: LD_INT 1
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 3
67807: NEG
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 3
67818: NEG
67819: PUSH
67820: LD_INT 1
67822: NEG
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: LIST
67832: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67833: LD_ADDR_VAR 0 22
67837: PUSH
67838: LD_INT 2
67840: NEG
67841: PUSH
67842: LD_INT 3
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 3
67852: NEG
67853: PUSH
67854: LD_INT 2
67856: NEG
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 3
67864: NEG
67865: PUSH
67866: LD_INT 3
67868: NEG
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: LIST
67878: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67879: LD_ADDR_VAR 0 23
67883: PUSH
67884: LD_INT 0
67886: PUSH
67887: LD_INT 3
67889: NEG
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 1
67897: NEG
67898: PUSH
67899: LD_INT 4
67901: NEG
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 1
67909: PUSH
67910: LD_INT 3
67912: NEG
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: LIST
67922: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67923: LD_ADDR_VAR 0 24
67927: PUSH
67928: LD_INT 3
67930: PUSH
67931: LD_INT 0
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 3
67940: PUSH
67941: LD_INT 1
67943: NEG
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 4
67951: PUSH
67952: LD_INT 1
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: LIST
67963: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67964: LD_ADDR_VAR 0 25
67968: PUSH
67969: LD_INT 3
67971: PUSH
67972: LD_INT 3
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 4
67981: PUSH
67982: LD_INT 3
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 3
67991: PUSH
67992: LD_INT 4
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: LIST
68003: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68004: LD_ADDR_VAR 0 26
68008: PUSH
68009: LD_INT 0
68011: PUSH
68012: LD_INT 3
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 1
68021: PUSH
68022: LD_INT 4
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 1
68031: NEG
68032: PUSH
68033: LD_INT 3
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: LIST
68044: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68045: LD_ADDR_VAR 0 27
68049: PUSH
68050: LD_INT 3
68052: NEG
68053: PUSH
68054: LD_INT 0
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 3
68063: NEG
68064: PUSH
68065: LD_INT 1
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 4
68074: NEG
68075: PUSH
68076: LD_INT 1
68078: NEG
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: LIST
68088: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68089: LD_ADDR_VAR 0 28
68093: PUSH
68094: LD_INT 3
68096: NEG
68097: PUSH
68098: LD_INT 3
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 3
68108: NEG
68109: PUSH
68110: LD_INT 4
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 4
68120: NEG
68121: PUSH
68122: LD_INT 3
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: LIST
68134: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68135: LD_ADDR_VAR 0 29
68139: PUSH
68140: LD_INT 1
68142: NEG
68143: PUSH
68144: LD_INT 3
68146: NEG
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 0
68154: PUSH
68155: LD_INT 3
68157: NEG
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 1
68165: PUSH
68166: LD_INT 2
68168: NEG
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 1
68176: NEG
68177: PUSH
68178: LD_INT 4
68180: NEG
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 0
68188: PUSH
68189: LD_INT 4
68191: NEG
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 1
68199: PUSH
68200: LD_INT 3
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 1
68210: NEG
68211: PUSH
68212: LD_INT 5
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 0
68222: PUSH
68223: LD_INT 5
68225: NEG
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 1
68233: PUSH
68234: LD_INT 4
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 1
68244: NEG
68245: PUSH
68246: LD_INT 6
68248: NEG
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 0
68256: PUSH
68257: LD_INT 6
68259: NEG
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 1
68267: PUSH
68268: LD_INT 5
68270: NEG
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68290: LD_ADDR_VAR 0 30
68294: PUSH
68295: LD_INT 2
68297: PUSH
68298: LD_INT 1
68300: NEG
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 3
68308: PUSH
68309: LD_INT 0
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 3
68318: PUSH
68319: LD_INT 1
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 3
68328: PUSH
68329: LD_INT 1
68331: NEG
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 4
68339: PUSH
68340: LD_INT 0
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 4
68349: PUSH
68350: LD_INT 1
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 4
68359: PUSH
68360: LD_INT 1
68362: NEG
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 5
68370: PUSH
68371: LD_INT 0
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 5
68380: PUSH
68381: LD_INT 1
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 5
68390: PUSH
68391: LD_INT 1
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 6
68401: PUSH
68402: LD_INT 0
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 6
68411: PUSH
68412: LD_INT 1
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68433: LD_ADDR_VAR 0 31
68437: PUSH
68438: LD_INT 3
68440: PUSH
68441: LD_INT 2
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 3
68450: PUSH
68451: LD_INT 3
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 2
68460: PUSH
68461: LD_INT 3
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 4
68470: PUSH
68471: LD_INT 3
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 4
68480: PUSH
68481: LD_INT 4
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 3
68490: PUSH
68491: LD_INT 4
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 5
68500: PUSH
68501: LD_INT 4
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 5
68510: PUSH
68511: LD_INT 5
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 4
68520: PUSH
68521: LD_INT 5
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 6
68530: PUSH
68531: LD_INT 5
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 6
68540: PUSH
68541: LD_INT 6
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 5
68550: PUSH
68551: LD_INT 6
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68572: LD_ADDR_VAR 0 32
68576: PUSH
68577: LD_INT 1
68579: PUSH
68580: LD_INT 3
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 0
68589: PUSH
68590: LD_INT 3
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 1
68599: NEG
68600: PUSH
68601: LD_INT 2
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 1
68610: PUSH
68611: LD_INT 4
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 0
68620: PUSH
68621: LD_INT 4
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 1
68630: NEG
68631: PUSH
68632: LD_INT 3
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 1
68641: PUSH
68642: LD_INT 5
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 0
68651: PUSH
68652: LD_INT 5
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 1
68661: NEG
68662: PUSH
68663: LD_INT 4
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 1
68672: PUSH
68673: LD_INT 6
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 0
68682: PUSH
68683: LD_INT 6
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 1
68692: NEG
68693: PUSH
68694: LD_INT 5
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68715: LD_ADDR_VAR 0 33
68719: PUSH
68720: LD_INT 2
68722: NEG
68723: PUSH
68724: LD_INT 1
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 3
68733: NEG
68734: PUSH
68735: LD_INT 0
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 3
68744: NEG
68745: PUSH
68746: LD_INT 1
68748: NEG
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 3
68756: NEG
68757: PUSH
68758: LD_INT 1
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 4
68767: NEG
68768: PUSH
68769: LD_INT 0
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 4
68778: NEG
68779: PUSH
68780: LD_INT 1
68782: NEG
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 4
68790: NEG
68791: PUSH
68792: LD_INT 1
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 5
68801: NEG
68802: PUSH
68803: LD_INT 0
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 5
68812: NEG
68813: PUSH
68814: LD_INT 1
68816: NEG
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 5
68824: NEG
68825: PUSH
68826: LD_INT 1
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 6
68835: NEG
68836: PUSH
68837: LD_INT 0
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 6
68846: NEG
68847: PUSH
68848: LD_INT 1
68850: NEG
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68870: LD_ADDR_VAR 0 34
68874: PUSH
68875: LD_INT 2
68877: NEG
68878: PUSH
68879: LD_INT 3
68881: NEG
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 3
68889: NEG
68890: PUSH
68891: LD_INT 2
68893: NEG
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 3
68901: NEG
68902: PUSH
68903: LD_INT 3
68905: NEG
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 3
68913: NEG
68914: PUSH
68915: LD_INT 4
68917: NEG
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 4
68925: NEG
68926: PUSH
68927: LD_INT 3
68929: NEG
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 4
68937: NEG
68938: PUSH
68939: LD_INT 4
68941: NEG
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 4
68949: NEG
68950: PUSH
68951: LD_INT 5
68953: NEG
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 5
68961: NEG
68962: PUSH
68963: LD_INT 4
68965: NEG
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 5
68973: NEG
68974: PUSH
68975: LD_INT 5
68977: NEG
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 5
68985: NEG
68986: PUSH
68987: LD_INT 6
68989: NEG
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 6
68997: NEG
68998: PUSH
68999: LD_INT 5
69001: NEG
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 6
69009: NEG
69010: PUSH
69011: LD_INT 6
69013: NEG
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69033: LD_ADDR_VAR 0 41
69037: PUSH
69038: LD_INT 0
69040: PUSH
69041: LD_INT 2
69043: NEG
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 1
69051: NEG
69052: PUSH
69053: LD_INT 3
69055: NEG
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 1
69063: PUSH
69064: LD_INT 2
69066: NEG
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: LIST
69076: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69077: LD_ADDR_VAR 0 42
69081: PUSH
69082: LD_INT 2
69084: PUSH
69085: LD_INT 0
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 2
69094: PUSH
69095: LD_INT 1
69097: NEG
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 3
69105: PUSH
69106: LD_INT 1
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: LIST
69117: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69118: LD_ADDR_VAR 0 43
69122: PUSH
69123: LD_INT 2
69125: PUSH
69126: LD_INT 2
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 3
69135: PUSH
69136: LD_INT 2
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 2
69145: PUSH
69146: LD_INT 3
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: LIST
69157: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69158: LD_ADDR_VAR 0 44
69162: PUSH
69163: LD_INT 0
69165: PUSH
69166: LD_INT 2
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 1
69175: PUSH
69176: LD_INT 3
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 1
69185: NEG
69186: PUSH
69187: LD_INT 2
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: LIST
69198: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69199: LD_ADDR_VAR 0 45
69203: PUSH
69204: LD_INT 2
69206: NEG
69207: PUSH
69208: LD_INT 0
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 2
69217: NEG
69218: PUSH
69219: LD_INT 1
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 3
69228: NEG
69229: PUSH
69230: LD_INT 1
69232: NEG
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: LIST
69242: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69243: LD_ADDR_VAR 0 46
69247: PUSH
69248: LD_INT 2
69250: NEG
69251: PUSH
69252: LD_INT 2
69254: NEG
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 2
69262: NEG
69263: PUSH
69264: LD_INT 3
69266: NEG
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 3
69274: NEG
69275: PUSH
69276: LD_INT 2
69278: NEG
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: LIST
69288: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69289: LD_ADDR_VAR 0 47
69293: PUSH
69294: LD_INT 2
69296: NEG
69297: PUSH
69298: LD_INT 3
69300: NEG
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 1
69308: NEG
69309: PUSH
69310: LD_INT 3
69312: NEG
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69322: LD_ADDR_VAR 0 48
69326: PUSH
69327: LD_INT 1
69329: PUSH
69330: LD_INT 2
69332: NEG
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 2
69340: PUSH
69341: LD_INT 1
69343: NEG
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69353: LD_ADDR_VAR 0 49
69357: PUSH
69358: LD_INT 3
69360: PUSH
69361: LD_INT 1
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 3
69370: PUSH
69371: LD_INT 2
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69382: LD_ADDR_VAR 0 50
69386: PUSH
69387: LD_INT 2
69389: PUSH
69390: LD_INT 3
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 1
69399: PUSH
69400: LD_INT 3
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69411: LD_ADDR_VAR 0 51
69415: PUSH
69416: LD_INT 1
69418: NEG
69419: PUSH
69420: LD_INT 2
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 2
69429: NEG
69430: PUSH
69431: LD_INT 1
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69442: LD_ADDR_VAR 0 52
69446: PUSH
69447: LD_INT 3
69449: NEG
69450: PUSH
69451: LD_INT 1
69453: NEG
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 3
69461: NEG
69462: PUSH
69463: LD_INT 2
69465: NEG
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69475: LD_ADDR_VAR 0 53
69479: PUSH
69480: LD_INT 1
69482: NEG
69483: PUSH
69484: LD_INT 3
69486: NEG
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_INT 0
69494: PUSH
69495: LD_INT 3
69497: NEG
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 1
69505: PUSH
69506: LD_INT 2
69508: NEG
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: LIST
69518: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69519: LD_ADDR_VAR 0 54
69523: PUSH
69524: LD_INT 2
69526: PUSH
69527: LD_INT 1
69529: NEG
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 3
69537: PUSH
69538: LD_INT 0
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 3
69547: PUSH
69548: LD_INT 1
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: LIST
69559: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69560: LD_ADDR_VAR 0 55
69564: PUSH
69565: LD_INT 3
69567: PUSH
69568: LD_INT 2
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 3
69577: PUSH
69578: LD_INT 3
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 2
69587: PUSH
69588: LD_INT 3
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: LIST
69599: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69600: LD_ADDR_VAR 0 56
69604: PUSH
69605: LD_INT 1
69607: PUSH
69608: LD_INT 3
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 0
69617: PUSH
69618: LD_INT 3
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 1
69627: NEG
69628: PUSH
69629: LD_INT 2
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: LIST
69640: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69641: LD_ADDR_VAR 0 57
69645: PUSH
69646: LD_INT 2
69648: NEG
69649: PUSH
69650: LD_INT 1
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 3
69659: NEG
69660: PUSH
69661: LD_INT 0
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 3
69670: NEG
69671: PUSH
69672: LD_INT 1
69674: NEG
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: LIST
69684: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69685: LD_ADDR_VAR 0 58
69689: PUSH
69690: LD_INT 2
69692: NEG
69693: PUSH
69694: LD_INT 3
69696: NEG
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 3
69704: NEG
69705: PUSH
69706: LD_INT 2
69708: NEG
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 3
69716: NEG
69717: PUSH
69718: LD_INT 3
69720: NEG
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: LIST
69730: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69731: LD_ADDR_VAR 0 59
69735: PUSH
69736: LD_INT 1
69738: NEG
69739: PUSH
69740: LD_INT 2
69742: NEG
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 0
69750: PUSH
69751: LD_INT 2
69753: NEG
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 1
69761: PUSH
69762: LD_INT 1
69764: NEG
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: LIST
69774: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69775: LD_ADDR_VAR 0 60
69779: PUSH
69780: LD_INT 1
69782: PUSH
69783: LD_INT 1
69785: NEG
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 2
69793: PUSH
69794: LD_INT 0
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 2
69803: PUSH
69804: LD_INT 1
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: LIST
69815: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69816: LD_ADDR_VAR 0 61
69820: PUSH
69821: LD_INT 2
69823: PUSH
69824: LD_INT 1
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 2
69833: PUSH
69834: LD_INT 2
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 1
69843: PUSH
69844: LD_INT 2
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: LIST
69855: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69856: LD_ADDR_VAR 0 62
69860: PUSH
69861: LD_INT 1
69863: PUSH
69864: LD_INT 2
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 0
69873: PUSH
69874: LD_INT 2
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 1
69883: NEG
69884: PUSH
69885: LD_INT 1
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: LIST
69896: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69897: LD_ADDR_VAR 0 63
69901: PUSH
69902: LD_INT 1
69904: NEG
69905: PUSH
69906: LD_INT 1
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 2
69915: NEG
69916: PUSH
69917: LD_INT 0
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 2
69926: NEG
69927: PUSH
69928: LD_INT 1
69930: NEG
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: LIST
69940: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69941: LD_ADDR_VAR 0 64
69945: PUSH
69946: LD_INT 1
69948: NEG
69949: PUSH
69950: LD_INT 2
69952: NEG
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 2
69960: NEG
69961: PUSH
69962: LD_INT 1
69964: NEG
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 2
69972: NEG
69973: PUSH
69974: LD_INT 2
69976: NEG
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: LIST
69986: ST_TO_ADDR
// end ; 2 :
69987: GO 73253
69989: LD_INT 2
69991: DOUBLE
69992: EQUAL
69993: IFTRUE 69997
69995: GO 73252
69997: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69998: LD_ADDR_VAR 0 29
70002: PUSH
70003: LD_INT 4
70005: PUSH
70006: LD_INT 0
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 4
70015: PUSH
70016: LD_INT 1
70018: NEG
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 5
70026: PUSH
70027: LD_INT 0
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 5
70036: PUSH
70037: LD_INT 1
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 4
70046: PUSH
70047: LD_INT 1
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 3
70056: PUSH
70057: LD_INT 0
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 3
70066: PUSH
70067: LD_INT 1
70069: NEG
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: LD_INT 3
70077: PUSH
70078: LD_INT 2
70080: NEG
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 5
70088: PUSH
70089: LD_INT 2
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 3
70098: PUSH
70099: LD_INT 3
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 3
70108: PUSH
70109: LD_INT 2
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 4
70118: PUSH
70119: LD_INT 3
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 4
70128: PUSH
70129: LD_INT 4
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 3
70138: PUSH
70139: LD_INT 4
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 2
70148: PUSH
70149: LD_INT 3
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 2
70158: PUSH
70159: LD_INT 2
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 4
70168: PUSH
70169: LD_INT 2
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 2
70178: PUSH
70179: LD_INT 4
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 0
70188: PUSH
70189: LD_INT 4
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 0
70198: PUSH
70199: LD_INT 3
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 1
70208: PUSH
70209: LD_INT 4
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 1
70218: PUSH
70219: LD_INT 5
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 0
70228: PUSH
70229: LD_INT 5
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 1
70238: NEG
70239: PUSH
70240: LD_INT 4
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 1
70249: NEG
70250: PUSH
70251: LD_INT 3
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 2
70260: PUSH
70261: LD_INT 5
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 2
70270: NEG
70271: PUSH
70272: LD_INT 3
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 3
70281: NEG
70282: PUSH
70283: LD_INT 0
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 3
70292: NEG
70293: PUSH
70294: LD_INT 1
70296: NEG
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: LD_INT 2
70304: NEG
70305: PUSH
70306: LD_INT 0
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 2
70315: NEG
70316: PUSH
70317: LD_INT 1
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: LD_INT 3
70326: NEG
70327: PUSH
70328: LD_INT 1
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 4
70337: NEG
70338: PUSH
70339: LD_INT 0
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 4
70348: NEG
70349: PUSH
70350: LD_INT 1
70352: NEG
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 4
70360: NEG
70361: PUSH
70362: LD_INT 2
70364: NEG
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 2
70372: NEG
70373: PUSH
70374: LD_INT 2
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 4
70383: NEG
70384: PUSH
70385: LD_INT 4
70387: NEG
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 4
70395: NEG
70396: PUSH
70397: LD_INT 5
70399: NEG
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 3
70407: NEG
70408: PUSH
70409: LD_INT 4
70411: NEG
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: PUSH
70417: LD_INT 3
70419: NEG
70420: PUSH
70421: LD_INT 3
70423: NEG
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 4
70431: NEG
70432: PUSH
70433: LD_INT 3
70435: NEG
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 5
70443: NEG
70444: PUSH
70445: LD_INT 4
70447: NEG
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 5
70455: NEG
70456: PUSH
70457: LD_INT 5
70459: NEG
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 3
70467: NEG
70468: PUSH
70469: LD_INT 5
70471: NEG
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 5
70479: NEG
70480: PUSH
70481: LD_INT 3
70483: NEG
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70536: LD_ADDR_VAR 0 30
70540: PUSH
70541: LD_INT 4
70543: PUSH
70544: LD_INT 4
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 4
70553: PUSH
70554: LD_INT 3
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 5
70563: PUSH
70564: LD_INT 4
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 5
70573: PUSH
70574: LD_INT 5
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 4
70583: PUSH
70584: LD_INT 5
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 3
70593: PUSH
70594: LD_INT 4
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 3
70603: PUSH
70604: LD_INT 3
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: LD_INT 5
70613: PUSH
70614: LD_INT 3
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 3
70623: PUSH
70624: LD_INT 5
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 0
70633: PUSH
70634: LD_INT 3
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 0
70643: PUSH
70644: LD_INT 2
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 1
70653: PUSH
70654: LD_INT 3
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 1
70663: PUSH
70664: LD_INT 4
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: LD_INT 4
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 1
70683: NEG
70684: PUSH
70685: LD_INT 3
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 1
70694: NEG
70695: PUSH
70696: LD_INT 2
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 2
70705: PUSH
70706: LD_INT 4
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 2
70715: NEG
70716: PUSH
70717: LD_INT 2
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 4
70726: NEG
70727: PUSH
70728: LD_INT 0
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 4
70737: NEG
70738: PUSH
70739: LD_INT 1
70741: NEG
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 3
70749: NEG
70750: PUSH
70751: LD_INT 0
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 3
70760: NEG
70761: PUSH
70762: LD_INT 1
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 4
70771: NEG
70772: PUSH
70773: LD_INT 1
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 5
70782: NEG
70783: PUSH
70784: LD_INT 0
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 5
70793: NEG
70794: PUSH
70795: LD_INT 1
70797: NEG
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 5
70805: NEG
70806: PUSH
70807: LD_INT 2
70809: NEG
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 3
70817: NEG
70818: PUSH
70819: LD_INT 2
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 3
70828: NEG
70829: PUSH
70830: LD_INT 3
70832: NEG
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 3
70840: NEG
70841: PUSH
70842: LD_INT 4
70844: NEG
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 2
70852: NEG
70853: PUSH
70854: LD_INT 3
70856: NEG
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 2
70864: NEG
70865: PUSH
70866: LD_INT 2
70868: NEG
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 3
70876: NEG
70877: PUSH
70878: LD_INT 2
70880: NEG
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 4
70888: NEG
70889: PUSH
70890: LD_INT 3
70892: NEG
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 4
70900: NEG
70901: PUSH
70902: LD_INT 4
70904: NEG
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 2
70912: NEG
70913: PUSH
70914: LD_INT 4
70916: NEG
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 4
70924: NEG
70925: PUSH
70926: LD_INT 2
70928: NEG
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 0
70936: PUSH
70937: LD_INT 4
70939: NEG
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: LD_INT 0
70947: PUSH
70948: LD_INT 5
70950: NEG
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 1
70958: PUSH
70959: LD_INT 4
70961: NEG
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 1
70969: PUSH
70970: LD_INT 3
70972: NEG
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 0
70980: PUSH
70981: LD_INT 3
70983: NEG
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 1
70991: NEG
70992: PUSH
70993: LD_INT 4
70995: NEG
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 1
71003: NEG
71004: PUSH
71005: LD_INT 5
71007: NEG
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 2
71015: PUSH
71016: LD_INT 3
71018: NEG
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 2
71026: NEG
71027: PUSH
71028: LD_INT 5
71030: NEG
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71083: LD_ADDR_VAR 0 31
71087: PUSH
71088: LD_INT 0
71090: PUSH
71091: LD_INT 4
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PUSH
71098: LD_INT 0
71100: PUSH
71101: LD_INT 3
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 1
71110: PUSH
71111: LD_INT 4
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: LD_INT 1
71120: PUSH
71121: LD_INT 5
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: LD_INT 0
71130: PUSH
71131: LD_INT 5
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 1
71140: NEG
71141: PUSH
71142: LD_INT 4
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 1
71151: NEG
71152: PUSH
71153: LD_INT 3
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 2
71162: PUSH
71163: LD_INT 5
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 2
71172: NEG
71173: PUSH
71174: LD_INT 3
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 3
71183: NEG
71184: PUSH
71185: LD_INT 0
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_INT 3
71194: NEG
71195: PUSH
71196: LD_INT 1
71198: NEG
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 2
71206: NEG
71207: PUSH
71208: LD_INT 0
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 2
71217: NEG
71218: PUSH
71219: LD_INT 1
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 3
71228: NEG
71229: PUSH
71230: LD_INT 1
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 4
71239: NEG
71240: PUSH
71241: LD_INT 0
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: LD_INT 4
71250: NEG
71251: PUSH
71252: LD_INT 1
71254: NEG
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 4
71262: NEG
71263: PUSH
71264: LD_INT 2
71266: NEG
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 2
71274: NEG
71275: PUSH
71276: LD_INT 2
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 4
71285: NEG
71286: PUSH
71287: LD_INT 4
71289: NEG
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 4
71297: NEG
71298: PUSH
71299: LD_INT 5
71301: NEG
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 3
71309: NEG
71310: PUSH
71311: LD_INT 4
71313: NEG
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: LD_INT 3
71321: NEG
71322: PUSH
71323: LD_INT 3
71325: NEG
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 4
71333: NEG
71334: PUSH
71335: LD_INT 3
71337: NEG
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 5
71345: NEG
71346: PUSH
71347: LD_INT 4
71349: NEG
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 5
71357: NEG
71358: PUSH
71359: LD_INT 5
71361: NEG
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 3
71369: NEG
71370: PUSH
71371: LD_INT 5
71373: NEG
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 5
71381: NEG
71382: PUSH
71383: LD_INT 3
71385: NEG
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: LD_INT 0
71393: PUSH
71394: LD_INT 3
71396: NEG
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 0
71404: PUSH
71405: LD_INT 4
71407: NEG
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: LD_INT 1
71415: PUSH
71416: LD_INT 3
71418: NEG
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 1
71426: PUSH
71427: LD_INT 2
71429: NEG
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 0
71437: PUSH
71438: LD_INT 2
71440: NEG
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 1
71448: NEG
71449: PUSH
71450: LD_INT 3
71452: NEG
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PUSH
71458: LD_INT 1
71460: NEG
71461: PUSH
71462: LD_INT 4
71464: NEG
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 2
71472: PUSH
71473: LD_INT 2
71475: NEG
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 2
71483: NEG
71484: PUSH
71485: LD_INT 4
71487: NEG
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 4
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 4
71505: PUSH
71506: LD_INT 1
71508: NEG
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: PUSH
71514: LD_INT 5
71516: PUSH
71517: LD_INT 0
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: PUSH
71524: LD_INT 5
71526: PUSH
71527: LD_INT 1
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: PUSH
71534: LD_INT 4
71536: PUSH
71537: LD_INT 1
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: PUSH
71544: LD_INT 3
71546: PUSH
71547: LD_INT 0
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 3
71556: PUSH
71557: LD_INT 1
71559: NEG
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 3
71567: PUSH
71568: LD_INT 2
71570: NEG
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 5
71578: PUSH
71579: LD_INT 2
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: EMPTY
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71633: LD_ADDR_VAR 0 32
71637: PUSH
71638: LD_INT 4
71640: NEG
71641: PUSH
71642: LD_INT 0
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 4
71651: NEG
71652: PUSH
71653: LD_INT 1
71655: NEG
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 3
71663: NEG
71664: PUSH
71665: LD_INT 0
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PUSH
71672: LD_INT 3
71674: NEG
71675: PUSH
71676: LD_INT 1
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: LD_INT 4
71685: NEG
71686: PUSH
71687: LD_INT 1
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 5
71696: NEG
71697: PUSH
71698: LD_INT 0
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 5
71707: NEG
71708: PUSH
71709: LD_INT 1
71711: NEG
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: LD_INT 5
71719: NEG
71720: PUSH
71721: LD_INT 2
71723: NEG
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: LD_INT 3
71731: NEG
71732: PUSH
71733: LD_INT 2
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 3
71742: NEG
71743: PUSH
71744: LD_INT 3
71746: NEG
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 3
71754: NEG
71755: PUSH
71756: LD_INT 4
71758: NEG
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PUSH
71764: LD_INT 2
71766: NEG
71767: PUSH
71768: LD_INT 3
71770: NEG
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 2
71778: NEG
71779: PUSH
71780: LD_INT 2
71782: NEG
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 3
71790: NEG
71791: PUSH
71792: LD_INT 2
71794: NEG
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_INT 4
71802: NEG
71803: PUSH
71804: LD_INT 3
71806: NEG
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 4
71814: NEG
71815: PUSH
71816: LD_INT 4
71818: NEG
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_INT 2
71826: NEG
71827: PUSH
71828: LD_INT 4
71830: NEG
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_INT 4
71838: NEG
71839: PUSH
71840: LD_INT 2
71842: NEG
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: PUSH
71848: LD_INT 0
71850: PUSH
71851: LD_INT 4
71853: NEG
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 0
71861: PUSH
71862: LD_INT 5
71864: NEG
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PUSH
71870: LD_INT 1
71872: PUSH
71873: LD_INT 4
71875: NEG
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_INT 1
71883: PUSH
71884: LD_INT 3
71886: NEG
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PUSH
71892: LD_INT 0
71894: PUSH
71895: LD_INT 3
71897: NEG
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: LD_INT 1
71905: NEG
71906: PUSH
71907: LD_INT 4
71909: NEG
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 1
71917: NEG
71918: PUSH
71919: LD_INT 5
71921: NEG
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 2
71929: PUSH
71930: LD_INT 3
71932: NEG
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 2
71940: NEG
71941: PUSH
71942: LD_INT 5
71944: NEG
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 3
71952: PUSH
71953: LD_INT 0
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 3
71962: PUSH
71963: LD_INT 1
71965: NEG
71966: PUSH
71967: EMPTY
71968: LIST
71969: LIST
71970: PUSH
71971: LD_INT 4
71973: PUSH
71974: LD_INT 0
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: LD_INT 4
71983: PUSH
71984: LD_INT 1
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 3
71993: PUSH
71994: LD_INT 1
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 2
72003: PUSH
72004: LD_INT 0
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 2
72013: PUSH
72014: LD_INT 1
72016: NEG
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: LD_INT 2
72024: PUSH
72025: LD_INT 2
72027: NEG
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 4
72035: PUSH
72036: LD_INT 2
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: LD_INT 4
72045: PUSH
72046: LD_INT 4
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 4
72055: PUSH
72056: LD_INT 3
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: LD_INT 5
72065: PUSH
72066: LD_INT 4
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: PUSH
72073: LD_INT 5
72075: PUSH
72076: LD_INT 5
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_INT 4
72085: PUSH
72086: LD_INT 5
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_INT 3
72095: PUSH
72096: LD_INT 4
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PUSH
72103: LD_INT 3
72105: PUSH
72106: LD_INT 3
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 5
72115: PUSH
72116: LD_INT 3
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 3
72125: PUSH
72126: LD_INT 5
72128: PUSH
72129: EMPTY
72130: LIST
72131: LIST
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72180: LD_ADDR_VAR 0 33
72184: PUSH
72185: LD_INT 4
72187: NEG
72188: PUSH
72189: LD_INT 4
72191: NEG
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 4
72199: NEG
72200: PUSH
72201: LD_INT 5
72203: NEG
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: PUSH
72209: LD_INT 3
72211: NEG
72212: PUSH
72213: LD_INT 4
72215: NEG
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 3
72223: NEG
72224: PUSH
72225: LD_INT 3
72227: NEG
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: LD_INT 4
72235: NEG
72236: PUSH
72237: LD_INT 3
72239: NEG
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: LD_INT 5
72247: NEG
72248: PUSH
72249: LD_INT 4
72251: NEG
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 5
72259: NEG
72260: PUSH
72261: LD_INT 5
72263: NEG
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: PUSH
72269: LD_INT 3
72271: NEG
72272: PUSH
72273: LD_INT 5
72275: NEG
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PUSH
72281: LD_INT 5
72283: NEG
72284: PUSH
72285: LD_INT 3
72287: NEG
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: PUSH
72293: LD_INT 0
72295: PUSH
72296: LD_INT 3
72298: NEG
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_INT 0
72306: PUSH
72307: LD_INT 4
72309: NEG
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 1
72317: PUSH
72318: LD_INT 3
72320: NEG
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 1
72328: PUSH
72329: LD_INT 2
72331: NEG
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: PUSH
72337: LD_INT 0
72339: PUSH
72340: LD_INT 2
72342: NEG
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 1
72350: NEG
72351: PUSH
72352: LD_INT 3
72354: NEG
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: PUSH
72360: LD_INT 1
72362: NEG
72363: PUSH
72364: LD_INT 4
72366: NEG
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: LD_INT 2
72374: PUSH
72375: LD_INT 2
72377: NEG
72378: PUSH
72379: EMPTY
72380: LIST
72381: LIST
72382: PUSH
72383: LD_INT 2
72385: NEG
72386: PUSH
72387: LD_INT 4
72389: NEG
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 4
72397: PUSH
72398: LD_INT 0
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: LD_INT 4
72407: PUSH
72408: LD_INT 1
72410: NEG
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PUSH
72416: LD_INT 5
72418: PUSH
72419: LD_INT 0
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: PUSH
72426: LD_INT 5
72428: PUSH
72429: LD_INT 1
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: PUSH
72436: LD_INT 4
72438: PUSH
72439: LD_INT 1
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: PUSH
72446: LD_INT 3
72448: PUSH
72449: LD_INT 0
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 3
72458: PUSH
72459: LD_INT 1
72461: NEG
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PUSH
72467: LD_INT 3
72469: PUSH
72470: LD_INT 2
72472: NEG
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 5
72480: PUSH
72481: LD_INT 2
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: LD_INT 3
72490: PUSH
72491: LD_INT 3
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: PUSH
72498: LD_INT 3
72500: PUSH
72501: LD_INT 2
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 4
72510: PUSH
72511: LD_INT 3
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 4
72520: PUSH
72521: LD_INT 4
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: LD_INT 3
72530: PUSH
72531: LD_INT 4
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 2
72540: PUSH
72541: LD_INT 3
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: LD_INT 2
72550: PUSH
72551: LD_INT 2
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: PUSH
72558: LD_INT 4
72560: PUSH
72561: LD_INT 2
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: LD_INT 2
72570: PUSH
72571: LD_INT 4
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: PUSH
72578: LD_INT 0
72580: PUSH
72581: LD_INT 4
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: PUSH
72588: LD_INT 0
72590: PUSH
72591: LD_INT 3
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 1
72600: PUSH
72601: LD_INT 4
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 1
72610: PUSH
72611: LD_INT 5
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: PUSH
72618: LD_INT 0
72620: PUSH
72621: LD_INT 5
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: LD_INT 1
72630: NEG
72631: PUSH
72632: LD_INT 4
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PUSH
72639: LD_INT 1
72641: NEG
72642: PUSH
72643: LD_INT 3
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: PUSH
72650: LD_INT 2
72652: PUSH
72653: LD_INT 5
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 2
72662: NEG
72663: PUSH
72664: LD_INT 3
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: LIST
72708: LIST
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72718: LD_ADDR_VAR 0 34
72722: PUSH
72723: LD_INT 0
72725: PUSH
72726: LD_INT 4
72728: NEG
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: PUSH
72734: LD_INT 0
72736: PUSH
72737: LD_INT 5
72739: NEG
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: LD_INT 1
72747: PUSH
72748: LD_INT 4
72750: NEG
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 1
72758: PUSH
72759: LD_INT 3
72761: NEG
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 0
72769: PUSH
72770: LD_INT 3
72772: NEG
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: PUSH
72778: LD_INT 1
72780: NEG
72781: PUSH
72782: LD_INT 4
72784: NEG
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 1
72792: NEG
72793: PUSH
72794: LD_INT 5
72796: NEG
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 2
72804: PUSH
72805: LD_INT 3
72807: NEG
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: LD_INT 2
72815: NEG
72816: PUSH
72817: LD_INT 5
72819: NEG
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: LD_INT 3
72827: PUSH
72828: LD_INT 0
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 3
72837: PUSH
72838: LD_INT 1
72840: NEG
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 4
72848: PUSH
72849: LD_INT 0
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PUSH
72856: LD_INT 4
72858: PUSH
72859: LD_INT 1
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 3
72868: PUSH
72869: LD_INT 1
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 2
72878: PUSH
72879: LD_INT 0
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 2
72888: PUSH
72889: LD_INT 1
72891: NEG
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 2
72899: PUSH
72900: LD_INT 2
72902: NEG
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: PUSH
72908: LD_INT 4
72910: PUSH
72911: LD_INT 2
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 4
72920: PUSH
72921: LD_INT 4
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: PUSH
72928: LD_INT 4
72930: PUSH
72931: LD_INT 3
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PUSH
72938: LD_INT 5
72940: PUSH
72941: LD_INT 4
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: LD_INT 5
72950: PUSH
72951: LD_INT 5
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 4
72960: PUSH
72961: LD_INT 5
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 3
72970: PUSH
72971: LD_INT 4
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: LD_INT 3
72980: PUSH
72981: LD_INT 3
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 5
72990: PUSH
72991: LD_INT 3
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: PUSH
72998: LD_INT 3
73000: PUSH
73001: LD_INT 5
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_INT 0
73010: PUSH
73011: LD_INT 3
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 0
73020: PUSH
73021: LD_INT 2
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 1
73030: PUSH
73031: LD_INT 3
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 1
73040: PUSH
73041: LD_INT 4
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: PUSH
73048: LD_INT 0
73050: PUSH
73051: LD_INT 4
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: LD_INT 1
73060: NEG
73061: PUSH
73062: LD_INT 3
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 1
73071: NEG
73072: PUSH
73073: LD_INT 2
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 2
73082: PUSH
73083: LD_INT 4
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 2
73092: NEG
73093: PUSH
73094: LD_INT 2
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PUSH
73101: LD_INT 4
73103: NEG
73104: PUSH
73105: LD_INT 0
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: PUSH
73112: LD_INT 4
73114: NEG
73115: PUSH
73116: LD_INT 1
73118: NEG
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PUSH
73124: LD_INT 3
73126: NEG
73127: PUSH
73128: LD_INT 0
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PUSH
73135: LD_INT 3
73137: NEG
73138: PUSH
73139: LD_INT 1
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: PUSH
73146: LD_INT 4
73148: NEG
73149: PUSH
73150: LD_INT 1
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: PUSH
73157: LD_INT 5
73159: NEG
73160: PUSH
73161: LD_INT 0
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: PUSH
73168: LD_INT 5
73170: NEG
73171: PUSH
73172: LD_INT 1
73174: NEG
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: PUSH
73180: LD_INT 5
73182: NEG
73183: PUSH
73184: LD_INT 2
73186: NEG
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: LD_INT 3
73194: NEG
73195: PUSH
73196: LD_INT 2
73198: PUSH
73199: EMPTY
73200: LIST
73201: LIST
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: ST_TO_ADDR
// end ; end ;
73250: GO 73253
73252: POP
// case btype of b_depot , b_warehouse :
73253: LD_VAR 0 1
73257: PUSH
73258: LD_INT 0
73260: DOUBLE
73261: EQUAL
73262: IFTRUE 73272
73264: LD_INT 1
73266: DOUBLE
73267: EQUAL
73268: IFTRUE 73272
73270: GO 73473
73272: POP
// case nation of nation_american :
73273: LD_VAR 0 5
73277: PUSH
73278: LD_INT 1
73280: DOUBLE
73281: EQUAL
73282: IFTRUE 73286
73284: GO 73342
73286: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73287: LD_ADDR_VAR 0 9
73291: PUSH
73292: LD_VAR 0 11
73296: PUSH
73297: LD_VAR 0 12
73301: PUSH
73302: LD_VAR 0 13
73306: PUSH
73307: LD_VAR 0 14
73311: PUSH
73312: LD_VAR 0 15
73316: PUSH
73317: LD_VAR 0 16
73321: PUSH
73322: EMPTY
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: PUSH
73330: LD_VAR 0 4
73334: PUSH
73335: LD_INT 1
73337: PLUS
73338: ARRAY
73339: ST_TO_ADDR
73340: GO 73471
73342: LD_INT 2
73344: DOUBLE
73345: EQUAL
73346: IFTRUE 73350
73348: GO 73406
73350: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73351: LD_ADDR_VAR 0 9
73355: PUSH
73356: LD_VAR 0 17
73360: PUSH
73361: LD_VAR 0 18
73365: PUSH
73366: LD_VAR 0 19
73370: PUSH
73371: LD_VAR 0 20
73375: PUSH
73376: LD_VAR 0 21
73380: PUSH
73381: LD_VAR 0 22
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: LIST
73390: LIST
73391: LIST
73392: LIST
73393: PUSH
73394: LD_VAR 0 4
73398: PUSH
73399: LD_INT 1
73401: PLUS
73402: ARRAY
73403: ST_TO_ADDR
73404: GO 73471
73406: LD_INT 3
73408: DOUBLE
73409: EQUAL
73410: IFTRUE 73414
73412: GO 73470
73414: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73415: LD_ADDR_VAR 0 9
73419: PUSH
73420: LD_VAR 0 23
73424: PUSH
73425: LD_VAR 0 24
73429: PUSH
73430: LD_VAR 0 25
73434: PUSH
73435: LD_VAR 0 26
73439: PUSH
73440: LD_VAR 0 27
73444: PUSH
73445: LD_VAR 0 28
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: LIST
73456: LIST
73457: PUSH
73458: LD_VAR 0 4
73462: PUSH
73463: LD_INT 1
73465: PLUS
73466: ARRAY
73467: ST_TO_ADDR
73468: GO 73471
73470: POP
73471: GO 74026
73473: LD_INT 2
73475: DOUBLE
73476: EQUAL
73477: IFTRUE 73487
73479: LD_INT 3
73481: DOUBLE
73482: EQUAL
73483: IFTRUE 73487
73485: GO 73543
73487: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73488: LD_ADDR_VAR 0 9
73492: PUSH
73493: LD_VAR 0 29
73497: PUSH
73498: LD_VAR 0 30
73502: PUSH
73503: LD_VAR 0 31
73507: PUSH
73508: LD_VAR 0 32
73512: PUSH
73513: LD_VAR 0 33
73517: PUSH
73518: LD_VAR 0 34
73522: PUSH
73523: EMPTY
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: LIST
73530: PUSH
73531: LD_VAR 0 4
73535: PUSH
73536: LD_INT 1
73538: PLUS
73539: ARRAY
73540: ST_TO_ADDR
73541: GO 74026
73543: LD_INT 16
73545: DOUBLE
73546: EQUAL
73547: IFTRUE 73605
73549: LD_INT 17
73551: DOUBLE
73552: EQUAL
73553: IFTRUE 73605
73555: LD_INT 18
73557: DOUBLE
73558: EQUAL
73559: IFTRUE 73605
73561: LD_INT 19
73563: DOUBLE
73564: EQUAL
73565: IFTRUE 73605
73567: LD_INT 22
73569: DOUBLE
73570: EQUAL
73571: IFTRUE 73605
73573: LD_INT 20
73575: DOUBLE
73576: EQUAL
73577: IFTRUE 73605
73579: LD_INT 21
73581: DOUBLE
73582: EQUAL
73583: IFTRUE 73605
73585: LD_INT 23
73587: DOUBLE
73588: EQUAL
73589: IFTRUE 73605
73591: LD_INT 24
73593: DOUBLE
73594: EQUAL
73595: IFTRUE 73605
73597: LD_INT 25
73599: DOUBLE
73600: EQUAL
73601: IFTRUE 73605
73603: GO 73661
73605: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73606: LD_ADDR_VAR 0 9
73610: PUSH
73611: LD_VAR 0 35
73615: PUSH
73616: LD_VAR 0 36
73620: PUSH
73621: LD_VAR 0 37
73625: PUSH
73626: LD_VAR 0 38
73630: PUSH
73631: LD_VAR 0 39
73635: PUSH
73636: LD_VAR 0 40
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: LIST
73648: PUSH
73649: LD_VAR 0 4
73653: PUSH
73654: LD_INT 1
73656: PLUS
73657: ARRAY
73658: ST_TO_ADDR
73659: GO 74026
73661: LD_INT 6
73663: DOUBLE
73664: EQUAL
73665: IFTRUE 73717
73667: LD_INT 7
73669: DOUBLE
73670: EQUAL
73671: IFTRUE 73717
73673: LD_INT 8
73675: DOUBLE
73676: EQUAL
73677: IFTRUE 73717
73679: LD_INT 13
73681: DOUBLE
73682: EQUAL
73683: IFTRUE 73717
73685: LD_INT 12
73687: DOUBLE
73688: EQUAL
73689: IFTRUE 73717
73691: LD_INT 15
73693: DOUBLE
73694: EQUAL
73695: IFTRUE 73717
73697: LD_INT 11
73699: DOUBLE
73700: EQUAL
73701: IFTRUE 73717
73703: LD_INT 14
73705: DOUBLE
73706: EQUAL
73707: IFTRUE 73717
73709: LD_INT 10
73711: DOUBLE
73712: EQUAL
73713: IFTRUE 73717
73715: GO 73773
73717: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73718: LD_ADDR_VAR 0 9
73722: PUSH
73723: LD_VAR 0 41
73727: PUSH
73728: LD_VAR 0 42
73732: PUSH
73733: LD_VAR 0 43
73737: PUSH
73738: LD_VAR 0 44
73742: PUSH
73743: LD_VAR 0 45
73747: PUSH
73748: LD_VAR 0 46
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: PUSH
73761: LD_VAR 0 4
73765: PUSH
73766: LD_INT 1
73768: PLUS
73769: ARRAY
73770: ST_TO_ADDR
73771: GO 74026
73773: LD_INT 36
73775: DOUBLE
73776: EQUAL
73777: IFTRUE 73781
73779: GO 73837
73781: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73782: LD_ADDR_VAR 0 9
73786: PUSH
73787: LD_VAR 0 47
73791: PUSH
73792: LD_VAR 0 48
73796: PUSH
73797: LD_VAR 0 49
73801: PUSH
73802: LD_VAR 0 50
73806: PUSH
73807: LD_VAR 0 51
73811: PUSH
73812: LD_VAR 0 52
73816: PUSH
73817: EMPTY
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: PUSH
73825: LD_VAR 0 4
73829: PUSH
73830: LD_INT 1
73832: PLUS
73833: ARRAY
73834: ST_TO_ADDR
73835: GO 74026
73837: LD_INT 4
73839: DOUBLE
73840: EQUAL
73841: IFTRUE 73863
73843: LD_INT 5
73845: DOUBLE
73846: EQUAL
73847: IFTRUE 73863
73849: LD_INT 34
73851: DOUBLE
73852: EQUAL
73853: IFTRUE 73863
73855: LD_INT 37
73857: DOUBLE
73858: EQUAL
73859: IFTRUE 73863
73861: GO 73919
73863: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73864: LD_ADDR_VAR 0 9
73868: PUSH
73869: LD_VAR 0 53
73873: PUSH
73874: LD_VAR 0 54
73878: PUSH
73879: LD_VAR 0 55
73883: PUSH
73884: LD_VAR 0 56
73888: PUSH
73889: LD_VAR 0 57
73893: PUSH
73894: LD_VAR 0 58
73898: PUSH
73899: EMPTY
73900: LIST
73901: LIST
73902: LIST
73903: LIST
73904: LIST
73905: LIST
73906: PUSH
73907: LD_VAR 0 4
73911: PUSH
73912: LD_INT 1
73914: PLUS
73915: ARRAY
73916: ST_TO_ADDR
73917: GO 74026
73919: LD_INT 31
73921: DOUBLE
73922: EQUAL
73923: IFTRUE 73969
73925: LD_INT 32
73927: DOUBLE
73928: EQUAL
73929: IFTRUE 73969
73931: LD_INT 33
73933: DOUBLE
73934: EQUAL
73935: IFTRUE 73969
73937: LD_INT 27
73939: DOUBLE
73940: EQUAL
73941: IFTRUE 73969
73943: LD_INT 26
73945: DOUBLE
73946: EQUAL
73947: IFTRUE 73969
73949: LD_INT 28
73951: DOUBLE
73952: EQUAL
73953: IFTRUE 73969
73955: LD_INT 29
73957: DOUBLE
73958: EQUAL
73959: IFTRUE 73969
73961: LD_INT 30
73963: DOUBLE
73964: EQUAL
73965: IFTRUE 73969
73967: GO 74025
73969: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73970: LD_ADDR_VAR 0 9
73974: PUSH
73975: LD_VAR 0 59
73979: PUSH
73980: LD_VAR 0 60
73984: PUSH
73985: LD_VAR 0 61
73989: PUSH
73990: LD_VAR 0 62
73994: PUSH
73995: LD_VAR 0 63
73999: PUSH
74000: LD_VAR 0 64
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: LIST
74009: LIST
74010: LIST
74011: LIST
74012: PUSH
74013: LD_VAR 0 4
74017: PUSH
74018: LD_INT 1
74020: PLUS
74021: ARRAY
74022: ST_TO_ADDR
74023: GO 74026
74025: POP
// temp_list2 = [ ] ;
74026: LD_ADDR_VAR 0 10
74030: PUSH
74031: EMPTY
74032: ST_TO_ADDR
// for i in temp_list do
74033: LD_ADDR_VAR 0 8
74037: PUSH
74038: LD_VAR 0 9
74042: PUSH
74043: FOR_IN
74044: IFFALSE 74096
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74046: LD_ADDR_VAR 0 10
74050: PUSH
74051: LD_VAR 0 10
74055: PUSH
74056: LD_VAR 0 8
74060: PUSH
74061: LD_INT 1
74063: ARRAY
74064: PUSH
74065: LD_VAR 0 2
74069: PLUS
74070: PUSH
74071: LD_VAR 0 8
74075: PUSH
74076: LD_INT 2
74078: ARRAY
74079: PUSH
74080: LD_VAR 0 3
74084: PLUS
74085: PUSH
74086: EMPTY
74087: LIST
74088: LIST
74089: PUSH
74090: EMPTY
74091: LIST
74092: ADD
74093: ST_TO_ADDR
74094: GO 74043
74096: POP
74097: POP
// result = temp_list2 ;
74098: LD_ADDR_VAR 0 7
74102: PUSH
74103: LD_VAR 0 10
74107: ST_TO_ADDR
// end ;
74108: LD_VAR 0 7
74112: RET
// export function EnemyInRange ( unit , dist ) ; begin
74113: LD_INT 0
74115: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74116: LD_ADDR_VAR 0 3
74120: PUSH
74121: LD_VAR 0 1
74125: PPUSH
74126: CALL_OW 255
74130: PPUSH
74131: LD_VAR 0 1
74135: PPUSH
74136: CALL_OW 250
74140: PPUSH
74141: LD_VAR 0 1
74145: PPUSH
74146: CALL_OW 251
74150: PPUSH
74151: LD_VAR 0 2
74155: PPUSH
74156: CALL 47486 0 4
74160: PUSH
74161: LD_INT 4
74163: ARRAY
74164: ST_TO_ADDR
// end ;
74165: LD_VAR 0 3
74169: RET
// export function PlayerSeeMe ( unit ) ; begin
74170: LD_INT 0
74172: PPUSH
// result := See ( your_side , unit ) ;
74173: LD_ADDR_VAR 0 2
74177: PUSH
74178: LD_OWVAR 2
74182: PPUSH
74183: LD_VAR 0 1
74187: PPUSH
74188: CALL_OW 292
74192: ST_TO_ADDR
// end ;
74193: LD_VAR 0 2
74197: RET
// export function ReverseDir ( unit ) ; begin
74198: LD_INT 0
74200: PPUSH
// if not unit then
74201: LD_VAR 0 1
74205: NOT
74206: IFFALSE 74210
// exit ;
74208: GO 74233
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74210: LD_ADDR_VAR 0 2
74214: PUSH
74215: LD_VAR 0 1
74219: PPUSH
74220: CALL_OW 254
74224: PUSH
74225: LD_INT 3
74227: PLUS
74228: PUSH
74229: LD_INT 6
74231: MOD
74232: ST_TO_ADDR
// end ;
74233: LD_VAR 0 2
74237: RET
// export function ReverseArray ( array ) ; var i ; begin
74238: LD_INT 0
74240: PPUSH
74241: PPUSH
// if not array then
74242: LD_VAR 0 1
74246: NOT
74247: IFFALSE 74251
// exit ;
74249: GO 74306
// result := [ ] ;
74251: LD_ADDR_VAR 0 2
74255: PUSH
74256: EMPTY
74257: ST_TO_ADDR
// for i := array downto 1 do
74258: LD_ADDR_VAR 0 3
74262: PUSH
74263: DOUBLE
74264: LD_VAR 0 1
74268: INC
74269: ST_TO_ADDR
74270: LD_INT 1
74272: PUSH
74273: FOR_DOWNTO
74274: IFFALSE 74304
// result := Join ( result , array [ i ] ) ;
74276: LD_ADDR_VAR 0 2
74280: PUSH
74281: LD_VAR 0 2
74285: PPUSH
74286: LD_VAR 0 1
74290: PUSH
74291: LD_VAR 0 3
74295: ARRAY
74296: PPUSH
74297: CALL 78949 0 2
74301: ST_TO_ADDR
74302: GO 74273
74304: POP
74305: POP
// end ;
74306: LD_VAR 0 2
74310: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74311: LD_INT 0
74313: PPUSH
74314: PPUSH
74315: PPUSH
74316: PPUSH
74317: PPUSH
74318: PPUSH
// if not unit or not hexes then
74319: LD_VAR 0 1
74323: NOT
74324: PUSH
74325: LD_VAR 0 2
74329: NOT
74330: OR
74331: IFFALSE 74335
// exit ;
74333: GO 74458
// dist := 9999 ;
74335: LD_ADDR_VAR 0 5
74339: PUSH
74340: LD_INT 9999
74342: ST_TO_ADDR
// for i = 1 to hexes do
74343: LD_ADDR_VAR 0 4
74347: PUSH
74348: DOUBLE
74349: LD_INT 1
74351: DEC
74352: ST_TO_ADDR
74353: LD_VAR 0 2
74357: PUSH
74358: FOR_TO
74359: IFFALSE 74446
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74361: LD_ADDR_VAR 0 6
74365: PUSH
74366: LD_VAR 0 1
74370: PPUSH
74371: LD_VAR 0 2
74375: PUSH
74376: LD_VAR 0 4
74380: ARRAY
74381: PUSH
74382: LD_INT 1
74384: ARRAY
74385: PPUSH
74386: LD_VAR 0 2
74390: PUSH
74391: LD_VAR 0 4
74395: ARRAY
74396: PUSH
74397: LD_INT 2
74399: ARRAY
74400: PPUSH
74401: CALL_OW 297
74405: ST_TO_ADDR
// if tdist < dist then
74406: LD_VAR 0 6
74410: PUSH
74411: LD_VAR 0 5
74415: LESS
74416: IFFALSE 74444
// begin hex := hexes [ i ] ;
74418: LD_ADDR_VAR 0 8
74422: PUSH
74423: LD_VAR 0 2
74427: PUSH
74428: LD_VAR 0 4
74432: ARRAY
74433: ST_TO_ADDR
// dist := tdist ;
74434: LD_ADDR_VAR 0 5
74438: PUSH
74439: LD_VAR 0 6
74443: ST_TO_ADDR
// end ; end ;
74444: GO 74358
74446: POP
74447: POP
// result := hex ;
74448: LD_ADDR_VAR 0 3
74452: PUSH
74453: LD_VAR 0 8
74457: ST_TO_ADDR
// end ;
74458: LD_VAR 0 3
74462: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74463: LD_INT 0
74465: PPUSH
74466: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74467: LD_VAR 0 1
74471: NOT
74472: PUSH
74473: LD_VAR 0 1
74477: PUSH
74478: LD_INT 21
74480: PUSH
74481: LD_INT 2
74483: PUSH
74484: EMPTY
74485: LIST
74486: LIST
74487: PUSH
74488: LD_INT 23
74490: PUSH
74491: LD_INT 2
74493: PUSH
74494: EMPTY
74495: LIST
74496: LIST
74497: PUSH
74498: EMPTY
74499: LIST
74500: LIST
74501: PPUSH
74502: CALL_OW 69
74506: IN
74507: NOT
74508: OR
74509: IFFALSE 74513
// exit ;
74511: GO 74560
// for i = 1 to 3 do
74513: LD_ADDR_VAR 0 3
74517: PUSH
74518: DOUBLE
74519: LD_INT 1
74521: DEC
74522: ST_TO_ADDR
74523: LD_INT 3
74525: PUSH
74526: FOR_TO
74527: IFFALSE 74558
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74529: LD_VAR 0 1
74533: PPUSH
74534: CALL_OW 250
74538: PPUSH
74539: LD_VAR 0 1
74543: PPUSH
74544: CALL_OW 251
74548: PPUSH
74549: LD_INT 1
74551: PPUSH
74552: CALL_OW 453
74556: GO 74526
74558: POP
74559: POP
// end ;
74560: LD_VAR 0 2
74564: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74565: LD_INT 0
74567: PPUSH
74568: PPUSH
74569: PPUSH
74570: PPUSH
74571: PPUSH
74572: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74573: LD_VAR 0 1
74577: NOT
74578: PUSH
74579: LD_VAR 0 2
74583: NOT
74584: OR
74585: PUSH
74586: LD_VAR 0 1
74590: PPUSH
74591: CALL_OW 314
74595: OR
74596: IFFALSE 74600
// exit ;
74598: GO 75067
// if GetLives ( i ) < 250 then
74600: LD_VAR 0 4
74604: PPUSH
74605: CALL_OW 256
74609: PUSH
74610: LD_INT 250
74612: LESS
74613: IFFALSE 74626
// begin ComAutodestruct ( i ) ;
74615: LD_VAR 0 4
74619: PPUSH
74620: CALL 74463 0 1
// exit ;
74624: GO 75067
// end ; x := GetX ( enemy_unit ) ;
74626: LD_ADDR_VAR 0 7
74630: PUSH
74631: LD_VAR 0 2
74635: PPUSH
74636: CALL_OW 250
74640: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74641: LD_ADDR_VAR 0 8
74645: PUSH
74646: LD_VAR 0 2
74650: PPUSH
74651: CALL_OW 251
74655: ST_TO_ADDR
// if not x or not y then
74656: LD_VAR 0 7
74660: NOT
74661: PUSH
74662: LD_VAR 0 8
74666: NOT
74667: OR
74668: IFFALSE 74672
// exit ;
74670: GO 75067
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74672: LD_ADDR_VAR 0 6
74676: PUSH
74677: LD_VAR 0 7
74681: PPUSH
74682: LD_INT 0
74684: PPUSH
74685: LD_INT 4
74687: PPUSH
74688: CALL_OW 272
74692: PUSH
74693: LD_VAR 0 8
74697: PPUSH
74698: LD_INT 0
74700: PPUSH
74701: LD_INT 4
74703: PPUSH
74704: CALL_OW 273
74708: PUSH
74709: EMPTY
74710: LIST
74711: LIST
74712: PUSH
74713: LD_VAR 0 7
74717: PPUSH
74718: LD_INT 1
74720: PPUSH
74721: LD_INT 4
74723: PPUSH
74724: CALL_OW 272
74728: PUSH
74729: LD_VAR 0 8
74733: PPUSH
74734: LD_INT 1
74736: PPUSH
74737: LD_INT 4
74739: PPUSH
74740: CALL_OW 273
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: PUSH
74749: LD_VAR 0 7
74753: PPUSH
74754: LD_INT 2
74756: PPUSH
74757: LD_INT 4
74759: PPUSH
74760: CALL_OW 272
74764: PUSH
74765: LD_VAR 0 8
74769: PPUSH
74770: LD_INT 2
74772: PPUSH
74773: LD_INT 4
74775: PPUSH
74776: CALL_OW 273
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: PUSH
74785: LD_VAR 0 7
74789: PPUSH
74790: LD_INT 3
74792: PPUSH
74793: LD_INT 4
74795: PPUSH
74796: CALL_OW 272
74800: PUSH
74801: LD_VAR 0 8
74805: PPUSH
74806: LD_INT 3
74808: PPUSH
74809: LD_INT 4
74811: PPUSH
74812: CALL_OW 273
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: PUSH
74821: LD_VAR 0 7
74825: PPUSH
74826: LD_INT 4
74828: PPUSH
74829: LD_INT 4
74831: PPUSH
74832: CALL_OW 272
74836: PUSH
74837: LD_VAR 0 8
74841: PPUSH
74842: LD_INT 4
74844: PPUSH
74845: LD_INT 4
74847: PPUSH
74848: CALL_OW 273
74852: PUSH
74853: EMPTY
74854: LIST
74855: LIST
74856: PUSH
74857: LD_VAR 0 7
74861: PPUSH
74862: LD_INT 5
74864: PPUSH
74865: LD_INT 4
74867: PPUSH
74868: CALL_OW 272
74872: PUSH
74873: LD_VAR 0 8
74877: PPUSH
74878: LD_INT 5
74880: PPUSH
74881: LD_INT 4
74883: PPUSH
74884: CALL_OW 273
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: LIST
74897: LIST
74898: LIST
74899: LIST
74900: ST_TO_ADDR
// for i = tmp downto 1 do
74901: LD_ADDR_VAR 0 4
74905: PUSH
74906: DOUBLE
74907: LD_VAR 0 6
74911: INC
74912: ST_TO_ADDR
74913: LD_INT 1
74915: PUSH
74916: FOR_DOWNTO
74917: IFFALSE 75018
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74919: LD_VAR 0 6
74923: PUSH
74924: LD_VAR 0 4
74928: ARRAY
74929: PUSH
74930: LD_INT 1
74932: ARRAY
74933: PPUSH
74934: LD_VAR 0 6
74938: PUSH
74939: LD_VAR 0 4
74943: ARRAY
74944: PUSH
74945: LD_INT 2
74947: ARRAY
74948: PPUSH
74949: CALL_OW 488
74953: NOT
74954: PUSH
74955: LD_VAR 0 6
74959: PUSH
74960: LD_VAR 0 4
74964: ARRAY
74965: PUSH
74966: LD_INT 1
74968: ARRAY
74969: PPUSH
74970: LD_VAR 0 6
74974: PUSH
74975: LD_VAR 0 4
74979: ARRAY
74980: PUSH
74981: LD_INT 2
74983: ARRAY
74984: PPUSH
74985: CALL_OW 428
74989: PUSH
74990: LD_INT 0
74992: NONEQUAL
74993: OR
74994: IFFALSE 75016
// tmp := Delete ( tmp , i ) ;
74996: LD_ADDR_VAR 0 6
75000: PUSH
75001: LD_VAR 0 6
75005: PPUSH
75006: LD_VAR 0 4
75010: PPUSH
75011: CALL_OW 3
75015: ST_TO_ADDR
75016: GO 74916
75018: POP
75019: POP
// j := GetClosestHex ( unit , tmp ) ;
75020: LD_ADDR_VAR 0 5
75024: PUSH
75025: LD_VAR 0 1
75029: PPUSH
75030: LD_VAR 0 6
75034: PPUSH
75035: CALL 74311 0 2
75039: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75040: LD_VAR 0 1
75044: PPUSH
75045: LD_VAR 0 5
75049: PUSH
75050: LD_INT 1
75052: ARRAY
75053: PPUSH
75054: LD_VAR 0 5
75058: PUSH
75059: LD_INT 2
75061: ARRAY
75062: PPUSH
75063: CALL_OW 111
// end ;
75067: LD_VAR 0 3
75071: RET
// export function PrepareApemanSoldier ( ) ; begin
75072: LD_INT 0
75074: PPUSH
// uc_nation := 0 ;
75075: LD_ADDR_OWVAR 21
75079: PUSH
75080: LD_INT 0
75082: ST_TO_ADDR
// hc_sex := sex_male ;
75083: LD_ADDR_OWVAR 27
75087: PUSH
75088: LD_INT 1
75090: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75091: LD_ADDR_OWVAR 28
75095: PUSH
75096: LD_INT 15
75098: ST_TO_ADDR
// hc_gallery :=  ;
75099: LD_ADDR_OWVAR 33
75103: PUSH
75104: LD_STRING 
75106: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75107: LD_ADDR_OWVAR 31
75111: PUSH
75112: LD_INT 0
75114: PPUSH
75115: LD_INT 3
75117: PPUSH
75118: CALL_OW 12
75122: PUSH
75123: LD_INT 0
75125: PPUSH
75126: LD_INT 3
75128: PPUSH
75129: CALL_OW 12
75133: PUSH
75134: LD_INT 0
75136: PUSH
75137: LD_INT 0
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: LIST
75144: LIST
75145: ST_TO_ADDR
// end ;
75146: LD_VAR 0 1
75150: RET
// export function PrepareApemanEngineer ( ) ; begin
75151: LD_INT 0
75153: PPUSH
// uc_nation := 0 ;
75154: LD_ADDR_OWVAR 21
75158: PUSH
75159: LD_INT 0
75161: ST_TO_ADDR
// hc_sex := sex_male ;
75162: LD_ADDR_OWVAR 27
75166: PUSH
75167: LD_INT 1
75169: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75170: LD_ADDR_OWVAR 28
75174: PUSH
75175: LD_INT 16
75177: ST_TO_ADDR
// hc_gallery :=  ;
75178: LD_ADDR_OWVAR 33
75182: PUSH
75183: LD_STRING 
75185: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75186: LD_ADDR_OWVAR 31
75190: PUSH
75191: LD_INT 0
75193: PPUSH
75194: LD_INT 3
75196: PPUSH
75197: CALL_OW 12
75201: PUSH
75202: LD_INT 0
75204: PPUSH
75205: LD_INT 3
75207: PPUSH
75208: CALL_OW 12
75212: PUSH
75213: LD_INT 0
75215: PUSH
75216: LD_INT 0
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: ST_TO_ADDR
// end ;
75225: LD_VAR 0 1
75229: RET
// export function PrepareApeman ( agressivity ) ; begin
75230: LD_INT 0
75232: PPUSH
// uc_side := 0 ;
75233: LD_ADDR_OWVAR 20
75237: PUSH
75238: LD_INT 0
75240: ST_TO_ADDR
// uc_nation := 0 ;
75241: LD_ADDR_OWVAR 21
75245: PUSH
75246: LD_INT 0
75248: ST_TO_ADDR
// hc_sex := sex_male ;
75249: LD_ADDR_OWVAR 27
75253: PUSH
75254: LD_INT 1
75256: ST_TO_ADDR
// hc_class := class_apeman ;
75257: LD_ADDR_OWVAR 28
75261: PUSH
75262: LD_INT 12
75264: ST_TO_ADDR
// hc_gallery :=  ;
75265: LD_ADDR_OWVAR 33
75269: PUSH
75270: LD_STRING 
75272: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75273: LD_ADDR_OWVAR 35
75277: PUSH
75278: LD_VAR 0 1
75282: NEG
75283: PPUSH
75284: LD_VAR 0 1
75288: PPUSH
75289: CALL_OW 12
75293: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75294: LD_ADDR_OWVAR 31
75298: PUSH
75299: LD_INT 0
75301: PPUSH
75302: LD_INT 3
75304: PPUSH
75305: CALL_OW 12
75309: PUSH
75310: LD_INT 0
75312: PPUSH
75313: LD_INT 3
75315: PPUSH
75316: CALL_OW 12
75320: PUSH
75321: LD_INT 0
75323: PUSH
75324: LD_INT 0
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: LIST
75331: LIST
75332: ST_TO_ADDR
// end ;
75333: LD_VAR 0 2
75337: RET
// export function PrepareTiger ( agressivity ) ; begin
75338: LD_INT 0
75340: PPUSH
// uc_side := 0 ;
75341: LD_ADDR_OWVAR 20
75345: PUSH
75346: LD_INT 0
75348: ST_TO_ADDR
// uc_nation := 0 ;
75349: LD_ADDR_OWVAR 21
75353: PUSH
75354: LD_INT 0
75356: ST_TO_ADDR
// hc_class := class_tiger ;
75357: LD_ADDR_OWVAR 28
75361: PUSH
75362: LD_INT 14
75364: ST_TO_ADDR
// hc_gallery :=  ;
75365: LD_ADDR_OWVAR 33
75369: PUSH
75370: LD_STRING 
75372: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75373: LD_ADDR_OWVAR 35
75377: PUSH
75378: LD_VAR 0 1
75382: NEG
75383: PPUSH
75384: LD_VAR 0 1
75388: PPUSH
75389: CALL_OW 12
75393: ST_TO_ADDR
// end ;
75394: LD_VAR 0 2
75398: RET
// export function PrepareEnchidna ( ) ; begin
75399: LD_INT 0
75401: PPUSH
// uc_side := 0 ;
75402: LD_ADDR_OWVAR 20
75406: PUSH
75407: LD_INT 0
75409: ST_TO_ADDR
// uc_nation := 0 ;
75410: LD_ADDR_OWVAR 21
75414: PUSH
75415: LD_INT 0
75417: ST_TO_ADDR
// hc_class := class_baggie ;
75418: LD_ADDR_OWVAR 28
75422: PUSH
75423: LD_INT 13
75425: ST_TO_ADDR
// hc_gallery :=  ;
75426: LD_ADDR_OWVAR 33
75430: PUSH
75431: LD_STRING 
75433: ST_TO_ADDR
// end ;
75434: LD_VAR 0 1
75438: RET
// export function PrepareFrog ( ) ; begin
75439: LD_INT 0
75441: PPUSH
// uc_side := 0 ;
75442: LD_ADDR_OWVAR 20
75446: PUSH
75447: LD_INT 0
75449: ST_TO_ADDR
// uc_nation := 0 ;
75450: LD_ADDR_OWVAR 21
75454: PUSH
75455: LD_INT 0
75457: ST_TO_ADDR
// hc_class := class_frog ;
75458: LD_ADDR_OWVAR 28
75462: PUSH
75463: LD_INT 19
75465: ST_TO_ADDR
// hc_gallery :=  ;
75466: LD_ADDR_OWVAR 33
75470: PUSH
75471: LD_STRING 
75473: ST_TO_ADDR
// end ;
75474: LD_VAR 0 1
75478: RET
// export function PrepareFish ( ) ; begin
75479: LD_INT 0
75481: PPUSH
// uc_side := 0 ;
75482: LD_ADDR_OWVAR 20
75486: PUSH
75487: LD_INT 0
75489: ST_TO_ADDR
// uc_nation := 0 ;
75490: LD_ADDR_OWVAR 21
75494: PUSH
75495: LD_INT 0
75497: ST_TO_ADDR
// hc_class := class_fish ;
75498: LD_ADDR_OWVAR 28
75502: PUSH
75503: LD_INT 20
75505: ST_TO_ADDR
// hc_gallery :=  ;
75506: LD_ADDR_OWVAR 33
75510: PUSH
75511: LD_STRING 
75513: ST_TO_ADDR
// end ;
75514: LD_VAR 0 1
75518: RET
// export function PrepareBird ( ) ; begin
75519: LD_INT 0
75521: PPUSH
// uc_side := 0 ;
75522: LD_ADDR_OWVAR 20
75526: PUSH
75527: LD_INT 0
75529: ST_TO_ADDR
// uc_nation := 0 ;
75530: LD_ADDR_OWVAR 21
75534: PUSH
75535: LD_INT 0
75537: ST_TO_ADDR
// hc_class := class_phororhacos ;
75538: LD_ADDR_OWVAR 28
75542: PUSH
75543: LD_INT 18
75545: ST_TO_ADDR
// hc_gallery :=  ;
75546: LD_ADDR_OWVAR 33
75550: PUSH
75551: LD_STRING 
75553: ST_TO_ADDR
// end ;
75554: LD_VAR 0 1
75558: RET
// export function PrepareHorse ( ) ; begin
75559: LD_INT 0
75561: PPUSH
// uc_side := 0 ;
75562: LD_ADDR_OWVAR 20
75566: PUSH
75567: LD_INT 0
75569: ST_TO_ADDR
// uc_nation := 0 ;
75570: LD_ADDR_OWVAR 21
75574: PUSH
75575: LD_INT 0
75577: ST_TO_ADDR
// hc_class := class_horse ;
75578: LD_ADDR_OWVAR 28
75582: PUSH
75583: LD_INT 21
75585: ST_TO_ADDR
// hc_gallery :=  ;
75586: LD_ADDR_OWVAR 33
75590: PUSH
75591: LD_STRING 
75593: ST_TO_ADDR
// end ;
75594: LD_VAR 0 1
75598: RET
// export function PrepareMastodont ( ) ; begin
75599: LD_INT 0
75601: PPUSH
// uc_side := 0 ;
75602: LD_ADDR_OWVAR 20
75606: PUSH
75607: LD_INT 0
75609: ST_TO_ADDR
// uc_nation := 0 ;
75610: LD_ADDR_OWVAR 21
75614: PUSH
75615: LD_INT 0
75617: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75618: LD_ADDR_OWVAR 37
75622: PUSH
75623: LD_INT 31
75625: ST_TO_ADDR
// vc_control := control_rider ;
75626: LD_ADDR_OWVAR 38
75630: PUSH
75631: LD_INT 4
75633: ST_TO_ADDR
// end ;
75634: LD_VAR 0 1
75638: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75639: LD_INT 0
75641: PPUSH
75642: PPUSH
75643: PPUSH
// uc_side = 0 ;
75644: LD_ADDR_OWVAR 20
75648: PUSH
75649: LD_INT 0
75651: ST_TO_ADDR
// uc_nation = 0 ;
75652: LD_ADDR_OWVAR 21
75656: PUSH
75657: LD_INT 0
75659: ST_TO_ADDR
// InitHc_All ( ) ;
75660: CALL_OW 584
// InitVc ;
75664: CALL_OW 20
// if mastodonts then
75668: LD_VAR 0 6
75672: IFFALSE 75739
// for i = 1 to mastodonts do
75674: LD_ADDR_VAR 0 11
75678: PUSH
75679: DOUBLE
75680: LD_INT 1
75682: DEC
75683: ST_TO_ADDR
75684: LD_VAR 0 6
75688: PUSH
75689: FOR_TO
75690: IFFALSE 75737
// begin vc_chassis := 31 ;
75692: LD_ADDR_OWVAR 37
75696: PUSH
75697: LD_INT 31
75699: ST_TO_ADDR
// vc_control := control_rider ;
75700: LD_ADDR_OWVAR 38
75704: PUSH
75705: LD_INT 4
75707: ST_TO_ADDR
// animal := CreateVehicle ;
75708: LD_ADDR_VAR 0 12
75712: PUSH
75713: CALL_OW 45
75717: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75718: LD_VAR 0 12
75722: PPUSH
75723: LD_VAR 0 8
75727: PPUSH
75728: LD_INT 0
75730: PPUSH
75731: CALL 77867 0 3
// end ;
75735: GO 75689
75737: POP
75738: POP
// if horses then
75739: LD_VAR 0 5
75743: IFFALSE 75810
// for i = 1 to horses do
75745: LD_ADDR_VAR 0 11
75749: PUSH
75750: DOUBLE
75751: LD_INT 1
75753: DEC
75754: ST_TO_ADDR
75755: LD_VAR 0 5
75759: PUSH
75760: FOR_TO
75761: IFFALSE 75808
// begin hc_class := 21 ;
75763: LD_ADDR_OWVAR 28
75767: PUSH
75768: LD_INT 21
75770: ST_TO_ADDR
// hc_gallery :=  ;
75771: LD_ADDR_OWVAR 33
75775: PUSH
75776: LD_STRING 
75778: ST_TO_ADDR
// animal := CreateHuman ;
75779: LD_ADDR_VAR 0 12
75783: PUSH
75784: CALL_OW 44
75788: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75789: LD_VAR 0 12
75793: PPUSH
75794: LD_VAR 0 8
75798: PPUSH
75799: LD_INT 0
75801: PPUSH
75802: CALL 77867 0 3
// end ;
75806: GO 75760
75808: POP
75809: POP
// if birds then
75810: LD_VAR 0 1
75814: IFFALSE 75881
// for i = 1 to birds do
75816: LD_ADDR_VAR 0 11
75820: PUSH
75821: DOUBLE
75822: LD_INT 1
75824: DEC
75825: ST_TO_ADDR
75826: LD_VAR 0 1
75830: PUSH
75831: FOR_TO
75832: IFFALSE 75879
// begin hc_class := 18 ;
75834: LD_ADDR_OWVAR 28
75838: PUSH
75839: LD_INT 18
75841: ST_TO_ADDR
// hc_gallery =  ;
75842: LD_ADDR_OWVAR 33
75846: PUSH
75847: LD_STRING 
75849: ST_TO_ADDR
// animal := CreateHuman ;
75850: LD_ADDR_VAR 0 12
75854: PUSH
75855: CALL_OW 44
75859: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75860: LD_VAR 0 12
75864: PPUSH
75865: LD_VAR 0 8
75869: PPUSH
75870: LD_INT 0
75872: PPUSH
75873: CALL 77867 0 3
// end ;
75877: GO 75831
75879: POP
75880: POP
// if tigers then
75881: LD_VAR 0 2
75885: IFFALSE 75969
// for i = 1 to tigers do
75887: LD_ADDR_VAR 0 11
75891: PUSH
75892: DOUBLE
75893: LD_INT 1
75895: DEC
75896: ST_TO_ADDR
75897: LD_VAR 0 2
75901: PUSH
75902: FOR_TO
75903: IFFALSE 75967
// begin hc_class = class_tiger ;
75905: LD_ADDR_OWVAR 28
75909: PUSH
75910: LD_INT 14
75912: ST_TO_ADDR
// hc_gallery =  ;
75913: LD_ADDR_OWVAR 33
75917: PUSH
75918: LD_STRING 
75920: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75921: LD_ADDR_OWVAR 35
75925: PUSH
75926: LD_INT 7
75928: NEG
75929: PPUSH
75930: LD_INT 7
75932: PPUSH
75933: CALL_OW 12
75937: ST_TO_ADDR
// animal := CreateHuman ;
75938: LD_ADDR_VAR 0 12
75942: PUSH
75943: CALL_OW 44
75947: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75948: LD_VAR 0 12
75952: PPUSH
75953: LD_VAR 0 8
75957: PPUSH
75958: LD_INT 0
75960: PPUSH
75961: CALL 77867 0 3
// end ;
75965: GO 75902
75967: POP
75968: POP
// if apemans then
75969: LD_VAR 0 3
75973: IFFALSE 76096
// for i = 1 to apemans do
75975: LD_ADDR_VAR 0 11
75979: PUSH
75980: DOUBLE
75981: LD_INT 1
75983: DEC
75984: ST_TO_ADDR
75985: LD_VAR 0 3
75989: PUSH
75990: FOR_TO
75991: IFFALSE 76094
// begin hc_class = class_apeman ;
75993: LD_ADDR_OWVAR 28
75997: PUSH
75998: LD_INT 12
76000: ST_TO_ADDR
// hc_gallery =  ;
76001: LD_ADDR_OWVAR 33
76005: PUSH
76006: LD_STRING 
76008: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76009: LD_ADDR_OWVAR 35
76013: PUSH
76014: LD_INT 2
76016: NEG
76017: PPUSH
76018: LD_INT 2
76020: PPUSH
76021: CALL_OW 12
76025: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76026: LD_ADDR_OWVAR 31
76030: PUSH
76031: LD_INT 1
76033: PPUSH
76034: LD_INT 3
76036: PPUSH
76037: CALL_OW 12
76041: PUSH
76042: LD_INT 1
76044: PPUSH
76045: LD_INT 3
76047: PPUSH
76048: CALL_OW 12
76052: PUSH
76053: LD_INT 0
76055: PUSH
76056: LD_INT 0
76058: PUSH
76059: EMPTY
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: ST_TO_ADDR
// animal := CreateHuman ;
76065: LD_ADDR_VAR 0 12
76069: PUSH
76070: CALL_OW 44
76074: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76075: LD_VAR 0 12
76079: PPUSH
76080: LD_VAR 0 8
76084: PPUSH
76085: LD_INT 0
76087: PPUSH
76088: CALL 77867 0 3
// end ;
76092: GO 75990
76094: POP
76095: POP
// if enchidnas then
76096: LD_VAR 0 4
76100: IFFALSE 76167
// for i = 1 to enchidnas do
76102: LD_ADDR_VAR 0 11
76106: PUSH
76107: DOUBLE
76108: LD_INT 1
76110: DEC
76111: ST_TO_ADDR
76112: LD_VAR 0 4
76116: PUSH
76117: FOR_TO
76118: IFFALSE 76165
// begin hc_class = 13 ;
76120: LD_ADDR_OWVAR 28
76124: PUSH
76125: LD_INT 13
76127: ST_TO_ADDR
// hc_gallery =  ;
76128: LD_ADDR_OWVAR 33
76132: PUSH
76133: LD_STRING 
76135: ST_TO_ADDR
// animal := CreateHuman ;
76136: LD_ADDR_VAR 0 12
76140: PUSH
76141: CALL_OW 44
76145: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76146: LD_VAR 0 12
76150: PPUSH
76151: LD_VAR 0 8
76155: PPUSH
76156: LD_INT 0
76158: PPUSH
76159: CALL 77867 0 3
// end ;
76163: GO 76117
76165: POP
76166: POP
// if fishes then
76167: LD_VAR 0 7
76171: IFFALSE 76238
// for i = 1 to fishes do
76173: LD_ADDR_VAR 0 11
76177: PUSH
76178: DOUBLE
76179: LD_INT 1
76181: DEC
76182: ST_TO_ADDR
76183: LD_VAR 0 7
76187: PUSH
76188: FOR_TO
76189: IFFALSE 76236
// begin hc_class = 20 ;
76191: LD_ADDR_OWVAR 28
76195: PUSH
76196: LD_INT 20
76198: ST_TO_ADDR
// hc_gallery =  ;
76199: LD_ADDR_OWVAR 33
76203: PUSH
76204: LD_STRING 
76206: ST_TO_ADDR
// animal := CreateHuman ;
76207: LD_ADDR_VAR 0 12
76211: PUSH
76212: CALL_OW 44
76216: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76217: LD_VAR 0 12
76221: PPUSH
76222: LD_VAR 0 9
76226: PPUSH
76227: LD_INT 0
76229: PPUSH
76230: CALL 77867 0 3
// end ;
76234: GO 76188
76236: POP
76237: POP
// end ;
76238: LD_VAR 0 10
76242: RET
// export function WantHeal ( sci , unit ) ; begin
76243: LD_INT 0
76245: PPUSH
// if GetTaskList ( sci ) > 0 then
76246: LD_VAR 0 1
76250: PPUSH
76251: CALL_OW 437
76255: PUSH
76256: LD_INT 0
76258: GREATER
76259: IFFALSE 76329
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76261: LD_VAR 0 1
76265: PPUSH
76266: CALL_OW 437
76270: PUSH
76271: LD_INT 1
76273: ARRAY
76274: PUSH
76275: LD_INT 1
76277: ARRAY
76278: PUSH
76279: LD_STRING l
76281: EQUAL
76282: PUSH
76283: LD_VAR 0 1
76287: PPUSH
76288: CALL_OW 437
76292: PUSH
76293: LD_INT 1
76295: ARRAY
76296: PUSH
76297: LD_INT 4
76299: ARRAY
76300: PUSH
76301: LD_VAR 0 2
76305: EQUAL
76306: AND
76307: IFFALSE 76319
// result := true else
76309: LD_ADDR_VAR 0 3
76313: PUSH
76314: LD_INT 1
76316: ST_TO_ADDR
76317: GO 76327
// result := false ;
76319: LD_ADDR_VAR 0 3
76323: PUSH
76324: LD_INT 0
76326: ST_TO_ADDR
// end else
76327: GO 76337
// result := false ;
76329: LD_ADDR_VAR 0 3
76333: PUSH
76334: LD_INT 0
76336: ST_TO_ADDR
// end ;
76337: LD_VAR 0 3
76341: RET
// export function HealTarget ( sci ) ; begin
76342: LD_INT 0
76344: PPUSH
// if not sci then
76345: LD_VAR 0 1
76349: NOT
76350: IFFALSE 76354
// exit ;
76352: GO 76419
// result := 0 ;
76354: LD_ADDR_VAR 0 2
76358: PUSH
76359: LD_INT 0
76361: ST_TO_ADDR
// if GetTaskList ( sci ) then
76362: LD_VAR 0 1
76366: PPUSH
76367: CALL_OW 437
76371: IFFALSE 76419
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76373: LD_VAR 0 1
76377: PPUSH
76378: CALL_OW 437
76382: PUSH
76383: LD_INT 1
76385: ARRAY
76386: PUSH
76387: LD_INT 1
76389: ARRAY
76390: PUSH
76391: LD_STRING l
76393: EQUAL
76394: IFFALSE 76419
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76396: LD_ADDR_VAR 0 2
76400: PUSH
76401: LD_VAR 0 1
76405: PPUSH
76406: CALL_OW 437
76410: PUSH
76411: LD_INT 1
76413: ARRAY
76414: PUSH
76415: LD_INT 4
76417: ARRAY
76418: ST_TO_ADDR
// end ;
76419: LD_VAR 0 2
76423: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76424: LD_INT 0
76426: PPUSH
76427: PPUSH
76428: PPUSH
76429: PPUSH
// if not base_units then
76430: LD_VAR 0 1
76434: NOT
76435: IFFALSE 76439
// exit ;
76437: GO 76526
// result := false ;
76439: LD_ADDR_VAR 0 2
76443: PUSH
76444: LD_INT 0
76446: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76447: LD_ADDR_VAR 0 5
76451: PUSH
76452: LD_VAR 0 1
76456: PPUSH
76457: LD_INT 21
76459: PUSH
76460: LD_INT 3
76462: PUSH
76463: EMPTY
76464: LIST
76465: LIST
76466: PPUSH
76467: CALL_OW 72
76471: ST_TO_ADDR
// if not tmp then
76472: LD_VAR 0 5
76476: NOT
76477: IFFALSE 76481
// exit ;
76479: GO 76526
// for i in tmp do
76481: LD_ADDR_VAR 0 3
76485: PUSH
76486: LD_VAR 0 5
76490: PUSH
76491: FOR_IN
76492: IFFALSE 76524
// begin result := EnemyInRange ( i , 22 ) ;
76494: LD_ADDR_VAR 0 2
76498: PUSH
76499: LD_VAR 0 3
76503: PPUSH
76504: LD_INT 22
76506: PPUSH
76507: CALL 74113 0 2
76511: ST_TO_ADDR
// if result then
76512: LD_VAR 0 2
76516: IFFALSE 76522
// exit ;
76518: POP
76519: POP
76520: GO 76526
// end ;
76522: GO 76491
76524: POP
76525: POP
// end ;
76526: LD_VAR 0 2
76530: RET
// export function FilterByTag ( units , tag ) ; begin
76531: LD_INT 0
76533: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76534: LD_ADDR_VAR 0 3
76538: PUSH
76539: LD_VAR 0 1
76543: PPUSH
76544: LD_INT 120
76546: PUSH
76547: LD_VAR 0 2
76551: PUSH
76552: EMPTY
76553: LIST
76554: LIST
76555: PPUSH
76556: CALL_OW 72
76560: ST_TO_ADDR
// end ;
76561: LD_VAR 0 3
76565: RET
// export function IsDriver ( un ) ; begin
76566: LD_INT 0
76568: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76569: LD_ADDR_VAR 0 2
76573: PUSH
76574: LD_VAR 0 1
76578: PUSH
76579: LD_INT 55
76581: PUSH
76582: EMPTY
76583: LIST
76584: PPUSH
76585: CALL_OW 69
76589: IN
76590: ST_TO_ADDR
// end ;
76591: LD_VAR 0 2
76595: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76596: LD_INT 0
76598: PPUSH
76599: PPUSH
// list := [ ] ;
76600: LD_ADDR_VAR 0 5
76604: PUSH
76605: EMPTY
76606: ST_TO_ADDR
// case d of 0 :
76607: LD_VAR 0 3
76611: PUSH
76612: LD_INT 0
76614: DOUBLE
76615: EQUAL
76616: IFTRUE 76620
76618: GO 76753
76620: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76621: LD_ADDR_VAR 0 5
76625: PUSH
76626: LD_VAR 0 1
76630: PUSH
76631: LD_INT 4
76633: MINUS
76634: PUSH
76635: LD_VAR 0 2
76639: PUSH
76640: LD_INT 4
76642: MINUS
76643: PUSH
76644: LD_INT 2
76646: PUSH
76647: EMPTY
76648: LIST
76649: LIST
76650: LIST
76651: PUSH
76652: LD_VAR 0 1
76656: PUSH
76657: LD_INT 3
76659: MINUS
76660: PUSH
76661: LD_VAR 0 2
76665: PUSH
76666: LD_INT 1
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: LIST
76673: PUSH
76674: LD_VAR 0 1
76678: PUSH
76679: LD_INT 4
76681: PLUS
76682: PUSH
76683: LD_VAR 0 2
76687: PUSH
76688: LD_INT 4
76690: PUSH
76691: EMPTY
76692: LIST
76693: LIST
76694: LIST
76695: PUSH
76696: LD_VAR 0 1
76700: PUSH
76701: LD_INT 3
76703: PLUS
76704: PUSH
76705: LD_VAR 0 2
76709: PUSH
76710: LD_INT 3
76712: PLUS
76713: PUSH
76714: LD_INT 5
76716: PUSH
76717: EMPTY
76718: LIST
76719: LIST
76720: LIST
76721: PUSH
76722: LD_VAR 0 1
76726: PUSH
76727: LD_VAR 0 2
76731: PUSH
76732: LD_INT 4
76734: PLUS
76735: PUSH
76736: LD_INT 0
76738: PUSH
76739: EMPTY
76740: LIST
76741: LIST
76742: LIST
76743: PUSH
76744: EMPTY
76745: LIST
76746: LIST
76747: LIST
76748: LIST
76749: LIST
76750: ST_TO_ADDR
// end ; 1 :
76751: GO 77451
76753: LD_INT 1
76755: DOUBLE
76756: EQUAL
76757: IFTRUE 76761
76759: GO 76894
76761: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76762: LD_ADDR_VAR 0 5
76766: PUSH
76767: LD_VAR 0 1
76771: PUSH
76772: LD_VAR 0 2
76776: PUSH
76777: LD_INT 4
76779: MINUS
76780: PUSH
76781: LD_INT 3
76783: PUSH
76784: EMPTY
76785: LIST
76786: LIST
76787: LIST
76788: PUSH
76789: LD_VAR 0 1
76793: PUSH
76794: LD_INT 3
76796: MINUS
76797: PUSH
76798: LD_VAR 0 2
76802: PUSH
76803: LD_INT 3
76805: MINUS
76806: PUSH
76807: LD_INT 2
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: LIST
76814: PUSH
76815: LD_VAR 0 1
76819: PUSH
76820: LD_INT 4
76822: MINUS
76823: PUSH
76824: LD_VAR 0 2
76828: PUSH
76829: LD_INT 1
76831: PUSH
76832: EMPTY
76833: LIST
76834: LIST
76835: LIST
76836: PUSH
76837: LD_VAR 0 1
76841: PUSH
76842: LD_VAR 0 2
76846: PUSH
76847: LD_INT 3
76849: PLUS
76850: PUSH
76851: LD_INT 0
76853: PUSH
76854: EMPTY
76855: LIST
76856: LIST
76857: LIST
76858: PUSH
76859: LD_VAR 0 1
76863: PUSH
76864: LD_INT 4
76866: PLUS
76867: PUSH
76868: LD_VAR 0 2
76872: PUSH
76873: LD_INT 4
76875: PLUS
76876: PUSH
76877: LD_INT 5
76879: PUSH
76880: EMPTY
76881: LIST
76882: LIST
76883: LIST
76884: PUSH
76885: EMPTY
76886: LIST
76887: LIST
76888: LIST
76889: LIST
76890: LIST
76891: ST_TO_ADDR
// end ; 2 :
76892: GO 77451
76894: LD_INT 2
76896: DOUBLE
76897: EQUAL
76898: IFTRUE 76902
76900: GO 77031
76902: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76903: LD_ADDR_VAR 0 5
76907: PUSH
76908: LD_VAR 0 1
76912: PUSH
76913: LD_VAR 0 2
76917: PUSH
76918: LD_INT 3
76920: MINUS
76921: PUSH
76922: LD_INT 3
76924: PUSH
76925: EMPTY
76926: LIST
76927: LIST
76928: LIST
76929: PUSH
76930: LD_VAR 0 1
76934: PUSH
76935: LD_INT 4
76937: PLUS
76938: PUSH
76939: LD_VAR 0 2
76943: PUSH
76944: LD_INT 4
76946: PUSH
76947: EMPTY
76948: LIST
76949: LIST
76950: LIST
76951: PUSH
76952: LD_VAR 0 1
76956: PUSH
76957: LD_VAR 0 2
76961: PUSH
76962: LD_INT 4
76964: PLUS
76965: PUSH
76966: LD_INT 0
76968: PUSH
76969: EMPTY
76970: LIST
76971: LIST
76972: LIST
76973: PUSH
76974: LD_VAR 0 1
76978: PUSH
76979: LD_INT 3
76981: MINUS
76982: PUSH
76983: LD_VAR 0 2
76987: PUSH
76988: LD_INT 1
76990: PUSH
76991: EMPTY
76992: LIST
76993: LIST
76994: LIST
76995: PUSH
76996: LD_VAR 0 1
77000: PUSH
77001: LD_INT 4
77003: MINUS
77004: PUSH
77005: LD_VAR 0 2
77009: PUSH
77010: LD_INT 4
77012: MINUS
77013: PUSH
77014: LD_INT 2
77016: PUSH
77017: EMPTY
77018: LIST
77019: LIST
77020: LIST
77021: PUSH
77022: EMPTY
77023: LIST
77024: LIST
77025: LIST
77026: LIST
77027: LIST
77028: ST_TO_ADDR
// end ; 3 :
77029: GO 77451
77031: LD_INT 3
77033: DOUBLE
77034: EQUAL
77035: IFTRUE 77039
77037: GO 77172
77039: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77040: LD_ADDR_VAR 0 5
77044: PUSH
77045: LD_VAR 0 1
77049: PUSH
77050: LD_INT 3
77052: PLUS
77053: PUSH
77054: LD_VAR 0 2
77058: PUSH
77059: LD_INT 4
77061: PUSH
77062: EMPTY
77063: LIST
77064: LIST
77065: LIST
77066: PUSH
77067: LD_VAR 0 1
77071: PUSH
77072: LD_INT 4
77074: PLUS
77075: PUSH
77076: LD_VAR 0 2
77080: PUSH
77081: LD_INT 4
77083: PLUS
77084: PUSH
77085: LD_INT 5
77087: PUSH
77088: EMPTY
77089: LIST
77090: LIST
77091: LIST
77092: PUSH
77093: LD_VAR 0 1
77097: PUSH
77098: LD_INT 4
77100: MINUS
77101: PUSH
77102: LD_VAR 0 2
77106: PUSH
77107: LD_INT 1
77109: PUSH
77110: EMPTY
77111: LIST
77112: LIST
77113: LIST
77114: PUSH
77115: LD_VAR 0 1
77119: PUSH
77120: LD_VAR 0 2
77124: PUSH
77125: LD_INT 4
77127: MINUS
77128: PUSH
77129: LD_INT 3
77131: PUSH
77132: EMPTY
77133: LIST
77134: LIST
77135: LIST
77136: PUSH
77137: LD_VAR 0 1
77141: PUSH
77142: LD_INT 3
77144: MINUS
77145: PUSH
77146: LD_VAR 0 2
77150: PUSH
77151: LD_INT 3
77153: MINUS
77154: PUSH
77155: LD_INT 2
77157: PUSH
77158: EMPTY
77159: LIST
77160: LIST
77161: LIST
77162: PUSH
77163: EMPTY
77164: LIST
77165: LIST
77166: LIST
77167: LIST
77168: LIST
77169: ST_TO_ADDR
// end ; 4 :
77170: GO 77451
77172: LD_INT 4
77174: DOUBLE
77175: EQUAL
77176: IFTRUE 77180
77178: GO 77313
77180: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77181: LD_ADDR_VAR 0 5
77185: PUSH
77186: LD_VAR 0 1
77190: PUSH
77191: LD_VAR 0 2
77195: PUSH
77196: LD_INT 4
77198: PLUS
77199: PUSH
77200: LD_INT 0
77202: PUSH
77203: EMPTY
77204: LIST
77205: LIST
77206: LIST
77207: PUSH
77208: LD_VAR 0 1
77212: PUSH
77213: LD_INT 3
77215: PLUS
77216: PUSH
77217: LD_VAR 0 2
77221: PUSH
77222: LD_INT 3
77224: PLUS
77225: PUSH
77226: LD_INT 5
77228: PUSH
77229: EMPTY
77230: LIST
77231: LIST
77232: LIST
77233: PUSH
77234: LD_VAR 0 1
77238: PUSH
77239: LD_INT 4
77241: PLUS
77242: PUSH
77243: LD_VAR 0 2
77247: PUSH
77248: LD_INT 4
77250: PUSH
77251: EMPTY
77252: LIST
77253: LIST
77254: LIST
77255: PUSH
77256: LD_VAR 0 1
77260: PUSH
77261: LD_VAR 0 2
77265: PUSH
77266: LD_INT 3
77268: MINUS
77269: PUSH
77270: LD_INT 3
77272: PUSH
77273: EMPTY
77274: LIST
77275: LIST
77276: LIST
77277: PUSH
77278: LD_VAR 0 1
77282: PUSH
77283: LD_INT 4
77285: MINUS
77286: PUSH
77287: LD_VAR 0 2
77291: PUSH
77292: LD_INT 4
77294: MINUS
77295: PUSH
77296: LD_INT 2
77298: PUSH
77299: EMPTY
77300: LIST
77301: LIST
77302: LIST
77303: PUSH
77304: EMPTY
77305: LIST
77306: LIST
77307: LIST
77308: LIST
77309: LIST
77310: ST_TO_ADDR
// end ; 5 :
77311: GO 77451
77313: LD_INT 5
77315: DOUBLE
77316: EQUAL
77317: IFTRUE 77321
77319: GO 77450
77321: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77322: LD_ADDR_VAR 0 5
77326: PUSH
77327: LD_VAR 0 1
77331: PUSH
77332: LD_INT 4
77334: MINUS
77335: PUSH
77336: LD_VAR 0 2
77340: PUSH
77341: LD_INT 1
77343: PUSH
77344: EMPTY
77345: LIST
77346: LIST
77347: LIST
77348: PUSH
77349: LD_VAR 0 1
77353: PUSH
77354: LD_VAR 0 2
77358: PUSH
77359: LD_INT 4
77361: MINUS
77362: PUSH
77363: LD_INT 3
77365: PUSH
77366: EMPTY
77367: LIST
77368: LIST
77369: LIST
77370: PUSH
77371: LD_VAR 0 1
77375: PUSH
77376: LD_INT 4
77378: PLUS
77379: PUSH
77380: LD_VAR 0 2
77384: PUSH
77385: LD_INT 4
77387: PLUS
77388: PUSH
77389: LD_INT 5
77391: PUSH
77392: EMPTY
77393: LIST
77394: LIST
77395: LIST
77396: PUSH
77397: LD_VAR 0 1
77401: PUSH
77402: LD_INT 3
77404: PLUS
77405: PUSH
77406: LD_VAR 0 2
77410: PUSH
77411: LD_INT 4
77413: PUSH
77414: EMPTY
77415: LIST
77416: LIST
77417: LIST
77418: PUSH
77419: LD_VAR 0 1
77423: PUSH
77424: LD_VAR 0 2
77428: PUSH
77429: LD_INT 3
77431: PLUS
77432: PUSH
77433: LD_INT 0
77435: PUSH
77436: EMPTY
77437: LIST
77438: LIST
77439: LIST
77440: PUSH
77441: EMPTY
77442: LIST
77443: LIST
77444: LIST
77445: LIST
77446: LIST
77447: ST_TO_ADDR
// end ; end ;
77448: GO 77451
77450: POP
// result := list ;
77451: LD_ADDR_VAR 0 4
77455: PUSH
77456: LD_VAR 0 5
77460: ST_TO_ADDR
// end ;
77461: LD_VAR 0 4
77465: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77466: LD_INT 0
77468: PPUSH
77469: PPUSH
77470: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77471: LD_VAR 0 1
77475: NOT
77476: PUSH
77477: LD_VAR 0 2
77481: PUSH
77482: LD_INT 1
77484: PUSH
77485: LD_INT 2
77487: PUSH
77488: LD_INT 3
77490: PUSH
77491: LD_INT 4
77493: PUSH
77494: EMPTY
77495: LIST
77496: LIST
77497: LIST
77498: LIST
77499: IN
77500: NOT
77501: OR
77502: IFFALSE 77506
// exit ;
77504: GO 77589
// tmp := [ ] ;
77506: LD_ADDR_VAR 0 5
77510: PUSH
77511: EMPTY
77512: ST_TO_ADDR
// for i in units do
77513: LD_ADDR_VAR 0 4
77517: PUSH
77518: LD_VAR 0 1
77522: PUSH
77523: FOR_IN
77524: IFFALSE 77558
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77526: LD_ADDR_VAR 0 5
77530: PUSH
77531: LD_VAR 0 5
77535: PPUSH
77536: LD_VAR 0 4
77540: PPUSH
77541: LD_VAR 0 2
77545: PPUSH
77546: CALL_OW 259
77550: PPUSH
77551: CALL 78949 0 2
77555: ST_TO_ADDR
77556: GO 77523
77558: POP
77559: POP
// if not tmp then
77560: LD_VAR 0 5
77564: NOT
77565: IFFALSE 77569
// exit ;
77567: GO 77589
// result := SortListByListDesc ( units , tmp ) ;
77569: LD_ADDR_VAR 0 3
77573: PUSH
77574: LD_VAR 0 1
77578: PPUSH
77579: LD_VAR 0 5
77583: PPUSH
77584: CALL_OW 77
77588: ST_TO_ADDR
// end ;
77589: LD_VAR 0 3
77593: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77594: LD_INT 0
77596: PPUSH
77597: PPUSH
77598: PPUSH
// result := false ;
77599: LD_ADDR_VAR 0 3
77603: PUSH
77604: LD_INT 0
77606: ST_TO_ADDR
// if not building then
77607: LD_VAR 0 2
77611: NOT
77612: IFFALSE 77616
// exit ;
77614: GO 77754
// x := GetX ( building ) ;
77616: LD_ADDR_VAR 0 4
77620: PUSH
77621: LD_VAR 0 2
77625: PPUSH
77626: CALL_OW 250
77630: ST_TO_ADDR
// y := GetY ( building ) ;
77631: LD_ADDR_VAR 0 5
77635: PUSH
77636: LD_VAR 0 2
77640: PPUSH
77641: CALL_OW 251
77645: ST_TO_ADDR
// if not x or not y then
77646: LD_VAR 0 4
77650: NOT
77651: PUSH
77652: LD_VAR 0 5
77656: NOT
77657: OR
77658: IFFALSE 77662
// exit ;
77660: GO 77754
// if GetTaskList ( unit ) then
77662: LD_VAR 0 1
77666: PPUSH
77667: CALL_OW 437
77671: IFFALSE 77754
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77673: LD_STRING e
77675: PUSH
77676: LD_VAR 0 1
77680: PPUSH
77681: CALL_OW 437
77685: PUSH
77686: LD_INT 1
77688: ARRAY
77689: PUSH
77690: LD_INT 1
77692: ARRAY
77693: EQUAL
77694: PUSH
77695: LD_VAR 0 4
77699: PUSH
77700: LD_VAR 0 1
77704: PPUSH
77705: CALL_OW 437
77709: PUSH
77710: LD_INT 1
77712: ARRAY
77713: PUSH
77714: LD_INT 2
77716: ARRAY
77717: EQUAL
77718: AND
77719: PUSH
77720: LD_VAR 0 5
77724: PUSH
77725: LD_VAR 0 1
77729: PPUSH
77730: CALL_OW 437
77734: PUSH
77735: LD_INT 1
77737: ARRAY
77738: PUSH
77739: LD_INT 3
77741: ARRAY
77742: EQUAL
77743: AND
77744: IFFALSE 77754
// result := true end ;
77746: LD_ADDR_VAR 0 3
77750: PUSH
77751: LD_INT 1
77753: ST_TO_ADDR
// end ;
77754: LD_VAR 0 3
77758: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77759: LD_INT 0
77761: PPUSH
// result := false ;
77762: LD_ADDR_VAR 0 4
77766: PUSH
77767: LD_INT 0
77769: ST_TO_ADDR
// if GetTaskList ( unit ) then
77770: LD_VAR 0 1
77774: PPUSH
77775: CALL_OW 437
77779: IFFALSE 77862
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77781: LD_STRING M
77783: PUSH
77784: LD_VAR 0 1
77788: PPUSH
77789: CALL_OW 437
77793: PUSH
77794: LD_INT 1
77796: ARRAY
77797: PUSH
77798: LD_INT 1
77800: ARRAY
77801: EQUAL
77802: PUSH
77803: LD_VAR 0 2
77807: PUSH
77808: LD_VAR 0 1
77812: PPUSH
77813: CALL_OW 437
77817: PUSH
77818: LD_INT 1
77820: ARRAY
77821: PUSH
77822: LD_INT 2
77824: ARRAY
77825: EQUAL
77826: AND
77827: PUSH
77828: LD_VAR 0 3
77832: PUSH
77833: LD_VAR 0 1
77837: PPUSH
77838: CALL_OW 437
77842: PUSH
77843: LD_INT 1
77845: ARRAY
77846: PUSH
77847: LD_INT 3
77849: ARRAY
77850: EQUAL
77851: AND
77852: IFFALSE 77862
// result := true ;
77854: LD_ADDR_VAR 0 4
77858: PUSH
77859: LD_INT 1
77861: ST_TO_ADDR
// end ; end ;
77862: LD_VAR 0 4
77866: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77867: LD_INT 0
77869: PPUSH
77870: PPUSH
77871: PPUSH
77872: PPUSH
// if not unit or not area then
77873: LD_VAR 0 1
77877: NOT
77878: PUSH
77879: LD_VAR 0 2
77883: NOT
77884: OR
77885: IFFALSE 77889
// exit ;
77887: GO 78052
// tmp := AreaToList ( area , i ) ;
77889: LD_ADDR_VAR 0 6
77893: PUSH
77894: LD_VAR 0 2
77898: PPUSH
77899: LD_VAR 0 5
77903: PPUSH
77904: CALL_OW 517
77908: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77909: LD_ADDR_VAR 0 5
77913: PUSH
77914: DOUBLE
77915: LD_INT 1
77917: DEC
77918: ST_TO_ADDR
77919: LD_VAR 0 6
77923: PUSH
77924: LD_INT 1
77926: ARRAY
77927: PUSH
77928: FOR_TO
77929: IFFALSE 78050
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77931: LD_ADDR_VAR 0 7
77935: PUSH
77936: LD_VAR 0 6
77940: PUSH
77941: LD_INT 1
77943: ARRAY
77944: PUSH
77945: LD_VAR 0 5
77949: ARRAY
77950: PUSH
77951: LD_VAR 0 6
77955: PUSH
77956: LD_INT 2
77958: ARRAY
77959: PUSH
77960: LD_VAR 0 5
77964: ARRAY
77965: PUSH
77966: EMPTY
77967: LIST
77968: LIST
77969: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
77970: LD_INT 92
77972: PUSH
77973: LD_VAR 0 7
77977: PUSH
77978: LD_INT 1
77980: ARRAY
77981: PUSH
77982: LD_VAR 0 7
77986: PUSH
77987: LD_INT 2
77989: ARRAY
77990: PUSH
77991: LD_INT 3
77993: PUSH
77994: EMPTY
77995: LIST
77996: LIST
77997: LIST
77998: LIST
77999: PPUSH
78000: CALL_OW 69
78004: PUSH
78005: LD_INT 0
78007: EQUAL
78008: IFFALSE 78048
// begin PlaceUnitArea ( unit , area , mode ) ;
78010: LD_VAR 0 1
78014: PPUSH
78015: LD_VAR 0 2
78019: PPUSH
78020: LD_VAR 0 3
78024: PPUSH
78025: CALL_OW 49
// result := IsPlaced ( unit ) ;
78029: LD_ADDR_VAR 0 4
78033: PUSH
78034: LD_VAR 0 1
78038: PPUSH
78039: CALL_OW 305
78043: ST_TO_ADDR
// exit ;
78044: POP
78045: POP
78046: GO 78052
// end ; end ;
78048: GO 77928
78050: POP
78051: POP
// end ;
78052: LD_VAR 0 4
78056: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78057: LD_INT 0
78059: PPUSH
78060: PPUSH
78061: PPUSH
// if not side or side > 8 then
78062: LD_VAR 0 1
78066: NOT
78067: PUSH
78068: LD_VAR 0 1
78072: PUSH
78073: LD_INT 8
78075: GREATER
78076: OR
78077: IFFALSE 78081
// exit ;
78079: GO 78268
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78081: LD_ADDR_VAR 0 4
78085: PUSH
78086: LD_INT 22
78088: PUSH
78089: LD_VAR 0 1
78093: PUSH
78094: EMPTY
78095: LIST
78096: LIST
78097: PUSH
78098: LD_INT 21
78100: PUSH
78101: LD_INT 3
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: PUSH
78108: EMPTY
78109: LIST
78110: LIST
78111: PPUSH
78112: CALL_OW 69
78116: ST_TO_ADDR
// if not tmp then
78117: LD_VAR 0 4
78121: NOT
78122: IFFALSE 78126
// exit ;
78124: GO 78268
// enable_addtolog := true ;
78126: LD_ADDR_OWVAR 81
78130: PUSH
78131: LD_INT 1
78133: ST_TO_ADDR
// AddToLog ( [ ) ;
78134: LD_STRING [
78136: PPUSH
78137: CALL_OW 561
// for i in tmp do
78141: LD_ADDR_VAR 0 3
78145: PUSH
78146: LD_VAR 0 4
78150: PUSH
78151: FOR_IN
78152: IFFALSE 78259
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78154: LD_STRING [
78156: PUSH
78157: LD_VAR 0 3
78161: PPUSH
78162: CALL_OW 266
78166: STR
78167: PUSH
78168: LD_STRING , 
78170: STR
78171: PUSH
78172: LD_VAR 0 3
78176: PPUSH
78177: CALL_OW 250
78181: STR
78182: PUSH
78183: LD_STRING , 
78185: STR
78186: PUSH
78187: LD_VAR 0 3
78191: PPUSH
78192: CALL_OW 251
78196: STR
78197: PUSH
78198: LD_STRING , 
78200: STR
78201: PUSH
78202: LD_VAR 0 3
78206: PPUSH
78207: CALL_OW 254
78211: STR
78212: PUSH
78213: LD_STRING , 
78215: STR
78216: PUSH
78217: LD_VAR 0 3
78221: PPUSH
78222: LD_INT 1
78224: PPUSH
78225: CALL_OW 268
78229: STR
78230: PUSH
78231: LD_STRING , 
78233: STR
78234: PUSH
78235: LD_VAR 0 3
78239: PPUSH
78240: LD_INT 2
78242: PPUSH
78243: CALL_OW 268
78247: STR
78248: PUSH
78249: LD_STRING ],
78251: STR
78252: PPUSH
78253: CALL_OW 561
// end ;
78257: GO 78151
78259: POP
78260: POP
// AddToLog ( ]; ) ;
78261: LD_STRING ];
78263: PPUSH
78264: CALL_OW 561
// end ;
78268: LD_VAR 0 2
78272: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78273: LD_INT 0
78275: PPUSH
78276: PPUSH
78277: PPUSH
78278: PPUSH
78279: PPUSH
// if not area or not rate or not max then
78280: LD_VAR 0 1
78284: NOT
78285: PUSH
78286: LD_VAR 0 2
78290: NOT
78291: OR
78292: PUSH
78293: LD_VAR 0 4
78297: NOT
78298: OR
78299: IFFALSE 78303
// exit ;
78301: GO 78492
// while 1 do
78303: LD_INT 1
78305: IFFALSE 78492
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78307: LD_ADDR_VAR 0 9
78311: PUSH
78312: LD_VAR 0 1
78316: PPUSH
78317: LD_INT 1
78319: PPUSH
78320: CALL_OW 287
78324: PUSH
78325: LD_INT 10
78327: MUL
78328: ST_TO_ADDR
// r := rate / 10 ;
78329: LD_ADDR_VAR 0 7
78333: PUSH
78334: LD_VAR 0 2
78338: PUSH
78339: LD_INT 10
78341: DIVREAL
78342: ST_TO_ADDR
// time := 1 1$00 ;
78343: LD_ADDR_VAR 0 8
78347: PUSH
78348: LD_INT 2100
78350: ST_TO_ADDR
// if amount < min then
78351: LD_VAR 0 9
78355: PUSH
78356: LD_VAR 0 3
78360: LESS
78361: IFFALSE 78379
// r := r * 2 else
78363: LD_ADDR_VAR 0 7
78367: PUSH
78368: LD_VAR 0 7
78372: PUSH
78373: LD_INT 2
78375: MUL
78376: ST_TO_ADDR
78377: GO 78405
// if amount > max then
78379: LD_VAR 0 9
78383: PUSH
78384: LD_VAR 0 4
78388: GREATER
78389: IFFALSE 78405
// r := r / 2 ;
78391: LD_ADDR_VAR 0 7
78395: PUSH
78396: LD_VAR 0 7
78400: PUSH
78401: LD_INT 2
78403: DIVREAL
78404: ST_TO_ADDR
// time := time / r ;
78405: LD_ADDR_VAR 0 8
78409: PUSH
78410: LD_VAR 0 8
78414: PUSH
78415: LD_VAR 0 7
78419: DIVREAL
78420: ST_TO_ADDR
// if time < 0 then
78421: LD_VAR 0 8
78425: PUSH
78426: LD_INT 0
78428: LESS
78429: IFFALSE 78446
// time := time * - 1 ;
78431: LD_ADDR_VAR 0 8
78435: PUSH
78436: LD_VAR 0 8
78440: PUSH
78441: LD_INT 1
78443: NEG
78444: MUL
78445: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78446: LD_VAR 0 8
78450: PUSH
78451: LD_INT 35
78453: PPUSH
78454: LD_INT 875
78456: PPUSH
78457: CALL_OW 12
78461: PLUS
78462: PPUSH
78463: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78467: LD_INT 1
78469: PPUSH
78470: LD_INT 5
78472: PPUSH
78473: CALL_OW 12
78477: PPUSH
78478: LD_VAR 0 1
78482: PPUSH
78483: LD_INT 1
78485: PPUSH
78486: CALL_OW 55
// end ;
78490: GO 78303
// end ;
78492: LD_VAR 0 5
78496: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78497: LD_INT 0
78499: PPUSH
78500: PPUSH
78501: PPUSH
78502: PPUSH
78503: PPUSH
78504: PPUSH
78505: PPUSH
78506: PPUSH
// if not turrets or not factories then
78507: LD_VAR 0 1
78511: NOT
78512: PUSH
78513: LD_VAR 0 2
78517: NOT
78518: OR
78519: IFFALSE 78523
// exit ;
78521: GO 78830
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78523: LD_ADDR_VAR 0 10
78527: PUSH
78528: LD_INT 5
78530: PUSH
78531: LD_INT 6
78533: PUSH
78534: EMPTY
78535: LIST
78536: LIST
78537: PUSH
78538: LD_INT 2
78540: PUSH
78541: LD_INT 4
78543: PUSH
78544: EMPTY
78545: LIST
78546: LIST
78547: PUSH
78548: LD_INT 3
78550: PUSH
78551: LD_INT 5
78553: PUSH
78554: EMPTY
78555: LIST
78556: LIST
78557: PUSH
78558: EMPTY
78559: LIST
78560: LIST
78561: LIST
78562: PUSH
78563: LD_INT 24
78565: PUSH
78566: LD_INT 25
78568: PUSH
78569: EMPTY
78570: LIST
78571: LIST
78572: PUSH
78573: LD_INT 23
78575: PUSH
78576: LD_INT 27
78578: PUSH
78579: EMPTY
78580: LIST
78581: LIST
78582: PUSH
78583: EMPTY
78584: LIST
78585: LIST
78586: PUSH
78587: LD_INT 42
78589: PUSH
78590: LD_INT 43
78592: PUSH
78593: EMPTY
78594: LIST
78595: LIST
78596: PUSH
78597: LD_INT 44
78599: PUSH
78600: LD_INT 46
78602: PUSH
78603: EMPTY
78604: LIST
78605: LIST
78606: PUSH
78607: LD_INT 45
78609: PUSH
78610: LD_INT 47
78612: PUSH
78613: EMPTY
78614: LIST
78615: LIST
78616: PUSH
78617: EMPTY
78618: LIST
78619: LIST
78620: LIST
78621: PUSH
78622: EMPTY
78623: LIST
78624: LIST
78625: LIST
78626: ST_TO_ADDR
// result := [ ] ;
78627: LD_ADDR_VAR 0 3
78631: PUSH
78632: EMPTY
78633: ST_TO_ADDR
// for i in turrets do
78634: LD_ADDR_VAR 0 4
78638: PUSH
78639: LD_VAR 0 1
78643: PUSH
78644: FOR_IN
78645: IFFALSE 78828
// begin nat := GetNation ( i ) ;
78647: LD_ADDR_VAR 0 7
78651: PUSH
78652: LD_VAR 0 4
78656: PPUSH
78657: CALL_OW 248
78661: ST_TO_ADDR
// weapon := 0 ;
78662: LD_ADDR_VAR 0 8
78666: PUSH
78667: LD_INT 0
78669: ST_TO_ADDR
// if not nat then
78670: LD_VAR 0 7
78674: NOT
78675: IFFALSE 78679
// continue ;
78677: GO 78644
// for j in list [ nat ] do
78679: LD_ADDR_VAR 0 5
78683: PUSH
78684: LD_VAR 0 10
78688: PUSH
78689: LD_VAR 0 7
78693: ARRAY
78694: PUSH
78695: FOR_IN
78696: IFFALSE 78737
// if GetBWeapon ( i ) = j [ 1 ] then
78698: LD_VAR 0 4
78702: PPUSH
78703: CALL_OW 269
78707: PUSH
78708: LD_VAR 0 5
78712: PUSH
78713: LD_INT 1
78715: ARRAY
78716: EQUAL
78717: IFFALSE 78735
// begin weapon := j [ 2 ] ;
78719: LD_ADDR_VAR 0 8
78723: PUSH
78724: LD_VAR 0 5
78728: PUSH
78729: LD_INT 2
78731: ARRAY
78732: ST_TO_ADDR
// break ;
78733: GO 78737
// end ;
78735: GO 78695
78737: POP
78738: POP
// if not weapon then
78739: LD_VAR 0 8
78743: NOT
78744: IFFALSE 78748
// continue ;
78746: GO 78644
// for k in factories do
78748: LD_ADDR_VAR 0 6
78752: PUSH
78753: LD_VAR 0 2
78757: PUSH
78758: FOR_IN
78759: IFFALSE 78824
// begin weapons := AvailableWeaponList ( k ) ;
78761: LD_ADDR_VAR 0 9
78765: PUSH
78766: LD_VAR 0 6
78770: PPUSH
78771: CALL_OW 478
78775: ST_TO_ADDR
// if not weapons then
78776: LD_VAR 0 9
78780: NOT
78781: IFFALSE 78785
// continue ;
78783: GO 78758
// if weapon in weapons then
78785: LD_VAR 0 8
78789: PUSH
78790: LD_VAR 0 9
78794: IN
78795: IFFALSE 78822
// begin result := [ i , weapon ] ;
78797: LD_ADDR_VAR 0 3
78801: PUSH
78802: LD_VAR 0 4
78806: PUSH
78807: LD_VAR 0 8
78811: PUSH
78812: EMPTY
78813: LIST
78814: LIST
78815: ST_TO_ADDR
// exit ;
78816: POP
78817: POP
78818: POP
78819: POP
78820: GO 78830
// end ; end ;
78822: GO 78758
78824: POP
78825: POP
// end ;
78826: GO 78644
78828: POP
78829: POP
// end ;
78830: LD_VAR 0 3
78834: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78835: LD_INT 0
78837: PPUSH
// if not side or side > 8 then
78838: LD_VAR 0 3
78842: NOT
78843: PUSH
78844: LD_VAR 0 3
78848: PUSH
78849: LD_INT 8
78851: GREATER
78852: OR
78853: IFFALSE 78857
// exit ;
78855: GO 78916
// if not range then
78857: LD_VAR 0 4
78861: NOT
78862: IFFALSE 78873
// range := - 12 ;
78864: LD_ADDR_VAR 0 4
78868: PUSH
78869: LD_INT 12
78871: NEG
78872: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78873: LD_VAR 0 1
78877: PPUSH
78878: LD_VAR 0 2
78882: PPUSH
78883: LD_VAR 0 3
78887: PPUSH
78888: LD_VAR 0 4
78892: PPUSH
78893: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78897: LD_VAR 0 1
78901: PPUSH
78902: LD_VAR 0 2
78906: PPUSH
78907: LD_VAR 0 3
78911: PPUSH
78912: CALL_OW 331
// end ;
78916: LD_VAR 0 5
78920: RET
// export function Video ( mode ) ; begin
78921: LD_INT 0
78923: PPUSH
// ingame_video = mode ;
78924: LD_ADDR_OWVAR 52
78928: PUSH
78929: LD_VAR 0 1
78933: ST_TO_ADDR
// interface_hidden = mode ;
78934: LD_ADDR_OWVAR 54
78938: PUSH
78939: LD_VAR 0 1
78943: ST_TO_ADDR
// end ;
78944: LD_VAR 0 2
78948: RET
// export function Join ( array , element ) ; begin
78949: LD_INT 0
78951: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78952: LD_ADDR_VAR 0 3
78956: PUSH
78957: LD_VAR 0 1
78961: PPUSH
78962: LD_VAR 0 1
78966: PUSH
78967: LD_INT 1
78969: PLUS
78970: PPUSH
78971: LD_VAR 0 2
78975: PPUSH
78976: CALL_OW 1
78980: ST_TO_ADDR
// end ;
78981: LD_VAR 0 3
78985: RET
// export function JoinUnion ( array , element ) ; begin
78986: LD_INT 0
78988: PPUSH
// result := array union element ;
78989: LD_ADDR_VAR 0 3
78993: PUSH
78994: LD_VAR 0 1
78998: PUSH
78999: LD_VAR 0 2
79003: UNION
79004: ST_TO_ADDR
// end ;
79005: LD_VAR 0 3
79009: RET
// export function GetBehemoths ( side ) ; begin
79010: LD_INT 0
79012: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79013: LD_ADDR_VAR 0 2
79017: PUSH
79018: LD_INT 22
79020: PUSH
79021: LD_VAR 0 1
79025: PUSH
79026: EMPTY
79027: LIST
79028: LIST
79029: PUSH
79030: LD_INT 31
79032: PUSH
79033: LD_INT 25
79035: PUSH
79036: EMPTY
79037: LIST
79038: LIST
79039: PUSH
79040: EMPTY
79041: LIST
79042: LIST
79043: PPUSH
79044: CALL_OW 69
79048: ST_TO_ADDR
// end ;
79049: LD_VAR 0 2
79053: RET
// export function Shuffle ( array ) ; var i , index ; begin
79054: LD_INT 0
79056: PPUSH
79057: PPUSH
79058: PPUSH
// result := [ ] ;
79059: LD_ADDR_VAR 0 2
79063: PUSH
79064: EMPTY
79065: ST_TO_ADDR
// if not array then
79066: LD_VAR 0 1
79070: NOT
79071: IFFALSE 79075
// exit ;
79073: GO 79174
// Randomize ;
79075: CALL_OW 10
// for i = array downto 1 do
79079: LD_ADDR_VAR 0 3
79083: PUSH
79084: DOUBLE
79085: LD_VAR 0 1
79089: INC
79090: ST_TO_ADDR
79091: LD_INT 1
79093: PUSH
79094: FOR_DOWNTO
79095: IFFALSE 79172
// begin index := rand ( 1 , array ) ;
79097: LD_ADDR_VAR 0 4
79101: PUSH
79102: LD_INT 1
79104: PPUSH
79105: LD_VAR 0 1
79109: PPUSH
79110: CALL_OW 12
79114: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79115: LD_ADDR_VAR 0 2
79119: PUSH
79120: LD_VAR 0 2
79124: PPUSH
79125: LD_VAR 0 2
79129: PUSH
79130: LD_INT 1
79132: PLUS
79133: PPUSH
79134: LD_VAR 0 1
79138: PUSH
79139: LD_VAR 0 4
79143: ARRAY
79144: PPUSH
79145: CALL_OW 2
79149: ST_TO_ADDR
// array := Delete ( array , index ) ;
79150: LD_ADDR_VAR 0 1
79154: PUSH
79155: LD_VAR 0 1
79159: PPUSH
79160: LD_VAR 0 4
79164: PPUSH
79165: CALL_OW 3
79169: ST_TO_ADDR
// end ;
79170: GO 79094
79172: POP
79173: POP
// end ;
79174: LD_VAR 0 2
79178: RET
// export function GetBaseMaterials ( base ) ; begin
79179: LD_INT 0
79181: PPUSH
// result := [ 0 , 0 , 0 ] ;
79182: LD_ADDR_VAR 0 2
79186: PUSH
79187: LD_INT 0
79189: PUSH
79190: LD_INT 0
79192: PUSH
79193: LD_INT 0
79195: PUSH
79196: EMPTY
79197: LIST
79198: LIST
79199: LIST
79200: ST_TO_ADDR
// if not base then
79201: LD_VAR 0 1
79205: NOT
79206: IFFALSE 79210
// exit ;
79208: GO 79259
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79210: LD_ADDR_VAR 0 2
79214: PUSH
79215: LD_VAR 0 1
79219: PPUSH
79220: LD_INT 1
79222: PPUSH
79223: CALL_OW 275
79227: PUSH
79228: LD_VAR 0 1
79232: PPUSH
79233: LD_INT 2
79235: PPUSH
79236: CALL_OW 275
79240: PUSH
79241: LD_VAR 0 1
79245: PPUSH
79246: LD_INT 3
79248: PPUSH
79249: CALL_OW 275
79253: PUSH
79254: EMPTY
79255: LIST
79256: LIST
79257: LIST
79258: ST_TO_ADDR
// end ;
79259: LD_VAR 0 2
79263: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79264: LD_INT 0
79266: PPUSH
79267: PPUSH
// result := array ;
79268: LD_ADDR_VAR 0 3
79272: PUSH
79273: LD_VAR 0 1
79277: ST_TO_ADDR
// if size >= result then
79278: LD_VAR 0 2
79282: PUSH
79283: LD_VAR 0 3
79287: GREATEREQUAL
79288: IFFALSE 79292
// exit ;
79290: GO 79342
// if size then
79292: LD_VAR 0 2
79296: IFFALSE 79342
// for i := array downto size do
79298: LD_ADDR_VAR 0 4
79302: PUSH
79303: DOUBLE
79304: LD_VAR 0 1
79308: INC
79309: ST_TO_ADDR
79310: LD_VAR 0 2
79314: PUSH
79315: FOR_DOWNTO
79316: IFFALSE 79340
// result := Delete ( result , result ) ;
79318: LD_ADDR_VAR 0 3
79322: PUSH
79323: LD_VAR 0 3
79327: PPUSH
79328: LD_VAR 0 3
79332: PPUSH
79333: CALL_OW 3
79337: ST_TO_ADDR
79338: GO 79315
79340: POP
79341: POP
// end ;
79342: LD_VAR 0 3
79346: RET
// export function ComExit ( unit ) ; var tmp ; begin
79347: LD_INT 0
79349: PPUSH
79350: PPUSH
// if not IsInUnit ( unit ) then
79351: LD_VAR 0 1
79355: PPUSH
79356: CALL_OW 310
79360: NOT
79361: IFFALSE 79365
// exit ;
79363: GO 79425
// tmp := IsInUnit ( unit ) ;
79365: LD_ADDR_VAR 0 3
79369: PUSH
79370: LD_VAR 0 1
79374: PPUSH
79375: CALL_OW 310
79379: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79380: LD_VAR 0 3
79384: PPUSH
79385: CALL_OW 247
79389: PUSH
79390: LD_INT 2
79392: EQUAL
79393: IFFALSE 79406
// ComExitVehicle ( unit ) else
79395: LD_VAR 0 1
79399: PPUSH
79400: CALL_OW 121
79404: GO 79415
// ComExitBuilding ( unit ) ;
79406: LD_VAR 0 1
79410: PPUSH
79411: CALL_OW 122
// result := tmp ;
79415: LD_ADDR_VAR 0 2
79419: PUSH
79420: LD_VAR 0 3
79424: ST_TO_ADDR
// end ;
79425: LD_VAR 0 2
79429: RET
// export function ComExitAll ( units ) ; var i ; begin
79430: LD_INT 0
79432: PPUSH
79433: PPUSH
// if not units then
79434: LD_VAR 0 1
79438: NOT
79439: IFFALSE 79443
// exit ;
79441: GO 79469
// for i in units do
79443: LD_ADDR_VAR 0 3
79447: PUSH
79448: LD_VAR 0 1
79452: PUSH
79453: FOR_IN
79454: IFFALSE 79467
// ComExit ( i ) ;
79456: LD_VAR 0 3
79460: PPUSH
79461: CALL 79347 0 1
79465: GO 79453
79467: POP
79468: POP
// end ;
79469: LD_VAR 0 2
79473: RET
// export function ResetHc ; begin
79474: LD_INT 0
79476: PPUSH
// InitHc ;
79477: CALL_OW 19
// hc_importance := 0 ;
79481: LD_ADDR_OWVAR 32
79485: PUSH
79486: LD_INT 0
79488: ST_TO_ADDR
// end ;
79489: LD_VAR 0 1
79493: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79494: LD_INT 0
79496: PPUSH
79497: PPUSH
79498: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79499: LD_ADDR_VAR 0 6
79503: PUSH
79504: LD_VAR 0 1
79508: PUSH
79509: LD_VAR 0 3
79513: PLUS
79514: PUSH
79515: LD_INT 2
79517: DIV
79518: ST_TO_ADDR
// if _x < 0 then
79519: LD_VAR 0 6
79523: PUSH
79524: LD_INT 0
79526: LESS
79527: IFFALSE 79544
// _x := _x * - 1 ;
79529: LD_ADDR_VAR 0 6
79533: PUSH
79534: LD_VAR 0 6
79538: PUSH
79539: LD_INT 1
79541: NEG
79542: MUL
79543: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79544: LD_ADDR_VAR 0 7
79548: PUSH
79549: LD_VAR 0 2
79553: PUSH
79554: LD_VAR 0 4
79558: PLUS
79559: PUSH
79560: LD_INT 2
79562: DIV
79563: ST_TO_ADDR
// if _y < 0 then
79564: LD_VAR 0 7
79568: PUSH
79569: LD_INT 0
79571: LESS
79572: IFFALSE 79589
// _y := _y * - 1 ;
79574: LD_ADDR_VAR 0 7
79578: PUSH
79579: LD_VAR 0 7
79583: PUSH
79584: LD_INT 1
79586: NEG
79587: MUL
79588: ST_TO_ADDR
// result := [ _x , _y ] ;
79589: LD_ADDR_VAR 0 5
79593: PUSH
79594: LD_VAR 0 6
79598: PUSH
79599: LD_VAR 0 7
79603: PUSH
79604: EMPTY
79605: LIST
79606: LIST
79607: ST_TO_ADDR
// end ;
79608: LD_VAR 0 5
79612: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79613: LD_INT 0
79615: PPUSH
79616: PPUSH
79617: PPUSH
79618: PPUSH
// task := GetTaskList ( unit ) ;
79619: LD_ADDR_VAR 0 7
79623: PUSH
79624: LD_VAR 0 1
79628: PPUSH
79629: CALL_OW 437
79633: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79634: LD_VAR 0 7
79638: NOT
79639: PUSH
79640: LD_VAR 0 1
79644: PPUSH
79645: LD_VAR 0 2
79649: PPUSH
79650: CALL_OW 308
79654: NOT
79655: AND
79656: IFFALSE 79660
// exit ;
79658: GO 79778
// if IsInArea ( unit , area ) then
79660: LD_VAR 0 1
79664: PPUSH
79665: LD_VAR 0 2
79669: PPUSH
79670: CALL_OW 308
79674: IFFALSE 79692
// begin ComMoveToArea ( unit , goAway ) ;
79676: LD_VAR 0 1
79680: PPUSH
79681: LD_VAR 0 3
79685: PPUSH
79686: CALL_OW 113
// exit ;
79690: GO 79778
// end ; if task [ 1 ] [ 1 ] <> M then
79692: LD_VAR 0 7
79696: PUSH
79697: LD_INT 1
79699: ARRAY
79700: PUSH
79701: LD_INT 1
79703: ARRAY
79704: PUSH
79705: LD_STRING M
79707: NONEQUAL
79708: IFFALSE 79712
// exit ;
79710: GO 79778
// x := task [ 1 ] [ 2 ] ;
79712: LD_ADDR_VAR 0 5
79716: PUSH
79717: LD_VAR 0 7
79721: PUSH
79722: LD_INT 1
79724: ARRAY
79725: PUSH
79726: LD_INT 2
79728: ARRAY
79729: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79730: LD_ADDR_VAR 0 6
79734: PUSH
79735: LD_VAR 0 7
79739: PUSH
79740: LD_INT 1
79742: ARRAY
79743: PUSH
79744: LD_INT 3
79746: ARRAY
79747: ST_TO_ADDR
// if InArea ( x , y , area ) then
79748: LD_VAR 0 5
79752: PPUSH
79753: LD_VAR 0 6
79757: PPUSH
79758: LD_VAR 0 2
79762: PPUSH
79763: CALL_OW 309
79767: IFFALSE 79778
// ComStop ( unit ) ;
79769: LD_VAR 0 1
79773: PPUSH
79774: CALL_OW 141
// end ;
79778: LD_VAR 0 4
79782: RET
// export function Abs ( value ) ; begin
79783: LD_INT 0
79785: PPUSH
// result := value ;
79786: LD_ADDR_VAR 0 2
79790: PUSH
79791: LD_VAR 0 1
79795: ST_TO_ADDR
// if value < 0 then
79796: LD_VAR 0 1
79800: PUSH
79801: LD_INT 0
79803: LESS
79804: IFFALSE 79821
// result := value * - 1 ;
79806: LD_ADDR_VAR 0 2
79810: PUSH
79811: LD_VAR 0 1
79815: PUSH
79816: LD_INT 1
79818: NEG
79819: MUL
79820: ST_TO_ADDR
// end ;
79821: LD_VAR 0 2
79825: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79826: LD_INT 0
79828: PPUSH
79829: PPUSH
79830: PPUSH
79831: PPUSH
79832: PPUSH
79833: PPUSH
79834: PPUSH
79835: PPUSH
// if not unit or not building then
79836: LD_VAR 0 1
79840: NOT
79841: PUSH
79842: LD_VAR 0 2
79846: NOT
79847: OR
79848: IFFALSE 79852
// exit ;
79850: GO 80078
// x := GetX ( building ) ;
79852: LD_ADDR_VAR 0 4
79856: PUSH
79857: LD_VAR 0 2
79861: PPUSH
79862: CALL_OW 250
79866: ST_TO_ADDR
// y := GetY ( building ) ;
79867: LD_ADDR_VAR 0 6
79871: PUSH
79872: LD_VAR 0 2
79876: PPUSH
79877: CALL_OW 251
79881: ST_TO_ADDR
// d := GetDir ( building ) ;
79882: LD_ADDR_VAR 0 8
79886: PUSH
79887: LD_VAR 0 2
79891: PPUSH
79892: CALL_OW 254
79896: ST_TO_ADDR
// r := 4 ;
79897: LD_ADDR_VAR 0 9
79901: PUSH
79902: LD_INT 4
79904: ST_TO_ADDR
// for i := 1 to 5 do
79905: LD_ADDR_VAR 0 10
79909: PUSH
79910: DOUBLE
79911: LD_INT 1
79913: DEC
79914: ST_TO_ADDR
79915: LD_INT 5
79917: PUSH
79918: FOR_TO
79919: IFFALSE 80076
// begin _x := ShiftX ( x , d , r + i ) ;
79921: LD_ADDR_VAR 0 5
79925: PUSH
79926: LD_VAR 0 4
79930: PPUSH
79931: LD_VAR 0 8
79935: PPUSH
79936: LD_VAR 0 9
79940: PUSH
79941: LD_VAR 0 10
79945: PLUS
79946: PPUSH
79947: CALL_OW 272
79951: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79952: LD_ADDR_VAR 0 7
79956: PUSH
79957: LD_VAR 0 6
79961: PPUSH
79962: LD_VAR 0 8
79966: PPUSH
79967: LD_VAR 0 9
79971: PUSH
79972: LD_VAR 0 10
79976: PLUS
79977: PPUSH
79978: CALL_OW 273
79982: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79983: LD_VAR 0 5
79987: PPUSH
79988: LD_VAR 0 7
79992: PPUSH
79993: CALL_OW 488
79997: PUSH
79998: LD_VAR 0 5
80002: PPUSH
80003: LD_VAR 0 7
80007: PPUSH
80008: CALL_OW 428
80012: PPUSH
80013: CALL_OW 247
80017: PUSH
80018: LD_INT 3
80020: PUSH
80021: LD_INT 2
80023: PUSH
80024: EMPTY
80025: LIST
80026: LIST
80027: IN
80028: NOT
80029: AND
80030: IFFALSE 80074
// begin ComMoveXY ( unit , _x , _y ) ;
80032: LD_VAR 0 1
80036: PPUSH
80037: LD_VAR 0 5
80041: PPUSH
80042: LD_VAR 0 7
80046: PPUSH
80047: CALL_OW 111
// result := [ _x , _y ] ;
80051: LD_ADDR_VAR 0 3
80055: PUSH
80056: LD_VAR 0 5
80060: PUSH
80061: LD_VAR 0 7
80065: PUSH
80066: EMPTY
80067: LIST
80068: LIST
80069: ST_TO_ADDR
// exit ;
80070: POP
80071: POP
80072: GO 80078
// end ; end ;
80074: GO 79918
80076: POP
80077: POP
// end ;
80078: LD_VAR 0 3
80082: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80083: LD_INT 0
80085: PPUSH
80086: PPUSH
80087: PPUSH
// result := 0 ;
80088: LD_ADDR_VAR 0 3
80092: PUSH
80093: LD_INT 0
80095: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80096: LD_VAR 0 1
80100: PUSH
80101: LD_INT 0
80103: LESS
80104: PUSH
80105: LD_VAR 0 1
80109: PUSH
80110: LD_INT 8
80112: GREATER
80113: OR
80114: PUSH
80115: LD_VAR 0 2
80119: PUSH
80120: LD_INT 0
80122: LESS
80123: OR
80124: PUSH
80125: LD_VAR 0 2
80129: PUSH
80130: LD_INT 8
80132: GREATER
80133: OR
80134: IFFALSE 80138
// exit ;
80136: GO 80213
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80138: LD_ADDR_VAR 0 4
80142: PUSH
80143: LD_INT 22
80145: PUSH
80146: LD_VAR 0 2
80150: PUSH
80151: EMPTY
80152: LIST
80153: LIST
80154: PPUSH
80155: CALL_OW 69
80159: PUSH
80160: FOR_IN
80161: IFFALSE 80211
// begin un := UnitShoot ( i ) ;
80163: LD_ADDR_VAR 0 5
80167: PUSH
80168: LD_VAR 0 4
80172: PPUSH
80173: CALL_OW 504
80177: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80178: LD_VAR 0 5
80182: PPUSH
80183: CALL_OW 255
80187: PUSH
80188: LD_VAR 0 1
80192: EQUAL
80193: IFFALSE 80209
// begin result := un ;
80195: LD_ADDR_VAR 0 3
80199: PUSH
80200: LD_VAR 0 5
80204: ST_TO_ADDR
// exit ;
80205: POP
80206: POP
80207: GO 80213
// end ; end ;
80209: GO 80160
80211: POP
80212: POP
// end ;
80213: LD_VAR 0 3
80217: RET
// export function GetCargoBay ( units ) ; begin
80218: LD_INT 0
80220: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80221: LD_ADDR_VAR 0 2
80225: PUSH
80226: LD_VAR 0 1
80230: PPUSH
80231: LD_INT 2
80233: PUSH
80234: LD_INT 34
80236: PUSH
80237: LD_INT 12
80239: PUSH
80240: EMPTY
80241: LIST
80242: LIST
80243: PUSH
80244: LD_INT 34
80246: PUSH
80247: LD_INT 51
80249: PUSH
80250: EMPTY
80251: LIST
80252: LIST
80253: PUSH
80254: LD_INT 34
80256: PUSH
80257: LD_INT 32
80259: PUSH
80260: EMPTY
80261: LIST
80262: LIST
80263: PUSH
80264: LD_INT 34
80266: PUSH
80267: LD_INT 89
80269: PUSH
80270: EMPTY
80271: LIST
80272: LIST
80273: PUSH
80274: EMPTY
80275: LIST
80276: LIST
80277: LIST
80278: LIST
80279: LIST
80280: PPUSH
80281: CALL_OW 72
80285: ST_TO_ADDR
// end ;
80286: LD_VAR 0 2
80290: RET
// export function Negate ( value ) ; begin
80291: LD_INT 0
80293: PPUSH
// result := not value ;
80294: LD_ADDR_VAR 0 2
80298: PUSH
80299: LD_VAR 0 1
80303: NOT
80304: ST_TO_ADDR
// end ;
80305: LD_VAR 0 2
80309: RET
// export function Inc ( value ) ; begin
80310: LD_INT 0
80312: PPUSH
// result := value + 1 ;
80313: LD_ADDR_VAR 0 2
80317: PUSH
80318: LD_VAR 0 1
80322: PUSH
80323: LD_INT 1
80325: PLUS
80326: ST_TO_ADDR
// end ;
80327: LD_VAR 0 2
80331: RET
// export function Dec ( value ) ; begin
80332: LD_INT 0
80334: PPUSH
// result := value - 1 ;
80335: LD_ADDR_VAR 0 2
80339: PUSH
80340: LD_VAR 0 1
80344: PUSH
80345: LD_INT 1
80347: MINUS
80348: ST_TO_ADDR
// end ;
80349: LD_VAR 0 2
80353: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80354: LD_INT 0
80356: PPUSH
80357: PPUSH
80358: PPUSH
80359: PPUSH
80360: PPUSH
80361: PPUSH
80362: PPUSH
80363: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80364: LD_VAR 0 1
80368: PPUSH
80369: LD_VAR 0 2
80373: PPUSH
80374: CALL_OW 488
80378: NOT
80379: PUSH
80380: LD_VAR 0 3
80384: PPUSH
80385: LD_VAR 0 4
80389: PPUSH
80390: CALL_OW 488
80394: NOT
80395: OR
80396: IFFALSE 80409
// begin result := - 1 ;
80398: LD_ADDR_VAR 0 5
80402: PUSH
80403: LD_INT 1
80405: NEG
80406: ST_TO_ADDR
// exit ;
80407: GO 80644
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80409: LD_ADDR_VAR 0 12
80413: PUSH
80414: LD_VAR 0 1
80418: PPUSH
80419: LD_VAR 0 2
80423: PPUSH
80424: LD_VAR 0 3
80428: PPUSH
80429: LD_VAR 0 4
80433: PPUSH
80434: CALL 79494 0 4
80438: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80439: LD_ADDR_VAR 0 11
80443: PUSH
80444: LD_VAR 0 1
80448: PPUSH
80449: LD_VAR 0 2
80453: PPUSH
80454: LD_VAR 0 12
80458: PUSH
80459: LD_INT 1
80461: ARRAY
80462: PPUSH
80463: LD_VAR 0 12
80467: PUSH
80468: LD_INT 2
80470: ARRAY
80471: PPUSH
80472: CALL_OW 298
80476: ST_TO_ADDR
// distance := 9999 ;
80477: LD_ADDR_VAR 0 10
80481: PUSH
80482: LD_INT 9999
80484: ST_TO_ADDR
// for i := 0 to 5 do
80485: LD_ADDR_VAR 0 6
80489: PUSH
80490: DOUBLE
80491: LD_INT 0
80493: DEC
80494: ST_TO_ADDR
80495: LD_INT 5
80497: PUSH
80498: FOR_TO
80499: IFFALSE 80642
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80501: LD_ADDR_VAR 0 7
80505: PUSH
80506: LD_VAR 0 1
80510: PPUSH
80511: LD_VAR 0 6
80515: PPUSH
80516: LD_VAR 0 11
80520: PPUSH
80521: CALL_OW 272
80525: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80526: LD_ADDR_VAR 0 8
80530: PUSH
80531: LD_VAR 0 2
80535: PPUSH
80536: LD_VAR 0 6
80540: PPUSH
80541: LD_VAR 0 11
80545: PPUSH
80546: CALL_OW 273
80550: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80551: LD_VAR 0 7
80555: PPUSH
80556: LD_VAR 0 8
80560: PPUSH
80561: CALL_OW 488
80565: NOT
80566: IFFALSE 80570
// continue ;
80568: GO 80498
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80570: LD_ADDR_VAR 0 9
80574: PUSH
80575: LD_VAR 0 12
80579: PUSH
80580: LD_INT 1
80582: ARRAY
80583: PPUSH
80584: LD_VAR 0 12
80588: PUSH
80589: LD_INT 2
80591: ARRAY
80592: PPUSH
80593: LD_VAR 0 7
80597: PPUSH
80598: LD_VAR 0 8
80602: PPUSH
80603: CALL_OW 298
80607: ST_TO_ADDR
// if tmp < distance then
80608: LD_VAR 0 9
80612: PUSH
80613: LD_VAR 0 10
80617: LESS
80618: IFFALSE 80640
// begin result := i ;
80620: LD_ADDR_VAR 0 5
80624: PUSH
80625: LD_VAR 0 6
80629: ST_TO_ADDR
// distance := tmp ;
80630: LD_ADDR_VAR 0 10
80634: PUSH
80635: LD_VAR 0 9
80639: ST_TO_ADDR
// end ; end ;
80640: GO 80498
80642: POP
80643: POP
// end ;
80644: LD_VAR 0 5
80648: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80649: LD_INT 0
80651: PPUSH
80652: PPUSH
// if not driver or not IsInUnit ( driver ) then
80653: LD_VAR 0 1
80657: NOT
80658: PUSH
80659: LD_VAR 0 1
80663: PPUSH
80664: CALL_OW 310
80668: NOT
80669: OR
80670: IFFALSE 80674
// exit ;
80672: GO 80764
// vehicle := IsInUnit ( driver ) ;
80674: LD_ADDR_VAR 0 3
80678: PUSH
80679: LD_VAR 0 1
80683: PPUSH
80684: CALL_OW 310
80688: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80689: LD_VAR 0 1
80693: PPUSH
80694: LD_STRING \
80696: PUSH
80697: LD_INT 0
80699: PUSH
80700: LD_INT 0
80702: PUSH
80703: LD_INT 0
80705: PUSH
80706: LD_INT 0
80708: PUSH
80709: LD_INT 0
80711: PUSH
80712: LD_INT 0
80714: PUSH
80715: EMPTY
80716: LIST
80717: LIST
80718: LIST
80719: LIST
80720: LIST
80721: LIST
80722: LIST
80723: PUSH
80724: LD_STRING E
80726: PUSH
80727: LD_INT 0
80729: PUSH
80730: LD_INT 0
80732: PUSH
80733: LD_VAR 0 3
80737: PUSH
80738: LD_INT 0
80740: PUSH
80741: LD_INT 0
80743: PUSH
80744: LD_INT 0
80746: PUSH
80747: EMPTY
80748: LIST
80749: LIST
80750: LIST
80751: LIST
80752: LIST
80753: LIST
80754: LIST
80755: PUSH
80756: EMPTY
80757: LIST
80758: LIST
80759: PPUSH
80760: CALL_OW 446
// end ;
80764: LD_VAR 0 2
80768: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80769: LD_INT 0
80771: PPUSH
80772: PPUSH
// if not driver or not IsInUnit ( driver ) then
80773: LD_VAR 0 1
80777: NOT
80778: PUSH
80779: LD_VAR 0 1
80783: PPUSH
80784: CALL_OW 310
80788: NOT
80789: OR
80790: IFFALSE 80794
// exit ;
80792: GO 80884
// vehicle := IsInUnit ( driver ) ;
80794: LD_ADDR_VAR 0 3
80798: PUSH
80799: LD_VAR 0 1
80803: PPUSH
80804: CALL_OW 310
80808: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80809: LD_VAR 0 1
80813: PPUSH
80814: LD_STRING \
80816: PUSH
80817: LD_INT 0
80819: PUSH
80820: LD_INT 0
80822: PUSH
80823: LD_INT 0
80825: PUSH
80826: LD_INT 0
80828: PUSH
80829: LD_INT 0
80831: PUSH
80832: LD_INT 0
80834: PUSH
80835: EMPTY
80836: LIST
80837: LIST
80838: LIST
80839: LIST
80840: LIST
80841: LIST
80842: LIST
80843: PUSH
80844: LD_STRING E
80846: PUSH
80847: LD_INT 0
80849: PUSH
80850: LD_INT 0
80852: PUSH
80853: LD_VAR 0 3
80857: PUSH
80858: LD_INT 0
80860: PUSH
80861: LD_INT 0
80863: PUSH
80864: LD_INT 0
80866: PUSH
80867: EMPTY
80868: LIST
80869: LIST
80870: LIST
80871: LIST
80872: LIST
80873: LIST
80874: LIST
80875: PUSH
80876: EMPTY
80877: LIST
80878: LIST
80879: PPUSH
80880: CALL_OW 447
// end ;
80884: LD_VAR 0 2
80888: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80889: LD_INT 0
80891: PPUSH
80892: PPUSH
80893: PPUSH
// tmp := [ ] ;
80894: LD_ADDR_VAR 0 5
80898: PUSH
80899: EMPTY
80900: ST_TO_ADDR
// for i in units do
80901: LD_ADDR_VAR 0 4
80905: PUSH
80906: LD_VAR 0 1
80910: PUSH
80911: FOR_IN
80912: IFFALSE 80950
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80914: LD_ADDR_VAR 0 5
80918: PUSH
80919: LD_VAR 0 5
80923: PPUSH
80924: LD_VAR 0 5
80928: PUSH
80929: LD_INT 1
80931: PLUS
80932: PPUSH
80933: LD_VAR 0 4
80937: PPUSH
80938: CALL_OW 256
80942: PPUSH
80943: CALL_OW 2
80947: ST_TO_ADDR
80948: GO 80911
80950: POP
80951: POP
// if not tmp then
80952: LD_VAR 0 5
80956: NOT
80957: IFFALSE 80961
// exit ;
80959: GO 81009
// if asc then
80961: LD_VAR 0 2
80965: IFFALSE 80989
// result := SortListByListAsc ( units , tmp ) else
80967: LD_ADDR_VAR 0 3
80971: PUSH
80972: LD_VAR 0 1
80976: PPUSH
80977: LD_VAR 0 5
80981: PPUSH
80982: CALL_OW 76
80986: ST_TO_ADDR
80987: GO 81009
// result := SortListByListDesc ( units , tmp ) ;
80989: LD_ADDR_VAR 0 3
80993: PUSH
80994: LD_VAR 0 1
80998: PPUSH
80999: LD_VAR 0 5
81003: PPUSH
81004: CALL_OW 77
81008: ST_TO_ADDR
// end ;
81009: LD_VAR 0 3
81013: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81014: LD_INT 0
81016: PPUSH
81017: PPUSH
// task := GetTaskList ( mech ) ;
81018: LD_ADDR_VAR 0 4
81022: PUSH
81023: LD_VAR 0 1
81027: PPUSH
81028: CALL_OW 437
81032: ST_TO_ADDR
// if not task then
81033: LD_VAR 0 4
81037: NOT
81038: IFFALSE 81042
// exit ;
81040: GO 81084
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81042: LD_ADDR_VAR 0 3
81046: PUSH
81047: LD_VAR 0 4
81051: PUSH
81052: LD_INT 1
81054: ARRAY
81055: PUSH
81056: LD_INT 1
81058: ARRAY
81059: PUSH
81060: LD_STRING r
81062: EQUAL
81063: PUSH
81064: LD_VAR 0 4
81068: PUSH
81069: LD_INT 1
81071: ARRAY
81072: PUSH
81073: LD_INT 4
81075: ARRAY
81076: PUSH
81077: LD_VAR 0 2
81081: EQUAL
81082: AND
81083: ST_TO_ADDR
// end ;
81084: LD_VAR 0 3
81088: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81089: LD_INT 0
81091: PPUSH
// SetDir ( unit , d ) ;
81092: LD_VAR 0 1
81096: PPUSH
81097: LD_VAR 0 4
81101: PPUSH
81102: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
81106: LD_VAR 0 1
81110: PPUSH
81111: LD_VAR 0 2
81115: PPUSH
81116: LD_VAR 0 3
81120: PPUSH
81121: LD_VAR 0 5
81125: PPUSH
81126: CALL_OW 48
// end ;
81130: LD_VAR 0 6
81134: RET
// export function ToNaturalNumber ( number ) ; begin
81135: LD_INT 0
81137: PPUSH
// result := number div 1 ;
81138: LD_ADDR_VAR 0 2
81142: PUSH
81143: LD_VAR 0 1
81147: PUSH
81148: LD_INT 1
81150: DIV
81151: ST_TO_ADDR
// if number < 0 then
81152: LD_VAR 0 1
81156: PUSH
81157: LD_INT 0
81159: LESS
81160: IFFALSE 81170
// result := 0 ;
81162: LD_ADDR_VAR 0 2
81166: PUSH
81167: LD_INT 0
81169: ST_TO_ADDR
// end ;
81170: LD_VAR 0 2
81174: RET
// export function SortByClass ( units , class ) ; var un ; begin
81175: LD_INT 0
81177: PPUSH
81178: PPUSH
// if not units or not class then
81179: LD_VAR 0 1
81183: NOT
81184: PUSH
81185: LD_VAR 0 2
81189: NOT
81190: OR
81191: IFFALSE 81195
// exit ;
81193: GO 81290
// result := [ ] ;
81195: LD_ADDR_VAR 0 3
81199: PUSH
81200: EMPTY
81201: ST_TO_ADDR
// for un in units do
81202: LD_ADDR_VAR 0 4
81206: PUSH
81207: LD_VAR 0 1
81211: PUSH
81212: FOR_IN
81213: IFFALSE 81288
// if GetClass ( un ) = class then
81215: LD_VAR 0 4
81219: PPUSH
81220: CALL_OW 257
81224: PUSH
81225: LD_VAR 0 2
81229: EQUAL
81230: IFFALSE 81257
// result := Insert ( result , 1 , un ) else
81232: LD_ADDR_VAR 0 3
81236: PUSH
81237: LD_VAR 0 3
81241: PPUSH
81242: LD_INT 1
81244: PPUSH
81245: LD_VAR 0 4
81249: PPUSH
81250: CALL_OW 2
81254: ST_TO_ADDR
81255: GO 81286
// result := Replace ( result , result + 1 , un ) ;
81257: LD_ADDR_VAR 0 3
81261: PUSH
81262: LD_VAR 0 3
81266: PPUSH
81267: LD_VAR 0 3
81271: PUSH
81272: LD_INT 1
81274: PLUS
81275: PPUSH
81276: LD_VAR 0 4
81280: PPUSH
81281: CALL_OW 1
81285: ST_TO_ADDR
81286: GO 81212
81288: POP
81289: POP
// end ;
81290: LD_VAR 0 3
81294: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81295: LD_INT 0
81297: PPUSH
81298: PPUSH
81299: PPUSH
81300: PPUSH
81301: PPUSH
81302: PPUSH
81303: PPUSH
// result := [ ] ;
81304: LD_ADDR_VAR 0 4
81308: PUSH
81309: EMPTY
81310: ST_TO_ADDR
// if x - r < 0 then
81311: LD_VAR 0 1
81315: PUSH
81316: LD_VAR 0 3
81320: MINUS
81321: PUSH
81322: LD_INT 0
81324: LESS
81325: IFFALSE 81337
// min_x := 0 else
81327: LD_ADDR_VAR 0 8
81331: PUSH
81332: LD_INT 0
81334: ST_TO_ADDR
81335: GO 81353
// min_x := x - r ;
81337: LD_ADDR_VAR 0 8
81341: PUSH
81342: LD_VAR 0 1
81346: PUSH
81347: LD_VAR 0 3
81351: MINUS
81352: ST_TO_ADDR
// if y - r < 0 then
81353: LD_VAR 0 2
81357: PUSH
81358: LD_VAR 0 3
81362: MINUS
81363: PUSH
81364: LD_INT 0
81366: LESS
81367: IFFALSE 81379
// min_y := 0 else
81369: LD_ADDR_VAR 0 7
81373: PUSH
81374: LD_INT 0
81376: ST_TO_ADDR
81377: GO 81395
// min_y := y - r ;
81379: LD_ADDR_VAR 0 7
81383: PUSH
81384: LD_VAR 0 2
81388: PUSH
81389: LD_VAR 0 3
81393: MINUS
81394: ST_TO_ADDR
// max_x := x + r ;
81395: LD_ADDR_VAR 0 9
81399: PUSH
81400: LD_VAR 0 1
81404: PUSH
81405: LD_VAR 0 3
81409: PLUS
81410: ST_TO_ADDR
// max_y := y + r ;
81411: LD_ADDR_VAR 0 10
81415: PUSH
81416: LD_VAR 0 2
81420: PUSH
81421: LD_VAR 0 3
81425: PLUS
81426: ST_TO_ADDR
// for _x = min_x to max_x do
81427: LD_ADDR_VAR 0 5
81431: PUSH
81432: DOUBLE
81433: LD_VAR 0 8
81437: DEC
81438: ST_TO_ADDR
81439: LD_VAR 0 9
81443: PUSH
81444: FOR_TO
81445: IFFALSE 81546
// for _y = min_y to max_y do
81447: LD_ADDR_VAR 0 6
81451: PUSH
81452: DOUBLE
81453: LD_VAR 0 7
81457: DEC
81458: ST_TO_ADDR
81459: LD_VAR 0 10
81463: PUSH
81464: FOR_TO
81465: IFFALSE 81542
// begin if not ValidHex ( _x , _y ) then
81467: LD_VAR 0 5
81471: PPUSH
81472: LD_VAR 0 6
81476: PPUSH
81477: CALL_OW 488
81481: NOT
81482: IFFALSE 81486
// continue ;
81484: GO 81464
// if GetResourceTypeXY ( _x , _y ) then
81486: LD_VAR 0 5
81490: PPUSH
81491: LD_VAR 0 6
81495: PPUSH
81496: CALL_OW 283
81500: IFFALSE 81540
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81502: LD_ADDR_VAR 0 4
81506: PUSH
81507: LD_VAR 0 4
81511: PPUSH
81512: LD_VAR 0 4
81516: PUSH
81517: LD_INT 1
81519: PLUS
81520: PPUSH
81521: LD_VAR 0 5
81525: PUSH
81526: LD_VAR 0 6
81530: PUSH
81531: EMPTY
81532: LIST
81533: LIST
81534: PPUSH
81535: CALL_OW 1
81539: ST_TO_ADDR
// end ;
81540: GO 81464
81542: POP
81543: POP
81544: GO 81444
81546: POP
81547: POP
// end ;
81548: LD_VAR 0 4
81552: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81553: LD_INT 0
81555: PPUSH
81556: PPUSH
81557: PPUSH
81558: PPUSH
81559: PPUSH
81560: PPUSH
81561: PPUSH
81562: PPUSH
// if not units then
81563: LD_VAR 0 1
81567: NOT
81568: IFFALSE 81572
// exit ;
81570: GO 82096
// result := UnitFilter ( units , [ f_ok ] ) ;
81572: LD_ADDR_VAR 0 3
81576: PUSH
81577: LD_VAR 0 1
81581: PPUSH
81582: LD_INT 50
81584: PUSH
81585: EMPTY
81586: LIST
81587: PPUSH
81588: CALL_OW 72
81592: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81593: LD_ADDR_VAR 0 8
81597: PUSH
81598: LD_VAR 0 1
81602: PUSH
81603: LD_INT 1
81605: ARRAY
81606: PPUSH
81607: CALL_OW 255
81611: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81612: LD_ADDR_VAR 0 10
81616: PUSH
81617: LD_INT 29
81619: PUSH
81620: LD_INT 91
81622: PUSH
81623: LD_INT 49
81625: PUSH
81626: EMPTY
81627: LIST
81628: LIST
81629: LIST
81630: ST_TO_ADDR
// if not result then
81631: LD_VAR 0 3
81635: NOT
81636: IFFALSE 81640
// exit ;
81638: GO 82096
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81640: LD_ADDR_VAR 0 5
81644: PUSH
81645: LD_INT 81
81647: PUSH
81648: LD_VAR 0 8
81652: PUSH
81653: EMPTY
81654: LIST
81655: LIST
81656: PPUSH
81657: CALL_OW 69
81661: ST_TO_ADDR
// for i in result do
81662: LD_ADDR_VAR 0 4
81666: PUSH
81667: LD_VAR 0 3
81671: PUSH
81672: FOR_IN
81673: IFFALSE 82094
// begin tag := GetTag ( i ) + 1 ;
81675: LD_ADDR_VAR 0 9
81679: PUSH
81680: LD_VAR 0 4
81684: PPUSH
81685: CALL_OW 110
81689: PUSH
81690: LD_INT 1
81692: PLUS
81693: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81694: LD_ADDR_VAR 0 7
81698: PUSH
81699: LD_VAR 0 4
81703: PPUSH
81704: CALL_OW 250
81708: PPUSH
81709: LD_VAR 0 4
81713: PPUSH
81714: CALL_OW 251
81718: PPUSH
81719: LD_INT 6
81721: PPUSH
81722: CALL 81295 0 3
81726: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81727: LD_VAR 0 4
81731: PPUSH
81732: CALL_OW 247
81736: PUSH
81737: LD_INT 2
81739: EQUAL
81740: PUSH
81741: LD_VAR 0 7
81745: AND
81746: PUSH
81747: LD_VAR 0 4
81751: PPUSH
81752: CALL_OW 264
81756: PUSH
81757: LD_VAR 0 10
81761: IN
81762: NOT
81763: AND
81764: IFFALSE 81803
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81766: LD_VAR 0 4
81770: PPUSH
81771: LD_VAR 0 7
81775: PUSH
81776: LD_INT 1
81778: ARRAY
81779: PUSH
81780: LD_INT 1
81782: ARRAY
81783: PPUSH
81784: LD_VAR 0 7
81788: PUSH
81789: LD_INT 1
81791: ARRAY
81792: PUSH
81793: LD_INT 2
81795: ARRAY
81796: PPUSH
81797: CALL_OW 116
81801: GO 82092
// if path > tag then
81803: LD_VAR 0 2
81807: PUSH
81808: LD_VAR 0 9
81812: GREATER
81813: IFFALSE 82021
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81815: LD_ADDR_VAR 0 6
81819: PUSH
81820: LD_VAR 0 5
81824: PPUSH
81825: LD_INT 91
81827: PUSH
81828: LD_VAR 0 4
81832: PUSH
81833: LD_INT 8
81835: PUSH
81836: EMPTY
81837: LIST
81838: LIST
81839: LIST
81840: PPUSH
81841: CALL_OW 72
81845: ST_TO_ADDR
// if nearEnemy then
81846: LD_VAR 0 6
81850: IFFALSE 81919
// begin if GetWeapon ( i ) = ru_time_lapser then
81852: LD_VAR 0 4
81856: PPUSH
81857: CALL_OW 264
81861: PUSH
81862: LD_INT 49
81864: EQUAL
81865: IFFALSE 81893
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81867: LD_VAR 0 4
81871: PPUSH
81872: LD_VAR 0 6
81876: PPUSH
81877: LD_VAR 0 4
81881: PPUSH
81882: CALL_OW 74
81886: PPUSH
81887: CALL_OW 112
81891: GO 81917
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81893: LD_VAR 0 4
81897: PPUSH
81898: LD_VAR 0 6
81902: PPUSH
81903: LD_VAR 0 4
81907: PPUSH
81908: CALL_OW 74
81912: PPUSH
81913: CALL 83021 0 2
// end else
81917: GO 82019
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81919: LD_VAR 0 4
81923: PPUSH
81924: LD_VAR 0 2
81928: PUSH
81929: LD_VAR 0 9
81933: ARRAY
81934: PUSH
81935: LD_INT 1
81937: ARRAY
81938: PPUSH
81939: LD_VAR 0 2
81943: PUSH
81944: LD_VAR 0 9
81948: ARRAY
81949: PUSH
81950: LD_INT 2
81952: ARRAY
81953: PPUSH
81954: CALL_OW 297
81958: PUSH
81959: LD_INT 6
81961: GREATER
81962: IFFALSE 82005
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81964: LD_VAR 0 4
81968: PPUSH
81969: LD_VAR 0 2
81973: PUSH
81974: LD_VAR 0 9
81978: ARRAY
81979: PUSH
81980: LD_INT 1
81982: ARRAY
81983: PPUSH
81984: LD_VAR 0 2
81988: PUSH
81989: LD_VAR 0 9
81993: ARRAY
81994: PUSH
81995: LD_INT 2
81997: ARRAY
81998: PPUSH
81999: CALL_OW 114
82003: GO 82019
// SetTag ( i , tag ) ;
82005: LD_VAR 0 4
82009: PPUSH
82010: LD_VAR 0 9
82014: PPUSH
82015: CALL_OW 109
// end else
82019: GO 82092
// if enemy then
82021: LD_VAR 0 5
82025: IFFALSE 82092
// begin if GetWeapon ( i ) = ru_time_lapser then
82027: LD_VAR 0 4
82031: PPUSH
82032: CALL_OW 264
82036: PUSH
82037: LD_INT 49
82039: EQUAL
82040: IFFALSE 82068
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82042: LD_VAR 0 4
82046: PPUSH
82047: LD_VAR 0 5
82051: PPUSH
82052: LD_VAR 0 4
82056: PPUSH
82057: CALL_OW 74
82061: PPUSH
82062: CALL_OW 112
82066: GO 82092
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82068: LD_VAR 0 4
82072: PPUSH
82073: LD_VAR 0 5
82077: PPUSH
82078: LD_VAR 0 4
82082: PPUSH
82083: CALL_OW 74
82087: PPUSH
82088: CALL 83021 0 2
// end ; end ;
82092: GO 81672
82094: POP
82095: POP
// end ;
82096: LD_VAR 0 3
82100: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82101: LD_INT 0
82103: PPUSH
82104: PPUSH
82105: PPUSH
// if not unit or IsInUnit ( unit ) then
82106: LD_VAR 0 1
82110: NOT
82111: PUSH
82112: LD_VAR 0 1
82116: PPUSH
82117: CALL_OW 310
82121: OR
82122: IFFALSE 82126
// exit ;
82124: GO 82217
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82126: LD_ADDR_VAR 0 4
82130: PUSH
82131: LD_VAR 0 1
82135: PPUSH
82136: CALL_OW 250
82140: PPUSH
82141: LD_VAR 0 2
82145: PPUSH
82146: LD_INT 1
82148: PPUSH
82149: CALL_OW 272
82153: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82154: LD_ADDR_VAR 0 5
82158: PUSH
82159: LD_VAR 0 1
82163: PPUSH
82164: CALL_OW 251
82168: PPUSH
82169: LD_VAR 0 2
82173: PPUSH
82174: LD_INT 1
82176: PPUSH
82177: CALL_OW 273
82181: ST_TO_ADDR
// if ValidHex ( x , y ) then
82182: LD_VAR 0 4
82186: PPUSH
82187: LD_VAR 0 5
82191: PPUSH
82192: CALL_OW 488
82196: IFFALSE 82217
// ComTurnXY ( unit , x , y ) ;
82198: LD_VAR 0 1
82202: PPUSH
82203: LD_VAR 0 4
82207: PPUSH
82208: LD_VAR 0 5
82212: PPUSH
82213: CALL_OW 118
// end ;
82217: LD_VAR 0 3
82221: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82222: LD_INT 0
82224: PPUSH
82225: PPUSH
// result := false ;
82226: LD_ADDR_VAR 0 3
82230: PUSH
82231: LD_INT 0
82233: ST_TO_ADDR
// if not units then
82234: LD_VAR 0 2
82238: NOT
82239: IFFALSE 82243
// exit ;
82241: GO 82288
// for i in units do
82243: LD_ADDR_VAR 0 4
82247: PUSH
82248: LD_VAR 0 2
82252: PUSH
82253: FOR_IN
82254: IFFALSE 82286
// if See ( side , i ) then
82256: LD_VAR 0 1
82260: PPUSH
82261: LD_VAR 0 4
82265: PPUSH
82266: CALL_OW 292
82270: IFFALSE 82284
// begin result := true ;
82272: LD_ADDR_VAR 0 3
82276: PUSH
82277: LD_INT 1
82279: ST_TO_ADDR
// exit ;
82280: POP
82281: POP
82282: GO 82288
// end ;
82284: GO 82253
82286: POP
82287: POP
// end ;
82288: LD_VAR 0 3
82292: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82293: LD_INT 0
82295: PPUSH
82296: PPUSH
82297: PPUSH
82298: PPUSH
// if not unit or not points then
82299: LD_VAR 0 1
82303: NOT
82304: PUSH
82305: LD_VAR 0 2
82309: NOT
82310: OR
82311: IFFALSE 82315
// exit ;
82313: GO 82405
// dist := 99999 ;
82315: LD_ADDR_VAR 0 5
82319: PUSH
82320: LD_INT 99999
82322: ST_TO_ADDR
// for i in points do
82323: LD_ADDR_VAR 0 4
82327: PUSH
82328: LD_VAR 0 2
82332: PUSH
82333: FOR_IN
82334: IFFALSE 82403
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82336: LD_ADDR_VAR 0 6
82340: PUSH
82341: LD_VAR 0 1
82345: PPUSH
82346: LD_VAR 0 4
82350: PUSH
82351: LD_INT 1
82353: ARRAY
82354: PPUSH
82355: LD_VAR 0 4
82359: PUSH
82360: LD_INT 2
82362: ARRAY
82363: PPUSH
82364: CALL_OW 297
82368: ST_TO_ADDR
// if tmpDist < dist then
82369: LD_VAR 0 6
82373: PUSH
82374: LD_VAR 0 5
82378: LESS
82379: IFFALSE 82401
// begin result := i ;
82381: LD_ADDR_VAR 0 3
82385: PUSH
82386: LD_VAR 0 4
82390: ST_TO_ADDR
// dist := tmpDist ;
82391: LD_ADDR_VAR 0 5
82395: PUSH
82396: LD_VAR 0 6
82400: ST_TO_ADDR
// end ; end ;
82401: GO 82333
82403: POP
82404: POP
// end ;
82405: LD_VAR 0 3
82409: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82410: LD_INT 0
82412: PPUSH
// uc_side := side ;
82413: LD_ADDR_OWVAR 20
82417: PUSH
82418: LD_VAR 0 1
82422: ST_TO_ADDR
// uc_nation := 3 ;
82423: LD_ADDR_OWVAR 21
82427: PUSH
82428: LD_INT 3
82430: ST_TO_ADDR
// vc_chassis := 25 ;
82431: LD_ADDR_OWVAR 37
82435: PUSH
82436: LD_INT 25
82438: ST_TO_ADDR
// vc_engine := engine_siberite ;
82439: LD_ADDR_OWVAR 39
82443: PUSH
82444: LD_INT 3
82446: ST_TO_ADDR
// vc_control := control_computer ;
82447: LD_ADDR_OWVAR 38
82451: PUSH
82452: LD_INT 3
82454: ST_TO_ADDR
// vc_weapon := 59 ;
82455: LD_ADDR_OWVAR 40
82459: PUSH
82460: LD_INT 59
82462: ST_TO_ADDR
// result := CreateVehicle ;
82463: LD_ADDR_VAR 0 5
82467: PUSH
82468: CALL_OW 45
82472: ST_TO_ADDR
// SetDir ( result , d ) ;
82473: LD_VAR 0 5
82477: PPUSH
82478: LD_VAR 0 4
82482: PPUSH
82483: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82487: LD_VAR 0 5
82491: PPUSH
82492: LD_VAR 0 2
82496: PPUSH
82497: LD_VAR 0 3
82501: PPUSH
82502: LD_INT 0
82504: PPUSH
82505: CALL_OW 48
// end ;
82509: LD_VAR 0 5
82513: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82514: LD_INT 0
82516: PPUSH
82517: PPUSH
82518: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82519: LD_ADDR_VAR 0 2
82523: PUSH
82524: LD_INT 0
82526: PUSH
82527: LD_INT 0
82529: PUSH
82530: LD_INT 0
82532: PUSH
82533: LD_INT 0
82535: PUSH
82536: EMPTY
82537: LIST
82538: LIST
82539: LIST
82540: LIST
82541: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82542: LD_VAR 0 1
82546: NOT
82547: PUSH
82548: LD_VAR 0 1
82552: PPUSH
82553: CALL_OW 264
82557: PUSH
82558: LD_INT 12
82560: PUSH
82561: LD_INT 51
82563: PUSH
82564: LD_INT 32
82566: PUSH
82567: LD_INT 89
82569: PUSH
82570: EMPTY
82571: LIST
82572: LIST
82573: LIST
82574: LIST
82575: IN
82576: NOT
82577: OR
82578: IFFALSE 82582
// exit ;
82580: GO 82680
// for i := 1 to 3 do
82582: LD_ADDR_VAR 0 3
82586: PUSH
82587: DOUBLE
82588: LD_INT 1
82590: DEC
82591: ST_TO_ADDR
82592: LD_INT 3
82594: PUSH
82595: FOR_TO
82596: IFFALSE 82678
// begin tmp := GetCargo ( cargo , i ) ;
82598: LD_ADDR_VAR 0 4
82602: PUSH
82603: LD_VAR 0 1
82607: PPUSH
82608: LD_VAR 0 3
82612: PPUSH
82613: CALL_OW 289
82617: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82618: LD_ADDR_VAR 0 2
82622: PUSH
82623: LD_VAR 0 2
82627: PPUSH
82628: LD_VAR 0 3
82632: PPUSH
82633: LD_VAR 0 4
82637: PPUSH
82638: CALL_OW 1
82642: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82643: LD_ADDR_VAR 0 2
82647: PUSH
82648: LD_VAR 0 2
82652: PPUSH
82653: LD_INT 4
82655: PPUSH
82656: LD_VAR 0 2
82660: PUSH
82661: LD_INT 4
82663: ARRAY
82664: PUSH
82665: LD_VAR 0 4
82669: PLUS
82670: PPUSH
82671: CALL_OW 1
82675: ST_TO_ADDR
// end ;
82676: GO 82595
82678: POP
82679: POP
// end ;
82680: LD_VAR 0 2
82684: RET
// export function Length ( array ) ; begin
82685: LD_INT 0
82687: PPUSH
// result := array + 0 ;
82688: LD_ADDR_VAR 0 2
82692: PUSH
82693: LD_VAR 0 1
82697: PUSH
82698: LD_INT 0
82700: PLUS
82701: ST_TO_ADDR
// end ;
82702: LD_VAR 0 2
82706: RET
// export function PrepareArray ( array ) ; begin
82707: LD_INT 0
82709: PPUSH
// result := array diff 0 ;
82710: LD_ADDR_VAR 0 2
82714: PUSH
82715: LD_VAR 0 1
82719: PUSH
82720: LD_INT 0
82722: DIFF
82723: ST_TO_ADDR
// if not result [ 1 ] then
82724: LD_VAR 0 2
82728: PUSH
82729: LD_INT 1
82731: ARRAY
82732: NOT
82733: IFFALSE 82753
// result := Delete ( result , 1 ) ;
82735: LD_ADDR_VAR 0 2
82739: PUSH
82740: LD_VAR 0 2
82744: PPUSH
82745: LD_INT 1
82747: PPUSH
82748: CALL_OW 3
82752: ST_TO_ADDR
// end ;
82753: LD_VAR 0 2
82757: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82758: LD_INT 0
82760: PPUSH
82761: PPUSH
82762: PPUSH
82763: PPUSH
// sibRocketRange := 25 ;
82764: LD_ADDR_VAR 0 6
82768: PUSH
82769: LD_INT 25
82771: ST_TO_ADDR
// result := false ;
82772: LD_ADDR_VAR 0 4
82776: PUSH
82777: LD_INT 0
82779: ST_TO_ADDR
// for i := 0 to 5 do
82780: LD_ADDR_VAR 0 5
82784: PUSH
82785: DOUBLE
82786: LD_INT 0
82788: DEC
82789: ST_TO_ADDR
82790: LD_INT 5
82792: PUSH
82793: FOR_TO
82794: IFFALSE 82861
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82796: LD_VAR 0 1
82800: PPUSH
82801: LD_VAR 0 5
82805: PPUSH
82806: LD_VAR 0 6
82810: PPUSH
82811: CALL_OW 272
82815: PPUSH
82816: LD_VAR 0 2
82820: PPUSH
82821: LD_VAR 0 5
82825: PPUSH
82826: LD_VAR 0 6
82830: PPUSH
82831: CALL_OW 273
82835: PPUSH
82836: LD_VAR 0 3
82840: PPUSH
82841: CALL_OW 309
82845: IFFALSE 82859
// begin result := true ;
82847: LD_ADDR_VAR 0 4
82851: PUSH
82852: LD_INT 1
82854: ST_TO_ADDR
// exit ;
82855: POP
82856: POP
82857: GO 82863
// end ;
82859: GO 82793
82861: POP
82862: POP
// end ;
82863: LD_VAR 0 4
82867: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82868: LD_INT 0
82870: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82871: LD_VAR 0 1
82875: PPUSH
82876: LD_VAR 0 2
82880: PPUSH
82881: LD_INT 0
82883: PPUSH
82884: LD_INT 0
82886: PPUSH
82887: LD_INT 1
82889: PPUSH
82890: LD_INT 0
82892: PPUSH
82893: CALL_OW 587
// end ;
82897: LD_VAR 0 3
82901: RET
// export function CenterOnNow ( unit ) ; begin
82902: LD_INT 0
82904: PPUSH
// result := IsInUnit ( unit ) ;
82905: LD_ADDR_VAR 0 2
82909: PUSH
82910: LD_VAR 0 1
82914: PPUSH
82915: CALL_OW 310
82919: ST_TO_ADDR
// if not result then
82920: LD_VAR 0 2
82924: NOT
82925: IFFALSE 82937
// result := unit ;
82927: LD_ADDR_VAR 0 2
82931: PUSH
82932: LD_VAR 0 1
82936: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82937: LD_VAR 0 1
82941: PPUSH
82942: CALL_OW 87
// end ;
82946: LD_VAR 0 2
82950: RET
// export function ComMoveHex ( unit , hex ) ; begin
82951: LD_INT 0
82953: PPUSH
// if not hex then
82954: LD_VAR 0 2
82958: NOT
82959: IFFALSE 82963
// exit ;
82961: GO 83016
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82963: LD_VAR 0 2
82967: PUSH
82968: LD_INT 1
82970: ARRAY
82971: PPUSH
82972: LD_VAR 0 2
82976: PUSH
82977: LD_INT 2
82979: ARRAY
82980: PPUSH
82981: CALL_OW 428
82985: IFFALSE 82989
// exit ;
82987: GO 83016
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82989: LD_VAR 0 1
82993: PPUSH
82994: LD_VAR 0 2
82998: PUSH
82999: LD_INT 1
83001: ARRAY
83002: PPUSH
83003: LD_VAR 0 2
83007: PUSH
83008: LD_INT 2
83010: ARRAY
83011: PPUSH
83012: CALL_OW 111
// end ;
83016: LD_VAR 0 3
83020: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83021: LD_INT 0
83023: PPUSH
83024: PPUSH
83025: PPUSH
// if not unit or not enemy then
83026: LD_VAR 0 1
83030: NOT
83031: PUSH
83032: LD_VAR 0 2
83036: NOT
83037: OR
83038: IFFALSE 83042
// exit ;
83040: GO 83166
// x := GetX ( enemy ) ;
83042: LD_ADDR_VAR 0 4
83046: PUSH
83047: LD_VAR 0 2
83051: PPUSH
83052: CALL_OW 250
83056: ST_TO_ADDR
// y := GetY ( enemy ) ;
83057: LD_ADDR_VAR 0 5
83061: PUSH
83062: LD_VAR 0 2
83066: PPUSH
83067: CALL_OW 251
83071: ST_TO_ADDR
// if ValidHex ( x , y ) then
83072: LD_VAR 0 4
83076: PPUSH
83077: LD_VAR 0 5
83081: PPUSH
83082: CALL_OW 488
83086: IFFALSE 83166
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
83088: LD_VAR 0 2
83092: PPUSH
83093: CALL_OW 247
83097: PUSH
83098: LD_INT 3
83100: PUSH
83101: LD_INT 2
83103: PUSH
83104: EMPTY
83105: LIST
83106: LIST
83107: IN
83108: PUSH
83109: LD_VAR 0 1
83113: PPUSH
83114: CALL_OW 255
83118: PPUSH
83119: LD_VAR 0 2
83123: PPUSH
83124: CALL_OW 292
83128: AND
83129: IFFALSE 83147
// ComAttackUnit ( unit , enemy ) else
83131: LD_VAR 0 1
83135: PPUSH
83136: LD_VAR 0 2
83140: PPUSH
83141: CALL_OW 115
83145: GO 83166
// ComAgressiveMove ( unit , x , y ) ;
83147: LD_VAR 0 1
83151: PPUSH
83152: LD_VAR 0 4
83156: PPUSH
83157: LD_VAR 0 5
83161: PPUSH
83162: CALL_OW 114
// end ; end_of_file
83166: LD_VAR 0 3
83170: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83171: LD_VAR 0 1
83175: PUSH
83176: LD_INT 200
83178: DOUBLE
83179: GREATEREQUAL
83180: IFFALSE 83188
83182: LD_INT 299
83184: DOUBLE
83185: LESSEQUAL
83186: IFTRUE 83190
83188: GO 83222
83190: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83191: LD_VAR 0 1
83195: PPUSH
83196: LD_VAR 0 2
83200: PPUSH
83201: LD_VAR 0 3
83205: PPUSH
83206: LD_VAR 0 4
83210: PPUSH
83211: LD_VAR 0 5
83215: PPUSH
83216: CALL 37715 0 5
83220: GO 83299
83222: LD_INT 300
83224: DOUBLE
83225: GREATEREQUAL
83226: IFFALSE 83234
83228: LD_INT 399
83230: DOUBLE
83231: LESSEQUAL
83232: IFTRUE 83236
83234: GO 83298
83236: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83237: LD_VAR 0 1
83241: PPUSH
83242: LD_VAR 0 2
83246: PPUSH
83247: LD_VAR 0 3
83251: PPUSH
83252: LD_VAR 0 4
83256: PPUSH
83257: LD_VAR 0 5
83261: PPUSH
83262: LD_VAR 0 6
83266: PPUSH
83267: LD_VAR 0 7
83271: PPUSH
83272: LD_VAR 0 8
83276: PPUSH
83277: LD_VAR 0 9
83281: PPUSH
83282: LD_VAR 0 10
83286: PPUSH
83287: LD_VAR 0 11
83291: PPUSH
83292: CALL 34040 0 11
83296: GO 83299
83298: POP
// end ;
83299: PPOPN 11
83301: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83302: LD_VAR 0 1
83306: PPUSH
83307: LD_VAR 0 2
83311: PPUSH
83312: LD_VAR 0 3
83316: PPUSH
83317: LD_VAR 0 4
83321: PPUSH
83322: LD_VAR 0 5
83326: PPUSH
83327: CALL 37451 0 5
// end ; end_of_file
83331: PPOPN 5
83333: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83334: LD_VAR 0 1
83338: PPUSH
83339: LD_VAR 0 2
83343: PPUSH
83344: LD_VAR 0 3
83348: PPUSH
83349: LD_VAR 0 4
83353: PPUSH
83354: LD_VAR 0 5
83358: PPUSH
83359: LD_VAR 0 6
83363: PPUSH
83364: CALL 21692 0 6
// end ;
83368: PPOPN 6
83370: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83371: LD_INT 0
83373: PPUSH
// begin if not units then
83374: LD_VAR 0 1
83378: NOT
83379: IFFALSE 83383
// exit ;
83381: GO 83383
// end ;
83383: PPOPN 7
83385: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83386: CALL 21596 0 0
// end ;
83390: PPOPN 1
83392: END
