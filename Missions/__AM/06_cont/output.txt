// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7206 0 0
// CreateNature ;
  57: CALL 20560 0 0
// PrepareRussian ;
  61: CALL 5705 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 10525 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 41187 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 41187 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 41187 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 41187 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 41187 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 41187 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 41187 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 41187 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 41187 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 41187 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 41187 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: PUSH
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 21
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 70
2583: OR
2584: IFFALSE 2602
// begin area := HarrisonSupportArea2 ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 31
2593: ST_TO_ADDR
// dir := 1 ;
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// end ; uc_side = 1 ;
2602: LD_ADDR_OWVAR 20
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// uc_nation = 1 ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// vc_engine := engine_combustion ;
2618: LD_ADDR_OWVAR 39
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// vc_control := control_manual ;
2626: LD_ADDR_OWVAR 38
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2634: LD_ADDR_OWVAR 40
2638: PUSH
2639: LD_INT 4
2641: PUSH
2642: LD_INT 4
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh := CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := class_engineer ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2825: LD_ADDR_EXP 18
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 18
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine := engine_combustion ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control := control_manual ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 5
2875: PUSH
2876: LD_INT 3
2878: PUSH
2879: LD_INT 3
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_OWVAR 67
2892: ARRAY
2893: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2894: LD_ADDR_OWVAR 37
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// veh := CreateVehicle ;
2902: LD_ADDR_VAR 0 3
2906: PUSH
2907: CALL_OW 45
2911: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_VAR 0 5
2921: PPUSH
2922: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_VAR 0 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_INT 50
2950: PPUSH
2951: CALL_OW 240
// hc_class := class_soldier ;
2955: LD_ADDR_OWVAR 28
2959: PUSH
2960: LD_INT 1
2962: ST_TO_ADDR
// hc_sex := sex_female ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 2
2970: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2971: LD_ADDR_OWVAR 33
2975: PUSH
2976: LD_STRING SecondCharsGal
2978: ST_TO_ADDR
// hc_face_number := 42 ;
2979: LD_ADDR_OWVAR 34
2983: PUSH
2984: LD_INT 42
2986: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2987: LD_ADDR_OWVAR 29
2991: PUSH
2992: LD_INT 11
2994: PUSH
2995: LD_INT 10
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
3002: LD_ADDR_OWVAR 26
3006: PUSH
3007: LD_STRING Ingrid Jonsson
3009: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
3010: LD_ADDR_OWVAR 30
3014: PUSH
3015: LD_INT 1
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: LD_INT 0
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3033: LD_ADDR_OWVAR 31
3037: PUSH
3038: LD_INT 3
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: LD_INT 1
3046: PUSH
3047: LD_INT 0
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3056: LD_ADDR_EXP 19
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3066: LD_EXP 19
3070: PPUSH
3071: LD_VAR 0 3
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: LD_VAR 0 1
3084: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3091: LD_ADDR_VAR 0 4
3095: PUSH
3096: LD_INT 22
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 23
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 26
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: PUSH
3136: LD_EXP 3
3140: PUSH
3141: LD_EXP 4
3145: PUSH
3146: LD_EXP 8
3150: PUSH
3151: LD_EXP 9
3155: PUSH
3156: LD_EXP 5
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: DIFF
3168: ST_TO_ADDR
// for i in _tmp do
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 4
3178: PUSH
3179: FOR_IN
3180: IFFALSE 3221
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 32
3189: PPUSH
3190: CALL_OW 308
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 302
3204: AND
3205: IFFALSE 3219
// begin tmp := i ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// break ;
3217: GO 3221
// end ;
3219: GO 3179
3221: POP
3222: POP
// if not tmp then
3223: LD_VAR 0 3
3227: NOT
3228: IFFALSE 3240
// tmp := JMM ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_EXP 1
3239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// if IsDead ( tmp ) then
3247: LD_VAR 0 3
3251: PPUSH
3252: CALL_OW 301
3256: IFFALSE 3268
// tmp := JMM ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: LD_EXP 1
3267: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3268: LD_INT 81
3270: PUSH
3271: LD_INT 1
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 91
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: LD_INT 15
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: PUSH
3304: LD_EXP 27
3308: PUSH
3309: LD_INT 6300
3311: LESS
3312: OR
3313: IFFALSE 3240
// blockSpawn := 1 ;
3315: LD_ADDR_EXP 30
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// uc_side := 4 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 4
3330: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3331: LD_ADDR_EXP 16
3335: PUSH
3336: LD_STRING Joan
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: LD_EXP 44
3346: PPUSH
3347: CALL 41187 0 3
3351: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3352: LD_EXP 16
3356: PPUSH
3357: LD_VAR 0 3
3361: PPUSH
3362: CALL_OW 250
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL_OW 251
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 1
3382: PPUSH
3383: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3387: LD_EXP 16
3391: PPUSH
3392: LD_INT 250
3394: PPUSH
3395: CALL_OW 234
// InGameOn ;
3399: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3403: LD_EXP 16
3407: PPUSH
3408: CALL_OW 87
// wait ( 0 0$2 ) ;
3412: LD_INT 70
3414: PPUSH
3415: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3419: LD_VAR 0 3
3423: PPUSH
3424: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3428: LD_VAR 0 3
3432: PPUSH
3433: CALL_OW 122
// wait ( 0 0$1 ) ;
3437: LD_INT 35
3439: PPUSH
3440: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_EXP 16
3453: PPUSH
3454: CALL_OW 112
// wait ( 0 0$2 ) ;
3458: LD_INT 70
3460: PPUSH
3461: CALL_OW 67
// DialogueOn ;
3465: CALL_OW 6
// if tmp = JMM then
3469: LD_VAR 0 3
3473: PUSH
3474: LD_EXP 1
3478: EQUAL
3479: IFFALSE 3628
// begin ComTurnUnit ( JMM , Joan ) ;
3481: LD_EXP 1
3485: PPUSH
3486: LD_EXP 16
3490: PPUSH
3491: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3495: LD_EXP 1
3499: PPUSH
3500: LD_STRING D5b-JMM-1
3502: PPUSH
3503: CALL_OW 88
// DialogueOff ;
3507: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3511: LD_EXP 16
3515: PPUSH
3516: LD_INT 500
3518: PPUSH
3519: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3523: LD_EXP 16
3527: PPUSH
3528: LD_EXP 1
3532: PPUSH
3533: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3537: LD_EXP 1
3541: PPUSH
3542: LD_EXP 16
3546: PPUSH
3547: CALL_OW 119
// wait ( 0 0$1 ) ;
3551: LD_INT 35
3553: PPUSH
3554: CALL_OW 67
// DialogueOn ;
3558: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3562: LD_EXP 16
3566: PPUSH
3567: LD_STRING D5b-Joan-1
3569: PPUSH
3570: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3574: LD_EXP 1
3578: PPUSH
3579: LD_STRING D5b-JMM-2
3581: PPUSH
3582: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3586: LD_EXP 16
3590: PPUSH
3591: LD_STRING D5b-Joan-2
3593: PPUSH
3594: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3598: LD_EXP 1
3602: PPUSH
3603: LD_STRING D5b-JMM-3
3605: PPUSH
3606: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3610: LD_EXP 16
3614: PPUSH
3615: LD_STRING D5b-Joan-3
3617: PPUSH
3618: CALL_OW 88
// DialogueOff ;
3622: CALL_OW 7
// end else
3626: GO 3993
// begin ComTurnUnit ( tmp , Joan ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_EXP 16
3637: PPUSH
3638: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3642: LD_VAR 0 3
3646: PPUSH
3647: LD_STRING D5a-Sol1-1
3649: PPUSH
3650: CALL_OW 88
// DialogueOff ;
3654: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_INT 500
3665: PPUSH
3666: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3670: LD_EXP 16
3674: PPUSH
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3684: LD_VAR 0 3
3688: PPUSH
3689: LD_EXP 16
3693: PPUSH
3694: CALL_OW 119
// wait ( 0 0$1 ) ;
3698: LD_INT 35
3700: PPUSH
3701: CALL_OW 67
// DialogueOn ;
3705: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3709: LD_EXP 16
3713: PPUSH
3714: LD_STRING D5a-Joan-1
3716: PPUSH
3717: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_STRING D5a-Sol1-2
3728: PPUSH
3729: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3733: LD_EXP 16
3737: PPUSH
3738: LD_STRING D5a-Joan-2
3740: PPUSH
3741: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_STRING D5a-Sol1-3
3752: PPUSH
3753: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3757: LD_EXP 16
3761: PPUSH
3762: LD_STRING D5a-Joan-3
3764: PPUSH
3765: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_STRING D5a-Sol1-4
3776: PPUSH
3777: CALL_OW 88
// DialogueOff ;
3781: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3785: LD_EXP 1
3789: PUSH
3790: LD_INT 55
3792: PUSH
3793: EMPTY
3794: LIST
3795: PPUSH
3796: CALL_OW 69
3800: IN
3801: IFFALSE 3824
// begin ComMoveUnit ( JMM , Joan ) ;
3803: LD_EXP 1
3807: PPUSH
3808: LD_EXP 16
3812: PPUSH
3813: CALL_OW 112
// wait ( 0 0$05 ) ;
3817: LD_INT 175
3819: PPUSH
3820: CALL_OW 67
// end ; ComExit ( JMM ) ;
3824: LD_EXP 1
3828: PPUSH
3829: CALL 79053 0 1
// wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3840: LD_INT 35
3842: PPUSH
3843: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3847: LD_EXP 16
3851: PUSH
3852: LD_VAR 0 3
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PPUSH
3861: LD_EXP 1
3865: PPUSH
3866: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3870: LD_EXP 16
3874: PPUSH
3875: LD_EXP 1
3879: PPUSH
3880: CALL_OW 296
3884: PUSH
3885: LD_INT 5
3887: LESS
3888: IFFALSE 3840
// ComTurnUnit ( Joan , JMM ) ;
3890: LD_EXP 16
3894: PPUSH
3895: LD_EXP 1
3899: PPUSH
3900: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3904: LD_EXP 1
3908: PPUSH
3909: LD_EXP 16
3913: PPUSH
3914: CALL_OW 119
// wait ( 0 0$1 ) ;
3918: LD_INT 35
3920: PPUSH
3921: CALL_OW 67
// DialogueOn ;
3925: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3929: LD_EXP 16
3933: PPUSH
3934: LD_STRING D5a-Joan-4
3936: PPUSH
3937: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3941: LD_EXP 1
3945: PPUSH
3946: LD_STRING D5a-JMM-4
3948: PPUSH
3949: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3953: LD_EXP 16
3957: PPUSH
3958: LD_STRING D5a-Joan-5
3960: PPUSH
3961: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3965: LD_EXP 1
3969: PPUSH
3970: LD_STRING D5a-JMM-5
3972: PPUSH
3973: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3977: LD_EXP 16
3981: PPUSH
3982: LD_STRING D5a-Joan-6
3984: PPUSH
3985: CALL_OW 88
// DialogueOff ;
3989: CALL_OW 7
// end ; DialogueOn ;
3993: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3997: LD_EXP 1
4001: PPUSH
4002: LD_STRING D6-JMM-1
4004: PPUSH
4005: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4009: LD_EXP 16
4013: PPUSH
4014: LD_STRING D6-Joan-1
4016: PPUSH
4017: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4021: LD_EXP 1
4025: PPUSH
4026: LD_STRING D6-JMM-2
4028: PPUSH
4029: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4033: LD_EXP 16
4037: PPUSH
4038: LD_STRING D6-Joan-2
4040: PPUSH
4041: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4045: LD_EXP 1
4049: PPUSH
4050: LD_STRING D6-JMM-3
4052: PPUSH
4053: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4057: LD_EXP 16
4061: PPUSH
4062: LD_STRING D6-Joan-3
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING D6-JMM-4
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// InGameOff ;
4085: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4089: LD_EXP 16
4093: PPUSH
4094: LD_INT 1
4096: PPUSH
4097: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4101: LD_STRING MJ
4103: PPUSH
4104: CALL_OW 337
// joanStatus = 1 ;
4108: LD_ADDR_EXP 17
4112: PUSH
4113: LD_INT 1
4115: ST_TO_ADDR
// blockSpawn = 0 ;
4116: LD_ADDR_EXP 30
4120: PUSH
4121: LD_INT 0
4123: ST_TO_ADDR
// end ;
4124: LD_VAR 0 1
4128: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4129: LD_INT 0
4131: PPUSH
4132: PPUSH
// if not number or number > 8 then
4133: LD_VAR 0 1
4137: NOT
4138: PUSH
4139: LD_VAR 0 1
4143: PUSH
4144: LD_INT 8
4146: GREATER
4147: OR
4148: IFFALSE 4152
// exit ;
4150: GO 5700
// repeat wait ( 0 0$7 ) ;
4152: LD_INT 245
4154: PPUSH
4155: CALL_OW 67
// until blockSpawn = 0 ;
4159: LD_EXP 30
4163: PUSH
4164: LD_INT 0
4166: EQUAL
4167: IFFALSE 4152
// uc_side := 1 ;
4169: LD_ADDR_OWVAR 20
4173: PUSH
4174: LD_INT 1
4176: ST_TO_ADDR
// uc_nation := 1 ;
4177: LD_ADDR_OWVAR 21
4181: PUSH
4182: LD_INT 1
4184: ST_TO_ADDR
// InitHc ;
4185: CALL_OW 19
// if number = 1 then
4189: LD_VAR 0 1
4193: PUSH
4194: LD_INT 1
4196: EQUAL
4197: IFFALSE 4373
// begin hc_class := 3 ;
4199: LD_ADDR_OWVAR 28
4203: PUSH
4204: LD_INT 3
4206: ST_TO_ADDR
// hc_sex := sex_male ;
4207: LD_ADDR_OWVAR 27
4211: PUSH
4212: LD_INT 1
4214: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4215: LD_ADDR_OWVAR 33
4219: PUSH
4220: LD_STRING SecondCharsGal
4222: ST_TO_ADDR
// hc_face_number := 55 ;
4223: LD_ADDR_OWVAR 34
4227: PUSH
4228: LD_INT 55
4230: ST_TO_ADDR
// hc_name := George McCarthy ;
4231: LD_ADDR_OWVAR 26
4235: PUSH
4236: LD_STRING George McCarthy
4238: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4239: LD_ADDR_OWVAR 29
4243: PUSH
4244: LD_INT 11
4246: PUSH
4247: LD_INT 10
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4254: LD_ADDR_OWVAR 30
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: LD_INT 0
4264: PUSH
4265: LD_INT 2
4267: PUSH
4268: LD_INT 0
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4277: LD_ADDR_OWVAR 31
4281: PUSH
4282: LD_INT 1
4284: PUSH
4285: LD_INT 2
4287: PUSH
4288: LD_INT 3
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: ST_TO_ADDR
// un = CreateHuman ;
4300: LD_ADDR_VAR 0 3
4304: PUSH
4305: CALL_OW 44
4309: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4310: LD_VAR 0 3
4314: PPUSH
4315: LD_INT 23
4317: PPUSH
4318: LD_INT 1
4320: PPUSH
4321: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4325: LD_VAR 0 3
4329: PPUSH
4330: CALL_OW 87
// wait ( 0 0$1 ) ;
4334: LD_INT 35
4336: PPUSH
4337: CALL_OW 67
// DialogueOn ;
4341: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4345: LD_VAR 0 3
4349: PPUSH
4350: LD_STRING D11d-Sol4-1
4352: PPUSH
4353: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4357: LD_EXP 1
4361: PPUSH
4362: LD_STRING D11d-JMM-1
4364: PPUSH
4365: CALL_OW 88
// DialogueOff ;
4369: CALL_OW 7
// end ; if number = 2 then
4373: LD_VAR 0 1
4377: PUSH
4378: LD_INT 2
4380: EQUAL
4381: IFFALSE 4557
// begin hc_class := 1 ;
4383: LD_ADDR_OWVAR 28
4387: PUSH
4388: LD_INT 1
4390: ST_TO_ADDR
// hc_sex := sex_male ;
4391: LD_ADDR_OWVAR 27
4395: PUSH
4396: LD_INT 1
4398: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4399: LD_ADDR_OWVAR 33
4403: PUSH
4404: LD_STRING AmGalRemake
4406: ST_TO_ADDR
// hc_face_number := 7 ;
4407: LD_ADDR_OWVAR 34
4411: PUSH
4412: LD_INT 7
4414: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4415: LD_ADDR_OWVAR 26
4419: PUSH
4420: LD_STRING Bobby Jordan
4422: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4423: LD_ADDR_OWVAR 29
4427: PUSH
4428: LD_INT 9
4430: PUSH
4431: LD_INT 11
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4438: LD_ADDR_OWVAR 30
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: LD_INT 0
4448: PUSH
4449: LD_INT 0
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4461: LD_ADDR_OWVAR 31
4465: PUSH
4466: LD_INT 2
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// un = CreateHuman ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: CALL_OW 44
4493: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4494: LD_VAR 0 3
4498: PPUSH
4499: LD_INT 24
4501: PPUSH
4502: LD_INT 1
4504: PPUSH
4505: CALL_OW 49
// wait ( 0 0$1 ) ;
4509: LD_INT 35
4511: PPUSH
4512: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4516: LD_VAR 0 3
4520: PPUSH
4521: CALL_OW 87
// DialogueOn ;
4525: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4529: LD_VAR 0 3
4533: PPUSH
4534: LD_STRING D11b-Sol3-1
4536: PPUSH
4537: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4541: LD_EXP 1
4545: PPUSH
4546: LD_STRING D11b-JMM-1
4548: PPUSH
4549: CALL_OW 88
// DialogueOff ;
4553: CALL_OW 7
// end ; if number = 3 then
4557: LD_VAR 0 1
4561: PUSH
4562: LD_INT 3
4564: EQUAL
4565: IFFALSE 4729
// begin hc_class := 1 ;
4567: LD_ADDR_OWVAR 28
4571: PUSH
4572: LD_INT 1
4574: ST_TO_ADDR
// hc_sex := sex_male ;
4575: LD_ADDR_OWVAR 27
4579: PUSH
4580: LD_INT 1
4582: ST_TO_ADDR
// hc_gallery := DJ ;
4583: LD_ADDR_OWVAR 33
4587: PUSH
4588: LD_STRING DJ
4590: ST_TO_ADDR
// hc_face_number := 1 ;
4591: LD_ADDR_OWVAR 34
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// hc_name := Darius Dajay ;
4599: LD_ADDR_OWVAR 26
4603: PUSH
4604: LD_STRING Darius Dajay
4606: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4607: LD_ADDR_OWVAR 29
4611: PUSH
4612: LD_INT 11
4614: PUSH
4615: LD_INT 11
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4622: LD_ADDR_OWVAR 30
4626: PUSH
4627: LD_INT 2
4629: PUSH
4630: LD_INT 0
4632: PUSH
4633: LD_INT 0
4635: PUSH
4636: LD_INT 0
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4645: LD_ADDR_OWVAR 31
4649: PUSH
4650: LD_INT 4
4652: PUSH
4653: LD_INT 0
4655: PUSH
4656: LD_INT 1
4658: PUSH
4659: LD_INT 0
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: ST_TO_ADDR
// un = CreateHuman ;
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: CALL_OW 44
4677: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_INT 25
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4693: LD_VAR 0 3
4697: PPUSH
4698: CALL_OW 87
// wait ( 0 0$1 ) ;
4702: LD_INT 35
4704: PPUSH
4705: CALL_OW 67
// DialogueOn ;
4709: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4713: LD_VAR 0 3
4717: PPUSH
4718: LD_STRING D11f-Sol5-1
4720: PPUSH
4721: CALL_OW 88
// DialogueOff ;
4725: CALL_OW 7
// end ; if number = 4 then
4729: LD_VAR 0 1
4733: PUSH
4734: LD_INT 4
4736: EQUAL
4737: IFFALSE 4874
// begin hc_class := 2 ;
4739: LD_ADDR_OWVAR 28
4743: PUSH
4744: LD_INT 2
4746: ST_TO_ADDR
// hc_sex := sex_female ;
4747: LD_ADDR_OWVAR 27
4751: PUSH
4752: LD_INT 2
4754: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4755: LD_ADDR_OWVAR 33
4759: PUSH
4760: LD_STRING SecondCharsGal
4762: ST_TO_ADDR
// hc_face_number := 46 ;
4763: LD_ADDR_OWVAR 34
4767: PUSH
4768: LD_INT 46
4770: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4771: LD_ADDR_OWVAR 26
4775: PUSH
4776: LD_STRING Sylvia Creak
4778: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4779: LD_ADDR_OWVAR 29
4783: PUSH
4784: LD_INT 10
4786: PUSH
4787: LD_INT 9
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4794: LD_ADDR_OWVAR 30
4798: PUSH
4799: LD_INT 0
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: LD_INT 1
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4817: LD_ADDR_OWVAR 31
4821: PUSH
4822: LD_INT 1
4824: PUSH
4825: LD_INT 3
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: ST_TO_ADDR
// un = CreateHuman ;
4840: LD_ADDR_VAR 0 3
4844: PUSH
4845: CALL_OW 44
4849: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4850: LD_VAR 0 3
4854: PPUSH
4855: LD_INT 26
4857: PPUSH
4858: LD_INT 1
4860: PPUSH
4861: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4865: LD_VAR 0 3
4869: PPUSH
4870: CALL_OW 87
// end ; if number = 5 then
4874: LD_VAR 0 1
4878: PUSH
4879: LD_INT 5
4881: EQUAL
4882: IFFALSE 5058
// begin hc_class := 1 ;
4884: LD_ADDR_OWVAR 28
4888: PUSH
4889: LD_INT 1
4891: ST_TO_ADDR
// hc_sex := sex_female ;
4892: LD_ADDR_OWVAR 27
4896: PUSH
4897: LD_INT 2
4899: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4900: LD_ADDR_OWVAR 33
4904: PUSH
4905: LD_STRING SecondCharsGal
4907: ST_TO_ADDR
// hc_face_number := 37 ;
4908: LD_ADDR_OWVAR 34
4912: PUSH
4913: LD_INT 37
4915: ST_TO_ADDR
// hc_name := Malena Johnson ;
4916: LD_ADDR_OWVAR 26
4920: PUSH
4921: LD_STRING Malena Johnson
4923: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4924: LD_ADDR_OWVAR 29
4928: PUSH
4929: LD_INT 11
4931: PUSH
4932: LD_INT 10
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4939: LD_ADDR_OWVAR 30
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: LD_INT 1
4949: PUSH
4950: LD_INT 0
4952: PUSH
4953: LD_INT 0
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4962: LD_ADDR_OWVAR 31
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: LD_INT 1
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: ST_TO_ADDR
// un = CreateHuman ;
4985: LD_ADDR_VAR 0 3
4989: PUSH
4990: CALL_OW 44
4994: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4995: LD_VAR 0 3
4999: PPUSH
5000: LD_INT 27
5002: PPUSH
5003: LD_INT 1
5005: PPUSH
5006: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5010: LD_VAR 0 3
5014: PPUSH
5015: CALL_OW 87
// wait ( 0 0$1 ) ;
5019: LD_INT 35
5021: PPUSH
5022: CALL_OW 67
// DialogueOn ;
5026: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5030: LD_VAR 0 3
5034: PPUSH
5035: LD_STRING D11c-FSol3-1
5037: PPUSH
5038: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5042: LD_EXP 1
5046: PPUSH
5047: LD_STRING D11c-JMM-1
5049: PPUSH
5050: CALL_OW 88
// DialogueOff ;
5054: CALL_OW 7
// end ; if number = 6 then
5058: LD_VAR 0 1
5062: PUSH
5063: LD_INT 6
5065: EQUAL
5066: IFFALSE 5240
// begin hc_class := 1 ;
5068: LD_ADDR_OWVAR 28
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// hc_sex := sex_male ;
5076: LD_ADDR_OWVAR 27
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5084: LD_ADDR_OWVAR 33
5088: PUSH
5089: LD_STRING AmGalRemake
5091: ST_TO_ADDR
// hc_face_number := 1 ;
5092: LD_ADDR_OWVAR 34
5096: PUSH
5097: LD_INT 1
5099: ST_TO_ADDR
// hc_name := Charles Brown ;
5100: LD_ADDR_OWVAR 26
5104: PUSH
5105: LD_STRING Charles Brown
5107: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5108: LD_ADDR_OWVAR 29
5112: PUSH
5113: LD_INT 12
5115: PUSH
5116: LD_INT 11
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5123: LD_ADDR_OWVAR 30
5127: PUSH
5128: LD_INT 2
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: LD_INT 0
5136: PUSH
5137: LD_INT 0
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5146: LD_ADDR_OWVAR 31
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: LD_INT 0
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: ST_TO_ADDR
// un = CreateHuman ;
5169: LD_ADDR_VAR 0 3
5173: PUSH
5174: CALL_OW 44
5178: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_INT 28
5186: PPUSH
5187: LD_INT 1
5189: PPUSH
5190: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5194: LD_VAR 0 3
5198: PPUSH
5199: CALL_OW 87
// wait ( 0 0$1 ) ;
5203: LD_INT 35
5205: PPUSH
5206: CALL_OW 67
// DialogueOn ;
5210: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5214: LD_VAR 0 3
5218: PPUSH
5219: LD_STRING D4-Sol1-5
5221: PPUSH
5222: CALL_OW 88
// DialogueOff ;
5226: CALL_OW 7
// tempCharles = un ;
5230: LD_ADDR_EXP 14
5234: PUSH
5235: LD_VAR 0 3
5239: ST_TO_ADDR
// end ; if number = 7 then
5240: LD_VAR 0 1
5244: PUSH
5245: LD_INT 7
5247: EQUAL
5248: IFFALSE 5520
// begin hc_class := 1 ;
5250: LD_ADDR_OWVAR 28
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// hc_sex := sex_female ;
5258: LD_ADDR_OWVAR 27
5262: PUSH
5263: LD_INT 2
5265: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5266: LD_ADDR_OWVAR 33
5270: PUSH
5271: LD_STRING AmGalRemake
5273: ST_TO_ADDR
// hc_face_number := 2 ;
5274: LD_ADDR_OWVAR 34
5278: PUSH
5279: LD_INT 2
5281: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5282: LD_ADDR_OWVAR 26
5286: PUSH
5287: LD_STRING Rebecca Macdonald
5289: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5290: LD_ADDR_OWVAR 29
5294: PUSH
5295: LD_INT 10
5297: PUSH
5298: LD_INT 10
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5305: LD_ADDR_OWVAR 30
5309: PUSH
5310: LD_INT 1
5312: PUSH
5313: LD_INT 0
5315: PUSH
5316: LD_INT 0
5318: PUSH
5319: LD_INT 1
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5328: LD_ADDR_OWVAR 31
5332: PUSH
5333: LD_INT 1
5335: PUSH
5336: LD_INT 0
5338: PUSH
5339: LD_INT 0
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: ST_TO_ADDR
// un = CreateHuman ;
5351: LD_ADDR_VAR 0 3
5355: PUSH
5356: CALL_OW 44
5360: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5361: LD_VAR 0 3
5365: PPUSH
5366: LD_INT 29
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: CALL_OW 87
// wait ( 0 0$1 ) ;
5385: LD_INT 35
5387: PPUSH
5388: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5392: LD_INT 30
5394: PPUSH
5395: LD_INT 22
5397: PUSH
5398: LD_INT 3
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: PPUSH
5405: CALL_OW 70
5409: IFFALSE 5520
// begin DialogueOn ;
5411: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5415: LD_VAR 0 3
5419: PPUSH
5420: CALL_OW 250
5424: PPUSH
5425: LD_VAR 0 3
5429: PPUSH
5430: CALL_OW 251
5434: PPUSH
5435: LD_INT 1
5437: PPUSH
5438: LD_INT 15
5440: NEG
5441: PPUSH
5442: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5446: LD_VAR 0 3
5450: PPUSH
5451: CALL_OW 250
5455: PPUSH
5456: LD_VAR 0 3
5460: PPUSH
5461: CALL_OW 251
5465: PPUSH
5466: LD_INT 1
5468: PPUSH
5469: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5473: LD_VAR 0 3
5477: PPUSH
5478: LD_STRING D11a-FSol2-1
5480: PPUSH
5481: CALL_OW 88
// DialogueOff ;
5485: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5489: LD_INT 3
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 471
// wait ( 0 0$2 ) ;
5501: LD_INT 70
5503: PPUSH
5504: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5508: LD_INT 3
5510: PPUSH
5511: LD_VAR 0 3
5515: PPUSH
5516: CALL_OW 472
// end ; end ; if number = 8 then
5520: LD_VAR 0 1
5524: PUSH
5525: LD_INT 8
5527: EQUAL
5528: IFFALSE 5684
// begin hc_class := 1 ;
5530: LD_ADDR_OWVAR 28
5534: PUSH
5535: LD_INT 1
5537: ST_TO_ADDR
// hc_sex := sex_female ;
5538: LD_ADDR_OWVAR 27
5542: PUSH
5543: LD_INT 2
5545: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5546: LD_ADDR_OWVAR 33
5550: PUSH
5551: LD_STRING SecondCharsGal
5553: ST_TO_ADDR
// hc_face_number := 45 ;
5554: LD_ADDR_OWVAR 34
5558: PUSH
5559: LD_INT 45
5561: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5562: LD_ADDR_OWVAR 26
5566: PUSH
5567: LD_STRING Margherite Simpson
5569: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5570: LD_ADDR_OWVAR 29
5574: PUSH
5575: LD_INT 12
5577: PUSH
5578: LD_INT 10
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5585: LD_ADDR_OWVAR 30
5589: PUSH
5590: LD_INT 1
5592: PUSH
5593: LD_INT 2
5595: PUSH
5596: LD_INT 0
5598: PUSH
5599: LD_INT 0
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5608: LD_ADDR_OWVAR 31
5612: PUSH
5613: LD_INT 1
5615: PUSH
5616: LD_INT 2
5618: PUSH
5619: LD_INT 0
5621: PUSH
5622: LD_INT 1
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: ST_TO_ADDR
// un = CreateHuman ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: CALL_OW 44
5640: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_INT 33
5648: PPUSH
5649: LD_INT 1
5651: PPUSH
5652: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5656: LD_VAR 0 3
5660: PPUSH
5661: CALL_OW 87
// wait ( 0 0$1 ) ;
5665: LD_INT 35
5667: PPUSH
5668: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5672: LD_VAR 0 3
5676: PPUSH
5677: LD_STRING D11e-FSol4-1
5679: PPUSH
5680: CALL_OW 88
// end ; arrivals := arrivals union un ;
5684: LD_ADDR_EXP 45
5688: PUSH
5689: LD_EXP 45
5693: PUSH
5694: LD_VAR 0 3
5698: UNION
5699: ST_TO_ADDR
// end ; end_of_file
5700: LD_VAR 0 2
5704: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
// ruAttackers := [ ] ;
5709: LD_ADDR_EXP 48
5713: PUSH
5714: EMPTY
5715: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5716: LD_ADDR_EXP 49
5720: PUSH
5721: EMPTY
5722: ST_TO_ADDR
// if Difficulty < 3 then
5723: LD_OWVAR 67
5727: PUSH
5728: LD_INT 3
5730: LESS
5731: IFFALSE 5748
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5733: LD_INT 130
5735: PPUSH
5736: LD_INT 81
5738: PPUSH
5739: CALL_OW 428
5743: PPUSH
5744: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5748: LD_INT 3
5750: PPUSH
5751: LD_INT 3
5753: PPUSH
5754: LD_INT 2
5756: PPUSH
5757: LD_EXP 35
5761: PPUSH
5762: LD_EXP 36
5766: PPUSH
5767: CALL_OW 12
5771: PPUSH
5772: LD_INT 2
5774: PPUSH
5775: LD_INT 4
5777: PPUSH
5778: CALL 6960 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5782: LD_INT 3
5784: PPUSH
5785: LD_INT 3
5787: PPUSH
5788: LD_INT 8
5790: PPUSH
5791: LD_EXP 35
5795: PPUSH
5796: LD_EXP 36
5800: PPUSH
5801: CALL_OW 12
5805: PPUSH
5806: LD_INT 1
5808: PPUSH
5809: LD_INT 4
5811: PPUSH
5812: CALL 6960 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5816: LD_INT 3
5818: PPUSH
5819: LD_INT 3
5821: PPUSH
5822: LD_INT 67
5824: PPUSH
5825: LD_EXP 35
5829: PPUSH
5830: LD_EXP 36
5834: PPUSH
5835: CALL_OW 12
5839: PPUSH
5840: LD_INT 1
5842: PPUSH
5843: LD_INT 2
5845: PPUSH
5846: CALL 6960 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 3
5855: PPUSH
5856: LD_INT 21
5858: PPUSH
5859: LD_EXP 35
5863: PPUSH
5864: LD_EXP 36
5868: PPUSH
5869: CALL_OW 12
5873: PPUSH
5874: LD_INT 3
5876: PPUSH
5877: LD_INT 6
5879: PPUSH
5880: CALL 6960 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5884: LD_INT 3
5886: PPUSH
5887: LD_INT 3
5889: PPUSH
5890: LD_INT 17
5892: PPUSH
5893: LD_EXP 35
5897: PPUSH
5898: LD_EXP 36
5902: PPUSH
5903: CALL_OW 12
5907: PPUSH
5908: LD_INT 3
5910: PPUSH
5911: LD_INT 6
5913: PPUSH
5914: CALL 6960 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5918: LD_INT 3
5920: PPUSH
5921: LD_INT 3
5923: PPUSH
5924: LD_INT 32
5926: PPUSH
5927: LD_EXP 35
5931: PPUSH
5932: LD_EXP 36
5936: PPUSH
5937: CALL_OW 12
5941: PPUSH
5942: LD_INT 4
5944: PPUSH
5945: LD_INT 2
5947: PPUSH
5948: CALL 6960 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_INT 22
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 21
5969: PUSH
5970: LD_INT 3
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 30
5979: PUSH
5980: LD_INT 32
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL_OW 69
5996: PUSH
5997: FOR_IN
5998: IFFALSE 6038
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6000: LD_INT 3
6002: PPUSH
6003: LD_INT 3
6005: PPUSH
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_EXP 35
6015: PPUSH
6016: LD_EXP 36
6020: PPUSH
6021: CALL_OW 12
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: LD_INT 1
6031: PPUSH
6032: CALL 6960 0 6
6036: GO 5997
6038: POP
6039: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_INT 22
6047: PUSH
6048: LD_INT 3
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 21
6057: PUSH
6058: LD_INT 3
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: LD_INT 30
6067: PUSH
6068: LD_INT 31
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: PPUSH
6080: CALL_OW 69
6084: PUSH
6085: FOR_IN
6086: IFFALSE 6114
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6088: LD_EXP 35
6092: PPUSH
6093: LD_EXP 36
6097: PPUSH
6098: CALL_OW 12
6102: PPUSH
6103: LD_VAR 0 2
6107: PPUSH
6108: CALL 7070 0 2
6112: GO 6085
6114: POP
6115: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6116: LD_INT 3
6118: PPUSH
6119: LD_INT 32
6121: PPUSH
6122: LD_INT 3
6124: PPUSH
6125: CALL 7349 0 3
// end ;
6129: LD_VAR 0 1
6133: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 32
6146: PUSH
6147: LD_INT 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: IFFALSE 6239
6164: GO 6166
6166: DISABLE
6167: LD_INT 0
6169: PPUSH
// begin enable ;
6170: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6171: LD_ADDR_VAR 0 1
6175: PUSH
6176: LD_INT 22
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 32
6188: PUSH
6189: LD_INT 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PPUSH
6200: CALL_OW 69
6204: PUSH
6205: FOR_IN
6206: IFFALSE 6237
// if GetFuel ( i ) < 3 then
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 261
6217: PUSH
6218: LD_INT 3
6220: LESS
6221: IFFALSE 6235
// SetFuel ( i , 3 ) ;
6223: LD_VAR 0 1
6227: PPUSH
6228: LD_INT 3
6230: PPUSH
6231: CALL_OW 240
6235: GO 6205
6237: POP
6238: POP
// end ;
6239: PPOPN 1
6241: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6242: LD_OWVAR 67
6246: PUSH
6247: LD_INT 1
6249: GREATER
6250: IFFALSE 6819
6252: GO 6254
6254: DISABLE
6255: LD_INT 0
6257: PPUSH
6258: PPUSH
6259: PPUSH
6260: PPUSH
// begin uc_side := 3 ;
6261: LD_ADDR_OWVAR 20
6265: PUSH
6266: LD_INT 3
6268: ST_TO_ADDR
// uc_nation := 3 ;
6269: LD_ADDR_OWVAR 21
6273: PUSH
6274: LD_INT 3
6276: ST_TO_ADDR
// for i := 1 to 2 do
6277: LD_ADDR_VAR 0 1
6281: PUSH
6282: DOUBLE
6283: LD_INT 1
6285: DEC
6286: ST_TO_ADDR
6287: LD_INT 2
6289: PUSH
6290: FOR_TO
6291: IFFALSE 6405
// begin InitHC_All ( ) ;
6293: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 4
6302: PUSH
6303: LD_INT 5
6305: PUSH
6306: LD_INT 6
6308: PUSH
6309: LD_INT 6
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: LD_OWVAR 67
6322: ARRAY
6323: PPUSH
6324: CALL_OW 381
// un := CreateHuman ;
6328: LD_ADDR_VAR 0 2
6332: PUSH
6333: CALL_OW 44
6337: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6338: LD_VAR 0 2
6342: PPUSH
6343: LD_INT 91
6345: PPUSH
6346: LD_INT 87
6348: PPUSH
6349: LD_INT 3
6351: PPUSH
6352: LD_INT 0
6354: PPUSH
6355: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6359: LD_ADDR_EXP 49
6363: PUSH
6364: LD_EXP 49
6368: PPUSH
6369: LD_EXP 49
6373: PUSH
6374: LD_INT 1
6376: PLUS
6377: PPUSH
6378: LD_VAR 0 2
6382: PPUSH
6383: CALL_OW 1
6387: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6388: LD_VAR 0 2
6392: PPUSH
6393: LD_INT 46
6395: PPUSH
6396: LD_INT 78
6398: PPUSH
6399: CALL_OW 114
// end ;
6403: GO 6290
6405: POP
6406: POP
// if Difficulty > 2 then
6407: LD_OWVAR 67
6411: PUSH
6412: LD_INT 2
6414: GREATER
6415: IFFALSE 6547
// begin for i := 1 to 3 do
6417: LD_ADDR_VAR 0 1
6421: PUSH
6422: DOUBLE
6423: LD_INT 1
6425: DEC
6426: ST_TO_ADDR
6427: LD_INT 3
6429: PUSH
6430: FOR_TO
6431: IFFALSE 6545
// begin InitHC_All ( ) ;
6433: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6437: LD_INT 0
6439: PPUSH
6440: LD_INT 4
6442: PUSH
6443: LD_INT 5
6445: PUSH
6446: LD_INT 6
6448: PUSH
6449: LD_INT 6
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: PUSH
6458: LD_OWVAR 67
6462: ARRAY
6463: PPUSH
6464: CALL_OW 381
// un := CreateHuman ;
6468: LD_ADDR_VAR 0 2
6472: PUSH
6473: CALL_OW 44
6477: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6478: LD_VAR 0 2
6482: PPUSH
6483: LD_INT 91
6485: PPUSH
6486: LD_INT 87
6488: PPUSH
6489: LD_INT 3
6491: PPUSH
6492: LD_INT 0
6494: PPUSH
6495: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6499: LD_ADDR_EXP 49
6503: PUSH
6504: LD_EXP 49
6508: PPUSH
6509: LD_EXP 49
6513: PUSH
6514: LD_INT 1
6516: PLUS
6517: PPUSH
6518: LD_VAR 0 2
6522: PPUSH
6523: CALL_OW 1
6527: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6528: LD_VAR 0 2
6532: PPUSH
6533: LD_INT 89
6535: PPUSH
6536: LD_INT 148
6538: PPUSH
6539: CALL_OW 114
// end ;
6543: GO 6430
6545: POP
6546: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6547: LD_ADDR_VAR 0 3
6551: PUSH
6552: LD_INT 33
6554: PUSH
6555: LD_INT 61
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 49
6564: PUSH
6565: LD_INT 85
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 76
6574: PUSH
6575: LD_INT 99
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 81
6584: PUSH
6585: LD_INT 135
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 111
6594: PUSH
6595: LD_INT 155
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 147
6604: PUSH
6605: LD_INT 158
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6620: LD_INT 1050
6622: PPUSH
6623: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6627: LD_ADDR_VAR 0 1
6631: PUSH
6632: DOUBLE
6633: LD_INT 1
6635: DEC
6636: ST_TO_ADDR
6637: LD_EXP 49
6641: PUSH
6642: FOR_TO
6643: IFFALSE 6810
// begin un := ruAttackersInForest [ i ] ;
6645: LD_ADDR_VAR 0 2
6649: PUSH
6650: LD_EXP 49
6654: PUSH
6655: LD_VAR 0 1
6659: ARRAY
6660: ST_TO_ADDR
// tag := GetTag ( un ) ;
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: LD_VAR 0 2
6670: PPUSH
6671: CALL_OW 110
6675: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6676: LD_VAR 0 2
6680: PPUSH
6681: CALL_OW 302
6685: PUSH
6686: LD_VAR 0 2
6690: PPUSH
6691: CALL_OW 314
6695: NOT
6696: AND
6697: IFFALSE 6808
// begin if tag <> i then
6699: LD_VAR 0 4
6703: PUSH
6704: LD_VAR 0 1
6708: NONEQUAL
6709: IFFALSE 6737
// begin SetTag ( un , i ) ;
6711: LD_VAR 0 2
6715: PPUSH
6716: LD_VAR 0 1
6720: PPUSH
6721: CALL_OW 109
// tag := i ;
6725: LD_ADDR_VAR 0 4
6729: PUSH
6730: LD_VAR 0 1
6734: ST_TO_ADDR
// end else
6735: GO 6769
// begin SetTag ( un , i + 1 ) ;
6737: LD_VAR 0 2
6741: PPUSH
6742: LD_VAR 0 1
6746: PUSH
6747: LD_INT 1
6749: PLUS
6750: PPUSH
6751: CALL_OW 109
// tag := i + 1 ;
6755: LD_ADDR_VAR 0 4
6759: PUSH
6760: LD_VAR 0 1
6764: PUSH
6765: LD_INT 1
6767: PLUS
6768: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6769: LD_VAR 0 2
6773: PPUSH
6774: LD_VAR 0 3
6778: PUSH
6779: LD_VAR 0 4
6783: ARRAY
6784: PUSH
6785: LD_INT 1
6787: ARRAY
6788: PPUSH
6789: LD_VAR 0 3
6793: PUSH
6794: LD_VAR 0 4
6798: ARRAY
6799: PUSH
6800: LD_INT 2
6802: ARRAY
6803: PPUSH
6804: CALL_OW 114
// end ; end ;
6808: GO 6642
6810: POP
6811: POP
// until not ruAttackersInForest ;
6812: LD_EXP 49
6816: NOT
6817: IFFALSE 6620
// end ; end_of_file
6819: PPOPN 4
6821: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6822: LD_INT 0
6824: PPUSH
6825: PPUSH
6826: PPUSH
// if not characters then
6827: LD_VAR 0 1
6831: NOT
6832: IFFALSE 6836
// exit ;
6834: GO 6915
// speaker := characters [ rand ( 1 , characters ) ] ;
6836: LD_ADDR_VAR 0 6
6840: PUSH
6841: LD_VAR 0 1
6845: PUSH
6846: LD_INT 1
6848: PPUSH
6849: LD_VAR 0 1
6853: PPUSH
6854: CALL_OW 12
6858: ARRAY
6859: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6860: LD_VAR 0 6
6864: PPUSH
6865: CALL_OW 258
6869: PUSH
6870: LD_INT 1
6872: EQUAL
6873: IFFALSE 6891
// Say ( speaker , dialogMID ) else
6875: LD_VAR 0 6
6879: PPUSH
6880: LD_VAR 0 2
6884: PPUSH
6885: CALL_OW 88
6889: GO 6905
// Say ( speaker , dialogFID ) ;
6891: LD_VAR 0 6
6895: PPUSH
6896: LD_VAR 0 3
6900: PPUSH
6901: CALL_OW 88
// result := speaker ;
6905: LD_ADDR_VAR 0 4
6909: PUSH
6910: LD_VAR 0 6
6914: ST_TO_ADDR
// end ;
6915: LD_VAR 0 4
6919: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6920: LD_INT 0
6922: PPUSH
6923: PPUSH
// for i in charactersList do
6924: LD_ADDR_VAR 0 4
6928: PUSH
6929: LD_VAR 0 1
6933: PUSH
6934: FOR_IN
6935: IFFALSE 6953
// SaveCharacters ( i , ident ) ;
6937: LD_VAR 0 4
6941: PPUSH
6942: LD_VAR 0 2
6946: PPUSH
6947: CALL_OW 38
6951: GO 6934
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 3
6959: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
// for i = 1 to count do
6966: LD_ADDR_VAR 0 8
6970: PUSH
6971: DOUBLE
6972: LD_INT 1
6974: DEC
6975: ST_TO_ADDR
6976: LD_VAR 0 6
6980: PUSH
6981: FOR_TO
6982: IFFALSE 7063
// begin uc_side = side ;
6984: LD_ADDR_OWVAR 20
6988: PUSH
6989: LD_VAR 0 1
6993: ST_TO_ADDR
// uc_nation = nation ;
6994: LD_ADDR_OWVAR 21
6998: PUSH
6999: LD_VAR 0 2
7003: ST_TO_ADDR
// hc_gallery =  ;
7004: LD_ADDR_OWVAR 33
7008: PUSH
7009: LD_STRING 
7011: ST_TO_ADDR
// hc_name =  ;
7012: LD_ADDR_OWVAR 26
7016: PUSH
7017: LD_STRING 
7019: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7020: LD_INT 0
7022: PPUSH
7023: LD_VAR 0 5
7027: PPUSH
7028: LD_VAR 0 4
7032: PPUSH
7033: CALL_OW 380
// un = CreateHuman ;
7037: LD_ADDR_VAR 0 10
7041: PUSH
7042: CALL_OW 44
7046: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7047: LD_VAR 0 10
7051: PPUSH
7052: LD_VAR 0 3
7056: PPUSH
7057: CALL_OW 52
// end ;
7061: GO 6981
7063: POP
7064: POP
// end ;
7065: LD_VAR 0 7
7069: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7070: LD_INT 0
7072: PPUSH
7073: PPUSH
7074: PPUSH
// uc_side := GetSide ( b ) ;
7075: LD_ADDR_OWVAR 20
7079: PUSH
7080: LD_VAR 0 2
7084: PPUSH
7085: CALL_OW 255
7089: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7090: LD_ADDR_OWVAR 21
7094: PUSH
7095: LD_VAR 0 2
7099: PPUSH
7100: CALL_OW 248
7104: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7105: LD_INT 0
7107: PPUSH
7108: LD_INT 1
7110: PPUSH
7111: LD_VAR 0 1
7115: PPUSH
7116: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7120: LD_ADDR_VAR 0 5
7124: PUSH
7125: LD_VAR 0 2
7129: PPUSH
7130: CALL_OW 254
7134: PUSH
7135: LD_INT 3
7137: MINUS
7138: ST_TO_ADDR
// if dir < 0 then
7139: LD_VAR 0 5
7143: PUSH
7144: LD_INT 0
7146: LESS
7147: IFFALSE 7163
// dir := 6 + dir ;
7149: LD_ADDR_VAR 0 5
7153: PUSH
7154: LD_INT 6
7156: PUSH
7157: LD_VAR 0 5
7161: PLUS
7162: ST_TO_ADDR
// un := CreateHuman ;
7163: LD_ADDR_VAR 0 4
7167: PUSH
7168: CALL_OW 44
7172: ST_TO_ADDR
// SetDir ( un , dir ) ;
7173: LD_VAR 0 4
7177: PPUSH
7178: LD_VAR 0 5
7182: PPUSH
7183: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7187: LD_VAR 0 4
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: CALL_OW 52
// end ;
7201: LD_VAR 0 3
7205: RET
// export function PrepareDifficulty ; begin
7206: LD_INT 0
7208: PPUSH
// case Difficulty of 1 :
7209: LD_OWVAR 67
7213: PUSH
7214: LD_INT 1
7216: DOUBLE
7217: EQUAL
7218: IFTRUE 7222
7220: GO 7241
7222: POP
// begin RuSolMinLevel = 2 ;
7223: LD_ADDR_EXP 35
7227: PUSH
7228: LD_INT 2
7230: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7231: LD_ADDR_EXP 36
7235: PUSH
7236: LD_INT 3
7238: ST_TO_ADDR
// end ; 2 :
7239: GO 7302
7241: LD_INT 2
7243: DOUBLE
7244: EQUAL
7245: IFTRUE 7249
7247: GO 7268
7249: POP
// begin RuSolMinLevel = 3 ;
7250: LD_ADDR_EXP 35
7254: PUSH
7255: LD_INT 3
7257: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7258: LD_ADDR_EXP 36
7262: PUSH
7263: LD_INT 5
7265: ST_TO_ADDR
// end ; 3 .. 4 :
7266: GO 7302
7268: LD_INT 3
7270: DOUBLE
7271: GREATEREQUAL
7272: IFFALSE 7280
7274: LD_INT 4
7276: DOUBLE
7277: LESSEQUAL
7278: IFTRUE 7282
7280: GO 7301
7282: POP
// begin RuSolMinLevel = 4 ;
7283: LD_ADDR_EXP 35
7287: PUSH
7288: LD_INT 4
7290: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7291: LD_ADDR_EXP 36
7295: PUSH
7296: LD_INT 6
7298: ST_TO_ADDR
// end ; end ;
7299: GO 7302
7301: POP
// end ;
7302: LD_VAR 0 1
7306: RET
// export function ShowQuery1 ; begin
7307: LD_INT 0
7309: PPUSH
// result := Query ( QKill ) ;
7310: LD_ADDR_VAR 0 1
7314: PUSH
7315: LD_STRING QKill
7317: PPUSH
7318: CALL_OW 97
7322: ST_TO_ADDR
// end ;
7323: LD_VAR 0 1
7327: RET
// export function ShowQuery2 ; begin
7328: LD_INT 0
7330: PPUSH
// result := Query ( QKill2 ) ;
7331: LD_ADDR_VAR 0 1
7335: PUSH
7336: LD_STRING QKill2
7338: PPUSH
7339: CALL_OW 97
7343: ST_TO_ADDR
// end ;
7344: LD_VAR 0 1
7348: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7349: LD_INT 0
7351: PPUSH
7352: PPUSH
7353: PPUSH
7354: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
7355: LD_ADDR_VAR 0 7
7359: PUSH
7360: LD_INT 48
7362: PUSH
7363: LD_INT 49
7365: PUSH
7366: LD_INT 50
7368: PUSH
7369: LD_INT 20
7371: PUSH
7372: LD_INT 1
7374: PUSH
7375: LD_INT 51
7377: PUSH
7378: LD_INT 52
7380: PUSH
7381: LD_INT 69
7383: PUSH
7384: LD_INT 39
7386: PUSH
7387: LD_INT 34
7389: PUSH
7390: LD_INT 40
7392: PUSH
7393: LD_INT 53
7395: PUSH
7396: LD_INT 71
7398: PUSH
7399: LD_INT 57
7401: PUSH
7402: LD_INT 58
7404: PUSH
7405: LD_INT 44
7407: PUSH
7408: LD_INT 32
7410: PUSH
7411: LD_INT 27
7413: PUSH
7414: LD_INT 23
7416: PUSH
7417: LD_INT 33
7419: PUSH
7420: LD_INT 59
7422: PUSH
7423: LD_INT 54
7425: PUSH
7426: LD_INT 55
7428: PUSH
7429: LD_INT 56
7431: PUSH
7432: LD_INT 63
7434: PUSH
7435: LD_INT 64
7437: PUSH
7438: LD_INT 65
7440: PUSH
7441: LD_INT 30
7443: PUSH
7444: LD_INT 31
7446: PUSH
7447: LD_INT 21
7449: PUSH
7450: LD_INT 22
7452: PUSH
7453: LD_INT 25
7455: PUSH
7456: LD_INT 82
7458: PUSH
7459: LD_INT 83
7461: PUSH
7462: LD_INT 84
7464: PUSH
7465: LD_INT 85
7467: PUSH
7468: LD_INT 86
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: ST_TO_ADDR
// for i = 1 to list do
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: DOUBLE
7516: LD_INT 1
7518: DEC
7519: ST_TO_ADDR
7520: LD_VAR 0 7
7524: PUSH
7525: FOR_TO
7526: IFFALSE 7598
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7528: LD_VAR 0 7
7532: PUSH
7533: LD_VAR 0 5
7537: ARRAY
7538: PPUSH
7539: LD_VAR 0 1
7543: PPUSH
7544: CALL_OW 321
7548: PUSH
7549: LD_INT 1
7551: EQUAL
7552: PUSH
7553: LD_VAR 0 7
7557: PUSH
7558: LD_VAR 0 5
7562: ARRAY
7563: PPUSH
7564: LD_VAR 0 3
7568: PPUSH
7569: CALL_OW 482
7573: AND
7574: IFFALSE 7596
// AddComResearch ( lab , list [ i ] ) ;
7576: LD_VAR 0 2
7580: PPUSH
7581: LD_VAR 0 7
7585: PUSH
7586: LD_VAR 0 5
7590: ARRAY
7591: PPUSH
7592: CALL_OW 184
7596: GO 7525
7598: POP
7599: POP
// end ;
7600: LD_VAR 0 4
7604: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7605: LD_INT 0
7607: PPUSH
7608: PPUSH
7609: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7610: LD_INT 22
7612: PUSH
7613: LD_VAR 0 1
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 2
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 69
7640: PUSH
7641: LD_VAR 0 3
7645: LESSEQUAL
7646: IFFALSE 7754
// begin for i = 1 to vehCount do
7648: LD_ADDR_VAR 0 9
7652: PUSH
7653: DOUBLE
7654: LD_INT 1
7656: DEC
7657: ST_TO_ADDR
7658: LD_VAR 0 3
7662: PUSH
7663: FOR_TO
7664: IFFALSE 7752
// begin weapon := weaponTab [ i ] ;
7666: LD_ADDR_VAR 0 10
7670: PUSH
7671: LD_VAR 0 4
7675: PUSH
7676: LD_VAR 0 9
7680: ARRAY
7681: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7682: LD_VAR 0 10
7686: PUSH
7687: LD_INT 46
7689: EQUAL
7690: IFFALSE 7721
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7692: LD_VAR 0 2
7696: PPUSH
7697: LD_INT 24
7699: PPUSH
7700: LD_VAR 0 5
7704: PPUSH
7705: LD_VAR 0 6
7709: PPUSH
7710: LD_VAR 0 10
7714: PPUSH
7715: CALL_OW 185
7719: GO 7750
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7721: LD_VAR 0 2
7725: PPUSH
7726: LD_VAR 0 7
7730: PPUSH
7731: LD_VAR 0 5
7735: PPUSH
7736: LD_VAR 0 6
7740: PPUSH
7741: LD_VAR 0 10
7745: PPUSH
7746: CALL_OW 185
// end ;
7750: GO 7663
7752: POP
7753: POP
// end ; end ;
7754: LD_VAR 0 8
7758: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7759: LD_INT 0
7761: PPUSH
7762: PPUSH
7763: PPUSH
7764: PPUSH
7765: PPUSH
7766: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7767: LD_ADDR_VAR 0 8
7771: PUSH
7772: LD_VAR 0 2
7776: PPUSH
7777: CALL_OW 313
7781: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7782: LD_ADDR_VAR 0 9
7786: PUSH
7787: LD_VAR 0 3
7791: PPUSH
7792: LD_INT 22
7794: PUSH
7795: LD_VAR 0 1
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: LD_INT 25
7806: PUSH
7807: LD_INT 2
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: LD_INT 24
7816: PUSH
7817: LD_INT 750
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 3
7826: PUSH
7827: LD_INT 54
7829: PUSH
7830: EMPTY
7831: LIST
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: PPUSH
7843: CALL_OW 70
7847: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7848: LD_ADDR_VAR 0 6
7852: PUSH
7853: LD_VAR 0 3
7857: PPUSH
7858: LD_INT 22
7860: PUSH
7861: LD_VAR 0 1
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: LD_INT 21
7872: PUSH
7873: LD_INT 3
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 3
7882: PUSH
7883: LD_INT 24
7885: PUSH
7886: LD_INT 1000
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: PPUSH
7905: CALL_OW 70
7909: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7910: LD_VAR 0 6
7914: NOT
7915: PUSH
7916: LD_INT 22
7918: PUSH
7919: LD_VAR 0 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 25
7930: PUSH
7931: LD_INT 2
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 24
7940: PUSH
7941: LD_INT 250
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: PPUSH
7953: CALL_OW 69
7957: NOT
7958: AND
7959: IFFALSE 7963
// exit ;
7961: GO 8121
// if buildingsList and engineerOkInside then
7963: LD_VAR 0 6
7967: PUSH
7968: LD_VAR 0 8
7972: AND
7973: IFFALSE 7984
// ComExitBuilding ( engineerOkInside ) ;
7975: LD_VAR 0 8
7979: PPUSH
7980: CALL_OW 122
// if buildingsList and engineerOkOutside then
7984: LD_VAR 0 6
7988: PUSH
7989: LD_VAR 0 9
7993: AND
7994: IFFALSE 8014
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7996: LD_VAR 0 9
8000: PPUSH
8001: LD_VAR 0 6
8005: PUSH
8006: LD_INT 1
8008: ARRAY
8009: PPUSH
8010: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8014: LD_VAR 0 6
8018: PUSH
8019: LD_INT 0
8021: EQUAL
8022: PUSH
8023: LD_VAR 0 4
8027: PUSH
8028: LD_INT 0
8030: EQUAL
8031: AND
8032: PUSH
8033: LD_VAR 0 9
8037: AND
8038: IFFALSE 8054
// ComEnterUnit ( engineerOkOutside , depot ) ;
8040: LD_VAR 0 9
8044: PPUSH
8045: LD_VAR 0 2
8049: PPUSH
8050: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8054: LD_VAR 0 9
8058: PUSH
8059: LD_VAR 0 6
8063: PUSH
8064: LD_INT 0
8066: EQUAL
8067: AND
8068: PUSH
8069: LD_VAR 0 4
8073: AND
8074: IFFALSE 8121
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8076: LD_VAR 0 9
8080: PPUSH
8081: LD_VAR 0 4
8085: PUSH
8086: LD_INT 1
8088: ARRAY
8089: PPUSH
8090: LD_VAR 0 4
8094: PUSH
8095: LD_INT 2
8097: ARRAY
8098: PPUSH
8099: LD_VAR 0 4
8103: PUSH
8104: LD_INT 3
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 4
8112: PUSH
8113: LD_INT 4
8115: ARRAY
8116: PPUSH
8117: CALL_OW 145
// end ;
8121: LD_VAR 0 5
8125: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8126: LD_INT 0
8128: PPUSH
8129: PPUSH
8130: PPUSH
8131: PPUSH
8132: PPUSH
8133: PPUSH
8134: PPUSH
8135: PPUSH
8136: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8137: LD_ADDR_VAR 0 6
8141: PUSH
8142: LD_INT 22
8144: PUSH
8145: LD_VAR 0 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 25
8156: PUSH
8157: LD_INT 4
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 23
8166: PUSH
8167: LD_INT 2
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: LD_INT 24
8176: PUSH
8177: LD_INT 251
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: PPUSH
8190: CALL_OW 69
8194: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8195: LD_ADDR_VAR 0 7
8199: PUSH
8200: LD_VAR 0 3
8204: PPUSH
8205: LD_INT 22
8207: PUSH
8208: LD_VAR 0 1
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: LD_INT 23
8219: PUSH
8220: LD_INT 2
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 25
8229: PUSH
8230: LD_INT 4
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: LD_INT 50
8239: PUSH
8240: EMPTY
8241: LIST
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: PPUSH
8249: CALL_OW 70
8253: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8254: LD_ADDR_VAR 0 10
8258: PUSH
8259: LD_VAR 0 3
8263: PPUSH
8264: LD_INT 22
8266: PUSH
8267: LD_VAR 0 1
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: LD_INT 21
8278: PUSH
8279: LD_INT 1
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PUSH
8286: LD_INT 3
8288: PUSH
8289: LD_INT 25
8291: PUSH
8292: LD_INT 3
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: LD_INT 3
8305: PUSH
8306: LD_INT 24
8308: PUSH
8309: LD_INT 750
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: PPUSH
8326: CALL_OW 70
8330: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8331: LD_ADDR_VAR 0 11
8335: PUSH
8336: LD_VAR 0 2
8340: PPUSH
8341: LD_INT 22
8343: PUSH
8344: LD_VAR 0 1
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 21
8355: PUSH
8356: LD_INT 1
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 3
8365: PUSH
8366: LD_INT 25
8368: PUSH
8369: LD_INT 3
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: LD_INT 24
8385: PUSH
8386: LD_INT 1000
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 70
8407: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8408: LD_VAR 0 10
8412: NOT
8413: PUSH
8414: LD_VAR 0 11
8418: NOT
8419: AND
8420: PUSH
8421: LD_VAR 0 6
8425: NOT
8426: AND
8427: IFFALSE 8431
// exit ;
8429: GO 8637
// if damageUnits and sci_list then
8431: LD_VAR 0 10
8435: PUSH
8436: LD_VAR 0 6
8440: AND
8441: IFFALSE 8457
// ComMoveToArea ( damageUnits , healArea ) ;
8443: LD_VAR 0 10
8447: PPUSH
8448: LD_VAR 0 2
8452: PPUSH
8453: CALL_OW 113
// if unitsToHeal and sci_list then
8457: LD_VAR 0 11
8461: PUSH
8462: LD_VAR 0 6
8466: AND
8467: IFFALSE 8478
// ComExitBuilding ( sci_list ) ;
8469: LD_VAR 0 6
8473: PPUSH
8474: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8478: LD_VAR 0 11
8482: PUSH
8483: LD_VAR 0 7
8487: AND
8488: IFFALSE 8508
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8490: LD_VAR 0 7
8494: PPUSH
8495: LD_VAR 0 11
8499: PUSH
8500: LD_INT 1
8502: ARRAY
8503: PPUSH
8504: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8508: LD_VAR 0 10
8512: PUSH
8513: LD_INT 0
8515: EQUAL
8516: PUSH
8517: LD_VAR 0 11
8521: PUSH
8522: LD_INT 0
8524: EQUAL
8525: AND
8526: PUSH
8527: LD_VAR 0 7
8531: AND
8532: IFFALSE 8637
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8534: LD_ADDR_VAR 0 12
8538: PUSH
8539: LD_INT 22
8541: PUSH
8542: LD_VAR 0 1
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 21
8553: PUSH
8554: LD_INT 3
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 30
8563: PUSH
8564: LD_INT 8
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: PPUSH
8576: CALL_OW 69
8580: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8581: LD_ADDR_VAR 0 13
8585: PUSH
8586: LD_INT 1
8588: PPUSH
8589: LD_VAR 0 12
8593: PPUSH
8594: CALL_OW 12
8598: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8599: LD_VAR 0 7
8603: PPUSH
8604: LD_INT 3
8606: PUSH
8607: LD_INT 60
8609: PUSH
8610: EMPTY
8611: LIST
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PPUSH
8617: CALL_OW 72
8621: PPUSH
8622: LD_VAR 0 12
8626: PUSH
8627: LD_VAR 0 13
8631: ARRAY
8632: PPUSH
8633: CALL_OW 120
// end ; end ;
8637: LD_VAR 0 5
8641: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8642: LD_INT 0
8644: PPUSH
8645: PPUSH
8646: PPUSH
8647: PPUSH
8648: PPUSH
// tmp := [ ] ;
8649: LD_ADDR_VAR 0 6
8653: PUSH
8654: EMPTY
8655: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8656: LD_ADDR_VAR 0 7
8660: PUSH
8661: LD_INT 22
8663: PUSH
8664: LD_VAR 0 1
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 30
8675: PUSH
8676: LD_INT 32
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PPUSH
8687: CALL_OW 69
8691: ST_TO_ADDR
// if bunkers then
8692: LD_VAR 0 7
8696: IFFALSE 8766
// for i in bunkers do
8698: LD_ADDR_VAR 0 4
8702: PUSH
8703: LD_VAR 0 7
8707: PUSH
8708: FOR_IN
8709: IFFALSE 8764
// for j in UnitsInside ( i ) do
8711: LD_ADDR_VAR 0 5
8715: PUSH
8716: LD_VAR 0 4
8720: PPUSH
8721: CALL_OW 313
8725: PUSH
8726: FOR_IN
8727: IFFALSE 8760
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8729: LD_ADDR_VAR 0 6
8733: PUSH
8734: LD_VAR 0 6
8738: PPUSH
8739: LD_VAR 0 6
8743: PUSH
8744: LD_INT 1
8746: PLUS
8747: PPUSH
8748: LD_VAR 0 5
8752: PPUSH
8753: CALL_OW 1
8757: ST_TO_ADDR
8758: GO 8726
8760: POP
8761: POP
8762: GO 8708
8764: POP
8765: POP
// if tmp then
8766: LD_VAR 0 6
8770: IFFALSE 8810
// begin ComExitBuilding ( tmp ) ;
8772: LD_VAR 0 6
8776: PPUSH
8777: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8781: LD_VAR 0 6
8785: PPUSH
8786: LD_VAR 0 2
8790: PPUSH
8791: CALL_OW 250
8795: PPUSH
8796: LD_VAR 0 2
8800: PPUSH
8801: CALL_OW 251
8805: PPUSH
8806: CALL_OW 174
// end ; end ;
8810: LD_VAR 0 3
8814: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8815: LD_INT 0
8817: PPUSH
8818: PPUSH
8819: PPUSH
// enable ;
8820: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8821: LD_ADDR_VAR 0 6
8825: PUSH
8826: LD_VAR 0 3
8830: PPUSH
8831: CALL_OW 435
8835: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8836: LD_ADDR_VAR 0 5
8840: PUSH
8841: LD_INT 22
8843: PUSH
8844: LD_VAR 0 1
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 34
8855: PUSH
8856: LD_VAR 0 2
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PPUSH
8869: CALL_OW 69
8873: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8874: LD_VAR 0 5
8878: PUSH
8879: LD_VAR 0 3
8883: PPUSH
8884: CALL_OW 435
8888: AND
8889: PUSH
8890: LD_VAR 0 6
8894: AND
8895: IFFALSE 8928
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8897: LD_VAR 0 5
8901: PUSH
8902: LD_INT 1
8904: ARRAY
8905: PPUSH
8906: LD_VAR 0 6
8910: PUSH
8911: LD_INT 1
8913: ARRAY
8914: PPUSH
8915: LD_VAR 0 6
8919: PUSH
8920: LD_INT 2
8922: ARRAY
8923: PPUSH
8924: CALL_OW 177
// end ;
8928: LD_VAR 0 4
8932: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8933: LD_INT 0
8935: PPUSH
8936: PPUSH
8937: PPUSH
8938: PPUSH
8939: PPUSH
8940: PPUSH
8941: PPUSH
8942: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8943: LD_ADDR_VAR 0 6
8947: PUSH
8948: LD_VAR 0 2
8952: PPUSH
8953: LD_INT 22
8955: PUSH
8956: LD_VAR 0 1
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: LD_INT 56
8967: PUSH
8968: EMPTY
8969: LIST
8970: PUSH
8971: LD_INT 24
8973: PUSH
8974: LD_INT 700
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: LD_INT 3
8983: PUSH
8984: LD_INT 60
8986: PUSH
8987: EMPTY
8988: LIST
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 2
8996: PUSH
8997: LD_INT 25
8999: PUSH
9000: LD_INT 1
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 25
9009: PUSH
9010: LD_INT 5
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: LD_INT 25
9019: PUSH
9020: LD_INT 8
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 25
9029: PUSH
9030: LD_INT 9
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 70
9055: PUSH
9056: LD_EXP 48
9060: PUSH
9061: LD_EXP 49
9065: UNION
9066: DIFF
9067: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9068: LD_ADDR_VAR 0 7
9072: PUSH
9073: LD_VAR 0 2
9077: PPUSH
9078: LD_INT 22
9080: PUSH
9081: LD_VAR 0 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 30
9092: PUSH
9093: LD_INT 32
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 58
9102: PUSH
9103: EMPTY
9104: LIST
9105: PUSH
9106: LD_INT 24
9108: PUSH
9109: LD_INT 251
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: PPUSH
9122: CALL_OW 70
9126: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9127: LD_ADDR_VAR 0 9
9131: PUSH
9132: LD_VAR 0 2
9136: PPUSH
9137: LD_INT 22
9139: PUSH
9140: LD_VAR 0 1
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 2
9151: PUSH
9152: LD_INT 30
9154: PUSH
9155: LD_INT 4
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: LD_INT 30
9164: PUSH
9165: LD_INT 5
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: LIST
9176: PUSH
9177: LD_INT 24
9179: PUSH
9180: LD_INT 251
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: LIST
9191: PPUSH
9192: CALL_OW 70
9196: ST_TO_ADDR
// if barrackList then
9197: LD_VAR 0 9
9201: IFFALSE 9357
// begin if turretList = 0 then
9203: LD_VAR 0 7
9207: PUSH
9208: LD_INT 0
9210: EQUAL
9211: IFFALSE 9249
// begin if soldiersList then
9213: LD_VAR 0 6
9217: IFFALSE 9247
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9219: LD_VAR 0 6
9223: PPUSH
9224: LD_VAR 0 9
9228: PUSH
9229: LD_INT 1
9231: PPUSH
9232: LD_VAR 0 9
9236: PPUSH
9237: CALL_OW 12
9241: ARRAY
9242: PPUSH
9243: CALL_OW 120
// end else
9247: GO 9357
// begin for i in barrackList do
9249: LD_ADDR_VAR 0 4
9253: PUSH
9254: LD_VAR 0 9
9258: PUSH
9259: FOR_IN
9260: IFFALSE 9355
// begin if not turretList then
9262: LD_VAR 0 7
9266: NOT
9267: IFFALSE 9273
// exit ;
9269: POP
9270: POP
9271: GO 9357
// insideUnits = UnitsInside ( i ) ;
9273: LD_ADDR_VAR 0 10
9277: PUSH
9278: LD_VAR 0 4
9282: PPUSH
9283: CALL_OW 313
9287: ST_TO_ADDR
// if insideUnits then
9288: LD_VAR 0 10
9292: IFFALSE 9353
// begin tmp := insideUnits [ 1 ] ;
9294: LD_ADDR_VAR 0 8
9298: PUSH
9299: LD_VAR 0 10
9303: PUSH
9304: LD_INT 1
9306: ARRAY
9307: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9308: LD_VAR 0 8
9312: PPUSH
9313: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9317: LD_VAR 0 8
9321: PPUSH
9322: LD_VAR 0 7
9326: PUSH
9327: LD_INT 1
9329: ARRAY
9330: PPUSH
9331: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9335: LD_ADDR_VAR 0 7
9339: PUSH
9340: LD_VAR 0 7
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 3
9352: ST_TO_ADDR
// end ; end ;
9353: GO 9259
9355: POP
9356: POP
// end ; end ; end ;
9357: LD_VAR 0 3
9361: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9362: LD_INT 0
9364: PPUSH
9365: PPUSH
9366: PPUSH
9367: PPUSH
9368: PPUSH
9369: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9370: LD_ADDR_VAR 0 8
9374: PUSH
9375: LD_INT 22
9377: PUSH
9378: LD_VAR 0 1
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 21
9389: PUSH
9390: LD_INT 2
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: LD_INT 34
9399: PUSH
9400: LD_INT 52
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: LIST
9411: PPUSH
9412: CALL_OW 69
9416: ST_TO_ADDR
// if not craneList then
9417: LD_VAR 0 8
9421: NOT
9422: IFFALSE 9426
// exit ;
9424: GO 9860
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9426: LD_ADDR_VAR 0 9
9430: PUSH
9431: LD_INT 22
9433: PUSH
9434: LD_VAR 0 1
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 21
9445: PUSH
9446: LD_INT 3
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 3
9455: PUSH
9456: LD_INT 24
9458: PUSH
9459: LD_INT 1000
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: PPUSH
9478: CALL_OW 69
9482: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9483: LD_VAR 0 9
9487: PUSH
9488: LD_VAR 0 8
9492: PPUSH
9493: LD_INT 24
9495: PUSH
9496: LD_INT 750
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PPUSH
9503: CALL_OW 72
9507: AND
9508: IFFALSE 9543
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9510: LD_VAR 0 8
9514: PPUSH
9515: LD_INT 24
9517: PUSH
9518: LD_INT 750
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PPUSH
9525: CALL_OW 72
9529: PPUSH
9530: LD_VAR 0 9
9534: PUSH
9535: LD_INT 1
9537: ARRAY
9538: PPUSH
9539: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9543: LD_VAR 0 8
9547: PPUSH
9548: LD_INT 3
9550: PUSH
9551: LD_INT 24
9553: PUSH
9554: LD_INT 750
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PPUSH
9565: CALL_OW 72
9569: IFFALSE 9607
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9571: LD_VAR 0 8
9575: PPUSH
9576: LD_INT 3
9578: PUSH
9579: LD_INT 24
9581: PUSH
9582: LD_INT 750
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 72
9597: PPUSH
9598: LD_VAR 0 2
9602: PPUSH
9603: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9607: LD_VAR 0 8
9611: PUSH
9612: LD_VAR 0 9
9616: PUSH
9617: LD_INT 0
9619: EQUAL
9620: AND
9621: PUSH
9622: LD_VAR 0 3
9626: AND
9627: IFFALSE 9674
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9629: LD_VAR 0 8
9633: PPUSH
9634: LD_VAR 0 3
9638: PUSH
9639: LD_INT 1
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 3
9647: PUSH
9648: LD_INT 2
9650: ARRAY
9651: PPUSH
9652: LD_VAR 0 3
9656: PUSH
9657: LD_INT 3
9659: ARRAY
9660: PPUSH
9661: LD_VAR 0 3
9665: PUSH
9666: LD_INT 4
9668: ARRAY
9669: PPUSH
9670: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9674: LD_ADDR_VAR 0 7
9678: PUSH
9679: LD_VAR 0 2
9683: PPUSH
9684: LD_INT 22
9686: PUSH
9687: LD_VAR 0 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 21
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 34
9708: PUSH
9709: LD_INT 52
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: LD_INT 3
9718: PUSH
9719: LD_INT 24
9721: PUSH
9722: LD_INT 750
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: PPUSH
9739: CALL_OW 70
9743: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9744: LD_ADDR_VAR 0 6
9748: PUSH
9749: LD_VAR 0 2
9753: PPUSH
9754: LD_INT 22
9756: PUSH
9757: LD_VAR 0 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 2
9768: PUSH
9769: LD_INT 30
9771: PUSH
9772: LD_INT 0
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: LD_INT 30
9781: PUSH
9782: LD_INT 1
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PPUSH
9798: CALL_OW 70
9802: ST_TO_ADDR
// if crane then
9803: LD_VAR 0 7
9807: IFFALSE 9860
// for i in crane do
9809: LD_ADDR_VAR 0 5
9813: PUSH
9814: LD_VAR 0 7
9818: PUSH
9819: FOR_IN
9820: IFFALSE 9858
// begin if dep then
9822: LD_VAR 0 6
9826: IFFALSE 9842
// ComMoveUnit ( i , dep ) ;
9828: LD_VAR 0 5
9832: PPUSH
9833: LD_VAR 0 6
9837: PPUSH
9838: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9842: LD_VAR 0 5
9846: PPUSH
9847: CALL_OW 311
9851: PPUSH
9852: CALL 80475 0 1
// end ;
9856: GO 9819
9858: POP
9859: POP
// end ;
9860: LD_VAR 0 4
9864: RET
// export function BuildBulldozer ; begin
9865: LD_INT 0
9867: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
9868: LD_INT 17
9870: PPUSH
9871: CALL_OW 302
9875: NOT
9876: PUSH
9877: LD_INT 17
9879: PPUSH
9880: CALL_OW 255
9884: PUSH
9885: LD_INT 3
9887: NONEQUAL
9888: OR
9889: IFFALSE 9893
// exit ;
9891: GO 9912
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
9893: LD_INT 17
9895: PPUSH
9896: LD_INT 24
9898: PPUSH
9899: LD_INT 1
9901: PPUSH
9902: LD_INT 1
9904: PPUSH
9905: LD_INT 53
9907: PPUSH
9908: CALL_OW 185
// end ;
9912: LD_VAR 0 1
9916: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
9917: LD_INT 0
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
9923: PPUSH
// if not bulldozer then
9924: LD_VAR 0 1
9928: NOT
9929: IFFALSE 9933
// exit ;
9931: GO 10215
// list := ListEnvironmentArea ( area ) ;
9933: LD_ADDR_VAR 0 5
9937: PUSH
9938: LD_VAR 0 2
9942: PPUSH
9943: CALL_OW 353
9947: ST_TO_ADDR
// tmp := [ ] ;
9948: LD_ADDR_VAR 0 6
9952: PUSH
9953: EMPTY
9954: ST_TO_ADDR
// for i = 1 to list do
9955: LD_ADDR_VAR 0 4
9959: PUSH
9960: DOUBLE
9961: LD_INT 1
9963: DEC
9964: ST_TO_ADDR
9965: LD_VAR 0 5
9969: PUSH
9970: FOR_TO
9971: IFFALSE 10069
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
9973: LD_VAR 0 5
9977: PUSH
9978: LD_VAR 0 4
9982: ARRAY
9983: PUSH
9984: LD_INT 1
9986: ARRAY
9987: PPUSH
9988: LD_VAR 0 5
9992: PUSH
9993: LD_VAR 0 4
9997: ARRAY
9998: PUSH
9999: LD_INT 2
10001: ARRAY
10002: PPUSH
10003: CALL_OW 554
10007: IFFALSE 10067
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10009: LD_ADDR_VAR 0 6
10013: PUSH
10014: LD_VAR 0 6
10018: PPUSH
10019: LD_VAR 0 6
10023: PUSH
10024: LD_INT 1
10026: PLUS
10027: PPUSH
10028: LD_VAR 0 5
10032: PUSH
10033: LD_VAR 0 4
10037: ARRAY
10038: PUSH
10039: LD_INT 1
10041: ARRAY
10042: PUSH
10043: LD_VAR 0 5
10047: PUSH
10048: LD_VAR 0 4
10052: ARRAY
10053: PUSH
10054: LD_INT 2
10056: ARRAY
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: CALL_OW 1
10066: ST_TO_ADDR
// end ;
10067: GO 9970
10069: POP
10070: POP
// ComStop ( bulldozer ) ;
10071: LD_VAR 0 1
10075: PPUSH
10076: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10080: LD_ADDR_VAR 0 7
10084: PUSH
10085: LD_VAR 0 1
10089: PPUSH
10090: CALL_OW 250
10094: PUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 251
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: ST_TO_ADDR
// for i = tmp downto 1 do
10109: LD_ADDR_VAR 0 4
10113: PUSH
10114: DOUBLE
10115: LD_VAR 0 6
10119: INC
10120: ST_TO_ADDR
10121: LD_INT 1
10123: PUSH
10124: FOR_DOWNTO
10125: IFFALSE 10213
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10127: LD_ADDR_VAR 0 7
10131: PUSH
10132: LD_VAR 0 7
10136: PUSH
10137: LD_INT 1
10139: ARRAY
10140: PPUSH
10141: LD_VAR 0 7
10145: PUSH
10146: LD_INT 2
10148: ARRAY
10149: PPUSH
10150: LD_VAR 0 6
10154: PPUSH
10155: CALL 10316 0 3
10159: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10160: LD_VAR 0 1
10164: PPUSH
10165: LD_VAR 0 7
10169: PUSH
10170: LD_INT 1
10172: ARRAY
10173: PPUSH
10174: LD_VAR 0 7
10178: PUSH
10179: LD_INT 2
10181: ARRAY
10182: PPUSH
10183: CALL 10220 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10187: LD_ADDR_VAR 0 6
10191: PUSH
10192: LD_VAR 0 6
10196: PPUSH
10197: LD_VAR 0 7
10201: PUSH
10202: LD_INT 3
10204: ARRAY
10205: PPUSH
10206: CALL_OW 3
10210: ST_TO_ADDR
// end ;
10211: GO 10124
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 3
10219: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10220: LD_INT 0
10222: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10223: LD_VAR 0 2
10227: PPUSH
10228: LD_VAR 0 3
10232: PPUSH
10233: CALL_OW 351
10237: PUSH
10238: LD_VAR 0 2
10242: PPUSH
10243: LD_VAR 0 3
10247: PPUSH
10248: CALL_OW 554
10252: AND
10253: PUSH
10254: LD_VAR 0 2
10258: PPUSH
10259: LD_VAR 0 3
10263: PPUSH
10264: CALL_OW 488
10268: AND
10269: PUSH
10270: LD_VAR 0 2
10274: PPUSH
10275: LD_VAR 0 3
10279: PPUSH
10280: CALL_OW 428
10284: PUSH
10285: LD_INT 1
10287: NEG
10288: EQUAL
10289: AND
10290: IFFALSE 10311
// AddComMoveXY ( bulldozer , x , y ) ;
10292: LD_VAR 0 1
10296: PPUSH
10297: LD_VAR 0 2
10301: PPUSH
10302: LD_VAR 0 3
10306: PPUSH
10307: CALL_OW 171
// end ;
10311: LD_VAR 0 4
10315: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
10316: LD_INT 0
10318: PPUSH
10319: PPUSH
10320: PPUSH
10321: PPUSH
10322: PPUSH
10323: PPUSH
10324: PPUSH
// dist := 99999 ;
10325: LD_ADDR_VAR 0 6
10329: PUSH
10330: LD_INT 99999
10332: ST_TO_ADDR
// for i = 1 to list do
10333: LD_ADDR_VAR 0 5
10337: PUSH
10338: DOUBLE
10339: LD_INT 1
10341: DEC
10342: ST_TO_ADDR
10343: LD_VAR 0 3
10347: PUSH
10348: FOR_TO
10349: IFFALSE 10487
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
10351: LD_ADDR_VAR 0 7
10355: PUSH
10356: LD_VAR 0 1
10360: PPUSH
10361: LD_VAR 0 2
10365: PPUSH
10366: LD_VAR 0 3
10370: PUSH
10371: LD_VAR 0 5
10375: ARRAY
10376: PUSH
10377: LD_INT 1
10379: ARRAY
10380: PPUSH
10381: LD_VAR 0 3
10385: PUSH
10386: LD_VAR 0 5
10390: ARRAY
10391: PUSH
10392: LD_INT 2
10394: ARRAY
10395: PPUSH
10396: CALL_OW 298
10400: ST_TO_ADDR
// if d = 0 then
10401: LD_VAR 0 7
10405: PUSH
10406: LD_INT 0
10408: EQUAL
10409: IFFALSE 10413
// continue ;
10411: GO 10348
// if d < dist then
10413: LD_VAR 0 7
10417: PUSH
10418: LD_VAR 0 6
10422: LESS
10423: IFFALSE 10485
// begin _x := list [ i ] [ 1 ] ;
10425: LD_ADDR_VAR 0 8
10429: PUSH
10430: LD_VAR 0 3
10434: PUSH
10435: LD_VAR 0 5
10439: ARRAY
10440: PUSH
10441: LD_INT 1
10443: ARRAY
10444: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
10445: LD_ADDR_VAR 0 9
10449: PUSH
10450: LD_VAR 0 3
10454: PUSH
10455: LD_VAR 0 5
10459: ARRAY
10460: PUSH
10461: LD_INT 2
10463: ARRAY
10464: ST_TO_ADDR
// _i := i ;
10465: LD_ADDR_VAR 0 10
10469: PUSH
10470: LD_VAR 0 5
10474: ST_TO_ADDR
// dist := d ;
10475: LD_ADDR_VAR 0 6
10479: PUSH
10480: LD_VAR 0 7
10484: ST_TO_ADDR
// end ; end ;
10485: GO 10348
10487: POP
10488: POP
// result := [ _x , _y , _i , dist ] ;
10489: LD_ADDR_VAR 0 4
10493: PUSH
10494: LD_VAR 0 8
10498: PUSH
10499: LD_VAR 0 9
10503: PUSH
10504: LD_VAR 0 10
10508: PUSH
10509: LD_VAR 0 6
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: ST_TO_ADDR
// end ; end_of_file
10520: LD_VAR 0 4
10524: RET
// export function Action ; begin
10525: LD_INT 0
10527: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
10528: LD_INT 66
10530: PPUSH
10531: LD_INT 4
10533: PPUSH
10534: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10538: LD_INT 22
10540: PUSH
10541: LD_INT 1
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 25
10550: PUSH
10551: LD_INT 2
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PPUSH
10562: CALL_OW 69
10566: PUSH
10567: LD_INT 0
10569: EQUAL
10570: IFFALSE 10584
// SetClass ( JMM , 2 ) ;
10572: LD_EXP 1
10576: PPUSH
10577: LD_INT 2
10579: PPUSH
10580: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10584: LD_STRING M1
10586: PPUSH
10587: CALL_OW 337
// case Difficulty of 1 :
10591: LD_OWVAR 67
10595: PUSH
10596: LD_INT 1
10598: DOUBLE
10599: EQUAL
10600: IFTRUE 10604
10602: GO 10614
10604: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10605: LD_STRING M1-1
10607: PPUSH
10608: CALL_OW 337
10612: GO 10657
10614: LD_INT 2
10616: DOUBLE
10617: EQUAL
10618: IFTRUE 10622
10620: GO 10632
10622: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 .. 4 :
10623: LD_STRING M1-2
10625: PPUSH
10626: CALL_OW 337
10630: GO 10657
10632: LD_INT 3
10634: DOUBLE
10635: GREATEREQUAL
10636: IFFALSE 10644
10638: LD_INT 4
10640: DOUBLE
10641: LESSEQUAL
10642: IFTRUE 10646
10644: GO 10656
10646: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10647: LD_STRING M1-3
10649: PPUSH
10650: CALL_OW 337
10654: GO 10657
10656: POP
// ChangeMissionObjectives ( M1cont ) ;
10657: LD_STRING M1cont
10659: PPUSH
10660: CALL_OW 337
// SaveForQuickRestart ;
10664: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
10668: LD_INT 525
10670: PPUSH
10671: LD_INT 700
10673: PPUSH
10674: CALL_OW 12
10678: PPUSH
10679: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
10683: LD_INT 5
10685: PPUSH
10686: LD_INT 82
10688: PPUSH
10689: LD_INT 38
10691: PPUSH
10692: LD_INT 10
10694: PPUSH
10695: LD_INT 1
10697: PPUSH
10698: CALL_OW 56
// wait ( 0 0$14 ) ;
10702: LD_INT 490
10704: PPUSH
10705: CALL_OW 67
// firstCrateSpawn := true ;
10709: LD_ADDR_EXP 41
10713: PUSH
10714: LD_INT 1
10716: ST_TO_ADDR
// end ;
10717: LD_VAR 0 1
10721: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
10722: LD_EXP 41
10726: IFFALSE 11115
10728: GO 10730
10730: DISABLE
10731: LD_INT 0
10733: PPUSH
// begin if IsOk ( Lisa ) then
10734: LD_EXP 2
10738: PPUSH
10739: CALL_OW 302
10743: IFFALSE 10759
// Say ( Lisa , DR0-Lisa-1 ) else
10745: LD_EXP 2
10749: PPUSH
10750: LD_STRING DR0-Lisa-1
10752: PPUSH
10753: CALL_OW 88
10757: GO 10905
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10759: LD_INT 22
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 21
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 26
10781: PUSH
10782: LD_INT 1
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 2
10791: PUSH
10792: LD_INT 25
10794: PUSH
10795: LD_INT 1
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: LD_INT 25
10804: PUSH
10805: LD_INT 2
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 25
10814: PUSH
10815: LD_INT 3
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 25
10824: PUSH
10825: LD_INT 4
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: PPUSH
10845: CALL_OW 69
10849: PUSH
10850: LD_EXP 1
10854: PUSH
10855: LD_EXP 8
10859: PUSH
10860: LD_EXP 5
10864: PUSH
10865: LD_EXP 6
10869: PUSH
10870: LD_EXP 7
10874: PUSH
10875: LD_EXP 4
10879: PUSH
10880: LD_EXP 3
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: DIFF
10894: PPUSH
10895: LD_STRING DR0-Sol1-1
10897: PPUSH
10898: LD_STRING DR0-Sol1-1
10900: PPUSH
10901: CALL 6822 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10905: LD_ADDR_VAR 0 1
10909: PUSH
10910: LD_INT 22
10912: PUSH
10913: LD_INT 1
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 21
10922: PUSH
10923: LD_INT 1
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: LD_INT 26
10932: PUSH
10933: LD_INT 1
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 2
10942: PUSH
10943: LD_INT 25
10945: PUSH
10946: LD_INT 1
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 25
10955: PUSH
10956: LD_INT 2
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 25
10965: PUSH
10966: LD_INT 3
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 25
10975: PUSH
10976: LD_INT 4
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: PPUSH
10996: CALL_OW 69
11000: PUSH
11001: LD_EXP 1
11005: PUSH
11006: LD_EXP 8
11010: PUSH
11011: LD_EXP 5
11015: PUSH
11016: LD_EXP 2
11020: PUSH
11021: LD_EXP 6
11025: PUSH
11026: LD_EXP 7
11030: PUSH
11031: LD_EXP 4
11035: PUSH
11036: LD_EXP 3
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: DIFF
11051: PPUSH
11052: LD_STRING DR0-Sol2-1
11054: PPUSH
11055: LD_STRING DR0-Sol2-1
11057: PPUSH
11058: CALL 6822 0 3
11062: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11063: LD_EXP 4
11067: PPUSH
11068: CALL_OW 302
11072: IFFALSE 11086
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11074: LD_EXP 4
11078: PPUSH
11079: LD_STRING DR0-Cyrus-1
11081: PPUSH
11082: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11086: LD_EXP 2
11090: PPUSH
11091: CALL_OW 302
11095: PUSH
11096: LD_VAR 0 1
11100: OR
11101: IFFALSE 11115
// Say ( JMM , DR0-JMM-1 ) ;
11103: LD_EXP 1
11107: PPUSH
11108: LD_STRING DR0-JMM-1
11110: PPUSH
11111: CALL_OW 88
// end ;
11115: PPOPN 1
11117: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11118: LD_EXP 5
11122: PPUSH
11123: CALL_OW 302
11127: PUSH
11128: LD_INT 22
11130: PUSH
11131: LD_INT 1
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: LD_INT 25
11140: PUSH
11141: LD_INT 16
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: PPUSH
11152: CALL_OW 69
11156: PUSH
11157: LD_INT 0
11159: GREATER
11160: AND
11161: PUSH
11162: LD_INT 1
11164: PPUSH
11165: CALL_OW 463
11169: NOT
11170: AND
11171: IFFALSE 11449
11173: GO 11175
11175: DISABLE
// begin DialogueOn ;
11176: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11180: LD_EXP 5
11184: PPUSH
11185: LD_STRING D10-Frank-1
11187: PPUSH
11188: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11192: LD_INT 22
11194: PUSH
11195: LD_INT 1
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: LD_INT 21
11204: PUSH
11205: LD_INT 1
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PUSH
11212: LD_INT 2
11214: PUSH
11215: LD_INT 25
11217: PUSH
11218: LD_INT 1
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 25
11227: PUSH
11228: LD_INT 2
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 25
11237: PUSH
11238: LD_INT 3
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: LD_INT 25
11247: PUSH
11248: LD_INT 4
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: LIST
11266: PPUSH
11267: CALL_OW 69
11271: PUSH
11272: LD_EXP 1
11276: PUSH
11277: LD_EXP 5
11281: PUSH
11282: LD_EXP 2
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: DIFF
11292: PPUSH
11293: LD_STRING D10-Sol1-1
11295: PPUSH
11296: LD_STRING D10-FSol1-1
11298: PPUSH
11299: CALL 6822 0 3
// Say ( Frank , D10-Frank-2 ) ;
11303: LD_EXP 5
11307: PPUSH
11308: LD_STRING D10-Frank-2
11310: PPUSH
11311: CALL_OW 88
// if IsOk ( Lisa ) then
11315: LD_EXP 2
11319: PPUSH
11320: CALL_OW 302
11324: IFFALSE 11340
// Say ( Lisa , D10-Lisa-2 ) else
11326: LD_EXP 2
11330: PPUSH
11331: LD_STRING D10-Lisa-2
11333: PPUSH
11334: CALL_OW 88
11338: GO 11445
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11340: LD_INT 22
11342: PUSH
11343: LD_INT 1
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PUSH
11350: LD_INT 21
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: LD_INT 2
11362: PUSH
11363: LD_INT 25
11365: PUSH
11366: LD_INT 1
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 25
11375: PUSH
11376: LD_INT 2
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 25
11385: PUSH
11386: LD_INT 3
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 25
11395: PUSH
11396: LD_INT 4
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: LIST
11414: PPUSH
11415: CALL_OW 69
11419: PUSH
11420: LD_EXP 1
11424: PUSH
11425: LD_EXP 5
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: DIFF
11434: PPUSH
11435: LD_STRING D10-Sol1-2
11437: PPUSH
11438: LD_STRING D10-FSol1-2
11440: PPUSH
11441: CALL 6822 0 3
// DialogueOff ;
11445: CALL_OW 7
// end ;
11449: END
// every 10 10$30 trigger not InBattle ( 1 ) do
11450: LD_INT 1
11452: PPUSH
11453: CALL_OW 463
11457: NOT
11458: IFFALSE 11741
11460: GO 11462
11462: DISABLE
// begin HarrisonSupport ;
11463: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11467: LD_EXP 18
11471: PPUSH
11472: CALL_OW 310
11476: PPUSH
11477: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11481: LD_EXP 18
11485: PPUSH
11486: LD_STRING DEng-Eng1-1
11488: PPUSH
11489: CALL_OW 88
// wait ( 1 1$0 ) ;
11493: LD_INT 2100
11495: PPUSH
11496: CALL_OW 67
// DialogueOn ;
11500: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11504: LD_EXP 15
11508: PPUSH
11509: LD_STRING DRem-Har-1
11511: PPUSH
11512: CALL_OW 94
// if contactWithRussian then
11516: LD_EXP 23
11520: IFFALSE 11536
// Say ( JMM , DRem-JMM-1 ) else
11522: LD_EXP 1
11526: PPUSH
11527: LD_STRING DRem-JMM-1
11529: PPUSH
11530: CALL_OW 88
11534: GO 11548
// Say ( JMM , DRem-JMM-1a ) ;
11536: LD_EXP 1
11540: PPUSH
11541: LD_STRING DRem-JMM-1a
11543: PPUSH
11544: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
11548: LD_EXP 15
11552: PPUSH
11553: LD_STRING DRem-Har-2
11555: PPUSH
11556: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11560: LD_STRING DenisInDelta
11562: PPUSH
11563: LD_INT 0
11565: PPUSH
11566: CALL_OW 30
11570: IFFALSE 11586
// Say ( JMM , DRem-JMM-2 ) else
11572: LD_EXP 1
11576: PPUSH
11577: LD_STRING DRem-JMM-2
11579: PPUSH
11580: CALL_OW 88
11584: GO 11598
// Say ( JMM , DRem-JMM-2a ) ;
11586: LD_EXP 1
11590: PPUSH
11591: LD_STRING DRem-JMM-2a
11593: PPUSH
11594: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
11598: LD_EXP 15
11602: PPUSH
11603: LD_STRING DRem-Har-3
11605: PPUSH
11606: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11610: LD_EXP 1
11614: PPUSH
11615: LD_STRING DRem-JMM-3
11617: PPUSH
11618: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11622: LD_EXP 15
11626: PPUSH
11627: LD_STRING DRem-Har-4
11629: PPUSH
11630: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11634: LD_STRING DenisInDelta
11636: PPUSH
11637: LD_INT 0
11639: PPUSH
11640: CALL_OW 30
11644: IFFALSE 11704
// begin Say ( JMM , DRem-JMM-4 ) ;
11646: LD_EXP 1
11650: PPUSH
11651: LD_STRING DRem-JMM-4
11653: PPUSH
11654: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11658: LD_EXP 15
11662: PPUSH
11663: LD_STRING DRem-Har-5
11665: PPUSH
11666: CALL_OW 94
// DialogueOff ;
11670: CALL_OW 7
// wait ( 4 4$00 ) ;
11674: LD_INT 8400
11676: PPUSH
11677: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11681: LD_INT 35
11683: PPUSH
11684: CALL_OW 67
// until not InBattle ( 1 ) ;
11688: LD_INT 1
11690: PPUSH
11691: CALL_OW 463
11695: NOT
11696: IFFALSE 11681
// SpawnDenis ;
11698: CALL 11742 0 0
// end else
11702: GO 11741
// begin DialogueOff ;
11704: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11708: LD_INT 36
11710: PPUSH
11711: LD_INT 1
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11721: LD_INT 15
11723: PPUSH
11724: LD_INT 1
11726: PPUSH
11727: LD_INT 1
11729: PPUSH
11730: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11734: LD_STRING MR
11736: PPUSH
11737: CALL_OW 337
// end ; end ;
11741: END
// export function SpawnDenis ; var tmp ; begin
11742: LD_INT 0
11744: PPUSH
11745: PPUSH
// PrepareDenis ;
11746: CALL 2244 0 0
// if not Denis then
11750: LD_EXP 9
11754: NOT
11755: IFFALSE 11759
// exit ;
11757: GO 11980
// CenterNowOnUnits ( Denis ) ;
11759: LD_EXP 9
11763: PPUSH
11764: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11768: LD_ADDR_VAR 0 2
11772: PUSH
11773: LD_INT 22
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PPUSH
11783: CALL_OW 69
11787: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11788: LD_EXP 9
11792: PPUSH
11793: LD_VAR 0 2
11797: PPUSH
11798: LD_EXP 9
11802: PPUSH
11803: CALL_OW 74
11807: PPUSH
11808: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11812: LD_INT 35
11814: PPUSH
11815: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11819: LD_INT 22
11821: PUSH
11822: LD_INT 1
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: LD_INT 91
11831: PUSH
11832: LD_EXP 9
11836: PUSH
11837: LD_INT 10
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PPUSH
11849: CALL_OW 69
11853: IFFALSE 11812
// SetSide ( Denis , 1 ) ;
11855: LD_EXP 9
11859: PPUSH
11860: LD_INT 1
11862: PPUSH
11863: CALL_OW 235
// DialogueOn ;
11867: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11871: LD_EXP 9
11875: PPUSH
11876: LD_STRING DDen-Den-1
11878: PPUSH
11879: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11883: LD_EXP 1
11887: PPUSH
11888: LD_STRING DDen-JMM-1
11890: PPUSH
11891: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11895: LD_EXP 9
11899: PPUSH
11900: LD_STRING DDen-Den-2
11902: PPUSH
11903: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11907: LD_EXP 1
11911: PPUSH
11912: LD_STRING DDen-JMM-2
11914: PPUSH
11915: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11919: LD_EXP 9
11923: PPUSH
11924: LD_STRING DDen-Den-3
11926: PPUSH
11927: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11931: LD_EXP 1
11935: PPUSH
11936: LD_STRING DDen-JMM-3
11938: PPUSH
11939: CALL_OW 88
// DialogueOff ;
11943: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11947: LD_INT 36
11949: PPUSH
11950: LD_INT 1
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11960: LD_INT 15
11962: PPUSH
11963: LD_INT 1
11965: PPUSH
11966: LD_INT 1
11968: PPUSH
11969: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11973: LD_STRING MR
11975: PPUSH
11976: CALL_OW 337
// end ;
11980: LD_VAR 0 1
11984: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11985: LD_INT 22
11987: PUSH
11988: LD_INT 1
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 30
11997: PUSH
11998: LD_INT 15
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PPUSH
12009: CALL_OW 69
12013: PUSH
12014: LD_EXP 9
12018: PPUSH
12019: CALL_OW 302
12023: AND
12024: PUSH
12025: LD_INT 1
12027: PPUSH
12028: CALL_OW 463
12032: NOT
12033: AND
12034: IFFALSE 12063
12036: GO 12038
12038: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12039: LD_EXP 9
12043: PPUSH
12044: LD_STRING DR1-Den-1
12046: PPUSH
12047: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12051: LD_EXP 1
12055: PPUSH
12056: LD_STRING DR1-JMM-1
12058: PPUSH
12059: CALL_OW 88
// end ;
12063: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12064: LD_INT 15
12066: PPUSH
12067: LD_INT 1
12069: PPUSH
12070: CALL_OW 321
12074: PUSH
12075: LD_INT 2
12077: EQUAL
12078: PUSH
12079: LD_EXP 9
12083: PPUSH
12084: CALL_OW 302
12088: AND
12089: PUSH
12090: LD_INT 1
12092: PPUSH
12093: CALL_OW 463
12097: NOT
12098: AND
12099: IFFALSE 12308
12101: GO 12103
12103: DISABLE
// begin DialogueOn ;
12104: CALL_OW 6
// if IsOK ( Denis ) then
12108: LD_EXP 9
12112: PPUSH
12113: CALL_OW 302
12117: IFFALSE 12133
// Say ( Denis , DR2-Den-1 ) else
12119: LD_EXP 9
12123: PPUSH
12124: LD_STRING DR2-Den-1
12126: PPUSH
12127: CALL_OW 88
12131: GO 12192
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12133: LD_INT 22
12135: PUSH
12136: LD_INT 1
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 21
12145: PUSH
12146: LD_INT 1
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 25
12155: PUSH
12156: LD_INT 4
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: PPUSH
12168: CALL_OW 69
12172: PUSH
12173: LD_EXP 1
12177: PUSH
12178: EMPTY
12179: LIST
12180: DIFF
12181: PPUSH
12182: LD_STRING DR2-Sci1-1
12184: PPUSH
12185: LD_STRING DR2-FSci1-1
12187: PPUSH
12188: CALL 6822 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12192: LD_EXP 1
12196: PPUSH
12197: LD_STRING DR2-JMM-1
12199: PPUSH
12200: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12204: LD_INT 22
12206: PUSH
12207: LD_INT 1
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 21
12216: PUSH
12217: LD_INT 1
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 26
12226: PUSH
12227: LD_INT 1
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 23
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: PPUSH
12250: CALL_OW 69
12254: PUSH
12255: LD_EXP 1
12259: PUSH
12260: LD_EXP 9
12264: PUSH
12265: LD_EXP 8
12269: PUSH
12270: LD_EXP 5
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: DIFF
12281: PPUSH
12282: LD_STRING DR2-Sol1-1
12284: PPUSH
12285: LD_STRING 
12287: PPUSH
12288: CALL 6822 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12292: LD_EXP 1
12296: PPUSH
12297: LD_STRING DR2-JMM-2
12299: PPUSH
12300: CALL_OW 88
// DialogueOff ;
12304: CALL_OW 7
// end ;
12308: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
12309: LD_INT 22
12311: PUSH
12312: LD_INT 1
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 30
12321: PUSH
12322: LD_INT 36
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 69
12337: PUSH
12338: LD_INT 0
12340: EQUAL
12341: PUSH
12342: LD_INT 22
12344: PUSH
12345: LD_INT 1
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 21
12354: PUSH
12355: LD_INT 2
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: LD_INT 33
12364: PUSH
12365: LD_INT 2
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 69
12381: PUSH
12382: LD_INT 0
12384: GREATER
12385: AND
12386: PUSH
12387: LD_EXP 24
12391: PUSH
12392: LD_INT 0
12394: EQUAL
12395: AND
12396: PUSH
12397: LD_INT 1
12399: PPUSH
12400: CALL_OW 463
12404: NOT
12405: AND
12406: IFFALSE 12543
12408: GO 12410
12410: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
12411: LD_INT 22
12413: PUSH
12414: LD_INT 1
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 21
12423: PUSH
12424: LD_INT 1
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 25
12433: PUSH
12434: LD_INT 3
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: LD_INT 26
12443: PUSH
12444: LD_INT 1
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: PPUSH
12457: CALL_OW 69
12461: PUSH
12462: LD_EXP 1
12466: PUSH
12467: LD_EXP 6
12471: PUSH
12472: LD_EXP 7
12476: PUSH
12477: LD_EXP 9
12481: PUSH
12482: LD_EXP 16
12486: PUSH
12487: LD_EXP 3
12491: PUSH
12492: LD_EXP 4
12496: PUSH
12497: LD_EXP 2
12501: PUSH
12502: LD_EXP 5
12506: PUSH
12507: LD_EXP 8
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: DIFF
12524: PPUSH
12525: LD_STRING D3a-Mech1-1
12527: PPUSH
12528: LD_STRING 
12530: PPUSH
12531: CALL 6822 0 3
// firstTower = 2 ;
12535: LD_ADDR_EXP 24
12539: PUSH
12540: LD_INT 2
12542: ST_TO_ADDR
// end ;
12543: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12544: LD_INT 22
12546: PUSH
12547: LD_INT 3
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 21
12556: PUSH
12557: LD_INT 3
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PPUSH
12568: CALL_OW 69
12572: PUSH
12573: LD_INT 0
12575: EQUAL
12576: IFFALSE 12707
12578: GO 12580
12580: DISABLE
12581: LD_INT 0
12583: PPUSH
// begin stop_talking := true ;
12584: LD_ADDR_OWVAR 56
12588: PUSH
12589: LD_INT 1
12591: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12592: LD_ADDR_VAR 0 1
12596: PUSH
12597: LD_INT 22
12599: PUSH
12600: LD_INT 1
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 21
12609: PUSH
12610: LD_INT 1
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: LD_INT 2
12619: PUSH
12620: LD_INT 25
12622: PUSH
12623: LD_INT 1
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 25
12632: PUSH
12633: LD_INT 2
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 25
12642: PUSH
12643: LD_INT 3
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 25
12652: PUSH
12653: LD_INT 4
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: PPUSH
12672: CALL_OW 69
12676: PUSH
12677: FOR_IN
12678: IFFALSE 12697
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
12680: LD_VAR 0 1
12684: PPUSH
12685: LD_INT 1
12687: PPUSH
12688: LD_INT 7500
12690: PPUSH
12691: CALL_OW 591
12695: GO 12677
12697: POP
12698: POP
// stop_talking := false ;
12699: LD_ADDR_OWVAR 56
12703: PUSH
12704: LD_INT 0
12706: ST_TO_ADDR
// end ;
12707: PPOPN 1
12709: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12710: LD_INT 22
12712: PUSH
12713: LD_INT 1
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 30
12722: PUSH
12723: LD_INT 36
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PPUSH
12734: CALL_OW 69
12738: PUSH
12739: LD_INT 22
12741: PUSH
12742: LD_INT 1
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: LD_INT 21
12751: PUSH
12752: LD_INT 2
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PUSH
12759: LD_INT 33
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: PPUSH
12774: CALL_OW 69
12778: AND
12779: PUSH
12780: CALL 13332 0 0
12784: AND
12785: PUSH
12786: LD_INT 1
12788: PPUSH
12789: CALL_OW 463
12793: NOT
12794: AND
12795: IFFALSE 13329
12797: GO 12799
12799: DISABLE
12800: LD_INT 0
12802: PPUSH
12803: PPUSH
12804: PPUSH
12805: PPUSH
12806: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12807: LD_ADDR_VAR 0 3
12811: PUSH
12812: LD_INT 22
12814: PUSH
12815: LD_INT 1
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 30
12824: PUSH
12825: LD_INT 36
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PPUSH
12836: CALL_OW 69
12840: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12841: LD_ADDR_VAR 0 4
12845: PUSH
12846: LD_INT 22
12848: PUSH
12849: LD_INT 1
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 21
12858: PUSH
12859: LD_INT 2
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 33
12868: PUSH
12869: LD_INT 2
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: LIST
12880: PPUSH
12881: CALL_OW 69
12885: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12886: LD_ADDR_VAR 0 5
12890: PUSH
12891: EMPTY
12892: ST_TO_ADDR
// for i in tmpControlTowers do
12893: LD_ADDR_VAR 0 1
12897: PUSH
12898: LD_VAR 0 3
12902: PUSH
12903: FOR_IN
12904: IFFALSE 13327
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12906: LD_EXP 1
12910: PPUSH
12911: CALL_OW 310
12915: PUSH
12916: LD_VAR 0 1
12920: EQUAL
12921: PUSH
12922: LD_EXP 1
12926: PPUSH
12927: CALL_OW 257
12931: PUSH
12932: LD_INT 3
12934: EQUAL
12935: AND
12936: IFFALSE 13070
// begin InGameOn ;
12938: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12942: LD_VAR 0 4
12946: PUSH
12947: LD_INT 1
12949: ARRAY
12950: PPUSH
12951: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12955: LD_EXP 1
12959: PPUSH
12960: LD_STRING D4a-JMM-1
12962: PPUSH
12963: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12967: LD_VAR 0 4
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: PPUSH
12976: LD_EXP 1
12980: PPUSH
12981: CALL_OW 53
// wait ( 0 0$1 ) ;
12985: LD_INT 35
12987: PPUSH
12988: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12992: LD_VAR 0 4
12996: PUSH
12997: LD_INT 1
12999: ARRAY
13000: PPUSH
13001: LD_VAR 0 4
13005: PUSH
13006: LD_INT 1
13008: ARRAY
13009: PPUSH
13010: CALL_OW 250
13014: PUSH
13015: LD_INT 3
13017: PLUS
13018: PPUSH
13019: LD_VAR 0 4
13023: PUSH
13024: LD_INT 1
13026: ARRAY
13027: PPUSH
13028: CALL_OW 251
13032: PUSH
13033: LD_INT 2
13035: MINUS
13036: PPUSH
13037: CALL_OW 111
// wait ( 0 0$2 ) ;
13041: LD_INT 70
13043: PPUSH
13044: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13048: LD_EXP 1
13052: PPUSH
13053: LD_STRING D4b-JMM-1
13055: PPUSH
13056: CALL_OW 88
// InGameOff ;
13060: CALL_OW 9
// exit ;
13064: POP
13065: POP
13066: GO 13329
// end else
13068: GO 13325
// begin InGameOn ;
13070: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13074: LD_ADDR_VAR 0 5
13078: PUSH
13079: LD_VAR 0 1
13083: PPUSH
13084: CALL_OW 313
13088: PPUSH
13089: LD_INT 25
13091: PUSH
13092: LD_INT 3
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PPUSH
13099: CALL_OW 72
13103: ST_TO_ADDR
// if not tmpMechanicInside then
13104: LD_VAR 0 5
13108: NOT
13109: IFFALSE 13113
// continue ;
13111: GO 12903
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13113: LD_VAR 0 5
13117: PUSH
13118: LD_INT 1
13120: ARRAY
13121: PPUSH
13122: CALL_OW 258
13126: PUSH
13127: LD_INT 1
13129: EQUAL
13130: IFFALSE 13150
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13132: LD_VAR 0 5
13136: PUSH
13137: LD_INT 1
13139: ARRAY
13140: PPUSH
13141: LD_STRING D4a-Mech1-1
13143: PPUSH
13144: CALL_OW 88
13148: GO 13166
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13150: LD_VAR 0 5
13154: PUSH
13155: LD_INT 1
13157: ARRAY
13158: PPUSH
13159: LD_STRING D4a-FMech1-1
13161: PPUSH
13162: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13166: LD_VAR 0 4
13170: PUSH
13171: LD_INT 1
13173: ARRAY
13174: PPUSH
13175: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13179: LD_VAR 0 4
13183: PUSH
13184: LD_INT 1
13186: ARRAY
13187: PPUSH
13188: LD_VAR 0 5
13192: PUSH
13193: LD_INT 1
13195: ARRAY
13196: PPUSH
13197: CALL_OW 53
// wait ( 0 0$1 ) ;
13201: LD_INT 35
13203: PPUSH
13204: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13208: LD_VAR 0 4
13212: PUSH
13213: LD_INT 1
13215: ARRAY
13216: PPUSH
13217: LD_VAR 0 4
13221: PUSH
13222: LD_INT 1
13224: ARRAY
13225: PPUSH
13226: CALL_OW 250
13230: PUSH
13231: LD_INT 3
13233: PLUS
13234: PPUSH
13235: LD_VAR 0 4
13239: PUSH
13240: LD_INT 1
13242: ARRAY
13243: PPUSH
13244: CALL_OW 251
13248: PUSH
13249: LD_INT 2
13251: MINUS
13252: PPUSH
13253: CALL_OW 111
// wait ( 0 0$2 ) ;
13257: LD_INT 70
13259: PPUSH
13260: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13264: LD_VAR 0 5
13268: PUSH
13269: LD_INT 1
13271: ARRAY
13272: PPUSH
13273: CALL_OW 258
13277: PUSH
13278: LD_INT 1
13280: EQUAL
13281: IFFALSE 13301
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
13283: LD_VAR 0 5
13287: PUSH
13288: LD_INT 1
13290: ARRAY
13291: PPUSH
13292: LD_STRING D4b-Mech1-1
13294: PPUSH
13295: CALL_OW 88
13299: GO 13317
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13301: LD_VAR 0 5
13305: PUSH
13306: LD_INT 1
13308: ARRAY
13309: PPUSH
13310: LD_STRING D4b-FMech1-1
13312: PPUSH
13313: CALL_OW 88
// InGameOff ;
13317: CALL_OW 9
// exit ;
13321: POP
13322: POP
13323: GO 13329
// end ; end ;
13325: GO 12903
13327: POP
13328: POP
// end ;
13329: PPOPN 5
13331: END
// function CheckMehInside ; var i , j , tmp ; begin
13332: LD_INT 0
13334: PPUSH
13335: PPUSH
13336: PPUSH
13337: PPUSH
// result := false ;
13338: LD_ADDR_VAR 0 1
13342: PUSH
13343: LD_INT 0
13345: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13346: LD_ADDR_VAR 0 4
13350: PUSH
13351: LD_INT 22
13353: PUSH
13354: LD_INT 1
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 30
13363: PUSH
13364: LD_INT 36
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PPUSH
13375: CALL_OW 69
13379: ST_TO_ADDR
// if not tmp then
13380: LD_VAR 0 4
13384: NOT
13385: IFFALSE 13389
// exit ;
13387: GO 13453
// for i in tmp do
13389: LD_ADDR_VAR 0 2
13393: PUSH
13394: LD_VAR 0 4
13398: PUSH
13399: FOR_IN
13400: IFFALSE 13451
// for j in UnitsInside ( i ) do
13402: LD_ADDR_VAR 0 3
13406: PUSH
13407: LD_VAR 0 2
13411: PPUSH
13412: CALL_OW 313
13416: PUSH
13417: FOR_IN
13418: IFFALSE 13447
// if GetClass ( j ) = class_mechanic then
13420: LD_VAR 0 3
13424: PPUSH
13425: CALL_OW 257
13429: PUSH
13430: LD_INT 3
13432: EQUAL
13433: IFFALSE 13445
// begin result := true ;
13435: LD_ADDR_VAR 0 1
13439: PUSH
13440: LD_INT 1
13442: ST_TO_ADDR
// break ;
13443: GO 13447
// end ;
13445: GO 13417
13447: POP
13448: POP
13449: GO 13399
13451: POP
13452: POP
// end ;
13453: LD_VAR 0 1
13457: RET
// every 12 12$0 do
13458: GO 13460
13460: DISABLE
// begin repeat wait ( 0 0$1 ) ;
13461: LD_INT 35
13463: PPUSH
13464: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) or timeToEnd < 5 5$00 ;
13468: LD_INT 1
13470: PPUSH
13471: CALL_OW 463
13475: NOT
13476: PUSH
13477: LD_INT 32
13479: PPUSH
13480: LD_INT 81
13482: PUSH
13483: LD_INT 1
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PPUSH
13490: CALL_OW 70
13494: NOT
13495: AND
13496: PUSH
13497: LD_EXP 27
13501: PUSH
13502: LD_INT 10500
13504: LESS
13505: OR
13506: IFFALSE 13461
// PrepareKurt ;
13508: CALL 16141 0 0
// end ;
13512: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
13513: LD_EXP 16
13517: PPUSH
13518: CALL_OW 302
13522: PUSH
13523: LD_EXP 16
13527: PPUSH
13528: CALL_OW 255
13532: PUSH
13533: LD_INT 1
13535: EQUAL
13536: AND
13537: PUSH
13538: LD_EXP 2
13542: AND
13543: IFFALSE 13708
13545: GO 13547
13547: DISABLE
// begin wait ( 0 0$50 ) ;
13548: LD_INT 1750
13550: PPUSH
13551: CALL_OW 67
// if not IsOk ( Joan ) then
13555: LD_EXP 16
13559: PPUSH
13560: CALL_OW 302
13564: NOT
13565: IFFALSE 13569
// exit ;
13567: GO 13708
// if IsOK ( Lisa ) then
13569: LD_EXP 2
13573: PPUSH
13574: CALL_OW 302
13578: IFFALSE 13708
// begin DialogueOn ;
13580: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13584: LD_EXP 2
13588: PPUSH
13589: LD_STRING D7-Lisa-1
13591: PPUSH
13592: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13596: LD_EXP 1
13600: PPUSH
13601: LD_STRING D7-JMM-1
13603: PPUSH
13604: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13608: LD_EXP 2
13612: PPUSH
13613: LD_STRING D7-Lisa-2
13615: PPUSH
13616: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13620: LD_EXP 1
13624: PPUSH
13625: LD_STRING D7-JMM-2
13627: PPUSH
13628: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13632: LD_EXP 2
13636: PPUSH
13637: LD_STRING D7-Lisa-3
13639: PPUSH
13640: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13644: LD_EXP 1
13648: PPUSH
13649: LD_STRING D7-JMM-3
13651: PPUSH
13652: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13656: LD_EXP 2
13660: PPUSH
13661: LD_STRING D7-Lisa-4
13663: PPUSH
13664: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13668: LD_EXP 1
13672: PPUSH
13673: LD_STRING D7-JMM-4
13675: PPUSH
13676: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13680: LD_EXP 1
13684: PPUSH
13685: LD_STRING D7-JMM-4a
13687: PPUSH
13688: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13692: LD_EXP 2
13696: PPUSH
13697: LD_STRING D7-Lisa-5
13699: PPUSH
13700: CALL_OW 88
// DialogueOff ;
13704: CALL_OW 7
// end ; end ;
13708: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
13709: LD_EXP 14
13713: PUSH
13714: LD_INT 22
13716: PUSH
13717: LD_INT 1
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 91
13726: PUSH
13727: LD_EXP 14
13731: PUSH
13732: LD_INT 10
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: LIST
13739: PUSH
13740: LD_INT 2
13742: PUSH
13743: LD_INT 25
13745: PUSH
13746: LD_INT 1
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: LD_INT 25
13755: PUSH
13756: LD_INT 2
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 25
13765: PUSH
13766: LD_INT 3
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 25
13775: PUSH
13776: LD_INT 4
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: PPUSH
13795: CALL_OW 69
13799: PUSH
13800: LD_INT 1
13802: GREATER
13803: AND
13804: IFFALSE 13821
13806: GO 13808
13808: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13809: LD_EXP 14
13813: PPUSH
13814: LD_STRING D5-Sol1-1
13816: PPUSH
13817: CALL_OW 88
13821: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13822: LD_INT 22
13824: PUSH
13825: LD_INT 1
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 33
13834: PUSH
13835: LD_INT 2
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PPUSH
13846: CALL_OW 69
13850: PUSH
13851: LD_INT 2
13853: GREATEREQUAL
13854: IFFALSE 13874
13856: GO 13858
13858: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13859: LD_STRING MRa
13861: PPUSH
13862: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13866: LD_ADDR_EXP 29
13870: PUSH
13871: LD_INT 1
13873: ST_TO_ADDR
// end ;
13874: END
// every 2 2$00 do var i , last ;
13875: GO 13877
13877: DISABLE
13878: LD_INT 0
13880: PPUSH
13881: PPUSH
// begin last := 8 ;
13882: LD_ADDR_VAR 0 2
13886: PUSH
13887: LD_INT 8
13889: ST_TO_ADDR
// for i = 1 to last do
13890: LD_ADDR_VAR 0 1
13894: PUSH
13895: DOUBLE
13896: LD_INT 1
13898: DEC
13899: ST_TO_ADDR
13900: LD_VAR 0 2
13904: PUSH
13905: FOR_TO
13906: IFFALSE 13934
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13908: LD_INT 6300
13910: PPUSH
13911: LD_INT 12600
13913: PPUSH
13914: CALL_OW 12
13918: PPUSH
13919: CALL_OW 67
// PrepareRandoms ( i ) ;
13923: LD_VAR 0 1
13927: PPUSH
13928: CALL 4129 0 1
// end ;
13932: GO 13905
13934: POP
13935: POP
// end ;
13936: PPOPN 2
13938: END
// every 5 5$20 do
13939: GO 13941
13941: DISABLE
// begin DialogueOn ;
13942: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13946: LD_EXP 10
13950: PPUSH
13951: LD_STRING D12a-Sci-1
13953: PPUSH
13954: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13958: LD_EXP 1
13962: PPUSH
13963: LD_STRING D12a-JMM-1
13965: PPUSH
13966: CALL_OW 88
// DialogueOff ;
13970: CALL_OW 7
// cratesStatus := 1 ;
13974: LD_ADDR_EXP 39
13978: PUSH
13979: LD_INT 1
13981: ST_TO_ADDR
// end ;
13982: END
// every 13 13$0 do
13983: GO 13985
13985: DISABLE
// begin DialogueOn ;
13986: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13990: LD_EXP 10
13994: PPUSH
13995: LD_STRING D12b-Sci-1
13997: PPUSH
13998: CALL_OW 94
// DialogueOff ;
14002: CALL_OW 7
// cratesStatus := 2 ;
14006: LD_ADDR_EXP 39
14010: PUSH
14011: LD_INT 2
14013: ST_TO_ADDR
// BuildBulldozer ;
14014: CALL 9865 0 0
// end ;
14018: END
// every 32 32$0 do
14019: GO 14021
14021: DISABLE
// begin DialogueOn ;
14022: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14026: LD_EXP 10
14030: PPUSH
14031: LD_STRING D12c-Sci-1
14033: PPUSH
14034: CALL_OW 94
// DialogueOff ;
14038: CALL_OW 7
// wait ( 3 3$0 ) ;
14042: LD_INT 6300
14044: PPUSH
14045: CALL_OW 67
// DialogueOn ;
14049: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14053: LD_EXP 10
14057: PPUSH
14058: LD_STRING D12d-Sci-1
14060: PPUSH
14061: CALL_OW 94
// DialogueOff ;
14065: CALL_OW 7
// cratesStatus = 1 ;
14069: LD_ADDR_EXP 39
14073: PUSH
14074: LD_INT 1
14076: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14077: CALL 20338 0 0
// wait ( 2 2$30 ) ;
14081: LD_INT 5250
14083: PPUSH
14084: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14088: LD_INT 35
14090: PPUSH
14091: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14095: LD_INT 1
14097: PPUSH
14098: CALL_OW 463
14102: NOT
14103: PUSH
14104: LD_INT 32
14106: PPUSH
14107: LD_INT 81
14109: PUSH
14110: LD_INT 1
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 70
14121: NOT
14122: AND
14123: PUSH
14124: LD_EXP 27
14128: PUSH
14129: LD_INT 6300
14131: LESS
14132: OR
14133: IFFALSE 14088
// PrepareJoan ;
14135: CALL 3085 0 0
// end ;
14139: END
// every 42 42$0 do
14140: GO 14142
14142: DISABLE
// begin DialogueOn ;
14143: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14147: LD_EXP 10
14151: PPUSH
14152: LD_STRING D12e-Sci-1
14154: PPUSH
14155: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14159: LD_EXP 1
14163: PPUSH
14164: LD_STRING D12e-JMM-1
14166: PPUSH
14167: CALL_OW 88
// DialogueOff ;
14171: CALL_OW 7
// cratesStatus := 2 ;
14175: LD_ADDR_EXP 39
14179: PUSH
14180: LD_INT 2
14182: ST_TO_ADDR
// end ; end_of_file
14183: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14184: LD_VAR 0 1
14188: PUSH
14189: LD_INT 1
14191: EQUAL
14192: PUSH
14193: LD_VAR 0 2
14197: PUSH
14198: LD_INT 3
14200: EQUAL
14201: AND
14202: IFFALSE 14212
// contactWithRussian := 1 ;
14204: LD_ADDR_EXP 23
14208: PUSH
14209: LD_INT 1
14211: ST_TO_ADDR
// end ;
14212: PPOPN 2
14214: END
// on BuildingComplete ( building ) do var i ;
14215: LD_INT 0
14217: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14218: LD_VAR 0 1
14222: PPUSH
14223: CALL_OW 266
14227: PUSH
14228: LD_INT 36
14230: EQUAL
14231: PUSH
14232: LD_VAR 0 1
14236: PPUSH
14237: CALL_OW 255
14241: PUSH
14242: LD_INT 1
14244: EQUAL
14245: AND
14246: PUSH
14247: LD_EXP 24
14251: PUSH
14252: LD_INT 0
14254: EQUAL
14255: AND
14256: IFFALSE 14336
// begin firstTower = 1 ;
14258: LD_ADDR_EXP 24
14262: PUSH
14263: LD_INT 1
14265: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14266: LD_INT 22
14268: PUSH
14269: LD_INT 1
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: LD_INT 21
14278: PUSH
14279: LD_INT 1
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 25
14288: PUSH
14289: LD_INT 3
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 26
14298: PUSH
14299: LD_INT 1
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: PPUSH
14312: CALL_OW 69
14316: PUSH
14317: LD_EXP 1
14321: PUSH
14322: EMPTY
14323: LIST
14324: DIFF
14325: PPUSH
14326: LD_STRING D3b-Mech1-1
14328: PPUSH
14329: LD_STRING D3b-Mech1-1
14331: PPUSH
14332: CALL 6822 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14336: LD_VAR 0 1
14340: PPUSH
14341: CALL_OW 266
14345: PUSH
14346: LD_INT 0
14348: EQUAL
14349: PUSH
14350: LD_VAR 0 1
14354: PPUSH
14355: CALL_OW 255
14359: PUSH
14360: LD_INT 1
14362: EQUAL
14363: AND
14364: IFFALSE 14378
// SetBName ( building , theta ) ;
14366: LD_VAR 0 1
14370: PPUSH
14371: LD_STRING theta
14373: PPUSH
14374: CALL_OW 500
// if GetSide ( building ) = 3 then
14378: LD_VAR 0 1
14382: PPUSH
14383: CALL_OW 255
14387: PUSH
14388: LD_INT 3
14390: EQUAL
14391: IFFALSE 14431
// begin for i := 1 to 4 do
14393: LD_ADDR_VAR 0 2
14397: PUSH
14398: DOUBLE
14399: LD_INT 1
14401: DEC
14402: ST_TO_ADDR
14403: LD_INT 4
14405: PUSH
14406: FOR_TO
14407: IFFALSE 14429
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14409: LD_ADDR_EXP 32
14413: PUSH
14414: LD_EXP 32
14418: PPUSH
14419: LD_INT 1
14421: PPUSH
14422: CALL_OW 3
14426: ST_TO_ADDR
14427: GO 14406
14429: POP
14430: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14431: LD_VAR 0 1
14435: PPUSH
14436: CALL_OW 255
14440: PUSH
14441: LD_INT 3
14443: EQUAL
14444: PUSH
14445: LD_VAR 0 1
14449: PPUSH
14450: CALL_OW 266
14454: PUSH
14455: LD_INT 0
14457: EQUAL
14458: PUSH
14459: LD_VAR 0 1
14463: PPUSH
14464: CALL_OW 266
14468: PUSH
14469: LD_INT 2
14471: EQUAL
14472: OR
14473: PUSH
14474: LD_VAR 0 1
14478: PPUSH
14479: CALL_OW 266
14483: PUSH
14484: LD_INT 4
14486: EQUAL
14487: OR
14488: PUSH
14489: EMPTY
14490: LIST
14491: AND
14492: IFFALSE 14503
// ComUpgrade ( building ) ;
14494: LD_VAR 0 1
14498: PPUSH
14499: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14503: LD_VAR 0 1
14507: PPUSH
14508: CALL_OW 255
14512: PUSH
14513: LD_INT 3
14515: EQUAL
14516: PUSH
14517: LD_VAR 0 1
14521: PPUSH
14522: CALL_OW 266
14526: PUSH
14527: LD_INT 32
14529: EQUAL
14530: AND
14531: IFFALSE 14572
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14533: LD_VAR 0 1
14537: PPUSH
14538: LD_INT 42
14540: PUSH
14541: LD_INT 43
14543: PUSH
14544: LD_INT 44
14546: PUSH
14547: LD_INT 46
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 1
14558: PPUSH
14559: LD_INT 4
14561: PPUSH
14562: CALL_OW 12
14566: ARRAY
14567: PPUSH
14568: CALL_OW 208
// end ;
14572: PPOPN 2
14574: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14575: LD_VAR 0 1
14579: PPUSH
14580: CALL 36898 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
14584: LD_VAR 0 1
14588: PUSH
14589: LD_INT 22
14591: PUSH
14592: LD_INT 1
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: LD_INT 21
14601: PUSH
14602: LD_INT 1
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: LD_INT 23
14611: PUSH
14612: LD_INT 1
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: LIST
14623: PPUSH
14624: CALL_OW 69
14628: IN
14629: IFFALSE 14645
// killCounter := killCounter + 1 ;
14631: LD_ADDR_EXP 46
14635: PUSH
14636: LD_EXP 46
14640: PUSH
14641: LD_INT 1
14643: PLUS
14644: ST_TO_ADDR
// if unit in ruAttackersInForest then
14645: LD_VAR 0 1
14649: PUSH
14650: LD_EXP 49
14654: IN
14655: IFFALSE 14673
// ruAttackersInForest := ruAttackersInForest diff unit ;
14657: LD_ADDR_EXP 49
14661: PUSH
14662: LD_EXP 49
14666: PUSH
14667: LD_VAR 0 1
14671: DIFF
14672: ST_TO_ADDR
// if unit in ruAttackers then
14673: LD_VAR 0 1
14677: PUSH
14678: LD_EXP 48
14682: IN
14683: IFFALSE 14701
// ruAttackers := ruAttackers diff unit ;
14685: LD_ADDR_EXP 48
14689: PUSH
14690: LD_EXP 48
14694: PUSH
14695: LD_VAR 0 1
14699: DIFF
14700: ST_TO_ADDR
// if unit = JMM then
14701: LD_VAR 0 1
14705: PUSH
14706: LD_EXP 1
14710: EQUAL
14711: IFFALSE 14720
// YouLost ( JMM ) ;
14713: LD_STRING JMM
14715: PPUSH
14716: CALL_OW 104
// if unit = Joan then
14720: LD_VAR 0 1
14724: PUSH
14725: LD_EXP 16
14729: EQUAL
14730: IFFALSE 14740
// JoanStatus := 0 ;
14732: LD_ADDR_EXP 17
14736: PUSH
14737: LD_INT 0
14739: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14740: LD_VAR 0 1
14744: PPUSH
14745: CALL_OW 255
14749: PUSH
14750: LD_INT 1
14752: EQUAL
14753: PUSH
14754: LD_VAR 0 1
14758: PPUSH
14759: CALL_OW 247
14763: PUSH
14764: LD_INT 1
14766: EQUAL
14767: AND
14768: PUSH
14769: LD_VAR 0 1
14773: PPUSH
14774: CALL_OW 248
14778: PUSH
14779: LD_INT 1
14781: EQUAL
14782: AND
14783: IFFALSE 14799
// unitLost = unitLost + 1 ;
14785: LD_ADDR_EXP 31
14789: PUSH
14790: LD_EXP 31
14794: PUSH
14795: LD_INT 1
14797: PLUS
14798: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 255
14808: PUSH
14809: LD_INT 3
14811: EQUAL
14812: PUSH
14813: LD_VAR 0 1
14817: PPUSH
14818: CALL_OW 247
14822: PUSH
14823: LD_INT 3
14825: EQUAL
14826: AND
14827: PUSH
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 266
14837: PUSH
14838: LD_INT 4
14840: PUSH
14841: LD_INT 5
14843: PUSH
14844: LD_INT 32
14846: PUSH
14847: LD_INT 31
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: IN
14856: AND
14857: IFFALSE 14943
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14859: LD_ADDR_EXP 32
14863: PUSH
14864: LD_EXP 32
14868: PUSH
14869: LD_VAR 0 1
14873: PPUSH
14874: CALL_OW 266
14878: ADD
14879: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14880: LD_ADDR_EXP 32
14884: PUSH
14885: LD_EXP 32
14889: PUSH
14890: LD_VAR 0 1
14894: PPUSH
14895: CALL_OW 250
14899: ADD
14900: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14901: LD_ADDR_EXP 32
14905: PUSH
14906: LD_EXP 32
14910: PUSH
14911: LD_VAR 0 1
14915: PPUSH
14916: CALL_OW 251
14920: ADD
14921: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14922: LD_ADDR_EXP 32
14926: PUSH
14927: LD_EXP 32
14931: PUSH
14932: LD_VAR 0 1
14936: PPUSH
14937: CALL_OW 254
14941: ADD
14942: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14943: LD_EXP 47
14947: PUSH
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 257
14957: PUSH
14958: LD_INT 3
14960: EQUAL
14961: AND
14962: PUSH
14963: LD_VAR 0 1
14967: PPUSH
14968: CALL_OW 255
14972: PUSH
14973: LD_INT 3
14975: EQUAL
14976: AND
14977: PUSH
14978: LD_INT 21
14980: PPUSH
14981: CALL_OW 302
14985: AND
14986: PUSH
14987: LD_INT 21
14989: PPUSH
14990: CALL_OW 255
14994: PUSH
14995: LD_INT 3
14997: EQUAL
14998: AND
14999: IFFALSE 15081
// begin ruMechCounter := ruMechCounter - 1 ;
15001: LD_ADDR_EXP 47
15005: PUSH
15006: LD_EXP 47
15010: PUSH
15011: LD_INT 1
15013: MINUS
15014: ST_TO_ADDR
// uc_side := 3 ;
15015: LD_ADDR_OWVAR 20
15019: PUSH
15020: LD_INT 3
15022: ST_TO_ADDR
// uc_nation := 3 ;
15023: LD_ADDR_OWVAR 21
15027: PUSH
15028: LD_INT 3
15030: ST_TO_ADDR
// hc_gallery :=  ;
15031: LD_ADDR_OWVAR 33
15035: PUSH
15036: LD_STRING 
15038: ST_TO_ADDR
// hc_name :=  ;
15039: LD_ADDR_OWVAR 26
15043: PUSH
15044: LD_STRING 
15046: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15047: LD_INT 0
15049: PPUSH
15050: LD_EXP 35
15054: PPUSH
15055: LD_EXP 36
15059: PPUSH
15060: CALL_OW 12
15064: PPUSH
15065: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15069: CALL_OW 44
15073: PPUSH
15074: LD_INT 21
15076: PPUSH
15077: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15081: LD_VAR 0 1
15085: PPUSH
15086: CALL_OW 255
15090: PUSH
15091: LD_INT 3
15093: EQUAL
15094: PUSH
15095: LD_VAR 0 1
15099: PPUSH
15100: CALL_OW 264
15104: PUSH
15105: LD_INT 52
15107: EQUAL
15108: AND
15109: PUSH
15110: LD_INT 21
15112: PPUSH
15113: CALL_OW 302
15117: AND
15118: PUSH
15119: LD_INT 21
15121: PPUSH
15122: CALL_OW 255
15126: PUSH
15127: LD_INT 3
15129: EQUAL
15130: AND
15131: IFFALSE 15152
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15133: LD_INT 21
15135: PPUSH
15136: LD_INT 22
15138: PPUSH
15139: LD_INT 1
15141: PPUSH
15142: LD_INT 1
15144: PPUSH
15145: LD_INT 52
15147: PPUSH
15148: CALL_OW 125
// end ;
15152: PPOPN 1
15154: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15155: LD_INT 0
15157: PPUSH
15158: PPUSH
15159: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15160: LD_VAR 0 1
15164: PPUSH
15165: LD_VAR 0 2
15169: PPUSH
15170: CALL 37018 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15174: LD_VAR 0 1
15178: PPUSH
15179: CALL_OW 255
15183: PUSH
15184: LD_INT 3
15186: EQUAL
15187: PUSH
15188: LD_VAR 0 1
15192: PPUSH
15193: CALL_OW 264
15197: PUSH
15198: LD_INT 51
15200: PUSH
15201: LD_INT 52
15203: PUSH
15204: LD_INT 53
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: LIST
15211: IN
15212: NOT
15213: AND
15214: IFFALSE 15245
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15216: LD_ADDR_EXP 48
15220: PUSH
15221: LD_EXP 48
15225: PPUSH
15226: LD_EXP 48
15230: PUSH
15231: LD_INT 1
15233: PLUS
15234: PPUSH
15235: LD_VAR 0 1
15239: PPUSH
15240: CALL_OW 1
15244: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15245: LD_VAR 0 1
15249: PPUSH
15250: CALL_OW 264
15254: PUSH
15255: LD_INT 53
15257: EQUAL
15258: IFFALSE 15413
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15260: LD_VAR 0 1
15264: PPUSH
15265: LD_INT 60
15267: PPUSH
15268: LD_INT 85
15270: PPUSH
15271: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
15275: LD_VAR 0 1
15279: PPUSH
15280: LD_INT 43
15282: PPUSH
15283: LD_INT 69
15285: PPUSH
15286: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
15290: LD_VAR 0 1
15294: PPUSH
15295: LD_INT 37
15297: PPUSH
15298: LD_INT 46
15300: PPUSH
15301: CALL_OW 171
// wait ( 0 0$1 ) ;
15305: LD_INT 35
15307: PPUSH
15308: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15312: LD_INT 35
15314: PPUSH
15315: CALL_OW 67
// until not HasTask ( vehicle ) ;
15319: LD_VAR 0 1
15323: PPUSH
15324: CALL_OW 314
15328: NOT
15329: IFFALSE 15312
// CutTreeInArea ( vehicle , cutTreeArea ) ;
15331: LD_VAR 0 1
15335: PPUSH
15336: LD_INT 34
15338: PPUSH
15339: CALL 9917 0 2
// repeat wait ( 0 0$1 ) ;
15343: LD_INT 35
15345: PPUSH
15346: CALL_OW 67
// until not HasTask ( vehicle ) ;
15350: LD_VAR 0 1
15354: PPUSH
15355: CALL_OW 314
15359: NOT
15360: IFFALSE 15343
// un := IsDrivenBy ( vehicle ) ;
15362: LD_ADDR_VAR 0 4
15366: PUSH
15367: LD_VAR 0 1
15371: PPUSH
15372: CALL_OW 311
15376: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
15377: LD_VAR 0 4
15381: PPUSH
15382: LD_INT 96
15384: PPUSH
15385: LD_INT 77
15387: PPUSH
15388: CALL_OW 171
// AddComExitVehicle ( un ) ;
15392: LD_VAR 0 4
15396: PPUSH
15397: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
15401: LD_VAR 0 4
15405: PPUSH
15406: LD_INT 17
15408: PPUSH
15409: CALL_OW 180
// end ; end ;
15413: PPOPN 5
15415: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15416: LD_VAR 0 1
15420: PPUSH
15421: CALL_OW 255
15425: PUSH
15426: LD_INT 3
15428: EQUAL
15429: IFFALSE 15460
// begin tamedApemans = tamedApemans + 1 ;
15431: LD_ADDR_EXP 33
15435: PUSH
15436: LD_EXP 33
15440: PUSH
15441: LD_INT 1
15443: PLUS
15444: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
15445: LD_VAR 0 1
15449: PPUSH
15450: LD_INT 106
15452: PPUSH
15453: LD_INT 85
15455: PPUSH
15456: CALL_OW 111
// end ; end ;
15460: PPOPN 2
15462: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
15463: LD_VAR 0 2
15467: PPUSH
15468: CALL_OW 255
15472: PUSH
15473: LD_INT 3
15475: EQUAL
15476: PUSH
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 255
15486: PUSH
15487: LD_INT 3
15489: EQUAL
15490: AND
15491: PUSH
15492: LD_INT 21
15494: PPUSH
15495: CALL_OW 302
15499: AND
15500: IFFALSE 15514
// ComEnterUnit ( human , rufab ) ;
15502: LD_VAR 0 1
15506: PPUSH
15507: LD_INT 21
15509: PPUSH
15510: CALL_OW 120
// end ;
15514: PPOPN 4
15516: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
15517: LD_VAR 0 1
15521: PUSH
15522: LD_INT 21
15524: EQUAL
15525: PUSH
15526: LD_VAR 0 2
15530: PPUSH
15531: CALL_OW 255
15535: PUSH
15536: LD_INT 3
15538: EQUAL
15539: AND
15540: IFFALSE 15554
// SetLives ( human , 1000 ) ;
15542: LD_VAR 0 2
15546: PPUSH
15547: LD_INT 1000
15549: PPUSH
15550: CALL_OW 234
// end ;
15554: PPOPN 2
15556: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15557: LD_VAR 0 1
15561: PPUSH
15562: CALL 37002 0 1
// end ; end_of_file
15566: PPOPN 1
15568: END
// every 0 0$30 trigger cratesStatus = 1 do
15569: LD_EXP 39
15573: PUSH
15574: LD_INT 1
15576: EQUAL
15577: IFFALSE 15630
15579: GO 15581
15581: DISABLE
// begin enable ;
15582: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
15583: LD_INT 350
15585: PUSH
15586: LD_INT 875
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 1
15595: PPUSH
15596: LD_INT 2
15598: PPUSH
15599: CALL_OW 12
15603: ARRAY
15604: PPUSH
15605: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
15609: LD_INT 1
15611: PPUSH
15612: LD_INT 5
15614: PPUSH
15615: CALL_OW 12
15619: PPUSH
15620: LD_INT 7
15622: PPUSH
15623: LD_INT 1
15625: PPUSH
15626: CALL_OW 55
// end ;
15630: END
// every 1 1$0 trigger cratesStatus = 2 do
15631: LD_EXP 39
15635: PUSH
15636: LD_INT 2
15638: EQUAL
15639: IFFALSE 15722
15641: GO 15643
15643: DISABLE
// begin enable ;
15644: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15645: LD_INT 3150
15647: PUSH
15648: LD_INT 4550
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: LD_INT 1
15657: PPUSH
15658: LD_INT 2
15660: PPUSH
15661: CALL_OW 12
15665: ARRAY
15666: PPUSH
15667: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
15671: LD_INT 2
15673: PUSH
15674: LD_INT 5
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 1
15683: PPUSH
15684: LD_INT 2
15686: PPUSH
15687: CALL_OW 12
15691: ARRAY
15692: PPUSH
15693: LD_INT 6
15695: PUSH
15696: LD_INT 7
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: LD_INT 1
15705: PPUSH
15706: LD_INT 2
15708: PPUSH
15709: CALL_OW 12
15713: ARRAY
15714: PPUSH
15715: LD_INT 1
15717: PPUSH
15718: CALL_OW 55
// end ;
15722: END
// every 0 0$30 + 0 0$10 do
15723: GO 15725
15725: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15726: LD_INT 4
15728: PUSH
15729: LD_INT 5
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 1
15738: PPUSH
15739: LD_INT 2
15741: PPUSH
15742: CALL_OW 12
15746: ARRAY
15747: PPUSH
15748: LD_INT 7
15750: PPUSH
15751: LD_INT 1
15753: PPUSH
15754: CALL_OW 55
// Wait ( 0 0$15 ) ;
15758: LD_INT 525
15760: PPUSH
15761: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15765: LD_INT 4
15767: PUSH
15768: LD_INT 5
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 1
15777: PPUSH
15778: LD_INT 2
15780: PPUSH
15781: CALL_OW 12
15785: ARRAY
15786: PPUSH
15787: LD_INT 7
15789: PPUSH
15790: LD_INT 1
15792: PPUSH
15793: CALL_OW 55
// Wait ( 0 0$20 ) ;
15797: LD_INT 700
15799: PPUSH
15800: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15804: LD_INT 4
15806: PUSH
15807: LD_INT 5
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 1
15816: PPUSH
15817: LD_INT 2
15819: PPUSH
15820: CALL_OW 12
15824: ARRAY
15825: PPUSH
15826: LD_INT 7
15828: PPUSH
15829: LD_INT 1
15831: PPUSH
15832: CALL_OW 55
// end ; end_of_file
15836: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15837: LD_EXP 25
15841: PUSH
15842: LD_INT 1
15844: EQUAL
15845: IFFALSE 16138
15847: GO 15849
15849: DISABLE
15850: LD_INT 0
15852: PPUSH
15853: PPUSH
15854: PPUSH
// begin enable ;
15855: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15856: LD_ADDR_VAR 0 2
15860: PUSH
15861: LD_INT 22
15863: PUSH
15864: LD_INT 1
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 21
15873: PUSH
15874: LD_INT 3
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 2
15883: PUSH
15884: LD_INT 30
15886: PUSH
15887: LD_INT 0
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 30
15896: PUSH
15897: LD_INT 1
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: LIST
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: LIST
15913: PPUSH
15914: CALL_OW 69
15918: ST_TO_ADDR
// for i in tmp do
15919: LD_ADDR_VAR 0 1
15923: PUSH
15924: LD_VAR 0 2
15928: PUSH
15929: FOR_IN
15930: IFFALSE 15963
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15932: LD_ADDR_VAR 0 3
15936: PUSH
15937: LD_VAR 0 3
15941: PUSH
15942: LD_VAR 0 1
15946: PPUSH
15947: CALL_OW 274
15951: PPUSH
15952: LD_INT 1
15954: PPUSH
15955: CALL_OW 275
15959: PLUS
15960: ST_TO_ADDR
15961: GO 15929
15963: POP
15964: POP
// strings = [ ] ;
15965: LD_ADDR_EXP 28
15969: PUSH
15970: EMPTY
15971: ST_TO_ADDR
// if tmp = 0 then
15972: LD_VAR 0 2
15976: PUSH
15977: LD_INT 0
15979: EQUAL
15980: IFFALSE 16005
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15982: LD_ADDR_EXP 28
15986: PUSH
15987: LD_EXP 28
15991: PUSH
15992: LD_STRING #Am06-1
15994: PUSH
15995: LD_EXP 26
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: ADD
16004: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16005: LD_VAR 0 2
16009: PUSH
16010: LD_EXP 26
16014: PUSH
16015: LD_VAR 0 3
16019: GREATER
16020: AND
16021: IFFALSE 16052
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16023: LD_ADDR_EXP 28
16027: PUSH
16028: LD_EXP 28
16032: PUSH
16033: LD_STRING #Am06-1
16035: PUSH
16036: LD_EXP 26
16040: PUSH
16041: LD_VAR 0 3
16045: MINUS
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: ADD
16051: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16052: LD_VAR 0 2
16056: PUSH
16057: LD_EXP 26
16061: PUSH
16062: LD_VAR 0 3
16066: LESSEQUAL
16067: AND
16068: IFFALSE 16091
// strings = strings ^ [ #Am06-1 , 0 ] ;
16070: LD_ADDR_EXP 28
16074: PUSH
16075: LD_EXP 28
16079: PUSH
16080: LD_STRING #Am06-1
16082: PUSH
16083: LD_INT 0
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: ADD
16090: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16091: LD_ADDR_EXP 27
16095: PUSH
16096: LD_EXP 27
16100: PUSH
16101: LD_INT 35
16103: MINUS
16104: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16105: LD_ADDR_EXP 28
16109: PUSH
16110: LD_EXP 28
16114: PUSH
16115: LD_STRING #Am06-2
16117: PUSH
16118: LD_EXP 27
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: ADD
16127: ST_TO_ADDR
// display_strings = strings ;
16128: LD_ADDR_OWVAR 47
16132: PUSH
16133: LD_EXP 28
16137: ST_TO_ADDR
// end ; end_of_file
16138: PPOPN 3
16140: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
16141: LD_INT 0
16143: PPUSH
16144: PPUSH
16145: PPUSH
16146: PPUSH
16147: PPUSH
16148: PPUSH
16149: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16150: LD_ADDR_VAR 0 3
16154: PUSH
16155: LD_INT 22
16157: PUSH
16158: LD_INT 1
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 2
16167: PUSH
16168: LD_INT 30
16170: PUSH
16171: LD_INT 0
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 30
16180: PUSH
16181: LD_INT 1
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: LIST
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PPUSH
16197: CALL_OW 69
16201: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16202: LD_INT 35
16204: PPUSH
16205: CALL_OW 67
// until depot ;
16209: LD_VAR 0 3
16213: IFFALSE 16150
// repeat wait ( 0 0$1 ) ;
16215: LD_INT 35
16217: PPUSH
16218: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
16222: LD_ADDR_VAR 0 4
16226: PUSH
16227: LD_INT 22
16229: PUSH
16230: LD_INT 1
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 91
16239: PUSH
16240: LD_VAR 0 3
16244: PUSH
16245: LD_INT 1
16247: ARRAY
16248: PUSH
16249: LD_INT 15
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 21
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 2
16269: PUSH
16270: LD_INT 25
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 25
16282: PUSH
16283: LD_INT 2
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 25
16292: PUSH
16293: LD_INT 3
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 25
16302: PUSH
16303: LD_INT 4
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 3
16319: PUSH
16320: LD_INT 54
16322: PUSH
16323: EMPTY
16324: LIST
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 3
16332: PUSH
16333: LD_INT 55
16335: PUSH
16336: EMPTY
16337: LIST
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: PPUSH
16351: CALL_OW 69
16355: PUSH
16356: LD_EXP 2
16360: PUSH
16361: LD_EXP 3
16365: PUSH
16366: LD_EXP 4
16370: PUSH
16371: LD_EXP 5
16375: PUSH
16376: LD_EXP 7
16380: PUSH
16381: LD_EXP 8
16385: PUSH
16386: LD_EXP 9
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: PUSH
16400: LD_EXP 45
16404: ADD
16405: DIFF
16406: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
16407: LD_VAR 0 4
16411: PUSH
16412: LD_INT 1
16414: PPUSH
16415: CALL_OW 463
16419: NOT
16420: AND
16421: IFFALSE 16215
// tmp := tmp [ rand ( 1 , tmp ) ] ;
16423: LD_ADDR_VAR 0 4
16427: PUSH
16428: LD_VAR 0 4
16432: PUSH
16433: LD_INT 1
16435: PPUSH
16436: LD_VAR 0 4
16440: PPUSH
16441: CALL_OW 12
16445: ARRAY
16446: ST_TO_ADDR
// blockSpawn := 1 ;
16447: LD_ADDR_EXP 30
16451: PUSH
16452: LD_INT 1
16454: ST_TO_ADDR
// uc_side := 2 ;
16455: LD_ADDR_OWVAR 20
16459: PUSH
16460: LD_INT 2
16462: ST_TO_ADDR
// uc_nation := 2 ;
16463: LD_ADDR_OWVAR 21
16467: PUSH
16468: LD_INT 2
16470: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
16471: LD_ADDR_EXP 20
16475: PUSH
16476: LD_STRING Kurt
16478: PPUSH
16479: LD_INT 0
16481: PPUSH
16482: LD_STRING 
16484: PPUSH
16485: CALL 41187 0 3
16489: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
16490: LD_EXP 20
16494: PPUSH
16495: LD_VAR 0 4
16499: PPUSH
16500: CALL_OW 250
16504: PPUSH
16505: LD_VAR 0 4
16509: PPUSH
16510: CALL_OW 251
16514: PPUSH
16515: LD_INT 5
16517: PPUSH
16518: LD_INT 1
16520: PPUSH
16521: CALL_OW 50
// InGameOn ;
16525: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
16529: LD_EXP 20
16533: PPUSH
16534: CALL_OW 87
// wait ( 0 0$2 ) ;
16538: LD_INT 70
16540: PPUSH
16541: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
16545: LD_EXP 20
16549: PPUSH
16550: LD_VAR 0 4
16554: PPUSH
16555: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
16559: LD_VAR 0 4
16563: PPUSH
16564: LD_EXP 20
16568: PPUSH
16569: CALL_OW 112
// wait ( 0 0$1 ) ;
16573: LD_INT 35
16575: PPUSH
16576: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
16580: LD_VAR 0 4
16584: PPUSH
16585: LD_EXP 20
16589: PPUSH
16590: CALL_OW 119
// DialogueOn ;
16594: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
16598: LD_EXP 20
16602: PPUSH
16603: LD_STRING D2-Kurt-1
16605: PPUSH
16606: CALL_OW 88
// if tmp = JMM then
16610: LD_VAR 0 4
16614: PUSH
16615: LD_EXP 1
16619: EQUAL
16620: IFFALSE 16712
// begin Say ( JMM , D2-JMM-1 ) ;
16622: LD_EXP 1
16626: PPUSH
16627: LD_STRING D2-JMM-1
16629: PPUSH
16630: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16634: LD_EXP 20
16638: PPUSH
16639: LD_STRING D2-Kurt-2
16641: PPUSH
16642: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
16646: LD_EXP 1
16650: PPUSH
16651: LD_STRING D2-JMM-2
16653: PPUSH
16654: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16658: LD_EXP 20
16662: PPUSH
16663: LD_STRING D2-Kurt-3
16665: PPUSH
16666: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
16670: LD_EXP 1
16674: PPUSH
16675: LD_STRING D2-JMM-3
16677: PPUSH
16678: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16682: LD_EXP 20
16686: PPUSH
16687: LD_STRING D2-Kurt-4
16689: PPUSH
16690: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16694: LD_EXP 1
16698: PPUSH
16699: LD_STRING D2-JMM-4
16701: PPUSH
16702: CALL_OW 88
// DialogueOff ;
16706: CALL_OW 7
// end else
16710: GO 16940
// begin if GetSex ( tmp ) = 1 then
16712: LD_VAR 0 4
16716: PPUSH
16717: CALL_OW 258
16721: PUSH
16722: LD_INT 1
16724: EQUAL
16725: IFFALSE 16741
// Say ( tmp , D2-Sol1-1 ) else
16727: LD_VAR 0 4
16731: PPUSH
16732: LD_STRING D2-Sol1-1
16734: PPUSH
16735: CALL_OW 88
16739: GO 16753
// Say ( tmp , D2-FSol1-1 ) ;
16741: LD_VAR 0 4
16745: PPUSH
16746: LD_STRING D2-FSol1-1
16748: PPUSH
16749: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16753: LD_EXP 20
16757: PPUSH
16758: LD_STRING D2-Kurt-2
16760: PPUSH
16761: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16765: LD_VAR 0 4
16769: PPUSH
16770: CALL_OW 258
16774: PUSH
16775: LD_INT 1
16777: EQUAL
16778: IFFALSE 16794
// Say ( tmp , D2-Sol1-2 ) else
16780: LD_VAR 0 4
16784: PPUSH
16785: LD_STRING D2-Sol1-2
16787: PPUSH
16788: CALL_OW 88
16792: GO 16806
// Say ( tmp , D2-FSol1-2 ) ;
16794: LD_VAR 0 4
16798: PPUSH
16799: LD_STRING D2-FSol1-2
16801: PPUSH
16802: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16806: LD_EXP 20
16810: PPUSH
16811: LD_STRING D2-Kurt-3
16813: PPUSH
16814: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16818: LD_VAR 0 4
16822: PPUSH
16823: CALL_OW 258
16827: PUSH
16828: LD_INT 1
16830: EQUAL
16831: IFFALSE 16847
// Say ( tmp , D2-Sol1-3 ) else
16833: LD_VAR 0 4
16837: PPUSH
16838: LD_STRING D2-Sol1-3
16840: PPUSH
16841: CALL_OW 88
16845: GO 16859
// Say ( tmp , D2-FSol1-3 ) ;
16847: LD_VAR 0 4
16851: PPUSH
16852: LD_STRING D2-FSol1-3
16854: PPUSH
16855: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16859: LD_EXP 20
16863: PPUSH
16864: LD_STRING D2-Kurt-4
16866: PPUSH
16867: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16871: LD_VAR 0 4
16875: PPUSH
16876: CALL_OW 258
16880: PUSH
16881: LD_INT 1
16883: EQUAL
16884: IFFALSE 16912
// begin Say ( tmp , D2-Sol1-4 ) ;
16886: LD_VAR 0 4
16890: PPUSH
16891: LD_STRING D2-Sol1-4
16893: PPUSH
16894: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
16898: LD_VAR 0 4
16902: PPUSH
16903: LD_STRING D2-Sol1-5
16905: PPUSH
16906: CALL_OW 88
// end else
16910: GO 16936
// begin Say ( tmp , D2-FSol1-4 ) ;
16912: LD_VAR 0 4
16916: PPUSH
16917: LD_STRING D2-FSol1-4
16919: PPUSH
16920: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16924: LD_VAR 0 4
16928: PPUSH
16929: LD_STRING D2-FSol1-5
16931: PPUSH
16932: CALL_OW 88
// end ; DialogueOff ;
16936: CALL_OW 7
// end ; dec := ShowQuery1 ;
16940: LD_ADDR_VAR 0 6
16944: PUSH
16945: CALL 7307 0 0
16949: ST_TO_ADDR
// if dec = 1 then
16950: LD_VAR 0 6
16954: PUSH
16955: LD_INT 1
16957: EQUAL
16958: IFFALSE 17020
// begin DialogueOn ;
16960: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16964: LD_EXP 20
16968: PPUSH
16969: LD_STRING D2a-Kurt-1
16971: PPUSH
16972: CALL_OW 88
// DialogueOff ;
16976: CALL_OW 7
// InGameOff ;
16980: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16984: LD_INT 1
16986: PPUSH
16987: LD_INT 2
16989: PPUSH
16990: LD_INT 2
16992: PPUSH
16993: LD_INT 1
16995: PPUSH
16996: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17000: LD_EXP 20
17004: PPUSH
17005: LD_INT 8
17007: PPUSH
17008: CALL_OW 113
// readyToEscape := 1 ;
17012: LD_ADDR_EXP 22
17016: PUSH
17017: LD_INT 1
17019: ST_TO_ADDR
// end ; if dec = 2 then
17020: LD_VAR 0 6
17024: PUSH
17025: LD_INT 2
17027: EQUAL
17028: IFFALSE 17496
// begin DialogueOn ;
17030: CALL_OW 6
// if tmp = JMM then
17034: LD_VAR 0 4
17038: PUSH
17039: LD_EXP 1
17043: EQUAL
17044: IFFALSE 17100
// begin Say ( JMM , D2b-JMM-1 ) ;
17046: LD_EXP 1
17050: PPUSH
17051: LD_STRING D2b-JMM-1
17053: PPUSH
17054: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17058: LD_EXP 20
17062: PPUSH
17063: LD_STRING D2b-Kurt-1
17065: PPUSH
17066: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17070: LD_EXP 1
17074: PPUSH
17075: LD_STRING D2b-JMM-2
17077: PPUSH
17078: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17082: LD_EXP 20
17086: PPUSH
17087: LD_STRING D2b-Kurt-2
17089: PPUSH
17090: CALL_OW 88
// DialogueOff ;
17094: CALL_OW 7
// end else
17098: GO 17251
// begin if GetSex ( tmp ) = 1 then
17100: LD_VAR 0 4
17104: PPUSH
17105: CALL_OW 258
17109: PUSH
17110: LD_INT 1
17112: EQUAL
17113: IFFALSE 17129
// Say ( tmp , D2b-Sol1-1 ) else
17115: LD_VAR 0 4
17119: PPUSH
17120: LD_STRING D2b-Sol1-1
17122: PPUSH
17123: CALL_OW 88
17127: GO 17141
// Say ( tmp , D2b-FSol1-1 ) ;
17129: LD_VAR 0 4
17133: PPUSH
17134: LD_STRING D2b-FSol1-1
17136: PPUSH
17137: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17141: LD_EXP 20
17145: PPUSH
17146: LD_STRING D2b-Kurt-1
17148: PPUSH
17149: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17153: LD_VAR 0 4
17157: PPUSH
17158: CALL_OW 258
17162: PUSH
17163: LD_INT 1
17165: EQUAL
17166: IFFALSE 17182
// Say ( tmp , D2b-Sol1-2 ) else
17168: LD_VAR 0 4
17172: PPUSH
17173: LD_STRING D2b-Sol1-2
17175: PPUSH
17176: CALL_OW 88
17180: GO 17194
// Say ( tmp , D2b-FSol1-2 ) ;
17182: LD_VAR 0 4
17186: PPUSH
17187: LD_STRING D2b-FSol1-2
17189: PPUSH
17190: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17194: LD_EXP 20
17198: PPUSH
17199: LD_STRING D2b-Kurt-2
17201: PPUSH
17202: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17206: LD_VAR 0 4
17210: PPUSH
17211: CALL_OW 258
17215: PUSH
17216: LD_INT 1
17218: EQUAL
17219: IFFALSE 17235
// Say ( tmp , D2c-Sol1-2 ) else
17221: LD_VAR 0 4
17225: PPUSH
17226: LD_STRING D2c-Sol1-2
17228: PPUSH
17229: CALL_OW 88
17233: GO 17247
// Say ( tmp , D2c-FSol1-2 ) ;
17235: LD_VAR 0 4
17239: PPUSH
17240: LD_STRING D2c-FSol1-2
17242: PPUSH
17243: CALL_OW 88
// DialogueOff ;
17247: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
17251: LD_ADDR_VAR 0 7
17255: PUSH
17256: CALL 7328 0 0
17260: ST_TO_ADDR
// if dec2 = 1 then
17261: LD_VAR 0 7
17265: PUSH
17266: LD_INT 1
17268: EQUAL
17269: IFFALSE 17331
// begin DialogueOn ;
17271: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17275: LD_EXP 20
17279: PPUSH
17280: LD_STRING D2a-Kurt-1
17282: PPUSH
17283: CALL_OW 88
// DialogueOff ;
17287: CALL_OW 7
// InGameOff ;
17291: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17295: LD_INT 1
17297: PPUSH
17298: LD_INT 2
17300: PPUSH
17301: LD_INT 2
17303: PPUSH
17304: LD_INT 1
17306: PPUSH
17307: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17311: LD_EXP 20
17315: PPUSH
17316: LD_INT 8
17318: PPUSH
17319: CALL_OW 113
// readyToEscape := 1 ;
17323: LD_ADDR_EXP 22
17327: PUSH
17328: LD_INT 1
17330: ST_TO_ADDR
// end ; if dec2 = 2 then
17331: LD_VAR 0 7
17335: PUSH
17336: LD_INT 2
17338: EQUAL
17339: IFFALSE 17496
// begin if tmp = JMM then
17341: LD_VAR 0 4
17345: PUSH
17346: LD_EXP 1
17350: EQUAL
17351: IFFALSE 17411
// begin DialogueOn ;
17353: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17357: LD_EXP 1
17361: PPUSH
17362: LD_STRING D2c-JMM-1
17364: PPUSH
17365: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17369: LD_EXP 20
17373: PPUSH
17374: LD_STRING D2c-Kurt-1
17376: PPUSH
17377: CALL_OW 88
// DialogueOff ;
17381: CALL_OW 7
// InGameOff ;
17385: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17389: LD_EXP 20
17393: PPUSH
17394: LD_INT 8
17396: PPUSH
17397: CALL_OW 113
// readyToEscape := 1 ;
17401: LD_ADDR_EXP 22
17405: PUSH
17406: LD_INT 1
17408: ST_TO_ADDR
// end else
17409: GO 17496
// begin DialogueOn ;
17411: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17415: LD_VAR 0 4
17419: PPUSH
17420: CALL_OW 258
17424: PUSH
17425: LD_INT 1
17427: EQUAL
17428: IFFALSE 17444
// Say ( tmp , D2c-Sol1-1 ) else
17430: LD_VAR 0 4
17434: PPUSH
17435: LD_STRING D2c-Sol1-1
17437: PPUSH
17438: CALL_OW 88
17442: GO 17456
// Say ( tmp , D2c-FSol1-1 ) ;
17444: LD_VAR 0 4
17448: PPUSH
17449: LD_STRING D2c-FSol1-1
17451: PPUSH
17452: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17456: LD_EXP 20
17460: PPUSH
17461: LD_STRING D2c-Kurt-1
17463: PPUSH
17464: CALL_OW 88
// DialogueOff ;
17468: CALL_OW 7
// InGameOff ;
17472: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17476: LD_EXP 20
17480: PPUSH
17481: LD_INT 8
17483: PPUSH
17484: CALL_OW 113
// readyToEscape := 1 ;
17488: LD_ADDR_EXP 22
17492: PUSH
17493: LD_INT 1
17495: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17496: LD_VAR 0 6
17500: PUSH
17501: LD_INT 3
17503: EQUAL
17504: IFFALSE 17665
// begin DialogueOn ;
17506: CALL_OW 6
// if tmp = JMM then
17510: LD_VAR 0 4
17514: PUSH
17515: LD_EXP 1
17519: EQUAL
17520: IFFALSE 17580
// begin DialogueOn ;
17522: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17526: LD_EXP 1
17530: PPUSH
17531: LD_STRING D2c-JMM-1
17533: PPUSH
17534: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17538: LD_EXP 20
17542: PPUSH
17543: LD_STRING D2c-Kurt-1
17545: PPUSH
17546: CALL_OW 88
// DialogueOff ;
17550: CALL_OW 7
// InGameOff ;
17554: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17558: LD_EXP 20
17562: PPUSH
17563: LD_INT 8
17565: PPUSH
17566: CALL_OW 113
// readyToEscape := 1 ;
17570: LD_ADDR_EXP 22
17574: PUSH
17575: LD_INT 1
17577: ST_TO_ADDR
// end else
17578: GO 17665
// begin DialogueOn ;
17580: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17584: LD_VAR 0 4
17588: PPUSH
17589: CALL_OW 258
17593: PUSH
17594: LD_INT 1
17596: EQUAL
17597: IFFALSE 17613
// Say ( tmp , D2c-Sol1-1 ) else
17599: LD_VAR 0 4
17603: PPUSH
17604: LD_STRING D2c-Sol1-1
17606: PPUSH
17607: CALL_OW 88
17611: GO 17625
// Say ( tmp , D2c-FSol1-1 ) ;
17613: LD_VAR 0 4
17617: PPUSH
17618: LD_STRING D2c-FSol1-1
17620: PPUSH
17621: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17625: LD_EXP 20
17629: PPUSH
17630: LD_STRING D2c-Kurt-1
17632: PPUSH
17633: CALL_OW 88
// DialogueOff ;
17637: CALL_OW 7
// InGameOff ;
17641: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17645: LD_EXP 20
17649: PPUSH
17650: LD_INT 8
17652: PPUSH
17653: CALL_OW 113
// readyToEscape := 1 ;
17657: LD_ADDR_EXP 22
17661: PUSH
17662: LD_INT 1
17664: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
17665: LD_ADDR_EXP 30
17669: PUSH
17670: LD_INT 0
17672: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17673: LD_INT 35
17675: PPUSH
17676: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
17680: LD_EXP 20
17684: PPUSH
17685: LD_INT 8
17687: PPUSH
17688: CALL_OW 308
17692: PUSH
17693: LD_EXP 22
17697: AND
17698: PUSH
17699: LD_EXP 20
17703: PPUSH
17704: CALL_OW 301
17708: OR
17709: IFFALSE 17673
// if IsDead ( Kurt ) then
17711: LD_EXP 20
17715: PPUSH
17716: CALL_OW 301
17720: IFFALSE 17724
// exit ;
17722: GO 17779
// RemoveUnit ( Kurt ) ;
17724: LD_EXP 20
17728: PPUSH
17729: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
17733: LD_EXP 20
17737: PPUSH
17738: LD_STRING Kurt
17740: PPUSH
17741: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
17745: LD_INT 1
17747: PPUSH
17748: LD_INT 2
17750: PPUSH
17751: CALL_OW 81
17755: PUSH
17756: LD_INT 0
17758: EQUAL
17759: IFFALSE 17771
// kurtStatus = 1 else
17761: LD_ADDR_EXP 21
17765: PUSH
17766: LD_INT 1
17768: ST_TO_ADDR
17769: GO 17779
// kurtStatus = 2 ;
17771: LD_ADDR_EXP 21
17775: PUSH
17776: LD_INT 2
17778: ST_TO_ADDR
// end ; end_of_file
17779: LD_VAR 0 1
17783: RET
// every 0 0$2 do
17784: GO 17786
17786: DISABLE
// begin enable ;
17787: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
17788: LD_INT 3
17790: PPUSH
17791: LD_INT 2
17793: PPUSH
17794: LD_INT 10
17796: PPUSH
17797: LD_EXP 32
17801: PPUSH
17802: CALL 7759 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
17806: LD_INT 3
17808: PPUSH
17809: LD_INT 12
17811: PPUSH
17812: LD_EXP 32
17816: PPUSH
17817: CALL 9362 0 3
// if disableHealAI = 0 then
17821: LD_EXP 34
17825: PUSH
17826: LD_INT 0
17828: EQUAL
17829: IFFALSE 17850
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
17831: LD_INT 3
17833: PPUSH
17834: LD_INT 9
17836: PPUSH
17837: LD_INT 10
17839: PPUSH
17840: LD_INT 32
17842: PUSH
17843: EMPTY
17844: LIST
17845: PPUSH
17846: CALL 8126 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17850: LD_INT 3
17852: PPUSH
17853: LD_INT 51
17855: PPUSH
17856: LD_INT 6
17858: PPUSH
17859: CALL 8815 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
17863: LD_INT 2
17865: PPUSH
17866: CALL_OW 303
17870: PUSH
17871: LD_INT 2
17873: PPUSH
17874: CALL_OW 255
17878: PUSH
17879: LD_INT 1
17881: EQUAL
17882: OR
17883: IFFALSE 17897
// DefendDepot ( 3 , rudepo ) else
17885: LD_INT 3
17887: PPUSH
17888: LD_INT 2
17890: PPUSH
17891: CALL 8642 0 2
17895: GO 17907
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
17897: LD_INT 3
17899: PPUSH
17900: LD_INT 10
17902: PPUSH
17903: CALL 8933 0 2
// end ;
17907: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17908: LD_INT 22
17910: PUSH
17911: LD_INT 3
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 21
17920: PUSH
17921: LD_INT 2
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 55
17930: PUSH
17931: EMPTY
17932: LIST
17933: PUSH
17934: LD_INT 3
17936: PUSH
17937: LD_INT 34
17939: PUSH
17940: LD_INT 51
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: PPUSH
17957: CALL_OW 69
17961: PUSH
17962: LD_INT 0
17964: EQUAL
17965: PUSH
17966: LD_INT 21
17968: PPUSH
17969: CALL_OW 255
17973: PUSH
17974: LD_INT 3
17976: EQUAL
17977: AND
17978: PUSH
17979: LD_INT 21
17981: PPUSH
17982: CALL_OW 302
17986: AND
17987: PUSH
17988: LD_INT 2
17990: PPUSH
17991: CALL_OW 255
17995: PUSH
17996: LD_INT 3
17998: EQUAL
17999: AND
18000: PUSH
18001: LD_INT 2
18003: PPUSH
18004: CALL_OW 302
18008: AND
18009: PUSH
18010: LD_INT 21
18012: PPUSH
18013: CALL_OW 313
18017: AND
18018: PUSH
18019: LD_EXP 48
18023: PUSH
18024: LD_INT 4
18026: PUSH
18027: LD_INT 5
18029: PUSH
18030: LD_INT 6
18032: PUSH
18033: LD_INT 6
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: PUSH
18042: LD_OWVAR 67
18046: ARRAY
18047: LESS
18048: AND
18049: IFFALSE 18270
18051: GO 18053
18053: DISABLE
// begin enable ;
18054: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18055: LD_INT 2
18057: PPUSH
18058: CALL_OW 274
18062: PPUSH
18063: LD_INT 1
18065: PPUSH
18066: LD_INT 2000
18068: PPUSH
18069: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18073: LD_INT 3
18075: PPUSH
18076: LD_INT 21
18078: PPUSH
18079: LD_INT 4
18081: PUSH
18082: LD_INT 5
18084: PUSH
18085: LD_INT 6
18087: PUSH
18088: LD_INT 6
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: PUSH
18097: LD_OWVAR 67
18101: ARRAY
18102: PUSH
18103: LD_EXP 48
18107: MINUS
18108: PPUSH
18109: LD_INT 43
18111: PUSH
18112: LD_INT 43
18114: PUSH
18115: LD_INT 44
18117: PUSH
18118: LD_INT 44
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 43
18129: PUSH
18130: LD_INT 43
18132: PUSH
18133: LD_INT 43
18135: PUSH
18136: LD_INT 44
18138: PUSH
18139: LD_INT 44
18141: PUSH
18142: LD_INT 46
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 43
18155: PUSH
18156: LD_INT 43
18158: PUSH
18159: LD_INT 43
18161: PUSH
18162: LD_INT 44
18164: PUSH
18165: LD_INT 44
18167: PUSH
18168: LD_INT 46
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 43
18181: PUSH
18182: LD_INT 43
18184: PUSH
18185: LD_INT 44
18187: PUSH
18188: LD_INT 46
18190: PUSH
18191: LD_INT 46
18193: PUSH
18194: LD_INT 46
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: PUSH
18211: LD_OWVAR 67
18215: ARRAY
18216: PPUSH
18217: LD_INT 1
18219: PPUSH
18220: LD_INT 1
18222: PPUSH
18223: LD_INT 22
18225: PUSH
18226: LD_INT 22
18228: PUSH
18229: LD_INT 24
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 1
18238: PPUSH
18239: LD_INT 2
18241: PPUSH
18242: CALL_OW 12
18246: ARRAY
18247: PUSH
18248: LD_INT 24
18250: PUSH
18251: LD_INT 24
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: PUSH
18260: LD_OWVAR 67
18264: ARRAY
18265: PPUSH
18266: CALL 7605 0 7
// end ;
18270: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
18271: LD_INT 17
18273: PPUSH
18274: CALL_OW 255
18278: PUSH
18279: LD_INT 3
18281: EQUAL
18282: PUSH
18283: LD_INT 17
18285: PPUSH
18286: CALL_OW 302
18290: AND
18291: PUSH
18292: LD_INT 2
18294: PPUSH
18295: CALL_OW 255
18299: PUSH
18300: LD_INT 3
18302: EQUAL
18303: AND
18304: PUSH
18305: LD_INT 2
18307: PPUSH
18308: CALL_OW 302
18312: AND
18313: PUSH
18314: LD_EXP 48
18318: PUSH
18319: LD_INT 4
18321: PUSH
18322: LD_INT 5
18324: PUSH
18325: LD_INT 6
18327: PUSH
18328: LD_INT 7
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: PUSH
18337: LD_OWVAR 67
18341: ARRAY
18342: LESS
18343: AND
18344: IFFALSE 18392
18346: GO 18348
18348: DISABLE
// begin enable ;
18349: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18350: LD_INT 17
18352: PPUSH
18353: LD_INT 22
18355: PPUSH
18356: LD_INT 1
18358: PPUSH
18359: LD_INT 1
18361: PPUSH
18362: LD_INT 42
18364: PUSH
18365: LD_INT 43
18367: PUSH
18368: LD_INT 44
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: LIST
18375: PUSH
18376: LD_INT 1
18378: PPUSH
18379: LD_INT 3
18381: PPUSH
18382: CALL_OW 12
18386: ARRAY
18387: PPUSH
18388: CALL_OW 185
// end ;
18392: END
// every 2 2$0 do var i , j ;
18393: GO 18395
18395: DISABLE
18396: LD_INT 0
18398: PPUSH
18399: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18400: LD_INT 14700
18402: PUSH
18403: LD_INT 33600
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 1
18412: PPUSH
18413: LD_INT 2
18415: PPUSH
18416: CALL_OW 12
18420: ARRAY
18421: PPUSH
18422: CALL_OW 67
// disableHealAI = 1 ;
18426: LD_ADDR_EXP 34
18430: PUSH
18431: LD_INT 1
18433: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18434: LD_ADDR_VAR 0 1
18438: PUSH
18439: LD_INT 22
18441: PUSH
18442: LD_INT 3
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 25
18451: PUSH
18452: LD_INT 4
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PPUSH
18463: CALL_OW 69
18467: PUSH
18468: FOR_IN
18469: IFFALSE 18482
// ComExitBuilding ( i ) ;
18471: LD_VAR 0 1
18475: PPUSH
18476: CALL_OW 122
18480: GO 18468
18482: POP
18483: POP
// wait ( 0 0$1 ) ;
18484: LD_INT 35
18486: PPUSH
18487: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18491: LD_INT 35
18493: PPUSH
18494: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18498: LD_ADDR_VAR 0 1
18502: PUSH
18503: LD_INT 22
18505: PUSH
18506: LD_INT 3
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 25
18515: PUSH
18516: LD_INT 4
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PPUSH
18527: CALL_OW 69
18531: PUSH
18532: FOR_IN
18533: IFFALSE 18610
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18535: LD_ADDR_VAR 0 2
18539: PUSH
18540: LD_INT 17
18542: PPUSH
18543: LD_INT 22
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 25
18555: PUSH
18556: LD_INT 12
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PPUSH
18567: CALL_OW 70
18571: PUSH
18572: FOR_IN
18573: IFFALSE 18606
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18575: LD_VAR 0 1
18579: PPUSH
18580: LD_VAR 0 2
18584: PPUSH
18585: CALL_OW 250
18589: PPUSH
18590: LD_VAR 0 2
18594: PPUSH
18595: CALL_OW 251
18599: PPUSH
18600: CALL_OW 191
18604: GO 18572
18606: POP
18607: POP
18608: GO 18532
18610: POP
18611: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18612: LD_INT 22
18614: PUSH
18615: LD_INT 3
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 25
18624: PUSH
18625: LD_INT 4
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PPUSH
18636: CALL_OW 69
18640: PUSH
18641: LD_INT 0
18643: EQUAL
18644: PUSH
18645: LD_EXP 33
18649: PUSH
18650: LD_INT 6
18652: PUSH
18653: LD_INT 7
18655: PUSH
18656: LD_INT 8
18658: PUSH
18659: LD_INT 8
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: PUSH
18668: LD_OWVAR 67
18672: ARRAY
18673: GREATEREQUAL
18674: OR
18675: PUSH
18676: LD_INT 17
18678: PPUSH
18679: LD_INT 22
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 25
18691: PUSH
18692: LD_INT 12
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PPUSH
18703: CALL_OW 70
18707: PUSH
18708: LD_INT 0
18710: EQUAL
18711: OR
18712: IFFALSE 18491
// disableHealAI = 0 ;
18714: LD_ADDR_EXP 34
18718: PUSH
18719: LD_INT 0
18721: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18722: LD_ADDR_VAR 0 1
18726: PUSH
18727: LD_INT 22
18729: PUSH
18730: LD_INT 3
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 25
18739: PUSH
18740: LD_INT 12
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PPUSH
18751: CALL_OW 69
18755: PUSH
18756: FOR_IN
18757: IFFALSE 18773
// SetClass ( i , 16 ) ;
18759: LD_VAR 0 1
18763: PPUSH
18764: LD_INT 16
18766: PPUSH
18767: CALL_OW 336
18771: GO 18756
18773: POP
18774: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18775: LD_ADDR_VAR 0 1
18779: PUSH
18780: LD_INT 22
18782: PUSH
18783: LD_INT 3
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 25
18792: PUSH
18793: LD_INT 4
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PPUSH
18804: CALL_OW 69
18808: PUSH
18809: FOR_IN
18810: IFFALSE 18826
// ComEnterUnit ( i , rulab ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_INT 32
18819: PPUSH
18820: CALL_OW 120
18824: GO 18809
18826: POP
18827: POP
// end ; end_of_file
18828: PPOPN 2
18830: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18831: LD_EXP 27
18835: PUSH
18836: LD_INT 0
18838: LESSEQUAL
18839: IFFALSE 18993
18841: GO 18843
18843: DISABLE
18844: LD_INT 0
18846: PPUSH
18847: PPUSH
18848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18849: LD_ADDR_VAR 0 2
18853: PUSH
18854: LD_INT 22
18856: PUSH
18857: LD_INT 1
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 21
18866: PUSH
18867: LD_INT 3
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 2
18876: PUSH
18877: LD_INT 30
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 30
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: LIST
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: LIST
18906: PPUSH
18907: CALL_OW 69
18911: ST_TO_ADDR
// for i in tmp do
18912: LD_ADDR_VAR 0 1
18916: PUSH
18917: LD_VAR 0 2
18921: PUSH
18922: FOR_IN
18923: IFFALSE 18956
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18925: LD_ADDR_VAR 0 3
18929: PUSH
18930: LD_VAR 0 3
18934: PUSH
18935: LD_VAR 0 1
18939: PPUSH
18940: CALL_OW 274
18944: PPUSH
18945: LD_INT 1
18947: PPUSH
18948: CALL_OW 275
18952: PLUS
18953: ST_TO_ADDR
18954: GO 18922
18956: POP
18957: POP
// if yourCrates >= needCrates then
18958: LD_VAR 0 3
18962: PUSH
18963: LD_EXP 26
18967: GREATEREQUAL
18968: IFFALSE 18986
// FinishMission ( yourCrates , needCrates ) else
18970: LD_VAR 0 3
18974: PPUSH
18975: LD_EXP 26
18979: PPUSH
18980: CALL 18996 0 2
18984: GO 18993
// YouLost ( matmin ) ;
18986: LD_STRING matmin
18988: PPUSH
18989: CALL_OW 104
// end ;
18993: PPOPN 3
18995: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
18996: LD_INT 0
18998: PPUSH
18999: PPUSH
19000: PPUSH
19001: PPUSH
// if killCounter = 0 then
19002: LD_EXP 46
19006: PUSH
19007: LD_INT 0
19009: EQUAL
19010: IFFALSE 19019
// SetAchievement ( ACH_SURV ) ;
19012: LD_STRING ACH_SURV
19014: PPUSH
19015: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19019: LD_INT 22
19021: PUSH
19022: LD_INT 3
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 21
19031: PUSH
19032: LD_INT 3
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PPUSH
19043: CALL_OW 69
19047: PUSH
19048: LD_INT 0
19050: EQUAL
19051: IFFALSE 19067
// begin wait ( 3 ) ;
19053: LD_INT 3
19055: PPUSH
19056: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19060: LD_STRING ACH_BASEDESTROYER
19062: PPUSH
19063: CALL_OW 543
// end ; m1 := false ;
19067: LD_ADDR_VAR 0 4
19071: PUSH
19072: LD_INT 0
19074: ST_TO_ADDR
// m2 := false ;
19075: LD_ADDR_VAR 0 5
19079: PUSH
19080: LD_INT 0
19082: ST_TO_ADDR
// m3 := false ;
19083: LD_ADDR_VAR 0 6
19087: PUSH
19088: LD_INT 0
19090: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19091: LD_VAR 0 1
19095: PUSH
19096: LD_INT 100
19098: PUSH
19099: LD_INT 140
19101: PUSH
19102: LD_INT 180
19104: PUSH
19105: LD_INT 220
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: PUSH
19114: LD_OWVAR 67
19118: ARRAY
19119: PLUS
19120: PUSH
19121: LD_VAR 0 2
19125: GREATER
19126: IFFALSE 19158
// begin AddMedal ( cans , 1 ) ;
19128: LD_STRING cans
19130: PPUSH
19131: LD_INT 1
19133: PPUSH
19134: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19138: LD_INT 1
19140: PPUSH
19141: LD_STRING 06_crates_1
19143: PPUSH
19144: CALL_OW 39
// m1 := true ;
19148: LD_ADDR_VAR 0 4
19152: PUSH
19153: LD_INT 1
19155: ST_TO_ADDR
// end else
19156: GO 19179
// begin AddMedal ( cans , - 1 ) ;
19158: LD_STRING cans
19160: PPUSH
19161: LD_INT 1
19163: NEG
19164: PPUSH
19165: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19169: LD_INT 0
19171: PPUSH
19172: LD_STRING 06_crates_1
19174: PPUSH
19175: CALL_OW 39
// end ; if unitLost < 3 then
19179: LD_EXP 31
19183: PUSH
19184: LD_INT 3
19186: LESS
19187: IFFALSE 19209
// begin AddMedal ( people , 1 ) ;
19189: LD_STRING people
19191: PPUSH
19192: LD_INT 1
19194: PPUSH
19195: CALL_OW 101
// m2 := true ;
19199: LD_ADDR_VAR 0 5
19203: PUSH
19204: LD_INT 1
19206: ST_TO_ADDR
// end else
19207: GO 19220
// AddMedal ( people , - 1 ) ;
19209: LD_STRING people
19211: PPUSH
19212: LD_INT 1
19214: NEG
19215: PPUSH
19216: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19220: LD_EXP 29
19224: PPUSH
19225: LD_STRING 06_remoteVehs_1
19227: PPUSH
19228: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19232: LD_EXP 29
19236: PUSH
19237: LD_INT 1
19239: EQUAL
19240: IFFALSE 19262
// begin AddMedal ( remote , 1 ) ;
19242: LD_STRING remote
19244: PPUSH
19245: LD_INT 1
19247: PPUSH
19248: CALL_OW 101
// m3 := true ;
19252: LD_ADDR_VAR 0 6
19256: PUSH
19257: LD_INT 1
19259: ST_TO_ADDR
// end else
19260: GO 19302
// begin if GetTech ( 18 , 1 ) = state_enabled then
19262: LD_INT 18
19264: PPUSH
19265: LD_INT 1
19267: PPUSH
19268: CALL_OW 321
19272: PUSH
19273: LD_INT 1
19275: EQUAL
19276: IFFALSE 19291
// AddMedal ( remote , - 1 ) else
19278: LD_STRING remote
19280: PPUSH
19281: LD_INT 1
19283: NEG
19284: PPUSH
19285: CALL_OW 101
19289: GO 19302
// AddMedal ( remote , - 2 ) ;
19291: LD_STRING remote
19293: PPUSH
19294: LD_INT 2
19296: NEG
19297: PPUSH
19298: CALL_OW 101
// end ; if m1 and m2 and m3 then
19302: LD_VAR 0 4
19306: PUSH
19307: LD_VAR 0 5
19311: AND
19312: PUSH
19313: LD_VAR 0 6
19317: AND
19318: IFFALSE 19334
// begin wait ( 3 ) ;
19320: LD_INT 3
19322: PPUSH
19323: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
19327: LD_STRING ACH_ASPEED_6
19329: PPUSH
19330: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
19334: LD_OWVAR 67
19338: PUSH
19339: LD_INT 3
19341: GREATEREQUAL
19342: PUSH
19343: LD_VAR 0 4
19347: AND
19348: PUSH
19349: LD_VAR 0 5
19353: AND
19354: PUSH
19355: LD_VAR 0 6
19359: AND
19360: IFFALSE 19372
// SetAchievementEX ( ACH_AMER , 6 ) ;
19362: LD_STRING ACH_AMER
19364: PPUSH
19365: LD_INT 6
19367: PPUSH
19368: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
19372: LD_EXP 21
19376: PPUSH
19377: LD_STRING 06_KurtStatus_1
19379: PPUSH
19380: CALL_OW 39
// GiveMedals ( Main ) ;
19384: LD_STRING Main
19386: PPUSH
19387: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19391: LD_INT 22
19393: PUSH
19394: LD_INT 1
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 21
19403: PUSH
19404: LD_INT 1
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 50
19413: PUSH
19414: EMPTY
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: PUSH
19420: LD_INT 25
19422: PUSH
19423: LD_INT 1
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 25
19432: PUSH
19433: LD_INT 2
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 25
19442: PUSH
19443: LD_INT 3
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 25
19452: PUSH
19453: LD_INT 4
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: PPUSH
19473: CALL_OW 69
19477: PPUSH
19478: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19482: LD_EXP 1
19486: PPUSH
19487: LD_EXP 43
19491: PUSH
19492: LD_STRING JMM
19494: STR
19495: PPUSH
19496: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19500: LD_EXP 2
19504: PPUSH
19505: LD_EXP 43
19509: PUSH
19510: LD_STRING Lisa
19512: STR
19513: PPUSH
19514: CALL 6920 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19518: LD_EXP 3
19522: PPUSH
19523: LD_EXP 43
19527: PUSH
19528: LD_STRING Bobby
19530: STR
19531: PPUSH
19532: CALL 6920 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19536: LD_EXP 4
19540: PPUSH
19541: LD_EXP 43
19545: PUSH
19546: LD_STRING Cyrus
19548: STR
19549: PPUSH
19550: CALL 6920 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19554: LD_EXP 5
19558: PPUSH
19559: LD_EXP 43
19563: PUSH
19564: LD_STRING Frank
19566: STR
19567: PPUSH
19568: CALL 6920 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19572: LD_EXP 6
19576: PPUSH
19577: LD_EXP 43
19581: PUSH
19582: LD_STRING Brown
19584: STR
19585: PPUSH
19586: CALL 6920 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19590: LD_EXP 7
19594: PPUSH
19595: LD_EXP 43
19599: PUSH
19600: LD_STRING Donaldson
19602: STR
19603: PPUSH
19604: CALL 6920 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19608: LD_EXP 8
19612: PPUSH
19613: LD_EXP 43
19617: PUSH
19618: LD_STRING Gladstone
19620: STR
19621: PPUSH
19622: CALL 6920 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19626: LD_EXP 9
19630: PPUSH
19631: LD_EXP 43
19635: PUSH
19636: LD_STRING Denis
19638: STR
19639: PPUSH
19640: CALL 6920 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
19644: LD_EXP 16
19648: PPUSH
19649: LD_EXP 43
19653: PUSH
19654: LD_STRING Joan
19656: STR
19657: PPUSH
19658: CALL 6920 0 2
// if IsLive ( Mike ) then
19662: LD_EXP 11
19666: PPUSH
19667: CALL_OW 300
19671: IFFALSE 19691
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
19673: LD_EXP 11
19677: PPUSH
19678: LD_EXP 43
19682: PUSH
19683: LD_STRING Mike
19685: STR
19686: PPUSH
19687: CALL_OW 38
// if IsLive ( Joan ) then
19691: LD_EXP 16
19695: PPUSH
19696: CALL_OW 300
19700: IFFALSE 19714
// SaveCharacters ( Joan , Joan ) ;
19702: LD_EXP 16
19706: PPUSH
19707: LD_STRING Joan
19709: PPUSH
19710: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
19714: LD_EXP 17
19718: PPUSH
19719: LD_STRING 06_JoanStatus_1
19721: PPUSH
19722: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
19726: LD_INT 50
19728: PUSH
19729: EMPTY
19730: LIST
19731: PUSH
19732: LD_INT 22
19734: PUSH
19735: LD_INT 1
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 21
19744: PUSH
19745: LD_INT 1
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 2
19754: PUSH
19755: LD_INT 25
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 25
19767: PUSH
19768: LD_INT 2
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 25
19777: PUSH
19778: LD_INT 3
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 25
19787: PUSH
19788: LD_INT 4
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: PPUSH
19808: CALL_OW 69
19812: PUSH
19813: LD_EXP 1
19817: PUSH
19818: LD_EXP 2
19822: PUSH
19823: LD_EXP 3
19827: PUSH
19828: LD_EXP 4
19832: PUSH
19833: LD_EXP 5
19837: PUSH
19838: LD_EXP 6
19842: PUSH
19843: LD_EXP 7
19847: PUSH
19848: LD_EXP 8
19852: PUSH
19853: LD_EXP 9
19857: PUSH
19858: LD_EXP 16
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: DIFF
19875: PPUSH
19876: LD_STRING 06_other_survivors
19878: PPUSH
19879: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19883: LD_INT 50
19885: PUSH
19886: EMPTY
19887: LIST
19888: PUSH
19889: LD_INT 22
19891: PUSH
19892: LD_INT 1
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 21
19901: PUSH
19902: LD_INT 1
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 2
19911: PUSH
19912: LD_INT 25
19914: PUSH
19915: LD_INT 12
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 25
19924: PUSH
19925: LD_INT 16
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: LIST
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: PPUSH
19943: CALL_OW 69
19947: PPUSH
19948: LD_STRING 06_other_apemans
19950: PPUSH
19951: CALL_OW 38
// YouWin ;
19955: CALL_OW 103
// end ; end_of_file
19959: LD_VAR 0 3
19963: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
19964: LD_EXP 48
19968: PUSH
19969: LD_OWVAR 1
19973: PUSH
19974: LD_INT 23100
19976: PUSH
19977: LD_INT 21000
19979: PUSH
19980: LD_INT 18900
19982: PUSH
19983: LD_INT 16800
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: PUSH
19992: LD_OWVAR 67
19996: ARRAY
19997: GREATER
19998: AND
19999: IFFALSE 20335
20001: GO 20003
20003: DISABLE
20004: LD_INT 0
20006: PPUSH
20007: PPUSH
20008: PPUSH
20009: PPUSH
// begin enable ;
20010: ENABLE
// for i in ruAttackers do
20011: LD_ADDR_VAR 0 1
20015: PUSH
20016: LD_EXP 48
20020: PUSH
20021: FOR_IN
20022: IFFALSE 20333
// begin if not IsDrivenBy ( i ) then
20024: LD_VAR 0 1
20028: PPUSH
20029: CALL_OW 311
20033: NOT
20034: IFFALSE 20038
// continue ;
20036: GO 20021
// if i mod 2 = 0 then
20038: LD_VAR 0 1
20042: PUSH
20043: LD_INT 2
20045: MOD
20046: PUSH
20047: LD_INT 0
20049: EQUAL
20050: IFFALSE 20116
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] , [ 80 , 12 ] ] else
20052: LD_ADDR_VAR 0 3
20056: PUSH
20057: LD_INT 91
20059: PUSH
20060: LD_INT 52
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 82
20069: PUSH
20070: LD_INT 34
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 90
20079: PUSH
20080: LD_INT 26
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 86
20089: PUSH
20090: LD_INT 16
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 80
20099: PUSH
20100: LD_INT 12
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: ST_TO_ADDR
20114: GO 20189
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 33 , 34 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20116: LD_ADDR_VAR 0 3
20120: PUSH
20121: LD_INT 91
20123: PUSH
20124: LD_INT 52
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 68
20133: PUSH
20134: LD_INT 46
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 48
20143: PUSH
20144: LD_INT 43
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 33
20153: PUSH
20154: LD_INT 34
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 30
20163: PUSH
20164: LD_INT 19
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 38
20173: PUSH
20174: LD_INT 16
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
20189: LD_VAR 0 1
20193: PPUSH
20194: CALL_OW 256
20198: PUSH
20199: LD_INT 1000
20201: EQUAL
20202: IFFALSE 20220
// AgressiveMove ( i , path ) else
20204: LD_VAR 0 1
20208: PPUSH
20209: LD_VAR 0 3
20213: PPUSH
20214: CALL 81259 0 2
20218: GO 20331
// if GetLives ( i ) < 650 then
20220: LD_VAR 0 1
20224: PPUSH
20225: CALL_OW 256
20229: PUSH
20230: LD_INT 650
20232: LESS
20233: IFFALSE 20331
// begin if not IsInArea ( i , russianRepairArea ) then
20235: LD_VAR 0 1
20239: PPUSH
20240: LD_INT 12
20242: PPUSH
20243: CALL_OW 308
20247: NOT
20248: IFFALSE 20317
// begin SetTag ( i , 0 ) ;
20250: LD_VAR 0 1
20254: PPUSH
20255: LD_INT 0
20257: PPUSH
20258: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
20262: LD_VAR 0 1
20266: PPUSH
20267: CALL_OW 261
20271: PUSH
20272: LD_INT 50
20274: LESS
20275: PUSH
20276: LD_INT 21
20278: PPUSH
20279: CALL_OW 302
20283: AND
20284: IFFALSE 20300
// ComMoveUnit ( i , rufab ) else
20286: LD_VAR 0 1
20290: PPUSH
20291: LD_INT 21
20293: PPUSH
20294: CALL_OW 112
20298: GO 20315
// ComMoveXY ( i , 121 , 99 ) ;
20300: LD_VAR 0 1
20304: PPUSH
20305: LD_INT 121
20307: PPUSH
20308: LD_INT 99
20310: PPUSH
20311: CALL_OW 111
// end else
20315: GO 20331
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
20317: LD_VAR 0 1
20321: PPUSH
20322: CALL_OW 311
20326: PPUSH
20327: CALL 80355 0 1
// end ; end ;
20331: GO 20021
20333: POP
20334: POP
// end ;
20335: PPOPN 4
20337: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
20338: LD_INT 0
20340: PPUSH
20341: PPUSH
20342: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
20343: LD_ADDR_VAR 0 2
20347: PUSH
20348: DOUBLE
20349: LD_INT 1
20351: DEC
20352: ST_TO_ADDR
20353: LD_INT 4
20355: PUSH
20356: LD_INT 5
20358: PUSH
20359: LD_INT 6
20361: PUSH
20362: LD_INT 6
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: PUSH
20371: LD_OWVAR 67
20375: ARRAY
20376: PUSH
20377: FOR_TO
20378: IFFALSE 20553
// begin uc_side := 3 ;
20380: LD_ADDR_OWVAR 20
20384: PUSH
20385: LD_INT 3
20387: ST_TO_ADDR
// uc_nation := 3 ;
20388: LD_ADDR_OWVAR 21
20392: PUSH
20393: LD_INT 3
20395: ST_TO_ADDR
// InitHC_All ( ) ;
20396: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
20400: LD_INT 0
20402: PPUSH
20403: LD_INT 4
20405: PUSH
20406: LD_INT 5
20408: PUSH
20409: LD_INT 6
20411: PUSH
20412: LD_INT 6
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: PUSH
20421: LD_OWVAR 67
20425: ARRAY
20426: PPUSH
20427: CALL_OW 381
// un := CreateHuman ;
20431: LD_ADDR_VAR 0 3
20435: PUSH
20436: CALL_OW 44
20440: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
20441: LD_VAR 0 3
20445: PPUSH
20446: LD_INT 127
20448: PPUSH
20449: LD_INT 62
20451: PPUSH
20452: LD_INT 3
20454: PPUSH
20455: LD_INT 0
20457: PPUSH
20458: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
20462: LD_ADDR_EXP 49
20466: PUSH
20467: LD_EXP 49
20471: PPUSH
20472: LD_EXP 49
20476: PUSH
20477: LD_INT 1
20479: PLUS
20480: PPUSH
20481: LD_VAR 0 3
20485: PPUSH
20486: CALL_OW 1
20490: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
20491: LD_VAR 0 3
20495: PPUSH
20496: LD_INT 83
20498: PPUSH
20499: LD_INT 49
20501: PPUSH
20502: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
20506: LD_VAR 0 3
20510: PPUSH
20511: LD_INT 49
20513: PPUSH
20514: LD_INT 43
20516: PPUSH
20517: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
20521: LD_VAR 0 3
20525: PPUSH
20526: LD_INT 31
20528: PPUSH
20529: LD_INT 15
20531: PPUSH
20532: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
20536: LD_VAR 0 3
20540: PPUSH
20541: LD_INT 63
20543: PPUSH
20544: LD_INT 9
20546: PPUSH
20547: CALL_OW 174
// end ;
20551: GO 20377
20553: POP
20554: POP
// end ; end_of_file
20555: LD_VAR 0 1
20559: RET
// export function CreateNature ; var i , un ; begin
20560: LD_INT 0
20562: PPUSH
20563: PPUSH
20564: PPUSH
// for i := 1 to Difficulty + 2 do
20565: LD_ADDR_VAR 0 2
20569: PUSH
20570: DOUBLE
20571: LD_INT 1
20573: DEC
20574: ST_TO_ADDR
20575: LD_OWVAR 67
20579: PUSH
20580: LD_INT 2
20582: PLUS
20583: PUSH
20584: FOR_TO
20585: IFFALSE 20694
// begin hc_sex := sex_male ;
20587: LD_ADDR_OWVAR 27
20591: PUSH
20592: LD_INT 1
20594: ST_TO_ADDR
// uc_side := 0 ;
20595: LD_ADDR_OWVAR 20
20599: PUSH
20600: LD_INT 0
20602: ST_TO_ADDR
// uc_nation := nation_nature ;
20603: LD_ADDR_OWVAR 21
20607: PUSH
20608: LD_INT 0
20610: ST_TO_ADDR
// hc_class := class_tiger ;
20611: LD_ADDR_OWVAR 28
20615: PUSH
20616: LD_INT 14
20618: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20619: LD_ADDR_OWVAR 31
20623: PUSH
20624: LD_EXP 36
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: LD_INT 0
20634: PUSH
20635: LD_INT 0
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
20644: LD_ADDR_OWVAR 35
20648: PUSH
20649: LD_INT 5
20651: NEG
20652: PPUSH
20653: LD_INT 5
20655: PPUSH
20656: CALL_OW 12
20660: PUSH
20661: LD_OWVAR 67
20665: MUL
20666: ST_TO_ADDR
// un := CreateHuman ;
20667: LD_ADDR_VAR 0 3
20671: PUSH
20672: CALL_OW 44
20676: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20677: LD_VAR 0 3
20681: PPUSH
20682: LD_INT 18
20684: PPUSH
20685: LD_INT 0
20687: PPUSH
20688: CALL_OW 49
// end ;
20692: GO 20584
20694: POP
20695: POP
// for i = 1 to rand ( 3 , 4 ) do
20696: LD_ADDR_VAR 0 2
20700: PUSH
20701: DOUBLE
20702: LD_INT 1
20704: DEC
20705: ST_TO_ADDR
20706: LD_INT 3
20708: PPUSH
20709: LD_INT 4
20711: PPUSH
20712: CALL_OW 12
20716: PUSH
20717: FOR_TO
20718: IFFALSE 20788
// begin hc_class := class_phororhacos ;
20720: LD_ADDR_OWVAR 28
20724: PUSH
20725: LD_INT 18
20727: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20728: LD_ADDR_OWVAR 31
20732: PUSH
20733: LD_EXP 36
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: LD_INT 0
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: ST_TO_ADDR
// hc_agressivity := 0 ;
20753: LD_ADDR_OWVAR 35
20757: PUSH
20758: LD_INT 0
20760: ST_TO_ADDR
// un = CreateHuman ;
20761: LD_ADDR_VAR 0 3
20765: PUSH
20766: CALL_OW 44
20770: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20771: LD_VAR 0 3
20775: PPUSH
20776: LD_INT 18
20778: PPUSH
20779: LD_INT 0
20781: PPUSH
20782: CALL_OW 49
// end ;
20786: GO 20717
20788: POP
20789: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
20790: LD_ADDR_VAR 0 2
20794: PUSH
20795: DOUBLE
20796: LD_INT 1
20798: DEC
20799: ST_TO_ADDR
20800: LD_INT 3
20802: PUSH
20803: LD_INT 3
20805: PUSH
20806: LD_INT 4
20808: PUSH
20809: LD_INT 5
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: PUSH
20818: LD_OWVAR 67
20822: ARRAY
20823: PUSH
20824: FOR_TO
20825: IFFALSE 20962
// begin hc_class := class_apeman ;
20827: LD_ADDR_OWVAR 28
20831: PUSH
20832: LD_INT 12
20834: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20835: LD_ADDR_OWVAR 31
20839: PUSH
20840: LD_INT 2
20842: PPUSH
20843: LD_INT 5
20845: PPUSH
20846: CALL_OW 12
20850: PUSH
20851: LD_INT 0
20853: PPUSH
20854: LD_INT 2
20856: PPUSH
20857: CALL_OW 12
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: LD_INT 0
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: ST_TO_ADDR
// hc_agressivity := [ rand ( 0 , 10 ) , rand ( 10 , 20 ) , rand ( 20 , 25 ) , rand ( 20 , 30 ) ] [ Difficulty ] ;
20874: LD_ADDR_OWVAR 35
20878: PUSH
20879: LD_INT 0
20881: PPUSH
20882: LD_INT 10
20884: PPUSH
20885: CALL_OW 12
20889: PUSH
20890: LD_INT 10
20892: PPUSH
20893: LD_INT 20
20895: PPUSH
20896: CALL_OW 12
20900: PUSH
20901: LD_INT 20
20903: PPUSH
20904: LD_INT 25
20906: PPUSH
20907: CALL_OW 12
20911: PUSH
20912: LD_INT 20
20914: PPUSH
20915: LD_INT 30
20917: PPUSH
20918: CALL_OW 12
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: PUSH
20929: LD_OWVAR 67
20933: ARRAY
20934: ST_TO_ADDR
// un := CreateHuman ;
20935: LD_ADDR_VAR 0 3
20939: PUSH
20940: CALL_OW 44
20944: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
20945: LD_VAR 0 3
20949: PPUSH
20950: LD_INT 19
20952: PPUSH
20953: LD_INT 0
20955: PPUSH
20956: CALL_OW 49
// end ;
20960: GO 20824
20962: POP
20963: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
20964: LD_ADDR_VAR 0 2
20968: PUSH
20969: DOUBLE
20970: LD_INT 1
20972: DEC
20973: ST_TO_ADDR
20974: LD_INT 3
20976: PUSH
20977: LD_INT 4
20979: PUSH
20980: LD_INT 5
20982: PUSH
20983: LD_INT 6
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: PUSH
20992: LD_OWVAR 67
20996: ARRAY
20997: PUSH
20998: FOR_TO
20999: IFFALSE 21092
// begin hc_class := class_apeman ;
21001: LD_ADDR_OWVAR 28
21005: PUSH
21006: LD_INT 12
21008: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21009: LD_ADDR_OWVAR 31
21013: PUSH
21014: LD_INT 2
21016: PPUSH
21017: LD_INT 5
21019: PPUSH
21020: CALL_OW 12
21024: PUSH
21025: LD_INT 0
21027: PPUSH
21028: LD_INT 2
21030: PPUSH
21031: CALL_OW 12
21035: PUSH
21036: LD_INT 0
21038: PUSH
21039: LD_INT 0
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: ST_TO_ADDR
// hc_agressivity := rand ( - 10 , 10 ) ;
21048: LD_ADDR_OWVAR 35
21052: PUSH
21053: LD_INT 10
21055: NEG
21056: PPUSH
21057: LD_INT 10
21059: PPUSH
21060: CALL_OW 12
21064: ST_TO_ADDR
// un = CreateHuman ;
21065: LD_ADDR_VAR 0 3
21069: PUSH
21070: CALL_OW 44
21074: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21075: LD_VAR 0 3
21079: PPUSH
21080: LD_INT 20
21082: PPUSH
21083: LD_INT 0
21085: PPUSH
21086: CALL_OW 49
// end ;
21090: GO 20998
21092: POP
21093: POP
// end ; end_of_file end_of_file
21094: LD_VAR 0 1
21098: RET
// every 0 0$1 do
21099: GO 21101
21101: DISABLE
// begin enable ;
21102: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21103: LD_STRING updateTimer(
21105: PUSH
21106: LD_OWVAR 1
21110: STR
21111: PUSH
21112: LD_STRING );
21114: STR
21115: PPUSH
21116: CALL_OW 559
// end ;
21120: END
// export function SOS_MapStart ( ) ; begin
21121: LD_INT 0
21123: PPUSH
// if streamModeActive then
21124: LD_EXP 51
21128: IFFALSE 21137
// DefineStreamItems ( true ) ;
21130: LD_INT 1
21132: PPUSH
21133: CALL 22941 0 1
// UpdateLuaVariables ( ) ;
21137: CALL 21154 0 0
// UpdateFactoryWaypoints ( ) ;
21141: CALL 35802 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21145: CALL 36059 0 0
// end ;
21149: LD_VAR 0 1
21153: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
21154: LD_INT 0
21156: PPUSH
// if not globalGameSaveCounter then
21157: LD_EXP 50
21161: NOT
21162: IFFALSE 21173
// ToLua ( setGameSaveCounter(0) ) else
21164: LD_STRING setGameSaveCounter(0)
21166: PPUSH
21167: CALL_OW 559
21171: GO 21205
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
21173: LD_ADDR_EXP 50
21177: PUSH
21178: LD_EXP 50
21182: PPUSH
21183: CALL 80016 0 1
21187: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21188: LD_STRING setGameSaveCounter(
21190: PUSH
21191: LD_EXP 50
21195: STR
21196: PUSH
21197: LD_STRING )
21199: STR
21200: PPUSH
21201: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
21205: LD_STRING setGameDifficulty(
21207: PUSH
21208: LD_OWVAR 67
21212: STR
21213: PUSH
21214: LD_STRING )
21216: STR
21217: PPUSH
21218: CALL_OW 559
// end ;
21222: LD_VAR 0 1
21226: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21227: LD_INT 0
21229: PPUSH
// if p2 = stream_mode then
21230: LD_VAR 0 2
21234: PUSH
21235: LD_INT 100
21237: EQUAL
21238: IFFALSE 22241
// begin if not StreamModeActive then
21240: LD_EXP 51
21244: NOT
21245: IFFALSE 21255
// StreamModeActive := true ;
21247: LD_ADDR_EXP 51
21251: PUSH
21252: LD_INT 1
21254: ST_TO_ADDR
// if p3 = 0 then
21255: LD_VAR 0 3
21259: PUSH
21260: LD_INT 0
21262: EQUAL
21263: IFFALSE 21269
// InitStreamMode ;
21265: CALL 22477 0 0
// if p3 = 1 then
21269: LD_VAR 0 3
21273: PUSH
21274: LD_INT 1
21276: EQUAL
21277: IFFALSE 21287
// sRocket := true ;
21279: LD_ADDR_EXP 56
21283: PUSH
21284: LD_INT 1
21286: ST_TO_ADDR
// if p3 = 2 then
21287: LD_VAR 0 3
21291: PUSH
21292: LD_INT 2
21294: EQUAL
21295: IFFALSE 21305
// sSpeed := true ;
21297: LD_ADDR_EXP 55
21301: PUSH
21302: LD_INT 1
21304: ST_TO_ADDR
// if p3 = 3 then
21305: LD_VAR 0 3
21309: PUSH
21310: LD_INT 3
21312: EQUAL
21313: IFFALSE 21323
// sEngine := true ;
21315: LD_ADDR_EXP 57
21319: PUSH
21320: LD_INT 1
21322: ST_TO_ADDR
// if p3 = 4 then
21323: LD_VAR 0 3
21327: PUSH
21328: LD_INT 4
21330: EQUAL
21331: IFFALSE 21341
// sSpec := true ;
21333: LD_ADDR_EXP 54
21337: PUSH
21338: LD_INT 1
21340: ST_TO_ADDR
// if p3 = 5 then
21341: LD_VAR 0 3
21345: PUSH
21346: LD_INT 5
21348: EQUAL
21349: IFFALSE 21359
// sLevel := true ;
21351: LD_ADDR_EXP 58
21355: PUSH
21356: LD_INT 1
21358: ST_TO_ADDR
// if p3 = 6 then
21359: LD_VAR 0 3
21363: PUSH
21364: LD_INT 6
21366: EQUAL
21367: IFFALSE 21377
// sArmoury := true ;
21369: LD_ADDR_EXP 59
21373: PUSH
21374: LD_INT 1
21376: ST_TO_ADDR
// if p3 = 7 then
21377: LD_VAR 0 3
21381: PUSH
21382: LD_INT 7
21384: EQUAL
21385: IFFALSE 21395
// sRadar := true ;
21387: LD_ADDR_EXP 60
21391: PUSH
21392: LD_INT 1
21394: ST_TO_ADDR
// if p3 = 8 then
21395: LD_VAR 0 3
21399: PUSH
21400: LD_INT 8
21402: EQUAL
21403: IFFALSE 21413
// sBunker := true ;
21405: LD_ADDR_EXP 61
21409: PUSH
21410: LD_INT 1
21412: ST_TO_ADDR
// if p3 = 9 then
21413: LD_VAR 0 3
21417: PUSH
21418: LD_INT 9
21420: EQUAL
21421: IFFALSE 21431
// sHack := true ;
21423: LD_ADDR_EXP 62
21427: PUSH
21428: LD_INT 1
21430: ST_TO_ADDR
// if p3 = 10 then
21431: LD_VAR 0 3
21435: PUSH
21436: LD_INT 10
21438: EQUAL
21439: IFFALSE 21449
// sFire := true ;
21441: LD_ADDR_EXP 63
21445: PUSH
21446: LD_INT 1
21448: ST_TO_ADDR
// if p3 = 11 then
21449: LD_VAR 0 3
21453: PUSH
21454: LD_INT 11
21456: EQUAL
21457: IFFALSE 21467
// sRefresh := true ;
21459: LD_ADDR_EXP 64
21463: PUSH
21464: LD_INT 1
21466: ST_TO_ADDR
// if p3 = 12 then
21467: LD_VAR 0 3
21471: PUSH
21472: LD_INT 12
21474: EQUAL
21475: IFFALSE 21485
// sExp := true ;
21477: LD_ADDR_EXP 65
21481: PUSH
21482: LD_INT 1
21484: ST_TO_ADDR
// if p3 = 13 then
21485: LD_VAR 0 3
21489: PUSH
21490: LD_INT 13
21492: EQUAL
21493: IFFALSE 21503
// sDepot := true ;
21495: LD_ADDR_EXP 66
21499: PUSH
21500: LD_INT 1
21502: ST_TO_ADDR
// if p3 = 14 then
21503: LD_VAR 0 3
21507: PUSH
21508: LD_INT 14
21510: EQUAL
21511: IFFALSE 21521
// sFlag := true ;
21513: LD_ADDR_EXP 67
21517: PUSH
21518: LD_INT 1
21520: ST_TO_ADDR
// if p3 = 15 then
21521: LD_VAR 0 3
21525: PUSH
21526: LD_INT 15
21528: EQUAL
21529: IFFALSE 21539
// sKamikadze := true ;
21531: LD_ADDR_EXP 75
21535: PUSH
21536: LD_INT 1
21538: ST_TO_ADDR
// if p3 = 16 then
21539: LD_VAR 0 3
21543: PUSH
21544: LD_INT 16
21546: EQUAL
21547: IFFALSE 21557
// sTroll := true ;
21549: LD_ADDR_EXP 76
21553: PUSH
21554: LD_INT 1
21556: ST_TO_ADDR
// if p3 = 17 then
21557: LD_VAR 0 3
21561: PUSH
21562: LD_INT 17
21564: EQUAL
21565: IFFALSE 21575
// sSlow := true ;
21567: LD_ADDR_EXP 77
21571: PUSH
21572: LD_INT 1
21574: ST_TO_ADDR
// if p3 = 18 then
21575: LD_VAR 0 3
21579: PUSH
21580: LD_INT 18
21582: EQUAL
21583: IFFALSE 21593
// sLack := true ;
21585: LD_ADDR_EXP 78
21589: PUSH
21590: LD_INT 1
21592: ST_TO_ADDR
// if p3 = 19 then
21593: LD_VAR 0 3
21597: PUSH
21598: LD_INT 19
21600: EQUAL
21601: IFFALSE 21611
// sTank := true ;
21603: LD_ADDR_EXP 80
21607: PUSH
21608: LD_INT 1
21610: ST_TO_ADDR
// if p3 = 20 then
21611: LD_VAR 0 3
21615: PUSH
21616: LD_INT 20
21618: EQUAL
21619: IFFALSE 21629
// sRemote := true ;
21621: LD_ADDR_EXP 81
21625: PUSH
21626: LD_INT 1
21628: ST_TO_ADDR
// if p3 = 21 then
21629: LD_VAR 0 3
21633: PUSH
21634: LD_INT 21
21636: EQUAL
21637: IFFALSE 21647
// sPowell := true ;
21639: LD_ADDR_EXP 82
21643: PUSH
21644: LD_INT 1
21646: ST_TO_ADDR
// if p3 = 22 then
21647: LD_VAR 0 3
21651: PUSH
21652: LD_INT 22
21654: EQUAL
21655: IFFALSE 21665
// sTeleport := true ;
21657: LD_ADDR_EXP 85
21661: PUSH
21662: LD_INT 1
21664: ST_TO_ADDR
// if p3 = 23 then
21665: LD_VAR 0 3
21669: PUSH
21670: LD_INT 23
21672: EQUAL
21673: IFFALSE 21683
// sOilTower := true ;
21675: LD_ADDR_EXP 87
21679: PUSH
21680: LD_INT 1
21682: ST_TO_ADDR
// if p3 = 24 then
21683: LD_VAR 0 3
21687: PUSH
21688: LD_INT 24
21690: EQUAL
21691: IFFALSE 21701
// sShovel := true ;
21693: LD_ADDR_EXP 88
21697: PUSH
21698: LD_INT 1
21700: ST_TO_ADDR
// if p3 = 25 then
21701: LD_VAR 0 3
21705: PUSH
21706: LD_INT 25
21708: EQUAL
21709: IFFALSE 21719
// sSheik := true ;
21711: LD_ADDR_EXP 89
21715: PUSH
21716: LD_INT 1
21718: ST_TO_ADDR
// if p3 = 26 then
21719: LD_VAR 0 3
21723: PUSH
21724: LD_INT 26
21726: EQUAL
21727: IFFALSE 21737
// sEarthquake := true ;
21729: LD_ADDR_EXP 91
21733: PUSH
21734: LD_INT 1
21736: ST_TO_ADDR
// if p3 = 27 then
21737: LD_VAR 0 3
21741: PUSH
21742: LD_INT 27
21744: EQUAL
21745: IFFALSE 21755
// sAI := true ;
21747: LD_ADDR_EXP 92
21751: PUSH
21752: LD_INT 1
21754: ST_TO_ADDR
// if p3 = 28 then
21755: LD_VAR 0 3
21759: PUSH
21760: LD_INT 28
21762: EQUAL
21763: IFFALSE 21773
// sCargo := true ;
21765: LD_ADDR_EXP 95
21769: PUSH
21770: LD_INT 1
21772: ST_TO_ADDR
// if p3 = 29 then
21773: LD_VAR 0 3
21777: PUSH
21778: LD_INT 29
21780: EQUAL
21781: IFFALSE 21791
// sDLaser := true ;
21783: LD_ADDR_EXP 96
21787: PUSH
21788: LD_INT 1
21790: ST_TO_ADDR
// if p3 = 30 then
21791: LD_VAR 0 3
21795: PUSH
21796: LD_INT 30
21798: EQUAL
21799: IFFALSE 21809
// sExchange := true ;
21801: LD_ADDR_EXP 97
21805: PUSH
21806: LD_INT 1
21808: ST_TO_ADDR
// if p3 = 31 then
21809: LD_VAR 0 3
21813: PUSH
21814: LD_INT 31
21816: EQUAL
21817: IFFALSE 21827
// sFac := true ;
21819: LD_ADDR_EXP 98
21823: PUSH
21824: LD_INT 1
21826: ST_TO_ADDR
// if p3 = 32 then
21827: LD_VAR 0 3
21831: PUSH
21832: LD_INT 32
21834: EQUAL
21835: IFFALSE 21845
// sPower := true ;
21837: LD_ADDR_EXP 99
21841: PUSH
21842: LD_INT 1
21844: ST_TO_ADDR
// if p3 = 33 then
21845: LD_VAR 0 3
21849: PUSH
21850: LD_INT 33
21852: EQUAL
21853: IFFALSE 21863
// sRandom := true ;
21855: LD_ADDR_EXP 100
21859: PUSH
21860: LD_INT 1
21862: ST_TO_ADDR
// if p3 = 34 then
21863: LD_VAR 0 3
21867: PUSH
21868: LD_INT 34
21870: EQUAL
21871: IFFALSE 21881
// sShield := true ;
21873: LD_ADDR_EXP 101
21877: PUSH
21878: LD_INT 1
21880: ST_TO_ADDR
// if p3 = 35 then
21881: LD_VAR 0 3
21885: PUSH
21886: LD_INT 35
21888: EQUAL
21889: IFFALSE 21899
// sTime := true ;
21891: LD_ADDR_EXP 102
21895: PUSH
21896: LD_INT 1
21898: ST_TO_ADDR
// if p3 = 36 then
21899: LD_VAR 0 3
21903: PUSH
21904: LD_INT 36
21906: EQUAL
21907: IFFALSE 21917
// sTools := true ;
21909: LD_ADDR_EXP 103
21913: PUSH
21914: LD_INT 1
21916: ST_TO_ADDR
// if p3 = 101 then
21917: LD_VAR 0 3
21921: PUSH
21922: LD_INT 101
21924: EQUAL
21925: IFFALSE 21935
// sSold := true ;
21927: LD_ADDR_EXP 68
21931: PUSH
21932: LD_INT 1
21934: ST_TO_ADDR
// if p3 = 102 then
21935: LD_VAR 0 3
21939: PUSH
21940: LD_INT 102
21942: EQUAL
21943: IFFALSE 21953
// sDiff := true ;
21945: LD_ADDR_EXP 69
21949: PUSH
21950: LD_INT 1
21952: ST_TO_ADDR
// if p3 = 103 then
21953: LD_VAR 0 3
21957: PUSH
21958: LD_INT 103
21960: EQUAL
21961: IFFALSE 21971
// sFog := true ;
21963: LD_ADDR_EXP 72
21967: PUSH
21968: LD_INT 1
21970: ST_TO_ADDR
// if p3 = 104 then
21971: LD_VAR 0 3
21975: PUSH
21976: LD_INT 104
21978: EQUAL
21979: IFFALSE 21989
// sReset := true ;
21981: LD_ADDR_EXP 73
21985: PUSH
21986: LD_INT 1
21988: ST_TO_ADDR
// if p3 = 105 then
21989: LD_VAR 0 3
21993: PUSH
21994: LD_INT 105
21996: EQUAL
21997: IFFALSE 22007
// sSun := true ;
21999: LD_ADDR_EXP 74
22003: PUSH
22004: LD_INT 1
22006: ST_TO_ADDR
// if p3 = 106 then
22007: LD_VAR 0 3
22011: PUSH
22012: LD_INT 106
22014: EQUAL
22015: IFFALSE 22025
// sTiger := true ;
22017: LD_ADDR_EXP 70
22021: PUSH
22022: LD_INT 1
22024: ST_TO_ADDR
// if p3 = 107 then
22025: LD_VAR 0 3
22029: PUSH
22030: LD_INT 107
22032: EQUAL
22033: IFFALSE 22043
// sBomb := true ;
22035: LD_ADDR_EXP 71
22039: PUSH
22040: LD_INT 1
22042: ST_TO_ADDR
// if p3 = 108 then
22043: LD_VAR 0 3
22047: PUSH
22048: LD_INT 108
22050: EQUAL
22051: IFFALSE 22061
// sWound := true ;
22053: LD_ADDR_EXP 79
22057: PUSH
22058: LD_INT 1
22060: ST_TO_ADDR
// if p3 = 109 then
22061: LD_VAR 0 3
22065: PUSH
22066: LD_INT 109
22068: EQUAL
22069: IFFALSE 22079
// sBetray := true ;
22071: LD_ADDR_EXP 83
22075: PUSH
22076: LD_INT 1
22078: ST_TO_ADDR
// if p3 = 110 then
22079: LD_VAR 0 3
22083: PUSH
22084: LD_INT 110
22086: EQUAL
22087: IFFALSE 22097
// sContamin := true ;
22089: LD_ADDR_EXP 84
22093: PUSH
22094: LD_INT 1
22096: ST_TO_ADDR
// if p3 = 111 then
22097: LD_VAR 0 3
22101: PUSH
22102: LD_INT 111
22104: EQUAL
22105: IFFALSE 22115
// sOil := true ;
22107: LD_ADDR_EXP 86
22111: PUSH
22112: LD_INT 1
22114: ST_TO_ADDR
// if p3 = 112 then
22115: LD_VAR 0 3
22119: PUSH
22120: LD_INT 112
22122: EQUAL
22123: IFFALSE 22133
// sStu := true ;
22125: LD_ADDR_EXP 90
22129: PUSH
22130: LD_INT 1
22132: ST_TO_ADDR
// if p3 = 113 then
22133: LD_VAR 0 3
22137: PUSH
22138: LD_INT 113
22140: EQUAL
22141: IFFALSE 22151
// sBazooka := true ;
22143: LD_ADDR_EXP 93
22147: PUSH
22148: LD_INT 1
22150: ST_TO_ADDR
// if p3 = 114 then
22151: LD_VAR 0 3
22155: PUSH
22156: LD_INT 114
22158: EQUAL
22159: IFFALSE 22169
// sMortar := true ;
22161: LD_ADDR_EXP 94
22165: PUSH
22166: LD_INT 1
22168: ST_TO_ADDR
// if p3 = 115 then
22169: LD_VAR 0 3
22173: PUSH
22174: LD_INT 115
22176: EQUAL
22177: IFFALSE 22187
// sRanger := true ;
22179: LD_ADDR_EXP 104
22183: PUSH
22184: LD_INT 1
22186: ST_TO_ADDR
// if p3 = 116 then
22187: LD_VAR 0 3
22191: PUSH
22192: LD_INT 116
22194: EQUAL
22195: IFFALSE 22205
// sComputer := true ;
22197: LD_ADDR_EXP 105
22201: PUSH
22202: LD_INT 1
22204: ST_TO_ADDR
// if p3 = 117 then
22205: LD_VAR 0 3
22209: PUSH
22210: LD_INT 117
22212: EQUAL
22213: IFFALSE 22223
// s30 := true ;
22215: LD_ADDR_EXP 106
22219: PUSH
22220: LD_INT 1
22222: ST_TO_ADDR
// if p3 = 118 then
22223: LD_VAR 0 3
22227: PUSH
22228: LD_INT 118
22230: EQUAL
22231: IFFALSE 22241
// s60 := true ;
22233: LD_ADDR_EXP 107
22237: PUSH
22238: LD_INT 1
22240: ST_TO_ADDR
// end ; if p2 = hack_mode then
22241: LD_VAR 0 2
22245: PUSH
22246: LD_INT 101
22248: EQUAL
22249: IFFALSE 22377
// begin case p3 of 1 :
22251: LD_VAR 0 3
22255: PUSH
22256: LD_INT 1
22258: DOUBLE
22259: EQUAL
22260: IFTRUE 22264
22262: GO 22271
22264: POP
// hHackUnlimitedResources ; 2 :
22265: CALL 34548 0 0
22269: GO 22377
22271: LD_INT 2
22273: DOUBLE
22274: EQUAL
22275: IFTRUE 22279
22277: GO 22286
22279: POP
// hHackSetLevel10 ; 3 :
22280: CALL 34681 0 0
22284: GO 22377
22286: LD_INT 3
22288: DOUBLE
22289: EQUAL
22290: IFTRUE 22294
22292: GO 22301
22294: POP
// hHackSetLevel10YourUnits ; 4 :
22295: CALL 34766 0 0
22299: GO 22377
22301: LD_INT 4
22303: DOUBLE
22304: EQUAL
22305: IFTRUE 22309
22307: GO 22316
22309: POP
// hHackInvincible ; 5 :
22310: CALL 35214 0 0
22314: GO 22377
22316: LD_INT 5
22318: DOUBLE
22319: EQUAL
22320: IFTRUE 22324
22322: GO 22331
22324: POP
// hHackInvisible ; 6 :
22325: CALL 35325 0 0
22329: GO 22377
22331: LD_INT 6
22333: DOUBLE
22334: EQUAL
22335: IFTRUE 22339
22337: GO 22346
22339: POP
// hHackChangeYourSide ; 7 :
22340: CALL 35382 0 0
22344: GO 22377
22346: LD_INT 7
22348: DOUBLE
22349: EQUAL
22350: IFTRUE 22354
22352: GO 22361
22354: POP
// hHackChangeUnitSide ; 8 :
22355: CALL 35424 0 0
22359: GO 22377
22361: LD_INT 8
22363: DOUBLE
22364: EQUAL
22365: IFTRUE 22369
22367: GO 22376
22369: POP
// hHackFog ; end ;
22370: CALL 35525 0 0
22374: GO 22377
22376: POP
// end ; if p2 = game_save_mode then
22377: LD_VAR 0 2
22381: PUSH
22382: LD_INT 102
22384: EQUAL
22385: IFFALSE 22450
// begin if p3 = 1 then
22387: LD_VAR 0 3
22391: PUSH
22392: LD_INT 1
22394: EQUAL
22395: IFFALSE 22407
// globalGameSaveCounter := p4 ;
22397: LD_ADDR_EXP 50
22401: PUSH
22402: LD_VAR 0 4
22406: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
22407: LD_VAR 0 3
22411: PUSH
22412: LD_INT 2
22414: EQUAL
22415: PUSH
22416: LD_EXP 50
22420: AND
22421: IFFALSE 22440
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22423: LD_STRING setGameSaveCounter(
22425: PUSH
22426: LD_EXP 50
22430: STR
22431: PUSH
22432: LD_STRING )
22434: STR
22435: PPUSH
22436: CALL_OW 559
// display_strings := globalGameSaveCounter ;
22440: LD_ADDR_OWVAR 47
22444: PUSH
22445: LD_EXP 50
22449: ST_TO_ADDR
// end ; end ;
22450: LD_VAR 0 7
22454: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
22455: GO 22457
22457: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
22458: LD_STRING initStreamRollete();
22460: PPUSH
22461: CALL_OW 559
// InitStreamMode ;
22465: CALL 22477 0 0
// DefineStreamItems ( false ) ;
22469: LD_INT 0
22471: PPUSH
22472: CALL 22941 0 1
// end ;
22476: END
// function InitStreamMode ; begin
22477: LD_INT 0
22479: PPUSH
// streamModeActive := false ;
22480: LD_ADDR_EXP 51
22484: PUSH
22485: LD_INT 0
22487: ST_TO_ADDR
// normalCounter := 36 ;
22488: LD_ADDR_EXP 52
22492: PUSH
22493: LD_INT 36
22495: ST_TO_ADDR
// hardcoreCounter := 18 ;
22496: LD_ADDR_EXP 53
22500: PUSH
22501: LD_INT 18
22503: ST_TO_ADDR
// sRocket := false ;
22504: LD_ADDR_EXP 56
22508: PUSH
22509: LD_INT 0
22511: ST_TO_ADDR
// sSpeed := false ;
22512: LD_ADDR_EXP 55
22516: PUSH
22517: LD_INT 0
22519: ST_TO_ADDR
// sEngine := false ;
22520: LD_ADDR_EXP 57
22524: PUSH
22525: LD_INT 0
22527: ST_TO_ADDR
// sSpec := false ;
22528: LD_ADDR_EXP 54
22532: PUSH
22533: LD_INT 0
22535: ST_TO_ADDR
// sLevel := false ;
22536: LD_ADDR_EXP 58
22540: PUSH
22541: LD_INT 0
22543: ST_TO_ADDR
// sArmoury := false ;
22544: LD_ADDR_EXP 59
22548: PUSH
22549: LD_INT 0
22551: ST_TO_ADDR
// sRadar := false ;
22552: LD_ADDR_EXP 60
22556: PUSH
22557: LD_INT 0
22559: ST_TO_ADDR
// sBunker := false ;
22560: LD_ADDR_EXP 61
22564: PUSH
22565: LD_INT 0
22567: ST_TO_ADDR
// sHack := false ;
22568: LD_ADDR_EXP 62
22572: PUSH
22573: LD_INT 0
22575: ST_TO_ADDR
// sFire := false ;
22576: LD_ADDR_EXP 63
22580: PUSH
22581: LD_INT 0
22583: ST_TO_ADDR
// sRefresh := false ;
22584: LD_ADDR_EXP 64
22588: PUSH
22589: LD_INT 0
22591: ST_TO_ADDR
// sExp := false ;
22592: LD_ADDR_EXP 65
22596: PUSH
22597: LD_INT 0
22599: ST_TO_ADDR
// sDepot := false ;
22600: LD_ADDR_EXP 66
22604: PUSH
22605: LD_INT 0
22607: ST_TO_ADDR
// sFlag := false ;
22608: LD_ADDR_EXP 67
22612: PUSH
22613: LD_INT 0
22615: ST_TO_ADDR
// sKamikadze := false ;
22616: LD_ADDR_EXP 75
22620: PUSH
22621: LD_INT 0
22623: ST_TO_ADDR
// sTroll := false ;
22624: LD_ADDR_EXP 76
22628: PUSH
22629: LD_INT 0
22631: ST_TO_ADDR
// sSlow := false ;
22632: LD_ADDR_EXP 77
22636: PUSH
22637: LD_INT 0
22639: ST_TO_ADDR
// sLack := false ;
22640: LD_ADDR_EXP 78
22644: PUSH
22645: LD_INT 0
22647: ST_TO_ADDR
// sTank := false ;
22648: LD_ADDR_EXP 80
22652: PUSH
22653: LD_INT 0
22655: ST_TO_ADDR
// sRemote := false ;
22656: LD_ADDR_EXP 81
22660: PUSH
22661: LD_INT 0
22663: ST_TO_ADDR
// sPowell := false ;
22664: LD_ADDR_EXP 82
22668: PUSH
22669: LD_INT 0
22671: ST_TO_ADDR
// sTeleport := false ;
22672: LD_ADDR_EXP 85
22676: PUSH
22677: LD_INT 0
22679: ST_TO_ADDR
// sOilTower := false ;
22680: LD_ADDR_EXP 87
22684: PUSH
22685: LD_INT 0
22687: ST_TO_ADDR
// sShovel := false ;
22688: LD_ADDR_EXP 88
22692: PUSH
22693: LD_INT 0
22695: ST_TO_ADDR
// sSheik := false ;
22696: LD_ADDR_EXP 89
22700: PUSH
22701: LD_INT 0
22703: ST_TO_ADDR
// sEarthquake := false ;
22704: LD_ADDR_EXP 91
22708: PUSH
22709: LD_INT 0
22711: ST_TO_ADDR
// sAI := false ;
22712: LD_ADDR_EXP 92
22716: PUSH
22717: LD_INT 0
22719: ST_TO_ADDR
// sCargo := false ;
22720: LD_ADDR_EXP 95
22724: PUSH
22725: LD_INT 0
22727: ST_TO_ADDR
// sDLaser := false ;
22728: LD_ADDR_EXP 96
22732: PUSH
22733: LD_INT 0
22735: ST_TO_ADDR
// sExchange := false ;
22736: LD_ADDR_EXP 97
22740: PUSH
22741: LD_INT 0
22743: ST_TO_ADDR
// sFac := false ;
22744: LD_ADDR_EXP 98
22748: PUSH
22749: LD_INT 0
22751: ST_TO_ADDR
// sPower := false ;
22752: LD_ADDR_EXP 99
22756: PUSH
22757: LD_INT 0
22759: ST_TO_ADDR
// sRandom := false ;
22760: LD_ADDR_EXP 100
22764: PUSH
22765: LD_INT 0
22767: ST_TO_ADDR
// sShield := false ;
22768: LD_ADDR_EXP 101
22772: PUSH
22773: LD_INT 0
22775: ST_TO_ADDR
// sTime := false ;
22776: LD_ADDR_EXP 102
22780: PUSH
22781: LD_INT 0
22783: ST_TO_ADDR
// sTools := false ;
22784: LD_ADDR_EXP 103
22788: PUSH
22789: LD_INT 0
22791: ST_TO_ADDR
// sSold := false ;
22792: LD_ADDR_EXP 68
22796: PUSH
22797: LD_INT 0
22799: ST_TO_ADDR
// sDiff := false ;
22800: LD_ADDR_EXP 69
22804: PUSH
22805: LD_INT 0
22807: ST_TO_ADDR
// sFog := false ;
22808: LD_ADDR_EXP 72
22812: PUSH
22813: LD_INT 0
22815: ST_TO_ADDR
// sReset := false ;
22816: LD_ADDR_EXP 73
22820: PUSH
22821: LD_INT 0
22823: ST_TO_ADDR
// sSun := false ;
22824: LD_ADDR_EXP 74
22828: PUSH
22829: LD_INT 0
22831: ST_TO_ADDR
// sTiger := false ;
22832: LD_ADDR_EXP 70
22836: PUSH
22837: LD_INT 0
22839: ST_TO_ADDR
// sBomb := false ;
22840: LD_ADDR_EXP 71
22844: PUSH
22845: LD_INT 0
22847: ST_TO_ADDR
// sWound := false ;
22848: LD_ADDR_EXP 79
22852: PUSH
22853: LD_INT 0
22855: ST_TO_ADDR
// sBetray := false ;
22856: LD_ADDR_EXP 83
22860: PUSH
22861: LD_INT 0
22863: ST_TO_ADDR
// sContamin := false ;
22864: LD_ADDR_EXP 84
22868: PUSH
22869: LD_INT 0
22871: ST_TO_ADDR
// sOil := false ;
22872: LD_ADDR_EXP 86
22876: PUSH
22877: LD_INT 0
22879: ST_TO_ADDR
// sStu := false ;
22880: LD_ADDR_EXP 90
22884: PUSH
22885: LD_INT 0
22887: ST_TO_ADDR
// sBazooka := false ;
22888: LD_ADDR_EXP 93
22892: PUSH
22893: LD_INT 0
22895: ST_TO_ADDR
// sMortar := false ;
22896: LD_ADDR_EXP 94
22900: PUSH
22901: LD_INT 0
22903: ST_TO_ADDR
// sRanger := false ;
22904: LD_ADDR_EXP 104
22908: PUSH
22909: LD_INT 0
22911: ST_TO_ADDR
// sComputer := false ;
22912: LD_ADDR_EXP 105
22916: PUSH
22917: LD_INT 0
22919: ST_TO_ADDR
// s30 := false ;
22920: LD_ADDR_EXP 106
22924: PUSH
22925: LD_INT 0
22927: ST_TO_ADDR
// s60 := false ;
22928: LD_ADDR_EXP 107
22932: PUSH
22933: LD_INT 0
22935: ST_TO_ADDR
// end ;
22936: LD_VAR 0 1
22940: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22941: LD_INT 0
22943: PPUSH
22944: PPUSH
22945: PPUSH
22946: PPUSH
22947: PPUSH
22948: PPUSH
22949: PPUSH
// result := [ ] ;
22950: LD_ADDR_VAR 0 2
22954: PUSH
22955: EMPTY
22956: ST_TO_ADDR
// if campaign_id = 1 then
22957: LD_OWVAR 69
22961: PUSH
22962: LD_INT 1
22964: EQUAL
22965: IFFALSE 26131
// begin case mission_number of 1 :
22967: LD_OWVAR 70
22971: PUSH
22972: LD_INT 1
22974: DOUBLE
22975: EQUAL
22976: IFTRUE 22980
22978: GO 23056
22980: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22981: LD_ADDR_VAR 0 2
22985: PUSH
22986: LD_INT 2
22988: PUSH
22989: LD_INT 4
22991: PUSH
22992: LD_INT 11
22994: PUSH
22995: LD_INT 12
22997: PUSH
22998: LD_INT 15
23000: PUSH
23001: LD_INT 16
23003: PUSH
23004: LD_INT 22
23006: PUSH
23007: LD_INT 23
23009: PUSH
23010: LD_INT 26
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 101
23026: PUSH
23027: LD_INT 102
23029: PUSH
23030: LD_INT 106
23032: PUSH
23033: LD_INT 116
23035: PUSH
23036: LD_INT 117
23038: PUSH
23039: LD_INT 118
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: ST_TO_ADDR
23054: GO 26129
23056: LD_INT 2
23058: DOUBLE
23059: EQUAL
23060: IFTRUE 23064
23062: GO 23148
23064: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23065: LD_ADDR_VAR 0 2
23069: PUSH
23070: LD_INT 2
23072: PUSH
23073: LD_INT 4
23075: PUSH
23076: LD_INT 11
23078: PUSH
23079: LD_INT 12
23081: PUSH
23082: LD_INT 15
23084: PUSH
23085: LD_INT 16
23087: PUSH
23088: LD_INT 22
23090: PUSH
23091: LD_INT 23
23093: PUSH
23094: LD_INT 26
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 101
23110: PUSH
23111: LD_INT 102
23113: PUSH
23114: LD_INT 105
23116: PUSH
23117: LD_INT 106
23119: PUSH
23120: LD_INT 108
23122: PUSH
23123: LD_INT 116
23125: PUSH
23126: LD_INT 117
23128: PUSH
23129: LD_INT 118
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: ST_TO_ADDR
23146: GO 26129
23148: LD_INT 3
23150: DOUBLE
23151: EQUAL
23152: IFTRUE 23156
23154: GO 23244
23156: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
23157: LD_ADDR_VAR 0 2
23161: PUSH
23162: LD_INT 2
23164: PUSH
23165: LD_INT 4
23167: PUSH
23168: LD_INT 5
23170: PUSH
23171: LD_INT 11
23173: PUSH
23174: LD_INT 12
23176: PUSH
23177: LD_INT 15
23179: PUSH
23180: LD_INT 16
23182: PUSH
23183: LD_INT 22
23185: PUSH
23186: LD_INT 26
23188: PUSH
23189: LD_INT 36
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 101
23206: PUSH
23207: LD_INT 102
23209: PUSH
23210: LD_INT 105
23212: PUSH
23213: LD_INT 106
23215: PUSH
23216: LD_INT 108
23218: PUSH
23219: LD_INT 116
23221: PUSH
23222: LD_INT 117
23224: PUSH
23225: LD_INT 118
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: ST_TO_ADDR
23242: GO 26129
23244: LD_INT 4
23246: DOUBLE
23247: EQUAL
23248: IFTRUE 23252
23250: GO 23348
23252: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23253: LD_ADDR_VAR 0 2
23257: PUSH
23258: LD_INT 2
23260: PUSH
23261: LD_INT 4
23263: PUSH
23264: LD_INT 5
23266: PUSH
23267: LD_INT 8
23269: PUSH
23270: LD_INT 11
23272: PUSH
23273: LD_INT 12
23275: PUSH
23276: LD_INT 15
23278: PUSH
23279: LD_INT 16
23281: PUSH
23282: LD_INT 22
23284: PUSH
23285: LD_INT 23
23287: PUSH
23288: LD_INT 26
23290: PUSH
23291: LD_INT 36
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 101
23310: PUSH
23311: LD_INT 102
23313: PUSH
23314: LD_INT 105
23316: PUSH
23317: LD_INT 106
23319: PUSH
23320: LD_INT 108
23322: PUSH
23323: LD_INT 116
23325: PUSH
23326: LD_INT 117
23328: PUSH
23329: LD_INT 118
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: ST_TO_ADDR
23346: GO 26129
23348: LD_INT 5
23350: DOUBLE
23351: EQUAL
23352: IFTRUE 23356
23354: GO 23468
23356: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23357: LD_ADDR_VAR 0 2
23361: PUSH
23362: LD_INT 2
23364: PUSH
23365: LD_INT 4
23367: PUSH
23368: LD_INT 5
23370: PUSH
23371: LD_INT 6
23373: PUSH
23374: LD_INT 8
23376: PUSH
23377: LD_INT 11
23379: PUSH
23380: LD_INT 12
23382: PUSH
23383: LD_INT 15
23385: PUSH
23386: LD_INT 16
23388: PUSH
23389: LD_INT 22
23391: PUSH
23392: LD_INT 23
23394: PUSH
23395: LD_INT 25
23397: PUSH
23398: LD_INT 26
23400: PUSH
23401: LD_INT 36
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 101
23422: PUSH
23423: LD_INT 102
23425: PUSH
23426: LD_INT 105
23428: PUSH
23429: LD_INT 106
23431: PUSH
23432: LD_INT 108
23434: PUSH
23435: LD_INT 109
23437: PUSH
23438: LD_INT 112
23440: PUSH
23441: LD_INT 116
23443: PUSH
23444: LD_INT 117
23446: PUSH
23447: LD_INT 118
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: ST_TO_ADDR
23466: GO 26129
23468: LD_INT 6
23470: DOUBLE
23471: EQUAL
23472: IFTRUE 23476
23474: GO 23608
23476: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23477: LD_ADDR_VAR 0 2
23481: PUSH
23482: LD_INT 2
23484: PUSH
23485: LD_INT 4
23487: PUSH
23488: LD_INT 5
23490: PUSH
23491: LD_INT 6
23493: PUSH
23494: LD_INT 8
23496: PUSH
23497: LD_INT 11
23499: PUSH
23500: LD_INT 12
23502: PUSH
23503: LD_INT 15
23505: PUSH
23506: LD_INT 16
23508: PUSH
23509: LD_INT 20
23511: PUSH
23512: LD_INT 21
23514: PUSH
23515: LD_INT 22
23517: PUSH
23518: LD_INT 23
23520: PUSH
23521: LD_INT 25
23523: PUSH
23524: LD_INT 26
23526: PUSH
23527: LD_INT 30
23529: PUSH
23530: LD_INT 31
23532: PUSH
23533: LD_INT 32
23535: PUSH
23536: LD_INT 36
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 101
23562: PUSH
23563: LD_INT 102
23565: PUSH
23566: LD_INT 105
23568: PUSH
23569: LD_INT 106
23571: PUSH
23572: LD_INT 108
23574: PUSH
23575: LD_INT 109
23577: PUSH
23578: LD_INT 112
23580: PUSH
23581: LD_INT 116
23583: PUSH
23584: LD_INT 117
23586: PUSH
23587: LD_INT 118
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: ST_TO_ADDR
23606: GO 26129
23608: LD_INT 7
23610: DOUBLE
23611: EQUAL
23612: IFTRUE 23616
23614: GO 23728
23616: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23617: LD_ADDR_VAR 0 2
23621: PUSH
23622: LD_INT 2
23624: PUSH
23625: LD_INT 4
23627: PUSH
23628: LD_INT 5
23630: PUSH
23631: LD_INT 7
23633: PUSH
23634: LD_INT 11
23636: PUSH
23637: LD_INT 12
23639: PUSH
23640: LD_INT 15
23642: PUSH
23643: LD_INT 16
23645: PUSH
23646: LD_INT 20
23648: PUSH
23649: LD_INT 21
23651: PUSH
23652: LD_INT 22
23654: PUSH
23655: LD_INT 23
23657: PUSH
23658: LD_INT 25
23660: PUSH
23661: LD_INT 26
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 101
23682: PUSH
23683: LD_INT 102
23685: PUSH
23686: LD_INT 103
23688: PUSH
23689: LD_INT 105
23691: PUSH
23692: LD_INT 106
23694: PUSH
23695: LD_INT 108
23697: PUSH
23698: LD_INT 112
23700: PUSH
23701: LD_INT 116
23703: PUSH
23704: LD_INT 117
23706: PUSH
23707: LD_INT 118
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: ST_TO_ADDR
23726: GO 26129
23728: LD_INT 8
23730: DOUBLE
23731: EQUAL
23732: IFTRUE 23736
23734: GO 23876
23736: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23737: LD_ADDR_VAR 0 2
23741: PUSH
23742: LD_INT 2
23744: PUSH
23745: LD_INT 4
23747: PUSH
23748: LD_INT 5
23750: PUSH
23751: LD_INT 6
23753: PUSH
23754: LD_INT 7
23756: PUSH
23757: LD_INT 8
23759: PUSH
23760: LD_INT 11
23762: PUSH
23763: LD_INT 12
23765: PUSH
23766: LD_INT 15
23768: PUSH
23769: LD_INT 16
23771: PUSH
23772: LD_INT 20
23774: PUSH
23775: LD_INT 21
23777: PUSH
23778: LD_INT 22
23780: PUSH
23781: LD_INT 23
23783: PUSH
23784: LD_INT 25
23786: PUSH
23787: LD_INT 26
23789: PUSH
23790: LD_INT 30
23792: PUSH
23793: LD_INT 31
23795: PUSH
23796: LD_INT 32
23798: PUSH
23799: LD_INT 36
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 101
23826: PUSH
23827: LD_INT 102
23829: PUSH
23830: LD_INT 103
23832: PUSH
23833: LD_INT 105
23835: PUSH
23836: LD_INT 106
23838: PUSH
23839: LD_INT 108
23841: PUSH
23842: LD_INT 109
23844: PUSH
23845: LD_INT 112
23847: PUSH
23848: LD_INT 116
23850: PUSH
23851: LD_INT 117
23853: PUSH
23854: LD_INT 118
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: ST_TO_ADDR
23874: GO 26129
23876: LD_INT 9
23878: DOUBLE
23879: EQUAL
23880: IFTRUE 23884
23882: GO 24032
23884: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23885: LD_ADDR_VAR 0 2
23889: PUSH
23890: LD_INT 2
23892: PUSH
23893: LD_INT 4
23895: PUSH
23896: LD_INT 5
23898: PUSH
23899: LD_INT 6
23901: PUSH
23902: LD_INT 7
23904: PUSH
23905: LD_INT 8
23907: PUSH
23908: LD_INT 11
23910: PUSH
23911: LD_INT 12
23913: PUSH
23914: LD_INT 15
23916: PUSH
23917: LD_INT 16
23919: PUSH
23920: LD_INT 20
23922: PUSH
23923: LD_INT 21
23925: PUSH
23926: LD_INT 22
23928: PUSH
23929: LD_INT 23
23931: PUSH
23932: LD_INT 25
23934: PUSH
23935: LD_INT 26
23937: PUSH
23938: LD_INT 28
23940: PUSH
23941: LD_INT 30
23943: PUSH
23944: LD_INT 31
23946: PUSH
23947: LD_INT 32
23949: PUSH
23950: LD_INT 36
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 101
23978: PUSH
23979: LD_INT 102
23981: PUSH
23982: LD_INT 103
23984: PUSH
23985: LD_INT 105
23987: PUSH
23988: LD_INT 106
23990: PUSH
23991: LD_INT 108
23993: PUSH
23994: LD_INT 109
23996: PUSH
23997: LD_INT 112
23999: PUSH
24000: LD_INT 114
24002: PUSH
24003: LD_INT 116
24005: PUSH
24006: LD_INT 117
24008: PUSH
24009: LD_INT 118
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: ST_TO_ADDR
24030: GO 26129
24032: LD_INT 10
24034: DOUBLE
24035: EQUAL
24036: IFTRUE 24040
24038: GO 24236
24040: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24041: LD_ADDR_VAR 0 2
24045: PUSH
24046: LD_INT 2
24048: PUSH
24049: LD_INT 4
24051: PUSH
24052: LD_INT 5
24054: PUSH
24055: LD_INT 6
24057: PUSH
24058: LD_INT 7
24060: PUSH
24061: LD_INT 8
24063: PUSH
24064: LD_INT 9
24066: PUSH
24067: LD_INT 10
24069: PUSH
24070: LD_INT 11
24072: PUSH
24073: LD_INT 12
24075: PUSH
24076: LD_INT 13
24078: PUSH
24079: LD_INT 14
24081: PUSH
24082: LD_INT 15
24084: PUSH
24085: LD_INT 16
24087: PUSH
24088: LD_INT 17
24090: PUSH
24091: LD_INT 18
24093: PUSH
24094: LD_INT 19
24096: PUSH
24097: LD_INT 20
24099: PUSH
24100: LD_INT 21
24102: PUSH
24103: LD_INT 22
24105: PUSH
24106: LD_INT 23
24108: PUSH
24109: LD_INT 24
24111: PUSH
24112: LD_INT 25
24114: PUSH
24115: LD_INT 26
24117: PUSH
24118: LD_INT 28
24120: PUSH
24121: LD_INT 30
24123: PUSH
24124: LD_INT 31
24126: PUSH
24127: LD_INT 32
24129: PUSH
24130: LD_INT 36
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 101
24166: PUSH
24167: LD_INT 102
24169: PUSH
24170: LD_INT 103
24172: PUSH
24173: LD_INT 104
24175: PUSH
24176: LD_INT 105
24178: PUSH
24179: LD_INT 106
24181: PUSH
24182: LD_INT 107
24184: PUSH
24185: LD_INT 108
24187: PUSH
24188: LD_INT 109
24190: PUSH
24191: LD_INT 110
24193: PUSH
24194: LD_INT 111
24196: PUSH
24197: LD_INT 112
24199: PUSH
24200: LD_INT 114
24202: PUSH
24203: LD_INT 116
24205: PUSH
24206: LD_INT 117
24208: PUSH
24209: LD_INT 118
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: ST_TO_ADDR
24234: GO 26129
24236: LD_INT 11
24238: DOUBLE
24239: EQUAL
24240: IFTRUE 24244
24242: GO 24448
24244: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24245: LD_ADDR_VAR 0 2
24249: PUSH
24250: LD_INT 2
24252: PUSH
24253: LD_INT 3
24255: PUSH
24256: LD_INT 4
24258: PUSH
24259: LD_INT 5
24261: PUSH
24262: LD_INT 6
24264: PUSH
24265: LD_INT 7
24267: PUSH
24268: LD_INT 8
24270: PUSH
24271: LD_INT 9
24273: PUSH
24274: LD_INT 10
24276: PUSH
24277: LD_INT 11
24279: PUSH
24280: LD_INT 12
24282: PUSH
24283: LD_INT 13
24285: PUSH
24286: LD_INT 14
24288: PUSH
24289: LD_INT 15
24291: PUSH
24292: LD_INT 16
24294: PUSH
24295: LD_INT 17
24297: PUSH
24298: LD_INT 18
24300: PUSH
24301: LD_INT 19
24303: PUSH
24304: LD_INT 20
24306: PUSH
24307: LD_INT 21
24309: PUSH
24310: LD_INT 22
24312: PUSH
24313: LD_INT 23
24315: PUSH
24316: LD_INT 24
24318: PUSH
24319: LD_INT 25
24321: PUSH
24322: LD_INT 26
24324: PUSH
24325: LD_INT 28
24327: PUSH
24328: LD_INT 30
24330: PUSH
24331: LD_INT 31
24333: PUSH
24334: LD_INT 32
24336: PUSH
24337: LD_INT 34
24339: PUSH
24340: LD_INT 36
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 101
24378: PUSH
24379: LD_INT 102
24381: PUSH
24382: LD_INT 103
24384: PUSH
24385: LD_INT 104
24387: PUSH
24388: LD_INT 105
24390: PUSH
24391: LD_INT 106
24393: PUSH
24394: LD_INT 107
24396: PUSH
24397: LD_INT 108
24399: PUSH
24400: LD_INT 109
24402: PUSH
24403: LD_INT 110
24405: PUSH
24406: LD_INT 111
24408: PUSH
24409: LD_INT 112
24411: PUSH
24412: LD_INT 114
24414: PUSH
24415: LD_INT 116
24417: PUSH
24418: LD_INT 117
24420: PUSH
24421: LD_INT 118
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: ST_TO_ADDR
24446: GO 26129
24448: LD_INT 12
24450: DOUBLE
24451: EQUAL
24452: IFTRUE 24456
24454: GO 24676
24456: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24457: LD_ADDR_VAR 0 2
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: LD_INT 2
24467: PUSH
24468: LD_INT 3
24470: PUSH
24471: LD_INT 4
24473: PUSH
24474: LD_INT 5
24476: PUSH
24477: LD_INT 6
24479: PUSH
24480: LD_INT 7
24482: PUSH
24483: LD_INT 8
24485: PUSH
24486: LD_INT 9
24488: PUSH
24489: LD_INT 10
24491: PUSH
24492: LD_INT 11
24494: PUSH
24495: LD_INT 12
24497: PUSH
24498: LD_INT 13
24500: PUSH
24501: LD_INT 14
24503: PUSH
24504: LD_INT 15
24506: PUSH
24507: LD_INT 16
24509: PUSH
24510: LD_INT 17
24512: PUSH
24513: LD_INT 18
24515: PUSH
24516: LD_INT 19
24518: PUSH
24519: LD_INT 20
24521: PUSH
24522: LD_INT 21
24524: PUSH
24525: LD_INT 22
24527: PUSH
24528: LD_INT 23
24530: PUSH
24531: LD_INT 24
24533: PUSH
24534: LD_INT 25
24536: PUSH
24537: LD_INT 26
24539: PUSH
24540: LD_INT 27
24542: PUSH
24543: LD_INT 28
24545: PUSH
24546: LD_INT 30
24548: PUSH
24549: LD_INT 31
24551: PUSH
24552: LD_INT 32
24554: PUSH
24555: LD_INT 33
24557: PUSH
24558: LD_INT 34
24560: PUSH
24561: LD_INT 36
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 101
24602: PUSH
24603: LD_INT 102
24605: PUSH
24606: LD_INT 103
24608: PUSH
24609: LD_INT 104
24611: PUSH
24612: LD_INT 105
24614: PUSH
24615: LD_INT 106
24617: PUSH
24618: LD_INT 107
24620: PUSH
24621: LD_INT 108
24623: PUSH
24624: LD_INT 109
24626: PUSH
24627: LD_INT 110
24629: PUSH
24630: LD_INT 111
24632: PUSH
24633: LD_INT 112
24635: PUSH
24636: LD_INT 113
24638: PUSH
24639: LD_INT 114
24641: PUSH
24642: LD_INT 116
24644: PUSH
24645: LD_INT 117
24647: PUSH
24648: LD_INT 118
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: ST_TO_ADDR
24674: GO 26129
24676: LD_INT 13
24678: DOUBLE
24679: EQUAL
24680: IFTRUE 24684
24682: GO 24892
24684: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24685: LD_ADDR_VAR 0 2
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: LD_INT 2
24695: PUSH
24696: LD_INT 3
24698: PUSH
24699: LD_INT 4
24701: PUSH
24702: LD_INT 5
24704: PUSH
24705: LD_INT 8
24707: PUSH
24708: LD_INT 9
24710: PUSH
24711: LD_INT 10
24713: PUSH
24714: LD_INT 11
24716: PUSH
24717: LD_INT 12
24719: PUSH
24720: LD_INT 14
24722: PUSH
24723: LD_INT 15
24725: PUSH
24726: LD_INT 16
24728: PUSH
24729: LD_INT 17
24731: PUSH
24732: LD_INT 18
24734: PUSH
24735: LD_INT 19
24737: PUSH
24738: LD_INT 20
24740: PUSH
24741: LD_INT 21
24743: PUSH
24744: LD_INT 22
24746: PUSH
24747: LD_INT 23
24749: PUSH
24750: LD_INT 24
24752: PUSH
24753: LD_INT 25
24755: PUSH
24756: LD_INT 26
24758: PUSH
24759: LD_INT 27
24761: PUSH
24762: LD_INT 28
24764: PUSH
24765: LD_INT 30
24767: PUSH
24768: LD_INT 31
24770: PUSH
24771: LD_INT 32
24773: PUSH
24774: LD_INT 33
24776: PUSH
24777: LD_INT 34
24779: PUSH
24780: LD_INT 36
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 101
24818: PUSH
24819: LD_INT 102
24821: PUSH
24822: LD_INT 103
24824: PUSH
24825: LD_INT 104
24827: PUSH
24828: LD_INT 105
24830: PUSH
24831: LD_INT 106
24833: PUSH
24834: LD_INT 107
24836: PUSH
24837: LD_INT 108
24839: PUSH
24840: LD_INT 109
24842: PUSH
24843: LD_INT 110
24845: PUSH
24846: LD_INT 111
24848: PUSH
24849: LD_INT 112
24851: PUSH
24852: LD_INT 113
24854: PUSH
24855: LD_INT 114
24857: PUSH
24858: LD_INT 116
24860: PUSH
24861: LD_INT 117
24863: PUSH
24864: LD_INT 118
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: ST_TO_ADDR
24890: GO 26129
24892: LD_INT 14
24894: DOUBLE
24895: EQUAL
24896: IFTRUE 24900
24898: GO 25124
24900: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24901: LD_ADDR_VAR 0 2
24905: PUSH
24906: LD_INT 1
24908: PUSH
24909: LD_INT 2
24911: PUSH
24912: LD_INT 3
24914: PUSH
24915: LD_INT 4
24917: PUSH
24918: LD_INT 5
24920: PUSH
24921: LD_INT 6
24923: PUSH
24924: LD_INT 7
24926: PUSH
24927: LD_INT 8
24929: PUSH
24930: LD_INT 9
24932: PUSH
24933: LD_INT 10
24935: PUSH
24936: LD_INT 11
24938: PUSH
24939: LD_INT 12
24941: PUSH
24942: LD_INT 13
24944: PUSH
24945: LD_INT 14
24947: PUSH
24948: LD_INT 15
24950: PUSH
24951: LD_INT 16
24953: PUSH
24954: LD_INT 17
24956: PUSH
24957: LD_INT 18
24959: PUSH
24960: LD_INT 19
24962: PUSH
24963: LD_INT 20
24965: PUSH
24966: LD_INT 21
24968: PUSH
24969: LD_INT 22
24971: PUSH
24972: LD_INT 23
24974: PUSH
24975: LD_INT 24
24977: PUSH
24978: LD_INT 25
24980: PUSH
24981: LD_INT 26
24983: PUSH
24984: LD_INT 27
24986: PUSH
24987: LD_INT 28
24989: PUSH
24990: LD_INT 29
24992: PUSH
24993: LD_INT 30
24995: PUSH
24996: LD_INT 31
24998: PUSH
24999: LD_INT 32
25001: PUSH
25002: LD_INT 33
25004: PUSH
25005: LD_INT 34
25007: PUSH
25008: LD_INT 36
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 101
25050: PUSH
25051: LD_INT 102
25053: PUSH
25054: LD_INT 103
25056: PUSH
25057: LD_INT 104
25059: PUSH
25060: LD_INT 105
25062: PUSH
25063: LD_INT 106
25065: PUSH
25066: LD_INT 107
25068: PUSH
25069: LD_INT 108
25071: PUSH
25072: LD_INT 109
25074: PUSH
25075: LD_INT 110
25077: PUSH
25078: LD_INT 111
25080: PUSH
25081: LD_INT 112
25083: PUSH
25084: LD_INT 113
25086: PUSH
25087: LD_INT 114
25089: PUSH
25090: LD_INT 116
25092: PUSH
25093: LD_INT 117
25095: PUSH
25096: LD_INT 118
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: ST_TO_ADDR
25122: GO 26129
25124: LD_INT 15
25126: DOUBLE
25127: EQUAL
25128: IFTRUE 25132
25130: GO 25356
25132: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
25133: LD_ADDR_VAR 0 2
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: LD_INT 2
25143: PUSH
25144: LD_INT 3
25146: PUSH
25147: LD_INT 4
25149: PUSH
25150: LD_INT 5
25152: PUSH
25153: LD_INT 6
25155: PUSH
25156: LD_INT 7
25158: PUSH
25159: LD_INT 8
25161: PUSH
25162: LD_INT 9
25164: PUSH
25165: LD_INT 10
25167: PUSH
25168: LD_INT 11
25170: PUSH
25171: LD_INT 12
25173: PUSH
25174: LD_INT 13
25176: PUSH
25177: LD_INT 14
25179: PUSH
25180: LD_INT 15
25182: PUSH
25183: LD_INT 16
25185: PUSH
25186: LD_INT 17
25188: PUSH
25189: LD_INT 18
25191: PUSH
25192: LD_INT 19
25194: PUSH
25195: LD_INT 20
25197: PUSH
25198: LD_INT 21
25200: PUSH
25201: LD_INT 22
25203: PUSH
25204: LD_INT 23
25206: PUSH
25207: LD_INT 24
25209: PUSH
25210: LD_INT 25
25212: PUSH
25213: LD_INT 26
25215: PUSH
25216: LD_INT 27
25218: PUSH
25219: LD_INT 28
25221: PUSH
25222: LD_INT 29
25224: PUSH
25225: LD_INT 30
25227: PUSH
25228: LD_INT 31
25230: PUSH
25231: LD_INT 32
25233: PUSH
25234: LD_INT 33
25236: PUSH
25237: LD_INT 34
25239: PUSH
25240: LD_INT 36
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 101
25282: PUSH
25283: LD_INT 102
25285: PUSH
25286: LD_INT 103
25288: PUSH
25289: LD_INT 104
25291: PUSH
25292: LD_INT 105
25294: PUSH
25295: LD_INT 106
25297: PUSH
25298: LD_INT 107
25300: PUSH
25301: LD_INT 108
25303: PUSH
25304: LD_INT 109
25306: PUSH
25307: LD_INT 110
25309: PUSH
25310: LD_INT 111
25312: PUSH
25313: LD_INT 112
25315: PUSH
25316: LD_INT 113
25318: PUSH
25319: LD_INT 114
25321: PUSH
25322: LD_INT 116
25324: PUSH
25325: LD_INT 117
25327: PUSH
25328: LD_INT 118
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: ST_TO_ADDR
25354: GO 26129
25356: LD_INT 16
25358: DOUBLE
25359: EQUAL
25360: IFTRUE 25364
25362: GO 25500
25364: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25365: LD_ADDR_VAR 0 2
25369: PUSH
25370: LD_INT 2
25372: PUSH
25373: LD_INT 4
25375: PUSH
25376: LD_INT 5
25378: PUSH
25379: LD_INT 7
25381: PUSH
25382: LD_INT 11
25384: PUSH
25385: LD_INT 12
25387: PUSH
25388: LD_INT 15
25390: PUSH
25391: LD_INT 16
25393: PUSH
25394: LD_INT 20
25396: PUSH
25397: LD_INT 21
25399: PUSH
25400: LD_INT 22
25402: PUSH
25403: LD_INT 23
25405: PUSH
25406: LD_INT 25
25408: PUSH
25409: LD_INT 26
25411: PUSH
25412: LD_INT 30
25414: PUSH
25415: LD_INT 31
25417: PUSH
25418: LD_INT 32
25420: PUSH
25421: LD_INT 33
25423: PUSH
25424: LD_INT 34
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 101
25450: PUSH
25451: LD_INT 102
25453: PUSH
25454: LD_INT 103
25456: PUSH
25457: LD_INT 106
25459: PUSH
25460: LD_INT 108
25462: PUSH
25463: LD_INT 112
25465: PUSH
25466: LD_INT 113
25468: PUSH
25469: LD_INT 114
25471: PUSH
25472: LD_INT 116
25474: PUSH
25475: LD_INT 117
25477: PUSH
25478: LD_INT 118
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: ST_TO_ADDR
25498: GO 26129
25500: LD_INT 17
25502: DOUBLE
25503: EQUAL
25504: IFTRUE 25508
25506: GO 25732
25508: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25509: LD_ADDR_VAR 0 2
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: LD_INT 3
25522: PUSH
25523: LD_INT 4
25525: PUSH
25526: LD_INT 5
25528: PUSH
25529: LD_INT 6
25531: PUSH
25532: LD_INT 7
25534: PUSH
25535: LD_INT 8
25537: PUSH
25538: LD_INT 9
25540: PUSH
25541: LD_INT 10
25543: PUSH
25544: LD_INT 11
25546: PUSH
25547: LD_INT 12
25549: PUSH
25550: LD_INT 13
25552: PUSH
25553: LD_INT 14
25555: PUSH
25556: LD_INT 15
25558: PUSH
25559: LD_INT 16
25561: PUSH
25562: LD_INT 17
25564: PUSH
25565: LD_INT 18
25567: PUSH
25568: LD_INT 19
25570: PUSH
25571: LD_INT 20
25573: PUSH
25574: LD_INT 21
25576: PUSH
25577: LD_INT 22
25579: PUSH
25580: LD_INT 23
25582: PUSH
25583: LD_INT 24
25585: PUSH
25586: LD_INT 25
25588: PUSH
25589: LD_INT 26
25591: PUSH
25592: LD_INT 27
25594: PUSH
25595: LD_INT 28
25597: PUSH
25598: LD_INT 29
25600: PUSH
25601: LD_INT 30
25603: PUSH
25604: LD_INT 31
25606: PUSH
25607: LD_INT 32
25609: PUSH
25610: LD_INT 33
25612: PUSH
25613: LD_INT 34
25615: PUSH
25616: LD_INT 36
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 101
25658: PUSH
25659: LD_INT 102
25661: PUSH
25662: LD_INT 103
25664: PUSH
25665: LD_INT 104
25667: PUSH
25668: LD_INT 105
25670: PUSH
25671: LD_INT 106
25673: PUSH
25674: LD_INT 107
25676: PUSH
25677: LD_INT 108
25679: PUSH
25680: LD_INT 109
25682: PUSH
25683: LD_INT 110
25685: PUSH
25686: LD_INT 111
25688: PUSH
25689: LD_INT 112
25691: PUSH
25692: LD_INT 113
25694: PUSH
25695: LD_INT 114
25697: PUSH
25698: LD_INT 116
25700: PUSH
25701: LD_INT 117
25703: PUSH
25704: LD_INT 118
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: ST_TO_ADDR
25730: GO 26129
25732: LD_INT 18
25734: DOUBLE
25735: EQUAL
25736: IFTRUE 25740
25738: GO 25888
25740: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25741: LD_ADDR_VAR 0 2
25745: PUSH
25746: LD_INT 2
25748: PUSH
25749: LD_INT 4
25751: PUSH
25752: LD_INT 5
25754: PUSH
25755: LD_INT 7
25757: PUSH
25758: LD_INT 11
25760: PUSH
25761: LD_INT 12
25763: PUSH
25764: LD_INT 15
25766: PUSH
25767: LD_INT 16
25769: PUSH
25770: LD_INT 20
25772: PUSH
25773: LD_INT 21
25775: PUSH
25776: LD_INT 22
25778: PUSH
25779: LD_INT 23
25781: PUSH
25782: LD_INT 25
25784: PUSH
25785: LD_INT 26
25787: PUSH
25788: LD_INT 30
25790: PUSH
25791: LD_INT 31
25793: PUSH
25794: LD_INT 32
25796: PUSH
25797: LD_INT 33
25799: PUSH
25800: LD_INT 34
25802: PUSH
25803: LD_INT 35
25805: PUSH
25806: LD_INT 36
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 101
25834: PUSH
25835: LD_INT 102
25837: PUSH
25838: LD_INT 103
25840: PUSH
25841: LD_INT 106
25843: PUSH
25844: LD_INT 108
25846: PUSH
25847: LD_INT 112
25849: PUSH
25850: LD_INT 113
25852: PUSH
25853: LD_INT 114
25855: PUSH
25856: LD_INT 115
25858: PUSH
25859: LD_INT 116
25861: PUSH
25862: LD_INT 117
25864: PUSH
25865: LD_INT 118
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: ST_TO_ADDR
25886: GO 26129
25888: LD_INT 19
25890: DOUBLE
25891: EQUAL
25892: IFTRUE 25896
25894: GO 26128
25896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25897: LD_ADDR_VAR 0 2
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: LD_INT 2
25907: PUSH
25908: LD_INT 3
25910: PUSH
25911: LD_INT 4
25913: PUSH
25914: LD_INT 5
25916: PUSH
25917: LD_INT 6
25919: PUSH
25920: LD_INT 7
25922: PUSH
25923: LD_INT 8
25925: PUSH
25926: LD_INT 9
25928: PUSH
25929: LD_INT 10
25931: PUSH
25932: LD_INT 11
25934: PUSH
25935: LD_INT 12
25937: PUSH
25938: LD_INT 13
25940: PUSH
25941: LD_INT 14
25943: PUSH
25944: LD_INT 15
25946: PUSH
25947: LD_INT 16
25949: PUSH
25950: LD_INT 17
25952: PUSH
25953: LD_INT 18
25955: PUSH
25956: LD_INT 19
25958: PUSH
25959: LD_INT 20
25961: PUSH
25962: LD_INT 21
25964: PUSH
25965: LD_INT 22
25967: PUSH
25968: LD_INT 23
25970: PUSH
25971: LD_INT 24
25973: PUSH
25974: LD_INT 25
25976: PUSH
25977: LD_INT 26
25979: PUSH
25980: LD_INT 27
25982: PUSH
25983: LD_INT 28
25985: PUSH
25986: LD_INT 29
25988: PUSH
25989: LD_INT 30
25991: PUSH
25992: LD_INT 31
25994: PUSH
25995: LD_INT 32
25997: PUSH
25998: LD_INT 33
26000: PUSH
26001: LD_INT 34
26003: PUSH
26004: LD_INT 35
26006: PUSH
26007: LD_INT 36
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 101
26050: PUSH
26051: LD_INT 102
26053: PUSH
26054: LD_INT 103
26056: PUSH
26057: LD_INT 104
26059: PUSH
26060: LD_INT 105
26062: PUSH
26063: LD_INT 106
26065: PUSH
26066: LD_INT 107
26068: PUSH
26069: LD_INT 108
26071: PUSH
26072: LD_INT 109
26074: PUSH
26075: LD_INT 110
26077: PUSH
26078: LD_INT 111
26080: PUSH
26081: LD_INT 112
26083: PUSH
26084: LD_INT 113
26086: PUSH
26087: LD_INT 114
26089: PUSH
26090: LD_INT 115
26092: PUSH
26093: LD_INT 116
26095: PUSH
26096: LD_INT 117
26098: PUSH
26099: LD_INT 118
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: ST_TO_ADDR
26126: GO 26129
26128: POP
// end else
26129: GO 26360
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
26131: LD_ADDR_VAR 0 2
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: LD_INT 2
26141: PUSH
26142: LD_INT 3
26144: PUSH
26145: LD_INT 4
26147: PUSH
26148: LD_INT 5
26150: PUSH
26151: LD_INT 6
26153: PUSH
26154: LD_INT 7
26156: PUSH
26157: LD_INT 8
26159: PUSH
26160: LD_INT 9
26162: PUSH
26163: LD_INT 10
26165: PUSH
26166: LD_INT 11
26168: PUSH
26169: LD_INT 12
26171: PUSH
26172: LD_INT 13
26174: PUSH
26175: LD_INT 14
26177: PUSH
26178: LD_INT 15
26180: PUSH
26181: LD_INT 16
26183: PUSH
26184: LD_INT 17
26186: PUSH
26187: LD_INT 18
26189: PUSH
26190: LD_INT 19
26192: PUSH
26193: LD_INT 20
26195: PUSH
26196: LD_INT 21
26198: PUSH
26199: LD_INT 22
26201: PUSH
26202: LD_INT 23
26204: PUSH
26205: LD_INT 24
26207: PUSH
26208: LD_INT 25
26210: PUSH
26211: LD_INT 26
26213: PUSH
26214: LD_INT 27
26216: PUSH
26217: LD_INT 28
26219: PUSH
26220: LD_INT 29
26222: PUSH
26223: LD_INT 30
26225: PUSH
26226: LD_INT 31
26228: PUSH
26229: LD_INT 32
26231: PUSH
26232: LD_INT 33
26234: PUSH
26235: LD_INT 34
26237: PUSH
26238: LD_INT 35
26240: PUSH
26241: LD_INT 36
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 101
26284: PUSH
26285: LD_INT 102
26287: PUSH
26288: LD_INT 103
26290: PUSH
26291: LD_INT 104
26293: PUSH
26294: LD_INT 105
26296: PUSH
26297: LD_INT 106
26299: PUSH
26300: LD_INT 107
26302: PUSH
26303: LD_INT 108
26305: PUSH
26306: LD_INT 109
26308: PUSH
26309: LD_INT 110
26311: PUSH
26312: LD_INT 111
26314: PUSH
26315: LD_INT 112
26317: PUSH
26318: LD_INT 113
26320: PUSH
26321: LD_INT 114
26323: PUSH
26324: LD_INT 115
26326: PUSH
26327: LD_INT 116
26329: PUSH
26330: LD_INT 117
26332: PUSH
26333: LD_INT 118
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: ST_TO_ADDR
// if result then
26360: LD_VAR 0 2
26364: IFFALSE 27150
// begin normal :=  ;
26366: LD_ADDR_VAR 0 5
26370: PUSH
26371: LD_STRING 
26373: ST_TO_ADDR
// hardcore :=  ;
26374: LD_ADDR_VAR 0 6
26378: PUSH
26379: LD_STRING 
26381: ST_TO_ADDR
// active :=  ;
26382: LD_ADDR_VAR 0 7
26386: PUSH
26387: LD_STRING 
26389: ST_TO_ADDR
// for i = 1 to normalCounter do
26390: LD_ADDR_VAR 0 8
26394: PUSH
26395: DOUBLE
26396: LD_INT 1
26398: DEC
26399: ST_TO_ADDR
26400: LD_EXP 52
26404: PUSH
26405: FOR_TO
26406: IFFALSE 26507
// begin tmp := 0 ;
26408: LD_ADDR_VAR 0 3
26412: PUSH
26413: LD_STRING 0
26415: ST_TO_ADDR
// if result [ 1 ] then
26416: LD_VAR 0 2
26420: PUSH
26421: LD_INT 1
26423: ARRAY
26424: IFFALSE 26489
// if result [ 1 ] [ 1 ] = i then
26426: LD_VAR 0 2
26430: PUSH
26431: LD_INT 1
26433: ARRAY
26434: PUSH
26435: LD_INT 1
26437: ARRAY
26438: PUSH
26439: LD_VAR 0 8
26443: EQUAL
26444: IFFALSE 26489
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26446: LD_ADDR_VAR 0 2
26450: PUSH
26451: LD_VAR 0 2
26455: PPUSH
26456: LD_INT 1
26458: PPUSH
26459: LD_VAR 0 2
26463: PUSH
26464: LD_INT 1
26466: ARRAY
26467: PPUSH
26468: LD_INT 1
26470: PPUSH
26471: CALL_OW 3
26475: PPUSH
26476: CALL_OW 1
26480: ST_TO_ADDR
// tmp := 1 ;
26481: LD_ADDR_VAR 0 3
26485: PUSH
26486: LD_STRING 1
26488: ST_TO_ADDR
// end ; normal := normal & tmp ;
26489: LD_ADDR_VAR 0 5
26493: PUSH
26494: LD_VAR 0 5
26498: PUSH
26499: LD_VAR 0 3
26503: STR
26504: ST_TO_ADDR
// end ;
26505: GO 26405
26507: POP
26508: POP
// for i = 1 to hardcoreCounter do
26509: LD_ADDR_VAR 0 8
26513: PUSH
26514: DOUBLE
26515: LD_INT 1
26517: DEC
26518: ST_TO_ADDR
26519: LD_EXP 53
26523: PUSH
26524: FOR_TO
26525: IFFALSE 26630
// begin tmp := 0 ;
26527: LD_ADDR_VAR 0 3
26531: PUSH
26532: LD_STRING 0
26534: ST_TO_ADDR
// if result [ 2 ] then
26535: LD_VAR 0 2
26539: PUSH
26540: LD_INT 2
26542: ARRAY
26543: IFFALSE 26612
// if result [ 2 ] [ 1 ] = 100 + i then
26545: LD_VAR 0 2
26549: PUSH
26550: LD_INT 2
26552: ARRAY
26553: PUSH
26554: LD_INT 1
26556: ARRAY
26557: PUSH
26558: LD_INT 100
26560: PUSH
26561: LD_VAR 0 8
26565: PLUS
26566: EQUAL
26567: IFFALSE 26612
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26569: LD_ADDR_VAR 0 2
26573: PUSH
26574: LD_VAR 0 2
26578: PPUSH
26579: LD_INT 2
26581: PPUSH
26582: LD_VAR 0 2
26586: PUSH
26587: LD_INT 2
26589: ARRAY
26590: PPUSH
26591: LD_INT 1
26593: PPUSH
26594: CALL_OW 3
26598: PPUSH
26599: CALL_OW 1
26603: ST_TO_ADDR
// tmp := 1 ;
26604: LD_ADDR_VAR 0 3
26608: PUSH
26609: LD_STRING 1
26611: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26612: LD_ADDR_VAR 0 6
26616: PUSH
26617: LD_VAR 0 6
26621: PUSH
26622: LD_VAR 0 3
26626: STR
26627: ST_TO_ADDR
// end ;
26628: GO 26524
26630: POP
26631: POP
// if isGameLoad then
26632: LD_VAR 0 1
26636: IFFALSE 27111
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26638: LD_ADDR_VAR 0 4
26642: PUSH
26643: LD_EXP 56
26647: PUSH
26648: LD_EXP 55
26652: PUSH
26653: LD_EXP 57
26657: PUSH
26658: LD_EXP 54
26662: PUSH
26663: LD_EXP 58
26667: PUSH
26668: LD_EXP 59
26672: PUSH
26673: LD_EXP 60
26677: PUSH
26678: LD_EXP 61
26682: PUSH
26683: LD_EXP 62
26687: PUSH
26688: LD_EXP 63
26692: PUSH
26693: LD_EXP 64
26697: PUSH
26698: LD_EXP 65
26702: PUSH
26703: LD_EXP 66
26707: PUSH
26708: LD_EXP 67
26712: PUSH
26713: LD_EXP 75
26717: PUSH
26718: LD_EXP 76
26722: PUSH
26723: LD_EXP 77
26727: PUSH
26728: LD_EXP 78
26732: PUSH
26733: LD_EXP 80
26737: PUSH
26738: LD_EXP 81
26742: PUSH
26743: LD_EXP 82
26747: PUSH
26748: LD_EXP 85
26752: PUSH
26753: LD_EXP 87
26757: PUSH
26758: LD_EXP 88
26762: PUSH
26763: LD_EXP 89
26767: PUSH
26768: LD_EXP 91
26772: PUSH
26773: LD_EXP 92
26777: PUSH
26778: LD_EXP 95
26782: PUSH
26783: LD_EXP 96
26787: PUSH
26788: LD_EXP 97
26792: PUSH
26793: LD_EXP 98
26797: PUSH
26798: LD_EXP 99
26802: PUSH
26803: LD_EXP 100
26807: PUSH
26808: LD_EXP 101
26812: PUSH
26813: LD_EXP 102
26817: PUSH
26818: LD_EXP 103
26822: PUSH
26823: LD_EXP 68
26827: PUSH
26828: LD_EXP 69
26832: PUSH
26833: LD_EXP 72
26837: PUSH
26838: LD_EXP 73
26842: PUSH
26843: LD_EXP 74
26847: PUSH
26848: LD_EXP 70
26852: PUSH
26853: LD_EXP 71
26857: PUSH
26858: LD_EXP 79
26862: PUSH
26863: LD_EXP 83
26867: PUSH
26868: LD_EXP 84
26872: PUSH
26873: LD_EXP 86
26877: PUSH
26878: LD_EXP 90
26882: PUSH
26883: LD_EXP 93
26887: PUSH
26888: LD_EXP 94
26892: PUSH
26893: LD_EXP 104
26897: PUSH
26898: LD_EXP 105
26902: PUSH
26903: LD_EXP 106
26907: PUSH
26908: LD_EXP 107
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: ST_TO_ADDR
// tmp :=  ;
26969: LD_ADDR_VAR 0 3
26973: PUSH
26974: LD_STRING 
26976: ST_TO_ADDR
// for i = 1 to normalCounter do
26977: LD_ADDR_VAR 0 8
26981: PUSH
26982: DOUBLE
26983: LD_INT 1
26985: DEC
26986: ST_TO_ADDR
26987: LD_EXP 52
26991: PUSH
26992: FOR_TO
26993: IFFALSE 27029
// begin if flags [ i ] then
26995: LD_VAR 0 4
26999: PUSH
27000: LD_VAR 0 8
27004: ARRAY
27005: IFFALSE 27027
// tmp := tmp & i & ; ;
27007: LD_ADDR_VAR 0 3
27011: PUSH
27012: LD_VAR 0 3
27016: PUSH
27017: LD_VAR 0 8
27021: STR
27022: PUSH
27023: LD_STRING ;
27025: STR
27026: ST_TO_ADDR
// end ;
27027: GO 26992
27029: POP
27030: POP
// for i = 1 to hardcoreCounter do
27031: LD_ADDR_VAR 0 8
27035: PUSH
27036: DOUBLE
27037: LD_INT 1
27039: DEC
27040: ST_TO_ADDR
27041: LD_EXP 53
27045: PUSH
27046: FOR_TO
27047: IFFALSE 27093
// begin if flags [ normalCounter + i ] then
27049: LD_VAR 0 4
27053: PUSH
27054: LD_EXP 52
27058: PUSH
27059: LD_VAR 0 8
27063: PLUS
27064: ARRAY
27065: IFFALSE 27091
// tmp := tmp & ( 100 + i ) & ; ;
27067: LD_ADDR_VAR 0 3
27071: PUSH
27072: LD_VAR 0 3
27076: PUSH
27077: LD_INT 100
27079: PUSH
27080: LD_VAR 0 8
27084: PLUS
27085: STR
27086: PUSH
27087: LD_STRING ;
27089: STR
27090: ST_TO_ADDR
// end ;
27091: GO 27046
27093: POP
27094: POP
// if tmp then
27095: LD_VAR 0 3
27099: IFFALSE 27111
// active := tmp ;
27101: LD_ADDR_VAR 0 7
27105: PUSH
27106: LD_VAR 0 3
27110: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27111: LD_STRING getStreamItemsFromMission("
27113: PUSH
27114: LD_VAR 0 5
27118: STR
27119: PUSH
27120: LD_STRING ","
27122: STR
27123: PUSH
27124: LD_VAR 0 6
27128: STR
27129: PUSH
27130: LD_STRING ","
27132: STR
27133: PUSH
27134: LD_VAR 0 7
27138: STR
27139: PUSH
27140: LD_STRING ")
27142: STR
27143: PPUSH
27144: CALL_OW 559
// end else
27148: GO 27157
// ToLua ( getStreamItemsFromMission("","","") ) ;
27150: LD_STRING getStreamItemsFromMission("","","")
27152: PPUSH
27153: CALL_OW 559
// end ;
27157: LD_VAR 0 2
27161: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27162: LD_EXP 51
27166: PUSH
27167: LD_EXP 56
27171: AND
27172: IFFALSE 27296
27174: GO 27176
27176: DISABLE
27177: LD_INT 0
27179: PPUSH
27180: PPUSH
// begin enable ;
27181: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27182: LD_ADDR_VAR 0 2
27186: PUSH
27187: LD_INT 22
27189: PUSH
27190: LD_OWVAR 2
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 2
27201: PUSH
27202: LD_INT 34
27204: PUSH
27205: LD_INT 7
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 34
27214: PUSH
27215: LD_INT 45
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 34
27224: PUSH
27225: LD_INT 28
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 34
27234: PUSH
27235: LD_INT 47
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PPUSH
27253: CALL_OW 69
27257: ST_TO_ADDR
// if not tmp then
27258: LD_VAR 0 2
27262: NOT
27263: IFFALSE 27267
// exit ;
27265: GO 27296
// for i in tmp do
27267: LD_ADDR_VAR 0 1
27271: PUSH
27272: LD_VAR 0 2
27276: PUSH
27277: FOR_IN
27278: IFFALSE 27294
// begin SetLives ( i , 0 ) ;
27280: LD_VAR 0 1
27284: PPUSH
27285: LD_INT 0
27287: PPUSH
27288: CALL_OW 234
// end ;
27292: GO 27277
27294: POP
27295: POP
// end ;
27296: PPOPN 2
27298: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27299: LD_EXP 51
27303: PUSH
27304: LD_EXP 57
27308: AND
27309: IFFALSE 27393
27311: GO 27313
27313: DISABLE
27314: LD_INT 0
27316: PPUSH
27317: PPUSH
// begin enable ;
27318: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27319: LD_ADDR_VAR 0 2
27323: PUSH
27324: LD_INT 22
27326: PUSH
27327: LD_OWVAR 2
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 32
27338: PUSH
27339: LD_INT 3
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PPUSH
27350: CALL_OW 69
27354: ST_TO_ADDR
// if not tmp then
27355: LD_VAR 0 2
27359: NOT
27360: IFFALSE 27364
// exit ;
27362: GO 27393
// for i in tmp do
27364: LD_ADDR_VAR 0 1
27368: PUSH
27369: LD_VAR 0 2
27373: PUSH
27374: FOR_IN
27375: IFFALSE 27391
// begin SetLives ( i , 0 ) ;
27377: LD_VAR 0 1
27381: PPUSH
27382: LD_INT 0
27384: PPUSH
27385: CALL_OW 234
// end ;
27389: GO 27374
27391: POP
27392: POP
// end ;
27393: PPOPN 2
27395: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27396: LD_EXP 51
27400: PUSH
27401: LD_EXP 54
27405: AND
27406: IFFALSE 27499
27408: GO 27410
27410: DISABLE
27411: LD_INT 0
27413: PPUSH
// begin enable ;
27414: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27415: LD_ADDR_VAR 0 1
27419: PUSH
27420: LD_INT 22
27422: PUSH
27423: LD_OWVAR 2
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 2
27434: PUSH
27435: LD_INT 25
27437: PUSH
27438: LD_INT 5
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 25
27447: PUSH
27448: LD_INT 9
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 25
27457: PUSH
27458: LD_INT 8
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PPUSH
27475: CALL_OW 69
27479: PUSH
27480: FOR_IN
27481: IFFALSE 27497
// begin SetClass ( i , 1 ) ;
27483: LD_VAR 0 1
27487: PPUSH
27488: LD_INT 1
27490: PPUSH
27491: CALL_OW 336
// end ;
27495: GO 27480
27497: POP
27498: POP
// end ;
27499: PPOPN 1
27501: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27502: LD_EXP 51
27506: PUSH
27507: LD_EXP 55
27511: AND
27512: PUSH
27513: LD_OWVAR 65
27517: PUSH
27518: LD_INT 7
27520: LESS
27521: AND
27522: IFFALSE 27536
27524: GO 27526
27526: DISABLE
// begin enable ;
27527: ENABLE
// game_speed := 7 ;
27528: LD_ADDR_OWVAR 65
27532: PUSH
27533: LD_INT 7
27535: ST_TO_ADDR
// end ;
27536: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27537: LD_EXP 51
27541: PUSH
27542: LD_EXP 58
27546: AND
27547: IFFALSE 27749
27549: GO 27551
27551: DISABLE
27552: LD_INT 0
27554: PPUSH
27555: PPUSH
27556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27557: LD_ADDR_VAR 0 3
27561: PUSH
27562: LD_INT 81
27564: PUSH
27565: LD_OWVAR 2
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 21
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PPUSH
27588: CALL_OW 69
27592: ST_TO_ADDR
// if not tmp then
27593: LD_VAR 0 3
27597: NOT
27598: IFFALSE 27602
// exit ;
27600: GO 27749
// if tmp > 5 then
27602: LD_VAR 0 3
27606: PUSH
27607: LD_INT 5
27609: GREATER
27610: IFFALSE 27622
// k := 5 else
27612: LD_ADDR_VAR 0 2
27616: PUSH
27617: LD_INT 5
27619: ST_TO_ADDR
27620: GO 27632
// k := tmp ;
27622: LD_ADDR_VAR 0 2
27626: PUSH
27627: LD_VAR 0 3
27631: ST_TO_ADDR
// for i := 1 to k do
27632: LD_ADDR_VAR 0 1
27636: PUSH
27637: DOUBLE
27638: LD_INT 1
27640: DEC
27641: ST_TO_ADDR
27642: LD_VAR 0 2
27646: PUSH
27647: FOR_TO
27648: IFFALSE 27747
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27650: LD_VAR 0 3
27654: PUSH
27655: LD_VAR 0 1
27659: ARRAY
27660: PPUSH
27661: LD_VAR 0 1
27665: PUSH
27666: LD_INT 4
27668: MOD
27669: PUSH
27670: LD_INT 1
27672: PLUS
27673: PPUSH
27674: CALL_OW 259
27678: PUSH
27679: LD_INT 10
27681: LESS
27682: IFFALSE 27745
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27684: LD_VAR 0 3
27688: PUSH
27689: LD_VAR 0 1
27693: ARRAY
27694: PPUSH
27695: LD_VAR 0 1
27699: PUSH
27700: LD_INT 4
27702: MOD
27703: PUSH
27704: LD_INT 1
27706: PLUS
27707: PPUSH
27708: LD_VAR 0 3
27712: PUSH
27713: LD_VAR 0 1
27717: ARRAY
27718: PPUSH
27719: LD_VAR 0 1
27723: PUSH
27724: LD_INT 4
27726: MOD
27727: PUSH
27728: LD_INT 1
27730: PLUS
27731: PPUSH
27732: CALL_OW 259
27736: PUSH
27737: LD_INT 1
27739: PLUS
27740: PPUSH
27741: CALL_OW 237
27745: GO 27647
27747: POP
27748: POP
// end ;
27749: PPOPN 3
27751: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27752: LD_EXP 51
27756: PUSH
27757: LD_EXP 59
27761: AND
27762: IFFALSE 27782
27764: GO 27766
27766: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27767: LD_INT 4
27769: PPUSH
27770: LD_OWVAR 2
27774: PPUSH
27775: LD_INT 0
27777: PPUSH
27778: CALL_OW 324
27782: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27783: LD_EXP 51
27787: PUSH
27788: LD_EXP 88
27792: AND
27793: IFFALSE 27813
27795: GO 27797
27797: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27798: LD_INT 19
27800: PPUSH
27801: LD_OWVAR 2
27805: PPUSH
27806: LD_INT 0
27808: PPUSH
27809: CALL_OW 324
27813: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27814: LD_EXP 51
27818: PUSH
27819: LD_EXP 60
27823: AND
27824: IFFALSE 27926
27826: GO 27828
27828: DISABLE
27829: LD_INT 0
27831: PPUSH
27832: PPUSH
// begin enable ;
27833: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27834: LD_ADDR_VAR 0 2
27838: PUSH
27839: LD_INT 22
27841: PUSH
27842: LD_OWVAR 2
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: LD_INT 34
27856: PUSH
27857: LD_INT 11
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 34
27866: PUSH
27867: LD_INT 30
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: LIST
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PPUSH
27883: CALL_OW 69
27887: ST_TO_ADDR
// if not tmp then
27888: LD_VAR 0 2
27892: NOT
27893: IFFALSE 27897
// exit ;
27895: GO 27926
// for i in tmp do
27897: LD_ADDR_VAR 0 1
27901: PUSH
27902: LD_VAR 0 2
27906: PUSH
27907: FOR_IN
27908: IFFALSE 27924
// begin SetLives ( i , 0 ) ;
27910: LD_VAR 0 1
27914: PPUSH
27915: LD_INT 0
27917: PPUSH
27918: CALL_OW 234
// end ;
27922: GO 27907
27924: POP
27925: POP
// end ;
27926: PPOPN 2
27928: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27929: LD_EXP 51
27933: PUSH
27934: LD_EXP 61
27938: AND
27939: IFFALSE 27959
27941: GO 27943
27943: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27944: LD_INT 32
27946: PPUSH
27947: LD_OWVAR 2
27951: PPUSH
27952: LD_INT 0
27954: PPUSH
27955: CALL_OW 324
27959: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27960: LD_EXP 51
27964: PUSH
27965: LD_EXP 62
27969: AND
27970: IFFALSE 28151
27972: GO 27974
27974: DISABLE
27975: LD_INT 0
27977: PPUSH
27978: PPUSH
27979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27980: LD_ADDR_VAR 0 2
27984: PUSH
27985: LD_INT 22
27987: PUSH
27988: LD_OWVAR 2
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 33
27999: PUSH
28000: LD_INT 3
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PPUSH
28011: CALL_OW 69
28015: ST_TO_ADDR
// if not tmp then
28016: LD_VAR 0 2
28020: NOT
28021: IFFALSE 28025
// exit ;
28023: GO 28151
// side := 0 ;
28025: LD_ADDR_VAR 0 3
28029: PUSH
28030: LD_INT 0
28032: ST_TO_ADDR
// for i := 1 to 8 do
28033: LD_ADDR_VAR 0 1
28037: PUSH
28038: DOUBLE
28039: LD_INT 1
28041: DEC
28042: ST_TO_ADDR
28043: LD_INT 8
28045: PUSH
28046: FOR_TO
28047: IFFALSE 28095
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28049: LD_OWVAR 2
28053: PUSH
28054: LD_VAR 0 1
28058: NONEQUAL
28059: PUSH
28060: LD_OWVAR 2
28064: PPUSH
28065: LD_VAR 0 1
28069: PPUSH
28070: CALL_OW 81
28074: PUSH
28075: LD_INT 2
28077: EQUAL
28078: AND
28079: IFFALSE 28093
// begin side := i ;
28081: LD_ADDR_VAR 0 3
28085: PUSH
28086: LD_VAR 0 1
28090: ST_TO_ADDR
// break ;
28091: GO 28095
// end ;
28093: GO 28046
28095: POP
28096: POP
// if not side then
28097: LD_VAR 0 3
28101: NOT
28102: IFFALSE 28106
// exit ;
28104: GO 28151
// for i := 1 to tmp do
28106: LD_ADDR_VAR 0 1
28110: PUSH
28111: DOUBLE
28112: LD_INT 1
28114: DEC
28115: ST_TO_ADDR
28116: LD_VAR 0 2
28120: PUSH
28121: FOR_TO
28122: IFFALSE 28149
// if Prob ( 60 ) then
28124: LD_INT 60
28126: PPUSH
28127: CALL_OW 13
28131: IFFALSE 28147
// SetSide ( i , side ) ;
28133: LD_VAR 0 1
28137: PPUSH
28138: LD_VAR 0 3
28142: PPUSH
28143: CALL_OW 235
28147: GO 28121
28149: POP
28150: POP
// end ;
28151: PPOPN 3
28153: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28154: LD_EXP 51
28158: PUSH
28159: LD_EXP 64
28163: AND
28164: IFFALSE 28283
28166: GO 28168
28168: DISABLE
28169: LD_INT 0
28171: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28172: LD_ADDR_VAR 0 1
28176: PUSH
28177: LD_INT 22
28179: PUSH
28180: LD_OWVAR 2
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 21
28191: PUSH
28192: LD_INT 1
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 3
28201: PUSH
28202: LD_INT 23
28204: PUSH
28205: LD_INT 0
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: LIST
28220: PPUSH
28221: CALL_OW 69
28225: PUSH
28226: FOR_IN
28227: IFFALSE 28281
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28229: LD_VAR 0 1
28233: PPUSH
28234: CALL_OW 257
28238: PUSH
28239: LD_INT 1
28241: PUSH
28242: LD_INT 2
28244: PUSH
28245: LD_INT 3
28247: PUSH
28248: LD_INT 4
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: IN
28257: IFFALSE 28279
// SetClass ( un , rand ( 1 , 4 ) ) ;
28259: LD_VAR 0 1
28263: PPUSH
28264: LD_INT 1
28266: PPUSH
28267: LD_INT 4
28269: PPUSH
28270: CALL_OW 12
28274: PPUSH
28275: CALL_OW 336
28279: GO 28226
28281: POP
28282: POP
// end ;
28283: PPOPN 1
28285: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28286: LD_EXP 51
28290: PUSH
28291: LD_EXP 63
28295: AND
28296: IFFALSE 28375
28298: GO 28300
28300: DISABLE
28301: LD_INT 0
28303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28304: LD_ADDR_VAR 0 1
28308: PUSH
28309: LD_INT 22
28311: PUSH
28312: LD_OWVAR 2
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 21
28323: PUSH
28324: LD_INT 3
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PPUSH
28335: CALL_OW 69
28339: ST_TO_ADDR
// if not tmp then
28340: LD_VAR 0 1
28344: NOT
28345: IFFALSE 28349
// exit ;
28347: GO 28375
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28349: LD_VAR 0 1
28353: PUSH
28354: LD_INT 1
28356: PPUSH
28357: LD_VAR 0 1
28361: PPUSH
28362: CALL_OW 12
28366: ARRAY
28367: PPUSH
28368: LD_INT 100
28370: PPUSH
28371: CALL_OW 234
// end ;
28375: PPOPN 1
28377: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28378: LD_EXP 51
28382: PUSH
28383: LD_EXP 65
28387: AND
28388: IFFALSE 28486
28390: GO 28392
28392: DISABLE
28393: LD_INT 0
28395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28396: LD_ADDR_VAR 0 1
28400: PUSH
28401: LD_INT 22
28403: PUSH
28404: LD_OWVAR 2
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 21
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PPUSH
28427: CALL_OW 69
28431: ST_TO_ADDR
// if not tmp then
28432: LD_VAR 0 1
28436: NOT
28437: IFFALSE 28441
// exit ;
28439: GO 28486
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28441: LD_VAR 0 1
28445: PUSH
28446: LD_INT 1
28448: PPUSH
28449: LD_VAR 0 1
28453: PPUSH
28454: CALL_OW 12
28458: ARRAY
28459: PPUSH
28460: LD_INT 1
28462: PPUSH
28463: LD_INT 4
28465: PPUSH
28466: CALL_OW 12
28470: PPUSH
28471: LD_INT 3000
28473: PPUSH
28474: LD_INT 9000
28476: PPUSH
28477: CALL_OW 12
28481: PPUSH
28482: CALL_OW 492
// end ;
28486: PPOPN 1
28488: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28489: LD_EXP 51
28493: PUSH
28494: LD_EXP 66
28498: AND
28499: IFFALSE 28519
28501: GO 28503
28503: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28504: LD_INT 1
28506: PPUSH
28507: LD_OWVAR 2
28511: PPUSH
28512: LD_INT 0
28514: PPUSH
28515: CALL_OW 324
28519: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28520: LD_EXP 51
28524: PUSH
28525: LD_EXP 67
28529: AND
28530: IFFALSE 28613
28532: GO 28534
28534: DISABLE
28535: LD_INT 0
28537: PPUSH
28538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28539: LD_ADDR_VAR 0 2
28543: PUSH
28544: LD_INT 22
28546: PUSH
28547: LD_OWVAR 2
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 21
28558: PUSH
28559: LD_INT 3
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PPUSH
28570: CALL_OW 69
28574: ST_TO_ADDR
// if not tmp then
28575: LD_VAR 0 2
28579: NOT
28580: IFFALSE 28584
// exit ;
28582: GO 28613
// for i in tmp do
28584: LD_ADDR_VAR 0 1
28588: PUSH
28589: LD_VAR 0 2
28593: PUSH
28594: FOR_IN
28595: IFFALSE 28611
// SetBLevel ( i , 10 ) ;
28597: LD_VAR 0 1
28601: PPUSH
28602: LD_INT 10
28604: PPUSH
28605: CALL_OW 241
28609: GO 28594
28611: POP
28612: POP
// end ;
28613: PPOPN 2
28615: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28616: LD_EXP 51
28620: PUSH
28621: LD_EXP 68
28625: AND
28626: IFFALSE 28737
28628: GO 28630
28630: DISABLE
28631: LD_INT 0
28633: PPUSH
28634: PPUSH
28635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28636: LD_ADDR_VAR 0 3
28640: PUSH
28641: LD_INT 22
28643: PUSH
28644: LD_OWVAR 2
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 25
28655: PUSH
28656: LD_INT 1
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PPUSH
28667: CALL_OW 69
28671: ST_TO_ADDR
// if not tmp then
28672: LD_VAR 0 3
28676: NOT
28677: IFFALSE 28681
// exit ;
28679: GO 28737
// un := tmp [ rand ( 1 , tmp ) ] ;
28681: LD_ADDR_VAR 0 2
28685: PUSH
28686: LD_VAR 0 3
28690: PUSH
28691: LD_INT 1
28693: PPUSH
28694: LD_VAR 0 3
28698: PPUSH
28699: CALL_OW 12
28703: ARRAY
28704: ST_TO_ADDR
// if Crawls ( un ) then
28705: LD_VAR 0 2
28709: PPUSH
28710: CALL_OW 318
28714: IFFALSE 28725
// ComWalk ( un ) ;
28716: LD_VAR 0 2
28720: PPUSH
28721: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28725: LD_VAR 0 2
28729: PPUSH
28730: LD_INT 5
28732: PPUSH
28733: CALL_OW 336
// end ;
28737: PPOPN 3
28739: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28740: LD_EXP 51
28744: PUSH
28745: LD_EXP 69
28749: AND
28750: PUSH
28751: LD_OWVAR 67
28755: PUSH
28756: LD_INT 4
28758: LESS
28759: AND
28760: IFFALSE 28779
28762: GO 28764
28764: DISABLE
// begin Difficulty := Difficulty + 1 ;
28765: LD_ADDR_OWVAR 67
28769: PUSH
28770: LD_OWVAR 67
28774: PUSH
28775: LD_INT 1
28777: PLUS
28778: ST_TO_ADDR
// end ;
28779: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28780: LD_EXP 51
28784: PUSH
28785: LD_EXP 70
28789: AND
28790: IFFALSE 28893
28792: GO 28794
28794: DISABLE
28795: LD_INT 0
28797: PPUSH
// begin for i := 1 to 5 do
28798: LD_ADDR_VAR 0 1
28802: PUSH
28803: DOUBLE
28804: LD_INT 1
28806: DEC
28807: ST_TO_ADDR
28808: LD_INT 5
28810: PUSH
28811: FOR_TO
28812: IFFALSE 28891
// begin uc_nation := nation_nature ;
28814: LD_ADDR_OWVAR 21
28818: PUSH
28819: LD_INT 0
28821: ST_TO_ADDR
// uc_side := 0 ;
28822: LD_ADDR_OWVAR 20
28826: PUSH
28827: LD_INT 0
28829: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28830: LD_ADDR_OWVAR 29
28834: PUSH
28835: LD_INT 12
28837: PUSH
28838: LD_INT 12
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: ST_TO_ADDR
// hc_agressivity := 20 ;
28845: LD_ADDR_OWVAR 35
28849: PUSH
28850: LD_INT 20
28852: ST_TO_ADDR
// hc_class := class_tiger ;
28853: LD_ADDR_OWVAR 28
28857: PUSH
28858: LD_INT 14
28860: ST_TO_ADDR
// hc_gallery :=  ;
28861: LD_ADDR_OWVAR 33
28865: PUSH
28866: LD_STRING 
28868: ST_TO_ADDR
// hc_name :=  ;
28869: LD_ADDR_OWVAR 26
28873: PUSH
28874: LD_STRING 
28876: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28877: CALL_OW 44
28881: PPUSH
28882: LD_INT 0
28884: PPUSH
28885: CALL_OW 51
// end ;
28889: GO 28811
28891: POP
28892: POP
// end ;
28893: PPOPN 1
28895: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28896: LD_EXP 51
28900: PUSH
28901: LD_EXP 71
28905: AND
28906: IFFALSE 28915
28908: GO 28910
28910: DISABLE
// StreamSibBomb ;
28911: CALL 28916 0 0
28915: END
// export function StreamSibBomb ; var i , x , y ; begin
28916: LD_INT 0
28918: PPUSH
28919: PPUSH
28920: PPUSH
28921: PPUSH
// result := false ;
28922: LD_ADDR_VAR 0 1
28926: PUSH
28927: LD_INT 0
28929: ST_TO_ADDR
// for i := 1 to 16 do
28930: LD_ADDR_VAR 0 2
28934: PUSH
28935: DOUBLE
28936: LD_INT 1
28938: DEC
28939: ST_TO_ADDR
28940: LD_INT 16
28942: PUSH
28943: FOR_TO
28944: IFFALSE 29143
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28946: LD_ADDR_VAR 0 3
28950: PUSH
28951: LD_INT 10
28953: PUSH
28954: LD_INT 20
28956: PUSH
28957: LD_INT 30
28959: PUSH
28960: LD_INT 40
28962: PUSH
28963: LD_INT 50
28965: PUSH
28966: LD_INT 60
28968: PUSH
28969: LD_INT 70
28971: PUSH
28972: LD_INT 80
28974: PUSH
28975: LD_INT 90
28977: PUSH
28978: LD_INT 100
28980: PUSH
28981: LD_INT 110
28983: PUSH
28984: LD_INT 120
28986: PUSH
28987: LD_INT 130
28989: PUSH
28990: LD_INT 140
28992: PUSH
28993: LD_INT 150
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 1
29015: PPUSH
29016: LD_INT 15
29018: PPUSH
29019: CALL_OW 12
29023: ARRAY
29024: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29025: LD_ADDR_VAR 0 4
29029: PUSH
29030: LD_INT 10
29032: PUSH
29033: LD_INT 20
29035: PUSH
29036: LD_INT 30
29038: PUSH
29039: LD_INT 40
29041: PUSH
29042: LD_INT 50
29044: PUSH
29045: LD_INT 60
29047: PUSH
29048: LD_INT 70
29050: PUSH
29051: LD_INT 80
29053: PUSH
29054: LD_INT 90
29056: PUSH
29057: LD_INT 100
29059: PUSH
29060: LD_INT 110
29062: PUSH
29063: LD_INT 120
29065: PUSH
29066: LD_INT 130
29068: PUSH
29069: LD_INT 140
29071: PUSH
29072: LD_INT 150
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 1
29094: PPUSH
29095: LD_INT 15
29097: PPUSH
29098: CALL_OW 12
29102: ARRAY
29103: ST_TO_ADDR
// if ValidHex ( x , y ) then
29104: LD_VAR 0 3
29108: PPUSH
29109: LD_VAR 0 4
29113: PPUSH
29114: CALL_OW 488
29118: IFFALSE 29141
// begin result := [ x , y ] ;
29120: LD_ADDR_VAR 0 1
29124: PUSH
29125: LD_VAR 0 3
29129: PUSH
29130: LD_VAR 0 4
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: ST_TO_ADDR
// break ;
29139: GO 29143
// end ; end ;
29141: GO 28943
29143: POP
29144: POP
// if result then
29145: LD_VAR 0 1
29149: IFFALSE 29209
// begin ToLua ( playSibBomb() ) ;
29151: LD_STRING playSibBomb()
29153: PPUSH
29154: CALL_OW 559
// wait ( 0 0$14 ) ;
29158: LD_INT 490
29160: PPUSH
29161: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29165: LD_VAR 0 1
29169: PUSH
29170: LD_INT 1
29172: ARRAY
29173: PPUSH
29174: LD_VAR 0 1
29178: PUSH
29179: LD_INT 2
29181: ARRAY
29182: PPUSH
29183: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29187: LD_VAR 0 1
29191: PUSH
29192: LD_INT 1
29194: ARRAY
29195: PPUSH
29196: LD_VAR 0 1
29200: PUSH
29201: LD_INT 2
29203: ARRAY
29204: PPUSH
29205: CALL_OW 429
// end ; end ;
29209: LD_VAR 0 1
29213: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29214: LD_EXP 51
29218: PUSH
29219: LD_EXP 73
29223: AND
29224: IFFALSE 29236
29226: GO 29228
29228: DISABLE
// YouLost (  ) ;
29229: LD_STRING 
29231: PPUSH
29232: CALL_OW 104
29236: END
// every 0 0$1 trigger StreamModeActive and sFog do
29237: LD_EXP 51
29241: PUSH
29242: LD_EXP 72
29246: AND
29247: IFFALSE 29261
29249: GO 29251
29251: DISABLE
// FogOff ( your_side ) ;
29252: LD_OWVAR 2
29256: PPUSH
29257: CALL_OW 344
29261: END
// every 0 0$1 trigger StreamModeActive and sSun do
29262: LD_EXP 51
29266: PUSH
29267: LD_EXP 74
29271: AND
29272: IFFALSE 29300
29274: GO 29276
29276: DISABLE
// begin solar_recharge_percent := 0 ;
29277: LD_ADDR_OWVAR 79
29281: PUSH
29282: LD_INT 0
29284: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29285: LD_INT 10500
29287: PPUSH
29288: CALL_OW 67
// solar_recharge_percent := 100 ;
29292: LD_ADDR_OWVAR 79
29296: PUSH
29297: LD_INT 100
29299: ST_TO_ADDR
// end ;
29300: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29301: LD_EXP 51
29305: PUSH
29306: LD_EXP 75
29310: AND
29311: IFFALSE 29550
29313: GO 29315
29315: DISABLE
29316: LD_INT 0
29318: PPUSH
29319: PPUSH
29320: PPUSH
// begin tmp := [ ] ;
29321: LD_ADDR_VAR 0 3
29325: PUSH
29326: EMPTY
29327: ST_TO_ADDR
// for i := 1 to 6 do
29328: LD_ADDR_VAR 0 1
29332: PUSH
29333: DOUBLE
29334: LD_INT 1
29336: DEC
29337: ST_TO_ADDR
29338: LD_INT 6
29340: PUSH
29341: FOR_TO
29342: IFFALSE 29447
// begin uc_nation := nation_nature ;
29344: LD_ADDR_OWVAR 21
29348: PUSH
29349: LD_INT 0
29351: ST_TO_ADDR
// uc_side := 0 ;
29352: LD_ADDR_OWVAR 20
29356: PUSH
29357: LD_INT 0
29359: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29360: LD_ADDR_OWVAR 29
29364: PUSH
29365: LD_INT 12
29367: PUSH
29368: LD_INT 12
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: ST_TO_ADDR
// hc_agressivity := 20 ;
29375: LD_ADDR_OWVAR 35
29379: PUSH
29380: LD_INT 20
29382: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29383: LD_ADDR_OWVAR 28
29387: PUSH
29388: LD_INT 17
29390: ST_TO_ADDR
// hc_gallery :=  ;
29391: LD_ADDR_OWVAR 33
29395: PUSH
29396: LD_STRING 
29398: ST_TO_ADDR
// hc_name :=  ;
29399: LD_ADDR_OWVAR 26
29403: PUSH
29404: LD_STRING 
29406: ST_TO_ADDR
// un := CreateHuman ;
29407: LD_ADDR_VAR 0 2
29411: PUSH
29412: CALL_OW 44
29416: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29417: LD_VAR 0 2
29421: PPUSH
29422: LD_INT 1
29424: PPUSH
29425: CALL_OW 51
// tmp := tmp ^ un ;
29429: LD_ADDR_VAR 0 3
29433: PUSH
29434: LD_VAR 0 3
29438: PUSH
29439: LD_VAR 0 2
29443: ADD
29444: ST_TO_ADDR
// end ;
29445: GO 29341
29447: POP
29448: POP
// repeat wait ( 0 0$1 ) ;
29449: LD_INT 35
29451: PPUSH
29452: CALL_OW 67
// for un in tmp do
29456: LD_ADDR_VAR 0 2
29460: PUSH
29461: LD_VAR 0 3
29465: PUSH
29466: FOR_IN
29467: IFFALSE 29541
// begin if IsDead ( un ) then
29469: LD_VAR 0 2
29473: PPUSH
29474: CALL_OW 301
29478: IFFALSE 29498
// begin tmp := tmp diff un ;
29480: LD_ADDR_VAR 0 3
29484: PUSH
29485: LD_VAR 0 3
29489: PUSH
29490: LD_VAR 0 2
29494: DIFF
29495: ST_TO_ADDR
// continue ;
29496: GO 29466
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29498: LD_VAR 0 2
29502: PPUSH
29503: LD_INT 3
29505: PUSH
29506: LD_INT 22
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PPUSH
29520: CALL_OW 69
29524: PPUSH
29525: LD_VAR 0 2
29529: PPUSH
29530: CALL_OW 74
29534: PPUSH
29535: CALL_OW 115
// end ;
29539: GO 29466
29541: POP
29542: POP
// until not tmp ;
29543: LD_VAR 0 3
29547: NOT
29548: IFFALSE 29449
// end ;
29550: PPOPN 3
29552: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29553: LD_EXP 51
29557: PUSH
29558: LD_EXP 76
29562: AND
29563: IFFALSE 29617
29565: GO 29567
29567: DISABLE
// begin ToLua ( displayTroll(); ) ;
29568: LD_STRING displayTroll();
29570: PPUSH
29571: CALL_OW 559
// wait ( 3 3$00 ) ;
29575: LD_INT 6300
29577: PPUSH
29578: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29582: LD_STRING hideTroll();
29584: PPUSH
29585: CALL_OW 559
// wait ( 1 1$00 ) ;
29589: LD_INT 2100
29591: PPUSH
29592: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29596: LD_STRING displayTroll();
29598: PPUSH
29599: CALL_OW 559
// wait ( 1 1$00 ) ;
29603: LD_INT 2100
29605: PPUSH
29606: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29610: LD_STRING hideTroll();
29612: PPUSH
29613: CALL_OW 559
// end ;
29617: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29618: LD_EXP 51
29622: PUSH
29623: LD_EXP 77
29627: AND
29628: IFFALSE 29691
29630: GO 29632
29632: DISABLE
29633: LD_INT 0
29635: PPUSH
// begin p := 0 ;
29636: LD_ADDR_VAR 0 1
29640: PUSH
29641: LD_INT 0
29643: ST_TO_ADDR
// repeat game_speed := 1 ;
29644: LD_ADDR_OWVAR 65
29648: PUSH
29649: LD_INT 1
29651: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29652: LD_INT 35
29654: PPUSH
29655: CALL_OW 67
// p := p + 1 ;
29659: LD_ADDR_VAR 0 1
29663: PUSH
29664: LD_VAR 0 1
29668: PUSH
29669: LD_INT 1
29671: PLUS
29672: ST_TO_ADDR
// until p >= 60 ;
29673: LD_VAR 0 1
29677: PUSH
29678: LD_INT 60
29680: GREATEREQUAL
29681: IFFALSE 29644
// game_speed := 4 ;
29683: LD_ADDR_OWVAR 65
29687: PUSH
29688: LD_INT 4
29690: ST_TO_ADDR
// end ;
29691: PPOPN 1
29693: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29694: LD_EXP 51
29698: PUSH
29699: LD_EXP 78
29703: AND
29704: IFFALSE 29850
29706: GO 29708
29708: DISABLE
29709: LD_INT 0
29711: PPUSH
29712: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29713: LD_ADDR_VAR 0 1
29717: PUSH
29718: LD_INT 22
29720: PUSH
29721: LD_OWVAR 2
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 2
29732: PUSH
29733: LD_INT 30
29735: PUSH
29736: LD_INT 0
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 30
29745: PUSH
29746: LD_INT 1
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: LIST
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PPUSH
29762: CALL_OW 69
29766: ST_TO_ADDR
// if not depot then
29767: LD_VAR 0 1
29771: NOT
29772: IFFALSE 29776
// exit ;
29774: GO 29850
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29776: LD_ADDR_VAR 0 2
29780: PUSH
29781: LD_VAR 0 1
29785: PUSH
29786: LD_INT 1
29788: PPUSH
29789: LD_VAR 0 1
29793: PPUSH
29794: CALL_OW 12
29798: ARRAY
29799: PPUSH
29800: CALL_OW 274
29804: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29805: LD_VAR 0 2
29809: PPUSH
29810: LD_INT 1
29812: PPUSH
29813: LD_INT 0
29815: PPUSH
29816: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29820: LD_VAR 0 2
29824: PPUSH
29825: LD_INT 2
29827: PPUSH
29828: LD_INT 0
29830: PPUSH
29831: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29835: LD_VAR 0 2
29839: PPUSH
29840: LD_INT 3
29842: PPUSH
29843: LD_INT 0
29845: PPUSH
29846: CALL_OW 277
// end ;
29850: PPOPN 2
29852: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29853: LD_EXP 51
29857: PUSH
29858: LD_EXP 79
29862: AND
29863: IFFALSE 29960
29865: GO 29867
29867: DISABLE
29868: LD_INT 0
29870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29871: LD_ADDR_VAR 0 1
29875: PUSH
29876: LD_INT 22
29878: PUSH
29879: LD_OWVAR 2
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 21
29890: PUSH
29891: LD_INT 1
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 3
29900: PUSH
29901: LD_INT 23
29903: PUSH
29904: LD_INT 0
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: LIST
29919: PPUSH
29920: CALL_OW 69
29924: ST_TO_ADDR
// if not tmp then
29925: LD_VAR 0 1
29929: NOT
29930: IFFALSE 29934
// exit ;
29932: GO 29960
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29934: LD_VAR 0 1
29938: PUSH
29939: LD_INT 1
29941: PPUSH
29942: LD_VAR 0 1
29946: PPUSH
29947: CALL_OW 12
29951: ARRAY
29952: PPUSH
29953: LD_INT 200
29955: PPUSH
29956: CALL_OW 234
// end ;
29960: PPOPN 1
29962: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29963: LD_EXP 51
29967: PUSH
29968: LD_EXP 80
29972: AND
29973: IFFALSE 30052
29975: GO 29977
29977: DISABLE
29978: LD_INT 0
29980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29981: LD_ADDR_VAR 0 1
29985: PUSH
29986: LD_INT 22
29988: PUSH
29989: LD_OWVAR 2
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 21
30000: PUSH
30001: LD_INT 2
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PPUSH
30012: CALL_OW 69
30016: ST_TO_ADDR
// if not tmp then
30017: LD_VAR 0 1
30021: NOT
30022: IFFALSE 30026
// exit ;
30024: GO 30052
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30026: LD_VAR 0 1
30030: PUSH
30031: LD_INT 1
30033: PPUSH
30034: LD_VAR 0 1
30038: PPUSH
30039: CALL_OW 12
30043: ARRAY
30044: PPUSH
30045: LD_INT 60
30047: PPUSH
30048: CALL_OW 234
// end ;
30052: PPOPN 1
30054: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30055: LD_EXP 51
30059: PUSH
30060: LD_EXP 81
30064: AND
30065: IFFALSE 30164
30067: GO 30069
30069: DISABLE
30070: LD_INT 0
30072: PPUSH
30073: PPUSH
// begin enable ;
30074: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30075: LD_ADDR_VAR 0 1
30079: PUSH
30080: LD_INT 22
30082: PUSH
30083: LD_OWVAR 2
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 61
30094: PUSH
30095: EMPTY
30096: LIST
30097: PUSH
30098: LD_INT 33
30100: PUSH
30101: LD_INT 2
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: LIST
30112: PPUSH
30113: CALL_OW 69
30117: ST_TO_ADDR
// if not tmp then
30118: LD_VAR 0 1
30122: NOT
30123: IFFALSE 30127
// exit ;
30125: GO 30164
// for i in tmp do
30127: LD_ADDR_VAR 0 2
30131: PUSH
30132: LD_VAR 0 1
30136: PUSH
30137: FOR_IN
30138: IFFALSE 30162
// if IsControledBy ( i ) then
30140: LD_VAR 0 2
30144: PPUSH
30145: CALL_OW 312
30149: IFFALSE 30160
// ComUnlink ( i ) ;
30151: LD_VAR 0 2
30155: PPUSH
30156: CALL_OW 136
30160: GO 30137
30162: POP
30163: POP
// end ;
30164: PPOPN 2
30166: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30167: LD_EXP 51
30171: PUSH
30172: LD_EXP 82
30176: AND
30177: IFFALSE 30317
30179: GO 30181
30181: DISABLE
30182: LD_INT 0
30184: PPUSH
30185: PPUSH
// begin ToLua ( displayPowell(); ) ;
30186: LD_STRING displayPowell();
30188: PPUSH
30189: CALL_OW 559
// uc_side := 0 ;
30193: LD_ADDR_OWVAR 20
30197: PUSH
30198: LD_INT 0
30200: ST_TO_ADDR
// uc_nation := 2 ;
30201: LD_ADDR_OWVAR 21
30205: PUSH
30206: LD_INT 2
30208: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30209: LD_ADDR_OWVAR 37
30213: PUSH
30214: LD_INT 14
30216: ST_TO_ADDR
// vc_engine := engine_siberite ;
30217: LD_ADDR_OWVAR 39
30221: PUSH
30222: LD_INT 3
30224: ST_TO_ADDR
// vc_control := control_apeman ;
30225: LD_ADDR_OWVAR 38
30229: PUSH
30230: LD_INT 5
30232: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30233: LD_ADDR_OWVAR 40
30237: PUSH
30238: LD_INT 29
30240: ST_TO_ADDR
// un := CreateVehicle ;
30241: LD_ADDR_VAR 0 2
30245: PUSH
30246: CALL_OW 45
30250: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30251: LD_VAR 0 2
30255: PPUSH
30256: LD_INT 1
30258: PPUSH
30259: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30263: LD_INT 35
30265: PPUSH
30266: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30270: LD_VAR 0 2
30274: PPUSH
30275: LD_INT 22
30277: PUSH
30278: LD_OWVAR 2
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PPUSH
30287: CALL_OW 69
30291: PPUSH
30292: LD_VAR 0 2
30296: PPUSH
30297: CALL_OW 74
30301: PPUSH
30302: CALL_OW 115
// until IsDead ( un ) ;
30306: LD_VAR 0 2
30310: PPUSH
30311: CALL_OW 301
30315: IFFALSE 30263
// end ;
30317: PPOPN 2
30319: END
// every 0 0$1 trigger StreamModeActive and sStu do
30320: LD_EXP 51
30324: PUSH
30325: LD_EXP 90
30329: AND
30330: IFFALSE 30346
30332: GO 30334
30334: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30335: LD_STRING displayStucuk();
30337: PPUSH
30338: CALL_OW 559
// ResetFog ;
30342: CALL_OW 335
// end ;
30346: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30347: LD_EXP 51
30351: PUSH
30352: LD_EXP 83
30356: AND
30357: IFFALSE 30498
30359: GO 30361
30361: DISABLE
30362: LD_INT 0
30364: PPUSH
30365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30366: LD_ADDR_VAR 0 2
30370: PUSH
30371: LD_INT 22
30373: PUSH
30374: LD_OWVAR 2
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 21
30385: PUSH
30386: LD_INT 1
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PPUSH
30397: CALL_OW 69
30401: ST_TO_ADDR
// if not tmp then
30402: LD_VAR 0 2
30406: NOT
30407: IFFALSE 30411
// exit ;
30409: GO 30498
// un := tmp [ rand ( 1 , tmp ) ] ;
30411: LD_ADDR_VAR 0 1
30415: PUSH
30416: LD_VAR 0 2
30420: PUSH
30421: LD_INT 1
30423: PPUSH
30424: LD_VAR 0 2
30428: PPUSH
30429: CALL_OW 12
30433: ARRAY
30434: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30435: LD_VAR 0 1
30439: PPUSH
30440: LD_INT 0
30442: PPUSH
30443: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30447: LD_VAR 0 1
30451: PPUSH
30452: LD_OWVAR 3
30456: PUSH
30457: LD_VAR 0 1
30461: DIFF
30462: PPUSH
30463: LD_VAR 0 1
30467: PPUSH
30468: CALL_OW 74
30472: PPUSH
30473: CALL_OW 115
// wait ( 0 0$20 ) ;
30477: LD_INT 700
30479: PPUSH
30480: CALL_OW 67
// SetSide ( un , your_side ) ;
30484: LD_VAR 0 1
30488: PPUSH
30489: LD_OWVAR 2
30493: PPUSH
30494: CALL_OW 235
// end ;
30498: PPOPN 2
30500: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30501: LD_EXP 51
30505: PUSH
30506: LD_EXP 84
30510: AND
30511: IFFALSE 30617
30513: GO 30515
30515: DISABLE
30516: LD_INT 0
30518: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30519: LD_ADDR_VAR 0 1
30523: PUSH
30524: LD_INT 22
30526: PUSH
30527: LD_OWVAR 2
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 2
30538: PUSH
30539: LD_INT 30
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 30
30551: PUSH
30552: LD_INT 1
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: LIST
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PPUSH
30568: CALL_OW 69
30572: ST_TO_ADDR
// if not depot then
30573: LD_VAR 0 1
30577: NOT
30578: IFFALSE 30582
// exit ;
30580: GO 30617
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30582: LD_VAR 0 1
30586: PUSH
30587: LD_INT 1
30589: ARRAY
30590: PPUSH
30591: CALL_OW 250
30595: PPUSH
30596: LD_VAR 0 1
30600: PUSH
30601: LD_INT 1
30603: ARRAY
30604: PPUSH
30605: CALL_OW 251
30609: PPUSH
30610: LD_INT 70
30612: PPUSH
30613: CALL_OW 495
// end ;
30617: PPOPN 1
30619: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30620: LD_EXP 51
30624: PUSH
30625: LD_EXP 85
30629: AND
30630: IFFALSE 30841
30632: GO 30634
30634: DISABLE
30635: LD_INT 0
30637: PPUSH
30638: PPUSH
30639: PPUSH
30640: PPUSH
30641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30642: LD_ADDR_VAR 0 5
30646: PUSH
30647: LD_INT 22
30649: PUSH
30650: LD_OWVAR 2
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 21
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PPUSH
30673: CALL_OW 69
30677: ST_TO_ADDR
// if not tmp then
30678: LD_VAR 0 5
30682: NOT
30683: IFFALSE 30687
// exit ;
30685: GO 30841
// for i in tmp do
30687: LD_ADDR_VAR 0 1
30691: PUSH
30692: LD_VAR 0 5
30696: PUSH
30697: FOR_IN
30698: IFFALSE 30839
// begin d := rand ( 0 , 5 ) ;
30700: LD_ADDR_VAR 0 4
30704: PUSH
30705: LD_INT 0
30707: PPUSH
30708: LD_INT 5
30710: PPUSH
30711: CALL_OW 12
30715: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30716: LD_ADDR_VAR 0 2
30720: PUSH
30721: LD_VAR 0 1
30725: PPUSH
30726: CALL_OW 250
30730: PPUSH
30731: LD_VAR 0 4
30735: PPUSH
30736: LD_INT 3
30738: PPUSH
30739: LD_INT 12
30741: PPUSH
30742: CALL_OW 12
30746: PPUSH
30747: CALL_OW 272
30751: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30752: LD_ADDR_VAR 0 3
30756: PUSH
30757: LD_VAR 0 1
30761: PPUSH
30762: CALL_OW 251
30766: PPUSH
30767: LD_VAR 0 4
30771: PPUSH
30772: LD_INT 3
30774: PPUSH
30775: LD_INT 12
30777: PPUSH
30778: CALL_OW 12
30782: PPUSH
30783: CALL_OW 273
30787: ST_TO_ADDR
// if ValidHex ( x , y ) then
30788: LD_VAR 0 2
30792: PPUSH
30793: LD_VAR 0 3
30797: PPUSH
30798: CALL_OW 488
30802: IFFALSE 30837
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30804: LD_VAR 0 1
30808: PPUSH
30809: LD_VAR 0 2
30813: PPUSH
30814: LD_VAR 0 3
30818: PPUSH
30819: LD_INT 3
30821: PPUSH
30822: LD_INT 6
30824: PPUSH
30825: CALL_OW 12
30829: PPUSH
30830: LD_INT 1
30832: PPUSH
30833: CALL_OW 483
// end ;
30837: GO 30697
30839: POP
30840: POP
// end ;
30841: PPOPN 5
30843: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30844: LD_EXP 51
30848: PUSH
30849: LD_EXP 86
30853: AND
30854: IFFALSE 30948
30856: GO 30858
30858: DISABLE
30859: LD_INT 0
30861: PPUSH
30862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30863: LD_ADDR_VAR 0 2
30867: PUSH
30868: LD_INT 22
30870: PUSH
30871: LD_OWVAR 2
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 32
30882: PUSH
30883: LD_INT 1
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 21
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: PPUSH
30905: CALL_OW 69
30909: ST_TO_ADDR
// if not tmp then
30910: LD_VAR 0 2
30914: NOT
30915: IFFALSE 30919
// exit ;
30917: GO 30948
// for i in tmp do
30919: LD_ADDR_VAR 0 1
30923: PUSH
30924: LD_VAR 0 2
30928: PUSH
30929: FOR_IN
30930: IFFALSE 30946
// SetFuel ( i , 0 ) ;
30932: LD_VAR 0 1
30936: PPUSH
30937: LD_INT 0
30939: PPUSH
30940: CALL_OW 240
30944: GO 30929
30946: POP
30947: POP
// end ;
30948: PPOPN 2
30950: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30951: LD_EXP 51
30955: PUSH
30956: LD_EXP 87
30960: AND
30961: IFFALSE 31027
30963: GO 30965
30965: DISABLE
30966: LD_INT 0
30968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30969: LD_ADDR_VAR 0 1
30973: PUSH
30974: LD_INT 22
30976: PUSH
30977: LD_OWVAR 2
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 30
30988: PUSH
30989: LD_INT 29
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PPUSH
31000: CALL_OW 69
31004: ST_TO_ADDR
// if not tmp then
31005: LD_VAR 0 1
31009: NOT
31010: IFFALSE 31014
// exit ;
31012: GO 31027
// DestroyUnit ( tmp [ 1 ] ) ;
31014: LD_VAR 0 1
31018: PUSH
31019: LD_INT 1
31021: ARRAY
31022: PPUSH
31023: CALL_OW 65
// end ;
31027: PPOPN 1
31029: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31030: LD_EXP 51
31034: PUSH
31035: LD_EXP 89
31039: AND
31040: IFFALSE 31169
31042: GO 31044
31044: DISABLE
31045: LD_INT 0
31047: PPUSH
// begin uc_side := 0 ;
31048: LD_ADDR_OWVAR 20
31052: PUSH
31053: LD_INT 0
31055: ST_TO_ADDR
// uc_nation := nation_arabian ;
31056: LD_ADDR_OWVAR 21
31060: PUSH
31061: LD_INT 2
31063: ST_TO_ADDR
// hc_gallery :=  ;
31064: LD_ADDR_OWVAR 33
31068: PUSH
31069: LD_STRING 
31071: ST_TO_ADDR
// hc_name :=  ;
31072: LD_ADDR_OWVAR 26
31076: PUSH
31077: LD_STRING 
31079: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31080: LD_INT 1
31082: PPUSH
31083: LD_INT 11
31085: PPUSH
31086: LD_INT 10
31088: PPUSH
31089: CALL_OW 380
// un := CreateHuman ;
31093: LD_ADDR_VAR 0 1
31097: PUSH
31098: CALL_OW 44
31102: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31103: LD_VAR 0 1
31107: PPUSH
31108: LD_INT 1
31110: PPUSH
31111: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31115: LD_INT 35
31117: PPUSH
31118: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31122: LD_VAR 0 1
31126: PPUSH
31127: LD_INT 22
31129: PUSH
31130: LD_OWVAR 2
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PPUSH
31139: CALL_OW 69
31143: PPUSH
31144: LD_VAR 0 1
31148: PPUSH
31149: CALL_OW 74
31153: PPUSH
31154: CALL_OW 115
// until IsDead ( un ) ;
31158: LD_VAR 0 1
31162: PPUSH
31163: CALL_OW 301
31167: IFFALSE 31115
// end ;
31169: PPOPN 1
31171: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31172: LD_EXP 51
31176: PUSH
31177: LD_EXP 91
31181: AND
31182: IFFALSE 31194
31184: GO 31186
31186: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31187: LD_STRING earthquake(getX(game), 0, 32)
31189: PPUSH
31190: CALL_OW 559
31194: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31195: LD_EXP 51
31199: PUSH
31200: LD_EXP 92
31204: AND
31205: IFFALSE 31296
31207: GO 31209
31209: DISABLE
31210: LD_INT 0
31212: PPUSH
// begin enable ;
31213: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31214: LD_ADDR_VAR 0 1
31218: PUSH
31219: LD_INT 22
31221: PUSH
31222: LD_OWVAR 2
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 21
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 33
31243: PUSH
31244: LD_INT 3
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: LIST
31255: PPUSH
31256: CALL_OW 69
31260: ST_TO_ADDR
// if not tmp then
31261: LD_VAR 0 1
31265: NOT
31266: IFFALSE 31270
// exit ;
31268: GO 31296
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31270: LD_VAR 0 1
31274: PUSH
31275: LD_INT 1
31277: PPUSH
31278: LD_VAR 0 1
31282: PPUSH
31283: CALL_OW 12
31287: ARRAY
31288: PPUSH
31289: LD_INT 1
31291: PPUSH
31292: CALL_OW 234
// end ;
31296: PPOPN 1
31298: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31299: LD_EXP 51
31303: PUSH
31304: LD_EXP 93
31308: AND
31309: IFFALSE 31450
31311: GO 31313
31313: DISABLE
31314: LD_INT 0
31316: PPUSH
31317: PPUSH
31318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31319: LD_ADDR_VAR 0 3
31323: PUSH
31324: LD_INT 22
31326: PUSH
31327: LD_OWVAR 2
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 25
31338: PUSH
31339: LD_INT 1
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PPUSH
31350: CALL_OW 69
31354: ST_TO_ADDR
// if not tmp then
31355: LD_VAR 0 3
31359: NOT
31360: IFFALSE 31364
// exit ;
31362: GO 31450
// un := tmp [ rand ( 1 , tmp ) ] ;
31364: LD_ADDR_VAR 0 2
31368: PUSH
31369: LD_VAR 0 3
31373: PUSH
31374: LD_INT 1
31376: PPUSH
31377: LD_VAR 0 3
31381: PPUSH
31382: CALL_OW 12
31386: ARRAY
31387: ST_TO_ADDR
// if Crawls ( un ) then
31388: LD_VAR 0 2
31392: PPUSH
31393: CALL_OW 318
31397: IFFALSE 31408
// ComWalk ( un ) ;
31399: LD_VAR 0 2
31403: PPUSH
31404: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31408: LD_VAR 0 2
31412: PPUSH
31413: LD_INT 9
31415: PPUSH
31416: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31420: LD_INT 28
31422: PPUSH
31423: LD_OWVAR 2
31427: PPUSH
31428: LD_INT 2
31430: PPUSH
31431: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31435: LD_INT 29
31437: PPUSH
31438: LD_OWVAR 2
31442: PPUSH
31443: LD_INT 2
31445: PPUSH
31446: CALL_OW 322
// end ;
31450: PPOPN 3
31452: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31453: LD_EXP 51
31457: PUSH
31458: LD_EXP 94
31462: AND
31463: IFFALSE 31574
31465: GO 31467
31467: DISABLE
31468: LD_INT 0
31470: PPUSH
31471: PPUSH
31472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31473: LD_ADDR_VAR 0 3
31477: PUSH
31478: LD_INT 22
31480: PUSH
31481: LD_OWVAR 2
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 25
31492: PUSH
31493: LD_INT 1
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PPUSH
31504: CALL_OW 69
31508: ST_TO_ADDR
// if not tmp then
31509: LD_VAR 0 3
31513: NOT
31514: IFFALSE 31518
// exit ;
31516: GO 31574
// un := tmp [ rand ( 1 , tmp ) ] ;
31518: LD_ADDR_VAR 0 2
31522: PUSH
31523: LD_VAR 0 3
31527: PUSH
31528: LD_INT 1
31530: PPUSH
31531: LD_VAR 0 3
31535: PPUSH
31536: CALL_OW 12
31540: ARRAY
31541: ST_TO_ADDR
// if Crawls ( un ) then
31542: LD_VAR 0 2
31546: PPUSH
31547: CALL_OW 318
31551: IFFALSE 31562
// ComWalk ( un ) ;
31553: LD_VAR 0 2
31557: PPUSH
31558: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31562: LD_VAR 0 2
31566: PPUSH
31567: LD_INT 8
31569: PPUSH
31570: CALL_OW 336
// end ;
31574: PPOPN 3
31576: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31577: LD_EXP 51
31581: PUSH
31582: LD_EXP 95
31586: AND
31587: IFFALSE 31731
31589: GO 31591
31591: DISABLE
31592: LD_INT 0
31594: PPUSH
31595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31596: LD_ADDR_VAR 0 2
31600: PUSH
31601: LD_INT 22
31603: PUSH
31604: LD_OWVAR 2
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 21
31615: PUSH
31616: LD_INT 2
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 2
31625: PUSH
31626: LD_INT 34
31628: PUSH
31629: LD_INT 12
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 34
31638: PUSH
31639: LD_INT 51
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 34
31648: PUSH
31649: LD_INT 32
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: LIST
31666: PPUSH
31667: CALL_OW 69
31671: ST_TO_ADDR
// if not tmp then
31672: LD_VAR 0 2
31676: NOT
31677: IFFALSE 31681
// exit ;
31679: GO 31731
// for i in tmp do
31681: LD_ADDR_VAR 0 1
31685: PUSH
31686: LD_VAR 0 2
31690: PUSH
31691: FOR_IN
31692: IFFALSE 31729
// if GetCargo ( i , mat_artifact ) = 0 then
31694: LD_VAR 0 1
31698: PPUSH
31699: LD_INT 4
31701: PPUSH
31702: CALL_OW 289
31706: PUSH
31707: LD_INT 0
31709: EQUAL
31710: IFFALSE 31727
// SetCargo ( i , mat_siberit , 100 ) ;
31712: LD_VAR 0 1
31716: PPUSH
31717: LD_INT 3
31719: PPUSH
31720: LD_INT 100
31722: PPUSH
31723: CALL_OW 290
31727: GO 31691
31729: POP
31730: POP
// end ;
31731: PPOPN 2
31733: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31734: LD_EXP 51
31738: PUSH
31739: LD_EXP 96
31743: AND
31744: IFFALSE 31927
31746: GO 31748
31748: DISABLE
31749: LD_INT 0
31751: PPUSH
31752: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31753: LD_ADDR_VAR 0 2
31757: PUSH
31758: LD_INT 22
31760: PUSH
31761: LD_OWVAR 2
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PPUSH
31770: CALL_OW 69
31774: ST_TO_ADDR
// if not tmp then
31775: LD_VAR 0 2
31779: NOT
31780: IFFALSE 31784
// exit ;
31782: GO 31927
// for i := 1 to 2 do
31784: LD_ADDR_VAR 0 1
31788: PUSH
31789: DOUBLE
31790: LD_INT 1
31792: DEC
31793: ST_TO_ADDR
31794: LD_INT 2
31796: PUSH
31797: FOR_TO
31798: IFFALSE 31925
// begin uc_side := your_side ;
31800: LD_ADDR_OWVAR 20
31804: PUSH
31805: LD_OWVAR 2
31809: ST_TO_ADDR
// uc_nation := nation_american ;
31810: LD_ADDR_OWVAR 21
31814: PUSH
31815: LD_INT 1
31817: ST_TO_ADDR
// vc_chassis := us_morphling ;
31818: LD_ADDR_OWVAR 37
31822: PUSH
31823: LD_INT 5
31825: ST_TO_ADDR
// vc_engine := engine_siberite ;
31826: LD_ADDR_OWVAR 39
31830: PUSH
31831: LD_INT 3
31833: ST_TO_ADDR
// vc_control := control_computer ;
31834: LD_ADDR_OWVAR 38
31838: PUSH
31839: LD_INT 3
31841: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31842: LD_ADDR_OWVAR 40
31846: PUSH
31847: LD_INT 10
31849: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31850: LD_VAR 0 2
31854: PUSH
31855: LD_INT 1
31857: ARRAY
31858: PPUSH
31859: CALL_OW 310
31863: NOT
31864: IFFALSE 31911
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31866: CALL_OW 45
31870: PPUSH
31871: LD_VAR 0 2
31875: PUSH
31876: LD_INT 1
31878: ARRAY
31879: PPUSH
31880: CALL_OW 250
31884: PPUSH
31885: LD_VAR 0 2
31889: PUSH
31890: LD_INT 1
31892: ARRAY
31893: PPUSH
31894: CALL_OW 251
31898: PPUSH
31899: LD_INT 12
31901: PPUSH
31902: LD_INT 1
31904: PPUSH
31905: CALL_OW 50
31909: GO 31923
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31911: CALL_OW 45
31915: PPUSH
31916: LD_INT 1
31918: PPUSH
31919: CALL_OW 51
// end ;
31923: GO 31797
31925: POP
31926: POP
// end ;
31927: PPOPN 2
31929: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31930: LD_EXP 51
31934: PUSH
31935: LD_EXP 97
31939: AND
31940: IFFALSE 32162
31942: GO 31944
31944: DISABLE
31945: LD_INT 0
31947: PPUSH
31948: PPUSH
31949: PPUSH
31950: PPUSH
31951: PPUSH
31952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31953: LD_ADDR_VAR 0 6
31957: PUSH
31958: LD_INT 22
31960: PUSH
31961: LD_OWVAR 2
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 21
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 3
31982: PUSH
31983: LD_INT 23
31985: PUSH
31986: LD_INT 0
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: LIST
32001: PPUSH
32002: CALL_OW 69
32006: ST_TO_ADDR
// if not tmp then
32007: LD_VAR 0 6
32011: NOT
32012: IFFALSE 32016
// exit ;
32014: GO 32162
// s1 := rand ( 1 , 4 ) ;
32016: LD_ADDR_VAR 0 2
32020: PUSH
32021: LD_INT 1
32023: PPUSH
32024: LD_INT 4
32026: PPUSH
32027: CALL_OW 12
32031: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32032: LD_ADDR_VAR 0 4
32036: PUSH
32037: LD_VAR 0 6
32041: PUSH
32042: LD_INT 1
32044: ARRAY
32045: PPUSH
32046: LD_VAR 0 2
32050: PPUSH
32051: CALL_OW 259
32055: ST_TO_ADDR
// if s1 = 1 then
32056: LD_VAR 0 2
32060: PUSH
32061: LD_INT 1
32063: EQUAL
32064: IFFALSE 32084
// s2 := rand ( 2 , 4 ) else
32066: LD_ADDR_VAR 0 3
32070: PUSH
32071: LD_INT 2
32073: PPUSH
32074: LD_INT 4
32076: PPUSH
32077: CALL_OW 12
32081: ST_TO_ADDR
32082: GO 32092
// s2 := 1 ;
32084: LD_ADDR_VAR 0 3
32088: PUSH
32089: LD_INT 1
32091: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32092: LD_ADDR_VAR 0 5
32096: PUSH
32097: LD_VAR 0 6
32101: PUSH
32102: LD_INT 1
32104: ARRAY
32105: PPUSH
32106: LD_VAR 0 3
32110: PPUSH
32111: CALL_OW 259
32115: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32116: LD_VAR 0 6
32120: PUSH
32121: LD_INT 1
32123: ARRAY
32124: PPUSH
32125: LD_VAR 0 2
32129: PPUSH
32130: LD_VAR 0 5
32134: PPUSH
32135: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32139: LD_VAR 0 6
32143: PUSH
32144: LD_INT 1
32146: ARRAY
32147: PPUSH
32148: LD_VAR 0 3
32152: PPUSH
32153: LD_VAR 0 4
32157: PPUSH
32158: CALL_OW 237
// end ;
32162: PPOPN 6
32164: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32165: LD_EXP 51
32169: PUSH
32170: LD_EXP 98
32174: AND
32175: IFFALSE 32254
32177: GO 32179
32179: DISABLE
32180: LD_INT 0
32182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32183: LD_ADDR_VAR 0 1
32187: PUSH
32188: LD_INT 22
32190: PUSH
32191: LD_OWVAR 2
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 30
32202: PUSH
32203: LD_INT 3
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PPUSH
32214: CALL_OW 69
32218: ST_TO_ADDR
// if not tmp then
32219: LD_VAR 0 1
32223: NOT
32224: IFFALSE 32228
// exit ;
32226: GO 32254
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32228: LD_VAR 0 1
32232: PUSH
32233: LD_INT 1
32235: PPUSH
32236: LD_VAR 0 1
32240: PPUSH
32241: CALL_OW 12
32245: ARRAY
32246: PPUSH
32247: LD_INT 1
32249: PPUSH
32250: CALL_OW 234
// end ;
32254: PPOPN 1
32256: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32257: LD_EXP 51
32261: PUSH
32262: LD_EXP 99
32266: AND
32267: IFFALSE 32379
32269: GO 32271
32271: DISABLE
32272: LD_INT 0
32274: PPUSH
32275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32276: LD_ADDR_VAR 0 2
32280: PUSH
32281: LD_INT 22
32283: PUSH
32284: LD_OWVAR 2
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 2
32295: PUSH
32296: LD_INT 30
32298: PUSH
32299: LD_INT 27
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 30
32308: PUSH
32309: LD_INT 26
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 30
32318: PUSH
32319: LD_INT 28
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PPUSH
32336: CALL_OW 69
32340: ST_TO_ADDR
// if not tmp then
32341: LD_VAR 0 2
32345: NOT
32346: IFFALSE 32350
// exit ;
32348: GO 32379
// for i in tmp do
32350: LD_ADDR_VAR 0 1
32354: PUSH
32355: LD_VAR 0 2
32359: PUSH
32360: FOR_IN
32361: IFFALSE 32377
// SetLives ( i , 1 ) ;
32363: LD_VAR 0 1
32367: PPUSH
32368: LD_INT 1
32370: PPUSH
32371: CALL_OW 234
32375: GO 32360
32377: POP
32378: POP
// end ;
32379: PPOPN 2
32381: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32382: LD_EXP 51
32386: PUSH
32387: LD_EXP 100
32391: AND
32392: IFFALSE 32679
32394: GO 32396
32396: DISABLE
32397: LD_INT 0
32399: PPUSH
32400: PPUSH
32401: PPUSH
// begin i := rand ( 1 , 7 ) ;
32402: LD_ADDR_VAR 0 1
32406: PUSH
32407: LD_INT 1
32409: PPUSH
32410: LD_INT 7
32412: PPUSH
32413: CALL_OW 12
32417: ST_TO_ADDR
// case i of 1 :
32418: LD_VAR 0 1
32422: PUSH
32423: LD_INT 1
32425: DOUBLE
32426: EQUAL
32427: IFTRUE 32431
32429: GO 32441
32431: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32432: LD_STRING earthquake(getX(game), 0, 32)
32434: PPUSH
32435: CALL_OW 559
32439: GO 32679
32441: LD_INT 2
32443: DOUBLE
32444: EQUAL
32445: IFTRUE 32449
32447: GO 32463
32449: POP
// begin ToLua ( displayStucuk(); ) ;
32450: LD_STRING displayStucuk();
32452: PPUSH
32453: CALL_OW 559
// ResetFog ;
32457: CALL_OW 335
// end ; 3 :
32461: GO 32679
32463: LD_INT 3
32465: DOUBLE
32466: EQUAL
32467: IFTRUE 32471
32469: GO 32575
32471: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32472: LD_ADDR_VAR 0 2
32476: PUSH
32477: LD_INT 22
32479: PUSH
32480: LD_OWVAR 2
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 25
32491: PUSH
32492: LD_INT 1
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PPUSH
32503: CALL_OW 69
32507: ST_TO_ADDR
// if not tmp then
32508: LD_VAR 0 2
32512: NOT
32513: IFFALSE 32517
// exit ;
32515: GO 32679
// un := tmp [ rand ( 1 , tmp ) ] ;
32517: LD_ADDR_VAR 0 3
32521: PUSH
32522: LD_VAR 0 2
32526: PUSH
32527: LD_INT 1
32529: PPUSH
32530: LD_VAR 0 2
32534: PPUSH
32535: CALL_OW 12
32539: ARRAY
32540: ST_TO_ADDR
// if Crawls ( un ) then
32541: LD_VAR 0 3
32545: PPUSH
32546: CALL_OW 318
32550: IFFALSE 32561
// ComWalk ( un ) ;
32552: LD_VAR 0 3
32556: PPUSH
32557: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32561: LD_VAR 0 3
32565: PPUSH
32566: LD_INT 8
32568: PPUSH
32569: CALL_OW 336
// end ; 4 :
32573: GO 32679
32575: LD_INT 4
32577: DOUBLE
32578: EQUAL
32579: IFTRUE 32583
32581: GO 32657
32583: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32584: LD_ADDR_VAR 0 2
32588: PUSH
32589: LD_INT 22
32591: PUSH
32592: LD_OWVAR 2
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 30
32603: PUSH
32604: LD_INT 29
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PPUSH
32615: CALL_OW 69
32619: ST_TO_ADDR
// if not tmp then
32620: LD_VAR 0 2
32624: NOT
32625: IFFALSE 32629
// exit ;
32627: GO 32679
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32629: LD_VAR 0 2
32633: PUSH
32634: LD_INT 1
32636: ARRAY
32637: PPUSH
32638: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32642: LD_VAR 0 2
32646: PUSH
32647: LD_INT 1
32649: ARRAY
32650: PPUSH
32651: CALL_OW 65
// end ; 5 .. 7 :
32655: GO 32679
32657: LD_INT 5
32659: DOUBLE
32660: GREATEREQUAL
32661: IFFALSE 32669
32663: LD_INT 7
32665: DOUBLE
32666: LESSEQUAL
32667: IFTRUE 32671
32669: GO 32678
32671: POP
// StreamSibBomb ; end ;
32672: CALL 28916 0 0
32676: GO 32679
32678: POP
// end ;
32679: PPOPN 3
32681: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32682: LD_EXP 51
32686: PUSH
32687: LD_EXP 101
32691: AND
32692: IFFALSE 32848
32694: GO 32696
32696: DISABLE
32697: LD_INT 0
32699: PPUSH
32700: PPUSH
32701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32702: LD_ADDR_VAR 0 2
32706: PUSH
32707: LD_INT 81
32709: PUSH
32710: LD_OWVAR 2
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: LD_INT 21
32724: PUSH
32725: LD_INT 1
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 21
32734: PUSH
32735: LD_INT 2
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PPUSH
32751: CALL_OW 69
32755: ST_TO_ADDR
// if not tmp then
32756: LD_VAR 0 2
32760: NOT
32761: IFFALSE 32765
// exit ;
32763: GO 32848
// p := 0 ;
32765: LD_ADDR_VAR 0 3
32769: PUSH
32770: LD_INT 0
32772: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32773: LD_INT 35
32775: PPUSH
32776: CALL_OW 67
// p := p + 1 ;
32780: LD_ADDR_VAR 0 3
32784: PUSH
32785: LD_VAR 0 3
32789: PUSH
32790: LD_INT 1
32792: PLUS
32793: ST_TO_ADDR
// for i in tmp do
32794: LD_ADDR_VAR 0 1
32798: PUSH
32799: LD_VAR 0 2
32803: PUSH
32804: FOR_IN
32805: IFFALSE 32836
// if GetLives ( i ) < 1000 then
32807: LD_VAR 0 1
32811: PPUSH
32812: CALL_OW 256
32816: PUSH
32817: LD_INT 1000
32819: LESS
32820: IFFALSE 32834
// SetLives ( i , 1000 ) ;
32822: LD_VAR 0 1
32826: PPUSH
32827: LD_INT 1000
32829: PPUSH
32830: CALL_OW 234
32834: GO 32804
32836: POP
32837: POP
// until p > 20 ;
32838: LD_VAR 0 3
32842: PUSH
32843: LD_INT 20
32845: GREATER
32846: IFFALSE 32773
// end ;
32848: PPOPN 3
32850: END
// every 0 0$1 trigger StreamModeActive and sTime do
32851: LD_EXP 51
32855: PUSH
32856: LD_EXP 102
32860: AND
32861: IFFALSE 32896
32863: GO 32865
32865: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32866: LD_INT 28
32868: PPUSH
32869: LD_OWVAR 2
32873: PPUSH
32874: LD_INT 2
32876: PPUSH
32877: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32881: LD_INT 30
32883: PPUSH
32884: LD_OWVAR 2
32888: PPUSH
32889: LD_INT 2
32891: PPUSH
32892: CALL_OW 322
// end ;
32896: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32897: LD_EXP 51
32901: PUSH
32902: LD_EXP 103
32906: AND
32907: IFFALSE 33028
32909: GO 32911
32911: DISABLE
32912: LD_INT 0
32914: PPUSH
32915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32916: LD_ADDR_VAR 0 2
32920: PUSH
32921: LD_INT 22
32923: PUSH
32924: LD_OWVAR 2
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 21
32935: PUSH
32936: LD_INT 1
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 3
32945: PUSH
32946: LD_INT 23
32948: PUSH
32949: LD_INT 0
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: LIST
32964: PPUSH
32965: CALL_OW 69
32969: ST_TO_ADDR
// if not tmp then
32970: LD_VAR 0 2
32974: NOT
32975: IFFALSE 32979
// exit ;
32977: GO 33028
// for i in tmp do
32979: LD_ADDR_VAR 0 1
32983: PUSH
32984: LD_VAR 0 2
32988: PUSH
32989: FOR_IN
32990: IFFALSE 33026
// begin if Crawls ( i ) then
32992: LD_VAR 0 1
32996: PPUSH
32997: CALL_OW 318
33001: IFFALSE 33012
// ComWalk ( i ) ;
33003: LD_VAR 0 1
33007: PPUSH
33008: CALL_OW 138
// SetClass ( i , 2 ) ;
33012: LD_VAR 0 1
33016: PPUSH
33017: LD_INT 2
33019: PPUSH
33020: CALL_OW 336
// end ;
33024: GO 32989
33026: POP
33027: POP
// end ;
33028: PPOPN 2
33030: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33031: LD_EXP 51
33035: PUSH
33036: LD_EXP 104
33040: AND
33041: IFFALSE 33329
33043: GO 33045
33045: DISABLE
33046: LD_INT 0
33048: PPUSH
33049: PPUSH
33050: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33051: LD_OWVAR 2
33055: PPUSH
33056: LD_INT 9
33058: PPUSH
33059: LD_INT 1
33061: PPUSH
33062: LD_INT 1
33064: PPUSH
33065: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33069: LD_INT 9
33071: PPUSH
33072: LD_OWVAR 2
33076: PPUSH
33077: CALL_OW 343
// uc_side := 9 ;
33081: LD_ADDR_OWVAR 20
33085: PUSH
33086: LD_INT 9
33088: ST_TO_ADDR
// uc_nation := 2 ;
33089: LD_ADDR_OWVAR 21
33093: PUSH
33094: LD_INT 2
33096: ST_TO_ADDR
// hc_name := Dark Warrior ;
33097: LD_ADDR_OWVAR 26
33101: PUSH
33102: LD_STRING Dark Warrior
33104: ST_TO_ADDR
// hc_gallery :=  ;
33105: LD_ADDR_OWVAR 33
33109: PUSH
33110: LD_STRING 
33112: ST_TO_ADDR
// hc_noskilllimit := true ;
33113: LD_ADDR_OWVAR 76
33117: PUSH
33118: LD_INT 1
33120: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33121: LD_ADDR_OWVAR 31
33125: PUSH
33126: LD_INT 30
33128: PUSH
33129: LD_INT 30
33131: PUSH
33132: LD_INT 30
33134: PUSH
33135: LD_INT 30
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: ST_TO_ADDR
// un := CreateHuman ;
33144: LD_ADDR_VAR 0 3
33148: PUSH
33149: CALL_OW 44
33153: ST_TO_ADDR
// hc_noskilllimit := false ;
33154: LD_ADDR_OWVAR 76
33158: PUSH
33159: LD_INT 0
33161: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33162: LD_VAR 0 3
33166: PPUSH
33167: LD_INT 1
33169: PPUSH
33170: CALL_OW 51
// ToLua ( playRanger() ) ;
33174: LD_STRING playRanger()
33176: PPUSH
33177: CALL_OW 559
// p := 0 ;
33181: LD_ADDR_VAR 0 2
33185: PUSH
33186: LD_INT 0
33188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33189: LD_INT 35
33191: PPUSH
33192: CALL_OW 67
// p := p + 1 ;
33196: LD_ADDR_VAR 0 2
33200: PUSH
33201: LD_VAR 0 2
33205: PUSH
33206: LD_INT 1
33208: PLUS
33209: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33210: LD_VAR 0 3
33214: PPUSH
33215: CALL_OW 256
33219: PUSH
33220: LD_INT 1000
33222: LESS
33223: IFFALSE 33237
// SetLives ( un , 1000 ) ;
33225: LD_VAR 0 3
33229: PPUSH
33230: LD_INT 1000
33232: PPUSH
33233: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33237: LD_VAR 0 3
33241: PPUSH
33242: LD_INT 81
33244: PUSH
33245: LD_OWVAR 2
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 91
33256: PUSH
33257: LD_VAR 0 3
33261: PUSH
33262: LD_INT 30
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: LIST
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PPUSH
33274: CALL_OW 69
33278: PPUSH
33279: LD_VAR 0 3
33283: PPUSH
33284: CALL_OW 74
33288: PPUSH
33289: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33293: LD_VAR 0 2
33297: PUSH
33298: LD_INT 80
33300: GREATER
33301: PUSH
33302: LD_VAR 0 3
33306: PPUSH
33307: CALL_OW 301
33311: OR
33312: IFFALSE 33189
// if un then
33314: LD_VAR 0 3
33318: IFFALSE 33329
// RemoveUnit ( un ) ;
33320: LD_VAR 0 3
33324: PPUSH
33325: CALL_OW 64
// end ;
33329: PPOPN 3
33331: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33332: LD_EXP 105
33336: IFFALSE 33452
33338: GO 33340
33340: DISABLE
33341: LD_INT 0
33343: PPUSH
33344: PPUSH
33345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33346: LD_ADDR_VAR 0 2
33350: PUSH
33351: LD_INT 81
33353: PUSH
33354: LD_OWVAR 2
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 21
33365: PUSH
33366: LD_INT 1
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PPUSH
33377: CALL_OW 69
33381: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33382: LD_STRING playComputer()
33384: PPUSH
33385: CALL_OW 559
// if not tmp then
33389: LD_VAR 0 2
33393: NOT
33394: IFFALSE 33398
// exit ;
33396: GO 33452
// for i in tmp do
33398: LD_ADDR_VAR 0 1
33402: PUSH
33403: LD_VAR 0 2
33407: PUSH
33408: FOR_IN
33409: IFFALSE 33450
// for j := 1 to 4 do
33411: LD_ADDR_VAR 0 3
33415: PUSH
33416: DOUBLE
33417: LD_INT 1
33419: DEC
33420: ST_TO_ADDR
33421: LD_INT 4
33423: PUSH
33424: FOR_TO
33425: IFFALSE 33446
// SetSkill ( i , j , 10 ) ;
33427: LD_VAR 0 1
33431: PPUSH
33432: LD_VAR 0 3
33436: PPUSH
33437: LD_INT 10
33439: PPUSH
33440: CALL_OW 237
33444: GO 33424
33446: POP
33447: POP
33448: GO 33408
33450: POP
33451: POP
// end ;
33452: PPOPN 3
33454: END
// every 0 0$1 trigger s30 do var i , tmp ;
33455: LD_EXP 106
33459: IFFALSE 33528
33461: GO 33463
33463: DISABLE
33464: LD_INT 0
33466: PPUSH
33467: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33468: LD_ADDR_VAR 0 2
33472: PUSH
33473: LD_INT 22
33475: PUSH
33476: LD_OWVAR 2
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PPUSH
33485: CALL_OW 69
33489: ST_TO_ADDR
// if not tmp then
33490: LD_VAR 0 2
33494: NOT
33495: IFFALSE 33499
// exit ;
33497: GO 33528
// for i in tmp do
33499: LD_ADDR_VAR 0 1
33503: PUSH
33504: LD_VAR 0 2
33508: PUSH
33509: FOR_IN
33510: IFFALSE 33526
// SetLives ( i , 300 ) ;
33512: LD_VAR 0 1
33516: PPUSH
33517: LD_INT 300
33519: PPUSH
33520: CALL_OW 234
33524: GO 33509
33526: POP
33527: POP
// end ;
33528: PPOPN 2
33530: END
// every 0 0$1 trigger s60 do var i , tmp ;
33531: LD_EXP 107
33535: IFFALSE 33604
33537: GO 33539
33539: DISABLE
33540: LD_INT 0
33542: PPUSH
33543: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33544: LD_ADDR_VAR 0 2
33548: PUSH
33549: LD_INT 22
33551: PUSH
33552: LD_OWVAR 2
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PPUSH
33561: CALL_OW 69
33565: ST_TO_ADDR
// if not tmp then
33566: LD_VAR 0 2
33570: NOT
33571: IFFALSE 33575
// exit ;
33573: GO 33604
// for i in tmp do
33575: LD_ADDR_VAR 0 1
33579: PUSH
33580: LD_VAR 0 2
33584: PUSH
33585: FOR_IN
33586: IFFALSE 33602
// SetLives ( i , 600 ) ;
33588: LD_VAR 0 1
33592: PPUSH
33593: LD_INT 600
33595: PPUSH
33596: CALL_OW 234
33600: GO 33585
33602: POP
33603: POP
// end ;
33604: PPOPN 2
33606: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33607: LD_INT 0
33609: PPUSH
// case cmd of 301 :
33610: LD_VAR 0 1
33614: PUSH
33615: LD_INT 301
33617: DOUBLE
33618: EQUAL
33619: IFTRUE 33623
33621: GO 33655
33623: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33624: LD_VAR 0 6
33628: PPUSH
33629: LD_VAR 0 7
33633: PPUSH
33634: LD_VAR 0 8
33638: PPUSH
33639: LD_VAR 0 4
33643: PPUSH
33644: LD_VAR 0 5
33648: PPUSH
33649: CALL 34856 0 5
33653: GO 33776
33655: LD_INT 302
33657: DOUBLE
33658: EQUAL
33659: IFTRUE 33663
33661: GO 33700
33663: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33664: LD_VAR 0 6
33668: PPUSH
33669: LD_VAR 0 7
33673: PPUSH
33674: LD_VAR 0 8
33678: PPUSH
33679: LD_VAR 0 9
33683: PPUSH
33684: LD_VAR 0 4
33688: PPUSH
33689: LD_VAR 0 5
33693: PPUSH
33694: CALL 34947 0 6
33698: GO 33776
33700: LD_INT 303
33702: DOUBLE
33703: EQUAL
33704: IFTRUE 33708
33706: GO 33745
33708: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33709: LD_VAR 0 6
33713: PPUSH
33714: LD_VAR 0 7
33718: PPUSH
33719: LD_VAR 0 8
33723: PPUSH
33724: LD_VAR 0 9
33728: PPUSH
33729: LD_VAR 0 4
33733: PPUSH
33734: LD_VAR 0 5
33738: PPUSH
33739: CALL 33781 0 6
33743: GO 33776
33745: LD_INT 304
33747: DOUBLE
33748: EQUAL
33749: IFTRUE 33753
33751: GO 33775
33753: POP
// hHackTeleport ( unit , x , y ) ; end ;
33754: LD_VAR 0 2
33758: PPUSH
33759: LD_VAR 0 4
33763: PPUSH
33764: LD_VAR 0 5
33768: PPUSH
33769: CALL 35540 0 3
33773: GO 33776
33775: POP
// end ;
33776: LD_VAR 0 12
33780: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33781: LD_INT 0
33783: PPUSH
33784: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33785: LD_VAR 0 1
33789: PUSH
33790: LD_INT 1
33792: LESS
33793: PUSH
33794: LD_VAR 0 1
33798: PUSH
33799: LD_INT 3
33801: GREATER
33802: OR
33803: PUSH
33804: LD_VAR 0 5
33808: PPUSH
33809: LD_VAR 0 6
33813: PPUSH
33814: CALL_OW 428
33818: OR
33819: IFFALSE 33823
// exit ;
33821: GO 34543
// uc_side := your_side ;
33823: LD_ADDR_OWVAR 20
33827: PUSH
33828: LD_OWVAR 2
33832: ST_TO_ADDR
// uc_nation := nation ;
33833: LD_ADDR_OWVAR 21
33837: PUSH
33838: LD_VAR 0 1
33842: ST_TO_ADDR
// bc_level = 1 ;
33843: LD_ADDR_OWVAR 43
33847: PUSH
33848: LD_INT 1
33850: ST_TO_ADDR
// case btype of 1 :
33851: LD_VAR 0 2
33855: PUSH
33856: LD_INT 1
33858: DOUBLE
33859: EQUAL
33860: IFTRUE 33864
33862: GO 33875
33864: POP
// bc_type := b_depot ; 2 :
33865: LD_ADDR_OWVAR 42
33869: PUSH
33870: LD_INT 0
33872: ST_TO_ADDR
33873: GO 34487
33875: LD_INT 2
33877: DOUBLE
33878: EQUAL
33879: IFTRUE 33883
33881: GO 33894
33883: POP
// bc_type := b_warehouse ; 3 :
33884: LD_ADDR_OWVAR 42
33888: PUSH
33889: LD_INT 1
33891: ST_TO_ADDR
33892: GO 34487
33894: LD_INT 3
33896: DOUBLE
33897: EQUAL
33898: IFTRUE 33902
33900: GO 33913
33902: POP
// bc_type := b_lab ; 4 .. 9 :
33903: LD_ADDR_OWVAR 42
33907: PUSH
33908: LD_INT 6
33910: ST_TO_ADDR
33911: GO 34487
33913: LD_INT 4
33915: DOUBLE
33916: GREATEREQUAL
33917: IFFALSE 33925
33919: LD_INT 9
33921: DOUBLE
33922: LESSEQUAL
33923: IFTRUE 33927
33925: GO 33979
33927: POP
// begin bc_type := b_lab_half ;
33928: LD_ADDR_OWVAR 42
33932: PUSH
33933: LD_INT 7
33935: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33936: LD_ADDR_OWVAR 44
33940: PUSH
33941: LD_INT 10
33943: PUSH
33944: LD_INT 11
33946: PUSH
33947: LD_INT 12
33949: PUSH
33950: LD_INT 15
33952: PUSH
33953: LD_INT 14
33955: PUSH
33956: LD_INT 13
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: PUSH
33967: LD_VAR 0 2
33971: PUSH
33972: LD_INT 3
33974: MINUS
33975: ARRAY
33976: ST_TO_ADDR
// end ; 10 .. 13 :
33977: GO 34487
33979: LD_INT 10
33981: DOUBLE
33982: GREATEREQUAL
33983: IFFALSE 33991
33985: LD_INT 13
33987: DOUBLE
33988: LESSEQUAL
33989: IFTRUE 33993
33991: GO 34070
33993: POP
// begin bc_type := b_lab_full ;
33994: LD_ADDR_OWVAR 42
33998: PUSH
33999: LD_INT 8
34001: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34002: LD_ADDR_OWVAR 44
34006: PUSH
34007: LD_INT 10
34009: PUSH
34010: LD_INT 12
34012: PUSH
34013: LD_INT 14
34015: PUSH
34016: LD_INT 13
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: PUSH
34025: LD_VAR 0 2
34029: PUSH
34030: LD_INT 9
34032: MINUS
34033: ARRAY
34034: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34035: LD_ADDR_OWVAR 45
34039: PUSH
34040: LD_INT 11
34042: PUSH
34043: LD_INT 15
34045: PUSH
34046: LD_INT 12
34048: PUSH
34049: LD_INT 15
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: PUSH
34058: LD_VAR 0 2
34062: PUSH
34063: LD_INT 9
34065: MINUS
34066: ARRAY
34067: ST_TO_ADDR
// end ; 14 :
34068: GO 34487
34070: LD_INT 14
34072: DOUBLE
34073: EQUAL
34074: IFTRUE 34078
34076: GO 34089
34078: POP
// bc_type := b_workshop ; 15 :
34079: LD_ADDR_OWVAR 42
34083: PUSH
34084: LD_INT 2
34086: ST_TO_ADDR
34087: GO 34487
34089: LD_INT 15
34091: DOUBLE
34092: EQUAL
34093: IFTRUE 34097
34095: GO 34108
34097: POP
// bc_type := b_factory ; 16 :
34098: LD_ADDR_OWVAR 42
34102: PUSH
34103: LD_INT 3
34105: ST_TO_ADDR
34106: GO 34487
34108: LD_INT 16
34110: DOUBLE
34111: EQUAL
34112: IFTRUE 34116
34114: GO 34127
34116: POP
// bc_type := b_ext_gun ; 17 :
34117: LD_ADDR_OWVAR 42
34121: PUSH
34122: LD_INT 17
34124: ST_TO_ADDR
34125: GO 34487
34127: LD_INT 17
34129: DOUBLE
34130: EQUAL
34131: IFTRUE 34135
34133: GO 34163
34135: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34136: LD_ADDR_OWVAR 42
34140: PUSH
34141: LD_INT 19
34143: PUSH
34144: LD_INT 23
34146: PUSH
34147: LD_INT 19
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: LIST
34154: PUSH
34155: LD_VAR 0 1
34159: ARRAY
34160: ST_TO_ADDR
34161: GO 34487
34163: LD_INT 18
34165: DOUBLE
34166: EQUAL
34167: IFTRUE 34171
34169: GO 34182
34171: POP
// bc_type := b_ext_radar ; 19 :
34172: LD_ADDR_OWVAR 42
34176: PUSH
34177: LD_INT 20
34179: ST_TO_ADDR
34180: GO 34487
34182: LD_INT 19
34184: DOUBLE
34185: EQUAL
34186: IFTRUE 34190
34188: GO 34201
34190: POP
// bc_type := b_ext_radio ; 20 :
34191: LD_ADDR_OWVAR 42
34195: PUSH
34196: LD_INT 22
34198: ST_TO_ADDR
34199: GO 34487
34201: LD_INT 20
34203: DOUBLE
34204: EQUAL
34205: IFTRUE 34209
34207: GO 34220
34209: POP
// bc_type := b_ext_siberium ; 21 :
34210: LD_ADDR_OWVAR 42
34214: PUSH
34215: LD_INT 21
34217: ST_TO_ADDR
34218: GO 34487
34220: LD_INT 21
34222: DOUBLE
34223: EQUAL
34224: IFTRUE 34228
34226: GO 34239
34228: POP
// bc_type := b_ext_computer ; 22 :
34229: LD_ADDR_OWVAR 42
34233: PUSH
34234: LD_INT 24
34236: ST_TO_ADDR
34237: GO 34487
34239: LD_INT 22
34241: DOUBLE
34242: EQUAL
34243: IFTRUE 34247
34245: GO 34258
34247: POP
// bc_type := b_ext_track ; 23 :
34248: LD_ADDR_OWVAR 42
34252: PUSH
34253: LD_INT 16
34255: ST_TO_ADDR
34256: GO 34487
34258: LD_INT 23
34260: DOUBLE
34261: EQUAL
34262: IFTRUE 34266
34264: GO 34277
34266: POP
// bc_type := b_ext_laser ; 24 :
34267: LD_ADDR_OWVAR 42
34271: PUSH
34272: LD_INT 25
34274: ST_TO_ADDR
34275: GO 34487
34277: LD_INT 24
34279: DOUBLE
34280: EQUAL
34281: IFTRUE 34285
34283: GO 34296
34285: POP
// bc_type := b_control_tower ; 25 :
34286: LD_ADDR_OWVAR 42
34290: PUSH
34291: LD_INT 36
34293: ST_TO_ADDR
34294: GO 34487
34296: LD_INT 25
34298: DOUBLE
34299: EQUAL
34300: IFTRUE 34304
34302: GO 34315
34304: POP
// bc_type := b_breastwork ; 26 :
34305: LD_ADDR_OWVAR 42
34309: PUSH
34310: LD_INT 31
34312: ST_TO_ADDR
34313: GO 34487
34315: LD_INT 26
34317: DOUBLE
34318: EQUAL
34319: IFTRUE 34323
34321: GO 34334
34323: POP
// bc_type := b_bunker ; 27 :
34324: LD_ADDR_OWVAR 42
34328: PUSH
34329: LD_INT 32
34331: ST_TO_ADDR
34332: GO 34487
34334: LD_INT 27
34336: DOUBLE
34337: EQUAL
34338: IFTRUE 34342
34340: GO 34353
34342: POP
// bc_type := b_turret ; 28 :
34343: LD_ADDR_OWVAR 42
34347: PUSH
34348: LD_INT 33
34350: ST_TO_ADDR
34351: GO 34487
34353: LD_INT 28
34355: DOUBLE
34356: EQUAL
34357: IFTRUE 34361
34359: GO 34372
34361: POP
// bc_type := b_armoury ; 29 :
34362: LD_ADDR_OWVAR 42
34366: PUSH
34367: LD_INT 4
34369: ST_TO_ADDR
34370: GO 34487
34372: LD_INT 29
34374: DOUBLE
34375: EQUAL
34376: IFTRUE 34380
34378: GO 34391
34380: POP
// bc_type := b_barracks ; 30 :
34381: LD_ADDR_OWVAR 42
34385: PUSH
34386: LD_INT 5
34388: ST_TO_ADDR
34389: GO 34487
34391: LD_INT 30
34393: DOUBLE
34394: EQUAL
34395: IFTRUE 34399
34397: GO 34410
34399: POP
// bc_type := b_solar_power ; 31 :
34400: LD_ADDR_OWVAR 42
34404: PUSH
34405: LD_INT 27
34407: ST_TO_ADDR
34408: GO 34487
34410: LD_INT 31
34412: DOUBLE
34413: EQUAL
34414: IFTRUE 34418
34416: GO 34429
34418: POP
// bc_type := b_oil_power ; 32 :
34419: LD_ADDR_OWVAR 42
34423: PUSH
34424: LD_INT 26
34426: ST_TO_ADDR
34427: GO 34487
34429: LD_INT 32
34431: DOUBLE
34432: EQUAL
34433: IFTRUE 34437
34435: GO 34448
34437: POP
// bc_type := b_siberite_power ; 33 :
34438: LD_ADDR_OWVAR 42
34442: PUSH
34443: LD_INT 28
34445: ST_TO_ADDR
34446: GO 34487
34448: LD_INT 33
34450: DOUBLE
34451: EQUAL
34452: IFTRUE 34456
34454: GO 34467
34456: POP
// bc_type := b_oil_mine ; 34 :
34457: LD_ADDR_OWVAR 42
34461: PUSH
34462: LD_INT 29
34464: ST_TO_ADDR
34465: GO 34487
34467: LD_INT 34
34469: DOUBLE
34470: EQUAL
34471: IFTRUE 34475
34473: GO 34486
34475: POP
// bc_type := b_siberite_mine ; end ;
34476: LD_ADDR_OWVAR 42
34480: PUSH
34481: LD_INT 30
34483: ST_TO_ADDR
34484: GO 34487
34486: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34487: LD_ADDR_VAR 0 8
34491: PUSH
34492: LD_VAR 0 5
34496: PPUSH
34497: LD_VAR 0 6
34501: PPUSH
34502: LD_VAR 0 3
34506: PPUSH
34507: CALL_OW 47
34511: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34512: LD_OWVAR 42
34516: PUSH
34517: LD_INT 32
34519: PUSH
34520: LD_INT 33
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: IN
34527: IFFALSE 34543
// PlaceWeaponTurret ( b , weapon ) ;
34529: LD_VAR 0 8
34533: PPUSH
34534: LD_VAR 0 4
34538: PPUSH
34539: CALL_OW 431
// end ;
34543: LD_VAR 0 7
34547: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34548: LD_INT 0
34550: PPUSH
34551: PPUSH
34552: PPUSH
34553: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34554: LD_ADDR_VAR 0 4
34558: PUSH
34559: LD_INT 22
34561: PUSH
34562: LD_OWVAR 2
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 2
34573: PUSH
34574: LD_INT 30
34576: PUSH
34577: LD_INT 0
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 30
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: LIST
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PPUSH
34603: CALL_OW 69
34607: ST_TO_ADDR
// if not tmp then
34608: LD_VAR 0 4
34612: NOT
34613: IFFALSE 34617
// exit ;
34615: GO 34676
// for i in tmp do
34617: LD_ADDR_VAR 0 2
34621: PUSH
34622: LD_VAR 0 4
34626: PUSH
34627: FOR_IN
34628: IFFALSE 34674
// for j = 1 to 3 do
34630: LD_ADDR_VAR 0 3
34634: PUSH
34635: DOUBLE
34636: LD_INT 1
34638: DEC
34639: ST_TO_ADDR
34640: LD_INT 3
34642: PUSH
34643: FOR_TO
34644: IFFALSE 34670
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34646: LD_VAR 0 2
34650: PPUSH
34651: CALL_OW 274
34655: PPUSH
34656: LD_VAR 0 3
34660: PPUSH
34661: LD_INT 99999
34663: PPUSH
34664: CALL_OW 277
34668: GO 34643
34670: POP
34671: POP
34672: GO 34627
34674: POP
34675: POP
// end ;
34676: LD_VAR 0 1
34680: RET
// export function hHackSetLevel10 ; var i , j ; begin
34681: LD_INT 0
34683: PPUSH
34684: PPUSH
34685: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34686: LD_ADDR_VAR 0 2
34690: PUSH
34691: LD_INT 21
34693: PUSH
34694: LD_INT 1
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PPUSH
34701: CALL_OW 69
34705: PUSH
34706: FOR_IN
34707: IFFALSE 34759
// if IsSelected ( i ) then
34709: LD_VAR 0 2
34713: PPUSH
34714: CALL_OW 306
34718: IFFALSE 34757
// begin for j := 1 to 4 do
34720: LD_ADDR_VAR 0 3
34724: PUSH
34725: DOUBLE
34726: LD_INT 1
34728: DEC
34729: ST_TO_ADDR
34730: LD_INT 4
34732: PUSH
34733: FOR_TO
34734: IFFALSE 34755
// SetSkill ( i , j , 10 ) ;
34736: LD_VAR 0 2
34740: PPUSH
34741: LD_VAR 0 3
34745: PPUSH
34746: LD_INT 10
34748: PPUSH
34749: CALL_OW 237
34753: GO 34733
34755: POP
34756: POP
// end ;
34757: GO 34706
34759: POP
34760: POP
// end ;
34761: LD_VAR 0 1
34765: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34766: LD_INT 0
34768: PPUSH
34769: PPUSH
34770: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34771: LD_ADDR_VAR 0 2
34775: PUSH
34776: LD_INT 22
34778: PUSH
34779: LD_OWVAR 2
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 21
34790: PUSH
34791: LD_INT 1
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PPUSH
34802: CALL_OW 69
34806: PUSH
34807: FOR_IN
34808: IFFALSE 34849
// begin for j := 1 to 4 do
34810: LD_ADDR_VAR 0 3
34814: PUSH
34815: DOUBLE
34816: LD_INT 1
34818: DEC
34819: ST_TO_ADDR
34820: LD_INT 4
34822: PUSH
34823: FOR_TO
34824: IFFALSE 34845
// SetSkill ( i , j , 10 ) ;
34826: LD_VAR 0 2
34830: PPUSH
34831: LD_VAR 0 3
34835: PPUSH
34836: LD_INT 10
34838: PPUSH
34839: CALL_OW 237
34843: GO 34823
34845: POP
34846: POP
// end ;
34847: GO 34807
34849: POP
34850: POP
// end ;
34851: LD_VAR 0 1
34855: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34856: LD_INT 0
34858: PPUSH
// uc_side := your_side ;
34859: LD_ADDR_OWVAR 20
34863: PUSH
34864: LD_OWVAR 2
34868: ST_TO_ADDR
// uc_nation := nation ;
34869: LD_ADDR_OWVAR 21
34873: PUSH
34874: LD_VAR 0 1
34878: ST_TO_ADDR
// InitHc ;
34879: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34883: LD_INT 0
34885: PPUSH
34886: LD_VAR 0 2
34890: PPUSH
34891: LD_VAR 0 3
34895: PPUSH
34896: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34900: LD_VAR 0 4
34904: PPUSH
34905: LD_VAR 0 5
34909: PPUSH
34910: CALL_OW 428
34914: PUSH
34915: LD_INT 0
34917: EQUAL
34918: IFFALSE 34942
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34920: CALL_OW 44
34924: PPUSH
34925: LD_VAR 0 4
34929: PPUSH
34930: LD_VAR 0 5
34934: PPUSH
34935: LD_INT 1
34937: PPUSH
34938: CALL_OW 48
// end ;
34942: LD_VAR 0 6
34946: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34947: LD_INT 0
34949: PPUSH
34950: PPUSH
// uc_side := your_side ;
34951: LD_ADDR_OWVAR 20
34955: PUSH
34956: LD_OWVAR 2
34960: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34961: LD_VAR 0 1
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: LD_INT 2
34971: PUSH
34972: LD_INT 3
34974: PUSH
34975: LD_INT 4
34977: PUSH
34978: LD_INT 5
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: IN
34988: IFFALSE 35000
// uc_nation := nation_american else
34990: LD_ADDR_OWVAR 21
34994: PUSH
34995: LD_INT 1
34997: ST_TO_ADDR
34998: GO 35043
// if chassis in [ 11 , 12 , 13 , 14 ] then
35000: LD_VAR 0 1
35004: PUSH
35005: LD_INT 11
35007: PUSH
35008: LD_INT 12
35010: PUSH
35011: LD_INT 13
35013: PUSH
35014: LD_INT 14
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: IN
35023: IFFALSE 35035
// uc_nation := nation_arabian else
35025: LD_ADDR_OWVAR 21
35029: PUSH
35030: LD_INT 2
35032: ST_TO_ADDR
35033: GO 35043
// uc_nation := nation_russian ;
35035: LD_ADDR_OWVAR 21
35039: PUSH
35040: LD_INT 3
35042: ST_TO_ADDR
// vc_chassis := chassis ;
35043: LD_ADDR_OWVAR 37
35047: PUSH
35048: LD_VAR 0 1
35052: ST_TO_ADDR
// vc_engine := engine ;
35053: LD_ADDR_OWVAR 39
35057: PUSH
35058: LD_VAR 0 2
35062: ST_TO_ADDR
// vc_control := control ;
35063: LD_ADDR_OWVAR 38
35067: PUSH
35068: LD_VAR 0 3
35072: ST_TO_ADDR
// vc_weapon := weapon ;
35073: LD_ADDR_OWVAR 40
35077: PUSH
35078: LD_VAR 0 4
35082: ST_TO_ADDR
// un := CreateVehicle ;
35083: LD_ADDR_VAR 0 8
35087: PUSH
35088: CALL_OW 45
35092: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35093: LD_VAR 0 8
35097: PPUSH
35098: LD_INT 0
35100: PPUSH
35101: LD_INT 5
35103: PPUSH
35104: CALL_OW 12
35108: PPUSH
35109: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35113: LD_VAR 0 8
35117: PPUSH
35118: LD_VAR 0 5
35122: PPUSH
35123: LD_VAR 0 6
35127: PPUSH
35128: LD_INT 1
35130: PPUSH
35131: CALL_OW 48
// end ;
35135: LD_VAR 0 7
35139: RET
// export hInvincible ; every 1 do
35140: GO 35142
35142: DISABLE
// hInvincible := [ ] ;
35143: LD_ADDR_EXP 108
35147: PUSH
35148: EMPTY
35149: ST_TO_ADDR
35150: END
// every 10 do var i ;
35151: GO 35153
35153: DISABLE
35154: LD_INT 0
35156: PPUSH
// begin enable ;
35157: ENABLE
// if not hInvincible then
35158: LD_EXP 108
35162: NOT
35163: IFFALSE 35167
// exit ;
35165: GO 35211
// for i in hInvincible do
35167: LD_ADDR_VAR 0 1
35171: PUSH
35172: LD_EXP 108
35176: PUSH
35177: FOR_IN
35178: IFFALSE 35209
// if GetLives ( i ) < 1000 then
35180: LD_VAR 0 1
35184: PPUSH
35185: CALL_OW 256
35189: PUSH
35190: LD_INT 1000
35192: LESS
35193: IFFALSE 35207
// SetLives ( i , 1000 ) ;
35195: LD_VAR 0 1
35199: PPUSH
35200: LD_INT 1000
35202: PPUSH
35203: CALL_OW 234
35207: GO 35177
35209: POP
35210: POP
// end ;
35211: PPOPN 1
35213: END
// export function hHackInvincible ; var i ; begin
35214: LD_INT 0
35216: PPUSH
35217: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35218: LD_ADDR_VAR 0 2
35222: PUSH
35223: LD_INT 2
35225: PUSH
35226: LD_INT 21
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 21
35238: PUSH
35239: LD_INT 2
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: LIST
35250: PPUSH
35251: CALL_OW 69
35255: PUSH
35256: FOR_IN
35257: IFFALSE 35318
// if IsSelected ( i ) then
35259: LD_VAR 0 2
35263: PPUSH
35264: CALL_OW 306
35268: IFFALSE 35316
// begin if i in hInvincible then
35270: LD_VAR 0 2
35274: PUSH
35275: LD_EXP 108
35279: IN
35280: IFFALSE 35300
// hInvincible := hInvincible diff i else
35282: LD_ADDR_EXP 108
35286: PUSH
35287: LD_EXP 108
35291: PUSH
35292: LD_VAR 0 2
35296: DIFF
35297: ST_TO_ADDR
35298: GO 35316
// hInvincible := hInvincible union i ;
35300: LD_ADDR_EXP 108
35304: PUSH
35305: LD_EXP 108
35309: PUSH
35310: LD_VAR 0 2
35314: UNION
35315: ST_TO_ADDR
// end ;
35316: GO 35256
35318: POP
35319: POP
// end ;
35320: LD_VAR 0 1
35324: RET
// export function hHackInvisible ; var i , j ; begin
35325: LD_INT 0
35327: PPUSH
35328: PPUSH
35329: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35330: LD_ADDR_VAR 0 2
35334: PUSH
35335: LD_INT 21
35337: PUSH
35338: LD_INT 1
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PPUSH
35345: CALL_OW 69
35349: PUSH
35350: FOR_IN
35351: IFFALSE 35375
// if IsSelected ( i ) then
35353: LD_VAR 0 2
35357: PPUSH
35358: CALL_OW 306
35362: IFFALSE 35373
// ComForceInvisible ( i ) ;
35364: LD_VAR 0 2
35368: PPUSH
35369: CALL_OW 496
35373: GO 35350
35375: POP
35376: POP
// end ;
35377: LD_VAR 0 1
35381: RET
// export function hHackChangeYourSide ; begin
35382: LD_INT 0
35384: PPUSH
// if your_side = 8 then
35385: LD_OWVAR 2
35389: PUSH
35390: LD_INT 8
35392: EQUAL
35393: IFFALSE 35405
// your_side := 0 else
35395: LD_ADDR_OWVAR 2
35399: PUSH
35400: LD_INT 0
35402: ST_TO_ADDR
35403: GO 35419
// your_side := your_side + 1 ;
35405: LD_ADDR_OWVAR 2
35409: PUSH
35410: LD_OWVAR 2
35414: PUSH
35415: LD_INT 1
35417: PLUS
35418: ST_TO_ADDR
// end ;
35419: LD_VAR 0 1
35423: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35424: LD_INT 0
35426: PPUSH
35427: PPUSH
35428: PPUSH
// for i in all_units do
35429: LD_ADDR_VAR 0 2
35433: PUSH
35434: LD_OWVAR 3
35438: PUSH
35439: FOR_IN
35440: IFFALSE 35518
// if IsSelected ( i ) then
35442: LD_VAR 0 2
35446: PPUSH
35447: CALL_OW 306
35451: IFFALSE 35516
// begin j := GetSide ( i ) ;
35453: LD_ADDR_VAR 0 3
35457: PUSH
35458: LD_VAR 0 2
35462: PPUSH
35463: CALL_OW 255
35467: ST_TO_ADDR
// if j = 8 then
35468: LD_VAR 0 3
35472: PUSH
35473: LD_INT 8
35475: EQUAL
35476: IFFALSE 35488
// j := 0 else
35478: LD_ADDR_VAR 0 3
35482: PUSH
35483: LD_INT 0
35485: ST_TO_ADDR
35486: GO 35502
// j := j + 1 ;
35488: LD_ADDR_VAR 0 3
35492: PUSH
35493: LD_VAR 0 3
35497: PUSH
35498: LD_INT 1
35500: PLUS
35501: ST_TO_ADDR
// SetSide ( i , j ) ;
35502: LD_VAR 0 2
35506: PPUSH
35507: LD_VAR 0 3
35511: PPUSH
35512: CALL_OW 235
// end ;
35516: GO 35439
35518: POP
35519: POP
// end ;
35520: LD_VAR 0 1
35524: RET
// export function hHackFog ; begin
35525: LD_INT 0
35527: PPUSH
// FogOff ( true ) ;
35528: LD_INT 1
35530: PPUSH
35531: CALL_OW 344
// end ;
35535: LD_VAR 0 1
35539: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35540: LD_INT 0
35542: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35543: LD_VAR 0 1
35547: PPUSH
35548: LD_VAR 0 2
35552: PPUSH
35553: LD_VAR 0 3
35557: PPUSH
35558: LD_INT 1
35560: PPUSH
35561: LD_INT 1
35563: PPUSH
35564: CALL_OW 483
// CenterOnXY ( x , y ) ;
35568: LD_VAR 0 2
35572: PPUSH
35573: LD_VAR 0 3
35577: PPUSH
35578: CALL_OW 84
// end ;
35582: LD_VAR 0 4
35586: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35587: LD_INT 0
35589: PPUSH
35590: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35591: LD_VAR 0 1
35595: NOT
35596: PUSH
35597: LD_VAR 0 2
35601: PPUSH
35602: LD_VAR 0 3
35606: PPUSH
35607: CALL_OW 488
35611: NOT
35612: OR
35613: PUSH
35614: LD_VAR 0 1
35618: PPUSH
35619: CALL_OW 266
35623: PUSH
35624: LD_INT 3
35626: NONEQUAL
35627: PUSH
35628: LD_VAR 0 1
35632: PPUSH
35633: CALL_OW 247
35637: PUSH
35638: LD_INT 1
35640: EQUAL
35641: NOT
35642: AND
35643: OR
35644: IFFALSE 35648
// exit ;
35646: GO 35797
// if GetType ( factory ) = unit_human then
35648: LD_VAR 0 1
35652: PPUSH
35653: CALL_OW 247
35657: PUSH
35658: LD_INT 1
35660: EQUAL
35661: IFFALSE 35678
// factory := IsInUnit ( factory ) ;
35663: LD_ADDR_VAR 0 1
35667: PUSH
35668: LD_VAR 0 1
35672: PPUSH
35673: CALL_OW 310
35677: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35678: LD_VAR 0 1
35682: PPUSH
35683: CALL_OW 266
35687: PUSH
35688: LD_INT 3
35690: NONEQUAL
35691: IFFALSE 35695
// exit ;
35693: GO 35797
// if HexInfo ( x , y ) = factory then
35695: LD_VAR 0 2
35699: PPUSH
35700: LD_VAR 0 3
35704: PPUSH
35705: CALL_OW 428
35709: PUSH
35710: LD_VAR 0 1
35714: EQUAL
35715: IFFALSE 35742
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35717: LD_ADDR_EXP 109
35721: PUSH
35722: LD_EXP 109
35726: PPUSH
35727: LD_VAR 0 1
35731: PPUSH
35732: LD_INT 0
35734: PPUSH
35735: CALL_OW 1
35739: ST_TO_ADDR
35740: GO 35793
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35742: LD_ADDR_EXP 109
35746: PUSH
35747: LD_EXP 109
35751: PPUSH
35752: LD_VAR 0 1
35756: PPUSH
35757: LD_VAR 0 1
35761: PPUSH
35762: CALL_OW 255
35766: PUSH
35767: LD_VAR 0 1
35771: PUSH
35772: LD_VAR 0 2
35776: PUSH
35777: LD_VAR 0 3
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: PPUSH
35788: CALL_OW 1
35792: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35793: CALL 35802 0 0
// end ;
35797: LD_VAR 0 4
35801: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35802: LD_INT 0
35804: PPUSH
35805: PPUSH
35806: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35807: LD_STRING resetFactoryWaypoint();
35809: PPUSH
35810: CALL_OW 559
// if factoryWaypoints then
35814: LD_EXP 109
35818: IFFALSE 35944
// begin list := PrepareArray ( factoryWaypoints ) ;
35820: LD_ADDR_VAR 0 3
35824: PUSH
35825: LD_EXP 109
35829: PPUSH
35830: CALL 82413 0 1
35834: ST_TO_ADDR
// for i := 1 to list do
35835: LD_ADDR_VAR 0 2
35839: PUSH
35840: DOUBLE
35841: LD_INT 1
35843: DEC
35844: ST_TO_ADDR
35845: LD_VAR 0 3
35849: PUSH
35850: FOR_TO
35851: IFFALSE 35942
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35853: LD_STRING setFactoryWaypointXY(
35855: PUSH
35856: LD_VAR 0 3
35860: PUSH
35861: LD_VAR 0 2
35865: ARRAY
35866: PUSH
35867: LD_INT 1
35869: ARRAY
35870: STR
35871: PUSH
35872: LD_STRING ,
35874: STR
35875: PUSH
35876: LD_VAR 0 3
35880: PUSH
35881: LD_VAR 0 2
35885: ARRAY
35886: PUSH
35887: LD_INT 2
35889: ARRAY
35890: STR
35891: PUSH
35892: LD_STRING ,
35894: STR
35895: PUSH
35896: LD_VAR 0 3
35900: PUSH
35901: LD_VAR 0 2
35905: ARRAY
35906: PUSH
35907: LD_INT 3
35909: ARRAY
35910: STR
35911: PUSH
35912: LD_STRING ,
35914: STR
35915: PUSH
35916: LD_VAR 0 3
35920: PUSH
35921: LD_VAR 0 2
35925: ARRAY
35926: PUSH
35927: LD_INT 4
35929: ARRAY
35930: STR
35931: PUSH
35932: LD_STRING )
35934: STR
35935: PPUSH
35936: CALL_OW 559
35940: GO 35850
35942: POP
35943: POP
// end ; end ;
35944: LD_VAR 0 1
35948: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35949: LD_INT 0
35951: PPUSH
// if HexInfo ( x , y ) = warehouse then
35952: LD_VAR 0 2
35956: PPUSH
35957: LD_VAR 0 3
35961: PPUSH
35962: CALL_OW 428
35966: PUSH
35967: LD_VAR 0 1
35971: EQUAL
35972: IFFALSE 35999
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35974: LD_ADDR_EXP 110
35978: PUSH
35979: LD_EXP 110
35983: PPUSH
35984: LD_VAR 0 1
35988: PPUSH
35989: LD_INT 0
35991: PPUSH
35992: CALL_OW 1
35996: ST_TO_ADDR
35997: GO 36050
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35999: LD_ADDR_EXP 110
36003: PUSH
36004: LD_EXP 110
36008: PPUSH
36009: LD_VAR 0 1
36013: PPUSH
36014: LD_VAR 0 1
36018: PPUSH
36019: CALL_OW 255
36023: PUSH
36024: LD_VAR 0 1
36028: PUSH
36029: LD_VAR 0 2
36033: PUSH
36034: LD_VAR 0 3
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: PPUSH
36045: CALL_OW 1
36049: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
36050: CALL 36059 0 0
// end ;
36054: LD_VAR 0 4
36058: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
36059: LD_INT 0
36061: PPUSH
36062: PPUSH
36063: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
36064: LD_STRING resetWarehouseGatheringPoints();
36066: PPUSH
36067: CALL_OW 559
// if warehouseGatheringPoints then
36071: LD_EXP 110
36075: IFFALSE 36201
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36077: LD_ADDR_VAR 0 3
36081: PUSH
36082: LD_EXP 110
36086: PPUSH
36087: CALL 82413 0 1
36091: ST_TO_ADDR
// for i := 1 to list do
36092: LD_ADDR_VAR 0 2
36096: PUSH
36097: DOUBLE
36098: LD_INT 1
36100: DEC
36101: ST_TO_ADDR
36102: LD_VAR 0 3
36106: PUSH
36107: FOR_TO
36108: IFFALSE 36199
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36110: LD_STRING setWarehouseGatheringPointXY(
36112: PUSH
36113: LD_VAR 0 3
36117: PUSH
36118: LD_VAR 0 2
36122: ARRAY
36123: PUSH
36124: LD_INT 1
36126: ARRAY
36127: STR
36128: PUSH
36129: LD_STRING ,
36131: STR
36132: PUSH
36133: LD_VAR 0 3
36137: PUSH
36138: LD_VAR 0 2
36142: ARRAY
36143: PUSH
36144: LD_INT 2
36146: ARRAY
36147: STR
36148: PUSH
36149: LD_STRING ,
36151: STR
36152: PUSH
36153: LD_VAR 0 3
36157: PUSH
36158: LD_VAR 0 2
36162: ARRAY
36163: PUSH
36164: LD_INT 3
36166: ARRAY
36167: STR
36168: PUSH
36169: LD_STRING ,
36171: STR
36172: PUSH
36173: LD_VAR 0 3
36177: PUSH
36178: LD_VAR 0 2
36182: ARRAY
36183: PUSH
36184: LD_INT 4
36186: ARRAY
36187: STR
36188: PUSH
36189: LD_STRING )
36191: STR
36192: PPUSH
36193: CALL_OW 559
36197: GO 36107
36199: POP
36200: POP
// end ; end ;
36201: LD_VAR 0 1
36205: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36206: LD_EXP 110
36210: IFFALSE 36895
36212: GO 36214
36214: DISABLE
36215: LD_INT 0
36217: PPUSH
36218: PPUSH
36219: PPUSH
36220: PPUSH
36221: PPUSH
36222: PPUSH
36223: PPUSH
36224: PPUSH
36225: PPUSH
// begin enable ;
36226: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36227: LD_ADDR_VAR 0 3
36231: PUSH
36232: LD_EXP 110
36236: PPUSH
36237: CALL 82413 0 1
36241: ST_TO_ADDR
// if not list then
36242: LD_VAR 0 3
36246: NOT
36247: IFFALSE 36251
// exit ;
36249: GO 36895
// for i := 1 to list do
36251: LD_ADDR_VAR 0 1
36255: PUSH
36256: DOUBLE
36257: LD_INT 1
36259: DEC
36260: ST_TO_ADDR
36261: LD_VAR 0 3
36265: PUSH
36266: FOR_TO
36267: IFFALSE 36893
// begin depot := list [ i ] [ 2 ] ;
36269: LD_ADDR_VAR 0 8
36273: PUSH
36274: LD_VAR 0 3
36278: PUSH
36279: LD_VAR 0 1
36283: ARRAY
36284: PUSH
36285: LD_INT 2
36287: ARRAY
36288: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36289: LD_ADDR_VAR 0 5
36293: PUSH
36294: LD_VAR 0 3
36298: PUSH
36299: LD_VAR 0 1
36303: ARRAY
36304: PUSH
36305: LD_INT 1
36307: ARRAY
36308: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36309: LD_VAR 0 8
36313: PPUSH
36314: CALL_OW 301
36318: PUSH
36319: LD_VAR 0 5
36323: PUSH
36324: LD_VAR 0 8
36328: PPUSH
36329: CALL_OW 255
36333: NONEQUAL
36334: OR
36335: IFFALSE 36364
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36337: LD_ADDR_EXP 110
36341: PUSH
36342: LD_EXP 110
36346: PPUSH
36347: LD_VAR 0 8
36351: PPUSH
36352: LD_INT 0
36354: PPUSH
36355: CALL_OW 1
36359: ST_TO_ADDR
// exit ;
36360: POP
36361: POP
36362: GO 36895
// end ; x := list [ i ] [ 3 ] ;
36364: LD_ADDR_VAR 0 6
36368: PUSH
36369: LD_VAR 0 3
36373: PUSH
36374: LD_VAR 0 1
36378: ARRAY
36379: PUSH
36380: LD_INT 3
36382: ARRAY
36383: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36384: LD_ADDR_VAR 0 7
36388: PUSH
36389: LD_VAR 0 3
36393: PUSH
36394: LD_VAR 0 1
36398: ARRAY
36399: PUSH
36400: LD_INT 4
36402: ARRAY
36403: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36404: LD_ADDR_VAR 0 9
36408: PUSH
36409: LD_VAR 0 6
36413: PPUSH
36414: LD_VAR 0 7
36418: PPUSH
36419: LD_INT 16
36421: PPUSH
36422: CALL 81001 0 3
36426: ST_TO_ADDR
// if not cratesNearbyPoint then
36427: LD_VAR 0 9
36431: NOT
36432: IFFALSE 36438
// exit ;
36434: POP
36435: POP
36436: GO 36895
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36438: LD_ADDR_VAR 0 4
36442: PUSH
36443: LD_INT 22
36445: PUSH
36446: LD_VAR 0 5
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 3
36457: PUSH
36458: LD_INT 60
36460: PUSH
36461: EMPTY
36462: LIST
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 91
36470: PUSH
36471: LD_VAR 0 8
36475: PUSH
36476: LD_INT 6
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 2
36486: PUSH
36487: LD_INT 25
36489: PUSH
36490: LD_INT 2
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 25
36499: PUSH
36500: LD_INT 16
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: LIST
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: PPUSH
36518: CALL_OW 69
36522: PUSH
36523: LD_VAR 0 8
36527: PPUSH
36528: CALL_OW 313
36532: PPUSH
36533: LD_INT 3
36535: PUSH
36536: LD_INT 60
36538: PUSH
36539: EMPTY
36540: LIST
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 2
36548: PUSH
36549: LD_INT 25
36551: PUSH
36552: LD_INT 2
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 25
36561: PUSH
36562: LD_INT 16
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: LIST
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PPUSH
36578: CALL_OW 72
36582: UNION
36583: ST_TO_ADDR
// if tmp then
36584: LD_VAR 0 4
36588: IFFALSE 36668
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36590: LD_ADDR_VAR 0 4
36594: PUSH
36595: LD_VAR 0 4
36599: PPUSH
36600: LD_INT 3
36602: PPUSH
36603: CALL 78970 0 2
36607: ST_TO_ADDR
// for j in tmp do
36608: LD_ADDR_VAR 0 2
36612: PUSH
36613: LD_VAR 0 4
36617: PUSH
36618: FOR_IN
36619: IFFALSE 36662
// begin if IsInUnit ( j ) then
36621: LD_VAR 0 2
36625: PPUSH
36626: CALL_OW 310
36630: IFFALSE 36641
// ComExit ( j ) ;
36632: LD_VAR 0 2
36636: PPUSH
36637: CALL 79053 0 1
// AddComCollect ( j , x , y ) ;
36641: LD_VAR 0 2
36645: PPUSH
36646: LD_VAR 0 6
36650: PPUSH
36651: LD_VAR 0 7
36655: PPUSH
36656: CALL_OW 177
// end ;
36660: GO 36618
36662: POP
36663: POP
// exit ;
36664: POP
36665: POP
36666: GO 36895
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36668: LD_ADDR_VAR 0 4
36672: PUSH
36673: LD_INT 22
36675: PUSH
36676: LD_VAR 0 5
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 91
36687: PUSH
36688: LD_VAR 0 8
36692: PUSH
36693: LD_INT 8
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: PUSH
36704: LD_INT 34
36706: PUSH
36707: LD_INT 12
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 34
36716: PUSH
36717: LD_INT 51
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 34
36726: PUSH
36727: LD_INT 32
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 34
36736: PUSH
36737: LD_INT 89
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: PPUSH
36756: CALL_OW 69
36760: ST_TO_ADDR
// if tmp then
36761: LD_VAR 0 4
36765: IFFALSE 36891
// begin for j in tmp do
36767: LD_ADDR_VAR 0 2
36771: PUSH
36772: LD_VAR 0 4
36776: PUSH
36777: FOR_IN
36778: IFFALSE 36889
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36780: LD_VAR 0 2
36784: PPUSH
36785: CALL_OW 262
36789: PUSH
36790: LD_INT 3
36792: EQUAL
36793: PUSH
36794: LD_VAR 0 2
36798: PPUSH
36799: CALL_OW 261
36803: PUSH
36804: LD_INT 20
36806: GREATER
36807: OR
36808: PUSH
36809: LD_VAR 0 2
36813: PPUSH
36814: CALL_OW 314
36818: NOT
36819: AND
36820: PUSH
36821: LD_VAR 0 2
36825: PPUSH
36826: CALL_OW 263
36830: PUSH
36831: LD_INT 1
36833: NONEQUAL
36834: PUSH
36835: LD_VAR 0 2
36839: PPUSH
36840: CALL_OW 311
36844: OR
36845: AND
36846: IFFALSE 36887
// begin ComCollect ( j , x , y ) ;
36848: LD_VAR 0 2
36852: PPUSH
36853: LD_VAR 0 6
36857: PPUSH
36858: LD_VAR 0 7
36862: PPUSH
36863: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36867: LD_VAR 0 2
36871: PPUSH
36872: LD_VAR 0 8
36876: PPUSH
36877: CALL_OW 172
// exit ;
36881: POP
36882: POP
36883: POP
36884: POP
36885: GO 36895
// end ;
36887: GO 36777
36889: POP
36890: POP
// end ; end ;
36891: GO 36266
36893: POP
36894: POP
// end ; end_of_file
36895: PPOPN 9
36897: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36898: LD_INT 0
36900: PPUSH
36901: PPUSH
36902: PPUSH
36903: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36904: LD_VAR 0 1
36908: PPUSH
36909: CALL_OW 264
36913: PUSH
36914: LD_INT 91
36916: EQUAL
36917: IFFALSE 36989
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36919: LD_INT 68
36921: PPUSH
36922: LD_VAR 0 1
36926: PPUSH
36927: CALL_OW 255
36931: PPUSH
36932: CALL_OW 321
36936: PUSH
36937: LD_INT 2
36939: EQUAL
36940: IFFALSE 36952
// eff := 70 else
36942: LD_ADDR_VAR 0 4
36946: PUSH
36947: LD_INT 70
36949: ST_TO_ADDR
36950: GO 36960
// eff := 30 ;
36952: LD_ADDR_VAR 0 4
36956: PUSH
36957: LD_INT 30
36959: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36960: LD_VAR 0 1
36964: PPUSH
36965: CALL_OW 250
36969: PPUSH
36970: LD_VAR 0 1
36974: PPUSH
36975: CALL_OW 251
36979: PPUSH
36980: LD_VAR 0 4
36984: PPUSH
36985: CALL_OW 495
// end ; end ;
36989: LD_VAR 0 2
36993: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36994: LD_INT 0
36996: PPUSH
// end ;
36997: LD_VAR 0 4
37001: RET
// export function SOS_Command ( cmd ) ; begin
37002: LD_INT 0
37004: PPUSH
// end ;
37005: LD_VAR 0 2
37009: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37010: LD_INT 0
37012: PPUSH
// end ;
37013: LD_VAR 0 6
37017: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
37018: LD_INT 0
37020: PPUSH
37021: PPUSH
// if not vehicle or not factory then
37022: LD_VAR 0 1
37026: NOT
37027: PUSH
37028: LD_VAR 0 2
37032: NOT
37033: OR
37034: IFFALSE 37038
// exit ;
37036: GO 37269
// if factoryWaypoints >= factory then
37038: LD_EXP 109
37042: PUSH
37043: LD_VAR 0 2
37047: GREATEREQUAL
37048: IFFALSE 37269
// if factoryWaypoints [ factory ] then
37050: LD_EXP 109
37054: PUSH
37055: LD_VAR 0 2
37059: ARRAY
37060: IFFALSE 37269
// begin if GetControl ( vehicle ) = control_manual then
37062: LD_VAR 0 1
37066: PPUSH
37067: CALL_OW 263
37071: PUSH
37072: LD_INT 1
37074: EQUAL
37075: IFFALSE 37156
// begin driver := IsDrivenBy ( vehicle ) ;
37077: LD_ADDR_VAR 0 4
37081: PUSH
37082: LD_VAR 0 1
37086: PPUSH
37087: CALL_OW 311
37091: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37092: LD_VAR 0 4
37096: PPUSH
37097: LD_EXP 109
37101: PUSH
37102: LD_VAR 0 2
37106: ARRAY
37107: PUSH
37108: LD_INT 3
37110: ARRAY
37111: PPUSH
37112: LD_EXP 109
37116: PUSH
37117: LD_VAR 0 2
37121: ARRAY
37122: PUSH
37123: LD_INT 4
37125: ARRAY
37126: PPUSH
37127: CALL_OW 171
// AddComExitVehicle ( driver ) ;
37131: LD_VAR 0 4
37135: PPUSH
37136: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
37140: LD_VAR 0 4
37144: PPUSH
37145: LD_VAR 0 2
37149: PPUSH
37150: CALL_OW 180
// end else
37154: GO 37269
// if GetControl ( vehicle ) = control_remote then
37156: LD_VAR 0 1
37160: PPUSH
37161: CALL_OW 263
37165: PUSH
37166: LD_INT 2
37168: EQUAL
37169: IFFALSE 37230
// begin wait ( 0 0$2 ) ;
37171: LD_INT 70
37173: PPUSH
37174: CALL_OW 67
// if Connect ( vehicle ) then
37178: LD_VAR 0 1
37182: PPUSH
37183: CALL 49293 0 1
37187: IFFALSE 37228
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37189: LD_VAR 0 1
37193: PPUSH
37194: LD_EXP 109
37198: PUSH
37199: LD_VAR 0 2
37203: ARRAY
37204: PUSH
37205: LD_INT 3
37207: ARRAY
37208: PPUSH
37209: LD_EXP 109
37213: PUSH
37214: LD_VAR 0 2
37218: ARRAY
37219: PUSH
37220: LD_INT 4
37222: ARRAY
37223: PPUSH
37224: CALL_OW 171
// end else
37228: GO 37269
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37230: LD_VAR 0 1
37234: PPUSH
37235: LD_EXP 109
37239: PUSH
37240: LD_VAR 0 2
37244: ARRAY
37245: PUSH
37246: LD_INT 3
37248: ARRAY
37249: PPUSH
37250: LD_EXP 109
37254: PUSH
37255: LD_VAR 0 2
37259: ARRAY
37260: PUSH
37261: LD_INT 4
37263: ARRAY
37264: PPUSH
37265: CALL_OW 171
// end ; end ;
37269: LD_VAR 0 3
37273: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37274: LD_INT 0
37276: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37277: LD_VAR 0 1
37281: PUSH
37282: LD_INT 250
37284: EQUAL
37285: PUSH
37286: LD_VAR 0 2
37290: PPUSH
37291: CALL_OW 264
37295: PUSH
37296: LD_INT 81
37298: EQUAL
37299: AND
37300: IFFALSE 37321
// MinerPlaceMine ( unit , x , y ) ;
37302: LD_VAR 0 2
37306: PPUSH
37307: LD_VAR 0 4
37311: PPUSH
37312: LD_VAR 0 5
37316: PPUSH
37317: CALL 39706 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37321: LD_VAR 0 1
37325: PUSH
37326: LD_INT 251
37328: EQUAL
37329: PUSH
37330: LD_VAR 0 2
37334: PPUSH
37335: CALL_OW 264
37339: PUSH
37340: LD_INT 81
37342: EQUAL
37343: AND
37344: IFFALSE 37365
// MinerDetonateMine ( unit , x , y ) ;
37346: LD_VAR 0 2
37350: PPUSH
37351: LD_VAR 0 4
37355: PPUSH
37356: LD_VAR 0 5
37360: PPUSH
37361: CALL 39981 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37365: LD_VAR 0 1
37369: PUSH
37370: LD_INT 252
37372: EQUAL
37373: PUSH
37374: LD_VAR 0 2
37378: PPUSH
37379: CALL_OW 264
37383: PUSH
37384: LD_INT 81
37386: EQUAL
37387: AND
37388: IFFALSE 37409
// MinerCreateMinefield ( unit , x , y ) ;
37390: LD_VAR 0 2
37394: PPUSH
37395: LD_VAR 0 4
37399: PPUSH
37400: LD_VAR 0 5
37404: PPUSH
37405: CALL 40398 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37409: LD_VAR 0 1
37413: PUSH
37414: LD_INT 253
37416: EQUAL
37417: PUSH
37418: LD_VAR 0 2
37422: PPUSH
37423: CALL_OW 257
37427: PUSH
37428: LD_INT 5
37430: EQUAL
37431: AND
37432: IFFALSE 37453
// ComBinocular ( unit , x , y ) ;
37434: LD_VAR 0 2
37438: PPUSH
37439: LD_VAR 0 4
37443: PPUSH
37444: LD_VAR 0 5
37448: PPUSH
37449: CALL 40767 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37453: LD_VAR 0 1
37457: PUSH
37458: LD_INT 254
37460: EQUAL
37461: PUSH
37462: LD_VAR 0 2
37466: PPUSH
37467: CALL_OW 264
37471: PUSH
37472: LD_INT 99
37474: EQUAL
37475: AND
37476: PUSH
37477: LD_VAR 0 3
37481: PPUSH
37482: CALL_OW 263
37486: PUSH
37487: LD_INT 3
37489: EQUAL
37490: AND
37491: IFFALSE 37507
// HackDestroyVehicle ( unit , selectedUnit ) ;
37493: LD_VAR 0 2
37497: PPUSH
37498: LD_VAR 0 3
37502: PPUSH
37503: CALL 39070 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37507: LD_VAR 0 1
37511: PUSH
37512: LD_INT 255
37514: EQUAL
37515: PUSH
37516: LD_VAR 0 2
37520: PPUSH
37521: CALL_OW 264
37525: PUSH
37526: LD_INT 14
37528: PUSH
37529: LD_INT 53
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: IN
37536: AND
37537: PUSH
37538: LD_VAR 0 4
37542: PPUSH
37543: LD_VAR 0 5
37547: PPUSH
37548: CALL_OW 488
37552: AND
37553: IFFALSE 37577
// CutTreeXYR ( unit , x , y , 12 ) ;
37555: LD_VAR 0 2
37559: PPUSH
37560: LD_VAR 0 4
37564: PPUSH
37565: LD_VAR 0 5
37569: PPUSH
37570: LD_INT 12
37572: PPUSH
37573: CALL 37640 0 4
// if cmd = 256 then
37577: LD_VAR 0 1
37581: PUSH
37582: LD_INT 256
37584: EQUAL
37585: IFFALSE 37606
// SetFactoryWaypoint ( unit , x , y ) ;
37587: LD_VAR 0 2
37591: PPUSH
37592: LD_VAR 0 4
37596: PPUSH
37597: LD_VAR 0 5
37601: PPUSH
37602: CALL 35587 0 3
// if cmd = 257 then
37606: LD_VAR 0 1
37610: PUSH
37611: LD_INT 257
37613: EQUAL
37614: IFFALSE 37635
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37616: LD_VAR 0 2
37620: PPUSH
37621: LD_VAR 0 4
37625: PPUSH
37626: LD_VAR 0 5
37630: PPUSH
37631: CALL 35949 0 3
// end ;
37635: LD_VAR 0 6
37639: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37640: LD_INT 0
37642: PPUSH
37643: PPUSH
37644: PPUSH
37645: PPUSH
37646: PPUSH
37647: PPUSH
37648: PPUSH
37649: PPUSH
37650: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
37651: LD_VAR 0 1
37655: NOT
37656: PUSH
37657: LD_VAR 0 2
37661: PPUSH
37662: LD_VAR 0 3
37666: PPUSH
37667: CALL_OW 488
37671: NOT
37672: OR
37673: PUSH
37674: LD_VAR 0 4
37678: NOT
37679: OR
37680: IFFALSE 37684
// exit ;
37682: GO 38024
// list := [ ] ;
37684: LD_ADDR_VAR 0 13
37688: PUSH
37689: EMPTY
37690: ST_TO_ADDR
// if x - r < 0 then
37691: LD_VAR 0 2
37695: PUSH
37696: LD_VAR 0 4
37700: MINUS
37701: PUSH
37702: LD_INT 0
37704: LESS
37705: IFFALSE 37717
// min_x := 0 else
37707: LD_ADDR_VAR 0 7
37711: PUSH
37712: LD_INT 0
37714: ST_TO_ADDR
37715: GO 37733
// min_x := x - r ;
37717: LD_ADDR_VAR 0 7
37721: PUSH
37722: LD_VAR 0 2
37726: PUSH
37727: LD_VAR 0 4
37731: MINUS
37732: ST_TO_ADDR
// if y - r < 0 then
37733: LD_VAR 0 3
37737: PUSH
37738: LD_VAR 0 4
37742: MINUS
37743: PUSH
37744: LD_INT 0
37746: LESS
37747: IFFALSE 37759
// min_y := 0 else
37749: LD_ADDR_VAR 0 8
37753: PUSH
37754: LD_INT 0
37756: ST_TO_ADDR
37757: GO 37775
// min_y := y - r ;
37759: LD_ADDR_VAR 0 8
37763: PUSH
37764: LD_VAR 0 3
37768: PUSH
37769: LD_VAR 0 4
37773: MINUS
37774: ST_TO_ADDR
// max_x := x + r ;
37775: LD_ADDR_VAR 0 9
37779: PUSH
37780: LD_VAR 0 2
37784: PUSH
37785: LD_VAR 0 4
37789: PLUS
37790: ST_TO_ADDR
// max_y := y + r ;
37791: LD_ADDR_VAR 0 10
37795: PUSH
37796: LD_VAR 0 3
37800: PUSH
37801: LD_VAR 0 4
37805: PLUS
37806: ST_TO_ADDR
// for _x = min_x to max_x do
37807: LD_ADDR_VAR 0 11
37811: PUSH
37812: DOUBLE
37813: LD_VAR 0 7
37817: DEC
37818: ST_TO_ADDR
37819: LD_VAR 0 9
37823: PUSH
37824: FOR_TO
37825: IFFALSE 37942
// for _y = min_y to max_y do
37827: LD_ADDR_VAR 0 12
37831: PUSH
37832: DOUBLE
37833: LD_VAR 0 8
37837: DEC
37838: ST_TO_ADDR
37839: LD_VAR 0 10
37843: PUSH
37844: FOR_TO
37845: IFFALSE 37938
// begin if not ValidHex ( _x , _y ) then
37847: LD_VAR 0 11
37851: PPUSH
37852: LD_VAR 0 12
37856: PPUSH
37857: CALL_OW 488
37861: NOT
37862: IFFALSE 37866
// continue ;
37864: GO 37844
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37866: LD_VAR 0 11
37870: PPUSH
37871: LD_VAR 0 12
37875: PPUSH
37876: CALL_OW 351
37880: PUSH
37881: LD_VAR 0 11
37885: PPUSH
37886: LD_VAR 0 12
37890: PPUSH
37891: CALL_OW 554
37895: AND
37896: IFFALSE 37936
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37898: LD_ADDR_VAR 0 13
37902: PUSH
37903: LD_VAR 0 13
37907: PPUSH
37908: LD_VAR 0 13
37912: PUSH
37913: LD_INT 1
37915: PLUS
37916: PPUSH
37917: LD_VAR 0 11
37921: PUSH
37922: LD_VAR 0 12
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PPUSH
37931: CALL_OW 2
37935: ST_TO_ADDR
// end ;
37936: GO 37844
37938: POP
37939: POP
37940: GO 37824
37942: POP
37943: POP
// if not list then
37944: LD_VAR 0 13
37948: NOT
37949: IFFALSE 37953
// exit ;
37951: GO 38024
// for i in list do
37953: LD_ADDR_VAR 0 6
37957: PUSH
37958: LD_VAR 0 13
37962: PUSH
37963: FOR_IN
37964: IFFALSE 38022
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37966: LD_VAR 0 1
37970: PPUSH
37971: LD_STRING M
37973: PUSH
37974: LD_VAR 0 6
37978: PUSH
37979: LD_INT 1
37981: ARRAY
37982: PUSH
37983: LD_VAR 0 6
37987: PUSH
37988: LD_INT 2
37990: ARRAY
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: LD_INT 0
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: PUSH
38013: EMPTY
38014: LIST
38015: PPUSH
38016: CALL_OW 447
38020: GO 37963
38022: POP
38023: POP
// end ;
38024: LD_VAR 0 5
38028: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38029: LD_EXP 112
38033: NOT
38034: IFFALSE 38084
38036: GO 38038
38038: DISABLE
// begin initHack := true ;
38039: LD_ADDR_EXP 112
38043: PUSH
38044: LD_INT 1
38046: ST_TO_ADDR
// hackTanks := [ ] ;
38047: LD_ADDR_EXP 113
38051: PUSH
38052: EMPTY
38053: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38054: LD_ADDR_EXP 114
38058: PUSH
38059: EMPTY
38060: ST_TO_ADDR
// hackLimit := 3 ;
38061: LD_ADDR_EXP 115
38065: PUSH
38066: LD_INT 3
38068: ST_TO_ADDR
// hackDist := 12 ;
38069: LD_ADDR_EXP 116
38073: PUSH
38074: LD_INT 12
38076: ST_TO_ADDR
// hackCounter := [ ] ;
38077: LD_ADDR_EXP 117
38081: PUSH
38082: EMPTY
38083: ST_TO_ADDR
// end ;
38084: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38085: LD_EXP 112
38089: PUSH
38090: LD_INT 34
38092: PUSH
38093: LD_INT 99
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PPUSH
38100: CALL_OW 69
38104: AND
38105: IFFALSE 38358
38107: GO 38109
38109: DISABLE
38110: LD_INT 0
38112: PPUSH
38113: PPUSH
// begin enable ;
38114: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38115: LD_ADDR_VAR 0 1
38119: PUSH
38120: LD_INT 34
38122: PUSH
38123: LD_INT 99
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PPUSH
38130: CALL_OW 69
38134: PUSH
38135: FOR_IN
38136: IFFALSE 38356
// begin if not i in hackTanks then
38138: LD_VAR 0 1
38142: PUSH
38143: LD_EXP 113
38147: IN
38148: NOT
38149: IFFALSE 38232
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38151: LD_ADDR_EXP 113
38155: PUSH
38156: LD_EXP 113
38160: PPUSH
38161: LD_EXP 113
38165: PUSH
38166: LD_INT 1
38168: PLUS
38169: PPUSH
38170: LD_VAR 0 1
38174: PPUSH
38175: CALL_OW 1
38179: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38180: LD_ADDR_EXP 114
38184: PUSH
38185: LD_EXP 114
38189: PPUSH
38190: LD_EXP 114
38194: PUSH
38195: LD_INT 1
38197: PLUS
38198: PPUSH
38199: EMPTY
38200: PPUSH
38201: CALL_OW 1
38205: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38206: LD_ADDR_EXP 117
38210: PUSH
38211: LD_EXP 117
38215: PPUSH
38216: LD_EXP 117
38220: PUSH
38221: LD_INT 1
38223: PLUS
38224: PPUSH
38225: EMPTY
38226: PPUSH
38227: CALL_OW 1
38231: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38232: LD_VAR 0 1
38236: PPUSH
38237: CALL_OW 302
38241: NOT
38242: IFFALSE 38255
// begin HackUnlinkAll ( i ) ;
38244: LD_VAR 0 1
38248: PPUSH
38249: CALL 38361 0 1
// continue ;
38253: GO 38135
// end ; HackCheckCapturedStatus ( i ) ;
38255: LD_VAR 0 1
38259: PPUSH
38260: CALL 38804 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38264: LD_ADDR_VAR 0 2
38268: PUSH
38269: LD_INT 81
38271: PUSH
38272: LD_VAR 0 1
38276: PPUSH
38277: CALL_OW 255
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 33
38288: PUSH
38289: LD_INT 3
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 91
38298: PUSH
38299: LD_VAR 0 1
38303: PUSH
38304: LD_EXP 116
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 50
38316: PUSH
38317: EMPTY
38318: LIST
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: PPUSH
38326: CALL_OW 69
38330: ST_TO_ADDR
// if not tmp then
38331: LD_VAR 0 2
38335: NOT
38336: IFFALSE 38340
// continue ;
38338: GO 38135
// HackLink ( i , tmp ) ;
38340: LD_VAR 0 1
38344: PPUSH
38345: LD_VAR 0 2
38349: PPUSH
38350: CALL 38497 0 2
// end ;
38354: GO 38135
38356: POP
38357: POP
// end ;
38358: PPOPN 2
38360: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38361: LD_INT 0
38363: PPUSH
38364: PPUSH
38365: PPUSH
// if not hack in hackTanks then
38366: LD_VAR 0 1
38370: PUSH
38371: LD_EXP 113
38375: IN
38376: NOT
38377: IFFALSE 38381
// exit ;
38379: GO 38492
// index := GetElementIndex ( hackTanks , hack ) ;
38381: LD_ADDR_VAR 0 4
38385: PUSH
38386: LD_EXP 113
38390: PPUSH
38391: LD_VAR 0 1
38395: PPUSH
38396: CALL 46109 0 2
38400: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38401: LD_EXP 114
38405: PUSH
38406: LD_VAR 0 4
38410: ARRAY
38411: IFFALSE 38492
// begin for i in hackTanksCaptured [ index ] do
38413: LD_ADDR_VAR 0 3
38417: PUSH
38418: LD_EXP 114
38422: PUSH
38423: LD_VAR 0 4
38427: ARRAY
38428: PUSH
38429: FOR_IN
38430: IFFALSE 38456
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38432: LD_VAR 0 3
38436: PUSH
38437: LD_INT 1
38439: ARRAY
38440: PPUSH
38441: LD_VAR 0 3
38445: PUSH
38446: LD_INT 2
38448: ARRAY
38449: PPUSH
38450: CALL_OW 235
38454: GO 38429
38456: POP
38457: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38458: LD_ADDR_EXP 114
38462: PUSH
38463: LD_EXP 114
38467: PPUSH
38468: LD_VAR 0 4
38472: PPUSH
38473: EMPTY
38474: PPUSH
38475: CALL_OW 1
38479: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38480: LD_VAR 0 1
38484: PPUSH
38485: LD_INT 0
38487: PPUSH
38488: CALL_OW 505
// end ; end ;
38492: LD_VAR 0 2
38496: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38497: LD_INT 0
38499: PPUSH
38500: PPUSH
38501: PPUSH
// if not hack in hackTanks or not vehicles then
38502: LD_VAR 0 1
38506: PUSH
38507: LD_EXP 113
38511: IN
38512: NOT
38513: PUSH
38514: LD_VAR 0 2
38518: NOT
38519: OR
38520: IFFALSE 38524
// exit ;
38522: GO 38799
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38524: LD_ADDR_VAR 0 2
38528: PUSH
38529: LD_VAR 0 1
38533: PPUSH
38534: LD_VAR 0 2
38538: PPUSH
38539: LD_INT 1
38541: PPUSH
38542: LD_INT 1
38544: PPUSH
38545: CALL 46759 0 4
38549: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38550: LD_ADDR_VAR 0 5
38554: PUSH
38555: LD_EXP 113
38559: PPUSH
38560: LD_VAR 0 1
38564: PPUSH
38565: CALL 46109 0 2
38569: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38570: LD_EXP 114
38574: PUSH
38575: LD_VAR 0 5
38579: ARRAY
38580: PUSH
38581: LD_EXP 115
38585: LESS
38586: IFFALSE 38775
// begin for i := 1 to vehicles do
38588: LD_ADDR_VAR 0 4
38592: PUSH
38593: DOUBLE
38594: LD_INT 1
38596: DEC
38597: ST_TO_ADDR
38598: LD_VAR 0 2
38602: PUSH
38603: FOR_TO
38604: IFFALSE 38773
// begin if hackTanksCaptured [ index ] = hackLimit then
38606: LD_EXP 114
38610: PUSH
38611: LD_VAR 0 5
38615: ARRAY
38616: PUSH
38617: LD_EXP 115
38621: EQUAL
38622: IFFALSE 38626
// break ;
38624: GO 38773
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38626: LD_ADDR_EXP 117
38630: PUSH
38631: LD_EXP 117
38635: PPUSH
38636: LD_VAR 0 5
38640: PPUSH
38641: LD_EXP 117
38645: PUSH
38646: LD_VAR 0 5
38650: ARRAY
38651: PUSH
38652: LD_INT 1
38654: PLUS
38655: PPUSH
38656: CALL_OW 1
38660: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38661: LD_ADDR_EXP 114
38665: PUSH
38666: LD_EXP 114
38670: PPUSH
38671: LD_VAR 0 5
38675: PUSH
38676: LD_EXP 114
38680: PUSH
38681: LD_VAR 0 5
38685: ARRAY
38686: PUSH
38687: LD_INT 1
38689: PLUS
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PPUSH
38695: LD_VAR 0 2
38699: PUSH
38700: LD_VAR 0 4
38704: ARRAY
38705: PUSH
38706: LD_VAR 0 2
38710: PUSH
38711: LD_VAR 0 4
38715: ARRAY
38716: PPUSH
38717: CALL_OW 255
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PPUSH
38726: CALL 46324 0 3
38730: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38731: LD_VAR 0 2
38735: PUSH
38736: LD_VAR 0 4
38740: ARRAY
38741: PPUSH
38742: LD_VAR 0 1
38746: PPUSH
38747: CALL_OW 255
38751: PPUSH
38752: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38756: LD_VAR 0 2
38760: PUSH
38761: LD_VAR 0 4
38765: ARRAY
38766: PPUSH
38767: CALL_OW 141
// end ;
38771: GO 38603
38773: POP
38774: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38775: LD_VAR 0 1
38779: PPUSH
38780: LD_EXP 114
38784: PUSH
38785: LD_VAR 0 5
38789: ARRAY
38790: PUSH
38791: LD_INT 0
38793: PLUS
38794: PPUSH
38795: CALL_OW 505
// end ;
38799: LD_VAR 0 3
38803: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38804: LD_INT 0
38806: PPUSH
38807: PPUSH
38808: PPUSH
38809: PPUSH
// if not hack in hackTanks then
38810: LD_VAR 0 1
38814: PUSH
38815: LD_EXP 113
38819: IN
38820: NOT
38821: IFFALSE 38825
// exit ;
38823: GO 39065
// index := GetElementIndex ( hackTanks , hack ) ;
38825: LD_ADDR_VAR 0 4
38829: PUSH
38830: LD_EXP 113
38834: PPUSH
38835: LD_VAR 0 1
38839: PPUSH
38840: CALL 46109 0 2
38844: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38845: LD_ADDR_VAR 0 3
38849: PUSH
38850: DOUBLE
38851: LD_EXP 114
38855: PUSH
38856: LD_VAR 0 4
38860: ARRAY
38861: INC
38862: ST_TO_ADDR
38863: LD_INT 1
38865: PUSH
38866: FOR_DOWNTO
38867: IFFALSE 39039
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38869: LD_ADDR_VAR 0 5
38873: PUSH
38874: LD_EXP 114
38878: PUSH
38879: LD_VAR 0 4
38883: ARRAY
38884: PUSH
38885: LD_VAR 0 3
38889: ARRAY
38890: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38891: LD_VAR 0 5
38895: PUSH
38896: LD_INT 1
38898: ARRAY
38899: PPUSH
38900: CALL_OW 302
38904: NOT
38905: PUSH
38906: LD_VAR 0 5
38910: PUSH
38911: LD_INT 1
38913: ARRAY
38914: PPUSH
38915: CALL_OW 255
38919: PUSH
38920: LD_VAR 0 1
38924: PPUSH
38925: CALL_OW 255
38929: NONEQUAL
38930: OR
38931: IFFALSE 39037
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38933: LD_VAR 0 5
38937: PUSH
38938: LD_INT 1
38940: ARRAY
38941: PPUSH
38942: CALL_OW 305
38946: PUSH
38947: LD_VAR 0 5
38951: PUSH
38952: LD_INT 1
38954: ARRAY
38955: PPUSH
38956: CALL_OW 255
38960: PUSH
38961: LD_VAR 0 1
38965: PPUSH
38966: CALL_OW 255
38970: EQUAL
38971: AND
38972: IFFALSE 38996
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38974: LD_VAR 0 5
38978: PUSH
38979: LD_INT 1
38981: ARRAY
38982: PPUSH
38983: LD_VAR 0 5
38987: PUSH
38988: LD_INT 2
38990: ARRAY
38991: PPUSH
38992: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38996: LD_ADDR_EXP 114
39000: PUSH
39001: LD_EXP 114
39005: PPUSH
39006: LD_VAR 0 4
39010: PPUSH
39011: LD_EXP 114
39015: PUSH
39016: LD_VAR 0 4
39020: ARRAY
39021: PPUSH
39022: LD_VAR 0 3
39026: PPUSH
39027: CALL_OW 3
39031: PPUSH
39032: CALL_OW 1
39036: ST_TO_ADDR
// end ; end ;
39037: GO 38866
39039: POP
39040: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39041: LD_VAR 0 1
39045: PPUSH
39046: LD_EXP 114
39050: PUSH
39051: LD_VAR 0 4
39055: ARRAY
39056: PUSH
39057: LD_INT 0
39059: PLUS
39060: PPUSH
39061: CALL_OW 505
// end ;
39065: LD_VAR 0 2
39069: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39070: LD_INT 0
39072: PPUSH
39073: PPUSH
39074: PPUSH
39075: PPUSH
// if not hack in hackTanks then
39076: LD_VAR 0 1
39080: PUSH
39081: LD_EXP 113
39085: IN
39086: NOT
39087: IFFALSE 39091
// exit ;
39089: GO 39176
// index := GetElementIndex ( hackTanks , hack ) ;
39091: LD_ADDR_VAR 0 5
39095: PUSH
39096: LD_EXP 113
39100: PPUSH
39101: LD_VAR 0 1
39105: PPUSH
39106: CALL 46109 0 2
39110: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39111: LD_ADDR_VAR 0 4
39115: PUSH
39116: DOUBLE
39117: LD_INT 1
39119: DEC
39120: ST_TO_ADDR
39121: LD_EXP 114
39125: PUSH
39126: LD_VAR 0 5
39130: ARRAY
39131: PUSH
39132: FOR_TO
39133: IFFALSE 39174
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39135: LD_EXP 114
39139: PUSH
39140: LD_VAR 0 5
39144: ARRAY
39145: PUSH
39146: LD_VAR 0 4
39150: ARRAY
39151: PUSH
39152: LD_INT 1
39154: ARRAY
39155: PUSH
39156: LD_VAR 0 2
39160: EQUAL
39161: IFFALSE 39172
// KillUnit ( vehicle ) ;
39163: LD_VAR 0 2
39167: PPUSH
39168: CALL_OW 66
39172: GO 39132
39174: POP
39175: POP
// end ;
39176: LD_VAR 0 3
39180: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39181: LD_EXP 118
39185: NOT
39186: IFFALSE 39221
39188: GO 39190
39190: DISABLE
// begin initMiner := true ;
39191: LD_ADDR_EXP 118
39195: PUSH
39196: LD_INT 1
39198: ST_TO_ADDR
// minersList := [ ] ;
39199: LD_ADDR_EXP 119
39203: PUSH
39204: EMPTY
39205: ST_TO_ADDR
// minerMinesList := [ ] ;
39206: LD_ADDR_EXP 120
39210: PUSH
39211: EMPTY
39212: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39213: LD_ADDR_EXP 121
39217: PUSH
39218: LD_INT 5
39220: ST_TO_ADDR
// end ;
39221: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39222: LD_EXP 118
39226: PUSH
39227: LD_INT 34
39229: PUSH
39230: LD_INT 81
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PPUSH
39237: CALL_OW 69
39241: AND
39242: IFFALSE 39703
39244: GO 39246
39246: DISABLE
39247: LD_INT 0
39249: PPUSH
39250: PPUSH
39251: PPUSH
39252: PPUSH
// begin enable ;
39253: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39254: LD_ADDR_VAR 0 1
39258: PUSH
39259: LD_INT 34
39261: PUSH
39262: LD_INT 81
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PPUSH
39269: CALL_OW 69
39273: PUSH
39274: FOR_IN
39275: IFFALSE 39347
// begin if not i in minersList then
39277: LD_VAR 0 1
39281: PUSH
39282: LD_EXP 119
39286: IN
39287: NOT
39288: IFFALSE 39345
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39290: LD_ADDR_EXP 119
39294: PUSH
39295: LD_EXP 119
39299: PPUSH
39300: LD_EXP 119
39304: PUSH
39305: LD_INT 1
39307: PLUS
39308: PPUSH
39309: LD_VAR 0 1
39313: PPUSH
39314: CALL_OW 1
39318: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39319: LD_ADDR_EXP 120
39323: PUSH
39324: LD_EXP 120
39328: PPUSH
39329: LD_EXP 120
39333: PUSH
39334: LD_INT 1
39336: PLUS
39337: PPUSH
39338: EMPTY
39339: PPUSH
39340: CALL_OW 1
39344: ST_TO_ADDR
// end end ;
39345: GO 39274
39347: POP
39348: POP
// for i := minerMinesList downto 1 do
39349: LD_ADDR_VAR 0 1
39353: PUSH
39354: DOUBLE
39355: LD_EXP 120
39359: INC
39360: ST_TO_ADDR
39361: LD_INT 1
39363: PUSH
39364: FOR_DOWNTO
39365: IFFALSE 39701
// begin if IsLive ( minersList [ i ] ) then
39367: LD_EXP 119
39371: PUSH
39372: LD_VAR 0 1
39376: ARRAY
39377: PPUSH
39378: CALL_OW 300
39382: IFFALSE 39410
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39384: LD_EXP 119
39388: PUSH
39389: LD_VAR 0 1
39393: ARRAY
39394: PPUSH
39395: LD_EXP 120
39399: PUSH
39400: LD_VAR 0 1
39404: ARRAY
39405: PPUSH
39406: CALL_OW 505
// if not minerMinesList [ i ] then
39410: LD_EXP 120
39414: PUSH
39415: LD_VAR 0 1
39419: ARRAY
39420: NOT
39421: IFFALSE 39425
// continue ;
39423: GO 39364
// for j := minerMinesList [ i ] downto 1 do
39425: LD_ADDR_VAR 0 2
39429: PUSH
39430: DOUBLE
39431: LD_EXP 120
39435: PUSH
39436: LD_VAR 0 1
39440: ARRAY
39441: INC
39442: ST_TO_ADDR
39443: LD_INT 1
39445: PUSH
39446: FOR_DOWNTO
39447: IFFALSE 39697
// begin side := GetSide ( minersList [ i ] ) ;
39449: LD_ADDR_VAR 0 3
39453: PUSH
39454: LD_EXP 119
39458: PUSH
39459: LD_VAR 0 1
39463: ARRAY
39464: PPUSH
39465: CALL_OW 255
39469: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39470: LD_ADDR_VAR 0 4
39474: PUSH
39475: LD_EXP 120
39479: PUSH
39480: LD_VAR 0 1
39484: ARRAY
39485: PUSH
39486: LD_VAR 0 2
39490: ARRAY
39491: PUSH
39492: LD_INT 1
39494: ARRAY
39495: PPUSH
39496: LD_EXP 120
39500: PUSH
39501: LD_VAR 0 1
39505: ARRAY
39506: PUSH
39507: LD_VAR 0 2
39511: ARRAY
39512: PUSH
39513: LD_INT 2
39515: ARRAY
39516: PPUSH
39517: CALL_OW 428
39521: ST_TO_ADDR
// if not tmp then
39522: LD_VAR 0 4
39526: NOT
39527: IFFALSE 39531
// continue ;
39529: GO 39446
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39531: LD_VAR 0 4
39535: PUSH
39536: LD_INT 81
39538: PUSH
39539: LD_VAR 0 3
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PPUSH
39548: CALL_OW 69
39552: IN
39553: PUSH
39554: LD_EXP 120
39558: PUSH
39559: LD_VAR 0 1
39563: ARRAY
39564: PUSH
39565: LD_VAR 0 2
39569: ARRAY
39570: PUSH
39571: LD_INT 1
39573: ARRAY
39574: PPUSH
39575: LD_EXP 120
39579: PUSH
39580: LD_VAR 0 1
39584: ARRAY
39585: PUSH
39586: LD_VAR 0 2
39590: ARRAY
39591: PUSH
39592: LD_INT 2
39594: ARRAY
39595: PPUSH
39596: CALL_OW 458
39600: AND
39601: IFFALSE 39695
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39603: LD_EXP 120
39607: PUSH
39608: LD_VAR 0 1
39612: ARRAY
39613: PUSH
39614: LD_VAR 0 2
39618: ARRAY
39619: PUSH
39620: LD_INT 1
39622: ARRAY
39623: PPUSH
39624: LD_EXP 120
39628: PUSH
39629: LD_VAR 0 1
39633: ARRAY
39634: PUSH
39635: LD_VAR 0 2
39639: ARRAY
39640: PUSH
39641: LD_INT 2
39643: ARRAY
39644: PPUSH
39645: LD_VAR 0 3
39649: PPUSH
39650: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39654: LD_ADDR_EXP 120
39658: PUSH
39659: LD_EXP 120
39663: PPUSH
39664: LD_VAR 0 1
39668: PPUSH
39669: LD_EXP 120
39673: PUSH
39674: LD_VAR 0 1
39678: ARRAY
39679: PPUSH
39680: LD_VAR 0 2
39684: PPUSH
39685: CALL_OW 3
39689: PPUSH
39690: CALL_OW 1
39694: ST_TO_ADDR
// end ; end ;
39695: GO 39446
39697: POP
39698: POP
// end ;
39699: GO 39364
39701: POP
39702: POP
// end ;
39703: PPOPN 4
39705: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39706: LD_INT 0
39708: PPUSH
39709: PPUSH
// result := false ;
39710: LD_ADDR_VAR 0 4
39714: PUSH
39715: LD_INT 0
39717: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39718: LD_VAR 0 1
39722: PPUSH
39723: CALL_OW 264
39727: PUSH
39728: LD_INT 81
39730: EQUAL
39731: NOT
39732: IFFALSE 39736
// exit ;
39734: GO 39976
// index := GetElementIndex ( minersList , unit ) ;
39736: LD_ADDR_VAR 0 5
39740: PUSH
39741: LD_EXP 119
39745: PPUSH
39746: LD_VAR 0 1
39750: PPUSH
39751: CALL 46109 0 2
39755: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39756: LD_EXP 120
39760: PUSH
39761: LD_VAR 0 5
39765: ARRAY
39766: PUSH
39767: LD_EXP 121
39771: GREATEREQUAL
39772: IFFALSE 39776
// exit ;
39774: GO 39976
// ComMoveXY ( unit , x , y ) ;
39776: LD_VAR 0 1
39780: PPUSH
39781: LD_VAR 0 2
39785: PPUSH
39786: LD_VAR 0 3
39790: PPUSH
39791: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39795: LD_INT 35
39797: PPUSH
39798: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39802: LD_VAR 0 1
39806: PPUSH
39807: LD_VAR 0 2
39811: PPUSH
39812: LD_VAR 0 3
39816: PPUSH
39817: CALL 77464 0 3
39821: NOT
39822: PUSH
39823: LD_VAR 0 1
39827: PPUSH
39828: CALL_OW 314
39832: AND
39833: IFFALSE 39837
// exit ;
39835: GO 39976
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39837: LD_VAR 0 2
39841: PPUSH
39842: LD_VAR 0 3
39846: PPUSH
39847: CALL_OW 428
39851: PUSH
39852: LD_VAR 0 1
39856: EQUAL
39857: PUSH
39858: LD_VAR 0 1
39862: PPUSH
39863: CALL_OW 314
39867: NOT
39868: AND
39869: IFFALSE 39795
// PlaySoundXY ( x , y , PlantMine ) ;
39871: LD_VAR 0 2
39875: PPUSH
39876: LD_VAR 0 3
39880: PPUSH
39881: LD_STRING PlantMine
39883: PPUSH
39884: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39888: LD_VAR 0 2
39892: PPUSH
39893: LD_VAR 0 3
39897: PPUSH
39898: LD_VAR 0 1
39902: PPUSH
39903: CALL_OW 255
39907: PPUSH
39908: LD_INT 0
39910: PPUSH
39911: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39915: LD_ADDR_EXP 120
39919: PUSH
39920: LD_EXP 120
39924: PPUSH
39925: LD_VAR 0 5
39929: PUSH
39930: LD_EXP 120
39934: PUSH
39935: LD_VAR 0 5
39939: ARRAY
39940: PUSH
39941: LD_INT 1
39943: PLUS
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PPUSH
39949: LD_VAR 0 2
39953: PUSH
39954: LD_VAR 0 3
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PPUSH
39963: CALL 46324 0 3
39967: ST_TO_ADDR
// result := true ;
39968: LD_ADDR_VAR 0 4
39972: PUSH
39973: LD_INT 1
39975: ST_TO_ADDR
// end ;
39976: LD_VAR 0 4
39980: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39981: LD_INT 0
39983: PPUSH
39984: PPUSH
39985: PPUSH
// if not unit in minersList then
39986: LD_VAR 0 1
39990: PUSH
39991: LD_EXP 119
39995: IN
39996: NOT
39997: IFFALSE 40001
// exit ;
39999: GO 40393
// index := GetElementIndex ( minersList , unit ) ;
40001: LD_ADDR_VAR 0 6
40005: PUSH
40006: LD_EXP 119
40010: PPUSH
40011: LD_VAR 0 1
40015: PPUSH
40016: CALL 46109 0 2
40020: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40021: LD_ADDR_VAR 0 5
40025: PUSH
40026: DOUBLE
40027: LD_EXP 120
40031: PUSH
40032: LD_VAR 0 6
40036: ARRAY
40037: INC
40038: ST_TO_ADDR
40039: LD_INT 1
40041: PUSH
40042: FOR_DOWNTO
40043: IFFALSE 40204
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40045: LD_EXP 120
40049: PUSH
40050: LD_VAR 0 6
40054: ARRAY
40055: PUSH
40056: LD_VAR 0 5
40060: ARRAY
40061: PUSH
40062: LD_INT 1
40064: ARRAY
40065: PUSH
40066: LD_VAR 0 2
40070: EQUAL
40071: PUSH
40072: LD_EXP 120
40076: PUSH
40077: LD_VAR 0 6
40081: ARRAY
40082: PUSH
40083: LD_VAR 0 5
40087: ARRAY
40088: PUSH
40089: LD_INT 2
40091: ARRAY
40092: PUSH
40093: LD_VAR 0 3
40097: EQUAL
40098: AND
40099: IFFALSE 40202
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40101: LD_EXP 120
40105: PUSH
40106: LD_VAR 0 6
40110: ARRAY
40111: PUSH
40112: LD_VAR 0 5
40116: ARRAY
40117: PUSH
40118: LD_INT 1
40120: ARRAY
40121: PPUSH
40122: LD_EXP 120
40126: PUSH
40127: LD_VAR 0 6
40131: ARRAY
40132: PUSH
40133: LD_VAR 0 5
40137: ARRAY
40138: PUSH
40139: LD_INT 2
40141: ARRAY
40142: PPUSH
40143: LD_VAR 0 1
40147: PPUSH
40148: CALL_OW 255
40152: PPUSH
40153: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40157: LD_ADDR_EXP 120
40161: PUSH
40162: LD_EXP 120
40166: PPUSH
40167: LD_VAR 0 6
40171: PPUSH
40172: LD_EXP 120
40176: PUSH
40177: LD_VAR 0 6
40181: ARRAY
40182: PPUSH
40183: LD_VAR 0 5
40187: PPUSH
40188: CALL_OW 3
40192: PPUSH
40193: CALL_OW 1
40197: ST_TO_ADDR
// exit ;
40198: POP
40199: POP
40200: GO 40393
// end ; end ;
40202: GO 40042
40204: POP
40205: POP
// for i := minerMinesList [ index ] downto 1 do
40206: LD_ADDR_VAR 0 5
40210: PUSH
40211: DOUBLE
40212: LD_EXP 120
40216: PUSH
40217: LD_VAR 0 6
40221: ARRAY
40222: INC
40223: ST_TO_ADDR
40224: LD_INT 1
40226: PUSH
40227: FOR_DOWNTO
40228: IFFALSE 40391
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40230: LD_EXP 120
40234: PUSH
40235: LD_VAR 0 6
40239: ARRAY
40240: PUSH
40241: LD_VAR 0 5
40245: ARRAY
40246: PUSH
40247: LD_INT 1
40249: ARRAY
40250: PPUSH
40251: LD_EXP 120
40255: PUSH
40256: LD_VAR 0 6
40260: ARRAY
40261: PUSH
40262: LD_VAR 0 5
40266: ARRAY
40267: PUSH
40268: LD_INT 2
40270: ARRAY
40271: PPUSH
40272: LD_VAR 0 2
40276: PPUSH
40277: LD_VAR 0 3
40281: PPUSH
40282: CALL_OW 298
40286: PUSH
40287: LD_INT 6
40289: LESS
40290: IFFALSE 40389
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40292: LD_EXP 120
40296: PUSH
40297: LD_VAR 0 6
40301: ARRAY
40302: PUSH
40303: LD_VAR 0 5
40307: ARRAY
40308: PUSH
40309: LD_INT 1
40311: ARRAY
40312: PPUSH
40313: LD_EXP 120
40317: PUSH
40318: LD_VAR 0 6
40322: ARRAY
40323: PUSH
40324: LD_VAR 0 5
40328: ARRAY
40329: PUSH
40330: LD_INT 2
40332: ARRAY
40333: PPUSH
40334: LD_VAR 0 1
40338: PPUSH
40339: CALL_OW 255
40343: PPUSH
40344: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40348: LD_ADDR_EXP 120
40352: PUSH
40353: LD_EXP 120
40357: PPUSH
40358: LD_VAR 0 6
40362: PPUSH
40363: LD_EXP 120
40367: PUSH
40368: LD_VAR 0 6
40372: ARRAY
40373: PPUSH
40374: LD_VAR 0 5
40378: PPUSH
40379: CALL_OW 3
40383: PPUSH
40384: CALL_OW 1
40388: ST_TO_ADDR
// end ; end ;
40389: GO 40227
40391: POP
40392: POP
// end ;
40393: LD_VAR 0 4
40397: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40398: LD_INT 0
40400: PPUSH
40401: PPUSH
40402: PPUSH
40403: PPUSH
40404: PPUSH
40405: PPUSH
40406: PPUSH
40407: PPUSH
40408: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40409: LD_VAR 0 1
40413: PPUSH
40414: CALL_OW 264
40418: PUSH
40419: LD_INT 81
40421: EQUAL
40422: NOT
40423: PUSH
40424: LD_VAR 0 1
40428: PUSH
40429: LD_EXP 119
40433: IN
40434: NOT
40435: OR
40436: IFFALSE 40440
// exit ;
40438: GO 40762
// index := GetElementIndex ( minersList , unit ) ;
40440: LD_ADDR_VAR 0 6
40444: PUSH
40445: LD_EXP 119
40449: PPUSH
40450: LD_VAR 0 1
40454: PPUSH
40455: CALL 46109 0 2
40459: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40460: LD_ADDR_VAR 0 8
40464: PUSH
40465: LD_EXP 121
40469: PUSH
40470: LD_EXP 120
40474: PUSH
40475: LD_VAR 0 6
40479: ARRAY
40480: MINUS
40481: ST_TO_ADDR
// if not minesFreeAmount then
40482: LD_VAR 0 8
40486: NOT
40487: IFFALSE 40491
// exit ;
40489: GO 40762
// tmp := [ ] ;
40491: LD_ADDR_VAR 0 7
40495: PUSH
40496: EMPTY
40497: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40498: LD_ADDR_VAR 0 5
40502: PUSH
40503: DOUBLE
40504: LD_INT 1
40506: DEC
40507: ST_TO_ADDR
40508: LD_VAR 0 8
40512: PUSH
40513: FOR_TO
40514: IFFALSE 40709
// begin _d := rand ( 0 , 5 ) ;
40516: LD_ADDR_VAR 0 11
40520: PUSH
40521: LD_INT 0
40523: PPUSH
40524: LD_INT 5
40526: PPUSH
40527: CALL_OW 12
40531: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40532: LD_ADDR_VAR 0 12
40536: PUSH
40537: LD_INT 2
40539: PPUSH
40540: LD_INT 6
40542: PPUSH
40543: CALL_OW 12
40547: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40548: LD_ADDR_VAR 0 9
40552: PUSH
40553: LD_VAR 0 2
40557: PPUSH
40558: LD_VAR 0 11
40562: PPUSH
40563: LD_VAR 0 12
40567: PPUSH
40568: CALL_OW 272
40572: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40573: LD_ADDR_VAR 0 10
40577: PUSH
40578: LD_VAR 0 3
40582: PPUSH
40583: LD_VAR 0 11
40587: PPUSH
40588: LD_VAR 0 12
40592: PPUSH
40593: CALL_OW 273
40597: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40598: LD_VAR 0 9
40602: PPUSH
40603: LD_VAR 0 10
40607: PPUSH
40608: CALL_OW 488
40612: PUSH
40613: LD_VAR 0 9
40617: PUSH
40618: LD_VAR 0 10
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_VAR 0 7
40631: IN
40632: NOT
40633: AND
40634: PUSH
40635: LD_VAR 0 9
40639: PPUSH
40640: LD_VAR 0 10
40644: PPUSH
40645: CALL_OW 458
40649: NOT
40650: AND
40651: IFFALSE 40693
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40653: LD_ADDR_VAR 0 7
40657: PUSH
40658: LD_VAR 0 7
40662: PPUSH
40663: LD_VAR 0 7
40667: PUSH
40668: LD_INT 1
40670: PLUS
40671: PPUSH
40672: LD_VAR 0 9
40676: PUSH
40677: LD_VAR 0 10
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PPUSH
40686: CALL_OW 1
40690: ST_TO_ADDR
40691: GO 40707
// i := i - 1 ;
40693: LD_ADDR_VAR 0 5
40697: PUSH
40698: LD_VAR 0 5
40702: PUSH
40703: LD_INT 1
40705: MINUS
40706: ST_TO_ADDR
// end ;
40707: GO 40513
40709: POP
40710: POP
// for i in tmp do
40711: LD_ADDR_VAR 0 5
40715: PUSH
40716: LD_VAR 0 7
40720: PUSH
40721: FOR_IN
40722: IFFALSE 40760
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40724: LD_VAR 0 1
40728: PPUSH
40729: LD_VAR 0 5
40733: PUSH
40734: LD_INT 1
40736: ARRAY
40737: PPUSH
40738: LD_VAR 0 5
40742: PUSH
40743: LD_INT 2
40745: ARRAY
40746: PPUSH
40747: CALL 39706 0 3
40751: NOT
40752: IFFALSE 40758
// exit ;
40754: POP
40755: POP
40756: GO 40762
40758: GO 40721
40760: POP
40761: POP
// end ;
40762: LD_VAR 0 4
40766: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40767: LD_INT 0
40769: PPUSH
40770: PPUSH
40771: PPUSH
40772: PPUSH
40773: PPUSH
40774: PPUSH
40775: PPUSH
// if not GetClass ( unit ) = class_sniper then
40776: LD_VAR 0 1
40780: PPUSH
40781: CALL_OW 257
40785: PUSH
40786: LD_INT 5
40788: EQUAL
40789: NOT
40790: IFFALSE 40794
// exit ;
40792: GO 41182
// dist := 8 ;
40794: LD_ADDR_VAR 0 5
40798: PUSH
40799: LD_INT 8
40801: ST_TO_ADDR
// viewRange := 12 ;
40802: LD_ADDR_VAR 0 7
40806: PUSH
40807: LD_INT 12
40809: ST_TO_ADDR
// side := GetSide ( unit ) ;
40810: LD_ADDR_VAR 0 6
40814: PUSH
40815: LD_VAR 0 1
40819: PPUSH
40820: CALL_OW 255
40824: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40825: LD_INT 61
40827: PPUSH
40828: LD_VAR 0 6
40832: PPUSH
40833: CALL_OW 321
40837: PUSH
40838: LD_INT 2
40840: EQUAL
40841: IFFALSE 40851
// viewRange := 16 ;
40843: LD_ADDR_VAR 0 7
40847: PUSH
40848: LD_INT 16
40850: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40851: LD_VAR 0 1
40855: PPUSH
40856: LD_VAR 0 2
40860: PPUSH
40861: LD_VAR 0 3
40865: PPUSH
40866: CALL_OW 297
40870: PUSH
40871: LD_VAR 0 5
40875: GREATER
40876: IFFALSE 40955
// begin ComMoveXY ( unit , x , y ) ;
40878: LD_VAR 0 1
40882: PPUSH
40883: LD_VAR 0 2
40887: PPUSH
40888: LD_VAR 0 3
40892: PPUSH
40893: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40897: LD_INT 35
40899: PPUSH
40900: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40904: LD_VAR 0 1
40908: PPUSH
40909: LD_VAR 0 2
40913: PPUSH
40914: LD_VAR 0 3
40918: PPUSH
40919: CALL 77464 0 3
40923: NOT
40924: IFFALSE 40928
// exit ;
40926: GO 41182
// until GetDistUnitXY ( unit , x , y ) < dist ;
40928: LD_VAR 0 1
40932: PPUSH
40933: LD_VAR 0 2
40937: PPUSH
40938: LD_VAR 0 3
40942: PPUSH
40943: CALL_OW 297
40947: PUSH
40948: LD_VAR 0 5
40952: LESS
40953: IFFALSE 40897
// end ; ComTurnXY ( unit , x , y ) ;
40955: LD_VAR 0 1
40959: PPUSH
40960: LD_VAR 0 2
40964: PPUSH
40965: LD_VAR 0 3
40969: PPUSH
40970: CALL_OW 118
// wait ( 5 ) ;
40974: LD_INT 5
40976: PPUSH
40977: CALL_OW 67
// _d := GetDir ( unit ) ;
40981: LD_ADDR_VAR 0 10
40985: PUSH
40986: LD_VAR 0 1
40990: PPUSH
40991: CALL_OW 254
40995: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40996: LD_ADDR_VAR 0 8
41000: PUSH
41001: LD_VAR 0 1
41005: PPUSH
41006: CALL_OW 250
41010: PPUSH
41011: LD_VAR 0 10
41015: PPUSH
41016: LD_VAR 0 5
41020: PPUSH
41021: CALL_OW 272
41025: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41026: LD_ADDR_VAR 0 9
41030: PUSH
41031: LD_VAR 0 1
41035: PPUSH
41036: CALL_OW 251
41040: PPUSH
41041: LD_VAR 0 10
41045: PPUSH
41046: LD_VAR 0 5
41050: PPUSH
41051: CALL_OW 273
41055: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41056: LD_VAR 0 8
41060: PPUSH
41061: LD_VAR 0 9
41065: PPUSH
41066: CALL_OW 488
41070: NOT
41071: IFFALSE 41075
// exit ;
41073: GO 41182
// ComAnimCustom ( unit , 1 ) ;
41075: LD_VAR 0 1
41079: PPUSH
41080: LD_INT 1
41082: PPUSH
41083: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41087: LD_VAR 0 8
41091: PPUSH
41092: LD_VAR 0 9
41096: PPUSH
41097: LD_VAR 0 6
41101: PPUSH
41102: LD_VAR 0 7
41106: PPUSH
41107: CALL_OW 330
// repeat wait ( 1 ) ;
41111: LD_INT 1
41113: PPUSH
41114: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41118: LD_VAR 0 1
41122: PPUSH
41123: CALL_OW 316
41127: PUSH
41128: LD_VAR 0 1
41132: PPUSH
41133: CALL_OW 314
41137: OR
41138: PUSH
41139: LD_VAR 0 1
41143: PPUSH
41144: CALL_OW 302
41148: NOT
41149: OR
41150: PUSH
41151: LD_VAR 0 1
41155: PPUSH
41156: CALL_OW 301
41160: OR
41161: IFFALSE 41111
// RemoveSeeing ( _x , _y , side ) ;
41163: LD_VAR 0 8
41167: PPUSH
41168: LD_VAR 0 9
41172: PPUSH
41173: LD_VAR 0 6
41177: PPUSH
41178: CALL_OW 331
// end ; end_of_file
41182: LD_VAR 0 4
41186: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41187: LD_INT 0
41189: PPUSH
41190: PPUSH
// if exist_mode then
41191: LD_VAR 0 2
41195: IFFALSE 41220
// unit := CreateCharacter ( prefix & ident ) else
41197: LD_ADDR_VAR 0 5
41201: PUSH
41202: LD_VAR 0 3
41206: PUSH
41207: LD_VAR 0 1
41211: STR
41212: PPUSH
41213: CALL_OW 34
41217: ST_TO_ADDR
41218: GO 41235
// unit := NewCharacter ( ident ) ;
41220: LD_ADDR_VAR 0 5
41224: PUSH
41225: LD_VAR 0 1
41229: PPUSH
41230: CALL_OW 25
41234: ST_TO_ADDR
// result := unit ;
41235: LD_ADDR_VAR 0 4
41239: PUSH
41240: LD_VAR 0 5
41244: ST_TO_ADDR
// end ;
41245: LD_VAR 0 4
41249: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41250: LD_INT 0
41252: PPUSH
41253: PPUSH
// if not side or not nation then
41254: LD_VAR 0 1
41258: NOT
41259: PUSH
41260: LD_VAR 0 2
41264: NOT
41265: OR
41266: IFFALSE 41270
// exit ;
41268: GO 42038
// case nation of nation_american :
41270: LD_VAR 0 2
41274: PUSH
41275: LD_INT 1
41277: DOUBLE
41278: EQUAL
41279: IFTRUE 41283
41281: GO 41497
41283: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41284: LD_ADDR_VAR 0 4
41288: PUSH
41289: LD_INT 35
41291: PUSH
41292: LD_INT 45
41294: PUSH
41295: LD_INT 46
41297: PUSH
41298: LD_INT 47
41300: PUSH
41301: LD_INT 82
41303: PUSH
41304: LD_INT 83
41306: PUSH
41307: LD_INT 84
41309: PUSH
41310: LD_INT 85
41312: PUSH
41313: LD_INT 86
41315: PUSH
41316: LD_INT 1
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: LD_INT 6
41324: PUSH
41325: LD_INT 15
41327: PUSH
41328: LD_INT 16
41330: PUSH
41331: LD_INT 7
41333: PUSH
41334: LD_INT 12
41336: PUSH
41337: LD_INT 13
41339: PUSH
41340: LD_INT 10
41342: PUSH
41343: LD_INT 14
41345: PUSH
41346: LD_INT 20
41348: PUSH
41349: LD_INT 21
41351: PUSH
41352: LD_INT 22
41354: PUSH
41355: LD_INT 25
41357: PUSH
41358: LD_INT 32
41360: PUSH
41361: LD_INT 27
41363: PUSH
41364: LD_INT 36
41366: PUSH
41367: LD_INT 69
41369: PUSH
41370: LD_INT 39
41372: PUSH
41373: LD_INT 34
41375: PUSH
41376: LD_INT 40
41378: PUSH
41379: LD_INT 48
41381: PUSH
41382: LD_INT 49
41384: PUSH
41385: LD_INT 50
41387: PUSH
41388: LD_INT 51
41390: PUSH
41391: LD_INT 52
41393: PUSH
41394: LD_INT 53
41396: PUSH
41397: LD_INT 54
41399: PUSH
41400: LD_INT 55
41402: PUSH
41403: LD_INT 56
41405: PUSH
41406: LD_INT 57
41408: PUSH
41409: LD_INT 58
41411: PUSH
41412: LD_INT 59
41414: PUSH
41415: LD_INT 60
41417: PUSH
41418: LD_INT 61
41420: PUSH
41421: LD_INT 62
41423: PUSH
41424: LD_INT 80
41426: PUSH
41427: LD_INT 82
41429: PUSH
41430: LD_INT 83
41432: PUSH
41433: LD_INT 84
41435: PUSH
41436: LD_INT 85
41438: PUSH
41439: LD_INT 86
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: ST_TO_ADDR
41495: GO 41962
41497: LD_INT 2
41499: DOUBLE
41500: EQUAL
41501: IFTRUE 41505
41503: GO 41731
41505: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41506: LD_ADDR_VAR 0 4
41510: PUSH
41511: LD_INT 35
41513: PUSH
41514: LD_INT 45
41516: PUSH
41517: LD_INT 46
41519: PUSH
41520: LD_INT 47
41522: PUSH
41523: LD_INT 82
41525: PUSH
41526: LD_INT 83
41528: PUSH
41529: LD_INT 84
41531: PUSH
41532: LD_INT 85
41534: PUSH
41535: LD_INT 87
41537: PUSH
41538: LD_INT 70
41540: PUSH
41541: LD_INT 1
41543: PUSH
41544: LD_INT 11
41546: PUSH
41547: LD_INT 3
41549: PUSH
41550: LD_INT 4
41552: PUSH
41553: LD_INT 5
41555: PUSH
41556: LD_INT 6
41558: PUSH
41559: LD_INT 15
41561: PUSH
41562: LD_INT 18
41564: PUSH
41565: LD_INT 7
41567: PUSH
41568: LD_INT 17
41570: PUSH
41571: LD_INT 8
41573: PUSH
41574: LD_INT 20
41576: PUSH
41577: LD_INT 21
41579: PUSH
41580: LD_INT 22
41582: PUSH
41583: LD_INT 72
41585: PUSH
41586: LD_INT 26
41588: PUSH
41589: LD_INT 69
41591: PUSH
41592: LD_INT 39
41594: PUSH
41595: LD_INT 40
41597: PUSH
41598: LD_INT 41
41600: PUSH
41601: LD_INT 42
41603: PUSH
41604: LD_INT 43
41606: PUSH
41607: LD_INT 48
41609: PUSH
41610: LD_INT 49
41612: PUSH
41613: LD_INT 50
41615: PUSH
41616: LD_INT 51
41618: PUSH
41619: LD_INT 52
41621: PUSH
41622: LD_INT 53
41624: PUSH
41625: LD_INT 54
41627: PUSH
41628: LD_INT 55
41630: PUSH
41631: LD_INT 56
41633: PUSH
41634: LD_INT 60
41636: PUSH
41637: LD_INT 61
41639: PUSH
41640: LD_INT 62
41642: PUSH
41643: LD_INT 66
41645: PUSH
41646: LD_INT 67
41648: PUSH
41649: LD_INT 68
41651: PUSH
41652: LD_INT 81
41654: PUSH
41655: LD_INT 82
41657: PUSH
41658: LD_INT 83
41660: PUSH
41661: LD_INT 84
41663: PUSH
41664: LD_INT 85
41666: PUSH
41667: LD_INT 87
41669: PUSH
41670: LD_INT 88
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: ST_TO_ADDR
41729: GO 41962
41731: LD_INT 3
41733: DOUBLE
41734: EQUAL
41735: IFTRUE 41739
41737: GO 41961
41739: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41740: LD_ADDR_VAR 0 4
41744: PUSH
41745: LD_INT 46
41747: PUSH
41748: LD_INT 47
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: LD_INT 2
41756: PUSH
41757: LD_INT 82
41759: PUSH
41760: LD_INT 83
41762: PUSH
41763: LD_INT 84
41765: PUSH
41766: LD_INT 85
41768: PUSH
41769: LD_INT 86
41771: PUSH
41772: LD_INT 11
41774: PUSH
41775: LD_INT 9
41777: PUSH
41778: LD_INT 20
41780: PUSH
41781: LD_INT 19
41783: PUSH
41784: LD_INT 21
41786: PUSH
41787: LD_INT 24
41789: PUSH
41790: LD_INT 22
41792: PUSH
41793: LD_INT 25
41795: PUSH
41796: LD_INT 28
41798: PUSH
41799: LD_INT 29
41801: PUSH
41802: LD_INT 30
41804: PUSH
41805: LD_INT 31
41807: PUSH
41808: LD_INT 37
41810: PUSH
41811: LD_INT 38
41813: PUSH
41814: LD_INT 32
41816: PUSH
41817: LD_INT 27
41819: PUSH
41820: LD_INT 33
41822: PUSH
41823: LD_INT 69
41825: PUSH
41826: LD_INT 39
41828: PUSH
41829: LD_INT 34
41831: PUSH
41832: LD_INT 40
41834: PUSH
41835: LD_INT 71
41837: PUSH
41838: LD_INT 23
41840: PUSH
41841: LD_INT 44
41843: PUSH
41844: LD_INT 48
41846: PUSH
41847: LD_INT 49
41849: PUSH
41850: LD_INT 50
41852: PUSH
41853: LD_INT 51
41855: PUSH
41856: LD_INT 52
41858: PUSH
41859: LD_INT 53
41861: PUSH
41862: LD_INT 54
41864: PUSH
41865: LD_INT 55
41867: PUSH
41868: LD_INT 56
41870: PUSH
41871: LD_INT 57
41873: PUSH
41874: LD_INT 58
41876: PUSH
41877: LD_INT 59
41879: PUSH
41880: LD_INT 63
41882: PUSH
41883: LD_INT 64
41885: PUSH
41886: LD_INT 65
41888: PUSH
41889: LD_INT 82
41891: PUSH
41892: LD_INT 83
41894: PUSH
41895: LD_INT 84
41897: PUSH
41898: LD_INT 85
41900: PUSH
41901: LD_INT 86
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: ST_TO_ADDR
41959: GO 41962
41961: POP
// if state > - 1 and state < 3 then
41962: LD_VAR 0 3
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: GREATER
41971: PUSH
41972: LD_VAR 0 3
41976: PUSH
41977: LD_INT 3
41979: LESS
41980: AND
41981: IFFALSE 42038
// for i in result do
41983: LD_ADDR_VAR 0 5
41987: PUSH
41988: LD_VAR 0 4
41992: PUSH
41993: FOR_IN
41994: IFFALSE 42036
// if GetTech ( i , side ) <> state then
41996: LD_VAR 0 5
42000: PPUSH
42001: LD_VAR 0 1
42005: PPUSH
42006: CALL_OW 321
42010: PUSH
42011: LD_VAR 0 3
42015: NONEQUAL
42016: IFFALSE 42034
// result := result diff i ;
42018: LD_ADDR_VAR 0 4
42022: PUSH
42023: LD_VAR 0 4
42027: PUSH
42028: LD_VAR 0 5
42032: DIFF
42033: ST_TO_ADDR
42034: GO 41993
42036: POP
42037: POP
// end ;
42038: LD_VAR 0 4
42042: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42043: LD_INT 0
42045: PPUSH
42046: PPUSH
42047: PPUSH
// result := true ;
42048: LD_ADDR_VAR 0 3
42052: PUSH
42053: LD_INT 1
42055: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42056: LD_ADDR_VAR 0 5
42060: PUSH
42061: LD_VAR 0 2
42065: PPUSH
42066: CALL_OW 480
42070: ST_TO_ADDR
// if not tmp then
42071: LD_VAR 0 5
42075: NOT
42076: IFFALSE 42080
// exit ;
42078: GO 42129
// for i in tmp do
42080: LD_ADDR_VAR 0 4
42084: PUSH
42085: LD_VAR 0 5
42089: PUSH
42090: FOR_IN
42091: IFFALSE 42127
// if GetTech ( i , side ) <> state_researched then
42093: LD_VAR 0 4
42097: PPUSH
42098: LD_VAR 0 1
42102: PPUSH
42103: CALL_OW 321
42107: PUSH
42108: LD_INT 2
42110: NONEQUAL
42111: IFFALSE 42125
// begin result := false ;
42113: LD_ADDR_VAR 0 3
42117: PUSH
42118: LD_INT 0
42120: ST_TO_ADDR
// exit ;
42121: POP
42122: POP
42123: GO 42129
// end ;
42125: GO 42090
42127: POP
42128: POP
// end ;
42129: LD_VAR 0 3
42133: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42134: LD_INT 0
42136: PPUSH
42137: PPUSH
42138: PPUSH
42139: PPUSH
42140: PPUSH
42141: PPUSH
42142: PPUSH
42143: PPUSH
42144: PPUSH
42145: PPUSH
42146: PPUSH
42147: PPUSH
42148: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42149: LD_VAR 0 1
42153: NOT
42154: PUSH
42155: LD_VAR 0 1
42159: PPUSH
42160: CALL_OW 257
42164: PUSH
42165: LD_INT 9
42167: NONEQUAL
42168: OR
42169: IFFALSE 42173
// exit ;
42171: GO 42746
// side := GetSide ( unit ) ;
42173: LD_ADDR_VAR 0 9
42177: PUSH
42178: LD_VAR 0 1
42182: PPUSH
42183: CALL_OW 255
42187: ST_TO_ADDR
// tech_space := tech_spacanom ;
42188: LD_ADDR_VAR 0 12
42192: PUSH
42193: LD_INT 29
42195: ST_TO_ADDR
// tech_time := tech_taurad ;
42196: LD_ADDR_VAR 0 13
42200: PUSH
42201: LD_INT 28
42203: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42204: LD_ADDR_VAR 0 11
42208: PUSH
42209: LD_VAR 0 1
42213: PPUSH
42214: CALL_OW 310
42218: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42219: LD_VAR 0 11
42223: PPUSH
42224: CALL_OW 247
42228: PUSH
42229: LD_INT 2
42231: EQUAL
42232: IFFALSE 42236
// exit ;
42234: GO 42746
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42236: LD_ADDR_VAR 0 8
42240: PUSH
42241: LD_INT 81
42243: PUSH
42244: LD_VAR 0 9
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 3
42255: PUSH
42256: LD_INT 21
42258: PUSH
42259: LD_INT 3
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PPUSH
42274: CALL_OW 69
42278: ST_TO_ADDR
// if not tmp then
42279: LD_VAR 0 8
42283: NOT
42284: IFFALSE 42288
// exit ;
42286: GO 42746
// if in_unit then
42288: LD_VAR 0 11
42292: IFFALSE 42316
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42294: LD_ADDR_VAR 0 10
42298: PUSH
42299: LD_VAR 0 8
42303: PPUSH
42304: LD_VAR 0 11
42308: PPUSH
42309: CALL_OW 74
42313: ST_TO_ADDR
42314: GO 42336
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42316: LD_ADDR_VAR 0 10
42320: PUSH
42321: LD_VAR 0 8
42325: PPUSH
42326: LD_VAR 0 1
42330: PPUSH
42331: CALL_OW 74
42335: ST_TO_ADDR
// if not enemy then
42336: LD_VAR 0 10
42340: NOT
42341: IFFALSE 42345
// exit ;
42343: GO 42746
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42345: LD_VAR 0 11
42349: PUSH
42350: LD_VAR 0 11
42354: PPUSH
42355: LD_VAR 0 10
42359: PPUSH
42360: CALL_OW 296
42364: PUSH
42365: LD_INT 13
42367: GREATER
42368: AND
42369: PUSH
42370: LD_VAR 0 1
42374: PPUSH
42375: LD_VAR 0 10
42379: PPUSH
42380: CALL_OW 296
42384: PUSH
42385: LD_INT 12
42387: GREATER
42388: OR
42389: IFFALSE 42393
// exit ;
42391: GO 42746
// missile := [ 1 ] ;
42393: LD_ADDR_VAR 0 14
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: EMPTY
42402: LIST
42403: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42404: LD_VAR 0 9
42408: PPUSH
42409: LD_VAR 0 12
42413: PPUSH
42414: CALL_OW 325
42418: IFFALSE 42447
// missile := Replace ( missile , missile + 1 , 2 ) ;
42420: LD_ADDR_VAR 0 14
42424: PUSH
42425: LD_VAR 0 14
42429: PPUSH
42430: LD_VAR 0 14
42434: PUSH
42435: LD_INT 1
42437: PLUS
42438: PPUSH
42439: LD_INT 2
42441: PPUSH
42442: CALL_OW 1
42446: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42447: LD_VAR 0 9
42451: PPUSH
42452: LD_VAR 0 13
42456: PPUSH
42457: CALL_OW 325
42461: PUSH
42462: LD_VAR 0 10
42466: PPUSH
42467: CALL_OW 255
42471: PPUSH
42472: LD_VAR 0 13
42476: PPUSH
42477: CALL_OW 325
42481: NOT
42482: AND
42483: IFFALSE 42512
// missile := Replace ( missile , missile + 1 , 3 ) ;
42485: LD_ADDR_VAR 0 14
42489: PUSH
42490: LD_VAR 0 14
42494: PPUSH
42495: LD_VAR 0 14
42499: PUSH
42500: LD_INT 1
42502: PLUS
42503: PPUSH
42504: LD_INT 3
42506: PPUSH
42507: CALL_OW 1
42511: ST_TO_ADDR
// if missile < 2 then
42512: LD_VAR 0 14
42516: PUSH
42517: LD_INT 2
42519: LESS
42520: IFFALSE 42524
// exit ;
42522: GO 42746
// x := GetX ( enemy ) ;
42524: LD_ADDR_VAR 0 4
42528: PUSH
42529: LD_VAR 0 10
42533: PPUSH
42534: CALL_OW 250
42538: ST_TO_ADDR
// y := GetY ( enemy ) ;
42539: LD_ADDR_VAR 0 5
42543: PUSH
42544: LD_VAR 0 10
42548: PPUSH
42549: CALL_OW 251
42553: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42554: LD_ADDR_VAR 0 6
42558: PUSH
42559: LD_VAR 0 4
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PPUSH
42568: LD_INT 1
42570: PPUSH
42571: CALL_OW 12
42575: PLUS
42576: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42577: LD_ADDR_VAR 0 7
42581: PUSH
42582: LD_VAR 0 5
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PPUSH
42591: LD_INT 1
42593: PPUSH
42594: CALL_OW 12
42598: PLUS
42599: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42600: LD_VAR 0 6
42604: PPUSH
42605: LD_VAR 0 7
42609: PPUSH
42610: CALL_OW 488
42614: NOT
42615: IFFALSE 42637
// begin _x := x ;
42617: LD_ADDR_VAR 0 6
42621: PUSH
42622: LD_VAR 0 4
42626: ST_TO_ADDR
// _y := y ;
42627: LD_ADDR_VAR 0 7
42631: PUSH
42632: LD_VAR 0 5
42636: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42637: LD_ADDR_VAR 0 3
42641: PUSH
42642: LD_INT 1
42644: PPUSH
42645: LD_VAR 0 14
42649: PPUSH
42650: CALL_OW 12
42654: ST_TO_ADDR
// case i of 1 :
42655: LD_VAR 0 3
42659: PUSH
42660: LD_INT 1
42662: DOUBLE
42663: EQUAL
42664: IFTRUE 42668
42666: GO 42685
42668: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42669: LD_VAR 0 1
42673: PPUSH
42674: LD_VAR 0 10
42678: PPUSH
42679: CALL_OW 115
42683: GO 42746
42685: LD_INT 2
42687: DOUBLE
42688: EQUAL
42689: IFTRUE 42693
42691: GO 42715
42693: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42694: LD_VAR 0 1
42698: PPUSH
42699: LD_VAR 0 6
42703: PPUSH
42704: LD_VAR 0 7
42708: PPUSH
42709: CALL_OW 153
42713: GO 42746
42715: LD_INT 3
42717: DOUBLE
42718: EQUAL
42719: IFTRUE 42723
42721: GO 42745
42723: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42724: LD_VAR 0 1
42728: PPUSH
42729: LD_VAR 0 6
42733: PPUSH
42734: LD_VAR 0 7
42738: PPUSH
42739: CALL_OW 154
42743: GO 42746
42745: POP
// end ;
42746: LD_VAR 0 2
42750: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42751: LD_INT 0
42753: PPUSH
42754: PPUSH
42755: PPUSH
42756: PPUSH
42757: PPUSH
42758: PPUSH
// if not unit or not building then
42759: LD_VAR 0 1
42763: NOT
42764: PUSH
42765: LD_VAR 0 2
42769: NOT
42770: OR
42771: IFFALSE 42775
// exit ;
42773: GO 42933
// x := GetX ( building ) ;
42775: LD_ADDR_VAR 0 5
42779: PUSH
42780: LD_VAR 0 2
42784: PPUSH
42785: CALL_OW 250
42789: ST_TO_ADDR
// y := GetY ( building ) ;
42790: LD_ADDR_VAR 0 6
42794: PUSH
42795: LD_VAR 0 2
42799: PPUSH
42800: CALL_OW 251
42804: ST_TO_ADDR
// for i = 0 to 5 do
42805: LD_ADDR_VAR 0 4
42809: PUSH
42810: DOUBLE
42811: LD_INT 0
42813: DEC
42814: ST_TO_ADDR
42815: LD_INT 5
42817: PUSH
42818: FOR_TO
42819: IFFALSE 42931
// begin _x := ShiftX ( x , i , 3 ) ;
42821: LD_ADDR_VAR 0 7
42825: PUSH
42826: LD_VAR 0 5
42830: PPUSH
42831: LD_VAR 0 4
42835: PPUSH
42836: LD_INT 3
42838: PPUSH
42839: CALL_OW 272
42843: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42844: LD_ADDR_VAR 0 8
42848: PUSH
42849: LD_VAR 0 6
42853: PPUSH
42854: LD_VAR 0 4
42858: PPUSH
42859: LD_INT 3
42861: PPUSH
42862: CALL_OW 273
42866: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42867: LD_VAR 0 7
42871: PPUSH
42872: LD_VAR 0 8
42876: PPUSH
42877: CALL_OW 488
42881: NOT
42882: IFFALSE 42886
// continue ;
42884: GO 42818
// if HexInfo ( _x , _y ) = 0 then
42886: LD_VAR 0 7
42890: PPUSH
42891: LD_VAR 0 8
42895: PPUSH
42896: CALL_OW 428
42900: PUSH
42901: LD_INT 0
42903: EQUAL
42904: IFFALSE 42929
// begin ComMoveXY ( unit , _x , _y ) ;
42906: LD_VAR 0 1
42910: PPUSH
42911: LD_VAR 0 7
42915: PPUSH
42916: LD_VAR 0 8
42920: PPUSH
42921: CALL_OW 111
// exit ;
42925: POP
42926: POP
42927: GO 42933
// end ; end ;
42929: GO 42818
42931: POP
42932: POP
// end ;
42933: LD_VAR 0 3
42937: RET
// export function ScanBase ( side , base_area ) ; begin
42938: LD_INT 0
42940: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42941: LD_ADDR_VAR 0 3
42945: PUSH
42946: LD_VAR 0 2
42950: PPUSH
42951: LD_INT 81
42953: PUSH
42954: LD_VAR 0 1
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PPUSH
42963: CALL_OW 70
42967: ST_TO_ADDR
// end ;
42968: LD_VAR 0 3
42972: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42973: LD_INT 0
42975: PPUSH
42976: PPUSH
42977: PPUSH
42978: PPUSH
// result := false ;
42979: LD_ADDR_VAR 0 2
42983: PUSH
42984: LD_INT 0
42986: ST_TO_ADDR
// side := GetSide ( unit ) ;
42987: LD_ADDR_VAR 0 3
42991: PUSH
42992: LD_VAR 0 1
42996: PPUSH
42997: CALL_OW 255
43001: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43002: LD_ADDR_VAR 0 4
43006: PUSH
43007: LD_VAR 0 1
43011: PPUSH
43012: CALL_OW 248
43016: ST_TO_ADDR
// case nat of 1 :
43017: LD_VAR 0 4
43021: PUSH
43022: LD_INT 1
43024: DOUBLE
43025: EQUAL
43026: IFTRUE 43030
43028: GO 43041
43030: POP
// tech := tech_lassight ; 2 :
43031: LD_ADDR_VAR 0 5
43035: PUSH
43036: LD_INT 12
43038: ST_TO_ADDR
43039: GO 43080
43041: LD_INT 2
43043: DOUBLE
43044: EQUAL
43045: IFTRUE 43049
43047: GO 43060
43049: POP
// tech := tech_mortar ; 3 :
43050: LD_ADDR_VAR 0 5
43054: PUSH
43055: LD_INT 41
43057: ST_TO_ADDR
43058: GO 43080
43060: LD_INT 3
43062: DOUBLE
43063: EQUAL
43064: IFTRUE 43068
43066: GO 43079
43068: POP
// tech := tech_bazooka ; end ;
43069: LD_ADDR_VAR 0 5
43073: PUSH
43074: LD_INT 44
43076: ST_TO_ADDR
43077: GO 43080
43079: POP
// if Researched ( side , tech ) then
43080: LD_VAR 0 3
43084: PPUSH
43085: LD_VAR 0 5
43089: PPUSH
43090: CALL_OW 325
43094: IFFALSE 43121
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43096: LD_ADDR_VAR 0 2
43100: PUSH
43101: LD_INT 5
43103: PUSH
43104: LD_INT 8
43106: PUSH
43107: LD_INT 9
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: LIST
43114: PUSH
43115: LD_VAR 0 4
43119: ARRAY
43120: ST_TO_ADDR
// end ;
43121: LD_VAR 0 2
43125: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43126: LD_INT 0
43128: PPUSH
43129: PPUSH
43130: PPUSH
// if not mines then
43131: LD_VAR 0 2
43135: NOT
43136: IFFALSE 43140
// exit ;
43138: GO 43284
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43140: LD_ADDR_VAR 0 5
43144: PUSH
43145: LD_INT 81
43147: PUSH
43148: LD_VAR 0 1
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 3
43159: PUSH
43160: LD_INT 21
43162: PUSH
43163: LD_INT 3
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PPUSH
43178: CALL_OW 69
43182: ST_TO_ADDR
// for i in mines do
43183: LD_ADDR_VAR 0 4
43187: PUSH
43188: LD_VAR 0 2
43192: PUSH
43193: FOR_IN
43194: IFFALSE 43282
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43196: LD_VAR 0 4
43200: PUSH
43201: LD_INT 1
43203: ARRAY
43204: PPUSH
43205: LD_VAR 0 4
43209: PUSH
43210: LD_INT 2
43212: ARRAY
43213: PPUSH
43214: CALL_OW 458
43218: NOT
43219: IFFALSE 43223
// continue ;
43221: GO 43193
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43223: LD_VAR 0 4
43227: PUSH
43228: LD_INT 1
43230: ARRAY
43231: PPUSH
43232: LD_VAR 0 4
43236: PUSH
43237: LD_INT 2
43239: ARRAY
43240: PPUSH
43241: CALL_OW 428
43245: PUSH
43246: LD_VAR 0 5
43250: IN
43251: IFFALSE 43280
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43253: LD_VAR 0 4
43257: PUSH
43258: LD_INT 1
43260: ARRAY
43261: PPUSH
43262: LD_VAR 0 4
43266: PUSH
43267: LD_INT 2
43269: ARRAY
43270: PPUSH
43271: LD_VAR 0 1
43275: PPUSH
43276: CALL_OW 456
// end ;
43280: GO 43193
43282: POP
43283: POP
// end ;
43284: LD_VAR 0 3
43288: RET
// export function Count ( array ) ; var i ; begin
43289: LD_INT 0
43291: PPUSH
43292: PPUSH
// result := 0 ;
43293: LD_ADDR_VAR 0 2
43297: PUSH
43298: LD_INT 0
43300: ST_TO_ADDR
// for i in array do
43301: LD_ADDR_VAR 0 3
43305: PUSH
43306: LD_VAR 0 1
43310: PUSH
43311: FOR_IN
43312: IFFALSE 43336
// if i then
43314: LD_VAR 0 3
43318: IFFALSE 43334
// result := result + 1 ;
43320: LD_ADDR_VAR 0 2
43324: PUSH
43325: LD_VAR 0 2
43329: PUSH
43330: LD_INT 1
43332: PLUS
43333: ST_TO_ADDR
43334: GO 43311
43336: POP
43337: POP
// end ;
43338: LD_VAR 0 2
43342: RET
// export function IsEmpty ( building ) ; begin
43343: LD_INT 0
43345: PPUSH
// if not building then
43346: LD_VAR 0 1
43350: NOT
43351: IFFALSE 43355
// exit ;
43353: GO 43398
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43355: LD_ADDR_VAR 0 2
43359: PUSH
43360: LD_VAR 0 1
43364: PUSH
43365: LD_INT 22
43367: PUSH
43368: LD_VAR 0 1
43372: PPUSH
43373: CALL_OW 255
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 58
43384: PUSH
43385: EMPTY
43386: LIST
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PPUSH
43392: CALL_OW 69
43396: IN
43397: ST_TO_ADDR
// end ;
43398: LD_VAR 0 2
43402: RET
// export function IsNotFull ( building ) ; var places ; begin
43403: LD_INT 0
43405: PPUSH
43406: PPUSH
// if not building then
43407: LD_VAR 0 1
43411: NOT
43412: IFFALSE 43416
// exit ;
43414: GO 43587
// result := false ;
43416: LD_ADDR_VAR 0 2
43420: PUSH
43421: LD_INT 0
43423: ST_TO_ADDR
// places := 0 ;
43424: LD_ADDR_VAR 0 3
43428: PUSH
43429: LD_INT 0
43431: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
43432: LD_VAR 0 1
43436: PPUSH
43437: CALL_OW 266
43441: PUSH
43442: LD_INT 0
43444: DOUBLE
43445: EQUAL
43446: IFTRUE 43504
43448: LD_INT 1
43450: DOUBLE
43451: EQUAL
43452: IFTRUE 43504
43454: LD_INT 6
43456: DOUBLE
43457: EQUAL
43458: IFTRUE 43504
43460: LD_INT 7
43462: DOUBLE
43463: EQUAL
43464: IFTRUE 43504
43466: LD_INT 8
43468: DOUBLE
43469: EQUAL
43470: IFTRUE 43504
43472: LD_INT 4
43474: DOUBLE
43475: EQUAL
43476: IFTRUE 43504
43478: LD_INT 5
43480: DOUBLE
43481: EQUAL
43482: IFTRUE 43504
43484: LD_INT 2
43486: DOUBLE
43487: EQUAL
43488: IFTRUE 43504
43490: LD_INT 3
43492: DOUBLE
43493: EQUAL
43494: IFTRUE 43504
43496: LD_INT 35
43498: DOUBLE
43499: EQUAL
43500: IFTRUE 43504
43502: GO 43515
43504: POP
// places := 6 ; b_bunker , b_breastwork :
43505: LD_ADDR_VAR 0 3
43509: PUSH
43510: LD_INT 6
43512: ST_TO_ADDR
43513: GO 43560
43515: LD_INT 32
43517: DOUBLE
43518: EQUAL
43519: IFTRUE 43529
43521: LD_INT 31
43523: DOUBLE
43524: EQUAL
43525: IFTRUE 43529
43527: GO 43540
43529: POP
// places := 1 ; b_control_tower :
43530: LD_ADDR_VAR 0 3
43534: PUSH
43535: LD_INT 1
43537: ST_TO_ADDR
43538: GO 43560
43540: LD_INT 36
43542: DOUBLE
43543: EQUAL
43544: IFTRUE 43548
43546: GO 43559
43548: POP
// places := 3 ; end ;
43549: LD_ADDR_VAR 0 3
43553: PUSH
43554: LD_INT 3
43556: ST_TO_ADDR
43557: GO 43560
43559: POP
// if places then
43560: LD_VAR 0 3
43564: IFFALSE 43587
// result := UnitsInside ( building ) < places ;
43566: LD_ADDR_VAR 0 2
43570: PUSH
43571: LD_VAR 0 1
43575: PPUSH
43576: CALL_OW 313
43580: PUSH
43581: LD_VAR 0 3
43585: LESS
43586: ST_TO_ADDR
// end ;
43587: LD_VAR 0 2
43591: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43592: LD_INT 0
43594: PPUSH
43595: PPUSH
43596: PPUSH
43597: PPUSH
// tmp := [ ] ;
43598: LD_ADDR_VAR 0 3
43602: PUSH
43603: EMPTY
43604: ST_TO_ADDR
// list := [ ] ;
43605: LD_ADDR_VAR 0 5
43609: PUSH
43610: EMPTY
43611: ST_TO_ADDR
// for i = 16 to 25 do
43612: LD_ADDR_VAR 0 4
43616: PUSH
43617: DOUBLE
43618: LD_INT 16
43620: DEC
43621: ST_TO_ADDR
43622: LD_INT 25
43624: PUSH
43625: FOR_TO
43626: IFFALSE 43699
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43628: LD_ADDR_VAR 0 3
43632: PUSH
43633: LD_VAR 0 3
43637: PUSH
43638: LD_INT 22
43640: PUSH
43641: LD_VAR 0 1
43645: PPUSH
43646: CALL_OW 255
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 91
43657: PUSH
43658: LD_VAR 0 1
43662: PUSH
43663: LD_INT 6
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 30
43673: PUSH
43674: LD_VAR 0 4
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: LIST
43687: PUSH
43688: EMPTY
43689: LIST
43690: PPUSH
43691: CALL_OW 69
43695: ADD
43696: ST_TO_ADDR
43697: GO 43625
43699: POP
43700: POP
// for i = 1 to tmp do
43701: LD_ADDR_VAR 0 4
43705: PUSH
43706: DOUBLE
43707: LD_INT 1
43709: DEC
43710: ST_TO_ADDR
43711: LD_VAR 0 3
43715: PUSH
43716: FOR_TO
43717: IFFALSE 43805
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43719: LD_ADDR_VAR 0 5
43723: PUSH
43724: LD_VAR 0 5
43728: PUSH
43729: LD_VAR 0 3
43733: PUSH
43734: LD_VAR 0 4
43738: ARRAY
43739: PPUSH
43740: CALL_OW 266
43744: PUSH
43745: LD_VAR 0 3
43749: PUSH
43750: LD_VAR 0 4
43754: ARRAY
43755: PPUSH
43756: CALL_OW 250
43760: PUSH
43761: LD_VAR 0 3
43765: PUSH
43766: LD_VAR 0 4
43770: ARRAY
43771: PPUSH
43772: CALL_OW 251
43776: PUSH
43777: LD_VAR 0 3
43781: PUSH
43782: LD_VAR 0 4
43786: ARRAY
43787: PPUSH
43788: CALL_OW 254
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: PUSH
43799: EMPTY
43800: LIST
43801: ADD
43802: ST_TO_ADDR
43803: GO 43716
43805: POP
43806: POP
// result := list ;
43807: LD_ADDR_VAR 0 2
43811: PUSH
43812: LD_VAR 0 5
43816: ST_TO_ADDR
// end ;
43817: LD_VAR 0 2
43821: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43822: LD_INT 0
43824: PPUSH
43825: PPUSH
43826: PPUSH
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
// if not factory then
43831: LD_VAR 0 1
43835: NOT
43836: IFFALSE 43840
// exit ;
43838: GO 44433
// if control = control_apeman then
43840: LD_VAR 0 4
43844: PUSH
43845: LD_INT 5
43847: EQUAL
43848: IFFALSE 43957
// begin tmp := UnitsInside ( factory ) ;
43850: LD_ADDR_VAR 0 8
43854: PUSH
43855: LD_VAR 0 1
43859: PPUSH
43860: CALL_OW 313
43864: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43865: LD_VAR 0 8
43869: PPUSH
43870: LD_INT 25
43872: PUSH
43873: LD_INT 12
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PPUSH
43880: CALL_OW 72
43884: NOT
43885: IFFALSE 43895
// control := control_manual ;
43887: LD_ADDR_VAR 0 4
43891: PUSH
43892: LD_INT 1
43894: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43895: LD_ADDR_VAR 0 8
43899: PUSH
43900: LD_VAR 0 1
43904: PPUSH
43905: CALL 43592 0 1
43909: ST_TO_ADDR
// if tmp then
43910: LD_VAR 0 8
43914: IFFALSE 43957
// begin for i in tmp do
43916: LD_ADDR_VAR 0 7
43920: PUSH
43921: LD_VAR 0 8
43925: PUSH
43926: FOR_IN
43927: IFFALSE 43955
// if i [ 1 ] = b_ext_radio then
43929: LD_VAR 0 7
43933: PUSH
43934: LD_INT 1
43936: ARRAY
43937: PUSH
43938: LD_INT 22
43940: EQUAL
43941: IFFALSE 43953
// begin control := control_remote ;
43943: LD_ADDR_VAR 0 4
43947: PUSH
43948: LD_INT 2
43950: ST_TO_ADDR
// break ;
43951: GO 43955
// end ;
43953: GO 43926
43955: POP
43956: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43957: LD_VAR 0 1
43961: PPUSH
43962: LD_VAR 0 2
43966: PPUSH
43967: LD_VAR 0 3
43971: PPUSH
43972: LD_VAR 0 4
43976: PPUSH
43977: LD_VAR 0 5
43981: PPUSH
43982: CALL_OW 448
43986: IFFALSE 44021
// begin result := [ chassis , engine , control , weapon ] ;
43988: LD_ADDR_VAR 0 6
43992: PUSH
43993: LD_VAR 0 2
43997: PUSH
43998: LD_VAR 0 3
44002: PUSH
44003: LD_VAR 0 4
44007: PUSH
44008: LD_VAR 0 5
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: ST_TO_ADDR
// exit ;
44019: GO 44433
// end ; _chassis := AvailableChassisList ( factory ) ;
44021: LD_ADDR_VAR 0 9
44025: PUSH
44026: LD_VAR 0 1
44030: PPUSH
44031: CALL_OW 475
44035: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44036: LD_ADDR_VAR 0 11
44040: PUSH
44041: LD_VAR 0 1
44045: PPUSH
44046: CALL_OW 476
44050: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44051: LD_ADDR_VAR 0 12
44055: PUSH
44056: LD_VAR 0 1
44060: PPUSH
44061: CALL_OW 477
44065: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44066: LD_ADDR_VAR 0 10
44070: PUSH
44071: LD_VAR 0 1
44075: PPUSH
44076: CALL_OW 478
44080: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44081: LD_VAR 0 9
44085: NOT
44086: PUSH
44087: LD_VAR 0 11
44091: NOT
44092: OR
44093: PUSH
44094: LD_VAR 0 12
44098: NOT
44099: OR
44100: PUSH
44101: LD_VAR 0 10
44105: NOT
44106: OR
44107: IFFALSE 44142
// begin result := [ chassis , engine , control , weapon ] ;
44109: LD_ADDR_VAR 0 6
44113: PUSH
44114: LD_VAR 0 2
44118: PUSH
44119: LD_VAR 0 3
44123: PUSH
44124: LD_VAR 0 4
44128: PUSH
44129: LD_VAR 0 5
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: ST_TO_ADDR
// exit ;
44140: GO 44433
// end ; if not chassis in _chassis then
44142: LD_VAR 0 2
44146: PUSH
44147: LD_VAR 0 9
44151: IN
44152: NOT
44153: IFFALSE 44179
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44155: LD_ADDR_VAR 0 2
44159: PUSH
44160: LD_VAR 0 9
44164: PUSH
44165: LD_INT 1
44167: PPUSH
44168: LD_VAR 0 9
44172: PPUSH
44173: CALL_OW 12
44177: ARRAY
44178: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44179: LD_VAR 0 2
44183: PPUSH
44184: LD_VAR 0 3
44188: PPUSH
44189: CALL 44438 0 2
44193: NOT
44194: IFFALSE 44253
// repeat engine := _engine [ 1 ] ;
44196: LD_ADDR_VAR 0 3
44200: PUSH
44201: LD_VAR 0 11
44205: PUSH
44206: LD_INT 1
44208: ARRAY
44209: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44210: LD_ADDR_VAR 0 11
44214: PUSH
44215: LD_VAR 0 11
44219: PPUSH
44220: LD_INT 1
44222: PPUSH
44223: CALL_OW 3
44227: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44228: LD_VAR 0 2
44232: PPUSH
44233: LD_VAR 0 3
44237: PPUSH
44238: CALL 44438 0 2
44242: PUSH
44243: LD_VAR 0 11
44247: PUSH
44248: EMPTY
44249: EQUAL
44250: OR
44251: IFFALSE 44196
// if not control in _control then
44253: LD_VAR 0 4
44257: PUSH
44258: LD_VAR 0 12
44262: IN
44263: NOT
44264: IFFALSE 44290
// control := _control [ rand ( 1 , _control ) ] ;
44266: LD_ADDR_VAR 0 4
44270: PUSH
44271: LD_VAR 0 12
44275: PUSH
44276: LD_INT 1
44278: PPUSH
44279: LD_VAR 0 12
44283: PPUSH
44284: CALL_OW 12
44288: ARRAY
44289: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44290: LD_VAR 0 2
44294: PPUSH
44295: LD_VAR 0 5
44299: PPUSH
44300: CALL 44658 0 2
44304: NOT
44305: IFFALSE 44364
// repeat weapon := _weapon [ 1 ] ;
44307: LD_ADDR_VAR 0 5
44311: PUSH
44312: LD_VAR 0 10
44316: PUSH
44317: LD_INT 1
44319: ARRAY
44320: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44321: LD_ADDR_VAR 0 10
44325: PUSH
44326: LD_VAR 0 10
44330: PPUSH
44331: LD_INT 1
44333: PPUSH
44334: CALL_OW 3
44338: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44339: LD_VAR 0 2
44343: PPUSH
44344: LD_VAR 0 5
44348: PPUSH
44349: CALL 44658 0 2
44353: PUSH
44354: LD_VAR 0 10
44358: PUSH
44359: EMPTY
44360: EQUAL
44361: OR
44362: IFFALSE 44307
// result := [ ] ;
44364: LD_ADDR_VAR 0 6
44368: PUSH
44369: EMPTY
44370: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44371: LD_VAR 0 1
44375: PPUSH
44376: LD_VAR 0 2
44380: PPUSH
44381: LD_VAR 0 3
44385: PPUSH
44386: LD_VAR 0 4
44390: PPUSH
44391: LD_VAR 0 5
44395: PPUSH
44396: CALL_OW 448
44400: IFFALSE 44433
// result := [ chassis , engine , control , weapon ] ;
44402: LD_ADDR_VAR 0 6
44406: PUSH
44407: LD_VAR 0 2
44411: PUSH
44412: LD_VAR 0 3
44416: PUSH
44417: LD_VAR 0 4
44421: PUSH
44422: LD_VAR 0 5
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: ST_TO_ADDR
// end ;
44433: LD_VAR 0 6
44437: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44438: LD_INT 0
44440: PPUSH
// if not chassis or not engine then
44441: LD_VAR 0 1
44445: NOT
44446: PUSH
44447: LD_VAR 0 2
44451: NOT
44452: OR
44453: IFFALSE 44457
// exit ;
44455: GO 44653
// case engine of engine_solar :
44457: LD_VAR 0 2
44461: PUSH
44462: LD_INT 2
44464: DOUBLE
44465: EQUAL
44466: IFTRUE 44470
44468: GO 44508
44470: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44471: LD_ADDR_VAR 0 3
44475: PUSH
44476: LD_INT 11
44478: PUSH
44479: LD_INT 12
44481: PUSH
44482: LD_INT 13
44484: PUSH
44485: LD_INT 14
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: LD_INT 3
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: ST_TO_ADDR
44506: GO 44637
44508: LD_INT 1
44510: DOUBLE
44511: EQUAL
44512: IFTRUE 44516
44514: GO 44578
44516: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44517: LD_ADDR_VAR 0 3
44521: PUSH
44522: LD_INT 11
44524: PUSH
44525: LD_INT 12
44527: PUSH
44528: LD_INT 13
44530: PUSH
44531: LD_INT 14
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: LD_INT 3
44542: PUSH
44543: LD_INT 4
44545: PUSH
44546: LD_INT 5
44548: PUSH
44549: LD_INT 21
44551: PUSH
44552: LD_INT 23
44554: PUSH
44555: LD_INT 22
44557: PUSH
44558: LD_INT 24
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: ST_TO_ADDR
44576: GO 44637
44578: LD_INT 3
44580: DOUBLE
44581: EQUAL
44582: IFTRUE 44586
44584: GO 44636
44586: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44587: LD_ADDR_VAR 0 3
44591: PUSH
44592: LD_INT 13
44594: PUSH
44595: LD_INT 14
44597: PUSH
44598: LD_INT 2
44600: PUSH
44601: LD_INT 3
44603: PUSH
44604: LD_INT 4
44606: PUSH
44607: LD_INT 5
44609: PUSH
44610: LD_INT 21
44612: PUSH
44613: LD_INT 22
44615: PUSH
44616: LD_INT 23
44618: PUSH
44619: LD_INT 24
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: ST_TO_ADDR
44634: GO 44637
44636: POP
// result := ( chassis in result ) ;
44637: LD_ADDR_VAR 0 3
44641: PUSH
44642: LD_VAR 0 1
44646: PUSH
44647: LD_VAR 0 3
44651: IN
44652: ST_TO_ADDR
// end ;
44653: LD_VAR 0 3
44657: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44658: LD_INT 0
44660: PPUSH
// if not chassis or not weapon then
44661: LD_VAR 0 1
44665: NOT
44666: PUSH
44667: LD_VAR 0 2
44671: NOT
44672: OR
44673: IFFALSE 44677
// exit ;
44675: GO 45737
// case weapon of us_machine_gun :
44677: LD_VAR 0 2
44681: PUSH
44682: LD_INT 2
44684: DOUBLE
44685: EQUAL
44686: IFTRUE 44690
44688: GO 44720
44690: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44691: LD_ADDR_VAR 0 3
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: LD_INT 3
44704: PUSH
44705: LD_INT 4
44707: PUSH
44708: LD_INT 5
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: ST_TO_ADDR
44718: GO 45721
44720: LD_INT 3
44722: DOUBLE
44723: EQUAL
44724: IFTRUE 44728
44726: GO 44758
44728: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44729: LD_ADDR_VAR 0 3
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: LD_INT 2
44739: PUSH
44740: LD_INT 3
44742: PUSH
44743: LD_INT 4
44745: PUSH
44746: LD_INT 5
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: ST_TO_ADDR
44756: GO 45721
44758: LD_INT 11
44760: DOUBLE
44761: EQUAL
44762: IFTRUE 44766
44764: GO 44796
44766: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44767: LD_ADDR_VAR 0 3
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: LD_INT 2
44777: PUSH
44778: LD_INT 3
44780: PUSH
44781: LD_INT 4
44783: PUSH
44784: LD_INT 5
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: ST_TO_ADDR
44794: GO 45721
44796: LD_INT 4
44798: DOUBLE
44799: EQUAL
44800: IFTRUE 44804
44802: GO 44830
44804: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44805: LD_ADDR_VAR 0 3
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: LD_INT 3
44815: PUSH
44816: LD_INT 4
44818: PUSH
44819: LD_INT 5
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: ST_TO_ADDR
44828: GO 45721
44830: LD_INT 5
44832: DOUBLE
44833: EQUAL
44834: IFTRUE 44838
44836: GO 44864
44838: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44839: LD_ADDR_VAR 0 3
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: LD_INT 3
44849: PUSH
44850: LD_INT 4
44852: PUSH
44853: LD_INT 5
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: ST_TO_ADDR
44862: GO 45721
44864: LD_INT 9
44866: DOUBLE
44867: EQUAL
44868: IFTRUE 44872
44870: GO 44898
44872: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44873: LD_ADDR_VAR 0 3
44877: PUSH
44878: LD_INT 2
44880: PUSH
44881: LD_INT 3
44883: PUSH
44884: LD_INT 4
44886: PUSH
44887: LD_INT 5
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: ST_TO_ADDR
44896: GO 45721
44898: LD_INT 7
44900: DOUBLE
44901: EQUAL
44902: IFTRUE 44906
44904: GO 44932
44906: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44907: LD_ADDR_VAR 0 3
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 3
44917: PUSH
44918: LD_INT 4
44920: PUSH
44921: LD_INT 5
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: ST_TO_ADDR
44930: GO 45721
44932: LD_INT 12
44934: DOUBLE
44935: EQUAL
44936: IFTRUE 44940
44938: GO 44966
44940: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44941: LD_ADDR_VAR 0 3
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: LD_INT 3
44951: PUSH
44952: LD_INT 4
44954: PUSH
44955: LD_INT 5
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: ST_TO_ADDR
44964: GO 45721
44966: LD_INT 13
44968: DOUBLE
44969: EQUAL
44970: IFTRUE 44974
44972: GO 45000
44974: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44975: LD_ADDR_VAR 0 3
44979: PUSH
44980: LD_INT 2
44982: PUSH
44983: LD_INT 3
44985: PUSH
44986: LD_INT 4
44988: PUSH
44989: LD_INT 5
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: ST_TO_ADDR
44998: GO 45721
45000: LD_INT 14
45002: DOUBLE
45003: EQUAL
45004: IFTRUE 45008
45006: GO 45026
45008: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45009: LD_ADDR_VAR 0 3
45013: PUSH
45014: LD_INT 4
45016: PUSH
45017: LD_INT 5
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: ST_TO_ADDR
45024: GO 45721
45026: LD_INT 6
45028: DOUBLE
45029: EQUAL
45030: IFTRUE 45034
45032: GO 45052
45034: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45035: LD_ADDR_VAR 0 3
45039: PUSH
45040: LD_INT 4
45042: PUSH
45043: LD_INT 5
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: ST_TO_ADDR
45050: GO 45721
45052: LD_INT 10
45054: DOUBLE
45055: EQUAL
45056: IFTRUE 45060
45058: GO 45078
45060: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45061: LD_ADDR_VAR 0 3
45065: PUSH
45066: LD_INT 4
45068: PUSH
45069: LD_INT 5
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: ST_TO_ADDR
45076: GO 45721
45078: LD_INT 22
45080: DOUBLE
45081: EQUAL
45082: IFTRUE 45086
45084: GO 45112
45086: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45087: LD_ADDR_VAR 0 3
45091: PUSH
45092: LD_INT 11
45094: PUSH
45095: LD_INT 12
45097: PUSH
45098: LD_INT 13
45100: PUSH
45101: LD_INT 14
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: ST_TO_ADDR
45110: GO 45721
45112: LD_INT 23
45114: DOUBLE
45115: EQUAL
45116: IFTRUE 45120
45118: GO 45146
45120: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45121: LD_ADDR_VAR 0 3
45125: PUSH
45126: LD_INT 11
45128: PUSH
45129: LD_INT 12
45131: PUSH
45132: LD_INT 13
45134: PUSH
45135: LD_INT 14
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: ST_TO_ADDR
45144: GO 45721
45146: LD_INT 24
45148: DOUBLE
45149: EQUAL
45150: IFTRUE 45154
45152: GO 45180
45154: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45155: LD_ADDR_VAR 0 3
45159: PUSH
45160: LD_INT 11
45162: PUSH
45163: LD_INT 12
45165: PUSH
45166: LD_INT 13
45168: PUSH
45169: LD_INT 14
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: ST_TO_ADDR
45178: GO 45721
45180: LD_INT 30
45182: DOUBLE
45183: EQUAL
45184: IFTRUE 45188
45186: GO 45214
45188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45189: LD_ADDR_VAR 0 3
45193: PUSH
45194: LD_INT 11
45196: PUSH
45197: LD_INT 12
45199: PUSH
45200: LD_INT 13
45202: PUSH
45203: LD_INT 14
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: ST_TO_ADDR
45212: GO 45721
45214: LD_INT 25
45216: DOUBLE
45217: EQUAL
45218: IFTRUE 45222
45220: GO 45240
45222: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45223: LD_ADDR_VAR 0 3
45227: PUSH
45228: LD_INT 13
45230: PUSH
45231: LD_INT 14
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: ST_TO_ADDR
45238: GO 45721
45240: LD_INT 27
45242: DOUBLE
45243: EQUAL
45244: IFTRUE 45248
45246: GO 45266
45248: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45249: LD_ADDR_VAR 0 3
45253: PUSH
45254: LD_INT 13
45256: PUSH
45257: LD_INT 14
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: ST_TO_ADDR
45264: GO 45721
45266: LD_INT 92
45268: DOUBLE
45269: EQUAL
45270: IFTRUE 45274
45272: GO 45300
45274: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45275: LD_ADDR_VAR 0 3
45279: PUSH
45280: LD_INT 11
45282: PUSH
45283: LD_INT 12
45285: PUSH
45286: LD_INT 13
45288: PUSH
45289: LD_INT 14
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: ST_TO_ADDR
45298: GO 45721
45300: LD_INT 28
45302: DOUBLE
45303: EQUAL
45304: IFTRUE 45308
45306: GO 45326
45308: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45309: LD_ADDR_VAR 0 3
45313: PUSH
45314: LD_INT 13
45316: PUSH
45317: LD_INT 14
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: ST_TO_ADDR
45324: GO 45721
45326: LD_INT 29
45328: DOUBLE
45329: EQUAL
45330: IFTRUE 45334
45332: GO 45352
45334: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45335: LD_ADDR_VAR 0 3
45339: PUSH
45340: LD_INT 13
45342: PUSH
45343: LD_INT 14
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: ST_TO_ADDR
45350: GO 45721
45352: LD_INT 31
45354: DOUBLE
45355: EQUAL
45356: IFTRUE 45360
45358: GO 45378
45360: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45361: LD_ADDR_VAR 0 3
45365: PUSH
45366: LD_INT 13
45368: PUSH
45369: LD_INT 14
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: ST_TO_ADDR
45376: GO 45721
45378: LD_INT 26
45380: DOUBLE
45381: EQUAL
45382: IFTRUE 45386
45384: GO 45404
45386: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45387: LD_ADDR_VAR 0 3
45391: PUSH
45392: LD_INT 13
45394: PUSH
45395: LD_INT 14
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: ST_TO_ADDR
45402: GO 45721
45404: LD_INT 42
45406: DOUBLE
45407: EQUAL
45408: IFTRUE 45412
45410: GO 45438
45412: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45413: LD_ADDR_VAR 0 3
45417: PUSH
45418: LD_INT 21
45420: PUSH
45421: LD_INT 22
45423: PUSH
45424: LD_INT 23
45426: PUSH
45427: LD_INT 24
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: ST_TO_ADDR
45436: GO 45721
45438: LD_INT 43
45440: DOUBLE
45441: EQUAL
45442: IFTRUE 45446
45444: GO 45472
45446: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45447: LD_ADDR_VAR 0 3
45451: PUSH
45452: LD_INT 21
45454: PUSH
45455: LD_INT 22
45457: PUSH
45458: LD_INT 23
45460: PUSH
45461: LD_INT 24
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: ST_TO_ADDR
45470: GO 45721
45472: LD_INT 44
45474: DOUBLE
45475: EQUAL
45476: IFTRUE 45480
45478: GO 45506
45480: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45481: LD_ADDR_VAR 0 3
45485: PUSH
45486: LD_INT 21
45488: PUSH
45489: LD_INT 22
45491: PUSH
45492: LD_INT 23
45494: PUSH
45495: LD_INT 24
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: ST_TO_ADDR
45504: GO 45721
45506: LD_INT 45
45508: DOUBLE
45509: EQUAL
45510: IFTRUE 45514
45512: GO 45540
45514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45515: LD_ADDR_VAR 0 3
45519: PUSH
45520: LD_INT 21
45522: PUSH
45523: LD_INT 22
45525: PUSH
45526: LD_INT 23
45528: PUSH
45529: LD_INT 24
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: ST_TO_ADDR
45538: GO 45721
45540: LD_INT 49
45542: DOUBLE
45543: EQUAL
45544: IFTRUE 45548
45546: GO 45574
45548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45549: LD_ADDR_VAR 0 3
45553: PUSH
45554: LD_INT 21
45556: PUSH
45557: LD_INT 22
45559: PUSH
45560: LD_INT 23
45562: PUSH
45563: LD_INT 24
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: ST_TO_ADDR
45572: GO 45721
45574: LD_INT 51
45576: DOUBLE
45577: EQUAL
45578: IFTRUE 45582
45580: GO 45608
45582: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45583: LD_ADDR_VAR 0 3
45587: PUSH
45588: LD_INT 21
45590: PUSH
45591: LD_INT 22
45593: PUSH
45594: LD_INT 23
45596: PUSH
45597: LD_INT 24
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: ST_TO_ADDR
45606: GO 45721
45608: LD_INT 52
45610: DOUBLE
45611: EQUAL
45612: IFTRUE 45616
45614: GO 45642
45616: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45617: LD_ADDR_VAR 0 3
45621: PUSH
45622: LD_INT 21
45624: PUSH
45625: LD_INT 22
45627: PUSH
45628: LD_INT 23
45630: PUSH
45631: LD_INT 24
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: ST_TO_ADDR
45640: GO 45721
45642: LD_INT 53
45644: DOUBLE
45645: EQUAL
45646: IFTRUE 45650
45648: GO 45668
45650: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45651: LD_ADDR_VAR 0 3
45655: PUSH
45656: LD_INT 23
45658: PUSH
45659: LD_INT 24
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: ST_TO_ADDR
45666: GO 45721
45668: LD_INT 46
45670: DOUBLE
45671: EQUAL
45672: IFTRUE 45676
45674: GO 45694
45676: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45677: LD_ADDR_VAR 0 3
45681: PUSH
45682: LD_INT 23
45684: PUSH
45685: LD_INT 24
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: ST_TO_ADDR
45692: GO 45721
45694: LD_INT 47
45696: DOUBLE
45697: EQUAL
45698: IFTRUE 45702
45700: GO 45720
45702: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45703: LD_ADDR_VAR 0 3
45707: PUSH
45708: LD_INT 23
45710: PUSH
45711: LD_INT 24
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: ST_TO_ADDR
45718: GO 45721
45720: POP
// result := ( chassis in result ) ;
45721: LD_ADDR_VAR 0 3
45725: PUSH
45726: LD_VAR 0 1
45730: PUSH
45731: LD_VAR 0 3
45735: IN
45736: ST_TO_ADDR
// end ;
45737: LD_VAR 0 3
45741: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45742: LD_INT 0
45744: PPUSH
45745: PPUSH
45746: PPUSH
45747: PPUSH
45748: PPUSH
45749: PPUSH
45750: PPUSH
// result := array ;
45751: LD_ADDR_VAR 0 5
45755: PUSH
45756: LD_VAR 0 1
45760: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45761: LD_VAR 0 1
45765: NOT
45766: PUSH
45767: LD_VAR 0 2
45771: NOT
45772: OR
45773: PUSH
45774: LD_VAR 0 3
45778: NOT
45779: OR
45780: PUSH
45781: LD_VAR 0 2
45785: PUSH
45786: LD_VAR 0 1
45790: GREATER
45791: OR
45792: PUSH
45793: LD_VAR 0 3
45797: PUSH
45798: LD_VAR 0 1
45802: GREATER
45803: OR
45804: IFFALSE 45808
// exit ;
45806: GO 46104
// if direction then
45808: LD_VAR 0 4
45812: IFFALSE 45876
// begin d := 1 ;
45814: LD_ADDR_VAR 0 9
45818: PUSH
45819: LD_INT 1
45821: ST_TO_ADDR
// if i_from > i_to then
45822: LD_VAR 0 2
45826: PUSH
45827: LD_VAR 0 3
45831: GREATER
45832: IFFALSE 45858
// length := ( array - i_from ) + i_to else
45834: LD_ADDR_VAR 0 11
45838: PUSH
45839: LD_VAR 0 1
45843: PUSH
45844: LD_VAR 0 2
45848: MINUS
45849: PUSH
45850: LD_VAR 0 3
45854: PLUS
45855: ST_TO_ADDR
45856: GO 45874
// length := i_to - i_from ;
45858: LD_ADDR_VAR 0 11
45862: PUSH
45863: LD_VAR 0 3
45867: PUSH
45868: LD_VAR 0 2
45872: MINUS
45873: ST_TO_ADDR
// end else
45874: GO 45937
// begin d := - 1 ;
45876: LD_ADDR_VAR 0 9
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: ST_TO_ADDR
// if i_from > i_to then
45885: LD_VAR 0 2
45889: PUSH
45890: LD_VAR 0 3
45894: GREATER
45895: IFFALSE 45915
// length := i_from - i_to else
45897: LD_ADDR_VAR 0 11
45901: PUSH
45902: LD_VAR 0 2
45906: PUSH
45907: LD_VAR 0 3
45911: MINUS
45912: ST_TO_ADDR
45913: GO 45937
// length := ( array - i_to ) + i_from ;
45915: LD_ADDR_VAR 0 11
45919: PUSH
45920: LD_VAR 0 1
45924: PUSH
45925: LD_VAR 0 3
45929: MINUS
45930: PUSH
45931: LD_VAR 0 2
45935: PLUS
45936: ST_TO_ADDR
// end ; if not length then
45937: LD_VAR 0 11
45941: NOT
45942: IFFALSE 45946
// exit ;
45944: GO 46104
// tmp := array ;
45946: LD_ADDR_VAR 0 10
45950: PUSH
45951: LD_VAR 0 1
45955: ST_TO_ADDR
// for i = 1 to length do
45956: LD_ADDR_VAR 0 6
45960: PUSH
45961: DOUBLE
45962: LD_INT 1
45964: DEC
45965: ST_TO_ADDR
45966: LD_VAR 0 11
45970: PUSH
45971: FOR_TO
45972: IFFALSE 46092
// begin for j = 1 to array do
45974: LD_ADDR_VAR 0 7
45978: PUSH
45979: DOUBLE
45980: LD_INT 1
45982: DEC
45983: ST_TO_ADDR
45984: LD_VAR 0 1
45988: PUSH
45989: FOR_TO
45990: IFFALSE 46078
// begin k := j + d ;
45992: LD_ADDR_VAR 0 8
45996: PUSH
45997: LD_VAR 0 7
46001: PUSH
46002: LD_VAR 0 9
46006: PLUS
46007: ST_TO_ADDR
// if k > array then
46008: LD_VAR 0 8
46012: PUSH
46013: LD_VAR 0 1
46017: GREATER
46018: IFFALSE 46028
// k := 1 ;
46020: LD_ADDR_VAR 0 8
46024: PUSH
46025: LD_INT 1
46027: ST_TO_ADDR
// if not k then
46028: LD_VAR 0 8
46032: NOT
46033: IFFALSE 46045
// k := array ;
46035: LD_ADDR_VAR 0 8
46039: PUSH
46040: LD_VAR 0 1
46044: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46045: LD_ADDR_VAR 0 10
46049: PUSH
46050: LD_VAR 0 10
46054: PPUSH
46055: LD_VAR 0 8
46059: PPUSH
46060: LD_VAR 0 1
46064: PUSH
46065: LD_VAR 0 7
46069: ARRAY
46070: PPUSH
46071: CALL_OW 1
46075: ST_TO_ADDR
// end ;
46076: GO 45989
46078: POP
46079: POP
// array := tmp ;
46080: LD_ADDR_VAR 0 1
46084: PUSH
46085: LD_VAR 0 10
46089: ST_TO_ADDR
// end ;
46090: GO 45971
46092: POP
46093: POP
// result := array ;
46094: LD_ADDR_VAR 0 5
46098: PUSH
46099: LD_VAR 0 1
46103: ST_TO_ADDR
// end ;
46104: LD_VAR 0 5
46108: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46109: LD_INT 0
46111: PPUSH
46112: PPUSH
// result := 0 ;
46113: LD_ADDR_VAR 0 3
46117: PUSH
46118: LD_INT 0
46120: ST_TO_ADDR
// if not array or not value in array then
46121: LD_VAR 0 1
46125: NOT
46126: PUSH
46127: LD_VAR 0 2
46131: PUSH
46132: LD_VAR 0 1
46136: IN
46137: NOT
46138: OR
46139: IFFALSE 46143
// exit ;
46141: GO 46197
// for i = 1 to array do
46143: LD_ADDR_VAR 0 4
46147: PUSH
46148: DOUBLE
46149: LD_INT 1
46151: DEC
46152: ST_TO_ADDR
46153: LD_VAR 0 1
46157: PUSH
46158: FOR_TO
46159: IFFALSE 46195
// if value = array [ i ] then
46161: LD_VAR 0 2
46165: PUSH
46166: LD_VAR 0 1
46170: PUSH
46171: LD_VAR 0 4
46175: ARRAY
46176: EQUAL
46177: IFFALSE 46193
// begin result := i ;
46179: LD_ADDR_VAR 0 3
46183: PUSH
46184: LD_VAR 0 4
46188: ST_TO_ADDR
// exit ;
46189: POP
46190: POP
46191: GO 46197
// end ;
46193: GO 46158
46195: POP
46196: POP
// end ;
46197: LD_VAR 0 3
46201: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46202: LD_INT 0
46204: PPUSH
// vc_chassis := chassis ;
46205: LD_ADDR_OWVAR 37
46209: PUSH
46210: LD_VAR 0 1
46214: ST_TO_ADDR
// vc_engine := engine ;
46215: LD_ADDR_OWVAR 39
46219: PUSH
46220: LD_VAR 0 2
46224: ST_TO_ADDR
// vc_control := control ;
46225: LD_ADDR_OWVAR 38
46229: PUSH
46230: LD_VAR 0 3
46234: ST_TO_ADDR
// vc_weapon := weapon ;
46235: LD_ADDR_OWVAR 40
46239: PUSH
46240: LD_VAR 0 4
46244: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46245: LD_ADDR_OWVAR 41
46249: PUSH
46250: LD_VAR 0 5
46254: ST_TO_ADDR
// end ;
46255: LD_VAR 0 6
46259: RET
// export function WantPlant ( unit ) ; var task ; begin
46260: LD_INT 0
46262: PPUSH
46263: PPUSH
// result := false ;
46264: LD_ADDR_VAR 0 2
46268: PUSH
46269: LD_INT 0
46271: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46272: LD_ADDR_VAR 0 3
46276: PUSH
46277: LD_VAR 0 1
46281: PPUSH
46282: CALL_OW 437
46286: ST_TO_ADDR
// if task then
46287: LD_VAR 0 3
46291: IFFALSE 46319
// if task [ 1 ] [ 1 ] = p then
46293: LD_VAR 0 3
46297: PUSH
46298: LD_INT 1
46300: ARRAY
46301: PUSH
46302: LD_INT 1
46304: ARRAY
46305: PUSH
46306: LD_STRING p
46308: EQUAL
46309: IFFALSE 46319
// result := true ;
46311: LD_ADDR_VAR 0 2
46315: PUSH
46316: LD_INT 1
46318: ST_TO_ADDR
// end ;
46319: LD_VAR 0 2
46323: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46324: LD_INT 0
46326: PPUSH
46327: PPUSH
46328: PPUSH
46329: PPUSH
// if pos < 1 then
46330: LD_VAR 0 2
46334: PUSH
46335: LD_INT 1
46337: LESS
46338: IFFALSE 46342
// exit ;
46340: GO 46645
// if pos = 1 then
46342: LD_VAR 0 2
46346: PUSH
46347: LD_INT 1
46349: EQUAL
46350: IFFALSE 46383
// result := Replace ( arr , pos [ 1 ] , value ) else
46352: LD_ADDR_VAR 0 4
46356: PUSH
46357: LD_VAR 0 1
46361: PPUSH
46362: LD_VAR 0 2
46366: PUSH
46367: LD_INT 1
46369: ARRAY
46370: PPUSH
46371: LD_VAR 0 3
46375: PPUSH
46376: CALL_OW 1
46380: ST_TO_ADDR
46381: GO 46645
// begin tmp := arr ;
46383: LD_ADDR_VAR 0 6
46387: PUSH
46388: LD_VAR 0 1
46392: ST_TO_ADDR
// s_arr := [ tmp ] ;
46393: LD_ADDR_VAR 0 7
46397: PUSH
46398: LD_VAR 0 6
46402: PUSH
46403: EMPTY
46404: LIST
46405: ST_TO_ADDR
// for i = 1 to pos - 1 do
46406: LD_ADDR_VAR 0 5
46410: PUSH
46411: DOUBLE
46412: LD_INT 1
46414: DEC
46415: ST_TO_ADDR
46416: LD_VAR 0 2
46420: PUSH
46421: LD_INT 1
46423: MINUS
46424: PUSH
46425: FOR_TO
46426: IFFALSE 46471
// begin tmp := tmp [ pos [ i ] ] ;
46428: LD_ADDR_VAR 0 6
46432: PUSH
46433: LD_VAR 0 6
46437: PUSH
46438: LD_VAR 0 2
46442: PUSH
46443: LD_VAR 0 5
46447: ARRAY
46448: ARRAY
46449: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46450: LD_ADDR_VAR 0 7
46454: PUSH
46455: LD_VAR 0 7
46459: PUSH
46460: LD_VAR 0 6
46464: PUSH
46465: EMPTY
46466: LIST
46467: ADD
46468: ST_TO_ADDR
// end ;
46469: GO 46425
46471: POP
46472: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46473: LD_ADDR_VAR 0 6
46477: PUSH
46478: LD_VAR 0 6
46482: PPUSH
46483: LD_VAR 0 2
46487: PUSH
46488: LD_VAR 0 2
46492: ARRAY
46493: PPUSH
46494: LD_VAR 0 3
46498: PPUSH
46499: CALL_OW 1
46503: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46504: LD_ADDR_VAR 0 7
46508: PUSH
46509: LD_VAR 0 7
46513: PPUSH
46514: LD_VAR 0 7
46518: PPUSH
46519: LD_VAR 0 6
46523: PPUSH
46524: CALL_OW 1
46528: ST_TO_ADDR
// for i = s_arr downto 2 do
46529: LD_ADDR_VAR 0 5
46533: PUSH
46534: DOUBLE
46535: LD_VAR 0 7
46539: INC
46540: ST_TO_ADDR
46541: LD_INT 2
46543: PUSH
46544: FOR_DOWNTO
46545: IFFALSE 46629
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46547: LD_ADDR_VAR 0 6
46551: PUSH
46552: LD_VAR 0 7
46556: PUSH
46557: LD_VAR 0 5
46561: PUSH
46562: LD_INT 1
46564: MINUS
46565: ARRAY
46566: PPUSH
46567: LD_VAR 0 2
46571: PUSH
46572: LD_VAR 0 5
46576: PUSH
46577: LD_INT 1
46579: MINUS
46580: ARRAY
46581: PPUSH
46582: LD_VAR 0 7
46586: PUSH
46587: LD_VAR 0 5
46591: ARRAY
46592: PPUSH
46593: CALL_OW 1
46597: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46598: LD_ADDR_VAR 0 7
46602: PUSH
46603: LD_VAR 0 7
46607: PPUSH
46608: LD_VAR 0 5
46612: PUSH
46613: LD_INT 1
46615: MINUS
46616: PPUSH
46617: LD_VAR 0 6
46621: PPUSH
46622: CALL_OW 1
46626: ST_TO_ADDR
// end ;
46627: GO 46544
46629: POP
46630: POP
// result := s_arr [ 1 ] ;
46631: LD_ADDR_VAR 0 4
46635: PUSH
46636: LD_VAR 0 7
46640: PUSH
46641: LD_INT 1
46643: ARRAY
46644: ST_TO_ADDR
// end ; end ;
46645: LD_VAR 0 4
46649: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46650: LD_INT 0
46652: PPUSH
46653: PPUSH
// if not list then
46654: LD_VAR 0 1
46658: NOT
46659: IFFALSE 46663
// exit ;
46661: GO 46754
// i := list [ pos1 ] ;
46663: LD_ADDR_VAR 0 5
46667: PUSH
46668: LD_VAR 0 1
46672: PUSH
46673: LD_VAR 0 2
46677: ARRAY
46678: ST_TO_ADDR
// if not i then
46679: LD_VAR 0 5
46683: NOT
46684: IFFALSE 46688
// exit ;
46686: GO 46754
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46688: LD_ADDR_VAR 0 1
46692: PUSH
46693: LD_VAR 0 1
46697: PPUSH
46698: LD_VAR 0 2
46702: PPUSH
46703: LD_VAR 0 1
46707: PUSH
46708: LD_VAR 0 3
46712: ARRAY
46713: PPUSH
46714: CALL_OW 1
46718: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46719: LD_ADDR_VAR 0 1
46723: PUSH
46724: LD_VAR 0 1
46728: PPUSH
46729: LD_VAR 0 3
46733: PPUSH
46734: LD_VAR 0 5
46738: PPUSH
46739: CALL_OW 1
46743: ST_TO_ADDR
// result := list ;
46744: LD_ADDR_VAR 0 4
46748: PUSH
46749: LD_VAR 0 1
46753: ST_TO_ADDR
// end ;
46754: LD_VAR 0 4
46758: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46759: LD_INT 0
46761: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46762: LD_ADDR_VAR 0 5
46766: PUSH
46767: LD_VAR 0 1
46771: PPUSH
46772: CALL_OW 250
46776: PPUSH
46777: LD_VAR 0 1
46781: PPUSH
46782: CALL_OW 251
46786: PPUSH
46787: LD_VAR 0 2
46791: PPUSH
46792: LD_VAR 0 3
46796: PPUSH
46797: LD_VAR 0 4
46801: PPUSH
46802: CALL 46812 0 5
46806: ST_TO_ADDR
// end ;
46807: LD_VAR 0 5
46811: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46812: LD_INT 0
46814: PPUSH
46815: PPUSH
46816: PPUSH
46817: PPUSH
// if not list then
46818: LD_VAR 0 3
46822: NOT
46823: IFFALSE 46827
// exit ;
46825: GO 47215
// result := [ ] ;
46827: LD_ADDR_VAR 0 6
46831: PUSH
46832: EMPTY
46833: ST_TO_ADDR
// for i in list do
46834: LD_ADDR_VAR 0 7
46838: PUSH
46839: LD_VAR 0 3
46843: PUSH
46844: FOR_IN
46845: IFFALSE 47047
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46847: LD_ADDR_VAR 0 9
46851: PUSH
46852: LD_VAR 0 7
46856: PPUSH
46857: LD_VAR 0 1
46861: PPUSH
46862: LD_VAR 0 2
46866: PPUSH
46867: CALL_OW 297
46871: ST_TO_ADDR
// if not result then
46872: LD_VAR 0 6
46876: NOT
46877: IFFALSE 46903
// result := [ [ i , tmp ] ] else
46879: LD_ADDR_VAR 0 6
46883: PUSH
46884: LD_VAR 0 7
46888: PUSH
46889: LD_VAR 0 9
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: EMPTY
46899: LIST
46900: ST_TO_ADDR
46901: GO 47045
// begin if result [ result ] [ 2 ] < tmp then
46903: LD_VAR 0 6
46907: PUSH
46908: LD_VAR 0 6
46912: ARRAY
46913: PUSH
46914: LD_INT 2
46916: ARRAY
46917: PUSH
46918: LD_VAR 0 9
46922: LESS
46923: IFFALSE 46965
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46925: LD_ADDR_VAR 0 6
46929: PUSH
46930: LD_VAR 0 6
46934: PPUSH
46935: LD_VAR 0 6
46939: PUSH
46940: LD_INT 1
46942: PLUS
46943: PPUSH
46944: LD_VAR 0 7
46948: PUSH
46949: LD_VAR 0 9
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PPUSH
46958: CALL_OW 2
46962: ST_TO_ADDR
46963: GO 47045
// for j = 1 to result do
46965: LD_ADDR_VAR 0 8
46969: PUSH
46970: DOUBLE
46971: LD_INT 1
46973: DEC
46974: ST_TO_ADDR
46975: LD_VAR 0 6
46979: PUSH
46980: FOR_TO
46981: IFFALSE 47043
// begin if tmp < result [ j ] [ 2 ] then
46983: LD_VAR 0 9
46987: PUSH
46988: LD_VAR 0 6
46992: PUSH
46993: LD_VAR 0 8
46997: ARRAY
46998: PUSH
46999: LD_INT 2
47001: ARRAY
47002: LESS
47003: IFFALSE 47041
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47005: LD_ADDR_VAR 0 6
47009: PUSH
47010: LD_VAR 0 6
47014: PPUSH
47015: LD_VAR 0 8
47019: PPUSH
47020: LD_VAR 0 7
47024: PUSH
47025: LD_VAR 0 9
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PPUSH
47034: CALL_OW 2
47038: ST_TO_ADDR
// break ;
47039: GO 47043
// end ; end ;
47041: GO 46980
47043: POP
47044: POP
// end ; end ;
47045: GO 46844
47047: POP
47048: POP
// if result and not asc then
47049: LD_VAR 0 6
47053: PUSH
47054: LD_VAR 0 4
47058: NOT
47059: AND
47060: IFFALSE 47135
// begin tmp := result ;
47062: LD_ADDR_VAR 0 9
47066: PUSH
47067: LD_VAR 0 6
47071: ST_TO_ADDR
// for i = tmp downto 1 do
47072: LD_ADDR_VAR 0 7
47076: PUSH
47077: DOUBLE
47078: LD_VAR 0 9
47082: INC
47083: ST_TO_ADDR
47084: LD_INT 1
47086: PUSH
47087: FOR_DOWNTO
47088: IFFALSE 47133
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47090: LD_ADDR_VAR 0 6
47094: PUSH
47095: LD_VAR 0 6
47099: PPUSH
47100: LD_VAR 0 9
47104: PUSH
47105: LD_VAR 0 7
47109: MINUS
47110: PUSH
47111: LD_INT 1
47113: PLUS
47114: PPUSH
47115: LD_VAR 0 9
47119: PUSH
47120: LD_VAR 0 7
47124: ARRAY
47125: PPUSH
47126: CALL_OW 1
47130: ST_TO_ADDR
47131: GO 47087
47133: POP
47134: POP
// end ; tmp := [ ] ;
47135: LD_ADDR_VAR 0 9
47139: PUSH
47140: EMPTY
47141: ST_TO_ADDR
// if mode then
47142: LD_VAR 0 5
47146: IFFALSE 47215
// begin for i = 1 to result do
47148: LD_ADDR_VAR 0 7
47152: PUSH
47153: DOUBLE
47154: LD_INT 1
47156: DEC
47157: ST_TO_ADDR
47158: LD_VAR 0 6
47162: PUSH
47163: FOR_TO
47164: IFFALSE 47203
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47166: LD_ADDR_VAR 0 9
47170: PUSH
47171: LD_VAR 0 9
47175: PPUSH
47176: LD_VAR 0 7
47180: PPUSH
47181: LD_VAR 0 6
47185: PUSH
47186: LD_VAR 0 7
47190: ARRAY
47191: PUSH
47192: LD_INT 1
47194: ARRAY
47195: PPUSH
47196: CALL_OW 1
47200: ST_TO_ADDR
47201: GO 47163
47203: POP
47204: POP
// result := tmp ;
47205: LD_ADDR_VAR 0 6
47209: PUSH
47210: LD_VAR 0 9
47214: ST_TO_ADDR
// end ; end ;
47215: LD_VAR 0 6
47219: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47220: LD_INT 0
47222: PPUSH
47223: PPUSH
47224: PPUSH
47225: PPUSH
47226: PPUSH
47227: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47228: LD_ADDR_VAR 0 5
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: ST_TO_ADDR
// if not x or not y then
47250: LD_VAR 0 2
47254: NOT
47255: PUSH
47256: LD_VAR 0 3
47260: NOT
47261: OR
47262: IFFALSE 47266
// exit ;
47264: GO 48916
// if not range then
47266: LD_VAR 0 4
47270: NOT
47271: IFFALSE 47281
// range := 10 ;
47273: LD_ADDR_VAR 0 4
47277: PUSH
47278: LD_INT 10
47280: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47281: LD_ADDR_VAR 0 8
47285: PUSH
47286: LD_INT 81
47288: PUSH
47289: LD_VAR 0 1
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 92
47300: PUSH
47301: LD_VAR 0 2
47305: PUSH
47306: LD_VAR 0 3
47310: PUSH
47311: LD_VAR 0 4
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 3
47324: PUSH
47325: LD_INT 21
47327: PUSH
47328: LD_INT 3
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: LIST
47343: PPUSH
47344: CALL_OW 69
47348: ST_TO_ADDR
// if not tmp then
47349: LD_VAR 0 8
47353: NOT
47354: IFFALSE 47358
// exit ;
47356: GO 48916
// for i in tmp do
47358: LD_ADDR_VAR 0 6
47362: PUSH
47363: LD_VAR 0 8
47367: PUSH
47368: FOR_IN
47369: IFFALSE 48891
// begin points := [ 0 , 0 , 0 ] ;
47371: LD_ADDR_VAR 0 9
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: LIST
47389: ST_TO_ADDR
// bpoints := 1 ;
47390: LD_ADDR_VAR 0 10
47394: PUSH
47395: LD_INT 1
47397: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47398: LD_VAR 0 6
47402: PPUSH
47403: CALL_OW 247
47407: PUSH
47408: LD_INT 1
47410: DOUBLE
47411: EQUAL
47412: IFTRUE 47416
47414: GO 47994
47416: POP
// begin if GetClass ( i ) = 1 then
47417: LD_VAR 0 6
47421: PPUSH
47422: CALL_OW 257
47426: PUSH
47427: LD_INT 1
47429: EQUAL
47430: IFFALSE 47451
// points := [ 10 , 5 , 3 ] ;
47432: LD_ADDR_VAR 0 9
47436: PUSH
47437: LD_INT 10
47439: PUSH
47440: LD_INT 5
47442: PUSH
47443: LD_INT 3
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: LIST
47450: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47451: LD_VAR 0 6
47455: PPUSH
47456: CALL_OW 257
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: LD_INT 3
47466: PUSH
47467: LD_INT 4
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: LIST
47474: IN
47475: IFFALSE 47496
// points := [ 3 , 2 , 1 ] ;
47477: LD_ADDR_VAR 0 9
47481: PUSH
47482: LD_INT 3
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: LIST
47495: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47496: LD_VAR 0 6
47500: PPUSH
47501: CALL_OW 257
47505: PUSH
47506: LD_INT 5
47508: EQUAL
47509: IFFALSE 47530
// points := [ 130 , 5 , 2 ] ;
47511: LD_ADDR_VAR 0 9
47515: PUSH
47516: LD_INT 130
47518: PUSH
47519: LD_INT 5
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: LIST
47529: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47530: LD_VAR 0 6
47534: PPUSH
47535: CALL_OW 257
47539: PUSH
47540: LD_INT 8
47542: EQUAL
47543: IFFALSE 47564
// points := [ 35 , 35 , 30 ] ;
47545: LD_ADDR_VAR 0 9
47549: PUSH
47550: LD_INT 35
47552: PUSH
47553: LD_INT 35
47555: PUSH
47556: LD_INT 30
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: LIST
47563: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47564: LD_VAR 0 6
47568: PPUSH
47569: CALL_OW 257
47573: PUSH
47574: LD_INT 9
47576: EQUAL
47577: IFFALSE 47598
// points := [ 20 , 55 , 40 ] ;
47579: LD_ADDR_VAR 0 9
47583: PUSH
47584: LD_INT 20
47586: PUSH
47587: LD_INT 55
47589: PUSH
47590: LD_INT 40
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: LIST
47597: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47598: LD_VAR 0 6
47602: PPUSH
47603: CALL_OW 257
47607: PUSH
47608: LD_INT 12
47610: PUSH
47611: LD_INT 16
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: IN
47618: IFFALSE 47639
// points := [ 5 , 3 , 2 ] ;
47620: LD_ADDR_VAR 0 9
47624: PUSH
47625: LD_INT 5
47627: PUSH
47628: LD_INT 3
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: LIST
47638: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47639: LD_VAR 0 6
47643: PPUSH
47644: CALL_OW 257
47648: PUSH
47649: LD_INT 17
47651: EQUAL
47652: IFFALSE 47673
// points := [ 100 , 50 , 75 ] ;
47654: LD_ADDR_VAR 0 9
47658: PUSH
47659: LD_INT 100
47661: PUSH
47662: LD_INT 50
47664: PUSH
47665: LD_INT 75
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: LIST
47672: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47673: LD_VAR 0 6
47677: PPUSH
47678: CALL_OW 257
47682: PUSH
47683: LD_INT 15
47685: EQUAL
47686: IFFALSE 47707
// points := [ 10 , 5 , 3 ] ;
47688: LD_ADDR_VAR 0 9
47692: PUSH
47693: LD_INT 10
47695: PUSH
47696: LD_INT 5
47698: PUSH
47699: LD_INT 3
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: LIST
47706: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47707: LD_VAR 0 6
47711: PPUSH
47712: CALL_OW 257
47716: PUSH
47717: LD_INT 14
47719: EQUAL
47720: IFFALSE 47741
// points := [ 10 , 0 , 0 ] ;
47722: LD_ADDR_VAR 0 9
47726: PUSH
47727: LD_INT 10
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: LIST
47740: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47741: LD_VAR 0 6
47745: PPUSH
47746: CALL_OW 257
47750: PUSH
47751: LD_INT 11
47753: EQUAL
47754: IFFALSE 47775
// points := [ 30 , 10 , 5 ] ;
47756: LD_ADDR_VAR 0 9
47760: PUSH
47761: LD_INT 30
47763: PUSH
47764: LD_INT 10
47766: PUSH
47767: LD_INT 5
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: LIST
47774: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47775: LD_VAR 0 1
47779: PPUSH
47780: LD_INT 5
47782: PPUSH
47783: CALL_OW 321
47787: PUSH
47788: LD_INT 2
47790: EQUAL
47791: IFFALSE 47808
// bpoints := bpoints * 1.8 ;
47793: LD_ADDR_VAR 0 10
47797: PUSH
47798: LD_VAR 0 10
47802: PUSH
47803: LD_REAL  1.80000000000000E+0000
47806: MUL
47807: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47808: LD_VAR 0 6
47812: PPUSH
47813: CALL_OW 257
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: LD_INT 3
47826: PUSH
47827: LD_INT 4
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: IN
47836: PUSH
47837: LD_VAR 0 1
47841: PPUSH
47842: LD_INT 51
47844: PPUSH
47845: CALL_OW 321
47849: PUSH
47850: LD_INT 2
47852: EQUAL
47853: AND
47854: IFFALSE 47871
// bpoints := bpoints * 1.2 ;
47856: LD_ADDR_VAR 0 10
47860: PUSH
47861: LD_VAR 0 10
47865: PUSH
47866: LD_REAL  1.20000000000000E+0000
47869: MUL
47870: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47871: LD_VAR 0 6
47875: PPUSH
47876: CALL_OW 257
47880: PUSH
47881: LD_INT 5
47883: PUSH
47884: LD_INT 7
47886: PUSH
47887: LD_INT 9
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: LIST
47894: IN
47895: PUSH
47896: LD_VAR 0 1
47900: PPUSH
47901: LD_INT 52
47903: PPUSH
47904: CALL_OW 321
47908: PUSH
47909: LD_INT 2
47911: EQUAL
47912: AND
47913: IFFALSE 47930
// bpoints := bpoints * 1.5 ;
47915: LD_ADDR_VAR 0 10
47919: PUSH
47920: LD_VAR 0 10
47924: PUSH
47925: LD_REAL  1.50000000000000E+0000
47928: MUL
47929: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47930: LD_VAR 0 1
47934: PPUSH
47935: LD_INT 66
47937: PPUSH
47938: CALL_OW 321
47942: PUSH
47943: LD_INT 2
47945: EQUAL
47946: IFFALSE 47963
// bpoints := bpoints * 1.1 ;
47948: LD_ADDR_VAR 0 10
47952: PUSH
47953: LD_VAR 0 10
47957: PUSH
47958: LD_REAL  1.10000000000000E+0000
47961: MUL
47962: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47963: LD_ADDR_VAR 0 10
47967: PUSH
47968: LD_VAR 0 10
47972: PUSH
47973: LD_VAR 0 6
47977: PPUSH
47978: LD_INT 1
47980: PPUSH
47981: CALL_OW 259
47985: PUSH
47986: LD_REAL  1.15000000000000E+0000
47989: MUL
47990: MUL
47991: ST_TO_ADDR
// end ; unit_vehicle :
47992: GO 48820
47994: LD_INT 2
47996: DOUBLE
47997: EQUAL
47998: IFTRUE 48002
48000: GO 48808
48002: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48003: LD_VAR 0 6
48007: PPUSH
48008: CALL_OW 264
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: LD_INT 42
48018: PUSH
48019: LD_INT 24
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: LIST
48026: IN
48027: IFFALSE 48048
// points := [ 25 , 5 , 3 ] ;
48029: LD_ADDR_VAR 0 9
48033: PUSH
48034: LD_INT 25
48036: PUSH
48037: LD_INT 5
48039: PUSH
48040: LD_INT 3
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: LIST
48047: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48048: LD_VAR 0 6
48052: PPUSH
48053: CALL_OW 264
48057: PUSH
48058: LD_INT 4
48060: PUSH
48061: LD_INT 43
48063: PUSH
48064: LD_INT 25
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: LIST
48071: IN
48072: IFFALSE 48093
// points := [ 40 , 15 , 5 ] ;
48074: LD_ADDR_VAR 0 9
48078: PUSH
48079: LD_INT 40
48081: PUSH
48082: LD_INT 15
48084: PUSH
48085: LD_INT 5
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: LIST
48092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48093: LD_VAR 0 6
48097: PPUSH
48098: CALL_OW 264
48102: PUSH
48103: LD_INT 3
48105: PUSH
48106: LD_INT 23
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: IN
48113: IFFALSE 48134
// points := [ 7 , 25 , 8 ] ;
48115: LD_ADDR_VAR 0 9
48119: PUSH
48120: LD_INT 7
48122: PUSH
48123: LD_INT 25
48125: PUSH
48126: LD_INT 8
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: LIST
48133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48134: LD_VAR 0 6
48138: PPUSH
48139: CALL_OW 264
48143: PUSH
48144: LD_INT 5
48146: PUSH
48147: LD_INT 27
48149: PUSH
48150: LD_INT 44
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: LIST
48157: IN
48158: IFFALSE 48179
// points := [ 14 , 50 , 16 ] ;
48160: LD_ADDR_VAR 0 9
48164: PUSH
48165: LD_INT 14
48167: PUSH
48168: LD_INT 50
48170: PUSH
48171: LD_INT 16
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48179: LD_VAR 0 6
48183: PPUSH
48184: CALL_OW 264
48188: PUSH
48189: LD_INT 6
48191: PUSH
48192: LD_INT 46
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: IN
48199: IFFALSE 48220
// points := [ 32 , 120 , 70 ] ;
48201: LD_ADDR_VAR 0 9
48205: PUSH
48206: LD_INT 32
48208: PUSH
48209: LD_INT 120
48211: PUSH
48212: LD_INT 70
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: LIST
48219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48220: LD_VAR 0 6
48224: PPUSH
48225: CALL_OW 264
48229: PUSH
48230: LD_INT 7
48232: PUSH
48233: LD_INT 28
48235: PUSH
48236: LD_INT 45
48238: PUSH
48239: LD_INT 92
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: IN
48248: IFFALSE 48269
// points := [ 35 , 20 , 45 ] ;
48250: LD_ADDR_VAR 0 9
48254: PUSH
48255: LD_INT 35
48257: PUSH
48258: LD_INT 20
48260: PUSH
48261: LD_INT 45
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: LIST
48268: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48269: LD_VAR 0 6
48273: PPUSH
48274: CALL_OW 264
48278: PUSH
48279: LD_INT 47
48281: PUSH
48282: EMPTY
48283: LIST
48284: IN
48285: IFFALSE 48306
// points := [ 67 , 45 , 75 ] ;
48287: LD_ADDR_VAR 0 9
48291: PUSH
48292: LD_INT 67
48294: PUSH
48295: LD_INT 45
48297: PUSH
48298: LD_INT 75
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48306: LD_VAR 0 6
48310: PPUSH
48311: CALL_OW 264
48315: PUSH
48316: LD_INT 26
48318: PUSH
48319: EMPTY
48320: LIST
48321: IN
48322: IFFALSE 48343
// points := [ 120 , 30 , 80 ] ;
48324: LD_ADDR_VAR 0 9
48328: PUSH
48329: LD_INT 120
48331: PUSH
48332: LD_INT 30
48334: PUSH
48335: LD_INT 80
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: LIST
48342: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48343: LD_VAR 0 6
48347: PPUSH
48348: CALL_OW 264
48352: PUSH
48353: LD_INT 22
48355: PUSH
48356: EMPTY
48357: LIST
48358: IN
48359: IFFALSE 48380
// points := [ 40 , 1 , 1 ] ;
48361: LD_ADDR_VAR 0 9
48365: PUSH
48366: LD_INT 40
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: LIST
48379: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48380: LD_VAR 0 6
48384: PPUSH
48385: CALL_OW 264
48389: PUSH
48390: LD_INT 29
48392: PUSH
48393: EMPTY
48394: LIST
48395: IN
48396: IFFALSE 48417
// points := [ 70 , 200 , 400 ] ;
48398: LD_ADDR_VAR 0 9
48402: PUSH
48403: LD_INT 70
48405: PUSH
48406: LD_INT 200
48408: PUSH
48409: LD_INT 400
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48417: LD_VAR 0 6
48421: PPUSH
48422: CALL_OW 264
48426: PUSH
48427: LD_INT 14
48429: PUSH
48430: LD_INT 53
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: IN
48437: IFFALSE 48458
// points := [ 40 , 10 , 20 ] ;
48439: LD_ADDR_VAR 0 9
48443: PUSH
48444: LD_INT 40
48446: PUSH
48447: LD_INT 10
48449: PUSH
48450: LD_INT 20
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: LIST
48457: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48458: LD_VAR 0 6
48462: PPUSH
48463: CALL_OW 264
48467: PUSH
48468: LD_INT 9
48470: PUSH
48471: EMPTY
48472: LIST
48473: IN
48474: IFFALSE 48495
// points := [ 5 , 70 , 20 ] ;
48476: LD_ADDR_VAR 0 9
48480: PUSH
48481: LD_INT 5
48483: PUSH
48484: LD_INT 70
48486: PUSH
48487: LD_INT 20
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: LIST
48494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48495: LD_VAR 0 6
48499: PPUSH
48500: CALL_OW 264
48504: PUSH
48505: LD_INT 10
48507: PUSH
48508: EMPTY
48509: LIST
48510: IN
48511: IFFALSE 48532
// points := [ 35 , 110 , 70 ] ;
48513: LD_ADDR_VAR 0 9
48517: PUSH
48518: LD_INT 35
48520: PUSH
48521: LD_INT 110
48523: PUSH
48524: LD_INT 70
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: LIST
48531: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48532: LD_VAR 0 6
48536: PPUSH
48537: CALL_OW 265
48541: PUSH
48542: LD_INT 25
48544: EQUAL
48545: IFFALSE 48566
// points := [ 80 , 65 , 100 ] ;
48547: LD_ADDR_VAR 0 9
48551: PUSH
48552: LD_INT 80
48554: PUSH
48555: LD_INT 65
48557: PUSH
48558: LD_INT 100
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: LIST
48565: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48566: LD_VAR 0 6
48570: PPUSH
48571: CALL_OW 263
48575: PUSH
48576: LD_INT 1
48578: EQUAL
48579: IFFALSE 48614
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48581: LD_ADDR_VAR 0 10
48585: PUSH
48586: LD_VAR 0 10
48590: PUSH
48591: LD_VAR 0 6
48595: PPUSH
48596: CALL_OW 311
48600: PPUSH
48601: LD_INT 3
48603: PPUSH
48604: CALL_OW 259
48608: PUSH
48609: LD_INT 4
48611: MUL
48612: MUL
48613: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48614: LD_VAR 0 6
48618: PPUSH
48619: CALL_OW 263
48623: PUSH
48624: LD_INT 2
48626: EQUAL
48627: IFFALSE 48678
// begin j := IsControledBy ( i ) ;
48629: LD_ADDR_VAR 0 7
48633: PUSH
48634: LD_VAR 0 6
48638: PPUSH
48639: CALL_OW 312
48643: ST_TO_ADDR
// if j then
48644: LD_VAR 0 7
48648: IFFALSE 48678
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48650: LD_ADDR_VAR 0 10
48654: PUSH
48655: LD_VAR 0 10
48659: PUSH
48660: LD_VAR 0 7
48664: PPUSH
48665: LD_INT 3
48667: PPUSH
48668: CALL_OW 259
48672: PUSH
48673: LD_INT 3
48675: MUL
48676: MUL
48677: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48678: LD_VAR 0 6
48682: PPUSH
48683: CALL_OW 264
48687: PUSH
48688: LD_INT 5
48690: PUSH
48691: LD_INT 6
48693: PUSH
48694: LD_INT 46
48696: PUSH
48697: LD_INT 44
48699: PUSH
48700: LD_INT 47
48702: PUSH
48703: LD_INT 45
48705: PUSH
48706: LD_INT 28
48708: PUSH
48709: LD_INT 7
48711: PUSH
48712: LD_INT 27
48714: PUSH
48715: LD_INT 29
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: IN
48730: PUSH
48731: LD_VAR 0 1
48735: PPUSH
48736: LD_INT 52
48738: PPUSH
48739: CALL_OW 321
48743: PUSH
48744: LD_INT 2
48746: EQUAL
48747: AND
48748: IFFALSE 48765
// bpoints := bpoints * 1.2 ;
48750: LD_ADDR_VAR 0 10
48754: PUSH
48755: LD_VAR 0 10
48759: PUSH
48760: LD_REAL  1.20000000000000E+0000
48763: MUL
48764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48765: LD_VAR 0 6
48769: PPUSH
48770: CALL_OW 264
48774: PUSH
48775: LD_INT 6
48777: PUSH
48778: LD_INT 46
48780: PUSH
48781: LD_INT 47
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: LIST
48788: IN
48789: IFFALSE 48806
// bpoints := bpoints * 1.2 ;
48791: LD_ADDR_VAR 0 10
48795: PUSH
48796: LD_VAR 0 10
48800: PUSH
48801: LD_REAL  1.20000000000000E+0000
48804: MUL
48805: ST_TO_ADDR
// end ; unit_building :
48806: GO 48820
48808: LD_INT 3
48810: DOUBLE
48811: EQUAL
48812: IFTRUE 48816
48814: GO 48819
48816: POP
// ; end ;
48817: GO 48820
48819: POP
// for j = 1 to 3 do
48820: LD_ADDR_VAR 0 7
48824: PUSH
48825: DOUBLE
48826: LD_INT 1
48828: DEC
48829: ST_TO_ADDR
48830: LD_INT 3
48832: PUSH
48833: FOR_TO
48834: IFFALSE 48887
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48836: LD_ADDR_VAR 0 5
48840: PUSH
48841: LD_VAR 0 5
48845: PPUSH
48846: LD_VAR 0 7
48850: PPUSH
48851: LD_VAR 0 5
48855: PUSH
48856: LD_VAR 0 7
48860: ARRAY
48861: PUSH
48862: LD_VAR 0 9
48866: PUSH
48867: LD_VAR 0 7
48871: ARRAY
48872: PUSH
48873: LD_VAR 0 10
48877: MUL
48878: PLUS
48879: PPUSH
48880: CALL_OW 1
48884: ST_TO_ADDR
48885: GO 48833
48887: POP
48888: POP
// end ;
48889: GO 47368
48891: POP
48892: POP
// result := Replace ( result , 4 , tmp ) ;
48893: LD_ADDR_VAR 0 5
48897: PUSH
48898: LD_VAR 0 5
48902: PPUSH
48903: LD_INT 4
48905: PPUSH
48906: LD_VAR 0 8
48910: PPUSH
48911: CALL_OW 1
48915: ST_TO_ADDR
// end ;
48916: LD_VAR 0 5
48920: RET
// export function DangerAtRange ( unit , range ) ; begin
48921: LD_INT 0
48923: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48924: LD_ADDR_VAR 0 3
48928: PUSH
48929: LD_VAR 0 1
48933: PPUSH
48934: CALL_OW 255
48938: PPUSH
48939: LD_VAR 0 1
48943: PPUSH
48944: CALL_OW 250
48948: PPUSH
48949: LD_VAR 0 1
48953: PPUSH
48954: CALL_OW 251
48958: PPUSH
48959: LD_VAR 0 2
48963: PPUSH
48964: CALL 47220 0 4
48968: ST_TO_ADDR
// end ;
48969: LD_VAR 0 3
48973: RET
// export function DangerInArea ( side , area ) ; begin
48974: LD_INT 0
48976: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48977: LD_ADDR_VAR 0 3
48981: PUSH
48982: LD_VAR 0 2
48986: PPUSH
48987: LD_INT 81
48989: PUSH
48990: LD_VAR 0 1
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PPUSH
48999: CALL_OW 70
49003: ST_TO_ADDR
// end ;
49004: LD_VAR 0 3
49008: RET
// export function IsExtension ( b ) ; begin
49009: LD_INT 0
49011: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49012: LD_ADDR_VAR 0 2
49016: PUSH
49017: LD_VAR 0 1
49021: PUSH
49022: LD_INT 23
49024: PUSH
49025: LD_INT 20
49027: PUSH
49028: LD_INT 22
49030: PUSH
49031: LD_INT 17
49033: PUSH
49034: LD_INT 24
49036: PUSH
49037: LD_INT 21
49039: PUSH
49040: LD_INT 19
49042: PUSH
49043: LD_INT 16
49045: PUSH
49046: LD_INT 25
49048: PUSH
49049: LD_INT 18
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: IN
49064: ST_TO_ADDR
// end ;
49065: LD_VAR 0 2
49069: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49070: LD_INT 0
49072: PPUSH
49073: PPUSH
49074: PPUSH
// result := [ ] ;
49075: LD_ADDR_VAR 0 4
49079: PUSH
49080: EMPTY
49081: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49082: LD_ADDR_VAR 0 5
49086: PUSH
49087: LD_VAR 0 2
49091: PPUSH
49092: LD_INT 21
49094: PUSH
49095: LD_INT 3
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PPUSH
49102: CALL_OW 70
49106: ST_TO_ADDR
// if not tmp then
49107: LD_VAR 0 5
49111: NOT
49112: IFFALSE 49116
// exit ;
49114: GO 49180
// if checkLink then
49116: LD_VAR 0 3
49120: IFFALSE 49170
// begin for i in tmp do
49122: LD_ADDR_VAR 0 6
49126: PUSH
49127: LD_VAR 0 5
49131: PUSH
49132: FOR_IN
49133: IFFALSE 49168
// if GetBase ( i ) <> base then
49135: LD_VAR 0 6
49139: PPUSH
49140: CALL_OW 274
49144: PUSH
49145: LD_VAR 0 1
49149: NONEQUAL
49150: IFFALSE 49166
// ComLinkToBase ( base , i ) ;
49152: LD_VAR 0 1
49156: PPUSH
49157: LD_VAR 0 6
49161: PPUSH
49162: CALL_OW 169
49166: GO 49132
49168: POP
49169: POP
// end ; result := tmp ;
49170: LD_ADDR_VAR 0 4
49174: PUSH
49175: LD_VAR 0 5
49179: ST_TO_ADDR
// end ;
49180: LD_VAR 0 4
49184: RET
// export function ComComplete ( units , b ) ; var i ; begin
49185: LD_INT 0
49187: PPUSH
49188: PPUSH
// if not units then
49189: LD_VAR 0 1
49193: NOT
49194: IFFALSE 49198
// exit ;
49196: GO 49288
// for i in units do
49198: LD_ADDR_VAR 0 4
49202: PUSH
49203: LD_VAR 0 1
49207: PUSH
49208: FOR_IN
49209: IFFALSE 49286
// if BuildingStatus ( b ) = bs_build then
49211: LD_VAR 0 2
49215: PPUSH
49216: CALL_OW 461
49220: PUSH
49221: LD_INT 1
49223: EQUAL
49224: IFFALSE 49284
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49226: LD_VAR 0 4
49230: PPUSH
49231: LD_STRING h
49233: PUSH
49234: LD_VAR 0 2
49238: PPUSH
49239: CALL_OW 250
49243: PUSH
49244: LD_VAR 0 2
49248: PPUSH
49249: CALL_OW 251
49253: PUSH
49254: LD_VAR 0 2
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: PUSH
49277: EMPTY
49278: LIST
49279: PPUSH
49280: CALL_OW 446
49284: GO 49208
49286: POP
49287: POP
// end ;
49288: LD_VAR 0 3
49292: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49293: LD_INT 0
49295: PPUSH
49296: PPUSH
49297: PPUSH
49298: PPUSH
49299: PPUSH
49300: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49301: LD_VAR 0 1
49305: NOT
49306: PUSH
49307: LD_VAR 0 1
49311: PPUSH
49312: CALL_OW 263
49316: PUSH
49317: LD_INT 2
49319: NONEQUAL
49320: OR
49321: IFFALSE 49325
// exit ;
49323: GO 49641
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49325: LD_ADDR_VAR 0 6
49329: PUSH
49330: LD_INT 22
49332: PUSH
49333: LD_VAR 0 1
49337: PPUSH
49338: CALL_OW 255
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: LD_INT 30
49352: PUSH
49353: LD_INT 36
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 34
49362: PUSH
49363: LD_INT 31
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: LIST
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PPUSH
49379: CALL_OW 69
49383: ST_TO_ADDR
// if not tmp then
49384: LD_VAR 0 6
49388: NOT
49389: IFFALSE 49393
// exit ;
49391: GO 49641
// result := [ ] ;
49393: LD_ADDR_VAR 0 2
49397: PUSH
49398: EMPTY
49399: ST_TO_ADDR
// for i in tmp do
49400: LD_ADDR_VAR 0 3
49404: PUSH
49405: LD_VAR 0 6
49409: PUSH
49410: FOR_IN
49411: IFFALSE 49482
// begin t := UnitsInside ( i ) ;
49413: LD_ADDR_VAR 0 4
49417: PUSH
49418: LD_VAR 0 3
49422: PPUSH
49423: CALL_OW 313
49427: ST_TO_ADDR
// if t then
49428: LD_VAR 0 4
49432: IFFALSE 49480
// for j in t do
49434: LD_ADDR_VAR 0 7
49438: PUSH
49439: LD_VAR 0 4
49443: PUSH
49444: FOR_IN
49445: IFFALSE 49478
// result := Replace ( result , result + 1 , j ) ;
49447: LD_ADDR_VAR 0 2
49451: PUSH
49452: LD_VAR 0 2
49456: PPUSH
49457: LD_VAR 0 2
49461: PUSH
49462: LD_INT 1
49464: PLUS
49465: PPUSH
49466: LD_VAR 0 7
49470: PPUSH
49471: CALL_OW 1
49475: ST_TO_ADDR
49476: GO 49444
49478: POP
49479: POP
// end ;
49480: GO 49410
49482: POP
49483: POP
// if not result then
49484: LD_VAR 0 2
49488: NOT
49489: IFFALSE 49493
// exit ;
49491: GO 49641
// mech := result [ 1 ] ;
49493: LD_ADDR_VAR 0 5
49497: PUSH
49498: LD_VAR 0 2
49502: PUSH
49503: LD_INT 1
49505: ARRAY
49506: ST_TO_ADDR
// if result > 1 then
49507: LD_VAR 0 2
49511: PUSH
49512: LD_INT 1
49514: GREATER
49515: IFFALSE 49627
// begin for i = 2 to result do
49517: LD_ADDR_VAR 0 3
49521: PUSH
49522: DOUBLE
49523: LD_INT 2
49525: DEC
49526: ST_TO_ADDR
49527: LD_VAR 0 2
49531: PUSH
49532: FOR_TO
49533: IFFALSE 49625
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49535: LD_ADDR_VAR 0 4
49539: PUSH
49540: LD_VAR 0 2
49544: PUSH
49545: LD_VAR 0 3
49549: ARRAY
49550: PPUSH
49551: LD_INT 3
49553: PPUSH
49554: CALL_OW 259
49558: PUSH
49559: LD_VAR 0 2
49563: PUSH
49564: LD_VAR 0 3
49568: ARRAY
49569: PPUSH
49570: CALL_OW 432
49574: MINUS
49575: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49576: LD_VAR 0 4
49580: PUSH
49581: LD_VAR 0 5
49585: PPUSH
49586: LD_INT 3
49588: PPUSH
49589: CALL_OW 259
49593: PUSH
49594: LD_VAR 0 5
49598: PPUSH
49599: CALL_OW 432
49603: MINUS
49604: GREATEREQUAL
49605: IFFALSE 49623
// mech := result [ i ] ;
49607: LD_ADDR_VAR 0 5
49611: PUSH
49612: LD_VAR 0 2
49616: PUSH
49617: LD_VAR 0 3
49621: ARRAY
49622: ST_TO_ADDR
// end ;
49623: GO 49532
49625: POP
49626: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49627: LD_VAR 0 1
49631: PPUSH
49632: LD_VAR 0 5
49636: PPUSH
49637: CALL_OW 135
// end ;
49641: LD_VAR 0 2
49645: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49646: LD_INT 0
49648: PPUSH
49649: PPUSH
49650: PPUSH
49651: PPUSH
49652: PPUSH
49653: PPUSH
49654: PPUSH
49655: PPUSH
49656: PPUSH
49657: PPUSH
49658: PPUSH
49659: PPUSH
49660: PPUSH
// result := [ ] ;
49661: LD_ADDR_VAR 0 7
49665: PUSH
49666: EMPTY
49667: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49668: LD_VAR 0 1
49672: PPUSH
49673: CALL_OW 266
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: IN
49688: NOT
49689: IFFALSE 49693
// exit ;
49691: GO 51327
// if name then
49693: LD_VAR 0 3
49697: IFFALSE 49713
// SetBName ( base_dep , name ) ;
49699: LD_VAR 0 1
49703: PPUSH
49704: LD_VAR 0 3
49708: PPUSH
49709: CALL_OW 500
// base := GetBase ( base_dep ) ;
49713: LD_ADDR_VAR 0 15
49717: PUSH
49718: LD_VAR 0 1
49722: PPUSH
49723: CALL_OW 274
49727: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49728: LD_ADDR_VAR 0 16
49732: PUSH
49733: LD_VAR 0 1
49737: PPUSH
49738: CALL_OW 255
49742: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49743: LD_ADDR_VAR 0 17
49747: PUSH
49748: LD_VAR 0 1
49752: PPUSH
49753: CALL_OW 248
49757: ST_TO_ADDR
// if sources then
49758: LD_VAR 0 5
49762: IFFALSE 49809
// for i = 1 to 3 do
49764: LD_ADDR_VAR 0 8
49768: PUSH
49769: DOUBLE
49770: LD_INT 1
49772: DEC
49773: ST_TO_ADDR
49774: LD_INT 3
49776: PUSH
49777: FOR_TO
49778: IFFALSE 49807
// AddResourceType ( base , i , sources [ i ] ) ;
49780: LD_VAR 0 15
49784: PPUSH
49785: LD_VAR 0 8
49789: PPUSH
49790: LD_VAR 0 5
49794: PUSH
49795: LD_VAR 0 8
49799: ARRAY
49800: PPUSH
49801: CALL_OW 276
49805: GO 49777
49807: POP
49808: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49809: LD_ADDR_VAR 0 18
49813: PUSH
49814: LD_VAR 0 15
49818: PPUSH
49819: LD_VAR 0 2
49823: PPUSH
49824: LD_INT 1
49826: PPUSH
49827: CALL 49070 0 3
49831: ST_TO_ADDR
// InitHc ;
49832: CALL_OW 19
// InitUc ;
49836: CALL_OW 18
// uc_side := side ;
49840: LD_ADDR_OWVAR 20
49844: PUSH
49845: LD_VAR 0 16
49849: ST_TO_ADDR
// uc_nation := nation ;
49850: LD_ADDR_OWVAR 21
49854: PUSH
49855: LD_VAR 0 17
49859: ST_TO_ADDR
// if buildings then
49860: LD_VAR 0 18
49864: IFFALSE 51186
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49866: LD_ADDR_VAR 0 19
49870: PUSH
49871: LD_VAR 0 18
49875: PPUSH
49876: LD_INT 2
49878: PUSH
49879: LD_INT 30
49881: PUSH
49882: LD_INT 29
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 30
49891: PUSH
49892: LD_INT 30
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: LIST
49903: PPUSH
49904: CALL_OW 72
49908: ST_TO_ADDR
// if tmp then
49909: LD_VAR 0 19
49913: IFFALSE 49961
// for i in tmp do
49915: LD_ADDR_VAR 0 8
49919: PUSH
49920: LD_VAR 0 19
49924: PUSH
49925: FOR_IN
49926: IFFALSE 49959
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49928: LD_VAR 0 8
49932: PPUSH
49933: CALL_OW 250
49937: PPUSH
49938: LD_VAR 0 8
49942: PPUSH
49943: CALL_OW 251
49947: PPUSH
49948: LD_VAR 0 16
49952: PPUSH
49953: CALL_OW 441
49957: GO 49925
49959: POP
49960: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49961: LD_VAR 0 18
49965: PPUSH
49966: LD_INT 2
49968: PUSH
49969: LD_INT 30
49971: PUSH
49972: LD_INT 32
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 30
49981: PUSH
49982: LD_INT 33
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: LIST
49993: PPUSH
49994: CALL_OW 72
49998: IFFALSE 50086
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50000: LD_ADDR_VAR 0 8
50004: PUSH
50005: LD_VAR 0 18
50009: PPUSH
50010: LD_INT 2
50012: PUSH
50013: LD_INT 30
50015: PUSH
50016: LD_INT 32
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 30
50025: PUSH
50026: LD_INT 33
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: LIST
50037: PPUSH
50038: CALL_OW 72
50042: PUSH
50043: FOR_IN
50044: IFFALSE 50084
// begin if not GetBWeapon ( i ) then
50046: LD_VAR 0 8
50050: PPUSH
50051: CALL_OW 269
50055: NOT
50056: IFFALSE 50082
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50058: LD_VAR 0 8
50062: PPUSH
50063: LD_VAR 0 8
50067: PPUSH
50068: LD_VAR 0 2
50072: PPUSH
50073: CALL 51332 0 2
50077: PPUSH
50078: CALL_OW 431
// end ;
50082: GO 50043
50084: POP
50085: POP
// end ; for i = 1 to personel do
50086: LD_ADDR_VAR 0 8
50090: PUSH
50091: DOUBLE
50092: LD_INT 1
50094: DEC
50095: ST_TO_ADDR
50096: LD_VAR 0 6
50100: PUSH
50101: FOR_TO
50102: IFFALSE 51166
// begin if i > 4 then
50104: LD_VAR 0 8
50108: PUSH
50109: LD_INT 4
50111: GREATER
50112: IFFALSE 50116
// break ;
50114: GO 51166
// case i of 1 :
50116: LD_VAR 0 8
50120: PUSH
50121: LD_INT 1
50123: DOUBLE
50124: EQUAL
50125: IFTRUE 50129
50127: GO 50209
50129: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50130: LD_ADDR_VAR 0 12
50134: PUSH
50135: LD_VAR 0 18
50139: PPUSH
50140: LD_INT 22
50142: PUSH
50143: LD_VAR 0 16
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 58
50154: PUSH
50155: EMPTY
50156: LIST
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: LD_INT 30
50163: PUSH
50164: LD_INT 32
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 30
50173: PUSH
50174: LD_INT 4
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 30
50183: PUSH
50184: LD_INT 5
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: PPUSH
50202: CALL_OW 72
50206: ST_TO_ADDR
50207: GO 50431
50209: LD_INT 2
50211: DOUBLE
50212: EQUAL
50213: IFTRUE 50217
50215: GO 50279
50217: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50218: LD_ADDR_VAR 0 12
50222: PUSH
50223: LD_VAR 0 18
50227: PPUSH
50228: LD_INT 22
50230: PUSH
50231: LD_VAR 0 16
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: LD_INT 30
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 30
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: LIST
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PPUSH
50272: CALL_OW 72
50276: ST_TO_ADDR
50277: GO 50431
50279: LD_INT 3
50281: DOUBLE
50282: EQUAL
50283: IFTRUE 50287
50285: GO 50349
50287: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50288: LD_ADDR_VAR 0 12
50292: PUSH
50293: LD_VAR 0 18
50297: PPUSH
50298: LD_INT 22
50300: PUSH
50301: LD_VAR 0 16
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: LD_INT 30
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 30
50325: PUSH
50326: LD_INT 3
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: LIST
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PPUSH
50342: CALL_OW 72
50346: ST_TO_ADDR
50347: GO 50431
50349: LD_INT 4
50351: DOUBLE
50352: EQUAL
50353: IFTRUE 50357
50355: GO 50430
50357: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50358: LD_ADDR_VAR 0 12
50362: PUSH
50363: LD_VAR 0 18
50367: PPUSH
50368: LD_INT 22
50370: PUSH
50371: LD_VAR 0 16
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: LD_INT 30
50385: PUSH
50386: LD_INT 6
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 30
50395: PUSH
50396: LD_INT 7
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 30
50405: PUSH
50406: LD_INT 8
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PPUSH
50423: CALL_OW 72
50427: ST_TO_ADDR
50428: GO 50431
50430: POP
// if i = 1 then
50431: LD_VAR 0 8
50435: PUSH
50436: LD_INT 1
50438: EQUAL
50439: IFFALSE 50550
// begin tmp := [ ] ;
50441: LD_ADDR_VAR 0 19
50445: PUSH
50446: EMPTY
50447: ST_TO_ADDR
// for j in f do
50448: LD_ADDR_VAR 0 9
50452: PUSH
50453: LD_VAR 0 12
50457: PUSH
50458: FOR_IN
50459: IFFALSE 50532
// if GetBType ( j ) = b_bunker then
50461: LD_VAR 0 9
50465: PPUSH
50466: CALL_OW 266
50470: PUSH
50471: LD_INT 32
50473: EQUAL
50474: IFFALSE 50501
// tmp := Insert ( tmp , 1 , j ) else
50476: LD_ADDR_VAR 0 19
50480: PUSH
50481: LD_VAR 0 19
50485: PPUSH
50486: LD_INT 1
50488: PPUSH
50489: LD_VAR 0 9
50493: PPUSH
50494: CALL_OW 2
50498: ST_TO_ADDR
50499: GO 50530
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50501: LD_ADDR_VAR 0 19
50505: PUSH
50506: LD_VAR 0 19
50510: PPUSH
50511: LD_VAR 0 19
50515: PUSH
50516: LD_INT 1
50518: PLUS
50519: PPUSH
50520: LD_VAR 0 9
50524: PPUSH
50525: CALL_OW 2
50529: ST_TO_ADDR
50530: GO 50458
50532: POP
50533: POP
// if tmp then
50534: LD_VAR 0 19
50538: IFFALSE 50550
// f := tmp ;
50540: LD_ADDR_VAR 0 12
50544: PUSH
50545: LD_VAR 0 19
50549: ST_TO_ADDR
// end ; x := personel [ i ] ;
50550: LD_ADDR_VAR 0 13
50554: PUSH
50555: LD_VAR 0 6
50559: PUSH
50560: LD_VAR 0 8
50564: ARRAY
50565: ST_TO_ADDR
// if x = - 1 then
50566: LD_VAR 0 13
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: EQUAL
50575: IFFALSE 50784
// begin for j in f do
50577: LD_ADDR_VAR 0 9
50581: PUSH
50582: LD_VAR 0 12
50586: PUSH
50587: FOR_IN
50588: IFFALSE 50780
// repeat InitHc ;
50590: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50594: LD_VAR 0 9
50598: PPUSH
50599: CALL_OW 266
50603: PUSH
50604: LD_INT 5
50606: EQUAL
50607: IFFALSE 50677
// begin if UnitsInside ( j ) < 3 then
50609: LD_VAR 0 9
50613: PPUSH
50614: CALL_OW 313
50618: PUSH
50619: LD_INT 3
50621: LESS
50622: IFFALSE 50658
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50624: LD_INT 0
50626: PPUSH
50627: LD_INT 5
50629: PUSH
50630: LD_INT 8
50632: PUSH
50633: LD_INT 9
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: LIST
50640: PUSH
50641: LD_VAR 0 17
50645: ARRAY
50646: PPUSH
50647: LD_VAR 0 4
50651: PPUSH
50652: CALL_OW 380
50656: GO 50675
// PrepareHuman ( false , i , skill ) ;
50658: LD_INT 0
50660: PPUSH
50661: LD_VAR 0 8
50665: PPUSH
50666: LD_VAR 0 4
50670: PPUSH
50671: CALL_OW 380
// end else
50675: GO 50694
// PrepareHuman ( false , i , skill ) ;
50677: LD_INT 0
50679: PPUSH
50680: LD_VAR 0 8
50684: PPUSH
50685: LD_VAR 0 4
50689: PPUSH
50690: CALL_OW 380
// un := CreateHuman ;
50694: LD_ADDR_VAR 0 14
50698: PUSH
50699: CALL_OW 44
50703: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50704: LD_ADDR_VAR 0 7
50708: PUSH
50709: LD_VAR 0 7
50713: PPUSH
50714: LD_INT 1
50716: PPUSH
50717: LD_VAR 0 14
50721: PPUSH
50722: CALL_OW 2
50726: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50727: LD_VAR 0 14
50731: PPUSH
50732: LD_VAR 0 9
50736: PPUSH
50737: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50741: LD_VAR 0 9
50745: PPUSH
50746: CALL_OW 313
50750: PUSH
50751: LD_INT 6
50753: EQUAL
50754: PUSH
50755: LD_VAR 0 9
50759: PPUSH
50760: CALL_OW 266
50764: PUSH
50765: LD_INT 32
50767: PUSH
50768: LD_INT 31
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: IN
50775: OR
50776: IFFALSE 50590
50778: GO 50587
50780: POP
50781: POP
// end else
50782: GO 51164
// for j = 1 to x do
50784: LD_ADDR_VAR 0 9
50788: PUSH
50789: DOUBLE
50790: LD_INT 1
50792: DEC
50793: ST_TO_ADDR
50794: LD_VAR 0 13
50798: PUSH
50799: FOR_TO
50800: IFFALSE 51162
// begin InitHc ;
50802: CALL_OW 19
// if not f then
50806: LD_VAR 0 12
50810: NOT
50811: IFFALSE 50900
// begin PrepareHuman ( false , i , skill ) ;
50813: LD_INT 0
50815: PPUSH
50816: LD_VAR 0 8
50820: PPUSH
50821: LD_VAR 0 4
50825: PPUSH
50826: CALL_OW 380
// un := CreateHuman ;
50830: LD_ADDR_VAR 0 14
50834: PUSH
50835: CALL_OW 44
50839: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50840: LD_ADDR_VAR 0 7
50844: PUSH
50845: LD_VAR 0 7
50849: PPUSH
50850: LD_INT 1
50852: PPUSH
50853: LD_VAR 0 14
50857: PPUSH
50858: CALL_OW 2
50862: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50863: LD_VAR 0 14
50867: PPUSH
50868: LD_VAR 0 1
50872: PPUSH
50873: CALL_OW 250
50877: PPUSH
50878: LD_VAR 0 1
50882: PPUSH
50883: CALL_OW 251
50887: PPUSH
50888: LD_INT 10
50890: PPUSH
50891: LD_INT 0
50893: PPUSH
50894: CALL_OW 50
// continue ;
50898: GO 50799
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50900: LD_VAR 0 12
50904: PUSH
50905: LD_INT 1
50907: ARRAY
50908: PPUSH
50909: CALL_OW 313
50913: PUSH
50914: LD_VAR 0 12
50918: PUSH
50919: LD_INT 1
50921: ARRAY
50922: PPUSH
50923: CALL_OW 266
50927: PUSH
50928: LD_INT 32
50930: PUSH
50931: LD_INT 31
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: IN
50938: AND
50939: PUSH
50940: LD_VAR 0 12
50944: PUSH
50945: LD_INT 1
50947: ARRAY
50948: PPUSH
50949: CALL_OW 313
50953: PUSH
50954: LD_INT 6
50956: EQUAL
50957: OR
50958: IFFALSE 50978
// f := Delete ( f , 1 ) ;
50960: LD_ADDR_VAR 0 12
50964: PUSH
50965: LD_VAR 0 12
50969: PPUSH
50970: LD_INT 1
50972: PPUSH
50973: CALL_OW 3
50977: ST_TO_ADDR
// if not f then
50978: LD_VAR 0 12
50982: NOT
50983: IFFALSE 51001
// begin x := x + 2 ;
50985: LD_ADDR_VAR 0 13
50989: PUSH
50990: LD_VAR 0 13
50994: PUSH
50995: LD_INT 2
50997: PLUS
50998: ST_TO_ADDR
// continue ;
50999: GO 50799
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51001: LD_VAR 0 12
51005: PUSH
51006: LD_INT 1
51008: ARRAY
51009: PPUSH
51010: CALL_OW 266
51014: PUSH
51015: LD_INT 5
51017: EQUAL
51018: IFFALSE 51092
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51020: LD_VAR 0 12
51024: PUSH
51025: LD_INT 1
51027: ARRAY
51028: PPUSH
51029: CALL_OW 313
51033: PUSH
51034: LD_INT 3
51036: LESS
51037: IFFALSE 51073
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51039: LD_INT 0
51041: PPUSH
51042: LD_INT 5
51044: PUSH
51045: LD_INT 8
51047: PUSH
51048: LD_INT 9
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: LIST
51055: PUSH
51056: LD_VAR 0 17
51060: ARRAY
51061: PPUSH
51062: LD_VAR 0 4
51066: PPUSH
51067: CALL_OW 380
51071: GO 51090
// PrepareHuman ( false , i , skill ) ;
51073: LD_INT 0
51075: PPUSH
51076: LD_VAR 0 8
51080: PPUSH
51081: LD_VAR 0 4
51085: PPUSH
51086: CALL_OW 380
// end else
51090: GO 51109
// PrepareHuman ( false , i , skill ) ;
51092: LD_INT 0
51094: PPUSH
51095: LD_VAR 0 8
51099: PPUSH
51100: LD_VAR 0 4
51104: PPUSH
51105: CALL_OW 380
// un := CreateHuman ;
51109: LD_ADDR_VAR 0 14
51113: PUSH
51114: CALL_OW 44
51118: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51119: LD_ADDR_VAR 0 7
51123: PUSH
51124: LD_VAR 0 7
51128: PPUSH
51129: LD_INT 1
51131: PPUSH
51132: LD_VAR 0 14
51136: PPUSH
51137: CALL_OW 2
51141: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51142: LD_VAR 0 14
51146: PPUSH
51147: LD_VAR 0 12
51151: PUSH
51152: LD_INT 1
51154: ARRAY
51155: PPUSH
51156: CALL_OW 52
// end ;
51160: GO 50799
51162: POP
51163: POP
// end ;
51164: GO 50101
51166: POP
51167: POP
// result := result ^ buildings ;
51168: LD_ADDR_VAR 0 7
51172: PUSH
51173: LD_VAR 0 7
51177: PUSH
51178: LD_VAR 0 18
51182: ADD
51183: ST_TO_ADDR
// end else
51184: GO 51327
// begin for i = 1 to personel do
51186: LD_ADDR_VAR 0 8
51190: PUSH
51191: DOUBLE
51192: LD_INT 1
51194: DEC
51195: ST_TO_ADDR
51196: LD_VAR 0 6
51200: PUSH
51201: FOR_TO
51202: IFFALSE 51325
// begin if i > 4 then
51204: LD_VAR 0 8
51208: PUSH
51209: LD_INT 4
51211: GREATER
51212: IFFALSE 51216
// break ;
51214: GO 51325
// x := personel [ i ] ;
51216: LD_ADDR_VAR 0 13
51220: PUSH
51221: LD_VAR 0 6
51225: PUSH
51226: LD_VAR 0 8
51230: ARRAY
51231: ST_TO_ADDR
// if x = - 1 then
51232: LD_VAR 0 13
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: EQUAL
51241: IFFALSE 51245
// continue ;
51243: GO 51201
// PrepareHuman ( false , i , skill ) ;
51245: LD_INT 0
51247: PPUSH
51248: LD_VAR 0 8
51252: PPUSH
51253: LD_VAR 0 4
51257: PPUSH
51258: CALL_OW 380
// un := CreateHuman ;
51262: LD_ADDR_VAR 0 14
51266: PUSH
51267: CALL_OW 44
51271: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51272: LD_VAR 0 14
51276: PPUSH
51277: LD_VAR 0 1
51281: PPUSH
51282: CALL_OW 250
51286: PPUSH
51287: LD_VAR 0 1
51291: PPUSH
51292: CALL_OW 251
51296: PPUSH
51297: LD_INT 10
51299: PPUSH
51300: LD_INT 0
51302: PPUSH
51303: CALL_OW 50
// result := result ^ un ;
51307: LD_ADDR_VAR 0 7
51311: PUSH
51312: LD_VAR 0 7
51316: PUSH
51317: LD_VAR 0 14
51321: ADD
51322: ST_TO_ADDR
// end ;
51323: GO 51201
51325: POP
51326: POP
// end ; end ;
51327: LD_VAR 0 7
51331: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51332: LD_INT 0
51334: PPUSH
51335: PPUSH
51336: PPUSH
51337: PPUSH
51338: PPUSH
51339: PPUSH
51340: PPUSH
51341: PPUSH
51342: PPUSH
51343: PPUSH
51344: PPUSH
51345: PPUSH
51346: PPUSH
51347: PPUSH
51348: PPUSH
51349: PPUSH
// result := false ;
51350: LD_ADDR_VAR 0 3
51354: PUSH
51355: LD_INT 0
51357: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51358: LD_VAR 0 1
51362: NOT
51363: PUSH
51364: LD_VAR 0 1
51368: PPUSH
51369: CALL_OW 266
51373: PUSH
51374: LD_INT 32
51376: PUSH
51377: LD_INT 33
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: IN
51384: NOT
51385: OR
51386: IFFALSE 51390
// exit ;
51388: GO 52499
// nat := GetNation ( tower ) ;
51390: LD_ADDR_VAR 0 12
51394: PUSH
51395: LD_VAR 0 1
51399: PPUSH
51400: CALL_OW 248
51404: ST_TO_ADDR
// side := GetSide ( tower ) ;
51405: LD_ADDR_VAR 0 16
51409: PUSH
51410: LD_VAR 0 1
51414: PPUSH
51415: CALL_OW 255
51419: ST_TO_ADDR
// x := GetX ( tower ) ;
51420: LD_ADDR_VAR 0 10
51424: PUSH
51425: LD_VAR 0 1
51429: PPUSH
51430: CALL_OW 250
51434: ST_TO_ADDR
// y := GetY ( tower ) ;
51435: LD_ADDR_VAR 0 11
51439: PUSH
51440: LD_VAR 0 1
51444: PPUSH
51445: CALL_OW 251
51449: ST_TO_ADDR
// if not x or not y then
51450: LD_VAR 0 10
51454: NOT
51455: PUSH
51456: LD_VAR 0 11
51460: NOT
51461: OR
51462: IFFALSE 51466
// exit ;
51464: GO 52499
// weapon := 0 ;
51466: LD_ADDR_VAR 0 18
51470: PUSH
51471: LD_INT 0
51473: ST_TO_ADDR
// fac_list := [ ] ;
51474: LD_ADDR_VAR 0 17
51478: PUSH
51479: EMPTY
51480: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51481: LD_ADDR_VAR 0 6
51485: PUSH
51486: LD_VAR 0 1
51490: PPUSH
51491: CALL_OW 274
51495: PPUSH
51496: LD_VAR 0 2
51500: PPUSH
51501: LD_INT 0
51503: PPUSH
51504: CALL 49070 0 3
51508: PPUSH
51509: LD_INT 30
51511: PUSH
51512: LD_INT 3
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PPUSH
51519: CALL_OW 72
51523: ST_TO_ADDR
// if not factories then
51524: LD_VAR 0 6
51528: NOT
51529: IFFALSE 51533
// exit ;
51531: GO 52499
// for i in factories do
51533: LD_ADDR_VAR 0 8
51537: PUSH
51538: LD_VAR 0 6
51542: PUSH
51543: FOR_IN
51544: IFFALSE 51569
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51546: LD_ADDR_VAR 0 17
51550: PUSH
51551: LD_VAR 0 17
51555: PUSH
51556: LD_VAR 0 8
51560: PPUSH
51561: CALL_OW 478
51565: UNION
51566: ST_TO_ADDR
51567: GO 51543
51569: POP
51570: POP
// if not fac_list then
51571: LD_VAR 0 17
51575: NOT
51576: IFFALSE 51580
// exit ;
51578: GO 52499
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51580: LD_ADDR_VAR 0 5
51584: PUSH
51585: LD_INT 4
51587: PUSH
51588: LD_INT 5
51590: PUSH
51591: LD_INT 9
51593: PUSH
51594: LD_INT 10
51596: PUSH
51597: LD_INT 6
51599: PUSH
51600: LD_INT 7
51602: PUSH
51603: LD_INT 11
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 27
51617: PUSH
51618: LD_INT 28
51620: PUSH
51621: LD_INT 26
51623: PUSH
51624: LD_INT 30
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 43
51635: PUSH
51636: LD_INT 44
51638: PUSH
51639: LD_INT 46
51641: PUSH
51642: LD_INT 45
51644: PUSH
51645: LD_INT 47
51647: PUSH
51648: LD_INT 49
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: LIST
51663: PUSH
51664: LD_VAR 0 12
51668: ARRAY
51669: ST_TO_ADDR
// list := list isect fac_list ;
51670: LD_ADDR_VAR 0 5
51674: PUSH
51675: LD_VAR 0 5
51679: PUSH
51680: LD_VAR 0 17
51684: ISECT
51685: ST_TO_ADDR
// if not list then
51686: LD_VAR 0 5
51690: NOT
51691: IFFALSE 51695
// exit ;
51693: GO 52499
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51695: LD_VAR 0 12
51699: PUSH
51700: LD_INT 3
51702: EQUAL
51703: PUSH
51704: LD_INT 49
51706: PUSH
51707: LD_VAR 0 5
51711: IN
51712: AND
51713: PUSH
51714: LD_INT 31
51716: PPUSH
51717: LD_VAR 0 16
51721: PPUSH
51722: CALL_OW 321
51726: PUSH
51727: LD_INT 2
51729: EQUAL
51730: AND
51731: IFFALSE 51791
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51733: LD_INT 22
51735: PUSH
51736: LD_VAR 0 16
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 35
51747: PUSH
51748: LD_INT 49
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 91
51757: PUSH
51758: LD_VAR 0 1
51762: PUSH
51763: LD_INT 10
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: LIST
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: LIST
51775: PPUSH
51776: CALL_OW 69
51780: NOT
51781: IFFALSE 51791
// weapon := ru_time_lapser ;
51783: LD_ADDR_VAR 0 18
51787: PUSH
51788: LD_INT 49
51790: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51791: LD_VAR 0 12
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: IN
51806: PUSH
51807: LD_INT 11
51809: PUSH
51810: LD_VAR 0 5
51814: IN
51815: PUSH
51816: LD_INT 30
51818: PUSH
51819: LD_VAR 0 5
51823: IN
51824: OR
51825: AND
51826: PUSH
51827: LD_INT 6
51829: PPUSH
51830: LD_VAR 0 16
51834: PPUSH
51835: CALL_OW 321
51839: PUSH
51840: LD_INT 2
51842: EQUAL
51843: AND
51844: IFFALSE 52009
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51846: LD_INT 22
51848: PUSH
51849: LD_VAR 0 16
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 2
51860: PUSH
51861: LD_INT 35
51863: PUSH
51864: LD_INT 11
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 35
51873: PUSH
51874: LD_INT 30
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 91
51888: PUSH
51889: LD_VAR 0 1
51893: PUSH
51894: LD_INT 18
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: LIST
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: LIST
51906: PPUSH
51907: CALL_OW 69
51911: NOT
51912: PUSH
51913: LD_INT 22
51915: PUSH
51916: LD_VAR 0 16
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: LD_INT 30
51930: PUSH
51931: LD_INT 32
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 30
51940: PUSH
51941: LD_INT 33
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 91
51955: PUSH
51956: LD_VAR 0 1
51960: PUSH
51961: LD_INT 12
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: LIST
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: LIST
51973: PUSH
51974: EMPTY
51975: LIST
51976: PPUSH
51977: CALL_OW 69
51981: PUSH
51982: LD_INT 2
51984: GREATER
51985: AND
51986: IFFALSE 52009
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51988: LD_ADDR_VAR 0 18
51992: PUSH
51993: LD_INT 11
51995: PUSH
51996: LD_INT 30
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_VAR 0 12
52007: ARRAY
52008: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52009: LD_VAR 0 18
52013: NOT
52014: PUSH
52015: LD_INT 40
52017: PPUSH
52018: LD_VAR 0 16
52022: PPUSH
52023: CALL_OW 321
52027: PUSH
52028: LD_INT 2
52030: EQUAL
52031: AND
52032: PUSH
52033: LD_INT 7
52035: PUSH
52036: LD_VAR 0 5
52040: IN
52041: PUSH
52042: LD_INT 28
52044: PUSH
52045: LD_VAR 0 5
52049: IN
52050: OR
52051: PUSH
52052: LD_INT 45
52054: PUSH
52055: LD_VAR 0 5
52059: IN
52060: OR
52061: AND
52062: IFFALSE 52316
// begin hex := GetHexInfo ( x , y ) ;
52064: LD_ADDR_VAR 0 4
52068: PUSH
52069: LD_VAR 0 10
52073: PPUSH
52074: LD_VAR 0 11
52078: PPUSH
52079: CALL_OW 546
52083: ST_TO_ADDR
// if hex [ 1 ] then
52084: LD_VAR 0 4
52088: PUSH
52089: LD_INT 1
52091: ARRAY
52092: IFFALSE 52096
// exit ;
52094: GO 52499
// height := hex [ 2 ] ;
52096: LD_ADDR_VAR 0 15
52100: PUSH
52101: LD_VAR 0 4
52105: PUSH
52106: LD_INT 2
52108: ARRAY
52109: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52110: LD_ADDR_VAR 0 14
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: LD_INT 5
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: ST_TO_ADDR
// for i in tmp do
52133: LD_ADDR_VAR 0 8
52137: PUSH
52138: LD_VAR 0 14
52142: PUSH
52143: FOR_IN
52144: IFFALSE 52314
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52146: LD_ADDR_VAR 0 9
52150: PUSH
52151: LD_VAR 0 10
52155: PPUSH
52156: LD_VAR 0 8
52160: PPUSH
52161: LD_INT 5
52163: PPUSH
52164: CALL_OW 272
52168: PUSH
52169: LD_VAR 0 11
52173: PPUSH
52174: LD_VAR 0 8
52178: PPUSH
52179: LD_INT 5
52181: PPUSH
52182: CALL_OW 273
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52191: LD_VAR 0 9
52195: PUSH
52196: LD_INT 1
52198: ARRAY
52199: PPUSH
52200: LD_VAR 0 9
52204: PUSH
52205: LD_INT 2
52207: ARRAY
52208: PPUSH
52209: CALL_OW 488
52213: IFFALSE 52312
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52215: LD_ADDR_VAR 0 4
52219: PUSH
52220: LD_VAR 0 9
52224: PUSH
52225: LD_INT 1
52227: ARRAY
52228: PPUSH
52229: LD_VAR 0 9
52233: PUSH
52234: LD_INT 2
52236: ARRAY
52237: PPUSH
52238: CALL_OW 546
52242: ST_TO_ADDR
// if hex [ 1 ] then
52243: LD_VAR 0 4
52247: PUSH
52248: LD_INT 1
52250: ARRAY
52251: IFFALSE 52255
// continue ;
52253: GO 52143
// h := hex [ 2 ] ;
52255: LD_ADDR_VAR 0 13
52259: PUSH
52260: LD_VAR 0 4
52264: PUSH
52265: LD_INT 2
52267: ARRAY
52268: ST_TO_ADDR
// if h + 7 < height then
52269: LD_VAR 0 13
52273: PUSH
52274: LD_INT 7
52276: PLUS
52277: PUSH
52278: LD_VAR 0 15
52282: LESS
52283: IFFALSE 52312
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52285: LD_ADDR_VAR 0 18
52289: PUSH
52290: LD_INT 7
52292: PUSH
52293: LD_INT 28
52295: PUSH
52296: LD_INT 45
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: LIST
52303: PUSH
52304: LD_VAR 0 12
52308: ARRAY
52309: ST_TO_ADDR
// break ;
52310: GO 52314
// end ; end ; end ;
52312: GO 52143
52314: POP
52315: POP
// end ; if not weapon then
52316: LD_VAR 0 18
52320: NOT
52321: IFFALSE 52381
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52323: LD_ADDR_VAR 0 5
52327: PUSH
52328: LD_VAR 0 5
52332: PUSH
52333: LD_INT 11
52335: PUSH
52336: LD_INT 30
52338: PUSH
52339: LD_INT 49
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: LIST
52346: DIFF
52347: ST_TO_ADDR
// if not list then
52348: LD_VAR 0 5
52352: NOT
52353: IFFALSE 52357
// exit ;
52355: GO 52499
// weapon := list [ rand ( 1 , list ) ] ;
52357: LD_ADDR_VAR 0 18
52361: PUSH
52362: LD_VAR 0 5
52366: PUSH
52367: LD_INT 1
52369: PPUSH
52370: LD_VAR 0 5
52374: PPUSH
52375: CALL_OW 12
52379: ARRAY
52380: ST_TO_ADDR
// end ; if weapon then
52381: LD_VAR 0 18
52385: IFFALSE 52499
// begin tmp := CostOfWeapon ( weapon ) ;
52387: LD_ADDR_VAR 0 14
52391: PUSH
52392: LD_VAR 0 18
52396: PPUSH
52397: CALL_OW 451
52401: ST_TO_ADDR
// j := GetBase ( tower ) ;
52402: LD_ADDR_VAR 0 9
52406: PUSH
52407: LD_VAR 0 1
52411: PPUSH
52412: CALL_OW 274
52416: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52417: LD_VAR 0 9
52421: PPUSH
52422: LD_INT 1
52424: PPUSH
52425: CALL_OW 275
52429: PUSH
52430: LD_VAR 0 14
52434: PUSH
52435: LD_INT 1
52437: ARRAY
52438: GREATEREQUAL
52439: PUSH
52440: LD_VAR 0 9
52444: PPUSH
52445: LD_INT 2
52447: PPUSH
52448: CALL_OW 275
52452: PUSH
52453: LD_VAR 0 14
52457: PUSH
52458: LD_INT 2
52460: ARRAY
52461: GREATEREQUAL
52462: AND
52463: PUSH
52464: LD_VAR 0 9
52468: PPUSH
52469: LD_INT 3
52471: PPUSH
52472: CALL_OW 275
52476: PUSH
52477: LD_VAR 0 14
52481: PUSH
52482: LD_INT 3
52484: ARRAY
52485: GREATEREQUAL
52486: AND
52487: IFFALSE 52499
// result := weapon ;
52489: LD_ADDR_VAR 0 3
52493: PUSH
52494: LD_VAR 0 18
52498: ST_TO_ADDR
// end ; end ;
52499: LD_VAR 0 3
52503: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52504: LD_INT 0
52506: PPUSH
52507: PPUSH
// result := true ;
52508: LD_ADDR_VAR 0 3
52512: PUSH
52513: LD_INT 1
52515: ST_TO_ADDR
// if array1 = array2 then
52516: LD_VAR 0 1
52520: PUSH
52521: LD_VAR 0 2
52525: EQUAL
52526: IFFALSE 52586
// begin for i = 1 to array1 do
52528: LD_ADDR_VAR 0 4
52532: PUSH
52533: DOUBLE
52534: LD_INT 1
52536: DEC
52537: ST_TO_ADDR
52538: LD_VAR 0 1
52542: PUSH
52543: FOR_TO
52544: IFFALSE 52582
// if array1 [ i ] <> array2 [ i ] then
52546: LD_VAR 0 1
52550: PUSH
52551: LD_VAR 0 4
52555: ARRAY
52556: PUSH
52557: LD_VAR 0 2
52561: PUSH
52562: LD_VAR 0 4
52566: ARRAY
52567: NONEQUAL
52568: IFFALSE 52580
// begin result := false ;
52570: LD_ADDR_VAR 0 3
52574: PUSH
52575: LD_INT 0
52577: ST_TO_ADDR
// break ;
52578: GO 52582
// end ;
52580: GO 52543
52582: POP
52583: POP
// end else
52584: GO 52594
// result := false ;
52586: LD_ADDR_VAR 0 3
52590: PUSH
52591: LD_INT 0
52593: ST_TO_ADDR
// end ;
52594: LD_VAR 0 3
52598: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52599: LD_INT 0
52601: PPUSH
52602: PPUSH
// if not array1 or not array2 then
52603: LD_VAR 0 1
52607: NOT
52608: PUSH
52609: LD_VAR 0 2
52613: NOT
52614: OR
52615: IFFALSE 52619
// exit ;
52617: GO 52683
// result := true ;
52619: LD_ADDR_VAR 0 3
52623: PUSH
52624: LD_INT 1
52626: ST_TO_ADDR
// for i = 1 to array1 do
52627: LD_ADDR_VAR 0 4
52631: PUSH
52632: DOUBLE
52633: LD_INT 1
52635: DEC
52636: ST_TO_ADDR
52637: LD_VAR 0 1
52641: PUSH
52642: FOR_TO
52643: IFFALSE 52681
// if array1 [ i ] <> array2 [ i ] then
52645: LD_VAR 0 1
52649: PUSH
52650: LD_VAR 0 4
52654: ARRAY
52655: PUSH
52656: LD_VAR 0 2
52660: PUSH
52661: LD_VAR 0 4
52665: ARRAY
52666: NONEQUAL
52667: IFFALSE 52679
// begin result := false ;
52669: LD_ADDR_VAR 0 3
52673: PUSH
52674: LD_INT 0
52676: ST_TO_ADDR
// break ;
52677: GO 52681
// end ;
52679: GO 52642
52681: POP
52682: POP
// end ;
52683: LD_VAR 0 3
52687: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52688: LD_INT 0
52690: PPUSH
52691: PPUSH
52692: PPUSH
// pom := GetBase ( fac ) ;
52693: LD_ADDR_VAR 0 5
52697: PUSH
52698: LD_VAR 0 1
52702: PPUSH
52703: CALL_OW 274
52707: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52708: LD_ADDR_VAR 0 4
52712: PUSH
52713: LD_VAR 0 2
52717: PUSH
52718: LD_INT 1
52720: ARRAY
52721: PPUSH
52722: LD_VAR 0 2
52726: PUSH
52727: LD_INT 2
52729: ARRAY
52730: PPUSH
52731: LD_VAR 0 2
52735: PUSH
52736: LD_INT 3
52738: ARRAY
52739: PPUSH
52740: LD_VAR 0 2
52744: PUSH
52745: LD_INT 4
52747: ARRAY
52748: PPUSH
52749: CALL_OW 449
52753: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52754: LD_ADDR_VAR 0 3
52758: PUSH
52759: LD_VAR 0 5
52763: PPUSH
52764: LD_INT 1
52766: PPUSH
52767: CALL_OW 275
52771: PUSH
52772: LD_VAR 0 4
52776: PUSH
52777: LD_INT 1
52779: ARRAY
52780: GREATEREQUAL
52781: PUSH
52782: LD_VAR 0 5
52786: PPUSH
52787: LD_INT 2
52789: PPUSH
52790: CALL_OW 275
52794: PUSH
52795: LD_VAR 0 4
52799: PUSH
52800: LD_INT 2
52802: ARRAY
52803: GREATEREQUAL
52804: AND
52805: PUSH
52806: LD_VAR 0 5
52810: PPUSH
52811: LD_INT 3
52813: PPUSH
52814: CALL_OW 275
52818: PUSH
52819: LD_VAR 0 4
52823: PUSH
52824: LD_INT 3
52826: ARRAY
52827: GREATEREQUAL
52828: AND
52829: ST_TO_ADDR
// end ;
52830: LD_VAR 0 3
52834: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52835: LD_INT 0
52837: PPUSH
52838: PPUSH
52839: PPUSH
52840: PPUSH
// pom := GetBase ( building ) ;
52841: LD_ADDR_VAR 0 3
52845: PUSH
52846: LD_VAR 0 1
52850: PPUSH
52851: CALL_OW 274
52855: ST_TO_ADDR
// if not pom then
52856: LD_VAR 0 3
52860: NOT
52861: IFFALSE 52865
// exit ;
52863: GO 53035
// btype := GetBType ( building ) ;
52865: LD_ADDR_VAR 0 5
52869: PUSH
52870: LD_VAR 0 1
52874: PPUSH
52875: CALL_OW 266
52879: ST_TO_ADDR
// if btype = b_armoury then
52880: LD_VAR 0 5
52884: PUSH
52885: LD_INT 4
52887: EQUAL
52888: IFFALSE 52898
// btype := b_barracks ;
52890: LD_ADDR_VAR 0 5
52894: PUSH
52895: LD_INT 5
52897: ST_TO_ADDR
// if btype = b_depot then
52898: LD_VAR 0 5
52902: PUSH
52903: LD_INT 0
52905: EQUAL
52906: IFFALSE 52916
// btype := b_warehouse ;
52908: LD_ADDR_VAR 0 5
52912: PUSH
52913: LD_INT 1
52915: ST_TO_ADDR
// if btype = b_workshop then
52916: LD_VAR 0 5
52920: PUSH
52921: LD_INT 2
52923: EQUAL
52924: IFFALSE 52934
// btype := b_factory ;
52926: LD_ADDR_VAR 0 5
52930: PUSH
52931: LD_INT 3
52933: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52934: LD_ADDR_VAR 0 4
52938: PUSH
52939: LD_VAR 0 5
52943: PPUSH
52944: LD_VAR 0 1
52948: PPUSH
52949: CALL_OW 248
52953: PPUSH
52954: CALL_OW 450
52958: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52959: LD_ADDR_VAR 0 2
52963: PUSH
52964: LD_VAR 0 3
52968: PPUSH
52969: LD_INT 1
52971: PPUSH
52972: CALL_OW 275
52976: PUSH
52977: LD_VAR 0 4
52981: PUSH
52982: LD_INT 1
52984: ARRAY
52985: GREATEREQUAL
52986: PUSH
52987: LD_VAR 0 3
52991: PPUSH
52992: LD_INT 2
52994: PPUSH
52995: CALL_OW 275
52999: PUSH
53000: LD_VAR 0 4
53004: PUSH
53005: LD_INT 2
53007: ARRAY
53008: GREATEREQUAL
53009: AND
53010: PUSH
53011: LD_VAR 0 3
53015: PPUSH
53016: LD_INT 3
53018: PPUSH
53019: CALL_OW 275
53023: PUSH
53024: LD_VAR 0 4
53028: PUSH
53029: LD_INT 3
53031: ARRAY
53032: GREATEREQUAL
53033: AND
53034: ST_TO_ADDR
// end ;
53035: LD_VAR 0 2
53039: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53040: LD_INT 0
53042: PPUSH
53043: PPUSH
53044: PPUSH
// pom := GetBase ( building ) ;
53045: LD_ADDR_VAR 0 4
53049: PUSH
53050: LD_VAR 0 1
53054: PPUSH
53055: CALL_OW 274
53059: ST_TO_ADDR
// if not pom then
53060: LD_VAR 0 4
53064: NOT
53065: IFFALSE 53069
// exit ;
53067: GO 53170
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53069: LD_ADDR_VAR 0 5
53073: PUSH
53074: LD_VAR 0 2
53078: PPUSH
53079: LD_VAR 0 1
53083: PPUSH
53084: CALL_OW 248
53088: PPUSH
53089: CALL_OW 450
53093: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53094: LD_ADDR_VAR 0 3
53098: PUSH
53099: LD_VAR 0 4
53103: PPUSH
53104: LD_INT 1
53106: PPUSH
53107: CALL_OW 275
53111: PUSH
53112: LD_VAR 0 5
53116: PUSH
53117: LD_INT 1
53119: ARRAY
53120: GREATEREQUAL
53121: PUSH
53122: LD_VAR 0 4
53126: PPUSH
53127: LD_INT 2
53129: PPUSH
53130: CALL_OW 275
53134: PUSH
53135: LD_VAR 0 5
53139: PUSH
53140: LD_INT 2
53142: ARRAY
53143: GREATEREQUAL
53144: AND
53145: PUSH
53146: LD_VAR 0 4
53150: PPUSH
53151: LD_INT 3
53153: PPUSH
53154: CALL_OW 275
53158: PUSH
53159: LD_VAR 0 5
53163: PUSH
53164: LD_INT 3
53166: ARRAY
53167: GREATEREQUAL
53168: AND
53169: ST_TO_ADDR
// end ;
53170: LD_VAR 0 3
53174: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53175: LD_INT 0
53177: PPUSH
53178: PPUSH
53179: PPUSH
53180: PPUSH
53181: PPUSH
53182: PPUSH
53183: PPUSH
53184: PPUSH
53185: PPUSH
53186: PPUSH
53187: PPUSH
// result := false ;
53188: LD_ADDR_VAR 0 8
53192: PUSH
53193: LD_INT 0
53195: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53196: LD_VAR 0 5
53200: NOT
53201: PUSH
53202: LD_VAR 0 1
53206: NOT
53207: OR
53208: PUSH
53209: LD_VAR 0 2
53213: NOT
53214: OR
53215: PUSH
53216: LD_VAR 0 3
53220: NOT
53221: OR
53222: IFFALSE 53226
// exit ;
53224: GO 54040
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53226: LD_ADDR_VAR 0 14
53230: PUSH
53231: LD_VAR 0 1
53235: PPUSH
53236: LD_VAR 0 2
53240: PPUSH
53241: LD_VAR 0 3
53245: PPUSH
53246: LD_VAR 0 4
53250: PPUSH
53251: LD_VAR 0 5
53255: PUSH
53256: LD_INT 1
53258: ARRAY
53259: PPUSH
53260: CALL_OW 248
53264: PPUSH
53265: LD_INT 0
53267: PPUSH
53268: CALL 55273 0 6
53272: ST_TO_ADDR
// if not hexes then
53273: LD_VAR 0 14
53277: NOT
53278: IFFALSE 53282
// exit ;
53280: GO 54040
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53282: LD_ADDR_VAR 0 17
53286: PUSH
53287: LD_VAR 0 5
53291: PPUSH
53292: LD_INT 22
53294: PUSH
53295: LD_VAR 0 13
53299: PPUSH
53300: CALL_OW 255
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: LD_INT 30
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 30
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: LIST
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PPUSH
53341: CALL_OW 72
53345: ST_TO_ADDR
// for i = 1 to hexes do
53346: LD_ADDR_VAR 0 9
53350: PUSH
53351: DOUBLE
53352: LD_INT 1
53354: DEC
53355: ST_TO_ADDR
53356: LD_VAR 0 14
53360: PUSH
53361: FOR_TO
53362: IFFALSE 54038
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53364: LD_ADDR_VAR 0 13
53368: PUSH
53369: LD_VAR 0 14
53373: PUSH
53374: LD_VAR 0 9
53378: ARRAY
53379: PUSH
53380: LD_INT 1
53382: ARRAY
53383: PPUSH
53384: LD_VAR 0 14
53388: PUSH
53389: LD_VAR 0 9
53393: ARRAY
53394: PUSH
53395: LD_INT 2
53397: ARRAY
53398: PPUSH
53399: CALL_OW 428
53403: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53404: LD_VAR 0 14
53408: PUSH
53409: LD_VAR 0 9
53413: ARRAY
53414: PUSH
53415: LD_INT 1
53417: ARRAY
53418: PPUSH
53419: LD_VAR 0 14
53423: PUSH
53424: LD_VAR 0 9
53428: ARRAY
53429: PUSH
53430: LD_INT 2
53432: ARRAY
53433: PPUSH
53434: CALL_OW 351
53438: PUSH
53439: LD_VAR 0 14
53443: PUSH
53444: LD_VAR 0 9
53448: ARRAY
53449: PUSH
53450: LD_INT 1
53452: ARRAY
53453: PPUSH
53454: LD_VAR 0 14
53458: PUSH
53459: LD_VAR 0 9
53463: ARRAY
53464: PUSH
53465: LD_INT 2
53467: ARRAY
53468: PPUSH
53469: CALL_OW 488
53473: NOT
53474: OR
53475: PUSH
53476: LD_VAR 0 13
53480: PPUSH
53481: CALL_OW 247
53485: PUSH
53486: LD_INT 3
53488: EQUAL
53489: OR
53490: IFFALSE 53496
// exit ;
53492: POP
53493: POP
53494: GO 54040
// if not tmp then
53496: LD_VAR 0 13
53500: NOT
53501: IFFALSE 53505
// continue ;
53503: GO 53361
// result := true ;
53505: LD_ADDR_VAR 0 8
53509: PUSH
53510: LD_INT 1
53512: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53513: LD_VAR 0 6
53517: PUSH
53518: LD_VAR 0 13
53522: PPUSH
53523: CALL_OW 247
53527: PUSH
53528: LD_INT 2
53530: EQUAL
53531: AND
53532: PUSH
53533: LD_VAR 0 13
53537: PPUSH
53538: CALL_OW 263
53542: PUSH
53543: LD_INT 1
53545: EQUAL
53546: AND
53547: IFFALSE 53711
// begin if IsDrivenBy ( tmp ) then
53549: LD_VAR 0 13
53553: PPUSH
53554: CALL_OW 311
53558: IFFALSE 53562
// continue ;
53560: GO 53361
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53562: LD_VAR 0 6
53566: PPUSH
53567: LD_INT 3
53569: PUSH
53570: LD_INT 60
53572: PUSH
53573: EMPTY
53574: LIST
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 3
53582: PUSH
53583: LD_INT 55
53585: PUSH
53586: EMPTY
53587: LIST
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PPUSH
53597: CALL_OW 72
53601: IFFALSE 53709
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53603: LD_ADDR_VAR 0 18
53607: PUSH
53608: LD_VAR 0 6
53612: PPUSH
53613: LD_INT 3
53615: PUSH
53616: LD_INT 60
53618: PUSH
53619: EMPTY
53620: LIST
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 3
53628: PUSH
53629: LD_INT 55
53631: PUSH
53632: EMPTY
53633: LIST
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PPUSH
53643: CALL_OW 72
53647: PUSH
53648: LD_INT 1
53650: ARRAY
53651: ST_TO_ADDR
// if IsInUnit ( driver ) then
53652: LD_VAR 0 18
53656: PPUSH
53657: CALL_OW 310
53661: IFFALSE 53672
// ComExit ( driver ) ;
53663: LD_VAR 0 18
53667: PPUSH
53668: CALL 79053 0 1
// AddComEnterUnit ( driver , tmp ) ;
53672: LD_VAR 0 18
53676: PPUSH
53677: LD_VAR 0 13
53681: PPUSH
53682: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53686: LD_VAR 0 18
53690: PPUSH
53691: LD_VAR 0 7
53695: PPUSH
53696: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53700: LD_VAR 0 18
53704: PPUSH
53705: CALL_OW 181
// end ; continue ;
53709: GO 53361
// end ; if not cleaners or not tmp in cleaners then
53711: LD_VAR 0 6
53715: NOT
53716: PUSH
53717: LD_VAR 0 13
53721: PUSH
53722: LD_VAR 0 6
53726: IN
53727: NOT
53728: OR
53729: IFFALSE 54036
// begin if dep then
53731: LD_VAR 0 17
53735: IFFALSE 53871
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53737: LD_ADDR_VAR 0 16
53741: PUSH
53742: LD_VAR 0 17
53746: PUSH
53747: LD_INT 1
53749: ARRAY
53750: PPUSH
53751: CALL_OW 250
53755: PPUSH
53756: LD_VAR 0 17
53760: PUSH
53761: LD_INT 1
53763: ARRAY
53764: PPUSH
53765: CALL_OW 254
53769: PPUSH
53770: LD_INT 5
53772: PPUSH
53773: CALL_OW 272
53777: PUSH
53778: LD_VAR 0 17
53782: PUSH
53783: LD_INT 1
53785: ARRAY
53786: PPUSH
53787: CALL_OW 251
53791: PPUSH
53792: LD_VAR 0 17
53796: PUSH
53797: LD_INT 1
53799: ARRAY
53800: PPUSH
53801: CALL_OW 254
53805: PPUSH
53806: LD_INT 5
53808: PPUSH
53809: CALL_OW 273
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53818: LD_VAR 0 16
53822: PUSH
53823: LD_INT 1
53825: ARRAY
53826: PPUSH
53827: LD_VAR 0 16
53831: PUSH
53832: LD_INT 2
53834: ARRAY
53835: PPUSH
53836: CALL_OW 488
53840: IFFALSE 53871
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53842: LD_VAR 0 13
53846: PPUSH
53847: LD_VAR 0 16
53851: PUSH
53852: LD_INT 1
53854: ARRAY
53855: PPUSH
53856: LD_VAR 0 16
53860: PUSH
53861: LD_INT 2
53863: ARRAY
53864: PPUSH
53865: CALL_OW 111
// continue ;
53869: GO 53361
// end ; end ; r := GetDir ( tmp ) ;
53871: LD_ADDR_VAR 0 15
53875: PUSH
53876: LD_VAR 0 13
53880: PPUSH
53881: CALL_OW 254
53885: ST_TO_ADDR
// if r = 5 then
53886: LD_VAR 0 15
53890: PUSH
53891: LD_INT 5
53893: EQUAL
53894: IFFALSE 53904
// r := 0 ;
53896: LD_ADDR_VAR 0 15
53900: PUSH
53901: LD_INT 0
53903: ST_TO_ADDR
// for j = r to 5 do
53904: LD_ADDR_VAR 0 10
53908: PUSH
53909: DOUBLE
53910: LD_VAR 0 15
53914: DEC
53915: ST_TO_ADDR
53916: LD_INT 5
53918: PUSH
53919: FOR_TO
53920: IFFALSE 54034
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53922: LD_ADDR_VAR 0 11
53926: PUSH
53927: LD_VAR 0 13
53931: PPUSH
53932: CALL_OW 250
53936: PPUSH
53937: LD_VAR 0 10
53941: PPUSH
53942: LD_INT 2
53944: PPUSH
53945: CALL_OW 272
53949: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53950: LD_ADDR_VAR 0 12
53954: PUSH
53955: LD_VAR 0 13
53959: PPUSH
53960: CALL_OW 251
53964: PPUSH
53965: LD_VAR 0 10
53969: PPUSH
53970: LD_INT 2
53972: PPUSH
53973: CALL_OW 273
53977: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53978: LD_VAR 0 11
53982: PPUSH
53983: LD_VAR 0 12
53987: PPUSH
53988: CALL_OW 488
53992: PUSH
53993: LD_VAR 0 11
53997: PPUSH
53998: LD_VAR 0 12
54002: PPUSH
54003: CALL_OW 428
54007: NOT
54008: AND
54009: IFFALSE 54032
// begin ComMoveXY ( tmp , _x , _y ) ;
54011: LD_VAR 0 13
54015: PPUSH
54016: LD_VAR 0 11
54020: PPUSH
54021: LD_VAR 0 12
54025: PPUSH
54026: CALL_OW 111
// break ;
54030: GO 54034
// end ; end ;
54032: GO 53919
54034: POP
54035: POP
// end ; end ;
54036: GO 53361
54038: POP
54039: POP
// end ;
54040: LD_VAR 0 8
54044: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54045: LD_INT 0
54047: PPUSH
// result := true ;
54048: LD_ADDR_VAR 0 3
54052: PUSH
54053: LD_INT 1
54055: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54056: LD_VAR 0 2
54060: PUSH
54061: LD_INT 24
54063: DOUBLE
54064: EQUAL
54065: IFTRUE 54075
54067: LD_INT 33
54069: DOUBLE
54070: EQUAL
54071: IFTRUE 54075
54073: GO 54100
54075: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54076: LD_ADDR_VAR 0 3
54080: PUSH
54081: LD_INT 32
54083: PPUSH
54084: LD_VAR 0 1
54088: PPUSH
54089: CALL_OW 321
54093: PUSH
54094: LD_INT 2
54096: EQUAL
54097: ST_TO_ADDR
54098: GO 54416
54100: LD_INT 20
54102: DOUBLE
54103: EQUAL
54104: IFTRUE 54108
54106: GO 54133
54108: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54109: LD_ADDR_VAR 0 3
54113: PUSH
54114: LD_INT 6
54116: PPUSH
54117: LD_VAR 0 1
54121: PPUSH
54122: CALL_OW 321
54126: PUSH
54127: LD_INT 2
54129: EQUAL
54130: ST_TO_ADDR
54131: GO 54416
54133: LD_INT 22
54135: DOUBLE
54136: EQUAL
54137: IFTRUE 54147
54139: LD_INT 36
54141: DOUBLE
54142: EQUAL
54143: IFTRUE 54147
54145: GO 54172
54147: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54148: LD_ADDR_VAR 0 3
54152: PUSH
54153: LD_INT 15
54155: PPUSH
54156: LD_VAR 0 1
54160: PPUSH
54161: CALL_OW 321
54165: PUSH
54166: LD_INT 2
54168: EQUAL
54169: ST_TO_ADDR
54170: GO 54416
54172: LD_INT 30
54174: DOUBLE
54175: EQUAL
54176: IFTRUE 54180
54178: GO 54205
54180: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54181: LD_ADDR_VAR 0 3
54185: PUSH
54186: LD_INT 20
54188: PPUSH
54189: LD_VAR 0 1
54193: PPUSH
54194: CALL_OW 321
54198: PUSH
54199: LD_INT 2
54201: EQUAL
54202: ST_TO_ADDR
54203: GO 54416
54205: LD_INT 28
54207: DOUBLE
54208: EQUAL
54209: IFTRUE 54219
54211: LD_INT 21
54213: DOUBLE
54214: EQUAL
54215: IFTRUE 54219
54217: GO 54244
54219: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54220: LD_ADDR_VAR 0 3
54224: PUSH
54225: LD_INT 21
54227: PPUSH
54228: LD_VAR 0 1
54232: PPUSH
54233: CALL_OW 321
54237: PUSH
54238: LD_INT 2
54240: EQUAL
54241: ST_TO_ADDR
54242: GO 54416
54244: LD_INT 16
54246: DOUBLE
54247: EQUAL
54248: IFTRUE 54252
54250: GO 54277
54252: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54253: LD_ADDR_VAR 0 3
54257: PUSH
54258: LD_INT 84
54260: PPUSH
54261: LD_VAR 0 1
54265: PPUSH
54266: CALL_OW 321
54270: PUSH
54271: LD_INT 2
54273: EQUAL
54274: ST_TO_ADDR
54275: GO 54416
54277: LD_INT 19
54279: DOUBLE
54280: EQUAL
54281: IFTRUE 54291
54283: LD_INT 23
54285: DOUBLE
54286: EQUAL
54287: IFTRUE 54291
54289: GO 54316
54291: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54292: LD_ADDR_VAR 0 3
54296: PUSH
54297: LD_INT 83
54299: PPUSH
54300: LD_VAR 0 1
54304: PPUSH
54305: CALL_OW 321
54309: PUSH
54310: LD_INT 2
54312: EQUAL
54313: ST_TO_ADDR
54314: GO 54416
54316: LD_INT 17
54318: DOUBLE
54319: EQUAL
54320: IFTRUE 54324
54322: GO 54349
54324: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54325: LD_ADDR_VAR 0 3
54329: PUSH
54330: LD_INT 39
54332: PPUSH
54333: LD_VAR 0 1
54337: PPUSH
54338: CALL_OW 321
54342: PUSH
54343: LD_INT 2
54345: EQUAL
54346: ST_TO_ADDR
54347: GO 54416
54349: LD_INT 18
54351: DOUBLE
54352: EQUAL
54353: IFTRUE 54357
54355: GO 54382
54357: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54358: LD_ADDR_VAR 0 3
54362: PUSH
54363: LD_INT 40
54365: PPUSH
54366: LD_VAR 0 1
54370: PPUSH
54371: CALL_OW 321
54375: PUSH
54376: LD_INT 2
54378: EQUAL
54379: ST_TO_ADDR
54380: GO 54416
54382: LD_INT 27
54384: DOUBLE
54385: EQUAL
54386: IFTRUE 54390
54388: GO 54415
54390: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54391: LD_ADDR_VAR 0 3
54395: PUSH
54396: LD_INT 35
54398: PPUSH
54399: LD_VAR 0 1
54403: PPUSH
54404: CALL_OW 321
54408: PUSH
54409: LD_INT 2
54411: EQUAL
54412: ST_TO_ADDR
54413: GO 54416
54415: POP
// end ;
54416: LD_VAR 0 3
54420: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54421: LD_INT 0
54423: PPUSH
54424: PPUSH
54425: PPUSH
54426: PPUSH
54427: PPUSH
54428: PPUSH
54429: PPUSH
54430: PPUSH
54431: PPUSH
54432: PPUSH
54433: PPUSH
// result := false ;
54434: LD_ADDR_VAR 0 6
54438: PUSH
54439: LD_INT 0
54441: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54442: LD_VAR 0 1
54446: NOT
54447: PUSH
54448: LD_VAR 0 1
54452: PPUSH
54453: CALL_OW 266
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: IN
54468: NOT
54469: OR
54470: PUSH
54471: LD_VAR 0 2
54475: NOT
54476: OR
54477: PUSH
54478: LD_VAR 0 5
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: LD_INT 2
54491: PUSH
54492: LD_INT 3
54494: PUSH
54495: LD_INT 4
54497: PUSH
54498: LD_INT 5
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: IN
54509: NOT
54510: OR
54511: PUSH
54512: LD_VAR 0 3
54516: PPUSH
54517: LD_VAR 0 4
54521: PPUSH
54522: CALL_OW 488
54526: NOT
54527: OR
54528: IFFALSE 54532
// exit ;
54530: GO 55268
// side := GetSide ( depot ) ;
54532: LD_ADDR_VAR 0 9
54536: PUSH
54537: LD_VAR 0 1
54541: PPUSH
54542: CALL_OW 255
54546: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54547: LD_VAR 0 9
54551: PPUSH
54552: LD_VAR 0 2
54556: PPUSH
54557: CALL 54045 0 2
54561: NOT
54562: IFFALSE 54566
// exit ;
54564: GO 55268
// pom := GetBase ( depot ) ;
54566: LD_ADDR_VAR 0 10
54570: PUSH
54571: LD_VAR 0 1
54575: PPUSH
54576: CALL_OW 274
54580: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54581: LD_ADDR_VAR 0 11
54585: PUSH
54586: LD_VAR 0 2
54590: PPUSH
54591: LD_VAR 0 1
54595: PPUSH
54596: CALL_OW 248
54600: PPUSH
54601: CALL_OW 450
54605: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54606: LD_VAR 0 10
54610: PPUSH
54611: LD_INT 1
54613: PPUSH
54614: CALL_OW 275
54618: PUSH
54619: LD_VAR 0 11
54623: PUSH
54624: LD_INT 1
54626: ARRAY
54627: GREATEREQUAL
54628: PUSH
54629: LD_VAR 0 10
54633: PPUSH
54634: LD_INT 2
54636: PPUSH
54637: CALL_OW 275
54641: PUSH
54642: LD_VAR 0 11
54646: PUSH
54647: LD_INT 2
54649: ARRAY
54650: GREATEREQUAL
54651: AND
54652: PUSH
54653: LD_VAR 0 10
54657: PPUSH
54658: LD_INT 3
54660: PPUSH
54661: CALL_OW 275
54665: PUSH
54666: LD_VAR 0 11
54670: PUSH
54671: LD_INT 3
54673: ARRAY
54674: GREATEREQUAL
54675: AND
54676: NOT
54677: IFFALSE 54681
// exit ;
54679: GO 55268
// if GetBType ( depot ) = b_depot then
54681: LD_VAR 0 1
54685: PPUSH
54686: CALL_OW 266
54690: PUSH
54691: LD_INT 0
54693: EQUAL
54694: IFFALSE 54706
// dist := 28 else
54696: LD_ADDR_VAR 0 14
54700: PUSH
54701: LD_INT 28
54703: ST_TO_ADDR
54704: GO 54714
// dist := 36 ;
54706: LD_ADDR_VAR 0 14
54710: PUSH
54711: LD_INT 36
54713: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54714: LD_VAR 0 1
54718: PPUSH
54719: LD_VAR 0 3
54723: PPUSH
54724: LD_VAR 0 4
54728: PPUSH
54729: CALL_OW 297
54733: PUSH
54734: LD_VAR 0 14
54738: GREATER
54739: IFFALSE 54743
// exit ;
54741: GO 55268
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54743: LD_ADDR_VAR 0 12
54747: PUSH
54748: LD_VAR 0 2
54752: PPUSH
54753: LD_VAR 0 3
54757: PPUSH
54758: LD_VAR 0 4
54762: PPUSH
54763: LD_VAR 0 5
54767: PPUSH
54768: LD_VAR 0 1
54772: PPUSH
54773: CALL_OW 248
54777: PPUSH
54778: LD_INT 0
54780: PPUSH
54781: CALL 55273 0 6
54785: ST_TO_ADDR
// if not hexes then
54786: LD_VAR 0 12
54790: NOT
54791: IFFALSE 54795
// exit ;
54793: GO 55268
// hex := GetHexInfo ( x , y ) ;
54795: LD_ADDR_VAR 0 15
54799: PUSH
54800: LD_VAR 0 3
54804: PPUSH
54805: LD_VAR 0 4
54809: PPUSH
54810: CALL_OW 546
54814: ST_TO_ADDR
// if hex [ 1 ] then
54815: LD_VAR 0 15
54819: PUSH
54820: LD_INT 1
54822: ARRAY
54823: IFFALSE 54827
// exit ;
54825: GO 55268
// height := hex [ 2 ] ;
54827: LD_ADDR_VAR 0 13
54831: PUSH
54832: LD_VAR 0 15
54836: PUSH
54837: LD_INT 2
54839: ARRAY
54840: ST_TO_ADDR
// for i = 1 to hexes do
54841: LD_ADDR_VAR 0 7
54845: PUSH
54846: DOUBLE
54847: LD_INT 1
54849: DEC
54850: ST_TO_ADDR
54851: LD_VAR 0 12
54855: PUSH
54856: FOR_TO
54857: IFFALSE 55187
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54859: LD_VAR 0 12
54863: PUSH
54864: LD_VAR 0 7
54868: ARRAY
54869: PUSH
54870: LD_INT 1
54872: ARRAY
54873: PPUSH
54874: LD_VAR 0 12
54878: PUSH
54879: LD_VAR 0 7
54883: ARRAY
54884: PUSH
54885: LD_INT 2
54887: ARRAY
54888: PPUSH
54889: CALL_OW 488
54893: NOT
54894: PUSH
54895: LD_VAR 0 12
54899: PUSH
54900: LD_VAR 0 7
54904: ARRAY
54905: PUSH
54906: LD_INT 1
54908: ARRAY
54909: PPUSH
54910: LD_VAR 0 12
54914: PUSH
54915: LD_VAR 0 7
54919: ARRAY
54920: PUSH
54921: LD_INT 2
54923: ARRAY
54924: PPUSH
54925: CALL_OW 428
54929: PUSH
54930: LD_INT 0
54932: GREATER
54933: OR
54934: PUSH
54935: LD_VAR 0 12
54939: PUSH
54940: LD_VAR 0 7
54944: ARRAY
54945: PUSH
54946: LD_INT 1
54948: ARRAY
54949: PPUSH
54950: LD_VAR 0 12
54954: PUSH
54955: LD_VAR 0 7
54959: ARRAY
54960: PUSH
54961: LD_INT 2
54963: ARRAY
54964: PPUSH
54965: CALL_OW 351
54969: OR
54970: IFFALSE 54976
// exit ;
54972: POP
54973: POP
54974: GO 55268
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54976: LD_ADDR_VAR 0 8
54980: PUSH
54981: LD_VAR 0 12
54985: PUSH
54986: LD_VAR 0 7
54990: ARRAY
54991: PUSH
54992: LD_INT 1
54994: ARRAY
54995: PPUSH
54996: LD_VAR 0 12
55000: PUSH
55001: LD_VAR 0 7
55005: ARRAY
55006: PUSH
55007: LD_INT 2
55009: ARRAY
55010: PPUSH
55011: CALL_OW 546
55015: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55016: LD_VAR 0 8
55020: PUSH
55021: LD_INT 1
55023: ARRAY
55024: PUSH
55025: LD_VAR 0 8
55029: PUSH
55030: LD_INT 2
55032: ARRAY
55033: PUSH
55034: LD_VAR 0 13
55038: PUSH
55039: LD_INT 2
55041: PLUS
55042: GREATER
55043: OR
55044: PUSH
55045: LD_VAR 0 8
55049: PUSH
55050: LD_INT 2
55052: ARRAY
55053: PUSH
55054: LD_VAR 0 13
55058: PUSH
55059: LD_INT 2
55061: MINUS
55062: LESS
55063: OR
55064: PUSH
55065: LD_VAR 0 8
55069: PUSH
55070: LD_INT 3
55072: ARRAY
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: LD_INT 8
55079: PUSH
55080: LD_INT 9
55082: PUSH
55083: LD_INT 10
55085: PUSH
55086: LD_INT 11
55088: PUSH
55089: LD_INT 12
55091: PUSH
55092: LD_INT 13
55094: PUSH
55095: LD_INT 16
55097: PUSH
55098: LD_INT 17
55100: PUSH
55101: LD_INT 18
55103: PUSH
55104: LD_INT 19
55106: PUSH
55107: LD_INT 20
55109: PUSH
55110: LD_INT 21
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: IN
55128: NOT
55129: OR
55130: PUSH
55131: LD_VAR 0 8
55135: PUSH
55136: LD_INT 5
55138: ARRAY
55139: NOT
55140: OR
55141: PUSH
55142: LD_VAR 0 8
55146: PUSH
55147: LD_INT 6
55149: ARRAY
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: LD_INT 2
55156: PUSH
55157: LD_INT 7
55159: PUSH
55160: LD_INT 9
55162: PUSH
55163: LD_INT 10
55165: PUSH
55166: LD_INT 11
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: IN
55177: NOT
55178: OR
55179: IFFALSE 55185
// exit ;
55181: POP
55182: POP
55183: GO 55268
// end ;
55185: GO 54856
55187: POP
55188: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55189: LD_VAR 0 9
55193: PPUSH
55194: LD_VAR 0 3
55198: PPUSH
55199: LD_VAR 0 4
55203: PPUSH
55204: LD_INT 20
55206: PPUSH
55207: CALL 47220 0 4
55211: PUSH
55212: LD_INT 4
55214: ARRAY
55215: IFFALSE 55219
// exit ;
55217: GO 55268
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55219: LD_VAR 0 2
55223: PUSH
55224: LD_INT 29
55226: PUSH
55227: LD_INT 30
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: IN
55234: PUSH
55235: LD_VAR 0 3
55239: PPUSH
55240: LD_VAR 0 4
55244: PPUSH
55245: LD_VAR 0 9
55249: PPUSH
55250: CALL_OW 440
55254: NOT
55255: AND
55256: IFFALSE 55260
// exit ;
55258: GO 55268
// result := true ;
55260: LD_ADDR_VAR 0 6
55264: PUSH
55265: LD_INT 1
55267: ST_TO_ADDR
// end ;
55268: LD_VAR 0 6
55272: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55273: LD_INT 0
55275: PPUSH
55276: PPUSH
55277: PPUSH
55278: PPUSH
55279: PPUSH
55280: PPUSH
55281: PPUSH
55282: PPUSH
55283: PPUSH
55284: PPUSH
55285: PPUSH
55286: PPUSH
55287: PPUSH
55288: PPUSH
55289: PPUSH
55290: PPUSH
55291: PPUSH
55292: PPUSH
55293: PPUSH
55294: PPUSH
55295: PPUSH
55296: PPUSH
55297: PPUSH
55298: PPUSH
55299: PPUSH
55300: PPUSH
55301: PPUSH
55302: PPUSH
55303: PPUSH
55304: PPUSH
55305: PPUSH
55306: PPUSH
55307: PPUSH
55308: PPUSH
55309: PPUSH
55310: PPUSH
55311: PPUSH
55312: PPUSH
55313: PPUSH
55314: PPUSH
55315: PPUSH
55316: PPUSH
55317: PPUSH
55318: PPUSH
55319: PPUSH
55320: PPUSH
55321: PPUSH
55322: PPUSH
55323: PPUSH
55324: PPUSH
55325: PPUSH
55326: PPUSH
55327: PPUSH
55328: PPUSH
55329: PPUSH
55330: PPUSH
55331: PPUSH
55332: PPUSH
// result = [ ] ;
55333: LD_ADDR_VAR 0 7
55337: PUSH
55338: EMPTY
55339: ST_TO_ADDR
// temp_list = [ ] ;
55340: LD_ADDR_VAR 0 9
55344: PUSH
55345: EMPTY
55346: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55347: LD_VAR 0 4
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: LD_INT 3
55363: PUSH
55364: LD_INT 4
55366: PUSH
55367: LD_INT 5
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: IN
55378: NOT
55379: PUSH
55380: LD_VAR 0 1
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: IN
55395: PUSH
55396: LD_VAR 0 5
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: LD_INT 3
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: LIST
55414: IN
55415: NOT
55416: AND
55417: OR
55418: IFFALSE 55422
// exit ;
55420: GO 73813
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55422: LD_VAR 0 1
55426: PUSH
55427: LD_INT 6
55429: PUSH
55430: LD_INT 7
55432: PUSH
55433: LD_INT 8
55435: PUSH
55436: LD_INT 13
55438: PUSH
55439: LD_INT 12
55441: PUSH
55442: LD_INT 15
55444: PUSH
55445: LD_INT 11
55447: PUSH
55448: LD_INT 14
55450: PUSH
55451: LD_INT 10
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: IN
55465: IFFALSE 55475
// btype = b_lab ;
55467: LD_ADDR_VAR 0 1
55471: PUSH
55472: LD_INT 6
55474: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55475: LD_VAR 0 6
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: LIST
55493: IN
55494: NOT
55495: PUSH
55496: LD_VAR 0 1
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: LD_INT 3
55512: PUSH
55513: LD_INT 6
55515: PUSH
55516: LD_INT 36
55518: PUSH
55519: LD_INT 4
55521: PUSH
55522: LD_INT 5
55524: PUSH
55525: LD_INT 31
55527: PUSH
55528: LD_INT 32
55530: PUSH
55531: LD_INT 33
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: IN
55547: NOT
55548: PUSH
55549: LD_VAR 0 6
55553: PUSH
55554: LD_INT 1
55556: EQUAL
55557: AND
55558: OR
55559: PUSH
55560: LD_VAR 0 1
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: LD_INT 3
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: IN
55575: NOT
55576: PUSH
55577: LD_VAR 0 6
55581: PUSH
55582: LD_INT 2
55584: EQUAL
55585: AND
55586: OR
55587: IFFALSE 55597
// mode = 0 ;
55589: LD_ADDR_VAR 0 6
55593: PUSH
55594: LD_INT 0
55596: ST_TO_ADDR
// case mode of 0 :
55597: LD_VAR 0 6
55601: PUSH
55602: LD_INT 0
55604: DOUBLE
55605: EQUAL
55606: IFTRUE 55610
55608: GO 67063
55610: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55611: LD_ADDR_VAR 0 11
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: LD_INT 2
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 3
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55804: LD_ADDR_VAR 0 12
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: NEG
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 2
55938: NEG
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 2
55950: NEG
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 3
55961: NEG
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 3
55972: NEG
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56000: LD_ADDR_VAR 0 13
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: LD_INT 2
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 2
56123: NEG
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 2
56135: NEG
56136: PUSH
56137: LD_INT 2
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: LD_INT 3
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 3
56159: NEG
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 3
56171: NEG
56172: PUSH
56173: LD_INT 3
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56199: LD_ADDR_VAR 0 14
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: LD_INT 2
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: LD_INT 2
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: LD_INT 2
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: LD_INT 3
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 3
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56395: LD_ADDR_VAR 0 15
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 2
56518: NEG
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 2
56529: NEG
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 3
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: LD_INT 1
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56588: LD_ADDR_VAR 0 16
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 2
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: LD_INT 2
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 2
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 2
56723: NEG
56724: PUSH
56725: LD_INT 2
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 3
56735: PUSH
56736: LD_INT 2
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 3
56745: PUSH
56746: LD_INT 3
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: LD_INT 3
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56781: LD_ADDR_VAR 0 17
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: LD_INT 2
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: LD_INT 1
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: NEG
56981: PUSH
56982: LD_INT 2
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57011: LD_ADDR_VAR 0 18
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 2
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: NEG
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 2
57198: NEG
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: NEG
57211: PUSH
57212: LD_INT 2
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57241: LD_ADDR_VAR 0 19
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: LD_INT 2
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 2
57366: PUSH
57367: LD_INT 1
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: PUSH
57377: LD_INT 2
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: LD_INT 2
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: NEG
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57471: LD_ADDR_VAR 0 20
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: LD_INT 2
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 2
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 2
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: LD_INT 2
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: LD_INT 1
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: LD_INT 2
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57701: LD_ADDR_VAR 0 21
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: LD_INT 2
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: LD_INT 2
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 2
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: LD_INT 2
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 2
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 2
57900: NEG
57901: PUSH
57902: LD_INT 2
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57931: LD_ADDR_VAR 0 22
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: LD_INT 2
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: LD_INT 2
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: LD_INT 2
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: LD_INT 2
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: NEG
58131: PUSH
58132: LD_INT 2
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58161: LD_ADDR_VAR 0 23
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: LD_INT 0
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: LD_INT 2
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 2
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 2
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: LD_INT 2
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: LD_INT 2
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 2
58348: NEG
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 2
58360: NEG
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 2
58372: NEG
58373: PUSH
58374: LD_INT 3
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: LD_INT 3
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58441: LD_ADDR_VAR 0 24
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: LD_INT 1
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: LD_INT 1
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: LD_INT 2
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 2
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: LD_INT 2
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: NEG
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: PUSH
58653: LD_INT 2
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 2
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 3
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 3
58684: PUSH
58685: LD_INT 2
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58717: LD_ADDR_VAR 0 25
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: LD_INT 2
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: LD_INT 2
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 2
58904: NEG
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 3
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 3
58938: PUSH
58939: LD_INT 2
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 2
58948: PUSH
58949: LD_INT 3
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: LD_INT 3
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58991: LD_ADDR_VAR 0 26
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 1
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: LD_INT 2
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 2
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: LD_INT 2
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 2
59167: NEG
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 2
59190: NEG
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 2
59202: PUSH
59203: LD_INT 3
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: LD_INT 3
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 2
59233: NEG
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59267: LD_ADDR_VAR 0 27
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: LD_INT 2
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 2
59443: NEG
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 2
59454: NEG
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: NEG
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: LD_INT 2
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 3
59500: NEG
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 3
59512: NEG
59513: PUSH
59514: LD_INT 2
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59547: LD_ADDR_VAR 0 28
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: LD_INT 2
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: LD_INT 2
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 2
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: LD_INT 2
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 2
59734: NEG
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 2
59746: NEG
59747: PUSH
59748: LD_INT 2
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 2
59758: NEG
59759: PUSH
59760: LD_INT 3
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: LD_INT 3
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 3
59782: NEG
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 3
59794: NEG
59795: PUSH
59796: LD_INT 2
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59829: LD_ADDR_VAR 0 29
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 1
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: LD_INT 2
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: LD_INT 2
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 2
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 2
60007: NEG
60008: PUSH
60009: LD_INT 2
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 2
60019: NEG
60020: PUSH
60021: LD_INT 3
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 3
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: LD_INT 3
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 3
60073: NEG
60074: PUSH
60075: LD_INT 2
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60108: LD_ADDR_VAR 0 30
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: NEG
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: LD_INT 2
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 0
60201: PUSH
60202: LD_INT 2
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: LD_INT 1
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 2
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 2
60233: PUSH
60234: LD_INT 1
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: LD_INT 2
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: LD_INT 2
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 1
60263: NEG
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 2
60274: NEG
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 2
60285: NEG
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: NEG
60298: PUSH
60299: LD_INT 3
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: LD_INT 2
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 3
60320: PUSH
60321: LD_INT 2
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 2
60330: PUSH
60331: LD_INT 3
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 2
60340: NEG
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 3
60351: NEG
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60386: LD_ADDR_VAR 0 31
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 0
60403: PUSH
60404: LD_INT 1
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: LD_INT 1
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 1
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: LD_INT 2
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 2
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 2
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 2
60510: PUSH
60511: LD_INT 2
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: LD_INT 2
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 2
60551: NEG
60552: PUSH
60553: LD_INT 1
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 2
60563: NEG
60564: PUSH
60565: LD_INT 2
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 2
60587: PUSH
60588: LD_INT 1
60590: NEG
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 3
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: LD_INT 3
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 1
60618: NEG
60619: PUSH
60620: LD_INT 2
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 3
60629: NEG
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60664: LD_ADDR_VAR 0 32
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 2
60760: NEG
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 2
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 2
60789: PUSH
60790: LD_INT 2
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: LD_INT 2
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: LD_INT 2
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: LD_INT 1
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 2
60830: NEG
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 2
60841: NEG
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: LD_INT 3
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 3
60876: PUSH
60877: LD_INT 2
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 2
60886: PUSH
60887: LD_INT 3
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 2
60896: NEG
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 3
60907: NEG
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60942: LD_ADDR_VAR 0 33
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: LD_INT 1
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 1
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: NEG
61012: PUSH
61013: LD_INT 1
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: NEG
61024: PUSH
61025: LD_INT 2
61027: NEG
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 2
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 2
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: LD_INT 2
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: LD_INT 2
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 2
61097: NEG
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: NEG
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 2
61120: NEG
61121: PUSH
61122: LD_INT 2
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 2
61132: NEG
61133: PUSH
61134: LD_INT 3
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 2
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 3
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: LD_INT 3
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 1
61175: NEG
61176: PUSH
61177: LD_INT 2
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 3
61186: NEG
61187: PUSH
61188: LD_INT 2
61190: NEG
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61221: LD_ADDR_VAR 0 34
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 1
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 1
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: LD_INT 1
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 1
61302: NEG
61303: PUSH
61304: LD_INT 2
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: LD_INT 2
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 2
61346: PUSH
61347: LD_INT 2
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: LD_INT 2
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 2
61377: NEG
61378: PUSH
61379: LD_INT 0
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 2
61388: NEG
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: NEG
61401: PUSH
61402: LD_INT 2
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: LD_INT 3
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 3
61435: PUSH
61436: LD_INT 2
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 2
61445: PUSH
61446: LD_INT 3
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 2
61455: NEG
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 3
61466: NEG
61467: PUSH
61468: LD_INT 1
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61501: LD_ADDR_VAR 0 35
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 0
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 2
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61613: LD_ADDR_VAR 0 36
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 1
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: LD_INT 1
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: LD_INT 1
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: NEG
61695: PUSH
61696: LD_INT 2
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: LD_INT 2
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61725: LD_ADDR_VAR 0 37
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 0
61742: PUSH
61743: LD_INT 1
61745: NEG
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 1
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: LD_INT 1
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: LD_INT 1
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 1
61794: NEG
61795: PUSH
61796: LD_INT 1
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61837: LD_ADDR_VAR 0 38
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 0
61854: PUSH
61855: LD_INT 1
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: LD_INT 1
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 2
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 2
61928: NEG
61929: PUSH
61930: LD_INT 1
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61949: LD_ADDR_VAR 0 39
61953: PUSH
61954: LD_INT 0
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 0
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: LD_INT 1
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 1
62018: NEG
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 1
62030: NEG
62031: PUSH
62032: LD_INT 2
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: LD_INT 2
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62061: LD_ADDR_VAR 0 40
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 1
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: LD_INT 1
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: NEG
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: NEG
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62173: LD_ADDR_VAR 0 41
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: LD_INT 0
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 0
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 1
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: LD_INT 1
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: LD_INT 1
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: NEG
62255: PUSH
62256: LD_INT 2
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: PUSH
62267: LD_INT 1
62269: NEG
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 2
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 2
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 2
62297: PUSH
62298: LD_INT 2
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: LD_INT 2
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 2
62328: NEG
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 2
62339: NEG
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 2
62351: NEG
62352: PUSH
62353: LD_INT 2
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 2
62363: NEG
62364: PUSH
62365: LD_INT 3
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 2
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 3
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 3
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 3
62406: PUSH
62407: LD_INT 2
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 3
62416: PUSH
62417: LD_INT 3
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 2
62426: PUSH
62427: LD_INT 3
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 2
62436: NEG
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 3
62447: NEG
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 3
62458: NEG
62459: PUSH
62460: LD_INT 1
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 3
62470: NEG
62471: PUSH
62472: LD_INT 2
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 3
62482: NEG
62483: PUSH
62484: LD_INT 3
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62523: LD_ADDR_VAR 0 42
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: LD_INT 1
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 1
62592: NEG
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: NEG
62605: PUSH
62606: LD_INT 2
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: LD_INT 2
62619: NEG
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 2
62638: PUSH
62639: LD_INT 1
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: LD_INT 2
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 1
62658: PUSH
62659: LD_INT 2
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: LD_INT 2
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: LD_INT 1
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 2
62689: NEG
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 2
62701: NEG
62702: PUSH
62703: LD_INT 2
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: LD_INT 3
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 1
62725: NEG
62726: PUSH
62727: LD_INT 3
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: LD_INT 3
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: LD_INT 2
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 3
62759: PUSH
62760: LD_INT 2
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 3
62769: PUSH
62770: LD_INT 3
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 2
62779: PUSH
62780: LD_INT 3
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: LD_INT 3
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: LD_INT 3
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: NEG
62810: PUSH
62811: LD_INT 2
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 3
62820: NEG
62821: PUSH
62822: LD_INT 2
62824: NEG
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 3
62832: NEG
62833: PUSH
62834: LD_INT 3
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62873: LD_ADDR_VAR 0 43
62877: PUSH
62878: LD_INT 0
62880: PUSH
62881: LD_INT 0
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: LD_INT 1
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: LD_INT 0
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: LD_INT 1
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 1
62942: NEG
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 1
62954: NEG
62955: PUSH
62956: LD_INT 2
62958: NEG
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: LD_INT 2
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 2
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 2
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: PUSH
63009: LD_INT 2
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: LD_INT 2
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: LD_INT 1
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 2
63039: NEG
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 2
63050: NEG
63051: PUSH
63052: LD_INT 1
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: NEG
63063: PUSH
63064: LD_INT 3
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: LD_INT 3
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 1
63085: PUSH
63086: LD_INT 2
63088: NEG
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 2
63096: PUSH
63097: LD_INT 1
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 3
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 3
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 1
63127: PUSH
63128: LD_INT 3
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 0
63137: PUSH
63138: LD_INT 3
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 1
63147: NEG
63148: PUSH
63149: LD_INT 2
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 2
63158: NEG
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 3
63169: NEG
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 3
63180: NEG
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63221: LD_ADDR_VAR 0 44
63225: PUSH
63226: LD_INT 0
63228: PUSH
63229: LD_INT 0
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: LD_INT 1
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 1
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 1
63259: PUSH
63260: LD_INT 1
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: LD_INT 1
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 1
63290: NEG
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 1
63302: NEG
63303: PUSH
63304: LD_INT 2
63306: NEG
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: LD_INT 1
63317: NEG
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 2
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 2
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 2
63345: PUSH
63346: LD_INT 2
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 1
63355: PUSH
63356: LD_INT 2
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 1
63365: NEG
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 2
63376: NEG
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 2
63387: NEG
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 2
63399: NEG
63400: PUSH
63401: LD_INT 2
63403: NEG
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 2
63411: NEG
63412: PUSH
63413: LD_INT 3
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 2
63423: PUSH
63424: LD_INT 1
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 3
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 3
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 3
63454: PUSH
63455: LD_INT 2
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 3
63464: PUSH
63465: LD_INT 3
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 2
63474: PUSH
63475: LD_INT 3
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 2
63484: NEG
63485: PUSH
63486: LD_INT 1
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 3
63495: NEG
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 3
63506: NEG
63507: PUSH
63508: LD_INT 1
63510: NEG
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 3
63518: NEG
63519: PUSH
63520: LD_INT 2
63522: NEG
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 3
63530: NEG
63531: PUSH
63532: LD_INT 3
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63571: LD_ADDR_VAR 0 45
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: LD_INT 1
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: LD_INT 0
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 1
63609: PUSH
63610: LD_INT 1
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 0
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 1
63629: NEG
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 1
63640: NEG
63641: PUSH
63642: LD_INT 1
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 1
63652: NEG
63653: PUSH
63654: LD_INT 2
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: LD_INT 2
63667: NEG
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 2
63686: PUSH
63687: LD_INT 1
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 2
63696: PUSH
63697: LD_INT 2
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: LD_INT 2
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 0
63716: PUSH
63717: LD_INT 2
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: LD_INT 1
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 2
63737: NEG
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: NEG
63750: PUSH
63751: LD_INT 2
63753: NEG
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 2
63761: NEG
63762: PUSH
63763: LD_INT 3
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 1
63773: NEG
63774: PUSH
63775: LD_INT 3
63777: NEG
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 0
63785: PUSH
63786: LD_INT 3
63788: NEG
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: LD_INT 2
63799: NEG
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 3
63807: PUSH
63808: LD_INT 2
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 3
63817: PUSH
63818: LD_INT 3
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 2
63827: PUSH
63828: LD_INT 3
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 1
63837: PUSH
63838: LD_INT 3
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: LD_INT 3
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: LD_INT 2
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 3
63868: NEG
63869: PUSH
63870: LD_INT 2
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 3
63880: NEG
63881: PUSH
63882: LD_INT 3
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63921: LD_ADDR_VAR 0 46
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: LD_INT 1
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 1
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: LD_INT 1
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 1
63979: NEG
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: LD_INT 1
63994: NEG
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 1
64002: NEG
64003: PUSH
64004: LD_INT 2
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: LD_INT 2
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 1
64025: PUSH
64026: LD_INT 1
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 2
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 2
64046: PUSH
64047: LD_INT 1
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: LD_INT 2
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_INT 2
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: LD_INT 1
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 2
64087: NEG
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 2
64098: NEG
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: LD_INT 3
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: LD_INT 3
64125: NEG
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 1
64133: PUSH
64134: LD_INT 2
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 2
64144: PUSH
64145: LD_INT 1
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 3
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 3
64165: PUSH
64166: LD_INT 1
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 1
64175: PUSH
64176: LD_INT 3
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: LD_INT 3
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: LD_INT 2
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 2
64206: NEG
64207: PUSH
64208: LD_INT 1
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 3
64217: NEG
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 3
64228: NEG
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64269: LD_ADDR_VAR 0 47
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 1
64297: PUSH
64298: LD_INT 0
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: LD_INT 1
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 0
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 1
64327: NEG
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 1
64338: NEG
64339: PUSH
64340: LD_INT 1
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: PUSH
64352: LD_INT 2
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: LD_INT 2
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 1
64373: PUSH
64374: LD_INT 1
64376: NEG
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 2
64384: NEG
64385: PUSH
64386: LD_INT 1
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 2
64396: NEG
64397: PUSH
64398: LD_INT 2
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64420: LD_ADDR_VAR 0 48
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: LD_INT 0
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 0
64437: PUSH
64438: LD_INT 1
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 1
64448: PUSH
64449: LD_INT 0
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 1
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 0
64468: PUSH
64469: LD_INT 1
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: LD_INT 1
64493: NEG
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: LD_INT 2
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: LD_INT 2
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: PUSH
64525: LD_INT 1
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 2
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 2
64545: PUSH
64546: LD_INT 1
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64567: LD_ADDR_VAR 0 49
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: LD_INT 1
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: LD_INT 1
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: LD_INT 1
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: NEG
64626: PUSH
64627: LD_INT 0
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 1
64636: NEG
64637: PUSH
64638: LD_INT 1
64640: NEG
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 2
64659: PUSH
64660: LD_INT 0
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 2
64669: PUSH
64670: LD_INT 1
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 2
64679: PUSH
64680: LD_INT 2
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 1
64689: PUSH
64690: LD_INT 2
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64711: LD_ADDR_VAR 0 50
64715: PUSH
64716: LD_INT 0
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 1
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 1
64749: PUSH
64750: LD_INT 1
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: LD_INT 1
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: NEG
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 2
64792: PUSH
64793: LD_INT 1
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 2
64802: PUSH
64803: LD_INT 2
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: PUSH
64813: LD_INT 2
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: LD_INT 2
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: LD_INT 1
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64855: LD_ADDR_VAR 0 51
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 1
64883: PUSH
64884: LD_INT 0
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 1
64893: PUSH
64894: LD_INT 1
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 0
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 1
64913: NEG
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 1
64924: NEG
64925: PUSH
64926: LD_INT 1
64928: NEG
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 1
64936: PUSH
64937: LD_INT 2
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: LD_INT 2
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 1
64956: NEG
64957: PUSH
64958: LD_INT 1
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 2
64967: NEG
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 2
64978: NEG
64979: PUSH
64980: LD_INT 1
64982: NEG
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65002: LD_ADDR_VAR 0 52
65006: PUSH
65007: LD_INT 0
65009: PUSH
65010: LD_INT 0
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: LD_INT 1
65022: NEG
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 1
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 1
65040: PUSH
65041: LD_INT 1
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 0
65050: PUSH
65051: LD_INT 1
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 1
65060: NEG
65061: PUSH
65062: LD_INT 0
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 1
65071: NEG
65072: PUSH
65073: LD_INT 1
65075: NEG
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: PUSH
65085: LD_INT 2
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 1
65095: NEG
65096: PUSH
65097: LD_INT 1
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 2
65106: NEG
65107: PUSH
65108: LD_INT 0
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 2
65117: NEG
65118: PUSH
65119: LD_INT 1
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 2
65129: NEG
65130: PUSH
65131: LD_INT 2
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65153: LD_ADDR_VAR 0 53
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 0
65170: PUSH
65171: LD_INT 1
65173: NEG
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 1
65181: PUSH
65182: LD_INT 0
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 1
65191: PUSH
65192: LD_INT 1
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 0
65201: PUSH
65202: LD_INT 1
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 1
65211: NEG
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 1
65222: NEG
65223: PUSH
65224: LD_INT 1
65226: NEG
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 1
65234: NEG
65235: PUSH
65236: LD_INT 2
65238: NEG
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 0
65246: PUSH
65247: LD_INT 2
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 1
65257: PUSH
65258: LD_INT 1
65260: NEG
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 2
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 2
65278: PUSH
65279: LD_INT 1
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 2
65288: PUSH
65289: LD_INT 2
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 1
65298: PUSH
65299: LD_INT 2
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: LD_INT 2
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 1
65318: NEG
65319: PUSH
65320: LD_INT 1
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 2
65329: NEG
65330: PUSH
65331: LD_INT 0
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 2
65340: NEG
65341: PUSH
65342: LD_INT 1
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 2
65352: NEG
65353: PUSH
65354: LD_INT 2
65356: NEG
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65383: LD_ADDR_VAR 0 54
65387: PUSH
65388: LD_INT 0
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 0
65400: PUSH
65401: LD_INT 1
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 1
65411: PUSH
65412: LD_INT 0
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 1
65421: PUSH
65422: LD_INT 1
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 1
65441: NEG
65442: PUSH
65443: LD_INT 0
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 1
65452: NEG
65453: PUSH
65454: LD_INT 1
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 1
65464: NEG
65465: PUSH
65466: LD_INT 2
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: LD_INT 2
65479: NEG
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 1
65487: PUSH
65488: LD_INT 1
65490: NEG
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 2
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 2
65508: PUSH
65509: LD_INT 1
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 2
65518: PUSH
65519: LD_INT 2
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 1
65528: PUSH
65529: LD_INT 2
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 0
65538: PUSH
65539: LD_INT 2
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 1
65548: NEG
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 2
65559: NEG
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 2
65570: NEG
65571: PUSH
65572: LD_INT 1
65574: NEG
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 2
65582: NEG
65583: PUSH
65584: LD_INT 2
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65613: LD_ADDR_VAR 0 55
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 0
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 1
65641: PUSH
65642: LD_INT 0
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: LD_INT 1
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 0
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 1
65671: NEG
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 1
65682: NEG
65683: PUSH
65684: LD_INT 1
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 1
65694: NEG
65695: PUSH
65696: LD_INT 2
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 0
65706: PUSH
65707: LD_INT 2
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 1
65717: PUSH
65718: LD_INT 1
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 2
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 2
65738: PUSH
65739: LD_INT 1
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 2
65748: PUSH
65749: LD_INT 2
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 1
65758: PUSH
65759: LD_INT 2
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 0
65768: PUSH
65769: LD_INT 2
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 1
65778: NEG
65779: PUSH
65780: LD_INT 1
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 2
65789: NEG
65790: PUSH
65791: LD_INT 0
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 2
65800: NEG
65801: PUSH
65802: LD_INT 1
65804: NEG
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 2
65812: NEG
65813: PUSH
65814: LD_INT 2
65816: NEG
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65843: LD_ADDR_VAR 0 56
65847: PUSH
65848: LD_INT 0
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: LD_INT 1
65863: NEG
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 1
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 1
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 0
65891: PUSH
65892: LD_INT 1
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 1
65901: NEG
65902: PUSH
65903: LD_INT 0
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 1
65912: NEG
65913: PUSH
65914: LD_INT 1
65916: NEG
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 1
65924: NEG
65925: PUSH
65926: LD_INT 2
65928: NEG
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 0
65936: PUSH
65937: LD_INT 2
65939: NEG
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 1
65947: PUSH
65948: LD_INT 1
65950: NEG
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 2
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 2
65968: PUSH
65969: LD_INT 1
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 2
65978: PUSH
65979: LD_INT 2
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 1
65988: PUSH
65989: LD_INT 2
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 0
65998: PUSH
65999: LD_INT 2
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 1
66008: NEG
66009: PUSH
66010: LD_INT 1
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 2
66019: NEG
66020: PUSH
66021: LD_INT 0
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 2
66030: NEG
66031: PUSH
66032: LD_INT 1
66034: NEG
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 2
66042: NEG
66043: PUSH
66044: LD_INT 2
66046: NEG
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66073: LD_ADDR_VAR 0 57
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: LD_INT 0
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 0
66090: PUSH
66091: LD_INT 1
66093: NEG
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 1
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 1
66111: PUSH
66112: LD_INT 1
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: LD_INT 1
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 1
66142: NEG
66143: PUSH
66144: LD_INT 1
66146: NEG
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 1
66154: NEG
66155: PUSH
66156: LD_INT 2
66158: NEG
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 0
66166: PUSH
66167: LD_INT 2
66169: NEG
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 1
66177: PUSH
66178: LD_INT 1
66180: NEG
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 2
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 2
66198: PUSH
66199: LD_INT 1
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: LD_INT 2
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 1
66218: PUSH
66219: LD_INT 2
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 0
66228: PUSH
66229: LD_INT 2
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 1
66238: NEG
66239: PUSH
66240: LD_INT 1
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 2
66249: NEG
66250: PUSH
66251: LD_INT 0
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 2
66260: NEG
66261: PUSH
66262: LD_INT 1
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 2
66272: NEG
66273: PUSH
66274: LD_INT 2
66276: NEG
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66303: LD_ADDR_VAR 0 58
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: LD_INT 0
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 0
66320: PUSH
66321: LD_INT 1
66323: NEG
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 1
66331: PUSH
66332: LD_INT 0
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 1
66341: PUSH
66342: LD_INT 1
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: LD_INT 1
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 1
66361: NEG
66362: PUSH
66363: LD_INT 0
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 1
66372: NEG
66373: PUSH
66374: LD_INT 1
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 1
66384: NEG
66385: PUSH
66386: LD_INT 2
66388: NEG
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 0
66396: PUSH
66397: LD_INT 2
66399: NEG
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 1
66407: PUSH
66408: LD_INT 1
66410: NEG
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 2
66418: PUSH
66419: LD_INT 0
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 2
66428: PUSH
66429: LD_INT 1
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 2
66438: PUSH
66439: LD_INT 2
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 1
66448: PUSH
66449: LD_INT 2
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 0
66458: PUSH
66459: LD_INT 2
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 1
66468: NEG
66469: PUSH
66470: LD_INT 1
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 2
66479: NEG
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 2
66490: NEG
66491: PUSH
66492: LD_INT 1
66494: NEG
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 2
66502: NEG
66503: PUSH
66504: LD_INT 2
66506: NEG
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66533: LD_ADDR_VAR 0 59
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: LD_INT 0
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 0
66550: PUSH
66551: LD_INT 1
66553: NEG
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 1
66561: PUSH
66562: LD_INT 0
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 1
66571: PUSH
66572: LD_INT 1
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: LD_INT 1
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 1
66591: NEG
66592: PUSH
66593: LD_INT 0
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 1
66602: NEG
66603: PUSH
66604: LD_INT 1
66606: NEG
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66621: LD_ADDR_VAR 0 60
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: LD_INT 0
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 0
66638: PUSH
66639: LD_INT 1
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 1
66649: PUSH
66650: LD_INT 0
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 1
66659: PUSH
66660: LD_INT 1
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 1
66679: NEG
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 1
66690: NEG
66691: PUSH
66692: LD_INT 1
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66709: LD_ADDR_VAR 0 61
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: LD_INT 0
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: LD_INT 1
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 1
66737: PUSH
66738: LD_INT 0
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 1
66747: PUSH
66748: LD_INT 1
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: LD_INT 1
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 1
66767: NEG
66768: PUSH
66769: LD_INT 0
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: NEG
66779: PUSH
66780: LD_INT 1
66782: NEG
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66797: LD_ADDR_VAR 0 62
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: LD_INT 0
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 0
66814: PUSH
66815: LD_INT 1
66817: NEG
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 1
66825: PUSH
66826: LD_INT 0
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 1
66835: PUSH
66836: LD_INT 1
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 0
66845: PUSH
66846: LD_INT 1
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 1
66855: NEG
66856: PUSH
66857: LD_INT 0
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 1
66866: NEG
66867: PUSH
66868: LD_INT 1
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66885: LD_ADDR_VAR 0 63
66889: PUSH
66890: LD_INT 0
66892: PUSH
66893: LD_INT 0
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 0
66902: PUSH
66903: LD_INT 1
66905: NEG
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 1
66913: PUSH
66914: LD_INT 0
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 1
66923: PUSH
66924: LD_INT 1
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 0
66933: PUSH
66934: LD_INT 1
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 1
66943: NEG
66944: PUSH
66945: LD_INT 0
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 1
66954: NEG
66955: PUSH
66956: LD_INT 1
66958: NEG
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66973: LD_ADDR_VAR 0 64
66977: PUSH
66978: LD_INT 0
66980: PUSH
66981: LD_INT 0
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 0
66990: PUSH
66991: LD_INT 1
66993: NEG
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 1
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 1
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 0
67021: PUSH
67022: LD_INT 1
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 1
67031: NEG
67032: PUSH
67033: LD_INT 0
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 1
67042: NEG
67043: PUSH
67044: LD_INT 1
67046: NEG
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: ST_TO_ADDR
// end ; 1 :
67061: GO 72958
67063: LD_INT 1
67065: DOUBLE
67066: EQUAL
67067: IFTRUE 67071
67069: GO 69694
67071: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67072: LD_ADDR_VAR 0 11
67076: PUSH
67077: LD_INT 1
67079: NEG
67080: PUSH
67081: LD_INT 3
67083: NEG
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 0
67091: PUSH
67092: LD_INT 3
67094: NEG
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 1
67102: PUSH
67103: LD_INT 2
67105: NEG
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: LIST
67115: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67116: LD_ADDR_VAR 0 12
67120: PUSH
67121: LD_INT 2
67123: PUSH
67124: LD_INT 1
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 3
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 3
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: LIST
67156: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67157: LD_ADDR_VAR 0 13
67161: PUSH
67162: LD_INT 3
67164: PUSH
67165: LD_INT 2
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 3
67174: PUSH
67175: LD_INT 3
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 2
67184: PUSH
67185: LD_INT 3
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: LIST
67196: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67197: LD_ADDR_VAR 0 14
67201: PUSH
67202: LD_INT 1
67204: PUSH
67205: LD_INT 3
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 0
67214: PUSH
67215: LD_INT 3
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 1
67224: NEG
67225: PUSH
67226: LD_INT 2
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: LIST
67237: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67238: LD_ADDR_VAR 0 15
67242: PUSH
67243: LD_INT 2
67245: NEG
67246: PUSH
67247: LD_INT 1
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 3
67256: NEG
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 3
67267: NEG
67268: PUSH
67269: LD_INT 1
67271: NEG
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: LIST
67281: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67282: LD_ADDR_VAR 0 16
67286: PUSH
67287: LD_INT 2
67289: NEG
67290: PUSH
67291: LD_INT 3
67293: NEG
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 3
67301: NEG
67302: PUSH
67303: LD_INT 2
67305: NEG
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 3
67313: NEG
67314: PUSH
67315: LD_INT 3
67317: NEG
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: LIST
67327: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67328: LD_ADDR_VAR 0 17
67332: PUSH
67333: LD_INT 1
67335: NEG
67336: PUSH
67337: LD_INT 3
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: LD_INT 3
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 1
67358: PUSH
67359: LD_INT 2
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: LIST
67371: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67372: LD_ADDR_VAR 0 18
67376: PUSH
67377: LD_INT 2
67379: PUSH
67380: LD_INT 1
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 3
67390: PUSH
67391: LD_INT 0
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 3
67400: PUSH
67401: LD_INT 1
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: LIST
67412: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67413: LD_ADDR_VAR 0 19
67417: PUSH
67418: LD_INT 3
67420: PUSH
67421: LD_INT 2
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 3
67430: PUSH
67431: LD_INT 3
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 2
67440: PUSH
67441: LD_INT 3
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: LIST
67452: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67453: LD_ADDR_VAR 0 20
67457: PUSH
67458: LD_INT 1
67460: PUSH
67461: LD_INT 3
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 0
67470: PUSH
67471: LD_INT 3
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 1
67480: NEG
67481: PUSH
67482: LD_INT 2
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: LIST
67493: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67494: LD_ADDR_VAR 0 21
67498: PUSH
67499: LD_INT 2
67501: NEG
67502: PUSH
67503: LD_INT 1
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 3
67512: NEG
67513: PUSH
67514: LD_INT 0
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 3
67523: NEG
67524: PUSH
67525: LD_INT 1
67527: NEG
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: LIST
67537: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67538: LD_ADDR_VAR 0 22
67542: PUSH
67543: LD_INT 2
67545: NEG
67546: PUSH
67547: LD_INT 3
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 3
67557: NEG
67558: PUSH
67559: LD_INT 2
67561: NEG
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 3
67569: NEG
67570: PUSH
67571: LD_INT 3
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: LIST
67583: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67584: LD_ADDR_VAR 0 23
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: LD_INT 3
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 1
67602: NEG
67603: PUSH
67604: LD_INT 4
67606: NEG
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 1
67614: PUSH
67615: LD_INT 3
67617: NEG
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: LIST
67627: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67628: LD_ADDR_VAR 0 24
67632: PUSH
67633: LD_INT 3
67635: PUSH
67636: LD_INT 0
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 3
67645: PUSH
67646: LD_INT 1
67648: NEG
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 4
67656: PUSH
67657: LD_INT 1
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: LIST
67668: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67669: LD_ADDR_VAR 0 25
67673: PUSH
67674: LD_INT 3
67676: PUSH
67677: LD_INT 3
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 4
67686: PUSH
67687: LD_INT 3
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 3
67696: PUSH
67697: LD_INT 4
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: LIST
67708: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67709: LD_ADDR_VAR 0 26
67713: PUSH
67714: LD_INT 0
67716: PUSH
67717: LD_INT 3
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 1
67726: PUSH
67727: LD_INT 4
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 1
67736: NEG
67737: PUSH
67738: LD_INT 3
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: LIST
67749: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67750: LD_ADDR_VAR 0 27
67754: PUSH
67755: LD_INT 3
67757: NEG
67758: PUSH
67759: LD_INT 0
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 3
67768: NEG
67769: PUSH
67770: LD_INT 1
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 4
67779: NEG
67780: PUSH
67781: LD_INT 1
67783: NEG
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: LIST
67793: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67794: LD_ADDR_VAR 0 28
67798: PUSH
67799: LD_INT 3
67801: NEG
67802: PUSH
67803: LD_INT 3
67805: NEG
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 3
67813: NEG
67814: PUSH
67815: LD_INT 4
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 4
67825: NEG
67826: PUSH
67827: LD_INT 3
67829: NEG
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: LIST
67839: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67840: LD_ADDR_VAR 0 29
67844: PUSH
67845: LD_INT 1
67847: NEG
67848: PUSH
67849: LD_INT 3
67851: NEG
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: LD_INT 3
67862: NEG
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 1
67870: PUSH
67871: LD_INT 2
67873: NEG
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 1
67881: NEG
67882: PUSH
67883: LD_INT 4
67885: NEG
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 0
67893: PUSH
67894: LD_INT 4
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 1
67904: PUSH
67905: LD_INT 3
67907: NEG
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 1
67915: NEG
67916: PUSH
67917: LD_INT 5
67919: NEG
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 0
67927: PUSH
67928: LD_INT 5
67930: NEG
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 1
67938: PUSH
67939: LD_INT 4
67941: NEG
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 1
67949: NEG
67950: PUSH
67951: LD_INT 6
67953: NEG
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 0
67961: PUSH
67962: LD_INT 6
67964: NEG
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 1
67972: PUSH
67973: LD_INT 5
67975: NEG
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67995: LD_ADDR_VAR 0 30
67999: PUSH
68000: LD_INT 2
68002: PUSH
68003: LD_INT 1
68005: NEG
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 3
68013: PUSH
68014: LD_INT 0
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 3
68023: PUSH
68024: LD_INT 1
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 3
68033: PUSH
68034: LD_INT 1
68036: NEG
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 4
68044: PUSH
68045: LD_INT 0
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 4
68054: PUSH
68055: LD_INT 1
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 4
68064: PUSH
68065: LD_INT 1
68067: NEG
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 5
68075: PUSH
68076: LD_INT 0
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 5
68085: PUSH
68086: LD_INT 1
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 5
68095: PUSH
68096: LD_INT 1
68098: NEG
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 6
68106: PUSH
68107: LD_INT 0
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 6
68116: PUSH
68117: LD_INT 1
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68138: LD_ADDR_VAR 0 31
68142: PUSH
68143: LD_INT 3
68145: PUSH
68146: LD_INT 2
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 3
68155: PUSH
68156: LD_INT 3
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 2
68165: PUSH
68166: LD_INT 3
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 4
68175: PUSH
68176: LD_INT 3
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 4
68185: PUSH
68186: LD_INT 4
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 3
68195: PUSH
68196: LD_INT 4
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 5
68205: PUSH
68206: LD_INT 4
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 5
68215: PUSH
68216: LD_INT 5
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 4
68225: PUSH
68226: LD_INT 5
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 6
68235: PUSH
68236: LD_INT 5
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 6
68245: PUSH
68246: LD_INT 6
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 5
68255: PUSH
68256: LD_INT 6
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68277: LD_ADDR_VAR 0 32
68281: PUSH
68282: LD_INT 1
68284: PUSH
68285: LD_INT 3
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 0
68294: PUSH
68295: LD_INT 3
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 1
68304: NEG
68305: PUSH
68306: LD_INT 2
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 1
68315: PUSH
68316: LD_INT 4
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 0
68325: PUSH
68326: LD_INT 4
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 1
68335: NEG
68336: PUSH
68337: LD_INT 3
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 1
68346: PUSH
68347: LD_INT 5
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 0
68356: PUSH
68357: LD_INT 5
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 1
68366: NEG
68367: PUSH
68368: LD_INT 4
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 1
68377: PUSH
68378: LD_INT 6
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 0
68387: PUSH
68388: LD_INT 6
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 1
68397: NEG
68398: PUSH
68399: LD_INT 5
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68420: LD_ADDR_VAR 0 33
68424: PUSH
68425: LD_INT 2
68427: NEG
68428: PUSH
68429: LD_INT 1
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 3
68438: NEG
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 3
68449: NEG
68450: PUSH
68451: LD_INT 1
68453: NEG
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 3
68461: NEG
68462: PUSH
68463: LD_INT 1
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: LD_INT 4
68472: NEG
68473: PUSH
68474: LD_INT 0
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 4
68483: NEG
68484: PUSH
68485: LD_INT 1
68487: NEG
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 4
68495: NEG
68496: PUSH
68497: LD_INT 1
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 5
68506: NEG
68507: PUSH
68508: LD_INT 0
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 5
68517: NEG
68518: PUSH
68519: LD_INT 1
68521: NEG
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 5
68529: NEG
68530: PUSH
68531: LD_INT 1
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 6
68540: NEG
68541: PUSH
68542: LD_INT 0
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 6
68551: NEG
68552: PUSH
68553: LD_INT 1
68555: NEG
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68575: LD_ADDR_VAR 0 34
68579: PUSH
68580: LD_INT 2
68582: NEG
68583: PUSH
68584: LD_INT 3
68586: NEG
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 3
68594: NEG
68595: PUSH
68596: LD_INT 2
68598: NEG
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 3
68606: NEG
68607: PUSH
68608: LD_INT 3
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 3
68618: NEG
68619: PUSH
68620: LD_INT 4
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 4
68630: NEG
68631: PUSH
68632: LD_INT 3
68634: NEG
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 4
68642: NEG
68643: PUSH
68644: LD_INT 4
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 4
68654: NEG
68655: PUSH
68656: LD_INT 5
68658: NEG
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 5
68666: NEG
68667: PUSH
68668: LD_INT 4
68670: NEG
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 5
68678: NEG
68679: PUSH
68680: LD_INT 5
68682: NEG
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 5
68690: NEG
68691: PUSH
68692: LD_INT 6
68694: NEG
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 6
68702: NEG
68703: PUSH
68704: LD_INT 5
68706: NEG
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 6
68714: NEG
68715: PUSH
68716: LD_INT 6
68718: NEG
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68738: LD_ADDR_VAR 0 41
68742: PUSH
68743: LD_INT 0
68745: PUSH
68746: LD_INT 2
68748: NEG
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 1
68756: NEG
68757: PUSH
68758: LD_INT 3
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 1
68768: PUSH
68769: LD_INT 2
68771: NEG
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: LIST
68781: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68782: LD_ADDR_VAR 0 42
68786: PUSH
68787: LD_INT 2
68789: PUSH
68790: LD_INT 0
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 2
68799: PUSH
68800: LD_INT 1
68802: NEG
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 3
68810: PUSH
68811: LD_INT 1
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: LIST
68822: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68823: LD_ADDR_VAR 0 43
68827: PUSH
68828: LD_INT 2
68830: PUSH
68831: LD_INT 2
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 3
68840: PUSH
68841: LD_INT 2
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 2
68850: PUSH
68851: LD_INT 3
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: LIST
68862: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68863: LD_ADDR_VAR 0 44
68867: PUSH
68868: LD_INT 0
68870: PUSH
68871: LD_INT 2
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 1
68880: PUSH
68881: LD_INT 3
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 1
68890: NEG
68891: PUSH
68892: LD_INT 2
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: LIST
68903: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68904: LD_ADDR_VAR 0 45
68908: PUSH
68909: LD_INT 2
68911: NEG
68912: PUSH
68913: LD_INT 0
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 2
68922: NEG
68923: PUSH
68924: LD_INT 1
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 3
68933: NEG
68934: PUSH
68935: LD_INT 1
68937: NEG
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: LIST
68947: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68948: LD_ADDR_VAR 0 46
68952: PUSH
68953: LD_INT 2
68955: NEG
68956: PUSH
68957: LD_INT 2
68959: NEG
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 2
68967: NEG
68968: PUSH
68969: LD_INT 3
68971: NEG
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 3
68979: NEG
68980: PUSH
68981: LD_INT 2
68983: NEG
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: LIST
68993: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68994: LD_ADDR_VAR 0 47
68998: PUSH
68999: LD_INT 2
69001: NEG
69002: PUSH
69003: LD_INT 3
69005: NEG
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: PUSH
69011: LD_INT 1
69013: NEG
69014: PUSH
69015: LD_INT 3
69017: NEG
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69027: LD_ADDR_VAR 0 48
69031: PUSH
69032: LD_INT 1
69034: PUSH
69035: LD_INT 2
69037: NEG
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 2
69045: PUSH
69046: LD_INT 1
69048: NEG
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69058: LD_ADDR_VAR 0 49
69062: PUSH
69063: LD_INT 3
69065: PUSH
69066: LD_INT 1
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 3
69075: PUSH
69076: LD_INT 2
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69087: LD_ADDR_VAR 0 50
69091: PUSH
69092: LD_INT 2
69094: PUSH
69095: LD_INT 3
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 1
69104: PUSH
69105: LD_INT 3
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69116: LD_ADDR_VAR 0 51
69120: PUSH
69121: LD_INT 1
69123: NEG
69124: PUSH
69125: LD_INT 2
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 2
69134: NEG
69135: PUSH
69136: LD_INT 1
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69147: LD_ADDR_VAR 0 52
69151: PUSH
69152: LD_INT 3
69154: NEG
69155: PUSH
69156: LD_INT 1
69158: NEG
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 3
69166: NEG
69167: PUSH
69168: LD_INT 2
69170: NEG
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69180: LD_ADDR_VAR 0 53
69184: PUSH
69185: LD_INT 1
69187: NEG
69188: PUSH
69189: LD_INT 3
69191: NEG
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 0
69199: PUSH
69200: LD_INT 3
69202: NEG
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 1
69210: PUSH
69211: LD_INT 2
69213: NEG
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: LIST
69223: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69224: LD_ADDR_VAR 0 54
69228: PUSH
69229: LD_INT 2
69231: PUSH
69232: LD_INT 1
69234: NEG
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 3
69242: PUSH
69243: LD_INT 0
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 3
69252: PUSH
69253: LD_INT 1
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: LIST
69264: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69265: LD_ADDR_VAR 0 55
69269: PUSH
69270: LD_INT 3
69272: PUSH
69273: LD_INT 2
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 3
69282: PUSH
69283: LD_INT 3
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 2
69292: PUSH
69293: LD_INT 3
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: LIST
69304: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69305: LD_ADDR_VAR 0 56
69309: PUSH
69310: LD_INT 1
69312: PUSH
69313: LD_INT 3
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 0
69322: PUSH
69323: LD_INT 3
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 1
69332: NEG
69333: PUSH
69334: LD_INT 2
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: LIST
69345: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69346: LD_ADDR_VAR 0 57
69350: PUSH
69351: LD_INT 2
69353: NEG
69354: PUSH
69355: LD_INT 1
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 3
69364: NEG
69365: PUSH
69366: LD_INT 0
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 3
69375: NEG
69376: PUSH
69377: LD_INT 1
69379: NEG
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: LIST
69389: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69390: LD_ADDR_VAR 0 58
69394: PUSH
69395: LD_INT 2
69397: NEG
69398: PUSH
69399: LD_INT 3
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 3
69409: NEG
69410: PUSH
69411: LD_INT 2
69413: NEG
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 3
69421: NEG
69422: PUSH
69423: LD_INT 3
69425: NEG
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: LIST
69435: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69436: LD_ADDR_VAR 0 59
69440: PUSH
69441: LD_INT 1
69443: NEG
69444: PUSH
69445: LD_INT 2
69447: NEG
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 0
69455: PUSH
69456: LD_INT 2
69458: NEG
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 1
69466: PUSH
69467: LD_INT 1
69469: NEG
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: LIST
69479: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69480: LD_ADDR_VAR 0 60
69484: PUSH
69485: LD_INT 1
69487: PUSH
69488: LD_INT 1
69490: NEG
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 2
69498: PUSH
69499: LD_INT 0
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 2
69508: PUSH
69509: LD_INT 1
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: LIST
69520: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69521: LD_ADDR_VAR 0 61
69525: PUSH
69526: LD_INT 2
69528: PUSH
69529: LD_INT 1
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 2
69538: PUSH
69539: LD_INT 2
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 1
69548: PUSH
69549: LD_INT 2
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: LIST
69560: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69561: LD_ADDR_VAR 0 62
69565: PUSH
69566: LD_INT 1
69568: PUSH
69569: LD_INT 2
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 0
69578: PUSH
69579: LD_INT 2
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 1
69588: NEG
69589: PUSH
69590: LD_INT 1
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: LIST
69601: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69602: LD_ADDR_VAR 0 63
69606: PUSH
69607: LD_INT 1
69609: NEG
69610: PUSH
69611: LD_INT 1
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 2
69620: NEG
69621: PUSH
69622: LD_INT 0
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 2
69631: NEG
69632: PUSH
69633: LD_INT 1
69635: NEG
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: LIST
69645: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69646: LD_ADDR_VAR 0 64
69650: PUSH
69651: LD_INT 1
69653: NEG
69654: PUSH
69655: LD_INT 2
69657: NEG
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 2
69665: NEG
69666: PUSH
69667: LD_INT 1
69669: NEG
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 2
69677: NEG
69678: PUSH
69679: LD_INT 2
69681: NEG
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: LIST
69691: ST_TO_ADDR
// end ; 2 :
69692: GO 72958
69694: LD_INT 2
69696: DOUBLE
69697: EQUAL
69698: IFTRUE 69702
69700: GO 72957
69702: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69703: LD_ADDR_VAR 0 29
69707: PUSH
69708: LD_INT 4
69710: PUSH
69711: LD_INT 0
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 4
69720: PUSH
69721: LD_INT 1
69723: NEG
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 5
69731: PUSH
69732: LD_INT 0
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 5
69741: PUSH
69742: LD_INT 1
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 4
69751: PUSH
69752: LD_INT 1
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 3
69761: PUSH
69762: LD_INT 0
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 3
69771: PUSH
69772: LD_INT 1
69774: NEG
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 3
69782: PUSH
69783: LD_INT 2
69785: NEG
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 5
69793: PUSH
69794: LD_INT 2
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 3
69803: PUSH
69804: LD_INT 3
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 3
69813: PUSH
69814: LD_INT 2
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 4
69823: PUSH
69824: LD_INT 3
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 4
69833: PUSH
69834: LD_INT 4
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 3
69843: PUSH
69844: LD_INT 4
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 2
69853: PUSH
69854: LD_INT 3
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 2
69863: PUSH
69864: LD_INT 2
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 4
69873: PUSH
69874: LD_INT 2
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 2
69883: PUSH
69884: LD_INT 4
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 0
69893: PUSH
69894: LD_INT 4
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 0
69903: PUSH
69904: LD_INT 3
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: LD_INT 1
69913: PUSH
69914: LD_INT 4
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 1
69923: PUSH
69924: LD_INT 5
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 0
69933: PUSH
69934: LD_INT 5
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 1
69943: NEG
69944: PUSH
69945: LD_INT 4
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 1
69954: NEG
69955: PUSH
69956: LD_INT 3
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 2
69965: PUSH
69966: LD_INT 5
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 2
69975: NEG
69976: PUSH
69977: LD_INT 3
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 3
69986: NEG
69987: PUSH
69988: LD_INT 0
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 3
69997: NEG
69998: PUSH
69999: LD_INT 1
70001: NEG
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 2
70009: NEG
70010: PUSH
70011: LD_INT 0
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 2
70020: NEG
70021: PUSH
70022: LD_INT 1
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 3
70031: NEG
70032: PUSH
70033: LD_INT 1
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 4
70042: NEG
70043: PUSH
70044: LD_INT 0
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 4
70053: NEG
70054: PUSH
70055: LD_INT 1
70057: NEG
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 4
70065: NEG
70066: PUSH
70067: LD_INT 2
70069: NEG
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: LD_INT 2
70077: NEG
70078: PUSH
70079: LD_INT 2
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 4
70088: NEG
70089: PUSH
70090: LD_INT 4
70092: NEG
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 4
70100: NEG
70101: PUSH
70102: LD_INT 5
70104: NEG
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 3
70112: NEG
70113: PUSH
70114: LD_INT 4
70116: NEG
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 3
70124: NEG
70125: PUSH
70126: LD_INT 3
70128: NEG
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 4
70136: NEG
70137: PUSH
70138: LD_INT 3
70140: NEG
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 5
70148: NEG
70149: PUSH
70150: LD_INT 4
70152: NEG
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 5
70160: NEG
70161: PUSH
70162: LD_INT 5
70164: NEG
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 3
70172: NEG
70173: PUSH
70174: LD_INT 5
70176: NEG
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 5
70184: NEG
70185: PUSH
70186: LD_INT 3
70188: NEG
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70241: LD_ADDR_VAR 0 30
70245: PUSH
70246: LD_INT 4
70248: PUSH
70249: LD_INT 4
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 4
70258: PUSH
70259: LD_INT 3
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 5
70268: PUSH
70269: LD_INT 4
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: LD_INT 5
70278: PUSH
70279: LD_INT 5
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: LD_INT 4
70288: PUSH
70289: LD_INT 5
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 3
70298: PUSH
70299: LD_INT 4
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 3
70308: PUSH
70309: LD_INT 3
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 5
70318: PUSH
70319: LD_INT 3
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: LD_INT 3
70328: PUSH
70329: LD_INT 5
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PUSH
70336: LD_INT 0
70338: PUSH
70339: LD_INT 3
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 0
70348: PUSH
70349: LD_INT 2
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 1
70358: PUSH
70359: LD_INT 3
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 1
70368: PUSH
70369: LD_INT 4
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: LD_INT 0
70378: PUSH
70379: LD_INT 4
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 1
70388: NEG
70389: PUSH
70390: LD_INT 3
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 1
70399: NEG
70400: PUSH
70401: LD_INT 2
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 2
70410: PUSH
70411: LD_INT 4
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 2
70420: NEG
70421: PUSH
70422: LD_INT 2
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 4
70431: NEG
70432: PUSH
70433: LD_INT 0
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 4
70442: NEG
70443: PUSH
70444: LD_INT 1
70446: NEG
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 3
70454: NEG
70455: PUSH
70456: LD_INT 0
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 3
70465: NEG
70466: PUSH
70467: LD_INT 1
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 4
70476: NEG
70477: PUSH
70478: LD_INT 1
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 5
70487: NEG
70488: PUSH
70489: LD_INT 0
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PUSH
70496: LD_INT 5
70498: NEG
70499: PUSH
70500: LD_INT 1
70502: NEG
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 5
70510: NEG
70511: PUSH
70512: LD_INT 2
70514: NEG
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 3
70522: NEG
70523: PUSH
70524: LD_INT 2
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 3
70533: NEG
70534: PUSH
70535: LD_INT 3
70537: NEG
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 3
70545: NEG
70546: PUSH
70547: LD_INT 4
70549: NEG
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 2
70557: NEG
70558: PUSH
70559: LD_INT 3
70561: NEG
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 2
70569: NEG
70570: PUSH
70571: LD_INT 2
70573: NEG
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 3
70581: NEG
70582: PUSH
70583: LD_INT 2
70585: NEG
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 4
70593: NEG
70594: PUSH
70595: LD_INT 3
70597: NEG
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 4
70605: NEG
70606: PUSH
70607: LD_INT 4
70609: NEG
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: LD_INT 2
70617: NEG
70618: PUSH
70619: LD_INT 4
70621: NEG
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 4
70629: NEG
70630: PUSH
70631: LD_INT 2
70633: NEG
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 0
70641: PUSH
70642: LD_INT 4
70644: NEG
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 0
70652: PUSH
70653: LD_INT 5
70655: NEG
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 1
70663: PUSH
70664: LD_INT 4
70666: NEG
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 1
70674: PUSH
70675: LD_INT 3
70677: NEG
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 0
70685: PUSH
70686: LD_INT 3
70688: NEG
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 1
70696: NEG
70697: PUSH
70698: LD_INT 4
70700: NEG
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 1
70708: NEG
70709: PUSH
70710: LD_INT 5
70712: NEG
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 2
70720: PUSH
70721: LD_INT 3
70723: NEG
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 2
70731: NEG
70732: PUSH
70733: LD_INT 5
70735: NEG
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70788: LD_ADDR_VAR 0 31
70792: PUSH
70793: LD_INT 0
70795: PUSH
70796: LD_INT 4
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 0
70805: PUSH
70806: LD_INT 3
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 1
70815: PUSH
70816: LD_INT 4
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 1
70825: PUSH
70826: LD_INT 5
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 0
70835: PUSH
70836: LD_INT 5
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PUSH
70843: LD_INT 1
70845: NEG
70846: PUSH
70847: LD_INT 4
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 1
70856: NEG
70857: PUSH
70858: LD_INT 3
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 2
70867: PUSH
70868: LD_INT 5
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 2
70877: NEG
70878: PUSH
70879: LD_INT 3
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 3
70888: NEG
70889: PUSH
70890: LD_INT 0
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 3
70899: NEG
70900: PUSH
70901: LD_INT 1
70903: NEG
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 2
70911: NEG
70912: PUSH
70913: LD_INT 0
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 2
70922: NEG
70923: PUSH
70924: LD_INT 1
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 3
70933: NEG
70934: PUSH
70935: LD_INT 1
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 4
70944: NEG
70945: PUSH
70946: LD_INT 0
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 4
70955: NEG
70956: PUSH
70957: LD_INT 1
70959: NEG
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 4
70967: NEG
70968: PUSH
70969: LD_INT 2
70971: NEG
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: LD_INT 2
70979: NEG
70980: PUSH
70981: LD_INT 2
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 4
70990: NEG
70991: PUSH
70992: LD_INT 4
70994: NEG
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 4
71002: NEG
71003: PUSH
71004: LD_INT 5
71006: NEG
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 3
71014: NEG
71015: PUSH
71016: LD_INT 4
71018: NEG
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 3
71026: NEG
71027: PUSH
71028: LD_INT 3
71030: NEG
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 4
71038: NEG
71039: PUSH
71040: LD_INT 3
71042: NEG
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: LD_INT 5
71050: NEG
71051: PUSH
71052: LD_INT 4
71054: NEG
71055: PUSH
71056: EMPTY
71057: LIST
71058: LIST
71059: PUSH
71060: LD_INT 5
71062: NEG
71063: PUSH
71064: LD_INT 5
71066: NEG
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 3
71074: NEG
71075: PUSH
71076: LD_INT 5
71078: NEG
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 5
71086: NEG
71087: PUSH
71088: LD_INT 3
71090: NEG
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: LD_INT 0
71098: PUSH
71099: LD_INT 3
71101: NEG
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PUSH
71107: LD_INT 0
71109: PUSH
71110: LD_INT 4
71112: NEG
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: LD_INT 1
71120: PUSH
71121: LD_INT 3
71123: NEG
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 1
71131: PUSH
71132: LD_INT 2
71134: NEG
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 0
71142: PUSH
71143: LD_INT 2
71145: NEG
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 1
71153: NEG
71154: PUSH
71155: LD_INT 3
71157: NEG
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: LD_INT 1
71165: NEG
71166: PUSH
71167: LD_INT 4
71169: NEG
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: LD_INT 2
71177: PUSH
71178: LD_INT 2
71180: NEG
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 2
71188: NEG
71189: PUSH
71190: LD_INT 4
71192: NEG
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 4
71200: PUSH
71201: LD_INT 0
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 4
71210: PUSH
71211: LD_INT 1
71213: NEG
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: LD_INT 5
71221: PUSH
71222: LD_INT 0
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 5
71231: PUSH
71232: LD_INT 1
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 4
71241: PUSH
71242: LD_INT 1
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: LD_INT 3
71251: PUSH
71252: LD_INT 0
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 3
71261: PUSH
71262: LD_INT 1
71264: NEG
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 3
71272: PUSH
71273: LD_INT 2
71275: NEG
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: LD_INT 5
71283: PUSH
71284: LD_INT 2
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71338: LD_ADDR_VAR 0 32
71342: PUSH
71343: LD_INT 4
71345: NEG
71346: PUSH
71347: LD_INT 0
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: LD_INT 4
71356: NEG
71357: PUSH
71358: LD_INT 1
71360: NEG
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 3
71368: NEG
71369: PUSH
71370: LD_INT 0
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 3
71379: NEG
71380: PUSH
71381: LD_INT 1
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 4
71390: NEG
71391: PUSH
71392: LD_INT 1
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 5
71401: NEG
71402: PUSH
71403: LD_INT 0
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: PUSH
71410: LD_INT 5
71412: NEG
71413: PUSH
71414: LD_INT 1
71416: NEG
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 5
71424: NEG
71425: PUSH
71426: LD_INT 2
71428: NEG
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 3
71436: NEG
71437: PUSH
71438: LD_INT 2
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 3
71447: NEG
71448: PUSH
71449: LD_INT 3
71451: NEG
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_INT 3
71459: NEG
71460: PUSH
71461: LD_INT 4
71463: NEG
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 2
71471: NEG
71472: PUSH
71473: LD_INT 3
71475: NEG
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 2
71483: NEG
71484: PUSH
71485: LD_INT 2
71487: NEG
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 3
71495: NEG
71496: PUSH
71497: LD_INT 2
71499: NEG
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 4
71507: NEG
71508: PUSH
71509: LD_INT 3
71511: NEG
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 4
71519: NEG
71520: PUSH
71521: LD_INT 4
71523: NEG
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 2
71531: NEG
71532: PUSH
71533: LD_INT 4
71535: NEG
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 4
71543: NEG
71544: PUSH
71545: LD_INT 2
71547: NEG
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 0
71555: PUSH
71556: LD_INT 4
71558: NEG
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 0
71566: PUSH
71567: LD_INT 5
71569: NEG
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 1
71577: PUSH
71578: LD_INT 4
71580: NEG
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: LD_INT 1
71588: PUSH
71589: LD_INT 3
71591: NEG
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 0
71599: PUSH
71600: LD_INT 3
71602: NEG
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PUSH
71608: LD_INT 1
71610: NEG
71611: PUSH
71612: LD_INT 4
71614: NEG
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PUSH
71620: LD_INT 1
71622: NEG
71623: PUSH
71624: LD_INT 5
71626: NEG
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: PUSH
71632: LD_INT 2
71634: PUSH
71635: LD_INT 3
71637: NEG
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 2
71645: NEG
71646: PUSH
71647: LD_INT 5
71649: NEG
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 3
71657: PUSH
71658: LD_INT 0
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 3
71667: PUSH
71668: LD_INT 1
71670: NEG
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: PUSH
71676: LD_INT 4
71678: PUSH
71679: LD_INT 0
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: PUSH
71686: LD_INT 4
71688: PUSH
71689: LD_INT 1
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 3
71698: PUSH
71699: LD_INT 1
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: LD_INT 2
71708: PUSH
71709: LD_INT 0
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: PUSH
71716: LD_INT 2
71718: PUSH
71719: LD_INT 1
71721: NEG
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 2
71729: PUSH
71730: LD_INT 2
71732: NEG
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: PUSH
71738: LD_INT 4
71740: PUSH
71741: LD_INT 2
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: PUSH
71748: LD_INT 4
71750: PUSH
71751: LD_INT 4
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 4
71760: PUSH
71761: LD_INT 3
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 5
71770: PUSH
71771: LD_INT 4
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: LD_INT 5
71780: PUSH
71781: LD_INT 5
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 4
71790: PUSH
71791: LD_INT 5
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 3
71800: PUSH
71801: LD_INT 4
71803: PUSH
71804: EMPTY
71805: LIST
71806: LIST
71807: PUSH
71808: LD_INT 3
71810: PUSH
71811: LD_INT 3
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 5
71820: PUSH
71821: LD_INT 3
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: PUSH
71828: LD_INT 3
71830: PUSH
71831: LD_INT 5
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: LIST
71847: LIST
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71885: LD_ADDR_VAR 0 33
71889: PUSH
71890: LD_INT 4
71892: NEG
71893: PUSH
71894: LD_INT 4
71896: NEG
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: LD_INT 4
71904: NEG
71905: PUSH
71906: LD_INT 5
71908: NEG
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: LD_INT 3
71916: NEG
71917: PUSH
71918: LD_INT 4
71920: NEG
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 3
71928: NEG
71929: PUSH
71930: LD_INT 3
71932: NEG
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 4
71940: NEG
71941: PUSH
71942: LD_INT 3
71944: NEG
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 5
71952: NEG
71953: PUSH
71954: LD_INT 4
71956: NEG
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: PUSH
71962: LD_INT 5
71964: NEG
71965: PUSH
71966: LD_INT 5
71968: NEG
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: LD_INT 3
71976: NEG
71977: PUSH
71978: LD_INT 5
71980: NEG
71981: PUSH
71982: EMPTY
71983: LIST
71984: LIST
71985: PUSH
71986: LD_INT 5
71988: NEG
71989: PUSH
71990: LD_INT 3
71992: NEG
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: PUSH
71998: LD_INT 0
72000: PUSH
72001: LD_INT 3
72003: NEG
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PUSH
72009: LD_INT 0
72011: PUSH
72012: LD_INT 4
72014: NEG
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 1
72022: PUSH
72023: LD_INT 3
72025: NEG
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 1
72033: PUSH
72034: LD_INT 2
72036: NEG
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 0
72044: PUSH
72045: LD_INT 2
72047: NEG
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 1
72055: NEG
72056: PUSH
72057: LD_INT 3
72059: NEG
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PUSH
72065: LD_INT 1
72067: NEG
72068: PUSH
72069: LD_INT 4
72071: NEG
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: LD_INT 2
72079: PUSH
72080: LD_INT 2
72082: NEG
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PUSH
72088: LD_INT 2
72090: NEG
72091: PUSH
72092: LD_INT 4
72094: NEG
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: LD_INT 4
72102: PUSH
72103: LD_INT 0
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: PUSH
72110: LD_INT 4
72112: PUSH
72113: LD_INT 1
72115: NEG
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: LD_INT 5
72123: PUSH
72124: LD_INT 0
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 5
72133: PUSH
72134: LD_INT 1
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: LD_INT 4
72143: PUSH
72144: LD_INT 1
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: LD_INT 3
72153: PUSH
72154: LD_INT 0
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: PUSH
72161: LD_INT 3
72163: PUSH
72164: LD_INT 1
72166: NEG
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_INT 3
72174: PUSH
72175: LD_INT 2
72177: NEG
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: PUSH
72183: LD_INT 5
72185: PUSH
72186: LD_INT 2
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: LD_INT 3
72195: PUSH
72196: LD_INT 3
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 3
72205: PUSH
72206: LD_INT 2
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PUSH
72213: LD_INT 4
72215: PUSH
72216: LD_INT 3
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: PUSH
72223: LD_INT 4
72225: PUSH
72226: LD_INT 4
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: LD_INT 3
72235: PUSH
72236: LD_INT 4
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 2
72245: PUSH
72246: LD_INT 3
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: PUSH
72253: LD_INT 2
72255: PUSH
72256: LD_INT 2
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: LD_INT 4
72265: PUSH
72266: LD_INT 2
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PUSH
72273: LD_INT 2
72275: PUSH
72276: LD_INT 4
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: PUSH
72283: LD_INT 0
72285: PUSH
72286: LD_INT 4
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: PUSH
72293: LD_INT 0
72295: PUSH
72296: LD_INT 3
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PUSH
72303: LD_INT 1
72305: PUSH
72306: LD_INT 4
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: PUSH
72313: LD_INT 1
72315: PUSH
72316: LD_INT 5
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: PUSH
72323: LD_INT 0
72325: PUSH
72326: LD_INT 5
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: PUSH
72333: LD_INT 1
72335: NEG
72336: PUSH
72337: LD_INT 4
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: LD_INT 1
72346: NEG
72347: PUSH
72348: LD_INT 3
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PUSH
72355: LD_INT 2
72357: PUSH
72358: LD_INT 5
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 2
72367: NEG
72368: PUSH
72369: LD_INT 3
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: LIST
72380: LIST
72381: LIST
72382: LIST
72383: LIST
72384: LIST
72385: LIST
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72423: LD_ADDR_VAR 0 34
72427: PUSH
72428: LD_INT 0
72430: PUSH
72431: LD_INT 4
72433: NEG
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 0
72441: PUSH
72442: LD_INT 5
72444: NEG
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: LD_INT 1
72452: PUSH
72453: LD_INT 4
72455: NEG
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 1
72463: PUSH
72464: LD_INT 3
72466: NEG
72467: PUSH
72468: EMPTY
72469: LIST
72470: LIST
72471: PUSH
72472: LD_INT 0
72474: PUSH
72475: LD_INT 3
72477: NEG
72478: PUSH
72479: EMPTY
72480: LIST
72481: LIST
72482: PUSH
72483: LD_INT 1
72485: NEG
72486: PUSH
72487: LD_INT 4
72489: NEG
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: LD_INT 1
72497: NEG
72498: PUSH
72499: LD_INT 5
72501: NEG
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 2
72509: PUSH
72510: LD_INT 3
72512: NEG
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 2
72520: NEG
72521: PUSH
72522: LD_INT 5
72524: NEG
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PUSH
72530: LD_INT 3
72532: PUSH
72533: LD_INT 0
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 3
72542: PUSH
72543: LD_INT 1
72545: NEG
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 4
72553: PUSH
72554: LD_INT 0
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 4
72563: PUSH
72564: LD_INT 1
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 3
72573: PUSH
72574: LD_INT 1
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: LD_INT 2
72583: PUSH
72584: LD_INT 0
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PUSH
72591: LD_INT 2
72593: PUSH
72594: LD_INT 1
72596: NEG
72597: PUSH
72598: EMPTY
72599: LIST
72600: LIST
72601: PUSH
72602: LD_INT 2
72604: PUSH
72605: LD_INT 2
72607: NEG
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 4
72615: PUSH
72616: LD_INT 2
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 4
72625: PUSH
72626: LD_INT 4
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 4
72635: PUSH
72636: LD_INT 3
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PUSH
72643: LD_INT 5
72645: PUSH
72646: LD_INT 4
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: PUSH
72653: LD_INT 5
72655: PUSH
72656: LD_INT 5
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: LD_INT 4
72665: PUSH
72666: LD_INT 5
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: PUSH
72673: LD_INT 3
72675: PUSH
72676: LD_INT 4
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PUSH
72683: LD_INT 3
72685: PUSH
72686: LD_INT 3
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: PUSH
72693: LD_INT 5
72695: PUSH
72696: LD_INT 3
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: PUSH
72703: LD_INT 3
72705: PUSH
72706: LD_INT 5
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 0
72715: PUSH
72716: LD_INT 3
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 0
72725: PUSH
72726: LD_INT 2
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: LD_INT 1
72735: PUSH
72736: LD_INT 3
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: LD_INT 1
72745: PUSH
72746: LD_INT 4
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: PUSH
72753: LD_INT 0
72755: PUSH
72756: LD_INT 4
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PUSH
72763: LD_INT 1
72765: NEG
72766: PUSH
72767: LD_INT 3
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 1
72776: NEG
72777: PUSH
72778: LD_INT 2
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: PUSH
72785: LD_INT 2
72787: PUSH
72788: LD_INT 4
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: PUSH
72795: LD_INT 2
72797: NEG
72798: PUSH
72799: LD_INT 2
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: PUSH
72806: LD_INT 4
72808: NEG
72809: PUSH
72810: LD_INT 0
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: PUSH
72817: LD_INT 4
72819: NEG
72820: PUSH
72821: LD_INT 1
72823: NEG
72824: PUSH
72825: EMPTY
72826: LIST
72827: LIST
72828: PUSH
72829: LD_INT 3
72831: NEG
72832: PUSH
72833: LD_INT 0
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PUSH
72840: LD_INT 3
72842: NEG
72843: PUSH
72844: LD_INT 1
72846: PUSH
72847: EMPTY
72848: LIST
72849: LIST
72850: PUSH
72851: LD_INT 4
72853: NEG
72854: PUSH
72855: LD_INT 1
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: PUSH
72862: LD_INT 5
72864: NEG
72865: PUSH
72866: LD_INT 0
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: PUSH
72873: LD_INT 5
72875: NEG
72876: PUSH
72877: LD_INT 1
72879: NEG
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: LD_INT 5
72887: NEG
72888: PUSH
72889: LD_INT 2
72891: NEG
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 3
72899: NEG
72900: PUSH
72901: LD_INT 2
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: LIST
72915: LIST
72916: LIST
72917: LIST
72918: LIST
72919: LIST
72920: LIST
72921: LIST
72922: LIST
72923: LIST
72924: LIST
72925: LIST
72926: LIST
72927: LIST
72928: LIST
72929: LIST
72930: LIST
72931: LIST
72932: LIST
72933: LIST
72934: LIST
72935: LIST
72936: LIST
72937: LIST
72938: LIST
72939: LIST
72940: LIST
72941: LIST
72942: LIST
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: ST_TO_ADDR
// end ; end ;
72955: GO 72958
72957: POP
// case btype of b_depot , b_warehouse :
72958: LD_VAR 0 1
72962: PUSH
72963: LD_INT 0
72965: DOUBLE
72966: EQUAL
72967: IFTRUE 72977
72969: LD_INT 1
72971: DOUBLE
72972: EQUAL
72973: IFTRUE 72977
72975: GO 73178
72977: POP
// case nation of nation_american :
72978: LD_VAR 0 5
72982: PUSH
72983: LD_INT 1
72985: DOUBLE
72986: EQUAL
72987: IFTRUE 72991
72989: GO 73047
72991: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72992: LD_ADDR_VAR 0 9
72996: PUSH
72997: LD_VAR 0 11
73001: PUSH
73002: LD_VAR 0 12
73006: PUSH
73007: LD_VAR 0 13
73011: PUSH
73012: LD_VAR 0 14
73016: PUSH
73017: LD_VAR 0 15
73021: PUSH
73022: LD_VAR 0 16
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: PUSH
73035: LD_VAR 0 4
73039: PUSH
73040: LD_INT 1
73042: PLUS
73043: ARRAY
73044: ST_TO_ADDR
73045: GO 73176
73047: LD_INT 2
73049: DOUBLE
73050: EQUAL
73051: IFTRUE 73055
73053: GO 73111
73055: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73056: LD_ADDR_VAR 0 9
73060: PUSH
73061: LD_VAR 0 17
73065: PUSH
73066: LD_VAR 0 18
73070: PUSH
73071: LD_VAR 0 19
73075: PUSH
73076: LD_VAR 0 20
73080: PUSH
73081: LD_VAR 0 21
73085: PUSH
73086: LD_VAR 0 22
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: PUSH
73099: LD_VAR 0 4
73103: PUSH
73104: LD_INT 1
73106: PLUS
73107: ARRAY
73108: ST_TO_ADDR
73109: GO 73176
73111: LD_INT 3
73113: DOUBLE
73114: EQUAL
73115: IFTRUE 73119
73117: GO 73175
73119: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73120: LD_ADDR_VAR 0 9
73124: PUSH
73125: LD_VAR 0 23
73129: PUSH
73130: LD_VAR 0 24
73134: PUSH
73135: LD_VAR 0 25
73139: PUSH
73140: LD_VAR 0 26
73144: PUSH
73145: LD_VAR 0 27
73149: PUSH
73150: LD_VAR 0 28
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: PUSH
73163: LD_VAR 0 4
73167: PUSH
73168: LD_INT 1
73170: PLUS
73171: ARRAY
73172: ST_TO_ADDR
73173: GO 73176
73175: POP
73176: GO 73731
73178: LD_INT 2
73180: DOUBLE
73181: EQUAL
73182: IFTRUE 73192
73184: LD_INT 3
73186: DOUBLE
73187: EQUAL
73188: IFTRUE 73192
73190: GO 73248
73192: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73193: LD_ADDR_VAR 0 9
73197: PUSH
73198: LD_VAR 0 29
73202: PUSH
73203: LD_VAR 0 30
73207: PUSH
73208: LD_VAR 0 31
73212: PUSH
73213: LD_VAR 0 32
73217: PUSH
73218: LD_VAR 0 33
73222: PUSH
73223: LD_VAR 0 34
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: PUSH
73236: LD_VAR 0 4
73240: PUSH
73241: LD_INT 1
73243: PLUS
73244: ARRAY
73245: ST_TO_ADDR
73246: GO 73731
73248: LD_INT 16
73250: DOUBLE
73251: EQUAL
73252: IFTRUE 73310
73254: LD_INT 17
73256: DOUBLE
73257: EQUAL
73258: IFTRUE 73310
73260: LD_INT 18
73262: DOUBLE
73263: EQUAL
73264: IFTRUE 73310
73266: LD_INT 19
73268: DOUBLE
73269: EQUAL
73270: IFTRUE 73310
73272: LD_INT 22
73274: DOUBLE
73275: EQUAL
73276: IFTRUE 73310
73278: LD_INT 20
73280: DOUBLE
73281: EQUAL
73282: IFTRUE 73310
73284: LD_INT 21
73286: DOUBLE
73287: EQUAL
73288: IFTRUE 73310
73290: LD_INT 23
73292: DOUBLE
73293: EQUAL
73294: IFTRUE 73310
73296: LD_INT 24
73298: DOUBLE
73299: EQUAL
73300: IFTRUE 73310
73302: LD_INT 25
73304: DOUBLE
73305: EQUAL
73306: IFTRUE 73310
73308: GO 73366
73310: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73311: LD_ADDR_VAR 0 9
73315: PUSH
73316: LD_VAR 0 35
73320: PUSH
73321: LD_VAR 0 36
73325: PUSH
73326: LD_VAR 0 37
73330: PUSH
73331: LD_VAR 0 38
73335: PUSH
73336: LD_VAR 0 39
73340: PUSH
73341: LD_VAR 0 40
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: PUSH
73354: LD_VAR 0 4
73358: PUSH
73359: LD_INT 1
73361: PLUS
73362: ARRAY
73363: ST_TO_ADDR
73364: GO 73731
73366: LD_INT 6
73368: DOUBLE
73369: EQUAL
73370: IFTRUE 73422
73372: LD_INT 7
73374: DOUBLE
73375: EQUAL
73376: IFTRUE 73422
73378: LD_INT 8
73380: DOUBLE
73381: EQUAL
73382: IFTRUE 73422
73384: LD_INT 13
73386: DOUBLE
73387: EQUAL
73388: IFTRUE 73422
73390: LD_INT 12
73392: DOUBLE
73393: EQUAL
73394: IFTRUE 73422
73396: LD_INT 15
73398: DOUBLE
73399: EQUAL
73400: IFTRUE 73422
73402: LD_INT 11
73404: DOUBLE
73405: EQUAL
73406: IFTRUE 73422
73408: LD_INT 14
73410: DOUBLE
73411: EQUAL
73412: IFTRUE 73422
73414: LD_INT 10
73416: DOUBLE
73417: EQUAL
73418: IFTRUE 73422
73420: GO 73478
73422: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73423: LD_ADDR_VAR 0 9
73427: PUSH
73428: LD_VAR 0 41
73432: PUSH
73433: LD_VAR 0 42
73437: PUSH
73438: LD_VAR 0 43
73442: PUSH
73443: LD_VAR 0 44
73447: PUSH
73448: LD_VAR 0 45
73452: PUSH
73453: LD_VAR 0 46
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: PUSH
73466: LD_VAR 0 4
73470: PUSH
73471: LD_INT 1
73473: PLUS
73474: ARRAY
73475: ST_TO_ADDR
73476: GO 73731
73478: LD_INT 36
73480: DOUBLE
73481: EQUAL
73482: IFTRUE 73486
73484: GO 73542
73486: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73487: LD_ADDR_VAR 0 9
73491: PUSH
73492: LD_VAR 0 47
73496: PUSH
73497: LD_VAR 0 48
73501: PUSH
73502: LD_VAR 0 49
73506: PUSH
73507: LD_VAR 0 50
73511: PUSH
73512: LD_VAR 0 51
73516: PUSH
73517: LD_VAR 0 52
73521: PUSH
73522: EMPTY
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: PUSH
73530: LD_VAR 0 4
73534: PUSH
73535: LD_INT 1
73537: PLUS
73538: ARRAY
73539: ST_TO_ADDR
73540: GO 73731
73542: LD_INT 4
73544: DOUBLE
73545: EQUAL
73546: IFTRUE 73568
73548: LD_INT 5
73550: DOUBLE
73551: EQUAL
73552: IFTRUE 73568
73554: LD_INT 34
73556: DOUBLE
73557: EQUAL
73558: IFTRUE 73568
73560: LD_INT 37
73562: DOUBLE
73563: EQUAL
73564: IFTRUE 73568
73566: GO 73624
73568: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73569: LD_ADDR_VAR 0 9
73573: PUSH
73574: LD_VAR 0 53
73578: PUSH
73579: LD_VAR 0 54
73583: PUSH
73584: LD_VAR 0 55
73588: PUSH
73589: LD_VAR 0 56
73593: PUSH
73594: LD_VAR 0 57
73598: PUSH
73599: LD_VAR 0 58
73603: PUSH
73604: EMPTY
73605: LIST
73606: LIST
73607: LIST
73608: LIST
73609: LIST
73610: LIST
73611: PUSH
73612: LD_VAR 0 4
73616: PUSH
73617: LD_INT 1
73619: PLUS
73620: ARRAY
73621: ST_TO_ADDR
73622: GO 73731
73624: LD_INT 31
73626: DOUBLE
73627: EQUAL
73628: IFTRUE 73674
73630: LD_INT 32
73632: DOUBLE
73633: EQUAL
73634: IFTRUE 73674
73636: LD_INT 33
73638: DOUBLE
73639: EQUAL
73640: IFTRUE 73674
73642: LD_INT 27
73644: DOUBLE
73645: EQUAL
73646: IFTRUE 73674
73648: LD_INT 26
73650: DOUBLE
73651: EQUAL
73652: IFTRUE 73674
73654: LD_INT 28
73656: DOUBLE
73657: EQUAL
73658: IFTRUE 73674
73660: LD_INT 29
73662: DOUBLE
73663: EQUAL
73664: IFTRUE 73674
73666: LD_INT 30
73668: DOUBLE
73669: EQUAL
73670: IFTRUE 73674
73672: GO 73730
73674: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73675: LD_ADDR_VAR 0 9
73679: PUSH
73680: LD_VAR 0 59
73684: PUSH
73685: LD_VAR 0 60
73689: PUSH
73690: LD_VAR 0 61
73694: PUSH
73695: LD_VAR 0 62
73699: PUSH
73700: LD_VAR 0 63
73704: PUSH
73705: LD_VAR 0 64
73709: PUSH
73710: EMPTY
73711: LIST
73712: LIST
73713: LIST
73714: LIST
73715: LIST
73716: LIST
73717: PUSH
73718: LD_VAR 0 4
73722: PUSH
73723: LD_INT 1
73725: PLUS
73726: ARRAY
73727: ST_TO_ADDR
73728: GO 73731
73730: POP
// temp_list2 = [ ] ;
73731: LD_ADDR_VAR 0 10
73735: PUSH
73736: EMPTY
73737: ST_TO_ADDR
// for i in temp_list do
73738: LD_ADDR_VAR 0 8
73742: PUSH
73743: LD_VAR 0 9
73747: PUSH
73748: FOR_IN
73749: IFFALSE 73801
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73751: LD_ADDR_VAR 0 10
73755: PUSH
73756: LD_VAR 0 10
73760: PUSH
73761: LD_VAR 0 8
73765: PUSH
73766: LD_INT 1
73768: ARRAY
73769: PUSH
73770: LD_VAR 0 2
73774: PLUS
73775: PUSH
73776: LD_VAR 0 8
73780: PUSH
73781: LD_INT 2
73783: ARRAY
73784: PUSH
73785: LD_VAR 0 3
73789: PLUS
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: PUSH
73795: EMPTY
73796: LIST
73797: ADD
73798: ST_TO_ADDR
73799: GO 73748
73801: POP
73802: POP
// result = temp_list2 ;
73803: LD_ADDR_VAR 0 7
73807: PUSH
73808: LD_VAR 0 10
73812: ST_TO_ADDR
// end ;
73813: LD_VAR 0 7
73817: RET
// export function EnemyInRange ( unit , dist ) ; begin
73818: LD_INT 0
73820: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73821: LD_ADDR_VAR 0 3
73825: PUSH
73826: LD_VAR 0 1
73830: PPUSH
73831: CALL_OW 255
73835: PPUSH
73836: LD_VAR 0 1
73840: PPUSH
73841: CALL_OW 250
73845: PPUSH
73846: LD_VAR 0 1
73850: PPUSH
73851: CALL_OW 251
73855: PPUSH
73856: LD_VAR 0 2
73860: PPUSH
73861: CALL 47220 0 4
73865: PUSH
73866: LD_INT 4
73868: ARRAY
73869: ST_TO_ADDR
// end ;
73870: LD_VAR 0 3
73874: RET
// export function PlayerSeeMe ( unit ) ; begin
73875: LD_INT 0
73877: PPUSH
// result := See ( your_side , unit ) ;
73878: LD_ADDR_VAR 0 2
73882: PUSH
73883: LD_OWVAR 2
73887: PPUSH
73888: LD_VAR 0 1
73892: PPUSH
73893: CALL_OW 292
73897: ST_TO_ADDR
// end ;
73898: LD_VAR 0 2
73902: RET
// export function ReverseDir ( unit ) ; begin
73903: LD_INT 0
73905: PPUSH
// if not unit then
73906: LD_VAR 0 1
73910: NOT
73911: IFFALSE 73915
// exit ;
73913: GO 73938
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73915: LD_ADDR_VAR 0 2
73919: PUSH
73920: LD_VAR 0 1
73924: PPUSH
73925: CALL_OW 254
73929: PUSH
73930: LD_INT 3
73932: PLUS
73933: PUSH
73934: LD_INT 6
73936: MOD
73937: ST_TO_ADDR
// end ;
73938: LD_VAR 0 2
73942: RET
// export function ReverseArray ( array ) ; var i ; begin
73943: LD_INT 0
73945: PPUSH
73946: PPUSH
// if not array then
73947: LD_VAR 0 1
73951: NOT
73952: IFFALSE 73956
// exit ;
73954: GO 74011
// result := [ ] ;
73956: LD_ADDR_VAR 0 2
73960: PUSH
73961: EMPTY
73962: ST_TO_ADDR
// for i := array downto 1 do
73963: LD_ADDR_VAR 0 3
73967: PUSH
73968: DOUBLE
73969: LD_VAR 0 1
73973: INC
73974: ST_TO_ADDR
73975: LD_INT 1
73977: PUSH
73978: FOR_DOWNTO
73979: IFFALSE 74009
// result := Join ( result , array [ i ] ) ;
73981: LD_ADDR_VAR 0 2
73985: PUSH
73986: LD_VAR 0 2
73990: PPUSH
73991: LD_VAR 0 1
73995: PUSH
73996: LD_VAR 0 3
74000: ARRAY
74001: PPUSH
74002: CALL 78655 0 2
74006: ST_TO_ADDR
74007: GO 73978
74009: POP
74010: POP
// end ;
74011: LD_VAR 0 2
74015: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74016: LD_INT 0
74018: PPUSH
74019: PPUSH
74020: PPUSH
74021: PPUSH
74022: PPUSH
74023: PPUSH
// if not unit or not hexes then
74024: LD_VAR 0 1
74028: NOT
74029: PUSH
74030: LD_VAR 0 2
74034: NOT
74035: OR
74036: IFFALSE 74040
// exit ;
74038: GO 74163
// dist := 9999 ;
74040: LD_ADDR_VAR 0 5
74044: PUSH
74045: LD_INT 9999
74047: ST_TO_ADDR
// for i = 1 to hexes do
74048: LD_ADDR_VAR 0 4
74052: PUSH
74053: DOUBLE
74054: LD_INT 1
74056: DEC
74057: ST_TO_ADDR
74058: LD_VAR 0 2
74062: PUSH
74063: FOR_TO
74064: IFFALSE 74151
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74066: LD_ADDR_VAR 0 6
74070: PUSH
74071: LD_VAR 0 1
74075: PPUSH
74076: LD_VAR 0 2
74080: PUSH
74081: LD_VAR 0 4
74085: ARRAY
74086: PUSH
74087: LD_INT 1
74089: ARRAY
74090: PPUSH
74091: LD_VAR 0 2
74095: PUSH
74096: LD_VAR 0 4
74100: ARRAY
74101: PUSH
74102: LD_INT 2
74104: ARRAY
74105: PPUSH
74106: CALL_OW 297
74110: ST_TO_ADDR
// if tdist < dist then
74111: LD_VAR 0 6
74115: PUSH
74116: LD_VAR 0 5
74120: LESS
74121: IFFALSE 74149
// begin hex := hexes [ i ] ;
74123: LD_ADDR_VAR 0 8
74127: PUSH
74128: LD_VAR 0 2
74132: PUSH
74133: LD_VAR 0 4
74137: ARRAY
74138: ST_TO_ADDR
// dist := tdist ;
74139: LD_ADDR_VAR 0 5
74143: PUSH
74144: LD_VAR 0 6
74148: ST_TO_ADDR
// end ; end ;
74149: GO 74063
74151: POP
74152: POP
// result := hex ;
74153: LD_ADDR_VAR 0 3
74157: PUSH
74158: LD_VAR 0 8
74162: ST_TO_ADDR
// end ;
74163: LD_VAR 0 3
74167: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74168: LD_INT 0
74170: PPUSH
74171: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74172: LD_VAR 0 1
74176: NOT
74177: PUSH
74178: LD_VAR 0 1
74182: PUSH
74183: LD_INT 21
74185: PUSH
74186: LD_INT 2
74188: PUSH
74189: EMPTY
74190: LIST
74191: LIST
74192: PUSH
74193: LD_INT 23
74195: PUSH
74196: LD_INT 2
74198: PUSH
74199: EMPTY
74200: LIST
74201: LIST
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: PPUSH
74207: CALL_OW 69
74211: IN
74212: NOT
74213: OR
74214: IFFALSE 74218
// exit ;
74216: GO 74265
// for i = 1 to 3 do
74218: LD_ADDR_VAR 0 3
74222: PUSH
74223: DOUBLE
74224: LD_INT 1
74226: DEC
74227: ST_TO_ADDR
74228: LD_INT 3
74230: PUSH
74231: FOR_TO
74232: IFFALSE 74263
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74234: LD_VAR 0 1
74238: PPUSH
74239: CALL_OW 250
74243: PPUSH
74244: LD_VAR 0 1
74248: PPUSH
74249: CALL_OW 251
74253: PPUSH
74254: LD_INT 1
74256: PPUSH
74257: CALL_OW 453
74261: GO 74231
74263: POP
74264: POP
// end ;
74265: LD_VAR 0 2
74269: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74270: LD_INT 0
74272: PPUSH
74273: PPUSH
74274: PPUSH
74275: PPUSH
74276: PPUSH
74277: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74278: LD_VAR 0 1
74282: NOT
74283: PUSH
74284: LD_VAR 0 2
74288: NOT
74289: OR
74290: PUSH
74291: LD_VAR 0 1
74295: PPUSH
74296: CALL_OW 314
74300: OR
74301: IFFALSE 74305
// exit ;
74303: GO 74772
// if GetLives ( i ) < 250 then
74305: LD_VAR 0 4
74309: PPUSH
74310: CALL_OW 256
74314: PUSH
74315: LD_INT 250
74317: LESS
74318: IFFALSE 74331
// begin ComAutodestruct ( i ) ;
74320: LD_VAR 0 4
74324: PPUSH
74325: CALL 74168 0 1
// exit ;
74329: GO 74772
// end ; x := GetX ( enemy_unit ) ;
74331: LD_ADDR_VAR 0 7
74335: PUSH
74336: LD_VAR 0 2
74340: PPUSH
74341: CALL_OW 250
74345: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74346: LD_ADDR_VAR 0 8
74350: PUSH
74351: LD_VAR 0 2
74355: PPUSH
74356: CALL_OW 251
74360: ST_TO_ADDR
// if not x or not y then
74361: LD_VAR 0 7
74365: NOT
74366: PUSH
74367: LD_VAR 0 8
74371: NOT
74372: OR
74373: IFFALSE 74377
// exit ;
74375: GO 74772
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74377: LD_ADDR_VAR 0 6
74381: PUSH
74382: LD_VAR 0 7
74386: PPUSH
74387: LD_INT 0
74389: PPUSH
74390: LD_INT 4
74392: PPUSH
74393: CALL_OW 272
74397: PUSH
74398: LD_VAR 0 8
74402: PPUSH
74403: LD_INT 0
74405: PPUSH
74406: LD_INT 4
74408: PPUSH
74409: CALL_OW 273
74413: PUSH
74414: EMPTY
74415: LIST
74416: LIST
74417: PUSH
74418: LD_VAR 0 7
74422: PPUSH
74423: LD_INT 1
74425: PPUSH
74426: LD_INT 4
74428: PPUSH
74429: CALL_OW 272
74433: PUSH
74434: LD_VAR 0 8
74438: PPUSH
74439: LD_INT 1
74441: PPUSH
74442: LD_INT 4
74444: PPUSH
74445: CALL_OW 273
74449: PUSH
74450: EMPTY
74451: LIST
74452: LIST
74453: PUSH
74454: LD_VAR 0 7
74458: PPUSH
74459: LD_INT 2
74461: PPUSH
74462: LD_INT 4
74464: PPUSH
74465: CALL_OW 272
74469: PUSH
74470: LD_VAR 0 8
74474: PPUSH
74475: LD_INT 2
74477: PPUSH
74478: LD_INT 4
74480: PPUSH
74481: CALL_OW 273
74485: PUSH
74486: EMPTY
74487: LIST
74488: LIST
74489: PUSH
74490: LD_VAR 0 7
74494: PPUSH
74495: LD_INT 3
74497: PPUSH
74498: LD_INT 4
74500: PPUSH
74501: CALL_OW 272
74505: PUSH
74506: LD_VAR 0 8
74510: PPUSH
74511: LD_INT 3
74513: PPUSH
74514: LD_INT 4
74516: PPUSH
74517: CALL_OW 273
74521: PUSH
74522: EMPTY
74523: LIST
74524: LIST
74525: PUSH
74526: LD_VAR 0 7
74530: PPUSH
74531: LD_INT 4
74533: PPUSH
74534: LD_INT 4
74536: PPUSH
74537: CALL_OW 272
74541: PUSH
74542: LD_VAR 0 8
74546: PPUSH
74547: LD_INT 4
74549: PPUSH
74550: LD_INT 4
74552: PPUSH
74553: CALL_OW 273
74557: PUSH
74558: EMPTY
74559: LIST
74560: LIST
74561: PUSH
74562: LD_VAR 0 7
74566: PPUSH
74567: LD_INT 5
74569: PPUSH
74570: LD_INT 4
74572: PPUSH
74573: CALL_OW 272
74577: PUSH
74578: LD_VAR 0 8
74582: PPUSH
74583: LD_INT 5
74585: PPUSH
74586: LD_INT 4
74588: PPUSH
74589: CALL_OW 273
74593: PUSH
74594: EMPTY
74595: LIST
74596: LIST
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: LIST
74602: LIST
74603: LIST
74604: LIST
74605: ST_TO_ADDR
// for i = tmp downto 1 do
74606: LD_ADDR_VAR 0 4
74610: PUSH
74611: DOUBLE
74612: LD_VAR 0 6
74616: INC
74617: ST_TO_ADDR
74618: LD_INT 1
74620: PUSH
74621: FOR_DOWNTO
74622: IFFALSE 74723
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74624: LD_VAR 0 6
74628: PUSH
74629: LD_VAR 0 4
74633: ARRAY
74634: PUSH
74635: LD_INT 1
74637: ARRAY
74638: PPUSH
74639: LD_VAR 0 6
74643: PUSH
74644: LD_VAR 0 4
74648: ARRAY
74649: PUSH
74650: LD_INT 2
74652: ARRAY
74653: PPUSH
74654: CALL_OW 488
74658: NOT
74659: PUSH
74660: LD_VAR 0 6
74664: PUSH
74665: LD_VAR 0 4
74669: ARRAY
74670: PUSH
74671: LD_INT 1
74673: ARRAY
74674: PPUSH
74675: LD_VAR 0 6
74679: PUSH
74680: LD_VAR 0 4
74684: ARRAY
74685: PUSH
74686: LD_INT 2
74688: ARRAY
74689: PPUSH
74690: CALL_OW 428
74694: PUSH
74695: LD_INT 0
74697: NONEQUAL
74698: OR
74699: IFFALSE 74721
// tmp := Delete ( tmp , i ) ;
74701: LD_ADDR_VAR 0 6
74705: PUSH
74706: LD_VAR 0 6
74710: PPUSH
74711: LD_VAR 0 4
74715: PPUSH
74716: CALL_OW 3
74720: ST_TO_ADDR
74721: GO 74621
74723: POP
74724: POP
// j := GetClosestHex ( unit , tmp ) ;
74725: LD_ADDR_VAR 0 5
74729: PUSH
74730: LD_VAR 0 1
74734: PPUSH
74735: LD_VAR 0 6
74739: PPUSH
74740: CALL 74016 0 2
74744: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74745: LD_VAR 0 1
74749: PPUSH
74750: LD_VAR 0 5
74754: PUSH
74755: LD_INT 1
74757: ARRAY
74758: PPUSH
74759: LD_VAR 0 5
74763: PUSH
74764: LD_INT 2
74766: ARRAY
74767: PPUSH
74768: CALL_OW 111
// end ;
74772: LD_VAR 0 3
74776: RET
// export function PrepareApemanSoldier ( ) ; begin
74777: LD_INT 0
74779: PPUSH
// uc_nation := 0 ;
74780: LD_ADDR_OWVAR 21
74784: PUSH
74785: LD_INT 0
74787: ST_TO_ADDR
// hc_sex := sex_male ;
74788: LD_ADDR_OWVAR 27
74792: PUSH
74793: LD_INT 1
74795: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74796: LD_ADDR_OWVAR 28
74800: PUSH
74801: LD_INT 15
74803: ST_TO_ADDR
// hc_gallery :=  ;
74804: LD_ADDR_OWVAR 33
74808: PUSH
74809: LD_STRING 
74811: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74812: LD_ADDR_OWVAR 31
74816: PUSH
74817: LD_INT 0
74819: PPUSH
74820: LD_INT 3
74822: PPUSH
74823: CALL_OW 12
74827: PUSH
74828: LD_INT 0
74830: PPUSH
74831: LD_INT 3
74833: PPUSH
74834: CALL_OW 12
74838: PUSH
74839: LD_INT 0
74841: PUSH
74842: LD_INT 0
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: ST_TO_ADDR
// end ;
74851: LD_VAR 0 1
74855: RET
// export function PrepareApemanEngineer ( ) ; begin
74856: LD_INT 0
74858: PPUSH
// uc_nation := 0 ;
74859: LD_ADDR_OWVAR 21
74863: PUSH
74864: LD_INT 0
74866: ST_TO_ADDR
// hc_sex := sex_male ;
74867: LD_ADDR_OWVAR 27
74871: PUSH
74872: LD_INT 1
74874: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74875: LD_ADDR_OWVAR 28
74879: PUSH
74880: LD_INT 16
74882: ST_TO_ADDR
// hc_gallery :=  ;
74883: LD_ADDR_OWVAR 33
74887: PUSH
74888: LD_STRING 
74890: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74891: LD_ADDR_OWVAR 31
74895: PUSH
74896: LD_INT 0
74898: PPUSH
74899: LD_INT 3
74901: PPUSH
74902: CALL_OW 12
74906: PUSH
74907: LD_INT 0
74909: PPUSH
74910: LD_INT 3
74912: PPUSH
74913: CALL_OW 12
74917: PUSH
74918: LD_INT 0
74920: PUSH
74921: LD_INT 0
74923: PUSH
74924: EMPTY
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: ST_TO_ADDR
// end ;
74930: LD_VAR 0 1
74934: RET
// export function PrepareApeman ( agressivity ) ; begin
74935: LD_INT 0
74937: PPUSH
// uc_side := 0 ;
74938: LD_ADDR_OWVAR 20
74942: PUSH
74943: LD_INT 0
74945: ST_TO_ADDR
// uc_nation := 0 ;
74946: LD_ADDR_OWVAR 21
74950: PUSH
74951: LD_INT 0
74953: ST_TO_ADDR
// hc_sex := sex_male ;
74954: LD_ADDR_OWVAR 27
74958: PUSH
74959: LD_INT 1
74961: ST_TO_ADDR
// hc_class := class_apeman ;
74962: LD_ADDR_OWVAR 28
74966: PUSH
74967: LD_INT 12
74969: ST_TO_ADDR
// hc_gallery :=  ;
74970: LD_ADDR_OWVAR 33
74974: PUSH
74975: LD_STRING 
74977: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74978: LD_ADDR_OWVAR 35
74982: PUSH
74983: LD_VAR 0 1
74987: NEG
74988: PPUSH
74989: LD_VAR 0 1
74993: PPUSH
74994: CALL_OW 12
74998: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74999: LD_ADDR_OWVAR 31
75003: PUSH
75004: LD_INT 0
75006: PPUSH
75007: LD_INT 3
75009: PPUSH
75010: CALL_OW 12
75014: PUSH
75015: LD_INT 0
75017: PPUSH
75018: LD_INT 3
75020: PPUSH
75021: CALL_OW 12
75025: PUSH
75026: LD_INT 0
75028: PUSH
75029: LD_INT 0
75031: PUSH
75032: EMPTY
75033: LIST
75034: LIST
75035: LIST
75036: LIST
75037: ST_TO_ADDR
// end ;
75038: LD_VAR 0 2
75042: RET
// export function PrepareTiger ( agressivity ) ; begin
75043: LD_INT 0
75045: PPUSH
// uc_side := 0 ;
75046: LD_ADDR_OWVAR 20
75050: PUSH
75051: LD_INT 0
75053: ST_TO_ADDR
// uc_nation := 0 ;
75054: LD_ADDR_OWVAR 21
75058: PUSH
75059: LD_INT 0
75061: ST_TO_ADDR
// hc_class := class_tiger ;
75062: LD_ADDR_OWVAR 28
75066: PUSH
75067: LD_INT 14
75069: ST_TO_ADDR
// hc_gallery :=  ;
75070: LD_ADDR_OWVAR 33
75074: PUSH
75075: LD_STRING 
75077: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75078: LD_ADDR_OWVAR 35
75082: PUSH
75083: LD_VAR 0 1
75087: NEG
75088: PPUSH
75089: LD_VAR 0 1
75093: PPUSH
75094: CALL_OW 12
75098: ST_TO_ADDR
// end ;
75099: LD_VAR 0 2
75103: RET
// export function PrepareEnchidna ( ) ; begin
75104: LD_INT 0
75106: PPUSH
// uc_side := 0 ;
75107: LD_ADDR_OWVAR 20
75111: PUSH
75112: LD_INT 0
75114: ST_TO_ADDR
// uc_nation := 0 ;
75115: LD_ADDR_OWVAR 21
75119: PUSH
75120: LD_INT 0
75122: ST_TO_ADDR
// hc_class := class_baggie ;
75123: LD_ADDR_OWVAR 28
75127: PUSH
75128: LD_INT 13
75130: ST_TO_ADDR
// hc_gallery :=  ;
75131: LD_ADDR_OWVAR 33
75135: PUSH
75136: LD_STRING 
75138: ST_TO_ADDR
// end ;
75139: LD_VAR 0 1
75143: RET
// export function PrepareFrog ( ) ; begin
75144: LD_INT 0
75146: PPUSH
// uc_side := 0 ;
75147: LD_ADDR_OWVAR 20
75151: PUSH
75152: LD_INT 0
75154: ST_TO_ADDR
// uc_nation := 0 ;
75155: LD_ADDR_OWVAR 21
75159: PUSH
75160: LD_INT 0
75162: ST_TO_ADDR
// hc_class := class_frog ;
75163: LD_ADDR_OWVAR 28
75167: PUSH
75168: LD_INT 19
75170: ST_TO_ADDR
// hc_gallery :=  ;
75171: LD_ADDR_OWVAR 33
75175: PUSH
75176: LD_STRING 
75178: ST_TO_ADDR
// end ;
75179: LD_VAR 0 1
75183: RET
// export function PrepareFish ( ) ; begin
75184: LD_INT 0
75186: PPUSH
// uc_side := 0 ;
75187: LD_ADDR_OWVAR 20
75191: PUSH
75192: LD_INT 0
75194: ST_TO_ADDR
// uc_nation := 0 ;
75195: LD_ADDR_OWVAR 21
75199: PUSH
75200: LD_INT 0
75202: ST_TO_ADDR
// hc_class := class_fish ;
75203: LD_ADDR_OWVAR 28
75207: PUSH
75208: LD_INT 20
75210: ST_TO_ADDR
// hc_gallery :=  ;
75211: LD_ADDR_OWVAR 33
75215: PUSH
75216: LD_STRING 
75218: ST_TO_ADDR
// end ;
75219: LD_VAR 0 1
75223: RET
// export function PrepareBird ( ) ; begin
75224: LD_INT 0
75226: PPUSH
// uc_side := 0 ;
75227: LD_ADDR_OWVAR 20
75231: PUSH
75232: LD_INT 0
75234: ST_TO_ADDR
// uc_nation := 0 ;
75235: LD_ADDR_OWVAR 21
75239: PUSH
75240: LD_INT 0
75242: ST_TO_ADDR
// hc_class := class_phororhacos ;
75243: LD_ADDR_OWVAR 28
75247: PUSH
75248: LD_INT 18
75250: ST_TO_ADDR
// hc_gallery :=  ;
75251: LD_ADDR_OWVAR 33
75255: PUSH
75256: LD_STRING 
75258: ST_TO_ADDR
// end ;
75259: LD_VAR 0 1
75263: RET
// export function PrepareHorse ( ) ; begin
75264: LD_INT 0
75266: PPUSH
// uc_side := 0 ;
75267: LD_ADDR_OWVAR 20
75271: PUSH
75272: LD_INT 0
75274: ST_TO_ADDR
// uc_nation := 0 ;
75275: LD_ADDR_OWVAR 21
75279: PUSH
75280: LD_INT 0
75282: ST_TO_ADDR
// hc_class := class_horse ;
75283: LD_ADDR_OWVAR 28
75287: PUSH
75288: LD_INT 21
75290: ST_TO_ADDR
// hc_gallery :=  ;
75291: LD_ADDR_OWVAR 33
75295: PUSH
75296: LD_STRING 
75298: ST_TO_ADDR
// end ;
75299: LD_VAR 0 1
75303: RET
// export function PrepareMastodont ( ) ; begin
75304: LD_INT 0
75306: PPUSH
// uc_side := 0 ;
75307: LD_ADDR_OWVAR 20
75311: PUSH
75312: LD_INT 0
75314: ST_TO_ADDR
// uc_nation := 0 ;
75315: LD_ADDR_OWVAR 21
75319: PUSH
75320: LD_INT 0
75322: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75323: LD_ADDR_OWVAR 37
75327: PUSH
75328: LD_INT 31
75330: ST_TO_ADDR
// vc_control := control_rider ;
75331: LD_ADDR_OWVAR 38
75335: PUSH
75336: LD_INT 4
75338: ST_TO_ADDR
// end ;
75339: LD_VAR 0 1
75343: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75344: LD_INT 0
75346: PPUSH
75347: PPUSH
75348: PPUSH
// uc_side = 0 ;
75349: LD_ADDR_OWVAR 20
75353: PUSH
75354: LD_INT 0
75356: ST_TO_ADDR
// uc_nation = 0 ;
75357: LD_ADDR_OWVAR 21
75361: PUSH
75362: LD_INT 0
75364: ST_TO_ADDR
// InitHc_All ( ) ;
75365: CALL_OW 584
// InitVc ;
75369: CALL_OW 20
// if mastodonts then
75373: LD_VAR 0 6
75377: IFFALSE 75444
// for i = 1 to mastodonts do
75379: LD_ADDR_VAR 0 11
75383: PUSH
75384: DOUBLE
75385: LD_INT 1
75387: DEC
75388: ST_TO_ADDR
75389: LD_VAR 0 6
75393: PUSH
75394: FOR_TO
75395: IFFALSE 75442
// begin vc_chassis := 31 ;
75397: LD_ADDR_OWVAR 37
75401: PUSH
75402: LD_INT 31
75404: ST_TO_ADDR
// vc_control := control_rider ;
75405: LD_ADDR_OWVAR 38
75409: PUSH
75410: LD_INT 4
75412: ST_TO_ADDR
// animal := CreateVehicle ;
75413: LD_ADDR_VAR 0 12
75417: PUSH
75418: CALL_OW 45
75422: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75423: LD_VAR 0 12
75427: PPUSH
75428: LD_VAR 0 8
75432: PPUSH
75433: LD_INT 0
75435: PPUSH
75436: CALL 77572 0 3
// end ;
75440: GO 75394
75442: POP
75443: POP
// if horses then
75444: LD_VAR 0 5
75448: IFFALSE 75515
// for i = 1 to horses do
75450: LD_ADDR_VAR 0 11
75454: PUSH
75455: DOUBLE
75456: LD_INT 1
75458: DEC
75459: ST_TO_ADDR
75460: LD_VAR 0 5
75464: PUSH
75465: FOR_TO
75466: IFFALSE 75513
// begin hc_class := 21 ;
75468: LD_ADDR_OWVAR 28
75472: PUSH
75473: LD_INT 21
75475: ST_TO_ADDR
// hc_gallery :=  ;
75476: LD_ADDR_OWVAR 33
75480: PUSH
75481: LD_STRING 
75483: ST_TO_ADDR
// animal := CreateHuman ;
75484: LD_ADDR_VAR 0 12
75488: PUSH
75489: CALL_OW 44
75493: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75494: LD_VAR 0 12
75498: PPUSH
75499: LD_VAR 0 8
75503: PPUSH
75504: LD_INT 0
75506: PPUSH
75507: CALL 77572 0 3
// end ;
75511: GO 75465
75513: POP
75514: POP
// if birds then
75515: LD_VAR 0 1
75519: IFFALSE 75586
// for i = 1 to birds do
75521: LD_ADDR_VAR 0 11
75525: PUSH
75526: DOUBLE
75527: LD_INT 1
75529: DEC
75530: ST_TO_ADDR
75531: LD_VAR 0 1
75535: PUSH
75536: FOR_TO
75537: IFFALSE 75584
// begin hc_class = 18 ;
75539: LD_ADDR_OWVAR 28
75543: PUSH
75544: LD_INT 18
75546: ST_TO_ADDR
// hc_gallery =  ;
75547: LD_ADDR_OWVAR 33
75551: PUSH
75552: LD_STRING 
75554: ST_TO_ADDR
// animal := CreateHuman ;
75555: LD_ADDR_VAR 0 12
75559: PUSH
75560: CALL_OW 44
75564: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75565: LD_VAR 0 12
75569: PPUSH
75570: LD_VAR 0 8
75574: PPUSH
75575: LD_INT 0
75577: PPUSH
75578: CALL 77572 0 3
// end ;
75582: GO 75536
75584: POP
75585: POP
// if tigers then
75586: LD_VAR 0 2
75590: IFFALSE 75674
// for i = 1 to tigers do
75592: LD_ADDR_VAR 0 11
75596: PUSH
75597: DOUBLE
75598: LD_INT 1
75600: DEC
75601: ST_TO_ADDR
75602: LD_VAR 0 2
75606: PUSH
75607: FOR_TO
75608: IFFALSE 75672
// begin hc_class = class_tiger ;
75610: LD_ADDR_OWVAR 28
75614: PUSH
75615: LD_INT 14
75617: ST_TO_ADDR
// hc_gallery =  ;
75618: LD_ADDR_OWVAR 33
75622: PUSH
75623: LD_STRING 
75625: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75626: LD_ADDR_OWVAR 35
75630: PUSH
75631: LD_INT 7
75633: NEG
75634: PPUSH
75635: LD_INT 7
75637: PPUSH
75638: CALL_OW 12
75642: ST_TO_ADDR
// animal := CreateHuman ;
75643: LD_ADDR_VAR 0 12
75647: PUSH
75648: CALL_OW 44
75652: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75653: LD_VAR 0 12
75657: PPUSH
75658: LD_VAR 0 8
75662: PPUSH
75663: LD_INT 0
75665: PPUSH
75666: CALL 77572 0 3
// end ;
75670: GO 75607
75672: POP
75673: POP
// if apemans then
75674: LD_VAR 0 3
75678: IFFALSE 75801
// for i = 1 to apemans do
75680: LD_ADDR_VAR 0 11
75684: PUSH
75685: DOUBLE
75686: LD_INT 1
75688: DEC
75689: ST_TO_ADDR
75690: LD_VAR 0 3
75694: PUSH
75695: FOR_TO
75696: IFFALSE 75799
// begin hc_class = class_apeman ;
75698: LD_ADDR_OWVAR 28
75702: PUSH
75703: LD_INT 12
75705: ST_TO_ADDR
// hc_gallery =  ;
75706: LD_ADDR_OWVAR 33
75710: PUSH
75711: LD_STRING 
75713: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75714: LD_ADDR_OWVAR 35
75718: PUSH
75719: LD_INT 2
75721: NEG
75722: PPUSH
75723: LD_INT 2
75725: PPUSH
75726: CALL_OW 12
75730: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75731: LD_ADDR_OWVAR 31
75735: PUSH
75736: LD_INT 1
75738: PPUSH
75739: LD_INT 3
75741: PPUSH
75742: CALL_OW 12
75746: PUSH
75747: LD_INT 1
75749: PPUSH
75750: LD_INT 3
75752: PPUSH
75753: CALL_OW 12
75757: PUSH
75758: LD_INT 0
75760: PUSH
75761: LD_INT 0
75763: PUSH
75764: EMPTY
75765: LIST
75766: LIST
75767: LIST
75768: LIST
75769: ST_TO_ADDR
// animal := CreateHuman ;
75770: LD_ADDR_VAR 0 12
75774: PUSH
75775: CALL_OW 44
75779: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75780: LD_VAR 0 12
75784: PPUSH
75785: LD_VAR 0 8
75789: PPUSH
75790: LD_INT 0
75792: PPUSH
75793: CALL 77572 0 3
// end ;
75797: GO 75695
75799: POP
75800: POP
// if enchidnas then
75801: LD_VAR 0 4
75805: IFFALSE 75872
// for i = 1 to enchidnas do
75807: LD_ADDR_VAR 0 11
75811: PUSH
75812: DOUBLE
75813: LD_INT 1
75815: DEC
75816: ST_TO_ADDR
75817: LD_VAR 0 4
75821: PUSH
75822: FOR_TO
75823: IFFALSE 75870
// begin hc_class = 13 ;
75825: LD_ADDR_OWVAR 28
75829: PUSH
75830: LD_INT 13
75832: ST_TO_ADDR
// hc_gallery =  ;
75833: LD_ADDR_OWVAR 33
75837: PUSH
75838: LD_STRING 
75840: ST_TO_ADDR
// animal := CreateHuman ;
75841: LD_ADDR_VAR 0 12
75845: PUSH
75846: CALL_OW 44
75850: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75851: LD_VAR 0 12
75855: PPUSH
75856: LD_VAR 0 8
75860: PPUSH
75861: LD_INT 0
75863: PPUSH
75864: CALL 77572 0 3
// end ;
75868: GO 75822
75870: POP
75871: POP
// if fishes then
75872: LD_VAR 0 7
75876: IFFALSE 75943
// for i = 1 to fishes do
75878: LD_ADDR_VAR 0 11
75882: PUSH
75883: DOUBLE
75884: LD_INT 1
75886: DEC
75887: ST_TO_ADDR
75888: LD_VAR 0 7
75892: PUSH
75893: FOR_TO
75894: IFFALSE 75941
// begin hc_class = 20 ;
75896: LD_ADDR_OWVAR 28
75900: PUSH
75901: LD_INT 20
75903: ST_TO_ADDR
// hc_gallery =  ;
75904: LD_ADDR_OWVAR 33
75908: PUSH
75909: LD_STRING 
75911: ST_TO_ADDR
// animal := CreateHuman ;
75912: LD_ADDR_VAR 0 12
75916: PUSH
75917: CALL_OW 44
75921: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75922: LD_VAR 0 12
75926: PPUSH
75927: LD_VAR 0 9
75931: PPUSH
75932: LD_INT 0
75934: PPUSH
75935: CALL 77572 0 3
// end ;
75939: GO 75893
75941: POP
75942: POP
// end ;
75943: LD_VAR 0 10
75947: RET
// export function WantHeal ( sci , unit ) ; begin
75948: LD_INT 0
75950: PPUSH
// if GetTaskList ( sci ) > 0 then
75951: LD_VAR 0 1
75955: PPUSH
75956: CALL_OW 437
75960: PUSH
75961: LD_INT 0
75963: GREATER
75964: IFFALSE 76034
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75966: LD_VAR 0 1
75970: PPUSH
75971: CALL_OW 437
75975: PUSH
75976: LD_INT 1
75978: ARRAY
75979: PUSH
75980: LD_INT 1
75982: ARRAY
75983: PUSH
75984: LD_STRING l
75986: EQUAL
75987: PUSH
75988: LD_VAR 0 1
75992: PPUSH
75993: CALL_OW 437
75997: PUSH
75998: LD_INT 1
76000: ARRAY
76001: PUSH
76002: LD_INT 4
76004: ARRAY
76005: PUSH
76006: LD_VAR 0 2
76010: EQUAL
76011: AND
76012: IFFALSE 76024
// result := true else
76014: LD_ADDR_VAR 0 3
76018: PUSH
76019: LD_INT 1
76021: ST_TO_ADDR
76022: GO 76032
// result := false ;
76024: LD_ADDR_VAR 0 3
76028: PUSH
76029: LD_INT 0
76031: ST_TO_ADDR
// end else
76032: GO 76042
// result := false ;
76034: LD_ADDR_VAR 0 3
76038: PUSH
76039: LD_INT 0
76041: ST_TO_ADDR
// end ;
76042: LD_VAR 0 3
76046: RET
// export function HealTarget ( sci ) ; begin
76047: LD_INT 0
76049: PPUSH
// if not sci then
76050: LD_VAR 0 1
76054: NOT
76055: IFFALSE 76059
// exit ;
76057: GO 76124
// result := 0 ;
76059: LD_ADDR_VAR 0 2
76063: PUSH
76064: LD_INT 0
76066: ST_TO_ADDR
// if GetTaskList ( sci ) then
76067: LD_VAR 0 1
76071: PPUSH
76072: CALL_OW 437
76076: IFFALSE 76124
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76078: LD_VAR 0 1
76082: PPUSH
76083: CALL_OW 437
76087: PUSH
76088: LD_INT 1
76090: ARRAY
76091: PUSH
76092: LD_INT 1
76094: ARRAY
76095: PUSH
76096: LD_STRING l
76098: EQUAL
76099: IFFALSE 76124
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76101: LD_ADDR_VAR 0 2
76105: PUSH
76106: LD_VAR 0 1
76110: PPUSH
76111: CALL_OW 437
76115: PUSH
76116: LD_INT 1
76118: ARRAY
76119: PUSH
76120: LD_INT 4
76122: ARRAY
76123: ST_TO_ADDR
// end ;
76124: LD_VAR 0 2
76128: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76129: LD_INT 0
76131: PPUSH
76132: PPUSH
76133: PPUSH
76134: PPUSH
// if not base_units then
76135: LD_VAR 0 1
76139: NOT
76140: IFFALSE 76144
// exit ;
76142: GO 76231
// result := false ;
76144: LD_ADDR_VAR 0 2
76148: PUSH
76149: LD_INT 0
76151: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76152: LD_ADDR_VAR 0 5
76156: PUSH
76157: LD_VAR 0 1
76161: PPUSH
76162: LD_INT 21
76164: PUSH
76165: LD_INT 3
76167: PUSH
76168: EMPTY
76169: LIST
76170: LIST
76171: PPUSH
76172: CALL_OW 72
76176: ST_TO_ADDR
// if not tmp then
76177: LD_VAR 0 5
76181: NOT
76182: IFFALSE 76186
// exit ;
76184: GO 76231
// for i in tmp do
76186: LD_ADDR_VAR 0 3
76190: PUSH
76191: LD_VAR 0 5
76195: PUSH
76196: FOR_IN
76197: IFFALSE 76229
// begin result := EnemyInRange ( i , 22 ) ;
76199: LD_ADDR_VAR 0 2
76203: PUSH
76204: LD_VAR 0 3
76208: PPUSH
76209: LD_INT 22
76211: PPUSH
76212: CALL 73818 0 2
76216: ST_TO_ADDR
// if result then
76217: LD_VAR 0 2
76221: IFFALSE 76227
// exit ;
76223: POP
76224: POP
76225: GO 76231
// end ;
76227: GO 76196
76229: POP
76230: POP
// end ;
76231: LD_VAR 0 2
76235: RET
// export function FilterByTag ( units , tag ) ; begin
76236: LD_INT 0
76238: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76239: LD_ADDR_VAR 0 3
76243: PUSH
76244: LD_VAR 0 1
76248: PPUSH
76249: LD_INT 120
76251: PUSH
76252: LD_VAR 0 2
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: PPUSH
76261: CALL_OW 72
76265: ST_TO_ADDR
// end ;
76266: LD_VAR 0 3
76270: RET
// export function IsDriver ( un ) ; begin
76271: LD_INT 0
76273: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76274: LD_ADDR_VAR 0 2
76278: PUSH
76279: LD_VAR 0 1
76283: PUSH
76284: LD_INT 55
76286: PUSH
76287: EMPTY
76288: LIST
76289: PPUSH
76290: CALL_OW 69
76294: IN
76295: ST_TO_ADDR
// end ;
76296: LD_VAR 0 2
76300: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76301: LD_INT 0
76303: PPUSH
76304: PPUSH
// list := [ ] ;
76305: LD_ADDR_VAR 0 5
76309: PUSH
76310: EMPTY
76311: ST_TO_ADDR
// case d of 0 :
76312: LD_VAR 0 3
76316: PUSH
76317: LD_INT 0
76319: DOUBLE
76320: EQUAL
76321: IFTRUE 76325
76323: GO 76458
76325: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76326: LD_ADDR_VAR 0 5
76330: PUSH
76331: LD_VAR 0 1
76335: PUSH
76336: LD_INT 4
76338: MINUS
76339: PUSH
76340: LD_VAR 0 2
76344: PUSH
76345: LD_INT 4
76347: MINUS
76348: PUSH
76349: LD_INT 2
76351: PUSH
76352: EMPTY
76353: LIST
76354: LIST
76355: LIST
76356: PUSH
76357: LD_VAR 0 1
76361: PUSH
76362: LD_INT 3
76364: MINUS
76365: PUSH
76366: LD_VAR 0 2
76370: PUSH
76371: LD_INT 1
76373: PUSH
76374: EMPTY
76375: LIST
76376: LIST
76377: LIST
76378: PUSH
76379: LD_VAR 0 1
76383: PUSH
76384: LD_INT 4
76386: PLUS
76387: PUSH
76388: LD_VAR 0 2
76392: PUSH
76393: LD_INT 4
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: LIST
76400: PUSH
76401: LD_VAR 0 1
76405: PUSH
76406: LD_INT 3
76408: PLUS
76409: PUSH
76410: LD_VAR 0 2
76414: PUSH
76415: LD_INT 3
76417: PLUS
76418: PUSH
76419: LD_INT 5
76421: PUSH
76422: EMPTY
76423: LIST
76424: LIST
76425: LIST
76426: PUSH
76427: LD_VAR 0 1
76431: PUSH
76432: LD_VAR 0 2
76436: PUSH
76437: LD_INT 4
76439: PLUS
76440: PUSH
76441: LD_INT 0
76443: PUSH
76444: EMPTY
76445: LIST
76446: LIST
76447: LIST
76448: PUSH
76449: EMPTY
76450: LIST
76451: LIST
76452: LIST
76453: LIST
76454: LIST
76455: ST_TO_ADDR
// end ; 1 :
76456: GO 77156
76458: LD_INT 1
76460: DOUBLE
76461: EQUAL
76462: IFTRUE 76466
76464: GO 76599
76466: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76467: LD_ADDR_VAR 0 5
76471: PUSH
76472: LD_VAR 0 1
76476: PUSH
76477: LD_VAR 0 2
76481: PUSH
76482: LD_INT 4
76484: MINUS
76485: PUSH
76486: LD_INT 3
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: LIST
76493: PUSH
76494: LD_VAR 0 1
76498: PUSH
76499: LD_INT 3
76501: MINUS
76502: PUSH
76503: LD_VAR 0 2
76507: PUSH
76508: LD_INT 3
76510: MINUS
76511: PUSH
76512: LD_INT 2
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: LIST
76519: PUSH
76520: LD_VAR 0 1
76524: PUSH
76525: LD_INT 4
76527: MINUS
76528: PUSH
76529: LD_VAR 0 2
76533: PUSH
76534: LD_INT 1
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: LIST
76541: PUSH
76542: LD_VAR 0 1
76546: PUSH
76547: LD_VAR 0 2
76551: PUSH
76552: LD_INT 3
76554: PLUS
76555: PUSH
76556: LD_INT 0
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: LIST
76563: PUSH
76564: LD_VAR 0 1
76568: PUSH
76569: LD_INT 4
76571: PLUS
76572: PUSH
76573: LD_VAR 0 2
76577: PUSH
76578: LD_INT 4
76580: PLUS
76581: PUSH
76582: LD_INT 5
76584: PUSH
76585: EMPTY
76586: LIST
76587: LIST
76588: LIST
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: LIST
76594: LIST
76595: LIST
76596: ST_TO_ADDR
// end ; 2 :
76597: GO 77156
76599: LD_INT 2
76601: DOUBLE
76602: EQUAL
76603: IFTRUE 76607
76605: GO 76736
76607: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76608: LD_ADDR_VAR 0 5
76612: PUSH
76613: LD_VAR 0 1
76617: PUSH
76618: LD_VAR 0 2
76622: PUSH
76623: LD_INT 3
76625: MINUS
76626: PUSH
76627: LD_INT 3
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: LIST
76634: PUSH
76635: LD_VAR 0 1
76639: PUSH
76640: LD_INT 4
76642: PLUS
76643: PUSH
76644: LD_VAR 0 2
76648: PUSH
76649: LD_INT 4
76651: PUSH
76652: EMPTY
76653: LIST
76654: LIST
76655: LIST
76656: PUSH
76657: LD_VAR 0 1
76661: PUSH
76662: LD_VAR 0 2
76666: PUSH
76667: LD_INT 4
76669: PLUS
76670: PUSH
76671: LD_INT 0
76673: PUSH
76674: EMPTY
76675: LIST
76676: LIST
76677: LIST
76678: PUSH
76679: LD_VAR 0 1
76683: PUSH
76684: LD_INT 3
76686: MINUS
76687: PUSH
76688: LD_VAR 0 2
76692: PUSH
76693: LD_INT 1
76695: PUSH
76696: EMPTY
76697: LIST
76698: LIST
76699: LIST
76700: PUSH
76701: LD_VAR 0 1
76705: PUSH
76706: LD_INT 4
76708: MINUS
76709: PUSH
76710: LD_VAR 0 2
76714: PUSH
76715: LD_INT 4
76717: MINUS
76718: PUSH
76719: LD_INT 2
76721: PUSH
76722: EMPTY
76723: LIST
76724: LIST
76725: LIST
76726: PUSH
76727: EMPTY
76728: LIST
76729: LIST
76730: LIST
76731: LIST
76732: LIST
76733: ST_TO_ADDR
// end ; 3 :
76734: GO 77156
76736: LD_INT 3
76738: DOUBLE
76739: EQUAL
76740: IFTRUE 76744
76742: GO 76877
76744: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76745: LD_ADDR_VAR 0 5
76749: PUSH
76750: LD_VAR 0 1
76754: PUSH
76755: LD_INT 3
76757: PLUS
76758: PUSH
76759: LD_VAR 0 2
76763: PUSH
76764: LD_INT 4
76766: PUSH
76767: EMPTY
76768: LIST
76769: LIST
76770: LIST
76771: PUSH
76772: LD_VAR 0 1
76776: PUSH
76777: LD_INT 4
76779: PLUS
76780: PUSH
76781: LD_VAR 0 2
76785: PUSH
76786: LD_INT 4
76788: PLUS
76789: PUSH
76790: LD_INT 5
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: LIST
76797: PUSH
76798: LD_VAR 0 1
76802: PUSH
76803: LD_INT 4
76805: MINUS
76806: PUSH
76807: LD_VAR 0 2
76811: PUSH
76812: LD_INT 1
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: LIST
76819: PUSH
76820: LD_VAR 0 1
76824: PUSH
76825: LD_VAR 0 2
76829: PUSH
76830: LD_INT 4
76832: MINUS
76833: PUSH
76834: LD_INT 3
76836: PUSH
76837: EMPTY
76838: LIST
76839: LIST
76840: LIST
76841: PUSH
76842: LD_VAR 0 1
76846: PUSH
76847: LD_INT 3
76849: MINUS
76850: PUSH
76851: LD_VAR 0 2
76855: PUSH
76856: LD_INT 3
76858: MINUS
76859: PUSH
76860: LD_INT 2
76862: PUSH
76863: EMPTY
76864: LIST
76865: LIST
76866: LIST
76867: PUSH
76868: EMPTY
76869: LIST
76870: LIST
76871: LIST
76872: LIST
76873: LIST
76874: ST_TO_ADDR
// end ; 4 :
76875: GO 77156
76877: LD_INT 4
76879: DOUBLE
76880: EQUAL
76881: IFTRUE 76885
76883: GO 77018
76885: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76886: LD_ADDR_VAR 0 5
76890: PUSH
76891: LD_VAR 0 1
76895: PUSH
76896: LD_VAR 0 2
76900: PUSH
76901: LD_INT 4
76903: PLUS
76904: PUSH
76905: LD_INT 0
76907: PUSH
76908: EMPTY
76909: LIST
76910: LIST
76911: LIST
76912: PUSH
76913: LD_VAR 0 1
76917: PUSH
76918: LD_INT 3
76920: PLUS
76921: PUSH
76922: LD_VAR 0 2
76926: PUSH
76927: LD_INT 3
76929: PLUS
76930: PUSH
76931: LD_INT 5
76933: PUSH
76934: EMPTY
76935: LIST
76936: LIST
76937: LIST
76938: PUSH
76939: LD_VAR 0 1
76943: PUSH
76944: LD_INT 4
76946: PLUS
76947: PUSH
76948: LD_VAR 0 2
76952: PUSH
76953: LD_INT 4
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: LIST
76960: PUSH
76961: LD_VAR 0 1
76965: PUSH
76966: LD_VAR 0 2
76970: PUSH
76971: LD_INT 3
76973: MINUS
76974: PUSH
76975: LD_INT 3
76977: PUSH
76978: EMPTY
76979: LIST
76980: LIST
76981: LIST
76982: PUSH
76983: LD_VAR 0 1
76987: PUSH
76988: LD_INT 4
76990: MINUS
76991: PUSH
76992: LD_VAR 0 2
76996: PUSH
76997: LD_INT 4
76999: MINUS
77000: PUSH
77001: LD_INT 2
77003: PUSH
77004: EMPTY
77005: LIST
77006: LIST
77007: LIST
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: LIST
77013: LIST
77014: LIST
77015: ST_TO_ADDR
// end ; 5 :
77016: GO 77156
77018: LD_INT 5
77020: DOUBLE
77021: EQUAL
77022: IFTRUE 77026
77024: GO 77155
77026: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77027: LD_ADDR_VAR 0 5
77031: PUSH
77032: LD_VAR 0 1
77036: PUSH
77037: LD_INT 4
77039: MINUS
77040: PUSH
77041: LD_VAR 0 2
77045: PUSH
77046: LD_INT 1
77048: PUSH
77049: EMPTY
77050: LIST
77051: LIST
77052: LIST
77053: PUSH
77054: LD_VAR 0 1
77058: PUSH
77059: LD_VAR 0 2
77063: PUSH
77064: LD_INT 4
77066: MINUS
77067: PUSH
77068: LD_INT 3
77070: PUSH
77071: EMPTY
77072: LIST
77073: LIST
77074: LIST
77075: PUSH
77076: LD_VAR 0 1
77080: PUSH
77081: LD_INT 4
77083: PLUS
77084: PUSH
77085: LD_VAR 0 2
77089: PUSH
77090: LD_INT 4
77092: PLUS
77093: PUSH
77094: LD_INT 5
77096: PUSH
77097: EMPTY
77098: LIST
77099: LIST
77100: LIST
77101: PUSH
77102: LD_VAR 0 1
77106: PUSH
77107: LD_INT 3
77109: PLUS
77110: PUSH
77111: LD_VAR 0 2
77115: PUSH
77116: LD_INT 4
77118: PUSH
77119: EMPTY
77120: LIST
77121: LIST
77122: LIST
77123: PUSH
77124: LD_VAR 0 1
77128: PUSH
77129: LD_VAR 0 2
77133: PUSH
77134: LD_INT 3
77136: PLUS
77137: PUSH
77138: LD_INT 0
77140: PUSH
77141: EMPTY
77142: LIST
77143: LIST
77144: LIST
77145: PUSH
77146: EMPTY
77147: LIST
77148: LIST
77149: LIST
77150: LIST
77151: LIST
77152: ST_TO_ADDR
// end ; end ;
77153: GO 77156
77155: POP
// result := list ;
77156: LD_ADDR_VAR 0 4
77160: PUSH
77161: LD_VAR 0 5
77165: ST_TO_ADDR
// end ;
77166: LD_VAR 0 4
77170: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77171: LD_INT 0
77173: PPUSH
77174: PPUSH
77175: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77176: LD_VAR 0 1
77180: NOT
77181: PUSH
77182: LD_VAR 0 2
77186: PUSH
77187: LD_INT 1
77189: PUSH
77190: LD_INT 2
77192: PUSH
77193: LD_INT 3
77195: PUSH
77196: LD_INT 4
77198: PUSH
77199: EMPTY
77200: LIST
77201: LIST
77202: LIST
77203: LIST
77204: IN
77205: NOT
77206: OR
77207: IFFALSE 77211
// exit ;
77209: GO 77294
// tmp := [ ] ;
77211: LD_ADDR_VAR 0 5
77215: PUSH
77216: EMPTY
77217: ST_TO_ADDR
// for i in units do
77218: LD_ADDR_VAR 0 4
77222: PUSH
77223: LD_VAR 0 1
77227: PUSH
77228: FOR_IN
77229: IFFALSE 77263
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77231: LD_ADDR_VAR 0 5
77235: PUSH
77236: LD_VAR 0 5
77240: PPUSH
77241: LD_VAR 0 4
77245: PPUSH
77246: LD_VAR 0 2
77250: PPUSH
77251: CALL_OW 259
77255: PPUSH
77256: CALL 78655 0 2
77260: ST_TO_ADDR
77261: GO 77228
77263: POP
77264: POP
// if not tmp then
77265: LD_VAR 0 5
77269: NOT
77270: IFFALSE 77274
// exit ;
77272: GO 77294
// result := SortListByListDesc ( units , tmp ) ;
77274: LD_ADDR_VAR 0 3
77278: PUSH
77279: LD_VAR 0 1
77283: PPUSH
77284: LD_VAR 0 5
77288: PPUSH
77289: CALL_OW 77
77293: ST_TO_ADDR
// end ;
77294: LD_VAR 0 3
77298: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77299: LD_INT 0
77301: PPUSH
77302: PPUSH
77303: PPUSH
// result := false ;
77304: LD_ADDR_VAR 0 3
77308: PUSH
77309: LD_INT 0
77311: ST_TO_ADDR
// if not building then
77312: LD_VAR 0 2
77316: NOT
77317: IFFALSE 77321
// exit ;
77319: GO 77459
// x := GetX ( building ) ;
77321: LD_ADDR_VAR 0 4
77325: PUSH
77326: LD_VAR 0 2
77330: PPUSH
77331: CALL_OW 250
77335: ST_TO_ADDR
// y := GetY ( building ) ;
77336: LD_ADDR_VAR 0 5
77340: PUSH
77341: LD_VAR 0 2
77345: PPUSH
77346: CALL_OW 251
77350: ST_TO_ADDR
// if not x or not y then
77351: LD_VAR 0 4
77355: NOT
77356: PUSH
77357: LD_VAR 0 5
77361: NOT
77362: OR
77363: IFFALSE 77367
// exit ;
77365: GO 77459
// if GetTaskList ( unit ) then
77367: LD_VAR 0 1
77371: PPUSH
77372: CALL_OW 437
77376: IFFALSE 77459
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77378: LD_STRING e
77380: PUSH
77381: LD_VAR 0 1
77385: PPUSH
77386: CALL_OW 437
77390: PUSH
77391: LD_INT 1
77393: ARRAY
77394: PUSH
77395: LD_INT 1
77397: ARRAY
77398: EQUAL
77399: PUSH
77400: LD_VAR 0 4
77404: PUSH
77405: LD_VAR 0 1
77409: PPUSH
77410: CALL_OW 437
77414: PUSH
77415: LD_INT 1
77417: ARRAY
77418: PUSH
77419: LD_INT 2
77421: ARRAY
77422: EQUAL
77423: AND
77424: PUSH
77425: LD_VAR 0 5
77429: PUSH
77430: LD_VAR 0 1
77434: PPUSH
77435: CALL_OW 437
77439: PUSH
77440: LD_INT 1
77442: ARRAY
77443: PUSH
77444: LD_INT 3
77446: ARRAY
77447: EQUAL
77448: AND
77449: IFFALSE 77459
// result := true end ;
77451: LD_ADDR_VAR 0 3
77455: PUSH
77456: LD_INT 1
77458: ST_TO_ADDR
// end ;
77459: LD_VAR 0 3
77463: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77464: LD_INT 0
77466: PPUSH
// result := false ;
77467: LD_ADDR_VAR 0 4
77471: PUSH
77472: LD_INT 0
77474: ST_TO_ADDR
// if GetTaskList ( unit ) then
77475: LD_VAR 0 1
77479: PPUSH
77480: CALL_OW 437
77484: IFFALSE 77567
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77486: LD_STRING M
77488: PUSH
77489: LD_VAR 0 1
77493: PPUSH
77494: CALL_OW 437
77498: PUSH
77499: LD_INT 1
77501: ARRAY
77502: PUSH
77503: LD_INT 1
77505: ARRAY
77506: EQUAL
77507: PUSH
77508: LD_VAR 0 2
77512: PUSH
77513: LD_VAR 0 1
77517: PPUSH
77518: CALL_OW 437
77522: PUSH
77523: LD_INT 1
77525: ARRAY
77526: PUSH
77527: LD_INT 2
77529: ARRAY
77530: EQUAL
77531: AND
77532: PUSH
77533: LD_VAR 0 3
77537: PUSH
77538: LD_VAR 0 1
77542: PPUSH
77543: CALL_OW 437
77547: PUSH
77548: LD_INT 1
77550: ARRAY
77551: PUSH
77552: LD_INT 3
77554: ARRAY
77555: EQUAL
77556: AND
77557: IFFALSE 77567
// result := true ;
77559: LD_ADDR_VAR 0 4
77563: PUSH
77564: LD_INT 1
77566: ST_TO_ADDR
// end ; end ;
77567: LD_VAR 0 4
77571: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77572: LD_INT 0
77574: PPUSH
77575: PPUSH
77576: PPUSH
77577: PPUSH
// if not unit or not area then
77578: LD_VAR 0 1
77582: NOT
77583: PUSH
77584: LD_VAR 0 2
77588: NOT
77589: OR
77590: IFFALSE 77594
// exit ;
77592: GO 77758
// tmp := AreaToList ( area , i ) ;
77594: LD_ADDR_VAR 0 6
77598: PUSH
77599: LD_VAR 0 2
77603: PPUSH
77604: LD_VAR 0 5
77608: PPUSH
77609: CALL_OW 517
77613: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77614: LD_ADDR_VAR 0 5
77618: PUSH
77619: DOUBLE
77620: LD_INT 1
77622: DEC
77623: ST_TO_ADDR
77624: LD_VAR 0 6
77628: PUSH
77629: LD_INT 1
77631: ARRAY
77632: PUSH
77633: FOR_TO
77634: IFFALSE 77756
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77636: LD_ADDR_VAR 0 7
77640: PUSH
77641: LD_VAR 0 6
77645: PUSH
77646: LD_INT 1
77648: ARRAY
77649: PUSH
77650: LD_VAR 0 5
77654: ARRAY
77655: PUSH
77656: LD_VAR 0 6
77660: PUSH
77661: LD_INT 2
77663: ARRAY
77664: PUSH
77665: LD_VAR 0 5
77669: ARRAY
77670: PUSH
77671: EMPTY
77672: LIST
77673: LIST
77674: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77675: LD_VAR 0 7
77679: PUSH
77680: LD_INT 1
77682: ARRAY
77683: PPUSH
77684: LD_VAR 0 7
77688: PUSH
77689: LD_INT 2
77691: ARRAY
77692: PPUSH
77693: CALL_OW 428
77697: PUSH
77698: LD_INT 0
77700: EQUAL
77701: IFFALSE 77754
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77703: LD_VAR 0 1
77707: PPUSH
77708: LD_VAR 0 7
77712: PUSH
77713: LD_INT 1
77715: ARRAY
77716: PPUSH
77717: LD_VAR 0 7
77721: PUSH
77722: LD_INT 2
77724: ARRAY
77725: PPUSH
77726: LD_VAR 0 3
77730: PPUSH
77731: CALL_OW 48
// result := IsPlaced ( unit ) ;
77735: LD_ADDR_VAR 0 4
77739: PUSH
77740: LD_VAR 0 1
77744: PPUSH
77745: CALL_OW 305
77749: ST_TO_ADDR
// exit ;
77750: POP
77751: POP
77752: GO 77758
// end ; end ;
77754: GO 77633
77756: POP
77757: POP
// end ;
77758: LD_VAR 0 4
77762: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77763: LD_INT 0
77765: PPUSH
77766: PPUSH
77767: PPUSH
// if not side or side > 8 then
77768: LD_VAR 0 1
77772: NOT
77773: PUSH
77774: LD_VAR 0 1
77778: PUSH
77779: LD_INT 8
77781: GREATER
77782: OR
77783: IFFALSE 77787
// exit ;
77785: GO 77974
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77787: LD_ADDR_VAR 0 4
77791: PUSH
77792: LD_INT 22
77794: PUSH
77795: LD_VAR 0 1
77799: PUSH
77800: EMPTY
77801: LIST
77802: LIST
77803: PUSH
77804: LD_INT 21
77806: PUSH
77807: LD_INT 3
77809: PUSH
77810: EMPTY
77811: LIST
77812: LIST
77813: PUSH
77814: EMPTY
77815: LIST
77816: LIST
77817: PPUSH
77818: CALL_OW 69
77822: ST_TO_ADDR
// if not tmp then
77823: LD_VAR 0 4
77827: NOT
77828: IFFALSE 77832
// exit ;
77830: GO 77974
// enable_addtolog := true ;
77832: LD_ADDR_OWVAR 81
77836: PUSH
77837: LD_INT 1
77839: ST_TO_ADDR
// AddToLog ( [ ) ;
77840: LD_STRING [
77842: PPUSH
77843: CALL_OW 561
// for i in tmp do
77847: LD_ADDR_VAR 0 3
77851: PUSH
77852: LD_VAR 0 4
77856: PUSH
77857: FOR_IN
77858: IFFALSE 77965
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77860: LD_STRING [
77862: PUSH
77863: LD_VAR 0 3
77867: PPUSH
77868: CALL_OW 266
77872: STR
77873: PUSH
77874: LD_STRING , 
77876: STR
77877: PUSH
77878: LD_VAR 0 3
77882: PPUSH
77883: CALL_OW 250
77887: STR
77888: PUSH
77889: LD_STRING , 
77891: STR
77892: PUSH
77893: LD_VAR 0 3
77897: PPUSH
77898: CALL_OW 251
77902: STR
77903: PUSH
77904: LD_STRING , 
77906: STR
77907: PUSH
77908: LD_VAR 0 3
77912: PPUSH
77913: CALL_OW 254
77917: STR
77918: PUSH
77919: LD_STRING , 
77921: STR
77922: PUSH
77923: LD_VAR 0 3
77927: PPUSH
77928: LD_INT 1
77930: PPUSH
77931: CALL_OW 268
77935: STR
77936: PUSH
77937: LD_STRING , 
77939: STR
77940: PUSH
77941: LD_VAR 0 3
77945: PPUSH
77946: LD_INT 2
77948: PPUSH
77949: CALL_OW 268
77953: STR
77954: PUSH
77955: LD_STRING ],
77957: STR
77958: PPUSH
77959: CALL_OW 561
// end ;
77963: GO 77857
77965: POP
77966: POP
// AddToLog ( ]; ) ;
77967: LD_STRING ];
77969: PPUSH
77970: CALL_OW 561
// end ;
77974: LD_VAR 0 2
77978: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77979: LD_INT 0
77981: PPUSH
77982: PPUSH
77983: PPUSH
77984: PPUSH
77985: PPUSH
// if not area or not rate or not max then
77986: LD_VAR 0 1
77990: NOT
77991: PUSH
77992: LD_VAR 0 2
77996: NOT
77997: OR
77998: PUSH
77999: LD_VAR 0 4
78003: NOT
78004: OR
78005: IFFALSE 78009
// exit ;
78007: GO 78198
// while 1 do
78009: LD_INT 1
78011: IFFALSE 78198
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78013: LD_ADDR_VAR 0 9
78017: PUSH
78018: LD_VAR 0 1
78022: PPUSH
78023: LD_INT 1
78025: PPUSH
78026: CALL_OW 287
78030: PUSH
78031: LD_INT 10
78033: MUL
78034: ST_TO_ADDR
// r := rate / 10 ;
78035: LD_ADDR_VAR 0 7
78039: PUSH
78040: LD_VAR 0 2
78044: PUSH
78045: LD_INT 10
78047: DIVREAL
78048: ST_TO_ADDR
// time := 1 1$00 ;
78049: LD_ADDR_VAR 0 8
78053: PUSH
78054: LD_INT 2100
78056: ST_TO_ADDR
// if amount < min then
78057: LD_VAR 0 9
78061: PUSH
78062: LD_VAR 0 3
78066: LESS
78067: IFFALSE 78085
// r := r * 2 else
78069: LD_ADDR_VAR 0 7
78073: PUSH
78074: LD_VAR 0 7
78078: PUSH
78079: LD_INT 2
78081: MUL
78082: ST_TO_ADDR
78083: GO 78111
// if amount > max then
78085: LD_VAR 0 9
78089: PUSH
78090: LD_VAR 0 4
78094: GREATER
78095: IFFALSE 78111
// r := r / 2 ;
78097: LD_ADDR_VAR 0 7
78101: PUSH
78102: LD_VAR 0 7
78106: PUSH
78107: LD_INT 2
78109: DIVREAL
78110: ST_TO_ADDR
// time := time / r ;
78111: LD_ADDR_VAR 0 8
78115: PUSH
78116: LD_VAR 0 8
78120: PUSH
78121: LD_VAR 0 7
78125: DIVREAL
78126: ST_TO_ADDR
// if time < 0 then
78127: LD_VAR 0 8
78131: PUSH
78132: LD_INT 0
78134: LESS
78135: IFFALSE 78152
// time := time * - 1 ;
78137: LD_ADDR_VAR 0 8
78141: PUSH
78142: LD_VAR 0 8
78146: PUSH
78147: LD_INT 1
78149: NEG
78150: MUL
78151: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78152: LD_VAR 0 8
78156: PUSH
78157: LD_INT 35
78159: PPUSH
78160: LD_INT 875
78162: PPUSH
78163: CALL_OW 12
78167: PLUS
78168: PPUSH
78169: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78173: LD_INT 1
78175: PPUSH
78176: LD_INT 5
78178: PPUSH
78179: CALL_OW 12
78183: PPUSH
78184: LD_VAR 0 1
78188: PPUSH
78189: LD_INT 1
78191: PPUSH
78192: CALL_OW 55
// end ;
78196: GO 78009
// end ;
78198: LD_VAR 0 5
78202: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78203: LD_INT 0
78205: PPUSH
78206: PPUSH
78207: PPUSH
78208: PPUSH
78209: PPUSH
78210: PPUSH
78211: PPUSH
78212: PPUSH
// if not turrets or not factories then
78213: LD_VAR 0 1
78217: NOT
78218: PUSH
78219: LD_VAR 0 2
78223: NOT
78224: OR
78225: IFFALSE 78229
// exit ;
78227: GO 78536
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78229: LD_ADDR_VAR 0 10
78233: PUSH
78234: LD_INT 5
78236: PUSH
78237: LD_INT 6
78239: PUSH
78240: EMPTY
78241: LIST
78242: LIST
78243: PUSH
78244: LD_INT 2
78246: PUSH
78247: LD_INT 4
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: PUSH
78254: LD_INT 3
78256: PUSH
78257: LD_INT 5
78259: PUSH
78260: EMPTY
78261: LIST
78262: LIST
78263: PUSH
78264: EMPTY
78265: LIST
78266: LIST
78267: LIST
78268: PUSH
78269: LD_INT 24
78271: PUSH
78272: LD_INT 25
78274: PUSH
78275: EMPTY
78276: LIST
78277: LIST
78278: PUSH
78279: LD_INT 23
78281: PUSH
78282: LD_INT 27
78284: PUSH
78285: EMPTY
78286: LIST
78287: LIST
78288: PUSH
78289: EMPTY
78290: LIST
78291: LIST
78292: PUSH
78293: LD_INT 42
78295: PUSH
78296: LD_INT 43
78298: PUSH
78299: EMPTY
78300: LIST
78301: LIST
78302: PUSH
78303: LD_INT 44
78305: PUSH
78306: LD_INT 46
78308: PUSH
78309: EMPTY
78310: LIST
78311: LIST
78312: PUSH
78313: LD_INT 45
78315: PUSH
78316: LD_INT 47
78318: PUSH
78319: EMPTY
78320: LIST
78321: LIST
78322: PUSH
78323: EMPTY
78324: LIST
78325: LIST
78326: LIST
78327: PUSH
78328: EMPTY
78329: LIST
78330: LIST
78331: LIST
78332: ST_TO_ADDR
// result := [ ] ;
78333: LD_ADDR_VAR 0 3
78337: PUSH
78338: EMPTY
78339: ST_TO_ADDR
// for i in turrets do
78340: LD_ADDR_VAR 0 4
78344: PUSH
78345: LD_VAR 0 1
78349: PUSH
78350: FOR_IN
78351: IFFALSE 78534
// begin nat := GetNation ( i ) ;
78353: LD_ADDR_VAR 0 7
78357: PUSH
78358: LD_VAR 0 4
78362: PPUSH
78363: CALL_OW 248
78367: ST_TO_ADDR
// weapon := 0 ;
78368: LD_ADDR_VAR 0 8
78372: PUSH
78373: LD_INT 0
78375: ST_TO_ADDR
// if not nat then
78376: LD_VAR 0 7
78380: NOT
78381: IFFALSE 78385
// continue ;
78383: GO 78350
// for j in list [ nat ] do
78385: LD_ADDR_VAR 0 5
78389: PUSH
78390: LD_VAR 0 10
78394: PUSH
78395: LD_VAR 0 7
78399: ARRAY
78400: PUSH
78401: FOR_IN
78402: IFFALSE 78443
// if GetBWeapon ( i ) = j [ 1 ] then
78404: LD_VAR 0 4
78408: PPUSH
78409: CALL_OW 269
78413: PUSH
78414: LD_VAR 0 5
78418: PUSH
78419: LD_INT 1
78421: ARRAY
78422: EQUAL
78423: IFFALSE 78441
// begin weapon := j [ 2 ] ;
78425: LD_ADDR_VAR 0 8
78429: PUSH
78430: LD_VAR 0 5
78434: PUSH
78435: LD_INT 2
78437: ARRAY
78438: ST_TO_ADDR
// break ;
78439: GO 78443
// end ;
78441: GO 78401
78443: POP
78444: POP
// if not weapon then
78445: LD_VAR 0 8
78449: NOT
78450: IFFALSE 78454
// continue ;
78452: GO 78350
// for k in factories do
78454: LD_ADDR_VAR 0 6
78458: PUSH
78459: LD_VAR 0 2
78463: PUSH
78464: FOR_IN
78465: IFFALSE 78530
// begin weapons := AvailableWeaponList ( k ) ;
78467: LD_ADDR_VAR 0 9
78471: PUSH
78472: LD_VAR 0 6
78476: PPUSH
78477: CALL_OW 478
78481: ST_TO_ADDR
// if not weapons then
78482: LD_VAR 0 9
78486: NOT
78487: IFFALSE 78491
// continue ;
78489: GO 78464
// if weapon in weapons then
78491: LD_VAR 0 8
78495: PUSH
78496: LD_VAR 0 9
78500: IN
78501: IFFALSE 78528
// begin result := [ i , weapon ] ;
78503: LD_ADDR_VAR 0 3
78507: PUSH
78508: LD_VAR 0 4
78512: PUSH
78513: LD_VAR 0 8
78517: PUSH
78518: EMPTY
78519: LIST
78520: LIST
78521: ST_TO_ADDR
// exit ;
78522: POP
78523: POP
78524: POP
78525: POP
78526: GO 78536
// end ; end ;
78528: GO 78464
78530: POP
78531: POP
// end ;
78532: GO 78350
78534: POP
78535: POP
// end ;
78536: LD_VAR 0 3
78540: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78541: LD_INT 0
78543: PPUSH
// if not side or side > 8 then
78544: LD_VAR 0 3
78548: NOT
78549: PUSH
78550: LD_VAR 0 3
78554: PUSH
78555: LD_INT 8
78557: GREATER
78558: OR
78559: IFFALSE 78563
// exit ;
78561: GO 78622
// if not range then
78563: LD_VAR 0 4
78567: NOT
78568: IFFALSE 78579
// range := - 12 ;
78570: LD_ADDR_VAR 0 4
78574: PUSH
78575: LD_INT 12
78577: NEG
78578: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78579: LD_VAR 0 1
78583: PPUSH
78584: LD_VAR 0 2
78588: PPUSH
78589: LD_VAR 0 3
78593: PPUSH
78594: LD_VAR 0 4
78598: PPUSH
78599: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78603: LD_VAR 0 1
78607: PPUSH
78608: LD_VAR 0 2
78612: PPUSH
78613: LD_VAR 0 3
78617: PPUSH
78618: CALL_OW 331
// end ;
78622: LD_VAR 0 5
78626: RET
// export function Video ( mode ) ; begin
78627: LD_INT 0
78629: PPUSH
// ingame_video = mode ;
78630: LD_ADDR_OWVAR 52
78634: PUSH
78635: LD_VAR 0 1
78639: ST_TO_ADDR
// interface_hidden = mode ;
78640: LD_ADDR_OWVAR 54
78644: PUSH
78645: LD_VAR 0 1
78649: ST_TO_ADDR
// end ;
78650: LD_VAR 0 2
78654: RET
// export function Join ( array , element ) ; begin
78655: LD_INT 0
78657: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78658: LD_ADDR_VAR 0 3
78662: PUSH
78663: LD_VAR 0 1
78667: PPUSH
78668: LD_VAR 0 1
78672: PUSH
78673: LD_INT 1
78675: PLUS
78676: PPUSH
78677: LD_VAR 0 2
78681: PPUSH
78682: CALL_OW 1
78686: ST_TO_ADDR
// end ;
78687: LD_VAR 0 3
78691: RET
// export function JoinUnion ( array , element ) ; begin
78692: LD_INT 0
78694: PPUSH
// result := array union element ;
78695: LD_ADDR_VAR 0 3
78699: PUSH
78700: LD_VAR 0 1
78704: PUSH
78705: LD_VAR 0 2
78709: UNION
78710: ST_TO_ADDR
// end ;
78711: LD_VAR 0 3
78715: RET
// export function GetBehemoths ( side ) ; begin
78716: LD_INT 0
78718: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78719: LD_ADDR_VAR 0 2
78723: PUSH
78724: LD_INT 22
78726: PUSH
78727: LD_VAR 0 1
78731: PUSH
78732: EMPTY
78733: LIST
78734: LIST
78735: PUSH
78736: LD_INT 31
78738: PUSH
78739: LD_INT 25
78741: PUSH
78742: EMPTY
78743: LIST
78744: LIST
78745: PUSH
78746: EMPTY
78747: LIST
78748: LIST
78749: PPUSH
78750: CALL_OW 69
78754: ST_TO_ADDR
// end ;
78755: LD_VAR 0 2
78759: RET
// export function Shuffle ( array ) ; var i , index ; begin
78760: LD_INT 0
78762: PPUSH
78763: PPUSH
78764: PPUSH
// result := [ ] ;
78765: LD_ADDR_VAR 0 2
78769: PUSH
78770: EMPTY
78771: ST_TO_ADDR
// if not array then
78772: LD_VAR 0 1
78776: NOT
78777: IFFALSE 78781
// exit ;
78779: GO 78880
// Randomize ;
78781: CALL_OW 10
// for i = array downto 1 do
78785: LD_ADDR_VAR 0 3
78789: PUSH
78790: DOUBLE
78791: LD_VAR 0 1
78795: INC
78796: ST_TO_ADDR
78797: LD_INT 1
78799: PUSH
78800: FOR_DOWNTO
78801: IFFALSE 78878
// begin index := rand ( 1 , array ) ;
78803: LD_ADDR_VAR 0 4
78807: PUSH
78808: LD_INT 1
78810: PPUSH
78811: LD_VAR 0 1
78815: PPUSH
78816: CALL_OW 12
78820: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78821: LD_ADDR_VAR 0 2
78825: PUSH
78826: LD_VAR 0 2
78830: PPUSH
78831: LD_VAR 0 2
78835: PUSH
78836: LD_INT 1
78838: PLUS
78839: PPUSH
78840: LD_VAR 0 1
78844: PUSH
78845: LD_VAR 0 4
78849: ARRAY
78850: PPUSH
78851: CALL_OW 2
78855: ST_TO_ADDR
// array := Delete ( array , index ) ;
78856: LD_ADDR_VAR 0 1
78860: PUSH
78861: LD_VAR 0 1
78865: PPUSH
78866: LD_VAR 0 4
78870: PPUSH
78871: CALL_OW 3
78875: ST_TO_ADDR
// end ;
78876: GO 78800
78878: POP
78879: POP
// end ;
78880: LD_VAR 0 2
78884: RET
// export function GetBaseMaterials ( base ) ; begin
78885: LD_INT 0
78887: PPUSH
// result := [ 0 , 0 , 0 ] ;
78888: LD_ADDR_VAR 0 2
78892: PUSH
78893: LD_INT 0
78895: PUSH
78896: LD_INT 0
78898: PUSH
78899: LD_INT 0
78901: PUSH
78902: EMPTY
78903: LIST
78904: LIST
78905: LIST
78906: ST_TO_ADDR
// if not base then
78907: LD_VAR 0 1
78911: NOT
78912: IFFALSE 78916
// exit ;
78914: GO 78965
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78916: LD_ADDR_VAR 0 2
78920: PUSH
78921: LD_VAR 0 1
78925: PPUSH
78926: LD_INT 1
78928: PPUSH
78929: CALL_OW 275
78933: PUSH
78934: LD_VAR 0 1
78938: PPUSH
78939: LD_INT 2
78941: PPUSH
78942: CALL_OW 275
78946: PUSH
78947: LD_VAR 0 1
78951: PPUSH
78952: LD_INT 3
78954: PPUSH
78955: CALL_OW 275
78959: PUSH
78960: EMPTY
78961: LIST
78962: LIST
78963: LIST
78964: ST_TO_ADDR
// end ;
78965: LD_VAR 0 2
78969: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78970: LD_INT 0
78972: PPUSH
78973: PPUSH
// result := array ;
78974: LD_ADDR_VAR 0 3
78978: PUSH
78979: LD_VAR 0 1
78983: ST_TO_ADDR
// if size >= result then
78984: LD_VAR 0 2
78988: PUSH
78989: LD_VAR 0 3
78993: GREATEREQUAL
78994: IFFALSE 78998
// exit ;
78996: GO 79048
// if size then
78998: LD_VAR 0 2
79002: IFFALSE 79048
// for i := array downto size do
79004: LD_ADDR_VAR 0 4
79008: PUSH
79009: DOUBLE
79010: LD_VAR 0 1
79014: INC
79015: ST_TO_ADDR
79016: LD_VAR 0 2
79020: PUSH
79021: FOR_DOWNTO
79022: IFFALSE 79046
// result := Delete ( result , result ) ;
79024: LD_ADDR_VAR 0 3
79028: PUSH
79029: LD_VAR 0 3
79033: PPUSH
79034: LD_VAR 0 3
79038: PPUSH
79039: CALL_OW 3
79043: ST_TO_ADDR
79044: GO 79021
79046: POP
79047: POP
// end ;
79048: LD_VAR 0 3
79052: RET
// export function ComExit ( unit ) ; var tmp ; begin
79053: LD_INT 0
79055: PPUSH
79056: PPUSH
// if not IsInUnit ( unit ) then
79057: LD_VAR 0 1
79061: PPUSH
79062: CALL_OW 310
79066: NOT
79067: IFFALSE 79071
// exit ;
79069: GO 79131
// tmp := IsInUnit ( unit ) ;
79071: LD_ADDR_VAR 0 3
79075: PUSH
79076: LD_VAR 0 1
79080: PPUSH
79081: CALL_OW 310
79085: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79086: LD_VAR 0 3
79090: PPUSH
79091: CALL_OW 247
79095: PUSH
79096: LD_INT 2
79098: EQUAL
79099: IFFALSE 79112
// ComExitVehicle ( unit ) else
79101: LD_VAR 0 1
79105: PPUSH
79106: CALL_OW 121
79110: GO 79121
// ComExitBuilding ( unit ) ;
79112: LD_VAR 0 1
79116: PPUSH
79117: CALL_OW 122
// result := tmp ;
79121: LD_ADDR_VAR 0 2
79125: PUSH
79126: LD_VAR 0 3
79130: ST_TO_ADDR
// end ;
79131: LD_VAR 0 2
79135: RET
// export function ComExitAll ( units ) ; var i ; begin
79136: LD_INT 0
79138: PPUSH
79139: PPUSH
// if not units then
79140: LD_VAR 0 1
79144: NOT
79145: IFFALSE 79149
// exit ;
79147: GO 79175
// for i in units do
79149: LD_ADDR_VAR 0 3
79153: PUSH
79154: LD_VAR 0 1
79158: PUSH
79159: FOR_IN
79160: IFFALSE 79173
// ComExit ( i ) ;
79162: LD_VAR 0 3
79166: PPUSH
79167: CALL 79053 0 1
79171: GO 79159
79173: POP
79174: POP
// end ;
79175: LD_VAR 0 2
79179: RET
// export function ResetHc ; begin
79180: LD_INT 0
79182: PPUSH
// InitHc ;
79183: CALL_OW 19
// hc_importance := 0 ;
79187: LD_ADDR_OWVAR 32
79191: PUSH
79192: LD_INT 0
79194: ST_TO_ADDR
// end ;
79195: LD_VAR 0 1
79199: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79200: LD_INT 0
79202: PPUSH
79203: PPUSH
79204: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79205: LD_ADDR_VAR 0 6
79209: PUSH
79210: LD_VAR 0 1
79214: PUSH
79215: LD_VAR 0 3
79219: PLUS
79220: PUSH
79221: LD_INT 2
79223: DIV
79224: ST_TO_ADDR
// if _x < 0 then
79225: LD_VAR 0 6
79229: PUSH
79230: LD_INT 0
79232: LESS
79233: IFFALSE 79250
// _x := _x * - 1 ;
79235: LD_ADDR_VAR 0 6
79239: PUSH
79240: LD_VAR 0 6
79244: PUSH
79245: LD_INT 1
79247: NEG
79248: MUL
79249: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79250: LD_ADDR_VAR 0 7
79254: PUSH
79255: LD_VAR 0 2
79259: PUSH
79260: LD_VAR 0 4
79264: PLUS
79265: PUSH
79266: LD_INT 2
79268: DIV
79269: ST_TO_ADDR
// if _y < 0 then
79270: LD_VAR 0 7
79274: PUSH
79275: LD_INT 0
79277: LESS
79278: IFFALSE 79295
// _y := _y * - 1 ;
79280: LD_ADDR_VAR 0 7
79284: PUSH
79285: LD_VAR 0 7
79289: PUSH
79290: LD_INT 1
79292: NEG
79293: MUL
79294: ST_TO_ADDR
// result := [ _x , _y ] ;
79295: LD_ADDR_VAR 0 5
79299: PUSH
79300: LD_VAR 0 6
79304: PUSH
79305: LD_VAR 0 7
79309: PUSH
79310: EMPTY
79311: LIST
79312: LIST
79313: ST_TO_ADDR
// end ;
79314: LD_VAR 0 5
79318: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79319: LD_INT 0
79321: PPUSH
79322: PPUSH
79323: PPUSH
79324: PPUSH
// task := GetTaskList ( unit ) ;
79325: LD_ADDR_VAR 0 7
79329: PUSH
79330: LD_VAR 0 1
79334: PPUSH
79335: CALL_OW 437
79339: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79340: LD_VAR 0 7
79344: NOT
79345: PUSH
79346: LD_VAR 0 1
79350: PPUSH
79351: LD_VAR 0 2
79355: PPUSH
79356: CALL_OW 308
79360: NOT
79361: AND
79362: IFFALSE 79366
// exit ;
79364: GO 79484
// if IsInArea ( unit , area ) then
79366: LD_VAR 0 1
79370: PPUSH
79371: LD_VAR 0 2
79375: PPUSH
79376: CALL_OW 308
79380: IFFALSE 79398
// begin ComMoveToArea ( unit , goAway ) ;
79382: LD_VAR 0 1
79386: PPUSH
79387: LD_VAR 0 3
79391: PPUSH
79392: CALL_OW 113
// exit ;
79396: GO 79484
// end ; if task [ 1 ] [ 1 ] <> M then
79398: LD_VAR 0 7
79402: PUSH
79403: LD_INT 1
79405: ARRAY
79406: PUSH
79407: LD_INT 1
79409: ARRAY
79410: PUSH
79411: LD_STRING M
79413: NONEQUAL
79414: IFFALSE 79418
// exit ;
79416: GO 79484
// x := task [ 1 ] [ 2 ] ;
79418: LD_ADDR_VAR 0 5
79422: PUSH
79423: LD_VAR 0 7
79427: PUSH
79428: LD_INT 1
79430: ARRAY
79431: PUSH
79432: LD_INT 2
79434: ARRAY
79435: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79436: LD_ADDR_VAR 0 6
79440: PUSH
79441: LD_VAR 0 7
79445: PUSH
79446: LD_INT 1
79448: ARRAY
79449: PUSH
79450: LD_INT 3
79452: ARRAY
79453: ST_TO_ADDR
// if InArea ( x , y , area ) then
79454: LD_VAR 0 5
79458: PPUSH
79459: LD_VAR 0 6
79463: PPUSH
79464: LD_VAR 0 2
79468: PPUSH
79469: CALL_OW 309
79473: IFFALSE 79484
// ComStop ( unit ) ;
79475: LD_VAR 0 1
79479: PPUSH
79480: CALL_OW 141
// end ;
79484: LD_VAR 0 4
79488: RET
// export function Abs ( value ) ; begin
79489: LD_INT 0
79491: PPUSH
// result := value ;
79492: LD_ADDR_VAR 0 2
79496: PUSH
79497: LD_VAR 0 1
79501: ST_TO_ADDR
// if value < 0 then
79502: LD_VAR 0 1
79506: PUSH
79507: LD_INT 0
79509: LESS
79510: IFFALSE 79527
// result := value * - 1 ;
79512: LD_ADDR_VAR 0 2
79516: PUSH
79517: LD_VAR 0 1
79521: PUSH
79522: LD_INT 1
79524: NEG
79525: MUL
79526: ST_TO_ADDR
// end ;
79527: LD_VAR 0 2
79531: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79532: LD_INT 0
79534: PPUSH
79535: PPUSH
79536: PPUSH
79537: PPUSH
79538: PPUSH
79539: PPUSH
79540: PPUSH
79541: PPUSH
// if not unit or not building then
79542: LD_VAR 0 1
79546: NOT
79547: PUSH
79548: LD_VAR 0 2
79552: NOT
79553: OR
79554: IFFALSE 79558
// exit ;
79556: GO 79784
// x := GetX ( building ) ;
79558: LD_ADDR_VAR 0 4
79562: PUSH
79563: LD_VAR 0 2
79567: PPUSH
79568: CALL_OW 250
79572: ST_TO_ADDR
// y := GetY ( building ) ;
79573: LD_ADDR_VAR 0 6
79577: PUSH
79578: LD_VAR 0 2
79582: PPUSH
79583: CALL_OW 251
79587: ST_TO_ADDR
// d := GetDir ( building ) ;
79588: LD_ADDR_VAR 0 8
79592: PUSH
79593: LD_VAR 0 2
79597: PPUSH
79598: CALL_OW 254
79602: ST_TO_ADDR
// r := 4 ;
79603: LD_ADDR_VAR 0 9
79607: PUSH
79608: LD_INT 4
79610: ST_TO_ADDR
// for i := 1 to 5 do
79611: LD_ADDR_VAR 0 10
79615: PUSH
79616: DOUBLE
79617: LD_INT 1
79619: DEC
79620: ST_TO_ADDR
79621: LD_INT 5
79623: PUSH
79624: FOR_TO
79625: IFFALSE 79782
// begin _x := ShiftX ( x , d , r + i ) ;
79627: LD_ADDR_VAR 0 5
79631: PUSH
79632: LD_VAR 0 4
79636: PPUSH
79637: LD_VAR 0 8
79641: PPUSH
79642: LD_VAR 0 9
79646: PUSH
79647: LD_VAR 0 10
79651: PLUS
79652: PPUSH
79653: CALL_OW 272
79657: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79658: LD_ADDR_VAR 0 7
79662: PUSH
79663: LD_VAR 0 6
79667: PPUSH
79668: LD_VAR 0 8
79672: PPUSH
79673: LD_VAR 0 9
79677: PUSH
79678: LD_VAR 0 10
79682: PLUS
79683: PPUSH
79684: CALL_OW 273
79688: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79689: LD_VAR 0 5
79693: PPUSH
79694: LD_VAR 0 7
79698: PPUSH
79699: CALL_OW 488
79703: PUSH
79704: LD_VAR 0 5
79708: PPUSH
79709: LD_VAR 0 7
79713: PPUSH
79714: CALL_OW 428
79718: PPUSH
79719: CALL_OW 247
79723: PUSH
79724: LD_INT 3
79726: PUSH
79727: LD_INT 2
79729: PUSH
79730: EMPTY
79731: LIST
79732: LIST
79733: IN
79734: NOT
79735: AND
79736: IFFALSE 79780
// begin ComMoveXY ( unit , _x , _y ) ;
79738: LD_VAR 0 1
79742: PPUSH
79743: LD_VAR 0 5
79747: PPUSH
79748: LD_VAR 0 7
79752: PPUSH
79753: CALL_OW 111
// result := [ _x , _y ] ;
79757: LD_ADDR_VAR 0 3
79761: PUSH
79762: LD_VAR 0 5
79766: PUSH
79767: LD_VAR 0 7
79771: PUSH
79772: EMPTY
79773: LIST
79774: LIST
79775: ST_TO_ADDR
// exit ;
79776: POP
79777: POP
79778: GO 79784
// end ; end ;
79780: GO 79624
79782: POP
79783: POP
// end ;
79784: LD_VAR 0 3
79788: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79789: LD_INT 0
79791: PPUSH
79792: PPUSH
79793: PPUSH
// result := 0 ;
79794: LD_ADDR_VAR 0 3
79798: PUSH
79799: LD_INT 0
79801: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79802: LD_VAR 0 1
79806: PUSH
79807: LD_INT 0
79809: LESS
79810: PUSH
79811: LD_VAR 0 1
79815: PUSH
79816: LD_INT 8
79818: GREATER
79819: OR
79820: PUSH
79821: LD_VAR 0 2
79825: PUSH
79826: LD_INT 0
79828: LESS
79829: OR
79830: PUSH
79831: LD_VAR 0 2
79835: PUSH
79836: LD_INT 8
79838: GREATER
79839: OR
79840: IFFALSE 79844
// exit ;
79842: GO 79919
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79844: LD_ADDR_VAR 0 4
79848: PUSH
79849: LD_INT 22
79851: PUSH
79852: LD_VAR 0 2
79856: PUSH
79857: EMPTY
79858: LIST
79859: LIST
79860: PPUSH
79861: CALL_OW 69
79865: PUSH
79866: FOR_IN
79867: IFFALSE 79917
// begin un := UnitShoot ( i ) ;
79869: LD_ADDR_VAR 0 5
79873: PUSH
79874: LD_VAR 0 4
79878: PPUSH
79879: CALL_OW 504
79883: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79884: LD_VAR 0 5
79888: PPUSH
79889: CALL_OW 255
79893: PUSH
79894: LD_VAR 0 1
79898: EQUAL
79899: IFFALSE 79915
// begin result := un ;
79901: LD_ADDR_VAR 0 3
79905: PUSH
79906: LD_VAR 0 5
79910: ST_TO_ADDR
// exit ;
79911: POP
79912: POP
79913: GO 79919
// end ; end ;
79915: GO 79866
79917: POP
79918: POP
// end ;
79919: LD_VAR 0 3
79923: RET
// export function GetCargoBay ( units ) ; begin
79924: LD_INT 0
79926: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79927: LD_ADDR_VAR 0 2
79931: PUSH
79932: LD_VAR 0 1
79936: PPUSH
79937: LD_INT 2
79939: PUSH
79940: LD_INT 34
79942: PUSH
79943: LD_INT 12
79945: PUSH
79946: EMPTY
79947: LIST
79948: LIST
79949: PUSH
79950: LD_INT 34
79952: PUSH
79953: LD_INT 51
79955: PUSH
79956: EMPTY
79957: LIST
79958: LIST
79959: PUSH
79960: LD_INT 34
79962: PUSH
79963: LD_INT 32
79965: PUSH
79966: EMPTY
79967: LIST
79968: LIST
79969: PUSH
79970: LD_INT 34
79972: PUSH
79973: LD_INT 89
79975: PUSH
79976: EMPTY
79977: LIST
79978: LIST
79979: PUSH
79980: EMPTY
79981: LIST
79982: LIST
79983: LIST
79984: LIST
79985: LIST
79986: PPUSH
79987: CALL_OW 72
79991: ST_TO_ADDR
// end ;
79992: LD_VAR 0 2
79996: RET
// export function Negate ( value ) ; begin
79997: LD_INT 0
79999: PPUSH
// result := not value ;
80000: LD_ADDR_VAR 0 2
80004: PUSH
80005: LD_VAR 0 1
80009: NOT
80010: ST_TO_ADDR
// end ;
80011: LD_VAR 0 2
80015: RET
// export function Inc ( value ) ; begin
80016: LD_INT 0
80018: PPUSH
// result := value + 1 ;
80019: LD_ADDR_VAR 0 2
80023: PUSH
80024: LD_VAR 0 1
80028: PUSH
80029: LD_INT 1
80031: PLUS
80032: ST_TO_ADDR
// end ;
80033: LD_VAR 0 2
80037: RET
// export function Dec ( value ) ; begin
80038: LD_INT 0
80040: PPUSH
// result := value - 1 ;
80041: LD_ADDR_VAR 0 2
80045: PUSH
80046: LD_VAR 0 1
80050: PUSH
80051: LD_INT 1
80053: MINUS
80054: ST_TO_ADDR
// end ;
80055: LD_VAR 0 2
80059: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80060: LD_INT 0
80062: PPUSH
80063: PPUSH
80064: PPUSH
80065: PPUSH
80066: PPUSH
80067: PPUSH
80068: PPUSH
80069: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80070: LD_VAR 0 1
80074: PPUSH
80075: LD_VAR 0 2
80079: PPUSH
80080: CALL_OW 488
80084: NOT
80085: PUSH
80086: LD_VAR 0 3
80090: PPUSH
80091: LD_VAR 0 4
80095: PPUSH
80096: CALL_OW 488
80100: NOT
80101: OR
80102: IFFALSE 80115
// begin result := - 1 ;
80104: LD_ADDR_VAR 0 5
80108: PUSH
80109: LD_INT 1
80111: NEG
80112: ST_TO_ADDR
// exit ;
80113: GO 80350
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80115: LD_ADDR_VAR 0 12
80119: PUSH
80120: LD_VAR 0 1
80124: PPUSH
80125: LD_VAR 0 2
80129: PPUSH
80130: LD_VAR 0 3
80134: PPUSH
80135: LD_VAR 0 4
80139: PPUSH
80140: CALL 79200 0 4
80144: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80145: LD_ADDR_VAR 0 11
80149: PUSH
80150: LD_VAR 0 1
80154: PPUSH
80155: LD_VAR 0 2
80159: PPUSH
80160: LD_VAR 0 12
80164: PUSH
80165: LD_INT 1
80167: ARRAY
80168: PPUSH
80169: LD_VAR 0 12
80173: PUSH
80174: LD_INT 2
80176: ARRAY
80177: PPUSH
80178: CALL_OW 298
80182: ST_TO_ADDR
// distance := 9999 ;
80183: LD_ADDR_VAR 0 10
80187: PUSH
80188: LD_INT 9999
80190: ST_TO_ADDR
// for i := 0 to 5 do
80191: LD_ADDR_VAR 0 6
80195: PUSH
80196: DOUBLE
80197: LD_INT 0
80199: DEC
80200: ST_TO_ADDR
80201: LD_INT 5
80203: PUSH
80204: FOR_TO
80205: IFFALSE 80348
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80207: LD_ADDR_VAR 0 7
80211: PUSH
80212: LD_VAR 0 1
80216: PPUSH
80217: LD_VAR 0 6
80221: PPUSH
80222: LD_VAR 0 11
80226: PPUSH
80227: CALL_OW 272
80231: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80232: LD_ADDR_VAR 0 8
80236: PUSH
80237: LD_VAR 0 2
80241: PPUSH
80242: LD_VAR 0 6
80246: PPUSH
80247: LD_VAR 0 11
80251: PPUSH
80252: CALL_OW 273
80256: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80257: LD_VAR 0 7
80261: PPUSH
80262: LD_VAR 0 8
80266: PPUSH
80267: CALL_OW 488
80271: NOT
80272: IFFALSE 80276
// continue ;
80274: GO 80204
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80276: LD_ADDR_VAR 0 9
80280: PUSH
80281: LD_VAR 0 12
80285: PUSH
80286: LD_INT 1
80288: ARRAY
80289: PPUSH
80290: LD_VAR 0 12
80294: PUSH
80295: LD_INT 2
80297: ARRAY
80298: PPUSH
80299: LD_VAR 0 7
80303: PPUSH
80304: LD_VAR 0 8
80308: PPUSH
80309: CALL_OW 298
80313: ST_TO_ADDR
// if tmp < distance then
80314: LD_VAR 0 9
80318: PUSH
80319: LD_VAR 0 10
80323: LESS
80324: IFFALSE 80346
// begin result := i ;
80326: LD_ADDR_VAR 0 5
80330: PUSH
80331: LD_VAR 0 6
80335: ST_TO_ADDR
// distance := tmp ;
80336: LD_ADDR_VAR 0 10
80340: PUSH
80341: LD_VAR 0 9
80345: ST_TO_ADDR
// end ; end ;
80346: GO 80204
80348: POP
80349: POP
// end ;
80350: LD_VAR 0 5
80354: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80355: LD_INT 0
80357: PPUSH
80358: PPUSH
// if not driver or not IsInUnit ( driver ) then
80359: LD_VAR 0 1
80363: NOT
80364: PUSH
80365: LD_VAR 0 1
80369: PPUSH
80370: CALL_OW 310
80374: NOT
80375: OR
80376: IFFALSE 80380
// exit ;
80378: GO 80470
// vehicle := IsInUnit ( driver ) ;
80380: LD_ADDR_VAR 0 3
80384: PUSH
80385: LD_VAR 0 1
80389: PPUSH
80390: CALL_OW 310
80394: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80395: LD_VAR 0 1
80399: PPUSH
80400: LD_STRING \
80402: PUSH
80403: LD_INT 0
80405: PUSH
80406: LD_INT 0
80408: PUSH
80409: LD_INT 0
80411: PUSH
80412: LD_INT 0
80414: PUSH
80415: LD_INT 0
80417: PUSH
80418: LD_INT 0
80420: PUSH
80421: EMPTY
80422: LIST
80423: LIST
80424: LIST
80425: LIST
80426: LIST
80427: LIST
80428: LIST
80429: PUSH
80430: LD_STRING E
80432: PUSH
80433: LD_INT 0
80435: PUSH
80436: LD_INT 0
80438: PUSH
80439: LD_VAR 0 3
80443: PUSH
80444: LD_INT 0
80446: PUSH
80447: LD_INT 0
80449: PUSH
80450: LD_INT 0
80452: PUSH
80453: EMPTY
80454: LIST
80455: LIST
80456: LIST
80457: LIST
80458: LIST
80459: LIST
80460: LIST
80461: PUSH
80462: EMPTY
80463: LIST
80464: LIST
80465: PPUSH
80466: CALL_OW 446
// end ;
80470: LD_VAR 0 2
80474: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80475: LD_INT 0
80477: PPUSH
80478: PPUSH
// if not driver or not IsInUnit ( driver ) then
80479: LD_VAR 0 1
80483: NOT
80484: PUSH
80485: LD_VAR 0 1
80489: PPUSH
80490: CALL_OW 310
80494: NOT
80495: OR
80496: IFFALSE 80500
// exit ;
80498: GO 80590
// vehicle := IsInUnit ( driver ) ;
80500: LD_ADDR_VAR 0 3
80504: PUSH
80505: LD_VAR 0 1
80509: PPUSH
80510: CALL_OW 310
80514: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80515: LD_VAR 0 1
80519: PPUSH
80520: LD_STRING \
80522: PUSH
80523: LD_INT 0
80525: PUSH
80526: LD_INT 0
80528: PUSH
80529: LD_INT 0
80531: PUSH
80532: LD_INT 0
80534: PUSH
80535: LD_INT 0
80537: PUSH
80538: LD_INT 0
80540: PUSH
80541: EMPTY
80542: LIST
80543: LIST
80544: LIST
80545: LIST
80546: LIST
80547: LIST
80548: LIST
80549: PUSH
80550: LD_STRING E
80552: PUSH
80553: LD_INT 0
80555: PUSH
80556: LD_INT 0
80558: PUSH
80559: LD_VAR 0 3
80563: PUSH
80564: LD_INT 0
80566: PUSH
80567: LD_INT 0
80569: PUSH
80570: LD_INT 0
80572: PUSH
80573: EMPTY
80574: LIST
80575: LIST
80576: LIST
80577: LIST
80578: LIST
80579: LIST
80580: LIST
80581: PUSH
80582: EMPTY
80583: LIST
80584: LIST
80585: PPUSH
80586: CALL_OW 447
// end ;
80590: LD_VAR 0 2
80594: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80595: LD_INT 0
80597: PPUSH
80598: PPUSH
80599: PPUSH
// tmp := [ ] ;
80600: LD_ADDR_VAR 0 5
80604: PUSH
80605: EMPTY
80606: ST_TO_ADDR
// for i in units do
80607: LD_ADDR_VAR 0 4
80611: PUSH
80612: LD_VAR 0 1
80616: PUSH
80617: FOR_IN
80618: IFFALSE 80656
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80620: LD_ADDR_VAR 0 5
80624: PUSH
80625: LD_VAR 0 5
80629: PPUSH
80630: LD_VAR 0 5
80634: PUSH
80635: LD_INT 1
80637: PLUS
80638: PPUSH
80639: LD_VAR 0 4
80643: PPUSH
80644: CALL_OW 256
80648: PPUSH
80649: CALL_OW 2
80653: ST_TO_ADDR
80654: GO 80617
80656: POP
80657: POP
// if not tmp then
80658: LD_VAR 0 5
80662: NOT
80663: IFFALSE 80667
// exit ;
80665: GO 80715
// if asc then
80667: LD_VAR 0 2
80671: IFFALSE 80695
// result := SortListByListAsc ( units , tmp ) else
80673: LD_ADDR_VAR 0 3
80677: PUSH
80678: LD_VAR 0 1
80682: PPUSH
80683: LD_VAR 0 5
80687: PPUSH
80688: CALL_OW 76
80692: ST_TO_ADDR
80693: GO 80715
// result := SortListByListDesc ( units , tmp ) ;
80695: LD_ADDR_VAR 0 3
80699: PUSH
80700: LD_VAR 0 1
80704: PPUSH
80705: LD_VAR 0 5
80709: PPUSH
80710: CALL_OW 77
80714: ST_TO_ADDR
// end ;
80715: LD_VAR 0 3
80719: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80720: LD_INT 0
80722: PPUSH
80723: PPUSH
// task := GetTaskList ( mech ) ;
80724: LD_ADDR_VAR 0 4
80728: PUSH
80729: LD_VAR 0 1
80733: PPUSH
80734: CALL_OW 437
80738: ST_TO_ADDR
// if not task then
80739: LD_VAR 0 4
80743: NOT
80744: IFFALSE 80748
// exit ;
80746: GO 80790
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80748: LD_ADDR_VAR 0 3
80752: PUSH
80753: LD_VAR 0 4
80757: PUSH
80758: LD_INT 1
80760: ARRAY
80761: PUSH
80762: LD_INT 1
80764: ARRAY
80765: PUSH
80766: LD_STRING r
80768: EQUAL
80769: PUSH
80770: LD_VAR 0 4
80774: PUSH
80775: LD_INT 1
80777: ARRAY
80778: PUSH
80779: LD_INT 4
80781: ARRAY
80782: PUSH
80783: LD_VAR 0 2
80787: EQUAL
80788: AND
80789: ST_TO_ADDR
// end ;
80790: LD_VAR 0 3
80794: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80795: LD_INT 0
80797: PPUSH
// SetDir ( unit , d ) ;
80798: LD_VAR 0 1
80802: PPUSH
80803: LD_VAR 0 4
80807: PPUSH
80808: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80812: LD_VAR 0 1
80816: PPUSH
80817: LD_VAR 0 2
80821: PPUSH
80822: LD_VAR 0 3
80826: PPUSH
80827: LD_VAR 0 5
80831: PPUSH
80832: CALL_OW 48
// end ;
80836: LD_VAR 0 6
80840: RET
// export function ToNaturalNumber ( number ) ; begin
80841: LD_INT 0
80843: PPUSH
// result := number div 1 ;
80844: LD_ADDR_VAR 0 2
80848: PUSH
80849: LD_VAR 0 1
80853: PUSH
80854: LD_INT 1
80856: DIV
80857: ST_TO_ADDR
// if number < 0 then
80858: LD_VAR 0 1
80862: PUSH
80863: LD_INT 0
80865: LESS
80866: IFFALSE 80876
// result := 0 ;
80868: LD_ADDR_VAR 0 2
80872: PUSH
80873: LD_INT 0
80875: ST_TO_ADDR
// end ;
80876: LD_VAR 0 2
80880: RET
// export function SortByClass ( units , class ) ; var un ; begin
80881: LD_INT 0
80883: PPUSH
80884: PPUSH
// if not units or not class then
80885: LD_VAR 0 1
80889: NOT
80890: PUSH
80891: LD_VAR 0 2
80895: NOT
80896: OR
80897: IFFALSE 80901
// exit ;
80899: GO 80996
// result := [ ] ;
80901: LD_ADDR_VAR 0 3
80905: PUSH
80906: EMPTY
80907: ST_TO_ADDR
// for un in units do
80908: LD_ADDR_VAR 0 4
80912: PUSH
80913: LD_VAR 0 1
80917: PUSH
80918: FOR_IN
80919: IFFALSE 80994
// if GetClass ( un ) = class then
80921: LD_VAR 0 4
80925: PPUSH
80926: CALL_OW 257
80930: PUSH
80931: LD_VAR 0 2
80935: EQUAL
80936: IFFALSE 80963
// result := Insert ( result , 1 , un ) else
80938: LD_ADDR_VAR 0 3
80942: PUSH
80943: LD_VAR 0 3
80947: PPUSH
80948: LD_INT 1
80950: PPUSH
80951: LD_VAR 0 4
80955: PPUSH
80956: CALL_OW 2
80960: ST_TO_ADDR
80961: GO 80992
// result := Replace ( result , result + 1 , un ) ;
80963: LD_ADDR_VAR 0 3
80967: PUSH
80968: LD_VAR 0 3
80972: PPUSH
80973: LD_VAR 0 3
80977: PUSH
80978: LD_INT 1
80980: PLUS
80981: PPUSH
80982: LD_VAR 0 4
80986: PPUSH
80987: CALL_OW 1
80991: ST_TO_ADDR
80992: GO 80918
80994: POP
80995: POP
// end ;
80996: LD_VAR 0 3
81000: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81001: LD_INT 0
81003: PPUSH
81004: PPUSH
81005: PPUSH
81006: PPUSH
81007: PPUSH
81008: PPUSH
81009: PPUSH
// result := [ ] ;
81010: LD_ADDR_VAR 0 4
81014: PUSH
81015: EMPTY
81016: ST_TO_ADDR
// if x - r < 0 then
81017: LD_VAR 0 1
81021: PUSH
81022: LD_VAR 0 3
81026: MINUS
81027: PUSH
81028: LD_INT 0
81030: LESS
81031: IFFALSE 81043
// min_x := 0 else
81033: LD_ADDR_VAR 0 8
81037: PUSH
81038: LD_INT 0
81040: ST_TO_ADDR
81041: GO 81059
// min_x := x - r ;
81043: LD_ADDR_VAR 0 8
81047: PUSH
81048: LD_VAR 0 1
81052: PUSH
81053: LD_VAR 0 3
81057: MINUS
81058: ST_TO_ADDR
// if y - r < 0 then
81059: LD_VAR 0 2
81063: PUSH
81064: LD_VAR 0 3
81068: MINUS
81069: PUSH
81070: LD_INT 0
81072: LESS
81073: IFFALSE 81085
// min_y := 0 else
81075: LD_ADDR_VAR 0 7
81079: PUSH
81080: LD_INT 0
81082: ST_TO_ADDR
81083: GO 81101
// min_y := y - r ;
81085: LD_ADDR_VAR 0 7
81089: PUSH
81090: LD_VAR 0 2
81094: PUSH
81095: LD_VAR 0 3
81099: MINUS
81100: ST_TO_ADDR
// max_x := x + r ;
81101: LD_ADDR_VAR 0 9
81105: PUSH
81106: LD_VAR 0 1
81110: PUSH
81111: LD_VAR 0 3
81115: PLUS
81116: ST_TO_ADDR
// max_y := y + r ;
81117: LD_ADDR_VAR 0 10
81121: PUSH
81122: LD_VAR 0 2
81126: PUSH
81127: LD_VAR 0 3
81131: PLUS
81132: ST_TO_ADDR
// for _x = min_x to max_x do
81133: LD_ADDR_VAR 0 5
81137: PUSH
81138: DOUBLE
81139: LD_VAR 0 8
81143: DEC
81144: ST_TO_ADDR
81145: LD_VAR 0 9
81149: PUSH
81150: FOR_TO
81151: IFFALSE 81252
// for _y = min_y to max_y do
81153: LD_ADDR_VAR 0 6
81157: PUSH
81158: DOUBLE
81159: LD_VAR 0 7
81163: DEC
81164: ST_TO_ADDR
81165: LD_VAR 0 10
81169: PUSH
81170: FOR_TO
81171: IFFALSE 81248
// begin if not ValidHex ( _x , _y ) then
81173: LD_VAR 0 5
81177: PPUSH
81178: LD_VAR 0 6
81182: PPUSH
81183: CALL_OW 488
81187: NOT
81188: IFFALSE 81192
// continue ;
81190: GO 81170
// if GetResourceTypeXY ( _x , _y ) then
81192: LD_VAR 0 5
81196: PPUSH
81197: LD_VAR 0 6
81201: PPUSH
81202: CALL_OW 283
81206: IFFALSE 81246
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81208: LD_ADDR_VAR 0 4
81212: PUSH
81213: LD_VAR 0 4
81217: PPUSH
81218: LD_VAR 0 4
81222: PUSH
81223: LD_INT 1
81225: PLUS
81226: PPUSH
81227: LD_VAR 0 5
81231: PUSH
81232: LD_VAR 0 6
81236: PUSH
81237: EMPTY
81238: LIST
81239: LIST
81240: PPUSH
81241: CALL_OW 1
81245: ST_TO_ADDR
// end ;
81246: GO 81170
81248: POP
81249: POP
81250: GO 81150
81252: POP
81253: POP
// end ;
81254: LD_VAR 0 4
81258: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81259: LD_INT 0
81261: PPUSH
81262: PPUSH
81263: PPUSH
81264: PPUSH
81265: PPUSH
81266: PPUSH
81267: PPUSH
81268: PPUSH
// if not units then
81269: LD_VAR 0 1
81273: NOT
81274: IFFALSE 81278
// exit ;
81276: GO 81802
// result := UnitFilter ( units , [ f_ok ] ) ;
81278: LD_ADDR_VAR 0 3
81282: PUSH
81283: LD_VAR 0 1
81287: PPUSH
81288: LD_INT 50
81290: PUSH
81291: EMPTY
81292: LIST
81293: PPUSH
81294: CALL_OW 72
81298: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81299: LD_ADDR_VAR 0 8
81303: PUSH
81304: LD_VAR 0 1
81308: PUSH
81309: LD_INT 1
81311: ARRAY
81312: PPUSH
81313: CALL_OW 255
81317: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81318: LD_ADDR_VAR 0 10
81322: PUSH
81323: LD_INT 29
81325: PUSH
81326: LD_INT 91
81328: PUSH
81329: LD_INT 49
81331: PUSH
81332: EMPTY
81333: LIST
81334: LIST
81335: LIST
81336: ST_TO_ADDR
// if not result then
81337: LD_VAR 0 3
81341: NOT
81342: IFFALSE 81346
// exit ;
81344: GO 81802
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81346: LD_ADDR_VAR 0 5
81350: PUSH
81351: LD_INT 81
81353: PUSH
81354: LD_VAR 0 8
81358: PUSH
81359: EMPTY
81360: LIST
81361: LIST
81362: PPUSH
81363: CALL_OW 69
81367: ST_TO_ADDR
// for i in result do
81368: LD_ADDR_VAR 0 4
81372: PUSH
81373: LD_VAR 0 3
81377: PUSH
81378: FOR_IN
81379: IFFALSE 81800
// begin tag := GetTag ( i ) + 1 ;
81381: LD_ADDR_VAR 0 9
81385: PUSH
81386: LD_VAR 0 4
81390: PPUSH
81391: CALL_OW 110
81395: PUSH
81396: LD_INT 1
81398: PLUS
81399: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81400: LD_ADDR_VAR 0 7
81404: PUSH
81405: LD_VAR 0 4
81409: PPUSH
81410: CALL_OW 250
81414: PPUSH
81415: LD_VAR 0 4
81419: PPUSH
81420: CALL_OW 251
81424: PPUSH
81425: LD_INT 6
81427: PPUSH
81428: CALL 81001 0 3
81432: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81433: LD_VAR 0 4
81437: PPUSH
81438: CALL_OW 247
81442: PUSH
81443: LD_INT 2
81445: EQUAL
81446: PUSH
81447: LD_VAR 0 7
81451: AND
81452: PUSH
81453: LD_VAR 0 4
81457: PPUSH
81458: CALL_OW 264
81462: PUSH
81463: LD_VAR 0 10
81467: IN
81468: NOT
81469: AND
81470: IFFALSE 81509
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81472: LD_VAR 0 4
81476: PPUSH
81477: LD_VAR 0 7
81481: PUSH
81482: LD_INT 1
81484: ARRAY
81485: PUSH
81486: LD_INT 1
81488: ARRAY
81489: PPUSH
81490: LD_VAR 0 7
81494: PUSH
81495: LD_INT 1
81497: ARRAY
81498: PUSH
81499: LD_INT 2
81501: ARRAY
81502: PPUSH
81503: CALL_OW 116
81507: GO 81798
// if path > tag then
81509: LD_VAR 0 2
81513: PUSH
81514: LD_VAR 0 9
81518: GREATER
81519: IFFALSE 81727
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81521: LD_ADDR_VAR 0 6
81525: PUSH
81526: LD_VAR 0 5
81530: PPUSH
81531: LD_INT 91
81533: PUSH
81534: LD_VAR 0 4
81538: PUSH
81539: LD_INT 8
81541: PUSH
81542: EMPTY
81543: LIST
81544: LIST
81545: LIST
81546: PPUSH
81547: CALL_OW 72
81551: ST_TO_ADDR
// if nearEnemy then
81552: LD_VAR 0 6
81556: IFFALSE 81625
// begin if GetWeapon ( i ) = ru_time_lapser then
81558: LD_VAR 0 4
81562: PPUSH
81563: CALL_OW 264
81567: PUSH
81568: LD_INT 49
81570: EQUAL
81571: IFFALSE 81599
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81573: LD_VAR 0 4
81577: PPUSH
81578: LD_VAR 0 6
81582: PPUSH
81583: LD_VAR 0 4
81587: PPUSH
81588: CALL_OW 74
81592: PPUSH
81593: CALL_OW 112
81597: GO 81623
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81599: LD_VAR 0 4
81603: PPUSH
81604: LD_VAR 0 6
81608: PPUSH
81609: LD_VAR 0 4
81613: PPUSH
81614: CALL_OW 74
81618: PPUSH
81619: CALL_OW 115
// end else
81623: GO 81725
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81625: LD_VAR 0 4
81629: PPUSH
81630: LD_VAR 0 2
81634: PUSH
81635: LD_VAR 0 9
81639: ARRAY
81640: PUSH
81641: LD_INT 1
81643: ARRAY
81644: PPUSH
81645: LD_VAR 0 2
81649: PUSH
81650: LD_VAR 0 9
81654: ARRAY
81655: PUSH
81656: LD_INT 2
81658: ARRAY
81659: PPUSH
81660: CALL_OW 297
81664: PUSH
81665: LD_INT 6
81667: GREATER
81668: IFFALSE 81711
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81670: LD_VAR 0 4
81674: PPUSH
81675: LD_VAR 0 2
81679: PUSH
81680: LD_VAR 0 9
81684: ARRAY
81685: PUSH
81686: LD_INT 1
81688: ARRAY
81689: PPUSH
81690: LD_VAR 0 2
81694: PUSH
81695: LD_VAR 0 9
81699: ARRAY
81700: PUSH
81701: LD_INT 2
81703: ARRAY
81704: PPUSH
81705: CALL_OW 114
81709: GO 81725
// SetTag ( i , tag ) ;
81711: LD_VAR 0 4
81715: PPUSH
81716: LD_VAR 0 9
81720: PPUSH
81721: CALL_OW 109
// end else
81725: GO 81798
// if enemy then
81727: LD_VAR 0 5
81731: IFFALSE 81798
// begin if GetWeapon ( i ) = ru_time_lapser then
81733: LD_VAR 0 4
81737: PPUSH
81738: CALL_OW 264
81742: PUSH
81743: LD_INT 49
81745: EQUAL
81746: IFFALSE 81774
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81748: LD_VAR 0 4
81752: PPUSH
81753: LD_VAR 0 5
81757: PPUSH
81758: LD_VAR 0 4
81762: PPUSH
81763: CALL_OW 74
81767: PPUSH
81768: CALL_OW 112
81772: GO 81798
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81774: LD_VAR 0 4
81778: PPUSH
81779: LD_VAR 0 5
81783: PPUSH
81784: LD_VAR 0 4
81788: PPUSH
81789: CALL_OW 74
81793: PPUSH
81794: CALL_OW 115
// end ; end ;
81798: GO 81378
81800: POP
81801: POP
// end ;
81802: LD_VAR 0 3
81806: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81807: LD_INT 0
81809: PPUSH
81810: PPUSH
81811: PPUSH
// if not unit or IsInUnit ( unit ) then
81812: LD_VAR 0 1
81816: NOT
81817: PUSH
81818: LD_VAR 0 1
81822: PPUSH
81823: CALL_OW 310
81827: OR
81828: IFFALSE 81832
// exit ;
81830: GO 81923
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81832: LD_ADDR_VAR 0 4
81836: PUSH
81837: LD_VAR 0 1
81841: PPUSH
81842: CALL_OW 250
81846: PPUSH
81847: LD_VAR 0 2
81851: PPUSH
81852: LD_INT 1
81854: PPUSH
81855: CALL_OW 272
81859: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81860: LD_ADDR_VAR 0 5
81864: PUSH
81865: LD_VAR 0 1
81869: PPUSH
81870: CALL_OW 251
81874: PPUSH
81875: LD_VAR 0 2
81879: PPUSH
81880: LD_INT 1
81882: PPUSH
81883: CALL_OW 273
81887: ST_TO_ADDR
// if ValidHex ( x , y ) then
81888: LD_VAR 0 4
81892: PPUSH
81893: LD_VAR 0 5
81897: PPUSH
81898: CALL_OW 488
81902: IFFALSE 81923
// ComTurnXY ( unit , x , y ) ;
81904: LD_VAR 0 1
81908: PPUSH
81909: LD_VAR 0 4
81913: PPUSH
81914: LD_VAR 0 5
81918: PPUSH
81919: CALL_OW 118
// end ;
81923: LD_VAR 0 3
81927: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81928: LD_INT 0
81930: PPUSH
81931: PPUSH
// result := false ;
81932: LD_ADDR_VAR 0 3
81936: PUSH
81937: LD_INT 0
81939: ST_TO_ADDR
// if not units then
81940: LD_VAR 0 2
81944: NOT
81945: IFFALSE 81949
// exit ;
81947: GO 81994
// for i in units do
81949: LD_ADDR_VAR 0 4
81953: PUSH
81954: LD_VAR 0 2
81958: PUSH
81959: FOR_IN
81960: IFFALSE 81992
// if See ( side , i ) then
81962: LD_VAR 0 1
81966: PPUSH
81967: LD_VAR 0 4
81971: PPUSH
81972: CALL_OW 292
81976: IFFALSE 81990
// begin result := true ;
81978: LD_ADDR_VAR 0 3
81982: PUSH
81983: LD_INT 1
81985: ST_TO_ADDR
// exit ;
81986: POP
81987: POP
81988: GO 81994
// end ;
81990: GO 81959
81992: POP
81993: POP
// end ;
81994: LD_VAR 0 3
81998: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81999: LD_INT 0
82001: PPUSH
82002: PPUSH
82003: PPUSH
82004: PPUSH
// if not unit or not points then
82005: LD_VAR 0 1
82009: NOT
82010: PUSH
82011: LD_VAR 0 2
82015: NOT
82016: OR
82017: IFFALSE 82021
// exit ;
82019: GO 82111
// dist := 99999 ;
82021: LD_ADDR_VAR 0 5
82025: PUSH
82026: LD_INT 99999
82028: ST_TO_ADDR
// for i in points do
82029: LD_ADDR_VAR 0 4
82033: PUSH
82034: LD_VAR 0 2
82038: PUSH
82039: FOR_IN
82040: IFFALSE 82109
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82042: LD_ADDR_VAR 0 6
82046: PUSH
82047: LD_VAR 0 1
82051: PPUSH
82052: LD_VAR 0 4
82056: PUSH
82057: LD_INT 1
82059: ARRAY
82060: PPUSH
82061: LD_VAR 0 4
82065: PUSH
82066: LD_INT 2
82068: ARRAY
82069: PPUSH
82070: CALL_OW 297
82074: ST_TO_ADDR
// if tmpDist < dist then
82075: LD_VAR 0 6
82079: PUSH
82080: LD_VAR 0 5
82084: LESS
82085: IFFALSE 82107
// begin result := i ;
82087: LD_ADDR_VAR 0 3
82091: PUSH
82092: LD_VAR 0 4
82096: ST_TO_ADDR
// dist := tmpDist ;
82097: LD_ADDR_VAR 0 5
82101: PUSH
82102: LD_VAR 0 6
82106: ST_TO_ADDR
// end ; end ;
82107: GO 82039
82109: POP
82110: POP
// end ;
82111: LD_VAR 0 3
82115: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82116: LD_INT 0
82118: PPUSH
// uc_side := side ;
82119: LD_ADDR_OWVAR 20
82123: PUSH
82124: LD_VAR 0 1
82128: ST_TO_ADDR
// uc_nation := 3 ;
82129: LD_ADDR_OWVAR 21
82133: PUSH
82134: LD_INT 3
82136: ST_TO_ADDR
// vc_chassis := 25 ;
82137: LD_ADDR_OWVAR 37
82141: PUSH
82142: LD_INT 25
82144: ST_TO_ADDR
// vc_engine := engine_siberite ;
82145: LD_ADDR_OWVAR 39
82149: PUSH
82150: LD_INT 3
82152: ST_TO_ADDR
// vc_control := control_computer ;
82153: LD_ADDR_OWVAR 38
82157: PUSH
82158: LD_INT 3
82160: ST_TO_ADDR
// vc_weapon := 59 ;
82161: LD_ADDR_OWVAR 40
82165: PUSH
82166: LD_INT 59
82168: ST_TO_ADDR
// result := CreateVehicle ;
82169: LD_ADDR_VAR 0 5
82173: PUSH
82174: CALL_OW 45
82178: ST_TO_ADDR
// SetDir ( result , d ) ;
82179: LD_VAR 0 5
82183: PPUSH
82184: LD_VAR 0 4
82188: PPUSH
82189: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82193: LD_VAR 0 5
82197: PPUSH
82198: LD_VAR 0 2
82202: PPUSH
82203: LD_VAR 0 3
82207: PPUSH
82208: LD_INT 0
82210: PPUSH
82211: CALL_OW 48
// end ;
82215: LD_VAR 0 5
82219: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82220: LD_INT 0
82222: PPUSH
82223: PPUSH
82224: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82225: LD_ADDR_VAR 0 2
82229: PUSH
82230: LD_INT 0
82232: PUSH
82233: LD_INT 0
82235: PUSH
82236: LD_INT 0
82238: PUSH
82239: LD_INT 0
82241: PUSH
82242: EMPTY
82243: LIST
82244: LIST
82245: LIST
82246: LIST
82247: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82248: LD_VAR 0 1
82252: NOT
82253: PUSH
82254: LD_VAR 0 1
82258: PPUSH
82259: CALL_OW 264
82263: PUSH
82264: LD_INT 12
82266: PUSH
82267: LD_INT 51
82269: PUSH
82270: LD_INT 32
82272: PUSH
82273: LD_INT 89
82275: PUSH
82276: EMPTY
82277: LIST
82278: LIST
82279: LIST
82280: LIST
82281: IN
82282: NOT
82283: OR
82284: IFFALSE 82288
// exit ;
82286: GO 82386
// for i := 1 to 3 do
82288: LD_ADDR_VAR 0 3
82292: PUSH
82293: DOUBLE
82294: LD_INT 1
82296: DEC
82297: ST_TO_ADDR
82298: LD_INT 3
82300: PUSH
82301: FOR_TO
82302: IFFALSE 82384
// begin tmp := GetCargo ( cargo , i ) ;
82304: LD_ADDR_VAR 0 4
82308: PUSH
82309: LD_VAR 0 1
82313: PPUSH
82314: LD_VAR 0 3
82318: PPUSH
82319: CALL_OW 289
82323: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82324: LD_ADDR_VAR 0 2
82328: PUSH
82329: LD_VAR 0 2
82333: PPUSH
82334: LD_VAR 0 3
82338: PPUSH
82339: LD_VAR 0 4
82343: PPUSH
82344: CALL_OW 1
82348: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82349: LD_ADDR_VAR 0 2
82353: PUSH
82354: LD_VAR 0 2
82358: PPUSH
82359: LD_INT 4
82361: PPUSH
82362: LD_VAR 0 2
82366: PUSH
82367: LD_INT 4
82369: ARRAY
82370: PUSH
82371: LD_VAR 0 4
82375: PLUS
82376: PPUSH
82377: CALL_OW 1
82381: ST_TO_ADDR
// end ;
82382: GO 82301
82384: POP
82385: POP
// end ;
82386: LD_VAR 0 2
82390: RET
// export function Length ( array ) ; begin
82391: LD_INT 0
82393: PPUSH
// result := array + 0 ;
82394: LD_ADDR_VAR 0 2
82398: PUSH
82399: LD_VAR 0 1
82403: PUSH
82404: LD_INT 0
82406: PLUS
82407: ST_TO_ADDR
// end ;
82408: LD_VAR 0 2
82412: RET
// export function PrepareArray ( array ) ; begin
82413: LD_INT 0
82415: PPUSH
// result := array diff 0 ;
82416: LD_ADDR_VAR 0 2
82420: PUSH
82421: LD_VAR 0 1
82425: PUSH
82426: LD_INT 0
82428: DIFF
82429: ST_TO_ADDR
// if not result [ 1 ] then
82430: LD_VAR 0 2
82434: PUSH
82435: LD_INT 1
82437: ARRAY
82438: NOT
82439: IFFALSE 82459
// result := Delete ( result , 1 ) ;
82441: LD_ADDR_VAR 0 2
82445: PUSH
82446: LD_VAR 0 2
82450: PPUSH
82451: LD_INT 1
82453: PPUSH
82454: CALL_OW 3
82458: ST_TO_ADDR
// end ;
82459: LD_VAR 0 2
82463: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82464: LD_INT 0
82466: PPUSH
82467: PPUSH
82468: PPUSH
82469: PPUSH
// sibRocketRange := 25 ;
82470: LD_ADDR_VAR 0 6
82474: PUSH
82475: LD_INT 25
82477: ST_TO_ADDR
// result := false ;
82478: LD_ADDR_VAR 0 4
82482: PUSH
82483: LD_INT 0
82485: ST_TO_ADDR
// for i := 0 to 5 do
82486: LD_ADDR_VAR 0 5
82490: PUSH
82491: DOUBLE
82492: LD_INT 0
82494: DEC
82495: ST_TO_ADDR
82496: LD_INT 5
82498: PUSH
82499: FOR_TO
82500: IFFALSE 82567
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82502: LD_VAR 0 1
82506: PPUSH
82507: LD_VAR 0 5
82511: PPUSH
82512: LD_VAR 0 6
82516: PPUSH
82517: CALL_OW 272
82521: PPUSH
82522: LD_VAR 0 2
82526: PPUSH
82527: LD_VAR 0 5
82531: PPUSH
82532: LD_VAR 0 6
82536: PPUSH
82537: CALL_OW 273
82541: PPUSH
82542: LD_VAR 0 3
82546: PPUSH
82547: CALL_OW 309
82551: IFFALSE 82565
// begin result := true ;
82553: LD_ADDR_VAR 0 4
82557: PUSH
82558: LD_INT 1
82560: ST_TO_ADDR
// exit ;
82561: POP
82562: POP
82563: GO 82569
// end ;
82565: GO 82499
82567: POP
82568: POP
// end ;
82569: LD_VAR 0 4
82573: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82574: LD_INT 0
82576: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82577: LD_VAR 0 1
82581: PPUSH
82582: LD_VAR 0 2
82586: PPUSH
82587: LD_INT 0
82589: PPUSH
82590: LD_INT 0
82592: PPUSH
82593: LD_INT 1
82595: PPUSH
82596: LD_INT 0
82598: PPUSH
82599: CALL_OW 587
// end ; end_of_file
82603: LD_VAR 0 3
82607: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82608: LD_VAR 0 1
82612: PUSH
82613: LD_INT 200
82615: DOUBLE
82616: GREATEREQUAL
82617: IFFALSE 82625
82619: LD_INT 299
82621: DOUBLE
82622: LESSEQUAL
82623: IFTRUE 82627
82625: GO 82659
82627: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82628: LD_VAR 0 1
82632: PPUSH
82633: LD_VAR 0 2
82637: PPUSH
82638: LD_VAR 0 3
82642: PPUSH
82643: LD_VAR 0 4
82647: PPUSH
82648: LD_VAR 0 5
82652: PPUSH
82653: CALL 37274 0 5
82657: GO 82736
82659: LD_INT 300
82661: DOUBLE
82662: GREATEREQUAL
82663: IFFALSE 82671
82665: LD_INT 399
82667: DOUBLE
82668: LESSEQUAL
82669: IFTRUE 82673
82671: GO 82735
82673: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82674: LD_VAR 0 1
82678: PPUSH
82679: LD_VAR 0 2
82683: PPUSH
82684: LD_VAR 0 3
82688: PPUSH
82689: LD_VAR 0 4
82693: PPUSH
82694: LD_VAR 0 5
82698: PPUSH
82699: LD_VAR 0 6
82703: PPUSH
82704: LD_VAR 0 7
82708: PPUSH
82709: LD_VAR 0 8
82713: PPUSH
82714: LD_VAR 0 9
82718: PPUSH
82719: LD_VAR 0 10
82723: PPUSH
82724: LD_VAR 0 11
82728: PPUSH
82729: CALL 33607 0 11
82733: GO 82736
82735: POP
// end ;
82736: PPOPN 11
82738: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82739: LD_VAR 0 1
82743: PPUSH
82744: LD_VAR 0 2
82748: PPUSH
82749: LD_VAR 0 3
82753: PPUSH
82754: LD_VAR 0 4
82758: PPUSH
82759: LD_VAR 0 5
82763: PPUSH
82764: CALL 37010 0 5
// end ; end_of_file
82768: PPOPN 5
82770: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82771: LD_VAR 0 1
82775: PPUSH
82776: LD_VAR 0 2
82780: PPUSH
82781: LD_VAR 0 3
82785: PPUSH
82786: LD_VAR 0 4
82790: PPUSH
82791: LD_VAR 0 5
82795: PPUSH
82796: LD_VAR 0 6
82800: PPUSH
82801: CALL 21227 0 6
// end ;
82805: PPOPN 6
82807: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82808: LD_INT 0
82810: PPUSH
// begin if not units then
82811: LD_VAR 0 1
82815: NOT
82816: IFFALSE 82820
// exit ;
82818: GO 82820
// end ;
82820: PPOPN 7
82822: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82823: CALL 21121 0 0
// end ;
82827: PPOPN 1
82829: END
