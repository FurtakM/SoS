// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7575 0 0
// CreateNature ;
  57: CALL 20994 0 0
// PrepareRussian ;
  61: CALL 5705 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 10894 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 41620 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 41620 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 41620 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 41620 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 41620 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 41620 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 41620 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 41620 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 41620 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 41620 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 41620 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: PUSH
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 21
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 70
2583: OR
2584: IFFALSE 2602
// begin area := HarrisonSupportArea2 ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 31
2593: ST_TO_ADDR
// dir := 1 ;
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// end ; uc_side = 1 ;
2602: LD_ADDR_OWVAR 20
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// uc_nation = 1 ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// vc_engine := engine_combustion ;
2618: LD_ADDR_OWVAR 39
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// vc_control := control_manual ;
2626: LD_ADDR_OWVAR 38
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2634: LD_ADDR_OWVAR 40
2638: PUSH
2639: LD_INT 4
2641: PUSH
2642: LD_INT 4
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh := CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := class_engineer ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2825: LD_ADDR_EXP 18
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 18
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine := engine_combustion ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control := control_manual ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 5
2875: PUSH
2876: LD_INT 3
2878: PUSH
2879: LD_INT 3
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_OWVAR 67
2892: ARRAY
2893: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2894: LD_ADDR_OWVAR 37
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// veh := CreateVehicle ;
2902: LD_ADDR_VAR 0 3
2906: PUSH
2907: CALL_OW 45
2911: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_VAR 0 5
2921: PPUSH
2922: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_VAR 0 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_INT 50
2950: PPUSH
2951: CALL_OW 240
// hc_class := class_soldier ;
2955: LD_ADDR_OWVAR 28
2959: PUSH
2960: LD_INT 1
2962: ST_TO_ADDR
// hc_sex := sex_female ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 2
2970: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2971: LD_ADDR_OWVAR 33
2975: PUSH
2976: LD_STRING SecondCharsGal
2978: ST_TO_ADDR
// hc_face_number := 42 ;
2979: LD_ADDR_OWVAR 34
2983: PUSH
2984: LD_INT 42
2986: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2987: LD_ADDR_OWVAR 29
2991: PUSH
2992: LD_INT 11
2994: PUSH
2995: LD_INT 10
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
3002: LD_ADDR_OWVAR 26
3006: PUSH
3007: LD_STRING Ingrid Jonsson
3009: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
3010: LD_ADDR_OWVAR 30
3014: PUSH
3015: LD_INT 1
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: LD_INT 0
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3033: LD_ADDR_OWVAR 31
3037: PUSH
3038: LD_INT 3
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: LD_INT 1
3046: PUSH
3047: LD_INT 0
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3056: LD_ADDR_EXP 19
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3066: LD_EXP 19
3070: PPUSH
3071: LD_VAR 0 3
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: LD_VAR 0 1
3084: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3091: LD_ADDR_VAR 0 4
3095: PUSH
3096: LD_INT 22
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 23
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 26
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: PUSH
3136: LD_EXP 3
3140: PUSH
3141: LD_EXP 4
3145: PUSH
3146: LD_EXP 8
3150: PUSH
3151: LD_EXP 9
3155: PUSH
3156: LD_EXP 5
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: DIFF
3168: ST_TO_ADDR
// for i in _tmp do
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 4
3178: PUSH
3179: FOR_IN
3180: IFFALSE 3221
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 32
3189: PPUSH
3190: CALL_OW 308
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 302
3204: AND
3205: IFFALSE 3219
// begin tmp := i ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// break ;
3217: GO 3221
// end ;
3219: GO 3179
3221: POP
3222: POP
// if not tmp then
3223: LD_VAR 0 3
3227: NOT
3228: IFFALSE 3240
// tmp := JMM ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_EXP 1
3239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// if IsDead ( tmp ) then
3247: LD_VAR 0 3
3251: PPUSH
3252: CALL_OW 301
3256: IFFALSE 3268
// tmp := JMM ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: LD_EXP 1
3267: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3268: LD_INT 81
3270: PUSH
3271: LD_INT 1
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 91
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: LD_INT 15
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: PUSH
3304: LD_EXP 27
3308: PUSH
3309: LD_INT 6300
3311: LESS
3312: OR
3313: IFFALSE 3240
// blockSpawn := 1 ;
3315: LD_ADDR_EXP 30
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// uc_side := 4 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 4
3330: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3331: LD_ADDR_EXP 16
3335: PUSH
3336: LD_STRING Joan
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: LD_EXP 44
3346: PPUSH
3347: CALL 41620 0 3
3351: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3352: LD_EXP 16
3356: PPUSH
3357: LD_VAR 0 3
3361: PPUSH
3362: CALL_OW 250
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL_OW 251
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 1
3382: PPUSH
3383: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3387: LD_EXP 16
3391: PPUSH
3392: LD_INT 250
3394: PPUSH
3395: CALL_OW 234
// InGameOn ;
3399: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3403: LD_EXP 16
3407: PPUSH
3408: CALL_OW 87
// wait ( 0 0$2 ) ;
3412: LD_INT 70
3414: PPUSH
3415: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3419: LD_VAR 0 3
3423: PPUSH
3424: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3428: LD_VAR 0 3
3432: PPUSH
3433: CALL_OW 122
// wait ( 0 0$1 ) ;
3437: LD_INT 35
3439: PPUSH
3440: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_EXP 16
3453: PPUSH
3454: CALL_OW 112
// wait ( 0 0$2 ) ;
3458: LD_INT 70
3460: PPUSH
3461: CALL_OW 67
// DialogueOn ;
3465: CALL_OW 6
// if tmp = JMM then
3469: LD_VAR 0 3
3473: PUSH
3474: LD_EXP 1
3478: EQUAL
3479: IFFALSE 3628
// begin ComTurnUnit ( JMM , Joan ) ;
3481: LD_EXP 1
3485: PPUSH
3486: LD_EXP 16
3490: PPUSH
3491: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3495: LD_EXP 1
3499: PPUSH
3500: LD_STRING D5b-JMM-1
3502: PPUSH
3503: CALL_OW 88
// DialogueOff ;
3507: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3511: LD_EXP 16
3515: PPUSH
3516: LD_INT 500
3518: PPUSH
3519: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3523: LD_EXP 16
3527: PPUSH
3528: LD_EXP 1
3532: PPUSH
3533: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3537: LD_EXP 1
3541: PPUSH
3542: LD_EXP 16
3546: PPUSH
3547: CALL_OW 119
// wait ( 0 0$1 ) ;
3551: LD_INT 35
3553: PPUSH
3554: CALL_OW 67
// DialogueOn ;
3558: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3562: LD_EXP 16
3566: PPUSH
3567: LD_STRING D5b-Joan-1
3569: PPUSH
3570: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3574: LD_EXP 1
3578: PPUSH
3579: LD_STRING D5b-JMM-2
3581: PPUSH
3582: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3586: LD_EXP 16
3590: PPUSH
3591: LD_STRING D5b-Joan-2
3593: PPUSH
3594: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3598: LD_EXP 1
3602: PPUSH
3603: LD_STRING D5b-JMM-3
3605: PPUSH
3606: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3610: LD_EXP 16
3614: PPUSH
3615: LD_STRING D5b-Joan-3
3617: PPUSH
3618: CALL_OW 88
// DialogueOff ;
3622: CALL_OW 7
// end else
3626: GO 3993
// begin ComTurnUnit ( tmp , Joan ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_EXP 16
3637: PPUSH
3638: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3642: LD_VAR 0 3
3646: PPUSH
3647: LD_STRING D5a-Sol1-1
3649: PPUSH
3650: CALL_OW 88
// DialogueOff ;
3654: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_INT 500
3665: PPUSH
3666: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3670: LD_EXP 16
3674: PPUSH
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3684: LD_VAR 0 3
3688: PPUSH
3689: LD_EXP 16
3693: PPUSH
3694: CALL_OW 119
// wait ( 0 0$1 ) ;
3698: LD_INT 35
3700: PPUSH
3701: CALL_OW 67
// DialogueOn ;
3705: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3709: LD_EXP 16
3713: PPUSH
3714: LD_STRING D5a-Joan-1
3716: PPUSH
3717: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_STRING D5a-Sol1-2
3728: PPUSH
3729: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3733: LD_EXP 16
3737: PPUSH
3738: LD_STRING D5a-Joan-2
3740: PPUSH
3741: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_STRING D5a-Sol1-3
3752: PPUSH
3753: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3757: LD_EXP 16
3761: PPUSH
3762: LD_STRING D5a-Joan-3
3764: PPUSH
3765: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_STRING D5a-Sol1-4
3776: PPUSH
3777: CALL_OW 88
// DialogueOff ;
3781: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3785: LD_EXP 1
3789: PUSH
3790: LD_INT 55
3792: PUSH
3793: EMPTY
3794: LIST
3795: PPUSH
3796: CALL_OW 69
3800: IN
3801: IFFALSE 3824
// begin ComMoveUnit ( JMM , Joan ) ;
3803: LD_EXP 1
3807: PPUSH
3808: LD_EXP 16
3812: PPUSH
3813: CALL_OW 112
// wait ( 0 0$05 ) ;
3817: LD_INT 175
3819: PPUSH
3820: CALL_OW 67
// end ; ComExit ( JMM ) ;
3824: LD_EXP 1
3828: PPUSH
3829: CALL 79310 0 1
// wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3840: LD_INT 35
3842: PPUSH
3843: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3847: LD_EXP 16
3851: PUSH
3852: LD_VAR 0 3
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PPUSH
3861: LD_EXP 1
3865: PPUSH
3866: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3870: LD_EXP 16
3874: PPUSH
3875: LD_EXP 1
3879: PPUSH
3880: CALL_OW 296
3884: PUSH
3885: LD_INT 5
3887: LESS
3888: IFFALSE 3840
// ComTurnUnit ( Joan , JMM ) ;
3890: LD_EXP 16
3894: PPUSH
3895: LD_EXP 1
3899: PPUSH
3900: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3904: LD_EXP 1
3908: PPUSH
3909: LD_EXP 16
3913: PPUSH
3914: CALL_OW 119
// wait ( 0 0$1 ) ;
3918: LD_INT 35
3920: PPUSH
3921: CALL_OW 67
// DialogueOn ;
3925: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3929: LD_EXP 16
3933: PPUSH
3934: LD_STRING D5a-Joan-4
3936: PPUSH
3937: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3941: LD_EXP 1
3945: PPUSH
3946: LD_STRING D5a-JMM-4
3948: PPUSH
3949: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3953: LD_EXP 16
3957: PPUSH
3958: LD_STRING D5a-Joan-5
3960: PPUSH
3961: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3965: LD_EXP 1
3969: PPUSH
3970: LD_STRING D5a-JMM-5
3972: PPUSH
3973: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3977: LD_EXP 16
3981: PPUSH
3982: LD_STRING D5a-Joan-6
3984: PPUSH
3985: CALL_OW 88
// DialogueOff ;
3989: CALL_OW 7
// end ; DialogueOn ;
3993: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3997: LD_EXP 1
4001: PPUSH
4002: LD_STRING D6-JMM-1
4004: PPUSH
4005: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4009: LD_EXP 16
4013: PPUSH
4014: LD_STRING D6-Joan-1
4016: PPUSH
4017: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4021: LD_EXP 1
4025: PPUSH
4026: LD_STRING D6-JMM-2
4028: PPUSH
4029: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4033: LD_EXP 16
4037: PPUSH
4038: LD_STRING D6-Joan-2
4040: PPUSH
4041: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4045: LD_EXP 1
4049: PPUSH
4050: LD_STRING D6-JMM-3
4052: PPUSH
4053: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4057: LD_EXP 16
4061: PPUSH
4062: LD_STRING D6-Joan-3
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING D6-JMM-4
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// InGameOff ;
4085: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4089: LD_EXP 16
4093: PPUSH
4094: LD_INT 1
4096: PPUSH
4097: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4101: LD_STRING MJ
4103: PPUSH
4104: CALL_OW 337
// joanStatus = 1 ;
4108: LD_ADDR_EXP 17
4112: PUSH
4113: LD_INT 1
4115: ST_TO_ADDR
// blockSpawn = 0 ;
4116: LD_ADDR_EXP 30
4120: PUSH
4121: LD_INT 0
4123: ST_TO_ADDR
// end ;
4124: LD_VAR 0 1
4128: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4129: LD_INT 0
4131: PPUSH
4132: PPUSH
// if not number or number > 8 then
4133: LD_VAR 0 1
4137: NOT
4138: PUSH
4139: LD_VAR 0 1
4143: PUSH
4144: LD_INT 8
4146: GREATER
4147: OR
4148: IFFALSE 4152
// exit ;
4150: GO 5700
// repeat wait ( 0 0$7 ) ;
4152: LD_INT 245
4154: PPUSH
4155: CALL_OW 67
// until blockSpawn = 0 ;
4159: LD_EXP 30
4163: PUSH
4164: LD_INT 0
4166: EQUAL
4167: IFFALSE 4152
// uc_side := 1 ;
4169: LD_ADDR_OWVAR 20
4173: PUSH
4174: LD_INT 1
4176: ST_TO_ADDR
// uc_nation := 1 ;
4177: LD_ADDR_OWVAR 21
4181: PUSH
4182: LD_INT 1
4184: ST_TO_ADDR
// InitHc ;
4185: CALL_OW 19
// if number = 1 then
4189: LD_VAR 0 1
4193: PUSH
4194: LD_INT 1
4196: EQUAL
4197: IFFALSE 4373
// begin hc_class := 3 ;
4199: LD_ADDR_OWVAR 28
4203: PUSH
4204: LD_INT 3
4206: ST_TO_ADDR
// hc_sex := sex_male ;
4207: LD_ADDR_OWVAR 27
4211: PUSH
4212: LD_INT 1
4214: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4215: LD_ADDR_OWVAR 33
4219: PUSH
4220: LD_STRING SecondCharsGal
4222: ST_TO_ADDR
// hc_face_number := 55 ;
4223: LD_ADDR_OWVAR 34
4227: PUSH
4228: LD_INT 55
4230: ST_TO_ADDR
// hc_name := George McCarthy ;
4231: LD_ADDR_OWVAR 26
4235: PUSH
4236: LD_STRING George McCarthy
4238: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4239: LD_ADDR_OWVAR 29
4243: PUSH
4244: LD_INT 11
4246: PUSH
4247: LD_INT 10
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4254: LD_ADDR_OWVAR 30
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: LD_INT 0
4264: PUSH
4265: LD_INT 2
4267: PUSH
4268: LD_INT 0
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4277: LD_ADDR_OWVAR 31
4281: PUSH
4282: LD_INT 1
4284: PUSH
4285: LD_INT 2
4287: PUSH
4288: LD_INT 3
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: ST_TO_ADDR
// un = CreateHuman ;
4300: LD_ADDR_VAR 0 3
4304: PUSH
4305: CALL_OW 44
4309: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4310: LD_VAR 0 3
4314: PPUSH
4315: LD_INT 23
4317: PPUSH
4318: LD_INT 1
4320: PPUSH
4321: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4325: LD_VAR 0 3
4329: PPUSH
4330: CALL_OW 87
// wait ( 0 0$1 ) ;
4334: LD_INT 35
4336: PPUSH
4337: CALL_OW 67
// DialogueOn ;
4341: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4345: LD_VAR 0 3
4349: PPUSH
4350: LD_STRING D11d-Sol4-1
4352: PPUSH
4353: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4357: LD_EXP 1
4361: PPUSH
4362: LD_STRING D11d-JMM-1
4364: PPUSH
4365: CALL_OW 88
// DialogueOff ;
4369: CALL_OW 7
// end ; if number = 2 then
4373: LD_VAR 0 1
4377: PUSH
4378: LD_INT 2
4380: EQUAL
4381: IFFALSE 4557
// begin hc_class := 1 ;
4383: LD_ADDR_OWVAR 28
4387: PUSH
4388: LD_INT 1
4390: ST_TO_ADDR
// hc_sex := sex_male ;
4391: LD_ADDR_OWVAR 27
4395: PUSH
4396: LD_INT 1
4398: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4399: LD_ADDR_OWVAR 33
4403: PUSH
4404: LD_STRING AmGalRemake
4406: ST_TO_ADDR
// hc_face_number := 7 ;
4407: LD_ADDR_OWVAR 34
4411: PUSH
4412: LD_INT 7
4414: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4415: LD_ADDR_OWVAR 26
4419: PUSH
4420: LD_STRING Bobby Jordan
4422: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4423: LD_ADDR_OWVAR 29
4427: PUSH
4428: LD_INT 9
4430: PUSH
4431: LD_INT 11
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4438: LD_ADDR_OWVAR 30
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: LD_INT 0
4448: PUSH
4449: LD_INT 0
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4461: LD_ADDR_OWVAR 31
4465: PUSH
4466: LD_INT 2
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// un = CreateHuman ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: CALL_OW 44
4493: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4494: LD_VAR 0 3
4498: PPUSH
4499: LD_INT 24
4501: PPUSH
4502: LD_INT 1
4504: PPUSH
4505: CALL_OW 49
// wait ( 0 0$1 ) ;
4509: LD_INT 35
4511: PPUSH
4512: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4516: LD_VAR 0 3
4520: PPUSH
4521: CALL_OW 87
// DialogueOn ;
4525: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4529: LD_VAR 0 3
4533: PPUSH
4534: LD_STRING D11b-Sol3-1
4536: PPUSH
4537: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4541: LD_EXP 1
4545: PPUSH
4546: LD_STRING D11b-JMM-1
4548: PPUSH
4549: CALL_OW 88
// DialogueOff ;
4553: CALL_OW 7
// end ; if number = 3 then
4557: LD_VAR 0 1
4561: PUSH
4562: LD_INT 3
4564: EQUAL
4565: IFFALSE 4729
// begin hc_class := 1 ;
4567: LD_ADDR_OWVAR 28
4571: PUSH
4572: LD_INT 1
4574: ST_TO_ADDR
// hc_sex := sex_male ;
4575: LD_ADDR_OWVAR 27
4579: PUSH
4580: LD_INT 1
4582: ST_TO_ADDR
// hc_gallery := DJ ;
4583: LD_ADDR_OWVAR 33
4587: PUSH
4588: LD_STRING DJ
4590: ST_TO_ADDR
// hc_face_number := 1 ;
4591: LD_ADDR_OWVAR 34
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// hc_name := Darius Dajay ;
4599: LD_ADDR_OWVAR 26
4603: PUSH
4604: LD_STRING Darius Dajay
4606: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4607: LD_ADDR_OWVAR 29
4611: PUSH
4612: LD_INT 11
4614: PUSH
4615: LD_INT 11
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4622: LD_ADDR_OWVAR 30
4626: PUSH
4627: LD_INT 2
4629: PUSH
4630: LD_INT 0
4632: PUSH
4633: LD_INT 0
4635: PUSH
4636: LD_INT 0
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4645: LD_ADDR_OWVAR 31
4649: PUSH
4650: LD_INT 4
4652: PUSH
4653: LD_INT 0
4655: PUSH
4656: LD_INT 1
4658: PUSH
4659: LD_INT 0
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: ST_TO_ADDR
// un = CreateHuman ;
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: CALL_OW 44
4677: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_INT 25
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4693: LD_VAR 0 3
4697: PPUSH
4698: CALL_OW 87
// wait ( 0 0$1 ) ;
4702: LD_INT 35
4704: PPUSH
4705: CALL_OW 67
// DialogueOn ;
4709: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4713: LD_VAR 0 3
4717: PPUSH
4718: LD_STRING D11f-Sol5-1
4720: PPUSH
4721: CALL_OW 88
// DialogueOff ;
4725: CALL_OW 7
// end ; if number = 4 then
4729: LD_VAR 0 1
4733: PUSH
4734: LD_INT 4
4736: EQUAL
4737: IFFALSE 4874
// begin hc_class := 2 ;
4739: LD_ADDR_OWVAR 28
4743: PUSH
4744: LD_INT 2
4746: ST_TO_ADDR
// hc_sex := sex_female ;
4747: LD_ADDR_OWVAR 27
4751: PUSH
4752: LD_INT 2
4754: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4755: LD_ADDR_OWVAR 33
4759: PUSH
4760: LD_STRING SecondCharsGal
4762: ST_TO_ADDR
// hc_face_number := 46 ;
4763: LD_ADDR_OWVAR 34
4767: PUSH
4768: LD_INT 46
4770: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4771: LD_ADDR_OWVAR 26
4775: PUSH
4776: LD_STRING Sylvia Creak
4778: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4779: LD_ADDR_OWVAR 29
4783: PUSH
4784: LD_INT 10
4786: PUSH
4787: LD_INT 9
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4794: LD_ADDR_OWVAR 30
4798: PUSH
4799: LD_INT 0
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: LD_INT 1
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4817: LD_ADDR_OWVAR 31
4821: PUSH
4822: LD_INT 1
4824: PUSH
4825: LD_INT 3
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: ST_TO_ADDR
// un = CreateHuman ;
4840: LD_ADDR_VAR 0 3
4844: PUSH
4845: CALL_OW 44
4849: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4850: LD_VAR 0 3
4854: PPUSH
4855: LD_INT 26
4857: PPUSH
4858: LD_INT 1
4860: PPUSH
4861: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4865: LD_VAR 0 3
4869: PPUSH
4870: CALL_OW 87
// end ; if number = 5 then
4874: LD_VAR 0 1
4878: PUSH
4879: LD_INT 5
4881: EQUAL
4882: IFFALSE 5058
// begin hc_class := 1 ;
4884: LD_ADDR_OWVAR 28
4888: PUSH
4889: LD_INT 1
4891: ST_TO_ADDR
// hc_sex := sex_female ;
4892: LD_ADDR_OWVAR 27
4896: PUSH
4897: LD_INT 2
4899: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4900: LD_ADDR_OWVAR 33
4904: PUSH
4905: LD_STRING SecondCharsGal
4907: ST_TO_ADDR
// hc_face_number := 37 ;
4908: LD_ADDR_OWVAR 34
4912: PUSH
4913: LD_INT 37
4915: ST_TO_ADDR
// hc_name := Malena Johnson ;
4916: LD_ADDR_OWVAR 26
4920: PUSH
4921: LD_STRING Malena Johnson
4923: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4924: LD_ADDR_OWVAR 29
4928: PUSH
4929: LD_INT 11
4931: PUSH
4932: LD_INT 10
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4939: LD_ADDR_OWVAR 30
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: LD_INT 1
4949: PUSH
4950: LD_INT 0
4952: PUSH
4953: LD_INT 0
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4962: LD_ADDR_OWVAR 31
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: LD_INT 1
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: ST_TO_ADDR
// un = CreateHuman ;
4985: LD_ADDR_VAR 0 3
4989: PUSH
4990: CALL_OW 44
4994: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4995: LD_VAR 0 3
4999: PPUSH
5000: LD_INT 27
5002: PPUSH
5003: LD_INT 1
5005: PPUSH
5006: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5010: LD_VAR 0 3
5014: PPUSH
5015: CALL_OW 87
// wait ( 0 0$1 ) ;
5019: LD_INT 35
5021: PPUSH
5022: CALL_OW 67
// DialogueOn ;
5026: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5030: LD_VAR 0 3
5034: PPUSH
5035: LD_STRING D11c-FSol3-1
5037: PPUSH
5038: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5042: LD_EXP 1
5046: PPUSH
5047: LD_STRING D11c-JMM-1
5049: PPUSH
5050: CALL_OW 88
// DialogueOff ;
5054: CALL_OW 7
// end ; if number = 6 then
5058: LD_VAR 0 1
5062: PUSH
5063: LD_INT 6
5065: EQUAL
5066: IFFALSE 5240
// begin hc_class := 1 ;
5068: LD_ADDR_OWVAR 28
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// hc_sex := sex_male ;
5076: LD_ADDR_OWVAR 27
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5084: LD_ADDR_OWVAR 33
5088: PUSH
5089: LD_STRING AmGalRemake
5091: ST_TO_ADDR
// hc_face_number := 1 ;
5092: LD_ADDR_OWVAR 34
5096: PUSH
5097: LD_INT 1
5099: ST_TO_ADDR
// hc_name := Charles Brown ;
5100: LD_ADDR_OWVAR 26
5104: PUSH
5105: LD_STRING Charles Brown
5107: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5108: LD_ADDR_OWVAR 29
5112: PUSH
5113: LD_INT 12
5115: PUSH
5116: LD_INT 11
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5123: LD_ADDR_OWVAR 30
5127: PUSH
5128: LD_INT 2
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: LD_INT 0
5136: PUSH
5137: LD_INT 0
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5146: LD_ADDR_OWVAR 31
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: LD_INT 0
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: ST_TO_ADDR
// un = CreateHuman ;
5169: LD_ADDR_VAR 0 3
5173: PUSH
5174: CALL_OW 44
5178: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_INT 28
5186: PPUSH
5187: LD_INT 1
5189: PPUSH
5190: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5194: LD_VAR 0 3
5198: PPUSH
5199: CALL_OW 87
// wait ( 0 0$1 ) ;
5203: LD_INT 35
5205: PPUSH
5206: CALL_OW 67
// DialogueOn ;
5210: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5214: LD_VAR 0 3
5218: PPUSH
5219: LD_STRING D4-Sol1-5
5221: PPUSH
5222: CALL_OW 88
// DialogueOff ;
5226: CALL_OW 7
// tempCharles = un ;
5230: LD_ADDR_EXP 14
5234: PUSH
5235: LD_VAR 0 3
5239: ST_TO_ADDR
// end ; if number = 7 then
5240: LD_VAR 0 1
5244: PUSH
5245: LD_INT 7
5247: EQUAL
5248: IFFALSE 5520
// begin hc_class := 1 ;
5250: LD_ADDR_OWVAR 28
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// hc_sex := sex_female ;
5258: LD_ADDR_OWVAR 27
5262: PUSH
5263: LD_INT 2
5265: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5266: LD_ADDR_OWVAR 33
5270: PUSH
5271: LD_STRING AmGalRemake
5273: ST_TO_ADDR
// hc_face_number := 2 ;
5274: LD_ADDR_OWVAR 34
5278: PUSH
5279: LD_INT 2
5281: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5282: LD_ADDR_OWVAR 26
5286: PUSH
5287: LD_STRING Rebecca Macdonald
5289: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5290: LD_ADDR_OWVAR 29
5294: PUSH
5295: LD_INT 10
5297: PUSH
5298: LD_INT 10
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5305: LD_ADDR_OWVAR 30
5309: PUSH
5310: LD_INT 1
5312: PUSH
5313: LD_INT 0
5315: PUSH
5316: LD_INT 0
5318: PUSH
5319: LD_INT 1
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5328: LD_ADDR_OWVAR 31
5332: PUSH
5333: LD_INT 1
5335: PUSH
5336: LD_INT 0
5338: PUSH
5339: LD_INT 0
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: ST_TO_ADDR
// un = CreateHuman ;
5351: LD_ADDR_VAR 0 3
5355: PUSH
5356: CALL_OW 44
5360: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5361: LD_VAR 0 3
5365: PPUSH
5366: LD_INT 29
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: CALL_OW 87
// wait ( 0 0$1 ) ;
5385: LD_INT 35
5387: PPUSH
5388: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5392: LD_INT 30
5394: PPUSH
5395: LD_INT 22
5397: PUSH
5398: LD_INT 3
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: PPUSH
5405: CALL_OW 70
5409: IFFALSE 5520
// begin DialogueOn ;
5411: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5415: LD_VAR 0 3
5419: PPUSH
5420: CALL_OW 250
5424: PPUSH
5425: LD_VAR 0 3
5429: PPUSH
5430: CALL_OW 251
5434: PPUSH
5435: LD_INT 1
5437: PPUSH
5438: LD_INT 15
5440: NEG
5441: PPUSH
5442: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5446: LD_VAR 0 3
5450: PPUSH
5451: CALL_OW 250
5455: PPUSH
5456: LD_VAR 0 3
5460: PPUSH
5461: CALL_OW 251
5465: PPUSH
5466: LD_INT 1
5468: PPUSH
5469: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5473: LD_VAR 0 3
5477: PPUSH
5478: LD_STRING D11a-FSol2-1
5480: PPUSH
5481: CALL_OW 88
// DialogueOff ;
5485: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5489: LD_INT 3
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 471
// wait ( 0 0$2 ) ;
5501: LD_INT 70
5503: PPUSH
5504: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5508: LD_INT 3
5510: PPUSH
5511: LD_VAR 0 3
5515: PPUSH
5516: CALL_OW 472
// end ; end ; if number = 8 then
5520: LD_VAR 0 1
5524: PUSH
5525: LD_INT 8
5527: EQUAL
5528: IFFALSE 5684
// begin hc_class := 1 ;
5530: LD_ADDR_OWVAR 28
5534: PUSH
5535: LD_INT 1
5537: ST_TO_ADDR
// hc_sex := sex_female ;
5538: LD_ADDR_OWVAR 27
5542: PUSH
5543: LD_INT 2
5545: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5546: LD_ADDR_OWVAR 33
5550: PUSH
5551: LD_STRING SecondCharsGal
5553: ST_TO_ADDR
// hc_face_number := 45 ;
5554: LD_ADDR_OWVAR 34
5558: PUSH
5559: LD_INT 45
5561: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5562: LD_ADDR_OWVAR 26
5566: PUSH
5567: LD_STRING Margherite Simpson
5569: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5570: LD_ADDR_OWVAR 29
5574: PUSH
5575: LD_INT 12
5577: PUSH
5578: LD_INT 10
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5585: LD_ADDR_OWVAR 30
5589: PUSH
5590: LD_INT 1
5592: PUSH
5593: LD_INT 2
5595: PUSH
5596: LD_INT 0
5598: PUSH
5599: LD_INT 0
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5608: LD_ADDR_OWVAR 31
5612: PUSH
5613: LD_INT 1
5615: PUSH
5616: LD_INT 2
5618: PUSH
5619: LD_INT 0
5621: PUSH
5622: LD_INT 1
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: ST_TO_ADDR
// un = CreateHuman ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: CALL_OW 44
5640: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_INT 33
5648: PPUSH
5649: LD_INT 1
5651: PPUSH
5652: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5656: LD_VAR 0 3
5660: PPUSH
5661: CALL_OW 87
// wait ( 0 0$1 ) ;
5665: LD_INT 35
5667: PPUSH
5668: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5672: LD_VAR 0 3
5676: PPUSH
5677: LD_STRING D11e-FSol4-1
5679: PPUSH
5680: CALL_OW 88
// end ; arrivals := arrivals union un ;
5684: LD_ADDR_EXP 45
5688: PUSH
5689: LD_EXP 45
5693: PUSH
5694: LD_VAR 0 3
5698: UNION
5699: ST_TO_ADDR
// end ; end_of_file
5700: LD_VAR 0 2
5704: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
// ruAttackers := [ ] ;
5709: LD_ADDR_EXP 48
5713: PUSH
5714: EMPTY
5715: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5716: LD_ADDR_EXP 49
5720: PUSH
5721: EMPTY
5722: ST_TO_ADDR
// if Difficulty < 3 then
5723: LD_OWVAR 67
5727: PUSH
5728: LD_INT 3
5730: LESS
5731: IFFALSE 5748
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5733: LD_INT 130
5735: PPUSH
5736: LD_INT 81
5738: PPUSH
5739: CALL_OW 428
5743: PPUSH
5744: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5748: LD_INT 3
5750: PPUSH
5751: LD_INT 3
5753: PPUSH
5754: LD_INT 2
5756: PPUSH
5757: LD_EXP 35
5761: PPUSH
5762: LD_EXP 36
5766: PPUSH
5767: CALL_OW 12
5771: PPUSH
5772: LD_INT 2
5774: PPUSH
5775: LD_INT 4
5777: PPUSH
5778: CALL 7329 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5782: LD_INT 3
5784: PPUSH
5785: LD_INT 3
5787: PPUSH
5788: LD_INT 8
5790: PPUSH
5791: LD_EXP 35
5795: PPUSH
5796: LD_EXP 36
5800: PPUSH
5801: CALL_OW 12
5805: PPUSH
5806: LD_INT 1
5808: PPUSH
5809: LD_INT 4
5811: PPUSH
5812: CALL 7329 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5816: LD_INT 3
5818: PPUSH
5819: LD_INT 3
5821: PPUSH
5822: LD_INT 67
5824: PPUSH
5825: LD_EXP 35
5829: PPUSH
5830: LD_EXP 36
5834: PPUSH
5835: CALL_OW 12
5839: PPUSH
5840: LD_INT 1
5842: PPUSH
5843: LD_INT 2
5845: PPUSH
5846: CALL 7329 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 3
5855: PPUSH
5856: LD_INT 21
5858: PPUSH
5859: LD_EXP 35
5863: PPUSH
5864: LD_EXP 36
5868: PPUSH
5869: CALL_OW 12
5873: PPUSH
5874: LD_INT 3
5876: PPUSH
5877: LD_INT 6
5879: PPUSH
5880: CALL 7329 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5884: LD_INT 3
5886: PPUSH
5887: LD_INT 3
5889: PPUSH
5890: LD_INT 17
5892: PPUSH
5893: LD_EXP 35
5897: PPUSH
5898: LD_EXP 36
5902: PPUSH
5903: CALL_OW 12
5907: PPUSH
5908: LD_INT 3
5910: PPUSH
5911: LD_INT 6
5913: PPUSH
5914: CALL 7329 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5918: LD_INT 3
5920: PPUSH
5921: LD_INT 3
5923: PPUSH
5924: LD_INT 32
5926: PPUSH
5927: LD_EXP 35
5931: PPUSH
5932: LD_EXP 36
5936: PPUSH
5937: CALL_OW 12
5941: PPUSH
5942: LD_INT 4
5944: PPUSH
5945: LD_INT 2
5947: PPUSH
5948: CALL 7329 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_INT 22
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 21
5969: PUSH
5970: LD_INT 3
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 30
5979: PUSH
5980: LD_INT 32
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL_OW 69
5996: PUSH
5997: FOR_IN
5998: IFFALSE 6038
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6000: LD_INT 3
6002: PPUSH
6003: LD_INT 3
6005: PPUSH
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_EXP 35
6015: PPUSH
6016: LD_EXP 36
6020: PPUSH
6021: CALL_OW 12
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: LD_INT 1
6031: PPUSH
6032: CALL 7329 0 6
6036: GO 5997
6038: POP
6039: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_INT 22
6047: PUSH
6048: LD_INT 3
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 21
6057: PUSH
6058: LD_INT 3
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: LD_INT 30
6067: PUSH
6068: LD_INT 31
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: PPUSH
6080: CALL_OW 69
6084: PUSH
6085: FOR_IN
6086: IFFALSE 6114
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6088: LD_EXP 35
6092: PPUSH
6093: LD_EXP 36
6097: PPUSH
6098: CALL_OW 12
6102: PPUSH
6103: LD_VAR 0 2
6107: PPUSH
6108: CALL 7439 0 2
6112: GO 6085
6114: POP
6115: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6116: LD_INT 3
6118: PPUSH
6119: LD_INT 32
6121: PPUSH
6122: LD_INT 3
6124: PPUSH
6125: CALL 7718 0 3
// end ;
6129: LD_VAR 0 1
6133: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 32
6146: PUSH
6147: LD_INT 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: IFFALSE 6239
6164: GO 6166
6166: DISABLE
6167: LD_INT 0
6169: PPUSH
// begin enable ;
6170: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6171: LD_ADDR_VAR 0 1
6175: PUSH
6176: LD_INT 22
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 32
6188: PUSH
6189: LD_INT 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PPUSH
6200: CALL_OW 69
6204: PUSH
6205: FOR_IN
6206: IFFALSE 6237
// if GetFuel ( i ) < 3 then
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 261
6217: PUSH
6218: LD_INT 3
6220: LESS
6221: IFFALSE 6235
// SetFuel ( i , 3 ) ;
6223: LD_VAR 0 1
6227: PPUSH
6228: LD_INT 3
6230: PPUSH
6231: CALL_OW 240
6235: GO 6205
6237: POP
6238: POP
// end ;
6239: PPOPN 1
6241: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6242: LD_OWVAR 67
6246: PUSH
6247: LD_INT 1
6249: GREATER
6250: IFFALSE 6819
6252: GO 6254
6254: DISABLE
6255: LD_INT 0
6257: PPUSH
6258: PPUSH
6259: PPUSH
6260: PPUSH
// begin uc_side := 3 ;
6261: LD_ADDR_OWVAR 20
6265: PUSH
6266: LD_INT 3
6268: ST_TO_ADDR
// uc_nation := 3 ;
6269: LD_ADDR_OWVAR 21
6273: PUSH
6274: LD_INT 3
6276: ST_TO_ADDR
// for i := 1 to 2 do
6277: LD_ADDR_VAR 0 1
6281: PUSH
6282: DOUBLE
6283: LD_INT 1
6285: DEC
6286: ST_TO_ADDR
6287: LD_INT 2
6289: PUSH
6290: FOR_TO
6291: IFFALSE 6405
// begin InitHC_All ( ) ;
6293: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 4
6302: PUSH
6303: LD_INT 5
6305: PUSH
6306: LD_INT 6
6308: PUSH
6309: LD_INT 6
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: LD_OWVAR 67
6322: ARRAY
6323: PPUSH
6324: CALL_OW 381
// un := CreateHuman ;
6328: LD_ADDR_VAR 0 2
6332: PUSH
6333: CALL_OW 44
6337: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6338: LD_VAR 0 2
6342: PPUSH
6343: LD_INT 91
6345: PPUSH
6346: LD_INT 87
6348: PPUSH
6349: LD_INT 3
6351: PPUSH
6352: LD_INT 0
6354: PPUSH
6355: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6359: LD_ADDR_EXP 49
6363: PUSH
6364: LD_EXP 49
6368: PPUSH
6369: LD_EXP 49
6373: PUSH
6374: LD_INT 1
6376: PLUS
6377: PPUSH
6378: LD_VAR 0 2
6382: PPUSH
6383: CALL_OW 1
6387: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6388: LD_VAR 0 2
6392: PPUSH
6393: LD_INT 46
6395: PPUSH
6396: LD_INT 78
6398: PPUSH
6399: CALL_OW 114
// end ;
6403: GO 6290
6405: POP
6406: POP
// if Difficulty > 2 then
6407: LD_OWVAR 67
6411: PUSH
6412: LD_INT 2
6414: GREATER
6415: IFFALSE 6547
// begin for i := 1 to 3 do
6417: LD_ADDR_VAR 0 1
6421: PUSH
6422: DOUBLE
6423: LD_INT 1
6425: DEC
6426: ST_TO_ADDR
6427: LD_INT 3
6429: PUSH
6430: FOR_TO
6431: IFFALSE 6545
// begin InitHC_All ( ) ;
6433: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6437: LD_INT 0
6439: PPUSH
6440: LD_INT 4
6442: PUSH
6443: LD_INT 5
6445: PUSH
6446: LD_INT 6
6448: PUSH
6449: LD_INT 6
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: PUSH
6458: LD_OWVAR 67
6462: ARRAY
6463: PPUSH
6464: CALL_OW 381
// un := CreateHuman ;
6468: LD_ADDR_VAR 0 2
6472: PUSH
6473: CALL_OW 44
6477: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6478: LD_VAR 0 2
6482: PPUSH
6483: LD_INT 91
6485: PPUSH
6486: LD_INT 87
6488: PPUSH
6489: LD_INT 3
6491: PPUSH
6492: LD_INT 0
6494: PPUSH
6495: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6499: LD_ADDR_EXP 49
6503: PUSH
6504: LD_EXP 49
6508: PPUSH
6509: LD_EXP 49
6513: PUSH
6514: LD_INT 1
6516: PLUS
6517: PPUSH
6518: LD_VAR 0 2
6522: PPUSH
6523: CALL_OW 1
6527: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6528: LD_VAR 0 2
6532: PPUSH
6533: LD_INT 89
6535: PPUSH
6536: LD_INT 148
6538: PPUSH
6539: CALL_OW 114
// end ;
6543: GO 6430
6545: POP
6546: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6547: LD_ADDR_VAR 0 3
6551: PUSH
6552: LD_INT 33
6554: PUSH
6555: LD_INT 61
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 49
6564: PUSH
6565: LD_INT 85
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 76
6574: PUSH
6575: LD_INT 99
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 81
6584: PUSH
6585: LD_INT 135
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 111
6594: PUSH
6595: LD_INT 155
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 147
6604: PUSH
6605: LD_INT 158
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6620: LD_INT 1050
6622: PPUSH
6623: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6627: LD_ADDR_VAR 0 1
6631: PUSH
6632: DOUBLE
6633: LD_INT 1
6635: DEC
6636: ST_TO_ADDR
6637: LD_EXP 49
6641: PUSH
6642: FOR_TO
6643: IFFALSE 6810
// begin un := ruAttackersInForest [ i ] ;
6645: LD_ADDR_VAR 0 2
6649: PUSH
6650: LD_EXP 49
6654: PUSH
6655: LD_VAR 0 1
6659: ARRAY
6660: ST_TO_ADDR
// tag := GetTag ( un ) ;
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: LD_VAR 0 2
6670: PPUSH
6671: CALL_OW 110
6675: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6676: LD_VAR 0 2
6680: PPUSH
6681: CALL_OW 302
6685: PUSH
6686: LD_VAR 0 2
6690: PPUSH
6691: CALL_OW 314
6695: NOT
6696: AND
6697: IFFALSE 6808
// begin if tag <> i then
6699: LD_VAR 0 4
6703: PUSH
6704: LD_VAR 0 1
6708: NONEQUAL
6709: IFFALSE 6737
// begin SetTag ( un , i ) ;
6711: LD_VAR 0 2
6715: PPUSH
6716: LD_VAR 0 1
6720: PPUSH
6721: CALL_OW 109
// tag := i ;
6725: LD_ADDR_VAR 0 4
6729: PUSH
6730: LD_VAR 0 1
6734: ST_TO_ADDR
// end else
6735: GO 6769
// begin SetTag ( un , i + 1 ) ;
6737: LD_VAR 0 2
6741: PPUSH
6742: LD_VAR 0 1
6746: PUSH
6747: LD_INT 1
6749: PLUS
6750: PPUSH
6751: CALL_OW 109
// tag := i + 1 ;
6755: LD_ADDR_VAR 0 4
6759: PUSH
6760: LD_VAR 0 1
6764: PUSH
6765: LD_INT 1
6767: PLUS
6768: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6769: LD_VAR 0 2
6773: PPUSH
6774: LD_VAR 0 3
6778: PUSH
6779: LD_VAR 0 4
6783: ARRAY
6784: PUSH
6785: LD_INT 1
6787: ARRAY
6788: PPUSH
6789: LD_VAR 0 3
6793: PUSH
6794: LD_VAR 0 4
6798: ARRAY
6799: PUSH
6800: LD_INT 2
6802: ARRAY
6803: PPUSH
6804: CALL_OW 114
// end ; end ;
6808: GO 6642
6810: POP
6811: POP
// until not ruAttackersInForest ;
6812: LD_EXP 49
6816: NOT
6817: IFFALSE 6620
// end ;
6819: PPOPN 4
6821: END
// every 0 0$2 trigger FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) do var i , tmp , bar , e ;
6822: LD_INT 10
6824: PPUSH
6825: LD_INT 22
6827: PUSH
6828: LD_INT 1
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PPUSH
6835: CALL_OW 70
6839: IFFALSE 7188
6841: GO 6843
6843: DISABLE
6844: LD_INT 0
6846: PPUSH
6847: PPUSH
6848: PPUSH
6849: PPUSH
// begin enable ;
6850: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] , [ f_tag , 111 ] ] ) ;
6851: LD_ADDR_VAR 0 2
6855: PUSH
6856: LD_INT 22
6858: PUSH
6859: LD_INT 3
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 25
6868: PUSH
6869: LD_INT 1
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: LD_INT 120
6878: PUSH
6879: LD_INT 111
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: PPUSH
6891: CALL_OW 69
6895: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
6896: LD_ADDR_VAR 0 3
6900: PUSH
6901: LD_INT 22
6903: PUSH
6904: LD_INT 3
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PUSH
6911: LD_INT 50
6913: PUSH
6914: EMPTY
6915: LIST
6916: PUSH
6917: LD_INT 2
6919: PUSH
6920: LD_INT 30
6922: PUSH
6923: LD_INT 4
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 30
6932: PUSH
6933: LD_INT 5
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: PPUSH
6950: CALL_OW 69
6954: ST_TO_ADDR
// if not tmp then
6955: LD_VAR 0 2
6959: NOT
6960: IFFALSE 7058
// begin if not bar then
6962: LD_VAR 0 3
6966: NOT
6967: IFFALSE 6972
// begin disable ;
6969: DISABLE
// exit ;
6970: GO 7188
// end ; tmp := [ ] ;
6972: LD_ADDR_VAR 0 2
6976: PUSH
6977: EMPTY
6978: ST_TO_ADDR
// for i in bar do
6979: LD_ADDR_VAR 0 1
6983: PUSH
6984: LD_VAR 0 3
6988: PUSH
6989: FOR_IN
6990: IFFALSE 7015
// tmp := tmp union UnitsInside ( i ) ;
6992: LD_ADDR_VAR 0 2
6996: PUSH
6997: LD_VAR 0 2
7001: PUSH
7002: LD_VAR 0 1
7006: PPUSH
7007: CALL_OW 313
7011: UNION
7012: ST_TO_ADDR
7013: GO 6989
7015: POP
7016: POP
// if not tmp then
7017: LD_VAR 0 2
7021: NOT
7022: IFFALSE 7027
// begin disable ;
7024: DISABLE
// exit ;
7025: GO 7188
// end ; for i in tmp do
7027: LD_ADDR_VAR 0 1
7031: PUSH
7032: LD_VAR 0 2
7036: PUSH
7037: FOR_IN
7038: IFFALSE 7054
// SetTag ( i , 111 ) ;
7040: LD_VAR 0 1
7044: PPUSH
7045: LD_INT 111
7047: PPUSH
7048: CALL_OW 109
7052: GO 7037
7054: POP
7055: POP
// end else
7056: GO 7188
// begin e := FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) ;
7058: LD_ADDR_VAR 0 4
7062: PUSH
7063: LD_INT 10
7065: PPUSH
7066: LD_INT 22
7068: PUSH
7069: LD_INT 1
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PPUSH
7076: CALL_OW 70
7080: ST_TO_ADDR
// for i in tmp do
7081: LD_ADDR_VAR 0 1
7085: PUSH
7086: LD_VAR 0 2
7090: PUSH
7091: FOR_IN
7092: IFFALSE 7186
// if IsOk ( i ) then
7094: LD_VAR 0 1
7098: PPUSH
7099: CALL_OW 302
7103: IFFALSE 7184
// begin if IsInUnit ( i ) then
7105: LD_VAR 0 1
7109: PPUSH
7110: CALL_OW 310
7114: IFFALSE 7125
// ComExitBuilding ( i ) ;
7116: LD_VAR 0 1
7120: PPUSH
7121: CALL_OW 122
// wait ( 3 ) ;
7125: LD_INT 3
7127: PPUSH
7128: CALL_OW 67
// ComAttackUnit ( i , NearestUnitToUnit ( e , i ) ) ;
7132: LD_VAR 0 1
7136: PPUSH
7137: LD_VAR 0 4
7141: PPUSH
7142: LD_VAR 0 1
7146: PPUSH
7147: CALL_OW 74
7151: PPUSH
7152: CALL_OW 115
// AddComEnterUnit ( i , bar [ rand ( 1 , bar ) ] ) ;
7156: LD_VAR 0 1
7160: PPUSH
7161: LD_VAR 0 3
7165: PUSH
7166: LD_INT 1
7168: PPUSH
7169: LD_VAR 0 3
7173: PPUSH
7174: CALL_OW 12
7178: ARRAY
7179: PPUSH
7180: CALL_OW 180
// end ;
7184: GO 7091
7186: POP
7187: POP
// end ; end ; end_of_file
7188: PPOPN 4
7190: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7191: LD_INT 0
7193: PPUSH
7194: PPUSH
7195: PPUSH
// if not characters then
7196: LD_VAR 0 1
7200: NOT
7201: IFFALSE 7205
// exit ;
7203: GO 7284
// speaker := characters [ rand ( 1 , characters ) ] ;
7205: LD_ADDR_VAR 0 6
7209: PUSH
7210: LD_VAR 0 1
7214: PUSH
7215: LD_INT 1
7217: PPUSH
7218: LD_VAR 0 1
7222: PPUSH
7223: CALL_OW 12
7227: ARRAY
7228: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7229: LD_VAR 0 6
7233: PPUSH
7234: CALL_OW 258
7238: PUSH
7239: LD_INT 1
7241: EQUAL
7242: IFFALSE 7260
// Say ( speaker , dialogMID ) else
7244: LD_VAR 0 6
7248: PPUSH
7249: LD_VAR 0 2
7253: PPUSH
7254: CALL_OW 88
7258: GO 7274
// Say ( speaker , dialogFID ) ;
7260: LD_VAR 0 6
7264: PPUSH
7265: LD_VAR 0 3
7269: PPUSH
7270: CALL_OW 88
// result := speaker ;
7274: LD_ADDR_VAR 0 4
7278: PUSH
7279: LD_VAR 0 6
7283: ST_TO_ADDR
// end ;
7284: LD_VAR 0 4
7288: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7289: LD_INT 0
7291: PPUSH
7292: PPUSH
// for i in charactersList do
7293: LD_ADDR_VAR 0 4
7297: PUSH
7298: LD_VAR 0 1
7302: PUSH
7303: FOR_IN
7304: IFFALSE 7322
// SaveCharacters ( i , ident ) ;
7306: LD_VAR 0 4
7310: PPUSH
7311: LD_VAR 0 2
7315: PPUSH
7316: CALL_OW 38
7320: GO 7303
7322: POP
7323: POP
// end ;
7324: LD_VAR 0 3
7328: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7329: LD_INT 0
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
// for i = 1 to count do
7335: LD_ADDR_VAR 0 8
7339: PUSH
7340: DOUBLE
7341: LD_INT 1
7343: DEC
7344: ST_TO_ADDR
7345: LD_VAR 0 6
7349: PUSH
7350: FOR_TO
7351: IFFALSE 7432
// begin uc_side = side ;
7353: LD_ADDR_OWVAR 20
7357: PUSH
7358: LD_VAR 0 1
7362: ST_TO_ADDR
// uc_nation = nation ;
7363: LD_ADDR_OWVAR 21
7367: PUSH
7368: LD_VAR 0 2
7372: ST_TO_ADDR
// hc_gallery =  ;
7373: LD_ADDR_OWVAR 33
7377: PUSH
7378: LD_STRING 
7380: ST_TO_ADDR
// hc_name =  ;
7381: LD_ADDR_OWVAR 26
7385: PUSH
7386: LD_STRING 
7388: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7389: LD_INT 0
7391: PPUSH
7392: LD_VAR 0 5
7396: PPUSH
7397: LD_VAR 0 4
7401: PPUSH
7402: CALL_OW 380
// un = CreateHuman ;
7406: LD_ADDR_VAR 0 10
7410: PUSH
7411: CALL_OW 44
7415: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7416: LD_VAR 0 10
7420: PPUSH
7421: LD_VAR 0 3
7425: PPUSH
7426: CALL_OW 52
// end ;
7430: GO 7350
7432: POP
7433: POP
// end ;
7434: LD_VAR 0 7
7438: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7439: LD_INT 0
7441: PPUSH
7442: PPUSH
7443: PPUSH
// uc_side := GetSide ( b ) ;
7444: LD_ADDR_OWVAR 20
7448: PUSH
7449: LD_VAR 0 2
7453: PPUSH
7454: CALL_OW 255
7458: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7459: LD_ADDR_OWVAR 21
7463: PUSH
7464: LD_VAR 0 2
7468: PPUSH
7469: CALL_OW 248
7473: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7474: LD_INT 0
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: LD_VAR 0 1
7484: PPUSH
7485: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7489: LD_ADDR_VAR 0 5
7493: PUSH
7494: LD_VAR 0 2
7498: PPUSH
7499: CALL_OW 254
7503: PUSH
7504: LD_INT 3
7506: MINUS
7507: ST_TO_ADDR
// if dir < 0 then
7508: LD_VAR 0 5
7512: PUSH
7513: LD_INT 0
7515: LESS
7516: IFFALSE 7532
// dir := 6 + dir ;
7518: LD_ADDR_VAR 0 5
7522: PUSH
7523: LD_INT 6
7525: PUSH
7526: LD_VAR 0 5
7530: PLUS
7531: ST_TO_ADDR
// un := CreateHuman ;
7532: LD_ADDR_VAR 0 4
7536: PUSH
7537: CALL_OW 44
7541: ST_TO_ADDR
// SetDir ( un , dir ) ;
7542: LD_VAR 0 4
7546: PPUSH
7547: LD_VAR 0 5
7551: PPUSH
7552: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7556: LD_VAR 0 4
7560: PPUSH
7561: LD_VAR 0 2
7565: PPUSH
7566: CALL_OW 52
// end ;
7570: LD_VAR 0 3
7574: RET
// export function PrepareDifficulty ; begin
7575: LD_INT 0
7577: PPUSH
// case Difficulty of 1 :
7578: LD_OWVAR 67
7582: PUSH
7583: LD_INT 1
7585: DOUBLE
7586: EQUAL
7587: IFTRUE 7591
7589: GO 7610
7591: POP
// begin RuSolMinLevel = 2 ;
7592: LD_ADDR_EXP 35
7596: PUSH
7597: LD_INT 2
7599: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7600: LD_ADDR_EXP 36
7604: PUSH
7605: LD_INT 3
7607: ST_TO_ADDR
// end ; 2 :
7608: GO 7671
7610: LD_INT 2
7612: DOUBLE
7613: EQUAL
7614: IFTRUE 7618
7616: GO 7637
7618: POP
// begin RuSolMinLevel = 3 ;
7619: LD_ADDR_EXP 35
7623: PUSH
7624: LD_INT 3
7626: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7627: LD_ADDR_EXP 36
7631: PUSH
7632: LD_INT 5
7634: ST_TO_ADDR
// end ; 3 .. 4 :
7635: GO 7671
7637: LD_INT 3
7639: DOUBLE
7640: GREATEREQUAL
7641: IFFALSE 7649
7643: LD_INT 4
7645: DOUBLE
7646: LESSEQUAL
7647: IFTRUE 7651
7649: GO 7670
7651: POP
// begin RuSolMinLevel = 4 ;
7652: LD_ADDR_EXP 35
7656: PUSH
7657: LD_INT 4
7659: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7660: LD_ADDR_EXP 36
7664: PUSH
7665: LD_INT 6
7667: ST_TO_ADDR
// end ; end ;
7668: GO 7671
7670: POP
// end ;
7671: LD_VAR 0 1
7675: RET
// export function ShowQuery1 ; begin
7676: LD_INT 0
7678: PPUSH
// result := Query ( QKill ) ;
7679: LD_ADDR_VAR 0 1
7683: PUSH
7684: LD_STRING QKill
7686: PPUSH
7687: CALL_OW 97
7691: ST_TO_ADDR
// end ;
7692: LD_VAR 0 1
7696: RET
// export function ShowQuery2 ; begin
7697: LD_INT 0
7699: PPUSH
// result := Query ( QKill2 ) ;
7700: LD_ADDR_VAR 0 1
7704: PUSH
7705: LD_STRING QKill2
7707: PPUSH
7708: CALL_OW 97
7712: ST_TO_ADDR
// end ;
7713: LD_VAR 0 1
7717: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7718: LD_INT 0
7720: PPUSH
7721: PPUSH
7722: PPUSH
7723: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
7724: LD_ADDR_VAR 0 7
7728: PUSH
7729: LD_INT 48
7731: PUSH
7732: LD_INT 49
7734: PUSH
7735: LD_INT 50
7737: PUSH
7738: LD_INT 20
7740: PUSH
7741: LD_INT 1
7743: PUSH
7744: LD_INT 51
7746: PUSH
7747: LD_INT 52
7749: PUSH
7750: LD_INT 69
7752: PUSH
7753: LD_INT 39
7755: PUSH
7756: LD_INT 34
7758: PUSH
7759: LD_INT 40
7761: PUSH
7762: LD_INT 53
7764: PUSH
7765: LD_INT 71
7767: PUSH
7768: LD_INT 57
7770: PUSH
7771: LD_INT 58
7773: PUSH
7774: LD_INT 44
7776: PUSH
7777: LD_INT 32
7779: PUSH
7780: LD_INT 27
7782: PUSH
7783: LD_INT 23
7785: PUSH
7786: LD_INT 33
7788: PUSH
7789: LD_INT 59
7791: PUSH
7792: LD_INT 54
7794: PUSH
7795: LD_INT 55
7797: PUSH
7798: LD_INT 56
7800: PUSH
7801: LD_INT 63
7803: PUSH
7804: LD_INT 64
7806: PUSH
7807: LD_INT 65
7809: PUSH
7810: LD_INT 30
7812: PUSH
7813: LD_INT 31
7815: PUSH
7816: LD_INT 21
7818: PUSH
7819: LD_INT 22
7821: PUSH
7822: LD_INT 25
7824: PUSH
7825: LD_INT 82
7827: PUSH
7828: LD_INT 83
7830: PUSH
7831: LD_INT 84
7833: PUSH
7834: LD_INT 85
7836: PUSH
7837: LD_INT 86
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: ST_TO_ADDR
// for i = 1 to list do
7879: LD_ADDR_VAR 0 5
7883: PUSH
7884: DOUBLE
7885: LD_INT 1
7887: DEC
7888: ST_TO_ADDR
7889: LD_VAR 0 7
7893: PUSH
7894: FOR_TO
7895: IFFALSE 7967
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7897: LD_VAR 0 7
7901: PUSH
7902: LD_VAR 0 5
7906: ARRAY
7907: PPUSH
7908: LD_VAR 0 1
7912: PPUSH
7913: CALL_OW 321
7917: PUSH
7918: LD_INT 1
7920: EQUAL
7921: PUSH
7922: LD_VAR 0 7
7926: PUSH
7927: LD_VAR 0 5
7931: ARRAY
7932: PPUSH
7933: LD_VAR 0 3
7937: PPUSH
7938: CALL_OW 482
7942: AND
7943: IFFALSE 7965
// AddComResearch ( lab , list [ i ] ) ;
7945: LD_VAR 0 2
7949: PPUSH
7950: LD_VAR 0 7
7954: PUSH
7955: LD_VAR 0 5
7959: ARRAY
7960: PPUSH
7961: CALL_OW 184
7965: GO 7894
7967: POP
7968: POP
// end ;
7969: LD_VAR 0 4
7973: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7974: LD_INT 0
7976: PPUSH
7977: PPUSH
7978: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7979: LD_INT 22
7981: PUSH
7982: LD_VAR 0 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 21
7993: PUSH
7994: LD_INT 2
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PPUSH
8005: CALL_OW 69
8009: PUSH
8010: LD_VAR 0 3
8014: LESSEQUAL
8015: IFFALSE 8123
// begin for i = 1 to vehCount do
8017: LD_ADDR_VAR 0 9
8021: PUSH
8022: DOUBLE
8023: LD_INT 1
8025: DEC
8026: ST_TO_ADDR
8027: LD_VAR 0 3
8031: PUSH
8032: FOR_TO
8033: IFFALSE 8121
// begin weapon := weaponTab [ i ] ;
8035: LD_ADDR_VAR 0 10
8039: PUSH
8040: LD_VAR 0 4
8044: PUSH
8045: LD_VAR 0 9
8049: ARRAY
8050: ST_TO_ADDR
// if weapon = ru_heavy_gun then
8051: LD_VAR 0 10
8055: PUSH
8056: LD_INT 46
8058: EQUAL
8059: IFFALSE 8090
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
8061: LD_VAR 0 2
8065: PPUSH
8066: LD_INT 24
8068: PPUSH
8069: LD_VAR 0 5
8073: PPUSH
8074: LD_VAR 0 6
8078: PPUSH
8079: LD_VAR 0 10
8083: PPUSH
8084: CALL_OW 185
8088: GO 8119
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 7
8099: PPUSH
8100: LD_VAR 0 5
8104: PPUSH
8105: LD_VAR 0 6
8109: PPUSH
8110: LD_VAR 0 10
8114: PPUSH
8115: CALL_OW 185
// end ;
8119: GO 8032
8121: POP
8122: POP
// end ; end ;
8123: LD_VAR 0 8
8127: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
8128: LD_INT 0
8130: PPUSH
8131: PPUSH
8132: PPUSH
8133: PPUSH
8134: PPUSH
8135: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
8136: LD_ADDR_VAR 0 8
8140: PUSH
8141: LD_VAR 0 2
8145: PPUSH
8146: CALL_OW 313
8150: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8151: LD_ADDR_VAR 0 9
8155: PUSH
8156: LD_VAR 0 3
8160: PPUSH
8161: LD_INT 22
8163: PUSH
8164: LD_VAR 0 1
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 25
8175: PUSH
8176: LD_INT 2
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: LD_INT 24
8185: PUSH
8186: LD_INT 750
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: PUSH
8193: LD_INT 3
8195: PUSH
8196: LD_INT 54
8198: PUSH
8199: EMPTY
8200: LIST
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: PPUSH
8212: CALL_OW 70
8216: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8217: LD_ADDR_VAR 0 6
8221: PUSH
8222: LD_VAR 0 3
8226: PPUSH
8227: LD_INT 22
8229: PUSH
8230: LD_VAR 0 1
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PUSH
8239: LD_INT 21
8241: PUSH
8242: LD_INT 3
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 3
8251: PUSH
8252: LD_INT 24
8254: PUSH
8255: LD_INT 1000
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: LIST
8270: PUSH
8271: EMPTY
8272: LIST
8273: PPUSH
8274: CALL_OW 70
8278: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8279: LD_VAR 0 6
8283: NOT
8284: PUSH
8285: LD_INT 22
8287: PUSH
8288: LD_VAR 0 1
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PUSH
8297: LD_INT 25
8299: PUSH
8300: LD_INT 2
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 24
8309: PUSH
8310: LD_INT 250
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: LIST
8321: PPUSH
8322: CALL_OW 69
8326: NOT
8327: AND
8328: IFFALSE 8332
// exit ;
8330: GO 8490
// if buildingsList and engineerOkInside then
8332: LD_VAR 0 6
8336: PUSH
8337: LD_VAR 0 8
8341: AND
8342: IFFALSE 8353
// ComExitBuilding ( engineerOkInside ) ;
8344: LD_VAR 0 8
8348: PPUSH
8349: CALL_OW 122
// if buildingsList and engineerOkOutside then
8353: LD_VAR 0 6
8357: PUSH
8358: LD_VAR 0 9
8362: AND
8363: IFFALSE 8383
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
8365: LD_VAR 0 9
8369: PPUSH
8370: LD_VAR 0 6
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PPUSH
8379: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8383: LD_VAR 0 6
8387: PUSH
8388: LD_INT 0
8390: EQUAL
8391: PUSH
8392: LD_VAR 0 4
8396: PUSH
8397: LD_INT 0
8399: EQUAL
8400: AND
8401: PUSH
8402: LD_VAR 0 9
8406: AND
8407: IFFALSE 8423
// ComEnterUnit ( engineerOkOutside , depot ) ;
8409: LD_VAR 0 9
8413: PPUSH
8414: LD_VAR 0 2
8418: PPUSH
8419: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8423: LD_VAR 0 9
8427: PUSH
8428: LD_VAR 0 6
8432: PUSH
8433: LD_INT 0
8435: EQUAL
8436: AND
8437: PUSH
8438: LD_VAR 0 4
8442: AND
8443: IFFALSE 8490
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8445: LD_VAR 0 9
8449: PPUSH
8450: LD_VAR 0 4
8454: PUSH
8455: LD_INT 1
8457: ARRAY
8458: PPUSH
8459: LD_VAR 0 4
8463: PUSH
8464: LD_INT 2
8466: ARRAY
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_INT 3
8475: ARRAY
8476: PPUSH
8477: LD_VAR 0 4
8481: PUSH
8482: LD_INT 4
8484: ARRAY
8485: PPUSH
8486: CALL_OW 145
// end ;
8490: LD_VAR 0 5
8494: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8495: LD_INT 0
8497: PPUSH
8498: PPUSH
8499: PPUSH
8500: PPUSH
8501: PPUSH
8502: PPUSH
8503: PPUSH
8504: PPUSH
8505: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8506: LD_ADDR_VAR 0 6
8510: PUSH
8511: LD_INT 22
8513: PUSH
8514: LD_VAR 0 1
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: LD_INT 25
8525: PUSH
8526: LD_INT 4
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 23
8535: PUSH
8536: LD_INT 2
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 24
8545: PUSH
8546: LD_INT 251
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: PPUSH
8559: CALL_OW 69
8563: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8564: LD_ADDR_VAR 0 7
8568: PUSH
8569: LD_VAR 0 3
8573: PPUSH
8574: LD_INT 22
8576: PUSH
8577: LD_VAR 0 1
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 23
8588: PUSH
8589: LD_INT 2
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 25
8598: PUSH
8599: LD_INT 4
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: LD_INT 50
8608: PUSH
8609: EMPTY
8610: LIST
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 70
8622: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8623: LD_ADDR_VAR 0 10
8627: PUSH
8628: LD_VAR 0 3
8632: PPUSH
8633: LD_INT 22
8635: PUSH
8636: LD_VAR 0 1
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: LD_INT 21
8647: PUSH
8648: LD_INT 1
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 3
8657: PUSH
8658: LD_INT 25
8660: PUSH
8661: LD_INT 3
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: LD_INT 3
8674: PUSH
8675: LD_INT 24
8677: PUSH
8678: LD_INT 750
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: PPUSH
8695: CALL_OW 70
8699: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8700: LD_ADDR_VAR 0 11
8704: PUSH
8705: LD_VAR 0 2
8709: PPUSH
8710: LD_INT 22
8712: PUSH
8713: LD_VAR 0 1
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PUSH
8722: LD_INT 21
8724: PUSH
8725: LD_INT 1
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PUSH
8732: LD_INT 3
8734: PUSH
8735: LD_INT 25
8737: PUSH
8738: LD_INT 3
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: PUSH
8749: LD_INT 3
8751: PUSH
8752: LD_INT 24
8754: PUSH
8755: LD_INT 1000
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: PPUSH
8772: CALL_OW 70
8776: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8777: LD_VAR 0 10
8781: NOT
8782: PUSH
8783: LD_VAR 0 11
8787: NOT
8788: AND
8789: PUSH
8790: LD_VAR 0 6
8794: NOT
8795: AND
8796: IFFALSE 8800
// exit ;
8798: GO 9006
// if damageUnits and sci_list then
8800: LD_VAR 0 10
8804: PUSH
8805: LD_VAR 0 6
8809: AND
8810: IFFALSE 8826
// ComMoveToArea ( damageUnits , healArea ) ;
8812: LD_VAR 0 10
8816: PPUSH
8817: LD_VAR 0 2
8821: PPUSH
8822: CALL_OW 113
// if unitsToHeal and sci_list then
8826: LD_VAR 0 11
8830: PUSH
8831: LD_VAR 0 6
8835: AND
8836: IFFALSE 8847
// ComExitBuilding ( sci_list ) ;
8838: LD_VAR 0 6
8842: PPUSH
8843: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8847: LD_VAR 0 11
8851: PUSH
8852: LD_VAR 0 7
8856: AND
8857: IFFALSE 8877
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8859: LD_VAR 0 7
8863: PPUSH
8864: LD_VAR 0 11
8868: PUSH
8869: LD_INT 1
8871: ARRAY
8872: PPUSH
8873: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8877: LD_VAR 0 10
8881: PUSH
8882: LD_INT 0
8884: EQUAL
8885: PUSH
8886: LD_VAR 0 11
8890: PUSH
8891: LD_INT 0
8893: EQUAL
8894: AND
8895: PUSH
8896: LD_VAR 0 7
8900: AND
8901: IFFALSE 9006
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8903: LD_ADDR_VAR 0 12
8907: PUSH
8908: LD_INT 22
8910: PUSH
8911: LD_VAR 0 1
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 21
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 30
8932: PUSH
8933: LD_INT 8
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: PPUSH
8945: CALL_OW 69
8949: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8950: LD_ADDR_VAR 0 13
8954: PUSH
8955: LD_INT 1
8957: PPUSH
8958: LD_VAR 0 12
8962: PPUSH
8963: CALL_OW 12
8967: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8968: LD_VAR 0 7
8972: PPUSH
8973: LD_INT 3
8975: PUSH
8976: LD_INT 60
8978: PUSH
8979: EMPTY
8980: LIST
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PPUSH
8986: CALL_OW 72
8990: PPUSH
8991: LD_VAR 0 12
8995: PUSH
8996: LD_VAR 0 13
9000: ARRAY
9001: PPUSH
9002: CALL_OW 120
// end ; end ;
9006: LD_VAR 0 5
9010: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
9011: LD_INT 0
9013: PPUSH
9014: PPUSH
9015: PPUSH
9016: PPUSH
9017: PPUSH
// tmp := [ ] ;
9018: LD_ADDR_VAR 0 6
9022: PUSH
9023: EMPTY
9024: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
9025: LD_ADDR_VAR 0 7
9029: PUSH
9030: LD_INT 22
9032: PUSH
9033: LD_VAR 0 1
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 30
9044: PUSH
9045: LD_INT 32
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PPUSH
9056: CALL_OW 69
9060: ST_TO_ADDR
// if bunkers then
9061: LD_VAR 0 7
9065: IFFALSE 9135
// for i in bunkers do
9067: LD_ADDR_VAR 0 4
9071: PUSH
9072: LD_VAR 0 7
9076: PUSH
9077: FOR_IN
9078: IFFALSE 9133
// for j in UnitsInside ( i ) do
9080: LD_ADDR_VAR 0 5
9084: PUSH
9085: LD_VAR 0 4
9089: PPUSH
9090: CALL_OW 313
9094: PUSH
9095: FOR_IN
9096: IFFALSE 9129
// tmp := Replace ( tmp , tmp + 1 , j ) ;
9098: LD_ADDR_VAR 0 6
9102: PUSH
9103: LD_VAR 0 6
9107: PPUSH
9108: LD_VAR 0 6
9112: PUSH
9113: LD_INT 1
9115: PLUS
9116: PPUSH
9117: LD_VAR 0 5
9121: PPUSH
9122: CALL_OW 1
9126: ST_TO_ADDR
9127: GO 9095
9129: POP
9130: POP
9131: GO 9077
9133: POP
9134: POP
// if tmp then
9135: LD_VAR 0 6
9139: IFFALSE 9179
// begin ComExitBuilding ( tmp ) ;
9141: LD_VAR 0 6
9145: PPUSH
9146: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
9150: LD_VAR 0 6
9154: PPUSH
9155: LD_VAR 0 2
9159: PPUSH
9160: CALL_OW 250
9164: PPUSH
9165: LD_VAR 0 2
9169: PPUSH
9170: CALL_OW 251
9174: PPUSH
9175: CALL_OW 174
// end ; end ;
9179: LD_VAR 0 3
9183: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
9184: LD_INT 0
9186: PPUSH
9187: PPUSH
9188: PPUSH
// enable ;
9189: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
9190: LD_ADDR_VAR 0 6
9194: PUSH
9195: LD_VAR 0 3
9199: PPUSH
9200: CALL_OW 435
9204: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9205: LD_ADDR_VAR 0 5
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_VAR 0 1
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: LD_INT 34
9224: PUSH
9225: LD_VAR 0 2
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PPUSH
9238: CALL_OW 69
9242: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
9243: LD_VAR 0 5
9247: PUSH
9248: LD_VAR 0 3
9252: PPUSH
9253: CALL_OW 435
9257: AND
9258: PUSH
9259: LD_VAR 0 6
9263: AND
9264: IFFALSE 9297
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
9266: LD_VAR 0 5
9270: PUSH
9271: LD_INT 1
9273: ARRAY
9274: PPUSH
9275: LD_VAR 0 6
9279: PUSH
9280: LD_INT 1
9282: ARRAY
9283: PPUSH
9284: LD_VAR 0 6
9288: PUSH
9289: LD_INT 2
9291: ARRAY
9292: PPUSH
9293: CALL_OW 177
// end ;
9297: LD_VAR 0 4
9301: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
9302: LD_INT 0
9304: PPUSH
9305: PPUSH
9306: PPUSH
9307: PPUSH
9308: PPUSH
9309: PPUSH
9310: PPUSH
9311: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
9312: LD_ADDR_VAR 0 6
9316: PUSH
9317: LD_VAR 0 2
9321: PPUSH
9322: LD_INT 22
9324: PUSH
9325: LD_VAR 0 1
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 56
9336: PUSH
9337: EMPTY
9338: LIST
9339: PUSH
9340: LD_INT 24
9342: PUSH
9343: LD_INT 700
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 3
9352: PUSH
9353: LD_INT 60
9355: PUSH
9356: EMPTY
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: LD_INT 2
9365: PUSH
9366: LD_INT 25
9368: PUSH
9369: LD_INT 1
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 25
9378: PUSH
9379: LD_INT 5
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: PUSH
9386: LD_INT 25
9388: PUSH
9389: LD_INT 8
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 25
9398: PUSH
9399: LD_INT 9
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 70
9424: PUSH
9425: LD_EXP 48
9429: PUSH
9430: LD_EXP 49
9434: UNION
9435: DIFF
9436: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9437: LD_ADDR_VAR 0 7
9441: PUSH
9442: LD_VAR 0 2
9446: PPUSH
9447: LD_INT 22
9449: PUSH
9450: LD_VAR 0 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 30
9461: PUSH
9462: LD_INT 32
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 58
9471: PUSH
9472: EMPTY
9473: LIST
9474: PUSH
9475: LD_INT 24
9477: PUSH
9478: LD_INT 251
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: PPUSH
9491: CALL_OW 70
9495: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9496: LD_ADDR_VAR 0 9
9500: PUSH
9501: LD_VAR 0 2
9505: PPUSH
9506: LD_INT 22
9508: PUSH
9509: LD_VAR 0 1
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: LD_INT 2
9520: PUSH
9521: LD_INT 30
9523: PUSH
9524: LD_INT 4
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 30
9533: PUSH
9534: LD_INT 5
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 24
9548: PUSH
9549: LD_INT 251
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: LIST
9560: PPUSH
9561: CALL_OW 70
9565: ST_TO_ADDR
// if barrackList then
9566: LD_VAR 0 9
9570: IFFALSE 9726
// begin if turretList = 0 then
9572: LD_VAR 0 7
9576: PUSH
9577: LD_INT 0
9579: EQUAL
9580: IFFALSE 9618
// begin if soldiersList then
9582: LD_VAR 0 6
9586: IFFALSE 9616
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9588: LD_VAR 0 6
9592: PPUSH
9593: LD_VAR 0 9
9597: PUSH
9598: LD_INT 1
9600: PPUSH
9601: LD_VAR 0 9
9605: PPUSH
9606: CALL_OW 12
9610: ARRAY
9611: PPUSH
9612: CALL_OW 120
// end else
9616: GO 9726
// begin for i in barrackList do
9618: LD_ADDR_VAR 0 4
9622: PUSH
9623: LD_VAR 0 9
9627: PUSH
9628: FOR_IN
9629: IFFALSE 9724
// begin if not turretList then
9631: LD_VAR 0 7
9635: NOT
9636: IFFALSE 9642
// exit ;
9638: POP
9639: POP
9640: GO 9726
// insideUnits = UnitsInside ( i ) ;
9642: LD_ADDR_VAR 0 10
9646: PUSH
9647: LD_VAR 0 4
9651: PPUSH
9652: CALL_OW 313
9656: ST_TO_ADDR
// if insideUnits then
9657: LD_VAR 0 10
9661: IFFALSE 9722
// begin tmp := insideUnits [ 1 ] ;
9663: LD_ADDR_VAR 0 8
9667: PUSH
9668: LD_VAR 0 10
9672: PUSH
9673: LD_INT 1
9675: ARRAY
9676: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9677: LD_VAR 0 8
9681: PPUSH
9682: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9686: LD_VAR 0 8
9690: PPUSH
9691: LD_VAR 0 7
9695: PUSH
9696: LD_INT 1
9698: ARRAY
9699: PPUSH
9700: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9704: LD_ADDR_VAR 0 7
9708: PUSH
9709: LD_VAR 0 7
9713: PPUSH
9714: LD_INT 1
9716: PPUSH
9717: CALL_OW 3
9721: ST_TO_ADDR
// end ; end ;
9722: GO 9628
9724: POP
9725: POP
// end ; end ; end ;
9726: LD_VAR 0 3
9730: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9731: LD_INT 0
9733: PPUSH
9734: PPUSH
9735: PPUSH
9736: PPUSH
9737: PPUSH
9738: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9739: LD_ADDR_VAR 0 8
9743: PUSH
9744: LD_INT 22
9746: PUSH
9747: LD_VAR 0 1
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 21
9758: PUSH
9759: LD_INT 2
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 34
9768: PUSH
9769: LD_INT 52
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: PPUSH
9781: CALL_OW 69
9785: ST_TO_ADDR
// if not craneList then
9786: LD_VAR 0 8
9790: NOT
9791: IFFALSE 9795
// exit ;
9793: GO 10229
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9795: LD_ADDR_VAR 0 9
9799: PUSH
9800: LD_INT 22
9802: PUSH
9803: LD_VAR 0 1
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 21
9814: PUSH
9815: LD_INT 3
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: PUSH
9822: LD_INT 3
9824: PUSH
9825: LD_INT 24
9827: PUSH
9828: LD_INT 1000
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: LIST
9843: PUSH
9844: EMPTY
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9852: LD_VAR 0 9
9856: PUSH
9857: LD_VAR 0 8
9861: PPUSH
9862: LD_INT 24
9864: PUSH
9865: LD_INT 750
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PPUSH
9872: CALL_OW 72
9876: AND
9877: IFFALSE 9912
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9879: LD_VAR 0 8
9883: PPUSH
9884: LD_INT 24
9886: PUSH
9887: LD_INT 750
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 72
9898: PPUSH
9899: LD_VAR 0 9
9903: PUSH
9904: LD_INT 1
9906: ARRAY
9907: PPUSH
9908: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9912: LD_VAR 0 8
9916: PPUSH
9917: LD_INT 3
9919: PUSH
9920: LD_INT 24
9922: PUSH
9923: LD_INT 750
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PPUSH
9934: CALL_OW 72
9938: IFFALSE 9976
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9940: LD_VAR 0 8
9944: PPUSH
9945: LD_INT 3
9947: PUSH
9948: LD_INT 24
9950: PUSH
9951: LD_INT 750
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PPUSH
9962: CALL_OW 72
9966: PPUSH
9967: LD_VAR 0 2
9971: PPUSH
9972: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9976: LD_VAR 0 8
9980: PUSH
9981: LD_VAR 0 9
9985: PUSH
9986: LD_INT 0
9988: EQUAL
9989: AND
9990: PUSH
9991: LD_VAR 0 3
9995: AND
9996: IFFALSE 10043
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9998: LD_VAR 0 8
10002: PPUSH
10003: LD_VAR 0 3
10007: PUSH
10008: LD_INT 1
10010: ARRAY
10011: PPUSH
10012: LD_VAR 0 3
10016: PUSH
10017: LD_INT 2
10019: ARRAY
10020: PPUSH
10021: LD_VAR 0 3
10025: PUSH
10026: LD_INT 3
10028: ARRAY
10029: PPUSH
10030: LD_VAR 0 3
10034: PUSH
10035: LD_INT 4
10037: ARRAY
10038: PPUSH
10039: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10043: LD_ADDR_VAR 0 7
10047: PUSH
10048: LD_VAR 0 2
10052: PPUSH
10053: LD_INT 22
10055: PUSH
10056: LD_VAR 0 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 21
10067: PUSH
10068: LD_INT 2
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 34
10077: PUSH
10078: LD_INT 52
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 3
10087: PUSH
10088: LD_INT 24
10090: PUSH
10091: LD_INT 750
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: PPUSH
10108: CALL_OW 70
10112: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10113: LD_ADDR_VAR 0 6
10117: PUSH
10118: LD_VAR 0 2
10122: PPUSH
10123: LD_INT 22
10125: PUSH
10126: LD_VAR 0 1
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: LD_INT 2
10137: PUSH
10138: LD_INT 30
10140: PUSH
10141: LD_INT 0
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 30
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PPUSH
10167: CALL_OW 70
10171: ST_TO_ADDR
// if crane then
10172: LD_VAR 0 7
10176: IFFALSE 10229
// for i in crane do
10178: LD_ADDR_VAR 0 5
10182: PUSH
10183: LD_VAR 0 7
10187: PUSH
10188: FOR_IN
10189: IFFALSE 10227
// begin if dep then
10191: LD_VAR 0 6
10195: IFFALSE 10211
// ComMoveUnit ( i , dep ) ;
10197: LD_VAR 0 5
10201: PPUSH
10202: LD_VAR 0 6
10206: PPUSH
10207: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10211: LD_VAR 0 5
10215: PPUSH
10216: CALL_OW 311
10220: PPUSH
10221: CALL 80732 0 1
// end ;
10225: GO 10188
10227: POP
10228: POP
// end ;
10229: LD_VAR 0 4
10233: RET
// export function BuildBulldozer ; begin
10234: LD_INT 0
10236: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
10237: LD_INT 17
10239: PPUSH
10240: CALL_OW 302
10244: NOT
10245: PUSH
10246: LD_INT 17
10248: PPUSH
10249: CALL_OW 255
10253: PUSH
10254: LD_INT 3
10256: NONEQUAL
10257: OR
10258: IFFALSE 10262
// exit ;
10260: GO 10281
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
10262: LD_INT 17
10264: PPUSH
10265: LD_INT 24
10267: PPUSH
10268: LD_INT 1
10270: PPUSH
10271: LD_INT 1
10273: PPUSH
10274: LD_INT 53
10276: PPUSH
10277: CALL_OW 185
// end ;
10281: LD_VAR 0 1
10285: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
10286: LD_INT 0
10288: PPUSH
10289: PPUSH
10290: PPUSH
10291: PPUSH
10292: PPUSH
// if not bulldozer then
10293: LD_VAR 0 1
10297: NOT
10298: IFFALSE 10302
// exit ;
10300: GO 10584
// list := ListEnvironmentArea ( area ) ;
10302: LD_ADDR_VAR 0 5
10306: PUSH
10307: LD_VAR 0 2
10311: PPUSH
10312: CALL_OW 353
10316: ST_TO_ADDR
// tmp := [ ] ;
10317: LD_ADDR_VAR 0 6
10321: PUSH
10322: EMPTY
10323: ST_TO_ADDR
// for i = 1 to list do
10324: LD_ADDR_VAR 0 4
10328: PUSH
10329: DOUBLE
10330: LD_INT 1
10332: DEC
10333: ST_TO_ADDR
10334: LD_VAR 0 5
10338: PUSH
10339: FOR_TO
10340: IFFALSE 10438
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
10342: LD_VAR 0 5
10346: PUSH
10347: LD_VAR 0 4
10351: ARRAY
10352: PUSH
10353: LD_INT 1
10355: ARRAY
10356: PPUSH
10357: LD_VAR 0 5
10361: PUSH
10362: LD_VAR 0 4
10366: ARRAY
10367: PUSH
10368: LD_INT 2
10370: ARRAY
10371: PPUSH
10372: CALL_OW 554
10376: IFFALSE 10436
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10378: LD_ADDR_VAR 0 6
10382: PUSH
10383: LD_VAR 0 6
10387: PPUSH
10388: LD_VAR 0 6
10392: PUSH
10393: LD_INT 1
10395: PLUS
10396: PPUSH
10397: LD_VAR 0 5
10401: PUSH
10402: LD_VAR 0 4
10406: ARRAY
10407: PUSH
10408: LD_INT 1
10410: ARRAY
10411: PUSH
10412: LD_VAR 0 5
10416: PUSH
10417: LD_VAR 0 4
10421: ARRAY
10422: PUSH
10423: LD_INT 2
10425: ARRAY
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PPUSH
10431: CALL_OW 1
10435: ST_TO_ADDR
// end ;
10436: GO 10339
10438: POP
10439: POP
// ComStop ( bulldozer ) ;
10440: LD_VAR 0 1
10444: PPUSH
10445: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10449: LD_ADDR_VAR 0 7
10453: PUSH
10454: LD_VAR 0 1
10458: PPUSH
10459: CALL_OW 250
10463: PUSH
10464: LD_VAR 0 1
10468: PPUSH
10469: CALL_OW 251
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: ST_TO_ADDR
// for i = tmp downto 1 do
10478: LD_ADDR_VAR 0 4
10482: PUSH
10483: DOUBLE
10484: LD_VAR 0 6
10488: INC
10489: ST_TO_ADDR
10490: LD_INT 1
10492: PUSH
10493: FOR_DOWNTO
10494: IFFALSE 10582
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10496: LD_ADDR_VAR 0 7
10500: PUSH
10501: LD_VAR 0 7
10505: PUSH
10506: LD_INT 1
10508: ARRAY
10509: PPUSH
10510: LD_VAR 0 7
10514: PUSH
10515: LD_INT 2
10517: ARRAY
10518: PPUSH
10519: LD_VAR 0 6
10523: PPUSH
10524: CALL 10685 0 3
10528: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10529: LD_VAR 0 1
10533: PPUSH
10534: LD_VAR 0 7
10538: PUSH
10539: LD_INT 1
10541: ARRAY
10542: PPUSH
10543: LD_VAR 0 7
10547: PUSH
10548: LD_INT 2
10550: ARRAY
10551: PPUSH
10552: CALL 10589 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10556: LD_ADDR_VAR 0 6
10560: PUSH
10561: LD_VAR 0 6
10565: PPUSH
10566: LD_VAR 0 7
10570: PUSH
10571: LD_INT 3
10573: ARRAY
10574: PPUSH
10575: CALL_OW 3
10579: ST_TO_ADDR
// end ;
10580: GO 10493
10582: POP
10583: POP
// end ;
10584: LD_VAR 0 3
10588: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10589: LD_INT 0
10591: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10592: LD_VAR 0 2
10596: PPUSH
10597: LD_VAR 0 3
10601: PPUSH
10602: CALL_OW 351
10606: PUSH
10607: LD_VAR 0 2
10611: PPUSH
10612: LD_VAR 0 3
10616: PPUSH
10617: CALL_OW 554
10621: AND
10622: PUSH
10623: LD_VAR 0 2
10627: PPUSH
10628: LD_VAR 0 3
10632: PPUSH
10633: CALL_OW 488
10637: AND
10638: PUSH
10639: LD_VAR 0 2
10643: PPUSH
10644: LD_VAR 0 3
10648: PPUSH
10649: CALL_OW 428
10653: PUSH
10654: LD_INT 1
10656: NEG
10657: EQUAL
10658: AND
10659: IFFALSE 10680
// AddComMoveXY ( bulldozer , x , y ) ;
10661: LD_VAR 0 1
10665: PPUSH
10666: LD_VAR 0 2
10670: PPUSH
10671: LD_VAR 0 3
10675: PPUSH
10676: CALL_OW 171
// end ;
10680: LD_VAR 0 4
10684: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
10685: LD_INT 0
10687: PPUSH
10688: PPUSH
10689: PPUSH
10690: PPUSH
10691: PPUSH
10692: PPUSH
10693: PPUSH
// dist := 99999 ;
10694: LD_ADDR_VAR 0 6
10698: PUSH
10699: LD_INT 99999
10701: ST_TO_ADDR
// for i = 1 to list do
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: DOUBLE
10708: LD_INT 1
10710: DEC
10711: ST_TO_ADDR
10712: LD_VAR 0 3
10716: PUSH
10717: FOR_TO
10718: IFFALSE 10856
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
10720: LD_ADDR_VAR 0 7
10724: PUSH
10725: LD_VAR 0 1
10729: PPUSH
10730: LD_VAR 0 2
10734: PPUSH
10735: LD_VAR 0 3
10739: PUSH
10740: LD_VAR 0 5
10744: ARRAY
10745: PUSH
10746: LD_INT 1
10748: ARRAY
10749: PPUSH
10750: LD_VAR 0 3
10754: PUSH
10755: LD_VAR 0 5
10759: ARRAY
10760: PUSH
10761: LD_INT 2
10763: ARRAY
10764: PPUSH
10765: CALL_OW 298
10769: ST_TO_ADDR
// if d = 0 then
10770: LD_VAR 0 7
10774: PUSH
10775: LD_INT 0
10777: EQUAL
10778: IFFALSE 10782
// continue ;
10780: GO 10717
// if d < dist then
10782: LD_VAR 0 7
10786: PUSH
10787: LD_VAR 0 6
10791: LESS
10792: IFFALSE 10854
// begin _x := list [ i ] [ 1 ] ;
10794: LD_ADDR_VAR 0 8
10798: PUSH
10799: LD_VAR 0 3
10803: PUSH
10804: LD_VAR 0 5
10808: ARRAY
10809: PUSH
10810: LD_INT 1
10812: ARRAY
10813: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
10814: LD_ADDR_VAR 0 9
10818: PUSH
10819: LD_VAR 0 3
10823: PUSH
10824: LD_VAR 0 5
10828: ARRAY
10829: PUSH
10830: LD_INT 2
10832: ARRAY
10833: ST_TO_ADDR
// _i := i ;
10834: LD_ADDR_VAR 0 10
10838: PUSH
10839: LD_VAR 0 5
10843: ST_TO_ADDR
// dist := d ;
10844: LD_ADDR_VAR 0 6
10848: PUSH
10849: LD_VAR 0 7
10853: ST_TO_ADDR
// end ; end ;
10854: GO 10717
10856: POP
10857: POP
// result := [ _x , _y , _i , dist ] ;
10858: LD_ADDR_VAR 0 4
10862: PUSH
10863: LD_VAR 0 8
10867: PUSH
10868: LD_VAR 0 9
10872: PUSH
10873: LD_VAR 0 10
10877: PUSH
10878: LD_VAR 0 6
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: ST_TO_ADDR
// end ; end_of_file
10889: LD_VAR 0 4
10893: RET
// export function Action ; begin
10894: LD_INT 0
10896: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
10897: LD_INT 66
10899: PPUSH
10900: LD_INT 4
10902: PPUSH
10903: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10907: LD_INT 22
10909: PUSH
10910: LD_INT 1
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 25
10919: PUSH
10920: LD_INT 2
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: PPUSH
10931: CALL_OW 69
10935: PUSH
10936: LD_INT 0
10938: EQUAL
10939: IFFALSE 10953
// SetClass ( JMM , 2 ) ;
10941: LD_EXP 1
10945: PPUSH
10946: LD_INT 2
10948: PPUSH
10949: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10953: LD_STRING M1
10955: PPUSH
10956: CALL_OW 337
// case Difficulty of 1 :
10960: LD_OWVAR 67
10964: PUSH
10965: LD_INT 1
10967: DOUBLE
10968: EQUAL
10969: IFTRUE 10973
10971: GO 10983
10973: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10974: LD_STRING M1-1
10976: PPUSH
10977: CALL_OW 337
10981: GO 11038
10983: LD_INT 2
10985: DOUBLE
10986: EQUAL
10987: IFTRUE 10991
10989: GO 11001
10991: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10992: LD_STRING M1-2
10994: PPUSH
10995: CALL_OW 337
10999: GO 11038
11001: LD_INT 3
11003: DOUBLE
11004: EQUAL
11005: IFTRUE 11009
11007: GO 11019
11009: POP
// ChangeMissionObjectives ( M1-3 ) ; 4 :
11010: LD_STRING M1-3
11012: PPUSH
11013: CALL_OW 337
11017: GO 11038
11019: LD_INT 4
11021: DOUBLE
11022: EQUAL
11023: IFTRUE 11027
11025: GO 11037
11027: POP
// ChangeMissionObjectives ( M1-4 ) ; end ;
11028: LD_STRING M1-4
11030: PPUSH
11031: CALL_OW 337
11035: GO 11038
11037: POP
// ChangeMissionObjectives ( M1cont ) ;
11038: LD_STRING M1cont
11040: PPUSH
11041: CALL_OW 337
// SaveForQuickRestart ;
11045: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
11049: LD_INT 525
11051: PPUSH
11052: LD_INT 700
11054: PPUSH
11055: CALL_OW 12
11059: PPUSH
11060: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
11064: LD_INT 5
11066: PPUSH
11067: LD_INT 82
11069: PPUSH
11070: LD_INT 38
11072: PPUSH
11073: LD_INT 10
11075: PPUSH
11076: LD_INT 1
11078: PPUSH
11079: CALL_OW 56
// wait ( 0 0$14 ) ;
11083: LD_INT 490
11085: PPUSH
11086: CALL_OW 67
// firstCrateSpawn := true ;
11090: LD_ADDR_EXP 41
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// end ;
11098: LD_VAR 0 1
11102: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
11103: LD_EXP 41
11107: IFFALSE 11496
11109: GO 11111
11111: DISABLE
11112: LD_INT 0
11114: PPUSH
// begin if IsOk ( Lisa ) then
11115: LD_EXP 2
11119: PPUSH
11120: CALL_OW 302
11124: IFFALSE 11140
// Say ( Lisa , DR0-Lisa-1 ) else
11126: LD_EXP 2
11130: PPUSH
11131: LD_STRING DR0-Lisa-1
11133: PPUSH
11134: CALL_OW 88
11138: GO 11286
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11140: LD_INT 22
11142: PUSH
11143: LD_INT 1
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 21
11152: PUSH
11153: LD_INT 1
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 26
11162: PUSH
11163: LD_INT 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: LD_INT 25
11175: PUSH
11176: LD_INT 1
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: LD_INT 25
11185: PUSH
11186: LD_INT 2
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 25
11195: PUSH
11196: LD_INT 3
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 25
11205: PUSH
11206: LD_INT 4
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: PPUSH
11226: CALL_OW 69
11230: PUSH
11231: LD_EXP 1
11235: PUSH
11236: LD_EXP 8
11240: PUSH
11241: LD_EXP 5
11245: PUSH
11246: LD_EXP 6
11250: PUSH
11251: LD_EXP 7
11255: PUSH
11256: LD_EXP 4
11260: PUSH
11261: LD_EXP 3
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: DIFF
11275: PPUSH
11276: LD_STRING DR0-Sol1-1
11278: PPUSH
11279: LD_STRING DR0-Sol1-1
11281: PPUSH
11282: CALL 7191 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11286: LD_ADDR_VAR 0 1
11290: PUSH
11291: LD_INT 22
11293: PUSH
11294: LD_INT 1
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: LD_INT 21
11303: PUSH
11304: LD_INT 1
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 26
11313: PUSH
11314: LD_INT 1
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 2
11323: PUSH
11324: LD_INT 25
11326: PUSH
11327: LD_INT 1
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: LD_INT 25
11336: PUSH
11337: LD_INT 2
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 25
11346: PUSH
11347: LD_INT 3
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 25
11356: PUSH
11357: LD_INT 4
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: PPUSH
11377: CALL_OW 69
11381: PUSH
11382: LD_EXP 1
11386: PUSH
11387: LD_EXP 8
11391: PUSH
11392: LD_EXP 5
11396: PUSH
11397: LD_EXP 2
11401: PUSH
11402: LD_EXP 6
11406: PUSH
11407: LD_EXP 7
11411: PUSH
11412: LD_EXP 4
11416: PUSH
11417: LD_EXP 3
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: DIFF
11432: PPUSH
11433: LD_STRING DR0-Sol2-1
11435: PPUSH
11436: LD_STRING DR0-Sol2-1
11438: PPUSH
11439: CALL 7191 0 3
11443: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11444: LD_EXP 4
11448: PPUSH
11449: CALL_OW 302
11453: IFFALSE 11467
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11455: LD_EXP 4
11459: PPUSH
11460: LD_STRING DR0-Cyrus-1
11462: PPUSH
11463: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11467: LD_EXP 2
11471: PPUSH
11472: CALL_OW 302
11476: PUSH
11477: LD_VAR 0 1
11481: OR
11482: IFFALSE 11496
// Say ( JMM , DR0-JMM-1 ) ;
11484: LD_EXP 1
11488: PPUSH
11489: LD_STRING DR0-JMM-1
11491: PPUSH
11492: CALL_OW 88
// end ;
11496: PPOPN 1
11498: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11499: LD_EXP 5
11503: PPUSH
11504: CALL_OW 302
11508: PUSH
11509: LD_INT 22
11511: PUSH
11512: LD_INT 1
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 25
11521: PUSH
11522: LD_INT 16
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 69
11537: PUSH
11538: LD_INT 0
11540: GREATER
11541: AND
11542: PUSH
11543: LD_INT 1
11545: PPUSH
11546: CALL_OW 463
11550: NOT
11551: AND
11552: IFFALSE 11830
11554: GO 11556
11556: DISABLE
// begin DialogueOn ;
11557: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11561: LD_EXP 5
11565: PPUSH
11566: LD_STRING D10-Frank-1
11568: PPUSH
11569: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11573: LD_INT 22
11575: PUSH
11576: LD_INT 1
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 21
11585: PUSH
11586: LD_INT 1
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: LD_INT 2
11595: PUSH
11596: LD_INT 25
11598: PUSH
11599: LD_INT 1
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 25
11608: PUSH
11609: LD_INT 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 25
11618: PUSH
11619: LD_INT 3
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 25
11628: PUSH
11629: LD_INT 4
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: LIST
11647: PPUSH
11648: CALL_OW 69
11652: PUSH
11653: LD_EXP 1
11657: PUSH
11658: LD_EXP 5
11662: PUSH
11663: LD_EXP 2
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: DIFF
11673: PPUSH
11674: LD_STRING D10-Sol1-1
11676: PPUSH
11677: LD_STRING D10-FSol1-1
11679: PPUSH
11680: CALL 7191 0 3
// Say ( Frank , D10-Frank-2 ) ;
11684: LD_EXP 5
11688: PPUSH
11689: LD_STRING D10-Frank-2
11691: PPUSH
11692: CALL_OW 88
// if IsOk ( Lisa ) then
11696: LD_EXP 2
11700: PPUSH
11701: CALL_OW 302
11705: IFFALSE 11721
// Say ( Lisa , D10-Lisa-2 ) else
11707: LD_EXP 2
11711: PPUSH
11712: LD_STRING D10-Lisa-2
11714: PPUSH
11715: CALL_OW 88
11719: GO 11826
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11721: LD_INT 22
11723: PUSH
11724: LD_INT 1
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 21
11733: PUSH
11734: LD_INT 1
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 2
11743: PUSH
11744: LD_INT 25
11746: PUSH
11747: LD_INT 1
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 25
11756: PUSH
11757: LD_INT 2
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 3
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 25
11776: PUSH
11777: LD_INT 4
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: LIST
11795: PPUSH
11796: CALL_OW 69
11800: PUSH
11801: LD_EXP 1
11805: PUSH
11806: LD_EXP 5
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: DIFF
11815: PPUSH
11816: LD_STRING D10-Sol1-2
11818: PPUSH
11819: LD_STRING D10-FSol1-2
11821: PPUSH
11822: CALL 7191 0 3
// DialogueOff ;
11826: CALL_OW 7
// end ;
11830: END
// every 10 10$30 trigger not InBattle ( 1 ) do
11831: LD_INT 1
11833: PPUSH
11834: CALL_OW 463
11838: NOT
11839: IFFALSE 12122
11841: GO 11843
11843: DISABLE
// begin HarrisonSupport ;
11844: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11848: LD_EXP 18
11852: PPUSH
11853: CALL_OW 310
11857: PPUSH
11858: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11862: LD_EXP 18
11866: PPUSH
11867: LD_STRING DEng-Eng1-1
11869: PPUSH
11870: CALL_OW 88
// wait ( 1 1$0 ) ;
11874: LD_INT 2100
11876: PPUSH
11877: CALL_OW 67
// DialogueOn ;
11881: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11885: LD_EXP 15
11889: PPUSH
11890: LD_STRING DRem-Har-1
11892: PPUSH
11893: CALL_OW 94
// if contactWithRussian then
11897: LD_EXP 23
11901: IFFALSE 11917
// Say ( JMM , DRem-JMM-1 ) else
11903: LD_EXP 1
11907: PPUSH
11908: LD_STRING DRem-JMM-1
11910: PPUSH
11911: CALL_OW 88
11915: GO 11929
// Say ( JMM , DRem-JMM-1a ) ;
11917: LD_EXP 1
11921: PPUSH
11922: LD_STRING DRem-JMM-1a
11924: PPUSH
11925: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
11929: LD_EXP 15
11933: PPUSH
11934: LD_STRING DRem-Har-2
11936: PPUSH
11937: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11941: LD_STRING DenisInDelta
11943: PPUSH
11944: LD_INT 0
11946: PPUSH
11947: CALL_OW 30
11951: IFFALSE 11967
// Say ( JMM , DRem-JMM-2 ) else
11953: LD_EXP 1
11957: PPUSH
11958: LD_STRING DRem-JMM-2
11960: PPUSH
11961: CALL_OW 88
11965: GO 11979
// Say ( JMM , DRem-JMM-2a ) ;
11967: LD_EXP 1
11971: PPUSH
11972: LD_STRING DRem-JMM-2a
11974: PPUSH
11975: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
11979: LD_EXP 15
11983: PPUSH
11984: LD_STRING DRem-Har-3
11986: PPUSH
11987: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11991: LD_EXP 1
11995: PPUSH
11996: LD_STRING DRem-JMM-3
11998: PPUSH
11999: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12003: LD_EXP 15
12007: PPUSH
12008: LD_STRING DRem-Har-4
12010: PPUSH
12011: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12015: LD_STRING DenisInDelta
12017: PPUSH
12018: LD_INT 0
12020: PPUSH
12021: CALL_OW 30
12025: IFFALSE 12085
// begin Say ( JMM , DRem-JMM-4 ) ;
12027: LD_EXP 1
12031: PPUSH
12032: LD_STRING DRem-JMM-4
12034: PPUSH
12035: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12039: LD_EXP 15
12043: PPUSH
12044: LD_STRING DRem-Har-5
12046: PPUSH
12047: CALL_OW 94
// DialogueOff ;
12051: CALL_OW 7
// wait ( 4 4$00 ) ;
12055: LD_INT 8400
12057: PPUSH
12058: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
12062: LD_INT 35
12064: PPUSH
12065: CALL_OW 67
// until not InBattle ( 1 ) ;
12069: LD_INT 1
12071: PPUSH
12072: CALL_OW 463
12076: NOT
12077: IFFALSE 12062
// SpawnDenis ;
12079: CALL 12123 0 0
// end else
12083: GO 12122
// begin DialogueOff ;
12085: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12089: LD_INT 36
12091: PPUSH
12092: LD_INT 1
12094: PPUSH
12095: LD_INT 1
12097: PPUSH
12098: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12102: LD_INT 15
12104: PPUSH
12105: LD_INT 1
12107: PPUSH
12108: LD_INT 1
12110: PPUSH
12111: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12115: LD_STRING MR
12117: PPUSH
12118: CALL_OW 337
// end ; end ;
12122: END
// export function SpawnDenis ; var tmp ; begin
12123: LD_INT 0
12125: PPUSH
12126: PPUSH
// PrepareDenis ;
12127: CALL 2244 0 0
// if not Denis then
12131: LD_EXP 9
12135: NOT
12136: IFFALSE 12140
// exit ;
12138: GO 12361
// CenterNowOnUnits ( Denis ) ;
12140: LD_EXP 9
12144: PPUSH
12145: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
12149: LD_ADDR_VAR 0 2
12153: PUSH
12154: LD_INT 22
12156: PUSH
12157: LD_INT 1
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PPUSH
12164: CALL_OW 69
12168: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
12169: LD_EXP 9
12173: PPUSH
12174: LD_VAR 0 2
12178: PPUSH
12179: LD_EXP 9
12183: PPUSH
12184: CALL_OW 74
12188: PPUSH
12189: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
12193: LD_INT 35
12195: PPUSH
12196: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
12200: LD_INT 22
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 91
12212: PUSH
12213: LD_EXP 9
12217: PUSH
12218: LD_INT 10
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PPUSH
12230: CALL_OW 69
12234: IFFALSE 12193
// SetSide ( Denis , 1 ) ;
12236: LD_EXP 9
12240: PPUSH
12241: LD_INT 1
12243: PPUSH
12244: CALL_OW 235
// DialogueOn ;
12248: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12252: LD_EXP 9
12256: PPUSH
12257: LD_STRING DDen-Den-1
12259: PPUSH
12260: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12264: LD_EXP 1
12268: PPUSH
12269: LD_STRING DDen-JMM-1
12271: PPUSH
12272: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12276: LD_EXP 9
12280: PPUSH
12281: LD_STRING DDen-Den-2
12283: PPUSH
12284: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12288: LD_EXP 1
12292: PPUSH
12293: LD_STRING DDen-JMM-2
12295: PPUSH
12296: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12300: LD_EXP 9
12304: PPUSH
12305: LD_STRING DDen-Den-3
12307: PPUSH
12308: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12312: LD_EXP 1
12316: PPUSH
12317: LD_STRING DDen-JMM-3
12319: PPUSH
12320: CALL_OW 88
// DialogueOff ;
12324: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12328: LD_INT 36
12330: PPUSH
12331: LD_INT 1
12333: PPUSH
12334: LD_INT 1
12336: PPUSH
12337: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12341: LD_INT 15
12343: PPUSH
12344: LD_INT 1
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12354: LD_STRING MR
12356: PPUSH
12357: CALL_OW 337
// end ;
12361: LD_VAR 0 1
12365: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
12366: LD_INT 22
12368: PUSH
12369: LD_INT 1
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 30
12378: PUSH
12379: LD_INT 15
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PPUSH
12390: CALL_OW 69
12394: PUSH
12395: LD_EXP 9
12399: PPUSH
12400: CALL_OW 302
12404: AND
12405: PUSH
12406: LD_INT 1
12408: PPUSH
12409: CALL_OW 463
12413: NOT
12414: AND
12415: IFFALSE 12444
12417: GO 12419
12419: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12420: LD_EXP 9
12424: PPUSH
12425: LD_STRING DR1-Den-1
12427: PPUSH
12428: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12432: LD_EXP 1
12436: PPUSH
12437: LD_STRING DR1-JMM-1
12439: PPUSH
12440: CALL_OW 88
// end ;
12444: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12445: LD_INT 15
12447: PPUSH
12448: LD_INT 1
12450: PPUSH
12451: CALL_OW 321
12455: PUSH
12456: LD_INT 2
12458: EQUAL
12459: PUSH
12460: LD_EXP 9
12464: PPUSH
12465: CALL_OW 302
12469: AND
12470: PUSH
12471: LD_INT 1
12473: PPUSH
12474: CALL_OW 463
12478: NOT
12479: AND
12480: IFFALSE 12689
12482: GO 12484
12484: DISABLE
// begin DialogueOn ;
12485: CALL_OW 6
// if IsOK ( Denis ) then
12489: LD_EXP 9
12493: PPUSH
12494: CALL_OW 302
12498: IFFALSE 12514
// Say ( Denis , DR2-Den-1 ) else
12500: LD_EXP 9
12504: PPUSH
12505: LD_STRING DR2-Den-1
12507: PPUSH
12508: CALL_OW 88
12512: GO 12573
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12514: LD_INT 22
12516: PUSH
12517: LD_INT 1
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 21
12526: PUSH
12527: LD_INT 1
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 25
12536: PUSH
12537: LD_INT 4
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: LIST
12548: PPUSH
12549: CALL_OW 69
12553: PUSH
12554: LD_EXP 1
12558: PUSH
12559: EMPTY
12560: LIST
12561: DIFF
12562: PPUSH
12563: LD_STRING DR2-Sci1-1
12565: PPUSH
12566: LD_STRING DR2-FSci1-1
12568: PPUSH
12569: CALL 7191 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12573: LD_EXP 1
12577: PPUSH
12578: LD_STRING DR2-JMM-1
12580: PPUSH
12581: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12585: LD_INT 22
12587: PUSH
12588: LD_INT 1
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PUSH
12595: LD_INT 21
12597: PUSH
12598: LD_INT 1
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 26
12607: PUSH
12608: LD_INT 1
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: LD_INT 23
12617: PUSH
12618: LD_INT 1
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PPUSH
12631: CALL_OW 69
12635: PUSH
12636: LD_EXP 1
12640: PUSH
12641: LD_EXP 9
12645: PUSH
12646: LD_EXP 8
12650: PUSH
12651: LD_EXP 5
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: DIFF
12662: PPUSH
12663: LD_STRING DR2-Sol1-1
12665: PPUSH
12666: LD_STRING 
12668: PPUSH
12669: CALL 7191 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12673: LD_EXP 1
12677: PPUSH
12678: LD_STRING DR2-JMM-2
12680: PPUSH
12681: CALL_OW 88
// DialogueOff ;
12685: CALL_OW 7
// end ;
12689: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
12690: LD_INT 22
12692: PUSH
12693: LD_INT 1
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 30
12702: PUSH
12703: LD_INT 36
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 69
12718: PUSH
12719: LD_INT 0
12721: EQUAL
12722: PUSH
12723: LD_INT 22
12725: PUSH
12726: LD_INT 1
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: LD_INT 21
12735: PUSH
12736: LD_INT 2
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: LD_INT 33
12745: PUSH
12746: LD_INT 2
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: PUSH
12763: LD_INT 0
12765: GREATER
12766: AND
12767: PUSH
12768: LD_EXP 24
12772: PUSH
12773: LD_INT 0
12775: EQUAL
12776: AND
12777: PUSH
12778: LD_INT 1
12780: PPUSH
12781: CALL_OW 463
12785: NOT
12786: AND
12787: IFFALSE 12924
12789: GO 12791
12791: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
12792: LD_INT 22
12794: PUSH
12795: LD_INT 1
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 21
12804: PUSH
12805: LD_INT 1
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 25
12814: PUSH
12815: LD_INT 3
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 26
12824: PUSH
12825: LD_INT 1
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PPUSH
12838: CALL_OW 69
12842: PUSH
12843: LD_EXP 1
12847: PUSH
12848: LD_EXP 6
12852: PUSH
12853: LD_EXP 7
12857: PUSH
12858: LD_EXP 9
12862: PUSH
12863: LD_EXP 16
12867: PUSH
12868: LD_EXP 3
12872: PUSH
12873: LD_EXP 4
12877: PUSH
12878: LD_EXP 2
12882: PUSH
12883: LD_EXP 5
12887: PUSH
12888: LD_EXP 8
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: DIFF
12905: PPUSH
12906: LD_STRING D3a-Mech1-1
12908: PPUSH
12909: LD_STRING 
12911: PPUSH
12912: CALL 7191 0 3
// firstTower = 2 ;
12916: LD_ADDR_EXP 24
12920: PUSH
12921: LD_INT 2
12923: ST_TO_ADDR
// end ;
12924: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12925: LD_INT 22
12927: PUSH
12928: LD_INT 3
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: LD_INT 21
12937: PUSH
12938: LD_INT 3
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PPUSH
12949: CALL_OW 69
12953: PUSH
12954: LD_INT 0
12956: EQUAL
12957: IFFALSE 13088
12959: GO 12961
12961: DISABLE
12962: LD_INT 0
12964: PPUSH
// begin stop_talking := true ;
12965: LD_ADDR_OWVAR 56
12969: PUSH
12970: LD_INT 1
12972: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12973: LD_ADDR_VAR 0 1
12977: PUSH
12978: LD_INT 22
12980: PUSH
12981: LD_INT 1
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 21
12990: PUSH
12991: LD_INT 1
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 2
13000: PUSH
13001: LD_INT 25
13003: PUSH
13004: LD_INT 1
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PUSH
13011: LD_INT 25
13013: PUSH
13014: LD_INT 2
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: LD_INT 25
13023: PUSH
13024: LD_INT 3
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PUSH
13031: LD_INT 25
13033: PUSH
13034: LD_INT 4
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: LIST
13052: PPUSH
13053: CALL_OW 69
13057: PUSH
13058: FOR_IN
13059: IFFALSE 13078
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
13061: LD_VAR 0 1
13065: PPUSH
13066: LD_INT 1
13068: PPUSH
13069: LD_INT 7500
13071: PPUSH
13072: CALL_OW 591
13076: GO 13058
13078: POP
13079: POP
// stop_talking := false ;
13080: LD_ADDR_OWVAR 56
13084: PUSH
13085: LD_INT 0
13087: ST_TO_ADDR
// end ;
13088: PPOPN 1
13090: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13091: LD_INT 22
13093: PUSH
13094: LD_INT 1
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: PUSH
13101: LD_INT 30
13103: PUSH
13104: LD_INT 36
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PPUSH
13115: CALL_OW 69
13119: PUSH
13120: LD_INT 22
13122: PUSH
13123: LD_INT 1
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PUSH
13130: LD_INT 21
13132: PUSH
13133: LD_INT 2
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 33
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: LIST
13154: PPUSH
13155: CALL_OW 69
13159: AND
13160: PUSH
13161: CALL 13713 0 0
13165: AND
13166: PUSH
13167: LD_INT 1
13169: PPUSH
13170: CALL_OW 463
13174: NOT
13175: AND
13176: IFFALSE 13710
13178: GO 13180
13180: DISABLE
13181: LD_INT 0
13183: PPUSH
13184: PPUSH
13185: PPUSH
13186: PPUSH
13187: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13188: LD_ADDR_VAR 0 3
13192: PUSH
13193: LD_INT 22
13195: PUSH
13196: LD_INT 1
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 30
13205: PUSH
13206: LD_INT 36
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PPUSH
13217: CALL_OW 69
13221: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13222: LD_ADDR_VAR 0 4
13226: PUSH
13227: LD_INT 22
13229: PUSH
13230: LD_INT 1
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 21
13239: PUSH
13240: LD_INT 2
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 33
13249: PUSH
13250: LD_INT 2
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: LIST
13261: PPUSH
13262: CALL_OW 69
13266: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13267: LD_ADDR_VAR 0 5
13271: PUSH
13272: EMPTY
13273: ST_TO_ADDR
// for i in tmpControlTowers do
13274: LD_ADDR_VAR 0 1
13278: PUSH
13279: LD_VAR 0 3
13283: PUSH
13284: FOR_IN
13285: IFFALSE 13708
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
13287: LD_EXP 1
13291: PPUSH
13292: CALL_OW 310
13296: PUSH
13297: LD_VAR 0 1
13301: EQUAL
13302: PUSH
13303: LD_EXP 1
13307: PPUSH
13308: CALL_OW 257
13312: PUSH
13313: LD_INT 3
13315: EQUAL
13316: AND
13317: IFFALSE 13451
// begin InGameOn ;
13319: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13323: LD_VAR 0 4
13327: PUSH
13328: LD_INT 1
13330: ARRAY
13331: PPUSH
13332: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13336: LD_EXP 1
13340: PPUSH
13341: LD_STRING D4a-JMM-1
13343: PPUSH
13344: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13348: LD_VAR 0 4
13352: PUSH
13353: LD_INT 1
13355: ARRAY
13356: PPUSH
13357: LD_EXP 1
13361: PPUSH
13362: CALL_OW 53
// wait ( 0 0$1 ) ;
13366: LD_INT 35
13368: PPUSH
13369: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13373: LD_VAR 0 4
13377: PUSH
13378: LD_INT 1
13380: ARRAY
13381: PPUSH
13382: LD_VAR 0 4
13386: PUSH
13387: LD_INT 1
13389: ARRAY
13390: PPUSH
13391: CALL_OW 250
13395: PUSH
13396: LD_INT 3
13398: PLUS
13399: PPUSH
13400: LD_VAR 0 4
13404: PUSH
13405: LD_INT 1
13407: ARRAY
13408: PPUSH
13409: CALL_OW 251
13413: PUSH
13414: LD_INT 2
13416: MINUS
13417: PPUSH
13418: CALL_OW 111
// wait ( 0 0$2 ) ;
13422: LD_INT 70
13424: PPUSH
13425: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13429: LD_EXP 1
13433: PPUSH
13434: LD_STRING D4b-JMM-1
13436: PPUSH
13437: CALL_OW 88
// InGameOff ;
13441: CALL_OW 9
// exit ;
13445: POP
13446: POP
13447: GO 13710
// end else
13449: GO 13706
// begin InGameOn ;
13451: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13455: LD_ADDR_VAR 0 5
13459: PUSH
13460: LD_VAR 0 1
13464: PPUSH
13465: CALL_OW 313
13469: PPUSH
13470: LD_INT 25
13472: PUSH
13473: LD_INT 3
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 72
13484: ST_TO_ADDR
// if not tmpMechanicInside then
13485: LD_VAR 0 5
13489: NOT
13490: IFFALSE 13494
// continue ;
13492: GO 13284
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13494: LD_VAR 0 5
13498: PUSH
13499: LD_INT 1
13501: ARRAY
13502: PPUSH
13503: CALL_OW 258
13507: PUSH
13508: LD_INT 1
13510: EQUAL
13511: IFFALSE 13531
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13513: LD_VAR 0 5
13517: PUSH
13518: LD_INT 1
13520: ARRAY
13521: PPUSH
13522: LD_STRING D4a-Mech1-1
13524: PPUSH
13525: CALL_OW 88
13529: GO 13547
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13531: LD_VAR 0 5
13535: PUSH
13536: LD_INT 1
13538: ARRAY
13539: PPUSH
13540: LD_STRING D4a-FMech1-1
13542: PPUSH
13543: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13547: LD_VAR 0 4
13551: PUSH
13552: LD_INT 1
13554: ARRAY
13555: PPUSH
13556: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13560: LD_VAR 0 4
13564: PUSH
13565: LD_INT 1
13567: ARRAY
13568: PPUSH
13569: LD_VAR 0 5
13573: PUSH
13574: LD_INT 1
13576: ARRAY
13577: PPUSH
13578: CALL_OW 53
// wait ( 0 0$1 ) ;
13582: LD_INT 35
13584: PPUSH
13585: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13589: LD_VAR 0 4
13593: PUSH
13594: LD_INT 1
13596: ARRAY
13597: PPUSH
13598: LD_VAR 0 4
13602: PUSH
13603: LD_INT 1
13605: ARRAY
13606: PPUSH
13607: CALL_OW 250
13611: PUSH
13612: LD_INT 3
13614: PLUS
13615: PPUSH
13616: LD_VAR 0 4
13620: PUSH
13621: LD_INT 1
13623: ARRAY
13624: PPUSH
13625: CALL_OW 251
13629: PUSH
13630: LD_INT 2
13632: MINUS
13633: PPUSH
13634: CALL_OW 111
// wait ( 0 0$2 ) ;
13638: LD_INT 70
13640: PPUSH
13641: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13645: LD_VAR 0 5
13649: PUSH
13650: LD_INT 1
13652: ARRAY
13653: PPUSH
13654: CALL_OW 258
13658: PUSH
13659: LD_INT 1
13661: EQUAL
13662: IFFALSE 13682
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
13664: LD_VAR 0 5
13668: PUSH
13669: LD_INT 1
13671: ARRAY
13672: PPUSH
13673: LD_STRING D4b-Mech1-1
13675: PPUSH
13676: CALL_OW 88
13680: GO 13698
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13682: LD_VAR 0 5
13686: PUSH
13687: LD_INT 1
13689: ARRAY
13690: PPUSH
13691: LD_STRING D4b-FMech1-1
13693: PPUSH
13694: CALL_OW 88
// InGameOff ;
13698: CALL_OW 9
// exit ;
13702: POP
13703: POP
13704: GO 13710
// end ; end ;
13706: GO 13284
13708: POP
13709: POP
// end ;
13710: PPOPN 5
13712: END
// function CheckMehInside ; var i , j , tmp ; begin
13713: LD_INT 0
13715: PPUSH
13716: PPUSH
13717: PPUSH
13718: PPUSH
// result := false ;
13719: LD_ADDR_VAR 0 1
13723: PUSH
13724: LD_INT 0
13726: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13727: LD_ADDR_VAR 0 4
13731: PUSH
13732: LD_INT 22
13734: PUSH
13735: LD_INT 1
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PUSH
13742: LD_INT 30
13744: PUSH
13745: LD_INT 36
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PPUSH
13756: CALL_OW 69
13760: ST_TO_ADDR
// if not tmp then
13761: LD_VAR 0 4
13765: NOT
13766: IFFALSE 13770
// exit ;
13768: GO 13834
// for i in tmp do
13770: LD_ADDR_VAR 0 2
13774: PUSH
13775: LD_VAR 0 4
13779: PUSH
13780: FOR_IN
13781: IFFALSE 13832
// for j in UnitsInside ( i ) do
13783: LD_ADDR_VAR 0 3
13787: PUSH
13788: LD_VAR 0 2
13792: PPUSH
13793: CALL_OW 313
13797: PUSH
13798: FOR_IN
13799: IFFALSE 13828
// if GetClass ( j ) = class_mechanic then
13801: LD_VAR 0 3
13805: PPUSH
13806: CALL_OW 257
13810: PUSH
13811: LD_INT 3
13813: EQUAL
13814: IFFALSE 13826
// begin result := true ;
13816: LD_ADDR_VAR 0 1
13820: PUSH
13821: LD_INT 1
13823: ST_TO_ADDR
// break ;
13824: GO 13828
// end ;
13826: GO 13798
13828: POP
13829: POP
13830: GO 13780
13832: POP
13833: POP
// end ;
13834: LD_VAR 0 1
13838: RET
// every 12 12$0 do
13839: GO 13841
13841: DISABLE
// begin repeat wait ( 0 0$1 ) ;
13842: LD_INT 35
13844: PPUSH
13845: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 5 5$00 ;
13849: LD_INT 1
13851: PPUSH
13852: CALL_OW 463
13856: NOT
13857: PUSH
13858: LD_INT 32
13860: PPUSH
13861: LD_INT 81
13863: PUSH
13864: LD_INT 1
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PPUSH
13871: CALL_OW 70
13875: NOT
13876: AND
13877: PUSH
13878: LD_EXP 27
13882: PUSH
13883: LD_INT 10500
13885: LESS
13886: OR
13887: IFFALSE 13842
// PrepareKurt ;
13889: CALL 16522 0 0
// end ;
13893: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
13894: LD_EXP 16
13898: PPUSH
13899: CALL_OW 302
13903: PUSH
13904: LD_EXP 16
13908: PPUSH
13909: CALL_OW 255
13913: PUSH
13914: LD_INT 1
13916: EQUAL
13917: AND
13918: PUSH
13919: LD_EXP 2
13923: AND
13924: IFFALSE 14089
13926: GO 13928
13928: DISABLE
// begin wait ( 0 0$50 ) ;
13929: LD_INT 1750
13931: PPUSH
13932: CALL_OW 67
// if not IsOk ( Joan ) then
13936: LD_EXP 16
13940: PPUSH
13941: CALL_OW 302
13945: NOT
13946: IFFALSE 13950
// exit ;
13948: GO 14089
// if IsOK ( Lisa ) then
13950: LD_EXP 2
13954: PPUSH
13955: CALL_OW 302
13959: IFFALSE 14089
// begin DialogueOn ;
13961: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13965: LD_EXP 2
13969: PPUSH
13970: LD_STRING D7-Lisa-1
13972: PPUSH
13973: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13977: LD_EXP 1
13981: PPUSH
13982: LD_STRING D7-JMM-1
13984: PPUSH
13985: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13989: LD_EXP 2
13993: PPUSH
13994: LD_STRING D7-Lisa-2
13996: PPUSH
13997: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14001: LD_EXP 1
14005: PPUSH
14006: LD_STRING D7-JMM-2
14008: PPUSH
14009: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14013: LD_EXP 2
14017: PPUSH
14018: LD_STRING D7-Lisa-3
14020: PPUSH
14021: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14025: LD_EXP 1
14029: PPUSH
14030: LD_STRING D7-JMM-3
14032: PPUSH
14033: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14037: LD_EXP 2
14041: PPUSH
14042: LD_STRING D7-Lisa-4
14044: PPUSH
14045: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14049: LD_EXP 1
14053: PPUSH
14054: LD_STRING D7-JMM-4
14056: PPUSH
14057: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14061: LD_EXP 1
14065: PPUSH
14066: LD_STRING D7-JMM-4a
14068: PPUSH
14069: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14073: LD_EXP 2
14077: PPUSH
14078: LD_STRING D7-Lisa-5
14080: PPUSH
14081: CALL_OW 88
// DialogueOff ;
14085: CALL_OW 7
// end ; end ;
14089: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
14090: LD_EXP 14
14094: PUSH
14095: LD_INT 22
14097: PUSH
14098: LD_INT 1
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 91
14107: PUSH
14108: LD_EXP 14
14112: PUSH
14113: LD_INT 10
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 2
14123: PUSH
14124: LD_INT 25
14126: PUSH
14127: LD_INT 1
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 25
14136: PUSH
14137: LD_INT 2
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 25
14146: PUSH
14147: LD_INT 3
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 25
14156: PUSH
14157: LD_INT 4
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: LIST
14175: PPUSH
14176: CALL_OW 69
14180: PUSH
14181: LD_INT 1
14183: GREATER
14184: AND
14185: IFFALSE 14202
14187: GO 14189
14189: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14190: LD_EXP 14
14194: PPUSH
14195: LD_STRING D5-Sol1-1
14197: PPUSH
14198: CALL_OW 88
14202: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14203: LD_INT 22
14205: PUSH
14206: LD_INT 1
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: LD_INT 33
14215: PUSH
14216: LD_INT 2
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PPUSH
14227: CALL_OW 69
14231: PUSH
14232: LD_INT 2
14234: GREATEREQUAL
14235: IFFALSE 14255
14237: GO 14239
14239: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14240: LD_STRING MRa
14242: PPUSH
14243: CALL_OW 337
// remoteVehiclesBuild := 1 ;
14247: LD_ADDR_EXP 29
14251: PUSH
14252: LD_INT 1
14254: ST_TO_ADDR
// end ;
14255: END
// every 2 2$00 do var i , last ;
14256: GO 14258
14258: DISABLE
14259: LD_INT 0
14261: PPUSH
14262: PPUSH
// begin last := 8 ;
14263: LD_ADDR_VAR 0 2
14267: PUSH
14268: LD_INT 8
14270: ST_TO_ADDR
// for i = 1 to last do
14271: LD_ADDR_VAR 0 1
14275: PUSH
14276: DOUBLE
14277: LD_INT 1
14279: DEC
14280: ST_TO_ADDR
14281: LD_VAR 0 2
14285: PUSH
14286: FOR_TO
14287: IFFALSE 14315
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
14289: LD_INT 6300
14291: PPUSH
14292: LD_INT 12600
14294: PPUSH
14295: CALL_OW 12
14299: PPUSH
14300: CALL_OW 67
// PrepareRandoms ( i ) ;
14304: LD_VAR 0 1
14308: PPUSH
14309: CALL 4129 0 1
// end ;
14313: GO 14286
14315: POP
14316: POP
// end ;
14317: PPOPN 2
14319: END
// every 5 5$20 do
14320: GO 14322
14322: DISABLE
// begin DialogueOn ;
14323: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14327: LD_EXP 10
14331: PPUSH
14332: LD_STRING D12a-Sci-1
14334: PPUSH
14335: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14339: LD_EXP 1
14343: PPUSH
14344: LD_STRING D12a-JMM-1
14346: PPUSH
14347: CALL_OW 88
// DialogueOff ;
14351: CALL_OW 7
// cratesStatus := 1 ;
14355: LD_ADDR_EXP 39
14359: PUSH
14360: LD_INT 1
14362: ST_TO_ADDR
// end ;
14363: END
// every 13 13$0 do
14364: GO 14366
14366: DISABLE
// begin DialogueOn ;
14367: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14371: LD_EXP 10
14375: PPUSH
14376: LD_STRING D12b-Sci-1
14378: PPUSH
14379: CALL_OW 94
// DialogueOff ;
14383: CALL_OW 7
// cratesStatus := 2 ;
14387: LD_ADDR_EXP 39
14391: PUSH
14392: LD_INT 2
14394: ST_TO_ADDR
// BuildBulldozer ;
14395: CALL 10234 0 0
// end ;
14399: END
// every 32 32$0 do
14400: GO 14402
14402: DISABLE
// begin DialogueOn ;
14403: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14407: LD_EXP 10
14411: PPUSH
14412: LD_STRING D12c-Sci-1
14414: PPUSH
14415: CALL_OW 94
// DialogueOff ;
14419: CALL_OW 7
// wait ( 3 3$0 ) ;
14423: LD_INT 6300
14425: PPUSH
14426: CALL_OW 67
// DialogueOn ;
14430: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14434: LD_EXP 10
14438: PPUSH
14439: LD_STRING D12d-Sci-1
14441: PPUSH
14442: CALL_OW 94
// DialogueOff ;
14446: CALL_OW 7
// cratesStatus = 1 ;
14450: LD_ADDR_EXP 39
14454: PUSH
14455: LD_INT 1
14457: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14458: CALL 20772 0 0
// wait ( 2 2$30 ) ;
14462: LD_INT 5250
14464: PPUSH
14465: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14469: LD_INT 35
14471: PPUSH
14472: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14476: LD_INT 1
14478: PPUSH
14479: CALL_OW 463
14483: NOT
14484: PUSH
14485: LD_INT 32
14487: PPUSH
14488: LD_INT 81
14490: PUSH
14491: LD_INT 1
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PPUSH
14498: CALL_OW 70
14502: NOT
14503: AND
14504: PUSH
14505: LD_EXP 27
14509: PUSH
14510: LD_INT 6300
14512: LESS
14513: OR
14514: IFFALSE 14469
// PrepareJoan ;
14516: CALL 3085 0 0
// end ;
14520: END
// every 42 42$0 do
14521: GO 14523
14523: DISABLE
// begin DialogueOn ;
14524: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14528: LD_EXP 10
14532: PPUSH
14533: LD_STRING D12e-Sci-1
14535: PPUSH
14536: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14540: LD_EXP 1
14544: PPUSH
14545: LD_STRING D12e-JMM-1
14547: PPUSH
14548: CALL_OW 88
// DialogueOff ;
14552: CALL_OW 7
// cratesStatus := 2 ;
14556: LD_ADDR_EXP 39
14560: PUSH
14561: LD_INT 2
14563: ST_TO_ADDR
// end ; end_of_file
14564: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14565: LD_VAR 0 1
14569: PUSH
14570: LD_INT 1
14572: EQUAL
14573: PUSH
14574: LD_VAR 0 2
14578: PUSH
14579: LD_INT 3
14581: EQUAL
14582: AND
14583: IFFALSE 14593
// contactWithRussian := 1 ;
14585: LD_ADDR_EXP 23
14589: PUSH
14590: LD_INT 1
14592: ST_TO_ADDR
// end ;
14593: PPOPN 2
14595: END
// on BuildingComplete ( building ) do var i ;
14596: LD_INT 0
14598: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14599: LD_VAR 0 1
14603: PPUSH
14604: CALL_OW 266
14608: PUSH
14609: LD_INT 36
14611: EQUAL
14612: PUSH
14613: LD_VAR 0 1
14617: PPUSH
14618: CALL_OW 255
14622: PUSH
14623: LD_INT 1
14625: EQUAL
14626: AND
14627: PUSH
14628: LD_EXP 24
14632: PUSH
14633: LD_INT 0
14635: EQUAL
14636: AND
14637: IFFALSE 14717
// begin firstTower = 1 ;
14639: LD_ADDR_EXP 24
14643: PUSH
14644: LD_INT 1
14646: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14647: LD_INT 22
14649: PUSH
14650: LD_INT 1
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: LD_INT 21
14659: PUSH
14660: LD_INT 1
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 25
14669: PUSH
14670: LD_INT 3
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 26
14679: PUSH
14680: LD_INT 1
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: PPUSH
14693: CALL_OW 69
14697: PUSH
14698: LD_EXP 1
14702: PUSH
14703: EMPTY
14704: LIST
14705: DIFF
14706: PPUSH
14707: LD_STRING D3b-Mech1-1
14709: PPUSH
14710: LD_STRING D3b-Mech1-1
14712: PPUSH
14713: CALL 7191 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14717: LD_VAR 0 1
14721: PPUSH
14722: CALL_OW 266
14726: PUSH
14727: LD_INT 0
14729: EQUAL
14730: PUSH
14731: LD_VAR 0 1
14735: PPUSH
14736: CALL_OW 255
14740: PUSH
14741: LD_INT 1
14743: EQUAL
14744: AND
14745: IFFALSE 14759
// SetBName ( building , theta ) ;
14747: LD_VAR 0 1
14751: PPUSH
14752: LD_STRING theta
14754: PPUSH
14755: CALL_OW 500
// if GetSide ( building ) = 3 then
14759: LD_VAR 0 1
14763: PPUSH
14764: CALL_OW 255
14768: PUSH
14769: LD_INT 3
14771: EQUAL
14772: IFFALSE 14812
// begin for i := 1 to 4 do
14774: LD_ADDR_VAR 0 2
14778: PUSH
14779: DOUBLE
14780: LD_INT 1
14782: DEC
14783: ST_TO_ADDR
14784: LD_INT 4
14786: PUSH
14787: FOR_TO
14788: IFFALSE 14810
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14790: LD_ADDR_EXP 32
14794: PUSH
14795: LD_EXP 32
14799: PPUSH
14800: LD_INT 1
14802: PPUSH
14803: CALL_OW 3
14807: ST_TO_ADDR
14808: GO 14787
14810: POP
14811: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14812: LD_VAR 0 1
14816: PPUSH
14817: CALL_OW 255
14821: PUSH
14822: LD_INT 3
14824: EQUAL
14825: PUSH
14826: LD_VAR 0 1
14830: PPUSH
14831: CALL_OW 266
14835: PUSH
14836: LD_INT 0
14838: EQUAL
14839: PUSH
14840: LD_VAR 0 1
14844: PPUSH
14845: CALL_OW 266
14849: PUSH
14850: LD_INT 2
14852: EQUAL
14853: OR
14854: PUSH
14855: LD_VAR 0 1
14859: PPUSH
14860: CALL_OW 266
14864: PUSH
14865: LD_INT 4
14867: EQUAL
14868: OR
14869: PUSH
14870: EMPTY
14871: LIST
14872: AND
14873: IFFALSE 14884
// ComUpgrade ( building ) ;
14875: LD_VAR 0 1
14879: PPUSH
14880: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14884: LD_VAR 0 1
14888: PPUSH
14889: CALL_OW 255
14893: PUSH
14894: LD_INT 3
14896: EQUAL
14897: PUSH
14898: LD_VAR 0 1
14902: PPUSH
14903: CALL_OW 266
14907: PUSH
14908: LD_INT 32
14910: EQUAL
14911: AND
14912: IFFALSE 14953
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14914: LD_VAR 0 1
14918: PPUSH
14919: LD_INT 42
14921: PUSH
14922: LD_INT 43
14924: PUSH
14925: LD_INT 44
14927: PUSH
14928: LD_INT 46
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 1
14939: PPUSH
14940: LD_INT 4
14942: PPUSH
14943: CALL_OW 12
14947: ARRAY
14948: PPUSH
14949: CALL_OW 208
// end ;
14953: PPOPN 2
14955: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14956: LD_VAR 0 1
14960: PPUSH
14961: CALL 37331 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
14965: LD_VAR 0 1
14969: PUSH
14970: LD_INT 22
14972: PUSH
14973: LD_INT 1
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: LD_INT 21
14982: PUSH
14983: LD_INT 1
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 23
14992: PUSH
14993: LD_INT 1
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: LIST
15004: PPUSH
15005: CALL_OW 69
15009: IN
15010: IFFALSE 15026
// killCounter := killCounter + 1 ;
15012: LD_ADDR_EXP 46
15016: PUSH
15017: LD_EXP 46
15021: PUSH
15022: LD_INT 1
15024: PLUS
15025: ST_TO_ADDR
// if unit in ruAttackersInForest then
15026: LD_VAR 0 1
15030: PUSH
15031: LD_EXP 49
15035: IN
15036: IFFALSE 15054
// ruAttackersInForest := ruAttackersInForest diff unit ;
15038: LD_ADDR_EXP 49
15042: PUSH
15043: LD_EXP 49
15047: PUSH
15048: LD_VAR 0 1
15052: DIFF
15053: ST_TO_ADDR
// if unit in ruAttackers then
15054: LD_VAR 0 1
15058: PUSH
15059: LD_EXP 48
15063: IN
15064: IFFALSE 15082
// ruAttackers := ruAttackers diff unit ;
15066: LD_ADDR_EXP 48
15070: PUSH
15071: LD_EXP 48
15075: PUSH
15076: LD_VAR 0 1
15080: DIFF
15081: ST_TO_ADDR
// if unit = JMM then
15082: LD_VAR 0 1
15086: PUSH
15087: LD_EXP 1
15091: EQUAL
15092: IFFALSE 15101
// YouLost ( JMM ) ;
15094: LD_STRING JMM
15096: PPUSH
15097: CALL_OW 104
// if unit = Joan then
15101: LD_VAR 0 1
15105: PUSH
15106: LD_EXP 16
15110: EQUAL
15111: IFFALSE 15121
// JoanStatus := 0 ;
15113: LD_ADDR_EXP 17
15117: PUSH
15118: LD_INT 0
15120: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
15121: LD_VAR 0 1
15125: PPUSH
15126: CALL_OW 255
15130: PUSH
15131: LD_INT 1
15133: EQUAL
15134: PUSH
15135: LD_VAR 0 1
15139: PPUSH
15140: CALL_OW 247
15144: PUSH
15145: LD_INT 1
15147: EQUAL
15148: AND
15149: PUSH
15150: LD_VAR 0 1
15154: PPUSH
15155: CALL_OW 248
15159: PUSH
15160: LD_INT 1
15162: EQUAL
15163: AND
15164: IFFALSE 15180
// unitLost = unitLost + 1 ;
15166: LD_ADDR_EXP 31
15170: PUSH
15171: LD_EXP 31
15175: PUSH
15176: LD_INT 1
15178: PLUS
15179: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
15180: LD_VAR 0 1
15184: PPUSH
15185: CALL_OW 255
15189: PUSH
15190: LD_INT 3
15192: EQUAL
15193: PUSH
15194: LD_VAR 0 1
15198: PPUSH
15199: CALL_OW 247
15203: PUSH
15204: LD_INT 3
15206: EQUAL
15207: AND
15208: PUSH
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 266
15218: PUSH
15219: LD_INT 4
15221: PUSH
15222: LD_INT 5
15224: PUSH
15225: LD_INT 32
15227: PUSH
15228: LD_INT 31
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: IN
15237: AND
15238: IFFALSE 15324
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15240: LD_ADDR_EXP 32
15244: PUSH
15245: LD_EXP 32
15249: PUSH
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 266
15259: ADD
15260: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15261: LD_ADDR_EXP 32
15265: PUSH
15266: LD_EXP 32
15270: PUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 250
15280: ADD
15281: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15282: LD_ADDR_EXP 32
15286: PUSH
15287: LD_EXP 32
15291: PUSH
15292: LD_VAR 0 1
15296: PPUSH
15297: CALL_OW 251
15301: ADD
15302: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15303: LD_ADDR_EXP 32
15307: PUSH
15308: LD_EXP 32
15312: PUSH
15313: LD_VAR 0 1
15317: PPUSH
15318: CALL_OW 254
15322: ADD
15323: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15324: LD_EXP 47
15328: PUSH
15329: LD_VAR 0 1
15333: PPUSH
15334: CALL_OW 257
15338: PUSH
15339: LD_INT 3
15341: EQUAL
15342: AND
15343: PUSH
15344: LD_VAR 0 1
15348: PPUSH
15349: CALL_OW 255
15353: PUSH
15354: LD_INT 3
15356: EQUAL
15357: AND
15358: PUSH
15359: LD_INT 21
15361: PPUSH
15362: CALL_OW 302
15366: AND
15367: PUSH
15368: LD_INT 21
15370: PPUSH
15371: CALL_OW 255
15375: PUSH
15376: LD_INT 3
15378: EQUAL
15379: AND
15380: IFFALSE 15462
// begin ruMechCounter := ruMechCounter - 1 ;
15382: LD_ADDR_EXP 47
15386: PUSH
15387: LD_EXP 47
15391: PUSH
15392: LD_INT 1
15394: MINUS
15395: ST_TO_ADDR
// uc_side := 3 ;
15396: LD_ADDR_OWVAR 20
15400: PUSH
15401: LD_INT 3
15403: ST_TO_ADDR
// uc_nation := 3 ;
15404: LD_ADDR_OWVAR 21
15408: PUSH
15409: LD_INT 3
15411: ST_TO_ADDR
// hc_gallery :=  ;
15412: LD_ADDR_OWVAR 33
15416: PUSH
15417: LD_STRING 
15419: ST_TO_ADDR
// hc_name :=  ;
15420: LD_ADDR_OWVAR 26
15424: PUSH
15425: LD_STRING 
15427: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15428: LD_INT 0
15430: PPUSH
15431: LD_EXP 35
15435: PPUSH
15436: LD_EXP 36
15440: PPUSH
15441: CALL_OW 12
15445: PPUSH
15446: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15450: CALL_OW 44
15454: PPUSH
15455: LD_INT 21
15457: PPUSH
15458: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15462: LD_VAR 0 1
15466: PPUSH
15467: CALL_OW 255
15471: PUSH
15472: LD_INT 3
15474: EQUAL
15475: PUSH
15476: LD_VAR 0 1
15480: PPUSH
15481: CALL_OW 264
15485: PUSH
15486: LD_INT 52
15488: EQUAL
15489: AND
15490: PUSH
15491: LD_INT 21
15493: PPUSH
15494: CALL_OW 302
15498: AND
15499: PUSH
15500: LD_INT 21
15502: PPUSH
15503: CALL_OW 255
15507: PUSH
15508: LD_INT 3
15510: EQUAL
15511: AND
15512: IFFALSE 15533
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15514: LD_INT 21
15516: PPUSH
15517: LD_INT 22
15519: PPUSH
15520: LD_INT 1
15522: PPUSH
15523: LD_INT 1
15525: PPUSH
15526: LD_INT 52
15528: PPUSH
15529: CALL_OW 125
// end ;
15533: PPOPN 1
15535: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15536: LD_INT 0
15538: PPUSH
15539: PPUSH
15540: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15541: LD_VAR 0 1
15545: PPUSH
15546: LD_VAR 0 2
15550: PPUSH
15551: CALL 37451 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15555: LD_VAR 0 1
15559: PPUSH
15560: CALL_OW 255
15564: PUSH
15565: LD_INT 3
15567: EQUAL
15568: PUSH
15569: LD_VAR 0 1
15573: PPUSH
15574: CALL_OW 264
15578: PUSH
15579: LD_INT 51
15581: PUSH
15582: LD_INT 52
15584: PUSH
15585: LD_INT 53
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: LIST
15592: IN
15593: NOT
15594: AND
15595: IFFALSE 15626
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15597: LD_ADDR_EXP 48
15601: PUSH
15602: LD_EXP 48
15606: PPUSH
15607: LD_EXP 48
15611: PUSH
15612: LD_INT 1
15614: PLUS
15615: PPUSH
15616: LD_VAR 0 1
15620: PPUSH
15621: CALL_OW 1
15625: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15626: LD_VAR 0 1
15630: PPUSH
15631: CALL_OW 264
15635: PUSH
15636: LD_INT 53
15638: EQUAL
15639: IFFALSE 15794
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15641: LD_VAR 0 1
15645: PPUSH
15646: LD_INT 60
15648: PPUSH
15649: LD_INT 85
15651: PPUSH
15652: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
15656: LD_VAR 0 1
15660: PPUSH
15661: LD_INT 43
15663: PPUSH
15664: LD_INT 69
15666: PPUSH
15667: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
15671: LD_VAR 0 1
15675: PPUSH
15676: LD_INT 37
15678: PPUSH
15679: LD_INT 46
15681: PPUSH
15682: CALL_OW 171
// wait ( 0 0$1 ) ;
15686: LD_INT 35
15688: PPUSH
15689: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15693: LD_INT 35
15695: PPUSH
15696: CALL_OW 67
// until not HasTask ( vehicle ) ;
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 314
15709: NOT
15710: IFFALSE 15693
// CutTreeInArea ( vehicle , cutTreeArea ) ;
15712: LD_VAR 0 1
15716: PPUSH
15717: LD_INT 34
15719: PPUSH
15720: CALL 10286 0 2
// repeat wait ( 0 0$1 ) ;
15724: LD_INT 35
15726: PPUSH
15727: CALL_OW 67
// until not HasTask ( vehicle ) ;
15731: LD_VAR 0 1
15735: PPUSH
15736: CALL_OW 314
15740: NOT
15741: IFFALSE 15724
// un := IsDrivenBy ( vehicle ) ;
15743: LD_ADDR_VAR 0 4
15747: PUSH
15748: LD_VAR 0 1
15752: PPUSH
15753: CALL_OW 311
15757: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
15758: LD_VAR 0 4
15762: PPUSH
15763: LD_INT 96
15765: PPUSH
15766: LD_INT 77
15768: PPUSH
15769: CALL_OW 171
// AddComExitVehicle ( un ) ;
15773: LD_VAR 0 4
15777: PPUSH
15778: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
15782: LD_VAR 0 4
15786: PPUSH
15787: LD_INT 17
15789: PPUSH
15790: CALL_OW 180
// end ; end ;
15794: PPOPN 5
15796: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15797: LD_VAR 0 1
15801: PPUSH
15802: CALL_OW 255
15806: PUSH
15807: LD_INT 3
15809: EQUAL
15810: IFFALSE 15841
// begin tamedApemans = tamedApemans + 1 ;
15812: LD_ADDR_EXP 33
15816: PUSH
15817: LD_EXP 33
15821: PUSH
15822: LD_INT 1
15824: PLUS
15825: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
15826: LD_VAR 0 1
15830: PPUSH
15831: LD_INT 106
15833: PPUSH
15834: LD_INT 85
15836: PPUSH
15837: CALL_OW 111
// end ; end ;
15841: PPOPN 2
15843: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
15844: LD_VAR 0 2
15848: PPUSH
15849: CALL_OW 255
15853: PUSH
15854: LD_INT 3
15856: EQUAL
15857: PUSH
15858: LD_VAR 0 1
15862: PPUSH
15863: CALL_OW 255
15867: PUSH
15868: LD_INT 3
15870: EQUAL
15871: AND
15872: PUSH
15873: LD_INT 21
15875: PPUSH
15876: CALL_OW 302
15880: AND
15881: IFFALSE 15895
// ComEnterUnit ( human , rufab ) ;
15883: LD_VAR 0 1
15887: PPUSH
15888: LD_INT 21
15890: PPUSH
15891: CALL_OW 120
// end ;
15895: PPOPN 4
15897: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
15898: LD_VAR 0 1
15902: PUSH
15903: LD_INT 21
15905: EQUAL
15906: PUSH
15907: LD_VAR 0 2
15911: PPUSH
15912: CALL_OW 255
15916: PUSH
15917: LD_INT 3
15919: EQUAL
15920: AND
15921: IFFALSE 15935
// SetLives ( human , 1000 ) ;
15923: LD_VAR 0 2
15927: PPUSH
15928: LD_INT 1000
15930: PPUSH
15931: CALL_OW 234
// end ;
15935: PPOPN 2
15937: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15938: LD_VAR 0 1
15942: PPUSH
15943: CALL 37435 0 1
// end ; end_of_file
15947: PPOPN 1
15949: END
// every 0 0$30 trigger cratesStatus = 1 do
15950: LD_EXP 39
15954: PUSH
15955: LD_INT 1
15957: EQUAL
15958: IFFALSE 16011
15960: GO 15962
15962: DISABLE
// begin enable ;
15963: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
15964: LD_INT 350
15966: PUSH
15967: LD_INT 875
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 1
15976: PPUSH
15977: LD_INT 2
15979: PPUSH
15980: CALL_OW 12
15984: ARRAY
15985: PPUSH
15986: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
15990: LD_INT 1
15992: PPUSH
15993: LD_INT 5
15995: PPUSH
15996: CALL_OW 12
16000: PPUSH
16001: LD_INT 7
16003: PPUSH
16004: LD_INT 1
16006: PPUSH
16007: CALL_OW 55
// end ;
16011: END
// every 1 1$0 trigger cratesStatus = 2 do
16012: LD_EXP 39
16016: PUSH
16017: LD_INT 2
16019: EQUAL
16020: IFFALSE 16103
16022: GO 16024
16024: DISABLE
// begin enable ;
16025: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16026: LD_INT 3150
16028: PUSH
16029: LD_INT 4550
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 1
16038: PPUSH
16039: LD_INT 2
16041: PPUSH
16042: CALL_OW 12
16046: ARRAY
16047: PPUSH
16048: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
16052: LD_INT 2
16054: PUSH
16055: LD_INT 5
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 1
16064: PPUSH
16065: LD_INT 2
16067: PPUSH
16068: CALL_OW 12
16072: ARRAY
16073: PPUSH
16074: LD_INT 6
16076: PUSH
16077: LD_INT 7
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 1
16086: PPUSH
16087: LD_INT 2
16089: PPUSH
16090: CALL_OW 12
16094: ARRAY
16095: PPUSH
16096: LD_INT 1
16098: PPUSH
16099: CALL_OW 55
// end ;
16103: END
// every 0 0$30 + 0 0$10 do
16104: GO 16106
16106: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16107: LD_INT 4
16109: PUSH
16110: LD_INT 5
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 1
16119: PPUSH
16120: LD_INT 2
16122: PPUSH
16123: CALL_OW 12
16127: ARRAY
16128: PPUSH
16129: LD_INT 7
16131: PPUSH
16132: LD_INT 1
16134: PPUSH
16135: CALL_OW 55
// Wait ( 0 0$15 ) ;
16139: LD_INT 525
16141: PPUSH
16142: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16146: LD_INT 4
16148: PUSH
16149: LD_INT 5
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 1
16158: PPUSH
16159: LD_INT 2
16161: PPUSH
16162: CALL_OW 12
16166: ARRAY
16167: PPUSH
16168: LD_INT 7
16170: PPUSH
16171: LD_INT 1
16173: PPUSH
16174: CALL_OW 55
// Wait ( 0 0$20 ) ;
16178: LD_INT 700
16180: PPUSH
16181: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16185: LD_INT 4
16187: PUSH
16188: LD_INT 5
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 1
16197: PPUSH
16198: LD_INT 2
16200: PPUSH
16201: CALL_OW 12
16205: ARRAY
16206: PPUSH
16207: LD_INT 7
16209: PPUSH
16210: LD_INT 1
16212: PPUSH
16213: CALL_OW 55
// end ; end_of_file
16217: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16218: LD_EXP 25
16222: PUSH
16223: LD_INT 1
16225: EQUAL
16226: IFFALSE 16519
16228: GO 16230
16230: DISABLE
16231: LD_INT 0
16233: PPUSH
16234: PPUSH
16235: PPUSH
// begin enable ;
16236: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16237: LD_ADDR_VAR 0 2
16241: PUSH
16242: LD_INT 22
16244: PUSH
16245: LD_INT 1
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 21
16254: PUSH
16255: LD_INT 3
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: LD_INT 30
16267: PUSH
16268: LD_INT 0
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: LD_INT 30
16277: PUSH
16278: LD_INT 1
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: LIST
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: LIST
16294: PPUSH
16295: CALL_OW 69
16299: ST_TO_ADDR
// for i in tmp do
16300: LD_ADDR_VAR 0 1
16304: PUSH
16305: LD_VAR 0 2
16309: PUSH
16310: FOR_IN
16311: IFFALSE 16344
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16313: LD_ADDR_VAR 0 3
16317: PUSH
16318: LD_VAR 0 3
16322: PUSH
16323: LD_VAR 0 1
16327: PPUSH
16328: CALL_OW 274
16332: PPUSH
16333: LD_INT 1
16335: PPUSH
16336: CALL_OW 275
16340: PLUS
16341: ST_TO_ADDR
16342: GO 16310
16344: POP
16345: POP
// strings = [ ] ;
16346: LD_ADDR_EXP 28
16350: PUSH
16351: EMPTY
16352: ST_TO_ADDR
// if tmp = 0 then
16353: LD_VAR 0 2
16357: PUSH
16358: LD_INT 0
16360: EQUAL
16361: IFFALSE 16386
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16363: LD_ADDR_EXP 28
16367: PUSH
16368: LD_EXP 28
16372: PUSH
16373: LD_STRING #Am06-1
16375: PUSH
16376: LD_EXP 26
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: ADD
16385: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16386: LD_VAR 0 2
16390: PUSH
16391: LD_EXP 26
16395: PUSH
16396: LD_VAR 0 3
16400: GREATER
16401: AND
16402: IFFALSE 16433
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16404: LD_ADDR_EXP 28
16408: PUSH
16409: LD_EXP 28
16413: PUSH
16414: LD_STRING #Am06-1
16416: PUSH
16417: LD_EXP 26
16421: PUSH
16422: LD_VAR 0 3
16426: MINUS
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: ADD
16432: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16433: LD_VAR 0 2
16437: PUSH
16438: LD_EXP 26
16442: PUSH
16443: LD_VAR 0 3
16447: LESSEQUAL
16448: AND
16449: IFFALSE 16472
// strings = strings ^ [ #Am06-1 , 0 ] ;
16451: LD_ADDR_EXP 28
16455: PUSH
16456: LD_EXP 28
16460: PUSH
16461: LD_STRING #Am06-1
16463: PUSH
16464: LD_INT 0
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: ADD
16471: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16472: LD_ADDR_EXP 27
16476: PUSH
16477: LD_EXP 27
16481: PUSH
16482: LD_INT 35
16484: MINUS
16485: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16486: LD_ADDR_EXP 28
16490: PUSH
16491: LD_EXP 28
16495: PUSH
16496: LD_STRING #Am06-2
16498: PUSH
16499: LD_EXP 27
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: ADD
16508: ST_TO_ADDR
// display_strings = strings ;
16509: LD_ADDR_OWVAR 47
16513: PUSH
16514: LD_EXP 28
16518: ST_TO_ADDR
// end ; end_of_file
16519: PPOPN 3
16521: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 , forceJMM ; begin
16522: LD_INT 0
16524: PPUSH
16525: PPUSH
16526: PPUSH
16527: PPUSH
16528: PPUSH
16529: PPUSH
16530: PPUSH
16531: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16532: LD_ADDR_VAR 0 3
16536: PUSH
16537: LD_INT 22
16539: PUSH
16540: LD_INT 1
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 2
16549: PUSH
16550: LD_INT 30
16552: PUSH
16553: LD_INT 0
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 30
16562: PUSH
16563: LD_INT 1
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: LIST
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: PPUSH
16579: CALL_OW 69
16583: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16584: LD_INT 35
16586: PPUSH
16587: CALL_OW 67
// until depot ;
16591: LD_VAR 0 3
16595: IFFALSE 16532
// forceJMM := false ;
16597: LD_ADDR_VAR 0 8
16601: PUSH
16602: LD_INT 0
16604: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16605: LD_INT 35
16607: PPUSH
16608: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ) ;
16612: LD_ADDR_VAR 0 4
16616: PUSH
16617: LD_INT 22
16619: PUSH
16620: LD_INT 1
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 91
16629: PUSH
16630: LD_VAR 0 3
16634: PUSH
16635: LD_INT 1
16637: ARRAY
16638: PUSH
16639: LD_INT 15
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 21
16649: PUSH
16650: LD_INT 1
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 2
16659: PUSH
16660: LD_INT 25
16662: PUSH
16663: LD_INT 1
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 25
16672: PUSH
16673: LD_INT 2
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 25
16682: PUSH
16683: LD_INT 3
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 25
16692: PUSH
16693: LD_INT 4
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 3
16709: PUSH
16710: LD_INT 54
16712: PUSH
16713: EMPTY
16714: LIST
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 3
16722: PUSH
16723: LD_INT 55
16725: PUSH
16726: EMPTY
16727: LIST
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: PPUSH
16741: CALL_OW 69
16745: PUSH
16746: LD_EXP 2
16750: PUSH
16751: LD_EXP 3
16755: PUSH
16756: LD_EXP 4
16760: PUSH
16761: LD_EXP 5
16765: PUSH
16766: LD_EXP 7
16770: PUSH
16771: LD_EXP 8
16775: PUSH
16776: LD_EXP 9
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: DIFF
16790: ST_TO_ADDR
// if timeToEnd < 10 10$00 then
16791: LD_EXP 27
16795: PUSH
16796: LD_INT 21000
16798: LESS
16799: IFFALSE 16811
// begin forceJMM := true ;
16801: LD_ADDR_VAR 0 8
16805: PUSH
16806: LD_INT 1
16808: ST_TO_ADDR
// break ;
16809: GO 16827
// end ; until tmp and not InBattle ( 1 ) ;
16811: LD_VAR 0 4
16815: PUSH
16816: LD_INT 1
16818: PPUSH
16819: CALL_OW 463
16823: NOT
16824: AND
16825: IFFALSE 16605
// if not forceJMM then
16827: LD_VAR 0 8
16831: NOT
16832: IFFALSE 16860
// tmp := tmp [ rand ( 1 , tmp ) ] else
16834: LD_ADDR_VAR 0 4
16838: PUSH
16839: LD_VAR 0 4
16843: PUSH
16844: LD_INT 1
16846: PPUSH
16847: LD_VAR 0 4
16851: PPUSH
16852: CALL_OW 12
16856: ARRAY
16857: ST_TO_ADDR
16858: GO 16870
// tmp := JMM ;
16860: LD_ADDR_VAR 0 4
16864: PUSH
16865: LD_EXP 1
16869: ST_TO_ADDR
// blockSpawn := 1 ;
16870: LD_ADDR_EXP 30
16874: PUSH
16875: LD_INT 1
16877: ST_TO_ADDR
// uc_side := 2 ;
16878: LD_ADDR_OWVAR 20
16882: PUSH
16883: LD_INT 2
16885: ST_TO_ADDR
// uc_nation := 2 ;
16886: LD_ADDR_OWVAR 21
16890: PUSH
16891: LD_INT 2
16893: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
16894: LD_ADDR_EXP 20
16898: PUSH
16899: LD_STRING Kurt
16901: PPUSH
16902: LD_INT 0
16904: PPUSH
16905: LD_STRING 
16907: PPUSH
16908: CALL 41620 0 3
16912: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
16913: LD_EXP 20
16917: PPUSH
16918: LD_VAR 0 4
16922: PPUSH
16923: CALL_OW 250
16927: PPUSH
16928: LD_VAR 0 4
16932: PPUSH
16933: CALL_OW 251
16937: PPUSH
16938: LD_INT 5
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: CALL_OW 50
// InGameOn ;
16948: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
16952: LD_EXP 20
16956: PPUSH
16957: CALL_OW 87
// wait ( 0 0$2 ) ;
16961: LD_INT 70
16963: PPUSH
16964: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
16968: LD_EXP 20
16972: PPUSH
16973: LD_VAR 0 4
16977: PPUSH
16978: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
16982: LD_VAR 0 4
16986: PPUSH
16987: LD_EXP 20
16991: PPUSH
16992: CALL_OW 112
// wait ( 0 0$1 ) ;
16996: LD_INT 35
16998: PPUSH
16999: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
17003: LD_VAR 0 4
17007: PPUSH
17008: LD_EXP 20
17012: PPUSH
17013: CALL_OW 119
// DialogueOn ;
17017: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17021: LD_EXP 20
17025: PPUSH
17026: LD_STRING D2-Kurt-1
17028: PPUSH
17029: CALL_OW 88
// if tmp = JMM then
17033: LD_VAR 0 4
17037: PUSH
17038: LD_EXP 1
17042: EQUAL
17043: IFFALSE 17135
// begin Say ( JMM , D2-JMM-1 ) ;
17045: LD_EXP 1
17049: PPUSH
17050: LD_STRING D2-JMM-1
17052: PPUSH
17053: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17057: LD_EXP 20
17061: PPUSH
17062: LD_STRING D2-Kurt-2
17064: PPUSH
17065: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17069: LD_EXP 1
17073: PPUSH
17074: LD_STRING D2-JMM-2
17076: PPUSH
17077: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17081: LD_EXP 20
17085: PPUSH
17086: LD_STRING D2-Kurt-3
17088: PPUSH
17089: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17093: LD_EXP 1
17097: PPUSH
17098: LD_STRING D2-JMM-3
17100: PPUSH
17101: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17105: LD_EXP 20
17109: PPUSH
17110: LD_STRING D2-Kurt-4
17112: PPUSH
17113: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17117: LD_EXP 1
17121: PPUSH
17122: LD_STRING D2-JMM-4
17124: PPUSH
17125: CALL_OW 88
// DialogueOff ;
17129: CALL_OW 7
// end else
17133: GO 17363
// begin if GetSex ( tmp ) = 1 then
17135: LD_VAR 0 4
17139: PPUSH
17140: CALL_OW 258
17144: PUSH
17145: LD_INT 1
17147: EQUAL
17148: IFFALSE 17164
// Say ( tmp , D2-Sol1-1 ) else
17150: LD_VAR 0 4
17154: PPUSH
17155: LD_STRING D2-Sol1-1
17157: PPUSH
17158: CALL_OW 88
17162: GO 17176
// Say ( tmp , D2-FSol1-1 ) ;
17164: LD_VAR 0 4
17168: PPUSH
17169: LD_STRING D2-FSol1-1
17171: PPUSH
17172: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17176: LD_EXP 20
17180: PPUSH
17181: LD_STRING D2-Kurt-2
17183: PPUSH
17184: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17188: LD_VAR 0 4
17192: PPUSH
17193: CALL_OW 258
17197: PUSH
17198: LD_INT 1
17200: EQUAL
17201: IFFALSE 17217
// Say ( tmp , D2-Sol1-2 ) else
17203: LD_VAR 0 4
17207: PPUSH
17208: LD_STRING D2-Sol1-2
17210: PPUSH
17211: CALL_OW 88
17215: GO 17229
// Say ( tmp , D2-FSol1-2 ) ;
17217: LD_VAR 0 4
17221: PPUSH
17222: LD_STRING D2-FSol1-2
17224: PPUSH
17225: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17229: LD_EXP 20
17233: PPUSH
17234: LD_STRING D2-Kurt-3
17236: PPUSH
17237: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17241: LD_VAR 0 4
17245: PPUSH
17246: CALL_OW 258
17250: PUSH
17251: LD_INT 1
17253: EQUAL
17254: IFFALSE 17270
// Say ( tmp , D2-Sol1-3 ) else
17256: LD_VAR 0 4
17260: PPUSH
17261: LD_STRING D2-Sol1-3
17263: PPUSH
17264: CALL_OW 88
17268: GO 17282
// Say ( tmp , D2-FSol1-3 ) ;
17270: LD_VAR 0 4
17274: PPUSH
17275: LD_STRING D2-FSol1-3
17277: PPUSH
17278: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17282: LD_EXP 20
17286: PPUSH
17287: LD_STRING D2-Kurt-4
17289: PPUSH
17290: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17294: LD_VAR 0 4
17298: PPUSH
17299: CALL_OW 258
17303: PUSH
17304: LD_INT 1
17306: EQUAL
17307: IFFALSE 17335
// begin Say ( tmp , D2-Sol1-4 ) ;
17309: LD_VAR 0 4
17313: PPUSH
17314: LD_STRING D2-Sol1-4
17316: PPUSH
17317: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
17321: LD_VAR 0 4
17325: PPUSH
17326: LD_STRING D2-Sol1-5
17328: PPUSH
17329: CALL_OW 88
// end else
17333: GO 17359
// begin Say ( tmp , D2-FSol1-4 ) ;
17335: LD_VAR 0 4
17339: PPUSH
17340: LD_STRING D2-FSol1-4
17342: PPUSH
17343: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
17347: LD_VAR 0 4
17351: PPUSH
17352: LD_STRING D2-FSol1-5
17354: PPUSH
17355: CALL_OW 88
// end ; DialogueOff ;
17359: CALL_OW 7
// end ; dec := ShowQuery1 ;
17363: LD_ADDR_VAR 0 6
17367: PUSH
17368: CALL 7676 0 0
17372: ST_TO_ADDR
// if dec = 1 then
17373: LD_VAR 0 6
17377: PUSH
17378: LD_INT 1
17380: EQUAL
17381: IFFALSE 17443
// begin DialogueOn ;
17383: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17387: LD_EXP 20
17391: PPUSH
17392: LD_STRING D2a-Kurt-1
17394: PPUSH
17395: CALL_OW 88
// DialogueOff ;
17399: CALL_OW 7
// InGameOff ;
17403: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17407: LD_INT 1
17409: PPUSH
17410: LD_INT 2
17412: PPUSH
17413: LD_INT 2
17415: PPUSH
17416: LD_INT 1
17418: PPUSH
17419: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17423: LD_EXP 20
17427: PPUSH
17428: LD_INT 8
17430: PPUSH
17431: CALL_OW 113
// readyToEscape := 1 ;
17435: LD_ADDR_EXP 22
17439: PUSH
17440: LD_INT 1
17442: ST_TO_ADDR
// end ; if dec = 2 then
17443: LD_VAR 0 6
17447: PUSH
17448: LD_INT 2
17450: EQUAL
17451: IFFALSE 17919
// begin DialogueOn ;
17453: CALL_OW 6
// if tmp = JMM then
17457: LD_VAR 0 4
17461: PUSH
17462: LD_EXP 1
17466: EQUAL
17467: IFFALSE 17523
// begin Say ( JMM , D2b-JMM-1 ) ;
17469: LD_EXP 1
17473: PPUSH
17474: LD_STRING D2b-JMM-1
17476: PPUSH
17477: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17481: LD_EXP 20
17485: PPUSH
17486: LD_STRING D2b-Kurt-1
17488: PPUSH
17489: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17493: LD_EXP 1
17497: PPUSH
17498: LD_STRING D2b-JMM-2
17500: PPUSH
17501: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17505: LD_EXP 20
17509: PPUSH
17510: LD_STRING D2b-Kurt-2
17512: PPUSH
17513: CALL_OW 88
// DialogueOff ;
17517: CALL_OW 7
// end else
17521: GO 17674
// begin if GetSex ( tmp ) = 1 then
17523: LD_VAR 0 4
17527: PPUSH
17528: CALL_OW 258
17532: PUSH
17533: LD_INT 1
17535: EQUAL
17536: IFFALSE 17552
// Say ( tmp , D2b-Sol1-1 ) else
17538: LD_VAR 0 4
17542: PPUSH
17543: LD_STRING D2b-Sol1-1
17545: PPUSH
17546: CALL_OW 88
17550: GO 17564
// Say ( tmp , D2b-FSol1-1 ) ;
17552: LD_VAR 0 4
17556: PPUSH
17557: LD_STRING D2b-FSol1-1
17559: PPUSH
17560: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17564: LD_EXP 20
17568: PPUSH
17569: LD_STRING D2b-Kurt-1
17571: PPUSH
17572: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17576: LD_VAR 0 4
17580: PPUSH
17581: CALL_OW 258
17585: PUSH
17586: LD_INT 1
17588: EQUAL
17589: IFFALSE 17605
// Say ( tmp , D2b-Sol1-2 ) else
17591: LD_VAR 0 4
17595: PPUSH
17596: LD_STRING D2b-Sol1-2
17598: PPUSH
17599: CALL_OW 88
17603: GO 17617
// Say ( tmp , D2b-FSol1-2 ) ;
17605: LD_VAR 0 4
17609: PPUSH
17610: LD_STRING D2b-FSol1-2
17612: PPUSH
17613: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17617: LD_EXP 20
17621: PPUSH
17622: LD_STRING D2b-Kurt-2
17624: PPUSH
17625: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17629: LD_VAR 0 4
17633: PPUSH
17634: CALL_OW 258
17638: PUSH
17639: LD_INT 1
17641: EQUAL
17642: IFFALSE 17658
// Say ( tmp , D2c-Sol1-2 ) else
17644: LD_VAR 0 4
17648: PPUSH
17649: LD_STRING D2c-Sol1-2
17651: PPUSH
17652: CALL_OW 88
17656: GO 17670
// Say ( tmp , D2c-FSol1-2 ) ;
17658: LD_VAR 0 4
17662: PPUSH
17663: LD_STRING D2c-FSol1-2
17665: PPUSH
17666: CALL_OW 88
// DialogueOff ;
17670: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
17674: LD_ADDR_VAR 0 7
17678: PUSH
17679: CALL 7697 0 0
17683: ST_TO_ADDR
// if dec2 = 1 then
17684: LD_VAR 0 7
17688: PUSH
17689: LD_INT 1
17691: EQUAL
17692: IFFALSE 17754
// begin DialogueOn ;
17694: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17698: LD_EXP 20
17702: PPUSH
17703: LD_STRING D2a-Kurt-1
17705: PPUSH
17706: CALL_OW 88
// DialogueOff ;
17710: CALL_OW 7
// InGameOff ;
17714: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17718: LD_INT 1
17720: PPUSH
17721: LD_INT 2
17723: PPUSH
17724: LD_INT 2
17726: PPUSH
17727: LD_INT 1
17729: PPUSH
17730: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17734: LD_EXP 20
17738: PPUSH
17739: LD_INT 8
17741: PPUSH
17742: CALL_OW 113
// readyToEscape := 1 ;
17746: LD_ADDR_EXP 22
17750: PUSH
17751: LD_INT 1
17753: ST_TO_ADDR
// end ; if dec2 = 2 then
17754: LD_VAR 0 7
17758: PUSH
17759: LD_INT 2
17761: EQUAL
17762: IFFALSE 17919
// begin if tmp = JMM then
17764: LD_VAR 0 4
17768: PUSH
17769: LD_EXP 1
17773: EQUAL
17774: IFFALSE 17834
// begin DialogueOn ;
17776: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17780: LD_EXP 1
17784: PPUSH
17785: LD_STRING D2c-JMM-1
17787: PPUSH
17788: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17792: LD_EXP 20
17796: PPUSH
17797: LD_STRING D2c-Kurt-1
17799: PPUSH
17800: CALL_OW 88
// DialogueOff ;
17804: CALL_OW 7
// InGameOff ;
17808: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17812: LD_EXP 20
17816: PPUSH
17817: LD_INT 8
17819: PPUSH
17820: CALL_OW 113
// readyToEscape := 1 ;
17824: LD_ADDR_EXP 22
17828: PUSH
17829: LD_INT 1
17831: ST_TO_ADDR
// end else
17832: GO 17919
// begin DialogueOn ;
17834: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17838: LD_VAR 0 4
17842: PPUSH
17843: CALL_OW 258
17847: PUSH
17848: LD_INT 1
17850: EQUAL
17851: IFFALSE 17867
// Say ( tmp , D2c-Sol1-1 ) else
17853: LD_VAR 0 4
17857: PPUSH
17858: LD_STRING D2c-Sol1-1
17860: PPUSH
17861: CALL_OW 88
17865: GO 17879
// Say ( tmp , D2c-FSol1-1 ) ;
17867: LD_VAR 0 4
17871: PPUSH
17872: LD_STRING D2c-FSol1-1
17874: PPUSH
17875: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17879: LD_EXP 20
17883: PPUSH
17884: LD_STRING D2c-Kurt-1
17886: PPUSH
17887: CALL_OW 88
// DialogueOff ;
17891: CALL_OW 7
// InGameOff ;
17895: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17899: LD_EXP 20
17903: PPUSH
17904: LD_INT 8
17906: PPUSH
17907: CALL_OW 113
// readyToEscape := 1 ;
17911: LD_ADDR_EXP 22
17915: PUSH
17916: LD_INT 1
17918: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17919: LD_VAR 0 6
17923: PUSH
17924: LD_INT 3
17926: EQUAL
17927: IFFALSE 18088
// begin DialogueOn ;
17929: CALL_OW 6
// if tmp = JMM then
17933: LD_VAR 0 4
17937: PUSH
17938: LD_EXP 1
17942: EQUAL
17943: IFFALSE 18003
// begin DialogueOn ;
17945: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17949: LD_EXP 1
17953: PPUSH
17954: LD_STRING D2c-JMM-1
17956: PPUSH
17957: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17961: LD_EXP 20
17965: PPUSH
17966: LD_STRING D2c-Kurt-1
17968: PPUSH
17969: CALL_OW 88
// DialogueOff ;
17973: CALL_OW 7
// InGameOff ;
17977: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17981: LD_EXP 20
17985: PPUSH
17986: LD_INT 8
17988: PPUSH
17989: CALL_OW 113
// readyToEscape := 1 ;
17993: LD_ADDR_EXP 22
17997: PUSH
17998: LD_INT 1
18000: ST_TO_ADDR
// end else
18001: GO 18088
// begin DialogueOn ;
18003: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18007: LD_VAR 0 4
18011: PPUSH
18012: CALL_OW 258
18016: PUSH
18017: LD_INT 1
18019: EQUAL
18020: IFFALSE 18036
// Say ( tmp , D2c-Sol1-1 ) else
18022: LD_VAR 0 4
18026: PPUSH
18027: LD_STRING D2c-Sol1-1
18029: PPUSH
18030: CALL_OW 88
18034: GO 18048
// Say ( tmp , D2c-FSol1-1 ) ;
18036: LD_VAR 0 4
18040: PPUSH
18041: LD_STRING D2c-FSol1-1
18043: PPUSH
18044: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18048: LD_EXP 20
18052: PPUSH
18053: LD_STRING D2c-Kurt-1
18055: PPUSH
18056: CALL_OW 88
// DialogueOff ;
18060: CALL_OW 7
// InGameOff ;
18064: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18068: LD_EXP 20
18072: PPUSH
18073: LD_INT 8
18075: PPUSH
18076: CALL_OW 113
// readyToEscape := 1 ;
18080: LD_ADDR_EXP 22
18084: PUSH
18085: LD_INT 1
18087: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
18088: LD_ADDR_EXP 30
18092: PUSH
18093: LD_INT 0
18095: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18096: LD_INT 35
18098: PPUSH
18099: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
18103: LD_EXP 20
18107: PPUSH
18108: LD_INT 8
18110: PPUSH
18111: CALL_OW 308
18115: PUSH
18116: LD_EXP 22
18120: AND
18121: PUSH
18122: LD_EXP 20
18126: PPUSH
18127: CALL_OW 301
18131: OR
18132: IFFALSE 18096
// if IsDead ( Kurt ) then
18134: LD_EXP 20
18138: PPUSH
18139: CALL_OW 301
18143: IFFALSE 18147
// exit ;
18145: GO 18202
// RemoveUnit ( Kurt ) ;
18147: LD_EXP 20
18151: PPUSH
18152: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
18156: LD_EXP 20
18160: PPUSH
18161: LD_STRING Kurt
18163: PPUSH
18164: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
18168: LD_INT 1
18170: PPUSH
18171: LD_INT 2
18173: PPUSH
18174: CALL_OW 81
18178: PUSH
18179: LD_INT 0
18181: EQUAL
18182: IFFALSE 18194
// kurtStatus = 1 else
18184: LD_ADDR_EXP 21
18188: PUSH
18189: LD_INT 1
18191: ST_TO_ADDR
18192: GO 18202
// kurtStatus = 2 ;
18194: LD_ADDR_EXP 21
18198: PUSH
18199: LD_INT 2
18201: ST_TO_ADDR
// end ; end_of_file
18202: LD_VAR 0 1
18206: RET
// every 0 0$2 do
18207: GO 18209
18209: DISABLE
// begin enable ;
18210: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
18211: LD_INT 3
18213: PPUSH
18214: LD_INT 2
18216: PPUSH
18217: LD_INT 10
18219: PPUSH
18220: LD_EXP 32
18224: PPUSH
18225: CALL 8128 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
18229: LD_INT 3
18231: PPUSH
18232: LD_INT 12
18234: PPUSH
18235: LD_EXP 32
18239: PPUSH
18240: CALL 9731 0 3
// if disableHealAI = 0 then
18244: LD_EXP 34
18248: PUSH
18249: LD_INT 0
18251: EQUAL
18252: IFFALSE 18273
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
18254: LD_INT 3
18256: PPUSH
18257: LD_INT 9
18259: PPUSH
18260: LD_INT 10
18262: PPUSH
18263: LD_INT 32
18265: PUSH
18266: EMPTY
18267: LIST
18268: PPUSH
18269: CALL 8495 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18273: LD_INT 3
18275: PPUSH
18276: LD_INT 51
18278: PPUSH
18279: LD_INT 6
18281: PPUSH
18282: CALL 9184 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
18286: LD_INT 2
18288: PPUSH
18289: CALL_OW 303
18293: PUSH
18294: LD_INT 2
18296: PPUSH
18297: CALL_OW 255
18301: PUSH
18302: LD_INT 1
18304: EQUAL
18305: OR
18306: IFFALSE 18320
// DefendDepot ( 3 , rudepo ) else
18308: LD_INT 3
18310: PPUSH
18311: LD_INT 2
18313: PPUSH
18314: CALL 9011 0 2
18318: GO 18330
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18320: LD_INT 3
18322: PPUSH
18323: LD_INT 10
18325: PPUSH
18326: CALL 9302 0 2
// end ;
18330: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
18331: LD_INT 22
18333: PUSH
18334: LD_INT 3
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 21
18343: PUSH
18344: LD_INT 2
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 55
18353: PUSH
18354: EMPTY
18355: LIST
18356: PUSH
18357: LD_INT 3
18359: PUSH
18360: LD_INT 34
18362: PUSH
18363: LD_INT 51
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: PPUSH
18380: CALL_OW 69
18384: PUSH
18385: LD_INT 0
18387: EQUAL
18388: PUSH
18389: LD_INT 21
18391: PPUSH
18392: CALL_OW 255
18396: PUSH
18397: LD_INT 3
18399: EQUAL
18400: AND
18401: PUSH
18402: LD_INT 21
18404: PPUSH
18405: CALL_OW 302
18409: AND
18410: PUSH
18411: LD_INT 2
18413: PPUSH
18414: CALL_OW 255
18418: PUSH
18419: LD_INT 3
18421: EQUAL
18422: AND
18423: PUSH
18424: LD_INT 2
18426: PPUSH
18427: CALL_OW 302
18431: AND
18432: PUSH
18433: LD_INT 21
18435: PPUSH
18436: CALL_OW 313
18440: AND
18441: PUSH
18442: LD_EXP 48
18446: PUSH
18447: LD_INT 4
18449: PUSH
18450: LD_INT 5
18452: PUSH
18453: LD_INT 6
18455: PUSH
18456: LD_INT 6
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: PUSH
18465: LD_OWVAR 67
18469: ARRAY
18470: LESS
18471: AND
18472: IFFALSE 18693
18474: GO 18476
18476: DISABLE
// begin enable ;
18477: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18478: LD_INT 2
18480: PPUSH
18481: CALL_OW 274
18485: PPUSH
18486: LD_INT 1
18488: PPUSH
18489: LD_INT 2000
18491: PPUSH
18492: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18496: LD_INT 3
18498: PPUSH
18499: LD_INT 21
18501: PPUSH
18502: LD_INT 4
18504: PUSH
18505: LD_INT 5
18507: PUSH
18508: LD_INT 6
18510: PUSH
18511: LD_INT 6
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: PUSH
18520: LD_OWVAR 67
18524: ARRAY
18525: PUSH
18526: LD_EXP 48
18530: MINUS
18531: PPUSH
18532: LD_INT 43
18534: PUSH
18535: LD_INT 43
18537: PUSH
18538: LD_INT 44
18540: PUSH
18541: LD_INT 44
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 43
18552: PUSH
18553: LD_INT 43
18555: PUSH
18556: LD_INT 43
18558: PUSH
18559: LD_INT 44
18561: PUSH
18562: LD_INT 44
18564: PUSH
18565: LD_INT 46
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 43
18578: PUSH
18579: LD_INT 43
18581: PUSH
18582: LD_INT 43
18584: PUSH
18585: LD_INT 44
18587: PUSH
18588: LD_INT 44
18590: PUSH
18591: LD_INT 46
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 43
18604: PUSH
18605: LD_INT 43
18607: PUSH
18608: LD_INT 44
18610: PUSH
18611: LD_INT 46
18613: PUSH
18614: LD_INT 46
18616: PUSH
18617: LD_INT 46
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: PUSH
18634: LD_OWVAR 67
18638: ARRAY
18639: PPUSH
18640: LD_INT 1
18642: PPUSH
18643: LD_INT 1
18645: PPUSH
18646: LD_INT 22
18648: PUSH
18649: LD_INT 22
18651: PUSH
18652: LD_INT 24
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 1
18661: PPUSH
18662: LD_INT 2
18664: PPUSH
18665: CALL_OW 12
18669: ARRAY
18670: PUSH
18671: LD_INT 24
18673: PUSH
18674: LD_INT 24
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: PUSH
18683: LD_OWVAR 67
18687: ARRAY
18688: PPUSH
18689: CALL 7974 0 7
// end ;
18693: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
18694: LD_INT 17
18696: PPUSH
18697: CALL_OW 255
18701: PUSH
18702: LD_INT 3
18704: EQUAL
18705: PUSH
18706: LD_INT 17
18708: PPUSH
18709: CALL_OW 302
18713: AND
18714: PUSH
18715: LD_INT 2
18717: PPUSH
18718: CALL_OW 255
18722: PUSH
18723: LD_INT 3
18725: EQUAL
18726: AND
18727: PUSH
18728: LD_INT 2
18730: PPUSH
18731: CALL_OW 302
18735: AND
18736: PUSH
18737: LD_EXP 48
18741: PUSH
18742: LD_INT 4
18744: PUSH
18745: LD_INT 5
18747: PUSH
18748: LD_INT 6
18750: PUSH
18751: LD_INT 7
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: PUSH
18760: LD_OWVAR 67
18764: ARRAY
18765: LESS
18766: AND
18767: IFFALSE 18815
18769: GO 18771
18771: DISABLE
// begin enable ;
18772: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18773: LD_INT 17
18775: PPUSH
18776: LD_INT 22
18778: PPUSH
18779: LD_INT 1
18781: PPUSH
18782: LD_INT 1
18784: PPUSH
18785: LD_INT 42
18787: PUSH
18788: LD_INT 43
18790: PUSH
18791: LD_INT 44
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 1
18801: PPUSH
18802: LD_INT 3
18804: PPUSH
18805: CALL_OW 12
18809: ARRAY
18810: PPUSH
18811: CALL_OW 185
// end ;
18815: END
// every 2 2$0 do var i , j ;
18816: GO 18818
18818: DISABLE
18819: LD_INT 0
18821: PPUSH
18822: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18823: LD_INT 14700
18825: PUSH
18826: LD_INT 33600
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 1
18835: PPUSH
18836: LD_INT 2
18838: PPUSH
18839: CALL_OW 12
18843: ARRAY
18844: PPUSH
18845: CALL_OW 67
// disableHealAI = 1 ;
18849: LD_ADDR_EXP 34
18853: PUSH
18854: LD_INT 1
18856: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18857: LD_ADDR_VAR 0 1
18861: PUSH
18862: LD_INT 22
18864: PUSH
18865: LD_INT 3
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 25
18874: PUSH
18875: LD_INT 4
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PPUSH
18886: CALL_OW 69
18890: PUSH
18891: FOR_IN
18892: IFFALSE 18905
// ComExitBuilding ( i ) ;
18894: LD_VAR 0 1
18898: PPUSH
18899: CALL_OW 122
18903: GO 18891
18905: POP
18906: POP
// wait ( 0 0$1 ) ;
18907: LD_INT 35
18909: PPUSH
18910: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18914: LD_INT 35
18916: PPUSH
18917: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18921: LD_ADDR_VAR 0 1
18925: PUSH
18926: LD_INT 22
18928: PUSH
18929: LD_INT 3
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 25
18938: PUSH
18939: LD_INT 4
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PPUSH
18950: CALL_OW 69
18954: PUSH
18955: FOR_IN
18956: IFFALSE 19033
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18958: LD_ADDR_VAR 0 2
18962: PUSH
18963: LD_INT 17
18965: PPUSH
18966: LD_INT 22
18968: PUSH
18969: LD_INT 0
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: LD_INT 25
18978: PUSH
18979: LD_INT 12
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PPUSH
18990: CALL_OW 70
18994: PUSH
18995: FOR_IN
18996: IFFALSE 19029
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18998: LD_VAR 0 1
19002: PPUSH
19003: LD_VAR 0 2
19007: PPUSH
19008: CALL_OW 250
19012: PPUSH
19013: LD_VAR 0 2
19017: PPUSH
19018: CALL_OW 251
19022: PPUSH
19023: CALL_OW 191
19027: GO 18995
19029: POP
19030: POP
19031: GO 18955
19033: POP
19034: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19035: LD_INT 22
19037: PUSH
19038: LD_INT 3
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 25
19047: PUSH
19048: LD_INT 4
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PPUSH
19059: CALL_OW 69
19063: PUSH
19064: LD_INT 0
19066: EQUAL
19067: PUSH
19068: LD_EXP 33
19072: PUSH
19073: LD_INT 6
19075: PUSH
19076: LD_INT 7
19078: PUSH
19079: LD_INT 8
19081: PUSH
19082: LD_INT 8
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: PUSH
19091: LD_OWVAR 67
19095: ARRAY
19096: GREATEREQUAL
19097: OR
19098: PUSH
19099: LD_INT 17
19101: PPUSH
19102: LD_INT 22
19104: PUSH
19105: LD_INT 0
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 25
19114: PUSH
19115: LD_INT 12
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PPUSH
19126: CALL_OW 70
19130: PUSH
19131: LD_INT 0
19133: EQUAL
19134: OR
19135: IFFALSE 18914
// disableHealAI = 0 ;
19137: LD_ADDR_EXP 34
19141: PUSH
19142: LD_INT 0
19144: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19145: LD_ADDR_VAR 0 1
19149: PUSH
19150: LD_INT 22
19152: PUSH
19153: LD_INT 3
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 25
19162: PUSH
19163: LD_INT 12
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PPUSH
19174: CALL_OW 69
19178: PUSH
19179: FOR_IN
19180: IFFALSE 19196
// SetClass ( i , 16 ) ;
19182: LD_VAR 0 1
19186: PPUSH
19187: LD_INT 16
19189: PPUSH
19190: CALL_OW 336
19194: GO 19179
19196: POP
19197: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19198: LD_ADDR_VAR 0 1
19202: PUSH
19203: LD_INT 22
19205: PUSH
19206: LD_INT 3
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 25
19215: PUSH
19216: LD_INT 4
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PPUSH
19227: CALL_OW 69
19231: PUSH
19232: FOR_IN
19233: IFFALSE 19249
// ComEnterUnit ( i , rulab ) ;
19235: LD_VAR 0 1
19239: PPUSH
19240: LD_INT 32
19242: PPUSH
19243: CALL_OW 120
19247: GO 19232
19249: POP
19250: POP
// end ; end_of_file
19251: PPOPN 2
19253: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19254: LD_EXP 27
19258: PUSH
19259: LD_INT 0
19261: LESSEQUAL
19262: IFFALSE 19416
19264: GO 19266
19266: DISABLE
19267: LD_INT 0
19269: PPUSH
19270: PPUSH
19271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19272: LD_ADDR_VAR 0 2
19276: PUSH
19277: LD_INT 22
19279: PUSH
19280: LD_INT 1
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 21
19289: PUSH
19290: LD_INT 3
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: LD_INT 30
19302: PUSH
19303: LD_INT 0
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 30
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: LIST
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: LIST
19329: PPUSH
19330: CALL_OW 69
19334: ST_TO_ADDR
// for i in tmp do
19335: LD_ADDR_VAR 0 1
19339: PUSH
19340: LD_VAR 0 2
19344: PUSH
19345: FOR_IN
19346: IFFALSE 19379
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19348: LD_ADDR_VAR 0 3
19352: PUSH
19353: LD_VAR 0 3
19357: PUSH
19358: LD_VAR 0 1
19362: PPUSH
19363: CALL_OW 274
19367: PPUSH
19368: LD_INT 1
19370: PPUSH
19371: CALL_OW 275
19375: PLUS
19376: ST_TO_ADDR
19377: GO 19345
19379: POP
19380: POP
// if yourCrates >= needCrates then
19381: LD_VAR 0 3
19385: PUSH
19386: LD_EXP 26
19390: GREATEREQUAL
19391: IFFALSE 19409
// FinishMission ( yourCrates , needCrates ) else
19393: LD_VAR 0 3
19397: PPUSH
19398: LD_EXP 26
19402: PPUSH
19403: CALL 19419 0 2
19407: GO 19416
// YouLost ( matmin ) ;
19409: LD_STRING matmin
19411: PPUSH
19412: CALL_OW 104
// end ;
19416: PPOPN 3
19418: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
19419: LD_INT 0
19421: PPUSH
19422: PPUSH
19423: PPUSH
19424: PPUSH
// if killCounter = 0 then
19425: LD_EXP 46
19429: PUSH
19430: LD_INT 0
19432: EQUAL
19433: IFFALSE 19442
// SetAchievement ( ACH_SURV ) ;
19435: LD_STRING ACH_SURV
19437: PPUSH
19438: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19442: LD_INT 22
19444: PUSH
19445: LD_INT 3
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 21
19454: PUSH
19455: LD_INT 3
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PPUSH
19466: CALL_OW 69
19470: PUSH
19471: LD_INT 0
19473: EQUAL
19474: IFFALSE 19490
// begin wait ( 3 ) ;
19476: LD_INT 3
19478: PPUSH
19479: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19483: LD_STRING ACH_BASEDESTROYER
19485: PPUSH
19486: CALL_OW 543
// end ; m1 := false ;
19490: LD_ADDR_VAR 0 4
19494: PUSH
19495: LD_INT 0
19497: ST_TO_ADDR
// m2 := false ;
19498: LD_ADDR_VAR 0 5
19502: PUSH
19503: LD_INT 0
19505: ST_TO_ADDR
// m3 := false ;
19506: LD_ADDR_VAR 0 6
19510: PUSH
19511: LD_INT 0
19513: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19514: LD_VAR 0 1
19518: PUSH
19519: LD_INT 100
19521: PUSH
19522: LD_INT 140
19524: PUSH
19525: LD_INT 180
19527: PUSH
19528: LD_INT 220
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: PUSH
19537: LD_OWVAR 67
19541: ARRAY
19542: PLUS
19543: PUSH
19544: LD_VAR 0 2
19548: GREATER
19549: IFFALSE 19581
// begin AddMedal ( cans , 1 ) ;
19551: LD_STRING cans
19553: PPUSH
19554: LD_INT 1
19556: PPUSH
19557: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19561: LD_INT 1
19563: PPUSH
19564: LD_STRING 06_crates_1
19566: PPUSH
19567: CALL_OW 39
// m1 := true ;
19571: LD_ADDR_VAR 0 4
19575: PUSH
19576: LD_INT 1
19578: ST_TO_ADDR
// end else
19579: GO 19602
// begin AddMedal ( cans , - 1 ) ;
19581: LD_STRING cans
19583: PPUSH
19584: LD_INT 1
19586: NEG
19587: PPUSH
19588: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19592: LD_INT 0
19594: PPUSH
19595: LD_STRING 06_crates_1
19597: PPUSH
19598: CALL_OW 39
// end ; if unitLost < 3 then
19602: LD_EXP 31
19606: PUSH
19607: LD_INT 3
19609: LESS
19610: IFFALSE 19632
// begin AddMedal ( people , 1 ) ;
19612: LD_STRING people
19614: PPUSH
19615: LD_INT 1
19617: PPUSH
19618: CALL_OW 101
// m2 := true ;
19622: LD_ADDR_VAR 0 5
19626: PUSH
19627: LD_INT 1
19629: ST_TO_ADDR
// end else
19630: GO 19643
// AddMedal ( people , - 1 ) ;
19632: LD_STRING people
19634: PPUSH
19635: LD_INT 1
19637: NEG
19638: PPUSH
19639: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19643: LD_EXP 29
19647: PPUSH
19648: LD_STRING 06_remoteVehs_1
19650: PPUSH
19651: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19655: LD_EXP 29
19659: PUSH
19660: LD_INT 1
19662: EQUAL
19663: IFFALSE 19685
// begin AddMedal ( remote , 1 ) ;
19665: LD_STRING remote
19667: PPUSH
19668: LD_INT 1
19670: PPUSH
19671: CALL_OW 101
// m3 := true ;
19675: LD_ADDR_VAR 0 6
19679: PUSH
19680: LD_INT 1
19682: ST_TO_ADDR
// end else
19683: GO 19725
// begin if GetTech ( 18 , 1 ) = state_enabled then
19685: LD_INT 18
19687: PPUSH
19688: LD_INT 1
19690: PPUSH
19691: CALL_OW 321
19695: PUSH
19696: LD_INT 1
19698: EQUAL
19699: IFFALSE 19714
// AddMedal ( remote , - 1 ) else
19701: LD_STRING remote
19703: PPUSH
19704: LD_INT 1
19706: NEG
19707: PPUSH
19708: CALL_OW 101
19712: GO 19725
// AddMedal ( remote , - 2 ) ;
19714: LD_STRING remote
19716: PPUSH
19717: LD_INT 2
19719: NEG
19720: PPUSH
19721: CALL_OW 101
// end ; if m1 and m2 and m3 then
19725: LD_VAR 0 4
19729: PUSH
19730: LD_VAR 0 5
19734: AND
19735: PUSH
19736: LD_VAR 0 6
19740: AND
19741: IFFALSE 19757
// begin wait ( 3 ) ;
19743: LD_INT 3
19745: PPUSH
19746: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
19750: LD_STRING ACH_ASPEED_6
19752: PPUSH
19753: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
19757: LD_OWVAR 67
19761: PUSH
19762: LD_INT 3
19764: GREATEREQUAL
19765: PUSH
19766: LD_VAR 0 4
19770: AND
19771: PUSH
19772: LD_VAR 0 5
19776: AND
19777: PUSH
19778: LD_VAR 0 6
19782: AND
19783: IFFALSE 19795
// SetAchievementEX ( ACH_AMER , 6 ) ;
19785: LD_STRING ACH_AMER
19787: PPUSH
19788: LD_INT 6
19790: PPUSH
19791: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
19795: LD_EXP 21
19799: PPUSH
19800: LD_STRING 06_KurtStatus_1
19802: PPUSH
19803: CALL_OW 39
// GiveMedals ( Main ) ;
19807: LD_STRING Main
19809: PPUSH
19810: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19814: LD_INT 22
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 21
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 50
19836: PUSH
19837: EMPTY
19838: LIST
19839: PUSH
19840: LD_INT 2
19842: PUSH
19843: LD_INT 25
19845: PUSH
19846: LD_INT 1
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 25
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 25
19865: PUSH
19866: LD_INT 3
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 25
19875: PUSH
19876: LD_INT 4
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: PPUSH
19896: CALL_OW 69
19900: PPUSH
19901: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19905: LD_EXP 1
19909: PPUSH
19910: LD_EXP 43
19914: PUSH
19915: LD_STRING JMM
19917: STR
19918: PPUSH
19919: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19923: LD_EXP 2
19927: PPUSH
19928: LD_EXP 43
19932: PUSH
19933: LD_STRING Lisa
19935: STR
19936: PPUSH
19937: CALL 7289 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19941: LD_EXP 3
19945: PPUSH
19946: LD_EXP 43
19950: PUSH
19951: LD_STRING Bobby
19953: STR
19954: PPUSH
19955: CALL 7289 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19959: LD_EXP 4
19963: PPUSH
19964: LD_EXP 43
19968: PUSH
19969: LD_STRING Cyrus
19971: STR
19972: PPUSH
19973: CALL 7289 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19977: LD_EXP 5
19981: PPUSH
19982: LD_EXP 43
19986: PUSH
19987: LD_STRING Frank
19989: STR
19990: PPUSH
19991: CALL 7289 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19995: LD_EXP 6
19999: PPUSH
20000: LD_EXP 43
20004: PUSH
20005: LD_STRING Brown
20007: STR
20008: PPUSH
20009: CALL 7289 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20013: LD_EXP 7
20017: PPUSH
20018: LD_EXP 43
20022: PUSH
20023: LD_STRING Donaldson
20025: STR
20026: PPUSH
20027: CALL 7289 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20031: LD_EXP 8
20035: PPUSH
20036: LD_EXP 43
20040: PUSH
20041: LD_STRING Gladstone
20043: STR
20044: PPUSH
20045: CALL 7289 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20049: LD_EXP 9
20053: PPUSH
20054: LD_EXP 43
20058: PUSH
20059: LD_STRING Denis
20061: STR
20062: PPUSH
20063: CALL 7289 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20067: LD_EXP 16
20071: PPUSH
20072: LD_EXP 43
20076: PUSH
20077: LD_STRING Joan
20079: STR
20080: PPUSH
20081: CALL 7289 0 2
// if IsLive ( Mike ) then
20085: LD_EXP 11
20089: PPUSH
20090: CALL_OW 300
20094: IFFALSE 20114
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
20096: LD_EXP 11
20100: PPUSH
20101: LD_EXP 43
20105: PUSH
20106: LD_STRING Mike
20108: STR
20109: PPUSH
20110: CALL_OW 38
// if IsLive ( Joan ) then
20114: LD_EXP 16
20118: PPUSH
20119: CALL_OW 300
20123: IFFALSE 20137
// SaveCharacters ( Joan , Joan ) ;
20125: LD_EXP 16
20129: PPUSH
20130: LD_STRING Joan
20132: PPUSH
20133: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
20137: LD_EXP 17
20141: PPUSH
20142: LD_STRING 06_JoanStatus_1
20144: PPUSH
20145: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20149: LD_INT 50
20151: PUSH
20152: EMPTY
20153: LIST
20154: PUSH
20155: LD_INT 22
20157: PUSH
20158: LD_INT 1
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 21
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 2
20177: PUSH
20178: LD_INT 25
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 25
20190: PUSH
20191: LD_INT 2
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 25
20200: PUSH
20201: LD_INT 3
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 25
20210: PUSH
20211: LD_INT 4
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: PPUSH
20231: CALL_OW 69
20235: PUSH
20236: LD_EXP 1
20240: PUSH
20241: LD_EXP 2
20245: PUSH
20246: LD_EXP 3
20250: PUSH
20251: LD_EXP 4
20255: PUSH
20256: LD_EXP 5
20260: PUSH
20261: LD_EXP 6
20265: PUSH
20266: LD_EXP 7
20270: PUSH
20271: LD_EXP 8
20275: PUSH
20276: LD_EXP 9
20280: PUSH
20281: LD_EXP 16
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: DIFF
20298: PPUSH
20299: LD_STRING 06_other_survivors
20301: PPUSH
20302: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20306: LD_INT 50
20308: PUSH
20309: EMPTY
20310: LIST
20311: PUSH
20312: LD_INT 22
20314: PUSH
20315: LD_INT 1
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 21
20324: PUSH
20325: LD_INT 1
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: LD_INT 25
20337: PUSH
20338: LD_INT 12
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 25
20347: PUSH
20348: LD_INT 16
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: LIST
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: PPUSH
20366: CALL_OW 69
20370: PPUSH
20371: LD_STRING 06_other_apemans
20373: PPUSH
20374: CALL_OW 38
// YouWin ;
20378: CALL_OW 103
// end ; end_of_file
20382: LD_VAR 0 3
20386: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
20387: LD_EXP 48
20391: PUSH
20392: LD_OWVAR 1
20396: PUSH
20397: LD_INT 23100
20399: PUSH
20400: LD_INT 21000
20402: PUSH
20403: LD_INT 18900
20405: PUSH
20406: LD_INT 16800
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: PUSH
20415: LD_OWVAR 67
20419: ARRAY
20420: GREATER
20421: AND
20422: IFFALSE 20769
20424: GO 20426
20426: DISABLE
20427: LD_INT 0
20429: PPUSH
20430: PPUSH
20431: PPUSH
20432: PPUSH
// begin enable ;
20433: ENABLE
// for i in ruAttackers do
20434: LD_ADDR_VAR 0 1
20438: PUSH
20439: LD_EXP 48
20443: PUSH
20444: FOR_IN
20445: IFFALSE 20767
// begin if not IsDrivenBy ( i ) then
20447: LD_VAR 0 1
20451: PPUSH
20452: CALL_OW 311
20456: NOT
20457: IFFALSE 20461
// continue ;
20459: GO 20444
// if i mod 2 = 0 then
20461: LD_VAR 0 1
20465: PUSH
20466: LD_INT 2
20468: MOD
20469: PUSH
20470: LD_INT 0
20472: EQUAL
20473: IFFALSE 20528
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] ] else
20475: LD_ADDR_VAR 0 3
20479: PUSH
20480: LD_INT 91
20482: PUSH
20483: LD_INT 52
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 82
20492: PUSH
20493: LD_INT 34
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 90
20502: PUSH
20503: LD_INT 26
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 86
20512: PUSH
20513: LD_INT 16
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: ST_TO_ADDR
20526: GO 20623
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 44 , 42 ] , [ 33 , 34 ] , [ 29 , 23 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20528: LD_ADDR_VAR 0 3
20532: PUSH
20533: LD_INT 91
20535: PUSH
20536: LD_INT 52
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 68
20545: PUSH
20546: LD_INT 46
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 48
20555: PUSH
20556: LD_INT 43
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 44
20565: PUSH
20566: LD_INT 42
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 33
20575: PUSH
20576: LD_INT 34
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 29
20585: PUSH
20586: LD_INT 23
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 30
20595: PUSH
20596: LD_INT 19
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 38
20605: PUSH
20606: LD_INT 16
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
20623: LD_VAR 0 1
20627: PPUSH
20628: CALL_OW 256
20632: PUSH
20633: LD_INT 1000
20635: EQUAL
20636: IFFALSE 20654
// AgressiveMove ( i , path ) else
20638: LD_VAR 0 1
20642: PPUSH
20643: LD_VAR 0 3
20647: PPUSH
20648: CALL 81516 0 2
20652: GO 20765
// if GetLives ( i ) < 650 then
20654: LD_VAR 0 1
20658: PPUSH
20659: CALL_OW 256
20663: PUSH
20664: LD_INT 650
20666: LESS
20667: IFFALSE 20765
// begin if not IsInArea ( i , russianRepairArea ) then
20669: LD_VAR 0 1
20673: PPUSH
20674: LD_INT 12
20676: PPUSH
20677: CALL_OW 308
20681: NOT
20682: IFFALSE 20751
// begin SetTag ( i , 0 ) ;
20684: LD_VAR 0 1
20688: PPUSH
20689: LD_INT 0
20691: PPUSH
20692: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
20696: LD_VAR 0 1
20700: PPUSH
20701: CALL_OW 261
20705: PUSH
20706: LD_INT 50
20708: LESS
20709: PUSH
20710: LD_INT 21
20712: PPUSH
20713: CALL_OW 302
20717: AND
20718: IFFALSE 20734
// ComMoveUnit ( i , rufab ) else
20720: LD_VAR 0 1
20724: PPUSH
20725: LD_INT 21
20727: PPUSH
20728: CALL_OW 112
20732: GO 20749
// ComMoveXY ( i , 121 , 99 ) ;
20734: LD_VAR 0 1
20738: PPUSH
20739: LD_INT 121
20741: PPUSH
20742: LD_INT 99
20744: PPUSH
20745: CALL_OW 111
// end else
20749: GO 20765
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
20751: LD_VAR 0 1
20755: PPUSH
20756: CALL_OW 311
20760: PPUSH
20761: CALL 80612 0 1
// end ; end ;
20765: GO 20444
20767: POP
20768: POP
// end ;
20769: PPOPN 4
20771: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
20772: LD_INT 0
20774: PPUSH
20775: PPUSH
20776: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
20777: LD_ADDR_VAR 0 2
20781: PUSH
20782: DOUBLE
20783: LD_INT 1
20785: DEC
20786: ST_TO_ADDR
20787: LD_INT 4
20789: PUSH
20790: LD_INT 5
20792: PUSH
20793: LD_INT 6
20795: PUSH
20796: LD_INT 6
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: PUSH
20805: LD_OWVAR 67
20809: ARRAY
20810: PUSH
20811: FOR_TO
20812: IFFALSE 20987
// begin uc_side := 3 ;
20814: LD_ADDR_OWVAR 20
20818: PUSH
20819: LD_INT 3
20821: ST_TO_ADDR
// uc_nation := 3 ;
20822: LD_ADDR_OWVAR 21
20826: PUSH
20827: LD_INT 3
20829: ST_TO_ADDR
// InitHC_All ( ) ;
20830: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
20834: LD_INT 0
20836: PPUSH
20837: LD_INT 4
20839: PUSH
20840: LD_INT 5
20842: PUSH
20843: LD_INT 6
20845: PUSH
20846: LD_INT 6
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: PUSH
20855: LD_OWVAR 67
20859: ARRAY
20860: PPUSH
20861: CALL_OW 381
// un := CreateHuman ;
20865: LD_ADDR_VAR 0 3
20869: PUSH
20870: CALL_OW 44
20874: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
20875: LD_VAR 0 3
20879: PPUSH
20880: LD_INT 127
20882: PPUSH
20883: LD_INT 62
20885: PPUSH
20886: LD_INT 3
20888: PPUSH
20889: LD_INT 0
20891: PPUSH
20892: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
20896: LD_ADDR_EXP 49
20900: PUSH
20901: LD_EXP 49
20905: PPUSH
20906: LD_EXP 49
20910: PUSH
20911: LD_INT 1
20913: PLUS
20914: PPUSH
20915: LD_VAR 0 3
20919: PPUSH
20920: CALL_OW 1
20924: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
20925: LD_VAR 0 3
20929: PPUSH
20930: LD_INT 83
20932: PPUSH
20933: LD_INT 49
20935: PPUSH
20936: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
20940: LD_VAR 0 3
20944: PPUSH
20945: LD_INT 49
20947: PPUSH
20948: LD_INT 43
20950: PPUSH
20951: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
20955: LD_VAR 0 3
20959: PPUSH
20960: LD_INT 31
20962: PPUSH
20963: LD_INT 15
20965: PPUSH
20966: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
20970: LD_VAR 0 3
20974: PPUSH
20975: LD_INT 63
20977: PPUSH
20978: LD_INT 9
20980: PPUSH
20981: CALL_OW 174
// end ;
20985: GO 20811
20987: POP
20988: POP
// end ; end_of_file
20989: LD_VAR 0 1
20993: RET
// export function CreateNature ; var i , un ; begin
20994: LD_INT 0
20996: PPUSH
20997: PPUSH
20998: PPUSH
// for i := 1 to Difficulty + 2 do
20999: LD_ADDR_VAR 0 2
21003: PUSH
21004: DOUBLE
21005: LD_INT 1
21007: DEC
21008: ST_TO_ADDR
21009: LD_OWVAR 67
21013: PUSH
21014: LD_INT 2
21016: PLUS
21017: PUSH
21018: FOR_TO
21019: IFFALSE 21128
// begin hc_sex := sex_male ;
21021: LD_ADDR_OWVAR 27
21025: PUSH
21026: LD_INT 1
21028: ST_TO_ADDR
// uc_side := 0 ;
21029: LD_ADDR_OWVAR 20
21033: PUSH
21034: LD_INT 0
21036: ST_TO_ADDR
// uc_nation := nation_nature ;
21037: LD_ADDR_OWVAR 21
21041: PUSH
21042: LD_INT 0
21044: ST_TO_ADDR
// hc_class := class_tiger ;
21045: LD_ADDR_OWVAR 28
21049: PUSH
21050: LD_INT 14
21052: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21053: LD_ADDR_OWVAR 31
21057: PUSH
21058: LD_EXP 36
21062: PUSH
21063: LD_INT 0
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: LD_INT 0
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
21078: LD_ADDR_OWVAR 35
21082: PUSH
21083: LD_INT 5
21085: NEG
21086: PPUSH
21087: LD_INT 5
21089: PPUSH
21090: CALL_OW 12
21094: PUSH
21095: LD_OWVAR 67
21099: MUL
21100: ST_TO_ADDR
// un := CreateHuman ;
21101: LD_ADDR_VAR 0 3
21105: PUSH
21106: CALL_OW 44
21110: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21111: LD_VAR 0 3
21115: PPUSH
21116: LD_INT 18
21118: PPUSH
21119: LD_INT 0
21121: PPUSH
21122: CALL_OW 49
// end ;
21126: GO 21018
21128: POP
21129: POP
// for i = 1 to rand ( 3 , 4 ) do
21130: LD_ADDR_VAR 0 2
21134: PUSH
21135: DOUBLE
21136: LD_INT 1
21138: DEC
21139: ST_TO_ADDR
21140: LD_INT 3
21142: PPUSH
21143: LD_INT 4
21145: PPUSH
21146: CALL_OW 12
21150: PUSH
21151: FOR_TO
21152: IFFALSE 21222
// begin hc_class := class_phororhacos ;
21154: LD_ADDR_OWVAR 28
21158: PUSH
21159: LD_INT 18
21161: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21162: LD_ADDR_OWVAR 31
21166: PUSH
21167: LD_EXP 36
21171: PUSH
21172: LD_INT 0
21174: PUSH
21175: LD_INT 0
21177: PUSH
21178: LD_INT 0
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: ST_TO_ADDR
// hc_agressivity := 0 ;
21187: LD_ADDR_OWVAR 35
21191: PUSH
21192: LD_INT 0
21194: ST_TO_ADDR
// un = CreateHuman ;
21195: LD_ADDR_VAR 0 3
21199: PUSH
21200: CALL_OW 44
21204: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21205: LD_VAR 0 3
21209: PPUSH
21210: LD_INT 18
21212: PPUSH
21213: LD_INT 0
21215: PPUSH
21216: CALL_OW 49
// end ;
21220: GO 21151
21222: POP
21223: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
21224: LD_ADDR_VAR 0 2
21228: PUSH
21229: DOUBLE
21230: LD_INT 1
21232: DEC
21233: ST_TO_ADDR
21234: LD_INT 3
21236: PUSH
21237: LD_INT 3
21239: PUSH
21240: LD_INT 4
21242: PUSH
21243: LD_INT 5
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: PUSH
21252: LD_OWVAR 67
21256: ARRAY
21257: PUSH
21258: FOR_TO
21259: IFFALSE 21400
// begin hc_class := class_apeman ;
21261: LD_ADDR_OWVAR 28
21265: PUSH
21266: LD_INT 12
21268: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21269: LD_ADDR_OWVAR 31
21273: PUSH
21274: LD_INT 2
21276: PPUSH
21277: LD_INT 5
21279: PPUSH
21280: CALL_OW 12
21284: PUSH
21285: LD_INT 0
21287: PPUSH
21288: LD_INT 2
21290: PPUSH
21291: CALL_OW 12
21295: PUSH
21296: LD_INT 0
21298: PUSH
21299: LD_INT 0
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: ST_TO_ADDR
// hc_agressivity := [ rand ( - 5 , 10 ) , rand ( - 10 , 20 ) , rand ( - 20 , 25 ) , rand ( - 30 , 30 ) ] [ Difficulty ] ;
21308: LD_ADDR_OWVAR 35
21312: PUSH
21313: LD_INT 5
21315: NEG
21316: PPUSH
21317: LD_INT 10
21319: PPUSH
21320: CALL_OW 12
21324: PUSH
21325: LD_INT 10
21327: NEG
21328: PPUSH
21329: LD_INT 20
21331: PPUSH
21332: CALL_OW 12
21336: PUSH
21337: LD_INT 20
21339: NEG
21340: PPUSH
21341: LD_INT 25
21343: PPUSH
21344: CALL_OW 12
21348: PUSH
21349: LD_INT 30
21351: NEG
21352: PPUSH
21353: LD_INT 30
21355: PPUSH
21356: CALL_OW 12
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: PUSH
21367: LD_OWVAR 67
21371: ARRAY
21372: ST_TO_ADDR
// un := CreateHuman ;
21373: LD_ADDR_VAR 0 3
21377: PUSH
21378: CALL_OW 44
21382: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21383: LD_VAR 0 3
21387: PPUSH
21388: LD_INT 19
21390: PPUSH
21391: LD_INT 0
21393: PPUSH
21394: CALL_OW 49
// end ;
21398: GO 21258
21400: POP
21401: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
21402: LD_ADDR_VAR 0 2
21406: PUSH
21407: DOUBLE
21408: LD_INT 1
21410: DEC
21411: ST_TO_ADDR
21412: LD_INT 3
21414: PUSH
21415: LD_INT 4
21417: PUSH
21418: LD_INT 5
21420: PUSH
21421: LD_INT 6
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: PUSH
21430: LD_OWVAR 67
21434: ARRAY
21435: PUSH
21436: FOR_TO
21437: IFFALSE 21530
// begin hc_class := class_apeman ;
21439: LD_ADDR_OWVAR 28
21443: PUSH
21444: LD_INT 12
21446: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21447: LD_ADDR_OWVAR 31
21451: PUSH
21452: LD_INT 2
21454: PPUSH
21455: LD_INT 5
21457: PPUSH
21458: CALL_OW 12
21462: PUSH
21463: LD_INT 0
21465: PPUSH
21466: LD_INT 2
21468: PPUSH
21469: CALL_OW 12
21473: PUSH
21474: LD_INT 0
21476: PUSH
21477: LD_INT 0
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: ST_TO_ADDR
// hc_agressivity := rand ( - 15 , 15 ) ;
21486: LD_ADDR_OWVAR 35
21490: PUSH
21491: LD_INT 15
21493: NEG
21494: PPUSH
21495: LD_INT 15
21497: PPUSH
21498: CALL_OW 12
21502: ST_TO_ADDR
// un = CreateHuman ;
21503: LD_ADDR_VAR 0 3
21507: PUSH
21508: CALL_OW 44
21512: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21513: LD_VAR 0 3
21517: PPUSH
21518: LD_INT 20
21520: PPUSH
21521: LD_INT 0
21523: PPUSH
21524: CALL_OW 49
// end ;
21528: GO 21436
21530: POP
21531: POP
// end ; end_of_file end_of_file
21532: LD_VAR 0 1
21536: RET
// export globalGameSaveCounter ; every 0 0$1 do
21537: GO 21539
21539: DISABLE
// begin enable ;
21540: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21541: LD_STRING updateTimer(
21543: PUSH
21544: LD_OWVAR 1
21548: STR
21549: PUSH
21550: LD_STRING );
21552: STR
21553: PPUSH
21554: CALL_OW 559
// end ;
21558: END
// every 0 0$1 do
21559: GO 21561
21561: DISABLE
// begin globalGameSaveCounter := 0 ;
21562: LD_ADDR_EXP 50
21566: PUSH
21567: LD_INT 0
21569: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
21570: LD_STRING setGameSaveCounter(0)
21572: PPUSH
21573: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
21577: LD_STRING initStreamRollete();
21579: PPUSH
21580: CALL_OW 559
// InitStreamMode ;
21584: CALL 22910 0 0
// DefineStreamItems ( false ) ;
21588: LD_INT 0
21590: PPUSH
21591: CALL 23374 0 1
// end ;
21595: END
// export function SOS_MapStart ( ) ; begin
21596: LD_INT 0
21598: PPUSH
// if streamModeActive then
21599: LD_EXP 51
21603: IFFALSE 21612
// DefineStreamItems ( true ) ;
21605: LD_INT 1
21607: PPUSH
21608: CALL 23374 0 1
// UpdateLuaVariables ( ) ;
21612: CALL 21629 0 0
// UpdateFactoryWaypoints ( ) ;
21616: CALL 36235 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21620: CALL 36492 0 0
// end ;
21624: LD_VAR 0 1
21628: RET
// function UpdateLuaVariables ( ) ; begin
21629: LD_INT 0
21631: PPUSH
// if globalGameSaveCounter then
21632: LD_EXP 50
21636: IFFALSE 21670
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
21638: LD_ADDR_EXP 50
21642: PUSH
21643: LD_EXP 50
21647: PPUSH
21648: CALL 80273 0 1
21652: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21653: LD_STRING setGameSaveCounter(
21655: PUSH
21656: LD_EXP 50
21660: STR
21661: PUSH
21662: LD_STRING )
21664: STR
21665: PPUSH
21666: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
21670: LD_STRING setGameDifficulty(
21672: PUSH
21673: LD_OWVAR 67
21677: STR
21678: PUSH
21679: LD_STRING )
21681: STR
21682: PPUSH
21683: CALL_OW 559
// end ;
21687: LD_VAR 0 1
21691: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21692: LD_INT 0
21694: PPUSH
// if p2 = stream_mode then
21695: LD_VAR 0 2
21699: PUSH
21700: LD_INT 100
21702: EQUAL
21703: IFFALSE 22706
// begin if not StreamModeActive then
21705: LD_EXP 51
21709: NOT
21710: IFFALSE 21720
// StreamModeActive := true ;
21712: LD_ADDR_EXP 51
21716: PUSH
21717: LD_INT 1
21719: ST_TO_ADDR
// if p3 = 0 then
21720: LD_VAR 0 3
21724: PUSH
21725: LD_INT 0
21727: EQUAL
21728: IFFALSE 21734
// InitStreamMode ;
21730: CALL 22910 0 0
// if p3 = 1 then
21734: LD_VAR 0 3
21738: PUSH
21739: LD_INT 1
21741: EQUAL
21742: IFFALSE 21752
// sRocket := true ;
21744: LD_ADDR_EXP 56
21748: PUSH
21749: LD_INT 1
21751: ST_TO_ADDR
// if p3 = 2 then
21752: LD_VAR 0 3
21756: PUSH
21757: LD_INT 2
21759: EQUAL
21760: IFFALSE 21770
// sSpeed := true ;
21762: LD_ADDR_EXP 55
21766: PUSH
21767: LD_INT 1
21769: ST_TO_ADDR
// if p3 = 3 then
21770: LD_VAR 0 3
21774: PUSH
21775: LD_INT 3
21777: EQUAL
21778: IFFALSE 21788
// sEngine := true ;
21780: LD_ADDR_EXP 57
21784: PUSH
21785: LD_INT 1
21787: ST_TO_ADDR
// if p3 = 4 then
21788: LD_VAR 0 3
21792: PUSH
21793: LD_INT 4
21795: EQUAL
21796: IFFALSE 21806
// sSpec := true ;
21798: LD_ADDR_EXP 54
21802: PUSH
21803: LD_INT 1
21805: ST_TO_ADDR
// if p3 = 5 then
21806: LD_VAR 0 3
21810: PUSH
21811: LD_INT 5
21813: EQUAL
21814: IFFALSE 21824
// sLevel := true ;
21816: LD_ADDR_EXP 58
21820: PUSH
21821: LD_INT 1
21823: ST_TO_ADDR
// if p3 = 6 then
21824: LD_VAR 0 3
21828: PUSH
21829: LD_INT 6
21831: EQUAL
21832: IFFALSE 21842
// sArmoury := true ;
21834: LD_ADDR_EXP 59
21838: PUSH
21839: LD_INT 1
21841: ST_TO_ADDR
// if p3 = 7 then
21842: LD_VAR 0 3
21846: PUSH
21847: LD_INT 7
21849: EQUAL
21850: IFFALSE 21860
// sRadar := true ;
21852: LD_ADDR_EXP 60
21856: PUSH
21857: LD_INT 1
21859: ST_TO_ADDR
// if p3 = 8 then
21860: LD_VAR 0 3
21864: PUSH
21865: LD_INT 8
21867: EQUAL
21868: IFFALSE 21878
// sBunker := true ;
21870: LD_ADDR_EXP 61
21874: PUSH
21875: LD_INT 1
21877: ST_TO_ADDR
// if p3 = 9 then
21878: LD_VAR 0 3
21882: PUSH
21883: LD_INT 9
21885: EQUAL
21886: IFFALSE 21896
// sHack := true ;
21888: LD_ADDR_EXP 62
21892: PUSH
21893: LD_INT 1
21895: ST_TO_ADDR
// if p3 = 10 then
21896: LD_VAR 0 3
21900: PUSH
21901: LD_INT 10
21903: EQUAL
21904: IFFALSE 21914
// sFire := true ;
21906: LD_ADDR_EXP 63
21910: PUSH
21911: LD_INT 1
21913: ST_TO_ADDR
// if p3 = 11 then
21914: LD_VAR 0 3
21918: PUSH
21919: LD_INT 11
21921: EQUAL
21922: IFFALSE 21932
// sRefresh := true ;
21924: LD_ADDR_EXP 64
21928: PUSH
21929: LD_INT 1
21931: ST_TO_ADDR
// if p3 = 12 then
21932: LD_VAR 0 3
21936: PUSH
21937: LD_INT 12
21939: EQUAL
21940: IFFALSE 21950
// sExp := true ;
21942: LD_ADDR_EXP 65
21946: PUSH
21947: LD_INT 1
21949: ST_TO_ADDR
// if p3 = 13 then
21950: LD_VAR 0 3
21954: PUSH
21955: LD_INT 13
21957: EQUAL
21958: IFFALSE 21968
// sDepot := true ;
21960: LD_ADDR_EXP 66
21964: PUSH
21965: LD_INT 1
21967: ST_TO_ADDR
// if p3 = 14 then
21968: LD_VAR 0 3
21972: PUSH
21973: LD_INT 14
21975: EQUAL
21976: IFFALSE 21986
// sFlag := true ;
21978: LD_ADDR_EXP 67
21982: PUSH
21983: LD_INT 1
21985: ST_TO_ADDR
// if p3 = 15 then
21986: LD_VAR 0 3
21990: PUSH
21991: LD_INT 15
21993: EQUAL
21994: IFFALSE 22004
// sKamikadze := true ;
21996: LD_ADDR_EXP 75
22000: PUSH
22001: LD_INT 1
22003: ST_TO_ADDR
// if p3 = 16 then
22004: LD_VAR 0 3
22008: PUSH
22009: LD_INT 16
22011: EQUAL
22012: IFFALSE 22022
// sTroll := true ;
22014: LD_ADDR_EXP 76
22018: PUSH
22019: LD_INT 1
22021: ST_TO_ADDR
// if p3 = 17 then
22022: LD_VAR 0 3
22026: PUSH
22027: LD_INT 17
22029: EQUAL
22030: IFFALSE 22040
// sSlow := true ;
22032: LD_ADDR_EXP 77
22036: PUSH
22037: LD_INT 1
22039: ST_TO_ADDR
// if p3 = 18 then
22040: LD_VAR 0 3
22044: PUSH
22045: LD_INT 18
22047: EQUAL
22048: IFFALSE 22058
// sLack := true ;
22050: LD_ADDR_EXP 78
22054: PUSH
22055: LD_INT 1
22057: ST_TO_ADDR
// if p3 = 19 then
22058: LD_VAR 0 3
22062: PUSH
22063: LD_INT 19
22065: EQUAL
22066: IFFALSE 22076
// sTank := true ;
22068: LD_ADDR_EXP 80
22072: PUSH
22073: LD_INT 1
22075: ST_TO_ADDR
// if p3 = 20 then
22076: LD_VAR 0 3
22080: PUSH
22081: LD_INT 20
22083: EQUAL
22084: IFFALSE 22094
// sRemote := true ;
22086: LD_ADDR_EXP 81
22090: PUSH
22091: LD_INT 1
22093: ST_TO_ADDR
// if p3 = 21 then
22094: LD_VAR 0 3
22098: PUSH
22099: LD_INT 21
22101: EQUAL
22102: IFFALSE 22112
// sPowell := true ;
22104: LD_ADDR_EXP 82
22108: PUSH
22109: LD_INT 1
22111: ST_TO_ADDR
// if p3 = 22 then
22112: LD_VAR 0 3
22116: PUSH
22117: LD_INT 22
22119: EQUAL
22120: IFFALSE 22130
// sTeleport := true ;
22122: LD_ADDR_EXP 85
22126: PUSH
22127: LD_INT 1
22129: ST_TO_ADDR
// if p3 = 23 then
22130: LD_VAR 0 3
22134: PUSH
22135: LD_INT 23
22137: EQUAL
22138: IFFALSE 22148
// sOilTower := true ;
22140: LD_ADDR_EXP 87
22144: PUSH
22145: LD_INT 1
22147: ST_TO_ADDR
// if p3 = 24 then
22148: LD_VAR 0 3
22152: PUSH
22153: LD_INT 24
22155: EQUAL
22156: IFFALSE 22166
// sShovel := true ;
22158: LD_ADDR_EXP 88
22162: PUSH
22163: LD_INT 1
22165: ST_TO_ADDR
// if p3 = 25 then
22166: LD_VAR 0 3
22170: PUSH
22171: LD_INT 25
22173: EQUAL
22174: IFFALSE 22184
// sSheik := true ;
22176: LD_ADDR_EXP 89
22180: PUSH
22181: LD_INT 1
22183: ST_TO_ADDR
// if p3 = 26 then
22184: LD_VAR 0 3
22188: PUSH
22189: LD_INT 26
22191: EQUAL
22192: IFFALSE 22202
// sEarthquake := true ;
22194: LD_ADDR_EXP 91
22198: PUSH
22199: LD_INT 1
22201: ST_TO_ADDR
// if p3 = 27 then
22202: LD_VAR 0 3
22206: PUSH
22207: LD_INT 27
22209: EQUAL
22210: IFFALSE 22220
// sAI := true ;
22212: LD_ADDR_EXP 92
22216: PUSH
22217: LD_INT 1
22219: ST_TO_ADDR
// if p3 = 28 then
22220: LD_VAR 0 3
22224: PUSH
22225: LD_INT 28
22227: EQUAL
22228: IFFALSE 22238
// sCargo := true ;
22230: LD_ADDR_EXP 95
22234: PUSH
22235: LD_INT 1
22237: ST_TO_ADDR
// if p3 = 29 then
22238: LD_VAR 0 3
22242: PUSH
22243: LD_INT 29
22245: EQUAL
22246: IFFALSE 22256
// sDLaser := true ;
22248: LD_ADDR_EXP 96
22252: PUSH
22253: LD_INT 1
22255: ST_TO_ADDR
// if p3 = 30 then
22256: LD_VAR 0 3
22260: PUSH
22261: LD_INT 30
22263: EQUAL
22264: IFFALSE 22274
// sExchange := true ;
22266: LD_ADDR_EXP 97
22270: PUSH
22271: LD_INT 1
22273: ST_TO_ADDR
// if p3 = 31 then
22274: LD_VAR 0 3
22278: PUSH
22279: LD_INT 31
22281: EQUAL
22282: IFFALSE 22292
// sFac := true ;
22284: LD_ADDR_EXP 98
22288: PUSH
22289: LD_INT 1
22291: ST_TO_ADDR
// if p3 = 32 then
22292: LD_VAR 0 3
22296: PUSH
22297: LD_INT 32
22299: EQUAL
22300: IFFALSE 22310
// sPower := true ;
22302: LD_ADDR_EXP 99
22306: PUSH
22307: LD_INT 1
22309: ST_TO_ADDR
// if p3 = 33 then
22310: LD_VAR 0 3
22314: PUSH
22315: LD_INT 33
22317: EQUAL
22318: IFFALSE 22328
// sRandom := true ;
22320: LD_ADDR_EXP 100
22324: PUSH
22325: LD_INT 1
22327: ST_TO_ADDR
// if p3 = 34 then
22328: LD_VAR 0 3
22332: PUSH
22333: LD_INT 34
22335: EQUAL
22336: IFFALSE 22346
// sShield := true ;
22338: LD_ADDR_EXP 101
22342: PUSH
22343: LD_INT 1
22345: ST_TO_ADDR
// if p3 = 35 then
22346: LD_VAR 0 3
22350: PUSH
22351: LD_INT 35
22353: EQUAL
22354: IFFALSE 22364
// sTime := true ;
22356: LD_ADDR_EXP 102
22360: PUSH
22361: LD_INT 1
22363: ST_TO_ADDR
// if p3 = 36 then
22364: LD_VAR 0 3
22368: PUSH
22369: LD_INT 36
22371: EQUAL
22372: IFFALSE 22382
// sTools := true ;
22374: LD_ADDR_EXP 103
22378: PUSH
22379: LD_INT 1
22381: ST_TO_ADDR
// if p3 = 101 then
22382: LD_VAR 0 3
22386: PUSH
22387: LD_INT 101
22389: EQUAL
22390: IFFALSE 22400
// sSold := true ;
22392: LD_ADDR_EXP 68
22396: PUSH
22397: LD_INT 1
22399: ST_TO_ADDR
// if p3 = 102 then
22400: LD_VAR 0 3
22404: PUSH
22405: LD_INT 102
22407: EQUAL
22408: IFFALSE 22418
// sDiff := true ;
22410: LD_ADDR_EXP 69
22414: PUSH
22415: LD_INT 1
22417: ST_TO_ADDR
// if p3 = 103 then
22418: LD_VAR 0 3
22422: PUSH
22423: LD_INT 103
22425: EQUAL
22426: IFFALSE 22436
// sFog := true ;
22428: LD_ADDR_EXP 72
22432: PUSH
22433: LD_INT 1
22435: ST_TO_ADDR
// if p3 = 104 then
22436: LD_VAR 0 3
22440: PUSH
22441: LD_INT 104
22443: EQUAL
22444: IFFALSE 22454
// sReset := true ;
22446: LD_ADDR_EXP 73
22450: PUSH
22451: LD_INT 1
22453: ST_TO_ADDR
// if p3 = 105 then
22454: LD_VAR 0 3
22458: PUSH
22459: LD_INT 105
22461: EQUAL
22462: IFFALSE 22472
// sSun := true ;
22464: LD_ADDR_EXP 74
22468: PUSH
22469: LD_INT 1
22471: ST_TO_ADDR
// if p3 = 106 then
22472: LD_VAR 0 3
22476: PUSH
22477: LD_INT 106
22479: EQUAL
22480: IFFALSE 22490
// sTiger := true ;
22482: LD_ADDR_EXP 70
22486: PUSH
22487: LD_INT 1
22489: ST_TO_ADDR
// if p3 = 107 then
22490: LD_VAR 0 3
22494: PUSH
22495: LD_INT 107
22497: EQUAL
22498: IFFALSE 22508
// sBomb := true ;
22500: LD_ADDR_EXP 71
22504: PUSH
22505: LD_INT 1
22507: ST_TO_ADDR
// if p3 = 108 then
22508: LD_VAR 0 3
22512: PUSH
22513: LD_INT 108
22515: EQUAL
22516: IFFALSE 22526
// sWound := true ;
22518: LD_ADDR_EXP 79
22522: PUSH
22523: LD_INT 1
22525: ST_TO_ADDR
// if p3 = 109 then
22526: LD_VAR 0 3
22530: PUSH
22531: LD_INT 109
22533: EQUAL
22534: IFFALSE 22544
// sBetray := true ;
22536: LD_ADDR_EXP 83
22540: PUSH
22541: LD_INT 1
22543: ST_TO_ADDR
// if p3 = 110 then
22544: LD_VAR 0 3
22548: PUSH
22549: LD_INT 110
22551: EQUAL
22552: IFFALSE 22562
// sContamin := true ;
22554: LD_ADDR_EXP 84
22558: PUSH
22559: LD_INT 1
22561: ST_TO_ADDR
// if p3 = 111 then
22562: LD_VAR 0 3
22566: PUSH
22567: LD_INT 111
22569: EQUAL
22570: IFFALSE 22580
// sOil := true ;
22572: LD_ADDR_EXP 86
22576: PUSH
22577: LD_INT 1
22579: ST_TO_ADDR
// if p3 = 112 then
22580: LD_VAR 0 3
22584: PUSH
22585: LD_INT 112
22587: EQUAL
22588: IFFALSE 22598
// sStu := true ;
22590: LD_ADDR_EXP 90
22594: PUSH
22595: LD_INT 1
22597: ST_TO_ADDR
// if p3 = 113 then
22598: LD_VAR 0 3
22602: PUSH
22603: LD_INT 113
22605: EQUAL
22606: IFFALSE 22616
// sBazooka := true ;
22608: LD_ADDR_EXP 93
22612: PUSH
22613: LD_INT 1
22615: ST_TO_ADDR
// if p3 = 114 then
22616: LD_VAR 0 3
22620: PUSH
22621: LD_INT 114
22623: EQUAL
22624: IFFALSE 22634
// sMortar := true ;
22626: LD_ADDR_EXP 94
22630: PUSH
22631: LD_INT 1
22633: ST_TO_ADDR
// if p3 = 115 then
22634: LD_VAR 0 3
22638: PUSH
22639: LD_INT 115
22641: EQUAL
22642: IFFALSE 22652
// sRanger := true ;
22644: LD_ADDR_EXP 104
22648: PUSH
22649: LD_INT 1
22651: ST_TO_ADDR
// if p3 = 116 then
22652: LD_VAR 0 3
22656: PUSH
22657: LD_INT 116
22659: EQUAL
22660: IFFALSE 22670
// sComputer := true ;
22662: LD_ADDR_EXP 105
22666: PUSH
22667: LD_INT 1
22669: ST_TO_ADDR
// if p3 = 117 then
22670: LD_VAR 0 3
22674: PUSH
22675: LD_INT 117
22677: EQUAL
22678: IFFALSE 22688
// s30 := true ;
22680: LD_ADDR_EXP 106
22684: PUSH
22685: LD_INT 1
22687: ST_TO_ADDR
// if p3 = 118 then
22688: LD_VAR 0 3
22692: PUSH
22693: LD_INT 118
22695: EQUAL
22696: IFFALSE 22706
// s60 := true ;
22698: LD_ADDR_EXP 107
22702: PUSH
22703: LD_INT 1
22705: ST_TO_ADDR
// end ; if p2 = hack_mode then
22706: LD_VAR 0 2
22710: PUSH
22711: LD_INT 101
22713: EQUAL
22714: IFFALSE 22842
// begin case p3 of 1 :
22716: LD_VAR 0 3
22720: PUSH
22721: LD_INT 1
22723: DOUBLE
22724: EQUAL
22725: IFTRUE 22729
22727: GO 22736
22729: POP
// hHackUnlimitedResources ; 2 :
22730: CALL 34981 0 0
22734: GO 22842
22736: LD_INT 2
22738: DOUBLE
22739: EQUAL
22740: IFTRUE 22744
22742: GO 22751
22744: POP
// hHackSetLevel10 ; 3 :
22745: CALL 35114 0 0
22749: GO 22842
22751: LD_INT 3
22753: DOUBLE
22754: EQUAL
22755: IFTRUE 22759
22757: GO 22766
22759: POP
// hHackSetLevel10YourUnits ; 4 :
22760: CALL 35199 0 0
22764: GO 22842
22766: LD_INT 4
22768: DOUBLE
22769: EQUAL
22770: IFTRUE 22774
22772: GO 22781
22774: POP
// hHackInvincible ; 5 :
22775: CALL 35647 0 0
22779: GO 22842
22781: LD_INT 5
22783: DOUBLE
22784: EQUAL
22785: IFTRUE 22789
22787: GO 22796
22789: POP
// hHackInvisible ; 6 :
22790: CALL 35758 0 0
22794: GO 22842
22796: LD_INT 6
22798: DOUBLE
22799: EQUAL
22800: IFTRUE 22804
22802: GO 22811
22804: POP
// hHackChangeYourSide ; 7 :
22805: CALL 35815 0 0
22809: GO 22842
22811: LD_INT 7
22813: DOUBLE
22814: EQUAL
22815: IFTRUE 22819
22817: GO 22826
22819: POP
// hHackChangeUnitSide ; 8 :
22820: CALL 35857 0 0
22824: GO 22842
22826: LD_INT 8
22828: DOUBLE
22829: EQUAL
22830: IFTRUE 22834
22832: GO 22841
22834: POP
// hHackFog ; end ;
22835: CALL 35958 0 0
22839: GO 22842
22841: POP
// end ; if p2 = game_save_mode then
22842: LD_VAR 0 2
22846: PUSH
22847: LD_INT 102
22849: EQUAL
22850: IFFALSE 22905
// begin if p3 = 1 then
22852: LD_VAR 0 3
22856: PUSH
22857: LD_INT 1
22859: EQUAL
22860: IFFALSE 22872
// globalGameSaveCounter := p4 ;
22862: LD_ADDR_EXP 50
22866: PUSH
22867: LD_VAR 0 4
22871: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
22872: LD_VAR 0 3
22876: PUSH
22877: LD_INT 2
22879: EQUAL
22880: PUSH
22881: LD_EXP 50
22885: AND
22886: IFFALSE 22905
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22888: LD_STRING setGameSaveCounter(
22890: PUSH
22891: LD_EXP 50
22895: STR
22896: PUSH
22897: LD_STRING )
22899: STR
22900: PPUSH
22901: CALL_OW 559
// end ; end ;
22905: LD_VAR 0 7
22909: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
22910: LD_INT 0
22912: PPUSH
// streamModeActive := false ;
22913: LD_ADDR_EXP 51
22917: PUSH
22918: LD_INT 0
22920: ST_TO_ADDR
// normalCounter := 36 ;
22921: LD_ADDR_EXP 52
22925: PUSH
22926: LD_INT 36
22928: ST_TO_ADDR
// hardcoreCounter := 18 ;
22929: LD_ADDR_EXP 53
22933: PUSH
22934: LD_INT 18
22936: ST_TO_ADDR
// sRocket := false ;
22937: LD_ADDR_EXP 56
22941: PUSH
22942: LD_INT 0
22944: ST_TO_ADDR
// sSpeed := false ;
22945: LD_ADDR_EXP 55
22949: PUSH
22950: LD_INT 0
22952: ST_TO_ADDR
// sEngine := false ;
22953: LD_ADDR_EXP 57
22957: PUSH
22958: LD_INT 0
22960: ST_TO_ADDR
// sSpec := false ;
22961: LD_ADDR_EXP 54
22965: PUSH
22966: LD_INT 0
22968: ST_TO_ADDR
// sLevel := false ;
22969: LD_ADDR_EXP 58
22973: PUSH
22974: LD_INT 0
22976: ST_TO_ADDR
// sArmoury := false ;
22977: LD_ADDR_EXP 59
22981: PUSH
22982: LD_INT 0
22984: ST_TO_ADDR
// sRadar := false ;
22985: LD_ADDR_EXP 60
22989: PUSH
22990: LD_INT 0
22992: ST_TO_ADDR
// sBunker := false ;
22993: LD_ADDR_EXP 61
22997: PUSH
22998: LD_INT 0
23000: ST_TO_ADDR
// sHack := false ;
23001: LD_ADDR_EXP 62
23005: PUSH
23006: LD_INT 0
23008: ST_TO_ADDR
// sFire := false ;
23009: LD_ADDR_EXP 63
23013: PUSH
23014: LD_INT 0
23016: ST_TO_ADDR
// sRefresh := false ;
23017: LD_ADDR_EXP 64
23021: PUSH
23022: LD_INT 0
23024: ST_TO_ADDR
// sExp := false ;
23025: LD_ADDR_EXP 65
23029: PUSH
23030: LD_INT 0
23032: ST_TO_ADDR
// sDepot := false ;
23033: LD_ADDR_EXP 66
23037: PUSH
23038: LD_INT 0
23040: ST_TO_ADDR
// sFlag := false ;
23041: LD_ADDR_EXP 67
23045: PUSH
23046: LD_INT 0
23048: ST_TO_ADDR
// sKamikadze := false ;
23049: LD_ADDR_EXP 75
23053: PUSH
23054: LD_INT 0
23056: ST_TO_ADDR
// sTroll := false ;
23057: LD_ADDR_EXP 76
23061: PUSH
23062: LD_INT 0
23064: ST_TO_ADDR
// sSlow := false ;
23065: LD_ADDR_EXP 77
23069: PUSH
23070: LD_INT 0
23072: ST_TO_ADDR
// sLack := false ;
23073: LD_ADDR_EXP 78
23077: PUSH
23078: LD_INT 0
23080: ST_TO_ADDR
// sTank := false ;
23081: LD_ADDR_EXP 80
23085: PUSH
23086: LD_INT 0
23088: ST_TO_ADDR
// sRemote := false ;
23089: LD_ADDR_EXP 81
23093: PUSH
23094: LD_INT 0
23096: ST_TO_ADDR
// sPowell := false ;
23097: LD_ADDR_EXP 82
23101: PUSH
23102: LD_INT 0
23104: ST_TO_ADDR
// sTeleport := false ;
23105: LD_ADDR_EXP 85
23109: PUSH
23110: LD_INT 0
23112: ST_TO_ADDR
// sOilTower := false ;
23113: LD_ADDR_EXP 87
23117: PUSH
23118: LD_INT 0
23120: ST_TO_ADDR
// sShovel := false ;
23121: LD_ADDR_EXP 88
23125: PUSH
23126: LD_INT 0
23128: ST_TO_ADDR
// sSheik := false ;
23129: LD_ADDR_EXP 89
23133: PUSH
23134: LD_INT 0
23136: ST_TO_ADDR
// sEarthquake := false ;
23137: LD_ADDR_EXP 91
23141: PUSH
23142: LD_INT 0
23144: ST_TO_ADDR
// sAI := false ;
23145: LD_ADDR_EXP 92
23149: PUSH
23150: LD_INT 0
23152: ST_TO_ADDR
// sCargo := false ;
23153: LD_ADDR_EXP 95
23157: PUSH
23158: LD_INT 0
23160: ST_TO_ADDR
// sDLaser := false ;
23161: LD_ADDR_EXP 96
23165: PUSH
23166: LD_INT 0
23168: ST_TO_ADDR
// sExchange := false ;
23169: LD_ADDR_EXP 97
23173: PUSH
23174: LD_INT 0
23176: ST_TO_ADDR
// sFac := false ;
23177: LD_ADDR_EXP 98
23181: PUSH
23182: LD_INT 0
23184: ST_TO_ADDR
// sPower := false ;
23185: LD_ADDR_EXP 99
23189: PUSH
23190: LD_INT 0
23192: ST_TO_ADDR
// sRandom := false ;
23193: LD_ADDR_EXP 100
23197: PUSH
23198: LD_INT 0
23200: ST_TO_ADDR
// sShield := false ;
23201: LD_ADDR_EXP 101
23205: PUSH
23206: LD_INT 0
23208: ST_TO_ADDR
// sTime := false ;
23209: LD_ADDR_EXP 102
23213: PUSH
23214: LD_INT 0
23216: ST_TO_ADDR
// sTools := false ;
23217: LD_ADDR_EXP 103
23221: PUSH
23222: LD_INT 0
23224: ST_TO_ADDR
// sSold := false ;
23225: LD_ADDR_EXP 68
23229: PUSH
23230: LD_INT 0
23232: ST_TO_ADDR
// sDiff := false ;
23233: LD_ADDR_EXP 69
23237: PUSH
23238: LD_INT 0
23240: ST_TO_ADDR
// sFog := false ;
23241: LD_ADDR_EXP 72
23245: PUSH
23246: LD_INT 0
23248: ST_TO_ADDR
// sReset := false ;
23249: LD_ADDR_EXP 73
23253: PUSH
23254: LD_INT 0
23256: ST_TO_ADDR
// sSun := false ;
23257: LD_ADDR_EXP 74
23261: PUSH
23262: LD_INT 0
23264: ST_TO_ADDR
// sTiger := false ;
23265: LD_ADDR_EXP 70
23269: PUSH
23270: LD_INT 0
23272: ST_TO_ADDR
// sBomb := false ;
23273: LD_ADDR_EXP 71
23277: PUSH
23278: LD_INT 0
23280: ST_TO_ADDR
// sWound := false ;
23281: LD_ADDR_EXP 79
23285: PUSH
23286: LD_INT 0
23288: ST_TO_ADDR
// sBetray := false ;
23289: LD_ADDR_EXP 83
23293: PUSH
23294: LD_INT 0
23296: ST_TO_ADDR
// sContamin := false ;
23297: LD_ADDR_EXP 84
23301: PUSH
23302: LD_INT 0
23304: ST_TO_ADDR
// sOil := false ;
23305: LD_ADDR_EXP 86
23309: PUSH
23310: LD_INT 0
23312: ST_TO_ADDR
// sStu := false ;
23313: LD_ADDR_EXP 90
23317: PUSH
23318: LD_INT 0
23320: ST_TO_ADDR
// sBazooka := false ;
23321: LD_ADDR_EXP 93
23325: PUSH
23326: LD_INT 0
23328: ST_TO_ADDR
// sMortar := false ;
23329: LD_ADDR_EXP 94
23333: PUSH
23334: LD_INT 0
23336: ST_TO_ADDR
// sRanger := false ;
23337: LD_ADDR_EXP 104
23341: PUSH
23342: LD_INT 0
23344: ST_TO_ADDR
// sComputer := false ;
23345: LD_ADDR_EXP 105
23349: PUSH
23350: LD_INT 0
23352: ST_TO_ADDR
// s30 := false ;
23353: LD_ADDR_EXP 106
23357: PUSH
23358: LD_INT 0
23360: ST_TO_ADDR
// s60 := false ;
23361: LD_ADDR_EXP 107
23365: PUSH
23366: LD_INT 0
23368: ST_TO_ADDR
// end ;
23369: LD_VAR 0 1
23373: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
23374: LD_INT 0
23376: PPUSH
23377: PPUSH
23378: PPUSH
23379: PPUSH
23380: PPUSH
23381: PPUSH
23382: PPUSH
// result := [ ] ;
23383: LD_ADDR_VAR 0 2
23387: PUSH
23388: EMPTY
23389: ST_TO_ADDR
// if campaign_id = 1 then
23390: LD_OWVAR 69
23394: PUSH
23395: LD_INT 1
23397: EQUAL
23398: IFFALSE 26564
// begin case mission_number of 1 :
23400: LD_OWVAR 70
23404: PUSH
23405: LD_INT 1
23407: DOUBLE
23408: EQUAL
23409: IFTRUE 23413
23411: GO 23489
23413: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23414: LD_ADDR_VAR 0 2
23418: PUSH
23419: LD_INT 2
23421: PUSH
23422: LD_INT 4
23424: PUSH
23425: LD_INT 11
23427: PUSH
23428: LD_INT 12
23430: PUSH
23431: LD_INT 15
23433: PUSH
23434: LD_INT 16
23436: PUSH
23437: LD_INT 22
23439: PUSH
23440: LD_INT 23
23442: PUSH
23443: LD_INT 26
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 101
23459: PUSH
23460: LD_INT 102
23462: PUSH
23463: LD_INT 106
23465: PUSH
23466: LD_INT 116
23468: PUSH
23469: LD_INT 117
23471: PUSH
23472: LD_INT 118
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: ST_TO_ADDR
23487: GO 26562
23489: LD_INT 2
23491: DOUBLE
23492: EQUAL
23493: IFTRUE 23497
23495: GO 23581
23497: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23498: LD_ADDR_VAR 0 2
23502: PUSH
23503: LD_INT 2
23505: PUSH
23506: LD_INT 4
23508: PUSH
23509: LD_INT 11
23511: PUSH
23512: LD_INT 12
23514: PUSH
23515: LD_INT 15
23517: PUSH
23518: LD_INT 16
23520: PUSH
23521: LD_INT 22
23523: PUSH
23524: LD_INT 23
23526: PUSH
23527: LD_INT 26
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 101
23543: PUSH
23544: LD_INT 102
23546: PUSH
23547: LD_INT 105
23549: PUSH
23550: LD_INT 106
23552: PUSH
23553: LD_INT 108
23555: PUSH
23556: LD_INT 116
23558: PUSH
23559: LD_INT 117
23561: PUSH
23562: LD_INT 118
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: ST_TO_ADDR
23579: GO 26562
23581: LD_INT 3
23583: DOUBLE
23584: EQUAL
23585: IFTRUE 23589
23587: GO 23677
23589: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
23590: LD_ADDR_VAR 0 2
23594: PUSH
23595: LD_INT 2
23597: PUSH
23598: LD_INT 4
23600: PUSH
23601: LD_INT 5
23603: PUSH
23604: LD_INT 11
23606: PUSH
23607: LD_INT 12
23609: PUSH
23610: LD_INT 15
23612: PUSH
23613: LD_INT 16
23615: PUSH
23616: LD_INT 22
23618: PUSH
23619: LD_INT 26
23621: PUSH
23622: LD_INT 36
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 101
23639: PUSH
23640: LD_INT 102
23642: PUSH
23643: LD_INT 105
23645: PUSH
23646: LD_INT 106
23648: PUSH
23649: LD_INT 108
23651: PUSH
23652: LD_INT 116
23654: PUSH
23655: LD_INT 117
23657: PUSH
23658: LD_INT 118
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: ST_TO_ADDR
23675: GO 26562
23677: LD_INT 4
23679: DOUBLE
23680: EQUAL
23681: IFTRUE 23685
23683: GO 23781
23685: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23686: LD_ADDR_VAR 0 2
23690: PUSH
23691: LD_INT 2
23693: PUSH
23694: LD_INT 4
23696: PUSH
23697: LD_INT 5
23699: PUSH
23700: LD_INT 8
23702: PUSH
23703: LD_INT 11
23705: PUSH
23706: LD_INT 12
23708: PUSH
23709: LD_INT 15
23711: PUSH
23712: LD_INT 16
23714: PUSH
23715: LD_INT 22
23717: PUSH
23718: LD_INT 23
23720: PUSH
23721: LD_INT 26
23723: PUSH
23724: LD_INT 36
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 101
23743: PUSH
23744: LD_INT 102
23746: PUSH
23747: LD_INT 105
23749: PUSH
23750: LD_INT 106
23752: PUSH
23753: LD_INT 108
23755: PUSH
23756: LD_INT 116
23758: PUSH
23759: LD_INT 117
23761: PUSH
23762: LD_INT 118
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: ST_TO_ADDR
23779: GO 26562
23781: LD_INT 5
23783: DOUBLE
23784: EQUAL
23785: IFTRUE 23789
23787: GO 23901
23789: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23790: LD_ADDR_VAR 0 2
23794: PUSH
23795: LD_INT 2
23797: PUSH
23798: LD_INT 4
23800: PUSH
23801: LD_INT 5
23803: PUSH
23804: LD_INT 6
23806: PUSH
23807: LD_INT 8
23809: PUSH
23810: LD_INT 11
23812: PUSH
23813: LD_INT 12
23815: PUSH
23816: LD_INT 15
23818: PUSH
23819: LD_INT 16
23821: PUSH
23822: LD_INT 22
23824: PUSH
23825: LD_INT 23
23827: PUSH
23828: LD_INT 25
23830: PUSH
23831: LD_INT 26
23833: PUSH
23834: LD_INT 36
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 101
23855: PUSH
23856: LD_INT 102
23858: PUSH
23859: LD_INT 105
23861: PUSH
23862: LD_INT 106
23864: PUSH
23865: LD_INT 108
23867: PUSH
23868: LD_INT 109
23870: PUSH
23871: LD_INT 112
23873: PUSH
23874: LD_INT 116
23876: PUSH
23877: LD_INT 117
23879: PUSH
23880: LD_INT 118
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: ST_TO_ADDR
23899: GO 26562
23901: LD_INT 6
23903: DOUBLE
23904: EQUAL
23905: IFTRUE 23909
23907: GO 24041
23909: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23910: LD_ADDR_VAR 0 2
23914: PUSH
23915: LD_INT 2
23917: PUSH
23918: LD_INT 4
23920: PUSH
23921: LD_INT 5
23923: PUSH
23924: LD_INT 6
23926: PUSH
23927: LD_INT 8
23929: PUSH
23930: LD_INT 11
23932: PUSH
23933: LD_INT 12
23935: PUSH
23936: LD_INT 15
23938: PUSH
23939: LD_INT 16
23941: PUSH
23942: LD_INT 20
23944: PUSH
23945: LD_INT 21
23947: PUSH
23948: LD_INT 22
23950: PUSH
23951: LD_INT 23
23953: PUSH
23954: LD_INT 25
23956: PUSH
23957: LD_INT 26
23959: PUSH
23960: LD_INT 30
23962: PUSH
23963: LD_INT 31
23965: PUSH
23966: LD_INT 32
23968: PUSH
23969: LD_INT 36
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 101
23995: PUSH
23996: LD_INT 102
23998: PUSH
23999: LD_INT 105
24001: PUSH
24002: LD_INT 106
24004: PUSH
24005: LD_INT 108
24007: PUSH
24008: LD_INT 109
24010: PUSH
24011: LD_INT 112
24013: PUSH
24014: LD_INT 116
24016: PUSH
24017: LD_INT 117
24019: PUSH
24020: LD_INT 118
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: ST_TO_ADDR
24039: GO 26562
24041: LD_INT 7
24043: DOUBLE
24044: EQUAL
24045: IFTRUE 24049
24047: GO 24161
24049: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
24050: LD_ADDR_VAR 0 2
24054: PUSH
24055: LD_INT 2
24057: PUSH
24058: LD_INT 4
24060: PUSH
24061: LD_INT 5
24063: PUSH
24064: LD_INT 7
24066: PUSH
24067: LD_INT 11
24069: PUSH
24070: LD_INT 12
24072: PUSH
24073: LD_INT 15
24075: PUSH
24076: LD_INT 16
24078: PUSH
24079: LD_INT 20
24081: PUSH
24082: LD_INT 21
24084: PUSH
24085: LD_INT 22
24087: PUSH
24088: LD_INT 23
24090: PUSH
24091: LD_INT 25
24093: PUSH
24094: LD_INT 26
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 101
24115: PUSH
24116: LD_INT 102
24118: PUSH
24119: LD_INT 103
24121: PUSH
24122: LD_INT 105
24124: PUSH
24125: LD_INT 106
24127: PUSH
24128: LD_INT 108
24130: PUSH
24131: LD_INT 112
24133: PUSH
24134: LD_INT 116
24136: PUSH
24137: LD_INT 117
24139: PUSH
24140: LD_INT 118
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: ST_TO_ADDR
24159: GO 26562
24161: LD_INT 8
24163: DOUBLE
24164: EQUAL
24165: IFTRUE 24169
24167: GO 24309
24169: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
24170: LD_ADDR_VAR 0 2
24174: PUSH
24175: LD_INT 2
24177: PUSH
24178: LD_INT 4
24180: PUSH
24181: LD_INT 5
24183: PUSH
24184: LD_INT 6
24186: PUSH
24187: LD_INT 7
24189: PUSH
24190: LD_INT 8
24192: PUSH
24193: LD_INT 11
24195: PUSH
24196: LD_INT 12
24198: PUSH
24199: LD_INT 15
24201: PUSH
24202: LD_INT 16
24204: PUSH
24205: LD_INT 20
24207: PUSH
24208: LD_INT 21
24210: PUSH
24211: LD_INT 22
24213: PUSH
24214: LD_INT 23
24216: PUSH
24217: LD_INT 25
24219: PUSH
24220: LD_INT 26
24222: PUSH
24223: LD_INT 30
24225: PUSH
24226: LD_INT 31
24228: PUSH
24229: LD_INT 32
24231: PUSH
24232: LD_INT 36
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 101
24259: PUSH
24260: LD_INT 102
24262: PUSH
24263: LD_INT 103
24265: PUSH
24266: LD_INT 105
24268: PUSH
24269: LD_INT 106
24271: PUSH
24272: LD_INT 108
24274: PUSH
24275: LD_INT 109
24277: PUSH
24278: LD_INT 112
24280: PUSH
24281: LD_INT 116
24283: PUSH
24284: LD_INT 117
24286: PUSH
24287: LD_INT 118
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: ST_TO_ADDR
24307: GO 26562
24309: LD_INT 9
24311: DOUBLE
24312: EQUAL
24313: IFTRUE 24317
24315: GO 24465
24317: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
24318: LD_ADDR_VAR 0 2
24322: PUSH
24323: LD_INT 2
24325: PUSH
24326: LD_INT 4
24328: PUSH
24329: LD_INT 5
24331: PUSH
24332: LD_INT 6
24334: PUSH
24335: LD_INT 7
24337: PUSH
24338: LD_INT 8
24340: PUSH
24341: LD_INT 11
24343: PUSH
24344: LD_INT 12
24346: PUSH
24347: LD_INT 15
24349: PUSH
24350: LD_INT 16
24352: PUSH
24353: LD_INT 20
24355: PUSH
24356: LD_INT 21
24358: PUSH
24359: LD_INT 22
24361: PUSH
24362: LD_INT 23
24364: PUSH
24365: LD_INT 25
24367: PUSH
24368: LD_INT 26
24370: PUSH
24371: LD_INT 28
24373: PUSH
24374: LD_INT 30
24376: PUSH
24377: LD_INT 31
24379: PUSH
24380: LD_INT 32
24382: PUSH
24383: LD_INT 36
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 101
24411: PUSH
24412: LD_INT 102
24414: PUSH
24415: LD_INT 103
24417: PUSH
24418: LD_INT 105
24420: PUSH
24421: LD_INT 106
24423: PUSH
24424: LD_INT 108
24426: PUSH
24427: LD_INT 109
24429: PUSH
24430: LD_INT 112
24432: PUSH
24433: LD_INT 114
24435: PUSH
24436: LD_INT 116
24438: PUSH
24439: LD_INT 117
24441: PUSH
24442: LD_INT 118
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: ST_TO_ADDR
24463: GO 26562
24465: LD_INT 10
24467: DOUBLE
24468: EQUAL
24469: IFTRUE 24473
24471: GO 24669
24473: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24474: LD_ADDR_VAR 0 2
24478: PUSH
24479: LD_INT 2
24481: PUSH
24482: LD_INT 4
24484: PUSH
24485: LD_INT 5
24487: PUSH
24488: LD_INT 6
24490: PUSH
24491: LD_INT 7
24493: PUSH
24494: LD_INT 8
24496: PUSH
24497: LD_INT 9
24499: PUSH
24500: LD_INT 10
24502: PUSH
24503: LD_INT 11
24505: PUSH
24506: LD_INT 12
24508: PUSH
24509: LD_INT 13
24511: PUSH
24512: LD_INT 14
24514: PUSH
24515: LD_INT 15
24517: PUSH
24518: LD_INT 16
24520: PUSH
24521: LD_INT 17
24523: PUSH
24524: LD_INT 18
24526: PUSH
24527: LD_INT 19
24529: PUSH
24530: LD_INT 20
24532: PUSH
24533: LD_INT 21
24535: PUSH
24536: LD_INT 22
24538: PUSH
24539: LD_INT 23
24541: PUSH
24542: LD_INT 24
24544: PUSH
24545: LD_INT 25
24547: PUSH
24548: LD_INT 26
24550: PUSH
24551: LD_INT 28
24553: PUSH
24554: LD_INT 30
24556: PUSH
24557: LD_INT 31
24559: PUSH
24560: LD_INT 32
24562: PUSH
24563: LD_INT 36
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 101
24599: PUSH
24600: LD_INT 102
24602: PUSH
24603: LD_INT 103
24605: PUSH
24606: LD_INT 104
24608: PUSH
24609: LD_INT 105
24611: PUSH
24612: LD_INT 106
24614: PUSH
24615: LD_INT 107
24617: PUSH
24618: LD_INT 108
24620: PUSH
24621: LD_INT 109
24623: PUSH
24624: LD_INT 110
24626: PUSH
24627: LD_INT 111
24629: PUSH
24630: LD_INT 112
24632: PUSH
24633: LD_INT 114
24635: PUSH
24636: LD_INT 116
24638: PUSH
24639: LD_INT 117
24641: PUSH
24642: LD_INT 118
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: ST_TO_ADDR
24667: GO 26562
24669: LD_INT 11
24671: DOUBLE
24672: EQUAL
24673: IFTRUE 24677
24675: GO 24881
24677: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24678: LD_ADDR_VAR 0 2
24682: PUSH
24683: LD_INT 2
24685: PUSH
24686: LD_INT 3
24688: PUSH
24689: LD_INT 4
24691: PUSH
24692: LD_INT 5
24694: PUSH
24695: LD_INT 6
24697: PUSH
24698: LD_INT 7
24700: PUSH
24701: LD_INT 8
24703: PUSH
24704: LD_INT 9
24706: PUSH
24707: LD_INT 10
24709: PUSH
24710: LD_INT 11
24712: PUSH
24713: LD_INT 12
24715: PUSH
24716: LD_INT 13
24718: PUSH
24719: LD_INT 14
24721: PUSH
24722: LD_INT 15
24724: PUSH
24725: LD_INT 16
24727: PUSH
24728: LD_INT 17
24730: PUSH
24731: LD_INT 18
24733: PUSH
24734: LD_INT 19
24736: PUSH
24737: LD_INT 20
24739: PUSH
24740: LD_INT 21
24742: PUSH
24743: LD_INT 22
24745: PUSH
24746: LD_INT 23
24748: PUSH
24749: LD_INT 24
24751: PUSH
24752: LD_INT 25
24754: PUSH
24755: LD_INT 26
24757: PUSH
24758: LD_INT 28
24760: PUSH
24761: LD_INT 30
24763: PUSH
24764: LD_INT 31
24766: PUSH
24767: LD_INT 32
24769: PUSH
24770: LD_INT 34
24772: PUSH
24773: LD_INT 36
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 101
24811: PUSH
24812: LD_INT 102
24814: PUSH
24815: LD_INT 103
24817: PUSH
24818: LD_INT 104
24820: PUSH
24821: LD_INT 105
24823: PUSH
24824: LD_INT 106
24826: PUSH
24827: LD_INT 107
24829: PUSH
24830: LD_INT 108
24832: PUSH
24833: LD_INT 109
24835: PUSH
24836: LD_INT 110
24838: PUSH
24839: LD_INT 111
24841: PUSH
24842: LD_INT 112
24844: PUSH
24845: LD_INT 114
24847: PUSH
24848: LD_INT 116
24850: PUSH
24851: LD_INT 117
24853: PUSH
24854: LD_INT 118
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: ST_TO_ADDR
24879: GO 26562
24881: LD_INT 12
24883: DOUBLE
24884: EQUAL
24885: IFTRUE 24889
24887: GO 25109
24889: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24890: LD_ADDR_VAR 0 2
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: LD_INT 3
24903: PUSH
24904: LD_INT 4
24906: PUSH
24907: LD_INT 5
24909: PUSH
24910: LD_INT 6
24912: PUSH
24913: LD_INT 7
24915: PUSH
24916: LD_INT 8
24918: PUSH
24919: LD_INT 9
24921: PUSH
24922: LD_INT 10
24924: PUSH
24925: LD_INT 11
24927: PUSH
24928: LD_INT 12
24930: PUSH
24931: LD_INT 13
24933: PUSH
24934: LD_INT 14
24936: PUSH
24937: LD_INT 15
24939: PUSH
24940: LD_INT 16
24942: PUSH
24943: LD_INT 17
24945: PUSH
24946: LD_INT 18
24948: PUSH
24949: LD_INT 19
24951: PUSH
24952: LD_INT 20
24954: PUSH
24955: LD_INT 21
24957: PUSH
24958: LD_INT 22
24960: PUSH
24961: LD_INT 23
24963: PUSH
24964: LD_INT 24
24966: PUSH
24967: LD_INT 25
24969: PUSH
24970: LD_INT 26
24972: PUSH
24973: LD_INT 27
24975: PUSH
24976: LD_INT 28
24978: PUSH
24979: LD_INT 30
24981: PUSH
24982: LD_INT 31
24984: PUSH
24985: LD_INT 32
24987: PUSH
24988: LD_INT 33
24990: PUSH
24991: LD_INT 34
24993: PUSH
24994: LD_INT 36
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 101
25035: PUSH
25036: LD_INT 102
25038: PUSH
25039: LD_INT 103
25041: PUSH
25042: LD_INT 104
25044: PUSH
25045: LD_INT 105
25047: PUSH
25048: LD_INT 106
25050: PUSH
25051: LD_INT 107
25053: PUSH
25054: LD_INT 108
25056: PUSH
25057: LD_INT 109
25059: PUSH
25060: LD_INT 110
25062: PUSH
25063: LD_INT 111
25065: PUSH
25066: LD_INT 112
25068: PUSH
25069: LD_INT 113
25071: PUSH
25072: LD_INT 114
25074: PUSH
25075: LD_INT 116
25077: PUSH
25078: LD_INT 117
25080: PUSH
25081: LD_INT 118
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: ST_TO_ADDR
25107: GO 26562
25109: LD_INT 13
25111: DOUBLE
25112: EQUAL
25113: IFTRUE 25117
25115: GO 25325
25117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
25118: LD_ADDR_VAR 0 2
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: LD_INT 2
25128: PUSH
25129: LD_INT 3
25131: PUSH
25132: LD_INT 4
25134: PUSH
25135: LD_INT 5
25137: PUSH
25138: LD_INT 8
25140: PUSH
25141: LD_INT 9
25143: PUSH
25144: LD_INT 10
25146: PUSH
25147: LD_INT 11
25149: PUSH
25150: LD_INT 12
25152: PUSH
25153: LD_INT 14
25155: PUSH
25156: LD_INT 15
25158: PUSH
25159: LD_INT 16
25161: PUSH
25162: LD_INT 17
25164: PUSH
25165: LD_INT 18
25167: PUSH
25168: LD_INT 19
25170: PUSH
25171: LD_INT 20
25173: PUSH
25174: LD_INT 21
25176: PUSH
25177: LD_INT 22
25179: PUSH
25180: LD_INT 23
25182: PUSH
25183: LD_INT 24
25185: PUSH
25186: LD_INT 25
25188: PUSH
25189: LD_INT 26
25191: PUSH
25192: LD_INT 27
25194: PUSH
25195: LD_INT 28
25197: PUSH
25198: LD_INT 30
25200: PUSH
25201: LD_INT 31
25203: PUSH
25204: LD_INT 32
25206: PUSH
25207: LD_INT 33
25209: PUSH
25210: LD_INT 34
25212: PUSH
25213: LD_INT 36
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 101
25251: PUSH
25252: LD_INT 102
25254: PUSH
25255: LD_INT 103
25257: PUSH
25258: LD_INT 104
25260: PUSH
25261: LD_INT 105
25263: PUSH
25264: LD_INT 106
25266: PUSH
25267: LD_INT 107
25269: PUSH
25270: LD_INT 108
25272: PUSH
25273: LD_INT 109
25275: PUSH
25276: LD_INT 110
25278: PUSH
25279: LD_INT 111
25281: PUSH
25282: LD_INT 112
25284: PUSH
25285: LD_INT 113
25287: PUSH
25288: LD_INT 114
25290: PUSH
25291: LD_INT 116
25293: PUSH
25294: LD_INT 117
25296: PUSH
25297: LD_INT 118
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: ST_TO_ADDR
25323: GO 26562
25325: LD_INT 14
25327: DOUBLE
25328: EQUAL
25329: IFTRUE 25333
25331: GO 25557
25333: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
25334: LD_ADDR_VAR 0 2
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: LD_INT 2
25344: PUSH
25345: LD_INT 3
25347: PUSH
25348: LD_INT 4
25350: PUSH
25351: LD_INT 5
25353: PUSH
25354: LD_INT 6
25356: PUSH
25357: LD_INT 7
25359: PUSH
25360: LD_INT 8
25362: PUSH
25363: LD_INT 9
25365: PUSH
25366: LD_INT 10
25368: PUSH
25369: LD_INT 11
25371: PUSH
25372: LD_INT 12
25374: PUSH
25375: LD_INT 13
25377: PUSH
25378: LD_INT 14
25380: PUSH
25381: LD_INT 15
25383: PUSH
25384: LD_INT 16
25386: PUSH
25387: LD_INT 17
25389: PUSH
25390: LD_INT 18
25392: PUSH
25393: LD_INT 19
25395: PUSH
25396: LD_INT 20
25398: PUSH
25399: LD_INT 21
25401: PUSH
25402: LD_INT 22
25404: PUSH
25405: LD_INT 23
25407: PUSH
25408: LD_INT 24
25410: PUSH
25411: LD_INT 25
25413: PUSH
25414: LD_INT 26
25416: PUSH
25417: LD_INT 27
25419: PUSH
25420: LD_INT 28
25422: PUSH
25423: LD_INT 29
25425: PUSH
25426: LD_INT 30
25428: PUSH
25429: LD_INT 31
25431: PUSH
25432: LD_INT 32
25434: PUSH
25435: LD_INT 33
25437: PUSH
25438: LD_INT 34
25440: PUSH
25441: LD_INT 36
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 101
25483: PUSH
25484: LD_INT 102
25486: PUSH
25487: LD_INT 103
25489: PUSH
25490: LD_INT 104
25492: PUSH
25493: LD_INT 105
25495: PUSH
25496: LD_INT 106
25498: PUSH
25499: LD_INT 107
25501: PUSH
25502: LD_INT 108
25504: PUSH
25505: LD_INT 109
25507: PUSH
25508: LD_INT 110
25510: PUSH
25511: LD_INT 111
25513: PUSH
25514: LD_INT 112
25516: PUSH
25517: LD_INT 113
25519: PUSH
25520: LD_INT 114
25522: PUSH
25523: LD_INT 116
25525: PUSH
25526: LD_INT 117
25528: PUSH
25529: LD_INT 118
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: ST_TO_ADDR
25555: GO 26562
25557: LD_INT 15
25559: DOUBLE
25560: EQUAL
25561: IFTRUE 25565
25563: GO 25789
25565: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
25566: LD_ADDR_VAR 0 2
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: LD_INT 2
25576: PUSH
25577: LD_INT 3
25579: PUSH
25580: LD_INT 4
25582: PUSH
25583: LD_INT 5
25585: PUSH
25586: LD_INT 6
25588: PUSH
25589: LD_INT 7
25591: PUSH
25592: LD_INT 8
25594: PUSH
25595: LD_INT 9
25597: PUSH
25598: LD_INT 10
25600: PUSH
25601: LD_INT 11
25603: PUSH
25604: LD_INT 12
25606: PUSH
25607: LD_INT 13
25609: PUSH
25610: LD_INT 14
25612: PUSH
25613: LD_INT 15
25615: PUSH
25616: LD_INT 16
25618: PUSH
25619: LD_INT 17
25621: PUSH
25622: LD_INT 18
25624: PUSH
25625: LD_INT 19
25627: PUSH
25628: LD_INT 20
25630: PUSH
25631: LD_INT 21
25633: PUSH
25634: LD_INT 22
25636: PUSH
25637: LD_INT 23
25639: PUSH
25640: LD_INT 24
25642: PUSH
25643: LD_INT 25
25645: PUSH
25646: LD_INT 26
25648: PUSH
25649: LD_INT 27
25651: PUSH
25652: LD_INT 28
25654: PUSH
25655: LD_INT 29
25657: PUSH
25658: LD_INT 30
25660: PUSH
25661: LD_INT 31
25663: PUSH
25664: LD_INT 32
25666: PUSH
25667: LD_INT 33
25669: PUSH
25670: LD_INT 34
25672: PUSH
25673: LD_INT 36
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 101
25715: PUSH
25716: LD_INT 102
25718: PUSH
25719: LD_INT 103
25721: PUSH
25722: LD_INT 104
25724: PUSH
25725: LD_INT 105
25727: PUSH
25728: LD_INT 106
25730: PUSH
25731: LD_INT 107
25733: PUSH
25734: LD_INT 108
25736: PUSH
25737: LD_INT 109
25739: PUSH
25740: LD_INT 110
25742: PUSH
25743: LD_INT 111
25745: PUSH
25746: LD_INT 112
25748: PUSH
25749: LD_INT 113
25751: PUSH
25752: LD_INT 114
25754: PUSH
25755: LD_INT 116
25757: PUSH
25758: LD_INT 117
25760: PUSH
25761: LD_INT 118
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: ST_TO_ADDR
25787: GO 26562
25789: LD_INT 16
25791: DOUBLE
25792: EQUAL
25793: IFTRUE 25797
25795: GO 25933
25797: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25798: LD_ADDR_VAR 0 2
25802: PUSH
25803: LD_INT 2
25805: PUSH
25806: LD_INT 4
25808: PUSH
25809: LD_INT 5
25811: PUSH
25812: LD_INT 7
25814: PUSH
25815: LD_INT 11
25817: PUSH
25818: LD_INT 12
25820: PUSH
25821: LD_INT 15
25823: PUSH
25824: LD_INT 16
25826: PUSH
25827: LD_INT 20
25829: PUSH
25830: LD_INT 21
25832: PUSH
25833: LD_INT 22
25835: PUSH
25836: LD_INT 23
25838: PUSH
25839: LD_INT 25
25841: PUSH
25842: LD_INT 26
25844: PUSH
25845: LD_INT 30
25847: PUSH
25848: LD_INT 31
25850: PUSH
25851: LD_INT 32
25853: PUSH
25854: LD_INT 33
25856: PUSH
25857: LD_INT 34
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 101
25883: PUSH
25884: LD_INT 102
25886: PUSH
25887: LD_INT 103
25889: PUSH
25890: LD_INT 106
25892: PUSH
25893: LD_INT 108
25895: PUSH
25896: LD_INT 112
25898: PUSH
25899: LD_INT 113
25901: PUSH
25902: LD_INT 114
25904: PUSH
25905: LD_INT 116
25907: PUSH
25908: LD_INT 117
25910: PUSH
25911: LD_INT 118
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: ST_TO_ADDR
25931: GO 26562
25933: LD_INT 17
25935: DOUBLE
25936: EQUAL
25937: IFTRUE 25941
25939: GO 26165
25941: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25942: LD_ADDR_VAR 0 2
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: LD_INT 2
25952: PUSH
25953: LD_INT 3
25955: PUSH
25956: LD_INT 4
25958: PUSH
25959: LD_INT 5
25961: PUSH
25962: LD_INT 6
25964: PUSH
25965: LD_INT 7
25967: PUSH
25968: LD_INT 8
25970: PUSH
25971: LD_INT 9
25973: PUSH
25974: LD_INT 10
25976: PUSH
25977: LD_INT 11
25979: PUSH
25980: LD_INT 12
25982: PUSH
25983: LD_INT 13
25985: PUSH
25986: LD_INT 14
25988: PUSH
25989: LD_INT 15
25991: PUSH
25992: LD_INT 16
25994: PUSH
25995: LD_INT 17
25997: PUSH
25998: LD_INT 18
26000: PUSH
26001: LD_INT 19
26003: PUSH
26004: LD_INT 20
26006: PUSH
26007: LD_INT 21
26009: PUSH
26010: LD_INT 22
26012: PUSH
26013: LD_INT 23
26015: PUSH
26016: LD_INT 24
26018: PUSH
26019: LD_INT 25
26021: PUSH
26022: LD_INT 26
26024: PUSH
26025: LD_INT 27
26027: PUSH
26028: LD_INT 28
26030: PUSH
26031: LD_INT 29
26033: PUSH
26034: LD_INT 30
26036: PUSH
26037: LD_INT 31
26039: PUSH
26040: LD_INT 32
26042: PUSH
26043: LD_INT 33
26045: PUSH
26046: LD_INT 34
26048: PUSH
26049: LD_INT 36
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 101
26091: PUSH
26092: LD_INT 102
26094: PUSH
26095: LD_INT 103
26097: PUSH
26098: LD_INT 104
26100: PUSH
26101: LD_INT 105
26103: PUSH
26104: LD_INT 106
26106: PUSH
26107: LD_INT 107
26109: PUSH
26110: LD_INT 108
26112: PUSH
26113: LD_INT 109
26115: PUSH
26116: LD_INT 110
26118: PUSH
26119: LD_INT 111
26121: PUSH
26122: LD_INT 112
26124: PUSH
26125: LD_INT 113
26127: PUSH
26128: LD_INT 114
26130: PUSH
26131: LD_INT 116
26133: PUSH
26134: LD_INT 117
26136: PUSH
26137: LD_INT 118
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: ST_TO_ADDR
26163: GO 26562
26165: LD_INT 18
26167: DOUBLE
26168: EQUAL
26169: IFTRUE 26173
26171: GO 26321
26173: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
26174: LD_ADDR_VAR 0 2
26178: PUSH
26179: LD_INT 2
26181: PUSH
26182: LD_INT 4
26184: PUSH
26185: LD_INT 5
26187: PUSH
26188: LD_INT 7
26190: PUSH
26191: LD_INT 11
26193: PUSH
26194: LD_INT 12
26196: PUSH
26197: LD_INT 15
26199: PUSH
26200: LD_INT 16
26202: PUSH
26203: LD_INT 20
26205: PUSH
26206: LD_INT 21
26208: PUSH
26209: LD_INT 22
26211: PUSH
26212: LD_INT 23
26214: PUSH
26215: LD_INT 25
26217: PUSH
26218: LD_INT 26
26220: PUSH
26221: LD_INT 30
26223: PUSH
26224: LD_INT 31
26226: PUSH
26227: LD_INT 32
26229: PUSH
26230: LD_INT 33
26232: PUSH
26233: LD_INT 34
26235: PUSH
26236: LD_INT 35
26238: PUSH
26239: LD_INT 36
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 101
26267: PUSH
26268: LD_INT 102
26270: PUSH
26271: LD_INT 103
26273: PUSH
26274: LD_INT 106
26276: PUSH
26277: LD_INT 108
26279: PUSH
26280: LD_INT 112
26282: PUSH
26283: LD_INT 113
26285: PUSH
26286: LD_INT 114
26288: PUSH
26289: LD_INT 115
26291: PUSH
26292: LD_INT 116
26294: PUSH
26295: LD_INT 117
26297: PUSH
26298: LD_INT 118
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: ST_TO_ADDR
26319: GO 26562
26321: LD_INT 19
26323: DOUBLE
26324: EQUAL
26325: IFTRUE 26329
26327: GO 26561
26329: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
26330: LD_ADDR_VAR 0 2
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: LD_INT 2
26340: PUSH
26341: LD_INT 3
26343: PUSH
26344: LD_INT 4
26346: PUSH
26347: LD_INT 5
26349: PUSH
26350: LD_INT 6
26352: PUSH
26353: LD_INT 7
26355: PUSH
26356: LD_INT 8
26358: PUSH
26359: LD_INT 9
26361: PUSH
26362: LD_INT 10
26364: PUSH
26365: LD_INT 11
26367: PUSH
26368: LD_INT 12
26370: PUSH
26371: LD_INT 13
26373: PUSH
26374: LD_INT 14
26376: PUSH
26377: LD_INT 15
26379: PUSH
26380: LD_INT 16
26382: PUSH
26383: LD_INT 17
26385: PUSH
26386: LD_INT 18
26388: PUSH
26389: LD_INT 19
26391: PUSH
26392: LD_INT 20
26394: PUSH
26395: LD_INT 21
26397: PUSH
26398: LD_INT 22
26400: PUSH
26401: LD_INT 23
26403: PUSH
26404: LD_INT 24
26406: PUSH
26407: LD_INT 25
26409: PUSH
26410: LD_INT 26
26412: PUSH
26413: LD_INT 27
26415: PUSH
26416: LD_INT 28
26418: PUSH
26419: LD_INT 29
26421: PUSH
26422: LD_INT 30
26424: PUSH
26425: LD_INT 31
26427: PUSH
26428: LD_INT 32
26430: PUSH
26431: LD_INT 33
26433: PUSH
26434: LD_INT 34
26436: PUSH
26437: LD_INT 35
26439: PUSH
26440: LD_INT 36
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 101
26483: PUSH
26484: LD_INT 102
26486: PUSH
26487: LD_INT 103
26489: PUSH
26490: LD_INT 104
26492: PUSH
26493: LD_INT 105
26495: PUSH
26496: LD_INT 106
26498: PUSH
26499: LD_INT 107
26501: PUSH
26502: LD_INT 108
26504: PUSH
26505: LD_INT 109
26507: PUSH
26508: LD_INT 110
26510: PUSH
26511: LD_INT 111
26513: PUSH
26514: LD_INT 112
26516: PUSH
26517: LD_INT 113
26519: PUSH
26520: LD_INT 114
26522: PUSH
26523: LD_INT 115
26525: PUSH
26526: LD_INT 116
26528: PUSH
26529: LD_INT 117
26531: PUSH
26532: LD_INT 118
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: ST_TO_ADDR
26559: GO 26562
26561: POP
// end else
26562: GO 26793
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
26564: LD_ADDR_VAR 0 2
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: LD_INT 2
26574: PUSH
26575: LD_INT 3
26577: PUSH
26578: LD_INT 4
26580: PUSH
26581: LD_INT 5
26583: PUSH
26584: LD_INT 6
26586: PUSH
26587: LD_INT 7
26589: PUSH
26590: LD_INT 8
26592: PUSH
26593: LD_INT 9
26595: PUSH
26596: LD_INT 10
26598: PUSH
26599: LD_INT 11
26601: PUSH
26602: LD_INT 12
26604: PUSH
26605: LD_INT 13
26607: PUSH
26608: LD_INT 14
26610: PUSH
26611: LD_INT 15
26613: PUSH
26614: LD_INT 16
26616: PUSH
26617: LD_INT 17
26619: PUSH
26620: LD_INT 18
26622: PUSH
26623: LD_INT 19
26625: PUSH
26626: LD_INT 20
26628: PUSH
26629: LD_INT 21
26631: PUSH
26632: LD_INT 22
26634: PUSH
26635: LD_INT 23
26637: PUSH
26638: LD_INT 24
26640: PUSH
26641: LD_INT 25
26643: PUSH
26644: LD_INT 26
26646: PUSH
26647: LD_INT 27
26649: PUSH
26650: LD_INT 28
26652: PUSH
26653: LD_INT 29
26655: PUSH
26656: LD_INT 30
26658: PUSH
26659: LD_INT 31
26661: PUSH
26662: LD_INT 32
26664: PUSH
26665: LD_INT 33
26667: PUSH
26668: LD_INT 34
26670: PUSH
26671: LD_INT 35
26673: PUSH
26674: LD_INT 36
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 101
26717: PUSH
26718: LD_INT 102
26720: PUSH
26721: LD_INT 103
26723: PUSH
26724: LD_INT 104
26726: PUSH
26727: LD_INT 105
26729: PUSH
26730: LD_INT 106
26732: PUSH
26733: LD_INT 107
26735: PUSH
26736: LD_INT 108
26738: PUSH
26739: LD_INT 109
26741: PUSH
26742: LD_INT 110
26744: PUSH
26745: LD_INT 111
26747: PUSH
26748: LD_INT 112
26750: PUSH
26751: LD_INT 113
26753: PUSH
26754: LD_INT 114
26756: PUSH
26757: LD_INT 115
26759: PUSH
26760: LD_INT 116
26762: PUSH
26763: LD_INT 117
26765: PUSH
26766: LD_INT 118
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: ST_TO_ADDR
// if result then
26793: LD_VAR 0 2
26797: IFFALSE 27583
// begin normal :=  ;
26799: LD_ADDR_VAR 0 5
26803: PUSH
26804: LD_STRING 
26806: ST_TO_ADDR
// hardcore :=  ;
26807: LD_ADDR_VAR 0 6
26811: PUSH
26812: LD_STRING 
26814: ST_TO_ADDR
// active :=  ;
26815: LD_ADDR_VAR 0 7
26819: PUSH
26820: LD_STRING 
26822: ST_TO_ADDR
// for i = 1 to normalCounter do
26823: LD_ADDR_VAR 0 8
26827: PUSH
26828: DOUBLE
26829: LD_INT 1
26831: DEC
26832: ST_TO_ADDR
26833: LD_EXP 52
26837: PUSH
26838: FOR_TO
26839: IFFALSE 26940
// begin tmp := 0 ;
26841: LD_ADDR_VAR 0 3
26845: PUSH
26846: LD_STRING 0
26848: ST_TO_ADDR
// if result [ 1 ] then
26849: LD_VAR 0 2
26853: PUSH
26854: LD_INT 1
26856: ARRAY
26857: IFFALSE 26922
// if result [ 1 ] [ 1 ] = i then
26859: LD_VAR 0 2
26863: PUSH
26864: LD_INT 1
26866: ARRAY
26867: PUSH
26868: LD_INT 1
26870: ARRAY
26871: PUSH
26872: LD_VAR 0 8
26876: EQUAL
26877: IFFALSE 26922
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26879: LD_ADDR_VAR 0 2
26883: PUSH
26884: LD_VAR 0 2
26888: PPUSH
26889: LD_INT 1
26891: PPUSH
26892: LD_VAR 0 2
26896: PUSH
26897: LD_INT 1
26899: ARRAY
26900: PPUSH
26901: LD_INT 1
26903: PPUSH
26904: CALL_OW 3
26908: PPUSH
26909: CALL_OW 1
26913: ST_TO_ADDR
// tmp := 1 ;
26914: LD_ADDR_VAR 0 3
26918: PUSH
26919: LD_STRING 1
26921: ST_TO_ADDR
// end ; normal := normal & tmp ;
26922: LD_ADDR_VAR 0 5
26926: PUSH
26927: LD_VAR 0 5
26931: PUSH
26932: LD_VAR 0 3
26936: STR
26937: ST_TO_ADDR
// end ;
26938: GO 26838
26940: POP
26941: POP
// for i = 1 to hardcoreCounter do
26942: LD_ADDR_VAR 0 8
26946: PUSH
26947: DOUBLE
26948: LD_INT 1
26950: DEC
26951: ST_TO_ADDR
26952: LD_EXP 53
26956: PUSH
26957: FOR_TO
26958: IFFALSE 27063
// begin tmp := 0 ;
26960: LD_ADDR_VAR 0 3
26964: PUSH
26965: LD_STRING 0
26967: ST_TO_ADDR
// if result [ 2 ] then
26968: LD_VAR 0 2
26972: PUSH
26973: LD_INT 2
26975: ARRAY
26976: IFFALSE 27045
// if result [ 2 ] [ 1 ] = 100 + i then
26978: LD_VAR 0 2
26982: PUSH
26983: LD_INT 2
26985: ARRAY
26986: PUSH
26987: LD_INT 1
26989: ARRAY
26990: PUSH
26991: LD_INT 100
26993: PUSH
26994: LD_VAR 0 8
26998: PLUS
26999: EQUAL
27000: IFFALSE 27045
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27002: LD_ADDR_VAR 0 2
27006: PUSH
27007: LD_VAR 0 2
27011: PPUSH
27012: LD_INT 2
27014: PPUSH
27015: LD_VAR 0 2
27019: PUSH
27020: LD_INT 2
27022: ARRAY
27023: PPUSH
27024: LD_INT 1
27026: PPUSH
27027: CALL_OW 3
27031: PPUSH
27032: CALL_OW 1
27036: ST_TO_ADDR
// tmp := 1 ;
27037: LD_ADDR_VAR 0 3
27041: PUSH
27042: LD_STRING 1
27044: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27045: LD_ADDR_VAR 0 6
27049: PUSH
27050: LD_VAR 0 6
27054: PUSH
27055: LD_VAR 0 3
27059: STR
27060: ST_TO_ADDR
// end ;
27061: GO 26957
27063: POP
27064: POP
// if isGameLoad then
27065: LD_VAR 0 1
27069: IFFALSE 27544
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
27071: LD_ADDR_VAR 0 4
27075: PUSH
27076: LD_EXP 56
27080: PUSH
27081: LD_EXP 55
27085: PUSH
27086: LD_EXP 57
27090: PUSH
27091: LD_EXP 54
27095: PUSH
27096: LD_EXP 58
27100: PUSH
27101: LD_EXP 59
27105: PUSH
27106: LD_EXP 60
27110: PUSH
27111: LD_EXP 61
27115: PUSH
27116: LD_EXP 62
27120: PUSH
27121: LD_EXP 63
27125: PUSH
27126: LD_EXP 64
27130: PUSH
27131: LD_EXP 65
27135: PUSH
27136: LD_EXP 66
27140: PUSH
27141: LD_EXP 67
27145: PUSH
27146: LD_EXP 75
27150: PUSH
27151: LD_EXP 76
27155: PUSH
27156: LD_EXP 77
27160: PUSH
27161: LD_EXP 78
27165: PUSH
27166: LD_EXP 80
27170: PUSH
27171: LD_EXP 81
27175: PUSH
27176: LD_EXP 82
27180: PUSH
27181: LD_EXP 85
27185: PUSH
27186: LD_EXP 87
27190: PUSH
27191: LD_EXP 88
27195: PUSH
27196: LD_EXP 89
27200: PUSH
27201: LD_EXP 91
27205: PUSH
27206: LD_EXP 92
27210: PUSH
27211: LD_EXP 95
27215: PUSH
27216: LD_EXP 96
27220: PUSH
27221: LD_EXP 97
27225: PUSH
27226: LD_EXP 98
27230: PUSH
27231: LD_EXP 99
27235: PUSH
27236: LD_EXP 100
27240: PUSH
27241: LD_EXP 101
27245: PUSH
27246: LD_EXP 102
27250: PUSH
27251: LD_EXP 103
27255: PUSH
27256: LD_EXP 68
27260: PUSH
27261: LD_EXP 69
27265: PUSH
27266: LD_EXP 72
27270: PUSH
27271: LD_EXP 73
27275: PUSH
27276: LD_EXP 74
27280: PUSH
27281: LD_EXP 70
27285: PUSH
27286: LD_EXP 71
27290: PUSH
27291: LD_EXP 79
27295: PUSH
27296: LD_EXP 83
27300: PUSH
27301: LD_EXP 84
27305: PUSH
27306: LD_EXP 86
27310: PUSH
27311: LD_EXP 90
27315: PUSH
27316: LD_EXP 93
27320: PUSH
27321: LD_EXP 94
27325: PUSH
27326: LD_EXP 104
27330: PUSH
27331: LD_EXP 105
27335: PUSH
27336: LD_EXP 106
27340: PUSH
27341: LD_EXP 107
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: ST_TO_ADDR
// tmp :=  ;
27402: LD_ADDR_VAR 0 3
27406: PUSH
27407: LD_STRING 
27409: ST_TO_ADDR
// for i = 1 to normalCounter do
27410: LD_ADDR_VAR 0 8
27414: PUSH
27415: DOUBLE
27416: LD_INT 1
27418: DEC
27419: ST_TO_ADDR
27420: LD_EXP 52
27424: PUSH
27425: FOR_TO
27426: IFFALSE 27462
// begin if flags [ i ] then
27428: LD_VAR 0 4
27432: PUSH
27433: LD_VAR 0 8
27437: ARRAY
27438: IFFALSE 27460
// tmp := tmp & i & ; ;
27440: LD_ADDR_VAR 0 3
27444: PUSH
27445: LD_VAR 0 3
27449: PUSH
27450: LD_VAR 0 8
27454: STR
27455: PUSH
27456: LD_STRING ;
27458: STR
27459: ST_TO_ADDR
// end ;
27460: GO 27425
27462: POP
27463: POP
// for i = 1 to hardcoreCounter do
27464: LD_ADDR_VAR 0 8
27468: PUSH
27469: DOUBLE
27470: LD_INT 1
27472: DEC
27473: ST_TO_ADDR
27474: LD_EXP 53
27478: PUSH
27479: FOR_TO
27480: IFFALSE 27526
// begin if flags [ normalCounter + i ] then
27482: LD_VAR 0 4
27486: PUSH
27487: LD_EXP 52
27491: PUSH
27492: LD_VAR 0 8
27496: PLUS
27497: ARRAY
27498: IFFALSE 27524
// tmp := tmp & ( 100 + i ) & ; ;
27500: LD_ADDR_VAR 0 3
27504: PUSH
27505: LD_VAR 0 3
27509: PUSH
27510: LD_INT 100
27512: PUSH
27513: LD_VAR 0 8
27517: PLUS
27518: STR
27519: PUSH
27520: LD_STRING ;
27522: STR
27523: ST_TO_ADDR
// end ;
27524: GO 27479
27526: POP
27527: POP
// if tmp then
27528: LD_VAR 0 3
27532: IFFALSE 27544
// active := tmp ;
27534: LD_ADDR_VAR 0 7
27538: PUSH
27539: LD_VAR 0 3
27543: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27544: LD_STRING getStreamItemsFromMission("
27546: PUSH
27547: LD_VAR 0 5
27551: STR
27552: PUSH
27553: LD_STRING ","
27555: STR
27556: PUSH
27557: LD_VAR 0 6
27561: STR
27562: PUSH
27563: LD_STRING ","
27565: STR
27566: PUSH
27567: LD_VAR 0 7
27571: STR
27572: PUSH
27573: LD_STRING ")
27575: STR
27576: PPUSH
27577: CALL_OW 559
// end else
27581: GO 27590
// ToLua ( getStreamItemsFromMission("","","") ) ;
27583: LD_STRING getStreamItemsFromMission("","","")
27585: PPUSH
27586: CALL_OW 559
// end ;
27590: LD_VAR 0 2
27594: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27595: LD_EXP 51
27599: PUSH
27600: LD_EXP 56
27604: AND
27605: IFFALSE 27729
27607: GO 27609
27609: DISABLE
27610: LD_INT 0
27612: PPUSH
27613: PPUSH
// begin enable ;
27614: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27615: LD_ADDR_VAR 0 2
27619: PUSH
27620: LD_INT 22
27622: PUSH
27623: LD_OWVAR 2
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 2
27634: PUSH
27635: LD_INT 34
27637: PUSH
27638: LD_INT 7
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 34
27647: PUSH
27648: LD_INT 45
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 34
27657: PUSH
27658: LD_INT 28
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 34
27667: PUSH
27668: LD_INT 47
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PPUSH
27686: CALL_OW 69
27690: ST_TO_ADDR
// if not tmp then
27691: LD_VAR 0 2
27695: NOT
27696: IFFALSE 27700
// exit ;
27698: GO 27729
// for i in tmp do
27700: LD_ADDR_VAR 0 1
27704: PUSH
27705: LD_VAR 0 2
27709: PUSH
27710: FOR_IN
27711: IFFALSE 27727
// begin SetLives ( i , 0 ) ;
27713: LD_VAR 0 1
27717: PPUSH
27718: LD_INT 0
27720: PPUSH
27721: CALL_OW 234
// end ;
27725: GO 27710
27727: POP
27728: POP
// end ;
27729: PPOPN 2
27731: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27732: LD_EXP 51
27736: PUSH
27737: LD_EXP 57
27741: AND
27742: IFFALSE 27826
27744: GO 27746
27746: DISABLE
27747: LD_INT 0
27749: PPUSH
27750: PPUSH
// begin enable ;
27751: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27752: LD_ADDR_VAR 0 2
27756: PUSH
27757: LD_INT 22
27759: PUSH
27760: LD_OWVAR 2
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 32
27771: PUSH
27772: LD_INT 3
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PPUSH
27783: CALL_OW 69
27787: ST_TO_ADDR
// if not tmp then
27788: LD_VAR 0 2
27792: NOT
27793: IFFALSE 27797
// exit ;
27795: GO 27826
// for i in tmp do
27797: LD_ADDR_VAR 0 1
27801: PUSH
27802: LD_VAR 0 2
27806: PUSH
27807: FOR_IN
27808: IFFALSE 27824
// begin SetLives ( i , 0 ) ;
27810: LD_VAR 0 1
27814: PPUSH
27815: LD_INT 0
27817: PPUSH
27818: CALL_OW 234
// end ;
27822: GO 27807
27824: POP
27825: POP
// end ;
27826: PPOPN 2
27828: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27829: LD_EXP 51
27833: PUSH
27834: LD_EXP 54
27838: AND
27839: IFFALSE 27932
27841: GO 27843
27843: DISABLE
27844: LD_INT 0
27846: PPUSH
// begin enable ;
27847: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27848: LD_ADDR_VAR 0 1
27852: PUSH
27853: LD_INT 22
27855: PUSH
27856: LD_OWVAR 2
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 2
27867: PUSH
27868: LD_INT 25
27870: PUSH
27871: LD_INT 5
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 25
27880: PUSH
27881: LD_INT 9
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 25
27890: PUSH
27891: LD_INT 8
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PPUSH
27908: CALL_OW 69
27912: PUSH
27913: FOR_IN
27914: IFFALSE 27930
// begin SetClass ( i , 1 ) ;
27916: LD_VAR 0 1
27920: PPUSH
27921: LD_INT 1
27923: PPUSH
27924: CALL_OW 336
// end ;
27928: GO 27913
27930: POP
27931: POP
// end ;
27932: PPOPN 1
27934: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27935: LD_EXP 51
27939: PUSH
27940: LD_EXP 55
27944: AND
27945: PUSH
27946: LD_OWVAR 65
27950: PUSH
27951: LD_INT 7
27953: LESS
27954: AND
27955: IFFALSE 27969
27957: GO 27959
27959: DISABLE
// begin enable ;
27960: ENABLE
// game_speed := 7 ;
27961: LD_ADDR_OWVAR 65
27965: PUSH
27966: LD_INT 7
27968: ST_TO_ADDR
// end ;
27969: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27970: LD_EXP 51
27974: PUSH
27975: LD_EXP 58
27979: AND
27980: IFFALSE 28182
27982: GO 27984
27984: DISABLE
27985: LD_INT 0
27987: PPUSH
27988: PPUSH
27989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27990: LD_ADDR_VAR 0 3
27994: PUSH
27995: LD_INT 81
27997: PUSH
27998: LD_OWVAR 2
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 21
28009: PUSH
28010: LD_INT 1
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PPUSH
28021: CALL_OW 69
28025: ST_TO_ADDR
// if not tmp then
28026: LD_VAR 0 3
28030: NOT
28031: IFFALSE 28035
// exit ;
28033: GO 28182
// if tmp > 5 then
28035: LD_VAR 0 3
28039: PUSH
28040: LD_INT 5
28042: GREATER
28043: IFFALSE 28055
// k := 5 else
28045: LD_ADDR_VAR 0 2
28049: PUSH
28050: LD_INT 5
28052: ST_TO_ADDR
28053: GO 28065
// k := tmp ;
28055: LD_ADDR_VAR 0 2
28059: PUSH
28060: LD_VAR 0 3
28064: ST_TO_ADDR
// for i := 1 to k do
28065: LD_ADDR_VAR 0 1
28069: PUSH
28070: DOUBLE
28071: LD_INT 1
28073: DEC
28074: ST_TO_ADDR
28075: LD_VAR 0 2
28079: PUSH
28080: FOR_TO
28081: IFFALSE 28180
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28083: LD_VAR 0 3
28087: PUSH
28088: LD_VAR 0 1
28092: ARRAY
28093: PPUSH
28094: LD_VAR 0 1
28098: PUSH
28099: LD_INT 4
28101: MOD
28102: PUSH
28103: LD_INT 1
28105: PLUS
28106: PPUSH
28107: CALL_OW 259
28111: PUSH
28112: LD_INT 10
28114: LESS
28115: IFFALSE 28178
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28117: LD_VAR 0 3
28121: PUSH
28122: LD_VAR 0 1
28126: ARRAY
28127: PPUSH
28128: LD_VAR 0 1
28132: PUSH
28133: LD_INT 4
28135: MOD
28136: PUSH
28137: LD_INT 1
28139: PLUS
28140: PPUSH
28141: LD_VAR 0 3
28145: PUSH
28146: LD_VAR 0 1
28150: ARRAY
28151: PPUSH
28152: LD_VAR 0 1
28156: PUSH
28157: LD_INT 4
28159: MOD
28160: PUSH
28161: LD_INT 1
28163: PLUS
28164: PPUSH
28165: CALL_OW 259
28169: PUSH
28170: LD_INT 1
28172: PLUS
28173: PPUSH
28174: CALL_OW 237
28178: GO 28080
28180: POP
28181: POP
// end ;
28182: PPOPN 3
28184: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28185: LD_EXP 51
28189: PUSH
28190: LD_EXP 59
28194: AND
28195: IFFALSE 28215
28197: GO 28199
28199: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28200: LD_INT 4
28202: PPUSH
28203: LD_OWVAR 2
28207: PPUSH
28208: LD_INT 0
28210: PPUSH
28211: CALL_OW 324
28215: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28216: LD_EXP 51
28220: PUSH
28221: LD_EXP 88
28225: AND
28226: IFFALSE 28246
28228: GO 28230
28230: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28231: LD_INT 19
28233: PPUSH
28234: LD_OWVAR 2
28238: PPUSH
28239: LD_INT 0
28241: PPUSH
28242: CALL_OW 324
28246: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28247: LD_EXP 51
28251: PUSH
28252: LD_EXP 60
28256: AND
28257: IFFALSE 28359
28259: GO 28261
28261: DISABLE
28262: LD_INT 0
28264: PPUSH
28265: PPUSH
// begin enable ;
28266: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28267: LD_ADDR_VAR 0 2
28271: PUSH
28272: LD_INT 22
28274: PUSH
28275: LD_OWVAR 2
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 2
28286: PUSH
28287: LD_INT 34
28289: PUSH
28290: LD_INT 11
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 34
28299: PUSH
28300: LD_INT 30
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PPUSH
28316: CALL_OW 69
28320: ST_TO_ADDR
// if not tmp then
28321: LD_VAR 0 2
28325: NOT
28326: IFFALSE 28330
// exit ;
28328: GO 28359
// for i in tmp do
28330: LD_ADDR_VAR 0 1
28334: PUSH
28335: LD_VAR 0 2
28339: PUSH
28340: FOR_IN
28341: IFFALSE 28357
// begin SetLives ( i , 0 ) ;
28343: LD_VAR 0 1
28347: PPUSH
28348: LD_INT 0
28350: PPUSH
28351: CALL_OW 234
// end ;
28355: GO 28340
28357: POP
28358: POP
// end ;
28359: PPOPN 2
28361: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28362: LD_EXP 51
28366: PUSH
28367: LD_EXP 61
28371: AND
28372: IFFALSE 28392
28374: GO 28376
28376: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28377: LD_INT 32
28379: PPUSH
28380: LD_OWVAR 2
28384: PPUSH
28385: LD_INT 0
28387: PPUSH
28388: CALL_OW 324
28392: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28393: LD_EXP 51
28397: PUSH
28398: LD_EXP 62
28402: AND
28403: IFFALSE 28584
28405: GO 28407
28407: DISABLE
28408: LD_INT 0
28410: PPUSH
28411: PPUSH
28412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28413: LD_ADDR_VAR 0 2
28417: PUSH
28418: LD_INT 22
28420: PUSH
28421: LD_OWVAR 2
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 33
28432: PUSH
28433: LD_INT 3
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PPUSH
28444: CALL_OW 69
28448: ST_TO_ADDR
// if not tmp then
28449: LD_VAR 0 2
28453: NOT
28454: IFFALSE 28458
// exit ;
28456: GO 28584
// side := 0 ;
28458: LD_ADDR_VAR 0 3
28462: PUSH
28463: LD_INT 0
28465: ST_TO_ADDR
// for i := 1 to 8 do
28466: LD_ADDR_VAR 0 1
28470: PUSH
28471: DOUBLE
28472: LD_INT 1
28474: DEC
28475: ST_TO_ADDR
28476: LD_INT 8
28478: PUSH
28479: FOR_TO
28480: IFFALSE 28528
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28482: LD_OWVAR 2
28486: PUSH
28487: LD_VAR 0 1
28491: NONEQUAL
28492: PUSH
28493: LD_OWVAR 2
28497: PPUSH
28498: LD_VAR 0 1
28502: PPUSH
28503: CALL_OW 81
28507: PUSH
28508: LD_INT 2
28510: EQUAL
28511: AND
28512: IFFALSE 28526
// begin side := i ;
28514: LD_ADDR_VAR 0 3
28518: PUSH
28519: LD_VAR 0 1
28523: ST_TO_ADDR
// break ;
28524: GO 28528
// end ;
28526: GO 28479
28528: POP
28529: POP
// if not side then
28530: LD_VAR 0 3
28534: NOT
28535: IFFALSE 28539
// exit ;
28537: GO 28584
// for i := 1 to tmp do
28539: LD_ADDR_VAR 0 1
28543: PUSH
28544: DOUBLE
28545: LD_INT 1
28547: DEC
28548: ST_TO_ADDR
28549: LD_VAR 0 2
28553: PUSH
28554: FOR_TO
28555: IFFALSE 28582
// if Prob ( 60 ) then
28557: LD_INT 60
28559: PPUSH
28560: CALL_OW 13
28564: IFFALSE 28580
// SetSide ( i , side ) ;
28566: LD_VAR 0 1
28570: PPUSH
28571: LD_VAR 0 3
28575: PPUSH
28576: CALL_OW 235
28580: GO 28554
28582: POP
28583: POP
// end ;
28584: PPOPN 3
28586: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28587: LD_EXP 51
28591: PUSH
28592: LD_EXP 64
28596: AND
28597: IFFALSE 28716
28599: GO 28601
28601: DISABLE
28602: LD_INT 0
28604: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28605: LD_ADDR_VAR 0 1
28609: PUSH
28610: LD_INT 22
28612: PUSH
28613: LD_OWVAR 2
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 21
28624: PUSH
28625: LD_INT 1
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 3
28634: PUSH
28635: LD_INT 23
28637: PUSH
28638: LD_INT 0
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: LIST
28653: PPUSH
28654: CALL_OW 69
28658: PUSH
28659: FOR_IN
28660: IFFALSE 28714
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28662: LD_VAR 0 1
28666: PPUSH
28667: CALL_OW 257
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: LD_INT 2
28677: PUSH
28678: LD_INT 3
28680: PUSH
28681: LD_INT 4
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: IN
28690: IFFALSE 28712
// SetClass ( un , rand ( 1 , 4 ) ) ;
28692: LD_VAR 0 1
28696: PPUSH
28697: LD_INT 1
28699: PPUSH
28700: LD_INT 4
28702: PPUSH
28703: CALL_OW 12
28707: PPUSH
28708: CALL_OW 336
28712: GO 28659
28714: POP
28715: POP
// end ;
28716: PPOPN 1
28718: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28719: LD_EXP 51
28723: PUSH
28724: LD_EXP 63
28728: AND
28729: IFFALSE 28808
28731: GO 28733
28733: DISABLE
28734: LD_INT 0
28736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28737: LD_ADDR_VAR 0 1
28741: PUSH
28742: LD_INT 22
28744: PUSH
28745: LD_OWVAR 2
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 21
28756: PUSH
28757: LD_INT 3
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PPUSH
28768: CALL_OW 69
28772: ST_TO_ADDR
// if not tmp then
28773: LD_VAR 0 1
28777: NOT
28778: IFFALSE 28782
// exit ;
28780: GO 28808
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28782: LD_VAR 0 1
28786: PUSH
28787: LD_INT 1
28789: PPUSH
28790: LD_VAR 0 1
28794: PPUSH
28795: CALL_OW 12
28799: ARRAY
28800: PPUSH
28801: LD_INT 100
28803: PPUSH
28804: CALL_OW 234
// end ;
28808: PPOPN 1
28810: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28811: LD_EXP 51
28815: PUSH
28816: LD_EXP 65
28820: AND
28821: IFFALSE 28919
28823: GO 28825
28825: DISABLE
28826: LD_INT 0
28828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28829: LD_ADDR_VAR 0 1
28833: PUSH
28834: LD_INT 22
28836: PUSH
28837: LD_OWVAR 2
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 21
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PPUSH
28860: CALL_OW 69
28864: ST_TO_ADDR
// if not tmp then
28865: LD_VAR 0 1
28869: NOT
28870: IFFALSE 28874
// exit ;
28872: GO 28919
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28874: LD_VAR 0 1
28878: PUSH
28879: LD_INT 1
28881: PPUSH
28882: LD_VAR 0 1
28886: PPUSH
28887: CALL_OW 12
28891: ARRAY
28892: PPUSH
28893: LD_INT 1
28895: PPUSH
28896: LD_INT 4
28898: PPUSH
28899: CALL_OW 12
28903: PPUSH
28904: LD_INT 3000
28906: PPUSH
28907: LD_INT 9000
28909: PPUSH
28910: CALL_OW 12
28914: PPUSH
28915: CALL_OW 492
// end ;
28919: PPOPN 1
28921: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28922: LD_EXP 51
28926: PUSH
28927: LD_EXP 66
28931: AND
28932: IFFALSE 28952
28934: GO 28936
28936: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28937: LD_INT 1
28939: PPUSH
28940: LD_OWVAR 2
28944: PPUSH
28945: LD_INT 0
28947: PPUSH
28948: CALL_OW 324
28952: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28953: LD_EXP 51
28957: PUSH
28958: LD_EXP 67
28962: AND
28963: IFFALSE 29046
28965: GO 28967
28967: DISABLE
28968: LD_INT 0
28970: PPUSH
28971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28972: LD_ADDR_VAR 0 2
28976: PUSH
28977: LD_INT 22
28979: PUSH
28980: LD_OWVAR 2
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 21
28991: PUSH
28992: LD_INT 3
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PPUSH
29003: CALL_OW 69
29007: ST_TO_ADDR
// if not tmp then
29008: LD_VAR 0 2
29012: NOT
29013: IFFALSE 29017
// exit ;
29015: GO 29046
// for i in tmp do
29017: LD_ADDR_VAR 0 1
29021: PUSH
29022: LD_VAR 0 2
29026: PUSH
29027: FOR_IN
29028: IFFALSE 29044
// SetBLevel ( i , 10 ) ;
29030: LD_VAR 0 1
29034: PPUSH
29035: LD_INT 10
29037: PPUSH
29038: CALL_OW 241
29042: GO 29027
29044: POP
29045: POP
// end ;
29046: PPOPN 2
29048: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29049: LD_EXP 51
29053: PUSH
29054: LD_EXP 68
29058: AND
29059: IFFALSE 29170
29061: GO 29063
29063: DISABLE
29064: LD_INT 0
29066: PPUSH
29067: PPUSH
29068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29069: LD_ADDR_VAR 0 3
29073: PUSH
29074: LD_INT 22
29076: PUSH
29077: LD_OWVAR 2
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 25
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PPUSH
29100: CALL_OW 69
29104: ST_TO_ADDR
// if not tmp then
29105: LD_VAR 0 3
29109: NOT
29110: IFFALSE 29114
// exit ;
29112: GO 29170
// un := tmp [ rand ( 1 , tmp ) ] ;
29114: LD_ADDR_VAR 0 2
29118: PUSH
29119: LD_VAR 0 3
29123: PUSH
29124: LD_INT 1
29126: PPUSH
29127: LD_VAR 0 3
29131: PPUSH
29132: CALL_OW 12
29136: ARRAY
29137: ST_TO_ADDR
// if Crawls ( un ) then
29138: LD_VAR 0 2
29142: PPUSH
29143: CALL_OW 318
29147: IFFALSE 29158
// ComWalk ( un ) ;
29149: LD_VAR 0 2
29153: PPUSH
29154: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29158: LD_VAR 0 2
29162: PPUSH
29163: LD_INT 5
29165: PPUSH
29166: CALL_OW 336
// end ;
29170: PPOPN 3
29172: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29173: LD_EXP 51
29177: PUSH
29178: LD_EXP 69
29182: AND
29183: PUSH
29184: LD_OWVAR 67
29188: PUSH
29189: LD_INT 4
29191: LESS
29192: AND
29193: IFFALSE 29212
29195: GO 29197
29197: DISABLE
// begin Difficulty := Difficulty + 1 ;
29198: LD_ADDR_OWVAR 67
29202: PUSH
29203: LD_OWVAR 67
29207: PUSH
29208: LD_INT 1
29210: PLUS
29211: ST_TO_ADDR
// end ;
29212: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29213: LD_EXP 51
29217: PUSH
29218: LD_EXP 70
29222: AND
29223: IFFALSE 29326
29225: GO 29227
29227: DISABLE
29228: LD_INT 0
29230: PPUSH
// begin for i := 1 to 5 do
29231: LD_ADDR_VAR 0 1
29235: PUSH
29236: DOUBLE
29237: LD_INT 1
29239: DEC
29240: ST_TO_ADDR
29241: LD_INT 5
29243: PUSH
29244: FOR_TO
29245: IFFALSE 29324
// begin uc_nation := nation_nature ;
29247: LD_ADDR_OWVAR 21
29251: PUSH
29252: LD_INT 0
29254: ST_TO_ADDR
// uc_side := 0 ;
29255: LD_ADDR_OWVAR 20
29259: PUSH
29260: LD_INT 0
29262: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29263: LD_ADDR_OWVAR 29
29267: PUSH
29268: LD_INT 12
29270: PUSH
29271: LD_INT 12
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: ST_TO_ADDR
// hc_agressivity := 20 ;
29278: LD_ADDR_OWVAR 35
29282: PUSH
29283: LD_INT 20
29285: ST_TO_ADDR
// hc_class := class_tiger ;
29286: LD_ADDR_OWVAR 28
29290: PUSH
29291: LD_INT 14
29293: ST_TO_ADDR
// hc_gallery :=  ;
29294: LD_ADDR_OWVAR 33
29298: PUSH
29299: LD_STRING 
29301: ST_TO_ADDR
// hc_name :=  ;
29302: LD_ADDR_OWVAR 26
29306: PUSH
29307: LD_STRING 
29309: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29310: CALL_OW 44
29314: PPUSH
29315: LD_INT 0
29317: PPUSH
29318: CALL_OW 51
// end ;
29322: GO 29244
29324: POP
29325: POP
// end ;
29326: PPOPN 1
29328: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29329: LD_EXP 51
29333: PUSH
29334: LD_EXP 71
29338: AND
29339: IFFALSE 29348
29341: GO 29343
29343: DISABLE
// StreamSibBomb ;
29344: CALL 29349 0 0
29348: END
// export function StreamSibBomb ; var i , x , y ; begin
29349: LD_INT 0
29351: PPUSH
29352: PPUSH
29353: PPUSH
29354: PPUSH
// result := false ;
29355: LD_ADDR_VAR 0 1
29359: PUSH
29360: LD_INT 0
29362: ST_TO_ADDR
// for i := 1 to 16 do
29363: LD_ADDR_VAR 0 2
29367: PUSH
29368: DOUBLE
29369: LD_INT 1
29371: DEC
29372: ST_TO_ADDR
29373: LD_INT 16
29375: PUSH
29376: FOR_TO
29377: IFFALSE 29576
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29379: LD_ADDR_VAR 0 3
29383: PUSH
29384: LD_INT 10
29386: PUSH
29387: LD_INT 20
29389: PUSH
29390: LD_INT 30
29392: PUSH
29393: LD_INT 40
29395: PUSH
29396: LD_INT 50
29398: PUSH
29399: LD_INT 60
29401: PUSH
29402: LD_INT 70
29404: PUSH
29405: LD_INT 80
29407: PUSH
29408: LD_INT 90
29410: PUSH
29411: LD_INT 100
29413: PUSH
29414: LD_INT 110
29416: PUSH
29417: LD_INT 120
29419: PUSH
29420: LD_INT 130
29422: PUSH
29423: LD_INT 140
29425: PUSH
29426: LD_INT 150
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: PPUSH
29449: LD_INT 15
29451: PPUSH
29452: CALL_OW 12
29456: ARRAY
29457: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29458: LD_ADDR_VAR 0 4
29462: PUSH
29463: LD_INT 10
29465: PUSH
29466: LD_INT 20
29468: PUSH
29469: LD_INT 30
29471: PUSH
29472: LD_INT 40
29474: PUSH
29475: LD_INT 50
29477: PUSH
29478: LD_INT 60
29480: PUSH
29481: LD_INT 70
29483: PUSH
29484: LD_INT 80
29486: PUSH
29487: LD_INT 90
29489: PUSH
29490: LD_INT 100
29492: PUSH
29493: LD_INT 110
29495: PUSH
29496: LD_INT 120
29498: PUSH
29499: LD_INT 130
29501: PUSH
29502: LD_INT 140
29504: PUSH
29505: LD_INT 150
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 1
29527: PPUSH
29528: LD_INT 15
29530: PPUSH
29531: CALL_OW 12
29535: ARRAY
29536: ST_TO_ADDR
// if ValidHex ( x , y ) then
29537: LD_VAR 0 3
29541: PPUSH
29542: LD_VAR 0 4
29546: PPUSH
29547: CALL_OW 488
29551: IFFALSE 29574
// begin result := [ x , y ] ;
29553: LD_ADDR_VAR 0 1
29557: PUSH
29558: LD_VAR 0 3
29562: PUSH
29563: LD_VAR 0 4
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: ST_TO_ADDR
// break ;
29572: GO 29576
// end ; end ;
29574: GO 29376
29576: POP
29577: POP
// if result then
29578: LD_VAR 0 1
29582: IFFALSE 29642
// begin ToLua ( playSibBomb() ) ;
29584: LD_STRING playSibBomb()
29586: PPUSH
29587: CALL_OW 559
// wait ( 0 0$14 ) ;
29591: LD_INT 490
29593: PPUSH
29594: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29598: LD_VAR 0 1
29602: PUSH
29603: LD_INT 1
29605: ARRAY
29606: PPUSH
29607: LD_VAR 0 1
29611: PUSH
29612: LD_INT 2
29614: ARRAY
29615: PPUSH
29616: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29620: LD_VAR 0 1
29624: PUSH
29625: LD_INT 1
29627: ARRAY
29628: PPUSH
29629: LD_VAR 0 1
29633: PUSH
29634: LD_INT 2
29636: ARRAY
29637: PPUSH
29638: CALL_OW 429
// end ; end ;
29642: LD_VAR 0 1
29646: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29647: LD_EXP 51
29651: PUSH
29652: LD_EXP 73
29656: AND
29657: IFFALSE 29669
29659: GO 29661
29661: DISABLE
// YouLost (  ) ;
29662: LD_STRING 
29664: PPUSH
29665: CALL_OW 104
29669: END
// every 0 0$1 trigger StreamModeActive and sFog do
29670: LD_EXP 51
29674: PUSH
29675: LD_EXP 72
29679: AND
29680: IFFALSE 29694
29682: GO 29684
29684: DISABLE
// FogOff ( your_side ) ;
29685: LD_OWVAR 2
29689: PPUSH
29690: CALL_OW 344
29694: END
// every 0 0$1 trigger StreamModeActive and sSun do
29695: LD_EXP 51
29699: PUSH
29700: LD_EXP 74
29704: AND
29705: IFFALSE 29733
29707: GO 29709
29709: DISABLE
// begin solar_recharge_percent := 0 ;
29710: LD_ADDR_OWVAR 79
29714: PUSH
29715: LD_INT 0
29717: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29718: LD_INT 10500
29720: PPUSH
29721: CALL_OW 67
// solar_recharge_percent := 100 ;
29725: LD_ADDR_OWVAR 79
29729: PUSH
29730: LD_INT 100
29732: ST_TO_ADDR
// end ;
29733: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29734: LD_EXP 51
29738: PUSH
29739: LD_EXP 75
29743: AND
29744: IFFALSE 29983
29746: GO 29748
29748: DISABLE
29749: LD_INT 0
29751: PPUSH
29752: PPUSH
29753: PPUSH
// begin tmp := [ ] ;
29754: LD_ADDR_VAR 0 3
29758: PUSH
29759: EMPTY
29760: ST_TO_ADDR
// for i := 1 to 6 do
29761: LD_ADDR_VAR 0 1
29765: PUSH
29766: DOUBLE
29767: LD_INT 1
29769: DEC
29770: ST_TO_ADDR
29771: LD_INT 6
29773: PUSH
29774: FOR_TO
29775: IFFALSE 29880
// begin uc_nation := nation_nature ;
29777: LD_ADDR_OWVAR 21
29781: PUSH
29782: LD_INT 0
29784: ST_TO_ADDR
// uc_side := 0 ;
29785: LD_ADDR_OWVAR 20
29789: PUSH
29790: LD_INT 0
29792: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29793: LD_ADDR_OWVAR 29
29797: PUSH
29798: LD_INT 12
29800: PUSH
29801: LD_INT 12
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: ST_TO_ADDR
// hc_agressivity := 20 ;
29808: LD_ADDR_OWVAR 35
29812: PUSH
29813: LD_INT 20
29815: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29816: LD_ADDR_OWVAR 28
29820: PUSH
29821: LD_INT 17
29823: ST_TO_ADDR
// hc_gallery :=  ;
29824: LD_ADDR_OWVAR 33
29828: PUSH
29829: LD_STRING 
29831: ST_TO_ADDR
// hc_name :=  ;
29832: LD_ADDR_OWVAR 26
29836: PUSH
29837: LD_STRING 
29839: ST_TO_ADDR
// un := CreateHuman ;
29840: LD_ADDR_VAR 0 2
29844: PUSH
29845: CALL_OW 44
29849: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29850: LD_VAR 0 2
29854: PPUSH
29855: LD_INT 1
29857: PPUSH
29858: CALL_OW 51
// tmp := tmp ^ un ;
29862: LD_ADDR_VAR 0 3
29866: PUSH
29867: LD_VAR 0 3
29871: PUSH
29872: LD_VAR 0 2
29876: ADD
29877: ST_TO_ADDR
// end ;
29878: GO 29774
29880: POP
29881: POP
// repeat wait ( 0 0$1 ) ;
29882: LD_INT 35
29884: PPUSH
29885: CALL_OW 67
// for un in tmp do
29889: LD_ADDR_VAR 0 2
29893: PUSH
29894: LD_VAR 0 3
29898: PUSH
29899: FOR_IN
29900: IFFALSE 29974
// begin if IsDead ( un ) then
29902: LD_VAR 0 2
29906: PPUSH
29907: CALL_OW 301
29911: IFFALSE 29931
// begin tmp := tmp diff un ;
29913: LD_ADDR_VAR 0 3
29917: PUSH
29918: LD_VAR 0 3
29922: PUSH
29923: LD_VAR 0 2
29927: DIFF
29928: ST_TO_ADDR
// continue ;
29929: GO 29899
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29931: LD_VAR 0 2
29935: PPUSH
29936: LD_INT 3
29938: PUSH
29939: LD_INT 22
29941: PUSH
29942: LD_INT 0
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PPUSH
29953: CALL_OW 69
29957: PPUSH
29958: LD_VAR 0 2
29962: PPUSH
29963: CALL_OW 74
29967: PPUSH
29968: CALL_OW 115
// end ;
29972: GO 29899
29974: POP
29975: POP
// until not tmp ;
29976: LD_VAR 0 3
29980: NOT
29981: IFFALSE 29882
// end ;
29983: PPOPN 3
29985: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29986: LD_EXP 51
29990: PUSH
29991: LD_EXP 76
29995: AND
29996: IFFALSE 30050
29998: GO 30000
30000: DISABLE
// begin ToLua ( displayTroll(); ) ;
30001: LD_STRING displayTroll();
30003: PPUSH
30004: CALL_OW 559
// wait ( 3 3$00 ) ;
30008: LD_INT 6300
30010: PPUSH
30011: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30015: LD_STRING hideTroll();
30017: PPUSH
30018: CALL_OW 559
// wait ( 1 1$00 ) ;
30022: LD_INT 2100
30024: PPUSH
30025: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30029: LD_STRING displayTroll();
30031: PPUSH
30032: CALL_OW 559
// wait ( 1 1$00 ) ;
30036: LD_INT 2100
30038: PPUSH
30039: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30043: LD_STRING hideTroll();
30045: PPUSH
30046: CALL_OW 559
// end ;
30050: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30051: LD_EXP 51
30055: PUSH
30056: LD_EXP 77
30060: AND
30061: IFFALSE 30124
30063: GO 30065
30065: DISABLE
30066: LD_INT 0
30068: PPUSH
// begin p := 0 ;
30069: LD_ADDR_VAR 0 1
30073: PUSH
30074: LD_INT 0
30076: ST_TO_ADDR
// repeat game_speed := 1 ;
30077: LD_ADDR_OWVAR 65
30081: PUSH
30082: LD_INT 1
30084: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30085: LD_INT 35
30087: PPUSH
30088: CALL_OW 67
// p := p + 1 ;
30092: LD_ADDR_VAR 0 1
30096: PUSH
30097: LD_VAR 0 1
30101: PUSH
30102: LD_INT 1
30104: PLUS
30105: ST_TO_ADDR
// until p >= 60 ;
30106: LD_VAR 0 1
30110: PUSH
30111: LD_INT 60
30113: GREATEREQUAL
30114: IFFALSE 30077
// game_speed := 4 ;
30116: LD_ADDR_OWVAR 65
30120: PUSH
30121: LD_INT 4
30123: ST_TO_ADDR
// end ;
30124: PPOPN 1
30126: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30127: LD_EXP 51
30131: PUSH
30132: LD_EXP 78
30136: AND
30137: IFFALSE 30283
30139: GO 30141
30141: DISABLE
30142: LD_INT 0
30144: PPUSH
30145: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30146: LD_ADDR_VAR 0 1
30150: PUSH
30151: LD_INT 22
30153: PUSH
30154: LD_OWVAR 2
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 2
30165: PUSH
30166: LD_INT 30
30168: PUSH
30169: LD_INT 0
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 30
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: LIST
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PPUSH
30195: CALL_OW 69
30199: ST_TO_ADDR
// if not depot then
30200: LD_VAR 0 1
30204: NOT
30205: IFFALSE 30209
// exit ;
30207: GO 30283
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30209: LD_ADDR_VAR 0 2
30213: PUSH
30214: LD_VAR 0 1
30218: PUSH
30219: LD_INT 1
30221: PPUSH
30222: LD_VAR 0 1
30226: PPUSH
30227: CALL_OW 12
30231: ARRAY
30232: PPUSH
30233: CALL_OW 274
30237: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30238: LD_VAR 0 2
30242: PPUSH
30243: LD_INT 1
30245: PPUSH
30246: LD_INT 0
30248: PPUSH
30249: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30253: LD_VAR 0 2
30257: PPUSH
30258: LD_INT 2
30260: PPUSH
30261: LD_INT 0
30263: PPUSH
30264: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30268: LD_VAR 0 2
30272: PPUSH
30273: LD_INT 3
30275: PPUSH
30276: LD_INT 0
30278: PPUSH
30279: CALL_OW 277
// end ;
30283: PPOPN 2
30285: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30286: LD_EXP 51
30290: PUSH
30291: LD_EXP 79
30295: AND
30296: IFFALSE 30393
30298: GO 30300
30300: DISABLE
30301: LD_INT 0
30303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30304: LD_ADDR_VAR 0 1
30308: PUSH
30309: LD_INT 22
30311: PUSH
30312: LD_OWVAR 2
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 21
30323: PUSH
30324: LD_INT 1
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 3
30333: PUSH
30334: LD_INT 23
30336: PUSH
30337: LD_INT 0
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: LIST
30352: PPUSH
30353: CALL_OW 69
30357: ST_TO_ADDR
// if not tmp then
30358: LD_VAR 0 1
30362: NOT
30363: IFFALSE 30367
// exit ;
30365: GO 30393
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30367: LD_VAR 0 1
30371: PUSH
30372: LD_INT 1
30374: PPUSH
30375: LD_VAR 0 1
30379: PPUSH
30380: CALL_OW 12
30384: ARRAY
30385: PPUSH
30386: LD_INT 200
30388: PPUSH
30389: CALL_OW 234
// end ;
30393: PPOPN 1
30395: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30396: LD_EXP 51
30400: PUSH
30401: LD_EXP 80
30405: AND
30406: IFFALSE 30485
30408: GO 30410
30410: DISABLE
30411: LD_INT 0
30413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30414: LD_ADDR_VAR 0 1
30418: PUSH
30419: LD_INT 22
30421: PUSH
30422: LD_OWVAR 2
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 21
30433: PUSH
30434: LD_INT 2
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PPUSH
30445: CALL_OW 69
30449: ST_TO_ADDR
// if not tmp then
30450: LD_VAR 0 1
30454: NOT
30455: IFFALSE 30459
// exit ;
30457: GO 30485
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30459: LD_VAR 0 1
30463: PUSH
30464: LD_INT 1
30466: PPUSH
30467: LD_VAR 0 1
30471: PPUSH
30472: CALL_OW 12
30476: ARRAY
30477: PPUSH
30478: LD_INT 60
30480: PPUSH
30481: CALL_OW 234
// end ;
30485: PPOPN 1
30487: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30488: LD_EXP 51
30492: PUSH
30493: LD_EXP 81
30497: AND
30498: IFFALSE 30597
30500: GO 30502
30502: DISABLE
30503: LD_INT 0
30505: PPUSH
30506: PPUSH
// begin enable ;
30507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30508: LD_ADDR_VAR 0 1
30512: PUSH
30513: LD_INT 22
30515: PUSH
30516: LD_OWVAR 2
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 61
30527: PUSH
30528: EMPTY
30529: LIST
30530: PUSH
30531: LD_INT 33
30533: PUSH
30534: LD_INT 2
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: PPUSH
30546: CALL_OW 69
30550: ST_TO_ADDR
// if not tmp then
30551: LD_VAR 0 1
30555: NOT
30556: IFFALSE 30560
// exit ;
30558: GO 30597
// for i in tmp do
30560: LD_ADDR_VAR 0 2
30564: PUSH
30565: LD_VAR 0 1
30569: PUSH
30570: FOR_IN
30571: IFFALSE 30595
// if IsControledBy ( i ) then
30573: LD_VAR 0 2
30577: PPUSH
30578: CALL_OW 312
30582: IFFALSE 30593
// ComUnlink ( i ) ;
30584: LD_VAR 0 2
30588: PPUSH
30589: CALL_OW 136
30593: GO 30570
30595: POP
30596: POP
// end ;
30597: PPOPN 2
30599: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30600: LD_EXP 51
30604: PUSH
30605: LD_EXP 82
30609: AND
30610: IFFALSE 30750
30612: GO 30614
30614: DISABLE
30615: LD_INT 0
30617: PPUSH
30618: PPUSH
// begin ToLua ( displayPowell(); ) ;
30619: LD_STRING displayPowell();
30621: PPUSH
30622: CALL_OW 559
// uc_side := 0 ;
30626: LD_ADDR_OWVAR 20
30630: PUSH
30631: LD_INT 0
30633: ST_TO_ADDR
// uc_nation := 2 ;
30634: LD_ADDR_OWVAR 21
30638: PUSH
30639: LD_INT 2
30641: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30642: LD_ADDR_OWVAR 37
30646: PUSH
30647: LD_INT 14
30649: ST_TO_ADDR
// vc_engine := engine_siberite ;
30650: LD_ADDR_OWVAR 39
30654: PUSH
30655: LD_INT 3
30657: ST_TO_ADDR
// vc_control := control_apeman ;
30658: LD_ADDR_OWVAR 38
30662: PUSH
30663: LD_INT 5
30665: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30666: LD_ADDR_OWVAR 40
30670: PUSH
30671: LD_INT 29
30673: ST_TO_ADDR
// un := CreateVehicle ;
30674: LD_ADDR_VAR 0 2
30678: PUSH
30679: CALL_OW 45
30683: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30684: LD_VAR 0 2
30688: PPUSH
30689: LD_INT 1
30691: PPUSH
30692: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30696: LD_INT 35
30698: PPUSH
30699: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30703: LD_VAR 0 2
30707: PPUSH
30708: LD_INT 22
30710: PUSH
30711: LD_OWVAR 2
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PPUSH
30720: CALL_OW 69
30724: PPUSH
30725: LD_VAR 0 2
30729: PPUSH
30730: CALL_OW 74
30734: PPUSH
30735: CALL_OW 115
// until IsDead ( un ) ;
30739: LD_VAR 0 2
30743: PPUSH
30744: CALL_OW 301
30748: IFFALSE 30696
// end ;
30750: PPOPN 2
30752: END
// every 0 0$1 trigger StreamModeActive and sStu do
30753: LD_EXP 51
30757: PUSH
30758: LD_EXP 90
30762: AND
30763: IFFALSE 30779
30765: GO 30767
30767: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30768: LD_STRING displayStucuk();
30770: PPUSH
30771: CALL_OW 559
// ResetFog ;
30775: CALL_OW 335
// end ;
30779: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30780: LD_EXP 51
30784: PUSH
30785: LD_EXP 83
30789: AND
30790: IFFALSE 30931
30792: GO 30794
30794: DISABLE
30795: LD_INT 0
30797: PPUSH
30798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30799: LD_ADDR_VAR 0 2
30803: PUSH
30804: LD_INT 22
30806: PUSH
30807: LD_OWVAR 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 21
30818: PUSH
30819: LD_INT 1
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PPUSH
30830: CALL_OW 69
30834: ST_TO_ADDR
// if not tmp then
30835: LD_VAR 0 2
30839: NOT
30840: IFFALSE 30844
// exit ;
30842: GO 30931
// un := tmp [ rand ( 1 , tmp ) ] ;
30844: LD_ADDR_VAR 0 1
30848: PUSH
30849: LD_VAR 0 2
30853: PUSH
30854: LD_INT 1
30856: PPUSH
30857: LD_VAR 0 2
30861: PPUSH
30862: CALL_OW 12
30866: ARRAY
30867: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30868: LD_VAR 0 1
30872: PPUSH
30873: LD_INT 0
30875: PPUSH
30876: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30880: LD_VAR 0 1
30884: PPUSH
30885: LD_OWVAR 3
30889: PUSH
30890: LD_VAR 0 1
30894: DIFF
30895: PPUSH
30896: LD_VAR 0 1
30900: PPUSH
30901: CALL_OW 74
30905: PPUSH
30906: CALL_OW 115
// wait ( 0 0$20 ) ;
30910: LD_INT 700
30912: PPUSH
30913: CALL_OW 67
// SetSide ( un , your_side ) ;
30917: LD_VAR 0 1
30921: PPUSH
30922: LD_OWVAR 2
30926: PPUSH
30927: CALL_OW 235
// end ;
30931: PPOPN 2
30933: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30934: LD_EXP 51
30938: PUSH
30939: LD_EXP 84
30943: AND
30944: IFFALSE 31050
30946: GO 30948
30948: DISABLE
30949: LD_INT 0
30951: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30952: LD_ADDR_VAR 0 1
30956: PUSH
30957: LD_INT 22
30959: PUSH
30960: LD_OWVAR 2
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 2
30971: PUSH
30972: LD_INT 30
30974: PUSH
30975: LD_INT 0
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 30
30984: PUSH
30985: LD_INT 1
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: LIST
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PPUSH
31001: CALL_OW 69
31005: ST_TO_ADDR
// if not depot then
31006: LD_VAR 0 1
31010: NOT
31011: IFFALSE 31015
// exit ;
31013: GO 31050
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31015: LD_VAR 0 1
31019: PUSH
31020: LD_INT 1
31022: ARRAY
31023: PPUSH
31024: CALL_OW 250
31028: PPUSH
31029: LD_VAR 0 1
31033: PUSH
31034: LD_INT 1
31036: ARRAY
31037: PPUSH
31038: CALL_OW 251
31042: PPUSH
31043: LD_INT 70
31045: PPUSH
31046: CALL_OW 495
// end ;
31050: PPOPN 1
31052: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31053: LD_EXP 51
31057: PUSH
31058: LD_EXP 85
31062: AND
31063: IFFALSE 31274
31065: GO 31067
31067: DISABLE
31068: LD_INT 0
31070: PPUSH
31071: PPUSH
31072: PPUSH
31073: PPUSH
31074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31075: LD_ADDR_VAR 0 5
31079: PUSH
31080: LD_INT 22
31082: PUSH
31083: LD_OWVAR 2
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 21
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PPUSH
31106: CALL_OW 69
31110: ST_TO_ADDR
// if not tmp then
31111: LD_VAR 0 5
31115: NOT
31116: IFFALSE 31120
// exit ;
31118: GO 31274
// for i in tmp do
31120: LD_ADDR_VAR 0 1
31124: PUSH
31125: LD_VAR 0 5
31129: PUSH
31130: FOR_IN
31131: IFFALSE 31272
// begin d := rand ( 0 , 5 ) ;
31133: LD_ADDR_VAR 0 4
31137: PUSH
31138: LD_INT 0
31140: PPUSH
31141: LD_INT 5
31143: PPUSH
31144: CALL_OW 12
31148: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31149: LD_ADDR_VAR 0 2
31153: PUSH
31154: LD_VAR 0 1
31158: PPUSH
31159: CALL_OW 250
31163: PPUSH
31164: LD_VAR 0 4
31168: PPUSH
31169: LD_INT 3
31171: PPUSH
31172: LD_INT 12
31174: PPUSH
31175: CALL_OW 12
31179: PPUSH
31180: CALL_OW 272
31184: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31185: LD_ADDR_VAR 0 3
31189: PUSH
31190: LD_VAR 0 1
31194: PPUSH
31195: CALL_OW 251
31199: PPUSH
31200: LD_VAR 0 4
31204: PPUSH
31205: LD_INT 3
31207: PPUSH
31208: LD_INT 12
31210: PPUSH
31211: CALL_OW 12
31215: PPUSH
31216: CALL_OW 273
31220: ST_TO_ADDR
// if ValidHex ( x , y ) then
31221: LD_VAR 0 2
31225: PPUSH
31226: LD_VAR 0 3
31230: PPUSH
31231: CALL_OW 488
31235: IFFALSE 31270
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31237: LD_VAR 0 1
31241: PPUSH
31242: LD_VAR 0 2
31246: PPUSH
31247: LD_VAR 0 3
31251: PPUSH
31252: LD_INT 3
31254: PPUSH
31255: LD_INT 6
31257: PPUSH
31258: CALL_OW 12
31262: PPUSH
31263: LD_INT 1
31265: PPUSH
31266: CALL_OW 483
// end ;
31270: GO 31130
31272: POP
31273: POP
// end ;
31274: PPOPN 5
31276: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31277: LD_EXP 51
31281: PUSH
31282: LD_EXP 86
31286: AND
31287: IFFALSE 31381
31289: GO 31291
31291: DISABLE
31292: LD_INT 0
31294: PPUSH
31295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31296: LD_ADDR_VAR 0 2
31300: PUSH
31301: LD_INT 22
31303: PUSH
31304: LD_OWVAR 2
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 32
31315: PUSH
31316: LD_INT 1
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 21
31325: PUSH
31326: LD_INT 2
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: LIST
31337: PPUSH
31338: CALL_OW 69
31342: ST_TO_ADDR
// if not tmp then
31343: LD_VAR 0 2
31347: NOT
31348: IFFALSE 31352
// exit ;
31350: GO 31381
// for i in tmp do
31352: LD_ADDR_VAR 0 1
31356: PUSH
31357: LD_VAR 0 2
31361: PUSH
31362: FOR_IN
31363: IFFALSE 31379
// SetFuel ( i , 0 ) ;
31365: LD_VAR 0 1
31369: PPUSH
31370: LD_INT 0
31372: PPUSH
31373: CALL_OW 240
31377: GO 31362
31379: POP
31380: POP
// end ;
31381: PPOPN 2
31383: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31384: LD_EXP 51
31388: PUSH
31389: LD_EXP 87
31393: AND
31394: IFFALSE 31460
31396: GO 31398
31398: DISABLE
31399: LD_INT 0
31401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31402: LD_ADDR_VAR 0 1
31406: PUSH
31407: LD_INT 22
31409: PUSH
31410: LD_OWVAR 2
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 30
31421: PUSH
31422: LD_INT 29
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PPUSH
31433: CALL_OW 69
31437: ST_TO_ADDR
// if not tmp then
31438: LD_VAR 0 1
31442: NOT
31443: IFFALSE 31447
// exit ;
31445: GO 31460
// DestroyUnit ( tmp [ 1 ] ) ;
31447: LD_VAR 0 1
31451: PUSH
31452: LD_INT 1
31454: ARRAY
31455: PPUSH
31456: CALL_OW 65
// end ;
31460: PPOPN 1
31462: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31463: LD_EXP 51
31467: PUSH
31468: LD_EXP 89
31472: AND
31473: IFFALSE 31602
31475: GO 31477
31477: DISABLE
31478: LD_INT 0
31480: PPUSH
// begin uc_side := 0 ;
31481: LD_ADDR_OWVAR 20
31485: PUSH
31486: LD_INT 0
31488: ST_TO_ADDR
// uc_nation := nation_arabian ;
31489: LD_ADDR_OWVAR 21
31493: PUSH
31494: LD_INT 2
31496: ST_TO_ADDR
// hc_gallery :=  ;
31497: LD_ADDR_OWVAR 33
31501: PUSH
31502: LD_STRING 
31504: ST_TO_ADDR
// hc_name :=  ;
31505: LD_ADDR_OWVAR 26
31509: PUSH
31510: LD_STRING 
31512: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31513: LD_INT 1
31515: PPUSH
31516: LD_INT 11
31518: PPUSH
31519: LD_INT 10
31521: PPUSH
31522: CALL_OW 380
// un := CreateHuman ;
31526: LD_ADDR_VAR 0 1
31530: PUSH
31531: CALL_OW 44
31535: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31536: LD_VAR 0 1
31540: PPUSH
31541: LD_INT 1
31543: PPUSH
31544: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31548: LD_INT 35
31550: PPUSH
31551: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31555: LD_VAR 0 1
31559: PPUSH
31560: LD_INT 22
31562: PUSH
31563: LD_OWVAR 2
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PPUSH
31572: CALL_OW 69
31576: PPUSH
31577: LD_VAR 0 1
31581: PPUSH
31582: CALL_OW 74
31586: PPUSH
31587: CALL_OW 115
// until IsDead ( un ) ;
31591: LD_VAR 0 1
31595: PPUSH
31596: CALL_OW 301
31600: IFFALSE 31548
// end ;
31602: PPOPN 1
31604: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31605: LD_EXP 51
31609: PUSH
31610: LD_EXP 91
31614: AND
31615: IFFALSE 31627
31617: GO 31619
31619: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31620: LD_STRING earthquake(getX(game), 0, 32)
31622: PPUSH
31623: CALL_OW 559
31627: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31628: LD_EXP 51
31632: PUSH
31633: LD_EXP 92
31637: AND
31638: IFFALSE 31729
31640: GO 31642
31642: DISABLE
31643: LD_INT 0
31645: PPUSH
// begin enable ;
31646: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31647: LD_ADDR_VAR 0 1
31651: PUSH
31652: LD_INT 22
31654: PUSH
31655: LD_OWVAR 2
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 21
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 33
31676: PUSH
31677: LD_INT 3
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: LIST
31688: PPUSH
31689: CALL_OW 69
31693: ST_TO_ADDR
// if not tmp then
31694: LD_VAR 0 1
31698: NOT
31699: IFFALSE 31703
// exit ;
31701: GO 31729
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31703: LD_VAR 0 1
31707: PUSH
31708: LD_INT 1
31710: PPUSH
31711: LD_VAR 0 1
31715: PPUSH
31716: CALL_OW 12
31720: ARRAY
31721: PPUSH
31722: LD_INT 1
31724: PPUSH
31725: CALL_OW 234
// end ;
31729: PPOPN 1
31731: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31732: LD_EXP 51
31736: PUSH
31737: LD_EXP 93
31741: AND
31742: IFFALSE 31883
31744: GO 31746
31746: DISABLE
31747: LD_INT 0
31749: PPUSH
31750: PPUSH
31751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31752: LD_ADDR_VAR 0 3
31756: PUSH
31757: LD_INT 22
31759: PUSH
31760: LD_OWVAR 2
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 25
31771: PUSH
31772: LD_INT 1
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PPUSH
31783: CALL_OW 69
31787: ST_TO_ADDR
// if not tmp then
31788: LD_VAR 0 3
31792: NOT
31793: IFFALSE 31797
// exit ;
31795: GO 31883
// un := tmp [ rand ( 1 , tmp ) ] ;
31797: LD_ADDR_VAR 0 2
31801: PUSH
31802: LD_VAR 0 3
31806: PUSH
31807: LD_INT 1
31809: PPUSH
31810: LD_VAR 0 3
31814: PPUSH
31815: CALL_OW 12
31819: ARRAY
31820: ST_TO_ADDR
// if Crawls ( un ) then
31821: LD_VAR 0 2
31825: PPUSH
31826: CALL_OW 318
31830: IFFALSE 31841
// ComWalk ( un ) ;
31832: LD_VAR 0 2
31836: PPUSH
31837: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31841: LD_VAR 0 2
31845: PPUSH
31846: LD_INT 9
31848: PPUSH
31849: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31853: LD_INT 28
31855: PPUSH
31856: LD_OWVAR 2
31860: PPUSH
31861: LD_INT 2
31863: PPUSH
31864: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31868: LD_INT 29
31870: PPUSH
31871: LD_OWVAR 2
31875: PPUSH
31876: LD_INT 2
31878: PPUSH
31879: CALL_OW 322
// end ;
31883: PPOPN 3
31885: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31886: LD_EXP 51
31890: PUSH
31891: LD_EXP 94
31895: AND
31896: IFFALSE 32007
31898: GO 31900
31900: DISABLE
31901: LD_INT 0
31903: PPUSH
31904: PPUSH
31905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31906: LD_ADDR_VAR 0 3
31910: PUSH
31911: LD_INT 22
31913: PUSH
31914: LD_OWVAR 2
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 25
31925: PUSH
31926: LD_INT 1
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PPUSH
31937: CALL_OW 69
31941: ST_TO_ADDR
// if not tmp then
31942: LD_VAR 0 3
31946: NOT
31947: IFFALSE 31951
// exit ;
31949: GO 32007
// un := tmp [ rand ( 1 , tmp ) ] ;
31951: LD_ADDR_VAR 0 2
31955: PUSH
31956: LD_VAR 0 3
31960: PUSH
31961: LD_INT 1
31963: PPUSH
31964: LD_VAR 0 3
31968: PPUSH
31969: CALL_OW 12
31973: ARRAY
31974: ST_TO_ADDR
// if Crawls ( un ) then
31975: LD_VAR 0 2
31979: PPUSH
31980: CALL_OW 318
31984: IFFALSE 31995
// ComWalk ( un ) ;
31986: LD_VAR 0 2
31990: PPUSH
31991: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31995: LD_VAR 0 2
31999: PPUSH
32000: LD_INT 8
32002: PPUSH
32003: CALL_OW 336
// end ;
32007: PPOPN 3
32009: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32010: LD_EXP 51
32014: PUSH
32015: LD_EXP 95
32019: AND
32020: IFFALSE 32164
32022: GO 32024
32024: DISABLE
32025: LD_INT 0
32027: PPUSH
32028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32029: LD_ADDR_VAR 0 2
32033: PUSH
32034: LD_INT 22
32036: PUSH
32037: LD_OWVAR 2
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 21
32048: PUSH
32049: LD_INT 2
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 2
32058: PUSH
32059: LD_INT 34
32061: PUSH
32062: LD_INT 12
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 34
32071: PUSH
32072: LD_INT 51
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 34
32081: PUSH
32082: LD_INT 32
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: LIST
32099: PPUSH
32100: CALL_OW 69
32104: ST_TO_ADDR
// if not tmp then
32105: LD_VAR 0 2
32109: NOT
32110: IFFALSE 32114
// exit ;
32112: GO 32164
// for i in tmp do
32114: LD_ADDR_VAR 0 1
32118: PUSH
32119: LD_VAR 0 2
32123: PUSH
32124: FOR_IN
32125: IFFALSE 32162
// if GetCargo ( i , mat_artifact ) = 0 then
32127: LD_VAR 0 1
32131: PPUSH
32132: LD_INT 4
32134: PPUSH
32135: CALL_OW 289
32139: PUSH
32140: LD_INT 0
32142: EQUAL
32143: IFFALSE 32160
// SetCargo ( i , mat_siberit , 100 ) ;
32145: LD_VAR 0 1
32149: PPUSH
32150: LD_INT 3
32152: PPUSH
32153: LD_INT 100
32155: PPUSH
32156: CALL_OW 290
32160: GO 32124
32162: POP
32163: POP
// end ;
32164: PPOPN 2
32166: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32167: LD_EXP 51
32171: PUSH
32172: LD_EXP 96
32176: AND
32177: IFFALSE 32360
32179: GO 32181
32181: DISABLE
32182: LD_INT 0
32184: PPUSH
32185: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32186: LD_ADDR_VAR 0 2
32190: PUSH
32191: LD_INT 22
32193: PUSH
32194: LD_OWVAR 2
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PPUSH
32203: CALL_OW 69
32207: ST_TO_ADDR
// if not tmp then
32208: LD_VAR 0 2
32212: NOT
32213: IFFALSE 32217
// exit ;
32215: GO 32360
// for i := 1 to 2 do
32217: LD_ADDR_VAR 0 1
32221: PUSH
32222: DOUBLE
32223: LD_INT 1
32225: DEC
32226: ST_TO_ADDR
32227: LD_INT 2
32229: PUSH
32230: FOR_TO
32231: IFFALSE 32358
// begin uc_side := your_side ;
32233: LD_ADDR_OWVAR 20
32237: PUSH
32238: LD_OWVAR 2
32242: ST_TO_ADDR
// uc_nation := nation_american ;
32243: LD_ADDR_OWVAR 21
32247: PUSH
32248: LD_INT 1
32250: ST_TO_ADDR
// vc_chassis := us_morphling ;
32251: LD_ADDR_OWVAR 37
32255: PUSH
32256: LD_INT 5
32258: ST_TO_ADDR
// vc_engine := engine_siberite ;
32259: LD_ADDR_OWVAR 39
32263: PUSH
32264: LD_INT 3
32266: ST_TO_ADDR
// vc_control := control_computer ;
32267: LD_ADDR_OWVAR 38
32271: PUSH
32272: LD_INT 3
32274: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32275: LD_ADDR_OWVAR 40
32279: PUSH
32280: LD_INT 10
32282: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32283: LD_VAR 0 2
32287: PUSH
32288: LD_INT 1
32290: ARRAY
32291: PPUSH
32292: CALL_OW 310
32296: NOT
32297: IFFALSE 32344
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32299: CALL_OW 45
32303: PPUSH
32304: LD_VAR 0 2
32308: PUSH
32309: LD_INT 1
32311: ARRAY
32312: PPUSH
32313: CALL_OW 250
32317: PPUSH
32318: LD_VAR 0 2
32322: PUSH
32323: LD_INT 1
32325: ARRAY
32326: PPUSH
32327: CALL_OW 251
32331: PPUSH
32332: LD_INT 12
32334: PPUSH
32335: LD_INT 1
32337: PPUSH
32338: CALL_OW 50
32342: GO 32356
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32344: CALL_OW 45
32348: PPUSH
32349: LD_INT 1
32351: PPUSH
32352: CALL_OW 51
// end ;
32356: GO 32230
32358: POP
32359: POP
// end ;
32360: PPOPN 2
32362: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32363: LD_EXP 51
32367: PUSH
32368: LD_EXP 97
32372: AND
32373: IFFALSE 32595
32375: GO 32377
32377: DISABLE
32378: LD_INT 0
32380: PPUSH
32381: PPUSH
32382: PPUSH
32383: PPUSH
32384: PPUSH
32385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32386: LD_ADDR_VAR 0 6
32390: PUSH
32391: LD_INT 22
32393: PUSH
32394: LD_OWVAR 2
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 21
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 3
32415: PUSH
32416: LD_INT 23
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: LIST
32434: PPUSH
32435: CALL_OW 69
32439: ST_TO_ADDR
// if not tmp then
32440: LD_VAR 0 6
32444: NOT
32445: IFFALSE 32449
// exit ;
32447: GO 32595
// s1 := rand ( 1 , 4 ) ;
32449: LD_ADDR_VAR 0 2
32453: PUSH
32454: LD_INT 1
32456: PPUSH
32457: LD_INT 4
32459: PPUSH
32460: CALL_OW 12
32464: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32465: LD_ADDR_VAR 0 4
32469: PUSH
32470: LD_VAR 0 6
32474: PUSH
32475: LD_INT 1
32477: ARRAY
32478: PPUSH
32479: LD_VAR 0 2
32483: PPUSH
32484: CALL_OW 259
32488: ST_TO_ADDR
// if s1 = 1 then
32489: LD_VAR 0 2
32493: PUSH
32494: LD_INT 1
32496: EQUAL
32497: IFFALSE 32517
// s2 := rand ( 2 , 4 ) else
32499: LD_ADDR_VAR 0 3
32503: PUSH
32504: LD_INT 2
32506: PPUSH
32507: LD_INT 4
32509: PPUSH
32510: CALL_OW 12
32514: ST_TO_ADDR
32515: GO 32525
// s2 := 1 ;
32517: LD_ADDR_VAR 0 3
32521: PUSH
32522: LD_INT 1
32524: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32525: LD_ADDR_VAR 0 5
32529: PUSH
32530: LD_VAR 0 6
32534: PUSH
32535: LD_INT 1
32537: ARRAY
32538: PPUSH
32539: LD_VAR 0 3
32543: PPUSH
32544: CALL_OW 259
32548: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32549: LD_VAR 0 6
32553: PUSH
32554: LD_INT 1
32556: ARRAY
32557: PPUSH
32558: LD_VAR 0 2
32562: PPUSH
32563: LD_VAR 0 5
32567: PPUSH
32568: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32572: LD_VAR 0 6
32576: PUSH
32577: LD_INT 1
32579: ARRAY
32580: PPUSH
32581: LD_VAR 0 3
32585: PPUSH
32586: LD_VAR 0 4
32590: PPUSH
32591: CALL_OW 237
// end ;
32595: PPOPN 6
32597: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32598: LD_EXP 51
32602: PUSH
32603: LD_EXP 98
32607: AND
32608: IFFALSE 32687
32610: GO 32612
32612: DISABLE
32613: LD_INT 0
32615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32616: LD_ADDR_VAR 0 1
32620: PUSH
32621: LD_INT 22
32623: PUSH
32624: LD_OWVAR 2
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 30
32635: PUSH
32636: LD_INT 3
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PPUSH
32647: CALL_OW 69
32651: ST_TO_ADDR
// if not tmp then
32652: LD_VAR 0 1
32656: NOT
32657: IFFALSE 32661
// exit ;
32659: GO 32687
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32661: LD_VAR 0 1
32665: PUSH
32666: LD_INT 1
32668: PPUSH
32669: LD_VAR 0 1
32673: PPUSH
32674: CALL_OW 12
32678: ARRAY
32679: PPUSH
32680: LD_INT 1
32682: PPUSH
32683: CALL_OW 234
// end ;
32687: PPOPN 1
32689: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32690: LD_EXP 51
32694: PUSH
32695: LD_EXP 99
32699: AND
32700: IFFALSE 32812
32702: GO 32704
32704: DISABLE
32705: LD_INT 0
32707: PPUSH
32708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32709: LD_ADDR_VAR 0 2
32713: PUSH
32714: LD_INT 22
32716: PUSH
32717: LD_OWVAR 2
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: LD_INT 30
32731: PUSH
32732: LD_INT 27
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 30
32741: PUSH
32742: LD_INT 26
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 30
32751: PUSH
32752: LD_INT 28
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PPUSH
32769: CALL_OW 69
32773: ST_TO_ADDR
// if not tmp then
32774: LD_VAR 0 2
32778: NOT
32779: IFFALSE 32783
// exit ;
32781: GO 32812
// for i in tmp do
32783: LD_ADDR_VAR 0 1
32787: PUSH
32788: LD_VAR 0 2
32792: PUSH
32793: FOR_IN
32794: IFFALSE 32810
// SetLives ( i , 1 ) ;
32796: LD_VAR 0 1
32800: PPUSH
32801: LD_INT 1
32803: PPUSH
32804: CALL_OW 234
32808: GO 32793
32810: POP
32811: POP
// end ;
32812: PPOPN 2
32814: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32815: LD_EXP 51
32819: PUSH
32820: LD_EXP 100
32824: AND
32825: IFFALSE 33112
32827: GO 32829
32829: DISABLE
32830: LD_INT 0
32832: PPUSH
32833: PPUSH
32834: PPUSH
// begin i := rand ( 1 , 7 ) ;
32835: LD_ADDR_VAR 0 1
32839: PUSH
32840: LD_INT 1
32842: PPUSH
32843: LD_INT 7
32845: PPUSH
32846: CALL_OW 12
32850: ST_TO_ADDR
// case i of 1 :
32851: LD_VAR 0 1
32855: PUSH
32856: LD_INT 1
32858: DOUBLE
32859: EQUAL
32860: IFTRUE 32864
32862: GO 32874
32864: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32865: LD_STRING earthquake(getX(game), 0, 32)
32867: PPUSH
32868: CALL_OW 559
32872: GO 33112
32874: LD_INT 2
32876: DOUBLE
32877: EQUAL
32878: IFTRUE 32882
32880: GO 32896
32882: POP
// begin ToLua ( displayStucuk(); ) ;
32883: LD_STRING displayStucuk();
32885: PPUSH
32886: CALL_OW 559
// ResetFog ;
32890: CALL_OW 335
// end ; 3 :
32894: GO 33112
32896: LD_INT 3
32898: DOUBLE
32899: EQUAL
32900: IFTRUE 32904
32902: GO 33008
32904: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32905: LD_ADDR_VAR 0 2
32909: PUSH
32910: LD_INT 22
32912: PUSH
32913: LD_OWVAR 2
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 25
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PPUSH
32936: CALL_OW 69
32940: ST_TO_ADDR
// if not tmp then
32941: LD_VAR 0 2
32945: NOT
32946: IFFALSE 32950
// exit ;
32948: GO 33112
// un := tmp [ rand ( 1 , tmp ) ] ;
32950: LD_ADDR_VAR 0 3
32954: PUSH
32955: LD_VAR 0 2
32959: PUSH
32960: LD_INT 1
32962: PPUSH
32963: LD_VAR 0 2
32967: PPUSH
32968: CALL_OW 12
32972: ARRAY
32973: ST_TO_ADDR
// if Crawls ( un ) then
32974: LD_VAR 0 3
32978: PPUSH
32979: CALL_OW 318
32983: IFFALSE 32994
// ComWalk ( un ) ;
32985: LD_VAR 0 3
32989: PPUSH
32990: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32994: LD_VAR 0 3
32998: PPUSH
32999: LD_INT 8
33001: PPUSH
33002: CALL_OW 336
// end ; 4 :
33006: GO 33112
33008: LD_INT 4
33010: DOUBLE
33011: EQUAL
33012: IFTRUE 33016
33014: GO 33090
33016: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33017: LD_ADDR_VAR 0 2
33021: PUSH
33022: LD_INT 22
33024: PUSH
33025: LD_OWVAR 2
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 30
33036: PUSH
33037: LD_INT 29
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PPUSH
33048: CALL_OW 69
33052: ST_TO_ADDR
// if not tmp then
33053: LD_VAR 0 2
33057: NOT
33058: IFFALSE 33062
// exit ;
33060: GO 33112
// CenterNowOnUnits ( tmp [ 1 ] ) ;
33062: LD_VAR 0 2
33066: PUSH
33067: LD_INT 1
33069: ARRAY
33070: PPUSH
33071: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
33075: LD_VAR 0 2
33079: PUSH
33080: LD_INT 1
33082: ARRAY
33083: PPUSH
33084: CALL_OW 65
// end ; 5 .. 7 :
33088: GO 33112
33090: LD_INT 5
33092: DOUBLE
33093: GREATEREQUAL
33094: IFFALSE 33102
33096: LD_INT 7
33098: DOUBLE
33099: LESSEQUAL
33100: IFTRUE 33104
33102: GO 33111
33104: POP
// StreamSibBomb ; end ;
33105: CALL 29349 0 0
33109: GO 33112
33111: POP
// end ;
33112: PPOPN 3
33114: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33115: LD_EXP 51
33119: PUSH
33120: LD_EXP 101
33124: AND
33125: IFFALSE 33281
33127: GO 33129
33129: DISABLE
33130: LD_INT 0
33132: PPUSH
33133: PPUSH
33134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33135: LD_ADDR_VAR 0 2
33139: PUSH
33140: LD_INT 81
33142: PUSH
33143: LD_OWVAR 2
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: LD_INT 21
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 21
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: LIST
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PPUSH
33184: CALL_OW 69
33188: ST_TO_ADDR
// if not tmp then
33189: LD_VAR 0 2
33193: NOT
33194: IFFALSE 33198
// exit ;
33196: GO 33281
// p := 0 ;
33198: LD_ADDR_VAR 0 3
33202: PUSH
33203: LD_INT 0
33205: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33206: LD_INT 35
33208: PPUSH
33209: CALL_OW 67
// p := p + 1 ;
33213: LD_ADDR_VAR 0 3
33217: PUSH
33218: LD_VAR 0 3
33222: PUSH
33223: LD_INT 1
33225: PLUS
33226: ST_TO_ADDR
// for i in tmp do
33227: LD_ADDR_VAR 0 1
33231: PUSH
33232: LD_VAR 0 2
33236: PUSH
33237: FOR_IN
33238: IFFALSE 33269
// if GetLives ( i ) < 1000 then
33240: LD_VAR 0 1
33244: PPUSH
33245: CALL_OW 256
33249: PUSH
33250: LD_INT 1000
33252: LESS
33253: IFFALSE 33267
// SetLives ( i , 1000 ) ;
33255: LD_VAR 0 1
33259: PPUSH
33260: LD_INT 1000
33262: PPUSH
33263: CALL_OW 234
33267: GO 33237
33269: POP
33270: POP
// until p > 20 ;
33271: LD_VAR 0 3
33275: PUSH
33276: LD_INT 20
33278: GREATER
33279: IFFALSE 33206
// end ;
33281: PPOPN 3
33283: END
// every 0 0$1 trigger StreamModeActive and sTime do
33284: LD_EXP 51
33288: PUSH
33289: LD_EXP 102
33293: AND
33294: IFFALSE 33329
33296: GO 33298
33298: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33299: LD_INT 28
33301: PPUSH
33302: LD_OWVAR 2
33306: PPUSH
33307: LD_INT 2
33309: PPUSH
33310: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33314: LD_INT 30
33316: PPUSH
33317: LD_OWVAR 2
33321: PPUSH
33322: LD_INT 2
33324: PPUSH
33325: CALL_OW 322
// end ;
33329: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33330: LD_EXP 51
33334: PUSH
33335: LD_EXP 103
33339: AND
33340: IFFALSE 33461
33342: GO 33344
33344: DISABLE
33345: LD_INT 0
33347: PPUSH
33348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33349: LD_ADDR_VAR 0 2
33353: PUSH
33354: LD_INT 22
33356: PUSH
33357: LD_OWVAR 2
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 21
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 3
33378: PUSH
33379: LD_INT 23
33381: PUSH
33382: LD_INT 0
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: LIST
33397: PPUSH
33398: CALL_OW 69
33402: ST_TO_ADDR
// if not tmp then
33403: LD_VAR 0 2
33407: NOT
33408: IFFALSE 33412
// exit ;
33410: GO 33461
// for i in tmp do
33412: LD_ADDR_VAR 0 1
33416: PUSH
33417: LD_VAR 0 2
33421: PUSH
33422: FOR_IN
33423: IFFALSE 33459
// begin if Crawls ( i ) then
33425: LD_VAR 0 1
33429: PPUSH
33430: CALL_OW 318
33434: IFFALSE 33445
// ComWalk ( i ) ;
33436: LD_VAR 0 1
33440: PPUSH
33441: CALL_OW 138
// SetClass ( i , 2 ) ;
33445: LD_VAR 0 1
33449: PPUSH
33450: LD_INT 2
33452: PPUSH
33453: CALL_OW 336
// end ;
33457: GO 33422
33459: POP
33460: POP
// end ;
33461: PPOPN 2
33463: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33464: LD_EXP 51
33468: PUSH
33469: LD_EXP 104
33473: AND
33474: IFFALSE 33762
33476: GO 33478
33478: DISABLE
33479: LD_INT 0
33481: PPUSH
33482: PPUSH
33483: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33484: LD_OWVAR 2
33488: PPUSH
33489: LD_INT 9
33491: PPUSH
33492: LD_INT 1
33494: PPUSH
33495: LD_INT 1
33497: PPUSH
33498: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33502: LD_INT 9
33504: PPUSH
33505: LD_OWVAR 2
33509: PPUSH
33510: CALL_OW 343
// uc_side := 9 ;
33514: LD_ADDR_OWVAR 20
33518: PUSH
33519: LD_INT 9
33521: ST_TO_ADDR
// uc_nation := 2 ;
33522: LD_ADDR_OWVAR 21
33526: PUSH
33527: LD_INT 2
33529: ST_TO_ADDR
// hc_name := Dark Warrior ;
33530: LD_ADDR_OWVAR 26
33534: PUSH
33535: LD_STRING Dark Warrior
33537: ST_TO_ADDR
// hc_gallery :=  ;
33538: LD_ADDR_OWVAR 33
33542: PUSH
33543: LD_STRING 
33545: ST_TO_ADDR
// hc_noskilllimit := true ;
33546: LD_ADDR_OWVAR 76
33550: PUSH
33551: LD_INT 1
33553: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33554: LD_ADDR_OWVAR 31
33558: PUSH
33559: LD_INT 30
33561: PUSH
33562: LD_INT 30
33564: PUSH
33565: LD_INT 30
33567: PUSH
33568: LD_INT 30
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: ST_TO_ADDR
// un := CreateHuman ;
33577: LD_ADDR_VAR 0 3
33581: PUSH
33582: CALL_OW 44
33586: ST_TO_ADDR
// hc_noskilllimit := false ;
33587: LD_ADDR_OWVAR 76
33591: PUSH
33592: LD_INT 0
33594: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33595: LD_VAR 0 3
33599: PPUSH
33600: LD_INT 1
33602: PPUSH
33603: CALL_OW 51
// ToLua ( playRanger() ) ;
33607: LD_STRING playRanger()
33609: PPUSH
33610: CALL_OW 559
// p := 0 ;
33614: LD_ADDR_VAR 0 2
33618: PUSH
33619: LD_INT 0
33621: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33622: LD_INT 35
33624: PPUSH
33625: CALL_OW 67
// p := p + 1 ;
33629: LD_ADDR_VAR 0 2
33633: PUSH
33634: LD_VAR 0 2
33638: PUSH
33639: LD_INT 1
33641: PLUS
33642: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33643: LD_VAR 0 3
33647: PPUSH
33648: CALL_OW 256
33652: PUSH
33653: LD_INT 1000
33655: LESS
33656: IFFALSE 33670
// SetLives ( un , 1000 ) ;
33658: LD_VAR 0 3
33662: PPUSH
33663: LD_INT 1000
33665: PPUSH
33666: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33670: LD_VAR 0 3
33674: PPUSH
33675: LD_INT 81
33677: PUSH
33678: LD_OWVAR 2
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 91
33689: PUSH
33690: LD_VAR 0 3
33694: PUSH
33695: LD_INT 30
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: LIST
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PPUSH
33707: CALL_OW 69
33711: PPUSH
33712: LD_VAR 0 3
33716: PPUSH
33717: CALL_OW 74
33721: PPUSH
33722: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33726: LD_VAR 0 2
33730: PUSH
33731: LD_INT 80
33733: GREATER
33734: PUSH
33735: LD_VAR 0 3
33739: PPUSH
33740: CALL_OW 301
33744: OR
33745: IFFALSE 33622
// if un then
33747: LD_VAR 0 3
33751: IFFALSE 33762
// RemoveUnit ( un ) ;
33753: LD_VAR 0 3
33757: PPUSH
33758: CALL_OW 64
// end ;
33762: PPOPN 3
33764: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33765: LD_EXP 105
33769: IFFALSE 33885
33771: GO 33773
33773: DISABLE
33774: LD_INT 0
33776: PPUSH
33777: PPUSH
33778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33779: LD_ADDR_VAR 0 2
33783: PUSH
33784: LD_INT 81
33786: PUSH
33787: LD_OWVAR 2
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 21
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PPUSH
33810: CALL_OW 69
33814: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33815: LD_STRING playComputer()
33817: PPUSH
33818: CALL_OW 559
// if not tmp then
33822: LD_VAR 0 2
33826: NOT
33827: IFFALSE 33831
// exit ;
33829: GO 33885
// for i in tmp do
33831: LD_ADDR_VAR 0 1
33835: PUSH
33836: LD_VAR 0 2
33840: PUSH
33841: FOR_IN
33842: IFFALSE 33883
// for j := 1 to 4 do
33844: LD_ADDR_VAR 0 3
33848: PUSH
33849: DOUBLE
33850: LD_INT 1
33852: DEC
33853: ST_TO_ADDR
33854: LD_INT 4
33856: PUSH
33857: FOR_TO
33858: IFFALSE 33879
// SetSkill ( i , j , 10 ) ;
33860: LD_VAR 0 1
33864: PPUSH
33865: LD_VAR 0 3
33869: PPUSH
33870: LD_INT 10
33872: PPUSH
33873: CALL_OW 237
33877: GO 33857
33879: POP
33880: POP
33881: GO 33841
33883: POP
33884: POP
// end ;
33885: PPOPN 3
33887: END
// every 0 0$1 trigger s30 do var i , tmp ;
33888: LD_EXP 106
33892: IFFALSE 33961
33894: GO 33896
33896: DISABLE
33897: LD_INT 0
33899: PPUSH
33900: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33901: LD_ADDR_VAR 0 2
33905: PUSH
33906: LD_INT 22
33908: PUSH
33909: LD_OWVAR 2
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PPUSH
33918: CALL_OW 69
33922: ST_TO_ADDR
// if not tmp then
33923: LD_VAR 0 2
33927: NOT
33928: IFFALSE 33932
// exit ;
33930: GO 33961
// for i in tmp do
33932: LD_ADDR_VAR 0 1
33936: PUSH
33937: LD_VAR 0 2
33941: PUSH
33942: FOR_IN
33943: IFFALSE 33959
// SetLives ( i , 300 ) ;
33945: LD_VAR 0 1
33949: PPUSH
33950: LD_INT 300
33952: PPUSH
33953: CALL_OW 234
33957: GO 33942
33959: POP
33960: POP
// end ;
33961: PPOPN 2
33963: END
// every 0 0$1 trigger s60 do var i , tmp ;
33964: LD_EXP 107
33968: IFFALSE 34037
33970: GO 33972
33972: DISABLE
33973: LD_INT 0
33975: PPUSH
33976: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33977: LD_ADDR_VAR 0 2
33981: PUSH
33982: LD_INT 22
33984: PUSH
33985: LD_OWVAR 2
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PPUSH
33994: CALL_OW 69
33998: ST_TO_ADDR
// if not tmp then
33999: LD_VAR 0 2
34003: NOT
34004: IFFALSE 34008
// exit ;
34006: GO 34037
// for i in tmp do
34008: LD_ADDR_VAR 0 1
34012: PUSH
34013: LD_VAR 0 2
34017: PUSH
34018: FOR_IN
34019: IFFALSE 34035
// SetLives ( i , 600 ) ;
34021: LD_VAR 0 1
34025: PPUSH
34026: LD_INT 600
34028: PPUSH
34029: CALL_OW 234
34033: GO 34018
34035: POP
34036: POP
// end ;
34037: PPOPN 2
34039: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34040: LD_INT 0
34042: PPUSH
// case cmd of 301 :
34043: LD_VAR 0 1
34047: PUSH
34048: LD_INT 301
34050: DOUBLE
34051: EQUAL
34052: IFTRUE 34056
34054: GO 34088
34056: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34057: LD_VAR 0 6
34061: PPUSH
34062: LD_VAR 0 7
34066: PPUSH
34067: LD_VAR 0 8
34071: PPUSH
34072: LD_VAR 0 4
34076: PPUSH
34077: LD_VAR 0 5
34081: PPUSH
34082: CALL 35289 0 5
34086: GO 34209
34088: LD_INT 302
34090: DOUBLE
34091: EQUAL
34092: IFTRUE 34096
34094: GO 34133
34096: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34097: LD_VAR 0 6
34101: PPUSH
34102: LD_VAR 0 7
34106: PPUSH
34107: LD_VAR 0 8
34111: PPUSH
34112: LD_VAR 0 9
34116: PPUSH
34117: LD_VAR 0 4
34121: PPUSH
34122: LD_VAR 0 5
34126: PPUSH
34127: CALL 35380 0 6
34131: GO 34209
34133: LD_INT 303
34135: DOUBLE
34136: EQUAL
34137: IFTRUE 34141
34139: GO 34178
34141: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34142: LD_VAR 0 6
34146: PPUSH
34147: LD_VAR 0 7
34151: PPUSH
34152: LD_VAR 0 8
34156: PPUSH
34157: LD_VAR 0 9
34161: PPUSH
34162: LD_VAR 0 4
34166: PPUSH
34167: LD_VAR 0 5
34171: PPUSH
34172: CALL 34214 0 6
34176: GO 34209
34178: LD_INT 304
34180: DOUBLE
34181: EQUAL
34182: IFTRUE 34186
34184: GO 34208
34186: POP
// hHackTeleport ( unit , x , y ) ; end ;
34187: LD_VAR 0 2
34191: PPUSH
34192: LD_VAR 0 4
34196: PPUSH
34197: LD_VAR 0 5
34201: PPUSH
34202: CALL 35973 0 3
34206: GO 34209
34208: POP
// end ;
34209: LD_VAR 0 12
34213: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34214: LD_INT 0
34216: PPUSH
34217: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34218: LD_VAR 0 1
34222: PUSH
34223: LD_INT 1
34225: LESS
34226: PUSH
34227: LD_VAR 0 1
34231: PUSH
34232: LD_INT 3
34234: GREATER
34235: OR
34236: PUSH
34237: LD_VAR 0 5
34241: PPUSH
34242: LD_VAR 0 6
34246: PPUSH
34247: CALL_OW 428
34251: OR
34252: IFFALSE 34256
// exit ;
34254: GO 34976
// uc_side := your_side ;
34256: LD_ADDR_OWVAR 20
34260: PUSH
34261: LD_OWVAR 2
34265: ST_TO_ADDR
// uc_nation := nation ;
34266: LD_ADDR_OWVAR 21
34270: PUSH
34271: LD_VAR 0 1
34275: ST_TO_ADDR
// bc_level = 1 ;
34276: LD_ADDR_OWVAR 43
34280: PUSH
34281: LD_INT 1
34283: ST_TO_ADDR
// case btype of 1 :
34284: LD_VAR 0 2
34288: PUSH
34289: LD_INT 1
34291: DOUBLE
34292: EQUAL
34293: IFTRUE 34297
34295: GO 34308
34297: POP
// bc_type := b_depot ; 2 :
34298: LD_ADDR_OWVAR 42
34302: PUSH
34303: LD_INT 0
34305: ST_TO_ADDR
34306: GO 34920
34308: LD_INT 2
34310: DOUBLE
34311: EQUAL
34312: IFTRUE 34316
34314: GO 34327
34316: POP
// bc_type := b_warehouse ; 3 :
34317: LD_ADDR_OWVAR 42
34321: PUSH
34322: LD_INT 1
34324: ST_TO_ADDR
34325: GO 34920
34327: LD_INT 3
34329: DOUBLE
34330: EQUAL
34331: IFTRUE 34335
34333: GO 34346
34335: POP
// bc_type := b_lab ; 4 .. 9 :
34336: LD_ADDR_OWVAR 42
34340: PUSH
34341: LD_INT 6
34343: ST_TO_ADDR
34344: GO 34920
34346: LD_INT 4
34348: DOUBLE
34349: GREATEREQUAL
34350: IFFALSE 34358
34352: LD_INT 9
34354: DOUBLE
34355: LESSEQUAL
34356: IFTRUE 34360
34358: GO 34412
34360: POP
// begin bc_type := b_lab_half ;
34361: LD_ADDR_OWVAR 42
34365: PUSH
34366: LD_INT 7
34368: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34369: LD_ADDR_OWVAR 44
34373: PUSH
34374: LD_INT 10
34376: PUSH
34377: LD_INT 11
34379: PUSH
34380: LD_INT 12
34382: PUSH
34383: LD_INT 15
34385: PUSH
34386: LD_INT 14
34388: PUSH
34389: LD_INT 13
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: PUSH
34400: LD_VAR 0 2
34404: PUSH
34405: LD_INT 3
34407: MINUS
34408: ARRAY
34409: ST_TO_ADDR
// end ; 10 .. 13 :
34410: GO 34920
34412: LD_INT 10
34414: DOUBLE
34415: GREATEREQUAL
34416: IFFALSE 34424
34418: LD_INT 13
34420: DOUBLE
34421: LESSEQUAL
34422: IFTRUE 34426
34424: GO 34503
34426: POP
// begin bc_type := b_lab_full ;
34427: LD_ADDR_OWVAR 42
34431: PUSH
34432: LD_INT 8
34434: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34435: LD_ADDR_OWVAR 44
34439: PUSH
34440: LD_INT 10
34442: PUSH
34443: LD_INT 12
34445: PUSH
34446: LD_INT 14
34448: PUSH
34449: LD_INT 13
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: PUSH
34458: LD_VAR 0 2
34462: PUSH
34463: LD_INT 9
34465: MINUS
34466: ARRAY
34467: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34468: LD_ADDR_OWVAR 45
34472: PUSH
34473: LD_INT 11
34475: PUSH
34476: LD_INT 15
34478: PUSH
34479: LD_INT 12
34481: PUSH
34482: LD_INT 15
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: PUSH
34491: LD_VAR 0 2
34495: PUSH
34496: LD_INT 9
34498: MINUS
34499: ARRAY
34500: ST_TO_ADDR
// end ; 14 :
34501: GO 34920
34503: LD_INT 14
34505: DOUBLE
34506: EQUAL
34507: IFTRUE 34511
34509: GO 34522
34511: POP
// bc_type := b_workshop ; 15 :
34512: LD_ADDR_OWVAR 42
34516: PUSH
34517: LD_INT 2
34519: ST_TO_ADDR
34520: GO 34920
34522: LD_INT 15
34524: DOUBLE
34525: EQUAL
34526: IFTRUE 34530
34528: GO 34541
34530: POP
// bc_type := b_factory ; 16 :
34531: LD_ADDR_OWVAR 42
34535: PUSH
34536: LD_INT 3
34538: ST_TO_ADDR
34539: GO 34920
34541: LD_INT 16
34543: DOUBLE
34544: EQUAL
34545: IFTRUE 34549
34547: GO 34560
34549: POP
// bc_type := b_ext_gun ; 17 :
34550: LD_ADDR_OWVAR 42
34554: PUSH
34555: LD_INT 17
34557: ST_TO_ADDR
34558: GO 34920
34560: LD_INT 17
34562: DOUBLE
34563: EQUAL
34564: IFTRUE 34568
34566: GO 34596
34568: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34569: LD_ADDR_OWVAR 42
34573: PUSH
34574: LD_INT 19
34576: PUSH
34577: LD_INT 23
34579: PUSH
34580: LD_INT 19
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: LIST
34587: PUSH
34588: LD_VAR 0 1
34592: ARRAY
34593: ST_TO_ADDR
34594: GO 34920
34596: LD_INT 18
34598: DOUBLE
34599: EQUAL
34600: IFTRUE 34604
34602: GO 34615
34604: POP
// bc_type := b_ext_radar ; 19 :
34605: LD_ADDR_OWVAR 42
34609: PUSH
34610: LD_INT 20
34612: ST_TO_ADDR
34613: GO 34920
34615: LD_INT 19
34617: DOUBLE
34618: EQUAL
34619: IFTRUE 34623
34621: GO 34634
34623: POP
// bc_type := b_ext_radio ; 20 :
34624: LD_ADDR_OWVAR 42
34628: PUSH
34629: LD_INT 22
34631: ST_TO_ADDR
34632: GO 34920
34634: LD_INT 20
34636: DOUBLE
34637: EQUAL
34638: IFTRUE 34642
34640: GO 34653
34642: POP
// bc_type := b_ext_siberium ; 21 :
34643: LD_ADDR_OWVAR 42
34647: PUSH
34648: LD_INT 21
34650: ST_TO_ADDR
34651: GO 34920
34653: LD_INT 21
34655: DOUBLE
34656: EQUAL
34657: IFTRUE 34661
34659: GO 34672
34661: POP
// bc_type := b_ext_computer ; 22 :
34662: LD_ADDR_OWVAR 42
34666: PUSH
34667: LD_INT 24
34669: ST_TO_ADDR
34670: GO 34920
34672: LD_INT 22
34674: DOUBLE
34675: EQUAL
34676: IFTRUE 34680
34678: GO 34691
34680: POP
// bc_type := b_ext_track ; 23 :
34681: LD_ADDR_OWVAR 42
34685: PUSH
34686: LD_INT 16
34688: ST_TO_ADDR
34689: GO 34920
34691: LD_INT 23
34693: DOUBLE
34694: EQUAL
34695: IFTRUE 34699
34697: GO 34710
34699: POP
// bc_type := b_ext_laser ; 24 :
34700: LD_ADDR_OWVAR 42
34704: PUSH
34705: LD_INT 25
34707: ST_TO_ADDR
34708: GO 34920
34710: LD_INT 24
34712: DOUBLE
34713: EQUAL
34714: IFTRUE 34718
34716: GO 34729
34718: POP
// bc_type := b_control_tower ; 25 :
34719: LD_ADDR_OWVAR 42
34723: PUSH
34724: LD_INT 36
34726: ST_TO_ADDR
34727: GO 34920
34729: LD_INT 25
34731: DOUBLE
34732: EQUAL
34733: IFTRUE 34737
34735: GO 34748
34737: POP
// bc_type := b_breastwork ; 26 :
34738: LD_ADDR_OWVAR 42
34742: PUSH
34743: LD_INT 31
34745: ST_TO_ADDR
34746: GO 34920
34748: LD_INT 26
34750: DOUBLE
34751: EQUAL
34752: IFTRUE 34756
34754: GO 34767
34756: POP
// bc_type := b_bunker ; 27 :
34757: LD_ADDR_OWVAR 42
34761: PUSH
34762: LD_INT 32
34764: ST_TO_ADDR
34765: GO 34920
34767: LD_INT 27
34769: DOUBLE
34770: EQUAL
34771: IFTRUE 34775
34773: GO 34786
34775: POP
// bc_type := b_turret ; 28 :
34776: LD_ADDR_OWVAR 42
34780: PUSH
34781: LD_INT 33
34783: ST_TO_ADDR
34784: GO 34920
34786: LD_INT 28
34788: DOUBLE
34789: EQUAL
34790: IFTRUE 34794
34792: GO 34805
34794: POP
// bc_type := b_armoury ; 29 :
34795: LD_ADDR_OWVAR 42
34799: PUSH
34800: LD_INT 4
34802: ST_TO_ADDR
34803: GO 34920
34805: LD_INT 29
34807: DOUBLE
34808: EQUAL
34809: IFTRUE 34813
34811: GO 34824
34813: POP
// bc_type := b_barracks ; 30 :
34814: LD_ADDR_OWVAR 42
34818: PUSH
34819: LD_INT 5
34821: ST_TO_ADDR
34822: GO 34920
34824: LD_INT 30
34826: DOUBLE
34827: EQUAL
34828: IFTRUE 34832
34830: GO 34843
34832: POP
// bc_type := b_solar_power ; 31 :
34833: LD_ADDR_OWVAR 42
34837: PUSH
34838: LD_INT 27
34840: ST_TO_ADDR
34841: GO 34920
34843: LD_INT 31
34845: DOUBLE
34846: EQUAL
34847: IFTRUE 34851
34849: GO 34862
34851: POP
// bc_type := b_oil_power ; 32 :
34852: LD_ADDR_OWVAR 42
34856: PUSH
34857: LD_INT 26
34859: ST_TO_ADDR
34860: GO 34920
34862: LD_INT 32
34864: DOUBLE
34865: EQUAL
34866: IFTRUE 34870
34868: GO 34881
34870: POP
// bc_type := b_siberite_power ; 33 :
34871: LD_ADDR_OWVAR 42
34875: PUSH
34876: LD_INT 28
34878: ST_TO_ADDR
34879: GO 34920
34881: LD_INT 33
34883: DOUBLE
34884: EQUAL
34885: IFTRUE 34889
34887: GO 34900
34889: POP
// bc_type := b_oil_mine ; 34 :
34890: LD_ADDR_OWVAR 42
34894: PUSH
34895: LD_INT 29
34897: ST_TO_ADDR
34898: GO 34920
34900: LD_INT 34
34902: DOUBLE
34903: EQUAL
34904: IFTRUE 34908
34906: GO 34919
34908: POP
// bc_type := b_siberite_mine ; end ;
34909: LD_ADDR_OWVAR 42
34913: PUSH
34914: LD_INT 30
34916: ST_TO_ADDR
34917: GO 34920
34919: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34920: LD_ADDR_VAR 0 8
34924: PUSH
34925: LD_VAR 0 5
34929: PPUSH
34930: LD_VAR 0 6
34934: PPUSH
34935: LD_VAR 0 3
34939: PPUSH
34940: CALL_OW 47
34944: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34945: LD_OWVAR 42
34949: PUSH
34950: LD_INT 32
34952: PUSH
34953: LD_INT 33
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: IN
34960: IFFALSE 34976
// PlaceWeaponTurret ( b , weapon ) ;
34962: LD_VAR 0 8
34966: PPUSH
34967: LD_VAR 0 4
34971: PPUSH
34972: CALL_OW 431
// end ;
34976: LD_VAR 0 7
34980: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34981: LD_INT 0
34983: PPUSH
34984: PPUSH
34985: PPUSH
34986: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34987: LD_ADDR_VAR 0 4
34991: PUSH
34992: LD_INT 22
34994: PUSH
34995: LD_OWVAR 2
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 2
35006: PUSH
35007: LD_INT 30
35009: PUSH
35010: LD_INT 0
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 30
35019: PUSH
35020: LD_INT 1
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: LIST
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PPUSH
35036: CALL_OW 69
35040: ST_TO_ADDR
// if not tmp then
35041: LD_VAR 0 4
35045: NOT
35046: IFFALSE 35050
// exit ;
35048: GO 35109
// for i in tmp do
35050: LD_ADDR_VAR 0 2
35054: PUSH
35055: LD_VAR 0 4
35059: PUSH
35060: FOR_IN
35061: IFFALSE 35107
// for j = 1 to 3 do
35063: LD_ADDR_VAR 0 3
35067: PUSH
35068: DOUBLE
35069: LD_INT 1
35071: DEC
35072: ST_TO_ADDR
35073: LD_INT 3
35075: PUSH
35076: FOR_TO
35077: IFFALSE 35103
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35079: LD_VAR 0 2
35083: PPUSH
35084: CALL_OW 274
35088: PPUSH
35089: LD_VAR 0 3
35093: PPUSH
35094: LD_INT 99999
35096: PPUSH
35097: CALL_OW 277
35101: GO 35076
35103: POP
35104: POP
35105: GO 35060
35107: POP
35108: POP
// end ;
35109: LD_VAR 0 1
35113: RET
// export function hHackSetLevel10 ; var i , j ; begin
35114: LD_INT 0
35116: PPUSH
35117: PPUSH
35118: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35119: LD_ADDR_VAR 0 2
35123: PUSH
35124: LD_INT 21
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PPUSH
35134: CALL_OW 69
35138: PUSH
35139: FOR_IN
35140: IFFALSE 35192
// if IsSelected ( i ) then
35142: LD_VAR 0 2
35146: PPUSH
35147: CALL_OW 306
35151: IFFALSE 35190
// begin for j := 1 to 4 do
35153: LD_ADDR_VAR 0 3
35157: PUSH
35158: DOUBLE
35159: LD_INT 1
35161: DEC
35162: ST_TO_ADDR
35163: LD_INT 4
35165: PUSH
35166: FOR_TO
35167: IFFALSE 35188
// SetSkill ( i , j , 10 ) ;
35169: LD_VAR 0 2
35173: PPUSH
35174: LD_VAR 0 3
35178: PPUSH
35179: LD_INT 10
35181: PPUSH
35182: CALL_OW 237
35186: GO 35166
35188: POP
35189: POP
// end ;
35190: GO 35139
35192: POP
35193: POP
// end ;
35194: LD_VAR 0 1
35198: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35199: LD_INT 0
35201: PPUSH
35202: PPUSH
35203: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35204: LD_ADDR_VAR 0 2
35208: PUSH
35209: LD_INT 22
35211: PUSH
35212: LD_OWVAR 2
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 21
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PPUSH
35235: CALL_OW 69
35239: PUSH
35240: FOR_IN
35241: IFFALSE 35282
// begin for j := 1 to 4 do
35243: LD_ADDR_VAR 0 3
35247: PUSH
35248: DOUBLE
35249: LD_INT 1
35251: DEC
35252: ST_TO_ADDR
35253: LD_INT 4
35255: PUSH
35256: FOR_TO
35257: IFFALSE 35278
// SetSkill ( i , j , 10 ) ;
35259: LD_VAR 0 2
35263: PPUSH
35264: LD_VAR 0 3
35268: PPUSH
35269: LD_INT 10
35271: PPUSH
35272: CALL_OW 237
35276: GO 35256
35278: POP
35279: POP
// end ;
35280: GO 35240
35282: POP
35283: POP
// end ;
35284: LD_VAR 0 1
35288: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35289: LD_INT 0
35291: PPUSH
// uc_side := your_side ;
35292: LD_ADDR_OWVAR 20
35296: PUSH
35297: LD_OWVAR 2
35301: ST_TO_ADDR
// uc_nation := nation ;
35302: LD_ADDR_OWVAR 21
35306: PUSH
35307: LD_VAR 0 1
35311: ST_TO_ADDR
// InitHc ;
35312: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35316: LD_INT 0
35318: PPUSH
35319: LD_VAR 0 2
35323: PPUSH
35324: LD_VAR 0 3
35328: PPUSH
35329: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35333: LD_VAR 0 4
35337: PPUSH
35338: LD_VAR 0 5
35342: PPUSH
35343: CALL_OW 428
35347: PUSH
35348: LD_INT 0
35350: EQUAL
35351: IFFALSE 35375
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35353: CALL_OW 44
35357: PPUSH
35358: LD_VAR 0 4
35362: PPUSH
35363: LD_VAR 0 5
35367: PPUSH
35368: LD_INT 1
35370: PPUSH
35371: CALL_OW 48
// end ;
35375: LD_VAR 0 6
35379: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35380: LD_INT 0
35382: PPUSH
35383: PPUSH
// uc_side := your_side ;
35384: LD_ADDR_OWVAR 20
35388: PUSH
35389: LD_OWVAR 2
35393: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35394: LD_VAR 0 1
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: LD_INT 2
35404: PUSH
35405: LD_INT 3
35407: PUSH
35408: LD_INT 4
35410: PUSH
35411: LD_INT 5
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: IN
35421: IFFALSE 35433
// uc_nation := nation_american else
35423: LD_ADDR_OWVAR 21
35427: PUSH
35428: LD_INT 1
35430: ST_TO_ADDR
35431: GO 35476
// if chassis in [ 11 , 12 , 13 , 14 ] then
35433: LD_VAR 0 1
35437: PUSH
35438: LD_INT 11
35440: PUSH
35441: LD_INT 12
35443: PUSH
35444: LD_INT 13
35446: PUSH
35447: LD_INT 14
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: IN
35456: IFFALSE 35468
// uc_nation := nation_arabian else
35458: LD_ADDR_OWVAR 21
35462: PUSH
35463: LD_INT 2
35465: ST_TO_ADDR
35466: GO 35476
// uc_nation := nation_russian ;
35468: LD_ADDR_OWVAR 21
35472: PUSH
35473: LD_INT 3
35475: ST_TO_ADDR
// vc_chassis := chassis ;
35476: LD_ADDR_OWVAR 37
35480: PUSH
35481: LD_VAR 0 1
35485: ST_TO_ADDR
// vc_engine := engine ;
35486: LD_ADDR_OWVAR 39
35490: PUSH
35491: LD_VAR 0 2
35495: ST_TO_ADDR
// vc_control := control ;
35496: LD_ADDR_OWVAR 38
35500: PUSH
35501: LD_VAR 0 3
35505: ST_TO_ADDR
// vc_weapon := weapon ;
35506: LD_ADDR_OWVAR 40
35510: PUSH
35511: LD_VAR 0 4
35515: ST_TO_ADDR
// un := CreateVehicle ;
35516: LD_ADDR_VAR 0 8
35520: PUSH
35521: CALL_OW 45
35525: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35526: LD_VAR 0 8
35530: PPUSH
35531: LD_INT 0
35533: PPUSH
35534: LD_INT 5
35536: PPUSH
35537: CALL_OW 12
35541: PPUSH
35542: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35546: LD_VAR 0 8
35550: PPUSH
35551: LD_VAR 0 5
35555: PPUSH
35556: LD_VAR 0 6
35560: PPUSH
35561: LD_INT 1
35563: PPUSH
35564: CALL_OW 48
// end ;
35568: LD_VAR 0 7
35572: RET
// export hInvincible ; every 1 do
35573: GO 35575
35575: DISABLE
// hInvincible := [ ] ;
35576: LD_ADDR_EXP 108
35580: PUSH
35581: EMPTY
35582: ST_TO_ADDR
35583: END
// every 10 do var i ;
35584: GO 35586
35586: DISABLE
35587: LD_INT 0
35589: PPUSH
// begin enable ;
35590: ENABLE
// if not hInvincible then
35591: LD_EXP 108
35595: NOT
35596: IFFALSE 35600
// exit ;
35598: GO 35644
// for i in hInvincible do
35600: LD_ADDR_VAR 0 1
35604: PUSH
35605: LD_EXP 108
35609: PUSH
35610: FOR_IN
35611: IFFALSE 35642
// if GetLives ( i ) < 1000 then
35613: LD_VAR 0 1
35617: PPUSH
35618: CALL_OW 256
35622: PUSH
35623: LD_INT 1000
35625: LESS
35626: IFFALSE 35640
// SetLives ( i , 1000 ) ;
35628: LD_VAR 0 1
35632: PPUSH
35633: LD_INT 1000
35635: PPUSH
35636: CALL_OW 234
35640: GO 35610
35642: POP
35643: POP
// end ;
35644: PPOPN 1
35646: END
// export function hHackInvincible ; var i ; begin
35647: LD_INT 0
35649: PPUSH
35650: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35651: LD_ADDR_VAR 0 2
35655: PUSH
35656: LD_INT 2
35658: PUSH
35659: LD_INT 21
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 21
35671: PUSH
35672: LD_INT 2
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: PPUSH
35684: CALL_OW 69
35688: PUSH
35689: FOR_IN
35690: IFFALSE 35751
// if IsSelected ( i ) then
35692: LD_VAR 0 2
35696: PPUSH
35697: CALL_OW 306
35701: IFFALSE 35749
// begin if i in hInvincible then
35703: LD_VAR 0 2
35707: PUSH
35708: LD_EXP 108
35712: IN
35713: IFFALSE 35733
// hInvincible := hInvincible diff i else
35715: LD_ADDR_EXP 108
35719: PUSH
35720: LD_EXP 108
35724: PUSH
35725: LD_VAR 0 2
35729: DIFF
35730: ST_TO_ADDR
35731: GO 35749
// hInvincible := hInvincible union i ;
35733: LD_ADDR_EXP 108
35737: PUSH
35738: LD_EXP 108
35742: PUSH
35743: LD_VAR 0 2
35747: UNION
35748: ST_TO_ADDR
// end ;
35749: GO 35689
35751: POP
35752: POP
// end ;
35753: LD_VAR 0 1
35757: RET
// export function hHackInvisible ; var i , j ; begin
35758: LD_INT 0
35760: PPUSH
35761: PPUSH
35762: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35763: LD_ADDR_VAR 0 2
35767: PUSH
35768: LD_INT 21
35770: PUSH
35771: LD_INT 1
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PPUSH
35778: CALL_OW 69
35782: PUSH
35783: FOR_IN
35784: IFFALSE 35808
// if IsSelected ( i ) then
35786: LD_VAR 0 2
35790: PPUSH
35791: CALL_OW 306
35795: IFFALSE 35806
// ComForceInvisible ( i ) ;
35797: LD_VAR 0 2
35801: PPUSH
35802: CALL_OW 496
35806: GO 35783
35808: POP
35809: POP
// end ;
35810: LD_VAR 0 1
35814: RET
// export function hHackChangeYourSide ; begin
35815: LD_INT 0
35817: PPUSH
// if your_side = 8 then
35818: LD_OWVAR 2
35822: PUSH
35823: LD_INT 8
35825: EQUAL
35826: IFFALSE 35838
// your_side := 0 else
35828: LD_ADDR_OWVAR 2
35832: PUSH
35833: LD_INT 0
35835: ST_TO_ADDR
35836: GO 35852
// your_side := your_side + 1 ;
35838: LD_ADDR_OWVAR 2
35842: PUSH
35843: LD_OWVAR 2
35847: PUSH
35848: LD_INT 1
35850: PLUS
35851: ST_TO_ADDR
// end ;
35852: LD_VAR 0 1
35856: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35857: LD_INT 0
35859: PPUSH
35860: PPUSH
35861: PPUSH
// for i in all_units do
35862: LD_ADDR_VAR 0 2
35866: PUSH
35867: LD_OWVAR 3
35871: PUSH
35872: FOR_IN
35873: IFFALSE 35951
// if IsSelected ( i ) then
35875: LD_VAR 0 2
35879: PPUSH
35880: CALL_OW 306
35884: IFFALSE 35949
// begin j := GetSide ( i ) ;
35886: LD_ADDR_VAR 0 3
35890: PUSH
35891: LD_VAR 0 2
35895: PPUSH
35896: CALL_OW 255
35900: ST_TO_ADDR
// if j = 8 then
35901: LD_VAR 0 3
35905: PUSH
35906: LD_INT 8
35908: EQUAL
35909: IFFALSE 35921
// j := 0 else
35911: LD_ADDR_VAR 0 3
35915: PUSH
35916: LD_INT 0
35918: ST_TO_ADDR
35919: GO 35935
// j := j + 1 ;
35921: LD_ADDR_VAR 0 3
35925: PUSH
35926: LD_VAR 0 3
35930: PUSH
35931: LD_INT 1
35933: PLUS
35934: ST_TO_ADDR
// SetSide ( i , j ) ;
35935: LD_VAR 0 2
35939: PPUSH
35940: LD_VAR 0 3
35944: PPUSH
35945: CALL_OW 235
// end ;
35949: GO 35872
35951: POP
35952: POP
// end ;
35953: LD_VAR 0 1
35957: RET
// export function hHackFog ; begin
35958: LD_INT 0
35960: PPUSH
// FogOff ( true ) ;
35961: LD_INT 1
35963: PPUSH
35964: CALL_OW 344
// end ;
35968: LD_VAR 0 1
35972: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35973: LD_INT 0
35975: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35976: LD_VAR 0 1
35980: PPUSH
35981: LD_VAR 0 2
35985: PPUSH
35986: LD_VAR 0 3
35990: PPUSH
35991: LD_INT 1
35993: PPUSH
35994: LD_INT 1
35996: PPUSH
35997: CALL_OW 483
// CenterOnXY ( x , y ) ;
36001: LD_VAR 0 2
36005: PPUSH
36006: LD_VAR 0 3
36010: PPUSH
36011: CALL_OW 84
// end ;
36015: LD_VAR 0 4
36019: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36020: LD_INT 0
36022: PPUSH
36023: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36024: LD_VAR 0 1
36028: NOT
36029: PUSH
36030: LD_VAR 0 2
36034: PPUSH
36035: LD_VAR 0 3
36039: PPUSH
36040: CALL_OW 488
36044: NOT
36045: OR
36046: PUSH
36047: LD_VAR 0 1
36051: PPUSH
36052: CALL_OW 266
36056: PUSH
36057: LD_INT 3
36059: NONEQUAL
36060: PUSH
36061: LD_VAR 0 1
36065: PPUSH
36066: CALL_OW 247
36070: PUSH
36071: LD_INT 1
36073: EQUAL
36074: NOT
36075: AND
36076: OR
36077: IFFALSE 36081
// exit ;
36079: GO 36230
// if GetType ( factory ) = unit_human then
36081: LD_VAR 0 1
36085: PPUSH
36086: CALL_OW 247
36090: PUSH
36091: LD_INT 1
36093: EQUAL
36094: IFFALSE 36111
// factory := IsInUnit ( factory ) ;
36096: LD_ADDR_VAR 0 1
36100: PUSH
36101: LD_VAR 0 1
36105: PPUSH
36106: CALL_OW 310
36110: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36111: LD_VAR 0 1
36115: PPUSH
36116: CALL_OW 266
36120: PUSH
36121: LD_INT 3
36123: NONEQUAL
36124: IFFALSE 36128
// exit ;
36126: GO 36230
// if HexInfo ( x , y ) = factory then
36128: LD_VAR 0 2
36132: PPUSH
36133: LD_VAR 0 3
36137: PPUSH
36138: CALL_OW 428
36142: PUSH
36143: LD_VAR 0 1
36147: EQUAL
36148: IFFALSE 36175
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
36150: LD_ADDR_EXP 109
36154: PUSH
36155: LD_EXP 109
36159: PPUSH
36160: LD_VAR 0 1
36164: PPUSH
36165: LD_INT 0
36167: PPUSH
36168: CALL_OW 1
36172: ST_TO_ADDR
36173: GO 36226
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
36175: LD_ADDR_EXP 109
36179: PUSH
36180: LD_EXP 109
36184: PPUSH
36185: LD_VAR 0 1
36189: PPUSH
36190: LD_VAR 0 1
36194: PPUSH
36195: CALL_OW 255
36199: PUSH
36200: LD_VAR 0 1
36204: PUSH
36205: LD_VAR 0 2
36209: PUSH
36210: LD_VAR 0 3
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: PPUSH
36221: CALL_OW 1
36225: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36226: CALL 36235 0 0
// end ;
36230: LD_VAR 0 4
36234: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
36235: LD_INT 0
36237: PPUSH
36238: PPUSH
36239: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
36240: LD_STRING resetFactoryWaypoint();
36242: PPUSH
36243: CALL_OW 559
// if factoryWaypoints then
36247: LD_EXP 109
36251: IFFALSE 36377
// begin list := PrepareArray ( factoryWaypoints ) ;
36253: LD_ADDR_VAR 0 3
36257: PUSH
36258: LD_EXP 109
36262: PPUSH
36263: CALL 82670 0 1
36267: ST_TO_ADDR
// for i := 1 to list do
36268: LD_ADDR_VAR 0 2
36272: PUSH
36273: DOUBLE
36274: LD_INT 1
36276: DEC
36277: ST_TO_ADDR
36278: LD_VAR 0 3
36282: PUSH
36283: FOR_TO
36284: IFFALSE 36375
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36286: LD_STRING setFactoryWaypointXY(
36288: PUSH
36289: LD_VAR 0 3
36293: PUSH
36294: LD_VAR 0 2
36298: ARRAY
36299: PUSH
36300: LD_INT 1
36302: ARRAY
36303: STR
36304: PUSH
36305: LD_STRING ,
36307: STR
36308: PUSH
36309: LD_VAR 0 3
36313: PUSH
36314: LD_VAR 0 2
36318: ARRAY
36319: PUSH
36320: LD_INT 2
36322: ARRAY
36323: STR
36324: PUSH
36325: LD_STRING ,
36327: STR
36328: PUSH
36329: LD_VAR 0 3
36333: PUSH
36334: LD_VAR 0 2
36338: ARRAY
36339: PUSH
36340: LD_INT 3
36342: ARRAY
36343: STR
36344: PUSH
36345: LD_STRING ,
36347: STR
36348: PUSH
36349: LD_VAR 0 3
36353: PUSH
36354: LD_VAR 0 2
36358: ARRAY
36359: PUSH
36360: LD_INT 4
36362: ARRAY
36363: STR
36364: PUSH
36365: LD_STRING )
36367: STR
36368: PPUSH
36369: CALL_OW 559
36373: GO 36283
36375: POP
36376: POP
// end ; end ;
36377: LD_VAR 0 1
36381: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
36382: LD_INT 0
36384: PPUSH
// if HexInfo ( x , y ) = warehouse then
36385: LD_VAR 0 2
36389: PPUSH
36390: LD_VAR 0 3
36394: PPUSH
36395: CALL_OW 428
36399: PUSH
36400: LD_VAR 0 1
36404: EQUAL
36405: IFFALSE 36432
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
36407: LD_ADDR_EXP 110
36411: PUSH
36412: LD_EXP 110
36416: PPUSH
36417: LD_VAR 0 1
36421: PPUSH
36422: LD_INT 0
36424: PPUSH
36425: CALL_OW 1
36429: ST_TO_ADDR
36430: GO 36483
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
36432: LD_ADDR_EXP 110
36436: PUSH
36437: LD_EXP 110
36441: PPUSH
36442: LD_VAR 0 1
36446: PPUSH
36447: LD_VAR 0 1
36451: PPUSH
36452: CALL_OW 255
36456: PUSH
36457: LD_VAR 0 1
36461: PUSH
36462: LD_VAR 0 2
36466: PUSH
36467: LD_VAR 0 3
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: PPUSH
36478: CALL_OW 1
36482: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
36483: CALL 36492 0 0
// end ;
36487: LD_VAR 0 4
36491: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
36492: LD_INT 0
36494: PPUSH
36495: PPUSH
36496: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
36497: LD_STRING resetWarehouseGatheringPoints();
36499: PPUSH
36500: CALL_OW 559
// if warehouseGatheringPoints then
36504: LD_EXP 110
36508: IFFALSE 36634
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36510: LD_ADDR_VAR 0 3
36514: PUSH
36515: LD_EXP 110
36519: PPUSH
36520: CALL 82670 0 1
36524: ST_TO_ADDR
// for i := 1 to list do
36525: LD_ADDR_VAR 0 2
36529: PUSH
36530: DOUBLE
36531: LD_INT 1
36533: DEC
36534: ST_TO_ADDR
36535: LD_VAR 0 3
36539: PUSH
36540: FOR_TO
36541: IFFALSE 36632
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36543: LD_STRING setWarehouseGatheringPointXY(
36545: PUSH
36546: LD_VAR 0 3
36550: PUSH
36551: LD_VAR 0 2
36555: ARRAY
36556: PUSH
36557: LD_INT 1
36559: ARRAY
36560: STR
36561: PUSH
36562: LD_STRING ,
36564: STR
36565: PUSH
36566: LD_VAR 0 3
36570: PUSH
36571: LD_VAR 0 2
36575: ARRAY
36576: PUSH
36577: LD_INT 2
36579: ARRAY
36580: STR
36581: PUSH
36582: LD_STRING ,
36584: STR
36585: PUSH
36586: LD_VAR 0 3
36590: PUSH
36591: LD_VAR 0 2
36595: ARRAY
36596: PUSH
36597: LD_INT 3
36599: ARRAY
36600: STR
36601: PUSH
36602: LD_STRING ,
36604: STR
36605: PUSH
36606: LD_VAR 0 3
36610: PUSH
36611: LD_VAR 0 2
36615: ARRAY
36616: PUSH
36617: LD_INT 4
36619: ARRAY
36620: STR
36621: PUSH
36622: LD_STRING )
36624: STR
36625: PPUSH
36626: CALL_OW 559
36630: GO 36540
36632: POP
36633: POP
// end ; end ;
36634: LD_VAR 0 1
36638: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36639: LD_EXP 110
36643: IFFALSE 37328
36645: GO 36647
36647: DISABLE
36648: LD_INT 0
36650: PPUSH
36651: PPUSH
36652: PPUSH
36653: PPUSH
36654: PPUSH
36655: PPUSH
36656: PPUSH
36657: PPUSH
36658: PPUSH
// begin enable ;
36659: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36660: LD_ADDR_VAR 0 3
36664: PUSH
36665: LD_EXP 110
36669: PPUSH
36670: CALL 82670 0 1
36674: ST_TO_ADDR
// if not list then
36675: LD_VAR 0 3
36679: NOT
36680: IFFALSE 36684
// exit ;
36682: GO 37328
// for i := 1 to list do
36684: LD_ADDR_VAR 0 1
36688: PUSH
36689: DOUBLE
36690: LD_INT 1
36692: DEC
36693: ST_TO_ADDR
36694: LD_VAR 0 3
36698: PUSH
36699: FOR_TO
36700: IFFALSE 37326
// begin depot := list [ i ] [ 2 ] ;
36702: LD_ADDR_VAR 0 8
36706: PUSH
36707: LD_VAR 0 3
36711: PUSH
36712: LD_VAR 0 1
36716: ARRAY
36717: PUSH
36718: LD_INT 2
36720: ARRAY
36721: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36722: LD_ADDR_VAR 0 5
36726: PUSH
36727: LD_VAR 0 3
36731: PUSH
36732: LD_VAR 0 1
36736: ARRAY
36737: PUSH
36738: LD_INT 1
36740: ARRAY
36741: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36742: LD_VAR 0 8
36746: PPUSH
36747: CALL_OW 301
36751: PUSH
36752: LD_VAR 0 5
36756: PUSH
36757: LD_VAR 0 8
36761: PPUSH
36762: CALL_OW 255
36766: NONEQUAL
36767: OR
36768: IFFALSE 36797
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36770: LD_ADDR_EXP 110
36774: PUSH
36775: LD_EXP 110
36779: PPUSH
36780: LD_VAR 0 8
36784: PPUSH
36785: LD_INT 0
36787: PPUSH
36788: CALL_OW 1
36792: ST_TO_ADDR
// exit ;
36793: POP
36794: POP
36795: GO 37328
// end ; x := list [ i ] [ 3 ] ;
36797: LD_ADDR_VAR 0 6
36801: PUSH
36802: LD_VAR 0 3
36806: PUSH
36807: LD_VAR 0 1
36811: ARRAY
36812: PUSH
36813: LD_INT 3
36815: ARRAY
36816: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36817: LD_ADDR_VAR 0 7
36821: PUSH
36822: LD_VAR 0 3
36826: PUSH
36827: LD_VAR 0 1
36831: ARRAY
36832: PUSH
36833: LD_INT 4
36835: ARRAY
36836: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36837: LD_ADDR_VAR 0 9
36841: PUSH
36842: LD_VAR 0 6
36846: PPUSH
36847: LD_VAR 0 7
36851: PPUSH
36852: LD_INT 16
36854: PPUSH
36855: CALL 81258 0 3
36859: ST_TO_ADDR
// if not cratesNearbyPoint then
36860: LD_VAR 0 9
36864: NOT
36865: IFFALSE 36871
// exit ;
36867: POP
36868: POP
36869: GO 37328
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36871: LD_ADDR_VAR 0 4
36875: PUSH
36876: LD_INT 22
36878: PUSH
36879: LD_VAR 0 5
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 3
36890: PUSH
36891: LD_INT 60
36893: PUSH
36894: EMPTY
36895: LIST
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 91
36903: PUSH
36904: LD_VAR 0 8
36908: PUSH
36909: LD_INT 6
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: LD_INT 25
36922: PUSH
36923: LD_INT 2
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 25
36932: PUSH
36933: LD_INT 16
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: LIST
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: PPUSH
36951: CALL_OW 69
36955: PUSH
36956: LD_VAR 0 8
36960: PPUSH
36961: CALL_OW 313
36965: PPUSH
36966: LD_INT 3
36968: PUSH
36969: LD_INT 60
36971: PUSH
36972: EMPTY
36973: LIST
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 2
36981: PUSH
36982: LD_INT 25
36984: PUSH
36985: LD_INT 2
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 25
36994: PUSH
36995: LD_INT 16
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PPUSH
37011: CALL_OW 72
37015: UNION
37016: ST_TO_ADDR
// if tmp then
37017: LD_VAR 0 4
37021: IFFALSE 37101
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37023: LD_ADDR_VAR 0 4
37027: PUSH
37028: LD_VAR 0 4
37032: PPUSH
37033: LD_INT 3
37035: PPUSH
37036: CALL 79227 0 2
37040: ST_TO_ADDR
// for j in tmp do
37041: LD_ADDR_VAR 0 2
37045: PUSH
37046: LD_VAR 0 4
37050: PUSH
37051: FOR_IN
37052: IFFALSE 37095
// begin if IsInUnit ( j ) then
37054: LD_VAR 0 2
37058: PPUSH
37059: CALL_OW 310
37063: IFFALSE 37074
// ComExit ( j ) ;
37065: LD_VAR 0 2
37069: PPUSH
37070: CALL 79310 0 1
// AddComCollect ( j , x , y ) ;
37074: LD_VAR 0 2
37078: PPUSH
37079: LD_VAR 0 6
37083: PPUSH
37084: LD_VAR 0 7
37088: PPUSH
37089: CALL_OW 177
// end ;
37093: GO 37051
37095: POP
37096: POP
// exit ;
37097: POP
37098: POP
37099: GO 37328
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
37101: LD_ADDR_VAR 0 4
37105: PUSH
37106: LD_INT 22
37108: PUSH
37109: LD_VAR 0 5
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 91
37120: PUSH
37121: LD_VAR 0 8
37125: PUSH
37126: LD_INT 8
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: LD_INT 34
37139: PUSH
37140: LD_INT 12
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 34
37149: PUSH
37150: LD_INT 51
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 34
37159: PUSH
37160: LD_INT 32
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 34
37169: PUSH
37170: LD_INT 89
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: LIST
37188: PPUSH
37189: CALL_OW 69
37193: ST_TO_ADDR
// if tmp then
37194: LD_VAR 0 4
37198: IFFALSE 37324
// begin for j in tmp do
37200: LD_ADDR_VAR 0 2
37204: PUSH
37205: LD_VAR 0 4
37209: PUSH
37210: FOR_IN
37211: IFFALSE 37322
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
37213: LD_VAR 0 2
37217: PPUSH
37218: CALL_OW 262
37222: PUSH
37223: LD_INT 3
37225: EQUAL
37226: PUSH
37227: LD_VAR 0 2
37231: PPUSH
37232: CALL_OW 261
37236: PUSH
37237: LD_INT 20
37239: GREATER
37240: OR
37241: PUSH
37242: LD_VAR 0 2
37246: PPUSH
37247: CALL_OW 314
37251: NOT
37252: AND
37253: PUSH
37254: LD_VAR 0 2
37258: PPUSH
37259: CALL_OW 263
37263: PUSH
37264: LD_INT 1
37266: NONEQUAL
37267: PUSH
37268: LD_VAR 0 2
37272: PPUSH
37273: CALL_OW 311
37277: OR
37278: AND
37279: IFFALSE 37320
// begin ComCollect ( j , x , y ) ;
37281: LD_VAR 0 2
37285: PPUSH
37286: LD_VAR 0 6
37290: PPUSH
37291: LD_VAR 0 7
37295: PPUSH
37296: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
37300: LD_VAR 0 2
37304: PPUSH
37305: LD_VAR 0 8
37309: PPUSH
37310: CALL_OW 172
// exit ;
37314: POP
37315: POP
37316: POP
37317: POP
37318: GO 37328
// end ;
37320: GO 37210
37322: POP
37323: POP
// end ; end ;
37324: GO 36699
37326: POP
37327: POP
// end ; end_of_file
37328: PPOPN 9
37330: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37331: LD_INT 0
37333: PPUSH
37334: PPUSH
37335: PPUSH
37336: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37337: LD_VAR 0 1
37341: PPUSH
37342: CALL_OW 264
37346: PUSH
37347: LD_INT 91
37349: EQUAL
37350: IFFALSE 37422
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37352: LD_INT 68
37354: PPUSH
37355: LD_VAR 0 1
37359: PPUSH
37360: CALL_OW 255
37364: PPUSH
37365: CALL_OW 321
37369: PUSH
37370: LD_INT 2
37372: EQUAL
37373: IFFALSE 37385
// eff := 70 else
37375: LD_ADDR_VAR 0 4
37379: PUSH
37380: LD_INT 70
37382: ST_TO_ADDR
37383: GO 37393
// eff := 30 ;
37385: LD_ADDR_VAR 0 4
37389: PUSH
37390: LD_INT 30
37392: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37393: LD_VAR 0 1
37397: PPUSH
37398: CALL_OW 250
37402: PPUSH
37403: LD_VAR 0 1
37407: PPUSH
37408: CALL_OW 251
37412: PPUSH
37413: LD_VAR 0 4
37417: PPUSH
37418: CALL_OW 495
// end ; end ;
37422: LD_VAR 0 2
37426: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37427: LD_INT 0
37429: PPUSH
// end ;
37430: LD_VAR 0 4
37434: RET
// export function SOS_Command ( cmd ) ; begin
37435: LD_INT 0
37437: PPUSH
// end ;
37438: LD_VAR 0 2
37442: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37443: LD_INT 0
37445: PPUSH
// end ;
37446: LD_VAR 0 6
37450: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
37451: LD_INT 0
37453: PPUSH
37454: PPUSH
// if not vehicle or not factory then
37455: LD_VAR 0 1
37459: NOT
37460: PUSH
37461: LD_VAR 0 2
37465: NOT
37466: OR
37467: IFFALSE 37471
// exit ;
37469: GO 37702
// if factoryWaypoints >= factory then
37471: LD_EXP 109
37475: PUSH
37476: LD_VAR 0 2
37480: GREATEREQUAL
37481: IFFALSE 37702
// if factoryWaypoints [ factory ] then
37483: LD_EXP 109
37487: PUSH
37488: LD_VAR 0 2
37492: ARRAY
37493: IFFALSE 37702
// begin if GetControl ( vehicle ) = control_manual then
37495: LD_VAR 0 1
37499: PPUSH
37500: CALL_OW 263
37504: PUSH
37505: LD_INT 1
37507: EQUAL
37508: IFFALSE 37589
// begin driver := IsDrivenBy ( vehicle ) ;
37510: LD_ADDR_VAR 0 4
37514: PUSH
37515: LD_VAR 0 1
37519: PPUSH
37520: CALL_OW 311
37524: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37525: LD_VAR 0 4
37529: PPUSH
37530: LD_EXP 109
37534: PUSH
37535: LD_VAR 0 2
37539: ARRAY
37540: PUSH
37541: LD_INT 3
37543: ARRAY
37544: PPUSH
37545: LD_EXP 109
37549: PUSH
37550: LD_VAR 0 2
37554: ARRAY
37555: PUSH
37556: LD_INT 4
37558: ARRAY
37559: PPUSH
37560: CALL_OW 171
// AddComExitVehicle ( driver ) ;
37564: LD_VAR 0 4
37568: PPUSH
37569: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
37573: LD_VAR 0 4
37577: PPUSH
37578: LD_VAR 0 2
37582: PPUSH
37583: CALL_OW 180
// end else
37587: GO 37702
// if GetControl ( vehicle ) = control_remote then
37589: LD_VAR 0 1
37593: PPUSH
37594: CALL_OW 263
37598: PUSH
37599: LD_INT 2
37601: EQUAL
37602: IFFALSE 37663
// begin wait ( 0 0$2 ) ;
37604: LD_INT 70
37606: PPUSH
37607: CALL_OW 67
// if Connect ( vehicle ) then
37611: LD_VAR 0 1
37615: PPUSH
37616: CALL 49551 0 1
37620: IFFALSE 37661
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37622: LD_VAR 0 1
37626: PPUSH
37627: LD_EXP 109
37631: PUSH
37632: LD_VAR 0 2
37636: ARRAY
37637: PUSH
37638: LD_INT 3
37640: ARRAY
37641: PPUSH
37642: LD_EXP 109
37646: PUSH
37647: LD_VAR 0 2
37651: ARRAY
37652: PUSH
37653: LD_INT 4
37655: ARRAY
37656: PPUSH
37657: CALL_OW 171
// end else
37661: GO 37702
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37663: LD_VAR 0 1
37667: PPUSH
37668: LD_EXP 109
37672: PUSH
37673: LD_VAR 0 2
37677: ARRAY
37678: PUSH
37679: LD_INT 3
37681: ARRAY
37682: PPUSH
37683: LD_EXP 109
37687: PUSH
37688: LD_VAR 0 2
37692: ARRAY
37693: PUSH
37694: LD_INT 4
37696: ARRAY
37697: PPUSH
37698: CALL_OW 171
// end ; end ;
37702: LD_VAR 0 3
37706: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37707: LD_INT 0
37709: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37710: LD_VAR 0 1
37714: PUSH
37715: LD_INT 250
37717: EQUAL
37718: PUSH
37719: LD_VAR 0 2
37723: PPUSH
37724: CALL_OW 264
37728: PUSH
37729: LD_INT 81
37731: EQUAL
37732: AND
37733: IFFALSE 37754
// MinerPlaceMine ( unit , x , y ) ;
37735: LD_VAR 0 2
37739: PPUSH
37740: LD_VAR 0 4
37744: PPUSH
37745: LD_VAR 0 5
37749: PPUSH
37750: CALL 40139 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37754: LD_VAR 0 1
37758: PUSH
37759: LD_INT 251
37761: EQUAL
37762: PUSH
37763: LD_VAR 0 2
37767: PPUSH
37768: CALL_OW 264
37772: PUSH
37773: LD_INT 81
37775: EQUAL
37776: AND
37777: IFFALSE 37798
// MinerDetonateMine ( unit , x , y ) ;
37779: LD_VAR 0 2
37783: PPUSH
37784: LD_VAR 0 4
37788: PPUSH
37789: LD_VAR 0 5
37793: PPUSH
37794: CALL 40414 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37798: LD_VAR 0 1
37802: PUSH
37803: LD_INT 252
37805: EQUAL
37806: PUSH
37807: LD_VAR 0 2
37811: PPUSH
37812: CALL_OW 264
37816: PUSH
37817: LD_INT 81
37819: EQUAL
37820: AND
37821: IFFALSE 37842
// MinerCreateMinefield ( unit , x , y ) ;
37823: LD_VAR 0 2
37827: PPUSH
37828: LD_VAR 0 4
37832: PPUSH
37833: LD_VAR 0 5
37837: PPUSH
37838: CALL 40831 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37842: LD_VAR 0 1
37846: PUSH
37847: LD_INT 253
37849: EQUAL
37850: PUSH
37851: LD_VAR 0 2
37855: PPUSH
37856: CALL_OW 257
37860: PUSH
37861: LD_INT 5
37863: EQUAL
37864: AND
37865: IFFALSE 37886
// ComBinocular ( unit , x , y ) ;
37867: LD_VAR 0 2
37871: PPUSH
37872: LD_VAR 0 4
37876: PPUSH
37877: LD_VAR 0 5
37881: PPUSH
37882: CALL 41200 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37886: LD_VAR 0 1
37890: PUSH
37891: LD_INT 254
37893: EQUAL
37894: PUSH
37895: LD_VAR 0 2
37899: PPUSH
37900: CALL_OW 264
37904: PUSH
37905: LD_INT 99
37907: EQUAL
37908: AND
37909: PUSH
37910: LD_VAR 0 3
37914: PPUSH
37915: CALL_OW 263
37919: PUSH
37920: LD_INT 3
37922: EQUAL
37923: AND
37924: IFFALSE 37940
// HackDestroyVehicle ( unit , selectedUnit ) ;
37926: LD_VAR 0 2
37930: PPUSH
37931: LD_VAR 0 3
37935: PPUSH
37936: CALL 39503 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37940: LD_VAR 0 1
37944: PUSH
37945: LD_INT 255
37947: EQUAL
37948: PUSH
37949: LD_VAR 0 2
37953: PPUSH
37954: CALL_OW 264
37958: PUSH
37959: LD_INT 14
37961: PUSH
37962: LD_INT 53
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: IN
37969: AND
37970: PUSH
37971: LD_VAR 0 4
37975: PPUSH
37976: LD_VAR 0 5
37980: PPUSH
37981: CALL_OW 488
37985: AND
37986: IFFALSE 38010
// CutTreeXYR ( unit , x , y , 12 ) ;
37988: LD_VAR 0 2
37992: PPUSH
37993: LD_VAR 0 4
37997: PPUSH
37998: LD_VAR 0 5
38002: PPUSH
38003: LD_INT 12
38005: PPUSH
38006: CALL 38073 0 4
// if cmd = 256 then
38010: LD_VAR 0 1
38014: PUSH
38015: LD_INT 256
38017: EQUAL
38018: IFFALSE 38039
// SetFactoryWaypoint ( unit , x , y ) ;
38020: LD_VAR 0 2
38024: PPUSH
38025: LD_VAR 0 4
38029: PPUSH
38030: LD_VAR 0 5
38034: PPUSH
38035: CALL 36020 0 3
// if cmd = 257 then
38039: LD_VAR 0 1
38043: PUSH
38044: LD_INT 257
38046: EQUAL
38047: IFFALSE 38068
// SetWarehouseGatheringPoint ( unit , x , y ) ;
38049: LD_VAR 0 2
38053: PPUSH
38054: LD_VAR 0 4
38058: PPUSH
38059: LD_VAR 0 5
38063: PPUSH
38064: CALL 36382 0 3
// end ;
38068: LD_VAR 0 6
38072: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38073: LD_INT 0
38075: PPUSH
38076: PPUSH
38077: PPUSH
38078: PPUSH
38079: PPUSH
38080: PPUSH
38081: PPUSH
38082: PPUSH
38083: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
38084: LD_VAR 0 1
38088: NOT
38089: PUSH
38090: LD_VAR 0 2
38094: PPUSH
38095: LD_VAR 0 3
38099: PPUSH
38100: CALL_OW 488
38104: NOT
38105: OR
38106: PUSH
38107: LD_VAR 0 4
38111: NOT
38112: OR
38113: IFFALSE 38117
// exit ;
38115: GO 38457
// list := [ ] ;
38117: LD_ADDR_VAR 0 13
38121: PUSH
38122: EMPTY
38123: ST_TO_ADDR
// if x - r < 0 then
38124: LD_VAR 0 2
38128: PUSH
38129: LD_VAR 0 4
38133: MINUS
38134: PUSH
38135: LD_INT 0
38137: LESS
38138: IFFALSE 38150
// min_x := 0 else
38140: LD_ADDR_VAR 0 7
38144: PUSH
38145: LD_INT 0
38147: ST_TO_ADDR
38148: GO 38166
// min_x := x - r ;
38150: LD_ADDR_VAR 0 7
38154: PUSH
38155: LD_VAR 0 2
38159: PUSH
38160: LD_VAR 0 4
38164: MINUS
38165: ST_TO_ADDR
// if y - r < 0 then
38166: LD_VAR 0 3
38170: PUSH
38171: LD_VAR 0 4
38175: MINUS
38176: PUSH
38177: LD_INT 0
38179: LESS
38180: IFFALSE 38192
// min_y := 0 else
38182: LD_ADDR_VAR 0 8
38186: PUSH
38187: LD_INT 0
38189: ST_TO_ADDR
38190: GO 38208
// min_y := y - r ;
38192: LD_ADDR_VAR 0 8
38196: PUSH
38197: LD_VAR 0 3
38201: PUSH
38202: LD_VAR 0 4
38206: MINUS
38207: ST_TO_ADDR
// max_x := x + r ;
38208: LD_ADDR_VAR 0 9
38212: PUSH
38213: LD_VAR 0 2
38217: PUSH
38218: LD_VAR 0 4
38222: PLUS
38223: ST_TO_ADDR
// max_y := y + r ;
38224: LD_ADDR_VAR 0 10
38228: PUSH
38229: LD_VAR 0 3
38233: PUSH
38234: LD_VAR 0 4
38238: PLUS
38239: ST_TO_ADDR
// for _x = min_x to max_x do
38240: LD_ADDR_VAR 0 11
38244: PUSH
38245: DOUBLE
38246: LD_VAR 0 7
38250: DEC
38251: ST_TO_ADDR
38252: LD_VAR 0 9
38256: PUSH
38257: FOR_TO
38258: IFFALSE 38375
// for _y = min_y to max_y do
38260: LD_ADDR_VAR 0 12
38264: PUSH
38265: DOUBLE
38266: LD_VAR 0 8
38270: DEC
38271: ST_TO_ADDR
38272: LD_VAR 0 10
38276: PUSH
38277: FOR_TO
38278: IFFALSE 38371
// begin if not ValidHex ( _x , _y ) then
38280: LD_VAR 0 11
38284: PPUSH
38285: LD_VAR 0 12
38289: PPUSH
38290: CALL_OW 488
38294: NOT
38295: IFFALSE 38299
// continue ;
38297: GO 38277
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38299: LD_VAR 0 11
38303: PPUSH
38304: LD_VAR 0 12
38308: PPUSH
38309: CALL_OW 351
38313: PUSH
38314: LD_VAR 0 11
38318: PPUSH
38319: LD_VAR 0 12
38323: PPUSH
38324: CALL_OW 554
38328: AND
38329: IFFALSE 38369
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38331: LD_ADDR_VAR 0 13
38335: PUSH
38336: LD_VAR 0 13
38340: PPUSH
38341: LD_VAR 0 13
38345: PUSH
38346: LD_INT 1
38348: PLUS
38349: PPUSH
38350: LD_VAR 0 11
38354: PUSH
38355: LD_VAR 0 12
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PPUSH
38364: CALL_OW 2
38368: ST_TO_ADDR
// end ;
38369: GO 38277
38371: POP
38372: POP
38373: GO 38257
38375: POP
38376: POP
// if not list then
38377: LD_VAR 0 13
38381: NOT
38382: IFFALSE 38386
// exit ;
38384: GO 38457
// for i in list do
38386: LD_ADDR_VAR 0 6
38390: PUSH
38391: LD_VAR 0 13
38395: PUSH
38396: FOR_IN
38397: IFFALSE 38455
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38399: LD_VAR 0 1
38403: PPUSH
38404: LD_STRING M
38406: PUSH
38407: LD_VAR 0 6
38411: PUSH
38412: LD_INT 1
38414: ARRAY
38415: PUSH
38416: LD_VAR 0 6
38420: PUSH
38421: LD_INT 2
38423: ARRAY
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: PUSH
38446: EMPTY
38447: LIST
38448: PPUSH
38449: CALL_OW 447
38453: GO 38396
38455: POP
38456: POP
// end ;
38457: LD_VAR 0 5
38461: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38462: LD_EXP 112
38466: NOT
38467: IFFALSE 38517
38469: GO 38471
38471: DISABLE
// begin initHack := true ;
38472: LD_ADDR_EXP 112
38476: PUSH
38477: LD_INT 1
38479: ST_TO_ADDR
// hackTanks := [ ] ;
38480: LD_ADDR_EXP 113
38484: PUSH
38485: EMPTY
38486: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38487: LD_ADDR_EXP 114
38491: PUSH
38492: EMPTY
38493: ST_TO_ADDR
// hackLimit := 3 ;
38494: LD_ADDR_EXP 115
38498: PUSH
38499: LD_INT 3
38501: ST_TO_ADDR
// hackDist := 12 ;
38502: LD_ADDR_EXP 116
38506: PUSH
38507: LD_INT 12
38509: ST_TO_ADDR
// hackCounter := [ ] ;
38510: LD_ADDR_EXP 117
38514: PUSH
38515: EMPTY
38516: ST_TO_ADDR
// end ;
38517: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38518: LD_EXP 112
38522: PUSH
38523: LD_INT 34
38525: PUSH
38526: LD_INT 99
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PPUSH
38533: CALL_OW 69
38537: AND
38538: IFFALSE 38791
38540: GO 38542
38542: DISABLE
38543: LD_INT 0
38545: PPUSH
38546: PPUSH
// begin enable ;
38547: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38548: LD_ADDR_VAR 0 1
38552: PUSH
38553: LD_INT 34
38555: PUSH
38556: LD_INT 99
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PPUSH
38563: CALL_OW 69
38567: PUSH
38568: FOR_IN
38569: IFFALSE 38789
// begin if not i in hackTanks then
38571: LD_VAR 0 1
38575: PUSH
38576: LD_EXP 113
38580: IN
38581: NOT
38582: IFFALSE 38665
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38584: LD_ADDR_EXP 113
38588: PUSH
38589: LD_EXP 113
38593: PPUSH
38594: LD_EXP 113
38598: PUSH
38599: LD_INT 1
38601: PLUS
38602: PPUSH
38603: LD_VAR 0 1
38607: PPUSH
38608: CALL_OW 1
38612: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38613: LD_ADDR_EXP 114
38617: PUSH
38618: LD_EXP 114
38622: PPUSH
38623: LD_EXP 114
38627: PUSH
38628: LD_INT 1
38630: PLUS
38631: PPUSH
38632: EMPTY
38633: PPUSH
38634: CALL_OW 1
38638: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38639: LD_ADDR_EXP 117
38643: PUSH
38644: LD_EXP 117
38648: PPUSH
38649: LD_EXP 117
38653: PUSH
38654: LD_INT 1
38656: PLUS
38657: PPUSH
38658: EMPTY
38659: PPUSH
38660: CALL_OW 1
38664: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38665: LD_VAR 0 1
38669: PPUSH
38670: CALL_OW 302
38674: NOT
38675: IFFALSE 38688
// begin HackUnlinkAll ( i ) ;
38677: LD_VAR 0 1
38681: PPUSH
38682: CALL 38794 0 1
// continue ;
38686: GO 38568
// end ; HackCheckCapturedStatus ( i ) ;
38688: LD_VAR 0 1
38692: PPUSH
38693: CALL 39237 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38697: LD_ADDR_VAR 0 2
38701: PUSH
38702: LD_INT 81
38704: PUSH
38705: LD_VAR 0 1
38709: PPUSH
38710: CALL_OW 255
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 33
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 91
38731: PUSH
38732: LD_VAR 0 1
38736: PUSH
38737: LD_EXP 116
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 50
38749: PUSH
38750: EMPTY
38751: LIST
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: PPUSH
38759: CALL_OW 69
38763: ST_TO_ADDR
// if not tmp then
38764: LD_VAR 0 2
38768: NOT
38769: IFFALSE 38773
// continue ;
38771: GO 38568
// HackLink ( i , tmp ) ;
38773: LD_VAR 0 1
38777: PPUSH
38778: LD_VAR 0 2
38782: PPUSH
38783: CALL 38930 0 2
// end ;
38787: GO 38568
38789: POP
38790: POP
// end ;
38791: PPOPN 2
38793: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38794: LD_INT 0
38796: PPUSH
38797: PPUSH
38798: PPUSH
// if not hack in hackTanks then
38799: LD_VAR 0 1
38803: PUSH
38804: LD_EXP 113
38808: IN
38809: NOT
38810: IFFALSE 38814
// exit ;
38812: GO 38925
// index := GetElementIndex ( hackTanks , hack ) ;
38814: LD_ADDR_VAR 0 4
38818: PUSH
38819: LD_EXP 113
38823: PPUSH
38824: LD_VAR 0 1
38828: PPUSH
38829: CALL 46367 0 2
38833: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38834: LD_EXP 114
38838: PUSH
38839: LD_VAR 0 4
38843: ARRAY
38844: IFFALSE 38925
// begin for i in hackTanksCaptured [ index ] do
38846: LD_ADDR_VAR 0 3
38850: PUSH
38851: LD_EXP 114
38855: PUSH
38856: LD_VAR 0 4
38860: ARRAY
38861: PUSH
38862: FOR_IN
38863: IFFALSE 38889
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38865: LD_VAR 0 3
38869: PUSH
38870: LD_INT 1
38872: ARRAY
38873: PPUSH
38874: LD_VAR 0 3
38878: PUSH
38879: LD_INT 2
38881: ARRAY
38882: PPUSH
38883: CALL_OW 235
38887: GO 38862
38889: POP
38890: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38891: LD_ADDR_EXP 114
38895: PUSH
38896: LD_EXP 114
38900: PPUSH
38901: LD_VAR 0 4
38905: PPUSH
38906: EMPTY
38907: PPUSH
38908: CALL_OW 1
38912: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38913: LD_VAR 0 1
38917: PPUSH
38918: LD_INT 0
38920: PPUSH
38921: CALL_OW 505
// end ; end ;
38925: LD_VAR 0 2
38929: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38930: LD_INT 0
38932: PPUSH
38933: PPUSH
38934: PPUSH
// if not hack in hackTanks or not vehicles then
38935: LD_VAR 0 1
38939: PUSH
38940: LD_EXP 113
38944: IN
38945: NOT
38946: PUSH
38947: LD_VAR 0 2
38951: NOT
38952: OR
38953: IFFALSE 38957
// exit ;
38955: GO 39232
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38957: LD_ADDR_VAR 0 2
38961: PUSH
38962: LD_VAR 0 1
38966: PPUSH
38967: LD_VAR 0 2
38971: PPUSH
38972: LD_INT 1
38974: PPUSH
38975: LD_INT 1
38977: PPUSH
38978: CALL 47017 0 4
38982: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38983: LD_ADDR_VAR 0 5
38987: PUSH
38988: LD_EXP 113
38992: PPUSH
38993: LD_VAR 0 1
38997: PPUSH
38998: CALL 46367 0 2
39002: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39003: LD_EXP 114
39007: PUSH
39008: LD_VAR 0 5
39012: ARRAY
39013: PUSH
39014: LD_EXP 115
39018: LESS
39019: IFFALSE 39208
// begin for i := 1 to vehicles do
39021: LD_ADDR_VAR 0 4
39025: PUSH
39026: DOUBLE
39027: LD_INT 1
39029: DEC
39030: ST_TO_ADDR
39031: LD_VAR 0 2
39035: PUSH
39036: FOR_TO
39037: IFFALSE 39206
// begin if hackTanksCaptured [ index ] = hackLimit then
39039: LD_EXP 114
39043: PUSH
39044: LD_VAR 0 5
39048: ARRAY
39049: PUSH
39050: LD_EXP 115
39054: EQUAL
39055: IFFALSE 39059
// break ;
39057: GO 39206
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39059: LD_ADDR_EXP 117
39063: PUSH
39064: LD_EXP 117
39068: PPUSH
39069: LD_VAR 0 5
39073: PPUSH
39074: LD_EXP 117
39078: PUSH
39079: LD_VAR 0 5
39083: ARRAY
39084: PUSH
39085: LD_INT 1
39087: PLUS
39088: PPUSH
39089: CALL_OW 1
39093: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39094: LD_ADDR_EXP 114
39098: PUSH
39099: LD_EXP 114
39103: PPUSH
39104: LD_VAR 0 5
39108: PUSH
39109: LD_EXP 114
39113: PUSH
39114: LD_VAR 0 5
39118: ARRAY
39119: PUSH
39120: LD_INT 1
39122: PLUS
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PPUSH
39128: LD_VAR 0 2
39132: PUSH
39133: LD_VAR 0 4
39137: ARRAY
39138: PUSH
39139: LD_VAR 0 2
39143: PUSH
39144: LD_VAR 0 4
39148: ARRAY
39149: PPUSH
39150: CALL_OW 255
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PPUSH
39159: CALL 46582 0 3
39163: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39164: LD_VAR 0 2
39168: PUSH
39169: LD_VAR 0 4
39173: ARRAY
39174: PPUSH
39175: LD_VAR 0 1
39179: PPUSH
39180: CALL_OW 255
39184: PPUSH
39185: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39189: LD_VAR 0 2
39193: PUSH
39194: LD_VAR 0 4
39198: ARRAY
39199: PPUSH
39200: CALL_OW 141
// end ;
39204: GO 39036
39206: POP
39207: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39208: LD_VAR 0 1
39212: PPUSH
39213: LD_EXP 114
39217: PUSH
39218: LD_VAR 0 5
39222: ARRAY
39223: PUSH
39224: LD_INT 0
39226: PLUS
39227: PPUSH
39228: CALL_OW 505
// end ;
39232: LD_VAR 0 3
39236: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39237: LD_INT 0
39239: PPUSH
39240: PPUSH
39241: PPUSH
39242: PPUSH
// if not hack in hackTanks then
39243: LD_VAR 0 1
39247: PUSH
39248: LD_EXP 113
39252: IN
39253: NOT
39254: IFFALSE 39258
// exit ;
39256: GO 39498
// index := GetElementIndex ( hackTanks , hack ) ;
39258: LD_ADDR_VAR 0 4
39262: PUSH
39263: LD_EXP 113
39267: PPUSH
39268: LD_VAR 0 1
39272: PPUSH
39273: CALL 46367 0 2
39277: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39278: LD_ADDR_VAR 0 3
39282: PUSH
39283: DOUBLE
39284: LD_EXP 114
39288: PUSH
39289: LD_VAR 0 4
39293: ARRAY
39294: INC
39295: ST_TO_ADDR
39296: LD_INT 1
39298: PUSH
39299: FOR_DOWNTO
39300: IFFALSE 39472
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39302: LD_ADDR_VAR 0 5
39306: PUSH
39307: LD_EXP 114
39311: PUSH
39312: LD_VAR 0 4
39316: ARRAY
39317: PUSH
39318: LD_VAR 0 3
39322: ARRAY
39323: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39324: LD_VAR 0 5
39328: PUSH
39329: LD_INT 1
39331: ARRAY
39332: PPUSH
39333: CALL_OW 302
39337: NOT
39338: PUSH
39339: LD_VAR 0 5
39343: PUSH
39344: LD_INT 1
39346: ARRAY
39347: PPUSH
39348: CALL_OW 255
39352: PUSH
39353: LD_VAR 0 1
39357: PPUSH
39358: CALL_OW 255
39362: NONEQUAL
39363: OR
39364: IFFALSE 39470
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39366: LD_VAR 0 5
39370: PUSH
39371: LD_INT 1
39373: ARRAY
39374: PPUSH
39375: CALL_OW 305
39379: PUSH
39380: LD_VAR 0 5
39384: PUSH
39385: LD_INT 1
39387: ARRAY
39388: PPUSH
39389: CALL_OW 255
39393: PUSH
39394: LD_VAR 0 1
39398: PPUSH
39399: CALL_OW 255
39403: EQUAL
39404: AND
39405: IFFALSE 39429
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39407: LD_VAR 0 5
39411: PUSH
39412: LD_INT 1
39414: ARRAY
39415: PPUSH
39416: LD_VAR 0 5
39420: PUSH
39421: LD_INT 2
39423: ARRAY
39424: PPUSH
39425: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39429: LD_ADDR_EXP 114
39433: PUSH
39434: LD_EXP 114
39438: PPUSH
39439: LD_VAR 0 4
39443: PPUSH
39444: LD_EXP 114
39448: PUSH
39449: LD_VAR 0 4
39453: ARRAY
39454: PPUSH
39455: LD_VAR 0 3
39459: PPUSH
39460: CALL_OW 3
39464: PPUSH
39465: CALL_OW 1
39469: ST_TO_ADDR
// end ; end ;
39470: GO 39299
39472: POP
39473: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39474: LD_VAR 0 1
39478: PPUSH
39479: LD_EXP 114
39483: PUSH
39484: LD_VAR 0 4
39488: ARRAY
39489: PUSH
39490: LD_INT 0
39492: PLUS
39493: PPUSH
39494: CALL_OW 505
// end ;
39498: LD_VAR 0 2
39502: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39503: LD_INT 0
39505: PPUSH
39506: PPUSH
39507: PPUSH
39508: PPUSH
// if not hack in hackTanks then
39509: LD_VAR 0 1
39513: PUSH
39514: LD_EXP 113
39518: IN
39519: NOT
39520: IFFALSE 39524
// exit ;
39522: GO 39609
// index := GetElementIndex ( hackTanks , hack ) ;
39524: LD_ADDR_VAR 0 5
39528: PUSH
39529: LD_EXP 113
39533: PPUSH
39534: LD_VAR 0 1
39538: PPUSH
39539: CALL 46367 0 2
39543: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39544: LD_ADDR_VAR 0 4
39548: PUSH
39549: DOUBLE
39550: LD_INT 1
39552: DEC
39553: ST_TO_ADDR
39554: LD_EXP 114
39558: PUSH
39559: LD_VAR 0 5
39563: ARRAY
39564: PUSH
39565: FOR_TO
39566: IFFALSE 39607
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39568: LD_EXP 114
39572: PUSH
39573: LD_VAR 0 5
39577: ARRAY
39578: PUSH
39579: LD_VAR 0 4
39583: ARRAY
39584: PUSH
39585: LD_INT 1
39587: ARRAY
39588: PUSH
39589: LD_VAR 0 2
39593: EQUAL
39594: IFFALSE 39605
// KillUnit ( vehicle ) ;
39596: LD_VAR 0 2
39600: PPUSH
39601: CALL_OW 66
39605: GO 39565
39607: POP
39608: POP
// end ;
39609: LD_VAR 0 3
39613: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39614: LD_EXP 118
39618: NOT
39619: IFFALSE 39654
39621: GO 39623
39623: DISABLE
// begin initMiner := true ;
39624: LD_ADDR_EXP 118
39628: PUSH
39629: LD_INT 1
39631: ST_TO_ADDR
// minersList := [ ] ;
39632: LD_ADDR_EXP 119
39636: PUSH
39637: EMPTY
39638: ST_TO_ADDR
// minerMinesList := [ ] ;
39639: LD_ADDR_EXP 120
39643: PUSH
39644: EMPTY
39645: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39646: LD_ADDR_EXP 121
39650: PUSH
39651: LD_INT 5
39653: ST_TO_ADDR
// end ;
39654: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39655: LD_EXP 118
39659: PUSH
39660: LD_INT 34
39662: PUSH
39663: LD_INT 81
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PPUSH
39670: CALL_OW 69
39674: AND
39675: IFFALSE 40136
39677: GO 39679
39679: DISABLE
39680: LD_INT 0
39682: PPUSH
39683: PPUSH
39684: PPUSH
39685: PPUSH
// begin enable ;
39686: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39687: LD_ADDR_VAR 0 1
39691: PUSH
39692: LD_INT 34
39694: PUSH
39695: LD_INT 81
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PPUSH
39702: CALL_OW 69
39706: PUSH
39707: FOR_IN
39708: IFFALSE 39780
// begin if not i in minersList then
39710: LD_VAR 0 1
39714: PUSH
39715: LD_EXP 119
39719: IN
39720: NOT
39721: IFFALSE 39778
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39723: LD_ADDR_EXP 119
39727: PUSH
39728: LD_EXP 119
39732: PPUSH
39733: LD_EXP 119
39737: PUSH
39738: LD_INT 1
39740: PLUS
39741: PPUSH
39742: LD_VAR 0 1
39746: PPUSH
39747: CALL_OW 1
39751: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39752: LD_ADDR_EXP 120
39756: PUSH
39757: LD_EXP 120
39761: PPUSH
39762: LD_EXP 120
39766: PUSH
39767: LD_INT 1
39769: PLUS
39770: PPUSH
39771: EMPTY
39772: PPUSH
39773: CALL_OW 1
39777: ST_TO_ADDR
// end end ;
39778: GO 39707
39780: POP
39781: POP
// for i := minerMinesList downto 1 do
39782: LD_ADDR_VAR 0 1
39786: PUSH
39787: DOUBLE
39788: LD_EXP 120
39792: INC
39793: ST_TO_ADDR
39794: LD_INT 1
39796: PUSH
39797: FOR_DOWNTO
39798: IFFALSE 40134
// begin if IsLive ( minersList [ i ] ) then
39800: LD_EXP 119
39804: PUSH
39805: LD_VAR 0 1
39809: ARRAY
39810: PPUSH
39811: CALL_OW 300
39815: IFFALSE 39843
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39817: LD_EXP 119
39821: PUSH
39822: LD_VAR 0 1
39826: ARRAY
39827: PPUSH
39828: LD_EXP 120
39832: PUSH
39833: LD_VAR 0 1
39837: ARRAY
39838: PPUSH
39839: CALL_OW 505
// if not minerMinesList [ i ] then
39843: LD_EXP 120
39847: PUSH
39848: LD_VAR 0 1
39852: ARRAY
39853: NOT
39854: IFFALSE 39858
// continue ;
39856: GO 39797
// for j := minerMinesList [ i ] downto 1 do
39858: LD_ADDR_VAR 0 2
39862: PUSH
39863: DOUBLE
39864: LD_EXP 120
39868: PUSH
39869: LD_VAR 0 1
39873: ARRAY
39874: INC
39875: ST_TO_ADDR
39876: LD_INT 1
39878: PUSH
39879: FOR_DOWNTO
39880: IFFALSE 40130
// begin side := GetSide ( minersList [ i ] ) ;
39882: LD_ADDR_VAR 0 3
39886: PUSH
39887: LD_EXP 119
39891: PUSH
39892: LD_VAR 0 1
39896: ARRAY
39897: PPUSH
39898: CALL_OW 255
39902: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39903: LD_ADDR_VAR 0 4
39907: PUSH
39908: LD_EXP 120
39912: PUSH
39913: LD_VAR 0 1
39917: ARRAY
39918: PUSH
39919: LD_VAR 0 2
39923: ARRAY
39924: PUSH
39925: LD_INT 1
39927: ARRAY
39928: PPUSH
39929: LD_EXP 120
39933: PUSH
39934: LD_VAR 0 1
39938: ARRAY
39939: PUSH
39940: LD_VAR 0 2
39944: ARRAY
39945: PUSH
39946: LD_INT 2
39948: ARRAY
39949: PPUSH
39950: CALL_OW 428
39954: ST_TO_ADDR
// if not tmp then
39955: LD_VAR 0 4
39959: NOT
39960: IFFALSE 39964
// continue ;
39962: GO 39879
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39964: LD_VAR 0 4
39968: PUSH
39969: LD_INT 81
39971: PUSH
39972: LD_VAR 0 3
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PPUSH
39981: CALL_OW 69
39985: IN
39986: PUSH
39987: LD_EXP 120
39991: PUSH
39992: LD_VAR 0 1
39996: ARRAY
39997: PUSH
39998: LD_VAR 0 2
40002: ARRAY
40003: PUSH
40004: LD_INT 1
40006: ARRAY
40007: PPUSH
40008: LD_EXP 120
40012: PUSH
40013: LD_VAR 0 1
40017: ARRAY
40018: PUSH
40019: LD_VAR 0 2
40023: ARRAY
40024: PUSH
40025: LD_INT 2
40027: ARRAY
40028: PPUSH
40029: CALL_OW 458
40033: AND
40034: IFFALSE 40128
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40036: LD_EXP 120
40040: PUSH
40041: LD_VAR 0 1
40045: ARRAY
40046: PUSH
40047: LD_VAR 0 2
40051: ARRAY
40052: PUSH
40053: LD_INT 1
40055: ARRAY
40056: PPUSH
40057: LD_EXP 120
40061: PUSH
40062: LD_VAR 0 1
40066: ARRAY
40067: PUSH
40068: LD_VAR 0 2
40072: ARRAY
40073: PUSH
40074: LD_INT 2
40076: ARRAY
40077: PPUSH
40078: LD_VAR 0 3
40082: PPUSH
40083: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40087: LD_ADDR_EXP 120
40091: PUSH
40092: LD_EXP 120
40096: PPUSH
40097: LD_VAR 0 1
40101: PPUSH
40102: LD_EXP 120
40106: PUSH
40107: LD_VAR 0 1
40111: ARRAY
40112: PPUSH
40113: LD_VAR 0 2
40117: PPUSH
40118: CALL_OW 3
40122: PPUSH
40123: CALL_OW 1
40127: ST_TO_ADDR
// end ; end ;
40128: GO 39879
40130: POP
40131: POP
// end ;
40132: GO 39797
40134: POP
40135: POP
// end ;
40136: PPOPN 4
40138: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40139: LD_INT 0
40141: PPUSH
40142: PPUSH
// result := false ;
40143: LD_ADDR_VAR 0 4
40147: PUSH
40148: LD_INT 0
40150: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40151: LD_VAR 0 1
40155: PPUSH
40156: CALL_OW 264
40160: PUSH
40161: LD_INT 81
40163: EQUAL
40164: NOT
40165: IFFALSE 40169
// exit ;
40167: GO 40409
// index := GetElementIndex ( minersList , unit ) ;
40169: LD_ADDR_VAR 0 5
40173: PUSH
40174: LD_EXP 119
40178: PPUSH
40179: LD_VAR 0 1
40183: PPUSH
40184: CALL 46367 0 2
40188: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40189: LD_EXP 120
40193: PUSH
40194: LD_VAR 0 5
40198: ARRAY
40199: PUSH
40200: LD_EXP 121
40204: GREATEREQUAL
40205: IFFALSE 40209
// exit ;
40207: GO 40409
// ComMoveXY ( unit , x , y ) ;
40209: LD_VAR 0 1
40213: PPUSH
40214: LD_VAR 0 2
40218: PPUSH
40219: LD_VAR 0 3
40223: PPUSH
40224: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40228: LD_INT 35
40230: PPUSH
40231: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40235: LD_VAR 0 1
40239: PPUSH
40240: LD_VAR 0 2
40244: PPUSH
40245: LD_VAR 0 3
40249: PPUSH
40250: CALL 77722 0 3
40254: NOT
40255: PUSH
40256: LD_VAR 0 1
40260: PPUSH
40261: CALL_OW 314
40265: AND
40266: IFFALSE 40270
// exit ;
40268: GO 40409
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40270: LD_VAR 0 2
40274: PPUSH
40275: LD_VAR 0 3
40279: PPUSH
40280: CALL_OW 428
40284: PUSH
40285: LD_VAR 0 1
40289: EQUAL
40290: PUSH
40291: LD_VAR 0 1
40295: PPUSH
40296: CALL_OW 314
40300: NOT
40301: AND
40302: IFFALSE 40228
// PlaySoundXY ( x , y , PlantMine ) ;
40304: LD_VAR 0 2
40308: PPUSH
40309: LD_VAR 0 3
40313: PPUSH
40314: LD_STRING PlantMine
40316: PPUSH
40317: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40321: LD_VAR 0 2
40325: PPUSH
40326: LD_VAR 0 3
40330: PPUSH
40331: LD_VAR 0 1
40335: PPUSH
40336: CALL_OW 255
40340: PPUSH
40341: LD_INT 0
40343: PPUSH
40344: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40348: LD_ADDR_EXP 120
40352: PUSH
40353: LD_EXP 120
40357: PPUSH
40358: LD_VAR 0 5
40362: PUSH
40363: LD_EXP 120
40367: PUSH
40368: LD_VAR 0 5
40372: ARRAY
40373: PUSH
40374: LD_INT 1
40376: PLUS
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PPUSH
40382: LD_VAR 0 2
40386: PUSH
40387: LD_VAR 0 3
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PPUSH
40396: CALL 46582 0 3
40400: ST_TO_ADDR
// result := true ;
40401: LD_ADDR_VAR 0 4
40405: PUSH
40406: LD_INT 1
40408: ST_TO_ADDR
// end ;
40409: LD_VAR 0 4
40413: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40414: LD_INT 0
40416: PPUSH
40417: PPUSH
40418: PPUSH
// if not unit in minersList then
40419: LD_VAR 0 1
40423: PUSH
40424: LD_EXP 119
40428: IN
40429: NOT
40430: IFFALSE 40434
// exit ;
40432: GO 40826
// index := GetElementIndex ( minersList , unit ) ;
40434: LD_ADDR_VAR 0 6
40438: PUSH
40439: LD_EXP 119
40443: PPUSH
40444: LD_VAR 0 1
40448: PPUSH
40449: CALL 46367 0 2
40453: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40454: LD_ADDR_VAR 0 5
40458: PUSH
40459: DOUBLE
40460: LD_EXP 120
40464: PUSH
40465: LD_VAR 0 6
40469: ARRAY
40470: INC
40471: ST_TO_ADDR
40472: LD_INT 1
40474: PUSH
40475: FOR_DOWNTO
40476: IFFALSE 40637
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40478: LD_EXP 120
40482: PUSH
40483: LD_VAR 0 6
40487: ARRAY
40488: PUSH
40489: LD_VAR 0 5
40493: ARRAY
40494: PUSH
40495: LD_INT 1
40497: ARRAY
40498: PUSH
40499: LD_VAR 0 2
40503: EQUAL
40504: PUSH
40505: LD_EXP 120
40509: PUSH
40510: LD_VAR 0 6
40514: ARRAY
40515: PUSH
40516: LD_VAR 0 5
40520: ARRAY
40521: PUSH
40522: LD_INT 2
40524: ARRAY
40525: PUSH
40526: LD_VAR 0 3
40530: EQUAL
40531: AND
40532: IFFALSE 40635
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40534: LD_EXP 120
40538: PUSH
40539: LD_VAR 0 6
40543: ARRAY
40544: PUSH
40545: LD_VAR 0 5
40549: ARRAY
40550: PUSH
40551: LD_INT 1
40553: ARRAY
40554: PPUSH
40555: LD_EXP 120
40559: PUSH
40560: LD_VAR 0 6
40564: ARRAY
40565: PUSH
40566: LD_VAR 0 5
40570: ARRAY
40571: PUSH
40572: LD_INT 2
40574: ARRAY
40575: PPUSH
40576: LD_VAR 0 1
40580: PPUSH
40581: CALL_OW 255
40585: PPUSH
40586: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40590: LD_ADDR_EXP 120
40594: PUSH
40595: LD_EXP 120
40599: PPUSH
40600: LD_VAR 0 6
40604: PPUSH
40605: LD_EXP 120
40609: PUSH
40610: LD_VAR 0 6
40614: ARRAY
40615: PPUSH
40616: LD_VAR 0 5
40620: PPUSH
40621: CALL_OW 3
40625: PPUSH
40626: CALL_OW 1
40630: ST_TO_ADDR
// exit ;
40631: POP
40632: POP
40633: GO 40826
// end ; end ;
40635: GO 40475
40637: POP
40638: POP
// for i := minerMinesList [ index ] downto 1 do
40639: LD_ADDR_VAR 0 5
40643: PUSH
40644: DOUBLE
40645: LD_EXP 120
40649: PUSH
40650: LD_VAR 0 6
40654: ARRAY
40655: INC
40656: ST_TO_ADDR
40657: LD_INT 1
40659: PUSH
40660: FOR_DOWNTO
40661: IFFALSE 40824
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40663: LD_EXP 120
40667: PUSH
40668: LD_VAR 0 6
40672: ARRAY
40673: PUSH
40674: LD_VAR 0 5
40678: ARRAY
40679: PUSH
40680: LD_INT 1
40682: ARRAY
40683: PPUSH
40684: LD_EXP 120
40688: PUSH
40689: LD_VAR 0 6
40693: ARRAY
40694: PUSH
40695: LD_VAR 0 5
40699: ARRAY
40700: PUSH
40701: LD_INT 2
40703: ARRAY
40704: PPUSH
40705: LD_VAR 0 2
40709: PPUSH
40710: LD_VAR 0 3
40714: PPUSH
40715: CALL_OW 298
40719: PUSH
40720: LD_INT 6
40722: LESS
40723: IFFALSE 40822
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40725: LD_EXP 120
40729: PUSH
40730: LD_VAR 0 6
40734: ARRAY
40735: PUSH
40736: LD_VAR 0 5
40740: ARRAY
40741: PUSH
40742: LD_INT 1
40744: ARRAY
40745: PPUSH
40746: LD_EXP 120
40750: PUSH
40751: LD_VAR 0 6
40755: ARRAY
40756: PUSH
40757: LD_VAR 0 5
40761: ARRAY
40762: PUSH
40763: LD_INT 2
40765: ARRAY
40766: PPUSH
40767: LD_VAR 0 1
40771: PPUSH
40772: CALL_OW 255
40776: PPUSH
40777: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40781: LD_ADDR_EXP 120
40785: PUSH
40786: LD_EXP 120
40790: PPUSH
40791: LD_VAR 0 6
40795: PPUSH
40796: LD_EXP 120
40800: PUSH
40801: LD_VAR 0 6
40805: ARRAY
40806: PPUSH
40807: LD_VAR 0 5
40811: PPUSH
40812: CALL_OW 3
40816: PPUSH
40817: CALL_OW 1
40821: ST_TO_ADDR
// end ; end ;
40822: GO 40660
40824: POP
40825: POP
// end ;
40826: LD_VAR 0 4
40830: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40831: LD_INT 0
40833: PPUSH
40834: PPUSH
40835: PPUSH
40836: PPUSH
40837: PPUSH
40838: PPUSH
40839: PPUSH
40840: PPUSH
40841: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40842: LD_VAR 0 1
40846: PPUSH
40847: CALL_OW 264
40851: PUSH
40852: LD_INT 81
40854: EQUAL
40855: NOT
40856: PUSH
40857: LD_VAR 0 1
40861: PUSH
40862: LD_EXP 119
40866: IN
40867: NOT
40868: OR
40869: IFFALSE 40873
// exit ;
40871: GO 41195
// index := GetElementIndex ( minersList , unit ) ;
40873: LD_ADDR_VAR 0 6
40877: PUSH
40878: LD_EXP 119
40882: PPUSH
40883: LD_VAR 0 1
40887: PPUSH
40888: CALL 46367 0 2
40892: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40893: LD_ADDR_VAR 0 8
40897: PUSH
40898: LD_EXP 121
40902: PUSH
40903: LD_EXP 120
40907: PUSH
40908: LD_VAR 0 6
40912: ARRAY
40913: MINUS
40914: ST_TO_ADDR
// if not minesFreeAmount then
40915: LD_VAR 0 8
40919: NOT
40920: IFFALSE 40924
// exit ;
40922: GO 41195
// tmp := [ ] ;
40924: LD_ADDR_VAR 0 7
40928: PUSH
40929: EMPTY
40930: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40931: LD_ADDR_VAR 0 5
40935: PUSH
40936: DOUBLE
40937: LD_INT 1
40939: DEC
40940: ST_TO_ADDR
40941: LD_VAR 0 8
40945: PUSH
40946: FOR_TO
40947: IFFALSE 41142
// begin _d := rand ( 0 , 5 ) ;
40949: LD_ADDR_VAR 0 11
40953: PUSH
40954: LD_INT 0
40956: PPUSH
40957: LD_INT 5
40959: PPUSH
40960: CALL_OW 12
40964: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40965: LD_ADDR_VAR 0 12
40969: PUSH
40970: LD_INT 2
40972: PPUSH
40973: LD_INT 6
40975: PPUSH
40976: CALL_OW 12
40980: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40981: LD_ADDR_VAR 0 9
40985: PUSH
40986: LD_VAR 0 2
40990: PPUSH
40991: LD_VAR 0 11
40995: PPUSH
40996: LD_VAR 0 12
41000: PPUSH
41001: CALL_OW 272
41005: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41006: LD_ADDR_VAR 0 10
41010: PUSH
41011: LD_VAR 0 3
41015: PPUSH
41016: LD_VAR 0 11
41020: PPUSH
41021: LD_VAR 0 12
41025: PPUSH
41026: CALL_OW 273
41030: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41031: LD_VAR 0 9
41035: PPUSH
41036: LD_VAR 0 10
41040: PPUSH
41041: CALL_OW 488
41045: PUSH
41046: LD_VAR 0 9
41050: PUSH
41051: LD_VAR 0 10
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_VAR 0 7
41064: IN
41065: NOT
41066: AND
41067: PUSH
41068: LD_VAR 0 9
41072: PPUSH
41073: LD_VAR 0 10
41077: PPUSH
41078: CALL_OW 458
41082: NOT
41083: AND
41084: IFFALSE 41126
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41086: LD_ADDR_VAR 0 7
41090: PUSH
41091: LD_VAR 0 7
41095: PPUSH
41096: LD_VAR 0 7
41100: PUSH
41101: LD_INT 1
41103: PLUS
41104: PPUSH
41105: LD_VAR 0 9
41109: PUSH
41110: LD_VAR 0 10
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PPUSH
41119: CALL_OW 1
41123: ST_TO_ADDR
41124: GO 41140
// i := i - 1 ;
41126: LD_ADDR_VAR 0 5
41130: PUSH
41131: LD_VAR 0 5
41135: PUSH
41136: LD_INT 1
41138: MINUS
41139: ST_TO_ADDR
// end ;
41140: GO 40946
41142: POP
41143: POP
// for i in tmp do
41144: LD_ADDR_VAR 0 5
41148: PUSH
41149: LD_VAR 0 7
41153: PUSH
41154: FOR_IN
41155: IFFALSE 41193
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41157: LD_VAR 0 1
41161: PPUSH
41162: LD_VAR 0 5
41166: PUSH
41167: LD_INT 1
41169: ARRAY
41170: PPUSH
41171: LD_VAR 0 5
41175: PUSH
41176: LD_INT 2
41178: ARRAY
41179: PPUSH
41180: CALL 40139 0 3
41184: NOT
41185: IFFALSE 41191
// exit ;
41187: POP
41188: POP
41189: GO 41195
41191: GO 41154
41193: POP
41194: POP
// end ;
41195: LD_VAR 0 4
41199: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
41200: LD_INT 0
41202: PPUSH
41203: PPUSH
41204: PPUSH
41205: PPUSH
41206: PPUSH
41207: PPUSH
41208: PPUSH
// if not GetClass ( unit ) = class_sniper then
41209: LD_VAR 0 1
41213: PPUSH
41214: CALL_OW 257
41218: PUSH
41219: LD_INT 5
41221: EQUAL
41222: NOT
41223: IFFALSE 41227
// exit ;
41225: GO 41615
// dist := 8 ;
41227: LD_ADDR_VAR 0 5
41231: PUSH
41232: LD_INT 8
41234: ST_TO_ADDR
// viewRange := 12 ;
41235: LD_ADDR_VAR 0 7
41239: PUSH
41240: LD_INT 12
41242: ST_TO_ADDR
// side := GetSide ( unit ) ;
41243: LD_ADDR_VAR 0 6
41247: PUSH
41248: LD_VAR 0 1
41252: PPUSH
41253: CALL_OW 255
41257: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41258: LD_INT 61
41260: PPUSH
41261: LD_VAR 0 6
41265: PPUSH
41266: CALL_OW 321
41270: PUSH
41271: LD_INT 2
41273: EQUAL
41274: IFFALSE 41284
// viewRange := 16 ;
41276: LD_ADDR_VAR 0 7
41280: PUSH
41281: LD_INT 16
41283: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41284: LD_VAR 0 1
41288: PPUSH
41289: LD_VAR 0 2
41293: PPUSH
41294: LD_VAR 0 3
41298: PPUSH
41299: CALL_OW 297
41303: PUSH
41304: LD_VAR 0 5
41308: GREATER
41309: IFFALSE 41388
// begin ComMoveXY ( unit , x , y ) ;
41311: LD_VAR 0 1
41315: PPUSH
41316: LD_VAR 0 2
41320: PPUSH
41321: LD_VAR 0 3
41325: PPUSH
41326: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41330: LD_INT 35
41332: PPUSH
41333: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41337: LD_VAR 0 1
41341: PPUSH
41342: LD_VAR 0 2
41346: PPUSH
41347: LD_VAR 0 3
41351: PPUSH
41352: CALL 77722 0 3
41356: NOT
41357: IFFALSE 41361
// exit ;
41359: GO 41615
// until GetDistUnitXY ( unit , x , y ) < dist ;
41361: LD_VAR 0 1
41365: PPUSH
41366: LD_VAR 0 2
41370: PPUSH
41371: LD_VAR 0 3
41375: PPUSH
41376: CALL_OW 297
41380: PUSH
41381: LD_VAR 0 5
41385: LESS
41386: IFFALSE 41330
// end ; ComTurnXY ( unit , x , y ) ;
41388: LD_VAR 0 1
41392: PPUSH
41393: LD_VAR 0 2
41397: PPUSH
41398: LD_VAR 0 3
41402: PPUSH
41403: CALL_OW 118
// wait ( 5 ) ;
41407: LD_INT 5
41409: PPUSH
41410: CALL_OW 67
// _d := GetDir ( unit ) ;
41414: LD_ADDR_VAR 0 10
41418: PUSH
41419: LD_VAR 0 1
41423: PPUSH
41424: CALL_OW 254
41428: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41429: LD_ADDR_VAR 0 8
41433: PUSH
41434: LD_VAR 0 1
41438: PPUSH
41439: CALL_OW 250
41443: PPUSH
41444: LD_VAR 0 10
41448: PPUSH
41449: LD_VAR 0 5
41453: PPUSH
41454: CALL_OW 272
41458: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41459: LD_ADDR_VAR 0 9
41463: PUSH
41464: LD_VAR 0 1
41468: PPUSH
41469: CALL_OW 251
41473: PPUSH
41474: LD_VAR 0 10
41478: PPUSH
41479: LD_VAR 0 5
41483: PPUSH
41484: CALL_OW 273
41488: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41489: LD_VAR 0 8
41493: PPUSH
41494: LD_VAR 0 9
41498: PPUSH
41499: CALL_OW 488
41503: NOT
41504: IFFALSE 41508
// exit ;
41506: GO 41615
// ComAnimCustom ( unit , 1 ) ;
41508: LD_VAR 0 1
41512: PPUSH
41513: LD_INT 1
41515: PPUSH
41516: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41520: LD_VAR 0 8
41524: PPUSH
41525: LD_VAR 0 9
41529: PPUSH
41530: LD_VAR 0 6
41534: PPUSH
41535: LD_VAR 0 7
41539: PPUSH
41540: CALL_OW 330
// repeat wait ( 1 ) ;
41544: LD_INT 1
41546: PPUSH
41547: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41551: LD_VAR 0 1
41555: PPUSH
41556: CALL_OW 316
41560: PUSH
41561: LD_VAR 0 1
41565: PPUSH
41566: CALL_OW 314
41570: OR
41571: PUSH
41572: LD_VAR 0 1
41576: PPUSH
41577: CALL_OW 302
41581: NOT
41582: OR
41583: PUSH
41584: LD_VAR 0 1
41588: PPUSH
41589: CALL_OW 301
41593: OR
41594: IFFALSE 41544
// RemoveSeeing ( _x , _y , side ) ;
41596: LD_VAR 0 8
41600: PPUSH
41601: LD_VAR 0 9
41605: PPUSH
41606: LD_VAR 0 6
41610: PPUSH
41611: CALL_OW 331
// end ; end_of_file
41615: LD_VAR 0 4
41619: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41620: LD_INT 0
41622: PPUSH
41623: PPUSH
// if exist_mode then
41624: LD_VAR 0 2
41628: IFFALSE 41653
// unit := CreateCharacter ( prefix & ident ) else
41630: LD_ADDR_VAR 0 5
41634: PUSH
41635: LD_VAR 0 3
41639: PUSH
41640: LD_VAR 0 1
41644: STR
41645: PPUSH
41646: CALL_OW 34
41650: ST_TO_ADDR
41651: GO 41668
// unit := NewCharacter ( ident ) ;
41653: LD_ADDR_VAR 0 5
41657: PUSH
41658: LD_VAR 0 1
41662: PPUSH
41663: CALL_OW 25
41667: ST_TO_ADDR
// result := unit ;
41668: LD_ADDR_VAR 0 4
41672: PUSH
41673: LD_VAR 0 5
41677: ST_TO_ADDR
// end ;
41678: LD_VAR 0 4
41682: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41683: LD_INT 0
41685: PPUSH
41686: PPUSH
// if not side or not nation then
41687: LD_VAR 0 1
41691: NOT
41692: PUSH
41693: LD_VAR 0 2
41697: NOT
41698: OR
41699: IFFALSE 41703
// exit ;
41701: GO 42471
// case nation of nation_american :
41703: LD_VAR 0 2
41707: PUSH
41708: LD_INT 1
41710: DOUBLE
41711: EQUAL
41712: IFTRUE 41716
41714: GO 41930
41716: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41717: LD_ADDR_VAR 0 4
41721: PUSH
41722: LD_INT 35
41724: PUSH
41725: LD_INT 45
41727: PUSH
41728: LD_INT 46
41730: PUSH
41731: LD_INT 47
41733: PUSH
41734: LD_INT 82
41736: PUSH
41737: LD_INT 83
41739: PUSH
41740: LD_INT 84
41742: PUSH
41743: LD_INT 85
41745: PUSH
41746: LD_INT 86
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 2
41754: PUSH
41755: LD_INT 6
41757: PUSH
41758: LD_INT 15
41760: PUSH
41761: LD_INT 16
41763: PUSH
41764: LD_INT 7
41766: PUSH
41767: LD_INT 12
41769: PUSH
41770: LD_INT 13
41772: PUSH
41773: LD_INT 10
41775: PUSH
41776: LD_INT 14
41778: PUSH
41779: LD_INT 20
41781: PUSH
41782: LD_INT 21
41784: PUSH
41785: LD_INT 22
41787: PUSH
41788: LD_INT 25
41790: PUSH
41791: LD_INT 32
41793: PUSH
41794: LD_INT 27
41796: PUSH
41797: LD_INT 36
41799: PUSH
41800: LD_INT 69
41802: PUSH
41803: LD_INT 39
41805: PUSH
41806: LD_INT 34
41808: PUSH
41809: LD_INT 40
41811: PUSH
41812: LD_INT 48
41814: PUSH
41815: LD_INT 49
41817: PUSH
41818: LD_INT 50
41820: PUSH
41821: LD_INT 51
41823: PUSH
41824: LD_INT 52
41826: PUSH
41827: LD_INT 53
41829: PUSH
41830: LD_INT 54
41832: PUSH
41833: LD_INT 55
41835: PUSH
41836: LD_INT 56
41838: PUSH
41839: LD_INT 57
41841: PUSH
41842: LD_INT 58
41844: PUSH
41845: LD_INT 59
41847: PUSH
41848: LD_INT 60
41850: PUSH
41851: LD_INT 61
41853: PUSH
41854: LD_INT 62
41856: PUSH
41857: LD_INT 80
41859: PUSH
41860: LD_INT 82
41862: PUSH
41863: LD_INT 83
41865: PUSH
41866: LD_INT 84
41868: PUSH
41869: LD_INT 85
41871: PUSH
41872: LD_INT 86
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: ST_TO_ADDR
41928: GO 42395
41930: LD_INT 2
41932: DOUBLE
41933: EQUAL
41934: IFTRUE 41938
41936: GO 42164
41938: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41939: LD_ADDR_VAR 0 4
41943: PUSH
41944: LD_INT 35
41946: PUSH
41947: LD_INT 45
41949: PUSH
41950: LD_INT 46
41952: PUSH
41953: LD_INT 47
41955: PUSH
41956: LD_INT 82
41958: PUSH
41959: LD_INT 83
41961: PUSH
41962: LD_INT 84
41964: PUSH
41965: LD_INT 85
41967: PUSH
41968: LD_INT 87
41970: PUSH
41971: LD_INT 70
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: LD_INT 11
41979: PUSH
41980: LD_INT 3
41982: PUSH
41983: LD_INT 4
41985: PUSH
41986: LD_INT 5
41988: PUSH
41989: LD_INT 6
41991: PUSH
41992: LD_INT 15
41994: PUSH
41995: LD_INT 18
41997: PUSH
41998: LD_INT 7
42000: PUSH
42001: LD_INT 17
42003: PUSH
42004: LD_INT 8
42006: PUSH
42007: LD_INT 20
42009: PUSH
42010: LD_INT 21
42012: PUSH
42013: LD_INT 22
42015: PUSH
42016: LD_INT 72
42018: PUSH
42019: LD_INT 26
42021: PUSH
42022: LD_INT 69
42024: PUSH
42025: LD_INT 39
42027: PUSH
42028: LD_INT 40
42030: PUSH
42031: LD_INT 41
42033: PUSH
42034: LD_INT 42
42036: PUSH
42037: LD_INT 43
42039: PUSH
42040: LD_INT 48
42042: PUSH
42043: LD_INT 49
42045: PUSH
42046: LD_INT 50
42048: PUSH
42049: LD_INT 51
42051: PUSH
42052: LD_INT 52
42054: PUSH
42055: LD_INT 53
42057: PUSH
42058: LD_INT 54
42060: PUSH
42061: LD_INT 55
42063: PUSH
42064: LD_INT 56
42066: PUSH
42067: LD_INT 60
42069: PUSH
42070: LD_INT 61
42072: PUSH
42073: LD_INT 62
42075: PUSH
42076: LD_INT 66
42078: PUSH
42079: LD_INT 67
42081: PUSH
42082: LD_INT 68
42084: PUSH
42085: LD_INT 81
42087: PUSH
42088: LD_INT 82
42090: PUSH
42091: LD_INT 83
42093: PUSH
42094: LD_INT 84
42096: PUSH
42097: LD_INT 85
42099: PUSH
42100: LD_INT 87
42102: PUSH
42103: LD_INT 88
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: ST_TO_ADDR
42162: GO 42395
42164: LD_INT 3
42166: DOUBLE
42167: EQUAL
42168: IFTRUE 42172
42170: GO 42394
42172: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42173: LD_ADDR_VAR 0 4
42177: PUSH
42178: LD_INT 46
42180: PUSH
42181: LD_INT 47
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: LD_INT 82
42192: PUSH
42193: LD_INT 83
42195: PUSH
42196: LD_INT 84
42198: PUSH
42199: LD_INT 85
42201: PUSH
42202: LD_INT 86
42204: PUSH
42205: LD_INT 11
42207: PUSH
42208: LD_INT 9
42210: PUSH
42211: LD_INT 20
42213: PUSH
42214: LD_INT 19
42216: PUSH
42217: LD_INT 21
42219: PUSH
42220: LD_INT 24
42222: PUSH
42223: LD_INT 22
42225: PUSH
42226: LD_INT 25
42228: PUSH
42229: LD_INT 28
42231: PUSH
42232: LD_INT 29
42234: PUSH
42235: LD_INT 30
42237: PUSH
42238: LD_INT 31
42240: PUSH
42241: LD_INT 37
42243: PUSH
42244: LD_INT 38
42246: PUSH
42247: LD_INT 32
42249: PUSH
42250: LD_INT 27
42252: PUSH
42253: LD_INT 33
42255: PUSH
42256: LD_INT 69
42258: PUSH
42259: LD_INT 39
42261: PUSH
42262: LD_INT 34
42264: PUSH
42265: LD_INT 40
42267: PUSH
42268: LD_INT 71
42270: PUSH
42271: LD_INT 23
42273: PUSH
42274: LD_INT 44
42276: PUSH
42277: LD_INT 48
42279: PUSH
42280: LD_INT 49
42282: PUSH
42283: LD_INT 50
42285: PUSH
42286: LD_INT 51
42288: PUSH
42289: LD_INT 52
42291: PUSH
42292: LD_INT 53
42294: PUSH
42295: LD_INT 54
42297: PUSH
42298: LD_INT 55
42300: PUSH
42301: LD_INT 56
42303: PUSH
42304: LD_INT 57
42306: PUSH
42307: LD_INT 58
42309: PUSH
42310: LD_INT 59
42312: PUSH
42313: LD_INT 63
42315: PUSH
42316: LD_INT 64
42318: PUSH
42319: LD_INT 65
42321: PUSH
42322: LD_INT 82
42324: PUSH
42325: LD_INT 83
42327: PUSH
42328: LD_INT 84
42330: PUSH
42331: LD_INT 85
42333: PUSH
42334: LD_INT 86
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: ST_TO_ADDR
42392: GO 42395
42394: POP
// if state > - 1 and state < 3 then
42395: LD_VAR 0 3
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: GREATER
42404: PUSH
42405: LD_VAR 0 3
42409: PUSH
42410: LD_INT 3
42412: LESS
42413: AND
42414: IFFALSE 42471
// for i in result do
42416: LD_ADDR_VAR 0 5
42420: PUSH
42421: LD_VAR 0 4
42425: PUSH
42426: FOR_IN
42427: IFFALSE 42469
// if GetTech ( i , side ) <> state then
42429: LD_VAR 0 5
42433: PPUSH
42434: LD_VAR 0 1
42438: PPUSH
42439: CALL_OW 321
42443: PUSH
42444: LD_VAR 0 3
42448: NONEQUAL
42449: IFFALSE 42467
// result := result diff i ;
42451: LD_ADDR_VAR 0 4
42455: PUSH
42456: LD_VAR 0 4
42460: PUSH
42461: LD_VAR 0 5
42465: DIFF
42466: ST_TO_ADDR
42467: GO 42426
42469: POP
42470: POP
// end ;
42471: LD_VAR 0 4
42475: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42476: LD_INT 0
42478: PPUSH
42479: PPUSH
42480: PPUSH
// result := true ;
42481: LD_ADDR_VAR 0 3
42485: PUSH
42486: LD_INT 1
42488: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42489: LD_ADDR_VAR 0 5
42493: PUSH
42494: LD_VAR 0 2
42498: PPUSH
42499: CALL_OW 480
42503: ST_TO_ADDR
// if not tmp then
42504: LD_VAR 0 5
42508: NOT
42509: IFFALSE 42513
// exit ;
42511: GO 42562
// for i in tmp do
42513: LD_ADDR_VAR 0 4
42517: PUSH
42518: LD_VAR 0 5
42522: PUSH
42523: FOR_IN
42524: IFFALSE 42560
// if GetTech ( i , side ) <> state_researched then
42526: LD_VAR 0 4
42530: PPUSH
42531: LD_VAR 0 1
42535: PPUSH
42536: CALL_OW 321
42540: PUSH
42541: LD_INT 2
42543: NONEQUAL
42544: IFFALSE 42558
// begin result := false ;
42546: LD_ADDR_VAR 0 3
42550: PUSH
42551: LD_INT 0
42553: ST_TO_ADDR
// exit ;
42554: POP
42555: POP
42556: GO 42562
// end ;
42558: GO 42523
42560: POP
42561: POP
// end ;
42562: LD_VAR 0 3
42566: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42567: LD_INT 0
42569: PPUSH
42570: PPUSH
42571: PPUSH
42572: PPUSH
42573: PPUSH
42574: PPUSH
42575: PPUSH
42576: PPUSH
42577: PPUSH
42578: PPUSH
42579: PPUSH
42580: PPUSH
42581: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42582: LD_VAR 0 1
42586: NOT
42587: PUSH
42588: LD_VAR 0 1
42592: PPUSH
42593: CALL_OW 257
42597: PUSH
42598: LD_INT 9
42600: NONEQUAL
42601: OR
42602: IFFALSE 42606
// exit ;
42604: GO 43179
// side := GetSide ( unit ) ;
42606: LD_ADDR_VAR 0 9
42610: PUSH
42611: LD_VAR 0 1
42615: PPUSH
42616: CALL_OW 255
42620: ST_TO_ADDR
// tech_space := tech_spacanom ;
42621: LD_ADDR_VAR 0 12
42625: PUSH
42626: LD_INT 29
42628: ST_TO_ADDR
// tech_time := tech_taurad ;
42629: LD_ADDR_VAR 0 13
42633: PUSH
42634: LD_INT 28
42636: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42637: LD_ADDR_VAR 0 11
42641: PUSH
42642: LD_VAR 0 1
42646: PPUSH
42647: CALL_OW 310
42651: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42652: LD_VAR 0 11
42656: PPUSH
42657: CALL_OW 247
42661: PUSH
42662: LD_INT 2
42664: EQUAL
42665: IFFALSE 42669
// exit ;
42667: GO 43179
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42669: LD_ADDR_VAR 0 8
42673: PUSH
42674: LD_INT 81
42676: PUSH
42677: LD_VAR 0 9
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 3
42688: PUSH
42689: LD_INT 21
42691: PUSH
42692: LD_INT 3
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PPUSH
42707: CALL_OW 69
42711: ST_TO_ADDR
// if not tmp then
42712: LD_VAR 0 8
42716: NOT
42717: IFFALSE 42721
// exit ;
42719: GO 43179
// if in_unit then
42721: LD_VAR 0 11
42725: IFFALSE 42749
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42727: LD_ADDR_VAR 0 10
42731: PUSH
42732: LD_VAR 0 8
42736: PPUSH
42737: LD_VAR 0 11
42741: PPUSH
42742: CALL_OW 74
42746: ST_TO_ADDR
42747: GO 42769
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42749: LD_ADDR_VAR 0 10
42753: PUSH
42754: LD_VAR 0 8
42758: PPUSH
42759: LD_VAR 0 1
42763: PPUSH
42764: CALL_OW 74
42768: ST_TO_ADDR
// if not enemy then
42769: LD_VAR 0 10
42773: NOT
42774: IFFALSE 42778
// exit ;
42776: GO 43179
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42778: LD_VAR 0 11
42782: PUSH
42783: LD_VAR 0 11
42787: PPUSH
42788: LD_VAR 0 10
42792: PPUSH
42793: CALL_OW 296
42797: PUSH
42798: LD_INT 13
42800: GREATER
42801: AND
42802: PUSH
42803: LD_VAR 0 1
42807: PPUSH
42808: LD_VAR 0 10
42812: PPUSH
42813: CALL_OW 296
42817: PUSH
42818: LD_INT 12
42820: GREATER
42821: OR
42822: IFFALSE 42826
// exit ;
42824: GO 43179
// missile := [ 1 ] ;
42826: LD_ADDR_VAR 0 14
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42837: LD_VAR 0 9
42841: PPUSH
42842: LD_VAR 0 12
42846: PPUSH
42847: CALL_OW 325
42851: IFFALSE 42880
// missile := Replace ( missile , missile + 1 , 2 ) ;
42853: LD_ADDR_VAR 0 14
42857: PUSH
42858: LD_VAR 0 14
42862: PPUSH
42863: LD_VAR 0 14
42867: PUSH
42868: LD_INT 1
42870: PLUS
42871: PPUSH
42872: LD_INT 2
42874: PPUSH
42875: CALL_OW 1
42879: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42880: LD_VAR 0 9
42884: PPUSH
42885: LD_VAR 0 13
42889: PPUSH
42890: CALL_OW 325
42894: PUSH
42895: LD_VAR 0 10
42899: PPUSH
42900: CALL_OW 255
42904: PPUSH
42905: LD_VAR 0 13
42909: PPUSH
42910: CALL_OW 325
42914: NOT
42915: AND
42916: IFFALSE 42945
// missile := Replace ( missile , missile + 1 , 3 ) ;
42918: LD_ADDR_VAR 0 14
42922: PUSH
42923: LD_VAR 0 14
42927: PPUSH
42928: LD_VAR 0 14
42932: PUSH
42933: LD_INT 1
42935: PLUS
42936: PPUSH
42937: LD_INT 3
42939: PPUSH
42940: CALL_OW 1
42944: ST_TO_ADDR
// if missile < 2 then
42945: LD_VAR 0 14
42949: PUSH
42950: LD_INT 2
42952: LESS
42953: IFFALSE 42957
// exit ;
42955: GO 43179
// x := GetX ( enemy ) ;
42957: LD_ADDR_VAR 0 4
42961: PUSH
42962: LD_VAR 0 10
42966: PPUSH
42967: CALL_OW 250
42971: ST_TO_ADDR
// y := GetY ( enemy ) ;
42972: LD_ADDR_VAR 0 5
42976: PUSH
42977: LD_VAR 0 10
42981: PPUSH
42982: CALL_OW 251
42986: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42987: LD_ADDR_VAR 0 6
42991: PUSH
42992: LD_VAR 0 4
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PPUSH
43001: LD_INT 1
43003: PPUSH
43004: CALL_OW 12
43008: PLUS
43009: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43010: LD_ADDR_VAR 0 7
43014: PUSH
43015: LD_VAR 0 5
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PPUSH
43024: LD_INT 1
43026: PPUSH
43027: CALL_OW 12
43031: PLUS
43032: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43033: LD_VAR 0 6
43037: PPUSH
43038: LD_VAR 0 7
43042: PPUSH
43043: CALL_OW 488
43047: NOT
43048: IFFALSE 43070
// begin _x := x ;
43050: LD_ADDR_VAR 0 6
43054: PUSH
43055: LD_VAR 0 4
43059: ST_TO_ADDR
// _y := y ;
43060: LD_ADDR_VAR 0 7
43064: PUSH
43065: LD_VAR 0 5
43069: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43070: LD_ADDR_VAR 0 3
43074: PUSH
43075: LD_INT 1
43077: PPUSH
43078: LD_VAR 0 14
43082: PPUSH
43083: CALL_OW 12
43087: ST_TO_ADDR
// case i of 1 :
43088: LD_VAR 0 3
43092: PUSH
43093: LD_INT 1
43095: DOUBLE
43096: EQUAL
43097: IFTRUE 43101
43099: GO 43118
43101: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43102: LD_VAR 0 1
43106: PPUSH
43107: LD_VAR 0 10
43111: PPUSH
43112: CALL_OW 115
43116: GO 43179
43118: LD_INT 2
43120: DOUBLE
43121: EQUAL
43122: IFTRUE 43126
43124: GO 43148
43126: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43127: LD_VAR 0 1
43131: PPUSH
43132: LD_VAR 0 6
43136: PPUSH
43137: LD_VAR 0 7
43141: PPUSH
43142: CALL_OW 153
43146: GO 43179
43148: LD_INT 3
43150: DOUBLE
43151: EQUAL
43152: IFTRUE 43156
43154: GO 43178
43156: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43157: LD_VAR 0 1
43161: PPUSH
43162: LD_VAR 0 6
43166: PPUSH
43167: LD_VAR 0 7
43171: PPUSH
43172: CALL_OW 154
43176: GO 43179
43178: POP
// end ;
43179: LD_VAR 0 2
43183: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43184: LD_INT 0
43186: PPUSH
43187: PPUSH
43188: PPUSH
43189: PPUSH
43190: PPUSH
43191: PPUSH
// if not unit or not building then
43192: LD_VAR 0 1
43196: NOT
43197: PUSH
43198: LD_VAR 0 2
43202: NOT
43203: OR
43204: IFFALSE 43208
// exit ;
43206: GO 43366
// x := GetX ( building ) ;
43208: LD_ADDR_VAR 0 5
43212: PUSH
43213: LD_VAR 0 2
43217: PPUSH
43218: CALL_OW 250
43222: ST_TO_ADDR
// y := GetY ( building ) ;
43223: LD_ADDR_VAR 0 6
43227: PUSH
43228: LD_VAR 0 2
43232: PPUSH
43233: CALL_OW 251
43237: ST_TO_ADDR
// for i = 0 to 5 do
43238: LD_ADDR_VAR 0 4
43242: PUSH
43243: DOUBLE
43244: LD_INT 0
43246: DEC
43247: ST_TO_ADDR
43248: LD_INT 5
43250: PUSH
43251: FOR_TO
43252: IFFALSE 43364
// begin _x := ShiftX ( x , i , 3 ) ;
43254: LD_ADDR_VAR 0 7
43258: PUSH
43259: LD_VAR 0 5
43263: PPUSH
43264: LD_VAR 0 4
43268: PPUSH
43269: LD_INT 3
43271: PPUSH
43272: CALL_OW 272
43276: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43277: LD_ADDR_VAR 0 8
43281: PUSH
43282: LD_VAR 0 6
43286: PPUSH
43287: LD_VAR 0 4
43291: PPUSH
43292: LD_INT 3
43294: PPUSH
43295: CALL_OW 273
43299: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43300: LD_VAR 0 7
43304: PPUSH
43305: LD_VAR 0 8
43309: PPUSH
43310: CALL_OW 488
43314: NOT
43315: IFFALSE 43319
// continue ;
43317: GO 43251
// if HexInfo ( _x , _y ) = 0 then
43319: LD_VAR 0 7
43323: PPUSH
43324: LD_VAR 0 8
43328: PPUSH
43329: CALL_OW 428
43333: PUSH
43334: LD_INT 0
43336: EQUAL
43337: IFFALSE 43362
// begin ComMoveXY ( unit , _x , _y ) ;
43339: LD_VAR 0 1
43343: PPUSH
43344: LD_VAR 0 7
43348: PPUSH
43349: LD_VAR 0 8
43353: PPUSH
43354: CALL_OW 111
// exit ;
43358: POP
43359: POP
43360: GO 43366
// end ; end ;
43362: GO 43251
43364: POP
43365: POP
// end ;
43366: LD_VAR 0 3
43370: RET
// export function ScanBase ( side , base_area ) ; begin
43371: LD_INT 0
43373: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43374: LD_ADDR_VAR 0 3
43378: PUSH
43379: LD_VAR 0 2
43383: PPUSH
43384: LD_INT 81
43386: PUSH
43387: LD_VAR 0 1
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PPUSH
43396: CALL_OW 70
43400: ST_TO_ADDR
// end ;
43401: LD_VAR 0 3
43405: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43406: LD_INT 0
43408: PPUSH
43409: PPUSH
43410: PPUSH
43411: PPUSH
// result := false ;
43412: LD_ADDR_VAR 0 2
43416: PUSH
43417: LD_INT 0
43419: ST_TO_ADDR
// side := GetSide ( unit ) ;
43420: LD_ADDR_VAR 0 3
43424: PUSH
43425: LD_VAR 0 1
43429: PPUSH
43430: CALL_OW 255
43434: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43435: LD_ADDR_VAR 0 4
43439: PUSH
43440: LD_VAR 0 1
43444: PPUSH
43445: CALL_OW 248
43449: ST_TO_ADDR
// case nat of 1 :
43450: LD_VAR 0 4
43454: PUSH
43455: LD_INT 1
43457: DOUBLE
43458: EQUAL
43459: IFTRUE 43463
43461: GO 43474
43463: POP
// tech := tech_lassight ; 2 :
43464: LD_ADDR_VAR 0 5
43468: PUSH
43469: LD_INT 12
43471: ST_TO_ADDR
43472: GO 43513
43474: LD_INT 2
43476: DOUBLE
43477: EQUAL
43478: IFTRUE 43482
43480: GO 43493
43482: POP
// tech := tech_mortar ; 3 :
43483: LD_ADDR_VAR 0 5
43487: PUSH
43488: LD_INT 41
43490: ST_TO_ADDR
43491: GO 43513
43493: LD_INT 3
43495: DOUBLE
43496: EQUAL
43497: IFTRUE 43501
43499: GO 43512
43501: POP
// tech := tech_bazooka ; end ;
43502: LD_ADDR_VAR 0 5
43506: PUSH
43507: LD_INT 44
43509: ST_TO_ADDR
43510: GO 43513
43512: POP
// if Researched ( side , tech ) then
43513: LD_VAR 0 3
43517: PPUSH
43518: LD_VAR 0 5
43522: PPUSH
43523: CALL_OW 325
43527: IFFALSE 43554
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43529: LD_ADDR_VAR 0 2
43533: PUSH
43534: LD_INT 5
43536: PUSH
43537: LD_INT 8
43539: PUSH
43540: LD_INT 9
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: LIST
43547: PUSH
43548: LD_VAR 0 4
43552: ARRAY
43553: ST_TO_ADDR
// end ;
43554: LD_VAR 0 2
43558: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43559: LD_INT 0
43561: PPUSH
43562: PPUSH
43563: PPUSH
// if not mines then
43564: LD_VAR 0 2
43568: NOT
43569: IFFALSE 43573
// exit ;
43571: GO 43717
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43573: LD_ADDR_VAR 0 5
43577: PUSH
43578: LD_INT 81
43580: PUSH
43581: LD_VAR 0 1
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 3
43592: PUSH
43593: LD_INT 21
43595: PUSH
43596: LD_INT 3
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PPUSH
43611: CALL_OW 69
43615: ST_TO_ADDR
// for i in mines do
43616: LD_ADDR_VAR 0 4
43620: PUSH
43621: LD_VAR 0 2
43625: PUSH
43626: FOR_IN
43627: IFFALSE 43715
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43629: LD_VAR 0 4
43633: PUSH
43634: LD_INT 1
43636: ARRAY
43637: PPUSH
43638: LD_VAR 0 4
43642: PUSH
43643: LD_INT 2
43645: ARRAY
43646: PPUSH
43647: CALL_OW 458
43651: NOT
43652: IFFALSE 43656
// continue ;
43654: GO 43626
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43656: LD_VAR 0 4
43660: PUSH
43661: LD_INT 1
43663: ARRAY
43664: PPUSH
43665: LD_VAR 0 4
43669: PUSH
43670: LD_INT 2
43672: ARRAY
43673: PPUSH
43674: CALL_OW 428
43678: PUSH
43679: LD_VAR 0 5
43683: IN
43684: IFFALSE 43713
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43686: LD_VAR 0 4
43690: PUSH
43691: LD_INT 1
43693: ARRAY
43694: PPUSH
43695: LD_VAR 0 4
43699: PUSH
43700: LD_INT 2
43702: ARRAY
43703: PPUSH
43704: LD_VAR 0 1
43708: PPUSH
43709: CALL_OW 456
// end ;
43713: GO 43626
43715: POP
43716: POP
// end ;
43717: LD_VAR 0 3
43721: RET
// export function Count ( array ) ; begin
43722: LD_INT 0
43724: PPUSH
// result := array + 0 ;
43725: LD_ADDR_VAR 0 2
43729: PUSH
43730: LD_VAR 0 1
43734: PUSH
43735: LD_INT 0
43737: PLUS
43738: ST_TO_ADDR
// end ;
43739: LD_VAR 0 2
43743: RET
// export function IsEmpty ( building ) ; begin
43744: LD_INT 0
43746: PPUSH
// if not building then
43747: LD_VAR 0 1
43751: NOT
43752: IFFALSE 43756
// exit ;
43754: GO 43799
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43756: LD_ADDR_VAR 0 2
43760: PUSH
43761: LD_VAR 0 1
43765: PUSH
43766: LD_INT 22
43768: PUSH
43769: LD_VAR 0 1
43773: PPUSH
43774: CALL_OW 255
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 58
43785: PUSH
43786: EMPTY
43787: LIST
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PPUSH
43793: CALL_OW 69
43797: IN
43798: ST_TO_ADDR
// end ;
43799: LD_VAR 0 2
43803: RET
// export function IsNotFull ( building ) ; var places ; begin
43804: LD_INT 0
43806: PPUSH
43807: PPUSH
// if not building then
43808: LD_VAR 0 1
43812: NOT
43813: IFFALSE 43817
// exit ;
43815: GO 43845
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43817: LD_ADDR_VAR 0 2
43821: PUSH
43822: LD_VAR 0 1
43826: PPUSH
43827: LD_INT 3
43829: PUSH
43830: LD_INT 62
43832: PUSH
43833: EMPTY
43834: LIST
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PPUSH
43840: CALL_OW 72
43844: ST_TO_ADDR
// end ;
43845: LD_VAR 0 2
43849: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43850: LD_INT 0
43852: PPUSH
43853: PPUSH
43854: PPUSH
43855: PPUSH
// tmp := [ ] ;
43856: LD_ADDR_VAR 0 3
43860: PUSH
43861: EMPTY
43862: ST_TO_ADDR
// list := [ ] ;
43863: LD_ADDR_VAR 0 5
43867: PUSH
43868: EMPTY
43869: ST_TO_ADDR
// for i = 16 to 25 do
43870: LD_ADDR_VAR 0 4
43874: PUSH
43875: DOUBLE
43876: LD_INT 16
43878: DEC
43879: ST_TO_ADDR
43880: LD_INT 25
43882: PUSH
43883: FOR_TO
43884: IFFALSE 43957
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43886: LD_ADDR_VAR 0 3
43890: PUSH
43891: LD_VAR 0 3
43895: PUSH
43896: LD_INT 22
43898: PUSH
43899: LD_VAR 0 1
43903: PPUSH
43904: CALL_OW 255
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 91
43915: PUSH
43916: LD_VAR 0 1
43920: PUSH
43921: LD_INT 6
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 30
43931: PUSH
43932: LD_VAR 0 4
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: LIST
43945: PUSH
43946: EMPTY
43947: LIST
43948: PPUSH
43949: CALL_OW 69
43953: ADD
43954: ST_TO_ADDR
43955: GO 43883
43957: POP
43958: POP
// for i = 1 to tmp do
43959: LD_ADDR_VAR 0 4
43963: PUSH
43964: DOUBLE
43965: LD_INT 1
43967: DEC
43968: ST_TO_ADDR
43969: LD_VAR 0 3
43973: PUSH
43974: FOR_TO
43975: IFFALSE 44063
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43977: LD_ADDR_VAR 0 5
43981: PUSH
43982: LD_VAR 0 5
43986: PUSH
43987: LD_VAR 0 3
43991: PUSH
43992: LD_VAR 0 4
43996: ARRAY
43997: PPUSH
43998: CALL_OW 266
44002: PUSH
44003: LD_VAR 0 3
44007: PUSH
44008: LD_VAR 0 4
44012: ARRAY
44013: PPUSH
44014: CALL_OW 250
44018: PUSH
44019: LD_VAR 0 3
44023: PUSH
44024: LD_VAR 0 4
44028: ARRAY
44029: PPUSH
44030: CALL_OW 251
44034: PUSH
44035: LD_VAR 0 3
44039: PUSH
44040: LD_VAR 0 4
44044: ARRAY
44045: PPUSH
44046: CALL_OW 254
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: PUSH
44057: EMPTY
44058: LIST
44059: ADD
44060: ST_TO_ADDR
44061: GO 43974
44063: POP
44064: POP
// result := list ;
44065: LD_ADDR_VAR 0 2
44069: PUSH
44070: LD_VAR 0 5
44074: ST_TO_ADDR
// end ;
44075: LD_VAR 0 2
44079: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44080: LD_INT 0
44082: PPUSH
44083: PPUSH
44084: PPUSH
44085: PPUSH
44086: PPUSH
44087: PPUSH
44088: PPUSH
// if not factory then
44089: LD_VAR 0 1
44093: NOT
44094: IFFALSE 44098
// exit ;
44096: GO 44691
// if control = control_apeman then
44098: LD_VAR 0 4
44102: PUSH
44103: LD_INT 5
44105: EQUAL
44106: IFFALSE 44215
// begin tmp := UnitsInside ( factory ) ;
44108: LD_ADDR_VAR 0 8
44112: PUSH
44113: LD_VAR 0 1
44117: PPUSH
44118: CALL_OW 313
44122: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44123: LD_VAR 0 8
44127: PPUSH
44128: LD_INT 25
44130: PUSH
44131: LD_INT 12
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PPUSH
44138: CALL_OW 72
44142: NOT
44143: IFFALSE 44153
// control := control_manual ;
44145: LD_ADDR_VAR 0 4
44149: PUSH
44150: LD_INT 1
44152: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44153: LD_ADDR_VAR 0 8
44157: PUSH
44158: LD_VAR 0 1
44162: PPUSH
44163: CALL 43850 0 1
44167: ST_TO_ADDR
// if tmp then
44168: LD_VAR 0 8
44172: IFFALSE 44215
// begin for i in tmp do
44174: LD_ADDR_VAR 0 7
44178: PUSH
44179: LD_VAR 0 8
44183: PUSH
44184: FOR_IN
44185: IFFALSE 44213
// if i [ 1 ] = b_ext_radio then
44187: LD_VAR 0 7
44191: PUSH
44192: LD_INT 1
44194: ARRAY
44195: PUSH
44196: LD_INT 22
44198: EQUAL
44199: IFFALSE 44211
// begin control := control_remote ;
44201: LD_ADDR_VAR 0 4
44205: PUSH
44206: LD_INT 2
44208: ST_TO_ADDR
// break ;
44209: GO 44213
// end ;
44211: GO 44184
44213: POP
44214: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44215: LD_VAR 0 1
44219: PPUSH
44220: LD_VAR 0 2
44224: PPUSH
44225: LD_VAR 0 3
44229: PPUSH
44230: LD_VAR 0 4
44234: PPUSH
44235: LD_VAR 0 5
44239: PPUSH
44240: CALL_OW 448
44244: IFFALSE 44279
// begin result := [ chassis , engine , control , weapon ] ;
44246: LD_ADDR_VAR 0 6
44250: PUSH
44251: LD_VAR 0 2
44255: PUSH
44256: LD_VAR 0 3
44260: PUSH
44261: LD_VAR 0 4
44265: PUSH
44266: LD_VAR 0 5
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: ST_TO_ADDR
// exit ;
44277: GO 44691
// end ; _chassis := AvailableChassisList ( factory ) ;
44279: LD_ADDR_VAR 0 9
44283: PUSH
44284: LD_VAR 0 1
44288: PPUSH
44289: CALL_OW 475
44293: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44294: LD_ADDR_VAR 0 11
44298: PUSH
44299: LD_VAR 0 1
44303: PPUSH
44304: CALL_OW 476
44308: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44309: LD_ADDR_VAR 0 12
44313: PUSH
44314: LD_VAR 0 1
44318: PPUSH
44319: CALL_OW 477
44323: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44324: LD_ADDR_VAR 0 10
44328: PUSH
44329: LD_VAR 0 1
44333: PPUSH
44334: CALL_OW 478
44338: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44339: LD_VAR 0 9
44343: NOT
44344: PUSH
44345: LD_VAR 0 11
44349: NOT
44350: OR
44351: PUSH
44352: LD_VAR 0 12
44356: NOT
44357: OR
44358: PUSH
44359: LD_VAR 0 10
44363: NOT
44364: OR
44365: IFFALSE 44400
// begin result := [ chassis , engine , control , weapon ] ;
44367: LD_ADDR_VAR 0 6
44371: PUSH
44372: LD_VAR 0 2
44376: PUSH
44377: LD_VAR 0 3
44381: PUSH
44382: LD_VAR 0 4
44386: PUSH
44387: LD_VAR 0 5
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: ST_TO_ADDR
// exit ;
44398: GO 44691
// end ; if not chassis in _chassis then
44400: LD_VAR 0 2
44404: PUSH
44405: LD_VAR 0 9
44409: IN
44410: NOT
44411: IFFALSE 44437
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44413: LD_ADDR_VAR 0 2
44417: PUSH
44418: LD_VAR 0 9
44422: PUSH
44423: LD_INT 1
44425: PPUSH
44426: LD_VAR 0 9
44430: PPUSH
44431: CALL_OW 12
44435: ARRAY
44436: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44437: LD_VAR 0 2
44441: PPUSH
44442: LD_VAR 0 3
44446: PPUSH
44447: CALL 44696 0 2
44451: NOT
44452: IFFALSE 44511
// repeat engine := _engine [ 1 ] ;
44454: LD_ADDR_VAR 0 3
44458: PUSH
44459: LD_VAR 0 11
44463: PUSH
44464: LD_INT 1
44466: ARRAY
44467: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44468: LD_ADDR_VAR 0 11
44472: PUSH
44473: LD_VAR 0 11
44477: PPUSH
44478: LD_INT 1
44480: PPUSH
44481: CALL_OW 3
44485: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44486: LD_VAR 0 2
44490: PPUSH
44491: LD_VAR 0 3
44495: PPUSH
44496: CALL 44696 0 2
44500: PUSH
44501: LD_VAR 0 11
44505: PUSH
44506: EMPTY
44507: EQUAL
44508: OR
44509: IFFALSE 44454
// if not control in _control then
44511: LD_VAR 0 4
44515: PUSH
44516: LD_VAR 0 12
44520: IN
44521: NOT
44522: IFFALSE 44548
// control := _control [ rand ( 1 , _control ) ] ;
44524: LD_ADDR_VAR 0 4
44528: PUSH
44529: LD_VAR 0 12
44533: PUSH
44534: LD_INT 1
44536: PPUSH
44537: LD_VAR 0 12
44541: PPUSH
44542: CALL_OW 12
44546: ARRAY
44547: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44548: LD_VAR 0 2
44552: PPUSH
44553: LD_VAR 0 5
44557: PPUSH
44558: CALL 44916 0 2
44562: NOT
44563: IFFALSE 44622
// repeat weapon := _weapon [ 1 ] ;
44565: LD_ADDR_VAR 0 5
44569: PUSH
44570: LD_VAR 0 10
44574: PUSH
44575: LD_INT 1
44577: ARRAY
44578: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44579: LD_ADDR_VAR 0 10
44583: PUSH
44584: LD_VAR 0 10
44588: PPUSH
44589: LD_INT 1
44591: PPUSH
44592: CALL_OW 3
44596: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44597: LD_VAR 0 2
44601: PPUSH
44602: LD_VAR 0 5
44606: PPUSH
44607: CALL 44916 0 2
44611: PUSH
44612: LD_VAR 0 10
44616: PUSH
44617: EMPTY
44618: EQUAL
44619: OR
44620: IFFALSE 44565
// result := [ ] ;
44622: LD_ADDR_VAR 0 6
44626: PUSH
44627: EMPTY
44628: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44629: LD_VAR 0 1
44633: PPUSH
44634: LD_VAR 0 2
44638: PPUSH
44639: LD_VAR 0 3
44643: PPUSH
44644: LD_VAR 0 4
44648: PPUSH
44649: LD_VAR 0 5
44653: PPUSH
44654: CALL_OW 448
44658: IFFALSE 44691
// result := [ chassis , engine , control , weapon ] ;
44660: LD_ADDR_VAR 0 6
44664: PUSH
44665: LD_VAR 0 2
44669: PUSH
44670: LD_VAR 0 3
44674: PUSH
44675: LD_VAR 0 4
44679: PUSH
44680: LD_VAR 0 5
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: ST_TO_ADDR
// end ;
44691: LD_VAR 0 6
44695: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44696: LD_INT 0
44698: PPUSH
// if not chassis or not engine then
44699: LD_VAR 0 1
44703: NOT
44704: PUSH
44705: LD_VAR 0 2
44709: NOT
44710: OR
44711: IFFALSE 44715
// exit ;
44713: GO 44911
// case engine of engine_solar :
44715: LD_VAR 0 2
44719: PUSH
44720: LD_INT 2
44722: DOUBLE
44723: EQUAL
44724: IFTRUE 44728
44726: GO 44766
44728: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44729: LD_ADDR_VAR 0 3
44733: PUSH
44734: LD_INT 11
44736: PUSH
44737: LD_INT 12
44739: PUSH
44740: LD_INT 13
44742: PUSH
44743: LD_INT 14
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: LD_INT 3
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: ST_TO_ADDR
44764: GO 44895
44766: LD_INT 1
44768: DOUBLE
44769: EQUAL
44770: IFTRUE 44774
44772: GO 44836
44774: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44775: LD_ADDR_VAR 0 3
44779: PUSH
44780: LD_INT 11
44782: PUSH
44783: LD_INT 12
44785: PUSH
44786: LD_INT 13
44788: PUSH
44789: LD_INT 14
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: LD_INT 2
44797: PUSH
44798: LD_INT 3
44800: PUSH
44801: LD_INT 4
44803: PUSH
44804: LD_INT 5
44806: PUSH
44807: LD_INT 21
44809: PUSH
44810: LD_INT 23
44812: PUSH
44813: LD_INT 22
44815: PUSH
44816: LD_INT 24
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: ST_TO_ADDR
44834: GO 44895
44836: LD_INT 3
44838: DOUBLE
44839: EQUAL
44840: IFTRUE 44844
44842: GO 44894
44844: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44845: LD_ADDR_VAR 0 3
44849: PUSH
44850: LD_INT 13
44852: PUSH
44853: LD_INT 14
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: LD_INT 3
44861: PUSH
44862: LD_INT 4
44864: PUSH
44865: LD_INT 5
44867: PUSH
44868: LD_INT 21
44870: PUSH
44871: LD_INT 22
44873: PUSH
44874: LD_INT 23
44876: PUSH
44877: LD_INT 24
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: ST_TO_ADDR
44892: GO 44895
44894: POP
// result := ( chassis in result ) ;
44895: LD_ADDR_VAR 0 3
44899: PUSH
44900: LD_VAR 0 1
44904: PUSH
44905: LD_VAR 0 3
44909: IN
44910: ST_TO_ADDR
// end ;
44911: LD_VAR 0 3
44915: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44916: LD_INT 0
44918: PPUSH
// if not chassis or not weapon then
44919: LD_VAR 0 1
44923: NOT
44924: PUSH
44925: LD_VAR 0 2
44929: NOT
44930: OR
44931: IFFALSE 44935
// exit ;
44933: GO 45995
// case weapon of us_machine_gun :
44935: LD_VAR 0 2
44939: PUSH
44940: LD_INT 2
44942: DOUBLE
44943: EQUAL
44944: IFTRUE 44948
44946: GO 44978
44948: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44949: LD_ADDR_VAR 0 3
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: LD_INT 3
44962: PUSH
44963: LD_INT 4
44965: PUSH
44966: LD_INT 5
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: ST_TO_ADDR
44976: GO 45979
44978: LD_INT 3
44980: DOUBLE
44981: EQUAL
44982: IFTRUE 44986
44984: GO 45016
44986: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44987: LD_ADDR_VAR 0 3
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: LD_INT 3
45000: PUSH
45001: LD_INT 4
45003: PUSH
45004: LD_INT 5
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: ST_TO_ADDR
45014: GO 45979
45016: LD_INT 11
45018: DOUBLE
45019: EQUAL
45020: IFTRUE 45024
45022: GO 45054
45024: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45025: LD_ADDR_VAR 0 3
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: LD_INT 2
45035: PUSH
45036: LD_INT 3
45038: PUSH
45039: LD_INT 4
45041: PUSH
45042: LD_INT 5
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: ST_TO_ADDR
45052: GO 45979
45054: LD_INT 4
45056: DOUBLE
45057: EQUAL
45058: IFTRUE 45062
45060: GO 45088
45062: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45063: LD_ADDR_VAR 0 3
45067: PUSH
45068: LD_INT 2
45070: PUSH
45071: LD_INT 3
45073: PUSH
45074: LD_INT 4
45076: PUSH
45077: LD_INT 5
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: ST_TO_ADDR
45086: GO 45979
45088: LD_INT 5
45090: DOUBLE
45091: EQUAL
45092: IFTRUE 45096
45094: GO 45122
45096: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45097: LD_ADDR_VAR 0 3
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: LD_INT 3
45107: PUSH
45108: LD_INT 4
45110: PUSH
45111: LD_INT 5
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: ST_TO_ADDR
45120: GO 45979
45122: LD_INT 9
45124: DOUBLE
45125: EQUAL
45126: IFTRUE 45130
45128: GO 45156
45130: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45131: LD_ADDR_VAR 0 3
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: LD_INT 3
45141: PUSH
45142: LD_INT 4
45144: PUSH
45145: LD_INT 5
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: ST_TO_ADDR
45154: GO 45979
45156: LD_INT 7
45158: DOUBLE
45159: EQUAL
45160: IFTRUE 45164
45162: GO 45190
45164: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45165: LD_ADDR_VAR 0 3
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: LD_INT 3
45175: PUSH
45176: LD_INT 4
45178: PUSH
45179: LD_INT 5
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: ST_TO_ADDR
45188: GO 45979
45190: LD_INT 12
45192: DOUBLE
45193: EQUAL
45194: IFTRUE 45198
45196: GO 45224
45198: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45199: LD_ADDR_VAR 0 3
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: LD_INT 3
45209: PUSH
45210: LD_INT 4
45212: PUSH
45213: LD_INT 5
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: ST_TO_ADDR
45222: GO 45979
45224: LD_INT 13
45226: DOUBLE
45227: EQUAL
45228: IFTRUE 45232
45230: GO 45258
45232: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45233: LD_ADDR_VAR 0 3
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: LD_INT 3
45243: PUSH
45244: LD_INT 4
45246: PUSH
45247: LD_INT 5
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: ST_TO_ADDR
45256: GO 45979
45258: LD_INT 14
45260: DOUBLE
45261: EQUAL
45262: IFTRUE 45266
45264: GO 45284
45266: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45267: LD_ADDR_VAR 0 3
45271: PUSH
45272: LD_INT 4
45274: PUSH
45275: LD_INT 5
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: ST_TO_ADDR
45282: GO 45979
45284: LD_INT 6
45286: DOUBLE
45287: EQUAL
45288: IFTRUE 45292
45290: GO 45310
45292: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45293: LD_ADDR_VAR 0 3
45297: PUSH
45298: LD_INT 4
45300: PUSH
45301: LD_INT 5
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: ST_TO_ADDR
45308: GO 45979
45310: LD_INT 10
45312: DOUBLE
45313: EQUAL
45314: IFTRUE 45318
45316: GO 45336
45318: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45319: LD_ADDR_VAR 0 3
45323: PUSH
45324: LD_INT 4
45326: PUSH
45327: LD_INT 5
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: ST_TO_ADDR
45334: GO 45979
45336: LD_INT 22
45338: DOUBLE
45339: EQUAL
45340: IFTRUE 45344
45342: GO 45370
45344: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45345: LD_ADDR_VAR 0 3
45349: PUSH
45350: LD_INT 11
45352: PUSH
45353: LD_INT 12
45355: PUSH
45356: LD_INT 13
45358: PUSH
45359: LD_INT 14
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: ST_TO_ADDR
45368: GO 45979
45370: LD_INT 23
45372: DOUBLE
45373: EQUAL
45374: IFTRUE 45378
45376: GO 45404
45378: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45379: LD_ADDR_VAR 0 3
45383: PUSH
45384: LD_INT 11
45386: PUSH
45387: LD_INT 12
45389: PUSH
45390: LD_INT 13
45392: PUSH
45393: LD_INT 14
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: ST_TO_ADDR
45402: GO 45979
45404: LD_INT 24
45406: DOUBLE
45407: EQUAL
45408: IFTRUE 45412
45410: GO 45438
45412: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45413: LD_ADDR_VAR 0 3
45417: PUSH
45418: LD_INT 11
45420: PUSH
45421: LD_INT 12
45423: PUSH
45424: LD_INT 13
45426: PUSH
45427: LD_INT 14
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: ST_TO_ADDR
45436: GO 45979
45438: LD_INT 30
45440: DOUBLE
45441: EQUAL
45442: IFTRUE 45446
45444: GO 45472
45446: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45447: LD_ADDR_VAR 0 3
45451: PUSH
45452: LD_INT 11
45454: PUSH
45455: LD_INT 12
45457: PUSH
45458: LD_INT 13
45460: PUSH
45461: LD_INT 14
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: ST_TO_ADDR
45470: GO 45979
45472: LD_INT 25
45474: DOUBLE
45475: EQUAL
45476: IFTRUE 45480
45478: GO 45498
45480: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45481: LD_ADDR_VAR 0 3
45485: PUSH
45486: LD_INT 13
45488: PUSH
45489: LD_INT 14
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: ST_TO_ADDR
45496: GO 45979
45498: LD_INT 27
45500: DOUBLE
45501: EQUAL
45502: IFTRUE 45506
45504: GO 45524
45506: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45507: LD_ADDR_VAR 0 3
45511: PUSH
45512: LD_INT 13
45514: PUSH
45515: LD_INT 14
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: ST_TO_ADDR
45522: GO 45979
45524: LD_INT 92
45526: DOUBLE
45527: EQUAL
45528: IFTRUE 45532
45530: GO 45558
45532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45533: LD_ADDR_VAR 0 3
45537: PUSH
45538: LD_INT 11
45540: PUSH
45541: LD_INT 12
45543: PUSH
45544: LD_INT 13
45546: PUSH
45547: LD_INT 14
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: ST_TO_ADDR
45556: GO 45979
45558: LD_INT 28
45560: DOUBLE
45561: EQUAL
45562: IFTRUE 45566
45564: GO 45584
45566: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45567: LD_ADDR_VAR 0 3
45571: PUSH
45572: LD_INT 13
45574: PUSH
45575: LD_INT 14
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: ST_TO_ADDR
45582: GO 45979
45584: LD_INT 29
45586: DOUBLE
45587: EQUAL
45588: IFTRUE 45592
45590: GO 45610
45592: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45593: LD_ADDR_VAR 0 3
45597: PUSH
45598: LD_INT 13
45600: PUSH
45601: LD_INT 14
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: ST_TO_ADDR
45608: GO 45979
45610: LD_INT 31
45612: DOUBLE
45613: EQUAL
45614: IFTRUE 45618
45616: GO 45636
45618: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45619: LD_ADDR_VAR 0 3
45623: PUSH
45624: LD_INT 13
45626: PUSH
45627: LD_INT 14
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: ST_TO_ADDR
45634: GO 45979
45636: LD_INT 26
45638: DOUBLE
45639: EQUAL
45640: IFTRUE 45644
45642: GO 45662
45644: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45645: LD_ADDR_VAR 0 3
45649: PUSH
45650: LD_INT 13
45652: PUSH
45653: LD_INT 14
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: ST_TO_ADDR
45660: GO 45979
45662: LD_INT 42
45664: DOUBLE
45665: EQUAL
45666: IFTRUE 45670
45668: GO 45696
45670: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45671: LD_ADDR_VAR 0 3
45675: PUSH
45676: LD_INT 21
45678: PUSH
45679: LD_INT 22
45681: PUSH
45682: LD_INT 23
45684: PUSH
45685: LD_INT 24
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: ST_TO_ADDR
45694: GO 45979
45696: LD_INT 43
45698: DOUBLE
45699: EQUAL
45700: IFTRUE 45704
45702: GO 45730
45704: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45705: LD_ADDR_VAR 0 3
45709: PUSH
45710: LD_INT 21
45712: PUSH
45713: LD_INT 22
45715: PUSH
45716: LD_INT 23
45718: PUSH
45719: LD_INT 24
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: ST_TO_ADDR
45728: GO 45979
45730: LD_INT 44
45732: DOUBLE
45733: EQUAL
45734: IFTRUE 45738
45736: GO 45764
45738: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45739: LD_ADDR_VAR 0 3
45743: PUSH
45744: LD_INT 21
45746: PUSH
45747: LD_INT 22
45749: PUSH
45750: LD_INT 23
45752: PUSH
45753: LD_INT 24
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: ST_TO_ADDR
45762: GO 45979
45764: LD_INT 45
45766: DOUBLE
45767: EQUAL
45768: IFTRUE 45772
45770: GO 45798
45772: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45773: LD_ADDR_VAR 0 3
45777: PUSH
45778: LD_INT 21
45780: PUSH
45781: LD_INT 22
45783: PUSH
45784: LD_INT 23
45786: PUSH
45787: LD_INT 24
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: ST_TO_ADDR
45796: GO 45979
45798: LD_INT 49
45800: DOUBLE
45801: EQUAL
45802: IFTRUE 45806
45804: GO 45832
45806: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45807: LD_ADDR_VAR 0 3
45811: PUSH
45812: LD_INT 21
45814: PUSH
45815: LD_INT 22
45817: PUSH
45818: LD_INT 23
45820: PUSH
45821: LD_INT 24
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: ST_TO_ADDR
45830: GO 45979
45832: LD_INT 51
45834: DOUBLE
45835: EQUAL
45836: IFTRUE 45840
45838: GO 45866
45840: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45841: LD_ADDR_VAR 0 3
45845: PUSH
45846: LD_INT 21
45848: PUSH
45849: LD_INT 22
45851: PUSH
45852: LD_INT 23
45854: PUSH
45855: LD_INT 24
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: ST_TO_ADDR
45864: GO 45979
45866: LD_INT 52
45868: DOUBLE
45869: EQUAL
45870: IFTRUE 45874
45872: GO 45900
45874: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45875: LD_ADDR_VAR 0 3
45879: PUSH
45880: LD_INT 21
45882: PUSH
45883: LD_INT 22
45885: PUSH
45886: LD_INT 23
45888: PUSH
45889: LD_INT 24
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: ST_TO_ADDR
45898: GO 45979
45900: LD_INT 53
45902: DOUBLE
45903: EQUAL
45904: IFTRUE 45908
45906: GO 45926
45908: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45909: LD_ADDR_VAR 0 3
45913: PUSH
45914: LD_INT 23
45916: PUSH
45917: LD_INT 24
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: ST_TO_ADDR
45924: GO 45979
45926: LD_INT 46
45928: DOUBLE
45929: EQUAL
45930: IFTRUE 45934
45932: GO 45952
45934: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45935: LD_ADDR_VAR 0 3
45939: PUSH
45940: LD_INT 23
45942: PUSH
45943: LD_INT 24
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: ST_TO_ADDR
45950: GO 45979
45952: LD_INT 47
45954: DOUBLE
45955: EQUAL
45956: IFTRUE 45960
45958: GO 45978
45960: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45961: LD_ADDR_VAR 0 3
45965: PUSH
45966: LD_INT 23
45968: PUSH
45969: LD_INT 24
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: ST_TO_ADDR
45976: GO 45979
45978: POP
// result := ( chassis in result ) ;
45979: LD_ADDR_VAR 0 3
45983: PUSH
45984: LD_VAR 0 1
45988: PUSH
45989: LD_VAR 0 3
45993: IN
45994: ST_TO_ADDR
// end ;
45995: LD_VAR 0 3
45999: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46000: LD_INT 0
46002: PPUSH
46003: PPUSH
46004: PPUSH
46005: PPUSH
46006: PPUSH
46007: PPUSH
46008: PPUSH
// result := array ;
46009: LD_ADDR_VAR 0 5
46013: PUSH
46014: LD_VAR 0 1
46018: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46019: LD_VAR 0 1
46023: NOT
46024: PUSH
46025: LD_VAR 0 2
46029: NOT
46030: OR
46031: PUSH
46032: LD_VAR 0 3
46036: NOT
46037: OR
46038: PUSH
46039: LD_VAR 0 2
46043: PUSH
46044: LD_VAR 0 1
46048: GREATER
46049: OR
46050: PUSH
46051: LD_VAR 0 3
46055: PUSH
46056: LD_VAR 0 1
46060: GREATER
46061: OR
46062: IFFALSE 46066
// exit ;
46064: GO 46362
// if direction then
46066: LD_VAR 0 4
46070: IFFALSE 46134
// begin d := 1 ;
46072: LD_ADDR_VAR 0 9
46076: PUSH
46077: LD_INT 1
46079: ST_TO_ADDR
// if i_from > i_to then
46080: LD_VAR 0 2
46084: PUSH
46085: LD_VAR 0 3
46089: GREATER
46090: IFFALSE 46116
// length := ( array - i_from ) + i_to else
46092: LD_ADDR_VAR 0 11
46096: PUSH
46097: LD_VAR 0 1
46101: PUSH
46102: LD_VAR 0 2
46106: MINUS
46107: PUSH
46108: LD_VAR 0 3
46112: PLUS
46113: ST_TO_ADDR
46114: GO 46132
// length := i_to - i_from ;
46116: LD_ADDR_VAR 0 11
46120: PUSH
46121: LD_VAR 0 3
46125: PUSH
46126: LD_VAR 0 2
46130: MINUS
46131: ST_TO_ADDR
// end else
46132: GO 46195
// begin d := - 1 ;
46134: LD_ADDR_VAR 0 9
46138: PUSH
46139: LD_INT 1
46141: NEG
46142: ST_TO_ADDR
// if i_from > i_to then
46143: LD_VAR 0 2
46147: PUSH
46148: LD_VAR 0 3
46152: GREATER
46153: IFFALSE 46173
// length := i_from - i_to else
46155: LD_ADDR_VAR 0 11
46159: PUSH
46160: LD_VAR 0 2
46164: PUSH
46165: LD_VAR 0 3
46169: MINUS
46170: ST_TO_ADDR
46171: GO 46195
// length := ( array - i_to ) + i_from ;
46173: LD_ADDR_VAR 0 11
46177: PUSH
46178: LD_VAR 0 1
46182: PUSH
46183: LD_VAR 0 3
46187: MINUS
46188: PUSH
46189: LD_VAR 0 2
46193: PLUS
46194: ST_TO_ADDR
// end ; if not length then
46195: LD_VAR 0 11
46199: NOT
46200: IFFALSE 46204
// exit ;
46202: GO 46362
// tmp := array ;
46204: LD_ADDR_VAR 0 10
46208: PUSH
46209: LD_VAR 0 1
46213: ST_TO_ADDR
// for i = 1 to length do
46214: LD_ADDR_VAR 0 6
46218: PUSH
46219: DOUBLE
46220: LD_INT 1
46222: DEC
46223: ST_TO_ADDR
46224: LD_VAR 0 11
46228: PUSH
46229: FOR_TO
46230: IFFALSE 46350
// begin for j = 1 to array do
46232: LD_ADDR_VAR 0 7
46236: PUSH
46237: DOUBLE
46238: LD_INT 1
46240: DEC
46241: ST_TO_ADDR
46242: LD_VAR 0 1
46246: PUSH
46247: FOR_TO
46248: IFFALSE 46336
// begin k := j + d ;
46250: LD_ADDR_VAR 0 8
46254: PUSH
46255: LD_VAR 0 7
46259: PUSH
46260: LD_VAR 0 9
46264: PLUS
46265: ST_TO_ADDR
// if k > array then
46266: LD_VAR 0 8
46270: PUSH
46271: LD_VAR 0 1
46275: GREATER
46276: IFFALSE 46286
// k := 1 ;
46278: LD_ADDR_VAR 0 8
46282: PUSH
46283: LD_INT 1
46285: ST_TO_ADDR
// if not k then
46286: LD_VAR 0 8
46290: NOT
46291: IFFALSE 46303
// k := array ;
46293: LD_ADDR_VAR 0 8
46297: PUSH
46298: LD_VAR 0 1
46302: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46303: LD_ADDR_VAR 0 10
46307: PUSH
46308: LD_VAR 0 10
46312: PPUSH
46313: LD_VAR 0 8
46317: PPUSH
46318: LD_VAR 0 1
46322: PUSH
46323: LD_VAR 0 7
46327: ARRAY
46328: PPUSH
46329: CALL_OW 1
46333: ST_TO_ADDR
// end ;
46334: GO 46247
46336: POP
46337: POP
// array := tmp ;
46338: LD_ADDR_VAR 0 1
46342: PUSH
46343: LD_VAR 0 10
46347: ST_TO_ADDR
// end ;
46348: GO 46229
46350: POP
46351: POP
// result := array ;
46352: LD_ADDR_VAR 0 5
46356: PUSH
46357: LD_VAR 0 1
46361: ST_TO_ADDR
// end ;
46362: LD_VAR 0 5
46366: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46367: LD_INT 0
46369: PPUSH
46370: PPUSH
// result := 0 ;
46371: LD_ADDR_VAR 0 3
46375: PUSH
46376: LD_INT 0
46378: ST_TO_ADDR
// if not array or not value in array then
46379: LD_VAR 0 1
46383: NOT
46384: PUSH
46385: LD_VAR 0 2
46389: PUSH
46390: LD_VAR 0 1
46394: IN
46395: NOT
46396: OR
46397: IFFALSE 46401
// exit ;
46399: GO 46455
// for i = 1 to array do
46401: LD_ADDR_VAR 0 4
46405: PUSH
46406: DOUBLE
46407: LD_INT 1
46409: DEC
46410: ST_TO_ADDR
46411: LD_VAR 0 1
46415: PUSH
46416: FOR_TO
46417: IFFALSE 46453
// if value = array [ i ] then
46419: LD_VAR 0 2
46423: PUSH
46424: LD_VAR 0 1
46428: PUSH
46429: LD_VAR 0 4
46433: ARRAY
46434: EQUAL
46435: IFFALSE 46451
// begin result := i ;
46437: LD_ADDR_VAR 0 3
46441: PUSH
46442: LD_VAR 0 4
46446: ST_TO_ADDR
// exit ;
46447: POP
46448: POP
46449: GO 46455
// end ;
46451: GO 46416
46453: POP
46454: POP
// end ;
46455: LD_VAR 0 3
46459: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46460: LD_INT 0
46462: PPUSH
// vc_chassis := chassis ;
46463: LD_ADDR_OWVAR 37
46467: PUSH
46468: LD_VAR 0 1
46472: ST_TO_ADDR
// vc_engine := engine ;
46473: LD_ADDR_OWVAR 39
46477: PUSH
46478: LD_VAR 0 2
46482: ST_TO_ADDR
// vc_control := control ;
46483: LD_ADDR_OWVAR 38
46487: PUSH
46488: LD_VAR 0 3
46492: ST_TO_ADDR
// vc_weapon := weapon ;
46493: LD_ADDR_OWVAR 40
46497: PUSH
46498: LD_VAR 0 4
46502: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46503: LD_ADDR_OWVAR 41
46507: PUSH
46508: LD_VAR 0 5
46512: ST_TO_ADDR
// end ;
46513: LD_VAR 0 6
46517: RET
// export function WantPlant ( unit ) ; var task ; begin
46518: LD_INT 0
46520: PPUSH
46521: PPUSH
// result := false ;
46522: LD_ADDR_VAR 0 2
46526: PUSH
46527: LD_INT 0
46529: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46530: LD_ADDR_VAR 0 3
46534: PUSH
46535: LD_VAR 0 1
46539: PPUSH
46540: CALL_OW 437
46544: ST_TO_ADDR
// if task then
46545: LD_VAR 0 3
46549: IFFALSE 46577
// if task [ 1 ] [ 1 ] = p then
46551: LD_VAR 0 3
46555: PUSH
46556: LD_INT 1
46558: ARRAY
46559: PUSH
46560: LD_INT 1
46562: ARRAY
46563: PUSH
46564: LD_STRING p
46566: EQUAL
46567: IFFALSE 46577
// result := true ;
46569: LD_ADDR_VAR 0 2
46573: PUSH
46574: LD_INT 1
46576: ST_TO_ADDR
// end ;
46577: LD_VAR 0 2
46581: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46582: LD_INT 0
46584: PPUSH
46585: PPUSH
46586: PPUSH
46587: PPUSH
// if pos < 1 then
46588: LD_VAR 0 2
46592: PUSH
46593: LD_INT 1
46595: LESS
46596: IFFALSE 46600
// exit ;
46598: GO 46903
// if pos = 1 then
46600: LD_VAR 0 2
46604: PUSH
46605: LD_INT 1
46607: EQUAL
46608: IFFALSE 46641
// result := Replace ( arr , pos [ 1 ] , value ) else
46610: LD_ADDR_VAR 0 4
46614: PUSH
46615: LD_VAR 0 1
46619: PPUSH
46620: LD_VAR 0 2
46624: PUSH
46625: LD_INT 1
46627: ARRAY
46628: PPUSH
46629: LD_VAR 0 3
46633: PPUSH
46634: CALL_OW 1
46638: ST_TO_ADDR
46639: GO 46903
// begin tmp := arr ;
46641: LD_ADDR_VAR 0 6
46645: PUSH
46646: LD_VAR 0 1
46650: ST_TO_ADDR
// s_arr := [ tmp ] ;
46651: LD_ADDR_VAR 0 7
46655: PUSH
46656: LD_VAR 0 6
46660: PUSH
46661: EMPTY
46662: LIST
46663: ST_TO_ADDR
// for i = 1 to pos - 1 do
46664: LD_ADDR_VAR 0 5
46668: PUSH
46669: DOUBLE
46670: LD_INT 1
46672: DEC
46673: ST_TO_ADDR
46674: LD_VAR 0 2
46678: PUSH
46679: LD_INT 1
46681: MINUS
46682: PUSH
46683: FOR_TO
46684: IFFALSE 46729
// begin tmp := tmp [ pos [ i ] ] ;
46686: LD_ADDR_VAR 0 6
46690: PUSH
46691: LD_VAR 0 6
46695: PUSH
46696: LD_VAR 0 2
46700: PUSH
46701: LD_VAR 0 5
46705: ARRAY
46706: ARRAY
46707: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46708: LD_ADDR_VAR 0 7
46712: PUSH
46713: LD_VAR 0 7
46717: PUSH
46718: LD_VAR 0 6
46722: PUSH
46723: EMPTY
46724: LIST
46725: ADD
46726: ST_TO_ADDR
// end ;
46727: GO 46683
46729: POP
46730: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46731: LD_ADDR_VAR 0 6
46735: PUSH
46736: LD_VAR 0 6
46740: PPUSH
46741: LD_VAR 0 2
46745: PUSH
46746: LD_VAR 0 2
46750: ARRAY
46751: PPUSH
46752: LD_VAR 0 3
46756: PPUSH
46757: CALL_OW 1
46761: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46762: LD_ADDR_VAR 0 7
46766: PUSH
46767: LD_VAR 0 7
46771: PPUSH
46772: LD_VAR 0 7
46776: PPUSH
46777: LD_VAR 0 6
46781: PPUSH
46782: CALL_OW 1
46786: ST_TO_ADDR
// for i = s_arr downto 2 do
46787: LD_ADDR_VAR 0 5
46791: PUSH
46792: DOUBLE
46793: LD_VAR 0 7
46797: INC
46798: ST_TO_ADDR
46799: LD_INT 2
46801: PUSH
46802: FOR_DOWNTO
46803: IFFALSE 46887
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46805: LD_ADDR_VAR 0 6
46809: PUSH
46810: LD_VAR 0 7
46814: PUSH
46815: LD_VAR 0 5
46819: PUSH
46820: LD_INT 1
46822: MINUS
46823: ARRAY
46824: PPUSH
46825: LD_VAR 0 2
46829: PUSH
46830: LD_VAR 0 5
46834: PUSH
46835: LD_INT 1
46837: MINUS
46838: ARRAY
46839: PPUSH
46840: LD_VAR 0 7
46844: PUSH
46845: LD_VAR 0 5
46849: ARRAY
46850: PPUSH
46851: CALL_OW 1
46855: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46856: LD_ADDR_VAR 0 7
46860: PUSH
46861: LD_VAR 0 7
46865: PPUSH
46866: LD_VAR 0 5
46870: PUSH
46871: LD_INT 1
46873: MINUS
46874: PPUSH
46875: LD_VAR 0 6
46879: PPUSH
46880: CALL_OW 1
46884: ST_TO_ADDR
// end ;
46885: GO 46802
46887: POP
46888: POP
// result := s_arr [ 1 ] ;
46889: LD_ADDR_VAR 0 4
46893: PUSH
46894: LD_VAR 0 7
46898: PUSH
46899: LD_INT 1
46901: ARRAY
46902: ST_TO_ADDR
// end ; end ;
46903: LD_VAR 0 4
46907: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46908: LD_INT 0
46910: PPUSH
46911: PPUSH
// if not list then
46912: LD_VAR 0 1
46916: NOT
46917: IFFALSE 46921
// exit ;
46919: GO 47012
// i := list [ pos1 ] ;
46921: LD_ADDR_VAR 0 5
46925: PUSH
46926: LD_VAR 0 1
46930: PUSH
46931: LD_VAR 0 2
46935: ARRAY
46936: ST_TO_ADDR
// if not i then
46937: LD_VAR 0 5
46941: NOT
46942: IFFALSE 46946
// exit ;
46944: GO 47012
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46946: LD_ADDR_VAR 0 1
46950: PUSH
46951: LD_VAR 0 1
46955: PPUSH
46956: LD_VAR 0 2
46960: PPUSH
46961: LD_VAR 0 1
46965: PUSH
46966: LD_VAR 0 3
46970: ARRAY
46971: PPUSH
46972: CALL_OW 1
46976: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46977: LD_ADDR_VAR 0 1
46981: PUSH
46982: LD_VAR 0 1
46986: PPUSH
46987: LD_VAR 0 3
46991: PPUSH
46992: LD_VAR 0 5
46996: PPUSH
46997: CALL_OW 1
47001: ST_TO_ADDR
// result := list ;
47002: LD_ADDR_VAR 0 4
47006: PUSH
47007: LD_VAR 0 1
47011: ST_TO_ADDR
// end ;
47012: LD_VAR 0 4
47016: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47017: LD_INT 0
47019: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47020: LD_ADDR_VAR 0 5
47024: PUSH
47025: LD_VAR 0 1
47029: PPUSH
47030: CALL_OW 250
47034: PPUSH
47035: LD_VAR 0 1
47039: PPUSH
47040: CALL_OW 251
47044: PPUSH
47045: LD_VAR 0 2
47049: PPUSH
47050: LD_VAR 0 3
47054: PPUSH
47055: LD_VAR 0 4
47059: PPUSH
47060: CALL 47070 0 5
47064: ST_TO_ADDR
// end ;
47065: LD_VAR 0 5
47069: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47070: LD_INT 0
47072: PPUSH
47073: PPUSH
47074: PPUSH
47075: PPUSH
// if not list then
47076: LD_VAR 0 3
47080: NOT
47081: IFFALSE 47085
// exit ;
47083: GO 47473
// result := [ ] ;
47085: LD_ADDR_VAR 0 6
47089: PUSH
47090: EMPTY
47091: ST_TO_ADDR
// for i in list do
47092: LD_ADDR_VAR 0 7
47096: PUSH
47097: LD_VAR 0 3
47101: PUSH
47102: FOR_IN
47103: IFFALSE 47305
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47105: LD_ADDR_VAR 0 9
47109: PUSH
47110: LD_VAR 0 7
47114: PPUSH
47115: LD_VAR 0 1
47119: PPUSH
47120: LD_VAR 0 2
47124: PPUSH
47125: CALL_OW 297
47129: ST_TO_ADDR
// if not result then
47130: LD_VAR 0 6
47134: NOT
47135: IFFALSE 47161
// result := [ [ i , tmp ] ] else
47137: LD_ADDR_VAR 0 6
47141: PUSH
47142: LD_VAR 0 7
47146: PUSH
47147: LD_VAR 0 9
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: EMPTY
47157: LIST
47158: ST_TO_ADDR
47159: GO 47303
// begin if result [ result ] [ 2 ] < tmp then
47161: LD_VAR 0 6
47165: PUSH
47166: LD_VAR 0 6
47170: ARRAY
47171: PUSH
47172: LD_INT 2
47174: ARRAY
47175: PUSH
47176: LD_VAR 0 9
47180: LESS
47181: IFFALSE 47223
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47183: LD_ADDR_VAR 0 6
47187: PUSH
47188: LD_VAR 0 6
47192: PPUSH
47193: LD_VAR 0 6
47197: PUSH
47198: LD_INT 1
47200: PLUS
47201: PPUSH
47202: LD_VAR 0 7
47206: PUSH
47207: LD_VAR 0 9
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PPUSH
47216: CALL_OW 2
47220: ST_TO_ADDR
47221: GO 47303
// for j = 1 to result do
47223: LD_ADDR_VAR 0 8
47227: PUSH
47228: DOUBLE
47229: LD_INT 1
47231: DEC
47232: ST_TO_ADDR
47233: LD_VAR 0 6
47237: PUSH
47238: FOR_TO
47239: IFFALSE 47301
// begin if tmp < result [ j ] [ 2 ] then
47241: LD_VAR 0 9
47245: PUSH
47246: LD_VAR 0 6
47250: PUSH
47251: LD_VAR 0 8
47255: ARRAY
47256: PUSH
47257: LD_INT 2
47259: ARRAY
47260: LESS
47261: IFFALSE 47299
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47263: LD_ADDR_VAR 0 6
47267: PUSH
47268: LD_VAR 0 6
47272: PPUSH
47273: LD_VAR 0 8
47277: PPUSH
47278: LD_VAR 0 7
47282: PUSH
47283: LD_VAR 0 9
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PPUSH
47292: CALL_OW 2
47296: ST_TO_ADDR
// break ;
47297: GO 47301
// end ; end ;
47299: GO 47238
47301: POP
47302: POP
// end ; end ;
47303: GO 47102
47305: POP
47306: POP
// if result and not asc then
47307: LD_VAR 0 6
47311: PUSH
47312: LD_VAR 0 4
47316: NOT
47317: AND
47318: IFFALSE 47393
// begin tmp := result ;
47320: LD_ADDR_VAR 0 9
47324: PUSH
47325: LD_VAR 0 6
47329: ST_TO_ADDR
// for i = tmp downto 1 do
47330: LD_ADDR_VAR 0 7
47334: PUSH
47335: DOUBLE
47336: LD_VAR 0 9
47340: INC
47341: ST_TO_ADDR
47342: LD_INT 1
47344: PUSH
47345: FOR_DOWNTO
47346: IFFALSE 47391
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47348: LD_ADDR_VAR 0 6
47352: PUSH
47353: LD_VAR 0 6
47357: PPUSH
47358: LD_VAR 0 9
47362: PUSH
47363: LD_VAR 0 7
47367: MINUS
47368: PUSH
47369: LD_INT 1
47371: PLUS
47372: PPUSH
47373: LD_VAR 0 9
47377: PUSH
47378: LD_VAR 0 7
47382: ARRAY
47383: PPUSH
47384: CALL_OW 1
47388: ST_TO_ADDR
47389: GO 47345
47391: POP
47392: POP
// end ; tmp := [ ] ;
47393: LD_ADDR_VAR 0 9
47397: PUSH
47398: EMPTY
47399: ST_TO_ADDR
// if mode then
47400: LD_VAR 0 5
47404: IFFALSE 47473
// begin for i = 1 to result do
47406: LD_ADDR_VAR 0 7
47410: PUSH
47411: DOUBLE
47412: LD_INT 1
47414: DEC
47415: ST_TO_ADDR
47416: LD_VAR 0 6
47420: PUSH
47421: FOR_TO
47422: IFFALSE 47461
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47424: LD_ADDR_VAR 0 9
47428: PUSH
47429: LD_VAR 0 9
47433: PPUSH
47434: LD_VAR 0 7
47438: PPUSH
47439: LD_VAR 0 6
47443: PUSH
47444: LD_VAR 0 7
47448: ARRAY
47449: PUSH
47450: LD_INT 1
47452: ARRAY
47453: PPUSH
47454: CALL_OW 1
47458: ST_TO_ADDR
47459: GO 47421
47461: POP
47462: POP
// result := tmp ;
47463: LD_ADDR_VAR 0 6
47467: PUSH
47468: LD_VAR 0 9
47472: ST_TO_ADDR
// end ; end ;
47473: LD_VAR 0 6
47477: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47478: LD_INT 0
47480: PPUSH
47481: PPUSH
47482: PPUSH
47483: PPUSH
47484: PPUSH
47485: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47486: LD_ADDR_VAR 0 5
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: ST_TO_ADDR
// if not x or not y then
47508: LD_VAR 0 2
47512: NOT
47513: PUSH
47514: LD_VAR 0 3
47518: NOT
47519: OR
47520: IFFALSE 47524
// exit ;
47522: GO 49174
// if not range then
47524: LD_VAR 0 4
47528: NOT
47529: IFFALSE 47539
// range := 10 ;
47531: LD_ADDR_VAR 0 4
47535: PUSH
47536: LD_INT 10
47538: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47539: LD_ADDR_VAR 0 8
47543: PUSH
47544: LD_INT 81
47546: PUSH
47547: LD_VAR 0 1
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 92
47558: PUSH
47559: LD_VAR 0 2
47563: PUSH
47564: LD_VAR 0 3
47568: PUSH
47569: LD_VAR 0 4
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 3
47582: PUSH
47583: LD_INT 21
47585: PUSH
47586: LD_INT 3
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: LIST
47601: PPUSH
47602: CALL_OW 69
47606: ST_TO_ADDR
// if not tmp then
47607: LD_VAR 0 8
47611: NOT
47612: IFFALSE 47616
// exit ;
47614: GO 49174
// for i in tmp do
47616: LD_ADDR_VAR 0 6
47620: PUSH
47621: LD_VAR 0 8
47625: PUSH
47626: FOR_IN
47627: IFFALSE 49149
// begin points := [ 0 , 0 , 0 ] ;
47629: LD_ADDR_VAR 0 9
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: LIST
47647: ST_TO_ADDR
// bpoints := 1 ;
47648: LD_ADDR_VAR 0 10
47652: PUSH
47653: LD_INT 1
47655: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47656: LD_VAR 0 6
47660: PPUSH
47661: CALL_OW 247
47665: PUSH
47666: LD_INT 1
47668: DOUBLE
47669: EQUAL
47670: IFTRUE 47674
47672: GO 48252
47674: POP
// begin if GetClass ( i ) = 1 then
47675: LD_VAR 0 6
47679: PPUSH
47680: CALL_OW 257
47684: PUSH
47685: LD_INT 1
47687: EQUAL
47688: IFFALSE 47709
// points := [ 10 , 5 , 3 ] ;
47690: LD_ADDR_VAR 0 9
47694: PUSH
47695: LD_INT 10
47697: PUSH
47698: LD_INT 5
47700: PUSH
47701: LD_INT 3
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47709: LD_VAR 0 6
47713: PPUSH
47714: CALL_OW 257
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: LD_INT 3
47724: PUSH
47725: LD_INT 4
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: LIST
47732: IN
47733: IFFALSE 47754
// points := [ 3 , 2 , 1 ] ;
47735: LD_ADDR_VAR 0 9
47739: PUSH
47740: LD_INT 3
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: LIST
47753: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47754: LD_VAR 0 6
47758: PPUSH
47759: CALL_OW 257
47763: PUSH
47764: LD_INT 5
47766: EQUAL
47767: IFFALSE 47788
// points := [ 130 , 5 , 2 ] ;
47769: LD_ADDR_VAR 0 9
47773: PUSH
47774: LD_INT 130
47776: PUSH
47777: LD_INT 5
47779: PUSH
47780: LD_INT 2
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: LIST
47787: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47788: LD_VAR 0 6
47792: PPUSH
47793: CALL_OW 257
47797: PUSH
47798: LD_INT 8
47800: EQUAL
47801: IFFALSE 47822
// points := [ 35 , 35 , 30 ] ;
47803: LD_ADDR_VAR 0 9
47807: PUSH
47808: LD_INT 35
47810: PUSH
47811: LD_INT 35
47813: PUSH
47814: LD_INT 30
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: LIST
47821: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47822: LD_VAR 0 6
47826: PPUSH
47827: CALL_OW 257
47831: PUSH
47832: LD_INT 9
47834: EQUAL
47835: IFFALSE 47856
// points := [ 20 , 55 , 40 ] ;
47837: LD_ADDR_VAR 0 9
47841: PUSH
47842: LD_INT 20
47844: PUSH
47845: LD_INT 55
47847: PUSH
47848: LD_INT 40
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47856: LD_VAR 0 6
47860: PPUSH
47861: CALL_OW 257
47865: PUSH
47866: LD_INT 12
47868: PUSH
47869: LD_INT 16
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: IN
47876: IFFALSE 47897
// points := [ 5 , 3 , 2 ] ;
47878: LD_ADDR_VAR 0 9
47882: PUSH
47883: LD_INT 5
47885: PUSH
47886: LD_INT 3
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: LIST
47896: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47897: LD_VAR 0 6
47901: PPUSH
47902: CALL_OW 257
47906: PUSH
47907: LD_INT 17
47909: EQUAL
47910: IFFALSE 47931
// points := [ 100 , 50 , 75 ] ;
47912: LD_ADDR_VAR 0 9
47916: PUSH
47917: LD_INT 100
47919: PUSH
47920: LD_INT 50
47922: PUSH
47923: LD_INT 75
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: LIST
47930: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47931: LD_VAR 0 6
47935: PPUSH
47936: CALL_OW 257
47940: PUSH
47941: LD_INT 15
47943: EQUAL
47944: IFFALSE 47965
// points := [ 10 , 5 , 3 ] ;
47946: LD_ADDR_VAR 0 9
47950: PUSH
47951: LD_INT 10
47953: PUSH
47954: LD_INT 5
47956: PUSH
47957: LD_INT 3
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: LIST
47964: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47965: LD_VAR 0 6
47969: PPUSH
47970: CALL_OW 257
47974: PUSH
47975: LD_INT 14
47977: EQUAL
47978: IFFALSE 47999
// points := [ 10 , 0 , 0 ] ;
47980: LD_ADDR_VAR 0 9
47984: PUSH
47985: LD_INT 10
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: LIST
47998: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47999: LD_VAR 0 6
48003: PPUSH
48004: CALL_OW 257
48008: PUSH
48009: LD_INT 11
48011: EQUAL
48012: IFFALSE 48033
// points := [ 30 , 10 , 5 ] ;
48014: LD_ADDR_VAR 0 9
48018: PUSH
48019: LD_INT 30
48021: PUSH
48022: LD_INT 10
48024: PUSH
48025: LD_INT 5
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: LIST
48032: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48033: LD_VAR 0 1
48037: PPUSH
48038: LD_INT 5
48040: PPUSH
48041: CALL_OW 321
48045: PUSH
48046: LD_INT 2
48048: EQUAL
48049: IFFALSE 48066
// bpoints := bpoints * 1.8 ;
48051: LD_ADDR_VAR 0 10
48055: PUSH
48056: LD_VAR 0 10
48060: PUSH
48061: LD_REAL  1.80000000000000E+0000
48064: MUL
48065: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48066: LD_VAR 0 6
48070: PPUSH
48071: CALL_OW 257
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: LD_INT 3
48084: PUSH
48085: LD_INT 4
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: IN
48094: PUSH
48095: LD_VAR 0 1
48099: PPUSH
48100: LD_INT 51
48102: PPUSH
48103: CALL_OW 321
48107: PUSH
48108: LD_INT 2
48110: EQUAL
48111: AND
48112: IFFALSE 48129
// bpoints := bpoints * 1.2 ;
48114: LD_ADDR_VAR 0 10
48118: PUSH
48119: LD_VAR 0 10
48123: PUSH
48124: LD_REAL  1.20000000000000E+0000
48127: MUL
48128: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48129: LD_VAR 0 6
48133: PPUSH
48134: CALL_OW 257
48138: PUSH
48139: LD_INT 5
48141: PUSH
48142: LD_INT 7
48144: PUSH
48145: LD_INT 9
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: LIST
48152: IN
48153: PUSH
48154: LD_VAR 0 1
48158: PPUSH
48159: LD_INT 52
48161: PPUSH
48162: CALL_OW 321
48166: PUSH
48167: LD_INT 2
48169: EQUAL
48170: AND
48171: IFFALSE 48188
// bpoints := bpoints * 1.5 ;
48173: LD_ADDR_VAR 0 10
48177: PUSH
48178: LD_VAR 0 10
48182: PUSH
48183: LD_REAL  1.50000000000000E+0000
48186: MUL
48187: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48188: LD_VAR 0 1
48192: PPUSH
48193: LD_INT 66
48195: PPUSH
48196: CALL_OW 321
48200: PUSH
48201: LD_INT 2
48203: EQUAL
48204: IFFALSE 48221
// bpoints := bpoints * 1.1 ;
48206: LD_ADDR_VAR 0 10
48210: PUSH
48211: LD_VAR 0 10
48215: PUSH
48216: LD_REAL  1.10000000000000E+0000
48219: MUL
48220: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48221: LD_ADDR_VAR 0 10
48225: PUSH
48226: LD_VAR 0 10
48230: PUSH
48231: LD_VAR 0 6
48235: PPUSH
48236: LD_INT 1
48238: PPUSH
48239: CALL_OW 259
48243: PUSH
48244: LD_REAL  1.15000000000000E+0000
48247: MUL
48248: MUL
48249: ST_TO_ADDR
// end ; unit_vehicle :
48250: GO 49078
48252: LD_INT 2
48254: DOUBLE
48255: EQUAL
48256: IFTRUE 48260
48258: GO 49066
48260: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48261: LD_VAR 0 6
48265: PPUSH
48266: CALL_OW 264
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: LD_INT 42
48276: PUSH
48277: LD_INT 24
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: LIST
48284: IN
48285: IFFALSE 48306
// points := [ 25 , 5 , 3 ] ;
48287: LD_ADDR_VAR 0 9
48291: PUSH
48292: LD_INT 25
48294: PUSH
48295: LD_INT 5
48297: PUSH
48298: LD_INT 3
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48306: LD_VAR 0 6
48310: PPUSH
48311: CALL_OW 264
48315: PUSH
48316: LD_INT 4
48318: PUSH
48319: LD_INT 43
48321: PUSH
48322: LD_INT 25
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: LIST
48329: IN
48330: IFFALSE 48351
// points := [ 40 , 15 , 5 ] ;
48332: LD_ADDR_VAR 0 9
48336: PUSH
48337: LD_INT 40
48339: PUSH
48340: LD_INT 15
48342: PUSH
48343: LD_INT 5
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: LIST
48350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48351: LD_VAR 0 6
48355: PPUSH
48356: CALL_OW 264
48360: PUSH
48361: LD_INT 3
48363: PUSH
48364: LD_INT 23
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: IN
48371: IFFALSE 48392
// points := [ 7 , 25 , 8 ] ;
48373: LD_ADDR_VAR 0 9
48377: PUSH
48378: LD_INT 7
48380: PUSH
48381: LD_INT 25
48383: PUSH
48384: LD_INT 8
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: LIST
48391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48392: LD_VAR 0 6
48396: PPUSH
48397: CALL_OW 264
48401: PUSH
48402: LD_INT 5
48404: PUSH
48405: LD_INT 27
48407: PUSH
48408: LD_INT 44
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: LIST
48415: IN
48416: IFFALSE 48437
// points := [ 14 , 50 , 16 ] ;
48418: LD_ADDR_VAR 0 9
48422: PUSH
48423: LD_INT 14
48425: PUSH
48426: LD_INT 50
48428: PUSH
48429: LD_INT 16
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: LIST
48436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48437: LD_VAR 0 6
48441: PPUSH
48442: CALL_OW 264
48446: PUSH
48447: LD_INT 6
48449: PUSH
48450: LD_INT 46
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: IN
48457: IFFALSE 48478
// points := [ 32 , 120 , 70 ] ;
48459: LD_ADDR_VAR 0 9
48463: PUSH
48464: LD_INT 32
48466: PUSH
48467: LD_INT 120
48469: PUSH
48470: LD_INT 70
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: LIST
48477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48478: LD_VAR 0 6
48482: PPUSH
48483: CALL_OW 264
48487: PUSH
48488: LD_INT 7
48490: PUSH
48491: LD_INT 28
48493: PUSH
48494: LD_INT 45
48496: PUSH
48497: LD_INT 92
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: IN
48506: IFFALSE 48527
// points := [ 35 , 20 , 45 ] ;
48508: LD_ADDR_VAR 0 9
48512: PUSH
48513: LD_INT 35
48515: PUSH
48516: LD_INT 20
48518: PUSH
48519: LD_INT 45
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: LIST
48526: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48527: LD_VAR 0 6
48531: PPUSH
48532: CALL_OW 264
48536: PUSH
48537: LD_INT 47
48539: PUSH
48540: EMPTY
48541: LIST
48542: IN
48543: IFFALSE 48564
// points := [ 67 , 45 , 75 ] ;
48545: LD_ADDR_VAR 0 9
48549: PUSH
48550: LD_INT 67
48552: PUSH
48553: LD_INT 45
48555: PUSH
48556: LD_INT 75
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: LIST
48563: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48564: LD_VAR 0 6
48568: PPUSH
48569: CALL_OW 264
48573: PUSH
48574: LD_INT 26
48576: PUSH
48577: EMPTY
48578: LIST
48579: IN
48580: IFFALSE 48601
// points := [ 120 , 30 , 80 ] ;
48582: LD_ADDR_VAR 0 9
48586: PUSH
48587: LD_INT 120
48589: PUSH
48590: LD_INT 30
48592: PUSH
48593: LD_INT 80
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: LIST
48600: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48601: LD_VAR 0 6
48605: PPUSH
48606: CALL_OW 264
48610: PUSH
48611: LD_INT 22
48613: PUSH
48614: EMPTY
48615: LIST
48616: IN
48617: IFFALSE 48638
// points := [ 40 , 1 , 1 ] ;
48619: LD_ADDR_VAR 0 9
48623: PUSH
48624: LD_INT 40
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: LIST
48637: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48638: LD_VAR 0 6
48642: PPUSH
48643: CALL_OW 264
48647: PUSH
48648: LD_INT 29
48650: PUSH
48651: EMPTY
48652: LIST
48653: IN
48654: IFFALSE 48675
// points := [ 70 , 200 , 400 ] ;
48656: LD_ADDR_VAR 0 9
48660: PUSH
48661: LD_INT 70
48663: PUSH
48664: LD_INT 200
48666: PUSH
48667: LD_INT 400
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: LIST
48674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48675: LD_VAR 0 6
48679: PPUSH
48680: CALL_OW 264
48684: PUSH
48685: LD_INT 14
48687: PUSH
48688: LD_INT 53
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: IN
48695: IFFALSE 48716
// points := [ 40 , 10 , 20 ] ;
48697: LD_ADDR_VAR 0 9
48701: PUSH
48702: LD_INT 40
48704: PUSH
48705: LD_INT 10
48707: PUSH
48708: LD_INT 20
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: LIST
48715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48716: LD_VAR 0 6
48720: PPUSH
48721: CALL_OW 264
48725: PUSH
48726: LD_INT 9
48728: PUSH
48729: EMPTY
48730: LIST
48731: IN
48732: IFFALSE 48753
// points := [ 5 , 70 , 20 ] ;
48734: LD_ADDR_VAR 0 9
48738: PUSH
48739: LD_INT 5
48741: PUSH
48742: LD_INT 70
48744: PUSH
48745: LD_INT 20
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48753: LD_VAR 0 6
48757: PPUSH
48758: CALL_OW 264
48762: PUSH
48763: LD_INT 10
48765: PUSH
48766: EMPTY
48767: LIST
48768: IN
48769: IFFALSE 48790
// points := [ 35 , 110 , 70 ] ;
48771: LD_ADDR_VAR 0 9
48775: PUSH
48776: LD_INT 35
48778: PUSH
48779: LD_INT 110
48781: PUSH
48782: LD_INT 70
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: LIST
48789: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48790: LD_VAR 0 6
48794: PPUSH
48795: CALL_OW 265
48799: PUSH
48800: LD_INT 25
48802: EQUAL
48803: IFFALSE 48824
// points := [ 80 , 65 , 100 ] ;
48805: LD_ADDR_VAR 0 9
48809: PUSH
48810: LD_INT 80
48812: PUSH
48813: LD_INT 65
48815: PUSH
48816: LD_INT 100
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: LIST
48823: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48824: LD_VAR 0 6
48828: PPUSH
48829: CALL_OW 263
48833: PUSH
48834: LD_INT 1
48836: EQUAL
48837: IFFALSE 48872
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48839: LD_ADDR_VAR 0 10
48843: PUSH
48844: LD_VAR 0 10
48848: PUSH
48849: LD_VAR 0 6
48853: PPUSH
48854: CALL_OW 311
48858: PPUSH
48859: LD_INT 3
48861: PPUSH
48862: CALL_OW 259
48866: PUSH
48867: LD_INT 4
48869: MUL
48870: MUL
48871: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48872: LD_VAR 0 6
48876: PPUSH
48877: CALL_OW 263
48881: PUSH
48882: LD_INT 2
48884: EQUAL
48885: IFFALSE 48936
// begin j := IsControledBy ( i ) ;
48887: LD_ADDR_VAR 0 7
48891: PUSH
48892: LD_VAR 0 6
48896: PPUSH
48897: CALL_OW 312
48901: ST_TO_ADDR
// if j then
48902: LD_VAR 0 7
48906: IFFALSE 48936
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48908: LD_ADDR_VAR 0 10
48912: PUSH
48913: LD_VAR 0 10
48917: PUSH
48918: LD_VAR 0 7
48922: PPUSH
48923: LD_INT 3
48925: PPUSH
48926: CALL_OW 259
48930: PUSH
48931: LD_INT 3
48933: MUL
48934: MUL
48935: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48936: LD_VAR 0 6
48940: PPUSH
48941: CALL_OW 264
48945: PUSH
48946: LD_INT 5
48948: PUSH
48949: LD_INT 6
48951: PUSH
48952: LD_INT 46
48954: PUSH
48955: LD_INT 44
48957: PUSH
48958: LD_INT 47
48960: PUSH
48961: LD_INT 45
48963: PUSH
48964: LD_INT 28
48966: PUSH
48967: LD_INT 7
48969: PUSH
48970: LD_INT 27
48972: PUSH
48973: LD_INT 29
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: IN
48988: PUSH
48989: LD_VAR 0 1
48993: PPUSH
48994: LD_INT 52
48996: PPUSH
48997: CALL_OW 321
49001: PUSH
49002: LD_INT 2
49004: EQUAL
49005: AND
49006: IFFALSE 49023
// bpoints := bpoints * 1.2 ;
49008: LD_ADDR_VAR 0 10
49012: PUSH
49013: LD_VAR 0 10
49017: PUSH
49018: LD_REAL  1.20000000000000E+0000
49021: MUL
49022: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49023: LD_VAR 0 6
49027: PPUSH
49028: CALL_OW 264
49032: PUSH
49033: LD_INT 6
49035: PUSH
49036: LD_INT 46
49038: PUSH
49039: LD_INT 47
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: LIST
49046: IN
49047: IFFALSE 49064
// bpoints := bpoints * 1.2 ;
49049: LD_ADDR_VAR 0 10
49053: PUSH
49054: LD_VAR 0 10
49058: PUSH
49059: LD_REAL  1.20000000000000E+0000
49062: MUL
49063: ST_TO_ADDR
// end ; unit_building :
49064: GO 49078
49066: LD_INT 3
49068: DOUBLE
49069: EQUAL
49070: IFTRUE 49074
49072: GO 49077
49074: POP
// ; end ;
49075: GO 49078
49077: POP
// for j = 1 to 3 do
49078: LD_ADDR_VAR 0 7
49082: PUSH
49083: DOUBLE
49084: LD_INT 1
49086: DEC
49087: ST_TO_ADDR
49088: LD_INT 3
49090: PUSH
49091: FOR_TO
49092: IFFALSE 49145
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49094: LD_ADDR_VAR 0 5
49098: PUSH
49099: LD_VAR 0 5
49103: PPUSH
49104: LD_VAR 0 7
49108: PPUSH
49109: LD_VAR 0 5
49113: PUSH
49114: LD_VAR 0 7
49118: ARRAY
49119: PUSH
49120: LD_VAR 0 9
49124: PUSH
49125: LD_VAR 0 7
49129: ARRAY
49130: PUSH
49131: LD_VAR 0 10
49135: MUL
49136: PLUS
49137: PPUSH
49138: CALL_OW 1
49142: ST_TO_ADDR
49143: GO 49091
49145: POP
49146: POP
// end ;
49147: GO 47626
49149: POP
49150: POP
// result := Replace ( result , 4 , tmp ) ;
49151: LD_ADDR_VAR 0 5
49155: PUSH
49156: LD_VAR 0 5
49160: PPUSH
49161: LD_INT 4
49163: PPUSH
49164: LD_VAR 0 8
49168: PPUSH
49169: CALL_OW 1
49173: ST_TO_ADDR
// end ;
49174: LD_VAR 0 5
49178: RET
// export function DangerAtRange ( unit , range ) ; begin
49179: LD_INT 0
49181: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49182: LD_ADDR_VAR 0 3
49186: PUSH
49187: LD_VAR 0 1
49191: PPUSH
49192: CALL_OW 255
49196: PPUSH
49197: LD_VAR 0 1
49201: PPUSH
49202: CALL_OW 250
49206: PPUSH
49207: LD_VAR 0 1
49211: PPUSH
49212: CALL_OW 251
49216: PPUSH
49217: LD_VAR 0 2
49221: PPUSH
49222: CALL 47478 0 4
49226: ST_TO_ADDR
// end ;
49227: LD_VAR 0 3
49231: RET
// export function DangerInArea ( side , area ) ; begin
49232: LD_INT 0
49234: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49235: LD_ADDR_VAR 0 3
49239: PUSH
49240: LD_VAR 0 2
49244: PPUSH
49245: LD_INT 81
49247: PUSH
49248: LD_VAR 0 1
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PPUSH
49257: CALL_OW 70
49261: ST_TO_ADDR
// end ;
49262: LD_VAR 0 3
49266: RET
// export function IsExtension ( b ) ; begin
49267: LD_INT 0
49269: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49270: LD_ADDR_VAR 0 2
49274: PUSH
49275: LD_VAR 0 1
49279: PUSH
49280: LD_INT 23
49282: PUSH
49283: LD_INT 20
49285: PUSH
49286: LD_INT 22
49288: PUSH
49289: LD_INT 17
49291: PUSH
49292: LD_INT 24
49294: PUSH
49295: LD_INT 21
49297: PUSH
49298: LD_INT 19
49300: PUSH
49301: LD_INT 16
49303: PUSH
49304: LD_INT 25
49306: PUSH
49307: LD_INT 18
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: IN
49322: ST_TO_ADDR
// end ;
49323: LD_VAR 0 2
49327: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49328: LD_INT 0
49330: PPUSH
49331: PPUSH
49332: PPUSH
// result := [ ] ;
49333: LD_ADDR_VAR 0 4
49337: PUSH
49338: EMPTY
49339: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49340: LD_ADDR_VAR 0 5
49344: PUSH
49345: LD_VAR 0 2
49349: PPUSH
49350: LD_INT 21
49352: PUSH
49353: LD_INT 3
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PPUSH
49360: CALL_OW 70
49364: ST_TO_ADDR
// if not tmp then
49365: LD_VAR 0 5
49369: NOT
49370: IFFALSE 49374
// exit ;
49372: GO 49438
// if checkLink then
49374: LD_VAR 0 3
49378: IFFALSE 49428
// begin for i in tmp do
49380: LD_ADDR_VAR 0 6
49384: PUSH
49385: LD_VAR 0 5
49389: PUSH
49390: FOR_IN
49391: IFFALSE 49426
// if GetBase ( i ) <> base then
49393: LD_VAR 0 6
49397: PPUSH
49398: CALL_OW 274
49402: PUSH
49403: LD_VAR 0 1
49407: NONEQUAL
49408: IFFALSE 49424
// ComLinkToBase ( base , i ) ;
49410: LD_VAR 0 1
49414: PPUSH
49415: LD_VAR 0 6
49419: PPUSH
49420: CALL_OW 169
49424: GO 49390
49426: POP
49427: POP
// end ; result := tmp ;
49428: LD_ADDR_VAR 0 4
49432: PUSH
49433: LD_VAR 0 5
49437: ST_TO_ADDR
// end ;
49438: LD_VAR 0 4
49442: RET
// export function ComComplete ( units , b ) ; var i ; begin
49443: LD_INT 0
49445: PPUSH
49446: PPUSH
// if not units then
49447: LD_VAR 0 1
49451: NOT
49452: IFFALSE 49456
// exit ;
49454: GO 49546
// for i in units do
49456: LD_ADDR_VAR 0 4
49460: PUSH
49461: LD_VAR 0 1
49465: PUSH
49466: FOR_IN
49467: IFFALSE 49544
// if BuildingStatus ( b ) = bs_build then
49469: LD_VAR 0 2
49473: PPUSH
49474: CALL_OW 461
49478: PUSH
49479: LD_INT 1
49481: EQUAL
49482: IFFALSE 49542
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49484: LD_VAR 0 4
49488: PPUSH
49489: LD_STRING h
49491: PUSH
49492: LD_VAR 0 2
49496: PPUSH
49497: CALL_OW 250
49501: PUSH
49502: LD_VAR 0 2
49506: PPUSH
49507: CALL_OW 251
49511: PUSH
49512: LD_VAR 0 2
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: PUSH
49535: EMPTY
49536: LIST
49537: PPUSH
49538: CALL_OW 446
49542: GO 49466
49544: POP
49545: POP
// end ;
49546: LD_VAR 0 3
49550: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49551: LD_INT 0
49553: PPUSH
49554: PPUSH
49555: PPUSH
49556: PPUSH
49557: PPUSH
49558: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49559: LD_VAR 0 1
49563: NOT
49564: PUSH
49565: LD_VAR 0 1
49569: PPUSH
49570: CALL_OW 263
49574: PUSH
49575: LD_INT 2
49577: NONEQUAL
49578: OR
49579: IFFALSE 49583
// exit ;
49581: GO 49899
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49583: LD_ADDR_VAR 0 6
49587: PUSH
49588: LD_INT 22
49590: PUSH
49591: LD_VAR 0 1
49595: PPUSH
49596: CALL_OW 255
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 2
49607: PUSH
49608: LD_INT 30
49610: PUSH
49611: LD_INT 36
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 34
49620: PUSH
49621: LD_INT 31
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: LIST
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PPUSH
49637: CALL_OW 69
49641: ST_TO_ADDR
// if not tmp then
49642: LD_VAR 0 6
49646: NOT
49647: IFFALSE 49651
// exit ;
49649: GO 49899
// result := [ ] ;
49651: LD_ADDR_VAR 0 2
49655: PUSH
49656: EMPTY
49657: ST_TO_ADDR
// for i in tmp do
49658: LD_ADDR_VAR 0 3
49662: PUSH
49663: LD_VAR 0 6
49667: PUSH
49668: FOR_IN
49669: IFFALSE 49740
// begin t := UnitsInside ( i ) ;
49671: LD_ADDR_VAR 0 4
49675: PUSH
49676: LD_VAR 0 3
49680: PPUSH
49681: CALL_OW 313
49685: ST_TO_ADDR
// if t then
49686: LD_VAR 0 4
49690: IFFALSE 49738
// for j in t do
49692: LD_ADDR_VAR 0 7
49696: PUSH
49697: LD_VAR 0 4
49701: PUSH
49702: FOR_IN
49703: IFFALSE 49736
// result := Replace ( result , result + 1 , j ) ;
49705: LD_ADDR_VAR 0 2
49709: PUSH
49710: LD_VAR 0 2
49714: PPUSH
49715: LD_VAR 0 2
49719: PUSH
49720: LD_INT 1
49722: PLUS
49723: PPUSH
49724: LD_VAR 0 7
49728: PPUSH
49729: CALL_OW 1
49733: ST_TO_ADDR
49734: GO 49702
49736: POP
49737: POP
// end ;
49738: GO 49668
49740: POP
49741: POP
// if not result then
49742: LD_VAR 0 2
49746: NOT
49747: IFFALSE 49751
// exit ;
49749: GO 49899
// mech := result [ 1 ] ;
49751: LD_ADDR_VAR 0 5
49755: PUSH
49756: LD_VAR 0 2
49760: PUSH
49761: LD_INT 1
49763: ARRAY
49764: ST_TO_ADDR
// if result > 1 then
49765: LD_VAR 0 2
49769: PUSH
49770: LD_INT 1
49772: GREATER
49773: IFFALSE 49885
// begin for i = 2 to result do
49775: LD_ADDR_VAR 0 3
49779: PUSH
49780: DOUBLE
49781: LD_INT 2
49783: DEC
49784: ST_TO_ADDR
49785: LD_VAR 0 2
49789: PUSH
49790: FOR_TO
49791: IFFALSE 49883
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49793: LD_ADDR_VAR 0 4
49797: PUSH
49798: LD_VAR 0 2
49802: PUSH
49803: LD_VAR 0 3
49807: ARRAY
49808: PPUSH
49809: LD_INT 3
49811: PPUSH
49812: CALL_OW 259
49816: PUSH
49817: LD_VAR 0 2
49821: PUSH
49822: LD_VAR 0 3
49826: ARRAY
49827: PPUSH
49828: CALL_OW 432
49832: MINUS
49833: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49834: LD_VAR 0 4
49838: PUSH
49839: LD_VAR 0 5
49843: PPUSH
49844: LD_INT 3
49846: PPUSH
49847: CALL_OW 259
49851: PUSH
49852: LD_VAR 0 5
49856: PPUSH
49857: CALL_OW 432
49861: MINUS
49862: GREATEREQUAL
49863: IFFALSE 49881
// mech := result [ i ] ;
49865: LD_ADDR_VAR 0 5
49869: PUSH
49870: LD_VAR 0 2
49874: PUSH
49875: LD_VAR 0 3
49879: ARRAY
49880: ST_TO_ADDR
// end ;
49881: GO 49790
49883: POP
49884: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49885: LD_VAR 0 1
49889: PPUSH
49890: LD_VAR 0 5
49894: PPUSH
49895: CALL_OW 135
// end ;
49899: LD_VAR 0 2
49903: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49904: LD_INT 0
49906: PPUSH
49907: PPUSH
49908: PPUSH
49909: PPUSH
49910: PPUSH
49911: PPUSH
49912: PPUSH
49913: PPUSH
49914: PPUSH
49915: PPUSH
49916: PPUSH
49917: PPUSH
49918: PPUSH
// result := [ ] ;
49919: LD_ADDR_VAR 0 7
49923: PUSH
49924: EMPTY
49925: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49926: LD_VAR 0 1
49930: PPUSH
49931: CALL_OW 266
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: IN
49946: NOT
49947: IFFALSE 49951
// exit ;
49949: GO 51585
// if name then
49951: LD_VAR 0 3
49955: IFFALSE 49971
// SetBName ( base_dep , name ) ;
49957: LD_VAR 0 1
49961: PPUSH
49962: LD_VAR 0 3
49966: PPUSH
49967: CALL_OW 500
// base := GetBase ( base_dep ) ;
49971: LD_ADDR_VAR 0 15
49975: PUSH
49976: LD_VAR 0 1
49980: PPUSH
49981: CALL_OW 274
49985: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49986: LD_ADDR_VAR 0 16
49990: PUSH
49991: LD_VAR 0 1
49995: PPUSH
49996: CALL_OW 255
50000: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50001: LD_ADDR_VAR 0 17
50005: PUSH
50006: LD_VAR 0 1
50010: PPUSH
50011: CALL_OW 248
50015: ST_TO_ADDR
// if sources then
50016: LD_VAR 0 5
50020: IFFALSE 50067
// for i = 1 to 3 do
50022: LD_ADDR_VAR 0 8
50026: PUSH
50027: DOUBLE
50028: LD_INT 1
50030: DEC
50031: ST_TO_ADDR
50032: LD_INT 3
50034: PUSH
50035: FOR_TO
50036: IFFALSE 50065
// AddResourceType ( base , i , sources [ i ] ) ;
50038: LD_VAR 0 15
50042: PPUSH
50043: LD_VAR 0 8
50047: PPUSH
50048: LD_VAR 0 5
50052: PUSH
50053: LD_VAR 0 8
50057: ARRAY
50058: PPUSH
50059: CALL_OW 276
50063: GO 50035
50065: POP
50066: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50067: LD_ADDR_VAR 0 18
50071: PUSH
50072: LD_VAR 0 15
50076: PPUSH
50077: LD_VAR 0 2
50081: PPUSH
50082: LD_INT 1
50084: PPUSH
50085: CALL 49328 0 3
50089: ST_TO_ADDR
// InitHc ;
50090: CALL_OW 19
// InitUc ;
50094: CALL_OW 18
// uc_side := side ;
50098: LD_ADDR_OWVAR 20
50102: PUSH
50103: LD_VAR 0 16
50107: ST_TO_ADDR
// uc_nation := nation ;
50108: LD_ADDR_OWVAR 21
50112: PUSH
50113: LD_VAR 0 17
50117: ST_TO_ADDR
// if buildings then
50118: LD_VAR 0 18
50122: IFFALSE 51444
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50124: LD_ADDR_VAR 0 19
50128: PUSH
50129: LD_VAR 0 18
50133: PPUSH
50134: LD_INT 2
50136: PUSH
50137: LD_INT 30
50139: PUSH
50140: LD_INT 29
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 30
50149: PUSH
50150: LD_INT 30
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: LIST
50161: PPUSH
50162: CALL_OW 72
50166: ST_TO_ADDR
// if tmp then
50167: LD_VAR 0 19
50171: IFFALSE 50219
// for i in tmp do
50173: LD_ADDR_VAR 0 8
50177: PUSH
50178: LD_VAR 0 19
50182: PUSH
50183: FOR_IN
50184: IFFALSE 50217
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50186: LD_VAR 0 8
50190: PPUSH
50191: CALL_OW 250
50195: PPUSH
50196: LD_VAR 0 8
50200: PPUSH
50201: CALL_OW 251
50205: PPUSH
50206: LD_VAR 0 16
50210: PPUSH
50211: CALL_OW 441
50215: GO 50183
50217: POP
50218: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50219: LD_VAR 0 18
50223: PPUSH
50224: LD_INT 2
50226: PUSH
50227: LD_INT 30
50229: PUSH
50230: LD_INT 32
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 30
50239: PUSH
50240: LD_INT 33
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: LIST
50251: PPUSH
50252: CALL_OW 72
50256: IFFALSE 50344
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50258: LD_ADDR_VAR 0 8
50262: PUSH
50263: LD_VAR 0 18
50267: PPUSH
50268: LD_INT 2
50270: PUSH
50271: LD_INT 30
50273: PUSH
50274: LD_INT 32
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 30
50283: PUSH
50284: LD_INT 33
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: LIST
50295: PPUSH
50296: CALL_OW 72
50300: PUSH
50301: FOR_IN
50302: IFFALSE 50342
// begin if not GetBWeapon ( i ) then
50304: LD_VAR 0 8
50308: PPUSH
50309: CALL_OW 269
50313: NOT
50314: IFFALSE 50340
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50316: LD_VAR 0 8
50320: PPUSH
50321: LD_VAR 0 8
50325: PPUSH
50326: LD_VAR 0 2
50330: PPUSH
50331: CALL 51590 0 2
50335: PPUSH
50336: CALL_OW 431
// end ;
50340: GO 50301
50342: POP
50343: POP
// end ; for i = 1 to personel do
50344: LD_ADDR_VAR 0 8
50348: PUSH
50349: DOUBLE
50350: LD_INT 1
50352: DEC
50353: ST_TO_ADDR
50354: LD_VAR 0 6
50358: PUSH
50359: FOR_TO
50360: IFFALSE 51424
// begin if i > 4 then
50362: LD_VAR 0 8
50366: PUSH
50367: LD_INT 4
50369: GREATER
50370: IFFALSE 50374
// break ;
50372: GO 51424
// case i of 1 :
50374: LD_VAR 0 8
50378: PUSH
50379: LD_INT 1
50381: DOUBLE
50382: EQUAL
50383: IFTRUE 50387
50385: GO 50467
50387: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50388: LD_ADDR_VAR 0 12
50392: PUSH
50393: LD_VAR 0 18
50397: PPUSH
50398: LD_INT 22
50400: PUSH
50401: LD_VAR 0 16
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 58
50412: PUSH
50413: EMPTY
50414: LIST
50415: PUSH
50416: LD_INT 2
50418: PUSH
50419: LD_INT 30
50421: PUSH
50422: LD_INT 32
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 30
50431: PUSH
50432: LD_INT 4
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 30
50441: PUSH
50442: LD_INT 5
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: PPUSH
50460: CALL_OW 72
50464: ST_TO_ADDR
50465: GO 50689
50467: LD_INT 2
50469: DOUBLE
50470: EQUAL
50471: IFTRUE 50475
50473: GO 50537
50475: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50476: LD_ADDR_VAR 0 12
50480: PUSH
50481: LD_VAR 0 18
50485: PPUSH
50486: LD_INT 22
50488: PUSH
50489: LD_VAR 0 16
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: LD_INT 30
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 30
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: LIST
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PPUSH
50530: CALL_OW 72
50534: ST_TO_ADDR
50535: GO 50689
50537: LD_INT 3
50539: DOUBLE
50540: EQUAL
50541: IFTRUE 50545
50543: GO 50607
50545: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50546: LD_ADDR_VAR 0 12
50550: PUSH
50551: LD_VAR 0 18
50555: PPUSH
50556: LD_INT 22
50558: PUSH
50559: LD_VAR 0 16
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 2
50570: PUSH
50571: LD_INT 30
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 30
50583: PUSH
50584: LD_INT 3
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: LIST
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PPUSH
50600: CALL_OW 72
50604: ST_TO_ADDR
50605: GO 50689
50607: LD_INT 4
50609: DOUBLE
50610: EQUAL
50611: IFTRUE 50615
50613: GO 50688
50615: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50616: LD_ADDR_VAR 0 12
50620: PUSH
50621: LD_VAR 0 18
50625: PPUSH
50626: LD_INT 22
50628: PUSH
50629: LD_VAR 0 16
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: LD_INT 30
50643: PUSH
50644: LD_INT 6
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 30
50653: PUSH
50654: LD_INT 7
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 30
50663: PUSH
50664: LD_INT 8
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PPUSH
50681: CALL_OW 72
50685: ST_TO_ADDR
50686: GO 50689
50688: POP
// if i = 1 then
50689: LD_VAR 0 8
50693: PUSH
50694: LD_INT 1
50696: EQUAL
50697: IFFALSE 50808
// begin tmp := [ ] ;
50699: LD_ADDR_VAR 0 19
50703: PUSH
50704: EMPTY
50705: ST_TO_ADDR
// for j in f do
50706: LD_ADDR_VAR 0 9
50710: PUSH
50711: LD_VAR 0 12
50715: PUSH
50716: FOR_IN
50717: IFFALSE 50790
// if GetBType ( j ) = b_bunker then
50719: LD_VAR 0 9
50723: PPUSH
50724: CALL_OW 266
50728: PUSH
50729: LD_INT 32
50731: EQUAL
50732: IFFALSE 50759
// tmp := Insert ( tmp , 1 , j ) else
50734: LD_ADDR_VAR 0 19
50738: PUSH
50739: LD_VAR 0 19
50743: PPUSH
50744: LD_INT 1
50746: PPUSH
50747: LD_VAR 0 9
50751: PPUSH
50752: CALL_OW 2
50756: ST_TO_ADDR
50757: GO 50788
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50759: LD_ADDR_VAR 0 19
50763: PUSH
50764: LD_VAR 0 19
50768: PPUSH
50769: LD_VAR 0 19
50773: PUSH
50774: LD_INT 1
50776: PLUS
50777: PPUSH
50778: LD_VAR 0 9
50782: PPUSH
50783: CALL_OW 2
50787: ST_TO_ADDR
50788: GO 50716
50790: POP
50791: POP
// if tmp then
50792: LD_VAR 0 19
50796: IFFALSE 50808
// f := tmp ;
50798: LD_ADDR_VAR 0 12
50802: PUSH
50803: LD_VAR 0 19
50807: ST_TO_ADDR
// end ; x := personel [ i ] ;
50808: LD_ADDR_VAR 0 13
50812: PUSH
50813: LD_VAR 0 6
50817: PUSH
50818: LD_VAR 0 8
50822: ARRAY
50823: ST_TO_ADDR
// if x = - 1 then
50824: LD_VAR 0 13
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: EQUAL
50833: IFFALSE 51042
// begin for j in f do
50835: LD_ADDR_VAR 0 9
50839: PUSH
50840: LD_VAR 0 12
50844: PUSH
50845: FOR_IN
50846: IFFALSE 51038
// repeat InitHc ;
50848: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50852: LD_VAR 0 9
50856: PPUSH
50857: CALL_OW 266
50861: PUSH
50862: LD_INT 5
50864: EQUAL
50865: IFFALSE 50935
// begin if UnitsInside ( j ) < 3 then
50867: LD_VAR 0 9
50871: PPUSH
50872: CALL_OW 313
50876: PUSH
50877: LD_INT 3
50879: LESS
50880: IFFALSE 50916
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50882: LD_INT 0
50884: PPUSH
50885: LD_INT 5
50887: PUSH
50888: LD_INT 8
50890: PUSH
50891: LD_INT 9
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: LIST
50898: PUSH
50899: LD_VAR 0 17
50903: ARRAY
50904: PPUSH
50905: LD_VAR 0 4
50909: PPUSH
50910: CALL_OW 380
50914: GO 50933
// PrepareHuman ( false , i , skill ) ;
50916: LD_INT 0
50918: PPUSH
50919: LD_VAR 0 8
50923: PPUSH
50924: LD_VAR 0 4
50928: PPUSH
50929: CALL_OW 380
// end else
50933: GO 50952
// PrepareHuman ( false , i , skill ) ;
50935: LD_INT 0
50937: PPUSH
50938: LD_VAR 0 8
50942: PPUSH
50943: LD_VAR 0 4
50947: PPUSH
50948: CALL_OW 380
// un := CreateHuman ;
50952: LD_ADDR_VAR 0 14
50956: PUSH
50957: CALL_OW 44
50961: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50962: LD_ADDR_VAR 0 7
50966: PUSH
50967: LD_VAR 0 7
50971: PPUSH
50972: LD_INT 1
50974: PPUSH
50975: LD_VAR 0 14
50979: PPUSH
50980: CALL_OW 2
50984: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50985: LD_VAR 0 14
50989: PPUSH
50990: LD_VAR 0 9
50994: PPUSH
50995: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50999: LD_VAR 0 9
51003: PPUSH
51004: CALL_OW 313
51008: PUSH
51009: LD_INT 6
51011: EQUAL
51012: PUSH
51013: LD_VAR 0 9
51017: PPUSH
51018: CALL_OW 266
51022: PUSH
51023: LD_INT 32
51025: PUSH
51026: LD_INT 31
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: IN
51033: OR
51034: IFFALSE 50848
51036: GO 50845
51038: POP
51039: POP
// end else
51040: GO 51422
// for j = 1 to x do
51042: LD_ADDR_VAR 0 9
51046: PUSH
51047: DOUBLE
51048: LD_INT 1
51050: DEC
51051: ST_TO_ADDR
51052: LD_VAR 0 13
51056: PUSH
51057: FOR_TO
51058: IFFALSE 51420
// begin InitHc ;
51060: CALL_OW 19
// if not f then
51064: LD_VAR 0 12
51068: NOT
51069: IFFALSE 51158
// begin PrepareHuman ( false , i , skill ) ;
51071: LD_INT 0
51073: PPUSH
51074: LD_VAR 0 8
51078: PPUSH
51079: LD_VAR 0 4
51083: PPUSH
51084: CALL_OW 380
// un := CreateHuman ;
51088: LD_ADDR_VAR 0 14
51092: PUSH
51093: CALL_OW 44
51097: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51098: LD_ADDR_VAR 0 7
51102: PUSH
51103: LD_VAR 0 7
51107: PPUSH
51108: LD_INT 1
51110: PPUSH
51111: LD_VAR 0 14
51115: PPUSH
51116: CALL_OW 2
51120: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51121: LD_VAR 0 14
51125: PPUSH
51126: LD_VAR 0 1
51130: PPUSH
51131: CALL_OW 250
51135: PPUSH
51136: LD_VAR 0 1
51140: PPUSH
51141: CALL_OW 251
51145: PPUSH
51146: LD_INT 10
51148: PPUSH
51149: LD_INT 0
51151: PPUSH
51152: CALL_OW 50
// continue ;
51156: GO 51057
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51158: LD_VAR 0 12
51162: PUSH
51163: LD_INT 1
51165: ARRAY
51166: PPUSH
51167: CALL_OW 313
51171: PUSH
51172: LD_VAR 0 12
51176: PUSH
51177: LD_INT 1
51179: ARRAY
51180: PPUSH
51181: CALL_OW 266
51185: PUSH
51186: LD_INT 32
51188: PUSH
51189: LD_INT 31
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: IN
51196: AND
51197: PUSH
51198: LD_VAR 0 12
51202: PUSH
51203: LD_INT 1
51205: ARRAY
51206: PPUSH
51207: CALL_OW 313
51211: PUSH
51212: LD_INT 6
51214: EQUAL
51215: OR
51216: IFFALSE 51236
// f := Delete ( f , 1 ) ;
51218: LD_ADDR_VAR 0 12
51222: PUSH
51223: LD_VAR 0 12
51227: PPUSH
51228: LD_INT 1
51230: PPUSH
51231: CALL_OW 3
51235: ST_TO_ADDR
// if not f then
51236: LD_VAR 0 12
51240: NOT
51241: IFFALSE 51259
// begin x := x + 2 ;
51243: LD_ADDR_VAR 0 13
51247: PUSH
51248: LD_VAR 0 13
51252: PUSH
51253: LD_INT 2
51255: PLUS
51256: ST_TO_ADDR
// continue ;
51257: GO 51057
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51259: LD_VAR 0 12
51263: PUSH
51264: LD_INT 1
51266: ARRAY
51267: PPUSH
51268: CALL_OW 266
51272: PUSH
51273: LD_INT 5
51275: EQUAL
51276: IFFALSE 51350
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51278: LD_VAR 0 12
51282: PUSH
51283: LD_INT 1
51285: ARRAY
51286: PPUSH
51287: CALL_OW 313
51291: PUSH
51292: LD_INT 3
51294: LESS
51295: IFFALSE 51331
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51297: LD_INT 0
51299: PPUSH
51300: LD_INT 5
51302: PUSH
51303: LD_INT 8
51305: PUSH
51306: LD_INT 9
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: PUSH
51314: LD_VAR 0 17
51318: ARRAY
51319: PPUSH
51320: LD_VAR 0 4
51324: PPUSH
51325: CALL_OW 380
51329: GO 51348
// PrepareHuman ( false , i , skill ) ;
51331: LD_INT 0
51333: PPUSH
51334: LD_VAR 0 8
51338: PPUSH
51339: LD_VAR 0 4
51343: PPUSH
51344: CALL_OW 380
// end else
51348: GO 51367
// PrepareHuman ( false , i , skill ) ;
51350: LD_INT 0
51352: PPUSH
51353: LD_VAR 0 8
51357: PPUSH
51358: LD_VAR 0 4
51362: PPUSH
51363: CALL_OW 380
// un := CreateHuman ;
51367: LD_ADDR_VAR 0 14
51371: PUSH
51372: CALL_OW 44
51376: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51377: LD_ADDR_VAR 0 7
51381: PUSH
51382: LD_VAR 0 7
51386: PPUSH
51387: LD_INT 1
51389: PPUSH
51390: LD_VAR 0 14
51394: PPUSH
51395: CALL_OW 2
51399: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51400: LD_VAR 0 14
51404: PPUSH
51405: LD_VAR 0 12
51409: PUSH
51410: LD_INT 1
51412: ARRAY
51413: PPUSH
51414: CALL_OW 52
// end ;
51418: GO 51057
51420: POP
51421: POP
// end ;
51422: GO 50359
51424: POP
51425: POP
// result := result ^ buildings ;
51426: LD_ADDR_VAR 0 7
51430: PUSH
51431: LD_VAR 0 7
51435: PUSH
51436: LD_VAR 0 18
51440: ADD
51441: ST_TO_ADDR
// end else
51442: GO 51585
// begin for i = 1 to personel do
51444: LD_ADDR_VAR 0 8
51448: PUSH
51449: DOUBLE
51450: LD_INT 1
51452: DEC
51453: ST_TO_ADDR
51454: LD_VAR 0 6
51458: PUSH
51459: FOR_TO
51460: IFFALSE 51583
// begin if i > 4 then
51462: LD_VAR 0 8
51466: PUSH
51467: LD_INT 4
51469: GREATER
51470: IFFALSE 51474
// break ;
51472: GO 51583
// x := personel [ i ] ;
51474: LD_ADDR_VAR 0 13
51478: PUSH
51479: LD_VAR 0 6
51483: PUSH
51484: LD_VAR 0 8
51488: ARRAY
51489: ST_TO_ADDR
// if x = - 1 then
51490: LD_VAR 0 13
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: EQUAL
51499: IFFALSE 51503
// continue ;
51501: GO 51459
// PrepareHuman ( false , i , skill ) ;
51503: LD_INT 0
51505: PPUSH
51506: LD_VAR 0 8
51510: PPUSH
51511: LD_VAR 0 4
51515: PPUSH
51516: CALL_OW 380
// un := CreateHuman ;
51520: LD_ADDR_VAR 0 14
51524: PUSH
51525: CALL_OW 44
51529: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51530: LD_VAR 0 14
51534: PPUSH
51535: LD_VAR 0 1
51539: PPUSH
51540: CALL_OW 250
51544: PPUSH
51545: LD_VAR 0 1
51549: PPUSH
51550: CALL_OW 251
51554: PPUSH
51555: LD_INT 10
51557: PPUSH
51558: LD_INT 0
51560: PPUSH
51561: CALL_OW 50
// result := result ^ un ;
51565: LD_ADDR_VAR 0 7
51569: PUSH
51570: LD_VAR 0 7
51574: PUSH
51575: LD_VAR 0 14
51579: ADD
51580: ST_TO_ADDR
// end ;
51581: GO 51459
51583: POP
51584: POP
// end ; end ;
51585: LD_VAR 0 7
51589: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51590: LD_INT 0
51592: PPUSH
51593: PPUSH
51594: PPUSH
51595: PPUSH
51596: PPUSH
51597: PPUSH
51598: PPUSH
51599: PPUSH
51600: PPUSH
51601: PPUSH
51602: PPUSH
51603: PPUSH
51604: PPUSH
51605: PPUSH
51606: PPUSH
51607: PPUSH
// result := false ;
51608: LD_ADDR_VAR 0 3
51612: PUSH
51613: LD_INT 0
51615: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51616: LD_VAR 0 1
51620: NOT
51621: PUSH
51622: LD_VAR 0 1
51626: PPUSH
51627: CALL_OW 266
51631: PUSH
51632: LD_INT 32
51634: PUSH
51635: LD_INT 33
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: IN
51642: NOT
51643: OR
51644: IFFALSE 51648
// exit ;
51646: GO 52757
// nat := GetNation ( tower ) ;
51648: LD_ADDR_VAR 0 12
51652: PUSH
51653: LD_VAR 0 1
51657: PPUSH
51658: CALL_OW 248
51662: ST_TO_ADDR
// side := GetSide ( tower ) ;
51663: LD_ADDR_VAR 0 16
51667: PUSH
51668: LD_VAR 0 1
51672: PPUSH
51673: CALL_OW 255
51677: ST_TO_ADDR
// x := GetX ( tower ) ;
51678: LD_ADDR_VAR 0 10
51682: PUSH
51683: LD_VAR 0 1
51687: PPUSH
51688: CALL_OW 250
51692: ST_TO_ADDR
// y := GetY ( tower ) ;
51693: LD_ADDR_VAR 0 11
51697: PUSH
51698: LD_VAR 0 1
51702: PPUSH
51703: CALL_OW 251
51707: ST_TO_ADDR
// if not x or not y then
51708: LD_VAR 0 10
51712: NOT
51713: PUSH
51714: LD_VAR 0 11
51718: NOT
51719: OR
51720: IFFALSE 51724
// exit ;
51722: GO 52757
// weapon := 0 ;
51724: LD_ADDR_VAR 0 18
51728: PUSH
51729: LD_INT 0
51731: ST_TO_ADDR
// fac_list := [ ] ;
51732: LD_ADDR_VAR 0 17
51736: PUSH
51737: EMPTY
51738: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51739: LD_ADDR_VAR 0 6
51743: PUSH
51744: LD_VAR 0 1
51748: PPUSH
51749: CALL_OW 274
51753: PPUSH
51754: LD_VAR 0 2
51758: PPUSH
51759: LD_INT 0
51761: PPUSH
51762: CALL 49328 0 3
51766: PPUSH
51767: LD_INT 30
51769: PUSH
51770: LD_INT 3
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PPUSH
51777: CALL_OW 72
51781: ST_TO_ADDR
// if not factories then
51782: LD_VAR 0 6
51786: NOT
51787: IFFALSE 51791
// exit ;
51789: GO 52757
// for i in factories do
51791: LD_ADDR_VAR 0 8
51795: PUSH
51796: LD_VAR 0 6
51800: PUSH
51801: FOR_IN
51802: IFFALSE 51827
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51804: LD_ADDR_VAR 0 17
51808: PUSH
51809: LD_VAR 0 17
51813: PUSH
51814: LD_VAR 0 8
51818: PPUSH
51819: CALL_OW 478
51823: UNION
51824: ST_TO_ADDR
51825: GO 51801
51827: POP
51828: POP
// if not fac_list then
51829: LD_VAR 0 17
51833: NOT
51834: IFFALSE 51838
// exit ;
51836: GO 52757
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51838: LD_ADDR_VAR 0 5
51842: PUSH
51843: LD_INT 4
51845: PUSH
51846: LD_INT 5
51848: PUSH
51849: LD_INT 9
51851: PUSH
51852: LD_INT 10
51854: PUSH
51855: LD_INT 6
51857: PUSH
51858: LD_INT 7
51860: PUSH
51861: LD_INT 11
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 27
51875: PUSH
51876: LD_INT 28
51878: PUSH
51879: LD_INT 26
51881: PUSH
51882: LD_INT 30
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 43
51893: PUSH
51894: LD_INT 44
51896: PUSH
51897: LD_INT 46
51899: PUSH
51900: LD_INT 45
51902: PUSH
51903: LD_INT 47
51905: PUSH
51906: LD_INT 49
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: LIST
51921: PUSH
51922: LD_VAR 0 12
51926: ARRAY
51927: ST_TO_ADDR
// list := list isect fac_list ;
51928: LD_ADDR_VAR 0 5
51932: PUSH
51933: LD_VAR 0 5
51937: PUSH
51938: LD_VAR 0 17
51942: ISECT
51943: ST_TO_ADDR
// if not list then
51944: LD_VAR 0 5
51948: NOT
51949: IFFALSE 51953
// exit ;
51951: GO 52757
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51953: LD_VAR 0 12
51957: PUSH
51958: LD_INT 3
51960: EQUAL
51961: PUSH
51962: LD_INT 49
51964: PUSH
51965: LD_VAR 0 5
51969: IN
51970: AND
51971: PUSH
51972: LD_INT 31
51974: PPUSH
51975: LD_VAR 0 16
51979: PPUSH
51980: CALL_OW 321
51984: PUSH
51985: LD_INT 2
51987: EQUAL
51988: AND
51989: IFFALSE 52049
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51991: LD_INT 22
51993: PUSH
51994: LD_VAR 0 16
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 35
52005: PUSH
52006: LD_INT 49
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 91
52015: PUSH
52016: LD_VAR 0 1
52020: PUSH
52021: LD_INT 10
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: LIST
52033: PPUSH
52034: CALL_OW 69
52038: NOT
52039: IFFALSE 52049
// weapon := ru_time_lapser ;
52041: LD_ADDR_VAR 0 18
52045: PUSH
52046: LD_INT 49
52048: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52049: LD_VAR 0 12
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: IN
52064: PUSH
52065: LD_INT 11
52067: PUSH
52068: LD_VAR 0 5
52072: IN
52073: PUSH
52074: LD_INT 30
52076: PUSH
52077: LD_VAR 0 5
52081: IN
52082: OR
52083: AND
52084: PUSH
52085: LD_INT 6
52087: PPUSH
52088: LD_VAR 0 16
52092: PPUSH
52093: CALL_OW 321
52097: PUSH
52098: LD_INT 2
52100: EQUAL
52101: AND
52102: IFFALSE 52267
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52104: LD_INT 22
52106: PUSH
52107: LD_VAR 0 16
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 2
52118: PUSH
52119: LD_INT 35
52121: PUSH
52122: LD_INT 11
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 35
52131: PUSH
52132: LD_INT 30
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 91
52146: PUSH
52147: LD_VAR 0 1
52151: PUSH
52152: LD_INT 18
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: LIST
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: LIST
52164: PPUSH
52165: CALL_OW 69
52169: NOT
52170: PUSH
52171: LD_INT 22
52173: PUSH
52174: LD_VAR 0 16
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: LD_INT 30
52188: PUSH
52189: LD_INT 32
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 30
52198: PUSH
52199: LD_INT 33
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 91
52213: PUSH
52214: LD_VAR 0 1
52218: PUSH
52219: LD_INT 12
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: LIST
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: LIST
52231: PUSH
52232: EMPTY
52233: LIST
52234: PPUSH
52235: CALL_OW 69
52239: PUSH
52240: LD_INT 2
52242: GREATER
52243: AND
52244: IFFALSE 52267
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52246: LD_ADDR_VAR 0 18
52250: PUSH
52251: LD_INT 11
52253: PUSH
52254: LD_INT 30
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_VAR 0 12
52265: ARRAY
52266: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52267: LD_VAR 0 18
52271: NOT
52272: PUSH
52273: LD_INT 40
52275: PPUSH
52276: LD_VAR 0 16
52280: PPUSH
52281: CALL_OW 321
52285: PUSH
52286: LD_INT 2
52288: EQUAL
52289: AND
52290: PUSH
52291: LD_INT 7
52293: PUSH
52294: LD_VAR 0 5
52298: IN
52299: PUSH
52300: LD_INT 28
52302: PUSH
52303: LD_VAR 0 5
52307: IN
52308: OR
52309: PUSH
52310: LD_INT 45
52312: PUSH
52313: LD_VAR 0 5
52317: IN
52318: OR
52319: AND
52320: IFFALSE 52574
// begin hex := GetHexInfo ( x , y ) ;
52322: LD_ADDR_VAR 0 4
52326: PUSH
52327: LD_VAR 0 10
52331: PPUSH
52332: LD_VAR 0 11
52336: PPUSH
52337: CALL_OW 546
52341: ST_TO_ADDR
// if hex [ 1 ] then
52342: LD_VAR 0 4
52346: PUSH
52347: LD_INT 1
52349: ARRAY
52350: IFFALSE 52354
// exit ;
52352: GO 52757
// height := hex [ 2 ] ;
52354: LD_ADDR_VAR 0 15
52358: PUSH
52359: LD_VAR 0 4
52363: PUSH
52364: LD_INT 2
52366: ARRAY
52367: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52368: LD_ADDR_VAR 0 14
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 3
52381: PUSH
52382: LD_INT 5
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: ST_TO_ADDR
// for i in tmp do
52391: LD_ADDR_VAR 0 8
52395: PUSH
52396: LD_VAR 0 14
52400: PUSH
52401: FOR_IN
52402: IFFALSE 52572
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52404: LD_ADDR_VAR 0 9
52408: PUSH
52409: LD_VAR 0 10
52413: PPUSH
52414: LD_VAR 0 8
52418: PPUSH
52419: LD_INT 5
52421: PPUSH
52422: CALL_OW 272
52426: PUSH
52427: LD_VAR 0 11
52431: PPUSH
52432: LD_VAR 0 8
52436: PPUSH
52437: LD_INT 5
52439: PPUSH
52440: CALL_OW 273
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52449: LD_VAR 0 9
52453: PUSH
52454: LD_INT 1
52456: ARRAY
52457: PPUSH
52458: LD_VAR 0 9
52462: PUSH
52463: LD_INT 2
52465: ARRAY
52466: PPUSH
52467: CALL_OW 488
52471: IFFALSE 52570
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52473: LD_ADDR_VAR 0 4
52477: PUSH
52478: LD_VAR 0 9
52482: PUSH
52483: LD_INT 1
52485: ARRAY
52486: PPUSH
52487: LD_VAR 0 9
52491: PUSH
52492: LD_INT 2
52494: ARRAY
52495: PPUSH
52496: CALL_OW 546
52500: ST_TO_ADDR
// if hex [ 1 ] then
52501: LD_VAR 0 4
52505: PUSH
52506: LD_INT 1
52508: ARRAY
52509: IFFALSE 52513
// continue ;
52511: GO 52401
// h := hex [ 2 ] ;
52513: LD_ADDR_VAR 0 13
52517: PUSH
52518: LD_VAR 0 4
52522: PUSH
52523: LD_INT 2
52525: ARRAY
52526: ST_TO_ADDR
// if h + 7 < height then
52527: LD_VAR 0 13
52531: PUSH
52532: LD_INT 7
52534: PLUS
52535: PUSH
52536: LD_VAR 0 15
52540: LESS
52541: IFFALSE 52570
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52543: LD_ADDR_VAR 0 18
52547: PUSH
52548: LD_INT 7
52550: PUSH
52551: LD_INT 28
52553: PUSH
52554: LD_INT 45
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: LIST
52561: PUSH
52562: LD_VAR 0 12
52566: ARRAY
52567: ST_TO_ADDR
// break ;
52568: GO 52572
// end ; end ; end ;
52570: GO 52401
52572: POP
52573: POP
// end ; if not weapon then
52574: LD_VAR 0 18
52578: NOT
52579: IFFALSE 52639
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52581: LD_ADDR_VAR 0 5
52585: PUSH
52586: LD_VAR 0 5
52590: PUSH
52591: LD_INT 11
52593: PUSH
52594: LD_INT 30
52596: PUSH
52597: LD_INT 49
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: LIST
52604: DIFF
52605: ST_TO_ADDR
// if not list then
52606: LD_VAR 0 5
52610: NOT
52611: IFFALSE 52615
// exit ;
52613: GO 52757
// weapon := list [ rand ( 1 , list ) ] ;
52615: LD_ADDR_VAR 0 18
52619: PUSH
52620: LD_VAR 0 5
52624: PUSH
52625: LD_INT 1
52627: PPUSH
52628: LD_VAR 0 5
52632: PPUSH
52633: CALL_OW 12
52637: ARRAY
52638: ST_TO_ADDR
// end ; if weapon then
52639: LD_VAR 0 18
52643: IFFALSE 52757
// begin tmp := CostOfWeapon ( weapon ) ;
52645: LD_ADDR_VAR 0 14
52649: PUSH
52650: LD_VAR 0 18
52654: PPUSH
52655: CALL_OW 451
52659: ST_TO_ADDR
// j := GetBase ( tower ) ;
52660: LD_ADDR_VAR 0 9
52664: PUSH
52665: LD_VAR 0 1
52669: PPUSH
52670: CALL_OW 274
52674: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52675: LD_VAR 0 9
52679: PPUSH
52680: LD_INT 1
52682: PPUSH
52683: CALL_OW 275
52687: PUSH
52688: LD_VAR 0 14
52692: PUSH
52693: LD_INT 1
52695: ARRAY
52696: GREATEREQUAL
52697: PUSH
52698: LD_VAR 0 9
52702: PPUSH
52703: LD_INT 2
52705: PPUSH
52706: CALL_OW 275
52710: PUSH
52711: LD_VAR 0 14
52715: PUSH
52716: LD_INT 2
52718: ARRAY
52719: GREATEREQUAL
52720: AND
52721: PUSH
52722: LD_VAR 0 9
52726: PPUSH
52727: LD_INT 3
52729: PPUSH
52730: CALL_OW 275
52734: PUSH
52735: LD_VAR 0 14
52739: PUSH
52740: LD_INT 3
52742: ARRAY
52743: GREATEREQUAL
52744: AND
52745: IFFALSE 52757
// result := weapon ;
52747: LD_ADDR_VAR 0 3
52751: PUSH
52752: LD_VAR 0 18
52756: ST_TO_ADDR
// end ; end ;
52757: LD_VAR 0 3
52761: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52762: LD_INT 0
52764: PPUSH
52765: PPUSH
// result := true ;
52766: LD_ADDR_VAR 0 3
52770: PUSH
52771: LD_INT 1
52773: ST_TO_ADDR
// if array1 = array2 then
52774: LD_VAR 0 1
52778: PUSH
52779: LD_VAR 0 2
52783: EQUAL
52784: IFFALSE 52844
// begin for i = 1 to array1 do
52786: LD_ADDR_VAR 0 4
52790: PUSH
52791: DOUBLE
52792: LD_INT 1
52794: DEC
52795: ST_TO_ADDR
52796: LD_VAR 0 1
52800: PUSH
52801: FOR_TO
52802: IFFALSE 52840
// if array1 [ i ] <> array2 [ i ] then
52804: LD_VAR 0 1
52808: PUSH
52809: LD_VAR 0 4
52813: ARRAY
52814: PUSH
52815: LD_VAR 0 2
52819: PUSH
52820: LD_VAR 0 4
52824: ARRAY
52825: NONEQUAL
52826: IFFALSE 52838
// begin result := false ;
52828: LD_ADDR_VAR 0 3
52832: PUSH
52833: LD_INT 0
52835: ST_TO_ADDR
// break ;
52836: GO 52840
// end ;
52838: GO 52801
52840: POP
52841: POP
// end else
52842: GO 52852
// result := false ;
52844: LD_ADDR_VAR 0 3
52848: PUSH
52849: LD_INT 0
52851: ST_TO_ADDR
// end ;
52852: LD_VAR 0 3
52856: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52857: LD_INT 0
52859: PPUSH
52860: PPUSH
// if not array1 or not array2 then
52861: LD_VAR 0 1
52865: NOT
52866: PUSH
52867: LD_VAR 0 2
52871: NOT
52872: OR
52873: IFFALSE 52877
// exit ;
52875: GO 52941
// result := true ;
52877: LD_ADDR_VAR 0 3
52881: PUSH
52882: LD_INT 1
52884: ST_TO_ADDR
// for i = 1 to array1 do
52885: LD_ADDR_VAR 0 4
52889: PUSH
52890: DOUBLE
52891: LD_INT 1
52893: DEC
52894: ST_TO_ADDR
52895: LD_VAR 0 1
52899: PUSH
52900: FOR_TO
52901: IFFALSE 52939
// if array1 [ i ] <> array2 [ i ] then
52903: LD_VAR 0 1
52907: PUSH
52908: LD_VAR 0 4
52912: ARRAY
52913: PUSH
52914: LD_VAR 0 2
52918: PUSH
52919: LD_VAR 0 4
52923: ARRAY
52924: NONEQUAL
52925: IFFALSE 52937
// begin result := false ;
52927: LD_ADDR_VAR 0 3
52931: PUSH
52932: LD_INT 0
52934: ST_TO_ADDR
// break ;
52935: GO 52939
// end ;
52937: GO 52900
52939: POP
52940: POP
// end ;
52941: LD_VAR 0 3
52945: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52946: LD_INT 0
52948: PPUSH
52949: PPUSH
52950: PPUSH
// pom := GetBase ( fac ) ;
52951: LD_ADDR_VAR 0 5
52955: PUSH
52956: LD_VAR 0 1
52960: PPUSH
52961: CALL_OW 274
52965: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52966: LD_ADDR_VAR 0 4
52970: PUSH
52971: LD_VAR 0 2
52975: PUSH
52976: LD_INT 1
52978: ARRAY
52979: PPUSH
52980: LD_VAR 0 2
52984: PUSH
52985: LD_INT 2
52987: ARRAY
52988: PPUSH
52989: LD_VAR 0 2
52993: PUSH
52994: LD_INT 3
52996: ARRAY
52997: PPUSH
52998: LD_VAR 0 2
53002: PUSH
53003: LD_INT 4
53005: ARRAY
53006: PPUSH
53007: CALL_OW 449
53011: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53012: LD_ADDR_VAR 0 3
53016: PUSH
53017: LD_VAR 0 5
53021: PPUSH
53022: LD_INT 1
53024: PPUSH
53025: CALL_OW 275
53029: PUSH
53030: LD_VAR 0 4
53034: PUSH
53035: LD_INT 1
53037: ARRAY
53038: GREATEREQUAL
53039: PUSH
53040: LD_VAR 0 5
53044: PPUSH
53045: LD_INT 2
53047: PPUSH
53048: CALL_OW 275
53052: PUSH
53053: LD_VAR 0 4
53057: PUSH
53058: LD_INT 2
53060: ARRAY
53061: GREATEREQUAL
53062: AND
53063: PUSH
53064: LD_VAR 0 5
53068: PPUSH
53069: LD_INT 3
53071: PPUSH
53072: CALL_OW 275
53076: PUSH
53077: LD_VAR 0 4
53081: PUSH
53082: LD_INT 3
53084: ARRAY
53085: GREATEREQUAL
53086: AND
53087: ST_TO_ADDR
// end ;
53088: LD_VAR 0 3
53092: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53093: LD_INT 0
53095: PPUSH
53096: PPUSH
53097: PPUSH
53098: PPUSH
// pom := GetBase ( building ) ;
53099: LD_ADDR_VAR 0 3
53103: PUSH
53104: LD_VAR 0 1
53108: PPUSH
53109: CALL_OW 274
53113: ST_TO_ADDR
// if not pom then
53114: LD_VAR 0 3
53118: NOT
53119: IFFALSE 53123
// exit ;
53121: GO 53293
// btype := GetBType ( building ) ;
53123: LD_ADDR_VAR 0 5
53127: PUSH
53128: LD_VAR 0 1
53132: PPUSH
53133: CALL_OW 266
53137: ST_TO_ADDR
// if btype = b_armoury then
53138: LD_VAR 0 5
53142: PUSH
53143: LD_INT 4
53145: EQUAL
53146: IFFALSE 53156
// btype := b_barracks ;
53148: LD_ADDR_VAR 0 5
53152: PUSH
53153: LD_INT 5
53155: ST_TO_ADDR
// if btype = b_depot then
53156: LD_VAR 0 5
53160: PUSH
53161: LD_INT 0
53163: EQUAL
53164: IFFALSE 53174
// btype := b_warehouse ;
53166: LD_ADDR_VAR 0 5
53170: PUSH
53171: LD_INT 1
53173: ST_TO_ADDR
// if btype = b_workshop then
53174: LD_VAR 0 5
53178: PUSH
53179: LD_INT 2
53181: EQUAL
53182: IFFALSE 53192
// btype := b_factory ;
53184: LD_ADDR_VAR 0 5
53188: PUSH
53189: LD_INT 3
53191: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53192: LD_ADDR_VAR 0 4
53196: PUSH
53197: LD_VAR 0 5
53201: PPUSH
53202: LD_VAR 0 1
53206: PPUSH
53207: CALL_OW 248
53211: PPUSH
53212: CALL_OW 450
53216: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53217: LD_ADDR_VAR 0 2
53221: PUSH
53222: LD_VAR 0 3
53226: PPUSH
53227: LD_INT 1
53229: PPUSH
53230: CALL_OW 275
53234: PUSH
53235: LD_VAR 0 4
53239: PUSH
53240: LD_INT 1
53242: ARRAY
53243: GREATEREQUAL
53244: PUSH
53245: LD_VAR 0 3
53249: PPUSH
53250: LD_INT 2
53252: PPUSH
53253: CALL_OW 275
53257: PUSH
53258: LD_VAR 0 4
53262: PUSH
53263: LD_INT 2
53265: ARRAY
53266: GREATEREQUAL
53267: AND
53268: PUSH
53269: LD_VAR 0 3
53273: PPUSH
53274: LD_INT 3
53276: PPUSH
53277: CALL_OW 275
53281: PUSH
53282: LD_VAR 0 4
53286: PUSH
53287: LD_INT 3
53289: ARRAY
53290: GREATEREQUAL
53291: AND
53292: ST_TO_ADDR
// end ;
53293: LD_VAR 0 2
53297: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53298: LD_INT 0
53300: PPUSH
53301: PPUSH
53302: PPUSH
// pom := GetBase ( building ) ;
53303: LD_ADDR_VAR 0 4
53307: PUSH
53308: LD_VAR 0 1
53312: PPUSH
53313: CALL_OW 274
53317: ST_TO_ADDR
// if not pom then
53318: LD_VAR 0 4
53322: NOT
53323: IFFALSE 53327
// exit ;
53325: GO 53428
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53327: LD_ADDR_VAR 0 5
53331: PUSH
53332: LD_VAR 0 2
53336: PPUSH
53337: LD_VAR 0 1
53341: PPUSH
53342: CALL_OW 248
53346: PPUSH
53347: CALL_OW 450
53351: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53352: LD_ADDR_VAR 0 3
53356: PUSH
53357: LD_VAR 0 4
53361: PPUSH
53362: LD_INT 1
53364: PPUSH
53365: CALL_OW 275
53369: PUSH
53370: LD_VAR 0 5
53374: PUSH
53375: LD_INT 1
53377: ARRAY
53378: GREATEREQUAL
53379: PUSH
53380: LD_VAR 0 4
53384: PPUSH
53385: LD_INT 2
53387: PPUSH
53388: CALL_OW 275
53392: PUSH
53393: LD_VAR 0 5
53397: PUSH
53398: LD_INT 2
53400: ARRAY
53401: GREATEREQUAL
53402: AND
53403: PUSH
53404: LD_VAR 0 4
53408: PPUSH
53409: LD_INT 3
53411: PPUSH
53412: CALL_OW 275
53416: PUSH
53417: LD_VAR 0 5
53421: PUSH
53422: LD_INT 3
53424: ARRAY
53425: GREATEREQUAL
53426: AND
53427: ST_TO_ADDR
// end ;
53428: LD_VAR 0 3
53432: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53433: LD_INT 0
53435: PPUSH
53436: PPUSH
53437: PPUSH
53438: PPUSH
53439: PPUSH
53440: PPUSH
53441: PPUSH
53442: PPUSH
53443: PPUSH
53444: PPUSH
53445: PPUSH
// result := false ;
53446: LD_ADDR_VAR 0 8
53450: PUSH
53451: LD_INT 0
53453: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53454: LD_VAR 0 5
53458: NOT
53459: PUSH
53460: LD_VAR 0 1
53464: NOT
53465: OR
53466: PUSH
53467: LD_VAR 0 2
53471: NOT
53472: OR
53473: PUSH
53474: LD_VAR 0 3
53478: NOT
53479: OR
53480: IFFALSE 53484
// exit ;
53482: GO 54298
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53484: LD_ADDR_VAR 0 14
53488: PUSH
53489: LD_VAR 0 1
53493: PPUSH
53494: LD_VAR 0 2
53498: PPUSH
53499: LD_VAR 0 3
53503: PPUSH
53504: LD_VAR 0 4
53508: PPUSH
53509: LD_VAR 0 5
53513: PUSH
53514: LD_INT 1
53516: ARRAY
53517: PPUSH
53518: CALL_OW 248
53522: PPUSH
53523: LD_INT 0
53525: PPUSH
53526: CALL 55531 0 6
53530: ST_TO_ADDR
// if not hexes then
53531: LD_VAR 0 14
53535: NOT
53536: IFFALSE 53540
// exit ;
53538: GO 54298
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53540: LD_ADDR_VAR 0 17
53544: PUSH
53545: LD_VAR 0 5
53549: PPUSH
53550: LD_INT 22
53552: PUSH
53553: LD_VAR 0 13
53557: PPUSH
53558: CALL_OW 255
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: LD_INT 30
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 30
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: LIST
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PPUSH
53599: CALL_OW 72
53603: ST_TO_ADDR
// for i = 1 to hexes do
53604: LD_ADDR_VAR 0 9
53608: PUSH
53609: DOUBLE
53610: LD_INT 1
53612: DEC
53613: ST_TO_ADDR
53614: LD_VAR 0 14
53618: PUSH
53619: FOR_TO
53620: IFFALSE 54296
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53622: LD_ADDR_VAR 0 13
53626: PUSH
53627: LD_VAR 0 14
53631: PUSH
53632: LD_VAR 0 9
53636: ARRAY
53637: PUSH
53638: LD_INT 1
53640: ARRAY
53641: PPUSH
53642: LD_VAR 0 14
53646: PUSH
53647: LD_VAR 0 9
53651: ARRAY
53652: PUSH
53653: LD_INT 2
53655: ARRAY
53656: PPUSH
53657: CALL_OW 428
53661: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53662: LD_VAR 0 14
53666: PUSH
53667: LD_VAR 0 9
53671: ARRAY
53672: PUSH
53673: LD_INT 1
53675: ARRAY
53676: PPUSH
53677: LD_VAR 0 14
53681: PUSH
53682: LD_VAR 0 9
53686: ARRAY
53687: PUSH
53688: LD_INT 2
53690: ARRAY
53691: PPUSH
53692: CALL_OW 351
53696: PUSH
53697: LD_VAR 0 14
53701: PUSH
53702: LD_VAR 0 9
53706: ARRAY
53707: PUSH
53708: LD_INT 1
53710: ARRAY
53711: PPUSH
53712: LD_VAR 0 14
53716: PUSH
53717: LD_VAR 0 9
53721: ARRAY
53722: PUSH
53723: LD_INT 2
53725: ARRAY
53726: PPUSH
53727: CALL_OW 488
53731: NOT
53732: OR
53733: PUSH
53734: LD_VAR 0 13
53738: PPUSH
53739: CALL_OW 247
53743: PUSH
53744: LD_INT 3
53746: EQUAL
53747: OR
53748: IFFALSE 53754
// exit ;
53750: POP
53751: POP
53752: GO 54298
// if not tmp then
53754: LD_VAR 0 13
53758: NOT
53759: IFFALSE 53763
// continue ;
53761: GO 53619
// result := true ;
53763: LD_ADDR_VAR 0 8
53767: PUSH
53768: LD_INT 1
53770: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53771: LD_VAR 0 6
53775: PUSH
53776: LD_VAR 0 13
53780: PPUSH
53781: CALL_OW 247
53785: PUSH
53786: LD_INT 2
53788: EQUAL
53789: AND
53790: PUSH
53791: LD_VAR 0 13
53795: PPUSH
53796: CALL_OW 263
53800: PUSH
53801: LD_INT 1
53803: EQUAL
53804: AND
53805: IFFALSE 53969
// begin if IsDrivenBy ( tmp ) then
53807: LD_VAR 0 13
53811: PPUSH
53812: CALL_OW 311
53816: IFFALSE 53820
// continue ;
53818: GO 53619
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53820: LD_VAR 0 6
53824: PPUSH
53825: LD_INT 3
53827: PUSH
53828: LD_INT 60
53830: PUSH
53831: EMPTY
53832: LIST
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: LD_INT 55
53843: PUSH
53844: EMPTY
53845: LIST
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PPUSH
53855: CALL_OW 72
53859: IFFALSE 53967
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53861: LD_ADDR_VAR 0 18
53865: PUSH
53866: LD_VAR 0 6
53870: PPUSH
53871: LD_INT 3
53873: PUSH
53874: LD_INT 60
53876: PUSH
53877: EMPTY
53878: LIST
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 3
53886: PUSH
53887: LD_INT 55
53889: PUSH
53890: EMPTY
53891: LIST
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PPUSH
53901: CALL_OW 72
53905: PUSH
53906: LD_INT 1
53908: ARRAY
53909: ST_TO_ADDR
// if IsInUnit ( driver ) then
53910: LD_VAR 0 18
53914: PPUSH
53915: CALL_OW 310
53919: IFFALSE 53930
// ComExit ( driver ) ;
53921: LD_VAR 0 18
53925: PPUSH
53926: CALL 79310 0 1
// AddComEnterUnit ( driver , tmp ) ;
53930: LD_VAR 0 18
53934: PPUSH
53935: LD_VAR 0 13
53939: PPUSH
53940: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53944: LD_VAR 0 18
53948: PPUSH
53949: LD_VAR 0 7
53953: PPUSH
53954: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53958: LD_VAR 0 18
53962: PPUSH
53963: CALL_OW 181
// end ; continue ;
53967: GO 53619
// end ; if not cleaners or not tmp in cleaners then
53969: LD_VAR 0 6
53973: NOT
53974: PUSH
53975: LD_VAR 0 13
53979: PUSH
53980: LD_VAR 0 6
53984: IN
53985: NOT
53986: OR
53987: IFFALSE 54294
// begin if dep then
53989: LD_VAR 0 17
53993: IFFALSE 54129
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53995: LD_ADDR_VAR 0 16
53999: PUSH
54000: LD_VAR 0 17
54004: PUSH
54005: LD_INT 1
54007: ARRAY
54008: PPUSH
54009: CALL_OW 250
54013: PPUSH
54014: LD_VAR 0 17
54018: PUSH
54019: LD_INT 1
54021: ARRAY
54022: PPUSH
54023: CALL_OW 254
54027: PPUSH
54028: LD_INT 5
54030: PPUSH
54031: CALL_OW 272
54035: PUSH
54036: LD_VAR 0 17
54040: PUSH
54041: LD_INT 1
54043: ARRAY
54044: PPUSH
54045: CALL_OW 251
54049: PPUSH
54050: LD_VAR 0 17
54054: PUSH
54055: LD_INT 1
54057: ARRAY
54058: PPUSH
54059: CALL_OW 254
54063: PPUSH
54064: LD_INT 5
54066: PPUSH
54067: CALL_OW 273
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54076: LD_VAR 0 16
54080: PUSH
54081: LD_INT 1
54083: ARRAY
54084: PPUSH
54085: LD_VAR 0 16
54089: PUSH
54090: LD_INT 2
54092: ARRAY
54093: PPUSH
54094: CALL_OW 488
54098: IFFALSE 54129
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54100: LD_VAR 0 13
54104: PPUSH
54105: LD_VAR 0 16
54109: PUSH
54110: LD_INT 1
54112: ARRAY
54113: PPUSH
54114: LD_VAR 0 16
54118: PUSH
54119: LD_INT 2
54121: ARRAY
54122: PPUSH
54123: CALL_OW 111
// continue ;
54127: GO 53619
// end ; end ; r := GetDir ( tmp ) ;
54129: LD_ADDR_VAR 0 15
54133: PUSH
54134: LD_VAR 0 13
54138: PPUSH
54139: CALL_OW 254
54143: ST_TO_ADDR
// if r = 5 then
54144: LD_VAR 0 15
54148: PUSH
54149: LD_INT 5
54151: EQUAL
54152: IFFALSE 54162
// r := 0 ;
54154: LD_ADDR_VAR 0 15
54158: PUSH
54159: LD_INT 0
54161: ST_TO_ADDR
// for j = r to 5 do
54162: LD_ADDR_VAR 0 10
54166: PUSH
54167: DOUBLE
54168: LD_VAR 0 15
54172: DEC
54173: ST_TO_ADDR
54174: LD_INT 5
54176: PUSH
54177: FOR_TO
54178: IFFALSE 54292
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54180: LD_ADDR_VAR 0 11
54184: PUSH
54185: LD_VAR 0 13
54189: PPUSH
54190: CALL_OW 250
54194: PPUSH
54195: LD_VAR 0 10
54199: PPUSH
54200: LD_INT 2
54202: PPUSH
54203: CALL_OW 272
54207: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54208: LD_ADDR_VAR 0 12
54212: PUSH
54213: LD_VAR 0 13
54217: PPUSH
54218: CALL_OW 251
54222: PPUSH
54223: LD_VAR 0 10
54227: PPUSH
54228: LD_INT 2
54230: PPUSH
54231: CALL_OW 273
54235: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54236: LD_VAR 0 11
54240: PPUSH
54241: LD_VAR 0 12
54245: PPUSH
54246: CALL_OW 488
54250: PUSH
54251: LD_VAR 0 11
54255: PPUSH
54256: LD_VAR 0 12
54260: PPUSH
54261: CALL_OW 428
54265: NOT
54266: AND
54267: IFFALSE 54290
// begin ComMoveXY ( tmp , _x , _y ) ;
54269: LD_VAR 0 13
54273: PPUSH
54274: LD_VAR 0 11
54278: PPUSH
54279: LD_VAR 0 12
54283: PPUSH
54284: CALL_OW 111
// break ;
54288: GO 54292
// end ; end ;
54290: GO 54177
54292: POP
54293: POP
// end ; end ;
54294: GO 53619
54296: POP
54297: POP
// end ;
54298: LD_VAR 0 8
54302: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54303: LD_INT 0
54305: PPUSH
// result := true ;
54306: LD_ADDR_VAR 0 3
54310: PUSH
54311: LD_INT 1
54313: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54314: LD_VAR 0 2
54318: PUSH
54319: LD_INT 24
54321: DOUBLE
54322: EQUAL
54323: IFTRUE 54333
54325: LD_INT 33
54327: DOUBLE
54328: EQUAL
54329: IFTRUE 54333
54331: GO 54358
54333: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54334: LD_ADDR_VAR 0 3
54338: PUSH
54339: LD_INT 32
54341: PPUSH
54342: LD_VAR 0 1
54346: PPUSH
54347: CALL_OW 321
54351: PUSH
54352: LD_INT 2
54354: EQUAL
54355: ST_TO_ADDR
54356: GO 54674
54358: LD_INT 20
54360: DOUBLE
54361: EQUAL
54362: IFTRUE 54366
54364: GO 54391
54366: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54367: LD_ADDR_VAR 0 3
54371: PUSH
54372: LD_INT 6
54374: PPUSH
54375: LD_VAR 0 1
54379: PPUSH
54380: CALL_OW 321
54384: PUSH
54385: LD_INT 2
54387: EQUAL
54388: ST_TO_ADDR
54389: GO 54674
54391: LD_INT 22
54393: DOUBLE
54394: EQUAL
54395: IFTRUE 54405
54397: LD_INT 36
54399: DOUBLE
54400: EQUAL
54401: IFTRUE 54405
54403: GO 54430
54405: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54406: LD_ADDR_VAR 0 3
54410: PUSH
54411: LD_INT 15
54413: PPUSH
54414: LD_VAR 0 1
54418: PPUSH
54419: CALL_OW 321
54423: PUSH
54424: LD_INT 2
54426: EQUAL
54427: ST_TO_ADDR
54428: GO 54674
54430: LD_INT 30
54432: DOUBLE
54433: EQUAL
54434: IFTRUE 54438
54436: GO 54463
54438: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54439: LD_ADDR_VAR 0 3
54443: PUSH
54444: LD_INT 20
54446: PPUSH
54447: LD_VAR 0 1
54451: PPUSH
54452: CALL_OW 321
54456: PUSH
54457: LD_INT 2
54459: EQUAL
54460: ST_TO_ADDR
54461: GO 54674
54463: LD_INT 28
54465: DOUBLE
54466: EQUAL
54467: IFTRUE 54477
54469: LD_INT 21
54471: DOUBLE
54472: EQUAL
54473: IFTRUE 54477
54475: GO 54502
54477: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54478: LD_ADDR_VAR 0 3
54482: PUSH
54483: LD_INT 21
54485: PPUSH
54486: LD_VAR 0 1
54490: PPUSH
54491: CALL_OW 321
54495: PUSH
54496: LD_INT 2
54498: EQUAL
54499: ST_TO_ADDR
54500: GO 54674
54502: LD_INT 16
54504: DOUBLE
54505: EQUAL
54506: IFTRUE 54510
54508: GO 54535
54510: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54511: LD_ADDR_VAR 0 3
54515: PUSH
54516: LD_INT 84
54518: PPUSH
54519: LD_VAR 0 1
54523: PPUSH
54524: CALL_OW 321
54528: PUSH
54529: LD_INT 2
54531: EQUAL
54532: ST_TO_ADDR
54533: GO 54674
54535: LD_INT 19
54537: DOUBLE
54538: EQUAL
54539: IFTRUE 54549
54541: LD_INT 23
54543: DOUBLE
54544: EQUAL
54545: IFTRUE 54549
54547: GO 54574
54549: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54550: LD_ADDR_VAR 0 3
54554: PUSH
54555: LD_INT 83
54557: PPUSH
54558: LD_VAR 0 1
54562: PPUSH
54563: CALL_OW 321
54567: PUSH
54568: LD_INT 2
54570: EQUAL
54571: ST_TO_ADDR
54572: GO 54674
54574: LD_INT 17
54576: DOUBLE
54577: EQUAL
54578: IFTRUE 54582
54580: GO 54607
54582: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54583: LD_ADDR_VAR 0 3
54587: PUSH
54588: LD_INT 39
54590: PPUSH
54591: LD_VAR 0 1
54595: PPUSH
54596: CALL_OW 321
54600: PUSH
54601: LD_INT 2
54603: EQUAL
54604: ST_TO_ADDR
54605: GO 54674
54607: LD_INT 18
54609: DOUBLE
54610: EQUAL
54611: IFTRUE 54615
54613: GO 54640
54615: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54616: LD_ADDR_VAR 0 3
54620: PUSH
54621: LD_INT 40
54623: PPUSH
54624: LD_VAR 0 1
54628: PPUSH
54629: CALL_OW 321
54633: PUSH
54634: LD_INT 2
54636: EQUAL
54637: ST_TO_ADDR
54638: GO 54674
54640: LD_INT 27
54642: DOUBLE
54643: EQUAL
54644: IFTRUE 54648
54646: GO 54673
54648: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54649: LD_ADDR_VAR 0 3
54653: PUSH
54654: LD_INT 35
54656: PPUSH
54657: LD_VAR 0 1
54661: PPUSH
54662: CALL_OW 321
54666: PUSH
54667: LD_INT 2
54669: EQUAL
54670: ST_TO_ADDR
54671: GO 54674
54673: POP
// end ;
54674: LD_VAR 0 3
54678: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54679: LD_INT 0
54681: PPUSH
54682: PPUSH
54683: PPUSH
54684: PPUSH
54685: PPUSH
54686: PPUSH
54687: PPUSH
54688: PPUSH
54689: PPUSH
54690: PPUSH
54691: PPUSH
// result := false ;
54692: LD_ADDR_VAR 0 6
54696: PUSH
54697: LD_INT 0
54699: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54700: LD_VAR 0 1
54704: NOT
54705: PUSH
54706: LD_VAR 0 1
54710: PPUSH
54711: CALL_OW 266
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: IN
54726: NOT
54727: OR
54728: PUSH
54729: LD_VAR 0 2
54733: NOT
54734: OR
54735: PUSH
54736: LD_VAR 0 5
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: LD_INT 3
54752: PUSH
54753: LD_INT 4
54755: PUSH
54756: LD_INT 5
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: IN
54767: NOT
54768: OR
54769: PUSH
54770: LD_VAR 0 3
54774: PPUSH
54775: LD_VAR 0 4
54779: PPUSH
54780: CALL_OW 488
54784: NOT
54785: OR
54786: IFFALSE 54790
// exit ;
54788: GO 55526
// side := GetSide ( depot ) ;
54790: LD_ADDR_VAR 0 9
54794: PUSH
54795: LD_VAR 0 1
54799: PPUSH
54800: CALL_OW 255
54804: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54805: LD_VAR 0 9
54809: PPUSH
54810: LD_VAR 0 2
54814: PPUSH
54815: CALL 54303 0 2
54819: NOT
54820: IFFALSE 54824
// exit ;
54822: GO 55526
// pom := GetBase ( depot ) ;
54824: LD_ADDR_VAR 0 10
54828: PUSH
54829: LD_VAR 0 1
54833: PPUSH
54834: CALL_OW 274
54838: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54839: LD_ADDR_VAR 0 11
54843: PUSH
54844: LD_VAR 0 2
54848: PPUSH
54849: LD_VAR 0 1
54853: PPUSH
54854: CALL_OW 248
54858: PPUSH
54859: CALL_OW 450
54863: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54864: LD_VAR 0 10
54868: PPUSH
54869: LD_INT 1
54871: PPUSH
54872: CALL_OW 275
54876: PUSH
54877: LD_VAR 0 11
54881: PUSH
54882: LD_INT 1
54884: ARRAY
54885: GREATEREQUAL
54886: PUSH
54887: LD_VAR 0 10
54891: PPUSH
54892: LD_INT 2
54894: PPUSH
54895: CALL_OW 275
54899: PUSH
54900: LD_VAR 0 11
54904: PUSH
54905: LD_INT 2
54907: ARRAY
54908: GREATEREQUAL
54909: AND
54910: PUSH
54911: LD_VAR 0 10
54915: PPUSH
54916: LD_INT 3
54918: PPUSH
54919: CALL_OW 275
54923: PUSH
54924: LD_VAR 0 11
54928: PUSH
54929: LD_INT 3
54931: ARRAY
54932: GREATEREQUAL
54933: AND
54934: NOT
54935: IFFALSE 54939
// exit ;
54937: GO 55526
// if GetBType ( depot ) = b_depot then
54939: LD_VAR 0 1
54943: PPUSH
54944: CALL_OW 266
54948: PUSH
54949: LD_INT 0
54951: EQUAL
54952: IFFALSE 54964
// dist := 28 else
54954: LD_ADDR_VAR 0 14
54958: PUSH
54959: LD_INT 28
54961: ST_TO_ADDR
54962: GO 54972
// dist := 36 ;
54964: LD_ADDR_VAR 0 14
54968: PUSH
54969: LD_INT 36
54971: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54972: LD_VAR 0 1
54976: PPUSH
54977: LD_VAR 0 3
54981: PPUSH
54982: LD_VAR 0 4
54986: PPUSH
54987: CALL_OW 297
54991: PUSH
54992: LD_VAR 0 14
54996: GREATER
54997: IFFALSE 55001
// exit ;
54999: GO 55526
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55001: LD_ADDR_VAR 0 12
55005: PUSH
55006: LD_VAR 0 2
55010: PPUSH
55011: LD_VAR 0 3
55015: PPUSH
55016: LD_VAR 0 4
55020: PPUSH
55021: LD_VAR 0 5
55025: PPUSH
55026: LD_VAR 0 1
55030: PPUSH
55031: CALL_OW 248
55035: PPUSH
55036: LD_INT 0
55038: PPUSH
55039: CALL 55531 0 6
55043: ST_TO_ADDR
// if not hexes then
55044: LD_VAR 0 12
55048: NOT
55049: IFFALSE 55053
// exit ;
55051: GO 55526
// hex := GetHexInfo ( x , y ) ;
55053: LD_ADDR_VAR 0 15
55057: PUSH
55058: LD_VAR 0 3
55062: PPUSH
55063: LD_VAR 0 4
55067: PPUSH
55068: CALL_OW 546
55072: ST_TO_ADDR
// if hex [ 1 ] then
55073: LD_VAR 0 15
55077: PUSH
55078: LD_INT 1
55080: ARRAY
55081: IFFALSE 55085
// exit ;
55083: GO 55526
// height := hex [ 2 ] ;
55085: LD_ADDR_VAR 0 13
55089: PUSH
55090: LD_VAR 0 15
55094: PUSH
55095: LD_INT 2
55097: ARRAY
55098: ST_TO_ADDR
// for i = 1 to hexes do
55099: LD_ADDR_VAR 0 7
55103: PUSH
55104: DOUBLE
55105: LD_INT 1
55107: DEC
55108: ST_TO_ADDR
55109: LD_VAR 0 12
55113: PUSH
55114: FOR_TO
55115: IFFALSE 55445
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55117: LD_VAR 0 12
55121: PUSH
55122: LD_VAR 0 7
55126: ARRAY
55127: PUSH
55128: LD_INT 1
55130: ARRAY
55131: PPUSH
55132: LD_VAR 0 12
55136: PUSH
55137: LD_VAR 0 7
55141: ARRAY
55142: PUSH
55143: LD_INT 2
55145: ARRAY
55146: PPUSH
55147: CALL_OW 488
55151: NOT
55152: PUSH
55153: LD_VAR 0 12
55157: PUSH
55158: LD_VAR 0 7
55162: ARRAY
55163: PUSH
55164: LD_INT 1
55166: ARRAY
55167: PPUSH
55168: LD_VAR 0 12
55172: PUSH
55173: LD_VAR 0 7
55177: ARRAY
55178: PUSH
55179: LD_INT 2
55181: ARRAY
55182: PPUSH
55183: CALL_OW 428
55187: PUSH
55188: LD_INT 0
55190: GREATER
55191: OR
55192: PUSH
55193: LD_VAR 0 12
55197: PUSH
55198: LD_VAR 0 7
55202: ARRAY
55203: PUSH
55204: LD_INT 1
55206: ARRAY
55207: PPUSH
55208: LD_VAR 0 12
55212: PUSH
55213: LD_VAR 0 7
55217: ARRAY
55218: PUSH
55219: LD_INT 2
55221: ARRAY
55222: PPUSH
55223: CALL_OW 351
55227: OR
55228: IFFALSE 55234
// exit ;
55230: POP
55231: POP
55232: GO 55526
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55234: LD_ADDR_VAR 0 8
55238: PUSH
55239: LD_VAR 0 12
55243: PUSH
55244: LD_VAR 0 7
55248: ARRAY
55249: PUSH
55250: LD_INT 1
55252: ARRAY
55253: PPUSH
55254: LD_VAR 0 12
55258: PUSH
55259: LD_VAR 0 7
55263: ARRAY
55264: PUSH
55265: LD_INT 2
55267: ARRAY
55268: PPUSH
55269: CALL_OW 546
55273: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55274: LD_VAR 0 8
55278: PUSH
55279: LD_INT 1
55281: ARRAY
55282: PUSH
55283: LD_VAR 0 8
55287: PUSH
55288: LD_INT 2
55290: ARRAY
55291: PUSH
55292: LD_VAR 0 13
55296: PUSH
55297: LD_INT 2
55299: PLUS
55300: GREATER
55301: OR
55302: PUSH
55303: LD_VAR 0 8
55307: PUSH
55308: LD_INT 2
55310: ARRAY
55311: PUSH
55312: LD_VAR 0 13
55316: PUSH
55317: LD_INT 2
55319: MINUS
55320: LESS
55321: OR
55322: PUSH
55323: LD_VAR 0 8
55327: PUSH
55328: LD_INT 3
55330: ARRAY
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: LD_INT 8
55337: PUSH
55338: LD_INT 9
55340: PUSH
55341: LD_INT 10
55343: PUSH
55344: LD_INT 11
55346: PUSH
55347: LD_INT 12
55349: PUSH
55350: LD_INT 13
55352: PUSH
55353: LD_INT 16
55355: PUSH
55356: LD_INT 17
55358: PUSH
55359: LD_INT 18
55361: PUSH
55362: LD_INT 19
55364: PUSH
55365: LD_INT 20
55367: PUSH
55368: LD_INT 21
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: IN
55386: NOT
55387: OR
55388: PUSH
55389: LD_VAR 0 8
55393: PUSH
55394: LD_INT 5
55396: ARRAY
55397: NOT
55398: OR
55399: PUSH
55400: LD_VAR 0 8
55404: PUSH
55405: LD_INT 6
55407: ARRAY
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: LD_INT 7
55417: PUSH
55418: LD_INT 9
55420: PUSH
55421: LD_INT 10
55423: PUSH
55424: LD_INT 11
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: IN
55435: NOT
55436: OR
55437: IFFALSE 55443
// exit ;
55439: POP
55440: POP
55441: GO 55526
// end ;
55443: GO 55114
55445: POP
55446: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55447: LD_VAR 0 9
55451: PPUSH
55452: LD_VAR 0 3
55456: PPUSH
55457: LD_VAR 0 4
55461: PPUSH
55462: LD_INT 20
55464: PPUSH
55465: CALL 47478 0 4
55469: PUSH
55470: LD_INT 4
55472: ARRAY
55473: IFFALSE 55477
// exit ;
55475: GO 55526
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55477: LD_VAR 0 2
55481: PUSH
55482: LD_INT 29
55484: PUSH
55485: LD_INT 30
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: IN
55492: PUSH
55493: LD_VAR 0 3
55497: PPUSH
55498: LD_VAR 0 4
55502: PPUSH
55503: LD_VAR 0 9
55507: PPUSH
55508: CALL_OW 440
55512: NOT
55513: AND
55514: IFFALSE 55518
// exit ;
55516: GO 55526
// result := true ;
55518: LD_ADDR_VAR 0 6
55522: PUSH
55523: LD_INT 1
55525: ST_TO_ADDR
// end ;
55526: LD_VAR 0 6
55530: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55531: LD_INT 0
55533: PPUSH
55534: PPUSH
55535: PPUSH
55536: PPUSH
55537: PPUSH
55538: PPUSH
55539: PPUSH
55540: PPUSH
55541: PPUSH
55542: PPUSH
55543: PPUSH
55544: PPUSH
55545: PPUSH
55546: PPUSH
55547: PPUSH
55548: PPUSH
55549: PPUSH
55550: PPUSH
55551: PPUSH
55552: PPUSH
55553: PPUSH
55554: PPUSH
55555: PPUSH
55556: PPUSH
55557: PPUSH
55558: PPUSH
55559: PPUSH
55560: PPUSH
55561: PPUSH
55562: PPUSH
55563: PPUSH
55564: PPUSH
55565: PPUSH
55566: PPUSH
55567: PPUSH
55568: PPUSH
55569: PPUSH
55570: PPUSH
55571: PPUSH
55572: PPUSH
55573: PPUSH
55574: PPUSH
55575: PPUSH
55576: PPUSH
55577: PPUSH
55578: PPUSH
55579: PPUSH
55580: PPUSH
55581: PPUSH
55582: PPUSH
55583: PPUSH
55584: PPUSH
55585: PPUSH
55586: PPUSH
55587: PPUSH
55588: PPUSH
55589: PPUSH
55590: PPUSH
// result = [ ] ;
55591: LD_ADDR_VAR 0 7
55595: PUSH
55596: EMPTY
55597: ST_TO_ADDR
// temp_list = [ ] ;
55598: LD_ADDR_VAR 0 9
55602: PUSH
55603: EMPTY
55604: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55605: LD_VAR 0 4
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: LD_INT 4
55624: PUSH
55625: LD_INT 5
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: IN
55636: NOT
55637: PUSH
55638: LD_VAR 0 1
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: IN
55653: PUSH
55654: LD_VAR 0 5
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: LD_INT 3
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: LIST
55672: IN
55673: NOT
55674: AND
55675: OR
55676: IFFALSE 55680
// exit ;
55678: GO 74071
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55680: LD_VAR 0 1
55684: PUSH
55685: LD_INT 6
55687: PUSH
55688: LD_INT 7
55690: PUSH
55691: LD_INT 8
55693: PUSH
55694: LD_INT 13
55696: PUSH
55697: LD_INT 12
55699: PUSH
55700: LD_INT 15
55702: PUSH
55703: LD_INT 11
55705: PUSH
55706: LD_INT 14
55708: PUSH
55709: LD_INT 10
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: IN
55723: IFFALSE 55733
// btype = b_lab ;
55725: LD_ADDR_VAR 0 1
55729: PUSH
55730: LD_INT 6
55732: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55733: LD_VAR 0 6
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: LIST
55751: IN
55752: NOT
55753: PUSH
55754: LD_VAR 0 1
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: LD_INT 2
55767: PUSH
55768: LD_INT 3
55770: PUSH
55771: LD_INT 6
55773: PUSH
55774: LD_INT 36
55776: PUSH
55777: LD_INT 4
55779: PUSH
55780: LD_INT 5
55782: PUSH
55783: LD_INT 31
55785: PUSH
55786: LD_INT 32
55788: PUSH
55789: LD_INT 33
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: IN
55805: NOT
55806: PUSH
55807: LD_VAR 0 6
55811: PUSH
55812: LD_INT 1
55814: EQUAL
55815: AND
55816: OR
55817: PUSH
55818: LD_VAR 0 1
55822: PUSH
55823: LD_INT 2
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: IN
55833: NOT
55834: PUSH
55835: LD_VAR 0 6
55839: PUSH
55840: LD_INT 2
55842: EQUAL
55843: AND
55844: OR
55845: IFFALSE 55855
// mode = 0 ;
55847: LD_ADDR_VAR 0 6
55851: PUSH
55852: LD_INT 0
55854: ST_TO_ADDR
// case mode of 0 :
55855: LD_VAR 0 6
55859: PUSH
55860: LD_INT 0
55862: DOUBLE
55863: EQUAL
55864: IFTRUE 55868
55866: GO 67321
55868: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55869: LD_ADDR_VAR 0 11
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 3
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: LD_INT 3
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56062: LD_ADDR_VAR 0 12
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 2
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 3
56219: NEG
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 3
56230: NEG
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56258: LD_ADDR_VAR 0 13
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: LD_INT 2
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: LD_INT 2
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: LD_INT 2
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: LD_INT 3
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 3
56417: NEG
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 3
56429: NEG
56430: PUSH
56431: LD_INT 3
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56457: LD_ADDR_VAR 0 14
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: LD_INT 2
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 2
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 2
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: LD_INT 3
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56653: LD_ADDR_VAR 0 15
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 2
56776: NEG
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 3
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 3
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56846: LD_ADDR_VAR 0 16
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: LD_INT 2
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: LD_INT 2
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 2
56981: NEG
56982: PUSH
56983: LD_INT 2
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 3
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 3
57003: PUSH
57004: LD_INT 3
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: LD_INT 3
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57039: LD_ADDR_VAR 0 17
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: NEG
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: LD_INT 1
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 2
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: LD_INT 2
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: LD_INT 2
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57269: LD_ADDR_VAR 0 18
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: LD_INT 2
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 2
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 2
57445: NEG
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 2
57456: NEG
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 2
57468: NEG
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57499: LD_ADDR_VAR 0 19
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: LD_INT 2
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: LD_INT 1
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: LD_INT 2
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57729: LD_ADDR_VAR 0 20
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 2
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 2
57905: NEG
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 2
57916: NEG
57917: PUSH
57918: LD_INT 1
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 2
57928: NEG
57929: PUSH
57930: LD_INT 2
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57959: LD_ADDR_VAR 0 21
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 1
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: LD_INT 2
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 2
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: NEG
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 2
58146: NEG
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: LD_INT 2
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58189: LD_ADDR_VAR 0 22
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: LD_INT 2
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: LD_INT 2
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 2
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 2
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 2
58324: PUSH
58325: LD_INT 2
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: LD_INT 2
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 2
58365: NEG
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: NEG
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58419: LD_ADDR_VAR 0 23
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: LD_INT 1
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: LD_INT 2
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 2
58554: PUSH
58555: LD_INT 2
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: LD_INT 2
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 2
58606: NEG
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 2
58618: NEG
58619: PUSH
58620: LD_INT 2
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 2
58630: NEG
58631: PUSH
58632: LD_INT 3
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: LD_INT 3
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: LD_INT 2
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58699: LD_ADDR_VAR 0 24
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 1
58768: NEG
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: LD_INT 2
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: LD_INT 2
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 2
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: LD_INT 2
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: LD_INT 2
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 1
58864: NEG
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 2
58875: NEG
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 2
58898: NEG
58899: PUSH
58900: LD_INT 2
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 3
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 3
58942: PUSH
58943: LD_INT 2
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58975: LD_ADDR_VAR 0 25
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: NEG
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: LD_INT 2
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 2
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 2
59100: PUSH
59101: LD_INT 1
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 2
59110: PUSH
59111: LD_INT 2
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: LD_INT 2
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: LD_INT 2
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: NEG
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 2
59162: NEG
59163: PUSH
59164: LD_INT 1
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 3
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: PUSH
59207: LD_INT 3
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: LD_INT 3
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59249: LD_ADDR_VAR 0 26
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: LD_INT 1
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: LD_INT 2
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 2
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 2
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: LD_INT 2
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: LD_INT 2
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 2
59425: NEG
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 2
59436: NEG
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 2
59448: NEG
59449: PUSH
59450: LD_INT 2
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 2
59460: PUSH
59461: LD_INT 3
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: LD_INT 3
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 2
59491: NEG
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59525: LD_ADDR_VAR 0 27
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: NEG
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 2
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: LD_INT 1
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 2
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 2
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 2
59660: PUSH
59661: LD_INT 2
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: LD_INT 2
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: LD_INT 2
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: LD_INT 1
59716: NEG
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: LD_INT 2
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 3
59758: NEG
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 3
59770: NEG
59771: PUSH
59772: LD_INT 2
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59805: LD_ADDR_VAR 0 28
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: LD_INT 1
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: NEG
59875: PUSH
59876: LD_INT 1
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: LD_INT 2
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: LD_INT 2
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 2
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 2
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: LD_INT 2
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: PUSH
59951: LD_INT 2
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: LD_INT 2
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: NEG
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 2
59981: NEG
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 2
59992: NEG
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 2
60004: NEG
60005: PUSH
60006: LD_INT 2
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: LD_INT 3
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: LD_INT 3
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 3
60040: NEG
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 3
60052: NEG
60053: PUSH
60054: LD_INT 2
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60087: LD_ADDR_VAR 0 29
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: LD_INT 0
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: LD_INT 2
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: LD_INT 2
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: NEG
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 2
60265: NEG
60266: PUSH
60267: LD_INT 2
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 2
60277: NEG
60278: PUSH
60279: LD_INT 3
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 2
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 3
60300: PUSH
60301: LD_INT 1
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: LD_INT 3
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: LD_INT 2
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 3
60331: NEG
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60366: LD_ADDR_VAR 0 30
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: LD_INT 1
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: LD_INT 1
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: NEG
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 1
60447: NEG
60448: PUSH
60449: LD_INT 2
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: LD_INT 2
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 1
60470: PUSH
60471: LD_INT 1
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 2
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 2
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 2
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: LD_INT 1
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 2
60532: NEG
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 2
60543: NEG
60544: PUSH
60545: LD_INT 1
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 1
60555: NEG
60556: PUSH
60557: LD_INT 3
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: LD_INT 2
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 3
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 2
60588: PUSH
60589: LD_INT 3
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 2
60598: NEG
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 3
60609: NEG
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60644: LD_ADDR_VAR 0 31
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: LD_INT 2
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 2
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: LD_INT 2
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 2
60809: NEG
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 2
60821: NEG
60822: PUSH
60823: LD_INT 2
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 2
60833: NEG
60834: PUSH
60835: LD_INT 3
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 3
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 3
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: LD_INT 2
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 3
60887: NEG
60888: PUSH
60889: LD_INT 2
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60922: LD_ADDR_VAR 0 32
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: LD_INT 2
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 0
61015: PUSH
61016: LD_INT 2
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 2
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 2
61047: PUSH
61048: LD_INT 2
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 2
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: LD_INT 2
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: NEG
61100: PUSH
61101: LD_INT 1
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: LD_INT 3
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 3
61134: PUSH
61135: LD_INT 2
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 2
61144: PUSH
61145: LD_INT 3
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 3
61165: NEG
61166: PUSH
61167: LD_INT 1
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61200: LD_ADDR_VAR 0 33
61204: PUSH
61205: LD_INT 0
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 1
61258: NEG
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: NEG
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 2
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: LD_INT 2
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 2
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 2
61355: NEG
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 2
61366: NEG
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 2
61378: NEG
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 2
61390: NEG
61391: PUSH
61392: LD_INT 3
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: LD_INT 1
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 3
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: LD_INT 3
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: LD_INT 2
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 3
61444: NEG
61445: PUSH
61446: LD_INT 2
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61479: LD_ADDR_VAR 0 34
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: NEG
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: LD_INT 2
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: LD_INT 1
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 2
61594: PUSH
61595: LD_INT 1
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: LD_INT 2
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: LD_INT 2
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: LD_INT 1
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 2
61635: NEG
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: NEG
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 2
61658: NEG
61659: PUSH
61660: LD_INT 2
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 1
61670: NEG
61671: PUSH
61672: LD_INT 3
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: LD_INT 2
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 3
61693: PUSH
61694: LD_INT 2
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 2
61703: PUSH
61704: LD_INT 3
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 2
61713: NEG
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 3
61724: NEG
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61759: LD_ADDR_VAR 0 35
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: LD_INT 1
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 2
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 2
61850: NEG
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61871: LD_ADDR_VAR 0 36
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 1
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: NEG
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: LD_INT 2
61956: NEG
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61983: LD_ADDR_VAR 0 37
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: LD_INT 0
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: LD_INT 1
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: LD_INT 1
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 1
62052: NEG
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: LD_INT 1
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62095: LD_ADDR_VAR 0 38
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: LD_INT 1
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 1
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: NEG
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: NEG
62165: PUSH
62166: LD_INT 1
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 2
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 2
62186: NEG
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62207: LD_ADDR_VAR 0 39
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: LD_INT 1
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: NEG
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 1
62288: NEG
62289: PUSH
62290: LD_INT 2
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: PUSH
62301: LD_INT 2
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62319: LD_ADDR_VAR 0 40
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 1
62377: NEG
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 1
62388: NEG
62389: PUSH
62390: LD_INT 1
62392: NEG
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62431: LD_ADDR_VAR 0 41
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: LD_INT 0
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 1
62469: PUSH
62470: LD_INT 1
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 0
62479: PUSH
62480: LD_INT 1
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 1
62500: NEG
62501: PUSH
62502: LD_INT 1
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 1
62512: NEG
62513: PUSH
62514: LD_INT 2
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 2
62535: PUSH
62536: LD_INT 0
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 2
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 2
62555: PUSH
62556: LD_INT 2
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 1
62565: PUSH
62566: LD_INT 2
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 2
62586: NEG
62587: PUSH
62588: LD_INT 0
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 2
62597: NEG
62598: PUSH
62599: LD_INT 1
62601: NEG
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 2
62609: NEG
62610: PUSH
62611: LD_INT 2
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 2
62621: NEG
62622: PUSH
62623: LD_INT 3
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 3
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 3
62654: PUSH
62655: LD_INT 1
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 3
62664: PUSH
62665: LD_INT 2
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 3
62674: PUSH
62675: LD_INT 3
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 2
62684: PUSH
62685: LD_INT 3
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 2
62694: NEG
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 3
62705: NEG
62706: PUSH
62707: LD_INT 0
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 3
62716: NEG
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 3
62728: NEG
62729: PUSH
62730: LD_INT 2
62732: NEG
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 3
62740: NEG
62741: PUSH
62742: LD_INT 3
62744: NEG
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62781: LD_ADDR_VAR 0 42
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: LD_INT 1
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: LD_INT 1
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 1
62839: NEG
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 1
62850: NEG
62851: PUSH
62852: LD_INT 1
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 1
62862: NEG
62863: PUSH
62864: LD_INT 2
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: LD_INT 2
62877: NEG
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: PUSH
62886: LD_INT 1
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 2
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 2
62906: PUSH
62907: LD_INT 2
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: LD_INT 2
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 0
62926: PUSH
62927: LD_INT 2
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 1
62936: NEG
62937: PUSH
62938: LD_INT 1
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 2
62947: NEG
62948: PUSH
62949: LD_INT 1
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 2
62959: NEG
62960: PUSH
62961: LD_INT 2
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 2
62971: NEG
62972: PUSH
62973: LD_INT 3
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: NEG
62984: PUSH
62985: LD_INT 3
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: LD_INT 3
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: LD_INT 2
63009: NEG
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 3
63017: PUSH
63018: LD_INT 2
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 3
63027: PUSH
63028: LD_INT 3
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 2
63037: PUSH
63038: LD_INT 3
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 1
63047: PUSH
63048: LD_INT 3
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: LD_INT 3
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: LD_INT 2
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 3
63078: NEG
63079: PUSH
63080: LD_INT 2
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 3
63090: NEG
63091: PUSH
63092: LD_INT 3
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63131: LD_ADDR_VAR 0 43
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 1
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: NEG
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: LD_INT 2
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 0
63224: PUSH
63225: LD_INT 2
63227: NEG
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 1
63235: PUSH
63236: LD_INT 1
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 2
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 2
63256: PUSH
63257: LD_INT 1
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: PUSH
63267: LD_INT 2
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: LD_INT 2
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 2
63297: NEG
63298: PUSH
63299: LD_INT 0
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 2
63308: NEG
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: LD_INT 3
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: LD_INT 3
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 1
63343: PUSH
63344: LD_INT 2
63346: NEG
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 2
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 3
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 3
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: LD_INT 3
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: LD_INT 3
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: LD_INT 2
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 2
63416: NEG
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 3
63427: NEG
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 3
63438: NEG
63439: PUSH
63440: LD_INT 1
63442: NEG
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63479: LD_ADDR_VAR 0 44
63483: PUSH
63484: LD_INT 0
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 0
63496: PUSH
63497: LD_INT 1
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 1
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: LD_INT 1
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: LD_INT 1
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: LD_INT 1
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 1
63560: NEG
63561: PUSH
63562: LD_INT 2
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 1
63572: PUSH
63573: LD_INT 1
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: LD_INT 1
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 2
63603: PUSH
63604: LD_INT 2
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 1
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: NEG
63624: PUSH
63625: LD_INT 1
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 2
63634: NEG
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 2
63645: NEG
63646: PUSH
63647: LD_INT 1
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 2
63657: NEG
63658: PUSH
63659: LD_INT 2
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 2
63669: NEG
63670: PUSH
63671: LD_INT 3
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 2
63681: PUSH
63682: LD_INT 1
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 3
63692: PUSH
63693: LD_INT 0
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 3
63702: PUSH
63703: LD_INT 1
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 3
63712: PUSH
63713: LD_INT 2
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 3
63722: PUSH
63723: LD_INT 3
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 2
63732: PUSH
63733: LD_INT 3
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: LD_INT 1
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 3
63753: NEG
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 3
63764: NEG
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 3
63776: NEG
63777: PUSH
63778: LD_INT 2
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 3
63788: NEG
63789: PUSH
63790: LD_INT 3
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63829: LD_ADDR_VAR 0 45
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 1
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 1
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 0
63877: PUSH
63878: LD_INT 1
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 1
63887: NEG
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 1
63898: NEG
63899: PUSH
63900: LD_INT 1
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 1
63910: NEG
63911: PUSH
63912: LD_INT 2
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 0
63922: PUSH
63923: LD_INT 2
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 1
63933: PUSH
63934: LD_INT 1
63936: NEG
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 2
63944: PUSH
63945: LD_INT 1
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 2
63954: PUSH
63955: LD_INT 2
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: LD_INT 2
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 0
63974: PUSH
63975: LD_INT 2
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 1
63984: NEG
63985: PUSH
63986: LD_INT 1
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 2
63995: NEG
63996: PUSH
63997: LD_INT 1
63999: NEG
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 2
64007: NEG
64008: PUSH
64009: LD_INT 2
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 2
64019: NEG
64020: PUSH
64021: LD_INT 3
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: NEG
64032: PUSH
64033: LD_INT 3
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: LD_INT 3
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 1
64054: PUSH
64055: LD_INT 2
64057: NEG
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 3
64065: PUSH
64066: LD_INT 2
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 3
64075: PUSH
64076: LD_INT 3
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 2
64085: PUSH
64086: LD_INT 3
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: LD_INT 3
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: LD_INT 3
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: PUSH
64117: LD_INT 2
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 3
64126: NEG
64127: PUSH
64128: LD_INT 2
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 3
64138: NEG
64139: PUSH
64140: LD_INT 3
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64179: LD_ADDR_VAR 0 46
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: LD_INT 1
64199: NEG
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 1
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 1
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 1
64260: NEG
64261: PUSH
64262: LD_INT 2
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: LD_INT 2
64275: NEG
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: LD_INT 1
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 2
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 2
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 1
64314: PUSH
64315: LD_INT 2
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: LD_INT 2
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: LD_INT 1
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 2
64345: NEG
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 2
64356: NEG
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 1
64368: NEG
64369: PUSH
64370: LD_INT 3
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: LD_INT 3
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: LD_INT 2
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 2
64402: PUSH
64403: LD_INT 1
64405: NEG
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 3
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 3
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 1
64433: PUSH
64434: LD_INT 3
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: LD_INT 3
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: LD_INT 2
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 2
64464: NEG
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 3
64475: NEG
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 3
64486: NEG
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64527: LD_ADDR_VAR 0 47
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 1
64555: PUSH
64556: LD_INT 0
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 1
64565: PUSH
64566: LD_INT 1
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 0
64575: PUSH
64576: LD_INT 1
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 1
64585: NEG
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 1
64596: NEG
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 1
64608: NEG
64609: PUSH
64610: LD_INT 2
64612: NEG
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: LD_INT 2
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: LD_INT 1
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 2
64642: NEG
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 2
64654: NEG
64655: PUSH
64656: LD_INT 2
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64678: LD_ADDR_VAR 0 48
64682: PUSH
64683: LD_INT 0
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 0
64695: PUSH
64696: LD_INT 1
64698: NEG
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 1
64706: PUSH
64707: LD_INT 0
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 1
64716: PUSH
64717: LD_INT 1
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: LD_INT 1
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 1
64736: NEG
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 1
64747: NEG
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 1
64759: NEG
64760: PUSH
64761: LD_INT 2
64763: NEG
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 0
64771: PUSH
64772: LD_INT 2
64774: NEG
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 1
64782: PUSH
64783: LD_INT 1
64785: NEG
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 2
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 2
64803: PUSH
64804: LD_INT 1
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64825: LD_ADDR_VAR 0 49
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 0
64842: PUSH
64843: LD_INT 1
64845: NEG
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: LD_INT 0
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 1
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: LD_INT 1
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 1
64883: NEG
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 1
64894: NEG
64895: PUSH
64896: LD_INT 1
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: LD_INT 1
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 2
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 2
64927: PUSH
64928: LD_INT 1
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 2
64937: PUSH
64938: LD_INT 2
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 1
64947: PUSH
64948: LD_INT 2
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64969: LD_ADDR_VAR 0 50
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 0
64986: PUSH
64987: LD_INT 1
64989: NEG
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 1
64997: PUSH
64998: LD_INT 0
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: LD_INT 1
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 0
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 1
65038: NEG
65039: PUSH
65040: LD_INT 1
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 2
65050: PUSH
65051: LD_INT 1
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 2
65060: PUSH
65061: LD_INT 2
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 1
65070: PUSH
65071: LD_INT 2
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 0
65080: PUSH
65081: LD_INT 2
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 1
65090: NEG
65091: PUSH
65092: LD_INT 1
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65113: LD_ADDR_VAR 0 51
65117: PUSH
65118: LD_INT 0
65120: PUSH
65121: LD_INT 0
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: LD_INT 1
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 1
65141: PUSH
65142: LD_INT 0
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 1
65151: PUSH
65152: LD_INT 1
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 0
65161: PUSH
65162: LD_INT 1
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 1
65171: NEG
65172: PUSH
65173: LD_INT 0
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 1
65182: NEG
65183: PUSH
65184: LD_INT 1
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 1
65194: PUSH
65195: LD_INT 2
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 0
65204: PUSH
65205: LD_INT 2
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 1
65214: NEG
65215: PUSH
65216: LD_INT 1
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 2
65225: NEG
65226: PUSH
65227: LD_INT 0
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 2
65236: NEG
65237: PUSH
65238: LD_INT 1
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65260: LD_ADDR_VAR 0 52
65264: PUSH
65265: LD_INT 0
65267: PUSH
65268: LD_INT 0
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 0
65277: PUSH
65278: LD_INT 1
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 1
65288: PUSH
65289: LD_INT 0
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 1
65298: PUSH
65299: LD_INT 1
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 1
65318: NEG
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 1
65329: NEG
65330: PUSH
65331: LD_INT 1
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 1
65341: NEG
65342: PUSH
65343: LD_INT 2
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 1
65353: NEG
65354: PUSH
65355: LD_INT 1
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 2
65364: NEG
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 2
65375: NEG
65376: PUSH
65377: LD_INT 1
65379: NEG
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 2
65387: NEG
65388: PUSH
65389: LD_INT 2
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65411: LD_ADDR_VAR 0 53
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: LD_INT 0
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 0
65428: PUSH
65429: LD_INT 1
65431: NEG
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 1
65439: PUSH
65440: LD_INT 0
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 1
65449: PUSH
65450: LD_INT 1
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: LD_INT 1
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 1
65469: NEG
65470: PUSH
65471: LD_INT 0
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 1
65480: NEG
65481: PUSH
65482: LD_INT 1
65484: NEG
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 1
65492: NEG
65493: PUSH
65494: LD_INT 2
65496: NEG
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 0
65504: PUSH
65505: LD_INT 2
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 1
65515: PUSH
65516: LD_INT 1
65518: NEG
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 2
65526: PUSH
65527: LD_INT 0
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 2
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 2
65546: PUSH
65547: LD_INT 2
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 1
65556: PUSH
65557: LD_INT 2
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 0
65566: PUSH
65567: LD_INT 2
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 1
65576: NEG
65577: PUSH
65578: LD_INT 1
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 2
65587: NEG
65588: PUSH
65589: LD_INT 0
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 2
65598: NEG
65599: PUSH
65600: LD_INT 1
65602: NEG
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 2
65610: NEG
65611: PUSH
65612: LD_INT 2
65614: NEG
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65641: LD_ADDR_VAR 0 54
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: LD_INT 0
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 0
65658: PUSH
65659: LD_INT 1
65661: NEG
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: LD_INT 0
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 1
65679: PUSH
65680: LD_INT 1
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 0
65689: PUSH
65690: LD_INT 1
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 1
65699: NEG
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 1
65710: NEG
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 1
65722: NEG
65723: PUSH
65724: LD_INT 2
65726: NEG
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 0
65734: PUSH
65735: LD_INT 2
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: PUSH
65746: LD_INT 1
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 2
65756: PUSH
65757: LD_INT 0
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 2
65766: PUSH
65767: LD_INT 1
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 2
65776: PUSH
65777: LD_INT 2
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 1
65786: PUSH
65787: LD_INT 2
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 0
65796: PUSH
65797: LD_INT 2
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 1
65806: NEG
65807: PUSH
65808: LD_INT 1
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 2
65817: NEG
65818: PUSH
65819: LD_INT 0
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 2
65828: NEG
65829: PUSH
65830: LD_INT 1
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 2
65840: NEG
65841: PUSH
65842: LD_INT 2
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65871: LD_ADDR_VAR 0 55
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 0
65888: PUSH
65889: LD_INT 1
65891: NEG
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 1
65899: PUSH
65900: LD_INT 0
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 1
65909: PUSH
65910: LD_INT 1
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 0
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 1
65929: NEG
65930: PUSH
65931: LD_INT 0
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 1
65940: NEG
65941: PUSH
65942: LD_INT 1
65944: NEG
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 1
65952: NEG
65953: PUSH
65954: LD_INT 2
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 0
65964: PUSH
65965: LD_INT 2
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 1
65975: PUSH
65976: LD_INT 1
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 2
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 2
65996: PUSH
65997: LD_INT 1
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 2
66006: PUSH
66007: LD_INT 2
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 1
66016: PUSH
66017: LD_INT 2
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 0
66026: PUSH
66027: LD_INT 2
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 1
66036: NEG
66037: PUSH
66038: LD_INT 1
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 2
66047: NEG
66048: PUSH
66049: LD_INT 0
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 2
66058: NEG
66059: PUSH
66060: LD_INT 1
66062: NEG
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 2
66070: NEG
66071: PUSH
66072: LD_INT 2
66074: NEG
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66101: LD_ADDR_VAR 0 56
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: LD_INT 0
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 0
66118: PUSH
66119: LD_INT 1
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 1
66129: PUSH
66130: LD_INT 0
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: LD_INT 1
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 0
66149: PUSH
66150: LD_INT 1
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 1
66159: NEG
66160: PUSH
66161: LD_INT 0
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 1
66170: NEG
66171: PUSH
66172: LD_INT 1
66174: NEG
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 1
66182: NEG
66183: PUSH
66184: LD_INT 2
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: LD_INT 2
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 1
66205: PUSH
66206: LD_INT 1
66208: NEG
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 2
66216: PUSH
66217: LD_INT 0
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 2
66226: PUSH
66227: LD_INT 1
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 2
66236: PUSH
66237: LD_INT 2
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 1
66246: PUSH
66247: LD_INT 2
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 0
66256: PUSH
66257: LD_INT 2
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 1
66266: NEG
66267: PUSH
66268: LD_INT 1
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 2
66277: NEG
66278: PUSH
66279: LD_INT 0
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 2
66288: NEG
66289: PUSH
66290: LD_INT 1
66292: NEG
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 2
66300: NEG
66301: PUSH
66302: LD_INT 2
66304: NEG
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66331: LD_ADDR_VAR 0 57
66335: PUSH
66336: LD_INT 0
66338: PUSH
66339: LD_INT 0
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: LD_INT 1
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 1
66359: PUSH
66360: LD_INT 0
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 1
66369: PUSH
66370: LD_INT 1
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 0
66379: PUSH
66380: LD_INT 1
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 1
66389: NEG
66390: PUSH
66391: LD_INT 0
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 1
66400: NEG
66401: PUSH
66402: LD_INT 1
66404: NEG
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 1
66412: NEG
66413: PUSH
66414: LD_INT 2
66416: NEG
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 0
66424: PUSH
66425: LD_INT 2
66427: NEG
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 1
66435: PUSH
66436: LD_INT 1
66438: NEG
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 2
66446: PUSH
66447: LD_INT 0
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 2
66456: PUSH
66457: LD_INT 1
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 2
66466: PUSH
66467: LD_INT 2
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 1
66476: PUSH
66477: LD_INT 2
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 0
66486: PUSH
66487: LD_INT 2
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 1
66496: NEG
66497: PUSH
66498: LD_INT 1
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 2
66507: NEG
66508: PUSH
66509: LD_INT 0
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 2
66518: NEG
66519: PUSH
66520: LD_INT 1
66522: NEG
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 2
66530: NEG
66531: PUSH
66532: LD_INT 2
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66561: LD_ADDR_VAR 0 58
66565: PUSH
66566: LD_INT 0
66568: PUSH
66569: LD_INT 0
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 0
66578: PUSH
66579: LD_INT 1
66581: NEG
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 1
66589: PUSH
66590: LD_INT 0
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 1
66599: PUSH
66600: LD_INT 1
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 0
66609: PUSH
66610: LD_INT 1
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 1
66619: NEG
66620: PUSH
66621: LD_INT 0
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 1
66630: NEG
66631: PUSH
66632: LD_INT 1
66634: NEG
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 1
66642: NEG
66643: PUSH
66644: LD_INT 2
66646: NEG
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 0
66654: PUSH
66655: LD_INT 2
66657: NEG
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 1
66665: PUSH
66666: LD_INT 1
66668: NEG
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 2
66676: PUSH
66677: LD_INT 0
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 2
66686: PUSH
66687: LD_INT 1
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 2
66696: PUSH
66697: LD_INT 2
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 1
66706: PUSH
66707: LD_INT 2
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: LD_INT 2
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 1
66726: NEG
66727: PUSH
66728: LD_INT 1
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 2
66737: NEG
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 2
66748: NEG
66749: PUSH
66750: LD_INT 1
66752: NEG
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 2
66760: NEG
66761: PUSH
66762: LD_INT 2
66764: NEG
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66791: LD_ADDR_VAR 0 59
66795: PUSH
66796: LD_INT 0
66798: PUSH
66799: LD_INT 0
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: LD_INT 1
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 1
66819: PUSH
66820: LD_INT 0
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 1
66829: PUSH
66830: LD_INT 1
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 0
66839: PUSH
66840: LD_INT 1
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 1
66849: NEG
66850: PUSH
66851: LD_INT 0
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 1
66860: NEG
66861: PUSH
66862: LD_INT 1
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66879: LD_ADDR_VAR 0 60
66883: PUSH
66884: LD_INT 0
66886: PUSH
66887: LD_INT 0
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 0
66896: PUSH
66897: LD_INT 1
66899: NEG
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 1
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 1
66917: PUSH
66918: LD_INT 1
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 0
66927: PUSH
66928: LD_INT 1
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 1
66937: NEG
66938: PUSH
66939: LD_INT 0
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 1
66948: NEG
66949: PUSH
66950: LD_INT 1
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66967: LD_ADDR_VAR 0 61
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: LD_INT 0
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 0
66984: PUSH
66985: LD_INT 1
66987: NEG
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 1
66995: PUSH
66996: LD_INT 0
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 1
67005: PUSH
67006: LD_INT 1
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 0
67015: PUSH
67016: LD_INT 1
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 1
67025: NEG
67026: PUSH
67027: LD_INT 0
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 1
67036: NEG
67037: PUSH
67038: LD_INT 1
67040: NEG
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67055: LD_ADDR_VAR 0 62
67059: PUSH
67060: LD_INT 0
67062: PUSH
67063: LD_INT 0
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 0
67072: PUSH
67073: LD_INT 1
67075: NEG
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 1
67083: PUSH
67084: LD_INT 0
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 1
67093: PUSH
67094: LD_INT 1
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 0
67103: PUSH
67104: LD_INT 1
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 1
67113: NEG
67114: PUSH
67115: LD_INT 0
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 1
67124: NEG
67125: PUSH
67126: LD_INT 1
67128: NEG
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67143: LD_ADDR_VAR 0 63
67147: PUSH
67148: LD_INT 0
67150: PUSH
67151: LD_INT 0
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 0
67160: PUSH
67161: LD_INT 1
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 1
67171: PUSH
67172: LD_INT 0
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 1
67181: PUSH
67182: LD_INT 1
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: LD_INT 0
67191: PUSH
67192: LD_INT 1
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 1
67201: NEG
67202: PUSH
67203: LD_INT 0
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 1
67212: NEG
67213: PUSH
67214: LD_INT 1
67216: NEG
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67231: LD_ADDR_VAR 0 64
67235: PUSH
67236: LD_INT 0
67238: PUSH
67239: LD_INT 0
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 0
67248: PUSH
67249: LD_INT 1
67251: NEG
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 1
67259: PUSH
67260: LD_INT 0
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 1
67269: PUSH
67270: LD_INT 1
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 0
67279: PUSH
67280: LD_INT 1
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 1
67289: NEG
67290: PUSH
67291: LD_INT 0
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 1
67300: NEG
67301: PUSH
67302: LD_INT 1
67304: NEG
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: ST_TO_ADDR
// end ; 1 :
67319: GO 73216
67321: LD_INT 1
67323: DOUBLE
67324: EQUAL
67325: IFTRUE 67329
67327: GO 69952
67329: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67330: LD_ADDR_VAR 0 11
67334: PUSH
67335: LD_INT 1
67337: NEG
67338: PUSH
67339: LD_INT 3
67341: NEG
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 0
67349: PUSH
67350: LD_INT 3
67352: NEG
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 1
67360: PUSH
67361: LD_INT 2
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: LIST
67373: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67374: LD_ADDR_VAR 0 12
67378: PUSH
67379: LD_INT 2
67381: PUSH
67382: LD_INT 1
67384: NEG
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 3
67392: PUSH
67393: LD_INT 0
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 3
67402: PUSH
67403: LD_INT 1
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: LIST
67414: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67415: LD_ADDR_VAR 0 13
67419: PUSH
67420: LD_INT 3
67422: PUSH
67423: LD_INT 2
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 3
67432: PUSH
67433: LD_INT 3
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 2
67442: PUSH
67443: LD_INT 3
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: LIST
67454: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67455: LD_ADDR_VAR 0 14
67459: PUSH
67460: LD_INT 1
67462: PUSH
67463: LD_INT 3
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 0
67472: PUSH
67473: LD_INT 3
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 1
67482: NEG
67483: PUSH
67484: LD_INT 2
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: LIST
67495: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67496: LD_ADDR_VAR 0 15
67500: PUSH
67501: LD_INT 2
67503: NEG
67504: PUSH
67505: LD_INT 1
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 3
67514: NEG
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 3
67525: NEG
67526: PUSH
67527: LD_INT 1
67529: NEG
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: LIST
67539: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67540: LD_ADDR_VAR 0 16
67544: PUSH
67545: LD_INT 2
67547: NEG
67548: PUSH
67549: LD_INT 3
67551: NEG
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 3
67559: NEG
67560: PUSH
67561: LD_INT 2
67563: NEG
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 3
67571: NEG
67572: PUSH
67573: LD_INT 3
67575: NEG
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: LIST
67585: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67586: LD_ADDR_VAR 0 17
67590: PUSH
67591: LD_INT 1
67593: NEG
67594: PUSH
67595: LD_INT 3
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: LD_INT 3
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 1
67616: PUSH
67617: LD_INT 2
67619: NEG
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: LIST
67629: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67630: LD_ADDR_VAR 0 18
67634: PUSH
67635: LD_INT 2
67637: PUSH
67638: LD_INT 1
67640: NEG
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 3
67648: PUSH
67649: LD_INT 0
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 3
67658: PUSH
67659: LD_INT 1
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: LIST
67670: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67671: LD_ADDR_VAR 0 19
67675: PUSH
67676: LD_INT 3
67678: PUSH
67679: LD_INT 2
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 3
67688: PUSH
67689: LD_INT 3
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 2
67698: PUSH
67699: LD_INT 3
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: LIST
67710: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67711: LD_ADDR_VAR 0 20
67715: PUSH
67716: LD_INT 1
67718: PUSH
67719: LD_INT 3
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 0
67728: PUSH
67729: LD_INT 3
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 1
67738: NEG
67739: PUSH
67740: LD_INT 2
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: LIST
67751: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67752: LD_ADDR_VAR 0 21
67756: PUSH
67757: LD_INT 2
67759: NEG
67760: PUSH
67761: LD_INT 1
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 3
67770: NEG
67771: PUSH
67772: LD_INT 0
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 3
67781: NEG
67782: PUSH
67783: LD_INT 1
67785: NEG
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: LIST
67795: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67796: LD_ADDR_VAR 0 22
67800: PUSH
67801: LD_INT 2
67803: NEG
67804: PUSH
67805: LD_INT 3
67807: NEG
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 3
67815: NEG
67816: PUSH
67817: LD_INT 2
67819: NEG
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 3
67827: NEG
67828: PUSH
67829: LD_INT 3
67831: NEG
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: LIST
67841: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67842: LD_ADDR_VAR 0 23
67846: PUSH
67847: LD_INT 0
67849: PUSH
67850: LD_INT 3
67852: NEG
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 1
67860: NEG
67861: PUSH
67862: LD_INT 4
67864: NEG
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 1
67872: PUSH
67873: LD_INT 3
67875: NEG
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: LIST
67885: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67886: LD_ADDR_VAR 0 24
67890: PUSH
67891: LD_INT 3
67893: PUSH
67894: LD_INT 0
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 3
67903: PUSH
67904: LD_INT 1
67906: NEG
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 4
67914: PUSH
67915: LD_INT 1
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: LIST
67926: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67927: LD_ADDR_VAR 0 25
67931: PUSH
67932: LD_INT 3
67934: PUSH
67935: LD_INT 3
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 4
67944: PUSH
67945: LD_INT 3
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 3
67954: PUSH
67955: LD_INT 4
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: LIST
67966: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67967: LD_ADDR_VAR 0 26
67971: PUSH
67972: LD_INT 0
67974: PUSH
67975: LD_INT 3
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 1
67984: PUSH
67985: LD_INT 4
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 1
67994: NEG
67995: PUSH
67996: LD_INT 3
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: LIST
68007: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68008: LD_ADDR_VAR 0 27
68012: PUSH
68013: LD_INT 3
68015: NEG
68016: PUSH
68017: LD_INT 0
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 3
68026: NEG
68027: PUSH
68028: LD_INT 1
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 4
68037: NEG
68038: PUSH
68039: LD_INT 1
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: LIST
68051: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68052: LD_ADDR_VAR 0 28
68056: PUSH
68057: LD_INT 3
68059: NEG
68060: PUSH
68061: LD_INT 3
68063: NEG
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 3
68071: NEG
68072: PUSH
68073: LD_INT 4
68075: NEG
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 4
68083: NEG
68084: PUSH
68085: LD_INT 3
68087: NEG
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: LIST
68097: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68098: LD_ADDR_VAR 0 29
68102: PUSH
68103: LD_INT 1
68105: NEG
68106: PUSH
68107: LD_INT 3
68109: NEG
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 0
68117: PUSH
68118: LD_INT 3
68120: NEG
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 1
68128: PUSH
68129: LD_INT 2
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 1
68139: NEG
68140: PUSH
68141: LD_INT 4
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 0
68151: PUSH
68152: LD_INT 4
68154: NEG
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 1
68162: PUSH
68163: LD_INT 3
68165: NEG
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 1
68173: NEG
68174: PUSH
68175: LD_INT 5
68177: NEG
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 0
68185: PUSH
68186: LD_INT 5
68188: NEG
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 1
68196: PUSH
68197: LD_INT 4
68199: NEG
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 1
68207: NEG
68208: PUSH
68209: LD_INT 6
68211: NEG
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 0
68219: PUSH
68220: LD_INT 6
68222: NEG
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 1
68230: PUSH
68231: LD_INT 5
68233: NEG
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68253: LD_ADDR_VAR 0 30
68257: PUSH
68258: LD_INT 2
68260: PUSH
68261: LD_INT 1
68263: NEG
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 3
68271: PUSH
68272: LD_INT 0
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 3
68281: PUSH
68282: LD_INT 1
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 3
68291: PUSH
68292: LD_INT 1
68294: NEG
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 4
68302: PUSH
68303: LD_INT 0
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 4
68312: PUSH
68313: LD_INT 1
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 4
68322: PUSH
68323: LD_INT 1
68325: NEG
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 5
68333: PUSH
68334: LD_INT 0
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 5
68343: PUSH
68344: LD_INT 1
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 5
68353: PUSH
68354: LD_INT 1
68356: NEG
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 6
68364: PUSH
68365: LD_INT 0
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 6
68374: PUSH
68375: LD_INT 1
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68396: LD_ADDR_VAR 0 31
68400: PUSH
68401: LD_INT 3
68403: PUSH
68404: LD_INT 2
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 3
68413: PUSH
68414: LD_INT 3
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 2
68423: PUSH
68424: LD_INT 3
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 4
68433: PUSH
68434: LD_INT 3
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 4
68443: PUSH
68444: LD_INT 4
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 3
68453: PUSH
68454: LD_INT 4
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 5
68463: PUSH
68464: LD_INT 4
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 5
68473: PUSH
68474: LD_INT 5
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 4
68483: PUSH
68484: LD_INT 5
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 6
68493: PUSH
68494: LD_INT 5
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 6
68503: PUSH
68504: LD_INT 6
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 5
68513: PUSH
68514: LD_INT 6
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68535: LD_ADDR_VAR 0 32
68539: PUSH
68540: LD_INT 1
68542: PUSH
68543: LD_INT 3
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 0
68552: PUSH
68553: LD_INT 3
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 1
68562: NEG
68563: PUSH
68564: LD_INT 2
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 1
68573: PUSH
68574: LD_INT 4
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 0
68583: PUSH
68584: LD_INT 4
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 1
68593: NEG
68594: PUSH
68595: LD_INT 3
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 1
68604: PUSH
68605: LD_INT 5
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 0
68614: PUSH
68615: LD_INT 5
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 1
68624: NEG
68625: PUSH
68626: LD_INT 4
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 1
68635: PUSH
68636: LD_INT 6
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 0
68645: PUSH
68646: LD_INT 6
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 1
68655: NEG
68656: PUSH
68657: LD_INT 5
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68678: LD_ADDR_VAR 0 33
68682: PUSH
68683: LD_INT 2
68685: NEG
68686: PUSH
68687: LD_INT 1
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 3
68696: NEG
68697: PUSH
68698: LD_INT 0
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 3
68707: NEG
68708: PUSH
68709: LD_INT 1
68711: NEG
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 3
68719: NEG
68720: PUSH
68721: LD_INT 1
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 4
68730: NEG
68731: PUSH
68732: LD_INT 0
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 4
68741: NEG
68742: PUSH
68743: LD_INT 1
68745: NEG
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 4
68753: NEG
68754: PUSH
68755: LD_INT 1
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 5
68764: NEG
68765: PUSH
68766: LD_INT 0
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 5
68775: NEG
68776: PUSH
68777: LD_INT 1
68779: NEG
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 5
68787: NEG
68788: PUSH
68789: LD_INT 1
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 6
68798: NEG
68799: PUSH
68800: LD_INT 0
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 6
68809: NEG
68810: PUSH
68811: LD_INT 1
68813: NEG
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68833: LD_ADDR_VAR 0 34
68837: PUSH
68838: LD_INT 2
68840: NEG
68841: PUSH
68842: LD_INT 3
68844: NEG
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 3
68852: NEG
68853: PUSH
68854: LD_INT 2
68856: NEG
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 3
68864: NEG
68865: PUSH
68866: LD_INT 3
68868: NEG
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 3
68876: NEG
68877: PUSH
68878: LD_INT 4
68880: NEG
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 4
68888: NEG
68889: PUSH
68890: LD_INT 3
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 4
68900: NEG
68901: PUSH
68902: LD_INT 4
68904: NEG
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 4
68912: NEG
68913: PUSH
68914: LD_INT 5
68916: NEG
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 5
68924: NEG
68925: PUSH
68926: LD_INT 4
68928: NEG
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 5
68936: NEG
68937: PUSH
68938: LD_INT 5
68940: NEG
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 5
68948: NEG
68949: PUSH
68950: LD_INT 6
68952: NEG
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 6
68960: NEG
68961: PUSH
68962: LD_INT 5
68964: NEG
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 6
68972: NEG
68973: PUSH
68974: LD_INT 6
68976: NEG
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68996: LD_ADDR_VAR 0 41
69000: PUSH
69001: LD_INT 0
69003: PUSH
69004: LD_INT 2
69006: NEG
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 1
69014: NEG
69015: PUSH
69016: LD_INT 3
69018: NEG
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 1
69026: PUSH
69027: LD_INT 2
69029: NEG
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: LIST
69039: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69040: LD_ADDR_VAR 0 42
69044: PUSH
69045: LD_INT 2
69047: PUSH
69048: LD_INT 0
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 2
69057: PUSH
69058: LD_INT 1
69060: NEG
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 3
69068: PUSH
69069: LD_INT 1
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: LIST
69080: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69081: LD_ADDR_VAR 0 43
69085: PUSH
69086: LD_INT 2
69088: PUSH
69089: LD_INT 2
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 3
69098: PUSH
69099: LD_INT 2
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 2
69108: PUSH
69109: LD_INT 3
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: LIST
69120: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69121: LD_ADDR_VAR 0 44
69125: PUSH
69126: LD_INT 0
69128: PUSH
69129: LD_INT 2
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 1
69138: PUSH
69139: LD_INT 3
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 1
69148: NEG
69149: PUSH
69150: LD_INT 2
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: LIST
69161: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69162: LD_ADDR_VAR 0 45
69166: PUSH
69167: LD_INT 2
69169: NEG
69170: PUSH
69171: LD_INT 0
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 2
69180: NEG
69181: PUSH
69182: LD_INT 1
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 3
69191: NEG
69192: PUSH
69193: LD_INT 1
69195: NEG
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: LIST
69205: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69206: LD_ADDR_VAR 0 46
69210: PUSH
69211: LD_INT 2
69213: NEG
69214: PUSH
69215: LD_INT 2
69217: NEG
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 2
69225: NEG
69226: PUSH
69227: LD_INT 3
69229: NEG
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 3
69237: NEG
69238: PUSH
69239: LD_INT 2
69241: NEG
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: LIST
69251: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69252: LD_ADDR_VAR 0 47
69256: PUSH
69257: LD_INT 2
69259: NEG
69260: PUSH
69261: LD_INT 3
69263: NEG
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 1
69271: NEG
69272: PUSH
69273: LD_INT 3
69275: NEG
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69285: LD_ADDR_VAR 0 48
69289: PUSH
69290: LD_INT 1
69292: PUSH
69293: LD_INT 2
69295: NEG
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 2
69303: PUSH
69304: LD_INT 1
69306: NEG
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69316: LD_ADDR_VAR 0 49
69320: PUSH
69321: LD_INT 3
69323: PUSH
69324: LD_INT 1
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 3
69333: PUSH
69334: LD_INT 2
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69345: LD_ADDR_VAR 0 50
69349: PUSH
69350: LD_INT 2
69352: PUSH
69353: LD_INT 3
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: LD_INT 3
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69374: LD_ADDR_VAR 0 51
69378: PUSH
69379: LD_INT 1
69381: NEG
69382: PUSH
69383: LD_INT 2
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 2
69392: NEG
69393: PUSH
69394: LD_INT 1
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69405: LD_ADDR_VAR 0 52
69409: PUSH
69410: LD_INT 3
69412: NEG
69413: PUSH
69414: LD_INT 1
69416: NEG
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 3
69424: NEG
69425: PUSH
69426: LD_INT 2
69428: NEG
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69438: LD_ADDR_VAR 0 53
69442: PUSH
69443: LD_INT 1
69445: NEG
69446: PUSH
69447: LD_INT 3
69449: NEG
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 0
69457: PUSH
69458: LD_INT 3
69460: NEG
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 1
69468: PUSH
69469: LD_INT 2
69471: NEG
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: LIST
69481: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69482: LD_ADDR_VAR 0 54
69486: PUSH
69487: LD_INT 2
69489: PUSH
69490: LD_INT 1
69492: NEG
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 3
69500: PUSH
69501: LD_INT 0
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 3
69510: PUSH
69511: LD_INT 1
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: LIST
69522: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69523: LD_ADDR_VAR 0 55
69527: PUSH
69528: LD_INT 3
69530: PUSH
69531: LD_INT 2
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 3
69540: PUSH
69541: LD_INT 3
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 2
69550: PUSH
69551: LD_INT 3
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: LIST
69562: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69563: LD_ADDR_VAR 0 56
69567: PUSH
69568: LD_INT 1
69570: PUSH
69571: LD_INT 3
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 0
69580: PUSH
69581: LD_INT 3
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 1
69590: NEG
69591: PUSH
69592: LD_INT 2
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: LIST
69603: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69604: LD_ADDR_VAR 0 57
69608: PUSH
69609: LD_INT 2
69611: NEG
69612: PUSH
69613: LD_INT 1
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 3
69622: NEG
69623: PUSH
69624: LD_INT 0
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 3
69633: NEG
69634: PUSH
69635: LD_INT 1
69637: NEG
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: LIST
69647: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69648: LD_ADDR_VAR 0 58
69652: PUSH
69653: LD_INT 2
69655: NEG
69656: PUSH
69657: LD_INT 3
69659: NEG
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 3
69667: NEG
69668: PUSH
69669: LD_INT 2
69671: NEG
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 3
69679: NEG
69680: PUSH
69681: LD_INT 3
69683: NEG
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: LIST
69693: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69694: LD_ADDR_VAR 0 59
69698: PUSH
69699: LD_INT 1
69701: NEG
69702: PUSH
69703: LD_INT 2
69705: NEG
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 0
69713: PUSH
69714: LD_INT 2
69716: NEG
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 1
69724: PUSH
69725: LD_INT 1
69727: NEG
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: LIST
69737: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69738: LD_ADDR_VAR 0 60
69742: PUSH
69743: LD_INT 1
69745: PUSH
69746: LD_INT 1
69748: NEG
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 2
69756: PUSH
69757: LD_INT 0
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 2
69766: PUSH
69767: LD_INT 1
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: LIST
69778: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69779: LD_ADDR_VAR 0 61
69783: PUSH
69784: LD_INT 2
69786: PUSH
69787: LD_INT 1
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 2
69796: PUSH
69797: LD_INT 2
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PUSH
69804: LD_INT 1
69806: PUSH
69807: LD_INT 2
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: LIST
69818: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69819: LD_ADDR_VAR 0 62
69823: PUSH
69824: LD_INT 1
69826: PUSH
69827: LD_INT 2
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 0
69836: PUSH
69837: LD_INT 2
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: LD_INT 1
69846: NEG
69847: PUSH
69848: LD_INT 1
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: LIST
69859: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69860: LD_ADDR_VAR 0 63
69864: PUSH
69865: LD_INT 1
69867: NEG
69868: PUSH
69869: LD_INT 1
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 2
69878: NEG
69879: PUSH
69880: LD_INT 0
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 2
69889: NEG
69890: PUSH
69891: LD_INT 1
69893: NEG
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: LIST
69903: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69904: LD_ADDR_VAR 0 64
69908: PUSH
69909: LD_INT 1
69911: NEG
69912: PUSH
69913: LD_INT 2
69915: NEG
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 2
69923: NEG
69924: PUSH
69925: LD_INT 1
69927: NEG
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 2
69935: NEG
69936: PUSH
69937: LD_INT 2
69939: NEG
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: LIST
69949: ST_TO_ADDR
// end ; 2 :
69950: GO 73216
69952: LD_INT 2
69954: DOUBLE
69955: EQUAL
69956: IFTRUE 69960
69958: GO 73215
69960: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69961: LD_ADDR_VAR 0 29
69965: PUSH
69966: LD_INT 4
69968: PUSH
69969: LD_INT 0
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 4
69978: PUSH
69979: LD_INT 1
69981: NEG
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 5
69989: PUSH
69990: LD_INT 0
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 5
69999: PUSH
70000: LD_INT 1
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 4
70009: PUSH
70010: LD_INT 1
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 3
70019: PUSH
70020: LD_INT 0
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 3
70029: PUSH
70030: LD_INT 1
70032: NEG
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 3
70040: PUSH
70041: LD_INT 2
70043: NEG
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 5
70051: PUSH
70052: LD_INT 2
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 3
70061: PUSH
70062: LD_INT 3
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 3
70071: PUSH
70072: LD_INT 2
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 4
70081: PUSH
70082: LD_INT 3
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 4
70091: PUSH
70092: LD_INT 4
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 3
70101: PUSH
70102: LD_INT 4
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 2
70111: PUSH
70112: LD_INT 3
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 2
70121: PUSH
70122: LD_INT 2
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 4
70131: PUSH
70132: LD_INT 2
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 2
70141: PUSH
70142: LD_INT 4
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 0
70151: PUSH
70152: LD_INT 4
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 0
70161: PUSH
70162: LD_INT 3
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 1
70171: PUSH
70172: LD_INT 4
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 1
70181: PUSH
70182: LD_INT 5
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 0
70191: PUSH
70192: LD_INT 5
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 1
70201: NEG
70202: PUSH
70203: LD_INT 4
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 1
70212: NEG
70213: PUSH
70214: LD_INT 3
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 2
70223: PUSH
70224: LD_INT 5
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 2
70233: NEG
70234: PUSH
70235: LD_INT 3
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 3
70244: NEG
70245: PUSH
70246: LD_INT 0
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 3
70255: NEG
70256: PUSH
70257: LD_INT 1
70259: NEG
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 2
70267: NEG
70268: PUSH
70269: LD_INT 0
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: LD_INT 2
70278: NEG
70279: PUSH
70280: LD_INT 1
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 3
70289: NEG
70290: PUSH
70291: LD_INT 1
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 4
70300: NEG
70301: PUSH
70302: LD_INT 0
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 4
70311: NEG
70312: PUSH
70313: LD_INT 1
70315: NEG
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 4
70323: NEG
70324: PUSH
70325: LD_INT 2
70327: NEG
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 2
70335: NEG
70336: PUSH
70337: LD_INT 2
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 4
70346: NEG
70347: PUSH
70348: LD_INT 4
70350: NEG
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 4
70358: NEG
70359: PUSH
70360: LD_INT 5
70362: NEG
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 3
70370: NEG
70371: PUSH
70372: LD_INT 4
70374: NEG
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 3
70382: NEG
70383: PUSH
70384: LD_INT 3
70386: NEG
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 4
70394: NEG
70395: PUSH
70396: LD_INT 3
70398: NEG
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 5
70406: NEG
70407: PUSH
70408: LD_INT 4
70410: NEG
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: PUSH
70416: LD_INT 5
70418: NEG
70419: PUSH
70420: LD_INT 5
70422: NEG
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 3
70430: NEG
70431: PUSH
70432: LD_INT 5
70434: NEG
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 5
70442: NEG
70443: PUSH
70444: LD_INT 3
70446: NEG
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70499: LD_ADDR_VAR 0 30
70503: PUSH
70504: LD_INT 4
70506: PUSH
70507: LD_INT 4
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 4
70516: PUSH
70517: LD_INT 3
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: LD_INT 5
70526: PUSH
70527: LD_INT 4
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 5
70536: PUSH
70537: LD_INT 5
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 4
70546: PUSH
70547: LD_INT 5
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 3
70556: PUSH
70557: LD_INT 4
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 3
70566: PUSH
70567: LD_INT 3
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 5
70576: PUSH
70577: LD_INT 3
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 3
70586: PUSH
70587: LD_INT 5
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PUSH
70594: LD_INT 0
70596: PUSH
70597: LD_INT 3
70599: PUSH
70600: EMPTY
70601: LIST
70602: LIST
70603: PUSH
70604: LD_INT 0
70606: PUSH
70607: LD_INT 2
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 1
70616: PUSH
70617: LD_INT 3
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: LD_INT 1
70626: PUSH
70627: LD_INT 4
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: LD_INT 0
70636: PUSH
70637: LD_INT 4
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 1
70646: NEG
70647: PUSH
70648: LD_INT 3
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 1
70657: NEG
70658: PUSH
70659: LD_INT 2
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 2
70668: PUSH
70669: LD_INT 4
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: LD_INT 2
70678: NEG
70679: PUSH
70680: LD_INT 2
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 4
70689: NEG
70690: PUSH
70691: LD_INT 0
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 4
70700: NEG
70701: PUSH
70702: LD_INT 1
70704: NEG
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: PUSH
70710: LD_INT 3
70712: NEG
70713: PUSH
70714: LD_INT 0
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 3
70723: NEG
70724: PUSH
70725: LD_INT 1
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 4
70734: NEG
70735: PUSH
70736: LD_INT 1
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 5
70745: NEG
70746: PUSH
70747: LD_INT 0
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 5
70756: NEG
70757: PUSH
70758: LD_INT 1
70760: NEG
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 5
70768: NEG
70769: PUSH
70770: LD_INT 2
70772: NEG
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 3
70780: NEG
70781: PUSH
70782: LD_INT 2
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 3
70791: NEG
70792: PUSH
70793: LD_INT 3
70795: NEG
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: LD_INT 3
70803: NEG
70804: PUSH
70805: LD_INT 4
70807: NEG
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 2
70815: NEG
70816: PUSH
70817: LD_INT 3
70819: NEG
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 2
70827: NEG
70828: PUSH
70829: LD_INT 2
70831: NEG
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 3
70839: NEG
70840: PUSH
70841: LD_INT 2
70843: NEG
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 4
70851: NEG
70852: PUSH
70853: LD_INT 3
70855: NEG
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 4
70863: NEG
70864: PUSH
70865: LD_INT 4
70867: NEG
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 2
70875: NEG
70876: PUSH
70877: LD_INT 4
70879: NEG
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 4
70887: NEG
70888: PUSH
70889: LD_INT 2
70891: NEG
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 0
70899: PUSH
70900: LD_INT 4
70902: NEG
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 0
70910: PUSH
70911: LD_INT 5
70913: NEG
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 1
70921: PUSH
70922: LD_INT 4
70924: NEG
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: LD_INT 1
70932: PUSH
70933: LD_INT 3
70935: NEG
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PUSH
70941: LD_INT 0
70943: PUSH
70944: LD_INT 3
70946: NEG
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 1
70954: NEG
70955: PUSH
70956: LD_INT 4
70958: NEG
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 1
70966: NEG
70967: PUSH
70968: LD_INT 5
70970: NEG
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 2
70978: PUSH
70979: LD_INT 3
70981: NEG
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 2
70989: NEG
70990: PUSH
70991: LD_INT 5
70993: NEG
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71046: LD_ADDR_VAR 0 31
71050: PUSH
71051: LD_INT 0
71053: PUSH
71054: LD_INT 4
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 0
71063: PUSH
71064: LD_INT 3
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: LD_INT 1
71073: PUSH
71074: LD_INT 4
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 1
71083: PUSH
71084: LD_INT 5
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 0
71093: PUSH
71094: LD_INT 5
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 1
71103: NEG
71104: PUSH
71105: LD_INT 4
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 1
71114: NEG
71115: PUSH
71116: LD_INT 3
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: PUSH
71123: LD_INT 2
71125: PUSH
71126: LD_INT 5
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 2
71135: NEG
71136: PUSH
71137: LD_INT 3
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 3
71146: NEG
71147: PUSH
71148: LD_INT 0
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 3
71157: NEG
71158: PUSH
71159: LD_INT 1
71161: NEG
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: PUSH
71167: LD_INT 2
71169: NEG
71170: PUSH
71171: LD_INT 0
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PUSH
71178: LD_INT 2
71180: NEG
71181: PUSH
71182: LD_INT 1
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: PUSH
71189: LD_INT 3
71191: NEG
71192: PUSH
71193: LD_INT 1
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 4
71202: NEG
71203: PUSH
71204: LD_INT 0
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: PUSH
71211: LD_INT 4
71213: NEG
71214: PUSH
71215: LD_INT 1
71217: NEG
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 4
71225: NEG
71226: PUSH
71227: LD_INT 2
71229: NEG
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_INT 2
71237: NEG
71238: PUSH
71239: LD_INT 2
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 4
71248: NEG
71249: PUSH
71250: LD_INT 4
71252: NEG
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: LD_INT 4
71260: NEG
71261: PUSH
71262: LD_INT 5
71264: NEG
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 3
71272: NEG
71273: PUSH
71274: LD_INT 4
71276: NEG
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 3
71284: NEG
71285: PUSH
71286: LD_INT 3
71288: NEG
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 4
71296: NEG
71297: PUSH
71298: LD_INT 3
71300: NEG
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 5
71308: NEG
71309: PUSH
71310: LD_INT 4
71312: NEG
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 5
71320: NEG
71321: PUSH
71322: LD_INT 5
71324: NEG
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 3
71332: NEG
71333: PUSH
71334: LD_INT 5
71336: NEG
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 5
71344: NEG
71345: PUSH
71346: LD_INT 3
71348: NEG
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: LD_INT 0
71356: PUSH
71357: LD_INT 3
71359: NEG
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 0
71367: PUSH
71368: LD_INT 4
71370: NEG
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: PUSH
71376: LD_INT 1
71378: PUSH
71379: LD_INT 3
71381: NEG
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 1
71389: PUSH
71390: LD_INT 2
71392: NEG
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 0
71400: PUSH
71401: LD_INT 2
71403: NEG
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 1
71411: NEG
71412: PUSH
71413: LD_INT 3
71415: NEG
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PUSH
71421: LD_INT 1
71423: NEG
71424: PUSH
71425: LD_INT 4
71427: NEG
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PUSH
71433: LD_INT 2
71435: PUSH
71436: LD_INT 2
71438: NEG
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 2
71446: NEG
71447: PUSH
71448: LD_INT 4
71450: NEG
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 4
71458: PUSH
71459: LD_INT 0
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: LD_INT 4
71468: PUSH
71469: LD_INT 1
71471: NEG
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: PUSH
71477: LD_INT 5
71479: PUSH
71480: LD_INT 0
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 5
71489: PUSH
71490: LD_INT 1
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PUSH
71497: LD_INT 4
71499: PUSH
71500: LD_INT 1
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 3
71509: PUSH
71510: LD_INT 0
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 3
71519: PUSH
71520: LD_INT 1
71522: NEG
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 3
71530: PUSH
71531: LD_INT 2
71533: NEG
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 5
71541: PUSH
71542: LD_INT 2
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71596: LD_ADDR_VAR 0 32
71600: PUSH
71601: LD_INT 4
71603: NEG
71604: PUSH
71605: LD_INT 0
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: PUSH
71612: LD_INT 4
71614: NEG
71615: PUSH
71616: LD_INT 1
71618: NEG
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 3
71626: NEG
71627: PUSH
71628: LD_INT 0
71630: PUSH
71631: EMPTY
71632: LIST
71633: LIST
71634: PUSH
71635: LD_INT 3
71637: NEG
71638: PUSH
71639: LD_INT 1
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: PUSH
71646: LD_INT 4
71648: NEG
71649: PUSH
71650: LD_INT 1
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 5
71659: NEG
71660: PUSH
71661: LD_INT 0
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 5
71670: NEG
71671: PUSH
71672: LD_INT 1
71674: NEG
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: PUSH
71680: LD_INT 5
71682: NEG
71683: PUSH
71684: LD_INT 2
71686: NEG
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: PUSH
71692: LD_INT 3
71694: NEG
71695: PUSH
71696: LD_INT 2
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PUSH
71703: LD_INT 3
71705: NEG
71706: PUSH
71707: LD_INT 3
71709: NEG
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: LD_INT 3
71717: NEG
71718: PUSH
71719: LD_INT 4
71721: NEG
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 2
71729: NEG
71730: PUSH
71731: LD_INT 3
71733: NEG
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 2
71741: NEG
71742: PUSH
71743: LD_INT 2
71745: NEG
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_INT 3
71753: NEG
71754: PUSH
71755: LD_INT 2
71757: NEG
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 4
71765: NEG
71766: PUSH
71767: LD_INT 3
71769: NEG
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 4
71777: NEG
71778: PUSH
71779: LD_INT 4
71781: NEG
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 2
71789: NEG
71790: PUSH
71791: LD_INT 4
71793: NEG
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PUSH
71799: LD_INT 4
71801: NEG
71802: PUSH
71803: LD_INT 2
71805: NEG
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: LD_INT 0
71813: PUSH
71814: LD_INT 4
71816: NEG
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 0
71824: PUSH
71825: LD_INT 5
71827: NEG
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: PUSH
71833: LD_INT 1
71835: PUSH
71836: LD_INT 4
71838: NEG
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_INT 1
71846: PUSH
71847: LD_INT 3
71849: NEG
71850: PUSH
71851: EMPTY
71852: LIST
71853: LIST
71854: PUSH
71855: LD_INT 0
71857: PUSH
71858: LD_INT 3
71860: NEG
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: LD_INT 1
71868: NEG
71869: PUSH
71870: LD_INT 4
71872: NEG
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: PUSH
71878: LD_INT 1
71880: NEG
71881: PUSH
71882: LD_INT 5
71884: NEG
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: PUSH
71890: LD_INT 2
71892: PUSH
71893: LD_INT 3
71895: NEG
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: LD_INT 2
71903: NEG
71904: PUSH
71905: LD_INT 5
71907: NEG
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 3
71915: PUSH
71916: LD_INT 0
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: PUSH
71923: LD_INT 3
71925: PUSH
71926: LD_INT 1
71928: NEG
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: PUSH
71934: LD_INT 4
71936: PUSH
71937: LD_INT 0
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 4
71946: PUSH
71947: LD_INT 1
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: LD_INT 3
71956: PUSH
71957: LD_INT 1
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: PUSH
71964: LD_INT 2
71966: PUSH
71967: LD_INT 0
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: LD_INT 2
71976: PUSH
71977: LD_INT 1
71979: NEG
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: LD_INT 2
71987: PUSH
71988: LD_INT 2
71990: NEG
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: PUSH
71996: LD_INT 4
71998: PUSH
71999: LD_INT 2
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: PUSH
72006: LD_INT 4
72008: PUSH
72009: LD_INT 4
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: LD_INT 4
72018: PUSH
72019: LD_INT 3
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: PUSH
72026: LD_INT 5
72028: PUSH
72029: LD_INT 4
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: PUSH
72036: LD_INT 5
72038: PUSH
72039: LD_INT 5
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: PUSH
72046: LD_INT 4
72048: PUSH
72049: LD_INT 5
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: PUSH
72056: LD_INT 3
72058: PUSH
72059: LD_INT 4
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: PUSH
72066: LD_INT 3
72068: PUSH
72069: LD_INT 3
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: PUSH
72076: LD_INT 5
72078: PUSH
72079: LD_INT 3
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 3
72088: PUSH
72089: LD_INT 5
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72143: LD_ADDR_VAR 0 33
72147: PUSH
72148: LD_INT 4
72150: NEG
72151: PUSH
72152: LD_INT 4
72154: NEG
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_INT 4
72162: NEG
72163: PUSH
72164: LD_INT 5
72166: NEG
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_INT 3
72174: NEG
72175: PUSH
72176: LD_INT 4
72178: NEG
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: PUSH
72184: LD_INT 3
72186: NEG
72187: PUSH
72188: LD_INT 3
72190: NEG
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PUSH
72196: LD_INT 4
72198: NEG
72199: PUSH
72200: LD_INT 3
72202: NEG
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 5
72210: NEG
72211: PUSH
72212: LD_INT 4
72214: NEG
72215: PUSH
72216: EMPTY
72217: LIST
72218: LIST
72219: PUSH
72220: LD_INT 5
72222: NEG
72223: PUSH
72224: LD_INT 5
72226: NEG
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 3
72234: NEG
72235: PUSH
72236: LD_INT 5
72238: NEG
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_INT 5
72246: NEG
72247: PUSH
72248: LD_INT 3
72250: NEG
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: PUSH
72256: LD_INT 0
72258: PUSH
72259: LD_INT 3
72261: NEG
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 0
72269: PUSH
72270: LD_INT 4
72272: NEG
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 1
72280: PUSH
72281: LD_INT 3
72283: NEG
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 1
72291: PUSH
72292: LD_INT 2
72294: NEG
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PUSH
72300: LD_INT 0
72302: PUSH
72303: LD_INT 2
72305: NEG
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: PUSH
72311: LD_INT 1
72313: NEG
72314: PUSH
72315: LD_INT 3
72317: NEG
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: PUSH
72323: LD_INT 1
72325: NEG
72326: PUSH
72327: LD_INT 4
72329: NEG
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 2
72337: PUSH
72338: LD_INT 2
72340: NEG
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: PUSH
72346: LD_INT 2
72348: NEG
72349: PUSH
72350: LD_INT 4
72352: NEG
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 4
72360: PUSH
72361: LD_INT 0
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 4
72370: PUSH
72371: LD_INT 1
72373: NEG
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: PUSH
72379: LD_INT 5
72381: PUSH
72382: LD_INT 0
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: PUSH
72389: LD_INT 5
72391: PUSH
72392: LD_INT 1
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: PUSH
72399: LD_INT 4
72401: PUSH
72402: LD_INT 1
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PUSH
72409: LD_INT 3
72411: PUSH
72412: LD_INT 0
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 3
72421: PUSH
72422: LD_INT 1
72424: NEG
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 3
72432: PUSH
72433: LD_INT 2
72435: NEG
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 5
72443: PUSH
72444: LD_INT 2
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PUSH
72451: LD_INT 3
72453: PUSH
72454: LD_INT 3
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 3
72463: PUSH
72464: LD_INT 2
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: PUSH
72471: LD_INT 4
72473: PUSH
72474: LD_INT 3
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: PUSH
72481: LD_INT 4
72483: PUSH
72484: LD_INT 4
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 3
72493: PUSH
72494: LD_INT 4
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: PUSH
72501: LD_INT 2
72503: PUSH
72504: LD_INT 3
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: PUSH
72511: LD_INT 2
72513: PUSH
72514: LD_INT 2
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PUSH
72521: LD_INT 4
72523: PUSH
72524: LD_INT 2
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: PUSH
72531: LD_INT 2
72533: PUSH
72534: LD_INT 4
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: PUSH
72541: LD_INT 0
72543: PUSH
72544: LD_INT 4
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 0
72553: PUSH
72554: LD_INT 3
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 1
72563: PUSH
72564: LD_INT 4
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 1
72573: PUSH
72574: LD_INT 5
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: LD_INT 0
72583: PUSH
72584: LD_INT 5
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PUSH
72591: LD_INT 1
72593: NEG
72594: PUSH
72595: LD_INT 4
72597: PUSH
72598: EMPTY
72599: LIST
72600: LIST
72601: PUSH
72602: LD_INT 1
72604: NEG
72605: PUSH
72606: LD_INT 3
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 2
72615: PUSH
72616: LD_INT 5
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 2
72625: NEG
72626: PUSH
72627: LD_INT 3
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72681: LD_ADDR_VAR 0 34
72685: PUSH
72686: LD_INT 0
72688: PUSH
72689: LD_INT 4
72691: NEG
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PUSH
72697: LD_INT 0
72699: PUSH
72700: LD_INT 5
72702: NEG
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: PUSH
72708: LD_INT 1
72710: PUSH
72711: LD_INT 4
72713: NEG
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: LD_INT 1
72721: PUSH
72722: LD_INT 3
72724: NEG
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: PUSH
72730: LD_INT 0
72732: PUSH
72733: LD_INT 3
72735: NEG
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: LD_INT 1
72743: NEG
72744: PUSH
72745: LD_INT 4
72747: NEG
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: PUSH
72753: LD_INT 1
72755: NEG
72756: PUSH
72757: LD_INT 5
72759: NEG
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: PUSH
72765: LD_INT 2
72767: PUSH
72768: LD_INT 3
72770: NEG
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PUSH
72776: LD_INT 2
72778: NEG
72779: PUSH
72780: LD_INT 5
72782: NEG
72783: PUSH
72784: EMPTY
72785: LIST
72786: LIST
72787: PUSH
72788: LD_INT 3
72790: PUSH
72791: LD_INT 0
72793: PUSH
72794: EMPTY
72795: LIST
72796: LIST
72797: PUSH
72798: LD_INT 3
72800: PUSH
72801: LD_INT 1
72803: NEG
72804: PUSH
72805: EMPTY
72806: LIST
72807: LIST
72808: PUSH
72809: LD_INT 4
72811: PUSH
72812: LD_INT 0
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PUSH
72819: LD_INT 4
72821: PUSH
72822: LD_INT 1
72824: PUSH
72825: EMPTY
72826: LIST
72827: LIST
72828: PUSH
72829: LD_INT 3
72831: PUSH
72832: LD_INT 1
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: PUSH
72839: LD_INT 2
72841: PUSH
72842: LD_INT 0
72844: PUSH
72845: EMPTY
72846: LIST
72847: LIST
72848: PUSH
72849: LD_INT 2
72851: PUSH
72852: LD_INT 1
72854: NEG
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: PUSH
72860: LD_INT 2
72862: PUSH
72863: LD_INT 2
72865: NEG
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PUSH
72871: LD_INT 4
72873: PUSH
72874: LD_INT 2
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PUSH
72881: LD_INT 4
72883: PUSH
72884: LD_INT 4
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: PUSH
72891: LD_INT 4
72893: PUSH
72894: LD_INT 3
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 5
72903: PUSH
72904: LD_INT 4
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 5
72913: PUSH
72914: LD_INT 5
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 4
72923: PUSH
72924: LD_INT 5
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 3
72933: PUSH
72934: LD_INT 4
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: LD_INT 3
72943: PUSH
72944: LD_INT 3
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 5
72953: PUSH
72954: LD_INT 3
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 3
72963: PUSH
72964: LD_INT 5
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 0
72973: PUSH
72974: LD_INT 3
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 0
72983: PUSH
72984: LD_INT 2
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: PUSH
72991: LD_INT 1
72993: PUSH
72994: LD_INT 3
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: PUSH
73001: LD_INT 1
73003: PUSH
73004: LD_INT 4
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: PUSH
73011: LD_INT 0
73013: PUSH
73014: LD_INT 4
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: PUSH
73021: LD_INT 1
73023: NEG
73024: PUSH
73025: LD_INT 3
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: PUSH
73032: LD_INT 1
73034: NEG
73035: PUSH
73036: LD_INT 2
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PUSH
73043: LD_INT 2
73045: PUSH
73046: LD_INT 4
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: PUSH
73053: LD_INT 2
73055: NEG
73056: PUSH
73057: LD_INT 2
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: LD_INT 4
73066: NEG
73067: PUSH
73068: LD_INT 0
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: PUSH
73075: LD_INT 4
73077: NEG
73078: PUSH
73079: LD_INT 1
73081: NEG
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: PUSH
73087: LD_INT 3
73089: NEG
73090: PUSH
73091: LD_INT 0
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: PUSH
73098: LD_INT 3
73100: NEG
73101: PUSH
73102: LD_INT 1
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: LD_INT 4
73111: NEG
73112: PUSH
73113: LD_INT 1
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: PUSH
73120: LD_INT 5
73122: NEG
73123: PUSH
73124: LD_INT 0
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: PUSH
73131: LD_INT 5
73133: NEG
73134: PUSH
73135: LD_INT 1
73137: NEG
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: PUSH
73143: LD_INT 5
73145: NEG
73146: PUSH
73147: LD_INT 2
73149: NEG
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: PUSH
73155: LD_INT 3
73157: NEG
73158: PUSH
73159: LD_INT 2
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: ST_TO_ADDR
// end ; end ;
73213: GO 73216
73215: POP
// case btype of b_depot , b_warehouse :
73216: LD_VAR 0 1
73220: PUSH
73221: LD_INT 0
73223: DOUBLE
73224: EQUAL
73225: IFTRUE 73235
73227: LD_INT 1
73229: DOUBLE
73230: EQUAL
73231: IFTRUE 73235
73233: GO 73436
73235: POP
// case nation of nation_american :
73236: LD_VAR 0 5
73240: PUSH
73241: LD_INT 1
73243: DOUBLE
73244: EQUAL
73245: IFTRUE 73249
73247: GO 73305
73249: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73250: LD_ADDR_VAR 0 9
73254: PUSH
73255: LD_VAR 0 11
73259: PUSH
73260: LD_VAR 0 12
73264: PUSH
73265: LD_VAR 0 13
73269: PUSH
73270: LD_VAR 0 14
73274: PUSH
73275: LD_VAR 0 15
73279: PUSH
73280: LD_VAR 0 16
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: PUSH
73293: LD_VAR 0 4
73297: PUSH
73298: LD_INT 1
73300: PLUS
73301: ARRAY
73302: ST_TO_ADDR
73303: GO 73434
73305: LD_INT 2
73307: DOUBLE
73308: EQUAL
73309: IFTRUE 73313
73311: GO 73369
73313: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73314: LD_ADDR_VAR 0 9
73318: PUSH
73319: LD_VAR 0 17
73323: PUSH
73324: LD_VAR 0 18
73328: PUSH
73329: LD_VAR 0 19
73333: PUSH
73334: LD_VAR 0 20
73338: PUSH
73339: LD_VAR 0 21
73343: PUSH
73344: LD_VAR 0 22
73348: PUSH
73349: EMPTY
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: PUSH
73357: LD_VAR 0 4
73361: PUSH
73362: LD_INT 1
73364: PLUS
73365: ARRAY
73366: ST_TO_ADDR
73367: GO 73434
73369: LD_INT 3
73371: DOUBLE
73372: EQUAL
73373: IFTRUE 73377
73375: GO 73433
73377: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73378: LD_ADDR_VAR 0 9
73382: PUSH
73383: LD_VAR 0 23
73387: PUSH
73388: LD_VAR 0 24
73392: PUSH
73393: LD_VAR 0 25
73397: PUSH
73398: LD_VAR 0 26
73402: PUSH
73403: LD_VAR 0 27
73407: PUSH
73408: LD_VAR 0 28
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: PUSH
73421: LD_VAR 0 4
73425: PUSH
73426: LD_INT 1
73428: PLUS
73429: ARRAY
73430: ST_TO_ADDR
73431: GO 73434
73433: POP
73434: GO 73989
73436: LD_INT 2
73438: DOUBLE
73439: EQUAL
73440: IFTRUE 73450
73442: LD_INT 3
73444: DOUBLE
73445: EQUAL
73446: IFTRUE 73450
73448: GO 73506
73450: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73451: LD_ADDR_VAR 0 9
73455: PUSH
73456: LD_VAR 0 29
73460: PUSH
73461: LD_VAR 0 30
73465: PUSH
73466: LD_VAR 0 31
73470: PUSH
73471: LD_VAR 0 32
73475: PUSH
73476: LD_VAR 0 33
73480: PUSH
73481: LD_VAR 0 34
73485: PUSH
73486: EMPTY
73487: LIST
73488: LIST
73489: LIST
73490: LIST
73491: LIST
73492: LIST
73493: PUSH
73494: LD_VAR 0 4
73498: PUSH
73499: LD_INT 1
73501: PLUS
73502: ARRAY
73503: ST_TO_ADDR
73504: GO 73989
73506: LD_INT 16
73508: DOUBLE
73509: EQUAL
73510: IFTRUE 73568
73512: LD_INT 17
73514: DOUBLE
73515: EQUAL
73516: IFTRUE 73568
73518: LD_INT 18
73520: DOUBLE
73521: EQUAL
73522: IFTRUE 73568
73524: LD_INT 19
73526: DOUBLE
73527: EQUAL
73528: IFTRUE 73568
73530: LD_INT 22
73532: DOUBLE
73533: EQUAL
73534: IFTRUE 73568
73536: LD_INT 20
73538: DOUBLE
73539: EQUAL
73540: IFTRUE 73568
73542: LD_INT 21
73544: DOUBLE
73545: EQUAL
73546: IFTRUE 73568
73548: LD_INT 23
73550: DOUBLE
73551: EQUAL
73552: IFTRUE 73568
73554: LD_INT 24
73556: DOUBLE
73557: EQUAL
73558: IFTRUE 73568
73560: LD_INT 25
73562: DOUBLE
73563: EQUAL
73564: IFTRUE 73568
73566: GO 73624
73568: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73569: LD_ADDR_VAR 0 9
73573: PUSH
73574: LD_VAR 0 35
73578: PUSH
73579: LD_VAR 0 36
73583: PUSH
73584: LD_VAR 0 37
73588: PUSH
73589: LD_VAR 0 38
73593: PUSH
73594: LD_VAR 0 39
73598: PUSH
73599: LD_VAR 0 40
73603: PUSH
73604: EMPTY
73605: LIST
73606: LIST
73607: LIST
73608: LIST
73609: LIST
73610: LIST
73611: PUSH
73612: LD_VAR 0 4
73616: PUSH
73617: LD_INT 1
73619: PLUS
73620: ARRAY
73621: ST_TO_ADDR
73622: GO 73989
73624: LD_INT 6
73626: DOUBLE
73627: EQUAL
73628: IFTRUE 73680
73630: LD_INT 7
73632: DOUBLE
73633: EQUAL
73634: IFTRUE 73680
73636: LD_INT 8
73638: DOUBLE
73639: EQUAL
73640: IFTRUE 73680
73642: LD_INT 13
73644: DOUBLE
73645: EQUAL
73646: IFTRUE 73680
73648: LD_INT 12
73650: DOUBLE
73651: EQUAL
73652: IFTRUE 73680
73654: LD_INT 15
73656: DOUBLE
73657: EQUAL
73658: IFTRUE 73680
73660: LD_INT 11
73662: DOUBLE
73663: EQUAL
73664: IFTRUE 73680
73666: LD_INT 14
73668: DOUBLE
73669: EQUAL
73670: IFTRUE 73680
73672: LD_INT 10
73674: DOUBLE
73675: EQUAL
73676: IFTRUE 73680
73678: GO 73736
73680: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73681: LD_ADDR_VAR 0 9
73685: PUSH
73686: LD_VAR 0 41
73690: PUSH
73691: LD_VAR 0 42
73695: PUSH
73696: LD_VAR 0 43
73700: PUSH
73701: LD_VAR 0 44
73705: PUSH
73706: LD_VAR 0 45
73710: PUSH
73711: LD_VAR 0 46
73715: PUSH
73716: EMPTY
73717: LIST
73718: LIST
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: PUSH
73724: LD_VAR 0 4
73728: PUSH
73729: LD_INT 1
73731: PLUS
73732: ARRAY
73733: ST_TO_ADDR
73734: GO 73989
73736: LD_INT 36
73738: DOUBLE
73739: EQUAL
73740: IFTRUE 73744
73742: GO 73800
73744: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73745: LD_ADDR_VAR 0 9
73749: PUSH
73750: LD_VAR 0 47
73754: PUSH
73755: LD_VAR 0 48
73759: PUSH
73760: LD_VAR 0 49
73764: PUSH
73765: LD_VAR 0 50
73769: PUSH
73770: LD_VAR 0 51
73774: PUSH
73775: LD_VAR 0 52
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: LIST
73784: LIST
73785: LIST
73786: LIST
73787: PUSH
73788: LD_VAR 0 4
73792: PUSH
73793: LD_INT 1
73795: PLUS
73796: ARRAY
73797: ST_TO_ADDR
73798: GO 73989
73800: LD_INT 4
73802: DOUBLE
73803: EQUAL
73804: IFTRUE 73826
73806: LD_INT 5
73808: DOUBLE
73809: EQUAL
73810: IFTRUE 73826
73812: LD_INT 34
73814: DOUBLE
73815: EQUAL
73816: IFTRUE 73826
73818: LD_INT 37
73820: DOUBLE
73821: EQUAL
73822: IFTRUE 73826
73824: GO 73882
73826: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73827: LD_ADDR_VAR 0 9
73831: PUSH
73832: LD_VAR 0 53
73836: PUSH
73837: LD_VAR 0 54
73841: PUSH
73842: LD_VAR 0 55
73846: PUSH
73847: LD_VAR 0 56
73851: PUSH
73852: LD_VAR 0 57
73856: PUSH
73857: LD_VAR 0 58
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: PUSH
73870: LD_VAR 0 4
73874: PUSH
73875: LD_INT 1
73877: PLUS
73878: ARRAY
73879: ST_TO_ADDR
73880: GO 73989
73882: LD_INT 31
73884: DOUBLE
73885: EQUAL
73886: IFTRUE 73932
73888: LD_INT 32
73890: DOUBLE
73891: EQUAL
73892: IFTRUE 73932
73894: LD_INT 33
73896: DOUBLE
73897: EQUAL
73898: IFTRUE 73932
73900: LD_INT 27
73902: DOUBLE
73903: EQUAL
73904: IFTRUE 73932
73906: LD_INT 26
73908: DOUBLE
73909: EQUAL
73910: IFTRUE 73932
73912: LD_INT 28
73914: DOUBLE
73915: EQUAL
73916: IFTRUE 73932
73918: LD_INT 29
73920: DOUBLE
73921: EQUAL
73922: IFTRUE 73932
73924: LD_INT 30
73926: DOUBLE
73927: EQUAL
73928: IFTRUE 73932
73930: GO 73988
73932: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73933: LD_ADDR_VAR 0 9
73937: PUSH
73938: LD_VAR 0 59
73942: PUSH
73943: LD_VAR 0 60
73947: PUSH
73948: LD_VAR 0 61
73952: PUSH
73953: LD_VAR 0 62
73957: PUSH
73958: LD_VAR 0 63
73962: PUSH
73963: LD_VAR 0 64
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: LIST
73972: LIST
73973: LIST
73974: LIST
73975: PUSH
73976: LD_VAR 0 4
73980: PUSH
73981: LD_INT 1
73983: PLUS
73984: ARRAY
73985: ST_TO_ADDR
73986: GO 73989
73988: POP
// temp_list2 = [ ] ;
73989: LD_ADDR_VAR 0 10
73993: PUSH
73994: EMPTY
73995: ST_TO_ADDR
// for i in temp_list do
73996: LD_ADDR_VAR 0 8
74000: PUSH
74001: LD_VAR 0 9
74005: PUSH
74006: FOR_IN
74007: IFFALSE 74059
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74009: LD_ADDR_VAR 0 10
74013: PUSH
74014: LD_VAR 0 10
74018: PUSH
74019: LD_VAR 0 8
74023: PUSH
74024: LD_INT 1
74026: ARRAY
74027: PUSH
74028: LD_VAR 0 2
74032: PLUS
74033: PUSH
74034: LD_VAR 0 8
74038: PUSH
74039: LD_INT 2
74041: ARRAY
74042: PUSH
74043: LD_VAR 0 3
74047: PLUS
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: PUSH
74053: EMPTY
74054: LIST
74055: ADD
74056: ST_TO_ADDR
74057: GO 74006
74059: POP
74060: POP
// result = temp_list2 ;
74061: LD_ADDR_VAR 0 7
74065: PUSH
74066: LD_VAR 0 10
74070: ST_TO_ADDR
// end ;
74071: LD_VAR 0 7
74075: RET
// export function EnemyInRange ( unit , dist ) ; begin
74076: LD_INT 0
74078: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74079: LD_ADDR_VAR 0 3
74083: PUSH
74084: LD_VAR 0 1
74088: PPUSH
74089: CALL_OW 255
74093: PPUSH
74094: LD_VAR 0 1
74098: PPUSH
74099: CALL_OW 250
74103: PPUSH
74104: LD_VAR 0 1
74108: PPUSH
74109: CALL_OW 251
74113: PPUSH
74114: LD_VAR 0 2
74118: PPUSH
74119: CALL 47478 0 4
74123: PUSH
74124: LD_INT 4
74126: ARRAY
74127: ST_TO_ADDR
// end ;
74128: LD_VAR 0 3
74132: RET
// export function PlayerSeeMe ( unit ) ; begin
74133: LD_INT 0
74135: PPUSH
// result := See ( your_side , unit ) ;
74136: LD_ADDR_VAR 0 2
74140: PUSH
74141: LD_OWVAR 2
74145: PPUSH
74146: LD_VAR 0 1
74150: PPUSH
74151: CALL_OW 292
74155: ST_TO_ADDR
// end ;
74156: LD_VAR 0 2
74160: RET
// export function ReverseDir ( unit ) ; begin
74161: LD_INT 0
74163: PPUSH
// if not unit then
74164: LD_VAR 0 1
74168: NOT
74169: IFFALSE 74173
// exit ;
74171: GO 74196
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74173: LD_ADDR_VAR 0 2
74177: PUSH
74178: LD_VAR 0 1
74182: PPUSH
74183: CALL_OW 254
74187: PUSH
74188: LD_INT 3
74190: PLUS
74191: PUSH
74192: LD_INT 6
74194: MOD
74195: ST_TO_ADDR
// end ;
74196: LD_VAR 0 2
74200: RET
// export function ReverseArray ( array ) ; var i ; begin
74201: LD_INT 0
74203: PPUSH
74204: PPUSH
// if not array then
74205: LD_VAR 0 1
74209: NOT
74210: IFFALSE 74214
// exit ;
74212: GO 74269
// result := [ ] ;
74214: LD_ADDR_VAR 0 2
74218: PUSH
74219: EMPTY
74220: ST_TO_ADDR
// for i := array downto 1 do
74221: LD_ADDR_VAR 0 3
74225: PUSH
74226: DOUBLE
74227: LD_VAR 0 1
74231: INC
74232: ST_TO_ADDR
74233: LD_INT 1
74235: PUSH
74236: FOR_DOWNTO
74237: IFFALSE 74267
// result := Join ( result , array [ i ] ) ;
74239: LD_ADDR_VAR 0 2
74243: PUSH
74244: LD_VAR 0 2
74248: PPUSH
74249: LD_VAR 0 1
74253: PUSH
74254: LD_VAR 0 3
74258: ARRAY
74259: PPUSH
74260: CALL 78912 0 2
74264: ST_TO_ADDR
74265: GO 74236
74267: POP
74268: POP
// end ;
74269: LD_VAR 0 2
74273: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74274: LD_INT 0
74276: PPUSH
74277: PPUSH
74278: PPUSH
74279: PPUSH
74280: PPUSH
74281: PPUSH
// if not unit or not hexes then
74282: LD_VAR 0 1
74286: NOT
74287: PUSH
74288: LD_VAR 0 2
74292: NOT
74293: OR
74294: IFFALSE 74298
// exit ;
74296: GO 74421
// dist := 9999 ;
74298: LD_ADDR_VAR 0 5
74302: PUSH
74303: LD_INT 9999
74305: ST_TO_ADDR
// for i = 1 to hexes do
74306: LD_ADDR_VAR 0 4
74310: PUSH
74311: DOUBLE
74312: LD_INT 1
74314: DEC
74315: ST_TO_ADDR
74316: LD_VAR 0 2
74320: PUSH
74321: FOR_TO
74322: IFFALSE 74409
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74324: LD_ADDR_VAR 0 6
74328: PUSH
74329: LD_VAR 0 1
74333: PPUSH
74334: LD_VAR 0 2
74338: PUSH
74339: LD_VAR 0 4
74343: ARRAY
74344: PUSH
74345: LD_INT 1
74347: ARRAY
74348: PPUSH
74349: LD_VAR 0 2
74353: PUSH
74354: LD_VAR 0 4
74358: ARRAY
74359: PUSH
74360: LD_INT 2
74362: ARRAY
74363: PPUSH
74364: CALL_OW 297
74368: ST_TO_ADDR
// if tdist < dist then
74369: LD_VAR 0 6
74373: PUSH
74374: LD_VAR 0 5
74378: LESS
74379: IFFALSE 74407
// begin hex := hexes [ i ] ;
74381: LD_ADDR_VAR 0 8
74385: PUSH
74386: LD_VAR 0 2
74390: PUSH
74391: LD_VAR 0 4
74395: ARRAY
74396: ST_TO_ADDR
// dist := tdist ;
74397: LD_ADDR_VAR 0 5
74401: PUSH
74402: LD_VAR 0 6
74406: ST_TO_ADDR
// end ; end ;
74407: GO 74321
74409: POP
74410: POP
// result := hex ;
74411: LD_ADDR_VAR 0 3
74415: PUSH
74416: LD_VAR 0 8
74420: ST_TO_ADDR
// end ;
74421: LD_VAR 0 3
74425: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74426: LD_INT 0
74428: PPUSH
74429: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74430: LD_VAR 0 1
74434: NOT
74435: PUSH
74436: LD_VAR 0 1
74440: PUSH
74441: LD_INT 21
74443: PUSH
74444: LD_INT 2
74446: PUSH
74447: EMPTY
74448: LIST
74449: LIST
74450: PUSH
74451: LD_INT 23
74453: PUSH
74454: LD_INT 2
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PPUSH
74465: CALL_OW 69
74469: IN
74470: NOT
74471: OR
74472: IFFALSE 74476
// exit ;
74474: GO 74523
// for i = 1 to 3 do
74476: LD_ADDR_VAR 0 3
74480: PUSH
74481: DOUBLE
74482: LD_INT 1
74484: DEC
74485: ST_TO_ADDR
74486: LD_INT 3
74488: PUSH
74489: FOR_TO
74490: IFFALSE 74521
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74492: LD_VAR 0 1
74496: PPUSH
74497: CALL_OW 250
74501: PPUSH
74502: LD_VAR 0 1
74506: PPUSH
74507: CALL_OW 251
74511: PPUSH
74512: LD_INT 1
74514: PPUSH
74515: CALL_OW 453
74519: GO 74489
74521: POP
74522: POP
// end ;
74523: LD_VAR 0 2
74527: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74528: LD_INT 0
74530: PPUSH
74531: PPUSH
74532: PPUSH
74533: PPUSH
74534: PPUSH
74535: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74536: LD_VAR 0 1
74540: NOT
74541: PUSH
74542: LD_VAR 0 2
74546: NOT
74547: OR
74548: PUSH
74549: LD_VAR 0 1
74553: PPUSH
74554: CALL_OW 314
74558: OR
74559: IFFALSE 74563
// exit ;
74561: GO 75030
// if GetLives ( i ) < 250 then
74563: LD_VAR 0 4
74567: PPUSH
74568: CALL_OW 256
74572: PUSH
74573: LD_INT 250
74575: LESS
74576: IFFALSE 74589
// begin ComAutodestruct ( i ) ;
74578: LD_VAR 0 4
74582: PPUSH
74583: CALL 74426 0 1
// exit ;
74587: GO 75030
// end ; x := GetX ( enemy_unit ) ;
74589: LD_ADDR_VAR 0 7
74593: PUSH
74594: LD_VAR 0 2
74598: PPUSH
74599: CALL_OW 250
74603: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74604: LD_ADDR_VAR 0 8
74608: PUSH
74609: LD_VAR 0 2
74613: PPUSH
74614: CALL_OW 251
74618: ST_TO_ADDR
// if not x or not y then
74619: LD_VAR 0 7
74623: NOT
74624: PUSH
74625: LD_VAR 0 8
74629: NOT
74630: OR
74631: IFFALSE 74635
// exit ;
74633: GO 75030
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74635: LD_ADDR_VAR 0 6
74639: PUSH
74640: LD_VAR 0 7
74644: PPUSH
74645: LD_INT 0
74647: PPUSH
74648: LD_INT 4
74650: PPUSH
74651: CALL_OW 272
74655: PUSH
74656: LD_VAR 0 8
74660: PPUSH
74661: LD_INT 0
74663: PPUSH
74664: LD_INT 4
74666: PPUSH
74667: CALL_OW 273
74671: PUSH
74672: EMPTY
74673: LIST
74674: LIST
74675: PUSH
74676: LD_VAR 0 7
74680: PPUSH
74681: LD_INT 1
74683: PPUSH
74684: LD_INT 4
74686: PPUSH
74687: CALL_OW 272
74691: PUSH
74692: LD_VAR 0 8
74696: PPUSH
74697: LD_INT 1
74699: PPUSH
74700: LD_INT 4
74702: PPUSH
74703: CALL_OW 273
74707: PUSH
74708: EMPTY
74709: LIST
74710: LIST
74711: PUSH
74712: LD_VAR 0 7
74716: PPUSH
74717: LD_INT 2
74719: PPUSH
74720: LD_INT 4
74722: PPUSH
74723: CALL_OW 272
74727: PUSH
74728: LD_VAR 0 8
74732: PPUSH
74733: LD_INT 2
74735: PPUSH
74736: LD_INT 4
74738: PPUSH
74739: CALL_OW 273
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: PUSH
74748: LD_VAR 0 7
74752: PPUSH
74753: LD_INT 3
74755: PPUSH
74756: LD_INT 4
74758: PPUSH
74759: CALL_OW 272
74763: PUSH
74764: LD_VAR 0 8
74768: PPUSH
74769: LD_INT 3
74771: PPUSH
74772: LD_INT 4
74774: PPUSH
74775: CALL_OW 273
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: PUSH
74784: LD_VAR 0 7
74788: PPUSH
74789: LD_INT 4
74791: PPUSH
74792: LD_INT 4
74794: PPUSH
74795: CALL_OW 272
74799: PUSH
74800: LD_VAR 0 8
74804: PPUSH
74805: LD_INT 4
74807: PPUSH
74808: LD_INT 4
74810: PPUSH
74811: CALL_OW 273
74815: PUSH
74816: EMPTY
74817: LIST
74818: LIST
74819: PUSH
74820: LD_VAR 0 7
74824: PPUSH
74825: LD_INT 5
74827: PPUSH
74828: LD_INT 4
74830: PPUSH
74831: CALL_OW 272
74835: PUSH
74836: LD_VAR 0 8
74840: PPUSH
74841: LD_INT 5
74843: PPUSH
74844: LD_INT 4
74846: PPUSH
74847: CALL_OW 273
74851: PUSH
74852: EMPTY
74853: LIST
74854: LIST
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: LIST
74860: LIST
74861: LIST
74862: LIST
74863: ST_TO_ADDR
// for i = tmp downto 1 do
74864: LD_ADDR_VAR 0 4
74868: PUSH
74869: DOUBLE
74870: LD_VAR 0 6
74874: INC
74875: ST_TO_ADDR
74876: LD_INT 1
74878: PUSH
74879: FOR_DOWNTO
74880: IFFALSE 74981
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74882: LD_VAR 0 6
74886: PUSH
74887: LD_VAR 0 4
74891: ARRAY
74892: PUSH
74893: LD_INT 1
74895: ARRAY
74896: PPUSH
74897: LD_VAR 0 6
74901: PUSH
74902: LD_VAR 0 4
74906: ARRAY
74907: PUSH
74908: LD_INT 2
74910: ARRAY
74911: PPUSH
74912: CALL_OW 488
74916: NOT
74917: PUSH
74918: LD_VAR 0 6
74922: PUSH
74923: LD_VAR 0 4
74927: ARRAY
74928: PUSH
74929: LD_INT 1
74931: ARRAY
74932: PPUSH
74933: LD_VAR 0 6
74937: PUSH
74938: LD_VAR 0 4
74942: ARRAY
74943: PUSH
74944: LD_INT 2
74946: ARRAY
74947: PPUSH
74948: CALL_OW 428
74952: PUSH
74953: LD_INT 0
74955: NONEQUAL
74956: OR
74957: IFFALSE 74979
// tmp := Delete ( tmp , i ) ;
74959: LD_ADDR_VAR 0 6
74963: PUSH
74964: LD_VAR 0 6
74968: PPUSH
74969: LD_VAR 0 4
74973: PPUSH
74974: CALL_OW 3
74978: ST_TO_ADDR
74979: GO 74879
74981: POP
74982: POP
// j := GetClosestHex ( unit , tmp ) ;
74983: LD_ADDR_VAR 0 5
74987: PUSH
74988: LD_VAR 0 1
74992: PPUSH
74993: LD_VAR 0 6
74997: PPUSH
74998: CALL 74274 0 2
75002: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75003: LD_VAR 0 1
75007: PPUSH
75008: LD_VAR 0 5
75012: PUSH
75013: LD_INT 1
75015: ARRAY
75016: PPUSH
75017: LD_VAR 0 5
75021: PUSH
75022: LD_INT 2
75024: ARRAY
75025: PPUSH
75026: CALL_OW 111
// end ;
75030: LD_VAR 0 3
75034: RET
// export function PrepareApemanSoldier ( ) ; begin
75035: LD_INT 0
75037: PPUSH
// uc_nation := 0 ;
75038: LD_ADDR_OWVAR 21
75042: PUSH
75043: LD_INT 0
75045: ST_TO_ADDR
// hc_sex := sex_male ;
75046: LD_ADDR_OWVAR 27
75050: PUSH
75051: LD_INT 1
75053: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75054: LD_ADDR_OWVAR 28
75058: PUSH
75059: LD_INT 15
75061: ST_TO_ADDR
// hc_gallery :=  ;
75062: LD_ADDR_OWVAR 33
75066: PUSH
75067: LD_STRING 
75069: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75070: LD_ADDR_OWVAR 31
75074: PUSH
75075: LD_INT 0
75077: PPUSH
75078: LD_INT 3
75080: PPUSH
75081: CALL_OW 12
75085: PUSH
75086: LD_INT 0
75088: PPUSH
75089: LD_INT 3
75091: PPUSH
75092: CALL_OW 12
75096: PUSH
75097: LD_INT 0
75099: PUSH
75100: LD_INT 0
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: LIST
75107: LIST
75108: ST_TO_ADDR
// end ;
75109: LD_VAR 0 1
75113: RET
// export function PrepareApemanEngineer ( ) ; begin
75114: LD_INT 0
75116: PPUSH
// uc_nation := 0 ;
75117: LD_ADDR_OWVAR 21
75121: PUSH
75122: LD_INT 0
75124: ST_TO_ADDR
// hc_sex := sex_male ;
75125: LD_ADDR_OWVAR 27
75129: PUSH
75130: LD_INT 1
75132: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75133: LD_ADDR_OWVAR 28
75137: PUSH
75138: LD_INT 16
75140: ST_TO_ADDR
// hc_gallery :=  ;
75141: LD_ADDR_OWVAR 33
75145: PUSH
75146: LD_STRING 
75148: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75149: LD_ADDR_OWVAR 31
75153: PUSH
75154: LD_INT 0
75156: PPUSH
75157: LD_INT 3
75159: PPUSH
75160: CALL_OW 12
75164: PUSH
75165: LD_INT 0
75167: PPUSH
75168: LD_INT 3
75170: PPUSH
75171: CALL_OW 12
75175: PUSH
75176: LD_INT 0
75178: PUSH
75179: LD_INT 0
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: LIST
75186: LIST
75187: ST_TO_ADDR
// end ;
75188: LD_VAR 0 1
75192: RET
// export function PrepareApeman ( agressivity ) ; begin
75193: LD_INT 0
75195: PPUSH
// uc_side := 0 ;
75196: LD_ADDR_OWVAR 20
75200: PUSH
75201: LD_INT 0
75203: ST_TO_ADDR
// uc_nation := 0 ;
75204: LD_ADDR_OWVAR 21
75208: PUSH
75209: LD_INT 0
75211: ST_TO_ADDR
// hc_sex := sex_male ;
75212: LD_ADDR_OWVAR 27
75216: PUSH
75217: LD_INT 1
75219: ST_TO_ADDR
// hc_class := class_apeman ;
75220: LD_ADDR_OWVAR 28
75224: PUSH
75225: LD_INT 12
75227: ST_TO_ADDR
// hc_gallery :=  ;
75228: LD_ADDR_OWVAR 33
75232: PUSH
75233: LD_STRING 
75235: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75236: LD_ADDR_OWVAR 35
75240: PUSH
75241: LD_VAR 0 1
75245: NEG
75246: PPUSH
75247: LD_VAR 0 1
75251: PPUSH
75252: CALL_OW 12
75256: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75257: LD_ADDR_OWVAR 31
75261: PUSH
75262: LD_INT 0
75264: PPUSH
75265: LD_INT 3
75267: PPUSH
75268: CALL_OW 12
75272: PUSH
75273: LD_INT 0
75275: PPUSH
75276: LD_INT 3
75278: PPUSH
75279: CALL_OW 12
75283: PUSH
75284: LD_INT 0
75286: PUSH
75287: LD_INT 0
75289: PUSH
75290: EMPTY
75291: LIST
75292: LIST
75293: LIST
75294: LIST
75295: ST_TO_ADDR
// end ;
75296: LD_VAR 0 2
75300: RET
// export function PrepareTiger ( agressivity ) ; begin
75301: LD_INT 0
75303: PPUSH
// uc_side := 0 ;
75304: LD_ADDR_OWVAR 20
75308: PUSH
75309: LD_INT 0
75311: ST_TO_ADDR
// uc_nation := 0 ;
75312: LD_ADDR_OWVAR 21
75316: PUSH
75317: LD_INT 0
75319: ST_TO_ADDR
// hc_class := class_tiger ;
75320: LD_ADDR_OWVAR 28
75324: PUSH
75325: LD_INT 14
75327: ST_TO_ADDR
// hc_gallery :=  ;
75328: LD_ADDR_OWVAR 33
75332: PUSH
75333: LD_STRING 
75335: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75336: LD_ADDR_OWVAR 35
75340: PUSH
75341: LD_VAR 0 1
75345: NEG
75346: PPUSH
75347: LD_VAR 0 1
75351: PPUSH
75352: CALL_OW 12
75356: ST_TO_ADDR
// end ;
75357: LD_VAR 0 2
75361: RET
// export function PrepareEnchidna ( ) ; begin
75362: LD_INT 0
75364: PPUSH
// uc_side := 0 ;
75365: LD_ADDR_OWVAR 20
75369: PUSH
75370: LD_INT 0
75372: ST_TO_ADDR
// uc_nation := 0 ;
75373: LD_ADDR_OWVAR 21
75377: PUSH
75378: LD_INT 0
75380: ST_TO_ADDR
// hc_class := class_baggie ;
75381: LD_ADDR_OWVAR 28
75385: PUSH
75386: LD_INT 13
75388: ST_TO_ADDR
// hc_gallery :=  ;
75389: LD_ADDR_OWVAR 33
75393: PUSH
75394: LD_STRING 
75396: ST_TO_ADDR
// end ;
75397: LD_VAR 0 1
75401: RET
// export function PrepareFrog ( ) ; begin
75402: LD_INT 0
75404: PPUSH
// uc_side := 0 ;
75405: LD_ADDR_OWVAR 20
75409: PUSH
75410: LD_INT 0
75412: ST_TO_ADDR
// uc_nation := 0 ;
75413: LD_ADDR_OWVAR 21
75417: PUSH
75418: LD_INT 0
75420: ST_TO_ADDR
// hc_class := class_frog ;
75421: LD_ADDR_OWVAR 28
75425: PUSH
75426: LD_INT 19
75428: ST_TO_ADDR
// hc_gallery :=  ;
75429: LD_ADDR_OWVAR 33
75433: PUSH
75434: LD_STRING 
75436: ST_TO_ADDR
// end ;
75437: LD_VAR 0 1
75441: RET
// export function PrepareFish ( ) ; begin
75442: LD_INT 0
75444: PPUSH
// uc_side := 0 ;
75445: LD_ADDR_OWVAR 20
75449: PUSH
75450: LD_INT 0
75452: ST_TO_ADDR
// uc_nation := 0 ;
75453: LD_ADDR_OWVAR 21
75457: PUSH
75458: LD_INT 0
75460: ST_TO_ADDR
// hc_class := class_fish ;
75461: LD_ADDR_OWVAR 28
75465: PUSH
75466: LD_INT 20
75468: ST_TO_ADDR
// hc_gallery :=  ;
75469: LD_ADDR_OWVAR 33
75473: PUSH
75474: LD_STRING 
75476: ST_TO_ADDR
// end ;
75477: LD_VAR 0 1
75481: RET
// export function PrepareBird ( ) ; begin
75482: LD_INT 0
75484: PPUSH
// uc_side := 0 ;
75485: LD_ADDR_OWVAR 20
75489: PUSH
75490: LD_INT 0
75492: ST_TO_ADDR
// uc_nation := 0 ;
75493: LD_ADDR_OWVAR 21
75497: PUSH
75498: LD_INT 0
75500: ST_TO_ADDR
// hc_class := class_phororhacos ;
75501: LD_ADDR_OWVAR 28
75505: PUSH
75506: LD_INT 18
75508: ST_TO_ADDR
// hc_gallery :=  ;
75509: LD_ADDR_OWVAR 33
75513: PUSH
75514: LD_STRING 
75516: ST_TO_ADDR
// end ;
75517: LD_VAR 0 1
75521: RET
// export function PrepareHorse ( ) ; begin
75522: LD_INT 0
75524: PPUSH
// uc_side := 0 ;
75525: LD_ADDR_OWVAR 20
75529: PUSH
75530: LD_INT 0
75532: ST_TO_ADDR
// uc_nation := 0 ;
75533: LD_ADDR_OWVAR 21
75537: PUSH
75538: LD_INT 0
75540: ST_TO_ADDR
// hc_class := class_horse ;
75541: LD_ADDR_OWVAR 28
75545: PUSH
75546: LD_INT 21
75548: ST_TO_ADDR
// hc_gallery :=  ;
75549: LD_ADDR_OWVAR 33
75553: PUSH
75554: LD_STRING 
75556: ST_TO_ADDR
// end ;
75557: LD_VAR 0 1
75561: RET
// export function PrepareMastodont ( ) ; begin
75562: LD_INT 0
75564: PPUSH
// uc_side := 0 ;
75565: LD_ADDR_OWVAR 20
75569: PUSH
75570: LD_INT 0
75572: ST_TO_ADDR
// uc_nation := 0 ;
75573: LD_ADDR_OWVAR 21
75577: PUSH
75578: LD_INT 0
75580: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75581: LD_ADDR_OWVAR 37
75585: PUSH
75586: LD_INT 31
75588: ST_TO_ADDR
// vc_control := control_rider ;
75589: LD_ADDR_OWVAR 38
75593: PUSH
75594: LD_INT 4
75596: ST_TO_ADDR
// end ;
75597: LD_VAR 0 1
75601: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75602: LD_INT 0
75604: PPUSH
75605: PPUSH
75606: PPUSH
// uc_side = 0 ;
75607: LD_ADDR_OWVAR 20
75611: PUSH
75612: LD_INT 0
75614: ST_TO_ADDR
// uc_nation = 0 ;
75615: LD_ADDR_OWVAR 21
75619: PUSH
75620: LD_INT 0
75622: ST_TO_ADDR
// InitHc_All ( ) ;
75623: CALL_OW 584
// InitVc ;
75627: CALL_OW 20
// if mastodonts then
75631: LD_VAR 0 6
75635: IFFALSE 75702
// for i = 1 to mastodonts do
75637: LD_ADDR_VAR 0 11
75641: PUSH
75642: DOUBLE
75643: LD_INT 1
75645: DEC
75646: ST_TO_ADDR
75647: LD_VAR 0 6
75651: PUSH
75652: FOR_TO
75653: IFFALSE 75700
// begin vc_chassis := 31 ;
75655: LD_ADDR_OWVAR 37
75659: PUSH
75660: LD_INT 31
75662: ST_TO_ADDR
// vc_control := control_rider ;
75663: LD_ADDR_OWVAR 38
75667: PUSH
75668: LD_INT 4
75670: ST_TO_ADDR
// animal := CreateVehicle ;
75671: LD_ADDR_VAR 0 12
75675: PUSH
75676: CALL_OW 45
75680: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75681: LD_VAR 0 12
75685: PPUSH
75686: LD_VAR 0 8
75690: PPUSH
75691: LD_INT 0
75693: PPUSH
75694: CALL 77830 0 3
// end ;
75698: GO 75652
75700: POP
75701: POP
// if horses then
75702: LD_VAR 0 5
75706: IFFALSE 75773
// for i = 1 to horses do
75708: LD_ADDR_VAR 0 11
75712: PUSH
75713: DOUBLE
75714: LD_INT 1
75716: DEC
75717: ST_TO_ADDR
75718: LD_VAR 0 5
75722: PUSH
75723: FOR_TO
75724: IFFALSE 75771
// begin hc_class := 21 ;
75726: LD_ADDR_OWVAR 28
75730: PUSH
75731: LD_INT 21
75733: ST_TO_ADDR
// hc_gallery :=  ;
75734: LD_ADDR_OWVAR 33
75738: PUSH
75739: LD_STRING 
75741: ST_TO_ADDR
// animal := CreateHuman ;
75742: LD_ADDR_VAR 0 12
75746: PUSH
75747: CALL_OW 44
75751: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75752: LD_VAR 0 12
75756: PPUSH
75757: LD_VAR 0 8
75761: PPUSH
75762: LD_INT 0
75764: PPUSH
75765: CALL 77830 0 3
// end ;
75769: GO 75723
75771: POP
75772: POP
// if birds then
75773: LD_VAR 0 1
75777: IFFALSE 75844
// for i = 1 to birds do
75779: LD_ADDR_VAR 0 11
75783: PUSH
75784: DOUBLE
75785: LD_INT 1
75787: DEC
75788: ST_TO_ADDR
75789: LD_VAR 0 1
75793: PUSH
75794: FOR_TO
75795: IFFALSE 75842
// begin hc_class = 18 ;
75797: LD_ADDR_OWVAR 28
75801: PUSH
75802: LD_INT 18
75804: ST_TO_ADDR
// hc_gallery =  ;
75805: LD_ADDR_OWVAR 33
75809: PUSH
75810: LD_STRING 
75812: ST_TO_ADDR
// animal := CreateHuman ;
75813: LD_ADDR_VAR 0 12
75817: PUSH
75818: CALL_OW 44
75822: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75823: LD_VAR 0 12
75827: PPUSH
75828: LD_VAR 0 8
75832: PPUSH
75833: LD_INT 0
75835: PPUSH
75836: CALL 77830 0 3
// end ;
75840: GO 75794
75842: POP
75843: POP
// if tigers then
75844: LD_VAR 0 2
75848: IFFALSE 75932
// for i = 1 to tigers do
75850: LD_ADDR_VAR 0 11
75854: PUSH
75855: DOUBLE
75856: LD_INT 1
75858: DEC
75859: ST_TO_ADDR
75860: LD_VAR 0 2
75864: PUSH
75865: FOR_TO
75866: IFFALSE 75930
// begin hc_class = class_tiger ;
75868: LD_ADDR_OWVAR 28
75872: PUSH
75873: LD_INT 14
75875: ST_TO_ADDR
// hc_gallery =  ;
75876: LD_ADDR_OWVAR 33
75880: PUSH
75881: LD_STRING 
75883: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75884: LD_ADDR_OWVAR 35
75888: PUSH
75889: LD_INT 7
75891: NEG
75892: PPUSH
75893: LD_INT 7
75895: PPUSH
75896: CALL_OW 12
75900: ST_TO_ADDR
// animal := CreateHuman ;
75901: LD_ADDR_VAR 0 12
75905: PUSH
75906: CALL_OW 44
75910: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75911: LD_VAR 0 12
75915: PPUSH
75916: LD_VAR 0 8
75920: PPUSH
75921: LD_INT 0
75923: PPUSH
75924: CALL 77830 0 3
// end ;
75928: GO 75865
75930: POP
75931: POP
// if apemans then
75932: LD_VAR 0 3
75936: IFFALSE 76059
// for i = 1 to apemans do
75938: LD_ADDR_VAR 0 11
75942: PUSH
75943: DOUBLE
75944: LD_INT 1
75946: DEC
75947: ST_TO_ADDR
75948: LD_VAR 0 3
75952: PUSH
75953: FOR_TO
75954: IFFALSE 76057
// begin hc_class = class_apeman ;
75956: LD_ADDR_OWVAR 28
75960: PUSH
75961: LD_INT 12
75963: ST_TO_ADDR
// hc_gallery =  ;
75964: LD_ADDR_OWVAR 33
75968: PUSH
75969: LD_STRING 
75971: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75972: LD_ADDR_OWVAR 35
75976: PUSH
75977: LD_INT 2
75979: NEG
75980: PPUSH
75981: LD_INT 2
75983: PPUSH
75984: CALL_OW 12
75988: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75989: LD_ADDR_OWVAR 31
75993: PUSH
75994: LD_INT 1
75996: PPUSH
75997: LD_INT 3
75999: PPUSH
76000: CALL_OW 12
76004: PUSH
76005: LD_INT 1
76007: PPUSH
76008: LD_INT 3
76010: PPUSH
76011: CALL_OW 12
76015: PUSH
76016: LD_INT 0
76018: PUSH
76019: LD_INT 0
76021: PUSH
76022: EMPTY
76023: LIST
76024: LIST
76025: LIST
76026: LIST
76027: ST_TO_ADDR
// animal := CreateHuman ;
76028: LD_ADDR_VAR 0 12
76032: PUSH
76033: CALL_OW 44
76037: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76038: LD_VAR 0 12
76042: PPUSH
76043: LD_VAR 0 8
76047: PPUSH
76048: LD_INT 0
76050: PPUSH
76051: CALL 77830 0 3
// end ;
76055: GO 75953
76057: POP
76058: POP
// if enchidnas then
76059: LD_VAR 0 4
76063: IFFALSE 76130
// for i = 1 to enchidnas do
76065: LD_ADDR_VAR 0 11
76069: PUSH
76070: DOUBLE
76071: LD_INT 1
76073: DEC
76074: ST_TO_ADDR
76075: LD_VAR 0 4
76079: PUSH
76080: FOR_TO
76081: IFFALSE 76128
// begin hc_class = 13 ;
76083: LD_ADDR_OWVAR 28
76087: PUSH
76088: LD_INT 13
76090: ST_TO_ADDR
// hc_gallery =  ;
76091: LD_ADDR_OWVAR 33
76095: PUSH
76096: LD_STRING 
76098: ST_TO_ADDR
// animal := CreateHuman ;
76099: LD_ADDR_VAR 0 12
76103: PUSH
76104: CALL_OW 44
76108: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76109: LD_VAR 0 12
76113: PPUSH
76114: LD_VAR 0 8
76118: PPUSH
76119: LD_INT 0
76121: PPUSH
76122: CALL 77830 0 3
// end ;
76126: GO 76080
76128: POP
76129: POP
// if fishes then
76130: LD_VAR 0 7
76134: IFFALSE 76201
// for i = 1 to fishes do
76136: LD_ADDR_VAR 0 11
76140: PUSH
76141: DOUBLE
76142: LD_INT 1
76144: DEC
76145: ST_TO_ADDR
76146: LD_VAR 0 7
76150: PUSH
76151: FOR_TO
76152: IFFALSE 76199
// begin hc_class = 20 ;
76154: LD_ADDR_OWVAR 28
76158: PUSH
76159: LD_INT 20
76161: ST_TO_ADDR
// hc_gallery =  ;
76162: LD_ADDR_OWVAR 33
76166: PUSH
76167: LD_STRING 
76169: ST_TO_ADDR
// animal := CreateHuman ;
76170: LD_ADDR_VAR 0 12
76174: PUSH
76175: CALL_OW 44
76179: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76180: LD_VAR 0 12
76184: PPUSH
76185: LD_VAR 0 9
76189: PPUSH
76190: LD_INT 0
76192: PPUSH
76193: CALL 77830 0 3
// end ;
76197: GO 76151
76199: POP
76200: POP
// end ;
76201: LD_VAR 0 10
76205: RET
// export function WantHeal ( sci , unit ) ; begin
76206: LD_INT 0
76208: PPUSH
// if GetTaskList ( sci ) > 0 then
76209: LD_VAR 0 1
76213: PPUSH
76214: CALL_OW 437
76218: PUSH
76219: LD_INT 0
76221: GREATER
76222: IFFALSE 76292
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76224: LD_VAR 0 1
76228: PPUSH
76229: CALL_OW 437
76233: PUSH
76234: LD_INT 1
76236: ARRAY
76237: PUSH
76238: LD_INT 1
76240: ARRAY
76241: PUSH
76242: LD_STRING l
76244: EQUAL
76245: PUSH
76246: LD_VAR 0 1
76250: PPUSH
76251: CALL_OW 437
76255: PUSH
76256: LD_INT 1
76258: ARRAY
76259: PUSH
76260: LD_INT 4
76262: ARRAY
76263: PUSH
76264: LD_VAR 0 2
76268: EQUAL
76269: AND
76270: IFFALSE 76282
// result := true else
76272: LD_ADDR_VAR 0 3
76276: PUSH
76277: LD_INT 1
76279: ST_TO_ADDR
76280: GO 76290
// result := false ;
76282: LD_ADDR_VAR 0 3
76286: PUSH
76287: LD_INT 0
76289: ST_TO_ADDR
// end else
76290: GO 76300
// result := false ;
76292: LD_ADDR_VAR 0 3
76296: PUSH
76297: LD_INT 0
76299: ST_TO_ADDR
// end ;
76300: LD_VAR 0 3
76304: RET
// export function HealTarget ( sci ) ; begin
76305: LD_INT 0
76307: PPUSH
// if not sci then
76308: LD_VAR 0 1
76312: NOT
76313: IFFALSE 76317
// exit ;
76315: GO 76382
// result := 0 ;
76317: LD_ADDR_VAR 0 2
76321: PUSH
76322: LD_INT 0
76324: ST_TO_ADDR
// if GetTaskList ( sci ) then
76325: LD_VAR 0 1
76329: PPUSH
76330: CALL_OW 437
76334: IFFALSE 76382
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76336: LD_VAR 0 1
76340: PPUSH
76341: CALL_OW 437
76345: PUSH
76346: LD_INT 1
76348: ARRAY
76349: PUSH
76350: LD_INT 1
76352: ARRAY
76353: PUSH
76354: LD_STRING l
76356: EQUAL
76357: IFFALSE 76382
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76359: LD_ADDR_VAR 0 2
76363: PUSH
76364: LD_VAR 0 1
76368: PPUSH
76369: CALL_OW 437
76373: PUSH
76374: LD_INT 1
76376: ARRAY
76377: PUSH
76378: LD_INT 4
76380: ARRAY
76381: ST_TO_ADDR
// end ;
76382: LD_VAR 0 2
76386: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76387: LD_INT 0
76389: PPUSH
76390: PPUSH
76391: PPUSH
76392: PPUSH
// if not base_units then
76393: LD_VAR 0 1
76397: NOT
76398: IFFALSE 76402
// exit ;
76400: GO 76489
// result := false ;
76402: LD_ADDR_VAR 0 2
76406: PUSH
76407: LD_INT 0
76409: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76410: LD_ADDR_VAR 0 5
76414: PUSH
76415: LD_VAR 0 1
76419: PPUSH
76420: LD_INT 21
76422: PUSH
76423: LD_INT 3
76425: PUSH
76426: EMPTY
76427: LIST
76428: LIST
76429: PPUSH
76430: CALL_OW 72
76434: ST_TO_ADDR
// if not tmp then
76435: LD_VAR 0 5
76439: NOT
76440: IFFALSE 76444
// exit ;
76442: GO 76489
// for i in tmp do
76444: LD_ADDR_VAR 0 3
76448: PUSH
76449: LD_VAR 0 5
76453: PUSH
76454: FOR_IN
76455: IFFALSE 76487
// begin result := EnemyInRange ( i , 22 ) ;
76457: LD_ADDR_VAR 0 2
76461: PUSH
76462: LD_VAR 0 3
76466: PPUSH
76467: LD_INT 22
76469: PPUSH
76470: CALL 74076 0 2
76474: ST_TO_ADDR
// if result then
76475: LD_VAR 0 2
76479: IFFALSE 76485
// exit ;
76481: POP
76482: POP
76483: GO 76489
// end ;
76485: GO 76454
76487: POP
76488: POP
// end ;
76489: LD_VAR 0 2
76493: RET
// export function FilterByTag ( units , tag ) ; begin
76494: LD_INT 0
76496: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76497: LD_ADDR_VAR 0 3
76501: PUSH
76502: LD_VAR 0 1
76506: PPUSH
76507: LD_INT 120
76509: PUSH
76510: LD_VAR 0 2
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: PPUSH
76519: CALL_OW 72
76523: ST_TO_ADDR
// end ;
76524: LD_VAR 0 3
76528: RET
// export function IsDriver ( un ) ; begin
76529: LD_INT 0
76531: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76532: LD_ADDR_VAR 0 2
76536: PUSH
76537: LD_VAR 0 1
76541: PUSH
76542: LD_INT 55
76544: PUSH
76545: EMPTY
76546: LIST
76547: PPUSH
76548: CALL_OW 69
76552: IN
76553: ST_TO_ADDR
// end ;
76554: LD_VAR 0 2
76558: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76559: LD_INT 0
76561: PPUSH
76562: PPUSH
// list := [ ] ;
76563: LD_ADDR_VAR 0 5
76567: PUSH
76568: EMPTY
76569: ST_TO_ADDR
// case d of 0 :
76570: LD_VAR 0 3
76574: PUSH
76575: LD_INT 0
76577: DOUBLE
76578: EQUAL
76579: IFTRUE 76583
76581: GO 76716
76583: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76584: LD_ADDR_VAR 0 5
76588: PUSH
76589: LD_VAR 0 1
76593: PUSH
76594: LD_INT 4
76596: MINUS
76597: PUSH
76598: LD_VAR 0 2
76602: PUSH
76603: LD_INT 4
76605: MINUS
76606: PUSH
76607: LD_INT 2
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: LIST
76614: PUSH
76615: LD_VAR 0 1
76619: PUSH
76620: LD_INT 3
76622: MINUS
76623: PUSH
76624: LD_VAR 0 2
76628: PUSH
76629: LD_INT 1
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: LIST
76636: PUSH
76637: LD_VAR 0 1
76641: PUSH
76642: LD_INT 4
76644: PLUS
76645: PUSH
76646: LD_VAR 0 2
76650: PUSH
76651: LD_INT 4
76653: PUSH
76654: EMPTY
76655: LIST
76656: LIST
76657: LIST
76658: PUSH
76659: LD_VAR 0 1
76663: PUSH
76664: LD_INT 3
76666: PLUS
76667: PUSH
76668: LD_VAR 0 2
76672: PUSH
76673: LD_INT 3
76675: PLUS
76676: PUSH
76677: LD_INT 5
76679: PUSH
76680: EMPTY
76681: LIST
76682: LIST
76683: LIST
76684: PUSH
76685: LD_VAR 0 1
76689: PUSH
76690: LD_VAR 0 2
76694: PUSH
76695: LD_INT 4
76697: PLUS
76698: PUSH
76699: LD_INT 0
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: LIST
76706: PUSH
76707: EMPTY
76708: LIST
76709: LIST
76710: LIST
76711: LIST
76712: LIST
76713: ST_TO_ADDR
// end ; 1 :
76714: GO 77414
76716: LD_INT 1
76718: DOUBLE
76719: EQUAL
76720: IFTRUE 76724
76722: GO 76857
76724: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76725: LD_ADDR_VAR 0 5
76729: PUSH
76730: LD_VAR 0 1
76734: PUSH
76735: LD_VAR 0 2
76739: PUSH
76740: LD_INT 4
76742: MINUS
76743: PUSH
76744: LD_INT 3
76746: PUSH
76747: EMPTY
76748: LIST
76749: LIST
76750: LIST
76751: PUSH
76752: LD_VAR 0 1
76756: PUSH
76757: LD_INT 3
76759: MINUS
76760: PUSH
76761: LD_VAR 0 2
76765: PUSH
76766: LD_INT 3
76768: MINUS
76769: PUSH
76770: LD_INT 2
76772: PUSH
76773: EMPTY
76774: LIST
76775: LIST
76776: LIST
76777: PUSH
76778: LD_VAR 0 1
76782: PUSH
76783: LD_INT 4
76785: MINUS
76786: PUSH
76787: LD_VAR 0 2
76791: PUSH
76792: LD_INT 1
76794: PUSH
76795: EMPTY
76796: LIST
76797: LIST
76798: LIST
76799: PUSH
76800: LD_VAR 0 1
76804: PUSH
76805: LD_VAR 0 2
76809: PUSH
76810: LD_INT 3
76812: PLUS
76813: PUSH
76814: LD_INT 0
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: LIST
76821: PUSH
76822: LD_VAR 0 1
76826: PUSH
76827: LD_INT 4
76829: PLUS
76830: PUSH
76831: LD_VAR 0 2
76835: PUSH
76836: LD_INT 4
76838: PLUS
76839: PUSH
76840: LD_INT 5
76842: PUSH
76843: EMPTY
76844: LIST
76845: LIST
76846: LIST
76847: PUSH
76848: EMPTY
76849: LIST
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: ST_TO_ADDR
// end ; 2 :
76855: GO 77414
76857: LD_INT 2
76859: DOUBLE
76860: EQUAL
76861: IFTRUE 76865
76863: GO 76994
76865: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76866: LD_ADDR_VAR 0 5
76870: PUSH
76871: LD_VAR 0 1
76875: PUSH
76876: LD_VAR 0 2
76880: PUSH
76881: LD_INT 3
76883: MINUS
76884: PUSH
76885: LD_INT 3
76887: PUSH
76888: EMPTY
76889: LIST
76890: LIST
76891: LIST
76892: PUSH
76893: LD_VAR 0 1
76897: PUSH
76898: LD_INT 4
76900: PLUS
76901: PUSH
76902: LD_VAR 0 2
76906: PUSH
76907: LD_INT 4
76909: PUSH
76910: EMPTY
76911: LIST
76912: LIST
76913: LIST
76914: PUSH
76915: LD_VAR 0 1
76919: PUSH
76920: LD_VAR 0 2
76924: PUSH
76925: LD_INT 4
76927: PLUS
76928: PUSH
76929: LD_INT 0
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: LIST
76936: PUSH
76937: LD_VAR 0 1
76941: PUSH
76942: LD_INT 3
76944: MINUS
76945: PUSH
76946: LD_VAR 0 2
76950: PUSH
76951: LD_INT 1
76953: PUSH
76954: EMPTY
76955: LIST
76956: LIST
76957: LIST
76958: PUSH
76959: LD_VAR 0 1
76963: PUSH
76964: LD_INT 4
76966: MINUS
76967: PUSH
76968: LD_VAR 0 2
76972: PUSH
76973: LD_INT 4
76975: MINUS
76976: PUSH
76977: LD_INT 2
76979: PUSH
76980: EMPTY
76981: LIST
76982: LIST
76983: LIST
76984: PUSH
76985: EMPTY
76986: LIST
76987: LIST
76988: LIST
76989: LIST
76990: LIST
76991: ST_TO_ADDR
// end ; 3 :
76992: GO 77414
76994: LD_INT 3
76996: DOUBLE
76997: EQUAL
76998: IFTRUE 77002
77000: GO 77135
77002: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77003: LD_ADDR_VAR 0 5
77007: PUSH
77008: LD_VAR 0 1
77012: PUSH
77013: LD_INT 3
77015: PLUS
77016: PUSH
77017: LD_VAR 0 2
77021: PUSH
77022: LD_INT 4
77024: PUSH
77025: EMPTY
77026: LIST
77027: LIST
77028: LIST
77029: PUSH
77030: LD_VAR 0 1
77034: PUSH
77035: LD_INT 4
77037: PLUS
77038: PUSH
77039: LD_VAR 0 2
77043: PUSH
77044: LD_INT 4
77046: PLUS
77047: PUSH
77048: LD_INT 5
77050: PUSH
77051: EMPTY
77052: LIST
77053: LIST
77054: LIST
77055: PUSH
77056: LD_VAR 0 1
77060: PUSH
77061: LD_INT 4
77063: MINUS
77064: PUSH
77065: LD_VAR 0 2
77069: PUSH
77070: LD_INT 1
77072: PUSH
77073: EMPTY
77074: LIST
77075: LIST
77076: LIST
77077: PUSH
77078: LD_VAR 0 1
77082: PUSH
77083: LD_VAR 0 2
77087: PUSH
77088: LD_INT 4
77090: MINUS
77091: PUSH
77092: LD_INT 3
77094: PUSH
77095: EMPTY
77096: LIST
77097: LIST
77098: LIST
77099: PUSH
77100: LD_VAR 0 1
77104: PUSH
77105: LD_INT 3
77107: MINUS
77108: PUSH
77109: LD_VAR 0 2
77113: PUSH
77114: LD_INT 3
77116: MINUS
77117: PUSH
77118: LD_INT 2
77120: PUSH
77121: EMPTY
77122: LIST
77123: LIST
77124: LIST
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: LIST
77130: LIST
77131: LIST
77132: ST_TO_ADDR
// end ; 4 :
77133: GO 77414
77135: LD_INT 4
77137: DOUBLE
77138: EQUAL
77139: IFTRUE 77143
77141: GO 77276
77143: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77144: LD_ADDR_VAR 0 5
77148: PUSH
77149: LD_VAR 0 1
77153: PUSH
77154: LD_VAR 0 2
77158: PUSH
77159: LD_INT 4
77161: PLUS
77162: PUSH
77163: LD_INT 0
77165: PUSH
77166: EMPTY
77167: LIST
77168: LIST
77169: LIST
77170: PUSH
77171: LD_VAR 0 1
77175: PUSH
77176: LD_INT 3
77178: PLUS
77179: PUSH
77180: LD_VAR 0 2
77184: PUSH
77185: LD_INT 3
77187: PLUS
77188: PUSH
77189: LD_INT 5
77191: PUSH
77192: EMPTY
77193: LIST
77194: LIST
77195: LIST
77196: PUSH
77197: LD_VAR 0 1
77201: PUSH
77202: LD_INT 4
77204: PLUS
77205: PUSH
77206: LD_VAR 0 2
77210: PUSH
77211: LD_INT 4
77213: PUSH
77214: EMPTY
77215: LIST
77216: LIST
77217: LIST
77218: PUSH
77219: LD_VAR 0 1
77223: PUSH
77224: LD_VAR 0 2
77228: PUSH
77229: LD_INT 3
77231: MINUS
77232: PUSH
77233: LD_INT 3
77235: PUSH
77236: EMPTY
77237: LIST
77238: LIST
77239: LIST
77240: PUSH
77241: LD_VAR 0 1
77245: PUSH
77246: LD_INT 4
77248: MINUS
77249: PUSH
77250: LD_VAR 0 2
77254: PUSH
77255: LD_INT 4
77257: MINUS
77258: PUSH
77259: LD_INT 2
77261: PUSH
77262: EMPTY
77263: LIST
77264: LIST
77265: LIST
77266: PUSH
77267: EMPTY
77268: LIST
77269: LIST
77270: LIST
77271: LIST
77272: LIST
77273: ST_TO_ADDR
// end ; 5 :
77274: GO 77414
77276: LD_INT 5
77278: DOUBLE
77279: EQUAL
77280: IFTRUE 77284
77282: GO 77413
77284: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77285: LD_ADDR_VAR 0 5
77289: PUSH
77290: LD_VAR 0 1
77294: PUSH
77295: LD_INT 4
77297: MINUS
77298: PUSH
77299: LD_VAR 0 2
77303: PUSH
77304: LD_INT 1
77306: PUSH
77307: EMPTY
77308: LIST
77309: LIST
77310: LIST
77311: PUSH
77312: LD_VAR 0 1
77316: PUSH
77317: LD_VAR 0 2
77321: PUSH
77322: LD_INT 4
77324: MINUS
77325: PUSH
77326: LD_INT 3
77328: PUSH
77329: EMPTY
77330: LIST
77331: LIST
77332: LIST
77333: PUSH
77334: LD_VAR 0 1
77338: PUSH
77339: LD_INT 4
77341: PLUS
77342: PUSH
77343: LD_VAR 0 2
77347: PUSH
77348: LD_INT 4
77350: PLUS
77351: PUSH
77352: LD_INT 5
77354: PUSH
77355: EMPTY
77356: LIST
77357: LIST
77358: LIST
77359: PUSH
77360: LD_VAR 0 1
77364: PUSH
77365: LD_INT 3
77367: PLUS
77368: PUSH
77369: LD_VAR 0 2
77373: PUSH
77374: LD_INT 4
77376: PUSH
77377: EMPTY
77378: LIST
77379: LIST
77380: LIST
77381: PUSH
77382: LD_VAR 0 1
77386: PUSH
77387: LD_VAR 0 2
77391: PUSH
77392: LD_INT 3
77394: PLUS
77395: PUSH
77396: LD_INT 0
77398: PUSH
77399: EMPTY
77400: LIST
77401: LIST
77402: LIST
77403: PUSH
77404: EMPTY
77405: LIST
77406: LIST
77407: LIST
77408: LIST
77409: LIST
77410: ST_TO_ADDR
// end ; end ;
77411: GO 77414
77413: POP
// result := list ;
77414: LD_ADDR_VAR 0 4
77418: PUSH
77419: LD_VAR 0 5
77423: ST_TO_ADDR
// end ;
77424: LD_VAR 0 4
77428: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77429: LD_INT 0
77431: PPUSH
77432: PPUSH
77433: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77434: LD_VAR 0 1
77438: NOT
77439: PUSH
77440: LD_VAR 0 2
77444: PUSH
77445: LD_INT 1
77447: PUSH
77448: LD_INT 2
77450: PUSH
77451: LD_INT 3
77453: PUSH
77454: LD_INT 4
77456: PUSH
77457: EMPTY
77458: LIST
77459: LIST
77460: LIST
77461: LIST
77462: IN
77463: NOT
77464: OR
77465: IFFALSE 77469
// exit ;
77467: GO 77552
// tmp := [ ] ;
77469: LD_ADDR_VAR 0 5
77473: PUSH
77474: EMPTY
77475: ST_TO_ADDR
// for i in units do
77476: LD_ADDR_VAR 0 4
77480: PUSH
77481: LD_VAR 0 1
77485: PUSH
77486: FOR_IN
77487: IFFALSE 77521
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77489: LD_ADDR_VAR 0 5
77493: PUSH
77494: LD_VAR 0 5
77498: PPUSH
77499: LD_VAR 0 4
77503: PPUSH
77504: LD_VAR 0 2
77508: PPUSH
77509: CALL_OW 259
77513: PPUSH
77514: CALL 78912 0 2
77518: ST_TO_ADDR
77519: GO 77486
77521: POP
77522: POP
// if not tmp then
77523: LD_VAR 0 5
77527: NOT
77528: IFFALSE 77532
// exit ;
77530: GO 77552
// result := SortListByListDesc ( units , tmp ) ;
77532: LD_ADDR_VAR 0 3
77536: PUSH
77537: LD_VAR 0 1
77541: PPUSH
77542: LD_VAR 0 5
77546: PPUSH
77547: CALL_OW 77
77551: ST_TO_ADDR
// end ;
77552: LD_VAR 0 3
77556: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77557: LD_INT 0
77559: PPUSH
77560: PPUSH
77561: PPUSH
// result := false ;
77562: LD_ADDR_VAR 0 3
77566: PUSH
77567: LD_INT 0
77569: ST_TO_ADDR
// if not building then
77570: LD_VAR 0 2
77574: NOT
77575: IFFALSE 77579
// exit ;
77577: GO 77717
// x := GetX ( building ) ;
77579: LD_ADDR_VAR 0 4
77583: PUSH
77584: LD_VAR 0 2
77588: PPUSH
77589: CALL_OW 250
77593: ST_TO_ADDR
// y := GetY ( building ) ;
77594: LD_ADDR_VAR 0 5
77598: PUSH
77599: LD_VAR 0 2
77603: PPUSH
77604: CALL_OW 251
77608: ST_TO_ADDR
// if not x or not y then
77609: LD_VAR 0 4
77613: NOT
77614: PUSH
77615: LD_VAR 0 5
77619: NOT
77620: OR
77621: IFFALSE 77625
// exit ;
77623: GO 77717
// if GetTaskList ( unit ) then
77625: LD_VAR 0 1
77629: PPUSH
77630: CALL_OW 437
77634: IFFALSE 77717
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77636: LD_STRING e
77638: PUSH
77639: LD_VAR 0 1
77643: PPUSH
77644: CALL_OW 437
77648: PUSH
77649: LD_INT 1
77651: ARRAY
77652: PUSH
77653: LD_INT 1
77655: ARRAY
77656: EQUAL
77657: PUSH
77658: LD_VAR 0 4
77662: PUSH
77663: LD_VAR 0 1
77667: PPUSH
77668: CALL_OW 437
77672: PUSH
77673: LD_INT 1
77675: ARRAY
77676: PUSH
77677: LD_INT 2
77679: ARRAY
77680: EQUAL
77681: AND
77682: PUSH
77683: LD_VAR 0 5
77687: PUSH
77688: LD_VAR 0 1
77692: PPUSH
77693: CALL_OW 437
77697: PUSH
77698: LD_INT 1
77700: ARRAY
77701: PUSH
77702: LD_INT 3
77704: ARRAY
77705: EQUAL
77706: AND
77707: IFFALSE 77717
// result := true end ;
77709: LD_ADDR_VAR 0 3
77713: PUSH
77714: LD_INT 1
77716: ST_TO_ADDR
// end ;
77717: LD_VAR 0 3
77721: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77722: LD_INT 0
77724: PPUSH
// result := false ;
77725: LD_ADDR_VAR 0 4
77729: PUSH
77730: LD_INT 0
77732: ST_TO_ADDR
// if GetTaskList ( unit ) then
77733: LD_VAR 0 1
77737: PPUSH
77738: CALL_OW 437
77742: IFFALSE 77825
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77744: LD_STRING M
77746: PUSH
77747: LD_VAR 0 1
77751: PPUSH
77752: CALL_OW 437
77756: PUSH
77757: LD_INT 1
77759: ARRAY
77760: PUSH
77761: LD_INT 1
77763: ARRAY
77764: EQUAL
77765: PUSH
77766: LD_VAR 0 2
77770: PUSH
77771: LD_VAR 0 1
77775: PPUSH
77776: CALL_OW 437
77780: PUSH
77781: LD_INT 1
77783: ARRAY
77784: PUSH
77785: LD_INT 2
77787: ARRAY
77788: EQUAL
77789: AND
77790: PUSH
77791: LD_VAR 0 3
77795: PUSH
77796: LD_VAR 0 1
77800: PPUSH
77801: CALL_OW 437
77805: PUSH
77806: LD_INT 1
77808: ARRAY
77809: PUSH
77810: LD_INT 3
77812: ARRAY
77813: EQUAL
77814: AND
77815: IFFALSE 77825
// result := true ;
77817: LD_ADDR_VAR 0 4
77821: PUSH
77822: LD_INT 1
77824: ST_TO_ADDR
// end ; end ;
77825: LD_VAR 0 4
77829: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77830: LD_INT 0
77832: PPUSH
77833: PPUSH
77834: PPUSH
77835: PPUSH
// if not unit or not area then
77836: LD_VAR 0 1
77840: NOT
77841: PUSH
77842: LD_VAR 0 2
77846: NOT
77847: OR
77848: IFFALSE 77852
// exit ;
77850: GO 78015
// tmp := AreaToList ( area , i ) ;
77852: LD_ADDR_VAR 0 6
77856: PUSH
77857: LD_VAR 0 2
77861: PPUSH
77862: LD_VAR 0 5
77866: PPUSH
77867: CALL_OW 517
77871: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77872: LD_ADDR_VAR 0 5
77876: PUSH
77877: DOUBLE
77878: LD_INT 1
77880: DEC
77881: ST_TO_ADDR
77882: LD_VAR 0 6
77886: PUSH
77887: LD_INT 1
77889: ARRAY
77890: PUSH
77891: FOR_TO
77892: IFFALSE 78013
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77894: LD_ADDR_VAR 0 7
77898: PUSH
77899: LD_VAR 0 6
77903: PUSH
77904: LD_INT 1
77906: ARRAY
77907: PUSH
77908: LD_VAR 0 5
77912: ARRAY
77913: PUSH
77914: LD_VAR 0 6
77918: PUSH
77919: LD_INT 2
77921: ARRAY
77922: PUSH
77923: LD_VAR 0 5
77927: ARRAY
77928: PUSH
77929: EMPTY
77930: LIST
77931: LIST
77932: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
77933: LD_INT 92
77935: PUSH
77936: LD_VAR 0 7
77940: PUSH
77941: LD_INT 1
77943: ARRAY
77944: PUSH
77945: LD_VAR 0 7
77949: PUSH
77950: LD_INT 2
77952: ARRAY
77953: PUSH
77954: LD_INT 3
77956: PUSH
77957: EMPTY
77958: LIST
77959: LIST
77960: LIST
77961: LIST
77962: PPUSH
77963: CALL_OW 69
77967: PUSH
77968: LD_INT 0
77970: EQUAL
77971: IFFALSE 78011
// begin PlaceUnitArea ( unit , area , mode ) ;
77973: LD_VAR 0 1
77977: PPUSH
77978: LD_VAR 0 2
77982: PPUSH
77983: LD_VAR 0 3
77987: PPUSH
77988: CALL_OW 49
// result := IsPlaced ( unit ) ;
77992: LD_ADDR_VAR 0 4
77996: PUSH
77997: LD_VAR 0 1
78001: PPUSH
78002: CALL_OW 305
78006: ST_TO_ADDR
// exit ;
78007: POP
78008: POP
78009: GO 78015
// end ; end ;
78011: GO 77891
78013: POP
78014: POP
// end ;
78015: LD_VAR 0 4
78019: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78020: LD_INT 0
78022: PPUSH
78023: PPUSH
78024: PPUSH
// if not side or side > 8 then
78025: LD_VAR 0 1
78029: NOT
78030: PUSH
78031: LD_VAR 0 1
78035: PUSH
78036: LD_INT 8
78038: GREATER
78039: OR
78040: IFFALSE 78044
// exit ;
78042: GO 78231
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78044: LD_ADDR_VAR 0 4
78048: PUSH
78049: LD_INT 22
78051: PUSH
78052: LD_VAR 0 1
78056: PUSH
78057: EMPTY
78058: LIST
78059: LIST
78060: PUSH
78061: LD_INT 21
78063: PUSH
78064: LD_INT 3
78066: PUSH
78067: EMPTY
78068: LIST
78069: LIST
78070: PUSH
78071: EMPTY
78072: LIST
78073: LIST
78074: PPUSH
78075: CALL_OW 69
78079: ST_TO_ADDR
// if not tmp then
78080: LD_VAR 0 4
78084: NOT
78085: IFFALSE 78089
// exit ;
78087: GO 78231
// enable_addtolog := true ;
78089: LD_ADDR_OWVAR 81
78093: PUSH
78094: LD_INT 1
78096: ST_TO_ADDR
// AddToLog ( [ ) ;
78097: LD_STRING [
78099: PPUSH
78100: CALL_OW 561
// for i in tmp do
78104: LD_ADDR_VAR 0 3
78108: PUSH
78109: LD_VAR 0 4
78113: PUSH
78114: FOR_IN
78115: IFFALSE 78222
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78117: LD_STRING [
78119: PUSH
78120: LD_VAR 0 3
78124: PPUSH
78125: CALL_OW 266
78129: STR
78130: PUSH
78131: LD_STRING , 
78133: STR
78134: PUSH
78135: LD_VAR 0 3
78139: PPUSH
78140: CALL_OW 250
78144: STR
78145: PUSH
78146: LD_STRING , 
78148: STR
78149: PUSH
78150: LD_VAR 0 3
78154: PPUSH
78155: CALL_OW 251
78159: STR
78160: PUSH
78161: LD_STRING , 
78163: STR
78164: PUSH
78165: LD_VAR 0 3
78169: PPUSH
78170: CALL_OW 254
78174: STR
78175: PUSH
78176: LD_STRING , 
78178: STR
78179: PUSH
78180: LD_VAR 0 3
78184: PPUSH
78185: LD_INT 1
78187: PPUSH
78188: CALL_OW 268
78192: STR
78193: PUSH
78194: LD_STRING , 
78196: STR
78197: PUSH
78198: LD_VAR 0 3
78202: PPUSH
78203: LD_INT 2
78205: PPUSH
78206: CALL_OW 268
78210: STR
78211: PUSH
78212: LD_STRING ],
78214: STR
78215: PPUSH
78216: CALL_OW 561
// end ;
78220: GO 78114
78222: POP
78223: POP
// AddToLog ( ]; ) ;
78224: LD_STRING ];
78226: PPUSH
78227: CALL_OW 561
// end ;
78231: LD_VAR 0 2
78235: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78236: LD_INT 0
78238: PPUSH
78239: PPUSH
78240: PPUSH
78241: PPUSH
78242: PPUSH
// if not area or not rate or not max then
78243: LD_VAR 0 1
78247: NOT
78248: PUSH
78249: LD_VAR 0 2
78253: NOT
78254: OR
78255: PUSH
78256: LD_VAR 0 4
78260: NOT
78261: OR
78262: IFFALSE 78266
// exit ;
78264: GO 78455
// while 1 do
78266: LD_INT 1
78268: IFFALSE 78455
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78270: LD_ADDR_VAR 0 9
78274: PUSH
78275: LD_VAR 0 1
78279: PPUSH
78280: LD_INT 1
78282: PPUSH
78283: CALL_OW 287
78287: PUSH
78288: LD_INT 10
78290: MUL
78291: ST_TO_ADDR
// r := rate / 10 ;
78292: LD_ADDR_VAR 0 7
78296: PUSH
78297: LD_VAR 0 2
78301: PUSH
78302: LD_INT 10
78304: DIVREAL
78305: ST_TO_ADDR
// time := 1 1$00 ;
78306: LD_ADDR_VAR 0 8
78310: PUSH
78311: LD_INT 2100
78313: ST_TO_ADDR
// if amount < min then
78314: LD_VAR 0 9
78318: PUSH
78319: LD_VAR 0 3
78323: LESS
78324: IFFALSE 78342
// r := r * 2 else
78326: LD_ADDR_VAR 0 7
78330: PUSH
78331: LD_VAR 0 7
78335: PUSH
78336: LD_INT 2
78338: MUL
78339: ST_TO_ADDR
78340: GO 78368
// if amount > max then
78342: LD_VAR 0 9
78346: PUSH
78347: LD_VAR 0 4
78351: GREATER
78352: IFFALSE 78368
// r := r / 2 ;
78354: LD_ADDR_VAR 0 7
78358: PUSH
78359: LD_VAR 0 7
78363: PUSH
78364: LD_INT 2
78366: DIVREAL
78367: ST_TO_ADDR
// time := time / r ;
78368: LD_ADDR_VAR 0 8
78372: PUSH
78373: LD_VAR 0 8
78377: PUSH
78378: LD_VAR 0 7
78382: DIVREAL
78383: ST_TO_ADDR
// if time < 0 then
78384: LD_VAR 0 8
78388: PUSH
78389: LD_INT 0
78391: LESS
78392: IFFALSE 78409
// time := time * - 1 ;
78394: LD_ADDR_VAR 0 8
78398: PUSH
78399: LD_VAR 0 8
78403: PUSH
78404: LD_INT 1
78406: NEG
78407: MUL
78408: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78409: LD_VAR 0 8
78413: PUSH
78414: LD_INT 35
78416: PPUSH
78417: LD_INT 875
78419: PPUSH
78420: CALL_OW 12
78424: PLUS
78425: PPUSH
78426: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78430: LD_INT 1
78432: PPUSH
78433: LD_INT 5
78435: PPUSH
78436: CALL_OW 12
78440: PPUSH
78441: LD_VAR 0 1
78445: PPUSH
78446: LD_INT 1
78448: PPUSH
78449: CALL_OW 55
// end ;
78453: GO 78266
// end ;
78455: LD_VAR 0 5
78459: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78460: LD_INT 0
78462: PPUSH
78463: PPUSH
78464: PPUSH
78465: PPUSH
78466: PPUSH
78467: PPUSH
78468: PPUSH
78469: PPUSH
// if not turrets or not factories then
78470: LD_VAR 0 1
78474: NOT
78475: PUSH
78476: LD_VAR 0 2
78480: NOT
78481: OR
78482: IFFALSE 78486
// exit ;
78484: GO 78793
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78486: LD_ADDR_VAR 0 10
78490: PUSH
78491: LD_INT 5
78493: PUSH
78494: LD_INT 6
78496: PUSH
78497: EMPTY
78498: LIST
78499: LIST
78500: PUSH
78501: LD_INT 2
78503: PUSH
78504: LD_INT 4
78506: PUSH
78507: EMPTY
78508: LIST
78509: LIST
78510: PUSH
78511: LD_INT 3
78513: PUSH
78514: LD_INT 5
78516: PUSH
78517: EMPTY
78518: LIST
78519: LIST
78520: PUSH
78521: EMPTY
78522: LIST
78523: LIST
78524: LIST
78525: PUSH
78526: LD_INT 24
78528: PUSH
78529: LD_INT 25
78531: PUSH
78532: EMPTY
78533: LIST
78534: LIST
78535: PUSH
78536: LD_INT 23
78538: PUSH
78539: LD_INT 27
78541: PUSH
78542: EMPTY
78543: LIST
78544: LIST
78545: PUSH
78546: EMPTY
78547: LIST
78548: LIST
78549: PUSH
78550: LD_INT 42
78552: PUSH
78553: LD_INT 43
78555: PUSH
78556: EMPTY
78557: LIST
78558: LIST
78559: PUSH
78560: LD_INT 44
78562: PUSH
78563: LD_INT 46
78565: PUSH
78566: EMPTY
78567: LIST
78568: LIST
78569: PUSH
78570: LD_INT 45
78572: PUSH
78573: LD_INT 47
78575: PUSH
78576: EMPTY
78577: LIST
78578: LIST
78579: PUSH
78580: EMPTY
78581: LIST
78582: LIST
78583: LIST
78584: PUSH
78585: EMPTY
78586: LIST
78587: LIST
78588: LIST
78589: ST_TO_ADDR
// result := [ ] ;
78590: LD_ADDR_VAR 0 3
78594: PUSH
78595: EMPTY
78596: ST_TO_ADDR
// for i in turrets do
78597: LD_ADDR_VAR 0 4
78601: PUSH
78602: LD_VAR 0 1
78606: PUSH
78607: FOR_IN
78608: IFFALSE 78791
// begin nat := GetNation ( i ) ;
78610: LD_ADDR_VAR 0 7
78614: PUSH
78615: LD_VAR 0 4
78619: PPUSH
78620: CALL_OW 248
78624: ST_TO_ADDR
// weapon := 0 ;
78625: LD_ADDR_VAR 0 8
78629: PUSH
78630: LD_INT 0
78632: ST_TO_ADDR
// if not nat then
78633: LD_VAR 0 7
78637: NOT
78638: IFFALSE 78642
// continue ;
78640: GO 78607
// for j in list [ nat ] do
78642: LD_ADDR_VAR 0 5
78646: PUSH
78647: LD_VAR 0 10
78651: PUSH
78652: LD_VAR 0 7
78656: ARRAY
78657: PUSH
78658: FOR_IN
78659: IFFALSE 78700
// if GetBWeapon ( i ) = j [ 1 ] then
78661: LD_VAR 0 4
78665: PPUSH
78666: CALL_OW 269
78670: PUSH
78671: LD_VAR 0 5
78675: PUSH
78676: LD_INT 1
78678: ARRAY
78679: EQUAL
78680: IFFALSE 78698
// begin weapon := j [ 2 ] ;
78682: LD_ADDR_VAR 0 8
78686: PUSH
78687: LD_VAR 0 5
78691: PUSH
78692: LD_INT 2
78694: ARRAY
78695: ST_TO_ADDR
// break ;
78696: GO 78700
// end ;
78698: GO 78658
78700: POP
78701: POP
// if not weapon then
78702: LD_VAR 0 8
78706: NOT
78707: IFFALSE 78711
// continue ;
78709: GO 78607
// for k in factories do
78711: LD_ADDR_VAR 0 6
78715: PUSH
78716: LD_VAR 0 2
78720: PUSH
78721: FOR_IN
78722: IFFALSE 78787
// begin weapons := AvailableWeaponList ( k ) ;
78724: LD_ADDR_VAR 0 9
78728: PUSH
78729: LD_VAR 0 6
78733: PPUSH
78734: CALL_OW 478
78738: ST_TO_ADDR
// if not weapons then
78739: LD_VAR 0 9
78743: NOT
78744: IFFALSE 78748
// continue ;
78746: GO 78721
// if weapon in weapons then
78748: LD_VAR 0 8
78752: PUSH
78753: LD_VAR 0 9
78757: IN
78758: IFFALSE 78785
// begin result := [ i , weapon ] ;
78760: LD_ADDR_VAR 0 3
78764: PUSH
78765: LD_VAR 0 4
78769: PUSH
78770: LD_VAR 0 8
78774: PUSH
78775: EMPTY
78776: LIST
78777: LIST
78778: ST_TO_ADDR
// exit ;
78779: POP
78780: POP
78781: POP
78782: POP
78783: GO 78793
// end ; end ;
78785: GO 78721
78787: POP
78788: POP
// end ;
78789: GO 78607
78791: POP
78792: POP
// end ;
78793: LD_VAR 0 3
78797: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78798: LD_INT 0
78800: PPUSH
// if not side or side > 8 then
78801: LD_VAR 0 3
78805: NOT
78806: PUSH
78807: LD_VAR 0 3
78811: PUSH
78812: LD_INT 8
78814: GREATER
78815: OR
78816: IFFALSE 78820
// exit ;
78818: GO 78879
// if not range then
78820: LD_VAR 0 4
78824: NOT
78825: IFFALSE 78836
// range := - 12 ;
78827: LD_ADDR_VAR 0 4
78831: PUSH
78832: LD_INT 12
78834: NEG
78835: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78836: LD_VAR 0 1
78840: PPUSH
78841: LD_VAR 0 2
78845: PPUSH
78846: LD_VAR 0 3
78850: PPUSH
78851: LD_VAR 0 4
78855: PPUSH
78856: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78860: LD_VAR 0 1
78864: PPUSH
78865: LD_VAR 0 2
78869: PPUSH
78870: LD_VAR 0 3
78874: PPUSH
78875: CALL_OW 331
// end ;
78879: LD_VAR 0 5
78883: RET
// export function Video ( mode ) ; begin
78884: LD_INT 0
78886: PPUSH
// ingame_video = mode ;
78887: LD_ADDR_OWVAR 52
78891: PUSH
78892: LD_VAR 0 1
78896: ST_TO_ADDR
// interface_hidden = mode ;
78897: LD_ADDR_OWVAR 54
78901: PUSH
78902: LD_VAR 0 1
78906: ST_TO_ADDR
// end ;
78907: LD_VAR 0 2
78911: RET
// export function Join ( array , element ) ; begin
78912: LD_INT 0
78914: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78915: LD_ADDR_VAR 0 3
78919: PUSH
78920: LD_VAR 0 1
78924: PPUSH
78925: LD_VAR 0 1
78929: PUSH
78930: LD_INT 1
78932: PLUS
78933: PPUSH
78934: LD_VAR 0 2
78938: PPUSH
78939: CALL_OW 1
78943: ST_TO_ADDR
// end ;
78944: LD_VAR 0 3
78948: RET
// export function JoinUnion ( array , element ) ; begin
78949: LD_INT 0
78951: PPUSH
// result := array union element ;
78952: LD_ADDR_VAR 0 3
78956: PUSH
78957: LD_VAR 0 1
78961: PUSH
78962: LD_VAR 0 2
78966: UNION
78967: ST_TO_ADDR
// end ;
78968: LD_VAR 0 3
78972: RET
// export function GetBehemoths ( side ) ; begin
78973: LD_INT 0
78975: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78976: LD_ADDR_VAR 0 2
78980: PUSH
78981: LD_INT 22
78983: PUSH
78984: LD_VAR 0 1
78988: PUSH
78989: EMPTY
78990: LIST
78991: LIST
78992: PUSH
78993: LD_INT 31
78995: PUSH
78996: LD_INT 25
78998: PUSH
78999: EMPTY
79000: LIST
79001: LIST
79002: PUSH
79003: EMPTY
79004: LIST
79005: LIST
79006: PPUSH
79007: CALL_OW 69
79011: ST_TO_ADDR
// end ;
79012: LD_VAR 0 2
79016: RET
// export function Shuffle ( array ) ; var i , index ; begin
79017: LD_INT 0
79019: PPUSH
79020: PPUSH
79021: PPUSH
// result := [ ] ;
79022: LD_ADDR_VAR 0 2
79026: PUSH
79027: EMPTY
79028: ST_TO_ADDR
// if not array then
79029: LD_VAR 0 1
79033: NOT
79034: IFFALSE 79038
// exit ;
79036: GO 79137
// Randomize ;
79038: CALL_OW 10
// for i = array downto 1 do
79042: LD_ADDR_VAR 0 3
79046: PUSH
79047: DOUBLE
79048: LD_VAR 0 1
79052: INC
79053: ST_TO_ADDR
79054: LD_INT 1
79056: PUSH
79057: FOR_DOWNTO
79058: IFFALSE 79135
// begin index := rand ( 1 , array ) ;
79060: LD_ADDR_VAR 0 4
79064: PUSH
79065: LD_INT 1
79067: PPUSH
79068: LD_VAR 0 1
79072: PPUSH
79073: CALL_OW 12
79077: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79078: LD_ADDR_VAR 0 2
79082: PUSH
79083: LD_VAR 0 2
79087: PPUSH
79088: LD_VAR 0 2
79092: PUSH
79093: LD_INT 1
79095: PLUS
79096: PPUSH
79097: LD_VAR 0 1
79101: PUSH
79102: LD_VAR 0 4
79106: ARRAY
79107: PPUSH
79108: CALL_OW 2
79112: ST_TO_ADDR
// array := Delete ( array , index ) ;
79113: LD_ADDR_VAR 0 1
79117: PUSH
79118: LD_VAR 0 1
79122: PPUSH
79123: LD_VAR 0 4
79127: PPUSH
79128: CALL_OW 3
79132: ST_TO_ADDR
// end ;
79133: GO 79057
79135: POP
79136: POP
// end ;
79137: LD_VAR 0 2
79141: RET
// export function GetBaseMaterials ( base ) ; begin
79142: LD_INT 0
79144: PPUSH
// result := [ 0 , 0 , 0 ] ;
79145: LD_ADDR_VAR 0 2
79149: PUSH
79150: LD_INT 0
79152: PUSH
79153: LD_INT 0
79155: PUSH
79156: LD_INT 0
79158: PUSH
79159: EMPTY
79160: LIST
79161: LIST
79162: LIST
79163: ST_TO_ADDR
// if not base then
79164: LD_VAR 0 1
79168: NOT
79169: IFFALSE 79173
// exit ;
79171: GO 79222
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79173: LD_ADDR_VAR 0 2
79177: PUSH
79178: LD_VAR 0 1
79182: PPUSH
79183: LD_INT 1
79185: PPUSH
79186: CALL_OW 275
79190: PUSH
79191: LD_VAR 0 1
79195: PPUSH
79196: LD_INT 2
79198: PPUSH
79199: CALL_OW 275
79203: PUSH
79204: LD_VAR 0 1
79208: PPUSH
79209: LD_INT 3
79211: PPUSH
79212: CALL_OW 275
79216: PUSH
79217: EMPTY
79218: LIST
79219: LIST
79220: LIST
79221: ST_TO_ADDR
// end ;
79222: LD_VAR 0 2
79226: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79227: LD_INT 0
79229: PPUSH
79230: PPUSH
// result := array ;
79231: LD_ADDR_VAR 0 3
79235: PUSH
79236: LD_VAR 0 1
79240: ST_TO_ADDR
// if size >= result then
79241: LD_VAR 0 2
79245: PUSH
79246: LD_VAR 0 3
79250: GREATEREQUAL
79251: IFFALSE 79255
// exit ;
79253: GO 79305
// if size then
79255: LD_VAR 0 2
79259: IFFALSE 79305
// for i := array downto size do
79261: LD_ADDR_VAR 0 4
79265: PUSH
79266: DOUBLE
79267: LD_VAR 0 1
79271: INC
79272: ST_TO_ADDR
79273: LD_VAR 0 2
79277: PUSH
79278: FOR_DOWNTO
79279: IFFALSE 79303
// result := Delete ( result , result ) ;
79281: LD_ADDR_VAR 0 3
79285: PUSH
79286: LD_VAR 0 3
79290: PPUSH
79291: LD_VAR 0 3
79295: PPUSH
79296: CALL_OW 3
79300: ST_TO_ADDR
79301: GO 79278
79303: POP
79304: POP
// end ;
79305: LD_VAR 0 3
79309: RET
// export function ComExit ( unit ) ; var tmp ; begin
79310: LD_INT 0
79312: PPUSH
79313: PPUSH
// if not IsInUnit ( unit ) then
79314: LD_VAR 0 1
79318: PPUSH
79319: CALL_OW 310
79323: NOT
79324: IFFALSE 79328
// exit ;
79326: GO 79388
// tmp := IsInUnit ( unit ) ;
79328: LD_ADDR_VAR 0 3
79332: PUSH
79333: LD_VAR 0 1
79337: PPUSH
79338: CALL_OW 310
79342: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79343: LD_VAR 0 3
79347: PPUSH
79348: CALL_OW 247
79352: PUSH
79353: LD_INT 2
79355: EQUAL
79356: IFFALSE 79369
// ComExitVehicle ( unit ) else
79358: LD_VAR 0 1
79362: PPUSH
79363: CALL_OW 121
79367: GO 79378
// ComExitBuilding ( unit ) ;
79369: LD_VAR 0 1
79373: PPUSH
79374: CALL_OW 122
// result := tmp ;
79378: LD_ADDR_VAR 0 2
79382: PUSH
79383: LD_VAR 0 3
79387: ST_TO_ADDR
// end ;
79388: LD_VAR 0 2
79392: RET
// export function ComExitAll ( units ) ; var i ; begin
79393: LD_INT 0
79395: PPUSH
79396: PPUSH
// if not units then
79397: LD_VAR 0 1
79401: NOT
79402: IFFALSE 79406
// exit ;
79404: GO 79432
// for i in units do
79406: LD_ADDR_VAR 0 3
79410: PUSH
79411: LD_VAR 0 1
79415: PUSH
79416: FOR_IN
79417: IFFALSE 79430
// ComExit ( i ) ;
79419: LD_VAR 0 3
79423: PPUSH
79424: CALL 79310 0 1
79428: GO 79416
79430: POP
79431: POP
// end ;
79432: LD_VAR 0 2
79436: RET
// export function ResetHc ; begin
79437: LD_INT 0
79439: PPUSH
// InitHc ;
79440: CALL_OW 19
// hc_importance := 0 ;
79444: LD_ADDR_OWVAR 32
79448: PUSH
79449: LD_INT 0
79451: ST_TO_ADDR
// end ;
79452: LD_VAR 0 1
79456: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79457: LD_INT 0
79459: PPUSH
79460: PPUSH
79461: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79462: LD_ADDR_VAR 0 6
79466: PUSH
79467: LD_VAR 0 1
79471: PUSH
79472: LD_VAR 0 3
79476: PLUS
79477: PUSH
79478: LD_INT 2
79480: DIV
79481: ST_TO_ADDR
// if _x < 0 then
79482: LD_VAR 0 6
79486: PUSH
79487: LD_INT 0
79489: LESS
79490: IFFALSE 79507
// _x := _x * - 1 ;
79492: LD_ADDR_VAR 0 6
79496: PUSH
79497: LD_VAR 0 6
79501: PUSH
79502: LD_INT 1
79504: NEG
79505: MUL
79506: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79507: LD_ADDR_VAR 0 7
79511: PUSH
79512: LD_VAR 0 2
79516: PUSH
79517: LD_VAR 0 4
79521: PLUS
79522: PUSH
79523: LD_INT 2
79525: DIV
79526: ST_TO_ADDR
// if _y < 0 then
79527: LD_VAR 0 7
79531: PUSH
79532: LD_INT 0
79534: LESS
79535: IFFALSE 79552
// _y := _y * - 1 ;
79537: LD_ADDR_VAR 0 7
79541: PUSH
79542: LD_VAR 0 7
79546: PUSH
79547: LD_INT 1
79549: NEG
79550: MUL
79551: ST_TO_ADDR
// result := [ _x , _y ] ;
79552: LD_ADDR_VAR 0 5
79556: PUSH
79557: LD_VAR 0 6
79561: PUSH
79562: LD_VAR 0 7
79566: PUSH
79567: EMPTY
79568: LIST
79569: LIST
79570: ST_TO_ADDR
// end ;
79571: LD_VAR 0 5
79575: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79576: LD_INT 0
79578: PPUSH
79579: PPUSH
79580: PPUSH
79581: PPUSH
// task := GetTaskList ( unit ) ;
79582: LD_ADDR_VAR 0 7
79586: PUSH
79587: LD_VAR 0 1
79591: PPUSH
79592: CALL_OW 437
79596: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79597: LD_VAR 0 7
79601: NOT
79602: PUSH
79603: LD_VAR 0 1
79607: PPUSH
79608: LD_VAR 0 2
79612: PPUSH
79613: CALL_OW 308
79617: NOT
79618: AND
79619: IFFALSE 79623
// exit ;
79621: GO 79741
// if IsInArea ( unit , area ) then
79623: LD_VAR 0 1
79627: PPUSH
79628: LD_VAR 0 2
79632: PPUSH
79633: CALL_OW 308
79637: IFFALSE 79655
// begin ComMoveToArea ( unit , goAway ) ;
79639: LD_VAR 0 1
79643: PPUSH
79644: LD_VAR 0 3
79648: PPUSH
79649: CALL_OW 113
// exit ;
79653: GO 79741
// end ; if task [ 1 ] [ 1 ] <> M then
79655: LD_VAR 0 7
79659: PUSH
79660: LD_INT 1
79662: ARRAY
79663: PUSH
79664: LD_INT 1
79666: ARRAY
79667: PUSH
79668: LD_STRING M
79670: NONEQUAL
79671: IFFALSE 79675
// exit ;
79673: GO 79741
// x := task [ 1 ] [ 2 ] ;
79675: LD_ADDR_VAR 0 5
79679: PUSH
79680: LD_VAR 0 7
79684: PUSH
79685: LD_INT 1
79687: ARRAY
79688: PUSH
79689: LD_INT 2
79691: ARRAY
79692: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79693: LD_ADDR_VAR 0 6
79697: PUSH
79698: LD_VAR 0 7
79702: PUSH
79703: LD_INT 1
79705: ARRAY
79706: PUSH
79707: LD_INT 3
79709: ARRAY
79710: ST_TO_ADDR
// if InArea ( x , y , area ) then
79711: LD_VAR 0 5
79715: PPUSH
79716: LD_VAR 0 6
79720: PPUSH
79721: LD_VAR 0 2
79725: PPUSH
79726: CALL_OW 309
79730: IFFALSE 79741
// ComStop ( unit ) ;
79732: LD_VAR 0 1
79736: PPUSH
79737: CALL_OW 141
// end ;
79741: LD_VAR 0 4
79745: RET
// export function Abs ( value ) ; begin
79746: LD_INT 0
79748: PPUSH
// result := value ;
79749: LD_ADDR_VAR 0 2
79753: PUSH
79754: LD_VAR 0 1
79758: ST_TO_ADDR
// if value < 0 then
79759: LD_VAR 0 1
79763: PUSH
79764: LD_INT 0
79766: LESS
79767: IFFALSE 79784
// result := value * - 1 ;
79769: LD_ADDR_VAR 0 2
79773: PUSH
79774: LD_VAR 0 1
79778: PUSH
79779: LD_INT 1
79781: NEG
79782: MUL
79783: ST_TO_ADDR
// end ;
79784: LD_VAR 0 2
79788: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79789: LD_INT 0
79791: PPUSH
79792: PPUSH
79793: PPUSH
79794: PPUSH
79795: PPUSH
79796: PPUSH
79797: PPUSH
79798: PPUSH
// if not unit or not building then
79799: LD_VAR 0 1
79803: NOT
79804: PUSH
79805: LD_VAR 0 2
79809: NOT
79810: OR
79811: IFFALSE 79815
// exit ;
79813: GO 80041
// x := GetX ( building ) ;
79815: LD_ADDR_VAR 0 4
79819: PUSH
79820: LD_VAR 0 2
79824: PPUSH
79825: CALL_OW 250
79829: ST_TO_ADDR
// y := GetY ( building ) ;
79830: LD_ADDR_VAR 0 6
79834: PUSH
79835: LD_VAR 0 2
79839: PPUSH
79840: CALL_OW 251
79844: ST_TO_ADDR
// d := GetDir ( building ) ;
79845: LD_ADDR_VAR 0 8
79849: PUSH
79850: LD_VAR 0 2
79854: PPUSH
79855: CALL_OW 254
79859: ST_TO_ADDR
// r := 4 ;
79860: LD_ADDR_VAR 0 9
79864: PUSH
79865: LD_INT 4
79867: ST_TO_ADDR
// for i := 1 to 5 do
79868: LD_ADDR_VAR 0 10
79872: PUSH
79873: DOUBLE
79874: LD_INT 1
79876: DEC
79877: ST_TO_ADDR
79878: LD_INT 5
79880: PUSH
79881: FOR_TO
79882: IFFALSE 80039
// begin _x := ShiftX ( x , d , r + i ) ;
79884: LD_ADDR_VAR 0 5
79888: PUSH
79889: LD_VAR 0 4
79893: PPUSH
79894: LD_VAR 0 8
79898: PPUSH
79899: LD_VAR 0 9
79903: PUSH
79904: LD_VAR 0 10
79908: PLUS
79909: PPUSH
79910: CALL_OW 272
79914: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79915: LD_ADDR_VAR 0 7
79919: PUSH
79920: LD_VAR 0 6
79924: PPUSH
79925: LD_VAR 0 8
79929: PPUSH
79930: LD_VAR 0 9
79934: PUSH
79935: LD_VAR 0 10
79939: PLUS
79940: PPUSH
79941: CALL_OW 273
79945: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79946: LD_VAR 0 5
79950: PPUSH
79951: LD_VAR 0 7
79955: PPUSH
79956: CALL_OW 488
79960: PUSH
79961: LD_VAR 0 5
79965: PPUSH
79966: LD_VAR 0 7
79970: PPUSH
79971: CALL_OW 428
79975: PPUSH
79976: CALL_OW 247
79980: PUSH
79981: LD_INT 3
79983: PUSH
79984: LD_INT 2
79986: PUSH
79987: EMPTY
79988: LIST
79989: LIST
79990: IN
79991: NOT
79992: AND
79993: IFFALSE 80037
// begin ComMoveXY ( unit , _x , _y ) ;
79995: LD_VAR 0 1
79999: PPUSH
80000: LD_VAR 0 5
80004: PPUSH
80005: LD_VAR 0 7
80009: PPUSH
80010: CALL_OW 111
// result := [ _x , _y ] ;
80014: LD_ADDR_VAR 0 3
80018: PUSH
80019: LD_VAR 0 5
80023: PUSH
80024: LD_VAR 0 7
80028: PUSH
80029: EMPTY
80030: LIST
80031: LIST
80032: ST_TO_ADDR
// exit ;
80033: POP
80034: POP
80035: GO 80041
// end ; end ;
80037: GO 79881
80039: POP
80040: POP
// end ;
80041: LD_VAR 0 3
80045: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80046: LD_INT 0
80048: PPUSH
80049: PPUSH
80050: PPUSH
// result := 0 ;
80051: LD_ADDR_VAR 0 3
80055: PUSH
80056: LD_INT 0
80058: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80059: LD_VAR 0 1
80063: PUSH
80064: LD_INT 0
80066: LESS
80067: PUSH
80068: LD_VAR 0 1
80072: PUSH
80073: LD_INT 8
80075: GREATER
80076: OR
80077: PUSH
80078: LD_VAR 0 2
80082: PUSH
80083: LD_INT 0
80085: LESS
80086: OR
80087: PUSH
80088: LD_VAR 0 2
80092: PUSH
80093: LD_INT 8
80095: GREATER
80096: OR
80097: IFFALSE 80101
// exit ;
80099: GO 80176
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80101: LD_ADDR_VAR 0 4
80105: PUSH
80106: LD_INT 22
80108: PUSH
80109: LD_VAR 0 2
80113: PUSH
80114: EMPTY
80115: LIST
80116: LIST
80117: PPUSH
80118: CALL_OW 69
80122: PUSH
80123: FOR_IN
80124: IFFALSE 80174
// begin un := UnitShoot ( i ) ;
80126: LD_ADDR_VAR 0 5
80130: PUSH
80131: LD_VAR 0 4
80135: PPUSH
80136: CALL_OW 504
80140: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80141: LD_VAR 0 5
80145: PPUSH
80146: CALL_OW 255
80150: PUSH
80151: LD_VAR 0 1
80155: EQUAL
80156: IFFALSE 80172
// begin result := un ;
80158: LD_ADDR_VAR 0 3
80162: PUSH
80163: LD_VAR 0 5
80167: ST_TO_ADDR
// exit ;
80168: POP
80169: POP
80170: GO 80176
// end ; end ;
80172: GO 80123
80174: POP
80175: POP
// end ;
80176: LD_VAR 0 3
80180: RET
// export function GetCargoBay ( units ) ; begin
80181: LD_INT 0
80183: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80184: LD_ADDR_VAR 0 2
80188: PUSH
80189: LD_VAR 0 1
80193: PPUSH
80194: LD_INT 2
80196: PUSH
80197: LD_INT 34
80199: PUSH
80200: LD_INT 12
80202: PUSH
80203: EMPTY
80204: LIST
80205: LIST
80206: PUSH
80207: LD_INT 34
80209: PUSH
80210: LD_INT 51
80212: PUSH
80213: EMPTY
80214: LIST
80215: LIST
80216: PUSH
80217: LD_INT 34
80219: PUSH
80220: LD_INT 32
80222: PUSH
80223: EMPTY
80224: LIST
80225: LIST
80226: PUSH
80227: LD_INT 34
80229: PUSH
80230: LD_INT 89
80232: PUSH
80233: EMPTY
80234: LIST
80235: LIST
80236: PUSH
80237: EMPTY
80238: LIST
80239: LIST
80240: LIST
80241: LIST
80242: LIST
80243: PPUSH
80244: CALL_OW 72
80248: ST_TO_ADDR
// end ;
80249: LD_VAR 0 2
80253: RET
// export function Negate ( value ) ; begin
80254: LD_INT 0
80256: PPUSH
// result := not value ;
80257: LD_ADDR_VAR 0 2
80261: PUSH
80262: LD_VAR 0 1
80266: NOT
80267: ST_TO_ADDR
// end ;
80268: LD_VAR 0 2
80272: RET
// export function Inc ( value ) ; begin
80273: LD_INT 0
80275: PPUSH
// result := value + 1 ;
80276: LD_ADDR_VAR 0 2
80280: PUSH
80281: LD_VAR 0 1
80285: PUSH
80286: LD_INT 1
80288: PLUS
80289: ST_TO_ADDR
// end ;
80290: LD_VAR 0 2
80294: RET
// export function Dec ( value ) ; begin
80295: LD_INT 0
80297: PPUSH
// result := value - 1 ;
80298: LD_ADDR_VAR 0 2
80302: PUSH
80303: LD_VAR 0 1
80307: PUSH
80308: LD_INT 1
80310: MINUS
80311: ST_TO_ADDR
// end ;
80312: LD_VAR 0 2
80316: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80317: LD_INT 0
80319: PPUSH
80320: PPUSH
80321: PPUSH
80322: PPUSH
80323: PPUSH
80324: PPUSH
80325: PPUSH
80326: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80327: LD_VAR 0 1
80331: PPUSH
80332: LD_VAR 0 2
80336: PPUSH
80337: CALL_OW 488
80341: NOT
80342: PUSH
80343: LD_VAR 0 3
80347: PPUSH
80348: LD_VAR 0 4
80352: PPUSH
80353: CALL_OW 488
80357: NOT
80358: OR
80359: IFFALSE 80372
// begin result := - 1 ;
80361: LD_ADDR_VAR 0 5
80365: PUSH
80366: LD_INT 1
80368: NEG
80369: ST_TO_ADDR
// exit ;
80370: GO 80607
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80372: LD_ADDR_VAR 0 12
80376: PUSH
80377: LD_VAR 0 1
80381: PPUSH
80382: LD_VAR 0 2
80386: PPUSH
80387: LD_VAR 0 3
80391: PPUSH
80392: LD_VAR 0 4
80396: PPUSH
80397: CALL 79457 0 4
80401: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80402: LD_ADDR_VAR 0 11
80406: PUSH
80407: LD_VAR 0 1
80411: PPUSH
80412: LD_VAR 0 2
80416: PPUSH
80417: LD_VAR 0 12
80421: PUSH
80422: LD_INT 1
80424: ARRAY
80425: PPUSH
80426: LD_VAR 0 12
80430: PUSH
80431: LD_INT 2
80433: ARRAY
80434: PPUSH
80435: CALL_OW 298
80439: ST_TO_ADDR
// distance := 9999 ;
80440: LD_ADDR_VAR 0 10
80444: PUSH
80445: LD_INT 9999
80447: ST_TO_ADDR
// for i := 0 to 5 do
80448: LD_ADDR_VAR 0 6
80452: PUSH
80453: DOUBLE
80454: LD_INT 0
80456: DEC
80457: ST_TO_ADDR
80458: LD_INT 5
80460: PUSH
80461: FOR_TO
80462: IFFALSE 80605
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80464: LD_ADDR_VAR 0 7
80468: PUSH
80469: LD_VAR 0 1
80473: PPUSH
80474: LD_VAR 0 6
80478: PPUSH
80479: LD_VAR 0 11
80483: PPUSH
80484: CALL_OW 272
80488: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80489: LD_ADDR_VAR 0 8
80493: PUSH
80494: LD_VAR 0 2
80498: PPUSH
80499: LD_VAR 0 6
80503: PPUSH
80504: LD_VAR 0 11
80508: PPUSH
80509: CALL_OW 273
80513: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80514: LD_VAR 0 7
80518: PPUSH
80519: LD_VAR 0 8
80523: PPUSH
80524: CALL_OW 488
80528: NOT
80529: IFFALSE 80533
// continue ;
80531: GO 80461
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80533: LD_ADDR_VAR 0 9
80537: PUSH
80538: LD_VAR 0 12
80542: PUSH
80543: LD_INT 1
80545: ARRAY
80546: PPUSH
80547: LD_VAR 0 12
80551: PUSH
80552: LD_INT 2
80554: ARRAY
80555: PPUSH
80556: LD_VAR 0 7
80560: PPUSH
80561: LD_VAR 0 8
80565: PPUSH
80566: CALL_OW 298
80570: ST_TO_ADDR
// if tmp < distance then
80571: LD_VAR 0 9
80575: PUSH
80576: LD_VAR 0 10
80580: LESS
80581: IFFALSE 80603
// begin result := i ;
80583: LD_ADDR_VAR 0 5
80587: PUSH
80588: LD_VAR 0 6
80592: ST_TO_ADDR
// distance := tmp ;
80593: LD_ADDR_VAR 0 10
80597: PUSH
80598: LD_VAR 0 9
80602: ST_TO_ADDR
// end ; end ;
80603: GO 80461
80605: POP
80606: POP
// end ;
80607: LD_VAR 0 5
80611: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80612: LD_INT 0
80614: PPUSH
80615: PPUSH
// if not driver or not IsInUnit ( driver ) then
80616: LD_VAR 0 1
80620: NOT
80621: PUSH
80622: LD_VAR 0 1
80626: PPUSH
80627: CALL_OW 310
80631: NOT
80632: OR
80633: IFFALSE 80637
// exit ;
80635: GO 80727
// vehicle := IsInUnit ( driver ) ;
80637: LD_ADDR_VAR 0 3
80641: PUSH
80642: LD_VAR 0 1
80646: PPUSH
80647: CALL_OW 310
80651: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80652: LD_VAR 0 1
80656: PPUSH
80657: LD_STRING \
80659: PUSH
80660: LD_INT 0
80662: PUSH
80663: LD_INT 0
80665: PUSH
80666: LD_INT 0
80668: PUSH
80669: LD_INT 0
80671: PUSH
80672: LD_INT 0
80674: PUSH
80675: LD_INT 0
80677: PUSH
80678: EMPTY
80679: LIST
80680: LIST
80681: LIST
80682: LIST
80683: LIST
80684: LIST
80685: LIST
80686: PUSH
80687: LD_STRING E
80689: PUSH
80690: LD_INT 0
80692: PUSH
80693: LD_INT 0
80695: PUSH
80696: LD_VAR 0 3
80700: PUSH
80701: LD_INT 0
80703: PUSH
80704: LD_INT 0
80706: PUSH
80707: LD_INT 0
80709: PUSH
80710: EMPTY
80711: LIST
80712: LIST
80713: LIST
80714: LIST
80715: LIST
80716: LIST
80717: LIST
80718: PUSH
80719: EMPTY
80720: LIST
80721: LIST
80722: PPUSH
80723: CALL_OW 446
// end ;
80727: LD_VAR 0 2
80731: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80732: LD_INT 0
80734: PPUSH
80735: PPUSH
// if not driver or not IsInUnit ( driver ) then
80736: LD_VAR 0 1
80740: NOT
80741: PUSH
80742: LD_VAR 0 1
80746: PPUSH
80747: CALL_OW 310
80751: NOT
80752: OR
80753: IFFALSE 80757
// exit ;
80755: GO 80847
// vehicle := IsInUnit ( driver ) ;
80757: LD_ADDR_VAR 0 3
80761: PUSH
80762: LD_VAR 0 1
80766: PPUSH
80767: CALL_OW 310
80771: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80772: LD_VAR 0 1
80776: PPUSH
80777: LD_STRING \
80779: PUSH
80780: LD_INT 0
80782: PUSH
80783: LD_INT 0
80785: PUSH
80786: LD_INT 0
80788: PUSH
80789: LD_INT 0
80791: PUSH
80792: LD_INT 0
80794: PUSH
80795: LD_INT 0
80797: PUSH
80798: EMPTY
80799: LIST
80800: LIST
80801: LIST
80802: LIST
80803: LIST
80804: LIST
80805: LIST
80806: PUSH
80807: LD_STRING E
80809: PUSH
80810: LD_INT 0
80812: PUSH
80813: LD_INT 0
80815: PUSH
80816: LD_VAR 0 3
80820: PUSH
80821: LD_INT 0
80823: PUSH
80824: LD_INT 0
80826: PUSH
80827: LD_INT 0
80829: PUSH
80830: EMPTY
80831: LIST
80832: LIST
80833: LIST
80834: LIST
80835: LIST
80836: LIST
80837: LIST
80838: PUSH
80839: EMPTY
80840: LIST
80841: LIST
80842: PPUSH
80843: CALL_OW 447
// end ;
80847: LD_VAR 0 2
80851: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80852: LD_INT 0
80854: PPUSH
80855: PPUSH
80856: PPUSH
// tmp := [ ] ;
80857: LD_ADDR_VAR 0 5
80861: PUSH
80862: EMPTY
80863: ST_TO_ADDR
// for i in units do
80864: LD_ADDR_VAR 0 4
80868: PUSH
80869: LD_VAR 0 1
80873: PUSH
80874: FOR_IN
80875: IFFALSE 80913
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80877: LD_ADDR_VAR 0 5
80881: PUSH
80882: LD_VAR 0 5
80886: PPUSH
80887: LD_VAR 0 5
80891: PUSH
80892: LD_INT 1
80894: PLUS
80895: PPUSH
80896: LD_VAR 0 4
80900: PPUSH
80901: CALL_OW 256
80905: PPUSH
80906: CALL_OW 2
80910: ST_TO_ADDR
80911: GO 80874
80913: POP
80914: POP
// if not tmp then
80915: LD_VAR 0 5
80919: NOT
80920: IFFALSE 80924
// exit ;
80922: GO 80972
// if asc then
80924: LD_VAR 0 2
80928: IFFALSE 80952
// result := SortListByListAsc ( units , tmp ) else
80930: LD_ADDR_VAR 0 3
80934: PUSH
80935: LD_VAR 0 1
80939: PPUSH
80940: LD_VAR 0 5
80944: PPUSH
80945: CALL_OW 76
80949: ST_TO_ADDR
80950: GO 80972
// result := SortListByListDesc ( units , tmp ) ;
80952: LD_ADDR_VAR 0 3
80956: PUSH
80957: LD_VAR 0 1
80961: PPUSH
80962: LD_VAR 0 5
80966: PPUSH
80967: CALL_OW 77
80971: ST_TO_ADDR
// end ;
80972: LD_VAR 0 3
80976: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80977: LD_INT 0
80979: PPUSH
80980: PPUSH
// task := GetTaskList ( mech ) ;
80981: LD_ADDR_VAR 0 4
80985: PUSH
80986: LD_VAR 0 1
80990: PPUSH
80991: CALL_OW 437
80995: ST_TO_ADDR
// if not task then
80996: LD_VAR 0 4
81000: NOT
81001: IFFALSE 81005
// exit ;
81003: GO 81047
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81005: LD_ADDR_VAR 0 3
81009: PUSH
81010: LD_VAR 0 4
81014: PUSH
81015: LD_INT 1
81017: ARRAY
81018: PUSH
81019: LD_INT 1
81021: ARRAY
81022: PUSH
81023: LD_STRING r
81025: EQUAL
81026: PUSH
81027: LD_VAR 0 4
81031: PUSH
81032: LD_INT 1
81034: ARRAY
81035: PUSH
81036: LD_INT 4
81038: ARRAY
81039: PUSH
81040: LD_VAR 0 2
81044: EQUAL
81045: AND
81046: ST_TO_ADDR
// end ;
81047: LD_VAR 0 3
81051: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81052: LD_INT 0
81054: PPUSH
// SetDir ( unit , d ) ;
81055: LD_VAR 0 1
81059: PPUSH
81060: LD_VAR 0 4
81064: PPUSH
81065: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
81069: LD_VAR 0 1
81073: PPUSH
81074: LD_VAR 0 2
81078: PPUSH
81079: LD_VAR 0 3
81083: PPUSH
81084: LD_VAR 0 5
81088: PPUSH
81089: CALL_OW 48
// end ;
81093: LD_VAR 0 6
81097: RET
// export function ToNaturalNumber ( number ) ; begin
81098: LD_INT 0
81100: PPUSH
// result := number div 1 ;
81101: LD_ADDR_VAR 0 2
81105: PUSH
81106: LD_VAR 0 1
81110: PUSH
81111: LD_INT 1
81113: DIV
81114: ST_TO_ADDR
// if number < 0 then
81115: LD_VAR 0 1
81119: PUSH
81120: LD_INT 0
81122: LESS
81123: IFFALSE 81133
// result := 0 ;
81125: LD_ADDR_VAR 0 2
81129: PUSH
81130: LD_INT 0
81132: ST_TO_ADDR
// end ;
81133: LD_VAR 0 2
81137: RET
// export function SortByClass ( units , class ) ; var un ; begin
81138: LD_INT 0
81140: PPUSH
81141: PPUSH
// if not units or not class then
81142: LD_VAR 0 1
81146: NOT
81147: PUSH
81148: LD_VAR 0 2
81152: NOT
81153: OR
81154: IFFALSE 81158
// exit ;
81156: GO 81253
// result := [ ] ;
81158: LD_ADDR_VAR 0 3
81162: PUSH
81163: EMPTY
81164: ST_TO_ADDR
// for un in units do
81165: LD_ADDR_VAR 0 4
81169: PUSH
81170: LD_VAR 0 1
81174: PUSH
81175: FOR_IN
81176: IFFALSE 81251
// if GetClass ( un ) = class then
81178: LD_VAR 0 4
81182: PPUSH
81183: CALL_OW 257
81187: PUSH
81188: LD_VAR 0 2
81192: EQUAL
81193: IFFALSE 81220
// result := Insert ( result , 1 , un ) else
81195: LD_ADDR_VAR 0 3
81199: PUSH
81200: LD_VAR 0 3
81204: PPUSH
81205: LD_INT 1
81207: PPUSH
81208: LD_VAR 0 4
81212: PPUSH
81213: CALL_OW 2
81217: ST_TO_ADDR
81218: GO 81249
// result := Replace ( result , result + 1 , un ) ;
81220: LD_ADDR_VAR 0 3
81224: PUSH
81225: LD_VAR 0 3
81229: PPUSH
81230: LD_VAR 0 3
81234: PUSH
81235: LD_INT 1
81237: PLUS
81238: PPUSH
81239: LD_VAR 0 4
81243: PPUSH
81244: CALL_OW 1
81248: ST_TO_ADDR
81249: GO 81175
81251: POP
81252: POP
// end ;
81253: LD_VAR 0 3
81257: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81258: LD_INT 0
81260: PPUSH
81261: PPUSH
81262: PPUSH
81263: PPUSH
81264: PPUSH
81265: PPUSH
81266: PPUSH
// result := [ ] ;
81267: LD_ADDR_VAR 0 4
81271: PUSH
81272: EMPTY
81273: ST_TO_ADDR
// if x - r < 0 then
81274: LD_VAR 0 1
81278: PUSH
81279: LD_VAR 0 3
81283: MINUS
81284: PUSH
81285: LD_INT 0
81287: LESS
81288: IFFALSE 81300
// min_x := 0 else
81290: LD_ADDR_VAR 0 8
81294: PUSH
81295: LD_INT 0
81297: ST_TO_ADDR
81298: GO 81316
// min_x := x - r ;
81300: LD_ADDR_VAR 0 8
81304: PUSH
81305: LD_VAR 0 1
81309: PUSH
81310: LD_VAR 0 3
81314: MINUS
81315: ST_TO_ADDR
// if y - r < 0 then
81316: LD_VAR 0 2
81320: PUSH
81321: LD_VAR 0 3
81325: MINUS
81326: PUSH
81327: LD_INT 0
81329: LESS
81330: IFFALSE 81342
// min_y := 0 else
81332: LD_ADDR_VAR 0 7
81336: PUSH
81337: LD_INT 0
81339: ST_TO_ADDR
81340: GO 81358
// min_y := y - r ;
81342: LD_ADDR_VAR 0 7
81346: PUSH
81347: LD_VAR 0 2
81351: PUSH
81352: LD_VAR 0 3
81356: MINUS
81357: ST_TO_ADDR
// max_x := x + r ;
81358: LD_ADDR_VAR 0 9
81362: PUSH
81363: LD_VAR 0 1
81367: PUSH
81368: LD_VAR 0 3
81372: PLUS
81373: ST_TO_ADDR
// max_y := y + r ;
81374: LD_ADDR_VAR 0 10
81378: PUSH
81379: LD_VAR 0 2
81383: PUSH
81384: LD_VAR 0 3
81388: PLUS
81389: ST_TO_ADDR
// for _x = min_x to max_x do
81390: LD_ADDR_VAR 0 5
81394: PUSH
81395: DOUBLE
81396: LD_VAR 0 8
81400: DEC
81401: ST_TO_ADDR
81402: LD_VAR 0 9
81406: PUSH
81407: FOR_TO
81408: IFFALSE 81509
// for _y = min_y to max_y do
81410: LD_ADDR_VAR 0 6
81414: PUSH
81415: DOUBLE
81416: LD_VAR 0 7
81420: DEC
81421: ST_TO_ADDR
81422: LD_VAR 0 10
81426: PUSH
81427: FOR_TO
81428: IFFALSE 81505
// begin if not ValidHex ( _x , _y ) then
81430: LD_VAR 0 5
81434: PPUSH
81435: LD_VAR 0 6
81439: PPUSH
81440: CALL_OW 488
81444: NOT
81445: IFFALSE 81449
// continue ;
81447: GO 81427
// if GetResourceTypeXY ( _x , _y ) then
81449: LD_VAR 0 5
81453: PPUSH
81454: LD_VAR 0 6
81458: PPUSH
81459: CALL_OW 283
81463: IFFALSE 81503
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81465: LD_ADDR_VAR 0 4
81469: PUSH
81470: LD_VAR 0 4
81474: PPUSH
81475: LD_VAR 0 4
81479: PUSH
81480: LD_INT 1
81482: PLUS
81483: PPUSH
81484: LD_VAR 0 5
81488: PUSH
81489: LD_VAR 0 6
81493: PUSH
81494: EMPTY
81495: LIST
81496: LIST
81497: PPUSH
81498: CALL_OW 1
81502: ST_TO_ADDR
// end ;
81503: GO 81427
81505: POP
81506: POP
81507: GO 81407
81509: POP
81510: POP
// end ;
81511: LD_VAR 0 4
81515: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81516: LD_INT 0
81518: PPUSH
81519: PPUSH
81520: PPUSH
81521: PPUSH
81522: PPUSH
81523: PPUSH
81524: PPUSH
81525: PPUSH
// if not units then
81526: LD_VAR 0 1
81530: NOT
81531: IFFALSE 81535
// exit ;
81533: GO 82059
// result := UnitFilter ( units , [ f_ok ] ) ;
81535: LD_ADDR_VAR 0 3
81539: PUSH
81540: LD_VAR 0 1
81544: PPUSH
81545: LD_INT 50
81547: PUSH
81548: EMPTY
81549: LIST
81550: PPUSH
81551: CALL_OW 72
81555: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81556: LD_ADDR_VAR 0 8
81560: PUSH
81561: LD_VAR 0 1
81565: PUSH
81566: LD_INT 1
81568: ARRAY
81569: PPUSH
81570: CALL_OW 255
81574: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81575: LD_ADDR_VAR 0 10
81579: PUSH
81580: LD_INT 29
81582: PUSH
81583: LD_INT 91
81585: PUSH
81586: LD_INT 49
81588: PUSH
81589: EMPTY
81590: LIST
81591: LIST
81592: LIST
81593: ST_TO_ADDR
// if not result then
81594: LD_VAR 0 3
81598: NOT
81599: IFFALSE 81603
// exit ;
81601: GO 82059
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81603: LD_ADDR_VAR 0 5
81607: PUSH
81608: LD_INT 81
81610: PUSH
81611: LD_VAR 0 8
81615: PUSH
81616: EMPTY
81617: LIST
81618: LIST
81619: PPUSH
81620: CALL_OW 69
81624: ST_TO_ADDR
// for i in result do
81625: LD_ADDR_VAR 0 4
81629: PUSH
81630: LD_VAR 0 3
81634: PUSH
81635: FOR_IN
81636: IFFALSE 82057
// begin tag := GetTag ( i ) + 1 ;
81638: LD_ADDR_VAR 0 9
81642: PUSH
81643: LD_VAR 0 4
81647: PPUSH
81648: CALL_OW 110
81652: PUSH
81653: LD_INT 1
81655: PLUS
81656: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81657: LD_ADDR_VAR 0 7
81661: PUSH
81662: LD_VAR 0 4
81666: PPUSH
81667: CALL_OW 250
81671: PPUSH
81672: LD_VAR 0 4
81676: PPUSH
81677: CALL_OW 251
81681: PPUSH
81682: LD_INT 6
81684: PPUSH
81685: CALL 81258 0 3
81689: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81690: LD_VAR 0 4
81694: PPUSH
81695: CALL_OW 247
81699: PUSH
81700: LD_INT 2
81702: EQUAL
81703: PUSH
81704: LD_VAR 0 7
81708: AND
81709: PUSH
81710: LD_VAR 0 4
81714: PPUSH
81715: CALL_OW 264
81719: PUSH
81720: LD_VAR 0 10
81724: IN
81725: NOT
81726: AND
81727: IFFALSE 81766
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81729: LD_VAR 0 4
81733: PPUSH
81734: LD_VAR 0 7
81738: PUSH
81739: LD_INT 1
81741: ARRAY
81742: PUSH
81743: LD_INT 1
81745: ARRAY
81746: PPUSH
81747: LD_VAR 0 7
81751: PUSH
81752: LD_INT 1
81754: ARRAY
81755: PUSH
81756: LD_INT 2
81758: ARRAY
81759: PPUSH
81760: CALL_OW 116
81764: GO 82055
// if path > tag then
81766: LD_VAR 0 2
81770: PUSH
81771: LD_VAR 0 9
81775: GREATER
81776: IFFALSE 81984
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81778: LD_ADDR_VAR 0 6
81782: PUSH
81783: LD_VAR 0 5
81787: PPUSH
81788: LD_INT 91
81790: PUSH
81791: LD_VAR 0 4
81795: PUSH
81796: LD_INT 8
81798: PUSH
81799: EMPTY
81800: LIST
81801: LIST
81802: LIST
81803: PPUSH
81804: CALL_OW 72
81808: ST_TO_ADDR
// if nearEnemy then
81809: LD_VAR 0 6
81813: IFFALSE 81882
// begin if GetWeapon ( i ) = ru_time_lapser then
81815: LD_VAR 0 4
81819: PPUSH
81820: CALL_OW 264
81824: PUSH
81825: LD_INT 49
81827: EQUAL
81828: IFFALSE 81856
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81830: LD_VAR 0 4
81834: PPUSH
81835: LD_VAR 0 6
81839: PPUSH
81840: LD_VAR 0 4
81844: PPUSH
81845: CALL_OW 74
81849: PPUSH
81850: CALL_OW 112
81854: GO 81880
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81856: LD_VAR 0 4
81860: PPUSH
81861: LD_VAR 0 6
81865: PPUSH
81866: LD_VAR 0 4
81870: PPUSH
81871: CALL_OW 74
81875: PPUSH
81876: CALL_OW 115
// end else
81880: GO 81982
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81882: LD_VAR 0 4
81886: PPUSH
81887: LD_VAR 0 2
81891: PUSH
81892: LD_VAR 0 9
81896: ARRAY
81897: PUSH
81898: LD_INT 1
81900: ARRAY
81901: PPUSH
81902: LD_VAR 0 2
81906: PUSH
81907: LD_VAR 0 9
81911: ARRAY
81912: PUSH
81913: LD_INT 2
81915: ARRAY
81916: PPUSH
81917: CALL_OW 297
81921: PUSH
81922: LD_INT 6
81924: GREATER
81925: IFFALSE 81968
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81927: LD_VAR 0 4
81931: PPUSH
81932: LD_VAR 0 2
81936: PUSH
81937: LD_VAR 0 9
81941: ARRAY
81942: PUSH
81943: LD_INT 1
81945: ARRAY
81946: PPUSH
81947: LD_VAR 0 2
81951: PUSH
81952: LD_VAR 0 9
81956: ARRAY
81957: PUSH
81958: LD_INT 2
81960: ARRAY
81961: PPUSH
81962: CALL_OW 114
81966: GO 81982
// SetTag ( i , tag ) ;
81968: LD_VAR 0 4
81972: PPUSH
81973: LD_VAR 0 9
81977: PPUSH
81978: CALL_OW 109
// end else
81982: GO 82055
// if enemy then
81984: LD_VAR 0 5
81988: IFFALSE 82055
// begin if GetWeapon ( i ) = ru_time_lapser then
81990: LD_VAR 0 4
81994: PPUSH
81995: CALL_OW 264
81999: PUSH
82000: LD_INT 49
82002: EQUAL
82003: IFFALSE 82031
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82005: LD_VAR 0 4
82009: PPUSH
82010: LD_VAR 0 5
82014: PPUSH
82015: LD_VAR 0 4
82019: PPUSH
82020: CALL_OW 74
82024: PPUSH
82025: CALL_OW 112
82029: GO 82055
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82031: LD_VAR 0 4
82035: PPUSH
82036: LD_VAR 0 5
82040: PPUSH
82041: LD_VAR 0 4
82045: PPUSH
82046: CALL_OW 74
82050: PPUSH
82051: CALL_OW 115
// end ; end ;
82055: GO 81635
82057: POP
82058: POP
// end ;
82059: LD_VAR 0 3
82063: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82064: LD_INT 0
82066: PPUSH
82067: PPUSH
82068: PPUSH
// if not unit or IsInUnit ( unit ) then
82069: LD_VAR 0 1
82073: NOT
82074: PUSH
82075: LD_VAR 0 1
82079: PPUSH
82080: CALL_OW 310
82084: OR
82085: IFFALSE 82089
// exit ;
82087: GO 82180
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82089: LD_ADDR_VAR 0 4
82093: PUSH
82094: LD_VAR 0 1
82098: PPUSH
82099: CALL_OW 250
82103: PPUSH
82104: LD_VAR 0 2
82108: PPUSH
82109: LD_INT 1
82111: PPUSH
82112: CALL_OW 272
82116: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82117: LD_ADDR_VAR 0 5
82121: PUSH
82122: LD_VAR 0 1
82126: PPUSH
82127: CALL_OW 251
82131: PPUSH
82132: LD_VAR 0 2
82136: PPUSH
82137: LD_INT 1
82139: PPUSH
82140: CALL_OW 273
82144: ST_TO_ADDR
// if ValidHex ( x , y ) then
82145: LD_VAR 0 4
82149: PPUSH
82150: LD_VAR 0 5
82154: PPUSH
82155: CALL_OW 488
82159: IFFALSE 82180
// ComTurnXY ( unit , x , y ) ;
82161: LD_VAR 0 1
82165: PPUSH
82166: LD_VAR 0 4
82170: PPUSH
82171: LD_VAR 0 5
82175: PPUSH
82176: CALL_OW 118
// end ;
82180: LD_VAR 0 3
82184: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82185: LD_INT 0
82187: PPUSH
82188: PPUSH
// result := false ;
82189: LD_ADDR_VAR 0 3
82193: PUSH
82194: LD_INT 0
82196: ST_TO_ADDR
// if not units then
82197: LD_VAR 0 2
82201: NOT
82202: IFFALSE 82206
// exit ;
82204: GO 82251
// for i in units do
82206: LD_ADDR_VAR 0 4
82210: PUSH
82211: LD_VAR 0 2
82215: PUSH
82216: FOR_IN
82217: IFFALSE 82249
// if See ( side , i ) then
82219: LD_VAR 0 1
82223: PPUSH
82224: LD_VAR 0 4
82228: PPUSH
82229: CALL_OW 292
82233: IFFALSE 82247
// begin result := true ;
82235: LD_ADDR_VAR 0 3
82239: PUSH
82240: LD_INT 1
82242: ST_TO_ADDR
// exit ;
82243: POP
82244: POP
82245: GO 82251
// end ;
82247: GO 82216
82249: POP
82250: POP
// end ;
82251: LD_VAR 0 3
82255: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82256: LD_INT 0
82258: PPUSH
82259: PPUSH
82260: PPUSH
82261: PPUSH
// if not unit or not points then
82262: LD_VAR 0 1
82266: NOT
82267: PUSH
82268: LD_VAR 0 2
82272: NOT
82273: OR
82274: IFFALSE 82278
// exit ;
82276: GO 82368
// dist := 99999 ;
82278: LD_ADDR_VAR 0 5
82282: PUSH
82283: LD_INT 99999
82285: ST_TO_ADDR
// for i in points do
82286: LD_ADDR_VAR 0 4
82290: PUSH
82291: LD_VAR 0 2
82295: PUSH
82296: FOR_IN
82297: IFFALSE 82366
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82299: LD_ADDR_VAR 0 6
82303: PUSH
82304: LD_VAR 0 1
82308: PPUSH
82309: LD_VAR 0 4
82313: PUSH
82314: LD_INT 1
82316: ARRAY
82317: PPUSH
82318: LD_VAR 0 4
82322: PUSH
82323: LD_INT 2
82325: ARRAY
82326: PPUSH
82327: CALL_OW 297
82331: ST_TO_ADDR
// if tmpDist < dist then
82332: LD_VAR 0 6
82336: PUSH
82337: LD_VAR 0 5
82341: LESS
82342: IFFALSE 82364
// begin result := i ;
82344: LD_ADDR_VAR 0 3
82348: PUSH
82349: LD_VAR 0 4
82353: ST_TO_ADDR
// dist := tmpDist ;
82354: LD_ADDR_VAR 0 5
82358: PUSH
82359: LD_VAR 0 6
82363: ST_TO_ADDR
// end ; end ;
82364: GO 82296
82366: POP
82367: POP
// end ;
82368: LD_VAR 0 3
82372: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82373: LD_INT 0
82375: PPUSH
// uc_side := side ;
82376: LD_ADDR_OWVAR 20
82380: PUSH
82381: LD_VAR 0 1
82385: ST_TO_ADDR
// uc_nation := 3 ;
82386: LD_ADDR_OWVAR 21
82390: PUSH
82391: LD_INT 3
82393: ST_TO_ADDR
// vc_chassis := 25 ;
82394: LD_ADDR_OWVAR 37
82398: PUSH
82399: LD_INT 25
82401: ST_TO_ADDR
// vc_engine := engine_siberite ;
82402: LD_ADDR_OWVAR 39
82406: PUSH
82407: LD_INT 3
82409: ST_TO_ADDR
// vc_control := control_computer ;
82410: LD_ADDR_OWVAR 38
82414: PUSH
82415: LD_INT 3
82417: ST_TO_ADDR
// vc_weapon := 59 ;
82418: LD_ADDR_OWVAR 40
82422: PUSH
82423: LD_INT 59
82425: ST_TO_ADDR
// result := CreateVehicle ;
82426: LD_ADDR_VAR 0 5
82430: PUSH
82431: CALL_OW 45
82435: ST_TO_ADDR
// SetDir ( result , d ) ;
82436: LD_VAR 0 5
82440: PPUSH
82441: LD_VAR 0 4
82445: PPUSH
82446: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82450: LD_VAR 0 5
82454: PPUSH
82455: LD_VAR 0 2
82459: PPUSH
82460: LD_VAR 0 3
82464: PPUSH
82465: LD_INT 0
82467: PPUSH
82468: CALL_OW 48
// end ;
82472: LD_VAR 0 5
82476: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82477: LD_INT 0
82479: PPUSH
82480: PPUSH
82481: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82482: LD_ADDR_VAR 0 2
82486: PUSH
82487: LD_INT 0
82489: PUSH
82490: LD_INT 0
82492: PUSH
82493: LD_INT 0
82495: PUSH
82496: LD_INT 0
82498: PUSH
82499: EMPTY
82500: LIST
82501: LIST
82502: LIST
82503: LIST
82504: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82505: LD_VAR 0 1
82509: NOT
82510: PUSH
82511: LD_VAR 0 1
82515: PPUSH
82516: CALL_OW 264
82520: PUSH
82521: LD_INT 12
82523: PUSH
82524: LD_INT 51
82526: PUSH
82527: LD_INT 32
82529: PUSH
82530: LD_INT 89
82532: PUSH
82533: EMPTY
82534: LIST
82535: LIST
82536: LIST
82537: LIST
82538: IN
82539: NOT
82540: OR
82541: IFFALSE 82545
// exit ;
82543: GO 82643
// for i := 1 to 3 do
82545: LD_ADDR_VAR 0 3
82549: PUSH
82550: DOUBLE
82551: LD_INT 1
82553: DEC
82554: ST_TO_ADDR
82555: LD_INT 3
82557: PUSH
82558: FOR_TO
82559: IFFALSE 82641
// begin tmp := GetCargo ( cargo , i ) ;
82561: LD_ADDR_VAR 0 4
82565: PUSH
82566: LD_VAR 0 1
82570: PPUSH
82571: LD_VAR 0 3
82575: PPUSH
82576: CALL_OW 289
82580: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82581: LD_ADDR_VAR 0 2
82585: PUSH
82586: LD_VAR 0 2
82590: PPUSH
82591: LD_VAR 0 3
82595: PPUSH
82596: LD_VAR 0 4
82600: PPUSH
82601: CALL_OW 1
82605: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82606: LD_ADDR_VAR 0 2
82610: PUSH
82611: LD_VAR 0 2
82615: PPUSH
82616: LD_INT 4
82618: PPUSH
82619: LD_VAR 0 2
82623: PUSH
82624: LD_INT 4
82626: ARRAY
82627: PUSH
82628: LD_VAR 0 4
82632: PLUS
82633: PPUSH
82634: CALL_OW 1
82638: ST_TO_ADDR
// end ;
82639: GO 82558
82641: POP
82642: POP
// end ;
82643: LD_VAR 0 2
82647: RET
// export function Length ( array ) ; begin
82648: LD_INT 0
82650: PPUSH
// result := array + 0 ;
82651: LD_ADDR_VAR 0 2
82655: PUSH
82656: LD_VAR 0 1
82660: PUSH
82661: LD_INT 0
82663: PLUS
82664: ST_TO_ADDR
// end ;
82665: LD_VAR 0 2
82669: RET
// export function PrepareArray ( array ) ; begin
82670: LD_INT 0
82672: PPUSH
// result := array diff 0 ;
82673: LD_ADDR_VAR 0 2
82677: PUSH
82678: LD_VAR 0 1
82682: PUSH
82683: LD_INT 0
82685: DIFF
82686: ST_TO_ADDR
// if not result [ 1 ] then
82687: LD_VAR 0 2
82691: PUSH
82692: LD_INT 1
82694: ARRAY
82695: NOT
82696: IFFALSE 82716
// result := Delete ( result , 1 ) ;
82698: LD_ADDR_VAR 0 2
82702: PUSH
82703: LD_VAR 0 2
82707: PPUSH
82708: LD_INT 1
82710: PPUSH
82711: CALL_OW 3
82715: ST_TO_ADDR
// end ;
82716: LD_VAR 0 2
82720: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82721: LD_INT 0
82723: PPUSH
82724: PPUSH
82725: PPUSH
82726: PPUSH
// sibRocketRange := 25 ;
82727: LD_ADDR_VAR 0 6
82731: PUSH
82732: LD_INT 25
82734: ST_TO_ADDR
// result := false ;
82735: LD_ADDR_VAR 0 4
82739: PUSH
82740: LD_INT 0
82742: ST_TO_ADDR
// for i := 0 to 5 do
82743: LD_ADDR_VAR 0 5
82747: PUSH
82748: DOUBLE
82749: LD_INT 0
82751: DEC
82752: ST_TO_ADDR
82753: LD_INT 5
82755: PUSH
82756: FOR_TO
82757: IFFALSE 82824
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82759: LD_VAR 0 1
82763: PPUSH
82764: LD_VAR 0 5
82768: PPUSH
82769: LD_VAR 0 6
82773: PPUSH
82774: CALL_OW 272
82778: PPUSH
82779: LD_VAR 0 2
82783: PPUSH
82784: LD_VAR 0 5
82788: PPUSH
82789: LD_VAR 0 6
82793: PPUSH
82794: CALL_OW 273
82798: PPUSH
82799: LD_VAR 0 3
82803: PPUSH
82804: CALL_OW 309
82808: IFFALSE 82822
// begin result := true ;
82810: LD_ADDR_VAR 0 4
82814: PUSH
82815: LD_INT 1
82817: ST_TO_ADDR
// exit ;
82818: POP
82819: POP
82820: GO 82826
// end ;
82822: GO 82756
82824: POP
82825: POP
// end ;
82826: LD_VAR 0 4
82830: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82831: LD_INT 0
82833: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82834: LD_VAR 0 1
82838: PPUSH
82839: LD_VAR 0 2
82843: PPUSH
82844: LD_INT 0
82846: PPUSH
82847: LD_INT 0
82849: PPUSH
82850: LD_INT 1
82852: PPUSH
82853: LD_INT 0
82855: PPUSH
82856: CALL_OW 587
// end ;
82860: LD_VAR 0 3
82864: RET
// export function CenterOnNow ( unit ) ; begin
82865: LD_INT 0
82867: PPUSH
// result := IsInUnit ( unit ) ;
82868: LD_ADDR_VAR 0 2
82872: PUSH
82873: LD_VAR 0 1
82877: PPUSH
82878: CALL_OW 310
82882: ST_TO_ADDR
// if not result then
82883: LD_VAR 0 2
82887: NOT
82888: IFFALSE 82900
// result := unit ;
82890: LD_ADDR_VAR 0 2
82894: PUSH
82895: LD_VAR 0 1
82899: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82900: LD_VAR 0 1
82904: PPUSH
82905: CALL_OW 87
// end ;
82909: LD_VAR 0 2
82913: RET
// export function ComMoveHex ( unit , hex ) ; begin
82914: LD_INT 0
82916: PPUSH
// if not hex then
82917: LD_VAR 0 2
82921: NOT
82922: IFFALSE 82926
// exit ;
82924: GO 82979
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82926: LD_VAR 0 2
82930: PUSH
82931: LD_INT 1
82933: ARRAY
82934: PPUSH
82935: LD_VAR 0 2
82939: PUSH
82940: LD_INT 2
82942: ARRAY
82943: PPUSH
82944: CALL_OW 428
82948: IFFALSE 82952
// exit ;
82950: GO 82979
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82952: LD_VAR 0 1
82956: PPUSH
82957: LD_VAR 0 2
82961: PUSH
82962: LD_INT 1
82964: ARRAY
82965: PPUSH
82966: LD_VAR 0 2
82970: PUSH
82971: LD_INT 2
82973: ARRAY
82974: PPUSH
82975: CALL_OW 111
// end ; end_of_file
82979: LD_VAR 0 3
82983: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82984: LD_VAR 0 1
82988: PUSH
82989: LD_INT 200
82991: DOUBLE
82992: GREATEREQUAL
82993: IFFALSE 83001
82995: LD_INT 299
82997: DOUBLE
82998: LESSEQUAL
82999: IFTRUE 83003
83001: GO 83035
83003: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83004: LD_VAR 0 1
83008: PPUSH
83009: LD_VAR 0 2
83013: PPUSH
83014: LD_VAR 0 3
83018: PPUSH
83019: LD_VAR 0 4
83023: PPUSH
83024: LD_VAR 0 5
83028: PPUSH
83029: CALL 37707 0 5
83033: GO 83112
83035: LD_INT 300
83037: DOUBLE
83038: GREATEREQUAL
83039: IFFALSE 83047
83041: LD_INT 399
83043: DOUBLE
83044: LESSEQUAL
83045: IFTRUE 83049
83047: GO 83111
83049: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83050: LD_VAR 0 1
83054: PPUSH
83055: LD_VAR 0 2
83059: PPUSH
83060: LD_VAR 0 3
83064: PPUSH
83065: LD_VAR 0 4
83069: PPUSH
83070: LD_VAR 0 5
83074: PPUSH
83075: LD_VAR 0 6
83079: PPUSH
83080: LD_VAR 0 7
83084: PPUSH
83085: LD_VAR 0 8
83089: PPUSH
83090: LD_VAR 0 9
83094: PPUSH
83095: LD_VAR 0 10
83099: PPUSH
83100: LD_VAR 0 11
83104: PPUSH
83105: CALL 34040 0 11
83109: GO 83112
83111: POP
// end ;
83112: PPOPN 11
83114: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83115: LD_VAR 0 1
83119: PPUSH
83120: LD_VAR 0 2
83124: PPUSH
83125: LD_VAR 0 3
83129: PPUSH
83130: LD_VAR 0 4
83134: PPUSH
83135: LD_VAR 0 5
83139: PPUSH
83140: CALL 37443 0 5
// end ; end_of_file
83144: PPOPN 5
83146: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83147: LD_VAR 0 1
83151: PPUSH
83152: LD_VAR 0 2
83156: PPUSH
83157: LD_VAR 0 3
83161: PPUSH
83162: LD_VAR 0 4
83166: PPUSH
83167: LD_VAR 0 5
83171: PPUSH
83172: LD_VAR 0 6
83176: PPUSH
83177: CALL 21692 0 6
// end ;
83181: PPOPN 6
83183: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83184: LD_INT 0
83186: PPUSH
// begin if not units then
83187: LD_VAR 0 1
83191: NOT
83192: IFFALSE 83196
// exit ;
83194: GO 83196
// end ;
83196: PPOPN 7
83198: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83199: CALL 21596 0 0
// end ;
83203: PPOPN 1
83205: END
