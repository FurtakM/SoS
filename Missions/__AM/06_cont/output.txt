// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 ] [ Difficulty ] ;
 177: LD_ADDR_EXP 48
 181: PUSH
 182: LD_INT 3
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: LD_INT 6
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: LIST
 195: PUSH
 196: LD_OWVAR 67
 200: ARRAY
 201: ST_TO_ADDR
// sendedConvoys = 0 ;
 202: LD_ADDR_EXP 39
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// tamedApemans = 0 ;
 210: LD_ADDR_EXP 32
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ignoreTarget := [ ] ;
 218: LD_ADDR_EXP 45
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// arrivals := [ ] ;
 225: LD_ADDR_EXP 46
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// unitLost = 0 ;
 232: LD_ADDR_EXP 30
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 240: LD_ADDR_EXP 31
 244: PUSH
 245: EMPTY
 246: ST_TO_ADDR
// russianTanks = [ ] ;
 247: LD_ADDR_EXP 36
 251: PUSH
 252: EMPTY
 253: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 254: LD_ADDR_EXP 37
 258: PUSH
 259: EMPTY
 260: ST_TO_ADDR
// disableHealAI = 0 ;
 261: LD_ADDR_EXP 33
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// strings = [ ] ;
 269: LD_ADDR_EXP 27
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 276: LD_INT 4
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: CALL_OW 343
// PrepareDifficulty ;
 286: CALL 6406 0 0
// PrepareNature ;
 290: CALL 23613 0 0
// PrepareRussian ;
 294: CALL 5566 0 0
// PrepareVehicles ;
 298: CALL 1586 0 0
// PrepareHeroes ;
 302: CALL 594 0 0
// PrepareOthers ;
 306: CALL 2007 0 0
// PreparePlayerApemans ;
 310: CALL 2149 0 0
// end ;
 314: END
// every 0 0$1 trigger debugMode do var i ;
 315: LD_EXP 42
 319: IFFALSE 546
 321: GO 323
 323: DISABLE
 324: LD_INT 0
 326: PPUSH
// begin enable ;
 327: ENABLE
// fogoff ( true ) ;
 328: LD_INT 1
 330: PPUSH
 331: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 21
 352: PUSH
 353: LD_INT 1
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 386
// SetLives ( i , 1000 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: LD_INT 1000
 379: PPUSH
 380: CALL_OW 234
 384: GO 369
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 30
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: PUSH
 422: FOR_IN
 423: IFFALSE 447
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 425: LD_VAR 0 1
 429: PPUSH
 430: CALL_OW 274
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_INT 9999
 440: PPUSH
 441: CALL_OW 277
 445: GO 422
 447: POP
 448: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 449: LD_ADDR_VAR 0 1
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// if IsSelected ( rudepo ) then
 510: LD_INT 2
 512: PPUSH
 513: CALL_OW 306
 517: IFFALSE 527
// your_side = 3 ;
 519: LD_ADDR_OWVAR 2
 523: PUSH
 524: LD_INT 3
 526: ST_TO_ADDR
// if IsSelected ( JMM ) then
 527: LD_EXP 1
 531: PPUSH
 532: CALL_OW 306
 536: IFFALSE 546
// your_side = 1 ;
 538: LD_ADDR_OWVAR 2
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// end ;
 546: PPOPN 1
 548: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 34
 561: PUSH
 562: LD_INT 12
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: LD_INT 3
 580: GREATEREQUAL
 581: IFFALSE 593
 583: GO 585
 585: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 586: LD_STRING ACH_FULLCARGO
 588: PPUSH
 589: CALL_OW 543
 593: END
// export function PrepareHeroes ; var veh ; begin
 594: LD_INT 0
 596: PPUSH
 597: PPUSH
// uc_side = 1 ;
 598: LD_ADDR_OWVAR 20
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// uc_nation = 1 ;
 606: LD_ADDR_OWVAR 21
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 614: LD_ADDR_EXP 1
 618: PUSH
 619: LD_STRING JMM
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: CALL 5968 0 2
 629: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 630: LD_ADDR_EXP 14
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL 5968 0 2
 645: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 646: LD_ADDR_EXP 10
 650: PUSH
 651: LD_STRING DeltaDoctor
 653: PPUSH
 654: CALL_OW 34
 658: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 659: LD_ADDR_VAR 0 2
 663: PUSH
 664: LD_INT 22
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 21
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 58
 686: PUSH
 687: EMPTY
 688: LIST
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: PPUSH
 695: CALL_OW 69
 699: ST_TO_ADDR
// if veh > 0 then
 700: LD_VAR 0 2
 704: PUSH
 705: LD_INT 0
 707: GREATER
 708: IFFALSE 730
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 710: LD_EXP 1
 714: PPUSH
 715: LD_VAR 0 2
 719: PUSH
 720: LD_INT 1
 722: ARRAY
 723: PPUSH
 724: CALL_OW 52
// end else
 728: GO 745
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 730: LD_EXP 1
 734: PPUSH
 735: LD_INT 2
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 745: LD_STRING LisaIn06
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 30
 755: PUSH
 756: LD_INT 1
 758: EQUAL
 759: IFFALSE 863
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 761: LD_ADDR_VAR 0 2
 765: PUSH
 766: LD_INT 22
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 21
 778: PUSH
 779: LD_INT 2
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: PUSH
 786: LD_INT 58
 788: PUSH
 789: EMPTY
 790: LIST
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: PPUSH
 797: CALL_OW 69
 801: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 802: LD_ADDR_EXP 2
 806: PUSH
 807: LD_STRING Lisa
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL 5968 0 2
 817: ST_TO_ADDR
// if veh > 0 then
 818: LD_VAR 0 2
 822: PUSH
 823: LD_INT 0
 825: GREATER
 826: IFFALSE 848
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_VAR 0 2
 837: PUSH
 838: LD_INT 1
 840: ARRAY
 841: PPUSH
 842: CALL_OW 52
// end else
 846: GO 863
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 848: LD_EXP 2
 852: PPUSH
 853: LD_INT 2
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 863: LD_STRING BobbyIn06
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 30
 873: PUSH
 874: LD_INT 1
 876: EQUAL
 877: IFFALSE 981
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 879: LD_ADDR_VAR 0 2
 883: PUSH
 884: LD_INT 22
 886: PUSH
 887: LD_INT 1
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 21
 896: PUSH
 897: LD_INT 2
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 58
 906: PUSH
 907: EMPTY
 908: LIST
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 920: LD_ADDR_EXP 3
 924: PUSH
 925: LD_STRING Bobby
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: CALL 5968 0 2
 935: ST_TO_ADDR
// if veh > 0 then
 936: LD_VAR 0 2
 940: PUSH
 941: LD_INT 0
 943: GREATER
 944: IFFALSE 966
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 946: LD_EXP 3
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 1
 958: ARRAY
 959: PPUSH
 960: CALL_OW 52
// end else
 964: GO 981
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 966: LD_EXP 3
 970: PPUSH
 971: LD_INT 2
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 981: LD_STRING CyrusIn06
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 30
 991: PUSH
 992: LD_INT 1
 994: EQUAL
 995: IFFALSE 1099
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 997: LD_ADDR_VAR 0 2
1001: PUSH
1002: LD_INT 22
1004: PUSH
1005: LD_INT 1
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 21
1014: PUSH
1015: LD_INT 2
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: LD_INT 58
1024: PUSH
1025: EMPTY
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 69
1037: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
1038: LD_ADDR_EXP 4
1042: PUSH
1043: LD_STRING Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 5968 0 2
1053: ST_TO_ADDR
// if veh > 0 then
1054: LD_VAR 0 2
1058: PUSH
1059: LD_INT 0
1061: GREATER
1062: IFFALSE 1084
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1064: LD_EXP 4
1068: PPUSH
1069: LD_VAR 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: CALL_OW 52
// end else
1082: GO 1099
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1084: LD_EXP 4
1088: PPUSH
1089: LD_INT 2
1091: PPUSH
1092: LD_INT 0
1094: PPUSH
1095: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1099: LD_STRING FrankIn06
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL_OW 30
1109: PUSH
1110: LD_INT 1
1112: EQUAL
1113: IFFALSE 1217
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1115: LD_ADDR_VAR 0 2
1119: PUSH
1120: LD_INT 22
1122: PUSH
1123: LD_INT 1
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 21
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 58
1142: PUSH
1143: EMPTY
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PPUSH
1151: CALL_OW 69
1155: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1156: LD_ADDR_EXP 5
1160: PUSH
1161: LD_STRING Frank
1163: PPUSH
1164: LD_INT 1
1166: PPUSH
1167: CALL 5968 0 2
1171: ST_TO_ADDR
// if veh > 0 then
1172: LD_VAR 0 2
1176: PUSH
1177: LD_INT 0
1179: GREATER
1180: IFFALSE 1202
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1182: LD_EXP 5
1186: PPUSH
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: CALL_OW 52
// end else
1200: GO 1217
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1202: LD_EXP 5
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1217: LD_STRING BrownIn06
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 30
1227: PUSH
1228: LD_INT 1
1230: EQUAL
1231: IFFALSE 1335
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 2
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 58
1260: PUSH
1261: EMPTY
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PPUSH
1269: CALL_OW 69
1273: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1274: LD_ADDR_EXP 6
1278: PUSH
1279: LD_STRING Brown
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: CALL 5968 0 2
1289: ST_TO_ADDR
// if veh > 0 then
1290: LD_VAR 0 2
1294: PUSH
1295: LD_INT 0
1297: GREATER
1298: IFFALSE 1320
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1300: LD_EXP 6
1304: PPUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 52
// end else
1318: GO 1335
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1320: LD_EXP 6
1324: PPUSH
1325: LD_INT 2
1327: PPUSH
1328: LD_INT 0
1330: PPUSH
1331: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1335: LD_STRING DonaldsonIn06
1337: PPUSH
1338: LD_INT 0
1340: PPUSH
1341: CALL_OW 30
1345: PUSH
1346: LD_INT 1
1348: EQUAL
1349: IFFALSE 1453
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1351: LD_ADDR_VAR 0 2
1355: PUSH
1356: LD_INT 22
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 21
1368: PUSH
1369: LD_INT 2
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 58
1378: PUSH
1379: EMPTY
1380: LIST
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: PPUSH
1387: CALL_OW 69
1391: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1392: LD_ADDR_EXP 7
1396: PUSH
1397: LD_STRING Donaldson
1399: PPUSH
1400: LD_INT 1
1402: PPUSH
1403: CALL 5968 0 2
1407: ST_TO_ADDR
// if veh > 0 then
1408: LD_VAR 0 2
1412: PUSH
1413: LD_INT 0
1415: GREATER
1416: IFFALSE 1438
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1418: LD_EXP 7
1422: PPUSH
1423: LD_VAR 0 2
1427: PUSH
1428: LD_INT 1
1430: ARRAY
1431: PPUSH
1432: CALL_OW 52
// end else
1436: GO 1453
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1438: LD_EXP 7
1442: PPUSH
1443: LD_INT 2
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1453: LD_STRING GladstoneIn06
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 30
1463: PUSH
1464: LD_INT 1
1466: EQUAL
1467: IFFALSE 1571
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1469: LD_ADDR_VAR 0 2
1473: PUSH
1474: LD_INT 22
1476: PUSH
1477: LD_INT 1
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 21
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 58
1496: PUSH
1497: EMPTY
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: PPUSH
1505: CALL_OW 69
1509: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1510: LD_ADDR_EXP 8
1514: PUSH
1515: LD_STRING Gladstone
1517: PPUSH
1518: LD_INT 1
1520: PPUSH
1521: CALL 5968 0 2
1525: ST_TO_ADDR
// if veh > 0 then
1526: LD_VAR 0 2
1530: PUSH
1531: LD_INT 0
1533: GREATER
1534: IFFALSE 1556
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1536: LD_EXP 8
1540: PPUSH
1541: LD_VAR 0 2
1545: PUSH
1546: LD_INT 1
1548: ARRAY
1549: PPUSH
1550: CALL_OW 52
// end else
1554: GO 1571
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1556: LD_EXP 8
1560: PPUSH
1561: LD_INT 2
1563: PPUSH
1564: LD_INT 0
1566: PPUSH
1567: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1571: LD_INT 66
1573: PPUSH
1574: LD_INT 4
1576: PPUSH
1577: CALL_OW 86
// end ;
1581: LD_VAR 0 1
1585: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1586: LD_INT 0
1588: PPUSH
1589: PPUSH
1590: PPUSH
1591: PPUSH
1592: PPUSH
1593: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1594: LD_ADDR_VAR 0 5
1598: PUSH
1599: LD_STRING 06_VehiclesIn06_1
1601: PPUSH
1602: EMPTY
1603: PPUSH
1604: CALL_OW 30
1608: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1609: LD_ADDR_EXP 40
1613: PUSH
1614: LD_STRING 06_ResourcesInCargo06_1
1616: PPUSH
1617: EMPTY
1618: PPUSH
1619: CALL_OW 30
1623: ST_TO_ADDR
// cargoList = [ ] ;
1624: LD_ADDR_VAR 0 6
1628: PUSH
1629: EMPTY
1630: ST_TO_ADDR
// uc_side = 1 ;
1631: LD_ADDR_OWVAR 20
1635: PUSH
1636: LD_INT 1
1638: ST_TO_ADDR
// if vehicles > 0 then
1639: LD_VAR 0 5
1643: PUSH
1644: LD_INT 0
1646: GREATER
1647: IFFALSE 2002
// begin for i := 1 to vehicles do
1649: LD_ADDR_VAR 0 2
1653: PUSH
1654: DOUBLE
1655: LD_INT 1
1657: DEC
1658: ST_TO_ADDR
1659: LD_VAR 0 5
1663: PUSH
1664: FOR_TO
1665: IFFALSE 1814
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1667: LD_ADDR_OWVAR 21
1671: PUSH
1672: LD_VAR 0 5
1676: PUSH
1677: LD_VAR 0 2
1681: ARRAY
1682: PUSH
1683: LD_INT 1
1685: ARRAY
1686: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1687: LD_ADDR_OWVAR 37
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_VAR 0 2
1701: ARRAY
1702: PUSH
1703: LD_INT 2
1705: ARRAY
1706: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1707: LD_ADDR_OWVAR 39
1711: PUSH
1712: LD_VAR 0 5
1716: PUSH
1717: LD_VAR 0 2
1721: ARRAY
1722: PUSH
1723: LD_INT 3
1725: ARRAY
1726: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1727: LD_ADDR_OWVAR 38
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_VAR 0 2
1741: ARRAY
1742: PUSH
1743: LD_INT 4
1745: ARRAY
1746: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1747: LD_ADDR_OWVAR 40
1751: PUSH
1752: LD_VAR 0 5
1756: PUSH
1757: LD_VAR 0 2
1761: ARRAY
1762: PUSH
1763: LD_INT 5
1765: ARRAY
1766: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1767: LD_ADDR_OWVAR 41
1771: PUSH
1772: LD_INT 40
1774: ST_TO_ADDR
// veh = CreateVehicle ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: CALL_OW 45
1784: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1785: LD_VAR 0 4
1789: PPUSH
1790: LD_INT 3
1792: PPUSH
1793: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1797: LD_VAR 0 4
1801: PPUSH
1802: LD_INT 2
1804: PPUSH
1805: LD_INT 0
1807: PPUSH
1808: CALL_OW 49
// end ;
1812: GO 1664
1814: POP
1815: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1816: LD_ADDR_VAR 0 6
1820: PUSH
1821: LD_INT 22
1823: PUSH
1824: LD_INT 1
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 21
1833: PUSH
1834: LD_INT 2
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 34
1843: PUSH
1844: LD_INT 12
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL_OW 69
1860: ST_TO_ADDR
// if cargoList > 0 then
1861: LD_VAR 0 6
1865: PUSH
1866: LD_INT 0
1868: GREATER
1869: IFFALSE 2002
// for i = 1 to cargoList do
1871: LD_ADDR_VAR 0 2
1875: PUSH
1876: DOUBLE
1877: LD_INT 1
1879: DEC
1880: ST_TO_ADDR
1881: LD_VAR 0 6
1885: PUSH
1886: FOR_TO
1887: IFFALSE 2000
// begin if resources > 0 then
1889: LD_EXP 40
1893: PUSH
1894: LD_INT 0
1896: GREATER
1897: IFFALSE 1998
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1899: LD_VAR 0 6
1903: PUSH
1904: LD_VAR 0 2
1908: ARRAY
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: LD_EXP 40
1917: PUSH
1918: LD_VAR 0 2
1922: ARRAY
1923: PUSH
1924: LD_INT 1
1926: ARRAY
1927: PPUSH
1928: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1932: LD_VAR 0 6
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PPUSH
1943: LD_INT 2
1945: PPUSH
1946: LD_EXP 40
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 2
1959: ARRAY
1960: PPUSH
1961: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1965: LD_VAR 0 6
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: LD_EXP 40
1983: PUSH
1984: LD_VAR 0 2
1988: ARRAY
1989: PUSH
1990: LD_INT 3
1992: ARRAY
1993: PPUSH
1994: CALL_OW 291
// end ; end ;
1998: GO 1886
2000: POP
2001: POP
// end ; end ;
2002: LD_VAR 0 1
2006: RET
// export function PrepareOthers ; var i , veh ; begin
2007: LD_INT 0
2009: PPUSH
2010: PPUSH
2011: PPUSH
// uc_side = 1 ;
2012: LD_ADDR_OWVAR 20
2016: PUSH
2017: LD_INT 1
2019: ST_TO_ADDR
// uc_nation = 1 ;
2020: LD_ADDR_OWVAR 21
2024: PUSH
2025: LD_INT 1
2027: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2028: LD_ADDR_EXP 11
2032: PUSH
2033: LD_STRING OthersIn06
2035: PPUSH
2036: CALL_OW 31
2040: ST_TO_ADDR
// for i in others do
2041: LD_ADDR_VAR 0 2
2045: PUSH
2046: LD_EXP 11
2050: PUSH
2051: FOR_IN
2052: IFFALSE 2142
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2054: LD_ADDR_VAR 0 3
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 58
2081: PUSH
2082: EMPTY
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: ST_TO_ADDR
// if veh > 0 then
2095: LD_VAR 0 3
2099: PUSH
2100: LD_INT 0
2102: GREATER
2103: IFFALSE 2125
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: LD_VAR 0 3
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PPUSH
2119: CALL_OW 52
// end else
2123: GO 2140
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2125: LD_VAR 0 2
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 0
2135: PPUSH
2136: CALL_OW 49
// end ; end ;
2140: GO 2051
2142: POP
2143: POP
// end ;
2144: LD_VAR 0 1
2148: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2149: LD_INT 0
2151: PPUSH
2152: PPUSH
2153: PPUSH
// uc_side = 1 ;
2154: LD_ADDR_OWVAR 20
2158: PUSH
2159: LD_INT 1
2161: ST_TO_ADDR
// uc_nation = 0 ;
2162: LD_ADDR_OWVAR 21
2166: PUSH
2167: LD_INT 0
2169: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2170: LD_ADDR_EXP 12
2174: PUSH
2175: LD_STRING ApeIn06
2177: PPUSH
2178: CALL_OW 31
2182: ST_TO_ADDR
// for i in ape do
2183: LD_ADDR_VAR 0 2
2187: PUSH
2188: LD_EXP 12
2192: PUSH
2193: FOR_IN
2194: IFFALSE 2213
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2196: LD_VAR 0 2
2200: PPUSH
2201: LD_INT 2
2203: PPUSH
2204: LD_INT 0
2206: PPUSH
2207: CALL_OW 49
2211: GO 2193
2213: POP
2214: POP
// end ;
2215: LD_VAR 0 1
2219: RET
// export function PrepareDenis ; var xy , i ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// uc_side = 4 ;
2225: LD_ADDR_OWVAR 20
2229: PUSH
2230: LD_INT 4
2232: ST_TO_ADDR
// uc_nation = 1 ;
2233: LD_ADDR_OWVAR 21
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2241: LD_ADDR_VAR 0 2
2245: PUSH
2246: LD_INT 63
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 70
2258: PUSH
2259: LD_INT 1
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PUSH
2266: LD_INT 83
2268: PUSH
2269: LD_INT 1
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 16
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 27
2288: PUSH
2289: LD_INT 1
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 38
2298: PUSH
2299: LD_INT 1
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 5
2308: PUSH
2309: LD_INT 1
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 54
2318: PUSH
2319: LD_INT 1
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2336: LD_ADDR_EXP 9
2340: PUSH
2341: LD_STRING Denis
2343: PPUSH
2344: LD_INT 1
2346: PPUSH
2347: CALL 5968 0 2
2351: ST_TO_ADDR
// for i = 1 to xy do
2352: LD_ADDR_VAR 0 3
2356: PUSH
2357: DOUBLE
2358: LD_INT 1
2360: DEC
2361: ST_TO_ADDR
2362: LD_VAR 0 2
2366: PUSH
2367: FOR_TO
2368: IFFALSE 2467
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2370: LD_VAR 0 2
2374: PUSH
2375: LD_VAR 0 3
2379: ARRAY
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 2
2389: PUSH
2390: LD_VAR 0 3
2394: ARRAY
2395: PUSH
2396: LD_INT 2
2398: ARRAY
2399: PPUSH
2400: CALL_OW 428
2404: PUSH
2405: LD_INT 0
2407: EQUAL
2408: IFFALSE 2465
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2410: LD_EXP 9
2414: PPUSH
2415: LD_VAR 0 2
2419: PUSH
2420: LD_VAR 0 3
2424: ARRAY
2425: PUSH
2426: LD_INT 1
2428: ARRAY
2429: PPUSH
2430: LD_VAR 0 2
2434: PUSH
2435: LD_VAR 0 3
2439: ARRAY
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 0
2447: PPUSH
2448: CALL_OW 48
// if IsPlaced ( Denis ) then
2452: LD_EXP 9
2456: PPUSH
2457: CALL_OW 305
2461: IFFALSE 2465
// break ;
2463: GO 2467
// end ;
2465: GO 2367
2467: POP
2468: POP
// SetClass ( Denis , 4 ) ;
2469: LD_EXP 9
2473: PPUSH
2474: LD_INT 4
2476: PPUSH
2477: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2481: LD_EXP 9
2485: PPUSH
2486: LD_INT 750
2488: PPUSH
2489: CALL_OW 234
// end ;
2493: LD_VAR 0 1
2497: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2498: LD_INT 0
2500: PPUSH
2501: PPUSH
2502: PPUSH
2503: PPUSH
2504: PPUSH
// area := HarrisonSupportArea ;
2505: LD_ADDR_VAR 0 4
2509: PUSH
2510: LD_INT 3
2512: ST_TO_ADDR
// dir := 2 ;
2513: LD_ADDR_VAR 0 5
2517: PUSH
2518: LD_INT 2
2520: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2521: LD_VAR 0 4
2525: PPUSH
2526: LD_INT 21
2528: PUSH
2529: LD_INT 3
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PPUSH
2536: CALL_OW 70
2540: IFFALSE 2558
// begin area := HarrisonSupportArea2 ;
2542: LD_ADDR_VAR 0 4
2546: PUSH
2547: LD_INT 31
2549: ST_TO_ADDR
// dir := 1 ;
2550: LD_ADDR_VAR 0 5
2554: PUSH
2555: LD_INT 1
2557: ST_TO_ADDR
// end ; uc_side = 1 ;
2558: LD_ADDR_OWVAR 20
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// uc_nation = 1 ;
2566: LD_ADDR_OWVAR 21
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// vc_engine = 1 ;
2574: LD_ADDR_OWVAR 39
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// vc_control = 1 ;
2582: LD_ADDR_OWVAR 38
2586: PUSH
2587: LD_INT 1
2589: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2590: LD_ADDR_OWVAR 40
2594: PUSH
2595: LD_INT 4
2597: PUSH
2598: LD_INT 4
2600: PUSH
2601: LD_INT 2
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: PUSH
2609: LD_OWVAR 67
2613: ARRAY
2614: ST_TO_ADDR
// vc_chassis = 2 ;
2615: LD_ADDR_OWVAR 37
2619: PUSH
2620: LD_INT 2
2622: ST_TO_ADDR
// veh = CreateVehicle ;
2623: LD_ADDR_VAR 0 3
2627: PUSH
2628: CALL_OW 45
2632: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2633: LD_VAR 0 3
2637: PPUSH
2638: LD_VAR 0 5
2642: PPUSH
2643: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2647: LD_VAR 0 3
2651: PPUSH
2652: LD_VAR 0 4
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2664: LD_VAR 0 3
2668: PPUSH
2669: LD_INT 50
2671: PPUSH
2672: CALL_OW 240
// hc_class := 2 ;
2676: LD_ADDR_OWVAR 28
2680: PUSH
2681: LD_INT 2
2683: ST_TO_ADDR
// hc_sex := sex_male ;
2684: LD_ADDR_OWVAR 27
2688: PUSH
2689: LD_INT 1
2691: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2692: LD_ADDR_OWVAR 33
2696: PUSH
2697: LD_STRING SecondCharsGal
2699: ST_TO_ADDR
// hc_face_number := 52 ;
2700: LD_ADDR_OWVAR 34
2704: PUSH
2705: LD_INT 52
2707: ST_TO_ADDR
// hc_name := Craig Brown ;
2708: LD_ADDR_OWVAR 26
2712: PUSH
2713: LD_STRING Craig Brown
2715: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2716: LD_ADDR_OWVAR 29
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: LD_INT 10
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2731: LD_ADDR_OWVAR 30
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: LD_INT 2
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2754: LD_ADDR_OWVAR 31
2758: PUSH
2759: LD_INT 2
2761: PUSH
2762: LD_INT 3
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: LD_INT 0
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2777: LD_ADDR_EXP 17
2781: PUSH
2782: CALL_OW 44
2786: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2787: LD_EXP 17
2791: PPUSH
2792: LD_VAR 0 3
2796: PPUSH
2797: CALL_OW 52
// vc_engine = 1 ;
2801: LD_ADDR_OWVAR 39
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// vc_control = 1 ;
2809: LD_ADDR_OWVAR 38
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2817: LD_ADDR_OWVAR 40
2821: PUSH
2822: LD_INT 3
2824: ST_TO_ADDR
// vc_chassis = 2 ;
2825: LD_ADDR_OWVAR 37
2829: PUSH
2830: LD_INT 2
2832: ST_TO_ADDR
// veh = CreateVehicle ;
2833: LD_ADDR_VAR 0 3
2837: PUSH
2838: CALL_OW 45
2842: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_VAR 0 5
2852: PPUSH
2853: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2857: LD_VAR 0 3
2861: PPUSH
2862: LD_VAR 0 4
2866: PPUSH
2867: LD_INT 0
2869: PPUSH
2870: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2874: LD_VAR 0 3
2878: PPUSH
2879: LD_INT 50
2881: PPUSH
2882: CALL_OW 240
// hc_class := 1 ;
2886: LD_ADDR_OWVAR 28
2890: PUSH
2891: LD_INT 1
2893: ST_TO_ADDR
// hc_sex := sex_female ;
2894: LD_ADDR_OWVAR 27
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2902: LD_ADDR_OWVAR 33
2906: PUSH
2907: LD_STRING SecondCharsGal
2909: ST_TO_ADDR
// hc_face_number := 45 ;
2910: LD_ADDR_OWVAR 34
2914: PUSH
2915: LD_INT 45
2917: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2918: LD_ADDR_OWVAR 29
2922: PUSH
2923: LD_INT 11
2925: PUSH
2926: LD_INT 10
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2933: LD_ADDR_OWVAR 26
2937: PUSH
2938: LD_STRING Ingrid Jonsson
2940: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2941: LD_ADDR_OWVAR 30
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: LD_INT 1
2951: PUSH
2952: LD_INT 0
2954: PUSH
2955: LD_INT 0
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2964: LD_ADDR_OWVAR 31
2968: PUSH
2969: LD_INT 3
2971: PUSH
2972: LD_INT 1
2974: PUSH
2975: LD_INT 1
2977: PUSH
2978: LD_INT 0
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2987: LD_ADDR_EXP 18
2991: PUSH
2992: CALL_OW 44
2996: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2997: LD_EXP 18
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: CALL_OW 52
// end ;
3011: LD_VAR 0 1
3015: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
3016: LD_INT 0
3018: PPUSH
3019: PPUSH
3020: PPUSH
3021: PPUSH
3022: PPUSH
// j = 0 ;
3023: LD_ADDR_VAR 0 3
3027: PUSH
3028: LD_INT 0
3030: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3031: LD_INT 35
3033: PPUSH
3034: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
3038: LD_ADDR_VAR 0 2
3042: PUSH
3043: LD_INT 22
3045: PUSH
3046: LD_INT 1
3048: PUSH
3049: EMPTY
3050: LIST
3051: LIST
3052: PUSH
3053: LD_INT 21
3055: PUSH
3056: LD_INT 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 26
3065: PUSH
3066: LD_INT 1
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PUSH
3073: LD_INT 2
3075: PUSH
3076: LD_INT 25
3078: PUSH
3079: LD_INT 1
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: PUSH
3086: LD_INT 25
3088: PUSH
3089: LD_INT 2
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PUSH
3096: LD_INT 25
3098: PUSH
3099: LD_INT 3
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 25
3108: PUSH
3109: LD_INT 4
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: PPUSH
3129: CALL_OW 69
3133: PUSH
3134: FOR_IN
3135: IFFALSE 3261
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 3
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 2
3149: PUSH
3150: LD_INT 21
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 21
3162: PUSH
3163: LD_INT 2
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 21
3172: PUSH
3173: LD_INT 3
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: LD_INT 59
3182: PUSH
3183: EMPTY
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 91
3195: PUSH
3196: LD_VAR 0 2
3200: PUSH
3201: LD_INT 25
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: NOT
3219: PUSH
3220: LD_VAR 0 2
3224: PPUSH
3225: LD_EXP 1
3229: PPUSH
3230: CALL_OW 296
3234: PUSH
3235: LD_INT 15
3237: LESS
3238: AND
3239: IFFALSE 3259
// begin tmp = i ;
3241: LD_ADDR_VAR 0 4
3245: PUSH
3246: LD_VAR 0 2
3250: ST_TO_ADDR
// j = 1 ;
3251: LD_ADDR_VAR 0 3
3255: PUSH
3256: LD_INT 1
3258: ST_TO_ADDR
// end ; end ;
3259: GO 3134
3261: POP
3262: POP
// until j = 1 ;
3263: LD_VAR 0 3
3267: PUSH
3268: LD_INT 1
3270: EQUAL
3271: IFFALSE 3031
// blockSpawn = 1 ;
3273: LD_ADDR_EXP 29
3277: PUSH
3278: LD_INT 1
3280: ST_TO_ADDR
// uc_side = 4 ;
3281: LD_ADDR_OWVAR 20
3285: PUSH
3286: LD_INT 4
3288: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3289: LD_ADDR_EXP 15
3293: PUSH
3294: LD_STRING Joan
3296: PPUSH
3297: LD_INT 0
3299: PPUSH
3300: CALL 5968 0 2
3304: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3305: LD_EXP 15
3309: PPUSH
3310: LD_VAR 0 4
3314: PPUSH
3315: CALL_OW 250
3319: PPUSH
3320: LD_VAR 0 4
3324: PPUSH
3325: CALL_OW 251
3329: PPUSH
3330: LD_INT 5
3332: PPUSH
3333: LD_INT 1
3335: PPUSH
3336: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3340: LD_EXP 15
3344: PPUSH
3345: LD_INT 250
3347: PPUSH
3348: CALL_OW 234
// InGameOn ;
3352: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3356: LD_EXP 15
3360: PPUSH
3361: CALL_OW 87
// wait ( 0 0$2 ) ;
3365: LD_INT 70
3367: PPUSH
3368: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3372: LD_VAR 0 4
3376: PPUSH
3377: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3381: LD_VAR 0 4
3385: PPUSH
3386: CALL_OW 122
// wait ( 0 0$1 ) ;
3390: LD_INT 35
3392: PPUSH
3393: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3397: LD_VAR 0 4
3401: PPUSH
3402: LD_EXP 15
3406: PPUSH
3407: CALL_OW 112
// wait ( 0 0$2 ) ;
3411: LD_INT 70
3413: PPUSH
3414: CALL_OW 67
// DialogueOn ;
3418: CALL_OW 6
// if tmp = JMM then
3422: LD_VAR 0 4
3426: PUSH
3427: LD_EXP 1
3431: EQUAL
3432: IFFALSE 3581
// begin ComTurnUnit ( JMM , Joan ) ;
3434: LD_EXP 1
3438: PPUSH
3439: LD_EXP 15
3443: PPUSH
3444: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3448: LD_EXP 1
3452: PPUSH
3453: LD_STRING D5b-JMM-1
3455: PPUSH
3456: CALL_OW 88
// DialogueOff ;
3460: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3464: LD_EXP 15
3468: PPUSH
3469: LD_INT 500
3471: PPUSH
3472: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3476: LD_EXP 15
3480: PPUSH
3481: LD_EXP 1
3485: PPUSH
3486: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3490: LD_EXP 1
3494: PPUSH
3495: LD_EXP 15
3499: PPUSH
3500: CALL_OW 119
// wait ( 0 0$1 ) ;
3504: LD_INT 35
3506: PPUSH
3507: CALL_OW 67
// DialogueOn ;
3511: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3515: LD_EXP 15
3519: PPUSH
3520: LD_STRING D5b-Joan-1
3522: PPUSH
3523: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3527: LD_EXP 1
3531: PPUSH
3532: LD_STRING D5b-JMM-2
3534: PPUSH
3535: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3539: LD_EXP 15
3543: PPUSH
3544: LD_STRING D5b-Joan-2
3546: PPUSH
3547: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D5b-JMM-3
3558: PPUSH
3559: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D5b-Joan-3
3570: PPUSH
3571: CALL_OW 88
// DialogueOff ;
3575: CALL_OW 7
// end else
3579: GO 3916
// begin ComTurnUnit ( tmp , Joan ) ;
3581: LD_VAR 0 4
3585: PPUSH
3586: LD_EXP 15
3590: PPUSH
3591: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3595: LD_VAR 0 4
3599: PPUSH
3600: LD_STRING D5a-Sol1-1
3602: PPUSH
3603: CALL_OW 88
// DialogueOff ;
3607: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3611: LD_EXP 15
3615: PPUSH
3616: LD_INT 500
3618: PPUSH
3619: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3623: LD_EXP 15
3627: PPUSH
3628: LD_VAR 0 4
3632: PPUSH
3633: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3637: LD_VAR 0 4
3641: PPUSH
3642: LD_EXP 15
3646: PPUSH
3647: CALL_OW 119
// wait ( 0 0$1 ) ;
3651: LD_INT 35
3653: PPUSH
3654: CALL_OW 67
// DialogueOn ;
3658: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3662: LD_EXP 15
3666: PPUSH
3667: LD_STRING D5a-Joan-1
3669: PPUSH
3670: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_STRING D5a-Sol1-2
3681: PPUSH
3682: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3686: LD_EXP 15
3690: PPUSH
3691: LD_STRING D5a-Joan-2
3693: PPUSH
3694: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3698: LD_VAR 0 4
3702: PPUSH
3703: LD_STRING D5a-Sol1-3
3705: PPUSH
3706: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3710: LD_EXP 15
3714: PPUSH
3715: LD_STRING D5a-Joan-3
3717: PPUSH
3718: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3722: LD_VAR 0 4
3726: PPUSH
3727: LD_STRING D5a-Sol1-4
3729: PPUSH
3730: CALL_OW 88
// DialogueOff ;
3734: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3738: LD_EXP 1
3742: PPUSH
3743: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3747: LD_EXP 1
3751: PPUSH
3752: CALL_OW 122
// wait ( 0 0$1 ) ;
3756: LD_INT 35
3758: PPUSH
3759: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3763: LD_INT 35
3765: PPUSH
3766: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3770: LD_EXP 15
3774: PUSH
3775: LD_VAR 0 4
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PPUSH
3784: LD_EXP 1
3788: PPUSH
3789: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3793: LD_EXP 15
3797: PPUSH
3798: LD_EXP 1
3802: PPUSH
3803: CALL_OW 296
3807: PUSH
3808: LD_INT 5
3810: LESS
3811: IFFALSE 3763
// ComTurnUnit ( Joan , JMM ) ;
3813: LD_EXP 15
3817: PPUSH
3818: LD_EXP 1
3822: PPUSH
3823: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3827: LD_EXP 1
3831: PPUSH
3832: LD_EXP 15
3836: PPUSH
3837: CALL_OW 119
// wait ( 0 0$1 ) ;
3841: LD_INT 35
3843: PPUSH
3844: CALL_OW 67
// DialogueOn ;
3848: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3852: LD_EXP 15
3856: PPUSH
3857: LD_STRING D5a-Joan-4
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D5a-JMM-4
3871: PPUSH
3872: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3876: LD_EXP 15
3880: PPUSH
3881: LD_STRING D5a-Joan-5
3883: PPUSH
3884: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D5a-JMM-5
3895: PPUSH
3896: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3900: LD_EXP 15
3904: PPUSH
3905: LD_STRING D5a-Joan-6
3907: PPUSH
3908: CALL_OW 88
// DialogueOff ;
3912: CALL_OW 7
// end ; DialogueOn ;
3916: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3920: LD_EXP 1
3924: PPUSH
3925: LD_STRING D6-JMM-1
3927: PPUSH
3928: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3932: LD_EXP 15
3936: PPUSH
3937: LD_STRING D6-Joan-1
3939: PPUSH
3940: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3944: LD_EXP 1
3948: PPUSH
3949: LD_STRING D6-JMM-2
3951: PPUSH
3952: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3956: LD_EXP 15
3960: PPUSH
3961: LD_STRING D6-Joan-2
3963: PPUSH
3964: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3968: LD_EXP 1
3972: PPUSH
3973: LD_STRING D6-JMM-3
3975: PPUSH
3976: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3980: LD_EXP 15
3984: PPUSH
3985: LD_STRING D6-Joan-3
3987: PPUSH
3988: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3992: LD_EXP 1
3996: PPUSH
3997: LD_STRING D6-JMM-4
3999: PPUSH
4000: CALL_OW 88
// DialogueOff ;
4004: CALL_OW 7
// InGameOff ;
4008: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4012: LD_EXP 15
4016: PPUSH
4017: LD_INT 1
4019: PPUSH
4020: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4024: LD_STRING MJ
4026: PPUSH
4027: CALL_OW 337
// JoanStatus = 1 ;
4031: LD_ADDR_EXP 16
4035: PUSH
4036: LD_INT 1
4038: ST_TO_ADDR
// blockSpawn = 0 ;
4039: LD_ADDR_EXP 29
4043: PUSH
4044: LD_INT 0
4046: ST_TO_ADDR
// end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
// repeat wait ( 0 0$7 ) ;
4056: LD_INT 245
4058: PPUSH
4059: CALL_OW 67
// until blockSpawn = 0 ;
4063: LD_EXP 29
4067: PUSH
4068: LD_INT 0
4070: EQUAL
4071: IFFALSE 4056
// uc_side = 1 ;
4073: LD_ADDR_OWVAR 20
4077: PUSH
4078: LD_INT 1
4080: ST_TO_ADDR
// uc_nation = 1 ;
4081: LD_ADDR_OWVAR 21
4085: PUSH
4086: LD_INT 1
4088: ST_TO_ADDR
// InitHc ;
4089: CALL_OW 19
// if number = 1 then
4093: LD_VAR 0 1
4097: PUSH
4098: LD_INT 1
4100: EQUAL
4101: IFFALSE 4277
// begin hc_class := 3 ;
4103: LD_ADDR_OWVAR 28
4107: PUSH
4108: LD_INT 3
4110: ST_TO_ADDR
// hc_sex := sex_male ;
4111: LD_ADDR_OWVAR 27
4115: PUSH
4116: LD_INT 1
4118: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4119: LD_ADDR_OWVAR 33
4123: PUSH
4124: LD_STRING SecondCharsGal
4126: ST_TO_ADDR
// hc_face_number := 55 ;
4127: LD_ADDR_OWVAR 34
4131: PUSH
4132: LD_INT 55
4134: ST_TO_ADDR
// hc_name := George McCarthy ;
4135: LD_ADDR_OWVAR 26
4139: PUSH
4140: LD_STRING George McCarthy
4142: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4143: LD_ADDR_OWVAR 29
4147: PUSH
4148: LD_INT 11
4150: PUSH
4151: LD_INT 10
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4158: LD_ADDR_OWVAR 30
4162: PUSH
4163: LD_INT 0
4165: PUSH
4166: LD_INT 0
4168: PUSH
4169: LD_INT 2
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4181: LD_ADDR_OWVAR 31
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: LD_INT 2
4191: PUSH
4192: LD_INT 3
4194: PUSH
4195: LD_INT 1
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: ST_TO_ADDR
// un = CreateHuman ;
4204: LD_ADDR_VAR 0 3
4208: PUSH
4209: CALL_OW 44
4213: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4214: LD_VAR 0 3
4218: PPUSH
4219: LD_INT 23
4221: PPUSH
4222: LD_INT 1
4224: PPUSH
4225: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4229: LD_VAR 0 3
4233: PPUSH
4234: CALL_OW 87
// wait ( 0 0$1 ) ;
4238: LD_INT 35
4240: PPUSH
4241: CALL_OW 67
// DialogueOn ;
4245: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4249: LD_VAR 0 3
4253: PPUSH
4254: LD_STRING D11d-Sol4-1
4256: PPUSH
4257: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4261: LD_EXP 1
4265: PPUSH
4266: LD_STRING D11d-JMM-1
4268: PPUSH
4269: CALL_OW 88
// DialogueOff ;
4273: CALL_OW 7
// end ; if number = 2 then
4277: LD_VAR 0 1
4281: PUSH
4282: LD_INT 2
4284: EQUAL
4285: IFFALSE 4461
// begin hc_class := 1 ;
4287: LD_ADDR_OWVAR 28
4291: PUSH
4292: LD_INT 1
4294: ST_TO_ADDR
// hc_sex := sex_male ;
4295: LD_ADDR_OWVAR 27
4299: PUSH
4300: LD_INT 1
4302: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4303: LD_ADDR_OWVAR 33
4307: PUSH
4308: LD_STRING AmGalRemake
4310: ST_TO_ADDR
// hc_face_number := 7 ;
4311: LD_ADDR_OWVAR 34
4315: PUSH
4316: LD_INT 7
4318: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4319: LD_ADDR_OWVAR 26
4323: PUSH
4324: LD_STRING Bobby Jordan
4326: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4327: LD_ADDR_OWVAR 29
4331: PUSH
4332: LD_INT 9
4334: PUSH
4335: LD_INT 11
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4342: LD_ADDR_OWVAR 30
4346: PUSH
4347: LD_INT 1
4349: PUSH
4350: LD_INT 0
4352: PUSH
4353: LD_INT 0
4355: PUSH
4356: LD_INT 1
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4365: LD_ADDR_OWVAR 31
4369: PUSH
4370: LD_INT 2
4372: PUSH
4373: LD_INT 1
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: LD_INT 1
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// un = CreateHuman ;
4388: LD_ADDR_VAR 0 3
4392: PUSH
4393: CALL_OW 44
4397: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4398: LD_VAR 0 3
4402: PPUSH
4403: LD_INT 24
4405: PPUSH
4406: LD_INT 1
4408: PPUSH
4409: CALL_OW 49
// wait ( 0 0$1 ) ;
4413: LD_INT 35
4415: PPUSH
4416: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4420: LD_VAR 0 3
4424: PPUSH
4425: CALL_OW 87
// DialogueOn ;
4429: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4433: LD_VAR 0 3
4437: PPUSH
4438: LD_STRING D11b-Sol3-1
4440: PPUSH
4441: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4445: LD_EXP 1
4449: PPUSH
4450: LD_STRING D11b-JMM-1
4452: PPUSH
4453: CALL_OW 88
// DialogueOff ;
4457: CALL_OW 7
// end ; if number = 3 then
4461: LD_VAR 0 1
4465: PUSH
4466: LD_INT 3
4468: EQUAL
4469: IFFALSE 4633
// begin hc_class := 1 ;
4471: LD_ADDR_OWVAR 28
4475: PUSH
4476: LD_INT 1
4478: ST_TO_ADDR
// hc_sex := sex_male ;
4479: LD_ADDR_OWVAR 27
4483: PUSH
4484: LD_INT 1
4486: ST_TO_ADDR
// hc_gallery := DJ ;
4487: LD_ADDR_OWVAR 33
4491: PUSH
4492: LD_STRING DJ
4494: ST_TO_ADDR
// hc_face_number := 1 ;
4495: LD_ADDR_OWVAR 34
4499: PUSH
4500: LD_INT 1
4502: ST_TO_ADDR
// hc_name := Darius Dajay ;
4503: LD_ADDR_OWVAR 26
4507: PUSH
4508: LD_STRING Darius Dajay
4510: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4511: LD_ADDR_OWVAR 29
4515: PUSH
4516: LD_INT 11
4518: PUSH
4519: LD_INT 11
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4526: LD_ADDR_OWVAR 30
4530: PUSH
4531: LD_INT 2
4533: PUSH
4534: LD_INT 0
4536: PUSH
4537: LD_INT 0
4539: PUSH
4540: LD_INT 0
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4549: LD_ADDR_OWVAR 31
4553: PUSH
4554: LD_INT 4
4556: PUSH
4557: LD_INT 0
4559: PUSH
4560: LD_INT 1
4562: PUSH
4563: LD_INT 0
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: ST_TO_ADDR
// un = CreateHuman ;
4572: LD_ADDR_VAR 0 3
4576: PUSH
4577: CALL_OW 44
4581: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4582: LD_VAR 0 3
4586: PPUSH
4587: LD_INT 25
4589: PPUSH
4590: LD_INT 1
4592: PPUSH
4593: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4597: LD_VAR 0 3
4601: PPUSH
4602: CALL_OW 87
// wait ( 0 0$1 ) ;
4606: LD_INT 35
4608: PPUSH
4609: CALL_OW 67
// DialogueOn ;
4613: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4617: LD_VAR 0 3
4621: PPUSH
4622: LD_STRING D11f-Sol5-1
4624: PPUSH
4625: CALL_OW 88
// DialogueOff ;
4629: CALL_OW 7
// end ; if number = 4 then
4633: LD_VAR 0 1
4637: PUSH
4638: LD_INT 4
4640: EQUAL
4641: IFFALSE 4805
// begin hc_class := 3 ;
4643: LD_ADDR_OWVAR 28
4647: PUSH
4648: LD_INT 3
4650: ST_TO_ADDR
// hc_sex := sex_female ;
4651: LD_ADDR_OWVAR 27
4655: PUSH
4656: LD_INT 2
4658: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4659: LD_ADDR_OWVAR 33
4663: PUSH
4664: LD_STRING SecondCharsGal
4666: ST_TO_ADDR
// hc_face_number := 46 ;
4667: LD_ADDR_OWVAR 34
4671: PUSH
4672: LD_INT 46
4674: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4675: LD_ADDR_OWVAR 26
4679: PUSH
4680: LD_STRING Sylvia Creak
4682: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4683: LD_ADDR_OWVAR 29
4687: PUSH
4688: LD_INT 10
4690: PUSH
4691: LD_INT 9
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4698: LD_ADDR_OWVAR 30
4702: PUSH
4703: LD_INT 0
4705: PUSH
4706: LD_INT 1
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: LD_INT 1
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4721: LD_ADDR_OWVAR 31
4725: PUSH
4726: LD_INT 1
4728: PUSH
4729: LD_INT 3
4731: PUSH
4732: LD_INT 1
4734: PUSH
4735: LD_INT 1
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: ST_TO_ADDR
// un = CreateHuman ;
4744: LD_ADDR_VAR 0 3
4748: PUSH
4749: CALL_OW 44
4753: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4754: LD_VAR 0 3
4758: PPUSH
4759: LD_INT 26
4761: PPUSH
4762: LD_INT 1
4764: PPUSH
4765: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4769: LD_VAR 0 3
4773: PPUSH
4774: CALL_OW 87
// wait ( 0 0$1 ) ;
4778: LD_INT 35
4780: PPUSH
4781: CALL_OW 67
// DialogueOn ;
4785: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4789: LD_VAR 0 3
4793: PPUSH
4794: LD_STRING D11e-FSol4-1
4796: PPUSH
4797: CALL_OW 88
// DialogueOff ;
4801: CALL_OW 7
// end ; if number = 5 then
4805: LD_VAR 0 1
4809: PUSH
4810: LD_INT 5
4812: EQUAL
4813: IFFALSE 4989
// begin hc_class := 1 ;
4815: LD_ADDR_OWVAR 28
4819: PUSH
4820: LD_INT 1
4822: ST_TO_ADDR
// hc_sex := sex_female ;
4823: LD_ADDR_OWVAR 27
4827: PUSH
4828: LD_INT 2
4830: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4831: LD_ADDR_OWVAR 33
4835: PUSH
4836: LD_STRING SecondCharsGal
4838: ST_TO_ADDR
// hc_face_number := 37 ;
4839: LD_ADDR_OWVAR 34
4843: PUSH
4844: LD_INT 37
4846: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4847: LD_ADDR_OWVAR 26
4851: PUSH
4852: LD_STRING Margherite Simpson
4854: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4855: LD_ADDR_OWVAR 29
4859: PUSH
4860: LD_INT 11
4862: PUSH
4863: LD_INT 10
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4870: LD_ADDR_OWVAR 30
4874: PUSH
4875: LD_INT 1
4877: PUSH
4878: LD_INT 1
4880: PUSH
4881: LD_INT 0
4883: PUSH
4884: LD_INT 0
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4893: LD_ADDR_OWVAR 31
4897: PUSH
4898: LD_INT 1
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: LD_INT 1
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: ST_TO_ADDR
// un = CreateHuman ;
4916: LD_ADDR_VAR 0 3
4920: PUSH
4921: CALL_OW 44
4925: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4926: LD_VAR 0 3
4930: PPUSH
4931: LD_INT 27
4933: PPUSH
4934: LD_INT 1
4936: PPUSH
4937: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4941: LD_VAR 0 3
4945: PPUSH
4946: CALL_OW 87
// wait ( 0 0$1 ) ;
4950: LD_INT 35
4952: PPUSH
4953: CALL_OW 67
// DialogueOn ;
4957: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4961: LD_VAR 0 3
4965: PPUSH
4966: LD_STRING D11c-FSol3-1
4968: PPUSH
4969: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4973: LD_EXP 1
4977: PPUSH
4978: LD_STRING D11c-JMM-1
4980: PPUSH
4981: CALL_OW 88
// DialogueOff ;
4985: CALL_OW 7
// end ; if number = 6 then
4989: LD_VAR 0 1
4993: PUSH
4994: LD_INT 6
4996: EQUAL
4997: IFFALSE 5171
// begin hc_class := 1 ;
4999: LD_ADDR_OWVAR 28
5003: PUSH
5004: LD_INT 1
5006: ST_TO_ADDR
// hc_sex := sex_male ;
5007: LD_ADDR_OWVAR 27
5011: PUSH
5012: LD_INT 1
5014: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5015: LD_ADDR_OWVAR 33
5019: PUSH
5020: LD_STRING AmGalRemake
5022: ST_TO_ADDR
// hc_face_number := 1 ;
5023: LD_ADDR_OWVAR 34
5027: PUSH
5028: LD_INT 1
5030: ST_TO_ADDR
// hc_name := Charles Brown ;
5031: LD_ADDR_OWVAR 26
5035: PUSH
5036: LD_STRING Charles Brown
5038: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5039: LD_ADDR_OWVAR 29
5043: PUSH
5044: LD_INT 12
5046: PUSH
5047: LD_INT 11
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5054: LD_ADDR_OWVAR 30
5058: PUSH
5059: LD_INT 2
5061: PUSH
5062: LD_INT 0
5064: PUSH
5065: LD_INT 0
5067: PUSH
5068: LD_INT 0
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5077: LD_ADDR_OWVAR 31
5081: PUSH
5082: LD_INT 3
5084: PUSH
5085: LD_INT 0
5087: PUSH
5088: LD_INT 1
5090: PUSH
5091: LD_INT 1
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: ST_TO_ADDR
// un = CreateHuman ;
5100: LD_ADDR_VAR 0 3
5104: PUSH
5105: CALL_OW 44
5109: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5110: LD_VAR 0 3
5114: PPUSH
5115: LD_INT 28
5117: PPUSH
5118: LD_INT 1
5120: PPUSH
5121: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5125: LD_VAR 0 3
5129: PPUSH
5130: CALL_OW 87
// wait ( 0 0$1 ) ;
5134: LD_INT 35
5136: PPUSH
5137: CALL_OW 67
// DialogueOn ;
5141: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5145: LD_VAR 0 3
5149: PPUSH
5150: LD_STRING D4-Sol1-5
5152: PPUSH
5153: CALL_OW 88
// DialogueOff ;
5157: CALL_OW 7
// tempCharles = un ;
5161: LD_ADDR_EXP 13
5165: PUSH
5166: LD_VAR 0 3
5170: ST_TO_ADDR
// end ; if number = 7 then
5171: LD_VAR 0 1
5175: PUSH
5176: LD_INT 7
5178: EQUAL
5179: IFFALSE 5429
// begin hc_class := 1 ;
5181: LD_ADDR_OWVAR 28
5185: PUSH
5186: LD_INT 1
5188: ST_TO_ADDR
// hc_sex := sex_female ;
5189: LD_ADDR_OWVAR 27
5193: PUSH
5194: LD_INT 2
5196: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5197: LD_ADDR_OWVAR 33
5201: PUSH
5202: LD_STRING AmGalRemake
5204: ST_TO_ADDR
// hc_face_number := 2 ;
5205: LD_ADDR_OWVAR 34
5209: PUSH
5210: LD_INT 2
5212: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5213: LD_ADDR_OWVAR 26
5217: PUSH
5218: LD_STRING Rebecca Macdonald
5220: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5221: LD_ADDR_OWVAR 29
5225: PUSH
5226: LD_INT 10
5228: PUSH
5229: LD_INT 10
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5236: LD_ADDR_OWVAR 30
5240: PUSH
5241: LD_INT 1
5243: PUSH
5244: LD_INT 0
5246: PUSH
5247: LD_INT 0
5249: PUSH
5250: LD_INT 1
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5259: LD_ADDR_OWVAR 31
5263: PUSH
5264: LD_INT 1
5266: PUSH
5267: LD_INT 0
5269: PUSH
5270: LD_INT 0
5272: PUSH
5273: LD_INT 1
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: ST_TO_ADDR
// un = CreateHuman ;
5282: LD_ADDR_VAR 0 3
5286: PUSH
5287: CALL_OW 44
5291: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5292: LD_VAR 0 3
5296: PPUSH
5297: LD_INT 29
5299: PPUSH
5300: LD_INT 1
5302: PPUSH
5303: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5307: LD_VAR 0 3
5311: PPUSH
5312: CALL_OW 87
// wait ( 0 0$1 ) ;
5316: LD_INT 35
5318: PPUSH
5319: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5323: LD_INT 30
5325: PPUSH
5326: LD_INT 22
5328: PUSH
5329: LD_INT 3
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PPUSH
5336: CALL_OW 70
5340: IFFALSE 5429
// begin DialogueOn ;
5342: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5346: LD_VAR 0 3
5350: PPUSH
5351: CALL_OW 250
5355: PPUSH
5356: LD_VAR 0 3
5360: PPUSH
5361: CALL_OW 251
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: LD_INT 15
5371: NEG
5372: PPUSH
5373: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5377: LD_VAR 0 3
5381: PPUSH
5382: CALL_OW 250
5386: PPUSH
5387: LD_VAR 0 3
5391: PPUSH
5392: CALL_OW 251
5396: PPUSH
5397: LD_INT 1
5399: PPUSH
5400: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5404: LD_VAR 0 3
5408: PPUSH
5409: LD_STRING D11a-FSol2-1
5411: PPUSH
5412: CALL_OW 88
// ComCrawl ( un ) ;
5416: LD_VAR 0 3
5420: PPUSH
5421: CALL_OW 137
// DialogueOff ;
5425: CALL_OW 7
// end ; end ; ignoreTarget := ignoreTarget union un ;
5429: LD_ADDR_EXP 45
5433: PUSH
5434: LD_EXP 45
5438: PUSH
5439: LD_VAR 0 3
5443: UNION
5444: ST_TO_ADDR
// arrivals := arrivals union un ;
5445: LD_ADDR_EXP 46
5449: PUSH
5450: LD_EXP 46
5454: PUSH
5455: LD_VAR 0 3
5459: UNION
5460: ST_TO_ADDR
// end ;
5461: LD_VAR 0 2
5465: RET
// every 0 0$1 do var i ;
5466: GO 5468
5468: DISABLE
5469: LD_INT 0
5471: PPUSH
// begin enable ;
5472: ENABLE
// if not ignoreTarget then
5473: LD_EXP 45
5477: NOT
5478: IFFALSE 5482
// exit ;
5480: GO 5563
// for i in ignoreTarget do
5482: LD_ADDR_VAR 0 1
5486: PUSH
5487: LD_EXP 45
5491: PUSH
5492: FOR_IN
5493: IFFALSE 5561
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5495: LD_INT 22
5497: PUSH
5498: LD_INT 1
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: PUSH
5505: LD_INT 91
5507: PUSH
5508: LD_VAR 0 1
5512: PUSH
5513: LD_INT 10
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: LIST
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PPUSH
5525: CALL_OW 69
5529: PUSH
5530: LD_EXP 45
5534: DIFF
5535: PUSH
5536: LD_INT 1
5538: GREATER
5539: IFFALSE 5559
// begin ignoreTarget := ignoreTarget diff i ;
5541: LD_ADDR_EXP 45
5545: PUSH
5546: LD_EXP 45
5550: PUSH
5551: LD_VAR 0 1
5555: DIFF
5556: ST_TO_ADDR
// break ;
5557: GO 5561
// end ;
5559: GO 5492
5561: POP
5562: POP
// end ; end_of_file
5563: PPOPN 1
5565: END
// export function PrepareRussian ; var i ; begin
5566: LD_INT 0
5568: PPUSH
5569: PPUSH
// if Difficulty < 3 then
5570: LD_OWVAR 67
5574: PUSH
5575: LD_INT 3
5577: LESS
5578: IFFALSE 5595
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5580: LD_INT 130
5582: PPUSH
5583: LD_INT 81
5585: PPUSH
5586: CALL_OW 428
5590: PPUSH
5591: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5595: LD_INT 3
5597: PPUSH
5598: LD_INT 3
5600: PPUSH
5601: LD_INT 2
5603: PPUSH
5604: LD_EXP 34
5608: PPUSH
5609: LD_EXP 35
5613: PPUSH
5614: CALL_OW 12
5618: PPUSH
5619: LD_INT 2
5621: PPUSH
5622: LD_INT 4
5624: PPUSH
5625: CALL 6160 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5629: LD_INT 3
5631: PPUSH
5632: LD_INT 3
5634: PPUSH
5635: LD_INT 8
5637: PPUSH
5638: LD_EXP 34
5642: PPUSH
5643: LD_EXP 35
5647: PPUSH
5648: CALL_OW 12
5652: PPUSH
5653: LD_INT 1
5655: PPUSH
5656: LD_INT 4
5658: PPUSH
5659: CALL 6160 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5663: LD_INT 3
5665: PPUSH
5666: LD_INT 3
5668: PPUSH
5669: LD_INT 67
5671: PPUSH
5672: LD_EXP 34
5676: PPUSH
5677: LD_EXP 35
5681: PPUSH
5682: CALL_OW 12
5686: PPUSH
5687: LD_INT 1
5689: PPUSH
5690: LD_INT 2
5692: PPUSH
5693: CALL 6160 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5697: LD_INT 3
5699: PPUSH
5700: LD_INT 3
5702: PPUSH
5703: LD_INT 21
5705: PPUSH
5706: LD_EXP 34
5710: PPUSH
5711: LD_EXP 35
5715: PPUSH
5716: CALL_OW 12
5720: PPUSH
5721: LD_INT 3
5723: PPUSH
5724: LD_INT 6
5726: PPUSH
5727: CALL 6160 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5731: LD_INT 3
5733: PPUSH
5734: LD_INT 3
5736: PPUSH
5737: LD_INT 17
5739: PPUSH
5740: LD_EXP 34
5744: PPUSH
5745: LD_EXP 35
5749: PPUSH
5750: CALL_OW 12
5754: PPUSH
5755: LD_INT 3
5757: PPUSH
5758: LD_INT 6
5760: PPUSH
5761: CALL 6160 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5765: LD_INT 3
5767: PPUSH
5768: LD_INT 3
5770: PPUSH
5771: LD_INT 32
5773: PPUSH
5774: LD_EXP 34
5778: PPUSH
5779: LD_EXP 35
5783: PPUSH
5784: CALL_OW 12
5788: PPUSH
5789: LD_INT 4
5791: PPUSH
5792: LD_INT 2
5794: PPUSH
5795: CALL 6160 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5799: LD_ADDR_VAR 0 2
5803: PUSH
5804: LD_INT 22
5806: PUSH
5807: LD_INT 3
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PUSH
5814: LD_INT 21
5816: PUSH
5817: LD_INT 3
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 30
5826: PUSH
5827: LD_INT 32
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: PPUSH
5839: CALL_OW 69
5843: PUSH
5844: FOR_IN
5845: IFFALSE 5885
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5847: LD_INT 3
5849: PPUSH
5850: LD_INT 3
5852: PPUSH
5853: LD_VAR 0 2
5857: PPUSH
5858: LD_EXP 34
5862: PPUSH
5863: LD_EXP 35
5867: PPUSH
5868: CALL_OW 12
5872: PPUSH
5873: LD_INT 1
5875: PPUSH
5876: LD_INT 1
5878: PPUSH
5879: CALL 6160 0 6
5883: GO 5844
5885: POP
5886: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5887: LD_ADDR_VAR 0 2
5891: PUSH
5892: LD_INT 22
5894: PUSH
5895: LD_INT 3
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 21
5904: PUSH
5905: LD_INT 3
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 30
5914: PUSH
5915: LD_INT 31
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: LIST
5926: PPUSH
5927: CALL_OW 69
5931: PUSH
5932: FOR_IN
5933: IFFALSE 5961
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5935: LD_EXP 34
5939: PPUSH
5940: LD_EXP 35
5944: PPUSH
5945: CALL_OW 12
5949: PPUSH
5950: LD_VAR 0 2
5954: PPUSH
5955: CALL 6270 0 2
5959: GO 5932
5961: POP
5962: POP
// end ; end_of_file
5963: LD_VAR 0 1
5967: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5968: LD_INT 0
5970: PPUSH
5971: PPUSH
// if exist_mode then
5972: LD_VAR 0 2
5976: IFFALSE 6001
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5978: LD_ADDR_VAR 0 4
5982: PUSH
5983: LD_EXP 44
5987: PUSH
5988: LD_VAR 0 1
5992: STR
5993: PPUSH
5994: CALL_OW 34
5998: ST_TO_ADDR
// end else
5999: GO 6016
// begin unit := NewCharacter ( ident ) ;
6001: LD_ADDR_VAR 0 4
6005: PUSH
6006: LD_VAR 0 1
6010: PPUSH
6011: CALL_OW 25
6015: ST_TO_ADDR
// end ; result := unit ;
6016: LD_ADDR_VAR 0 3
6020: PUSH
6021: LD_VAR 0 4
6025: ST_TO_ADDR
// end ;
6026: LD_VAR 0 3
6030: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6031: LD_INT 0
6033: PPUSH
6034: PPUSH
6035: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6036: LD_ADDR_VAR 0 6
6040: PUSH
6041: LD_VAR 0 1
6045: PUSH
6046: LD_INT 1
6048: PPUSH
6049: LD_VAR 0 1
6053: PPUSH
6054: CALL_OW 12
6058: ARRAY
6059: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6060: LD_VAR 0 6
6064: PPUSH
6065: CALL_OW 258
6069: PUSH
6070: LD_INT 1
6072: EQUAL
6073: IFFALSE 6091
// Say ( speaker , dialogMID ) else
6075: LD_VAR 0 6
6079: PPUSH
6080: LD_VAR 0 2
6084: PPUSH
6085: CALL_OW 88
6089: GO 6105
// Say ( speaker , dialogFID ) ;
6091: LD_VAR 0 6
6095: PPUSH
6096: LD_VAR 0 3
6100: PPUSH
6101: CALL_OW 88
// result := speaker ;
6105: LD_ADDR_VAR 0 4
6109: PUSH
6110: LD_VAR 0 6
6114: ST_TO_ADDR
// end ;
6115: LD_VAR 0 4
6119: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6120: LD_INT 0
6122: PPUSH
6123: PPUSH
// for i in charactersList do
6124: LD_ADDR_VAR 0 4
6128: PUSH
6129: LD_VAR 0 1
6133: PUSH
6134: FOR_IN
6135: IFFALSE 6153
// SaveCharacters ( i , ident ) ;
6137: LD_VAR 0 4
6141: PPUSH
6142: LD_VAR 0 2
6146: PPUSH
6147: CALL_OW 38
6151: GO 6134
6153: POP
6154: POP
// end ;
6155: LD_VAR 0 3
6159: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6160: LD_INT 0
6162: PPUSH
6163: PPUSH
6164: PPUSH
6165: PPUSH
// for i = 1 to count do
6166: LD_ADDR_VAR 0 8
6170: PUSH
6171: DOUBLE
6172: LD_INT 1
6174: DEC
6175: ST_TO_ADDR
6176: LD_VAR 0 6
6180: PUSH
6181: FOR_TO
6182: IFFALSE 6263
// begin uc_side = side ;
6184: LD_ADDR_OWVAR 20
6188: PUSH
6189: LD_VAR 0 1
6193: ST_TO_ADDR
// uc_nation = nation ;
6194: LD_ADDR_OWVAR 21
6198: PUSH
6199: LD_VAR 0 2
6203: ST_TO_ADDR
// hc_gallery =  ;
6204: LD_ADDR_OWVAR 33
6208: PUSH
6209: LD_STRING 
6211: ST_TO_ADDR
// hc_name =  ;
6212: LD_ADDR_OWVAR 26
6216: PUSH
6217: LD_STRING 
6219: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6220: LD_INT 0
6222: PPUSH
6223: LD_VAR 0 5
6227: PPUSH
6228: LD_VAR 0 4
6232: PPUSH
6233: CALL_OW 380
// un = CreateHuman ;
6237: LD_ADDR_VAR 0 10
6241: PUSH
6242: CALL_OW 44
6246: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6247: LD_VAR 0 10
6251: PPUSH
6252: LD_VAR 0 3
6256: PPUSH
6257: CALL_OW 52
// end ;
6261: GO 6181
6263: POP
6264: POP
// end ;
6265: LD_VAR 0 7
6269: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6270: LD_INT 0
6272: PPUSH
6273: PPUSH
6274: PPUSH
// uc_side := GetSide ( b ) ;
6275: LD_ADDR_OWVAR 20
6279: PUSH
6280: LD_VAR 0 2
6284: PPUSH
6285: CALL_OW 255
6289: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6290: LD_ADDR_OWVAR 21
6294: PUSH
6295: LD_VAR 0 2
6299: PPUSH
6300: CALL_OW 248
6304: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6305: LD_INT 0
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: LD_VAR 0 1
6315: PPUSH
6316: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6320: LD_ADDR_VAR 0 5
6324: PUSH
6325: LD_VAR 0 2
6329: PPUSH
6330: CALL_OW 254
6334: PUSH
6335: LD_INT 3
6337: MINUS
6338: ST_TO_ADDR
// if dir < 0 then
6339: LD_VAR 0 5
6343: PUSH
6344: LD_INT 0
6346: LESS
6347: IFFALSE 6363
// dir := 6 + dir ;
6349: LD_ADDR_VAR 0 5
6353: PUSH
6354: LD_INT 6
6356: PUSH
6357: LD_VAR 0 5
6361: PLUS
6362: ST_TO_ADDR
// un := CreateHuman ;
6363: LD_ADDR_VAR 0 4
6367: PUSH
6368: CALL_OW 44
6372: ST_TO_ADDR
// SetDir ( un , dir ) ;
6373: LD_VAR 0 4
6377: PPUSH
6378: LD_VAR 0 5
6382: PPUSH
6383: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6387: LD_VAR 0 4
6391: PPUSH
6392: LD_VAR 0 2
6396: PPUSH
6397: CALL_OW 52
// end ;
6401: LD_VAR 0 3
6405: RET
// export function PrepareDifficulty ; begin
6406: LD_INT 0
6408: PPUSH
// if Difficulty = 1 then
6409: LD_OWVAR 67
6413: PUSH
6414: LD_INT 1
6416: EQUAL
6417: IFFALSE 6435
// begin RuSolMinLevel = 2 ;
6419: LD_ADDR_EXP 34
6423: PUSH
6424: LD_INT 2
6426: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6427: LD_ADDR_EXP 35
6431: PUSH
6432: LD_INT 3
6434: ST_TO_ADDR
// end ; if Difficulty = 2 then
6435: LD_OWVAR 67
6439: PUSH
6440: LD_INT 2
6442: EQUAL
6443: IFFALSE 6461
// begin RuSolMinLevel = 3 ;
6445: LD_ADDR_EXP 34
6449: PUSH
6450: LD_INT 3
6452: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6453: LD_ADDR_EXP 35
6457: PUSH
6458: LD_INT 5
6460: ST_TO_ADDR
// end ; if Difficulty = 3 then
6461: LD_OWVAR 67
6465: PUSH
6466: LD_INT 3
6468: EQUAL
6469: IFFALSE 6487
// begin RuSolMinLevel = 4 ;
6471: LD_ADDR_EXP 34
6475: PUSH
6476: LD_INT 4
6478: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6479: LD_ADDR_EXP 35
6483: PUSH
6484: LD_INT 6
6486: ST_TO_ADDR
// end ; end ;
6487: LD_VAR 0 1
6491: RET
// export function ShowQuery1 ; begin
6492: LD_INT 0
6494: PPUSH
// case query ( QKill ) of 1 :
6495: LD_STRING QKill
6497: PPUSH
6498: CALL_OW 97
6502: PUSH
6503: LD_INT 1
6505: DOUBLE
6506: EQUAL
6507: IFTRUE 6511
6509: GO 6522
6511: POP
// begin result = 1 ;
6512: LD_ADDR_VAR 0 1
6516: PUSH
6517: LD_INT 1
6519: ST_TO_ADDR
// end ; 2 :
6520: GO 6561
6522: LD_INT 2
6524: DOUBLE
6525: EQUAL
6526: IFTRUE 6530
6528: GO 6541
6530: POP
// begin result = 2 ;
6531: LD_ADDR_VAR 0 1
6535: PUSH
6536: LD_INT 2
6538: ST_TO_ADDR
// end ; 3 :
6539: GO 6561
6541: LD_INT 3
6543: DOUBLE
6544: EQUAL
6545: IFTRUE 6549
6547: GO 6560
6549: POP
// begin result = 3 ;
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: LD_INT 3
6557: ST_TO_ADDR
// end ; end ;
6558: GO 6561
6560: POP
// end ;
6561: LD_VAR 0 1
6565: RET
// export function ShowQuery2 ; begin
6566: LD_INT 0
6568: PPUSH
// case query ( QKill2 ) of 1 :
6569: LD_STRING QKill2
6571: PPUSH
6572: CALL_OW 97
6576: PUSH
6577: LD_INT 1
6579: DOUBLE
6580: EQUAL
6581: IFTRUE 6585
6583: GO 6596
6585: POP
// begin result = 1 ;
6586: LD_ADDR_VAR 0 1
6590: PUSH
6591: LD_INT 1
6593: ST_TO_ADDR
// end ; 2 :
6594: GO 6616
6596: LD_INT 2
6598: DOUBLE
6599: EQUAL
6600: IFTRUE 6604
6602: GO 6615
6604: POP
// begin result = 2 ;
6605: LD_ADDR_VAR 0 1
6609: PUSH
6610: LD_INT 2
6612: ST_TO_ADDR
// end ; end ;
6613: GO 6616
6615: POP
// end ;
6616: LD_VAR 0 1
6620: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6621: LD_INT 0
6623: PPUSH
6624: PPUSH
6625: PPUSH
6626: PPUSH
6627: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6628: LD_ADDR_VAR 0 8
6632: PUSH
6633: LD_INT 48
6635: PUSH
6636: LD_INT 49
6638: PUSH
6639: LD_INT 50
6641: PUSH
6642: LD_INT 20
6644: PUSH
6645: LD_INT 1
6647: PUSH
6648: LD_INT 51
6650: PUSH
6651: LD_INT 52
6653: PUSH
6654: LD_INT 69
6656: PUSH
6657: LD_INT 39
6659: PUSH
6660: LD_INT 34
6662: PUSH
6663: LD_INT 40
6665: PUSH
6666: LD_INT 53
6668: PUSH
6669: LD_INT 71
6671: PUSH
6672: LD_INT 57
6674: PUSH
6675: LD_INT 58
6677: PUSH
6678: LD_INT 44
6680: PUSH
6681: LD_INT 32
6683: PUSH
6684: LD_INT 27
6686: PUSH
6687: LD_INT 23
6689: PUSH
6690: LD_INT 33
6692: PUSH
6693: LD_INT 59
6695: PUSH
6696: LD_INT 54
6698: PUSH
6699: LD_INT 55
6701: PUSH
6702: LD_INT 56
6704: PUSH
6705: LD_INT 63
6707: PUSH
6708: LD_INT 64
6710: PUSH
6711: LD_INT 65
6713: PUSH
6714: LD_INT 30
6716: PUSH
6717: LD_INT 31
6719: PUSH
6720: LD_INT 21
6722: PUSH
6723: LD_INT 22
6725: PUSH
6726: LD_INT 25
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6763: LD_ADDR_VAR 0 5
6767: PUSH
6768: DOUBLE
6769: LD_INT 1
6771: DEC
6772: ST_TO_ADDR
6773: LD_VAR 0 8
6777: PUSH
6778: FOR_TO
6779: IFFALSE 6855
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6781: LD_VAR 0 8
6785: PUSH
6786: LD_VAR 0 5
6790: ARRAY
6791: PPUSH
6792: LD_VAR 0 1
6796: PPUSH
6797: CALL_OW 321
6801: PUSH
6802: LD_INT 1
6804: EQUAL
6805: PUSH
6806: LD_VAR 0 8
6810: PUSH
6811: LD_VAR 0 5
6815: ARRAY
6816: PPUSH
6817: LD_VAR 0 3
6821: PPUSH
6822: CALL_OW 482
6826: PUSH
6827: LD_INT 1
6829: EQUAL
6830: AND
6831: IFFALSE 6853
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6833: LD_VAR 0 2
6837: PPUSH
6838: LD_VAR 0 8
6842: PUSH
6843: LD_VAR 0 5
6847: ARRAY
6848: PPUSH
6849: CALL_OW 184
6853: GO 6778
6855: POP
6856: POP
// end ;
6857: LD_VAR 0 4
6861: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6862: LD_INT 0
6864: PPUSH
6865: PPUSH
6866: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6867: LD_INT 22
6869: PUSH
6870: LD_VAR 0 1
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 21
6881: PUSH
6882: LD_INT 2
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PPUSH
6893: CALL_OW 69
6897: PUSH
6898: LD_VAR 0 3
6902: LESSEQUAL
6903: IFFALSE 7011
// begin for i = 1 to vehCount do
6905: LD_ADDR_VAR 0 9
6909: PUSH
6910: DOUBLE
6911: LD_INT 1
6913: DEC
6914: ST_TO_ADDR
6915: LD_VAR 0 3
6919: PUSH
6920: FOR_TO
6921: IFFALSE 7009
// begin weapon = weaponTab [ i ] ;
6923: LD_ADDR_VAR 0 10
6927: PUSH
6928: LD_VAR 0 4
6932: PUSH
6933: LD_VAR 0 9
6937: ARRAY
6938: ST_TO_ADDR
// if weapon = 46 then
6939: LD_VAR 0 10
6943: PUSH
6944: LD_INT 46
6946: EQUAL
6947: IFFALSE 6978
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6949: LD_VAR 0 2
6953: PPUSH
6954: LD_INT 24
6956: PPUSH
6957: LD_VAR 0 5
6961: PPUSH
6962: LD_VAR 0 6
6966: PPUSH
6967: LD_VAR 0 10
6971: PPUSH
6972: CALL_OW 185
// end else
6976: GO 7007
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6978: LD_VAR 0 2
6982: PPUSH
6983: LD_VAR 0 7
6987: PPUSH
6988: LD_VAR 0 5
6992: PPUSH
6993: LD_VAR 0 6
6997: PPUSH
6998: LD_VAR 0 10
7002: PPUSH
7003: CALL_OW 185
// end ; end ;
7007: GO 6920
7009: POP
7010: POP
// end ; end ;
7011: LD_VAR 0 8
7015: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7016: LD_INT 0
7018: PPUSH
7019: PPUSH
7020: PPUSH
7021: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7022: LD_ADDR_VAR 0 8
7026: PUSH
7027: LD_INT 22
7029: PUSH
7030: LD_VAR 0 1
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PUSH
7039: LD_INT 21
7041: PUSH
7042: LD_INT 2
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 3
7051: PUSH
7052: LD_INT 24
7054: PUSH
7055: LD_INT 650
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL_OW 69
7075: ST_TO_ADDR
// if damageVehicles > 0 then
7076: LD_VAR 0 8
7080: PUSH
7081: LD_INT 0
7083: GREATER
7084: IFFALSE 7105
// ComMoveXY ( damageVehicles , repX , repY ) ;
7086: LD_VAR 0 8
7090: PPUSH
7091: LD_VAR 0 3
7095: PPUSH
7096: LD_VAR 0 4
7100: PPUSH
7101: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7105: LD_VAR 0 8
7109: PPUSH
7110: LD_INT 95
7112: PUSH
7113: LD_VAR 0 2
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: LD_INT 3
7124: PUSH
7125: LD_INT 58
7127: PUSH
7128: EMPTY
7129: LIST
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PPUSH
7139: CALL_OW 72
7143: PUSH
7144: LD_INT 0
7146: GREATER
7147: IFFALSE 7214
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7149: LD_ADDR_VAR 0 6
7153: PUSH
7154: LD_VAR 0 8
7158: PPUSH
7159: LD_INT 95
7161: PUSH
7162: LD_VAR 0 2
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 3
7173: PUSH
7174: LD_INT 58
7176: PUSH
7177: EMPTY
7178: LIST
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PPUSH
7188: CALL_OW 72
7192: PUSH
7193: FOR_IN
7194: IFFALSE 7212
// ComExitVehicle ( UnitsInside ( i ) ) ;
7196: LD_VAR 0 6
7200: PPUSH
7201: CALL_OW 313
7205: PPUSH
7206: CALL_OW 121
7210: GO 7193
7212: POP
7213: POP
// end ;
7214: LD_VAR 0 5
7218: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7219: LD_INT 0
7221: PPUSH
7222: PPUSH
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7228: LD_ADDR_VAR 0 8
7232: PUSH
7233: LD_INT 22
7235: PUSH
7236: LD_VAR 0 1
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 21
7247: PUSH
7248: LD_INT 2
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 24
7257: PUSH
7258: LD_INT 660
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 58
7270: PUSH
7271: EMPTY
7272: LIST
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: LD_INT 34
7279: PUSH
7280: LD_INT 43
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 34
7289: PUSH
7290: LD_INT 44
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 34
7299: PUSH
7300: LD_INT 46
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: PPUSH
7324: CALL_OW 69
7328: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7329: LD_INT 22
7331: PUSH
7332: LD_VAR 0 1
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 21
7343: PUSH
7344: LD_INT 2
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 24
7353: PUSH
7354: LD_INT 1000
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 3
7363: PUSH
7364: LD_INT 58
7366: PUSH
7367: EMPTY
7368: LIST
7369: PUSH
7370: LD_INT 2
7372: PUSH
7373: LD_INT 34
7375: PUSH
7376: LD_INT 43
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 34
7385: PUSH
7386: LD_INT 44
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 34
7395: PUSH
7396: LD_INT 46
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: LIST
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: PPUSH
7420: CALL_OW 69
7424: PUSH
7425: LD_INT 5
7427: PUSH
7428: LD_INT 6
7430: PUSH
7431: LD_INT 6
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: LIST
7438: PUSH
7439: LD_OWVAR 67
7443: ARRAY
7444: EQUAL
7445: IFFALSE 7701
// if seeEnemy = 0 then
7447: LD_VAR 0 11
7451: PUSH
7452: LD_INT 0
7454: EQUAL
7455: IFFALSE 7701
// repeat wait ( 0 0$1 ) ;
7457: LD_INT 35
7459: PPUSH
7460: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7464: LD_ADDR_VAR 0 8
7468: PUSH
7469: LD_INT 22
7471: PUSH
7472: LD_VAR 0 1
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 21
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 24
7493: PUSH
7494: LD_INT 660
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: LD_INT 3
7503: PUSH
7504: LD_INT 58
7506: PUSH
7507: EMPTY
7508: LIST
7509: PUSH
7510: LD_INT 2
7512: PUSH
7513: LD_INT 34
7515: PUSH
7516: LD_INT 43
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 34
7525: PUSH
7526: LD_INT 44
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 34
7535: PUSH
7536: LD_INT 46
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: LIST
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: PPUSH
7560: CALL_OW 69
7564: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7565: LD_INT 22
7567: PUSH
7568: LD_VAR 0 1
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 95
7579: PUSH
7580: LD_VAR 0 2
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PPUSH
7593: CALL_OW 69
7597: NOT
7598: PUSH
7599: LD_VAR 0 11
7603: PUSH
7604: LD_INT 0
7606: EQUAL
7607: AND
7608: IFFALSE 7663
// for i := 1 to wayX do
7610: LD_ADDR_VAR 0 6
7614: PUSH
7615: DOUBLE
7616: LD_INT 1
7618: DEC
7619: ST_TO_ADDR
7620: LD_VAR 0 3
7624: PUSH
7625: FOR_TO
7626: IFFALSE 7661
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7628: LD_VAR 0 8
7632: PPUSH
7633: LD_VAR 0 3
7637: PUSH
7638: LD_VAR 0 6
7642: ARRAY
7643: PPUSH
7644: LD_VAR 0 4
7648: PUSH
7649: LD_VAR 0 6
7653: ARRAY
7654: PPUSH
7655: CALL_OW 114
7659: GO 7625
7661: POP
7662: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7663: LD_INT 22
7665: PUSH
7666: LD_VAR 0 1
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: LD_INT 95
7677: PUSH
7678: LD_VAR 0 2
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PPUSH
7691: CALL_OW 69
7695: PUSH
7696: LD_INT 0
7698: GREATER
7699: IFFALSE 7457
// seeEnemy = 1 ;
7701: LD_ADDR_VAR 0 11
7705: PUSH
7706: LD_INT 1
7708: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7709: LD_INT 35
7711: PPUSH
7712: CALL_OW 67
// for j in vehiclesOK do
7716: LD_ADDR_VAR 0 7
7720: PUSH
7721: LD_VAR 0 8
7725: PUSH
7726: FOR_IN
7727: IFFALSE 7940
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7729: LD_ADDR_VAR 0 9
7733: PUSH
7734: LD_INT 81
7736: PUSH
7737: LD_VAR 0 1
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 101
7748: PUSH
7749: LD_INT 1
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PPUSH
7760: CALL_OW 69
7764: PUSH
7765: LD_EXP 45
7769: DIFF
7770: PPUSH
7771: LD_VAR 0 7
7775: PPUSH
7776: CALL_OW 74
7780: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7781: LD_ADDR_VAR 0 10
7785: PUSH
7786: LD_INT 81
7788: PUSH
7789: LD_VAR 0 1
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 101
7800: PUSH
7801: LD_INT 1
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_INT 2
7810: PUSH
7811: LD_INT 59
7813: PUSH
7814: EMPTY
7815: LIST
7816: PUSH
7817: LD_INT 21
7819: PUSH
7820: LD_INT 1
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: PUSH
7827: LD_INT 21
7829: PUSH
7830: LD_INT 2
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: PUSH
7856: LD_EXP 45
7860: DIFF
7861: PPUSH
7862: LD_VAR 0 7
7866: PPUSH
7867: CALL_OW 74
7871: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7872: LD_VAR 0 7
7876: PPUSH
7877: LD_VAR 0 9
7881: PPUSH
7882: CALL_OW 296
7886: PUSH
7887: LD_INT 8
7889: PLUS
7890: PUSH
7891: LD_VAR 0 7
7895: PPUSH
7896: LD_VAR 0 10
7900: PPUSH
7901: CALL_OW 296
7905: LESS
7906: IFFALSE 7924
// ComAttackUnit ( j , target1 ) else
7908: LD_VAR 0 7
7912: PPUSH
7913: LD_VAR 0 9
7917: PPUSH
7918: CALL_OW 115
7922: GO 7938
// ComAttackUnit ( j , target2 ) ;
7924: LD_VAR 0 7
7928: PPUSH
7929: LD_VAR 0 10
7933: PPUSH
7934: CALL_OW 115
// end ;
7938: GO 7726
7940: POP
7941: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7942: LD_INT 22
7944: PUSH
7945: LD_VAR 0 1
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PUSH
7954: LD_INT 21
7956: PUSH
7957: LD_INT 2
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 24
7966: PUSH
7967: LD_INT 1000
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 3
7976: PUSH
7977: LD_INT 58
7979: PUSH
7980: EMPTY
7981: LIST
7982: PUSH
7983: LD_INT 2
7985: PUSH
7986: LD_INT 34
7988: PUSH
7989: LD_INT 43
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: PUSH
7996: LD_INT 34
7998: PUSH
7999: LD_INT 44
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 34
8008: PUSH
8009: LD_INT 46
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: EMPTY
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: LIST
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: PPUSH
8033: CALL_OW 69
8037: PUSH
8038: LD_INT 0
8040: EQUAL
8041: IFFALSE 7709
// seeEnemy = 0 ;
8043: LD_ADDR_VAR 0 11
8047: PUSH
8048: LD_INT 0
8050: ST_TO_ADDR
// end ;
8051: LD_VAR 0 5
8055: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8056: LD_INT 0
8058: PPUSH
8059: PPUSH
8060: PPUSH
8061: PPUSH
8062: PPUSH
8063: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8064: LD_ADDR_VAR 0 8
8068: PUSH
8069: LD_VAR 0 2
8073: PPUSH
8074: CALL_OW 313
8078: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8079: LD_ADDR_VAR 0 9
8083: PUSH
8084: LD_VAR 0 3
8088: PPUSH
8089: LD_INT 22
8091: PUSH
8092: LD_VAR 0 1
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 25
8103: PUSH
8104: LD_INT 2
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 24
8113: PUSH
8114: LD_INT 750
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PUSH
8121: LD_INT 3
8123: PUSH
8124: LD_INT 54
8126: PUSH
8127: EMPTY
8128: LIST
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: PPUSH
8140: CALL_OW 70
8144: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8145: LD_ADDR_VAR 0 6
8149: PUSH
8150: LD_VAR 0 3
8154: PPUSH
8155: LD_INT 22
8157: PUSH
8158: LD_VAR 0 1
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PUSH
8167: LD_INT 21
8169: PUSH
8170: LD_INT 3
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 3
8179: PUSH
8180: LD_INT 24
8182: PUSH
8183: LD_INT 1000
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: EMPTY
8200: LIST
8201: PPUSH
8202: CALL_OW 70
8206: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8207: LD_VAR 0 6
8211: NOT
8212: PUSH
8213: LD_INT 22
8215: PUSH
8216: LD_VAR 0 1
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 25
8227: PUSH
8228: LD_INT 2
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: LD_INT 250
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: PPUSH
8250: CALL_OW 69
8254: NOT
8255: AND
8256: IFFALSE 8260
// exit ;
8258: GO 8442
// if buildings_list > 0 and engineerOkInside then
8260: LD_VAR 0 6
8264: PUSH
8265: LD_INT 0
8267: GREATER
8268: PUSH
8269: LD_VAR 0 8
8273: AND
8274: IFFALSE 8285
// ComExitBuilding ( engineerOkInside ) ;
8276: LD_VAR 0 8
8280: PPUSH
8281: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8285: LD_VAR 0 6
8289: PUSH
8290: LD_INT 0
8292: GREATER
8293: PUSH
8294: LD_VAR 0 9
8298: PUSH
8299: LD_INT 0
8301: GREATER
8302: AND
8303: IFFALSE 8323
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8305: LD_VAR 0 9
8309: PPUSH
8310: LD_VAR 0 6
8314: PUSH
8315: LD_INT 1
8317: ARRAY
8318: PPUSH
8319: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8323: LD_VAR 0 6
8327: PUSH
8328: LD_INT 0
8330: EQUAL
8331: PUSH
8332: LD_VAR 0 4
8336: PUSH
8337: LD_INT 0
8339: EQUAL
8340: AND
8341: PUSH
8342: LD_VAR 0 9
8346: PUSH
8347: LD_INT 0
8349: GREATER
8350: AND
8351: IFFALSE 8367
// ComEnterUnit ( engineerOkOutside , building ) ;
8353: LD_VAR 0 9
8357: PPUSH
8358: LD_VAR 0 2
8362: PPUSH
8363: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8367: LD_VAR 0 9
8371: PUSH
8372: LD_INT 0
8374: GREATER
8375: PUSH
8376: LD_VAR 0 6
8380: PUSH
8381: LD_INT 0
8383: EQUAL
8384: AND
8385: PUSH
8386: LD_VAR 0 4
8390: PUSH
8391: LD_INT 0
8393: GREATER
8394: AND
8395: IFFALSE 8442
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8397: LD_VAR 0 9
8401: PPUSH
8402: LD_VAR 0 4
8406: PUSH
8407: LD_INT 1
8409: ARRAY
8410: PPUSH
8411: LD_VAR 0 4
8415: PUSH
8416: LD_INT 2
8418: ARRAY
8419: PPUSH
8420: LD_VAR 0 4
8424: PUSH
8425: LD_INT 3
8427: ARRAY
8428: PPUSH
8429: LD_VAR 0 4
8433: PUSH
8434: LD_INT 4
8436: ARRAY
8437: PPUSH
8438: CALL_OW 145
// end ;
8442: LD_VAR 0 5
8446: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8447: LD_INT 0
8449: PPUSH
8450: PPUSH
8451: PPUSH
8452: PPUSH
8453: PPUSH
8454: PPUSH
8455: PPUSH
8456: PPUSH
8457: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8458: LD_ADDR_VAR 0 6
8462: PUSH
8463: LD_INT 22
8465: PUSH
8466: LD_VAR 0 1
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 25
8477: PUSH
8478: LD_INT 4
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 23
8487: PUSH
8488: LD_INT 2
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PUSH
8495: LD_INT 24
8497: PUSH
8498: LD_INT 251
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: PPUSH
8511: CALL_OW 69
8515: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8516: LD_ADDR_VAR 0 7
8520: PUSH
8521: LD_VAR 0 3
8525: PPUSH
8526: LD_INT 22
8528: PUSH
8529: LD_VAR 0 1
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 23
8540: PUSH
8541: LD_INT 2
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: LD_INT 25
8550: PUSH
8551: LD_INT 4
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: LD_INT 50
8560: PUSH
8561: EMPTY
8562: LIST
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: PPUSH
8570: CALL_OW 70
8574: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8575: LD_ADDR_VAR 0 10
8579: PUSH
8580: LD_VAR 0 3
8584: PPUSH
8585: LD_INT 22
8587: PUSH
8588: LD_VAR 0 1
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: PUSH
8597: LD_INT 21
8599: PUSH
8600: LD_INT 1
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PUSH
8607: LD_INT 3
8609: PUSH
8610: LD_INT 25
8612: PUSH
8613: LD_INT 3
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 3
8626: PUSH
8627: LD_INT 24
8629: PUSH
8630: LD_INT 750
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: PPUSH
8647: CALL_OW 70
8651: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8652: LD_ADDR_VAR 0 11
8656: PUSH
8657: LD_VAR 0 2
8661: PPUSH
8662: LD_INT 22
8664: PUSH
8665: LD_VAR 0 1
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 21
8676: PUSH
8677: LD_INT 1
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 3
8686: PUSH
8687: LD_INT 25
8689: PUSH
8690: LD_INT 3
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: LD_INT 3
8703: PUSH
8704: LD_INT 24
8706: PUSH
8707: LD_INT 1000
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: PPUSH
8724: CALL_OW 70
8728: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8729: LD_VAR 0 10
8733: NOT
8734: PUSH
8735: LD_VAR 0 11
8739: NOT
8740: AND
8741: PUSH
8742: LD_VAR 0 6
8746: NOT
8747: AND
8748: IFFALSE 8752
// exit ;
8750: GO 8986
// if damageUnits > 0 and sci_list > 0 then
8752: LD_VAR 0 10
8756: PUSH
8757: LD_INT 0
8759: GREATER
8760: PUSH
8761: LD_VAR 0 6
8765: PUSH
8766: LD_INT 0
8768: GREATER
8769: AND
8770: IFFALSE 8786
// ComMoveToArea ( damageUnits , healArea ) ;
8772: LD_VAR 0 10
8776: PPUSH
8777: LD_VAR 0 2
8781: PPUSH
8782: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8786: LD_VAR 0 11
8790: PUSH
8791: LD_INT 0
8793: GREATER
8794: PUSH
8795: LD_VAR 0 6
8799: PUSH
8800: LD_INT 0
8802: GREATER
8803: AND
8804: IFFALSE 8815
// ComExitBuilding ( sci_list ) ;
8806: LD_VAR 0 6
8810: PPUSH
8811: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8815: LD_VAR 0 11
8819: PUSH
8820: LD_INT 0
8822: GREATER
8823: PUSH
8824: LD_VAR 0 7
8828: PUSH
8829: LD_INT 0
8831: GREATER
8832: AND
8833: IFFALSE 8853
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8835: LD_VAR 0 7
8839: PPUSH
8840: LD_VAR 0 11
8844: PUSH
8845: LD_INT 1
8847: ARRAY
8848: PPUSH
8849: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8853: LD_VAR 0 10
8857: PUSH
8858: LD_INT 0
8860: EQUAL
8861: PUSH
8862: LD_VAR 0 11
8866: PUSH
8867: LD_INT 0
8869: EQUAL
8870: AND
8871: PUSH
8872: LD_VAR 0 7
8876: PUSH
8877: LD_INT 0
8879: GREATER
8880: AND
8881: IFFALSE 8986
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8883: LD_ADDR_VAR 0 12
8887: PUSH
8888: LD_INT 22
8890: PUSH
8891: LD_VAR 0 1
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 21
8902: PUSH
8903: LD_INT 3
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 30
8912: PUSH
8913: LD_INT 8
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: LIST
8924: PPUSH
8925: CALL_OW 69
8929: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8930: LD_ADDR_VAR 0 13
8934: PUSH
8935: LD_INT 1
8937: PPUSH
8938: LD_VAR 0 12
8942: PPUSH
8943: CALL_OW 12
8947: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8948: LD_VAR 0 7
8952: PPUSH
8953: LD_INT 3
8955: PUSH
8956: LD_INT 60
8958: PUSH
8959: EMPTY
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PPUSH
8966: CALL_OW 72
8970: PPUSH
8971: LD_VAR 0 12
8975: PUSH
8976: LD_VAR 0 13
8980: ARRAY
8981: PPUSH
8982: CALL_OW 120
// end ; end ;
8986: LD_VAR 0 5
8990: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8991: LD_INT 0
8993: PPUSH
8994: PPUSH
8995: PPUSH
8996: PPUSH
// tmpTab = [ ] ;
8997: LD_ADDR_VAR 0 6
9001: PUSH
9002: EMPTY
9003: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9004: LD_INT 22
9006: PUSH
9007: LD_VAR 0 1
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: LD_INT 30
9018: PUSH
9019: LD_INT 32
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PUSH
9035: LD_INT 0
9037: GREATER
9038: IFFALSE 9121
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9040: LD_ADDR_VAR 0 4
9044: PUSH
9045: LD_INT 22
9047: PUSH
9048: LD_VAR 0 1
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PUSH
9057: LD_INT 30
9059: PUSH
9060: LD_INT 32
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PPUSH
9071: CALL_OW 69
9075: PUSH
9076: FOR_IN
9077: IFFALSE 9119
// begin for j in UnitsInside ( i ) do
9079: LD_ADDR_VAR 0 5
9083: PUSH
9084: LD_VAR 0 4
9088: PPUSH
9089: CALL_OW 313
9093: PUSH
9094: FOR_IN
9095: IFFALSE 9115
// tmpTab = tmpTab ^ j ;
9097: LD_ADDR_VAR 0 6
9101: PUSH
9102: LD_VAR 0 6
9106: PUSH
9107: LD_VAR 0 5
9111: ADD
9112: ST_TO_ADDR
9113: GO 9094
9115: POP
9116: POP
// end ;
9117: GO 9076
9119: POP
9120: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9121: LD_VAR 0 6
9125: PPUSH
9126: LD_VAR 0 2
9130: PPUSH
9131: CALL_OW 250
9135: PPUSH
9136: LD_VAR 0 2
9140: PPUSH
9141: CALL_OW 251
9145: PPUSH
9146: CALL_OW 114
// end ;
9150: LD_VAR 0 3
9154: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9155: LD_INT 0
9157: PPUSH
9158: PPUSH
9159: PPUSH
9160: PPUSH
// enable ;
9161: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9162: LD_ADDR_VAR 0 7
9166: PUSH
9167: LD_VAR 0 3
9171: PPUSH
9172: CALL_OW 435
9176: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9177: LD_ADDR_VAR 0 6
9181: PUSH
9182: LD_INT 22
9184: PUSH
9185: LD_VAR 0 1
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 34
9196: PUSH
9197: LD_VAR 0 2
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PPUSH
9210: CALL_OW 69
9214: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9215: LD_VAR 0 6
9219: PUSH
9220: LD_INT 0
9222: GREATER
9223: PUSH
9224: LD_VAR 0 3
9228: PPUSH
9229: CALL_OW 435
9233: AND
9234: PUSH
9235: LD_VAR 0 7
9239: PUSH
9240: LD_INT 0
9242: GREATER
9243: AND
9244: IFFALSE 9293
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9246: LD_VAR 0 6
9250: PUSH
9251: LD_INT 1
9253: ARRAY
9254: PPUSH
9255: LD_VAR 0 7
9259: PUSH
9260: LD_INT 1
9262: ARRAY
9263: PPUSH
9264: LD_VAR 0 7
9268: PUSH
9269: LD_INT 2
9271: ARRAY
9272: PPUSH
9273: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9277: LD_VAR 0 6
9281: PUSH
9282: LD_INT 1
9284: ARRAY
9285: PPUSH
9286: LD_INT 100
9288: PPUSH
9289: CALL_OW 240
// end ; end ;
9293: LD_VAR 0 4
9297: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9298: LD_INT 0
9300: PPUSH
9301: PPUSH
9302: PPUSH
9303: PPUSH
9304: PPUSH
9305: PPUSH
9306: PPUSH
9307: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9308: LD_ADDR_VAR 0 6
9312: PUSH
9313: LD_VAR 0 2
9317: PPUSH
9318: LD_INT 22
9320: PUSH
9321: LD_VAR 0 1
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 56
9332: PUSH
9333: EMPTY
9334: LIST
9335: PUSH
9336: LD_INT 24
9338: PUSH
9339: LD_INT 700
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 3
9348: PUSH
9349: LD_INT 60
9351: PUSH
9352: EMPTY
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 2
9361: PUSH
9362: LD_INT 25
9364: PUSH
9365: LD_INT 1
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: LD_INT 25
9374: PUSH
9375: LD_INT 5
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: PUSH
9382: LD_INT 25
9384: PUSH
9385: LD_INT 8
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: PUSH
9392: LD_INT 25
9394: PUSH
9395: LD_INT 9
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: PPUSH
9416: CALL_OW 70
9420: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9421: LD_ADDR_VAR 0 7
9425: PUSH
9426: LD_VAR 0 2
9430: PPUSH
9431: LD_INT 22
9433: PUSH
9434: LD_VAR 0 1
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 30
9445: PUSH
9446: LD_INT 32
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 58
9455: PUSH
9456: EMPTY
9457: LIST
9458: PUSH
9459: LD_INT 24
9461: PUSH
9462: LD_INT 251
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: PPUSH
9475: CALL_OW 70
9479: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9480: LD_ADDR_VAR 0 9
9484: PUSH
9485: LD_VAR 0 2
9489: PPUSH
9490: LD_INT 22
9492: PUSH
9493: LD_VAR 0 1
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PUSH
9502: LD_INT 2
9504: PUSH
9505: LD_INT 30
9507: PUSH
9508: LD_INT 4
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: PUSH
9515: LD_INT 30
9517: PUSH
9518: LD_INT 5
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 24
9532: PUSH
9533: LD_INT 251
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: LIST
9544: PPUSH
9545: CALL_OW 70
9549: ST_TO_ADDR
// if barrackList > 0 then
9550: LD_VAR 0 9
9554: PUSH
9555: LD_INT 0
9557: GREATER
9558: IFFALSE 9706
// begin if turretList = 0 then
9560: LD_VAR 0 7
9564: PUSH
9565: LD_INT 0
9567: EQUAL
9568: IFFALSE 9610
// begin if soldiers_list > 0 then
9570: LD_VAR 0 6
9574: PUSH
9575: LD_INT 0
9577: GREATER
9578: IFFALSE 9608
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9580: LD_VAR 0 6
9584: PPUSH
9585: LD_VAR 0 9
9589: PUSH
9590: LD_INT 1
9592: PPUSH
9593: LD_VAR 0 9
9597: PPUSH
9598: CALL_OW 12
9602: ARRAY
9603: PPUSH
9604: CALL_OW 120
// end else
9608: GO 9706
// begin for i in barrackList do
9610: LD_ADDR_VAR 0 4
9614: PUSH
9615: LD_VAR 0 9
9619: PUSH
9620: FOR_IN
9621: IFFALSE 9704
// begin insideUnits = UnitsInside ( i ) ;
9623: LD_ADDR_VAR 0 10
9627: PUSH
9628: LD_VAR 0 4
9632: PPUSH
9633: CALL_OW 313
9637: ST_TO_ADDR
// if insideUnits > 0 then
9638: LD_VAR 0 10
9642: PUSH
9643: LD_INT 0
9645: GREATER
9646: IFFALSE 9670
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9648: LD_VAR 0 10
9652: PUSH
9653: LD_INT 1
9655: ARRAY
9656: PPUSH
9657: LD_VAR 0 7
9661: PUSH
9662: LD_INT 1
9664: ARRAY
9665: PPUSH
9666: CALL_OW 120
// if soldiers_list > 0 then
9670: LD_VAR 0 6
9674: PUSH
9675: LD_INT 0
9677: GREATER
9678: IFFALSE 9702
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9680: LD_VAR 0 6
9684: PUSH
9685: LD_INT 1
9687: ARRAY
9688: PPUSH
9689: LD_VAR 0 7
9693: PUSH
9694: LD_INT 1
9696: ARRAY
9697: PPUSH
9698: CALL_OW 120
// end ;
9702: GO 9620
9704: POP
9705: POP
// end ; end ; end ;
9706: LD_VAR 0 3
9710: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9711: LD_INT 0
9713: PPUSH
9714: PPUSH
9715: PPUSH
9716: PPUSH
9717: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9718: LD_ADDR_VAR 0 6
9722: PUSH
9723: LD_INT 22
9725: PUSH
9726: LD_VAR 0 1
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: LD_INT 2
9737: PUSH
9738: LD_INT 30
9740: PUSH
9741: LD_INT 31
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: LD_INT 30
9750: PUSH
9751: LD_INT 32
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 30
9760: PUSH
9761: LD_INT 33
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: LD_INT 30
9770: PUSH
9771: LD_INT 4
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PUSH
9778: LD_INT 30
9780: PUSH
9781: LD_INT 5
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PPUSH
9800: CALL_OW 69
9804: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9805: LD_ADDR_VAR 0 7
9809: PUSH
9810: LD_INT 22
9812: PUSH
9813: LD_VAR 0 2
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: PUSH
9822: LD_INT 21
9824: PUSH
9825: LD_INT 3
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: LD_INT 58
9834: PUSH
9835: EMPTY
9836: LIST
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: LIST
9842: PPUSH
9843: CALL_OW 69
9847: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9848: LD_VAR 0 6
9852: PUSH
9853: LD_INT 0
9855: GREATER
9856: PUSH
9857: LD_VAR 0 7
9861: PUSH
9862: LD_INT 0
9864: GREATER
9865: AND
9866: IFFALSE 9936
// begin for i in turretsList do
9868: LD_ADDR_VAR 0 4
9872: PUSH
9873: LD_VAR 0 6
9877: PUSH
9878: FOR_IN
9879: IFFALSE 9934
// begin for j in enemyBuildings do
9881: LD_ADDR_VAR 0 5
9885: PUSH
9886: LD_VAR 0 7
9890: PUSH
9891: FOR_IN
9892: IFFALSE 9930
// begin if GetDistUnits ( i , j ) < 20 then
9894: LD_VAR 0 4
9898: PPUSH
9899: LD_VAR 0 5
9903: PPUSH
9904: CALL_OW 296
9908: PUSH
9909: LD_INT 20
9911: LESS
9912: IFFALSE 9928
// begin ComAttackUnit ( i , j ) ;
9914: LD_VAR 0 4
9918: PPUSH
9919: LD_VAR 0 5
9923: PPUSH
9924: CALL_OW 115
// end ; end ;
9928: GO 9891
9930: POP
9931: POP
// end ;
9932: GO 9878
9934: POP
9935: POP
// end ; end ;
9936: LD_VAR 0 3
9940: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9941: LD_INT 0
9943: PPUSH
9944: PPUSH
9945: PPUSH
9946: PPUSH
9947: PPUSH
9948: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9949: LD_ADDR_VAR 0 8
9953: PUSH
9954: LD_INT 22
9956: PUSH
9957: LD_VAR 0 1
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 21
9968: PUSH
9969: LD_INT 2
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 34
9978: PUSH
9979: LD_INT 52
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: PPUSH
9991: CALL_OW 69
9995: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9996: LD_ADDR_VAR 0 9
10000: PUSH
10001: LD_INT 22
10003: PUSH
10004: LD_VAR 0 1
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: LD_INT 21
10015: PUSH
10016: LD_INT 3
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 3
10025: PUSH
10026: LD_INT 24
10028: PUSH
10029: LD_INT 1000
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10053: LD_VAR 0 9
10057: PUSH
10058: LD_INT 0
10060: GREATER
10061: PUSH
10062: LD_VAR 0 8
10066: PPUSH
10067: LD_INT 24
10069: PUSH
10070: LD_INT 750
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PPUSH
10077: CALL_OW 72
10081: PUSH
10082: LD_INT 0
10084: GREATER
10085: AND
10086: IFFALSE 10121
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10088: LD_VAR 0 8
10092: PPUSH
10093: LD_INT 24
10095: PUSH
10096: LD_INT 750
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PPUSH
10103: CALL_OW 72
10107: PPUSH
10108: LD_VAR 0 9
10112: PUSH
10113: LD_INT 1
10115: ARRAY
10116: PPUSH
10117: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10121: LD_VAR 0 8
10125: PPUSH
10126: LD_INT 3
10128: PUSH
10129: LD_INT 24
10131: PUSH
10132: LD_INT 750
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PPUSH
10143: CALL_OW 72
10147: PUSH
10148: LD_INT 0
10150: GREATER
10151: IFFALSE 10189
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10153: LD_VAR 0 8
10157: PPUSH
10158: LD_INT 3
10160: PUSH
10161: LD_INT 24
10163: PUSH
10164: LD_INT 750
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PPUSH
10175: CALL_OW 72
10179: PPUSH
10180: LD_VAR 0 2
10184: PPUSH
10185: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10189: LD_VAR 0 8
10193: PUSH
10194: LD_INT 0
10196: GREATER
10197: PUSH
10198: LD_VAR 0 9
10202: PUSH
10203: LD_INT 0
10205: EQUAL
10206: AND
10207: PUSH
10208: LD_VAR 0 3
10212: PUSH
10213: LD_INT 0
10215: GREATER
10216: AND
10217: IFFALSE 10264
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10219: LD_VAR 0 8
10223: PPUSH
10224: LD_VAR 0 3
10228: PUSH
10229: LD_INT 1
10231: ARRAY
10232: PPUSH
10233: LD_VAR 0 3
10237: PUSH
10238: LD_INT 2
10240: ARRAY
10241: PPUSH
10242: LD_VAR 0 3
10246: PUSH
10247: LD_INT 3
10249: ARRAY
10250: PPUSH
10251: LD_VAR 0 3
10255: PUSH
10256: LD_INT 4
10258: ARRAY
10259: PPUSH
10260: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10264: LD_VAR 0 2
10268: PPUSH
10269: LD_INT 22
10271: PUSH
10272: LD_VAR 0 1
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 21
10283: PUSH
10284: LD_INT 2
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PUSH
10291: LD_INT 34
10293: PUSH
10294: LD_INT 52
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 3
10303: PUSH
10304: LD_INT 24
10306: PUSH
10307: LD_INT 750
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: PPUSH
10324: CALL_OW 70
10328: PUSH
10329: LD_INT 0
10331: GREATER
10332: IFFALSE 10534
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10334: LD_ADDR_VAR 0 5
10338: PUSH
10339: LD_VAR 0 2
10343: PPUSH
10344: LD_INT 22
10346: PUSH
10347: LD_VAR 0 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 21
10358: PUSH
10359: LD_INT 2
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 34
10368: PUSH
10369: LD_INT 52
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 3
10378: PUSH
10379: LD_INT 24
10381: PUSH
10382: LD_INT 750
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PPUSH
10399: CALL_OW 70
10403: PUSH
10404: FOR_IN
10405: IFFALSE 10532
// begin mechTmp = UnitsInside ( i ) ;
10407: LD_ADDR_VAR 0 6
10411: PUSH
10412: LD_VAR 0 5
10416: PPUSH
10417: CALL_OW 313
10421: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10422: LD_VAR 0 6
10426: PPUSH
10427: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10431: LD_VAR 0 6
10435: PPUSH
10436: LD_VAR 0 7
10440: PPUSH
10441: CALL_OW 189
// wait ( 0 0$2 ) ;
10445: LD_INT 70
10447: PPUSH
10448: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10452: LD_VAR 0 6
10456: PPUSH
10457: LD_VAR 0 2
10461: PPUSH
10462: LD_INT 22
10464: PUSH
10465: LD_VAR 0 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 21
10476: PUSH
10477: LD_INT 2
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 34
10486: PUSH
10487: LD_INT 52
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 24
10496: PUSH
10497: LD_INT 1000
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 58
10506: PUSH
10507: EMPTY
10508: LIST
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: PPUSH
10517: CALL_OW 70
10521: PUSH
10522: LD_INT 1
10524: ARRAY
10525: PPUSH
10526: CALL_OW 180
// end ;
10530: GO 10404
10532: POP
10533: POP
// end ; end ;
10534: LD_VAR 0 4
10538: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10539: LD_INT 0
10541: PPUSH
10542: PPUSH
10543: PPUSH
10544: PPUSH
10545: PPUSH
10546: PPUSH
10547: PPUSH
10548: PPUSH
10549: PPUSH
10550: PPUSH
10551: PPUSH
// for i = 1 to medicCount do
10552: LD_ADDR_VAR 0 14
10556: PUSH
10557: DOUBLE
10558: LD_INT 1
10560: DEC
10561: ST_TO_ADDR
10562: LD_VAR 0 7
10566: PUSH
10567: FOR_TO
10568: IFFALSE 10650
// begin uc_side = side ;
10570: LD_ADDR_OWVAR 20
10574: PUSH
10575: LD_VAR 0 1
10579: ST_TO_ADDR
// uc_nation = nation ;
10580: LD_ADDR_OWVAR 21
10584: PUSH
10585: LD_VAR 0 2
10589: ST_TO_ADDR
// hc_name =  ;
10590: LD_ADDR_OWVAR 26
10594: PUSH
10595: LD_STRING 
10597: ST_TO_ADDR
// hc_gallery =  ;
10598: LD_ADDR_OWVAR 33
10602: PUSH
10603: LD_STRING 
10605: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10606: LD_INT 0
10608: PPUSH
10609: LD_INT 4
10611: PPUSH
10612: LD_VAR 0 8
10616: PPUSH
10617: CALL_OW 380
// un = CreateHuman ;
10621: LD_ADDR_VAR 0 16
10625: PUSH
10626: CALL_OW 44
10630: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10631: LD_VAR 0 16
10635: PPUSH
10636: LD_VAR 0 9
10640: PPUSH
10641: LD_INT 0
10643: PPUSH
10644: CALL_OW 49
// end ;
10648: GO 10567
10650: POP
10651: POP
// for i = 1 to soldierCount do
10652: LD_ADDR_VAR 0 14
10656: PUSH
10657: DOUBLE
10658: LD_INT 1
10660: DEC
10661: ST_TO_ADDR
10662: LD_VAR 0 3
10666: PUSH
10667: FOR_TO
10668: IFFALSE 10750
// begin uc_side = side ;
10670: LD_ADDR_OWVAR 20
10674: PUSH
10675: LD_VAR 0 1
10679: ST_TO_ADDR
// uc_nation = nation ;
10680: LD_ADDR_OWVAR 21
10684: PUSH
10685: LD_VAR 0 2
10689: ST_TO_ADDR
// hc_name =  ;
10690: LD_ADDR_OWVAR 26
10694: PUSH
10695: LD_STRING 
10697: ST_TO_ADDR
// hc_gallery =  ;
10698: LD_ADDR_OWVAR 33
10702: PUSH
10703: LD_STRING 
10705: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10706: LD_INT 0
10708: PPUSH
10709: LD_INT 1
10711: PPUSH
10712: LD_VAR 0 8
10716: PPUSH
10717: CALL_OW 380
// un = CreateHuman ;
10721: LD_ADDR_VAR 0 16
10725: PUSH
10726: CALL_OW 44
10730: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10731: LD_VAR 0 16
10735: PPUSH
10736: LD_VAR 0 9
10740: PPUSH
10741: LD_INT 0
10743: PPUSH
10744: CALL_OW 49
// end ;
10748: GO 10667
10750: POP
10751: POP
// for i = 1 to sniperCount do
10752: LD_ADDR_VAR 0 14
10756: PUSH
10757: DOUBLE
10758: LD_INT 1
10760: DEC
10761: ST_TO_ADDR
10762: LD_VAR 0 4
10766: PUSH
10767: FOR_TO
10768: IFFALSE 10850
// begin uc_side = side ;
10770: LD_ADDR_OWVAR 20
10774: PUSH
10775: LD_VAR 0 1
10779: ST_TO_ADDR
// uc_nation = nation ;
10780: LD_ADDR_OWVAR 21
10784: PUSH
10785: LD_VAR 0 2
10789: ST_TO_ADDR
// hc_name =  ;
10790: LD_ADDR_OWVAR 26
10794: PUSH
10795: LD_STRING 
10797: ST_TO_ADDR
// hc_gallery =  ;
10798: LD_ADDR_OWVAR 33
10802: PUSH
10803: LD_STRING 
10805: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10806: LD_INT 0
10808: PPUSH
10809: LD_INT 5
10811: PPUSH
10812: LD_VAR 0 8
10816: PPUSH
10817: CALL_OW 380
// un = CreateHuman ;
10821: LD_ADDR_VAR 0 16
10825: PUSH
10826: CALL_OW 44
10830: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10831: LD_VAR 0 16
10835: PPUSH
10836: LD_VAR 0 9
10840: PPUSH
10841: LD_INT 0
10843: PPUSH
10844: CALL_OW 49
// end ;
10848: GO 10767
10850: POP
10851: POP
// for i = 1 to bazookCount do
10852: LD_ADDR_VAR 0 14
10856: PUSH
10857: DOUBLE
10858: LD_INT 1
10860: DEC
10861: ST_TO_ADDR
10862: LD_VAR 0 5
10866: PUSH
10867: FOR_TO
10868: IFFALSE 10950
// begin uc_side = side ;
10870: LD_ADDR_OWVAR 20
10874: PUSH
10875: LD_VAR 0 1
10879: ST_TO_ADDR
// uc_nation = nation ;
10880: LD_ADDR_OWVAR 21
10884: PUSH
10885: LD_VAR 0 2
10889: ST_TO_ADDR
// hc_name =  ;
10890: LD_ADDR_OWVAR 26
10894: PUSH
10895: LD_STRING 
10897: ST_TO_ADDR
// hc_gallery =  ;
10898: LD_ADDR_OWVAR 33
10902: PUSH
10903: LD_STRING 
10905: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10906: LD_INT 0
10908: PPUSH
10909: LD_INT 9
10911: PPUSH
10912: LD_VAR 0 8
10916: PPUSH
10917: CALL_OW 380
// un = CreateHuman ;
10921: LD_ADDR_VAR 0 16
10925: PUSH
10926: CALL_OW 44
10930: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10931: LD_VAR 0 16
10935: PPUSH
10936: LD_VAR 0 9
10940: PPUSH
10941: LD_INT 0
10943: PPUSH
10944: CALL_OW 49
// end ;
10948: GO 10867
10950: POP
10951: POP
// for i = 1 to mortalCount do
10952: LD_ADDR_VAR 0 14
10956: PUSH
10957: DOUBLE
10958: LD_INT 1
10960: DEC
10961: ST_TO_ADDR
10962: LD_VAR 0 6
10966: PUSH
10967: FOR_TO
10968: IFFALSE 11050
// begin uc_side = side ;
10970: LD_ADDR_OWVAR 20
10974: PUSH
10975: LD_VAR 0 1
10979: ST_TO_ADDR
// uc_nation = nation ;
10980: LD_ADDR_OWVAR 21
10984: PUSH
10985: LD_VAR 0 2
10989: ST_TO_ADDR
// hc_name =  ;
10990: LD_ADDR_OWVAR 26
10994: PUSH
10995: LD_STRING 
10997: ST_TO_ADDR
// hc_gallery =  ;
10998: LD_ADDR_OWVAR 33
11002: PUSH
11003: LD_STRING 
11005: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11006: LD_INT 0
11008: PPUSH
11009: LD_INT 8
11011: PPUSH
11012: LD_VAR 0 8
11016: PPUSH
11017: CALL_OW 380
// un = CreateHuman ;
11021: LD_ADDR_VAR 0 16
11025: PUSH
11026: CALL_OW 44
11030: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11031: LD_VAR 0 16
11035: PPUSH
11036: LD_VAR 0 9
11040: PPUSH
11041: LD_INT 0
11043: PPUSH
11044: CALL_OW 49
// end ;
11048: GO 10967
11050: POP
11051: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11052: LD_ADDR_VAR 0 19
11056: PUSH
11057: LD_INT 22
11059: PUSH
11060: LD_VAR 0 1
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 2
11071: PUSH
11072: LD_INT 25
11074: PUSH
11075: LD_INT 1
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 25
11084: PUSH
11085: LD_INT 5
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: LD_INT 25
11094: PUSH
11095: LD_INT 8
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 25
11104: PUSH
11105: LD_INT 9
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PPUSH
11123: CALL_OW 69
11127: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11128: LD_ADDR_VAR 0 18
11132: PUSH
11133: LD_INT 22
11135: PUSH
11136: LD_VAR 0 1
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: LD_INT 25
11147: PUSH
11148: LD_INT 4
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PPUSH
11159: CALL_OW 69
11163: ST_TO_ADDR
// for i in medic_list do
11164: LD_ADDR_VAR 0 14
11168: PUSH
11169: LD_VAR 0 18
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11193
// ComMoveToArea ( i , healArea ) ;
11177: LD_VAR 0 14
11181: PPUSH
11182: LD_VAR 0 10
11186: PPUSH
11187: CALL_OW 113
11191: GO 11174
11193: POP
11194: POP
// if strategy = 1 then
11195: LD_VAR 0 12
11199: PUSH
11200: LD_INT 1
11202: EQUAL
11203: IFFALSE 11920
// begin repeat wait ( 0 0$3 ) ;
11205: LD_INT 105
11207: PPUSH
11208: CALL_OW 67
// for i in soldiersOK_list do
11212: LD_ADDR_VAR 0 14
11216: PUSH
11217: LD_VAR 0 19
11221: PUSH
11222: FOR_IN
11223: IFFALSE 11257
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11225: LD_VAR 0 14
11229: PPUSH
11230: LD_INT 80
11232: PPUSH
11233: LD_INT 109
11235: PPUSH
11236: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11240: LD_VAR 0 14
11244: PPUSH
11245: LD_INT 39
11247: PPUSH
11248: LD_INT 49
11250: PPUSH
11251: CALL_OW 174
// end ;
11255: GO 11222
11257: POP
11258: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11259: LD_INT 13
11261: PPUSH
11262: LD_INT 22
11264: PUSH
11265: LD_VAR 0 1
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PPUSH
11274: CALL_OW 70
11278: PUSH
11279: LD_INT 0
11281: GREATER
11282: IFFALSE 11205
// repeat wait ( 0 0$1 ) ;
11284: LD_INT 35
11286: PPUSH
11287: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11291: LD_ADDR_VAR 0 17
11295: PUSH
11296: LD_INT 22
11298: PUSH
11299: LD_VAR 0 1
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 1
11310: PUSH
11311: LD_INT 3
11313: PUSH
11314: LD_INT 24
11316: PUSH
11317: LD_INT 550
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 24
11330: PUSH
11331: LD_INT 250
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: LIST
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PPUSH
11347: CALL_OW 69
11351: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11352: LD_ADDR_VAR 0 19
11356: PUSH
11357: LD_INT 22
11359: PUSH
11360: LD_VAR 0 1
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PUSH
11369: LD_INT 2
11371: PUSH
11372: LD_INT 25
11374: PUSH
11375: LD_INT 1
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 25
11384: PUSH
11385: LD_INT 5
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 25
11394: PUSH
11395: LD_INT 8
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 25
11404: PUSH
11405: LD_INT 9
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: PUSH
11419: LD_INT 24
11421: PUSH
11422: LD_INT 1000
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: PPUSH
11434: CALL_OW 69
11438: ST_TO_ADDR
// if medicCount > 0 then
11439: LD_VAR 0 7
11443: PUSH
11444: LD_INT 0
11446: GREATER
11447: IFFALSE 11521
// begin if damageUnit_list > 0 then
11449: LD_VAR 0 17
11453: PUSH
11454: LD_INT 0
11456: GREATER
11457: IFFALSE 11521
// begin for i in damageUnit_list do
11459: LD_ADDR_VAR 0 14
11463: PUSH
11464: LD_VAR 0 17
11468: PUSH
11469: FOR_IN
11470: IFFALSE 11519
// begin ComMoveToArea ( i , healArea ) ;
11472: LD_VAR 0 14
11476: PPUSH
11477: LD_VAR 0 10
11481: PPUSH
11482: CALL_OW 113
// for j in medic_list do
11486: LD_ADDR_VAR 0 15
11490: PUSH
11491: LD_VAR 0 18
11495: PUSH
11496: FOR_IN
11497: IFFALSE 11515
// AddComHeal ( j , i ) ;
11499: LD_VAR 0 15
11503: PPUSH
11504: LD_VAR 0 14
11508: PPUSH
11509: CALL_OW 188
11513: GO 11496
11515: POP
11516: POP
// end ;
11517: GO 11469
11519: POP
11520: POP
// end ; end ; for i in soldiersOK_list do
11521: LD_ADDR_VAR 0 14
11525: PUSH
11526: LD_VAR 0 19
11530: PUSH
11531: FOR_IN
11532: IFFALSE 11714
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11534: LD_ADDR_VAR 0 22
11538: PUSH
11539: LD_INT 22
11541: PUSH
11542: LD_VAR 0 11
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PPUSH
11551: CALL_OW 69
11555: PUSH
11556: LD_EXP 45
11560: DIFF
11561: PPUSH
11562: LD_VAR 0 14
11566: PPUSH
11567: CALL_OW 74
11571: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11572: LD_ADDR_VAR 0 23
11576: PUSH
11577: LD_INT 22
11579: PUSH
11580: LD_VAR 0 11
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 2
11591: PUSH
11592: LD_INT 59
11594: PUSH
11595: EMPTY
11596: LIST
11597: PUSH
11598: LD_INT 21
11600: PUSH
11601: LD_INT 1
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 21
11610: PUSH
11611: LD_INT 2
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: PPUSH
11631: CALL_OW 69
11635: PPUSH
11636: LD_VAR 0 14
11640: PPUSH
11641: CALL_OW 74
11645: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11646: LD_VAR 0 14
11650: PPUSH
11651: LD_VAR 0 22
11655: PPUSH
11656: CALL_OW 296
11660: PUSH
11661: LD_INT 8
11663: PLUS
11664: PUSH
11665: LD_VAR 0 14
11669: PPUSH
11670: LD_VAR 0 23
11674: PPUSH
11675: CALL_OW 296
11679: LESS
11680: IFFALSE 11698
// begin ComAttackUnit ( i , target1 ) ;
11682: LD_VAR 0 14
11686: PPUSH
11687: LD_VAR 0 22
11691: PPUSH
11692: CALL_OW 115
// end else
11696: GO 11712
// begin ComAttackUnit ( i , target2 ) ;
11698: LD_VAR 0 14
11702: PPUSH
11703: LD_VAR 0 23
11707: PPUSH
11708: CALL_OW 115
// end ; end ;
11712: GO 11531
11714: POP
11715: POP
// for i in soldiersOK_list do
11716: LD_ADDR_VAR 0 14
11720: PUSH
11721: LD_VAR 0 19
11725: PUSH
11726: FOR_IN
11727: IFFALSE 11909
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11729: LD_ADDR_VAR 0 22
11733: PUSH
11734: LD_INT 22
11736: PUSH
11737: LD_VAR 0 11
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PPUSH
11746: CALL_OW 69
11750: PUSH
11751: LD_EXP 45
11755: DIFF
11756: PPUSH
11757: LD_VAR 0 14
11761: PPUSH
11762: CALL_OW 74
11766: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11767: LD_ADDR_VAR 0 23
11771: PUSH
11772: LD_INT 22
11774: PUSH
11775: LD_VAR 0 11
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 2
11786: PUSH
11787: LD_INT 59
11789: PUSH
11790: EMPTY
11791: LIST
11792: PUSH
11793: LD_INT 21
11795: PUSH
11796: LD_INT 1
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: PUSH
11803: LD_INT 21
11805: PUSH
11806: LD_INT 2
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: EMPTY
11824: LIST
11825: PPUSH
11826: CALL_OW 69
11830: PPUSH
11831: LD_VAR 0 14
11835: PPUSH
11836: CALL_OW 74
11840: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11841: LD_VAR 0 14
11845: PPUSH
11846: LD_VAR 0 22
11850: PPUSH
11851: CALL_OW 296
11855: PUSH
11856: LD_INT 8
11858: PLUS
11859: PUSH
11860: LD_VAR 0 14
11864: PPUSH
11865: LD_VAR 0 23
11869: PPUSH
11870: CALL_OW 296
11874: LESS
11875: IFFALSE 11893
// begin ComAttackUnit ( i , target1 ) ;
11877: LD_VAR 0 14
11881: PPUSH
11882: LD_VAR 0 22
11886: PPUSH
11887: CALL_OW 115
// end else
11891: GO 11907
// begin ComAttackUnit ( i , target2 ) ;
11893: LD_VAR 0 14
11897: PPUSH
11898: LD_VAR 0 23
11902: PPUSH
11903: CALL_OW 115
// end ; end ;
11907: GO 11726
11909: POP
11910: POP
// until soldiersOK_list = [ ] ;
11911: LD_VAR 0 19
11915: PUSH
11916: EMPTY
11917: EQUAL
11918: IFFALSE 11284
// end ; if strategy = 2 then
11920: LD_VAR 0 12
11924: PUSH
11925: LD_INT 2
11927: EQUAL
11928: IFFALSE 12633
// begin repeat wait ( 0 0$1 ) ;
11930: LD_INT 35
11932: PPUSH
11933: CALL_OW 67
// for i in soldiersOK_list do
11937: LD_ADDR_VAR 0 14
11941: PUSH
11942: LD_VAR 0 19
11946: PUSH
11947: FOR_IN
11948: IFFALSE 11982
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11950: LD_VAR 0 14
11954: PPUSH
11955: LD_INT 117
11957: PPUSH
11958: LD_INT 97
11960: PPUSH
11961: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11965: LD_VAR 0 14
11969: PPUSH
11970: LD_INT 94
11972: PPUSH
11973: LD_INT 50
11975: PPUSH
11976: CALL_OW 174
// end ;
11980: GO 11947
11982: POP
11983: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11984: LD_INT 14
11986: PPUSH
11987: LD_INT 22
11989: PUSH
11990: LD_VAR 0 1
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PPUSH
11999: CALL_OW 70
12003: PUSH
12004: LD_INT 0
12006: GREATER
12007: IFFALSE 11930
// repeat wait ( 0 0$3 ) ;
12009: LD_INT 105
12011: PPUSH
12012: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12016: LD_ADDR_VAR 0 17
12020: PUSH
12021: LD_INT 22
12023: PUSH
12024: LD_VAR 0 1
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 1
12035: PUSH
12036: LD_INT 3
12038: PUSH
12039: LD_INT 24
12041: PUSH
12042: LD_INT 550
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 24
12055: PUSH
12056: LD_INT 250
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PPUSH
12072: CALL_OW 69
12076: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12077: LD_ADDR_VAR 0 19
12081: PUSH
12082: LD_INT 22
12084: PUSH
12085: LD_VAR 0 1
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: PUSH
12094: LD_INT 2
12096: PUSH
12097: LD_INT 25
12099: PUSH
12100: LD_INT 1
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PUSH
12107: LD_INT 25
12109: PUSH
12110: LD_INT 5
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 25
12119: PUSH
12120: LD_INT 8
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 25
12129: PUSH
12130: LD_INT 9
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: PUSH
12144: LD_INT 24
12146: PUSH
12147: LD_INT 1000
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: PPUSH
12159: CALL_OW 69
12163: ST_TO_ADDR
// if medicCount > 0 then
12164: LD_VAR 0 7
12168: PUSH
12169: LD_INT 0
12171: GREATER
12172: IFFALSE 12246
// begin if damageUnit_list > 0 then
12174: LD_VAR 0 17
12178: PUSH
12179: LD_INT 0
12181: GREATER
12182: IFFALSE 12246
// begin for i in damageUnit_list do
12184: LD_ADDR_VAR 0 14
12188: PUSH
12189: LD_VAR 0 17
12193: PUSH
12194: FOR_IN
12195: IFFALSE 12244
// begin ComMoveToArea ( i , healArea ) ;
12197: LD_VAR 0 14
12201: PPUSH
12202: LD_VAR 0 10
12206: PPUSH
12207: CALL_OW 113
// for j in medic_list do
12211: LD_ADDR_VAR 0 15
12215: PUSH
12216: LD_VAR 0 18
12220: PUSH
12221: FOR_IN
12222: IFFALSE 12240
// AddComHeal ( j , i ) ;
12224: LD_VAR 0 15
12228: PPUSH
12229: LD_VAR 0 14
12233: PPUSH
12234: CALL_OW 188
12238: GO 12221
12240: POP
12241: POP
// end ;
12242: GO 12194
12244: POP
12245: POP
// end ; end ; for i in soldiersOK_list do
12246: LD_ADDR_VAR 0 14
12250: PUSH
12251: LD_VAR 0 19
12255: PUSH
12256: FOR_IN
12257: IFFALSE 12433
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12259: LD_ADDR_VAR 0 22
12263: PUSH
12264: LD_INT 22
12266: PUSH
12267: LD_VAR 0 11
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PPUSH
12276: CALL_OW 69
12280: PPUSH
12281: LD_VAR 0 14
12285: PPUSH
12286: CALL_OW 74
12290: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12291: LD_ADDR_VAR 0 23
12295: PUSH
12296: LD_INT 22
12298: PUSH
12299: LD_VAR 0 11
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: LD_INT 2
12310: PUSH
12311: LD_INT 59
12313: PUSH
12314: EMPTY
12315: LIST
12316: PUSH
12317: LD_INT 21
12319: PUSH
12320: LD_INT 1
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 21
12329: PUSH
12330: LD_INT 2
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: EMPTY
12348: LIST
12349: PPUSH
12350: CALL_OW 69
12354: PPUSH
12355: LD_VAR 0 14
12359: PPUSH
12360: CALL_OW 74
12364: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12365: LD_VAR 0 14
12369: PPUSH
12370: LD_VAR 0 22
12374: PPUSH
12375: CALL_OW 296
12379: PUSH
12380: LD_INT 8
12382: PLUS
12383: PUSH
12384: LD_VAR 0 14
12388: PPUSH
12389: LD_VAR 0 23
12393: PPUSH
12394: CALL_OW 296
12398: LESS
12399: IFFALSE 12417
// begin ComAttackUnit ( i , target1 ) ;
12401: LD_VAR 0 14
12405: PPUSH
12406: LD_VAR 0 22
12410: PPUSH
12411: CALL_OW 115
// end else
12415: GO 12431
// begin ComAttackUnit ( i , target2 ) ;
12417: LD_VAR 0 14
12421: PPUSH
12422: LD_VAR 0 23
12426: PPUSH
12427: CALL_OW 115
// end ; end ;
12431: GO 12256
12433: POP
12434: POP
// for i in soldiersOK_list do
12435: LD_ADDR_VAR 0 14
12439: PUSH
12440: LD_VAR 0 19
12444: PUSH
12445: FOR_IN
12446: IFFALSE 12622
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12448: LD_ADDR_VAR 0 22
12452: PUSH
12453: LD_INT 22
12455: PUSH
12456: LD_VAR 0 11
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PPUSH
12465: CALL_OW 69
12469: PPUSH
12470: LD_VAR 0 14
12474: PPUSH
12475: CALL_OW 74
12479: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12480: LD_ADDR_VAR 0 23
12484: PUSH
12485: LD_INT 22
12487: PUSH
12488: LD_VAR 0 11
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: LD_INT 2
12499: PUSH
12500: LD_INT 59
12502: PUSH
12503: EMPTY
12504: LIST
12505: PUSH
12506: LD_INT 21
12508: PUSH
12509: LD_INT 1
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 21
12518: PUSH
12519: LD_INT 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: EMPTY
12537: LIST
12538: PPUSH
12539: CALL_OW 69
12543: PPUSH
12544: LD_VAR 0 14
12548: PPUSH
12549: CALL_OW 74
12553: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12554: LD_VAR 0 14
12558: PPUSH
12559: LD_VAR 0 22
12563: PPUSH
12564: CALL_OW 296
12568: PUSH
12569: LD_INT 8
12571: PLUS
12572: PUSH
12573: LD_VAR 0 14
12577: PPUSH
12578: LD_VAR 0 23
12582: PPUSH
12583: CALL_OW 296
12587: LESS
12588: IFFALSE 12606
// begin ComAttackUnit ( i , target1 ) ;
12590: LD_VAR 0 14
12594: PPUSH
12595: LD_VAR 0 22
12599: PPUSH
12600: CALL_OW 115
// end else
12604: GO 12620
// begin ComAttackUnit ( i , target2 ) ;
12606: LD_VAR 0 14
12610: PPUSH
12611: LD_VAR 0 23
12615: PPUSH
12616: CALL_OW 115
// end ; end ;
12620: GO 12445
12622: POP
12623: POP
// until soldiersOK_list = [ ] ;
12624: LD_VAR 0 19
12628: PUSH
12629: EMPTY
12630: EQUAL
12631: IFFALSE 12009
// end ; end ; end_of_file
12633: LD_VAR 0 13
12637: RET
// every 0 0$01 do
12638: GO 12640
12640: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12641: LD_INT 22
12643: PUSH
12644: LD_INT 1
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: LD_INT 25
12653: PUSH
12654: LD_INT 2
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PPUSH
12665: CALL_OW 69
12669: PUSH
12670: LD_INT 0
12672: EQUAL
12673: IFFALSE 12687
// SetClass ( JMM , 2 ) ;
12675: LD_EXP 1
12679: PPUSH
12680: LD_INT 2
12682: PPUSH
12683: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12687: LD_STRING M1
12689: PPUSH
12690: CALL_OW 337
// case difficulty of 1 :
12694: LD_OWVAR 67
12698: PUSH
12699: LD_INT 1
12701: DOUBLE
12702: EQUAL
12703: IFTRUE 12707
12705: GO 12717
12707: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12708: LD_STRING M1-1
12710: PPUSH
12711: CALL_OW 337
12715: GO 12754
12717: LD_INT 2
12719: DOUBLE
12720: EQUAL
12721: IFTRUE 12725
12723: GO 12735
12725: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12726: LD_STRING M1-2
12728: PPUSH
12729: CALL_OW 337
12733: GO 12754
12735: LD_INT 3
12737: DOUBLE
12738: EQUAL
12739: IFTRUE 12743
12741: GO 12753
12743: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12744: LD_STRING M1-3
12746: PPUSH
12747: CALL_OW 337
12751: GO 12754
12753: POP
// ChangeMissionObjectives ( M1cont ) ;
12754: LD_STRING M1cont
12756: PPUSH
12757: CALL_OW 337
// SaveForQuickRestart ;
12761: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12765: LD_INT 525
12767: PPUSH
12768: LD_INT 700
12770: PPUSH
12771: CALL_OW 12
12775: PPUSH
12776: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12780: LD_INT 5
12782: PPUSH
12783: LD_INT 82
12785: PPUSH
12786: LD_INT 38
12788: PPUSH
12789: LD_INT 10
12791: PPUSH
12792: LD_INT 1
12794: PPUSH
12795: CALL_OW 56
// wait ( 0 0$14 ) ;
12799: LD_INT 490
12801: PPUSH
12802: CALL_OW 67
// firstCrateSpawn := true ;
12806: LD_ADDR_EXP 41
12810: PUSH
12811: LD_INT 1
12813: ST_TO_ADDR
// end ;
12814: END
// every 0 0$02 trigger firstCrateSpawn do
12815: LD_EXP 41
12819: IFFALSE 13182
12821: GO 12823
12823: DISABLE
// begin if IsOk ( Lisa ) then
12824: LD_EXP 2
12828: PPUSH
12829: CALL_OW 302
12833: IFFALSE 12849
// Say ( Lisa , DR0-Lisa-1 ) else
12835: LD_EXP 2
12839: PPUSH
12840: LD_STRING DR0-Lisa-1
12842: PPUSH
12843: CALL_OW 88
12847: GO 12995
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12849: LD_INT 22
12851: PUSH
12852: LD_INT 1
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PUSH
12859: LD_INT 21
12861: PUSH
12862: LD_INT 1
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: LD_INT 26
12871: PUSH
12872: LD_INT 1
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 2
12881: PUSH
12882: LD_INT 25
12884: PUSH
12885: LD_INT 1
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 25
12894: PUSH
12895: LD_INT 2
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 25
12904: PUSH
12905: LD_INT 3
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 25
12914: PUSH
12915: LD_INT 4
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: PPUSH
12935: CALL_OW 69
12939: PUSH
12940: LD_EXP 1
12944: PUSH
12945: LD_EXP 8
12949: PUSH
12950: LD_EXP 5
12954: PUSH
12955: LD_EXP 6
12959: PUSH
12960: LD_EXP 7
12964: PUSH
12965: LD_EXP 4
12969: PUSH
12970: LD_EXP 3
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: DIFF
12984: PPUSH
12985: LD_STRING DR0-Sol1-1
12987: PPUSH
12988: LD_STRING DR0-Sol1-1
12990: PPUSH
12991: CALL 6031 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12995: LD_INT 22
12997: PUSH
12998: LD_INT 1
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 21
13007: PUSH
13008: LD_INT 1
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 26
13017: PUSH
13018: LD_INT 1
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 2
13027: PUSH
13028: LD_INT 25
13030: PUSH
13031: LD_INT 1
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 25
13040: PUSH
13041: LD_INT 2
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PUSH
13048: LD_INT 25
13050: PUSH
13051: LD_INT 3
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 25
13060: PUSH
13061: LD_INT 4
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: PPUSH
13081: CALL_OW 69
13085: PUSH
13086: LD_EXP 1
13090: PUSH
13091: LD_EXP 8
13095: PUSH
13096: LD_EXP 5
13100: PUSH
13101: LD_EXP 2
13105: PUSH
13106: LD_EXP 6
13110: PUSH
13111: LD_EXP 7
13115: PUSH
13116: LD_EXP 4
13120: PUSH
13121: LD_EXP 3
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: DIFF
13136: PPUSH
13137: LD_STRING DR0-Sol2-1
13139: PPUSH
13140: LD_STRING DR0-Sol2-1
13142: PPUSH
13143: CALL 6031 0 3
// if IsOk ( Cyrus ) then
13147: LD_EXP 4
13151: PPUSH
13152: CALL_OW 302
13156: IFFALSE 13170
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13158: LD_EXP 4
13162: PPUSH
13163: LD_STRING DR0-Cyrus-1
13165: PPUSH
13166: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13170: LD_EXP 1
13174: PPUSH
13175: LD_STRING DR0-JMM-1
13177: PPUSH
13178: CALL_OW 88
// end ;
13182: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13183: LD_EXP 5
13187: PPUSH
13188: CALL_OW 302
13192: PUSH
13193: LD_INT 22
13195: PUSH
13196: LD_INT 1
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 25
13205: PUSH
13206: LD_INT 16
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PPUSH
13217: CALL_OW 69
13221: PUSH
13222: LD_INT 0
13224: GREATER
13225: AND
13226: PUSH
13227: LD_INT 1
13229: PPUSH
13230: CALL_OW 463
13234: NOT
13235: AND
13236: IFFALSE 13514
13238: GO 13240
13240: DISABLE
// begin DialogueOn ;
13241: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13245: LD_EXP 5
13249: PPUSH
13250: LD_STRING D10-Frank-1
13252: PPUSH
13253: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13257: LD_INT 22
13259: PUSH
13260: LD_INT 1
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 21
13269: PUSH
13270: LD_INT 1
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 2
13279: PUSH
13280: LD_INT 25
13282: PUSH
13283: LD_INT 1
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: LD_INT 25
13292: PUSH
13293: LD_INT 2
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 25
13302: PUSH
13303: LD_INT 3
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 25
13312: PUSH
13313: LD_INT 4
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: PPUSH
13332: CALL_OW 69
13336: PUSH
13337: LD_EXP 1
13341: PUSH
13342: LD_EXP 5
13346: PUSH
13347: LD_EXP 2
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: DIFF
13357: PPUSH
13358: LD_STRING D10-Sol1-1
13360: PPUSH
13361: LD_STRING D10-FSol1-1
13363: PPUSH
13364: CALL 6031 0 3
// Say ( Frank , D10-Frank-2 ) ;
13368: LD_EXP 5
13372: PPUSH
13373: LD_STRING D10-Frank-2
13375: PPUSH
13376: CALL_OW 88
// if IsOK ( Lisa ) then
13380: LD_EXP 2
13384: PPUSH
13385: CALL_OW 302
13389: IFFALSE 13405
// begin Say ( Lisa , D10-Lisa-2 ) ;
13391: LD_EXP 2
13395: PPUSH
13396: LD_STRING D10-Lisa-2
13398: PPUSH
13399: CALL_OW 88
// end else
13403: GO 13510
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13405: LD_INT 22
13407: PUSH
13408: LD_INT 1
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 21
13417: PUSH
13418: LD_INT 1
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 2
13427: PUSH
13428: LD_INT 25
13430: PUSH
13431: LD_INT 1
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 25
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 25
13450: PUSH
13451: LD_INT 3
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 25
13460: PUSH
13461: LD_INT 4
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 69
13484: PUSH
13485: LD_EXP 1
13489: PUSH
13490: LD_EXP 5
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: DIFF
13499: PPUSH
13500: LD_STRING D10-Sol1-2
13502: PPUSH
13503: LD_STRING D10-FSol1-2
13505: PPUSH
13506: CALL 6031 0 3
// end ; DialogueOff ;
13510: CALL_OW 7
// end ;
13514: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13515: LD_INT 1
13517: PPUSH
13518: CALL_OW 463
13522: NOT
13523: IFFALSE 13818
13525: GO 13527
13527: DISABLE
// begin HarrisonSupport ;
13528: CALL 2498 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13532: LD_EXP 17
13536: PPUSH
13537: CALL_OW 310
13541: PPUSH
13542: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13546: LD_EXP 17
13550: PPUSH
13551: LD_STRING DEng-Eng1-1
13553: PPUSH
13554: CALL_OW 88
// wait ( 1 1$0 ) ;
13558: LD_INT 2100
13560: PPUSH
13561: CALL_OW 67
// DialogueOn ;
13565: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13569: LD_EXP 14
13573: PPUSH
13574: LD_STRING DRem-Har-1
13576: PPUSH
13577: CALL_OW 94
// if contactWithRussian = 1 then
13581: LD_EXP 22
13585: PUSH
13586: LD_INT 1
13588: EQUAL
13589: IFFALSE 13605
// begin Say ( JMM , DRem-JMM-1 ) ;
13591: LD_EXP 1
13595: PPUSH
13596: LD_STRING DRem-JMM-1
13598: PPUSH
13599: CALL_OW 88
// end else
13603: GO 13617
// begin Say ( JMM , DRem-JMM-1a ) ;
13605: LD_EXP 1
13609: PPUSH
13610: LD_STRING DRem-JMM-1a
13612: PPUSH
13613: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13617: LD_EXP 14
13621: PPUSH
13622: LD_STRING DRem-Har-2
13624: PPUSH
13625: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13629: LD_STRING DenisInDelta
13631: PPUSH
13632: LD_INT 0
13634: PPUSH
13635: CALL_OW 30
13639: PUSH
13640: LD_INT 1
13642: EQUAL
13643: IFFALSE 13659
// begin Say ( JMM , DRem-JMM-2 ) ;
13645: LD_EXP 1
13649: PPUSH
13650: LD_STRING DRem-JMM-2
13652: PPUSH
13653: CALL_OW 88
// end else
13657: GO 13671
// begin Say ( JMM , DRem-JMM-2a ) ;
13659: LD_EXP 1
13663: PPUSH
13664: LD_STRING DRem-JMM-2a
13666: PPUSH
13667: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13671: LD_EXP 14
13675: PPUSH
13676: LD_STRING DRem-Har-3
13678: PPUSH
13679: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13683: LD_EXP 1
13687: PPUSH
13688: LD_STRING DRem-JMM-3
13690: PPUSH
13691: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13695: LD_EXP 14
13699: PPUSH
13700: LD_STRING DRem-Har-4
13702: PPUSH
13703: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13707: LD_STRING DenisInDelta
13709: PPUSH
13710: LD_INT 0
13712: PPUSH
13713: CALL_OW 30
13717: PUSH
13718: LD_INT 1
13720: EQUAL
13721: IFFALSE 13781
// begin Say ( JMM , DRem-JMM-4 ) ;
13723: LD_EXP 1
13727: PPUSH
13728: LD_STRING DRem-JMM-4
13730: PPUSH
13731: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13735: LD_EXP 14
13739: PPUSH
13740: LD_STRING DRem-Har-5
13742: PPUSH
13743: CALL_OW 94
// DialogueOff ;
13747: CALL_OW 7
// wait ( 4 4$00 ) ;
13751: LD_INT 8400
13753: PPUSH
13754: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13758: LD_INT 35
13760: PPUSH
13761: CALL_OW 67
// until not InBattle ( 1 ) ;
13765: LD_INT 1
13767: PPUSH
13768: CALL_OW 463
13772: NOT
13773: IFFALSE 13758
// SpawnDenis ;
13775: CALL 13819 0 0
// end else
13779: GO 13818
// begin DialogueOff ;
13781: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13785: LD_INT 36
13787: PPUSH
13788: LD_INT 1
13790: PPUSH
13791: LD_INT 1
13793: PPUSH
13794: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13798: LD_INT 15
13800: PPUSH
13801: LD_INT 1
13803: PPUSH
13804: LD_INT 1
13806: PPUSH
13807: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13811: LD_STRING MR
13813: PPUSH
13814: CALL_OW 337
// end ; end ;
13818: END
// export function SpawnDenis ; var tmp ; begin
13819: LD_INT 0
13821: PPUSH
13822: PPUSH
// PrepareDenis ;
13823: CALL 2220 0 0
// CenterNowOnUnits ( Denis ) ;
13827: LD_EXP 9
13831: PPUSH
13832: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
13836: LD_ADDR_VAR 0 2
13840: PUSH
13841: LD_INT 22
13843: PUSH
13844: LD_INT 1
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PPUSH
13851: CALL_OW 69
13855: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
13856: LD_EXP 9
13860: PPUSH
13861: LD_VAR 0 2
13865: PPUSH
13866: LD_EXP 9
13870: PPUSH
13871: CALL_OW 74
13875: PPUSH
13876: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13880: LD_INT 35
13882: PPUSH
13883: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
13887: LD_INT 22
13889: PUSH
13890: LD_INT 1
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 91
13899: PUSH
13900: LD_EXP 9
13904: PUSH
13905: LD_INT 10
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PPUSH
13917: CALL_OW 69
13921: IFFALSE 13880
// SetSide ( Denis , 1 ) ;
13923: LD_EXP 9
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: CALL_OW 235
// DialogueOn ;
13935: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13939: LD_EXP 9
13943: PPUSH
13944: LD_STRING DDen-Den-1
13946: PPUSH
13947: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13951: LD_EXP 1
13955: PPUSH
13956: LD_STRING DDen-JMM-1
13958: PPUSH
13959: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13963: LD_EXP 9
13967: PPUSH
13968: LD_STRING DDen-Den-2
13970: PPUSH
13971: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13975: LD_EXP 1
13979: PPUSH
13980: LD_STRING DDen-JMM-2
13982: PPUSH
13983: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13987: LD_EXP 9
13991: PPUSH
13992: LD_STRING DDen-Den-3
13994: PPUSH
13995: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13999: LD_EXP 1
14003: PPUSH
14004: LD_STRING DDen-JMM-3
14006: PPUSH
14007: CALL_OW 88
// DialogueOff ;
14011: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14015: LD_INT 36
14017: PPUSH
14018: LD_INT 1
14020: PPUSH
14021: LD_INT 1
14023: PPUSH
14024: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14028: LD_INT 15
14030: PPUSH
14031: LD_INT 1
14033: PPUSH
14034: LD_INT 1
14036: PPUSH
14037: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14041: LD_STRING MR
14043: PPUSH
14044: CALL_OW 337
// end ;
14048: LD_VAR 0 1
14052: RET
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14053: CALL 14108 0 0
14057: PUSH
14058: LD_EXP 9
14062: PPUSH
14063: CALL_OW 302
14067: AND
14068: PUSH
14069: LD_INT 1
14071: PPUSH
14072: CALL_OW 463
14076: NOT
14077: AND
14078: IFFALSE 14107
14080: GO 14082
14082: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14083: LD_EXP 9
14087: PPUSH
14088: LD_STRING DR1-Den-1
14090: PPUSH
14091: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14095: LD_EXP 1
14099: PPUSH
14100: LD_STRING DR1-JMM-1
14102: PPUSH
14103: CALL_OW 88
// end ;
14107: END
// function CheckOptoLab ; var i ; begin
14108: LD_INT 0
14110: PPUSH
14111: PPUSH
// result = false ;
14112: LD_ADDR_VAR 0 1
14116: PUSH
14117: LD_INT 0
14119: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14120: LD_ADDR_VAR 0 2
14124: PUSH
14125: LD_INT 22
14127: PUSH
14128: LD_INT 1
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PUSH
14135: LD_INT 2
14137: PUSH
14138: LD_INT 30
14140: PUSH
14141: LD_INT 7
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 30
14150: PUSH
14151: LD_INT 8
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: LIST
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PPUSH
14167: CALL_OW 69
14171: PUSH
14172: FOR_IN
14173: IFFALSE 14225
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14175: LD_VAR 0 2
14179: PPUSH
14180: LD_INT 1
14182: PPUSH
14183: CALL_OW 268
14187: PUSH
14188: LD_INT 15
14190: EQUAL
14191: PUSH
14192: LD_VAR 0 2
14196: PPUSH
14197: LD_INT 2
14199: PPUSH
14200: CALL_OW 268
14204: PUSH
14205: LD_INT 15
14207: EQUAL
14208: OR
14209: IFFALSE 14221
// begin result = true ;
14211: LD_ADDR_VAR 0 1
14215: PUSH
14216: LD_INT 1
14218: ST_TO_ADDR
// break ;
14219: GO 14225
// end ; break ;
14221: GO 14225
// end ;
14223: GO 14172
14225: POP
14226: POP
// end ;
14227: LD_VAR 0 1
14231: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14232: LD_INT 15
14234: PPUSH
14235: LD_INT 1
14237: PPUSH
14238: CALL_OW 321
14242: PUSH
14243: LD_INT 2
14245: EQUAL
14246: PUSH
14247: LD_EXP 9
14251: PPUSH
14252: CALL_OW 302
14256: AND
14257: PUSH
14258: LD_INT 1
14260: PPUSH
14261: CALL_OW 463
14265: NOT
14266: AND
14267: IFFALSE 14499
14269: GO 14271
14271: DISABLE
// begin DialogueOn ;
14272: CALL_OW 6
// if IsOK ( Denis ) then
14276: LD_EXP 9
14280: PPUSH
14281: CALL_OW 302
14285: IFFALSE 14301
// begin Say ( Denis , DR2-Den-1 ) ;
14287: LD_EXP 9
14291: PPUSH
14292: LD_STRING DR2-Den-1
14294: PPUSH
14295: CALL_OW 88
// end else
14299: GO 14360
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14301: LD_INT 22
14303: PUSH
14304: LD_INT 1
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: LD_INT 21
14313: PUSH
14314: LD_INT 1
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: LD_INT 25
14323: PUSH
14324: LD_INT 4
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: LIST
14335: PPUSH
14336: CALL_OW 69
14340: PUSH
14341: LD_EXP 1
14345: PUSH
14346: EMPTY
14347: LIST
14348: DIFF
14349: PPUSH
14350: LD_STRING DR2-Sci1-1
14352: PPUSH
14353: LD_STRING DR2-FSci1-1
14355: PPUSH
14356: CALL 6031 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14360: LD_EXP 1
14364: PPUSH
14365: LD_STRING DR2-JMM-1
14367: PPUSH
14368: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14372: LD_INT 22
14374: PUSH
14375: LD_INT 1
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PUSH
14382: LD_INT 21
14384: PUSH
14385: LD_INT 1
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: LD_INT 2
14394: PUSH
14395: LD_INT 25
14397: PUSH
14398: LD_INT 1
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: LD_INT 25
14407: PUSH
14408: LD_INT 2
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: PUSH
14415: LD_INT 25
14417: PUSH
14418: LD_INT 3
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PUSH
14425: LD_INT 25
14427: PUSH
14428: LD_INT 4
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: LIST
14446: PPUSH
14447: CALL_OW 69
14451: PUSH
14452: LD_EXP 1
14456: PUSH
14457: LD_EXP 9
14461: PUSH
14462: LD_EXP 8
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: LIST
14471: DIFF
14472: PPUSH
14473: LD_STRING DR2-Sol1-1
14475: PPUSH
14476: LD_STRING DR2-Sol1-11
14478: PPUSH
14479: CALL 6031 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14483: LD_EXP 1
14487: PPUSH
14488: LD_STRING DR2-JMM-2
14490: PPUSH
14491: CALL_OW 88
// DialogueOff ;
14495: CALL_OW 7
// end ;
14499: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14500: LD_INT 22
14502: PUSH
14503: LD_INT 1
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 30
14512: PUSH
14513: LD_INT 36
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PPUSH
14524: CALL_OW 69
14528: PUSH
14529: LD_INT 0
14531: EQUAL
14532: PUSH
14533: LD_INT 22
14535: PUSH
14536: LD_INT 1
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: PUSH
14543: LD_INT 21
14545: PUSH
14546: LD_INT 2
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 33
14555: PUSH
14556: LD_INT 2
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: LIST
14567: PPUSH
14568: CALL_OW 69
14572: PUSH
14573: LD_INT 0
14575: GREATER
14576: AND
14577: PUSH
14578: LD_EXP 23
14582: PUSH
14583: LD_INT 0
14585: EQUAL
14586: AND
14587: PUSH
14588: LD_INT 1
14590: PPUSH
14591: CALL_OW 463
14595: NOT
14596: AND
14597: IFFALSE 14723
14599: GO 14601
14601: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14602: LD_INT 22
14604: PUSH
14605: LD_INT 1
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 21
14614: PUSH
14615: LD_INT 1
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: LD_INT 25
14624: PUSH
14625: LD_INT 3
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: LIST
14636: PPUSH
14637: CALL_OW 69
14641: PUSH
14642: LD_EXP 1
14646: PUSH
14647: LD_EXP 6
14651: PUSH
14652: LD_EXP 7
14656: PUSH
14657: LD_EXP 9
14661: PUSH
14662: LD_EXP 15
14666: PUSH
14667: LD_EXP 3
14671: PUSH
14672: LD_EXP 4
14676: PUSH
14677: LD_EXP 2
14681: PUSH
14682: LD_EXP 5
14686: PUSH
14687: LD_EXP 8
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: DIFF
14704: PPUSH
14705: LD_STRING D3a-Mech1-1
14707: PPUSH
14708: LD_STRING D3a-Mech1-1
14710: PPUSH
14711: CALL 6031 0 3
// firstTower = 2 ;
14715: LD_ADDR_EXP 23
14719: PUSH
14720: LD_INT 2
14722: ST_TO_ADDR
// end ;
14723: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14724: LD_INT 22
14726: PUSH
14727: LD_INT 3
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 21
14736: PUSH
14737: LD_INT 3
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PPUSH
14748: CALL_OW 69
14752: PUSH
14753: LD_INT 0
14755: EQUAL
14756: IFFALSE 14871
14758: GO 14760
14760: DISABLE
14761: LD_INT 0
14763: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14764: LD_ADDR_VAR 0 1
14768: PUSH
14769: LD_INT 22
14771: PUSH
14772: LD_INT 1
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: LD_INT 21
14781: PUSH
14782: LD_INT 1
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PUSH
14789: LD_INT 2
14791: PUSH
14792: LD_INT 25
14794: PUSH
14795: LD_INT 1
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: LD_INT 25
14804: PUSH
14805: LD_INT 2
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 25
14814: PUSH
14815: LD_INT 3
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 25
14824: PUSH
14825: LD_INT 4
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: LIST
14843: PPUSH
14844: CALL_OW 69
14848: PUSH
14849: FOR_IN
14850: IFFALSE 14869
// AddExperience ( i , 1 , 10000 ) ;
14852: LD_VAR 0 1
14856: PPUSH
14857: LD_INT 1
14859: PPUSH
14860: LD_INT 10000
14862: PPUSH
14863: CALL_OW 492
14867: GO 14849
14869: POP
14870: POP
// end ;
14871: PPOPN 1
14873: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14874: LD_INT 22
14876: PUSH
14877: LD_INT 1
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: LD_INT 30
14886: PUSH
14887: LD_INT 36
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PPUSH
14898: CALL_OW 69
14902: PUSH
14903: LD_INT 0
14905: GREATER
14906: PUSH
14907: LD_INT 22
14909: PUSH
14910: LD_INT 1
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 21
14919: PUSH
14920: LD_INT 2
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 33
14929: PUSH
14930: LD_INT 2
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: LIST
14941: PPUSH
14942: CALL_OW 69
14946: PUSH
14947: LD_INT 0
14949: GREATER
14950: AND
14951: PUSH
14952: CALL 15544 0 0
14956: AND
14957: PUSH
14958: LD_INT 1
14960: PPUSH
14961: CALL_OW 463
14965: NOT
14966: AND
14967: IFFALSE 15541
14969: GO 14971
14971: DISABLE
14972: LD_INT 0
14974: PPUSH
14975: PPUSH
14976: PPUSH
14977: PPUSH
14978: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14979: LD_ADDR_VAR 0 3
14983: PUSH
14984: LD_INT 22
14986: PUSH
14987: LD_INT 1
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 30
14996: PUSH
14997: LD_INT 36
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PPUSH
15008: CALL_OW 69
15012: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
15013: LD_ADDR_VAR 0 4
15017: PUSH
15018: LD_INT 22
15020: PUSH
15021: LD_INT 1
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: LD_INT 21
15030: PUSH
15031: LD_INT 2
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 33
15040: PUSH
15041: LD_INT 2
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: LIST
15052: PPUSH
15053: CALL_OW 69
15057: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15058: LD_ADDR_VAR 0 5
15062: PUSH
15063: EMPTY
15064: ST_TO_ADDR
// for i in tmpControlTowers do
15065: LD_ADDR_VAR 0 1
15069: PUSH
15070: LD_VAR 0 3
15074: PUSH
15075: FOR_IN
15076: IFFALSE 15539
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15078: LD_EXP 1
15082: PPUSH
15083: CALL_OW 310
15087: PUSH
15088: LD_VAR 0 1
15092: EQUAL
15093: PUSH
15094: LD_EXP 1
15098: PPUSH
15099: CALL_OW 257
15103: PUSH
15104: LD_INT 3
15106: EQUAL
15107: AND
15108: IFFALSE 15238
// begin InGameOn ;
15110: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15114: LD_VAR 0 4
15118: PUSH
15119: LD_INT 1
15121: ARRAY
15122: PPUSH
15123: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15127: LD_EXP 1
15131: PPUSH
15132: LD_STRING D4a-JMM-1
15134: PPUSH
15135: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15139: LD_VAR 0 4
15143: PUSH
15144: LD_INT 1
15146: ARRAY
15147: PPUSH
15148: LD_EXP 1
15152: PPUSH
15153: CALL_OW 53
// wait ( 0 0$1 ) ;
15157: LD_INT 35
15159: PPUSH
15160: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15164: LD_VAR 0 4
15168: PUSH
15169: LD_INT 1
15171: ARRAY
15172: PPUSH
15173: LD_VAR 0 4
15177: PUSH
15178: LD_INT 1
15180: ARRAY
15181: PPUSH
15182: CALL_OW 250
15186: PUSH
15187: LD_INT 3
15189: PLUS
15190: PPUSH
15191: LD_VAR 0 4
15195: PUSH
15196: LD_INT 1
15198: ARRAY
15199: PPUSH
15200: CALL_OW 251
15204: PUSH
15205: LD_INT 2
15207: MINUS
15208: PPUSH
15209: CALL_OW 111
// wait ( 0 0$2 ) ;
15213: LD_INT 70
15215: PPUSH
15216: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15220: LD_EXP 1
15224: PPUSH
15225: LD_STRING D4b-JMM-1
15227: PPUSH
15228: CALL_OW 88
// InGameOff ;
15232: CALL_OW 9
// end else
15236: GO 15537
// begin InGameOn ;
15238: CALL_OW 8
// for j in UnitsInside ( i ) do
15242: LD_ADDR_VAR 0 2
15246: PUSH
15247: LD_VAR 0 1
15251: PPUSH
15252: CALL_OW 313
15256: PUSH
15257: FOR_IN
15258: IFFALSE 15293
// if GetClass ( j ) = 3 then
15260: LD_VAR 0 2
15264: PPUSH
15265: CALL_OW 257
15269: PUSH
15270: LD_INT 3
15272: EQUAL
15273: IFFALSE 15291
// tmpMechanicInside = tmpMechanicInside ^ j ;
15275: LD_ADDR_VAR 0 5
15279: PUSH
15280: LD_VAR 0 5
15284: PUSH
15285: LD_VAR 0 2
15289: ADD
15290: ST_TO_ADDR
15291: GO 15257
15293: POP
15294: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15295: LD_VAR 0 5
15299: PUSH
15300: LD_INT 1
15302: ARRAY
15303: PPUSH
15304: CALL_OW 258
15308: PUSH
15309: LD_INT 1
15311: EQUAL
15312: IFFALSE 15330
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15314: LD_VAR 0 5
15318: PUSH
15319: LD_INT 1
15321: ARRAY
15322: PPUSH
15323: LD_STRING D4a-Mech1-1
15325: PPUSH
15326: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15330: LD_VAR 0 5
15334: PUSH
15335: LD_INT 1
15337: ARRAY
15338: PPUSH
15339: CALL_OW 258
15343: PUSH
15344: LD_INT 2
15346: EQUAL
15347: IFFALSE 15365
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15349: LD_VAR 0 5
15353: PUSH
15354: LD_INT 1
15356: ARRAY
15357: PPUSH
15358: LD_STRING D4a-FMech1-1
15360: PPUSH
15361: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15365: LD_VAR 0 4
15369: PUSH
15370: LD_INT 1
15372: ARRAY
15373: PPUSH
15374: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15378: LD_VAR 0 4
15382: PUSH
15383: LD_INT 1
15385: ARRAY
15386: PPUSH
15387: LD_VAR 0 5
15391: PUSH
15392: LD_INT 1
15394: ARRAY
15395: PPUSH
15396: CALL_OW 53
// wait ( 0 0$1 ) ;
15400: LD_INT 35
15402: PPUSH
15403: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15407: LD_VAR 0 4
15411: PUSH
15412: LD_INT 1
15414: ARRAY
15415: PPUSH
15416: LD_VAR 0 4
15420: PUSH
15421: LD_INT 1
15423: ARRAY
15424: PPUSH
15425: CALL_OW 250
15429: PUSH
15430: LD_INT 3
15432: PLUS
15433: PPUSH
15434: LD_VAR 0 4
15438: PUSH
15439: LD_INT 1
15441: ARRAY
15442: PPUSH
15443: CALL_OW 251
15447: PUSH
15448: LD_INT 2
15450: MINUS
15451: PPUSH
15452: CALL_OW 111
// wait ( 0 0$2 ) ;
15456: LD_INT 70
15458: PPUSH
15459: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15463: LD_VAR 0 5
15467: PUSH
15468: LD_INT 1
15470: ARRAY
15471: PPUSH
15472: CALL_OW 258
15476: PUSH
15477: LD_INT 1
15479: EQUAL
15480: IFFALSE 15498
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15482: LD_VAR 0 5
15486: PUSH
15487: LD_INT 1
15489: ARRAY
15490: PPUSH
15491: LD_STRING D4b-Mech1-1
15493: PPUSH
15494: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15498: LD_VAR 0 5
15502: PUSH
15503: LD_INT 1
15505: ARRAY
15506: PPUSH
15507: CALL_OW 258
15511: PUSH
15512: LD_INT 2
15514: EQUAL
15515: IFFALSE 15533
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15517: LD_VAR 0 5
15521: PUSH
15522: LD_INT 1
15524: ARRAY
15525: PPUSH
15526: LD_STRING D4b-FMech1-1
15528: PPUSH
15529: CALL_OW 88
// InGameOff ;
15533: CALL_OW 9
// end ; end ;
15537: GO 15075
15539: POP
15540: POP
// end ;
15541: PPOPN 5
15543: END
// function CheckMehInside ; var i , j ; begin
15544: LD_INT 0
15546: PPUSH
15547: PPUSH
15548: PPUSH
// result = false ;
15549: LD_ADDR_VAR 0 1
15553: PUSH
15554: LD_INT 0
15556: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15557: LD_ADDR_VAR 0 2
15561: PUSH
15562: LD_INT 22
15564: PUSH
15565: LD_INT 1
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 30
15574: PUSH
15575: LD_INT 36
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PPUSH
15586: CALL_OW 69
15590: PUSH
15591: FOR_IN
15592: IFFALSE 15643
// begin for j in UnitsInside ( i ) do
15594: LD_ADDR_VAR 0 3
15598: PUSH
15599: LD_VAR 0 2
15603: PPUSH
15604: CALL_OW 313
15608: PUSH
15609: FOR_IN
15610: IFFALSE 15639
// begin if GetClass ( j ) = 3 then
15612: LD_VAR 0 3
15616: PPUSH
15617: CALL_OW 257
15621: PUSH
15622: LD_INT 3
15624: EQUAL
15625: IFFALSE 15637
// begin result = true ;
15627: LD_ADDR_VAR 0 1
15631: PUSH
15632: LD_INT 1
15634: ST_TO_ADDR
// break ;
15635: GO 15639
// end ; end ;
15637: GO 15609
15639: POP
15640: POP
// end ;
15641: GO 15591
15643: POP
15644: POP
// end ;
15645: LD_VAR 0 1
15649: RET
// every 25 25$0 do
15650: GO 15652
15652: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15653: LD_INT 35
15655: PPUSH
15656: CALL_OW 67
// until not InBattle ( 1 ) ;
15660: LD_INT 1
15662: PPUSH
15663: CALL_OW 463
15667: NOT
15668: IFFALSE 15653
// PrepareKurt ;
15670: CALL 19248 0 0
// end ;
15674: END
// every 35 35$0 do
15675: GO 15677
15677: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15678: LD_INT 35
15680: PPUSH
15681: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
15685: LD_INT 1
15687: PPUSH
15688: CALL_OW 463
15692: NOT
15693: PUSH
15694: LD_INT 32
15696: PPUSH
15697: LD_INT 81
15699: PUSH
15700: LD_INT 1
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PPUSH
15707: CALL_OW 70
15711: NOT
15712: AND
15713: IFFALSE 15678
// PrepareJoan ;
15715: CALL 3016 0 0
// wait ( 1 1$0 ) ;
15719: LD_INT 2100
15721: PPUSH
15722: CALL_OW 67
// if IsOK ( Lisa ) then
15726: LD_EXP 2
15730: PPUSH
15731: CALL_OW 302
15735: IFFALSE 15865
// begin DialogueOn ;
15737: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15741: LD_EXP 2
15745: PPUSH
15746: LD_STRING D7-Lisa-1
15748: PPUSH
15749: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15753: LD_EXP 1
15757: PPUSH
15758: LD_STRING D7-JMM-1
15760: PPUSH
15761: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15765: LD_EXP 2
15769: PPUSH
15770: LD_STRING D7-Lisa-2
15772: PPUSH
15773: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15777: LD_EXP 1
15781: PPUSH
15782: LD_STRING D7-JMM-2
15784: PPUSH
15785: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15789: LD_EXP 2
15793: PPUSH
15794: LD_STRING D7-Lisa-3
15796: PPUSH
15797: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15801: LD_EXP 1
15805: PPUSH
15806: LD_STRING D7-JMM-3
15808: PPUSH
15809: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15813: LD_EXP 2
15817: PPUSH
15818: LD_STRING D7-Lisa-4
15820: PPUSH
15821: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15825: LD_EXP 1
15829: PPUSH
15830: LD_STRING D7-JMM-4
15832: PPUSH
15833: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15837: LD_EXP 1
15841: PPUSH
15842: LD_STRING D7-JMM-4a
15844: PPUSH
15845: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
15849: LD_EXP 2
15853: PPUSH
15854: LD_STRING D7-Lisa-5
15856: PPUSH
15857: CALL_OW 88
// DialogueOff ;
15861: CALL_OW 7
// end ; end ;
15865: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
15866: LD_EXP 13
15870: PUSH
15871: LD_INT 22
15873: PUSH
15874: LD_INT 1
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 91
15883: PUSH
15884: LD_EXP 13
15888: PUSH
15889: LD_INT 10
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: LIST
15896: PUSH
15897: LD_INT 2
15899: PUSH
15900: LD_INT 25
15902: PUSH
15903: LD_INT 1
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 25
15912: PUSH
15913: LD_INT 2
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 25
15922: PUSH
15923: LD_INT 3
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 25
15932: PUSH
15933: LD_INT 4
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: LIST
15951: PPUSH
15952: CALL_OW 69
15956: PUSH
15957: LD_INT 1
15959: GREATER
15960: AND
15961: IFFALSE 15978
15963: GO 15965
15965: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
15966: LD_EXP 13
15970: PPUSH
15971: LD_STRING D5-Sol1-1
15973: PPUSH
15974: CALL_OW 88
// end ;
15978: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
15979: LD_INT 22
15981: PUSH
15982: LD_INT 1
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 33
15991: PUSH
15992: LD_INT 2
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PPUSH
16003: CALL_OW 69
16007: PUSH
16008: LD_INT 2
16010: GREATEREQUAL
16011: IFFALSE 16031
16013: GO 16015
16015: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
16016: LD_STRING MRa
16018: PPUSH
16019: CALL_OW 337
// remoteVehiclesBuild = 1 ;
16023: LD_ADDR_EXP 28
16027: PUSH
16028: LD_INT 1
16030: ST_TO_ADDR
// end ;
16031: END
// every 0 0$10 do var i , last ;
16032: GO 16034
16034: DISABLE
16035: LD_INT 0
16037: PPUSH
16038: PPUSH
// begin last := 7 ;
16039: LD_ADDR_VAR 0 2
16043: PUSH
16044: LD_INT 7
16046: ST_TO_ADDR
// for i = 1 to last do
16047: LD_ADDR_VAR 0 1
16051: PUSH
16052: DOUBLE
16053: LD_INT 1
16055: DEC
16056: ST_TO_ADDR
16057: LD_VAR 0 2
16061: PUSH
16062: FOR_TO
16063: IFFALSE 16091
// begin wait ( rand ( 3 3$00 , 7 7$00 ) ) ;
16065: LD_INT 6300
16067: PPUSH
16068: LD_INT 14700
16070: PPUSH
16071: CALL_OW 12
16075: PPUSH
16076: CALL_OW 67
// PrepareRandoms ( i ) ;
16080: LD_VAR 0 1
16084: PPUSH
16085: CALL 4052 0 1
// end ;
16089: GO 16062
16091: POP
16092: POP
// end ;
16093: PPOPN 2
16095: END
// every 5 5$20 do
16096: GO 16098
16098: DISABLE
// begin DialogueOn ;
16099: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16103: LD_EXP 10
16107: PPUSH
16108: LD_STRING D12a-Sci-1
16110: PPUSH
16111: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16115: LD_EXP 1
16119: PPUSH
16120: LD_STRING D12a-JMM-1
16122: PPUSH
16123: CALL_OW 88
// DialogueOff ;
16127: CALL_OW 7
// cratesStatus = 1 ;
16131: LD_ADDR_EXP 38
16135: PUSH
16136: LD_INT 1
16138: ST_TO_ADDR
// end ;
16139: END
// every 13 13$0 do
16140: GO 16142
16142: DISABLE
// begin DialogueOn ;
16143: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16147: LD_EXP 10
16151: PPUSH
16152: LD_STRING D12b-Sci-1
16154: PPUSH
16155: CALL_OW 94
// DialogueOff ;
16159: CALL_OW 7
// cratesStatus = 2 ;
16163: LD_ADDR_EXP 38
16167: PUSH
16168: LD_INT 2
16170: ST_TO_ADDR
// end ;
16171: END
// every 32 32$0 do
16172: GO 16174
16174: DISABLE
// begin DialogueOn ;
16175: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16179: LD_EXP 10
16183: PPUSH
16184: LD_STRING D12c-Sci-1
16186: PPUSH
16187: CALL_OW 94
// DialogueOff ;
16191: CALL_OW 7
// wait ( 3 3$0 ) ;
16195: LD_INT 6300
16197: PPUSH
16198: CALL_OW 67
// DialogueOn ;
16202: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16206: LD_EXP 10
16210: PPUSH
16211: LD_STRING D12d-Sci-1
16213: PPUSH
16214: CALL_OW 94
// DialogueOff ;
16218: CALL_OW 7
// cratesStatus = 1 ;
16222: LD_ADDR_EXP 38
16226: PUSH
16227: LD_INT 1
16229: ST_TO_ADDR
// end ;
16230: END
// every 42 42$0 do
16231: GO 16233
16233: DISABLE
// begin DialogueOn ;
16234: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16238: LD_EXP 10
16242: PPUSH
16243: LD_STRING D12e-Sci-1
16245: PPUSH
16246: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16250: LD_EXP 1
16254: PPUSH
16255: LD_STRING D12e-JMM-1
16257: PPUSH
16258: CALL_OW 88
// DialogueOff ;
16262: CALL_OW 7
// cratesStatus = 2 ;
16266: LD_ADDR_EXP 38
16270: PUSH
16271: LD_INT 2
16273: ST_TO_ADDR
// end ;
16274: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16275: LD_INT 22
16277: PUSH
16278: LD_INT 6
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 21
16287: PUSH
16288: LD_INT 2
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 34
16297: PUSH
16298: LD_INT 51
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: LIST
16309: PPUSH
16310: CALL_OW 69
16314: PUSH
16315: LD_INT 0
16317: GREATER
16318: IFFALSE 16401
16320: GO 16322
16322: DISABLE
16323: LD_INT 0
16325: PPUSH
// begin enable ;
16326: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16327: LD_ADDR_VAR 0 1
16331: PUSH
16332: LD_INT 22
16334: PUSH
16335: LD_INT 6
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: LD_INT 2
16344: PUSH
16345: LD_INT 21
16347: PUSH
16348: LD_INT 1
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 21
16357: PUSH
16358: LD_INT 2
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: LIST
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PPUSH
16374: CALL_OW 69
16378: PUSH
16379: FOR_IN
16380: IFFALSE 16399
// ComAgressiveMove ( i , 138 , 168 ) ;
16382: LD_VAR 0 1
16386: PPUSH
16387: LD_INT 138
16389: PPUSH
16390: LD_INT 168
16392: PPUSH
16393: CALL_OW 114
16397: GO 16379
16399: POP
16400: POP
// end ;
16401: PPOPN 1
16403: END
// every 0 0$1 do var i ;
16404: GO 16406
16406: DISABLE
16407: LD_INT 0
16409: PPUSH
// begin enable ;
16410: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16411: LD_ADDR_VAR 0 1
16415: PUSH
16416: LD_INT 4
16418: PPUSH
16419: LD_INT 2
16421: PUSH
16422: LD_INT 22
16424: PUSH
16425: LD_INT 3
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: LD_INT 22
16434: PUSH
16435: LD_INT 6
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: LIST
16446: PUSH
16447: EMPTY
16448: LIST
16449: PPUSH
16450: CALL_OW 70
16454: PUSH
16455: FOR_IN
16456: IFFALSE 16520
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16458: LD_INT 4
16460: PPUSH
16461: LD_INT 22
16463: PUSH
16464: LD_INT 6
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 34
16473: PUSH
16474: LD_INT 51
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PPUSH
16485: CALL_OW 70
16489: PUSH
16490: LD_INT 0
16492: GREATER
16493: IFFALSE 16509
// sendedConvoys = sendedConvoys + 1 ;
16495: LD_ADDR_EXP 39
16499: PUSH
16500: LD_EXP 39
16504: PUSH
16505: LD_INT 1
16507: PLUS
16508: ST_TO_ADDR
// RemoveUnit ( i ) ;
16509: LD_VAR 0 1
16513: PPUSH
16514: CALL_OW 64
// end ;
16518: GO 16455
16520: POP
16521: POP
// end ; end_of_file
16522: PPOPN 1
16524: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16525: LD_VAR 0 1
16529: PUSH
16530: LD_INT 1
16532: EQUAL
16533: PUSH
16534: LD_VAR 0 2
16538: PUSH
16539: LD_INT 3
16541: EQUAL
16542: AND
16543: IFFALSE 16553
// contactWithRussian = 1 ;
16545: LD_ADDR_EXP 22
16549: PUSH
16550: LD_INT 1
16552: ST_TO_ADDR
// end ;
16553: PPOPN 2
16555: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16556: LD_VAR 0 1
16560: PPUSH
16561: CALL_OW 266
16565: PUSH
16566: LD_INT 36
16568: EQUAL
16569: PUSH
16570: LD_VAR 0 1
16574: PPUSH
16575: CALL_OW 255
16579: PUSH
16580: LD_INT 1
16582: EQUAL
16583: AND
16584: PUSH
16585: LD_INT 22
16587: PUSH
16588: LD_INT 1
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 21
16597: PUSH
16598: LD_INT 2
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 33
16607: PUSH
16608: LD_INT 2
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: LIST
16619: PPUSH
16620: CALL_OW 69
16624: PUSH
16625: LD_INT 0
16627: EQUAL
16628: AND
16629: PUSH
16630: LD_EXP 23
16634: PUSH
16635: LD_INT 0
16637: EQUAL
16638: AND
16639: IFFALSE 16719
// begin firstTower = 1 ;
16641: LD_ADDR_EXP 23
16645: PUSH
16646: LD_INT 1
16648: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16649: LD_INT 22
16651: PUSH
16652: LD_INT 1
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 21
16661: PUSH
16662: LD_INT 1
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 25
16671: PUSH
16672: LD_INT 3
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 26
16681: PUSH
16682: LD_INT 1
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: PPUSH
16695: CALL_OW 69
16699: PUSH
16700: LD_EXP 1
16704: PUSH
16705: EMPTY
16706: LIST
16707: DIFF
16708: PPUSH
16709: LD_STRING D3b-Mech1-1
16711: PPUSH
16712: LD_STRING D3b-Mech1-1
16714: PPUSH
16715: CALL 6031 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16719: LD_VAR 0 1
16723: PPUSH
16724: CALL_OW 266
16728: PUSH
16729: LD_INT 0
16731: EQUAL
16732: PUSH
16733: LD_VAR 0 1
16737: PPUSH
16738: CALL_OW 255
16742: PUSH
16743: LD_INT 1
16745: EQUAL
16746: AND
16747: IFFALSE 16761
// SetBName ( building , theta ) ;
16749: LD_VAR 0 1
16753: PPUSH
16754: LD_STRING theta
16756: PPUSH
16757: CALL_OW 500
// if GetSide ( building ) = 3 then
16761: LD_VAR 0 1
16765: PPUSH
16766: CALL_OW 255
16770: PUSH
16771: LD_INT 3
16773: EQUAL
16774: IFFALSE 16848
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16776: LD_ADDR_EXP 31
16780: PUSH
16781: LD_EXP 31
16785: PPUSH
16786: LD_INT 1
16788: PPUSH
16789: CALL_OW 3
16793: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16794: LD_ADDR_EXP 31
16798: PUSH
16799: LD_EXP 31
16803: PPUSH
16804: LD_INT 1
16806: PPUSH
16807: CALL_OW 3
16811: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16812: LD_ADDR_EXP 31
16816: PUSH
16817: LD_EXP 31
16821: PPUSH
16822: LD_INT 1
16824: PPUSH
16825: CALL_OW 3
16829: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16830: LD_ADDR_EXP 31
16834: PUSH
16835: LD_EXP 31
16839: PPUSH
16840: LD_INT 1
16842: PPUSH
16843: CALL_OW 3
16847: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
16848: LD_VAR 0 1
16852: PPUSH
16853: CALL_OW 255
16857: PUSH
16858: LD_INT 3
16860: EQUAL
16861: PUSH
16862: LD_VAR 0 1
16866: PPUSH
16867: CALL_OW 266
16871: PUSH
16872: LD_INT 0
16874: EQUAL
16875: PUSH
16876: LD_VAR 0 1
16880: PPUSH
16881: CALL_OW 266
16885: PUSH
16886: LD_INT 2
16888: EQUAL
16889: OR
16890: PUSH
16891: LD_VAR 0 1
16895: PPUSH
16896: CALL_OW 266
16900: PUSH
16901: LD_INT 4
16903: EQUAL
16904: OR
16905: PUSH
16906: EMPTY
16907: LIST
16908: AND
16909: IFFALSE 16920
// ComUpgrade ( building ) ;
16911: LD_VAR 0 1
16915: PPUSH
16916: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
16920: LD_VAR 0 1
16924: PPUSH
16925: CALL_OW 255
16929: PUSH
16930: LD_INT 3
16932: EQUAL
16933: PUSH
16934: LD_VAR 0 1
16938: PPUSH
16939: CALL_OW 266
16943: PUSH
16944: LD_INT 32
16946: EQUAL
16947: AND
16948: IFFALSE 16989
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
16950: LD_VAR 0 1
16954: PPUSH
16955: LD_INT 42
16957: PUSH
16958: LD_INT 43
16960: PUSH
16961: LD_INT 44
16963: PUSH
16964: LD_INT 46
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: PUSH
16973: LD_INT 1
16975: PPUSH
16976: LD_INT 4
16978: PPUSH
16979: CALL_OW 12
16983: ARRAY
16984: PPUSH
16985: CALL_OW 208
// end ; end ;
16989: PPOPN 1
16991: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
16992: LD_VAR 0 1
16996: PUSH
16997: LD_INT 22
16999: PUSH
17000: LD_INT 1
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 21
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 23
17019: PUSH
17020: LD_INT 1
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: LIST
17031: PPUSH
17032: CALL_OW 69
17036: IN
17037: IFFALSE 17053
// killCounter := killCounter + 1 ;
17039: LD_ADDR_EXP 47
17043: PUSH
17044: LD_EXP 47
17048: PUSH
17049: LD_INT 1
17051: PLUS
17052: ST_TO_ADDR
// if unit = JMM then
17053: LD_VAR 0 1
17057: PUSH
17058: LD_EXP 1
17062: EQUAL
17063: IFFALSE 17072
// YouLost ( JMM ) ;
17065: LD_STRING JMM
17067: PPUSH
17068: CALL_OW 104
// if unit = Joan then
17072: LD_VAR 0 1
17076: PUSH
17077: LD_EXP 15
17081: EQUAL
17082: IFFALSE 17092
// JoanStatus = 0 ;
17084: LD_ADDR_EXP 16
17088: PUSH
17089: LD_INT 0
17091: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17092: LD_VAR 0 1
17096: PPUSH
17097: CALL_OW 255
17101: PUSH
17102: LD_INT 1
17104: EQUAL
17105: PUSH
17106: LD_VAR 0 1
17110: PPUSH
17111: CALL_OW 247
17115: PUSH
17116: LD_INT 1
17118: EQUAL
17119: AND
17120: IFFALSE 17196
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17122: LD_VAR 0 1
17126: PPUSH
17127: CALL_OW 257
17131: PUSH
17132: LD_INT 1
17134: EQUAL
17135: PUSH
17136: LD_VAR 0 1
17140: PPUSH
17141: CALL_OW 257
17145: PUSH
17146: LD_INT 2
17148: EQUAL
17149: OR
17150: PUSH
17151: LD_VAR 0 1
17155: PPUSH
17156: CALL_OW 257
17160: PUSH
17161: LD_INT 3
17163: EQUAL
17164: OR
17165: PUSH
17166: LD_VAR 0 1
17170: PPUSH
17171: CALL_OW 257
17175: PUSH
17176: LD_INT 4
17178: EQUAL
17179: OR
17180: IFFALSE 17196
// unitLost = unitLost + 1 ;
17182: LD_ADDR_EXP 30
17186: PUSH
17187: LD_EXP 30
17191: PUSH
17192: LD_INT 1
17194: PLUS
17195: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17196: LD_VAR 0 1
17200: PPUSH
17201: CALL_OW 255
17205: PUSH
17206: LD_INT 3
17208: EQUAL
17209: PUSH
17210: LD_VAR 0 1
17214: PPUSH
17215: CALL_OW 247
17219: PUSH
17220: LD_INT 3
17222: EQUAL
17223: AND
17224: IFFALSE 17916
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17226: LD_VAR 0 1
17230: PPUSH
17231: CALL_OW 266
17235: PUSH
17236: LD_INT 31
17238: EQUAL
17239: PUSH
17240: LD_VAR 0 1
17244: PPUSH
17245: CALL_OW 266
17249: PUSH
17250: LD_INT 32
17252: EQUAL
17253: OR
17254: PUSH
17255: LD_VAR 0 1
17259: PPUSH
17260: CALL_OW 266
17264: PUSH
17265: LD_INT 36
17267: EQUAL
17268: OR
17269: PUSH
17270: LD_VAR 0 1
17274: PPUSH
17275: CALL_OW 266
17279: PUSH
17280: LD_INT 0
17282: EQUAL
17283: OR
17284: PUSH
17285: LD_VAR 0 1
17289: PPUSH
17290: CALL_OW 266
17294: PUSH
17295: LD_INT 24
17297: EQUAL
17298: OR
17299: PUSH
17300: LD_VAR 0 1
17304: PPUSH
17305: CALL_OW 266
17309: PUSH
17310: LD_INT 17
17312: EQUAL
17313: OR
17314: PUSH
17315: LD_VAR 0 1
17319: PPUSH
17320: CALL_OW 266
17324: PUSH
17325: LD_INT 25
17327: EQUAL
17328: OR
17329: PUSH
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 266
17339: PUSH
17340: LD_INT 19
17342: EQUAL
17343: OR
17344: PUSH
17345: LD_VAR 0 1
17349: PPUSH
17350: CALL_OW 266
17354: PUSH
17355: LD_INT 20
17357: EQUAL
17358: OR
17359: PUSH
17360: LD_VAR 0 1
17364: PPUSH
17365: CALL_OW 266
17369: PUSH
17370: LD_INT 18
17372: EQUAL
17373: OR
17374: PUSH
17375: LD_VAR 0 1
17379: PPUSH
17380: CALL_OW 266
17384: PUSH
17385: LD_INT 21
17387: EQUAL
17388: OR
17389: PUSH
17390: LD_VAR 0 1
17394: PPUSH
17395: CALL_OW 266
17399: PUSH
17400: LD_INT 23
17402: EQUAL
17403: OR
17404: PUSH
17405: LD_VAR 0 1
17409: PPUSH
17410: CALL_OW 266
17414: PUSH
17415: LD_INT 16
17417: EQUAL
17418: OR
17419: PUSH
17420: LD_VAR 0 1
17424: PPUSH
17425: CALL_OW 266
17429: PUSH
17430: LD_INT 6
17432: EQUAL
17433: OR
17434: PUSH
17435: LD_VAR 0 1
17439: PPUSH
17440: CALL_OW 266
17444: PUSH
17445: LD_INT 29
17447: EQUAL
17448: OR
17449: PUSH
17450: LD_VAR 0 1
17454: PPUSH
17455: CALL_OW 266
17459: PUSH
17460: LD_INT 26
17462: EQUAL
17463: OR
17464: PUSH
17465: LD_VAR 0 1
17469: PPUSH
17470: CALL_OW 266
17474: PUSH
17475: LD_INT 30
17477: EQUAL
17478: OR
17479: PUSH
17480: LD_VAR 0 1
17484: PPUSH
17485: CALL_OW 266
17489: PUSH
17490: LD_INT 28
17492: EQUAL
17493: OR
17494: PUSH
17495: LD_VAR 0 1
17499: PPUSH
17500: CALL_OW 266
17504: PUSH
17505: LD_INT 27
17507: EQUAL
17508: OR
17509: PUSH
17510: LD_VAR 0 1
17514: PPUSH
17515: CALL_OW 266
17519: PUSH
17520: LD_INT 33
17522: EQUAL
17523: OR
17524: PUSH
17525: LD_VAR 0 1
17529: PPUSH
17530: CALL_OW 266
17534: PUSH
17535: LD_INT 2
17537: EQUAL
17538: OR
17539: PUSH
17540: LD_VAR 0 1
17544: PPUSH
17545: CALL_OW 266
17549: PUSH
17550: LD_INT 4
17552: EQUAL
17553: OR
17554: IFFALSE 17640
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17556: LD_ADDR_EXP 31
17560: PUSH
17561: LD_EXP 31
17565: PUSH
17566: LD_VAR 0 1
17570: PPUSH
17571: CALL_OW 266
17575: ADD
17576: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17577: LD_ADDR_EXP 31
17581: PUSH
17582: LD_EXP 31
17586: PUSH
17587: LD_VAR 0 1
17591: PPUSH
17592: CALL_OW 250
17596: ADD
17597: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17598: LD_ADDR_EXP 31
17602: PUSH
17603: LD_EXP 31
17607: PUSH
17608: LD_VAR 0 1
17612: PPUSH
17613: CALL_OW 251
17617: ADD
17618: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17619: LD_ADDR_EXP 31
17623: PUSH
17624: LD_EXP 31
17628: PUSH
17629: LD_VAR 0 1
17633: PPUSH
17634: CALL_OW 254
17638: ADD
17639: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17640: LD_VAR 0 1
17644: PPUSH
17645: CALL_OW 266
17649: PUSH
17650: LD_INT 1
17652: EQUAL
17653: IFFALSE 17732
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17655: LD_ADDR_EXP 31
17659: PUSH
17660: LD_EXP 31
17664: PUSH
17665: LD_INT 0
17667: ADD
17668: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17669: LD_ADDR_EXP 31
17673: PUSH
17674: LD_EXP 31
17678: PUSH
17679: LD_VAR 0 1
17683: PPUSH
17684: CALL_OW 250
17688: ADD
17689: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17690: LD_ADDR_EXP 31
17694: PUSH
17695: LD_EXP 31
17699: PUSH
17700: LD_VAR 0 1
17704: PPUSH
17705: CALL_OW 251
17709: ADD
17710: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17711: LD_ADDR_EXP 31
17715: PUSH
17716: LD_EXP 31
17720: PUSH
17721: LD_VAR 0 1
17725: PPUSH
17726: CALL_OW 254
17730: ADD
17731: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17732: LD_VAR 0 1
17736: PPUSH
17737: CALL_OW 266
17741: PUSH
17742: LD_INT 3
17744: EQUAL
17745: IFFALSE 17824
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17747: LD_ADDR_EXP 31
17751: PUSH
17752: LD_EXP 31
17756: PUSH
17757: LD_INT 2
17759: ADD
17760: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17761: LD_ADDR_EXP 31
17765: PUSH
17766: LD_EXP 31
17770: PUSH
17771: LD_VAR 0 1
17775: PPUSH
17776: CALL_OW 250
17780: ADD
17781: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17782: LD_ADDR_EXP 31
17786: PUSH
17787: LD_EXP 31
17791: PUSH
17792: LD_VAR 0 1
17796: PPUSH
17797: CALL_OW 251
17801: ADD
17802: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17803: LD_ADDR_EXP 31
17807: PUSH
17808: LD_EXP 31
17812: PUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: CALL_OW 254
17822: ADD
17823: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17824: LD_VAR 0 1
17828: PPUSH
17829: CALL_OW 266
17833: PUSH
17834: LD_INT 5
17836: EQUAL
17837: IFFALSE 17916
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17839: LD_ADDR_EXP 31
17843: PUSH
17844: LD_EXP 31
17848: PUSH
17849: LD_INT 4
17851: ADD
17852: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17853: LD_ADDR_EXP 31
17857: PUSH
17858: LD_EXP 31
17862: PUSH
17863: LD_VAR 0 1
17867: PPUSH
17868: CALL_OW 250
17872: ADD
17873: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17874: LD_ADDR_EXP 31
17878: PUSH
17879: LD_EXP 31
17883: PUSH
17884: LD_VAR 0 1
17888: PPUSH
17889: CALL_OW 251
17893: ADD
17894: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17895: LD_ADDR_EXP 31
17899: PUSH
17900: LD_EXP 31
17904: PUSH
17905: LD_VAR 0 1
17909: PPUSH
17910: CALL_OW 254
17914: ADD
17915: ST_TO_ADDR
// end ; end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17916: LD_EXP 48
17920: PUSH
17921: LD_VAR 0 1
17925: PPUSH
17926: CALL_OW 257
17930: PUSH
17931: LD_INT 3
17933: EQUAL
17934: AND
17935: PUSH
17936: LD_VAR 0 1
17940: PPUSH
17941: CALL_OW 255
17945: PUSH
17946: LD_INT 3
17948: EQUAL
17949: AND
17950: PUSH
17951: LD_INT 21
17953: PPUSH
17954: CALL_OW 302
17958: AND
17959: PUSH
17960: LD_INT 21
17962: PPUSH
17963: CALL_OW 255
17967: PUSH
17968: LD_INT 3
17970: EQUAL
17971: AND
17972: IFFALSE 18054
// begin ruMechCounter := ruMechCounter - 1 ;
17974: LD_ADDR_EXP 48
17978: PUSH
17979: LD_EXP 48
17983: PUSH
17984: LD_INT 1
17986: MINUS
17987: ST_TO_ADDR
// uc_side = 3 ;
17988: LD_ADDR_OWVAR 20
17992: PUSH
17993: LD_INT 3
17995: ST_TO_ADDR
// uc_nation = 3 ;
17996: LD_ADDR_OWVAR 21
18000: PUSH
18001: LD_INT 3
18003: ST_TO_ADDR
// hc_gallery :=  ;
18004: LD_ADDR_OWVAR 33
18008: PUSH
18009: LD_STRING 
18011: ST_TO_ADDR
// hc_name :=  ;
18012: LD_ADDR_OWVAR 26
18016: PUSH
18017: LD_STRING 
18019: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18020: LD_INT 0
18022: PPUSH
18023: LD_EXP 34
18027: PPUSH
18028: LD_EXP 35
18032: PPUSH
18033: CALL_OW 12
18037: PPUSH
18038: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
18042: CALL_OW 44
18046: PPUSH
18047: LD_INT 21
18049: PPUSH
18050: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18054: LD_VAR 0 1
18058: PPUSH
18059: CALL_OW 255
18063: PUSH
18064: LD_INT 3
18066: EQUAL
18067: PUSH
18068: LD_VAR 0 1
18072: PPUSH
18073: CALL_OW 264
18077: PUSH
18078: LD_INT 52
18080: EQUAL
18081: AND
18082: PUSH
18083: LD_INT 21
18085: PPUSH
18086: CALL_OW 302
18090: AND
18091: PUSH
18092: LD_INT 21
18094: PPUSH
18095: CALL_OW 255
18099: PUSH
18100: LD_INT 3
18102: EQUAL
18103: AND
18104: IFFALSE 18125
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18106: LD_INT 21
18108: PPUSH
18109: LD_INT 22
18111: PPUSH
18112: LD_INT 1
18114: PPUSH
18115: LD_INT 1
18117: PPUSH
18118: LD_INT 52
18120: PPUSH
18121: CALL_OW 125
// end ;
18125: PPOPN 1
18127: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18128: LD_INT 0
18130: PPUSH
18131: PPUSH
18132: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18133: LD_VAR 0 1
18137: PPUSH
18138: CALL_OW 264
18142: PUSH
18143: LD_INT 51
18145: EQUAL
18146: PUSH
18147: LD_VAR 0 1
18151: PPUSH
18152: CALL_OW 255
18156: PUSH
18157: LD_INT 3
18159: EQUAL
18160: AND
18161: IFFALSE 18223
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18163: LD_ADDR_VAR 0 5
18167: PUSH
18168: LD_INT 2
18170: PPUSH
18171: CALL_OW 274
18175: PPUSH
18176: LD_INT 1
18178: PPUSH
18179: CALL_OW 275
18183: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18184: LD_INT 2
18186: PPUSH
18187: CALL_OW 274
18191: PPUSH
18192: LD_INT 1
18194: PPUSH
18195: LD_VAR 0 5
18199: PUSH
18200: LD_INT 100
18202: MINUS
18203: PPUSH
18204: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18208: LD_VAR 0 1
18212: PPUSH
18213: LD_INT 1
18215: PPUSH
18216: LD_INT 100
18218: PPUSH
18219: CALL_OW 291
// end ; if building = rufabsupp then
18223: LD_VAR 0 2
18227: PUSH
18228: LD_INT 17
18230: EQUAL
18231: IFFALSE 18245
// SetSide ( vehicle , 6 ) ;
18233: LD_VAR 0 1
18237: PPUSH
18238: LD_INT 6
18240: PPUSH
18241: CALL_OW 235
// end ;
18245: PPOPN 5
18247: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18248: LD_VAR 0 1
18252: PPUSH
18253: CALL_OW 255
18257: PUSH
18258: LD_INT 3
18260: EQUAL
18261: IFFALSE 18292
// begin tamedApemans = tamedApemans + 1 ;
18263: LD_ADDR_EXP 32
18267: PUSH
18268: LD_EXP 32
18272: PUSH
18273: LD_INT 1
18275: PLUS
18276: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18277: LD_VAR 0 1
18281: PPUSH
18282: LD_INT 106
18284: PPUSH
18285: LD_INT 85
18287: PPUSH
18288: CALL_OW 111
// end ; end ;
18292: PPOPN 2
18294: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18295: LD_INT 0
18297: PPUSH
18298: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18299: LD_VAR 0 1
18303: PPUSH
18304: CALL_OW 255
18308: PUSH
18309: LD_INT 3
18311: EQUAL
18312: PUSH
18313: LD_VAR 0 1
18317: PPUSH
18318: CALL_OW 247
18322: PUSH
18323: LD_INT 2
18325: EQUAL
18326: AND
18327: IFFALSE 18436
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18329: LD_VAR 0 1
18333: PPUSH
18334: CALL_OW 264
18338: PUSH
18339: LD_INT 42
18341: EQUAL
18342: PUSH
18343: LD_VAR 0 1
18347: PPUSH
18348: CALL_OW 264
18352: PUSH
18353: LD_INT 43
18355: EQUAL
18356: OR
18357: PUSH
18358: LD_VAR 0 1
18362: PPUSH
18363: CALL_OW 264
18367: PUSH
18368: LD_INT 44
18370: EQUAL
18371: OR
18372: PUSH
18373: LD_VAR 0 1
18377: PPUSH
18378: CALL_OW 264
18382: PUSH
18383: LD_INT 46
18385: EQUAL
18386: OR
18387: IFFALSE 18436
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18389: LD_INT 21
18391: PPUSH
18392: LD_VAR 0 1
18396: PPUSH
18397: CALL_OW 265
18401: PPUSH
18402: LD_VAR 0 1
18406: PPUSH
18407: CALL_OW 262
18411: PPUSH
18412: LD_VAR 0 1
18416: PPUSH
18417: CALL_OW 263
18421: PPUSH
18422: LD_VAR 0 1
18426: PPUSH
18427: CALL_OW 264
18431: PPUSH
18432: CALL_OW 185
// end ;
18436: PPOPN 3
18438: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18439: LD_VAR 0 1
18443: PPUSH
18444: CALL_OW 255
18448: PUSH
18449: LD_INT 3
18451: EQUAL
18452: PUSH
18453: LD_VAR 0 2
18457: PPUSH
18458: CALL_OW 255
18462: PUSH
18463: LD_INT 3
18465: EQUAL
18466: AND
18467: PUSH
18468: LD_VAR 0 1
18472: PPUSH
18473: CALL_OW 302
18477: AND
18478: IFFALSE 18520
// begin ComRepairVehicle ( human , vehicle ) ;
18480: LD_VAR 0 2
18484: PPUSH
18485: LD_VAR 0 1
18489: PPUSH
18490: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18494: LD_VAR 0 2
18498: PPUSH
18499: LD_VAR 0 1
18503: PPUSH
18504: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18508: LD_VAR 0 1
18512: PPUSH
18513: LD_INT 100
18515: PPUSH
18516: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18520: LD_VAR 0 1
18524: PPUSH
18525: CALL_OW 255
18529: PUSH
18530: LD_INT 3
18532: EQUAL
18533: PUSH
18534: LD_VAR 0 2
18538: PPUSH
18539: CALL_OW 255
18543: PUSH
18544: LD_INT 3
18546: EQUAL
18547: AND
18548: PUSH
18549: LD_INT 21
18551: PPUSH
18552: CALL_OW 302
18556: AND
18557: PUSH
18558: LD_VAR 0 1
18562: PPUSH
18563: CALL_OW 302
18567: NOT
18568: AND
18569: IFFALSE 18583
// ComEnterUnit ( human , rufab ) ;
18571: LD_VAR 0 2
18575: PPUSH
18576: LD_INT 21
18578: PPUSH
18579: CALL_OW 120
// end ;
18583: PPOPN 2
18585: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18586: LD_VAR 0 1
18590: PUSH
18591: LD_INT 21
18593: EQUAL
18594: PUSH
18595: LD_VAR 0 2
18599: PPUSH
18600: CALL_OW 255
18604: PUSH
18605: LD_INT 3
18607: EQUAL
18608: AND
18609: IFFALSE 18623
// SetLives ( human , 1000 ) ;
18611: LD_VAR 0 2
18615: PPUSH
18616: LD_INT 1000
18618: PPUSH
18619: CALL_OW 234
// end ;
18623: PPOPN 2
18625: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18626: LD_VAR 0 1
18630: PPUSH
18631: CALL 24331 0 1
// end ; end_of_file
18635: PPOPN 1
18637: END
// every 0 0$30 trigger cratesStatus = 1 do
18638: LD_EXP 38
18642: PUSH
18643: LD_INT 1
18645: EQUAL
18646: IFFALSE 18729
18648: GO 18650
18650: DISABLE
// begin enable ;
18651: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18652: LD_INT 350
18654: PUSH
18655: LD_INT 1050
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 1
18664: PPUSH
18665: LD_INT 2
18667: PPUSH
18668: CALL_OW 12
18672: ARRAY
18673: PPUSH
18674: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18678: LD_INT 4
18680: PUSH
18681: LD_INT 5
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 1
18690: PPUSH
18691: LD_INT 2
18693: PPUSH
18694: CALL_OW 12
18698: ARRAY
18699: PPUSH
18700: LD_INT 6
18702: PUSH
18703: LD_INT 7
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 1
18712: PPUSH
18713: LD_INT 2
18715: PPUSH
18716: CALL_OW 12
18720: ARRAY
18721: PPUSH
18722: LD_INT 1
18724: PPUSH
18725: CALL_OW 55
// end ;
18729: END
// every 1 1$0 trigger cratesStatus = 2 do
18730: LD_EXP 38
18734: PUSH
18735: LD_INT 2
18737: EQUAL
18738: IFFALSE 18821
18740: GO 18742
18742: DISABLE
// begin enable ;
18743: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18744: LD_INT 3150
18746: PUSH
18747: LD_INT 4550
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 1
18756: PPUSH
18757: LD_INT 2
18759: PPUSH
18760: CALL_OW 12
18764: ARRAY
18765: PPUSH
18766: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18770: LD_INT 2
18772: PUSH
18773: LD_INT 5
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 1
18782: PPUSH
18783: LD_INT 2
18785: PPUSH
18786: CALL_OW 12
18790: ARRAY
18791: PPUSH
18792: LD_INT 6
18794: PUSH
18795: LD_INT 7
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PUSH
18802: LD_INT 1
18804: PPUSH
18805: LD_INT 2
18807: PPUSH
18808: CALL_OW 12
18812: ARRAY
18813: PPUSH
18814: LD_INT 1
18816: PPUSH
18817: CALL_OW 55
// end ;
18821: END
// every 0 0$30 + 0 0$10 do
18822: GO 18824
18824: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18825: LD_INT 4
18827: PUSH
18828: LD_INT 5
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 1
18837: PPUSH
18838: LD_INT 2
18840: PPUSH
18841: CALL_OW 12
18845: ARRAY
18846: PPUSH
18847: LD_INT 7
18849: PPUSH
18850: LD_INT 1
18852: PPUSH
18853: CALL_OW 55
// Wait ( 0 0$15 ) ;
18857: LD_INT 525
18859: PPUSH
18860: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18864: LD_INT 4
18866: PUSH
18867: LD_INT 5
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 1
18876: PPUSH
18877: LD_INT 2
18879: PPUSH
18880: CALL_OW 12
18884: ARRAY
18885: PPUSH
18886: LD_INT 7
18888: PPUSH
18889: LD_INT 1
18891: PPUSH
18892: CALL_OW 55
// Wait ( 0 0$20 ) ;
18896: LD_INT 700
18898: PPUSH
18899: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18903: LD_INT 4
18905: PUSH
18906: LD_INT 5
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 1
18915: PPUSH
18916: LD_INT 2
18918: PPUSH
18919: CALL_OW 12
18923: ARRAY
18924: PPUSH
18925: LD_INT 7
18927: PPUSH
18928: LD_INT 1
18930: PPUSH
18931: CALL_OW 55
// end ; end_of_file
18935: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
18936: LD_EXP 24
18940: PUSH
18941: LD_INT 1
18943: EQUAL
18944: IFFALSE 19245
18946: GO 18948
18948: DISABLE
18949: LD_INT 0
18951: PPUSH
18952: PPUSH
18953: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18954: LD_ADDR_VAR 0 2
18958: PUSH
18959: LD_INT 22
18961: PUSH
18962: LD_INT 1
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 21
18971: PUSH
18972: LD_INT 3
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 2
18981: PUSH
18982: LD_INT 30
18984: PUSH
18985: LD_INT 0
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 30
18994: PUSH
18995: LD_INT 1
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: LIST
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: LIST
19011: PPUSH
19012: CALL_OW 69
19016: ST_TO_ADDR
// for i in tmp do
19017: LD_ADDR_VAR 0 1
19021: PUSH
19022: LD_VAR 0 2
19026: PUSH
19027: FOR_IN
19028: IFFALSE 19061
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19030: LD_ADDR_VAR 0 3
19034: PUSH
19035: LD_VAR 0 3
19039: PUSH
19040: LD_VAR 0 1
19044: PPUSH
19045: CALL_OW 274
19049: PPUSH
19050: LD_INT 1
19052: PPUSH
19053: CALL_OW 275
19057: PLUS
19058: ST_TO_ADDR
19059: GO 19027
19061: POP
19062: POP
// strings = [ ] ;
19063: LD_ADDR_EXP 27
19067: PUSH
19068: EMPTY
19069: ST_TO_ADDR
// if tmp = 0 then
19070: LD_VAR 0 2
19074: PUSH
19075: LD_INT 0
19077: EQUAL
19078: IFFALSE 19103
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19080: LD_ADDR_EXP 27
19084: PUSH
19085: LD_EXP 27
19089: PUSH
19090: LD_STRING #Am06-1
19092: PUSH
19093: LD_EXP 25
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: ADD
19102: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19103: LD_VAR 0 2
19107: PUSH
19108: LD_INT 0
19110: GREATER
19111: PUSH
19112: LD_EXP 25
19116: PUSH
19117: LD_VAR 0 3
19121: GREATER
19122: AND
19123: IFFALSE 19154
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19125: LD_ADDR_EXP 27
19129: PUSH
19130: LD_EXP 27
19134: PUSH
19135: LD_STRING #Am06-1
19137: PUSH
19138: LD_EXP 25
19142: PUSH
19143: LD_VAR 0 3
19147: MINUS
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: ADD
19153: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19154: LD_VAR 0 2
19158: PUSH
19159: LD_INT 0
19161: GREATER
19162: PUSH
19163: LD_EXP 25
19167: PUSH
19168: LD_VAR 0 3
19172: LESSEQUAL
19173: AND
19174: IFFALSE 19197
// strings = strings ^ [ #Am06-1 , 0 ] ;
19176: LD_ADDR_EXP 27
19180: PUSH
19181: LD_EXP 27
19185: PUSH
19186: LD_STRING #Am06-1
19188: PUSH
19189: LD_INT 0
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: ADD
19196: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19197: LD_ADDR_EXP 26
19201: PUSH
19202: LD_EXP 26
19206: PUSH
19207: LD_INT 35
19209: MINUS
19210: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19211: LD_ADDR_EXP 27
19215: PUSH
19216: LD_EXP 27
19220: PUSH
19221: LD_STRING #Am06-2
19223: PUSH
19224: LD_EXP 26
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: ADD
19233: ST_TO_ADDR
// display_strings = strings ;
19234: LD_ADDR_OWVAR 47
19238: PUSH
19239: LD_EXP 27
19243: ST_TO_ADDR
// enable ;
19244: ENABLE
// end ; end_of_file
19245: PPOPN 3
19247: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19248: LD_INT 0
19250: PPUSH
19251: PPUSH
19252: PPUSH
19253: PPUSH
19254: PPUSH
19255: PPUSH
19256: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19257: LD_ADDR_VAR 0 3
19261: PUSH
19262: LD_INT 22
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 2
19274: PUSH
19275: LD_INT 30
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 30
19287: PUSH
19288: LD_INT 1
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: LIST
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PPUSH
19304: CALL_OW 69
19308: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19309: LD_INT 35
19311: PPUSH
19312: CALL_OW 67
// until depot ;
19316: LD_VAR 0 3
19320: IFFALSE 19257
// repeat wait ( 0 0$1 ) ;
19322: LD_INT 35
19324: PPUSH
19325: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19329: LD_ADDR_VAR 0 4
19333: PUSH
19334: LD_INT 22
19336: PUSH
19337: LD_INT 1
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 91
19346: PUSH
19347: LD_VAR 0 3
19351: PUSH
19352: LD_INT 1
19354: ARRAY
19355: PUSH
19356: LD_INT 15
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 21
19366: PUSH
19367: LD_INT 1
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 2
19376: PUSH
19377: LD_INT 25
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 25
19389: PUSH
19390: LD_INT 2
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 25
19399: PUSH
19400: LD_INT 3
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 25
19409: PUSH
19410: LD_INT 4
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 3
19426: PUSH
19427: LD_INT 54
19429: PUSH
19430: EMPTY
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 3
19439: PUSH
19440: LD_INT 55
19442: PUSH
19443: EMPTY
19444: LIST
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: PPUSH
19458: CALL_OW 69
19462: PUSH
19463: LD_EXP 2
19467: PUSH
19468: LD_EXP 3
19472: PUSH
19473: LD_EXP 4
19477: PUSH
19478: LD_EXP 5
19482: PUSH
19483: LD_EXP 7
19487: PUSH
19488: LD_EXP 8
19492: PUSH
19493: LD_EXP 9
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: PUSH
19507: LD_EXP 46
19511: ADD
19512: DIFF
19513: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19514: LD_VAR 0 4
19518: PUSH
19519: LD_INT 1
19521: PPUSH
19522: CALL_OW 463
19526: NOT
19527: AND
19528: IFFALSE 19322
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19530: LD_ADDR_VAR 0 4
19534: PUSH
19535: LD_VAR 0 4
19539: PUSH
19540: LD_INT 1
19542: PPUSH
19543: LD_VAR 0 4
19547: PPUSH
19548: CALL_OW 12
19552: ARRAY
19553: ST_TO_ADDR
// blockSpawn = 1 ;
19554: LD_ADDR_EXP 29
19558: PUSH
19559: LD_INT 1
19561: ST_TO_ADDR
// uc_side = 2 ;
19562: LD_ADDR_OWVAR 20
19566: PUSH
19567: LD_INT 2
19569: ST_TO_ADDR
// uc_nation = 2 ;
19570: LD_ADDR_OWVAR 21
19574: PUSH
19575: LD_INT 2
19577: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19578: LD_ADDR_EXP 19
19582: PUSH
19583: LD_STRING Kurt
19585: PPUSH
19586: LD_INT 0
19588: PPUSH
19589: CALL 5968 0 2
19593: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19594: LD_EXP 19
19598: PPUSH
19599: LD_VAR 0 4
19603: PPUSH
19604: CALL_OW 250
19608: PPUSH
19609: LD_VAR 0 4
19613: PPUSH
19614: CALL_OW 251
19618: PPUSH
19619: LD_INT 5
19621: PPUSH
19622: LD_INT 1
19624: PPUSH
19625: CALL_OW 50
// InGameOn ;
19629: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19633: LD_EXP 19
19637: PPUSH
19638: CALL_OW 87
// wait ( 0 0$2 ) ;
19642: LD_INT 70
19644: PPUSH
19645: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19649: LD_EXP 19
19653: PPUSH
19654: LD_VAR 0 4
19658: PPUSH
19659: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19663: LD_VAR 0 4
19667: PPUSH
19668: LD_EXP 19
19672: PPUSH
19673: CALL_OW 112
// wait ( 0 0$1 ) ;
19677: LD_INT 35
19679: PPUSH
19680: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19684: LD_VAR 0 4
19688: PPUSH
19689: LD_EXP 19
19693: PPUSH
19694: CALL_OW 119
// DialogueOn ;
19698: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19702: LD_EXP 19
19706: PPUSH
19707: LD_STRING D2-Kurt-1
19709: PPUSH
19710: CALL_OW 88
// if tmp = JMM then
19714: LD_VAR 0 4
19718: PUSH
19719: LD_EXP 1
19723: EQUAL
19724: IFFALSE 19816
// begin Say ( JMM , D2-JMM-1 ) ;
19726: LD_EXP 1
19730: PPUSH
19731: LD_STRING D2-JMM-1
19733: PPUSH
19734: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19738: LD_EXP 19
19742: PPUSH
19743: LD_STRING D2-Kurt-2
19745: PPUSH
19746: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19750: LD_EXP 1
19754: PPUSH
19755: LD_STRING D2-JMM-2
19757: PPUSH
19758: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19762: LD_EXP 19
19766: PPUSH
19767: LD_STRING D2-Kurt-3
19769: PPUSH
19770: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19774: LD_EXP 1
19778: PPUSH
19779: LD_STRING D2-JMM-3
19781: PPUSH
19782: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19786: LD_EXP 19
19790: PPUSH
19791: LD_STRING D2-Kurt-4
19793: PPUSH
19794: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19798: LD_EXP 1
19802: PPUSH
19803: LD_STRING D2-JMM-4
19805: PPUSH
19806: CALL_OW 88
// DialogueOff ;
19810: CALL_OW 7
// end else
19814: GO 20126
// begin if GetSex ( tmp ) = 1 then
19816: LD_VAR 0 4
19820: PPUSH
19821: CALL_OW 258
19825: PUSH
19826: LD_INT 1
19828: EQUAL
19829: IFFALSE 19843
// Say ( tmp , D2-Sol1-1 ) ;
19831: LD_VAR 0 4
19835: PPUSH
19836: LD_STRING D2-Sol1-1
19838: PPUSH
19839: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19843: LD_VAR 0 4
19847: PPUSH
19848: CALL_OW 258
19852: PUSH
19853: LD_INT 2
19855: EQUAL
19856: IFFALSE 19870
// Say ( tmp , D2-FSol1-1 ) ;
19858: LD_VAR 0 4
19862: PPUSH
19863: LD_STRING D2-FSol1-1
19865: PPUSH
19866: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19870: LD_EXP 19
19874: PPUSH
19875: LD_STRING D2-Kurt-2
19877: PPUSH
19878: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19882: LD_VAR 0 4
19886: PPUSH
19887: CALL_OW 258
19891: PUSH
19892: LD_INT 1
19894: EQUAL
19895: IFFALSE 19909
// Say ( tmp , D2-Sol1-2 ) ;
19897: LD_VAR 0 4
19901: PPUSH
19902: LD_STRING D2-Sol1-2
19904: PPUSH
19905: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19909: LD_VAR 0 4
19913: PPUSH
19914: CALL_OW 258
19918: PUSH
19919: LD_INT 2
19921: EQUAL
19922: IFFALSE 19936
// Say ( tmp , D2-FSol1-2 ) ;
19924: LD_VAR 0 4
19928: PPUSH
19929: LD_STRING D2-FSol1-2
19931: PPUSH
19932: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19936: LD_EXP 19
19940: PPUSH
19941: LD_STRING D2-Kurt-3
19943: PPUSH
19944: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19948: LD_VAR 0 4
19952: PPUSH
19953: CALL_OW 258
19957: PUSH
19958: LD_INT 1
19960: EQUAL
19961: IFFALSE 19975
// Say ( tmp , D2-Sol1-3 ) ;
19963: LD_VAR 0 4
19967: PPUSH
19968: LD_STRING D2-Sol1-3
19970: PPUSH
19971: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19975: LD_VAR 0 4
19979: PPUSH
19980: CALL_OW 258
19984: PUSH
19985: LD_INT 2
19987: EQUAL
19988: IFFALSE 20002
// Say ( tmp , D2-FSol1-3 ) ;
19990: LD_VAR 0 4
19994: PPUSH
19995: LD_STRING D2-FSol1-3
19997: PPUSH
19998: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20002: LD_EXP 19
20006: PPUSH
20007: LD_STRING D2-Kurt-4
20009: PPUSH
20010: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20014: LD_VAR 0 4
20018: PPUSH
20019: CALL_OW 258
20023: PUSH
20024: LD_INT 1
20026: EQUAL
20027: IFFALSE 20041
// Say ( tmp , D2-Sol1-4 ) ;
20029: LD_VAR 0 4
20033: PPUSH
20034: LD_STRING D2-Sol1-4
20036: PPUSH
20037: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20041: LD_VAR 0 4
20045: PPUSH
20046: CALL_OW 258
20050: PUSH
20051: LD_INT 2
20053: EQUAL
20054: IFFALSE 20068
// Say ( tmp , D2-FSol1-4 ) ;
20056: LD_VAR 0 4
20060: PPUSH
20061: LD_STRING D2-FSol1-4
20063: PPUSH
20064: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20068: LD_VAR 0 4
20072: PPUSH
20073: CALL_OW 258
20077: PUSH
20078: LD_INT 1
20080: EQUAL
20081: IFFALSE 20095
// Say ( tmp , D2-Sol1-5 ) ;
20083: LD_VAR 0 4
20087: PPUSH
20088: LD_STRING D2-Sol1-5
20090: PPUSH
20091: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20095: LD_VAR 0 4
20099: PPUSH
20100: CALL_OW 258
20104: PUSH
20105: LD_INT 2
20107: EQUAL
20108: IFFALSE 20122
// Say ( tmp , D2-FSol1-5 ) ;
20110: LD_VAR 0 4
20114: PPUSH
20115: LD_STRING D2-FSol1-5
20117: PPUSH
20118: CALL_OW 88
// DialogueOff ;
20122: CALL_OW 7
// end ; dec = ShowQuery1 ;
20126: LD_ADDR_VAR 0 6
20130: PUSH
20131: CALL 6492 0 0
20135: ST_TO_ADDR
// if dec = 1 then
20136: LD_VAR 0 6
20140: PUSH
20141: LD_INT 1
20143: EQUAL
20144: IFFALSE 20186
// begin DialogueOn ;
20146: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20150: LD_EXP 19
20154: PPUSH
20155: LD_STRING D2a-Kurt-1
20157: PPUSH
20158: CALL_OW 88
// DialogueOff ;
20162: CALL_OW 7
// InGameOff ;
20166: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20170: LD_INT 1
20172: PPUSH
20173: LD_INT 2
20175: PPUSH
20176: LD_INT 2
20178: PPUSH
20179: LD_INT 1
20181: PPUSH
20182: CALL_OW 80
// end ; if dec = 2 then
20186: LD_VAR 0 6
20190: PUSH
20191: LD_INT 2
20193: EQUAL
20194: IFFALSE 20694
// begin DialogueOn ;
20196: CALL_OW 6
// if tmp = JMM then
20200: LD_VAR 0 4
20204: PUSH
20205: LD_EXP 1
20209: EQUAL
20210: IFFALSE 20266
// begin Say ( JMM , D2b-JMM-1 ) ;
20212: LD_EXP 1
20216: PPUSH
20217: LD_STRING D2b-JMM-1
20219: PPUSH
20220: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20224: LD_EXP 19
20228: PPUSH
20229: LD_STRING D2b-Kurt-1
20231: PPUSH
20232: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20236: LD_EXP 1
20240: PPUSH
20241: LD_STRING D2b-JMM-2
20243: PPUSH
20244: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20248: LD_EXP 19
20252: PPUSH
20253: LD_STRING D2b-Kurt-2
20255: PPUSH
20256: CALL_OW 88
// DialogueOff ;
20260: CALL_OW 7
// end else
20264: GO 20456
// begin if GetSex ( tmp ) = 1 then
20266: LD_VAR 0 4
20270: PPUSH
20271: CALL_OW 258
20275: PUSH
20276: LD_INT 1
20278: EQUAL
20279: IFFALSE 20293
// Say ( tmp , D2b-Sol1-1 ) ;
20281: LD_VAR 0 4
20285: PPUSH
20286: LD_STRING D2b-Sol1-1
20288: PPUSH
20289: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20293: LD_VAR 0 4
20297: PPUSH
20298: CALL_OW 258
20302: PUSH
20303: LD_INT 2
20305: EQUAL
20306: IFFALSE 20320
// Say ( tmp , D2b-FSol1-1 ) ;
20308: LD_VAR 0 4
20312: PPUSH
20313: LD_STRING D2b-FSol1-1
20315: PPUSH
20316: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20320: LD_EXP 19
20324: PPUSH
20325: LD_STRING D2b-Kurt-1
20327: PPUSH
20328: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20332: LD_VAR 0 4
20336: PPUSH
20337: CALL_OW 258
20341: PUSH
20342: LD_INT 1
20344: EQUAL
20345: IFFALSE 20359
// Say ( tmp , D2b-Sol1-2 ) ;
20347: LD_VAR 0 4
20351: PPUSH
20352: LD_STRING D2b-Sol1-2
20354: PPUSH
20355: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20359: LD_VAR 0 4
20363: PPUSH
20364: CALL_OW 258
20368: PUSH
20369: LD_INT 2
20371: EQUAL
20372: IFFALSE 20386
// Say ( tmp , D2b-FSol1-2 ) ;
20374: LD_VAR 0 4
20378: PPUSH
20379: LD_STRING D2b-FSol1-2
20381: PPUSH
20382: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20386: LD_EXP 19
20390: PPUSH
20391: LD_STRING D2b-Kurt-2
20393: PPUSH
20394: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20398: LD_VAR 0 4
20402: PPUSH
20403: CALL_OW 258
20407: PUSH
20408: LD_INT 1
20410: EQUAL
20411: IFFALSE 20425
// Say ( tmp , D2c-Sol1-2 ) ;
20413: LD_VAR 0 4
20417: PPUSH
20418: LD_STRING D2c-Sol1-2
20420: PPUSH
20421: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20425: LD_VAR 0 4
20429: PPUSH
20430: CALL_OW 258
20434: PUSH
20435: LD_INT 2
20437: EQUAL
20438: IFFALSE 20452
// Say ( tmp , D2c-FSol1-2 ) ;
20440: LD_VAR 0 4
20444: PPUSH
20445: LD_STRING D2c-FSol1-2
20447: PPUSH
20448: CALL_OW 88
// DialogueOff ;
20452: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20456: LD_ADDR_VAR 0 7
20460: PUSH
20461: CALL 6566 0 0
20465: ST_TO_ADDR
// if dec2 = 1 then
20466: LD_VAR 0 7
20470: PUSH
20471: LD_INT 1
20473: EQUAL
20474: IFFALSE 20516
// begin DialogueOn ;
20476: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20480: LD_EXP 19
20484: PPUSH
20485: LD_STRING D2a-Kurt-1
20487: PPUSH
20488: CALL_OW 88
// DialogueOff ;
20492: CALL_OW 7
// InGameOff ;
20496: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20500: LD_INT 1
20502: PPUSH
20503: LD_INT 2
20505: PPUSH
20506: LD_INT 2
20508: PPUSH
20509: LD_INT 1
20511: PPUSH
20512: CALL_OW 80
// end ; if dec2 = 2 then
20516: LD_VAR 0 7
20520: PUSH
20521: LD_INT 2
20523: EQUAL
20524: IFFALSE 20694
// begin if tmp = JMM then
20526: LD_VAR 0 4
20530: PUSH
20531: LD_EXP 1
20535: EQUAL
20536: IFFALSE 20596
// begin DialogueOn ;
20538: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20542: LD_EXP 1
20546: PPUSH
20547: LD_STRING D2c-JMM-1
20549: PPUSH
20550: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20554: LD_EXP 19
20558: PPUSH
20559: LD_STRING D2c-Kurt-1
20561: PPUSH
20562: CALL_OW 88
// DialogueOff ;
20566: CALL_OW 7
// InGameOff ;
20570: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20574: LD_EXP 19
20578: PPUSH
20579: LD_INT 8
20581: PPUSH
20582: CALL_OW 113
// readyToEscape = 1 ;
20586: LD_ADDR_EXP 21
20590: PUSH
20591: LD_INT 1
20593: ST_TO_ADDR
// end else
20594: GO 20694
// begin DialogueOn ;
20596: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20600: LD_VAR 0 4
20604: PPUSH
20605: CALL_OW 258
20609: PUSH
20610: LD_INT 1
20612: EQUAL
20613: IFFALSE 20627
// Say ( tmp , D2c-Sol1-1 ) ;
20615: LD_VAR 0 4
20619: PPUSH
20620: LD_STRING D2c-Sol1-1
20622: PPUSH
20623: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20627: LD_VAR 0 4
20631: PPUSH
20632: CALL_OW 258
20636: PUSH
20637: LD_INT 2
20639: EQUAL
20640: IFFALSE 20654
// Say ( tmp , D2c-FSol1-1 ) ;
20642: LD_VAR 0 4
20646: PPUSH
20647: LD_STRING D2c-FSol1-1
20649: PPUSH
20650: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20654: LD_EXP 19
20658: PPUSH
20659: LD_STRING D2c-Kurt-1
20661: PPUSH
20662: CALL_OW 88
// DialogueOff ;
20666: CALL_OW 7
// InGameOff ;
20670: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20674: LD_EXP 19
20678: PPUSH
20679: LD_INT 8
20681: PPUSH
20682: CALL_OW 113
// readyToEscape = 1 ;
20686: LD_ADDR_EXP 21
20690: PUSH
20691: LD_INT 1
20693: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20694: LD_VAR 0 6
20698: PUSH
20699: LD_INT 3
20701: EQUAL
20702: IFFALSE 20876
// begin DialogueOn ;
20704: CALL_OW 6
// if tmp = JMM then
20708: LD_VAR 0 4
20712: PUSH
20713: LD_EXP 1
20717: EQUAL
20718: IFFALSE 20778
// begin DialogueOn ;
20720: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20724: LD_EXP 1
20728: PPUSH
20729: LD_STRING D2c-JMM-1
20731: PPUSH
20732: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20736: LD_EXP 19
20740: PPUSH
20741: LD_STRING D2c-Kurt-1
20743: PPUSH
20744: CALL_OW 88
// DialogueOff ;
20748: CALL_OW 7
// InGameOff ;
20752: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20756: LD_EXP 19
20760: PPUSH
20761: LD_INT 8
20763: PPUSH
20764: CALL_OW 113
// readyToEscape = 1 ;
20768: LD_ADDR_EXP 21
20772: PUSH
20773: LD_INT 1
20775: ST_TO_ADDR
// end else
20776: GO 20876
// begin DialogueOn ;
20778: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20782: LD_VAR 0 4
20786: PPUSH
20787: CALL_OW 258
20791: PUSH
20792: LD_INT 1
20794: EQUAL
20795: IFFALSE 20809
// Say ( tmp , D2c-Sol1-1 ) ;
20797: LD_VAR 0 4
20801: PPUSH
20802: LD_STRING D2c-Sol1-1
20804: PPUSH
20805: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20809: LD_VAR 0 4
20813: PPUSH
20814: CALL_OW 258
20818: PUSH
20819: LD_INT 2
20821: EQUAL
20822: IFFALSE 20836
// Say ( tmp , D2c-FSol1-1 ) ;
20824: LD_VAR 0 4
20828: PPUSH
20829: LD_STRING D2c-FSol1-1
20831: PPUSH
20832: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20836: LD_EXP 19
20840: PPUSH
20841: LD_STRING D2c-Kurt-1
20843: PPUSH
20844: CALL_OW 88
// DialogueOff ;
20848: CALL_OW 7
// InGameOff ;
20852: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20856: LD_EXP 19
20860: PPUSH
20861: LD_INT 8
20863: PPUSH
20864: CALL_OW 113
// readyToEscape = 1 ;
20868: LD_ADDR_EXP 21
20872: PUSH
20873: LD_INT 1
20875: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
20876: LD_ADDR_EXP 29
20880: PUSH
20881: LD_INT 0
20883: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20884: LD_INT 35
20886: PPUSH
20887: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
20891: LD_EXP 19
20895: PPUSH
20896: LD_INT 8
20898: PPUSH
20899: CALL_OW 308
20903: PUSH
20904: LD_EXP 21
20908: AND
20909: PUSH
20910: LD_EXP 19
20914: PPUSH
20915: CALL_OW 301
20919: OR
20920: IFFALSE 20884
// if IsDead ( Kurt ) then
20922: LD_EXP 19
20926: PPUSH
20927: CALL_OW 301
20931: IFFALSE 20935
// exit ;
20933: GO 21004
// RemoveUnit ( Kurt ) ;
20935: LD_EXP 19
20939: PPUSH
20940: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
20944: LD_EXP 19
20948: PPUSH
20949: LD_STRING Kurt
20951: PPUSH
20952: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
20956: LD_INT 1
20958: PPUSH
20959: LD_INT 2
20961: PPUSH
20962: CALL_OW 81
20966: PUSH
20967: LD_INT 0
20969: EQUAL
20970: IFFALSE 20980
// KurtStatus = 1 ;
20972: LD_ADDR_EXP 20
20976: PUSH
20977: LD_INT 1
20979: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
20980: LD_INT 1
20982: PPUSH
20983: LD_INT 2
20985: PPUSH
20986: CALL_OW 81
20990: PUSH
20991: LD_INT 2
20993: EQUAL
20994: IFFALSE 21004
// KurtStatus = 2 ;
20996: LD_ADDR_EXP 20
21000: PUSH
21001: LD_INT 2
21003: ST_TO_ADDR
// end ; end_of_file
21004: LD_VAR 0 1
21008: RET
// every 0 0$1 do
21009: GO 21011
21011: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
21012: LD_INT 3
21014: PPUSH
21015: LD_INT 32
21017: PPUSH
21018: LD_INT 3
21020: PPUSH
21021: CALL 6621 0 3
21025: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21026: GO 21028
21028: DISABLE
21029: LD_INT 0
21031: PPUSH
// begin enemyWayX = [ ] ;
21032: LD_ADDR_EXP 49
21036: PUSH
21037: EMPTY
21038: ST_TO_ADDR
// enemyWayY = [ ] ;
21039: LD_ADDR_EXP 50
21043: PUSH
21044: EMPTY
21045: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
21046: LD_ADDR_VAR 0 1
21050: PUSH
21051: LD_INT 1
21053: PPUSH
21054: LD_INT 2
21056: PPUSH
21057: CALL_OW 12
21061: ST_TO_ADDR
// if rnd = 1 then
21062: LD_VAR 0 1
21066: PUSH
21067: LD_INT 1
21069: EQUAL
21070: IFFALSE 21110
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21072: LD_ADDR_EXP 49
21076: PUSH
21077: LD_INT 93
21079: PUSH
21080: LD_INT 84
21082: PUSH
21083: LD_INT 104
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: LIST
21090: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21091: LD_ADDR_EXP 50
21095: PUSH
21096: LD_INT 51
21098: PUSH
21099: LD_INT 35
21101: PUSH
21102: LD_INT 28
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: LIST
21109: ST_TO_ADDR
// end ; if rnd = 2 then
21110: LD_VAR 0 1
21114: PUSH
21115: LD_INT 2
21117: EQUAL
21118: IFFALSE 21174
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21120: LD_ADDR_EXP 49
21124: PUSH
21125: LD_INT 93
21127: PUSH
21128: LD_INT 52
21130: PUSH
21131: LD_INT 34
21133: PUSH
21134: LD_INT 28
21136: PUSH
21137: LD_INT 30
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21147: LD_ADDR_EXP 50
21151: PUSH
21152: LD_INT 51
21154: PUSH
21155: LD_INT 45
21157: PUSH
21158: LD_INT 35
21160: PUSH
21161: LD_INT 26
21163: PUSH
21164: LD_INT 20
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: ST_TO_ADDR
// end ; enable ;
21174: ENABLE
// end ;
21175: PPOPN 1
21177: END
// every 0 0$1 do
21178: GO 21180
21180: DISABLE
// begin enable ;
21181: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21182: LD_INT 3
21184: PPUSH
21185: LD_INT 2
21187: PPUSH
21188: LD_INT 10
21190: PPUSH
21191: LD_EXP 31
21195: PPUSH
21196: CALL 8056 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21200: LD_INT 3
21202: PPUSH
21203: LD_INT 12
21205: PPUSH
21206: LD_EXP 31
21210: PPUSH
21211: CALL 9941 0 3
// if disableHealAI = 0 then
21215: LD_EXP 33
21219: PUSH
21220: LD_INT 0
21222: EQUAL
21223: IFFALSE 21244
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21225: LD_INT 3
21227: PPUSH
21228: LD_INT 9
21230: PPUSH
21231: LD_INT 10
21233: PPUSH
21234: LD_INT 32
21236: PUSH
21237: EMPTY
21238: LIST
21239: PPUSH
21240: CALL 8447 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21244: LD_INT 3
21246: PPUSH
21247: LD_INT 51
21249: PPUSH
21250: LD_INT 6
21252: PPUSH
21253: CALL 9155 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21257: LD_INT 3
21259: PPUSH
21260: LD_INT 12
21262: PPUSH
21263: LD_INT 121
21265: PPUSH
21266: LD_INT 100
21268: PPUSH
21269: CALL 7016 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21273: LD_INT 3
21275: PPUSH
21276: LD_INT 22
21278: PPUSH
21279: LD_EXP 49
21283: PPUSH
21284: LD_EXP 50
21288: PPUSH
21289: CALL 7219 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21293: LD_INT 3
21295: PPUSH
21296: LD_INT 10
21298: PPUSH
21299: CALL 9298 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21303: LD_INT 3
21305: PPUSH
21306: LD_INT 1
21308: PPUSH
21309: CALL 9711 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21313: LD_INT 2
21315: PPUSH
21316: CALL_OW 303
21320: PUSH
21321: LD_INT 2
21323: PPUSH
21324: CALL_OW 255
21328: PUSH
21329: LD_INT 1
21331: EQUAL
21332: OR
21333: IFFALSE 21345
// DefendDepot ( 3 , rudepo ) ;
21335: LD_INT 3
21337: PPUSH
21338: LD_INT 2
21340: PPUSH
21341: CALL 8991 0 2
// end ;
21345: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21346: LD_INT 22
21348: PUSH
21349: LD_INT 3
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 21
21358: PUSH
21359: LD_INT 2
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 55
21368: PUSH
21369: EMPTY
21370: LIST
21371: PUSH
21372: LD_INT 3
21374: PUSH
21375: LD_INT 34
21377: PUSH
21378: LD_INT 51
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: PPUSH
21395: CALL_OW 69
21399: PUSH
21400: LD_INT 0
21402: EQUAL
21403: PUSH
21404: LD_INT 21
21406: PPUSH
21407: CALL_OW 255
21411: PUSH
21412: LD_INT 3
21414: EQUAL
21415: AND
21416: PUSH
21417: LD_INT 21
21419: PPUSH
21420: CALL_OW 302
21424: AND
21425: PUSH
21426: LD_INT 2
21428: PPUSH
21429: CALL_OW 255
21433: PUSH
21434: LD_INT 3
21436: EQUAL
21437: AND
21438: PUSH
21439: LD_INT 2
21441: PPUSH
21442: CALL_OW 302
21446: AND
21447: IFFALSE 21627
21449: GO 21451
21451: DISABLE
// begin enable ;
21452: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21453: LD_INT 2
21455: PPUSH
21456: CALL_OW 274
21460: PPUSH
21461: LD_INT 1
21463: PPUSH
21464: LD_INT 1000
21466: PPUSH
21467: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21471: LD_INT 3
21473: PPUSH
21474: LD_INT 21
21476: PPUSH
21477: LD_INT 4
21479: PUSH
21480: LD_INT 5
21482: PUSH
21483: LD_INT 6
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: LIST
21490: PUSH
21491: LD_OWVAR 67
21495: ARRAY
21496: PPUSH
21497: LD_INT 43
21499: PUSH
21500: LD_INT 43
21502: PUSH
21503: LD_INT 44
21505: PUSH
21506: LD_INT 44
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 43
21517: PUSH
21518: LD_INT 43
21520: PUSH
21521: LD_INT 43
21523: PUSH
21524: LD_INT 44
21526: PUSH
21527: LD_INT 44
21529: PUSH
21530: LD_INT 46
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 43
21543: PUSH
21544: LD_INT 43
21546: PUSH
21547: LD_INT 43
21549: PUSH
21550: LD_INT 44
21552: PUSH
21553: LD_INT 44
21555: PUSH
21556: LD_INT 46
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: PUSH
21572: LD_OWVAR 67
21576: ARRAY
21577: PPUSH
21578: LD_INT 1
21580: PPUSH
21581: LD_INT 1
21583: PPUSH
21584: LD_INT 22
21586: PUSH
21587: LD_INT 22
21589: PUSH
21590: LD_INT 24
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 1
21599: PPUSH
21600: LD_INT 2
21602: PPUSH
21603: CALL_OW 12
21607: ARRAY
21608: PUSH
21609: LD_INT 24
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: LIST
21616: PUSH
21617: LD_OWVAR 67
21621: ARRAY
21622: PPUSH
21623: CALL 6862 0 7
// end ;
21627: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21628: LD_INT 17
21630: PPUSH
21631: CALL_OW 255
21635: PUSH
21636: LD_INT 3
21638: EQUAL
21639: PUSH
21640: LD_INT 17
21642: PPUSH
21643: CALL_OW 302
21647: AND
21648: PUSH
21649: LD_INT 2
21651: PPUSH
21652: CALL_OW 255
21656: PUSH
21657: LD_INT 3
21659: EQUAL
21660: AND
21661: PUSH
21662: LD_INT 2
21664: PPUSH
21665: CALL_OW 302
21669: AND
21670: IFFALSE 21737
21672: GO 21674
21674: DISABLE
// begin enable ;
21675: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21676: LD_INT 17
21678: PPUSH
21679: LD_INT 22
21681: PPUSH
21682: LD_INT 1
21684: PPUSH
21685: LD_INT 1
21687: PPUSH
21688: LD_INT 42
21690: PUSH
21691: LD_INT 43
21693: PUSH
21694: LD_INT 44
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 1
21704: PPUSH
21705: LD_INT 3
21707: PPUSH
21708: CALL_OW 12
21712: ARRAY
21713: PPUSH
21714: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21718: LD_INT 17
21720: PPUSH
21721: LD_INT 22
21723: PPUSH
21724: LD_INT 1
21726: PPUSH
21727: LD_INT 1
21729: PPUSH
21730: LD_INT 51
21732: PPUSH
21733: CALL_OW 185
// end ;
21737: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21738: LD_INT 17
21740: PPUSH
21741: CALL_OW 302
21745: PUSH
21746: LD_INT 17
21748: PPUSH
21749: CALL_OW 255
21753: PUSH
21754: LD_INT 3
21756: EQUAL
21757: AND
21758: PUSH
21759: LD_INT 2
21761: PPUSH
21762: CALL_OW 302
21766: AND
21767: PUSH
21768: LD_INT 2
21770: PPUSH
21771: CALL_OW 255
21775: PUSH
21776: LD_INT 3
21778: EQUAL
21779: AND
21780: PUSH
21781: LD_INT 17
21783: PPUSH
21784: CALL_OW 313
21788: NOT
21789: AND
21790: IFFALSE 21884
21792: GO 21794
21794: DISABLE
21795: LD_INT 0
21797: PPUSH
// begin for i = 1 to 6 do
21798: LD_ADDR_VAR 0 1
21802: PUSH
21803: DOUBLE
21804: LD_INT 1
21806: DEC
21807: ST_TO_ADDR
21808: LD_INT 6
21810: PUSH
21811: FOR_TO
21812: IFFALSE 21882
// begin uc_side = 3 ;
21814: LD_ADDR_OWVAR 20
21818: PUSH
21819: LD_INT 3
21821: ST_TO_ADDR
// uc_nation = 3 ;
21822: LD_ADDR_OWVAR 21
21826: PUSH
21827: LD_INT 3
21829: ST_TO_ADDR
// hc_gallery :=  ;
21830: LD_ADDR_OWVAR 33
21834: PUSH
21835: LD_STRING 
21837: ST_TO_ADDR
// hc_name :=  ;
21838: LD_ADDR_OWVAR 26
21842: PUSH
21843: LD_STRING 
21845: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
21846: LD_INT 0
21848: PPUSH
21849: LD_EXP 34
21853: PPUSH
21854: LD_EXP 35
21858: PPUSH
21859: CALL_OW 12
21863: PPUSH
21864: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
21868: CALL_OW 44
21872: PPUSH
21873: LD_INT 17
21875: PPUSH
21876: CALL_OW 52
// end ;
21880: GO 21811
21882: POP
21883: POP
// end ;
21884: PPOPN 1
21886: END
// every 2 2$0 do var i , j ;
21887: GO 21889
21889: DISABLE
21890: LD_INT 0
21892: PPUSH
21893: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
21894: LD_INT 14700
21896: PUSH
21897: LD_INT 33600
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 1
21906: PPUSH
21907: LD_INT 2
21909: PPUSH
21910: CALL_OW 12
21914: ARRAY
21915: PPUSH
21916: CALL_OW 67
// disableHealAI = 1 ;
21920: LD_ADDR_EXP 33
21924: PUSH
21925: LD_INT 1
21927: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21928: LD_ADDR_VAR 0 1
21932: PUSH
21933: LD_INT 22
21935: PUSH
21936: LD_INT 3
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 25
21945: PUSH
21946: LD_INT 4
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PPUSH
21957: CALL_OW 69
21961: PUSH
21962: FOR_IN
21963: IFFALSE 21976
// ComExitBuilding ( i ) ;
21965: LD_VAR 0 1
21969: PPUSH
21970: CALL_OW 122
21974: GO 21962
21976: POP
21977: POP
// wait ( 0 0$1 ) ;
21978: LD_INT 35
21980: PPUSH
21981: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21985: LD_INT 35
21987: PPUSH
21988: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21992: LD_ADDR_VAR 0 1
21996: PUSH
21997: LD_INT 22
21999: PUSH
22000: LD_INT 3
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 25
22009: PUSH
22010: LD_INT 4
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PPUSH
22021: CALL_OW 69
22025: PUSH
22026: FOR_IN
22027: IFFALSE 22104
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
22029: LD_ADDR_VAR 0 2
22033: PUSH
22034: LD_INT 17
22036: PPUSH
22037: LD_INT 22
22039: PUSH
22040: LD_INT 0
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 25
22049: PUSH
22050: LD_INT 12
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PPUSH
22061: CALL_OW 70
22065: PUSH
22066: FOR_IN
22067: IFFALSE 22100
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22069: LD_VAR 0 1
22073: PPUSH
22074: LD_VAR 0 2
22078: PPUSH
22079: CALL_OW 250
22083: PPUSH
22084: LD_VAR 0 2
22088: PPUSH
22089: CALL_OW 251
22093: PPUSH
22094: CALL_OW 191
// end ;
22098: GO 22066
22100: POP
22101: POP
// end ;
22102: GO 22026
22104: POP
22105: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22106: LD_INT 22
22108: PUSH
22109: LD_INT 3
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 25
22118: PUSH
22119: LD_INT 4
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PPUSH
22130: CALL_OW 69
22134: PUSH
22135: LD_INT 0
22137: EQUAL
22138: PUSH
22139: LD_EXP 32
22143: PUSH
22144: LD_INT 6
22146: PUSH
22147: LD_INT 7
22149: PUSH
22150: LD_INT 8
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: LIST
22157: PUSH
22158: LD_OWVAR 67
22162: ARRAY
22163: GREATEREQUAL
22164: OR
22165: PUSH
22166: LD_INT 17
22168: PPUSH
22169: LD_INT 22
22171: PUSH
22172: LD_INT 0
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 25
22181: PUSH
22182: LD_INT 12
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PPUSH
22193: CALL_OW 70
22197: PUSH
22198: LD_INT 0
22200: EQUAL
22201: OR
22202: IFFALSE 21985
// disableHealAI = 0 ;
22204: LD_ADDR_EXP 33
22208: PUSH
22209: LD_INT 0
22211: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22212: LD_ADDR_VAR 0 1
22216: PUSH
22217: LD_INT 22
22219: PUSH
22220: LD_INT 3
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 25
22229: PUSH
22230: LD_INT 12
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PPUSH
22241: CALL_OW 69
22245: PUSH
22246: FOR_IN
22247: IFFALSE 22263
// SetClass ( i , 16 ) ;
22249: LD_VAR 0 1
22253: PPUSH
22254: LD_INT 16
22256: PPUSH
22257: CALL_OW 336
22261: GO 22246
22263: POP
22264: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22265: LD_ADDR_VAR 0 1
22269: PUSH
22270: LD_INT 22
22272: PUSH
22273: LD_INT 3
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 25
22282: PUSH
22283: LD_INT 4
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PPUSH
22294: CALL_OW 69
22298: PUSH
22299: FOR_IN
22300: IFFALSE 22319
// ComMoveXY ( i , 113 , 94 ) ;
22302: LD_VAR 0 1
22306: PPUSH
22307: LD_INT 113
22309: PPUSH
22310: LD_INT 94
22312: PPUSH
22313: CALL_OW 111
22317: GO 22299
22319: POP
22320: POP
// end ;
22321: PPOPN 2
22323: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22324: LD_INT 21
22326: PPUSH
22327: CALL_OW 255
22331: PUSH
22332: LD_INT 3
22334: EQUAL
22335: PUSH
22336: LD_INT 21
22338: PPUSH
22339: CALL_OW 302
22343: AND
22344: PUSH
22345: LD_INT 22
22347: PUSH
22348: LD_INT 3
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 34
22357: PUSH
22358: LD_INT 51
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PPUSH
22369: CALL_OW 69
22373: PUSH
22374: LD_INT 0
22376: EQUAL
22377: AND
22378: IFFALSE 22410
22380: GO 22382
22382: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22383: LD_INT 21
22385: PPUSH
22386: LD_INT 23
22388: PPUSH
22389: LD_INT 1
22391: PPUSH
22392: LD_INT 1
22394: PPUSH
22395: LD_INT 51
22397: PPUSH
22398: CALL_OW 185
// wait ( 5 5$0 ) ;
22402: LD_INT 10500
22404: PPUSH
22405: CALL_OW 67
// enable ;
22409: ENABLE
// end ; end_of_file
22410: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22411: LD_EXP 26
22415: PUSH
22416: LD_INT 0
22418: LESSEQUAL
22419: IFFALSE 22568
22421: GO 22423
22423: DISABLE
22424: LD_INT 0
22426: PPUSH
22427: PPUSH
22428: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22429: LD_ADDR_VAR 0 2
22433: PUSH
22434: LD_INT 22
22436: PUSH
22437: LD_INT 1
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 21
22446: PUSH
22447: LD_INT 3
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 2
22456: PUSH
22457: LD_INT 30
22459: PUSH
22460: LD_INT 0
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 30
22469: PUSH
22470: LD_INT 1
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: LIST
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: LIST
22486: PPUSH
22487: CALL_OW 69
22491: ST_TO_ADDR
// for i in tmp do
22492: LD_ADDR_VAR 0 1
22496: PUSH
22497: LD_VAR 0 2
22501: PUSH
22502: FOR_IN
22503: IFFALSE 22536
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22505: LD_ADDR_VAR 0 3
22509: PUSH
22510: LD_VAR 0 3
22514: PUSH
22515: LD_VAR 0 1
22519: PPUSH
22520: CALL_OW 274
22524: PPUSH
22525: LD_INT 1
22527: PPUSH
22528: CALL_OW 275
22532: PLUS
22533: ST_TO_ADDR
22534: GO 22502
22536: POP
22537: POP
// if yourCrates >= needCrates then
22538: LD_VAR 0 3
22542: PUSH
22543: LD_EXP 25
22547: GREATEREQUAL
22548: IFFALSE 22561
// begin FinishMission ( yourCrates ) ;
22550: LD_VAR 0 3
22554: PPUSH
22555: CALL 22571 0 1
// end else
22559: GO 22568
// begin YouLost ( matmin ) ;
22561: LD_STRING matmin
22563: PPUSH
22564: CALL_OW 104
// end ; end ;
22568: PPOPN 3
22570: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22571: LD_INT 0
22573: PPUSH
22574: PPUSH
22575: PPUSH
22576: PPUSH
// if killCounter = 0 then
22577: LD_EXP 47
22581: PUSH
22582: LD_INT 0
22584: EQUAL
22585: IFFALSE 22594
// SetAchievement ( ACH_SURV ) ;
22587: LD_STRING ACH_SURV
22589: PPUSH
22590: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22594: LD_INT 22
22596: PUSH
22597: LD_INT 3
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 21
22606: PUSH
22607: LD_INT 3
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PPUSH
22618: CALL_OW 69
22622: PUSH
22623: LD_INT 0
22625: EQUAL
22626: IFFALSE 22642
// begin wait ( 3 ) ;
22628: LD_INT 3
22630: PPUSH
22631: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22635: LD_STRING ACH_BASEDESTROYER
22637: PPUSH
22638: CALL_OW 543
// end ; m1 := false ;
22642: LD_ADDR_VAR 0 3
22646: PUSH
22647: LD_INT 0
22649: ST_TO_ADDR
// m2 := false ;
22650: LD_ADDR_VAR 0 4
22654: PUSH
22655: LD_INT 0
22657: ST_TO_ADDR
// m3 := false ;
22658: LD_ADDR_VAR 0 5
22662: PUSH
22663: LD_INT 0
22665: ST_TO_ADDR
// if crates + 100 > crates then
22666: LD_VAR 0 1
22670: PUSH
22671: LD_INT 100
22673: PLUS
22674: PUSH
22675: LD_VAR 0 1
22679: GREATER
22680: IFFALSE 22712
// begin AddMedal ( cans , 1 ) ;
22682: LD_STRING cans
22684: PPUSH
22685: LD_INT 1
22687: PPUSH
22688: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22692: LD_INT 1
22694: PPUSH
22695: LD_STRING 06_crates_1
22697: PPUSH
22698: CALL_OW 39
// m1 := true ;
22702: LD_ADDR_VAR 0 3
22706: PUSH
22707: LD_INT 1
22709: ST_TO_ADDR
// end else
22710: GO 22733
// begin AddMedal ( cans , - 1 ) ;
22712: LD_STRING cans
22714: PPUSH
22715: LD_INT 1
22717: NEG
22718: PPUSH
22719: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22723: LD_INT 0
22725: PPUSH
22726: LD_STRING 06_crates_1
22728: PPUSH
22729: CALL_OW 39
// end ; if unitLost < 3 then
22733: LD_EXP 30
22737: PUSH
22738: LD_INT 3
22740: LESS
22741: IFFALSE 22763
// begin AddMedal ( people , 1 ) ;
22743: LD_STRING people
22745: PPUSH
22746: LD_INT 1
22748: PPUSH
22749: CALL_OW 101
// m2 := true ;
22753: LD_ADDR_VAR 0 4
22757: PUSH
22758: LD_INT 1
22760: ST_TO_ADDR
// end else
22761: GO 22774
// begin AddMedal ( people , - 1 ) ;
22763: LD_STRING people
22765: PPUSH
22766: LD_INT 1
22768: NEG
22769: PPUSH
22770: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22774: LD_EXP 28
22778: PPUSH
22779: LD_STRING 06_remoteVehs_1
22781: PPUSH
22782: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22786: LD_EXP 28
22790: PUSH
22791: LD_INT 1
22793: EQUAL
22794: IFFALSE 22816
// begin AddMedal ( remote , 1 ) ;
22796: LD_STRING remote
22798: PPUSH
22799: LD_INT 1
22801: PPUSH
22802: CALL_OW 101
// m3 := true ;
22806: LD_ADDR_VAR 0 5
22810: PUSH
22811: LD_INT 1
22813: ST_TO_ADDR
// end else
22814: GO 22856
// begin if GetTech ( 18 , 1 ) = state_enabled then
22816: LD_INT 18
22818: PPUSH
22819: LD_INT 1
22821: PPUSH
22822: CALL_OW 321
22826: PUSH
22827: LD_INT 1
22829: EQUAL
22830: IFFALSE 22845
// begin AddMedal ( remote , - 1 ) ;
22832: LD_STRING remote
22834: PPUSH
22835: LD_INT 1
22837: NEG
22838: PPUSH
22839: CALL_OW 101
// end else
22843: GO 22856
// begin AddMedal ( remote , - 2 ) ;
22845: LD_STRING remote
22847: PPUSH
22848: LD_INT 2
22850: NEG
22851: PPUSH
22852: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
22856: LD_VAR 0 3
22860: PUSH
22861: LD_VAR 0 4
22865: AND
22866: PUSH
22867: LD_VAR 0 5
22871: AND
22872: IFFALSE 22888
// begin wait ( 3 ) ;
22874: LD_INT 3
22876: PPUSH
22877: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
22881: LD_STRING ACH_ASPEED_6
22883: PPUSH
22884: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
22888: LD_OWVAR 67
22892: PUSH
22893: LD_INT 3
22895: EQUAL
22896: PUSH
22897: LD_VAR 0 3
22901: AND
22902: PUSH
22903: LD_VAR 0 4
22907: AND
22908: PUSH
22909: LD_VAR 0 5
22913: AND
22914: IFFALSE 22926
// SetAchievementEX ( ACH_AMER , 6 ) ;
22916: LD_STRING ACH_AMER
22918: PPUSH
22919: LD_INT 6
22921: PPUSH
22922: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
22926: LD_EXP 20
22930: PPUSH
22931: LD_STRING 06_KurtStatus_1
22933: PPUSH
22934: CALL_OW 39
// GiveMedals ( Main ) ;
22938: LD_STRING Main
22940: PPUSH
22941: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22945: LD_INT 22
22947: PUSH
22948: LD_INT 1
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 21
22957: PUSH
22958: LD_INT 1
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 50
22967: PUSH
22968: EMPTY
22969: LIST
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: LD_INT 25
22976: PUSH
22977: LD_INT 1
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 25
22986: PUSH
22987: LD_INT 2
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 25
22996: PUSH
22997: LD_INT 3
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 25
23006: PUSH
23007: LD_INT 4
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: PPUSH
23027: CALL_OW 69
23031: PPUSH
23032: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23036: LD_EXP 1
23040: PPUSH
23041: LD_EXP 43
23045: PUSH
23046: LD_STRING JMM
23048: STR
23049: PPUSH
23050: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23054: LD_EXP 2
23058: PPUSH
23059: LD_EXP 43
23063: PUSH
23064: LD_STRING Lisa
23066: STR
23067: PPUSH
23068: CALL 6120 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23072: LD_EXP 3
23076: PPUSH
23077: LD_EXP 43
23081: PUSH
23082: LD_STRING Bobby
23084: STR
23085: PPUSH
23086: CALL 6120 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23090: LD_EXP 4
23094: PPUSH
23095: LD_EXP 43
23099: PUSH
23100: LD_STRING Cyrus
23102: STR
23103: PPUSH
23104: CALL 6120 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23108: LD_EXP 5
23112: PPUSH
23113: LD_EXP 43
23117: PUSH
23118: LD_STRING Frank
23120: STR
23121: PPUSH
23122: CALL 6120 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23126: LD_EXP 6
23130: PPUSH
23131: LD_EXP 43
23135: PUSH
23136: LD_STRING Brown
23138: STR
23139: PPUSH
23140: CALL 6120 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23144: LD_EXP 7
23148: PPUSH
23149: LD_EXP 43
23153: PUSH
23154: LD_STRING Donaldson
23156: STR
23157: PPUSH
23158: CALL 6120 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23162: LD_EXP 8
23166: PPUSH
23167: LD_EXP 43
23171: PUSH
23172: LD_STRING Gladstone
23174: STR
23175: PPUSH
23176: CALL 6120 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23180: LD_EXP 9
23184: PPUSH
23185: LD_EXP 43
23189: PUSH
23190: LD_STRING Denis
23192: STR
23193: PPUSH
23194: CALL 6120 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23198: LD_EXP 15
23202: PPUSH
23203: LD_EXP 43
23207: PUSH
23208: LD_STRING Joan
23210: STR
23211: PPUSH
23212: CALL 6120 0 2
// if IsLive ( Joan ) then
23216: LD_EXP 15
23220: PPUSH
23221: CALL_OW 300
23225: IFFALSE 23239
// SaveCharacters ( Joan , Joan ) ;
23227: LD_EXP 15
23231: PPUSH
23232: LD_STRING Joan
23234: PPUSH
23235: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23239: LD_EXP 16
23243: PPUSH
23244: LD_STRING 06_JoanStatus_1
23246: PPUSH
23247: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23251: LD_INT 50
23253: PUSH
23254: EMPTY
23255: LIST
23256: PUSH
23257: LD_INT 22
23259: PUSH
23260: LD_INT 1
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 21
23269: PUSH
23270: LD_INT 1
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 2
23279: PUSH
23280: LD_INT 25
23282: PUSH
23283: LD_INT 1
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 25
23292: PUSH
23293: LD_INT 2
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 25
23302: PUSH
23303: LD_INT 3
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 25
23312: PUSH
23313: LD_INT 4
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: PPUSH
23333: CALL_OW 69
23337: PUSH
23338: LD_EXP 1
23342: PUSH
23343: LD_EXP 2
23347: PUSH
23348: LD_EXP 3
23352: PUSH
23353: LD_EXP 4
23357: PUSH
23358: LD_EXP 5
23362: PUSH
23363: LD_EXP 6
23367: PUSH
23368: LD_EXP 7
23372: PUSH
23373: LD_EXP 8
23377: PUSH
23378: LD_EXP 9
23382: PUSH
23383: LD_EXP 15
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: DIFF
23400: PPUSH
23401: LD_STRING 06_other_survivors
23403: PPUSH
23404: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23408: LD_INT 50
23410: PUSH
23411: EMPTY
23412: LIST
23413: PUSH
23414: LD_INT 22
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 21
23426: PUSH
23427: LD_INT 1
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: LD_INT 25
23439: PUSH
23440: LD_INT 12
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 25
23449: PUSH
23450: LD_INT 16
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: LIST
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: PPUSH
23468: CALL_OW 69
23472: PPUSH
23473: LD_STRING 06_other_apemans
23475: PPUSH
23476: CALL_OW 38
// YouWin ;
23480: CALL_OW 103
// end ; end_of_file
23484: LD_VAR 0 2
23488: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23489: LD_EXP 39
23493: PUSH
23494: LD_INT 3
23496: EQUAL
23497: IFFALSE 23612
23499: GO 23501
23501: DISABLE
// begin enable ;
23502: ENABLE
// sendedConvoys = 0 ;
23503: LD_ADDR_EXP 39
23507: PUSH
23508: LD_INT 0
23510: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23511: LD_INT 6
23513: PPUSH
23514: LD_INT 3
23516: PPUSH
23517: LD_INT 5
23519: PPUSH
23520: LD_INT 10
23522: PPUSH
23523: CALL_OW 12
23527: PUSH
23528: LD_INT 5
23530: PPUSH
23531: LD_INT 11
23533: PPUSH
23534: CALL_OW 12
23538: PUSH
23539: LD_INT 8
23541: PPUSH
23542: LD_INT 12
23544: PPUSH
23545: CALL_OW 12
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: LIST
23554: PUSH
23555: LD_OWVAR 67
23559: ARRAY
23560: PPUSH
23561: LD_INT 0
23563: PPUSH
23564: LD_INT 0
23566: PPUSH
23567: LD_INT 0
23569: PPUSH
23570: LD_INT 0
23572: PPUSH
23573: LD_EXP 34
23577: PPUSH
23578: LD_EXP 35
23582: PPUSH
23583: CALL_OW 12
23587: PPUSH
23588: LD_INT 16
23590: PPUSH
23591: LD_INT 15
23593: PPUSH
23594: LD_INT 1
23596: PPUSH
23597: LD_INT 1
23599: PPUSH
23600: LD_INT 2
23602: PPUSH
23603: CALL_OW 12
23607: PPUSH
23608: CALL 10539 0 12
// end ; end_of_file
23612: END
// export function PrepareNature ; var i , un ; begin
23613: LD_INT 0
23615: PPUSH
23616: PPUSH
23617: PPUSH
// for i = 1 to Difficulty + 2 do
23618: LD_ADDR_VAR 0 2
23622: PUSH
23623: DOUBLE
23624: LD_INT 1
23626: DEC
23627: ST_TO_ADDR
23628: LD_OWVAR 67
23632: PUSH
23633: LD_INT 2
23635: PLUS
23636: PUSH
23637: FOR_TO
23638: IFFALSE 23747
// begin hc_sex = sex_male ;
23640: LD_ADDR_OWVAR 27
23644: PUSH
23645: LD_INT 1
23647: ST_TO_ADDR
// uc_side = 0 ;
23648: LD_ADDR_OWVAR 20
23652: PUSH
23653: LD_INT 0
23655: ST_TO_ADDR
// uc_nation = nation_nature ;
23656: LD_ADDR_OWVAR 21
23660: PUSH
23661: LD_INT 0
23663: ST_TO_ADDR
// hc_class = class_tiger ;
23664: LD_ADDR_OWVAR 28
23668: PUSH
23669: LD_INT 14
23671: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23672: LD_ADDR_OWVAR 31
23676: PUSH
23677: LD_EXP 35
23681: PUSH
23682: LD_INT 0
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23697: LD_ADDR_OWVAR 35
23701: PUSH
23702: LD_INT 5
23704: NEG
23705: PPUSH
23706: LD_INT 5
23708: PPUSH
23709: CALL_OW 12
23713: PUSH
23714: LD_OWVAR 67
23718: MUL
23719: ST_TO_ADDR
// un = CreateHuman ;
23720: LD_ADDR_VAR 0 3
23724: PUSH
23725: CALL_OW 44
23729: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23730: LD_VAR 0 3
23734: PPUSH
23735: LD_INT 18
23737: PPUSH
23738: LD_INT 0
23740: PPUSH
23741: CALL_OW 49
// end ;
23745: GO 23637
23747: POP
23748: POP
// for i = 1 to rand ( 3 , 4 ) do
23749: LD_ADDR_VAR 0 2
23753: PUSH
23754: DOUBLE
23755: LD_INT 1
23757: DEC
23758: ST_TO_ADDR
23759: LD_INT 3
23761: PPUSH
23762: LD_INT 4
23764: PPUSH
23765: CALL_OW 12
23769: PUSH
23770: FOR_TO
23771: IFFALSE 23865
// begin hc_sex = sex_male ;
23773: LD_ADDR_OWVAR 27
23777: PUSH
23778: LD_INT 1
23780: ST_TO_ADDR
// uc_side = 0 ;
23781: LD_ADDR_OWVAR 20
23785: PUSH
23786: LD_INT 0
23788: ST_TO_ADDR
// uc_nation = nation_nature ;
23789: LD_ADDR_OWVAR 21
23793: PUSH
23794: LD_INT 0
23796: ST_TO_ADDR
// hc_class = 18 ;
23797: LD_ADDR_OWVAR 28
23801: PUSH
23802: LD_INT 18
23804: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23805: LD_ADDR_OWVAR 31
23809: PUSH
23810: LD_EXP 35
23814: PUSH
23815: LD_INT 0
23817: PUSH
23818: LD_INT 0
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: ST_TO_ADDR
// hc_agressivity = 0 ;
23830: LD_ADDR_OWVAR 35
23834: PUSH
23835: LD_INT 0
23837: ST_TO_ADDR
// un = CreateHuman ;
23838: LD_ADDR_VAR 0 3
23842: PUSH
23843: CALL_OW 44
23847: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23848: LD_VAR 0 3
23852: PPUSH
23853: LD_INT 18
23855: PPUSH
23856: LD_INT 0
23858: PPUSH
23859: CALL_OW 49
// end ;
23863: GO 23770
23865: POP
23866: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
23867: LD_ADDR_VAR 0 2
23871: PUSH
23872: DOUBLE
23873: LD_INT 1
23875: DEC
23876: ST_TO_ADDR
23877: LD_INT 1
23879: PPUSH
23880: LD_INT 3
23882: PPUSH
23883: CALL_OW 12
23887: PUSH
23888: LD_OWVAR 67
23892: PLUS
23893: PUSH
23894: FOR_TO
23895: IFFALSE 24044
// begin hc_sex = sex_male ;
23897: LD_ADDR_OWVAR 27
23901: PUSH
23902: LD_INT 1
23904: ST_TO_ADDR
// uc_side = 0 ;
23905: LD_ADDR_OWVAR 20
23909: PUSH
23910: LD_INT 0
23912: ST_TO_ADDR
// uc_nation = nation_nature ;
23913: LD_ADDR_OWVAR 21
23917: PUSH
23918: LD_INT 0
23920: ST_TO_ADDR
// hc_class = class_apeman ;
23921: LD_ADDR_OWVAR 28
23925: PUSH
23926: LD_INT 12
23928: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23929: LD_ADDR_OWVAR 31
23933: PUSH
23934: LD_INT 2
23936: PPUSH
23937: LD_INT 5
23939: PPUSH
23940: CALL_OW 12
23944: PUSH
23945: LD_INT 0
23947: PPUSH
23948: LD_INT 2
23950: PPUSH
23951: CALL_OW 12
23955: PUSH
23956: LD_INT 0
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
23968: LD_ADDR_OWVAR 35
23972: PUSH
23973: LD_INT 20
23975: PPUSH
23976: LD_INT 30
23978: PPUSH
23979: CALL_OW 12
23983: PUSH
23984: LD_INT 30
23986: PPUSH
23987: LD_INT 40
23989: PPUSH
23990: CALL_OW 12
23994: PUSH
23995: LD_INT 40
23997: PPUSH
23998: LD_INT 50
24000: PPUSH
24001: CALL_OW 12
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: LIST
24010: PUSH
24011: LD_OWVAR 67
24015: ARRAY
24016: ST_TO_ADDR
// un = CreateHuman ;
24017: LD_ADDR_VAR 0 3
24021: PUSH
24022: CALL_OW 44
24026: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
24027: LD_VAR 0 3
24031: PPUSH
24032: LD_INT 19
24034: PPUSH
24035: LD_INT 0
24037: PPUSH
24038: CALL_OW 49
// end ;
24042: GO 23894
24044: POP
24045: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
24046: LD_ADDR_VAR 0 2
24050: PUSH
24051: DOUBLE
24052: LD_INT 1
24054: DEC
24055: ST_TO_ADDR
24056: LD_INT 5
24058: PPUSH
24059: LD_INT 6
24061: PPUSH
24062: CALL_OW 12
24066: PUSH
24067: LD_OWVAR 67
24071: PLUS
24072: PUSH
24073: FOR_TO
24074: IFFALSE 24182
// begin hc_sex = sex_male ;
24076: LD_ADDR_OWVAR 27
24080: PUSH
24081: LD_INT 1
24083: ST_TO_ADDR
// uc_side = 0 ;
24084: LD_ADDR_OWVAR 20
24088: PUSH
24089: LD_INT 0
24091: ST_TO_ADDR
// uc_nation = nation_nature ;
24092: LD_ADDR_OWVAR 21
24096: PUSH
24097: LD_INT 0
24099: ST_TO_ADDR
// hc_class = class_apeman ;
24100: LD_ADDR_OWVAR 28
24104: PUSH
24105: LD_INT 12
24107: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24108: LD_ADDR_OWVAR 31
24112: PUSH
24113: LD_INT 2
24115: PPUSH
24116: LD_INT 5
24118: PPUSH
24119: CALL_OW 12
24123: PUSH
24124: LD_INT 0
24126: PPUSH
24127: LD_INT 2
24129: PPUSH
24130: CALL_OW 12
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: LD_INT 0
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: ST_TO_ADDR
// hc_agressivity = 0 ;
24147: LD_ADDR_OWVAR 35
24151: PUSH
24152: LD_INT 0
24154: ST_TO_ADDR
// un = CreateHuman ;
24155: LD_ADDR_VAR 0 3
24159: PUSH
24160: CALL_OW 44
24164: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24165: LD_VAR 0 3
24169: PPUSH
24170: LD_INT 20
24172: PPUSH
24173: LD_INT 0
24175: PPUSH
24176: CALL_OW 49
// end ;
24180: GO 24073
24182: POP
24183: POP
// end ; end_of_file end_of_file
24184: LD_VAR 0 1
24188: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
24189: GO 24191
24191: DISABLE
// begin ru_radar := 98 ;
24192: LD_ADDR_EXP 51
24196: PUSH
24197: LD_INT 98
24199: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24200: LD_ADDR_EXP 52
24204: PUSH
24205: LD_INT 89
24207: ST_TO_ADDR
// us_hack := 99 ;
24208: LD_ADDR_EXP 53
24212: PUSH
24213: LD_INT 99
24215: ST_TO_ADDR
// us_artillery := 97 ;
24216: LD_ADDR_EXP 54
24220: PUSH
24221: LD_INT 97
24223: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24224: LD_ADDR_EXP 55
24228: PUSH
24229: LD_INT 91
24231: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
24232: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
24233: LD_INT 0
24235: PPUSH
24236: PPUSH
24237: PPUSH
24238: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24239: LD_VAR 0 1
24243: PPUSH
24244: CALL_OW 264
24248: PUSH
24249: LD_EXP 55
24253: EQUAL
24254: IFFALSE 24326
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24256: LD_INT 68
24258: PPUSH
24259: LD_VAR 0 1
24263: PPUSH
24264: CALL_OW 255
24268: PPUSH
24269: CALL_OW 321
24273: PUSH
24274: LD_INT 2
24276: EQUAL
24277: IFFALSE 24289
// eff := 70 else
24279: LD_ADDR_VAR 0 6
24283: PUSH
24284: LD_INT 70
24286: ST_TO_ADDR
24287: GO 24297
// eff := 30 ;
24289: LD_ADDR_VAR 0 6
24293: PUSH
24294: LD_INT 30
24296: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24297: LD_VAR 0 1
24301: PPUSH
24302: CALL_OW 250
24306: PPUSH
24307: LD_VAR 0 1
24311: PPUSH
24312: CALL_OW 251
24316: PPUSH
24317: LD_VAR 0 6
24321: PPUSH
24322: CALL_OW 495
// end ; end ;
24326: LD_VAR 0 4
24330: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
24331: LD_INT 0
24333: PPUSH
24334: PPUSH
24335: PPUSH
24336: PPUSH
24337: PPUSH
24338: PPUSH
// if cmd = 124 then
24339: LD_VAR 0 1
24343: PUSH
24344: LD_INT 124
24346: EQUAL
24347: IFFALSE 24553
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
24349: LD_ADDR_VAR 0 5
24353: PUSH
24354: LD_INT 2
24356: PUSH
24357: LD_INT 34
24359: PUSH
24360: LD_INT 53
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 34
24369: PUSH
24370: LD_INT 14
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: LIST
24381: PPUSH
24382: CALL_OW 69
24386: ST_TO_ADDR
// if not tmp then
24387: LD_VAR 0 5
24391: NOT
24392: IFFALSE 24396
// exit ;
24394: GO 24553
// for i in tmp do
24396: LD_ADDR_VAR 0 3
24400: PUSH
24401: LD_VAR 0 5
24405: PUSH
24406: FOR_IN
24407: IFFALSE 24551
// begin taskList := GetTaskList ( i ) ;
24409: LD_ADDR_VAR 0 6
24413: PUSH
24414: LD_VAR 0 3
24418: PPUSH
24419: CALL_OW 437
24423: ST_TO_ADDR
// if not taskList then
24424: LD_VAR 0 6
24428: NOT
24429: IFFALSE 24433
// continue ;
24431: GO 24406
// for j = 1 to taskList do
24433: LD_ADDR_VAR 0 4
24437: PUSH
24438: DOUBLE
24439: LD_INT 1
24441: DEC
24442: ST_TO_ADDR
24443: LD_VAR 0 6
24447: PUSH
24448: FOR_TO
24449: IFFALSE 24547
// if taskList [ j ] [ 1 ] = | then
24451: LD_VAR 0 6
24455: PUSH
24456: LD_VAR 0 4
24460: ARRAY
24461: PUSH
24462: LD_INT 1
24464: ARRAY
24465: PUSH
24466: LD_STRING |
24468: EQUAL
24469: IFFALSE 24545
// begin _taskList := Delete ( taskList , 1 ) ;
24471: LD_ADDR_VAR 0 7
24475: PUSH
24476: LD_VAR 0 6
24480: PPUSH
24481: LD_INT 1
24483: PPUSH
24484: CALL_OW 3
24488: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
24489: LD_VAR 0 3
24493: PPUSH
24494: LD_VAR 0 7
24498: PPUSH
24499: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
24503: LD_VAR 0 3
24507: PPUSH
24508: LD_VAR 0 6
24512: PUSH
24513: LD_VAR 0 4
24517: ARRAY
24518: PUSH
24519: LD_INT 2
24521: ARRAY
24522: PPUSH
24523: LD_VAR 0 6
24527: PUSH
24528: LD_VAR 0 4
24532: ARRAY
24533: PUSH
24534: LD_INT 3
24536: ARRAY
24537: PPUSH
24538: LD_INT 8
24540: PPUSH
24541: CALL 24558 0 4
// end ;
24545: GO 24448
24547: POP
24548: POP
// end ;
24549: GO 24406
24551: POP
24552: POP
// end ; end ;
24553: LD_VAR 0 2
24557: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24558: LD_INT 0
24560: PPUSH
24561: PPUSH
24562: PPUSH
24563: PPUSH
24564: PPUSH
24565: PPUSH
24566: PPUSH
24567: PPUSH
24568: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24569: LD_VAR 0 1
24573: NOT
24574: PUSH
24575: LD_VAR 0 2
24579: PPUSH
24580: LD_VAR 0 3
24584: PPUSH
24585: CALL_OW 488
24589: NOT
24590: OR
24591: PUSH
24592: LD_VAR 0 4
24596: NOT
24597: OR
24598: IFFALSE 24602
// exit ;
24600: GO 24942
// list := [ ] ;
24602: LD_ADDR_VAR 0 13
24606: PUSH
24607: EMPTY
24608: ST_TO_ADDR
// if x - r < 0 then
24609: LD_VAR 0 2
24613: PUSH
24614: LD_VAR 0 4
24618: MINUS
24619: PUSH
24620: LD_INT 0
24622: LESS
24623: IFFALSE 24635
// min_x := 0 else
24625: LD_ADDR_VAR 0 7
24629: PUSH
24630: LD_INT 0
24632: ST_TO_ADDR
24633: GO 24651
// min_x := x - r ;
24635: LD_ADDR_VAR 0 7
24639: PUSH
24640: LD_VAR 0 2
24644: PUSH
24645: LD_VAR 0 4
24649: MINUS
24650: ST_TO_ADDR
// if y - r < 0 then
24651: LD_VAR 0 3
24655: PUSH
24656: LD_VAR 0 4
24660: MINUS
24661: PUSH
24662: LD_INT 0
24664: LESS
24665: IFFALSE 24677
// min_y := 0 else
24667: LD_ADDR_VAR 0 8
24671: PUSH
24672: LD_INT 0
24674: ST_TO_ADDR
24675: GO 24693
// min_y := y - r ;
24677: LD_ADDR_VAR 0 8
24681: PUSH
24682: LD_VAR 0 3
24686: PUSH
24687: LD_VAR 0 4
24691: MINUS
24692: ST_TO_ADDR
// max_x := x + r ;
24693: LD_ADDR_VAR 0 9
24697: PUSH
24698: LD_VAR 0 2
24702: PUSH
24703: LD_VAR 0 4
24707: PLUS
24708: ST_TO_ADDR
// max_y := y + r ;
24709: LD_ADDR_VAR 0 10
24713: PUSH
24714: LD_VAR 0 3
24718: PUSH
24719: LD_VAR 0 4
24723: PLUS
24724: ST_TO_ADDR
// for _x = min_x to max_x do
24725: LD_ADDR_VAR 0 11
24729: PUSH
24730: DOUBLE
24731: LD_VAR 0 7
24735: DEC
24736: ST_TO_ADDR
24737: LD_VAR 0 9
24741: PUSH
24742: FOR_TO
24743: IFFALSE 24860
// for _y = min_y to max_y do
24745: LD_ADDR_VAR 0 12
24749: PUSH
24750: DOUBLE
24751: LD_VAR 0 8
24755: DEC
24756: ST_TO_ADDR
24757: LD_VAR 0 10
24761: PUSH
24762: FOR_TO
24763: IFFALSE 24856
// begin if not ValidHex ( _x , _y ) then
24765: LD_VAR 0 11
24769: PPUSH
24770: LD_VAR 0 12
24774: PPUSH
24775: CALL_OW 488
24779: NOT
24780: IFFALSE 24784
// continue ;
24782: GO 24762
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24784: LD_VAR 0 11
24788: PPUSH
24789: LD_VAR 0 12
24793: PPUSH
24794: CALL_OW 351
24798: PUSH
24799: LD_VAR 0 11
24803: PPUSH
24804: LD_VAR 0 12
24808: PPUSH
24809: CALL_OW 554
24813: AND
24814: IFFALSE 24854
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24816: LD_ADDR_VAR 0 13
24820: PUSH
24821: LD_VAR 0 13
24825: PPUSH
24826: LD_VAR 0 13
24830: PUSH
24831: LD_INT 1
24833: PLUS
24834: PPUSH
24835: LD_VAR 0 11
24839: PUSH
24840: LD_VAR 0 12
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PPUSH
24849: CALL_OW 2
24853: ST_TO_ADDR
// end ;
24854: GO 24762
24856: POP
24857: POP
24858: GO 24742
24860: POP
24861: POP
// if not list then
24862: LD_VAR 0 13
24866: NOT
24867: IFFALSE 24871
// exit ;
24869: GO 24942
// for i in list do
24871: LD_ADDR_VAR 0 6
24875: PUSH
24876: LD_VAR 0 13
24880: PUSH
24881: FOR_IN
24882: IFFALSE 24940
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24884: LD_VAR 0 1
24888: PPUSH
24889: LD_STRING M
24891: PUSH
24892: LD_VAR 0 6
24896: PUSH
24897: LD_INT 1
24899: ARRAY
24900: PUSH
24901: LD_VAR 0 6
24905: PUSH
24906: LD_INT 2
24908: ARRAY
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: LD_INT 0
24915: PUSH
24916: LD_INT 0
24918: PUSH
24919: LD_INT 0
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: PUSH
24931: EMPTY
24932: LIST
24933: PPUSH
24934: CALL_OW 447
24938: GO 24881
24940: POP
24941: POP
// end ;
24942: LD_VAR 0 5
24946: RET
