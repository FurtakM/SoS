// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7922 0 0
// CreateNature ;
  57: CALL 21433 0 0
// PrepareRussian ;
  61: CALL 5806 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 11241 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 42689 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 42689 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 42689 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 42689 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 42689 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 42689 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 42689 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 42689 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 42689 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 42689 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 42689 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: PUSH
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 21
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 70
2583: OR
2584: IFFALSE 2602
// begin area := HarrisonSupportArea2 ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 31
2593: ST_TO_ADDR
// dir := 1 ;
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// end ; uc_side = 1 ;
2602: LD_ADDR_OWVAR 20
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// uc_nation = 1 ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// vc_engine := engine_combustion ;
2618: LD_ADDR_OWVAR 39
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// vc_control := control_manual ;
2626: LD_ADDR_OWVAR 38
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2634: LD_ADDR_OWVAR 40
2638: PUSH
2639: LD_INT 4
2641: PUSH
2642: LD_INT 4
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh := CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := class_engineer ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2825: LD_ADDR_EXP 18
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 18
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine := engine_combustion ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control := control_manual ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 5
2875: PUSH
2876: LD_INT 3
2878: PUSH
2879: LD_INT 3
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_OWVAR 67
2892: ARRAY
2893: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2894: LD_ADDR_OWVAR 37
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// veh := CreateVehicle ;
2902: LD_ADDR_VAR 0 3
2906: PUSH
2907: CALL_OW 45
2911: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_VAR 0 5
2921: PPUSH
2922: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_VAR 0 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_INT 50
2950: PPUSH
2951: CALL_OW 240
// hc_class := class_soldier ;
2955: LD_ADDR_OWVAR 28
2959: PUSH
2960: LD_INT 1
2962: ST_TO_ADDR
// hc_sex := sex_female ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 2
2970: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2971: LD_ADDR_OWVAR 33
2975: PUSH
2976: LD_STRING SecondCharsGal
2978: ST_TO_ADDR
// hc_face_number := 42 ;
2979: LD_ADDR_OWVAR 34
2983: PUSH
2984: LD_INT 42
2986: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2987: LD_ADDR_OWVAR 29
2991: PUSH
2992: LD_INT 11
2994: PUSH
2995: LD_INT 10
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
3002: LD_ADDR_OWVAR 26
3006: PUSH
3007: LD_STRING Ingrid Jonsson
3009: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
3010: LD_ADDR_OWVAR 30
3014: PUSH
3015: LD_INT 1
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: LD_INT 0
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3033: LD_ADDR_OWVAR 31
3037: PUSH
3038: LD_INT 3
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: LD_INT 1
3046: PUSH
3047: LD_INT 0
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3056: LD_ADDR_EXP 19
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3066: LD_EXP 19
3070: PPUSH
3071: LD_VAR 0 3
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: LD_VAR 0 1
3084: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3091: LD_ADDR_VAR 0 4
3095: PUSH
3096: LD_INT 22
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 23
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 26
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: PUSH
3136: LD_EXP 3
3140: PUSH
3141: LD_EXP 4
3145: PUSH
3146: LD_EXP 8
3150: PUSH
3151: LD_EXP 9
3155: PUSH
3156: LD_EXP 5
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: DIFF
3168: ST_TO_ADDR
// for i in _tmp do
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 4
3178: PUSH
3179: FOR_IN
3180: IFFALSE 3221
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 32
3189: PPUSH
3190: CALL_OW 308
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 302
3204: AND
3205: IFFALSE 3219
// begin tmp := i ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// break ;
3217: GO 3221
// end ;
3219: GO 3179
3221: POP
3222: POP
// if not tmp then
3223: LD_VAR 0 3
3227: NOT
3228: IFFALSE 3240
// tmp := JMM ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_EXP 1
3239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// if IsDead ( tmp ) then
3247: LD_VAR 0 3
3251: PPUSH
3252: CALL_OW 301
3256: IFFALSE 3268
// tmp := JMM ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: LD_EXP 1
3267: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3268: LD_INT 81
3270: PUSH
3271: LD_INT 1
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 91
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: LD_INT 15
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: PUSH
3304: LD_EXP 27
3308: PUSH
3309: LD_INT 6300
3311: LESS
3312: OR
3313: IFFALSE 3240
// blockSpawn := 1 ;
3315: LD_ADDR_EXP 30
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// uc_side := 4 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 4
3330: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3331: LD_ADDR_EXP 16
3335: PUSH
3336: LD_STRING Joan
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: LD_EXP 44
3346: PPUSH
3347: CALL 42689 0 3
3351: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3352: LD_EXP 16
3356: PPUSH
3357: LD_VAR 0 3
3361: PPUSH
3362: CALL_OW 250
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL_OW 251
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 1
3382: PPUSH
3383: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3387: LD_EXP 16
3391: PPUSH
3392: LD_INT 250
3394: PPUSH
3395: CALL_OW 234
// InGameOn ;
3399: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3403: LD_EXP 16
3407: PPUSH
3408: CALL_OW 87
// wait ( 0 0$2 ) ;
3412: LD_INT 70
3414: PPUSH
3415: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3419: LD_VAR 0 3
3423: PPUSH
3424: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3428: LD_VAR 0 3
3432: PPUSH
3433: CALL_OW 122
// wait ( 0 0$1 ) ;
3437: LD_INT 35
3439: PPUSH
3440: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_EXP 16
3453: PPUSH
3454: CALL_OW 112
// wait ( 0 0$2 ) ;
3458: LD_INT 70
3460: PPUSH
3461: CALL_OW 67
// DialogueOn ;
3465: CALL_OW 6
// if tmp = JMM then
3469: LD_VAR 0 3
3473: PUSH
3474: LD_EXP 1
3478: EQUAL
3479: IFFALSE 3628
// begin ComTurnUnit ( JMM , Joan ) ;
3481: LD_EXP 1
3485: PPUSH
3486: LD_EXP 16
3490: PPUSH
3491: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3495: LD_EXP 1
3499: PPUSH
3500: LD_STRING D5b-JMM-1
3502: PPUSH
3503: CALL_OW 88
// DialogueOff ;
3507: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3511: LD_EXP 16
3515: PPUSH
3516: LD_INT 500
3518: PPUSH
3519: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3523: LD_EXP 16
3527: PPUSH
3528: LD_EXP 1
3532: PPUSH
3533: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3537: LD_EXP 1
3541: PPUSH
3542: LD_EXP 16
3546: PPUSH
3547: CALL_OW 119
// wait ( 0 0$1 ) ;
3551: LD_INT 35
3553: PPUSH
3554: CALL_OW 67
// DialogueOn ;
3558: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3562: LD_EXP 16
3566: PPUSH
3567: LD_STRING D5b-Joan-1
3569: PPUSH
3570: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3574: LD_EXP 1
3578: PPUSH
3579: LD_STRING D5b-JMM-2
3581: PPUSH
3582: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3586: LD_EXP 16
3590: PPUSH
3591: LD_STRING D5b-Joan-2
3593: PPUSH
3594: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3598: LD_EXP 1
3602: PPUSH
3603: LD_STRING D5b-JMM-3
3605: PPUSH
3606: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3610: LD_EXP 16
3614: PPUSH
3615: LD_STRING D5b-Joan-3
3617: PPUSH
3618: CALL_OW 88
// DialogueOff ;
3622: CALL_OW 7
// end else
3626: GO 4094
// begin ComTurnUnit ( tmp , Joan ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_EXP 16
3637: PPUSH
3638: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3642: LD_VAR 0 3
3646: PPUSH
3647: LD_STRING D5a-Sol1-1
3649: PPUSH
3650: CALL_OW 88
// DialogueOff ;
3654: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_INT 500
3665: PPUSH
3666: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3670: LD_EXP 16
3674: PPUSH
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3684: LD_VAR 0 3
3688: PPUSH
3689: LD_EXP 16
3693: PPUSH
3694: CALL_OW 119
// wait ( 0 0$1 ) ;
3698: LD_INT 35
3700: PPUSH
3701: CALL_OW 67
// DialogueOn ;
3705: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3709: LD_EXP 16
3713: PPUSH
3714: LD_STRING D5a-Joan-1
3716: PPUSH
3717: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_STRING D5a-Sol1-2
3728: PPUSH
3729: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3733: LD_EXP 16
3737: PPUSH
3738: LD_STRING D5a-Joan-2
3740: PPUSH
3741: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_STRING D5a-Sol1-3
3752: PPUSH
3753: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3757: LD_EXP 16
3761: PPUSH
3762: LD_STRING D5a-Joan-3
3764: PPUSH
3765: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_STRING D5a-Sol1-4
3776: PPUSH
3777: CALL_OW 88
// DialogueOff ;
3781: CALL_OW 7
// if GetDistUnits ( JMM , Joan ) > 10 then
3785: LD_EXP 1
3789: PPUSH
3790: LD_EXP 16
3794: PPUSH
3795: CALL_OW 296
3799: PUSH
3800: LD_INT 10
3802: GREATER
3803: IFFALSE 3886
// begin InGameOff ;
3805: CALL_OW 9
// ComMoveUnit ( Joan , tmp ) ;
3809: LD_EXP 16
3813: PPUSH
3814: LD_VAR 0 3
3818: PPUSH
3819: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3823: LD_INT 35
3825: PPUSH
3826: CALL_OW 67
// until GetDistUnits ( JMM , Joan ) < 8 or IsDead ( Joan ) ;
3830: LD_EXP 1
3834: PPUSH
3835: LD_EXP 16
3839: PPUSH
3840: CALL_OW 296
3844: PUSH
3845: LD_INT 8
3847: LESS
3848: PUSH
3849: LD_EXP 16
3853: PPUSH
3854: CALL_OW 301
3858: OR
3859: IFFALSE 3823
// if IsDead ( Joan ) then
3861: LD_EXP 16
3865: PPUSH
3866: CALL_OW 301
3870: IFFALSE 3882
// begin blockSpawn := false ;
3872: LD_ADDR_EXP 30
3876: PUSH
3877: LD_INT 0
3879: ST_TO_ADDR
// exit ;
3880: GO 4225
// end ; InGameOn ;
3882: CALL_OW 8
// end ; if JMM in FilterAllUnits ( [ f_driving ] ) then
3886: LD_EXP 1
3890: PUSH
3891: LD_INT 55
3893: PUSH
3894: EMPTY
3895: LIST
3896: PPUSH
3897: CALL_OW 69
3901: IN
3902: IFFALSE 3925
// begin ComMoveUnit ( JMM , Joan ) ;
3904: LD_EXP 1
3908: PPUSH
3909: LD_EXP 16
3913: PPUSH
3914: CALL_OW 112
// wait ( 0 0$05 ) ;
3918: LD_INT 175
3920: PPUSH
3921: CALL_OW 67
// end ; ComExit ( JMM ) ;
3925: LD_EXP 1
3929: PPUSH
3930: CALL 80778 0 1
// wait ( 0 0$1 ) ;
3934: LD_INT 35
3936: PPUSH
3937: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3941: LD_INT 35
3943: PPUSH
3944: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3948: LD_EXP 16
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PPUSH
3962: LD_EXP 1
3966: PPUSH
3967: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3971: LD_EXP 16
3975: PPUSH
3976: LD_EXP 1
3980: PPUSH
3981: CALL_OW 296
3985: PUSH
3986: LD_INT 5
3988: LESS
3989: IFFALSE 3941
// ComTurnUnit ( Joan , JMM ) ;
3991: LD_EXP 16
3995: PPUSH
3996: LD_EXP 1
4000: PPUSH
4001: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
4005: LD_EXP 1
4009: PPUSH
4010: LD_EXP 16
4014: PPUSH
4015: CALL_OW 119
// wait ( 0 0$1 ) ;
4019: LD_INT 35
4021: PPUSH
4022: CALL_OW 67
// DialogueOn ;
4026: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
4030: LD_EXP 16
4034: PPUSH
4035: LD_STRING D5a-Joan-4
4037: PPUSH
4038: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
4042: LD_EXP 1
4046: PPUSH
4047: LD_STRING D5a-JMM-4
4049: PPUSH
4050: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
4054: LD_EXP 16
4058: PPUSH
4059: LD_STRING D5a-Joan-5
4061: PPUSH
4062: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
4066: LD_EXP 1
4070: PPUSH
4071: LD_STRING D5a-JMM-5
4073: PPUSH
4074: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
4078: LD_EXP 16
4082: PPUSH
4083: LD_STRING D5a-Joan-6
4085: PPUSH
4086: CALL_OW 88
// DialogueOff ;
4090: CALL_OW 7
// end ; DialogueOn ;
4094: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4098: LD_EXP 1
4102: PPUSH
4103: LD_STRING D6-JMM-1
4105: PPUSH
4106: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4110: LD_EXP 16
4114: PPUSH
4115: LD_STRING D6-Joan-1
4117: PPUSH
4118: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4122: LD_EXP 1
4126: PPUSH
4127: LD_STRING D6-JMM-2
4129: PPUSH
4130: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4134: LD_EXP 16
4138: PPUSH
4139: LD_STRING D6-Joan-2
4141: PPUSH
4142: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4146: LD_EXP 1
4150: PPUSH
4151: LD_STRING D6-JMM-3
4153: PPUSH
4154: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4158: LD_EXP 16
4162: PPUSH
4163: LD_STRING D6-Joan-3
4165: PPUSH
4166: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4170: LD_EXP 1
4174: PPUSH
4175: LD_STRING D6-JMM-4
4177: PPUSH
4178: CALL_OW 88
// DialogueOff ;
4182: CALL_OW 7
// InGameOff ;
4186: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4190: LD_EXP 16
4194: PPUSH
4195: LD_INT 1
4197: PPUSH
4198: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4202: LD_STRING MJ
4204: PPUSH
4205: CALL_OW 337
// joanStatus = 1 ;
4209: LD_ADDR_EXP 17
4213: PUSH
4214: LD_INT 1
4216: ST_TO_ADDR
// blockSpawn = 0 ;
4217: LD_ADDR_EXP 30
4221: PUSH
4222: LD_INT 0
4224: ST_TO_ADDR
// end ;
4225: LD_VAR 0 1
4229: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4230: LD_INT 0
4232: PPUSH
4233: PPUSH
// if not number or number > 8 then
4234: LD_VAR 0 1
4238: NOT
4239: PUSH
4240: LD_VAR 0 1
4244: PUSH
4245: LD_INT 8
4247: GREATER
4248: OR
4249: IFFALSE 4253
// exit ;
4251: GO 5801
// repeat wait ( 0 0$7 ) ;
4253: LD_INT 245
4255: PPUSH
4256: CALL_OW 67
// until blockSpawn = 0 ;
4260: LD_EXP 30
4264: PUSH
4265: LD_INT 0
4267: EQUAL
4268: IFFALSE 4253
// uc_side := 1 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 1
4277: ST_TO_ADDR
// uc_nation := 1 ;
4278: LD_ADDR_OWVAR 21
4282: PUSH
4283: LD_INT 1
4285: ST_TO_ADDR
// InitHc ;
4286: CALL_OW 19
// if number = 1 then
4290: LD_VAR 0 1
4294: PUSH
4295: LD_INT 1
4297: EQUAL
4298: IFFALSE 4474
// begin hc_class := 3 ;
4300: LD_ADDR_OWVAR 28
4304: PUSH
4305: LD_INT 3
4307: ST_TO_ADDR
// hc_sex := sex_male ;
4308: LD_ADDR_OWVAR 27
4312: PUSH
4313: LD_INT 1
4315: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4316: LD_ADDR_OWVAR 33
4320: PUSH
4321: LD_STRING SecondCharsGal
4323: ST_TO_ADDR
// hc_face_number := 55 ;
4324: LD_ADDR_OWVAR 34
4328: PUSH
4329: LD_INT 55
4331: ST_TO_ADDR
// hc_name := George McCarthy ;
4332: LD_ADDR_OWVAR 26
4336: PUSH
4337: LD_STRING George McCarthy
4339: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4340: LD_ADDR_OWVAR 29
4344: PUSH
4345: LD_INT 11
4347: PUSH
4348: LD_INT 10
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 3 , 0 ] ;
4355: LD_ADDR_OWVAR 30
4359: PUSH
4360: LD_INT 0
4362: PUSH
4363: LD_INT 0
4365: PUSH
4366: LD_INT 3
4368: PUSH
4369: LD_INT 0
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
4378: LD_ADDR_OWVAR 31
4382: PUSH
4383: LD_INT 0
4385: PUSH
4386: LD_INT 2
4388: PUSH
4389: LD_INT 3
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: ST_TO_ADDR
// un = CreateHuman ;
4401: LD_ADDR_VAR 0 3
4405: PUSH
4406: CALL_OW 44
4410: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4411: LD_VAR 0 3
4415: PPUSH
4416: LD_INT 23
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4426: LD_VAR 0 3
4430: PPUSH
4431: CALL_OW 87
// wait ( 0 0$1 ) ;
4435: LD_INT 35
4437: PPUSH
4438: CALL_OW 67
// DialogueOn ;
4442: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4446: LD_VAR 0 3
4450: PPUSH
4451: LD_STRING D11d-Sol4-1
4453: PPUSH
4454: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4458: LD_EXP 1
4462: PPUSH
4463: LD_STRING D11d-JMM-1
4465: PPUSH
4466: CALL_OW 88
// DialogueOff ;
4470: CALL_OW 7
// end ; if number = 2 then
4474: LD_VAR 0 1
4478: PUSH
4479: LD_INT 2
4481: EQUAL
4482: IFFALSE 4658
// begin hc_class := 1 ;
4484: LD_ADDR_OWVAR 28
4488: PUSH
4489: LD_INT 1
4491: ST_TO_ADDR
// hc_sex := sex_male ;
4492: LD_ADDR_OWVAR 27
4496: PUSH
4497: LD_INT 1
4499: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4500: LD_ADDR_OWVAR 33
4504: PUSH
4505: LD_STRING AmGalRemake
4507: ST_TO_ADDR
// hc_face_number := 7 ;
4508: LD_ADDR_OWVAR 34
4512: PUSH
4513: LD_INT 7
4515: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4516: LD_ADDR_OWVAR 26
4520: PUSH
4521: LD_STRING Bobby Jordan
4523: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4524: LD_ADDR_OWVAR 29
4528: PUSH
4529: LD_INT 9
4531: PUSH
4532: LD_INT 11
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 2 ] ;
4539: LD_ADDR_OWVAR 30
4543: PUSH
4544: LD_INT 1
4546: PUSH
4547: LD_INT 0
4549: PUSH
4550: LD_INT 0
4552: PUSH
4553: LD_INT 2
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 2 ] ;
4562: LD_ADDR_OWVAR 31
4566: PUSH
4567: LD_INT 3
4569: PUSH
4570: LD_INT 0
4572: PUSH
4573: LD_INT 1
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: ST_TO_ADDR
// un = CreateHuman ;
4585: LD_ADDR_VAR 0 3
4589: PUSH
4590: CALL_OW 44
4594: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4595: LD_VAR 0 3
4599: PPUSH
4600: LD_INT 24
4602: PPUSH
4603: LD_INT 1
4605: PPUSH
4606: CALL_OW 49
// wait ( 0 0$1 ) ;
4610: LD_INT 35
4612: PPUSH
4613: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4617: LD_VAR 0 3
4621: PPUSH
4622: CALL_OW 87
// DialogueOn ;
4626: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4630: LD_VAR 0 3
4634: PPUSH
4635: LD_STRING D11b-Sol3-1
4637: PPUSH
4638: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4642: LD_EXP 1
4646: PPUSH
4647: LD_STRING D11b-JMM-1
4649: PPUSH
4650: CALL_OW 88
// DialogueOff ;
4654: CALL_OW 7
// end ; if number = 3 then
4658: LD_VAR 0 1
4662: PUSH
4663: LD_INT 3
4665: EQUAL
4666: IFFALSE 4830
// begin hc_class := 1 ;
4668: LD_ADDR_OWVAR 28
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// hc_sex := sex_male ;
4676: LD_ADDR_OWVAR 27
4680: PUSH
4681: LD_INT 1
4683: ST_TO_ADDR
// hc_gallery := DJ ;
4684: LD_ADDR_OWVAR 33
4688: PUSH
4689: LD_STRING DJ
4691: ST_TO_ADDR
// hc_face_number := 1 ;
4692: LD_ADDR_OWVAR 34
4696: PUSH
4697: LD_INT 1
4699: ST_TO_ADDR
// hc_name := Darius Dajay ;
4700: LD_ADDR_OWVAR 26
4704: PUSH
4705: LD_STRING Darius Dajay
4707: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4708: LD_ADDR_OWVAR 29
4712: PUSH
4713: LD_INT 11
4715: PUSH
4716: LD_INT 11
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 1 , 0 ] ;
4723: LD_ADDR_OWVAR 30
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: LD_INT 0
4733: PUSH
4734: LD_INT 1
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 1 , 0 ] ;
4746: LD_ADDR_OWVAR 31
4750: PUSH
4751: LD_INT 5
4753: PUSH
4754: LD_INT 0
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: LD_INT 0
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: ST_TO_ADDR
// un = CreateHuman ;
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: CALL_OW 44
4778: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4779: LD_VAR 0 3
4783: PPUSH
4784: LD_INT 25
4786: PPUSH
4787: LD_INT 1
4789: PPUSH
4790: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4794: LD_VAR 0 3
4798: PPUSH
4799: CALL_OW 87
// wait ( 0 0$1 ) ;
4803: LD_INT 35
4805: PPUSH
4806: CALL_OW 67
// DialogueOn ;
4810: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: LD_STRING D11f-Sol5-1
4821: PPUSH
4822: CALL_OW 88
// DialogueOff ;
4826: CALL_OW 7
// end ; if number = 4 then
4830: LD_VAR 0 1
4834: PUSH
4835: LD_INT 4
4837: EQUAL
4838: IFFALSE 4975
// begin hc_class := 2 ;
4840: LD_ADDR_OWVAR 28
4844: PUSH
4845: LD_INT 2
4847: ST_TO_ADDR
// hc_sex := sex_female ;
4848: LD_ADDR_OWVAR 27
4852: PUSH
4853: LD_INT 2
4855: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4856: LD_ADDR_OWVAR 33
4860: PUSH
4861: LD_STRING SecondCharsGal
4863: ST_TO_ADDR
// hc_face_number := 46 ;
4864: LD_ADDR_OWVAR 34
4868: PUSH
4869: LD_INT 46
4871: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4872: LD_ADDR_OWVAR 26
4876: PUSH
4877: LD_STRING Sylvia Creak
4879: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4880: LD_ADDR_OWVAR 29
4884: PUSH
4885: LD_INT 10
4887: PUSH
4888: LD_INT 9
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4895: LD_ADDR_OWVAR 30
4899: PUSH
4900: LD_INT 0
4902: PUSH
4903: LD_INT 1
4905: PUSH
4906: LD_INT 1
4908: PUSH
4909: LD_INT 1
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4918: LD_ADDR_OWVAR 31
4922: PUSH
4923: LD_INT 1
4925: PUSH
4926: LD_INT 3
4928: PUSH
4929: LD_INT 1
4931: PUSH
4932: LD_INT 1
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: ST_TO_ADDR
// un = CreateHuman ;
4941: LD_ADDR_VAR 0 3
4945: PUSH
4946: CALL_OW 44
4950: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4951: LD_VAR 0 3
4955: PPUSH
4956: LD_INT 26
4958: PPUSH
4959: LD_INT 1
4961: PPUSH
4962: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4966: LD_VAR 0 3
4970: PPUSH
4971: CALL_OW 87
// end ; if number = 5 then
4975: LD_VAR 0 1
4979: PUSH
4980: LD_INT 5
4982: EQUAL
4983: IFFALSE 5159
// begin hc_class := 1 ;
4985: LD_ADDR_OWVAR 28
4989: PUSH
4990: LD_INT 1
4992: ST_TO_ADDR
// hc_sex := sex_female ;
4993: LD_ADDR_OWVAR 27
4997: PUSH
4998: LD_INT 2
5000: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5001: LD_ADDR_OWVAR 33
5005: PUSH
5006: LD_STRING SecondCharsGal
5008: ST_TO_ADDR
// hc_face_number := 37 ;
5009: LD_ADDR_OWVAR 34
5013: PUSH
5014: LD_INT 37
5016: ST_TO_ADDR
// hc_name := Malena Johnson ;
5017: LD_ADDR_OWVAR 26
5021: PUSH
5022: LD_STRING Malena Johnson
5024: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
5025: LD_ADDR_OWVAR 29
5029: PUSH
5030: LD_INT 11
5032: PUSH
5033: LD_INT 10
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5040: LD_ADDR_OWVAR 30
5044: PUSH
5045: LD_INT 1
5047: PUSH
5048: LD_INT 2
5050: PUSH
5051: LD_INT 0
5053: PUSH
5054: LD_INT 0
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: ST_TO_ADDR
// hc_skills := [ 3 , 2 , 1 , 0 ] ;
5063: LD_ADDR_OWVAR 31
5067: PUSH
5068: LD_INT 3
5070: PUSH
5071: LD_INT 2
5073: PUSH
5074: LD_INT 1
5076: PUSH
5077: LD_INT 0
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: ST_TO_ADDR
// un = CreateHuman ;
5086: LD_ADDR_VAR 0 3
5090: PUSH
5091: CALL_OW 44
5095: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
5096: LD_VAR 0 3
5100: PPUSH
5101: LD_INT 27
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5111: LD_VAR 0 3
5115: PPUSH
5116: CALL_OW 87
// wait ( 0 0$1 ) ;
5120: LD_INT 35
5122: PPUSH
5123: CALL_OW 67
// DialogueOn ;
5127: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5131: LD_VAR 0 3
5135: PPUSH
5136: LD_STRING D11c-FSol3-1
5138: PPUSH
5139: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5143: LD_EXP 1
5147: PPUSH
5148: LD_STRING D11c-JMM-1
5150: PPUSH
5151: CALL_OW 88
// DialogueOff ;
5155: CALL_OW 7
// end ; if number = 6 then
5159: LD_VAR 0 1
5163: PUSH
5164: LD_INT 6
5166: EQUAL
5167: IFFALSE 5341
// begin hc_class := 1 ;
5169: LD_ADDR_OWVAR 28
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// hc_sex := sex_male ;
5177: LD_ADDR_OWVAR 27
5181: PUSH
5182: LD_INT 1
5184: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5185: LD_ADDR_OWVAR 33
5189: PUSH
5190: LD_STRING AmGalRemake
5192: ST_TO_ADDR
// hc_face_number := 1 ;
5193: LD_ADDR_OWVAR 34
5197: PUSH
5198: LD_INT 1
5200: ST_TO_ADDR
// hc_name := Charles Brown ;
5201: LD_ADDR_OWVAR 26
5205: PUSH
5206: LD_STRING Charles Brown
5208: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5209: LD_ADDR_OWVAR 29
5213: PUSH
5214: LD_INT 12
5216: PUSH
5217: LD_INT 11
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
5224: LD_ADDR_OWVAR 30
5228: PUSH
5229: LD_INT 3
5231: PUSH
5232: LD_INT 0
5234: PUSH
5235: LD_INT 0
5237: PUSH
5238: LD_INT 0
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
5247: LD_ADDR_OWVAR 31
5251: PUSH
5252: LD_INT 3
5254: PUSH
5255: LD_INT 1
5257: PUSH
5258: LD_INT 1
5260: PUSH
5261: LD_INT 1
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: ST_TO_ADDR
// un = CreateHuman ;
5270: LD_ADDR_VAR 0 3
5274: PUSH
5275: CALL_OW 44
5279: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5280: LD_VAR 0 3
5284: PPUSH
5285: LD_INT 28
5287: PPUSH
5288: LD_INT 1
5290: PPUSH
5291: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5295: LD_VAR 0 3
5299: PPUSH
5300: CALL_OW 87
// wait ( 0 0$1 ) ;
5304: LD_INT 35
5306: PPUSH
5307: CALL_OW 67
// DialogueOn ;
5311: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5315: LD_VAR 0 3
5319: PPUSH
5320: LD_STRING D4-Sol1-5
5322: PPUSH
5323: CALL_OW 88
// DialogueOff ;
5327: CALL_OW 7
// tempCharles = un ;
5331: LD_ADDR_EXP 14
5335: PUSH
5336: LD_VAR 0 3
5340: ST_TO_ADDR
// end ; if number = 7 then
5341: LD_VAR 0 1
5345: PUSH
5346: LD_INT 7
5348: EQUAL
5349: IFFALSE 5621
// begin hc_class := 1 ;
5351: LD_ADDR_OWVAR 28
5355: PUSH
5356: LD_INT 1
5358: ST_TO_ADDR
// hc_sex := sex_female ;
5359: LD_ADDR_OWVAR 27
5363: PUSH
5364: LD_INT 2
5366: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5367: LD_ADDR_OWVAR 33
5371: PUSH
5372: LD_STRING AmGalRemake
5374: ST_TO_ADDR
// hc_face_number := 2 ;
5375: LD_ADDR_OWVAR 34
5379: PUSH
5380: LD_INT 2
5382: ST_TO_ADDR
// hc_name := Johanna Holland ;
5383: LD_ADDR_OWVAR 26
5387: PUSH
5388: LD_STRING Johanna Holland
5390: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5391: LD_ADDR_OWVAR 29
5395: PUSH
5396: LD_INT 10
5398: PUSH
5399: LD_INT 10
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 1 ] ;
5406: LD_ADDR_OWVAR 30
5410: PUSH
5411: LD_INT 2
5413: PUSH
5414: LD_INT 0
5416: PUSH
5417: LD_INT 0
5419: PUSH
5420: LD_INT 1
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 2 ] ;
5429: LD_ADDR_OWVAR 31
5433: PUSH
5434: LD_INT 3
5436: PUSH
5437: LD_INT 0
5439: PUSH
5440: LD_INT 1
5442: PUSH
5443: LD_INT 2
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: ST_TO_ADDR
// un = CreateHuman ;
5452: LD_ADDR_VAR 0 3
5456: PUSH
5457: CALL_OW 44
5461: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5462: LD_VAR 0 3
5466: PPUSH
5467: LD_INT 29
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5477: LD_VAR 0 3
5481: PPUSH
5482: CALL_OW 87
// wait ( 0 0$1 ) ;
5486: LD_INT 35
5488: PPUSH
5489: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5493: LD_INT 30
5495: PPUSH
5496: LD_INT 22
5498: PUSH
5499: LD_INT 3
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 70
5510: IFFALSE 5621
// begin DialogueOn ;
5512: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5516: LD_VAR 0 3
5520: PPUSH
5521: CALL_OW 250
5525: PPUSH
5526: LD_VAR 0 3
5530: PPUSH
5531: CALL_OW 251
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 15
5541: NEG
5542: PPUSH
5543: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5547: LD_VAR 0 3
5551: PPUSH
5552: CALL_OW 250
5556: PPUSH
5557: LD_VAR 0 3
5561: PPUSH
5562: CALL_OW 251
5566: PPUSH
5567: LD_INT 1
5569: PPUSH
5570: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5574: LD_VAR 0 3
5578: PPUSH
5579: LD_STRING D11a-FSol2-1
5581: PPUSH
5582: CALL_OW 88
// DialogueOff ;
5586: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5590: LD_INT 3
5592: PPUSH
5593: LD_VAR 0 3
5597: PPUSH
5598: CALL_OW 471
// wait ( 0 0$2 ) ;
5602: LD_INT 70
5604: PPUSH
5605: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5609: LD_INT 3
5611: PPUSH
5612: LD_VAR 0 3
5616: PPUSH
5617: CALL_OW 472
// end ; end ; if number = 8 then
5621: LD_VAR 0 1
5625: PUSH
5626: LD_INT 8
5628: EQUAL
5629: IFFALSE 5785
// begin hc_class := 1 ;
5631: LD_ADDR_OWVAR 28
5635: PUSH
5636: LD_INT 1
5638: ST_TO_ADDR
// hc_sex := sex_female ;
5639: LD_ADDR_OWVAR 27
5643: PUSH
5644: LD_INT 2
5646: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5647: LD_ADDR_OWVAR 33
5651: PUSH
5652: LD_STRING SecondCharsGal
5654: ST_TO_ADDR
// hc_face_number := 45 ;
5655: LD_ADDR_OWVAR 34
5659: PUSH
5660: LD_INT 45
5662: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5663: LD_ADDR_OWVAR 26
5667: PUSH
5668: LD_STRING Margherite Simpson
5670: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5671: LD_ADDR_OWVAR 29
5675: PUSH
5676: LD_INT 12
5678: PUSH
5679: LD_INT 10
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5686: LD_ADDR_OWVAR 30
5690: PUSH
5691: LD_INT 1
5693: PUSH
5694: LD_INT 2
5696: PUSH
5697: LD_INT 0
5699: PUSH
5700: LD_INT 0
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 1 ] ;
5709: LD_ADDR_OWVAR 31
5713: PUSH
5714: LD_INT 2
5716: PUSH
5717: LD_INT 3
5719: PUSH
5720: LD_INT 0
5722: PUSH
5723: LD_INT 1
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: ST_TO_ADDR
// un = CreateHuman ;
5732: LD_ADDR_VAR 0 3
5736: PUSH
5737: CALL_OW 44
5741: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5742: LD_VAR 0 3
5746: PPUSH
5747: LD_INT 33
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5757: LD_VAR 0 3
5761: PPUSH
5762: CALL_OW 87
// wait ( 0 0$1 ) ;
5766: LD_INT 35
5768: PPUSH
5769: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5773: LD_VAR 0 3
5777: PPUSH
5778: LD_STRING D11e-FSol4-1
5780: PPUSH
5781: CALL_OW 88
// end ; arrivals := arrivals union un ;
5785: LD_ADDR_EXP 45
5789: PUSH
5790: LD_EXP 45
5794: PUSH
5795: LD_VAR 0 3
5799: UNION
5800: ST_TO_ADDR
// end ; end_of_file
5801: LD_VAR 0 2
5805: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5806: LD_INT 0
5808: PPUSH
5809: PPUSH
// ruAttackers := [ ] ;
5810: LD_ADDR_EXP 48
5814: PUSH
5815: EMPTY
5816: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5817: LD_ADDR_EXP 49
5821: PUSH
5822: EMPTY
5823: ST_TO_ADDR
// if Difficulty < 3 then
5824: LD_OWVAR 67
5828: PUSH
5829: LD_INT 3
5831: LESS
5832: IFFALSE 5849
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5834: LD_INT 130
5836: PPUSH
5837: LD_INT 81
5839: PPUSH
5840: CALL_OW 428
5844: PPUSH
5845: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5849: LD_INT 3
5851: PPUSH
5852: LD_INT 3
5854: PPUSH
5855: LD_INT 2
5857: PPUSH
5858: LD_EXP 35
5862: PPUSH
5863: LD_EXP 36
5867: PPUSH
5868: CALL_OW 12
5872: PPUSH
5873: LD_INT 2
5875: PPUSH
5876: LD_INT 4
5878: PPUSH
5879: CALL 7676 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5883: LD_INT 3
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: LD_INT 8
5891: PPUSH
5892: LD_EXP 35
5896: PPUSH
5897: LD_EXP 36
5901: PPUSH
5902: CALL_OW 12
5906: PPUSH
5907: LD_INT 1
5909: PPUSH
5910: LD_INT 4
5912: PPUSH
5913: CALL 7676 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5917: LD_INT 3
5919: PPUSH
5920: LD_INT 3
5922: PPUSH
5923: LD_INT 67
5925: PPUSH
5926: LD_EXP 35
5930: PPUSH
5931: LD_EXP 36
5935: PPUSH
5936: CALL_OW 12
5940: PPUSH
5941: LD_INT 1
5943: PPUSH
5944: LD_INT 2
5946: PPUSH
5947: CALL 7676 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5951: LD_INT 3
5953: PPUSH
5954: LD_INT 3
5956: PPUSH
5957: LD_INT 21
5959: PPUSH
5960: LD_EXP 35
5964: PPUSH
5965: LD_EXP 36
5969: PPUSH
5970: CALL_OW 12
5974: PPUSH
5975: LD_INT 3
5977: PPUSH
5978: LD_INT 6
5980: PPUSH
5981: CALL 7676 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5985: LD_INT 3
5987: PPUSH
5988: LD_INT 3
5990: PPUSH
5991: LD_INT 17
5993: PPUSH
5994: LD_EXP 35
5998: PPUSH
5999: LD_EXP 36
6003: PPUSH
6004: CALL_OW 12
6008: PPUSH
6009: LD_INT 3
6011: PPUSH
6012: LD_INT 6
6014: PPUSH
6015: CALL 7676 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
6019: LD_INT 3
6021: PPUSH
6022: LD_INT 3
6024: PPUSH
6025: LD_INT 32
6027: PPUSH
6028: LD_EXP 35
6032: PPUSH
6033: LD_EXP 36
6037: PPUSH
6038: CALL_OW 12
6042: PPUSH
6043: LD_INT 4
6045: PPUSH
6046: LD_INT 2
6048: PPUSH
6049: CALL 7676 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6053: LD_ADDR_VAR 0 2
6057: PUSH
6058: LD_INT 22
6060: PUSH
6061: LD_INT 3
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 21
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 30
6080: PUSH
6081: LD_INT 32
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6139
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6101: LD_INT 3
6103: PPUSH
6104: LD_INT 3
6106: PPUSH
6107: LD_VAR 0 2
6111: PPUSH
6112: LD_EXP 35
6116: PPUSH
6117: LD_EXP 36
6121: PPUSH
6122: CALL_OW 12
6126: PPUSH
6127: LD_INT 1
6129: PPUSH
6130: LD_INT 1
6132: PPUSH
6133: CALL 7676 0 6
6137: GO 6098
6139: POP
6140: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6141: LD_ADDR_VAR 0 2
6145: PUSH
6146: LD_INT 22
6148: PUSH
6149: LD_INT 3
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: PUSH
6156: LD_INT 21
6158: PUSH
6159: LD_INT 3
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: LD_INT 30
6168: PUSH
6169: LD_INT 31
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 69
6185: PUSH
6186: FOR_IN
6187: IFFALSE 6215
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6189: LD_EXP 35
6193: PPUSH
6194: LD_EXP 36
6198: PPUSH
6199: CALL_OW 12
6203: PPUSH
6204: LD_VAR 0 2
6208: PPUSH
6209: CALL 7786 0 2
6213: GO 6186
6215: POP
6216: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6217: LD_INT 3
6219: PPUSH
6220: LD_INT 32
6222: PPUSH
6223: LD_INT 3
6225: PPUSH
6226: CALL 8065 0 3
// end ;
6230: LD_VAR 0 1
6234: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6235: LD_INT 22
6237: PUSH
6238: LD_INT 3
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 32
6247: PUSH
6248: LD_INT 1
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: PPUSH
6259: CALL_OW 69
6263: IFFALSE 6340
6265: GO 6267
6267: DISABLE
6268: LD_INT 0
6270: PPUSH
// begin enable ;
6271: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6272: LD_ADDR_VAR 0 1
6276: PUSH
6277: LD_INT 22
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 32
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PPUSH
6301: CALL_OW 69
6305: PUSH
6306: FOR_IN
6307: IFFALSE 6338
// if GetFuel ( i ) < 3 then
6309: LD_VAR 0 1
6313: PPUSH
6314: CALL_OW 261
6318: PUSH
6319: LD_INT 3
6321: LESS
6322: IFFALSE 6336
// SetFuel ( i , 3 ) ;
6324: LD_VAR 0 1
6328: PPUSH
6329: LD_INT 3
6331: PPUSH
6332: CALL_OW 240
6336: GO 6306
6338: POP
6339: POP
// end ;
6340: PPOPN 1
6342: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6343: LD_OWVAR 67
6347: PUSH
6348: LD_INT 1
6350: GREATER
6351: IFFALSE 6920
6353: GO 6355
6355: DISABLE
6356: LD_INT 0
6358: PPUSH
6359: PPUSH
6360: PPUSH
6361: PPUSH
// begin uc_side := 3 ;
6362: LD_ADDR_OWVAR 20
6366: PUSH
6367: LD_INT 3
6369: ST_TO_ADDR
// uc_nation := 3 ;
6370: LD_ADDR_OWVAR 21
6374: PUSH
6375: LD_INT 3
6377: ST_TO_ADDR
// for i := 1 to 2 do
6378: LD_ADDR_VAR 0 1
6382: PUSH
6383: DOUBLE
6384: LD_INT 1
6386: DEC
6387: ST_TO_ADDR
6388: LD_INT 2
6390: PUSH
6391: FOR_TO
6392: IFFALSE 6506
// begin InitHC_All ( ) ;
6394: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6398: LD_INT 0
6400: PPUSH
6401: LD_INT 4
6403: PUSH
6404: LD_INT 5
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 6
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: PUSH
6419: LD_OWVAR 67
6423: ARRAY
6424: PPUSH
6425: CALL_OW 381
// un := CreateHuman ;
6429: LD_ADDR_VAR 0 2
6433: PUSH
6434: CALL_OW 44
6438: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6439: LD_VAR 0 2
6443: PPUSH
6444: LD_INT 91
6446: PPUSH
6447: LD_INT 87
6449: PPUSH
6450: LD_INT 3
6452: PPUSH
6453: LD_INT 0
6455: PPUSH
6456: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6460: LD_ADDR_EXP 49
6464: PUSH
6465: LD_EXP 49
6469: PPUSH
6470: LD_EXP 49
6474: PUSH
6475: LD_INT 1
6477: PLUS
6478: PPUSH
6479: LD_VAR 0 2
6483: PPUSH
6484: CALL_OW 1
6488: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6489: LD_VAR 0 2
6493: PPUSH
6494: LD_INT 46
6496: PPUSH
6497: LD_INT 78
6499: PPUSH
6500: CALL_OW 114
// end ;
6504: GO 6391
6506: POP
6507: POP
// if Difficulty > 2 then
6508: LD_OWVAR 67
6512: PUSH
6513: LD_INT 2
6515: GREATER
6516: IFFALSE 6648
// begin for i := 1 to 3 do
6518: LD_ADDR_VAR 0 1
6522: PUSH
6523: DOUBLE
6524: LD_INT 1
6526: DEC
6527: ST_TO_ADDR
6528: LD_INT 3
6530: PUSH
6531: FOR_TO
6532: IFFALSE 6646
// begin InitHC_All ( ) ;
6534: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6538: LD_INT 0
6540: PPUSH
6541: LD_INT 4
6543: PUSH
6544: LD_INT 5
6546: PUSH
6547: LD_INT 6
6549: PUSH
6550: LD_INT 6
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: PUSH
6559: LD_OWVAR 67
6563: ARRAY
6564: PPUSH
6565: CALL_OW 381
// un := CreateHuman ;
6569: LD_ADDR_VAR 0 2
6573: PUSH
6574: CALL_OW 44
6578: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6579: LD_VAR 0 2
6583: PPUSH
6584: LD_INT 91
6586: PPUSH
6587: LD_INT 87
6589: PPUSH
6590: LD_INT 3
6592: PPUSH
6593: LD_INT 0
6595: PPUSH
6596: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6600: LD_ADDR_EXP 49
6604: PUSH
6605: LD_EXP 49
6609: PPUSH
6610: LD_EXP 49
6614: PUSH
6615: LD_INT 1
6617: PLUS
6618: PPUSH
6619: LD_VAR 0 2
6623: PPUSH
6624: CALL_OW 1
6628: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6629: LD_VAR 0 2
6633: PPUSH
6634: LD_INT 89
6636: PPUSH
6637: LD_INT 148
6639: PPUSH
6640: CALL_OW 114
// end ;
6644: GO 6531
6646: POP
6647: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6648: LD_ADDR_VAR 0 3
6652: PUSH
6653: LD_INT 33
6655: PUSH
6656: LD_INT 61
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 49
6665: PUSH
6666: LD_INT 85
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: LD_INT 76
6675: PUSH
6676: LD_INT 99
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 81
6685: PUSH
6686: LD_INT 135
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 111
6695: PUSH
6696: LD_INT 155
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 147
6705: PUSH
6706: LD_INT 158
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6721: LD_INT 1050
6723: PPUSH
6724: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6728: LD_ADDR_VAR 0 1
6732: PUSH
6733: DOUBLE
6734: LD_INT 1
6736: DEC
6737: ST_TO_ADDR
6738: LD_EXP 49
6742: PUSH
6743: FOR_TO
6744: IFFALSE 6911
// begin un := ruAttackersInForest [ i ] ;
6746: LD_ADDR_VAR 0 2
6750: PUSH
6751: LD_EXP 49
6755: PUSH
6756: LD_VAR 0 1
6760: ARRAY
6761: ST_TO_ADDR
// tag := GetTag ( un ) ;
6762: LD_ADDR_VAR 0 4
6766: PUSH
6767: LD_VAR 0 2
6771: PPUSH
6772: CALL_OW 110
6776: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6777: LD_VAR 0 2
6781: PPUSH
6782: CALL_OW 302
6786: PUSH
6787: LD_VAR 0 2
6791: PPUSH
6792: CALL_OW 314
6796: NOT
6797: AND
6798: IFFALSE 6909
// begin if tag <> i then
6800: LD_VAR 0 4
6804: PUSH
6805: LD_VAR 0 1
6809: NONEQUAL
6810: IFFALSE 6838
// begin SetTag ( un , i ) ;
6812: LD_VAR 0 2
6816: PPUSH
6817: LD_VAR 0 1
6821: PPUSH
6822: CALL_OW 109
// tag := i ;
6826: LD_ADDR_VAR 0 4
6830: PUSH
6831: LD_VAR 0 1
6835: ST_TO_ADDR
// end else
6836: GO 6870
// begin SetTag ( un , i + 1 ) ;
6838: LD_VAR 0 2
6842: PPUSH
6843: LD_VAR 0 1
6847: PUSH
6848: LD_INT 1
6850: PLUS
6851: PPUSH
6852: CALL_OW 109
// tag := i + 1 ;
6856: LD_ADDR_VAR 0 4
6860: PUSH
6861: LD_VAR 0 1
6865: PUSH
6866: LD_INT 1
6868: PLUS
6869: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6870: LD_VAR 0 2
6874: PPUSH
6875: LD_VAR 0 3
6879: PUSH
6880: LD_VAR 0 4
6884: ARRAY
6885: PUSH
6886: LD_INT 1
6888: ARRAY
6889: PPUSH
6890: LD_VAR 0 3
6894: PUSH
6895: LD_VAR 0 4
6899: ARRAY
6900: PUSH
6901: LD_INT 2
6903: ARRAY
6904: PPUSH
6905: CALL_OW 114
// end ; end ;
6909: GO 6743
6911: POP
6912: POP
// until not ruAttackersInForest ;
6913: LD_EXP 49
6917: NOT
6918: IFFALSE 6721
// end ;
6920: PPOPN 4
6922: END
// every 0 0$2 trigger FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) do var i , tmp , bar , e ;
6923: LD_INT 10
6925: PPUSH
6926: LD_INT 22
6928: PUSH
6929: LD_INT 1
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PPUSH
6936: CALL_OW 70
6940: IFFALSE 7289
6942: GO 6944
6944: DISABLE
6945: LD_INT 0
6947: PPUSH
6948: PPUSH
6949: PPUSH
6950: PPUSH
// begin enable ;
6951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] , [ f_tag , 111 ] ] ) ;
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_INT 22
6959: PUSH
6960: LD_INT 3
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: LD_INT 25
6969: PUSH
6970: LD_INT 1
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 120
6979: PUSH
6980: LD_INT 111
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: LIST
6991: PPUSH
6992: CALL_OW 69
6996: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
6997: LD_ADDR_VAR 0 3
7001: PUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 50
7014: PUSH
7015: EMPTY
7016: LIST
7017: PUSH
7018: LD_INT 2
7020: PUSH
7021: LD_INT 30
7023: PUSH
7024: LD_INT 4
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PUSH
7031: LD_INT 30
7033: PUSH
7034: LD_INT 5
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: PPUSH
7051: CALL_OW 69
7055: ST_TO_ADDR
// if not tmp then
7056: LD_VAR 0 2
7060: NOT
7061: IFFALSE 7159
// begin if not bar then
7063: LD_VAR 0 3
7067: NOT
7068: IFFALSE 7073
// begin disable ;
7070: DISABLE
// exit ;
7071: GO 7289
// end ; tmp := [ ] ;
7073: LD_ADDR_VAR 0 2
7077: PUSH
7078: EMPTY
7079: ST_TO_ADDR
// for i in bar do
7080: LD_ADDR_VAR 0 1
7084: PUSH
7085: LD_VAR 0 3
7089: PUSH
7090: FOR_IN
7091: IFFALSE 7116
// tmp := tmp union UnitsInside ( i ) ;
7093: LD_ADDR_VAR 0 2
7097: PUSH
7098: LD_VAR 0 2
7102: PUSH
7103: LD_VAR 0 1
7107: PPUSH
7108: CALL_OW 313
7112: UNION
7113: ST_TO_ADDR
7114: GO 7090
7116: POP
7117: POP
// if not tmp then
7118: LD_VAR 0 2
7122: NOT
7123: IFFALSE 7128
// begin disable ;
7125: DISABLE
// exit ;
7126: GO 7289
// end ; for i in tmp do
7128: LD_ADDR_VAR 0 1
7132: PUSH
7133: LD_VAR 0 2
7137: PUSH
7138: FOR_IN
7139: IFFALSE 7155
// SetTag ( i , 111 ) ;
7141: LD_VAR 0 1
7145: PPUSH
7146: LD_INT 111
7148: PPUSH
7149: CALL_OW 109
7153: GO 7138
7155: POP
7156: POP
// end else
7157: GO 7289
// begin e := FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) ;
7159: LD_ADDR_VAR 0 4
7163: PUSH
7164: LD_INT 10
7166: PPUSH
7167: LD_INT 22
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PPUSH
7177: CALL_OW 70
7181: ST_TO_ADDR
// for i in tmp do
7182: LD_ADDR_VAR 0 1
7186: PUSH
7187: LD_VAR 0 2
7191: PUSH
7192: FOR_IN
7193: IFFALSE 7287
// if IsOk ( i ) then
7195: LD_VAR 0 1
7199: PPUSH
7200: CALL_OW 302
7204: IFFALSE 7285
// begin if IsInUnit ( i ) then
7206: LD_VAR 0 1
7210: PPUSH
7211: CALL_OW 310
7215: IFFALSE 7226
// ComExitBuilding ( i ) ;
7217: LD_VAR 0 1
7221: PPUSH
7222: CALL_OW 122
// wait ( 3 ) ;
7226: LD_INT 3
7228: PPUSH
7229: CALL_OW 67
// ComAttackUnit ( i , NearestUnitToUnit ( e , i ) ) ;
7233: LD_VAR 0 1
7237: PPUSH
7238: LD_VAR 0 4
7242: PPUSH
7243: LD_VAR 0 1
7247: PPUSH
7248: CALL_OW 74
7252: PPUSH
7253: CALL_OW 115
// AddComEnterUnit ( i , bar [ rand ( 1 , bar ) ] ) ;
7257: LD_VAR 0 1
7261: PPUSH
7262: LD_VAR 0 3
7266: PUSH
7267: LD_INT 1
7269: PPUSH
7270: LD_VAR 0 3
7274: PPUSH
7275: CALL_OW 12
7279: ARRAY
7280: PPUSH
7281: CALL_OW 180
// end ;
7285: GO 7192
7287: POP
7288: POP
// end ; end ;
7289: PPOPN 4
7291: END
// every 3 3$00 trigger tick > 2 2$00 and Prob ( 50 ) do var un ;
7292: LD_OWVAR 1
7296: PUSH
7297: LD_INT 4200
7299: GREATER
7300: PUSH
7301: LD_INT 50
7303: PPUSH
7304: CALL_OW 13
7308: AND
7309: IFFALSE 7400
7311: GO 7313
7313: DISABLE
7314: LD_INT 0
7316: PPUSH
// begin uc_side := 3 ;
7317: LD_ADDR_OWVAR 20
7321: PUSH
7322: LD_INT 3
7324: ST_TO_ADDR
// uc_nation := nation_russian ;
7325: LD_ADDR_OWVAR 21
7329: PUSH
7330: LD_INT 3
7332: ST_TO_ADDR
// InitHC_All ( ) ;
7333: CALL_OW 584
// PrepareEngineer ( false , 2 ) ;
7337: LD_INT 0
7339: PPUSH
7340: LD_INT 2
7342: PPUSH
7343: CALL_OW 382
// un := CreateHuman ;
7347: LD_ADDR_VAR 0 1
7351: PUSH
7352: CALL_OW 44
7356: ST_TO_ADDR
// PlaceUnitXYR ( un , 51 , 7 , 12 , true ) ;
7357: LD_VAR 0 1
7361: PPUSH
7362: LD_INT 51
7364: PPUSH
7365: LD_INT 7
7367: PPUSH
7368: LD_INT 12
7370: PPUSH
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 50
// wait ( 0 0$1 ) ;
7378: LD_INT 35
7380: PPUSH
7381: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7385: LD_VAR 0 1
7389: PPUSH
7390: LD_INT 106
7392: PPUSH
7393: LD_INT 83
7395: PPUSH
7396: CALL_OW 111
// end ;
7400: PPOPN 1
7402: END
// every 3 3$30 trigger tick > 10 10$00 and Prob ( 45 ) do var un ;
7403: LD_OWVAR 1
7407: PUSH
7408: LD_INT 21000
7410: GREATER
7411: PUSH
7412: LD_INT 45
7414: PPUSH
7415: CALL_OW 13
7419: AND
7420: IFFALSE 7535
7422: GO 7424
7424: DISABLE
7425: LD_INT 0
7427: PPUSH
// begin uc_side := 3 ;
7428: LD_ADDR_OWVAR 20
7432: PUSH
7433: LD_INT 3
7435: ST_TO_ADDR
// uc_nation := nation_russian ;
7436: LD_ADDR_OWVAR 21
7440: PUSH
7441: LD_INT 3
7443: ST_TO_ADDR
// InitHC_All ( ) ;
7444: CALL_OW 584
// PrepareScientist ( false , 2 ) ;
7448: LD_INT 0
7450: PPUSH
7451: LD_INT 2
7453: PPUSH
7454: CALL_OW 384
// un := CreateHuman ;
7458: LD_ADDR_VAR 0 1
7462: PUSH
7463: CALL_OW 44
7467: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 18 , 15 , true ) ;
7468: LD_VAR 0 1
7472: PPUSH
7473: LD_INT 91
7475: PPUSH
7476: LD_INT 18
7478: PPUSH
7479: LD_INT 15
7481: PPUSH
7482: LD_INT 1
7484: PPUSH
7485: CALL_OW 50
// wait ( 0 0$1 ) ;
7489: LD_INT 35
7491: PPUSH
7492: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7496: LD_VAR 0 1
7500: PPUSH
7501: LD_INT 106
7503: PPUSH
7504: LD_INT 83
7506: PPUSH
7507: CALL_OW 111
// AddComEnterUnit ( un , ruarm2 ) ;
7511: LD_VAR 0 1
7515: PPUSH
7516: LD_INT 67
7518: PPUSH
7519: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
7523: LD_VAR 0 1
7527: PPUSH
7528: LD_INT 1
7530: PPUSH
7531: CALL_OW 183
// end ; end_of_file
7535: PPOPN 1
7537: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7538: LD_INT 0
7540: PPUSH
7541: PPUSH
7542: PPUSH
// if not characters then
7543: LD_VAR 0 1
7547: NOT
7548: IFFALSE 7552
// exit ;
7550: GO 7631
// speaker := characters [ rand ( 1 , characters ) ] ;
7552: LD_ADDR_VAR 0 6
7556: PUSH
7557: LD_VAR 0 1
7561: PUSH
7562: LD_INT 1
7564: PPUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: CALL_OW 12
7574: ARRAY
7575: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7576: LD_VAR 0 6
7580: PPUSH
7581: CALL_OW 258
7585: PUSH
7586: LD_INT 1
7588: EQUAL
7589: IFFALSE 7607
// Say ( speaker , dialogMID ) else
7591: LD_VAR 0 6
7595: PPUSH
7596: LD_VAR 0 2
7600: PPUSH
7601: CALL_OW 88
7605: GO 7621
// Say ( speaker , dialogFID ) ;
7607: LD_VAR 0 6
7611: PPUSH
7612: LD_VAR 0 3
7616: PPUSH
7617: CALL_OW 88
// result := speaker ;
7621: LD_ADDR_VAR 0 4
7625: PUSH
7626: LD_VAR 0 6
7630: ST_TO_ADDR
// end ;
7631: LD_VAR 0 4
7635: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7636: LD_INT 0
7638: PPUSH
7639: PPUSH
// for i in charactersList do
7640: LD_ADDR_VAR 0 4
7644: PUSH
7645: LD_VAR 0 1
7649: PUSH
7650: FOR_IN
7651: IFFALSE 7669
// SaveCharacters ( i , ident ) ;
7653: LD_VAR 0 4
7657: PPUSH
7658: LD_VAR 0 2
7662: PPUSH
7663: CALL_OW 38
7667: GO 7650
7669: POP
7670: POP
// end ;
7671: LD_VAR 0 3
7675: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7676: LD_INT 0
7678: PPUSH
7679: PPUSH
7680: PPUSH
7681: PPUSH
// for i := 1 to count do
7682: LD_ADDR_VAR 0 8
7686: PUSH
7687: DOUBLE
7688: LD_INT 1
7690: DEC
7691: ST_TO_ADDR
7692: LD_VAR 0 6
7696: PUSH
7697: FOR_TO
7698: IFFALSE 7779
// begin uc_side = side ;
7700: LD_ADDR_OWVAR 20
7704: PUSH
7705: LD_VAR 0 1
7709: ST_TO_ADDR
// uc_nation = nation ;
7710: LD_ADDR_OWVAR 21
7714: PUSH
7715: LD_VAR 0 2
7719: ST_TO_ADDR
// hc_gallery =  ;
7720: LD_ADDR_OWVAR 33
7724: PUSH
7725: LD_STRING 
7727: ST_TO_ADDR
// hc_name =  ;
7728: LD_ADDR_OWVAR 26
7732: PUSH
7733: LD_STRING 
7735: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7736: LD_INT 0
7738: PPUSH
7739: LD_VAR 0 5
7743: PPUSH
7744: LD_VAR 0 4
7748: PPUSH
7749: CALL_OW 380
// un = CreateHuman ;
7753: LD_ADDR_VAR 0 10
7757: PUSH
7758: CALL_OW 44
7762: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7763: LD_VAR 0 10
7767: PPUSH
7768: LD_VAR 0 3
7772: PPUSH
7773: CALL_OW 52
// end ;
7777: GO 7697
7779: POP
7780: POP
// end ;
7781: LD_VAR 0 7
7785: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7786: LD_INT 0
7788: PPUSH
7789: PPUSH
7790: PPUSH
// uc_side := GetSide ( b ) ;
7791: LD_ADDR_OWVAR 20
7795: PUSH
7796: LD_VAR 0 2
7800: PPUSH
7801: CALL_OW 255
7805: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7806: LD_ADDR_OWVAR 21
7810: PUSH
7811: LD_VAR 0 2
7815: PPUSH
7816: CALL_OW 248
7820: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7821: LD_INT 0
7823: PPUSH
7824: LD_INT 1
7826: PPUSH
7827: LD_VAR 0 1
7831: PPUSH
7832: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7836: LD_ADDR_VAR 0 5
7840: PUSH
7841: LD_VAR 0 2
7845: PPUSH
7846: CALL_OW 254
7850: PUSH
7851: LD_INT 3
7853: MINUS
7854: ST_TO_ADDR
// if dir < 0 then
7855: LD_VAR 0 5
7859: PUSH
7860: LD_INT 0
7862: LESS
7863: IFFALSE 7879
// dir := 6 + dir ;
7865: LD_ADDR_VAR 0 5
7869: PUSH
7870: LD_INT 6
7872: PUSH
7873: LD_VAR 0 5
7877: PLUS
7878: ST_TO_ADDR
// un := CreateHuman ;
7879: LD_ADDR_VAR 0 4
7883: PUSH
7884: CALL_OW 44
7888: ST_TO_ADDR
// SetDir ( un , dir ) ;
7889: LD_VAR 0 4
7893: PPUSH
7894: LD_VAR 0 5
7898: PPUSH
7899: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7903: LD_VAR 0 4
7907: PPUSH
7908: LD_VAR 0 2
7912: PPUSH
7913: CALL_OW 52
// end ;
7917: LD_VAR 0 3
7921: RET
// export function PrepareDifficulty ; begin
7922: LD_INT 0
7924: PPUSH
// case Difficulty of 1 :
7925: LD_OWVAR 67
7929: PUSH
7930: LD_INT 1
7932: DOUBLE
7933: EQUAL
7934: IFTRUE 7938
7936: GO 7957
7938: POP
// begin RuSolMinLevel = 2 ;
7939: LD_ADDR_EXP 35
7943: PUSH
7944: LD_INT 2
7946: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7947: LD_ADDR_EXP 36
7951: PUSH
7952: LD_INT 3
7954: ST_TO_ADDR
// end ; 2 :
7955: GO 8018
7957: LD_INT 2
7959: DOUBLE
7960: EQUAL
7961: IFTRUE 7965
7963: GO 7984
7965: POP
// begin RuSolMinLevel = 3 ;
7966: LD_ADDR_EXP 35
7970: PUSH
7971: LD_INT 3
7973: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7974: LD_ADDR_EXP 36
7978: PUSH
7979: LD_INT 5
7981: ST_TO_ADDR
// end ; 3 .. 4 :
7982: GO 8018
7984: LD_INT 3
7986: DOUBLE
7987: GREATEREQUAL
7988: IFFALSE 7996
7990: LD_INT 4
7992: DOUBLE
7993: LESSEQUAL
7994: IFTRUE 7998
7996: GO 8017
7998: POP
// begin RuSolMinLevel = 4 ;
7999: LD_ADDR_EXP 35
8003: PUSH
8004: LD_INT 4
8006: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
8007: LD_ADDR_EXP 36
8011: PUSH
8012: LD_INT 6
8014: ST_TO_ADDR
// end ; end ;
8015: GO 8018
8017: POP
// end ;
8018: LD_VAR 0 1
8022: RET
// export function ShowQuery1 ; begin
8023: LD_INT 0
8025: PPUSH
// result := Query ( QKill ) ;
8026: LD_ADDR_VAR 0 1
8030: PUSH
8031: LD_STRING QKill
8033: PPUSH
8034: CALL_OW 97
8038: ST_TO_ADDR
// end ;
8039: LD_VAR 0 1
8043: RET
// export function ShowQuery2 ; begin
8044: LD_INT 0
8046: PPUSH
// result := Query ( QKill2 ) ;
8047: LD_ADDR_VAR 0 1
8051: PUSH
8052: LD_STRING QKill2
8054: PPUSH
8055: CALL_OW 97
8059: ST_TO_ADDR
// end ;
8060: LD_VAR 0 1
8064: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
8065: LD_INT 0
8067: PPUSH
8068: PPUSH
8069: PPUSH
8070: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
8071: LD_ADDR_VAR 0 7
8075: PUSH
8076: LD_INT 48
8078: PUSH
8079: LD_INT 49
8081: PUSH
8082: LD_INT 50
8084: PUSH
8085: LD_INT 20
8087: PUSH
8088: LD_INT 1
8090: PUSH
8091: LD_INT 51
8093: PUSH
8094: LD_INT 52
8096: PUSH
8097: LD_INT 69
8099: PUSH
8100: LD_INT 39
8102: PUSH
8103: LD_INT 34
8105: PUSH
8106: LD_INT 40
8108: PUSH
8109: LD_INT 53
8111: PUSH
8112: LD_INT 71
8114: PUSH
8115: LD_INT 57
8117: PUSH
8118: LD_INT 58
8120: PUSH
8121: LD_INT 44
8123: PUSH
8124: LD_INT 32
8126: PUSH
8127: LD_INT 27
8129: PUSH
8130: LD_INT 23
8132: PUSH
8133: LD_INT 33
8135: PUSH
8136: LD_INT 59
8138: PUSH
8139: LD_INT 54
8141: PUSH
8142: LD_INT 55
8144: PUSH
8145: LD_INT 56
8147: PUSH
8148: LD_INT 63
8150: PUSH
8151: LD_INT 64
8153: PUSH
8154: LD_INT 65
8156: PUSH
8157: LD_INT 30
8159: PUSH
8160: LD_INT 31
8162: PUSH
8163: LD_INT 21
8165: PUSH
8166: LD_INT 22
8168: PUSH
8169: LD_INT 25
8171: PUSH
8172: LD_INT 82
8174: PUSH
8175: LD_INT 83
8177: PUSH
8178: LD_INT 84
8180: PUSH
8181: LD_INT 85
8183: PUSH
8184: LD_INT 86
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: ST_TO_ADDR
// for i = 1 to list do
8226: LD_ADDR_VAR 0 5
8230: PUSH
8231: DOUBLE
8232: LD_INT 1
8234: DEC
8235: ST_TO_ADDR
8236: LD_VAR 0 7
8240: PUSH
8241: FOR_TO
8242: IFFALSE 8314
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
8244: LD_VAR 0 7
8248: PUSH
8249: LD_VAR 0 5
8253: ARRAY
8254: PPUSH
8255: LD_VAR 0 1
8259: PPUSH
8260: CALL_OW 321
8264: PUSH
8265: LD_INT 1
8267: EQUAL
8268: PUSH
8269: LD_VAR 0 7
8273: PUSH
8274: LD_VAR 0 5
8278: ARRAY
8279: PPUSH
8280: LD_VAR 0 3
8284: PPUSH
8285: CALL_OW 482
8289: AND
8290: IFFALSE 8312
// AddComResearch ( lab , list [ i ] ) ;
8292: LD_VAR 0 2
8296: PPUSH
8297: LD_VAR 0 7
8301: PUSH
8302: LD_VAR 0 5
8306: ARRAY
8307: PPUSH
8308: CALL_OW 184
8312: GO 8241
8314: POP
8315: POP
// end ;
8316: LD_VAR 0 4
8320: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8321: LD_INT 0
8323: PPUSH
8324: PPUSH
8325: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8326: LD_INT 22
8328: PUSH
8329: LD_VAR 0 1
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 21
8340: PUSH
8341: LD_INT 2
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 69
8356: PUSH
8357: LD_VAR 0 3
8361: LESSEQUAL
8362: IFFALSE 8470
// begin for i = 1 to vehCount do
8364: LD_ADDR_VAR 0 9
8368: PUSH
8369: DOUBLE
8370: LD_INT 1
8372: DEC
8373: ST_TO_ADDR
8374: LD_VAR 0 3
8378: PUSH
8379: FOR_TO
8380: IFFALSE 8468
// begin weapon := weaponTab [ i ] ;
8382: LD_ADDR_VAR 0 10
8386: PUSH
8387: LD_VAR 0 4
8391: PUSH
8392: LD_VAR 0 9
8396: ARRAY
8397: ST_TO_ADDR
// if weapon = ru_heavy_gun then
8398: LD_VAR 0 10
8402: PUSH
8403: LD_INT 46
8405: EQUAL
8406: IFFALSE 8437
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
8408: LD_VAR 0 2
8412: PPUSH
8413: LD_INT 24
8415: PPUSH
8416: LD_VAR 0 5
8420: PPUSH
8421: LD_VAR 0 6
8425: PPUSH
8426: LD_VAR 0 10
8430: PPUSH
8431: CALL_OW 185
8435: GO 8466
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8437: LD_VAR 0 2
8441: PPUSH
8442: LD_VAR 0 7
8446: PPUSH
8447: LD_VAR 0 5
8451: PPUSH
8452: LD_VAR 0 6
8456: PPUSH
8457: LD_VAR 0 10
8461: PPUSH
8462: CALL_OW 185
// end ;
8466: GO 8379
8468: POP
8469: POP
// end ; end ;
8470: LD_VAR 0 8
8474: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
8475: LD_INT 0
8477: PPUSH
8478: PPUSH
8479: PPUSH
8480: PPUSH
8481: PPUSH
8482: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
8483: LD_ADDR_VAR 0 8
8487: PUSH
8488: LD_VAR 0 2
8492: PPUSH
8493: CALL_OW 313
8497: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8498: LD_ADDR_VAR 0 9
8502: PUSH
8503: LD_VAR 0 3
8507: PPUSH
8508: LD_INT 22
8510: PUSH
8511: LD_VAR 0 1
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PUSH
8520: LD_INT 25
8522: PUSH
8523: LD_INT 2
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: LD_INT 24
8532: PUSH
8533: LD_INT 750
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PUSH
8540: LD_INT 3
8542: PUSH
8543: LD_INT 54
8545: PUSH
8546: EMPTY
8547: LIST
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: PPUSH
8559: CALL_OW 70
8563: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8564: LD_ADDR_VAR 0 6
8568: PUSH
8569: LD_VAR 0 3
8573: PPUSH
8574: LD_INT 22
8576: PUSH
8577: LD_VAR 0 1
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 21
8588: PUSH
8589: LD_INT 3
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 3
8598: PUSH
8599: LD_INT 24
8601: PUSH
8602: LD_INT 1000
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: LIST
8617: PUSH
8618: EMPTY
8619: LIST
8620: PPUSH
8621: CALL_OW 70
8625: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8626: LD_VAR 0 6
8630: NOT
8631: PUSH
8632: LD_INT 22
8634: PUSH
8635: LD_VAR 0 1
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 25
8646: PUSH
8647: LD_INT 2
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 24
8656: PUSH
8657: LD_INT 250
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: LIST
8668: PPUSH
8669: CALL_OW 69
8673: NOT
8674: AND
8675: IFFALSE 8679
// exit ;
8677: GO 8837
// if buildingsList and engineerOkInside then
8679: LD_VAR 0 6
8683: PUSH
8684: LD_VAR 0 8
8688: AND
8689: IFFALSE 8700
// ComExitBuilding ( engineerOkInside ) ;
8691: LD_VAR 0 8
8695: PPUSH
8696: CALL_OW 122
// if buildingsList and engineerOkOutside then
8700: LD_VAR 0 6
8704: PUSH
8705: LD_VAR 0 9
8709: AND
8710: IFFALSE 8730
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
8712: LD_VAR 0 9
8716: PPUSH
8717: LD_VAR 0 6
8721: PUSH
8722: LD_INT 1
8724: ARRAY
8725: PPUSH
8726: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8730: LD_VAR 0 6
8734: PUSH
8735: LD_INT 0
8737: EQUAL
8738: PUSH
8739: LD_VAR 0 4
8743: PUSH
8744: LD_INT 0
8746: EQUAL
8747: AND
8748: PUSH
8749: LD_VAR 0 9
8753: AND
8754: IFFALSE 8770
// ComEnterUnit ( engineerOkOutside , depot ) ;
8756: LD_VAR 0 9
8760: PPUSH
8761: LD_VAR 0 2
8765: PPUSH
8766: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8770: LD_VAR 0 9
8774: PUSH
8775: LD_VAR 0 6
8779: PUSH
8780: LD_INT 0
8782: EQUAL
8783: AND
8784: PUSH
8785: LD_VAR 0 4
8789: AND
8790: IFFALSE 8837
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8792: LD_VAR 0 9
8796: PPUSH
8797: LD_VAR 0 4
8801: PUSH
8802: LD_INT 1
8804: ARRAY
8805: PPUSH
8806: LD_VAR 0 4
8810: PUSH
8811: LD_INT 2
8813: ARRAY
8814: PPUSH
8815: LD_VAR 0 4
8819: PUSH
8820: LD_INT 3
8822: ARRAY
8823: PPUSH
8824: LD_VAR 0 4
8828: PUSH
8829: LD_INT 4
8831: ARRAY
8832: PPUSH
8833: CALL_OW 145
// end ;
8837: LD_VAR 0 5
8841: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8842: LD_INT 0
8844: PPUSH
8845: PPUSH
8846: PPUSH
8847: PPUSH
8848: PPUSH
8849: PPUSH
8850: PPUSH
8851: PPUSH
8852: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8853: LD_ADDR_VAR 0 6
8857: PUSH
8858: LD_INT 22
8860: PUSH
8861: LD_VAR 0 1
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 25
8872: PUSH
8873: LD_INT 4
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 23
8882: PUSH
8883: LD_INT 2
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 24
8892: PUSH
8893: LD_INT 251
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: PPUSH
8906: CALL_OW 69
8910: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8911: LD_ADDR_VAR 0 7
8915: PUSH
8916: LD_VAR 0 3
8920: PPUSH
8921: LD_INT 22
8923: PUSH
8924: LD_VAR 0 1
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 23
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 25
8945: PUSH
8946: LD_INT 4
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 50
8955: PUSH
8956: EMPTY
8957: LIST
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: PPUSH
8965: CALL_OW 70
8969: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8970: LD_ADDR_VAR 0 10
8974: PUSH
8975: LD_VAR 0 3
8979: PPUSH
8980: LD_INT 22
8982: PUSH
8983: LD_VAR 0 1
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PUSH
8992: LD_INT 21
8994: PUSH
8995: LD_INT 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 3
9004: PUSH
9005: LD_INT 25
9007: PUSH
9008: LD_INT 3
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: LD_INT 3
9021: PUSH
9022: LD_INT 24
9024: PUSH
9025: LD_INT 750
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: PPUSH
9042: CALL_OW 70
9046: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9047: LD_ADDR_VAR 0 11
9051: PUSH
9052: LD_VAR 0 2
9056: PPUSH
9057: LD_INT 22
9059: PUSH
9060: LD_VAR 0 1
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 21
9071: PUSH
9072: LD_INT 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 3
9081: PUSH
9082: LD_INT 25
9084: PUSH
9085: LD_INT 3
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: LD_INT 24
9101: PUSH
9102: LD_INT 1000
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: PPUSH
9119: CALL_OW 70
9123: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
9124: LD_VAR 0 10
9128: NOT
9129: PUSH
9130: LD_VAR 0 11
9134: NOT
9135: AND
9136: PUSH
9137: LD_VAR 0 6
9141: NOT
9142: AND
9143: IFFALSE 9147
// exit ;
9145: GO 9353
// if damageUnits and sci_list then
9147: LD_VAR 0 10
9151: PUSH
9152: LD_VAR 0 6
9156: AND
9157: IFFALSE 9173
// ComMoveToArea ( damageUnits , healArea ) ;
9159: LD_VAR 0 10
9163: PPUSH
9164: LD_VAR 0 2
9168: PPUSH
9169: CALL_OW 113
// if unitsToHeal and sci_list then
9173: LD_VAR 0 11
9177: PUSH
9178: LD_VAR 0 6
9182: AND
9183: IFFALSE 9194
// ComExitBuilding ( sci_list ) ;
9185: LD_VAR 0 6
9189: PPUSH
9190: CALL_OW 122
// if unitsToHeal and sci_listOutside then
9194: LD_VAR 0 11
9198: PUSH
9199: LD_VAR 0 7
9203: AND
9204: IFFALSE 9224
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9206: LD_VAR 0 7
9210: PPUSH
9211: LD_VAR 0 11
9215: PUSH
9216: LD_INT 1
9218: ARRAY
9219: PPUSH
9220: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
9224: LD_VAR 0 10
9228: PUSH
9229: LD_INT 0
9231: EQUAL
9232: PUSH
9233: LD_VAR 0 11
9237: PUSH
9238: LD_INT 0
9240: EQUAL
9241: AND
9242: PUSH
9243: LD_VAR 0 7
9247: AND
9248: IFFALSE 9353
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9250: LD_ADDR_VAR 0 12
9254: PUSH
9255: LD_INT 22
9257: PUSH
9258: LD_VAR 0 1
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 21
9269: PUSH
9270: LD_INT 3
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: LD_INT 30
9279: PUSH
9280: LD_INT 8
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: PPUSH
9292: CALL_OW 69
9296: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
9297: LD_ADDR_VAR 0 13
9301: PUSH
9302: LD_INT 1
9304: PPUSH
9305: LD_VAR 0 12
9309: PPUSH
9310: CALL_OW 12
9314: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9315: LD_VAR 0 7
9319: PPUSH
9320: LD_INT 3
9322: PUSH
9323: LD_INT 60
9325: PUSH
9326: EMPTY
9327: LIST
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PPUSH
9333: CALL_OW 72
9337: PPUSH
9338: LD_VAR 0 12
9342: PUSH
9343: LD_VAR 0 13
9347: ARRAY
9348: PPUSH
9349: CALL_OW 120
// end ; end ;
9353: LD_VAR 0 5
9357: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
9358: LD_INT 0
9360: PPUSH
9361: PPUSH
9362: PPUSH
9363: PPUSH
9364: PPUSH
// tmp := [ ] ;
9365: LD_ADDR_VAR 0 6
9369: PUSH
9370: EMPTY
9371: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
9372: LD_ADDR_VAR 0 7
9376: PUSH
9377: LD_INT 22
9379: PUSH
9380: LD_VAR 0 1
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 30
9391: PUSH
9392: LD_INT 32
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PPUSH
9403: CALL_OW 69
9407: ST_TO_ADDR
// if bunkers then
9408: LD_VAR 0 7
9412: IFFALSE 9482
// for i in bunkers do
9414: LD_ADDR_VAR 0 4
9418: PUSH
9419: LD_VAR 0 7
9423: PUSH
9424: FOR_IN
9425: IFFALSE 9480
// for j in UnitsInside ( i ) do
9427: LD_ADDR_VAR 0 5
9431: PUSH
9432: LD_VAR 0 4
9436: PPUSH
9437: CALL_OW 313
9441: PUSH
9442: FOR_IN
9443: IFFALSE 9476
// tmp := Replace ( tmp , tmp + 1 , j ) ;
9445: LD_ADDR_VAR 0 6
9449: PUSH
9450: LD_VAR 0 6
9454: PPUSH
9455: LD_VAR 0 6
9459: PUSH
9460: LD_INT 1
9462: PLUS
9463: PPUSH
9464: LD_VAR 0 5
9468: PPUSH
9469: CALL_OW 1
9473: ST_TO_ADDR
9474: GO 9442
9476: POP
9477: POP
9478: GO 9424
9480: POP
9481: POP
// if tmp then
9482: LD_VAR 0 6
9486: IFFALSE 9526
// begin ComExitBuilding ( tmp ) ;
9488: LD_VAR 0 6
9492: PPUSH
9493: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
9497: LD_VAR 0 6
9501: PPUSH
9502: LD_VAR 0 2
9506: PPUSH
9507: CALL_OW 250
9511: PPUSH
9512: LD_VAR 0 2
9516: PPUSH
9517: CALL_OW 251
9521: PPUSH
9522: CALL_OW 174
// end ; end ;
9526: LD_VAR 0 3
9530: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
9531: LD_INT 0
9533: PPUSH
9534: PPUSH
9535: PPUSH
// enable ;
9536: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
9537: LD_ADDR_VAR 0 6
9541: PUSH
9542: LD_VAR 0 3
9546: PPUSH
9547: CALL_OW 435
9551: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9552: LD_ADDR_VAR 0 5
9556: PUSH
9557: LD_INT 22
9559: PUSH
9560: LD_VAR 0 1
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: LD_INT 34
9571: PUSH
9572: LD_VAR 0 2
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PPUSH
9585: CALL_OW 69
9589: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
9590: LD_VAR 0 5
9594: PUSH
9595: LD_VAR 0 3
9599: PPUSH
9600: CALL_OW 435
9604: AND
9605: PUSH
9606: LD_VAR 0 6
9610: AND
9611: IFFALSE 9644
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
9613: LD_VAR 0 5
9617: PUSH
9618: LD_INT 1
9620: ARRAY
9621: PPUSH
9622: LD_VAR 0 6
9626: PUSH
9627: LD_INT 1
9629: ARRAY
9630: PPUSH
9631: LD_VAR 0 6
9635: PUSH
9636: LD_INT 2
9638: ARRAY
9639: PPUSH
9640: CALL_OW 177
// end ;
9644: LD_VAR 0 4
9648: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
9649: LD_INT 0
9651: PPUSH
9652: PPUSH
9653: PPUSH
9654: PPUSH
9655: PPUSH
9656: PPUSH
9657: PPUSH
9658: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
9659: LD_ADDR_VAR 0 6
9663: PUSH
9664: LD_VAR 0 2
9668: PPUSH
9669: LD_INT 22
9671: PUSH
9672: LD_VAR 0 1
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 56
9683: PUSH
9684: EMPTY
9685: LIST
9686: PUSH
9687: LD_INT 24
9689: PUSH
9690: LD_INT 700
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 3
9699: PUSH
9700: LD_INT 60
9702: PUSH
9703: EMPTY
9704: LIST
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 2
9712: PUSH
9713: LD_INT 25
9715: PUSH
9716: LD_INT 1
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 25
9725: PUSH
9726: LD_INT 5
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 25
9735: PUSH
9736: LD_INT 8
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 25
9745: PUSH
9746: LD_INT 9
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: PPUSH
9767: CALL_OW 70
9771: PUSH
9772: LD_EXP 48
9776: PUSH
9777: LD_EXP 49
9781: UNION
9782: DIFF
9783: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9784: LD_ADDR_VAR 0 7
9788: PUSH
9789: LD_VAR 0 2
9793: PPUSH
9794: LD_INT 22
9796: PUSH
9797: LD_VAR 0 1
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: LD_INT 30
9808: PUSH
9809: LD_INT 32
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 58
9818: PUSH
9819: EMPTY
9820: LIST
9821: PUSH
9822: LD_INT 24
9824: PUSH
9825: LD_INT 251
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: PPUSH
9838: CALL_OW 70
9842: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9843: LD_ADDR_VAR 0 9
9847: PUSH
9848: LD_VAR 0 2
9852: PPUSH
9853: LD_INT 22
9855: PUSH
9856: LD_VAR 0 1
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 2
9867: PUSH
9868: LD_INT 30
9870: PUSH
9871: LD_INT 4
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: PUSH
9878: LD_INT 30
9880: PUSH
9881: LD_INT 5
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: PUSH
9893: LD_INT 24
9895: PUSH
9896: LD_INT 251
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: LIST
9907: PPUSH
9908: CALL_OW 70
9912: ST_TO_ADDR
// if barrackList then
9913: LD_VAR 0 9
9917: IFFALSE 10073
// begin if turretList = 0 then
9919: LD_VAR 0 7
9923: PUSH
9924: LD_INT 0
9926: EQUAL
9927: IFFALSE 9965
// begin if soldiersList then
9929: LD_VAR 0 6
9933: IFFALSE 9963
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9935: LD_VAR 0 6
9939: PPUSH
9940: LD_VAR 0 9
9944: PUSH
9945: LD_INT 1
9947: PPUSH
9948: LD_VAR 0 9
9952: PPUSH
9953: CALL_OW 12
9957: ARRAY
9958: PPUSH
9959: CALL_OW 120
// end else
9963: GO 10073
// begin for i in barrackList do
9965: LD_ADDR_VAR 0 4
9969: PUSH
9970: LD_VAR 0 9
9974: PUSH
9975: FOR_IN
9976: IFFALSE 10071
// begin if not turretList then
9978: LD_VAR 0 7
9982: NOT
9983: IFFALSE 9989
// exit ;
9985: POP
9986: POP
9987: GO 10073
// insideUnits = UnitsInside ( i ) ;
9989: LD_ADDR_VAR 0 10
9993: PUSH
9994: LD_VAR 0 4
9998: PPUSH
9999: CALL_OW 313
10003: ST_TO_ADDR
// if insideUnits then
10004: LD_VAR 0 10
10008: IFFALSE 10069
// begin tmp := insideUnits [ 1 ] ;
10010: LD_ADDR_VAR 0 8
10014: PUSH
10015: LD_VAR 0 10
10019: PUSH
10020: LD_INT 1
10022: ARRAY
10023: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
10024: LD_VAR 0 8
10028: PPUSH
10029: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
10033: LD_VAR 0 8
10037: PPUSH
10038: LD_VAR 0 7
10042: PUSH
10043: LD_INT 1
10045: ARRAY
10046: PPUSH
10047: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
10051: LD_ADDR_VAR 0 7
10055: PUSH
10056: LD_VAR 0 7
10060: PPUSH
10061: LD_INT 1
10063: PPUSH
10064: CALL_OW 3
10068: ST_TO_ADDR
// end ; end ;
10069: GO 9975
10071: POP
10072: POP
// end ; end ; end ;
10073: LD_VAR 0 3
10077: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
10078: LD_INT 0
10080: PPUSH
10081: PPUSH
10082: PPUSH
10083: PPUSH
10084: PPUSH
10085: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10086: LD_ADDR_VAR 0 8
10090: PUSH
10091: LD_INT 22
10093: PUSH
10094: LD_VAR 0 1
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: LD_INT 21
10105: PUSH
10106: LD_INT 2
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PUSH
10113: LD_INT 34
10115: PUSH
10116: LD_INT 52
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: LIST
10127: PPUSH
10128: CALL_OW 69
10132: ST_TO_ADDR
// if not craneList then
10133: LD_VAR 0 8
10137: NOT
10138: IFFALSE 10142
// exit ;
10140: GO 10576
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10142: LD_ADDR_VAR 0 9
10146: PUSH
10147: LD_INT 22
10149: PUSH
10150: LD_VAR 0 1
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 21
10161: PUSH
10162: LD_INT 3
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: LD_INT 3
10171: PUSH
10172: LD_INT 24
10174: PUSH
10175: LD_INT 1000
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: PPUSH
10194: CALL_OW 69
10198: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
10199: LD_VAR 0 9
10203: PUSH
10204: LD_VAR 0 8
10208: PPUSH
10209: LD_INT 24
10211: PUSH
10212: LD_INT 750
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PPUSH
10219: CALL_OW 72
10223: AND
10224: IFFALSE 10259
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
10226: LD_VAR 0 8
10230: PPUSH
10231: LD_INT 24
10233: PUSH
10234: LD_INT 750
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PPUSH
10241: CALL_OW 72
10245: PPUSH
10246: LD_VAR 0 9
10250: PUSH
10251: LD_INT 1
10253: ARRAY
10254: PPUSH
10255: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
10259: LD_VAR 0 8
10263: PPUSH
10264: LD_INT 3
10266: PUSH
10267: LD_INT 24
10269: PUSH
10270: LD_INT 750
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PPUSH
10281: CALL_OW 72
10285: IFFALSE 10323
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10287: LD_VAR 0 8
10291: PPUSH
10292: LD_INT 3
10294: PUSH
10295: LD_INT 24
10297: PUSH
10298: LD_INT 750
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PPUSH
10309: CALL_OW 72
10313: PPUSH
10314: LD_VAR 0 2
10318: PPUSH
10319: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
10323: LD_VAR 0 8
10327: PUSH
10328: LD_VAR 0 9
10332: PUSH
10333: LD_INT 0
10335: EQUAL
10336: AND
10337: PUSH
10338: LD_VAR 0 3
10342: AND
10343: IFFALSE 10390
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10345: LD_VAR 0 8
10349: PPUSH
10350: LD_VAR 0 3
10354: PUSH
10355: LD_INT 1
10357: ARRAY
10358: PPUSH
10359: LD_VAR 0 3
10363: PUSH
10364: LD_INT 2
10366: ARRAY
10367: PPUSH
10368: LD_VAR 0 3
10372: PUSH
10373: LD_INT 3
10375: ARRAY
10376: PPUSH
10377: LD_VAR 0 3
10381: PUSH
10382: LD_INT 4
10384: ARRAY
10385: PPUSH
10386: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10390: LD_ADDR_VAR 0 7
10394: PUSH
10395: LD_VAR 0 2
10399: PPUSH
10400: LD_INT 22
10402: PUSH
10403: LD_VAR 0 1
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 2
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 34
10424: PUSH
10425: LD_INT 52
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 3
10434: PUSH
10435: LD_INT 24
10437: PUSH
10438: LD_INT 750
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: PPUSH
10455: CALL_OW 70
10459: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10460: LD_ADDR_VAR 0 6
10464: PUSH
10465: LD_VAR 0 2
10469: PPUSH
10470: LD_INT 22
10472: PUSH
10473: LD_VAR 0 1
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 2
10484: PUSH
10485: LD_INT 30
10487: PUSH
10488: LD_INT 0
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: LD_INT 30
10497: PUSH
10498: LD_INT 1
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: LIST
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PPUSH
10514: CALL_OW 70
10518: ST_TO_ADDR
// if crane then
10519: LD_VAR 0 7
10523: IFFALSE 10576
// for i in crane do
10525: LD_ADDR_VAR 0 5
10529: PUSH
10530: LD_VAR 0 7
10534: PUSH
10535: FOR_IN
10536: IFFALSE 10574
// begin if dep then
10538: LD_VAR 0 6
10542: IFFALSE 10558
// ComMoveUnit ( i , dep ) ;
10544: LD_VAR 0 5
10548: PPUSH
10549: LD_VAR 0 6
10553: PPUSH
10554: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10558: LD_VAR 0 5
10562: PPUSH
10563: CALL_OW 311
10567: PPUSH
10568: CALL 82200 0 1
// end ;
10572: GO 10535
10574: POP
10575: POP
// end ;
10576: LD_VAR 0 4
10580: RET
// export function BuildBulldozer ; begin
10581: LD_INT 0
10583: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
10584: LD_INT 17
10586: PPUSH
10587: CALL_OW 302
10591: NOT
10592: PUSH
10593: LD_INT 17
10595: PPUSH
10596: CALL_OW 255
10600: PUSH
10601: LD_INT 3
10603: NONEQUAL
10604: OR
10605: IFFALSE 10609
// exit ;
10607: GO 10628
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
10609: LD_INT 17
10611: PPUSH
10612: LD_INT 24
10614: PPUSH
10615: LD_INT 1
10617: PPUSH
10618: LD_INT 1
10620: PPUSH
10621: LD_INT 53
10623: PPUSH
10624: CALL_OW 185
// end ;
10628: LD_VAR 0 1
10632: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
10633: LD_INT 0
10635: PPUSH
10636: PPUSH
10637: PPUSH
10638: PPUSH
10639: PPUSH
// if not bulldozer then
10640: LD_VAR 0 1
10644: NOT
10645: IFFALSE 10649
// exit ;
10647: GO 10931
// list := ListEnvironmentArea ( area ) ;
10649: LD_ADDR_VAR 0 5
10653: PUSH
10654: LD_VAR 0 2
10658: PPUSH
10659: CALL_OW 353
10663: ST_TO_ADDR
// tmp := [ ] ;
10664: LD_ADDR_VAR 0 6
10668: PUSH
10669: EMPTY
10670: ST_TO_ADDR
// for i = 1 to list do
10671: LD_ADDR_VAR 0 4
10675: PUSH
10676: DOUBLE
10677: LD_INT 1
10679: DEC
10680: ST_TO_ADDR
10681: LD_VAR 0 5
10685: PUSH
10686: FOR_TO
10687: IFFALSE 10785
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
10689: LD_VAR 0 5
10693: PUSH
10694: LD_VAR 0 4
10698: ARRAY
10699: PUSH
10700: LD_INT 1
10702: ARRAY
10703: PPUSH
10704: LD_VAR 0 5
10708: PUSH
10709: LD_VAR 0 4
10713: ARRAY
10714: PUSH
10715: LD_INT 2
10717: ARRAY
10718: PPUSH
10719: CALL_OW 554
10723: IFFALSE 10783
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10725: LD_ADDR_VAR 0 6
10729: PUSH
10730: LD_VAR 0 6
10734: PPUSH
10735: LD_VAR 0 6
10739: PUSH
10740: LD_INT 1
10742: PLUS
10743: PPUSH
10744: LD_VAR 0 5
10748: PUSH
10749: LD_VAR 0 4
10753: ARRAY
10754: PUSH
10755: LD_INT 1
10757: ARRAY
10758: PUSH
10759: LD_VAR 0 5
10763: PUSH
10764: LD_VAR 0 4
10768: ARRAY
10769: PUSH
10770: LD_INT 2
10772: ARRAY
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PPUSH
10778: CALL_OW 1
10782: ST_TO_ADDR
// end ;
10783: GO 10686
10785: POP
10786: POP
// ComStop ( bulldozer ) ;
10787: LD_VAR 0 1
10791: PPUSH
10792: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10796: LD_ADDR_VAR 0 7
10800: PUSH
10801: LD_VAR 0 1
10805: PPUSH
10806: CALL_OW 250
10810: PUSH
10811: LD_VAR 0 1
10815: PPUSH
10816: CALL_OW 251
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: ST_TO_ADDR
// for i = tmp downto 1 do
10825: LD_ADDR_VAR 0 4
10829: PUSH
10830: DOUBLE
10831: LD_VAR 0 6
10835: INC
10836: ST_TO_ADDR
10837: LD_INT 1
10839: PUSH
10840: FOR_DOWNTO
10841: IFFALSE 10929
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10843: LD_ADDR_VAR 0 7
10847: PUSH
10848: LD_VAR 0 7
10852: PUSH
10853: LD_INT 1
10855: ARRAY
10856: PPUSH
10857: LD_VAR 0 7
10861: PUSH
10862: LD_INT 2
10864: ARRAY
10865: PPUSH
10866: LD_VAR 0 6
10870: PPUSH
10871: CALL 11032 0 3
10875: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10876: LD_VAR 0 1
10880: PPUSH
10881: LD_VAR 0 7
10885: PUSH
10886: LD_INT 1
10888: ARRAY
10889: PPUSH
10890: LD_VAR 0 7
10894: PUSH
10895: LD_INT 2
10897: ARRAY
10898: PPUSH
10899: CALL 10936 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10903: LD_ADDR_VAR 0 6
10907: PUSH
10908: LD_VAR 0 6
10912: PPUSH
10913: LD_VAR 0 7
10917: PUSH
10918: LD_INT 3
10920: ARRAY
10921: PPUSH
10922: CALL_OW 3
10926: ST_TO_ADDR
// end ;
10927: GO 10840
10929: POP
10930: POP
// end ;
10931: LD_VAR 0 3
10935: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10936: LD_INT 0
10938: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10939: LD_VAR 0 2
10943: PPUSH
10944: LD_VAR 0 3
10948: PPUSH
10949: CALL_OW 351
10953: PUSH
10954: LD_VAR 0 2
10958: PPUSH
10959: LD_VAR 0 3
10963: PPUSH
10964: CALL_OW 554
10968: AND
10969: PUSH
10970: LD_VAR 0 2
10974: PPUSH
10975: LD_VAR 0 3
10979: PPUSH
10980: CALL_OW 488
10984: AND
10985: PUSH
10986: LD_VAR 0 2
10990: PPUSH
10991: LD_VAR 0 3
10995: PPUSH
10996: CALL_OW 428
11000: PUSH
11001: LD_INT 1
11003: NEG
11004: EQUAL
11005: AND
11006: IFFALSE 11027
// AddComMoveXY ( bulldozer , x , y ) ;
11008: LD_VAR 0 1
11012: PPUSH
11013: LD_VAR 0 2
11017: PPUSH
11018: LD_VAR 0 3
11022: PPUSH
11023: CALL_OW 171
// end ;
11027: LD_VAR 0 4
11031: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
11032: LD_INT 0
11034: PPUSH
11035: PPUSH
11036: PPUSH
11037: PPUSH
11038: PPUSH
11039: PPUSH
11040: PPUSH
// dist := 99999 ;
11041: LD_ADDR_VAR 0 6
11045: PUSH
11046: LD_INT 99999
11048: ST_TO_ADDR
// for i = 1 to list do
11049: LD_ADDR_VAR 0 5
11053: PUSH
11054: DOUBLE
11055: LD_INT 1
11057: DEC
11058: ST_TO_ADDR
11059: LD_VAR 0 3
11063: PUSH
11064: FOR_TO
11065: IFFALSE 11203
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
11067: LD_ADDR_VAR 0 7
11071: PUSH
11072: LD_VAR 0 1
11076: PPUSH
11077: LD_VAR 0 2
11081: PPUSH
11082: LD_VAR 0 3
11086: PUSH
11087: LD_VAR 0 5
11091: ARRAY
11092: PUSH
11093: LD_INT 1
11095: ARRAY
11096: PPUSH
11097: LD_VAR 0 3
11101: PUSH
11102: LD_VAR 0 5
11106: ARRAY
11107: PUSH
11108: LD_INT 2
11110: ARRAY
11111: PPUSH
11112: CALL_OW 298
11116: ST_TO_ADDR
// if d = 0 then
11117: LD_VAR 0 7
11121: PUSH
11122: LD_INT 0
11124: EQUAL
11125: IFFALSE 11129
// continue ;
11127: GO 11064
// if d < dist then
11129: LD_VAR 0 7
11133: PUSH
11134: LD_VAR 0 6
11138: LESS
11139: IFFALSE 11201
// begin _x := list [ i ] [ 1 ] ;
11141: LD_ADDR_VAR 0 8
11145: PUSH
11146: LD_VAR 0 3
11150: PUSH
11151: LD_VAR 0 5
11155: ARRAY
11156: PUSH
11157: LD_INT 1
11159: ARRAY
11160: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
11161: LD_ADDR_VAR 0 9
11165: PUSH
11166: LD_VAR 0 3
11170: PUSH
11171: LD_VAR 0 5
11175: ARRAY
11176: PUSH
11177: LD_INT 2
11179: ARRAY
11180: ST_TO_ADDR
// _i := i ;
11181: LD_ADDR_VAR 0 10
11185: PUSH
11186: LD_VAR 0 5
11190: ST_TO_ADDR
// dist := d ;
11191: LD_ADDR_VAR 0 6
11195: PUSH
11196: LD_VAR 0 7
11200: ST_TO_ADDR
// end ; end ;
11201: GO 11064
11203: POP
11204: POP
// result := [ _x , _y , _i , dist ] ;
11205: LD_ADDR_VAR 0 4
11209: PUSH
11210: LD_VAR 0 8
11214: PUSH
11215: LD_VAR 0 9
11219: PUSH
11220: LD_VAR 0 10
11224: PUSH
11225: LD_VAR 0 6
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: ST_TO_ADDR
// end ; end_of_file
11236: LD_VAR 0 4
11240: RET
// export function Action ; begin
11241: LD_INT 0
11243: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
11244: LD_INT 66
11246: PPUSH
11247: LD_INT 4
11249: PPUSH
11250: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11254: LD_INT 22
11256: PUSH
11257: LD_INT 1
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PUSH
11264: LD_INT 25
11266: PUSH
11267: LD_INT 2
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PPUSH
11278: CALL_OW 69
11282: PUSH
11283: LD_INT 0
11285: EQUAL
11286: IFFALSE 11300
// SetClass ( JMM , 2 ) ;
11288: LD_EXP 1
11292: PPUSH
11293: LD_INT 2
11295: PPUSH
11296: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11300: LD_STRING M1
11302: PPUSH
11303: CALL_OW 337
// case Difficulty of 1 :
11307: LD_OWVAR 67
11311: PUSH
11312: LD_INT 1
11314: DOUBLE
11315: EQUAL
11316: IFTRUE 11320
11318: GO 11330
11320: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11321: LD_STRING M1-1
11323: PPUSH
11324: CALL_OW 337
11328: GO 11385
11330: LD_INT 2
11332: DOUBLE
11333: EQUAL
11334: IFTRUE 11338
11336: GO 11348
11338: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11339: LD_STRING M1-2
11341: PPUSH
11342: CALL_OW 337
11346: GO 11385
11348: LD_INT 3
11350: DOUBLE
11351: EQUAL
11352: IFTRUE 11356
11354: GO 11366
11356: POP
// ChangeMissionObjectives ( M1-3 ) ; 4 :
11357: LD_STRING M1-3
11359: PPUSH
11360: CALL_OW 337
11364: GO 11385
11366: LD_INT 4
11368: DOUBLE
11369: EQUAL
11370: IFTRUE 11374
11372: GO 11384
11374: POP
// ChangeMissionObjectives ( M1-4 ) ; end ;
11375: LD_STRING M1-4
11377: PPUSH
11378: CALL_OW 337
11382: GO 11385
11384: POP
// ChangeMissionObjectives ( M1cont ) ;
11385: LD_STRING M1cont
11387: PPUSH
11388: CALL_OW 337
// SaveForQuickRestart ;
11392: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
11396: LD_INT 525
11398: PPUSH
11399: LD_INT 700
11401: PPUSH
11402: CALL_OW 12
11406: PPUSH
11407: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
11411: LD_INT 5
11413: PPUSH
11414: LD_INT 82
11416: PPUSH
11417: LD_INT 38
11419: PPUSH
11420: LD_INT 10
11422: PPUSH
11423: LD_INT 1
11425: PPUSH
11426: CALL_OW 56
// wait ( 0 0$14 ) ;
11430: LD_INT 490
11432: PPUSH
11433: CALL_OW 67
// firstCrateSpawn := true ;
11437: LD_ADDR_EXP 41
11441: PUSH
11442: LD_INT 1
11444: ST_TO_ADDR
// end ;
11445: LD_VAR 0 1
11449: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
11450: LD_EXP 41
11454: IFFALSE 11843
11456: GO 11458
11458: DISABLE
11459: LD_INT 0
11461: PPUSH
// begin if IsOk ( Lisa ) then
11462: LD_EXP 2
11466: PPUSH
11467: CALL_OW 302
11471: IFFALSE 11487
// Say ( Lisa , DR0-Lisa-1 ) else
11473: LD_EXP 2
11477: PPUSH
11478: LD_STRING DR0-Lisa-1
11480: PPUSH
11481: CALL_OW 88
11485: GO 11633
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11487: LD_INT 22
11489: PUSH
11490: LD_INT 1
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 21
11499: PUSH
11500: LD_INT 1
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 26
11509: PUSH
11510: LD_INT 1
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: LD_INT 2
11519: PUSH
11520: LD_INT 25
11522: PUSH
11523: LD_INT 1
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: LD_INT 25
11532: PUSH
11533: LD_INT 2
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 25
11542: PUSH
11543: LD_INT 3
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 25
11552: PUSH
11553: LD_INT 4
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: PPUSH
11573: CALL_OW 69
11577: PUSH
11578: LD_EXP 1
11582: PUSH
11583: LD_EXP 8
11587: PUSH
11588: LD_EXP 5
11592: PUSH
11593: LD_EXP 6
11597: PUSH
11598: LD_EXP 7
11602: PUSH
11603: LD_EXP 4
11607: PUSH
11608: LD_EXP 3
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: DIFF
11622: PPUSH
11623: LD_STRING DR0-Sol1-1
11625: PPUSH
11626: LD_STRING DR0-Sol1-1
11628: PPUSH
11629: CALL 7538 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11633: LD_ADDR_VAR 0 1
11637: PUSH
11638: LD_INT 22
11640: PUSH
11641: LD_INT 1
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 21
11650: PUSH
11651: LD_INT 1
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 26
11660: PUSH
11661: LD_INT 1
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: LD_INT 2
11670: PUSH
11671: LD_INT 25
11673: PUSH
11674: LD_INT 1
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PUSH
11681: LD_INT 25
11683: PUSH
11684: LD_INT 2
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 25
11693: PUSH
11694: LD_INT 3
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 25
11703: PUSH
11704: LD_INT 4
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: PPUSH
11724: CALL_OW 69
11728: PUSH
11729: LD_EXP 1
11733: PUSH
11734: LD_EXP 8
11738: PUSH
11739: LD_EXP 5
11743: PUSH
11744: LD_EXP 2
11748: PUSH
11749: LD_EXP 6
11753: PUSH
11754: LD_EXP 7
11758: PUSH
11759: LD_EXP 4
11763: PUSH
11764: LD_EXP 3
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: DIFF
11779: PPUSH
11780: LD_STRING DR0-Sol2-1
11782: PPUSH
11783: LD_STRING DR0-Sol2-1
11785: PPUSH
11786: CALL 7538 0 3
11790: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11791: LD_EXP 4
11795: PPUSH
11796: CALL_OW 302
11800: IFFALSE 11814
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11802: LD_EXP 4
11806: PPUSH
11807: LD_STRING DR0-Cyrus-1
11809: PPUSH
11810: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11814: LD_EXP 2
11818: PPUSH
11819: CALL_OW 302
11823: PUSH
11824: LD_VAR 0 1
11828: OR
11829: IFFALSE 11843
// Say ( JMM , DR0-JMM-1 ) ;
11831: LD_EXP 1
11835: PPUSH
11836: LD_STRING DR0-JMM-1
11838: PPUSH
11839: CALL_OW 88
// end ;
11843: PPOPN 1
11845: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11846: LD_EXP 5
11850: PPUSH
11851: CALL_OW 302
11855: PUSH
11856: LD_INT 22
11858: PUSH
11859: LD_INT 1
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 25
11868: PUSH
11869: LD_INT 16
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PPUSH
11880: CALL_OW 69
11884: PUSH
11885: LD_INT 0
11887: GREATER
11888: AND
11889: PUSH
11890: LD_INT 1
11892: PPUSH
11893: CALL_OW 463
11897: NOT
11898: AND
11899: IFFALSE 12177
11901: GO 11903
11903: DISABLE
// begin DialogueOn ;
11904: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11908: LD_EXP 5
11912: PPUSH
11913: LD_STRING D10-Frank-1
11915: PPUSH
11916: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11920: LD_INT 22
11922: PUSH
11923: LD_INT 1
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 21
11932: PUSH
11933: LD_INT 1
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 2
11942: PUSH
11943: LD_INT 25
11945: PUSH
11946: LD_INT 1
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 25
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 25
11965: PUSH
11966: LD_INT 3
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 25
11975: PUSH
11976: LD_INT 4
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: LIST
11994: PPUSH
11995: CALL_OW 69
11999: PUSH
12000: LD_EXP 1
12004: PUSH
12005: LD_EXP 5
12009: PUSH
12010: LD_EXP 2
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: LIST
12019: DIFF
12020: PPUSH
12021: LD_STRING D10-Sol1-1
12023: PPUSH
12024: LD_STRING D10-FSol1-1
12026: PPUSH
12027: CALL 7538 0 3
// Say ( Frank , D10-Frank-2 ) ;
12031: LD_EXP 5
12035: PPUSH
12036: LD_STRING D10-Frank-2
12038: PPUSH
12039: CALL_OW 88
// if IsOk ( Lisa ) then
12043: LD_EXP 2
12047: PPUSH
12048: CALL_OW 302
12052: IFFALSE 12068
// Say ( Lisa , D10-Lisa-2 ) else
12054: LD_EXP 2
12058: PPUSH
12059: LD_STRING D10-Lisa-2
12061: PPUSH
12062: CALL_OW 88
12066: GO 12173
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
12068: LD_INT 22
12070: PUSH
12071: LD_INT 1
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 21
12080: PUSH
12081: LD_INT 1
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 2
12090: PUSH
12091: LD_INT 25
12093: PUSH
12094: LD_INT 1
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 25
12103: PUSH
12104: LD_INT 2
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 25
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 25
12123: PUSH
12124: LD_INT 4
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 69
12147: PUSH
12148: LD_EXP 1
12152: PUSH
12153: LD_EXP 5
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: DIFF
12162: PPUSH
12163: LD_STRING D10-Sol1-2
12165: PPUSH
12166: LD_STRING D10-FSol1-2
12168: PPUSH
12169: CALL 7538 0 3
// DialogueOff ;
12173: CALL_OW 7
// end ;
12177: END
// every 10 10$30 trigger not InBattle ( 1 ) do
12178: LD_INT 1
12180: PPUSH
12181: CALL_OW 463
12185: NOT
12186: IFFALSE 12469
12188: GO 12190
12190: DISABLE
// begin HarrisonSupport ;
12191: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
12195: LD_EXP 18
12199: PPUSH
12200: CALL_OW 310
12204: PPUSH
12205: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
12209: LD_EXP 18
12213: PPUSH
12214: LD_STRING DEng-Eng1-1
12216: PPUSH
12217: CALL_OW 88
// wait ( 1 1$0 ) ;
12221: LD_INT 2100
12223: PPUSH
12224: CALL_OW 67
// DialogueOn ;
12228: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12232: LD_EXP 15
12236: PPUSH
12237: LD_STRING DRem-Har-1
12239: PPUSH
12240: CALL_OW 94
// if contactWithRussian then
12244: LD_EXP 23
12248: IFFALSE 12264
// Say ( JMM , DRem-JMM-1 ) else
12250: LD_EXP 1
12254: PPUSH
12255: LD_STRING DRem-JMM-1
12257: PPUSH
12258: CALL_OW 88
12262: GO 12276
// Say ( JMM , DRem-JMM-1a ) ;
12264: LD_EXP 1
12268: PPUSH
12269: LD_STRING DRem-JMM-1a
12271: PPUSH
12272: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
12276: LD_EXP 15
12280: PPUSH
12281: LD_STRING DRem-Har-2
12283: PPUSH
12284: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12288: LD_STRING DenisInDelta
12290: PPUSH
12291: LD_INT 0
12293: PPUSH
12294: CALL_OW 30
12298: IFFALSE 12314
// Say ( JMM , DRem-JMM-2 ) else
12300: LD_EXP 1
12304: PPUSH
12305: LD_STRING DRem-JMM-2
12307: PPUSH
12308: CALL_OW 88
12312: GO 12326
// Say ( JMM , DRem-JMM-2a ) ;
12314: LD_EXP 1
12318: PPUSH
12319: LD_STRING DRem-JMM-2a
12321: PPUSH
12322: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
12326: LD_EXP 15
12330: PPUSH
12331: LD_STRING DRem-Har-3
12333: PPUSH
12334: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12338: LD_EXP 1
12342: PPUSH
12343: LD_STRING DRem-JMM-3
12345: PPUSH
12346: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12350: LD_EXP 15
12354: PPUSH
12355: LD_STRING DRem-Har-4
12357: PPUSH
12358: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12362: LD_STRING DenisInDelta
12364: PPUSH
12365: LD_INT 0
12367: PPUSH
12368: CALL_OW 30
12372: IFFALSE 12432
// begin Say ( JMM , DRem-JMM-4 ) ;
12374: LD_EXP 1
12378: PPUSH
12379: LD_STRING DRem-JMM-4
12381: PPUSH
12382: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12386: LD_EXP 15
12390: PPUSH
12391: LD_STRING DRem-Har-5
12393: PPUSH
12394: CALL_OW 94
// DialogueOff ;
12398: CALL_OW 7
// wait ( 4 4$00 ) ;
12402: LD_INT 8400
12404: PPUSH
12405: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
12409: LD_INT 35
12411: PPUSH
12412: CALL_OW 67
// until not InBattle ( 1 ) ;
12416: LD_INT 1
12418: PPUSH
12419: CALL_OW 463
12423: NOT
12424: IFFALSE 12409
// SpawnDenis ;
12426: CALL 12470 0 0
// end else
12430: GO 12469
// begin DialogueOff ;
12432: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12436: LD_INT 36
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12449: LD_INT 15
12451: PPUSH
12452: LD_INT 1
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12462: LD_STRING MR
12464: PPUSH
12465: CALL_OW 337
// end ; end ;
12469: END
// export function SpawnDenis ; var tmp ; begin
12470: LD_INT 0
12472: PPUSH
12473: PPUSH
// PrepareDenis ;
12474: CALL 2244 0 0
// if not Denis then
12478: LD_EXP 9
12482: NOT
12483: IFFALSE 12487
// exit ;
12485: GO 12708
// CenterNowOnUnits ( Denis ) ;
12487: LD_EXP 9
12491: PPUSH
12492: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
12496: LD_ADDR_VAR 0 2
12500: PUSH
12501: LD_INT 22
12503: PUSH
12504: LD_INT 1
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PPUSH
12511: CALL_OW 69
12515: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
12516: LD_EXP 9
12520: PPUSH
12521: LD_VAR 0 2
12525: PPUSH
12526: LD_EXP 9
12530: PPUSH
12531: CALL_OW 74
12535: PPUSH
12536: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
12540: LD_INT 35
12542: PPUSH
12543: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
12547: LD_INT 22
12549: PUSH
12550: LD_INT 1
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PUSH
12557: LD_INT 91
12559: PUSH
12560: LD_EXP 9
12564: PUSH
12565: LD_INT 10
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: LIST
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PPUSH
12577: CALL_OW 69
12581: IFFALSE 12540
// SetSide ( Denis , 1 ) ;
12583: LD_EXP 9
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: CALL_OW 235
// DialogueOn ;
12595: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12599: LD_EXP 9
12603: PPUSH
12604: LD_STRING DDen-Den-1
12606: PPUSH
12607: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12611: LD_EXP 1
12615: PPUSH
12616: LD_STRING DDen-JMM-1
12618: PPUSH
12619: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12623: LD_EXP 9
12627: PPUSH
12628: LD_STRING DDen-Den-2
12630: PPUSH
12631: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12635: LD_EXP 1
12639: PPUSH
12640: LD_STRING DDen-JMM-2
12642: PPUSH
12643: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12647: LD_EXP 9
12651: PPUSH
12652: LD_STRING DDen-Den-3
12654: PPUSH
12655: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12659: LD_EXP 1
12663: PPUSH
12664: LD_STRING DDen-JMM-3
12666: PPUSH
12667: CALL_OW 88
// DialogueOff ;
12671: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12675: LD_INT 36
12677: PPUSH
12678: LD_INT 1
12680: PPUSH
12681: LD_INT 1
12683: PPUSH
12684: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12688: LD_INT 15
12690: PPUSH
12691: LD_INT 1
12693: PPUSH
12694: LD_INT 1
12696: PPUSH
12697: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12701: LD_STRING MR
12703: PPUSH
12704: CALL_OW 337
// end ;
12708: LD_VAR 0 1
12712: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
12713: LD_INT 22
12715: PUSH
12716: LD_INT 1
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PUSH
12723: LD_INT 30
12725: PUSH
12726: LD_INT 15
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PPUSH
12737: CALL_OW 69
12741: PUSH
12742: LD_EXP 9
12746: PPUSH
12747: CALL_OW 302
12751: AND
12752: PUSH
12753: LD_INT 1
12755: PPUSH
12756: CALL_OW 463
12760: NOT
12761: AND
12762: IFFALSE 12791
12764: GO 12766
12766: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12767: LD_EXP 9
12771: PPUSH
12772: LD_STRING DR1-Den-1
12774: PPUSH
12775: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12779: LD_EXP 1
12783: PPUSH
12784: LD_STRING DR1-JMM-1
12786: PPUSH
12787: CALL_OW 88
// end ;
12791: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12792: LD_INT 15
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: CALL_OW 321
12802: PUSH
12803: LD_INT 2
12805: EQUAL
12806: PUSH
12807: LD_EXP 9
12811: PPUSH
12812: CALL_OW 302
12816: AND
12817: PUSH
12818: LD_INT 1
12820: PPUSH
12821: CALL_OW 463
12825: NOT
12826: AND
12827: IFFALSE 13036
12829: GO 12831
12831: DISABLE
// begin DialogueOn ;
12832: CALL_OW 6
// if IsOK ( Denis ) then
12836: LD_EXP 9
12840: PPUSH
12841: CALL_OW 302
12845: IFFALSE 12861
// Say ( Denis , DR2-Den-1 ) else
12847: LD_EXP 9
12851: PPUSH
12852: LD_STRING DR2-Den-1
12854: PPUSH
12855: CALL_OW 88
12859: GO 12920
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12861: LD_INT 22
12863: PUSH
12864: LD_INT 1
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PUSH
12871: LD_INT 21
12873: PUSH
12874: LD_INT 1
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 25
12883: PUSH
12884: LD_INT 4
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: LIST
12895: PPUSH
12896: CALL_OW 69
12900: PUSH
12901: LD_EXP 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: DIFF
12909: PPUSH
12910: LD_STRING DR2-Sci1-1
12912: PPUSH
12913: LD_STRING DR2-FSci1-1
12915: PPUSH
12916: CALL 7538 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12920: LD_EXP 1
12924: PPUSH
12925: LD_STRING DR2-JMM-1
12927: PPUSH
12928: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12932: LD_INT 22
12934: PUSH
12935: LD_INT 1
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 21
12944: PUSH
12945: LD_INT 1
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 26
12954: PUSH
12955: LD_INT 1
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 23
12964: PUSH
12965: LD_INT 1
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: PPUSH
12978: CALL_OW 69
12982: PUSH
12983: LD_EXP 1
12987: PUSH
12988: LD_EXP 9
12992: PUSH
12993: LD_EXP 8
12997: PUSH
12998: LD_EXP 5
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: DIFF
13009: PPUSH
13010: LD_STRING DR2-Sol1-1
13012: PPUSH
13013: LD_STRING 
13015: PPUSH
13016: CALL 7538 0 3
// Say ( JMM , DR2-JMM-2 ) ;
13020: LD_EXP 1
13024: PPUSH
13025: LD_STRING DR2-JMM-2
13027: PPUSH
13028: CALL_OW 88
// DialogueOff ;
13032: CALL_OW 7
// end ;
13036: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
13037: LD_INT 22
13039: PUSH
13040: LD_INT 1
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 30
13049: PUSH
13050: LD_INT 36
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PPUSH
13061: CALL_OW 69
13065: PUSH
13066: LD_INT 0
13068: EQUAL
13069: PUSH
13070: LD_INT 22
13072: PUSH
13073: LD_INT 1
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PUSH
13080: LD_INT 21
13082: PUSH
13083: LD_INT 2
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 33
13092: PUSH
13093: LD_INT 2
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: PPUSH
13105: CALL_OW 69
13109: PUSH
13110: LD_INT 0
13112: GREATER
13113: AND
13114: PUSH
13115: LD_EXP 24
13119: PUSH
13120: LD_INT 0
13122: EQUAL
13123: AND
13124: PUSH
13125: LD_INT 1
13127: PPUSH
13128: CALL_OW 463
13132: NOT
13133: AND
13134: IFFALSE 13271
13136: GO 13138
13138: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
13139: LD_INT 22
13141: PUSH
13142: LD_INT 1
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 21
13151: PUSH
13152: LD_INT 1
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 25
13161: PUSH
13162: LD_INT 3
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 26
13171: PUSH
13172: LD_INT 1
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: PPUSH
13185: CALL_OW 69
13189: PUSH
13190: LD_EXP 1
13194: PUSH
13195: LD_EXP 6
13199: PUSH
13200: LD_EXP 7
13204: PUSH
13205: LD_EXP 9
13209: PUSH
13210: LD_EXP 16
13214: PUSH
13215: LD_EXP 3
13219: PUSH
13220: LD_EXP 4
13224: PUSH
13225: LD_EXP 2
13229: PUSH
13230: LD_EXP 5
13234: PUSH
13235: LD_EXP 8
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: DIFF
13252: PPUSH
13253: LD_STRING D3a-Mech1-1
13255: PPUSH
13256: LD_STRING 
13258: PPUSH
13259: CALL 7538 0 3
// firstTower = 2 ;
13263: LD_ADDR_EXP 24
13267: PUSH
13268: LD_INT 2
13270: ST_TO_ADDR
// end ;
13271: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13272: LD_INT 22
13274: PUSH
13275: LD_INT 3
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 21
13284: PUSH
13285: LD_INT 3
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PPUSH
13296: CALL_OW 69
13300: PUSH
13301: LD_INT 0
13303: EQUAL
13304: IFFALSE 13435
13306: GO 13308
13308: DISABLE
13309: LD_INT 0
13311: PPUSH
// begin stop_talking := true ;
13312: LD_ADDR_OWVAR 56
13316: PUSH
13317: LD_INT 1
13319: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13320: LD_ADDR_VAR 0 1
13324: PUSH
13325: LD_INT 22
13327: PUSH
13328: LD_INT 1
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: LD_INT 21
13337: PUSH
13338: LD_INT 1
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: LD_INT 25
13350: PUSH
13351: LD_INT 1
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 25
13360: PUSH
13361: LD_INT 2
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: LD_INT 25
13370: PUSH
13371: LD_INT 3
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 25
13380: PUSH
13381: LD_INT 4
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: LIST
13399: PPUSH
13400: CALL_OW 69
13404: PUSH
13405: FOR_IN
13406: IFFALSE 13425
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
13408: LD_VAR 0 1
13412: PPUSH
13413: LD_INT 1
13415: PPUSH
13416: LD_INT 7500
13418: PPUSH
13419: CALL_OW 591
13423: GO 13405
13425: POP
13426: POP
// stop_talking := false ;
13427: LD_ADDR_OWVAR 56
13431: PUSH
13432: LD_INT 0
13434: ST_TO_ADDR
// end ;
13435: PPOPN 1
13437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13438: LD_INT 22
13440: PUSH
13441: LD_INT 1
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 30
13450: PUSH
13451: LD_INT 36
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: CALL_OW 69
13466: PUSH
13467: LD_INT 22
13469: PUSH
13470: LD_INT 1
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 21
13479: PUSH
13480: LD_INT 2
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 33
13489: PUSH
13490: LD_INT 2
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: PPUSH
13502: CALL_OW 69
13506: AND
13507: PUSH
13508: CALL 14060 0 0
13512: AND
13513: PUSH
13514: LD_INT 1
13516: PPUSH
13517: CALL_OW 463
13521: NOT
13522: AND
13523: IFFALSE 14057
13525: GO 13527
13527: DISABLE
13528: LD_INT 0
13530: PPUSH
13531: PPUSH
13532: PPUSH
13533: PPUSH
13534: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13535: LD_ADDR_VAR 0 3
13539: PUSH
13540: LD_INT 22
13542: PUSH
13543: LD_INT 1
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 30
13552: PUSH
13553: LD_INT 36
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PPUSH
13564: CALL_OW 69
13568: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13569: LD_ADDR_VAR 0 4
13573: PUSH
13574: LD_INT 22
13576: PUSH
13577: LD_INT 1
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 21
13586: PUSH
13587: LD_INT 2
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 33
13596: PUSH
13597: LD_INT 2
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: PPUSH
13609: CALL_OW 69
13613: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13614: LD_ADDR_VAR 0 5
13618: PUSH
13619: EMPTY
13620: ST_TO_ADDR
// for i in tmpControlTowers do
13621: LD_ADDR_VAR 0 1
13625: PUSH
13626: LD_VAR 0 3
13630: PUSH
13631: FOR_IN
13632: IFFALSE 14055
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
13634: LD_EXP 1
13638: PPUSH
13639: CALL_OW 310
13643: PUSH
13644: LD_VAR 0 1
13648: EQUAL
13649: PUSH
13650: LD_EXP 1
13654: PPUSH
13655: CALL_OW 257
13659: PUSH
13660: LD_INT 3
13662: EQUAL
13663: AND
13664: IFFALSE 13798
// begin InGameOn ;
13666: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13670: LD_VAR 0 4
13674: PUSH
13675: LD_INT 1
13677: ARRAY
13678: PPUSH
13679: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13683: LD_EXP 1
13687: PPUSH
13688: LD_STRING D4a-JMM-1
13690: PPUSH
13691: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13695: LD_VAR 0 4
13699: PUSH
13700: LD_INT 1
13702: ARRAY
13703: PPUSH
13704: LD_EXP 1
13708: PPUSH
13709: CALL_OW 53
// wait ( 0 0$1 ) ;
13713: LD_INT 35
13715: PPUSH
13716: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13720: LD_VAR 0 4
13724: PUSH
13725: LD_INT 1
13727: ARRAY
13728: PPUSH
13729: LD_VAR 0 4
13733: PUSH
13734: LD_INT 1
13736: ARRAY
13737: PPUSH
13738: CALL_OW 250
13742: PUSH
13743: LD_INT 3
13745: PLUS
13746: PPUSH
13747: LD_VAR 0 4
13751: PUSH
13752: LD_INT 1
13754: ARRAY
13755: PPUSH
13756: CALL_OW 251
13760: PUSH
13761: LD_INT 2
13763: MINUS
13764: PPUSH
13765: CALL_OW 111
// wait ( 0 0$2 ) ;
13769: LD_INT 70
13771: PPUSH
13772: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13776: LD_EXP 1
13780: PPUSH
13781: LD_STRING D4b-JMM-1
13783: PPUSH
13784: CALL_OW 88
// InGameOff ;
13788: CALL_OW 9
// exit ;
13792: POP
13793: POP
13794: GO 14057
// end else
13796: GO 14053
// begin InGameOn ;
13798: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13802: LD_ADDR_VAR 0 5
13806: PUSH
13807: LD_VAR 0 1
13811: PPUSH
13812: CALL_OW 313
13816: PPUSH
13817: LD_INT 25
13819: PUSH
13820: LD_INT 3
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PPUSH
13827: CALL_OW 72
13831: ST_TO_ADDR
// if not tmpMechanicInside then
13832: LD_VAR 0 5
13836: NOT
13837: IFFALSE 13841
// continue ;
13839: GO 13631
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13841: LD_VAR 0 5
13845: PUSH
13846: LD_INT 1
13848: ARRAY
13849: PPUSH
13850: CALL_OW 258
13854: PUSH
13855: LD_INT 1
13857: EQUAL
13858: IFFALSE 13878
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13860: LD_VAR 0 5
13864: PUSH
13865: LD_INT 1
13867: ARRAY
13868: PPUSH
13869: LD_STRING D4a-Mech1-1
13871: PPUSH
13872: CALL_OW 88
13876: GO 13894
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13878: LD_VAR 0 5
13882: PUSH
13883: LD_INT 1
13885: ARRAY
13886: PPUSH
13887: LD_STRING D4a-FMech1-1
13889: PPUSH
13890: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13894: LD_VAR 0 4
13898: PUSH
13899: LD_INT 1
13901: ARRAY
13902: PPUSH
13903: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13907: LD_VAR 0 4
13911: PUSH
13912: LD_INT 1
13914: ARRAY
13915: PPUSH
13916: LD_VAR 0 5
13920: PUSH
13921: LD_INT 1
13923: ARRAY
13924: PPUSH
13925: CALL_OW 53
// wait ( 0 0$1 ) ;
13929: LD_INT 35
13931: PPUSH
13932: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13936: LD_VAR 0 4
13940: PUSH
13941: LD_INT 1
13943: ARRAY
13944: PPUSH
13945: LD_VAR 0 4
13949: PUSH
13950: LD_INT 1
13952: ARRAY
13953: PPUSH
13954: CALL_OW 250
13958: PUSH
13959: LD_INT 3
13961: PLUS
13962: PPUSH
13963: LD_VAR 0 4
13967: PUSH
13968: LD_INT 1
13970: ARRAY
13971: PPUSH
13972: CALL_OW 251
13976: PUSH
13977: LD_INT 2
13979: MINUS
13980: PPUSH
13981: CALL_OW 111
// wait ( 0 0$2 ) ;
13985: LD_INT 70
13987: PPUSH
13988: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13992: LD_VAR 0 5
13996: PUSH
13997: LD_INT 1
13999: ARRAY
14000: PPUSH
14001: CALL_OW 258
14005: PUSH
14006: LD_INT 1
14008: EQUAL
14009: IFFALSE 14029
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
14011: LD_VAR 0 5
14015: PUSH
14016: LD_INT 1
14018: ARRAY
14019: PPUSH
14020: LD_STRING D4b-Mech1-1
14022: PPUSH
14023: CALL_OW 88
14027: GO 14045
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
14029: LD_VAR 0 5
14033: PUSH
14034: LD_INT 1
14036: ARRAY
14037: PPUSH
14038: LD_STRING D4b-FMech1-1
14040: PPUSH
14041: CALL_OW 88
// InGameOff ;
14045: CALL_OW 9
// exit ;
14049: POP
14050: POP
14051: GO 14057
// end ; end ;
14053: GO 13631
14055: POP
14056: POP
// end ;
14057: PPOPN 5
14059: END
// function CheckMehInside ; var i , j , tmp ; begin
14060: LD_INT 0
14062: PPUSH
14063: PPUSH
14064: PPUSH
14065: PPUSH
// result := false ;
14066: LD_ADDR_VAR 0 1
14070: PUSH
14071: LD_INT 0
14073: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
14074: LD_ADDR_VAR 0 4
14078: PUSH
14079: LD_INT 22
14081: PUSH
14082: LD_INT 1
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 30
14091: PUSH
14092: LD_INT 36
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PPUSH
14103: CALL_OW 69
14107: ST_TO_ADDR
// if not tmp then
14108: LD_VAR 0 4
14112: NOT
14113: IFFALSE 14117
// exit ;
14115: GO 14181
// for i in tmp do
14117: LD_ADDR_VAR 0 2
14121: PUSH
14122: LD_VAR 0 4
14126: PUSH
14127: FOR_IN
14128: IFFALSE 14179
// for j in UnitsInside ( i ) do
14130: LD_ADDR_VAR 0 3
14134: PUSH
14135: LD_VAR 0 2
14139: PPUSH
14140: CALL_OW 313
14144: PUSH
14145: FOR_IN
14146: IFFALSE 14175
// if GetClass ( j ) = class_mechanic then
14148: LD_VAR 0 3
14152: PPUSH
14153: CALL_OW 257
14157: PUSH
14158: LD_INT 3
14160: EQUAL
14161: IFFALSE 14173
// begin result := true ;
14163: LD_ADDR_VAR 0 1
14167: PUSH
14168: LD_INT 1
14170: ST_TO_ADDR
// break ;
14171: GO 14175
// end ;
14173: GO 14145
14175: POP
14176: POP
14177: GO 14127
14179: POP
14180: POP
// end ;
14181: LD_VAR 0 1
14185: RET
// every 12 12$0 do
14186: GO 14188
14188: DISABLE
// begin repeat wait ( 0 0$1 ) ;
14189: LD_INT 35
14191: PPUSH
14192: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 5 5$00 ;
14196: LD_INT 1
14198: PPUSH
14199: CALL_OW 463
14203: NOT
14204: PUSH
14205: LD_INT 32
14207: PPUSH
14208: LD_INT 81
14210: PUSH
14211: LD_INT 1
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PPUSH
14218: CALL_OW 70
14222: NOT
14223: AND
14224: PUSH
14225: LD_EXP 27
14229: PUSH
14230: LD_INT 10500
14232: LESS
14233: OR
14234: IFFALSE 14189
// PrepareKurt ;
14236: CALL 16869 0 0
// end ;
14240: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
14241: LD_EXP 16
14245: PPUSH
14246: CALL_OW 302
14250: PUSH
14251: LD_EXP 16
14255: PPUSH
14256: CALL_OW 255
14260: PUSH
14261: LD_INT 1
14263: EQUAL
14264: AND
14265: PUSH
14266: LD_EXP 2
14270: AND
14271: IFFALSE 14436
14273: GO 14275
14275: DISABLE
// begin wait ( 0 0$50 ) ;
14276: LD_INT 1750
14278: PPUSH
14279: CALL_OW 67
// if not IsOk ( Joan ) then
14283: LD_EXP 16
14287: PPUSH
14288: CALL_OW 302
14292: NOT
14293: IFFALSE 14297
// exit ;
14295: GO 14436
// if IsOK ( Lisa ) then
14297: LD_EXP 2
14301: PPUSH
14302: CALL_OW 302
14306: IFFALSE 14436
// begin DialogueOn ;
14308: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14312: LD_EXP 2
14316: PPUSH
14317: LD_STRING D7-Lisa-1
14319: PPUSH
14320: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14324: LD_EXP 1
14328: PPUSH
14329: LD_STRING D7-JMM-1
14331: PPUSH
14332: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14336: LD_EXP 2
14340: PPUSH
14341: LD_STRING D7-Lisa-2
14343: PPUSH
14344: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14348: LD_EXP 1
14352: PPUSH
14353: LD_STRING D7-JMM-2
14355: PPUSH
14356: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14360: LD_EXP 2
14364: PPUSH
14365: LD_STRING D7-Lisa-3
14367: PPUSH
14368: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14372: LD_EXP 1
14376: PPUSH
14377: LD_STRING D7-JMM-3
14379: PPUSH
14380: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14384: LD_EXP 2
14388: PPUSH
14389: LD_STRING D7-Lisa-4
14391: PPUSH
14392: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14396: LD_EXP 1
14400: PPUSH
14401: LD_STRING D7-JMM-4
14403: PPUSH
14404: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14408: LD_EXP 1
14412: PPUSH
14413: LD_STRING D7-JMM-4a
14415: PPUSH
14416: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14420: LD_EXP 2
14424: PPUSH
14425: LD_STRING D7-Lisa-5
14427: PPUSH
14428: CALL_OW 88
// DialogueOff ;
14432: CALL_OW 7
// end ; end ;
14436: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
14437: LD_EXP 14
14441: PUSH
14442: LD_INT 22
14444: PUSH
14445: LD_INT 1
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 91
14454: PUSH
14455: LD_EXP 14
14459: PUSH
14460: LD_INT 10
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 2
14470: PUSH
14471: LD_INT 25
14473: PUSH
14474: LD_INT 1
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 25
14483: PUSH
14484: LD_INT 2
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 25
14493: PUSH
14494: LD_INT 3
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 25
14503: PUSH
14504: LD_INT 4
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 69
14527: PUSH
14528: LD_INT 1
14530: GREATER
14531: AND
14532: IFFALSE 14549
14534: GO 14536
14536: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14537: LD_EXP 14
14541: PPUSH
14542: LD_STRING D5-Sol1-1
14544: PPUSH
14545: CALL_OW 88
14549: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14550: LD_INT 22
14552: PUSH
14553: LD_INT 1
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PUSH
14560: LD_INT 33
14562: PUSH
14563: LD_INT 2
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PPUSH
14574: CALL_OW 69
14578: PUSH
14579: LD_INT 2
14581: GREATEREQUAL
14582: IFFALSE 14602
14584: GO 14586
14586: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14587: LD_STRING MRa
14589: PPUSH
14590: CALL_OW 337
// remoteVehiclesBuild := 1 ;
14594: LD_ADDR_EXP 29
14598: PUSH
14599: LD_INT 1
14601: ST_TO_ADDR
// end ;
14602: END
// every 2 2$00 do var i , last ;
14603: GO 14605
14605: DISABLE
14606: LD_INT 0
14608: PPUSH
14609: PPUSH
// begin last := 8 ;
14610: LD_ADDR_VAR 0 2
14614: PUSH
14615: LD_INT 8
14617: ST_TO_ADDR
// for i := 1 to last do
14618: LD_ADDR_VAR 0 1
14622: PUSH
14623: DOUBLE
14624: LD_INT 1
14626: DEC
14627: ST_TO_ADDR
14628: LD_VAR 0 2
14632: PUSH
14633: FOR_TO
14634: IFFALSE 14662
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
14636: LD_INT 6300
14638: PPUSH
14639: LD_INT 12600
14641: PPUSH
14642: CALL_OW 12
14646: PPUSH
14647: CALL_OW 67
// PrepareRandoms ( i ) ;
14651: LD_VAR 0 1
14655: PPUSH
14656: CALL 4230 0 1
// end ;
14660: GO 14633
14662: POP
14663: POP
// end ;
14664: PPOPN 2
14666: END
// every 5 5$20 do
14667: GO 14669
14669: DISABLE
// begin DialogueOn ;
14670: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14674: LD_EXP 10
14678: PPUSH
14679: LD_STRING D12a-Sci-1
14681: PPUSH
14682: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14686: LD_EXP 1
14690: PPUSH
14691: LD_STRING D12a-JMM-1
14693: PPUSH
14694: CALL_OW 88
// DialogueOff ;
14698: CALL_OW 7
// cratesStatus := 1 ;
14702: LD_ADDR_EXP 39
14706: PUSH
14707: LD_INT 1
14709: ST_TO_ADDR
// end ;
14710: END
// every 13 13$0 do
14711: GO 14713
14713: DISABLE
// begin DialogueOn ;
14714: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14718: LD_EXP 10
14722: PPUSH
14723: LD_STRING D12b-Sci-1
14725: PPUSH
14726: CALL_OW 94
// DialogueOff ;
14730: CALL_OW 7
// cratesStatus := 2 ;
14734: LD_ADDR_EXP 39
14738: PUSH
14739: LD_INT 2
14741: ST_TO_ADDR
// BuildBulldozer ;
14742: CALL 10581 0 0
// end ;
14746: END
// every 32 32$0 do
14747: GO 14749
14749: DISABLE
// begin DialogueOn ;
14750: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14754: LD_EXP 10
14758: PPUSH
14759: LD_STRING D12c-Sci-1
14761: PPUSH
14762: CALL_OW 94
// DialogueOff ;
14766: CALL_OW 7
// wait ( 3 3$0 ) ;
14770: LD_INT 6300
14772: PPUSH
14773: CALL_OW 67
// DialogueOn ;
14777: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14781: LD_EXP 10
14785: PPUSH
14786: LD_STRING D12d-Sci-1
14788: PPUSH
14789: CALL_OW 94
// DialogueOff ;
14793: CALL_OW 7
// cratesStatus = 1 ;
14797: LD_ADDR_EXP 39
14801: PUSH
14802: LD_INT 1
14804: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14805: CALL 21211 0 0
// wait ( 2 2$30 ) ;
14809: LD_INT 5250
14811: PPUSH
14812: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14816: LD_INT 35
14818: PPUSH
14819: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14823: LD_INT 1
14825: PPUSH
14826: CALL_OW 463
14830: NOT
14831: PUSH
14832: LD_INT 32
14834: PPUSH
14835: LD_INT 81
14837: PUSH
14838: LD_INT 1
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PPUSH
14845: CALL_OW 70
14849: NOT
14850: AND
14851: PUSH
14852: LD_EXP 27
14856: PUSH
14857: LD_INT 6300
14859: LESS
14860: OR
14861: IFFALSE 14816
// PrepareJoan ;
14863: CALL 3085 0 0
// end ;
14867: END
// every 42 42$0 do
14868: GO 14870
14870: DISABLE
// begin DialogueOn ;
14871: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14875: LD_EXP 10
14879: PPUSH
14880: LD_STRING D12e-Sci-1
14882: PPUSH
14883: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14887: LD_EXP 1
14891: PPUSH
14892: LD_STRING D12e-JMM-1
14894: PPUSH
14895: CALL_OW 88
// DialogueOff ;
14899: CALL_OW 7
// cratesStatus := 2 ;
14903: LD_ADDR_EXP 39
14907: PUSH
14908: LD_INT 2
14910: ST_TO_ADDR
// end ; end_of_file
14911: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14912: LD_VAR 0 1
14916: PUSH
14917: LD_INT 1
14919: EQUAL
14920: PUSH
14921: LD_VAR 0 2
14925: PUSH
14926: LD_INT 3
14928: EQUAL
14929: AND
14930: IFFALSE 14940
// contactWithRussian := 1 ;
14932: LD_ADDR_EXP 23
14936: PUSH
14937: LD_INT 1
14939: ST_TO_ADDR
// end ;
14940: PPOPN 2
14942: END
// on BuildingComplete ( building ) do var i ;
14943: LD_INT 0
14945: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14946: LD_VAR 0 1
14950: PPUSH
14951: CALL_OW 266
14955: PUSH
14956: LD_INT 36
14958: EQUAL
14959: PUSH
14960: LD_VAR 0 1
14964: PPUSH
14965: CALL_OW 255
14969: PUSH
14970: LD_INT 1
14972: EQUAL
14973: AND
14974: PUSH
14975: LD_EXP 24
14979: PUSH
14980: LD_INT 0
14982: EQUAL
14983: AND
14984: IFFALSE 15064
// begin firstTower = 1 ;
14986: LD_ADDR_EXP 24
14990: PUSH
14991: LD_INT 1
14993: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14994: LD_INT 22
14996: PUSH
14997: LD_INT 1
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 21
15006: PUSH
15007: LD_INT 1
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 25
15016: PUSH
15017: LD_INT 3
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 26
15026: PUSH
15027: LD_INT 1
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: PPUSH
15040: CALL_OW 69
15044: PUSH
15045: LD_EXP 1
15049: PUSH
15050: EMPTY
15051: LIST
15052: DIFF
15053: PPUSH
15054: LD_STRING D3b-Mech1-1
15056: PPUSH
15057: LD_STRING D3b-Mech1-1
15059: PPUSH
15060: CALL 7538 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15064: LD_VAR 0 1
15068: PPUSH
15069: CALL_OW 266
15073: PUSH
15074: LD_INT 0
15076: EQUAL
15077: PUSH
15078: LD_VAR 0 1
15082: PPUSH
15083: CALL_OW 255
15087: PUSH
15088: LD_INT 1
15090: EQUAL
15091: AND
15092: IFFALSE 15106
// SetBName ( building , theta ) ;
15094: LD_VAR 0 1
15098: PPUSH
15099: LD_STRING theta
15101: PPUSH
15102: CALL_OW 500
// if GetSide ( building ) = 3 then
15106: LD_VAR 0 1
15110: PPUSH
15111: CALL_OW 255
15115: PUSH
15116: LD_INT 3
15118: EQUAL
15119: IFFALSE 15159
// begin for i := 1 to 4 do
15121: LD_ADDR_VAR 0 2
15125: PUSH
15126: DOUBLE
15127: LD_INT 1
15129: DEC
15130: ST_TO_ADDR
15131: LD_INT 4
15133: PUSH
15134: FOR_TO
15135: IFFALSE 15157
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15137: LD_ADDR_EXP 32
15141: PUSH
15142: LD_EXP 32
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL_OW 3
15154: ST_TO_ADDR
15155: GO 15134
15157: POP
15158: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15159: LD_VAR 0 1
15163: PPUSH
15164: CALL_OW 255
15168: PUSH
15169: LD_INT 3
15171: EQUAL
15172: PUSH
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL_OW 266
15182: PUSH
15183: LD_INT 0
15185: EQUAL
15186: PUSH
15187: LD_VAR 0 1
15191: PPUSH
15192: CALL_OW 266
15196: PUSH
15197: LD_INT 2
15199: EQUAL
15200: OR
15201: PUSH
15202: LD_VAR 0 1
15206: PPUSH
15207: CALL_OW 266
15211: PUSH
15212: LD_INT 4
15214: EQUAL
15215: OR
15216: PUSH
15217: EMPTY
15218: LIST
15219: AND
15220: IFFALSE 15231
// ComUpgrade ( building ) ;
15222: LD_VAR 0 1
15226: PPUSH
15227: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15231: LD_VAR 0 1
15235: PPUSH
15236: CALL_OW 255
15240: PUSH
15241: LD_INT 3
15243: EQUAL
15244: PUSH
15245: LD_VAR 0 1
15249: PPUSH
15250: CALL_OW 266
15254: PUSH
15255: LD_INT 32
15257: EQUAL
15258: AND
15259: IFFALSE 15300
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15261: LD_VAR 0 1
15265: PPUSH
15266: LD_INT 42
15268: PUSH
15269: LD_INT 43
15271: PUSH
15272: LD_INT 44
15274: PUSH
15275: LD_INT 46
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 1
15286: PPUSH
15287: LD_INT 4
15289: PPUSH
15290: CALL_OW 12
15294: ARRAY
15295: PPUSH
15296: CALL_OW 208
// end ;
15300: PPOPN 2
15302: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
15303: LD_VAR 0 1
15307: PPUSH
15308: CALL 37795 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
15312: LD_VAR 0 1
15316: PUSH
15317: LD_INT 22
15319: PUSH
15320: LD_INT 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 21
15329: PUSH
15330: LD_INT 1
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 23
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: LIST
15351: PPUSH
15352: CALL_OW 69
15356: IN
15357: IFFALSE 15373
// killCounter := killCounter + 1 ;
15359: LD_ADDR_EXP 46
15363: PUSH
15364: LD_EXP 46
15368: PUSH
15369: LD_INT 1
15371: PLUS
15372: ST_TO_ADDR
// if unit in ruAttackersInForest then
15373: LD_VAR 0 1
15377: PUSH
15378: LD_EXP 49
15382: IN
15383: IFFALSE 15401
// ruAttackersInForest := ruAttackersInForest diff unit ;
15385: LD_ADDR_EXP 49
15389: PUSH
15390: LD_EXP 49
15394: PUSH
15395: LD_VAR 0 1
15399: DIFF
15400: ST_TO_ADDR
// if unit in ruAttackers then
15401: LD_VAR 0 1
15405: PUSH
15406: LD_EXP 48
15410: IN
15411: IFFALSE 15429
// ruAttackers := ruAttackers diff unit ;
15413: LD_ADDR_EXP 48
15417: PUSH
15418: LD_EXP 48
15422: PUSH
15423: LD_VAR 0 1
15427: DIFF
15428: ST_TO_ADDR
// if unit = JMM then
15429: LD_VAR 0 1
15433: PUSH
15434: LD_EXP 1
15438: EQUAL
15439: IFFALSE 15448
// YouLost ( JMM ) ;
15441: LD_STRING JMM
15443: PPUSH
15444: CALL_OW 104
// if unit = Joan then
15448: LD_VAR 0 1
15452: PUSH
15453: LD_EXP 16
15457: EQUAL
15458: IFFALSE 15468
// JoanStatus := 0 ;
15460: LD_ADDR_EXP 17
15464: PUSH
15465: LD_INT 0
15467: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
15468: LD_VAR 0 1
15472: PPUSH
15473: CALL_OW 255
15477: PUSH
15478: LD_INT 1
15480: EQUAL
15481: PUSH
15482: LD_VAR 0 1
15486: PPUSH
15487: CALL_OW 247
15491: PUSH
15492: LD_INT 1
15494: EQUAL
15495: AND
15496: PUSH
15497: LD_VAR 0 1
15501: PPUSH
15502: CALL_OW 248
15506: PUSH
15507: LD_INT 1
15509: EQUAL
15510: AND
15511: IFFALSE 15527
// unitLost = unitLost + 1 ;
15513: LD_ADDR_EXP 31
15517: PUSH
15518: LD_EXP 31
15522: PUSH
15523: LD_INT 1
15525: PLUS
15526: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
15527: LD_VAR 0 1
15531: PPUSH
15532: CALL_OW 255
15536: PUSH
15537: LD_INT 3
15539: EQUAL
15540: PUSH
15541: LD_VAR 0 1
15545: PPUSH
15546: CALL_OW 247
15550: PUSH
15551: LD_INT 3
15553: EQUAL
15554: AND
15555: PUSH
15556: LD_VAR 0 1
15560: PPUSH
15561: CALL_OW 266
15565: PUSH
15566: LD_INT 4
15568: PUSH
15569: LD_INT 5
15571: PUSH
15572: LD_INT 32
15574: PUSH
15575: LD_INT 31
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: IN
15584: AND
15585: IFFALSE 15671
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15587: LD_ADDR_EXP 32
15591: PUSH
15592: LD_EXP 32
15596: PUSH
15597: LD_VAR 0 1
15601: PPUSH
15602: CALL_OW 266
15606: ADD
15607: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15608: LD_ADDR_EXP 32
15612: PUSH
15613: LD_EXP 32
15617: PUSH
15618: LD_VAR 0 1
15622: PPUSH
15623: CALL_OW 250
15627: ADD
15628: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15629: LD_ADDR_EXP 32
15633: PUSH
15634: LD_EXP 32
15638: PUSH
15639: LD_VAR 0 1
15643: PPUSH
15644: CALL_OW 251
15648: ADD
15649: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15650: LD_ADDR_EXP 32
15654: PUSH
15655: LD_EXP 32
15659: PUSH
15660: LD_VAR 0 1
15664: PPUSH
15665: CALL_OW 254
15669: ADD
15670: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15671: LD_EXP 47
15675: PUSH
15676: LD_VAR 0 1
15680: PPUSH
15681: CALL_OW 257
15685: PUSH
15686: LD_INT 3
15688: EQUAL
15689: AND
15690: PUSH
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 255
15700: PUSH
15701: LD_INT 3
15703: EQUAL
15704: AND
15705: PUSH
15706: LD_INT 21
15708: PPUSH
15709: CALL_OW 302
15713: AND
15714: PUSH
15715: LD_INT 21
15717: PPUSH
15718: CALL_OW 255
15722: PUSH
15723: LD_INT 3
15725: EQUAL
15726: AND
15727: IFFALSE 15809
// begin ruMechCounter := ruMechCounter - 1 ;
15729: LD_ADDR_EXP 47
15733: PUSH
15734: LD_EXP 47
15738: PUSH
15739: LD_INT 1
15741: MINUS
15742: ST_TO_ADDR
// uc_side := 3 ;
15743: LD_ADDR_OWVAR 20
15747: PUSH
15748: LD_INT 3
15750: ST_TO_ADDR
// uc_nation := 3 ;
15751: LD_ADDR_OWVAR 21
15755: PUSH
15756: LD_INT 3
15758: ST_TO_ADDR
// hc_gallery :=  ;
15759: LD_ADDR_OWVAR 33
15763: PUSH
15764: LD_STRING 
15766: ST_TO_ADDR
// hc_name :=  ;
15767: LD_ADDR_OWVAR 26
15771: PUSH
15772: LD_STRING 
15774: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15775: LD_INT 0
15777: PPUSH
15778: LD_EXP 35
15782: PPUSH
15783: LD_EXP 36
15787: PPUSH
15788: CALL_OW 12
15792: PPUSH
15793: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15797: CALL_OW 44
15801: PPUSH
15802: LD_INT 21
15804: PPUSH
15805: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15809: LD_VAR 0 1
15813: PPUSH
15814: CALL_OW 255
15818: PUSH
15819: LD_INT 3
15821: EQUAL
15822: PUSH
15823: LD_VAR 0 1
15827: PPUSH
15828: CALL_OW 264
15832: PUSH
15833: LD_INT 52
15835: EQUAL
15836: AND
15837: PUSH
15838: LD_INT 21
15840: PPUSH
15841: CALL_OW 302
15845: AND
15846: PUSH
15847: LD_INT 21
15849: PPUSH
15850: CALL_OW 255
15854: PUSH
15855: LD_INT 3
15857: EQUAL
15858: AND
15859: IFFALSE 15880
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15861: LD_INT 21
15863: PPUSH
15864: LD_INT 22
15866: PPUSH
15867: LD_INT 1
15869: PPUSH
15870: LD_INT 1
15872: PPUSH
15873: LD_INT 52
15875: PPUSH
15876: CALL_OW 125
// end ;
15880: PPOPN 1
15882: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15883: LD_INT 0
15885: PPUSH
15886: PPUSH
15887: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15888: LD_VAR 0 1
15892: PPUSH
15893: LD_VAR 0 2
15897: PPUSH
15898: CALL 37915 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15902: LD_VAR 0 1
15906: PPUSH
15907: CALL_OW 255
15911: PUSH
15912: LD_INT 3
15914: EQUAL
15915: PUSH
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 264
15925: PUSH
15926: LD_INT 51
15928: PUSH
15929: LD_INT 52
15931: PUSH
15932: LD_INT 53
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: IN
15940: NOT
15941: AND
15942: IFFALSE 15973
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15944: LD_ADDR_EXP 48
15948: PUSH
15949: LD_EXP 48
15953: PPUSH
15954: LD_EXP 48
15958: PUSH
15959: LD_INT 1
15961: PLUS
15962: PPUSH
15963: LD_VAR 0 1
15967: PPUSH
15968: CALL_OW 1
15972: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15973: LD_VAR 0 1
15977: PPUSH
15978: CALL_OW 264
15982: PUSH
15983: LD_INT 53
15985: EQUAL
15986: IFFALSE 16141
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15988: LD_VAR 0 1
15992: PPUSH
15993: LD_INT 60
15995: PPUSH
15996: LD_INT 85
15998: PPUSH
15999: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
16003: LD_VAR 0 1
16007: PPUSH
16008: LD_INT 43
16010: PPUSH
16011: LD_INT 69
16013: PPUSH
16014: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
16018: LD_VAR 0 1
16022: PPUSH
16023: LD_INT 37
16025: PPUSH
16026: LD_INT 46
16028: PPUSH
16029: CALL_OW 171
// wait ( 0 0$1 ) ;
16033: LD_INT 35
16035: PPUSH
16036: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16040: LD_INT 35
16042: PPUSH
16043: CALL_OW 67
// until not HasTask ( vehicle ) ;
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 314
16056: NOT
16057: IFFALSE 16040
// CutTreeInArea ( vehicle , cutTreeArea ) ;
16059: LD_VAR 0 1
16063: PPUSH
16064: LD_INT 34
16066: PPUSH
16067: CALL 10633 0 2
// repeat wait ( 0 0$1 ) ;
16071: LD_INT 35
16073: PPUSH
16074: CALL_OW 67
// until not HasTask ( vehicle ) ;
16078: LD_VAR 0 1
16082: PPUSH
16083: CALL_OW 314
16087: NOT
16088: IFFALSE 16071
// un := IsDrivenBy ( vehicle ) ;
16090: LD_ADDR_VAR 0 4
16094: PUSH
16095: LD_VAR 0 1
16099: PPUSH
16100: CALL_OW 311
16104: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
16105: LD_VAR 0 4
16109: PPUSH
16110: LD_INT 96
16112: PPUSH
16113: LD_INT 77
16115: PPUSH
16116: CALL_OW 171
// AddComExitVehicle ( un ) ;
16120: LD_VAR 0 4
16124: PPUSH
16125: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
16129: LD_VAR 0 4
16133: PPUSH
16134: LD_INT 17
16136: PPUSH
16137: CALL_OW 180
// end ; end ;
16141: PPOPN 5
16143: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16144: LD_VAR 0 1
16148: PPUSH
16149: CALL_OW 255
16153: PUSH
16154: LD_INT 3
16156: EQUAL
16157: IFFALSE 16188
// begin tamedApemans = tamedApemans + 1 ;
16159: LD_ADDR_EXP 33
16163: PUSH
16164: LD_EXP 33
16168: PUSH
16169: LD_INT 1
16171: PLUS
16172: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
16173: LD_VAR 0 1
16177: PPUSH
16178: LD_INT 106
16180: PPUSH
16181: LD_INT 85
16183: PPUSH
16184: CALL_OW 111
// end ; end ;
16188: PPOPN 2
16190: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
16191: LD_VAR 0 2
16195: PPUSH
16196: CALL_OW 255
16200: PUSH
16201: LD_INT 3
16203: EQUAL
16204: PUSH
16205: LD_VAR 0 1
16209: PPUSH
16210: CALL_OW 255
16214: PUSH
16215: LD_INT 3
16217: EQUAL
16218: AND
16219: PUSH
16220: LD_INT 21
16222: PPUSH
16223: CALL_OW 302
16227: AND
16228: IFFALSE 16242
// ComEnterUnit ( human , rufab ) ;
16230: LD_VAR 0 1
16234: PPUSH
16235: LD_INT 21
16237: PPUSH
16238: CALL_OW 120
// end ;
16242: PPOPN 4
16244: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
16245: LD_VAR 0 1
16249: PUSH
16250: LD_INT 21
16252: EQUAL
16253: PUSH
16254: LD_VAR 0 2
16258: PPUSH
16259: CALL_OW 255
16263: PUSH
16264: LD_INT 3
16266: EQUAL
16267: AND
16268: IFFALSE 16282
// SetLives ( human , 1000 ) ;
16270: LD_VAR 0 2
16274: PPUSH
16275: LD_INT 1000
16277: PPUSH
16278: CALL_OW 234
// end ;
16282: PPOPN 2
16284: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL 37899 0 1
// end ; end_of_file
16294: PPOPN 1
16296: END
// every 0 0$30 trigger cratesStatus = 1 do
16297: LD_EXP 39
16301: PUSH
16302: LD_INT 1
16304: EQUAL
16305: IFFALSE 16358
16307: GO 16309
16309: DISABLE
// begin enable ;
16310: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
16311: LD_INT 350
16313: PUSH
16314: LD_INT 875
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 1
16323: PPUSH
16324: LD_INT 2
16326: PPUSH
16327: CALL_OW 12
16331: ARRAY
16332: PPUSH
16333: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
16337: LD_INT 1
16339: PPUSH
16340: LD_INT 5
16342: PPUSH
16343: CALL_OW 12
16347: PPUSH
16348: LD_INT 7
16350: PPUSH
16351: LD_INT 1
16353: PPUSH
16354: CALL_OW 55
// end ;
16358: END
// every 1 1$0 trigger cratesStatus = 2 do
16359: LD_EXP 39
16363: PUSH
16364: LD_INT 2
16366: EQUAL
16367: IFFALSE 16450
16369: GO 16371
16371: DISABLE
// begin enable ;
16372: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16373: LD_INT 3150
16375: PUSH
16376: LD_INT 4550
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 1
16385: PPUSH
16386: LD_INT 2
16388: PPUSH
16389: CALL_OW 12
16393: ARRAY
16394: PPUSH
16395: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
16399: LD_INT 2
16401: PUSH
16402: LD_INT 5
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 1
16411: PPUSH
16412: LD_INT 2
16414: PPUSH
16415: CALL_OW 12
16419: ARRAY
16420: PPUSH
16421: LD_INT 6
16423: PUSH
16424: LD_INT 7
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 1
16433: PPUSH
16434: LD_INT 2
16436: PPUSH
16437: CALL_OW 12
16441: ARRAY
16442: PPUSH
16443: LD_INT 1
16445: PPUSH
16446: CALL_OW 55
// end ;
16450: END
// every 0 0$30 + 0 0$10 do
16451: GO 16453
16453: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16454: LD_INT 4
16456: PUSH
16457: LD_INT 5
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 1
16466: PPUSH
16467: LD_INT 2
16469: PPUSH
16470: CALL_OW 12
16474: ARRAY
16475: PPUSH
16476: LD_INT 7
16478: PPUSH
16479: LD_INT 1
16481: PPUSH
16482: CALL_OW 55
// Wait ( 0 0$15 ) ;
16486: LD_INT 525
16488: PPUSH
16489: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16493: LD_INT 4
16495: PUSH
16496: LD_INT 5
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 1
16505: PPUSH
16506: LD_INT 2
16508: PPUSH
16509: CALL_OW 12
16513: ARRAY
16514: PPUSH
16515: LD_INT 7
16517: PPUSH
16518: LD_INT 1
16520: PPUSH
16521: CALL_OW 55
// Wait ( 0 0$20 ) ;
16525: LD_INT 700
16527: PPUSH
16528: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16532: LD_INT 4
16534: PUSH
16535: LD_INT 5
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 1
16544: PPUSH
16545: LD_INT 2
16547: PPUSH
16548: CALL_OW 12
16552: ARRAY
16553: PPUSH
16554: LD_INT 7
16556: PPUSH
16557: LD_INT 1
16559: PPUSH
16560: CALL_OW 55
// end ; end_of_file
16564: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16565: LD_EXP 25
16569: PUSH
16570: LD_INT 1
16572: EQUAL
16573: IFFALSE 16866
16575: GO 16577
16577: DISABLE
16578: LD_INT 0
16580: PPUSH
16581: PPUSH
16582: PPUSH
// begin enable ;
16583: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16584: LD_ADDR_VAR 0 2
16588: PUSH
16589: LD_INT 22
16591: PUSH
16592: LD_INT 1
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: LD_INT 21
16601: PUSH
16602: LD_INT 3
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 2
16611: PUSH
16612: LD_INT 30
16614: PUSH
16615: LD_INT 0
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 30
16624: PUSH
16625: LD_INT 1
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: PPUSH
16642: CALL_OW 69
16646: ST_TO_ADDR
// for i in tmp do
16647: LD_ADDR_VAR 0 1
16651: PUSH
16652: LD_VAR 0 2
16656: PUSH
16657: FOR_IN
16658: IFFALSE 16691
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16660: LD_ADDR_VAR 0 3
16664: PUSH
16665: LD_VAR 0 3
16669: PUSH
16670: LD_VAR 0 1
16674: PPUSH
16675: CALL_OW 274
16679: PPUSH
16680: LD_INT 1
16682: PPUSH
16683: CALL_OW 275
16687: PLUS
16688: ST_TO_ADDR
16689: GO 16657
16691: POP
16692: POP
// strings = [ ] ;
16693: LD_ADDR_EXP 28
16697: PUSH
16698: EMPTY
16699: ST_TO_ADDR
// if tmp = 0 then
16700: LD_VAR 0 2
16704: PUSH
16705: LD_INT 0
16707: EQUAL
16708: IFFALSE 16733
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16710: LD_ADDR_EXP 28
16714: PUSH
16715: LD_EXP 28
16719: PUSH
16720: LD_STRING #Am06-1
16722: PUSH
16723: LD_EXP 26
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: ADD
16732: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16733: LD_VAR 0 2
16737: PUSH
16738: LD_EXP 26
16742: PUSH
16743: LD_VAR 0 3
16747: GREATER
16748: AND
16749: IFFALSE 16780
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16751: LD_ADDR_EXP 28
16755: PUSH
16756: LD_EXP 28
16760: PUSH
16761: LD_STRING #Am06-1
16763: PUSH
16764: LD_EXP 26
16768: PUSH
16769: LD_VAR 0 3
16773: MINUS
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: ADD
16779: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16780: LD_VAR 0 2
16784: PUSH
16785: LD_EXP 26
16789: PUSH
16790: LD_VAR 0 3
16794: LESSEQUAL
16795: AND
16796: IFFALSE 16819
// strings = strings ^ [ #Am06-1 , 0 ] ;
16798: LD_ADDR_EXP 28
16802: PUSH
16803: LD_EXP 28
16807: PUSH
16808: LD_STRING #Am06-1
16810: PUSH
16811: LD_INT 0
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: ADD
16818: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16819: LD_ADDR_EXP 27
16823: PUSH
16824: LD_EXP 27
16828: PUSH
16829: LD_INT 35
16831: MINUS
16832: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16833: LD_ADDR_EXP 28
16837: PUSH
16838: LD_EXP 28
16842: PUSH
16843: LD_STRING #Am06-2
16845: PUSH
16846: LD_EXP 27
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: ADD
16855: ST_TO_ADDR
// display_strings = strings ;
16856: LD_ADDR_OWVAR 47
16860: PUSH
16861: LD_EXP 28
16865: ST_TO_ADDR
// end ; end_of_file
16866: PPOPN 3
16868: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 , forceJMM ; begin
16869: LD_INT 0
16871: PPUSH
16872: PPUSH
16873: PPUSH
16874: PPUSH
16875: PPUSH
16876: PPUSH
16877: PPUSH
16878: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16879: LD_ADDR_VAR 0 3
16883: PUSH
16884: LD_INT 22
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 2
16896: PUSH
16897: LD_INT 30
16899: PUSH
16900: LD_INT 0
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 30
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PPUSH
16926: CALL_OW 69
16930: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16931: LD_INT 35
16933: PPUSH
16934: CALL_OW 67
// until depot ;
16938: LD_VAR 0 3
16942: IFFALSE 16879
// forceJMM := false ;
16944: LD_ADDR_VAR 0 8
16948: PUSH
16949: LD_INT 0
16951: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16952: LD_INT 35
16954: PPUSH
16955: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ) ;
16959: LD_ADDR_VAR 0 4
16963: PUSH
16964: LD_INT 22
16966: PUSH
16967: LD_INT 1
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 91
16976: PUSH
16977: LD_VAR 0 3
16981: PUSH
16982: LD_INT 1
16984: ARRAY
16985: PUSH
16986: LD_INT 15
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 2
17006: PUSH
17007: LD_INT 25
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 25
17019: PUSH
17020: LD_INT 2
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 25
17029: PUSH
17030: LD_INT 3
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 25
17039: PUSH
17040: LD_INT 4
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 3
17056: PUSH
17057: LD_INT 54
17059: PUSH
17060: EMPTY
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 3
17069: PUSH
17070: LD_INT 55
17072: PUSH
17073: EMPTY
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: PPUSH
17088: CALL_OW 69
17092: PUSH
17093: LD_EXP 2
17097: PUSH
17098: LD_EXP 3
17102: PUSH
17103: LD_EXP 4
17107: PUSH
17108: LD_EXP 5
17112: PUSH
17113: LD_EXP 7
17117: PUSH
17118: LD_EXP 8
17122: PUSH
17123: LD_EXP 9
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: DIFF
17137: ST_TO_ADDR
// if timeToEnd < 10 10$00 then
17138: LD_EXP 27
17142: PUSH
17143: LD_INT 21000
17145: LESS
17146: IFFALSE 17158
// begin forceJMM := true ;
17148: LD_ADDR_VAR 0 8
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// break ;
17156: GO 17174
// end ; until tmp and not InBattle ( 1 ) ;
17158: LD_VAR 0 4
17162: PUSH
17163: LD_INT 1
17165: PPUSH
17166: CALL_OW 463
17170: NOT
17171: AND
17172: IFFALSE 16952
// if not forceJMM then
17174: LD_VAR 0 8
17178: NOT
17179: IFFALSE 17207
// tmp := tmp [ rand ( 1 , tmp ) ] else
17181: LD_ADDR_VAR 0 4
17185: PUSH
17186: LD_VAR 0 4
17190: PUSH
17191: LD_INT 1
17193: PPUSH
17194: LD_VAR 0 4
17198: PPUSH
17199: CALL_OW 12
17203: ARRAY
17204: ST_TO_ADDR
17205: GO 17217
// tmp := JMM ;
17207: LD_ADDR_VAR 0 4
17211: PUSH
17212: LD_EXP 1
17216: ST_TO_ADDR
// blockSpawn := 1 ;
17217: LD_ADDR_EXP 30
17221: PUSH
17222: LD_INT 1
17224: ST_TO_ADDR
// uc_side := 2 ;
17225: LD_ADDR_OWVAR 20
17229: PUSH
17230: LD_INT 2
17232: ST_TO_ADDR
// uc_nation := 2 ;
17233: LD_ADDR_OWVAR 21
17237: PUSH
17238: LD_INT 2
17240: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
17241: LD_ADDR_EXP 20
17245: PUSH
17246: LD_STRING Kurt
17248: PPUSH
17249: LD_INT 0
17251: PPUSH
17252: LD_STRING 
17254: PPUSH
17255: CALL 42689 0 3
17259: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17260: LD_EXP 20
17264: PPUSH
17265: LD_VAR 0 4
17269: PPUSH
17270: CALL_OW 250
17274: PPUSH
17275: LD_VAR 0 4
17279: PPUSH
17280: CALL_OW 251
17284: PPUSH
17285: LD_INT 5
17287: PPUSH
17288: LD_INT 1
17290: PPUSH
17291: CALL_OW 50
// InGameOn ;
17295: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17299: LD_EXP 20
17303: PPUSH
17304: CALL_OW 87
// wait ( 0 0$2 ) ;
17308: LD_INT 70
17310: PPUSH
17311: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17315: LD_EXP 20
17319: PPUSH
17320: LD_VAR 0 4
17324: PPUSH
17325: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
17329: LD_VAR 0 4
17333: PPUSH
17334: LD_EXP 20
17338: PPUSH
17339: CALL_OW 112
// wait ( 0 0$1 ) ;
17343: LD_INT 35
17345: PPUSH
17346: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
17350: LD_VAR 0 4
17354: PPUSH
17355: LD_EXP 20
17359: PPUSH
17360: CALL_OW 119
// DialogueOn ;
17364: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17368: LD_EXP 20
17372: PPUSH
17373: LD_STRING D2-Kurt-1
17375: PPUSH
17376: CALL_OW 88
// if tmp = JMM then
17380: LD_VAR 0 4
17384: PUSH
17385: LD_EXP 1
17389: EQUAL
17390: IFFALSE 17482
// begin Say ( JMM , D2-JMM-1 ) ;
17392: LD_EXP 1
17396: PPUSH
17397: LD_STRING D2-JMM-1
17399: PPUSH
17400: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17404: LD_EXP 20
17408: PPUSH
17409: LD_STRING D2-Kurt-2
17411: PPUSH
17412: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17416: LD_EXP 1
17420: PPUSH
17421: LD_STRING D2-JMM-2
17423: PPUSH
17424: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17428: LD_EXP 20
17432: PPUSH
17433: LD_STRING D2-Kurt-3
17435: PPUSH
17436: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17440: LD_EXP 1
17444: PPUSH
17445: LD_STRING D2-JMM-3
17447: PPUSH
17448: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17452: LD_EXP 20
17456: PPUSH
17457: LD_STRING D2-Kurt-4
17459: PPUSH
17460: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17464: LD_EXP 1
17468: PPUSH
17469: LD_STRING D2-JMM-4
17471: PPUSH
17472: CALL_OW 88
// DialogueOff ;
17476: CALL_OW 7
// end else
17480: GO 17710
// begin if GetSex ( tmp ) = 1 then
17482: LD_VAR 0 4
17486: PPUSH
17487: CALL_OW 258
17491: PUSH
17492: LD_INT 1
17494: EQUAL
17495: IFFALSE 17511
// Say ( tmp , D2-Sol1-1 ) else
17497: LD_VAR 0 4
17501: PPUSH
17502: LD_STRING D2-Sol1-1
17504: PPUSH
17505: CALL_OW 88
17509: GO 17523
// Say ( tmp , D2-FSol1-1 ) ;
17511: LD_VAR 0 4
17515: PPUSH
17516: LD_STRING D2-FSol1-1
17518: PPUSH
17519: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17523: LD_EXP 20
17527: PPUSH
17528: LD_STRING D2-Kurt-2
17530: PPUSH
17531: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17535: LD_VAR 0 4
17539: PPUSH
17540: CALL_OW 258
17544: PUSH
17545: LD_INT 1
17547: EQUAL
17548: IFFALSE 17564
// Say ( tmp , D2-Sol1-2 ) else
17550: LD_VAR 0 4
17554: PPUSH
17555: LD_STRING D2-Sol1-2
17557: PPUSH
17558: CALL_OW 88
17562: GO 17576
// Say ( tmp , D2-FSol1-2 ) ;
17564: LD_VAR 0 4
17568: PPUSH
17569: LD_STRING D2-FSol1-2
17571: PPUSH
17572: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17576: LD_EXP 20
17580: PPUSH
17581: LD_STRING D2-Kurt-3
17583: PPUSH
17584: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17588: LD_VAR 0 4
17592: PPUSH
17593: CALL_OW 258
17597: PUSH
17598: LD_INT 1
17600: EQUAL
17601: IFFALSE 17617
// Say ( tmp , D2-Sol1-3 ) else
17603: LD_VAR 0 4
17607: PPUSH
17608: LD_STRING D2-Sol1-3
17610: PPUSH
17611: CALL_OW 88
17615: GO 17629
// Say ( tmp , D2-FSol1-3 ) ;
17617: LD_VAR 0 4
17621: PPUSH
17622: LD_STRING D2-FSol1-3
17624: PPUSH
17625: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17629: LD_EXP 20
17633: PPUSH
17634: LD_STRING D2-Kurt-4
17636: PPUSH
17637: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17641: LD_VAR 0 4
17645: PPUSH
17646: CALL_OW 258
17650: PUSH
17651: LD_INT 1
17653: EQUAL
17654: IFFALSE 17682
// begin Say ( tmp , D2-Sol1-4 ) ;
17656: LD_VAR 0 4
17660: PPUSH
17661: LD_STRING D2-Sol1-4
17663: PPUSH
17664: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
17668: LD_VAR 0 4
17672: PPUSH
17673: LD_STRING D2-Sol1-5
17675: PPUSH
17676: CALL_OW 88
// end else
17680: GO 17706
// begin Say ( tmp , D2-FSol1-4 ) ;
17682: LD_VAR 0 4
17686: PPUSH
17687: LD_STRING D2-FSol1-4
17689: PPUSH
17690: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
17694: LD_VAR 0 4
17698: PPUSH
17699: LD_STRING D2-FSol1-5
17701: PPUSH
17702: CALL_OW 88
// end ; DialogueOff ;
17706: CALL_OW 7
// end ; dec := ShowQuery1 ;
17710: LD_ADDR_VAR 0 6
17714: PUSH
17715: CALL 8023 0 0
17719: ST_TO_ADDR
// if dec = 1 then
17720: LD_VAR 0 6
17724: PUSH
17725: LD_INT 1
17727: EQUAL
17728: IFFALSE 17790
// begin DialogueOn ;
17730: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17734: LD_EXP 20
17738: PPUSH
17739: LD_STRING D2a-Kurt-1
17741: PPUSH
17742: CALL_OW 88
// DialogueOff ;
17746: CALL_OW 7
// InGameOff ;
17750: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17754: LD_INT 1
17756: PPUSH
17757: LD_INT 2
17759: PPUSH
17760: LD_INT 2
17762: PPUSH
17763: LD_INT 1
17765: PPUSH
17766: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17770: LD_EXP 20
17774: PPUSH
17775: LD_INT 8
17777: PPUSH
17778: CALL_OW 113
// readyToEscape := 1 ;
17782: LD_ADDR_EXP 22
17786: PUSH
17787: LD_INT 1
17789: ST_TO_ADDR
// end ; if dec = 2 then
17790: LD_VAR 0 6
17794: PUSH
17795: LD_INT 2
17797: EQUAL
17798: IFFALSE 18266
// begin DialogueOn ;
17800: CALL_OW 6
// if tmp = JMM then
17804: LD_VAR 0 4
17808: PUSH
17809: LD_EXP 1
17813: EQUAL
17814: IFFALSE 17870
// begin Say ( JMM , D2b-JMM-1 ) ;
17816: LD_EXP 1
17820: PPUSH
17821: LD_STRING D2b-JMM-1
17823: PPUSH
17824: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17828: LD_EXP 20
17832: PPUSH
17833: LD_STRING D2b-Kurt-1
17835: PPUSH
17836: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17840: LD_EXP 1
17844: PPUSH
17845: LD_STRING D2b-JMM-2
17847: PPUSH
17848: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17852: LD_EXP 20
17856: PPUSH
17857: LD_STRING D2b-Kurt-2
17859: PPUSH
17860: CALL_OW 88
// DialogueOff ;
17864: CALL_OW 7
// end else
17868: GO 18021
// begin if GetSex ( tmp ) = 1 then
17870: LD_VAR 0 4
17874: PPUSH
17875: CALL_OW 258
17879: PUSH
17880: LD_INT 1
17882: EQUAL
17883: IFFALSE 17899
// Say ( tmp , D2b-Sol1-1 ) else
17885: LD_VAR 0 4
17889: PPUSH
17890: LD_STRING D2b-Sol1-1
17892: PPUSH
17893: CALL_OW 88
17897: GO 17911
// Say ( tmp , D2b-FSol1-1 ) ;
17899: LD_VAR 0 4
17903: PPUSH
17904: LD_STRING D2b-FSol1-1
17906: PPUSH
17907: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17911: LD_EXP 20
17915: PPUSH
17916: LD_STRING D2b-Kurt-1
17918: PPUSH
17919: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17923: LD_VAR 0 4
17927: PPUSH
17928: CALL_OW 258
17932: PUSH
17933: LD_INT 1
17935: EQUAL
17936: IFFALSE 17952
// Say ( tmp , D2b-Sol1-2 ) else
17938: LD_VAR 0 4
17942: PPUSH
17943: LD_STRING D2b-Sol1-2
17945: PPUSH
17946: CALL_OW 88
17950: GO 17964
// Say ( tmp , D2b-FSol1-2 ) ;
17952: LD_VAR 0 4
17956: PPUSH
17957: LD_STRING D2b-FSol1-2
17959: PPUSH
17960: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17964: LD_EXP 20
17968: PPUSH
17969: LD_STRING D2b-Kurt-2
17971: PPUSH
17972: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17976: LD_VAR 0 4
17980: PPUSH
17981: CALL_OW 258
17985: PUSH
17986: LD_INT 1
17988: EQUAL
17989: IFFALSE 18005
// Say ( tmp , D2c-Sol1-2 ) else
17991: LD_VAR 0 4
17995: PPUSH
17996: LD_STRING D2c-Sol1-2
17998: PPUSH
17999: CALL_OW 88
18003: GO 18017
// Say ( tmp , D2c-FSol1-2 ) ;
18005: LD_VAR 0 4
18009: PPUSH
18010: LD_STRING D2c-FSol1-2
18012: PPUSH
18013: CALL_OW 88
// DialogueOff ;
18017: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
18021: LD_ADDR_VAR 0 7
18025: PUSH
18026: CALL 8044 0 0
18030: ST_TO_ADDR
// if dec2 = 1 then
18031: LD_VAR 0 7
18035: PUSH
18036: LD_INT 1
18038: EQUAL
18039: IFFALSE 18101
// begin DialogueOn ;
18041: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18045: LD_EXP 20
18049: PPUSH
18050: LD_STRING D2a-Kurt-1
18052: PPUSH
18053: CALL_OW 88
// DialogueOff ;
18057: CALL_OW 7
// InGameOff ;
18061: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18065: LD_INT 1
18067: PPUSH
18068: LD_INT 2
18070: PPUSH
18071: LD_INT 2
18073: PPUSH
18074: LD_INT 1
18076: PPUSH
18077: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
18081: LD_EXP 20
18085: PPUSH
18086: LD_INT 8
18088: PPUSH
18089: CALL_OW 113
// readyToEscape := 1 ;
18093: LD_ADDR_EXP 22
18097: PUSH
18098: LD_INT 1
18100: ST_TO_ADDR
// end ; if dec2 = 2 then
18101: LD_VAR 0 7
18105: PUSH
18106: LD_INT 2
18108: EQUAL
18109: IFFALSE 18266
// begin if tmp = JMM then
18111: LD_VAR 0 4
18115: PUSH
18116: LD_EXP 1
18120: EQUAL
18121: IFFALSE 18181
// begin DialogueOn ;
18123: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18127: LD_EXP 1
18131: PPUSH
18132: LD_STRING D2c-JMM-1
18134: PPUSH
18135: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18139: LD_EXP 20
18143: PPUSH
18144: LD_STRING D2c-Kurt-1
18146: PPUSH
18147: CALL_OW 88
// DialogueOff ;
18151: CALL_OW 7
// InGameOff ;
18155: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18159: LD_EXP 20
18163: PPUSH
18164: LD_INT 8
18166: PPUSH
18167: CALL_OW 113
// readyToEscape := 1 ;
18171: LD_ADDR_EXP 22
18175: PUSH
18176: LD_INT 1
18178: ST_TO_ADDR
// end else
18179: GO 18266
// begin DialogueOn ;
18181: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18185: LD_VAR 0 4
18189: PPUSH
18190: CALL_OW 258
18194: PUSH
18195: LD_INT 1
18197: EQUAL
18198: IFFALSE 18214
// Say ( tmp , D2c-Sol1-1 ) else
18200: LD_VAR 0 4
18204: PPUSH
18205: LD_STRING D2c-Sol1-1
18207: PPUSH
18208: CALL_OW 88
18212: GO 18226
// Say ( tmp , D2c-FSol1-1 ) ;
18214: LD_VAR 0 4
18218: PPUSH
18219: LD_STRING D2c-FSol1-1
18221: PPUSH
18222: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18226: LD_EXP 20
18230: PPUSH
18231: LD_STRING D2c-Kurt-1
18233: PPUSH
18234: CALL_OW 88
// DialogueOff ;
18238: CALL_OW 7
// InGameOff ;
18242: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18246: LD_EXP 20
18250: PPUSH
18251: LD_INT 8
18253: PPUSH
18254: CALL_OW 113
// readyToEscape := 1 ;
18258: LD_ADDR_EXP 22
18262: PUSH
18263: LD_INT 1
18265: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18266: LD_VAR 0 6
18270: PUSH
18271: LD_INT 3
18273: EQUAL
18274: IFFALSE 18435
// begin DialogueOn ;
18276: CALL_OW 6
// if tmp = JMM then
18280: LD_VAR 0 4
18284: PUSH
18285: LD_EXP 1
18289: EQUAL
18290: IFFALSE 18350
// begin DialogueOn ;
18292: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18296: LD_EXP 1
18300: PPUSH
18301: LD_STRING D2c-JMM-1
18303: PPUSH
18304: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18308: LD_EXP 20
18312: PPUSH
18313: LD_STRING D2c-Kurt-1
18315: PPUSH
18316: CALL_OW 88
// DialogueOff ;
18320: CALL_OW 7
// InGameOff ;
18324: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18328: LD_EXP 20
18332: PPUSH
18333: LD_INT 8
18335: PPUSH
18336: CALL_OW 113
// readyToEscape := 1 ;
18340: LD_ADDR_EXP 22
18344: PUSH
18345: LD_INT 1
18347: ST_TO_ADDR
// end else
18348: GO 18435
// begin DialogueOn ;
18350: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18354: LD_VAR 0 4
18358: PPUSH
18359: CALL_OW 258
18363: PUSH
18364: LD_INT 1
18366: EQUAL
18367: IFFALSE 18383
// Say ( tmp , D2c-Sol1-1 ) else
18369: LD_VAR 0 4
18373: PPUSH
18374: LD_STRING D2c-Sol1-1
18376: PPUSH
18377: CALL_OW 88
18381: GO 18395
// Say ( tmp , D2c-FSol1-1 ) ;
18383: LD_VAR 0 4
18387: PPUSH
18388: LD_STRING D2c-FSol1-1
18390: PPUSH
18391: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18395: LD_EXP 20
18399: PPUSH
18400: LD_STRING D2c-Kurt-1
18402: PPUSH
18403: CALL_OW 88
// DialogueOff ;
18407: CALL_OW 7
// InGameOff ;
18411: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18415: LD_EXP 20
18419: PPUSH
18420: LD_INT 8
18422: PPUSH
18423: CALL_OW 113
// readyToEscape := 1 ;
18427: LD_ADDR_EXP 22
18431: PUSH
18432: LD_INT 1
18434: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
18435: LD_ADDR_EXP 30
18439: PUSH
18440: LD_INT 0
18442: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18443: LD_INT 35
18445: PPUSH
18446: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
18450: LD_EXP 20
18454: PPUSH
18455: LD_INT 8
18457: PPUSH
18458: CALL_OW 308
18462: PUSH
18463: LD_EXP 22
18467: AND
18468: PUSH
18469: LD_EXP 20
18473: PPUSH
18474: CALL_OW 301
18478: OR
18479: IFFALSE 18443
// if IsDead ( Kurt ) then
18481: LD_EXP 20
18485: PPUSH
18486: CALL_OW 301
18490: IFFALSE 18494
// exit ;
18492: GO 18549
// RemoveUnit ( Kurt ) ;
18494: LD_EXP 20
18498: PPUSH
18499: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
18503: LD_EXP 20
18507: PPUSH
18508: LD_STRING Kurt
18510: PPUSH
18511: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
18515: LD_INT 1
18517: PPUSH
18518: LD_INT 2
18520: PPUSH
18521: CALL_OW 81
18525: PUSH
18526: LD_INT 0
18528: EQUAL
18529: IFFALSE 18541
// kurtStatus = 1 else
18531: LD_ADDR_EXP 21
18535: PUSH
18536: LD_INT 1
18538: ST_TO_ADDR
18539: GO 18549
// kurtStatus = 2 ;
18541: LD_ADDR_EXP 21
18545: PUSH
18546: LD_INT 2
18548: ST_TO_ADDR
// end ; end_of_file
18549: LD_VAR 0 1
18553: RET
// every 0 0$2 do
18554: GO 18556
18556: DISABLE
// begin enable ;
18557: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
18558: LD_INT 3
18560: PPUSH
18561: LD_INT 2
18563: PPUSH
18564: LD_INT 10
18566: PPUSH
18567: LD_EXP 32
18571: PPUSH
18572: CALL 8475 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
18576: LD_INT 3
18578: PPUSH
18579: LD_INT 12
18581: PPUSH
18582: LD_EXP 32
18586: PPUSH
18587: CALL 10078 0 3
// if disableHealAI = 0 then
18591: LD_EXP 34
18595: PUSH
18596: LD_INT 0
18598: EQUAL
18599: IFFALSE 18620
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
18601: LD_INT 3
18603: PPUSH
18604: LD_INT 9
18606: PPUSH
18607: LD_INT 10
18609: PPUSH
18610: LD_INT 32
18612: PUSH
18613: EMPTY
18614: LIST
18615: PPUSH
18616: CALL 8842 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18620: LD_INT 3
18622: PPUSH
18623: LD_INT 51
18625: PPUSH
18626: LD_INT 6
18628: PPUSH
18629: CALL 9531 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
18633: LD_INT 2
18635: PPUSH
18636: CALL_OW 303
18640: PUSH
18641: LD_INT 2
18643: PPUSH
18644: CALL_OW 255
18648: PUSH
18649: LD_INT 1
18651: EQUAL
18652: OR
18653: IFFALSE 18667
// DefendDepot ( 3 , rudepo ) else
18655: LD_INT 3
18657: PPUSH
18658: LD_INT 2
18660: PPUSH
18661: CALL 9358 0 2
18665: GO 18677
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18667: LD_INT 3
18669: PPUSH
18670: LD_INT 10
18672: PPUSH
18673: CALL 9649 0 2
// end ;
18677: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
18678: LD_INT 22
18680: PUSH
18681: LD_INT 3
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 21
18690: PUSH
18691: LD_INT 2
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 55
18700: PUSH
18701: EMPTY
18702: LIST
18703: PUSH
18704: LD_INT 3
18706: PUSH
18707: LD_INT 34
18709: PUSH
18710: LD_INT 51
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: PPUSH
18727: CALL_OW 69
18731: PUSH
18732: LD_INT 0
18734: EQUAL
18735: PUSH
18736: LD_INT 21
18738: PPUSH
18739: CALL_OW 255
18743: PUSH
18744: LD_INT 3
18746: EQUAL
18747: AND
18748: PUSH
18749: LD_INT 21
18751: PPUSH
18752: CALL_OW 302
18756: AND
18757: PUSH
18758: LD_INT 2
18760: PPUSH
18761: CALL_OW 255
18765: PUSH
18766: LD_INT 3
18768: EQUAL
18769: AND
18770: PUSH
18771: LD_INT 2
18773: PPUSH
18774: CALL_OW 302
18778: AND
18779: PUSH
18780: LD_INT 21
18782: PPUSH
18783: CALL_OW 313
18787: AND
18788: PUSH
18789: LD_EXP 48
18793: PUSH
18794: LD_INT 4
18796: PUSH
18797: LD_INT 5
18799: PUSH
18800: LD_INT 6
18802: PUSH
18803: LD_INT 6
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: PUSH
18812: LD_OWVAR 67
18816: ARRAY
18817: LESS
18818: AND
18819: IFFALSE 19040
18821: GO 18823
18823: DISABLE
// begin enable ;
18824: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18825: LD_INT 2
18827: PPUSH
18828: CALL_OW 274
18832: PPUSH
18833: LD_INT 1
18835: PPUSH
18836: LD_INT 2000
18838: PPUSH
18839: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18843: LD_INT 3
18845: PPUSH
18846: LD_INT 21
18848: PPUSH
18849: LD_INT 4
18851: PUSH
18852: LD_INT 5
18854: PUSH
18855: LD_INT 6
18857: PUSH
18858: LD_INT 6
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: PUSH
18867: LD_OWVAR 67
18871: ARRAY
18872: PUSH
18873: LD_EXP 48
18877: MINUS
18878: PPUSH
18879: LD_INT 43
18881: PUSH
18882: LD_INT 43
18884: PUSH
18885: LD_INT 44
18887: PUSH
18888: LD_INT 44
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 43
18899: PUSH
18900: LD_INT 43
18902: PUSH
18903: LD_INT 43
18905: PUSH
18906: LD_INT 44
18908: PUSH
18909: LD_INT 44
18911: PUSH
18912: LD_INT 46
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 43
18925: PUSH
18926: LD_INT 43
18928: PUSH
18929: LD_INT 43
18931: PUSH
18932: LD_INT 44
18934: PUSH
18935: LD_INT 44
18937: PUSH
18938: LD_INT 46
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 43
18951: PUSH
18952: LD_INT 43
18954: PUSH
18955: LD_INT 44
18957: PUSH
18958: LD_INT 46
18960: PUSH
18961: LD_INT 46
18963: PUSH
18964: LD_INT 46
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: PUSH
18981: LD_OWVAR 67
18985: ARRAY
18986: PPUSH
18987: LD_INT 1
18989: PPUSH
18990: LD_INT 1
18992: PPUSH
18993: LD_INT 22
18995: PUSH
18996: LD_INT 22
18998: PUSH
18999: LD_INT 24
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 1
19008: PPUSH
19009: LD_INT 2
19011: PPUSH
19012: CALL_OW 12
19016: ARRAY
19017: PUSH
19018: LD_INT 24
19020: PUSH
19021: LD_INT 24
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: PUSH
19030: LD_OWVAR 67
19034: ARRAY
19035: PPUSH
19036: CALL 8321 0 7
// end ;
19040: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
19041: LD_INT 17
19043: PPUSH
19044: CALL_OW 255
19048: PUSH
19049: LD_INT 3
19051: EQUAL
19052: PUSH
19053: LD_INT 17
19055: PPUSH
19056: CALL_OW 302
19060: AND
19061: PUSH
19062: LD_INT 2
19064: PPUSH
19065: CALL_OW 255
19069: PUSH
19070: LD_INT 3
19072: EQUAL
19073: AND
19074: PUSH
19075: LD_INT 2
19077: PPUSH
19078: CALL_OW 302
19082: AND
19083: PUSH
19084: LD_EXP 48
19088: PUSH
19089: LD_INT 4
19091: PUSH
19092: LD_INT 5
19094: PUSH
19095: LD_INT 6
19097: PUSH
19098: LD_INT 7
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: PUSH
19107: LD_OWVAR 67
19111: ARRAY
19112: LESS
19113: AND
19114: IFFALSE 19162
19116: GO 19118
19118: DISABLE
// begin enable ;
19119: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19120: LD_INT 17
19122: PPUSH
19123: LD_INT 22
19125: PPUSH
19126: LD_INT 1
19128: PPUSH
19129: LD_INT 1
19131: PPUSH
19132: LD_INT 42
19134: PUSH
19135: LD_INT 43
19137: PUSH
19138: LD_INT 44
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 1
19148: PPUSH
19149: LD_INT 3
19151: PPUSH
19152: CALL_OW 12
19156: ARRAY
19157: PPUSH
19158: CALL_OW 185
// end ;
19162: END
// every 2 2$0 do var i , j ;
19163: GO 19165
19165: DISABLE
19166: LD_INT 0
19168: PPUSH
19169: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19170: LD_INT 14700
19172: PUSH
19173: LD_INT 33600
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 1
19182: PPUSH
19183: LD_INT 2
19185: PPUSH
19186: CALL_OW 12
19190: ARRAY
19191: PPUSH
19192: CALL_OW 67
// disableHealAI = 1 ;
19196: LD_ADDR_EXP 34
19200: PUSH
19201: LD_INT 1
19203: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19204: LD_ADDR_VAR 0 1
19208: PUSH
19209: LD_INT 22
19211: PUSH
19212: LD_INT 3
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 25
19221: PUSH
19222: LD_INT 4
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PPUSH
19233: CALL_OW 69
19237: PUSH
19238: FOR_IN
19239: IFFALSE 19252
// ComExitBuilding ( i ) ;
19241: LD_VAR 0 1
19245: PPUSH
19246: CALL_OW 122
19250: GO 19238
19252: POP
19253: POP
// wait ( 0 0$1 ) ;
19254: LD_INT 35
19256: PPUSH
19257: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19261: LD_INT 35
19263: PPUSH
19264: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19268: LD_ADDR_VAR 0 1
19272: PUSH
19273: LD_INT 22
19275: PUSH
19276: LD_INT 3
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 25
19285: PUSH
19286: LD_INT 4
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PPUSH
19297: CALL_OW 69
19301: PUSH
19302: FOR_IN
19303: IFFALSE 19380
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19305: LD_ADDR_VAR 0 2
19309: PUSH
19310: LD_INT 17
19312: PPUSH
19313: LD_INT 22
19315: PUSH
19316: LD_INT 0
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 25
19325: PUSH
19326: LD_INT 12
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PPUSH
19337: CALL_OW 70
19341: PUSH
19342: FOR_IN
19343: IFFALSE 19376
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19345: LD_VAR 0 1
19349: PPUSH
19350: LD_VAR 0 2
19354: PPUSH
19355: CALL_OW 250
19359: PPUSH
19360: LD_VAR 0 2
19364: PPUSH
19365: CALL_OW 251
19369: PPUSH
19370: CALL_OW 191
19374: GO 19342
19376: POP
19377: POP
19378: GO 19302
19380: POP
19381: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19382: LD_INT 22
19384: PUSH
19385: LD_INT 3
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 25
19394: PUSH
19395: LD_INT 4
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PPUSH
19406: CALL_OW 69
19410: PUSH
19411: LD_INT 0
19413: EQUAL
19414: PUSH
19415: LD_EXP 33
19419: PUSH
19420: LD_INT 6
19422: PUSH
19423: LD_INT 7
19425: PUSH
19426: LD_INT 8
19428: PUSH
19429: LD_INT 8
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: PUSH
19438: LD_OWVAR 67
19442: ARRAY
19443: GREATEREQUAL
19444: OR
19445: PUSH
19446: LD_INT 17
19448: PPUSH
19449: LD_INT 22
19451: PUSH
19452: LD_INT 0
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 25
19461: PUSH
19462: LD_INT 12
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PPUSH
19473: CALL_OW 70
19477: PUSH
19478: LD_INT 0
19480: EQUAL
19481: OR
19482: IFFALSE 19261
// disableHealAI = 0 ;
19484: LD_ADDR_EXP 34
19488: PUSH
19489: LD_INT 0
19491: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19492: LD_ADDR_VAR 0 1
19496: PUSH
19497: LD_INT 22
19499: PUSH
19500: LD_INT 3
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 25
19509: PUSH
19510: LD_INT 12
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PPUSH
19521: CALL_OW 69
19525: PUSH
19526: FOR_IN
19527: IFFALSE 19543
// SetClass ( i , 16 ) ;
19529: LD_VAR 0 1
19533: PPUSH
19534: LD_INT 16
19536: PPUSH
19537: CALL_OW 336
19541: GO 19526
19543: POP
19544: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19545: LD_ADDR_VAR 0 1
19549: PUSH
19550: LD_INT 22
19552: PUSH
19553: LD_INT 3
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 25
19562: PUSH
19563: LD_INT 4
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PPUSH
19574: CALL_OW 69
19578: PUSH
19579: FOR_IN
19580: IFFALSE 19596
// ComEnterUnit ( i , rulab ) ;
19582: LD_VAR 0 1
19586: PPUSH
19587: LD_INT 32
19589: PPUSH
19590: CALL_OW 120
19594: GO 19579
19596: POP
19597: POP
// end ; end_of_file
19598: PPOPN 2
19600: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19601: LD_EXP 27
19605: PUSH
19606: LD_INT 0
19608: LESSEQUAL
19609: IFFALSE 19763
19611: GO 19613
19613: DISABLE
19614: LD_INT 0
19616: PPUSH
19617: PPUSH
19618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19619: LD_ADDR_VAR 0 2
19623: PUSH
19624: LD_INT 22
19626: PUSH
19627: LD_INT 1
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 21
19636: PUSH
19637: LD_INT 3
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 2
19646: PUSH
19647: LD_INT 30
19649: PUSH
19650: LD_INT 0
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 30
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: LIST
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: LIST
19676: PPUSH
19677: CALL_OW 69
19681: ST_TO_ADDR
// for i in tmp do
19682: LD_ADDR_VAR 0 1
19686: PUSH
19687: LD_VAR 0 2
19691: PUSH
19692: FOR_IN
19693: IFFALSE 19726
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19695: LD_ADDR_VAR 0 3
19699: PUSH
19700: LD_VAR 0 3
19704: PUSH
19705: LD_VAR 0 1
19709: PPUSH
19710: CALL_OW 274
19714: PPUSH
19715: LD_INT 1
19717: PPUSH
19718: CALL_OW 275
19722: PLUS
19723: ST_TO_ADDR
19724: GO 19692
19726: POP
19727: POP
// if yourCrates >= needCrates then
19728: LD_VAR 0 3
19732: PUSH
19733: LD_EXP 26
19737: GREATEREQUAL
19738: IFFALSE 19756
// FinishMission ( yourCrates , needCrates ) else
19740: LD_VAR 0 3
19744: PPUSH
19745: LD_EXP 26
19749: PPUSH
19750: CALL 19766 0 2
19754: GO 19763
// YouLost ( matmin ) ;
19756: LD_STRING matmin
19758: PPUSH
19759: CALL_OW 104
// end ;
19763: PPOPN 3
19765: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
19766: LD_INT 0
19768: PPUSH
19769: PPUSH
19770: PPUSH
19771: PPUSH
// if killCounter = 0 then
19772: LD_EXP 46
19776: PUSH
19777: LD_INT 0
19779: EQUAL
19780: IFFALSE 19789
// SetAchievement ( ACH_SURV ) ;
19782: LD_STRING ACH_SURV
19784: PPUSH
19785: CALL_OW 543
// if killCounter >= 8 or killCounter >= UnitFilter ( arrivals , [ f_ok ] ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] , [ f_ok ] ] ) < 5 then
19789: LD_EXP 46
19793: PUSH
19794: LD_INT 8
19796: GREATEREQUAL
19797: PUSH
19798: LD_EXP 46
19802: PUSH
19803: LD_EXP 45
19807: PPUSH
19808: LD_INT 50
19810: PUSH
19811: EMPTY
19812: LIST
19813: PPUSH
19814: CALL_OW 72
19818: GREATEREQUAL
19819: OR
19820: PUSH
19821: LD_INT 22
19823: PUSH
19824: LD_INT 1
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 21
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 23
19843: PUSH
19844: LD_INT 1
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 50
19853: PUSH
19854: EMPTY
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: PPUSH
19863: CALL_OW 69
19867: PUSH
19868: LD_INT 5
19870: LESS
19871: OR
19872: IFFALSE 19881
// YouLost ( Troops ) ;
19874: LD_STRING Troops
19876: PPUSH
19877: CALL_OW 104
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19881: LD_INT 22
19883: PUSH
19884: LD_INT 3
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 21
19893: PUSH
19894: LD_INT 3
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PPUSH
19905: CALL_OW 69
19909: PUSH
19910: LD_INT 0
19912: EQUAL
19913: IFFALSE 19929
// begin wait ( 3 ) ;
19915: LD_INT 3
19917: PPUSH
19918: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19922: LD_STRING ACH_BASEDESTROYER
19924: PPUSH
19925: CALL_OW 543
// end ; m1 := false ;
19929: LD_ADDR_VAR 0 4
19933: PUSH
19934: LD_INT 0
19936: ST_TO_ADDR
// m2 := false ;
19937: LD_ADDR_VAR 0 5
19941: PUSH
19942: LD_INT 0
19944: ST_TO_ADDR
// m3 := false ;
19945: LD_ADDR_VAR 0 6
19949: PUSH
19950: LD_INT 0
19952: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19953: LD_VAR 0 1
19957: PUSH
19958: LD_INT 100
19960: PUSH
19961: LD_INT 140
19963: PUSH
19964: LD_INT 180
19966: PUSH
19967: LD_INT 220
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: PUSH
19976: LD_OWVAR 67
19980: ARRAY
19981: PLUS
19982: PUSH
19983: LD_VAR 0 2
19987: GREATER
19988: IFFALSE 20020
// begin AddMedal ( cans , 1 ) ;
19990: LD_STRING cans
19992: PPUSH
19993: LD_INT 1
19995: PPUSH
19996: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
20000: LD_INT 1
20002: PPUSH
20003: LD_STRING 06_crates_1
20005: PPUSH
20006: CALL_OW 39
// m1 := true ;
20010: LD_ADDR_VAR 0 4
20014: PUSH
20015: LD_INT 1
20017: ST_TO_ADDR
// end else
20018: GO 20041
// begin AddMedal ( cans , - 1 ) ;
20020: LD_STRING cans
20022: PPUSH
20023: LD_INT 1
20025: NEG
20026: PPUSH
20027: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
20031: LD_INT 0
20033: PPUSH
20034: LD_STRING 06_crates_1
20036: PPUSH
20037: CALL_OW 39
// end ; if unitLost < 3 then
20041: LD_EXP 31
20045: PUSH
20046: LD_INT 3
20048: LESS
20049: IFFALSE 20071
// begin AddMedal ( people , 1 ) ;
20051: LD_STRING people
20053: PPUSH
20054: LD_INT 1
20056: PPUSH
20057: CALL_OW 101
// m2 := true ;
20061: LD_ADDR_VAR 0 5
20065: PUSH
20066: LD_INT 1
20068: ST_TO_ADDR
// end else
20069: GO 20082
// AddMedal ( people , - 1 ) ;
20071: LD_STRING people
20073: PPUSH
20074: LD_INT 1
20076: NEG
20077: PPUSH
20078: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
20082: LD_EXP 29
20086: PPUSH
20087: LD_STRING 06_remoteVehs_1
20089: PPUSH
20090: CALL_OW 39
// if remoteVehiclesBuild = 1 then
20094: LD_EXP 29
20098: PUSH
20099: LD_INT 1
20101: EQUAL
20102: IFFALSE 20124
// begin AddMedal ( remote , 1 ) ;
20104: LD_STRING remote
20106: PPUSH
20107: LD_INT 1
20109: PPUSH
20110: CALL_OW 101
// m3 := true ;
20114: LD_ADDR_VAR 0 6
20118: PUSH
20119: LD_INT 1
20121: ST_TO_ADDR
// end else
20122: GO 20164
// begin if GetTech ( 18 , 1 ) = state_enabled then
20124: LD_INT 18
20126: PPUSH
20127: LD_INT 1
20129: PPUSH
20130: CALL_OW 321
20134: PUSH
20135: LD_INT 1
20137: EQUAL
20138: IFFALSE 20153
// AddMedal ( remote , - 1 ) else
20140: LD_STRING remote
20142: PPUSH
20143: LD_INT 1
20145: NEG
20146: PPUSH
20147: CALL_OW 101
20151: GO 20164
// AddMedal ( remote , - 2 ) ;
20153: LD_STRING remote
20155: PPUSH
20156: LD_INT 2
20158: NEG
20159: PPUSH
20160: CALL_OW 101
// end ; if m1 and m2 and m3 then
20164: LD_VAR 0 4
20168: PUSH
20169: LD_VAR 0 5
20173: AND
20174: PUSH
20175: LD_VAR 0 6
20179: AND
20180: IFFALSE 20196
// begin wait ( 3 ) ;
20182: LD_INT 3
20184: PPUSH
20185: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
20189: LD_STRING ACH_ASPEED_6
20191: PPUSH
20192: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
20196: LD_OWVAR 67
20200: PUSH
20201: LD_INT 3
20203: GREATEREQUAL
20204: PUSH
20205: LD_VAR 0 4
20209: AND
20210: PUSH
20211: LD_VAR 0 5
20215: AND
20216: PUSH
20217: LD_VAR 0 6
20221: AND
20222: IFFALSE 20234
// SetAchievementEX ( ACH_AMER , 6 ) ;
20224: LD_STRING ACH_AMER
20226: PPUSH
20227: LD_INT 6
20229: PPUSH
20230: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
20234: LD_EXP 21
20238: PPUSH
20239: LD_STRING 06_KurtStatus_1
20241: PPUSH
20242: CALL_OW 39
// GiveMedals ( Main ) ;
20246: LD_STRING Main
20248: PPUSH
20249: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20253: LD_INT 22
20255: PUSH
20256: LD_INT 1
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 21
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 50
20275: PUSH
20276: EMPTY
20277: LIST
20278: PUSH
20279: LD_INT 2
20281: PUSH
20282: LD_INT 25
20284: PUSH
20285: LD_INT 1
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 25
20294: PUSH
20295: LD_INT 2
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 25
20304: PUSH
20305: LD_INT 3
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 25
20314: PUSH
20315: LD_INT 4
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: PPUSH
20335: CALL_OW 69
20339: PPUSH
20340: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20344: LD_EXP 1
20348: PPUSH
20349: LD_EXP 43
20353: PUSH
20354: LD_STRING JMM
20356: STR
20357: PPUSH
20358: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20362: LD_EXP 2
20366: PPUSH
20367: LD_EXP 43
20371: PUSH
20372: LD_STRING Lisa
20374: STR
20375: PPUSH
20376: CALL 7636 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20380: LD_EXP 3
20384: PPUSH
20385: LD_EXP 43
20389: PUSH
20390: LD_STRING Bobby
20392: STR
20393: PPUSH
20394: CALL 7636 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20398: LD_EXP 4
20402: PPUSH
20403: LD_EXP 43
20407: PUSH
20408: LD_STRING Cyrus
20410: STR
20411: PPUSH
20412: CALL 7636 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20416: LD_EXP 5
20420: PPUSH
20421: LD_EXP 43
20425: PUSH
20426: LD_STRING Frank
20428: STR
20429: PPUSH
20430: CALL 7636 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20434: LD_EXP 6
20438: PPUSH
20439: LD_EXP 43
20443: PUSH
20444: LD_STRING Brown
20446: STR
20447: PPUSH
20448: CALL 7636 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20452: LD_EXP 7
20456: PPUSH
20457: LD_EXP 43
20461: PUSH
20462: LD_STRING Donaldson
20464: STR
20465: PPUSH
20466: CALL 7636 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20470: LD_EXP 8
20474: PPUSH
20475: LD_EXP 43
20479: PUSH
20480: LD_STRING Gladstone
20482: STR
20483: PPUSH
20484: CALL 7636 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20488: LD_EXP 9
20492: PPUSH
20493: LD_EXP 43
20497: PUSH
20498: LD_STRING Denis
20500: STR
20501: PPUSH
20502: CALL 7636 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20506: LD_EXP 16
20510: PPUSH
20511: LD_EXP 43
20515: PUSH
20516: LD_STRING Joan
20518: STR
20519: PPUSH
20520: CALL 7636 0 2
// if IsLive ( Mike ) then
20524: LD_EXP 11
20528: PPUSH
20529: CALL_OW 300
20533: IFFALSE 20553
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
20535: LD_EXP 11
20539: PPUSH
20540: LD_EXP 43
20544: PUSH
20545: LD_STRING Mike
20547: STR
20548: PPUSH
20549: CALL_OW 38
// if IsLive ( Joan ) then
20553: LD_EXP 16
20557: PPUSH
20558: CALL_OW 300
20562: IFFALSE 20576
// SaveCharacters ( Joan , Joan ) ;
20564: LD_EXP 16
20568: PPUSH
20569: LD_STRING Joan
20571: PPUSH
20572: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
20576: LD_EXP 17
20580: PPUSH
20581: LD_STRING 06_JoanStatus_1
20583: PPUSH
20584: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20588: LD_INT 50
20590: PUSH
20591: EMPTY
20592: LIST
20593: PUSH
20594: LD_INT 22
20596: PUSH
20597: LD_INT 1
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 21
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 2
20616: PUSH
20617: LD_INT 25
20619: PUSH
20620: LD_INT 1
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 25
20629: PUSH
20630: LD_INT 2
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 25
20639: PUSH
20640: LD_INT 3
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 25
20649: PUSH
20650: LD_INT 4
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: PPUSH
20670: CALL_OW 69
20674: PUSH
20675: LD_EXP 1
20679: PUSH
20680: LD_EXP 2
20684: PUSH
20685: LD_EXP 3
20689: PUSH
20690: LD_EXP 4
20694: PUSH
20695: LD_EXP 5
20699: PUSH
20700: LD_EXP 6
20704: PUSH
20705: LD_EXP 7
20709: PUSH
20710: LD_EXP 8
20714: PUSH
20715: LD_EXP 9
20719: PUSH
20720: LD_EXP 16
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: DIFF
20737: PPUSH
20738: LD_STRING 06_other_survivors
20740: PPUSH
20741: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20745: LD_INT 50
20747: PUSH
20748: EMPTY
20749: LIST
20750: PUSH
20751: LD_INT 22
20753: PUSH
20754: LD_INT 1
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 21
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 2
20773: PUSH
20774: LD_INT 25
20776: PUSH
20777: LD_INT 12
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 25
20786: PUSH
20787: LD_INT 16
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: LIST
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: PPUSH
20805: CALL_OW 69
20809: PPUSH
20810: LD_STRING 06_other_apemans
20812: PPUSH
20813: CALL_OW 38
// YouWin ;
20817: CALL_OW 103
// end ; end_of_file
20821: LD_VAR 0 3
20825: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
20826: LD_EXP 48
20830: PUSH
20831: LD_OWVAR 1
20835: PUSH
20836: LD_INT 23100
20838: PUSH
20839: LD_INT 21000
20841: PUSH
20842: LD_INT 18900
20844: PUSH
20845: LD_INT 16800
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: PUSH
20854: LD_OWVAR 67
20858: ARRAY
20859: GREATER
20860: AND
20861: IFFALSE 21208
20863: GO 20865
20865: DISABLE
20866: LD_INT 0
20868: PPUSH
20869: PPUSH
20870: PPUSH
20871: PPUSH
// begin enable ;
20872: ENABLE
// for i in ruAttackers do
20873: LD_ADDR_VAR 0 1
20877: PUSH
20878: LD_EXP 48
20882: PUSH
20883: FOR_IN
20884: IFFALSE 21206
// begin if not IsDrivenBy ( i ) then
20886: LD_VAR 0 1
20890: PPUSH
20891: CALL_OW 311
20895: NOT
20896: IFFALSE 20900
// continue ;
20898: GO 20883
// if i mod 2 = 0 then
20900: LD_VAR 0 1
20904: PUSH
20905: LD_INT 2
20907: MOD
20908: PUSH
20909: LD_INT 0
20911: EQUAL
20912: IFFALSE 20967
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] ] else
20914: LD_ADDR_VAR 0 3
20918: PUSH
20919: LD_INT 91
20921: PUSH
20922: LD_INT 52
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 82
20931: PUSH
20932: LD_INT 34
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 90
20941: PUSH
20942: LD_INT 26
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 86
20951: PUSH
20952: LD_INT 16
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: ST_TO_ADDR
20965: GO 21062
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 44 , 42 ] , [ 33 , 34 ] , [ 29 , 23 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20967: LD_ADDR_VAR 0 3
20971: PUSH
20972: LD_INT 91
20974: PUSH
20975: LD_INT 52
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 68
20984: PUSH
20985: LD_INT 46
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 48
20994: PUSH
20995: LD_INT 43
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 44
21004: PUSH
21005: LD_INT 42
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 33
21014: PUSH
21015: LD_INT 34
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 29
21024: PUSH
21025: LD_INT 23
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 30
21034: PUSH
21035: LD_INT 19
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 38
21044: PUSH
21045: LD_INT 16
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
21062: LD_VAR 0 1
21066: PPUSH
21067: CALL_OW 256
21071: PUSH
21072: LD_INT 1000
21074: EQUAL
21075: IFFALSE 21093
// AgressiveMove ( i , path ) else
21077: LD_VAR 0 1
21081: PPUSH
21082: LD_VAR 0 3
21086: PPUSH
21087: CALL 82984 0 2
21091: GO 21204
// if GetLives ( i ) < 650 then
21093: LD_VAR 0 1
21097: PPUSH
21098: CALL_OW 256
21102: PUSH
21103: LD_INT 650
21105: LESS
21106: IFFALSE 21204
// begin if not IsInArea ( i , russianRepairArea ) then
21108: LD_VAR 0 1
21112: PPUSH
21113: LD_INT 12
21115: PPUSH
21116: CALL_OW 308
21120: NOT
21121: IFFALSE 21190
// begin SetTag ( i , 0 ) ;
21123: LD_VAR 0 1
21127: PPUSH
21128: LD_INT 0
21130: PPUSH
21131: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
21135: LD_VAR 0 1
21139: PPUSH
21140: CALL_OW 261
21144: PUSH
21145: LD_INT 50
21147: LESS
21148: PUSH
21149: LD_INT 21
21151: PPUSH
21152: CALL_OW 302
21156: AND
21157: IFFALSE 21173
// ComMoveUnit ( i , rufab ) else
21159: LD_VAR 0 1
21163: PPUSH
21164: LD_INT 21
21166: PPUSH
21167: CALL_OW 112
21171: GO 21188
// ComMoveXY ( i , 121 , 99 ) ;
21173: LD_VAR 0 1
21177: PPUSH
21178: LD_INT 121
21180: PPUSH
21181: LD_INT 99
21183: PPUSH
21184: CALL_OW 111
// end else
21188: GO 21204
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
21190: LD_VAR 0 1
21194: PPUSH
21195: CALL_OW 311
21199: PPUSH
21200: CALL 82080 0 1
// end ; end ;
21204: GO 20883
21206: POP
21207: POP
// end ;
21208: PPOPN 4
21210: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
21211: LD_INT 0
21213: PPUSH
21214: PPUSH
21215: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
21216: LD_ADDR_VAR 0 2
21220: PUSH
21221: DOUBLE
21222: LD_INT 1
21224: DEC
21225: ST_TO_ADDR
21226: LD_INT 4
21228: PUSH
21229: LD_INT 5
21231: PUSH
21232: LD_INT 6
21234: PUSH
21235: LD_INT 6
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: PUSH
21244: LD_OWVAR 67
21248: ARRAY
21249: PUSH
21250: FOR_TO
21251: IFFALSE 21426
// begin uc_side := 3 ;
21253: LD_ADDR_OWVAR 20
21257: PUSH
21258: LD_INT 3
21260: ST_TO_ADDR
// uc_nation := 3 ;
21261: LD_ADDR_OWVAR 21
21265: PUSH
21266: LD_INT 3
21268: ST_TO_ADDR
// InitHC_All ( ) ;
21269: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
21273: LD_INT 0
21275: PPUSH
21276: LD_INT 4
21278: PUSH
21279: LD_INT 5
21281: PUSH
21282: LD_INT 6
21284: PUSH
21285: LD_INT 6
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: PUSH
21294: LD_OWVAR 67
21298: ARRAY
21299: PPUSH
21300: CALL_OW 381
// un := CreateHuman ;
21304: LD_ADDR_VAR 0 3
21308: PUSH
21309: CALL_OW 44
21313: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
21314: LD_VAR 0 3
21318: PPUSH
21319: LD_INT 127
21321: PPUSH
21322: LD_INT 62
21324: PPUSH
21325: LD_INT 3
21327: PPUSH
21328: LD_INT 0
21330: PPUSH
21331: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
21335: LD_ADDR_EXP 49
21339: PUSH
21340: LD_EXP 49
21344: PPUSH
21345: LD_EXP 49
21349: PUSH
21350: LD_INT 1
21352: PLUS
21353: PPUSH
21354: LD_VAR 0 3
21358: PPUSH
21359: CALL_OW 1
21363: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
21364: LD_VAR 0 3
21368: PPUSH
21369: LD_INT 83
21371: PPUSH
21372: LD_INT 49
21374: PPUSH
21375: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
21379: LD_VAR 0 3
21383: PPUSH
21384: LD_INT 49
21386: PPUSH
21387: LD_INT 43
21389: PPUSH
21390: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
21394: LD_VAR 0 3
21398: PPUSH
21399: LD_INT 31
21401: PPUSH
21402: LD_INT 15
21404: PPUSH
21405: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
21409: LD_VAR 0 3
21413: PPUSH
21414: LD_INT 63
21416: PPUSH
21417: LD_INT 9
21419: PPUSH
21420: CALL_OW 174
// end ;
21424: GO 21250
21426: POP
21427: POP
// end ; end_of_file
21428: LD_VAR 0 1
21432: RET
// export function CreateNature ; var i , un ; begin
21433: LD_INT 0
21435: PPUSH
21436: PPUSH
21437: PPUSH
// for i := 1 to Difficulty + 2 do
21438: LD_ADDR_VAR 0 2
21442: PUSH
21443: DOUBLE
21444: LD_INT 1
21446: DEC
21447: ST_TO_ADDR
21448: LD_OWVAR 67
21452: PUSH
21453: LD_INT 2
21455: PLUS
21456: PUSH
21457: FOR_TO
21458: IFFALSE 21567
// begin hc_sex := sex_male ;
21460: LD_ADDR_OWVAR 27
21464: PUSH
21465: LD_INT 1
21467: ST_TO_ADDR
// uc_side := 0 ;
21468: LD_ADDR_OWVAR 20
21472: PUSH
21473: LD_INT 0
21475: ST_TO_ADDR
// uc_nation := nation_nature ;
21476: LD_ADDR_OWVAR 21
21480: PUSH
21481: LD_INT 0
21483: ST_TO_ADDR
// hc_class := class_tiger ;
21484: LD_ADDR_OWVAR 28
21488: PUSH
21489: LD_INT 14
21491: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21492: LD_ADDR_OWVAR 31
21496: PUSH
21497: LD_EXP 36
21501: PUSH
21502: LD_INT 0
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: LD_INT 0
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
21517: LD_ADDR_OWVAR 35
21521: PUSH
21522: LD_INT 5
21524: NEG
21525: PPUSH
21526: LD_INT 5
21528: PPUSH
21529: CALL_OW 12
21533: PUSH
21534: LD_OWVAR 67
21538: MUL
21539: ST_TO_ADDR
// un := CreateHuman ;
21540: LD_ADDR_VAR 0 3
21544: PUSH
21545: CALL_OW 44
21549: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21550: LD_VAR 0 3
21554: PPUSH
21555: LD_INT 18
21557: PPUSH
21558: LD_INT 0
21560: PPUSH
21561: CALL_OW 49
// end ;
21565: GO 21457
21567: POP
21568: POP
// for i = 1 to rand ( 3 , 4 ) do
21569: LD_ADDR_VAR 0 2
21573: PUSH
21574: DOUBLE
21575: LD_INT 1
21577: DEC
21578: ST_TO_ADDR
21579: LD_INT 3
21581: PPUSH
21582: LD_INT 4
21584: PPUSH
21585: CALL_OW 12
21589: PUSH
21590: FOR_TO
21591: IFFALSE 21661
// begin hc_class := class_phororhacos ;
21593: LD_ADDR_OWVAR 28
21597: PUSH
21598: LD_INT 18
21600: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21601: LD_ADDR_OWVAR 31
21605: PUSH
21606: LD_EXP 36
21610: PUSH
21611: LD_INT 0
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: ST_TO_ADDR
// hc_agressivity := 0 ;
21626: LD_ADDR_OWVAR 35
21630: PUSH
21631: LD_INT 0
21633: ST_TO_ADDR
// un = CreateHuman ;
21634: LD_ADDR_VAR 0 3
21638: PUSH
21639: CALL_OW 44
21643: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21644: LD_VAR 0 3
21648: PPUSH
21649: LD_INT 18
21651: PPUSH
21652: LD_INT 0
21654: PPUSH
21655: CALL_OW 49
// end ;
21659: GO 21590
21661: POP
21662: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
21663: LD_ADDR_VAR 0 2
21667: PUSH
21668: DOUBLE
21669: LD_INT 1
21671: DEC
21672: ST_TO_ADDR
21673: LD_INT 3
21675: PUSH
21676: LD_INT 3
21678: PUSH
21679: LD_INT 4
21681: PUSH
21682: LD_INT 5
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: PUSH
21691: LD_OWVAR 67
21695: ARRAY
21696: PUSH
21697: FOR_TO
21698: IFFALSE 21839
// begin hc_class := class_apeman ;
21700: LD_ADDR_OWVAR 28
21704: PUSH
21705: LD_INT 12
21707: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21708: LD_ADDR_OWVAR 31
21712: PUSH
21713: LD_INT 2
21715: PPUSH
21716: LD_INT 5
21718: PPUSH
21719: CALL_OW 12
21723: PUSH
21724: LD_INT 0
21726: PPUSH
21727: LD_INT 2
21729: PPUSH
21730: CALL_OW 12
21734: PUSH
21735: LD_INT 0
21737: PUSH
21738: LD_INT 0
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: ST_TO_ADDR
// hc_agressivity := [ rand ( - 5 , 10 ) , rand ( - 10 , 20 ) , rand ( - 20 , 25 ) , rand ( - 30 , 30 ) ] [ Difficulty ] ;
21747: LD_ADDR_OWVAR 35
21751: PUSH
21752: LD_INT 5
21754: NEG
21755: PPUSH
21756: LD_INT 10
21758: PPUSH
21759: CALL_OW 12
21763: PUSH
21764: LD_INT 10
21766: NEG
21767: PPUSH
21768: LD_INT 20
21770: PPUSH
21771: CALL_OW 12
21775: PUSH
21776: LD_INT 20
21778: NEG
21779: PPUSH
21780: LD_INT 25
21782: PPUSH
21783: CALL_OW 12
21787: PUSH
21788: LD_INT 30
21790: NEG
21791: PPUSH
21792: LD_INT 30
21794: PPUSH
21795: CALL_OW 12
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: PUSH
21806: LD_OWVAR 67
21810: ARRAY
21811: ST_TO_ADDR
// un := CreateHuman ;
21812: LD_ADDR_VAR 0 3
21816: PUSH
21817: CALL_OW 44
21821: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21822: LD_VAR 0 3
21826: PPUSH
21827: LD_INT 19
21829: PPUSH
21830: LD_INT 0
21832: PPUSH
21833: CALL_OW 49
// end ;
21837: GO 21697
21839: POP
21840: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
21841: LD_ADDR_VAR 0 2
21845: PUSH
21846: DOUBLE
21847: LD_INT 1
21849: DEC
21850: ST_TO_ADDR
21851: LD_INT 3
21853: PUSH
21854: LD_INT 4
21856: PUSH
21857: LD_INT 5
21859: PUSH
21860: LD_INT 6
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: PUSH
21869: LD_OWVAR 67
21873: ARRAY
21874: PUSH
21875: FOR_TO
21876: IFFALSE 21969
// begin hc_class := class_apeman ;
21878: LD_ADDR_OWVAR 28
21882: PUSH
21883: LD_INT 12
21885: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21886: LD_ADDR_OWVAR 31
21890: PUSH
21891: LD_INT 2
21893: PPUSH
21894: LD_INT 5
21896: PPUSH
21897: CALL_OW 12
21901: PUSH
21902: LD_INT 0
21904: PPUSH
21905: LD_INT 2
21907: PPUSH
21908: CALL_OW 12
21912: PUSH
21913: LD_INT 0
21915: PUSH
21916: LD_INT 0
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: ST_TO_ADDR
// hc_agressivity := rand ( - 15 , 15 ) ;
21925: LD_ADDR_OWVAR 35
21929: PUSH
21930: LD_INT 15
21932: NEG
21933: PPUSH
21934: LD_INT 15
21936: PPUSH
21937: CALL_OW 12
21941: ST_TO_ADDR
// un = CreateHuman ;
21942: LD_ADDR_VAR 0 3
21946: PUSH
21947: CALL_OW 44
21951: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21952: LD_VAR 0 3
21956: PPUSH
21957: LD_INT 20
21959: PPUSH
21960: LD_INT 0
21962: PPUSH
21963: CALL_OW 49
// end ;
21967: GO 21875
21969: POP
21970: POP
// end ; end_of_file end_of_file
21971: LD_VAR 0 1
21975: RET
// export globalGameSaveCounter ; every 0 0$1 do
21976: GO 21978
21978: DISABLE
// begin enable ;
21979: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21980: LD_STRING updateTimer(
21982: PUSH
21983: LD_OWVAR 1
21987: STR
21988: PUSH
21989: LD_STRING );
21991: STR
21992: PPUSH
21993: CALL_OW 559
// end ;
21997: END
// every 0 0$1 do
21998: GO 22000
22000: DISABLE
// begin globalGameSaveCounter := 0 ;
22001: LD_ADDR_EXP 50
22005: PUSH
22006: LD_INT 0
22008: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
22009: LD_STRING setGameSaveCounter(0)
22011: PPUSH
22012: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
22016: LD_STRING initStreamRollete();
22018: PPUSH
22019: CALL_OW 559
// InitStreamMode ;
22023: CALL 23366 0 0
// DefineStreamItems ( false ) ;
22027: LD_INT 0
22029: PPUSH
22030: CALL 23830 0 1
// end ;
22034: END
// export function SOS_MapStart ( ) ; begin
22035: LD_INT 0
22037: PPUSH
// if streamModeActive then
22038: LD_EXP 51
22042: IFFALSE 22051
// DefineStreamItems ( true ) ;
22044: LD_INT 1
22046: PPUSH
22047: CALL 23830 0 1
// UpdateLuaVariables ( ) ;
22051: CALL 22068 0 0
// UpdateFactoryWaypoints ( ) ;
22055: CALL 36699 0 0
// UpdateWarehouseGatheringPoints ( ) ;
22059: CALL 36956 0 0
// end ;
22063: LD_VAR 0 1
22067: RET
// function UpdateLuaVariables ( ) ; begin
22068: LD_INT 0
22070: PPUSH
// if globalGameSaveCounter then
22071: LD_EXP 50
22075: IFFALSE 22109
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
22077: LD_ADDR_EXP 50
22081: PUSH
22082: LD_EXP 50
22086: PPUSH
22087: CALL 81741 0 1
22091: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22092: LD_STRING setGameSaveCounter(
22094: PUSH
22095: LD_EXP 50
22099: STR
22100: PUSH
22101: LD_STRING )
22103: STR
22104: PPUSH
22105: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
22109: LD_STRING setGameDifficulty(
22111: PUSH
22112: LD_OWVAR 67
22116: STR
22117: PUSH
22118: LD_STRING )
22120: STR
22121: PPUSH
22122: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
22126: LD_STRING displayDifficulty(
22128: PUSH
22129: LD_OWVAR 67
22133: STR
22134: PUSH
22135: LD_STRING )
22137: STR
22138: PPUSH
22139: CALL_OW 559
// end ;
22143: LD_VAR 0 1
22147: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22148: LD_INT 0
22150: PPUSH
// if p2 = stream_mode then
22151: LD_VAR 0 2
22155: PUSH
22156: LD_INT 100
22158: EQUAL
22159: IFFALSE 23162
// begin if not StreamModeActive then
22161: LD_EXP 51
22165: NOT
22166: IFFALSE 22176
// StreamModeActive := true ;
22168: LD_ADDR_EXP 51
22172: PUSH
22173: LD_INT 1
22175: ST_TO_ADDR
// if p3 = 0 then
22176: LD_VAR 0 3
22180: PUSH
22181: LD_INT 0
22183: EQUAL
22184: IFFALSE 22190
// InitStreamMode ;
22186: CALL 23366 0 0
// if p3 = 1 then
22190: LD_VAR 0 3
22194: PUSH
22195: LD_INT 1
22197: EQUAL
22198: IFFALSE 22208
// sRocket := true ;
22200: LD_ADDR_EXP 56
22204: PUSH
22205: LD_INT 1
22207: ST_TO_ADDR
// if p3 = 2 then
22208: LD_VAR 0 3
22212: PUSH
22213: LD_INT 2
22215: EQUAL
22216: IFFALSE 22226
// sSpeed := true ;
22218: LD_ADDR_EXP 55
22222: PUSH
22223: LD_INT 1
22225: ST_TO_ADDR
// if p3 = 3 then
22226: LD_VAR 0 3
22230: PUSH
22231: LD_INT 3
22233: EQUAL
22234: IFFALSE 22244
// sEngine := true ;
22236: LD_ADDR_EXP 57
22240: PUSH
22241: LD_INT 1
22243: ST_TO_ADDR
// if p3 = 4 then
22244: LD_VAR 0 3
22248: PUSH
22249: LD_INT 4
22251: EQUAL
22252: IFFALSE 22262
// sSpec := true ;
22254: LD_ADDR_EXP 54
22258: PUSH
22259: LD_INT 1
22261: ST_TO_ADDR
// if p3 = 5 then
22262: LD_VAR 0 3
22266: PUSH
22267: LD_INT 5
22269: EQUAL
22270: IFFALSE 22280
// sLevel := true ;
22272: LD_ADDR_EXP 58
22276: PUSH
22277: LD_INT 1
22279: ST_TO_ADDR
// if p3 = 6 then
22280: LD_VAR 0 3
22284: PUSH
22285: LD_INT 6
22287: EQUAL
22288: IFFALSE 22298
// sArmoury := true ;
22290: LD_ADDR_EXP 59
22294: PUSH
22295: LD_INT 1
22297: ST_TO_ADDR
// if p3 = 7 then
22298: LD_VAR 0 3
22302: PUSH
22303: LD_INT 7
22305: EQUAL
22306: IFFALSE 22316
// sRadar := true ;
22308: LD_ADDR_EXP 60
22312: PUSH
22313: LD_INT 1
22315: ST_TO_ADDR
// if p3 = 8 then
22316: LD_VAR 0 3
22320: PUSH
22321: LD_INT 8
22323: EQUAL
22324: IFFALSE 22334
// sBunker := true ;
22326: LD_ADDR_EXP 61
22330: PUSH
22331: LD_INT 1
22333: ST_TO_ADDR
// if p3 = 9 then
22334: LD_VAR 0 3
22338: PUSH
22339: LD_INT 9
22341: EQUAL
22342: IFFALSE 22352
// sHack := true ;
22344: LD_ADDR_EXP 62
22348: PUSH
22349: LD_INT 1
22351: ST_TO_ADDR
// if p3 = 10 then
22352: LD_VAR 0 3
22356: PUSH
22357: LD_INT 10
22359: EQUAL
22360: IFFALSE 22370
// sFire := true ;
22362: LD_ADDR_EXP 63
22366: PUSH
22367: LD_INT 1
22369: ST_TO_ADDR
// if p3 = 11 then
22370: LD_VAR 0 3
22374: PUSH
22375: LD_INT 11
22377: EQUAL
22378: IFFALSE 22388
// sRefresh := true ;
22380: LD_ADDR_EXP 64
22384: PUSH
22385: LD_INT 1
22387: ST_TO_ADDR
// if p3 = 12 then
22388: LD_VAR 0 3
22392: PUSH
22393: LD_INT 12
22395: EQUAL
22396: IFFALSE 22406
// sExp := true ;
22398: LD_ADDR_EXP 65
22402: PUSH
22403: LD_INT 1
22405: ST_TO_ADDR
// if p3 = 13 then
22406: LD_VAR 0 3
22410: PUSH
22411: LD_INT 13
22413: EQUAL
22414: IFFALSE 22424
// sDepot := true ;
22416: LD_ADDR_EXP 66
22420: PUSH
22421: LD_INT 1
22423: ST_TO_ADDR
// if p3 = 14 then
22424: LD_VAR 0 3
22428: PUSH
22429: LD_INT 14
22431: EQUAL
22432: IFFALSE 22442
// sFlag := true ;
22434: LD_ADDR_EXP 67
22438: PUSH
22439: LD_INT 1
22441: ST_TO_ADDR
// if p3 = 15 then
22442: LD_VAR 0 3
22446: PUSH
22447: LD_INT 15
22449: EQUAL
22450: IFFALSE 22460
// sKamikadze := true ;
22452: LD_ADDR_EXP 75
22456: PUSH
22457: LD_INT 1
22459: ST_TO_ADDR
// if p3 = 16 then
22460: LD_VAR 0 3
22464: PUSH
22465: LD_INT 16
22467: EQUAL
22468: IFFALSE 22478
// sTroll := true ;
22470: LD_ADDR_EXP 76
22474: PUSH
22475: LD_INT 1
22477: ST_TO_ADDR
// if p3 = 17 then
22478: LD_VAR 0 3
22482: PUSH
22483: LD_INT 17
22485: EQUAL
22486: IFFALSE 22496
// sSlow := true ;
22488: LD_ADDR_EXP 77
22492: PUSH
22493: LD_INT 1
22495: ST_TO_ADDR
// if p3 = 18 then
22496: LD_VAR 0 3
22500: PUSH
22501: LD_INT 18
22503: EQUAL
22504: IFFALSE 22514
// sLack := true ;
22506: LD_ADDR_EXP 78
22510: PUSH
22511: LD_INT 1
22513: ST_TO_ADDR
// if p3 = 19 then
22514: LD_VAR 0 3
22518: PUSH
22519: LD_INT 19
22521: EQUAL
22522: IFFALSE 22532
// sTank := true ;
22524: LD_ADDR_EXP 80
22528: PUSH
22529: LD_INT 1
22531: ST_TO_ADDR
// if p3 = 20 then
22532: LD_VAR 0 3
22536: PUSH
22537: LD_INT 20
22539: EQUAL
22540: IFFALSE 22550
// sRemote := true ;
22542: LD_ADDR_EXP 81
22546: PUSH
22547: LD_INT 1
22549: ST_TO_ADDR
// if p3 = 21 then
22550: LD_VAR 0 3
22554: PUSH
22555: LD_INT 21
22557: EQUAL
22558: IFFALSE 22568
// sPowell := true ;
22560: LD_ADDR_EXP 82
22564: PUSH
22565: LD_INT 1
22567: ST_TO_ADDR
// if p3 = 22 then
22568: LD_VAR 0 3
22572: PUSH
22573: LD_INT 22
22575: EQUAL
22576: IFFALSE 22586
// sTeleport := true ;
22578: LD_ADDR_EXP 85
22582: PUSH
22583: LD_INT 1
22585: ST_TO_ADDR
// if p3 = 23 then
22586: LD_VAR 0 3
22590: PUSH
22591: LD_INT 23
22593: EQUAL
22594: IFFALSE 22604
// sOilTower := true ;
22596: LD_ADDR_EXP 87
22600: PUSH
22601: LD_INT 1
22603: ST_TO_ADDR
// if p3 = 24 then
22604: LD_VAR 0 3
22608: PUSH
22609: LD_INT 24
22611: EQUAL
22612: IFFALSE 22622
// sShovel := true ;
22614: LD_ADDR_EXP 88
22618: PUSH
22619: LD_INT 1
22621: ST_TO_ADDR
// if p3 = 25 then
22622: LD_VAR 0 3
22626: PUSH
22627: LD_INT 25
22629: EQUAL
22630: IFFALSE 22640
// sSheik := true ;
22632: LD_ADDR_EXP 89
22636: PUSH
22637: LD_INT 1
22639: ST_TO_ADDR
// if p3 = 26 then
22640: LD_VAR 0 3
22644: PUSH
22645: LD_INT 26
22647: EQUAL
22648: IFFALSE 22658
// sEarthquake := true ;
22650: LD_ADDR_EXP 91
22654: PUSH
22655: LD_INT 1
22657: ST_TO_ADDR
// if p3 = 27 then
22658: LD_VAR 0 3
22662: PUSH
22663: LD_INT 27
22665: EQUAL
22666: IFFALSE 22676
// sAI := true ;
22668: LD_ADDR_EXP 92
22672: PUSH
22673: LD_INT 1
22675: ST_TO_ADDR
// if p3 = 28 then
22676: LD_VAR 0 3
22680: PUSH
22681: LD_INT 28
22683: EQUAL
22684: IFFALSE 22694
// sCargo := true ;
22686: LD_ADDR_EXP 95
22690: PUSH
22691: LD_INT 1
22693: ST_TO_ADDR
// if p3 = 29 then
22694: LD_VAR 0 3
22698: PUSH
22699: LD_INT 29
22701: EQUAL
22702: IFFALSE 22712
// sDLaser := true ;
22704: LD_ADDR_EXP 96
22708: PUSH
22709: LD_INT 1
22711: ST_TO_ADDR
// if p3 = 30 then
22712: LD_VAR 0 3
22716: PUSH
22717: LD_INT 30
22719: EQUAL
22720: IFFALSE 22730
// sExchange := true ;
22722: LD_ADDR_EXP 97
22726: PUSH
22727: LD_INT 1
22729: ST_TO_ADDR
// if p3 = 31 then
22730: LD_VAR 0 3
22734: PUSH
22735: LD_INT 31
22737: EQUAL
22738: IFFALSE 22748
// sFac := true ;
22740: LD_ADDR_EXP 98
22744: PUSH
22745: LD_INT 1
22747: ST_TO_ADDR
// if p3 = 32 then
22748: LD_VAR 0 3
22752: PUSH
22753: LD_INT 32
22755: EQUAL
22756: IFFALSE 22766
// sPower := true ;
22758: LD_ADDR_EXP 99
22762: PUSH
22763: LD_INT 1
22765: ST_TO_ADDR
// if p3 = 33 then
22766: LD_VAR 0 3
22770: PUSH
22771: LD_INT 33
22773: EQUAL
22774: IFFALSE 22784
// sRandom := true ;
22776: LD_ADDR_EXP 100
22780: PUSH
22781: LD_INT 1
22783: ST_TO_ADDR
// if p3 = 34 then
22784: LD_VAR 0 3
22788: PUSH
22789: LD_INT 34
22791: EQUAL
22792: IFFALSE 22802
// sShield := true ;
22794: LD_ADDR_EXP 101
22798: PUSH
22799: LD_INT 1
22801: ST_TO_ADDR
// if p3 = 35 then
22802: LD_VAR 0 3
22806: PUSH
22807: LD_INT 35
22809: EQUAL
22810: IFFALSE 22820
// sTime := true ;
22812: LD_ADDR_EXP 102
22816: PUSH
22817: LD_INT 1
22819: ST_TO_ADDR
// if p3 = 36 then
22820: LD_VAR 0 3
22824: PUSH
22825: LD_INT 36
22827: EQUAL
22828: IFFALSE 22838
// sTools := true ;
22830: LD_ADDR_EXP 103
22834: PUSH
22835: LD_INT 1
22837: ST_TO_ADDR
// if p3 = 101 then
22838: LD_VAR 0 3
22842: PUSH
22843: LD_INT 101
22845: EQUAL
22846: IFFALSE 22856
// sSold := true ;
22848: LD_ADDR_EXP 68
22852: PUSH
22853: LD_INT 1
22855: ST_TO_ADDR
// if p3 = 102 then
22856: LD_VAR 0 3
22860: PUSH
22861: LD_INT 102
22863: EQUAL
22864: IFFALSE 22874
// sDiff := true ;
22866: LD_ADDR_EXP 69
22870: PUSH
22871: LD_INT 1
22873: ST_TO_ADDR
// if p3 = 103 then
22874: LD_VAR 0 3
22878: PUSH
22879: LD_INT 103
22881: EQUAL
22882: IFFALSE 22892
// sFog := true ;
22884: LD_ADDR_EXP 72
22888: PUSH
22889: LD_INT 1
22891: ST_TO_ADDR
// if p3 = 104 then
22892: LD_VAR 0 3
22896: PUSH
22897: LD_INT 104
22899: EQUAL
22900: IFFALSE 22910
// sReset := true ;
22902: LD_ADDR_EXP 73
22906: PUSH
22907: LD_INT 1
22909: ST_TO_ADDR
// if p3 = 105 then
22910: LD_VAR 0 3
22914: PUSH
22915: LD_INT 105
22917: EQUAL
22918: IFFALSE 22928
// sSun := true ;
22920: LD_ADDR_EXP 74
22924: PUSH
22925: LD_INT 1
22927: ST_TO_ADDR
// if p3 = 106 then
22928: LD_VAR 0 3
22932: PUSH
22933: LD_INT 106
22935: EQUAL
22936: IFFALSE 22946
// sTiger := true ;
22938: LD_ADDR_EXP 70
22942: PUSH
22943: LD_INT 1
22945: ST_TO_ADDR
// if p3 = 107 then
22946: LD_VAR 0 3
22950: PUSH
22951: LD_INT 107
22953: EQUAL
22954: IFFALSE 22964
// sBomb := true ;
22956: LD_ADDR_EXP 71
22960: PUSH
22961: LD_INT 1
22963: ST_TO_ADDR
// if p3 = 108 then
22964: LD_VAR 0 3
22968: PUSH
22969: LD_INT 108
22971: EQUAL
22972: IFFALSE 22982
// sWound := true ;
22974: LD_ADDR_EXP 79
22978: PUSH
22979: LD_INT 1
22981: ST_TO_ADDR
// if p3 = 109 then
22982: LD_VAR 0 3
22986: PUSH
22987: LD_INT 109
22989: EQUAL
22990: IFFALSE 23000
// sBetray := true ;
22992: LD_ADDR_EXP 83
22996: PUSH
22997: LD_INT 1
22999: ST_TO_ADDR
// if p3 = 110 then
23000: LD_VAR 0 3
23004: PUSH
23005: LD_INT 110
23007: EQUAL
23008: IFFALSE 23018
// sContamin := true ;
23010: LD_ADDR_EXP 84
23014: PUSH
23015: LD_INT 1
23017: ST_TO_ADDR
// if p3 = 111 then
23018: LD_VAR 0 3
23022: PUSH
23023: LD_INT 111
23025: EQUAL
23026: IFFALSE 23036
// sOil := true ;
23028: LD_ADDR_EXP 86
23032: PUSH
23033: LD_INT 1
23035: ST_TO_ADDR
// if p3 = 112 then
23036: LD_VAR 0 3
23040: PUSH
23041: LD_INT 112
23043: EQUAL
23044: IFFALSE 23054
// sStu := true ;
23046: LD_ADDR_EXP 90
23050: PUSH
23051: LD_INT 1
23053: ST_TO_ADDR
// if p3 = 113 then
23054: LD_VAR 0 3
23058: PUSH
23059: LD_INT 113
23061: EQUAL
23062: IFFALSE 23072
// sBazooka := true ;
23064: LD_ADDR_EXP 93
23068: PUSH
23069: LD_INT 1
23071: ST_TO_ADDR
// if p3 = 114 then
23072: LD_VAR 0 3
23076: PUSH
23077: LD_INT 114
23079: EQUAL
23080: IFFALSE 23090
// sMortar := true ;
23082: LD_ADDR_EXP 94
23086: PUSH
23087: LD_INT 1
23089: ST_TO_ADDR
// if p3 = 115 then
23090: LD_VAR 0 3
23094: PUSH
23095: LD_INT 115
23097: EQUAL
23098: IFFALSE 23108
// sRanger := true ;
23100: LD_ADDR_EXP 104
23104: PUSH
23105: LD_INT 1
23107: ST_TO_ADDR
// if p3 = 116 then
23108: LD_VAR 0 3
23112: PUSH
23113: LD_INT 116
23115: EQUAL
23116: IFFALSE 23126
// sComputer := true ;
23118: LD_ADDR_EXP 105
23122: PUSH
23123: LD_INT 1
23125: ST_TO_ADDR
// if p3 = 117 then
23126: LD_VAR 0 3
23130: PUSH
23131: LD_INT 117
23133: EQUAL
23134: IFFALSE 23144
// s30 := true ;
23136: LD_ADDR_EXP 106
23140: PUSH
23141: LD_INT 1
23143: ST_TO_ADDR
// if p3 = 118 then
23144: LD_VAR 0 3
23148: PUSH
23149: LD_INT 118
23151: EQUAL
23152: IFFALSE 23162
// s60 := true ;
23154: LD_ADDR_EXP 107
23158: PUSH
23159: LD_INT 1
23161: ST_TO_ADDR
// end ; if p2 = hack_mode then
23162: LD_VAR 0 2
23166: PUSH
23167: LD_INT 101
23169: EQUAL
23170: IFFALSE 23298
// begin case p3 of 1 :
23172: LD_VAR 0 3
23176: PUSH
23177: LD_INT 1
23179: DOUBLE
23180: EQUAL
23181: IFTRUE 23185
23183: GO 23192
23185: POP
// hHackUnlimitedResources ; 2 :
23186: CALL 35445 0 0
23190: GO 23298
23192: LD_INT 2
23194: DOUBLE
23195: EQUAL
23196: IFTRUE 23200
23198: GO 23207
23200: POP
// hHackSetLevel10 ; 3 :
23201: CALL 35578 0 0
23205: GO 23298
23207: LD_INT 3
23209: DOUBLE
23210: EQUAL
23211: IFTRUE 23215
23213: GO 23222
23215: POP
// hHackSetLevel10YourUnits ; 4 :
23216: CALL 35663 0 0
23220: GO 23298
23222: LD_INT 4
23224: DOUBLE
23225: EQUAL
23226: IFTRUE 23230
23228: GO 23237
23230: POP
// hHackInvincible ; 5 :
23231: CALL 36111 0 0
23235: GO 23298
23237: LD_INT 5
23239: DOUBLE
23240: EQUAL
23241: IFTRUE 23245
23243: GO 23252
23245: POP
// hHackInvisible ; 6 :
23246: CALL 36222 0 0
23250: GO 23298
23252: LD_INT 6
23254: DOUBLE
23255: EQUAL
23256: IFTRUE 23260
23258: GO 23267
23260: POP
// hHackChangeYourSide ; 7 :
23261: CALL 36279 0 0
23265: GO 23298
23267: LD_INT 7
23269: DOUBLE
23270: EQUAL
23271: IFTRUE 23275
23273: GO 23282
23275: POP
// hHackChangeUnitSide ; 8 :
23276: CALL 36321 0 0
23280: GO 23298
23282: LD_INT 8
23284: DOUBLE
23285: EQUAL
23286: IFTRUE 23290
23288: GO 23297
23290: POP
// hHackFog ; end ;
23291: CALL 36422 0 0
23295: GO 23298
23297: POP
// end ; if p2 = game_save_mode then
23298: LD_VAR 0 2
23302: PUSH
23303: LD_INT 102
23305: EQUAL
23306: IFFALSE 23361
// begin if p3 = 1 then
23308: LD_VAR 0 3
23312: PUSH
23313: LD_INT 1
23315: EQUAL
23316: IFFALSE 23328
// globalGameSaveCounter := p4 ;
23318: LD_ADDR_EXP 50
23322: PUSH
23323: LD_VAR 0 4
23327: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
23328: LD_VAR 0 3
23332: PUSH
23333: LD_INT 2
23335: EQUAL
23336: PUSH
23337: LD_EXP 50
23341: AND
23342: IFFALSE 23361
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
23344: LD_STRING setGameSaveCounter(
23346: PUSH
23347: LD_EXP 50
23351: STR
23352: PUSH
23353: LD_STRING )
23355: STR
23356: PPUSH
23357: CALL_OW 559
// end ; end ;
23361: LD_VAR 0 7
23365: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
23366: LD_INT 0
23368: PPUSH
// streamModeActive := false ;
23369: LD_ADDR_EXP 51
23373: PUSH
23374: LD_INT 0
23376: ST_TO_ADDR
// normalCounter := 36 ;
23377: LD_ADDR_EXP 52
23381: PUSH
23382: LD_INT 36
23384: ST_TO_ADDR
// hardcoreCounter := 18 ;
23385: LD_ADDR_EXP 53
23389: PUSH
23390: LD_INT 18
23392: ST_TO_ADDR
// sRocket := false ;
23393: LD_ADDR_EXP 56
23397: PUSH
23398: LD_INT 0
23400: ST_TO_ADDR
// sSpeed := false ;
23401: LD_ADDR_EXP 55
23405: PUSH
23406: LD_INT 0
23408: ST_TO_ADDR
// sEngine := false ;
23409: LD_ADDR_EXP 57
23413: PUSH
23414: LD_INT 0
23416: ST_TO_ADDR
// sSpec := false ;
23417: LD_ADDR_EXP 54
23421: PUSH
23422: LD_INT 0
23424: ST_TO_ADDR
// sLevel := false ;
23425: LD_ADDR_EXP 58
23429: PUSH
23430: LD_INT 0
23432: ST_TO_ADDR
// sArmoury := false ;
23433: LD_ADDR_EXP 59
23437: PUSH
23438: LD_INT 0
23440: ST_TO_ADDR
// sRadar := false ;
23441: LD_ADDR_EXP 60
23445: PUSH
23446: LD_INT 0
23448: ST_TO_ADDR
// sBunker := false ;
23449: LD_ADDR_EXP 61
23453: PUSH
23454: LD_INT 0
23456: ST_TO_ADDR
// sHack := false ;
23457: LD_ADDR_EXP 62
23461: PUSH
23462: LD_INT 0
23464: ST_TO_ADDR
// sFire := false ;
23465: LD_ADDR_EXP 63
23469: PUSH
23470: LD_INT 0
23472: ST_TO_ADDR
// sRefresh := false ;
23473: LD_ADDR_EXP 64
23477: PUSH
23478: LD_INT 0
23480: ST_TO_ADDR
// sExp := false ;
23481: LD_ADDR_EXP 65
23485: PUSH
23486: LD_INT 0
23488: ST_TO_ADDR
// sDepot := false ;
23489: LD_ADDR_EXP 66
23493: PUSH
23494: LD_INT 0
23496: ST_TO_ADDR
// sFlag := false ;
23497: LD_ADDR_EXP 67
23501: PUSH
23502: LD_INT 0
23504: ST_TO_ADDR
// sKamikadze := false ;
23505: LD_ADDR_EXP 75
23509: PUSH
23510: LD_INT 0
23512: ST_TO_ADDR
// sTroll := false ;
23513: LD_ADDR_EXP 76
23517: PUSH
23518: LD_INT 0
23520: ST_TO_ADDR
// sSlow := false ;
23521: LD_ADDR_EXP 77
23525: PUSH
23526: LD_INT 0
23528: ST_TO_ADDR
// sLack := false ;
23529: LD_ADDR_EXP 78
23533: PUSH
23534: LD_INT 0
23536: ST_TO_ADDR
// sTank := false ;
23537: LD_ADDR_EXP 80
23541: PUSH
23542: LD_INT 0
23544: ST_TO_ADDR
// sRemote := false ;
23545: LD_ADDR_EXP 81
23549: PUSH
23550: LD_INT 0
23552: ST_TO_ADDR
// sPowell := false ;
23553: LD_ADDR_EXP 82
23557: PUSH
23558: LD_INT 0
23560: ST_TO_ADDR
// sTeleport := false ;
23561: LD_ADDR_EXP 85
23565: PUSH
23566: LD_INT 0
23568: ST_TO_ADDR
// sOilTower := false ;
23569: LD_ADDR_EXP 87
23573: PUSH
23574: LD_INT 0
23576: ST_TO_ADDR
// sShovel := false ;
23577: LD_ADDR_EXP 88
23581: PUSH
23582: LD_INT 0
23584: ST_TO_ADDR
// sSheik := false ;
23585: LD_ADDR_EXP 89
23589: PUSH
23590: LD_INT 0
23592: ST_TO_ADDR
// sEarthquake := false ;
23593: LD_ADDR_EXP 91
23597: PUSH
23598: LD_INT 0
23600: ST_TO_ADDR
// sAI := false ;
23601: LD_ADDR_EXP 92
23605: PUSH
23606: LD_INT 0
23608: ST_TO_ADDR
// sCargo := false ;
23609: LD_ADDR_EXP 95
23613: PUSH
23614: LD_INT 0
23616: ST_TO_ADDR
// sDLaser := false ;
23617: LD_ADDR_EXP 96
23621: PUSH
23622: LD_INT 0
23624: ST_TO_ADDR
// sExchange := false ;
23625: LD_ADDR_EXP 97
23629: PUSH
23630: LD_INT 0
23632: ST_TO_ADDR
// sFac := false ;
23633: LD_ADDR_EXP 98
23637: PUSH
23638: LD_INT 0
23640: ST_TO_ADDR
// sPower := false ;
23641: LD_ADDR_EXP 99
23645: PUSH
23646: LD_INT 0
23648: ST_TO_ADDR
// sRandom := false ;
23649: LD_ADDR_EXP 100
23653: PUSH
23654: LD_INT 0
23656: ST_TO_ADDR
// sShield := false ;
23657: LD_ADDR_EXP 101
23661: PUSH
23662: LD_INT 0
23664: ST_TO_ADDR
// sTime := false ;
23665: LD_ADDR_EXP 102
23669: PUSH
23670: LD_INT 0
23672: ST_TO_ADDR
// sTools := false ;
23673: LD_ADDR_EXP 103
23677: PUSH
23678: LD_INT 0
23680: ST_TO_ADDR
// sSold := false ;
23681: LD_ADDR_EXP 68
23685: PUSH
23686: LD_INT 0
23688: ST_TO_ADDR
// sDiff := false ;
23689: LD_ADDR_EXP 69
23693: PUSH
23694: LD_INT 0
23696: ST_TO_ADDR
// sFog := false ;
23697: LD_ADDR_EXP 72
23701: PUSH
23702: LD_INT 0
23704: ST_TO_ADDR
// sReset := false ;
23705: LD_ADDR_EXP 73
23709: PUSH
23710: LD_INT 0
23712: ST_TO_ADDR
// sSun := false ;
23713: LD_ADDR_EXP 74
23717: PUSH
23718: LD_INT 0
23720: ST_TO_ADDR
// sTiger := false ;
23721: LD_ADDR_EXP 70
23725: PUSH
23726: LD_INT 0
23728: ST_TO_ADDR
// sBomb := false ;
23729: LD_ADDR_EXP 71
23733: PUSH
23734: LD_INT 0
23736: ST_TO_ADDR
// sWound := false ;
23737: LD_ADDR_EXP 79
23741: PUSH
23742: LD_INT 0
23744: ST_TO_ADDR
// sBetray := false ;
23745: LD_ADDR_EXP 83
23749: PUSH
23750: LD_INT 0
23752: ST_TO_ADDR
// sContamin := false ;
23753: LD_ADDR_EXP 84
23757: PUSH
23758: LD_INT 0
23760: ST_TO_ADDR
// sOil := false ;
23761: LD_ADDR_EXP 86
23765: PUSH
23766: LD_INT 0
23768: ST_TO_ADDR
// sStu := false ;
23769: LD_ADDR_EXP 90
23773: PUSH
23774: LD_INT 0
23776: ST_TO_ADDR
// sBazooka := false ;
23777: LD_ADDR_EXP 93
23781: PUSH
23782: LD_INT 0
23784: ST_TO_ADDR
// sMortar := false ;
23785: LD_ADDR_EXP 94
23789: PUSH
23790: LD_INT 0
23792: ST_TO_ADDR
// sRanger := false ;
23793: LD_ADDR_EXP 104
23797: PUSH
23798: LD_INT 0
23800: ST_TO_ADDR
// sComputer := false ;
23801: LD_ADDR_EXP 105
23805: PUSH
23806: LD_INT 0
23808: ST_TO_ADDR
// s30 := false ;
23809: LD_ADDR_EXP 106
23813: PUSH
23814: LD_INT 0
23816: ST_TO_ADDR
// s60 := false ;
23817: LD_ADDR_EXP 107
23821: PUSH
23822: LD_INT 0
23824: ST_TO_ADDR
// end ;
23825: LD_VAR 0 1
23829: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
23830: LD_INT 0
23832: PPUSH
23833: PPUSH
23834: PPUSH
23835: PPUSH
23836: PPUSH
23837: PPUSH
23838: PPUSH
// result := [ ] ;
23839: LD_ADDR_VAR 0 2
23843: PUSH
23844: EMPTY
23845: ST_TO_ADDR
// if campaign_id = 1 then
23846: LD_OWVAR 69
23850: PUSH
23851: LD_INT 1
23853: EQUAL
23854: IFFALSE 27020
// begin case mission_number of 1 :
23856: LD_OWVAR 70
23860: PUSH
23861: LD_INT 1
23863: DOUBLE
23864: EQUAL
23865: IFTRUE 23869
23867: GO 23945
23869: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23870: LD_ADDR_VAR 0 2
23874: PUSH
23875: LD_INT 2
23877: PUSH
23878: LD_INT 4
23880: PUSH
23881: LD_INT 11
23883: PUSH
23884: LD_INT 12
23886: PUSH
23887: LD_INT 15
23889: PUSH
23890: LD_INT 16
23892: PUSH
23893: LD_INT 22
23895: PUSH
23896: LD_INT 23
23898: PUSH
23899: LD_INT 26
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 101
23915: PUSH
23916: LD_INT 102
23918: PUSH
23919: LD_INT 106
23921: PUSH
23922: LD_INT 116
23924: PUSH
23925: LD_INT 117
23927: PUSH
23928: LD_INT 118
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: ST_TO_ADDR
23943: GO 27018
23945: LD_INT 2
23947: DOUBLE
23948: EQUAL
23949: IFTRUE 23953
23951: GO 24037
23953: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23954: LD_ADDR_VAR 0 2
23958: PUSH
23959: LD_INT 2
23961: PUSH
23962: LD_INT 4
23964: PUSH
23965: LD_INT 11
23967: PUSH
23968: LD_INT 12
23970: PUSH
23971: LD_INT 15
23973: PUSH
23974: LD_INT 16
23976: PUSH
23977: LD_INT 22
23979: PUSH
23980: LD_INT 23
23982: PUSH
23983: LD_INT 26
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 101
23999: PUSH
24000: LD_INT 102
24002: PUSH
24003: LD_INT 105
24005: PUSH
24006: LD_INT 106
24008: PUSH
24009: LD_INT 108
24011: PUSH
24012: LD_INT 116
24014: PUSH
24015: LD_INT 117
24017: PUSH
24018: LD_INT 118
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: ST_TO_ADDR
24035: GO 27018
24037: LD_INT 3
24039: DOUBLE
24040: EQUAL
24041: IFTRUE 24045
24043: GO 24133
24045: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
24046: LD_ADDR_VAR 0 2
24050: PUSH
24051: LD_INT 2
24053: PUSH
24054: LD_INT 4
24056: PUSH
24057: LD_INT 5
24059: PUSH
24060: LD_INT 11
24062: PUSH
24063: LD_INT 12
24065: PUSH
24066: LD_INT 15
24068: PUSH
24069: LD_INT 16
24071: PUSH
24072: LD_INT 22
24074: PUSH
24075: LD_INT 26
24077: PUSH
24078: LD_INT 36
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 101
24095: PUSH
24096: LD_INT 102
24098: PUSH
24099: LD_INT 105
24101: PUSH
24102: LD_INT 106
24104: PUSH
24105: LD_INT 108
24107: PUSH
24108: LD_INT 116
24110: PUSH
24111: LD_INT 117
24113: PUSH
24114: LD_INT 118
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: ST_TO_ADDR
24131: GO 27018
24133: LD_INT 4
24135: DOUBLE
24136: EQUAL
24137: IFTRUE 24141
24139: GO 24237
24141: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
24142: LD_ADDR_VAR 0 2
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: LD_INT 4
24152: PUSH
24153: LD_INT 5
24155: PUSH
24156: LD_INT 8
24158: PUSH
24159: LD_INT 11
24161: PUSH
24162: LD_INT 12
24164: PUSH
24165: LD_INT 15
24167: PUSH
24168: LD_INT 16
24170: PUSH
24171: LD_INT 22
24173: PUSH
24174: LD_INT 23
24176: PUSH
24177: LD_INT 26
24179: PUSH
24180: LD_INT 36
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 101
24199: PUSH
24200: LD_INT 102
24202: PUSH
24203: LD_INT 105
24205: PUSH
24206: LD_INT 106
24208: PUSH
24209: LD_INT 108
24211: PUSH
24212: LD_INT 116
24214: PUSH
24215: LD_INT 117
24217: PUSH
24218: LD_INT 118
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: ST_TO_ADDR
24235: GO 27018
24237: LD_INT 5
24239: DOUBLE
24240: EQUAL
24241: IFTRUE 24245
24243: GO 24357
24245: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
24246: LD_ADDR_VAR 0 2
24250: PUSH
24251: LD_INT 2
24253: PUSH
24254: LD_INT 4
24256: PUSH
24257: LD_INT 5
24259: PUSH
24260: LD_INT 6
24262: PUSH
24263: LD_INT 8
24265: PUSH
24266: LD_INT 11
24268: PUSH
24269: LD_INT 12
24271: PUSH
24272: LD_INT 15
24274: PUSH
24275: LD_INT 16
24277: PUSH
24278: LD_INT 22
24280: PUSH
24281: LD_INT 23
24283: PUSH
24284: LD_INT 25
24286: PUSH
24287: LD_INT 26
24289: PUSH
24290: LD_INT 36
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 101
24311: PUSH
24312: LD_INT 102
24314: PUSH
24315: LD_INT 105
24317: PUSH
24318: LD_INT 106
24320: PUSH
24321: LD_INT 108
24323: PUSH
24324: LD_INT 109
24326: PUSH
24327: LD_INT 112
24329: PUSH
24330: LD_INT 116
24332: PUSH
24333: LD_INT 117
24335: PUSH
24336: LD_INT 118
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: ST_TO_ADDR
24355: GO 27018
24357: LD_INT 6
24359: DOUBLE
24360: EQUAL
24361: IFTRUE 24365
24363: GO 24497
24365: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
24366: LD_ADDR_VAR 0 2
24370: PUSH
24371: LD_INT 2
24373: PUSH
24374: LD_INT 4
24376: PUSH
24377: LD_INT 5
24379: PUSH
24380: LD_INT 6
24382: PUSH
24383: LD_INT 8
24385: PUSH
24386: LD_INT 11
24388: PUSH
24389: LD_INT 12
24391: PUSH
24392: LD_INT 15
24394: PUSH
24395: LD_INT 16
24397: PUSH
24398: LD_INT 20
24400: PUSH
24401: LD_INT 21
24403: PUSH
24404: LD_INT 22
24406: PUSH
24407: LD_INT 23
24409: PUSH
24410: LD_INT 25
24412: PUSH
24413: LD_INT 26
24415: PUSH
24416: LD_INT 30
24418: PUSH
24419: LD_INT 31
24421: PUSH
24422: LD_INT 32
24424: PUSH
24425: LD_INT 36
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 101
24451: PUSH
24452: LD_INT 102
24454: PUSH
24455: LD_INT 105
24457: PUSH
24458: LD_INT 106
24460: PUSH
24461: LD_INT 108
24463: PUSH
24464: LD_INT 109
24466: PUSH
24467: LD_INT 112
24469: PUSH
24470: LD_INT 116
24472: PUSH
24473: LD_INT 117
24475: PUSH
24476: LD_INT 118
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: ST_TO_ADDR
24495: GO 27018
24497: LD_INT 7
24499: DOUBLE
24500: EQUAL
24501: IFTRUE 24505
24503: GO 24617
24505: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
24506: LD_ADDR_VAR 0 2
24510: PUSH
24511: LD_INT 2
24513: PUSH
24514: LD_INT 4
24516: PUSH
24517: LD_INT 5
24519: PUSH
24520: LD_INT 7
24522: PUSH
24523: LD_INT 11
24525: PUSH
24526: LD_INT 12
24528: PUSH
24529: LD_INT 15
24531: PUSH
24532: LD_INT 16
24534: PUSH
24535: LD_INT 20
24537: PUSH
24538: LD_INT 21
24540: PUSH
24541: LD_INT 22
24543: PUSH
24544: LD_INT 23
24546: PUSH
24547: LD_INT 25
24549: PUSH
24550: LD_INT 26
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 101
24571: PUSH
24572: LD_INT 102
24574: PUSH
24575: LD_INT 103
24577: PUSH
24578: LD_INT 105
24580: PUSH
24581: LD_INT 106
24583: PUSH
24584: LD_INT 108
24586: PUSH
24587: LD_INT 112
24589: PUSH
24590: LD_INT 116
24592: PUSH
24593: LD_INT 117
24595: PUSH
24596: LD_INT 118
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: ST_TO_ADDR
24615: GO 27018
24617: LD_INT 8
24619: DOUBLE
24620: EQUAL
24621: IFTRUE 24625
24623: GO 24765
24625: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
24626: LD_ADDR_VAR 0 2
24630: PUSH
24631: LD_INT 2
24633: PUSH
24634: LD_INT 4
24636: PUSH
24637: LD_INT 5
24639: PUSH
24640: LD_INT 6
24642: PUSH
24643: LD_INT 7
24645: PUSH
24646: LD_INT 8
24648: PUSH
24649: LD_INT 11
24651: PUSH
24652: LD_INT 12
24654: PUSH
24655: LD_INT 15
24657: PUSH
24658: LD_INT 16
24660: PUSH
24661: LD_INT 20
24663: PUSH
24664: LD_INT 21
24666: PUSH
24667: LD_INT 22
24669: PUSH
24670: LD_INT 23
24672: PUSH
24673: LD_INT 25
24675: PUSH
24676: LD_INT 26
24678: PUSH
24679: LD_INT 30
24681: PUSH
24682: LD_INT 31
24684: PUSH
24685: LD_INT 32
24687: PUSH
24688: LD_INT 36
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 101
24715: PUSH
24716: LD_INT 102
24718: PUSH
24719: LD_INT 103
24721: PUSH
24722: LD_INT 105
24724: PUSH
24725: LD_INT 106
24727: PUSH
24728: LD_INT 108
24730: PUSH
24731: LD_INT 109
24733: PUSH
24734: LD_INT 112
24736: PUSH
24737: LD_INT 116
24739: PUSH
24740: LD_INT 117
24742: PUSH
24743: LD_INT 118
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: ST_TO_ADDR
24763: GO 27018
24765: LD_INT 9
24767: DOUBLE
24768: EQUAL
24769: IFTRUE 24773
24771: GO 24921
24773: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
24774: LD_ADDR_VAR 0 2
24778: PUSH
24779: LD_INT 2
24781: PUSH
24782: LD_INT 4
24784: PUSH
24785: LD_INT 5
24787: PUSH
24788: LD_INT 6
24790: PUSH
24791: LD_INT 7
24793: PUSH
24794: LD_INT 8
24796: PUSH
24797: LD_INT 11
24799: PUSH
24800: LD_INT 12
24802: PUSH
24803: LD_INT 15
24805: PUSH
24806: LD_INT 16
24808: PUSH
24809: LD_INT 20
24811: PUSH
24812: LD_INT 21
24814: PUSH
24815: LD_INT 22
24817: PUSH
24818: LD_INT 23
24820: PUSH
24821: LD_INT 25
24823: PUSH
24824: LD_INT 26
24826: PUSH
24827: LD_INT 28
24829: PUSH
24830: LD_INT 30
24832: PUSH
24833: LD_INT 31
24835: PUSH
24836: LD_INT 32
24838: PUSH
24839: LD_INT 36
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 101
24867: PUSH
24868: LD_INT 102
24870: PUSH
24871: LD_INT 103
24873: PUSH
24874: LD_INT 105
24876: PUSH
24877: LD_INT 106
24879: PUSH
24880: LD_INT 108
24882: PUSH
24883: LD_INT 109
24885: PUSH
24886: LD_INT 112
24888: PUSH
24889: LD_INT 114
24891: PUSH
24892: LD_INT 116
24894: PUSH
24895: LD_INT 117
24897: PUSH
24898: LD_INT 118
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: ST_TO_ADDR
24919: GO 27018
24921: LD_INT 10
24923: DOUBLE
24924: EQUAL
24925: IFTRUE 24929
24927: GO 25125
24929: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24930: LD_ADDR_VAR 0 2
24934: PUSH
24935: LD_INT 2
24937: PUSH
24938: LD_INT 4
24940: PUSH
24941: LD_INT 5
24943: PUSH
24944: LD_INT 6
24946: PUSH
24947: LD_INT 7
24949: PUSH
24950: LD_INT 8
24952: PUSH
24953: LD_INT 9
24955: PUSH
24956: LD_INT 10
24958: PUSH
24959: LD_INT 11
24961: PUSH
24962: LD_INT 12
24964: PUSH
24965: LD_INT 13
24967: PUSH
24968: LD_INT 14
24970: PUSH
24971: LD_INT 15
24973: PUSH
24974: LD_INT 16
24976: PUSH
24977: LD_INT 17
24979: PUSH
24980: LD_INT 18
24982: PUSH
24983: LD_INT 19
24985: PUSH
24986: LD_INT 20
24988: PUSH
24989: LD_INT 21
24991: PUSH
24992: LD_INT 22
24994: PUSH
24995: LD_INT 23
24997: PUSH
24998: LD_INT 24
25000: PUSH
25001: LD_INT 25
25003: PUSH
25004: LD_INT 26
25006: PUSH
25007: LD_INT 28
25009: PUSH
25010: LD_INT 30
25012: PUSH
25013: LD_INT 31
25015: PUSH
25016: LD_INT 32
25018: PUSH
25019: LD_INT 36
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 101
25055: PUSH
25056: LD_INT 102
25058: PUSH
25059: LD_INT 103
25061: PUSH
25062: LD_INT 104
25064: PUSH
25065: LD_INT 105
25067: PUSH
25068: LD_INT 106
25070: PUSH
25071: LD_INT 107
25073: PUSH
25074: LD_INT 108
25076: PUSH
25077: LD_INT 109
25079: PUSH
25080: LD_INT 110
25082: PUSH
25083: LD_INT 111
25085: PUSH
25086: LD_INT 112
25088: PUSH
25089: LD_INT 114
25091: PUSH
25092: LD_INT 116
25094: PUSH
25095: LD_INT 117
25097: PUSH
25098: LD_INT 118
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: ST_TO_ADDR
25123: GO 27018
25125: LD_INT 11
25127: DOUBLE
25128: EQUAL
25129: IFTRUE 25133
25131: GO 25337
25133: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
25134: LD_ADDR_VAR 0 2
25138: PUSH
25139: LD_INT 2
25141: PUSH
25142: LD_INT 3
25144: PUSH
25145: LD_INT 4
25147: PUSH
25148: LD_INT 5
25150: PUSH
25151: LD_INT 6
25153: PUSH
25154: LD_INT 7
25156: PUSH
25157: LD_INT 8
25159: PUSH
25160: LD_INT 9
25162: PUSH
25163: LD_INT 10
25165: PUSH
25166: LD_INT 11
25168: PUSH
25169: LD_INT 12
25171: PUSH
25172: LD_INT 13
25174: PUSH
25175: LD_INT 14
25177: PUSH
25178: LD_INT 15
25180: PUSH
25181: LD_INT 16
25183: PUSH
25184: LD_INT 17
25186: PUSH
25187: LD_INT 18
25189: PUSH
25190: LD_INT 19
25192: PUSH
25193: LD_INT 20
25195: PUSH
25196: LD_INT 21
25198: PUSH
25199: LD_INT 22
25201: PUSH
25202: LD_INT 23
25204: PUSH
25205: LD_INT 24
25207: PUSH
25208: LD_INT 25
25210: PUSH
25211: LD_INT 26
25213: PUSH
25214: LD_INT 28
25216: PUSH
25217: LD_INT 30
25219: PUSH
25220: LD_INT 31
25222: PUSH
25223: LD_INT 32
25225: PUSH
25226: LD_INT 34
25228: PUSH
25229: LD_INT 36
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 101
25267: PUSH
25268: LD_INT 102
25270: PUSH
25271: LD_INT 103
25273: PUSH
25274: LD_INT 104
25276: PUSH
25277: LD_INT 105
25279: PUSH
25280: LD_INT 106
25282: PUSH
25283: LD_INT 107
25285: PUSH
25286: LD_INT 108
25288: PUSH
25289: LD_INT 109
25291: PUSH
25292: LD_INT 110
25294: PUSH
25295: LD_INT 111
25297: PUSH
25298: LD_INT 112
25300: PUSH
25301: LD_INT 114
25303: PUSH
25304: LD_INT 116
25306: PUSH
25307: LD_INT 117
25309: PUSH
25310: LD_INT 118
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: ST_TO_ADDR
25335: GO 27018
25337: LD_INT 12
25339: DOUBLE
25340: EQUAL
25341: IFTRUE 25345
25343: GO 25565
25345: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
25346: LD_ADDR_VAR 0 2
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: LD_INT 2
25356: PUSH
25357: LD_INT 3
25359: PUSH
25360: LD_INT 4
25362: PUSH
25363: LD_INT 5
25365: PUSH
25366: LD_INT 6
25368: PUSH
25369: LD_INT 7
25371: PUSH
25372: LD_INT 8
25374: PUSH
25375: LD_INT 9
25377: PUSH
25378: LD_INT 10
25380: PUSH
25381: LD_INT 11
25383: PUSH
25384: LD_INT 12
25386: PUSH
25387: LD_INT 13
25389: PUSH
25390: LD_INT 14
25392: PUSH
25393: LD_INT 15
25395: PUSH
25396: LD_INT 16
25398: PUSH
25399: LD_INT 17
25401: PUSH
25402: LD_INT 18
25404: PUSH
25405: LD_INT 19
25407: PUSH
25408: LD_INT 20
25410: PUSH
25411: LD_INT 21
25413: PUSH
25414: LD_INT 22
25416: PUSH
25417: LD_INT 23
25419: PUSH
25420: LD_INT 24
25422: PUSH
25423: LD_INT 25
25425: PUSH
25426: LD_INT 26
25428: PUSH
25429: LD_INT 27
25431: PUSH
25432: LD_INT 28
25434: PUSH
25435: LD_INT 30
25437: PUSH
25438: LD_INT 31
25440: PUSH
25441: LD_INT 32
25443: PUSH
25444: LD_INT 33
25446: PUSH
25447: LD_INT 34
25449: PUSH
25450: LD_INT 36
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 101
25491: PUSH
25492: LD_INT 102
25494: PUSH
25495: LD_INT 103
25497: PUSH
25498: LD_INT 104
25500: PUSH
25501: LD_INT 105
25503: PUSH
25504: LD_INT 106
25506: PUSH
25507: LD_INT 107
25509: PUSH
25510: LD_INT 108
25512: PUSH
25513: LD_INT 109
25515: PUSH
25516: LD_INT 110
25518: PUSH
25519: LD_INT 111
25521: PUSH
25522: LD_INT 112
25524: PUSH
25525: LD_INT 113
25527: PUSH
25528: LD_INT 114
25530: PUSH
25531: LD_INT 116
25533: PUSH
25534: LD_INT 117
25536: PUSH
25537: LD_INT 118
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: ST_TO_ADDR
25563: GO 27018
25565: LD_INT 13
25567: DOUBLE
25568: EQUAL
25569: IFTRUE 25573
25571: GO 25781
25573: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
25574: LD_ADDR_VAR 0 2
25578: PUSH
25579: LD_INT 1
25581: PUSH
25582: LD_INT 2
25584: PUSH
25585: LD_INT 3
25587: PUSH
25588: LD_INT 4
25590: PUSH
25591: LD_INT 5
25593: PUSH
25594: LD_INT 8
25596: PUSH
25597: LD_INT 9
25599: PUSH
25600: LD_INT 10
25602: PUSH
25603: LD_INT 11
25605: PUSH
25606: LD_INT 12
25608: PUSH
25609: LD_INT 14
25611: PUSH
25612: LD_INT 15
25614: PUSH
25615: LD_INT 16
25617: PUSH
25618: LD_INT 17
25620: PUSH
25621: LD_INT 18
25623: PUSH
25624: LD_INT 19
25626: PUSH
25627: LD_INT 20
25629: PUSH
25630: LD_INT 21
25632: PUSH
25633: LD_INT 22
25635: PUSH
25636: LD_INT 23
25638: PUSH
25639: LD_INT 24
25641: PUSH
25642: LD_INT 25
25644: PUSH
25645: LD_INT 26
25647: PUSH
25648: LD_INT 27
25650: PUSH
25651: LD_INT 28
25653: PUSH
25654: LD_INT 30
25656: PUSH
25657: LD_INT 31
25659: PUSH
25660: LD_INT 32
25662: PUSH
25663: LD_INT 33
25665: PUSH
25666: LD_INT 34
25668: PUSH
25669: LD_INT 36
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 101
25707: PUSH
25708: LD_INT 102
25710: PUSH
25711: LD_INT 103
25713: PUSH
25714: LD_INT 104
25716: PUSH
25717: LD_INT 105
25719: PUSH
25720: LD_INT 106
25722: PUSH
25723: LD_INT 107
25725: PUSH
25726: LD_INT 108
25728: PUSH
25729: LD_INT 109
25731: PUSH
25732: LD_INT 110
25734: PUSH
25735: LD_INT 111
25737: PUSH
25738: LD_INT 112
25740: PUSH
25741: LD_INT 113
25743: PUSH
25744: LD_INT 114
25746: PUSH
25747: LD_INT 116
25749: PUSH
25750: LD_INT 117
25752: PUSH
25753: LD_INT 118
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: ST_TO_ADDR
25779: GO 27018
25781: LD_INT 14
25783: DOUBLE
25784: EQUAL
25785: IFTRUE 25789
25787: GO 26013
25789: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
25790: LD_ADDR_VAR 0 2
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: LD_INT 3
25803: PUSH
25804: LD_INT 4
25806: PUSH
25807: LD_INT 5
25809: PUSH
25810: LD_INT 6
25812: PUSH
25813: LD_INT 7
25815: PUSH
25816: LD_INT 8
25818: PUSH
25819: LD_INT 9
25821: PUSH
25822: LD_INT 10
25824: PUSH
25825: LD_INT 11
25827: PUSH
25828: LD_INT 12
25830: PUSH
25831: LD_INT 13
25833: PUSH
25834: LD_INT 14
25836: PUSH
25837: LD_INT 15
25839: PUSH
25840: LD_INT 16
25842: PUSH
25843: LD_INT 17
25845: PUSH
25846: LD_INT 18
25848: PUSH
25849: LD_INT 19
25851: PUSH
25852: LD_INT 20
25854: PUSH
25855: LD_INT 21
25857: PUSH
25858: LD_INT 22
25860: PUSH
25861: LD_INT 23
25863: PUSH
25864: LD_INT 24
25866: PUSH
25867: LD_INT 25
25869: PUSH
25870: LD_INT 26
25872: PUSH
25873: LD_INT 27
25875: PUSH
25876: LD_INT 28
25878: PUSH
25879: LD_INT 29
25881: PUSH
25882: LD_INT 30
25884: PUSH
25885: LD_INT 31
25887: PUSH
25888: LD_INT 32
25890: PUSH
25891: LD_INT 33
25893: PUSH
25894: LD_INT 34
25896: PUSH
25897: LD_INT 36
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 101
25939: PUSH
25940: LD_INT 102
25942: PUSH
25943: LD_INT 103
25945: PUSH
25946: LD_INT 104
25948: PUSH
25949: LD_INT 105
25951: PUSH
25952: LD_INT 106
25954: PUSH
25955: LD_INT 107
25957: PUSH
25958: LD_INT 108
25960: PUSH
25961: LD_INT 109
25963: PUSH
25964: LD_INT 110
25966: PUSH
25967: LD_INT 111
25969: PUSH
25970: LD_INT 112
25972: PUSH
25973: LD_INT 113
25975: PUSH
25976: LD_INT 114
25978: PUSH
25979: LD_INT 116
25981: PUSH
25982: LD_INT 117
25984: PUSH
25985: LD_INT 118
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: ST_TO_ADDR
26011: GO 27018
26013: LD_INT 15
26015: DOUBLE
26016: EQUAL
26017: IFTRUE 26021
26019: GO 26245
26021: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
26022: LD_ADDR_VAR 0 2
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: LD_INT 3
26035: PUSH
26036: LD_INT 4
26038: PUSH
26039: LD_INT 5
26041: PUSH
26042: LD_INT 6
26044: PUSH
26045: LD_INT 7
26047: PUSH
26048: LD_INT 8
26050: PUSH
26051: LD_INT 9
26053: PUSH
26054: LD_INT 10
26056: PUSH
26057: LD_INT 11
26059: PUSH
26060: LD_INT 12
26062: PUSH
26063: LD_INT 13
26065: PUSH
26066: LD_INT 14
26068: PUSH
26069: LD_INT 15
26071: PUSH
26072: LD_INT 16
26074: PUSH
26075: LD_INT 17
26077: PUSH
26078: LD_INT 18
26080: PUSH
26081: LD_INT 19
26083: PUSH
26084: LD_INT 20
26086: PUSH
26087: LD_INT 21
26089: PUSH
26090: LD_INT 22
26092: PUSH
26093: LD_INT 23
26095: PUSH
26096: LD_INT 24
26098: PUSH
26099: LD_INT 25
26101: PUSH
26102: LD_INT 26
26104: PUSH
26105: LD_INT 27
26107: PUSH
26108: LD_INT 28
26110: PUSH
26111: LD_INT 29
26113: PUSH
26114: LD_INT 30
26116: PUSH
26117: LD_INT 31
26119: PUSH
26120: LD_INT 32
26122: PUSH
26123: LD_INT 33
26125: PUSH
26126: LD_INT 34
26128: PUSH
26129: LD_INT 36
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 101
26171: PUSH
26172: LD_INT 102
26174: PUSH
26175: LD_INT 103
26177: PUSH
26178: LD_INT 104
26180: PUSH
26181: LD_INT 105
26183: PUSH
26184: LD_INT 106
26186: PUSH
26187: LD_INT 107
26189: PUSH
26190: LD_INT 108
26192: PUSH
26193: LD_INT 109
26195: PUSH
26196: LD_INT 110
26198: PUSH
26199: LD_INT 111
26201: PUSH
26202: LD_INT 112
26204: PUSH
26205: LD_INT 113
26207: PUSH
26208: LD_INT 114
26210: PUSH
26211: LD_INT 116
26213: PUSH
26214: LD_INT 117
26216: PUSH
26217: LD_INT 118
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: ST_TO_ADDR
26243: GO 27018
26245: LD_INT 16
26247: DOUBLE
26248: EQUAL
26249: IFTRUE 26253
26251: GO 26389
26253: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
26254: LD_ADDR_VAR 0 2
26258: PUSH
26259: LD_INT 2
26261: PUSH
26262: LD_INT 4
26264: PUSH
26265: LD_INT 5
26267: PUSH
26268: LD_INT 7
26270: PUSH
26271: LD_INT 11
26273: PUSH
26274: LD_INT 12
26276: PUSH
26277: LD_INT 15
26279: PUSH
26280: LD_INT 16
26282: PUSH
26283: LD_INT 20
26285: PUSH
26286: LD_INT 21
26288: PUSH
26289: LD_INT 22
26291: PUSH
26292: LD_INT 23
26294: PUSH
26295: LD_INT 25
26297: PUSH
26298: LD_INT 26
26300: PUSH
26301: LD_INT 30
26303: PUSH
26304: LD_INT 31
26306: PUSH
26307: LD_INT 32
26309: PUSH
26310: LD_INT 33
26312: PUSH
26313: LD_INT 34
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 101
26339: PUSH
26340: LD_INT 102
26342: PUSH
26343: LD_INT 103
26345: PUSH
26346: LD_INT 106
26348: PUSH
26349: LD_INT 108
26351: PUSH
26352: LD_INT 112
26354: PUSH
26355: LD_INT 113
26357: PUSH
26358: LD_INT 114
26360: PUSH
26361: LD_INT 116
26363: PUSH
26364: LD_INT 117
26366: PUSH
26367: LD_INT 118
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: ST_TO_ADDR
26387: GO 27018
26389: LD_INT 17
26391: DOUBLE
26392: EQUAL
26393: IFTRUE 26397
26395: GO 26621
26397: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
26398: LD_ADDR_VAR 0 2
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: LD_INT 2
26408: PUSH
26409: LD_INT 3
26411: PUSH
26412: LD_INT 4
26414: PUSH
26415: LD_INT 5
26417: PUSH
26418: LD_INT 6
26420: PUSH
26421: LD_INT 7
26423: PUSH
26424: LD_INT 8
26426: PUSH
26427: LD_INT 9
26429: PUSH
26430: LD_INT 10
26432: PUSH
26433: LD_INT 11
26435: PUSH
26436: LD_INT 12
26438: PUSH
26439: LD_INT 13
26441: PUSH
26442: LD_INT 14
26444: PUSH
26445: LD_INT 15
26447: PUSH
26448: LD_INT 16
26450: PUSH
26451: LD_INT 17
26453: PUSH
26454: LD_INT 18
26456: PUSH
26457: LD_INT 19
26459: PUSH
26460: LD_INT 20
26462: PUSH
26463: LD_INT 21
26465: PUSH
26466: LD_INT 22
26468: PUSH
26469: LD_INT 23
26471: PUSH
26472: LD_INT 24
26474: PUSH
26475: LD_INT 25
26477: PUSH
26478: LD_INT 26
26480: PUSH
26481: LD_INT 27
26483: PUSH
26484: LD_INT 28
26486: PUSH
26487: LD_INT 29
26489: PUSH
26490: LD_INT 30
26492: PUSH
26493: LD_INT 31
26495: PUSH
26496: LD_INT 32
26498: PUSH
26499: LD_INT 33
26501: PUSH
26502: LD_INT 34
26504: PUSH
26505: LD_INT 36
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 101
26547: PUSH
26548: LD_INT 102
26550: PUSH
26551: LD_INT 103
26553: PUSH
26554: LD_INT 104
26556: PUSH
26557: LD_INT 105
26559: PUSH
26560: LD_INT 106
26562: PUSH
26563: LD_INT 107
26565: PUSH
26566: LD_INT 108
26568: PUSH
26569: LD_INT 109
26571: PUSH
26572: LD_INT 110
26574: PUSH
26575: LD_INT 111
26577: PUSH
26578: LD_INT 112
26580: PUSH
26581: LD_INT 113
26583: PUSH
26584: LD_INT 114
26586: PUSH
26587: LD_INT 116
26589: PUSH
26590: LD_INT 117
26592: PUSH
26593: LD_INT 118
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: ST_TO_ADDR
26619: GO 27018
26621: LD_INT 18
26623: DOUBLE
26624: EQUAL
26625: IFTRUE 26629
26627: GO 26777
26629: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
26630: LD_ADDR_VAR 0 2
26634: PUSH
26635: LD_INT 2
26637: PUSH
26638: LD_INT 4
26640: PUSH
26641: LD_INT 5
26643: PUSH
26644: LD_INT 7
26646: PUSH
26647: LD_INT 11
26649: PUSH
26650: LD_INT 12
26652: PUSH
26653: LD_INT 15
26655: PUSH
26656: LD_INT 16
26658: PUSH
26659: LD_INT 20
26661: PUSH
26662: LD_INT 21
26664: PUSH
26665: LD_INT 22
26667: PUSH
26668: LD_INT 23
26670: PUSH
26671: LD_INT 25
26673: PUSH
26674: LD_INT 26
26676: PUSH
26677: LD_INT 30
26679: PUSH
26680: LD_INT 31
26682: PUSH
26683: LD_INT 32
26685: PUSH
26686: LD_INT 33
26688: PUSH
26689: LD_INT 34
26691: PUSH
26692: LD_INT 35
26694: PUSH
26695: LD_INT 36
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 101
26723: PUSH
26724: LD_INT 102
26726: PUSH
26727: LD_INT 103
26729: PUSH
26730: LD_INT 106
26732: PUSH
26733: LD_INT 108
26735: PUSH
26736: LD_INT 112
26738: PUSH
26739: LD_INT 113
26741: PUSH
26742: LD_INT 114
26744: PUSH
26745: LD_INT 115
26747: PUSH
26748: LD_INT 116
26750: PUSH
26751: LD_INT 117
26753: PUSH
26754: LD_INT 118
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: ST_TO_ADDR
26775: GO 27018
26777: LD_INT 19
26779: DOUBLE
26780: EQUAL
26781: IFTRUE 26785
26783: GO 27017
26785: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
26786: LD_ADDR_VAR 0 2
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: LD_INT 2
26796: PUSH
26797: LD_INT 3
26799: PUSH
26800: LD_INT 4
26802: PUSH
26803: LD_INT 5
26805: PUSH
26806: LD_INT 6
26808: PUSH
26809: LD_INT 7
26811: PUSH
26812: LD_INT 8
26814: PUSH
26815: LD_INT 9
26817: PUSH
26818: LD_INT 10
26820: PUSH
26821: LD_INT 11
26823: PUSH
26824: LD_INT 12
26826: PUSH
26827: LD_INT 13
26829: PUSH
26830: LD_INT 14
26832: PUSH
26833: LD_INT 15
26835: PUSH
26836: LD_INT 16
26838: PUSH
26839: LD_INT 17
26841: PUSH
26842: LD_INT 18
26844: PUSH
26845: LD_INT 19
26847: PUSH
26848: LD_INT 20
26850: PUSH
26851: LD_INT 21
26853: PUSH
26854: LD_INT 22
26856: PUSH
26857: LD_INT 23
26859: PUSH
26860: LD_INT 24
26862: PUSH
26863: LD_INT 25
26865: PUSH
26866: LD_INT 26
26868: PUSH
26869: LD_INT 27
26871: PUSH
26872: LD_INT 28
26874: PUSH
26875: LD_INT 29
26877: PUSH
26878: LD_INT 30
26880: PUSH
26881: LD_INT 31
26883: PUSH
26884: LD_INT 32
26886: PUSH
26887: LD_INT 33
26889: PUSH
26890: LD_INT 34
26892: PUSH
26893: LD_INT 35
26895: PUSH
26896: LD_INT 36
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 101
26939: PUSH
26940: LD_INT 102
26942: PUSH
26943: LD_INT 103
26945: PUSH
26946: LD_INT 104
26948: PUSH
26949: LD_INT 105
26951: PUSH
26952: LD_INT 106
26954: PUSH
26955: LD_INT 107
26957: PUSH
26958: LD_INT 108
26960: PUSH
26961: LD_INT 109
26963: PUSH
26964: LD_INT 110
26966: PUSH
26967: LD_INT 111
26969: PUSH
26970: LD_INT 112
26972: PUSH
26973: LD_INT 113
26975: PUSH
26976: LD_INT 114
26978: PUSH
26979: LD_INT 115
26981: PUSH
26982: LD_INT 116
26984: PUSH
26985: LD_INT 117
26987: PUSH
26988: LD_INT 118
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: ST_TO_ADDR
27015: GO 27018
27017: POP
// end else
27018: GO 27249
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
27020: LD_ADDR_VAR 0 2
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: LD_INT 2
27030: PUSH
27031: LD_INT 3
27033: PUSH
27034: LD_INT 4
27036: PUSH
27037: LD_INT 5
27039: PUSH
27040: LD_INT 6
27042: PUSH
27043: LD_INT 7
27045: PUSH
27046: LD_INT 8
27048: PUSH
27049: LD_INT 9
27051: PUSH
27052: LD_INT 10
27054: PUSH
27055: LD_INT 11
27057: PUSH
27058: LD_INT 12
27060: PUSH
27061: LD_INT 13
27063: PUSH
27064: LD_INT 14
27066: PUSH
27067: LD_INT 15
27069: PUSH
27070: LD_INT 16
27072: PUSH
27073: LD_INT 17
27075: PUSH
27076: LD_INT 18
27078: PUSH
27079: LD_INT 19
27081: PUSH
27082: LD_INT 20
27084: PUSH
27085: LD_INT 21
27087: PUSH
27088: LD_INT 22
27090: PUSH
27091: LD_INT 23
27093: PUSH
27094: LD_INT 24
27096: PUSH
27097: LD_INT 25
27099: PUSH
27100: LD_INT 26
27102: PUSH
27103: LD_INT 27
27105: PUSH
27106: LD_INT 28
27108: PUSH
27109: LD_INT 29
27111: PUSH
27112: LD_INT 30
27114: PUSH
27115: LD_INT 31
27117: PUSH
27118: LD_INT 32
27120: PUSH
27121: LD_INT 33
27123: PUSH
27124: LD_INT 34
27126: PUSH
27127: LD_INT 35
27129: PUSH
27130: LD_INT 36
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 101
27173: PUSH
27174: LD_INT 102
27176: PUSH
27177: LD_INT 103
27179: PUSH
27180: LD_INT 104
27182: PUSH
27183: LD_INT 105
27185: PUSH
27186: LD_INT 106
27188: PUSH
27189: LD_INT 107
27191: PUSH
27192: LD_INT 108
27194: PUSH
27195: LD_INT 109
27197: PUSH
27198: LD_INT 110
27200: PUSH
27201: LD_INT 111
27203: PUSH
27204: LD_INT 112
27206: PUSH
27207: LD_INT 113
27209: PUSH
27210: LD_INT 114
27212: PUSH
27213: LD_INT 115
27215: PUSH
27216: LD_INT 116
27218: PUSH
27219: LD_INT 117
27221: PUSH
27222: LD_INT 118
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: ST_TO_ADDR
// if result then
27249: LD_VAR 0 2
27253: IFFALSE 28039
// begin normal :=  ;
27255: LD_ADDR_VAR 0 5
27259: PUSH
27260: LD_STRING 
27262: ST_TO_ADDR
// hardcore :=  ;
27263: LD_ADDR_VAR 0 6
27267: PUSH
27268: LD_STRING 
27270: ST_TO_ADDR
// active :=  ;
27271: LD_ADDR_VAR 0 7
27275: PUSH
27276: LD_STRING 
27278: ST_TO_ADDR
// for i = 1 to normalCounter do
27279: LD_ADDR_VAR 0 8
27283: PUSH
27284: DOUBLE
27285: LD_INT 1
27287: DEC
27288: ST_TO_ADDR
27289: LD_EXP 52
27293: PUSH
27294: FOR_TO
27295: IFFALSE 27396
// begin tmp := 0 ;
27297: LD_ADDR_VAR 0 3
27301: PUSH
27302: LD_STRING 0
27304: ST_TO_ADDR
// if result [ 1 ] then
27305: LD_VAR 0 2
27309: PUSH
27310: LD_INT 1
27312: ARRAY
27313: IFFALSE 27378
// if result [ 1 ] [ 1 ] = i then
27315: LD_VAR 0 2
27319: PUSH
27320: LD_INT 1
27322: ARRAY
27323: PUSH
27324: LD_INT 1
27326: ARRAY
27327: PUSH
27328: LD_VAR 0 8
27332: EQUAL
27333: IFFALSE 27378
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27335: LD_ADDR_VAR 0 2
27339: PUSH
27340: LD_VAR 0 2
27344: PPUSH
27345: LD_INT 1
27347: PPUSH
27348: LD_VAR 0 2
27352: PUSH
27353: LD_INT 1
27355: ARRAY
27356: PPUSH
27357: LD_INT 1
27359: PPUSH
27360: CALL_OW 3
27364: PPUSH
27365: CALL_OW 1
27369: ST_TO_ADDR
// tmp := 1 ;
27370: LD_ADDR_VAR 0 3
27374: PUSH
27375: LD_STRING 1
27377: ST_TO_ADDR
// end ; normal := normal & tmp ;
27378: LD_ADDR_VAR 0 5
27382: PUSH
27383: LD_VAR 0 5
27387: PUSH
27388: LD_VAR 0 3
27392: STR
27393: ST_TO_ADDR
// end ;
27394: GO 27294
27396: POP
27397: POP
// for i = 1 to hardcoreCounter do
27398: LD_ADDR_VAR 0 8
27402: PUSH
27403: DOUBLE
27404: LD_INT 1
27406: DEC
27407: ST_TO_ADDR
27408: LD_EXP 53
27412: PUSH
27413: FOR_TO
27414: IFFALSE 27519
// begin tmp := 0 ;
27416: LD_ADDR_VAR 0 3
27420: PUSH
27421: LD_STRING 0
27423: ST_TO_ADDR
// if result [ 2 ] then
27424: LD_VAR 0 2
27428: PUSH
27429: LD_INT 2
27431: ARRAY
27432: IFFALSE 27501
// if result [ 2 ] [ 1 ] = 100 + i then
27434: LD_VAR 0 2
27438: PUSH
27439: LD_INT 2
27441: ARRAY
27442: PUSH
27443: LD_INT 1
27445: ARRAY
27446: PUSH
27447: LD_INT 100
27449: PUSH
27450: LD_VAR 0 8
27454: PLUS
27455: EQUAL
27456: IFFALSE 27501
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27458: LD_ADDR_VAR 0 2
27462: PUSH
27463: LD_VAR 0 2
27467: PPUSH
27468: LD_INT 2
27470: PPUSH
27471: LD_VAR 0 2
27475: PUSH
27476: LD_INT 2
27478: ARRAY
27479: PPUSH
27480: LD_INT 1
27482: PPUSH
27483: CALL_OW 3
27487: PPUSH
27488: CALL_OW 1
27492: ST_TO_ADDR
// tmp := 1 ;
27493: LD_ADDR_VAR 0 3
27497: PUSH
27498: LD_STRING 1
27500: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27501: LD_ADDR_VAR 0 6
27505: PUSH
27506: LD_VAR 0 6
27510: PUSH
27511: LD_VAR 0 3
27515: STR
27516: ST_TO_ADDR
// end ;
27517: GO 27413
27519: POP
27520: POP
// if isGameLoad then
27521: LD_VAR 0 1
27525: IFFALSE 28000
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
27527: LD_ADDR_VAR 0 4
27531: PUSH
27532: LD_EXP 56
27536: PUSH
27537: LD_EXP 55
27541: PUSH
27542: LD_EXP 57
27546: PUSH
27547: LD_EXP 54
27551: PUSH
27552: LD_EXP 58
27556: PUSH
27557: LD_EXP 59
27561: PUSH
27562: LD_EXP 60
27566: PUSH
27567: LD_EXP 61
27571: PUSH
27572: LD_EXP 62
27576: PUSH
27577: LD_EXP 63
27581: PUSH
27582: LD_EXP 64
27586: PUSH
27587: LD_EXP 65
27591: PUSH
27592: LD_EXP 66
27596: PUSH
27597: LD_EXP 67
27601: PUSH
27602: LD_EXP 75
27606: PUSH
27607: LD_EXP 76
27611: PUSH
27612: LD_EXP 77
27616: PUSH
27617: LD_EXP 78
27621: PUSH
27622: LD_EXP 80
27626: PUSH
27627: LD_EXP 81
27631: PUSH
27632: LD_EXP 82
27636: PUSH
27637: LD_EXP 85
27641: PUSH
27642: LD_EXP 87
27646: PUSH
27647: LD_EXP 88
27651: PUSH
27652: LD_EXP 89
27656: PUSH
27657: LD_EXP 91
27661: PUSH
27662: LD_EXP 92
27666: PUSH
27667: LD_EXP 95
27671: PUSH
27672: LD_EXP 96
27676: PUSH
27677: LD_EXP 97
27681: PUSH
27682: LD_EXP 98
27686: PUSH
27687: LD_EXP 99
27691: PUSH
27692: LD_EXP 100
27696: PUSH
27697: LD_EXP 101
27701: PUSH
27702: LD_EXP 102
27706: PUSH
27707: LD_EXP 103
27711: PUSH
27712: LD_EXP 68
27716: PUSH
27717: LD_EXP 69
27721: PUSH
27722: LD_EXP 72
27726: PUSH
27727: LD_EXP 73
27731: PUSH
27732: LD_EXP 74
27736: PUSH
27737: LD_EXP 70
27741: PUSH
27742: LD_EXP 71
27746: PUSH
27747: LD_EXP 79
27751: PUSH
27752: LD_EXP 83
27756: PUSH
27757: LD_EXP 84
27761: PUSH
27762: LD_EXP 86
27766: PUSH
27767: LD_EXP 90
27771: PUSH
27772: LD_EXP 93
27776: PUSH
27777: LD_EXP 94
27781: PUSH
27782: LD_EXP 104
27786: PUSH
27787: LD_EXP 105
27791: PUSH
27792: LD_EXP 106
27796: PUSH
27797: LD_EXP 107
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: ST_TO_ADDR
// tmp :=  ;
27858: LD_ADDR_VAR 0 3
27862: PUSH
27863: LD_STRING 
27865: ST_TO_ADDR
// for i = 1 to normalCounter do
27866: LD_ADDR_VAR 0 8
27870: PUSH
27871: DOUBLE
27872: LD_INT 1
27874: DEC
27875: ST_TO_ADDR
27876: LD_EXP 52
27880: PUSH
27881: FOR_TO
27882: IFFALSE 27918
// begin if flags [ i ] then
27884: LD_VAR 0 4
27888: PUSH
27889: LD_VAR 0 8
27893: ARRAY
27894: IFFALSE 27916
// tmp := tmp & i & ; ;
27896: LD_ADDR_VAR 0 3
27900: PUSH
27901: LD_VAR 0 3
27905: PUSH
27906: LD_VAR 0 8
27910: STR
27911: PUSH
27912: LD_STRING ;
27914: STR
27915: ST_TO_ADDR
// end ;
27916: GO 27881
27918: POP
27919: POP
// for i = 1 to hardcoreCounter do
27920: LD_ADDR_VAR 0 8
27924: PUSH
27925: DOUBLE
27926: LD_INT 1
27928: DEC
27929: ST_TO_ADDR
27930: LD_EXP 53
27934: PUSH
27935: FOR_TO
27936: IFFALSE 27982
// begin if flags [ normalCounter + i ] then
27938: LD_VAR 0 4
27942: PUSH
27943: LD_EXP 52
27947: PUSH
27948: LD_VAR 0 8
27952: PLUS
27953: ARRAY
27954: IFFALSE 27980
// tmp := tmp & ( 100 + i ) & ; ;
27956: LD_ADDR_VAR 0 3
27960: PUSH
27961: LD_VAR 0 3
27965: PUSH
27966: LD_INT 100
27968: PUSH
27969: LD_VAR 0 8
27973: PLUS
27974: STR
27975: PUSH
27976: LD_STRING ;
27978: STR
27979: ST_TO_ADDR
// end ;
27980: GO 27935
27982: POP
27983: POP
// if tmp then
27984: LD_VAR 0 3
27988: IFFALSE 28000
// active := tmp ;
27990: LD_ADDR_VAR 0 7
27994: PUSH
27995: LD_VAR 0 3
27999: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
28000: LD_STRING getStreamItemsFromMission("
28002: PUSH
28003: LD_VAR 0 5
28007: STR
28008: PUSH
28009: LD_STRING ","
28011: STR
28012: PUSH
28013: LD_VAR 0 6
28017: STR
28018: PUSH
28019: LD_STRING ","
28021: STR
28022: PUSH
28023: LD_VAR 0 7
28027: STR
28028: PUSH
28029: LD_STRING ")
28031: STR
28032: PPUSH
28033: CALL_OW 559
// end else
28037: GO 28046
// ToLua ( getStreamItemsFromMission("","","") ) ;
28039: LD_STRING getStreamItemsFromMission("","","")
28041: PPUSH
28042: CALL_OW 559
// end ;
28046: LD_VAR 0 2
28050: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
28051: LD_EXP 51
28055: PUSH
28056: LD_EXP 56
28060: AND
28061: IFFALSE 28185
28063: GO 28065
28065: DISABLE
28066: LD_INT 0
28068: PPUSH
28069: PPUSH
// begin enable ;
28070: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
28071: LD_ADDR_VAR 0 2
28075: PUSH
28076: LD_INT 22
28078: PUSH
28079: LD_OWVAR 2
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 2
28090: PUSH
28091: LD_INT 34
28093: PUSH
28094: LD_INT 7
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 34
28103: PUSH
28104: LD_INT 45
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 34
28113: PUSH
28114: LD_INT 28
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 34
28123: PUSH
28124: LD_INT 47
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PPUSH
28142: CALL_OW 69
28146: ST_TO_ADDR
// if not tmp then
28147: LD_VAR 0 2
28151: NOT
28152: IFFALSE 28156
// exit ;
28154: GO 28185
// for i in tmp do
28156: LD_ADDR_VAR 0 1
28160: PUSH
28161: LD_VAR 0 2
28165: PUSH
28166: FOR_IN
28167: IFFALSE 28183
// begin SetLives ( i , 0 ) ;
28169: LD_VAR 0 1
28173: PPUSH
28174: LD_INT 0
28176: PPUSH
28177: CALL_OW 234
// end ;
28181: GO 28166
28183: POP
28184: POP
// end ;
28185: PPOPN 2
28187: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
28188: LD_EXP 51
28192: PUSH
28193: LD_EXP 57
28197: AND
28198: IFFALSE 28282
28200: GO 28202
28202: DISABLE
28203: LD_INT 0
28205: PPUSH
28206: PPUSH
// begin enable ;
28207: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
28208: LD_ADDR_VAR 0 2
28212: PUSH
28213: LD_INT 22
28215: PUSH
28216: LD_OWVAR 2
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 32
28227: PUSH
28228: LD_INT 3
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PPUSH
28239: CALL_OW 69
28243: ST_TO_ADDR
// if not tmp then
28244: LD_VAR 0 2
28248: NOT
28249: IFFALSE 28253
// exit ;
28251: GO 28282
// for i in tmp do
28253: LD_ADDR_VAR 0 1
28257: PUSH
28258: LD_VAR 0 2
28262: PUSH
28263: FOR_IN
28264: IFFALSE 28280
// begin SetLives ( i , 0 ) ;
28266: LD_VAR 0 1
28270: PPUSH
28271: LD_INT 0
28273: PPUSH
28274: CALL_OW 234
// end ;
28278: GO 28263
28280: POP
28281: POP
// end ;
28282: PPOPN 2
28284: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28285: LD_EXP 51
28289: PUSH
28290: LD_EXP 54
28294: AND
28295: IFFALSE 28388
28297: GO 28299
28299: DISABLE
28300: LD_INT 0
28302: PPUSH
// begin enable ;
28303: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28304: LD_ADDR_VAR 0 1
28308: PUSH
28309: LD_INT 22
28311: PUSH
28312: LD_OWVAR 2
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: LD_INT 25
28326: PUSH
28327: LD_INT 5
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 25
28336: PUSH
28337: LD_INT 9
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 25
28346: PUSH
28347: LD_INT 8
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PPUSH
28364: CALL_OW 69
28368: PUSH
28369: FOR_IN
28370: IFFALSE 28386
// begin SetClass ( i , 1 ) ;
28372: LD_VAR 0 1
28376: PPUSH
28377: LD_INT 1
28379: PPUSH
28380: CALL_OW 336
// end ;
28384: GO 28369
28386: POP
28387: POP
// end ;
28388: PPOPN 1
28390: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28391: LD_EXP 51
28395: PUSH
28396: LD_EXP 55
28400: AND
28401: PUSH
28402: LD_OWVAR 65
28406: PUSH
28407: LD_INT 7
28409: LESS
28410: AND
28411: IFFALSE 28425
28413: GO 28415
28415: DISABLE
// begin enable ;
28416: ENABLE
// game_speed := 7 ;
28417: LD_ADDR_OWVAR 65
28421: PUSH
28422: LD_INT 7
28424: ST_TO_ADDR
// end ;
28425: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28426: LD_EXP 51
28430: PUSH
28431: LD_EXP 58
28435: AND
28436: IFFALSE 28638
28438: GO 28440
28440: DISABLE
28441: LD_INT 0
28443: PPUSH
28444: PPUSH
28445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28446: LD_ADDR_VAR 0 3
28450: PUSH
28451: LD_INT 81
28453: PUSH
28454: LD_OWVAR 2
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 21
28465: PUSH
28466: LD_INT 1
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PPUSH
28477: CALL_OW 69
28481: ST_TO_ADDR
// if not tmp then
28482: LD_VAR 0 3
28486: NOT
28487: IFFALSE 28491
// exit ;
28489: GO 28638
// if tmp > 5 then
28491: LD_VAR 0 3
28495: PUSH
28496: LD_INT 5
28498: GREATER
28499: IFFALSE 28511
// k := 5 else
28501: LD_ADDR_VAR 0 2
28505: PUSH
28506: LD_INT 5
28508: ST_TO_ADDR
28509: GO 28521
// k := tmp ;
28511: LD_ADDR_VAR 0 2
28515: PUSH
28516: LD_VAR 0 3
28520: ST_TO_ADDR
// for i := 1 to k do
28521: LD_ADDR_VAR 0 1
28525: PUSH
28526: DOUBLE
28527: LD_INT 1
28529: DEC
28530: ST_TO_ADDR
28531: LD_VAR 0 2
28535: PUSH
28536: FOR_TO
28537: IFFALSE 28636
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28539: LD_VAR 0 3
28543: PUSH
28544: LD_VAR 0 1
28548: ARRAY
28549: PPUSH
28550: LD_VAR 0 1
28554: PUSH
28555: LD_INT 4
28557: MOD
28558: PUSH
28559: LD_INT 1
28561: PLUS
28562: PPUSH
28563: CALL_OW 259
28567: PUSH
28568: LD_INT 10
28570: LESS
28571: IFFALSE 28634
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28573: LD_VAR 0 3
28577: PUSH
28578: LD_VAR 0 1
28582: ARRAY
28583: PPUSH
28584: LD_VAR 0 1
28588: PUSH
28589: LD_INT 4
28591: MOD
28592: PUSH
28593: LD_INT 1
28595: PLUS
28596: PPUSH
28597: LD_VAR 0 3
28601: PUSH
28602: LD_VAR 0 1
28606: ARRAY
28607: PPUSH
28608: LD_VAR 0 1
28612: PUSH
28613: LD_INT 4
28615: MOD
28616: PUSH
28617: LD_INT 1
28619: PLUS
28620: PPUSH
28621: CALL_OW 259
28625: PUSH
28626: LD_INT 1
28628: PLUS
28629: PPUSH
28630: CALL_OW 237
28634: GO 28536
28636: POP
28637: POP
// end ;
28638: PPOPN 3
28640: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28641: LD_EXP 51
28645: PUSH
28646: LD_EXP 59
28650: AND
28651: IFFALSE 28671
28653: GO 28655
28655: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28656: LD_INT 4
28658: PPUSH
28659: LD_OWVAR 2
28663: PPUSH
28664: LD_INT 0
28666: PPUSH
28667: CALL_OW 324
28671: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28672: LD_EXP 51
28676: PUSH
28677: LD_EXP 88
28681: AND
28682: IFFALSE 28702
28684: GO 28686
28686: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28687: LD_INT 19
28689: PPUSH
28690: LD_OWVAR 2
28694: PPUSH
28695: LD_INT 0
28697: PPUSH
28698: CALL_OW 324
28702: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28703: LD_EXP 51
28707: PUSH
28708: LD_EXP 60
28712: AND
28713: IFFALSE 28815
28715: GO 28717
28717: DISABLE
28718: LD_INT 0
28720: PPUSH
28721: PPUSH
// begin enable ;
28722: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28723: LD_ADDR_VAR 0 2
28727: PUSH
28728: LD_INT 22
28730: PUSH
28731: LD_OWVAR 2
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 2
28742: PUSH
28743: LD_INT 34
28745: PUSH
28746: LD_INT 11
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 34
28755: PUSH
28756: LD_INT 30
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PPUSH
28772: CALL_OW 69
28776: ST_TO_ADDR
// if not tmp then
28777: LD_VAR 0 2
28781: NOT
28782: IFFALSE 28786
// exit ;
28784: GO 28815
// for i in tmp do
28786: LD_ADDR_VAR 0 1
28790: PUSH
28791: LD_VAR 0 2
28795: PUSH
28796: FOR_IN
28797: IFFALSE 28813
// begin SetLives ( i , 0 ) ;
28799: LD_VAR 0 1
28803: PPUSH
28804: LD_INT 0
28806: PPUSH
28807: CALL_OW 234
// end ;
28811: GO 28796
28813: POP
28814: POP
// end ;
28815: PPOPN 2
28817: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28818: LD_EXP 51
28822: PUSH
28823: LD_EXP 61
28827: AND
28828: IFFALSE 28848
28830: GO 28832
28832: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28833: LD_INT 32
28835: PPUSH
28836: LD_OWVAR 2
28840: PPUSH
28841: LD_INT 0
28843: PPUSH
28844: CALL_OW 324
28848: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28849: LD_EXP 51
28853: PUSH
28854: LD_EXP 62
28858: AND
28859: IFFALSE 29040
28861: GO 28863
28863: DISABLE
28864: LD_INT 0
28866: PPUSH
28867: PPUSH
28868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28869: LD_ADDR_VAR 0 2
28873: PUSH
28874: LD_INT 22
28876: PUSH
28877: LD_OWVAR 2
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 33
28888: PUSH
28889: LD_INT 3
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PPUSH
28900: CALL_OW 69
28904: ST_TO_ADDR
// if not tmp then
28905: LD_VAR 0 2
28909: NOT
28910: IFFALSE 28914
// exit ;
28912: GO 29040
// side := 0 ;
28914: LD_ADDR_VAR 0 3
28918: PUSH
28919: LD_INT 0
28921: ST_TO_ADDR
// for i := 1 to 8 do
28922: LD_ADDR_VAR 0 1
28926: PUSH
28927: DOUBLE
28928: LD_INT 1
28930: DEC
28931: ST_TO_ADDR
28932: LD_INT 8
28934: PUSH
28935: FOR_TO
28936: IFFALSE 28984
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28938: LD_OWVAR 2
28942: PUSH
28943: LD_VAR 0 1
28947: NONEQUAL
28948: PUSH
28949: LD_OWVAR 2
28953: PPUSH
28954: LD_VAR 0 1
28958: PPUSH
28959: CALL_OW 81
28963: PUSH
28964: LD_INT 2
28966: EQUAL
28967: AND
28968: IFFALSE 28982
// begin side := i ;
28970: LD_ADDR_VAR 0 3
28974: PUSH
28975: LD_VAR 0 1
28979: ST_TO_ADDR
// break ;
28980: GO 28984
// end ;
28982: GO 28935
28984: POP
28985: POP
// if not side then
28986: LD_VAR 0 3
28990: NOT
28991: IFFALSE 28995
// exit ;
28993: GO 29040
// for i := 1 to tmp do
28995: LD_ADDR_VAR 0 1
28999: PUSH
29000: DOUBLE
29001: LD_INT 1
29003: DEC
29004: ST_TO_ADDR
29005: LD_VAR 0 2
29009: PUSH
29010: FOR_TO
29011: IFFALSE 29038
// if Prob ( 60 ) then
29013: LD_INT 60
29015: PPUSH
29016: CALL_OW 13
29020: IFFALSE 29036
// SetSide ( i , side ) ;
29022: LD_VAR 0 1
29026: PPUSH
29027: LD_VAR 0 3
29031: PPUSH
29032: CALL_OW 235
29036: GO 29010
29038: POP
29039: POP
// end ;
29040: PPOPN 3
29042: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
29043: LD_EXP 51
29047: PUSH
29048: LD_EXP 64
29052: AND
29053: IFFALSE 29172
29055: GO 29057
29057: DISABLE
29058: LD_INT 0
29060: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
29061: LD_ADDR_VAR 0 1
29065: PUSH
29066: LD_INT 22
29068: PUSH
29069: LD_OWVAR 2
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 21
29080: PUSH
29081: LD_INT 1
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 3
29090: PUSH
29091: LD_INT 23
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: LIST
29109: PPUSH
29110: CALL_OW 69
29114: PUSH
29115: FOR_IN
29116: IFFALSE 29170
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
29118: LD_VAR 0 1
29122: PPUSH
29123: CALL_OW 257
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: LD_INT 2
29133: PUSH
29134: LD_INT 3
29136: PUSH
29137: LD_INT 4
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: IN
29146: IFFALSE 29168
// SetClass ( un , rand ( 1 , 4 ) ) ;
29148: LD_VAR 0 1
29152: PPUSH
29153: LD_INT 1
29155: PPUSH
29156: LD_INT 4
29158: PPUSH
29159: CALL_OW 12
29163: PPUSH
29164: CALL_OW 336
29168: GO 29115
29170: POP
29171: POP
// end ;
29172: PPOPN 1
29174: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
29175: LD_EXP 51
29179: PUSH
29180: LD_EXP 63
29184: AND
29185: IFFALSE 29264
29187: GO 29189
29189: DISABLE
29190: LD_INT 0
29192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29193: LD_ADDR_VAR 0 1
29197: PUSH
29198: LD_INT 22
29200: PUSH
29201: LD_OWVAR 2
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 21
29212: PUSH
29213: LD_INT 3
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PPUSH
29224: CALL_OW 69
29228: ST_TO_ADDR
// if not tmp then
29229: LD_VAR 0 1
29233: NOT
29234: IFFALSE 29238
// exit ;
29236: GO 29264
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
29238: LD_VAR 0 1
29242: PUSH
29243: LD_INT 1
29245: PPUSH
29246: LD_VAR 0 1
29250: PPUSH
29251: CALL_OW 12
29255: ARRAY
29256: PPUSH
29257: LD_INT 100
29259: PPUSH
29260: CALL_OW 234
// end ;
29264: PPOPN 1
29266: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29267: LD_EXP 51
29271: PUSH
29272: LD_EXP 65
29276: AND
29277: IFFALSE 29375
29279: GO 29281
29281: DISABLE
29282: LD_INT 0
29284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29285: LD_ADDR_VAR 0 1
29289: PUSH
29290: LD_INT 22
29292: PUSH
29293: LD_OWVAR 2
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 21
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PPUSH
29316: CALL_OW 69
29320: ST_TO_ADDR
// if not tmp then
29321: LD_VAR 0 1
29325: NOT
29326: IFFALSE 29330
// exit ;
29328: GO 29375
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29330: LD_VAR 0 1
29334: PUSH
29335: LD_INT 1
29337: PPUSH
29338: LD_VAR 0 1
29342: PPUSH
29343: CALL_OW 12
29347: ARRAY
29348: PPUSH
29349: LD_INT 1
29351: PPUSH
29352: LD_INT 4
29354: PPUSH
29355: CALL_OW 12
29359: PPUSH
29360: LD_INT 3000
29362: PPUSH
29363: LD_INT 9000
29365: PPUSH
29366: CALL_OW 12
29370: PPUSH
29371: CALL_OW 492
// end ;
29375: PPOPN 1
29377: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29378: LD_EXP 51
29382: PUSH
29383: LD_EXP 66
29387: AND
29388: IFFALSE 29408
29390: GO 29392
29392: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29393: LD_INT 1
29395: PPUSH
29396: LD_OWVAR 2
29400: PPUSH
29401: LD_INT 0
29403: PPUSH
29404: CALL_OW 324
29408: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29409: LD_EXP 51
29413: PUSH
29414: LD_EXP 67
29418: AND
29419: IFFALSE 29502
29421: GO 29423
29423: DISABLE
29424: LD_INT 0
29426: PPUSH
29427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29428: LD_ADDR_VAR 0 2
29432: PUSH
29433: LD_INT 22
29435: PUSH
29436: LD_OWVAR 2
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 21
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PPUSH
29459: CALL_OW 69
29463: ST_TO_ADDR
// if not tmp then
29464: LD_VAR 0 2
29468: NOT
29469: IFFALSE 29473
// exit ;
29471: GO 29502
// for i in tmp do
29473: LD_ADDR_VAR 0 1
29477: PUSH
29478: LD_VAR 0 2
29482: PUSH
29483: FOR_IN
29484: IFFALSE 29500
// SetBLevel ( i , 10 ) ;
29486: LD_VAR 0 1
29490: PPUSH
29491: LD_INT 10
29493: PPUSH
29494: CALL_OW 241
29498: GO 29483
29500: POP
29501: POP
// end ;
29502: PPOPN 2
29504: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29505: LD_EXP 51
29509: PUSH
29510: LD_EXP 68
29514: AND
29515: IFFALSE 29626
29517: GO 29519
29519: DISABLE
29520: LD_INT 0
29522: PPUSH
29523: PPUSH
29524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29525: LD_ADDR_VAR 0 3
29529: PUSH
29530: LD_INT 22
29532: PUSH
29533: LD_OWVAR 2
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 25
29544: PUSH
29545: LD_INT 1
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PPUSH
29556: CALL_OW 69
29560: ST_TO_ADDR
// if not tmp then
29561: LD_VAR 0 3
29565: NOT
29566: IFFALSE 29570
// exit ;
29568: GO 29626
// un := tmp [ rand ( 1 , tmp ) ] ;
29570: LD_ADDR_VAR 0 2
29574: PUSH
29575: LD_VAR 0 3
29579: PUSH
29580: LD_INT 1
29582: PPUSH
29583: LD_VAR 0 3
29587: PPUSH
29588: CALL_OW 12
29592: ARRAY
29593: ST_TO_ADDR
// if Crawls ( un ) then
29594: LD_VAR 0 2
29598: PPUSH
29599: CALL_OW 318
29603: IFFALSE 29614
// ComWalk ( un ) ;
29605: LD_VAR 0 2
29609: PPUSH
29610: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29614: LD_VAR 0 2
29618: PPUSH
29619: LD_INT 5
29621: PPUSH
29622: CALL_OW 336
// end ;
29626: PPOPN 3
29628: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29629: LD_EXP 51
29633: PUSH
29634: LD_EXP 69
29638: AND
29639: PUSH
29640: LD_OWVAR 67
29644: PUSH
29645: LD_INT 4
29647: LESS
29648: AND
29649: IFFALSE 29668
29651: GO 29653
29653: DISABLE
// begin Difficulty := Difficulty + 1 ;
29654: LD_ADDR_OWVAR 67
29658: PUSH
29659: LD_OWVAR 67
29663: PUSH
29664: LD_INT 1
29666: PLUS
29667: ST_TO_ADDR
// end ;
29668: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29669: LD_EXP 51
29673: PUSH
29674: LD_EXP 70
29678: AND
29679: IFFALSE 29782
29681: GO 29683
29683: DISABLE
29684: LD_INT 0
29686: PPUSH
// begin for i := 1 to 5 do
29687: LD_ADDR_VAR 0 1
29691: PUSH
29692: DOUBLE
29693: LD_INT 1
29695: DEC
29696: ST_TO_ADDR
29697: LD_INT 5
29699: PUSH
29700: FOR_TO
29701: IFFALSE 29780
// begin uc_nation := nation_nature ;
29703: LD_ADDR_OWVAR 21
29707: PUSH
29708: LD_INT 0
29710: ST_TO_ADDR
// uc_side := 0 ;
29711: LD_ADDR_OWVAR 20
29715: PUSH
29716: LD_INT 0
29718: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29719: LD_ADDR_OWVAR 29
29723: PUSH
29724: LD_INT 12
29726: PUSH
29727: LD_INT 12
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: ST_TO_ADDR
// hc_agressivity := 20 ;
29734: LD_ADDR_OWVAR 35
29738: PUSH
29739: LD_INT 20
29741: ST_TO_ADDR
// hc_class := class_tiger ;
29742: LD_ADDR_OWVAR 28
29746: PUSH
29747: LD_INT 14
29749: ST_TO_ADDR
// hc_gallery :=  ;
29750: LD_ADDR_OWVAR 33
29754: PUSH
29755: LD_STRING 
29757: ST_TO_ADDR
// hc_name :=  ;
29758: LD_ADDR_OWVAR 26
29762: PUSH
29763: LD_STRING 
29765: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29766: CALL_OW 44
29770: PPUSH
29771: LD_INT 0
29773: PPUSH
29774: CALL_OW 51
// end ;
29778: GO 29700
29780: POP
29781: POP
// end ;
29782: PPOPN 1
29784: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29785: LD_EXP 51
29789: PUSH
29790: LD_EXP 71
29794: AND
29795: IFFALSE 29804
29797: GO 29799
29799: DISABLE
// StreamSibBomb ;
29800: CALL 29805 0 0
29804: END
// export function StreamSibBomb ; var i , x , y ; begin
29805: LD_INT 0
29807: PPUSH
29808: PPUSH
29809: PPUSH
29810: PPUSH
// result := false ;
29811: LD_ADDR_VAR 0 1
29815: PUSH
29816: LD_INT 0
29818: ST_TO_ADDR
// for i := 1 to 16 do
29819: LD_ADDR_VAR 0 2
29823: PUSH
29824: DOUBLE
29825: LD_INT 1
29827: DEC
29828: ST_TO_ADDR
29829: LD_INT 16
29831: PUSH
29832: FOR_TO
29833: IFFALSE 30032
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29835: LD_ADDR_VAR 0 3
29839: PUSH
29840: LD_INT 10
29842: PUSH
29843: LD_INT 20
29845: PUSH
29846: LD_INT 30
29848: PUSH
29849: LD_INT 40
29851: PUSH
29852: LD_INT 50
29854: PUSH
29855: LD_INT 60
29857: PUSH
29858: LD_INT 70
29860: PUSH
29861: LD_INT 80
29863: PUSH
29864: LD_INT 90
29866: PUSH
29867: LD_INT 100
29869: PUSH
29870: LD_INT 110
29872: PUSH
29873: LD_INT 120
29875: PUSH
29876: LD_INT 130
29878: PUSH
29879: LD_INT 140
29881: PUSH
29882: LD_INT 150
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 1
29904: PPUSH
29905: LD_INT 15
29907: PPUSH
29908: CALL_OW 12
29912: ARRAY
29913: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29914: LD_ADDR_VAR 0 4
29918: PUSH
29919: LD_INT 10
29921: PUSH
29922: LD_INT 20
29924: PUSH
29925: LD_INT 30
29927: PUSH
29928: LD_INT 40
29930: PUSH
29931: LD_INT 50
29933: PUSH
29934: LD_INT 60
29936: PUSH
29937: LD_INT 70
29939: PUSH
29940: LD_INT 80
29942: PUSH
29943: LD_INT 90
29945: PUSH
29946: LD_INT 100
29948: PUSH
29949: LD_INT 110
29951: PUSH
29952: LD_INT 120
29954: PUSH
29955: LD_INT 130
29957: PUSH
29958: LD_INT 140
29960: PUSH
29961: LD_INT 150
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: PPUSH
29984: LD_INT 15
29986: PPUSH
29987: CALL_OW 12
29991: ARRAY
29992: ST_TO_ADDR
// if ValidHex ( x , y ) then
29993: LD_VAR 0 3
29997: PPUSH
29998: LD_VAR 0 4
30002: PPUSH
30003: CALL_OW 488
30007: IFFALSE 30030
// begin result := [ x , y ] ;
30009: LD_ADDR_VAR 0 1
30013: PUSH
30014: LD_VAR 0 3
30018: PUSH
30019: LD_VAR 0 4
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: ST_TO_ADDR
// break ;
30028: GO 30032
// end ; end ;
30030: GO 29832
30032: POP
30033: POP
// if result then
30034: LD_VAR 0 1
30038: IFFALSE 30098
// begin ToLua ( playSibBomb() ) ;
30040: LD_STRING playSibBomb()
30042: PPUSH
30043: CALL_OW 559
// wait ( 0 0$14 ) ;
30047: LD_INT 490
30049: PPUSH
30050: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
30054: LD_VAR 0 1
30058: PUSH
30059: LD_INT 1
30061: ARRAY
30062: PPUSH
30063: LD_VAR 0 1
30067: PUSH
30068: LD_INT 2
30070: ARRAY
30071: PPUSH
30072: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
30076: LD_VAR 0 1
30080: PUSH
30081: LD_INT 1
30083: ARRAY
30084: PPUSH
30085: LD_VAR 0 1
30089: PUSH
30090: LD_INT 2
30092: ARRAY
30093: PPUSH
30094: CALL_OW 429
// end ; end ;
30098: LD_VAR 0 1
30102: RET
// every 0 0$1 trigger StreamModeActive and sReset do
30103: LD_EXP 51
30107: PUSH
30108: LD_EXP 73
30112: AND
30113: IFFALSE 30125
30115: GO 30117
30117: DISABLE
// YouLost (  ) ;
30118: LD_STRING 
30120: PPUSH
30121: CALL_OW 104
30125: END
// every 0 0$1 trigger StreamModeActive and sFog do
30126: LD_EXP 51
30130: PUSH
30131: LD_EXP 72
30135: AND
30136: IFFALSE 30150
30138: GO 30140
30140: DISABLE
// FogOff ( your_side ) ;
30141: LD_OWVAR 2
30145: PPUSH
30146: CALL_OW 344
30150: END
// every 0 0$1 trigger StreamModeActive and sSun do
30151: LD_EXP 51
30155: PUSH
30156: LD_EXP 74
30160: AND
30161: IFFALSE 30189
30163: GO 30165
30165: DISABLE
// begin solar_recharge_percent := 0 ;
30166: LD_ADDR_OWVAR 79
30170: PUSH
30171: LD_INT 0
30173: ST_TO_ADDR
// wait ( 5 5$00 ) ;
30174: LD_INT 10500
30176: PPUSH
30177: CALL_OW 67
// solar_recharge_percent := 100 ;
30181: LD_ADDR_OWVAR 79
30185: PUSH
30186: LD_INT 100
30188: ST_TO_ADDR
// end ;
30189: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
30190: LD_EXP 51
30194: PUSH
30195: LD_EXP 75
30199: AND
30200: IFFALSE 30439
30202: GO 30204
30204: DISABLE
30205: LD_INT 0
30207: PPUSH
30208: PPUSH
30209: PPUSH
// begin tmp := [ ] ;
30210: LD_ADDR_VAR 0 3
30214: PUSH
30215: EMPTY
30216: ST_TO_ADDR
// for i := 1 to 6 do
30217: LD_ADDR_VAR 0 1
30221: PUSH
30222: DOUBLE
30223: LD_INT 1
30225: DEC
30226: ST_TO_ADDR
30227: LD_INT 6
30229: PUSH
30230: FOR_TO
30231: IFFALSE 30336
// begin uc_nation := nation_nature ;
30233: LD_ADDR_OWVAR 21
30237: PUSH
30238: LD_INT 0
30240: ST_TO_ADDR
// uc_side := 0 ;
30241: LD_ADDR_OWVAR 20
30245: PUSH
30246: LD_INT 0
30248: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30249: LD_ADDR_OWVAR 29
30253: PUSH
30254: LD_INT 12
30256: PUSH
30257: LD_INT 12
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: ST_TO_ADDR
// hc_agressivity := 20 ;
30264: LD_ADDR_OWVAR 35
30268: PUSH
30269: LD_INT 20
30271: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30272: LD_ADDR_OWVAR 28
30276: PUSH
30277: LD_INT 17
30279: ST_TO_ADDR
// hc_gallery :=  ;
30280: LD_ADDR_OWVAR 33
30284: PUSH
30285: LD_STRING 
30287: ST_TO_ADDR
// hc_name :=  ;
30288: LD_ADDR_OWVAR 26
30292: PUSH
30293: LD_STRING 
30295: ST_TO_ADDR
// un := CreateHuman ;
30296: LD_ADDR_VAR 0 2
30300: PUSH
30301: CALL_OW 44
30305: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30306: LD_VAR 0 2
30310: PPUSH
30311: LD_INT 1
30313: PPUSH
30314: CALL_OW 51
// tmp := tmp ^ un ;
30318: LD_ADDR_VAR 0 3
30322: PUSH
30323: LD_VAR 0 3
30327: PUSH
30328: LD_VAR 0 2
30332: ADD
30333: ST_TO_ADDR
// end ;
30334: GO 30230
30336: POP
30337: POP
// repeat wait ( 0 0$1 ) ;
30338: LD_INT 35
30340: PPUSH
30341: CALL_OW 67
// for un in tmp do
30345: LD_ADDR_VAR 0 2
30349: PUSH
30350: LD_VAR 0 3
30354: PUSH
30355: FOR_IN
30356: IFFALSE 30430
// begin if IsDead ( un ) then
30358: LD_VAR 0 2
30362: PPUSH
30363: CALL_OW 301
30367: IFFALSE 30387
// begin tmp := tmp diff un ;
30369: LD_ADDR_VAR 0 3
30373: PUSH
30374: LD_VAR 0 3
30378: PUSH
30379: LD_VAR 0 2
30383: DIFF
30384: ST_TO_ADDR
// continue ;
30385: GO 30355
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30387: LD_VAR 0 2
30391: PPUSH
30392: LD_INT 3
30394: PUSH
30395: LD_INT 22
30397: PUSH
30398: LD_INT 0
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PPUSH
30409: CALL_OW 69
30413: PPUSH
30414: LD_VAR 0 2
30418: PPUSH
30419: CALL_OW 74
30423: PPUSH
30424: CALL_OW 115
// end ;
30428: GO 30355
30430: POP
30431: POP
// until not tmp ;
30432: LD_VAR 0 3
30436: NOT
30437: IFFALSE 30338
// end ;
30439: PPOPN 3
30441: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30442: LD_EXP 51
30446: PUSH
30447: LD_EXP 76
30451: AND
30452: IFFALSE 30506
30454: GO 30456
30456: DISABLE
// begin ToLua ( displayTroll(); ) ;
30457: LD_STRING displayTroll();
30459: PPUSH
30460: CALL_OW 559
// wait ( 3 3$00 ) ;
30464: LD_INT 6300
30466: PPUSH
30467: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30471: LD_STRING hideTroll();
30473: PPUSH
30474: CALL_OW 559
// wait ( 1 1$00 ) ;
30478: LD_INT 2100
30480: PPUSH
30481: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30485: LD_STRING displayTroll();
30487: PPUSH
30488: CALL_OW 559
// wait ( 1 1$00 ) ;
30492: LD_INT 2100
30494: PPUSH
30495: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30499: LD_STRING hideTroll();
30501: PPUSH
30502: CALL_OW 559
// end ;
30506: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30507: LD_EXP 51
30511: PUSH
30512: LD_EXP 77
30516: AND
30517: IFFALSE 30580
30519: GO 30521
30521: DISABLE
30522: LD_INT 0
30524: PPUSH
// begin p := 0 ;
30525: LD_ADDR_VAR 0 1
30529: PUSH
30530: LD_INT 0
30532: ST_TO_ADDR
// repeat game_speed := 1 ;
30533: LD_ADDR_OWVAR 65
30537: PUSH
30538: LD_INT 1
30540: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30541: LD_INT 35
30543: PPUSH
30544: CALL_OW 67
// p := p + 1 ;
30548: LD_ADDR_VAR 0 1
30552: PUSH
30553: LD_VAR 0 1
30557: PUSH
30558: LD_INT 1
30560: PLUS
30561: ST_TO_ADDR
// until p >= 60 ;
30562: LD_VAR 0 1
30566: PUSH
30567: LD_INT 60
30569: GREATEREQUAL
30570: IFFALSE 30533
// game_speed := 4 ;
30572: LD_ADDR_OWVAR 65
30576: PUSH
30577: LD_INT 4
30579: ST_TO_ADDR
// end ;
30580: PPOPN 1
30582: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30583: LD_EXP 51
30587: PUSH
30588: LD_EXP 78
30592: AND
30593: IFFALSE 30739
30595: GO 30597
30597: DISABLE
30598: LD_INT 0
30600: PPUSH
30601: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30602: LD_ADDR_VAR 0 1
30606: PUSH
30607: LD_INT 22
30609: PUSH
30610: LD_OWVAR 2
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 2
30621: PUSH
30622: LD_INT 30
30624: PUSH
30625: LD_INT 0
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 30
30634: PUSH
30635: LD_INT 1
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: LIST
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PPUSH
30651: CALL_OW 69
30655: ST_TO_ADDR
// if not depot then
30656: LD_VAR 0 1
30660: NOT
30661: IFFALSE 30665
// exit ;
30663: GO 30739
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30665: LD_ADDR_VAR 0 2
30669: PUSH
30670: LD_VAR 0 1
30674: PUSH
30675: LD_INT 1
30677: PPUSH
30678: LD_VAR 0 1
30682: PPUSH
30683: CALL_OW 12
30687: ARRAY
30688: PPUSH
30689: CALL_OW 274
30693: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30694: LD_VAR 0 2
30698: PPUSH
30699: LD_INT 1
30701: PPUSH
30702: LD_INT 0
30704: PPUSH
30705: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30709: LD_VAR 0 2
30713: PPUSH
30714: LD_INT 2
30716: PPUSH
30717: LD_INT 0
30719: PPUSH
30720: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30724: LD_VAR 0 2
30728: PPUSH
30729: LD_INT 3
30731: PPUSH
30732: LD_INT 0
30734: PPUSH
30735: CALL_OW 277
// end ;
30739: PPOPN 2
30741: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30742: LD_EXP 51
30746: PUSH
30747: LD_EXP 79
30751: AND
30752: IFFALSE 30849
30754: GO 30756
30756: DISABLE
30757: LD_INT 0
30759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30760: LD_ADDR_VAR 0 1
30764: PUSH
30765: LD_INT 22
30767: PUSH
30768: LD_OWVAR 2
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 21
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 3
30789: PUSH
30790: LD_INT 23
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: LIST
30808: PPUSH
30809: CALL_OW 69
30813: ST_TO_ADDR
// if not tmp then
30814: LD_VAR 0 1
30818: NOT
30819: IFFALSE 30823
// exit ;
30821: GO 30849
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30823: LD_VAR 0 1
30827: PUSH
30828: LD_INT 1
30830: PPUSH
30831: LD_VAR 0 1
30835: PPUSH
30836: CALL_OW 12
30840: ARRAY
30841: PPUSH
30842: LD_INT 200
30844: PPUSH
30845: CALL_OW 234
// end ;
30849: PPOPN 1
30851: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30852: LD_EXP 51
30856: PUSH
30857: LD_EXP 80
30861: AND
30862: IFFALSE 30941
30864: GO 30866
30866: DISABLE
30867: LD_INT 0
30869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30870: LD_ADDR_VAR 0 1
30874: PUSH
30875: LD_INT 22
30877: PUSH
30878: LD_OWVAR 2
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 21
30889: PUSH
30890: LD_INT 2
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PPUSH
30901: CALL_OW 69
30905: ST_TO_ADDR
// if not tmp then
30906: LD_VAR 0 1
30910: NOT
30911: IFFALSE 30915
// exit ;
30913: GO 30941
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30915: LD_VAR 0 1
30919: PUSH
30920: LD_INT 1
30922: PPUSH
30923: LD_VAR 0 1
30927: PPUSH
30928: CALL_OW 12
30932: ARRAY
30933: PPUSH
30934: LD_INT 60
30936: PPUSH
30937: CALL_OW 234
// end ;
30941: PPOPN 1
30943: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30944: LD_EXP 51
30948: PUSH
30949: LD_EXP 81
30953: AND
30954: IFFALSE 31053
30956: GO 30958
30958: DISABLE
30959: LD_INT 0
30961: PPUSH
30962: PPUSH
// begin enable ;
30963: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30964: LD_ADDR_VAR 0 1
30968: PUSH
30969: LD_INT 22
30971: PUSH
30972: LD_OWVAR 2
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 61
30983: PUSH
30984: EMPTY
30985: LIST
30986: PUSH
30987: LD_INT 33
30989: PUSH
30990: LD_INT 2
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: LIST
31001: PPUSH
31002: CALL_OW 69
31006: ST_TO_ADDR
// if not tmp then
31007: LD_VAR 0 1
31011: NOT
31012: IFFALSE 31016
// exit ;
31014: GO 31053
// for i in tmp do
31016: LD_ADDR_VAR 0 2
31020: PUSH
31021: LD_VAR 0 1
31025: PUSH
31026: FOR_IN
31027: IFFALSE 31051
// if IsControledBy ( i ) then
31029: LD_VAR 0 2
31033: PPUSH
31034: CALL_OW 312
31038: IFFALSE 31049
// ComUnlink ( i ) ;
31040: LD_VAR 0 2
31044: PPUSH
31045: CALL_OW 136
31049: GO 31026
31051: POP
31052: POP
// end ;
31053: PPOPN 2
31055: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
31056: LD_EXP 51
31060: PUSH
31061: LD_EXP 82
31065: AND
31066: IFFALSE 31206
31068: GO 31070
31070: DISABLE
31071: LD_INT 0
31073: PPUSH
31074: PPUSH
// begin ToLua ( displayPowell(); ) ;
31075: LD_STRING displayPowell();
31077: PPUSH
31078: CALL_OW 559
// uc_side := 0 ;
31082: LD_ADDR_OWVAR 20
31086: PUSH
31087: LD_INT 0
31089: ST_TO_ADDR
// uc_nation := 2 ;
31090: LD_ADDR_OWVAR 21
31094: PUSH
31095: LD_INT 2
31097: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
31098: LD_ADDR_OWVAR 37
31102: PUSH
31103: LD_INT 14
31105: ST_TO_ADDR
// vc_engine := engine_siberite ;
31106: LD_ADDR_OWVAR 39
31110: PUSH
31111: LD_INT 3
31113: ST_TO_ADDR
// vc_control := control_apeman ;
31114: LD_ADDR_OWVAR 38
31118: PUSH
31119: LD_INT 5
31121: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
31122: LD_ADDR_OWVAR 40
31126: PUSH
31127: LD_INT 29
31129: ST_TO_ADDR
// un := CreateVehicle ;
31130: LD_ADDR_VAR 0 2
31134: PUSH
31135: CALL_OW 45
31139: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31140: LD_VAR 0 2
31144: PPUSH
31145: LD_INT 1
31147: PPUSH
31148: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31152: LD_INT 35
31154: PPUSH
31155: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31159: LD_VAR 0 2
31163: PPUSH
31164: LD_INT 22
31166: PUSH
31167: LD_OWVAR 2
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PPUSH
31176: CALL_OW 69
31180: PPUSH
31181: LD_VAR 0 2
31185: PPUSH
31186: CALL_OW 74
31190: PPUSH
31191: CALL_OW 115
// until IsDead ( un ) ;
31195: LD_VAR 0 2
31199: PPUSH
31200: CALL_OW 301
31204: IFFALSE 31152
// end ;
31206: PPOPN 2
31208: END
// every 0 0$1 trigger StreamModeActive and sStu do
31209: LD_EXP 51
31213: PUSH
31214: LD_EXP 90
31218: AND
31219: IFFALSE 31235
31221: GO 31223
31223: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31224: LD_STRING displayStucuk();
31226: PPUSH
31227: CALL_OW 559
// ResetFog ;
31231: CALL_OW 335
// end ;
31235: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31236: LD_EXP 51
31240: PUSH
31241: LD_EXP 83
31245: AND
31246: IFFALSE 31387
31248: GO 31250
31250: DISABLE
31251: LD_INT 0
31253: PPUSH
31254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31255: LD_ADDR_VAR 0 2
31259: PUSH
31260: LD_INT 22
31262: PUSH
31263: LD_OWVAR 2
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 21
31274: PUSH
31275: LD_INT 1
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PPUSH
31286: CALL_OW 69
31290: ST_TO_ADDR
// if not tmp then
31291: LD_VAR 0 2
31295: NOT
31296: IFFALSE 31300
// exit ;
31298: GO 31387
// un := tmp [ rand ( 1 , tmp ) ] ;
31300: LD_ADDR_VAR 0 1
31304: PUSH
31305: LD_VAR 0 2
31309: PUSH
31310: LD_INT 1
31312: PPUSH
31313: LD_VAR 0 2
31317: PPUSH
31318: CALL_OW 12
31322: ARRAY
31323: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31324: LD_VAR 0 1
31328: PPUSH
31329: LD_INT 0
31331: PPUSH
31332: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31336: LD_VAR 0 1
31340: PPUSH
31341: LD_OWVAR 3
31345: PUSH
31346: LD_VAR 0 1
31350: DIFF
31351: PPUSH
31352: LD_VAR 0 1
31356: PPUSH
31357: CALL_OW 74
31361: PPUSH
31362: CALL_OW 115
// wait ( 0 0$20 ) ;
31366: LD_INT 700
31368: PPUSH
31369: CALL_OW 67
// SetSide ( un , your_side ) ;
31373: LD_VAR 0 1
31377: PPUSH
31378: LD_OWVAR 2
31382: PPUSH
31383: CALL_OW 235
// end ;
31387: PPOPN 2
31389: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31390: LD_EXP 51
31394: PUSH
31395: LD_EXP 84
31399: AND
31400: IFFALSE 31506
31402: GO 31404
31404: DISABLE
31405: LD_INT 0
31407: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31408: LD_ADDR_VAR 0 1
31412: PUSH
31413: LD_INT 22
31415: PUSH
31416: LD_OWVAR 2
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 2
31427: PUSH
31428: LD_INT 30
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 30
31440: PUSH
31441: LD_INT 1
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: LIST
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PPUSH
31457: CALL_OW 69
31461: ST_TO_ADDR
// if not depot then
31462: LD_VAR 0 1
31466: NOT
31467: IFFALSE 31471
// exit ;
31469: GO 31506
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31471: LD_VAR 0 1
31475: PUSH
31476: LD_INT 1
31478: ARRAY
31479: PPUSH
31480: CALL_OW 250
31484: PPUSH
31485: LD_VAR 0 1
31489: PUSH
31490: LD_INT 1
31492: ARRAY
31493: PPUSH
31494: CALL_OW 251
31498: PPUSH
31499: LD_INT 70
31501: PPUSH
31502: CALL_OW 495
// end ;
31506: PPOPN 1
31508: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31509: LD_EXP 51
31513: PUSH
31514: LD_EXP 85
31518: AND
31519: IFFALSE 31730
31521: GO 31523
31523: DISABLE
31524: LD_INT 0
31526: PPUSH
31527: PPUSH
31528: PPUSH
31529: PPUSH
31530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31531: LD_ADDR_VAR 0 5
31535: PUSH
31536: LD_INT 22
31538: PUSH
31539: LD_OWVAR 2
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 21
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PPUSH
31562: CALL_OW 69
31566: ST_TO_ADDR
// if not tmp then
31567: LD_VAR 0 5
31571: NOT
31572: IFFALSE 31576
// exit ;
31574: GO 31730
// for i in tmp do
31576: LD_ADDR_VAR 0 1
31580: PUSH
31581: LD_VAR 0 5
31585: PUSH
31586: FOR_IN
31587: IFFALSE 31728
// begin d := rand ( 0 , 5 ) ;
31589: LD_ADDR_VAR 0 4
31593: PUSH
31594: LD_INT 0
31596: PPUSH
31597: LD_INT 5
31599: PPUSH
31600: CALL_OW 12
31604: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31605: LD_ADDR_VAR 0 2
31609: PUSH
31610: LD_VAR 0 1
31614: PPUSH
31615: CALL_OW 250
31619: PPUSH
31620: LD_VAR 0 4
31624: PPUSH
31625: LD_INT 3
31627: PPUSH
31628: LD_INT 12
31630: PPUSH
31631: CALL_OW 12
31635: PPUSH
31636: CALL_OW 272
31640: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31641: LD_ADDR_VAR 0 3
31645: PUSH
31646: LD_VAR 0 1
31650: PPUSH
31651: CALL_OW 251
31655: PPUSH
31656: LD_VAR 0 4
31660: PPUSH
31661: LD_INT 3
31663: PPUSH
31664: LD_INT 12
31666: PPUSH
31667: CALL_OW 12
31671: PPUSH
31672: CALL_OW 273
31676: ST_TO_ADDR
// if ValidHex ( x , y ) then
31677: LD_VAR 0 2
31681: PPUSH
31682: LD_VAR 0 3
31686: PPUSH
31687: CALL_OW 488
31691: IFFALSE 31726
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31693: LD_VAR 0 1
31697: PPUSH
31698: LD_VAR 0 2
31702: PPUSH
31703: LD_VAR 0 3
31707: PPUSH
31708: LD_INT 3
31710: PPUSH
31711: LD_INT 6
31713: PPUSH
31714: CALL_OW 12
31718: PPUSH
31719: LD_INT 1
31721: PPUSH
31722: CALL_OW 483
// end ;
31726: GO 31586
31728: POP
31729: POP
// end ;
31730: PPOPN 5
31732: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31733: LD_EXP 51
31737: PUSH
31738: LD_EXP 86
31742: AND
31743: IFFALSE 31837
31745: GO 31747
31747: DISABLE
31748: LD_INT 0
31750: PPUSH
31751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31752: LD_ADDR_VAR 0 2
31756: PUSH
31757: LD_INT 22
31759: PUSH
31760: LD_OWVAR 2
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 32
31771: PUSH
31772: LD_INT 1
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 21
31781: PUSH
31782: LD_INT 2
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: LIST
31793: PPUSH
31794: CALL_OW 69
31798: ST_TO_ADDR
// if not tmp then
31799: LD_VAR 0 2
31803: NOT
31804: IFFALSE 31808
// exit ;
31806: GO 31837
// for i in tmp do
31808: LD_ADDR_VAR 0 1
31812: PUSH
31813: LD_VAR 0 2
31817: PUSH
31818: FOR_IN
31819: IFFALSE 31835
// SetFuel ( i , 0 ) ;
31821: LD_VAR 0 1
31825: PPUSH
31826: LD_INT 0
31828: PPUSH
31829: CALL_OW 240
31833: GO 31818
31835: POP
31836: POP
// end ;
31837: PPOPN 2
31839: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31840: LD_EXP 51
31844: PUSH
31845: LD_EXP 87
31849: AND
31850: IFFALSE 31916
31852: GO 31854
31854: DISABLE
31855: LD_INT 0
31857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31858: LD_ADDR_VAR 0 1
31862: PUSH
31863: LD_INT 22
31865: PUSH
31866: LD_OWVAR 2
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 30
31877: PUSH
31878: LD_INT 29
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PPUSH
31889: CALL_OW 69
31893: ST_TO_ADDR
// if not tmp then
31894: LD_VAR 0 1
31898: NOT
31899: IFFALSE 31903
// exit ;
31901: GO 31916
// DestroyUnit ( tmp [ 1 ] ) ;
31903: LD_VAR 0 1
31907: PUSH
31908: LD_INT 1
31910: ARRAY
31911: PPUSH
31912: CALL_OW 65
// end ;
31916: PPOPN 1
31918: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31919: LD_EXP 51
31923: PUSH
31924: LD_EXP 89
31928: AND
31929: IFFALSE 32058
31931: GO 31933
31933: DISABLE
31934: LD_INT 0
31936: PPUSH
// begin uc_side := 0 ;
31937: LD_ADDR_OWVAR 20
31941: PUSH
31942: LD_INT 0
31944: ST_TO_ADDR
// uc_nation := nation_arabian ;
31945: LD_ADDR_OWVAR 21
31949: PUSH
31950: LD_INT 2
31952: ST_TO_ADDR
// hc_gallery :=  ;
31953: LD_ADDR_OWVAR 33
31957: PUSH
31958: LD_STRING 
31960: ST_TO_ADDR
// hc_name :=  ;
31961: LD_ADDR_OWVAR 26
31965: PUSH
31966: LD_STRING 
31968: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31969: LD_INT 1
31971: PPUSH
31972: LD_INT 11
31974: PPUSH
31975: LD_INT 10
31977: PPUSH
31978: CALL_OW 380
// un := CreateHuman ;
31982: LD_ADDR_VAR 0 1
31986: PUSH
31987: CALL_OW 44
31991: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31992: LD_VAR 0 1
31996: PPUSH
31997: LD_INT 1
31999: PPUSH
32000: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32004: LD_INT 35
32006: PPUSH
32007: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32011: LD_VAR 0 1
32015: PPUSH
32016: LD_INT 22
32018: PUSH
32019: LD_OWVAR 2
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PPUSH
32028: CALL_OW 69
32032: PPUSH
32033: LD_VAR 0 1
32037: PPUSH
32038: CALL_OW 74
32042: PPUSH
32043: CALL_OW 115
// until IsDead ( un ) ;
32047: LD_VAR 0 1
32051: PPUSH
32052: CALL_OW 301
32056: IFFALSE 32004
// end ;
32058: PPOPN 1
32060: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
32061: LD_EXP 51
32065: PUSH
32066: LD_EXP 91
32070: AND
32071: IFFALSE 32083
32073: GO 32075
32075: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
32076: LD_STRING earthquake(getX(game), 0, 32)
32078: PPUSH
32079: CALL_OW 559
32083: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
32084: LD_EXP 51
32088: PUSH
32089: LD_EXP 92
32093: AND
32094: IFFALSE 32185
32096: GO 32098
32098: DISABLE
32099: LD_INT 0
32101: PPUSH
// begin enable ;
32102: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
32103: LD_ADDR_VAR 0 1
32107: PUSH
32108: LD_INT 22
32110: PUSH
32111: LD_OWVAR 2
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 21
32122: PUSH
32123: LD_INT 2
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 33
32132: PUSH
32133: LD_INT 3
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: LIST
32144: PPUSH
32145: CALL_OW 69
32149: ST_TO_ADDR
// if not tmp then
32150: LD_VAR 0 1
32154: NOT
32155: IFFALSE 32159
// exit ;
32157: GO 32185
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32159: LD_VAR 0 1
32163: PUSH
32164: LD_INT 1
32166: PPUSH
32167: LD_VAR 0 1
32171: PPUSH
32172: CALL_OW 12
32176: ARRAY
32177: PPUSH
32178: LD_INT 1
32180: PPUSH
32181: CALL_OW 234
// end ;
32185: PPOPN 1
32187: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
32188: LD_EXP 51
32192: PUSH
32193: LD_EXP 93
32197: AND
32198: IFFALSE 32339
32200: GO 32202
32202: DISABLE
32203: LD_INT 0
32205: PPUSH
32206: PPUSH
32207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32208: LD_ADDR_VAR 0 3
32212: PUSH
32213: LD_INT 22
32215: PUSH
32216: LD_OWVAR 2
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 25
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PPUSH
32239: CALL_OW 69
32243: ST_TO_ADDR
// if not tmp then
32244: LD_VAR 0 3
32248: NOT
32249: IFFALSE 32253
// exit ;
32251: GO 32339
// un := tmp [ rand ( 1 , tmp ) ] ;
32253: LD_ADDR_VAR 0 2
32257: PUSH
32258: LD_VAR 0 3
32262: PUSH
32263: LD_INT 1
32265: PPUSH
32266: LD_VAR 0 3
32270: PPUSH
32271: CALL_OW 12
32275: ARRAY
32276: ST_TO_ADDR
// if Crawls ( un ) then
32277: LD_VAR 0 2
32281: PPUSH
32282: CALL_OW 318
32286: IFFALSE 32297
// ComWalk ( un ) ;
32288: LD_VAR 0 2
32292: PPUSH
32293: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32297: LD_VAR 0 2
32301: PPUSH
32302: LD_INT 9
32304: PPUSH
32305: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32309: LD_INT 28
32311: PPUSH
32312: LD_OWVAR 2
32316: PPUSH
32317: LD_INT 2
32319: PPUSH
32320: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32324: LD_INT 29
32326: PPUSH
32327: LD_OWVAR 2
32331: PPUSH
32332: LD_INT 2
32334: PPUSH
32335: CALL_OW 322
// end ;
32339: PPOPN 3
32341: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32342: LD_EXP 51
32346: PUSH
32347: LD_EXP 94
32351: AND
32352: IFFALSE 32463
32354: GO 32356
32356: DISABLE
32357: LD_INT 0
32359: PPUSH
32360: PPUSH
32361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32362: LD_ADDR_VAR 0 3
32366: PUSH
32367: LD_INT 22
32369: PUSH
32370: LD_OWVAR 2
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 25
32381: PUSH
32382: LD_INT 1
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PPUSH
32393: CALL_OW 69
32397: ST_TO_ADDR
// if not tmp then
32398: LD_VAR 0 3
32402: NOT
32403: IFFALSE 32407
// exit ;
32405: GO 32463
// un := tmp [ rand ( 1 , tmp ) ] ;
32407: LD_ADDR_VAR 0 2
32411: PUSH
32412: LD_VAR 0 3
32416: PUSH
32417: LD_INT 1
32419: PPUSH
32420: LD_VAR 0 3
32424: PPUSH
32425: CALL_OW 12
32429: ARRAY
32430: ST_TO_ADDR
// if Crawls ( un ) then
32431: LD_VAR 0 2
32435: PPUSH
32436: CALL_OW 318
32440: IFFALSE 32451
// ComWalk ( un ) ;
32442: LD_VAR 0 2
32446: PPUSH
32447: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32451: LD_VAR 0 2
32455: PPUSH
32456: LD_INT 8
32458: PPUSH
32459: CALL_OW 336
// end ;
32463: PPOPN 3
32465: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32466: LD_EXP 51
32470: PUSH
32471: LD_EXP 95
32475: AND
32476: IFFALSE 32620
32478: GO 32480
32480: DISABLE
32481: LD_INT 0
32483: PPUSH
32484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32485: LD_ADDR_VAR 0 2
32489: PUSH
32490: LD_INT 22
32492: PUSH
32493: LD_OWVAR 2
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 21
32504: PUSH
32505: LD_INT 2
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 2
32514: PUSH
32515: LD_INT 34
32517: PUSH
32518: LD_INT 12
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 34
32527: PUSH
32528: LD_INT 51
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 34
32537: PUSH
32538: LD_INT 32
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: LIST
32555: PPUSH
32556: CALL_OW 69
32560: ST_TO_ADDR
// if not tmp then
32561: LD_VAR 0 2
32565: NOT
32566: IFFALSE 32570
// exit ;
32568: GO 32620
// for i in tmp do
32570: LD_ADDR_VAR 0 1
32574: PUSH
32575: LD_VAR 0 2
32579: PUSH
32580: FOR_IN
32581: IFFALSE 32618
// if GetCargo ( i , mat_artifact ) = 0 then
32583: LD_VAR 0 1
32587: PPUSH
32588: LD_INT 4
32590: PPUSH
32591: CALL_OW 289
32595: PUSH
32596: LD_INT 0
32598: EQUAL
32599: IFFALSE 32616
// SetCargo ( i , mat_siberit , 100 ) ;
32601: LD_VAR 0 1
32605: PPUSH
32606: LD_INT 3
32608: PPUSH
32609: LD_INT 100
32611: PPUSH
32612: CALL_OW 290
32616: GO 32580
32618: POP
32619: POP
// end ;
32620: PPOPN 2
32622: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32623: LD_EXP 51
32627: PUSH
32628: LD_EXP 96
32632: AND
32633: IFFALSE 32816
32635: GO 32637
32637: DISABLE
32638: LD_INT 0
32640: PPUSH
32641: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32642: LD_ADDR_VAR 0 2
32646: PUSH
32647: LD_INT 22
32649: PUSH
32650: LD_OWVAR 2
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PPUSH
32659: CALL_OW 69
32663: ST_TO_ADDR
// if not tmp then
32664: LD_VAR 0 2
32668: NOT
32669: IFFALSE 32673
// exit ;
32671: GO 32816
// for i := 1 to 2 do
32673: LD_ADDR_VAR 0 1
32677: PUSH
32678: DOUBLE
32679: LD_INT 1
32681: DEC
32682: ST_TO_ADDR
32683: LD_INT 2
32685: PUSH
32686: FOR_TO
32687: IFFALSE 32814
// begin uc_side := your_side ;
32689: LD_ADDR_OWVAR 20
32693: PUSH
32694: LD_OWVAR 2
32698: ST_TO_ADDR
// uc_nation := nation_american ;
32699: LD_ADDR_OWVAR 21
32703: PUSH
32704: LD_INT 1
32706: ST_TO_ADDR
// vc_chassis := us_morphling ;
32707: LD_ADDR_OWVAR 37
32711: PUSH
32712: LD_INT 5
32714: ST_TO_ADDR
// vc_engine := engine_siberite ;
32715: LD_ADDR_OWVAR 39
32719: PUSH
32720: LD_INT 3
32722: ST_TO_ADDR
// vc_control := control_computer ;
32723: LD_ADDR_OWVAR 38
32727: PUSH
32728: LD_INT 3
32730: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32731: LD_ADDR_OWVAR 40
32735: PUSH
32736: LD_INT 10
32738: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32739: LD_VAR 0 2
32743: PUSH
32744: LD_INT 1
32746: ARRAY
32747: PPUSH
32748: CALL_OW 310
32752: NOT
32753: IFFALSE 32800
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32755: CALL_OW 45
32759: PPUSH
32760: LD_VAR 0 2
32764: PUSH
32765: LD_INT 1
32767: ARRAY
32768: PPUSH
32769: CALL_OW 250
32773: PPUSH
32774: LD_VAR 0 2
32778: PUSH
32779: LD_INT 1
32781: ARRAY
32782: PPUSH
32783: CALL_OW 251
32787: PPUSH
32788: LD_INT 12
32790: PPUSH
32791: LD_INT 1
32793: PPUSH
32794: CALL_OW 50
32798: GO 32812
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32800: CALL_OW 45
32804: PPUSH
32805: LD_INT 1
32807: PPUSH
32808: CALL_OW 51
// end ;
32812: GO 32686
32814: POP
32815: POP
// end ;
32816: PPOPN 2
32818: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32819: LD_EXP 51
32823: PUSH
32824: LD_EXP 97
32828: AND
32829: IFFALSE 33051
32831: GO 32833
32833: DISABLE
32834: LD_INT 0
32836: PPUSH
32837: PPUSH
32838: PPUSH
32839: PPUSH
32840: PPUSH
32841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32842: LD_ADDR_VAR 0 6
32846: PUSH
32847: LD_INT 22
32849: PUSH
32850: LD_OWVAR 2
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 21
32861: PUSH
32862: LD_INT 1
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 3
32871: PUSH
32872: LD_INT 23
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: LIST
32890: PPUSH
32891: CALL_OW 69
32895: ST_TO_ADDR
// if not tmp then
32896: LD_VAR 0 6
32900: NOT
32901: IFFALSE 32905
// exit ;
32903: GO 33051
// s1 := rand ( 1 , 4 ) ;
32905: LD_ADDR_VAR 0 2
32909: PUSH
32910: LD_INT 1
32912: PPUSH
32913: LD_INT 4
32915: PPUSH
32916: CALL_OW 12
32920: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32921: LD_ADDR_VAR 0 4
32925: PUSH
32926: LD_VAR 0 6
32930: PUSH
32931: LD_INT 1
32933: ARRAY
32934: PPUSH
32935: LD_VAR 0 2
32939: PPUSH
32940: CALL_OW 259
32944: ST_TO_ADDR
// if s1 = 1 then
32945: LD_VAR 0 2
32949: PUSH
32950: LD_INT 1
32952: EQUAL
32953: IFFALSE 32973
// s2 := rand ( 2 , 4 ) else
32955: LD_ADDR_VAR 0 3
32959: PUSH
32960: LD_INT 2
32962: PPUSH
32963: LD_INT 4
32965: PPUSH
32966: CALL_OW 12
32970: ST_TO_ADDR
32971: GO 32981
// s2 := 1 ;
32973: LD_ADDR_VAR 0 3
32977: PUSH
32978: LD_INT 1
32980: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32981: LD_ADDR_VAR 0 5
32985: PUSH
32986: LD_VAR 0 6
32990: PUSH
32991: LD_INT 1
32993: ARRAY
32994: PPUSH
32995: LD_VAR 0 3
32999: PPUSH
33000: CALL_OW 259
33004: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
33005: LD_VAR 0 6
33009: PUSH
33010: LD_INT 1
33012: ARRAY
33013: PPUSH
33014: LD_VAR 0 2
33018: PPUSH
33019: LD_VAR 0 5
33023: PPUSH
33024: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
33028: LD_VAR 0 6
33032: PUSH
33033: LD_INT 1
33035: ARRAY
33036: PPUSH
33037: LD_VAR 0 3
33041: PPUSH
33042: LD_VAR 0 4
33046: PPUSH
33047: CALL_OW 237
// end ;
33051: PPOPN 6
33053: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
33054: LD_EXP 51
33058: PUSH
33059: LD_EXP 98
33063: AND
33064: IFFALSE 33143
33066: GO 33068
33068: DISABLE
33069: LD_INT 0
33071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
33072: LD_ADDR_VAR 0 1
33076: PUSH
33077: LD_INT 22
33079: PUSH
33080: LD_OWVAR 2
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 30
33091: PUSH
33092: LD_INT 3
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PPUSH
33103: CALL_OW 69
33107: ST_TO_ADDR
// if not tmp then
33108: LD_VAR 0 1
33112: NOT
33113: IFFALSE 33117
// exit ;
33115: GO 33143
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33117: LD_VAR 0 1
33121: PUSH
33122: LD_INT 1
33124: PPUSH
33125: LD_VAR 0 1
33129: PPUSH
33130: CALL_OW 12
33134: ARRAY
33135: PPUSH
33136: LD_INT 1
33138: PPUSH
33139: CALL_OW 234
// end ;
33143: PPOPN 1
33145: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
33146: LD_EXP 51
33150: PUSH
33151: LD_EXP 99
33155: AND
33156: IFFALSE 33268
33158: GO 33160
33160: DISABLE
33161: LD_INT 0
33163: PPUSH
33164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
33165: LD_ADDR_VAR 0 2
33169: PUSH
33170: LD_INT 22
33172: PUSH
33173: LD_OWVAR 2
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 2
33184: PUSH
33185: LD_INT 30
33187: PUSH
33188: LD_INT 27
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 30
33197: PUSH
33198: LD_INT 26
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 30
33207: PUSH
33208: LD_INT 28
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PPUSH
33225: CALL_OW 69
33229: ST_TO_ADDR
// if not tmp then
33230: LD_VAR 0 2
33234: NOT
33235: IFFALSE 33239
// exit ;
33237: GO 33268
// for i in tmp do
33239: LD_ADDR_VAR 0 1
33243: PUSH
33244: LD_VAR 0 2
33248: PUSH
33249: FOR_IN
33250: IFFALSE 33266
// SetLives ( i , 1 ) ;
33252: LD_VAR 0 1
33256: PPUSH
33257: LD_INT 1
33259: PPUSH
33260: CALL_OW 234
33264: GO 33249
33266: POP
33267: POP
// end ;
33268: PPOPN 2
33270: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33271: LD_EXP 51
33275: PUSH
33276: LD_EXP 100
33280: AND
33281: IFFALSE 33568
33283: GO 33285
33285: DISABLE
33286: LD_INT 0
33288: PPUSH
33289: PPUSH
33290: PPUSH
// begin i := rand ( 1 , 7 ) ;
33291: LD_ADDR_VAR 0 1
33295: PUSH
33296: LD_INT 1
33298: PPUSH
33299: LD_INT 7
33301: PPUSH
33302: CALL_OW 12
33306: ST_TO_ADDR
// case i of 1 :
33307: LD_VAR 0 1
33311: PUSH
33312: LD_INT 1
33314: DOUBLE
33315: EQUAL
33316: IFTRUE 33320
33318: GO 33330
33320: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33321: LD_STRING earthquake(getX(game), 0, 32)
33323: PPUSH
33324: CALL_OW 559
33328: GO 33568
33330: LD_INT 2
33332: DOUBLE
33333: EQUAL
33334: IFTRUE 33338
33336: GO 33352
33338: POP
// begin ToLua ( displayStucuk(); ) ;
33339: LD_STRING displayStucuk();
33341: PPUSH
33342: CALL_OW 559
// ResetFog ;
33346: CALL_OW 335
// end ; 3 :
33350: GO 33568
33352: LD_INT 3
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33464
33360: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33361: LD_ADDR_VAR 0 2
33365: PUSH
33366: LD_INT 22
33368: PUSH
33369: LD_OWVAR 2
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 25
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PPUSH
33392: CALL_OW 69
33396: ST_TO_ADDR
// if not tmp then
33397: LD_VAR 0 2
33401: NOT
33402: IFFALSE 33406
// exit ;
33404: GO 33568
// un := tmp [ rand ( 1 , tmp ) ] ;
33406: LD_ADDR_VAR 0 3
33410: PUSH
33411: LD_VAR 0 2
33415: PUSH
33416: LD_INT 1
33418: PPUSH
33419: LD_VAR 0 2
33423: PPUSH
33424: CALL_OW 12
33428: ARRAY
33429: ST_TO_ADDR
// if Crawls ( un ) then
33430: LD_VAR 0 3
33434: PPUSH
33435: CALL_OW 318
33439: IFFALSE 33450
// ComWalk ( un ) ;
33441: LD_VAR 0 3
33445: PPUSH
33446: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33450: LD_VAR 0 3
33454: PPUSH
33455: LD_INT 8
33457: PPUSH
33458: CALL_OW 336
// end ; 4 :
33462: GO 33568
33464: LD_INT 4
33466: DOUBLE
33467: EQUAL
33468: IFTRUE 33472
33470: GO 33546
33472: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33473: LD_ADDR_VAR 0 2
33477: PUSH
33478: LD_INT 22
33480: PUSH
33481: LD_OWVAR 2
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 30
33492: PUSH
33493: LD_INT 29
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PPUSH
33504: CALL_OW 69
33508: ST_TO_ADDR
// if not tmp then
33509: LD_VAR 0 2
33513: NOT
33514: IFFALSE 33518
// exit ;
33516: GO 33568
// CenterNowOnUnits ( tmp [ 1 ] ) ;
33518: LD_VAR 0 2
33522: PUSH
33523: LD_INT 1
33525: ARRAY
33526: PPUSH
33527: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
33531: LD_VAR 0 2
33535: PUSH
33536: LD_INT 1
33538: ARRAY
33539: PPUSH
33540: CALL_OW 65
// end ; 5 .. 7 :
33544: GO 33568
33546: LD_INT 5
33548: DOUBLE
33549: GREATEREQUAL
33550: IFFALSE 33558
33552: LD_INT 7
33554: DOUBLE
33555: LESSEQUAL
33556: IFTRUE 33560
33558: GO 33567
33560: POP
// StreamSibBomb ; end ;
33561: CALL 29805 0 0
33565: GO 33568
33567: POP
// end ;
33568: PPOPN 3
33570: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33571: LD_EXP 51
33575: PUSH
33576: LD_EXP 101
33580: AND
33581: IFFALSE 33737
33583: GO 33585
33585: DISABLE
33586: LD_INT 0
33588: PPUSH
33589: PPUSH
33590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33591: LD_ADDR_VAR 0 2
33595: PUSH
33596: LD_INT 81
33598: PUSH
33599: LD_OWVAR 2
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 2
33610: PUSH
33611: LD_INT 21
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 21
33623: PUSH
33624: LD_INT 2
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: LIST
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PPUSH
33640: CALL_OW 69
33644: ST_TO_ADDR
// if not tmp then
33645: LD_VAR 0 2
33649: NOT
33650: IFFALSE 33654
// exit ;
33652: GO 33737
// p := 0 ;
33654: LD_ADDR_VAR 0 3
33658: PUSH
33659: LD_INT 0
33661: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33662: LD_INT 35
33664: PPUSH
33665: CALL_OW 67
// p := p + 1 ;
33669: LD_ADDR_VAR 0 3
33673: PUSH
33674: LD_VAR 0 3
33678: PUSH
33679: LD_INT 1
33681: PLUS
33682: ST_TO_ADDR
// for i in tmp do
33683: LD_ADDR_VAR 0 1
33687: PUSH
33688: LD_VAR 0 2
33692: PUSH
33693: FOR_IN
33694: IFFALSE 33725
// if GetLives ( i ) < 1000 then
33696: LD_VAR 0 1
33700: PPUSH
33701: CALL_OW 256
33705: PUSH
33706: LD_INT 1000
33708: LESS
33709: IFFALSE 33723
// SetLives ( i , 1000 ) ;
33711: LD_VAR 0 1
33715: PPUSH
33716: LD_INT 1000
33718: PPUSH
33719: CALL_OW 234
33723: GO 33693
33725: POP
33726: POP
// until p > 20 ;
33727: LD_VAR 0 3
33731: PUSH
33732: LD_INT 20
33734: GREATER
33735: IFFALSE 33662
// end ;
33737: PPOPN 3
33739: END
// every 0 0$1 trigger StreamModeActive and sTime do
33740: LD_EXP 51
33744: PUSH
33745: LD_EXP 102
33749: AND
33750: IFFALSE 33785
33752: GO 33754
33754: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33755: LD_INT 28
33757: PPUSH
33758: LD_OWVAR 2
33762: PPUSH
33763: LD_INT 2
33765: PPUSH
33766: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33770: LD_INT 30
33772: PPUSH
33773: LD_OWVAR 2
33777: PPUSH
33778: LD_INT 2
33780: PPUSH
33781: CALL_OW 322
// end ;
33785: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33786: LD_EXP 51
33790: PUSH
33791: LD_EXP 103
33795: AND
33796: IFFALSE 33917
33798: GO 33800
33800: DISABLE
33801: LD_INT 0
33803: PPUSH
33804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33805: LD_ADDR_VAR 0 2
33809: PUSH
33810: LD_INT 22
33812: PUSH
33813: LD_OWVAR 2
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 21
33824: PUSH
33825: LD_INT 1
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 3
33834: PUSH
33835: LD_INT 23
33837: PUSH
33838: LD_INT 0
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: LIST
33853: PPUSH
33854: CALL_OW 69
33858: ST_TO_ADDR
// if not tmp then
33859: LD_VAR 0 2
33863: NOT
33864: IFFALSE 33868
// exit ;
33866: GO 33917
// for i in tmp do
33868: LD_ADDR_VAR 0 1
33872: PUSH
33873: LD_VAR 0 2
33877: PUSH
33878: FOR_IN
33879: IFFALSE 33915
// begin if Crawls ( i ) then
33881: LD_VAR 0 1
33885: PPUSH
33886: CALL_OW 318
33890: IFFALSE 33901
// ComWalk ( i ) ;
33892: LD_VAR 0 1
33896: PPUSH
33897: CALL_OW 138
// SetClass ( i , 2 ) ;
33901: LD_VAR 0 1
33905: PPUSH
33906: LD_INT 2
33908: PPUSH
33909: CALL_OW 336
// end ;
33913: GO 33878
33915: POP
33916: POP
// end ;
33917: PPOPN 2
33919: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33920: LD_EXP 51
33924: PUSH
33925: LD_EXP 104
33929: AND
33930: IFFALSE 34218
33932: GO 33934
33934: DISABLE
33935: LD_INT 0
33937: PPUSH
33938: PPUSH
33939: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33940: LD_OWVAR 2
33944: PPUSH
33945: LD_INT 9
33947: PPUSH
33948: LD_INT 1
33950: PPUSH
33951: LD_INT 1
33953: PPUSH
33954: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33958: LD_INT 9
33960: PPUSH
33961: LD_OWVAR 2
33965: PPUSH
33966: CALL_OW 343
// uc_side := 9 ;
33970: LD_ADDR_OWVAR 20
33974: PUSH
33975: LD_INT 9
33977: ST_TO_ADDR
// uc_nation := 2 ;
33978: LD_ADDR_OWVAR 21
33982: PUSH
33983: LD_INT 2
33985: ST_TO_ADDR
// hc_name := Dark Warrior ;
33986: LD_ADDR_OWVAR 26
33990: PUSH
33991: LD_STRING Dark Warrior
33993: ST_TO_ADDR
// hc_gallery :=  ;
33994: LD_ADDR_OWVAR 33
33998: PUSH
33999: LD_STRING 
34001: ST_TO_ADDR
// hc_noskilllimit := true ;
34002: LD_ADDR_OWVAR 76
34006: PUSH
34007: LD_INT 1
34009: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
34010: LD_ADDR_OWVAR 31
34014: PUSH
34015: LD_INT 30
34017: PUSH
34018: LD_INT 30
34020: PUSH
34021: LD_INT 30
34023: PUSH
34024: LD_INT 30
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: ST_TO_ADDR
// un := CreateHuman ;
34033: LD_ADDR_VAR 0 3
34037: PUSH
34038: CALL_OW 44
34042: ST_TO_ADDR
// hc_noskilllimit := false ;
34043: LD_ADDR_OWVAR 76
34047: PUSH
34048: LD_INT 0
34050: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34051: LD_VAR 0 3
34055: PPUSH
34056: LD_INT 1
34058: PPUSH
34059: CALL_OW 51
// ToLua ( playRanger() ) ;
34063: LD_STRING playRanger()
34065: PPUSH
34066: CALL_OW 559
// p := 0 ;
34070: LD_ADDR_VAR 0 2
34074: PUSH
34075: LD_INT 0
34077: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34078: LD_INT 35
34080: PPUSH
34081: CALL_OW 67
// p := p + 1 ;
34085: LD_ADDR_VAR 0 2
34089: PUSH
34090: LD_VAR 0 2
34094: PUSH
34095: LD_INT 1
34097: PLUS
34098: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
34099: LD_VAR 0 3
34103: PPUSH
34104: CALL_OW 256
34108: PUSH
34109: LD_INT 1000
34111: LESS
34112: IFFALSE 34126
// SetLives ( un , 1000 ) ;
34114: LD_VAR 0 3
34118: PPUSH
34119: LD_INT 1000
34121: PPUSH
34122: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
34126: LD_VAR 0 3
34130: PPUSH
34131: LD_INT 81
34133: PUSH
34134: LD_OWVAR 2
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 91
34145: PUSH
34146: LD_VAR 0 3
34150: PUSH
34151: LD_INT 30
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: LIST
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PPUSH
34163: CALL_OW 69
34167: PPUSH
34168: LD_VAR 0 3
34172: PPUSH
34173: CALL_OW 74
34177: PPUSH
34178: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
34182: LD_VAR 0 2
34186: PUSH
34187: LD_INT 80
34189: GREATER
34190: PUSH
34191: LD_VAR 0 3
34195: PPUSH
34196: CALL_OW 301
34200: OR
34201: IFFALSE 34078
// if un then
34203: LD_VAR 0 3
34207: IFFALSE 34218
// RemoveUnit ( un ) ;
34209: LD_VAR 0 3
34213: PPUSH
34214: CALL_OW 64
// end ;
34218: PPOPN 3
34220: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
34221: LD_EXP 105
34225: IFFALSE 34341
34227: GO 34229
34229: DISABLE
34230: LD_INT 0
34232: PPUSH
34233: PPUSH
34234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34235: LD_ADDR_VAR 0 2
34239: PUSH
34240: LD_INT 81
34242: PUSH
34243: LD_OWVAR 2
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 21
34254: PUSH
34255: LD_INT 1
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PPUSH
34266: CALL_OW 69
34270: ST_TO_ADDR
// ToLua ( playComputer() ) ;
34271: LD_STRING playComputer()
34273: PPUSH
34274: CALL_OW 559
// if not tmp then
34278: LD_VAR 0 2
34282: NOT
34283: IFFALSE 34287
// exit ;
34285: GO 34341
// for i in tmp do
34287: LD_ADDR_VAR 0 1
34291: PUSH
34292: LD_VAR 0 2
34296: PUSH
34297: FOR_IN
34298: IFFALSE 34339
// for j := 1 to 4 do
34300: LD_ADDR_VAR 0 3
34304: PUSH
34305: DOUBLE
34306: LD_INT 1
34308: DEC
34309: ST_TO_ADDR
34310: LD_INT 4
34312: PUSH
34313: FOR_TO
34314: IFFALSE 34335
// SetSkill ( i , j , 10 ) ;
34316: LD_VAR 0 1
34320: PPUSH
34321: LD_VAR 0 3
34325: PPUSH
34326: LD_INT 10
34328: PPUSH
34329: CALL_OW 237
34333: GO 34313
34335: POP
34336: POP
34337: GO 34297
34339: POP
34340: POP
// end ;
34341: PPOPN 3
34343: END
// every 0 0$1 trigger s30 do var i , tmp ;
34344: LD_EXP 106
34348: IFFALSE 34417
34350: GO 34352
34352: DISABLE
34353: LD_INT 0
34355: PPUSH
34356: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34357: LD_ADDR_VAR 0 2
34361: PUSH
34362: LD_INT 22
34364: PUSH
34365: LD_OWVAR 2
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PPUSH
34374: CALL_OW 69
34378: ST_TO_ADDR
// if not tmp then
34379: LD_VAR 0 2
34383: NOT
34384: IFFALSE 34388
// exit ;
34386: GO 34417
// for i in tmp do
34388: LD_ADDR_VAR 0 1
34392: PUSH
34393: LD_VAR 0 2
34397: PUSH
34398: FOR_IN
34399: IFFALSE 34415
// SetLives ( i , 300 ) ;
34401: LD_VAR 0 1
34405: PPUSH
34406: LD_INT 300
34408: PPUSH
34409: CALL_OW 234
34413: GO 34398
34415: POP
34416: POP
// end ;
34417: PPOPN 2
34419: END
// every 0 0$1 trigger s60 do var i , tmp ;
34420: LD_EXP 107
34424: IFFALSE 34493
34426: GO 34428
34428: DISABLE
34429: LD_INT 0
34431: PPUSH
34432: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34433: LD_ADDR_VAR 0 2
34437: PUSH
34438: LD_INT 22
34440: PUSH
34441: LD_OWVAR 2
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PPUSH
34450: CALL_OW 69
34454: ST_TO_ADDR
// if not tmp then
34455: LD_VAR 0 2
34459: NOT
34460: IFFALSE 34464
// exit ;
34462: GO 34493
// for i in tmp do
34464: LD_ADDR_VAR 0 1
34468: PUSH
34469: LD_VAR 0 2
34473: PUSH
34474: FOR_IN
34475: IFFALSE 34491
// SetLives ( i , 600 ) ;
34477: LD_VAR 0 1
34481: PPUSH
34482: LD_INT 600
34484: PPUSH
34485: CALL_OW 234
34489: GO 34474
34491: POP
34492: POP
// end ;
34493: PPOPN 2
34495: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34496: LD_INT 0
34498: PPUSH
// case cmd of 301 :
34499: LD_VAR 0 1
34503: PUSH
34504: LD_INT 301
34506: DOUBLE
34507: EQUAL
34508: IFTRUE 34512
34510: GO 34544
34512: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34513: LD_VAR 0 6
34517: PPUSH
34518: LD_VAR 0 7
34522: PPUSH
34523: LD_VAR 0 8
34527: PPUSH
34528: LD_VAR 0 4
34532: PPUSH
34533: LD_VAR 0 5
34537: PPUSH
34538: CALL 35753 0 5
34542: GO 34665
34544: LD_INT 302
34546: DOUBLE
34547: EQUAL
34548: IFTRUE 34552
34550: GO 34589
34552: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34553: LD_VAR 0 6
34557: PPUSH
34558: LD_VAR 0 7
34562: PPUSH
34563: LD_VAR 0 8
34567: PPUSH
34568: LD_VAR 0 9
34572: PPUSH
34573: LD_VAR 0 4
34577: PPUSH
34578: LD_VAR 0 5
34582: PPUSH
34583: CALL 35844 0 6
34587: GO 34665
34589: LD_INT 303
34591: DOUBLE
34592: EQUAL
34593: IFTRUE 34597
34595: GO 34634
34597: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34598: LD_VAR 0 6
34602: PPUSH
34603: LD_VAR 0 7
34607: PPUSH
34608: LD_VAR 0 8
34612: PPUSH
34613: LD_VAR 0 9
34617: PPUSH
34618: LD_VAR 0 4
34622: PPUSH
34623: LD_VAR 0 5
34627: PPUSH
34628: CALL 34670 0 6
34632: GO 34665
34634: LD_INT 304
34636: DOUBLE
34637: EQUAL
34638: IFTRUE 34642
34640: GO 34664
34642: POP
// hHackTeleport ( unit , x , y ) ; end ;
34643: LD_VAR 0 2
34647: PPUSH
34648: LD_VAR 0 4
34652: PPUSH
34653: LD_VAR 0 5
34657: PPUSH
34658: CALL 36437 0 3
34662: GO 34665
34664: POP
// end ;
34665: LD_VAR 0 12
34669: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34670: LD_INT 0
34672: PPUSH
34673: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34674: LD_VAR 0 1
34678: PUSH
34679: LD_INT 1
34681: LESS
34682: PUSH
34683: LD_VAR 0 1
34687: PUSH
34688: LD_INT 3
34690: GREATER
34691: OR
34692: PUSH
34693: LD_VAR 0 5
34697: PPUSH
34698: LD_VAR 0 6
34702: PPUSH
34703: CALL_OW 428
34707: OR
34708: IFFALSE 34712
// exit ;
34710: GO 35440
// uc_side := your_side ;
34712: LD_ADDR_OWVAR 20
34716: PUSH
34717: LD_OWVAR 2
34721: ST_TO_ADDR
// uc_nation := nation ;
34722: LD_ADDR_OWVAR 21
34726: PUSH
34727: LD_VAR 0 1
34731: ST_TO_ADDR
// bc_level = 1 ;
34732: LD_ADDR_OWVAR 43
34736: PUSH
34737: LD_INT 1
34739: ST_TO_ADDR
// case btype of 1 :
34740: LD_VAR 0 2
34744: PUSH
34745: LD_INT 1
34747: DOUBLE
34748: EQUAL
34749: IFTRUE 34753
34751: GO 34764
34753: POP
// bc_type := b_depot ; 2 :
34754: LD_ADDR_OWVAR 42
34758: PUSH
34759: LD_INT 0
34761: ST_TO_ADDR
34762: GO 35384
34764: LD_INT 2
34766: DOUBLE
34767: EQUAL
34768: IFTRUE 34772
34770: GO 34783
34772: POP
// bc_type := b_warehouse ; 3 :
34773: LD_ADDR_OWVAR 42
34777: PUSH
34778: LD_INT 1
34780: ST_TO_ADDR
34781: GO 35384
34783: LD_INT 3
34785: DOUBLE
34786: EQUAL
34787: IFTRUE 34791
34789: GO 34802
34791: POP
// bc_type := b_lab ; 4 .. 9 :
34792: LD_ADDR_OWVAR 42
34796: PUSH
34797: LD_INT 6
34799: ST_TO_ADDR
34800: GO 35384
34802: LD_INT 4
34804: DOUBLE
34805: GREATEREQUAL
34806: IFFALSE 34814
34808: LD_INT 9
34810: DOUBLE
34811: LESSEQUAL
34812: IFTRUE 34816
34814: GO 34876
34816: POP
// begin bc_type := b_lab_half ;
34817: LD_ADDR_OWVAR 42
34821: PUSH
34822: LD_INT 7
34824: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34825: LD_ADDR_OWVAR 44
34829: PUSH
34830: LD_INT 10
34832: PUSH
34833: LD_INT 11
34835: PUSH
34836: LD_INT 12
34838: PUSH
34839: LD_INT 15
34841: PUSH
34842: LD_INT 14
34844: PUSH
34845: LD_INT 13
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: PUSH
34856: LD_VAR 0 2
34860: PUSH
34861: LD_INT 3
34863: MINUS
34864: ARRAY
34865: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
34866: LD_ADDR_OWVAR 45
34870: PUSH
34871: LD_INT 9
34873: ST_TO_ADDR
// end ; 10 .. 13 :
34874: GO 35384
34876: LD_INT 10
34878: DOUBLE
34879: GREATEREQUAL
34880: IFFALSE 34888
34882: LD_INT 13
34884: DOUBLE
34885: LESSEQUAL
34886: IFTRUE 34890
34888: GO 34967
34890: POP
// begin bc_type := b_lab_full ;
34891: LD_ADDR_OWVAR 42
34895: PUSH
34896: LD_INT 8
34898: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34899: LD_ADDR_OWVAR 44
34903: PUSH
34904: LD_INT 10
34906: PUSH
34907: LD_INT 12
34909: PUSH
34910: LD_INT 14
34912: PUSH
34913: LD_INT 13
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: PUSH
34922: LD_VAR 0 2
34926: PUSH
34927: LD_INT 9
34929: MINUS
34930: ARRAY
34931: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34932: LD_ADDR_OWVAR 45
34936: PUSH
34937: LD_INT 11
34939: PUSH
34940: LD_INT 15
34942: PUSH
34943: LD_INT 12
34945: PUSH
34946: LD_INT 15
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: PUSH
34955: LD_VAR 0 2
34959: PUSH
34960: LD_INT 9
34962: MINUS
34963: ARRAY
34964: ST_TO_ADDR
// end ; 14 :
34965: GO 35384
34967: LD_INT 14
34969: DOUBLE
34970: EQUAL
34971: IFTRUE 34975
34973: GO 34986
34975: POP
// bc_type := b_workshop ; 15 :
34976: LD_ADDR_OWVAR 42
34980: PUSH
34981: LD_INT 2
34983: ST_TO_ADDR
34984: GO 35384
34986: LD_INT 15
34988: DOUBLE
34989: EQUAL
34990: IFTRUE 34994
34992: GO 35005
34994: POP
// bc_type := b_factory ; 16 :
34995: LD_ADDR_OWVAR 42
34999: PUSH
35000: LD_INT 3
35002: ST_TO_ADDR
35003: GO 35384
35005: LD_INT 16
35007: DOUBLE
35008: EQUAL
35009: IFTRUE 35013
35011: GO 35024
35013: POP
// bc_type := b_ext_gun ; 17 :
35014: LD_ADDR_OWVAR 42
35018: PUSH
35019: LD_INT 17
35021: ST_TO_ADDR
35022: GO 35384
35024: LD_INT 17
35026: DOUBLE
35027: EQUAL
35028: IFTRUE 35032
35030: GO 35060
35032: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
35033: LD_ADDR_OWVAR 42
35037: PUSH
35038: LD_INT 19
35040: PUSH
35041: LD_INT 23
35043: PUSH
35044: LD_INT 19
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: LIST
35051: PUSH
35052: LD_VAR 0 1
35056: ARRAY
35057: ST_TO_ADDR
35058: GO 35384
35060: LD_INT 18
35062: DOUBLE
35063: EQUAL
35064: IFTRUE 35068
35066: GO 35079
35068: POP
// bc_type := b_ext_radar ; 19 :
35069: LD_ADDR_OWVAR 42
35073: PUSH
35074: LD_INT 20
35076: ST_TO_ADDR
35077: GO 35384
35079: LD_INT 19
35081: DOUBLE
35082: EQUAL
35083: IFTRUE 35087
35085: GO 35098
35087: POP
// bc_type := b_ext_radio ; 20 :
35088: LD_ADDR_OWVAR 42
35092: PUSH
35093: LD_INT 22
35095: ST_TO_ADDR
35096: GO 35384
35098: LD_INT 20
35100: DOUBLE
35101: EQUAL
35102: IFTRUE 35106
35104: GO 35117
35106: POP
// bc_type := b_ext_siberium ; 21 :
35107: LD_ADDR_OWVAR 42
35111: PUSH
35112: LD_INT 21
35114: ST_TO_ADDR
35115: GO 35384
35117: LD_INT 21
35119: DOUBLE
35120: EQUAL
35121: IFTRUE 35125
35123: GO 35136
35125: POP
// bc_type := b_ext_computer ; 22 :
35126: LD_ADDR_OWVAR 42
35130: PUSH
35131: LD_INT 24
35133: ST_TO_ADDR
35134: GO 35384
35136: LD_INT 22
35138: DOUBLE
35139: EQUAL
35140: IFTRUE 35144
35142: GO 35155
35144: POP
// bc_type := b_ext_track ; 23 :
35145: LD_ADDR_OWVAR 42
35149: PUSH
35150: LD_INT 16
35152: ST_TO_ADDR
35153: GO 35384
35155: LD_INT 23
35157: DOUBLE
35158: EQUAL
35159: IFTRUE 35163
35161: GO 35174
35163: POP
// bc_type := b_ext_laser ; 24 :
35164: LD_ADDR_OWVAR 42
35168: PUSH
35169: LD_INT 25
35171: ST_TO_ADDR
35172: GO 35384
35174: LD_INT 24
35176: DOUBLE
35177: EQUAL
35178: IFTRUE 35182
35180: GO 35193
35182: POP
// bc_type := b_control_tower ; 25 :
35183: LD_ADDR_OWVAR 42
35187: PUSH
35188: LD_INT 36
35190: ST_TO_ADDR
35191: GO 35384
35193: LD_INT 25
35195: DOUBLE
35196: EQUAL
35197: IFTRUE 35201
35199: GO 35212
35201: POP
// bc_type := b_breastwork ; 26 :
35202: LD_ADDR_OWVAR 42
35206: PUSH
35207: LD_INT 31
35209: ST_TO_ADDR
35210: GO 35384
35212: LD_INT 26
35214: DOUBLE
35215: EQUAL
35216: IFTRUE 35220
35218: GO 35231
35220: POP
// bc_type := b_bunker ; 27 :
35221: LD_ADDR_OWVAR 42
35225: PUSH
35226: LD_INT 32
35228: ST_TO_ADDR
35229: GO 35384
35231: LD_INT 27
35233: DOUBLE
35234: EQUAL
35235: IFTRUE 35239
35237: GO 35250
35239: POP
// bc_type := b_turret ; 28 :
35240: LD_ADDR_OWVAR 42
35244: PUSH
35245: LD_INT 33
35247: ST_TO_ADDR
35248: GO 35384
35250: LD_INT 28
35252: DOUBLE
35253: EQUAL
35254: IFTRUE 35258
35256: GO 35269
35258: POP
// bc_type := b_armoury ; 29 :
35259: LD_ADDR_OWVAR 42
35263: PUSH
35264: LD_INT 4
35266: ST_TO_ADDR
35267: GO 35384
35269: LD_INT 29
35271: DOUBLE
35272: EQUAL
35273: IFTRUE 35277
35275: GO 35288
35277: POP
// bc_type := b_barracks ; 30 :
35278: LD_ADDR_OWVAR 42
35282: PUSH
35283: LD_INT 5
35285: ST_TO_ADDR
35286: GO 35384
35288: LD_INT 30
35290: DOUBLE
35291: EQUAL
35292: IFTRUE 35296
35294: GO 35307
35296: POP
// bc_type := b_solar_power ; 31 :
35297: LD_ADDR_OWVAR 42
35301: PUSH
35302: LD_INT 27
35304: ST_TO_ADDR
35305: GO 35384
35307: LD_INT 31
35309: DOUBLE
35310: EQUAL
35311: IFTRUE 35315
35313: GO 35326
35315: POP
// bc_type := b_oil_power ; 32 :
35316: LD_ADDR_OWVAR 42
35320: PUSH
35321: LD_INT 26
35323: ST_TO_ADDR
35324: GO 35384
35326: LD_INT 32
35328: DOUBLE
35329: EQUAL
35330: IFTRUE 35334
35332: GO 35345
35334: POP
// bc_type := b_siberite_power ; 33 :
35335: LD_ADDR_OWVAR 42
35339: PUSH
35340: LD_INT 28
35342: ST_TO_ADDR
35343: GO 35384
35345: LD_INT 33
35347: DOUBLE
35348: EQUAL
35349: IFTRUE 35353
35351: GO 35364
35353: POP
// bc_type := b_oil_mine ; 34 :
35354: LD_ADDR_OWVAR 42
35358: PUSH
35359: LD_INT 29
35361: ST_TO_ADDR
35362: GO 35384
35364: LD_INT 34
35366: DOUBLE
35367: EQUAL
35368: IFTRUE 35372
35370: GO 35383
35372: POP
// bc_type := b_siberite_mine ; end ;
35373: LD_ADDR_OWVAR 42
35377: PUSH
35378: LD_INT 30
35380: ST_TO_ADDR
35381: GO 35384
35383: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
35384: LD_ADDR_VAR 0 8
35388: PUSH
35389: LD_VAR 0 5
35393: PPUSH
35394: LD_VAR 0 6
35398: PPUSH
35399: LD_VAR 0 3
35403: PPUSH
35404: CALL_OW 47
35408: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
35409: LD_OWVAR 42
35413: PUSH
35414: LD_INT 32
35416: PUSH
35417: LD_INT 33
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: IN
35424: IFFALSE 35440
// PlaceWeaponTurret ( b , weapon ) ;
35426: LD_VAR 0 8
35430: PPUSH
35431: LD_VAR 0 4
35435: PPUSH
35436: CALL_OW 431
// end ;
35440: LD_VAR 0 7
35444: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35445: LD_INT 0
35447: PPUSH
35448: PPUSH
35449: PPUSH
35450: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35451: LD_ADDR_VAR 0 4
35455: PUSH
35456: LD_INT 22
35458: PUSH
35459: LD_OWVAR 2
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 2
35470: PUSH
35471: LD_INT 30
35473: PUSH
35474: LD_INT 0
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 30
35483: PUSH
35484: LD_INT 1
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: LIST
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PPUSH
35500: CALL_OW 69
35504: ST_TO_ADDR
// if not tmp then
35505: LD_VAR 0 4
35509: NOT
35510: IFFALSE 35514
// exit ;
35512: GO 35573
// for i in tmp do
35514: LD_ADDR_VAR 0 2
35518: PUSH
35519: LD_VAR 0 4
35523: PUSH
35524: FOR_IN
35525: IFFALSE 35571
// for j = 1 to 3 do
35527: LD_ADDR_VAR 0 3
35531: PUSH
35532: DOUBLE
35533: LD_INT 1
35535: DEC
35536: ST_TO_ADDR
35537: LD_INT 3
35539: PUSH
35540: FOR_TO
35541: IFFALSE 35567
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35543: LD_VAR 0 2
35547: PPUSH
35548: CALL_OW 274
35552: PPUSH
35553: LD_VAR 0 3
35557: PPUSH
35558: LD_INT 99999
35560: PPUSH
35561: CALL_OW 277
35565: GO 35540
35567: POP
35568: POP
35569: GO 35524
35571: POP
35572: POP
// end ;
35573: LD_VAR 0 1
35577: RET
// export function hHackSetLevel10 ; var i , j ; begin
35578: LD_INT 0
35580: PPUSH
35581: PPUSH
35582: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35583: LD_ADDR_VAR 0 2
35587: PUSH
35588: LD_INT 21
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PPUSH
35598: CALL_OW 69
35602: PUSH
35603: FOR_IN
35604: IFFALSE 35656
// if IsSelected ( i ) then
35606: LD_VAR 0 2
35610: PPUSH
35611: CALL_OW 306
35615: IFFALSE 35654
// begin for j := 1 to 4 do
35617: LD_ADDR_VAR 0 3
35621: PUSH
35622: DOUBLE
35623: LD_INT 1
35625: DEC
35626: ST_TO_ADDR
35627: LD_INT 4
35629: PUSH
35630: FOR_TO
35631: IFFALSE 35652
// SetSkill ( i , j , 10 ) ;
35633: LD_VAR 0 2
35637: PPUSH
35638: LD_VAR 0 3
35642: PPUSH
35643: LD_INT 10
35645: PPUSH
35646: CALL_OW 237
35650: GO 35630
35652: POP
35653: POP
// end ;
35654: GO 35603
35656: POP
35657: POP
// end ;
35658: LD_VAR 0 1
35662: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35663: LD_INT 0
35665: PPUSH
35666: PPUSH
35667: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35668: LD_ADDR_VAR 0 2
35672: PUSH
35673: LD_INT 22
35675: PUSH
35676: LD_OWVAR 2
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 21
35687: PUSH
35688: LD_INT 1
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PPUSH
35699: CALL_OW 69
35703: PUSH
35704: FOR_IN
35705: IFFALSE 35746
// begin for j := 1 to 4 do
35707: LD_ADDR_VAR 0 3
35711: PUSH
35712: DOUBLE
35713: LD_INT 1
35715: DEC
35716: ST_TO_ADDR
35717: LD_INT 4
35719: PUSH
35720: FOR_TO
35721: IFFALSE 35742
// SetSkill ( i , j , 10 ) ;
35723: LD_VAR 0 2
35727: PPUSH
35728: LD_VAR 0 3
35732: PPUSH
35733: LD_INT 10
35735: PPUSH
35736: CALL_OW 237
35740: GO 35720
35742: POP
35743: POP
// end ;
35744: GO 35704
35746: POP
35747: POP
// end ;
35748: LD_VAR 0 1
35752: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35753: LD_INT 0
35755: PPUSH
// uc_side := your_side ;
35756: LD_ADDR_OWVAR 20
35760: PUSH
35761: LD_OWVAR 2
35765: ST_TO_ADDR
// uc_nation := nation ;
35766: LD_ADDR_OWVAR 21
35770: PUSH
35771: LD_VAR 0 1
35775: ST_TO_ADDR
// InitHc ;
35776: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35780: LD_INT 0
35782: PPUSH
35783: LD_VAR 0 2
35787: PPUSH
35788: LD_VAR 0 3
35792: PPUSH
35793: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35797: LD_VAR 0 4
35801: PPUSH
35802: LD_VAR 0 5
35806: PPUSH
35807: CALL_OW 428
35811: PUSH
35812: LD_INT 0
35814: EQUAL
35815: IFFALSE 35839
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35817: CALL_OW 44
35821: PPUSH
35822: LD_VAR 0 4
35826: PPUSH
35827: LD_VAR 0 5
35831: PPUSH
35832: LD_INT 1
35834: PPUSH
35835: CALL_OW 48
// end ;
35839: LD_VAR 0 6
35843: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35844: LD_INT 0
35846: PPUSH
35847: PPUSH
// uc_side := your_side ;
35848: LD_ADDR_OWVAR 20
35852: PUSH
35853: LD_OWVAR 2
35857: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35858: LD_VAR 0 1
35862: PUSH
35863: LD_INT 1
35865: PUSH
35866: LD_INT 2
35868: PUSH
35869: LD_INT 3
35871: PUSH
35872: LD_INT 4
35874: PUSH
35875: LD_INT 5
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: IN
35885: IFFALSE 35897
// uc_nation := nation_american else
35887: LD_ADDR_OWVAR 21
35891: PUSH
35892: LD_INT 1
35894: ST_TO_ADDR
35895: GO 35940
// if chassis in [ 11 , 12 , 13 , 14 ] then
35897: LD_VAR 0 1
35901: PUSH
35902: LD_INT 11
35904: PUSH
35905: LD_INT 12
35907: PUSH
35908: LD_INT 13
35910: PUSH
35911: LD_INT 14
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: IN
35920: IFFALSE 35932
// uc_nation := nation_arabian else
35922: LD_ADDR_OWVAR 21
35926: PUSH
35927: LD_INT 2
35929: ST_TO_ADDR
35930: GO 35940
// uc_nation := nation_russian ;
35932: LD_ADDR_OWVAR 21
35936: PUSH
35937: LD_INT 3
35939: ST_TO_ADDR
// vc_chassis := chassis ;
35940: LD_ADDR_OWVAR 37
35944: PUSH
35945: LD_VAR 0 1
35949: ST_TO_ADDR
// vc_engine := engine ;
35950: LD_ADDR_OWVAR 39
35954: PUSH
35955: LD_VAR 0 2
35959: ST_TO_ADDR
// vc_control := control ;
35960: LD_ADDR_OWVAR 38
35964: PUSH
35965: LD_VAR 0 3
35969: ST_TO_ADDR
// vc_weapon := weapon ;
35970: LD_ADDR_OWVAR 40
35974: PUSH
35975: LD_VAR 0 4
35979: ST_TO_ADDR
// un := CreateVehicle ;
35980: LD_ADDR_VAR 0 8
35984: PUSH
35985: CALL_OW 45
35989: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35990: LD_VAR 0 8
35994: PPUSH
35995: LD_INT 0
35997: PPUSH
35998: LD_INT 5
36000: PPUSH
36001: CALL_OW 12
36005: PPUSH
36006: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
36010: LD_VAR 0 8
36014: PPUSH
36015: LD_VAR 0 5
36019: PPUSH
36020: LD_VAR 0 6
36024: PPUSH
36025: LD_INT 1
36027: PPUSH
36028: CALL_OW 48
// end ;
36032: LD_VAR 0 7
36036: RET
// export hInvincible ; every 1 do
36037: GO 36039
36039: DISABLE
// hInvincible := [ ] ;
36040: LD_ADDR_EXP 108
36044: PUSH
36045: EMPTY
36046: ST_TO_ADDR
36047: END
// every 10 do var i ;
36048: GO 36050
36050: DISABLE
36051: LD_INT 0
36053: PPUSH
// begin enable ;
36054: ENABLE
// if not hInvincible then
36055: LD_EXP 108
36059: NOT
36060: IFFALSE 36064
// exit ;
36062: GO 36108
// for i in hInvincible do
36064: LD_ADDR_VAR 0 1
36068: PUSH
36069: LD_EXP 108
36073: PUSH
36074: FOR_IN
36075: IFFALSE 36106
// if GetLives ( i ) < 1000 then
36077: LD_VAR 0 1
36081: PPUSH
36082: CALL_OW 256
36086: PUSH
36087: LD_INT 1000
36089: LESS
36090: IFFALSE 36104
// SetLives ( i , 1000 ) ;
36092: LD_VAR 0 1
36096: PPUSH
36097: LD_INT 1000
36099: PPUSH
36100: CALL_OW 234
36104: GO 36074
36106: POP
36107: POP
// end ;
36108: PPOPN 1
36110: END
// export function hHackInvincible ; var i ; begin
36111: LD_INT 0
36113: PPUSH
36114: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36115: LD_ADDR_VAR 0 2
36119: PUSH
36120: LD_INT 2
36122: PUSH
36123: LD_INT 21
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 21
36135: PUSH
36136: LD_INT 2
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: LIST
36147: PPUSH
36148: CALL_OW 69
36152: PUSH
36153: FOR_IN
36154: IFFALSE 36215
// if IsSelected ( i ) then
36156: LD_VAR 0 2
36160: PPUSH
36161: CALL_OW 306
36165: IFFALSE 36213
// begin if i in hInvincible then
36167: LD_VAR 0 2
36171: PUSH
36172: LD_EXP 108
36176: IN
36177: IFFALSE 36197
// hInvincible := hInvincible diff i else
36179: LD_ADDR_EXP 108
36183: PUSH
36184: LD_EXP 108
36188: PUSH
36189: LD_VAR 0 2
36193: DIFF
36194: ST_TO_ADDR
36195: GO 36213
// hInvincible := hInvincible union i ;
36197: LD_ADDR_EXP 108
36201: PUSH
36202: LD_EXP 108
36206: PUSH
36207: LD_VAR 0 2
36211: UNION
36212: ST_TO_ADDR
// end ;
36213: GO 36153
36215: POP
36216: POP
// end ;
36217: LD_VAR 0 1
36221: RET
// export function hHackInvisible ; var i , j ; begin
36222: LD_INT 0
36224: PPUSH
36225: PPUSH
36226: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36227: LD_ADDR_VAR 0 2
36231: PUSH
36232: LD_INT 21
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PPUSH
36242: CALL_OW 69
36246: PUSH
36247: FOR_IN
36248: IFFALSE 36272
// if IsSelected ( i ) then
36250: LD_VAR 0 2
36254: PPUSH
36255: CALL_OW 306
36259: IFFALSE 36270
// ComForceInvisible ( i ) ;
36261: LD_VAR 0 2
36265: PPUSH
36266: CALL_OW 496
36270: GO 36247
36272: POP
36273: POP
// end ;
36274: LD_VAR 0 1
36278: RET
// export function hHackChangeYourSide ; begin
36279: LD_INT 0
36281: PPUSH
// if your_side = 8 then
36282: LD_OWVAR 2
36286: PUSH
36287: LD_INT 8
36289: EQUAL
36290: IFFALSE 36302
// your_side := 0 else
36292: LD_ADDR_OWVAR 2
36296: PUSH
36297: LD_INT 0
36299: ST_TO_ADDR
36300: GO 36316
// your_side := your_side + 1 ;
36302: LD_ADDR_OWVAR 2
36306: PUSH
36307: LD_OWVAR 2
36311: PUSH
36312: LD_INT 1
36314: PLUS
36315: ST_TO_ADDR
// end ;
36316: LD_VAR 0 1
36320: RET
// export function hHackChangeUnitSide ; var i , j ; begin
36321: LD_INT 0
36323: PPUSH
36324: PPUSH
36325: PPUSH
// for i in all_units do
36326: LD_ADDR_VAR 0 2
36330: PUSH
36331: LD_OWVAR 3
36335: PUSH
36336: FOR_IN
36337: IFFALSE 36415
// if IsSelected ( i ) then
36339: LD_VAR 0 2
36343: PPUSH
36344: CALL_OW 306
36348: IFFALSE 36413
// begin j := GetSide ( i ) ;
36350: LD_ADDR_VAR 0 3
36354: PUSH
36355: LD_VAR 0 2
36359: PPUSH
36360: CALL_OW 255
36364: ST_TO_ADDR
// if j = 8 then
36365: LD_VAR 0 3
36369: PUSH
36370: LD_INT 8
36372: EQUAL
36373: IFFALSE 36385
// j := 0 else
36375: LD_ADDR_VAR 0 3
36379: PUSH
36380: LD_INT 0
36382: ST_TO_ADDR
36383: GO 36399
// j := j + 1 ;
36385: LD_ADDR_VAR 0 3
36389: PUSH
36390: LD_VAR 0 3
36394: PUSH
36395: LD_INT 1
36397: PLUS
36398: ST_TO_ADDR
// SetSide ( i , j ) ;
36399: LD_VAR 0 2
36403: PPUSH
36404: LD_VAR 0 3
36408: PPUSH
36409: CALL_OW 235
// end ;
36413: GO 36336
36415: POP
36416: POP
// end ;
36417: LD_VAR 0 1
36421: RET
// export function hHackFog ; begin
36422: LD_INT 0
36424: PPUSH
// FogOff ( true ) ;
36425: LD_INT 1
36427: PPUSH
36428: CALL_OW 344
// end ;
36432: LD_VAR 0 1
36436: RET
// export function hHackTeleport ( unit , x , y ) ; begin
36437: LD_INT 0
36439: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
36440: LD_VAR 0 1
36444: PPUSH
36445: LD_VAR 0 2
36449: PPUSH
36450: LD_VAR 0 3
36454: PPUSH
36455: LD_INT 1
36457: PPUSH
36458: LD_INT 1
36460: PPUSH
36461: CALL_OW 483
// CenterOnXY ( x , y ) ;
36465: LD_VAR 0 2
36469: PPUSH
36470: LD_VAR 0 3
36474: PPUSH
36475: CALL_OW 84
// end ;
36479: LD_VAR 0 4
36483: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36484: LD_INT 0
36486: PPUSH
36487: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36488: LD_VAR 0 1
36492: NOT
36493: PUSH
36494: LD_VAR 0 2
36498: PPUSH
36499: LD_VAR 0 3
36503: PPUSH
36504: CALL_OW 488
36508: NOT
36509: OR
36510: PUSH
36511: LD_VAR 0 1
36515: PPUSH
36516: CALL_OW 266
36520: PUSH
36521: LD_INT 3
36523: NONEQUAL
36524: PUSH
36525: LD_VAR 0 1
36529: PPUSH
36530: CALL_OW 247
36534: PUSH
36535: LD_INT 1
36537: EQUAL
36538: NOT
36539: AND
36540: OR
36541: IFFALSE 36545
// exit ;
36543: GO 36694
// if GetType ( factory ) = unit_human then
36545: LD_VAR 0 1
36549: PPUSH
36550: CALL_OW 247
36554: PUSH
36555: LD_INT 1
36557: EQUAL
36558: IFFALSE 36575
// factory := IsInUnit ( factory ) ;
36560: LD_ADDR_VAR 0 1
36564: PUSH
36565: LD_VAR 0 1
36569: PPUSH
36570: CALL_OW 310
36574: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36575: LD_VAR 0 1
36579: PPUSH
36580: CALL_OW 266
36584: PUSH
36585: LD_INT 3
36587: NONEQUAL
36588: IFFALSE 36592
// exit ;
36590: GO 36694
// if HexInfo ( x , y ) = factory then
36592: LD_VAR 0 2
36596: PPUSH
36597: LD_VAR 0 3
36601: PPUSH
36602: CALL_OW 428
36606: PUSH
36607: LD_VAR 0 1
36611: EQUAL
36612: IFFALSE 36639
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
36614: LD_ADDR_EXP 109
36618: PUSH
36619: LD_EXP 109
36623: PPUSH
36624: LD_VAR 0 1
36628: PPUSH
36629: LD_INT 0
36631: PPUSH
36632: CALL_OW 1
36636: ST_TO_ADDR
36637: GO 36690
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
36639: LD_ADDR_EXP 109
36643: PUSH
36644: LD_EXP 109
36648: PPUSH
36649: LD_VAR 0 1
36653: PPUSH
36654: LD_VAR 0 1
36658: PPUSH
36659: CALL_OW 255
36663: PUSH
36664: LD_VAR 0 1
36668: PUSH
36669: LD_VAR 0 2
36673: PUSH
36674: LD_VAR 0 3
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: PPUSH
36685: CALL_OW 1
36689: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36690: CALL 36699 0 0
// end ;
36694: LD_VAR 0 4
36698: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
36699: LD_INT 0
36701: PPUSH
36702: PPUSH
36703: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
36704: LD_STRING resetFactoryWaypoint();
36706: PPUSH
36707: CALL_OW 559
// if factoryWaypoints then
36711: LD_EXP 109
36715: IFFALSE 36841
// begin list := PrepareArray ( factoryWaypoints ) ;
36717: LD_ADDR_VAR 0 3
36721: PUSH
36722: LD_EXP 109
36726: PPUSH
36727: CALL 84138 0 1
36731: ST_TO_ADDR
// for i := 1 to list do
36732: LD_ADDR_VAR 0 2
36736: PUSH
36737: DOUBLE
36738: LD_INT 1
36740: DEC
36741: ST_TO_ADDR
36742: LD_VAR 0 3
36746: PUSH
36747: FOR_TO
36748: IFFALSE 36839
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36750: LD_STRING setFactoryWaypointXY(
36752: PUSH
36753: LD_VAR 0 3
36757: PUSH
36758: LD_VAR 0 2
36762: ARRAY
36763: PUSH
36764: LD_INT 1
36766: ARRAY
36767: STR
36768: PUSH
36769: LD_STRING ,
36771: STR
36772: PUSH
36773: LD_VAR 0 3
36777: PUSH
36778: LD_VAR 0 2
36782: ARRAY
36783: PUSH
36784: LD_INT 2
36786: ARRAY
36787: STR
36788: PUSH
36789: LD_STRING ,
36791: STR
36792: PUSH
36793: LD_VAR 0 3
36797: PUSH
36798: LD_VAR 0 2
36802: ARRAY
36803: PUSH
36804: LD_INT 3
36806: ARRAY
36807: STR
36808: PUSH
36809: LD_STRING ,
36811: STR
36812: PUSH
36813: LD_VAR 0 3
36817: PUSH
36818: LD_VAR 0 2
36822: ARRAY
36823: PUSH
36824: LD_INT 4
36826: ARRAY
36827: STR
36828: PUSH
36829: LD_STRING )
36831: STR
36832: PPUSH
36833: CALL_OW 559
36837: GO 36747
36839: POP
36840: POP
// end ; end ;
36841: LD_VAR 0 1
36845: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
36846: LD_INT 0
36848: PPUSH
// if HexInfo ( x , y ) = warehouse then
36849: LD_VAR 0 2
36853: PPUSH
36854: LD_VAR 0 3
36858: PPUSH
36859: CALL_OW 428
36863: PUSH
36864: LD_VAR 0 1
36868: EQUAL
36869: IFFALSE 36896
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
36871: LD_ADDR_EXP 110
36875: PUSH
36876: LD_EXP 110
36880: PPUSH
36881: LD_VAR 0 1
36885: PPUSH
36886: LD_INT 0
36888: PPUSH
36889: CALL_OW 1
36893: ST_TO_ADDR
36894: GO 36947
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
36896: LD_ADDR_EXP 110
36900: PUSH
36901: LD_EXP 110
36905: PPUSH
36906: LD_VAR 0 1
36910: PPUSH
36911: LD_VAR 0 1
36915: PPUSH
36916: CALL_OW 255
36920: PUSH
36921: LD_VAR 0 1
36925: PUSH
36926: LD_VAR 0 2
36930: PUSH
36931: LD_VAR 0 3
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: PPUSH
36942: CALL_OW 1
36946: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
36947: CALL 36956 0 0
// end ;
36951: LD_VAR 0 4
36955: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
36956: LD_INT 0
36958: PPUSH
36959: PPUSH
36960: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
36961: LD_STRING resetWarehouseGatheringPoints();
36963: PPUSH
36964: CALL_OW 559
// if warehouseGatheringPoints then
36968: LD_EXP 110
36972: IFFALSE 37098
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36974: LD_ADDR_VAR 0 3
36978: PUSH
36979: LD_EXP 110
36983: PPUSH
36984: CALL 84138 0 1
36988: ST_TO_ADDR
// for i := 1 to list do
36989: LD_ADDR_VAR 0 2
36993: PUSH
36994: DOUBLE
36995: LD_INT 1
36997: DEC
36998: ST_TO_ADDR
36999: LD_VAR 0 3
37003: PUSH
37004: FOR_TO
37005: IFFALSE 37096
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
37007: LD_STRING setWarehouseGatheringPointXY(
37009: PUSH
37010: LD_VAR 0 3
37014: PUSH
37015: LD_VAR 0 2
37019: ARRAY
37020: PUSH
37021: LD_INT 1
37023: ARRAY
37024: STR
37025: PUSH
37026: LD_STRING ,
37028: STR
37029: PUSH
37030: LD_VAR 0 3
37034: PUSH
37035: LD_VAR 0 2
37039: ARRAY
37040: PUSH
37041: LD_INT 2
37043: ARRAY
37044: STR
37045: PUSH
37046: LD_STRING ,
37048: STR
37049: PUSH
37050: LD_VAR 0 3
37054: PUSH
37055: LD_VAR 0 2
37059: ARRAY
37060: PUSH
37061: LD_INT 3
37063: ARRAY
37064: STR
37065: PUSH
37066: LD_STRING ,
37068: STR
37069: PUSH
37070: LD_VAR 0 3
37074: PUSH
37075: LD_VAR 0 2
37079: ARRAY
37080: PUSH
37081: LD_INT 4
37083: ARRAY
37084: STR
37085: PUSH
37086: LD_STRING )
37088: STR
37089: PPUSH
37090: CALL_OW 559
37094: GO 37004
37096: POP
37097: POP
// end ; end ;
37098: LD_VAR 0 1
37102: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
37103: LD_EXP 110
37107: IFFALSE 37792
37109: GO 37111
37111: DISABLE
37112: LD_INT 0
37114: PPUSH
37115: PPUSH
37116: PPUSH
37117: PPUSH
37118: PPUSH
37119: PPUSH
37120: PPUSH
37121: PPUSH
37122: PPUSH
// begin enable ;
37123: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
37124: LD_ADDR_VAR 0 3
37128: PUSH
37129: LD_EXP 110
37133: PPUSH
37134: CALL 84138 0 1
37138: ST_TO_ADDR
// if not list then
37139: LD_VAR 0 3
37143: NOT
37144: IFFALSE 37148
// exit ;
37146: GO 37792
// for i := 1 to list do
37148: LD_ADDR_VAR 0 1
37152: PUSH
37153: DOUBLE
37154: LD_INT 1
37156: DEC
37157: ST_TO_ADDR
37158: LD_VAR 0 3
37162: PUSH
37163: FOR_TO
37164: IFFALSE 37790
// begin depot := list [ i ] [ 2 ] ;
37166: LD_ADDR_VAR 0 8
37170: PUSH
37171: LD_VAR 0 3
37175: PUSH
37176: LD_VAR 0 1
37180: ARRAY
37181: PUSH
37182: LD_INT 2
37184: ARRAY
37185: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
37186: LD_ADDR_VAR 0 5
37190: PUSH
37191: LD_VAR 0 3
37195: PUSH
37196: LD_VAR 0 1
37200: ARRAY
37201: PUSH
37202: LD_INT 1
37204: ARRAY
37205: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
37206: LD_VAR 0 8
37210: PPUSH
37211: CALL_OW 301
37215: PUSH
37216: LD_VAR 0 5
37220: PUSH
37221: LD_VAR 0 8
37225: PPUSH
37226: CALL_OW 255
37230: NONEQUAL
37231: OR
37232: IFFALSE 37261
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
37234: LD_ADDR_EXP 110
37238: PUSH
37239: LD_EXP 110
37243: PPUSH
37244: LD_VAR 0 8
37248: PPUSH
37249: LD_INT 0
37251: PPUSH
37252: CALL_OW 1
37256: ST_TO_ADDR
// exit ;
37257: POP
37258: POP
37259: GO 37792
// end ; x := list [ i ] [ 3 ] ;
37261: LD_ADDR_VAR 0 6
37265: PUSH
37266: LD_VAR 0 3
37270: PUSH
37271: LD_VAR 0 1
37275: ARRAY
37276: PUSH
37277: LD_INT 3
37279: ARRAY
37280: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
37281: LD_ADDR_VAR 0 7
37285: PUSH
37286: LD_VAR 0 3
37290: PUSH
37291: LD_VAR 0 1
37295: ARRAY
37296: PUSH
37297: LD_INT 4
37299: ARRAY
37300: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
37301: LD_ADDR_VAR 0 9
37305: PUSH
37306: LD_VAR 0 6
37310: PPUSH
37311: LD_VAR 0 7
37315: PPUSH
37316: LD_INT 16
37318: PPUSH
37319: CALL 82726 0 3
37323: ST_TO_ADDR
// if not cratesNearbyPoint then
37324: LD_VAR 0 9
37328: NOT
37329: IFFALSE 37335
// exit ;
37331: POP
37332: POP
37333: GO 37792
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
37335: LD_ADDR_VAR 0 4
37339: PUSH
37340: LD_INT 22
37342: PUSH
37343: LD_VAR 0 5
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 3
37354: PUSH
37355: LD_INT 60
37357: PUSH
37358: EMPTY
37359: LIST
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 91
37367: PUSH
37368: LD_VAR 0 8
37372: PUSH
37373: LD_INT 6
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 2
37383: PUSH
37384: LD_INT 25
37386: PUSH
37387: LD_INT 2
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 25
37396: PUSH
37397: LD_INT 16
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: LIST
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: PPUSH
37415: CALL_OW 69
37419: PUSH
37420: LD_VAR 0 8
37424: PPUSH
37425: CALL_OW 313
37429: PPUSH
37430: LD_INT 3
37432: PUSH
37433: LD_INT 60
37435: PUSH
37436: EMPTY
37437: LIST
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 2
37445: PUSH
37446: LD_INT 25
37448: PUSH
37449: LD_INT 2
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 25
37458: PUSH
37459: LD_INT 16
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PPUSH
37475: CALL_OW 72
37479: UNION
37480: ST_TO_ADDR
// if tmp then
37481: LD_VAR 0 4
37485: IFFALSE 37565
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37487: LD_ADDR_VAR 0 4
37491: PUSH
37492: LD_VAR 0 4
37496: PPUSH
37497: LD_INT 3
37499: PPUSH
37500: CALL 80695 0 2
37504: ST_TO_ADDR
// for j in tmp do
37505: LD_ADDR_VAR 0 2
37509: PUSH
37510: LD_VAR 0 4
37514: PUSH
37515: FOR_IN
37516: IFFALSE 37559
// begin if IsInUnit ( j ) then
37518: LD_VAR 0 2
37522: PPUSH
37523: CALL_OW 310
37527: IFFALSE 37538
// ComExit ( j ) ;
37529: LD_VAR 0 2
37533: PPUSH
37534: CALL 80778 0 1
// AddComCollect ( j , x , y ) ;
37538: LD_VAR 0 2
37542: PPUSH
37543: LD_VAR 0 6
37547: PPUSH
37548: LD_VAR 0 7
37552: PPUSH
37553: CALL_OW 177
// end ;
37557: GO 37515
37559: POP
37560: POP
// exit ;
37561: POP
37562: POP
37563: GO 37792
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
37565: LD_ADDR_VAR 0 4
37569: PUSH
37570: LD_INT 22
37572: PUSH
37573: LD_VAR 0 5
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 91
37584: PUSH
37585: LD_VAR 0 8
37589: PUSH
37590: LD_INT 8
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 2
37600: PUSH
37601: LD_INT 34
37603: PUSH
37604: LD_INT 12
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 34
37613: PUSH
37614: LD_INT 51
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 34
37623: PUSH
37624: LD_INT 32
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 34
37633: PUSH
37634: LD_INT 89
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: LIST
37652: PPUSH
37653: CALL_OW 69
37657: ST_TO_ADDR
// if tmp then
37658: LD_VAR 0 4
37662: IFFALSE 37788
// begin for j in tmp do
37664: LD_ADDR_VAR 0 2
37668: PUSH
37669: LD_VAR 0 4
37673: PUSH
37674: FOR_IN
37675: IFFALSE 37786
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
37677: LD_VAR 0 2
37681: PPUSH
37682: CALL_OW 262
37686: PUSH
37687: LD_INT 3
37689: EQUAL
37690: PUSH
37691: LD_VAR 0 2
37695: PPUSH
37696: CALL_OW 261
37700: PUSH
37701: LD_INT 20
37703: GREATER
37704: OR
37705: PUSH
37706: LD_VAR 0 2
37710: PPUSH
37711: CALL_OW 314
37715: NOT
37716: AND
37717: PUSH
37718: LD_VAR 0 2
37722: PPUSH
37723: CALL_OW 263
37727: PUSH
37728: LD_INT 1
37730: NONEQUAL
37731: PUSH
37732: LD_VAR 0 2
37736: PPUSH
37737: CALL_OW 311
37741: OR
37742: AND
37743: IFFALSE 37784
// begin ComCollect ( j , x , y ) ;
37745: LD_VAR 0 2
37749: PPUSH
37750: LD_VAR 0 6
37754: PPUSH
37755: LD_VAR 0 7
37759: PPUSH
37760: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
37764: LD_VAR 0 2
37768: PPUSH
37769: LD_VAR 0 8
37773: PPUSH
37774: CALL_OW 172
// exit ;
37778: POP
37779: POP
37780: POP
37781: POP
37782: GO 37792
// end ;
37784: GO 37674
37786: POP
37787: POP
// end ; end ;
37788: GO 37163
37790: POP
37791: POP
// end ; end_of_file
37792: PPOPN 9
37794: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37795: LD_INT 0
37797: PPUSH
37798: PPUSH
37799: PPUSH
37800: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37801: LD_VAR 0 1
37805: PPUSH
37806: CALL_OW 264
37810: PUSH
37811: LD_INT 91
37813: EQUAL
37814: IFFALSE 37886
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37816: LD_INT 68
37818: PPUSH
37819: LD_VAR 0 1
37823: PPUSH
37824: CALL_OW 255
37828: PPUSH
37829: CALL_OW 321
37833: PUSH
37834: LD_INT 2
37836: EQUAL
37837: IFFALSE 37849
// eff := 70 else
37839: LD_ADDR_VAR 0 4
37843: PUSH
37844: LD_INT 70
37846: ST_TO_ADDR
37847: GO 37857
// eff := 30 ;
37849: LD_ADDR_VAR 0 4
37853: PUSH
37854: LD_INT 30
37856: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37857: LD_VAR 0 1
37861: PPUSH
37862: CALL_OW 250
37866: PPUSH
37867: LD_VAR 0 1
37871: PPUSH
37872: CALL_OW 251
37876: PPUSH
37877: LD_VAR 0 4
37881: PPUSH
37882: CALL_OW 495
// end ; end ;
37886: LD_VAR 0 2
37890: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37891: LD_INT 0
37893: PPUSH
// end ;
37894: LD_VAR 0 4
37898: RET
// export function SOS_Command ( cmd ) ; begin
37899: LD_INT 0
37901: PPUSH
// end ;
37902: LD_VAR 0 2
37906: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37907: LD_INT 0
37909: PPUSH
// end ;
37910: LD_VAR 0 6
37914: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
37915: LD_INT 0
37917: PPUSH
37918: PPUSH
// if not vehicle or not factory then
37919: LD_VAR 0 1
37923: NOT
37924: PUSH
37925: LD_VAR 0 2
37929: NOT
37930: OR
37931: IFFALSE 37935
// exit ;
37933: GO 38166
// if factoryWaypoints >= factory then
37935: LD_EXP 109
37939: PUSH
37940: LD_VAR 0 2
37944: GREATEREQUAL
37945: IFFALSE 38166
// if factoryWaypoints [ factory ] then
37947: LD_EXP 109
37951: PUSH
37952: LD_VAR 0 2
37956: ARRAY
37957: IFFALSE 38166
// begin if GetControl ( vehicle ) = control_manual then
37959: LD_VAR 0 1
37963: PPUSH
37964: CALL_OW 263
37968: PUSH
37969: LD_INT 1
37971: EQUAL
37972: IFFALSE 38053
// begin driver := IsDrivenBy ( vehicle ) ;
37974: LD_ADDR_VAR 0 4
37978: PUSH
37979: LD_VAR 0 1
37983: PPUSH
37984: CALL_OW 311
37988: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37989: LD_VAR 0 4
37993: PPUSH
37994: LD_EXP 109
37998: PUSH
37999: LD_VAR 0 2
38003: ARRAY
38004: PUSH
38005: LD_INT 3
38007: ARRAY
38008: PPUSH
38009: LD_EXP 109
38013: PUSH
38014: LD_VAR 0 2
38018: ARRAY
38019: PUSH
38020: LD_INT 4
38022: ARRAY
38023: PPUSH
38024: CALL_OW 171
// AddComExitVehicle ( driver ) ;
38028: LD_VAR 0 4
38032: PPUSH
38033: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
38037: LD_VAR 0 4
38041: PPUSH
38042: LD_VAR 0 2
38046: PPUSH
38047: CALL_OW 180
// end else
38051: GO 38166
// if GetControl ( vehicle ) = control_remote then
38053: LD_VAR 0 1
38057: PPUSH
38058: CALL_OW 263
38062: PUSH
38063: LD_INT 2
38065: EQUAL
38066: IFFALSE 38127
// begin wait ( 0 0$2 ) ;
38068: LD_INT 70
38070: PPUSH
38071: CALL_OW 67
// if Connect ( vehicle ) then
38075: LD_VAR 0 1
38079: PPUSH
38080: CALL 50997 0 1
38084: IFFALSE 38125
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
38086: LD_VAR 0 1
38090: PPUSH
38091: LD_EXP 109
38095: PUSH
38096: LD_VAR 0 2
38100: ARRAY
38101: PUSH
38102: LD_INT 3
38104: ARRAY
38105: PPUSH
38106: LD_EXP 109
38110: PUSH
38111: LD_VAR 0 2
38115: ARRAY
38116: PUSH
38117: LD_INT 4
38119: ARRAY
38120: PPUSH
38121: CALL_OW 171
// end else
38125: GO 38166
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
38127: LD_VAR 0 1
38131: PPUSH
38132: LD_EXP 109
38136: PUSH
38137: LD_VAR 0 2
38141: ARRAY
38142: PUSH
38143: LD_INT 3
38145: ARRAY
38146: PPUSH
38147: LD_EXP 109
38151: PUSH
38152: LD_VAR 0 2
38156: ARRAY
38157: PUSH
38158: LD_INT 4
38160: ARRAY
38161: PPUSH
38162: CALL_OW 171
// end ; end ;
38166: LD_VAR 0 3
38170: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
38171: LD_INT 0
38173: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
38174: LD_VAR 0 1
38178: PUSH
38179: LD_INT 250
38181: EQUAL
38182: PUSH
38183: LD_VAR 0 2
38187: PPUSH
38188: CALL_OW 264
38192: PUSH
38193: LD_INT 81
38195: EQUAL
38196: AND
38197: IFFALSE 38218
// MinerPlaceMine ( unit , x , y ) ;
38199: LD_VAR 0 2
38203: PPUSH
38204: LD_VAR 0 4
38208: PPUSH
38209: LD_VAR 0 5
38213: PPUSH
38214: CALL 41208 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
38218: LD_VAR 0 1
38222: PUSH
38223: LD_INT 251
38225: EQUAL
38226: PUSH
38227: LD_VAR 0 2
38231: PPUSH
38232: CALL_OW 264
38236: PUSH
38237: LD_INT 81
38239: EQUAL
38240: AND
38241: IFFALSE 38262
// MinerDetonateMine ( unit , x , y ) ;
38243: LD_VAR 0 2
38247: PPUSH
38248: LD_VAR 0 4
38252: PPUSH
38253: LD_VAR 0 5
38257: PPUSH
38258: CALL 41483 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
38262: LD_VAR 0 1
38266: PUSH
38267: LD_INT 252
38269: EQUAL
38270: PUSH
38271: LD_VAR 0 2
38275: PPUSH
38276: CALL_OW 264
38280: PUSH
38281: LD_INT 81
38283: EQUAL
38284: AND
38285: IFFALSE 38306
// MinerCreateMinefield ( unit , x , y ) ;
38287: LD_VAR 0 2
38291: PPUSH
38292: LD_VAR 0 4
38296: PPUSH
38297: LD_VAR 0 5
38301: PPUSH
38302: CALL 41900 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
38306: LD_VAR 0 1
38310: PUSH
38311: LD_INT 253
38313: EQUAL
38314: PUSH
38315: LD_VAR 0 2
38319: PPUSH
38320: CALL_OW 257
38324: PUSH
38325: LD_INT 5
38327: EQUAL
38328: AND
38329: IFFALSE 38350
// ComBinocular ( unit , x , y ) ;
38331: LD_VAR 0 2
38335: PPUSH
38336: LD_VAR 0 4
38340: PPUSH
38341: LD_VAR 0 5
38345: PPUSH
38346: CALL 42269 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
38350: LD_VAR 0 1
38354: PUSH
38355: LD_INT 254
38357: EQUAL
38358: PUSH
38359: LD_VAR 0 2
38363: PPUSH
38364: CALL_OW 264
38368: PUSH
38369: LD_INT 99
38371: EQUAL
38372: AND
38373: PUSH
38374: LD_VAR 0 3
38378: PPUSH
38379: CALL_OW 263
38383: PUSH
38384: LD_INT 3
38386: EQUAL
38387: AND
38388: IFFALSE 38404
// HackDestroyVehicle ( unit , selectedUnit ) ;
38390: LD_VAR 0 2
38394: PPUSH
38395: LD_VAR 0 3
38399: PPUSH
38400: CALL 40572 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
38404: LD_VAR 0 1
38408: PUSH
38409: LD_INT 255
38411: EQUAL
38412: PUSH
38413: LD_VAR 0 2
38417: PPUSH
38418: CALL_OW 264
38422: PUSH
38423: LD_INT 14
38425: PUSH
38426: LD_INT 53
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: IN
38433: AND
38434: PUSH
38435: LD_VAR 0 4
38439: PPUSH
38440: LD_VAR 0 5
38444: PPUSH
38445: CALL_OW 488
38449: AND
38450: IFFALSE 38474
// CutTreeXYR ( unit , x , y , 12 ) ;
38452: LD_VAR 0 2
38456: PPUSH
38457: LD_VAR 0 4
38461: PPUSH
38462: LD_VAR 0 5
38466: PPUSH
38467: LD_INT 12
38469: PPUSH
38470: CALL 38569 0 4
// if cmd = 256 then
38474: LD_VAR 0 1
38478: PUSH
38479: LD_INT 256
38481: EQUAL
38482: IFFALSE 38503
// SetFactoryWaypoint ( unit , x , y ) ;
38484: LD_VAR 0 2
38488: PPUSH
38489: LD_VAR 0 4
38493: PPUSH
38494: LD_VAR 0 5
38498: PPUSH
38499: CALL 36484 0 3
// if cmd = 257 then
38503: LD_VAR 0 1
38507: PUSH
38508: LD_INT 257
38510: EQUAL
38511: IFFALSE 38532
// SetWarehouseGatheringPoint ( unit , x , y ) ;
38513: LD_VAR 0 2
38517: PPUSH
38518: LD_VAR 0 4
38522: PPUSH
38523: LD_VAR 0 5
38527: PPUSH
38528: CALL 36846 0 3
// if cmd = 258 then
38532: LD_VAR 0 1
38536: PUSH
38537: LD_INT 258
38539: EQUAL
38540: IFFALSE 38564
// BurnTreeXYR ( unit , x , y , 8 ) ;
38542: LD_VAR 0 2
38546: PPUSH
38547: LD_VAR 0 4
38551: PPUSH
38552: LD_VAR 0 5
38556: PPUSH
38557: LD_INT 8
38559: PPUSH
38560: CALL 38963 0 4
// end ;
38564: LD_VAR 0 6
38568: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38569: LD_INT 0
38571: PPUSH
38572: PPUSH
38573: PPUSH
38574: PPUSH
38575: PPUSH
38576: PPUSH
38577: PPUSH
38578: PPUSH
38579: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
38580: LD_VAR 0 1
38584: PPUSH
38585: CALL_OW 302
38589: NOT
38590: PUSH
38591: LD_VAR 0 2
38595: PPUSH
38596: LD_VAR 0 3
38600: PPUSH
38601: CALL_OW 488
38605: NOT
38606: OR
38607: PUSH
38608: LD_VAR 0 4
38612: NOT
38613: OR
38614: IFFALSE 38618
// exit ;
38616: GO 38958
// list := [ ] ;
38618: LD_ADDR_VAR 0 13
38622: PUSH
38623: EMPTY
38624: ST_TO_ADDR
// if x - r < 0 then
38625: LD_VAR 0 2
38629: PUSH
38630: LD_VAR 0 4
38634: MINUS
38635: PUSH
38636: LD_INT 0
38638: LESS
38639: IFFALSE 38651
// min_x := 0 else
38641: LD_ADDR_VAR 0 7
38645: PUSH
38646: LD_INT 0
38648: ST_TO_ADDR
38649: GO 38667
// min_x := x - r ;
38651: LD_ADDR_VAR 0 7
38655: PUSH
38656: LD_VAR 0 2
38660: PUSH
38661: LD_VAR 0 4
38665: MINUS
38666: ST_TO_ADDR
// if y - r < 0 then
38667: LD_VAR 0 3
38671: PUSH
38672: LD_VAR 0 4
38676: MINUS
38677: PUSH
38678: LD_INT 0
38680: LESS
38681: IFFALSE 38693
// min_y := 0 else
38683: LD_ADDR_VAR 0 8
38687: PUSH
38688: LD_INT 0
38690: ST_TO_ADDR
38691: GO 38709
// min_y := y - r ;
38693: LD_ADDR_VAR 0 8
38697: PUSH
38698: LD_VAR 0 3
38702: PUSH
38703: LD_VAR 0 4
38707: MINUS
38708: ST_TO_ADDR
// max_x := x + r ;
38709: LD_ADDR_VAR 0 9
38713: PUSH
38714: LD_VAR 0 2
38718: PUSH
38719: LD_VAR 0 4
38723: PLUS
38724: ST_TO_ADDR
// max_y := y + r ;
38725: LD_ADDR_VAR 0 10
38729: PUSH
38730: LD_VAR 0 3
38734: PUSH
38735: LD_VAR 0 4
38739: PLUS
38740: ST_TO_ADDR
// for _x = min_x to max_x do
38741: LD_ADDR_VAR 0 11
38745: PUSH
38746: DOUBLE
38747: LD_VAR 0 7
38751: DEC
38752: ST_TO_ADDR
38753: LD_VAR 0 9
38757: PUSH
38758: FOR_TO
38759: IFFALSE 38876
// for _y = min_y to max_y do
38761: LD_ADDR_VAR 0 12
38765: PUSH
38766: DOUBLE
38767: LD_VAR 0 8
38771: DEC
38772: ST_TO_ADDR
38773: LD_VAR 0 10
38777: PUSH
38778: FOR_TO
38779: IFFALSE 38872
// begin if not ValidHex ( _x , _y ) then
38781: LD_VAR 0 11
38785: PPUSH
38786: LD_VAR 0 12
38790: PPUSH
38791: CALL_OW 488
38795: NOT
38796: IFFALSE 38800
// continue ;
38798: GO 38778
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38800: LD_VAR 0 11
38804: PPUSH
38805: LD_VAR 0 12
38809: PPUSH
38810: CALL_OW 351
38814: PUSH
38815: LD_VAR 0 11
38819: PPUSH
38820: LD_VAR 0 12
38824: PPUSH
38825: CALL_OW 554
38829: AND
38830: IFFALSE 38870
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38832: LD_ADDR_VAR 0 13
38836: PUSH
38837: LD_VAR 0 13
38841: PPUSH
38842: LD_VAR 0 13
38846: PUSH
38847: LD_INT 1
38849: PLUS
38850: PPUSH
38851: LD_VAR 0 11
38855: PUSH
38856: LD_VAR 0 12
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PPUSH
38865: CALL_OW 2
38869: ST_TO_ADDR
// end ;
38870: GO 38778
38872: POP
38873: POP
38874: GO 38758
38876: POP
38877: POP
// if not list then
38878: LD_VAR 0 13
38882: NOT
38883: IFFALSE 38887
// exit ;
38885: GO 38958
// for i in list do
38887: LD_ADDR_VAR 0 6
38891: PUSH
38892: LD_VAR 0 13
38896: PUSH
38897: FOR_IN
38898: IFFALSE 38956
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38900: LD_VAR 0 1
38904: PPUSH
38905: LD_STRING M
38907: PUSH
38908: LD_VAR 0 6
38912: PUSH
38913: LD_INT 1
38915: ARRAY
38916: PUSH
38917: LD_VAR 0 6
38921: PUSH
38922: LD_INT 2
38924: ARRAY
38925: PUSH
38926: LD_INT 0
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: LD_INT 0
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: PUSH
38947: EMPTY
38948: LIST
38949: PPUSH
38950: CALL_OW 447
38954: GO 38897
38956: POP
38957: POP
// end ;
38958: LD_VAR 0 5
38962: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
38963: LD_INT 0
38965: PPUSH
38966: PPUSH
38967: PPUSH
38968: PPUSH
38969: PPUSH
38970: PPUSH
38971: PPUSH
38972: PPUSH
38973: PPUSH
38974: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
38975: LD_VAR 0 1
38979: PPUSH
38980: CALL_OW 302
38984: NOT
38985: PUSH
38986: LD_VAR 0 2
38990: PPUSH
38991: LD_VAR 0 3
38995: PPUSH
38996: CALL_OW 488
39000: NOT
39001: OR
39002: PUSH
39003: LD_VAR 0 4
39007: NOT
39008: OR
39009: IFFALSE 39013
// exit ;
39011: GO 39526
// list := [ ] ;
39013: LD_ADDR_VAR 0 13
39017: PUSH
39018: EMPTY
39019: ST_TO_ADDR
// if x - r < 0 then
39020: LD_VAR 0 2
39024: PUSH
39025: LD_VAR 0 4
39029: MINUS
39030: PUSH
39031: LD_INT 0
39033: LESS
39034: IFFALSE 39046
// min_x := 0 else
39036: LD_ADDR_VAR 0 7
39040: PUSH
39041: LD_INT 0
39043: ST_TO_ADDR
39044: GO 39062
// min_x := x - r ;
39046: LD_ADDR_VAR 0 7
39050: PUSH
39051: LD_VAR 0 2
39055: PUSH
39056: LD_VAR 0 4
39060: MINUS
39061: ST_TO_ADDR
// if y - r < 0 then
39062: LD_VAR 0 3
39066: PUSH
39067: LD_VAR 0 4
39071: MINUS
39072: PUSH
39073: LD_INT 0
39075: LESS
39076: IFFALSE 39088
// min_y := 0 else
39078: LD_ADDR_VAR 0 8
39082: PUSH
39083: LD_INT 0
39085: ST_TO_ADDR
39086: GO 39104
// min_y := y - r ;
39088: LD_ADDR_VAR 0 8
39092: PUSH
39093: LD_VAR 0 3
39097: PUSH
39098: LD_VAR 0 4
39102: MINUS
39103: ST_TO_ADDR
// max_x := x + r ;
39104: LD_ADDR_VAR 0 9
39108: PUSH
39109: LD_VAR 0 2
39113: PUSH
39114: LD_VAR 0 4
39118: PLUS
39119: ST_TO_ADDR
// max_y := y + r ;
39120: LD_ADDR_VAR 0 10
39124: PUSH
39125: LD_VAR 0 3
39129: PUSH
39130: LD_VAR 0 4
39134: PLUS
39135: ST_TO_ADDR
// for _x = min_x to max_x do
39136: LD_ADDR_VAR 0 11
39140: PUSH
39141: DOUBLE
39142: LD_VAR 0 7
39146: DEC
39147: ST_TO_ADDR
39148: LD_VAR 0 9
39152: PUSH
39153: FOR_TO
39154: IFFALSE 39271
// for _y = min_y to max_y do
39156: LD_ADDR_VAR 0 12
39160: PUSH
39161: DOUBLE
39162: LD_VAR 0 8
39166: DEC
39167: ST_TO_ADDR
39168: LD_VAR 0 10
39172: PUSH
39173: FOR_TO
39174: IFFALSE 39267
// begin if not ValidHex ( _x , _y ) then
39176: LD_VAR 0 11
39180: PPUSH
39181: LD_VAR 0 12
39185: PPUSH
39186: CALL_OW 488
39190: NOT
39191: IFFALSE 39195
// continue ;
39193: GO 39173
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
39195: LD_VAR 0 11
39199: PPUSH
39200: LD_VAR 0 12
39204: PPUSH
39205: CALL_OW 351
39209: PUSH
39210: LD_VAR 0 11
39214: PPUSH
39215: LD_VAR 0 12
39219: PPUSH
39220: CALL_OW 554
39224: AND
39225: IFFALSE 39265
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
39227: LD_ADDR_VAR 0 13
39231: PUSH
39232: LD_VAR 0 13
39236: PPUSH
39237: LD_VAR 0 13
39241: PUSH
39242: LD_INT 1
39244: PLUS
39245: PPUSH
39246: LD_VAR 0 11
39250: PUSH
39251: LD_VAR 0 12
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PPUSH
39260: CALL_OW 2
39264: ST_TO_ADDR
// end ;
39265: GO 39173
39267: POP
39268: POP
39269: GO 39153
39271: POP
39272: POP
// if not list then
39273: LD_VAR 0 13
39277: NOT
39278: IFFALSE 39282
// exit ;
39280: GO 39526
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
39282: LD_ADDR_VAR 0 13
39286: PUSH
39287: LD_VAR 0 1
39291: PPUSH
39292: LD_VAR 0 13
39296: PPUSH
39297: LD_INT 1
39299: PPUSH
39300: LD_INT 1
39302: PPUSH
39303: CALL 48139 0 4
39307: ST_TO_ADDR
// ComStop ( flame ) ;
39308: LD_VAR 0 1
39312: PPUSH
39313: CALL_OW 141
// for i in list do
39317: LD_ADDR_VAR 0 6
39321: PUSH
39322: LD_VAR 0 13
39326: PUSH
39327: FOR_IN
39328: IFFALSE 39359
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
39330: LD_VAR 0 1
39334: PPUSH
39335: LD_VAR 0 6
39339: PUSH
39340: LD_INT 1
39342: ARRAY
39343: PPUSH
39344: LD_VAR 0 6
39348: PUSH
39349: LD_INT 2
39351: ARRAY
39352: PPUSH
39353: CALL_OW 176
39357: GO 39327
39359: POP
39360: POP
// repeat wait ( 0 0$1 ) ;
39361: LD_INT 35
39363: PPUSH
39364: CALL_OW 67
// task := GetTaskList ( flame ) ;
39368: LD_ADDR_VAR 0 14
39372: PUSH
39373: LD_VAR 0 1
39377: PPUSH
39378: CALL_OW 437
39382: ST_TO_ADDR
// if not task then
39383: LD_VAR 0 14
39387: NOT
39388: IFFALSE 39392
// exit ;
39390: GO 39526
// if task [ 1 ] [ 1 ] <> | then
39392: LD_VAR 0 14
39396: PUSH
39397: LD_INT 1
39399: ARRAY
39400: PUSH
39401: LD_INT 1
39403: ARRAY
39404: PUSH
39405: LD_STRING |
39407: NONEQUAL
39408: IFFALSE 39412
// exit ;
39410: GO 39526
// _x := task [ 1 ] [ 2 ] ;
39412: LD_ADDR_VAR 0 11
39416: PUSH
39417: LD_VAR 0 14
39421: PUSH
39422: LD_INT 1
39424: ARRAY
39425: PUSH
39426: LD_INT 2
39428: ARRAY
39429: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
39430: LD_ADDR_VAR 0 12
39434: PUSH
39435: LD_VAR 0 14
39439: PUSH
39440: LD_INT 1
39442: ARRAY
39443: PUSH
39444: LD_INT 3
39446: ARRAY
39447: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
39448: LD_VAR 0 11
39452: PPUSH
39453: LD_VAR 0 12
39457: PPUSH
39458: CALL_OW 351
39462: NOT
39463: PUSH
39464: LD_VAR 0 11
39468: PPUSH
39469: LD_VAR 0 12
39473: PPUSH
39474: CALL_OW 554
39478: NOT
39479: OR
39480: IFFALSE 39514
// begin task := Delete ( task , 1 ) ;
39482: LD_ADDR_VAR 0 14
39486: PUSH
39487: LD_VAR 0 14
39491: PPUSH
39492: LD_INT 1
39494: PPUSH
39495: CALL_OW 3
39499: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
39500: LD_VAR 0 1
39504: PPUSH
39505: LD_VAR 0 14
39509: PPUSH
39510: CALL_OW 446
// end ; until not HasTask ( flame ) ;
39514: LD_VAR 0 1
39518: PPUSH
39519: CALL_OW 314
39523: NOT
39524: IFFALSE 39361
// end ;
39526: LD_VAR 0 5
39530: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
39531: LD_EXP 112
39535: NOT
39536: IFFALSE 39586
39538: GO 39540
39540: DISABLE
// begin initHack := true ;
39541: LD_ADDR_EXP 112
39545: PUSH
39546: LD_INT 1
39548: ST_TO_ADDR
// hackTanks := [ ] ;
39549: LD_ADDR_EXP 113
39553: PUSH
39554: EMPTY
39555: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
39556: LD_ADDR_EXP 114
39560: PUSH
39561: EMPTY
39562: ST_TO_ADDR
// hackLimit := 3 ;
39563: LD_ADDR_EXP 115
39567: PUSH
39568: LD_INT 3
39570: ST_TO_ADDR
// hackDist := 12 ;
39571: LD_ADDR_EXP 116
39575: PUSH
39576: LD_INT 12
39578: ST_TO_ADDR
// hackCounter := [ ] ;
39579: LD_ADDR_EXP 117
39583: PUSH
39584: EMPTY
39585: ST_TO_ADDR
// end ;
39586: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
39587: LD_EXP 112
39591: PUSH
39592: LD_INT 34
39594: PUSH
39595: LD_INT 99
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PPUSH
39602: CALL_OW 69
39606: AND
39607: IFFALSE 39860
39609: GO 39611
39611: DISABLE
39612: LD_INT 0
39614: PPUSH
39615: PPUSH
// begin enable ;
39616: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
39617: LD_ADDR_VAR 0 1
39621: PUSH
39622: LD_INT 34
39624: PUSH
39625: LD_INT 99
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PPUSH
39632: CALL_OW 69
39636: PUSH
39637: FOR_IN
39638: IFFALSE 39858
// begin if not i in hackTanks then
39640: LD_VAR 0 1
39644: PUSH
39645: LD_EXP 113
39649: IN
39650: NOT
39651: IFFALSE 39734
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
39653: LD_ADDR_EXP 113
39657: PUSH
39658: LD_EXP 113
39662: PPUSH
39663: LD_EXP 113
39667: PUSH
39668: LD_INT 1
39670: PLUS
39671: PPUSH
39672: LD_VAR 0 1
39676: PPUSH
39677: CALL_OW 1
39681: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
39682: LD_ADDR_EXP 114
39686: PUSH
39687: LD_EXP 114
39691: PPUSH
39692: LD_EXP 114
39696: PUSH
39697: LD_INT 1
39699: PLUS
39700: PPUSH
39701: EMPTY
39702: PPUSH
39703: CALL_OW 1
39707: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
39708: LD_ADDR_EXP 117
39712: PUSH
39713: LD_EXP 117
39717: PPUSH
39718: LD_EXP 117
39722: PUSH
39723: LD_INT 1
39725: PLUS
39726: PPUSH
39727: EMPTY
39728: PPUSH
39729: CALL_OW 1
39733: ST_TO_ADDR
// end ; if not IsOk ( i ) then
39734: LD_VAR 0 1
39738: PPUSH
39739: CALL_OW 302
39743: NOT
39744: IFFALSE 39757
// begin HackUnlinkAll ( i ) ;
39746: LD_VAR 0 1
39750: PPUSH
39751: CALL 39863 0 1
// continue ;
39755: GO 39637
// end ; HackCheckCapturedStatus ( i ) ;
39757: LD_VAR 0 1
39761: PPUSH
39762: CALL 40306 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
39766: LD_ADDR_VAR 0 2
39770: PUSH
39771: LD_INT 81
39773: PUSH
39774: LD_VAR 0 1
39778: PPUSH
39779: CALL_OW 255
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 33
39790: PUSH
39791: LD_INT 3
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 91
39800: PUSH
39801: LD_VAR 0 1
39805: PUSH
39806: LD_EXP 116
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 50
39818: PUSH
39819: EMPTY
39820: LIST
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: PPUSH
39828: CALL_OW 69
39832: ST_TO_ADDR
// if not tmp then
39833: LD_VAR 0 2
39837: NOT
39838: IFFALSE 39842
// continue ;
39840: GO 39637
// HackLink ( i , tmp ) ;
39842: LD_VAR 0 1
39846: PPUSH
39847: LD_VAR 0 2
39851: PPUSH
39852: CALL 39999 0 2
// end ;
39856: GO 39637
39858: POP
39859: POP
// end ;
39860: PPOPN 2
39862: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
39863: LD_INT 0
39865: PPUSH
39866: PPUSH
39867: PPUSH
// if not hack in hackTanks then
39868: LD_VAR 0 1
39872: PUSH
39873: LD_EXP 113
39877: IN
39878: NOT
39879: IFFALSE 39883
// exit ;
39881: GO 39994
// index := GetElementIndex ( hackTanks , hack ) ;
39883: LD_ADDR_VAR 0 4
39887: PUSH
39888: LD_EXP 113
39892: PPUSH
39893: LD_VAR 0 1
39897: PPUSH
39898: CALL 47436 0 2
39902: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
39903: LD_EXP 114
39907: PUSH
39908: LD_VAR 0 4
39912: ARRAY
39913: IFFALSE 39994
// begin for i in hackTanksCaptured [ index ] do
39915: LD_ADDR_VAR 0 3
39919: PUSH
39920: LD_EXP 114
39924: PUSH
39925: LD_VAR 0 4
39929: ARRAY
39930: PUSH
39931: FOR_IN
39932: IFFALSE 39958
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39934: LD_VAR 0 3
39938: PUSH
39939: LD_INT 1
39941: ARRAY
39942: PPUSH
39943: LD_VAR 0 3
39947: PUSH
39948: LD_INT 2
39950: ARRAY
39951: PPUSH
39952: CALL_OW 235
39956: GO 39931
39958: POP
39959: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39960: LD_ADDR_EXP 114
39964: PUSH
39965: LD_EXP 114
39969: PPUSH
39970: LD_VAR 0 4
39974: PPUSH
39975: EMPTY
39976: PPUSH
39977: CALL_OW 1
39981: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39982: LD_VAR 0 1
39986: PPUSH
39987: LD_INT 0
39989: PPUSH
39990: CALL_OW 505
// end ; end ;
39994: LD_VAR 0 2
39998: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39999: LD_INT 0
40001: PPUSH
40002: PPUSH
40003: PPUSH
// if not hack in hackTanks or not vehicles then
40004: LD_VAR 0 1
40008: PUSH
40009: LD_EXP 113
40013: IN
40014: NOT
40015: PUSH
40016: LD_VAR 0 2
40020: NOT
40021: OR
40022: IFFALSE 40026
// exit ;
40024: GO 40301
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
40026: LD_ADDR_VAR 0 2
40030: PUSH
40031: LD_VAR 0 1
40035: PPUSH
40036: LD_VAR 0 2
40040: PPUSH
40041: LD_INT 1
40043: PPUSH
40044: LD_INT 1
40046: PPUSH
40047: CALL 48086 0 4
40051: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
40052: LD_ADDR_VAR 0 5
40056: PUSH
40057: LD_EXP 113
40061: PPUSH
40062: LD_VAR 0 1
40066: PPUSH
40067: CALL 47436 0 2
40071: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
40072: LD_EXP 114
40076: PUSH
40077: LD_VAR 0 5
40081: ARRAY
40082: PUSH
40083: LD_EXP 115
40087: LESS
40088: IFFALSE 40277
// begin for i := 1 to vehicles do
40090: LD_ADDR_VAR 0 4
40094: PUSH
40095: DOUBLE
40096: LD_INT 1
40098: DEC
40099: ST_TO_ADDR
40100: LD_VAR 0 2
40104: PUSH
40105: FOR_TO
40106: IFFALSE 40275
// begin if hackTanksCaptured [ index ] = hackLimit then
40108: LD_EXP 114
40112: PUSH
40113: LD_VAR 0 5
40117: ARRAY
40118: PUSH
40119: LD_EXP 115
40123: EQUAL
40124: IFFALSE 40128
// break ;
40126: GO 40275
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
40128: LD_ADDR_EXP 117
40132: PUSH
40133: LD_EXP 117
40137: PPUSH
40138: LD_VAR 0 5
40142: PPUSH
40143: LD_EXP 117
40147: PUSH
40148: LD_VAR 0 5
40152: ARRAY
40153: PUSH
40154: LD_INT 1
40156: PLUS
40157: PPUSH
40158: CALL_OW 1
40162: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
40163: LD_ADDR_EXP 114
40167: PUSH
40168: LD_EXP 114
40172: PPUSH
40173: LD_VAR 0 5
40177: PUSH
40178: LD_EXP 114
40182: PUSH
40183: LD_VAR 0 5
40187: ARRAY
40188: PUSH
40189: LD_INT 1
40191: PLUS
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PPUSH
40197: LD_VAR 0 2
40201: PUSH
40202: LD_VAR 0 4
40206: ARRAY
40207: PUSH
40208: LD_VAR 0 2
40212: PUSH
40213: LD_VAR 0 4
40217: ARRAY
40218: PPUSH
40219: CALL_OW 255
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PPUSH
40228: CALL 47651 0 3
40232: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
40233: LD_VAR 0 2
40237: PUSH
40238: LD_VAR 0 4
40242: ARRAY
40243: PPUSH
40244: LD_VAR 0 1
40248: PPUSH
40249: CALL_OW 255
40253: PPUSH
40254: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
40258: LD_VAR 0 2
40262: PUSH
40263: LD_VAR 0 4
40267: ARRAY
40268: PPUSH
40269: CALL_OW 141
// end ;
40273: GO 40105
40275: POP
40276: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40277: LD_VAR 0 1
40281: PPUSH
40282: LD_EXP 114
40286: PUSH
40287: LD_VAR 0 5
40291: ARRAY
40292: PUSH
40293: LD_INT 0
40295: PLUS
40296: PPUSH
40297: CALL_OW 505
// end ;
40301: LD_VAR 0 3
40305: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
40306: LD_INT 0
40308: PPUSH
40309: PPUSH
40310: PPUSH
40311: PPUSH
// if not hack in hackTanks then
40312: LD_VAR 0 1
40316: PUSH
40317: LD_EXP 113
40321: IN
40322: NOT
40323: IFFALSE 40327
// exit ;
40325: GO 40567
// index := GetElementIndex ( hackTanks , hack ) ;
40327: LD_ADDR_VAR 0 4
40331: PUSH
40332: LD_EXP 113
40336: PPUSH
40337: LD_VAR 0 1
40341: PPUSH
40342: CALL 47436 0 2
40346: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
40347: LD_ADDR_VAR 0 3
40351: PUSH
40352: DOUBLE
40353: LD_EXP 114
40357: PUSH
40358: LD_VAR 0 4
40362: ARRAY
40363: INC
40364: ST_TO_ADDR
40365: LD_INT 1
40367: PUSH
40368: FOR_DOWNTO
40369: IFFALSE 40541
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
40371: LD_ADDR_VAR 0 5
40375: PUSH
40376: LD_EXP 114
40380: PUSH
40381: LD_VAR 0 4
40385: ARRAY
40386: PUSH
40387: LD_VAR 0 3
40391: ARRAY
40392: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
40393: LD_VAR 0 5
40397: PUSH
40398: LD_INT 1
40400: ARRAY
40401: PPUSH
40402: CALL_OW 302
40406: NOT
40407: PUSH
40408: LD_VAR 0 5
40412: PUSH
40413: LD_INT 1
40415: ARRAY
40416: PPUSH
40417: CALL_OW 255
40421: PUSH
40422: LD_VAR 0 1
40426: PPUSH
40427: CALL_OW 255
40431: NONEQUAL
40432: OR
40433: IFFALSE 40539
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
40435: LD_VAR 0 5
40439: PUSH
40440: LD_INT 1
40442: ARRAY
40443: PPUSH
40444: CALL_OW 305
40448: PUSH
40449: LD_VAR 0 5
40453: PUSH
40454: LD_INT 1
40456: ARRAY
40457: PPUSH
40458: CALL_OW 255
40462: PUSH
40463: LD_VAR 0 1
40467: PPUSH
40468: CALL_OW 255
40472: EQUAL
40473: AND
40474: IFFALSE 40498
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
40476: LD_VAR 0 5
40480: PUSH
40481: LD_INT 1
40483: ARRAY
40484: PPUSH
40485: LD_VAR 0 5
40489: PUSH
40490: LD_INT 2
40492: ARRAY
40493: PPUSH
40494: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
40498: LD_ADDR_EXP 114
40502: PUSH
40503: LD_EXP 114
40507: PPUSH
40508: LD_VAR 0 4
40512: PPUSH
40513: LD_EXP 114
40517: PUSH
40518: LD_VAR 0 4
40522: ARRAY
40523: PPUSH
40524: LD_VAR 0 3
40528: PPUSH
40529: CALL_OW 3
40533: PPUSH
40534: CALL_OW 1
40538: ST_TO_ADDR
// end ; end ;
40539: GO 40368
40541: POP
40542: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40543: LD_VAR 0 1
40547: PPUSH
40548: LD_EXP 114
40552: PUSH
40553: LD_VAR 0 4
40557: ARRAY
40558: PUSH
40559: LD_INT 0
40561: PLUS
40562: PPUSH
40563: CALL_OW 505
// end ;
40567: LD_VAR 0 2
40571: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
40572: LD_INT 0
40574: PPUSH
40575: PPUSH
40576: PPUSH
40577: PPUSH
// if not hack in hackTanks then
40578: LD_VAR 0 1
40582: PUSH
40583: LD_EXP 113
40587: IN
40588: NOT
40589: IFFALSE 40593
// exit ;
40591: GO 40678
// index := GetElementIndex ( hackTanks , hack ) ;
40593: LD_ADDR_VAR 0 5
40597: PUSH
40598: LD_EXP 113
40602: PPUSH
40603: LD_VAR 0 1
40607: PPUSH
40608: CALL 47436 0 2
40612: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
40613: LD_ADDR_VAR 0 4
40617: PUSH
40618: DOUBLE
40619: LD_INT 1
40621: DEC
40622: ST_TO_ADDR
40623: LD_EXP 114
40627: PUSH
40628: LD_VAR 0 5
40632: ARRAY
40633: PUSH
40634: FOR_TO
40635: IFFALSE 40676
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
40637: LD_EXP 114
40641: PUSH
40642: LD_VAR 0 5
40646: ARRAY
40647: PUSH
40648: LD_VAR 0 4
40652: ARRAY
40653: PUSH
40654: LD_INT 1
40656: ARRAY
40657: PUSH
40658: LD_VAR 0 2
40662: EQUAL
40663: IFFALSE 40674
// KillUnit ( vehicle ) ;
40665: LD_VAR 0 2
40669: PPUSH
40670: CALL_OW 66
40674: GO 40634
40676: POP
40677: POP
// end ;
40678: LD_VAR 0 3
40682: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
40683: LD_EXP 118
40687: NOT
40688: IFFALSE 40723
40690: GO 40692
40692: DISABLE
// begin initMiner := true ;
40693: LD_ADDR_EXP 118
40697: PUSH
40698: LD_INT 1
40700: ST_TO_ADDR
// minersList := [ ] ;
40701: LD_ADDR_EXP 119
40705: PUSH
40706: EMPTY
40707: ST_TO_ADDR
// minerMinesList := [ ] ;
40708: LD_ADDR_EXP 120
40712: PUSH
40713: EMPTY
40714: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
40715: LD_ADDR_EXP 121
40719: PUSH
40720: LD_INT 5
40722: ST_TO_ADDR
// end ;
40723: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
40724: LD_EXP 118
40728: PUSH
40729: LD_INT 34
40731: PUSH
40732: LD_INT 81
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PPUSH
40739: CALL_OW 69
40743: AND
40744: IFFALSE 41205
40746: GO 40748
40748: DISABLE
40749: LD_INT 0
40751: PPUSH
40752: PPUSH
40753: PPUSH
40754: PPUSH
// begin enable ;
40755: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
40756: LD_ADDR_VAR 0 1
40760: PUSH
40761: LD_INT 34
40763: PUSH
40764: LD_INT 81
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PPUSH
40771: CALL_OW 69
40775: PUSH
40776: FOR_IN
40777: IFFALSE 40849
// begin if not i in minersList then
40779: LD_VAR 0 1
40783: PUSH
40784: LD_EXP 119
40788: IN
40789: NOT
40790: IFFALSE 40847
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
40792: LD_ADDR_EXP 119
40796: PUSH
40797: LD_EXP 119
40801: PPUSH
40802: LD_EXP 119
40806: PUSH
40807: LD_INT 1
40809: PLUS
40810: PPUSH
40811: LD_VAR 0 1
40815: PPUSH
40816: CALL_OW 1
40820: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
40821: LD_ADDR_EXP 120
40825: PUSH
40826: LD_EXP 120
40830: PPUSH
40831: LD_EXP 120
40835: PUSH
40836: LD_INT 1
40838: PLUS
40839: PPUSH
40840: EMPTY
40841: PPUSH
40842: CALL_OW 1
40846: ST_TO_ADDR
// end end ;
40847: GO 40776
40849: POP
40850: POP
// for i := minerMinesList downto 1 do
40851: LD_ADDR_VAR 0 1
40855: PUSH
40856: DOUBLE
40857: LD_EXP 120
40861: INC
40862: ST_TO_ADDR
40863: LD_INT 1
40865: PUSH
40866: FOR_DOWNTO
40867: IFFALSE 41203
// begin if IsLive ( minersList [ i ] ) then
40869: LD_EXP 119
40873: PUSH
40874: LD_VAR 0 1
40878: ARRAY
40879: PPUSH
40880: CALL_OW 300
40884: IFFALSE 40912
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
40886: LD_EXP 119
40890: PUSH
40891: LD_VAR 0 1
40895: ARRAY
40896: PPUSH
40897: LD_EXP 120
40901: PUSH
40902: LD_VAR 0 1
40906: ARRAY
40907: PPUSH
40908: CALL_OW 505
// if not minerMinesList [ i ] then
40912: LD_EXP 120
40916: PUSH
40917: LD_VAR 0 1
40921: ARRAY
40922: NOT
40923: IFFALSE 40927
// continue ;
40925: GO 40866
// for j := minerMinesList [ i ] downto 1 do
40927: LD_ADDR_VAR 0 2
40931: PUSH
40932: DOUBLE
40933: LD_EXP 120
40937: PUSH
40938: LD_VAR 0 1
40942: ARRAY
40943: INC
40944: ST_TO_ADDR
40945: LD_INT 1
40947: PUSH
40948: FOR_DOWNTO
40949: IFFALSE 41199
// begin side := GetSide ( minersList [ i ] ) ;
40951: LD_ADDR_VAR 0 3
40955: PUSH
40956: LD_EXP 119
40960: PUSH
40961: LD_VAR 0 1
40965: ARRAY
40966: PPUSH
40967: CALL_OW 255
40971: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40972: LD_ADDR_VAR 0 4
40976: PUSH
40977: LD_EXP 120
40981: PUSH
40982: LD_VAR 0 1
40986: ARRAY
40987: PUSH
40988: LD_VAR 0 2
40992: ARRAY
40993: PUSH
40994: LD_INT 1
40996: ARRAY
40997: PPUSH
40998: LD_EXP 120
41002: PUSH
41003: LD_VAR 0 1
41007: ARRAY
41008: PUSH
41009: LD_VAR 0 2
41013: ARRAY
41014: PUSH
41015: LD_INT 2
41017: ARRAY
41018: PPUSH
41019: CALL_OW 428
41023: ST_TO_ADDR
// if not tmp then
41024: LD_VAR 0 4
41028: NOT
41029: IFFALSE 41033
// continue ;
41031: GO 40948
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
41033: LD_VAR 0 4
41037: PUSH
41038: LD_INT 81
41040: PUSH
41041: LD_VAR 0 3
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PPUSH
41050: CALL_OW 69
41054: IN
41055: PUSH
41056: LD_EXP 120
41060: PUSH
41061: LD_VAR 0 1
41065: ARRAY
41066: PUSH
41067: LD_VAR 0 2
41071: ARRAY
41072: PUSH
41073: LD_INT 1
41075: ARRAY
41076: PPUSH
41077: LD_EXP 120
41081: PUSH
41082: LD_VAR 0 1
41086: ARRAY
41087: PUSH
41088: LD_VAR 0 2
41092: ARRAY
41093: PUSH
41094: LD_INT 2
41096: ARRAY
41097: PPUSH
41098: CALL_OW 458
41102: AND
41103: IFFALSE 41197
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
41105: LD_EXP 120
41109: PUSH
41110: LD_VAR 0 1
41114: ARRAY
41115: PUSH
41116: LD_VAR 0 2
41120: ARRAY
41121: PUSH
41122: LD_INT 1
41124: ARRAY
41125: PPUSH
41126: LD_EXP 120
41130: PUSH
41131: LD_VAR 0 1
41135: ARRAY
41136: PUSH
41137: LD_VAR 0 2
41141: ARRAY
41142: PUSH
41143: LD_INT 2
41145: ARRAY
41146: PPUSH
41147: LD_VAR 0 3
41151: PPUSH
41152: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
41156: LD_ADDR_EXP 120
41160: PUSH
41161: LD_EXP 120
41165: PPUSH
41166: LD_VAR 0 1
41170: PPUSH
41171: LD_EXP 120
41175: PUSH
41176: LD_VAR 0 1
41180: ARRAY
41181: PPUSH
41182: LD_VAR 0 2
41186: PPUSH
41187: CALL_OW 3
41191: PPUSH
41192: CALL_OW 1
41196: ST_TO_ADDR
// end ; end ;
41197: GO 40948
41199: POP
41200: POP
// end ;
41201: GO 40866
41203: POP
41204: POP
// end ;
41205: PPOPN 4
41207: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
41208: LD_INT 0
41210: PPUSH
41211: PPUSH
// result := false ;
41212: LD_ADDR_VAR 0 4
41216: PUSH
41217: LD_INT 0
41219: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
41220: LD_VAR 0 1
41224: PPUSH
41225: CALL_OW 264
41229: PUSH
41230: LD_INT 81
41232: EQUAL
41233: NOT
41234: IFFALSE 41238
// exit ;
41236: GO 41478
// index := GetElementIndex ( minersList , unit ) ;
41238: LD_ADDR_VAR 0 5
41242: PUSH
41243: LD_EXP 119
41247: PPUSH
41248: LD_VAR 0 1
41252: PPUSH
41253: CALL 47436 0 2
41257: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
41258: LD_EXP 120
41262: PUSH
41263: LD_VAR 0 5
41267: ARRAY
41268: PUSH
41269: LD_EXP 121
41273: GREATEREQUAL
41274: IFFALSE 41278
// exit ;
41276: GO 41478
// ComMoveXY ( unit , x , y ) ;
41278: LD_VAR 0 1
41282: PPUSH
41283: LD_VAR 0 2
41287: PPUSH
41288: LD_VAR 0 3
41292: PPUSH
41293: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41297: LD_INT 35
41299: PPUSH
41300: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
41304: LD_VAR 0 1
41308: PPUSH
41309: LD_VAR 0 2
41313: PPUSH
41314: LD_VAR 0 3
41318: PPUSH
41319: CALL 79177 0 3
41323: NOT
41324: PUSH
41325: LD_VAR 0 1
41329: PPUSH
41330: CALL_OW 314
41334: AND
41335: IFFALSE 41339
// exit ;
41337: GO 41478
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
41339: LD_VAR 0 2
41343: PPUSH
41344: LD_VAR 0 3
41348: PPUSH
41349: CALL_OW 428
41353: PUSH
41354: LD_VAR 0 1
41358: EQUAL
41359: PUSH
41360: LD_VAR 0 1
41364: PPUSH
41365: CALL_OW 314
41369: NOT
41370: AND
41371: IFFALSE 41297
// PlaySoundXY ( x , y , PlantMine ) ;
41373: LD_VAR 0 2
41377: PPUSH
41378: LD_VAR 0 3
41382: PPUSH
41383: LD_STRING PlantMine
41385: PPUSH
41386: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
41390: LD_VAR 0 2
41394: PPUSH
41395: LD_VAR 0 3
41399: PPUSH
41400: LD_VAR 0 1
41404: PPUSH
41405: CALL_OW 255
41409: PPUSH
41410: LD_INT 0
41412: PPUSH
41413: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
41417: LD_ADDR_EXP 120
41421: PUSH
41422: LD_EXP 120
41426: PPUSH
41427: LD_VAR 0 5
41431: PUSH
41432: LD_EXP 120
41436: PUSH
41437: LD_VAR 0 5
41441: ARRAY
41442: PUSH
41443: LD_INT 1
41445: PLUS
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PPUSH
41451: LD_VAR 0 2
41455: PUSH
41456: LD_VAR 0 3
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PPUSH
41465: CALL 47651 0 3
41469: ST_TO_ADDR
// result := true ;
41470: LD_ADDR_VAR 0 4
41474: PUSH
41475: LD_INT 1
41477: ST_TO_ADDR
// end ;
41478: LD_VAR 0 4
41482: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
41483: LD_INT 0
41485: PPUSH
41486: PPUSH
41487: PPUSH
// if not unit in minersList then
41488: LD_VAR 0 1
41492: PUSH
41493: LD_EXP 119
41497: IN
41498: NOT
41499: IFFALSE 41503
// exit ;
41501: GO 41895
// index := GetElementIndex ( minersList , unit ) ;
41503: LD_ADDR_VAR 0 6
41507: PUSH
41508: LD_EXP 119
41512: PPUSH
41513: LD_VAR 0 1
41517: PPUSH
41518: CALL 47436 0 2
41522: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
41523: LD_ADDR_VAR 0 5
41527: PUSH
41528: DOUBLE
41529: LD_EXP 120
41533: PUSH
41534: LD_VAR 0 6
41538: ARRAY
41539: INC
41540: ST_TO_ADDR
41541: LD_INT 1
41543: PUSH
41544: FOR_DOWNTO
41545: IFFALSE 41706
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
41547: LD_EXP 120
41551: PUSH
41552: LD_VAR 0 6
41556: ARRAY
41557: PUSH
41558: LD_VAR 0 5
41562: ARRAY
41563: PUSH
41564: LD_INT 1
41566: ARRAY
41567: PUSH
41568: LD_VAR 0 2
41572: EQUAL
41573: PUSH
41574: LD_EXP 120
41578: PUSH
41579: LD_VAR 0 6
41583: ARRAY
41584: PUSH
41585: LD_VAR 0 5
41589: ARRAY
41590: PUSH
41591: LD_INT 2
41593: ARRAY
41594: PUSH
41595: LD_VAR 0 3
41599: EQUAL
41600: AND
41601: IFFALSE 41704
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41603: LD_EXP 120
41607: PUSH
41608: LD_VAR 0 6
41612: ARRAY
41613: PUSH
41614: LD_VAR 0 5
41618: ARRAY
41619: PUSH
41620: LD_INT 1
41622: ARRAY
41623: PPUSH
41624: LD_EXP 120
41628: PUSH
41629: LD_VAR 0 6
41633: ARRAY
41634: PUSH
41635: LD_VAR 0 5
41639: ARRAY
41640: PUSH
41641: LD_INT 2
41643: ARRAY
41644: PPUSH
41645: LD_VAR 0 1
41649: PPUSH
41650: CALL_OW 255
41654: PPUSH
41655: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41659: LD_ADDR_EXP 120
41663: PUSH
41664: LD_EXP 120
41668: PPUSH
41669: LD_VAR 0 6
41673: PPUSH
41674: LD_EXP 120
41678: PUSH
41679: LD_VAR 0 6
41683: ARRAY
41684: PPUSH
41685: LD_VAR 0 5
41689: PPUSH
41690: CALL_OW 3
41694: PPUSH
41695: CALL_OW 1
41699: ST_TO_ADDR
// exit ;
41700: POP
41701: POP
41702: GO 41895
// end ; end ;
41704: GO 41544
41706: POP
41707: POP
// for i := minerMinesList [ index ] downto 1 do
41708: LD_ADDR_VAR 0 5
41712: PUSH
41713: DOUBLE
41714: LD_EXP 120
41718: PUSH
41719: LD_VAR 0 6
41723: ARRAY
41724: INC
41725: ST_TO_ADDR
41726: LD_INT 1
41728: PUSH
41729: FOR_DOWNTO
41730: IFFALSE 41893
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
41732: LD_EXP 120
41736: PUSH
41737: LD_VAR 0 6
41741: ARRAY
41742: PUSH
41743: LD_VAR 0 5
41747: ARRAY
41748: PUSH
41749: LD_INT 1
41751: ARRAY
41752: PPUSH
41753: LD_EXP 120
41757: PUSH
41758: LD_VAR 0 6
41762: ARRAY
41763: PUSH
41764: LD_VAR 0 5
41768: ARRAY
41769: PUSH
41770: LD_INT 2
41772: ARRAY
41773: PPUSH
41774: LD_VAR 0 2
41778: PPUSH
41779: LD_VAR 0 3
41783: PPUSH
41784: CALL_OW 298
41788: PUSH
41789: LD_INT 6
41791: LESS
41792: IFFALSE 41891
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41794: LD_EXP 120
41798: PUSH
41799: LD_VAR 0 6
41803: ARRAY
41804: PUSH
41805: LD_VAR 0 5
41809: ARRAY
41810: PUSH
41811: LD_INT 1
41813: ARRAY
41814: PPUSH
41815: LD_EXP 120
41819: PUSH
41820: LD_VAR 0 6
41824: ARRAY
41825: PUSH
41826: LD_VAR 0 5
41830: ARRAY
41831: PUSH
41832: LD_INT 2
41834: ARRAY
41835: PPUSH
41836: LD_VAR 0 1
41840: PPUSH
41841: CALL_OW 255
41845: PPUSH
41846: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41850: LD_ADDR_EXP 120
41854: PUSH
41855: LD_EXP 120
41859: PPUSH
41860: LD_VAR 0 6
41864: PPUSH
41865: LD_EXP 120
41869: PUSH
41870: LD_VAR 0 6
41874: ARRAY
41875: PPUSH
41876: LD_VAR 0 5
41880: PPUSH
41881: CALL_OW 3
41885: PPUSH
41886: CALL_OW 1
41890: ST_TO_ADDR
// end ; end ;
41891: GO 41729
41893: POP
41894: POP
// end ;
41895: LD_VAR 0 4
41899: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
41900: LD_INT 0
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
41906: PPUSH
41907: PPUSH
41908: PPUSH
41909: PPUSH
41910: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41911: LD_VAR 0 1
41915: PPUSH
41916: CALL_OW 264
41920: PUSH
41921: LD_INT 81
41923: EQUAL
41924: NOT
41925: PUSH
41926: LD_VAR 0 1
41930: PUSH
41931: LD_EXP 119
41935: IN
41936: NOT
41937: OR
41938: IFFALSE 41942
// exit ;
41940: GO 42264
// index := GetElementIndex ( minersList , unit ) ;
41942: LD_ADDR_VAR 0 6
41946: PUSH
41947: LD_EXP 119
41951: PPUSH
41952: LD_VAR 0 1
41956: PPUSH
41957: CALL 47436 0 2
41961: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41962: LD_ADDR_VAR 0 8
41966: PUSH
41967: LD_EXP 121
41971: PUSH
41972: LD_EXP 120
41976: PUSH
41977: LD_VAR 0 6
41981: ARRAY
41982: MINUS
41983: ST_TO_ADDR
// if not minesFreeAmount then
41984: LD_VAR 0 8
41988: NOT
41989: IFFALSE 41993
// exit ;
41991: GO 42264
// tmp := [ ] ;
41993: LD_ADDR_VAR 0 7
41997: PUSH
41998: EMPTY
41999: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
42000: LD_ADDR_VAR 0 5
42004: PUSH
42005: DOUBLE
42006: LD_INT 1
42008: DEC
42009: ST_TO_ADDR
42010: LD_VAR 0 8
42014: PUSH
42015: FOR_TO
42016: IFFALSE 42211
// begin _d := rand ( 0 , 5 ) ;
42018: LD_ADDR_VAR 0 11
42022: PUSH
42023: LD_INT 0
42025: PPUSH
42026: LD_INT 5
42028: PPUSH
42029: CALL_OW 12
42033: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
42034: LD_ADDR_VAR 0 12
42038: PUSH
42039: LD_INT 2
42041: PPUSH
42042: LD_INT 6
42044: PPUSH
42045: CALL_OW 12
42049: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
42050: LD_ADDR_VAR 0 9
42054: PUSH
42055: LD_VAR 0 2
42059: PPUSH
42060: LD_VAR 0 11
42064: PPUSH
42065: LD_VAR 0 12
42069: PPUSH
42070: CALL_OW 272
42074: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
42075: LD_ADDR_VAR 0 10
42079: PUSH
42080: LD_VAR 0 3
42084: PPUSH
42085: LD_VAR 0 11
42089: PPUSH
42090: LD_VAR 0 12
42094: PPUSH
42095: CALL_OW 273
42099: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
42100: LD_VAR 0 9
42104: PPUSH
42105: LD_VAR 0 10
42109: PPUSH
42110: CALL_OW 488
42114: PUSH
42115: LD_VAR 0 9
42119: PUSH
42120: LD_VAR 0 10
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_VAR 0 7
42133: IN
42134: NOT
42135: AND
42136: PUSH
42137: LD_VAR 0 9
42141: PPUSH
42142: LD_VAR 0 10
42146: PPUSH
42147: CALL_OW 458
42151: NOT
42152: AND
42153: IFFALSE 42195
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
42155: LD_ADDR_VAR 0 7
42159: PUSH
42160: LD_VAR 0 7
42164: PPUSH
42165: LD_VAR 0 7
42169: PUSH
42170: LD_INT 1
42172: PLUS
42173: PPUSH
42174: LD_VAR 0 9
42178: PUSH
42179: LD_VAR 0 10
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PPUSH
42188: CALL_OW 1
42192: ST_TO_ADDR
42193: GO 42209
// i := i - 1 ;
42195: LD_ADDR_VAR 0 5
42199: PUSH
42200: LD_VAR 0 5
42204: PUSH
42205: LD_INT 1
42207: MINUS
42208: ST_TO_ADDR
// end ;
42209: GO 42015
42211: POP
42212: POP
// for i in tmp do
42213: LD_ADDR_VAR 0 5
42217: PUSH
42218: LD_VAR 0 7
42222: PUSH
42223: FOR_IN
42224: IFFALSE 42262
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
42226: LD_VAR 0 1
42230: PPUSH
42231: LD_VAR 0 5
42235: PUSH
42236: LD_INT 1
42238: ARRAY
42239: PPUSH
42240: LD_VAR 0 5
42244: PUSH
42245: LD_INT 2
42247: ARRAY
42248: PPUSH
42249: CALL 41208 0 3
42253: NOT
42254: IFFALSE 42260
// exit ;
42256: POP
42257: POP
42258: GO 42264
42260: GO 42223
42262: POP
42263: POP
// end ;
42264: LD_VAR 0 4
42268: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
42269: LD_INT 0
42271: PPUSH
42272: PPUSH
42273: PPUSH
42274: PPUSH
42275: PPUSH
42276: PPUSH
42277: PPUSH
// if not GetClass ( unit ) = class_sniper then
42278: LD_VAR 0 1
42282: PPUSH
42283: CALL_OW 257
42287: PUSH
42288: LD_INT 5
42290: EQUAL
42291: NOT
42292: IFFALSE 42296
// exit ;
42294: GO 42684
// dist := 8 ;
42296: LD_ADDR_VAR 0 5
42300: PUSH
42301: LD_INT 8
42303: ST_TO_ADDR
// viewRange := 12 ;
42304: LD_ADDR_VAR 0 7
42308: PUSH
42309: LD_INT 12
42311: ST_TO_ADDR
// side := GetSide ( unit ) ;
42312: LD_ADDR_VAR 0 6
42316: PUSH
42317: LD_VAR 0 1
42321: PPUSH
42322: CALL_OW 255
42326: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
42327: LD_INT 61
42329: PPUSH
42330: LD_VAR 0 6
42334: PPUSH
42335: CALL_OW 321
42339: PUSH
42340: LD_INT 2
42342: EQUAL
42343: IFFALSE 42353
// viewRange := 16 ;
42345: LD_ADDR_VAR 0 7
42349: PUSH
42350: LD_INT 16
42352: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
42353: LD_VAR 0 1
42357: PPUSH
42358: LD_VAR 0 2
42362: PPUSH
42363: LD_VAR 0 3
42367: PPUSH
42368: CALL_OW 297
42372: PUSH
42373: LD_VAR 0 5
42377: GREATER
42378: IFFALSE 42457
// begin ComMoveXY ( unit , x , y ) ;
42380: LD_VAR 0 1
42384: PPUSH
42385: LD_VAR 0 2
42389: PPUSH
42390: LD_VAR 0 3
42394: PPUSH
42395: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42399: LD_INT 35
42401: PPUSH
42402: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
42406: LD_VAR 0 1
42410: PPUSH
42411: LD_VAR 0 2
42415: PPUSH
42416: LD_VAR 0 3
42420: PPUSH
42421: CALL 79177 0 3
42425: NOT
42426: IFFALSE 42430
// exit ;
42428: GO 42684
// until GetDistUnitXY ( unit , x , y ) < dist ;
42430: LD_VAR 0 1
42434: PPUSH
42435: LD_VAR 0 2
42439: PPUSH
42440: LD_VAR 0 3
42444: PPUSH
42445: CALL_OW 297
42449: PUSH
42450: LD_VAR 0 5
42454: LESS
42455: IFFALSE 42399
// end ; ComTurnXY ( unit , x , y ) ;
42457: LD_VAR 0 1
42461: PPUSH
42462: LD_VAR 0 2
42466: PPUSH
42467: LD_VAR 0 3
42471: PPUSH
42472: CALL_OW 118
// wait ( 5 ) ;
42476: LD_INT 5
42478: PPUSH
42479: CALL_OW 67
// _d := GetDir ( unit ) ;
42483: LD_ADDR_VAR 0 10
42487: PUSH
42488: LD_VAR 0 1
42492: PPUSH
42493: CALL_OW 254
42497: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
42498: LD_ADDR_VAR 0 8
42502: PUSH
42503: LD_VAR 0 1
42507: PPUSH
42508: CALL_OW 250
42512: PPUSH
42513: LD_VAR 0 10
42517: PPUSH
42518: LD_VAR 0 5
42522: PPUSH
42523: CALL_OW 272
42527: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
42528: LD_ADDR_VAR 0 9
42532: PUSH
42533: LD_VAR 0 1
42537: PPUSH
42538: CALL_OW 251
42542: PPUSH
42543: LD_VAR 0 10
42547: PPUSH
42548: LD_VAR 0 5
42552: PPUSH
42553: CALL_OW 273
42557: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42558: LD_VAR 0 8
42562: PPUSH
42563: LD_VAR 0 9
42567: PPUSH
42568: CALL_OW 488
42572: NOT
42573: IFFALSE 42577
// exit ;
42575: GO 42684
// ComAnimCustom ( unit , 1 ) ;
42577: LD_VAR 0 1
42581: PPUSH
42582: LD_INT 1
42584: PPUSH
42585: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
42589: LD_VAR 0 8
42593: PPUSH
42594: LD_VAR 0 9
42598: PPUSH
42599: LD_VAR 0 6
42603: PPUSH
42604: LD_VAR 0 7
42608: PPUSH
42609: CALL_OW 330
// repeat wait ( 1 ) ;
42613: LD_INT 1
42615: PPUSH
42616: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
42620: LD_VAR 0 1
42624: PPUSH
42625: CALL_OW 316
42629: PUSH
42630: LD_VAR 0 1
42634: PPUSH
42635: CALL_OW 314
42639: OR
42640: PUSH
42641: LD_VAR 0 1
42645: PPUSH
42646: CALL_OW 302
42650: NOT
42651: OR
42652: PUSH
42653: LD_VAR 0 1
42657: PPUSH
42658: CALL_OW 301
42662: OR
42663: IFFALSE 42613
// RemoveSeeing ( _x , _y , side ) ;
42665: LD_VAR 0 8
42669: PPUSH
42670: LD_VAR 0 9
42674: PPUSH
42675: LD_VAR 0 6
42679: PPUSH
42680: CALL_OW 331
// end ; end_of_file
42684: LD_VAR 0 4
42688: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42689: LD_INT 0
42691: PPUSH
42692: PPUSH
// if exist_mode then
42693: LD_VAR 0 2
42697: IFFALSE 42722
// unit := CreateCharacter ( prefix & ident ) else
42699: LD_ADDR_VAR 0 5
42703: PUSH
42704: LD_VAR 0 3
42708: PUSH
42709: LD_VAR 0 1
42713: STR
42714: PPUSH
42715: CALL_OW 34
42719: ST_TO_ADDR
42720: GO 42737
// unit := NewCharacter ( ident ) ;
42722: LD_ADDR_VAR 0 5
42726: PUSH
42727: LD_VAR 0 1
42731: PPUSH
42732: CALL_OW 25
42736: ST_TO_ADDR
// result := unit ;
42737: LD_ADDR_VAR 0 4
42741: PUSH
42742: LD_VAR 0 5
42746: ST_TO_ADDR
// end ;
42747: LD_VAR 0 4
42751: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42752: LD_INT 0
42754: PPUSH
42755: PPUSH
// if not side or not nation then
42756: LD_VAR 0 1
42760: NOT
42761: PUSH
42762: LD_VAR 0 2
42766: NOT
42767: OR
42768: IFFALSE 42772
// exit ;
42770: GO 43540
// case nation of nation_american :
42772: LD_VAR 0 2
42776: PUSH
42777: LD_INT 1
42779: DOUBLE
42780: EQUAL
42781: IFTRUE 42785
42783: GO 42999
42785: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
42786: LD_ADDR_VAR 0 4
42790: PUSH
42791: LD_INT 35
42793: PUSH
42794: LD_INT 45
42796: PUSH
42797: LD_INT 46
42799: PUSH
42800: LD_INT 47
42802: PUSH
42803: LD_INT 82
42805: PUSH
42806: LD_INT 83
42808: PUSH
42809: LD_INT 84
42811: PUSH
42812: LD_INT 85
42814: PUSH
42815: LD_INT 86
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 6
42826: PUSH
42827: LD_INT 15
42829: PUSH
42830: LD_INT 16
42832: PUSH
42833: LD_INT 7
42835: PUSH
42836: LD_INT 12
42838: PUSH
42839: LD_INT 13
42841: PUSH
42842: LD_INT 10
42844: PUSH
42845: LD_INT 14
42847: PUSH
42848: LD_INT 20
42850: PUSH
42851: LD_INT 21
42853: PUSH
42854: LD_INT 22
42856: PUSH
42857: LD_INT 25
42859: PUSH
42860: LD_INT 32
42862: PUSH
42863: LD_INT 27
42865: PUSH
42866: LD_INT 36
42868: PUSH
42869: LD_INT 69
42871: PUSH
42872: LD_INT 39
42874: PUSH
42875: LD_INT 34
42877: PUSH
42878: LD_INT 40
42880: PUSH
42881: LD_INT 48
42883: PUSH
42884: LD_INT 49
42886: PUSH
42887: LD_INT 50
42889: PUSH
42890: LD_INT 51
42892: PUSH
42893: LD_INT 52
42895: PUSH
42896: LD_INT 53
42898: PUSH
42899: LD_INT 54
42901: PUSH
42902: LD_INT 55
42904: PUSH
42905: LD_INT 56
42907: PUSH
42908: LD_INT 57
42910: PUSH
42911: LD_INT 58
42913: PUSH
42914: LD_INT 59
42916: PUSH
42917: LD_INT 60
42919: PUSH
42920: LD_INT 61
42922: PUSH
42923: LD_INT 62
42925: PUSH
42926: LD_INT 80
42928: PUSH
42929: LD_INT 82
42931: PUSH
42932: LD_INT 83
42934: PUSH
42935: LD_INT 84
42937: PUSH
42938: LD_INT 85
42940: PUSH
42941: LD_INT 86
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: ST_TO_ADDR
42997: GO 43464
42999: LD_INT 2
43001: DOUBLE
43002: EQUAL
43003: IFTRUE 43007
43005: GO 43233
43007: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
43008: LD_ADDR_VAR 0 4
43012: PUSH
43013: LD_INT 35
43015: PUSH
43016: LD_INT 45
43018: PUSH
43019: LD_INT 46
43021: PUSH
43022: LD_INT 47
43024: PUSH
43025: LD_INT 82
43027: PUSH
43028: LD_INT 83
43030: PUSH
43031: LD_INT 84
43033: PUSH
43034: LD_INT 85
43036: PUSH
43037: LD_INT 87
43039: PUSH
43040: LD_INT 70
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: LD_INT 11
43048: PUSH
43049: LD_INT 3
43051: PUSH
43052: LD_INT 4
43054: PUSH
43055: LD_INT 5
43057: PUSH
43058: LD_INT 6
43060: PUSH
43061: LD_INT 15
43063: PUSH
43064: LD_INT 18
43066: PUSH
43067: LD_INT 7
43069: PUSH
43070: LD_INT 17
43072: PUSH
43073: LD_INT 8
43075: PUSH
43076: LD_INT 20
43078: PUSH
43079: LD_INT 21
43081: PUSH
43082: LD_INT 22
43084: PUSH
43085: LD_INT 72
43087: PUSH
43088: LD_INT 26
43090: PUSH
43091: LD_INT 69
43093: PUSH
43094: LD_INT 39
43096: PUSH
43097: LD_INT 40
43099: PUSH
43100: LD_INT 41
43102: PUSH
43103: LD_INT 42
43105: PUSH
43106: LD_INT 43
43108: PUSH
43109: LD_INT 48
43111: PUSH
43112: LD_INT 49
43114: PUSH
43115: LD_INT 50
43117: PUSH
43118: LD_INT 51
43120: PUSH
43121: LD_INT 52
43123: PUSH
43124: LD_INT 53
43126: PUSH
43127: LD_INT 54
43129: PUSH
43130: LD_INT 55
43132: PUSH
43133: LD_INT 56
43135: PUSH
43136: LD_INT 60
43138: PUSH
43139: LD_INT 61
43141: PUSH
43142: LD_INT 62
43144: PUSH
43145: LD_INT 66
43147: PUSH
43148: LD_INT 67
43150: PUSH
43151: LD_INT 68
43153: PUSH
43154: LD_INT 81
43156: PUSH
43157: LD_INT 82
43159: PUSH
43160: LD_INT 83
43162: PUSH
43163: LD_INT 84
43165: PUSH
43166: LD_INT 85
43168: PUSH
43169: LD_INT 87
43171: PUSH
43172: LD_INT 88
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: ST_TO_ADDR
43231: GO 43464
43233: LD_INT 3
43235: DOUBLE
43236: EQUAL
43237: IFTRUE 43241
43239: GO 43463
43241: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
43242: LD_ADDR_VAR 0 4
43246: PUSH
43247: LD_INT 46
43249: PUSH
43250: LD_INT 47
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 2
43258: PUSH
43259: LD_INT 82
43261: PUSH
43262: LD_INT 83
43264: PUSH
43265: LD_INT 84
43267: PUSH
43268: LD_INT 85
43270: PUSH
43271: LD_INT 86
43273: PUSH
43274: LD_INT 11
43276: PUSH
43277: LD_INT 9
43279: PUSH
43280: LD_INT 20
43282: PUSH
43283: LD_INT 19
43285: PUSH
43286: LD_INT 21
43288: PUSH
43289: LD_INT 24
43291: PUSH
43292: LD_INT 22
43294: PUSH
43295: LD_INT 25
43297: PUSH
43298: LD_INT 28
43300: PUSH
43301: LD_INT 29
43303: PUSH
43304: LD_INT 30
43306: PUSH
43307: LD_INT 31
43309: PUSH
43310: LD_INT 37
43312: PUSH
43313: LD_INT 38
43315: PUSH
43316: LD_INT 32
43318: PUSH
43319: LD_INT 27
43321: PUSH
43322: LD_INT 33
43324: PUSH
43325: LD_INT 69
43327: PUSH
43328: LD_INT 39
43330: PUSH
43331: LD_INT 34
43333: PUSH
43334: LD_INT 40
43336: PUSH
43337: LD_INT 71
43339: PUSH
43340: LD_INT 23
43342: PUSH
43343: LD_INT 44
43345: PUSH
43346: LD_INT 48
43348: PUSH
43349: LD_INT 49
43351: PUSH
43352: LD_INT 50
43354: PUSH
43355: LD_INT 51
43357: PUSH
43358: LD_INT 52
43360: PUSH
43361: LD_INT 53
43363: PUSH
43364: LD_INT 54
43366: PUSH
43367: LD_INT 55
43369: PUSH
43370: LD_INT 56
43372: PUSH
43373: LD_INT 57
43375: PUSH
43376: LD_INT 58
43378: PUSH
43379: LD_INT 59
43381: PUSH
43382: LD_INT 63
43384: PUSH
43385: LD_INT 64
43387: PUSH
43388: LD_INT 65
43390: PUSH
43391: LD_INT 82
43393: PUSH
43394: LD_INT 83
43396: PUSH
43397: LD_INT 84
43399: PUSH
43400: LD_INT 85
43402: PUSH
43403: LD_INT 86
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: ST_TO_ADDR
43461: GO 43464
43463: POP
// if state > - 1 and state < 3 then
43464: LD_VAR 0 3
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: GREATER
43473: PUSH
43474: LD_VAR 0 3
43478: PUSH
43479: LD_INT 3
43481: LESS
43482: AND
43483: IFFALSE 43540
// for i in result do
43485: LD_ADDR_VAR 0 5
43489: PUSH
43490: LD_VAR 0 4
43494: PUSH
43495: FOR_IN
43496: IFFALSE 43538
// if GetTech ( i , side ) <> state then
43498: LD_VAR 0 5
43502: PPUSH
43503: LD_VAR 0 1
43507: PPUSH
43508: CALL_OW 321
43512: PUSH
43513: LD_VAR 0 3
43517: NONEQUAL
43518: IFFALSE 43536
// result := result diff i ;
43520: LD_ADDR_VAR 0 4
43524: PUSH
43525: LD_VAR 0 4
43529: PUSH
43530: LD_VAR 0 5
43534: DIFF
43535: ST_TO_ADDR
43536: GO 43495
43538: POP
43539: POP
// end ;
43540: LD_VAR 0 4
43544: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
43545: LD_INT 0
43547: PPUSH
43548: PPUSH
43549: PPUSH
// result := true ;
43550: LD_ADDR_VAR 0 3
43554: PUSH
43555: LD_INT 1
43557: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
43558: LD_ADDR_VAR 0 5
43562: PUSH
43563: LD_VAR 0 2
43567: PPUSH
43568: CALL_OW 480
43572: ST_TO_ADDR
// if not tmp then
43573: LD_VAR 0 5
43577: NOT
43578: IFFALSE 43582
// exit ;
43580: GO 43631
// for i in tmp do
43582: LD_ADDR_VAR 0 4
43586: PUSH
43587: LD_VAR 0 5
43591: PUSH
43592: FOR_IN
43593: IFFALSE 43629
// if GetTech ( i , side ) <> state_researched then
43595: LD_VAR 0 4
43599: PPUSH
43600: LD_VAR 0 1
43604: PPUSH
43605: CALL_OW 321
43609: PUSH
43610: LD_INT 2
43612: NONEQUAL
43613: IFFALSE 43627
// begin result := false ;
43615: LD_ADDR_VAR 0 3
43619: PUSH
43620: LD_INT 0
43622: ST_TO_ADDR
// exit ;
43623: POP
43624: POP
43625: GO 43631
// end ;
43627: GO 43592
43629: POP
43630: POP
// end ;
43631: LD_VAR 0 3
43635: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43636: LD_INT 0
43638: PPUSH
43639: PPUSH
43640: PPUSH
43641: PPUSH
43642: PPUSH
43643: PPUSH
43644: PPUSH
43645: PPUSH
43646: PPUSH
43647: PPUSH
43648: PPUSH
43649: PPUSH
43650: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43651: LD_VAR 0 1
43655: NOT
43656: PUSH
43657: LD_VAR 0 1
43661: PPUSH
43662: CALL_OW 257
43666: PUSH
43667: LD_INT 9
43669: NONEQUAL
43670: OR
43671: IFFALSE 43675
// exit ;
43673: GO 44248
// side := GetSide ( unit ) ;
43675: LD_ADDR_VAR 0 9
43679: PUSH
43680: LD_VAR 0 1
43684: PPUSH
43685: CALL_OW 255
43689: ST_TO_ADDR
// tech_space := tech_spacanom ;
43690: LD_ADDR_VAR 0 12
43694: PUSH
43695: LD_INT 29
43697: ST_TO_ADDR
// tech_time := tech_taurad ;
43698: LD_ADDR_VAR 0 13
43702: PUSH
43703: LD_INT 28
43705: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43706: LD_ADDR_VAR 0 11
43710: PUSH
43711: LD_VAR 0 1
43715: PPUSH
43716: CALL_OW 310
43720: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43721: LD_VAR 0 11
43725: PPUSH
43726: CALL_OW 247
43730: PUSH
43731: LD_INT 2
43733: EQUAL
43734: IFFALSE 43738
// exit ;
43736: GO 44248
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43738: LD_ADDR_VAR 0 8
43742: PUSH
43743: LD_INT 81
43745: PUSH
43746: LD_VAR 0 9
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 3
43757: PUSH
43758: LD_INT 21
43760: PUSH
43761: LD_INT 3
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PPUSH
43776: CALL_OW 69
43780: ST_TO_ADDR
// if not tmp then
43781: LD_VAR 0 8
43785: NOT
43786: IFFALSE 43790
// exit ;
43788: GO 44248
// if in_unit then
43790: LD_VAR 0 11
43794: IFFALSE 43818
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43796: LD_ADDR_VAR 0 10
43800: PUSH
43801: LD_VAR 0 8
43805: PPUSH
43806: LD_VAR 0 11
43810: PPUSH
43811: CALL_OW 74
43815: ST_TO_ADDR
43816: GO 43838
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43818: LD_ADDR_VAR 0 10
43822: PUSH
43823: LD_VAR 0 8
43827: PPUSH
43828: LD_VAR 0 1
43832: PPUSH
43833: CALL_OW 74
43837: ST_TO_ADDR
// if not enemy then
43838: LD_VAR 0 10
43842: NOT
43843: IFFALSE 43847
// exit ;
43845: GO 44248
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43847: LD_VAR 0 11
43851: PUSH
43852: LD_VAR 0 11
43856: PPUSH
43857: LD_VAR 0 10
43861: PPUSH
43862: CALL_OW 296
43866: PUSH
43867: LD_INT 13
43869: GREATER
43870: AND
43871: PUSH
43872: LD_VAR 0 1
43876: PPUSH
43877: LD_VAR 0 10
43881: PPUSH
43882: CALL_OW 296
43886: PUSH
43887: LD_INT 12
43889: GREATER
43890: OR
43891: IFFALSE 43895
// exit ;
43893: GO 44248
// missile := [ 1 ] ;
43895: LD_ADDR_VAR 0 14
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: EMPTY
43904: LIST
43905: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43906: LD_VAR 0 9
43910: PPUSH
43911: LD_VAR 0 12
43915: PPUSH
43916: CALL_OW 325
43920: IFFALSE 43949
// missile := Replace ( missile , missile + 1 , 2 ) ;
43922: LD_ADDR_VAR 0 14
43926: PUSH
43927: LD_VAR 0 14
43931: PPUSH
43932: LD_VAR 0 14
43936: PUSH
43937: LD_INT 1
43939: PLUS
43940: PPUSH
43941: LD_INT 2
43943: PPUSH
43944: CALL_OW 1
43948: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43949: LD_VAR 0 9
43953: PPUSH
43954: LD_VAR 0 13
43958: PPUSH
43959: CALL_OW 325
43963: PUSH
43964: LD_VAR 0 10
43968: PPUSH
43969: CALL_OW 255
43973: PPUSH
43974: LD_VAR 0 13
43978: PPUSH
43979: CALL_OW 325
43983: NOT
43984: AND
43985: IFFALSE 44014
// missile := Replace ( missile , missile + 1 , 3 ) ;
43987: LD_ADDR_VAR 0 14
43991: PUSH
43992: LD_VAR 0 14
43996: PPUSH
43997: LD_VAR 0 14
44001: PUSH
44002: LD_INT 1
44004: PLUS
44005: PPUSH
44006: LD_INT 3
44008: PPUSH
44009: CALL_OW 1
44013: ST_TO_ADDR
// if missile < 2 then
44014: LD_VAR 0 14
44018: PUSH
44019: LD_INT 2
44021: LESS
44022: IFFALSE 44026
// exit ;
44024: GO 44248
// x := GetX ( enemy ) ;
44026: LD_ADDR_VAR 0 4
44030: PUSH
44031: LD_VAR 0 10
44035: PPUSH
44036: CALL_OW 250
44040: ST_TO_ADDR
// y := GetY ( enemy ) ;
44041: LD_ADDR_VAR 0 5
44045: PUSH
44046: LD_VAR 0 10
44050: PPUSH
44051: CALL_OW 251
44055: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
44056: LD_ADDR_VAR 0 6
44060: PUSH
44061: LD_VAR 0 4
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PPUSH
44070: LD_INT 1
44072: PPUSH
44073: CALL_OW 12
44077: PLUS
44078: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
44079: LD_ADDR_VAR 0 7
44083: PUSH
44084: LD_VAR 0 5
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PPUSH
44093: LD_INT 1
44095: PPUSH
44096: CALL_OW 12
44100: PLUS
44101: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44102: LD_VAR 0 6
44106: PPUSH
44107: LD_VAR 0 7
44111: PPUSH
44112: CALL_OW 488
44116: NOT
44117: IFFALSE 44139
// begin _x := x ;
44119: LD_ADDR_VAR 0 6
44123: PUSH
44124: LD_VAR 0 4
44128: ST_TO_ADDR
// _y := y ;
44129: LD_ADDR_VAR 0 7
44133: PUSH
44134: LD_VAR 0 5
44138: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
44139: LD_ADDR_VAR 0 3
44143: PUSH
44144: LD_INT 1
44146: PPUSH
44147: LD_VAR 0 14
44151: PPUSH
44152: CALL_OW 12
44156: ST_TO_ADDR
// case i of 1 :
44157: LD_VAR 0 3
44161: PUSH
44162: LD_INT 1
44164: DOUBLE
44165: EQUAL
44166: IFTRUE 44170
44168: GO 44187
44170: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
44171: LD_VAR 0 1
44175: PPUSH
44176: LD_VAR 0 10
44180: PPUSH
44181: CALL_OW 115
44185: GO 44248
44187: LD_INT 2
44189: DOUBLE
44190: EQUAL
44191: IFTRUE 44195
44193: GO 44217
44195: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
44196: LD_VAR 0 1
44200: PPUSH
44201: LD_VAR 0 6
44205: PPUSH
44206: LD_VAR 0 7
44210: PPUSH
44211: CALL_OW 153
44215: GO 44248
44217: LD_INT 3
44219: DOUBLE
44220: EQUAL
44221: IFTRUE 44225
44223: GO 44247
44225: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
44226: LD_VAR 0 1
44230: PPUSH
44231: LD_VAR 0 6
44235: PPUSH
44236: LD_VAR 0 7
44240: PPUSH
44241: CALL_OW 154
44245: GO 44248
44247: POP
// end ;
44248: LD_VAR 0 2
44252: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
44253: LD_INT 0
44255: PPUSH
44256: PPUSH
44257: PPUSH
44258: PPUSH
44259: PPUSH
44260: PPUSH
// if not unit or not building then
44261: LD_VAR 0 1
44265: NOT
44266: PUSH
44267: LD_VAR 0 2
44271: NOT
44272: OR
44273: IFFALSE 44277
// exit ;
44275: GO 44435
// x := GetX ( building ) ;
44277: LD_ADDR_VAR 0 5
44281: PUSH
44282: LD_VAR 0 2
44286: PPUSH
44287: CALL_OW 250
44291: ST_TO_ADDR
// y := GetY ( building ) ;
44292: LD_ADDR_VAR 0 6
44296: PUSH
44297: LD_VAR 0 2
44301: PPUSH
44302: CALL_OW 251
44306: ST_TO_ADDR
// for i = 0 to 5 do
44307: LD_ADDR_VAR 0 4
44311: PUSH
44312: DOUBLE
44313: LD_INT 0
44315: DEC
44316: ST_TO_ADDR
44317: LD_INT 5
44319: PUSH
44320: FOR_TO
44321: IFFALSE 44433
// begin _x := ShiftX ( x , i , 3 ) ;
44323: LD_ADDR_VAR 0 7
44327: PUSH
44328: LD_VAR 0 5
44332: PPUSH
44333: LD_VAR 0 4
44337: PPUSH
44338: LD_INT 3
44340: PPUSH
44341: CALL_OW 272
44345: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
44346: LD_ADDR_VAR 0 8
44350: PUSH
44351: LD_VAR 0 6
44355: PPUSH
44356: LD_VAR 0 4
44360: PPUSH
44361: LD_INT 3
44363: PPUSH
44364: CALL_OW 273
44368: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44369: LD_VAR 0 7
44373: PPUSH
44374: LD_VAR 0 8
44378: PPUSH
44379: CALL_OW 488
44383: NOT
44384: IFFALSE 44388
// continue ;
44386: GO 44320
// if HexInfo ( _x , _y ) = 0 then
44388: LD_VAR 0 7
44392: PPUSH
44393: LD_VAR 0 8
44397: PPUSH
44398: CALL_OW 428
44402: PUSH
44403: LD_INT 0
44405: EQUAL
44406: IFFALSE 44431
// begin ComMoveXY ( unit , _x , _y ) ;
44408: LD_VAR 0 1
44412: PPUSH
44413: LD_VAR 0 7
44417: PPUSH
44418: LD_VAR 0 8
44422: PPUSH
44423: CALL_OW 111
// exit ;
44427: POP
44428: POP
44429: GO 44435
// end ; end ;
44431: GO 44320
44433: POP
44434: POP
// end ;
44435: LD_VAR 0 3
44439: RET
// export function ScanBase ( side , base_area ) ; begin
44440: LD_INT 0
44442: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44443: LD_ADDR_VAR 0 3
44447: PUSH
44448: LD_VAR 0 2
44452: PPUSH
44453: LD_INT 81
44455: PUSH
44456: LD_VAR 0 1
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PPUSH
44465: CALL_OW 70
44469: ST_TO_ADDR
// end ;
44470: LD_VAR 0 3
44474: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
44475: LD_INT 0
44477: PPUSH
44478: PPUSH
44479: PPUSH
44480: PPUSH
// result := false ;
44481: LD_ADDR_VAR 0 2
44485: PUSH
44486: LD_INT 0
44488: ST_TO_ADDR
// side := GetSide ( unit ) ;
44489: LD_ADDR_VAR 0 3
44493: PUSH
44494: LD_VAR 0 1
44498: PPUSH
44499: CALL_OW 255
44503: ST_TO_ADDR
// nat := GetNation ( unit ) ;
44504: LD_ADDR_VAR 0 4
44508: PUSH
44509: LD_VAR 0 1
44513: PPUSH
44514: CALL_OW 248
44518: ST_TO_ADDR
// case nat of 1 :
44519: LD_VAR 0 4
44523: PUSH
44524: LD_INT 1
44526: DOUBLE
44527: EQUAL
44528: IFTRUE 44532
44530: GO 44543
44532: POP
// tech := tech_lassight ; 2 :
44533: LD_ADDR_VAR 0 5
44537: PUSH
44538: LD_INT 12
44540: ST_TO_ADDR
44541: GO 44582
44543: LD_INT 2
44545: DOUBLE
44546: EQUAL
44547: IFTRUE 44551
44549: GO 44562
44551: POP
// tech := tech_mortar ; 3 :
44552: LD_ADDR_VAR 0 5
44556: PUSH
44557: LD_INT 41
44559: ST_TO_ADDR
44560: GO 44582
44562: LD_INT 3
44564: DOUBLE
44565: EQUAL
44566: IFTRUE 44570
44568: GO 44581
44570: POP
// tech := tech_bazooka ; end ;
44571: LD_ADDR_VAR 0 5
44575: PUSH
44576: LD_INT 44
44578: ST_TO_ADDR
44579: GO 44582
44581: POP
// if Researched ( side , tech ) then
44582: LD_VAR 0 3
44586: PPUSH
44587: LD_VAR 0 5
44591: PPUSH
44592: CALL_OW 325
44596: IFFALSE 44623
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
44598: LD_ADDR_VAR 0 2
44602: PUSH
44603: LD_INT 5
44605: PUSH
44606: LD_INT 8
44608: PUSH
44609: LD_INT 9
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: LIST
44616: PUSH
44617: LD_VAR 0 4
44621: ARRAY
44622: ST_TO_ADDR
// end ;
44623: LD_VAR 0 2
44627: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44628: LD_INT 0
44630: PPUSH
44631: PPUSH
44632: PPUSH
// if not mines then
44633: LD_VAR 0 2
44637: NOT
44638: IFFALSE 44642
// exit ;
44640: GO 44786
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44642: LD_ADDR_VAR 0 5
44646: PUSH
44647: LD_INT 81
44649: PUSH
44650: LD_VAR 0 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 3
44661: PUSH
44662: LD_INT 21
44664: PUSH
44665: LD_INT 3
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PPUSH
44680: CALL_OW 69
44684: ST_TO_ADDR
// for i in mines do
44685: LD_ADDR_VAR 0 4
44689: PUSH
44690: LD_VAR 0 2
44694: PUSH
44695: FOR_IN
44696: IFFALSE 44784
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44698: LD_VAR 0 4
44702: PUSH
44703: LD_INT 1
44705: ARRAY
44706: PPUSH
44707: LD_VAR 0 4
44711: PUSH
44712: LD_INT 2
44714: ARRAY
44715: PPUSH
44716: CALL_OW 458
44720: NOT
44721: IFFALSE 44725
// continue ;
44723: GO 44695
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44725: LD_VAR 0 4
44729: PUSH
44730: LD_INT 1
44732: ARRAY
44733: PPUSH
44734: LD_VAR 0 4
44738: PUSH
44739: LD_INT 2
44741: ARRAY
44742: PPUSH
44743: CALL_OW 428
44747: PUSH
44748: LD_VAR 0 5
44752: IN
44753: IFFALSE 44782
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44755: LD_VAR 0 4
44759: PUSH
44760: LD_INT 1
44762: ARRAY
44763: PPUSH
44764: LD_VAR 0 4
44768: PUSH
44769: LD_INT 2
44771: ARRAY
44772: PPUSH
44773: LD_VAR 0 1
44777: PPUSH
44778: CALL_OW 456
// end ;
44782: GO 44695
44784: POP
44785: POP
// end ;
44786: LD_VAR 0 3
44790: RET
// export function Count ( array ) ; begin
44791: LD_INT 0
44793: PPUSH
// result := array + 0 ;
44794: LD_ADDR_VAR 0 2
44798: PUSH
44799: LD_VAR 0 1
44803: PUSH
44804: LD_INT 0
44806: PLUS
44807: ST_TO_ADDR
// end ;
44808: LD_VAR 0 2
44812: RET
// export function IsEmpty ( building ) ; begin
44813: LD_INT 0
44815: PPUSH
// if not building then
44816: LD_VAR 0 1
44820: NOT
44821: IFFALSE 44825
// exit ;
44823: GO 44868
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44825: LD_ADDR_VAR 0 2
44829: PUSH
44830: LD_VAR 0 1
44834: PUSH
44835: LD_INT 22
44837: PUSH
44838: LD_VAR 0 1
44842: PPUSH
44843: CALL_OW 255
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 58
44854: PUSH
44855: EMPTY
44856: LIST
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PPUSH
44862: CALL_OW 69
44866: IN
44867: ST_TO_ADDR
// end ;
44868: LD_VAR 0 2
44872: RET
// export function IsNotFull ( building ) ; var places ; begin
44873: LD_INT 0
44875: PPUSH
44876: PPUSH
// if not building then
44877: LD_VAR 0 1
44881: NOT
44882: IFFALSE 44886
// exit ;
44884: GO 44914
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44886: LD_ADDR_VAR 0 2
44890: PUSH
44891: LD_VAR 0 1
44895: PPUSH
44896: LD_INT 3
44898: PUSH
44899: LD_INT 62
44901: PUSH
44902: EMPTY
44903: LIST
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PPUSH
44909: CALL_OW 72
44913: ST_TO_ADDR
// end ;
44914: LD_VAR 0 2
44918: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44919: LD_INT 0
44921: PPUSH
44922: PPUSH
44923: PPUSH
44924: PPUSH
// tmp := [ ] ;
44925: LD_ADDR_VAR 0 3
44929: PUSH
44930: EMPTY
44931: ST_TO_ADDR
// list := [ ] ;
44932: LD_ADDR_VAR 0 5
44936: PUSH
44937: EMPTY
44938: ST_TO_ADDR
// for i = 16 to 25 do
44939: LD_ADDR_VAR 0 4
44943: PUSH
44944: DOUBLE
44945: LD_INT 16
44947: DEC
44948: ST_TO_ADDR
44949: LD_INT 25
44951: PUSH
44952: FOR_TO
44953: IFFALSE 45026
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44955: LD_ADDR_VAR 0 3
44959: PUSH
44960: LD_VAR 0 3
44964: PUSH
44965: LD_INT 22
44967: PUSH
44968: LD_VAR 0 1
44972: PPUSH
44973: CALL_OW 255
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 91
44984: PUSH
44985: LD_VAR 0 1
44989: PUSH
44990: LD_INT 6
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 30
45000: PUSH
45001: LD_VAR 0 4
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: LIST
45014: PUSH
45015: EMPTY
45016: LIST
45017: PPUSH
45018: CALL_OW 69
45022: ADD
45023: ST_TO_ADDR
45024: GO 44952
45026: POP
45027: POP
// for i = 1 to tmp do
45028: LD_ADDR_VAR 0 4
45032: PUSH
45033: DOUBLE
45034: LD_INT 1
45036: DEC
45037: ST_TO_ADDR
45038: LD_VAR 0 3
45042: PUSH
45043: FOR_TO
45044: IFFALSE 45132
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
45046: LD_ADDR_VAR 0 5
45050: PUSH
45051: LD_VAR 0 5
45055: PUSH
45056: LD_VAR 0 3
45060: PUSH
45061: LD_VAR 0 4
45065: ARRAY
45066: PPUSH
45067: CALL_OW 266
45071: PUSH
45072: LD_VAR 0 3
45076: PUSH
45077: LD_VAR 0 4
45081: ARRAY
45082: PPUSH
45083: CALL_OW 250
45087: PUSH
45088: LD_VAR 0 3
45092: PUSH
45093: LD_VAR 0 4
45097: ARRAY
45098: PPUSH
45099: CALL_OW 251
45103: PUSH
45104: LD_VAR 0 3
45108: PUSH
45109: LD_VAR 0 4
45113: ARRAY
45114: PPUSH
45115: CALL_OW 254
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: PUSH
45126: EMPTY
45127: LIST
45128: ADD
45129: ST_TO_ADDR
45130: GO 45043
45132: POP
45133: POP
// result := list ;
45134: LD_ADDR_VAR 0 2
45138: PUSH
45139: LD_VAR 0 5
45143: ST_TO_ADDR
// end ;
45144: LD_VAR 0 2
45148: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
45149: LD_INT 0
45151: PPUSH
45152: PPUSH
45153: PPUSH
45154: PPUSH
45155: PPUSH
45156: PPUSH
45157: PPUSH
// if not factory then
45158: LD_VAR 0 1
45162: NOT
45163: IFFALSE 45167
// exit ;
45165: GO 45760
// if control = control_apeman then
45167: LD_VAR 0 4
45171: PUSH
45172: LD_INT 5
45174: EQUAL
45175: IFFALSE 45284
// begin tmp := UnitsInside ( factory ) ;
45177: LD_ADDR_VAR 0 8
45181: PUSH
45182: LD_VAR 0 1
45186: PPUSH
45187: CALL_OW 313
45191: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
45192: LD_VAR 0 8
45196: PPUSH
45197: LD_INT 25
45199: PUSH
45200: LD_INT 12
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PPUSH
45207: CALL_OW 72
45211: NOT
45212: IFFALSE 45222
// control := control_manual ;
45214: LD_ADDR_VAR 0 4
45218: PUSH
45219: LD_INT 1
45221: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
45222: LD_ADDR_VAR 0 8
45226: PUSH
45227: LD_VAR 0 1
45231: PPUSH
45232: CALL 44919 0 1
45236: ST_TO_ADDR
// if tmp then
45237: LD_VAR 0 8
45241: IFFALSE 45284
// begin for i in tmp do
45243: LD_ADDR_VAR 0 7
45247: PUSH
45248: LD_VAR 0 8
45252: PUSH
45253: FOR_IN
45254: IFFALSE 45282
// if i [ 1 ] = b_ext_radio then
45256: LD_VAR 0 7
45260: PUSH
45261: LD_INT 1
45263: ARRAY
45264: PUSH
45265: LD_INT 22
45267: EQUAL
45268: IFFALSE 45280
// begin control := control_remote ;
45270: LD_ADDR_VAR 0 4
45274: PUSH
45275: LD_INT 2
45277: ST_TO_ADDR
// break ;
45278: GO 45282
// end ;
45280: GO 45253
45282: POP
45283: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45284: LD_VAR 0 1
45288: PPUSH
45289: LD_VAR 0 2
45293: PPUSH
45294: LD_VAR 0 3
45298: PPUSH
45299: LD_VAR 0 4
45303: PPUSH
45304: LD_VAR 0 5
45308: PPUSH
45309: CALL_OW 448
45313: IFFALSE 45348
// begin result := [ chassis , engine , control , weapon ] ;
45315: LD_ADDR_VAR 0 6
45319: PUSH
45320: LD_VAR 0 2
45324: PUSH
45325: LD_VAR 0 3
45329: PUSH
45330: LD_VAR 0 4
45334: PUSH
45335: LD_VAR 0 5
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: ST_TO_ADDR
// exit ;
45346: GO 45760
// end ; _chassis := AvailableChassisList ( factory ) ;
45348: LD_ADDR_VAR 0 9
45352: PUSH
45353: LD_VAR 0 1
45357: PPUSH
45358: CALL_OW 475
45362: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
45363: LD_ADDR_VAR 0 11
45367: PUSH
45368: LD_VAR 0 1
45372: PPUSH
45373: CALL_OW 476
45377: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
45378: LD_ADDR_VAR 0 12
45382: PUSH
45383: LD_VAR 0 1
45387: PPUSH
45388: CALL_OW 477
45392: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45393: LD_ADDR_VAR 0 10
45397: PUSH
45398: LD_VAR 0 1
45402: PPUSH
45403: CALL_OW 478
45407: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
45408: LD_VAR 0 9
45412: NOT
45413: PUSH
45414: LD_VAR 0 11
45418: NOT
45419: OR
45420: PUSH
45421: LD_VAR 0 12
45425: NOT
45426: OR
45427: PUSH
45428: LD_VAR 0 10
45432: NOT
45433: OR
45434: IFFALSE 45469
// begin result := [ chassis , engine , control , weapon ] ;
45436: LD_ADDR_VAR 0 6
45440: PUSH
45441: LD_VAR 0 2
45445: PUSH
45446: LD_VAR 0 3
45450: PUSH
45451: LD_VAR 0 4
45455: PUSH
45456: LD_VAR 0 5
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: ST_TO_ADDR
// exit ;
45467: GO 45760
// end ; if not chassis in _chassis then
45469: LD_VAR 0 2
45473: PUSH
45474: LD_VAR 0 9
45478: IN
45479: NOT
45480: IFFALSE 45506
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
45482: LD_ADDR_VAR 0 2
45486: PUSH
45487: LD_VAR 0 9
45491: PUSH
45492: LD_INT 1
45494: PPUSH
45495: LD_VAR 0 9
45499: PPUSH
45500: CALL_OW 12
45504: ARRAY
45505: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
45506: LD_VAR 0 2
45510: PPUSH
45511: LD_VAR 0 3
45515: PPUSH
45516: CALL 45765 0 2
45520: NOT
45521: IFFALSE 45580
// repeat engine := _engine [ 1 ] ;
45523: LD_ADDR_VAR 0 3
45527: PUSH
45528: LD_VAR 0 11
45532: PUSH
45533: LD_INT 1
45535: ARRAY
45536: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
45537: LD_ADDR_VAR 0 11
45541: PUSH
45542: LD_VAR 0 11
45546: PPUSH
45547: LD_INT 1
45549: PPUSH
45550: CALL_OW 3
45554: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
45555: LD_VAR 0 2
45559: PPUSH
45560: LD_VAR 0 3
45564: PPUSH
45565: CALL 45765 0 2
45569: PUSH
45570: LD_VAR 0 11
45574: PUSH
45575: EMPTY
45576: EQUAL
45577: OR
45578: IFFALSE 45523
// if not control in _control then
45580: LD_VAR 0 4
45584: PUSH
45585: LD_VAR 0 12
45589: IN
45590: NOT
45591: IFFALSE 45617
// control := _control [ rand ( 1 , _control ) ] ;
45593: LD_ADDR_VAR 0 4
45597: PUSH
45598: LD_VAR 0 12
45602: PUSH
45603: LD_INT 1
45605: PPUSH
45606: LD_VAR 0 12
45610: PPUSH
45611: CALL_OW 12
45615: ARRAY
45616: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45617: LD_VAR 0 2
45621: PPUSH
45622: LD_VAR 0 5
45626: PPUSH
45627: CALL 45985 0 2
45631: NOT
45632: IFFALSE 45691
// repeat weapon := _weapon [ 1 ] ;
45634: LD_ADDR_VAR 0 5
45638: PUSH
45639: LD_VAR 0 10
45643: PUSH
45644: LD_INT 1
45646: ARRAY
45647: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45648: LD_ADDR_VAR 0 10
45652: PUSH
45653: LD_VAR 0 10
45657: PPUSH
45658: LD_INT 1
45660: PPUSH
45661: CALL_OW 3
45665: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45666: LD_VAR 0 2
45670: PPUSH
45671: LD_VAR 0 5
45675: PPUSH
45676: CALL 45985 0 2
45680: PUSH
45681: LD_VAR 0 10
45685: PUSH
45686: EMPTY
45687: EQUAL
45688: OR
45689: IFFALSE 45634
// result := [ ] ;
45691: LD_ADDR_VAR 0 6
45695: PUSH
45696: EMPTY
45697: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45698: LD_VAR 0 1
45702: PPUSH
45703: LD_VAR 0 2
45707: PPUSH
45708: LD_VAR 0 3
45712: PPUSH
45713: LD_VAR 0 4
45717: PPUSH
45718: LD_VAR 0 5
45722: PPUSH
45723: CALL_OW 448
45727: IFFALSE 45760
// result := [ chassis , engine , control , weapon ] ;
45729: LD_ADDR_VAR 0 6
45733: PUSH
45734: LD_VAR 0 2
45738: PUSH
45739: LD_VAR 0 3
45743: PUSH
45744: LD_VAR 0 4
45748: PUSH
45749: LD_VAR 0 5
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: ST_TO_ADDR
// end ;
45760: LD_VAR 0 6
45764: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45765: LD_INT 0
45767: PPUSH
// if not chassis or not engine then
45768: LD_VAR 0 1
45772: NOT
45773: PUSH
45774: LD_VAR 0 2
45778: NOT
45779: OR
45780: IFFALSE 45784
// exit ;
45782: GO 45980
// case engine of engine_solar :
45784: LD_VAR 0 2
45788: PUSH
45789: LD_INT 2
45791: DOUBLE
45792: EQUAL
45793: IFTRUE 45797
45795: GO 45835
45797: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45798: LD_ADDR_VAR 0 3
45802: PUSH
45803: LD_INT 11
45805: PUSH
45806: LD_INT 12
45808: PUSH
45809: LD_INT 13
45811: PUSH
45812: LD_INT 14
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: LD_INT 3
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: ST_TO_ADDR
45833: GO 45964
45835: LD_INT 1
45837: DOUBLE
45838: EQUAL
45839: IFTRUE 45843
45841: GO 45905
45843: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45844: LD_ADDR_VAR 0 3
45848: PUSH
45849: LD_INT 11
45851: PUSH
45852: LD_INT 12
45854: PUSH
45855: LD_INT 13
45857: PUSH
45858: LD_INT 14
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: LD_INT 2
45866: PUSH
45867: LD_INT 3
45869: PUSH
45870: LD_INT 4
45872: PUSH
45873: LD_INT 5
45875: PUSH
45876: LD_INT 21
45878: PUSH
45879: LD_INT 23
45881: PUSH
45882: LD_INT 22
45884: PUSH
45885: LD_INT 24
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: ST_TO_ADDR
45903: GO 45964
45905: LD_INT 3
45907: DOUBLE
45908: EQUAL
45909: IFTRUE 45913
45911: GO 45963
45913: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45914: LD_ADDR_VAR 0 3
45918: PUSH
45919: LD_INT 13
45921: PUSH
45922: LD_INT 14
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: LD_INT 3
45930: PUSH
45931: LD_INT 4
45933: PUSH
45934: LD_INT 5
45936: PUSH
45937: LD_INT 21
45939: PUSH
45940: LD_INT 22
45942: PUSH
45943: LD_INT 23
45945: PUSH
45946: LD_INT 24
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: ST_TO_ADDR
45961: GO 45964
45963: POP
// result := ( chassis in result ) ;
45964: LD_ADDR_VAR 0 3
45968: PUSH
45969: LD_VAR 0 1
45973: PUSH
45974: LD_VAR 0 3
45978: IN
45979: ST_TO_ADDR
// end ;
45980: LD_VAR 0 3
45984: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45985: LD_INT 0
45987: PPUSH
// if not chassis or not weapon then
45988: LD_VAR 0 1
45992: NOT
45993: PUSH
45994: LD_VAR 0 2
45998: NOT
45999: OR
46000: IFFALSE 46004
// exit ;
46002: GO 47064
// case weapon of us_machine_gun :
46004: LD_VAR 0 2
46008: PUSH
46009: LD_INT 2
46011: DOUBLE
46012: EQUAL
46013: IFTRUE 46017
46015: GO 46047
46017: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
46018: LD_ADDR_VAR 0 3
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: LD_INT 3
46031: PUSH
46032: LD_INT 4
46034: PUSH
46035: LD_INT 5
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: ST_TO_ADDR
46045: GO 47048
46047: LD_INT 3
46049: DOUBLE
46050: EQUAL
46051: IFTRUE 46055
46053: GO 46085
46055: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
46056: LD_ADDR_VAR 0 3
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: LD_INT 3
46069: PUSH
46070: LD_INT 4
46072: PUSH
46073: LD_INT 5
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: ST_TO_ADDR
46083: GO 47048
46085: LD_INT 11
46087: DOUBLE
46088: EQUAL
46089: IFTRUE 46093
46091: GO 46123
46093: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
46094: LD_ADDR_VAR 0 3
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 3
46107: PUSH
46108: LD_INT 4
46110: PUSH
46111: LD_INT 5
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: ST_TO_ADDR
46121: GO 47048
46123: LD_INT 4
46125: DOUBLE
46126: EQUAL
46127: IFTRUE 46131
46129: GO 46157
46131: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
46132: LD_ADDR_VAR 0 3
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: LD_INT 3
46142: PUSH
46143: LD_INT 4
46145: PUSH
46146: LD_INT 5
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: ST_TO_ADDR
46155: GO 47048
46157: LD_INT 5
46159: DOUBLE
46160: EQUAL
46161: IFTRUE 46165
46163: GO 46191
46165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
46166: LD_ADDR_VAR 0 3
46170: PUSH
46171: LD_INT 2
46173: PUSH
46174: LD_INT 3
46176: PUSH
46177: LD_INT 4
46179: PUSH
46180: LD_INT 5
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: ST_TO_ADDR
46189: GO 47048
46191: LD_INT 9
46193: DOUBLE
46194: EQUAL
46195: IFTRUE 46199
46197: GO 46225
46199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
46200: LD_ADDR_VAR 0 3
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: LD_INT 3
46210: PUSH
46211: LD_INT 4
46213: PUSH
46214: LD_INT 5
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: ST_TO_ADDR
46223: GO 47048
46225: LD_INT 7
46227: DOUBLE
46228: EQUAL
46229: IFTRUE 46233
46231: GO 46259
46233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
46234: LD_ADDR_VAR 0 3
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: LD_INT 3
46244: PUSH
46245: LD_INT 4
46247: PUSH
46248: LD_INT 5
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: ST_TO_ADDR
46257: GO 47048
46259: LD_INT 12
46261: DOUBLE
46262: EQUAL
46263: IFTRUE 46267
46265: GO 46293
46267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
46268: LD_ADDR_VAR 0 3
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: LD_INT 3
46278: PUSH
46279: LD_INT 4
46281: PUSH
46282: LD_INT 5
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: ST_TO_ADDR
46291: GO 47048
46293: LD_INT 13
46295: DOUBLE
46296: EQUAL
46297: IFTRUE 46301
46299: GO 46327
46301: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
46302: LD_ADDR_VAR 0 3
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 3
46312: PUSH
46313: LD_INT 4
46315: PUSH
46316: LD_INT 5
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: ST_TO_ADDR
46325: GO 47048
46327: LD_INT 14
46329: DOUBLE
46330: EQUAL
46331: IFTRUE 46335
46333: GO 46353
46335: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
46336: LD_ADDR_VAR 0 3
46340: PUSH
46341: LD_INT 4
46343: PUSH
46344: LD_INT 5
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: ST_TO_ADDR
46351: GO 47048
46353: LD_INT 6
46355: DOUBLE
46356: EQUAL
46357: IFTRUE 46361
46359: GO 46379
46361: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
46362: LD_ADDR_VAR 0 3
46366: PUSH
46367: LD_INT 4
46369: PUSH
46370: LD_INT 5
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: ST_TO_ADDR
46377: GO 47048
46379: LD_INT 10
46381: DOUBLE
46382: EQUAL
46383: IFTRUE 46387
46385: GO 46405
46387: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
46388: LD_ADDR_VAR 0 3
46392: PUSH
46393: LD_INT 4
46395: PUSH
46396: LD_INT 5
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: ST_TO_ADDR
46403: GO 47048
46405: LD_INT 22
46407: DOUBLE
46408: EQUAL
46409: IFTRUE 46413
46411: GO 46439
46413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46414: LD_ADDR_VAR 0 3
46418: PUSH
46419: LD_INT 11
46421: PUSH
46422: LD_INT 12
46424: PUSH
46425: LD_INT 13
46427: PUSH
46428: LD_INT 14
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: ST_TO_ADDR
46437: GO 47048
46439: LD_INT 23
46441: DOUBLE
46442: EQUAL
46443: IFTRUE 46447
46445: GO 46473
46447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46448: LD_ADDR_VAR 0 3
46452: PUSH
46453: LD_INT 11
46455: PUSH
46456: LD_INT 12
46458: PUSH
46459: LD_INT 13
46461: PUSH
46462: LD_INT 14
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: ST_TO_ADDR
46471: GO 47048
46473: LD_INT 24
46475: DOUBLE
46476: EQUAL
46477: IFTRUE 46481
46479: GO 46507
46481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
46482: LD_ADDR_VAR 0 3
46486: PUSH
46487: LD_INT 11
46489: PUSH
46490: LD_INT 12
46492: PUSH
46493: LD_INT 13
46495: PUSH
46496: LD_INT 14
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: ST_TO_ADDR
46505: GO 47048
46507: LD_INT 30
46509: DOUBLE
46510: EQUAL
46511: IFTRUE 46515
46513: GO 46541
46515: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
46516: LD_ADDR_VAR 0 3
46520: PUSH
46521: LD_INT 11
46523: PUSH
46524: LD_INT 12
46526: PUSH
46527: LD_INT 13
46529: PUSH
46530: LD_INT 14
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: ST_TO_ADDR
46539: GO 47048
46541: LD_INT 25
46543: DOUBLE
46544: EQUAL
46545: IFTRUE 46549
46547: GO 46567
46549: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
46550: LD_ADDR_VAR 0 3
46554: PUSH
46555: LD_INT 13
46557: PUSH
46558: LD_INT 14
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: ST_TO_ADDR
46565: GO 47048
46567: LD_INT 27
46569: DOUBLE
46570: EQUAL
46571: IFTRUE 46575
46573: GO 46593
46575: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
46576: LD_ADDR_VAR 0 3
46580: PUSH
46581: LD_INT 13
46583: PUSH
46584: LD_INT 14
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: ST_TO_ADDR
46591: GO 47048
46593: LD_INT 92
46595: DOUBLE
46596: EQUAL
46597: IFTRUE 46601
46599: GO 46627
46601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46602: LD_ADDR_VAR 0 3
46606: PUSH
46607: LD_INT 11
46609: PUSH
46610: LD_INT 12
46612: PUSH
46613: LD_INT 13
46615: PUSH
46616: LD_INT 14
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: ST_TO_ADDR
46625: GO 47048
46627: LD_INT 28
46629: DOUBLE
46630: EQUAL
46631: IFTRUE 46635
46633: GO 46653
46635: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46636: LD_ADDR_VAR 0 3
46640: PUSH
46641: LD_INT 13
46643: PUSH
46644: LD_INT 14
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: ST_TO_ADDR
46651: GO 47048
46653: LD_INT 29
46655: DOUBLE
46656: EQUAL
46657: IFTRUE 46661
46659: GO 46679
46661: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46662: LD_ADDR_VAR 0 3
46666: PUSH
46667: LD_INT 13
46669: PUSH
46670: LD_INT 14
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: ST_TO_ADDR
46677: GO 47048
46679: LD_INT 31
46681: DOUBLE
46682: EQUAL
46683: IFTRUE 46687
46685: GO 46705
46687: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46688: LD_ADDR_VAR 0 3
46692: PUSH
46693: LD_INT 13
46695: PUSH
46696: LD_INT 14
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: ST_TO_ADDR
46703: GO 47048
46705: LD_INT 26
46707: DOUBLE
46708: EQUAL
46709: IFTRUE 46713
46711: GO 46731
46713: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46714: LD_ADDR_VAR 0 3
46718: PUSH
46719: LD_INT 13
46721: PUSH
46722: LD_INT 14
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: ST_TO_ADDR
46729: GO 47048
46731: LD_INT 42
46733: DOUBLE
46734: EQUAL
46735: IFTRUE 46739
46737: GO 46765
46739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46740: LD_ADDR_VAR 0 3
46744: PUSH
46745: LD_INT 21
46747: PUSH
46748: LD_INT 22
46750: PUSH
46751: LD_INT 23
46753: PUSH
46754: LD_INT 24
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: ST_TO_ADDR
46763: GO 47048
46765: LD_INT 43
46767: DOUBLE
46768: EQUAL
46769: IFTRUE 46773
46771: GO 46799
46773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46774: LD_ADDR_VAR 0 3
46778: PUSH
46779: LD_INT 21
46781: PUSH
46782: LD_INT 22
46784: PUSH
46785: LD_INT 23
46787: PUSH
46788: LD_INT 24
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: ST_TO_ADDR
46797: GO 47048
46799: LD_INT 44
46801: DOUBLE
46802: EQUAL
46803: IFTRUE 46807
46805: GO 46833
46807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46808: LD_ADDR_VAR 0 3
46812: PUSH
46813: LD_INT 21
46815: PUSH
46816: LD_INT 22
46818: PUSH
46819: LD_INT 23
46821: PUSH
46822: LD_INT 24
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: ST_TO_ADDR
46831: GO 47048
46833: LD_INT 45
46835: DOUBLE
46836: EQUAL
46837: IFTRUE 46841
46839: GO 46867
46841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46842: LD_ADDR_VAR 0 3
46846: PUSH
46847: LD_INT 21
46849: PUSH
46850: LD_INT 22
46852: PUSH
46853: LD_INT 23
46855: PUSH
46856: LD_INT 24
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: ST_TO_ADDR
46865: GO 47048
46867: LD_INT 49
46869: DOUBLE
46870: EQUAL
46871: IFTRUE 46875
46873: GO 46901
46875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46876: LD_ADDR_VAR 0 3
46880: PUSH
46881: LD_INT 21
46883: PUSH
46884: LD_INT 22
46886: PUSH
46887: LD_INT 23
46889: PUSH
46890: LD_INT 24
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: ST_TO_ADDR
46899: GO 47048
46901: LD_INT 51
46903: DOUBLE
46904: EQUAL
46905: IFTRUE 46909
46907: GO 46935
46909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46910: LD_ADDR_VAR 0 3
46914: PUSH
46915: LD_INT 21
46917: PUSH
46918: LD_INT 22
46920: PUSH
46921: LD_INT 23
46923: PUSH
46924: LD_INT 24
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: ST_TO_ADDR
46933: GO 47048
46935: LD_INT 52
46937: DOUBLE
46938: EQUAL
46939: IFTRUE 46943
46941: GO 46969
46943: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46944: LD_ADDR_VAR 0 3
46948: PUSH
46949: LD_INT 21
46951: PUSH
46952: LD_INT 22
46954: PUSH
46955: LD_INT 23
46957: PUSH
46958: LD_INT 24
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: ST_TO_ADDR
46967: GO 47048
46969: LD_INT 53
46971: DOUBLE
46972: EQUAL
46973: IFTRUE 46977
46975: GO 46995
46977: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46978: LD_ADDR_VAR 0 3
46982: PUSH
46983: LD_INT 23
46985: PUSH
46986: LD_INT 24
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: ST_TO_ADDR
46993: GO 47048
46995: LD_INT 46
46997: DOUBLE
46998: EQUAL
46999: IFTRUE 47003
47001: GO 47021
47003: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
47004: LD_ADDR_VAR 0 3
47008: PUSH
47009: LD_INT 23
47011: PUSH
47012: LD_INT 24
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: ST_TO_ADDR
47019: GO 47048
47021: LD_INT 47
47023: DOUBLE
47024: EQUAL
47025: IFTRUE 47029
47027: GO 47047
47029: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47030: LD_ADDR_VAR 0 3
47034: PUSH
47035: LD_INT 23
47037: PUSH
47038: LD_INT 24
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: ST_TO_ADDR
47045: GO 47048
47047: POP
// result := ( chassis in result ) ;
47048: LD_ADDR_VAR 0 3
47052: PUSH
47053: LD_VAR 0 1
47057: PUSH
47058: LD_VAR 0 3
47062: IN
47063: ST_TO_ADDR
// end ;
47064: LD_VAR 0 3
47068: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
47069: LD_INT 0
47071: PPUSH
47072: PPUSH
47073: PPUSH
47074: PPUSH
47075: PPUSH
47076: PPUSH
47077: PPUSH
// result := array ;
47078: LD_ADDR_VAR 0 5
47082: PUSH
47083: LD_VAR 0 1
47087: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
47088: LD_VAR 0 1
47092: NOT
47093: PUSH
47094: LD_VAR 0 2
47098: NOT
47099: OR
47100: PUSH
47101: LD_VAR 0 3
47105: NOT
47106: OR
47107: PUSH
47108: LD_VAR 0 2
47112: PUSH
47113: LD_VAR 0 1
47117: GREATER
47118: OR
47119: PUSH
47120: LD_VAR 0 3
47124: PUSH
47125: LD_VAR 0 1
47129: GREATER
47130: OR
47131: IFFALSE 47135
// exit ;
47133: GO 47431
// if direction then
47135: LD_VAR 0 4
47139: IFFALSE 47203
// begin d := 1 ;
47141: LD_ADDR_VAR 0 9
47145: PUSH
47146: LD_INT 1
47148: ST_TO_ADDR
// if i_from > i_to then
47149: LD_VAR 0 2
47153: PUSH
47154: LD_VAR 0 3
47158: GREATER
47159: IFFALSE 47185
// length := ( array - i_from ) + i_to else
47161: LD_ADDR_VAR 0 11
47165: PUSH
47166: LD_VAR 0 1
47170: PUSH
47171: LD_VAR 0 2
47175: MINUS
47176: PUSH
47177: LD_VAR 0 3
47181: PLUS
47182: ST_TO_ADDR
47183: GO 47201
// length := i_to - i_from ;
47185: LD_ADDR_VAR 0 11
47189: PUSH
47190: LD_VAR 0 3
47194: PUSH
47195: LD_VAR 0 2
47199: MINUS
47200: ST_TO_ADDR
// end else
47201: GO 47264
// begin d := - 1 ;
47203: LD_ADDR_VAR 0 9
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: ST_TO_ADDR
// if i_from > i_to then
47212: LD_VAR 0 2
47216: PUSH
47217: LD_VAR 0 3
47221: GREATER
47222: IFFALSE 47242
// length := i_from - i_to else
47224: LD_ADDR_VAR 0 11
47228: PUSH
47229: LD_VAR 0 2
47233: PUSH
47234: LD_VAR 0 3
47238: MINUS
47239: ST_TO_ADDR
47240: GO 47264
// length := ( array - i_to ) + i_from ;
47242: LD_ADDR_VAR 0 11
47246: PUSH
47247: LD_VAR 0 1
47251: PUSH
47252: LD_VAR 0 3
47256: MINUS
47257: PUSH
47258: LD_VAR 0 2
47262: PLUS
47263: ST_TO_ADDR
// end ; if not length then
47264: LD_VAR 0 11
47268: NOT
47269: IFFALSE 47273
// exit ;
47271: GO 47431
// tmp := array ;
47273: LD_ADDR_VAR 0 10
47277: PUSH
47278: LD_VAR 0 1
47282: ST_TO_ADDR
// for i = 1 to length do
47283: LD_ADDR_VAR 0 6
47287: PUSH
47288: DOUBLE
47289: LD_INT 1
47291: DEC
47292: ST_TO_ADDR
47293: LD_VAR 0 11
47297: PUSH
47298: FOR_TO
47299: IFFALSE 47419
// begin for j = 1 to array do
47301: LD_ADDR_VAR 0 7
47305: PUSH
47306: DOUBLE
47307: LD_INT 1
47309: DEC
47310: ST_TO_ADDR
47311: LD_VAR 0 1
47315: PUSH
47316: FOR_TO
47317: IFFALSE 47405
// begin k := j + d ;
47319: LD_ADDR_VAR 0 8
47323: PUSH
47324: LD_VAR 0 7
47328: PUSH
47329: LD_VAR 0 9
47333: PLUS
47334: ST_TO_ADDR
// if k > array then
47335: LD_VAR 0 8
47339: PUSH
47340: LD_VAR 0 1
47344: GREATER
47345: IFFALSE 47355
// k := 1 ;
47347: LD_ADDR_VAR 0 8
47351: PUSH
47352: LD_INT 1
47354: ST_TO_ADDR
// if not k then
47355: LD_VAR 0 8
47359: NOT
47360: IFFALSE 47372
// k := array ;
47362: LD_ADDR_VAR 0 8
47366: PUSH
47367: LD_VAR 0 1
47371: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
47372: LD_ADDR_VAR 0 10
47376: PUSH
47377: LD_VAR 0 10
47381: PPUSH
47382: LD_VAR 0 8
47386: PPUSH
47387: LD_VAR 0 1
47391: PUSH
47392: LD_VAR 0 7
47396: ARRAY
47397: PPUSH
47398: CALL_OW 1
47402: ST_TO_ADDR
// end ;
47403: GO 47316
47405: POP
47406: POP
// array := tmp ;
47407: LD_ADDR_VAR 0 1
47411: PUSH
47412: LD_VAR 0 10
47416: ST_TO_ADDR
// end ;
47417: GO 47298
47419: POP
47420: POP
// result := array ;
47421: LD_ADDR_VAR 0 5
47425: PUSH
47426: LD_VAR 0 1
47430: ST_TO_ADDR
// end ;
47431: LD_VAR 0 5
47435: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
47436: LD_INT 0
47438: PPUSH
47439: PPUSH
// result := 0 ;
47440: LD_ADDR_VAR 0 3
47444: PUSH
47445: LD_INT 0
47447: ST_TO_ADDR
// if not array or not value in array then
47448: LD_VAR 0 1
47452: NOT
47453: PUSH
47454: LD_VAR 0 2
47458: PUSH
47459: LD_VAR 0 1
47463: IN
47464: NOT
47465: OR
47466: IFFALSE 47470
// exit ;
47468: GO 47524
// for i = 1 to array do
47470: LD_ADDR_VAR 0 4
47474: PUSH
47475: DOUBLE
47476: LD_INT 1
47478: DEC
47479: ST_TO_ADDR
47480: LD_VAR 0 1
47484: PUSH
47485: FOR_TO
47486: IFFALSE 47522
// if value = array [ i ] then
47488: LD_VAR 0 2
47492: PUSH
47493: LD_VAR 0 1
47497: PUSH
47498: LD_VAR 0 4
47502: ARRAY
47503: EQUAL
47504: IFFALSE 47520
// begin result := i ;
47506: LD_ADDR_VAR 0 3
47510: PUSH
47511: LD_VAR 0 4
47515: ST_TO_ADDR
// exit ;
47516: POP
47517: POP
47518: GO 47524
// end ;
47520: GO 47485
47522: POP
47523: POP
// end ;
47524: LD_VAR 0 3
47528: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
47529: LD_INT 0
47531: PPUSH
// vc_chassis := chassis ;
47532: LD_ADDR_OWVAR 37
47536: PUSH
47537: LD_VAR 0 1
47541: ST_TO_ADDR
// vc_engine := engine ;
47542: LD_ADDR_OWVAR 39
47546: PUSH
47547: LD_VAR 0 2
47551: ST_TO_ADDR
// vc_control := control ;
47552: LD_ADDR_OWVAR 38
47556: PUSH
47557: LD_VAR 0 3
47561: ST_TO_ADDR
// vc_weapon := weapon ;
47562: LD_ADDR_OWVAR 40
47566: PUSH
47567: LD_VAR 0 4
47571: ST_TO_ADDR
// vc_fuel_battery := fuel ;
47572: LD_ADDR_OWVAR 41
47576: PUSH
47577: LD_VAR 0 5
47581: ST_TO_ADDR
// end ;
47582: LD_VAR 0 6
47586: RET
// export function WantPlant ( unit ) ; var task ; begin
47587: LD_INT 0
47589: PPUSH
47590: PPUSH
// result := false ;
47591: LD_ADDR_VAR 0 2
47595: PUSH
47596: LD_INT 0
47598: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47599: LD_ADDR_VAR 0 3
47603: PUSH
47604: LD_VAR 0 1
47608: PPUSH
47609: CALL_OW 437
47613: ST_TO_ADDR
// if task then
47614: LD_VAR 0 3
47618: IFFALSE 47646
// if task [ 1 ] [ 1 ] = p then
47620: LD_VAR 0 3
47624: PUSH
47625: LD_INT 1
47627: ARRAY
47628: PUSH
47629: LD_INT 1
47631: ARRAY
47632: PUSH
47633: LD_STRING p
47635: EQUAL
47636: IFFALSE 47646
// result := true ;
47638: LD_ADDR_VAR 0 2
47642: PUSH
47643: LD_INT 1
47645: ST_TO_ADDR
// end ;
47646: LD_VAR 0 2
47650: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47651: LD_INT 0
47653: PPUSH
47654: PPUSH
47655: PPUSH
47656: PPUSH
// if pos < 1 then
47657: LD_VAR 0 2
47661: PUSH
47662: LD_INT 1
47664: LESS
47665: IFFALSE 47669
// exit ;
47667: GO 47972
// if pos = 1 then
47669: LD_VAR 0 2
47673: PUSH
47674: LD_INT 1
47676: EQUAL
47677: IFFALSE 47710
// result := Replace ( arr , pos [ 1 ] , value ) else
47679: LD_ADDR_VAR 0 4
47683: PUSH
47684: LD_VAR 0 1
47688: PPUSH
47689: LD_VAR 0 2
47693: PUSH
47694: LD_INT 1
47696: ARRAY
47697: PPUSH
47698: LD_VAR 0 3
47702: PPUSH
47703: CALL_OW 1
47707: ST_TO_ADDR
47708: GO 47972
// begin tmp := arr ;
47710: LD_ADDR_VAR 0 6
47714: PUSH
47715: LD_VAR 0 1
47719: ST_TO_ADDR
// s_arr := [ tmp ] ;
47720: LD_ADDR_VAR 0 7
47724: PUSH
47725: LD_VAR 0 6
47729: PUSH
47730: EMPTY
47731: LIST
47732: ST_TO_ADDR
// for i = 1 to pos - 1 do
47733: LD_ADDR_VAR 0 5
47737: PUSH
47738: DOUBLE
47739: LD_INT 1
47741: DEC
47742: ST_TO_ADDR
47743: LD_VAR 0 2
47747: PUSH
47748: LD_INT 1
47750: MINUS
47751: PUSH
47752: FOR_TO
47753: IFFALSE 47798
// begin tmp := tmp [ pos [ i ] ] ;
47755: LD_ADDR_VAR 0 6
47759: PUSH
47760: LD_VAR 0 6
47764: PUSH
47765: LD_VAR 0 2
47769: PUSH
47770: LD_VAR 0 5
47774: ARRAY
47775: ARRAY
47776: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47777: LD_ADDR_VAR 0 7
47781: PUSH
47782: LD_VAR 0 7
47786: PUSH
47787: LD_VAR 0 6
47791: PUSH
47792: EMPTY
47793: LIST
47794: ADD
47795: ST_TO_ADDR
// end ;
47796: GO 47752
47798: POP
47799: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47800: LD_ADDR_VAR 0 6
47804: PUSH
47805: LD_VAR 0 6
47809: PPUSH
47810: LD_VAR 0 2
47814: PUSH
47815: LD_VAR 0 2
47819: ARRAY
47820: PPUSH
47821: LD_VAR 0 3
47825: PPUSH
47826: CALL_OW 1
47830: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47831: LD_ADDR_VAR 0 7
47835: PUSH
47836: LD_VAR 0 7
47840: PPUSH
47841: LD_VAR 0 7
47845: PPUSH
47846: LD_VAR 0 6
47850: PPUSH
47851: CALL_OW 1
47855: ST_TO_ADDR
// for i = s_arr downto 2 do
47856: LD_ADDR_VAR 0 5
47860: PUSH
47861: DOUBLE
47862: LD_VAR 0 7
47866: INC
47867: ST_TO_ADDR
47868: LD_INT 2
47870: PUSH
47871: FOR_DOWNTO
47872: IFFALSE 47956
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47874: LD_ADDR_VAR 0 6
47878: PUSH
47879: LD_VAR 0 7
47883: PUSH
47884: LD_VAR 0 5
47888: PUSH
47889: LD_INT 1
47891: MINUS
47892: ARRAY
47893: PPUSH
47894: LD_VAR 0 2
47898: PUSH
47899: LD_VAR 0 5
47903: PUSH
47904: LD_INT 1
47906: MINUS
47907: ARRAY
47908: PPUSH
47909: LD_VAR 0 7
47913: PUSH
47914: LD_VAR 0 5
47918: ARRAY
47919: PPUSH
47920: CALL_OW 1
47924: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47925: LD_ADDR_VAR 0 7
47929: PUSH
47930: LD_VAR 0 7
47934: PPUSH
47935: LD_VAR 0 5
47939: PUSH
47940: LD_INT 1
47942: MINUS
47943: PPUSH
47944: LD_VAR 0 6
47948: PPUSH
47949: CALL_OW 1
47953: ST_TO_ADDR
// end ;
47954: GO 47871
47956: POP
47957: POP
// result := s_arr [ 1 ] ;
47958: LD_ADDR_VAR 0 4
47962: PUSH
47963: LD_VAR 0 7
47967: PUSH
47968: LD_INT 1
47970: ARRAY
47971: ST_TO_ADDR
// end ; end ;
47972: LD_VAR 0 4
47976: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47977: LD_INT 0
47979: PPUSH
47980: PPUSH
// if not list then
47981: LD_VAR 0 1
47985: NOT
47986: IFFALSE 47990
// exit ;
47988: GO 48081
// i := list [ pos1 ] ;
47990: LD_ADDR_VAR 0 5
47994: PUSH
47995: LD_VAR 0 1
47999: PUSH
48000: LD_VAR 0 2
48004: ARRAY
48005: ST_TO_ADDR
// if not i then
48006: LD_VAR 0 5
48010: NOT
48011: IFFALSE 48015
// exit ;
48013: GO 48081
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
48015: LD_ADDR_VAR 0 1
48019: PUSH
48020: LD_VAR 0 1
48024: PPUSH
48025: LD_VAR 0 2
48029: PPUSH
48030: LD_VAR 0 1
48034: PUSH
48035: LD_VAR 0 3
48039: ARRAY
48040: PPUSH
48041: CALL_OW 1
48045: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
48046: LD_ADDR_VAR 0 1
48050: PUSH
48051: LD_VAR 0 1
48055: PPUSH
48056: LD_VAR 0 3
48060: PPUSH
48061: LD_VAR 0 5
48065: PPUSH
48066: CALL_OW 1
48070: ST_TO_ADDR
// result := list ;
48071: LD_ADDR_VAR 0 4
48075: PUSH
48076: LD_VAR 0 1
48080: ST_TO_ADDR
// end ;
48081: LD_VAR 0 4
48085: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
48086: LD_INT 0
48088: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
48089: LD_ADDR_VAR 0 5
48093: PUSH
48094: LD_VAR 0 1
48098: PPUSH
48099: CALL_OW 250
48103: PPUSH
48104: LD_VAR 0 1
48108: PPUSH
48109: CALL_OW 251
48113: PPUSH
48114: LD_VAR 0 2
48118: PPUSH
48119: LD_VAR 0 3
48123: PPUSH
48124: LD_VAR 0 4
48128: PPUSH
48129: CALL 48507 0 5
48133: ST_TO_ADDR
// end ;
48134: LD_VAR 0 5
48138: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
48139: LD_INT 0
48141: PPUSH
48142: PPUSH
48143: PPUSH
48144: PPUSH
// if not list or not unit then
48145: LD_VAR 0 2
48149: NOT
48150: PUSH
48151: LD_VAR 0 1
48155: NOT
48156: OR
48157: IFFALSE 48161
// exit ;
48159: GO 48502
// result := [ ] ;
48161: LD_ADDR_VAR 0 5
48165: PUSH
48166: EMPTY
48167: ST_TO_ADDR
// for i in list do
48168: LD_ADDR_VAR 0 6
48172: PUSH
48173: LD_VAR 0 2
48177: PUSH
48178: FOR_IN
48179: IFFALSE 48397
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48181: LD_ADDR_VAR 0 8
48185: PUSH
48186: LD_VAR 0 1
48190: PPUSH
48191: LD_VAR 0 6
48195: PUSH
48196: LD_INT 1
48198: ARRAY
48199: PPUSH
48200: LD_VAR 0 6
48204: PUSH
48205: LD_INT 2
48207: ARRAY
48208: PPUSH
48209: CALL_OW 297
48213: ST_TO_ADDR
// if not Count ( result ) then
48214: LD_VAR 0 5
48218: PPUSH
48219: CALL 44791 0 1
48223: NOT
48224: IFFALSE 48257
// begin result := Join ( result , [ i , tmp ] ) ;
48226: LD_ADDR_VAR 0 5
48230: PUSH
48231: LD_VAR 0 5
48235: PPUSH
48236: LD_VAR 0 6
48240: PUSH
48241: LD_VAR 0 8
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PPUSH
48250: CALL 80380 0 2
48254: ST_TO_ADDR
// continue ;
48255: GO 48178
// end ; if result [ result ] [ 2 ] <= tmp then
48257: LD_VAR 0 5
48261: PUSH
48262: LD_VAR 0 5
48266: ARRAY
48267: PUSH
48268: LD_INT 2
48270: ARRAY
48271: PUSH
48272: LD_VAR 0 8
48276: LESSEQUAL
48277: IFFALSE 48310
// result := Join ( result , [ i , tmp ] ) else
48279: LD_ADDR_VAR 0 5
48283: PUSH
48284: LD_VAR 0 5
48288: PPUSH
48289: LD_VAR 0 6
48293: PUSH
48294: LD_VAR 0 8
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PPUSH
48303: CALL 80380 0 2
48307: ST_TO_ADDR
48308: GO 48395
// begin for j := 1 to Count ( result ) do
48310: LD_ADDR_VAR 0 7
48314: PUSH
48315: DOUBLE
48316: LD_INT 1
48318: DEC
48319: ST_TO_ADDR
48320: LD_VAR 0 5
48324: PPUSH
48325: CALL 44791 0 1
48329: PUSH
48330: FOR_TO
48331: IFFALSE 48393
// begin if tmp < result [ j ] [ 2 ] then
48333: LD_VAR 0 8
48337: PUSH
48338: LD_VAR 0 5
48342: PUSH
48343: LD_VAR 0 7
48347: ARRAY
48348: PUSH
48349: LD_INT 2
48351: ARRAY
48352: LESS
48353: IFFALSE 48391
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48355: LD_ADDR_VAR 0 5
48359: PUSH
48360: LD_VAR 0 5
48364: PPUSH
48365: LD_VAR 0 7
48369: PPUSH
48370: LD_VAR 0 6
48374: PUSH
48375: LD_VAR 0 8
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PPUSH
48384: CALL_OW 2
48388: ST_TO_ADDR
// break ;
48389: GO 48393
// end ; end ;
48391: GO 48330
48393: POP
48394: POP
// end ; end ;
48395: GO 48178
48397: POP
48398: POP
// if result and not asc then
48399: LD_VAR 0 5
48403: PUSH
48404: LD_VAR 0 3
48408: NOT
48409: AND
48410: IFFALSE 48427
// result := ReverseArray ( result ) ;
48412: LD_ADDR_VAR 0 5
48416: PUSH
48417: LD_VAR 0 5
48421: PPUSH
48422: CALL 75667 0 1
48426: ST_TO_ADDR
// tmp := [ ] ;
48427: LD_ADDR_VAR 0 8
48431: PUSH
48432: EMPTY
48433: ST_TO_ADDR
// if mode then
48434: LD_VAR 0 4
48438: IFFALSE 48502
// begin for i := 1 to result do
48440: LD_ADDR_VAR 0 6
48444: PUSH
48445: DOUBLE
48446: LD_INT 1
48448: DEC
48449: ST_TO_ADDR
48450: LD_VAR 0 5
48454: PUSH
48455: FOR_TO
48456: IFFALSE 48490
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
48458: LD_ADDR_VAR 0 8
48462: PUSH
48463: LD_VAR 0 8
48467: PPUSH
48468: LD_VAR 0 5
48472: PUSH
48473: LD_VAR 0 6
48477: ARRAY
48478: PUSH
48479: LD_INT 1
48481: ARRAY
48482: PPUSH
48483: CALL 80380 0 2
48487: ST_TO_ADDR
48488: GO 48455
48490: POP
48491: POP
// result := tmp ;
48492: LD_ADDR_VAR 0 5
48496: PUSH
48497: LD_VAR 0 8
48501: ST_TO_ADDR
// end ; end ;
48502: LD_VAR 0 5
48506: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
48507: LD_INT 0
48509: PPUSH
48510: PPUSH
48511: PPUSH
48512: PPUSH
// if not list then
48513: LD_VAR 0 3
48517: NOT
48518: IFFALSE 48522
// exit ;
48520: GO 48910
// result := [ ] ;
48522: LD_ADDR_VAR 0 6
48526: PUSH
48527: EMPTY
48528: ST_TO_ADDR
// for i in list do
48529: LD_ADDR_VAR 0 7
48533: PUSH
48534: LD_VAR 0 3
48538: PUSH
48539: FOR_IN
48540: IFFALSE 48742
// begin tmp := GetDistUnitXY ( i , x , y ) ;
48542: LD_ADDR_VAR 0 9
48546: PUSH
48547: LD_VAR 0 7
48551: PPUSH
48552: LD_VAR 0 1
48556: PPUSH
48557: LD_VAR 0 2
48561: PPUSH
48562: CALL_OW 297
48566: ST_TO_ADDR
// if not result then
48567: LD_VAR 0 6
48571: NOT
48572: IFFALSE 48598
// result := [ [ i , tmp ] ] else
48574: LD_ADDR_VAR 0 6
48578: PUSH
48579: LD_VAR 0 7
48583: PUSH
48584: LD_VAR 0 9
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: EMPTY
48594: LIST
48595: ST_TO_ADDR
48596: GO 48740
// begin if result [ result ] [ 2 ] < tmp then
48598: LD_VAR 0 6
48602: PUSH
48603: LD_VAR 0 6
48607: ARRAY
48608: PUSH
48609: LD_INT 2
48611: ARRAY
48612: PUSH
48613: LD_VAR 0 9
48617: LESS
48618: IFFALSE 48660
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48620: LD_ADDR_VAR 0 6
48624: PUSH
48625: LD_VAR 0 6
48629: PPUSH
48630: LD_VAR 0 6
48634: PUSH
48635: LD_INT 1
48637: PLUS
48638: PPUSH
48639: LD_VAR 0 7
48643: PUSH
48644: LD_VAR 0 9
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PPUSH
48653: CALL_OW 2
48657: ST_TO_ADDR
48658: GO 48740
// for j = 1 to result do
48660: LD_ADDR_VAR 0 8
48664: PUSH
48665: DOUBLE
48666: LD_INT 1
48668: DEC
48669: ST_TO_ADDR
48670: LD_VAR 0 6
48674: PUSH
48675: FOR_TO
48676: IFFALSE 48738
// begin if tmp < result [ j ] [ 2 ] then
48678: LD_VAR 0 9
48682: PUSH
48683: LD_VAR 0 6
48687: PUSH
48688: LD_VAR 0 8
48692: ARRAY
48693: PUSH
48694: LD_INT 2
48696: ARRAY
48697: LESS
48698: IFFALSE 48736
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48700: LD_ADDR_VAR 0 6
48704: PUSH
48705: LD_VAR 0 6
48709: PPUSH
48710: LD_VAR 0 8
48714: PPUSH
48715: LD_VAR 0 7
48719: PUSH
48720: LD_VAR 0 9
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PPUSH
48729: CALL_OW 2
48733: ST_TO_ADDR
// break ;
48734: GO 48738
// end ; end ;
48736: GO 48675
48738: POP
48739: POP
// end ; end ;
48740: GO 48539
48742: POP
48743: POP
// if result and not asc then
48744: LD_VAR 0 6
48748: PUSH
48749: LD_VAR 0 4
48753: NOT
48754: AND
48755: IFFALSE 48830
// begin tmp := result ;
48757: LD_ADDR_VAR 0 9
48761: PUSH
48762: LD_VAR 0 6
48766: ST_TO_ADDR
// for i = tmp downto 1 do
48767: LD_ADDR_VAR 0 7
48771: PUSH
48772: DOUBLE
48773: LD_VAR 0 9
48777: INC
48778: ST_TO_ADDR
48779: LD_INT 1
48781: PUSH
48782: FOR_DOWNTO
48783: IFFALSE 48828
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48785: LD_ADDR_VAR 0 6
48789: PUSH
48790: LD_VAR 0 6
48794: PPUSH
48795: LD_VAR 0 9
48799: PUSH
48800: LD_VAR 0 7
48804: MINUS
48805: PUSH
48806: LD_INT 1
48808: PLUS
48809: PPUSH
48810: LD_VAR 0 9
48814: PUSH
48815: LD_VAR 0 7
48819: ARRAY
48820: PPUSH
48821: CALL_OW 1
48825: ST_TO_ADDR
48826: GO 48782
48828: POP
48829: POP
// end ; tmp := [ ] ;
48830: LD_ADDR_VAR 0 9
48834: PUSH
48835: EMPTY
48836: ST_TO_ADDR
// if mode then
48837: LD_VAR 0 5
48841: IFFALSE 48910
// begin for i = 1 to result do
48843: LD_ADDR_VAR 0 7
48847: PUSH
48848: DOUBLE
48849: LD_INT 1
48851: DEC
48852: ST_TO_ADDR
48853: LD_VAR 0 6
48857: PUSH
48858: FOR_TO
48859: IFFALSE 48898
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48861: LD_ADDR_VAR 0 9
48865: PUSH
48866: LD_VAR 0 9
48870: PPUSH
48871: LD_VAR 0 7
48875: PPUSH
48876: LD_VAR 0 6
48880: PUSH
48881: LD_VAR 0 7
48885: ARRAY
48886: PUSH
48887: LD_INT 1
48889: ARRAY
48890: PPUSH
48891: CALL_OW 1
48895: ST_TO_ADDR
48896: GO 48858
48898: POP
48899: POP
// result := tmp ;
48900: LD_ADDR_VAR 0 6
48904: PUSH
48905: LD_VAR 0 9
48909: ST_TO_ADDR
// end ; end ;
48910: LD_VAR 0 6
48914: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48915: LD_INT 0
48917: PPUSH
48918: PPUSH
48919: PPUSH
48920: PPUSH
48921: PPUSH
48922: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48923: LD_ADDR_VAR 0 5
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: ST_TO_ADDR
// if not x or not y then
48945: LD_VAR 0 2
48949: NOT
48950: PUSH
48951: LD_VAR 0 3
48955: NOT
48956: OR
48957: IFFALSE 48961
// exit ;
48959: GO 50611
// if not range then
48961: LD_VAR 0 4
48965: NOT
48966: IFFALSE 48976
// range := 10 ;
48968: LD_ADDR_VAR 0 4
48972: PUSH
48973: LD_INT 10
48975: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48976: LD_ADDR_VAR 0 8
48980: PUSH
48981: LD_INT 81
48983: PUSH
48984: LD_VAR 0 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 92
48995: PUSH
48996: LD_VAR 0 2
49000: PUSH
49001: LD_VAR 0 3
49005: PUSH
49006: LD_VAR 0 4
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 3
49019: PUSH
49020: LD_INT 21
49022: PUSH
49023: LD_INT 3
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: LIST
49038: PPUSH
49039: CALL_OW 69
49043: ST_TO_ADDR
// if not tmp then
49044: LD_VAR 0 8
49048: NOT
49049: IFFALSE 49053
// exit ;
49051: GO 50611
// for i in tmp do
49053: LD_ADDR_VAR 0 6
49057: PUSH
49058: LD_VAR 0 8
49062: PUSH
49063: FOR_IN
49064: IFFALSE 50586
// begin points := [ 0 , 0 , 0 ] ;
49066: LD_ADDR_VAR 0 9
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: LIST
49084: ST_TO_ADDR
// bpoints := 1 ;
49085: LD_ADDR_VAR 0 10
49089: PUSH
49090: LD_INT 1
49092: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49093: LD_VAR 0 6
49097: PPUSH
49098: CALL_OW 247
49102: PUSH
49103: LD_INT 1
49105: DOUBLE
49106: EQUAL
49107: IFTRUE 49111
49109: GO 49689
49111: POP
// begin if GetClass ( i ) = 1 then
49112: LD_VAR 0 6
49116: PPUSH
49117: CALL_OW 257
49121: PUSH
49122: LD_INT 1
49124: EQUAL
49125: IFFALSE 49146
// points := [ 10 , 5 , 3 ] ;
49127: LD_ADDR_VAR 0 9
49131: PUSH
49132: LD_INT 10
49134: PUSH
49135: LD_INT 5
49137: PUSH
49138: LD_INT 3
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: LIST
49145: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49146: LD_VAR 0 6
49150: PPUSH
49151: CALL_OW 257
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: LD_INT 3
49161: PUSH
49162: LD_INT 4
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: LIST
49169: IN
49170: IFFALSE 49191
// points := [ 3 , 2 , 1 ] ;
49172: LD_ADDR_VAR 0 9
49176: PUSH
49177: LD_INT 3
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: LIST
49190: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49191: LD_VAR 0 6
49195: PPUSH
49196: CALL_OW 257
49200: PUSH
49201: LD_INT 5
49203: EQUAL
49204: IFFALSE 49225
// points := [ 130 , 5 , 2 ] ;
49206: LD_ADDR_VAR 0 9
49210: PUSH
49211: LD_INT 130
49213: PUSH
49214: LD_INT 5
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: LIST
49224: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49225: LD_VAR 0 6
49229: PPUSH
49230: CALL_OW 257
49234: PUSH
49235: LD_INT 8
49237: EQUAL
49238: IFFALSE 49259
// points := [ 35 , 35 , 30 ] ;
49240: LD_ADDR_VAR 0 9
49244: PUSH
49245: LD_INT 35
49247: PUSH
49248: LD_INT 35
49250: PUSH
49251: LD_INT 30
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: LIST
49258: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49259: LD_VAR 0 6
49263: PPUSH
49264: CALL_OW 257
49268: PUSH
49269: LD_INT 9
49271: EQUAL
49272: IFFALSE 49293
// points := [ 20 , 55 , 40 ] ;
49274: LD_ADDR_VAR 0 9
49278: PUSH
49279: LD_INT 20
49281: PUSH
49282: LD_INT 55
49284: PUSH
49285: LD_INT 40
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: LIST
49292: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49293: LD_VAR 0 6
49297: PPUSH
49298: CALL_OW 257
49302: PUSH
49303: LD_INT 12
49305: PUSH
49306: LD_INT 16
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: IN
49313: IFFALSE 49334
// points := [ 5 , 3 , 2 ] ;
49315: LD_ADDR_VAR 0 9
49319: PUSH
49320: LD_INT 5
49322: PUSH
49323: LD_INT 3
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: LIST
49333: ST_TO_ADDR
// if GetClass ( i ) = 17 then
49334: LD_VAR 0 6
49338: PPUSH
49339: CALL_OW 257
49343: PUSH
49344: LD_INT 17
49346: EQUAL
49347: IFFALSE 49368
// points := [ 100 , 50 , 75 ] ;
49349: LD_ADDR_VAR 0 9
49353: PUSH
49354: LD_INT 100
49356: PUSH
49357: LD_INT 50
49359: PUSH
49360: LD_INT 75
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: LIST
49367: ST_TO_ADDR
// if GetClass ( i ) = 15 then
49368: LD_VAR 0 6
49372: PPUSH
49373: CALL_OW 257
49377: PUSH
49378: LD_INT 15
49380: EQUAL
49381: IFFALSE 49402
// points := [ 10 , 5 , 3 ] ;
49383: LD_ADDR_VAR 0 9
49387: PUSH
49388: LD_INT 10
49390: PUSH
49391: LD_INT 5
49393: PUSH
49394: LD_INT 3
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: LIST
49401: ST_TO_ADDR
// if GetClass ( i ) = 14 then
49402: LD_VAR 0 6
49406: PPUSH
49407: CALL_OW 257
49411: PUSH
49412: LD_INT 14
49414: EQUAL
49415: IFFALSE 49436
// points := [ 10 , 0 , 0 ] ;
49417: LD_ADDR_VAR 0 9
49421: PUSH
49422: LD_INT 10
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: LIST
49435: ST_TO_ADDR
// if GetClass ( i ) = 11 then
49436: LD_VAR 0 6
49440: PPUSH
49441: CALL_OW 257
49445: PUSH
49446: LD_INT 11
49448: EQUAL
49449: IFFALSE 49470
// points := [ 30 , 10 , 5 ] ;
49451: LD_ADDR_VAR 0 9
49455: PUSH
49456: LD_INT 30
49458: PUSH
49459: LD_INT 10
49461: PUSH
49462: LD_INT 5
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: LIST
49469: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
49470: LD_VAR 0 1
49474: PPUSH
49475: LD_INT 5
49477: PPUSH
49478: CALL_OW 321
49482: PUSH
49483: LD_INT 2
49485: EQUAL
49486: IFFALSE 49503
// bpoints := bpoints * 1.8 ;
49488: LD_ADDR_VAR 0 10
49492: PUSH
49493: LD_VAR 0 10
49497: PUSH
49498: LD_REAL  1.80000000000000E+0000
49501: MUL
49502: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
49503: LD_VAR 0 6
49507: PPUSH
49508: CALL_OW 257
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: LD_INT 2
49518: PUSH
49519: LD_INT 3
49521: PUSH
49522: LD_INT 4
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: IN
49531: PUSH
49532: LD_VAR 0 1
49536: PPUSH
49537: LD_INT 51
49539: PPUSH
49540: CALL_OW 321
49544: PUSH
49545: LD_INT 2
49547: EQUAL
49548: AND
49549: IFFALSE 49566
// bpoints := bpoints * 1.2 ;
49551: LD_ADDR_VAR 0 10
49555: PUSH
49556: LD_VAR 0 10
49560: PUSH
49561: LD_REAL  1.20000000000000E+0000
49564: MUL
49565: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
49566: LD_VAR 0 6
49570: PPUSH
49571: CALL_OW 257
49575: PUSH
49576: LD_INT 5
49578: PUSH
49579: LD_INT 7
49581: PUSH
49582: LD_INT 9
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: LIST
49589: IN
49590: PUSH
49591: LD_VAR 0 1
49595: PPUSH
49596: LD_INT 52
49598: PPUSH
49599: CALL_OW 321
49603: PUSH
49604: LD_INT 2
49606: EQUAL
49607: AND
49608: IFFALSE 49625
// bpoints := bpoints * 1.5 ;
49610: LD_ADDR_VAR 0 10
49614: PUSH
49615: LD_VAR 0 10
49619: PUSH
49620: LD_REAL  1.50000000000000E+0000
49623: MUL
49624: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49625: LD_VAR 0 1
49629: PPUSH
49630: LD_INT 66
49632: PPUSH
49633: CALL_OW 321
49637: PUSH
49638: LD_INT 2
49640: EQUAL
49641: IFFALSE 49658
// bpoints := bpoints * 1.1 ;
49643: LD_ADDR_VAR 0 10
49647: PUSH
49648: LD_VAR 0 10
49652: PUSH
49653: LD_REAL  1.10000000000000E+0000
49656: MUL
49657: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49658: LD_ADDR_VAR 0 10
49662: PUSH
49663: LD_VAR 0 10
49667: PUSH
49668: LD_VAR 0 6
49672: PPUSH
49673: LD_INT 1
49675: PPUSH
49676: CALL_OW 259
49680: PUSH
49681: LD_REAL  1.15000000000000E+0000
49684: MUL
49685: MUL
49686: ST_TO_ADDR
// end ; unit_vehicle :
49687: GO 50515
49689: LD_INT 2
49691: DOUBLE
49692: EQUAL
49693: IFTRUE 49697
49695: GO 50503
49697: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49698: LD_VAR 0 6
49702: PPUSH
49703: CALL_OW 264
49707: PUSH
49708: LD_INT 2
49710: PUSH
49711: LD_INT 42
49713: PUSH
49714: LD_INT 24
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: LIST
49721: IN
49722: IFFALSE 49743
// points := [ 25 , 5 , 3 ] ;
49724: LD_ADDR_VAR 0 9
49728: PUSH
49729: LD_INT 25
49731: PUSH
49732: LD_INT 5
49734: PUSH
49735: LD_INT 3
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: LIST
49742: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49743: LD_VAR 0 6
49747: PPUSH
49748: CALL_OW 264
49752: PUSH
49753: LD_INT 4
49755: PUSH
49756: LD_INT 43
49758: PUSH
49759: LD_INT 25
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: LIST
49766: IN
49767: IFFALSE 49788
// points := [ 40 , 15 , 5 ] ;
49769: LD_ADDR_VAR 0 9
49773: PUSH
49774: LD_INT 40
49776: PUSH
49777: LD_INT 15
49779: PUSH
49780: LD_INT 5
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: LIST
49787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49788: LD_VAR 0 6
49792: PPUSH
49793: CALL_OW 264
49797: PUSH
49798: LD_INT 3
49800: PUSH
49801: LD_INT 23
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: IN
49808: IFFALSE 49829
// points := [ 7 , 25 , 8 ] ;
49810: LD_ADDR_VAR 0 9
49814: PUSH
49815: LD_INT 7
49817: PUSH
49818: LD_INT 25
49820: PUSH
49821: LD_INT 8
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: LIST
49828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49829: LD_VAR 0 6
49833: PPUSH
49834: CALL_OW 264
49838: PUSH
49839: LD_INT 5
49841: PUSH
49842: LD_INT 27
49844: PUSH
49845: LD_INT 44
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: LIST
49852: IN
49853: IFFALSE 49874
// points := [ 14 , 50 , 16 ] ;
49855: LD_ADDR_VAR 0 9
49859: PUSH
49860: LD_INT 14
49862: PUSH
49863: LD_INT 50
49865: PUSH
49866: LD_INT 16
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: LIST
49873: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49874: LD_VAR 0 6
49878: PPUSH
49879: CALL_OW 264
49883: PUSH
49884: LD_INT 6
49886: PUSH
49887: LD_INT 46
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: IN
49894: IFFALSE 49915
// points := [ 32 , 120 , 70 ] ;
49896: LD_ADDR_VAR 0 9
49900: PUSH
49901: LD_INT 32
49903: PUSH
49904: LD_INT 120
49906: PUSH
49907: LD_INT 70
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: LIST
49914: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49915: LD_VAR 0 6
49919: PPUSH
49920: CALL_OW 264
49924: PUSH
49925: LD_INT 7
49927: PUSH
49928: LD_INT 28
49930: PUSH
49931: LD_INT 45
49933: PUSH
49934: LD_INT 92
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: IN
49943: IFFALSE 49964
// points := [ 35 , 20 , 45 ] ;
49945: LD_ADDR_VAR 0 9
49949: PUSH
49950: LD_INT 35
49952: PUSH
49953: LD_INT 20
49955: PUSH
49956: LD_INT 45
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: LIST
49963: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49964: LD_VAR 0 6
49968: PPUSH
49969: CALL_OW 264
49973: PUSH
49974: LD_INT 47
49976: PUSH
49977: EMPTY
49978: LIST
49979: IN
49980: IFFALSE 50001
// points := [ 67 , 45 , 75 ] ;
49982: LD_ADDR_VAR 0 9
49986: PUSH
49987: LD_INT 67
49989: PUSH
49990: LD_INT 45
49992: PUSH
49993: LD_INT 75
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: LIST
50000: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50001: LD_VAR 0 6
50005: PPUSH
50006: CALL_OW 264
50010: PUSH
50011: LD_INT 26
50013: PUSH
50014: EMPTY
50015: LIST
50016: IN
50017: IFFALSE 50038
// points := [ 120 , 30 , 80 ] ;
50019: LD_ADDR_VAR 0 9
50023: PUSH
50024: LD_INT 120
50026: PUSH
50027: LD_INT 30
50029: PUSH
50030: LD_INT 80
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: LIST
50037: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50038: LD_VAR 0 6
50042: PPUSH
50043: CALL_OW 264
50047: PUSH
50048: LD_INT 22
50050: PUSH
50051: EMPTY
50052: LIST
50053: IN
50054: IFFALSE 50075
// points := [ 40 , 1 , 1 ] ;
50056: LD_ADDR_VAR 0 9
50060: PUSH
50061: LD_INT 40
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: LIST
50074: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50075: LD_VAR 0 6
50079: PPUSH
50080: CALL_OW 264
50084: PUSH
50085: LD_INT 29
50087: PUSH
50088: EMPTY
50089: LIST
50090: IN
50091: IFFALSE 50112
// points := [ 70 , 200 , 400 ] ;
50093: LD_ADDR_VAR 0 9
50097: PUSH
50098: LD_INT 70
50100: PUSH
50101: LD_INT 200
50103: PUSH
50104: LD_INT 400
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: LIST
50111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50112: LD_VAR 0 6
50116: PPUSH
50117: CALL_OW 264
50121: PUSH
50122: LD_INT 14
50124: PUSH
50125: LD_INT 53
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: IN
50132: IFFALSE 50153
// points := [ 40 , 10 , 20 ] ;
50134: LD_ADDR_VAR 0 9
50138: PUSH
50139: LD_INT 40
50141: PUSH
50142: LD_INT 10
50144: PUSH
50145: LD_INT 20
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: LIST
50152: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50153: LD_VAR 0 6
50157: PPUSH
50158: CALL_OW 264
50162: PUSH
50163: LD_INT 9
50165: PUSH
50166: EMPTY
50167: LIST
50168: IN
50169: IFFALSE 50190
// points := [ 5 , 70 , 20 ] ;
50171: LD_ADDR_VAR 0 9
50175: PUSH
50176: LD_INT 5
50178: PUSH
50179: LD_INT 70
50181: PUSH
50182: LD_INT 20
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: LIST
50189: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50190: LD_VAR 0 6
50194: PPUSH
50195: CALL_OW 264
50199: PUSH
50200: LD_INT 10
50202: PUSH
50203: EMPTY
50204: LIST
50205: IN
50206: IFFALSE 50227
// points := [ 35 , 110 , 70 ] ;
50208: LD_ADDR_VAR 0 9
50212: PUSH
50213: LD_INT 35
50215: PUSH
50216: LD_INT 110
50218: PUSH
50219: LD_INT 70
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: LIST
50226: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50227: LD_VAR 0 6
50231: PPUSH
50232: CALL_OW 265
50236: PUSH
50237: LD_INT 25
50239: EQUAL
50240: IFFALSE 50261
// points := [ 80 , 65 , 100 ] ;
50242: LD_ADDR_VAR 0 9
50246: PUSH
50247: LD_INT 80
50249: PUSH
50250: LD_INT 65
50252: PUSH
50253: LD_INT 100
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: LIST
50260: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50261: LD_VAR 0 6
50265: PPUSH
50266: CALL_OW 263
50270: PUSH
50271: LD_INT 1
50273: EQUAL
50274: IFFALSE 50309
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50276: LD_ADDR_VAR 0 10
50280: PUSH
50281: LD_VAR 0 10
50285: PUSH
50286: LD_VAR 0 6
50290: PPUSH
50291: CALL_OW 311
50295: PPUSH
50296: LD_INT 3
50298: PPUSH
50299: CALL_OW 259
50303: PUSH
50304: LD_INT 4
50306: MUL
50307: MUL
50308: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50309: LD_VAR 0 6
50313: PPUSH
50314: CALL_OW 263
50318: PUSH
50319: LD_INT 2
50321: EQUAL
50322: IFFALSE 50373
// begin j := IsControledBy ( i ) ;
50324: LD_ADDR_VAR 0 7
50328: PUSH
50329: LD_VAR 0 6
50333: PPUSH
50334: CALL_OW 312
50338: ST_TO_ADDR
// if j then
50339: LD_VAR 0 7
50343: IFFALSE 50373
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
50345: LD_ADDR_VAR 0 10
50349: PUSH
50350: LD_VAR 0 10
50354: PUSH
50355: LD_VAR 0 7
50359: PPUSH
50360: LD_INT 3
50362: PPUSH
50363: CALL_OW 259
50367: PUSH
50368: LD_INT 3
50370: MUL
50371: MUL
50372: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
50373: LD_VAR 0 6
50377: PPUSH
50378: CALL_OW 264
50382: PUSH
50383: LD_INT 5
50385: PUSH
50386: LD_INT 6
50388: PUSH
50389: LD_INT 46
50391: PUSH
50392: LD_INT 44
50394: PUSH
50395: LD_INT 47
50397: PUSH
50398: LD_INT 45
50400: PUSH
50401: LD_INT 28
50403: PUSH
50404: LD_INT 7
50406: PUSH
50407: LD_INT 27
50409: PUSH
50410: LD_INT 29
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: IN
50425: PUSH
50426: LD_VAR 0 1
50430: PPUSH
50431: LD_INT 52
50433: PPUSH
50434: CALL_OW 321
50438: PUSH
50439: LD_INT 2
50441: EQUAL
50442: AND
50443: IFFALSE 50460
// bpoints := bpoints * 1.2 ;
50445: LD_ADDR_VAR 0 10
50449: PUSH
50450: LD_VAR 0 10
50454: PUSH
50455: LD_REAL  1.20000000000000E+0000
50458: MUL
50459: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
50460: LD_VAR 0 6
50464: PPUSH
50465: CALL_OW 264
50469: PUSH
50470: LD_INT 6
50472: PUSH
50473: LD_INT 46
50475: PUSH
50476: LD_INT 47
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: LIST
50483: IN
50484: IFFALSE 50501
// bpoints := bpoints * 1.2 ;
50486: LD_ADDR_VAR 0 10
50490: PUSH
50491: LD_VAR 0 10
50495: PUSH
50496: LD_REAL  1.20000000000000E+0000
50499: MUL
50500: ST_TO_ADDR
// end ; unit_building :
50501: GO 50515
50503: LD_INT 3
50505: DOUBLE
50506: EQUAL
50507: IFTRUE 50511
50509: GO 50514
50511: POP
// ; end ;
50512: GO 50515
50514: POP
// for j = 1 to 3 do
50515: LD_ADDR_VAR 0 7
50519: PUSH
50520: DOUBLE
50521: LD_INT 1
50523: DEC
50524: ST_TO_ADDR
50525: LD_INT 3
50527: PUSH
50528: FOR_TO
50529: IFFALSE 50582
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
50531: LD_ADDR_VAR 0 5
50535: PUSH
50536: LD_VAR 0 5
50540: PPUSH
50541: LD_VAR 0 7
50545: PPUSH
50546: LD_VAR 0 5
50550: PUSH
50551: LD_VAR 0 7
50555: ARRAY
50556: PUSH
50557: LD_VAR 0 9
50561: PUSH
50562: LD_VAR 0 7
50566: ARRAY
50567: PUSH
50568: LD_VAR 0 10
50572: MUL
50573: PLUS
50574: PPUSH
50575: CALL_OW 1
50579: ST_TO_ADDR
50580: GO 50528
50582: POP
50583: POP
// end ;
50584: GO 49063
50586: POP
50587: POP
// result := Replace ( result , 4 , tmp ) ;
50588: LD_ADDR_VAR 0 5
50592: PUSH
50593: LD_VAR 0 5
50597: PPUSH
50598: LD_INT 4
50600: PPUSH
50601: LD_VAR 0 8
50605: PPUSH
50606: CALL_OW 1
50610: ST_TO_ADDR
// end ;
50611: LD_VAR 0 5
50615: RET
// export function DangerAtRange ( unit , range ) ; begin
50616: LD_INT 0
50618: PPUSH
// if not unit then
50619: LD_VAR 0 1
50623: NOT
50624: IFFALSE 50628
// exit ;
50626: GO 50673
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50628: LD_ADDR_VAR 0 3
50632: PUSH
50633: LD_VAR 0 1
50637: PPUSH
50638: CALL_OW 255
50642: PPUSH
50643: LD_VAR 0 1
50647: PPUSH
50648: CALL_OW 250
50652: PPUSH
50653: LD_VAR 0 1
50657: PPUSH
50658: CALL_OW 251
50662: PPUSH
50663: LD_VAR 0 2
50667: PPUSH
50668: CALL 48915 0 4
50672: ST_TO_ADDR
// end ;
50673: LD_VAR 0 3
50677: RET
// export function DangerInArea ( side , area ) ; begin
50678: LD_INT 0
50680: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50681: LD_ADDR_VAR 0 3
50685: PUSH
50686: LD_VAR 0 2
50690: PPUSH
50691: LD_INT 81
50693: PUSH
50694: LD_VAR 0 1
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PPUSH
50703: CALL_OW 70
50707: ST_TO_ADDR
// end ;
50708: LD_VAR 0 3
50712: RET
// export function IsExtension ( b ) ; begin
50713: LD_INT 0
50715: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50716: LD_ADDR_VAR 0 2
50720: PUSH
50721: LD_VAR 0 1
50725: PUSH
50726: LD_INT 23
50728: PUSH
50729: LD_INT 20
50731: PUSH
50732: LD_INT 22
50734: PUSH
50735: LD_INT 17
50737: PUSH
50738: LD_INT 24
50740: PUSH
50741: LD_INT 21
50743: PUSH
50744: LD_INT 19
50746: PUSH
50747: LD_INT 16
50749: PUSH
50750: LD_INT 25
50752: PUSH
50753: LD_INT 18
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: IN
50768: ST_TO_ADDR
// end ;
50769: LD_VAR 0 2
50773: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50774: LD_INT 0
50776: PPUSH
50777: PPUSH
50778: PPUSH
// result := [ ] ;
50779: LD_ADDR_VAR 0 4
50783: PUSH
50784: EMPTY
50785: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50786: LD_ADDR_VAR 0 5
50790: PUSH
50791: LD_VAR 0 2
50795: PPUSH
50796: LD_INT 21
50798: PUSH
50799: LD_INT 3
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PPUSH
50806: CALL_OW 70
50810: ST_TO_ADDR
// if not tmp then
50811: LD_VAR 0 5
50815: NOT
50816: IFFALSE 50820
// exit ;
50818: GO 50884
// if checkLink then
50820: LD_VAR 0 3
50824: IFFALSE 50874
// begin for i in tmp do
50826: LD_ADDR_VAR 0 6
50830: PUSH
50831: LD_VAR 0 5
50835: PUSH
50836: FOR_IN
50837: IFFALSE 50872
// if GetBase ( i ) <> base then
50839: LD_VAR 0 6
50843: PPUSH
50844: CALL_OW 274
50848: PUSH
50849: LD_VAR 0 1
50853: NONEQUAL
50854: IFFALSE 50870
// ComLinkToBase ( base , i ) ;
50856: LD_VAR 0 1
50860: PPUSH
50861: LD_VAR 0 6
50865: PPUSH
50866: CALL_OW 169
50870: GO 50836
50872: POP
50873: POP
// end ; result := tmp ;
50874: LD_ADDR_VAR 0 4
50878: PUSH
50879: LD_VAR 0 5
50883: ST_TO_ADDR
// end ;
50884: LD_VAR 0 4
50888: RET
// export function ComComplete ( units , b ) ; var i ; begin
50889: LD_INT 0
50891: PPUSH
50892: PPUSH
// if not units then
50893: LD_VAR 0 1
50897: NOT
50898: IFFALSE 50902
// exit ;
50900: GO 50992
// for i in units do
50902: LD_ADDR_VAR 0 4
50906: PUSH
50907: LD_VAR 0 1
50911: PUSH
50912: FOR_IN
50913: IFFALSE 50990
// if BuildingStatus ( b ) = bs_build then
50915: LD_VAR 0 2
50919: PPUSH
50920: CALL_OW 461
50924: PUSH
50925: LD_INT 1
50927: EQUAL
50928: IFFALSE 50988
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50930: LD_VAR 0 4
50934: PPUSH
50935: LD_STRING h
50937: PUSH
50938: LD_VAR 0 2
50942: PPUSH
50943: CALL_OW 250
50947: PUSH
50948: LD_VAR 0 2
50952: PPUSH
50953: CALL_OW 251
50957: PUSH
50958: LD_VAR 0 2
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: PUSH
50981: EMPTY
50982: LIST
50983: PPUSH
50984: CALL_OW 446
50988: GO 50912
50990: POP
50991: POP
// end ;
50992: LD_VAR 0 3
50996: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50997: LD_INT 0
50999: PPUSH
51000: PPUSH
51001: PPUSH
51002: PPUSH
51003: PPUSH
51004: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
51005: LD_VAR 0 1
51009: NOT
51010: PUSH
51011: LD_VAR 0 1
51015: PPUSH
51016: CALL_OW 263
51020: PUSH
51021: LD_INT 2
51023: NONEQUAL
51024: OR
51025: IFFALSE 51029
// exit ;
51027: GO 51345
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51029: LD_ADDR_VAR 0 6
51033: PUSH
51034: LD_INT 22
51036: PUSH
51037: LD_VAR 0 1
51041: PPUSH
51042: CALL_OW 255
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: LD_INT 30
51056: PUSH
51057: LD_INT 36
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 34
51066: PUSH
51067: LD_INT 31
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: LIST
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PPUSH
51083: CALL_OW 69
51087: ST_TO_ADDR
// if not tmp then
51088: LD_VAR 0 6
51092: NOT
51093: IFFALSE 51097
// exit ;
51095: GO 51345
// result := [ ] ;
51097: LD_ADDR_VAR 0 2
51101: PUSH
51102: EMPTY
51103: ST_TO_ADDR
// for i in tmp do
51104: LD_ADDR_VAR 0 3
51108: PUSH
51109: LD_VAR 0 6
51113: PUSH
51114: FOR_IN
51115: IFFALSE 51186
// begin t := UnitsInside ( i ) ;
51117: LD_ADDR_VAR 0 4
51121: PUSH
51122: LD_VAR 0 3
51126: PPUSH
51127: CALL_OW 313
51131: ST_TO_ADDR
// if t then
51132: LD_VAR 0 4
51136: IFFALSE 51184
// for j in t do
51138: LD_ADDR_VAR 0 7
51142: PUSH
51143: LD_VAR 0 4
51147: PUSH
51148: FOR_IN
51149: IFFALSE 51182
// result := Replace ( result , result + 1 , j ) ;
51151: LD_ADDR_VAR 0 2
51155: PUSH
51156: LD_VAR 0 2
51160: PPUSH
51161: LD_VAR 0 2
51165: PUSH
51166: LD_INT 1
51168: PLUS
51169: PPUSH
51170: LD_VAR 0 7
51174: PPUSH
51175: CALL_OW 1
51179: ST_TO_ADDR
51180: GO 51148
51182: POP
51183: POP
// end ;
51184: GO 51114
51186: POP
51187: POP
// if not result then
51188: LD_VAR 0 2
51192: NOT
51193: IFFALSE 51197
// exit ;
51195: GO 51345
// mech := result [ 1 ] ;
51197: LD_ADDR_VAR 0 5
51201: PUSH
51202: LD_VAR 0 2
51206: PUSH
51207: LD_INT 1
51209: ARRAY
51210: ST_TO_ADDR
// if result > 1 then
51211: LD_VAR 0 2
51215: PUSH
51216: LD_INT 1
51218: GREATER
51219: IFFALSE 51331
// begin for i = 2 to result do
51221: LD_ADDR_VAR 0 3
51225: PUSH
51226: DOUBLE
51227: LD_INT 2
51229: DEC
51230: ST_TO_ADDR
51231: LD_VAR 0 2
51235: PUSH
51236: FOR_TO
51237: IFFALSE 51329
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51239: LD_ADDR_VAR 0 4
51243: PUSH
51244: LD_VAR 0 2
51248: PUSH
51249: LD_VAR 0 3
51253: ARRAY
51254: PPUSH
51255: LD_INT 3
51257: PPUSH
51258: CALL_OW 259
51262: PUSH
51263: LD_VAR 0 2
51267: PUSH
51268: LD_VAR 0 3
51272: ARRAY
51273: PPUSH
51274: CALL_OW 432
51278: MINUS
51279: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51280: LD_VAR 0 4
51284: PUSH
51285: LD_VAR 0 5
51289: PPUSH
51290: LD_INT 3
51292: PPUSH
51293: CALL_OW 259
51297: PUSH
51298: LD_VAR 0 5
51302: PPUSH
51303: CALL_OW 432
51307: MINUS
51308: GREATEREQUAL
51309: IFFALSE 51327
// mech := result [ i ] ;
51311: LD_ADDR_VAR 0 5
51315: PUSH
51316: LD_VAR 0 2
51320: PUSH
51321: LD_VAR 0 3
51325: ARRAY
51326: ST_TO_ADDR
// end ;
51327: GO 51236
51329: POP
51330: POP
// end ; ComLinkTo ( vehicle , mech ) ;
51331: LD_VAR 0 1
51335: PPUSH
51336: LD_VAR 0 5
51340: PPUSH
51341: CALL_OW 135
// end ;
51345: LD_VAR 0 2
51349: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
51350: LD_INT 0
51352: PPUSH
51353: PPUSH
51354: PPUSH
51355: PPUSH
51356: PPUSH
51357: PPUSH
51358: PPUSH
51359: PPUSH
51360: PPUSH
51361: PPUSH
51362: PPUSH
51363: PPUSH
51364: PPUSH
// result := [ ] ;
51365: LD_ADDR_VAR 0 7
51369: PUSH
51370: EMPTY
51371: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
51372: LD_VAR 0 1
51376: PPUSH
51377: CALL_OW 266
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: IN
51392: NOT
51393: IFFALSE 51397
// exit ;
51395: GO 53031
// if name then
51397: LD_VAR 0 3
51401: IFFALSE 51417
// SetBName ( base_dep , name ) ;
51403: LD_VAR 0 1
51407: PPUSH
51408: LD_VAR 0 3
51412: PPUSH
51413: CALL_OW 500
// base := GetBase ( base_dep ) ;
51417: LD_ADDR_VAR 0 15
51421: PUSH
51422: LD_VAR 0 1
51426: PPUSH
51427: CALL_OW 274
51431: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
51432: LD_ADDR_VAR 0 16
51436: PUSH
51437: LD_VAR 0 1
51441: PPUSH
51442: CALL_OW 255
51446: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
51447: LD_ADDR_VAR 0 17
51451: PUSH
51452: LD_VAR 0 1
51456: PPUSH
51457: CALL_OW 248
51461: ST_TO_ADDR
// if sources then
51462: LD_VAR 0 5
51466: IFFALSE 51513
// for i = 1 to 3 do
51468: LD_ADDR_VAR 0 8
51472: PUSH
51473: DOUBLE
51474: LD_INT 1
51476: DEC
51477: ST_TO_ADDR
51478: LD_INT 3
51480: PUSH
51481: FOR_TO
51482: IFFALSE 51511
// AddResourceType ( base , i , sources [ i ] ) ;
51484: LD_VAR 0 15
51488: PPUSH
51489: LD_VAR 0 8
51493: PPUSH
51494: LD_VAR 0 5
51498: PUSH
51499: LD_VAR 0 8
51503: ARRAY
51504: PPUSH
51505: CALL_OW 276
51509: GO 51481
51511: POP
51512: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
51513: LD_ADDR_VAR 0 18
51517: PUSH
51518: LD_VAR 0 15
51522: PPUSH
51523: LD_VAR 0 2
51527: PPUSH
51528: LD_INT 1
51530: PPUSH
51531: CALL 50774 0 3
51535: ST_TO_ADDR
// InitHc ;
51536: CALL_OW 19
// InitUc ;
51540: CALL_OW 18
// uc_side := side ;
51544: LD_ADDR_OWVAR 20
51548: PUSH
51549: LD_VAR 0 16
51553: ST_TO_ADDR
// uc_nation := nation ;
51554: LD_ADDR_OWVAR 21
51558: PUSH
51559: LD_VAR 0 17
51563: ST_TO_ADDR
// if buildings then
51564: LD_VAR 0 18
51568: IFFALSE 52890
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51570: LD_ADDR_VAR 0 19
51574: PUSH
51575: LD_VAR 0 18
51579: PPUSH
51580: LD_INT 2
51582: PUSH
51583: LD_INT 30
51585: PUSH
51586: LD_INT 29
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 30
51595: PUSH
51596: LD_INT 30
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: LIST
51607: PPUSH
51608: CALL_OW 72
51612: ST_TO_ADDR
// if tmp then
51613: LD_VAR 0 19
51617: IFFALSE 51665
// for i in tmp do
51619: LD_ADDR_VAR 0 8
51623: PUSH
51624: LD_VAR 0 19
51628: PUSH
51629: FOR_IN
51630: IFFALSE 51663
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51632: LD_VAR 0 8
51636: PPUSH
51637: CALL_OW 250
51641: PPUSH
51642: LD_VAR 0 8
51646: PPUSH
51647: CALL_OW 251
51651: PPUSH
51652: LD_VAR 0 16
51656: PPUSH
51657: CALL_OW 441
51661: GO 51629
51663: POP
51664: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51665: LD_VAR 0 18
51669: PPUSH
51670: LD_INT 2
51672: PUSH
51673: LD_INT 30
51675: PUSH
51676: LD_INT 32
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 30
51685: PUSH
51686: LD_INT 33
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: LIST
51697: PPUSH
51698: CALL_OW 72
51702: IFFALSE 51790
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51704: LD_ADDR_VAR 0 8
51708: PUSH
51709: LD_VAR 0 18
51713: PPUSH
51714: LD_INT 2
51716: PUSH
51717: LD_INT 30
51719: PUSH
51720: LD_INT 32
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 30
51729: PUSH
51730: LD_INT 33
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: LIST
51741: PPUSH
51742: CALL_OW 72
51746: PUSH
51747: FOR_IN
51748: IFFALSE 51788
// begin if not GetBWeapon ( i ) then
51750: LD_VAR 0 8
51754: PPUSH
51755: CALL_OW 269
51759: NOT
51760: IFFALSE 51786
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51762: LD_VAR 0 8
51766: PPUSH
51767: LD_VAR 0 8
51771: PPUSH
51772: LD_VAR 0 2
51776: PPUSH
51777: CALL 53036 0 2
51781: PPUSH
51782: CALL_OW 431
// end ;
51786: GO 51747
51788: POP
51789: POP
// end ; for i = 1 to personel do
51790: LD_ADDR_VAR 0 8
51794: PUSH
51795: DOUBLE
51796: LD_INT 1
51798: DEC
51799: ST_TO_ADDR
51800: LD_VAR 0 6
51804: PUSH
51805: FOR_TO
51806: IFFALSE 52870
// begin if i > 4 then
51808: LD_VAR 0 8
51812: PUSH
51813: LD_INT 4
51815: GREATER
51816: IFFALSE 51820
// break ;
51818: GO 52870
// case i of 1 :
51820: LD_VAR 0 8
51824: PUSH
51825: LD_INT 1
51827: DOUBLE
51828: EQUAL
51829: IFTRUE 51833
51831: GO 51913
51833: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51834: LD_ADDR_VAR 0 12
51838: PUSH
51839: LD_VAR 0 18
51843: PPUSH
51844: LD_INT 22
51846: PUSH
51847: LD_VAR 0 16
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 58
51858: PUSH
51859: EMPTY
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: LD_INT 30
51867: PUSH
51868: LD_INT 32
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 30
51877: PUSH
51878: LD_INT 4
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 30
51887: PUSH
51888: LD_INT 5
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: LIST
51905: PPUSH
51906: CALL_OW 72
51910: ST_TO_ADDR
51911: GO 52135
51913: LD_INT 2
51915: DOUBLE
51916: EQUAL
51917: IFTRUE 51921
51919: GO 51983
51921: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51922: LD_ADDR_VAR 0 12
51926: PUSH
51927: LD_VAR 0 18
51931: PPUSH
51932: LD_INT 22
51934: PUSH
51935: LD_VAR 0 16
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: LD_INT 30
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 30
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: LIST
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PPUSH
51976: CALL_OW 72
51980: ST_TO_ADDR
51981: GO 52135
51983: LD_INT 3
51985: DOUBLE
51986: EQUAL
51987: IFTRUE 51991
51989: GO 52053
51991: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51992: LD_ADDR_VAR 0 12
51996: PUSH
51997: LD_VAR 0 18
52001: PPUSH
52002: LD_INT 22
52004: PUSH
52005: LD_VAR 0 16
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 2
52016: PUSH
52017: LD_INT 30
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 30
52029: PUSH
52030: LD_INT 3
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PPUSH
52046: CALL_OW 72
52050: ST_TO_ADDR
52051: GO 52135
52053: LD_INT 4
52055: DOUBLE
52056: EQUAL
52057: IFTRUE 52061
52059: GO 52134
52061: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52062: LD_ADDR_VAR 0 12
52066: PUSH
52067: LD_VAR 0 18
52071: PPUSH
52072: LD_INT 22
52074: PUSH
52075: LD_VAR 0 16
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: LD_INT 30
52089: PUSH
52090: LD_INT 6
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 30
52099: PUSH
52100: LD_INT 7
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 30
52109: PUSH
52110: LD_INT 8
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PPUSH
52127: CALL_OW 72
52131: ST_TO_ADDR
52132: GO 52135
52134: POP
// if i = 1 then
52135: LD_VAR 0 8
52139: PUSH
52140: LD_INT 1
52142: EQUAL
52143: IFFALSE 52254
// begin tmp := [ ] ;
52145: LD_ADDR_VAR 0 19
52149: PUSH
52150: EMPTY
52151: ST_TO_ADDR
// for j in f do
52152: LD_ADDR_VAR 0 9
52156: PUSH
52157: LD_VAR 0 12
52161: PUSH
52162: FOR_IN
52163: IFFALSE 52236
// if GetBType ( j ) = b_bunker then
52165: LD_VAR 0 9
52169: PPUSH
52170: CALL_OW 266
52174: PUSH
52175: LD_INT 32
52177: EQUAL
52178: IFFALSE 52205
// tmp := Insert ( tmp , 1 , j ) else
52180: LD_ADDR_VAR 0 19
52184: PUSH
52185: LD_VAR 0 19
52189: PPUSH
52190: LD_INT 1
52192: PPUSH
52193: LD_VAR 0 9
52197: PPUSH
52198: CALL_OW 2
52202: ST_TO_ADDR
52203: GO 52234
// tmp := Insert ( tmp , tmp + 1 , j ) ;
52205: LD_ADDR_VAR 0 19
52209: PUSH
52210: LD_VAR 0 19
52214: PPUSH
52215: LD_VAR 0 19
52219: PUSH
52220: LD_INT 1
52222: PLUS
52223: PPUSH
52224: LD_VAR 0 9
52228: PPUSH
52229: CALL_OW 2
52233: ST_TO_ADDR
52234: GO 52162
52236: POP
52237: POP
// if tmp then
52238: LD_VAR 0 19
52242: IFFALSE 52254
// f := tmp ;
52244: LD_ADDR_VAR 0 12
52248: PUSH
52249: LD_VAR 0 19
52253: ST_TO_ADDR
// end ; x := personel [ i ] ;
52254: LD_ADDR_VAR 0 13
52258: PUSH
52259: LD_VAR 0 6
52263: PUSH
52264: LD_VAR 0 8
52268: ARRAY
52269: ST_TO_ADDR
// if x = - 1 then
52270: LD_VAR 0 13
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: EQUAL
52279: IFFALSE 52488
// begin for j in f do
52281: LD_ADDR_VAR 0 9
52285: PUSH
52286: LD_VAR 0 12
52290: PUSH
52291: FOR_IN
52292: IFFALSE 52484
// repeat InitHc ;
52294: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52298: LD_VAR 0 9
52302: PPUSH
52303: CALL_OW 266
52307: PUSH
52308: LD_INT 5
52310: EQUAL
52311: IFFALSE 52381
// begin if UnitsInside ( j ) < 3 then
52313: LD_VAR 0 9
52317: PPUSH
52318: CALL_OW 313
52322: PUSH
52323: LD_INT 3
52325: LESS
52326: IFFALSE 52362
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52328: LD_INT 0
52330: PPUSH
52331: LD_INT 5
52333: PUSH
52334: LD_INT 8
52336: PUSH
52337: LD_INT 9
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: PUSH
52345: LD_VAR 0 17
52349: ARRAY
52350: PPUSH
52351: LD_VAR 0 4
52355: PPUSH
52356: CALL_OW 380
52360: GO 52379
// PrepareHuman ( false , i , skill ) ;
52362: LD_INT 0
52364: PPUSH
52365: LD_VAR 0 8
52369: PPUSH
52370: LD_VAR 0 4
52374: PPUSH
52375: CALL_OW 380
// end else
52379: GO 52398
// PrepareHuman ( false , i , skill ) ;
52381: LD_INT 0
52383: PPUSH
52384: LD_VAR 0 8
52388: PPUSH
52389: LD_VAR 0 4
52393: PPUSH
52394: CALL_OW 380
// un := CreateHuman ;
52398: LD_ADDR_VAR 0 14
52402: PUSH
52403: CALL_OW 44
52407: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52408: LD_ADDR_VAR 0 7
52412: PUSH
52413: LD_VAR 0 7
52417: PPUSH
52418: LD_INT 1
52420: PPUSH
52421: LD_VAR 0 14
52425: PPUSH
52426: CALL_OW 2
52430: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
52431: LD_VAR 0 14
52435: PPUSH
52436: LD_VAR 0 9
52440: PPUSH
52441: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
52445: LD_VAR 0 9
52449: PPUSH
52450: CALL_OW 313
52454: PUSH
52455: LD_INT 6
52457: EQUAL
52458: PUSH
52459: LD_VAR 0 9
52463: PPUSH
52464: CALL_OW 266
52468: PUSH
52469: LD_INT 32
52471: PUSH
52472: LD_INT 31
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: IN
52479: OR
52480: IFFALSE 52294
52482: GO 52291
52484: POP
52485: POP
// end else
52486: GO 52868
// for j = 1 to x do
52488: LD_ADDR_VAR 0 9
52492: PUSH
52493: DOUBLE
52494: LD_INT 1
52496: DEC
52497: ST_TO_ADDR
52498: LD_VAR 0 13
52502: PUSH
52503: FOR_TO
52504: IFFALSE 52866
// begin InitHc ;
52506: CALL_OW 19
// if not f then
52510: LD_VAR 0 12
52514: NOT
52515: IFFALSE 52604
// begin PrepareHuman ( false , i , skill ) ;
52517: LD_INT 0
52519: PPUSH
52520: LD_VAR 0 8
52524: PPUSH
52525: LD_VAR 0 4
52529: PPUSH
52530: CALL_OW 380
// un := CreateHuman ;
52534: LD_ADDR_VAR 0 14
52538: PUSH
52539: CALL_OW 44
52543: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52544: LD_ADDR_VAR 0 7
52548: PUSH
52549: LD_VAR 0 7
52553: PPUSH
52554: LD_INT 1
52556: PPUSH
52557: LD_VAR 0 14
52561: PPUSH
52562: CALL_OW 2
52566: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52567: LD_VAR 0 14
52571: PPUSH
52572: LD_VAR 0 1
52576: PPUSH
52577: CALL_OW 250
52581: PPUSH
52582: LD_VAR 0 1
52586: PPUSH
52587: CALL_OW 251
52591: PPUSH
52592: LD_INT 10
52594: PPUSH
52595: LD_INT 0
52597: PPUSH
52598: CALL_OW 50
// continue ;
52602: GO 52503
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52604: LD_VAR 0 12
52608: PUSH
52609: LD_INT 1
52611: ARRAY
52612: PPUSH
52613: CALL_OW 313
52617: PUSH
52618: LD_VAR 0 12
52622: PUSH
52623: LD_INT 1
52625: ARRAY
52626: PPUSH
52627: CALL_OW 266
52631: PUSH
52632: LD_INT 32
52634: PUSH
52635: LD_INT 31
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: IN
52642: AND
52643: PUSH
52644: LD_VAR 0 12
52648: PUSH
52649: LD_INT 1
52651: ARRAY
52652: PPUSH
52653: CALL_OW 313
52657: PUSH
52658: LD_INT 6
52660: EQUAL
52661: OR
52662: IFFALSE 52682
// f := Delete ( f , 1 ) ;
52664: LD_ADDR_VAR 0 12
52668: PUSH
52669: LD_VAR 0 12
52673: PPUSH
52674: LD_INT 1
52676: PPUSH
52677: CALL_OW 3
52681: ST_TO_ADDR
// if not f then
52682: LD_VAR 0 12
52686: NOT
52687: IFFALSE 52705
// begin x := x + 2 ;
52689: LD_ADDR_VAR 0 13
52693: PUSH
52694: LD_VAR 0 13
52698: PUSH
52699: LD_INT 2
52701: PLUS
52702: ST_TO_ADDR
// continue ;
52703: GO 52503
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52705: LD_VAR 0 12
52709: PUSH
52710: LD_INT 1
52712: ARRAY
52713: PPUSH
52714: CALL_OW 266
52718: PUSH
52719: LD_INT 5
52721: EQUAL
52722: IFFALSE 52796
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52724: LD_VAR 0 12
52728: PUSH
52729: LD_INT 1
52731: ARRAY
52732: PPUSH
52733: CALL_OW 313
52737: PUSH
52738: LD_INT 3
52740: LESS
52741: IFFALSE 52777
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52743: LD_INT 0
52745: PPUSH
52746: LD_INT 5
52748: PUSH
52749: LD_INT 8
52751: PUSH
52752: LD_INT 9
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: LIST
52759: PUSH
52760: LD_VAR 0 17
52764: ARRAY
52765: PPUSH
52766: LD_VAR 0 4
52770: PPUSH
52771: CALL_OW 380
52775: GO 52794
// PrepareHuman ( false , i , skill ) ;
52777: LD_INT 0
52779: PPUSH
52780: LD_VAR 0 8
52784: PPUSH
52785: LD_VAR 0 4
52789: PPUSH
52790: CALL_OW 380
// end else
52794: GO 52813
// PrepareHuman ( false , i , skill ) ;
52796: LD_INT 0
52798: PPUSH
52799: LD_VAR 0 8
52803: PPUSH
52804: LD_VAR 0 4
52808: PPUSH
52809: CALL_OW 380
// un := CreateHuman ;
52813: LD_ADDR_VAR 0 14
52817: PUSH
52818: CALL_OW 44
52822: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52823: LD_ADDR_VAR 0 7
52827: PUSH
52828: LD_VAR 0 7
52832: PPUSH
52833: LD_INT 1
52835: PPUSH
52836: LD_VAR 0 14
52840: PPUSH
52841: CALL_OW 2
52845: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52846: LD_VAR 0 14
52850: PPUSH
52851: LD_VAR 0 12
52855: PUSH
52856: LD_INT 1
52858: ARRAY
52859: PPUSH
52860: CALL_OW 52
// end ;
52864: GO 52503
52866: POP
52867: POP
// end ;
52868: GO 51805
52870: POP
52871: POP
// result := result ^ buildings ;
52872: LD_ADDR_VAR 0 7
52876: PUSH
52877: LD_VAR 0 7
52881: PUSH
52882: LD_VAR 0 18
52886: ADD
52887: ST_TO_ADDR
// end else
52888: GO 53031
// begin for i = 1 to personel do
52890: LD_ADDR_VAR 0 8
52894: PUSH
52895: DOUBLE
52896: LD_INT 1
52898: DEC
52899: ST_TO_ADDR
52900: LD_VAR 0 6
52904: PUSH
52905: FOR_TO
52906: IFFALSE 53029
// begin if i > 4 then
52908: LD_VAR 0 8
52912: PUSH
52913: LD_INT 4
52915: GREATER
52916: IFFALSE 52920
// break ;
52918: GO 53029
// x := personel [ i ] ;
52920: LD_ADDR_VAR 0 13
52924: PUSH
52925: LD_VAR 0 6
52929: PUSH
52930: LD_VAR 0 8
52934: ARRAY
52935: ST_TO_ADDR
// if x = - 1 then
52936: LD_VAR 0 13
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: EQUAL
52945: IFFALSE 52949
// continue ;
52947: GO 52905
// PrepareHuman ( false , i , skill ) ;
52949: LD_INT 0
52951: PPUSH
52952: LD_VAR 0 8
52956: PPUSH
52957: LD_VAR 0 4
52961: PPUSH
52962: CALL_OW 380
// un := CreateHuman ;
52966: LD_ADDR_VAR 0 14
52970: PUSH
52971: CALL_OW 44
52975: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52976: LD_VAR 0 14
52980: PPUSH
52981: LD_VAR 0 1
52985: PPUSH
52986: CALL_OW 250
52990: PPUSH
52991: LD_VAR 0 1
52995: PPUSH
52996: CALL_OW 251
53000: PPUSH
53001: LD_INT 10
53003: PPUSH
53004: LD_INT 0
53006: PPUSH
53007: CALL_OW 50
// result := result ^ un ;
53011: LD_ADDR_VAR 0 7
53015: PUSH
53016: LD_VAR 0 7
53020: PUSH
53021: LD_VAR 0 14
53025: ADD
53026: ST_TO_ADDR
// end ;
53027: GO 52905
53029: POP
53030: POP
// end ; end ;
53031: LD_VAR 0 7
53035: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53036: LD_INT 0
53038: PPUSH
53039: PPUSH
53040: PPUSH
53041: PPUSH
53042: PPUSH
53043: PPUSH
53044: PPUSH
53045: PPUSH
53046: PPUSH
53047: PPUSH
53048: PPUSH
53049: PPUSH
53050: PPUSH
53051: PPUSH
53052: PPUSH
53053: PPUSH
// result := false ;
53054: LD_ADDR_VAR 0 3
53058: PUSH
53059: LD_INT 0
53061: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53062: LD_VAR 0 1
53066: NOT
53067: PUSH
53068: LD_VAR 0 1
53072: PPUSH
53073: CALL_OW 266
53077: PUSH
53078: LD_INT 32
53080: PUSH
53081: LD_INT 33
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: IN
53088: NOT
53089: OR
53090: IFFALSE 53094
// exit ;
53092: GO 54203
// nat := GetNation ( tower ) ;
53094: LD_ADDR_VAR 0 12
53098: PUSH
53099: LD_VAR 0 1
53103: PPUSH
53104: CALL_OW 248
53108: ST_TO_ADDR
// side := GetSide ( tower ) ;
53109: LD_ADDR_VAR 0 16
53113: PUSH
53114: LD_VAR 0 1
53118: PPUSH
53119: CALL_OW 255
53123: ST_TO_ADDR
// x := GetX ( tower ) ;
53124: LD_ADDR_VAR 0 10
53128: PUSH
53129: LD_VAR 0 1
53133: PPUSH
53134: CALL_OW 250
53138: ST_TO_ADDR
// y := GetY ( tower ) ;
53139: LD_ADDR_VAR 0 11
53143: PUSH
53144: LD_VAR 0 1
53148: PPUSH
53149: CALL_OW 251
53153: ST_TO_ADDR
// if not x or not y then
53154: LD_VAR 0 10
53158: NOT
53159: PUSH
53160: LD_VAR 0 11
53164: NOT
53165: OR
53166: IFFALSE 53170
// exit ;
53168: GO 54203
// weapon := 0 ;
53170: LD_ADDR_VAR 0 18
53174: PUSH
53175: LD_INT 0
53177: ST_TO_ADDR
// fac_list := [ ] ;
53178: LD_ADDR_VAR 0 17
53182: PUSH
53183: EMPTY
53184: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
53185: LD_ADDR_VAR 0 6
53189: PUSH
53190: LD_VAR 0 1
53194: PPUSH
53195: CALL_OW 274
53199: PPUSH
53200: LD_VAR 0 2
53204: PPUSH
53205: LD_INT 0
53207: PPUSH
53208: CALL 50774 0 3
53212: PPUSH
53213: LD_INT 30
53215: PUSH
53216: LD_INT 3
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PPUSH
53223: CALL_OW 72
53227: ST_TO_ADDR
// if not factories then
53228: LD_VAR 0 6
53232: NOT
53233: IFFALSE 53237
// exit ;
53235: GO 54203
// for i in factories do
53237: LD_ADDR_VAR 0 8
53241: PUSH
53242: LD_VAR 0 6
53246: PUSH
53247: FOR_IN
53248: IFFALSE 53273
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53250: LD_ADDR_VAR 0 17
53254: PUSH
53255: LD_VAR 0 17
53259: PUSH
53260: LD_VAR 0 8
53264: PPUSH
53265: CALL_OW 478
53269: UNION
53270: ST_TO_ADDR
53271: GO 53247
53273: POP
53274: POP
// if not fac_list then
53275: LD_VAR 0 17
53279: NOT
53280: IFFALSE 53284
// exit ;
53282: GO 54203
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53284: LD_ADDR_VAR 0 5
53288: PUSH
53289: LD_INT 4
53291: PUSH
53292: LD_INT 5
53294: PUSH
53295: LD_INT 9
53297: PUSH
53298: LD_INT 10
53300: PUSH
53301: LD_INT 6
53303: PUSH
53304: LD_INT 7
53306: PUSH
53307: LD_INT 11
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 27
53321: PUSH
53322: LD_INT 28
53324: PUSH
53325: LD_INT 26
53327: PUSH
53328: LD_INT 30
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 43
53339: PUSH
53340: LD_INT 44
53342: PUSH
53343: LD_INT 46
53345: PUSH
53346: LD_INT 45
53348: PUSH
53349: LD_INT 47
53351: PUSH
53352: LD_INT 49
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: LIST
53367: PUSH
53368: LD_VAR 0 12
53372: ARRAY
53373: ST_TO_ADDR
// list := list isect fac_list ;
53374: LD_ADDR_VAR 0 5
53378: PUSH
53379: LD_VAR 0 5
53383: PUSH
53384: LD_VAR 0 17
53388: ISECT
53389: ST_TO_ADDR
// if not list then
53390: LD_VAR 0 5
53394: NOT
53395: IFFALSE 53399
// exit ;
53397: GO 54203
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
53399: LD_VAR 0 12
53403: PUSH
53404: LD_INT 3
53406: EQUAL
53407: PUSH
53408: LD_INT 49
53410: PUSH
53411: LD_VAR 0 5
53415: IN
53416: AND
53417: PUSH
53418: LD_INT 31
53420: PPUSH
53421: LD_VAR 0 16
53425: PPUSH
53426: CALL_OW 321
53430: PUSH
53431: LD_INT 2
53433: EQUAL
53434: AND
53435: IFFALSE 53495
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
53437: LD_INT 22
53439: PUSH
53440: LD_VAR 0 16
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 35
53451: PUSH
53452: LD_INT 49
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 91
53461: PUSH
53462: LD_VAR 0 1
53466: PUSH
53467: LD_INT 10
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: LIST
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: LIST
53479: PPUSH
53480: CALL_OW 69
53484: NOT
53485: IFFALSE 53495
// weapon := ru_time_lapser ;
53487: LD_ADDR_VAR 0 18
53491: PUSH
53492: LD_INT 49
53494: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
53495: LD_VAR 0 12
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: LD_INT 2
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: IN
53510: PUSH
53511: LD_INT 11
53513: PUSH
53514: LD_VAR 0 5
53518: IN
53519: PUSH
53520: LD_INT 30
53522: PUSH
53523: LD_VAR 0 5
53527: IN
53528: OR
53529: AND
53530: PUSH
53531: LD_INT 6
53533: PPUSH
53534: LD_VAR 0 16
53538: PPUSH
53539: CALL_OW 321
53543: PUSH
53544: LD_INT 2
53546: EQUAL
53547: AND
53548: IFFALSE 53713
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53550: LD_INT 22
53552: PUSH
53553: LD_VAR 0 16
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 2
53564: PUSH
53565: LD_INT 35
53567: PUSH
53568: LD_INT 11
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 35
53577: PUSH
53578: LD_INT 30
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 91
53592: PUSH
53593: LD_VAR 0 1
53597: PUSH
53598: LD_INT 18
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: LIST
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: LIST
53610: PPUSH
53611: CALL_OW 69
53615: NOT
53616: PUSH
53617: LD_INT 22
53619: PUSH
53620: LD_VAR 0 16
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 2
53631: PUSH
53632: LD_INT 30
53634: PUSH
53635: LD_INT 32
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 30
53644: PUSH
53645: LD_INT 33
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 91
53659: PUSH
53660: LD_VAR 0 1
53664: PUSH
53665: LD_INT 12
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: LIST
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: LIST
53677: PUSH
53678: EMPTY
53679: LIST
53680: PPUSH
53681: CALL_OW 69
53685: PUSH
53686: LD_INT 2
53688: GREATER
53689: AND
53690: IFFALSE 53713
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53692: LD_ADDR_VAR 0 18
53696: PUSH
53697: LD_INT 11
53699: PUSH
53700: LD_INT 30
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_VAR 0 12
53711: ARRAY
53712: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53713: LD_VAR 0 18
53717: NOT
53718: PUSH
53719: LD_INT 40
53721: PPUSH
53722: LD_VAR 0 16
53726: PPUSH
53727: CALL_OW 321
53731: PUSH
53732: LD_INT 2
53734: EQUAL
53735: AND
53736: PUSH
53737: LD_INT 7
53739: PUSH
53740: LD_VAR 0 5
53744: IN
53745: PUSH
53746: LD_INT 28
53748: PUSH
53749: LD_VAR 0 5
53753: IN
53754: OR
53755: PUSH
53756: LD_INT 45
53758: PUSH
53759: LD_VAR 0 5
53763: IN
53764: OR
53765: AND
53766: IFFALSE 54020
// begin hex := GetHexInfo ( x , y ) ;
53768: LD_ADDR_VAR 0 4
53772: PUSH
53773: LD_VAR 0 10
53777: PPUSH
53778: LD_VAR 0 11
53782: PPUSH
53783: CALL_OW 546
53787: ST_TO_ADDR
// if hex [ 1 ] then
53788: LD_VAR 0 4
53792: PUSH
53793: LD_INT 1
53795: ARRAY
53796: IFFALSE 53800
// exit ;
53798: GO 54203
// height := hex [ 2 ] ;
53800: LD_ADDR_VAR 0 15
53804: PUSH
53805: LD_VAR 0 4
53809: PUSH
53810: LD_INT 2
53812: ARRAY
53813: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53814: LD_ADDR_VAR 0 14
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: LD_INT 3
53827: PUSH
53828: LD_INT 5
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: ST_TO_ADDR
// for i in tmp do
53837: LD_ADDR_VAR 0 8
53841: PUSH
53842: LD_VAR 0 14
53846: PUSH
53847: FOR_IN
53848: IFFALSE 54018
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53850: LD_ADDR_VAR 0 9
53854: PUSH
53855: LD_VAR 0 10
53859: PPUSH
53860: LD_VAR 0 8
53864: PPUSH
53865: LD_INT 5
53867: PPUSH
53868: CALL_OW 272
53872: PUSH
53873: LD_VAR 0 11
53877: PPUSH
53878: LD_VAR 0 8
53882: PPUSH
53883: LD_INT 5
53885: PPUSH
53886: CALL_OW 273
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53895: LD_VAR 0 9
53899: PUSH
53900: LD_INT 1
53902: ARRAY
53903: PPUSH
53904: LD_VAR 0 9
53908: PUSH
53909: LD_INT 2
53911: ARRAY
53912: PPUSH
53913: CALL_OW 488
53917: IFFALSE 54016
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53919: LD_ADDR_VAR 0 4
53923: PUSH
53924: LD_VAR 0 9
53928: PUSH
53929: LD_INT 1
53931: ARRAY
53932: PPUSH
53933: LD_VAR 0 9
53937: PUSH
53938: LD_INT 2
53940: ARRAY
53941: PPUSH
53942: CALL_OW 546
53946: ST_TO_ADDR
// if hex [ 1 ] then
53947: LD_VAR 0 4
53951: PUSH
53952: LD_INT 1
53954: ARRAY
53955: IFFALSE 53959
// continue ;
53957: GO 53847
// h := hex [ 2 ] ;
53959: LD_ADDR_VAR 0 13
53963: PUSH
53964: LD_VAR 0 4
53968: PUSH
53969: LD_INT 2
53971: ARRAY
53972: ST_TO_ADDR
// if h + 7 < height then
53973: LD_VAR 0 13
53977: PUSH
53978: LD_INT 7
53980: PLUS
53981: PUSH
53982: LD_VAR 0 15
53986: LESS
53987: IFFALSE 54016
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53989: LD_ADDR_VAR 0 18
53993: PUSH
53994: LD_INT 7
53996: PUSH
53997: LD_INT 28
53999: PUSH
54000: LD_INT 45
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: LIST
54007: PUSH
54008: LD_VAR 0 12
54012: ARRAY
54013: ST_TO_ADDR
// break ;
54014: GO 54018
// end ; end ; end ;
54016: GO 53847
54018: POP
54019: POP
// end ; if not weapon then
54020: LD_VAR 0 18
54024: NOT
54025: IFFALSE 54085
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54027: LD_ADDR_VAR 0 5
54031: PUSH
54032: LD_VAR 0 5
54036: PUSH
54037: LD_INT 11
54039: PUSH
54040: LD_INT 30
54042: PUSH
54043: LD_INT 49
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: LIST
54050: DIFF
54051: ST_TO_ADDR
// if not list then
54052: LD_VAR 0 5
54056: NOT
54057: IFFALSE 54061
// exit ;
54059: GO 54203
// weapon := list [ rand ( 1 , list ) ] ;
54061: LD_ADDR_VAR 0 18
54065: PUSH
54066: LD_VAR 0 5
54070: PUSH
54071: LD_INT 1
54073: PPUSH
54074: LD_VAR 0 5
54078: PPUSH
54079: CALL_OW 12
54083: ARRAY
54084: ST_TO_ADDR
// end ; if weapon then
54085: LD_VAR 0 18
54089: IFFALSE 54203
// begin tmp := CostOfWeapon ( weapon ) ;
54091: LD_ADDR_VAR 0 14
54095: PUSH
54096: LD_VAR 0 18
54100: PPUSH
54101: CALL_OW 451
54105: ST_TO_ADDR
// j := GetBase ( tower ) ;
54106: LD_ADDR_VAR 0 9
54110: PUSH
54111: LD_VAR 0 1
54115: PPUSH
54116: CALL_OW 274
54120: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54121: LD_VAR 0 9
54125: PPUSH
54126: LD_INT 1
54128: PPUSH
54129: CALL_OW 275
54133: PUSH
54134: LD_VAR 0 14
54138: PUSH
54139: LD_INT 1
54141: ARRAY
54142: GREATEREQUAL
54143: PUSH
54144: LD_VAR 0 9
54148: PPUSH
54149: LD_INT 2
54151: PPUSH
54152: CALL_OW 275
54156: PUSH
54157: LD_VAR 0 14
54161: PUSH
54162: LD_INT 2
54164: ARRAY
54165: GREATEREQUAL
54166: AND
54167: PUSH
54168: LD_VAR 0 9
54172: PPUSH
54173: LD_INT 3
54175: PPUSH
54176: CALL_OW 275
54180: PUSH
54181: LD_VAR 0 14
54185: PUSH
54186: LD_INT 3
54188: ARRAY
54189: GREATEREQUAL
54190: AND
54191: IFFALSE 54203
// result := weapon ;
54193: LD_ADDR_VAR 0 3
54197: PUSH
54198: LD_VAR 0 18
54202: ST_TO_ADDR
// end ; end ;
54203: LD_VAR 0 3
54207: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54208: LD_INT 0
54210: PPUSH
54211: PPUSH
// result := true ;
54212: LD_ADDR_VAR 0 3
54216: PUSH
54217: LD_INT 1
54219: ST_TO_ADDR
// if array1 = array2 then
54220: LD_VAR 0 1
54224: PUSH
54225: LD_VAR 0 2
54229: EQUAL
54230: IFFALSE 54290
// begin for i = 1 to array1 do
54232: LD_ADDR_VAR 0 4
54236: PUSH
54237: DOUBLE
54238: LD_INT 1
54240: DEC
54241: ST_TO_ADDR
54242: LD_VAR 0 1
54246: PUSH
54247: FOR_TO
54248: IFFALSE 54286
// if array1 [ i ] <> array2 [ i ] then
54250: LD_VAR 0 1
54254: PUSH
54255: LD_VAR 0 4
54259: ARRAY
54260: PUSH
54261: LD_VAR 0 2
54265: PUSH
54266: LD_VAR 0 4
54270: ARRAY
54271: NONEQUAL
54272: IFFALSE 54284
// begin result := false ;
54274: LD_ADDR_VAR 0 3
54278: PUSH
54279: LD_INT 0
54281: ST_TO_ADDR
// break ;
54282: GO 54286
// end ;
54284: GO 54247
54286: POP
54287: POP
// end else
54288: GO 54298
// result := false ;
54290: LD_ADDR_VAR 0 3
54294: PUSH
54295: LD_INT 0
54297: ST_TO_ADDR
// end ;
54298: LD_VAR 0 3
54302: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54303: LD_INT 0
54305: PPUSH
54306: PPUSH
// if not array1 or not array2 then
54307: LD_VAR 0 1
54311: NOT
54312: PUSH
54313: LD_VAR 0 2
54317: NOT
54318: OR
54319: IFFALSE 54323
// exit ;
54321: GO 54387
// result := true ;
54323: LD_ADDR_VAR 0 3
54327: PUSH
54328: LD_INT 1
54330: ST_TO_ADDR
// for i = 1 to array1 do
54331: LD_ADDR_VAR 0 4
54335: PUSH
54336: DOUBLE
54337: LD_INT 1
54339: DEC
54340: ST_TO_ADDR
54341: LD_VAR 0 1
54345: PUSH
54346: FOR_TO
54347: IFFALSE 54385
// if array1 [ i ] <> array2 [ i ] then
54349: LD_VAR 0 1
54353: PUSH
54354: LD_VAR 0 4
54358: ARRAY
54359: PUSH
54360: LD_VAR 0 2
54364: PUSH
54365: LD_VAR 0 4
54369: ARRAY
54370: NONEQUAL
54371: IFFALSE 54383
// begin result := false ;
54373: LD_ADDR_VAR 0 3
54377: PUSH
54378: LD_INT 0
54380: ST_TO_ADDR
// break ;
54381: GO 54385
// end ;
54383: GO 54346
54385: POP
54386: POP
// end ;
54387: LD_VAR 0 3
54391: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
54392: LD_INT 0
54394: PPUSH
54395: PPUSH
54396: PPUSH
// pom := GetBase ( fac ) ;
54397: LD_ADDR_VAR 0 5
54401: PUSH
54402: LD_VAR 0 1
54406: PPUSH
54407: CALL_OW 274
54411: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
54412: LD_ADDR_VAR 0 4
54416: PUSH
54417: LD_VAR 0 2
54421: PUSH
54422: LD_INT 1
54424: ARRAY
54425: PPUSH
54426: LD_VAR 0 2
54430: PUSH
54431: LD_INT 2
54433: ARRAY
54434: PPUSH
54435: LD_VAR 0 2
54439: PUSH
54440: LD_INT 3
54442: ARRAY
54443: PPUSH
54444: LD_VAR 0 2
54448: PUSH
54449: LD_INT 4
54451: ARRAY
54452: PPUSH
54453: CALL_OW 449
54457: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54458: LD_ADDR_VAR 0 3
54462: PUSH
54463: LD_VAR 0 5
54467: PPUSH
54468: LD_INT 1
54470: PPUSH
54471: CALL_OW 275
54475: PUSH
54476: LD_VAR 0 4
54480: PUSH
54481: LD_INT 1
54483: ARRAY
54484: GREATEREQUAL
54485: PUSH
54486: LD_VAR 0 5
54490: PPUSH
54491: LD_INT 2
54493: PPUSH
54494: CALL_OW 275
54498: PUSH
54499: LD_VAR 0 4
54503: PUSH
54504: LD_INT 2
54506: ARRAY
54507: GREATEREQUAL
54508: AND
54509: PUSH
54510: LD_VAR 0 5
54514: PPUSH
54515: LD_INT 3
54517: PPUSH
54518: CALL_OW 275
54522: PUSH
54523: LD_VAR 0 4
54527: PUSH
54528: LD_INT 3
54530: ARRAY
54531: GREATEREQUAL
54532: AND
54533: ST_TO_ADDR
// end ;
54534: LD_VAR 0 3
54538: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54539: LD_INT 0
54541: PPUSH
54542: PPUSH
54543: PPUSH
54544: PPUSH
// pom := GetBase ( building ) ;
54545: LD_ADDR_VAR 0 3
54549: PUSH
54550: LD_VAR 0 1
54554: PPUSH
54555: CALL_OW 274
54559: ST_TO_ADDR
// if not pom then
54560: LD_VAR 0 3
54564: NOT
54565: IFFALSE 54569
// exit ;
54567: GO 54739
// btype := GetBType ( building ) ;
54569: LD_ADDR_VAR 0 5
54573: PUSH
54574: LD_VAR 0 1
54578: PPUSH
54579: CALL_OW 266
54583: ST_TO_ADDR
// if btype = b_armoury then
54584: LD_VAR 0 5
54588: PUSH
54589: LD_INT 4
54591: EQUAL
54592: IFFALSE 54602
// btype := b_barracks ;
54594: LD_ADDR_VAR 0 5
54598: PUSH
54599: LD_INT 5
54601: ST_TO_ADDR
// if btype = b_depot then
54602: LD_VAR 0 5
54606: PUSH
54607: LD_INT 0
54609: EQUAL
54610: IFFALSE 54620
// btype := b_warehouse ;
54612: LD_ADDR_VAR 0 5
54616: PUSH
54617: LD_INT 1
54619: ST_TO_ADDR
// if btype = b_workshop then
54620: LD_VAR 0 5
54624: PUSH
54625: LD_INT 2
54627: EQUAL
54628: IFFALSE 54638
// btype := b_factory ;
54630: LD_ADDR_VAR 0 5
54634: PUSH
54635: LD_INT 3
54637: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54638: LD_ADDR_VAR 0 4
54642: PUSH
54643: LD_VAR 0 5
54647: PPUSH
54648: LD_VAR 0 1
54652: PPUSH
54653: CALL_OW 248
54657: PPUSH
54658: CALL_OW 450
54662: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54663: LD_ADDR_VAR 0 2
54667: PUSH
54668: LD_VAR 0 3
54672: PPUSH
54673: LD_INT 1
54675: PPUSH
54676: CALL_OW 275
54680: PUSH
54681: LD_VAR 0 4
54685: PUSH
54686: LD_INT 1
54688: ARRAY
54689: GREATEREQUAL
54690: PUSH
54691: LD_VAR 0 3
54695: PPUSH
54696: LD_INT 2
54698: PPUSH
54699: CALL_OW 275
54703: PUSH
54704: LD_VAR 0 4
54708: PUSH
54709: LD_INT 2
54711: ARRAY
54712: GREATEREQUAL
54713: AND
54714: PUSH
54715: LD_VAR 0 3
54719: PPUSH
54720: LD_INT 3
54722: PPUSH
54723: CALL_OW 275
54727: PUSH
54728: LD_VAR 0 4
54732: PUSH
54733: LD_INT 3
54735: ARRAY
54736: GREATEREQUAL
54737: AND
54738: ST_TO_ADDR
// end ;
54739: LD_VAR 0 2
54743: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54744: LD_INT 0
54746: PPUSH
54747: PPUSH
54748: PPUSH
// pom := GetBase ( building ) ;
54749: LD_ADDR_VAR 0 4
54753: PUSH
54754: LD_VAR 0 1
54758: PPUSH
54759: CALL_OW 274
54763: ST_TO_ADDR
// if not pom then
54764: LD_VAR 0 4
54768: NOT
54769: IFFALSE 54773
// exit ;
54771: GO 54874
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54773: LD_ADDR_VAR 0 5
54777: PUSH
54778: LD_VAR 0 2
54782: PPUSH
54783: LD_VAR 0 1
54787: PPUSH
54788: CALL_OW 248
54792: PPUSH
54793: CALL_OW 450
54797: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54798: LD_ADDR_VAR 0 3
54802: PUSH
54803: LD_VAR 0 4
54807: PPUSH
54808: LD_INT 1
54810: PPUSH
54811: CALL_OW 275
54815: PUSH
54816: LD_VAR 0 5
54820: PUSH
54821: LD_INT 1
54823: ARRAY
54824: GREATEREQUAL
54825: PUSH
54826: LD_VAR 0 4
54830: PPUSH
54831: LD_INT 2
54833: PPUSH
54834: CALL_OW 275
54838: PUSH
54839: LD_VAR 0 5
54843: PUSH
54844: LD_INT 2
54846: ARRAY
54847: GREATEREQUAL
54848: AND
54849: PUSH
54850: LD_VAR 0 4
54854: PPUSH
54855: LD_INT 3
54857: PPUSH
54858: CALL_OW 275
54862: PUSH
54863: LD_VAR 0 5
54867: PUSH
54868: LD_INT 3
54870: ARRAY
54871: GREATEREQUAL
54872: AND
54873: ST_TO_ADDR
// end ;
54874: LD_VAR 0 3
54878: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54879: LD_INT 0
54881: PPUSH
54882: PPUSH
54883: PPUSH
54884: PPUSH
54885: PPUSH
54886: PPUSH
54887: PPUSH
54888: PPUSH
54889: PPUSH
54890: PPUSH
54891: PPUSH
// result := false ;
54892: LD_ADDR_VAR 0 8
54896: PUSH
54897: LD_INT 0
54899: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54900: LD_VAR 0 5
54904: NOT
54905: PUSH
54906: LD_VAR 0 1
54910: NOT
54911: OR
54912: PUSH
54913: LD_VAR 0 2
54917: NOT
54918: OR
54919: PUSH
54920: LD_VAR 0 3
54924: NOT
54925: OR
54926: IFFALSE 54930
// exit ;
54928: GO 55744
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54930: LD_ADDR_VAR 0 14
54934: PUSH
54935: LD_VAR 0 1
54939: PPUSH
54940: LD_VAR 0 2
54944: PPUSH
54945: LD_VAR 0 3
54949: PPUSH
54950: LD_VAR 0 4
54954: PPUSH
54955: LD_VAR 0 5
54959: PUSH
54960: LD_INT 1
54962: ARRAY
54963: PPUSH
54964: CALL_OW 248
54968: PPUSH
54969: LD_INT 0
54971: PPUSH
54972: CALL 56997 0 6
54976: ST_TO_ADDR
// if not hexes then
54977: LD_VAR 0 14
54981: NOT
54982: IFFALSE 54986
// exit ;
54984: GO 55744
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54986: LD_ADDR_VAR 0 17
54990: PUSH
54991: LD_VAR 0 5
54995: PPUSH
54996: LD_INT 22
54998: PUSH
54999: LD_VAR 0 13
55003: PPUSH
55004: CALL_OW 255
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: LD_INT 30
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 30
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: LIST
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PPUSH
55045: CALL_OW 72
55049: ST_TO_ADDR
// for i = 1 to hexes do
55050: LD_ADDR_VAR 0 9
55054: PUSH
55055: DOUBLE
55056: LD_INT 1
55058: DEC
55059: ST_TO_ADDR
55060: LD_VAR 0 14
55064: PUSH
55065: FOR_TO
55066: IFFALSE 55742
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55068: LD_ADDR_VAR 0 13
55072: PUSH
55073: LD_VAR 0 14
55077: PUSH
55078: LD_VAR 0 9
55082: ARRAY
55083: PUSH
55084: LD_INT 1
55086: ARRAY
55087: PPUSH
55088: LD_VAR 0 14
55092: PUSH
55093: LD_VAR 0 9
55097: ARRAY
55098: PUSH
55099: LD_INT 2
55101: ARRAY
55102: PPUSH
55103: CALL_OW 428
55107: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55108: LD_VAR 0 14
55112: PUSH
55113: LD_VAR 0 9
55117: ARRAY
55118: PUSH
55119: LD_INT 1
55121: ARRAY
55122: PPUSH
55123: LD_VAR 0 14
55127: PUSH
55128: LD_VAR 0 9
55132: ARRAY
55133: PUSH
55134: LD_INT 2
55136: ARRAY
55137: PPUSH
55138: CALL_OW 351
55142: PUSH
55143: LD_VAR 0 14
55147: PUSH
55148: LD_VAR 0 9
55152: ARRAY
55153: PUSH
55154: LD_INT 1
55156: ARRAY
55157: PPUSH
55158: LD_VAR 0 14
55162: PUSH
55163: LD_VAR 0 9
55167: ARRAY
55168: PUSH
55169: LD_INT 2
55171: ARRAY
55172: PPUSH
55173: CALL_OW 488
55177: NOT
55178: OR
55179: PUSH
55180: LD_VAR 0 13
55184: PPUSH
55185: CALL_OW 247
55189: PUSH
55190: LD_INT 3
55192: EQUAL
55193: OR
55194: IFFALSE 55200
// exit ;
55196: POP
55197: POP
55198: GO 55744
// if not tmp then
55200: LD_VAR 0 13
55204: NOT
55205: IFFALSE 55209
// continue ;
55207: GO 55065
// result := true ;
55209: LD_ADDR_VAR 0 8
55213: PUSH
55214: LD_INT 1
55216: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55217: LD_VAR 0 6
55221: PUSH
55222: LD_VAR 0 13
55226: PPUSH
55227: CALL_OW 247
55231: PUSH
55232: LD_INT 2
55234: EQUAL
55235: AND
55236: PUSH
55237: LD_VAR 0 13
55241: PPUSH
55242: CALL_OW 263
55246: PUSH
55247: LD_INT 1
55249: EQUAL
55250: AND
55251: IFFALSE 55415
// begin if IsDrivenBy ( tmp ) then
55253: LD_VAR 0 13
55257: PPUSH
55258: CALL_OW 311
55262: IFFALSE 55266
// continue ;
55264: GO 55065
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55266: LD_VAR 0 6
55270: PPUSH
55271: LD_INT 3
55273: PUSH
55274: LD_INT 60
55276: PUSH
55277: EMPTY
55278: LIST
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: LD_INT 55
55289: PUSH
55290: EMPTY
55291: LIST
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PPUSH
55301: CALL_OW 72
55305: IFFALSE 55413
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55307: LD_ADDR_VAR 0 18
55311: PUSH
55312: LD_VAR 0 6
55316: PPUSH
55317: LD_INT 3
55319: PUSH
55320: LD_INT 60
55322: PUSH
55323: EMPTY
55324: LIST
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 3
55332: PUSH
55333: LD_INT 55
55335: PUSH
55336: EMPTY
55337: LIST
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PPUSH
55347: CALL_OW 72
55351: PUSH
55352: LD_INT 1
55354: ARRAY
55355: ST_TO_ADDR
// if IsInUnit ( driver ) then
55356: LD_VAR 0 18
55360: PPUSH
55361: CALL_OW 310
55365: IFFALSE 55376
// ComExit ( driver ) ;
55367: LD_VAR 0 18
55371: PPUSH
55372: CALL 80778 0 1
// AddComEnterUnit ( driver , tmp ) ;
55376: LD_VAR 0 18
55380: PPUSH
55381: LD_VAR 0 13
55385: PPUSH
55386: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
55390: LD_VAR 0 18
55394: PPUSH
55395: LD_VAR 0 7
55399: PPUSH
55400: CALL_OW 173
// AddComExitVehicle ( driver ) ;
55404: LD_VAR 0 18
55408: PPUSH
55409: CALL_OW 181
// end ; continue ;
55413: GO 55065
// end ; if not cleaners or not tmp in cleaners then
55415: LD_VAR 0 6
55419: NOT
55420: PUSH
55421: LD_VAR 0 13
55425: PUSH
55426: LD_VAR 0 6
55430: IN
55431: NOT
55432: OR
55433: IFFALSE 55740
// begin if dep then
55435: LD_VAR 0 17
55439: IFFALSE 55575
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55441: LD_ADDR_VAR 0 16
55445: PUSH
55446: LD_VAR 0 17
55450: PUSH
55451: LD_INT 1
55453: ARRAY
55454: PPUSH
55455: CALL_OW 250
55459: PPUSH
55460: LD_VAR 0 17
55464: PUSH
55465: LD_INT 1
55467: ARRAY
55468: PPUSH
55469: CALL_OW 254
55473: PPUSH
55474: LD_INT 5
55476: PPUSH
55477: CALL_OW 272
55481: PUSH
55482: LD_VAR 0 17
55486: PUSH
55487: LD_INT 1
55489: ARRAY
55490: PPUSH
55491: CALL_OW 251
55495: PPUSH
55496: LD_VAR 0 17
55500: PUSH
55501: LD_INT 1
55503: ARRAY
55504: PPUSH
55505: CALL_OW 254
55509: PPUSH
55510: LD_INT 5
55512: PPUSH
55513: CALL_OW 273
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55522: LD_VAR 0 16
55526: PUSH
55527: LD_INT 1
55529: ARRAY
55530: PPUSH
55531: LD_VAR 0 16
55535: PUSH
55536: LD_INT 2
55538: ARRAY
55539: PPUSH
55540: CALL_OW 488
55544: IFFALSE 55575
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55546: LD_VAR 0 13
55550: PPUSH
55551: LD_VAR 0 16
55555: PUSH
55556: LD_INT 1
55558: ARRAY
55559: PPUSH
55560: LD_VAR 0 16
55564: PUSH
55565: LD_INT 2
55567: ARRAY
55568: PPUSH
55569: CALL_OW 111
// continue ;
55573: GO 55065
// end ; end ; r := GetDir ( tmp ) ;
55575: LD_ADDR_VAR 0 15
55579: PUSH
55580: LD_VAR 0 13
55584: PPUSH
55585: CALL_OW 254
55589: ST_TO_ADDR
// if r = 5 then
55590: LD_VAR 0 15
55594: PUSH
55595: LD_INT 5
55597: EQUAL
55598: IFFALSE 55608
// r := 0 ;
55600: LD_ADDR_VAR 0 15
55604: PUSH
55605: LD_INT 0
55607: ST_TO_ADDR
// for j = r to 5 do
55608: LD_ADDR_VAR 0 10
55612: PUSH
55613: DOUBLE
55614: LD_VAR 0 15
55618: DEC
55619: ST_TO_ADDR
55620: LD_INT 5
55622: PUSH
55623: FOR_TO
55624: IFFALSE 55738
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55626: LD_ADDR_VAR 0 11
55630: PUSH
55631: LD_VAR 0 13
55635: PPUSH
55636: CALL_OW 250
55640: PPUSH
55641: LD_VAR 0 10
55645: PPUSH
55646: LD_INT 2
55648: PPUSH
55649: CALL_OW 272
55653: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55654: LD_ADDR_VAR 0 12
55658: PUSH
55659: LD_VAR 0 13
55663: PPUSH
55664: CALL_OW 251
55668: PPUSH
55669: LD_VAR 0 10
55673: PPUSH
55674: LD_INT 2
55676: PPUSH
55677: CALL_OW 273
55681: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55682: LD_VAR 0 11
55686: PPUSH
55687: LD_VAR 0 12
55691: PPUSH
55692: CALL_OW 488
55696: PUSH
55697: LD_VAR 0 11
55701: PPUSH
55702: LD_VAR 0 12
55706: PPUSH
55707: CALL_OW 428
55711: NOT
55712: AND
55713: IFFALSE 55736
// begin ComMoveXY ( tmp , _x , _y ) ;
55715: LD_VAR 0 13
55719: PPUSH
55720: LD_VAR 0 11
55724: PPUSH
55725: LD_VAR 0 12
55729: PPUSH
55730: CALL_OW 111
// break ;
55734: GO 55738
// end ; end ;
55736: GO 55623
55738: POP
55739: POP
// end ; end ;
55740: GO 55065
55742: POP
55743: POP
// end ;
55744: LD_VAR 0 8
55748: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55749: LD_INT 0
55751: PPUSH
// result := true ;
55752: LD_ADDR_VAR 0 3
55756: PUSH
55757: LD_INT 1
55759: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55760: LD_VAR 0 2
55764: PUSH
55765: LD_INT 24
55767: DOUBLE
55768: EQUAL
55769: IFTRUE 55779
55771: LD_INT 33
55773: DOUBLE
55774: EQUAL
55775: IFTRUE 55779
55777: GO 55804
55779: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55780: LD_ADDR_VAR 0 3
55784: PUSH
55785: LD_INT 32
55787: PPUSH
55788: LD_VAR 0 1
55792: PPUSH
55793: CALL_OW 321
55797: PUSH
55798: LD_INT 2
55800: EQUAL
55801: ST_TO_ADDR
55802: GO 56120
55804: LD_INT 20
55806: DOUBLE
55807: EQUAL
55808: IFTRUE 55812
55810: GO 55837
55812: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55813: LD_ADDR_VAR 0 3
55817: PUSH
55818: LD_INT 6
55820: PPUSH
55821: LD_VAR 0 1
55825: PPUSH
55826: CALL_OW 321
55830: PUSH
55831: LD_INT 2
55833: EQUAL
55834: ST_TO_ADDR
55835: GO 56120
55837: LD_INT 22
55839: DOUBLE
55840: EQUAL
55841: IFTRUE 55851
55843: LD_INT 36
55845: DOUBLE
55846: EQUAL
55847: IFTRUE 55851
55849: GO 55876
55851: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55852: LD_ADDR_VAR 0 3
55856: PUSH
55857: LD_INT 15
55859: PPUSH
55860: LD_VAR 0 1
55864: PPUSH
55865: CALL_OW 321
55869: PUSH
55870: LD_INT 2
55872: EQUAL
55873: ST_TO_ADDR
55874: GO 56120
55876: LD_INT 30
55878: DOUBLE
55879: EQUAL
55880: IFTRUE 55884
55882: GO 55909
55884: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55885: LD_ADDR_VAR 0 3
55889: PUSH
55890: LD_INT 20
55892: PPUSH
55893: LD_VAR 0 1
55897: PPUSH
55898: CALL_OW 321
55902: PUSH
55903: LD_INT 2
55905: EQUAL
55906: ST_TO_ADDR
55907: GO 56120
55909: LD_INT 28
55911: DOUBLE
55912: EQUAL
55913: IFTRUE 55923
55915: LD_INT 21
55917: DOUBLE
55918: EQUAL
55919: IFTRUE 55923
55921: GO 55948
55923: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55924: LD_ADDR_VAR 0 3
55928: PUSH
55929: LD_INT 21
55931: PPUSH
55932: LD_VAR 0 1
55936: PPUSH
55937: CALL_OW 321
55941: PUSH
55942: LD_INT 2
55944: EQUAL
55945: ST_TO_ADDR
55946: GO 56120
55948: LD_INT 16
55950: DOUBLE
55951: EQUAL
55952: IFTRUE 55956
55954: GO 55981
55956: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55957: LD_ADDR_VAR 0 3
55961: PUSH
55962: LD_INT 84
55964: PPUSH
55965: LD_VAR 0 1
55969: PPUSH
55970: CALL_OW 321
55974: PUSH
55975: LD_INT 2
55977: EQUAL
55978: ST_TO_ADDR
55979: GO 56120
55981: LD_INT 19
55983: DOUBLE
55984: EQUAL
55985: IFTRUE 55995
55987: LD_INT 23
55989: DOUBLE
55990: EQUAL
55991: IFTRUE 55995
55993: GO 56020
55995: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55996: LD_ADDR_VAR 0 3
56000: PUSH
56001: LD_INT 83
56003: PPUSH
56004: LD_VAR 0 1
56008: PPUSH
56009: CALL_OW 321
56013: PUSH
56014: LD_INT 2
56016: EQUAL
56017: ST_TO_ADDR
56018: GO 56120
56020: LD_INT 17
56022: DOUBLE
56023: EQUAL
56024: IFTRUE 56028
56026: GO 56053
56028: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
56029: LD_ADDR_VAR 0 3
56033: PUSH
56034: LD_INT 39
56036: PPUSH
56037: LD_VAR 0 1
56041: PPUSH
56042: CALL_OW 321
56046: PUSH
56047: LD_INT 2
56049: EQUAL
56050: ST_TO_ADDR
56051: GO 56120
56053: LD_INT 18
56055: DOUBLE
56056: EQUAL
56057: IFTRUE 56061
56059: GO 56086
56061: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56062: LD_ADDR_VAR 0 3
56066: PUSH
56067: LD_INT 40
56069: PPUSH
56070: LD_VAR 0 1
56074: PPUSH
56075: CALL_OW 321
56079: PUSH
56080: LD_INT 2
56082: EQUAL
56083: ST_TO_ADDR
56084: GO 56120
56086: LD_INT 27
56088: DOUBLE
56089: EQUAL
56090: IFTRUE 56094
56092: GO 56119
56094: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56095: LD_ADDR_VAR 0 3
56099: PUSH
56100: LD_INT 35
56102: PPUSH
56103: LD_VAR 0 1
56107: PPUSH
56108: CALL_OW 321
56112: PUSH
56113: LD_INT 2
56115: EQUAL
56116: ST_TO_ADDR
56117: GO 56120
56119: POP
// end ;
56120: LD_VAR 0 3
56124: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56125: LD_INT 0
56127: PPUSH
56128: PPUSH
56129: PPUSH
56130: PPUSH
56131: PPUSH
56132: PPUSH
56133: PPUSH
56134: PPUSH
56135: PPUSH
56136: PPUSH
56137: PPUSH
// result := false ;
56138: LD_ADDR_VAR 0 6
56142: PUSH
56143: LD_INT 0
56145: ST_TO_ADDR
// if btype = b_depot then
56146: LD_VAR 0 2
56150: PUSH
56151: LD_INT 0
56153: EQUAL
56154: IFFALSE 56166
// begin result := true ;
56156: LD_ADDR_VAR 0 6
56160: PUSH
56161: LD_INT 1
56163: ST_TO_ADDR
// exit ;
56164: GO 56992
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56166: LD_VAR 0 1
56170: NOT
56171: PUSH
56172: LD_VAR 0 1
56176: PPUSH
56177: CALL_OW 266
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: IN
56192: NOT
56193: OR
56194: PUSH
56195: LD_VAR 0 2
56199: NOT
56200: OR
56201: PUSH
56202: LD_VAR 0 5
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: LD_INT 3
56218: PUSH
56219: LD_INT 4
56221: PUSH
56222: LD_INT 5
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: IN
56233: NOT
56234: OR
56235: PUSH
56236: LD_VAR 0 3
56240: PPUSH
56241: LD_VAR 0 4
56245: PPUSH
56246: CALL_OW 488
56250: NOT
56251: OR
56252: IFFALSE 56256
// exit ;
56254: GO 56992
// side := GetSide ( depot ) ;
56256: LD_ADDR_VAR 0 9
56260: PUSH
56261: LD_VAR 0 1
56265: PPUSH
56266: CALL_OW 255
56270: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56271: LD_VAR 0 9
56275: PPUSH
56276: LD_VAR 0 2
56280: PPUSH
56281: CALL 55749 0 2
56285: NOT
56286: IFFALSE 56290
// exit ;
56288: GO 56992
// pom := GetBase ( depot ) ;
56290: LD_ADDR_VAR 0 10
56294: PUSH
56295: LD_VAR 0 1
56299: PPUSH
56300: CALL_OW 274
56304: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56305: LD_ADDR_VAR 0 11
56309: PUSH
56310: LD_VAR 0 2
56314: PPUSH
56315: LD_VAR 0 1
56319: PPUSH
56320: CALL_OW 248
56324: PPUSH
56325: CALL_OW 450
56329: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56330: LD_VAR 0 10
56334: PPUSH
56335: LD_INT 1
56337: PPUSH
56338: CALL_OW 275
56342: PUSH
56343: LD_VAR 0 11
56347: PUSH
56348: LD_INT 1
56350: ARRAY
56351: GREATEREQUAL
56352: PUSH
56353: LD_VAR 0 10
56357: PPUSH
56358: LD_INT 2
56360: PPUSH
56361: CALL_OW 275
56365: PUSH
56366: LD_VAR 0 11
56370: PUSH
56371: LD_INT 2
56373: ARRAY
56374: GREATEREQUAL
56375: AND
56376: PUSH
56377: LD_VAR 0 10
56381: PPUSH
56382: LD_INT 3
56384: PPUSH
56385: CALL_OW 275
56389: PUSH
56390: LD_VAR 0 11
56394: PUSH
56395: LD_INT 3
56397: ARRAY
56398: GREATEREQUAL
56399: AND
56400: NOT
56401: IFFALSE 56405
// exit ;
56403: GO 56992
// if GetBType ( depot ) = b_depot then
56405: LD_VAR 0 1
56409: PPUSH
56410: CALL_OW 266
56414: PUSH
56415: LD_INT 0
56417: EQUAL
56418: IFFALSE 56430
// dist := 28 else
56420: LD_ADDR_VAR 0 14
56424: PUSH
56425: LD_INT 28
56427: ST_TO_ADDR
56428: GO 56438
// dist := 36 ;
56430: LD_ADDR_VAR 0 14
56434: PUSH
56435: LD_INT 36
56437: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56438: LD_VAR 0 1
56442: PPUSH
56443: LD_VAR 0 3
56447: PPUSH
56448: LD_VAR 0 4
56452: PPUSH
56453: CALL_OW 297
56457: PUSH
56458: LD_VAR 0 14
56462: GREATER
56463: IFFALSE 56467
// exit ;
56465: GO 56992
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56467: LD_ADDR_VAR 0 12
56471: PUSH
56472: LD_VAR 0 2
56476: PPUSH
56477: LD_VAR 0 3
56481: PPUSH
56482: LD_VAR 0 4
56486: PPUSH
56487: LD_VAR 0 5
56491: PPUSH
56492: LD_VAR 0 1
56496: PPUSH
56497: CALL_OW 248
56501: PPUSH
56502: LD_INT 0
56504: PPUSH
56505: CALL 56997 0 6
56509: ST_TO_ADDR
// if not hexes then
56510: LD_VAR 0 12
56514: NOT
56515: IFFALSE 56519
// exit ;
56517: GO 56992
// hex := GetHexInfo ( x , y ) ;
56519: LD_ADDR_VAR 0 15
56523: PUSH
56524: LD_VAR 0 3
56528: PPUSH
56529: LD_VAR 0 4
56533: PPUSH
56534: CALL_OW 546
56538: ST_TO_ADDR
// if hex [ 1 ] then
56539: LD_VAR 0 15
56543: PUSH
56544: LD_INT 1
56546: ARRAY
56547: IFFALSE 56551
// exit ;
56549: GO 56992
// height := hex [ 2 ] ;
56551: LD_ADDR_VAR 0 13
56555: PUSH
56556: LD_VAR 0 15
56560: PUSH
56561: LD_INT 2
56563: ARRAY
56564: ST_TO_ADDR
// for i = 1 to hexes do
56565: LD_ADDR_VAR 0 7
56569: PUSH
56570: DOUBLE
56571: LD_INT 1
56573: DEC
56574: ST_TO_ADDR
56575: LD_VAR 0 12
56579: PUSH
56580: FOR_TO
56581: IFFALSE 56911
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56583: LD_VAR 0 12
56587: PUSH
56588: LD_VAR 0 7
56592: ARRAY
56593: PUSH
56594: LD_INT 1
56596: ARRAY
56597: PPUSH
56598: LD_VAR 0 12
56602: PUSH
56603: LD_VAR 0 7
56607: ARRAY
56608: PUSH
56609: LD_INT 2
56611: ARRAY
56612: PPUSH
56613: CALL_OW 488
56617: NOT
56618: PUSH
56619: LD_VAR 0 12
56623: PUSH
56624: LD_VAR 0 7
56628: ARRAY
56629: PUSH
56630: LD_INT 1
56632: ARRAY
56633: PPUSH
56634: LD_VAR 0 12
56638: PUSH
56639: LD_VAR 0 7
56643: ARRAY
56644: PUSH
56645: LD_INT 2
56647: ARRAY
56648: PPUSH
56649: CALL_OW 428
56653: PUSH
56654: LD_INT 0
56656: GREATER
56657: OR
56658: PUSH
56659: LD_VAR 0 12
56663: PUSH
56664: LD_VAR 0 7
56668: ARRAY
56669: PUSH
56670: LD_INT 1
56672: ARRAY
56673: PPUSH
56674: LD_VAR 0 12
56678: PUSH
56679: LD_VAR 0 7
56683: ARRAY
56684: PUSH
56685: LD_INT 2
56687: ARRAY
56688: PPUSH
56689: CALL_OW 351
56693: OR
56694: IFFALSE 56700
// exit ;
56696: POP
56697: POP
56698: GO 56992
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56700: LD_ADDR_VAR 0 8
56704: PUSH
56705: LD_VAR 0 12
56709: PUSH
56710: LD_VAR 0 7
56714: ARRAY
56715: PUSH
56716: LD_INT 1
56718: ARRAY
56719: PPUSH
56720: LD_VAR 0 12
56724: PUSH
56725: LD_VAR 0 7
56729: ARRAY
56730: PUSH
56731: LD_INT 2
56733: ARRAY
56734: PPUSH
56735: CALL_OW 546
56739: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56740: LD_VAR 0 8
56744: PUSH
56745: LD_INT 1
56747: ARRAY
56748: PUSH
56749: LD_VAR 0 8
56753: PUSH
56754: LD_INT 2
56756: ARRAY
56757: PUSH
56758: LD_VAR 0 13
56762: PUSH
56763: LD_INT 2
56765: PLUS
56766: GREATER
56767: OR
56768: PUSH
56769: LD_VAR 0 8
56773: PUSH
56774: LD_INT 2
56776: ARRAY
56777: PUSH
56778: LD_VAR 0 13
56782: PUSH
56783: LD_INT 2
56785: MINUS
56786: LESS
56787: OR
56788: PUSH
56789: LD_VAR 0 8
56793: PUSH
56794: LD_INT 3
56796: ARRAY
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 8
56803: PUSH
56804: LD_INT 9
56806: PUSH
56807: LD_INT 10
56809: PUSH
56810: LD_INT 11
56812: PUSH
56813: LD_INT 12
56815: PUSH
56816: LD_INT 13
56818: PUSH
56819: LD_INT 16
56821: PUSH
56822: LD_INT 17
56824: PUSH
56825: LD_INT 18
56827: PUSH
56828: LD_INT 19
56830: PUSH
56831: LD_INT 20
56833: PUSH
56834: LD_INT 21
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: IN
56852: NOT
56853: OR
56854: PUSH
56855: LD_VAR 0 8
56859: PUSH
56860: LD_INT 5
56862: ARRAY
56863: NOT
56864: OR
56865: PUSH
56866: LD_VAR 0 8
56870: PUSH
56871: LD_INT 6
56873: ARRAY
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: LD_INT 7
56883: PUSH
56884: LD_INT 9
56886: PUSH
56887: LD_INT 10
56889: PUSH
56890: LD_INT 11
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: IN
56901: NOT
56902: OR
56903: IFFALSE 56909
// exit ;
56905: POP
56906: POP
56907: GO 56992
// end ;
56909: GO 56580
56911: POP
56912: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56913: LD_VAR 0 9
56917: PPUSH
56918: LD_VAR 0 3
56922: PPUSH
56923: LD_VAR 0 4
56927: PPUSH
56928: LD_INT 20
56930: PPUSH
56931: CALL 48915 0 4
56935: PUSH
56936: LD_INT 4
56938: ARRAY
56939: IFFALSE 56943
// exit ;
56941: GO 56992
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56943: LD_VAR 0 2
56947: PUSH
56948: LD_INT 29
56950: PUSH
56951: LD_INT 30
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: IN
56958: PUSH
56959: LD_VAR 0 3
56963: PPUSH
56964: LD_VAR 0 4
56968: PPUSH
56969: LD_VAR 0 9
56973: PPUSH
56974: CALL_OW 440
56978: NOT
56979: AND
56980: IFFALSE 56984
// exit ;
56982: GO 56992
// result := true ;
56984: LD_ADDR_VAR 0 6
56988: PUSH
56989: LD_INT 1
56991: ST_TO_ADDR
// end ;
56992: LD_VAR 0 6
56996: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56997: LD_INT 0
56999: PPUSH
57000: PPUSH
57001: PPUSH
57002: PPUSH
57003: PPUSH
57004: PPUSH
57005: PPUSH
57006: PPUSH
57007: PPUSH
57008: PPUSH
57009: PPUSH
57010: PPUSH
57011: PPUSH
57012: PPUSH
57013: PPUSH
57014: PPUSH
57015: PPUSH
57016: PPUSH
57017: PPUSH
57018: PPUSH
57019: PPUSH
57020: PPUSH
57021: PPUSH
57022: PPUSH
57023: PPUSH
57024: PPUSH
57025: PPUSH
57026: PPUSH
57027: PPUSH
57028: PPUSH
57029: PPUSH
57030: PPUSH
57031: PPUSH
57032: PPUSH
57033: PPUSH
57034: PPUSH
57035: PPUSH
57036: PPUSH
57037: PPUSH
57038: PPUSH
57039: PPUSH
57040: PPUSH
57041: PPUSH
57042: PPUSH
57043: PPUSH
57044: PPUSH
57045: PPUSH
57046: PPUSH
57047: PPUSH
57048: PPUSH
57049: PPUSH
57050: PPUSH
57051: PPUSH
57052: PPUSH
57053: PPUSH
57054: PPUSH
57055: PPUSH
57056: PPUSH
// result = [ ] ;
57057: LD_ADDR_VAR 0 7
57061: PUSH
57062: EMPTY
57063: ST_TO_ADDR
// temp_list = [ ] ;
57064: LD_ADDR_VAR 0 9
57068: PUSH
57069: EMPTY
57070: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57071: LD_VAR 0 4
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: LD_INT 3
57087: PUSH
57088: LD_INT 4
57090: PUSH
57091: LD_INT 5
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: IN
57102: NOT
57103: PUSH
57104: LD_VAR 0 1
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: IN
57119: PUSH
57120: LD_VAR 0 5
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: LD_INT 3
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: LIST
57138: IN
57139: NOT
57140: AND
57141: OR
57142: IFFALSE 57146
// exit ;
57144: GO 75537
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57146: LD_VAR 0 1
57150: PUSH
57151: LD_INT 6
57153: PUSH
57154: LD_INT 7
57156: PUSH
57157: LD_INT 8
57159: PUSH
57160: LD_INT 13
57162: PUSH
57163: LD_INT 12
57165: PUSH
57166: LD_INT 15
57168: PUSH
57169: LD_INT 11
57171: PUSH
57172: LD_INT 14
57174: PUSH
57175: LD_INT 10
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: IN
57189: IFFALSE 57199
// btype = b_lab ;
57191: LD_ADDR_VAR 0 1
57195: PUSH
57196: LD_INT 6
57198: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57199: LD_VAR 0 6
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: LD_INT 2
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: LIST
57217: IN
57218: NOT
57219: PUSH
57220: LD_VAR 0 1
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: LD_INT 3
57236: PUSH
57237: LD_INT 6
57239: PUSH
57240: LD_INT 36
57242: PUSH
57243: LD_INT 4
57245: PUSH
57246: LD_INT 5
57248: PUSH
57249: LD_INT 31
57251: PUSH
57252: LD_INT 32
57254: PUSH
57255: LD_INT 33
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: IN
57271: NOT
57272: PUSH
57273: LD_VAR 0 6
57277: PUSH
57278: LD_INT 1
57280: EQUAL
57281: AND
57282: OR
57283: PUSH
57284: LD_VAR 0 1
57288: PUSH
57289: LD_INT 2
57291: PUSH
57292: LD_INT 3
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: IN
57299: NOT
57300: PUSH
57301: LD_VAR 0 6
57305: PUSH
57306: LD_INT 2
57308: EQUAL
57309: AND
57310: OR
57311: IFFALSE 57321
// mode = 0 ;
57313: LD_ADDR_VAR 0 6
57317: PUSH
57318: LD_INT 0
57320: ST_TO_ADDR
// case mode of 0 :
57321: LD_VAR 0 6
57325: PUSH
57326: LD_INT 0
57328: DOUBLE
57329: EQUAL
57330: IFTRUE 57334
57332: GO 68787
57334: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57335: LD_ADDR_VAR 0 11
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: LD_INT 2
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: LD_INT 3
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_INT 3
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: LD_INT 2
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57528: LD_ADDR_VAR 0 12
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 2
57662: NEG
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 2
57674: NEG
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 3
57685: NEG
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 3
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57724: LD_ADDR_VAR 0 13
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: LD_INT 2
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: LD_INT 2
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: LD_INT 2
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 2
57859: NEG
57860: PUSH
57861: LD_INT 2
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 2
57871: NEG
57872: PUSH
57873: LD_INT 3
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 3
57883: NEG
57884: PUSH
57885: LD_INT 2
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 3
57895: NEG
57896: PUSH
57897: LD_INT 3
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57923: LD_ADDR_VAR 0 14
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 2
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: LD_INT 3
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 3
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58119: LD_ADDR_VAR 0 15
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: NEG
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: NEG
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 2
58242: NEG
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 2
58253: NEG
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 2
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 3
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58312: LD_ADDR_VAR 0 16
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: LD_INT 2
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 2
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 2
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: LD_INT 2
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 2
58435: NEG
58436: PUSH
58437: LD_INT 1
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 2
58447: NEG
58448: PUSH
58449: LD_INT 2
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 3
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 3
58469: PUSH
58470: LD_INT 3
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: LD_INT 3
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58505: LD_ADDR_VAR 0 17
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 2
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 2
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: LD_INT 2
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: LD_INT 2
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: LD_INT 2
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 2
58681: NEG
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 2
58704: NEG
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58735: LD_ADDR_VAR 0 18
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 1
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: LD_INT 1
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: NEG
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 2
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 2
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 2
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 2
58934: NEG
58935: PUSH
58936: LD_INT 2
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58965: LD_ADDR_VAR 0 19
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 1
59046: NEG
59047: PUSH
59048: LD_INT 2
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: LD_INT 2
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 2
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 2
59100: PUSH
59101: LD_INT 2
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: LD_INT 2
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: LD_INT 2
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 2
59141: NEG
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 2
59152: NEG
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 2
59164: NEG
59165: PUSH
59166: LD_INT 2
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59195: LD_ADDR_VAR 0 20
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: LD_INT 1
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: LD_INT 2
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: LD_INT 2
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 2
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: LD_INT 2
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: LD_INT 2
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 2
59371: NEG
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 2
59382: NEG
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 2
59394: NEG
59395: PUSH
59396: LD_INT 2
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59425: LD_ADDR_VAR 0 21
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: NEG
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: LD_INT 2
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 2
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 2
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 2
59560: PUSH
59561: LD_INT 2
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: LD_INT 2
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: LD_INT 2
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 2
59624: NEG
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59655: LD_ADDR_VAR 0 22
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 1
59724: NEG
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 2
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 2
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 2
59831: NEG
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 2
59842: NEG
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: NEG
59855: PUSH
59856: LD_INT 2
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59885: LD_ADDR_VAR 0 23
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: LD_INT 2
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 2
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 2
60020: PUSH
60021: LD_INT 2
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: LD_INT 2
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: NEG
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 2
60072: NEG
60073: PUSH
60074: LD_INT 1
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 2
60084: NEG
60085: PUSH
60086: LD_INT 2
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: LD_INT 3
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: LD_INT 3
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 1
60120: PUSH
60121: LD_INT 2
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 2
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60165: LD_ADDR_VAR 0 24
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: LD_INT 0
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: LD_INT 1
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: LD_INT 1
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 1
60223: NEG
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: LD_INT 1
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: LD_INT 2
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 1
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 2
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: LD_INT 2
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: LD_INT 2
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 2
60341: NEG
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 2
60352: NEG
60353: PUSH
60354: LD_INT 1
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 2
60364: NEG
60365: PUSH
60366: LD_INT 2
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: LD_INT 2
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 2
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 3
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 3
60408: PUSH
60409: LD_INT 2
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60441: LD_ADDR_VAR 0 25
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: LD_INT 1
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: LD_INT 1
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 1
60499: NEG
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: LD_INT 1
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: LD_INT 2
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: LD_INT 2
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 2
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 2
60576: PUSH
60577: LD_INT 2
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: LD_INT 2
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: LD_INT 2
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 2
60617: NEG
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 3
60652: PUSH
60653: LD_INT 1
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 3
60662: PUSH
60663: LD_INT 2
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 2
60672: PUSH
60673: LD_INT 3
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: LD_INT 3
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60715: LD_ADDR_VAR 0 26
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: LD_INT 2
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 2
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 2
60850: PUSH
60851: LD_INT 2
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: LD_INT 2
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: LD_INT 2
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: LD_INT 1
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 2
60891: NEG
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 2
60902: NEG
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 2
60914: NEG
60915: PUSH
60916: LD_INT 2
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: LD_INT 3
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: LD_INT 3
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 2
60957: NEG
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60991: LD_ADDR_VAR 0 27
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: LD_INT 1
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: LD_INT 2
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: LD_INT 2
61087: NEG
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 2
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: PUSH
61127: LD_INT 2
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: PUSH
61137: LD_INT 2
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: LD_INT 2
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 1
61156: NEG
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 2
61167: NEG
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 2
61178: NEG
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 2
61190: NEG
61191: PUSH
61192: LD_INT 2
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: LD_INT 2
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 2
61213: NEG
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 3
61224: NEG
61225: PUSH
61226: LD_INT 1
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 3
61236: NEG
61237: PUSH
61238: LD_INT 2
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61271: LD_ADDR_VAR 0 28
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 1
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: LD_INT 2
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: PUSH
61376: LD_INT 1
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 2
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 2
61406: PUSH
61407: LD_INT 2
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: LD_INT 2
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 2
61447: NEG
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 2
61458: NEG
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 2
61470: NEG
61471: PUSH
61472: LD_INT 2
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 2
61482: NEG
61483: PUSH
61484: LD_INT 3
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 3
61506: NEG
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 3
61518: NEG
61519: PUSH
61520: LD_INT 2
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61553: LD_ADDR_VAR 0 29
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 1
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: LD_INT 2
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: LD_INT 2
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 1
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 2
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 1
61688: PUSH
61689: LD_INT 2
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: LD_INT 2
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 1
61708: NEG
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 2
61719: NEG
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: NEG
61732: PUSH
61733: LD_INT 2
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 2
61743: NEG
61744: PUSH
61745: LD_INT 3
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 2
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 3
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: PUSH
61777: LD_INT 3
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 3
61797: NEG
61798: PUSH
61799: LD_INT 2
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61832: LD_ADDR_VAR 0 30
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: LD_INT 1
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 1
61913: NEG
61914: PUSH
61915: LD_INT 2
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 0
61925: PUSH
61926: LD_INT 2
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 1
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: LD_INT 2
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: LD_INT 2
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: LD_INT 1
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 2
61998: NEG
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 2
62009: NEG
62010: PUSH
62011: LD_INT 1
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: NEG
62022: PUSH
62023: LD_INT 3
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: PUSH
62034: LD_INT 2
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 3
62044: PUSH
62045: LD_INT 2
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 2
62054: PUSH
62055: LD_INT 3
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 2
62064: NEG
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 3
62075: NEG
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62110: LD_ADDR_VAR 0 31
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 1
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 0
62158: PUSH
62159: LD_INT 1
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 1
62168: NEG
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: LD_INT 2
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 2
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 2
62224: PUSH
62225: LD_INT 1
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 2
62234: PUSH
62235: LD_INT 2
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 1
62244: PUSH
62245: LD_INT 2
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 2
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: PUSH
62266: LD_INT 1
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 2
62275: NEG
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 2
62287: NEG
62288: PUSH
62289: LD_INT 2
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 2
62299: NEG
62300: PUSH
62301: LD_INT 3
62303: NEG
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 2
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 3
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: LD_INT 3
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: NEG
62343: PUSH
62344: LD_INT 2
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 3
62353: NEG
62354: PUSH
62355: LD_INT 2
62357: NEG
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62388: LD_ADDR_VAR 0 32
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: LD_INT 1
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 0
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 1
62446: NEG
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 1
62469: NEG
62470: PUSH
62471: LD_INT 2
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: LD_INT 2
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 1
62492: PUSH
62493: LD_INT 1
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 2
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 2
62513: PUSH
62514: LD_INT 2
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 1
62523: PUSH
62524: LD_INT 2
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: LD_INT 2
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 1
62543: NEG
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 2
62554: NEG
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 2
62565: NEG
62566: PUSH
62567: LD_INT 1
62569: NEG
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 1
62577: NEG
62578: PUSH
62579: LD_INT 3
62581: NEG
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: LD_INT 2
62592: NEG
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 3
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 2
62610: PUSH
62611: LD_INT 3
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 3
62631: NEG
62632: PUSH
62633: LD_INT 1
62635: NEG
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62666: LD_ADDR_VAR 0 33
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 1
62724: NEG
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: NEG
62736: PUSH
62737: LD_INT 1
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 1
62747: NEG
62748: PUSH
62749: LD_INT 2
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 1
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 2
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 2
62780: PUSH
62781: LD_INT 1
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 1
62790: PUSH
62791: LD_INT 2
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: LD_INT 2
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 1
62810: NEG
62811: PUSH
62812: LD_INT 1
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 2
62821: NEG
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 2
62832: NEG
62833: PUSH
62834: LD_INT 1
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 2
62844: NEG
62845: PUSH
62846: LD_INT 2
62848: NEG
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 2
62856: NEG
62857: PUSH
62858: LD_INT 3
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 2
62868: PUSH
62869: LD_INT 1
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 3
62879: PUSH
62880: LD_INT 1
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 1
62889: PUSH
62890: LD_INT 3
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: LD_INT 2
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 3
62910: NEG
62911: PUSH
62912: LD_INT 2
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62945: LD_ADDR_VAR 0 34
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: LD_INT 1
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: NEG
63027: PUSH
63028: LD_INT 2
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: LD_INT 2
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: LD_INT 1
63052: NEG
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 2
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 2
63070: PUSH
63071: LD_INT 2
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: PUSH
63081: LD_INT 2
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 2
63101: NEG
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 2
63112: NEG
63113: PUSH
63114: LD_INT 1
63116: NEG
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 2
63124: NEG
63125: PUSH
63126: LD_INT 2
63128: NEG
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: LD_INT 3
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: PUSH
63149: LD_INT 2
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 3
63159: PUSH
63160: LD_INT 2
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 2
63169: PUSH
63170: LD_INT 3
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 2
63179: NEG
63180: PUSH
63181: LD_INT 1
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 3
63190: NEG
63191: PUSH
63192: LD_INT 1
63194: NEG
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63225: LD_ADDR_VAR 0 35
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 0
63242: PUSH
63243: LD_INT 1
63245: NEG
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: PUSH
63254: LD_INT 0
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: LD_INT 1
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: LD_INT 1
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: LD_INT 0
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: LD_INT 1
63298: NEG
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 2
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 2
63316: NEG
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63337: LD_ADDR_VAR 0 36
63341: PUSH
63342: LD_INT 0
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 1
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 1
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: LD_INT 1
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 1
63418: NEG
63419: PUSH
63420: LD_INT 2
63422: NEG
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: PUSH
63431: LD_INT 2
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63449: LD_ADDR_VAR 0 37
63453: PUSH
63454: LD_INT 0
63456: PUSH
63457: LD_INT 0
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: LD_INT 1
63469: NEG
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 1
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 1
63487: PUSH
63488: LD_INT 1
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 0
63497: PUSH
63498: LD_INT 1
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 1
63507: NEG
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 1
63518: NEG
63519: PUSH
63520: LD_INT 1
63522: NEG
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 1
63530: PUSH
63531: LD_INT 1
63533: NEG
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63561: LD_ADDR_VAR 0 38
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: LD_INT 1
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: LD_INT 0
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: LD_INT 1
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 0
63609: PUSH
63610: LD_INT 1
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 1
63619: NEG
63620: PUSH
63621: LD_INT 0
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 1
63630: NEG
63631: PUSH
63632: LD_INT 1
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 2
63642: PUSH
63643: LD_INT 1
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 2
63652: NEG
63653: PUSH
63654: LD_INT 1
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63673: LD_ADDR_VAR 0 39
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: LD_INT 1
63693: NEG
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: LD_INT 1
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 0
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 1
63731: NEG
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 1
63742: NEG
63743: PUSH
63744: LD_INT 1
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: LD_INT 2
63758: NEG
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63785: LD_ADDR_VAR 0 40
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: LD_INT 0
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 0
63802: PUSH
63803: LD_INT 1
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: LD_INT 0
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 0
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: LD_INT 1
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 1
63866: PUSH
63867: LD_INT 1
63869: NEG
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 1
63877: NEG
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63897: LD_ADDR_VAR 0 41
63901: PUSH
63902: LD_INT 0
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 0
63914: PUSH
63915: LD_INT 1
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 1
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 1
63935: PUSH
63936: LD_INT 1
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: LD_INT 1
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 1
63955: NEG
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 1
63966: NEG
63967: PUSH
63968: LD_INT 1
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 1
63978: NEG
63979: PUSH
63980: LD_INT 2
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 2
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 2
64011: PUSH
64012: LD_INT 1
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 2
64021: PUSH
64022: LD_INT 2
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: PUSH
64032: LD_INT 2
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 1
64041: NEG
64042: PUSH
64043: LD_INT 1
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 2
64052: NEG
64053: PUSH
64054: LD_INT 0
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 2
64063: NEG
64064: PUSH
64065: LD_INT 1
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 2
64075: NEG
64076: PUSH
64077: LD_INT 2
64079: NEG
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 2
64087: NEG
64088: PUSH
64089: LD_INT 3
64091: NEG
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 2
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 3
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 3
64120: PUSH
64121: LD_INT 1
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 3
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 3
64140: PUSH
64141: LD_INT 3
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 2
64150: PUSH
64151: LD_INT 3
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 2
64160: NEG
64161: PUSH
64162: LD_INT 1
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 3
64171: NEG
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 3
64182: NEG
64183: PUSH
64184: LD_INT 1
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 3
64194: NEG
64195: PUSH
64196: LD_INT 2
64198: NEG
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 3
64206: NEG
64207: PUSH
64208: LD_INT 3
64210: NEG
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64247: LD_ADDR_VAR 0 42
64251: PUSH
64252: LD_INT 0
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 0
64264: PUSH
64265: LD_INT 1
64267: NEG
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 1
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 1
64285: PUSH
64286: LD_INT 1
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 0
64295: PUSH
64296: LD_INT 1
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 1
64305: NEG
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: LD_INT 1
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 1
64328: NEG
64329: PUSH
64330: LD_INT 2
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 2
64343: NEG
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: LD_INT 1
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 2
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 2
64372: PUSH
64373: LD_INT 2
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 1
64382: PUSH
64383: LD_INT 2
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: LD_INT 2
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 1
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 2
64413: NEG
64414: PUSH
64415: LD_INT 1
64417: NEG
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 2
64425: NEG
64426: PUSH
64427: LD_INT 2
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 2
64437: NEG
64438: PUSH
64439: LD_INT 3
64441: NEG
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 1
64449: NEG
64450: PUSH
64451: LD_INT 3
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: LD_INT 3
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 1
64472: PUSH
64473: LD_INT 2
64475: NEG
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 3
64483: PUSH
64484: LD_INT 2
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 3
64493: PUSH
64494: LD_INT 3
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 2
64503: PUSH
64504: LD_INT 3
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: LD_INT 3
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 0
64523: PUSH
64524: LD_INT 3
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 1
64533: NEG
64534: PUSH
64535: LD_INT 2
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 3
64544: NEG
64545: PUSH
64546: LD_INT 2
64548: NEG
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 3
64556: NEG
64557: PUSH
64558: LD_INT 3
64560: NEG
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64597: LD_ADDR_VAR 0 43
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: LD_INT 1
64617: NEG
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: LD_INT 0
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: PUSH
64636: LD_INT 1
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 1
64655: NEG
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 1
64666: NEG
64667: PUSH
64668: LD_INT 1
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 1
64678: NEG
64679: PUSH
64680: LD_INT 2
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: LD_INT 2
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 1
64701: PUSH
64702: LD_INT 1
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 2
64712: PUSH
64713: LD_INT 0
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 2
64722: PUSH
64723: LD_INT 1
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 1
64732: PUSH
64733: LD_INT 2
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: LD_INT 2
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 1
64752: NEG
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 2
64763: NEG
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 2
64774: NEG
64775: PUSH
64776: LD_INT 1
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 1
64786: NEG
64787: PUSH
64788: LD_INT 3
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: LD_INT 3
64801: NEG
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 1
64809: PUSH
64810: LD_INT 2
64812: NEG
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 2
64820: PUSH
64821: LD_INT 1
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 3
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 3
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 1
64851: PUSH
64852: LD_INT 3
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: LD_INT 3
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 1
64871: NEG
64872: PUSH
64873: LD_INT 2
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 2
64882: NEG
64883: PUSH
64884: LD_INT 1
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 3
64893: NEG
64894: PUSH
64895: LD_INT 0
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 3
64904: NEG
64905: PUSH
64906: LD_INT 1
64908: NEG
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64945: LD_ADDR_VAR 0 44
64949: PUSH
64950: LD_INT 0
64952: PUSH
64953: LD_INT 0
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 0
64962: PUSH
64963: LD_INT 1
64965: NEG
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 1
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 1
64983: PUSH
64984: LD_INT 1
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 0
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 1
65003: NEG
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: LD_INT 1
65018: NEG
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 1
65026: NEG
65027: PUSH
65028: LD_INT 2
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 1
65038: PUSH
65039: LD_INT 1
65041: NEG
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 2
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 2
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 2
65069: PUSH
65070: LD_INT 2
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 1
65079: PUSH
65080: LD_INT 2
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 1
65089: NEG
65090: PUSH
65091: LD_INT 1
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 2
65100: NEG
65101: PUSH
65102: LD_INT 0
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 2
65111: NEG
65112: PUSH
65113: LD_INT 1
65115: NEG
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 2
65123: NEG
65124: PUSH
65125: LD_INT 2
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 2
65135: NEG
65136: PUSH
65137: LD_INT 3
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 2
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 3
65158: PUSH
65159: LD_INT 0
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 3
65168: PUSH
65169: LD_INT 1
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 3
65178: PUSH
65179: LD_INT 2
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 3
65188: PUSH
65189: LD_INT 3
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 2
65198: PUSH
65199: LD_INT 3
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 2
65208: NEG
65209: PUSH
65210: LD_INT 1
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 3
65219: NEG
65220: PUSH
65221: LD_INT 0
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 3
65230: NEG
65231: PUSH
65232: LD_INT 1
65234: NEG
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 3
65242: NEG
65243: PUSH
65244: LD_INT 2
65246: NEG
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 3
65254: NEG
65255: PUSH
65256: LD_INT 3
65258: NEG
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65295: LD_ADDR_VAR 0 45
65299: PUSH
65300: LD_INT 0
65302: PUSH
65303: LD_INT 0
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: LD_INT 1
65315: NEG
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 1
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 1
65333: PUSH
65334: LD_INT 1
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: LD_INT 1
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 1
65353: NEG
65354: PUSH
65355: LD_INT 0
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 1
65364: NEG
65365: PUSH
65366: LD_INT 1
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 1
65376: NEG
65377: PUSH
65378: LD_INT 2
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: LD_INT 2
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 2
65410: PUSH
65411: LD_INT 1
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 2
65420: PUSH
65421: LD_INT 2
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 1
65430: PUSH
65431: LD_INT 2
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 0
65440: PUSH
65441: LD_INT 2
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 1
65450: NEG
65451: PUSH
65452: LD_INT 1
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 2
65461: NEG
65462: PUSH
65463: LD_INT 1
65465: NEG
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 2
65473: NEG
65474: PUSH
65475: LD_INT 2
65477: NEG
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 2
65485: NEG
65486: PUSH
65487: LD_INT 3
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 1
65497: NEG
65498: PUSH
65499: LD_INT 3
65501: NEG
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 0
65509: PUSH
65510: LD_INT 3
65512: NEG
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 1
65520: PUSH
65521: LD_INT 2
65523: NEG
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 3
65531: PUSH
65532: LD_INT 2
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 3
65541: PUSH
65542: LD_INT 3
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 2
65551: PUSH
65552: LD_INT 3
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 1
65561: PUSH
65562: LD_INT 3
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: LD_INT 3
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 1
65581: NEG
65582: PUSH
65583: LD_INT 2
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 3
65592: NEG
65593: PUSH
65594: LD_INT 2
65596: NEG
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 3
65604: NEG
65605: PUSH
65606: LD_INT 3
65608: NEG
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65645: LD_ADDR_VAR 0 46
65649: PUSH
65650: LD_INT 0
65652: PUSH
65653: LD_INT 0
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 0
65662: PUSH
65663: LD_INT 1
65665: NEG
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 1
65673: PUSH
65674: LD_INT 0
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 1
65683: PUSH
65684: LD_INT 1
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 0
65693: PUSH
65694: LD_INT 1
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 1
65703: NEG
65704: PUSH
65705: LD_INT 0
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: LD_INT 1
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 1
65726: NEG
65727: PUSH
65728: LD_INT 2
65730: NEG
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: LD_INT 2
65741: NEG
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 1
65749: PUSH
65750: LD_INT 1
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 2
65760: PUSH
65761: LD_INT 0
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 2
65770: PUSH
65771: LD_INT 1
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 1
65780: PUSH
65781: LD_INT 2
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 0
65790: PUSH
65791: LD_INT 2
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: PUSH
65802: LD_INT 1
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 2
65811: NEG
65812: PUSH
65813: LD_INT 0
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 2
65822: NEG
65823: PUSH
65824: LD_INT 1
65826: NEG
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 1
65834: NEG
65835: PUSH
65836: LD_INT 3
65838: NEG
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 0
65846: PUSH
65847: LD_INT 3
65849: NEG
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 1
65857: PUSH
65858: LD_INT 2
65860: NEG
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 2
65868: PUSH
65869: LD_INT 1
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 3
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 3
65889: PUSH
65890: LD_INT 1
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 1
65899: PUSH
65900: LD_INT 3
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: LD_INT 3
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: LD_INT 2
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 2
65930: NEG
65931: PUSH
65932: LD_INT 1
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 3
65941: NEG
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 3
65952: NEG
65953: PUSH
65954: LD_INT 1
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65993: LD_ADDR_VAR 0 47
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 0
66010: PUSH
66011: LD_INT 1
66013: NEG
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 1
66021: PUSH
66022: LD_INT 0
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 1
66031: PUSH
66032: LD_INT 1
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 0
66041: PUSH
66042: LD_INT 1
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 1
66051: NEG
66052: PUSH
66053: LD_INT 0
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 1
66062: NEG
66063: PUSH
66064: LD_INT 1
66066: NEG
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 1
66074: NEG
66075: PUSH
66076: LD_INT 2
66078: NEG
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 0
66086: PUSH
66087: LD_INT 2
66089: NEG
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 1
66097: PUSH
66098: LD_INT 1
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 2
66108: NEG
66109: PUSH
66110: LD_INT 1
66112: NEG
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 2
66120: NEG
66121: PUSH
66122: LD_INT 2
66124: NEG
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66144: LD_ADDR_VAR 0 48
66148: PUSH
66149: LD_INT 0
66151: PUSH
66152: LD_INT 0
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 0
66161: PUSH
66162: LD_INT 1
66164: NEG
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 1
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 1
66182: PUSH
66183: LD_INT 1
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 0
66192: PUSH
66193: LD_INT 1
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 1
66202: NEG
66203: PUSH
66204: LD_INT 0
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 1
66213: NEG
66214: PUSH
66215: LD_INT 1
66217: NEG
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 1
66225: NEG
66226: PUSH
66227: LD_INT 2
66229: NEG
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 0
66237: PUSH
66238: LD_INT 2
66240: NEG
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 1
66248: PUSH
66249: LD_INT 1
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 2
66259: PUSH
66260: LD_INT 0
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 2
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66291: LD_ADDR_VAR 0 49
66295: PUSH
66296: LD_INT 0
66298: PUSH
66299: LD_INT 0
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 0
66308: PUSH
66309: LD_INT 1
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 1
66319: PUSH
66320: LD_INT 0
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 1
66329: PUSH
66330: LD_INT 1
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 0
66339: PUSH
66340: LD_INT 1
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 1
66349: NEG
66350: PUSH
66351: LD_INT 0
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 1
66360: NEG
66361: PUSH
66362: LD_INT 1
66364: NEG
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 1
66372: PUSH
66373: LD_INT 1
66375: NEG
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 2
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 2
66393: PUSH
66394: LD_INT 1
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 2
66403: PUSH
66404: LD_INT 2
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 1
66413: PUSH
66414: LD_INT 2
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66435: LD_ADDR_VAR 0 50
66439: PUSH
66440: LD_INT 0
66442: PUSH
66443: LD_INT 0
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 0
66452: PUSH
66453: LD_INT 1
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 1
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 1
66473: PUSH
66474: LD_INT 1
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: LD_INT 1
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 1
66493: NEG
66494: PUSH
66495: LD_INT 0
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 1
66504: NEG
66505: PUSH
66506: LD_INT 1
66508: NEG
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 2
66516: PUSH
66517: LD_INT 1
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 2
66526: PUSH
66527: LD_INT 2
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 1
66536: PUSH
66537: LD_INT 2
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: LD_INT 2
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 1
66556: NEG
66557: PUSH
66558: LD_INT 1
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66579: LD_ADDR_VAR 0 51
66583: PUSH
66584: LD_INT 0
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 0
66596: PUSH
66597: LD_INT 1
66599: NEG
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 1
66607: PUSH
66608: LD_INT 0
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 1
66617: PUSH
66618: LD_INT 1
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: LD_INT 1
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 1
66637: NEG
66638: PUSH
66639: LD_INT 0
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 1
66660: PUSH
66661: LD_INT 2
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 0
66670: PUSH
66671: LD_INT 2
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 1
66680: NEG
66681: PUSH
66682: LD_INT 1
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 2
66691: NEG
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 2
66702: NEG
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66726: LD_ADDR_VAR 0 52
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 0
66743: PUSH
66744: LD_INT 1
66746: NEG
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 1
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 1
66764: PUSH
66765: LD_INT 1
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 0
66774: PUSH
66775: LD_INT 1
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 1
66784: NEG
66785: PUSH
66786: LD_INT 0
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 1
66795: NEG
66796: PUSH
66797: LD_INT 1
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 1
66807: NEG
66808: PUSH
66809: LD_INT 2
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 1
66819: NEG
66820: PUSH
66821: LD_INT 1
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 2
66830: NEG
66831: PUSH
66832: LD_INT 0
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 2
66841: NEG
66842: PUSH
66843: LD_INT 1
66845: NEG
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 2
66853: NEG
66854: PUSH
66855: LD_INT 2
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66877: LD_ADDR_VAR 0 53
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: LD_INT 0
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 0
66894: PUSH
66895: LD_INT 1
66897: NEG
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 1
66905: PUSH
66906: LD_INT 0
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 1
66915: PUSH
66916: LD_INT 1
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 0
66925: PUSH
66926: LD_INT 1
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 1
66935: NEG
66936: PUSH
66937: LD_INT 0
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 1
66946: NEG
66947: PUSH
66948: LD_INT 1
66950: NEG
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 1
66958: NEG
66959: PUSH
66960: LD_INT 2
66962: NEG
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 0
66970: PUSH
66971: LD_INT 2
66973: NEG
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 1
66981: PUSH
66982: LD_INT 1
66984: NEG
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 2
66992: PUSH
66993: LD_INT 0
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 2
67002: PUSH
67003: LD_INT 1
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 2
67012: PUSH
67013: LD_INT 2
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 1
67022: PUSH
67023: LD_INT 2
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 0
67032: PUSH
67033: LD_INT 2
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 1
67042: NEG
67043: PUSH
67044: LD_INT 1
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 2
67053: NEG
67054: PUSH
67055: LD_INT 0
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 2
67064: NEG
67065: PUSH
67066: LD_INT 1
67068: NEG
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 2
67076: NEG
67077: PUSH
67078: LD_INT 2
67080: NEG
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67107: LD_ADDR_VAR 0 54
67111: PUSH
67112: LD_INT 0
67114: PUSH
67115: LD_INT 0
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: LD_INT 1
67127: NEG
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 1
67135: PUSH
67136: LD_INT 0
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 1
67145: PUSH
67146: LD_INT 1
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 0
67155: PUSH
67156: LD_INT 1
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 1
67165: NEG
67166: PUSH
67167: LD_INT 0
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 1
67176: NEG
67177: PUSH
67178: LD_INT 1
67180: NEG
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 1
67188: NEG
67189: PUSH
67190: LD_INT 2
67192: NEG
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 0
67200: PUSH
67201: LD_INT 2
67203: NEG
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 1
67211: PUSH
67212: LD_INT 1
67214: NEG
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 2
67222: PUSH
67223: LD_INT 0
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 2
67232: PUSH
67233: LD_INT 1
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 2
67242: PUSH
67243: LD_INT 2
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 1
67252: PUSH
67253: LD_INT 2
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 0
67262: PUSH
67263: LD_INT 2
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 1
67272: NEG
67273: PUSH
67274: LD_INT 1
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 2
67283: NEG
67284: PUSH
67285: LD_INT 0
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 2
67294: NEG
67295: PUSH
67296: LD_INT 1
67298: NEG
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 2
67306: NEG
67307: PUSH
67308: LD_INT 2
67310: NEG
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67337: LD_ADDR_VAR 0 55
67341: PUSH
67342: LD_INT 0
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 0
67354: PUSH
67355: LD_INT 1
67357: NEG
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 1
67365: PUSH
67366: LD_INT 0
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 1
67375: PUSH
67376: LD_INT 1
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 0
67385: PUSH
67386: LD_INT 1
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 1
67395: NEG
67396: PUSH
67397: LD_INT 0
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 1
67406: NEG
67407: PUSH
67408: LD_INT 1
67410: NEG
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 1
67418: NEG
67419: PUSH
67420: LD_INT 2
67422: NEG
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 0
67430: PUSH
67431: LD_INT 2
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 1
67441: PUSH
67442: LD_INT 1
67444: NEG
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 2
67452: PUSH
67453: LD_INT 0
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 2
67462: PUSH
67463: LD_INT 1
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 2
67472: PUSH
67473: LD_INT 2
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 1
67482: PUSH
67483: LD_INT 2
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 0
67492: PUSH
67493: LD_INT 2
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 1
67502: NEG
67503: PUSH
67504: LD_INT 1
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 2
67513: NEG
67514: PUSH
67515: LD_INT 0
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 2
67524: NEG
67525: PUSH
67526: LD_INT 1
67528: NEG
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 2
67536: NEG
67537: PUSH
67538: LD_INT 2
67540: NEG
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67567: LD_ADDR_VAR 0 56
67571: PUSH
67572: LD_INT 0
67574: PUSH
67575: LD_INT 0
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 0
67584: PUSH
67585: LD_INT 1
67587: NEG
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 1
67595: PUSH
67596: LD_INT 0
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 1
67605: PUSH
67606: LD_INT 1
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 0
67615: PUSH
67616: LD_INT 1
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 1
67625: NEG
67626: PUSH
67627: LD_INT 0
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 1
67636: NEG
67637: PUSH
67638: LD_INT 1
67640: NEG
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 1
67648: NEG
67649: PUSH
67650: LD_INT 2
67652: NEG
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: LD_INT 2
67663: NEG
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 1
67671: PUSH
67672: LD_INT 1
67674: NEG
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 2
67682: PUSH
67683: LD_INT 0
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 2
67692: PUSH
67693: LD_INT 1
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 2
67702: PUSH
67703: LD_INT 2
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 1
67712: PUSH
67713: LD_INT 2
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 0
67722: PUSH
67723: LD_INT 2
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 1
67732: NEG
67733: PUSH
67734: LD_INT 1
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 2
67743: NEG
67744: PUSH
67745: LD_INT 0
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 2
67754: NEG
67755: PUSH
67756: LD_INT 1
67758: NEG
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 2
67766: NEG
67767: PUSH
67768: LD_INT 2
67770: NEG
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67797: LD_ADDR_VAR 0 57
67801: PUSH
67802: LD_INT 0
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 0
67814: PUSH
67815: LD_INT 1
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 1
67825: PUSH
67826: LD_INT 0
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 1
67835: PUSH
67836: LD_INT 1
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 0
67845: PUSH
67846: LD_INT 1
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 1
67855: NEG
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 1
67866: NEG
67867: PUSH
67868: LD_INT 1
67870: NEG
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 1
67878: NEG
67879: PUSH
67880: LD_INT 2
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 0
67890: PUSH
67891: LD_INT 2
67893: NEG
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 1
67901: PUSH
67902: LD_INT 1
67904: NEG
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 2
67912: PUSH
67913: LD_INT 0
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 2
67922: PUSH
67923: LD_INT 1
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 2
67932: PUSH
67933: LD_INT 2
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 1
67942: PUSH
67943: LD_INT 2
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: LD_INT 2
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 1
67962: NEG
67963: PUSH
67964: LD_INT 1
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 2
67973: NEG
67974: PUSH
67975: LD_INT 0
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 2
67984: NEG
67985: PUSH
67986: LD_INT 1
67988: NEG
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 2
67996: NEG
67997: PUSH
67998: LD_INT 2
68000: NEG
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68027: LD_ADDR_VAR 0 58
68031: PUSH
68032: LD_INT 0
68034: PUSH
68035: LD_INT 0
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 0
68044: PUSH
68045: LD_INT 1
68047: NEG
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 1
68055: PUSH
68056: LD_INT 0
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 1
68065: PUSH
68066: LD_INT 1
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 0
68075: PUSH
68076: LD_INT 1
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 1
68085: NEG
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 1
68096: NEG
68097: PUSH
68098: LD_INT 1
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 1
68108: NEG
68109: PUSH
68110: LD_INT 2
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 0
68120: PUSH
68121: LD_INT 2
68123: NEG
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 1
68131: PUSH
68132: LD_INT 1
68134: NEG
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 2
68142: PUSH
68143: LD_INT 0
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 2
68152: PUSH
68153: LD_INT 1
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 2
68162: PUSH
68163: LD_INT 2
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 1
68172: PUSH
68173: LD_INT 2
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 0
68182: PUSH
68183: LD_INT 2
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 1
68192: NEG
68193: PUSH
68194: LD_INT 1
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 2
68203: NEG
68204: PUSH
68205: LD_INT 0
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 2
68214: NEG
68215: PUSH
68216: LD_INT 1
68218: NEG
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 2
68226: NEG
68227: PUSH
68228: LD_INT 2
68230: NEG
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68257: LD_ADDR_VAR 0 59
68261: PUSH
68262: LD_INT 0
68264: PUSH
68265: LD_INT 0
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 0
68274: PUSH
68275: LD_INT 1
68277: NEG
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 1
68285: PUSH
68286: LD_INT 0
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 1
68295: PUSH
68296: LD_INT 1
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 0
68305: PUSH
68306: LD_INT 1
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 1
68315: NEG
68316: PUSH
68317: LD_INT 0
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 1
68326: NEG
68327: PUSH
68328: LD_INT 1
68330: NEG
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68345: LD_ADDR_VAR 0 60
68349: PUSH
68350: LD_INT 0
68352: PUSH
68353: LD_INT 0
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 0
68362: PUSH
68363: LD_INT 1
68365: NEG
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 1
68373: PUSH
68374: LD_INT 0
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 1
68383: PUSH
68384: LD_INT 1
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 0
68393: PUSH
68394: LD_INT 1
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 1
68403: NEG
68404: PUSH
68405: LD_INT 0
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 1
68414: NEG
68415: PUSH
68416: LD_INT 1
68418: NEG
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68433: LD_ADDR_VAR 0 61
68437: PUSH
68438: LD_INT 0
68440: PUSH
68441: LD_INT 0
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 0
68450: PUSH
68451: LD_INT 1
68453: NEG
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 1
68461: PUSH
68462: LD_INT 0
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 1
68471: PUSH
68472: LD_INT 1
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 0
68481: PUSH
68482: LD_INT 1
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 1
68491: NEG
68492: PUSH
68493: LD_INT 0
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 1
68502: NEG
68503: PUSH
68504: LD_INT 1
68506: NEG
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68521: LD_ADDR_VAR 0 62
68525: PUSH
68526: LD_INT 0
68528: PUSH
68529: LD_INT 0
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 0
68538: PUSH
68539: LD_INT 1
68541: NEG
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 1
68549: PUSH
68550: LD_INT 0
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 1
68559: PUSH
68560: LD_INT 1
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 0
68569: PUSH
68570: LD_INT 1
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 1
68579: NEG
68580: PUSH
68581: LD_INT 0
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 1
68590: NEG
68591: PUSH
68592: LD_INT 1
68594: NEG
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68609: LD_ADDR_VAR 0 63
68613: PUSH
68614: LD_INT 0
68616: PUSH
68617: LD_INT 0
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 0
68626: PUSH
68627: LD_INT 1
68629: NEG
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 1
68637: PUSH
68638: LD_INT 0
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 1
68647: PUSH
68648: LD_INT 1
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 0
68657: PUSH
68658: LD_INT 1
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 1
68667: NEG
68668: PUSH
68669: LD_INT 0
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 1
68678: NEG
68679: PUSH
68680: LD_INT 1
68682: NEG
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68697: LD_ADDR_VAR 0 64
68701: PUSH
68702: LD_INT 0
68704: PUSH
68705: LD_INT 0
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 0
68714: PUSH
68715: LD_INT 1
68717: NEG
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 1
68725: PUSH
68726: LD_INT 0
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 1
68735: PUSH
68736: LD_INT 1
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 0
68745: PUSH
68746: LD_INT 1
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 1
68755: NEG
68756: PUSH
68757: LD_INT 0
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 1
68766: NEG
68767: PUSH
68768: LD_INT 1
68770: NEG
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: ST_TO_ADDR
// end ; 1 :
68785: GO 74682
68787: LD_INT 1
68789: DOUBLE
68790: EQUAL
68791: IFTRUE 68795
68793: GO 71418
68795: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68796: LD_ADDR_VAR 0 11
68800: PUSH
68801: LD_INT 1
68803: NEG
68804: PUSH
68805: LD_INT 3
68807: NEG
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 0
68815: PUSH
68816: LD_INT 3
68818: NEG
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 1
68826: PUSH
68827: LD_INT 2
68829: NEG
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: LIST
68839: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68840: LD_ADDR_VAR 0 12
68844: PUSH
68845: LD_INT 2
68847: PUSH
68848: LD_INT 1
68850: NEG
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 3
68858: PUSH
68859: LD_INT 0
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 3
68868: PUSH
68869: LD_INT 1
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: LIST
68880: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68881: LD_ADDR_VAR 0 13
68885: PUSH
68886: LD_INT 3
68888: PUSH
68889: LD_INT 2
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 3
68898: PUSH
68899: LD_INT 3
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 2
68908: PUSH
68909: LD_INT 3
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: LIST
68920: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68921: LD_ADDR_VAR 0 14
68925: PUSH
68926: LD_INT 1
68928: PUSH
68929: LD_INT 3
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 0
68938: PUSH
68939: LD_INT 3
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 1
68948: NEG
68949: PUSH
68950: LD_INT 2
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: LIST
68961: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68962: LD_ADDR_VAR 0 15
68966: PUSH
68967: LD_INT 2
68969: NEG
68970: PUSH
68971: LD_INT 1
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 3
68980: NEG
68981: PUSH
68982: LD_INT 0
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 3
68991: NEG
68992: PUSH
68993: LD_INT 1
68995: NEG
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: LIST
69005: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69006: LD_ADDR_VAR 0 16
69010: PUSH
69011: LD_INT 2
69013: NEG
69014: PUSH
69015: LD_INT 3
69017: NEG
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PUSH
69023: LD_INT 3
69025: NEG
69026: PUSH
69027: LD_INT 2
69029: NEG
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 3
69037: NEG
69038: PUSH
69039: LD_INT 3
69041: NEG
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: LIST
69051: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69052: LD_ADDR_VAR 0 17
69056: PUSH
69057: LD_INT 1
69059: NEG
69060: PUSH
69061: LD_INT 3
69063: NEG
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 0
69071: PUSH
69072: LD_INT 3
69074: NEG
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 1
69082: PUSH
69083: LD_INT 2
69085: NEG
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: LIST
69095: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69096: LD_ADDR_VAR 0 18
69100: PUSH
69101: LD_INT 2
69103: PUSH
69104: LD_INT 1
69106: NEG
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 3
69114: PUSH
69115: LD_INT 0
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 3
69124: PUSH
69125: LD_INT 1
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: LIST
69136: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69137: LD_ADDR_VAR 0 19
69141: PUSH
69142: LD_INT 3
69144: PUSH
69145: LD_INT 2
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 3
69154: PUSH
69155: LD_INT 3
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 2
69164: PUSH
69165: LD_INT 3
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: LIST
69176: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69177: LD_ADDR_VAR 0 20
69181: PUSH
69182: LD_INT 1
69184: PUSH
69185: LD_INT 3
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 0
69194: PUSH
69195: LD_INT 3
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 1
69204: NEG
69205: PUSH
69206: LD_INT 2
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: LIST
69217: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69218: LD_ADDR_VAR 0 21
69222: PUSH
69223: LD_INT 2
69225: NEG
69226: PUSH
69227: LD_INT 1
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 3
69236: NEG
69237: PUSH
69238: LD_INT 0
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 3
69247: NEG
69248: PUSH
69249: LD_INT 1
69251: NEG
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: LIST
69261: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69262: LD_ADDR_VAR 0 22
69266: PUSH
69267: LD_INT 2
69269: NEG
69270: PUSH
69271: LD_INT 3
69273: NEG
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 3
69281: NEG
69282: PUSH
69283: LD_INT 2
69285: NEG
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 3
69293: NEG
69294: PUSH
69295: LD_INT 3
69297: NEG
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: LIST
69307: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69308: LD_ADDR_VAR 0 23
69312: PUSH
69313: LD_INT 0
69315: PUSH
69316: LD_INT 3
69318: NEG
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 1
69326: NEG
69327: PUSH
69328: LD_INT 4
69330: NEG
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 1
69338: PUSH
69339: LD_INT 3
69341: NEG
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: LIST
69351: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69352: LD_ADDR_VAR 0 24
69356: PUSH
69357: LD_INT 3
69359: PUSH
69360: LD_INT 0
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 3
69369: PUSH
69370: LD_INT 1
69372: NEG
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 4
69380: PUSH
69381: LD_INT 1
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: LIST
69392: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69393: LD_ADDR_VAR 0 25
69397: PUSH
69398: LD_INT 3
69400: PUSH
69401: LD_INT 3
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 4
69410: PUSH
69411: LD_INT 3
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 3
69420: PUSH
69421: LD_INT 4
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: LIST
69432: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69433: LD_ADDR_VAR 0 26
69437: PUSH
69438: LD_INT 0
69440: PUSH
69441: LD_INT 3
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 1
69450: PUSH
69451: LD_INT 4
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 1
69460: NEG
69461: PUSH
69462: LD_INT 3
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: LIST
69473: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69474: LD_ADDR_VAR 0 27
69478: PUSH
69479: LD_INT 3
69481: NEG
69482: PUSH
69483: LD_INT 0
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 3
69492: NEG
69493: PUSH
69494: LD_INT 1
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 4
69503: NEG
69504: PUSH
69505: LD_INT 1
69507: NEG
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: LIST
69517: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69518: LD_ADDR_VAR 0 28
69522: PUSH
69523: LD_INT 3
69525: NEG
69526: PUSH
69527: LD_INT 3
69529: NEG
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 3
69537: NEG
69538: PUSH
69539: LD_INT 4
69541: NEG
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: LD_INT 4
69549: NEG
69550: PUSH
69551: LD_INT 3
69553: NEG
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: LIST
69563: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69564: LD_ADDR_VAR 0 29
69568: PUSH
69569: LD_INT 1
69571: NEG
69572: PUSH
69573: LD_INT 3
69575: NEG
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: PUSH
69581: LD_INT 0
69583: PUSH
69584: LD_INT 3
69586: NEG
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 1
69594: PUSH
69595: LD_INT 2
69597: NEG
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 1
69605: NEG
69606: PUSH
69607: LD_INT 4
69609: NEG
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 0
69617: PUSH
69618: LD_INT 4
69620: NEG
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 1
69628: PUSH
69629: LD_INT 3
69631: NEG
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 1
69639: NEG
69640: PUSH
69641: LD_INT 5
69643: NEG
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 0
69651: PUSH
69652: LD_INT 5
69654: NEG
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 1
69662: PUSH
69663: LD_INT 4
69665: NEG
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: LD_INT 1
69673: NEG
69674: PUSH
69675: LD_INT 6
69677: NEG
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 0
69685: PUSH
69686: LD_INT 6
69688: NEG
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 1
69696: PUSH
69697: LD_INT 5
69699: NEG
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69719: LD_ADDR_VAR 0 30
69723: PUSH
69724: LD_INT 2
69726: PUSH
69727: LD_INT 1
69729: NEG
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 3
69737: PUSH
69738: LD_INT 0
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 3
69747: PUSH
69748: LD_INT 1
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 3
69757: PUSH
69758: LD_INT 1
69760: NEG
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 4
69768: PUSH
69769: LD_INT 0
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 4
69778: PUSH
69779: LD_INT 1
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 4
69788: PUSH
69789: LD_INT 1
69791: NEG
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 5
69799: PUSH
69800: LD_INT 0
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 5
69809: PUSH
69810: LD_INT 1
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 5
69819: PUSH
69820: LD_INT 1
69822: NEG
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 6
69830: PUSH
69831: LD_INT 0
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 6
69840: PUSH
69841: LD_INT 1
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69862: LD_ADDR_VAR 0 31
69866: PUSH
69867: LD_INT 3
69869: PUSH
69870: LD_INT 2
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 3
69879: PUSH
69880: LD_INT 3
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 2
69889: PUSH
69890: LD_INT 3
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 4
69899: PUSH
69900: LD_INT 3
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 4
69909: PUSH
69910: LD_INT 4
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 3
69919: PUSH
69920: LD_INT 4
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 5
69929: PUSH
69930: LD_INT 4
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 5
69939: PUSH
69940: LD_INT 5
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 4
69949: PUSH
69950: LD_INT 5
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 6
69959: PUSH
69960: LD_INT 5
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 6
69969: PUSH
69970: LD_INT 6
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 5
69979: PUSH
69980: LD_INT 6
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70001: LD_ADDR_VAR 0 32
70005: PUSH
70006: LD_INT 1
70008: PUSH
70009: LD_INT 3
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 0
70018: PUSH
70019: LD_INT 3
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 1
70028: NEG
70029: PUSH
70030: LD_INT 2
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 1
70039: PUSH
70040: LD_INT 4
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 0
70049: PUSH
70050: LD_INT 4
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 1
70059: NEG
70060: PUSH
70061: LD_INT 3
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 1
70070: PUSH
70071: LD_INT 5
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 0
70080: PUSH
70081: LD_INT 5
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 1
70090: NEG
70091: PUSH
70092: LD_INT 4
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 1
70101: PUSH
70102: LD_INT 6
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 0
70111: PUSH
70112: LD_INT 6
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 1
70121: NEG
70122: PUSH
70123: LD_INT 5
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70144: LD_ADDR_VAR 0 33
70148: PUSH
70149: LD_INT 2
70151: NEG
70152: PUSH
70153: LD_INT 1
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 3
70162: NEG
70163: PUSH
70164: LD_INT 0
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 3
70173: NEG
70174: PUSH
70175: LD_INT 1
70177: NEG
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 3
70185: NEG
70186: PUSH
70187: LD_INT 1
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PUSH
70194: LD_INT 4
70196: NEG
70197: PUSH
70198: LD_INT 0
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 4
70207: NEG
70208: PUSH
70209: LD_INT 1
70211: NEG
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 4
70219: NEG
70220: PUSH
70221: LD_INT 1
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 5
70230: NEG
70231: PUSH
70232: LD_INT 0
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 5
70241: NEG
70242: PUSH
70243: LD_INT 1
70245: NEG
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 5
70253: NEG
70254: PUSH
70255: LD_INT 1
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 6
70264: NEG
70265: PUSH
70266: LD_INT 0
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 6
70275: NEG
70276: PUSH
70277: LD_INT 1
70279: NEG
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70299: LD_ADDR_VAR 0 34
70303: PUSH
70304: LD_INT 2
70306: NEG
70307: PUSH
70308: LD_INT 3
70310: NEG
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 3
70318: NEG
70319: PUSH
70320: LD_INT 2
70322: NEG
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 3
70330: NEG
70331: PUSH
70332: LD_INT 3
70334: NEG
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 3
70342: NEG
70343: PUSH
70344: LD_INT 4
70346: NEG
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 4
70354: NEG
70355: PUSH
70356: LD_INT 3
70358: NEG
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 4
70366: NEG
70367: PUSH
70368: LD_INT 4
70370: NEG
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: LD_INT 4
70378: NEG
70379: PUSH
70380: LD_INT 5
70382: NEG
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 5
70390: NEG
70391: PUSH
70392: LD_INT 4
70394: NEG
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 5
70402: NEG
70403: PUSH
70404: LD_INT 5
70406: NEG
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 5
70414: NEG
70415: PUSH
70416: LD_INT 6
70418: NEG
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 6
70426: NEG
70427: PUSH
70428: LD_INT 5
70430: NEG
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 6
70438: NEG
70439: PUSH
70440: LD_INT 6
70442: NEG
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70462: LD_ADDR_VAR 0 41
70466: PUSH
70467: LD_INT 0
70469: PUSH
70470: LD_INT 2
70472: NEG
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 1
70480: NEG
70481: PUSH
70482: LD_INT 3
70484: NEG
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 1
70492: PUSH
70493: LD_INT 2
70495: NEG
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: LIST
70505: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70506: LD_ADDR_VAR 0 42
70510: PUSH
70511: LD_INT 2
70513: PUSH
70514: LD_INT 0
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 2
70523: PUSH
70524: LD_INT 1
70526: NEG
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 3
70534: PUSH
70535: LD_INT 1
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: LIST
70546: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70547: LD_ADDR_VAR 0 43
70551: PUSH
70552: LD_INT 2
70554: PUSH
70555: LD_INT 2
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 3
70564: PUSH
70565: LD_INT 2
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: LD_INT 2
70574: PUSH
70575: LD_INT 3
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: LIST
70586: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70587: LD_ADDR_VAR 0 44
70591: PUSH
70592: LD_INT 0
70594: PUSH
70595: LD_INT 2
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 1
70604: PUSH
70605: LD_INT 3
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 1
70614: NEG
70615: PUSH
70616: LD_INT 2
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: LIST
70627: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70628: LD_ADDR_VAR 0 45
70632: PUSH
70633: LD_INT 2
70635: NEG
70636: PUSH
70637: LD_INT 0
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 2
70646: NEG
70647: PUSH
70648: LD_INT 1
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 3
70657: NEG
70658: PUSH
70659: LD_INT 1
70661: NEG
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: LIST
70671: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70672: LD_ADDR_VAR 0 46
70676: PUSH
70677: LD_INT 2
70679: NEG
70680: PUSH
70681: LD_INT 2
70683: NEG
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 2
70691: NEG
70692: PUSH
70693: LD_INT 3
70695: NEG
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 3
70703: NEG
70704: PUSH
70705: LD_INT 2
70707: NEG
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: LIST
70717: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70718: LD_ADDR_VAR 0 47
70722: PUSH
70723: LD_INT 2
70725: NEG
70726: PUSH
70727: LD_INT 3
70729: NEG
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 1
70737: NEG
70738: PUSH
70739: LD_INT 3
70741: NEG
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70751: LD_ADDR_VAR 0 48
70755: PUSH
70756: LD_INT 1
70758: PUSH
70759: LD_INT 2
70761: NEG
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 2
70769: PUSH
70770: LD_INT 1
70772: NEG
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70782: LD_ADDR_VAR 0 49
70786: PUSH
70787: LD_INT 3
70789: PUSH
70790: LD_INT 1
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 3
70799: PUSH
70800: LD_INT 2
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70811: LD_ADDR_VAR 0 50
70815: PUSH
70816: LD_INT 2
70818: PUSH
70819: LD_INT 3
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 1
70828: PUSH
70829: LD_INT 3
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70840: LD_ADDR_VAR 0 51
70844: PUSH
70845: LD_INT 1
70847: NEG
70848: PUSH
70849: LD_INT 2
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 2
70858: NEG
70859: PUSH
70860: LD_INT 1
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70871: LD_ADDR_VAR 0 52
70875: PUSH
70876: LD_INT 3
70878: NEG
70879: PUSH
70880: LD_INT 1
70882: NEG
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: LD_INT 3
70890: NEG
70891: PUSH
70892: LD_INT 2
70894: NEG
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70904: LD_ADDR_VAR 0 53
70908: PUSH
70909: LD_INT 1
70911: NEG
70912: PUSH
70913: LD_INT 3
70915: NEG
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 0
70923: PUSH
70924: LD_INT 3
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 1
70934: PUSH
70935: LD_INT 2
70937: NEG
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: LIST
70947: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70948: LD_ADDR_VAR 0 54
70952: PUSH
70953: LD_INT 2
70955: PUSH
70956: LD_INT 1
70958: NEG
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 3
70966: PUSH
70967: LD_INT 0
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: LD_INT 3
70976: PUSH
70977: LD_INT 1
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: LIST
70988: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70989: LD_ADDR_VAR 0 55
70993: PUSH
70994: LD_INT 3
70996: PUSH
70997: LD_INT 2
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 3
71006: PUSH
71007: LD_INT 3
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 2
71016: PUSH
71017: LD_INT 3
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: LIST
71028: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71029: LD_ADDR_VAR 0 56
71033: PUSH
71034: LD_INT 1
71036: PUSH
71037: LD_INT 3
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 0
71046: PUSH
71047: LD_INT 3
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 1
71056: NEG
71057: PUSH
71058: LD_INT 2
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: LIST
71069: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71070: LD_ADDR_VAR 0 57
71074: PUSH
71075: LD_INT 2
71077: NEG
71078: PUSH
71079: LD_INT 1
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 3
71088: NEG
71089: PUSH
71090: LD_INT 0
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 3
71099: NEG
71100: PUSH
71101: LD_INT 1
71103: NEG
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: LIST
71113: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71114: LD_ADDR_VAR 0 58
71118: PUSH
71119: LD_INT 2
71121: NEG
71122: PUSH
71123: LD_INT 3
71125: NEG
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 3
71133: NEG
71134: PUSH
71135: LD_INT 2
71137: NEG
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 3
71145: NEG
71146: PUSH
71147: LD_INT 3
71149: NEG
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: LIST
71159: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71160: LD_ADDR_VAR 0 59
71164: PUSH
71165: LD_INT 1
71167: NEG
71168: PUSH
71169: LD_INT 2
71171: NEG
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 0
71179: PUSH
71180: LD_INT 2
71182: NEG
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: LD_INT 1
71190: PUSH
71191: LD_INT 1
71193: NEG
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: LIST
71203: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71204: LD_ADDR_VAR 0 60
71208: PUSH
71209: LD_INT 1
71211: PUSH
71212: LD_INT 1
71214: NEG
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 2
71222: PUSH
71223: LD_INT 0
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 2
71232: PUSH
71233: LD_INT 1
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: LIST
71244: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71245: LD_ADDR_VAR 0 61
71249: PUSH
71250: LD_INT 2
71252: PUSH
71253: LD_INT 1
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 2
71262: PUSH
71263: LD_INT 2
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 1
71272: PUSH
71273: LD_INT 2
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: LIST
71284: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71285: LD_ADDR_VAR 0 62
71289: PUSH
71290: LD_INT 1
71292: PUSH
71293: LD_INT 2
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PUSH
71300: LD_INT 0
71302: PUSH
71303: LD_INT 2
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 1
71312: NEG
71313: PUSH
71314: LD_INT 1
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: LIST
71325: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71326: LD_ADDR_VAR 0 63
71330: PUSH
71331: LD_INT 1
71333: NEG
71334: PUSH
71335: LD_INT 1
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 2
71344: NEG
71345: PUSH
71346: LD_INT 0
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 2
71355: NEG
71356: PUSH
71357: LD_INT 1
71359: NEG
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: LIST
71369: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71370: LD_ADDR_VAR 0 64
71374: PUSH
71375: LD_INT 1
71377: NEG
71378: PUSH
71379: LD_INT 2
71381: NEG
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 2
71389: NEG
71390: PUSH
71391: LD_INT 1
71393: NEG
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 2
71401: NEG
71402: PUSH
71403: LD_INT 2
71405: NEG
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: LIST
71415: ST_TO_ADDR
// end ; 2 :
71416: GO 74682
71418: LD_INT 2
71420: DOUBLE
71421: EQUAL
71422: IFTRUE 71426
71424: GO 74681
71426: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71427: LD_ADDR_VAR 0 29
71431: PUSH
71432: LD_INT 4
71434: PUSH
71435: LD_INT 0
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 4
71444: PUSH
71445: LD_INT 1
71447: NEG
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: LD_INT 5
71455: PUSH
71456: LD_INT 0
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 5
71465: PUSH
71466: LD_INT 1
71468: PUSH
71469: EMPTY
71470: LIST
71471: LIST
71472: PUSH
71473: LD_INT 4
71475: PUSH
71476: LD_INT 1
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: PUSH
71483: LD_INT 3
71485: PUSH
71486: LD_INT 0
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 3
71495: PUSH
71496: LD_INT 1
71498: NEG
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 3
71506: PUSH
71507: LD_INT 2
71509: NEG
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 5
71517: PUSH
71518: LD_INT 2
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 3
71527: PUSH
71528: LD_INT 3
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 3
71537: PUSH
71538: LD_INT 2
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PUSH
71545: LD_INT 4
71547: PUSH
71548: LD_INT 3
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: LD_INT 4
71557: PUSH
71558: LD_INT 4
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 3
71567: PUSH
71568: LD_INT 4
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 2
71577: PUSH
71578: LD_INT 3
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: LD_INT 2
71587: PUSH
71588: LD_INT 2
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: LD_INT 4
71597: PUSH
71598: LD_INT 2
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 2
71607: PUSH
71608: LD_INT 4
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: LD_INT 0
71617: PUSH
71618: LD_INT 4
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PUSH
71625: LD_INT 0
71627: PUSH
71628: LD_INT 3
71630: PUSH
71631: EMPTY
71632: LIST
71633: LIST
71634: PUSH
71635: LD_INT 1
71637: PUSH
71638: LD_INT 4
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: PUSH
71645: LD_INT 1
71647: PUSH
71648: LD_INT 5
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 0
71657: PUSH
71658: LD_INT 5
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 1
71667: NEG
71668: PUSH
71669: LD_INT 4
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: PUSH
71676: LD_INT 1
71678: NEG
71679: PUSH
71680: LD_INT 3
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: PUSH
71687: LD_INT 2
71689: PUSH
71690: LD_INT 5
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: PUSH
71697: LD_INT 2
71699: NEG
71700: PUSH
71701: LD_INT 3
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: LD_INT 3
71710: NEG
71711: PUSH
71712: LD_INT 0
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_INT 3
71721: NEG
71722: PUSH
71723: LD_INT 1
71725: NEG
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: PUSH
71731: LD_INT 2
71733: NEG
71734: PUSH
71735: LD_INT 0
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PUSH
71742: LD_INT 2
71744: NEG
71745: PUSH
71746: LD_INT 1
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: PUSH
71753: LD_INT 3
71755: NEG
71756: PUSH
71757: LD_INT 1
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PUSH
71764: LD_INT 4
71766: NEG
71767: PUSH
71768: LD_INT 0
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 4
71777: NEG
71778: PUSH
71779: LD_INT 1
71781: NEG
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 4
71789: NEG
71790: PUSH
71791: LD_INT 2
71793: NEG
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PUSH
71799: LD_INT 2
71801: NEG
71802: PUSH
71803: LD_INT 2
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 4
71812: NEG
71813: PUSH
71814: LD_INT 4
71816: NEG
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 4
71824: NEG
71825: PUSH
71826: LD_INT 5
71828: NEG
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 3
71836: NEG
71837: PUSH
71838: LD_INT 4
71840: NEG
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: LD_INT 3
71848: NEG
71849: PUSH
71850: LD_INT 3
71852: NEG
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_INT 4
71860: NEG
71861: PUSH
71862: LD_INT 3
71864: NEG
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PUSH
71870: LD_INT 5
71872: NEG
71873: PUSH
71874: LD_INT 4
71876: NEG
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: PUSH
71882: LD_INT 5
71884: NEG
71885: PUSH
71886: LD_INT 5
71888: NEG
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 3
71896: NEG
71897: PUSH
71898: LD_INT 5
71900: NEG
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: LD_INT 5
71908: NEG
71909: PUSH
71910: LD_INT 3
71912: NEG
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71965: LD_ADDR_VAR 0 30
71969: PUSH
71970: LD_INT 4
71972: PUSH
71973: LD_INT 4
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 4
71982: PUSH
71983: LD_INT 3
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 5
71992: PUSH
71993: LD_INT 4
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 5
72002: PUSH
72003: LD_INT 5
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 4
72012: PUSH
72013: LD_INT 5
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 3
72022: PUSH
72023: LD_INT 4
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 3
72032: PUSH
72033: LD_INT 3
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 5
72042: PUSH
72043: LD_INT 3
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: PUSH
72050: LD_INT 3
72052: PUSH
72053: LD_INT 5
72055: PUSH
72056: EMPTY
72057: LIST
72058: LIST
72059: PUSH
72060: LD_INT 0
72062: PUSH
72063: LD_INT 3
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: PUSH
72070: LD_INT 0
72072: PUSH
72073: LD_INT 2
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PUSH
72080: LD_INT 1
72082: PUSH
72083: LD_INT 3
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: LD_INT 1
72092: PUSH
72093: LD_INT 4
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: LD_INT 0
72102: PUSH
72103: LD_INT 4
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: PUSH
72110: LD_INT 1
72112: NEG
72113: PUSH
72114: LD_INT 3
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: LD_INT 1
72123: NEG
72124: PUSH
72125: LD_INT 2
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: LD_INT 2
72134: PUSH
72135: LD_INT 4
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: PUSH
72142: LD_INT 2
72144: NEG
72145: PUSH
72146: LD_INT 2
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: LD_INT 4
72155: NEG
72156: PUSH
72157: LD_INT 0
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: LD_INT 4
72166: NEG
72167: PUSH
72168: LD_INT 1
72170: NEG
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 3
72178: NEG
72179: PUSH
72180: LD_INT 0
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: LD_INT 3
72189: NEG
72190: PUSH
72191: LD_INT 1
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 4
72200: NEG
72201: PUSH
72202: LD_INT 1
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: PUSH
72209: LD_INT 5
72211: NEG
72212: PUSH
72213: LD_INT 0
72215: PUSH
72216: EMPTY
72217: LIST
72218: LIST
72219: PUSH
72220: LD_INT 5
72222: NEG
72223: PUSH
72224: LD_INT 1
72226: NEG
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 5
72234: NEG
72235: PUSH
72236: LD_INT 2
72238: NEG
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_INT 3
72246: NEG
72247: PUSH
72248: LD_INT 2
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 3
72257: NEG
72258: PUSH
72259: LD_INT 3
72261: NEG
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 3
72269: NEG
72270: PUSH
72271: LD_INT 4
72273: NEG
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 2
72281: NEG
72282: PUSH
72283: LD_INT 3
72285: NEG
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 2
72293: NEG
72294: PUSH
72295: LD_INT 2
72297: NEG
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PUSH
72303: LD_INT 3
72305: NEG
72306: PUSH
72307: LD_INT 2
72309: NEG
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 4
72317: NEG
72318: PUSH
72319: LD_INT 3
72321: NEG
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: LD_INT 4
72329: NEG
72330: PUSH
72331: LD_INT 4
72333: NEG
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 2
72341: NEG
72342: PUSH
72343: LD_INT 4
72345: NEG
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 4
72353: NEG
72354: PUSH
72355: LD_INT 2
72357: NEG
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 0
72365: PUSH
72366: LD_INT 4
72368: NEG
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 0
72376: PUSH
72377: LD_INT 5
72379: NEG
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 1
72387: PUSH
72388: LD_INT 4
72390: NEG
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 1
72398: PUSH
72399: LD_INT 3
72401: NEG
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 0
72409: PUSH
72410: LD_INT 3
72412: NEG
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 1
72420: NEG
72421: PUSH
72422: LD_INT 4
72424: NEG
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 1
72432: NEG
72433: PUSH
72434: LD_INT 5
72436: NEG
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 2
72444: PUSH
72445: LD_INT 3
72447: NEG
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: LD_INT 2
72455: NEG
72456: PUSH
72457: LD_INT 5
72459: NEG
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72512: LD_ADDR_VAR 0 31
72516: PUSH
72517: LD_INT 0
72519: PUSH
72520: LD_INT 4
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: PUSH
72527: LD_INT 0
72529: PUSH
72530: LD_INT 3
72532: PUSH
72533: EMPTY
72534: LIST
72535: LIST
72536: PUSH
72537: LD_INT 1
72539: PUSH
72540: LD_INT 4
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: LD_INT 1
72549: PUSH
72550: LD_INT 5
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: PUSH
72557: LD_INT 0
72559: PUSH
72560: LD_INT 5
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: PUSH
72567: LD_INT 1
72569: NEG
72570: PUSH
72571: LD_INT 4
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: PUSH
72578: LD_INT 1
72580: NEG
72581: PUSH
72582: LD_INT 3
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: PUSH
72589: LD_INT 2
72591: PUSH
72592: LD_INT 5
72594: PUSH
72595: EMPTY
72596: LIST
72597: LIST
72598: PUSH
72599: LD_INT 2
72601: NEG
72602: PUSH
72603: LD_INT 3
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: LD_INT 3
72612: NEG
72613: PUSH
72614: LD_INT 0
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: PUSH
72621: LD_INT 3
72623: NEG
72624: PUSH
72625: LD_INT 1
72627: NEG
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 2
72635: NEG
72636: PUSH
72637: LD_INT 0
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: PUSH
72644: LD_INT 2
72646: NEG
72647: PUSH
72648: LD_INT 1
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_INT 3
72657: NEG
72658: PUSH
72659: LD_INT 1
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 4
72668: NEG
72669: PUSH
72670: LD_INT 0
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: PUSH
72677: LD_INT 4
72679: NEG
72680: PUSH
72681: LD_INT 1
72683: NEG
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: PUSH
72689: LD_INT 4
72691: NEG
72692: PUSH
72693: LD_INT 2
72695: NEG
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: PUSH
72701: LD_INT 2
72703: NEG
72704: PUSH
72705: LD_INT 2
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: PUSH
72712: LD_INT 4
72714: NEG
72715: PUSH
72716: LD_INT 4
72718: NEG
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 4
72726: NEG
72727: PUSH
72728: LD_INT 5
72730: NEG
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: LD_INT 3
72738: NEG
72739: PUSH
72740: LD_INT 4
72742: NEG
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 3
72750: NEG
72751: PUSH
72752: LD_INT 3
72754: NEG
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: PUSH
72760: LD_INT 4
72762: NEG
72763: PUSH
72764: LD_INT 3
72766: NEG
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: PUSH
72772: LD_INT 5
72774: NEG
72775: PUSH
72776: LD_INT 4
72778: NEG
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 5
72786: NEG
72787: PUSH
72788: LD_INT 5
72790: NEG
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_INT 3
72798: NEG
72799: PUSH
72800: LD_INT 5
72802: NEG
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 5
72810: NEG
72811: PUSH
72812: LD_INT 3
72814: NEG
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: PUSH
72820: LD_INT 0
72822: PUSH
72823: LD_INT 3
72825: NEG
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: PUSH
72831: LD_INT 0
72833: PUSH
72834: LD_INT 4
72836: NEG
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: PUSH
72842: LD_INT 1
72844: PUSH
72845: LD_INT 3
72847: NEG
72848: PUSH
72849: EMPTY
72850: LIST
72851: LIST
72852: PUSH
72853: LD_INT 1
72855: PUSH
72856: LD_INT 2
72858: NEG
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PUSH
72864: LD_INT 0
72866: PUSH
72867: LD_INT 2
72869: NEG
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 1
72877: NEG
72878: PUSH
72879: LD_INT 3
72881: NEG
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: PUSH
72887: LD_INT 1
72889: NEG
72890: PUSH
72891: LD_INT 4
72893: NEG
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 2
72901: PUSH
72902: LD_INT 2
72904: NEG
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: LD_INT 2
72912: NEG
72913: PUSH
72914: LD_INT 4
72916: NEG
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: PUSH
72922: LD_INT 4
72924: PUSH
72925: LD_INT 0
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: PUSH
72932: LD_INT 4
72934: PUSH
72935: LD_INT 1
72937: NEG
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: PUSH
72943: LD_INT 5
72945: PUSH
72946: LD_INT 0
72948: PUSH
72949: EMPTY
72950: LIST
72951: LIST
72952: PUSH
72953: LD_INT 5
72955: PUSH
72956: LD_INT 1
72958: PUSH
72959: EMPTY
72960: LIST
72961: LIST
72962: PUSH
72963: LD_INT 4
72965: PUSH
72966: LD_INT 1
72968: PUSH
72969: EMPTY
72970: LIST
72971: LIST
72972: PUSH
72973: LD_INT 3
72975: PUSH
72976: LD_INT 0
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: PUSH
72983: LD_INT 3
72985: PUSH
72986: LD_INT 1
72988: NEG
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: LD_INT 3
72996: PUSH
72997: LD_INT 2
72999: NEG
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: PUSH
73005: LD_INT 5
73007: PUSH
73008: LD_INT 2
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73062: LD_ADDR_VAR 0 32
73066: PUSH
73067: LD_INT 4
73069: NEG
73070: PUSH
73071: LD_INT 0
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 4
73080: NEG
73081: PUSH
73082: LD_INT 1
73084: NEG
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 3
73092: NEG
73093: PUSH
73094: LD_INT 0
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PUSH
73101: LD_INT 3
73103: NEG
73104: PUSH
73105: LD_INT 1
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: PUSH
73112: LD_INT 4
73114: NEG
73115: PUSH
73116: LD_INT 1
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: LD_INT 5
73125: NEG
73126: PUSH
73127: LD_INT 0
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 5
73136: NEG
73137: PUSH
73138: LD_INT 1
73140: NEG
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: PUSH
73146: LD_INT 5
73148: NEG
73149: PUSH
73150: LD_INT 2
73152: NEG
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: PUSH
73158: LD_INT 3
73160: NEG
73161: PUSH
73162: LD_INT 2
73164: PUSH
73165: EMPTY
73166: LIST
73167: LIST
73168: PUSH
73169: LD_INT 3
73171: NEG
73172: PUSH
73173: LD_INT 3
73175: NEG
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: LD_INT 3
73183: NEG
73184: PUSH
73185: LD_INT 4
73187: NEG
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: PUSH
73193: LD_INT 2
73195: NEG
73196: PUSH
73197: LD_INT 3
73199: NEG
73200: PUSH
73201: EMPTY
73202: LIST
73203: LIST
73204: PUSH
73205: LD_INT 2
73207: NEG
73208: PUSH
73209: LD_INT 2
73211: NEG
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: PUSH
73217: LD_INT 3
73219: NEG
73220: PUSH
73221: LD_INT 2
73223: NEG
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: PUSH
73229: LD_INT 4
73231: NEG
73232: PUSH
73233: LD_INT 3
73235: NEG
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 4
73243: NEG
73244: PUSH
73245: LD_INT 4
73247: NEG
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: LD_INT 2
73255: NEG
73256: PUSH
73257: LD_INT 4
73259: NEG
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: PUSH
73265: LD_INT 4
73267: NEG
73268: PUSH
73269: LD_INT 2
73271: NEG
73272: PUSH
73273: EMPTY
73274: LIST
73275: LIST
73276: PUSH
73277: LD_INT 0
73279: PUSH
73280: LD_INT 4
73282: NEG
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: PUSH
73288: LD_INT 0
73290: PUSH
73291: LD_INT 5
73293: NEG
73294: PUSH
73295: EMPTY
73296: LIST
73297: LIST
73298: PUSH
73299: LD_INT 1
73301: PUSH
73302: LD_INT 4
73304: NEG
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: PUSH
73310: LD_INT 1
73312: PUSH
73313: LD_INT 3
73315: NEG
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: PUSH
73321: LD_INT 0
73323: PUSH
73324: LD_INT 3
73326: NEG
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: PUSH
73332: LD_INT 1
73334: NEG
73335: PUSH
73336: LD_INT 4
73338: NEG
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: LD_INT 1
73346: NEG
73347: PUSH
73348: LD_INT 5
73350: NEG
73351: PUSH
73352: EMPTY
73353: LIST
73354: LIST
73355: PUSH
73356: LD_INT 2
73358: PUSH
73359: LD_INT 3
73361: NEG
73362: PUSH
73363: EMPTY
73364: LIST
73365: LIST
73366: PUSH
73367: LD_INT 2
73369: NEG
73370: PUSH
73371: LD_INT 5
73373: NEG
73374: PUSH
73375: EMPTY
73376: LIST
73377: LIST
73378: PUSH
73379: LD_INT 3
73381: PUSH
73382: LD_INT 0
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: PUSH
73389: LD_INT 3
73391: PUSH
73392: LD_INT 1
73394: NEG
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PUSH
73400: LD_INT 4
73402: PUSH
73403: LD_INT 0
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: LD_INT 4
73412: PUSH
73413: LD_INT 1
73415: PUSH
73416: EMPTY
73417: LIST
73418: LIST
73419: PUSH
73420: LD_INT 3
73422: PUSH
73423: LD_INT 1
73425: PUSH
73426: EMPTY
73427: LIST
73428: LIST
73429: PUSH
73430: LD_INT 2
73432: PUSH
73433: LD_INT 0
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 2
73442: PUSH
73443: LD_INT 1
73445: NEG
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 2
73453: PUSH
73454: LD_INT 2
73456: NEG
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PUSH
73462: LD_INT 4
73464: PUSH
73465: LD_INT 2
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: PUSH
73472: LD_INT 4
73474: PUSH
73475: LD_INT 4
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: PUSH
73482: LD_INT 4
73484: PUSH
73485: LD_INT 3
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PUSH
73492: LD_INT 5
73494: PUSH
73495: LD_INT 4
73497: PUSH
73498: EMPTY
73499: LIST
73500: LIST
73501: PUSH
73502: LD_INT 5
73504: PUSH
73505: LD_INT 5
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: PUSH
73512: LD_INT 4
73514: PUSH
73515: LD_INT 5
73517: PUSH
73518: EMPTY
73519: LIST
73520: LIST
73521: PUSH
73522: LD_INT 3
73524: PUSH
73525: LD_INT 4
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: PUSH
73532: LD_INT 3
73534: PUSH
73535: LD_INT 3
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: LD_INT 5
73544: PUSH
73545: LD_INT 3
73547: PUSH
73548: EMPTY
73549: LIST
73550: LIST
73551: PUSH
73552: LD_INT 3
73554: PUSH
73555: LD_INT 5
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: LIST
73599: LIST
73600: LIST
73601: LIST
73602: LIST
73603: LIST
73604: LIST
73605: LIST
73606: LIST
73607: LIST
73608: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73609: LD_ADDR_VAR 0 33
73613: PUSH
73614: LD_INT 4
73616: NEG
73617: PUSH
73618: LD_INT 4
73620: NEG
73621: PUSH
73622: EMPTY
73623: LIST
73624: LIST
73625: PUSH
73626: LD_INT 4
73628: NEG
73629: PUSH
73630: LD_INT 5
73632: NEG
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: PUSH
73638: LD_INT 3
73640: NEG
73641: PUSH
73642: LD_INT 4
73644: NEG
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: LD_INT 3
73652: NEG
73653: PUSH
73654: LD_INT 3
73656: NEG
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: PUSH
73662: LD_INT 4
73664: NEG
73665: PUSH
73666: LD_INT 3
73668: NEG
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PUSH
73674: LD_INT 5
73676: NEG
73677: PUSH
73678: LD_INT 4
73680: NEG
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: PUSH
73686: LD_INT 5
73688: NEG
73689: PUSH
73690: LD_INT 5
73692: NEG
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PUSH
73698: LD_INT 3
73700: NEG
73701: PUSH
73702: LD_INT 5
73704: NEG
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: PUSH
73710: LD_INT 5
73712: NEG
73713: PUSH
73714: LD_INT 3
73716: NEG
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: LD_INT 0
73724: PUSH
73725: LD_INT 3
73727: NEG
73728: PUSH
73729: EMPTY
73730: LIST
73731: LIST
73732: PUSH
73733: LD_INT 0
73735: PUSH
73736: LD_INT 4
73738: NEG
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: PUSH
73744: LD_INT 1
73746: PUSH
73747: LD_INT 3
73749: NEG
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: PUSH
73755: LD_INT 1
73757: PUSH
73758: LD_INT 2
73760: NEG
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PUSH
73766: LD_INT 0
73768: PUSH
73769: LD_INT 2
73771: NEG
73772: PUSH
73773: EMPTY
73774: LIST
73775: LIST
73776: PUSH
73777: LD_INT 1
73779: NEG
73780: PUSH
73781: LD_INT 3
73783: NEG
73784: PUSH
73785: EMPTY
73786: LIST
73787: LIST
73788: PUSH
73789: LD_INT 1
73791: NEG
73792: PUSH
73793: LD_INT 4
73795: NEG
73796: PUSH
73797: EMPTY
73798: LIST
73799: LIST
73800: PUSH
73801: LD_INT 2
73803: PUSH
73804: LD_INT 2
73806: NEG
73807: PUSH
73808: EMPTY
73809: LIST
73810: LIST
73811: PUSH
73812: LD_INT 2
73814: NEG
73815: PUSH
73816: LD_INT 4
73818: NEG
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: PUSH
73824: LD_INT 4
73826: PUSH
73827: LD_INT 0
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: PUSH
73834: LD_INT 4
73836: PUSH
73837: LD_INT 1
73839: NEG
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: PUSH
73845: LD_INT 5
73847: PUSH
73848: LD_INT 0
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: PUSH
73855: LD_INT 5
73857: PUSH
73858: LD_INT 1
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: PUSH
73865: LD_INT 4
73867: PUSH
73868: LD_INT 1
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: PUSH
73875: LD_INT 3
73877: PUSH
73878: LD_INT 0
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: PUSH
73885: LD_INT 3
73887: PUSH
73888: LD_INT 1
73890: NEG
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: PUSH
73896: LD_INT 3
73898: PUSH
73899: LD_INT 2
73901: NEG
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: PUSH
73907: LD_INT 5
73909: PUSH
73910: LD_INT 2
73912: PUSH
73913: EMPTY
73914: LIST
73915: LIST
73916: PUSH
73917: LD_INT 3
73919: PUSH
73920: LD_INT 3
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: PUSH
73927: LD_INT 3
73929: PUSH
73930: LD_INT 2
73932: PUSH
73933: EMPTY
73934: LIST
73935: LIST
73936: PUSH
73937: LD_INT 4
73939: PUSH
73940: LD_INT 3
73942: PUSH
73943: EMPTY
73944: LIST
73945: LIST
73946: PUSH
73947: LD_INT 4
73949: PUSH
73950: LD_INT 4
73952: PUSH
73953: EMPTY
73954: LIST
73955: LIST
73956: PUSH
73957: LD_INT 3
73959: PUSH
73960: LD_INT 4
73962: PUSH
73963: EMPTY
73964: LIST
73965: LIST
73966: PUSH
73967: LD_INT 2
73969: PUSH
73970: LD_INT 3
73972: PUSH
73973: EMPTY
73974: LIST
73975: LIST
73976: PUSH
73977: LD_INT 2
73979: PUSH
73980: LD_INT 2
73982: PUSH
73983: EMPTY
73984: LIST
73985: LIST
73986: PUSH
73987: LD_INT 4
73989: PUSH
73990: LD_INT 2
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: PUSH
73997: LD_INT 2
73999: PUSH
74000: LD_INT 4
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: PUSH
74007: LD_INT 0
74009: PUSH
74010: LD_INT 4
74012: PUSH
74013: EMPTY
74014: LIST
74015: LIST
74016: PUSH
74017: LD_INT 0
74019: PUSH
74020: LD_INT 3
74022: PUSH
74023: EMPTY
74024: LIST
74025: LIST
74026: PUSH
74027: LD_INT 1
74029: PUSH
74030: LD_INT 4
74032: PUSH
74033: EMPTY
74034: LIST
74035: LIST
74036: PUSH
74037: LD_INT 1
74039: PUSH
74040: LD_INT 5
74042: PUSH
74043: EMPTY
74044: LIST
74045: LIST
74046: PUSH
74047: LD_INT 0
74049: PUSH
74050: LD_INT 5
74052: PUSH
74053: EMPTY
74054: LIST
74055: LIST
74056: PUSH
74057: LD_INT 1
74059: NEG
74060: PUSH
74061: LD_INT 4
74063: PUSH
74064: EMPTY
74065: LIST
74066: LIST
74067: PUSH
74068: LD_INT 1
74070: NEG
74071: PUSH
74072: LD_INT 3
74074: PUSH
74075: EMPTY
74076: LIST
74077: LIST
74078: PUSH
74079: LD_INT 2
74081: PUSH
74082: LD_INT 5
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: PUSH
74089: LD_INT 2
74091: NEG
74092: PUSH
74093: LD_INT 3
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: LIST
74104: LIST
74105: LIST
74106: LIST
74107: LIST
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: LIST
74142: LIST
74143: LIST
74144: LIST
74145: LIST
74146: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74147: LD_ADDR_VAR 0 34
74151: PUSH
74152: LD_INT 0
74154: PUSH
74155: LD_INT 4
74157: NEG
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: PUSH
74163: LD_INT 0
74165: PUSH
74166: LD_INT 5
74168: NEG
74169: PUSH
74170: EMPTY
74171: LIST
74172: LIST
74173: PUSH
74174: LD_INT 1
74176: PUSH
74177: LD_INT 4
74179: NEG
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: PUSH
74185: LD_INT 1
74187: PUSH
74188: LD_INT 3
74190: NEG
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: PUSH
74196: LD_INT 0
74198: PUSH
74199: LD_INT 3
74201: NEG
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: PUSH
74207: LD_INT 1
74209: NEG
74210: PUSH
74211: LD_INT 4
74213: NEG
74214: PUSH
74215: EMPTY
74216: LIST
74217: LIST
74218: PUSH
74219: LD_INT 1
74221: NEG
74222: PUSH
74223: LD_INT 5
74225: NEG
74226: PUSH
74227: EMPTY
74228: LIST
74229: LIST
74230: PUSH
74231: LD_INT 2
74233: PUSH
74234: LD_INT 3
74236: NEG
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: PUSH
74242: LD_INT 2
74244: NEG
74245: PUSH
74246: LD_INT 5
74248: NEG
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: PUSH
74254: LD_INT 3
74256: PUSH
74257: LD_INT 0
74259: PUSH
74260: EMPTY
74261: LIST
74262: LIST
74263: PUSH
74264: LD_INT 3
74266: PUSH
74267: LD_INT 1
74269: NEG
74270: PUSH
74271: EMPTY
74272: LIST
74273: LIST
74274: PUSH
74275: LD_INT 4
74277: PUSH
74278: LD_INT 0
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: PUSH
74285: LD_INT 4
74287: PUSH
74288: LD_INT 1
74290: PUSH
74291: EMPTY
74292: LIST
74293: LIST
74294: PUSH
74295: LD_INT 3
74297: PUSH
74298: LD_INT 1
74300: PUSH
74301: EMPTY
74302: LIST
74303: LIST
74304: PUSH
74305: LD_INT 2
74307: PUSH
74308: LD_INT 0
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: PUSH
74315: LD_INT 2
74317: PUSH
74318: LD_INT 1
74320: NEG
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: PUSH
74326: LD_INT 2
74328: PUSH
74329: LD_INT 2
74331: NEG
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: PUSH
74337: LD_INT 4
74339: PUSH
74340: LD_INT 2
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: PUSH
74347: LD_INT 4
74349: PUSH
74350: LD_INT 4
74352: PUSH
74353: EMPTY
74354: LIST
74355: LIST
74356: PUSH
74357: LD_INT 4
74359: PUSH
74360: LD_INT 3
74362: PUSH
74363: EMPTY
74364: LIST
74365: LIST
74366: PUSH
74367: LD_INT 5
74369: PUSH
74370: LD_INT 4
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: PUSH
74377: LD_INT 5
74379: PUSH
74380: LD_INT 5
74382: PUSH
74383: EMPTY
74384: LIST
74385: LIST
74386: PUSH
74387: LD_INT 4
74389: PUSH
74390: LD_INT 5
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: PUSH
74397: LD_INT 3
74399: PUSH
74400: LD_INT 4
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: PUSH
74407: LD_INT 3
74409: PUSH
74410: LD_INT 3
74412: PUSH
74413: EMPTY
74414: LIST
74415: LIST
74416: PUSH
74417: LD_INT 5
74419: PUSH
74420: LD_INT 3
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: PUSH
74427: LD_INT 3
74429: PUSH
74430: LD_INT 5
74432: PUSH
74433: EMPTY
74434: LIST
74435: LIST
74436: PUSH
74437: LD_INT 0
74439: PUSH
74440: LD_INT 3
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: PUSH
74447: LD_INT 0
74449: PUSH
74450: LD_INT 2
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: PUSH
74457: LD_INT 1
74459: PUSH
74460: LD_INT 3
74462: PUSH
74463: EMPTY
74464: LIST
74465: LIST
74466: PUSH
74467: LD_INT 1
74469: PUSH
74470: LD_INT 4
74472: PUSH
74473: EMPTY
74474: LIST
74475: LIST
74476: PUSH
74477: LD_INT 0
74479: PUSH
74480: LD_INT 4
74482: PUSH
74483: EMPTY
74484: LIST
74485: LIST
74486: PUSH
74487: LD_INT 1
74489: NEG
74490: PUSH
74491: LD_INT 3
74493: PUSH
74494: EMPTY
74495: LIST
74496: LIST
74497: PUSH
74498: LD_INT 1
74500: NEG
74501: PUSH
74502: LD_INT 2
74504: PUSH
74505: EMPTY
74506: LIST
74507: LIST
74508: PUSH
74509: LD_INT 2
74511: PUSH
74512: LD_INT 4
74514: PUSH
74515: EMPTY
74516: LIST
74517: LIST
74518: PUSH
74519: LD_INT 2
74521: NEG
74522: PUSH
74523: LD_INT 2
74525: PUSH
74526: EMPTY
74527: LIST
74528: LIST
74529: PUSH
74530: LD_INT 4
74532: NEG
74533: PUSH
74534: LD_INT 0
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: PUSH
74541: LD_INT 4
74543: NEG
74544: PUSH
74545: LD_INT 1
74547: NEG
74548: PUSH
74549: EMPTY
74550: LIST
74551: LIST
74552: PUSH
74553: LD_INT 3
74555: NEG
74556: PUSH
74557: LD_INT 0
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: PUSH
74564: LD_INT 3
74566: NEG
74567: PUSH
74568: LD_INT 1
74570: PUSH
74571: EMPTY
74572: LIST
74573: LIST
74574: PUSH
74575: LD_INT 4
74577: NEG
74578: PUSH
74579: LD_INT 1
74581: PUSH
74582: EMPTY
74583: LIST
74584: LIST
74585: PUSH
74586: LD_INT 5
74588: NEG
74589: PUSH
74590: LD_INT 0
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PUSH
74597: LD_INT 5
74599: NEG
74600: PUSH
74601: LD_INT 1
74603: NEG
74604: PUSH
74605: EMPTY
74606: LIST
74607: LIST
74608: PUSH
74609: LD_INT 5
74611: NEG
74612: PUSH
74613: LD_INT 2
74615: NEG
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: PUSH
74621: LD_INT 3
74623: NEG
74624: PUSH
74625: LD_INT 2
74627: PUSH
74628: EMPTY
74629: LIST
74630: LIST
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: LIST
74636: LIST
74637: LIST
74638: LIST
74639: LIST
74640: LIST
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: LIST
74646: LIST
74647: LIST
74648: LIST
74649: LIST
74650: LIST
74651: LIST
74652: LIST
74653: LIST
74654: LIST
74655: LIST
74656: LIST
74657: LIST
74658: LIST
74659: LIST
74660: LIST
74661: LIST
74662: LIST
74663: LIST
74664: LIST
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: LIST
74675: LIST
74676: LIST
74677: LIST
74678: ST_TO_ADDR
// end ; end ;
74679: GO 74682
74681: POP
// case btype of b_depot , b_warehouse :
74682: LD_VAR 0 1
74686: PUSH
74687: LD_INT 0
74689: DOUBLE
74690: EQUAL
74691: IFTRUE 74701
74693: LD_INT 1
74695: DOUBLE
74696: EQUAL
74697: IFTRUE 74701
74699: GO 74902
74701: POP
// case nation of nation_american :
74702: LD_VAR 0 5
74706: PUSH
74707: LD_INT 1
74709: DOUBLE
74710: EQUAL
74711: IFTRUE 74715
74713: GO 74771
74715: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74716: LD_ADDR_VAR 0 9
74720: PUSH
74721: LD_VAR 0 11
74725: PUSH
74726: LD_VAR 0 12
74730: PUSH
74731: LD_VAR 0 13
74735: PUSH
74736: LD_VAR 0 14
74740: PUSH
74741: LD_VAR 0 15
74745: PUSH
74746: LD_VAR 0 16
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: PUSH
74759: LD_VAR 0 4
74763: PUSH
74764: LD_INT 1
74766: PLUS
74767: ARRAY
74768: ST_TO_ADDR
74769: GO 74900
74771: LD_INT 2
74773: DOUBLE
74774: EQUAL
74775: IFTRUE 74779
74777: GO 74835
74779: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74780: LD_ADDR_VAR 0 9
74784: PUSH
74785: LD_VAR 0 17
74789: PUSH
74790: LD_VAR 0 18
74794: PUSH
74795: LD_VAR 0 19
74799: PUSH
74800: LD_VAR 0 20
74804: PUSH
74805: LD_VAR 0 21
74809: PUSH
74810: LD_VAR 0 22
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: PUSH
74823: LD_VAR 0 4
74827: PUSH
74828: LD_INT 1
74830: PLUS
74831: ARRAY
74832: ST_TO_ADDR
74833: GO 74900
74835: LD_INT 3
74837: DOUBLE
74838: EQUAL
74839: IFTRUE 74843
74841: GO 74899
74843: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74844: LD_ADDR_VAR 0 9
74848: PUSH
74849: LD_VAR 0 23
74853: PUSH
74854: LD_VAR 0 24
74858: PUSH
74859: LD_VAR 0 25
74863: PUSH
74864: LD_VAR 0 26
74868: PUSH
74869: LD_VAR 0 27
74873: PUSH
74874: LD_VAR 0 28
74878: PUSH
74879: EMPTY
74880: LIST
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: PUSH
74887: LD_VAR 0 4
74891: PUSH
74892: LD_INT 1
74894: PLUS
74895: ARRAY
74896: ST_TO_ADDR
74897: GO 74900
74899: POP
74900: GO 75455
74902: LD_INT 2
74904: DOUBLE
74905: EQUAL
74906: IFTRUE 74916
74908: LD_INT 3
74910: DOUBLE
74911: EQUAL
74912: IFTRUE 74916
74914: GO 74972
74916: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74917: LD_ADDR_VAR 0 9
74921: PUSH
74922: LD_VAR 0 29
74926: PUSH
74927: LD_VAR 0 30
74931: PUSH
74932: LD_VAR 0 31
74936: PUSH
74937: LD_VAR 0 32
74941: PUSH
74942: LD_VAR 0 33
74946: PUSH
74947: LD_VAR 0 34
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: LIST
74956: LIST
74957: LIST
74958: LIST
74959: PUSH
74960: LD_VAR 0 4
74964: PUSH
74965: LD_INT 1
74967: PLUS
74968: ARRAY
74969: ST_TO_ADDR
74970: GO 75455
74972: LD_INT 16
74974: DOUBLE
74975: EQUAL
74976: IFTRUE 75034
74978: LD_INT 17
74980: DOUBLE
74981: EQUAL
74982: IFTRUE 75034
74984: LD_INT 18
74986: DOUBLE
74987: EQUAL
74988: IFTRUE 75034
74990: LD_INT 19
74992: DOUBLE
74993: EQUAL
74994: IFTRUE 75034
74996: LD_INT 22
74998: DOUBLE
74999: EQUAL
75000: IFTRUE 75034
75002: LD_INT 20
75004: DOUBLE
75005: EQUAL
75006: IFTRUE 75034
75008: LD_INT 21
75010: DOUBLE
75011: EQUAL
75012: IFTRUE 75034
75014: LD_INT 23
75016: DOUBLE
75017: EQUAL
75018: IFTRUE 75034
75020: LD_INT 24
75022: DOUBLE
75023: EQUAL
75024: IFTRUE 75034
75026: LD_INT 25
75028: DOUBLE
75029: EQUAL
75030: IFTRUE 75034
75032: GO 75090
75034: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75035: LD_ADDR_VAR 0 9
75039: PUSH
75040: LD_VAR 0 35
75044: PUSH
75045: LD_VAR 0 36
75049: PUSH
75050: LD_VAR 0 37
75054: PUSH
75055: LD_VAR 0 38
75059: PUSH
75060: LD_VAR 0 39
75064: PUSH
75065: LD_VAR 0 40
75069: PUSH
75070: EMPTY
75071: LIST
75072: LIST
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: PUSH
75078: LD_VAR 0 4
75082: PUSH
75083: LD_INT 1
75085: PLUS
75086: ARRAY
75087: ST_TO_ADDR
75088: GO 75455
75090: LD_INT 6
75092: DOUBLE
75093: EQUAL
75094: IFTRUE 75146
75096: LD_INT 7
75098: DOUBLE
75099: EQUAL
75100: IFTRUE 75146
75102: LD_INT 8
75104: DOUBLE
75105: EQUAL
75106: IFTRUE 75146
75108: LD_INT 13
75110: DOUBLE
75111: EQUAL
75112: IFTRUE 75146
75114: LD_INT 12
75116: DOUBLE
75117: EQUAL
75118: IFTRUE 75146
75120: LD_INT 15
75122: DOUBLE
75123: EQUAL
75124: IFTRUE 75146
75126: LD_INT 11
75128: DOUBLE
75129: EQUAL
75130: IFTRUE 75146
75132: LD_INT 14
75134: DOUBLE
75135: EQUAL
75136: IFTRUE 75146
75138: LD_INT 10
75140: DOUBLE
75141: EQUAL
75142: IFTRUE 75146
75144: GO 75202
75146: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75147: LD_ADDR_VAR 0 9
75151: PUSH
75152: LD_VAR 0 41
75156: PUSH
75157: LD_VAR 0 42
75161: PUSH
75162: LD_VAR 0 43
75166: PUSH
75167: LD_VAR 0 44
75171: PUSH
75172: LD_VAR 0 45
75176: PUSH
75177: LD_VAR 0 46
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: LIST
75186: LIST
75187: LIST
75188: LIST
75189: PUSH
75190: LD_VAR 0 4
75194: PUSH
75195: LD_INT 1
75197: PLUS
75198: ARRAY
75199: ST_TO_ADDR
75200: GO 75455
75202: LD_INT 36
75204: DOUBLE
75205: EQUAL
75206: IFTRUE 75210
75208: GO 75266
75210: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75211: LD_ADDR_VAR 0 9
75215: PUSH
75216: LD_VAR 0 47
75220: PUSH
75221: LD_VAR 0 48
75225: PUSH
75226: LD_VAR 0 49
75230: PUSH
75231: LD_VAR 0 50
75235: PUSH
75236: LD_VAR 0 51
75240: PUSH
75241: LD_VAR 0 52
75245: PUSH
75246: EMPTY
75247: LIST
75248: LIST
75249: LIST
75250: LIST
75251: LIST
75252: LIST
75253: PUSH
75254: LD_VAR 0 4
75258: PUSH
75259: LD_INT 1
75261: PLUS
75262: ARRAY
75263: ST_TO_ADDR
75264: GO 75455
75266: LD_INT 4
75268: DOUBLE
75269: EQUAL
75270: IFTRUE 75292
75272: LD_INT 5
75274: DOUBLE
75275: EQUAL
75276: IFTRUE 75292
75278: LD_INT 34
75280: DOUBLE
75281: EQUAL
75282: IFTRUE 75292
75284: LD_INT 37
75286: DOUBLE
75287: EQUAL
75288: IFTRUE 75292
75290: GO 75348
75292: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75293: LD_ADDR_VAR 0 9
75297: PUSH
75298: LD_VAR 0 53
75302: PUSH
75303: LD_VAR 0 54
75307: PUSH
75308: LD_VAR 0 55
75312: PUSH
75313: LD_VAR 0 56
75317: PUSH
75318: LD_VAR 0 57
75322: PUSH
75323: LD_VAR 0 58
75327: PUSH
75328: EMPTY
75329: LIST
75330: LIST
75331: LIST
75332: LIST
75333: LIST
75334: LIST
75335: PUSH
75336: LD_VAR 0 4
75340: PUSH
75341: LD_INT 1
75343: PLUS
75344: ARRAY
75345: ST_TO_ADDR
75346: GO 75455
75348: LD_INT 31
75350: DOUBLE
75351: EQUAL
75352: IFTRUE 75398
75354: LD_INT 32
75356: DOUBLE
75357: EQUAL
75358: IFTRUE 75398
75360: LD_INT 33
75362: DOUBLE
75363: EQUAL
75364: IFTRUE 75398
75366: LD_INT 27
75368: DOUBLE
75369: EQUAL
75370: IFTRUE 75398
75372: LD_INT 26
75374: DOUBLE
75375: EQUAL
75376: IFTRUE 75398
75378: LD_INT 28
75380: DOUBLE
75381: EQUAL
75382: IFTRUE 75398
75384: LD_INT 29
75386: DOUBLE
75387: EQUAL
75388: IFTRUE 75398
75390: LD_INT 30
75392: DOUBLE
75393: EQUAL
75394: IFTRUE 75398
75396: GO 75454
75398: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75399: LD_ADDR_VAR 0 9
75403: PUSH
75404: LD_VAR 0 59
75408: PUSH
75409: LD_VAR 0 60
75413: PUSH
75414: LD_VAR 0 61
75418: PUSH
75419: LD_VAR 0 62
75423: PUSH
75424: LD_VAR 0 63
75428: PUSH
75429: LD_VAR 0 64
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: PUSH
75442: LD_VAR 0 4
75446: PUSH
75447: LD_INT 1
75449: PLUS
75450: ARRAY
75451: ST_TO_ADDR
75452: GO 75455
75454: POP
// temp_list2 = [ ] ;
75455: LD_ADDR_VAR 0 10
75459: PUSH
75460: EMPTY
75461: ST_TO_ADDR
// for i in temp_list do
75462: LD_ADDR_VAR 0 8
75466: PUSH
75467: LD_VAR 0 9
75471: PUSH
75472: FOR_IN
75473: IFFALSE 75525
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75475: LD_ADDR_VAR 0 10
75479: PUSH
75480: LD_VAR 0 10
75484: PUSH
75485: LD_VAR 0 8
75489: PUSH
75490: LD_INT 1
75492: ARRAY
75493: PUSH
75494: LD_VAR 0 2
75498: PLUS
75499: PUSH
75500: LD_VAR 0 8
75504: PUSH
75505: LD_INT 2
75507: ARRAY
75508: PUSH
75509: LD_VAR 0 3
75513: PLUS
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: PUSH
75519: EMPTY
75520: LIST
75521: ADD
75522: ST_TO_ADDR
75523: GO 75472
75525: POP
75526: POP
// result = temp_list2 ;
75527: LD_ADDR_VAR 0 7
75531: PUSH
75532: LD_VAR 0 10
75536: ST_TO_ADDR
// end ;
75537: LD_VAR 0 7
75541: RET
// export function EnemyInRange ( unit , dist ) ; begin
75542: LD_INT 0
75544: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75545: LD_ADDR_VAR 0 3
75549: PUSH
75550: LD_VAR 0 1
75554: PPUSH
75555: CALL_OW 255
75559: PPUSH
75560: LD_VAR 0 1
75564: PPUSH
75565: CALL_OW 250
75569: PPUSH
75570: LD_VAR 0 1
75574: PPUSH
75575: CALL_OW 251
75579: PPUSH
75580: LD_VAR 0 2
75584: PPUSH
75585: CALL 48915 0 4
75589: PUSH
75590: LD_INT 4
75592: ARRAY
75593: ST_TO_ADDR
// end ;
75594: LD_VAR 0 3
75598: RET
// export function PlayerSeeMe ( unit ) ; begin
75599: LD_INT 0
75601: PPUSH
// result := See ( your_side , unit ) ;
75602: LD_ADDR_VAR 0 2
75606: PUSH
75607: LD_OWVAR 2
75611: PPUSH
75612: LD_VAR 0 1
75616: PPUSH
75617: CALL_OW 292
75621: ST_TO_ADDR
// end ;
75622: LD_VAR 0 2
75626: RET
// export function ReverseDir ( unit ) ; begin
75627: LD_INT 0
75629: PPUSH
// if not unit then
75630: LD_VAR 0 1
75634: NOT
75635: IFFALSE 75639
// exit ;
75637: GO 75662
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75639: LD_ADDR_VAR 0 2
75643: PUSH
75644: LD_VAR 0 1
75648: PPUSH
75649: CALL_OW 254
75653: PUSH
75654: LD_INT 3
75656: PLUS
75657: PUSH
75658: LD_INT 6
75660: MOD
75661: ST_TO_ADDR
// end ;
75662: LD_VAR 0 2
75666: RET
// export function ReverseArray ( array ) ; var i ; begin
75667: LD_INT 0
75669: PPUSH
75670: PPUSH
// if not array then
75671: LD_VAR 0 1
75675: NOT
75676: IFFALSE 75680
// exit ;
75678: GO 75735
// result := [ ] ;
75680: LD_ADDR_VAR 0 2
75684: PUSH
75685: EMPTY
75686: ST_TO_ADDR
// for i := array downto 1 do
75687: LD_ADDR_VAR 0 3
75691: PUSH
75692: DOUBLE
75693: LD_VAR 0 1
75697: INC
75698: ST_TO_ADDR
75699: LD_INT 1
75701: PUSH
75702: FOR_DOWNTO
75703: IFFALSE 75733
// result := Join ( result , array [ i ] ) ;
75705: LD_ADDR_VAR 0 2
75709: PUSH
75710: LD_VAR 0 2
75714: PPUSH
75715: LD_VAR 0 1
75719: PUSH
75720: LD_VAR 0 3
75724: ARRAY
75725: PPUSH
75726: CALL 80380 0 2
75730: ST_TO_ADDR
75731: GO 75702
75733: POP
75734: POP
// end ;
75735: LD_VAR 0 2
75739: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75740: LD_INT 0
75742: PPUSH
75743: PPUSH
75744: PPUSH
75745: PPUSH
75746: PPUSH
75747: PPUSH
// if not unit or not hexes then
75748: LD_VAR 0 1
75752: NOT
75753: PUSH
75754: LD_VAR 0 2
75758: NOT
75759: OR
75760: IFFALSE 75764
// exit ;
75762: GO 75887
// dist := 9999 ;
75764: LD_ADDR_VAR 0 5
75768: PUSH
75769: LD_INT 9999
75771: ST_TO_ADDR
// for i = 1 to hexes do
75772: LD_ADDR_VAR 0 4
75776: PUSH
75777: DOUBLE
75778: LD_INT 1
75780: DEC
75781: ST_TO_ADDR
75782: LD_VAR 0 2
75786: PUSH
75787: FOR_TO
75788: IFFALSE 75875
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75790: LD_ADDR_VAR 0 6
75794: PUSH
75795: LD_VAR 0 1
75799: PPUSH
75800: LD_VAR 0 2
75804: PUSH
75805: LD_VAR 0 4
75809: ARRAY
75810: PUSH
75811: LD_INT 1
75813: ARRAY
75814: PPUSH
75815: LD_VAR 0 2
75819: PUSH
75820: LD_VAR 0 4
75824: ARRAY
75825: PUSH
75826: LD_INT 2
75828: ARRAY
75829: PPUSH
75830: CALL_OW 297
75834: ST_TO_ADDR
// if tdist < dist then
75835: LD_VAR 0 6
75839: PUSH
75840: LD_VAR 0 5
75844: LESS
75845: IFFALSE 75873
// begin hex := hexes [ i ] ;
75847: LD_ADDR_VAR 0 8
75851: PUSH
75852: LD_VAR 0 2
75856: PUSH
75857: LD_VAR 0 4
75861: ARRAY
75862: ST_TO_ADDR
// dist := tdist ;
75863: LD_ADDR_VAR 0 5
75867: PUSH
75868: LD_VAR 0 6
75872: ST_TO_ADDR
// end ; end ;
75873: GO 75787
75875: POP
75876: POP
// result := hex ;
75877: LD_ADDR_VAR 0 3
75881: PUSH
75882: LD_VAR 0 8
75886: ST_TO_ADDR
// end ;
75887: LD_VAR 0 3
75891: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75892: LD_INT 0
75894: PPUSH
75895: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75896: LD_VAR 0 1
75900: NOT
75901: PUSH
75902: LD_VAR 0 1
75906: PUSH
75907: LD_INT 21
75909: PUSH
75910: LD_INT 2
75912: PUSH
75913: EMPTY
75914: LIST
75915: LIST
75916: PUSH
75917: LD_INT 23
75919: PUSH
75920: LD_INT 2
75922: PUSH
75923: EMPTY
75924: LIST
75925: LIST
75926: PUSH
75927: EMPTY
75928: LIST
75929: LIST
75930: PPUSH
75931: CALL_OW 69
75935: IN
75936: NOT
75937: OR
75938: IFFALSE 75942
// exit ;
75940: GO 75989
// for i = 1 to 3 do
75942: LD_ADDR_VAR 0 3
75946: PUSH
75947: DOUBLE
75948: LD_INT 1
75950: DEC
75951: ST_TO_ADDR
75952: LD_INT 3
75954: PUSH
75955: FOR_TO
75956: IFFALSE 75987
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75958: LD_VAR 0 1
75962: PPUSH
75963: CALL_OW 250
75967: PPUSH
75968: LD_VAR 0 1
75972: PPUSH
75973: CALL_OW 251
75977: PPUSH
75978: LD_INT 1
75980: PPUSH
75981: CALL_OW 453
75985: GO 75955
75987: POP
75988: POP
// end ;
75989: LD_VAR 0 2
75993: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75994: LD_INT 0
75996: PPUSH
75997: PPUSH
75998: PPUSH
75999: PPUSH
76000: PPUSH
76001: PPUSH
// if not unit or not enemy_unit then
76002: LD_VAR 0 1
76006: NOT
76007: PUSH
76008: LD_VAR 0 2
76012: NOT
76013: OR
76014: IFFALSE 76018
// exit ;
76016: GO 76485
// if GetLives ( i ) < 250 then
76018: LD_VAR 0 4
76022: PPUSH
76023: CALL_OW 256
76027: PUSH
76028: LD_INT 250
76030: LESS
76031: IFFALSE 76044
// begin ComAutodestruct ( i ) ;
76033: LD_VAR 0 4
76037: PPUSH
76038: CALL 75892 0 1
// exit ;
76042: GO 76485
// end ; x := GetX ( enemy_unit ) ;
76044: LD_ADDR_VAR 0 7
76048: PUSH
76049: LD_VAR 0 2
76053: PPUSH
76054: CALL_OW 250
76058: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76059: LD_ADDR_VAR 0 8
76063: PUSH
76064: LD_VAR 0 2
76068: PPUSH
76069: CALL_OW 251
76073: ST_TO_ADDR
// if not x or not y then
76074: LD_VAR 0 7
76078: NOT
76079: PUSH
76080: LD_VAR 0 8
76084: NOT
76085: OR
76086: IFFALSE 76090
// exit ;
76088: GO 76485
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76090: LD_ADDR_VAR 0 6
76094: PUSH
76095: LD_VAR 0 7
76099: PPUSH
76100: LD_INT 0
76102: PPUSH
76103: LD_INT 4
76105: PPUSH
76106: CALL_OW 272
76110: PUSH
76111: LD_VAR 0 8
76115: PPUSH
76116: LD_INT 0
76118: PPUSH
76119: LD_INT 4
76121: PPUSH
76122: CALL_OW 273
76126: PUSH
76127: EMPTY
76128: LIST
76129: LIST
76130: PUSH
76131: LD_VAR 0 7
76135: PPUSH
76136: LD_INT 1
76138: PPUSH
76139: LD_INT 4
76141: PPUSH
76142: CALL_OW 272
76146: PUSH
76147: LD_VAR 0 8
76151: PPUSH
76152: LD_INT 1
76154: PPUSH
76155: LD_INT 4
76157: PPUSH
76158: CALL_OW 273
76162: PUSH
76163: EMPTY
76164: LIST
76165: LIST
76166: PUSH
76167: LD_VAR 0 7
76171: PPUSH
76172: LD_INT 2
76174: PPUSH
76175: LD_INT 4
76177: PPUSH
76178: CALL_OW 272
76182: PUSH
76183: LD_VAR 0 8
76187: PPUSH
76188: LD_INT 2
76190: PPUSH
76191: LD_INT 4
76193: PPUSH
76194: CALL_OW 273
76198: PUSH
76199: EMPTY
76200: LIST
76201: LIST
76202: PUSH
76203: LD_VAR 0 7
76207: PPUSH
76208: LD_INT 3
76210: PPUSH
76211: LD_INT 4
76213: PPUSH
76214: CALL_OW 272
76218: PUSH
76219: LD_VAR 0 8
76223: PPUSH
76224: LD_INT 3
76226: PPUSH
76227: LD_INT 4
76229: PPUSH
76230: CALL_OW 273
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: PUSH
76239: LD_VAR 0 7
76243: PPUSH
76244: LD_INT 4
76246: PPUSH
76247: LD_INT 4
76249: PPUSH
76250: CALL_OW 272
76254: PUSH
76255: LD_VAR 0 8
76259: PPUSH
76260: LD_INT 4
76262: PPUSH
76263: LD_INT 4
76265: PPUSH
76266: CALL_OW 273
76270: PUSH
76271: EMPTY
76272: LIST
76273: LIST
76274: PUSH
76275: LD_VAR 0 7
76279: PPUSH
76280: LD_INT 5
76282: PPUSH
76283: LD_INT 4
76285: PPUSH
76286: CALL_OW 272
76290: PUSH
76291: LD_VAR 0 8
76295: PPUSH
76296: LD_INT 5
76298: PPUSH
76299: LD_INT 4
76301: PPUSH
76302: CALL_OW 273
76306: PUSH
76307: EMPTY
76308: LIST
76309: LIST
76310: PUSH
76311: EMPTY
76312: LIST
76313: LIST
76314: LIST
76315: LIST
76316: LIST
76317: LIST
76318: ST_TO_ADDR
// for i = tmp downto 1 do
76319: LD_ADDR_VAR 0 4
76323: PUSH
76324: DOUBLE
76325: LD_VAR 0 6
76329: INC
76330: ST_TO_ADDR
76331: LD_INT 1
76333: PUSH
76334: FOR_DOWNTO
76335: IFFALSE 76436
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76337: LD_VAR 0 6
76341: PUSH
76342: LD_VAR 0 4
76346: ARRAY
76347: PUSH
76348: LD_INT 1
76350: ARRAY
76351: PPUSH
76352: LD_VAR 0 6
76356: PUSH
76357: LD_VAR 0 4
76361: ARRAY
76362: PUSH
76363: LD_INT 2
76365: ARRAY
76366: PPUSH
76367: CALL_OW 488
76371: NOT
76372: PUSH
76373: LD_VAR 0 6
76377: PUSH
76378: LD_VAR 0 4
76382: ARRAY
76383: PUSH
76384: LD_INT 1
76386: ARRAY
76387: PPUSH
76388: LD_VAR 0 6
76392: PUSH
76393: LD_VAR 0 4
76397: ARRAY
76398: PUSH
76399: LD_INT 2
76401: ARRAY
76402: PPUSH
76403: CALL_OW 428
76407: PUSH
76408: LD_INT 0
76410: NONEQUAL
76411: OR
76412: IFFALSE 76434
// tmp := Delete ( tmp , i ) ;
76414: LD_ADDR_VAR 0 6
76418: PUSH
76419: LD_VAR 0 6
76423: PPUSH
76424: LD_VAR 0 4
76428: PPUSH
76429: CALL_OW 3
76433: ST_TO_ADDR
76434: GO 76334
76436: POP
76437: POP
// j := GetClosestHex ( unit , tmp ) ;
76438: LD_ADDR_VAR 0 5
76442: PUSH
76443: LD_VAR 0 1
76447: PPUSH
76448: LD_VAR 0 6
76452: PPUSH
76453: CALL 75740 0 2
76457: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76458: LD_VAR 0 1
76462: PPUSH
76463: LD_VAR 0 5
76467: PUSH
76468: LD_INT 1
76470: ARRAY
76471: PPUSH
76472: LD_VAR 0 5
76476: PUSH
76477: LD_INT 2
76479: ARRAY
76480: PPUSH
76481: CALL_OW 111
// end ;
76485: LD_VAR 0 3
76489: RET
// export function PrepareApemanSoldier ( ) ; begin
76490: LD_INT 0
76492: PPUSH
// uc_nation := 0 ;
76493: LD_ADDR_OWVAR 21
76497: PUSH
76498: LD_INT 0
76500: ST_TO_ADDR
// hc_sex := sex_male ;
76501: LD_ADDR_OWVAR 27
76505: PUSH
76506: LD_INT 1
76508: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
76509: LD_ADDR_OWVAR 28
76513: PUSH
76514: LD_INT 15
76516: ST_TO_ADDR
// hc_gallery :=  ;
76517: LD_ADDR_OWVAR 33
76521: PUSH
76522: LD_STRING 
76524: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76525: LD_ADDR_OWVAR 31
76529: PUSH
76530: LD_INT 0
76532: PPUSH
76533: LD_INT 3
76535: PPUSH
76536: CALL_OW 12
76540: PUSH
76541: LD_INT 0
76543: PPUSH
76544: LD_INT 3
76546: PPUSH
76547: CALL_OW 12
76551: PUSH
76552: LD_INT 0
76554: PUSH
76555: LD_INT 0
76557: PUSH
76558: EMPTY
76559: LIST
76560: LIST
76561: LIST
76562: LIST
76563: ST_TO_ADDR
// end ;
76564: LD_VAR 0 1
76568: RET
// export function PrepareApemanEngineer ( ) ; begin
76569: LD_INT 0
76571: PPUSH
// uc_nation := 0 ;
76572: LD_ADDR_OWVAR 21
76576: PUSH
76577: LD_INT 0
76579: ST_TO_ADDR
// hc_sex := sex_male ;
76580: LD_ADDR_OWVAR 27
76584: PUSH
76585: LD_INT 1
76587: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
76588: LD_ADDR_OWVAR 28
76592: PUSH
76593: LD_INT 16
76595: ST_TO_ADDR
// hc_gallery :=  ;
76596: LD_ADDR_OWVAR 33
76600: PUSH
76601: LD_STRING 
76603: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76604: LD_ADDR_OWVAR 31
76608: PUSH
76609: LD_INT 0
76611: PPUSH
76612: LD_INT 3
76614: PPUSH
76615: CALL_OW 12
76619: PUSH
76620: LD_INT 0
76622: PPUSH
76623: LD_INT 3
76625: PPUSH
76626: CALL_OW 12
76630: PUSH
76631: LD_INT 0
76633: PUSH
76634: LD_INT 0
76636: PUSH
76637: EMPTY
76638: LIST
76639: LIST
76640: LIST
76641: LIST
76642: ST_TO_ADDR
// end ;
76643: LD_VAR 0 1
76647: RET
// export function PrepareApeman ( agressivity ) ; begin
76648: LD_INT 0
76650: PPUSH
// uc_side := 0 ;
76651: LD_ADDR_OWVAR 20
76655: PUSH
76656: LD_INT 0
76658: ST_TO_ADDR
// uc_nation := 0 ;
76659: LD_ADDR_OWVAR 21
76663: PUSH
76664: LD_INT 0
76666: ST_TO_ADDR
// hc_sex := sex_male ;
76667: LD_ADDR_OWVAR 27
76671: PUSH
76672: LD_INT 1
76674: ST_TO_ADDR
// hc_class := class_apeman ;
76675: LD_ADDR_OWVAR 28
76679: PUSH
76680: LD_INT 12
76682: ST_TO_ADDR
// hc_gallery :=  ;
76683: LD_ADDR_OWVAR 33
76687: PUSH
76688: LD_STRING 
76690: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76691: LD_ADDR_OWVAR 35
76695: PUSH
76696: LD_VAR 0 1
76700: NEG
76701: PPUSH
76702: LD_VAR 0 1
76706: PPUSH
76707: CALL_OW 12
76711: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76712: LD_ADDR_OWVAR 31
76716: PUSH
76717: LD_INT 0
76719: PPUSH
76720: LD_INT 3
76722: PPUSH
76723: CALL_OW 12
76727: PUSH
76728: LD_INT 0
76730: PPUSH
76731: LD_INT 3
76733: PPUSH
76734: CALL_OW 12
76738: PUSH
76739: LD_INT 0
76741: PUSH
76742: LD_INT 0
76744: PUSH
76745: EMPTY
76746: LIST
76747: LIST
76748: LIST
76749: LIST
76750: ST_TO_ADDR
// end ;
76751: LD_VAR 0 2
76755: RET
// export function PrepareTiger ( agressivity ) ; begin
76756: LD_INT 0
76758: PPUSH
// uc_side := 0 ;
76759: LD_ADDR_OWVAR 20
76763: PUSH
76764: LD_INT 0
76766: ST_TO_ADDR
// uc_nation := 0 ;
76767: LD_ADDR_OWVAR 21
76771: PUSH
76772: LD_INT 0
76774: ST_TO_ADDR
// hc_class := class_tiger ;
76775: LD_ADDR_OWVAR 28
76779: PUSH
76780: LD_INT 14
76782: ST_TO_ADDR
// hc_gallery :=  ;
76783: LD_ADDR_OWVAR 33
76787: PUSH
76788: LD_STRING 
76790: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76791: LD_ADDR_OWVAR 35
76795: PUSH
76796: LD_VAR 0 1
76800: NEG
76801: PPUSH
76802: LD_VAR 0 1
76806: PPUSH
76807: CALL_OW 12
76811: ST_TO_ADDR
// end ;
76812: LD_VAR 0 2
76816: RET
// export function PrepareEnchidna ( ) ; begin
76817: LD_INT 0
76819: PPUSH
// uc_side := 0 ;
76820: LD_ADDR_OWVAR 20
76824: PUSH
76825: LD_INT 0
76827: ST_TO_ADDR
// uc_nation := 0 ;
76828: LD_ADDR_OWVAR 21
76832: PUSH
76833: LD_INT 0
76835: ST_TO_ADDR
// hc_class := class_baggie ;
76836: LD_ADDR_OWVAR 28
76840: PUSH
76841: LD_INT 13
76843: ST_TO_ADDR
// hc_gallery :=  ;
76844: LD_ADDR_OWVAR 33
76848: PUSH
76849: LD_STRING 
76851: ST_TO_ADDR
// end ;
76852: LD_VAR 0 1
76856: RET
// export function PrepareFrog ( ) ; begin
76857: LD_INT 0
76859: PPUSH
// uc_side := 0 ;
76860: LD_ADDR_OWVAR 20
76864: PUSH
76865: LD_INT 0
76867: ST_TO_ADDR
// uc_nation := 0 ;
76868: LD_ADDR_OWVAR 21
76872: PUSH
76873: LD_INT 0
76875: ST_TO_ADDR
// hc_class := class_frog ;
76876: LD_ADDR_OWVAR 28
76880: PUSH
76881: LD_INT 19
76883: ST_TO_ADDR
// hc_gallery :=  ;
76884: LD_ADDR_OWVAR 33
76888: PUSH
76889: LD_STRING 
76891: ST_TO_ADDR
// end ;
76892: LD_VAR 0 1
76896: RET
// export function PrepareFish ( ) ; begin
76897: LD_INT 0
76899: PPUSH
// uc_side := 0 ;
76900: LD_ADDR_OWVAR 20
76904: PUSH
76905: LD_INT 0
76907: ST_TO_ADDR
// uc_nation := 0 ;
76908: LD_ADDR_OWVAR 21
76912: PUSH
76913: LD_INT 0
76915: ST_TO_ADDR
// hc_class := class_fish ;
76916: LD_ADDR_OWVAR 28
76920: PUSH
76921: LD_INT 20
76923: ST_TO_ADDR
// hc_gallery :=  ;
76924: LD_ADDR_OWVAR 33
76928: PUSH
76929: LD_STRING 
76931: ST_TO_ADDR
// end ;
76932: LD_VAR 0 1
76936: RET
// export function PrepareBird ( ) ; begin
76937: LD_INT 0
76939: PPUSH
// uc_side := 0 ;
76940: LD_ADDR_OWVAR 20
76944: PUSH
76945: LD_INT 0
76947: ST_TO_ADDR
// uc_nation := 0 ;
76948: LD_ADDR_OWVAR 21
76952: PUSH
76953: LD_INT 0
76955: ST_TO_ADDR
// hc_class := class_phororhacos ;
76956: LD_ADDR_OWVAR 28
76960: PUSH
76961: LD_INT 18
76963: ST_TO_ADDR
// hc_gallery :=  ;
76964: LD_ADDR_OWVAR 33
76968: PUSH
76969: LD_STRING 
76971: ST_TO_ADDR
// end ;
76972: LD_VAR 0 1
76976: RET
// export function PrepareHorse ( ) ; begin
76977: LD_INT 0
76979: PPUSH
// uc_side := 0 ;
76980: LD_ADDR_OWVAR 20
76984: PUSH
76985: LD_INT 0
76987: ST_TO_ADDR
// uc_nation := 0 ;
76988: LD_ADDR_OWVAR 21
76992: PUSH
76993: LD_INT 0
76995: ST_TO_ADDR
// hc_class := class_horse ;
76996: LD_ADDR_OWVAR 28
77000: PUSH
77001: LD_INT 21
77003: ST_TO_ADDR
// hc_gallery :=  ;
77004: LD_ADDR_OWVAR 33
77008: PUSH
77009: LD_STRING 
77011: ST_TO_ADDR
// end ;
77012: LD_VAR 0 1
77016: RET
// export function PrepareMastodont ( ) ; begin
77017: LD_INT 0
77019: PPUSH
// uc_side := 0 ;
77020: LD_ADDR_OWVAR 20
77024: PUSH
77025: LD_INT 0
77027: ST_TO_ADDR
// uc_nation := 0 ;
77028: LD_ADDR_OWVAR 21
77032: PUSH
77033: LD_INT 0
77035: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77036: LD_ADDR_OWVAR 37
77040: PUSH
77041: LD_INT 31
77043: ST_TO_ADDR
// vc_control := control_rider ;
77044: LD_ADDR_OWVAR 38
77048: PUSH
77049: LD_INT 4
77051: ST_TO_ADDR
// end ;
77052: LD_VAR 0 1
77056: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77057: LD_INT 0
77059: PPUSH
77060: PPUSH
77061: PPUSH
// uc_side = 0 ;
77062: LD_ADDR_OWVAR 20
77066: PUSH
77067: LD_INT 0
77069: ST_TO_ADDR
// uc_nation = 0 ;
77070: LD_ADDR_OWVAR 21
77074: PUSH
77075: LD_INT 0
77077: ST_TO_ADDR
// InitHc_All ( ) ;
77078: CALL_OW 584
// InitVc ;
77082: CALL_OW 20
// if mastodonts then
77086: LD_VAR 0 6
77090: IFFALSE 77157
// for i = 1 to mastodonts do
77092: LD_ADDR_VAR 0 11
77096: PUSH
77097: DOUBLE
77098: LD_INT 1
77100: DEC
77101: ST_TO_ADDR
77102: LD_VAR 0 6
77106: PUSH
77107: FOR_TO
77108: IFFALSE 77155
// begin vc_chassis := 31 ;
77110: LD_ADDR_OWVAR 37
77114: PUSH
77115: LD_INT 31
77117: ST_TO_ADDR
// vc_control := control_rider ;
77118: LD_ADDR_OWVAR 38
77122: PUSH
77123: LD_INT 4
77125: ST_TO_ADDR
// animal := CreateVehicle ;
77126: LD_ADDR_VAR 0 12
77130: PUSH
77131: CALL_OW 45
77135: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77136: LD_VAR 0 12
77140: PPUSH
77141: LD_VAR 0 8
77145: PPUSH
77146: LD_INT 0
77148: PPUSH
77149: CALL 79285 0 3
// end ;
77153: GO 77107
77155: POP
77156: POP
// if horses then
77157: LD_VAR 0 5
77161: IFFALSE 77228
// for i = 1 to horses do
77163: LD_ADDR_VAR 0 11
77167: PUSH
77168: DOUBLE
77169: LD_INT 1
77171: DEC
77172: ST_TO_ADDR
77173: LD_VAR 0 5
77177: PUSH
77178: FOR_TO
77179: IFFALSE 77226
// begin hc_class := 21 ;
77181: LD_ADDR_OWVAR 28
77185: PUSH
77186: LD_INT 21
77188: ST_TO_ADDR
// hc_gallery :=  ;
77189: LD_ADDR_OWVAR 33
77193: PUSH
77194: LD_STRING 
77196: ST_TO_ADDR
// animal := CreateHuman ;
77197: LD_ADDR_VAR 0 12
77201: PUSH
77202: CALL_OW 44
77206: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77207: LD_VAR 0 12
77211: PPUSH
77212: LD_VAR 0 8
77216: PPUSH
77217: LD_INT 0
77219: PPUSH
77220: CALL 79285 0 3
// end ;
77224: GO 77178
77226: POP
77227: POP
// if birds then
77228: LD_VAR 0 1
77232: IFFALSE 77299
// for i = 1 to birds do
77234: LD_ADDR_VAR 0 11
77238: PUSH
77239: DOUBLE
77240: LD_INT 1
77242: DEC
77243: ST_TO_ADDR
77244: LD_VAR 0 1
77248: PUSH
77249: FOR_TO
77250: IFFALSE 77297
// begin hc_class := 18 ;
77252: LD_ADDR_OWVAR 28
77256: PUSH
77257: LD_INT 18
77259: ST_TO_ADDR
// hc_gallery =  ;
77260: LD_ADDR_OWVAR 33
77264: PUSH
77265: LD_STRING 
77267: ST_TO_ADDR
// animal := CreateHuman ;
77268: LD_ADDR_VAR 0 12
77272: PUSH
77273: CALL_OW 44
77277: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77278: LD_VAR 0 12
77282: PPUSH
77283: LD_VAR 0 8
77287: PPUSH
77288: LD_INT 0
77290: PPUSH
77291: CALL 79285 0 3
// end ;
77295: GO 77249
77297: POP
77298: POP
// if tigers then
77299: LD_VAR 0 2
77303: IFFALSE 77387
// for i = 1 to tigers do
77305: LD_ADDR_VAR 0 11
77309: PUSH
77310: DOUBLE
77311: LD_INT 1
77313: DEC
77314: ST_TO_ADDR
77315: LD_VAR 0 2
77319: PUSH
77320: FOR_TO
77321: IFFALSE 77385
// begin hc_class = class_tiger ;
77323: LD_ADDR_OWVAR 28
77327: PUSH
77328: LD_INT 14
77330: ST_TO_ADDR
// hc_gallery =  ;
77331: LD_ADDR_OWVAR 33
77335: PUSH
77336: LD_STRING 
77338: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77339: LD_ADDR_OWVAR 35
77343: PUSH
77344: LD_INT 7
77346: NEG
77347: PPUSH
77348: LD_INT 7
77350: PPUSH
77351: CALL_OW 12
77355: ST_TO_ADDR
// animal := CreateHuman ;
77356: LD_ADDR_VAR 0 12
77360: PUSH
77361: CALL_OW 44
77365: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77366: LD_VAR 0 12
77370: PPUSH
77371: LD_VAR 0 8
77375: PPUSH
77376: LD_INT 0
77378: PPUSH
77379: CALL 79285 0 3
// end ;
77383: GO 77320
77385: POP
77386: POP
// if apemans then
77387: LD_VAR 0 3
77391: IFFALSE 77514
// for i = 1 to apemans do
77393: LD_ADDR_VAR 0 11
77397: PUSH
77398: DOUBLE
77399: LD_INT 1
77401: DEC
77402: ST_TO_ADDR
77403: LD_VAR 0 3
77407: PUSH
77408: FOR_TO
77409: IFFALSE 77512
// begin hc_class = class_apeman ;
77411: LD_ADDR_OWVAR 28
77415: PUSH
77416: LD_INT 12
77418: ST_TO_ADDR
// hc_gallery =  ;
77419: LD_ADDR_OWVAR 33
77423: PUSH
77424: LD_STRING 
77426: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
77427: LD_ADDR_OWVAR 35
77431: PUSH
77432: LD_INT 2
77434: NEG
77435: PPUSH
77436: LD_INT 2
77438: PPUSH
77439: CALL_OW 12
77443: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77444: LD_ADDR_OWVAR 31
77448: PUSH
77449: LD_INT 1
77451: PPUSH
77452: LD_INT 3
77454: PPUSH
77455: CALL_OW 12
77459: PUSH
77460: LD_INT 1
77462: PPUSH
77463: LD_INT 3
77465: PPUSH
77466: CALL_OW 12
77470: PUSH
77471: LD_INT 0
77473: PUSH
77474: LD_INT 0
77476: PUSH
77477: EMPTY
77478: LIST
77479: LIST
77480: LIST
77481: LIST
77482: ST_TO_ADDR
// animal := CreateHuman ;
77483: LD_ADDR_VAR 0 12
77487: PUSH
77488: CALL_OW 44
77492: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77493: LD_VAR 0 12
77497: PPUSH
77498: LD_VAR 0 8
77502: PPUSH
77503: LD_INT 0
77505: PPUSH
77506: CALL 79285 0 3
// end ;
77510: GO 77408
77512: POP
77513: POP
// if enchidnas then
77514: LD_VAR 0 4
77518: IFFALSE 77585
// for i = 1 to enchidnas do
77520: LD_ADDR_VAR 0 11
77524: PUSH
77525: DOUBLE
77526: LD_INT 1
77528: DEC
77529: ST_TO_ADDR
77530: LD_VAR 0 4
77534: PUSH
77535: FOR_TO
77536: IFFALSE 77583
// begin hc_class = 13 ;
77538: LD_ADDR_OWVAR 28
77542: PUSH
77543: LD_INT 13
77545: ST_TO_ADDR
// hc_gallery =  ;
77546: LD_ADDR_OWVAR 33
77550: PUSH
77551: LD_STRING 
77553: ST_TO_ADDR
// animal := CreateHuman ;
77554: LD_ADDR_VAR 0 12
77558: PUSH
77559: CALL_OW 44
77563: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77564: LD_VAR 0 12
77568: PPUSH
77569: LD_VAR 0 8
77573: PPUSH
77574: LD_INT 0
77576: PPUSH
77577: CALL 79285 0 3
// end ;
77581: GO 77535
77583: POP
77584: POP
// if fishes then
77585: LD_VAR 0 7
77589: IFFALSE 77656
// for i = 1 to fishes do
77591: LD_ADDR_VAR 0 11
77595: PUSH
77596: DOUBLE
77597: LD_INT 1
77599: DEC
77600: ST_TO_ADDR
77601: LD_VAR 0 7
77605: PUSH
77606: FOR_TO
77607: IFFALSE 77654
// begin hc_class = 20 ;
77609: LD_ADDR_OWVAR 28
77613: PUSH
77614: LD_INT 20
77616: ST_TO_ADDR
// hc_gallery =  ;
77617: LD_ADDR_OWVAR 33
77621: PUSH
77622: LD_STRING 
77624: ST_TO_ADDR
// animal := CreateHuman ;
77625: LD_ADDR_VAR 0 12
77629: PUSH
77630: CALL_OW 44
77634: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77635: LD_VAR 0 12
77639: PPUSH
77640: LD_VAR 0 9
77644: PPUSH
77645: LD_INT 0
77647: PPUSH
77648: CALL 79285 0 3
// end ;
77652: GO 77606
77654: POP
77655: POP
// end ;
77656: LD_VAR 0 10
77660: RET
// export function WantHeal ( sci , unit ) ; begin
77661: LD_INT 0
77663: PPUSH
// if GetTaskList ( sci ) > 0 then
77664: LD_VAR 0 1
77668: PPUSH
77669: CALL_OW 437
77673: PUSH
77674: LD_INT 0
77676: GREATER
77677: IFFALSE 77747
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77679: LD_VAR 0 1
77683: PPUSH
77684: CALL_OW 437
77688: PUSH
77689: LD_INT 1
77691: ARRAY
77692: PUSH
77693: LD_INT 1
77695: ARRAY
77696: PUSH
77697: LD_STRING l
77699: EQUAL
77700: PUSH
77701: LD_VAR 0 1
77705: PPUSH
77706: CALL_OW 437
77710: PUSH
77711: LD_INT 1
77713: ARRAY
77714: PUSH
77715: LD_INT 4
77717: ARRAY
77718: PUSH
77719: LD_VAR 0 2
77723: EQUAL
77724: AND
77725: IFFALSE 77737
// result := true else
77727: LD_ADDR_VAR 0 3
77731: PUSH
77732: LD_INT 1
77734: ST_TO_ADDR
77735: GO 77745
// result := false ;
77737: LD_ADDR_VAR 0 3
77741: PUSH
77742: LD_INT 0
77744: ST_TO_ADDR
// end else
77745: GO 77755
// result := false ;
77747: LD_ADDR_VAR 0 3
77751: PUSH
77752: LD_INT 0
77754: ST_TO_ADDR
// end ;
77755: LD_VAR 0 3
77759: RET
// export function HealTarget ( sci ) ; begin
77760: LD_INT 0
77762: PPUSH
// if not sci then
77763: LD_VAR 0 1
77767: NOT
77768: IFFALSE 77772
// exit ;
77770: GO 77837
// result := 0 ;
77772: LD_ADDR_VAR 0 2
77776: PUSH
77777: LD_INT 0
77779: ST_TO_ADDR
// if GetTaskList ( sci ) then
77780: LD_VAR 0 1
77784: PPUSH
77785: CALL_OW 437
77789: IFFALSE 77837
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77791: LD_VAR 0 1
77795: PPUSH
77796: CALL_OW 437
77800: PUSH
77801: LD_INT 1
77803: ARRAY
77804: PUSH
77805: LD_INT 1
77807: ARRAY
77808: PUSH
77809: LD_STRING l
77811: EQUAL
77812: IFFALSE 77837
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77814: LD_ADDR_VAR 0 2
77818: PUSH
77819: LD_VAR 0 1
77823: PPUSH
77824: CALL_OW 437
77828: PUSH
77829: LD_INT 1
77831: ARRAY
77832: PUSH
77833: LD_INT 4
77835: ARRAY
77836: ST_TO_ADDR
// end ;
77837: LD_VAR 0 2
77841: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77842: LD_INT 0
77844: PPUSH
77845: PPUSH
77846: PPUSH
77847: PPUSH
// if not base_units then
77848: LD_VAR 0 1
77852: NOT
77853: IFFALSE 77857
// exit ;
77855: GO 77944
// result := false ;
77857: LD_ADDR_VAR 0 2
77861: PUSH
77862: LD_INT 0
77864: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77865: LD_ADDR_VAR 0 5
77869: PUSH
77870: LD_VAR 0 1
77874: PPUSH
77875: LD_INT 21
77877: PUSH
77878: LD_INT 3
77880: PUSH
77881: EMPTY
77882: LIST
77883: LIST
77884: PPUSH
77885: CALL_OW 72
77889: ST_TO_ADDR
// if not tmp then
77890: LD_VAR 0 5
77894: NOT
77895: IFFALSE 77899
// exit ;
77897: GO 77944
// for i in tmp do
77899: LD_ADDR_VAR 0 3
77903: PUSH
77904: LD_VAR 0 5
77908: PUSH
77909: FOR_IN
77910: IFFALSE 77942
// begin result := EnemyInRange ( i , 22 ) ;
77912: LD_ADDR_VAR 0 2
77916: PUSH
77917: LD_VAR 0 3
77921: PPUSH
77922: LD_INT 22
77924: PPUSH
77925: CALL 75542 0 2
77929: ST_TO_ADDR
// if result then
77930: LD_VAR 0 2
77934: IFFALSE 77940
// exit ;
77936: POP
77937: POP
77938: GO 77944
// end ;
77940: GO 77909
77942: POP
77943: POP
// end ;
77944: LD_VAR 0 2
77948: RET
// export function FilterByTag ( units , tag ) ; begin
77949: LD_INT 0
77951: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77952: LD_ADDR_VAR 0 3
77956: PUSH
77957: LD_VAR 0 1
77961: PPUSH
77962: LD_INT 120
77964: PUSH
77965: LD_VAR 0 2
77969: PUSH
77970: EMPTY
77971: LIST
77972: LIST
77973: PPUSH
77974: CALL_OW 72
77978: ST_TO_ADDR
// end ;
77979: LD_VAR 0 3
77983: RET
// export function IsDriver ( un ) ; begin
77984: LD_INT 0
77986: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77987: LD_ADDR_VAR 0 2
77991: PUSH
77992: LD_VAR 0 1
77996: PUSH
77997: LD_INT 55
77999: PUSH
78000: EMPTY
78001: LIST
78002: PPUSH
78003: CALL_OW 69
78007: IN
78008: ST_TO_ADDR
// end ;
78009: LD_VAR 0 2
78013: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78014: LD_INT 0
78016: PPUSH
78017: PPUSH
// list := [ ] ;
78018: LD_ADDR_VAR 0 5
78022: PUSH
78023: EMPTY
78024: ST_TO_ADDR
// case d of 0 :
78025: LD_VAR 0 3
78029: PUSH
78030: LD_INT 0
78032: DOUBLE
78033: EQUAL
78034: IFTRUE 78038
78036: GO 78171
78038: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78039: LD_ADDR_VAR 0 5
78043: PUSH
78044: LD_VAR 0 1
78048: PUSH
78049: LD_INT 4
78051: MINUS
78052: PUSH
78053: LD_VAR 0 2
78057: PUSH
78058: LD_INT 4
78060: MINUS
78061: PUSH
78062: LD_INT 2
78064: PUSH
78065: EMPTY
78066: LIST
78067: LIST
78068: LIST
78069: PUSH
78070: LD_VAR 0 1
78074: PUSH
78075: LD_INT 3
78077: MINUS
78078: PUSH
78079: LD_VAR 0 2
78083: PUSH
78084: LD_INT 1
78086: PUSH
78087: EMPTY
78088: LIST
78089: LIST
78090: LIST
78091: PUSH
78092: LD_VAR 0 1
78096: PUSH
78097: LD_INT 4
78099: PLUS
78100: PUSH
78101: LD_VAR 0 2
78105: PUSH
78106: LD_INT 4
78108: PUSH
78109: EMPTY
78110: LIST
78111: LIST
78112: LIST
78113: PUSH
78114: LD_VAR 0 1
78118: PUSH
78119: LD_INT 3
78121: PLUS
78122: PUSH
78123: LD_VAR 0 2
78127: PUSH
78128: LD_INT 3
78130: PLUS
78131: PUSH
78132: LD_INT 5
78134: PUSH
78135: EMPTY
78136: LIST
78137: LIST
78138: LIST
78139: PUSH
78140: LD_VAR 0 1
78144: PUSH
78145: LD_VAR 0 2
78149: PUSH
78150: LD_INT 4
78152: PLUS
78153: PUSH
78154: LD_INT 0
78156: PUSH
78157: EMPTY
78158: LIST
78159: LIST
78160: LIST
78161: PUSH
78162: EMPTY
78163: LIST
78164: LIST
78165: LIST
78166: LIST
78167: LIST
78168: ST_TO_ADDR
// end ; 1 :
78169: GO 78869
78171: LD_INT 1
78173: DOUBLE
78174: EQUAL
78175: IFTRUE 78179
78177: GO 78312
78179: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78180: LD_ADDR_VAR 0 5
78184: PUSH
78185: LD_VAR 0 1
78189: PUSH
78190: LD_VAR 0 2
78194: PUSH
78195: LD_INT 4
78197: MINUS
78198: PUSH
78199: LD_INT 3
78201: PUSH
78202: EMPTY
78203: LIST
78204: LIST
78205: LIST
78206: PUSH
78207: LD_VAR 0 1
78211: PUSH
78212: LD_INT 3
78214: MINUS
78215: PUSH
78216: LD_VAR 0 2
78220: PUSH
78221: LD_INT 3
78223: MINUS
78224: PUSH
78225: LD_INT 2
78227: PUSH
78228: EMPTY
78229: LIST
78230: LIST
78231: LIST
78232: PUSH
78233: LD_VAR 0 1
78237: PUSH
78238: LD_INT 4
78240: MINUS
78241: PUSH
78242: LD_VAR 0 2
78246: PUSH
78247: LD_INT 1
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: LIST
78254: PUSH
78255: LD_VAR 0 1
78259: PUSH
78260: LD_VAR 0 2
78264: PUSH
78265: LD_INT 3
78267: PLUS
78268: PUSH
78269: LD_INT 0
78271: PUSH
78272: EMPTY
78273: LIST
78274: LIST
78275: LIST
78276: PUSH
78277: LD_VAR 0 1
78281: PUSH
78282: LD_INT 4
78284: PLUS
78285: PUSH
78286: LD_VAR 0 2
78290: PUSH
78291: LD_INT 4
78293: PLUS
78294: PUSH
78295: LD_INT 5
78297: PUSH
78298: EMPTY
78299: LIST
78300: LIST
78301: LIST
78302: PUSH
78303: EMPTY
78304: LIST
78305: LIST
78306: LIST
78307: LIST
78308: LIST
78309: ST_TO_ADDR
// end ; 2 :
78310: GO 78869
78312: LD_INT 2
78314: DOUBLE
78315: EQUAL
78316: IFTRUE 78320
78318: GO 78449
78320: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78321: LD_ADDR_VAR 0 5
78325: PUSH
78326: LD_VAR 0 1
78330: PUSH
78331: LD_VAR 0 2
78335: PUSH
78336: LD_INT 3
78338: MINUS
78339: PUSH
78340: LD_INT 3
78342: PUSH
78343: EMPTY
78344: LIST
78345: LIST
78346: LIST
78347: PUSH
78348: LD_VAR 0 1
78352: PUSH
78353: LD_INT 4
78355: PLUS
78356: PUSH
78357: LD_VAR 0 2
78361: PUSH
78362: LD_INT 4
78364: PUSH
78365: EMPTY
78366: LIST
78367: LIST
78368: LIST
78369: PUSH
78370: LD_VAR 0 1
78374: PUSH
78375: LD_VAR 0 2
78379: PUSH
78380: LD_INT 4
78382: PLUS
78383: PUSH
78384: LD_INT 0
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: LIST
78391: PUSH
78392: LD_VAR 0 1
78396: PUSH
78397: LD_INT 3
78399: MINUS
78400: PUSH
78401: LD_VAR 0 2
78405: PUSH
78406: LD_INT 1
78408: PUSH
78409: EMPTY
78410: LIST
78411: LIST
78412: LIST
78413: PUSH
78414: LD_VAR 0 1
78418: PUSH
78419: LD_INT 4
78421: MINUS
78422: PUSH
78423: LD_VAR 0 2
78427: PUSH
78428: LD_INT 4
78430: MINUS
78431: PUSH
78432: LD_INT 2
78434: PUSH
78435: EMPTY
78436: LIST
78437: LIST
78438: LIST
78439: PUSH
78440: EMPTY
78441: LIST
78442: LIST
78443: LIST
78444: LIST
78445: LIST
78446: ST_TO_ADDR
// end ; 3 :
78447: GO 78869
78449: LD_INT 3
78451: DOUBLE
78452: EQUAL
78453: IFTRUE 78457
78455: GO 78590
78457: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78458: LD_ADDR_VAR 0 5
78462: PUSH
78463: LD_VAR 0 1
78467: PUSH
78468: LD_INT 3
78470: PLUS
78471: PUSH
78472: LD_VAR 0 2
78476: PUSH
78477: LD_INT 4
78479: PUSH
78480: EMPTY
78481: LIST
78482: LIST
78483: LIST
78484: PUSH
78485: LD_VAR 0 1
78489: PUSH
78490: LD_INT 4
78492: PLUS
78493: PUSH
78494: LD_VAR 0 2
78498: PUSH
78499: LD_INT 4
78501: PLUS
78502: PUSH
78503: LD_INT 5
78505: PUSH
78506: EMPTY
78507: LIST
78508: LIST
78509: LIST
78510: PUSH
78511: LD_VAR 0 1
78515: PUSH
78516: LD_INT 4
78518: MINUS
78519: PUSH
78520: LD_VAR 0 2
78524: PUSH
78525: LD_INT 1
78527: PUSH
78528: EMPTY
78529: LIST
78530: LIST
78531: LIST
78532: PUSH
78533: LD_VAR 0 1
78537: PUSH
78538: LD_VAR 0 2
78542: PUSH
78543: LD_INT 4
78545: MINUS
78546: PUSH
78547: LD_INT 3
78549: PUSH
78550: EMPTY
78551: LIST
78552: LIST
78553: LIST
78554: PUSH
78555: LD_VAR 0 1
78559: PUSH
78560: LD_INT 3
78562: MINUS
78563: PUSH
78564: LD_VAR 0 2
78568: PUSH
78569: LD_INT 3
78571: MINUS
78572: PUSH
78573: LD_INT 2
78575: PUSH
78576: EMPTY
78577: LIST
78578: LIST
78579: LIST
78580: PUSH
78581: EMPTY
78582: LIST
78583: LIST
78584: LIST
78585: LIST
78586: LIST
78587: ST_TO_ADDR
// end ; 4 :
78588: GO 78869
78590: LD_INT 4
78592: DOUBLE
78593: EQUAL
78594: IFTRUE 78598
78596: GO 78731
78598: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78599: LD_ADDR_VAR 0 5
78603: PUSH
78604: LD_VAR 0 1
78608: PUSH
78609: LD_VAR 0 2
78613: PUSH
78614: LD_INT 4
78616: PLUS
78617: PUSH
78618: LD_INT 0
78620: PUSH
78621: EMPTY
78622: LIST
78623: LIST
78624: LIST
78625: PUSH
78626: LD_VAR 0 1
78630: PUSH
78631: LD_INT 3
78633: PLUS
78634: PUSH
78635: LD_VAR 0 2
78639: PUSH
78640: LD_INT 3
78642: PLUS
78643: PUSH
78644: LD_INT 5
78646: PUSH
78647: EMPTY
78648: LIST
78649: LIST
78650: LIST
78651: PUSH
78652: LD_VAR 0 1
78656: PUSH
78657: LD_INT 4
78659: PLUS
78660: PUSH
78661: LD_VAR 0 2
78665: PUSH
78666: LD_INT 4
78668: PUSH
78669: EMPTY
78670: LIST
78671: LIST
78672: LIST
78673: PUSH
78674: LD_VAR 0 1
78678: PUSH
78679: LD_VAR 0 2
78683: PUSH
78684: LD_INT 3
78686: MINUS
78687: PUSH
78688: LD_INT 3
78690: PUSH
78691: EMPTY
78692: LIST
78693: LIST
78694: LIST
78695: PUSH
78696: LD_VAR 0 1
78700: PUSH
78701: LD_INT 4
78703: MINUS
78704: PUSH
78705: LD_VAR 0 2
78709: PUSH
78710: LD_INT 4
78712: MINUS
78713: PUSH
78714: LD_INT 2
78716: PUSH
78717: EMPTY
78718: LIST
78719: LIST
78720: LIST
78721: PUSH
78722: EMPTY
78723: LIST
78724: LIST
78725: LIST
78726: LIST
78727: LIST
78728: ST_TO_ADDR
// end ; 5 :
78729: GO 78869
78731: LD_INT 5
78733: DOUBLE
78734: EQUAL
78735: IFTRUE 78739
78737: GO 78868
78739: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78740: LD_ADDR_VAR 0 5
78744: PUSH
78745: LD_VAR 0 1
78749: PUSH
78750: LD_INT 4
78752: MINUS
78753: PUSH
78754: LD_VAR 0 2
78758: PUSH
78759: LD_INT 1
78761: PUSH
78762: EMPTY
78763: LIST
78764: LIST
78765: LIST
78766: PUSH
78767: LD_VAR 0 1
78771: PUSH
78772: LD_VAR 0 2
78776: PUSH
78777: LD_INT 4
78779: MINUS
78780: PUSH
78781: LD_INT 3
78783: PUSH
78784: EMPTY
78785: LIST
78786: LIST
78787: LIST
78788: PUSH
78789: LD_VAR 0 1
78793: PUSH
78794: LD_INT 4
78796: PLUS
78797: PUSH
78798: LD_VAR 0 2
78802: PUSH
78803: LD_INT 4
78805: PLUS
78806: PUSH
78807: LD_INT 5
78809: PUSH
78810: EMPTY
78811: LIST
78812: LIST
78813: LIST
78814: PUSH
78815: LD_VAR 0 1
78819: PUSH
78820: LD_INT 3
78822: PLUS
78823: PUSH
78824: LD_VAR 0 2
78828: PUSH
78829: LD_INT 4
78831: PUSH
78832: EMPTY
78833: LIST
78834: LIST
78835: LIST
78836: PUSH
78837: LD_VAR 0 1
78841: PUSH
78842: LD_VAR 0 2
78846: PUSH
78847: LD_INT 3
78849: PLUS
78850: PUSH
78851: LD_INT 0
78853: PUSH
78854: EMPTY
78855: LIST
78856: LIST
78857: LIST
78858: PUSH
78859: EMPTY
78860: LIST
78861: LIST
78862: LIST
78863: LIST
78864: LIST
78865: ST_TO_ADDR
// end ; end ;
78866: GO 78869
78868: POP
// result := list ;
78869: LD_ADDR_VAR 0 4
78873: PUSH
78874: LD_VAR 0 5
78878: ST_TO_ADDR
// end ;
78879: LD_VAR 0 4
78883: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78884: LD_INT 0
78886: PPUSH
78887: PPUSH
78888: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78889: LD_VAR 0 1
78893: NOT
78894: PUSH
78895: LD_VAR 0 2
78899: PUSH
78900: LD_INT 1
78902: PUSH
78903: LD_INT 2
78905: PUSH
78906: LD_INT 3
78908: PUSH
78909: LD_INT 4
78911: PUSH
78912: EMPTY
78913: LIST
78914: LIST
78915: LIST
78916: LIST
78917: IN
78918: NOT
78919: OR
78920: IFFALSE 78924
// exit ;
78922: GO 79007
// tmp := [ ] ;
78924: LD_ADDR_VAR 0 5
78928: PUSH
78929: EMPTY
78930: ST_TO_ADDR
// for i in units do
78931: LD_ADDR_VAR 0 4
78935: PUSH
78936: LD_VAR 0 1
78940: PUSH
78941: FOR_IN
78942: IFFALSE 78976
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78944: LD_ADDR_VAR 0 5
78948: PUSH
78949: LD_VAR 0 5
78953: PPUSH
78954: LD_VAR 0 4
78958: PPUSH
78959: LD_VAR 0 2
78963: PPUSH
78964: CALL_OW 259
78968: PPUSH
78969: CALL 80380 0 2
78973: ST_TO_ADDR
78974: GO 78941
78976: POP
78977: POP
// if not tmp then
78978: LD_VAR 0 5
78982: NOT
78983: IFFALSE 78987
// exit ;
78985: GO 79007
// result := SortListByListDesc ( units , tmp ) ;
78987: LD_ADDR_VAR 0 3
78991: PUSH
78992: LD_VAR 0 1
78996: PPUSH
78997: LD_VAR 0 5
79001: PPUSH
79002: CALL_OW 77
79006: ST_TO_ADDR
// end ;
79007: LD_VAR 0 3
79011: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79012: LD_INT 0
79014: PPUSH
79015: PPUSH
79016: PPUSH
// result := false ;
79017: LD_ADDR_VAR 0 3
79021: PUSH
79022: LD_INT 0
79024: ST_TO_ADDR
// if not building then
79025: LD_VAR 0 2
79029: NOT
79030: IFFALSE 79034
// exit ;
79032: GO 79172
// x := GetX ( building ) ;
79034: LD_ADDR_VAR 0 4
79038: PUSH
79039: LD_VAR 0 2
79043: PPUSH
79044: CALL_OW 250
79048: ST_TO_ADDR
// y := GetY ( building ) ;
79049: LD_ADDR_VAR 0 5
79053: PUSH
79054: LD_VAR 0 2
79058: PPUSH
79059: CALL_OW 251
79063: ST_TO_ADDR
// if not x or not y then
79064: LD_VAR 0 4
79068: NOT
79069: PUSH
79070: LD_VAR 0 5
79074: NOT
79075: OR
79076: IFFALSE 79080
// exit ;
79078: GO 79172
// if GetTaskList ( unit ) then
79080: LD_VAR 0 1
79084: PPUSH
79085: CALL_OW 437
79089: IFFALSE 79172
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79091: LD_STRING e
79093: PUSH
79094: LD_VAR 0 1
79098: PPUSH
79099: CALL_OW 437
79103: PUSH
79104: LD_INT 1
79106: ARRAY
79107: PUSH
79108: LD_INT 1
79110: ARRAY
79111: EQUAL
79112: PUSH
79113: LD_VAR 0 4
79117: PUSH
79118: LD_VAR 0 1
79122: PPUSH
79123: CALL_OW 437
79127: PUSH
79128: LD_INT 1
79130: ARRAY
79131: PUSH
79132: LD_INT 2
79134: ARRAY
79135: EQUAL
79136: AND
79137: PUSH
79138: LD_VAR 0 5
79142: PUSH
79143: LD_VAR 0 1
79147: PPUSH
79148: CALL_OW 437
79152: PUSH
79153: LD_INT 1
79155: ARRAY
79156: PUSH
79157: LD_INT 3
79159: ARRAY
79160: EQUAL
79161: AND
79162: IFFALSE 79172
// result := true end ;
79164: LD_ADDR_VAR 0 3
79168: PUSH
79169: LD_INT 1
79171: ST_TO_ADDR
// end ;
79172: LD_VAR 0 3
79176: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79177: LD_INT 0
79179: PPUSH
// result := false ;
79180: LD_ADDR_VAR 0 4
79184: PUSH
79185: LD_INT 0
79187: ST_TO_ADDR
// if GetTaskList ( unit ) then
79188: LD_VAR 0 1
79192: PPUSH
79193: CALL_OW 437
79197: IFFALSE 79280
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79199: LD_STRING M
79201: PUSH
79202: LD_VAR 0 1
79206: PPUSH
79207: CALL_OW 437
79211: PUSH
79212: LD_INT 1
79214: ARRAY
79215: PUSH
79216: LD_INT 1
79218: ARRAY
79219: EQUAL
79220: PUSH
79221: LD_VAR 0 2
79225: PUSH
79226: LD_VAR 0 1
79230: PPUSH
79231: CALL_OW 437
79235: PUSH
79236: LD_INT 1
79238: ARRAY
79239: PUSH
79240: LD_INT 2
79242: ARRAY
79243: EQUAL
79244: AND
79245: PUSH
79246: LD_VAR 0 3
79250: PUSH
79251: LD_VAR 0 1
79255: PPUSH
79256: CALL_OW 437
79260: PUSH
79261: LD_INT 1
79263: ARRAY
79264: PUSH
79265: LD_INT 3
79267: ARRAY
79268: EQUAL
79269: AND
79270: IFFALSE 79280
// result := true ;
79272: LD_ADDR_VAR 0 4
79276: PUSH
79277: LD_INT 1
79279: ST_TO_ADDR
// end ; end ;
79280: LD_VAR 0 4
79284: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79285: LD_INT 0
79287: PPUSH
79288: PPUSH
79289: PPUSH
79290: PPUSH
// if not unit or not area then
79291: LD_VAR 0 1
79295: NOT
79296: PUSH
79297: LD_VAR 0 2
79301: NOT
79302: OR
79303: IFFALSE 79307
// exit ;
79305: GO 79483
// tmp := AreaToList ( area , i ) ;
79307: LD_ADDR_VAR 0 6
79311: PUSH
79312: LD_VAR 0 2
79316: PPUSH
79317: LD_VAR 0 5
79321: PPUSH
79322: CALL_OW 517
79326: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79327: LD_ADDR_VAR 0 5
79331: PUSH
79332: DOUBLE
79333: LD_INT 1
79335: DEC
79336: ST_TO_ADDR
79337: LD_VAR 0 6
79341: PUSH
79342: LD_INT 1
79344: ARRAY
79345: PUSH
79346: FOR_TO
79347: IFFALSE 79481
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79349: LD_ADDR_VAR 0 7
79353: PUSH
79354: LD_VAR 0 6
79358: PUSH
79359: LD_INT 1
79361: ARRAY
79362: PUSH
79363: LD_VAR 0 5
79367: ARRAY
79368: PUSH
79369: LD_VAR 0 6
79373: PUSH
79374: LD_INT 2
79376: ARRAY
79377: PUSH
79378: LD_VAR 0 5
79382: ARRAY
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
79388: LD_INT 92
79390: PUSH
79391: LD_VAR 0 7
79395: PUSH
79396: LD_INT 1
79398: ARRAY
79399: PUSH
79400: LD_VAR 0 7
79404: PUSH
79405: LD_INT 2
79407: ARRAY
79408: PUSH
79409: LD_INT 2
79411: PUSH
79412: EMPTY
79413: LIST
79414: LIST
79415: LIST
79416: LIST
79417: PPUSH
79418: CALL_OW 69
79422: PUSH
79423: LD_INT 0
79425: EQUAL
79426: IFFALSE 79479
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79428: LD_VAR 0 1
79432: PPUSH
79433: LD_VAR 0 7
79437: PUSH
79438: LD_INT 1
79440: ARRAY
79441: PPUSH
79442: LD_VAR 0 7
79446: PUSH
79447: LD_INT 2
79449: ARRAY
79450: PPUSH
79451: LD_VAR 0 3
79455: PPUSH
79456: CALL_OW 48
// result := IsPlaced ( unit ) ;
79460: LD_ADDR_VAR 0 4
79464: PUSH
79465: LD_VAR 0 1
79469: PPUSH
79470: CALL_OW 305
79474: ST_TO_ADDR
// exit ;
79475: POP
79476: POP
79477: GO 79483
// end ; end ;
79479: GO 79346
79481: POP
79482: POP
// end ;
79483: LD_VAR 0 4
79487: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79488: LD_INT 0
79490: PPUSH
79491: PPUSH
79492: PPUSH
// if not side or side > 8 then
79493: LD_VAR 0 1
79497: NOT
79498: PUSH
79499: LD_VAR 0 1
79503: PUSH
79504: LD_INT 8
79506: GREATER
79507: OR
79508: IFFALSE 79512
// exit ;
79510: GO 79699
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79512: LD_ADDR_VAR 0 4
79516: PUSH
79517: LD_INT 22
79519: PUSH
79520: LD_VAR 0 1
79524: PUSH
79525: EMPTY
79526: LIST
79527: LIST
79528: PUSH
79529: LD_INT 21
79531: PUSH
79532: LD_INT 3
79534: PUSH
79535: EMPTY
79536: LIST
79537: LIST
79538: PUSH
79539: EMPTY
79540: LIST
79541: LIST
79542: PPUSH
79543: CALL_OW 69
79547: ST_TO_ADDR
// if not tmp then
79548: LD_VAR 0 4
79552: NOT
79553: IFFALSE 79557
// exit ;
79555: GO 79699
// enable_addtolog := true ;
79557: LD_ADDR_OWVAR 81
79561: PUSH
79562: LD_INT 1
79564: ST_TO_ADDR
// AddToLog ( [ ) ;
79565: LD_STRING [
79567: PPUSH
79568: CALL_OW 561
// for i in tmp do
79572: LD_ADDR_VAR 0 3
79576: PUSH
79577: LD_VAR 0 4
79581: PUSH
79582: FOR_IN
79583: IFFALSE 79690
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79585: LD_STRING [
79587: PUSH
79588: LD_VAR 0 3
79592: PPUSH
79593: CALL_OW 266
79597: STR
79598: PUSH
79599: LD_STRING , 
79601: STR
79602: PUSH
79603: LD_VAR 0 3
79607: PPUSH
79608: CALL_OW 250
79612: STR
79613: PUSH
79614: LD_STRING , 
79616: STR
79617: PUSH
79618: LD_VAR 0 3
79622: PPUSH
79623: CALL_OW 251
79627: STR
79628: PUSH
79629: LD_STRING , 
79631: STR
79632: PUSH
79633: LD_VAR 0 3
79637: PPUSH
79638: CALL_OW 254
79642: STR
79643: PUSH
79644: LD_STRING , 
79646: STR
79647: PUSH
79648: LD_VAR 0 3
79652: PPUSH
79653: LD_INT 1
79655: PPUSH
79656: CALL_OW 268
79660: STR
79661: PUSH
79662: LD_STRING , 
79664: STR
79665: PUSH
79666: LD_VAR 0 3
79670: PPUSH
79671: LD_INT 2
79673: PPUSH
79674: CALL_OW 268
79678: STR
79679: PUSH
79680: LD_STRING ],
79682: STR
79683: PPUSH
79684: CALL_OW 561
// end ;
79688: GO 79582
79690: POP
79691: POP
// AddToLog ( ]; ) ;
79692: LD_STRING ];
79694: PPUSH
79695: CALL_OW 561
// end ;
79699: LD_VAR 0 2
79703: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79704: LD_INT 0
79706: PPUSH
79707: PPUSH
79708: PPUSH
79709: PPUSH
79710: PPUSH
// if not area or not rate or not max then
79711: LD_VAR 0 1
79715: NOT
79716: PUSH
79717: LD_VAR 0 2
79721: NOT
79722: OR
79723: PUSH
79724: LD_VAR 0 4
79728: NOT
79729: OR
79730: IFFALSE 79734
// exit ;
79732: GO 79923
// while 1 do
79734: LD_INT 1
79736: IFFALSE 79923
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79738: LD_ADDR_VAR 0 9
79742: PUSH
79743: LD_VAR 0 1
79747: PPUSH
79748: LD_INT 1
79750: PPUSH
79751: CALL_OW 287
79755: PUSH
79756: LD_INT 10
79758: MUL
79759: ST_TO_ADDR
// r := rate / 10 ;
79760: LD_ADDR_VAR 0 7
79764: PUSH
79765: LD_VAR 0 2
79769: PUSH
79770: LD_INT 10
79772: DIVREAL
79773: ST_TO_ADDR
// time := 1 1$00 ;
79774: LD_ADDR_VAR 0 8
79778: PUSH
79779: LD_INT 2100
79781: ST_TO_ADDR
// if amount < min then
79782: LD_VAR 0 9
79786: PUSH
79787: LD_VAR 0 3
79791: LESS
79792: IFFALSE 79810
// r := r * 2 else
79794: LD_ADDR_VAR 0 7
79798: PUSH
79799: LD_VAR 0 7
79803: PUSH
79804: LD_INT 2
79806: MUL
79807: ST_TO_ADDR
79808: GO 79836
// if amount > max then
79810: LD_VAR 0 9
79814: PUSH
79815: LD_VAR 0 4
79819: GREATER
79820: IFFALSE 79836
// r := r / 2 ;
79822: LD_ADDR_VAR 0 7
79826: PUSH
79827: LD_VAR 0 7
79831: PUSH
79832: LD_INT 2
79834: DIVREAL
79835: ST_TO_ADDR
// time := time / r ;
79836: LD_ADDR_VAR 0 8
79840: PUSH
79841: LD_VAR 0 8
79845: PUSH
79846: LD_VAR 0 7
79850: DIVREAL
79851: ST_TO_ADDR
// if time < 0 then
79852: LD_VAR 0 8
79856: PUSH
79857: LD_INT 0
79859: LESS
79860: IFFALSE 79877
// time := time * - 1 ;
79862: LD_ADDR_VAR 0 8
79866: PUSH
79867: LD_VAR 0 8
79871: PUSH
79872: LD_INT 1
79874: NEG
79875: MUL
79876: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79877: LD_VAR 0 8
79881: PUSH
79882: LD_INT 35
79884: PPUSH
79885: LD_INT 875
79887: PPUSH
79888: CALL_OW 12
79892: PLUS
79893: PPUSH
79894: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79898: LD_INT 1
79900: PPUSH
79901: LD_INT 5
79903: PPUSH
79904: CALL_OW 12
79908: PPUSH
79909: LD_VAR 0 1
79913: PPUSH
79914: LD_INT 1
79916: PPUSH
79917: CALL_OW 55
// end ;
79921: GO 79734
// end ;
79923: LD_VAR 0 5
79927: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79928: LD_INT 0
79930: PPUSH
79931: PPUSH
79932: PPUSH
79933: PPUSH
79934: PPUSH
79935: PPUSH
79936: PPUSH
79937: PPUSH
// if not turrets or not factories then
79938: LD_VAR 0 1
79942: NOT
79943: PUSH
79944: LD_VAR 0 2
79948: NOT
79949: OR
79950: IFFALSE 79954
// exit ;
79952: GO 80261
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79954: LD_ADDR_VAR 0 10
79958: PUSH
79959: LD_INT 5
79961: PUSH
79962: LD_INT 6
79964: PUSH
79965: EMPTY
79966: LIST
79967: LIST
79968: PUSH
79969: LD_INT 2
79971: PUSH
79972: LD_INT 4
79974: PUSH
79975: EMPTY
79976: LIST
79977: LIST
79978: PUSH
79979: LD_INT 3
79981: PUSH
79982: LD_INT 5
79984: PUSH
79985: EMPTY
79986: LIST
79987: LIST
79988: PUSH
79989: EMPTY
79990: LIST
79991: LIST
79992: LIST
79993: PUSH
79994: LD_INT 24
79996: PUSH
79997: LD_INT 25
79999: PUSH
80000: EMPTY
80001: LIST
80002: LIST
80003: PUSH
80004: LD_INT 23
80006: PUSH
80007: LD_INT 27
80009: PUSH
80010: EMPTY
80011: LIST
80012: LIST
80013: PUSH
80014: EMPTY
80015: LIST
80016: LIST
80017: PUSH
80018: LD_INT 42
80020: PUSH
80021: LD_INT 43
80023: PUSH
80024: EMPTY
80025: LIST
80026: LIST
80027: PUSH
80028: LD_INT 44
80030: PUSH
80031: LD_INT 46
80033: PUSH
80034: EMPTY
80035: LIST
80036: LIST
80037: PUSH
80038: LD_INT 45
80040: PUSH
80041: LD_INT 47
80043: PUSH
80044: EMPTY
80045: LIST
80046: LIST
80047: PUSH
80048: EMPTY
80049: LIST
80050: LIST
80051: LIST
80052: PUSH
80053: EMPTY
80054: LIST
80055: LIST
80056: LIST
80057: ST_TO_ADDR
// result := [ ] ;
80058: LD_ADDR_VAR 0 3
80062: PUSH
80063: EMPTY
80064: ST_TO_ADDR
// for i in turrets do
80065: LD_ADDR_VAR 0 4
80069: PUSH
80070: LD_VAR 0 1
80074: PUSH
80075: FOR_IN
80076: IFFALSE 80259
// begin nat := GetNation ( i ) ;
80078: LD_ADDR_VAR 0 7
80082: PUSH
80083: LD_VAR 0 4
80087: PPUSH
80088: CALL_OW 248
80092: ST_TO_ADDR
// weapon := 0 ;
80093: LD_ADDR_VAR 0 8
80097: PUSH
80098: LD_INT 0
80100: ST_TO_ADDR
// if not nat then
80101: LD_VAR 0 7
80105: NOT
80106: IFFALSE 80110
// continue ;
80108: GO 80075
// for j in list [ nat ] do
80110: LD_ADDR_VAR 0 5
80114: PUSH
80115: LD_VAR 0 10
80119: PUSH
80120: LD_VAR 0 7
80124: ARRAY
80125: PUSH
80126: FOR_IN
80127: IFFALSE 80168
// if GetBWeapon ( i ) = j [ 1 ] then
80129: LD_VAR 0 4
80133: PPUSH
80134: CALL_OW 269
80138: PUSH
80139: LD_VAR 0 5
80143: PUSH
80144: LD_INT 1
80146: ARRAY
80147: EQUAL
80148: IFFALSE 80166
// begin weapon := j [ 2 ] ;
80150: LD_ADDR_VAR 0 8
80154: PUSH
80155: LD_VAR 0 5
80159: PUSH
80160: LD_INT 2
80162: ARRAY
80163: ST_TO_ADDR
// break ;
80164: GO 80168
// end ;
80166: GO 80126
80168: POP
80169: POP
// if not weapon then
80170: LD_VAR 0 8
80174: NOT
80175: IFFALSE 80179
// continue ;
80177: GO 80075
// for k in factories do
80179: LD_ADDR_VAR 0 6
80183: PUSH
80184: LD_VAR 0 2
80188: PUSH
80189: FOR_IN
80190: IFFALSE 80255
// begin weapons := AvailableWeaponList ( k ) ;
80192: LD_ADDR_VAR 0 9
80196: PUSH
80197: LD_VAR 0 6
80201: PPUSH
80202: CALL_OW 478
80206: ST_TO_ADDR
// if not weapons then
80207: LD_VAR 0 9
80211: NOT
80212: IFFALSE 80216
// continue ;
80214: GO 80189
// if weapon in weapons then
80216: LD_VAR 0 8
80220: PUSH
80221: LD_VAR 0 9
80225: IN
80226: IFFALSE 80253
// begin result := [ i , weapon ] ;
80228: LD_ADDR_VAR 0 3
80232: PUSH
80233: LD_VAR 0 4
80237: PUSH
80238: LD_VAR 0 8
80242: PUSH
80243: EMPTY
80244: LIST
80245: LIST
80246: ST_TO_ADDR
// exit ;
80247: POP
80248: POP
80249: POP
80250: POP
80251: GO 80261
// end ; end ;
80253: GO 80189
80255: POP
80256: POP
// end ;
80257: GO 80075
80259: POP
80260: POP
// end ;
80261: LD_VAR 0 3
80265: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80266: LD_INT 0
80268: PPUSH
// if not side or side > 8 then
80269: LD_VAR 0 3
80273: NOT
80274: PUSH
80275: LD_VAR 0 3
80279: PUSH
80280: LD_INT 8
80282: GREATER
80283: OR
80284: IFFALSE 80288
// exit ;
80286: GO 80347
// if not range then
80288: LD_VAR 0 4
80292: NOT
80293: IFFALSE 80304
// range := - 12 ;
80295: LD_ADDR_VAR 0 4
80299: PUSH
80300: LD_INT 12
80302: NEG
80303: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80304: LD_VAR 0 1
80308: PPUSH
80309: LD_VAR 0 2
80313: PPUSH
80314: LD_VAR 0 3
80318: PPUSH
80319: LD_VAR 0 4
80323: PPUSH
80324: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80328: LD_VAR 0 1
80332: PPUSH
80333: LD_VAR 0 2
80337: PPUSH
80338: LD_VAR 0 3
80342: PPUSH
80343: CALL_OW 331
// end ;
80347: LD_VAR 0 5
80351: RET
// export function Video ( mode ) ; begin
80352: LD_INT 0
80354: PPUSH
// ingame_video = mode ;
80355: LD_ADDR_OWVAR 52
80359: PUSH
80360: LD_VAR 0 1
80364: ST_TO_ADDR
// interface_hidden = mode ;
80365: LD_ADDR_OWVAR 54
80369: PUSH
80370: LD_VAR 0 1
80374: ST_TO_ADDR
// end ;
80375: LD_VAR 0 2
80379: RET
// export function Join ( array , element ) ; begin
80380: LD_INT 0
80382: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80383: LD_ADDR_VAR 0 3
80387: PUSH
80388: LD_VAR 0 1
80392: PPUSH
80393: LD_VAR 0 1
80397: PUSH
80398: LD_INT 1
80400: PLUS
80401: PPUSH
80402: LD_VAR 0 2
80406: PPUSH
80407: CALL_OW 1
80411: ST_TO_ADDR
// end ;
80412: LD_VAR 0 3
80416: RET
// export function JoinUnion ( array , element ) ; begin
80417: LD_INT 0
80419: PPUSH
// result := array union element ;
80420: LD_ADDR_VAR 0 3
80424: PUSH
80425: LD_VAR 0 1
80429: PUSH
80430: LD_VAR 0 2
80434: UNION
80435: ST_TO_ADDR
// end ;
80436: LD_VAR 0 3
80440: RET
// export function GetBehemoths ( side ) ; begin
80441: LD_INT 0
80443: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
80444: LD_ADDR_VAR 0 2
80448: PUSH
80449: LD_INT 22
80451: PUSH
80452: LD_VAR 0 1
80456: PUSH
80457: EMPTY
80458: LIST
80459: LIST
80460: PUSH
80461: LD_INT 31
80463: PUSH
80464: LD_INT 25
80466: PUSH
80467: EMPTY
80468: LIST
80469: LIST
80470: PUSH
80471: EMPTY
80472: LIST
80473: LIST
80474: PPUSH
80475: CALL_OW 69
80479: ST_TO_ADDR
// end ;
80480: LD_VAR 0 2
80484: RET
// export function Shuffle ( array ) ; var i , index ; begin
80485: LD_INT 0
80487: PPUSH
80488: PPUSH
80489: PPUSH
// result := [ ] ;
80490: LD_ADDR_VAR 0 2
80494: PUSH
80495: EMPTY
80496: ST_TO_ADDR
// if not array then
80497: LD_VAR 0 1
80501: NOT
80502: IFFALSE 80506
// exit ;
80504: GO 80605
// Randomize ;
80506: CALL_OW 10
// for i = array downto 1 do
80510: LD_ADDR_VAR 0 3
80514: PUSH
80515: DOUBLE
80516: LD_VAR 0 1
80520: INC
80521: ST_TO_ADDR
80522: LD_INT 1
80524: PUSH
80525: FOR_DOWNTO
80526: IFFALSE 80603
// begin index := rand ( 1 , array ) ;
80528: LD_ADDR_VAR 0 4
80532: PUSH
80533: LD_INT 1
80535: PPUSH
80536: LD_VAR 0 1
80540: PPUSH
80541: CALL_OW 12
80545: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80546: LD_ADDR_VAR 0 2
80550: PUSH
80551: LD_VAR 0 2
80555: PPUSH
80556: LD_VAR 0 2
80560: PUSH
80561: LD_INT 1
80563: PLUS
80564: PPUSH
80565: LD_VAR 0 1
80569: PUSH
80570: LD_VAR 0 4
80574: ARRAY
80575: PPUSH
80576: CALL_OW 2
80580: ST_TO_ADDR
// array := Delete ( array , index ) ;
80581: LD_ADDR_VAR 0 1
80585: PUSH
80586: LD_VAR 0 1
80590: PPUSH
80591: LD_VAR 0 4
80595: PPUSH
80596: CALL_OW 3
80600: ST_TO_ADDR
// end ;
80601: GO 80525
80603: POP
80604: POP
// end ;
80605: LD_VAR 0 2
80609: RET
// export function GetBaseMaterials ( base ) ; begin
80610: LD_INT 0
80612: PPUSH
// result := [ 0 , 0 , 0 ] ;
80613: LD_ADDR_VAR 0 2
80617: PUSH
80618: LD_INT 0
80620: PUSH
80621: LD_INT 0
80623: PUSH
80624: LD_INT 0
80626: PUSH
80627: EMPTY
80628: LIST
80629: LIST
80630: LIST
80631: ST_TO_ADDR
// if not base then
80632: LD_VAR 0 1
80636: NOT
80637: IFFALSE 80641
// exit ;
80639: GO 80690
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80641: LD_ADDR_VAR 0 2
80645: PUSH
80646: LD_VAR 0 1
80650: PPUSH
80651: LD_INT 1
80653: PPUSH
80654: CALL_OW 275
80658: PUSH
80659: LD_VAR 0 1
80663: PPUSH
80664: LD_INT 2
80666: PPUSH
80667: CALL_OW 275
80671: PUSH
80672: LD_VAR 0 1
80676: PPUSH
80677: LD_INT 3
80679: PPUSH
80680: CALL_OW 275
80684: PUSH
80685: EMPTY
80686: LIST
80687: LIST
80688: LIST
80689: ST_TO_ADDR
// end ;
80690: LD_VAR 0 2
80694: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80695: LD_INT 0
80697: PPUSH
80698: PPUSH
// result := array ;
80699: LD_ADDR_VAR 0 3
80703: PUSH
80704: LD_VAR 0 1
80708: ST_TO_ADDR
// if size >= result then
80709: LD_VAR 0 2
80713: PUSH
80714: LD_VAR 0 3
80718: GREATEREQUAL
80719: IFFALSE 80723
// exit ;
80721: GO 80773
// if size then
80723: LD_VAR 0 2
80727: IFFALSE 80773
// for i := array downto size do
80729: LD_ADDR_VAR 0 4
80733: PUSH
80734: DOUBLE
80735: LD_VAR 0 1
80739: INC
80740: ST_TO_ADDR
80741: LD_VAR 0 2
80745: PUSH
80746: FOR_DOWNTO
80747: IFFALSE 80771
// result := Delete ( result , result ) ;
80749: LD_ADDR_VAR 0 3
80753: PUSH
80754: LD_VAR 0 3
80758: PPUSH
80759: LD_VAR 0 3
80763: PPUSH
80764: CALL_OW 3
80768: ST_TO_ADDR
80769: GO 80746
80771: POP
80772: POP
// end ;
80773: LD_VAR 0 3
80777: RET
// export function ComExit ( unit ) ; var tmp ; begin
80778: LD_INT 0
80780: PPUSH
80781: PPUSH
// if not IsInUnit ( unit ) then
80782: LD_VAR 0 1
80786: PPUSH
80787: CALL_OW 310
80791: NOT
80792: IFFALSE 80796
// exit ;
80794: GO 80856
// tmp := IsInUnit ( unit ) ;
80796: LD_ADDR_VAR 0 3
80800: PUSH
80801: LD_VAR 0 1
80805: PPUSH
80806: CALL_OW 310
80810: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80811: LD_VAR 0 3
80815: PPUSH
80816: CALL_OW 247
80820: PUSH
80821: LD_INT 2
80823: EQUAL
80824: IFFALSE 80837
// ComExitVehicle ( unit ) else
80826: LD_VAR 0 1
80830: PPUSH
80831: CALL_OW 121
80835: GO 80846
// ComExitBuilding ( unit ) ;
80837: LD_VAR 0 1
80841: PPUSH
80842: CALL_OW 122
// result := tmp ;
80846: LD_ADDR_VAR 0 2
80850: PUSH
80851: LD_VAR 0 3
80855: ST_TO_ADDR
// end ;
80856: LD_VAR 0 2
80860: RET
// export function ComExitAll ( units ) ; var i ; begin
80861: LD_INT 0
80863: PPUSH
80864: PPUSH
// if not units then
80865: LD_VAR 0 1
80869: NOT
80870: IFFALSE 80874
// exit ;
80872: GO 80900
// for i in units do
80874: LD_ADDR_VAR 0 3
80878: PUSH
80879: LD_VAR 0 1
80883: PUSH
80884: FOR_IN
80885: IFFALSE 80898
// ComExit ( i ) ;
80887: LD_VAR 0 3
80891: PPUSH
80892: CALL 80778 0 1
80896: GO 80884
80898: POP
80899: POP
// end ;
80900: LD_VAR 0 2
80904: RET
// export function ResetHc ; begin
80905: LD_INT 0
80907: PPUSH
// InitHc ;
80908: CALL_OW 19
// hc_importance := 0 ;
80912: LD_ADDR_OWVAR 32
80916: PUSH
80917: LD_INT 0
80919: ST_TO_ADDR
// end ;
80920: LD_VAR 0 1
80924: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80925: LD_INT 0
80927: PPUSH
80928: PPUSH
80929: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80930: LD_ADDR_VAR 0 6
80934: PUSH
80935: LD_VAR 0 1
80939: PUSH
80940: LD_VAR 0 3
80944: PLUS
80945: PUSH
80946: LD_INT 2
80948: DIV
80949: ST_TO_ADDR
// if _x < 0 then
80950: LD_VAR 0 6
80954: PUSH
80955: LD_INT 0
80957: LESS
80958: IFFALSE 80975
// _x := _x * - 1 ;
80960: LD_ADDR_VAR 0 6
80964: PUSH
80965: LD_VAR 0 6
80969: PUSH
80970: LD_INT 1
80972: NEG
80973: MUL
80974: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80975: LD_ADDR_VAR 0 7
80979: PUSH
80980: LD_VAR 0 2
80984: PUSH
80985: LD_VAR 0 4
80989: PLUS
80990: PUSH
80991: LD_INT 2
80993: DIV
80994: ST_TO_ADDR
// if _y < 0 then
80995: LD_VAR 0 7
80999: PUSH
81000: LD_INT 0
81002: LESS
81003: IFFALSE 81020
// _y := _y * - 1 ;
81005: LD_ADDR_VAR 0 7
81009: PUSH
81010: LD_VAR 0 7
81014: PUSH
81015: LD_INT 1
81017: NEG
81018: MUL
81019: ST_TO_ADDR
// result := [ _x , _y ] ;
81020: LD_ADDR_VAR 0 5
81024: PUSH
81025: LD_VAR 0 6
81029: PUSH
81030: LD_VAR 0 7
81034: PUSH
81035: EMPTY
81036: LIST
81037: LIST
81038: ST_TO_ADDR
// end ;
81039: LD_VAR 0 5
81043: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81044: LD_INT 0
81046: PPUSH
81047: PPUSH
81048: PPUSH
81049: PPUSH
// task := GetTaskList ( unit ) ;
81050: LD_ADDR_VAR 0 7
81054: PUSH
81055: LD_VAR 0 1
81059: PPUSH
81060: CALL_OW 437
81064: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81065: LD_VAR 0 7
81069: NOT
81070: PUSH
81071: LD_VAR 0 1
81075: PPUSH
81076: LD_VAR 0 2
81080: PPUSH
81081: CALL_OW 308
81085: NOT
81086: AND
81087: IFFALSE 81091
// exit ;
81089: GO 81209
// if IsInArea ( unit , area ) then
81091: LD_VAR 0 1
81095: PPUSH
81096: LD_VAR 0 2
81100: PPUSH
81101: CALL_OW 308
81105: IFFALSE 81123
// begin ComMoveToArea ( unit , goAway ) ;
81107: LD_VAR 0 1
81111: PPUSH
81112: LD_VAR 0 3
81116: PPUSH
81117: CALL_OW 113
// exit ;
81121: GO 81209
// end ; if task [ 1 ] [ 1 ] <> M then
81123: LD_VAR 0 7
81127: PUSH
81128: LD_INT 1
81130: ARRAY
81131: PUSH
81132: LD_INT 1
81134: ARRAY
81135: PUSH
81136: LD_STRING M
81138: NONEQUAL
81139: IFFALSE 81143
// exit ;
81141: GO 81209
// x := task [ 1 ] [ 2 ] ;
81143: LD_ADDR_VAR 0 5
81147: PUSH
81148: LD_VAR 0 7
81152: PUSH
81153: LD_INT 1
81155: ARRAY
81156: PUSH
81157: LD_INT 2
81159: ARRAY
81160: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81161: LD_ADDR_VAR 0 6
81165: PUSH
81166: LD_VAR 0 7
81170: PUSH
81171: LD_INT 1
81173: ARRAY
81174: PUSH
81175: LD_INT 3
81177: ARRAY
81178: ST_TO_ADDR
// if InArea ( x , y , area ) then
81179: LD_VAR 0 5
81183: PPUSH
81184: LD_VAR 0 6
81188: PPUSH
81189: LD_VAR 0 2
81193: PPUSH
81194: CALL_OW 309
81198: IFFALSE 81209
// ComStop ( unit ) ;
81200: LD_VAR 0 1
81204: PPUSH
81205: CALL_OW 141
// end ;
81209: LD_VAR 0 4
81213: RET
// export function Abs ( value ) ; begin
81214: LD_INT 0
81216: PPUSH
// result := value ;
81217: LD_ADDR_VAR 0 2
81221: PUSH
81222: LD_VAR 0 1
81226: ST_TO_ADDR
// if value < 0 then
81227: LD_VAR 0 1
81231: PUSH
81232: LD_INT 0
81234: LESS
81235: IFFALSE 81252
// result := value * - 1 ;
81237: LD_ADDR_VAR 0 2
81241: PUSH
81242: LD_VAR 0 1
81246: PUSH
81247: LD_INT 1
81249: NEG
81250: MUL
81251: ST_TO_ADDR
// end ;
81252: LD_VAR 0 2
81256: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81257: LD_INT 0
81259: PPUSH
81260: PPUSH
81261: PPUSH
81262: PPUSH
81263: PPUSH
81264: PPUSH
81265: PPUSH
81266: PPUSH
// if not unit or not building then
81267: LD_VAR 0 1
81271: NOT
81272: PUSH
81273: LD_VAR 0 2
81277: NOT
81278: OR
81279: IFFALSE 81283
// exit ;
81281: GO 81509
// x := GetX ( building ) ;
81283: LD_ADDR_VAR 0 4
81287: PUSH
81288: LD_VAR 0 2
81292: PPUSH
81293: CALL_OW 250
81297: ST_TO_ADDR
// y := GetY ( building ) ;
81298: LD_ADDR_VAR 0 6
81302: PUSH
81303: LD_VAR 0 2
81307: PPUSH
81308: CALL_OW 251
81312: ST_TO_ADDR
// d := GetDir ( building ) ;
81313: LD_ADDR_VAR 0 8
81317: PUSH
81318: LD_VAR 0 2
81322: PPUSH
81323: CALL_OW 254
81327: ST_TO_ADDR
// r := 4 ;
81328: LD_ADDR_VAR 0 9
81332: PUSH
81333: LD_INT 4
81335: ST_TO_ADDR
// for i := 1 to 5 do
81336: LD_ADDR_VAR 0 10
81340: PUSH
81341: DOUBLE
81342: LD_INT 1
81344: DEC
81345: ST_TO_ADDR
81346: LD_INT 5
81348: PUSH
81349: FOR_TO
81350: IFFALSE 81507
// begin _x := ShiftX ( x , d , r + i ) ;
81352: LD_ADDR_VAR 0 5
81356: PUSH
81357: LD_VAR 0 4
81361: PPUSH
81362: LD_VAR 0 8
81366: PPUSH
81367: LD_VAR 0 9
81371: PUSH
81372: LD_VAR 0 10
81376: PLUS
81377: PPUSH
81378: CALL_OW 272
81382: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81383: LD_ADDR_VAR 0 7
81387: PUSH
81388: LD_VAR 0 6
81392: PPUSH
81393: LD_VAR 0 8
81397: PPUSH
81398: LD_VAR 0 9
81402: PUSH
81403: LD_VAR 0 10
81407: PLUS
81408: PPUSH
81409: CALL_OW 273
81413: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81414: LD_VAR 0 5
81418: PPUSH
81419: LD_VAR 0 7
81423: PPUSH
81424: CALL_OW 488
81428: PUSH
81429: LD_VAR 0 5
81433: PPUSH
81434: LD_VAR 0 7
81438: PPUSH
81439: CALL_OW 428
81443: PPUSH
81444: CALL_OW 247
81448: PUSH
81449: LD_INT 3
81451: PUSH
81452: LD_INT 2
81454: PUSH
81455: EMPTY
81456: LIST
81457: LIST
81458: IN
81459: NOT
81460: AND
81461: IFFALSE 81505
// begin ComMoveXY ( unit , _x , _y ) ;
81463: LD_VAR 0 1
81467: PPUSH
81468: LD_VAR 0 5
81472: PPUSH
81473: LD_VAR 0 7
81477: PPUSH
81478: CALL_OW 111
// result := [ _x , _y ] ;
81482: LD_ADDR_VAR 0 3
81486: PUSH
81487: LD_VAR 0 5
81491: PUSH
81492: LD_VAR 0 7
81496: PUSH
81497: EMPTY
81498: LIST
81499: LIST
81500: ST_TO_ADDR
// exit ;
81501: POP
81502: POP
81503: GO 81509
// end ; end ;
81505: GO 81349
81507: POP
81508: POP
// end ;
81509: LD_VAR 0 3
81513: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81514: LD_INT 0
81516: PPUSH
81517: PPUSH
81518: PPUSH
// result := 0 ;
81519: LD_ADDR_VAR 0 3
81523: PUSH
81524: LD_INT 0
81526: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81527: LD_VAR 0 1
81531: PUSH
81532: LD_INT 0
81534: LESS
81535: PUSH
81536: LD_VAR 0 1
81540: PUSH
81541: LD_INT 8
81543: GREATER
81544: OR
81545: PUSH
81546: LD_VAR 0 2
81550: PUSH
81551: LD_INT 0
81553: LESS
81554: OR
81555: PUSH
81556: LD_VAR 0 2
81560: PUSH
81561: LD_INT 8
81563: GREATER
81564: OR
81565: IFFALSE 81569
// exit ;
81567: GO 81644
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81569: LD_ADDR_VAR 0 4
81573: PUSH
81574: LD_INT 22
81576: PUSH
81577: LD_VAR 0 2
81581: PUSH
81582: EMPTY
81583: LIST
81584: LIST
81585: PPUSH
81586: CALL_OW 69
81590: PUSH
81591: FOR_IN
81592: IFFALSE 81642
// begin un := UnitShoot ( i ) ;
81594: LD_ADDR_VAR 0 5
81598: PUSH
81599: LD_VAR 0 4
81603: PPUSH
81604: CALL_OW 504
81608: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81609: LD_VAR 0 5
81613: PPUSH
81614: CALL_OW 255
81618: PUSH
81619: LD_VAR 0 1
81623: EQUAL
81624: IFFALSE 81640
// begin result := un ;
81626: LD_ADDR_VAR 0 3
81630: PUSH
81631: LD_VAR 0 5
81635: ST_TO_ADDR
// exit ;
81636: POP
81637: POP
81638: GO 81644
// end ; end ;
81640: GO 81591
81642: POP
81643: POP
// end ;
81644: LD_VAR 0 3
81648: RET
// export function GetCargoBay ( units ) ; begin
81649: LD_INT 0
81651: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81652: LD_ADDR_VAR 0 2
81656: PUSH
81657: LD_VAR 0 1
81661: PPUSH
81662: LD_INT 2
81664: PUSH
81665: LD_INT 34
81667: PUSH
81668: LD_INT 12
81670: PUSH
81671: EMPTY
81672: LIST
81673: LIST
81674: PUSH
81675: LD_INT 34
81677: PUSH
81678: LD_INT 51
81680: PUSH
81681: EMPTY
81682: LIST
81683: LIST
81684: PUSH
81685: LD_INT 34
81687: PUSH
81688: LD_INT 32
81690: PUSH
81691: EMPTY
81692: LIST
81693: LIST
81694: PUSH
81695: LD_INT 34
81697: PUSH
81698: LD_INT 89
81700: PUSH
81701: EMPTY
81702: LIST
81703: LIST
81704: PUSH
81705: EMPTY
81706: LIST
81707: LIST
81708: LIST
81709: LIST
81710: LIST
81711: PPUSH
81712: CALL_OW 72
81716: ST_TO_ADDR
// end ;
81717: LD_VAR 0 2
81721: RET
// export function Negate ( value ) ; begin
81722: LD_INT 0
81724: PPUSH
// result := not value ;
81725: LD_ADDR_VAR 0 2
81729: PUSH
81730: LD_VAR 0 1
81734: NOT
81735: ST_TO_ADDR
// end ;
81736: LD_VAR 0 2
81740: RET
// export function Inc ( value ) ; begin
81741: LD_INT 0
81743: PPUSH
// result := value + 1 ;
81744: LD_ADDR_VAR 0 2
81748: PUSH
81749: LD_VAR 0 1
81753: PUSH
81754: LD_INT 1
81756: PLUS
81757: ST_TO_ADDR
// end ;
81758: LD_VAR 0 2
81762: RET
// export function Dec ( value ) ; begin
81763: LD_INT 0
81765: PPUSH
// result := value - 1 ;
81766: LD_ADDR_VAR 0 2
81770: PUSH
81771: LD_VAR 0 1
81775: PUSH
81776: LD_INT 1
81778: MINUS
81779: ST_TO_ADDR
// end ;
81780: LD_VAR 0 2
81784: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81785: LD_INT 0
81787: PPUSH
81788: PPUSH
81789: PPUSH
81790: PPUSH
81791: PPUSH
81792: PPUSH
81793: PPUSH
81794: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81795: LD_VAR 0 1
81799: PPUSH
81800: LD_VAR 0 2
81804: PPUSH
81805: CALL_OW 488
81809: NOT
81810: PUSH
81811: LD_VAR 0 3
81815: PPUSH
81816: LD_VAR 0 4
81820: PPUSH
81821: CALL_OW 488
81825: NOT
81826: OR
81827: IFFALSE 81840
// begin result := - 1 ;
81829: LD_ADDR_VAR 0 5
81833: PUSH
81834: LD_INT 1
81836: NEG
81837: ST_TO_ADDR
// exit ;
81838: GO 82075
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81840: LD_ADDR_VAR 0 12
81844: PUSH
81845: LD_VAR 0 1
81849: PPUSH
81850: LD_VAR 0 2
81854: PPUSH
81855: LD_VAR 0 3
81859: PPUSH
81860: LD_VAR 0 4
81864: PPUSH
81865: CALL 80925 0 4
81869: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81870: LD_ADDR_VAR 0 11
81874: PUSH
81875: LD_VAR 0 1
81879: PPUSH
81880: LD_VAR 0 2
81884: PPUSH
81885: LD_VAR 0 12
81889: PUSH
81890: LD_INT 1
81892: ARRAY
81893: PPUSH
81894: LD_VAR 0 12
81898: PUSH
81899: LD_INT 2
81901: ARRAY
81902: PPUSH
81903: CALL_OW 298
81907: ST_TO_ADDR
// distance := 9999 ;
81908: LD_ADDR_VAR 0 10
81912: PUSH
81913: LD_INT 9999
81915: ST_TO_ADDR
// for i := 0 to 5 do
81916: LD_ADDR_VAR 0 6
81920: PUSH
81921: DOUBLE
81922: LD_INT 0
81924: DEC
81925: ST_TO_ADDR
81926: LD_INT 5
81928: PUSH
81929: FOR_TO
81930: IFFALSE 82073
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81932: LD_ADDR_VAR 0 7
81936: PUSH
81937: LD_VAR 0 1
81941: PPUSH
81942: LD_VAR 0 6
81946: PPUSH
81947: LD_VAR 0 11
81951: PPUSH
81952: CALL_OW 272
81956: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81957: LD_ADDR_VAR 0 8
81961: PUSH
81962: LD_VAR 0 2
81966: PPUSH
81967: LD_VAR 0 6
81971: PPUSH
81972: LD_VAR 0 11
81976: PPUSH
81977: CALL_OW 273
81981: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81982: LD_VAR 0 7
81986: PPUSH
81987: LD_VAR 0 8
81991: PPUSH
81992: CALL_OW 488
81996: NOT
81997: IFFALSE 82001
// continue ;
81999: GO 81929
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
82001: LD_ADDR_VAR 0 9
82005: PUSH
82006: LD_VAR 0 12
82010: PUSH
82011: LD_INT 1
82013: ARRAY
82014: PPUSH
82015: LD_VAR 0 12
82019: PUSH
82020: LD_INT 2
82022: ARRAY
82023: PPUSH
82024: LD_VAR 0 7
82028: PPUSH
82029: LD_VAR 0 8
82033: PPUSH
82034: CALL_OW 298
82038: ST_TO_ADDR
// if tmp < distance then
82039: LD_VAR 0 9
82043: PUSH
82044: LD_VAR 0 10
82048: LESS
82049: IFFALSE 82071
// begin result := i ;
82051: LD_ADDR_VAR 0 5
82055: PUSH
82056: LD_VAR 0 6
82060: ST_TO_ADDR
// distance := tmp ;
82061: LD_ADDR_VAR 0 10
82065: PUSH
82066: LD_VAR 0 9
82070: ST_TO_ADDR
// end ; end ;
82071: GO 81929
82073: POP
82074: POP
// end ;
82075: LD_VAR 0 5
82079: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82080: LD_INT 0
82082: PPUSH
82083: PPUSH
// if not driver or not IsInUnit ( driver ) then
82084: LD_VAR 0 1
82088: NOT
82089: PUSH
82090: LD_VAR 0 1
82094: PPUSH
82095: CALL_OW 310
82099: NOT
82100: OR
82101: IFFALSE 82105
// exit ;
82103: GO 82195
// vehicle := IsInUnit ( driver ) ;
82105: LD_ADDR_VAR 0 3
82109: PUSH
82110: LD_VAR 0 1
82114: PPUSH
82115: CALL_OW 310
82119: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82120: LD_VAR 0 1
82124: PPUSH
82125: LD_STRING \
82127: PUSH
82128: LD_INT 0
82130: PUSH
82131: LD_INT 0
82133: PUSH
82134: LD_INT 0
82136: PUSH
82137: LD_INT 0
82139: PUSH
82140: LD_INT 0
82142: PUSH
82143: LD_INT 0
82145: PUSH
82146: EMPTY
82147: LIST
82148: LIST
82149: LIST
82150: LIST
82151: LIST
82152: LIST
82153: LIST
82154: PUSH
82155: LD_STRING E
82157: PUSH
82158: LD_INT 0
82160: PUSH
82161: LD_INT 0
82163: PUSH
82164: LD_VAR 0 3
82168: PUSH
82169: LD_INT 0
82171: PUSH
82172: LD_INT 0
82174: PUSH
82175: LD_INT 0
82177: PUSH
82178: EMPTY
82179: LIST
82180: LIST
82181: LIST
82182: LIST
82183: LIST
82184: LIST
82185: LIST
82186: PUSH
82187: EMPTY
82188: LIST
82189: LIST
82190: PPUSH
82191: CALL_OW 446
// end ;
82195: LD_VAR 0 2
82199: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82200: LD_INT 0
82202: PPUSH
82203: PPUSH
// if not driver or not IsInUnit ( driver ) then
82204: LD_VAR 0 1
82208: NOT
82209: PUSH
82210: LD_VAR 0 1
82214: PPUSH
82215: CALL_OW 310
82219: NOT
82220: OR
82221: IFFALSE 82225
// exit ;
82223: GO 82315
// vehicle := IsInUnit ( driver ) ;
82225: LD_ADDR_VAR 0 3
82229: PUSH
82230: LD_VAR 0 1
82234: PPUSH
82235: CALL_OW 310
82239: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82240: LD_VAR 0 1
82244: PPUSH
82245: LD_STRING \
82247: PUSH
82248: LD_INT 0
82250: PUSH
82251: LD_INT 0
82253: PUSH
82254: LD_INT 0
82256: PUSH
82257: LD_INT 0
82259: PUSH
82260: LD_INT 0
82262: PUSH
82263: LD_INT 0
82265: PUSH
82266: EMPTY
82267: LIST
82268: LIST
82269: LIST
82270: LIST
82271: LIST
82272: LIST
82273: LIST
82274: PUSH
82275: LD_STRING E
82277: PUSH
82278: LD_INT 0
82280: PUSH
82281: LD_INT 0
82283: PUSH
82284: LD_VAR 0 3
82288: PUSH
82289: LD_INT 0
82291: PUSH
82292: LD_INT 0
82294: PUSH
82295: LD_INT 0
82297: PUSH
82298: EMPTY
82299: LIST
82300: LIST
82301: LIST
82302: LIST
82303: LIST
82304: LIST
82305: LIST
82306: PUSH
82307: EMPTY
82308: LIST
82309: LIST
82310: PPUSH
82311: CALL_OW 447
// end ;
82315: LD_VAR 0 2
82319: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82320: LD_INT 0
82322: PPUSH
82323: PPUSH
82324: PPUSH
// tmp := [ ] ;
82325: LD_ADDR_VAR 0 5
82329: PUSH
82330: EMPTY
82331: ST_TO_ADDR
// for i in units do
82332: LD_ADDR_VAR 0 4
82336: PUSH
82337: LD_VAR 0 1
82341: PUSH
82342: FOR_IN
82343: IFFALSE 82381
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82345: LD_ADDR_VAR 0 5
82349: PUSH
82350: LD_VAR 0 5
82354: PPUSH
82355: LD_VAR 0 5
82359: PUSH
82360: LD_INT 1
82362: PLUS
82363: PPUSH
82364: LD_VAR 0 4
82368: PPUSH
82369: CALL_OW 256
82373: PPUSH
82374: CALL_OW 2
82378: ST_TO_ADDR
82379: GO 82342
82381: POP
82382: POP
// if not tmp then
82383: LD_VAR 0 5
82387: NOT
82388: IFFALSE 82392
// exit ;
82390: GO 82440
// if asc then
82392: LD_VAR 0 2
82396: IFFALSE 82420
// result := SortListByListAsc ( units , tmp ) else
82398: LD_ADDR_VAR 0 3
82402: PUSH
82403: LD_VAR 0 1
82407: PPUSH
82408: LD_VAR 0 5
82412: PPUSH
82413: CALL_OW 76
82417: ST_TO_ADDR
82418: GO 82440
// result := SortListByListDesc ( units , tmp ) ;
82420: LD_ADDR_VAR 0 3
82424: PUSH
82425: LD_VAR 0 1
82429: PPUSH
82430: LD_VAR 0 5
82434: PPUSH
82435: CALL_OW 77
82439: ST_TO_ADDR
// end ;
82440: LD_VAR 0 3
82444: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82445: LD_INT 0
82447: PPUSH
82448: PPUSH
// task := GetTaskList ( mech ) ;
82449: LD_ADDR_VAR 0 4
82453: PUSH
82454: LD_VAR 0 1
82458: PPUSH
82459: CALL_OW 437
82463: ST_TO_ADDR
// if not task then
82464: LD_VAR 0 4
82468: NOT
82469: IFFALSE 82473
// exit ;
82471: GO 82515
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82473: LD_ADDR_VAR 0 3
82477: PUSH
82478: LD_VAR 0 4
82482: PUSH
82483: LD_INT 1
82485: ARRAY
82486: PUSH
82487: LD_INT 1
82489: ARRAY
82490: PUSH
82491: LD_STRING r
82493: EQUAL
82494: PUSH
82495: LD_VAR 0 4
82499: PUSH
82500: LD_INT 1
82502: ARRAY
82503: PUSH
82504: LD_INT 4
82506: ARRAY
82507: PUSH
82508: LD_VAR 0 2
82512: EQUAL
82513: AND
82514: ST_TO_ADDR
// end ;
82515: LD_VAR 0 3
82519: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82520: LD_INT 0
82522: PPUSH
// SetDir ( unit , d ) ;
82523: LD_VAR 0 1
82527: PPUSH
82528: LD_VAR 0 4
82532: PPUSH
82533: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
82537: LD_VAR 0 1
82541: PPUSH
82542: LD_VAR 0 2
82546: PPUSH
82547: LD_VAR 0 3
82551: PPUSH
82552: LD_VAR 0 5
82556: PPUSH
82557: CALL_OW 48
// end ;
82561: LD_VAR 0 6
82565: RET
// export function ToNaturalNumber ( number ) ; begin
82566: LD_INT 0
82568: PPUSH
// result := number div 1 ;
82569: LD_ADDR_VAR 0 2
82573: PUSH
82574: LD_VAR 0 1
82578: PUSH
82579: LD_INT 1
82581: DIV
82582: ST_TO_ADDR
// if number < 0 then
82583: LD_VAR 0 1
82587: PUSH
82588: LD_INT 0
82590: LESS
82591: IFFALSE 82601
// result := 0 ;
82593: LD_ADDR_VAR 0 2
82597: PUSH
82598: LD_INT 0
82600: ST_TO_ADDR
// end ;
82601: LD_VAR 0 2
82605: RET
// export function SortByClass ( units , class ) ; var un ; begin
82606: LD_INT 0
82608: PPUSH
82609: PPUSH
// if not units or not class then
82610: LD_VAR 0 1
82614: NOT
82615: PUSH
82616: LD_VAR 0 2
82620: NOT
82621: OR
82622: IFFALSE 82626
// exit ;
82624: GO 82721
// result := [ ] ;
82626: LD_ADDR_VAR 0 3
82630: PUSH
82631: EMPTY
82632: ST_TO_ADDR
// for un in units do
82633: LD_ADDR_VAR 0 4
82637: PUSH
82638: LD_VAR 0 1
82642: PUSH
82643: FOR_IN
82644: IFFALSE 82719
// if GetClass ( un ) = class then
82646: LD_VAR 0 4
82650: PPUSH
82651: CALL_OW 257
82655: PUSH
82656: LD_VAR 0 2
82660: EQUAL
82661: IFFALSE 82688
// result := Insert ( result , 1 , un ) else
82663: LD_ADDR_VAR 0 3
82667: PUSH
82668: LD_VAR 0 3
82672: PPUSH
82673: LD_INT 1
82675: PPUSH
82676: LD_VAR 0 4
82680: PPUSH
82681: CALL_OW 2
82685: ST_TO_ADDR
82686: GO 82717
// result := Replace ( result , result + 1 , un ) ;
82688: LD_ADDR_VAR 0 3
82692: PUSH
82693: LD_VAR 0 3
82697: PPUSH
82698: LD_VAR 0 3
82702: PUSH
82703: LD_INT 1
82705: PLUS
82706: PPUSH
82707: LD_VAR 0 4
82711: PPUSH
82712: CALL_OW 1
82716: ST_TO_ADDR
82717: GO 82643
82719: POP
82720: POP
// end ;
82721: LD_VAR 0 3
82725: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82726: LD_INT 0
82728: PPUSH
82729: PPUSH
82730: PPUSH
82731: PPUSH
82732: PPUSH
82733: PPUSH
82734: PPUSH
// result := [ ] ;
82735: LD_ADDR_VAR 0 4
82739: PUSH
82740: EMPTY
82741: ST_TO_ADDR
// if x - r < 0 then
82742: LD_VAR 0 1
82746: PUSH
82747: LD_VAR 0 3
82751: MINUS
82752: PUSH
82753: LD_INT 0
82755: LESS
82756: IFFALSE 82768
// min_x := 0 else
82758: LD_ADDR_VAR 0 8
82762: PUSH
82763: LD_INT 0
82765: ST_TO_ADDR
82766: GO 82784
// min_x := x - r ;
82768: LD_ADDR_VAR 0 8
82772: PUSH
82773: LD_VAR 0 1
82777: PUSH
82778: LD_VAR 0 3
82782: MINUS
82783: ST_TO_ADDR
// if y - r < 0 then
82784: LD_VAR 0 2
82788: PUSH
82789: LD_VAR 0 3
82793: MINUS
82794: PUSH
82795: LD_INT 0
82797: LESS
82798: IFFALSE 82810
// min_y := 0 else
82800: LD_ADDR_VAR 0 7
82804: PUSH
82805: LD_INT 0
82807: ST_TO_ADDR
82808: GO 82826
// min_y := y - r ;
82810: LD_ADDR_VAR 0 7
82814: PUSH
82815: LD_VAR 0 2
82819: PUSH
82820: LD_VAR 0 3
82824: MINUS
82825: ST_TO_ADDR
// max_x := x + r ;
82826: LD_ADDR_VAR 0 9
82830: PUSH
82831: LD_VAR 0 1
82835: PUSH
82836: LD_VAR 0 3
82840: PLUS
82841: ST_TO_ADDR
// max_y := y + r ;
82842: LD_ADDR_VAR 0 10
82846: PUSH
82847: LD_VAR 0 2
82851: PUSH
82852: LD_VAR 0 3
82856: PLUS
82857: ST_TO_ADDR
// for _x = min_x to max_x do
82858: LD_ADDR_VAR 0 5
82862: PUSH
82863: DOUBLE
82864: LD_VAR 0 8
82868: DEC
82869: ST_TO_ADDR
82870: LD_VAR 0 9
82874: PUSH
82875: FOR_TO
82876: IFFALSE 82977
// for _y = min_y to max_y do
82878: LD_ADDR_VAR 0 6
82882: PUSH
82883: DOUBLE
82884: LD_VAR 0 7
82888: DEC
82889: ST_TO_ADDR
82890: LD_VAR 0 10
82894: PUSH
82895: FOR_TO
82896: IFFALSE 82973
// begin if not ValidHex ( _x , _y ) then
82898: LD_VAR 0 5
82902: PPUSH
82903: LD_VAR 0 6
82907: PPUSH
82908: CALL_OW 488
82912: NOT
82913: IFFALSE 82917
// continue ;
82915: GO 82895
// if GetResourceTypeXY ( _x , _y ) then
82917: LD_VAR 0 5
82921: PPUSH
82922: LD_VAR 0 6
82926: PPUSH
82927: CALL_OW 283
82931: IFFALSE 82971
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82933: LD_ADDR_VAR 0 4
82937: PUSH
82938: LD_VAR 0 4
82942: PPUSH
82943: LD_VAR 0 4
82947: PUSH
82948: LD_INT 1
82950: PLUS
82951: PPUSH
82952: LD_VAR 0 5
82956: PUSH
82957: LD_VAR 0 6
82961: PUSH
82962: EMPTY
82963: LIST
82964: LIST
82965: PPUSH
82966: CALL_OW 1
82970: ST_TO_ADDR
// end ;
82971: GO 82895
82973: POP
82974: POP
82975: GO 82875
82977: POP
82978: POP
// end ;
82979: LD_VAR 0 4
82983: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82984: LD_INT 0
82986: PPUSH
82987: PPUSH
82988: PPUSH
82989: PPUSH
82990: PPUSH
82991: PPUSH
82992: PPUSH
82993: PPUSH
// if not units then
82994: LD_VAR 0 1
82998: NOT
82999: IFFALSE 83003
// exit ;
83001: GO 83527
// result := UnitFilter ( units , [ f_ok ] ) ;
83003: LD_ADDR_VAR 0 3
83007: PUSH
83008: LD_VAR 0 1
83012: PPUSH
83013: LD_INT 50
83015: PUSH
83016: EMPTY
83017: LIST
83018: PPUSH
83019: CALL_OW 72
83023: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83024: LD_ADDR_VAR 0 8
83028: PUSH
83029: LD_VAR 0 1
83033: PUSH
83034: LD_INT 1
83036: ARRAY
83037: PPUSH
83038: CALL_OW 255
83042: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83043: LD_ADDR_VAR 0 10
83047: PUSH
83048: LD_INT 29
83050: PUSH
83051: LD_INT 91
83053: PUSH
83054: LD_INT 49
83056: PUSH
83057: EMPTY
83058: LIST
83059: LIST
83060: LIST
83061: ST_TO_ADDR
// if not result then
83062: LD_VAR 0 3
83066: NOT
83067: IFFALSE 83071
// exit ;
83069: GO 83527
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83071: LD_ADDR_VAR 0 5
83075: PUSH
83076: LD_INT 81
83078: PUSH
83079: LD_VAR 0 8
83083: PUSH
83084: EMPTY
83085: LIST
83086: LIST
83087: PPUSH
83088: CALL_OW 69
83092: ST_TO_ADDR
// for i in result do
83093: LD_ADDR_VAR 0 4
83097: PUSH
83098: LD_VAR 0 3
83102: PUSH
83103: FOR_IN
83104: IFFALSE 83525
// begin tag := GetTag ( i ) + 1 ;
83106: LD_ADDR_VAR 0 9
83110: PUSH
83111: LD_VAR 0 4
83115: PPUSH
83116: CALL_OW 110
83120: PUSH
83121: LD_INT 1
83123: PLUS
83124: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
83125: LD_ADDR_VAR 0 7
83129: PUSH
83130: LD_VAR 0 4
83134: PPUSH
83135: CALL_OW 250
83139: PPUSH
83140: LD_VAR 0 4
83144: PPUSH
83145: CALL_OW 251
83149: PPUSH
83150: LD_INT 6
83152: PPUSH
83153: CALL 82726 0 3
83157: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
83158: LD_VAR 0 4
83162: PPUSH
83163: CALL_OW 247
83167: PUSH
83168: LD_INT 2
83170: EQUAL
83171: PUSH
83172: LD_VAR 0 7
83176: AND
83177: PUSH
83178: LD_VAR 0 4
83182: PPUSH
83183: CALL_OW 264
83187: PUSH
83188: LD_VAR 0 10
83192: IN
83193: NOT
83194: AND
83195: IFFALSE 83234
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83197: LD_VAR 0 4
83201: PPUSH
83202: LD_VAR 0 7
83206: PUSH
83207: LD_INT 1
83209: ARRAY
83210: PUSH
83211: LD_INT 1
83213: ARRAY
83214: PPUSH
83215: LD_VAR 0 7
83219: PUSH
83220: LD_INT 1
83222: ARRAY
83223: PUSH
83224: LD_INT 2
83226: ARRAY
83227: PPUSH
83228: CALL_OW 116
83232: GO 83523
// if path > tag then
83234: LD_VAR 0 2
83238: PUSH
83239: LD_VAR 0 9
83243: GREATER
83244: IFFALSE 83452
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83246: LD_ADDR_VAR 0 6
83250: PUSH
83251: LD_VAR 0 5
83255: PPUSH
83256: LD_INT 91
83258: PUSH
83259: LD_VAR 0 4
83263: PUSH
83264: LD_INT 8
83266: PUSH
83267: EMPTY
83268: LIST
83269: LIST
83270: LIST
83271: PPUSH
83272: CALL_OW 72
83276: ST_TO_ADDR
// if nearEnemy then
83277: LD_VAR 0 6
83281: IFFALSE 83350
// begin if GetWeapon ( i ) = ru_time_lapser then
83283: LD_VAR 0 4
83287: PPUSH
83288: CALL_OW 264
83292: PUSH
83293: LD_INT 49
83295: EQUAL
83296: IFFALSE 83324
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83298: LD_VAR 0 4
83302: PPUSH
83303: LD_VAR 0 6
83307: PPUSH
83308: LD_VAR 0 4
83312: PPUSH
83313: CALL_OW 74
83317: PPUSH
83318: CALL_OW 112
83322: GO 83348
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83324: LD_VAR 0 4
83328: PPUSH
83329: LD_VAR 0 6
83333: PPUSH
83334: LD_VAR 0 4
83338: PPUSH
83339: CALL_OW 74
83343: PPUSH
83344: CALL 84598 0 2
// end else
83348: GO 83450
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83350: LD_VAR 0 4
83354: PPUSH
83355: LD_VAR 0 2
83359: PUSH
83360: LD_VAR 0 9
83364: ARRAY
83365: PUSH
83366: LD_INT 1
83368: ARRAY
83369: PPUSH
83370: LD_VAR 0 2
83374: PUSH
83375: LD_VAR 0 9
83379: ARRAY
83380: PUSH
83381: LD_INT 2
83383: ARRAY
83384: PPUSH
83385: CALL_OW 297
83389: PUSH
83390: LD_INT 6
83392: GREATER
83393: IFFALSE 83436
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83395: LD_VAR 0 4
83399: PPUSH
83400: LD_VAR 0 2
83404: PUSH
83405: LD_VAR 0 9
83409: ARRAY
83410: PUSH
83411: LD_INT 1
83413: ARRAY
83414: PPUSH
83415: LD_VAR 0 2
83419: PUSH
83420: LD_VAR 0 9
83424: ARRAY
83425: PUSH
83426: LD_INT 2
83428: ARRAY
83429: PPUSH
83430: CALL_OW 114
83434: GO 83450
// SetTag ( i , tag ) ;
83436: LD_VAR 0 4
83440: PPUSH
83441: LD_VAR 0 9
83445: PPUSH
83446: CALL_OW 109
// end else
83450: GO 83523
// if enemy then
83452: LD_VAR 0 5
83456: IFFALSE 83523
// begin if GetWeapon ( i ) = ru_time_lapser then
83458: LD_VAR 0 4
83462: PPUSH
83463: CALL_OW 264
83467: PUSH
83468: LD_INT 49
83470: EQUAL
83471: IFFALSE 83499
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
83473: LD_VAR 0 4
83477: PPUSH
83478: LD_VAR 0 5
83482: PPUSH
83483: LD_VAR 0 4
83487: PPUSH
83488: CALL_OW 74
83492: PPUSH
83493: CALL_OW 112
83497: GO 83523
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
83499: LD_VAR 0 4
83503: PPUSH
83504: LD_VAR 0 5
83508: PPUSH
83509: LD_VAR 0 4
83513: PPUSH
83514: CALL_OW 74
83518: PPUSH
83519: CALL 84598 0 2
// end ; end ;
83523: GO 83103
83525: POP
83526: POP
// end ;
83527: LD_VAR 0 3
83531: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
83532: LD_INT 0
83534: PPUSH
83535: PPUSH
83536: PPUSH
// if not unit or IsInUnit ( unit ) then
83537: LD_VAR 0 1
83541: NOT
83542: PUSH
83543: LD_VAR 0 1
83547: PPUSH
83548: CALL_OW 310
83552: OR
83553: IFFALSE 83557
// exit ;
83555: GO 83648
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
83557: LD_ADDR_VAR 0 4
83561: PUSH
83562: LD_VAR 0 1
83566: PPUSH
83567: CALL_OW 250
83571: PPUSH
83572: LD_VAR 0 2
83576: PPUSH
83577: LD_INT 1
83579: PPUSH
83580: CALL_OW 272
83584: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83585: LD_ADDR_VAR 0 5
83589: PUSH
83590: LD_VAR 0 1
83594: PPUSH
83595: CALL_OW 251
83599: PPUSH
83600: LD_VAR 0 2
83604: PPUSH
83605: LD_INT 1
83607: PPUSH
83608: CALL_OW 273
83612: ST_TO_ADDR
// if ValidHex ( x , y ) then
83613: LD_VAR 0 4
83617: PPUSH
83618: LD_VAR 0 5
83622: PPUSH
83623: CALL_OW 488
83627: IFFALSE 83648
// ComTurnXY ( unit , x , y ) ;
83629: LD_VAR 0 1
83633: PPUSH
83634: LD_VAR 0 4
83638: PPUSH
83639: LD_VAR 0 5
83643: PPUSH
83644: CALL_OW 118
// end ;
83648: LD_VAR 0 3
83652: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83653: LD_INT 0
83655: PPUSH
83656: PPUSH
// result := false ;
83657: LD_ADDR_VAR 0 3
83661: PUSH
83662: LD_INT 0
83664: ST_TO_ADDR
// if not units then
83665: LD_VAR 0 2
83669: NOT
83670: IFFALSE 83674
// exit ;
83672: GO 83719
// for i in units do
83674: LD_ADDR_VAR 0 4
83678: PUSH
83679: LD_VAR 0 2
83683: PUSH
83684: FOR_IN
83685: IFFALSE 83717
// if See ( side , i ) then
83687: LD_VAR 0 1
83691: PPUSH
83692: LD_VAR 0 4
83696: PPUSH
83697: CALL_OW 292
83701: IFFALSE 83715
// begin result := true ;
83703: LD_ADDR_VAR 0 3
83707: PUSH
83708: LD_INT 1
83710: ST_TO_ADDR
// exit ;
83711: POP
83712: POP
83713: GO 83719
// end ;
83715: GO 83684
83717: POP
83718: POP
// end ;
83719: LD_VAR 0 3
83723: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83724: LD_INT 0
83726: PPUSH
83727: PPUSH
83728: PPUSH
83729: PPUSH
// if not unit or not points then
83730: LD_VAR 0 1
83734: NOT
83735: PUSH
83736: LD_VAR 0 2
83740: NOT
83741: OR
83742: IFFALSE 83746
// exit ;
83744: GO 83836
// dist := 99999 ;
83746: LD_ADDR_VAR 0 5
83750: PUSH
83751: LD_INT 99999
83753: ST_TO_ADDR
// for i in points do
83754: LD_ADDR_VAR 0 4
83758: PUSH
83759: LD_VAR 0 2
83763: PUSH
83764: FOR_IN
83765: IFFALSE 83834
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83767: LD_ADDR_VAR 0 6
83771: PUSH
83772: LD_VAR 0 1
83776: PPUSH
83777: LD_VAR 0 4
83781: PUSH
83782: LD_INT 1
83784: ARRAY
83785: PPUSH
83786: LD_VAR 0 4
83790: PUSH
83791: LD_INT 2
83793: ARRAY
83794: PPUSH
83795: CALL_OW 297
83799: ST_TO_ADDR
// if tmpDist < dist then
83800: LD_VAR 0 6
83804: PUSH
83805: LD_VAR 0 5
83809: LESS
83810: IFFALSE 83832
// begin result := i ;
83812: LD_ADDR_VAR 0 3
83816: PUSH
83817: LD_VAR 0 4
83821: ST_TO_ADDR
// dist := tmpDist ;
83822: LD_ADDR_VAR 0 5
83826: PUSH
83827: LD_VAR 0 6
83831: ST_TO_ADDR
// end ; end ;
83832: GO 83764
83834: POP
83835: POP
// end ;
83836: LD_VAR 0 3
83840: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83841: LD_INT 0
83843: PPUSH
// uc_side := side ;
83844: LD_ADDR_OWVAR 20
83848: PUSH
83849: LD_VAR 0 1
83853: ST_TO_ADDR
// uc_nation := 3 ;
83854: LD_ADDR_OWVAR 21
83858: PUSH
83859: LD_INT 3
83861: ST_TO_ADDR
// vc_chassis := 25 ;
83862: LD_ADDR_OWVAR 37
83866: PUSH
83867: LD_INT 25
83869: ST_TO_ADDR
// vc_engine := engine_siberite ;
83870: LD_ADDR_OWVAR 39
83874: PUSH
83875: LD_INT 3
83877: ST_TO_ADDR
// vc_control := control_computer ;
83878: LD_ADDR_OWVAR 38
83882: PUSH
83883: LD_INT 3
83885: ST_TO_ADDR
// vc_weapon := 59 ;
83886: LD_ADDR_OWVAR 40
83890: PUSH
83891: LD_INT 59
83893: ST_TO_ADDR
// result := CreateVehicle ;
83894: LD_ADDR_VAR 0 5
83898: PUSH
83899: CALL_OW 45
83903: ST_TO_ADDR
// SetDir ( result , d ) ;
83904: LD_VAR 0 5
83908: PPUSH
83909: LD_VAR 0 4
83913: PPUSH
83914: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83918: LD_VAR 0 5
83922: PPUSH
83923: LD_VAR 0 2
83927: PPUSH
83928: LD_VAR 0 3
83932: PPUSH
83933: LD_INT 0
83935: PPUSH
83936: CALL_OW 48
// end ;
83940: LD_VAR 0 5
83944: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83945: LD_INT 0
83947: PPUSH
83948: PPUSH
83949: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83950: LD_ADDR_VAR 0 2
83954: PUSH
83955: LD_INT 0
83957: PUSH
83958: LD_INT 0
83960: PUSH
83961: LD_INT 0
83963: PUSH
83964: LD_INT 0
83966: PUSH
83967: EMPTY
83968: LIST
83969: LIST
83970: LIST
83971: LIST
83972: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83973: LD_VAR 0 1
83977: NOT
83978: PUSH
83979: LD_VAR 0 1
83983: PPUSH
83984: CALL_OW 264
83988: PUSH
83989: LD_INT 12
83991: PUSH
83992: LD_INT 51
83994: PUSH
83995: LD_INT 32
83997: PUSH
83998: LD_INT 89
84000: PUSH
84001: EMPTY
84002: LIST
84003: LIST
84004: LIST
84005: LIST
84006: IN
84007: NOT
84008: OR
84009: IFFALSE 84013
// exit ;
84011: GO 84111
// for i := 1 to 3 do
84013: LD_ADDR_VAR 0 3
84017: PUSH
84018: DOUBLE
84019: LD_INT 1
84021: DEC
84022: ST_TO_ADDR
84023: LD_INT 3
84025: PUSH
84026: FOR_TO
84027: IFFALSE 84109
// begin tmp := GetCargo ( cargo , i ) ;
84029: LD_ADDR_VAR 0 4
84033: PUSH
84034: LD_VAR 0 1
84038: PPUSH
84039: LD_VAR 0 3
84043: PPUSH
84044: CALL_OW 289
84048: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
84049: LD_ADDR_VAR 0 2
84053: PUSH
84054: LD_VAR 0 2
84058: PPUSH
84059: LD_VAR 0 3
84063: PPUSH
84064: LD_VAR 0 4
84068: PPUSH
84069: CALL_OW 1
84073: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
84074: LD_ADDR_VAR 0 2
84078: PUSH
84079: LD_VAR 0 2
84083: PPUSH
84084: LD_INT 4
84086: PPUSH
84087: LD_VAR 0 2
84091: PUSH
84092: LD_INT 4
84094: ARRAY
84095: PUSH
84096: LD_VAR 0 4
84100: PLUS
84101: PPUSH
84102: CALL_OW 1
84106: ST_TO_ADDR
// end ;
84107: GO 84026
84109: POP
84110: POP
// end ;
84111: LD_VAR 0 2
84115: RET
// export function Length ( array ) ; begin
84116: LD_INT 0
84118: PPUSH
// result := array + 0 ;
84119: LD_ADDR_VAR 0 2
84123: PUSH
84124: LD_VAR 0 1
84128: PUSH
84129: LD_INT 0
84131: PLUS
84132: ST_TO_ADDR
// end ;
84133: LD_VAR 0 2
84137: RET
// export function PrepareArray ( array ) ; begin
84138: LD_INT 0
84140: PPUSH
// result := array diff 0 ;
84141: LD_ADDR_VAR 0 2
84145: PUSH
84146: LD_VAR 0 1
84150: PUSH
84151: LD_INT 0
84153: DIFF
84154: ST_TO_ADDR
// if not result [ 1 ] then
84155: LD_VAR 0 2
84159: PUSH
84160: LD_INT 1
84162: ARRAY
84163: NOT
84164: IFFALSE 84184
// result := Delete ( result , 1 ) ;
84166: LD_ADDR_VAR 0 2
84170: PUSH
84171: LD_VAR 0 2
84175: PPUSH
84176: LD_INT 1
84178: PPUSH
84179: CALL_OW 3
84183: ST_TO_ADDR
// end ;
84184: LD_VAR 0 2
84188: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84189: LD_INT 0
84191: PPUSH
84192: PPUSH
84193: PPUSH
84194: PPUSH
// sibRocketRange := 25 ;
84195: LD_ADDR_VAR 0 6
84199: PUSH
84200: LD_INT 25
84202: ST_TO_ADDR
// result := false ;
84203: LD_ADDR_VAR 0 4
84207: PUSH
84208: LD_INT 0
84210: ST_TO_ADDR
// for i := 0 to 5 do
84211: LD_ADDR_VAR 0 5
84215: PUSH
84216: DOUBLE
84217: LD_INT 0
84219: DEC
84220: ST_TO_ADDR
84221: LD_INT 5
84223: PUSH
84224: FOR_TO
84225: IFFALSE 84292
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84227: LD_VAR 0 1
84231: PPUSH
84232: LD_VAR 0 5
84236: PPUSH
84237: LD_VAR 0 6
84241: PPUSH
84242: CALL_OW 272
84246: PPUSH
84247: LD_VAR 0 2
84251: PPUSH
84252: LD_VAR 0 5
84256: PPUSH
84257: LD_VAR 0 6
84261: PPUSH
84262: CALL_OW 273
84266: PPUSH
84267: LD_VAR 0 3
84271: PPUSH
84272: CALL_OW 309
84276: IFFALSE 84290
// begin result := true ;
84278: LD_ADDR_VAR 0 4
84282: PUSH
84283: LD_INT 1
84285: ST_TO_ADDR
// exit ;
84286: POP
84287: POP
84288: GO 84294
// end ;
84290: GO 84224
84292: POP
84293: POP
// end ;
84294: LD_VAR 0 4
84298: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
84299: LD_INT 0
84301: PPUSH
84302: PPUSH
84303: PPUSH
// if btype = b_depot then
84304: LD_VAR 0 2
84308: PUSH
84309: LD_INT 0
84311: EQUAL
84312: IFFALSE 84324
// begin result := true ;
84314: LD_ADDR_VAR 0 3
84318: PUSH
84319: LD_INT 1
84321: ST_TO_ADDR
// exit ;
84322: GO 84440
// end ; pom := GetBase ( depot ) ;
84324: LD_ADDR_VAR 0 4
84328: PUSH
84329: LD_VAR 0 1
84333: PPUSH
84334: CALL_OW 274
84338: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
84339: LD_ADDR_VAR 0 5
84343: PUSH
84344: LD_VAR 0 2
84348: PPUSH
84349: LD_VAR 0 1
84353: PPUSH
84354: CALL_OW 248
84358: PPUSH
84359: CALL_OW 450
84363: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
84364: LD_ADDR_VAR 0 3
84368: PUSH
84369: LD_VAR 0 4
84373: PPUSH
84374: LD_INT 1
84376: PPUSH
84377: CALL_OW 275
84381: PUSH
84382: LD_VAR 0 5
84386: PUSH
84387: LD_INT 1
84389: ARRAY
84390: GREATEREQUAL
84391: PUSH
84392: LD_VAR 0 4
84396: PPUSH
84397: LD_INT 2
84399: PPUSH
84400: CALL_OW 275
84404: PUSH
84405: LD_VAR 0 5
84409: PUSH
84410: LD_INT 2
84412: ARRAY
84413: GREATEREQUAL
84414: AND
84415: PUSH
84416: LD_VAR 0 4
84420: PPUSH
84421: LD_INT 3
84423: PPUSH
84424: CALL_OW 275
84428: PUSH
84429: LD_VAR 0 5
84433: PUSH
84434: LD_INT 3
84436: ARRAY
84437: GREATEREQUAL
84438: AND
84439: ST_TO_ADDR
// end ;
84440: LD_VAR 0 3
84444: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
84445: LD_INT 0
84447: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
84448: LD_VAR 0 1
84452: PPUSH
84453: LD_VAR 0 2
84457: PPUSH
84458: LD_INT 0
84460: PPUSH
84461: LD_INT 0
84463: PPUSH
84464: LD_INT 1
84466: PPUSH
84467: LD_INT 0
84469: PPUSH
84470: CALL_OW 587
// end ;
84474: LD_VAR 0 3
84478: RET
// export function CenterOnNow ( unit ) ; begin
84479: LD_INT 0
84481: PPUSH
// result := IsInUnit ( unit ) ;
84482: LD_ADDR_VAR 0 2
84486: PUSH
84487: LD_VAR 0 1
84491: PPUSH
84492: CALL_OW 310
84496: ST_TO_ADDR
// if not result then
84497: LD_VAR 0 2
84501: NOT
84502: IFFALSE 84514
// result := unit ;
84504: LD_ADDR_VAR 0 2
84508: PUSH
84509: LD_VAR 0 1
84513: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
84514: LD_VAR 0 1
84518: PPUSH
84519: CALL_OW 87
// end ;
84523: LD_VAR 0 2
84527: RET
// export function ComMoveHex ( unit , hex ) ; begin
84528: LD_INT 0
84530: PPUSH
// if not hex then
84531: LD_VAR 0 2
84535: NOT
84536: IFFALSE 84540
// exit ;
84538: GO 84593
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
84540: LD_VAR 0 2
84544: PUSH
84545: LD_INT 1
84547: ARRAY
84548: PPUSH
84549: LD_VAR 0 2
84553: PUSH
84554: LD_INT 2
84556: ARRAY
84557: PPUSH
84558: CALL_OW 428
84562: IFFALSE 84566
// exit ;
84564: GO 84593
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
84566: LD_VAR 0 1
84570: PPUSH
84571: LD_VAR 0 2
84575: PUSH
84576: LD_INT 1
84578: ARRAY
84579: PPUSH
84580: LD_VAR 0 2
84584: PUSH
84585: LD_INT 2
84587: ARRAY
84588: PPUSH
84589: CALL_OW 111
// end ;
84593: LD_VAR 0 3
84597: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
84598: LD_INT 0
84600: PPUSH
84601: PPUSH
84602: PPUSH
// if not unit or not enemy then
84603: LD_VAR 0 1
84607: NOT
84608: PUSH
84609: LD_VAR 0 2
84613: NOT
84614: OR
84615: IFFALSE 84619
// exit ;
84617: GO 84743
// x := GetX ( enemy ) ;
84619: LD_ADDR_VAR 0 4
84623: PUSH
84624: LD_VAR 0 2
84628: PPUSH
84629: CALL_OW 250
84633: ST_TO_ADDR
// y := GetY ( enemy ) ;
84634: LD_ADDR_VAR 0 5
84638: PUSH
84639: LD_VAR 0 2
84643: PPUSH
84644: CALL_OW 251
84648: ST_TO_ADDR
// if ValidHex ( x , y ) then
84649: LD_VAR 0 4
84653: PPUSH
84654: LD_VAR 0 5
84658: PPUSH
84659: CALL_OW 488
84663: IFFALSE 84743
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
84665: LD_VAR 0 2
84669: PPUSH
84670: CALL_OW 247
84674: PUSH
84675: LD_INT 3
84677: PUSH
84678: LD_INT 2
84680: PUSH
84681: EMPTY
84682: LIST
84683: LIST
84684: IN
84685: PUSH
84686: LD_VAR 0 1
84690: PPUSH
84691: CALL_OW 255
84695: PPUSH
84696: LD_VAR 0 2
84700: PPUSH
84701: CALL_OW 292
84705: OR
84706: IFFALSE 84724
// ComAttackUnit ( unit , enemy ) else
84708: LD_VAR 0 1
84712: PPUSH
84713: LD_VAR 0 2
84717: PPUSH
84718: CALL_OW 115
84722: GO 84743
// ComAgressiveMove ( unit , x , y ) ;
84724: LD_VAR 0 1
84728: PPUSH
84729: LD_VAR 0 4
84733: PPUSH
84734: LD_VAR 0 5
84738: PPUSH
84739: CALL_OW 114
// end ;
84743: LD_VAR 0 3
84747: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84748: LD_INT 0
84750: PPUSH
84751: PPUSH
84752: PPUSH
// list := AreaToList ( area , 0 ) ;
84753: LD_ADDR_VAR 0 5
84757: PUSH
84758: LD_VAR 0 1
84762: PPUSH
84763: LD_INT 0
84765: PPUSH
84766: CALL_OW 517
84770: ST_TO_ADDR
// if not list then
84771: LD_VAR 0 5
84775: NOT
84776: IFFALSE 84780
// exit ;
84778: GO 84910
// if all then
84780: LD_VAR 0 2
84784: IFFALSE 84872
// begin for i := 1 to list [ 1 ] do
84786: LD_ADDR_VAR 0 4
84790: PUSH
84791: DOUBLE
84792: LD_INT 1
84794: DEC
84795: ST_TO_ADDR
84796: LD_VAR 0 5
84800: PUSH
84801: LD_INT 1
84803: ARRAY
84804: PUSH
84805: FOR_TO
84806: IFFALSE 84868
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
84808: LD_ADDR_VAR 0 3
84812: PUSH
84813: LD_VAR 0 3
84817: PPUSH
84818: LD_VAR 0 3
84822: PUSH
84823: LD_INT 1
84825: PLUS
84826: PPUSH
84827: LD_VAR 0 5
84831: PUSH
84832: LD_INT 1
84834: ARRAY
84835: PUSH
84836: LD_VAR 0 4
84840: ARRAY
84841: PUSH
84842: LD_VAR 0 5
84846: PUSH
84847: LD_INT 2
84849: ARRAY
84850: PUSH
84851: LD_VAR 0 4
84855: ARRAY
84856: PUSH
84857: EMPTY
84858: LIST
84859: LIST
84860: PPUSH
84861: CALL_OW 1
84865: ST_TO_ADDR
84866: GO 84805
84868: POP
84869: POP
// exit ;
84870: GO 84910
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84872: LD_ADDR_VAR 0 3
84876: PUSH
84877: LD_VAR 0 5
84881: PUSH
84882: LD_INT 1
84884: ARRAY
84885: PUSH
84886: LD_INT 1
84888: ARRAY
84889: PUSH
84890: LD_VAR 0 5
84894: PUSH
84895: LD_INT 2
84897: ARRAY
84898: PUSH
84899: LD_INT 1
84901: ARRAY
84902: PUSH
84903: EMPTY
84904: LIST
84905: LIST
84906: PUSH
84907: EMPTY
84908: LIST
84909: ST_TO_ADDR
// end ;
84910: LD_VAR 0 3
84914: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84915: LD_INT 0
84917: PPUSH
84918: PPUSH
// list := AreaToList ( area , 0 ) ;
84919: LD_ADDR_VAR 0 4
84923: PUSH
84924: LD_VAR 0 1
84928: PPUSH
84929: LD_INT 0
84931: PPUSH
84932: CALL_OW 517
84936: ST_TO_ADDR
// if not list then
84937: LD_VAR 0 4
84941: NOT
84942: IFFALSE 84946
// exit ;
84944: GO 84987
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84946: LD_ADDR_VAR 0 3
84950: PUSH
84951: LD_VAR 0 4
84955: PUSH
84956: LD_INT 1
84958: ARRAY
84959: PUSH
84960: LD_INT 1
84962: ARRAY
84963: PUSH
84964: LD_VAR 0 4
84968: PUSH
84969: LD_INT 2
84971: ARRAY
84972: PUSH
84973: LD_INT 1
84975: ARRAY
84976: PUSH
84977: LD_VAR 0 2
84981: PUSH
84982: EMPTY
84983: LIST
84984: LIST
84985: LIST
84986: ST_TO_ADDR
// end ;
84987: LD_VAR 0 3
84991: RET
// export function First ( array ) ; begin
84992: LD_INT 0
84994: PPUSH
// if not array then
84995: LD_VAR 0 1
84999: NOT
85000: IFFALSE 85004
// exit ;
85002: GO 85018
// result := array [ 1 ] ;
85004: LD_ADDR_VAR 0 2
85008: PUSH
85009: LD_VAR 0 1
85013: PUSH
85014: LD_INT 1
85016: ARRAY
85017: ST_TO_ADDR
// end ;
85018: LD_VAR 0 2
85022: RET
// export function Last ( array ) ; begin
85023: LD_INT 0
85025: PPUSH
// if not array then
85026: LD_VAR 0 1
85030: NOT
85031: IFFALSE 85035
// exit ;
85033: GO 85051
// result := array [ array ] ;
85035: LD_ADDR_VAR 0 2
85039: PUSH
85040: LD_VAR 0 1
85044: PUSH
85045: LD_VAR 0 1
85049: ARRAY
85050: ST_TO_ADDR
// end ;
85051: LD_VAR 0 2
85055: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
85056: LD_INT 0
85058: PPUSH
85059: PPUSH
// result := [ ] ;
85060: LD_ADDR_VAR 0 5
85064: PUSH
85065: EMPTY
85066: ST_TO_ADDR
// if not array then
85067: LD_VAR 0 1
85071: NOT
85072: IFFALSE 85076
// exit ;
85074: GO 85188
// for i := 1 to array do
85076: LD_ADDR_VAR 0 6
85080: PUSH
85081: DOUBLE
85082: LD_INT 1
85084: DEC
85085: ST_TO_ADDR
85086: LD_VAR 0 1
85090: PUSH
85091: FOR_TO
85092: IFFALSE 85186
// if array [ i ] [ index ] = value then
85094: LD_VAR 0 1
85098: PUSH
85099: LD_VAR 0 6
85103: ARRAY
85104: PUSH
85105: LD_VAR 0 2
85109: ARRAY
85110: PUSH
85111: LD_VAR 0 3
85115: EQUAL
85116: IFFALSE 85184
// begin if indexColumn then
85118: LD_VAR 0 4
85122: IFFALSE 85158
// result := Join ( result , array [ i ] [ indexColumn ] ) else
85124: LD_ADDR_VAR 0 5
85128: PUSH
85129: LD_VAR 0 5
85133: PPUSH
85134: LD_VAR 0 1
85138: PUSH
85139: LD_VAR 0 6
85143: ARRAY
85144: PUSH
85145: LD_VAR 0 4
85149: ARRAY
85150: PPUSH
85151: CALL 80380 0 2
85155: ST_TO_ADDR
85156: GO 85184
// result := Join ( result , array [ i ] ) ;
85158: LD_ADDR_VAR 0 5
85162: PUSH
85163: LD_VAR 0 5
85167: PPUSH
85168: LD_VAR 0 1
85172: PUSH
85173: LD_VAR 0 6
85177: ARRAY
85178: PPUSH
85179: CALL 80380 0 2
85183: ST_TO_ADDR
// end ;
85184: GO 85091
85186: POP
85187: POP
// end ;
85188: LD_VAR 0 5
85192: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
85193: LD_INT 0
85195: PPUSH
// if not vehicles or not parkingPoint then
85196: LD_VAR 0 1
85200: NOT
85201: PUSH
85202: LD_VAR 0 2
85206: NOT
85207: OR
85208: IFFALSE 85212
// exit ;
85210: GO 85310
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
85212: LD_ADDR_VAR 0 1
85216: PUSH
85217: LD_VAR 0 1
85221: PPUSH
85222: LD_INT 50
85224: PUSH
85225: EMPTY
85226: LIST
85227: PUSH
85228: LD_INT 3
85230: PUSH
85231: LD_INT 92
85233: PUSH
85234: LD_VAR 0 2
85238: PUSH
85239: LD_INT 1
85241: ARRAY
85242: PUSH
85243: LD_VAR 0 2
85247: PUSH
85248: LD_INT 2
85250: ARRAY
85251: PUSH
85252: LD_INT 8
85254: PUSH
85255: EMPTY
85256: LIST
85257: LIST
85258: LIST
85259: LIST
85260: PUSH
85261: EMPTY
85262: LIST
85263: LIST
85264: PUSH
85265: EMPTY
85266: LIST
85267: LIST
85268: PPUSH
85269: CALL_OW 72
85273: ST_TO_ADDR
// if not vehicles then
85274: LD_VAR 0 1
85278: NOT
85279: IFFALSE 85283
// exit ;
85281: GO 85310
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85283: LD_VAR 0 1
85287: PPUSH
85288: LD_VAR 0 2
85292: PUSH
85293: LD_INT 1
85295: ARRAY
85296: PPUSH
85297: LD_VAR 0 2
85301: PUSH
85302: LD_INT 2
85304: ARRAY
85305: PPUSH
85306: CALL_OW 111
// end ;
85310: LD_VAR 0 3
85314: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
85315: LD_INT 0
85317: PPUSH
85318: PPUSH
85319: PPUSH
// if not side or not area then
85320: LD_VAR 0 1
85324: NOT
85325: PUSH
85326: LD_VAR 0 2
85330: NOT
85331: OR
85332: IFFALSE 85336
// exit ;
85334: GO 85455
// tmp := AreaToList ( area , 0 ) ;
85336: LD_ADDR_VAR 0 5
85340: PUSH
85341: LD_VAR 0 2
85345: PPUSH
85346: LD_INT 0
85348: PPUSH
85349: CALL_OW 517
85353: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
85354: LD_ADDR_VAR 0 4
85358: PUSH
85359: DOUBLE
85360: LD_INT 1
85362: DEC
85363: ST_TO_ADDR
85364: LD_VAR 0 5
85368: PUSH
85369: LD_INT 1
85371: ARRAY
85372: PUSH
85373: FOR_TO
85374: IFFALSE 85453
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
85376: LD_VAR 0 5
85380: PUSH
85381: LD_INT 1
85383: ARRAY
85384: PUSH
85385: LD_VAR 0 4
85389: ARRAY
85390: PPUSH
85391: LD_VAR 0 5
85395: PUSH
85396: LD_INT 2
85398: ARRAY
85399: PUSH
85400: LD_VAR 0 4
85404: ARRAY
85405: PPUSH
85406: CALL_OW 351
85410: IFFALSE 85451
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
85412: LD_VAR 0 5
85416: PUSH
85417: LD_INT 1
85419: ARRAY
85420: PUSH
85421: LD_VAR 0 4
85425: ARRAY
85426: PPUSH
85427: LD_VAR 0 5
85431: PUSH
85432: LD_INT 2
85434: ARRAY
85435: PUSH
85436: LD_VAR 0 4
85440: ARRAY
85441: PPUSH
85442: LD_VAR 0 1
85446: PPUSH
85447: CALL_OW 244
// end ;
85451: GO 85373
85453: POP
85454: POP
// end ; end_of_file
85455: LD_VAR 0 3
85459: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85460: LD_VAR 0 1
85464: PUSH
85465: LD_INT 200
85467: DOUBLE
85468: GREATEREQUAL
85469: IFFALSE 85477
85471: LD_INT 299
85473: DOUBLE
85474: LESSEQUAL
85475: IFTRUE 85479
85477: GO 85511
85479: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85480: LD_VAR 0 1
85484: PPUSH
85485: LD_VAR 0 2
85489: PPUSH
85490: LD_VAR 0 3
85494: PPUSH
85495: LD_VAR 0 4
85499: PPUSH
85500: LD_VAR 0 5
85504: PPUSH
85505: CALL 38171 0 5
85509: GO 85588
85511: LD_INT 300
85513: DOUBLE
85514: GREATEREQUAL
85515: IFFALSE 85523
85517: LD_INT 399
85519: DOUBLE
85520: LESSEQUAL
85521: IFTRUE 85525
85523: GO 85587
85525: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85526: LD_VAR 0 1
85530: PPUSH
85531: LD_VAR 0 2
85535: PPUSH
85536: LD_VAR 0 3
85540: PPUSH
85541: LD_VAR 0 4
85545: PPUSH
85546: LD_VAR 0 5
85550: PPUSH
85551: LD_VAR 0 6
85555: PPUSH
85556: LD_VAR 0 7
85560: PPUSH
85561: LD_VAR 0 8
85565: PPUSH
85566: LD_VAR 0 9
85570: PPUSH
85571: LD_VAR 0 10
85575: PPUSH
85576: LD_VAR 0 11
85580: PPUSH
85581: CALL 34496 0 11
85585: GO 85588
85587: POP
// end ;
85588: PPOPN 11
85590: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85591: LD_VAR 0 1
85595: PPUSH
85596: LD_VAR 0 2
85600: PPUSH
85601: LD_VAR 0 3
85605: PPUSH
85606: LD_VAR 0 4
85610: PPUSH
85611: LD_VAR 0 5
85615: PPUSH
85616: CALL 37907 0 5
// end ; end_of_file
85620: PPOPN 5
85622: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85623: LD_VAR 0 1
85627: PPUSH
85628: LD_VAR 0 2
85632: PPUSH
85633: LD_VAR 0 3
85637: PPUSH
85638: LD_VAR 0 4
85642: PPUSH
85643: LD_VAR 0 5
85647: PPUSH
85648: LD_VAR 0 6
85652: PPUSH
85653: CALL 22148 0 6
// end ;
85657: PPOPN 6
85659: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85660: LD_INT 0
85662: PPUSH
// begin if not units then
85663: LD_VAR 0 1
85667: NOT
85668: IFFALSE 85672
// exit ;
85670: GO 85672
// end ;
85672: PPOPN 7
85674: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
85675: CALL 22035 0 0
// end ;
85679: PPOPN 1
85681: END
