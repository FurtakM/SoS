// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 ] [ Difficulty ] ;
 177: LD_ADDR_EXP 48
 181: PUSH
 182: LD_INT 3
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: LD_INT 6
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: LIST
 195: PUSH
 196: LD_OWVAR 67
 200: ARRAY
 201: ST_TO_ADDR
// sendedConvoys = 0 ;
 202: LD_ADDR_EXP 39
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// tamedApemans = 0 ;
 210: LD_ADDR_EXP 32
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ignoreTarget := [ ] ;
 218: LD_ADDR_EXP 45
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// arrivals := [ ] ;
 225: LD_ADDR_EXP 46
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// unitLost = 0 ;
 232: LD_ADDR_EXP 30
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 240: LD_ADDR_EXP 31
 244: PUSH
 245: EMPTY
 246: ST_TO_ADDR
// russianTanks = [ ] ;
 247: LD_ADDR_EXP 36
 251: PUSH
 252: EMPTY
 253: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 254: LD_ADDR_EXP 37
 258: PUSH
 259: EMPTY
 260: ST_TO_ADDR
// disableHealAI = 0 ;
 261: LD_ADDR_EXP 33
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// strings = [ ] ;
 269: LD_ADDR_EXP 27
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 276: LD_INT 4
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: CALL_OW 343
// PrepareDifficulty ;
 286: CALL 6406 0 0
// PrepareNature ;
 290: CALL 23609 0 0
// PrepareRussian ;
 294: CALL 5566 0 0
// PrepareVehicles ;
 298: CALL 1586 0 0
// PrepareHeroes ;
 302: CALL 594 0 0
// PrepareOthers ;
 306: CALL 2007 0 0
// PreparePlayerApemans ;
 310: CALL 2149 0 0
// end ;
 314: END
// every 0 0$1 trigger debugMode do var i ;
 315: LD_EXP 42
 319: IFFALSE 546
 321: GO 323
 323: DISABLE
 324: LD_INT 0
 326: PPUSH
// begin enable ;
 327: ENABLE
// fogoff ( true ) ;
 328: LD_INT 1
 330: PPUSH
 331: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 21
 352: PUSH
 353: LD_INT 1
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 386
// SetLives ( i , 1000 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: LD_INT 1000
 379: PPUSH
 380: CALL_OW 234
 384: GO 369
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 30
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: PUSH
 422: FOR_IN
 423: IFFALSE 447
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 425: LD_VAR 0 1
 429: PPUSH
 430: CALL_OW 274
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_INT 9999
 440: PPUSH
 441: CALL_OW 277
 445: GO 422
 447: POP
 448: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 449: LD_ADDR_VAR 0 1
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// if IsSelected ( rudepo ) then
 510: LD_INT 2
 512: PPUSH
 513: CALL_OW 306
 517: IFFALSE 527
// your_side = 3 ;
 519: LD_ADDR_OWVAR 2
 523: PUSH
 524: LD_INT 3
 526: ST_TO_ADDR
// if IsSelected ( JMM ) then
 527: LD_EXP 1
 531: PPUSH
 532: CALL_OW 306
 536: IFFALSE 546
// your_side = 1 ;
 538: LD_ADDR_OWVAR 2
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// end ;
 546: PPOPN 1
 548: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 34
 561: PUSH
 562: LD_INT 12
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: LD_INT 3
 580: GREATEREQUAL
 581: IFFALSE 593
 583: GO 585
 585: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 586: LD_STRING ACH_FULLCARGO
 588: PPUSH
 589: CALL_OW 543
 593: END
// export function PrepareHeroes ; var veh ; begin
 594: LD_INT 0
 596: PPUSH
 597: PPUSH
// uc_side = 1 ;
 598: LD_ADDR_OWVAR 20
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// uc_nation = 1 ;
 606: LD_ADDR_OWVAR 21
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 614: LD_ADDR_EXP 1
 618: PUSH
 619: LD_STRING JMM
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: CALL 5968 0 2
 629: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 630: LD_ADDR_EXP 14
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL 5968 0 2
 645: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 646: LD_ADDR_EXP 10
 650: PUSH
 651: LD_STRING DeltaDoctor
 653: PPUSH
 654: CALL_OW 34
 658: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 659: LD_ADDR_VAR 0 2
 663: PUSH
 664: LD_INT 22
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 21
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 58
 686: PUSH
 687: EMPTY
 688: LIST
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: PPUSH
 695: CALL_OW 69
 699: ST_TO_ADDR
// if veh > 0 then
 700: LD_VAR 0 2
 704: PUSH
 705: LD_INT 0
 707: GREATER
 708: IFFALSE 730
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 710: LD_EXP 1
 714: PPUSH
 715: LD_VAR 0 2
 719: PUSH
 720: LD_INT 1
 722: ARRAY
 723: PPUSH
 724: CALL_OW 52
// end else
 728: GO 745
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 730: LD_EXP 1
 734: PPUSH
 735: LD_INT 2
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 745: LD_STRING LisaIn06
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 30
 755: PUSH
 756: LD_INT 1
 758: EQUAL
 759: IFFALSE 863
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 761: LD_ADDR_VAR 0 2
 765: PUSH
 766: LD_INT 22
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 21
 778: PUSH
 779: LD_INT 2
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: PUSH
 786: LD_INT 58
 788: PUSH
 789: EMPTY
 790: LIST
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: PPUSH
 797: CALL_OW 69
 801: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 802: LD_ADDR_EXP 2
 806: PUSH
 807: LD_STRING Lisa
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL 5968 0 2
 817: ST_TO_ADDR
// if veh > 0 then
 818: LD_VAR 0 2
 822: PUSH
 823: LD_INT 0
 825: GREATER
 826: IFFALSE 848
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_VAR 0 2
 837: PUSH
 838: LD_INT 1
 840: ARRAY
 841: PPUSH
 842: CALL_OW 52
// end else
 846: GO 863
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 848: LD_EXP 2
 852: PPUSH
 853: LD_INT 2
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 863: LD_STRING BobbyIn06
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 30
 873: PUSH
 874: LD_INT 1
 876: EQUAL
 877: IFFALSE 981
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 879: LD_ADDR_VAR 0 2
 883: PUSH
 884: LD_INT 22
 886: PUSH
 887: LD_INT 1
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 21
 896: PUSH
 897: LD_INT 2
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 58
 906: PUSH
 907: EMPTY
 908: LIST
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 920: LD_ADDR_EXP 3
 924: PUSH
 925: LD_STRING Bobby
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: CALL 5968 0 2
 935: ST_TO_ADDR
// if veh > 0 then
 936: LD_VAR 0 2
 940: PUSH
 941: LD_INT 0
 943: GREATER
 944: IFFALSE 966
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 946: LD_EXP 3
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 1
 958: ARRAY
 959: PPUSH
 960: CALL_OW 52
// end else
 964: GO 981
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 966: LD_EXP 3
 970: PPUSH
 971: LD_INT 2
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 981: LD_STRING CyrusIn06
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 30
 991: PUSH
 992: LD_INT 1
 994: EQUAL
 995: IFFALSE 1099
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 997: LD_ADDR_VAR 0 2
1001: PUSH
1002: LD_INT 22
1004: PUSH
1005: LD_INT 1
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 21
1014: PUSH
1015: LD_INT 2
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: LD_INT 58
1024: PUSH
1025: EMPTY
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 69
1037: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
1038: LD_ADDR_EXP 4
1042: PUSH
1043: LD_STRING Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 5968 0 2
1053: ST_TO_ADDR
// if veh > 0 then
1054: LD_VAR 0 2
1058: PUSH
1059: LD_INT 0
1061: GREATER
1062: IFFALSE 1084
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1064: LD_EXP 4
1068: PPUSH
1069: LD_VAR 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: CALL_OW 52
// end else
1082: GO 1099
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1084: LD_EXP 4
1088: PPUSH
1089: LD_INT 2
1091: PPUSH
1092: LD_INT 0
1094: PPUSH
1095: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1099: LD_STRING FrankIn06
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL_OW 30
1109: PUSH
1110: LD_INT 1
1112: EQUAL
1113: IFFALSE 1217
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1115: LD_ADDR_VAR 0 2
1119: PUSH
1120: LD_INT 22
1122: PUSH
1123: LD_INT 1
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 21
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 58
1142: PUSH
1143: EMPTY
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PPUSH
1151: CALL_OW 69
1155: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1156: LD_ADDR_EXP 5
1160: PUSH
1161: LD_STRING Frank
1163: PPUSH
1164: LD_INT 1
1166: PPUSH
1167: CALL 5968 0 2
1171: ST_TO_ADDR
// if veh > 0 then
1172: LD_VAR 0 2
1176: PUSH
1177: LD_INT 0
1179: GREATER
1180: IFFALSE 1202
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1182: LD_EXP 5
1186: PPUSH
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: CALL_OW 52
// end else
1200: GO 1217
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1202: LD_EXP 5
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1217: LD_STRING BrownIn06
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 30
1227: PUSH
1228: LD_INT 1
1230: EQUAL
1231: IFFALSE 1335
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 2
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 58
1260: PUSH
1261: EMPTY
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PPUSH
1269: CALL_OW 69
1273: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1274: LD_ADDR_EXP 6
1278: PUSH
1279: LD_STRING Brown
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: CALL 5968 0 2
1289: ST_TO_ADDR
// if veh > 0 then
1290: LD_VAR 0 2
1294: PUSH
1295: LD_INT 0
1297: GREATER
1298: IFFALSE 1320
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1300: LD_EXP 6
1304: PPUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 52
// end else
1318: GO 1335
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1320: LD_EXP 6
1324: PPUSH
1325: LD_INT 2
1327: PPUSH
1328: LD_INT 0
1330: PPUSH
1331: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1335: LD_STRING DonaldsonIn06
1337: PPUSH
1338: LD_INT 0
1340: PPUSH
1341: CALL_OW 30
1345: PUSH
1346: LD_INT 1
1348: EQUAL
1349: IFFALSE 1453
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1351: LD_ADDR_VAR 0 2
1355: PUSH
1356: LD_INT 22
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 21
1368: PUSH
1369: LD_INT 2
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 58
1378: PUSH
1379: EMPTY
1380: LIST
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: PPUSH
1387: CALL_OW 69
1391: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1392: LD_ADDR_EXP 7
1396: PUSH
1397: LD_STRING Donaldson
1399: PPUSH
1400: LD_INT 1
1402: PPUSH
1403: CALL 5968 0 2
1407: ST_TO_ADDR
// if veh > 0 then
1408: LD_VAR 0 2
1412: PUSH
1413: LD_INT 0
1415: GREATER
1416: IFFALSE 1438
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1418: LD_EXP 7
1422: PPUSH
1423: LD_VAR 0 2
1427: PUSH
1428: LD_INT 1
1430: ARRAY
1431: PPUSH
1432: CALL_OW 52
// end else
1436: GO 1453
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1438: LD_EXP 7
1442: PPUSH
1443: LD_INT 2
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1453: LD_STRING GladstoneIn06
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 30
1463: PUSH
1464: LD_INT 1
1466: EQUAL
1467: IFFALSE 1571
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1469: LD_ADDR_VAR 0 2
1473: PUSH
1474: LD_INT 22
1476: PUSH
1477: LD_INT 1
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 21
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 58
1496: PUSH
1497: EMPTY
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: PPUSH
1505: CALL_OW 69
1509: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1510: LD_ADDR_EXP 8
1514: PUSH
1515: LD_STRING Gladstone
1517: PPUSH
1518: LD_INT 1
1520: PPUSH
1521: CALL 5968 0 2
1525: ST_TO_ADDR
// if veh > 0 then
1526: LD_VAR 0 2
1530: PUSH
1531: LD_INT 0
1533: GREATER
1534: IFFALSE 1556
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1536: LD_EXP 8
1540: PPUSH
1541: LD_VAR 0 2
1545: PUSH
1546: LD_INT 1
1548: ARRAY
1549: PPUSH
1550: CALL_OW 52
// end else
1554: GO 1571
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1556: LD_EXP 8
1560: PPUSH
1561: LD_INT 2
1563: PPUSH
1564: LD_INT 0
1566: PPUSH
1567: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1571: LD_INT 66
1573: PPUSH
1574: LD_INT 4
1576: PPUSH
1577: CALL_OW 86
// end ;
1581: LD_VAR 0 1
1585: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1586: LD_INT 0
1588: PPUSH
1589: PPUSH
1590: PPUSH
1591: PPUSH
1592: PPUSH
1593: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1594: LD_ADDR_VAR 0 5
1598: PUSH
1599: LD_STRING 06_VehiclesIn06_1
1601: PPUSH
1602: EMPTY
1603: PPUSH
1604: CALL_OW 30
1608: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1609: LD_ADDR_EXP 40
1613: PUSH
1614: LD_STRING 06_ResourcesInCargo06_1
1616: PPUSH
1617: EMPTY
1618: PPUSH
1619: CALL_OW 30
1623: ST_TO_ADDR
// cargoList = [ ] ;
1624: LD_ADDR_VAR 0 6
1628: PUSH
1629: EMPTY
1630: ST_TO_ADDR
// uc_side = 1 ;
1631: LD_ADDR_OWVAR 20
1635: PUSH
1636: LD_INT 1
1638: ST_TO_ADDR
// if vehicles > 0 then
1639: LD_VAR 0 5
1643: PUSH
1644: LD_INT 0
1646: GREATER
1647: IFFALSE 2002
// begin for i := 1 to vehicles do
1649: LD_ADDR_VAR 0 2
1653: PUSH
1654: DOUBLE
1655: LD_INT 1
1657: DEC
1658: ST_TO_ADDR
1659: LD_VAR 0 5
1663: PUSH
1664: FOR_TO
1665: IFFALSE 1814
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1667: LD_ADDR_OWVAR 21
1671: PUSH
1672: LD_VAR 0 5
1676: PUSH
1677: LD_VAR 0 2
1681: ARRAY
1682: PUSH
1683: LD_INT 1
1685: ARRAY
1686: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1687: LD_ADDR_OWVAR 37
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_VAR 0 2
1701: ARRAY
1702: PUSH
1703: LD_INT 2
1705: ARRAY
1706: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1707: LD_ADDR_OWVAR 39
1711: PUSH
1712: LD_VAR 0 5
1716: PUSH
1717: LD_VAR 0 2
1721: ARRAY
1722: PUSH
1723: LD_INT 3
1725: ARRAY
1726: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1727: LD_ADDR_OWVAR 38
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_VAR 0 2
1741: ARRAY
1742: PUSH
1743: LD_INT 4
1745: ARRAY
1746: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1747: LD_ADDR_OWVAR 40
1751: PUSH
1752: LD_VAR 0 5
1756: PUSH
1757: LD_VAR 0 2
1761: ARRAY
1762: PUSH
1763: LD_INT 5
1765: ARRAY
1766: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1767: LD_ADDR_OWVAR 41
1771: PUSH
1772: LD_INT 40
1774: ST_TO_ADDR
// veh = CreateVehicle ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: CALL_OW 45
1784: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1785: LD_VAR 0 4
1789: PPUSH
1790: LD_INT 3
1792: PPUSH
1793: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1797: LD_VAR 0 4
1801: PPUSH
1802: LD_INT 2
1804: PPUSH
1805: LD_INT 0
1807: PPUSH
1808: CALL_OW 49
// end ;
1812: GO 1664
1814: POP
1815: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1816: LD_ADDR_VAR 0 6
1820: PUSH
1821: LD_INT 22
1823: PUSH
1824: LD_INT 1
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 21
1833: PUSH
1834: LD_INT 2
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 34
1843: PUSH
1844: LD_INT 12
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL_OW 69
1860: ST_TO_ADDR
// if cargoList > 0 then
1861: LD_VAR 0 6
1865: PUSH
1866: LD_INT 0
1868: GREATER
1869: IFFALSE 2002
// for i = 1 to cargoList do
1871: LD_ADDR_VAR 0 2
1875: PUSH
1876: DOUBLE
1877: LD_INT 1
1879: DEC
1880: ST_TO_ADDR
1881: LD_VAR 0 6
1885: PUSH
1886: FOR_TO
1887: IFFALSE 2000
// begin if resources > 0 then
1889: LD_EXP 40
1893: PUSH
1894: LD_INT 0
1896: GREATER
1897: IFFALSE 1998
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1899: LD_VAR 0 6
1903: PUSH
1904: LD_VAR 0 2
1908: ARRAY
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: LD_EXP 40
1917: PUSH
1918: LD_VAR 0 2
1922: ARRAY
1923: PUSH
1924: LD_INT 1
1926: ARRAY
1927: PPUSH
1928: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1932: LD_VAR 0 6
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PPUSH
1943: LD_INT 2
1945: PPUSH
1946: LD_EXP 40
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 2
1959: ARRAY
1960: PPUSH
1961: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1965: LD_VAR 0 6
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: LD_EXP 40
1983: PUSH
1984: LD_VAR 0 2
1988: ARRAY
1989: PUSH
1990: LD_INT 3
1992: ARRAY
1993: PPUSH
1994: CALL_OW 291
// end ; end ;
1998: GO 1886
2000: POP
2001: POP
// end ; end ;
2002: LD_VAR 0 1
2006: RET
// export function PrepareOthers ; var i , veh ; begin
2007: LD_INT 0
2009: PPUSH
2010: PPUSH
2011: PPUSH
// uc_side = 1 ;
2012: LD_ADDR_OWVAR 20
2016: PUSH
2017: LD_INT 1
2019: ST_TO_ADDR
// uc_nation = 1 ;
2020: LD_ADDR_OWVAR 21
2024: PUSH
2025: LD_INT 1
2027: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2028: LD_ADDR_EXP 11
2032: PUSH
2033: LD_STRING OthersIn06
2035: PPUSH
2036: CALL_OW 31
2040: ST_TO_ADDR
// for i in others do
2041: LD_ADDR_VAR 0 2
2045: PUSH
2046: LD_EXP 11
2050: PUSH
2051: FOR_IN
2052: IFFALSE 2142
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2054: LD_ADDR_VAR 0 3
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 58
2081: PUSH
2082: EMPTY
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: ST_TO_ADDR
// if veh > 0 then
2095: LD_VAR 0 3
2099: PUSH
2100: LD_INT 0
2102: GREATER
2103: IFFALSE 2125
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: LD_VAR 0 3
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PPUSH
2119: CALL_OW 52
// end else
2123: GO 2140
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2125: LD_VAR 0 2
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 0
2135: PPUSH
2136: CALL_OW 49
// end ; end ;
2140: GO 2051
2142: POP
2143: POP
// end ;
2144: LD_VAR 0 1
2148: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2149: LD_INT 0
2151: PPUSH
2152: PPUSH
2153: PPUSH
// uc_side = 1 ;
2154: LD_ADDR_OWVAR 20
2158: PUSH
2159: LD_INT 1
2161: ST_TO_ADDR
// uc_nation = 0 ;
2162: LD_ADDR_OWVAR 21
2166: PUSH
2167: LD_INT 0
2169: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2170: LD_ADDR_EXP 12
2174: PUSH
2175: LD_STRING ApeIn06
2177: PPUSH
2178: CALL_OW 31
2182: ST_TO_ADDR
// for i in ape do
2183: LD_ADDR_VAR 0 2
2187: PUSH
2188: LD_EXP 12
2192: PUSH
2193: FOR_IN
2194: IFFALSE 2213
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2196: LD_VAR 0 2
2200: PPUSH
2201: LD_INT 2
2203: PPUSH
2204: LD_INT 0
2206: PPUSH
2207: CALL_OW 49
2211: GO 2193
2213: POP
2214: POP
// end ;
2215: LD_VAR 0 1
2219: RET
// export function PrepareDenis ; var xy , i ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// uc_side = 4 ;
2225: LD_ADDR_OWVAR 20
2229: PUSH
2230: LD_INT 4
2232: ST_TO_ADDR
// uc_nation = 1 ;
2233: LD_ADDR_OWVAR 21
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2241: LD_ADDR_VAR 0 2
2245: PUSH
2246: LD_INT 63
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 70
2258: PUSH
2259: LD_INT 1
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PUSH
2266: LD_INT 83
2268: PUSH
2269: LD_INT 1
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 16
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 27
2288: PUSH
2289: LD_INT 1
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 38
2298: PUSH
2299: LD_INT 1
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 5
2308: PUSH
2309: LD_INT 1
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 54
2318: PUSH
2319: LD_INT 1
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2336: LD_ADDR_EXP 9
2340: PUSH
2341: LD_STRING Denis
2343: PPUSH
2344: LD_INT 1
2346: PPUSH
2347: CALL 5968 0 2
2351: ST_TO_ADDR
// for i = 1 to xy do
2352: LD_ADDR_VAR 0 3
2356: PUSH
2357: DOUBLE
2358: LD_INT 1
2360: DEC
2361: ST_TO_ADDR
2362: LD_VAR 0 2
2366: PUSH
2367: FOR_TO
2368: IFFALSE 2467
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2370: LD_VAR 0 2
2374: PUSH
2375: LD_VAR 0 3
2379: ARRAY
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 2
2389: PUSH
2390: LD_VAR 0 3
2394: ARRAY
2395: PUSH
2396: LD_INT 2
2398: ARRAY
2399: PPUSH
2400: CALL_OW 428
2404: PUSH
2405: LD_INT 0
2407: EQUAL
2408: IFFALSE 2465
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2410: LD_EXP 9
2414: PPUSH
2415: LD_VAR 0 2
2419: PUSH
2420: LD_VAR 0 3
2424: ARRAY
2425: PUSH
2426: LD_INT 1
2428: ARRAY
2429: PPUSH
2430: LD_VAR 0 2
2434: PUSH
2435: LD_VAR 0 3
2439: ARRAY
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 0
2447: PPUSH
2448: CALL_OW 48
// if IsPlaced ( Denis ) then
2452: LD_EXP 9
2456: PPUSH
2457: CALL_OW 305
2461: IFFALSE 2465
// break ;
2463: GO 2467
// end ;
2465: GO 2367
2467: POP
2468: POP
// SetClass ( Denis , 4 ) ;
2469: LD_EXP 9
2473: PPUSH
2474: LD_INT 4
2476: PPUSH
2477: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2481: LD_EXP 9
2485: PPUSH
2486: LD_INT 750
2488: PPUSH
2489: CALL_OW 234
// end ;
2493: LD_VAR 0 1
2497: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2498: LD_INT 0
2500: PPUSH
2501: PPUSH
2502: PPUSH
2503: PPUSH
2504: PPUSH
// area := HarrisonSupportArea ;
2505: LD_ADDR_VAR 0 4
2509: PUSH
2510: LD_INT 3
2512: ST_TO_ADDR
// dir := 2 ;
2513: LD_ADDR_VAR 0 5
2517: PUSH
2518: LD_INT 2
2520: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2521: LD_VAR 0 4
2525: PPUSH
2526: LD_INT 21
2528: PUSH
2529: LD_INT 3
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PPUSH
2536: CALL_OW 70
2540: IFFALSE 2558
// begin area := HarrisonSupportArea2 ;
2542: LD_ADDR_VAR 0 4
2546: PUSH
2547: LD_INT 31
2549: ST_TO_ADDR
// dir := 1 ;
2550: LD_ADDR_VAR 0 5
2554: PUSH
2555: LD_INT 1
2557: ST_TO_ADDR
// end ; uc_side = 1 ;
2558: LD_ADDR_OWVAR 20
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// uc_nation = 1 ;
2566: LD_ADDR_OWVAR 21
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// vc_engine = 1 ;
2574: LD_ADDR_OWVAR 39
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// vc_control = 1 ;
2582: LD_ADDR_OWVAR 38
2586: PUSH
2587: LD_INT 1
2589: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2590: LD_ADDR_OWVAR 40
2594: PUSH
2595: LD_INT 4
2597: PUSH
2598: LD_INT 4
2600: PUSH
2601: LD_INT 2
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: PUSH
2609: LD_OWVAR 67
2613: ARRAY
2614: ST_TO_ADDR
// vc_chassis = 2 ;
2615: LD_ADDR_OWVAR 37
2619: PUSH
2620: LD_INT 2
2622: ST_TO_ADDR
// veh = CreateVehicle ;
2623: LD_ADDR_VAR 0 3
2627: PUSH
2628: CALL_OW 45
2632: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2633: LD_VAR 0 3
2637: PPUSH
2638: LD_VAR 0 5
2642: PPUSH
2643: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2647: LD_VAR 0 3
2651: PPUSH
2652: LD_VAR 0 4
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2664: LD_VAR 0 3
2668: PPUSH
2669: LD_INT 50
2671: PPUSH
2672: CALL_OW 240
// hc_class := 2 ;
2676: LD_ADDR_OWVAR 28
2680: PUSH
2681: LD_INT 2
2683: ST_TO_ADDR
// hc_sex := sex_male ;
2684: LD_ADDR_OWVAR 27
2688: PUSH
2689: LD_INT 1
2691: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2692: LD_ADDR_OWVAR 33
2696: PUSH
2697: LD_STRING SecondCharsGal
2699: ST_TO_ADDR
// hc_face_number := 52 ;
2700: LD_ADDR_OWVAR 34
2704: PUSH
2705: LD_INT 52
2707: ST_TO_ADDR
// hc_name := Craig Brown ;
2708: LD_ADDR_OWVAR 26
2712: PUSH
2713: LD_STRING Craig Brown
2715: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2716: LD_ADDR_OWVAR 29
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: LD_INT 10
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2731: LD_ADDR_OWVAR 30
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: LD_INT 2
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2754: LD_ADDR_OWVAR 31
2758: PUSH
2759: LD_INT 2
2761: PUSH
2762: LD_INT 3
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: LD_INT 0
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2777: LD_ADDR_EXP 17
2781: PUSH
2782: CALL_OW 44
2786: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2787: LD_EXP 17
2791: PPUSH
2792: LD_VAR 0 3
2796: PPUSH
2797: CALL_OW 52
// vc_engine = 1 ;
2801: LD_ADDR_OWVAR 39
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// vc_control = 1 ;
2809: LD_ADDR_OWVAR 38
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2817: LD_ADDR_OWVAR 40
2821: PUSH
2822: LD_INT 3
2824: ST_TO_ADDR
// vc_chassis = 2 ;
2825: LD_ADDR_OWVAR 37
2829: PUSH
2830: LD_INT 2
2832: ST_TO_ADDR
// veh = CreateVehicle ;
2833: LD_ADDR_VAR 0 3
2837: PUSH
2838: CALL_OW 45
2842: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_VAR 0 5
2852: PPUSH
2853: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2857: LD_VAR 0 3
2861: PPUSH
2862: LD_VAR 0 4
2866: PPUSH
2867: LD_INT 0
2869: PPUSH
2870: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2874: LD_VAR 0 3
2878: PPUSH
2879: LD_INT 50
2881: PPUSH
2882: CALL_OW 240
// hc_class := 1 ;
2886: LD_ADDR_OWVAR 28
2890: PUSH
2891: LD_INT 1
2893: ST_TO_ADDR
// hc_sex := sex_female ;
2894: LD_ADDR_OWVAR 27
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2902: LD_ADDR_OWVAR 33
2906: PUSH
2907: LD_STRING SecondCharsGal
2909: ST_TO_ADDR
// hc_face_number := 45 ;
2910: LD_ADDR_OWVAR 34
2914: PUSH
2915: LD_INT 45
2917: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2918: LD_ADDR_OWVAR 29
2922: PUSH
2923: LD_INT 11
2925: PUSH
2926: LD_INT 10
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2933: LD_ADDR_OWVAR 26
2937: PUSH
2938: LD_STRING Ingrid Jonsson
2940: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2941: LD_ADDR_OWVAR 30
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: LD_INT 1
2951: PUSH
2952: LD_INT 0
2954: PUSH
2955: LD_INT 0
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2964: LD_ADDR_OWVAR 31
2968: PUSH
2969: LD_INT 3
2971: PUSH
2972: LD_INT 1
2974: PUSH
2975: LD_INT 1
2977: PUSH
2978: LD_INT 0
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2987: LD_ADDR_EXP 18
2991: PUSH
2992: CALL_OW 44
2996: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2997: LD_EXP 18
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: CALL_OW 52
// end ;
3011: LD_VAR 0 1
3015: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
3016: LD_INT 0
3018: PPUSH
3019: PPUSH
3020: PPUSH
3021: PPUSH
3022: PPUSH
// j = 0 ;
3023: LD_ADDR_VAR 0 3
3027: PUSH
3028: LD_INT 0
3030: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3031: LD_INT 35
3033: PPUSH
3034: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
3038: LD_ADDR_VAR 0 2
3042: PUSH
3043: LD_INT 22
3045: PUSH
3046: LD_INT 1
3048: PUSH
3049: EMPTY
3050: LIST
3051: LIST
3052: PUSH
3053: LD_INT 21
3055: PUSH
3056: LD_INT 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 26
3065: PUSH
3066: LD_INT 1
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PUSH
3073: LD_INT 2
3075: PUSH
3076: LD_INT 25
3078: PUSH
3079: LD_INT 1
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: PUSH
3086: LD_INT 25
3088: PUSH
3089: LD_INT 2
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PUSH
3096: LD_INT 25
3098: PUSH
3099: LD_INT 3
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 25
3108: PUSH
3109: LD_INT 4
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: PPUSH
3129: CALL_OW 69
3133: PUSH
3134: FOR_IN
3135: IFFALSE 3261
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 3
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 2
3149: PUSH
3150: LD_INT 21
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 21
3162: PUSH
3163: LD_INT 2
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 21
3172: PUSH
3173: LD_INT 3
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: LD_INT 59
3182: PUSH
3183: EMPTY
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 91
3195: PUSH
3196: LD_VAR 0 2
3200: PUSH
3201: LD_INT 25
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: NOT
3219: PUSH
3220: LD_VAR 0 2
3224: PPUSH
3225: LD_EXP 1
3229: PPUSH
3230: CALL_OW 296
3234: PUSH
3235: LD_INT 15
3237: LESS
3238: AND
3239: IFFALSE 3259
// begin tmp = i ;
3241: LD_ADDR_VAR 0 4
3245: PUSH
3246: LD_VAR 0 2
3250: ST_TO_ADDR
// j = 1 ;
3251: LD_ADDR_VAR 0 3
3255: PUSH
3256: LD_INT 1
3258: ST_TO_ADDR
// end ; end ;
3259: GO 3134
3261: POP
3262: POP
// until j = 1 ;
3263: LD_VAR 0 3
3267: PUSH
3268: LD_INT 1
3270: EQUAL
3271: IFFALSE 3031
// blockSpawn = 1 ;
3273: LD_ADDR_EXP 29
3277: PUSH
3278: LD_INT 1
3280: ST_TO_ADDR
// uc_side = 4 ;
3281: LD_ADDR_OWVAR 20
3285: PUSH
3286: LD_INT 4
3288: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3289: LD_ADDR_EXP 15
3293: PUSH
3294: LD_STRING Joan
3296: PPUSH
3297: LD_INT 0
3299: PPUSH
3300: CALL 5968 0 2
3304: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3305: LD_EXP 15
3309: PPUSH
3310: LD_VAR 0 4
3314: PPUSH
3315: CALL_OW 250
3319: PPUSH
3320: LD_VAR 0 4
3324: PPUSH
3325: CALL_OW 251
3329: PPUSH
3330: LD_INT 5
3332: PPUSH
3333: LD_INT 1
3335: PPUSH
3336: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3340: LD_EXP 15
3344: PPUSH
3345: LD_INT 250
3347: PPUSH
3348: CALL_OW 234
// InGameOn ;
3352: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3356: LD_EXP 15
3360: PPUSH
3361: CALL_OW 87
// wait ( 0 0$2 ) ;
3365: LD_INT 70
3367: PPUSH
3368: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3372: LD_VAR 0 4
3376: PPUSH
3377: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3381: LD_VAR 0 4
3385: PPUSH
3386: CALL_OW 122
// wait ( 0 0$1 ) ;
3390: LD_INT 35
3392: PPUSH
3393: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3397: LD_VAR 0 4
3401: PPUSH
3402: LD_EXP 15
3406: PPUSH
3407: CALL_OW 112
// wait ( 0 0$2 ) ;
3411: LD_INT 70
3413: PPUSH
3414: CALL_OW 67
// DialogueOn ;
3418: CALL_OW 6
// if tmp = JMM then
3422: LD_VAR 0 4
3426: PUSH
3427: LD_EXP 1
3431: EQUAL
3432: IFFALSE 3581
// begin ComTurnUnit ( JMM , Joan ) ;
3434: LD_EXP 1
3438: PPUSH
3439: LD_EXP 15
3443: PPUSH
3444: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3448: LD_EXP 1
3452: PPUSH
3453: LD_STRING D5b-JMM-1
3455: PPUSH
3456: CALL_OW 88
// DialogueOff ;
3460: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3464: LD_EXP 15
3468: PPUSH
3469: LD_INT 500
3471: PPUSH
3472: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3476: LD_EXP 15
3480: PPUSH
3481: LD_EXP 1
3485: PPUSH
3486: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3490: LD_EXP 1
3494: PPUSH
3495: LD_EXP 15
3499: PPUSH
3500: CALL_OW 119
// wait ( 0 0$1 ) ;
3504: LD_INT 35
3506: PPUSH
3507: CALL_OW 67
// DialogueOn ;
3511: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3515: LD_EXP 15
3519: PPUSH
3520: LD_STRING D5b-Joan-1
3522: PPUSH
3523: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3527: LD_EXP 1
3531: PPUSH
3532: LD_STRING D5b-JMM-2
3534: PPUSH
3535: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3539: LD_EXP 15
3543: PPUSH
3544: LD_STRING D5b-Joan-2
3546: PPUSH
3547: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D5b-JMM-3
3558: PPUSH
3559: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D5b-Joan-3
3570: PPUSH
3571: CALL_OW 88
// DialogueOff ;
3575: CALL_OW 7
// end else
3579: GO 3916
// begin ComTurnUnit ( tmp , Joan ) ;
3581: LD_VAR 0 4
3585: PPUSH
3586: LD_EXP 15
3590: PPUSH
3591: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3595: LD_VAR 0 4
3599: PPUSH
3600: LD_STRING D5a-Sol1-1
3602: PPUSH
3603: CALL_OW 88
// DialogueOff ;
3607: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3611: LD_EXP 15
3615: PPUSH
3616: LD_INT 500
3618: PPUSH
3619: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3623: LD_EXP 15
3627: PPUSH
3628: LD_VAR 0 4
3632: PPUSH
3633: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3637: LD_VAR 0 4
3641: PPUSH
3642: LD_EXP 15
3646: PPUSH
3647: CALL_OW 119
// wait ( 0 0$1 ) ;
3651: LD_INT 35
3653: PPUSH
3654: CALL_OW 67
// DialogueOn ;
3658: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3662: LD_EXP 15
3666: PPUSH
3667: LD_STRING D5a-Joan-1
3669: PPUSH
3670: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_STRING D5a-Sol1-2
3681: PPUSH
3682: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3686: LD_EXP 15
3690: PPUSH
3691: LD_STRING D5a-Joan-2
3693: PPUSH
3694: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3698: LD_VAR 0 4
3702: PPUSH
3703: LD_STRING D5a-Sol1-3
3705: PPUSH
3706: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3710: LD_EXP 15
3714: PPUSH
3715: LD_STRING D5a-Joan-3
3717: PPUSH
3718: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3722: LD_VAR 0 4
3726: PPUSH
3727: LD_STRING D5a-Sol1-4
3729: PPUSH
3730: CALL_OW 88
// DialogueOff ;
3734: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3738: LD_EXP 1
3742: PPUSH
3743: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3747: LD_EXP 1
3751: PPUSH
3752: CALL_OW 122
// wait ( 0 0$1 ) ;
3756: LD_INT 35
3758: PPUSH
3759: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3763: LD_INT 35
3765: PPUSH
3766: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3770: LD_EXP 15
3774: PUSH
3775: LD_VAR 0 4
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PPUSH
3784: LD_EXP 1
3788: PPUSH
3789: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3793: LD_EXP 15
3797: PPUSH
3798: LD_EXP 1
3802: PPUSH
3803: CALL_OW 296
3807: PUSH
3808: LD_INT 5
3810: LESS
3811: IFFALSE 3763
// ComTurnUnit ( Joan , JMM ) ;
3813: LD_EXP 15
3817: PPUSH
3818: LD_EXP 1
3822: PPUSH
3823: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3827: LD_EXP 1
3831: PPUSH
3832: LD_EXP 15
3836: PPUSH
3837: CALL_OW 119
// wait ( 0 0$1 ) ;
3841: LD_INT 35
3843: PPUSH
3844: CALL_OW 67
// DialogueOn ;
3848: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3852: LD_EXP 15
3856: PPUSH
3857: LD_STRING D5a-Joan-4
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D5a-JMM-4
3871: PPUSH
3872: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3876: LD_EXP 15
3880: PPUSH
3881: LD_STRING D5a-Joan-5
3883: PPUSH
3884: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D5a-JMM-5
3895: PPUSH
3896: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3900: LD_EXP 15
3904: PPUSH
3905: LD_STRING D5a-Joan-6
3907: PPUSH
3908: CALL_OW 88
// DialogueOff ;
3912: CALL_OW 7
// end ; DialogueOn ;
3916: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3920: LD_EXP 1
3924: PPUSH
3925: LD_STRING D6-JMM-1
3927: PPUSH
3928: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3932: LD_EXP 15
3936: PPUSH
3937: LD_STRING D6-Joan-1
3939: PPUSH
3940: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3944: LD_EXP 1
3948: PPUSH
3949: LD_STRING D6-JMM-2
3951: PPUSH
3952: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3956: LD_EXP 15
3960: PPUSH
3961: LD_STRING D6-Joan-2
3963: PPUSH
3964: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3968: LD_EXP 1
3972: PPUSH
3973: LD_STRING D6-JMM-3
3975: PPUSH
3976: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3980: LD_EXP 15
3984: PPUSH
3985: LD_STRING D6-Joan-3
3987: PPUSH
3988: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3992: LD_EXP 1
3996: PPUSH
3997: LD_STRING D6-JMM-4
3999: PPUSH
4000: CALL_OW 88
// DialogueOff ;
4004: CALL_OW 7
// InGameOff ;
4008: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4012: LD_EXP 15
4016: PPUSH
4017: LD_INT 1
4019: PPUSH
4020: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4024: LD_STRING MJ
4026: PPUSH
4027: CALL_OW 337
// JoanStatus = 1 ;
4031: LD_ADDR_EXP 16
4035: PUSH
4036: LD_INT 1
4038: ST_TO_ADDR
// blockSpawn = 0 ;
4039: LD_ADDR_EXP 29
4043: PUSH
4044: LD_INT 0
4046: ST_TO_ADDR
// end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
// repeat wait ( 0 0$7 ) ;
4056: LD_INT 245
4058: PPUSH
4059: CALL_OW 67
// until blockSpawn = 0 ;
4063: LD_EXP 29
4067: PUSH
4068: LD_INT 0
4070: EQUAL
4071: IFFALSE 4056
// uc_side = 1 ;
4073: LD_ADDR_OWVAR 20
4077: PUSH
4078: LD_INT 1
4080: ST_TO_ADDR
// uc_nation = 1 ;
4081: LD_ADDR_OWVAR 21
4085: PUSH
4086: LD_INT 1
4088: ST_TO_ADDR
// InitHc ;
4089: CALL_OW 19
// if number = 1 then
4093: LD_VAR 0 1
4097: PUSH
4098: LD_INT 1
4100: EQUAL
4101: IFFALSE 4277
// begin hc_class := 3 ;
4103: LD_ADDR_OWVAR 28
4107: PUSH
4108: LD_INT 3
4110: ST_TO_ADDR
// hc_sex := sex_male ;
4111: LD_ADDR_OWVAR 27
4115: PUSH
4116: LD_INT 1
4118: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4119: LD_ADDR_OWVAR 33
4123: PUSH
4124: LD_STRING SecondCharsGal
4126: ST_TO_ADDR
// hc_face_number := 55 ;
4127: LD_ADDR_OWVAR 34
4131: PUSH
4132: LD_INT 55
4134: ST_TO_ADDR
// hc_name := George McCarthy ;
4135: LD_ADDR_OWVAR 26
4139: PUSH
4140: LD_STRING George McCarthy
4142: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4143: LD_ADDR_OWVAR 29
4147: PUSH
4148: LD_INT 11
4150: PUSH
4151: LD_INT 10
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4158: LD_ADDR_OWVAR 30
4162: PUSH
4163: LD_INT 0
4165: PUSH
4166: LD_INT 0
4168: PUSH
4169: LD_INT 2
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4181: LD_ADDR_OWVAR 31
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: LD_INT 2
4191: PUSH
4192: LD_INT 3
4194: PUSH
4195: LD_INT 1
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: ST_TO_ADDR
// un = CreateHuman ;
4204: LD_ADDR_VAR 0 3
4208: PUSH
4209: CALL_OW 44
4213: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4214: LD_VAR 0 3
4218: PPUSH
4219: LD_INT 23
4221: PPUSH
4222: LD_INT 1
4224: PPUSH
4225: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4229: LD_VAR 0 3
4233: PPUSH
4234: CALL_OW 87
// wait ( 0 0$1 ) ;
4238: LD_INT 35
4240: PPUSH
4241: CALL_OW 67
// DialogueOn ;
4245: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4249: LD_VAR 0 3
4253: PPUSH
4254: LD_STRING D11d-Sol4-1
4256: PPUSH
4257: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4261: LD_EXP 1
4265: PPUSH
4266: LD_STRING D11d-JMM-1
4268: PPUSH
4269: CALL_OW 88
// DialogueOff ;
4273: CALL_OW 7
// end ; if number = 2 then
4277: LD_VAR 0 1
4281: PUSH
4282: LD_INT 2
4284: EQUAL
4285: IFFALSE 4461
// begin hc_class := 1 ;
4287: LD_ADDR_OWVAR 28
4291: PUSH
4292: LD_INT 1
4294: ST_TO_ADDR
// hc_sex := sex_male ;
4295: LD_ADDR_OWVAR 27
4299: PUSH
4300: LD_INT 1
4302: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4303: LD_ADDR_OWVAR 33
4307: PUSH
4308: LD_STRING AmGalRemake
4310: ST_TO_ADDR
// hc_face_number := 7 ;
4311: LD_ADDR_OWVAR 34
4315: PUSH
4316: LD_INT 7
4318: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4319: LD_ADDR_OWVAR 26
4323: PUSH
4324: LD_STRING Bobby Jordan
4326: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4327: LD_ADDR_OWVAR 29
4331: PUSH
4332: LD_INT 9
4334: PUSH
4335: LD_INT 11
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4342: LD_ADDR_OWVAR 30
4346: PUSH
4347: LD_INT 1
4349: PUSH
4350: LD_INT 0
4352: PUSH
4353: LD_INT 0
4355: PUSH
4356: LD_INT 1
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4365: LD_ADDR_OWVAR 31
4369: PUSH
4370: LD_INT 2
4372: PUSH
4373: LD_INT 1
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: LD_INT 1
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// un = CreateHuman ;
4388: LD_ADDR_VAR 0 3
4392: PUSH
4393: CALL_OW 44
4397: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4398: LD_VAR 0 3
4402: PPUSH
4403: LD_INT 24
4405: PPUSH
4406: LD_INT 1
4408: PPUSH
4409: CALL_OW 49
// wait ( 0 0$1 ) ;
4413: LD_INT 35
4415: PPUSH
4416: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4420: LD_VAR 0 3
4424: PPUSH
4425: CALL_OW 87
// DialogueOn ;
4429: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4433: LD_VAR 0 3
4437: PPUSH
4438: LD_STRING D11b-Sol3-1
4440: PPUSH
4441: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4445: LD_EXP 1
4449: PPUSH
4450: LD_STRING D11b-JMM-1
4452: PPUSH
4453: CALL_OW 88
// DialogueOff ;
4457: CALL_OW 7
// end ; if number = 3 then
4461: LD_VAR 0 1
4465: PUSH
4466: LD_INT 3
4468: EQUAL
4469: IFFALSE 4633
// begin hc_class := 1 ;
4471: LD_ADDR_OWVAR 28
4475: PUSH
4476: LD_INT 1
4478: ST_TO_ADDR
// hc_sex := sex_male ;
4479: LD_ADDR_OWVAR 27
4483: PUSH
4484: LD_INT 1
4486: ST_TO_ADDR
// hc_gallery := DJ ;
4487: LD_ADDR_OWVAR 33
4491: PUSH
4492: LD_STRING DJ
4494: ST_TO_ADDR
// hc_face_number := 1 ;
4495: LD_ADDR_OWVAR 34
4499: PUSH
4500: LD_INT 1
4502: ST_TO_ADDR
// hc_name := Darius Dajay ;
4503: LD_ADDR_OWVAR 26
4507: PUSH
4508: LD_STRING Darius Dajay
4510: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4511: LD_ADDR_OWVAR 29
4515: PUSH
4516: LD_INT 11
4518: PUSH
4519: LD_INT 11
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4526: LD_ADDR_OWVAR 30
4530: PUSH
4531: LD_INT 2
4533: PUSH
4534: LD_INT 0
4536: PUSH
4537: LD_INT 0
4539: PUSH
4540: LD_INT 0
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4549: LD_ADDR_OWVAR 31
4553: PUSH
4554: LD_INT 4
4556: PUSH
4557: LD_INT 0
4559: PUSH
4560: LD_INT 1
4562: PUSH
4563: LD_INT 0
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: ST_TO_ADDR
// un = CreateHuman ;
4572: LD_ADDR_VAR 0 3
4576: PUSH
4577: CALL_OW 44
4581: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4582: LD_VAR 0 3
4586: PPUSH
4587: LD_INT 25
4589: PPUSH
4590: LD_INT 1
4592: PPUSH
4593: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4597: LD_VAR 0 3
4601: PPUSH
4602: CALL_OW 87
// wait ( 0 0$1 ) ;
4606: LD_INT 35
4608: PPUSH
4609: CALL_OW 67
// DialogueOn ;
4613: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4617: LD_VAR 0 3
4621: PPUSH
4622: LD_STRING D11f-Sol5-1
4624: PPUSH
4625: CALL_OW 88
// DialogueOff ;
4629: CALL_OW 7
// end ; if number = 4 then
4633: LD_VAR 0 1
4637: PUSH
4638: LD_INT 4
4640: EQUAL
4641: IFFALSE 4805
// begin hc_class := 3 ;
4643: LD_ADDR_OWVAR 28
4647: PUSH
4648: LD_INT 3
4650: ST_TO_ADDR
// hc_sex := sex_female ;
4651: LD_ADDR_OWVAR 27
4655: PUSH
4656: LD_INT 2
4658: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4659: LD_ADDR_OWVAR 33
4663: PUSH
4664: LD_STRING SecondCharsGal
4666: ST_TO_ADDR
// hc_face_number := 46 ;
4667: LD_ADDR_OWVAR 34
4671: PUSH
4672: LD_INT 46
4674: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4675: LD_ADDR_OWVAR 26
4679: PUSH
4680: LD_STRING Sylvia Creak
4682: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4683: LD_ADDR_OWVAR 29
4687: PUSH
4688: LD_INT 10
4690: PUSH
4691: LD_INT 9
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4698: LD_ADDR_OWVAR 30
4702: PUSH
4703: LD_INT 0
4705: PUSH
4706: LD_INT 1
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: LD_INT 1
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4721: LD_ADDR_OWVAR 31
4725: PUSH
4726: LD_INT 1
4728: PUSH
4729: LD_INT 3
4731: PUSH
4732: LD_INT 1
4734: PUSH
4735: LD_INT 1
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: ST_TO_ADDR
// un = CreateHuman ;
4744: LD_ADDR_VAR 0 3
4748: PUSH
4749: CALL_OW 44
4753: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4754: LD_VAR 0 3
4758: PPUSH
4759: LD_INT 26
4761: PPUSH
4762: LD_INT 1
4764: PPUSH
4765: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4769: LD_VAR 0 3
4773: PPUSH
4774: CALL_OW 87
// wait ( 0 0$1 ) ;
4778: LD_INT 35
4780: PPUSH
4781: CALL_OW 67
// DialogueOn ;
4785: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4789: LD_VAR 0 3
4793: PPUSH
4794: LD_STRING D11e-FSol4-1
4796: PPUSH
4797: CALL_OW 88
// DialogueOff ;
4801: CALL_OW 7
// end ; if number = 5 then
4805: LD_VAR 0 1
4809: PUSH
4810: LD_INT 5
4812: EQUAL
4813: IFFALSE 4989
// begin hc_class := 1 ;
4815: LD_ADDR_OWVAR 28
4819: PUSH
4820: LD_INT 1
4822: ST_TO_ADDR
// hc_sex := sex_female ;
4823: LD_ADDR_OWVAR 27
4827: PUSH
4828: LD_INT 2
4830: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4831: LD_ADDR_OWVAR 33
4835: PUSH
4836: LD_STRING SecondCharsGal
4838: ST_TO_ADDR
// hc_face_number := 37 ;
4839: LD_ADDR_OWVAR 34
4843: PUSH
4844: LD_INT 37
4846: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4847: LD_ADDR_OWVAR 26
4851: PUSH
4852: LD_STRING Margherite Simpson
4854: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4855: LD_ADDR_OWVAR 29
4859: PUSH
4860: LD_INT 11
4862: PUSH
4863: LD_INT 10
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4870: LD_ADDR_OWVAR 30
4874: PUSH
4875: LD_INT 1
4877: PUSH
4878: LD_INT 1
4880: PUSH
4881: LD_INT 0
4883: PUSH
4884: LD_INT 0
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4893: LD_ADDR_OWVAR 31
4897: PUSH
4898: LD_INT 1
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: LD_INT 1
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: ST_TO_ADDR
// un = CreateHuman ;
4916: LD_ADDR_VAR 0 3
4920: PUSH
4921: CALL_OW 44
4925: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4926: LD_VAR 0 3
4930: PPUSH
4931: LD_INT 27
4933: PPUSH
4934: LD_INT 1
4936: PPUSH
4937: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4941: LD_VAR 0 3
4945: PPUSH
4946: CALL_OW 87
// wait ( 0 0$1 ) ;
4950: LD_INT 35
4952: PPUSH
4953: CALL_OW 67
// DialogueOn ;
4957: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4961: LD_VAR 0 3
4965: PPUSH
4966: LD_STRING D11c-FSol3-1
4968: PPUSH
4969: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4973: LD_EXP 1
4977: PPUSH
4978: LD_STRING D11c-JMM-1
4980: PPUSH
4981: CALL_OW 88
// DialogueOff ;
4985: CALL_OW 7
// end ; if number = 6 then
4989: LD_VAR 0 1
4993: PUSH
4994: LD_INT 6
4996: EQUAL
4997: IFFALSE 5171
// begin hc_class := 1 ;
4999: LD_ADDR_OWVAR 28
5003: PUSH
5004: LD_INT 1
5006: ST_TO_ADDR
// hc_sex := sex_male ;
5007: LD_ADDR_OWVAR 27
5011: PUSH
5012: LD_INT 1
5014: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5015: LD_ADDR_OWVAR 33
5019: PUSH
5020: LD_STRING AmGalRemake
5022: ST_TO_ADDR
// hc_face_number := 1 ;
5023: LD_ADDR_OWVAR 34
5027: PUSH
5028: LD_INT 1
5030: ST_TO_ADDR
// hc_name := Charles Brown ;
5031: LD_ADDR_OWVAR 26
5035: PUSH
5036: LD_STRING Charles Brown
5038: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5039: LD_ADDR_OWVAR 29
5043: PUSH
5044: LD_INT 12
5046: PUSH
5047: LD_INT 11
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5054: LD_ADDR_OWVAR 30
5058: PUSH
5059: LD_INT 2
5061: PUSH
5062: LD_INT 0
5064: PUSH
5065: LD_INT 0
5067: PUSH
5068: LD_INT 0
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5077: LD_ADDR_OWVAR 31
5081: PUSH
5082: LD_INT 3
5084: PUSH
5085: LD_INT 0
5087: PUSH
5088: LD_INT 1
5090: PUSH
5091: LD_INT 1
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: ST_TO_ADDR
// un = CreateHuman ;
5100: LD_ADDR_VAR 0 3
5104: PUSH
5105: CALL_OW 44
5109: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5110: LD_VAR 0 3
5114: PPUSH
5115: LD_INT 28
5117: PPUSH
5118: LD_INT 1
5120: PPUSH
5121: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5125: LD_VAR 0 3
5129: PPUSH
5130: CALL_OW 87
// wait ( 0 0$1 ) ;
5134: LD_INT 35
5136: PPUSH
5137: CALL_OW 67
// DialogueOn ;
5141: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5145: LD_VAR 0 3
5149: PPUSH
5150: LD_STRING D4-Sol1-5
5152: PPUSH
5153: CALL_OW 88
// DialogueOff ;
5157: CALL_OW 7
// tempCharles = un ;
5161: LD_ADDR_EXP 13
5165: PUSH
5166: LD_VAR 0 3
5170: ST_TO_ADDR
// end ; if number = 7 then
5171: LD_VAR 0 1
5175: PUSH
5176: LD_INT 7
5178: EQUAL
5179: IFFALSE 5429
// begin hc_class := 1 ;
5181: LD_ADDR_OWVAR 28
5185: PUSH
5186: LD_INT 1
5188: ST_TO_ADDR
// hc_sex := sex_female ;
5189: LD_ADDR_OWVAR 27
5193: PUSH
5194: LD_INT 2
5196: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5197: LD_ADDR_OWVAR 33
5201: PUSH
5202: LD_STRING AmGalRemake
5204: ST_TO_ADDR
// hc_face_number := 2 ;
5205: LD_ADDR_OWVAR 34
5209: PUSH
5210: LD_INT 2
5212: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5213: LD_ADDR_OWVAR 26
5217: PUSH
5218: LD_STRING Rebecca Macdonald
5220: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5221: LD_ADDR_OWVAR 29
5225: PUSH
5226: LD_INT 10
5228: PUSH
5229: LD_INT 10
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5236: LD_ADDR_OWVAR 30
5240: PUSH
5241: LD_INT 1
5243: PUSH
5244: LD_INT 0
5246: PUSH
5247: LD_INT 0
5249: PUSH
5250: LD_INT 1
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5259: LD_ADDR_OWVAR 31
5263: PUSH
5264: LD_INT 1
5266: PUSH
5267: LD_INT 0
5269: PUSH
5270: LD_INT 0
5272: PUSH
5273: LD_INT 1
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: ST_TO_ADDR
// un = CreateHuman ;
5282: LD_ADDR_VAR 0 3
5286: PUSH
5287: CALL_OW 44
5291: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5292: LD_VAR 0 3
5296: PPUSH
5297: LD_INT 29
5299: PPUSH
5300: LD_INT 1
5302: PPUSH
5303: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5307: LD_VAR 0 3
5311: PPUSH
5312: CALL_OW 87
// wait ( 0 0$1 ) ;
5316: LD_INT 35
5318: PPUSH
5319: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5323: LD_INT 30
5325: PPUSH
5326: LD_INT 22
5328: PUSH
5329: LD_INT 3
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PPUSH
5336: CALL_OW 70
5340: IFFALSE 5429
// begin DialogueOn ;
5342: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5346: LD_VAR 0 3
5350: PPUSH
5351: CALL_OW 250
5355: PPUSH
5356: LD_VAR 0 3
5360: PPUSH
5361: CALL_OW 251
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: LD_INT 15
5371: NEG
5372: PPUSH
5373: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5377: LD_VAR 0 3
5381: PPUSH
5382: CALL_OW 250
5386: PPUSH
5387: LD_VAR 0 3
5391: PPUSH
5392: CALL_OW 251
5396: PPUSH
5397: LD_INT 1
5399: PPUSH
5400: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5404: LD_VAR 0 3
5408: PPUSH
5409: LD_STRING D11a-FSol2-1
5411: PPUSH
5412: CALL_OW 88
// ComCrawl ( un ) ;
5416: LD_VAR 0 3
5420: PPUSH
5421: CALL_OW 137
// DialogueOff ;
5425: CALL_OW 7
// end ; end ; ignoreTarget := ignoreTarget union un ;
5429: LD_ADDR_EXP 45
5433: PUSH
5434: LD_EXP 45
5438: PUSH
5439: LD_VAR 0 3
5443: UNION
5444: ST_TO_ADDR
// arrivals := arrivals union un ;
5445: LD_ADDR_EXP 46
5449: PUSH
5450: LD_EXP 46
5454: PUSH
5455: LD_VAR 0 3
5459: UNION
5460: ST_TO_ADDR
// end ;
5461: LD_VAR 0 2
5465: RET
// every 0 0$1 do var i ;
5466: GO 5468
5468: DISABLE
5469: LD_INT 0
5471: PPUSH
// begin enable ;
5472: ENABLE
// if not ignoreTarget then
5473: LD_EXP 45
5477: NOT
5478: IFFALSE 5482
// exit ;
5480: GO 5563
// for i in ignoreTarget do
5482: LD_ADDR_VAR 0 1
5486: PUSH
5487: LD_EXP 45
5491: PUSH
5492: FOR_IN
5493: IFFALSE 5561
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5495: LD_INT 22
5497: PUSH
5498: LD_INT 1
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: PUSH
5505: LD_INT 91
5507: PUSH
5508: LD_VAR 0 1
5512: PUSH
5513: LD_INT 10
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: LIST
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PPUSH
5525: CALL_OW 69
5529: PUSH
5530: LD_EXP 45
5534: DIFF
5535: PUSH
5536: LD_INT 1
5538: GREATER
5539: IFFALSE 5559
// begin ignoreTarget := ignoreTarget diff i ;
5541: LD_ADDR_EXP 45
5545: PUSH
5546: LD_EXP 45
5550: PUSH
5551: LD_VAR 0 1
5555: DIFF
5556: ST_TO_ADDR
// break ;
5557: GO 5561
// end ;
5559: GO 5492
5561: POP
5562: POP
// end ; end_of_file
5563: PPOPN 1
5565: END
// export function PrepareRussian ; var i ; begin
5566: LD_INT 0
5568: PPUSH
5569: PPUSH
// if Difficulty < 3 then
5570: LD_OWVAR 67
5574: PUSH
5575: LD_INT 3
5577: LESS
5578: IFFALSE 5595
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5580: LD_INT 130
5582: PPUSH
5583: LD_INT 81
5585: PPUSH
5586: CALL_OW 428
5590: PPUSH
5591: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5595: LD_INT 3
5597: PPUSH
5598: LD_INT 3
5600: PPUSH
5601: LD_INT 2
5603: PPUSH
5604: LD_EXP 34
5608: PPUSH
5609: LD_EXP 35
5613: PPUSH
5614: CALL_OW 12
5618: PPUSH
5619: LD_INT 2
5621: PPUSH
5622: LD_INT 4
5624: PPUSH
5625: CALL 6160 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5629: LD_INT 3
5631: PPUSH
5632: LD_INT 3
5634: PPUSH
5635: LD_INT 8
5637: PPUSH
5638: LD_EXP 34
5642: PPUSH
5643: LD_EXP 35
5647: PPUSH
5648: CALL_OW 12
5652: PPUSH
5653: LD_INT 1
5655: PPUSH
5656: LD_INT 4
5658: PPUSH
5659: CALL 6160 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5663: LD_INT 3
5665: PPUSH
5666: LD_INT 3
5668: PPUSH
5669: LD_INT 67
5671: PPUSH
5672: LD_EXP 34
5676: PPUSH
5677: LD_EXP 35
5681: PPUSH
5682: CALL_OW 12
5686: PPUSH
5687: LD_INT 1
5689: PPUSH
5690: LD_INT 2
5692: PPUSH
5693: CALL 6160 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5697: LD_INT 3
5699: PPUSH
5700: LD_INT 3
5702: PPUSH
5703: LD_INT 21
5705: PPUSH
5706: LD_EXP 34
5710: PPUSH
5711: LD_EXP 35
5715: PPUSH
5716: CALL_OW 12
5720: PPUSH
5721: LD_INT 3
5723: PPUSH
5724: LD_INT 6
5726: PPUSH
5727: CALL 6160 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5731: LD_INT 3
5733: PPUSH
5734: LD_INT 3
5736: PPUSH
5737: LD_INT 17
5739: PPUSH
5740: LD_EXP 34
5744: PPUSH
5745: LD_EXP 35
5749: PPUSH
5750: CALL_OW 12
5754: PPUSH
5755: LD_INT 3
5757: PPUSH
5758: LD_INT 6
5760: PPUSH
5761: CALL 6160 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5765: LD_INT 3
5767: PPUSH
5768: LD_INT 3
5770: PPUSH
5771: LD_INT 32
5773: PPUSH
5774: LD_EXP 34
5778: PPUSH
5779: LD_EXP 35
5783: PPUSH
5784: CALL_OW 12
5788: PPUSH
5789: LD_INT 4
5791: PPUSH
5792: LD_INT 2
5794: PPUSH
5795: CALL 6160 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5799: LD_ADDR_VAR 0 2
5803: PUSH
5804: LD_INT 22
5806: PUSH
5807: LD_INT 3
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PUSH
5814: LD_INT 21
5816: PUSH
5817: LD_INT 3
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 30
5826: PUSH
5827: LD_INT 32
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: PPUSH
5839: CALL_OW 69
5843: PUSH
5844: FOR_IN
5845: IFFALSE 5885
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5847: LD_INT 3
5849: PPUSH
5850: LD_INT 3
5852: PPUSH
5853: LD_VAR 0 2
5857: PPUSH
5858: LD_EXP 34
5862: PPUSH
5863: LD_EXP 35
5867: PPUSH
5868: CALL_OW 12
5872: PPUSH
5873: LD_INT 1
5875: PPUSH
5876: LD_INT 1
5878: PPUSH
5879: CALL 6160 0 6
5883: GO 5844
5885: POP
5886: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5887: LD_ADDR_VAR 0 2
5891: PUSH
5892: LD_INT 22
5894: PUSH
5895: LD_INT 3
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 21
5904: PUSH
5905: LD_INT 3
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 30
5914: PUSH
5915: LD_INT 31
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: LIST
5926: PPUSH
5927: CALL_OW 69
5931: PUSH
5932: FOR_IN
5933: IFFALSE 5961
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5935: LD_EXP 34
5939: PPUSH
5940: LD_EXP 35
5944: PPUSH
5945: CALL_OW 12
5949: PPUSH
5950: LD_VAR 0 2
5954: PPUSH
5955: CALL 6270 0 2
5959: GO 5932
5961: POP
5962: POP
// end ; end_of_file
5963: LD_VAR 0 1
5967: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5968: LD_INT 0
5970: PPUSH
5971: PPUSH
// if exist_mode then
5972: LD_VAR 0 2
5976: IFFALSE 6001
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5978: LD_ADDR_VAR 0 4
5982: PUSH
5983: LD_EXP 44
5987: PUSH
5988: LD_VAR 0 1
5992: STR
5993: PPUSH
5994: CALL_OW 34
5998: ST_TO_ADDR
// end else
5999: GO 6016
// begin unit := NewCharacter ( ident ) ;
6001: LD_ADDR_VAR 0 4
6005: PUSH
6006: LD_VAR 0 1
6010: PPUSH
6011: CALL_OW 25
6015: ST_TO_ADDR
// end ; result := unit ;
6016: LD_ADDR_VAR 0 3
6020: PUSH
6021: LD_VAR 0 4
6025: ST_TO_ADDR
// end ;
6026: LD_VAR 0 3
6030: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6031: LD_INT 0
6033: PPUSH
6034: PPUSH
6035: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6036: LD_ADDR_VAR 0 6
6040: PUSH
6041: LD_VAR 0 1
6045: PUSH
6046: LD_INT 1
6048: PPUSH
6049: LD_VAR 0 1
6053: PPUSH
6054: CALL_OW 12
6058: ARRAY
6059: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6060: LD_VAR 0 6
6064: PPUSH
6065: CALL_OW 258
6069: PUSH
6070: LD_INT 1
6072: EQUAL
6073: IFFALSE 6091
// Say ( speaker , dialogMID ) else
6075: LD_VAR 0 6
6079: PPUSH
6080: LD_VAR 0 2
6084: PPUSH
6085: CALL_OW 88
6089: GO 6105
// Say ( speaker , dialogFID ) ;
6091: LD_VAR 0 6
6095: PPUSH
6096: LD_VAR 0 3
6100: PPUSH
6101: CALL_OW 88
// result := speaker ;
6105: LD_ADDR_VAR 0 4
6109: PUSH
6110: LD_VAR 0 6
6114: ST_TO_ADDR
// end ;
6115: LD_VAR 0 4
6119: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6120: LD_INT 0
6122: PPUSH
6123: PPUSH
// for i in charactersList do
6124: LD_ADDR_VAR 0 4
6128: PUSH
6129: LD_VAR 0 1
6133: PUSH
6134: FOR_IN
6135: IFFALSE 6153
// SaveCharacters ( i , ident ) ;
6137: LD_VAR 0 4
6141: PPUSH
6142: LD_VAR 0 2
6146: PPUSH
6147: CALL_OW 38
6151: GO 6134
6153: POP
6154: POP
// end ;
6155: LD_VAR 0 3
6159: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6160: LD_INT 0
6162: PPUSH
6163: PPUSH
6164: PPUSH
6165: PPUSH
// for i = 1 to count do
6166: LD_ADDR_VAR 0 8
6170: PUSH
6171: DOUBLE
6172: LD_INT 1
6174: DEC
6175: ST_TO_ADDR
6176: LD_VAR 0 6
6180: PUSH
6181: FOR_TO
6182: IFFALSE 6263
// begin uc_side = side ;
6184: LD_ADDR_OWVAR 20
6188: PUSH
6189: LD_VAR 0 1
6193: ST_TO_ADDR
// uc_nation = nation ;
6194: LD_ADDR_OWVAR 21
6198: PUSH
6199: LD_VAR 0 2
6203: ST_TO_ADDR
// hc_gallery =  ;
6204: LD_ADDR_OWVAR 33
6208: PUSH
6209: LD_STRING 
6211: ST_TO_ADDR
// hc_name =  ;
6212: LD_ADDR_OWVAR 26
6216: PUSH
6217: LD_STRING 
6219: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6220: LD_INT 0
6222: PPUSH
6223: LD_VAR 0 5
6227: PPUSH
6228: LD_VAR 0 4
6232: PPUSH
6233: CALL_OW 380
// un = CreateHuman ;
6237: LD_ADDR_VAR 0 10
6241: PUSH
6242: CALL_OW 44
6246: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6247: LD_VAR 0 10
6251: PPUSH
6252: LD_VAR 0 3
6256: PPUSH
6257: CALL_OW 52
// end ;
6261: GO 6181
6263: POP
6264: POP
// end ;
6265: LD_VAR 0 7
6269: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6270: LD_INT 0
6272: PPUSH
6273: PPUSH
6274: PPUSH
// uc_side := GetSide ( b ) ;
6275: LD_ADDR_OWVAR 20
6279: PUSH
6280: LD_VAR 0 2
6284: PPUSH
6285: CALL_OW 255
6289: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6290: LD_ADDR_OWVAR 21
6294: PUSH
6295: LD_VAR 0 2
6299: PPUSH
6300: CALL_OW 248
6304: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6305: LD_INT 0
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: LD_VAR 0 1
6315: PPUSH
6316: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6320: LD_ADDR_VAR 0 5
6324: PUSH
6325: LD_VAR 0 2
6329: PPUSH
6330: CALL_OW 254
6334: PUSH
6335: LD_INT 3
6337: MINUS
6338: ST_TO_ADDR
// if dir < 0 then
6339: LD_VAR 0 5
6343: PUSH
6344: LD_INT 0
6346: LESS
6347: IFFALSE 6363
// dir := 6 + dir ;
6349: LD_ADDR_VAR 0 5
6353: PUSH
6354: LD_INT 6
6356: PUSH
6357: LD_VAR 0 5
6361: PLUS
6362: ST_TO_ADDR
// un := CreateHuman ;
6363: LD_ADDR_VAR 0 4
6367: PUSH
6368: CALL_OW 44
6372: ST_TO_ADDR
// SetDir ( un , dir ) ;
6373: LD_VAR 0 4
6377: PPUSH
6378: LD_VAR 0 5
6382: PPUSH
6383: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6387: LD_VAR 0 4
6391: PPUSH
6392: LD_VAR 0 2
6396: PPUSH
6397: CALL_OW 52
// end ;
6401: LD_VAR 0 3
6405: RET
// export function PrepareDifficulty ; begin
6406: LD_INT 0
6408: PPUSH
// if Difficulty = 1 then
6409: LD_OWVAR 67
6413: PUSH
6414: LD_INT 1
6416: EQUAL
6417: IFFALSE 6435
// begin RuSolMinLevel = 2 ;
6419: LD_ADDR_EXP 34
6423: PUSH
6424: LD_INT 2
6426: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6427: LD_ADDR_EXP 35
6431: PUSH
6432: LD_INT 3
6434: ST_TO_ADDR
// end ; if Difficulty = 2 then
6435: LD_OWVAR 67
6439: PUSH
6440: LD_INT 2
6442: EQUAL
6443: IFFALSE 6461
// begin RuSolMinLevel = 3 ;
6445: LD_ADDR_EXP 34
6449: PUSH
6450: LD_INT 3
6452: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6453: LD_ADDR_EXP 35
6457: PUSH
6458: LD_INT 5
6460: ST_TO_ADDR
// end ; if Difficulty = 3 then
6461: LD_OWVAR 67
6465: PUSH
6466: LD_INT 3
6468: EQUAL
6469: IFFALSE 6487
// begin RuSolMinLevel = 4 ;
6471: LD_ADDR_EXP 34
6475: PUSH
6476: LD_INT 4
6478: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6479: LD_ADDR_EXP 35
6483: PUSH
6484: LD_INT 6
6486: ST_TO_ADDR
// end ; end ;
6487: LD_VAR 0 1
6491: RET
// export function ShowQuery1 ; begin
6492: LD_INT 0
6494: PPUSH
// case query ( QKill ) of 1 :
6495: LD_STRING QKill
6497: PPUSH
6498: CALL_OW 97
6502: PUSH
6503: LD_INT 1
6505: DOUBLE
6506: EQUAL
6507: IFTRUE 6511
6509: GO 6522
6511: POP
// begin result = 1 ;
6512: LD_ADDR_VAR 0 1
6516: PUSH
6517: LD_INT 1
6519: ST_TO_ADDR
// end ; 2 :
6520: GO 6561
6522: LD_INT 2
6524: DOUBLE
6525: EQUAL
6526: IFTRUE 6530
6528: GO 6541
6530: POP
// begin result = 2 ;
6531: LD_ADDR_VAR 0 1
6535: PUSH
6536: LD_INT 2
6538: ST_TO_ADDR
// end ; 3 :
6539: GO 6561
6541: LD_INT 3
6543: DOUBLE
6544: EQUAL
6545: IFTRUE 6549
6547: GO 6560
6549: POP
// begin result = 3 ;
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: LD_INT 3
6557: ST_TO_ADDR
// end ; end ;
6558: GO 6561
6560: POP
// end ;
6561: LD_VAR 0 1
6565: RET
// export function ShowQuery2 ; begin
6566: LD_INT 0
6568: PPUSH
// case query ( QKill2 ) of 1 :
6569: LD_STRING QKill2
6571: PPUSH
6572: CALL_OW 97
6576: PUSH
6577: LD_INT 1
6579: DOUBLE
6580: EQUAL
6581: IFTRUE 6585
6583: GO 6596
6585: POP
// begin result = 1 ;
6586: LD_ADDR_VAR 0 1
6590: PUSH
6591: LD_INT 1
6593: ST_TO_ADDR
// end ; 2 :
6594: GO 6616
6596: LD_INT 2
6598: DOUBLE
6599: EQUAL
6600: IFTRUE 6604
6602: GO 6615
6604: POP
// begin result = 2 ;
6605: LD_ADDR_VAR 0 1
6609: PUSH
6610: LD_INT 2
6612: ST_TO_ADDR
// end ; end ;
6613: GO 6616
6615: POP
// end ;
6616: LD_VAR 0 1
6620: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6621: LD_INT 0
6623: PPUSH
6624: PPUSH
6625: PPUSH
6626: PPUSH
6627: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6628: LD_ADDR_VAR 0 8
6632: PUSH
6633: LD_INT 48
6635: PUSH
6636: LD_INT 49
6638: PUSH
6639: LD_INT 50
6641: PUSH
6642: LD_INT 20
6644: PUSH
6645: LD_INT 1
6647: PUSH
6648: LD_INT 51
6650: PUSH
6651: LD_INT 52
6653: PUSH
6654: LD_INT 69
6656: PUSH
6657: LD_INT 39
6659: PUSH
6660: LD_INT 34
6662: PUSH
6663: LD_INT 40
6665: PUSH
6666: LD_INT 53
6668: PUSH
6669: LD_INT 71
6671: PUSH
6672: LD_INT 57
6674: PUSH
6675: LD_INT 58
6677: PUSH
6678: LD_INT 44
6680: PUSH
6681: LD_INT 32
6683: PUSH
6684: LD_INT 27
6686: PUSH
6687: LD_INT 23
6689: PUSH
6690: LD_INT 33
6692: PUSH
6693: LD_INT 59
6695: PUSH
6696: LD_INT 54
6698: PUSH
6699: LD_INT 55
6701: PUSH
6702: LD_INT 56
6704: PUSH
6705: LD_INT 63
6707: PUSH
6708: LD_INT 64
6710: PUSH
6711: LD_INT 65
6713: PUSH
6714: LD_INT 30
6716: PUSH
6717: LD_INT 31
6719: PUSH
6720: LD_INT 21
6722: PUSH
6723: LD_INT 22
6725: PUSH
6726: LD_INT 25
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6763: LD_ADDR_VAR 0 5
6767: PUSH
6768: DOUBLE
6769: LD_INT 1
6771: DEC
6772: ST_TO_ADDR
6773: LD_VAR 0 8
6777: PUSH
6778: FOR_TO
6779: IFFALSE 6855
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6781: LD_VAR 0 8
6785: PUSH
6786: LD_VAR 0 5
6790: ARRAY
6791: PPUSH
6792: LD_VAR 0 1
6796: PPUSH
6797: CALL_OW 321
6801: PUSH
6802: LD_INT 1
6804: EQUAL
6805: PUSH
6806: LD_VAR 0 8
6810: PUSH
6811: LD_VAR 0 5
6815: ARRAY
6816: PPUSH
6817: LD_VAR 0 3
6821: PPUSH
6822: CALL_OW 482
6826: PUSH
6827: LD_INT 1
6829: EQUAL
6830: AND
6831: IFFALSE 6853
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6833: LD_VAR 0 2
6837: PPUSH
6838: LD_VAR 0 8
6842: PUSH
6843: LD_VAR 0 5
6847: ARRAY
6848: PPUSH
6849: CALL_OW 184
6853: GO 6778
6855: POP
6856: POP
// end ;
6857: LD_VAR 0 4
6861: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6862: LD_INT 0
6864: PPUSH
6865: PPUSH
6866: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6867: LD_INT 22
6869: PUSH
6870: LD_VAR 0 1
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 21
6881: PUSH
6882: LD_INT 2
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PPUSH
6893: CALL_OW 69
6897: PUSH
6898: LD_VAR 0 3
6902: LESSEQUAL
6903: IFFALSE 7011
// begin for i = 1 to vehCount do
6905: LD_ADDR_VAR 0 9
6909: PUSH
6910: DOUBLE
6911: LD_INT 1
6913: DEC
6914: ST_TO_ADDR
6915: LD_VAR 0 3
6919: PUSH
6920: FOR_TO
6921: IFFALSE 7009
// begin weapon = weaponTab [ i ] ;
6923: LD_ADDR_VAR 0 10
6927: PUSH
6928: LD_VAR 0 4
6932: PUSH
6933: LD_VAR 0 9
6937: ARRAY
6938: ST_TO_ADDR
// if weapon = 46 then
6939: LD_VAR 0 10
6943: PUSH
6944: LD_INT 46
6946: EQUAL
6947: IFFALSE 6978
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6949: LD_VAR 0 2
6953: PPUSH
6954: LD_INT 24
6956: PPUSH
6957: LD_VAR 0 5
6961: PPUSH
6962: LD_VAR 0 6
6966: PPUSH
6967: LD_VAR 0 10
6971: PPUSH
6972: CALL_OW 185
// end else
6976: GO 7007
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6978: LD_VAR 0 2
6982: PPUSH
6983: LD_VAR 0 7
6987: PPUSH
6988: LD_VAR 0 5
6992: PPUSH
6993: LD_VAR 0 6
6997: PPUSH
6998: LD_VAR 0 10
7002: PPUSH
7003: CALL_OW 185
// end ; end ;
7007: GO 6920
7009: POP
7010: POP
// end ; end ;
7011: LD_VAR 0 8
7015: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7016: LD_INT 0
7018: PPUSH
7019: PPUSH
7020: PPUSH
7021: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7022: LD_ADDR_VAR 0 8
7026: PUSH
7027: LD_INT 22
7029: PUSH
7030: LD_VAR 0 1
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PUSH
7039: LD_INT 21
7041: PUSH
7042: LD_INT 2
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 3
7051: PUSH
7052: LD_INT 24
7054: PUSH
7055: LD_INT 650
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL_OW 69
7075: ST_TO_ADDR
// if damageVehicles > 0 then
7076: LD_VAR 0 8
7080: PUSH
7081: LD_INT 0
7083: GREATER
7084: IFFALSE 7105
// ComMoveXY ( damageVehicles , repX , repY ) ;
7086: LD_VAR 0 8
7090: PPUSH
7091: LD_VAR 0 3
7095: PPUSH
7096: LD_VAR 0 4
7100: PPUSH
7101: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7105: LD_VAR 0 8
7109: PPUSH
7110: LD_INT 95
7112: PUSH
7113: LD_VAR 0 2
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: LD_INT 3
7124: PUSH
7125: LD_INT 58
7127: PUSH
7128: EMPTY
7129: LIST
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PPUSH
7139: CALL_OW 72
7143: PUSH
7144: LD_INT 0
7146: GREATER
7147: IFFALSE 7214
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7149: LD_ADDR_VAR 0 6
7153: PUSH
7154: LD_VAR 0 8
7158: PPUSH
7159: LD_INT 95
7161: PUSH
7162: LD_VAR 0 2
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 3
7173: PUSH
7174: LD_INT 58
7176: PUSH
7177: EMPTY
7178: LIST
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PPUSH
7188: CALL_OW 72
7192: PUSH
7193: FOR_IN
7194: IFFALSE 7212
// ComExitVehicle ( UnitsInside ( i ) ) ;
7196: LD_VAR 0 6
7200: PPUSH
7201: CALL_OW 313
7205: PPUSH
7206: CALL_OW 121
7210: GO 7193
7212: POP
7213: POP
// end ;
7214: LD_VAR 0 5
7218: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7219: LD_INT 0
7221: PPUSH
7222: PPUSH
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7228: LD_ADDR_VAR 0 8
7232: PUSH
7233: LD_INT 22
7235: PUSH
7236: LD_VAR 0 1
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 21
7247: PUSH
7248: LD_INT 2
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 24
7257: PUSH
7258: LD_INT 660
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 58
7270: PUSH
7271: EMPTY
7272: LIST
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: LD_INT 34
7279: PUSH
7280: LD_INT 43
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 34
7289: PUSH
7290: LD_INT 44
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 34
7299: PUSH
7300: LD_INT 46
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: PPUSH
7324: CALL_OW 69
7328: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7329: LD_INT 22
7331: PUSH
7332: LD_VAR 0 1
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 21
7343: PUSH
7344: LD_INT 2
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 24
7353: PUSH
7354: LD_INT 1000
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 3
7363: PUSH
7364: LD_INT 58
7366: PUSH
7367: EMPTY
7368: LIST
7369: PUSH
7370: LD_INT 2
7372: PUSH
7373: LD_INT 34
7375: PUSH
7376: LD_INT 43
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 34
7385: PUSH
7386: LD_INT 44
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 34
7395: PUSH
7396: LD_INT 46
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: LIST
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: PPUSH
7420: CALL_OW 69
7424: PUSH
7425: LD_INT 5
7427: PUSH
7428: LD_INT 6
7430: PUSH
7431: LD_INT 6
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: LIST
7438: PUSH
7439: LD_OWVAR 67
7443: ARRAY
7444: EQUAL
7445: IFFALSE 7701
// if seeEnemy = 0 then
7447: LD_VAR 0 11
7451: PUSH
7452: LD_INT 0
7454: EQUAL
7455: IFFALSE 7701
// repeat wait ( 0 0$1 ) ;
7457: LD_INT 35
7459: PPUSH
7460: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7464: LD_ADDR_VAR 0 8
7468: PUSH
7469: LD_INT 22
7471: PUSH
7472: LD_VAR 0 1
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 21
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 24
7493: PUSH
7494: LD_INT 660
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: LD_INT 3
7503: PUSH
7504: LD_INT 58
7506: PUSH
7507: EMPTY
7508: LIST
7509: PUSH
7510: LD_INT 2
7512: PUSH
7513: LD_INT 34
7515: PUSH
7516: LD_INT 43
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 34
7525: PUSH
7526: LD_INT 44
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 34
7535: PUSH
7536: LD_INT 46
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: LIST
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: PPUSH
7560: CALL_OW 69
7564: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7565: LD_INT 22
7567: PUSH
7568: LD_VAR 0 1
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 95
7579: PUSH
7580: LD_VAR 0 2
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PPUSH
7593: CALL_OW 69
7597: NOT
7598: PUSH
7599: LD_VAR 0 11
7603: PUSH
7604: LD_INT 0
7606: EQUAL
7607: AND
7608: IFFALSE 7663
// for i := 1 to wayX do
7610: LD_ADDR_VAR 0 6
7614: PUSH
7615: DOUBLE
7616: LD_INT 1
7618: DEC
7619: ST_TO_ADDR
7620: LD_VAR 0 3
7624: PUSH
7625: FOR_TO
7626: IFFALSE 7661
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7628: LD_VAR 0 8
7632: PPUSH
7633: LD_VAR 0 3
7637: PUSH
7638: LD_VAR 0 6
7642: ARRAY
7643: PPUSH
7644: LD_VAR 0 4
7648: PUSH
7649: LD_VAR 0 6
7653: ARRAY
7654: PPUSH
7655: CALL_OW 114
7659: GO 7625
7661: POP
7662: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7663: LD_INT 22
7665: PUSH
7666: LD_VAR 0 1
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: LD_INT 95
7677: PUSH
7678: LD_VAR 0 2
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PPUSH
7691: CALL_OW 69
7695: PUSH
7696: LD_INT 0
7698: GREATER
7699: IFFALSE 7457
// seeEnemy = 1 ;
7701: LD_ADDR_VAR 0 11
7705: PUSH
7706: LD_INT 1
7708: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7709: LD_INT 35
7711: PPUSH
7712: CALL_OW 67
// for j in vehiclesOK do
7716: LD_ADDR_VAR 0 7
7720: PUSH
7721: LD_VAR 0 8
7725: PUSH
7726: FOR_IN
7727: IFFALSE 7940
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7729: LD_ADDR_VAR 0 9
7733: PUSH
7734: LD_INT 81
7736: PUSH
7737: LD_VAR 0 1
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 101
7748: PUSH
7749: LD_INT 1
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PPUSH
7760: CALL_OW 69
7764: PUSH
7765: LD_EXP 45
7769: DIFF
7770: PPUSH
7771: LD_VAR 0 7
7775: PPUSH
7776: CALL_OW 74
7780: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7781: LD_ADDR_VAR 0 10
7785: PUSH
7786: LD_INT 81
7788: PUSH
7789: LD_VAR 0 1
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 101
7800: PUSH
7801: LD_INT 1
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_INT 2
7810: PUSH
7811: LD_INT 59
7813: PUSH
7814: EMPTY
7815: LIST
7816: PUSH
7817: LD_INT 21
7819: PUSH
7820: LD_INT 1
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: PUSH
7827: LD_INT 21
7829: PUSH
7830: LD_INT 2
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: PUSH
7856: LD_EXP 45
7860: DIFF
7861: PPUSH
7862: LD_VAR 0 7
7866: PPUSH
7867: CALL_OW 74
7871: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7872: LD_VAR 0 7
7876: PPUSH
7877: LD_VAR 0 9
7881: PPUSH
7882: CALL_OW 296
7886: PUSH
7887: LD_INT 8
7889: PLUS
7890: PUSH
7891: LD_VAR 0 7
7895: PPUSH
7896: LD_VAR 0 10
7900: PPUSH
7901: CALL_OW 296
7905: LESS
7906: IFFALSE 7924
// ComAttackUnit ( j , target1 ) else
7908: LD_VAR 0 7
7912: PPUSH
7913: LD_VAR 0 9
7917: PPUSH
7918: CALL_OW 115
7922: GO 7938
// ComAttackUnit ( j , target2 ) ;
7924: LD_VAR 0 7
7928: PPUSH
7929: LD_VAR 0 10
7933: PPUSH
7934: CALL_OW 115
// end ;
7938: GO 7726
7940: POP
7941: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7942: LD_INT 22
7944: PUSH
7945: LD_VAR 0 1
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PUSH
7954: LD_INT 21
7956: PUSH
7957: LD_INT 2
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 24
7966: PUSH
7967: LD_INT 1000
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 3
7976: PUSH
7977: LD_INT 58
7979: PUSH
7980: EMPTY
7981: LIST
7982: PUSH
7983: LD_INT 2
7985: PUSH
7986: LD_INT 34
7988: PUSH
7989: LD_INT 43
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: PUSH
7996: LD_INT 34
7998: PUSH
7999: LD_INT 44
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 34
8008: PUSH
8009: LD_INT 46
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: EMPTY
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: LIST
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: PPUSH
8033: CALL_OW 69
8037: PUSH
8038: LD_INT 0
8040: EQUAL
8041: IFFALSE 7709
// seeEnemy = 0 ;
8043: LD_ADDR_VAR 0 11
8047: PUSH
8048: LD_INT 0
8050: ST_TO_ADDR
// end ;
8051: LD_VAR 0 5
8055: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8056: LD_INT 0
8058: PPUSH
8059: PPUSH
8060: PPUSH
8061: PPUSH
8062: PPUSH
8063: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8064: LD_ADDR_VAR 0 8
8068: PUSH
8069: LD_VAR 0 2
8073: PPUSH
8074: CALL_OW 313
8078: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8079: LD_ADDR_VAR 0 9
8083: PUSH
8084: LD_VAR 0 3
8088: PPUSH
8089: LD_INT 22
8091: PUSH
8092: LD_VAR 0 1
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 25
8103: PUSH
8104: LD_INT 2
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 24
8113: PUSH
8114: LD_INT 750
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PUSH
8121: LD_INT 3
8123: PUSH
8124: LD_INT 54
8126: PUSH
8127: EMPTY
8128: LIST
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: PPUSH
8140: CALL_OW 70
8144: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8145: LD_ADDR_VAR 0 6
8149: PUSH
8150: LD_VAR 0 3
8154: PPUSH
8155: LD_INT 22
8157: PUSH
8158: LD_VAR 0 1
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PUSH
8167: LD_INT 21
8169: PUSH
8170: LD_INT 3
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 3
8179: PUSH
8180: LD_INT 24
8182: PUSH
8183: LD_INT 1000
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: EMPTY
8200: LIST
8201: PPUSH
8202: CALL_OW 70
8206: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8207: LD_VAR 0 6
8211: NOT
8212: PUSH
8213: LD_INT 22
8215: PUSH
8216: LD_VAR 0 1
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 25
8227: PUSH
8228: LD_INT 2
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: LD_INT 250
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: PPUSH
8250: CALL_OW 69
8254: NOT
8255: AND
8256: IFFALSE 8260
// exit ;
8258: GO 8442
// if buildings_list > 0 and engineerOkInside then
8260: LD_VAR 0 6
8264: PUSH
8265: LD_INT 0
8267: GREATER
8268: PUSH
8269: LD_VAR 0 8
8273: AND
8274: IFFALSE 8285
// ComExitBuilding ( engineerOkInside ) ;
8276: LD_VAR 0 8
8280: PPUSH
8281: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8285: LD_VAR 0 6
8289: PUSH
8290: LD_INT 0
8292: GREATER
8293: PUSH
8294: LD_VAR 0 9
8298: PUSH
8299: LD_INT 0
8301: GREATER
8302: AND
8303: IFFALSE 8323
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8305: LD_VAR 0 9
8309: PPUSH
8310: LD_VAR 0 6
8314: PUSH
8315: LD_INT 1
8317: ARRAY
8318: PPUSH
8319: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8323: LD_VAR 0 6
8327: PUSH
8328: LD_INT 0
8330: EQUAL
8331: PUSH
8332: LD_VAR 0 4
8336: PUSH
8337: LD_INT 0
8339: EQUAL
8340: AND
8341: PUSH
8342: LD_VAR 0 9
8346: PUSH
8347: LD_INT 0
8349: GREATER
8350: AND
8351: IFFALSE 8367
// ComEnterUnit ( engineerOkOutside , building ) ;
8353: LD_VAR 0 9
8357: PPUSH
8358: LD_VAR 0 2
8362: PPUSH
8363: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8367: LD_VAR 0 9
8371: PUSH
8372: LD_INT 0
8374: GREATER
8375: PUSH
8376: LD_VAR 0 6
8380: PUSH
8381: LD_INT 0
8383: EQUAL
8384: AND
8385: PUSH
8386: LD_VAR 0 4
8390: PUSH
8391: LD_INT 0
8393: GREATER
8394: AND
8395: IFFALSE 8442
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8397: LD_VAR 0 9
8401: PPUSH
8402: LD_VAR 0 4
8406: PUSH
8407: LD_INT 1
8409: ARRAY
8410: PPUSH
8411: LD_VAR 0 4
8415: PUSH
8416: LD_INT 2
8418: ARRAY
8419: PPUSH
8420: LD_VAR 0 4
8424: PUSH
8425: LD_INT 3
8427: ARRAY
8428: PPUSH
8429: LD_VAR 0 4
8433: PUSH
8434: LD_INT 4
8436: ARRAY
8437: PPUSH
8438: CALL_OW 145
// end ;
8442: LD_VAR 0 5
8446: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8447: LD_INT 0
8449: PPUSH
8450: PPUSH
8451: PPUSH
8452: PPUSH
8453: PPUSH
8454: PPUSH
8455: PPUSH
8456: PPUSH
8457: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8458: LD_ADDR_VAR 0 6
8462: PUSH
8463: LD_INT 22
8465: PUSH
8466: LD_VAR 0 1
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 25
8477: PUSH
8478: LD_INT 4
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 23
8487: PUSH
8488: LD_INT 2
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PUSH
8495: LD_INT 24
8497: PUSH
8498: LD_INT 251
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: PPUSH
8511: CALL_OW 69
8515: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8516: LD_ADDR_VAR 0 7
8520: PUSH
8521: LD_VAR 0 3
8525: PPUSH
8526: LD_INT 22
8528: PUSH
8529: LD_VAR 0 1
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 23
8540: PUSH
8541: LD_INT 2
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: LD_INT 25
8550: PUSH
8551: LD_INT 4
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: LD_INT 50
8560: PUSH
8561: EMPTY
8562: LIST
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: PPUSH
8570: CALL_OW 70
8574: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8575: LD_ADDR_VAR 0 10
8579: PUSH
8580: LD_VAR 0 3
8584: PPUSH
8585: LD_INT 22
8587: PUSH
8588: LD_VAR 0 1
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: PUSH
8597: LD_INT 21
8599: PUSH
8600: LD_INT 1
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PUSH
8607: LD_INT 3
8609: PUSH
8610: LD_INT 25
8612: PUSH
8613: LD_INT 3
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 3
8626: PUSH
8627: LD_INT 24
8629: PUSH
8630: LD_INT 750
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: PPUSH
8647: CALL_OW 70
8651: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8652: LD_ADDR_VAR 0 11
8656: PUSH
8657: LD_VAR 0 2
8661: PPUSH
8662: LD_INT 22
8664: PUSH
8665: LD_VAR 0 1
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 21
8676: PUSH
8677: LD_INT 1
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 3
8686: PUSH
8687: LD_INT 25
8689: PUSH
8690: LD_INT 3
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: LD_INT 3
8703: PUSH
8704: LD_INT 24
8706: PUSH
8707: LD_INT 1000
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: PPUSH
8724: CALL_OW 70
8728: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8729: LD_VAR 0 10
8733: NOT
8734: PUSH
8735: LD_VAR 0 11
8739: NOT
8740: AND
8741: PUSH
8742: LD_VAR 0 6
8746: NOT
8747: AND
8748: IFFALSE 8752
// exit ;
8750: GO 8986
// if damageUnits > 0 and sci_list > 0 then
8752: LD_VAR 0 10
8756: PUSH
8757: LD_INT 0
8759: GREATER
8760: PUSH
8761: LD_VAR 0 6
8765: PUSH
8766: LD_INT 0
8768: GREATER
8769: AND
8770: IFFALSE 8786
// ComMoveToArea ( damageUnits , healArea ) ;
8772: LD_VAR 0 10
8776: PPUSH
8777: LD_VAR 0 2
8781: PPUSH
8782: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8786: LD_VAR 0 11
8790: PUSH
8791: LD_INT 0
8793: GREATER
8794: PUSH
8795: LD_VAR 0 6
8799: PUSH
8800: LD_INT 0
8802: GREATER
8803: AND
8804: IFFALSE 8815
// ComExitBuilding ( sci_list ) ;
8806: LD_VAR 0 6
8810: PPUSH
8811: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8815: LD_VAR 0 11
8819: PUSH
8820: LD_INT 0
8822: GREATER
8823: PUSH
8824: LD_VAR 0 7
8828: PUSH
8829: LD_INT 0
8831: GREATER
8832: AND
8833: IFFALSE 8853
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8835: LD_VAR 0 7
8839: PPUSH
8840: LD_VAR 0 11
8844: PUSH
8845: LD_INT 1
8847: ARRAY
8848: PPUSH
8849: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8853: LD_VAR 0 10
8857: PUSH
8858: LD_INT 0
8860: EQUAL
8861: PUSH
8862: LD_VAR 0 11
8866: PUSH
8867: LD_INT 0
8869: EQUAL
8870: AND
8871: PUSH
8872: LD_VAR 0 7
8876: PUSH
8877: LD_INT 0
8879: GREATER
8880: AND
8881: IFFALSE 8986
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8883: LD_ADDR_VAR 0 12
8887: PUSH
8888: LD_INT 22
8890: PUSH
8891: LD_VAR 0 1
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 21
8902: PUSH
8903: LD_INT 3
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 30
8912: PUSH
8913: LD_INT 8
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: LIST
8924: PPUSH
8925: CALL_OW 69
8929: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8930: LD_ADDR_VAR 0 13
8934: PUSH
8935: LD_INT 1
8937: PPUSH
8938: LD_VAR 0 12
8942: PPUSH
8943: CALL_OW 12
8947: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8948: LD_VAR 0 7
8952: PPUSH
8953: LD_INT 3
8955: PUSH
8956: LD_INT 60
8958: PUSH
8959: EMPTY
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PPUSH
8966: CALL_OW 72
8970: PPUSH
8971: LD_VAR 0 12
8975: PUSH
8976: LD_VAR 0 13
8980: ARRAY
8981: PPUSH
8982: CALL_OW 120
// end ; end ;
8986: LD_VAR 0 5
8990: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8991: LD_INT 0
8993: PPUSH
8994: PPUSH
8995: PPUSH
8996: PPUSH
// tmpTab = [ ] ;
8997: LD_ADDR_VAR 0 6
9001: PUSH
9002: EMPTY
9003: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9004: LD_INT 22
9006: PUSH
9007: LD_VAR 0 1
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: LD_INT 30
9018: PUSH
9019: LD_INT 32
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PUSH
9035: LD_INT 0
9037: GREATER
9038: IFFALSE 9121
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9040: LD_ADDR_VAR 0 4
9044: PUSH
9045: LD_INT 22
9047: PUSH
9048: LD_VAR 0 1
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PUSH
9057: LD_INT 30
9059: PUSH
9060: LD_INT 32
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PPUSH
9071: CALL_OW 69
9075: PUSH
9076: FOR_IN
9077: IFFALSE 9119
// begin for j in UnitsInside ( i ) do
9079: LD_ADDR_VAR 0 5
9083: PUSH
9084: LD_VAR 0 4
9088: PPUSH
9089: CALL_OW 313
9093: PUSH
9094: FOR_IN
9095: IFFALSE 9115
// tmpTab = tmpTab ^ j ;
9097: LD_ADDR_VAR 0 6
9101: PUSH
9102: LD_VAR 0 6
9106: PUSH
9107: LD_VAR 0 5
9111: ADD
9112: ST_TO_ADDR
9113: GO 9094
9115: POP
9116: POP
// end ;
9117: GO 9076
9119: POP
9120: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9121: LD_VAR 0 6
9125: PPUSH
9126: LD_VAR 0 2
9130: PPUSH
9131: CALL_OW 250
9135: PPUSH
9136: LD_VAR 0 2
9140: PPUSH
9141: CALL_OW 251
9145: PPUSH
9146: CALL_OW 114
// end ;
9150: LD_VAR 0 3
9154: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9155: LD_INT 0
9157: PPUSH
9158: PPUSH
9159: PPUSH
9160: PPUSH
// enable ;
9161: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9162: LD_ADDR_VAR 0 7
9166: PUSH
9167: LD_VAR 0 3
9171: PPUSH
9172: CALL_OW 435
9176: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9177: LD_ADDR_VAR 0 6
9181: PUSH
9182: LD_INT 22
9184: PUSH
9185: LD_VAR 0 1
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 34
9196: PUSH
9197: LD_VAR 0 2
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PPUSH
9210: CALL_OW 69
9214: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9215: LD_VAR 0 6
9219: PUSH
9220: LD_INT 0
9222: GREATER
9223: PUSH
9224: LD_VAR 0 3
9228: PPUSH
9229: CALL_OW 435
9233: AND
9234: PUSH
9235: LD_VAR 0 7
9239: PUSH
9240: LD_INT 0
9242: GREATER
9243: AND
9244: IFFALSE 9293
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9246: LD_VAR 0 6
9250: PUSH
9251: LD_INT 1
9253: ARRAY
9254: PPUSH
9255: LD_VAR 0 7
9259: PUSH
9260: LD_INT 1
9262: ARRAY
9263: PPUSH
9264: LD_VAR 0 7
9268: PUSH
9269: LD_INT 2
9271: ARRAY
9272: PPUSH
9273: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9277: LD_VAR 0 6
9281: PUSH
9282: LD_INT 1
9284: ARRAY
9285: PPUSH
9286: LD_INT 100
9288: PPUSH
9289: CALL_OW 240
// end ; end ;
9293: LD_VAR 0 4
9297: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9298: LD_INT 0
9300: PPUSH
9301: PPUSH
9302: PPUSH
9303: PPUSH
9304: PPUSH
9305: PPUSH
9306: PPUSH
9307: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9308: LD_ADDR_VAR 0 6
9312: PUSH
9313: LD_VAR 0 2
9317: PPUSH
9318: LD_INT 22
9320: PUSH
9321: LD_VAR 0 1
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 56
9332: PUSH
9333: EMPTY
9334: LIST
9335: PUSH
9336: LD_INT 24
9338: PUSH
9339: LD_INT 700
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 3
9348: PUSH
9349: LD_INT 60
9351: PUSH
9352: EMPTY
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 2
9361: PUSH
9362: LD_INT 25
9364: PUSH
9365: LD_INT 1
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: LD_INT 25
9374: PUSH
9375: LD_INT 5
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: PUSH
9382: LD_INT 25
9384: PUSH
9385: LD_INT 8
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: PUSH
9392: LD_INT 25
9394: PUSH
9395: LD_INT 9
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: PPUSH
9416: CALL_OW 70
9420: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9421: LD_ADDR_VAR 0 7
9425: PUSH
9426: LD_VAR 0 2
9430: PPUSH
9431: LD_INT 22
9433: PUSH
9434: LD_VAR 0 1
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 30
9445: PUSH
9446: LD_INT 32
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 58
9455: PUSH
9456: EMPTY
9457: LIST
9458: PUSH
9459: LD_INT 24
9461: PUSH
9462: LD_INT 251
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: PPUSH
9475: CALL_OW 70
9479: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9480: LD_ADDR_VAR 0 9
9484: PUSH
9485: LD_VAR 0 2
9489: PPUSH
9490: LD_INT 22
9492: PUSH
9493: LD_VAR 0 1
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PUSH
9502: LD_INT 2
9504: PUSH
9505: LD_INT 30
9507: PUSH
9508: LD_INT 4
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: PUSH
9515: LD_INT 30
9517: PUSH
9518: LD_INT 5
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 24
9532: PUSH
9533: LD_INT 251
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: LIST
9544: PPUSH
9545: CALL_OW 70
9549: ST_TO_ADDR
// if barrackList > 0 then
9550: LD_VAR 0 9
9554: PUSH
9555: LD_INT 0
9557: GREATER
9558: IFFALSE 9706
// begin if turretList = 0 then
9560: LD_VAR 0 7
9564: PUSH
9565: LD_INT 0
9567: EQUAL
9568: IFFALSE 9610
// begin if soldiers_list > 0 then
9570: LD_VAR 0 6
9574: PUSH
9575: LD_INT 0
9577: GREATER
9578: IFFALSE 9608
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9580: LD_VAR 0 6
9584: PPUSH
9585: LD_VAR 0 9
9589: PUSH
9590: LD_INT 1
9592: PPUSH
9593: LD_VAR 0 9
9597: PPUSH
9598: CALL_OW 12
9602: ARRAY
9603: PPUSH
9604: CALL_OW 120
// end else
9608: GO 9706
// begin for i in barrackList do
9610: LD_ADDR_VAR 0 4
9614: PUSH
9615: LD_VAR 0 9
9619: PUSH
9620: FOR_IN
9621: IFFALSE 9704
// begin insideUnits = UnitsInside ( i ) ;
9623: LD_ADDR_VAR 0 10
9627: PUSH
9628: LD_VAR 0 4
9632: PPUSH
9633: CALL_OW 313
9637: ST_TO_ADDR
// if insideUnits > 0 then
9638: LD_VAR 0 10
9642: PUSH
9643: LD_INT 0
9645: GREATER
9646: IFFALSE 9670
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9648: LD_VAR 0 10
9652: PUSH
9653: LD_INT 1
9655: ARRAY
9656: PPUSH
9657: LD_VAR 0 7
9661: PUSH
9662: LD_INT 1
9664: ARRAY
9665: PPUSH
9666: CALL_OW 120
// if soldiers_list > 0 then
9670: LD_VAR 0 6
9674: PUSH
9675: LD_INT 0
9677: GREATER
9678: IFFALSE 9702
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9680: LD_VAR 0 6
9684: PUSH
9685: LD_INT 1
9687: ARRAY
9688: PPUSH
9689: LD_VAR 0 7
9693: PUSH
9694: LD_INT 1
9696: ARRAY
9697: PPUSH
9698: CALL_OW 120
// end ;
9702: GO 9620
9704: POP
9705: POP
// end ; end ; end ;
9706: LD_VAR 0 3
9710: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9711: LD_INT 0
9713: PPUSH
9714: PPUSH
9715: PPUSH
9716: PPUSH
9717: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9718: LD_ADDR_VAR 0 6
9722: PUSH
9723: LD_INT 22
9725: PUSH
9726: LD_VAR 0 1
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: LD_INT 2
9737: PUSH
9738: LD_INT 30
9740: PUSH
9741: LD_INT 31
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: LD_INT 30
9750: PUSH
9751: LD_INT 32
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 30
9760: PUSH
9761: LD_INT 33
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: LD_INT 30
9770: PUSH
9771: LD_INT 4
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PUSH
9778: LD_INT 30
9780: PUSH
9781: LD_INT 5
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PPUSH
9800: CALL_OW 69
9804: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9805: LD_ADDR_VAR 0 7
9809: PUSH
9810: LD_INT 22
9812: PUSH
9813: LD_VAR 0 2
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: PUSH
9822: LD_INT 21
9824: PUSH
9825: LD_INT 3
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: LD_INT 58
9834: PUSH
9835: EMPTY
9836: LIST
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: LIST
9842: PPUSH
9843: CALL_OW 69
9847: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9848: LD_VAR 0 6
9852: PUSH
9853: LD_INT 0
9855: GREATER
9856: PUSH
9857: LD_VAR 0 7
9861: PUSH
9862: LD_INT 0
9864: GREATER
9865: AND
9866: IFFALSE 9936
// begin for i in turretsList do
9868: LD_ADDR_VAR 0 4
9872: PUSH
9873: LD_VAR 0 6
9877: PUSH
9878: FOR_IN
9879: IFFALSE 9934
// begin for j in enemyBuildings do
9881: LD_ADDR_VAR 0 5
9885: PUSH
9886: LD_VAR 0 7
9890: PUSH
9891: FOR_IN
9892: IFFALSE 9930
// begin if GetDistUnits ( i , j ) < 20 then
9894: LD_VAR 0 4
9898: PPUSH
9899: LD_VAR 0 5
9903: PPUSH
9904: CALL_OW 296
9908: PUSH
9909: LD_INT 20
9911: LESS
9912: IFFALSE 9928
// begin ComAttackUnit ( i , j ) ;
9914: LD_VAR 0 4
9918: PPUSH
9919: LD_VAR 0 5
9923: PPUSH
9924: CALL_OW 115
// end ; end ;
9928: GO 9891
9930: POP
9931: POP
// end ;
9932: GO 9878
9934: POP
9935: POP
// end ; end ;
9936: LD_VAR 0 3
9940: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9941: LD_INT 0
9943: PPUSH
9944: PPUSH
9945: PPUSH
9946: PPUSH
9947: PPUSH
9948: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9949: LD_ADDR_VAR 0 8
9953: PUSH
9954: LD_INT 22
9956: PUSH
9957: LD_VAR 0 1
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 21
9968: PUSH
9969: LD_INT 2
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 34
9978: PUSH
9979: LD_INT 52
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: PPUSH
9991: CALL_OW 69
9995: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9996: LD_ADDR_VAR 0 9
10000: PUSH
10001: LD_INT 22
10003: PUSH
10004: LD_VAR 0 1
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: LD_INT 21
10015: PUSH
10016: LD_INT 3
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 3
10025: PUSH
10026: LD_INT 24
10028: PUSH
10029: LD_INT 1000
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10053: LD_VAR 0 9
10057: PUSH
10058: LD_INT 0
10060: GREATER
10061: PUSH
10062: LD_VAR 0 8
10066: PPUSH
10067: LD_INT 24
10069: PUSH
10070: LD_INT 750
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PPUSH
10077: CALL_OW 72
10081: PUSH
10082: LD_INT 0
10084: GREATER
10085: AND
10086: IFFALSE 10121
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10088: LD_VAR 0 8
10092: PPUSH
10093: LD_INT 24
10095: PUSH
10096: LD_INT 750
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PPUSH
10103: CALL_OW 72
10107: PPUSH
10108: LD_VAR 0 9
10112: PUSH
10113: LD_INT 1
10115: ARRAY
10116: PPUSH
10117: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10121: LD_VAR 0 8
10125: PPUSH
10126: LD_INT 3
10128: PUSH
10129: LD_INT 24
10131: PUSH
10132: LD_INT 750
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PPUSH
10143: CALL_OW 72
10147: PUSH
10148: LD_INT 0
10150: GREATER
10151: IFFALSE 10189
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10153: LD_VAR 0 8
10157: PPUSH
10158: LD_INT 3
10160: PUSH
10161: LD_INT 24
10163: PUSH
10164: LD_INT 750
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PPUSH
10175: CALL_OW 72
10179: PPUSH
10180: LD_VAR 0 2
10184: PPUSH
10185: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10189: LD_VAR 0 8
10193: PUSH
10194: LD_INT 0
10196: GREATER
10197: PUSH
10198: LD_VAR 0 9
10202: PUSH
10203: LD_INT 0
10205: EQUAL
10206: AND
10207: PUSH
10208: LD_VAR 0 3
10212: PUSH
10213: LD_INT 0
10215: GREATER
10216: AND
10217: IFFALSE 10264
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10219: LD_VAR 0 8
10223: PPUSH
10224: LD_VAR 0 3
10228: PUSH
10229: LD_INT 1
10231: ARRAY
10232: PPUSH
10233: LD_VAR 0 3
10237: PUSH
10238: LD_INT 2
10240: ARRAY
10241: PPUSH
10242: LD_VAR 0 3
10246: PUSH
10247: LD_INT 3
10249: ARRAY
10250: PPUSH
10251: LD_VAR 0 3
10255: PUSH
10256: LD_INT 4
10258: ARRAY
10259: PPUSH
10260: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10264: LD_VAR 0 2
10268: PPUSH
10269: LD_INT 22
10271: PUSH
10272: LD_VAR 0 1
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 21
10283: PUSH
10284: LD_INT 2
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PUSH
10291: LD_INT 34
10293: PUSH
10294: LD_INT 52
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 3
10303: PUSH
10304: LD_INT 24
10306: PUSH
10307: LD_INT 750
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: PPUSH
10324: CALL_OW 70
10328: PUSH
10329: LD_INT 0
10331: GREATER
10332: IFFALSE 10534
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10334: LD_ADDR_VAR 0 5
10338: PUSH
10339: LD_VAR 0 2
10343: PPUSH
10344: LD_INT 22
10346: PUSH
10347: LD_VAR 0 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 21
10358: PUSH
10359: LD_INT 2
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 34
10368: PUSH
10369: LD_INT 52
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 3
10378: PUSH
10379: LD_INT 24
10381: PUSH
10382: LD_INT 750
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PPUSH
10399: CALL_OW 70
10403: PUSH
10404: FOR_IN
10405: IFFALSE 10532
// begin mechTmp = UnitsInside ( i ) ;
10407: LD_ADDR_VAR 0 6
10411: PUSH
10412: LD_VAR 0 5
10416: PPUSH
10417: CALL_OW 313
10421: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10422: LD_VAR 0 6
10426: PPUSH
10427: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10431: LD_VAR 0 6
10435: PPUSH
10436: LD_VAR 0 7
10440: PPUSH
10441: CALL_OW 189
// wait ( 0 0$2 ) ;
10445: LD_INT 70
10447: PPUSH
10448: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10452: LD_VAR 0 6
10456: PPUSH
10457: LD_VAR 0 2
10461: PPUSH
10462: LD_INT 22
10464: PUSH
10465: LD_VAR 0 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 21
10476: PUSH
10477: LD_INT 2
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 34
10486: PUSH
10487: LD_INT 52
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 24
10496: PUSH
10497: LD_INT 1000
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 58
10506: PUSH
10507: EMPTY
10508: LIST
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: PPUSH
10517: CALL_OW 70
10521: PUSH
10522: LD_INT 1
10524: ARRAY
10525: PPUSH
10526: CALL_OW 180
// end ;
10530: GO 10404
10532: POP
10533: POP
// end ; end ;
10534: LD_VAR 0 4
10538: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10539: LD_INT 0
10541: PPUSH
10542: PPUSH
10543: PPUSH
10544: PPUSH
10545: PPUSH
10546: PPUSH
10547: PPUSH
10548: PPUSH
10549: PPUSH
10550: PPUSH
10551: PPUSH
// for i = 1 to medicCount do
10552: LD_ADDR_VAR 0 14
10556: PUSH
10557: DOUBLE
10558: LD_INT 1
10560: DEC
10561: ST_TO_ADDR
10562: LD_VAR 0 7
10566: PUSH
10567: FOR_TO
10568: IFFALSE 10650
// begin uc_side = side ;
10570: LD_ADDR_OWVAR 20
10574: PUSH
10575: LD_VAR 0 1
10579: ST_TO_ADDR
// uc_nation = nation ;
10580: LD_ADDR_OWVAR 21
10584: PUSH
10585: LD_VAR 0 2
10589: ST_TO_ADDR
// hc_name =  ;
10590: LD_ADDR_OWVAR 26
10594: PUSH
10595: LD_STRING 
10597: ST_TO_ADDR
// hc_gallery =  ;
10598: LD_ADDR_OWVAR 33
10602: PUSH
10603: LD_STRING 
10605: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10606: LD_INT 0
10608: PPUSH
10609: LD_INT 4
10611: PPUSH
10612: LD_VAR 0 8
10616: PPUSH
10617: CALL_OW 380
// un = CreateHuman ;
10621: LD_ADDR_VAR 0 16
10625: PUSH
10626: CALL_OW 44
10630: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10631: LD_VAR 0 16
10635: PPUSH
10636: LD_VAR 0 9
10640: PPUSH
10641: LD_INT 0
10643: PPUSH
10644: CALL_OW 49
// end ;
10648: GO 10567
10650: POP
10651: POP
// for i = 1 to soldierCount do
10652: LD_ADDR_VAR 0 14
10656: PUSH
10657: DOUBLE
10658: LD_INT 1
10660: DEC
10661: ST_TO_ADDR
10662: LD_VAR 0 3
10666: PUSH
10667: FOR_TO
10668: IFFALSE 10750
// begin uc_side = side ;
10670: LD_ADDR_OWVAR 20
10674: PUSH
10675: LD_VAR 0 1
10679: ST_TO_ADDR
// uc_nation = nation ;
10680: LD_ADDR_OWVAR 21
10684: PUSH
10685: LD_VAR 0 2
10689: ST_TO_ADDR
// hc_name =  ;
10690: LD_ADDR_OWVAR 26
10694: PUSH
10695: LD_STRING 
10697: ST_TO_ADDR
// hc_gallery =  ;
10698: LD_ADDR_OWVAR 33
10702: PUSH
10703: LD_STRING 
10705: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10706: LD_INT 0
10708: PPUSH
10709: LD_INT 1
10711: PPUSH
10712: LD_VAR 0 8
10716: PPUSH
10717: CALL_OW 380
// un = CreateHuman ;
10721: LD_ADDR_VAR 0 16
10725: PUSH
10726: CALL_OW 44
10730: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10731: LD_VAR 0 16
10735: PPUSH
10736: LD_VAR 0 9
10740: PPUSH
10741: LD_INT 0
10743: PPUSH
10744: CALL_OW 49
// end ;
10748: GO 10667
10750: POP
10751: POP
// for i = 1 to sniperCount do
10752: LD_ADDR_VAR 0 14
10756: PUSH
10757: DOUBLE
10758: LD_INT 1
10760: DEC
10761: ST_TO_ADDR
10762: LD_VAR 0 4
10766: PUSH
10767: FOR_TO
10768: IFFALSE 10850
// begin uc_side = side ;
10770: LD_ADDR_OWVAR 20
10774: PUSH
10775: LD_VAR 0 1
10779: ST_TO_ADDR
// uc_nation = nation ;
10780: LD_ADDR_OWVAR 21
10784: PUSH
10785: LD_VAR 0 2
10789: ST_TO_ADDR
// hc_name =  ;
10790: LD_ADDR_OWVAR 26
10794: PUSH
10795: LD_STRING 
10797: ST_TO_ADDR
// hc_gallery =  ;
10798: LD_ADDR_OWVAR 33
10802: PUSH
10803: LD_STRING 
10805: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10806: LD_INT 0
10808: PPUSH
10809: LD_INT 5
10811: PPUSH
10812: LD_VAR 0 8
10816: PPUSH
10817: CALL_OW 380
// un = CreateHuman ;
10821: LD_ADDR_VAR 0 16
10825: PUSH
10826: CALL_OW 44
10830: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10831: LD_VAR 0 16
10835: PPUSH
10836: LD_VAR 0 9
10840: PPUSH
10841: LD_INT 0
10843: PPUSH
10844: CALL_OW 49
// end ;
10848: GO 10767
10850: POP
10851: POP
// for i = 1 to bazookCount do
10852: LD_ADDR_VAR 0 14
10856: PUSH
10857: DOUBLE
10858: LD_INT 1
10860: DEC
10861: ST_TO_ADDR
10862: LD_VAR 0 5
10866: PUSH
10867: FOR_TO
10868: IFFALSE 10950
// begin uc_side = side ;
10870: LD_ADDR_OWVAR 20
10874: PUSH
10875: LD_VAR 0 1
10879: ST_TO_ADDR
// uc_nation = nation ;
10880: LD_ADDR_OWVAR 21
10884: PUSH
10885: LD_VAR 0 2
10889: ST_TO_ADDR
// hc_name =  ;
10890: LD_ADDR_OWVAR 26
10894: PUSH
10895: LD_STRING 
10897: ST_TO_ADDR
// hc_gallery =  ;
10898: LD_ADDR_OWVAR 33
10902: PUSH
10903: LD_STRING 
10905: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10906: LD_INT 0
10908: PPUSH
10909: LD_INT 9
10911: PPUSH
10912: LD_VAR 0 8
10916: PPUSH
10917: CALL_OW 380
// un = CreateHuman ;
10921: LD_ADDR_VAR 0 16
10925: PUSH
10926: CALL_OW 44
10930: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10931: LD_VAR 0 16
10935: PPUSH
10936: LD_VAR 0 9
10940: PPUSH
10941: LD_INT 0
10943: PPUSH
10944: CALL_OW 49
// end ;
10948: GO 10867
10950: POP
10951: POP
// for i = 1 to mortalCount do
10952: LD_ADDR_VAR 0 14
10956: PUSH
10957: DOUBLE
10958: LD_INT 1
10960: DEC
10961: ST_TO_ADDR
10962: LD_VAR 0 6
10966: PUSH
10967: FOR_TO
10968: IFFALSE 11050
// begin uc_side = side ;
10970: LD_ADDR_OWVAR 20
10974: PUSH
10975: LD_VAR 0 1
10979: ST_TO_ADDR
// uc_nation = nation ;
10980: LD_ADDR_OWVAR 21
10984: PUSH
10985: LD_VAR 0 2
10989: ST_TO_ADDR
// hc_name =  ;
10990: LD_ADDR_OWVAR 26
10994: PUSH
10995: LD_STRING 
10997: ST_TO_ADDR
// hc_gallery =  ;
10998: LD_ADDR_OWVAR 33
11002: PUSH
11003: LD_STRING 
11005: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11006: LD_INT 0
11008: PPUSH
11009: LD_INT 8
11011: PPUSH
11012: LD_VAR 0 8
11016: PPUSH
11017: CALL_OW 380
// un = CreateHuman ;
11021: LD_ADDR_VAR 0 16
11025: PUSH
11026: CALL_OW 44
11030: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11031: LD_VAR 0 16
11035: PPUSH
11036: LD_VAR 0 9
11040: PPUSH
11041: LD_INT 0
11043: PPUSH
11044: CALL_OW 49
// end ;
11048: GO 10967
11050: POP
11051: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11052: LD_ADDR_VAR 0 19
11056: PUSH
11057: LD_INT 22
11059: PUSH
11060: LD_VAR 0 1
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 2
11071: PUSH
11072: LD_INT 25
11074: PUSH
11075: LD_INT 1
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 25
11084: PUSH
11085: LD_INT 5
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: LD_INT 25
11094: PUSH
11095: LD_INT 8
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 25
11104: PUSH
11105: LD_INT 9
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PPUSH
11123: CALL_OW 69
11127: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11128: LD_ADDR_VAR 0 18
11132: PUSH
11133: LD_INT 22
11135: PUSH
11136: LD_VAR 0 1
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: LD_INT 25
11147: PUSH
11148: LD_INT 4
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PPUSH
11159: CALL_OW 69
11163: ST_TO_ADDR
// for i in medic_list do
11164: LD_ADDR_VAR 0 14
11168: PUSH
11169: LD_VAR 0 18
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11193
// ComMoveToArea ( i , healArea ) ;
11177: LD_VAR 0 14
11181: PPUSH
11182: LD_VAR 0 10
11186: PPUSH
11187: CALL_OW 113
11191: GO 11174
11193: POP
11194: POP
// if strategy = 1 then
11195: LD_VAR 0 12
11199: PUSH
11200: LD_INT 1
11202: EQUAL
11203: IFFALSE 11920
// begin repeat wait ( 0 0$3 ) ;
11205: LD_INT 105
11207: PPUSH
11208: CALL_OW 67
// for i in soldiersOK_list do
11212: LD_ADDR_VAR 0 14
11216: PUSH
11217: LD_VAR 0 19
11221: PUSH
11222: FOR_IN
11223: IFFALSE 11257
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11225: LD_VAR 0 14
11229: PPUSH
11230: LD_INT 80
11232: PPUSH
11233: LD_INT 109
11235: PPUSH
11236: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11240: LD_VAR 0 14
11244: PPUSH
11245: LD_INT 39
11247: PPUSH
11248: LD_INT 49
11250: PPUSH
11251: CALL_OW 174
// end ;
11255: GO 11222
11257: POP
11258: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11259: LD_INT 13
11261: PPUSH
11262: LD_INT 22
11264: PUSH
11265: LD_VAR 0 1
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PPUSH
11274: CALL_OW 70
11278: PUSH
11279: LD_INT 0
11281: GREATER
11282: IFFALSE 11205
// repeat wait ( 0 0$1 ) ;
11284: LD_INT 35
11286: PPUSH
11287: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11291: LD_ADDR_VAR 0 17
11295: PUSH
11296: LD_INT 22
11298: PUSH
11299: LD_VAR 0 1
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 1
11310: PUSH
11311: LD_INT 3
11313: PUSH
11314: LD_INT 24
11316: PUSH
11317: LD_INT 550
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 24
11330: PUSH
11331: LD_INT 250
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: LIST
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PPUSH
11347: CALL_OW 69
11351: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11352: LD_ADDR_VAR 0 19
11356: PUSH
11357: LD_INT 22
11359: PUSH
11360: LD_VAR 0 1
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PUSH
11369: LD_INT 2
11371: PUSH
11372: LD_INT 25
11374: PUSH
11375: LD_INT 1
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 25
11384: PUSH
11385: LD_INT 5
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 25
11394: PUSH
11395: LD_INT 8
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 25
11404: PUSH
11405: LD_INT 9
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: PUSH
11419: LD_INT 24
11421: PUSH
11422: LD_INT 1000
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: PPUSH
11434: CALL_OW 69
11438: ST_TO_ADDR
// if medicCount > 0 then
11439: LD_VAR 0 7
11443: PUSH
11444: LD_INT 0
11446: GREATER
11447: IFFALSE 11521
// begin if damageUnit_list > 0 then
11449: LD_VAR 0 17
11453: PUSH
11454: LD_INT 0
11456: GREATER
11457: IFFALSE 11521
// begin for i in damageUnit_list do
11459: LD_ADDR_VAR 0 14
11463: PUSH
11464: LD_VAR 0 17
11468: PUSH
11469: FOR_IN
11470: IFFALSE 11519
// begin ComMoveToArea ( i , healArea ) ;
11472: LD_VAR 0 14
11476: PPUSH
11477: LD_VAR 0 10
11481: PPUSH
11482: CALL_OW 113
// for j in medic_list do
11486: LD_ADDR_VAR 0 15
11490: PUSH
11491: LD_VAR 0 18
11495: PUSH
11496: FOR_IN
11497: IFFALSE 11515
// AddComHeal ( j , i ) ;
11499: LD_VAR 0 15
11503: PPUSH
11504: LD_VAR 0 14
11508: PPUSH
11509: CALL_OW 188
11513: GO 11496
11515: POP
11516: POP
// end ;
11517: GO 11469
11519: POP
11520: POP
// end ; end ; for i in soldiersOK_list do
11521: LD_ADDR_VAR 0 14
11525: PUSH
11526: LD_VAR 0 19
11530: PUSH
11531: FOR_IN
11532: IFFALSE 11714
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11534: LD_ADDR_VAR 0 22
11538: PUSH
11539: LD_INT 22
11541: PUSH
11542: LD_VAR 0 11
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PPUSH
11551: CALL_OW 69
11555: PUSH
11556: LD_EXP 45
11560: DIFF
11561: PPUSH
11562: LD_VAR 0 14
11566: PPUSH
11567: CALL_OW 74
11571: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11572: LD_ADDR_VAR 0 23
11576: PUSH
11577: LD_INT 22
11579: PUSH
11580: LD_VAR 0 11
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 2
11591: PUSH
11592: LD_INT 59
11594: PUSH
11595: EMPTY
11596: LIST
11597: PUSH
11598: LD_INT 21
11600: PUSH
11601: LD_INT 1
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 21
11610: PUSH
11611: LD_INT 2
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: PPUSH
11631: CALL_OW 69
11635: PPUSH
11636: LD_VAR 0 14
11640: PPUSH
11641: CALL_OW 74
11645: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11646: LD_VAR 0 14
11650: PPUSH
11651: LD_VAR 0 22
11655: PPUSH
11656: CALL_OW 296
11660: PUSH
11661: LD_INT 8
11663: PLUS
11664: PUSH
11665: LD_VAR 0 14
11669: PPUSH
11670: LD_VAR 0 23
11674: PPUSH
11675: CALL_OW 296
11679: LESS
11680: IFFALSE 11698
// begin ComAttackUnit ( i , target1 ) ;
11682: LD_VAR 0 14
11686: PPUSH
11687: LD_VAR 0 22
11691: PPUSH
11692: CALL_OW 115
// end else
11696: GO 11712
// begin ComAttackUnit ( i , target2 ) ;
11698: LD_VAR 0 14
11702: PPUSH
11703: LD_VAR 0 23
11707: PPUSH
11708: CALL_OW 115
// end ; end ;
11712: GO 11531
11714: POP
11715: POP
// for i in soldiersOK_list do
11716: LD_ADDR_VAR 0 14
11720: PUSH
11721: LD_VAR 0 19
11725: PUSH
11726: FOR_IN
11727: IFFALSE 11909
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11729: LD_ADDR_VAR 0 22
11733: PUSH
11734: LD_INT 22
11736: PUSH
11737: LD_VAR 0 11
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PPUSH
11746: CALL_OW 69
11750: PUSH
11751: LD_EXP 45
11755: DIFF
11756: PPUSH
11757: LD_VAR 0 14
11761: PPUSH
11762: CALL_OW 74
11766: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11767: LD_ADDR_VAR 0 23
11771: PUSH
11772: LD_INT 22
11774: PUSH
11775: LD_VAR 0 11
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 2
11786: PUSH
11787: LD_INT 59
11789: PUSH
11790: EMPTY
11791: LIST
11792: PUSH
11793: LD_INT 21
11795: PUSH
11796: LD_INT 1
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: PUSH
11803: LD_INT 21
11805: PUSH
11806: LD_INT 2
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: EMPTY
11824: LIST
11825: PPUSH
11826: CALL_OW 69
11830: PPUSH
11831: LD_VAR 0 14
11835: PPUSH
11836: CALL_OW 74
11840: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11841: LD_VAR 0 14
11845: PPUSH
11846: LD_VAR 0 22
11850: PPUSH
11851: CALL_OW 296
11855: PUSH
11856: LD_INT 8
11858: PLUS
11859: PUSH
11860: LD_VAR 0 14
11864: PPUSH
11865: LD_VAR 0 23
11869: PPUSH
11870: CALL_OW 296
11874: LESS
11875: IFFALSE 11893
// begin ComAttackUnit ( i , target1 ) ;
11877: LD_VAR 0 14
11881: PPUSH
11882: LD_VAR 0 22
11886: PPUSH
11887: CALL_OW 115
// end else
11891: GO 11907
// begin ComAttackUnit ( i , target2 ) ;
11893: LD_VAR 0 14
11897: PPUSH
11898: LD_VAR 0 23
11902: PPUSH
11903: CALL_OW 115
// end ; end ;
11907: GO 11726
11909: POP
11910: POP
// until soldiersOK_list = [ ] ;
11911: LD_VAR 0 19
11915: PUSH
11916: EMPTY
11917: EQUAL
11918: IFFALSE 11284
// end ; if strategy = 2 then
11920: LD_VAR 0 12
11924: PUSH
11925: LD_INT 2
11927: EQUAL
11928: IFFALSE 12633
// begin repeat wait ( 0 0$1 ) ;
11930: LD_INT 35
11932: PPUSH
11933: CALL_OW 67
// for i in soldiersOK_list do
11937: LD_ADDR_VAR 0 14
11941: PUSH
11942: LD_VAR 0 19
11946: PUSH
11947: FOR_IN
11948: IFFALSE 11982
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11950: LD_VAR 0 14
11954: PPUSH
11955: LD_INT 117
11957: PPUSH
11958: LD_INT 97
11960: PPUSH
11961: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11965: LD_VAR 0 14
11969: PPUSH
11970: LD_INT 94
11972: PPUSH
11973: LD_INT 50
11975: PPUSH
11976: CALL_OW 174
// end ;
11980: GO 11947
11982: POP
11983: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11984: LD_INT 14
11986: PPUSH
11987: LD_INT 22
11989: PUSH
11990: LD_VAR 0 1
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PPUSH
11999: CALL_OW 70
12003: PUSH
12004: LD_INT 0
12006: GREATER
12007: IFFALSE 11930
// repeat wait ( 0 0$3 ) ;
12009: LD_INT 105
12011: PPUSH
12012: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12016: LD_ADDR_VAR 0 17
12020: PUSH
12021: LD_INT 22
12023: PUSH
12024: LD_VAR 0 1
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 1
12035: PUSH
12036: LD_INT 3
12038: PUSH
12039: LD_INT 24
12041: PUSH
12042: LD_INT 550
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 24
12055: PUSH
12056: LD_INT 250
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PPUSH
12072: CALL_OW 69
12076: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12077: LD_ADDR_VAR 0 19
12081: PUSH
12082: LD_INT 22
12084: PUSH
12085: LD_VAR 0 1
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: PUSH
12094: LD_INT 2
12096: PUSH
12097: LD_INT 25
12099: PUSH
12100: LD_INT 1
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PUSH
12107: LD_INT 25
12109: PUSH
12110: LD_INT 5
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 25
12119: PUSH
12120: LD_INT 8
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 25
12129: PUSH
12130: LD_INT 9
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: PUSH
12144: LD_INT 24
12146: PUSH
12147: LD_INT 1000
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: PPUSH
12159: CALL_OW 69
12163: ST_TO_ADDR
// if medicCount > 0 then
12164: LD_VAR 0 7
12168: PUSH
12169: LD_INT 0
12171: GREATER
12172: IFFALSE 12246
// begin if damageUnit_list > 0 then
12174: LD_VAR 0 17
12178: PUSH
12179: LD_INT 0
12181: GREATER
12182: IFFALSE 12246
// begin for i in damageUnit_list do
12184: LD_ADDR_VAR 0 14
12188: PUSH
12189: LD_VAR 0 17
12193: PUSH
12194: FOR_IN
12195: IFFALSE 12244
// begin ComMoveToArea ( i , healArea ) ;
12197: LD_VAR 0 14
12201: PPUSH
12202: LD_VAR 0 10
12206: PPUSH
12207: CALL_OW 113
// for j in medic_list do
12211: LD_ADDR_VAR 0 15
12215: PUSH
12216: LD_VAR 0 18
12220: PUSH
12221: FOR_IN
12222: IFFALSE 12240
// AddComHeal ( j , i ) ;
12224: LD_VAR 0 15
12228: PPUSH
12229: LD_VAR 0 14
12233: PPUSH
12234: CALL_OW 188
12238: GO 12221
12240: POP
12241: POP
// end ;
12242: GO 12194
12244: POP
12245: POP
// end ; end ; for i in soldiersOK_list do
12246: LD_ADDR_VAR 0 14
12250: PUSH
12251: LD_VAR 0 19
12255: PUSH
12256: FOR_IN
12257: IFFALSE 12433
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12259: LD_ADDR_VAR 0 22
12263: PUSH
12264: LD_INT 22
12266: PUSH
12267: LD_VAR 0 11
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PPUSH
12276: CALL_OW 69
12280: PPUSH
12281: LD_VAR 0 14
12285: PPUSH
12286: CALL_OW 74
12290: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12291: LD_ADDR_VAR 0 23
12295: PUSH
12296: LD_INT 22
12298: PUSH
12299: LD_VAR 0 11
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: LD_INT 2
12310: PUSH
12311: LD_INT 59
12313: PUSH
12314: EMPTY
12315: LIST
12316: PUSH
12317: LD_INT 21
12319: PUSH
12320: LD_INT 1
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 21
12329: PUSH
12330: LD_INT 2
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: EMPTY
12348: LIST
12349: PPUSH
12350: CALL_OW 69
12354: PPUSH
12355: LD_VAR 0 14
12359: PPUSH
12360: CALL_OW 74
12364: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12365: LD_VAR 0 14
12369: PPUSH
12370: LD_VAR 0 22
12374: PPUSH
12375: CALL_OW 296
12379: PUSH
12380: LD_INT 8
12382: PLUS
12383: PUSH
12384: LD_VAR 0 14
12388: PPUSH
12389: LD_VAR 0 23
12393: PPUSH
12394: CALL_OW 296
12398: LESS
12399: IFFALSE 12417
// begin ComAttackUnit ( i , target1 ) ;
12401: LD_VAR 0 14
12405: PPUSH
12406: LD_VAR 0 22
12410: PPUSH
12411: CALL_OW 115
// end else
12415: GO 12431
// begin ComAttackUnit ( i , target2 ) ;
12417: LD_VAR 0 14
12421: PPUSH
12422: LD_VAR 0 23
12426: PPUSH
12427: CALL_OW 115
// end ; end ;
12431: GO 12256
12433: POP
12434: POP
// for i in soldiersOK_list do
12435: LD_ADDR_VAR 0 14
12439: PUSH
12440: LD_VAR 0 19
12444: PUSH
12445: FOR_IN
12446: IFFALSE 12622
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12448: LD_ADDR_VAR 0 22
12452: PUSH
12453: LD_INT 22
12455: PUSH
12456: LD_VAR 0 11
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PPUSH
12465: CALL_OW 69
12469: PPUSH
12470: LD_VAR 0 14
12474: PPUSH
12475: CALL_OW 74
12479: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12480: LD_ADDR_VAR 0 23
12484: PUSH
12485: LD_INT 22
12487: PUSH
12488: LD_VAR 0 11
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: LD_INT 2
12499: PUSH
12500: LD_INT 59
12502: PUSH
12503: EMPTY
12504: LIST
12505: PUSH
12506: LD_INT 21
12508: PUSH
12509: LD_INT 1
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 21
12518: PUSH
12519: LD_INT 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: EMPTY
12537: LIST
12538: PPUSH
12539: CALL_OW 69
12543: PPUSH
12544: LD_VAR 0 14
12548: PPUSH
12549: CALL_OW 74
12553: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12554: LD_VAR 0 14
12558: PPUSH
12559: LD_VAR 0 22
12563: PPUSH
12564: CALL_OW 296
12568: PUSH
12569: LD_INT 8
12571: PLUS
12572: PUSH
12573: LD_VAR 0 14
12577: PPUSH
12578: LD_VAR 0 23
12582: PPUSH
12583: CALL_OW 296
12587: LESS
12588: IFFALSE 12606
// begin ComAttackUnit ( i , target1 ) ;
12590: LD_VAR 0 14
12594: PPUSH
12595: LD_VAR 0 22
12599: PPUSH
12600: CALL_OW 115
// end else
12604: GO 12620
// begin ComAttackUnit ( i , target2 ) ;
12606: LD_VAR 0 14
12610: PPUSH
12611: LD_VAR 0 23
12615: PPUSH
12616: CALL_OW 115
// end ; end ;
12620: GO 12445
12622: POP
12623: POP
// until soldiersOK_list = [ ] ;
12624: LD_VAR 0 19
12628: PUSH
12629: EMPTY
12630: EQUAL
12631: IFFALSE 12009
// end ; end ; end_of_file
12633: LD_VAR 0 13
12637: RET
// every 0 0$01 do
12638: GO 12640
12640: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12641: LD_INT 22
12643: PUSH
12644: LD_INT 1
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: LD_INT 25
12653: PUSH
12654: LD_INT 2
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PPUSH
12665: CALL_OW 69
12669: PUSH
12670: LD_INT 0
12672: EQUAL
12673: IFFALSE 12687
// SetClass ( JMM , 2 ) ;
12675: LD_EXP 1
12679: PPUSH
12680: LD_INT 2
12682: PPUSH
12683: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12687: LD_STRING M1
12689: PPUSH
12690: CALL_OW 337
// case difficulty of 1 :
12694: LD_OWVAR 67
12698: PUSH
12699: LD_INT 1
12701: DOUBLE
12702: EQUAL
12703: IFTRUE 12707
12705: GO 12717
12707: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12708: LD_STRING M1-1
12710: PPUSH
12711: CALL_OW 337
12715: GO 12754
12717: LD_INT 2
12719: DOUBLE
12720: EQUAL
12721: IFTRUE 12725
12723: GO 12735
12725: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12726: LD_STRING M1-2
12728: PPUSH
12729: CALL_OW 337
12733: GO 12754
12735: LD_INT 3
12737: DOUBLE
12738: EQUAL
12739: IFTRUE 12743
12741: GO 12753
12743: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12744: LD_STRING M1-3
12746: PPUSH
12747: CALL_OW 337
12751: GO 12754
12753: POP
// ChangeMissionObjectives ( M1cont ) ;
12754: LD_STRING M1cont
12756: PPUSH
12757: CALL_OW 337
// SaveForQuickRestart ;
12761: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12765: LD_INT 525
12767: PPUSH
12768: LD_INT 700
12770: PPUSH
12771: CALL_OW 12
12775: PPUSH
12776: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12780: LD_INT 5
12782: PPUSH
12783: LD_INT 82
12785: PPUSH
12786: LD_INT 38
12788: PPUSH
12789: LD_INT 10
12791: PPUSH
12792: LD_INT 1
12794: PPUSH
12795: CALL_OW 56
// wait ( 0 0$14 ) ;
12799: LD_INT 490
12801: PPUSH
12802: CALL_OW 67
// firstCrateSpawn := true ;
12806: LD_ADDR_EXP 41
12810: PUSH
12811: LD_INT 1
12813: ST_TO_ADDR
// end ;
12814: END
// every 0 0$02 trigger firstCrateSpawn do
12815: LD_EXP 41
12819: IFFALSE 13182
12821: GO 12823
12823: DISABLE
// begin if IsOk ( Lisa ) then
12824: LD_EXP 2
12828: PPUSH
12829: CALL_OW 302
12833: IFFALSE 12849
// Say ( Lisa , DR0-Lisa-1 ) else
12835: LD_EXP 2
12839: PPUSH
12840: LD_STRING DR0-Lisa-1
12842: PPUSH
12843: CALL_OW 88
12847: GO 12995
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12849: LD_INT 22
12851: PUSH
12852: LD_INT 1
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PUSH
12859: LD_INT 21
12861: PUSH
12862: LD_INT 1
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: LD_INT 26
12871: PUSH
12872: LD_INT 1
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 2
12881: PUSH
12882: LD_INT 25
12884: PUSH
12885: LD_INT 1
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 25
12894: PUSH
12895: LD_INT 2
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 25
12904: PUSH
12905: LD_INT 3
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 25
12914: PUSH
12915: LD_INT 4
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: PPUSH
12935: CALL_OW 69
12939: PUSH
12940: LD_EXP 1
12944: PUSH
12945: LD_EXP 8
12949: PUSH
12950: LD_EXP 5
12954: PUSH
12955: LD_EXP 6
12959: PUSH
12960: LD_EXP 7
12964: PUSH
12965: LD_EXP 4
12969: PUSH
12970: LD_EXP 3
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: DIFF
12984: PPUSH
12985: LD_STRING DR0-Sol1-1
12987: PPUSH
12988: LD_STRING DR0-Sol1-1
12990: PPUSH
12991: CALL 6031 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12995: LD_INT 22
12997: PUSH
12998: LD_INT 1
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 21
13007: PUSH
13008: LD_INT 1
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 26
13017: PUSH
13018: LD_INT 1
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 2
13027: PUSH
13028: LD_INT 25
13030: PUSH
13031: LD_INT 1
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 25
13040: PUSH
13041: LD_INT 2
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PUSH
13048: LD_INT 25
13050: PUSH
13051: LD_INT 3
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 25
13060: PUSH
13061: LD_INT 4
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: PPUSH
13081: CALL_OW 69
13085: PUSH
13086: LD_EXP 1
13090: PUSH
13091: LD_EXP 8
13095: PUSH
13096: LD_EXP 5
13100: PUSH
13101: LD_EXP 2
13105: PUSH
13106: LD_EXP 6
13110: PUSH
13111: LD_EXP 7
13115: PUSH
13116: LD_EXP 4
13120: PUSH
13121: LD_EXP 3
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: DIFF
13136: PPUSH
13137: LD_STRING DR0-Sol2-1
13139: PPUSH
13140: LD_STRING DR0-Sol2-1
13142: PPUSH
13143: CALL 6031 0 3
// if IsOk ( Cyrus ) then
13147: LD_EXP 4
13151: PPUSH
13152: CALL_OW 302
13156: IFFALSE 13170
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13158: LD_EXP 4
13162: PPUSH
13163: LD_STRING DR0-Cyrus-1
13165: PPUSH
13166: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13170: LD_EXP 1
13174: PPUSH
13175: LD_STRING DR0-JMM-1
13177: PPUSH
13178: CALL_OW 88
// end ;
13182: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13183: LD_EXP 5
13187: PPUSH
13188: CALL_OW 302
13192: PUSH
13193: LD_INT 22
13195: PUSH
13196: LD_INT 1
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 25
13205: PUSH
13206: LD_INT 16
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PPUSH
13217: CALL_OW 69
13221: PUSH
13222: LD_INT 0
13224: GREATER
13225: AND
13226: PUSH
13227: LD_INT 1
13229: PPUSH
13230: CALL_OW 463
13234: NOT
13235: AND
13236: IFFALSE 13514
13238: GO 13240
13240: DISABLE
// begin DialogueOn ;
13241: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13245: LD_EXP 5
13249: PPUSH
13250: LD_STRING D10-Frank-1
13252: PPUSH
13253: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13257: LD_INT 22
13259: PUSH
13260: LD_INT 1
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 21
13269: PUSH
13270: LD_INT 1
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 2
13279: PUSH
13280: LD_INT 25
13282: PUSH
13283: LD_INT 1
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: LD_INT 25
13292: PUSH
13293: LD_INT 2
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 25
13302: PUSH
13303: LD_INT 3
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 25
13312: PUSH
13313: LD_INT 4
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: PPUSH
13332: CALL_OW 69
13336: PUSH
13337: LD_EXP 1
13341: PUSH
13342: LD_EXP 5
13346: PUSH
13347: LD_EXP 2
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: DIFF
13357: PPUSH
13358: LD_STRING D10-Sol1-1
13360: PPUSH
13361: LD_STRING D10-FSol1-1
13363: PPUSH
13364: CALL 6031 0 3
// Say ( Frank , D10-Frank-2 ) ;
13368: LD_EXP 5
13372: PPUSH
13373: LD_STRING D10-Frank-2
13375: PPUSH
13376: CALL_OW 88
// if IsOK ( Lisa ) then
13380: LD_EXP 2
13384: PPUSH
13385: CALL_OW 302
13389: IFFALSE 13405
// begin Say ( Lisa , D10-Lisa-2 ) ;
13391: LD_EXP 2
13395: PPUSH
13396: LD_STRING D10-Lisa-2
13398: PPUSH
13399: CALL_OW 88
// end else
13403: GO 13510
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13405: LD_INT 22
13407: PUSH
13408: LD_INT 1
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 21
13417: PUSH
13418: LD_INT 1
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 2
13427: PUSH
13428: LD_INT 25
13430: PUSH
13431: LD_INT 1
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 25
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 25
13450: PUSH
13451: LD_INT 3
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 25
13460: PUSH
13461: LD_INT 4
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 69
13484: PUSH
13485: LD_EXP 1
13489: PUSH
13490: LD_EXP 5
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: DIFF
13499: PPUSH
13500: LD_STRING D10-Sol1-2
13502: PPUSH
13503: LD_STRING D10-FSol1-2
13505: PPUSH
13506: CALL 6031 0 3
// end ; DialogueOff ;
13510: CALL_OW 7
// end ;
13514: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13515: LD_INT 1
13517: PPUSH
13518: CALL_OW 463
13522: NOT
13523: IFFALSE 13814
13525: GO 13527
13527: DISABLE
// begin HarrisonSupport ;
13528: CALL 2498 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13532: LD_EXP 17
13536: PPUSH
13537: CALL_OW 310
13541: PPUSH
13542: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13546: LD_EXP 17
13550: PPUSH
13551: LD_STRING DEng-Eng1-1
13553: PPUSH
13554: CALL_OW 88
// wait ( 1 1$0 ) ;
13558: LD_INT 2100
13560: PPUSH
13561: CALL_OW 67
// DialogueOn ;
13565: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13569: LD_EXP 14
13573: PPUSH
13574: LD_STRING DRem-Har-1
13576: PPUSH
13577: CALL_OW 94
// if contactWithRussian = 1 then
13581: LD_EXP 22
13585: PUSH
13586: LD_INT 1
13588: EQUAL
13589: IFFALSE 13605
// begin Say ( JMM , DRem-JMM-1 ) ;
13591: LD_EXP 1
13595: PPUSH
13596: LD_STRING DRem-JMM-1
13598: PPUSH
13599: CALL_OW 88
// end else
13603: GO 13617
// begin Say ( JMM , DRem-JMM-1a ) ;
13605: LD_EXP 1
13609: PPUSH
13610: LD_STRING DRem-JMM-1a
13612: PPUSH
13613: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13617: LD_EXP 14
13621: PPUSH
13622: LD_STRING DRem-Har-2
13624: PPUSH
13625: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13629: LD_STRING DenisInDelta
13631: PPUSH
13632: LD_INT 0
13634: PPUSH
13635: CALL_OW 30
13639: PUSH
13640: LD_INT 1
13642: EQUAL
13643: IFFALSE 13659
// begin Say ( JMM , DRem-JMM-2 ) ;
13645: LD_EXP 1
13649: PPUSH
13650: LD_STRING DRem-JMM-2
13652: PPUSH
13653: CALL_OW 88
// end else
13657: GO 13671
// begin Say ( JMM , DRem-JMM-2a ) ;
13659: LD_EXP 1
13663: PPUSH
13664: LD_STRING DRem-JMM-2a
13666: PPUSH
13667: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13671: LD_EXP 14
13675: PPUSH
13676: LD_STRING DRem-Har-3
13678: PPUSH
13679: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13683: LD_EXP 1
13687: PPUSH
13688: LD_STRING DRem-JMM-3
13690: PPUSH
13691: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13695: LD_EXP 14
13699: PPUSH
13700: LD_STRING DRem-Har-4
13702: PPUSH
13703: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13707: LD_STRING DenisInDelta
13709: PPUSH
13710: LD_INT 0
13712: PPUSH
13713: CALL_OW 30
13717: PUSH
13718: LD_INT 1
13720: EQUAL
13721: IFFALSE 13777
// begin Say ( JMM , DRem-JMM-4 ) ;
13723: LD_EXP 1
13727: PPUSH
13728: LD_STRING DRem-JMM-4
13730: PPUSH
13731: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13735: LD_EXP 14
13739: PPUSH
13740: LD_STRING DRem-Har-5
13742: PPUSH
13743: CALL_OW 94
// wait ( 4 4$00 ) ;
13747: LD_INT 8400
13749: PPUSH
13750: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13754: LD_INT 35
13756: PPUSH
13757: CALL_OW 67
// until not InBattle ( 1 ) ;
13761: LD_INT 1
13763: PPUSH
13764: CALL_OW 463
13768: NOT
13769: IFFALSE 13754
// SpawnDenis ;
13771: CALL 13815 0 0
// end else
13775: GO 13810
// begin SetRestrict ( 36 , 1 , true ) ;
13777: LD_INT 36
13779: PPUSH
13780: LD_INT 1
13782: PPUSH
13783: LD_INT 1
13785: PPUSH
13786: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13790: LD_INT 15
13792: PPUSH
13793: LD_INT 1
13795: PPUSH
13796: LD_INT 1
13798: PPUSH
13799: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13803: LD_STRING MR
13805: PPUSH
13806: CALL_OW 337
// end ; DialogueOff ;
13810: CALL_OW 7
// end ;
13814: END
// export function SpawnDenis ; var tmp ; begin
13815: LD_INT 0
13817: PPUSH
13818: PPUSH
// PrepareDenis ;
13819: CALL 2220 0 0
// CenterNowOnUnits ( Denis ) ;
13823: LD_EXP 9
13827: PPUSH
13828: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
13832: LD_ADDR_VAR 0 2
13836: PUSH
13837: LD_INT 22
13839: PUSH
13840: LD_INT 1
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PPUSH
13847: CALL_OW 69
13851: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
13852: LD_EXP 9
13856: PPUSH
13857: LD_VAR 0 2
13861: PPUSH
13862: LD_EXP 9
13866: PPUSH
13867: CALL_OW 74
13871: PPUSH
13872: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13876: LD_INT 35
13878: PPUSH
13879: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
13883: LD_INT 22
13885: PUSH
13886: LD_INT 1
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 91
13895: PUSH
13896: LD_EXP 9
13900: PUSH
13901: LD_INT 10
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PPUSH
13913: CALL_OW 69
13917: IFFALSE 13876
// SetSide ( Denis , 1 ) ;
13919: LD_EXP 9
13923: PPUSH
13924: LD_INT 1
13926: PPUSH
13927: CALL_OW 235
// DialogueOn ;
13931: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13935: LD_EXP 9
13939: PPUSH
13940: LD_STRING DDen-Den-1
13942: PPUSH
13943: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13947: LD_EXP 1
13951: PPUSH
13952: LD_STRING DDen-JMM-1
13954: PPUSH
13955: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13959: LD_EXP 9
13963: PPUSH
13964: LD_STRING DDen-Den-2
13966: PPUSH
13967: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13971: LD_EXP 1
13975: PPUSH
13976: LD_STRING DDen-JMM-2
13978: PPUSH
13979: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13983: LD_EXP 9
13987: PPUSH
13988: LD_STRING DDen-Den-3
13990: PPUSH
13991: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13995: LD_EXP 1
13999: PPUSH
14000: LD_STRING DDen-JMM-3
14002: PPUSH
14003: CALL_OW 88
// DialogueOff ;
14007: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14011: LD_INT 36
14013: PPUSH
14014: LD_INT 1
14016: PPUSH
14017: LD_INT 1
14019: PPUSH
14020: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14024: LD_INT 15
14026: PPUSH
14027: LD_INT 1
14029: PPUSH
14030: LD_INT 1
14032: PPUSH
14033: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14037: LD_STRING MR
14039: PPUSH
14040: CALL_OW 337
// end ;
14044: LD_VAR 0 1
14048: RET
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14049: CALL 14104 0 0
14053: PUSH
14054: LD_EXP 9
14058: PPUSH
14059: CALL_OW 302
14063: AND
14064: PUSH
14065: LD_INT 1
14067: PPUSH
14068: CALL_OW 463
14072: NOT
14073: AND
14074: IFFALSE 14103
14076: GO 14078
14078: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14079: LD_EXP 9
14083: PPUSH
14084: LD_STRING DR1-Den-1
14086: PPUSH
14087: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14091: LD_EXP 1
14095: PPUSH
14096: LD_STRING DR1-JMM-1
14098: PPUSH
14099: CALL_OW 88
// end ;
14103: END
// function CheckOptoLab ; var i ; begin
14104: LD_INT 0
14106: PPUSH
14107: PPUSH
// result = false ;
14108: LD_ADDR_VAR 0 1
14112: PUSH
14113: LD_INT 0
14115: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14116: LD_ADDR_VAR 0 2
14120: PUSH
14121: LD_INT 22
14123: PUSH
14124: LD_INT 1
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: LD_INT 2
14133: PUSH
14134: LD_INT 30
14136: PUSH
14137: LD_INT 7
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 30
14146: PUSH
14147: LD_INT 8
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: LIST
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PPUSH
14163: CALL_OW 69
14167: PUSH
14168: FOR_IN
14169: IFFALSE 14221
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14171: LD_VAR 0 2
14175: PPUSH
14176: LD_INT 1
14178: PPUSH
14179: CALL_OW 268
14183: PUSH
14184: LD_INT 15
14186: EQUAL
14187: PUSH
14188: LD_VAR 0 2
14192: PPUSH
14193: LD_INT 2
14195: PPUSH
14196: CALL_OW 268
14200: PUSH
14201: LD_INT 15
14203: EQUAL
14204: OR
14205: IFFALSE 14217
// begin result = true ;
14207: LD_ADDR_VAR 0 1
14211: PUSH
14212: LD_INT 1
14214: ST_TO_ADDR
// break ;
14215: GO 14221
// end ; break ;
14217: GO 14221
// end ;
14219: GO 14168
14221: POP
14222: POP
// end ;
14223: LD_VAR 0 1
14227: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14228: LD_INT 15
14230: PPUSH
14231: LD_INT 1
14233: PPUSH
14234: CALL_OW 321
14238: PUSH
14239: LD_INT 2
14241: EQUAL
14242: PUSH
14243: LD_EXP 9
14247: PPUSH
14248: CALL_OW 302
14252: AND
14253: PUSH
14254: LD_INT 1
14256: PPUSH
14257: CALL_OW 463
14261: NOT
14262: AND
14263: IFFALSE 14495
14265: GO 14267
14267: DISABLE
// begin DialogueOn ;
14268: CALL_OW 6
// if IsOK ( Denis ) then
14272: LD_EXP 9
14276: PPUSH
14277: CALL_OW 302
14281: IFFALSE 14297
// begin Say ( Denis , DR2-Den-1 ) ;
14283: LD_EXP 9
14287: PPUSH
14288: LD_STRING DR2-Den-1
14290: PPUSH
14291: CALL_OW 88
// end else
14295: GO 14356
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14297: LD_INT 22
14299: PUSH
14300: LD_INT 1
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 21
14309: PUSH
14310: LD_INT 1
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: LD_INT 25
14319: PUSH
14320: LD_INT 4
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: LIST
14331: PPUSH
14332: CALL_OW 69
14336: PUSH
14337: LD_EXP 1
14341: PUSH
14342: EMPTY
14343: LIST
14344: DIFF
14345: PPUSH
14346: LD_STRING DR2-Sci1-1
14348: PPUSH
14349: LD_STRING DR2-FSci1-1
14351: PPUSH
14352: CALL 6031 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14356: LD_EXP 1
14360: PPUSH
14361: LD_STRING DR2-JMM-1
14363: PPUSH
14364: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14368: LD_INT 22
14370: PUSH
14371: LD_INT 1
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: LD_INT 21
14380: PUSH
14381: LD_INT 1
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: LD_INT 2
14390: PUSH
14391: LD_INT 25
14393: PUSH
14394: LD_INT 1
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: LD_INT 25
14403: PUSH
14404: LD_INT 2
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PUSH
14411: LD_INT 25
14413: PUSH
14414: LD_INT 3
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_INT 25
14423: PUSH
14424: LD_INT 4
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: LIST
14442: PPUSH
14443: CALL_OW 69
14447: PUSH
14448: LD_EXP 1
14452: PUSH
14453: LD_EXP 9
14457: PUSH
14458: LD_EXP 8
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: LIST
14467: DIFF
14468: PPUSH
14469: LD_STRING DR2-Sol1-1
14471: PPUSH
14472: LD_STRING DR2-Sol1-11
14474: PPUSH
14475: CALL 6031 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14479: LD_EXP 1
14483: PPUSH
14484: LD_STRING DR2-JMM-2
14486: PPUSH
14487: CALL_OW 88
// DialogueOff ;
14491: CALL_OW 7
// end ;
14495: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14496: LD_INT 22
14498: PUSH
14499: LD_INT 1
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 30
14508: PUSH
14509: LD_INT 36
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PPUSH
14520: CALL_OW 69
14524: PUSH
14525: LD_INT 0
14527: EQUAL
14528: PUSH
14529: LD_INT 22
14531: PUSH
14532: LD_INT 1
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: LD_INT 21
14541: PUSH
14542: LD_INT 2
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PUSH
14549: LD_INT 33
14551: PUSH
14552: LD_INT 2
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: LIST
14563: PPUSH
14564: CALL_OW 69
14568: PUSH
14569: LD_INT 0
14571: GREATER
14572: AND
14573: PUSH
14574: LD_EXP 23
14578: PUSH
14579: LD_INT 0
14581: EQUAL
14582: AND
14583: PUSH
14584: LD_INT 1
14586: PPUSH
14587: CALL_OW 463
14591: NOT
14592: AND
14593: IFFALSE 14719
14595: GO 14597
14597: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14598: LD_INT 22
14600: PUSH
14601: LD_INT 1
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 21
14610: PUSH
14611: LD_INT 1
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: LD_INT 25
14620: PUSH
14621: LD_INT 3
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: LIST
14632: PPUSH
14633: CALL_OW 69
14637: PUSH
14638: LD_EXP 1
14642: PUSH
14643: LD_EXP 6
14647: PUSH
14648: LD_EXP 7
14652: PUSH
14653: LD_EXP 9
14657: PUSH
14658: LD_EXP 15
14662: PUSH
14663: LD_EXP 3
14667: PUSH
14668: LD_EXP 4
14672: PUSH
14673: LD_EXP 2
14677: PUSH
14678: LD_EXP 5
14682: PUSH
14683: LD_EXP 8
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: DIFF
14700: PPUSH
14701: LD_STRING D3a-Mech1-1
14703: PPUSH
14704: LD_STRING D3a-Mech1-1
14706: PPUSH
14707: CALL 6031 0 3
// firstTower = 2 ;
14711: LD_ADDR_EXP 23
14715: PUSH
14716: LD_INT 2
14718: ST_TO_ADDR
// end ;
14719: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14720: LD_INT 22
14722: PUSH
14723: LD_INT 3
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: LD_INT 21
14732: PUSH
14733: LD_INT 3
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PPUSH
14744: CALL_OW 69
14748: PUSH
14749: LD_INT 0
14751: EQUAL
14752: IFFALSE 14867
14754: GO 14756
14756: DISABLE
14757: LD_INT 0
14759: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14760: LD_ADDR_VAR 0 1
14764: PUSH
14765: LD_INT 22
14767: PUSH
14768: LD_INT 1
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 21
14777: PUSH
14778: LD_INT 1
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 2
14787: PUSH
14788: LD_INT 25
14790: PUSH
14791: LD_INT 1
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 25
14800: PUSH
14801: LD_INT 2
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 25
14810: PUSH
14811: LD_INT 3
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 25
14820: PUSH
14821: LD_INT 4
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 69
14844: PUSH
14845: FOR_IN
14846: IFFALSE 14865
// AddExperience ( i , 1 , 10000 ) ;
14848: LD_VAR 0 1
14852: PPUSH
14853: LD_INT 1
14855: PPUSH
14856: LD_INT 10000
14858: PPUSH
14859: CALL_OW 492
14863: GO 14845
14865: POP
14866: POP
// end ;
14867: PPOPN 1
14869: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14870: LD_INT 22
14872: PUSH
14873: LD_INT 1
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: LD_INT 30
14882: PUSH
14883: LD_INT 36
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PPUSH
14894: CALL_OW 69
14898: PUSH
14899: LD_INT 0
14901: GREATER
14902: PUSH
14903: LD_INT 22
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: LD_INT 21
14915: PUSH
14916: LD_INT 2
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 33
14925: PUSH
14926: LD_INT 2
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: LIST
14937: PPUSH
14938: CALL_OW 69
14942: PUSH
14943: LD_INT 0
14945: GREATER
14946: AND
14947: PUSH
14948: CALL 15540 0 0
14952: AND
14953: PUSH
14954: LD_INT 1
14956: PPUSH
14957: CALL_OW 463
14961: NOT
14962: AND
14963: IFFALSE 15537
14965: GO 14967
14967: DISABLE
14968: LD_INT 0
14970: PPUSH
14971: PPUSH
14972: PPUSH
14973: PPUSH
14974: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14975: LD_ADDR_VAR 0 3
14979: PUSH
14980: LD_INT 22
14982: PUSH
14983: LD_INT 1
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 30
14992: PUSH
14993: LD_INT 36
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PPUSH
15004: CALL_OW 69
15008: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
15009: LD_ADDR_VAR 0 4
15013: PUSH
15014: LD_INT 22
15016: PUSH
15017: LD_INT 1
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 21
15026: PUSH
15027: LD_INT 2
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 33
15036: PUSH
15037: LD_INT 2
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: LIST
15048: PPUSH
15049: CALL_OW 69
15053: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15054: LD_ADDR_VAR 0 5
15058: PUSH
15059: EMPTY
15060: ST_TO_ADDR
// for i in tmpControlTowers do
15061: LD_ADDR_VAR 0 1
15065: PUSH
15066: LD_VAR 0 3
15070: PUSH
15071: FOR_IN
15072: IFFALSE 15535
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15074: LD_EXP 1
15078: PPUSH
15079: CALL_OW 310
15083: PUSH
15084: LD_VAR 0 1
15088: EQUAL
15089: PUSH
15090: LD_EXP 1
15094: PPUSH
15095: CALL_OW 257
15099: PUSH
15100: LD_INT 3
15102: EQUAL
15103: AND
15104: IFFALSE 15234
// begin InGameOn ;
15106: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15110: LD_VAR 0 4
15114: PUSH
15115: LD_INT 1
15117: ARRAY
15118: PPUSH
15119: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15123: LD_EXP 1
15127: PPUSH
15128: LD_STRING D4a-JMM-1
15130: PPUSH
15131: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15135: LD_VAR 0 4
15139: PUSH
15140: LD_INT 1
15142: ARRAY
15143: PPUSH
15144: LD_EXP 1
15148: PPUSH
15149: CALL_OW 53
// wait ( 0 0$1 ) ;
15153: LD_INT 35
15155: PPUSH
15156: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15160: LD_VAR 0 4
15164: PUSH
15165: LD_INT 1
15167: ARRAY
15168: PPUSH
15169: LD_VAR 0 4
15173: PUSH
15174: LD_INT 1
15176: ARRAY
15177: PPUSH
15178: CALL_OW 250
15182: PUSH
15183: LD_INT 3
15185: PLUS
15186: PPUSH
15187: LD_VAR 0 4
15191: PUSH
15192: LD_INT 1
15194: ARRAY
15195: PPUSH
15196: CALL_OW 251
15200: PUSH
15201: LD_INT 2
15203: MINUS
15204: PPUSH
15205: CALL_OW 111
// wait ( 0 0$2 ) ;
15209: LD_INT 70
15211: PPUSH
15212: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15216: LD_EXP 1
15220: PPUSH
15221: LD_STRING D4b-JMM-1
15223: PPUSH
15224: CALL_OW 88
// InGameOff ;
15228: CALL_OW 9
// end else
15232: GO 15533
// begin InGameOn ;
15234: CALL_OW 8
// for j in UnitsInside ( i ) do
15238: LD_ADDR_VAR 0 2
15242: PUSH
15243: LD_VAR 0 1
15247: PPUSH
15248: CALL_OW 313
15252: PUSH
15253: FOR_IN
15254: IFFALSE 15289
// if GetClass ( j ) = 3 then
15256: LD_VAR 0 2
15260: PPUSH
15261: CALL_OW 257
15265: PUSH
15266: LD_INT 3
15268: EQUAL
15269: IFFALSE 15287
// tmpMechanicInside = tmpMechanicInside ^ j ;
15271: LD_ADDR_VAR 0 5
15275: PUSH
15276: LD_VAR 0 5
15280: PUSH
15281: LD_VAR 0 2
15285: ADD
15286: ST_TO_ADDR
15287: GO 15253
15289: POP
15290: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15291: LD_VAR 0 5
15295: PUSH
15296: LD_INT 1
15298: ARRAY
15299: PPUSH
15300: CALL_OW 258
15304: PUSH
15305: LD_INT 1
15307: EQUAL
15308: IFFALSE 15326
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15310: LD_VAR 0 5
15314: PUSH
15315: LD_INT 1
15317: ARRAY
15318: PPUSH
15319: LD_STRING D4a-Mech1-1
15321: PPUSH
15322: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15326: LD_VAR 0 5
15330: PUSH
15331: LD_INT 1
15333: ARRAY
15334: PPUSH
15335: CALL_OW 258
15339: PUSH
15340: LD_INT 2
15342: EQUAL
15343: IFFALSE 15361
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15345: LD_VAR 0 5
15349: PUSH
15350: LD_INT 1
15352: ARRAY
15353: PPUSH
15354: LD_STRING D4a-FMech1-1
15356: PPUSH
15357: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15361: LD_VAR 0 4
15365: PUSH
15366: LD_INT 1
15368: ARRAY
15369: PPUSH
15370: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15374: LD_VAR 0 4
15378: PUSH
15379: LD_INT 1
15381: ARRAY
15382: PPUSH
15383: LD_VAR 0 5
15387: PUSH
15388: LD_INT 1
15390: ARRAY
15391: PPUSH
15392: CALL_OW 53
// wait ( 0 0$1 ) ;
15396: LD_INT 35
15398: PPUSH
15399: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15403: LD_VAR 0 4
15407: PUSH
15408: LD_INT 1
15410: ARRAY
15411: PPUSH
15412: LD_VAR 0 4
15416: PUSH
15417: LD_INT 1
15419: ARRAY
15420: PPUSH
15421: CALL_OW 250
15425: PUSH
15426: LD_INT 3
15428: PLUS
15429: PPUSH
15430: LD_VAR 0 4
15434: PUSH
15435: LD_INT 1
15437: ARRAY
15438: PPUSH
15439: CALL_OW 251
15443: PUSH
15444: LD_INT 2
15446: MINUS
15447: PPUSH
15448: CALL_OW 111
// wait ( 0 0$2 ) ;
15452: LD_INT 70
15454: PPUSH
15455: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15459: LD_VAR 0 5
15463: PUSH
15464: LD_INT 1
15466: ARRAY
15467: PPUSH
15468: CALL_OW 258
15472: PUSH
15473: LD_INT 1
15475: EQUAL
15476: IFFALSE 15494
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15478: LD_VAR 0 5
15482: PUSH
15483: LD_INT 1
15485: ARRAY
15486: PPUSH
15487: LD_STRING D4b-Mech1-1
15489: PPUSH
15490: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15494: LD_VAR 0 5
15498: PUSH
15499: LD_INT 1
15501: ARRAY
15502: PPUSH
15503: CALL_OW 258
15507: PUSH
15508: LD_INT 2
15510: EQUAL
15511: IFFALSE 15529
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15513: LD_VAR 0 5
15517: PUSH
15518: LD_INT 1
15520: ARRAY
15521: PPUSH
15522: LD_STRING D4b-FMech1-1
15524: PPUSH
15525: CALL_OW 88
// InGameOff ;
15529: CALL_OW 9
// end ; end ;
15533: GO 15071
15535: POP
15536: POP
// end ;
15537: PPOPN 5
15539: END
// function CheckMehInside ; var i , j ; begin
15540: LD_INT 0
15542: PPUSH
15543: PPUSH
15544: PPUSH
// result = false ;
15545: LD_ADDR_VAR 0 1
15549: PUSH
15550: LD_INT 0
15552: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15553: LD_ADDR_VAR 0 2
15557: PUSH
15558: LD_INT 22
15560: PUSH
15561: LD_INT 1
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 30
15570: PUSH
15571: LD_INT 36
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PPUSH
15582: CALL_OW 69
15586: PUSH
15587: FOR_IN
15588: IFFALSE 15639
// begin for j in UnitsInside ( i ) do
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: LD_VAR 0 2
15599: PPUSH
15600: CALL_OW 313
15604: PUSH
15605: FOR_IN
15606: IFFALSE 15635
// begin if GetClass ( j ) = 3 then
15608: LD_VAR 0 3
15612: PPUSH
15613: CALL_OW 257
15617: PUSH
15618: LD_INT 3
15620: EQUAL
15621: IFFALSE 15633
// begin result = true ;
15623: LD_ADDR_VAR 0 1
15627: PUSH
15628: LD_INT 1
15630: ST_TO_ADDR
// break ;
15631: GO 15635
// end ; end ;
15633: GO 15605
15635: POP
15636: POP
// end ;
15637: GO 15587
15639: POP
15640: POP
// end ;
15641: LD_VAR 0 1
15645: RET
// every 25 25$0 do
15646: GO 15648
15648: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15649: LD_INT 35
15651: PPUSH
15652: CALL_OW 67
// until not InBattle ( 1 ) ;
15656: LD_INT 1
15658: PPUSH
15659: CALL_OW 463
15663: NOT
15664: IFFALSE 15649
// PrepareKurt ;
15666: CALL 19244 0 0
// end ;
15670: END
// every 35 35$0 do
15671: GO 15673
15673: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15674: LD_INT 35
15676: PPUSH
15677: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
15681: LD_INT 1
15683: PPUSH
15684: CALL_OW 463
15688: NOT
15689: PUSH
15690: LD_INT 32
15692: PPUSH
15693: LD_INT 81
15695: PUSH
15696: LD_INT 1
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PPUSH
15703: CALL_OW 70
15707: NOT
15708: AND
15709: IFFALSE 15674
// PrepareJoan ;
15711: CALL 3016 0 0
// wait ( 1 1$0 ) ;
15715: LD_INT 2100
15717: PPUSH
15718: CALL_OW 67
// if IsOK ( Lisa ) then
15722: LD_EXP 2
15726: PPUSH
15727: CALL_OW 302
15731: IFFALSE 15861
// begin DialogueOn ;
15733: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15737: LD_EXP 2
15741: PPUSH
15742: LD_STRING D7-Lisa-1
15744: PPUSH
15745: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15749: LD_EXP 1
15753: PPUSH
15754: LD_STRING D7-JMM-1
15756: PPUSH
15757: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15761: LD_EXP 2
15765: PPUSH
15766: LD_STRING D7-Lisa-2
15768: PPUSH
15769: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15773: LD_EXP 1
15777: PPUSH
15778: LD_STRING D7-JMM-2
15780: PPUSH
15781: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15785: LD_EXP 2
15789: PPUSH
15790: LD_STRING D7-Lisa-3
15792: PPUSH
15793: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15797: LD_EXP 1
15801: PPUSH
15802: LD_STRING D7-JMM-3
15804: PPUSH
15805: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15809: LD_EXP 2
15813: PPUSH
15814: LD_STRING D7-Lisa-4
15816: PPUSH
15817: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15821: LD_EXP 1
15825: PPUSH
15826: LD_STRING D7-JMM-4
15828: PPUSH
15829: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15833: LD_EXP 1
15837: PPUSH
15838: LD_STRING D7-JMM-4a
15840: PPUSH
15841: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
15845: LD_EXP 2
15849: PPUSH
15850: LD_STRING D7-Lisa-5
15852: PPUSH
15853: CALL_OW 88
// DialogueOff ;
15857: CALL_OW 7
// end ; end ;
15861: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
15862: LD_EXP 13
15866: PUSH
15867: LD_INT 22
15869: PUSH
15870: LD_INT 1
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: LD_INT 91
15879: PUSH
15880: LD_EXP 13
15884: PUSH
15885: LD_INT 10
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 2
15895: PUSH
15896: LD_INT 25
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 25
15908: PUSH
15909: LD_INT 2
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 25
15918: PUSH
15919: LD_INT 3
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: LD_INT 25
15928: PUSH
15929: LD_INT 4
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: LIST
15947: PPUSH
15948: CALL_OW 69
15952: PUSH
15953: LD_INT 1
15955: GREATER
15956: AND
15957: IFFALSE 15974
15959: GO 15961
15961: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
15962: LD_EXP 13
15966: PPUSH
15967: LD_STRING D5-Sol1-1
15969: PPUSH
15970: CALL_OW 88
// end ;
15974: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
15975: LD_INT 22
15977: PUSH
15978: LD_INT 1
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 33
15987: PUSH
15988: LD_INT 2
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PPUSH
15999: CALL_OW 69
16003: PUSH
16004: LD_INT 2
16006: GREATEREQUAL
16007: IFFALSE 16027
16009: GO 16011
16011: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
16012: LD_STRING MRa
16014: PPUSH
16015: CALL_OW 337
// remoteVehiclesBuild = 1 ;
16019: LD_ADDR_EXP 28
16023: PUSH
16024: LD_INT 1
16026: ST_TO_ADDR
// end ;
16027: END
// every 0 0$10 do var i , last ;
16028: GO 16030
16030: DISABLE
16031: LD_INT 0
16033: PPUSH
16034: PPUSH
// begin last := 7 ;
16035: LD_ADDR_VAR 0 2
16039: PUSH
16040: LD_INT 7
16042: ST_TO_ADDR
// for i = 1 to last do
16043: LD_ADDR_VAR 0 1
16047: PUSH
16048: DOUBLE
16049: LD_INT 1
16051: DEC
16052: ST_TO_ADDR
16053: LD_VAR 0 2
16057: PUSH
16058: FOR_TO
16059: IFFALSE 16087
// begin wait ( rand ( 3 3$00 , 7 7$00 ) ) ;
16061: LD_INT 6300
16063: PPUSH
16064: LD_INT 14700
16066: PPUSH
16067: CALL_OW 12
16071: PPUSH
16072: CALL_OW 67
// PrepareRandoms ( i ) ;
16076: LD_VAR 0 1
16080: PPUSH
16081: CALL 4052 0 1
// end ;
16085: GO 16058
16087: POP
16088: POP
// end ;
16089: PPOPN 2
16091: END
// every 5 5$20 do
16092: GO 16094
16094: DISABLE
// begin DialogueOn ;
16095: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16099: LD_EXP 10
16103: PPUSH
16104: LD_STRING D12a-Sci-1
16106: PPUSH
16107: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16111: LD_EXP 1
16115: PPUSH
16116: LD_STRING D12a-JMM-1
16118: PPUSH
16119: CALL_OW 88
// DialogueOff ;
16123: CALL_OW 7
// cratesStatus = 1 ;
16127: LD_ADDR_EXP 38
16131: PUSH
16132: LD_INT 1
16134: ST_TO_ADDR
// end ;
16135: END
// every 13 13$0 do
16136: GO 16138
16138: DISABLE
// begin DialogueOn ;
16139: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16143: LD_EXP 10
16147: PPUSH
16148: LD_STRING D12b-Sci-1
16150: PPUSH
16151: CALL_OW 94
// DialogueOff ;
16155: CALL_OW 7
// cratesStatus = 2 ;
16159: LD_ADDR_EXP 38
16163: PUSH
16164: LD_INT 2
16166: ST_TO_ADDR
// end ;
16167: END
// every 32 32$0 do
16168: GO 16170
16170: DISABLE
// begin DialogueOn ;
16171: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16175: LD_EXP 10
16179: PPUSH
16180: LD_STRING D12c-Sci-1
16182: PPUSH
16183: CALL_OW 94
// DialogueOff ;
16187: CALL_OW 7
// wait ( 3 3$0 ) ;
16191: LD_INT 6300
16193: PPUSH
16194: CALL_OW 67
// DialogueOn ;
16198: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16202: LD_EXP 10
16206: PPUSH
16207: LD_STRING D12d-Sci-1
16209: PPUSH
16210: CALL_OW 94
// DialogueOff ;
16214: CALL_OW 7
// cratesStatus = 1 ;
16218: LD_ADDR_EXP 38
16222: PUSH
16223: LD_INT 1
16225: ST_TO_ADDR
// end ;
16226: END
// every 42 42$0 do
16227: GO 16229
16229: DISABLE
// begin DialogueOn ;
16230: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16234: LD_EXP 10
16238: PPUSH
16239: LD_STRING D12e-Sci-1
16241: PPUSH
16242: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16246: LD_EXP 1
16250: PPUSH
16251: LD_STRING D12e-JMM-1
16253: PPUSH
16254: CALL_OW 88
// DialogueOff ;
16258: CALL_OW 7
// cratesStatus = 2 ;
16262: LD_ADDR_EXP 38
16266: PUSH
16267: LD_INT 2
16269: ST_TO_ADDR
// end ;
16270: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16271: LD_INT 22
16273: PUSH
16274: LD_INT 6
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 21
16283: PUSH
16284: LD_INT 2
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 34
16293: PUSH
16294: LD_INT 51
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: LIST
16305: PPUSH
16306: CALL_OW 69
16310: PUSH
16311: LD_INT 0
16313: GREATER
16314: IFFALSE 16397
16316: GO 16318
16318: DISABLE
16319: LD_INT 0
16321: PPUSH
// begin enable ;
16322: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16323: LD_ADDR_VAR 0 1
16327: PUSH
16328: LD_INT 22
16330: PUSH
16331: LD_INT 6
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: LD_INT 21
16343: PUSH
16344: LD_INT 1
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 21
16353: PUSH
16354: LD_INT 2
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: LIST
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PPUSH
16370: CALL_OW 69
16374: PUSH
16375: FOR_IN
16376: IFFALSE 16395
// ComAgressiveMove ( i , 138 , 168 ) ;
16378: LD_VAR 0 1
16382: PPUSH
16383: LD_INT 138
16385: PPUSH
16386: LD_INT 168
16388: PPUSH
16389: CALL_OW 114
16393: GO 16375
16395: POP
16396: POP
// end ;
16397: PPOPN 1
16399: END
// every 0 0$1 do var i ;
16400: GO 16402
16402: DISABLE
16403: LD_INT 0
16405: PPUSH
// begin enable ;
16406: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16407: LD_ADDR_VAR 0 1
16411: PUSH
16412: LD_INT 4
16414: PPUSH
16415: LD_INT 2
16417: PUSH
16418: LD_INT 22
16420: PUSH
16421: LD_INT 3
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: LD_INT 22
16430: PUSH
16431: LD_INT 6
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: LIST
16442: PUSH
16443: EMPTY
16444: LIST
16445: PPUSH
16446: CALL_OW 70
16450: PUSH
16451: FOR_IN
16452: IFFALSE 16516
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16454: LD_INT 4
16456: PPUSH
16457: LD_INT 22
16459: PUSH
16460: LD_INT 6
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 34
16469: PUSH
16470: LD_INT 51
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PPUSH
16481: CALL_OW 70
16485: PUSH
16486: LD_INT 0
16488: GREATER
16489: IFFALSE 16505
// sendedConvoys = sendedConvoys + 1 ;
16491: LD_ADDR_EXP 39
16495: PUSH
16496: LD_EXP 39
16500: PUSH
16501: LD_INT 1
16503: PLUS
16504: ST_TO_ADDR
// RemoveUnit ( i ) ;
16505: LD_VAR 0 1
16509: PPUSH
16510: CALL_OW 64
// end ;
16514: GO 16451
16516: POP
16517: POP
// end ; end_of_file
16518: PPOPN 1
16520: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16521: LD_VAR 0 1
16525: PUSH
16526: LD_INT 1
16528: EQUAL
16529: PUSH
16530: LD_VAR 0 2
16534: PUSH
16535: LD_INT 3
16537: EQUAL
16538: AND
16539: IFFALSE 16549
// contactWithRussian = 1 ;
16541: LD_ADDR_EXP 22
16545: PUSH
16546: LD_INT 1
16548: ST_TO_ADDR
// end ;
16549: PPOPN 2
16551: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16552: LD_VAR 0 1
16556: PPUSH
16557: CALL_OW 266
16561: PUSH
16562: LD_INT 36
16564: EQUAL
16565: PUSH
16566: LD_VAR 0 1
16570: PPUSH
16571: CALL_OW 255
16575: PUSH
16576: LD_INT 1
16578: EQUAL
16579: AND
16580: PUSH
16581: LD_INT 22
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 21
16593: PUSH
16594: LD_INT 2
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: LD_INT 33
16603: PUSH
16604: LD_INT 2
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: LIST
16615: PPUSH
16616: CALL_OW 69
16620: PUSH
16621: LD_INT 0
16623: EQUAL
16624: AND
16625: PUSH
16626: LD_EXP 23
16630: PUSH
16631: LD_INT 0
16633: EQUAL
16634: AND
16635: IFFALSE 16715
// begin firstTower = 1 ;
16637: LD_ADDR_EXP 23
16641: PUSH
16642: LD_INT 1
16644: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16645: LD_INT 22
16647: PUSH
16648: LD_INT 1
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 21
16657: PUSH
16658: LD_INT 1
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 25
16667: PUSH
16668: LD_INT 3
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 26
16677: PUSH
16678: LD_INT 1
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: PPUSH
16691: CALL_OW 69
16695: PUSH
16696: LD_EXP 1
16700: PUSH
16701: EMPTY
16702: LIST
16703: DIFF
16704: PPUSH
16705: LD_STRING D3b-Mech1-1
16707: PPUSH
16708: LD_STRING D3b-Mech1-1
16710: PPUSH
16711: CALL 6031 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16715: LD_VAR 0 1
16719: PPUSH
16720: CALL_OW 266
16724: PUSH
16725: LD_INT 0
16727: EQUAL
16728: PUSH
16729: LD_VAR 0 1
16733: PPUSH
16734: CALL_OW 255
16738: PUSH
16739: LD_INT 1
16741: EQUAL
16742: AND
16743: IFFALSE 16757
// SetBName ( building , theta ) ;
16745: LD_VAR 0 1
16749: PPUSH
16750: LD_STRING theta
16752: PPUSH
16753: CALL_OW 500
// if GetSide ( building ) = 3 then
16757: LD_VAR 0 1
16761: PPUSH
16762: CALL_OW 255
16766: PUSH
16767: LD_INT 3
16769: EQUAL
16770: IFFALSE 16844
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16772: LD_ADDR_EXP 31
16776: PUSH
16777: LD_EXP 31
16781: PPUSH
16782: LD_INT 1
16784: PPUSH
16785: CALL_OW 3
16789: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16790: LD_ADDR_EXP 31
16794: PUSH
16795: LD_EXP 31
16799: PPUSH
16800: LD_INT 1
16802: PPUSH
16803: CALL_OW 3
16807: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16808: LD_ADDR_EXP 31
16812: PUSH
16813: LD_EXP 31
16817: PPUSH
16818: LD_INT 1
16820: PPUSH
16821: CALL_OW 3
16825: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16826: LD_ADDR_EXP 31
16830: PUSH
16831: LD_EXP 31
16835: PPUSH
16836: LD_INT 1
16838: PPUSH
16839: CALL_OW 3
16843: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
16844: LD_VAR 0 1
16848: PPUSH
16849: CALL_OW 255
16853: PUSH
16854: LD_INT 3
16856: EQUAL
16857: PUSH
16858: LD_VAR 0 1
16862: PPUSH
16863: CALL_OW 266
16867: PUSH
16868: LD_INT 0
16870: EQUAL
16871: PUSH
16872: LD_VAR 0 1
16876: PPUSH
16877: CALL_OW 266
16881: PUSH
16882: LD_INT 2
16884: EQUAL
16885: OR
16886: PUSH
16887: LD_VAR 0 1
16891: PPUSH
16892: CALL_OW 266
16896: PUSH
16897: LD_INT 4
16899: EQUAL
16900: OR
16901: PUSH
16902: EMPTY
16903: LIST
16904: AND
16905: IFFALSE 16916
// ComUpgrade ( building ) ;
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
16916: LD_VAR 0 1
16920: PPUSH
16921: CALL_OW 255
16925: PUSH
16926: LD_INT 3
16928: EQUAL
16929: PUSH
16930: LD_VAR 0 1
16934: PPUSH
16935: CALL_OW 266
16939: PUSH
16940: LD_INT 32
16942: EQUAL
16943: AND
16944: IFFALSE 16985
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
16946: LD_VAR 0 1
16950: PPUSH
16951: LD_INT 42
16953: PUSH
16954: LD_INT 43
16956: PUSH
16957: LD_INT 44
16959: PUSH
16960: LD_INT 46
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 1
16971: PPUSH
16972: LD_INT 4
16974: PPUSH
16975: CALL_OW 12
16979: ARRAY
16980: PPUSH
16981: CALL_OW 208
// end ; end ;
16985: PPOPN 1
16987: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
16988: LD_VAR 0 1
16992: PUSH
16993: LD_INT 22
16995: PUSH
16996: LD_INT 1
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 21
17005: PUSH
17006: LD_INT 1
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 23
17015: PUSH
17016: LD_INT 1
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: LIST
17027: PPUSH
17028: CALL_OW 69
17032: IN
17033: IFFALSE 17049
// killCounter := killCounter + 1 ;
17035: LD_ADDR_EXP 47
17039: PUSH
17040: LD_EXP 47
17044: PUSH
17045: LD_INT 1
17047: PLUS
17048: ST_TO_ADDR
// if unit = JMM then
17049: LD_VAR 0 1
17053: PUSH
17054: LD_EXP 1
17058: EQUAL
17059: IFFALSE 17068
// YouLost ( JMM ) ;
17061: LD_STRING JMM
17063: PPUSH
17064: CALL_OW 104
// if unit = Joan then
17068: LD_VAR 0 1
17072: PUSH
17073: LD_EXP 15
17077: EQUAL
17078: IFFALSE 17088
// JoanStatus = 0 ;
17080: LD_ADDR_EXP 16
17084: PUSH
17085: LD_INT 0
17087: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17088: LD_VAR 0 1
17092: PPUSH
17093: CALL_OW 255
17097: PUSH
17098: LD_INT 1
17100: EQUAL
17101: PUSH
17102: LD_VAR 0 1
17106: PPUSH
17107: CALL_OW 247
17111: PUSH
17112: LD_INT 1
17114: EQUAL
17115: AND
17116: IFFALSE 17192
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17118: LD_VAR 0 1
17122: PPUSH
17123: CALL_OW 257
17127: PUSH
17128: LD_INT 1
17130: EQUAL
17131: PUSH
17132: LD_VAR 0 1
17136: PPUSH
17137: CALL_OW 257
17141: PUSH
17142: LD_INT 2
17144: EQUAL
17145: OR
17146: PUSH
17147: LD_VAR 0 1
17151: PPUSH
17152: CALL_OW 257
17156: PUSH
17157: LD_INT 3
17159: EQUAL
17160: OR
17161: PUSH
17162: LD_VAR 0 1
17166: PPUSH
17167: CALL_OW 257
17171: PUSH
17172: LD_INT 4
17174: EQUAL
17175: OR
17176: IFFALSE 17192
// unitLost = unitLost + 1 ;
17178: LD_ADDR_EXP 30
17182: PUSH
17183: LD_EXP 30
17187: PUSH
17188: LD_INT 1
17190: PLUS
17191: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17192: LD_VAR 0 1
17196: PPUSH
17197: CALL_OW 255
17201: PUSH
17202: LD_INT 3
17204: EQUAL
17205: PUSH
17206: LD_VAR 0 1
17210: PPUSH
17211: CALL_OW 247
17215: PUSH
17216: LD_INT 3
17218: EQUAL
17219: AND
17220: IFFALSE 17912
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 266
17231: PUSH
17232: LD_INT 31
17234: EQUAL
17235: PUSH
17236: LD_VAR 0 1
17240: PPUSH
17241: CALL_OW 266
17245: PUSH
17246: LD_INT 32
17248: EQUAL
17249: OR
17250: PUSH
17251: LD_VAR 0 1
17255: PPUSH
17256: CALL_OW 266
17260: PUSH
17261: LD_INT 36
17263: EQUAL
17264: OR
17265: PUSH
17266: LD_VAR 0 1
17270: PPUSH
17271: CALL_OW 266
17275: PUSH
17276: LD_INT 0
17278: EQUAL
17279: OR
17280: PUSH
17281: LD_VAR 0 1
17285: PPUSH
17286: CALL_OW 266
17290: PUSH
17291: LD_INT 24
17293: EQUAL
17294: OR
17295: PUSH
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL_OW 266
17305: PUSH
17306: LD_INT 17
17308: EQUAL
17309: OR
17310: PUSH
17311: LD_VAR 0 1
17315: PPUSH
17316: CALL_OW 266
17320: PUSH
17321: LD_INT 25
17323: EQUAL
17324: OR
17325: PUSH
17326: LD_VAR 0 1
17330: PPUSH
17331: CALL_OW 266
17335: PUSH
17336: LD_INT 19
17338: EQUAL
17339: OR
17340: PUSH
17341: LD_VAR 0 1
17345: PPUSH
17346: CALL_OW 266
17350: PUSH
17351: LD_INT 20
17353: EQUAL
17354: OR
17355: PUSH
17356: LD_VAR 0 1
17360: PPUSH
17361: CALL_OW 266
17365: PUSH
17366: LD_INT 18
17368: EQUAL
17369: OR
17370: PUSH
17371: LD_VAR 0 1
17375: PPUSH
17376: CALL_OW 266
17380: PUSH
17381: LD_INT 21
17383: EQUAL
17384: OR
17385: PUSH
17386: LD_VAR 0 1
17390: PPUSH
17391: CALL_OW 266
17395: PUSH
17396: LD_INT 23
17398: EQUAL
17399: OR
17400: PUSH
17401: LD_VAR 0 1
17405: PPUSH
17406: CALL_OW 266
17410: PUSH
17411: LD_INT 16
17413: EQUAL
17414: OR
17415: PUSH
17416: LD_VAR 0 1
17420: PPUSH
17421: CALL_OW 266
17425: PUSH
17426: LD_INT 6
17428: EQUAL
17429: OR
17430: PUSH
17431: LD_VAR 0 1
17435: PPUSH
17436: CALL_OW 266
17440: PUSH
17441: LD_INT 29
17443: EQUAL
17444: OR
17445: PUSH
17446: LD_VAR 0 1
17450: PPUSH
17451: CALL_OW 266
17455: PUSH
17456: LD_INT 26
17458: EQUAL
17459: OR
17460: PUSH
17461: LD_VAR 0 1
17465: PPUSH
17466: CALL_OW 266
17470: PUSH
17471: LD_INT 30
17473: EQUAL
17474: OR
17475: PUSH
17476: LD_VAR 0 1
17480: PPUSH
17481: CALL_OW 266
17485: PUSH
17486: LD_INT 28
17488: EQUAL
17489: OR
17490: PUSH
17491: LD_VAR 0 1
17495: PPUSH
17496: CALL_OW 266
17500: PUSH
17501: LD_INT 27
17503: EQUAL
17504: OR
17505: PUSH
17506: LD_VAR 0 1
17510: PPUSH
17511: CALL_OW 266
17515: PUSH
17516: LD_INT 33
17518: EQUAL
17519: OR
17520: PUSH
17521: LD_VAR 0 1
17525: PPUSH
17526: CALL_OW 266
17530: PUSH
17531: LD_INT 2
17533: EQUAL
17534: OR
17535: PUSH
17536: LD_VAR 0 1
17540: PPUSH
17541: CALL_OW 266
17545: PUSH
17546: LD_INT 4
17548: EQUAL
17549: OR
17550: IFFALSE 17636
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17552: LD_ADDR_EXP 31
17556: PUSH
17557: LD_EXP 31
17561: PUSH
17562: LD_VAR 0 1
17566: PPUSH
17567: CALL_OW 266
17571: ADD
17572: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17573: LD_ADDR_EXP 31
17577: PUSH
17578: LD_EXP 31
17582: PUSH
17583: LD_VAR 0 1
17587: PPUSH
17588: CALL_OW 250
17592: ADD
17593: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17594: LD_ADDR_EXP 31
17598: PUSH
17599: LD_EXP 31
17603: PUSH
17604: LD_VAR 0 1
17608: PPUSH
17609: CALL_OW 251
17613: ADD
17614: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17615: LD_ADDR_EXP 31
17619: PUSH
17620: LD_EXP 31
17624: PUSH
17625: LD_VAR 0 1
17629: PPUSH
17630: CALL_OW 254
17634: ADD
17635: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17636: LD_VAR 0 1
17640: PPUSH
17641: CALL_OW 266
17645: PUSH
17646: LD_INT 1
17648: EQUAL
17649: IFFALSE 17728
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17651: LD_ADDR_EXP 31
17655: PUSH
17656: LD_EXP 31
17660: PUSH
17661: LD_INT 0
17663: ADD
17664: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17665: LD_ADDR_EXP 31
17669: PUSH
17670: LD_EXP 31
17674: PUSH
17675: LD_VAR 0 1
17679: PPUSH
17680: CALL_OW 250
17684: ADD
17685: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17686: LD_ADDR_EXP 31
17690: PUSH
17691: LD_EXP 31
17695: PUSH
17696: LD_VAR 0 1
17700: PPUSH
17701: CALL_OW 251
17705: ADD
17706: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17707: LD_ADDR_EXP 31
17711: PUSH
17712: LD_EXP 31
17716: PUSH
17717: LD_VAR 0 1
17721: PPUSH
17722: CALL_OW 254
17726: ADD
17727: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17728: LD_VAR 0 1
17732: PPUSH
17733: CALL_OW 266
17737: PUSH
17738: LD_INT 3
17740: EQUAL
17741: IFFALSE 17820
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17743: LD_ADDR_EXP 31
17747: PUSH
17748: LD_EXP 31
17752: PUSH
17753: LD_INT 2
17755: ADD
17756: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17757: LD_ADDR_EXP 31
17761: PUSH
17762: LD_EXP 31
17766: PUSH
17767: LD_VAR 0 1
17771: PPUSH
17772: CALL_OW 250
17776: ADD
17777: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17778: LD_ADDR_EXP 31
17782: PUSH
17783: LD_EXP 31
17787: PUSH
17788: LD_VAR 0 1
17792: PPUSH
17793: CALL_OW 251
17797: ADD
17798: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17799: LD_ADDR_EXP 31
17803: PUSH
17804: LD_EXP 31
17808: PUSH
17809: LD_VAR 0 1
17813: PPUSH
17814: CALL_OW 254
17818: ADD
17819: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17820: LD_VAR 0 1
17824: PPUSH
17825: CALL_OW 266
17829: PUSH
17830: LD_INT 5
17832: EQUAL
17833: IFFALSE 17912
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17835: LD_ADDR_EXP 31
17839: PUSH
17840: LD_EXP 31
17844: PUSH
17845: LD_INT 4
17847: ADD
17848: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17849: LD_ADDR_EXP 31
17853: PUSH
17854: LD_EXP 31
17858: PUSH
17859: LD_VAR 0 1
17863: PPUSH
17864: CALL_OW 250
17868: ADD
17869: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17870: LD_ADDR_EXP 31
17874: PUSH
17875: LD_EXP 31
17879: PUSH
17880: LD_VAR 0 1
17884: PPUSH
17885: CALL_OW 251
17889: ADD
17890: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17891: LD_ADDR_EXP 31
17895: PUSH
17896: LD_EXP 31
17900: PUSH
17901: LD_VAR 0 1
17905: PPUSH
17906: CALL_OW 254
17910: ADD
17911: ST_TO_ADDR
// end ; end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17912: LD_EXP 48
17916: PUSH
17917: LD_VAR 0 1
17921: PPUSH
17922: CALL_OW 257
17926: PUSH
17927: LD_INT 3
17929: EQUAL
17930: AND
17931: PUSH
17932: LD_VAR 0 1
17936: PPUSH
17937: CALL_OW 255
17941: PUSH
17942: LD_INT 3
17944: EQUAL
17945: AND
17946: PUSH
17947: LD_INT 21
17949: PPUSH
17950: CALL_OW 302
17954: AND
17955: PUSH
17956: LD_INT 21
17958: PPUSH
17959: CALL_OW 255
17963: PUSH
17964: LD_INT 3
17966: EQUAL
17967: AND
17968: IFFALSE 18050
// begin ruMechCounter := ruMechCounter - 1 ;
17970: LD_ADDR_EXP 48
17974: PUSH
17975: LD_EXP 48
17979: PUSH
17980: LD_INT 1
17982: MINUS
17983: ST_TO_ADDR
// uc_side = 3 ;
17984: LD_ADDR_OWVAR 20
17988: PUSH
17989: LD_INT 3
17991: ST_TO_ADDR
// uc_nation = 3 ;
17992: LD_ADDR_OWVAR 21
17996: PUSH
17997: LD_INT 3
17999: ST_TO_ADDR
// hc_gallery :=  ;
18000: LD_ADDR_OWVAR 33
18004: PUSH
18005: LD_STRING 
18007: ST_TO_ADDR
// hc_name :=  ;
18008: LD_ADDR_OWVAR 26
18012: PUSH
18013: LD_STRING 
18015: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18016: LD_INT 0
18018: PPUSH
18019: LD_EXP 34
18023: PPUSH
18024: LD_EXP 35
18028: PPUSH
18029: CALL_OW 12
18033: PPUSH
18034: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
18038: CALL_OW 44
18042: PPUSH
18043: LD_INT 21
18045: PPUSH
18046: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18050: LD_VAR 0 1
18054: PPUSH
18055: CALL_OW 255
18059: PUSH
18060: LD_INT 3
18062: EQUAL
18063: PUSH
18064: LD_VAR 0 1
18068: PPUSH
18069: CALL_OW 264
18073: PUSH
18074: LD_INT 52
18076: EQUAL
18077: AND
18078: PUSH
18079: LD_INT 21
18081: PPUSH
18082: CALL_OW 302
18086: AND
18087: PUSH
18088: LD_INT 21
18090: PPUSH
18091: CALL_OW 255
18095: PUSH
18096: LD_INT 3
18098: EQUAL
18099: AND
18100: IFFALSE 18121
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18102: LD_INT 21
18104: PPUSH
18105: LD_INT 22
18107: PPUSH
18108: LD_INT 1
18110: PPUSH
18111: LD_INT 1
18113: PPUSH
18114: LD_INT 52
18116: PPUSH
18117: CALL_OW 125
// end ;
18121: PPOPN 1
18123: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18124: LD_INT 0
18126: PPUSH
18127: PPUSH
18128: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18129: LD_VAR 0 1
18133: PPUSH
18134: CALL_OW 264
18138: PUSH
18139: LD_INT 51
18141: EQUAL
18142: PUSH
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 255
18152: PUSH
18153: LD_INT 3
18155: EQUAL
18156: AND
18157: IFFALSE 18219
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18159: LD_ADDR_VAR 0 5
18163: PUSH
18164: LD_INT 2
18166: PPUSH
18167: CALL_OW 274
18171: PPUSH
18172: LD_INT 1
18174: PPUSH
18175: CALL_OW 275
18179: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18180: LD_INT 2
18182: PPUSH
18183: CALL_OW 274
18187: PPUSH
18188: LD_INT 1
18190: PPUSH
18191: LD_VAR 0 5
18195: PUSH
18196: LD_INT 100
18198: MINUS
18199: PPUSH
18200: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18204: LD_VAR 0 1
18208: PPUSH
18209: LD_INT 1
18211: PPUSH
18212: LD_INT 100
18214: PPUSH
18215: CALL_OW 291
// end ; if building = rufabsupp then
18219: LD_VAR 0 2
18223: PUSH
18224: LD_INT 17
18226: EQUAL
18227: IFFALSE 18241
// SetSide ( vehicle , 6 ) ;
18229: LD_VAR 0 1
18233: PPUSH
18234: LD_INT 6
18236: PPUSH
18237: CALL_OW 235
// end ;
18241: PPOPN 5
18243: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18244: LD_VAR 0 1
18248: PPUSH
18249: CALL_OW 255
18253: PUSH
18254: LD_INT 3
18256: EQUAL
18257: IFFALSE 18288
// begin tamedApemans = tamedApemans + 1 ;
18259: LD_ADDR_EXP 32
18263: PUSH
18264: LD_EXP 32
18268: PUSH
18269: LD_INT 1
18271: PLUS
18272: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18273: LD_VAR 0 1
18277: PPUSH
18278: LD_INT 106
18280: PPUSH
18281: LD_INT 85
18283: PPUSH
18284: CALL_OW 111
// end ; end ;
18288: PPOPN 2
18290: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18291: LD_INT 0
18293: PPUSH
18294: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18295: LD_VAR 0 1
18299: PPUSH
18300: CALL_OW 255
18304: PUSH
18305: LD_INT 3
18307: EQUAL
18308: PUSH
18309: LD_VAR 0 1
18313: PPUSH
18314: CALL_OW 247
18318: PUSH
18319: LD_INT 2
18321: EQUAL
18322: AND
18323: IFFALSE 18432
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18325: LD_VAR 0 1
18329: PPUSH
18330: CALL_OW 264
18334: PUSH
18335: LD_INT 42
18337: EQUAL
18338: PUSH
18339: LD_VAR 0 1
18343: PPUSH
18344: CALL_OW 264
18348: PUSH
18349: LD_INT 43
18351: EQUAL
18352: OR
18353: PUSH
18354: LD_VAR 0 1
18358: PPUSH
18359: CALL_OW 264
18363: PUSH
18364: LD_INT 44
18366: EQUAL
18367: OR
18368: PUSH
18369: LD_VAR 0 1
18373: PPUSH
18374: CALL_OW 264
18378: PUSH
18379: LD_INT 46
18381: EQUAL
18382: OR
18383: IFFALSE 18432
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18385: LD_INT 21
18387: PPUSH
18388: LD_VAR 0 1
18392: PPUSH
18393: CALL_OW 265
18397: PPUSH
18398: LD_VAR 0 1
18402: PPUSH
18403: CALL_OW 262
18407: PPUSH
18408: LD_VAR 0 1
18412: PPUSH
18413: CALL_OW 263
18417: PPUSH
18418: LD_VAR 0 1
18422: PPUSH
18423: CALL_OW 264
18427: PPUSH
18428: CALL_OW 185
// end ;
18432: PPOPN 3
18434: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18435: LD_VAR 0 1
18439: PPUSH
18440: CALL_OW 255
18444: PUSH
18445: LD_INT 3
18447: EQUAL
18448: PUSH
18449: LD_VAR 0 2
18453: PPUSH
18454: CALL_OW 255
18458: PUSH
18459: LD_INT 3
18461: EQUAL
18462: AND
18463: PUSH
18464: LD_VAR 0 1
18468: PPUSH
18469: CALL_OW 302
18473: AND
18474: IFFALSE 18516
// begin ComRepairVehicle ( human , vehicle ) ;
18476: LD_VAR 0 2
18480: PPUSH
18481: LD_VAR 0 1
18485: PPUSH
18486: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18490: LD_VAR 0 2
18494: PPUSH
18495: LD_VAR 0 1
18499: PPUSH
18500: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18504: LD_VAR 0 1
18508: PPUSH
18509: LD_INT 100
18511: PPUSH
18512: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18516: LD_VAR 0 1
18520: PPUSH
18521: CALL_OW 255
18525: PUSH
18526: LD_INT 3
18528: EQUAL
18529: PUSH
18530: LD_VAR 0 2
18534: PPUSH
18535: CALL_OW 255
18539: PUSH
18540: LD_INT 3
18542: EQUAL
18543: AND
18544: PUSH
18545: LD_INT 21
18547: PPUSH
18548: CALL_OW 302
18552: AND
18553: PUSH
18554: LD_VAR 0 1
18558: PPUSH
18559: CALL_OW 302
18563: NOT
18564: AND
18565: IFFALSE 18579
// ComEnterUnit ( human , rufab ) ;
18567: LD_VAR 0 2
18571: PPUSH
18572: LD_INT 21
18574: PPUSH
18575: CALL_OW 120
// end ;
18579: PPOPN 2
18581: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18582: LD_VAR 0 1
18586: PUSH
18587: LD_INT 21
18589: EQUAL
18590: PUSH
18591: LD_VAR 0 2
18595: PPUSH
18596: CALL_OW 255
18600: PUSH
18601: LD_INT 3
18603: EQUAL
18604: AND
18605: IFFALSE 18619
// SetLives ( human , 1000 ) ;
18607: LD_VAR 0 2
18611: PPUSH
18612: LD_INT 1000
18614: PPUSH
18615: CALL_OW 234
// end ;
18619: PPOPN 2
18621: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18622: LD_VAR 0 1
18626: PPUSH
18627: CALL 24327 0 1
// end ; end_of_file
18631: PPOPN 1
18633: END
// every 0 0$30 trigger cratesStatus = 1 do
18634: LD_EXP 38
18638: PUSH
18639: LD_INT 1
18641: EQUAL
18642: IFFALSE 18725
18644: GO 18646
18646: DISABLE
// begin enable ;
18647: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18648: LD_INT 350
18650: PUSH
18651: LD_INT 1050
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 1
18660: PPUSH
18661: LD_INT 2
18663: PPUSH
18664: CALL_OW 12
18668: ARRAY
18669: PPUSH
18670: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18674: LD_INT 4
18676: PUSH
18677: LD_INT 5
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 1
18686: PPUSH
18687: LD_INT 2
18689: PPUSH
18690: CALL_OW 12
18694: ARRAY
18695: PPUSH
18696: LD_INT 6
18698: PUSH
18699: LD_INT 7
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 1
18708: PPUSH
18709: LD_INT 2
18711: PPUSH
18712: CALL_OW 12
18716: ARRAY
18717: PPUSH
18718: LD_INT 1
18720: PPUSH
18721: CALL_OW 55
// end ;
18725: END
// every 1 1$0 trigger cratesStatus = 2 do
18726: LD_EXP 38
18730: PUSH
18731: LD_INT 2
18733: EQUAL
18734: IFFALSE 18817
18736: GO 18738
18738: DISABLE
// begin enable ;
18739: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18740: LD_INT 3150
18742: PUSH
18743: LD_INT 4550
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 1
18752: PPUSH
18753: LD_INT 2
18755: PPUSH
18756: CALL_OW 12
18760: ARRAY
18761: PPUSH
18762: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18766: LD_INT 2
18768: PUSH
18769: LD_INT 5
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 1
18778: PPUSH
18779: LD_INT 2
18781: PPUSH
18782: CALL_OW 12
18786: ARRAY
18787: PPUSH
18788: LD_INT 6
18790: PUSH
18791: LD_INT 7
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 1
18800: PPUSH
18801: LD_INT 2
18803: PPUSH
18804: CALL_OW 12
18808: ARRAY
18809: PPUSH
18810: LD_INT 1
18812: PPUSH
18813: CALL_OW 55
// end ;
18817: END
// every 0 0$30 + 0 0$10 do
18818: GO 18820
18820: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18821: LD_INT 4
18823: PUSH
18824: LD_INT 5
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 1
18833: PPUSH
18834: LD_INT 2
18836: PPUSH
18837: CALL_OW 12
18841: ARRAY
18842: PPUSH
18843: LD_INT 7
18845: PPUSH
18846: LD_INT 1
18848: PPUSH
18849: CALL_OW 55
// Wait ( 0 0$15 ) ;
18853: LD_INT 525
18855: PPUSH
18856: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18860: LD_INT 4
18862: PUSH
18863: LD_INT 5
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 1
18872: PPUSH
18873: LD_INT 2
18875: PPUSH
18876: CALL_OW 12
18880: ARRAY
18881: PPUSH
18882: LD_INT 7
18884: PPUSH
18885: LD_INT 1
18887: PPUSH
18888: CALL_OW 55
// Wait ( 0 0$20 ) ;
18892: LD_INT 700
18894: PPUSH
18895: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18899: LD_INT 4
18901: PUSH
18902: LD_INT 5
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 1
18911: PPUSH
18912: LD_INT 2
18914: PPUSH
18915: CALL_OW 12
18919: ARRAY
18920: PPUSH
18921: LD_INT 7
18923: PPUSH
18924: LD_INT 1
18926: PPUSH
18927: CALL_OW 55
// end ; end_of_file
18931: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
18932: LD_EXP 24
18936: PUSH
18937: LD_INT 1
18939: EQUAL
18940: IFFALSE 19241
18942: GO 18944
18944: DISABLE
18945: LD_INT 0
18947: PPUSH
18948: PPUSH
18949: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18950: LD_ADDR_VAR 0 2
18954: PUSH
18955: LD_INT 22
18957: PUSH
18958: LD_INT 1
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 21
18967: PUSH
18968: LD_INT 3
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 2
18977: PUSH
18978: LD_INT 30
18980: PUSH
18981: LD_INT 0
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 30
18990: PUSH
18991: LD_INT 1
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: LIST
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: LIST
19007: PPUSH
19008: CALL_OW 69
19012: ST_TO_ADDR
// for i in tmp do
19013: LD_ADDR_VAR 0 1
19017: PUSH
19018: LD_VAR 0 2
19022: PUSH
19023: FOR_IN
19024: IFFALSE 19057
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19026: LD_ADDR_VAR 0 3
19030: PUSH
19031: LD_VAR 0 3
19035: PUSH
19036: LD_VAR 0 1
19040: PPUSH
19041: CALL_OW 274
19045: PPUSH
19046: LD_INT 1
19048: PPUSH
19049: CALL_OW 275
19053: PLUS
19054: ST_TO_ADDR
19055: GO 19023
19057: POP
19058: POP
// strings = [ ] ;
19059: LD_ADDR_EXP 27
19063: PUSH
19064: EMPTY
19065: ST_TO_ADDR
// if tmp = 0 then
19066: LD_VAR 0 2
19070: PUSH
19071: LD_INT 0
19073: EQUAL
19074: IFFALSE 19099
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19076: LD_ADDR_EXP 27
19080: PUSH
19081: LD_EXP 27
19085: PUSH
19086: LD_STRING #Am06-1
19088: PUSH
19089: LD_EXP 25
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: ADD
19098: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19099: LD_VAR 0 2
19103: PUSH
19104: LD_INT 0
19106: GREATER
19107: PUSH
19108: LD_EXP 25
19112: PUSH
19113: LD_VAR 0 3
19117: GREATER
19118: AND
19119: IFFALSE 19150
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19121: LD_ADDR_EXP 27
19125: PUSH
19126: LD_EXP 27
19130: PUSH
19131: LD_STRING #Am06-1
19133: PUSH
19134: LD_EXP 25
19138: PUSH
19139: LD_VAR 0 3
19143: MINUS
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: ADD
19149: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19150: LD_VAR 0 2
19154: PUSH
19155: LD_INT 0
19157: GREATER
19158: PUSH
19159: LD_EXP 25
19163: PUSH
19164: LD_VAR 0 3
19168: LESSEQUAL
19169: AND
19170: IFFALSE 19193
// strings = strings ^ [ #Am06-1 , 0 ] ;
19172: LD_ADDR_EXP 27
19176: PUSH
19177: LD_EXP 27
19181: PUSH
19182: LD_STRING #Am06-1
19184: PUSH
19185: LD_INT 0
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: ADD
19192: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19193: LD_ADDR_EXP 26
19197: PUSH
19198: LD_EXP 26
19202: PUSH
19203: LD_INT 35
19205: MINUS
19206: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19207: LD_ADDR_EXP 27
19211: PUSH
19212: LD_EXP 27
19216: PUSH
19217: LD_STRING #Am06-2
19219: PUSH
19220: LD_EXP 26
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: ADD
19229: ST_TO_ADDR
// display_strings = strings ;
19230: LD_ADDR_OWVAR 47
19234: PUSH
19235: LD_EXP 27
19239: ST_TO_ADDR
// enable ;
19240: ENABLE
// end ; end_of_file
19241: PPOPN 3
19243: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19244: LD_INT 0
19246: PPUSH
19247: PPUSH
19248: PPUSH
19249: PPUSH
19250: PPUSH
19251: PPUSH
19252: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19253: LD_ADDR_VAR 0 3
19257: PUSH
19258: LD_INT 22
19260: PUSH
19261: LD_INT 1
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 2
19270: PUSH
19271: LD_INT 30
19273: PUSH
19274: LD_INT 0
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 30
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: LIST
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PPUSH
19300: CALL_OW 69
19304: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19305: LD_INT 35
19307: PPUSH
19308: CALL_OW 67
// until depot ;
19312: LD_VAR 0 3
19316: IFFALSE 19253
// repeat wait ( 0 0$1 ) ;
19318: LD_INT 35
19320: PPUSH
19321: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19325: LD_ADDR_VAR 0 4
19329: PUSH
19330: LD_INT 22
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 91
19342: PUSH
19343: LD_VAR 0 3
19347: PUSH
19348: LD_INT 1
19350: ARRAY
19351: PUSH
19352: LD_INT 15
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 21
19362: PUSH
19363: LD_INT 1
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 2
19372: PUSH
19373: LD_INT 25
19375: PUSH
19376: LD_INT 1
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 25
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 25
19395: PUSH
19396: LD_INT 3
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 25
19405: PUSH
19406: LD_INT 4
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 3
19422: PUSH
19423: LD_INT 54
19425: PUSH
19426: EMPTY
19427: LIST
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 3
19435: PUSH
19436: LD_INT 55
19438: PUSH
19439: EMPTY
19440: LIST
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: PPUSH
19454: CALL_OW 69
19458: PUSH
19459: LD_EXP 2
19463: PUSH
19464: LD_EXP 3
19468: PUSH
19469: LD_EXP 4
19473: PUSH
19474: LD_EXP 5
19478: PUSH
19479: LD_EXP 7
19483: PUSH
19484: LD_EXP 8
19488: PUSH
19489: LD_EXP 9
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: PUSH
19503: LD_EXP 46
19507: ADD
19508: DIFF
19509: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19510: LD_VAR 0 4
19514: PUSH
19515: LD_INT 1
19517: PPUSH
19518: CALL_OW 463
19522: NOT
19523: AND
19524: IFFALSE 19318
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19526: LD_ADDR_VAR 0 4
19530: PUSH
19531: LD_VAR 0 4
19535: PUSH
19536: LD_INT 1
19538: PPUSH
19539: LD_VAR 0 4
19543: PPUSH
19544: CALL_OW 12
19548: ARRAY
19549: ST_TO_ADDR
// blockSpawn = 1 ;
19550: LD_ADDR_EXP 29
19554: PUSH
19555: LD_INT 1
19557: ST_TO_ADDR
// uc_side = 2 ;
19558: LD_ADDR_OWVAR 20
19562: PUSH
19563: LD_INT 2
19565: ST_TO_ADDR
// uc_nation = 2 ;
19566: LD_ADDR_OWVAR 21
19570: PUSH
19571: LD_INT 2
19573: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19574: LD_ADDR_EXP 19
19578: PUSH
19579: LD_STRING Kurt
19581: PPUSH
19582: LD_INT 0
19584: PPUSH
19585: CALL 5968 0 2
19589: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19590: LD_EXP 19
19594: PPUSH
19595: LD_VAR 0 4
19599: PPUSH
19600: CALL_OW 250
19604: PPUSH
19605: LD_VAR 0 4
19609: PPUSH
19610: CALL_OW 251
19614: PPUSH
19615: LD_INT 5
19617: PPUSH
19618: LD_INT 1
19620: PPUSH
19621: CALL_OW 50
// InGameOn ;
19625: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19629: LD_EXP 19
19633: PPUSH
19634: CALL_OW 87
// wait ( 0 0$2 ) ;
19638: LD_INT 70
19640: PPUSH
19641: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19645: LD_EXP 19
19649: PPUSH
19650: LD_VAR 0 4
19654: PPUSH
19655: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19659: LD_VAR 0 4
19663: PPUSH
19664: LD_EXP 19
19668: PPUSH
19669: CALL_OW 112
// wait ( 0 0$1 ) ;
19673: LD_INT 35
19675: PPUSH
19676: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19680: LD_VAR 0 4
19684: PPUSH
19685: LD_EXP 19
19689: PPUSH
19690: CALL_OW 119
// DialogueOn ;
19694: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19698: LD_EXP 19
19702: PPUSH
19703: LD_STRING D2-Kurt-1
19705: PPUSH
19706: CALL_OW 88
// if tmp = JMM then
19710: LD_VAR 0 4
19714: PUSH
19715: LD_EXP 1
19719: EQUAL
19720: IFFALSE 19812
// begin Say ( JMM , D2-JMM-1 ) ;
19722: LD_EXP 1
19726: PPUSH
19727: LD_STRING D2-JMM-1
19729: PPUSH
19730: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19734: LD_EXP 19
19738: PPUSH
19739: LD_STRING D2-Kurt-2
19741: PPUSH
19742: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19746: LD_EXP 1
19750: PPUSH
19751: LD_STRING D2-JMM-2
19753: PPUSH
19754: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19758: LD_EXP 19
19762: PPUSH
19763: LD_STRING D2-Kurt-3
19765: PPUSH
19766: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19770: LD_EXP 1
19774: PPUSH
19775: LD_STRING D2-JMM-3
19777: PPUSH
19778: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19782: LD_EXP 19
19786: PPUSH
19787: LD_STRING D2-Kurt-4
19789: PPUSH
19790: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19794: LD_EXP 1
19798: PPUSH
19799: LD_STRING D2-JMM-4
19801: PPUSH
19802: CALL_OW 88
// DialogueOff ;
19806: CALL_OW 7
// end else
19810: GO 20122
// begin if GetSex ( tmp ) = 1 then
19812: LD_VAR 0 4
19816: PPUSH
19817: CALL_OW 258
19821: PUSH
19822: LD_INT 1
19824: EQUAL
19825: IFFALSE 19839
// Say ( tmp , D2-Sol1-1 ) ;
19827: LD_VAR 0 4
19831: PPUSH
19832: LD_STRING D2-Sol1-1
19834: PPUSH
19835: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19839: LD_VAR 0 4
19843: PPUSH
19844: CALL_OW 258
19848: PUSH
19849: LD_INT 2
19851: EQUAL
19852: IFFALSE 19866
// Say ( tmp , D2-FSol1-1 ) ;
19854: LD_VAR 0 4
19858: PPUSH
19859: LD_STRING D2-FSol1-1
19861: PPUSH
19862: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19866: LD_EXP 19
19870: PPUSH
19871: LD_STRING D2-Kurt-2
19873: PPUSH
19874: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19878: LD_VAR 0 4
19882: PPUSH
19883: CALL_OW 258
19887: PUSH
19888: LD_INT 1
19890: EQUAL
19891: IFFALSE 19905
// Say ( tmp , D2-Sol1-2 ) ;
19893: LD_VAR 0 4
19897: PPUSH
19898: LD_STRING D2-Sol1-2
19900: PPUSH
19901: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19905: LD_VAR 0 4
19909: PPUSH
19910: CALL_OW 258
19914: PUSH
19915: LD_INT 2
19917: EQUAL
19918: IFFALSE 19932
// Say ( tmp , D2-FSol1-2 ) ;
19920: LD_VAR 0 4
19924: PPUSH
19925: LD_STRING D2-FSol1-2
19927: PPUSH
19928: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19932: LD_EXP 19
19936: PPUSH
19937: LD_STRING D2-Kurt-3
19939: PPUSH
19940: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19944: LD_VAR 0 4
19948: PPUSH
19949: CALL_OW 258
19953: PUSH
19954: LD_INT 1
19956: EQUAL
19957: IFFALSE 19971
// Say ( tmp , D2-Sol1-3 ) ;
19959: LD_VAR 0 4
19963: PPUSH
19964: LD_STRING D2-Sol1-3
19966: PPUSH
19967: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19971: LD_VAR 0 4
19975: PPUSH
19976: CALL_OW 258
19980: PUSH
19981: LD_INT 2
19983: EQUAL
19984: IFFALSE 19998
// Say ( tmp , D2-FSol1-3 ) ;
19986: LD_VAR 0 4
19990: PPUSH
19991: LD_STRING D2-FSol1-3
19993: PPUSH
19994: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19998: LD_EXP 19
20002: PPUSH
20003: LD_STRING D2-Kurt-4
20005: PPUSH
20006: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20010: LD_VAR 0 4
20014: PPUSH
20015: CALL_OW 258
20019: PUSH
20020: LD_INT 1
20022: EQUAL
20023: IFFALSE 20037
// Say ( tmp , D2-Sol1-4 ) ;
20025: LD_VAR 0 4
20029: PPUSH
20030: LD_STRING D2-Sol1-4
20032: PPUSH
20033: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20037: LD_VAR 0 4
20041: PPUSH
20042: CALL_OW 258
20046: PUSH
20047: LD_INT 2
20049: EQUAL
20050: IFFALSE 20064
// Say ( tmp , D2-FSol1-4 ) ;
20052: LD_VAR 0 4
20056: PPUSH
20057: LD_STRING D2-FSol1-4
20059: PPUSH
20060: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20064: LD_VAR 0 4
20068: PPUSH
20069: CALL_OW 258
20073: PUSH
20074: LD_INT 1
20076: EQUAL
20077: IFFALSE 20091
// Say ( tmp , D2-Sol1-5 ) ;
20079: LD_VAR 0 4
20083: PPUSH
20084: LD_STRING D2-Sol1-5
20086: PPUSH
20087: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20091: LD_VAR 0 4
20095: PPUSH
20096: CALL_OW 258
20100: PUSH
20101: LD_INT 2
20103: EQUAL
20104: IFFALSE 20118
// Say ( tmp , D2-FSol1-5 ) ;
20106: LD_VAR 0 4
20110: PPUSH
20111: LD_STRING D2-FSol1-5
20113: PPUSH
20114: CALL_OW 88
// DialogueOff ;
20118: CALL_OW 7
// end ; dec = ShowQuery1 ;
20122: LD_ADDR_VAR 0 6
20126: PUSH
20127: CALL 6492 0 0
20131: ST_TO_ADDR
// if dec = 1 then
20132: LD_VAR 0 6
20136: PUSH
20137: LD_INT 1
20139: EQUAL
20140: IFFALSE 20182
// begin DialogueOn ;
20142: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20146: LD_EXP 19
20150: PPUSH
20151: LD_STRING D2a-Kurt-1
20153: PPUSH
20154: CALL_OW 88
// DialogueOff ;
20158: CALL_OW 7
// InGameOff ;
20162: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20166: LD_INT 1
20168: PPUSH
20169: LD_INT 2
20171: PPUSH
20172: LD_INT 2
20174: PPUSH
20175: LD_INT 1
20177: PPUSH
20178: CALL_OW 80
// end ; if dec = 2 then
20182: LD_VAR 0 6
20186: PUSH
20187: LD_INT 2
20189: EQUAL
20190: IFFALSE 20690
// begin DialogueOn ;
20192: CALL_OW 6
// if tmp = JMM then
20196: LD_VAR 0 4
20200: PUSH
20201: LD_EXP 1
20205: EQUAL
20206: IFFALSE 20262
// begin Say ( JMM , D2b-JMM-1 ) ;
20208: LD_EXP 1
20212: PPUSH
20213: LD_STRING D2b-JMM-1
20215: PPUSH
20216: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20220: LD_EXP 19
20224: PPUSH
20225: LD_STRING D2b-Kurt-1
20227: PPUSH
20228: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20232: LD_EXP 1
20236: PPUSH
20237: LD_STRING D2b-JMM-2
20239: PPUSH
20240: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20244: LD_EXP 19
20248: PPUSH
20249: LD_STRING D2b-Kurt-2
20251: PPUSH
20252: CALL_OW 88
// DialogueOff ;
20256: CALL_OW 7
// end else
20260: GO 20452
// begin if GetSex ( tmp ) = 1 then
20262: LD_VAR 0 4
20266: PPUSH
20267: CALL_OW 258
20271: PUSH
20272: LD_INT 1
20274: EQUAL
20275: IFFALSE 20289
// Say ( tmp , D2b-Sol1-1 ) ;
20277: LD_VAR 0 4
20281: PPUSH
20282: LD_STRING D2b-Sol1-1
20284: PPUSH
20285: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20289: LD_VAR 0 4
20293: PPUSH
20294: CALL_OW 258
20298: PUSH
20299: LD_INT 2
20301: EQUAL
20302: IFFALSE 20316
// Say ( tmp , D2b-FSol1-1 ) ;
20304: LD_VAR 0 4
20308: PPUSH
20309: LD_STRING D2b-FSol1-1
20311: PPUSH
20312: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20316: LD_EXP 19
20320: PPUSH
20321: LD_STRING D2b-Kurt-1
20323: PPUSH
20324: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20328: LD_VAR 0 4
20332: PPUSH
20333: CALL_OW 258
20337: PUSH
20338: LD_INT 1
20340: EQUAL
20341: IFFALSE 20355
// Say ( tmp , D2b-Sol1-2 ) ;
20343: LD_VAR 0 4
20347: PPUSH
20348: LD_STRING D2b-Sol1-2
20350: PPUSH
20351: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20355: LD_VAR 0 4
20359: PPUSH
20360: CALL_OW 258
20364: PUSH
20365: LD_INT 2
20367: EQUAL
20368: IFFALSE 20382
// Say ( tmp , D2b-FSol1-2 ) ;
20370: LD_VAR 0 4
20374: PPUSH
20375: LD_STRING D2b-FSol1-2
20377: PPUSH
20378: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20382: LD_EXP 19
20386: PPUSH
20387: LD_STRING D2b-Kurt-2
20389: PPUSH
20390: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20394: LD_VAR 0 4
20398: PPUSH
20399: CALL_OW 258
20403: PUSH
20404: LD_INT 1
20406: EQUAL
20407: IFFALSE 20421
// Say ( tmp , D2c-Sol1-2 ) ;
20409: LD_VAR 0 4
20413: PPUSH
20414: LD_STRING D2c-Sol1-2
20416: PPUSH
20417: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20421: LD_VAR 0 4
20425: PPUSH
20426: CALL_OW 258
20430: PUSH
20431: LD_INT 2
20433: EQUAL
20434: IFFALSE 20448
// Say ( tmp , D2c-FSol1-2 ) ;
20436: LD_VAR 0 4
20440: PPUSH
20441: LD_STRING D2c-FSol1-2
20443: PPUSH
20444: CALL_OW 88
// DialogueOff ;
20448: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20452: LD_ADDR_VAR 0 7
20456: PUSH
20457: CALL 6566 0 0
20461: ST_TO_ADDR
// if dec2 = 1 then
20462: LD_VAR 0 7
20466: PUSH
20467: LD_INT 1
20469: EQUAL
20470: IFFALSE 20512
// begin DialogueOn ;
20472: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20476: LD_EXP 19
20480: PPUSH
20481: LD_STRING D2a-Kurt-1
20483: PPUSH
20484: CALL_OW 88
// DialogueOff ;
20488: CALL_OW 7
// InGameOff ;
20492: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20496: LD_INT 1
20498: PPUSH
20499: LD_INT 2
20501: PPUSH
20502: LD_INT 2
20504: PPUSH
20505: LD_INT 1
20507: PPUSH
20508: CALL_OW 80
// end ; if dec2 = 2 then
20512: LD_VAR 0 7
20516: PUSH
20517: LD_INT 2
20519: EQUAL
20520: IFFALSE 20690
// begin if tmp = JMM then
20522: LD_VAR 0 4
20526: PUSH
20527: LD_EXP 1
20531: EQUAL
20532: IFFALSE 20592
// begin DialogueOn ;
20534: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20538: LD_EXP 1
20542: PPUSH
20543: LD_STRING D2c-JMM-1
20545: PPUSH
20546: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20550: LD_EXP 19
20554: PPUSH
20555: LD_STRING D2c-Kurt-1
20557: PPUSH
20558: CALL_OW 88
// DialogueOff ;
20562: CALL_OW 7
// InGameOff ;
20566: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20570: LD_EXP 19
20574: PPUSH
20575: LD_INT 8
20577: PPUSH
20578: CALL_OW 113
// readyToEscape = 1 ;
20582: LD_ADDR_EXP 21
20586: PUSH
20587: LD_INT 1
20589: ST_TO_ADDR
// end else
20590: GO 20690
// begin DialogueOn ;
20592: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20596: LD_VAR 0 4
20600: PPUSH
20601: CALL_OW 258
20605: PUSH
20606: LD_INT 1
20608: EQUAL
20609: IFFALSE 20623
// Say ( tmp , D2c-Sol1-1 ) ;
20611: LD_VAR 0 4
20615: PPUSH
20616: LD_STRING D2c-Sol1-1
20618: PPUSH
20619: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20623: LD_VAR 0 4
20627: PPUSH
20628: CALL_OW 258
20632: PUSH
20633: LD_INT 2
20635: EQUAL
20636: IFFALSE 20650
// Say ( tmp , D2c-FSol1-1 ) ;
20638: LD_VAR 0 4
20642: PPUSH
20643: LD_STRING D2c-FSol1-1
20645: PPUSH
20646: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20650: LD_EXP 19
20654: PPUSH
20655: LD_STRING D2c-Kurt-1
20657: PPUSH
20658: CALL_OW 88
// DialogueOff ;
20662: CALL_OW 7
// InGameOff ;
20666: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20670: LD_EXP 19
20674: PPUSH
20675: LD_INT 8
20677: PPUSH
20678: CALL_OW 113
// readyToEscape = 1 ;
20682: LD_ADDR_EXP 21
20686: PUSH
20687: LD_INT 1
20689: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20690: LD_VAR 0 6
20694: PUSH
20695: LD_INT 3
20697: EQUAL
20698: IFFALSE 20872
// begin DialogueOn ;
20700: CALL_OW 6
// if tmp = JMM then
20704: LD_VAR 0 4
20708: PUSH
20709: LD_EXP 1
20713: EQUAL
20714: IFFALSE 20774
// begin DialogueOn ;
20716: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20720: LD_EXP 1
20724: PPUSH
20725: LD_STRING D2c-JMM-1
20727: PPUSH
20728: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20732: LD_EXP 19
20736: PPUSH
20737: LD_STRING D2c-Kurt-1
20739: PPUSH
20740: CALL_OW 88
// DialogueOff ;
20744: CALL_OW 7
// InGameOff ;
20748: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20752: LD_EXP 19
20756: PPUSH
20757: LD_INT 8
20759: PPUSH
20760: CALL_OW 113
// readyToEscape = 1 ;
20764: LD_ADDR_EXP 21
20768: PUSH
20769: LD_INT 1
20771: ST_TO_ADDR
// end else
20772: GO 20872
// begin DialogueOn ;
20774: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20778: LD_VAR 0 4
20782: PPUSH
20783: CALL_OW 258
20787: PUSH
20788: LD_INT 1
20790: EQUAL
20791: IFFALSE 20805
// Say ( tmp , D2c-Sol1-1 ) ;
20793: LD_VAR 0 4
20797: PPUSH
20798: LD_STRING D2c-Sol1-1
20800: PPUSH
20801: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20805: LD_VAR 0 4
20809: PPUSH
20810: CALL_OW 258
20814: PUSH
20815: LD_INT 2
20817: EQUAL
20818: IFFALSE 20832
// Say ( tmp , D2c-FSol1-1 ) ;
20820: LD_VAR 0 4
20824: PPUSH
20825: LD_STRING D2c-FSol1-1
20827: PPUSH
20828: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20832: LD_EXP 19
20836: PPUSH
20837: LD_STRING D2c-Kurt-1
20839: PPUSH
20840: CALL_OW 88
// DialogueOff ;
20844: CALL_OW 7
// InGameOff ;
20848: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20852: LD_EXP 19
20856: PPUSH
20857: LD_INT 8
20859: PPUSH
20860: CALL_OW 113
// readyToEscape = 1 ;
20864: LD_ADDR_EXP 21
20868: PUSH
20869: LD_INT 1
20871: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
20872: LD_ADDR_EXP 29
20876: PUSH
20877: LD_INT 0
20879: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20880: LD_INT 35
20882: PPUSH
20883: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
20887: LD_EXP 19
20891: PPUSH
20892: LD_INT 8
20894: PPUSH
20895: CALL_OW 308
20899: PUSH
20900: LD_EXP 21
20904: AND
20905: PUSH
20906: LD_EXP 19
20910: PPUSH
20911: CALL_OW 301
20915: OR
20916: IFFALSE 20880
// if IsDead ( Kurt ) then
20918: LD_EXP 19
20922: PPUSH
20923: CALL_OW 301
20927: IFFALSE 20931
// exit ;
20929: GO 21000
// RemoveUnit ( Kurt ) ;
20931: LD_EXP 19
20935: PPUSH
20936: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
20940: LD_EXP 19
20944: PPUSH
20945: LD_STRING Kurt
20947: PPUSH
20948: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
20952: LD_INT 1
20954: PPUSH
20955: LD_INT 2
20957: PPUSH
20958: CALL_OW 81
20962: PUSH
20963: LD_INT 0
20965: EQUAL
20966: IFFALSE 20976
// KurtStatus = 1 ;
20968: LD_ADDR_EXP 20
20972: PUSH
20973: LD_INT 1
20975: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
20976: LD_INT 1
20978: PPUSH
20979: LD_INT 2
20981: PPUSH
20982: CALL_OW 81
20986: PUSH
20987: LD_INT 2
20989: EQUAL
20990: IFFALSE 21000
// KurtStatus = 2 ;
20992: LD_ADDR_EXP 20
20996: PUSH
20997: LD_INT 2
20999: ST_TO_ADDR
// end ; end_of_file
21000: LD_VAR 0 1
21004: RET
// every 0 0$1 do
21005: GO 21007
21007: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
21008: LD_INT 3
21010: PPUSH
21011: LD_INT 32
21013: PPUSH
21014: LD_INT 3
21016: PPUSH
21017: CALL 6621 0 3
21021: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21022: GO 21024
21024: DISABLE
21025: LD_INT 0
21027: PPUSH
// begin enemyWayX = [ ] ;
21028: LD_ADDR_EXP 49
21032: PUSH
21033: EMPTY
21034: ST_TO_ADDR
// enemyWayY = [ ] ;
21035: LD_ADDR_EXP 50
21039: PUSH
21040: EMPTY
21041: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
21042: LD_ADDR_VAR 0 1
21046: PUSH
21047: LD_INT 1
21049: PPUSH
21050: LD_INT 2
21052: PPUSH
21053: CALL_OW 12
21057: ST_TO_ADDR
// if rnd = 1 then
21058: LD_VAR 0 1
21062: PUSH
21063: LD_INT 1
21065: EQUAL
21066: IFFALSE 21106
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21068: LD_ADDR_EXP 49
21072: PUSH
21073: LD_INT 93
21075: PUSH
21076: LD_INT 84
21078: PUSH
21079: LD_INT 104
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: LIST
21086: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21087: LD_ADDR_EXP 50
21091: PUSH
21092: LD_INT 51
21094: PUSH
21095: LD_INT 35
21097: PUSH
21098: LD_INT 28
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: LIST
21105: ST_TO_ADDR
// end ; if rnd = 2 then
21106: LD_VAR 0 1
21110: PUSH
21111: LD_INT 2
21113: EQUAL
21114: IFFALSE 21170
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21116: LD_ADDR_EXP 49
21120: PUSH
21121: LD_INT 93
21123: PUSH
21124: LD_INT 52
21126: PUSH
21127: LD_INT 34
21129: PUSH
21130: LD_INT 28
21132: PUSH
21133: LD_INT 30
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21143: LD_ADDR_EXP 50
21147: PUSH
21148: LD_INT 51
21150: PUSH
21151: LD_INT 45
21153: PUSH
21154: LD_INT 35
21156: PUSH
21157: LD_INT 26
21159: PUSH
21160: LD_INT 20
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: ST_TO_ADDR
// end ; enable ;
21170: ENABLE
// end ;
21171: PPOPN 1
21173: END
// every 0 0$1 do
21174: GO 21176
21176: DISABLE
// begin enable ;
21177: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21178: LD_INT 3
21180: PPUSH
21181: LD_INT 2
21183: PPUSH
21184: LD_INT 10
21186: PPUSH
21187: LD_EXP 31
21191: PPUSH
21192: CALL 8056 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21196: LD_INT 3
21198: PPUSH
21199: LD_INT 12
21201: PPUSH
21202: LD_EXP 31
21206: PPUSH
21207: CALL 9941 0 3
// if disableHealAI = 0 then
21211: LD_EXP 33
21215: PUSH
21216: LD_INT 0
21218: EQUAL
21219: IFFALSE 21240
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21221: LD_INT 3
21223: PPUSH
21224: LD_INT 9
21226: PPUSH
21227: LD_INT 10
21229: PPUSH
21230: LD_INT 32
21232: PUSH
21233: EMPTY
21234: LIST
21235: PPUSH
21236: CALL 8447 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21240: LD_INT 3
21242: PPUSH
21243: LD_INT 51
21245: PPUSH
21246: LD_INT 6
21248: PPUSH
21249: CALL 9155 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21253: LD_INT 3
21255: PPUSH
21256: LD_INT 12
21258: PPUSH
21259: LD_INT 121
21261: PPUSH
21262: LD_INT 100
21264: PPUSH
21265: CALL 7016 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21269: LD_INT 3
21271: PPUSH
21272: LD_INT 22
21274: PPUSH
21275: LD_EXP 49
21279: PPUSH
21280: LD_EXP 50
21284: PPUSH
21285: CALL 7219 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21289: LD_INT 3
21291: PPUSH
21292: LD_INT 10
21294: PPUSH
21295: CALL 9298 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21299: LD_INT 3
21301: PPUSH
21302: LD_INT 1
21304: PPUSH
21305: CALL 9711 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21309: LD_INT 2
21311: PPUSH
21312: CALL_OW 303
21316: PUSH
21317: LD_INT 2
21319: PPUSH
21320: CALL_OW 255
21324: PUSH
21325: LD_INT 1
21327: EQUAL
21328: OR
21329: IFFALSE 21341
// DefendDepot ( 3 , rudepo ) ;
21331: LD_INT 3
21333: PPUSH
21334: LD_INT 2
21336: PPUSH
21337: CALL 8991 0 2
// end ;
21341: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21342: LD_INT 22
21344: PUSH
21345: LD_INT 3
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 21
21354: PUSH
21355: LD_INT 2
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 55
21364: PUSH
21365: EMPTY
21366: LIST
21367: PUSH
21368: LD_INT 3
21370: PUSH
21371: LD_INT 34
21373: PUSH
21374: LD_INT 51
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: PPUSH
21391: CALL_OW 69
21395: PUSH
21396: LD_INT 0
21398: EQUAL
21399: PUSH
21400: LD_INT 21
21402: PPUSH
21403: CALL_OW 255
21407: PUSH
21408: LD_INT 3
21410: EQUAL
21411: AND
21412: PUSH
21413: LD_INT 21
21415: PPUSH
21416: CALL_OW 302
21420: AND
21421: PUSH
21422: LD_INT 2
21424: PPUSH
21425: CALL_OW 255
21429: PUSH
21430: LD_INT 3
21432: EQUAL
21433: AND
21434: PUSH
21435: LD_INT 2
21437: PPUSH
21438: CALL_OW 302
21442: AND
21443: IFFALSE 21623
21445: GO 21447
21447: DISABLE
// begin enable ;
21448: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21449: LD_INT 2
21451: PPUSH
21452: CALL_OW 274
21456: PPUSH
21457: LD_INT 1
21459: PPUSH
21460: LD_INT 1000
21462: PPUSH
21463: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21467: LD_INT 3
21469: PPUSH
21470: LD_INT 21
21472: PPUSH
21473: LD_INT 4
21475: PUSH
21476: LD_INT 5
21478: PUSH
21479: LD_INT 6
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: LIST
21486: PUSH
21487: LD_OWVAR 67
21491: ARRAY
21492: PPUSH
21493: LD_INT 43
21495: PUSH
21496: LD_INT 43
21498: PUSH
21499: LD_INT 44
21501: PUSH
21502: LD_INT 44
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 43
21513: PUSH
21514: LD_INT 43
21516: PUSH
21517: LD_INT 43
21519: PUSH
21520: LD_INT 44
21522: PUSH
21523: LD_INT 44
21525: PUSH
21526: LD_INT 46
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 43
21539: PUSH
21540: LD_INT 43
21542: PUSH
21543: LD_INT 43
21545: PUSH
21546: LD_INT 44
21548: PUSH
21549: LD_INT 44
21551: PUSH
21552: LD_INT 46
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: LIST
21567: PUSH
21568: LD_OWVAR 67
21572: ARRAY
21573: PPUSH
21574: LD_INT 1
21576: PPUSH
21577: LD_INT 1
21579: PPUSH
21580: LD_INT 22
21582: PUSH
21583: LD_INT 22
21585: PUSH
21586: LD_INT 24
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 1
21595: PPUSH
21596: LD_INT 2
21598: PPUSH
21599: CALL_OW 12
21603: ARRAY
21604: PUSH
21605: LD_INT 24
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: LIST
21612: PUSH
21613: LD_OWVAR 67
21617: ARRAY
21618: PPUSH
21619: CALL 6862 0 7
// end ;
21623: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21624: LD_INT 17
21626: PPUSH
21627: CALL_OW 255
21631: PUSH
21632: LD_INT 3
21634: EQUAL
21635: PUSH
21636: LD_INT 17
21638: PPUSH
21639: CALL_OW 302
21643: AND
21644: PUSH
21645: LD_INT 2
21647: PPUSH
21648: CALL_OW 255
21652: PUSH
21653: LD_INT 3
21655: EQUAL
21656: AND
21657: PUSH
21658: LD_INT 2
21660: PPUSH
21661: CALL_OW 302
21665: AND
21666: IFFALSE 21733
21668: GO 21670
21670: DISABLE
// begin enable ;
21671: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21672: LD_INT 17
21674: PPUSH
21675: LD_INT 22
21677: PPUSH
21678: LD_INT 1
21680: PPUSH
21681: LD_INT 1
21683: PPUSH
21684: LD_INT 42
21686: PUSH
21687: LD_INT 43
21689: PUSH
21690: LD_INT 44
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 1
21700: PPUSH
21701: LD_INT 3
21703: PPUSH
21704: CALL_OW 12
21708: ARRAY
21709: PPUSH
21710: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21714: LD_INT 17
21716: PPUSH
21717: LD_INT 22
21719: PPUSH
21720: LD_INT 1
21722: PPUSH
21723: LD_INT 1
21725: PPUSH
21726: LD_INT 51
21728: PPUSH
21729: CALL_OW 185
// end ;
21733: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21734: LD_INT 17
21736: PPUSH
21737: CALL_OW 302
21741: PUSH
21742: LD_INT 17
21744: PPUSH
21745: CALL_OW 255
21749: PUSH
21750: LD_INT 3
21752: EQUAL
21753: AND
21754: PUSH
21755: LD_INT 2
21757: PPUSH
21758: CALL_OW 302
21762: AND
21763: PUSH
21764: LD_INT 2
21766: PPUSH
21767: CALL_OW 255
21771: PUSH
21772: LD_INT 3
21774: EQUAL
21775: AND
21776: PUSH
21777: LD_INT 17
21779: PPUSH
21780: CALL_OW 313
21784: NOT
21785: AND
21786: IFFALSE 21880
21788: GO 21790
21790: DISABLE
21791: LD_INT 0
21793: PPUSH
// begin for i = 1 to 6 do
21794: LD_ADDR_VAR 0 1
21798: PUSH
21799: DOUBLE
21800: LD_INT 1
21802: DEC
21803: ST_TO_ADDR
21804: LD_INT 6
21806: PUSH
21807: FOR_TO
21808: IFFALSE 21878
// begin uc_side = 3 ;
21810: LD_ADDR_OWVAR 20
21814: PUSH
21815: LD_INT 3
21817: ST_TO_ADDR
// uc_nation = 3 ;
21818: LD_ADDR_OWVAR 21
21822: PUSH
21823: LD_INT 3
21825: ST_TO_ADDR
// hc_gallery :=  ;
21826: LD_ADDR_OWVAR 33
21830: PUSH
21831: LD_STRING 
21833: ST_TO_ADDR
// hc_name :=  ;
21834: LD_ADDR_OWVAR 26
21838: PUSH
21839: LD_STRING 
21841: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
21842: LD_INT 0
21844: PPUSH
21845: LD_EXP 34
21849: PPUSH
21850: LD_EXP 35
21854: PPUSH
21855: CALL_OW 12
21859: PPUSH
21860: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
21864: CALL_OW 44
21868: PPUSH
21869: LD_INT 17
21871: PPUSH
21872: CALL_OW 52
// end ;
21876: GO 21807
21878: POP
21879: POP
// end ;
21880: PPOPN 1
21882: END
// every 2 2$0 do var i , j ;
21883: GO 21885
21885: DISABLE
21886: LD_INT 0
21888: PPUSH
21889: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
21890: LD_INT 14700
21892: PUSH
21893: LD_INT 33600
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 1
21902: PPUSH
21903: LD_INT 2
21905: PPUSH
21906: CALL_OW 12
21910: ARRAY
21911: PPUSH
21912: CALL_OW 67
// disableHealAI = 1 ;
21916: LD_ADDR_EXP 33
21920: PUSH
21921: LD_INT 1
21923: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21924: LD_ADDR_VAR 0 1
21928: PUSH
21929: LD_INT 22
21931: PUSH
21932: LD_INT 3
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 25
21941: PUSH
21942: LD_INT 4
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PPUSH
21953: CALL_OW 69
21957: PUSH
21958: FOR_IN
21959: IFFALSE 21972
// ComExitBuilding ( i ) ;
21961: LD_VAR 0 1
21965: PPUSH
21966: CALL_OW 122
21970: GO 21958
21972: POP
21973: POP
// wait ( 0 0$1 ) ;
21974: LD_INT 35
21976: PPUSH
21977: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21981: LD_INT 35
21983: PPUSH
21984: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21988: LD_ADDR_VAR 0 1
21992: PUSH
21993: LD_INT 22
21995: PUSH
21996: LD_INT 3
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: LD_INT 25
22005: PUSH
22006: LD_INT 4
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PPUSH
22017: CALL_OW 69
22021: PUSH
22022: FOR_IN
22023: IFFALSE 22100
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
22025: LD_ADDR_VAR 0 2
22029: PUSH
22030: LD_INT 17
22032: PPUSH
22033: LD_INT 22
22035: PUSH
22036: LD_INT 0
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 25
22045: PUSH
22046: LD_INT 12
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PPUSH
22057: CALL_OW 70
22061: PUSH
22062: FOR_IN
22063: IFFALSE 22096
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22065: LD_VAR 0 1
22069: PPUSH
22070: LD_VAR 0 2
22074: PPUSH
22075: CALL_OW 250
22079: PPUSH
22080: LD_VAR 0 2
22084: PPUSH
22085: CALL_OW 251
22089: PPUSH
22090: CALL_OW 191
// end ;
22094: GO 22062
22096: POP
22097: POP
// end ;
22098: GO 22022
22100: POP
22101: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22102: LD_INT 22
22104: PUSH
22105: LD_INT 3
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 25
22114: PUSH
22115: LD_INT 4
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PPUSH
22126: CALL_OW 69
22130: PUSH
22131: LD_INT 0
22133: EQUAL
22134: PUSH
22135: LD_EXP 32
22139: PUSH
22140: LD_INT 6
22142: PUSH
22143: LD_INT 7
22145: PUSH
22146: LD_INT 8
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: LIST
22153: PUSH
22154: LD_OWVAR 67
22158: ARRAY
22159: GREATEREQUAL
22160: OR
22161: PUSH
22162: LD_INT 17
22164: PPUSH
22165: LD_INT 22
22167: PUSH
22168: LD_INT 0
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 25
22177: PUSH
22178: LD_INT 12
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PPUSH
22189: CALL_OW 70
22193: PUSH
22194: LD_INT 0
22196: EQUAL
22197: OR
22198: IFFALSE 21981
// disableHealAI = 0 ;
22200: LD_ADDR_EXP 33
22204: PUSH
22205: LD_INT 0
22207: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22208: LD_ADDR_VAR 0 1
22212: PUSH
22213: LD_INT 22
22215: PUSH
22216: LD_INT 3
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 25
22225: PUSH
22226: LD_INT 12
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PPUSH
22237: CALL_OW 69
22241: PUSH
22242: FOR_IN
22243: IFFALSE 22259
// SetClass ( i , 16 ) ;
22245: LD_VAR 0 1
22249: PPUSH
22250: LD_INT 16
22252: PPUSH
22253: CALL_OW 336
22257: GO 22242
22259: POP
22260: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22261: LD_ADDR_VAR 0 1
22265: PUSH
22266: LD_INT 22
22268: PUSH
22269: LD_INT 3
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 25
22278: PUSH
22279: LD_INT 4
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PPUSH
22290: CALL_OW 69
22294: PUSH
22295: FOR_IN
22296: IFFALSE 22315
// ComMoveXY ( i , 113 , 94 ) ;
22298: LD_VAR 0 1
22302: PPUSH
22303: LD_INT 113
22305: PPUSH
22306: LD_INT 94
22308: PPUSH
22309: CALL_OW 111
22313: GO 22295
22315: POP
22316: POP
// end ;
22317: PPOPN 2
22319: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22320: LD_INT 21
22322: PPUSH
22323: CALL_OW 255
22327: PUSH
22328: LD_INT 3
22330: EQUAL
22331: PUSH
22332: LD_INT 21
22334: PPUSH
22335: CALL_OW 302
22339: AND
22340: PUSH
22341: LD_INT 22
22343: PUSH
22344: LD_INT 3
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 34
22353: PUSH
22354: LD_INT 51
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PPUSH
22365: CALL_OW 69
22369: PUSH
22370: LD_INT 0
22372: EQUAL
22373: AND
22374: IFFALSE 22406
22376: GO 22378
22378: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22379: LD_INT 21
22381: PPUSH
22382: LD_INT 23
22384: PPUSH
22385: LD_INT 1
22387: PPUSH
22388: LD_INT 1
22390: PPUSH
22391: LD_INT 51
22393: PPUSH
22394: CALL_OW 185
// wait ( 5 5$0 ) ;
22398: LD_INT 10500
22400: PPUSH
22401: CALL_OW 67
// enable ;
22405: ENABLE
// end ; end_of_file
22406: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22407: LD_EXP 26
22411: PUSH
22412: LD_INT 0
22414: LESSEQUAL
22415: IFFALSE 22564
22417: GO 22419
22419: DISABLE
22420: LD_INT 0
22422: PPUSH
22423: PPUSH
22424: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22425: LD_ADDR_VAR 0 2
22429: PUSH
22430: LD_INT 22
22432: PUSH
22433: LD_INT 1
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 21
22442: PUSH
22443: LD_INT 3
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 2
22452: PUSH
22453: LD_INT 30
22455: PUSH
22456: LD_INT 0
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 30
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: LIST
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: LIST
22482: PPUSH
22483: CALL_OW 69
22487: ST_TO_ADDR
// for i in tmp do
22488: LD_ADDR_VAR 0 1
22492: PUSH
22493: LD_VAR 0 2
22497: PUSH
22498: FOR_IN
22499: IFFALSE 22532
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22501: LD_ADDR_VAR 0 3
22505: PUSH
22506: LD_VAR 0 3
22510: PUSH
22511: LD_VAR 0 1
22515: PPUSH
22516: CALL_OW 274
22520: PPUSH
22521: LD_INT 1
22523: PPUSH
22524: CALL_OW 275
22528: PLUS
22529: ST_TO_ADDR
22530: GO 22498
22532: POP
22533: POP
// if yourCrates >= needCrates then
22534: LD_VAR 0 3
22538: PUSH
22539: LD_EXP 25
22543: GREATEREQUAL
22544: IFFALSE 22557
// begin FinishMission ( yourCrates ) ;
22546: LD_VAR 0 3
22550: PPUSH
22551: CALL 22567 0 1
// end else
22555: GO 22564
// begin YouLost ( matmin ) ;
22557: LD_STRING matmin
22559: PPUSH
22560: CALL_OW 104
// end ; end ;
22564: PPOPN 3
22566: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22567: LD_INT 0
22569: PPUSH
22570: PPUSH
22571: PPUSH
22572: PPUSH
// if killCounter = 0 then
22573: LD_EXP 47
22577: PUSH
22578: LD_INT 0
22580: EQUAL
22581: IFFALSE 22590
// SetAchievement ( ACH_SURV ) ;
22583: LD_STRING ACH_SURV
22585: PPUSH
22586: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22590: LD_INT 22
22592: PUSH
22593: LD_INT 3
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 21
22602: PUSH
22603: LD_INT 3
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PPUSH
22614: CALL_OW 69
22618: PUSH
22619: LD_INT 0
22621: EQUAL
22622: IFFALSE 22638
// begin wait ( 3 ) ;
22624: LD_INT 3
22626: PPUSH
22627: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22631: LD_STRING ACH_BASEDESTROYER
22633: PPUSH
22634: CALL_OW 543
// end ; m1 := false ;
22638: LD_ADDR_VAR 0 3
22642: PUSH
22643: LD_INT 0
22645: ST_TO_ADDR
// m2 := false ;
22646: LD_ADDR_VAR 0 4
22650: PUSH
22651: LD_INT 0
22653: ST_TO_ADDR
// m3 := false ;
22654: LD_ADDR_VAR 0 5
22658: PUSH
22659: LD_INT 0
22661: ST_TO_ADDR
// if crates + 100 > crates then
22662: LD_VAR 0 1
22666: PUSH
22667: LD_INT 100
22669: PLUS
22670: PUSH
22671: LD_VAR 0 1
22675: GREATER
22676: IFFALSE 22708
// begin AddMedal ( cans , 1 ) ;
22678: LD_STRING cans
22680: PPUSH
22681: LD_INT 1
22683: PPUSH
22684: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22688: LD_INT 1
22690: PPUSH
22691: LD_STRING 06_crates_1
22693: PPUSH
22694: CALL_OW 39
// m1 := true ;
22698: LD_ADDR_VAR 0 3
22702: PUSH
22703: LD_INT 1
22705: ST_TO_ADDR
// end else
22706: GO 22729
// begin AddMedal ( cans , - 1 ) ;
22708: LD_STRING cans
22710: PPUSH
22711: LD_INT 1
22713: NEG
22714: PPUSH
22715: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22719: LD_INT 0
22721: PPUSH
22722: LD_STRING 06_crates_1
22724: PPUSH
22725: CALL_OW 39
// end ; if unitLost < 3 then
22729: LD_EXP 30
22733: PUSH
22734: LD_INT 3
22736: LESS
22737: IFFALSE 22759
// begin AddMedal ( people , 1 ) ;
22739: LD_STRING people
22741: PPUSH
22742: LD_INT 1
22744: PPUSH
22745: CALL_OW 101
// m2 := true ;
22749: LD_ADDR_VAR 0 4
22753: PUSH
22754: LD_INT 1
22756: ST_TO_ADDR
// end else
22757: GO 22770
// begin AddMedal ( people , - 1 ) ;
22759: LD_STRING people
22761: PPUSH
22762: LD_INT 1
22764: NEG
22765: PPUSH
22766: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22770: LD_EXP 28
22774: PPUSH
22775: LD_STRING 06_remoteVehs_1
22777: PPUSH
22778: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22782: LD_EXP 28
22786: PUSH
22787: LD_INT 1
22789: EQUAL
22790: IFFALSE 22812
// begin AddMedal ( remote , 1 ) ;
22792: LD_STRING remote
22794: PPUSH
22795: LD_INT 1
22797: PPUSH
22798: CALL_OW 101
// m3 := true ;
22802: LD_ADDR_VAR 0 5
22806: PUSH
22807: LD_INT 1
22809: ST_TO_ADDR
// end else
22810: GO 22852
// begin if GetTech ( 18 , 1 ) = state_enabled then
22812: LD_INT 18
22814: PPUSH
22815: LD_INT 1
22817: PPUSH
22818: CALL_OW 321
22822: PUSH
22823: LD_INT 1
22825: EQUAL
22826: IFFALSE 22841
// begin AddMedal ( remote , - 1 ) ;
22828: LD_STRING remote
22830: PPUSH
22831: LD_INT 1
22833: NEG
22834: PPUSH
22835: CALL_OW 101
// end else
22839: GO 22852
// begin AddMedal ( remote , - 2 ) ;
22841: LD_STRING remote
22843: PPUSH
22844: LD_INT 2
22846: NEG
22847: PPUSH
22848: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
22852: LD_VAR 0 3
22856: PUSH
22857: LD_VAR 0 4
22861: AND
22862: PUSH
22863: LD_VAR 0 5
22867: AND
22868: IFFALSE 22884
// begin wait ( 3 ) ;
22870: LD_INT 3
22872: PPUSH
22873: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
22877: LD_STRING ACH_ASPEED_6
22879: PPUSH
22880: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
22884: LD_OWVAR 67
22888: PUSH
22889: LD_INT 3
22891: EQUAL
22892: PUSH
22893: LD_VAR 0 3
22897: AND
22898: PUSH
22899: LD_VAR 0 4
22903: AND
22904: PUSH
22905: LD_VAR 0 5
22909: AND
22910: IFFALSE 22922
// SetAchievementEX ( ACH_AMER , 6 ) ;
22912: LD_STRING ACH_AMER
22914: PPUSH
22915: LD_INT 6
22917: PPUSH
22918: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
22922: LD_EXP 20
22926: PPUSH
22927: LD_STRING 06_KurtStatus_1
22929: PPUSH
22930: CALL_OW 39
// GiveMedals ( Main ) ;
22934: LD_STRING Main
22936: PPUSH
22937: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22941: LD_INT 22
22943: PUSH
22944: LD_INT 1
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 21
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 50
22963: PUSH
22964: EMPTY
22965: LIST
22966: PUSH
22967: LD_INT 2
22969: PUSH
22970: LD_INT 25
22972: PUSH
22973: LD_INT 1
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 25
22982: PUSH
22983: LD_INT 2
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 25
22992: PUSH
22993: LD_INT 3
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 25
23002: PUSH
23003: LD_INT 4
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: PPUSH
23023: CALL_OW 69
23027: PPUSH
23028: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23032: LD_EXP 1
23036: PPUSH
23037: LD_EXP 43
23041: PUSH
23042: LD_STRING JMM
23044: STR
23045: PPUSH
23046: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23050: LD_EXP 2
23054: PPUSH
23055: LD_EXP 43
23059: PUSH
23060: LD_STRING Lisa
23062: STR
23063: PPUSH
23064: CALL 6120 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23068: LD_EXP 3
23072: PPUSH
23073: LD_EXP 43
23077: PUSH
23078: LD_STRING Bobby
23080: STR
23081: PPUSH
23082: CALL 6120 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23086: LD_EXP 4
23090: PPUSH
23091: LD_EXP 43
23095: PUSH
23096: LD_STRING Cyrus
23098: STR
23099: PPUSH
23100: CALL 6120 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23104: LD_EXP 5
23108: PPUSH
23109: LD_EXP 43
23113: PUSH
23114: LD_STRING Frank
23116: STR
23117: PPUSH
23118: CALL 6120 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23122: LD_EXP 6
23126: PPUSH
23127: LD_EXP 43
23131: PUSH
23132: LD_STRING Brown
23134: STR
23135: PPUSH
23136: CALL 6120 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23140: LD_EXP 7
23144: PPUSH
23145: LD_EXP 43
23149: PUSH
23150: LD_STRING Donaldson
23152: STR
23153: PPUSH
23154: CALL 6120 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23158: LD_EXP 8
23162: PPUSH
23163: LD_EXP 43
23167: PUSH
23168: LD_STRING Gladstone
23170: STR
23171: PPUSH
23172: CALL 6120 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23176: LD_EXP 9
23180: PPUSH
23181: LD_EXP 43
23185: PUSH
23186: LD_STRING Denis
23188: STR
23189: PPUSH
23190: CALL 6120 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23194: LD_EXP 15
23198: PPUSH
23199: LD_EXP 43
23203: PUSH
23204: LD_STRING Joan
23206: STR
23207: PPUSH
23208: CALL 6120 0 2
// if IsLive ( Joan ) then
23212: LD_EXP 15
23216: PPUSH
23217: CALL_OW 300
23221: IFFALSE 23235
// SaveCharacters ( Joan , Joan ) ;
23223: LD_EXP 15
23227: PPUSH
23228: LD_STRING Joan
23230: PPUSH
23231: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23235: LD_EXP 16
23239: PPUSH
23240: LD_STRING 06_JoanStatus_1
23242: PPUSH
23243: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23247: LD_INT 50
23249: PUSH
23250: EMPTY
23251: LIST
23252: PUSH
23253: LD_INT 22
23255: PUSH
23256: LD_INT 1
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 21
23265: PUSH
23266: LD_INT 1
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 2
23275: PUSH
23276: LD_INT 25
23278: PUSH
23279: LD_INT 1
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 25
23288: PUSH
23289: LD_INT 2
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 25
23298: PUSH
23299: LD_INT 3
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 25
23308: PUSH
23309: LD_INT 4
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: PPUSH
23329: CALL_OW 69
23333: PUSH
23334: LD_EXP 1
23338: PUSH
23339: LD_EXP 2
23343: PUSH
23344: LD_EXP 3
23348: PUSH
23349: LD_EXP 4
23353: PUSH
23354: LD_EXP 5
23358: PUSH
23359: LD_EXP 6
23363: PUSH
23364: LD_EXP 7
23368: PUSH
23369: LD_EXP 8
23373: PUSH
23374: LD_EXP 9
23378: PUSH
23379: LD_EXP 15
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: DIFF
23396: PPUSH
23397: LD_STRING 06_other_survivors
23399: PPUSH
23400: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23404: LD_INT 50
23406: PUSH
23407: EMPTY
23408: LIST
23409: PUSH
23410: LD_INT 22
23412: PUSH
23413: LD_INT 1
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 21
23422: PUSH
23423: LD_INT 1
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 2
23432: PUSH
23433: LD_INT 25
23435: PUSH
23436: LD_INT 12
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 25
23445: PUSH
23446: LD_INT 16
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: LIST
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: PPUSH
23464: CALL_OW 69
23468: PPUSH
23469: LD_STRING 06_other_apemans
23471: PPUSH
23472: CALL_OW 38
// YouWin ;
23476: CALL_OW 103
// end ; end_of_file
23480: LD_VAR 0 2
23484: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23485: LD_EXP 39
23489: PUSH
23490: LD_INT 3
23492: EQUAL
23493: IFFALSE 23608
23495: GO 23497
23497: DISABLE
// begin enable ;
23498: ENABLE
// sendedConvoys = 0 ;
23499: LD_ADDR_EXP 39
23503: PUSH
23504: LD_INT 0
23506: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23507: LD_INT 6
23509: PPUSH
23510: LD_INT 3
23512: PPUSH
23513: LD_INT 5
23515: PPUSH
23516: LD_INT 10
23518: PPUSH
23519: CALL_OW 12
23523: PUSH
23524: LD_INT 5
23526: PPUSH
23527: LD_INT 11
23529: PPUSH
23530: CALL_OW 12
23534: PUSH
23535: LD_INT 8
23537: PPUSH
23538: LD_INT 12
23540: PPUSH
23541: CALL_OW 12
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: LIST
23550: PUSH
23551: LD_OWVAR 67
23555: ARRAY
23556: PPUSH
23557: LD_INT 0
23559: PPUSH
23560: LD_INT 0
23562: PPUSH
23563: LD_INT 0
23565: PPUSH
23566: LD_INT 0
23568: PPUSH
23569: LD_EXP 34
23573: PPUSH
23574: LD_EXP 35
23578: PPUSH
23579: CALL_OW 12
23583: PPUSH
23584: LD_INT 16
23586: PPUSH
23587: LD_INT 15
23589: PPUSH
23590: LD_INT 1
23592: PPUSH
23593: LD_INT 1
23595: PPUSH
23596: LD_INT 2
23598: PPUSH
23599: CALL_OW 12
23603: PPUSH
23604: CALL 10539 0 12
// end ; end_of_file
23608: END
// export function PrepareNature ; var i , un ; begin
23609: LD_INT 0
23611: PPUSH
23612: PPUSH
23613: PPUSH
// for i = 1 to Difficulty + 2 do
23614: LD_ADDR_VAR 0 2
23618: PUSH
23619: DOUBLE
23620: LD_INT 1
23622: DEC
23623: ST_TO_ADDR
23624: LD_OWVAR 67
23628: PUSH
23629: LD_INT 2
23631: PLUS
23632: PUSH
23633: FOR_TO
23634: IFFALSE 23743
// begin hc_sex = sex_male ;
23636: LD_ADDR_OWVAR 27
23640: PUSH
23641: LD_INT 1
23643: ST_TO_ADDR
// uc_side = 0 ;
23644: LD_ADDR_OWVAR 20
23648: PUSH
23649: LD_INT 0
23651: ST_TO_ADDR
// uc_nation = nation_nature ;
23652: LD_ADDR_OWVAR 21
23656: PUSH
23657: LD_INT 0
23659: ST_TO_ADDR
// hc_class = class_tiger ;
23660: LD_ADDR_OWVAR 28
23664: PUSH
23665: LD_INT 14
23667: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23668: LD_ADDR_OWVAR 31
23672: PUSH
23673: LD_EXP 35
23677: PUSH
23678: LD_INT 0
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: LD_INT 0
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23693: LD_ADDR_OWVAR 35
23697: PUSH
23698: LD_INT 5
23700: NEG
23701: PPUSH
23702: LD_INT 5
23704: PPUSH
23705: CALL_OW 12
23709: PUSH
23710: LD_OWVAR 67
23714: MUL
23715: ST_TO_ADDR
// un = CreateHuman ;
23716: LD_ADDR_VAR 0 3
23720: PUSH
23721: CALL_OW 44
23725: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23726: LD_VAR 0 3
23730: PPUSH
23731: LD_INT 18
23733: PPUSH
23734: LD_INT 0
23736: PPUSH
23737: CALL_OW 49
// end ;
23741: GO 23633
23743: POP
23744: POP
// for i = 1 to rand ( 3 , 4 ) do
23745: LD_ADDR_VAR 0 2
23749: PUSH
23750: DOUBLE
23751: LD_INT 1
23753: DEC
23754: ST_TO_ADDR
23755: LD_INT 3
23757: PPUSH
23758: LD_INT 4
23760: PPUSH
23761: CALL_OW 12
23765: PUSH
23766: FOR_TO
23767: IFFALSE 23861
// begin hc_sex = sex_male ;
23769: LD_ADDR_OWVAR 27
23773: PUSH
23774: LD_INT 1
23776: ST_TO_ADDR
// uc_side = 0 ;
23777: LD_ADDR_OWVAR 20
23781: PUSH
23782: LD_INT 0
23784: ST_TO_ADDR
// uc_nation = nation_nature ;
23785: LD_ADDR_OWVAR 21
23789: PUSH
23790: LD_INT 0
23792: ST_TO_ADDR
// hc_class = 18 ;
23793: LD_ADDR_OWVAR 28
23797: PUSH
23798: LD_INT 18
23800: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23801: LD_ADDR_OWVAR 31
23805: PUSH
23806: LD_EXP 35
23810: PUSH
23811: LD_INT 0
23813: PUSH
23814: LD_INT 0
23816: PUSH
23817: LD_INT 0
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: ST_TO_ADDR
// hc_agressivity = 0 ;
23826: LD_ADDR_OWVAR 35
23830: PUSH
23831: LD_INT 0
23833: ST_TO_ADDR
// un = CreateHuman ;
23834: LD_ADDR_VAR 0 3
23838: PUSH
23839: CALL_OW 44
23843: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23844: LD_VAR 0 3
23848: PPUSH
23849: LD_INT 18
23851: PPUSH
23852: LD_INT 0
23854: PPUSH
23855: CALL_OW 49
// end ;
23859: GO 23766
23861: POP
23862: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
23863: LD_ADDR_VAR 0 2
23867: PUSH
23868: DOUBLE
23869: LD_INT 1
23871: DEC
23872: ST_TO_ADDR
23873: LD_INT 1
23875: PPUSH
23876: LD_INT 3
23878: PPUSH
23879: CALL_OW 12
23883: PUSH
23884: LD_OWVAR 67
23888: PLUS
23889: PUSH
23890: FOR_TO
23891: IFFALSE 24040
// begin hc_sex = sex_male ;
23893: LD_ADDR_OWVAR 27
23897: PUSH
23898: LD_INT 1
23900: ST_TO_ADDR
// uc_side = 0 ;
23901: LD_ADDR_OWVAR 20
23905: PUSH
23906: LD_INT 0
23908: ST_TO_ADDR
// uc_nation = nation_nature ;
23909: LD_ADDR_OWVAR 21
23913: PUSH
23914: LD_INT 0
23916: ST_TO_ADDR
// hc_class = class_apeman ;
23917: LD_ADDR_OWVAR 28
23921: PUSH
23922: LD_INT 12
23924: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23925: LD_ADDR_OWVAR 31
23929: PUSH
23930: LD_INT 2
23932: PPUSH
23933: LD_INT 5
23935: PPUSH
23936: CALL_OW 12
23940: PUSH
23941: LD_INT 0
23943: PPUSH
23944: LD_INT 2
23946: PPUSH
23947: CALL_OW 12
23951: PUSH
23952: LD_INT 0
23954: PUSH
23955: LD_INT 0
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
23964: LD_ADDR_OWVAR 35
23968: PUSH
23969: LD_INT 20
23971: PPUSH
23972: LD_INT 30
23974: PPUSH
23975: CALL_OW 12
23979: PUSH
23980: LD_INT 30
23982: PPUSH
23983: LD_INT 40
23985: PPUSH
23986: CALL_OW 12
23990: PUSH
23991: LD_INT 40
23993: PPUSH
23994: LD_INT 50
23996: PPUSH
23997: CALL_OW 12
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: LIST
24006: PUSH
24007: LD_OWVAR 67
24011: ARRAY
24012: ST_TO_ADDR
// un = CreateHuman ;
24013: LD_ADDR_VAR 0 3
24017: PUSH
24018: CALL_OW 44
24022: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
24023: LD_VAR 0 3
24027: PPUSH
24028: LD_INT 19
24030: PPUSH
24031: LD_INT 0
24033: PPUSH
24034: CALL_OW 49
// end ;
24038: GO 23890
24040: POP
24041: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
24042: LD_ADDR_VAR 0 2
24046: PUSH
24047: DOUBLE
24048: LD_INT 1
24050: DEC
24051: ST_TO_ADDR
24052: LD_INT 5
24054: PPUSH
24055: LD_INT 6
24057: PPUSH
24058: CALL_OW 12
24062: PUSH
24063: LD_OWVAR 67
24067: PLUS
24068: PUSH
24069: FOR_TO
24070: IFFALSE 24178
// begin hc_sex = sex_male ;
24072: LD_ADDR_OWVAR 27
24076: PUSH
24077: LD_INT 1
24079: ST_TO_ADDR
// uc_side = 0 ;
24080: LD_ADDR_OWVAR 20
24084: PUSH
24085: LD_INT 0
24087: ST_TO_ADDR
// uc_nation = nation_nature ;
24088: LD_ADDR_OWVAR 21
24092: PUSH
24093: LD_INT 0
24095: ST_TO_ADDR
// hc_class = class_apeman ;
24096: LD_ADDR_OWVAR 28
24100: PUSH
24101: LD_INT 12
24103: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24104: LD_ADDR_OWVAR 31
24108: PUSH
24109: LD_INT 2
24111: PPUSH
24112: LD_INT 5
24114: PPUSH
24115: CALL_OW 12
24119: PUSH
24120: LD_INT 0
24122: PPUSH
24123: LD_INT 2
24125: PPUSH
24126: CALL_OW 12
24130: PUSH
24131: LD_INT 0
24133: PUSH
24134: LD_INT 0
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: ST_TO_ADDR
// hc_agressivity = 0 ;
24143: LD_ADDR_OWVAR 35
24147: PUSH
24148: LD_INT 0
24150: ST_TO_ADDR
// un = CreateHuman ;
24151: LD_ADDR_VAR 0 3
24155: PUSH
24156: CALL_OW 44
24160: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24161: LD_VAR 0 3
24165: PPUSH
24166: LD_INT 20
24168: PPUSH
24169: LD_INT 0
24171: PPUSH
24172: CALL_OW 49
// end ;
24176: GO 24069
24178: POP
24179: POP
// end ; end_of_file end_of_file
24180: LD_VAR 0 1
24184: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
24185: GO 24187
24187: DISABLE
// begin ru_radar := 98 ;
24188: LD_ADDR_EXP 51
24192: PUSH
24193: LD_INT 98
24195: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24196: LD_ADDR_EXP 52
24200: PUSH
24201: LD_INT 89
24203: ST_TO_ADDR
// us_hack := 99 ;
24204: LD_ADDR_EXP 53
24208: PUSH
24209: LD_INT 99
24211: ST_TO_ADDR
// us_artillery := 97 ;
24212: LD_ADDR_EXP 54
24216: PUSH
24217: LD_INT 97
24219: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24220: LD_ADDR_EXP 55
24224: PUSH
24225: LD_INT 91
24227: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
24228: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
24229: LD_INT 0
24231: PPUSH
24232: PPUSH
24233: PPUSH
24234: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24235: LD_VAR 0 1
24239: PPUSH
24240: CALL_OW 264
24244: PUSH
24245: LD_EXP 55
24249: EQUAL
24250: IFFALSE 24322
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24252: LD_INT 68
24254: PPUSH
24255: LD_VAR 0 1
24259: PPUSH
24260: CALL_OW 255
24264: PPUSH
24265: CALL_OW 321
24269: PUSH
24270: LD_INT 2
24272: EQUAL
24273: IFFALSE 24285
// eff := 70 else
24275: LD_ADDR_VAR 0 6
24279: PUSH
24280: LD_INT 70
24282: ST_TO_ADDR
24283: GO 24293
// eff := 30 ;
24285: LD_ADDR_VAR 0 6
24289: PUSH
24290: LD_INT 30
24292: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24293: LD_VAR 0 1
24297: PPUSH
24298: CALL_OW 250
24302: PPUSH
24303: LD_VAR 0 1
24307: PPUSH
24308: CALL_OW 251
24312: PPUSH
24313: LD_VAR 0 6
24317: PPUSH
24318: CALL_OW 495
// end ; end ;
24322: LD_VAR 0 4
24326: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
24327: LD_INT 0
24329: PPUSH
24330: PPUSH
24331: PPUSH
24332: PPUSH
24333: PPUSH
24334: PPUSH
// if cmd = 124 then
24335: LD_VAR 0 1
24339: PUSH
24340: LD_INT 124
24342: EQUAL
24343: IFFALSE 24549
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
24345: LD_ADDR_VAR 0 5
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: LD_INT 34
24355: PUSH
24356: LD_INT 53
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 34
24365: PUSH
24366: LD_INT 14
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: LIST
24377: PPUSH
24378: CALL_OW 69
24382: ST_TO_ADDR
// if not tmp then
24383: LD_VAR 0 5
24387: NOT
24388: IFFALSE 24392
// exit ;
24390: GO 24549
// for i in tmp do
24392: LD_ADDR_VAR 0 3
24396: PUSH
24397: LD_VAR 0 5
24401: PUSH
24402: FOR_IN
24403: IFFALSE 24547
// begin taskList := GetTaskList ( i ) ;
24405: LD_ADDR_VAR 0 6
24409: PUSH
24410: LD_VAR 0 3
24414: PPUSH
24415: CALL_OW 437
24419: ST_TO_ADDR
// if not taskList then
24420: LD_VAR 0 6
24424: NOT
24425: IFFALSE 24429
// continue ;
24427: GO 24402
// for j = 1 to taskList do
24429: LD_ADDR_VAR 0 4
24433: PUSH
24434: DOUBLE
24435: LD_INT 1
24437: DEC
24438: ST_TO_ADDR
24439: LD_VAR 0 6
24443: PUSH
24444: FOR_TO
24445: IFFALSE 24543
// if taskList [ j ] [ 1 ] = | then
24447: LD_VAR 0 6
24451: PUSH
24452: LD_VAR 0 4
24456: ARRAY
24457: PUSH
24458: LD_INT 1
24460: ARRAY
24461: PUSH
24462: LD_STRING |
24464: EQUAL
24465: IFFALSE 24541
// begin _taskList := Delete ( taskList , 1 ) ;
24467: LD_ADDR_VAR 0 7
24471: PUSH
24472: LD_VAR 0 6
24476: PPUSH
24477: LD_INT 1
24479: PPUSH
24480: CALL_OW 3
24484: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
24485: LD_VAR 0 3
24489: PPUSH
24490: LD_VAR 0 7
24494: PPUSH
24495: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
24499: LD_VAR 0 3
24503: PPUSH
24504: LD_VAR 0 6
24508: PUSH
24509: LD_VAR 0 4
24513: ARRAY
24514: PUSH
24515: LD_INT 2
24517: ARRAY
24518: PPUSH
24519: LD_VAR 0 6
24523: PUSH
24524: LD_VAR 0 4
24528: ARRAY
24529: PUSH
24530: LD_INT 3
24532: ARRAY
24533: PPUSH
24534: LD_INT 8
24536: PPUSH
24537: CALL 24554 0 4
// end ;
24541: GO 24444
24543: POP
24544: POP
// end ;
24545: GO 24402
24547: POP
24548: POP
// end ; end ;
24549: LD_VAR 0 2
24553: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24554: LD_INT 0
24556: PPUSH
24557: PPUSH
24558: PPUSH
24559: PPUSH
24560: PPUSH
24561: PPUSH
24562: PPUSH
24563: PPUSH
24564: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24565: LD_VAR 0 1
24569: NOT
24570: PUSH
24571: LD_VAR 0 2
24575: PPUSH
24576: LD_VAR 0 3
24580: PPUSH
24581: CALL_OW 488
24585: NOT
24586: OR
24587: PUSH
24588: LD_VAR 0 4
24592: NOT
24593: OR
24594: IFFALSE 24598
// exit ;
24596: GO 24938
// list := [ ] ;
24598: LD_ADDR_VAR 0 13
24602: PUSH
24603: EMPTY
24604: ST_TO_ADDR
// if x - r < 0 then
24605: LD_VAR 0 2
24609: PUSH
24610: LD_VAR 0 4
24614: MINUS
24615: PUSH
24616: LD_INT 0
24618: LESS
24619: IFFALSE 24631
// min_x := 0 else
24621: LD_ADDR_VAR 0 7
24625: PUSH
24626: LD_INT 0
24628: ST_TO_ADDR
24629: GO 24647
// min_x := x - r ;
24631: LD_ADDR_VAR 0 7
24635: PUSH
24636: LD_VAR 0 2
24640: PUSH
24641: LD_VAR 0 4
24645: MINUS
24646: ST_TO_ADDR
// if y - r < 0 then
24647: LD_VAR 0 3
24651: PUSH
24652: LD_VAR 0 4
24656: MINUS
24657: PUSH
24658: LD_INT 0
24660: LESS
24661: IFFALSE 24673
// min_y := 0 else
24663: LD_ADDR_VAR 0 8
24667: PUSH
24668: LD_INT 0
24670: ST_TO_ADDR
24671: GO 24689
// min_y := y - r ;
24673: LD_ADDR_VAR 0 8
24677: PUSH
24678: LD_VAR 0 3
24682: PUSH
24683: LD_VAR 0 4
24687: MINUS
24688: ST_TO_ADDR
// max_x := x + r ;
24689: LD_ADDR_VAR 0 9
24693: PUSH
24694: LD_VAR 0 2
24698: PUSH
24699: LD_VAR 0 4
24703: PLUS
24704: ST_TO_ADDR
// max_y := y + r ;
24705: LD_ADDR_VAR 0 10
24709: PUSH
24710: LD_VAR 0 3
24714: PUSH
24715: LD_VAR 0 4
24719: PLUS
24720: ST_TO_ADDR
// for _x = min_x to max_x do
24721: LD_ADDR_VAR 0 11
24725: PUSH
24726: DOUBLE
24727: LD_VAR 0 7
24731: DEC
24732: ST_TO_ADDR
24733: LD_VAR 0 9
24737: PUSH
24738: FOR_TO
24739: IFFALSE 24856
// for _y = min_y to max_y do
24741: LD_ADDR_VAR 0 12
24745: PUSH
24746: DOUBLE
24747: LD_VAR 0 8
24751: DEC
24752: ST_TO_ADDR
24753: LD_VAR 0 10
24757: PUSH
24758: FOR_TO
24759: IFFALSE 24852
// begin if not ValidHex ( _x , _y ) then
24761: LD_VAR 0 11
24765: PPUSH
24766: LD_VAR 0 12
24770: PPUSH
24771: CALL_OW 488
24775: NOT
24776: IFFALSE 24780
// continue ;
24778: GO 24758
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24780: LD_VAR 0 11
24784: PPUSH
24785: LD_VAR 0 12
24789: PPUSH
24790: CALL_OW 351
24794: PUSH
24795: LD_VAR 0 11
24799: PPUSH
24800: LD_VAR 0 12
24804: PPUSH
24805: CALL_OW 554
24809: AND
24810: IFFALSE 24850
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24812: LD_ADDR_VAR 0 13
24816: PUSH
24817: LD_VAR 0 13
24821: PPUSH
24822: LD_VAR 0 13
24826: PUSH
24827: LD_INT 1
24829: PLUS
24830: PPUSH
24831: LD_VAR 0 11
24835: PUSH
24836: LD_VAR 0 12
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PPUSH
24845: CALL_OW 2
24849: ST_TO_ADDR
// end ;
24850: GO 24758
24852: POP
24853: POP
24854: GO 24738
24856: POP
24857: POP
// if not list then
24858: LD_VAR 0 13
24862: NOT
24863: IFFALSE 24867
// exit ;
24865: GO 24938
// for i in list do
24867: LD_ADDR_VAR 0 6
24871: PUSH
24872: LD_VAR 0 13
24876: PUSH
24877: FOR_IN
24878: IFFALSE 24936
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24880: LD_VAR 0 1
24884: PPUSH
24885: LD_STRING M
24887: PUSH
24888: LD_VAR 0 6
24892: PUSH
24893: LD_INT 1
24895: ARRAY
24896: PUSH
24897: LD_VAR 0 6
24901: PUSH
24902: LD_INT 2
24904: ARRAY
24905: PUSH
24906: LD_INT 0
24908: PUSH
24909: LD_INT 0
24911: PUSH
24912: LD_INT 0
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: PUSH
24927: EMPTY
24928: LIST
24929: PPUSH
24930: CALL_OW 447
24934: GO 24877
24936: POP
24937: POP
// end ;
24938: LD_VAR 0 5
24942: RET
