// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 ] [ Difficulty ] ;
 177: LD_ADDR_EXP 48
 181: PUSH
 182: LD_INT 3
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: LD_INT 6
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: LIST
 195: PUSH
 196: LD_OWVAR 67
 200: ARRAY
 201: ST_TO_ADDR
// sendedConvoys = 0 ;
 202: LD_ADDR_EXP 39
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// tamedApemans = 0 ;
 210: LD_ADDR_EXP 32
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ignoreTarget := [ ] ;
 218: LD_ADDR_EXP 45
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// arrivals := [ ] ;
 225: LD_ADDR_EXP 46
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// unitLost = 0 ;
 232: LD_ADDR_EXP 30
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 240: LD_ADDR_EXP 31
 244: PUSH
 245: EMPTY
 246: ST_TO_ADDR
// russianTanks = [ ] ;
 247: LD_ADDR_EXP 36
 251: PUSH
 252: EMPTY
 253: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 254: LD_ADDR_EXP 37
 258: PUSH
 259: EMPTY
 260: ST_TO_ADDR
// disableHealAI = 0 ;
 261: LD_ADDR_EXP 33
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// strings = [ ] ;
 269: LD_ADDR_EXP 27
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 276: LD_INT 4
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: CALL_OW 343
// PrepareDifficulty ;
 286: CALL 6612 0 0
// CreateNature ;
 290: CALL 23899 0 0
// PrepareRussian ;
 294: CALL 5835 0 0
// PrepareVehicles ;
 298: CALL 1629 0 0
// PrepareHeroes ;
 302: CALL 594 0 0
// PrepareOthers ;
 306: CALL 2050 0 0
// PreparePlayerApemans ;
 310: CALL 2192 0 0
// end ;
 314: END
// every 0 0$1 trigger debugMode do var i ;
 315: LD_EXP 42
 319: IFFALSE 546
 321: GO 323
 323: DISABLE
 324: LD_INT 0
 326: PPUSH
// begin enable ;
 327: ENABLE
// fogoff ( true ) ;
 328: LD_INT 1
 330: PPUSH
 331: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 21
 352: PUSH
 353: LD_INT 1
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 386
// SetLives ( i , 1000 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: LD_INT 1000
 379: PPUSH
 380: CALL_OW 234
 384: GO 369
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 30
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: PUSH
 422: FOR_IN
 423: IFFALSE 447
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 425: LD_VAR 0 1
 429: PPUSH
 430: CALL_OW 274
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_INT 9999
 440: PPUSH
 441: CALL_OW 277
 445: GO 422
 447: POP
 448: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 449: LD_ADDR_VAR 0 1
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// if IsSelected ( rudepo ) then
 510: LD_INT 2
 512: PPUSH
 513: CALL_OW 306
 517: IFFALSE 527
// your_side = 3 ;
 519: LD_ADDR_OWVAR 2
 523: PUSH
 524: LD_INT 3
 526: ST_TO_ADDR
// if IsSelected ( JMM ) then
 527: LD_EXP 1
 531: PPUSH
 532: CALL_OW 306
 536: IFFALSE 546
// your_side = 1 ;
 538: LD_ADDR_OWVAR 2
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// end ;
 546: PPOPN 1
 548: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 34
 561: PUSH
 562: LD_INT 12
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: LD_INT 3
 580: GREATEREQUAL
 581: IFFALSE 593
 583: GO 585
 585: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 586: LD_STRING ACH_FULLCARGO
 588: PPUSH
 589: CALL_OW 543
 593: END
// export function PrepareHeroes ; var veh ; begin
 594: LD_INT 0
 596: PPUSH
 597: PPUSH
// uc_side = 1 ;
 598: LD_ADDR_OWVAR 20
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// uc_nation = 1 ;
 606: LD_ADDR_OWVAR 21
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 614: LD_ADDR_EXP 1
 618: PUSH
 619: LD_STRING JMM
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: LD_EXP 44
 629: PPUSH
 630: CALL 39057 0 3
 634: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 635: LD_ADDR_EXP 14
 639: PUSH
 640: LD_STRING Harisson
 642: PPUSH
 643: LD_INT 0
 645: PPUSH
 646: LD_STRING 
 648: PPUSH
 649: CALL 39057 0 3
 653: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING DeltaDoctor
 661: PPUSH
 662: CALL_OW 34
 666: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 667: LD_ADDR_VAR 0 2
 671: PUSH
 672: LD_INT 22
 674: PUSH
 675: LD_INT 1
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: PUSH
 682: LD_INT 21
 684: PUSH
 685: LD_INT 2
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: LD_INT 58
 694: PUSH
 695: EMPTY
 696: LIST
 697: PUSH
 698: EMPTY
 699: LIST
 700: LIST
 701: LIST
 702: PPUSH
 703: CALL_OW 69
 707: ST_TO_ADDR
// if veh > 0 then
 708: LD_VAR 0 2
 712: PUSH
 713: LD_INT 0
 715: GREATER
 716: IFFALSE 738
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_VAR 0 2
 727: PUSH
 728: LD_INT 1
 730: ARRAY
 731: PPUSH
 732: CALL_OW 52
// end else
 736: GO 753
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_INT 2
 745: PPUSH
 746: LD_INT 0
 748: PPUSH
 749: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 753: LD_STRING LisaIn06
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 30
 763: PUSH
 764: LD_INT 1
 766: EQUAL
 767: IFFALSE 876
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 769: LD_ADDR_VAR 0 2
 773: PUSH
 774: LD_INT 22
 776: PUSH
 777: LD_INT 1
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 21
 786: PUSH
 787: LD_INT 2
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 58
 796: PUSH
 797: EMPTY
 798: LIST
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PPUSH
 805: CALL_OW 69
 809: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 810: LD_ADDR_EXP 2
 814: PUSH
 815: LD_STRING Lisa
 817: PPUSH
 818: LD_INT 1
 820: PPUSH
 821: LD_EXP 44
 825: PPUSH
 826: CALL 39057 0 3
 830: ST_TO_ADDR
// if veh > 0 then
 831: LD_VAR 0 2
 835: PUSH
 836: LD_INT 0
 838: GREATER
 839: IFFALSE 861
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 841: LD_EXP 2
 845: PPUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: PPUSH
 855: CALL_OW 52
// end else
 859: GO 876
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 861: LD_EXP 2
 865: PPUSH
 866: LD_INT 2
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 876: LD_STRING BobbyIn06
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL_OW 30
 886: PUSH
 887: LD_INT 1
 889: EQUAL
 890: IFFALSE 999
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: LD_INT 22
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 21
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: LD_INT 58
 919: PUSH
 920: EMPTY
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PPUSH
 928: CALL_OW 69
 932: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 933: LD_ADDR_EXP 3
 937: PUSH
 938: LD_STRING Bobby
 940: PPUSH
 941: LD_INT 1
 943: PPUSH
 944: LD_EXP 44
 948: PPUSH
 949: CALL 39057 0 3
 953: ST_TO_ADDR
// if veh > 0 then
 954: LD_VAR 0 2
 958: PUSH
 959: LD_INT 0
 961: GREATER
 962: IFFALSE 984
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 964: LD_EXP 3
 968: PPUSH
 969: LD_VAR 0 2
 973: PUSH
 974: LD_INT 1
 976: ARRAY
 977: PPUSH
 978: CALL_OW 52
// end else
 982: GO 999
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 984: LD_EXP 3
 988: PPUSH
 989: LD_INT 2
 991: PPUSH
 992: LD_INT 0
 994: PPUSH
 995: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 999: LD_STRING CyrusIn06
1001: PPUSH
1002: LD_INT 0
1004: PPUSH
1005: CALL_OW 30
1009: PUSH
1010: LD_INT 1
1012: EQUAL
1013: IFFALSE 1122
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1015: LD_ADDR_VAR 0 2
1019: PUSH
1020: LD_INT 22
1022: PUSH
1023: LD_INT 1
1025: PUSH
1026: EMPTY
1027: LIST
1028: LIST
1029: PUSH
1030: LD_INT 21
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: PUSH
1040: LD_INT 58
1042: PUSH
1043: EMPTY
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: PPUSH
1051: CALL_OW 69
1055: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1056: LD_ADDR_EXP 4
1060: PUSH
1061: LD_STRING Cyrus
1063: PPUSH
1064: LD_INT 1
1066: PPUSH
1067: LD_EXP 44
1071: PPUSH
1072: CALL 39057 0 3
1076: ST_TO_ADDR
// if veh > 0 then
1077: LD_VAR 0 2
1081: PUSH
1082: LD_INT 0
1084: GREATER
1085: IFFALSE 1107
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1087: LD_EXP 4
1091: PPUSH
1092: LD_VAR 0 2
1096: PUSH
1097: LD_INT 1
1099: ARRAY
1100: PPUSH
1101: CALL_OW 52
// end else
1105: GO 1122
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1107: LD_EXP 4
1111: PPUSH
1112: LD_INT 2
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1122: LD_STRING FrankIn06
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL_OW 30
1132: PUSH
1133: LD_INT 1
1135: EQUAL
1136: IFFALSE 1245
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1138: LD_ADDR_VAR 0 2
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 21
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 58
1165: PUSH
1166: EMPTY
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: PPUSH
1174: CALL_OW 69
1178: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
1179: LD_ADDR_EXP 5
1183: PUSH
1184: LD_STRING Frank
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: LD_EXP 44
1194: PPUSH
1195: CALL 39057 0 3
1199: ST_TO_ADDR
// if veh > 0 then
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 0
1207: GREATER
1208: IFFALSE 1230
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1210: LD_EXP 5
1214: PPUSH
1215: LD_VAR 0 2
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 52
// end else
1228: GO 1245
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1230: LD_EXP 5
1234: PPUSH
1235: LD_INT 2
1237: PPUSH
1238: LD_INT 0
1240: PPUSH
1241: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1245: LD_STRING BrownIn06
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: CALL_OW 30
1255: PUSH
1256: LD_INT 1
1258: EQUAL
1259: IFFALSE 1368
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_INT 22
1268: PUSH
1269: LD_INT 1
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: LD_INT 21
1278: PUSH
1279: LD_INT 2
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: LD_INT 58
1288: PUSH
1289: EMPTY
1290: LIST
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: LIST
1296: PPUSH
1297: CALL_OW 69
1301: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1302: LD_ADDR_EXP 6
1306: PUSH
1307: LD_STRING Brown
1309: PPUSH
1310: LD_INT 1
1312: PPUSH
1313: LD_EXP 44
1317: PPUSH
1318: CALL 39057 0 3
1322: ST_TO_ADDR
// if veh > 0 then
1323: LD_VAR 0 2
1327: PUSH
1328: LD_INT 0
1330: GREATER
1331: IFFALSE 1353
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1333: LD_EXP 6
1337: PPUSH
1338: LD_VAR 0 2
1342: PUSH
1343: LD_INT 1
1345: ARRAY
1346: PPUSH
1347: CALL_OW 52
// end else
1351: GO 1368
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1353: LD_EXP 6
1357: PPUSH
1358: LD_INT 2
1360: PPUSH
1361: LD_INT 0
1363: PPUSH
1364: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1368: LD_STRING DonaldsonIn06
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 30
1378: PUSH
1379: LD_INT 1
1381: EQUAL
1382: IFFALSE 1491
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: LD_INT 22
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 2
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: LD_INT 58
1411: PUSH
1412: EMPTY
1413: LIST
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: PPUSH
1420: CALL_OW 69
1424: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1425: LD_ADDR_EXP 7
1429: PUSH
1430: LD_STRING Donaldson
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: LD_EXP 44
1440: PPUSH
1441: CALL 39057 0 3
1445: ST_TO_ADDR
// if veh > 0 then
1446: LD_VAR 0 2
1450: PUSH
1451: LD_INT 0
1453: GREATER
1454: IFFALSE 1476
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1456: LD_EXP 7
1460: PPUSH
1461: LD_VAR 0 2
1465: PUSH
1466: LD_INT 1
1468: ARRAY
1469: PPUSH
1470: CALL_OW 52
// end else
1474: GO 1491
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1476: LD_EXP 7
1480: PPUSH
1481: LD_INT 2
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1491: LD_STRING GladstoneIn06
1493: PPUSH
1494: LD_INT 0
1496: PPUSH
1497: CALL_OW 30
1501: PUSH
1502: LD_INT 1
1504: EQUAL
1505: IFFALSE 1614
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 22
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 21
1524: PUSH
1525: LD_INT 2
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 58
1534: PUSH
1535: EMPTY
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: PPUSH
1543: CALL_OW 69
1547: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
1548: LD_ADDR_EXP 8
1552: PUSH
1553: LD_STRING Gladstone
1555: PPUSH
1556: LD_INT 1
1558: PPUSH
1559: LD_EXP 44
1563: PPUSH
1564: CALL 39057 0 3
1568: ST_TO_ADDR
// if veh > 0 then
1569: LD_VAR 0 2
1573: PUSH
1574: LD_INT 0
1576: GREATER
1577: IFFALSE 1599
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1579: LD_EXP 8
1583: PPUSH
1584: LD_VAR 0 2
1588: PUSH
1589: LD_INT 1
1591: ARRAY
1592: PPUSH
1593: CALL_OW 52
// end else
1597: GO 1614
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1599: LD_EXP 8
1603: PPUSH
1604: LD_INT 2
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1614: LD_INT 66
1616: PPUSH
1617: LD_INT 4
1619: PPUSH
1620: CALL_OW 86
// end ;
1624: LD_VAR 0 1
1628: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1629: LD_INT 0
1631: PPUSH
1632: PPUSH
1633: PPUSH
1634: PPUSH
1635: PPUSH
1636: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1637: LD_ADDR_VAR 0 5
1641: PUSH
1642: LD_STRING 06_VehiclesIn06_1
1644: PPUSH
1645: EMPTY
1646: PPUSH
1647: CALL_OW 30
1651: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1652: LD_ADDR_EXP 40
1656: PUSH
1657: LD_STRING 06_ResourcesInCargo06_1
1659: PPUSH
1660: EMPTY
1661: PPUSH
1662: CALL_OW 30
1666: ST_TO_ADDR
// cargoList = [ ] ;
1667: LD_ADDR_VAR 0 6
1671: PUSH
1672: EMPTY
1673: ST_TO_ADDR
// uc_side = 1 ;
1674: LD_ADDR_OWVAR 20
1678: PUSH
1679: LD_INT 1
1681: ST_TO_ADDR
// if vehicles > 0 then
1682: LD_VAR 0 5
1686: PUSH
1687: LD_INT 0
1689: GREATER
1690: IFFALSE 2045
// begin for i := 1 to vehicles do
1692: LD_ADDR_VAR 0 2
1696: PUSH
1697: DOUBLE
1698: LD_INT 1
1700: DEC
1701: ST_TO_ADDR
1702: LD_VAR 0 5
1706: PUSH
1707: FOR_TO
1708: IFFALSE 1857
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1710: LD_ADDR_OWVAR 21
1714: PUSH
1715: LD_VAR 0 5
1719: PUSH
1720: LD_VAR 0 2
1724: ARRAY
1725: PUSH
1726: LD_INT 1
1728: ARRAY
1729: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1730: LD_ADDR_OWVAR 37
1734: PUSH
1735: LD_VAR 0 5
1739: PUSH
1740: LD_VAR 0 2
1744: ARRAY
1745: PUSH
1746: LD_INT 2
1748: ARRAY
1749: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1750: LD_ADDR_OWVAR 39
1754: PUSH
1755: LD_VAR 0 5
1759: PUSH
1760: LD_VAR 0 2
1764: ARRAY
1765: PUSH
1766: LD_INT 3
1768: ARRAY
1769: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1770: LD_ADDR_OWVAR 38
1774: PUSH
1775: LD_VAR 0 5
1779: PUSH
1780: LD_VAR 0 2
1784: ARRAY
1785: PUSH
1786: LD_INT 4
1788: ARRAY
1789: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1790: LD_ADDR_OWVAR 40
1794: PUSH
1795: LD_VAR 0 5
1799: PUSH
1800: LD_VAR 0 2
1804: ARRAY
1805: PUSH
1806: LD_INT 5
1808: ARRAY
1809: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1810: LD_ADDR_OWVAR 41
1814: PUSH
1815: LD_INT 40
1817: ST_TO_ADDR
// veh = CreateVehicle ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: CALL_OW 45
1827: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1828: LD_VAR 0 4
1832: PPUSH
1833: LD_INT 3
1835: PPUSH
1836: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1840: LD_VAR 0 4
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: LD_INT 0
1850: PPUSH
1851: CALL_OW 49
// end ;
1855: GO 1707
1857: POP
1858: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1859: LD_ADDR_VAR 0 6
1863: PUSH
1864: LD_INT 22
1866: PUSH
1867: LD_INT 1
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 21
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 34
1886: PUSH
1887: LD_INT 12
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PPUSH
1899: CALL_OW 69
1903: ST_TO_ADDR
// if cargoList > 0 then
1904: LD_VAR 0 6
1908: PUSH
1909: LD_INT 0
1911: GREATER
1912: IFFALSE 2045
// for i = 1 to cargoList do
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: DOUBLE
1920: LD_INT 1
1922: DEC
1923: ST_TO_ADDR
1924: LD_VAR 0 6
1928: PUSH
1929: FOR_TO
1930: IFFALSE 2043
// begin if resources > 0 then
1932: LD_EXP 40
1936: PUSH
1937: LD_INT 0
1939: GREATER
1940: IFFALSE 2041
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1942: LD_VAR 0 6
1946: PUSH
1947: LD_VAR 0 2
1951: ARRAY
1952: PPUSH
1953: LD_INT 1
1955: PPUSH
1956: LD_EXP 40
1960: PUSH
1961: LD_VAR 0 2
1965: ARRAY
1966: PUSH
1967: LD_INT 1
1969: ARRAY
1970: PPUSH
1971: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1975: LD_VAR 0 6
1979: PUSH
1980: LD_VAR 0 2
1984: ARRAY
1985: PPUSH
1986: LD_INT 2
1988: PPUSH
1989: LD_EXP 40
1993: PUSH
1994: LD_VAR 0 2
1998: ARRAY
1999: PUSH
2000: LD_INT 2
2002: ARRAY
2003: PPUSH
2004: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
2008: LD_VAR 0 6
2012: PUSH
2013: LD_VAR 0 2
2017: ARRAY
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_EXP 40
2026: PUSH
2027: LD_VAR 0 2
2031: ARRAY
2032: PUSH
2033: LD_INT 3
2035: ARRAY
2036: PPUSH
2037: CALL_OW 291
// end ; end ;
2041: GO 1929
2043: POP
2044: POP
// end ; end ;
2045: LD_VAR 0 1
2049: RET
// export function PrepareOthers ; var i , veh ; begin
2050: LD_INT 0
2052: PPUSH
2053: PPUSH
2054: PPUSH
// uc_side = 1 ;
2055: LD_ADDR_OWVAR 20
2059: PUSH
2060: LD_INT 1
2062: ST_TO_ADDR
// uc_nation = 1 ;
2063: LD_ADDR_OWVAR 21
2067: PUSH
2068: LD_INT 1
2070: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2071: LD_ADDR_EXP 11
2075: PUSH
2076: LD_STRING OthersIn06
2078: PPUSH
2079: CALL_OW 31
2083: ST_TO_ADDR
// for i in others do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: LD_EXP 11
2093: PUSH
2094: FOR_IN
2095: IFFALSE 2185
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2097: LD_ADDR_VAR 0 3
2101: PUSH
2102: LD_INT 22
2104: PUSH
2105: LD_INT 1
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 21
2114: PUSH
2115: LD_INT 2
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 58
2124: PUSH
2125: EMPTY
2126: LIST
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL_OW 69
2137: ST_TO_ADDR
// if veh > 0 then
2138: LD_VAR 0 3
2142: PUSH
2143: LD_INT 0
2145: GREATER
2146: IFFALSE 2168
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2148: LD_VAR 0 2
2152: PPUSH
2153: LD_VAR 0 3
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: CALL_OW 52
// end else
2166: GO 2183
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2168: LD_VAR 0 2
2172: PPUSH
2173: LD_INT 2
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 49
// end ; end ;
2183: GO 2094
2185: POP
2186: POP
// end ;
2187: LD_VAR 0 1
2191: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2192: LD_INT 0
2194: PPUSH
2195: PPUSH
2196: PPUSH
// uc_side = 1 ;
2197: LD_ADDR_OWVAR 20
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// uc_nation = 0 ;
2205: LD_ADDR_OWVAR 21
2209: PUSH
2210: LD_INT 0
2212: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2213: LD_ADDR_EXP 12
2217: PUSH
2218: LD_STRING ApeIn06
2220: PPUSH
2221: CALL_OW 31
2225: ST_TO_ADDR
// for i in ape do
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: LD_EXP 12
2235: PUSH
2236: FOR_IN
2237: IFFALSE 2256
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2239: LD_VAR 0 2
2243: PPUSH
2244: LD_INT 2
2246: PPUSH
2247: LD_INT 0
2249: PPUSH
2250: CALL_OW 49
2254: GO 2236
2256: POP
2257: POP
// end ;
2258: LD_VAR 0 1
2262: RET
// export function PrepareDenis ; var xy , i ; begin
2263: LD_INT 0
2265: PPUSH
2266: PPUSH
2267: PPUSH
// uc_side = 4 ;
2268: LD_ADDR_OWVAR 20
2272: PUSH
2273: LD_INT 4
2275: ST_TO_ADDR
// uc_nation = 1 ;
2276: LD_ADDR_OWVAR 21
2280: PUSH
2281: LD_INT 1
2283: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2284: LD_ADDR_VAR 0 2
2288: PUSH
2289: LD_INT 63
2291: PUSH
2292: LD_INT 1
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: PUSH
2299: LD_INT 70
2301: PUSH
2302: LD_INT 1
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PUSH
2309: LD_INT 83
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 16
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 27
2331: PUSH
2332: LD_INT 1
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: PUSH
2339: LD_INT 38
2341: PUSH
2342: LD_INT 1
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 5
2351: PUSH
2352: LD_INT 1
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 54
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2379: LD_ADDR_EXP 9
2383: PUSH
2384: LD_STRING Denis
2386: PPUSH
2387: LD_INT 1
2389: PPUSH
2390: LD_EXP 44
2394: PPUSH
2395: CALL 39057 0 3
2399: ST_TO_ADDR
// for i = 1 to xy do
2400: LD_ADDR_VAR 0 3
2404: PUSH
2405: DOUBLE
2406: LD_INT 1
2408: DEC
2409: ST_TO_ADDR
2410: LD_VAR 0 2
2414: PUSH
2415: FOR_TO
2416: IFFALSE 2515
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2418: LD_VAR 0 2
2422: PUSH
2423: LD_VAR 0 3
2427: ARRAY
2428: PUSH
2429: LD_INT 1
2431: ARRAY
2432: PPUSH
2433: LD_VAR 0 2
2437: PUSH
2438: LD_VAR 0 3
2442: ARRAY
2443: PUSH
2444: LD_INT 2
2446: ARRAY
2447: PPUSH
2448: CALL_OW 428
2452: PUSH
2453: LD_INT 0
2455: EQUAL
2456: IFFALSE 2513
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2458: LD_EXP 9
2462: PPUSH
2463: LD_VAR 0 2
2467: PUSH
2468: LD_VAR 0 3
2472: ARRAY
2473: PUSH
2474: LD_INT 1
2476: ARRAY
2477: PPUSH
2478: LD_VAR 0 2
2482: PUSH
2483: LD_VAR 0 3
2487: ARRAY
2488: PUSH
2489: LD_INT 2
2491: ARRAY
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 48
// if IsPlaced ( Denis ) then
2500: LD_EXP 9
2504: PPUSH
2505: CALL_OW 305
2509: IFFALSE 2513
// break ;
2511: GO 2515
// end ;
2513: GO 2415
2515: POP
2516: POP
// SetClass ( Denis , 4 ) ;
2517: LD_EXP 9
2521: PPUSH
2522: LD_INT 4
2524: PPUSH
2525: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2529: LD_EXP 9
2533: PPUSH
2534: LD_INT 750
2536: PPUSH
2537: CALL_OW 234
// end ;
2541: LD_VAR 0 1
2545: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2546: LD_INT 0
2548: PPUSH
2549: PPUSH
2550: PPUSH
2551: PPUSH
2552: PPUSH
// area := HarrisonSupportArea ;
2553: LD_ADDR_VAR 0 4
2557: PUSH
2558: LD_INT 3
2560: ST_TO_ADDR
// dir := 2 ;
2561: LD_ADDR_VAR 0 5
2565: PUSH
2566: LD_INT 2
2568: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2569: LD_VAR 0 4
2573: PPUSH
2574: LD_INT 21
2576: PUSH
2577: LD_INT 3
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PPUSH
2584: CALL_OW 70
2588: IFFALSE 2606
// begin area := HarrisonSupportArea2 ;
2590: LD_ADDR_VAR 0 4
2594: PUSH
2595: LD_INT 31
2597: ST_TO_ADDR
// dir := 1 ;
2598: LD_ADDR_VAR 0 5
2602: PUSH
2603: LD_INT 1
2605: ST_TO_ADDR
// end ; uc_side = 1 ;
2606: LD_ADDR_OWVAR 20
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// uc_nation = 1 ;
2614: LD_ADDR_OWVAR 21
2618: PUSH
2619: LD_INT 1
2621: ST_TO_ADDR
// vc_engine = 1 ;
2622: LD_ADDR_OWVAR 39
2626: PUSH
2627: LD_INT 1
2629: ST_TO_ADDR
// vc_control = 1 ;
2630: LD_ADDR_OWVAR 38
2634: PUSH
2635: LD_INT 1
2637: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2638: LD_ADDR_OWVAR 40
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: LD_INT 2
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = 2 ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh = CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := 2 ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2825: LD_ADDR_EXP 17
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 17
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine = 1 ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control = 1 ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 3
2872: ST_TO_ADDR
// vc_chassis = 2 ;
2873: LD_ADDR_OWVAR 37
2877: PUSH
2878: LD_INT 2
2880: ST_TO_ADDR
// veh = CreateVehicle ;
2881: LD_ADDR_VAR 0 3
2885: PUSH
2886: CALL_OW 45
2890: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2891: LD_VAR 0 3
2895: PPUSH
2896: LD_VAR 0 5
2900: PPUSH
2901: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2905: LD_VAR 0 3
2909: PPUSH
2910: LD_VAR 0 4
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2922: LD_VAR 0 3
2926: PPUSH
2927: LD_INT 50
2929: PPUSH
2930: CALL_OW 240
// hc_class := 1 ;
2934: LD_ADDR_OWVAR 28
2938: PUSH
2939: LD_INT 1
2941: ST_TO_ADDR
// hc_sex := sex_female ;
2942: LD_ADDR_OWVAR 27
2946: PUSH
2947: LD_INT 2
2949: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2950: LD_ADDR_OWVAR 33
2954: PUSH
2955: LD_STRING SecondCharsGal
2957: ST_TO_ADDR
// hc_face_number := 45 ;
2958: LD_ADDR_OWVAR 34
2962: PUSH
2963: LD_INT 45
2965: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2966: LD_ADDR_OWVAR 29
2970: PUSH
2971: LD_INT 11
2973: PUSH
2974: LD_INT 10
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2981: LD_ADDR_OWVAR 26
2985: PUSH
2986: LD_STRING Ingrid Jonsson
2988: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2989: LD_ADDR_OWVAR 30
2993: PUSH
2994: LD_INT 1
2996: PUSH
2997: LD_INT 1
2999: PUSH
3000: LD_INT 0
3002: PUSH
3003: LD_INT 0
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: LIST
3010: LIST
3011: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3012: LD_ADDR_OWVAR 31
3016: PUSH
3017: LD_INT 3
3019: PUSH
3020: LD_INT 1
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: LD_INT 0
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3035: LD_ADDR_EXP 18
3039: PUSH
3040: CALL_OW 44
3044: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3045: LD_EXP 18
3049: PPUSH
3050: LD_VAR 0 3
3054: PPUSH
3055: CALL_OW 52
// end ;
3059: LD_VAR 0 1
3063: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3064: LD_INT 0
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3070: LD_ADDR_VAR 0 4
3074: PUSH
3075: LD_INT 22
3077: PUSH
3078: LD_INT 1
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PUSH
3085: LD_INT 23
3087: PUSH
3088: LD_INT 1
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PUSH
3095: LD_INT 26
3097: PUSH
3098: LD_INT 1
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: LIST
3109: PPUSH
3110: CALL_OW 69
3114: PUSH
3115: LD_EXP 3
3119: PUSH
3120: LD_EXP 4
3124: PUSH
3125: LD_EXP 8
3129: PUSH
3130: LD_EXP 9
3134: PUSH
3135: LD_EXP 5
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: DIFF
3147: ST_TO_ADDR
// for i in _tmp do
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 4
3157: PUSH
3158: FOR_IN
3159: IFFALSE 3200
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3161: LD_VAR 0 2
3165: PPUSH
3166: LD_INT 32
3168: PPUSH
3169: CALL_OW 308
3173: PUSH
3174: LD_VAR 0 2
3178: PPUSH
3179: CALL_OW 302
3183: AND
3184: IFFALSE 3198
// begin tmp := i ;
3186: LD_ADDR_VAR 0 3
3190: PUSH
3191: LD_VAR 0 2
3195: ST_TO_ADDR
// break ;
3196: GO 3200
// end ;
3198: GO 3158
3200: POP
3201: POP
// if not tmp then
3202: LD_VAR 0 3
3206: NOT
3207: IFFALSE 3219
// tmp := JMM ;
3209: LD_ADDR_VAR 0 3
3213: PUSH
3214: LD_EXP 1
3218: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3219: LD_INT 35
3221: PPUSH
3222: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 22 ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 20 ] ] ) ;
3226: LD_INT 81
3228: PUSH
3229: LD_INT 1
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 92
3238: PUSH
3239: LD_VAR 0 3
3243: PPUSH
3244: CALL_OW 250
3248: PUSH
3249: LD_VAR 0 3
3253: PPUSH
3254: CALL_OW 251
3258: PUSH
3259: LD_INT 22
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 69
3276: NOT
3277: PUSH
3278: LD_INT 22
3280: PUSH
3281: LD_INT 1
3283: PUSH
3284: EMPTY
3285: LIST
3286: LIST
3287: PUSH
3288: LD_INT 21
3290: PUSH
3291: LD_INT 3
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PUSH
3298: LD_INT 92
3300: PUSH
3301: LD_VAR 0 3
3305: PPUSH
3306: CALL_OW 250
3310: PUSH
3311: LD_VAR 0 3
3315: PPUSH
3316: CALL_OW 251
3320: PUSH
3321: LD_INT 20
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: LIST
3334: PPUSH
3335: CALL_OW 69
3339: AND
3340: IFFALSE 3219
// blockSpawn = 1 ;
3342: LD_ADDR_EXP 29
3346: PUSH
3347: LD_INT 1
3349: ST_TO_ADDR
// uc_side = 4 ;
3350: LD_ADDR_OWVAR 20
3354: PUSH
3355: LD_INT 4
3357: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3358: LD_ADDR_EXP 15
3362: PUSH
3363: LD_STRING Joan
3365: PPUSH
3366: LD_INT 0
3368: PPUSH
3369: LD_EXP 44
3373: PPUSH
3374: CALL 39057 0 3
3378: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3379: LD_EXP 15
3383: PPUSH
3384: LD_VAR 0 3
3388: PPUSH
3389: CALL_OW 250
3393: PPUSH
3394: LD_VAR 0 3
3398: PPUSH
3399: CALL_OW 251
3403: PPUSH
3404: LD_INT 5
3406: PPUSH
3407: LD_INT 1
3409: PPUSH
3410: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3414: LD_EXP 15
3418: PPUSH
3419: LD_INT 250
3421: PPUSH
3422: CALL_OW 234
// InGameOn ;
3426: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3430: LD_EXP 15
3434: PPUSH
3435: CALL_OW 87
// wait ( 0 0$2 ) ;
3439: LD_INT 70
3441: PPUSH
3442: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3446: LD_VAR 0 3
3450: PPUSH
3451: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3455: LD_VAR 0 3
3459: PPUSH
3460: CALL_OW 122
// wait ( 0 0$1 ) ;
3464: LD_INT 35
3466: PPUSH
3467: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3471: LD_VAR 0 3
3475: PPUSH
3476: LD_EXP 15
3480: PPUSH
3481: CALL_OW 112
// wait ( 0 0$2 ) ;
3485: LD_INT 70
3487: PPUSH
3488: CALL_OW 67
// DialogueOn ;
3492: CALL_OW 6
// if tmp = JMM then
3496: LD_VAR 0 3
3500: PUSH
3501: LD_EXP 1
3505: EQUAL
3506: IFFALSE 3655
// begin ComTurnUnit ( JMM , Joan ) ;
3508: LD_EXP 1
3512: PPUSH
3513: LD_EXP 15
3517: PPUSH
3518: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3522: LD_EXP 1
3526: PPUSH
3527: LD_STRING D5b-JMM-1
3529: PPUSH
3530: CALL_OW 88
// DialogueOff ;
3534: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3538: LD_EXP 15
3542: PPUSH
3543: LD_INT 500
3545: PPUSH
3546: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3550: LD_EXP 15
3554: PPUSH
3555: LD_EXP 1
3559: PPUSH
3560: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3564: LD_EXP 1
3568: PPUSH
3569: LD_EXP 15
3573: PPUSH
3574: CALL_OW 119
// wait ( 0 0$1 ) ;
3578: LD_INT 35
3580: PPUSH
3581: CALL_OW 67
// DialogueOn ;
3585: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3589: LD_EXP 15
3593: PPUSH
3594: LD_STRING D5b-Joan-1
3596: PPUSH
3597: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3601: LD_EXP 1
3605: PPUSH
3606: LD_STRING D5b-JMM-2
3608: PPUSH
3609: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3613: LD_EXP 15
3617: PPUSH
3618: LD_STRING D5b-Joan-2
3620: PPUSH
3621: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3625: LD_EXP 1
3629: PPUSH
3630: LD_STRING D5b-JMM-3
3632: PPUSH
3633: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3637: LD_EXP 15
3641: PPUSH
3642: LD_STRING D5b-Joan-3
3644: PPUSH
3645: CALL_OW 88
// DialogueOff ;
3649: CALL_OW 7
// end else
3653: GO 4029
// begin ComTurnUnit ( tmp , Joan ) ;
3655: LD_VAR 0 3
3659: PPUSH
3660: LD_EXP 15
3664: PPUSH
3665: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3669: LD_VAR 0 3
3673: PPUSH
3674: LD_STRING D5a-Sol1-1
3676: PPUSH
3677: CALL_OW 88
// DialogueOff ;
3681: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3685: LD_EXP 15
3689: PPUSH
3690: LD_INT 500
3692: PPUSH
3693: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3697: LD_EXP 15
3701: PPUSH
3702: LD_VAR 0 3
3706: PPUSH
3707: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3711: LD_VAR 0 3
3715: PPUSH
3716: LD_EXP 15
3720: PPUSH
3721: CALL_OW 119
// wait ( 0 0$1 ) ;
3725: LD_INT 35
3727: PPUSH
3728: CALL_OW 67
// DialogueOn ;
3732: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3736: LD_EXP 15
3740: PPUSH
3741: LD_STRING D5a-Joan-1
3743: PPUSH
3744: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3748: LD_VAR 0 3
3752: PPUSH
3753: LD_STRING D5a-Sol1-2
3755: PPUSH
3756: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3760: LD_EXP 15
3764: PPUSH
3765: LD_STRING D5a-Joan-2
3767: PPUSH
3768: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_STRING D5a-Sol1-3
3779: PPUSH
3780: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3784: LD_EXP 15
3788: PPUSH
3789: LD_STRING D5a-Joan-3
3791: PPUSH
3792: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3796: LD_VAR 0 3
3800: PPUSH
3801: LD_STRING D5a-Sol1-4
3803: PPUSH
3804: CALL_OW 88
// DialogueOff ;
3808: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3812: LD_EXP 1
3816: PUSH
3817: LD_INT 55
3819: PUSH
3820: EMPTY
3821: LIST
3822: PPUSH
3823: CALL_OW 69
3827: IN
3828: IFFALSE 3851
// begin ComMoveUnit ( JMM , Joan ) ;
3830: LD_EXP 1
3834: PPUSH
3835: LD_EXP 15
3839: PPUSH
3840: CALL_OW 112
// wait ( 0 0$05 ) ;
3844: LD_INT 175
3846: PPUSH
3847: CALL_OW 67
// end ; ComExitVehicle ( JMM ) ;
3851: LD_EXP 1
3855: PPUSH
3856: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3860: LD_EXP 1
3864: PPUSH
3865: CALL_OW 122
// wait ( 0 0$1 ) ;
3869: LD_INT 35
3871: PPUSH
3872: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3876: LD_INT 35
3878: PPUSH
3879: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3883: LD_EXP 15
3887: PUSH
3888: LD_VAR 0 3
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PPUSH
3897: LD_EXP 1
3901: PPUSH
3902: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3906: LD_EXP 15
3910: PPUSH
3911: LD_EXP 1
3915: PPUSH
3916: CALL_OW 296
3920: PUSH
3921: LD_INT 5
3923: LESS
3924: IFFALSE 3876
// ComTurnUnit ( Joan , JMM ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_EXP 1
3935: PPUSH
3936: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3940: LD_EXP 1
3944: PPUSH
3945: LD_EXP 15
3949: PPUSH
3950: CALL_OW 119
// wait ( 0 0$1 ) ;
3954: LD_INT 35
3956: PPUSH
3957: CALL_OW 67
// DialogueOn ;
3961: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3965: LD_EXP 15
3969: PPUSH
3970: LD_STRING D5a-Joan-4
3972: PPUSH
3973: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3977: LD_EXP 1
3981: PPUSH
3982: LD_STRING D5a-JMM-4
3984: PPUSH
3985: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3989: LD_EXP 15
3993: PPUSH
3994: LD_STRING D5a-Joan-5
3996: PPUSH
3997: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
4001: LD_EXP 1
4005: PPUSH
4006: LD_STRING D5a-JMM-5
4008: PPUSH
4009: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
4013: LD_EXP 15
4017: PPUSH
4018: LD_STRING D5a-Joan-6
4020: PPUSH
4021: CALL_OW 88
// DialogueOff ;
4025: CALL_OW 7
// end ; DialogueOn ;
4029: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4033: LD_EXP 1
4037: PPUSH
4038: LD_STRING D6-JMM-1
4040: PPUSH
4041: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4045: LD_EXP 15
4049: PPUSH
4050: LD_STRING D6-Joan-1
4052: PPUSH
4053: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4057: LD_EXP 1
4061: PPUSH
4062: LD_STRING D6-JMM-2
4064: PPUSH
4065: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4069: LD_EXP 15
4073: PPUSH
4074: LD_STRING D6-Joan-2
4076: PPUSH
4077: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4081: LD_EXP 1
4085: PPUSH
4086: LD_STRING D6-JMM-3
4088: PPUSH
4089: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4093: LD_EXP 15
4097: PPUSH
4098: LD_STRING D6-Joan-3
4100: PPUSH
4101: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4105: LD_EXP 1
4109: PPUSH
4110: LD_STRING D6-JMM-4
4112: PPUSH
4113: CALL_OW 88
// DialogueOff ;
4117: CALL_OW 7
// InGameOff ;
4121: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4125: LD_EXP 15
4129: PPUSH
4130: LD_INT 1
4132: PPUSH
4133: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4137: LD_STRING MJ
4139: PPUSH
4140: CALL_OW 337
// JoanStatus = 1 ;
4144: LD_ADDR_EXP 16
4148: PUSH
4149: LD_INT 1
4151: ST_TO_ADDR
// blockSpawn = 0 ;
4152: LD_ADDR_EXP 29
4156: PUSH
4157: LD_INT 0
4159: ST_TO_ADDR
// end ;
4160: LD_VAR 0 1
4164: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4165: LD_INT 0
4167: PPUSH
4168: PPUSH
// if not number or number > 8 then
4169: LD_VAR 0 1
4173: NOT
4174: PUSH
4175: LD_VAR 0 1
4179: PUSH
4180: LD_INT 8
4182: GREATER
4183: OR
4184: IFFALSE 4188
// exit ;
4186: GO 5730
// repeat wait ( 0 0$7 ) ;
4188: LD_INT 245
4190: PPUSH
4191: CALL_OW 67
// until blockSpawn = 0 ;
4195: LD_EXP 29
4199: PUSH
4200: LD_INT 0
4202: EQUAL
4203: IFFALSE 4188
// uc_side = 1 ;
4205: LD_ADDR_OWVAR 20
4209: PUSH
4210: LD_INT 1
4212: ST_TO_ADDR
// uc_nation = 1 ;
4213: LD_ADDR_OWVAR 21
4217: PUSH
4218: LD_INT 1
4220: ST_TO_ADDR
// InitHc ;
4221: CALL_OW 19
// if number = 1 then
4225: LD_VAR 0 1
4229: PUSH
4230: LD_INT 1
4232: EQUAL
4233: IFFALSE 4409
// begin hc_class := 3 ;
4235: LD_ADDR_OWVAR 28
4239: PUSH
4240: LD_INT 3
4242: ST_TO_ADDR
// hc_sex := sex_male ;
4243: LD_ADDR_OWVAR 27
4247: PUSH
4248: LD_INT 1
4250: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4251: LD_ADDR_OWVAR 33
4255: PUSH
4256: LD_STRING SecondCharsGal
4258: ST_TO_ADDR
// hc_face_number := 55 ;
4259: LD_ADDR_OWVAR 34
4263: PUSH
4264: LD_INT 55
4266: ST_TO_ADDR
// hc_name := George McCarthy ;
4267: LD_ADDR_OWVAR 26
4271: PUSH
4272: LD_STRING George McCarthy
4274: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4275: LD_ADDR_OWVAR 29
4279: PUSH
4280: LD_INT 11
4282: PUSH
4283: LD_INT 10
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4290: LD_ADDR_OWVAR 30
4294: PUSH
4295: LD_INT 0
4297: PUSH
4298: LD_INT 0
4300: PUSH
4301: LD_INT 2
4303: PUSH
4304: LD_INT 0
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4313: LD_ADDR_OWVAR 31
4317: PUSH
4318: LD_INT 1
4320: PUSH
4321: LD_INT 2
4323: PUSH
4324: LD_INT 3
4326: PUSH
4327: LD_INT 1
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: ST_TO_ADDR
// un = CreateHuman ;
4336: LD_ADDR_VAR 0 3
4340: PUSH
4341: CALL_OW 44
4345: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4346: LD_VAR 0 3
4350: PPUSH
4351: LD_INT 23
4353: PPUSH
4354: LD_INT 1
4356: PPUSH
4357: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: CALL_OW 87
// wait ( 0 0$1 ) ;
4370: LD_INT 35
4372: PPUSH
4373: CALL_OW 67
// DialogueOn ;
4377: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4381: LD_VAR 0 3
4385: PPUSH
4386: LD_STRING D11d-Sol4-1
4388: PPUSH
4389: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4393: LD_EXP 1
4397: PPUSH
4398: LD_STRING D11d-JMM-1
4400: PPUSH
4401: CALL_OW 88
// DialogueOff ;
4405: CALL_OW 7
// end ; if number = 2 then
4409: LD_VAR 0 1
4413: PUSH
4414: LD_INT 2
4416: EQUAL
4417: IFFALSE 4593
// begin hc_class := 1 ;
4419: LD_ADDR_OWVAR 28
4423: PUSH
4424: LD_INT 1
4426: ST_TO_ADDR
// hc_sex := sex_male ;
4427: LD_ADDR_OWVAR 27
4431: PUSH
4432: LD_INT 1
4434: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4435: LD_ADDR_OWVAR 33
4439: PUSH
4440: LD_STRING AmGalRemake
4442: ST_TO_ADDR
// hc_face_number := 7 ;
4443: LD_ADDR_OWVAR 34
4447: PUSH
4448: LD_INT 7
4450: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4451: LD_ADDR_OWVAR 26
4455: PUSH
4456: LD_STRING Bobby Jordan
4458: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4459: LD_ADDR_OWVAR 29
4463: PUSH
4464: LD_INT 9
4466: PUSH
4467: LD_INT 11
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4474: LD_ADDR_OWVAR 30
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: LD_INT 0
4484: PUSH
4485: LD_INT 0
4487: PUSH
4488: LD_INT 1
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4497: LD_ADDR_OWVAR 31
4501: PUSH
4502: LD_INT 2
4504: PUSH
4505: LD_INT 1
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: ST_TO_ADDR
// un = CreateHuman ;
4520: LD_ADDR_VAR 0 3
4524: PUSH
4525: CALL_OW 44
4529: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: LD_INT 24
4537: PPUSH
4538: LD_INT 1
4540: PPUSH
4541: CALL_OW 49
// wait ( 0 0$1 ) ;
4545: LD_INT 35
4547: PPUSH
4548: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4552: LD_VAR 0 3
4556: PPUSH
4557: CALL_OW 87
// DialogueOn ;
4561: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4565: LD_VAR 0 3
4569: PPUSH
4570: LD_STRING D11b-Sol3-1
4572: PPUSH
4573: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4577: LD_EXP 1
4581: PPUSH
4582: LD_STRING D11b-JMM-1
4584: PPUSH
4585: CALL_OW 88
// DialogueOff ;
4589: CALL_OW 7
// end ; if number = 3 then
4593: LD_VAR 0 1
4597: PUSH
4598: LD_INT 3
4600: EQUAL
4601: IFFALSE 4765
// begin hc_class := 1 ;
4603: LD_ADDR_OWVAR 28
4607: PUSH
4608: LD_INT 1
4610: ST_TO_ADDR
// hc_sex := sex_male ;
4611: LD_ADDR_OWVAR 27
4615: PUSH
4616: LD_INT 1
4618: ST_TO_ADDR
// hc_gallery := DJ ;
4619: LD_ADDR_OWVAR 33
4623: PUSH
4624: LD_STRING DJ
4626: ST_TO_ADDR
// hc_face_number := 1 ;
4627: LD_ADDR_OWVAR 34
4631: PUSH
4632: LD_INT 1
4634: ST_TO_ADDR
// hc_name := Darius Dajay ;
4635: LD_ADDR_OWVAR 26
4639: PUSH
4640: LD_STRING Darius Dajay
4642: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4643: LD_ADDR_OWVAR 29
4647: PUSH
4648: LD_INT 11
4650: PUSH
4651: LD_INT 11
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4658: LD_ADDR_OWVAR 30
4662: PUSH
4663: LD_INT 2
4665: PUSH
4666: LD_INT 0
4668: PUSH
4669: LD_INT 0
4671: PUSH
4672: LD_INT 0
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4681: LD_ADDR_OWVAR 31
4685: PUSH
4686: LD_INT 4
4688: PUSH
4689: LD_INT 0
4691: PUSH
4692: LD_INT 1
4694: PUSH
4695: LD_INT 0
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: ST_TO_ADDR
// un = CreateHuman ;
4704: LD_ADDR_VAR 0 3
4708: PUSH
4709: CALL_OW 44
4713: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4714: LD_VAR 0 3
4718: PPUSH
4719: LD_INT 25
4721: PPUSH
4722: LD_INT 1
4724: PPUSH
4725: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4729: LD_VAR 0 3
4733: PPUSH
4734: CALL_OW 87
// wait ( 0 0$1 ) ;
4738: LD_INT 35
4740: PPUSH
4741: CALL_OW 67
// DialogueOn ;
4745: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4749: LD_VAR 0 3
4753: PPUSH
4754: LD_STRING D11f-Sol5-1
4756: PPUSH
4757: CALL_OW 88
// DialogueOff ;
4761: CALL_OW 7
// end ; if number = 4 then
4765: LD_VAR 0 1
4769: PUSH
4770: LD_INT 4
4772: EQUAL
4773: IFFALSE 4910
// begin hc_class := 2 ;
4775: LD_ADDR_OWVAR 28
4779: PUSH
4780: LD_INT 2
4782: ST_TO_ADDR
// hc_sex := sex_female ;
4783: LD_ADDR_OWVAR 27
4787: PUSH
4788: LD_INT 2
4790: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4791: LD_ADDR_OWVAR 33
4795: PUSH
4796: LD_STRING SecondCharsGal
4798: ST_TO_ADDR
// hc_face_number := 46 ;
4799: LD_ADDR_OWVAR 34
4803: PUSH
4804: LD_INT 46
4806: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4807: LD_ADDR_OWVAR 26
4811: PUSH
4812: LD_STRING Sylvia Creak
4814: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4815: LD_ADDR_OWVAR 29
4819: PUSH
4820: LD_INT 10
4822: PUSH
4823: LD_INT 9
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4830: LD_ADDR_OWVAR 30
4834: PUSH
4835: LD_INT 0
4837: PUSH
4838: LD_INT 1
4840: PUSH
4841: LD_INT 1
4843: PUSH
4844: LD_INT 1
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4853: LD_ADDR_OWVAR 31
4857: PUSH
4858: LD_INT 1
4860: PUSH
4861: LD_INT 3
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: LD_INT 1
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: ST_TO_ADDR
// un = CreateHuman ;
4876: LD_ADDR_VAR 0 3
4880: PUSH
4881: CALL_OW 44
4885: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4886: LD_VAR 0 3
4890: PPUSH
4891: LD_INT 26
4893: PPUSH
4894: LD_INT 1
4896: PPUSH
4897: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4901: LD_VAR 0 3
4905: PPUSH
4906: CALL_OW 87
// end ; if number = 5 then
4910: LD_VAR 0 1
4914: PUSH
4915: LD_INT 5
4917: EQUAL
4918: IFFALSE 5094
// begin hc_class := 1 ;
4920: LD_ADDR_OWVAR 28
4924: PUSH
4925: LD_INT 1
4927: ST_TO_ADDR
// hc_sex := sex_female ;
4928: LD_ADDR_OWVAR 27
4932: PUSH
4933: LD_INT 2
4935: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4936: LD_ADDR_OWVAR 33
4940: PUSH
4941: LD_STRING SecondCharsGal
4943: ST_TO_ADDR
// hc_face_number := 37 ;
4944: LD_ADDR_OWVAR 34
4948: PUSH
4949: LD_INT 37
4951: ST_TO_ADDR
// hc_name := Malena Johnson ;
4952: LD_ADDR_OWVAR 26
4956: PUSH
4957: LD_STRING Malena Johnson
4959: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4960: LD_ADDR_OWVAR 29
4964: PUSH
4965: LD_INT 11
4967: PUSH
4968: LD_INT 10
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4975: LD_ADDR_OWVAR 30
4979: PUSH
4980: LD_INT 1
4982: PUSH
4983: LD_INT 1
4985: PUSH
4986: LD_INT 0
4988: PUSH
4989: LD_INT 0
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4998: LD_ADDR_OWVAR 31
5002: PUSH
5003: LD_INT 1
5005: PUSH
5006: LD_INT 1
5008: PUSH
5009: LD_INT 1
5011: PUSH
5012: LD_INT 1
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: ST_TO_ADDR
// un = CreateHuman ;
5021: LD_ADDR_VAR 0 3
5025: PUSH
5026: CALL_OW 44
5030: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
5031: LD_VAR 0 3
5035: PPUSH
5036: LD_INT 27
5038: PPUSH
5039: LD_INT 1
5041: PPUSH
5042: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5046: LD_VAR 0 3
5050: PPUSH
5051: CALL_OW 87
// wait ( 0 0$1 ) ;
5055: LD_INT 35
5057: PPUSH
5058: CALL_OW 67
// DialogueOn ;
5062: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5066: LD_VAR 0 3
5070: PPUSH
5071: LD_STRING D11c-FSol3-1
5073: PPUSH
5074: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5078: LD_EXP 1
5082: PPUSH
5083: LD_STRING D11c-JMM-1
5085: PPUSH
5086: CALL_OW 88
// DialogueOff ;
5090: CALL_OW 7
// end ; if number = 6 then
5094: LD_VAR 0 1
5098: PUSH
5099: LD_INT 6
5101: EQUAL
5102: IFFALSE 5276
// begin hc_class := 1 ;
5104: LD_ADDR_OWVAR 28
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// hc_sex := sex_male ;
5112: LD_ADDR_OWVAR 27
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5120: LD_ADDR_OWVAR 33
5124: PUSH
5125: LD_STRING AmGalRemake
5127: ST_TO_ADDR
// hc_face_number := 1 ;
5128: LD_ADDR_OWVAR 34
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// hc_name := Charles Brown ;
5136: LD_ADDR_OWVAR 26
5140: PUSH
5141: LD_STRING Charles Brown
5143: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5144: LD_ADDR_OWVAR 29
5148: PUSH
5149: LD_INT 12
5151: PUSH
5152: LD_INT 11
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5159: LD_ADDR_OWVAR 30
5163: PUSH
5164: LD_INT 2
5166: PUSH
5167: LD_INT 0
5169: PUSH
5170: LD_INT 0
5172: PUSH
5173: LD_INT 0
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5182: LD_ADDR_OWVAR 31
5186: PUSH
5187: LD_INT 3
5189: PUSH
5190: LD_INT 0
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: LD_INT 1
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: ST_TO_ADDR
// un = CreateHuman ;
5205: LD_ADDR_VAR 0 3
5209: PUSH
5210: CALL_OW 44
5214: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5215: LD_VAR 0 3
5219: PPUSH
5220: LD_INT 28
5222: PPUSH
5223: LD_INT 1
5225: PPUSH
5226: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5230: LD_VAR 0 3
5234: PPUSH
5235: CALL_OW 87
// wait ( 0 0$1 ) ;
5239: LD_INT 35
5241: PPUSH
5242: CALL_OW 67
// DialogueOn ;
5246: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5250: LD_VAR 0 3
5254: PPUSH
5255: LD_STRING D4-Sol1-5
5257: PPUSH
5258: CALL_OW 88
// DialogueOff ;
5262: CALL_OW 7
// tempCharles = un ;
5266: LD_ADDR_EXP 13
5270: PUSH
5271: LD_VAR 0 3
5275: ST_TO_ADDR
// end ; if number = 7 then
5276: LD_VAR 0 1
5280: PUSH
5281: LD_INT 7
5283: EQUAL
5284: IFFALSE 5534
// begin hc_class := 1 ;
5286: LD_ADDR_OWVAR 28
5290: PUSH
5291: LD_INT 1
5293: ST_TO_ADDR
// hc_sex := sex_female ;
5294: LD_ADDR_OWVAR 27
5298: PUSH
5299: LD_INT 2
5301: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5302: LD_ADDR_OWVAR 33
5306: PUSH
5307: LD_STRING AmGalRemake
5309: ST_TO_ADDR
// hc_face_number := 2 ;
5310: LD_ADDR_OWVAR 34
5314: PUSH
5315: LD_INT 2
5317: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5318: LD_ADDR_OWVAR 26
5322: PUSH
5323: LD_STRING Rebecca Macdonald
5325: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5326: LD_ADDR_OWVAR 29
5330: PUSH
5331: LD_INT 10
5333: PUSH
5334: LD_INT 10
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5341: LD_ADDR_OWVAR 30
5345: PUSH
5346: LD_INT 1
5348: PUSH
5349: LD_INT 0
5351: PUSH
5352: LD_INT 0
5354: PUSH
5355: LD_INT 1
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5364: LD_ADDR_OWVAR 31
5368: PUSH
5369: LD_INT 1
5371: PUSH
5372: LD_INT 0
5374: PUSH
5375: LD_INT 0
5377: PUSH
5378: LD_INT 1
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: ST_TO_ADDR
// un = CreateHuman ;
5387: LD_ADDR_VAR 0 3
5391: PUSH
5392: CALL_OW 44
5396: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 29
5404: PPUSH
5405: LD_INT 1
5407: PPUSH
5408: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5412: LD_VAR 0 3
5416: PPUSH
5417: CALL_OW 87
// wait ( 0 0$1 ) ;
5421: LD_INT 35
5423: PPUSH
5424: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5428: LD_INT 30
5430: PPUSH
5431: LD_INT 22
5433: PUSH
5434: LD_INT 3
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 70
5445: IFFALSE 5534
// begin DialogueOn ;
5447: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5451: LD_VAR 0 3
5455: PPUSH
5456: CALL_OW 250
5460: PPUSH
5461: LD_VAR 0 3
5465: PPUSH
5466: CALL_OW 251
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: LD_INT 15
5476: NEG
5477: PPUSH
5478: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 250
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 251
5501: PPUSH
5502: LD_INT 1
5504: PPUSH
5505: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5509: LD_VAR 0 3
5513: PPUSH
5514: LD_STRING D11a-FSol2-1
5516: PPUSH
5517: CALL_OW 88
// ComCrawl ( un ) ;
5521: LD_VAR 0 3
5525: PPUSH
5526: CALL_OW 137
// DialogueOff ;
5530: CALL_OW 7
// end ; end ; if number = 8 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 8
5541: EQUAL
5542: IFFALSE 5698
// begin hc_class := 1 ;
5544: LD_ADDR_OWVAR 28
5548: PUSH
5549: LD_INT 1
5551: ST_TO_ADDR
// hc_sex := sex_female ;
5552: LD_ADDR_OWVAR 27
5556: PUSH
5557: LD_INT 2
5559: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5560: LD_ADDR_OWVAR 33
5564: PUSH
5565: LD_STRING SecondCharsGal
5567: ST_TO_ADDR
// hc_face_number := 42 ;
5568: LD_ADDR_OWVAR 34
5572: PUSH
5573: LD_INT 42
5575: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5576: LD_ADDR_OWVAR 26
5580: PUSH
5581: LD_STRING Margherite Simpson
5583: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5584: LD_ADDR_OWVAR 29
5588: PUSH
5589: LD_INT 12
5591: PUSH
5592: LD_INT 10
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5599: LD_ADDR_OWVAR 30
5603: PUSH
5604: LD_INT 1
5606: PUSH
5607: LD_INT 2
5609: PUSH
5610: LD_INT 0
5612: PUSH
5613: LD_INT 0
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5622: LD_ADDR_OWVAR 31
5626: PUSH
5627: LD_INT 1
5629: PUSH
5630: LD_INT 2
5632: PUSH
5633: LD_INT 0
5635: PUSH
5636: LD_INT 1
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: ST_TO_ADDR
// un = CreateHuman ;
5645: LD_ADDR_VAR 0 3
5649: PUSH
5650: CALL_OW 44
5654: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5655: LD_VAR 0 3
5659: PPUSH
5660: LD_INT 33
5662: PPUSH
5663: LD_INT 1
5665: PPUSH
5666: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5670: LD_VAR 0 3
5674: PPUSH
5675: CALL_OW 87
// wait ( 0 0$1 ) ;
5679: LD_INT 35
5681: PPUSH
5682: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5686: LD_VAR 0 3
5690: PPUSH
5691: LD_STRING D11e-FSol4-1
5693: PPUSH
5694: CALL_OW 88
// end ; ignoreTarget := ignoreTarget union un ;
5698: LD_ADDR_EXP 45
5702: PUSH
5703: LD_EXP 45
5707: PUSH
5708: LD_VAR 0 3
5712: UNION
5713: ST_TO_ADDR
// arrivals := arrivals union un ;
5714: LD_ADDR_EXP 46
5718: PUSH
5719: LD_EXP 46
5723: PUSH
5724: LD_VAR 0 3
5728: UNION
5729: ST_TO_ADDR
// end ;
5730: LD_VAR 0 2
5734: RET
// every 0 0$1 do var i ;
5735: GO 5737
5737: DISABLE
5738: LD_INT 0
5740: PPUSH
// begin enable ;
5741: ENABLE
// if not ignoreTarget then
5742: LD_EXP 45
5746: NOT
5747: IFFALSE 5751
// exit ;
5749: GO 5832
// for i in ignoreTarget do
5751: LD_ADDR_VAR 0 1
5755: PUSH
5756: LD_EXP 45
5760: PUSH
5761: FOR_IN
5762: IFFALSE 5830
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5764: LD_INT 22
5766: PUSH
5767: LD_INT 1
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: LD_INT 91
5776: PUSH
5777: LD_VAR 0 1
5781: PUSH
5782: LD_INT 10
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: LIST
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PPUSH
5794: CALL_OW 69
5798: PUSH
5799: LD_EXP 45
5803: DIFF
5804: PUSH
5805: LD_INT 1
5807: GREATER
5808: IFFALSE 5828
// begin ignoreTarget := ignoreTarget diff i ;
5810: LD_ADDR_EXP 45
5814: PUSH
5815: LD_EXP 45
5819: PUSH
5820: LD_VAR 0 1
5824: DIFF
5825: ST_TO_ADDR
// break ;
5826: GO 5830
// end ;
5828: GO 5761
5830: POP
5831: POP
// end ; end_of_file
5832: PPOPN 1
5834: END
// export function PrepareRussian ; var i ; begin
5835: LD_INT 0
5837: PPUSH
5838: PPUSH
// if Difficulty < 3 then
5839: LD_OWVAR 67
5843: PUSH
5844: LD_INT 3
5846: LESS
5847: IFFALSE 5864
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5849: LD_INT 130
5851: PPUSH
5852: LD_INT 81
5854: PPUSH
5855: CALL_OW 428
5859: PPUSH
5860: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5864: LD_INT 3
5866: PPUSH
5867: LD_INT 3
5869: PPUSH
5870: LD_INT 2
5872: PPUSH
5873: LD_EXP 34
5877: PPUSH
5878: LD_EXP 35
5882: PPUSH
5883: CALL_OW 12
5887: PPUSH
5888: LD_INT 2
5890: PPUSH
5891: LD_INT 4
5893: PPUSH
5894: CALL 6366 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5898: LD_INT 3
5900: PPUSH
5901: LD_INT 3
5903: PPUSH
5904: LD_INT 8
5906: PPUSH
5907: LD_EXP 34
5911: PPUSH
5912: LD_EXP 35
5916: PPUSH
5917: CALL_OW 12
5921: PPUSH
5922: LD_INT 1
5924: PPUSH
5925: LD_INT 4
5927: PPUSH
5928: CALL 6366 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5932: LD_INT 3
5934: PPUSH
5935: LD_INT 3
5937: PPUSH
5938: LD_INT 67
5940: PPUSH
5941: LD_EXP 34
5945: PPUSH
5946: LD_EXP 35
5950: PPUSH
5951: CALL_OW 12
5955: PPUSH
5956: LD_INT 1
5958: PPUSH
5959: LD_INT 2
5961: PPUSH
5962: CALL 6366 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5966: LD_INT 3
5968: PPUSH
5969: LD_INT 3
5971: PPUSH
5972: LD_INT 21
5974: PPUSH
5975: LD_EXP 34
5979: PPUSH
5980: LD_EXP 35
5984: PPUSH
5985: CALL_OW 12
5989: PPUSH
5990: LD_INT 3
5992: PPUSH
5993: LD_INT 6
5995: PPUSH
5996: CALL 6366 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
6000: LD_INT 3
6002: PPUSH
6003: LD_INT 3
6005: PPUSH
6006: LD_INT 17
6008: PPUSH
6009: LD_EXP 34
6013: PPUSH
6014: LD_EXP 35
6018: PPUSH
6019: CALL_OW 12
6023: PPUSH
6024: LD_INT 3
6026: PPUSH
6027: LD_INT 6
6029: PPUSH
6030: CALL 6366 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
6034: LD_INT 3
6036: PPUSH
6037: LD_INT 3
6039: PPUSH
6040: LD_INT 32
6042: PPUSH
6043: LD_EXP 34
6047: PPUSH
6048: LD_EXP 35
6052: PPUSH
6053: CALL_OW 12
6057: PPUSH
6058: LD_INT 4
6060: PPUSH
6061: LD_INT 2
6063: PPUSH
6064: CALL 6366 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6068: LD_ADDR_VAR 0 2
6072: PUSH
6073: LD_INT 22
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 21
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 30
6095: PUSH
6096: LD_INT 32
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: PPUSH
6108: CALL_OW 69
6112: PUSH
6113: FOR_IN
6114: IFFALSE 6154
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6116: LD_INT 3
6118: PPUSH
6119: LD_INT 3
6121: PPUSH
6122: LD_VAR 0 2
6126: PPUSH
6127: LD_EXP 34
6131: PPUSH
6132: LD_EXP 35
6136: PPUSH
6137: CALL_OW 12
6141: PPUSH
6142: LD_INT 1
6144: PPUSH
6145: LD_INT 1
6147: PPUSH
6148: CALL 6366 0 6
6152: GO 6113
6154: POP
6155: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
6156: LD_ADDR_VAR 0 2
6160: PUSH
6161: LD_INT 22
6163: PUSH
6164: LD_INT 3
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 21
6173: PUSH
6174: LD_INT 3
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 30
6183: PUSH
6184: LD_INT 31
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: PPUSH
6196: CALL_OW 69
6200: PUSH
6201: FOR_IN
6202: IFFALSE 6230
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6204: LD_EXP 34
6208: PPUSH
6209: LD_EXP 35
6213: PPUSH
6214: CALL_OW 12
6218: PPUSH
6219: LD_VAR 0 2
6223: PPUSH
6224: CALL 6476 0 2
6228: GO 6201
6230: POP
6231: POP
// end ; end_of_file
6232: LD_VAR 0 1
6236: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6237: LD_INT 0
6239: PPUSH
6240: PPUSH
6241: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6242: LD_ADDR_VAR 0 6
6246: PUSH
6247: LD_VAR 0 1
6251: PUSH
6252: LD_INT 1
6254: PPUSH
6255: LD_VAR 0 1
6259: PPUSH
6260: CALL_OW 12
6264: ARRAY
6265: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6266: LD_VAR 0 6
6270: PPUSH
6271: CALL_OW 258
6275: PUSH
6276: LD_INT 1
6278: EQUAL
6279: IFFALSE 6297
// Say ( speaker , dialogMID ) else
6281: LD_VAR 0 6
6285: PPUSH
6286: LD_VAR 0 2
6290: PPUSH
6291: CALL_OW 88
6295: GO 6311
// Say ( speaker , dialogFID ) ;
6297: LD_VAR 0 6
6301: PPUSH
6302: LD_VAR 0 3
6306: PPUSH
6307: CALL_OW 88
// result := speaker ;
6311: LD_ADDR_VAR 0 4
6315: PUSH
6316: LD_VAR 0 6
6320: ST_TO_ADDR
// end ;
6321: LD_VAR 0 4
6325: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6326: LD_INT 0
6328: PPUSH
6329: PPUSH
// for i in charactersList do
6330: LD_ADDR_VAR 0 4
6334: PUSH
6335: LD_VAR 0 1
6339: PUSH
6340: FOR_IN
6341: IFFALSE 6359
// SaveCharacters ( i , ident ) ;
6343: LD_VAR 0 4
6347: PPUSH
6348: LD_VAR 0 2
6352: PPUSH
6353: CALL_OW 38
6357: GO 6340
6359: POP
6360: POP
// end ;
6361: LD_VAR 0 3
6365: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6366: LD_INT 0
6368: PPUSH
6369: PPUSH
6370: PPUSH
6371: PPUSH
// for i = 1 to count do
6372: LD_ADDR_VAR 0 8
6376: PUSH
6377: DOUBLE
6378: LD_INT 1
6380: DEC
6381: ST_TO_ADDR
6382: LD_VAR 0 6
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6469
// begin uc_side = side ;
6390: LD_ADDR_OWVAR 20
6394: PUSH
6395: LD_VAR 0 1
6399: ST_TO_ADDR
// uc_nation = nation ;
6400: LD_ADDR_OWVAR 21
6404: PUSH
6405: LD_VAR 0 2
6409: ST_TO_ADDR
// hc_gallery =  ;
6410: LD_ADDR_OWVAR 33
6414: PUSH
6415: LD_STRING 
6417: ST_TO_ADDR
// hc_name =  ;
6418: LD_ADDR_OWVAR 26
6422: PUSH
6423: LD_STRING 
6425: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6426: LD_INT 0
6428: PPUSH
6429: LD_VAR 0 5
6433: PPUSH
6434: LD_VAR 0 4
6438: PPUSH
6439: CALL_OW 380
// un = CreateHuman ;
6443: LD_ADDR_VAR 0 10
6447: PUSH
6448: CALL_OW 44
6452: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6453: LD_VAR 0 10
6457: PPUSH
6458: LD_VAR 0 3
6462: PPUSH
6463: CALL_OW 52
// end ;
6467: GO 6387
6469: POP
6470: POP
// end ;
6471: LD_VAR 0 7
6475: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6476: LD_INT 0
6478: PPUSH
6479: PPUSH
6480: PPUSH
// uc_side := GetSide ( b ) ;
6481: LD_ADDR_OWVAR 20
6485: PUSH
6486: LD_VAR 0 2
6490: PPUSH
6491: CALL_OW 255
6495: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6496: LD_ADDR_OWVAR 21
6500: PUSH
6501: LD_VAR 0 2
6505: PPUSH
6506: CALL_OW 248
6510: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6511: LD_INT 0
6513: PPUSH
6514: LD_INT 1
6516: PPUSH
6517: LD_VAR 0 1
6521: PPUSH
6522: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6526: LD_ADDR_VAR 0 5
6530: PUSH
6531: LD_VAR 0 2
6535: PPUSH
6536: CALL_OW 254
6540: PUSH
6541: LD_INT 3
6543: MINUS
6544: ST_TO_ADDR
// if dir < 0 then
6545: LD_VAR 0 5
6549: PUSH
6550: LD_INT 0
6552: LESS
6553: IFFALSE 6569
// dir := 6 + dir ;
6555: LD_ADDR_VAR 0 5
6559: PUSH
6560: LD_INT 6
6562: PUSH
6563: LD_VAR 0 5
6567: PLUS
6568: ST_TO_ADDR
// un := CreateHuman ;
6569: LD_ADDR_VAR 0 4
6573: PUSH
6574: CALL_OW 44
6578: ST_TO_ADDR
// SetDir ( un , dir ) ;
6579: LD_VAR 0 4
6583: PPUSH
6584: LD_VAR 0 5
6588: PPUSH
6589: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6593: LD_VAR 0 4
6597: PPUSH
6598: LD_VAR 0 2
6602: PPUSH
6603: CALL_OW 52
// end ;
6607: LD_VAR 0 3
6611: RET
// export function PrepareDifficulty ; begin
6612: LD_INT 0
6614: PPUSH
// if Difficulty = 1 then
6615: LD_OWVAR 67
6619: PUSH
6620: LD_INT 1
6622: EQUAL
6623: IFFALSE 6641
// begin RuSolMinLevel = 2 ;
6625: LD_ADDR_EXP 34
6629: PUSH
6630: LD_INT 2
6632: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6633: LD_ADDR_EXP 35
6637: PUSH
6638: LD_INT 3
6640: ST_TO_ADDR
// end ; if Difficulty = 2 then
6641: LD_OWVAR 67
6645: PUSH
6646: LD_INT 2
6648: EQUAL
6649: IFFALSE 6667
// begin RuSolMinLevel = 3 ;
6651: LD_ADDR_EXP 34
6655: PUSH
6656: LD_INT 3
6658: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6659: LD_ADDR_EXP 35
6663: PUSH
6664: LD_INT 5
6666: ST_TO_ADDR
// end ; if Difficulty = 3 then
6667: LD_OWVAR 67
6671: PUSH
6672: LD_INT 3
6674: EQUAL
6675: IFFALSE 6693
// begin RuSolMinLevel = 4 ;
6677: LD_ADDR_EXP 34
6681: PUSH
6682: LD_INT 4
6684: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6685: LD_ADDR_EXP 35
6689: PUSH
6690: LD_INT 6
6692: ST_TO_ADDR
// end ; end ;
6693: LD_VAR 0 1
6697: RET
// export function ShowQuery1 ; begin
6698: LD_INT 0
6700: PPUSH
// case query ( QKill ) of 1 :
6701: LD_STRING QKill
6703: PPUSH
6704: CALL_OW 97
6708: PUSH
6709: LD_INT 1
6711: DOUBLE
6712: EQUAL
6713: IFTRUE 6717
6715: GO 6728
6717: POP
// begin result = 1 ;
6718: LD_ADDR_VAR 0 1
6722: PUSH
6723: LD_INT 1
6725: ST_TO_ADDR
// end ; 2 :
6726: GO 6767
6728: LD_INT 2
6730: DOUBLE
6731: EQUAL
6732: IFTRUE 6736
6734: GO 6747
6736: POP
// begin result = 2 ;
6737: LD_ADDR_VAR 0 1
6741: PUSH
6742: LD_INT 2
6744: ST_TO_ADDR
// end ; 3 :
6745: GO 6767
6747: LD_INT 3
6749: DOUBLE
6750: EQUAL
6751: IFTRUE 6755
6753: GO 6766
6755: POP
// begin result = 3 ;
6756: LD_ADDR_VAR 0 1
6760: PUSH
6761: LD_INT 3
6763: ST_TO_ADDR
// end ; end ;
6764: GO 6767
6766: POP
// end ;
6767: LD_VAR 0 1
6771: RET
// export function ShowQuery2 ; begin
6772: LD_INT 0
6774: PPUSH
// case query ( QKill2 ) of 1 :
6775: LD_STRING QKill2
6777: PPUSH
6778: CALL_OW 97
6782: PUSH
6783: LD_INT 1
6785: DOUBLE
6786: EQUAL
6787: IFTRUE 6791
6789: GO 6802
6791: POP
// begin result = 1 ;
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: LD_INT 1
6799: ST_TO_ADDR
// end ; 2 :
6800: GO 6822
6802: LD_INT 2
6804: DOUBLE
6805: EQUAL
6806: IFTRUE 6810
6808: GO 6821
6810: POP
// begin result = 2 ;
6811: LD_ADDR_VAR 0 1
6815: PUSH
6816: LD_INT 2
6818: ST_TO_ADDR
// end ; end ;
6819: GO 6822
6821: POP
// end ;
6822: LD_VAR 0 1
6826: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6827: LD_INT 0
6829: PPUSH
6830: PPUSH
6831: PPUSH
6832: PPUSH
6833: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6834: LD_ADDR_VAR 0 8
6838: PUSH
6839: LD_INT 48
6841: PUSH
6842: LD_INT 49
6844: PUSH
6845: LD_INT 50
6847: PUSH
6848: LD_INT 20
6850: PUSH
6851: LD_INT 1
6853: PUSH
6854: LD_INT 51
6856: PUSH
6857: LD_INT 52
6859: PUSH
6860: LD_INT 69
6862: PUSH
6863: LD_INT 39
6865: PUSH
6866: LD_INT 34
6868: PUSH
6869: LD_INT 40
6871: PUSH
6872: LD_INT 53
6874: PUSH
6875: LD_INT 71
6877: PUSH
6878: LD_INT 57
6880: PUSH
6881: LD_INT 58
6883: PUSH
6884: LD_INT 44
6886: PUSH
6887: LD_INT 32
6889: PUSH
6890: LD_INT 27
6892: PUSH
6893: LD_INT 23
6895: PUSH
6896: LD_INT 33
6898: PUSH
6899: LD_INT 59
6901: PUSH
6902: LD_INT 54
6904: PUSH
6905: LD_INT 55
6907: PUSH
6908: LD_INT 56
6910: PUSH
6911: LD_INT 63
6913: PUSH
6914: LD_INT 64
6916: PUSH
6917: LD_INT 65
6919: PUSH
6920: LD_INT 30
6922: PUSH
6923: LD_INT 31
6925: PUSH
6926: LD_INT 21
6928: PUSH
6929: LD_INT 22
6931: PUSH
6932: LD_INT 25
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6969: LD_ADDR_VAR 0 5
6973: PUSH
6974: DOUBLE
6975: LD_INT 1
6977: DEC
6978: ST_TO_ADDR
6979: LD_VAR 0 8
6983: PUSH
6984: FOR_TO
6985: IFFALSE 7061
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6987: LD_VAR 0 8
6991: PUSH
6992: LD_VAR 0 5
6996: ARRAY
6997: PPUSH
6998: LD_VAR 0 1
7002: PPUSH
7003: CALL_OW 321
7007: PUSH
7008: LD_INT 1
7010: EQUAL
7011: PUSH
7012: LD_VAR 0 8
7016: PUSH
7017: LD_VAR 0 5
7021: ARRAY
7022: PPUSH
7023: LD_VAR 0 3
7027: PPUSH
7028: CALL_OW 482
7032: PUSH
7033: LD_INT 1
7035: EQUAL
7036: AND
7037: IFFALSE 7059
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
7039: LD_VAR 0 2
7043: PPUSH
7044: LD_VAR 0 8
7048: PUSH
7049: LD_VAR 0 5
7053: ARRAY
7054: PPUSH
7055: CALL_OW 184
7059: GO 6984
7061: POP
7062: POP
// end ;
7063: LD_VAR 0 4
7067: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7068: LD_INT 0
7070: PPUSH
7071: PPUSH
7072: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7073: LD_INT 22
7075: PUSH
7076: LD_VAR 0 1
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: LD_INT 21
7087: PUSH
7088: LD_INT 2
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: PPUSH
7099: CALL_OW 69
7103: PUSH
7104: LD_VAR 0 3
7108: LESSEQUAL
7109: IFFALSE 7217
// begin for i = 1 to vehCount do
7111: LD_ADDR_VAR 0 9
7115: PUSH
7116: DOUBLE
7117: LD_INT 1
7119: DEC
7120: ST_TO_ADDR
7121: LD_VAR 0 3
7125: PUSH
7126: FOR_TO
7127: IFFALSE 7215
// begin weapon = weaponTab [ i ] ;
7129: LD_ADDR_VAR 0 10
7133: PUSH
7134: LD_VAR 0 4
7138: PUSH
7139: LD_VAR 0 9
7143: ARRAY
7144: ST_TO_ADDR
// if weapon = 46 then
7145: LD_VAR 0 10
7149: PUSH
7150: LD_INT 46
7152: EQUAL
7153: IFFALSE 7184
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
7155: LD_VAR 0 2
7159: PPUSH
7160: LD_INT 24
7162: PPUSH
7163: LD_VAR 0 5
7167: PPUSH
7168: LD_VAR 0 6
7172: PPUSH
7173: LD_VAR 0 10
7177: PPUSH
7178: CALL_OW 185
// end else
7182: GO 7213
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7184: LD_VAR 0 2
7188: PPUSH
7189: LD_VAR 0 7
7193: PPUSH
7194: LD_VAR 0 5
7198: PPUSH
7199: LD_VAR 0 6
7203: PPUSH
7204: LD_VAR 0 10
7208: PPUSH
7209: CALL_OW 185
// end ; end ;
7213: GO 7126
7215: POP
7216: POP
// end ; end ;
7217: LD_VAR 0 8
7221: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7222: LD_INT 0
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7228: LD_ADDR_VAR 0 8
7232: PUSH
7233: LD_INT 22
7235: PUSH
7236: LD_VAR 0 1
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 21
7247: PUSH
7248: LD_INT 2
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 3
7257: PUSH
7258: LD_INT 24
7260: PUSH
7261: LD_INT 650
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: LIST
7276: PPUSH
7277: CALL_OW 69
7281: ST_TO_ADDR
// if damageVehicles > 0 then
7282: LD_VAR 0 8
7286: PUSH
7287: LD_INT 0
7289: GREATER
7290: IFFALSE 7311
// ComMoveXY ( damageVehicles , repX , repY ) ;
7292: LD_VAR 0 8
7296: PPUSH
7297: LD_VAR 0 3
7301: PPUSH
7302: LD_VAR 0 4
7306: PPUSH
7307: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7311: LD_VAR 0 8
7315: PPUSH
7316: LD_INT 95
7318: PUSH
7319: LD_VAR 0 2
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: LD_INT 3
7330: PUSH
7331: LD_INT 58
7333: PUSH
7334: EMPTY
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PPUSH
7345: CALL_OW 72
7349: PUSH
7350: LD_INT 0
7352: GREATER
7353: IFFALSE 7420
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7355: LD_ADDR_VAR 0 6
7359: PUSH
7360: LD_VAR 0 8
7364: PPUSH
7365: LD_INT 95
7367: PUSH
7368: LD_VAR 0 2
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: LD_INT 3
7379: PUSH
7380: LD_INT 58
7382: PUSH
7383: EMPTY
7384: LIST
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: PPUSH
7394: CALL_OW 72
7398: PUSH
7399: FOR_IN
7400: IFFALSE 7418
// ComExitVehicle ( UnitsInside ( i ) ) ;
7402: LD_VAR 0 6
7406: PPUSH
7407: CALL_OW 313
7411: PPUSH
7412: CALL_OW 121
7416: GO 7399
7418: POP
7419: POP
// end ;
7420: LD_VAR 0 5
7424: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7425: LD_INT 0
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
7431: PPUSH
7432: PPUSH
7433: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7434: LD_ADDR_VAR 0 8
7438: PUSH
7439: LD_INT 22
7441: PUSH
7442: LD_VAR 0 1
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PUSH
7451: LD_INT 21
7453: PUSH
7454: LD_INT 2
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PUSH
7461: LD_INT 24
7463: PUSH
7464: LD_INT 660
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: LD_INT 3
7473: PUSH
7474: LD_INT 58
7476: PUSH
7477: EMPTY
7478: LIST
7479: PUSH
7480: LD_INT 2
7482: PUSH
7483: LD_INT 34
7485: PUSH
7486: LD_INT 43
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 34
7495: PUSH
7496: LD_INT 44
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: LD_INT 34
7505: PUSH
7506: LD_INT 46
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: PPUSH
7530: CALL_OW 69
7534: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7535: LD_INT 22
7537: PUSH
7538: LD_VAR 0 1
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 21
7549: PUSH
7550: LD_INT 2
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 24
7559: PUSH
7560: LD_INT 1000
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 3
7569: PUSH
7570: LD_INT 58
7572: PUSH
7573: EMPTY
7574: LIST
7575: PUSH
7576: LD_INT 2
7578: PUSH
7579: LD_INT 34
7581: PUSH
7582: LD_INT 43
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: LD_INT 34
7591: PUSH
7592: LD_INT 44
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 34
7601: PUSH
7602: LD_INT 46
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: LIST
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: PPUSH
7626: CALL_OW 69
7630: PUSH
7631: LD_INT 5
7633: PUSH
7634: LD_INT 6
7636: PUSH
7637: LD_INT 6
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: PUSH
7645: LD_OWVAR 67
7649: ARRAY
7650: EQUAL
7651: IFFALSE 7907
// if seeEnemy = 0 then
7653: LD_VAR 0 11
7657: PUSH
7658: LD_INT 0
7660: EQUAL
7661: IFFALSE 7907
// repeat wait ( 0 0$1 ) ;
7663: LD_INT 35
7665: PPUSH
7666: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7670: LD_ADDR_VAR 0 8
7674: PUSH
7675: LD_INT 22
7677: PUSH
7678: LD_VAR 0 1
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 21
7689: PUSH
7690: LD_INT 2
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 24
7699: PUSH
7700: LD_INT 660
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: LD_INT 3
7709: PUSH
7710: LD_INT 58
7712: PUSH
7713: EMPTY
7714: LIST
7715: PUSH
7716: LD_INT 2
7718: PUSH
7719: LD_INT 34
7721: PUSH
7722: LD_INT 43
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 34
7731: PUSH
7732: LD_INT 44
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 34
7741: PUSH
7742: LD_INT 46
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: LIST
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 69
7770: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7771: LD_INT 22
7773: PUSH
7774: LD_VAR 0 1
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 95
7785: PUSH
7786: LD_VAR 0 2
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: NOT
7804: PUSH
7805: LD_VAR 0 11
7809: PUSH
7810: LD_INT 0
7812: EQUAL
7813: AND
7814: IFFALSE 7869
// for i := 1 to wayX do
7816: LD_ADDR_VAR 0 6
7820: PUSH
7821: DOUBLE
7822: LD_INT 1
7824: DEC
7825: ST_TO_ADDR
7826: LD_VAR 0 3
7830: PUSH
7831: FOR_TO
7832: IFFALSE 7867
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7834: LD_VAR 0 8
7838: PPUSH
7839: LD_VAR 0 3
7843: PUSH
7844: LD_VAR 0 6
7848: ARRAY
7849: PPUSH
7850: LD_VAR 0 4
7854: PUSH
7855: LD_VAR 0 6
7859: ARRAY
7860: PPUSH
7861: CALL_OW 114
7865: GO 7831
7867: POP
7868: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7869: LD_INT 22
7871: PUSH
7872: LD_VAR 0 1
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 95
7883: PUSH
7884: LD_VAR 0 2
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PPUSH
7897: CALL_OW 69
7901: PUSH
7902: LD_INT 0
7904: GREATER
7905: IFFALSE 7663
// seeEnemy = 1 ;
7907: LD_ADDR_VAR 0 11
7911: PUSH
7912: LD_INT 1
7914: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7915: LD_INT 35
7917: PPUSH
7918: CALL_OW 67
// for j in vehiclesOK do
7922: LD_ADDR_VAR 0 7
7926: PUSH
7927: LD_VAR 0 8
7931: PUSH
7932: FOR_IN
7933: IFFALSE 8146
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7935: LD_ADDR_VAR 0 9
7939: PUSH
7940: LD_INT 81
7942: PUSH
7943: LD_VAR 0 1
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: PUSH
7952: LD_INT 101
7954: PUSH
7955: LD_INT 1
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PPUSH
7966: CALL_OW 69
7970: PUSH
7971: LD_EXP 45
7975: DIFF
7976: PPUSH
7977: LD_VAR 0 7
7981: PPUSH
7982: CALL_OW 74
7986: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7987: LD_ADDR_VAR 0 10
7991: PUSH
7992: LD_INT 81
7994: PUSH
7995: LD_VAR 0 1
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PUSH
8004: LD_INT 101
8006: PUSH
8007: LD_INT 1
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 2
8016: PUSH
8017: LD_INT 59
8019: PUSH
8020: EMPTY
8021: LIST
8022: PUSH
8023: LD_INT 21
8025: PUSH
8026: LD_INT 1
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: PUSH
8033: LD_INT 21
8035: PUSH
8036: LD_INT 2
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: PPUSH
8057: CALL_OW 69
8061: PUSH
8062: LD_EXP 45
8066: DIFF
8067: PPUSH
8068: LD_VAR 0 7
8072: PPUSH
8073: CALL_OW 74
8077: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
8078: LD_VAR 0 7
8082: PPUSH
8083: LD_VAR 0 9
8087: PPUSH
8088: CALL_OW 296
8092: PUSH
8093: LD_INT 8
8095: PLUS
8096: PUSH
8097: LD_VAR 0 7
8101: PPUSH
8102: LD_VAR 0 10
8106: PPUSH
8107: CALL_OW 296
8111: LESS
8112: IFFALSE 8130
// ComAttackUnit ( j , target1 ) else
8114: LD_VAR 0 7
8118: PPUSH
8119: LD_VAR 0 9
8123: PPUSH
8124: CALL_OW 115
8128: GO 8144
// ComAttackUnit ( j , target2 ) ;
8130: LD_VAR 0 7
8134: PPUSH
8135: LD_VAR 0 10
8139: PPUSH
8140: CALL_OW 115
// end ;
8144: GO 7932
8146: POP
8147: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
8148: LD_INT 22
8150: PUSH
8151: LD_VAR 0 1
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PUSH
8160: LD_INT 21
8162: PUSH
8163: LD_INT 2
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 24
8172: PUSH
8173: LD_INT 1000
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 3
8182: PUSH
8183: LD_INT 58
8185: PUSH
8186: EMPTY
8187: LIST
8188: PUSH
8189: LD_INT 2
8191: PUSH
8192: LD_INT 34
8194: PUSH
8195: LD_INT 43
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 34
8204: PUSH
8205: LD_INT 44
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 34
8214: PUSH
8215: LD_INT 46
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: PPUSH
8239: CALL_OW 69
8243: PUSH
8244: LD_INT 0
8246: EQUAL
8247: IFFALSE 7915
// seeEnemy = 0 ;
8249: LD_ADDR_VAR 0 11
8253: PUSH
8254: LD_INT 0
8256: ST_TO_ADDR
// end ;
8257: LD_VAR 0 5
8261: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8262: LD_INT 0
8264: PPUSH
8265: PPUSH
8266: PPUSH
8267: PPUSH
8268: PPUSH
8269: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8270: LD_ADDR_VAR 0 8
8274: PUSH
8275: LD_VAR 0 2
8279: PPUSH
8280: CALL_OW 313
8284: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8285: LD_ADDR_VAR 0 9
8289: PUSH
8290: LD_VAR 0 3
8294: PPUSH
8295: LD_INT 22
8297: PUSH
8298: LD_VAR 0 1
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 25
8309: PUSH
8310: LD_INT 2
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 24
8319: PUSH
8320: LD_INT 750
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: PUSH
8327: LD_INT 3
8329: PUSH
8330: LD_INT 54
8332: PUSH
8333: EMPTY
8334: LIST
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: PPUSH
8346: CALL_OW 70
8350: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8351: LD_ADDR_VAR 0 6
8355: PUSH
8356: LD_VAR 0 3
8360: PPUSH
8361: LD_INT 22
8363: PUSH
8364: LD_VAR 0 1
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: LD_INT 21
8375: PUSH
8376: LD_INT 3
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PUSH
8383: LD_INT 3
8385: PUSH
8386: LD_INT 24
8388: PUSH
8389: LD_INT 1000
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: PPUSH
8408: CALL_OW 70
8412: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8413: LD_VAR 0 6
8417: NOT
8418: PUSH
8419: LD_INT 22
8421: PUSH
8422: LD_VAR 0 1
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PUSH
8431: LD_INT 25
8433: PUSH
8434: LD_INT 2
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 24
8443: PUSH
8444: LD_INT 250
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: LIST
8455: PPUSH
8456: CALL_OW 69
8460: NOT
8461: AND
8462: IFFALSE 8466
// exit ;
8464: GO 8648
// if buildings_list > 0 and engineerOkInside then
8466: LD_VAR 0 6
8470: PUSH
8471: LD_INT 0
8473: GREATER
8474: PUSH
8475: LD_VAR 0 8
8479: AND
8480: IFFALSE 8491
// ComExitBuilding ( engineerOkInside ) ;
8482: LD_VAR 0 8
8486: PPUSH
8487: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8491: LD_VAR 0 6
8495: PUSH
8496: LD_INT 0
8498: GREATER
8499: PUSH
8500: LD_VAR 0 9
8504: PUSH
8505: LD_INT 0
8507: GREATER
8508: AND
8509: IFFALSE 8529
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8511: LD_VAR 0 9
8515: PPUSH
8516: LD_VAR 0 6
8520: PUSH
8521: LD_INT 1
8523: ARRAY
8524: PPUSH
8525: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8529: LD_VAR 0 6
8533: PUSH
8534: LD_INT 0
8536: EQUAL
8537: PUSH
8538: LD_VAR 0 4
8542: PUSH
8543: LD_INT 0
8545: EQUAL
8546: AND
8547: PUSH
8548: LD_VAR 0 9
8552: PUSH
8553: LD_INT 0
8555: GREATER
8556: AND
8557: IFFALSE 8573
// ComEnterUnit ( engineerOkOutside , building ) ;
8559: LD_VAR 0 9
8563: PPUSH
8564: LD_VAR 0 2
8568: PPUSH
8569: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8573: LD_VAR 0 9
8577: PUSH
8578: LD_INT 0
8580: GREATER
8581: PUSH
8582: LD_VAR 0 6
8586: PUSH
8587: LD_INT 0
8589: EQUAL
8590: AND
8591: PUSH
8592: LD_VAR 0 4
8596: PUSH
8597: LD_INT 0
8599: GREATER
8600: AND
8601: IFFALSE 8648
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8603: LD_VAR 0 9
8607: PPUSH
8608: LD_VAR 0 4
8612: PUSH
8613: LD_INT 1
8615: ARRAY
8616: PPUSH
8617: LD_VAR 0 4
8621: PUSH
8622: LD_INT 2
8624: ARRAY
8625: PPUSH
8626: LD_VAR 0 4
8630: PUSH
8631: LD_INT 3
8633: ARRAY
8634: PPUSH
8635: LD_VAR 0 4
8639: PUSH
8640: LD_INT 4
8642: ARRAY
8643: PPUSH
8644: CALL_OW 145
// end ;
8648: LD_VAR 0 5
8652: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8653: LD_INT 0
8655: PPUSH
8656: PPUSH
8657: PPUSH
8658: PPUSH
8659: PPUSH
8660: PPUSH
8661: PPUSH
8662: PPUSH
8663: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8664: LD_ADDR_VAR 0 6
8668: PUSH
8669: LD_INT 22
8671: PUSH
8672: LD_VAR 0 1
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 25
8683: PUSH
8684: LD_INT 4
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: LD_INT 23
8693: PUSH
8694: LD_INT 2
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: LD_INT 24
8703: PUSH
8704: LD_INT 251
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: PPUSH
8717: CALL_OW 69
8721: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8722: LD_ADDR_VAR 0 7
8726: PUSH
8727: LD_VAR 0 3
8731: PPUSH
8732: LD_INT 22
8734: PUSH
8735: LD_VAR 0 1
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 23
8746: PUSH
8747: LD_INT 2
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 25
8756: PUSH
8757: LD_INT 4
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: LD_INT 50
8766: PUSH
8767: EMPTY
8768: LIST
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: PPUSH
8776: CALL_OW 70
8780: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8781: LD_ADDR_VAR 0 10
8785: PUSH
8786: LD_VAR 0 3
8790: PPUSH
8791: LD_INT 22
8793: PUSH
8794: LD_VAR 0 1
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: LD_INT 21
8805: PUSH
8806: LD_INT 1
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 3
8815: PUSH
8816: LD_INT 25
8818: PUSH
8819: LD_INT 3
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 3
8832: PUSH
8833: LD_INT 24
8835: PUSH
8836: LD_INT 750
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 70
8857: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8858: LD_ADDR_VAR 0 11
8862: PUSH
8863: LD_VAR 0 2
8867: PPUSH
8868: LD_INT 22
8870: PUSH
8871: LD_VAR 0 1
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 21
8882: PUSH
8883: LD_INT 1
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 3
8892: PUSH
8893: LD_INT 25
8895: PUSH
8896: LD_INT 3
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 3
8909: PUSH
8910: LD_INT 24
8912: PUSH
8913: LD_INT 1000
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: PPUSH
8930: CALL_OW 70
8934: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8935: LD_VAR 0 10
8939: NOT
8940: PUSH
8941: LD_VAR 0 11
8945: NOT
8946: AND
8947: PUSH
8948: LD_VAR 0 6
8952: NOT
8953: AND
8954: IFFALSE 8958
// exit ;
8956: GO 9192
// if damageUnits > 0 and sci_list > 0 then
8958: LD_VAR 0 10
8962: PUSH
8963: LD_INT 0
8965: GREATER
8966: PUSH
8967: LD_VAR 0 6
8971: PUSH
8972: LD_INT 0
8974: GREATER
8975: AND
8976: IFFALSE 8992
// ComMoveToArea ( damageUnits , healArea ) ;
8978: LD_VAR 0 10
8982: PPUSH
8983: LD_VAR 0 2
8987: PPUSH
8988: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8992: LD_VAR 0 11
8996: PUSH
8997: LD_INT 0
8999: GREATER
9000: PUSH
9001: LD_VAR 0 6
9005: PUSH
9006: LD_INT 0
9008: GREATER
9009: AND
9010: IFFALSE 9021
// ComExitBuilding ( sci_list ) ;
9012: LD_VAR 0 6
9016: PPUSH
9017: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
9021: LD_VAR 0 11
9025: PUSH
9026: LD_INT 0
9028: GREATER
9029: PUSH
9030: LD_VAR 0 7
9034: PUSH
9035: LD_INT 0
9037: GREATER
9038: AND
9039: IFFALSE 9059
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9041: LD_VAR 0 7
9045: PPUSH
9046: LD_VAR 0 11
9050: PUSH
9051: LD_INT 1
9053: ARRAY
9054: PPUSH
9055: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
9059: LD_VAR 0 10
9063: PUSH
9064: LD_INT 0
9066: EQUAL
9067: PUSH
9068: LD_VAR 0 11
9072: PUSH
9073: LD_INT 0
9075: EQUAL
9076: AND
9077: PUSH
9078: LD_VAR 0 7
9082: PUSH
9083: LD_INT 0
9085: GREATER
9086: AND
9087: IFFALSE 9192
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9089: LD_ADDR_VAR 0 12
9093: PUSH
9094: LD_INT 22
9096: PUSH
9097: LD_VAR 0 1
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 21
9108: PUSH
9109: LD_INT 3
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: LD_INT 30
9118: PUSH
9119: LD_INT 8
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: PPUSH
9131: CALL_OW 69
9135: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
9136: LD_ADDR_VAR 0 13
9140: PUSH
9141: LD_INT 1
9143: PPUSH
9144: LD_VAR 0 12
9148: PPUSH
9149: CALL_OW 12
9153: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9154: LD_VAR 0 7
9158: PPUSH
9159: LD_INT 3
9161: PUSH
9162: LD_INT 60
9164: PUSH
9165: EMPTY
9166: LIST
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PPUSH
9172: CALL_OW 72
9176: PPUSH
9177: LD_VAR 0 12
9181: PUSH
9182: LD_VAR 0 13
9186: ARRAY
9187: PPUSH
9188: CALL_OW 120
// end ; end ;
9192: LD_VAR 0 5
9196: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
9197: LD_INT 0
9199: PPUSH
9200: PPUSH
9201: PPUSH
9202: PPUSH
// tmpTab = [ ] ;
9203: LD_ADDR_VAR 0 6
9207: PUSH
9208: EMPTY
9209: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9210: LD_INT 22
9212: PUSH
9213: LD_VAR 0 1
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: LD_INT 30
9224: PUSH
9225: LD_INT 32
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PPUSH
9236: CALL_OW 69
9240: PUSH
9241: LD_INT 0
9243: GREATER
9244: IFFALSE 9327
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9246: LD_ADDR_VAR 0 4
9250: PUSH
9251: LD_INT 22
9253: PUSH
9254: LD_VAR 0 1
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PUSH
9263: LD_INT 30
9265: PUSH
9266: LD_INT 32
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PPUSH
9277: CALL_OW 69
9281: PUSH
9282: FOR_IN
9283: IFFALSE 9325
// begin for j in UnitsInside ( i ) do
9285: LD_ADDR_VAR 0 5
9289: PUSH
9290: LD_VAR 0 4
9294: PPUSH
9295: CALL_OW 313
9299: PUSH
9300: FOR_IN
9301: IFFALSE 9321
// tmpTab = tmpTab ^ j ;
9303: LD_ADDR_VAR 0 6
9307: PUSH
9308: LD_VAR 0 6
9312: PUSH
9313: LD_VAR 0 5
9317: ADD
9318: ST_TO_ADDR
9319: GO 9300
9321: POP
9322: POP
// end ;
9323: GO 9282
9325: POP
9326: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9327: LD_VAR 0 6
9331: PPUSH
9332: LD_VAR 0 2
9336: PPUSH
9337: CALL_OW 250
9341: PPUSH
9342: LD_VAR 0 2
9346: PPUSH
9347: CALL_OW 251
9351: PPUSH
9352: CALL_OW 114
// end ;
9356: LD_VAR 0 3
9360: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9361: LD_INT 0
9363: PPUSH
9364: PPUSH
9365: PPUSH
9366: PPUSH
// enable ;
9367: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9368: LD_ADDR_VAR 0 7
9372: PUSH
9373: LD_VAR 0 3
9377: PPUSH
9378: CALL_OW 435
9382: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9383: LD_ADDR_VAR 0 6
9387: PUSH
9388: LD_INT 22
9390: PUSH
9391: LD_VAR 0 1
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PUSH
9400: LD_INT 34
9402: PUSH
9403: LD_VAR 0 2
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PPUSH
9416: CALL_OW 69
9420: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9421: LD_VAR 0 6
9425: PUSH
9426: LD_INT 0
9428: GREATER
9429: PUSH
9430: LD_VAR 0 3
9434: PPUSH
9435: CALL_OW 435
9439: AND
9440: PUSH
9441: LD_VAR 0 7
9445: PUSH
9446: LD_INT 0
9448: GREATER
9449: AND
9450: IFFALSE 9499
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9452: LD_VAR 0 6
9456: PUSH
9457: LD_INT 1
9459: ARRAY
9460: PPUSH
9461: LD_VAR 0 7
9465: PUSH
9466: LD_INT 1
9468: ARRAY
9469: PPUSH
9470: LD_VAR 0 7
9474: PUSH
9475: LD_INT 2
9477: ARRAY
9478: PPUSH
9479: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9483: LD_VAR 0 6
9487: PUSH
9488: LD_INT 1
9490: ARRAY
9491: PPUSH
9492: LD_INT 100
9494: PPUSH
9495: CALL_OW 240
// end ; end ;
9499: LD_VAR 0 4
9503: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9504: LD_INT 0
9506: PPUSH
9507: PPUSH
9508: PPUSH
9509: PPUSH
9510: PPUSH
9511: PPUSH
9512: PPUSH
9513: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9514: LD_ADDR_VAR 0 6
9518: PUSH
9519: LD_VAR 0 2
9523: PPUSH
9524: LD_INT 22
9526: PUSH
9527: LD_VAR 0 1
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PUSH
9536: LD_INT 56
9538: PUSH
9539: EMPTY
9540: LIST
9541: PUSH
9542: LD_INT 24
9544: PUSH
9545: LD_INT 700
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 3
9554: PUSH
9555: LD_INT 60
9557: PUSH
9558: EMPTY
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: LD_INT 2
9567: PUSH
9568: LD_INT 25
9570: PUSH
9571: LD_INT 1
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: PUSH
9578: LD_INT 25
9580: PUSH
9581: LD_INT 5
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 25
9590: PUSH
9591: LD_INT 8
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 25
9600: PUSH
9601: LD_INT 9
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: PPUSH
9622: CALL_OW 70
9626: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9627: LD_ADDR_VAR 0 7
9631: PUSH
9632: LD_VAR 0 2
9636: PPUSH
9637: LD_INT 22
9639: PUSH
9640: LD_VAR 0 1
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PUSH
9649: LD_INT 30
9651: PUSH
9652: LD_INT 32
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PUSH
9659: LD_INT 58
9661: PUSH
9662: EMPTY
9663: LIST
9664: PUSH
9665: LD_INT 24
9667: PUSH
9668: LD_INT 251
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: PPUSH
9681: CALL_OW 70
9685: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9686: LD_ADDR_VAR 0 9
9690: PUSH
9691: LD_VAR 0 2
9695: PPUSH
9696: LD_INT 22
9698: PUSH
9699: LD_VAR 0 1
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 2
9710: PUSH
9711: LD_INT 30
9713: PUSH
9714: LD_INT 4
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: PUSH
9721: LD_INT 30
9723: PUSH
9724: LD_INT 5
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: LIST
9735: PUSH
9736: LD_INT 24
9738: PUSH
9739: LD_INT 251
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: LIST
9750: PPUSH
9751: CALL_OW 70
9755: ST_TO_ADDR
// if barrackList > 0 then
9756: LD_VAR 0 9
9760: PUSH
9761: LD_INT 0
9763: GREATER
9764: IFFALSE 9912
// begin if turretList = 0 then
9766: LD_VAR 0 7
9770: PUSH
9771: LD_INT 0
9773: EQUAL
9774: IFFALSE 9816
// begin if soldiers_list > 0 then
9776: LD_VAR 0 6
9780: PUSH
9781: LD_INT 0
9783: GREATER
9784: IFFALSE 9814
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9786: LD_VAR 0 6
9790: PPUSH
9791: LD_VAR 0 9
9795: PUSH
9796: LD_INT 1
9798: PPUSH
9799: LD_VAR 0 9
9803: PPUSH
9804: CALL_OW 12
9808: ARRAY
9809: PPUSH
9810: CALL_OW 120
// end else
9814: GO 9912
// begin for i in barrackList do
9816: LD_ADDR_VAR 0 4
9820: PUSH
9821: LD_VAR 0 9
9825: PUSH
9826: FOR_IN
9827: IFFALSE 9910
// begin insideUnits = UnitsInside ( i ) ;
9829: LD_ADDR_VAR 0 10
9833: PUSH
9834: LD_VAR 0 4
9838: PPUSH
9839: CALL_OW 313
9843: ST_TO_ADDR
// if insideUnits > 0 then
9844: LD_VAR 0 10
9848: PUSH
9849: LD_INT 0
9851: GREATER
9852: IFFALSE 9876
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9854: LD_VAR 0 10
9858: PUSH
9859: LD_INT 1
9861: ARRAY
9862: PPUSH
9863: LD_VAR 0 7
9867: PUSH
9868: LD_INT 1
9870: ARRAY
9871: PPUSH
9872: CALL_OW 120
// if soldiers_list > 0 then
9876: LD_VAR 0 6
9880: PUSH
9881: LD_INT 0
9883: GREATER
9884: IFFALSE 9908
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9886: LD_VAR 0 6
9890: PUSH
9891: LD_INT 1
9893: ARRAY
9894: PPUSH
9895: LD_VAR 0 7
9899: PUSH
9900: LD_INT 1
9902: ARRAY
9903: PPUSH
9904: CALL_OW 120
// end ;
9908: GO 9826
9910: POP
9911: POP
// end ; end ; end ;
9912: LD_VAR 0 3
9916: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9917: LD_INT 0
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
9923: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9924: LD_ADDR_VAR 0 6
9928: PUSH
9929: LD_INT 22
9931: PUSH
9932: LD_VAR 0 1
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: LD_INT 2
9943: PUSH
9944: LD_INT 30
9946: PUSH
9947: LD_INT 31
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: LD_INT 30
9956: PUSH
9957: LD_INT 32
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: LD_INT 30
9966: PUSH
9967: LD_INT 33
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PUSH
9974: LD_INT 30
9976: PUSH
9977: LD_INT 4
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: LD_INT 30
9986: PUSH
9987: LD_INT 5
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PPUSH
10006: CALL_OW 69
10010: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10011: LD_ADDR_VAR 0 7
10015: PUSH
10016: LD_INT 22
10018: PUSH
10019: LD_VAR 0 2
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PUSH
10028: LD_INT 21
10030: PUSH
10031: LD_INT 3
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 58
10040: PUSH
10041: EMPTY
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: LIST
10048: PPUSH
10049: CALL_OW 69
10053: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
10054: LD_VAR 0 6
10058: PUSH
10059: LD_INT 0
10061: GREATER
10062: PUSH
10063: LD_VAR 0 7
10067: PUSH
10068: LD_INT 0
10070: GREATER
10071: AND
10072: IFFALSE 10142
// begin for i in turretsList do
10074: LD_ADDR_VAR 0 4
10078: PUSH
10079: LD_VAR 0 6
10083: PUSH
10084: FOR_IN
10085: IFFALSE 10140
// begin for j in enemyBuildings do
10087: LD_ADDR_VAR 0 5
10091: PUSH
10092: LD_VAR 0 7
10096: PUSH
10097: FOR_IN
10098: IFFALSE 10136
// begin if GetDistUnits ( i , j ) < 20 then
10100: LD_VAR 0 4
10104: PPUSH
10105: LD_VAR 0 5
10109: PPUSH
10110: CALL_OW 296
10114: PUSH
10115: LD_INT 20
10117: LESS
10118: IFFALSE 10134
// begin ComAttackUnit ( i , j ) ;
10120: LD_VAR 0 4
10124: PPUSH
10125: LD_VAR 0 5
10129: PPUSH
10130: CALL_OW 115
// end ; end ;
10134: GO 10097
10136: POP
10137: POP
// end ;
10138: GO 10084
10140: POP
10141: POP
// end ; end ;
10142: LD_VAR 0 3
10146: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10147: LD_INT 0
10149: PPUSH
10150: PPUSH
10151: PPUSH
10152: PPUSH
10153: PPUSH
10154: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10155: LD_ADDR_VAR 0 8
10159: PUSH
10160: LD_INT 22
10162: PUSH
10163: LD_VAR 0 1
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 21
10174: PUSH
10175: LD_INT 2
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: LD_INT 34
10184: PUSH
10185: LD_INT 52
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: LIST
10196: PPUSH
10197: CALL_OW 69
10201: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10202: LD_ADDR_VAR 0 9
10206: PUSH
10207: LD_INT 22
10209: PUSH
10210: LD_VAR 0 1
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 21
10221: PUSH
10222: LD_INT 3
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 3
10231: PUSH
10232: LD_INT 24
10234: PUSH
10235: LD_INT 1000
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: LIST
10250: PUSH
10251: EMPTY
10252: LIST
10253: PPUSH
10254: CALL_OW 69
10258: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10259: LD_VAR 0 9
10263: PUSH
10264: LD_INT 0
10266: GREATER
10267: PUSH
10268: LD_VAR 0 8
10272: PPUSH
10273: LD_INT 24
10275: PUSH
10276: LD_INT 750
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PPUSH
10283: CALL_OW 72
10287: PUSH
10288: LD_INT 0
10290: GREATER
10291: AND
10292: IFFALSE 10327
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10294: LD_VAR 0 8
10298: PPUSH
10299: LD_INT 24
10301: PUSH
10302: LD_INT 750
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PPUSH
10309: CALL_OW 72
10313: PPUSH
10314: LD_VAR 0 9
10318: PUSH
10319: LD_INT 1
10321: ARRAY
10322: PPUSH
10323: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10327: LD_VAR 0 8
10331: PPUSH
10332: LD_INT 3
10334: PUSH
10335: LD_INT 24
10337: PUSH
10338: LD_INT 750
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PPUSH
10349: CALL_OW 72
10353: PUSH
10354: LD_INT 0
10356: GREATER
10357: IFFALSE 10395
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10359: LD_VAR 0 8
10363: PPUSH
10364: LD_INT 3
10366: PUSH
10367: LD_INT 24
10369: PUSH
10370: LD_INT 750
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 72
10385: PPUSH
10386: LD_VAR 0 2
10390: PPUSH
10391: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10395: LD_VAR 0 8
10399: PUSH
10400: LD_INT 0
10402: GREATER
10403: PUSH
10404: LD_VAR 0 9
10408: PUSH
10409: LD_INT 0
10411: EQUAL
10412: AND
10413: PUSH
10414: LD_VAR 0 3
10418: PUSH
10419: LD_INT 0
10421: GREATER
10422: AND
10423: IFFALSE 10470
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10425: LD_VAR 0 8
10429: PPUSH
10430: LD_VAR 0 3
10434: PUSH
10435: LD_INT 1
10437: ARRAY
10438: PPUSH
10439: LD_VAR 0 3
10443: PUSH
10444: LD_INT 2
10446: ARRAY
10447: PPUSH
10448: LD_VAR 0 3
10452: PUSH
10453: LD_INT 3
10455: ARRAY
10456: PPUSH
10457: LD_VAR 0 3
10461: PUSH
10462: LD_INT 4
10464: ARRAY
10465: PPUSH
10466: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10470: LD_VAR 0 2
10474: PPUSH
10475: LD_INT 22
10477: PUSH
10478: LD_VAR 0 1
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PUSH
10487: LD_INT 21
10489: PUSH
10490: LD_INT 2
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: LD_INT 34
10499: PUSH
10500: LD_INT 52
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 3
10509: PUSH
10510: LD_INT 24
10512: PUSH
10513: LD_INT 750
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: PPUSH
10530: CALL_OW 70
10534: PUSH
10535: LD_INT 0
10537: GREATER
10538: IFFALSE 10740
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10540: LD_ADDR_VAR 0 5
10544: PUSH
10545: LD_VAR 0 2
10549: PPUSH
10550: LD_INT 22
10552: PUSH
10553: LD_VAR 0 1
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: LD_INT 21
10564: PUSH
10565: LD_INT 2
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: LD_INT 34
10574: PUSH
10575: LD_INT 52
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PUSH
10582: LD_INT 3
10584: PUSH
10585: LD_INT 24
10587: PUSH
10588: LD_INT 750
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: PPUSH
10605: CALL_OW 70
10609: PUSH
10610: FOR_IN
10611: IFFALSE 10738
// begin mechTmp = UnitsInside ( i ) ;
10613: LD_ADDR_VAR 0 6
10617: PUSH
10618: LD_VAR 0 5
10622: PPUSH
10623: CALL_OW 313
10627: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10628: LD_VAR 0 6
10632: PPUSH
10633: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10637: LD_VAR 0 6
10641: PPUSH
10642: LD_VAR 0 7
10646: PPUSH
10647: CALL_OW 189
// wait ( 0 0$2 ) ;
10651: LD_INT 70
10653: PPUSH
10654: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10658: LD_VAR 0 6
10662: PPUSH
10663: LD_VAR 0 2
10667: PPUSH
10668: LD_INT 22
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 21
10682: PUSH
10683: LD_INT 2
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: PUSH
10690: LD_INT 34
10692: PUSH
10693: LD_INT 52
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: PUSH
10700: LD_INT 24
10702: PUSH
10703: LD_INT 1000
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 58
10712: PUSH
10713: EMPTY
10714: LIST
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: PPUSH
10723: CALL_OW 70
10727: PUSH
10728: LD_INT 1
10730: ARRAY
10731: PPUSH
10732: CALL_OW 180
// end ;
10736: GO 10610
10738: POP
10739: POP
// end ; end ;
10740: LD_VAR 0 4
10744: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10745: LD_INT 0
10747: PPUSH
10748: PPUSH
10749: PPUSH
10750: PPUSH
10751: PPUSH
10752: PPUSH
10753: PPUSH
10754: PPUSH
10755: PPUSH
10756: PPUSH
10757: PPUSH
// for i = 1 to medicCount do
10758: LD_ADDR_VAR 0 14
10762: PUSH
10763: DOUBLE
10764: LD_INT 1
10766: DEC
10767: ST_TO_ADDR
10768: LD_VAR 0 7
10772: PUSH
10773: FOR_TO
10774: IFFALSE 10856
// begin uc_side = side ;
10776: LD_ADDR_OWVAR 20
10780: PUSH
10781: LD_VAR 0 1
10785: ST_TO_ADDR
// uc_nation = nation ;
10786: LD_ADDR_OWVAR 21
10790: PUSH
10791: LD_VAR 0 2
10795: ST_TO_ADDR
// hc_name =  ;
10796: LD_ADDR_OWVAR 26
10800: PUSH
10801: LD_STRING 
10803: ST_TO_ADDR
// hc_gallery =  ;
10804: LD_ADDR_OWVAR 33
10808: PUSH
10809: LD_STRING 
10811: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10812: LD_INT 0
10814: PPUSH
10815: LD_INT 4
10817: PPUSH
10818: LD_VAR 0 8
10822: PPUSH
10823: CALL_OW 380
// un = CreateHuman ;
10827: LD_ADDR_VAR 0 16
10831: PUSH
10832: CALL_OW 44
10836: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10837: LD_VAR 0 16
10841: PPUSH
10842: LD_VAR 0 9
10846: PPUSH
10847: LD_INT 0
10849: PPUSH
10850: CALL_OW 49
// end ;
10854: GO 10773
10856: POP
10857: POP
// for i = 1 to soldierCount do
10858: LD_ADDR_VAR 0 14
10862: PUSH
10863: DOUBLE
10864: LD_INT 1
10866: DEC
10867: ST_TO_ADDR
10868: LD_VAR 0 3
10872: PUSH
10873: FOR_TO
10874: IFFALSE 10956
// begin uc_side = side ;
10876: LD_ADDR_OWVAR 20
10880: PUSH
10881: LD_VAR 0 1
10885: ST_TO_ADDR
// uc_nation = nation ;
10886: LD_ADDR_OWVAR 21
10890: PUSH
10891: LD_VAR 0 2
10895: ST_TO_ADDR
// hc_name =  ;
10896: LD_ADDR_OWVAR 26
10900: PUSH
10901: LD_STRING 
10903: ST_TO_ADDR
// hc_gallery =  ;
10904: LD_ADDR_OWVAR 33
10908: PUSH
10909: LD_STRING 
10911: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10912: LD_INT 0
10914: PPUSH
10915: LD_INT 1
10917: PPUSH
10918: LD_VAR 0 8
10922: PPUSH
10923: CALL_OW 380
// un = CreateHuman ;
10927: LD_ADDR_VAR 0 16
10931: PUSH
10932: CALL_OW 44
10936: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10937: LD_VAR 0 16
10941: PPUSH
10942: LD_VAR 0 9
10946: PPUSH
10947: LD_INT 0
10949: PPUSH
10950: CALL_OW 49
// end ;
10954: GO 10873
10956: POP
10957: POP
// for i = 1 to sniperCount do
10958: LD_ADDR_VAR 0 14
10962: PUSH
10963: DOUBLE
10964: LD_INT 1
10966: DEC
10967: ST_TO_ADDR
10968: LD_VAR 0 4
10972: PUSH
10973: FOR_TO
10974: IFFALSE 11056
// begin uc_side = side ;
10976: LD_ADDR_OWVAR 20
10980: PUSH
10981: LD_VAR 0 1
10985: ST_TO_ADDR
// uc_nation = nation ;
10986: LD_ADDR_OWVAR 21
10990: PUSH
10991: LD_VAR 0 2
10995: ST_TO_ADDR
// hc_name =  ;
10996: LD_ADDR_OWVAR 26
11000: PUSH
11001: LD_STRING 
11003: ST_TO_ADDR
// hc_gallery =  ;
11004: LD_ADDR_OWVAR 33
11008: PUSH
11009: LD_STRING 
11011: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
11012: LD_INT 0
11014: PPUSH
11015: LD_INT 5
11017: PPUSH
11018: LD_VAR 0 8
11022: PPUSH
11023: CALL_OW 380
// un = CreateHuman ;
11027: LD_ADDR_VAR 0 16
11031: PUSH
11032: CALL_OW 44
11036: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11037: LD_VAR 0 16
11041: PPUSH
11042: LD_VAR 0 9
11046: PPUSH
11047: LD_INT 0
11049: PPUSH
11050: CALL_OW 49
// end ;
11054: GO 10973
11056: POP
11057: POP
// for i = 1 to bazookCount do
11058: LD_ADDR_VAR 0 14
11062: PUSH
11063: DOUBLE
11064: LD_INT 1
11066: DEC
11067: ST_TO_ADDR
11068: LD_VAR 0 5
11072: PUSH
11073: FOR_TO
11074: IFFALSE 11156
// begin uc_side = side ;
11076: LD_ADDR_OWVAR 20
11080: PUSH
11081: LD_VAR 0 1
11085: ST_TO_ADDR
// uc_nation = nation ;
11086: LD_ADDR_OWVAR 21
11090: PUSH
11091: LD_VAR 0 2
11095: ST_TO_ADDR
// hc_name =  ;
11096: LD_ADDR_OWVAR 26
11100: PUSH
11101: LD_STRING 
11103: ST_TO_ADDR
// hc_gallery =  ;
11104: LD_ADDR_OWVAR 33
11108: PUSH
11109: LD_STRING 
11111: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11112: LD_INT 0
11114: PPUSH
11115: LD_INT 9
11117: PPUSH
11118: LD_VAR 0 8
11122: PPUSH
11123: CALL_OW 380
// un = CreateHuman ;
11127: LD_ADDR_VAR 0 16
11131: PUSH
11132: CALL_OW 44
11136: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11137: LD_VAR 0 16
11141: PPUSH
11142: LD_VAR 0 9
11146: PPUSH
11147: LD_INT 0
11149: PPUSH
11150: CALL_OW 49
// end ;
11154: GO 11073
11156: POP
11157: POP
// for i = 1 to mortalCount do
11158: LD_ADDR_VAR 0 14
11162: PUSH
11163: DOUBLE
11164: LD_INT 1
11166: DEC
11167: ST_TO_ADDR
11168: LD_VAR 0 6
11172: PUSH
11173: FOR_TO
11174: IFFALSE 11256
// begin uc_side = side ;
11176: LD_ADDR_OWVAR 20
11180: PUSH
11181: LD_VAR 0 1
11185: ST_TO_ADDR
// uc_nation = nation ;
11186: LD_ADDR_OWVAR 21
11190: PUSH
11191: LD_VAR 0 2
11195: ST_TO_ADDR
// hc_name =  ;
11196: LD_ADDR_OWVAR 26
11200: PUSH
11201: LD_STRING 
11203: ST_TO_ADDR
// hc_gallery =  ;
11204: LD_ADDR_OWVAR 33
11208: PUSH
11209: LD_STRING 
11211: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11212: LD_INT 0
11214: PPUSH
11215: LD_INT 8
11217: PPUSH
11218: LD_VAR 0 8
11222: PPUSH
11223: CALL_OW 380
// un = CreateHuman ;
11227: LD_ADDR_VAR 0 16
11231: PUSH
11232: CALL_OW 44
11236: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11237: LD_VAR 0 16
11241: PPUSH
11242: LD_VAR 0 9
11246: PPUSH
11247: LD_INT 0
11249: PPUSH
11250: CALL_OW 49
// end ;
11254: GO 11173
11256: POP
11257: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11258: LD_ADDR_VAR 0 19
11262: PUSH
11263: LD_INT 22
11265: PUSH
11266: LD_VAR 0 1
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 2
11277: PUSH
11278: LD_INT 25
11280: PUSH
11281: LD_INT 1
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 25
11290: PUSH
11291: LD_INT 5
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 25
11300: PUSH
11301: LD_INT 8
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 25
11310: PUSH
11311: LD_INT 9
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PPUSH
11329: CALL_OW 69
11333: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11334: LD_ADDR_VAR 0 18
11338: PUSH
11339: LD_INT 22
11341: PUSH
11342: LD_VAR 0 1
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PUSH
11351: LD_INT 25
11353: PUSH
11354: LD_INT 4
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PPUSH
11365: CALL_OW 69
11369: ST_TO_ADDR
// for i in medic_list do
11370: LD_ADDR_VAR 0 14
11374: PUSH
11375: LD_VAR 0 18
11379: PUSH
11380: FOR_IN
11381: IFFALSE 11399
// ComMoveToArea ( i , healArea ) ;
11383: LD_VAR 0 14
11387: PPUSH
11388: LD_VAR 0 10
11392: PPUSH
11393: CALL_OW 113
11397: GO 11380
11399: POP
11400: POP
// if strategy = 1 then
11401: LD_VAR 0 12
11405: PUSH
11406: LD_INT 1
11408: EQUAL
11409: IFFALSE 12126
// begin repeat wait ( 0 0$3 ) ;
11411: LD_INT 105
11413: PPUSH
11414: CALL_OW 67
// for i in soldiersOK_list do
11418: LD_ADDR_VAR 0 14
11422: PUSH
11423: LD_VAR 0 19
11427: PUSH
11428: FOR_IN
11429: IFFALSE 11463
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11431: LD_VAR 0 14
11435: PPUSH
11436: LD_INT 80
11438: PPUSH
11439: LD_INT 109
11441: PPUSH
11442: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11446: LD_VAR 0 14
11450: PPUSH
11451: LD_INT 39
11453: PPUSH
11454: LD_INT 49
11456: PPUSH
11457: CALL_OW 174
// end ;
11461: GO 11428
11463: POP
11464: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11465: LD_INT 13
11467: PPUSH
11468: LD_INT 22
11470: PUSH
11471: LD_VAR 0 1
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PPUSH
11480: CALL_OW 70
11484: PUSH
11485: LD_INT 0
11487: GREATER
11488: IFFALSE 11411
// repeat wait ( 0 0$1 ) ;
11490: LD_INT 35
11492: PPUSH
11493: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11497: LD_ADDR_VAR 0 17
11501: PUSH
11502: LD_INT 22
11504: PUSH
11505: LD_VAR 0 1
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 1
11516: PUSH
11517: LD_INT 3
11519: PUSH
11520: LD_INT 24
11522: PUSH
11523: LD_INT 550
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 24
11536: PUSH
11537: LD_INT 250
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: LIST
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PPUSH
11553: CALL_OW 69
11557: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11558: LD_ADDR_VAR 0 19
11562: PUSH
11563: LD_INT 22
11565: PUSH
11566: LD_VAR 0 1
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: LD_INT 2
11577: PUSH
11578: LD_INT 25
11580: PUSH
11581: LD_INT 1
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 25
11590: PUSH
11591: LD_INT 5
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 25
11600: PUSH
11601: LD_INT 8
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 25
11610: PUSH
11611: LD_INT 9
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: PUSH
11625: LD_INT 24
11627: PUSH
11628: LD_INT 1000
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: PPUSH
11640: CALL_OW 69
11644: ST_TO_ADDR
// if medicCount > 0 then
11645: LD_VAR 0 7
11649: PUSH
11650: LD_INT 0
11652: GREATER
11653: IFFALSE 11727
// begin if damageUnit_list > 0 then
11655: LD_VAR 0 17
11659: PUSH
11660: LD_INT 0
11662: GREATER
11663: IFFALSE 11727
// begin for i in damageUnit_list do
11665: LD_ADDR_VAR 0 14
11669: PUSH
11670: LD_VAR 0 17
11674: PUSH
11675: FOR_IN
11676: IFFALSE 11725
// begin ComMoveToArea ( i , healArea ) ;
11678: LD_VAR 0 14
11682: PPUSH
11683: LD_VAR 0 10
11687: PPUSH
11688: CALL_OW 113
// for j in medic_list do
11692: LD_ADDR_VAR 0 15
11696: PUSH
11697: LD_VAR 0 18
11701: PUSH
11702: FOR_IN
11703: IFFALSE 11721
// AddComHeal ( j , i ) ;
11705: LD_VAR 0 15
11709: PPUSH
11710: LD_VAR 0 14
11714: PPUSH
11715: CALL_OW 188
11719: GO 11702
11721: POP
11722: POP
// end ;
11723: GO 11675
11725: POP
11726: POP
// end ; end ; for i in soldiersOK_list do
11727: LD_ADDR_VAR 0 14
11731: PUSH
11732: LD_VAR 0 19
11736: PUSH
11737: FOR_IN
11738: IFFALSE 11920
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11740: LD_ADDR_VAR 0 22
11744: PUSH
11745: LD_INT 22
11747: PUSH
11748: LD_VAR 0 11
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PPUSH
11757: CALL_OW 69
11761: PUSH
11762: LD_EXP 45
11766: DIFF
11767: PPUSH
11768: LD_VAR 0 14
11772: PPUSH
11773: CALL_OW 74
11777: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11778: LD_ADDR_VAR 0 23
11782: PUSH
11783: LD_INT 22
11785: PUSH
11786: LD_VAR 0 11
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 2
11797: PUSH
11798: LD_INT 59
11800: PUSH
11801: EMPTY
11802: LIST
11803: PUSH
11804: LD_INT 21
11806: PUSH
11807: LD_INT 1
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 21
11816: PUSH
11817: LD_INT 2
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: EMPTY
11835: LIST
11836: PPUSH
11837: CALL_OW 69
11841: PPUSH
11842: LD_VAR 0 14
11846: PPUSH
11847: CALL_OW 74
11851: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11852: LD_VAR 0 14
11856: PPUSH
11857: LD_VAR 0 22
11861: PPUSH
11862: CALL_OW 296
11866: PUSH
11867: LD_INT 8
11869: PLUS
11870: PUSH
11871: LD_VAR 0 14
11875: PPUSH
11876: LD_VAR 0 23
11880: PPUSH
11881: CALL_OW 296
11885: LESS
11886: IFFALSE 11904
// begin ComAttackUnit ( i , target1 ) ;
11888: LD_VAR 0 14
11892: PPUSH
11893: LD_VAR 0 22
11897: PPUSH
11898: CALL_OW 115
// end else
11902: GO 11918
// begin ComAttackUnit ( i , target2 ) ;
11904: LD_VAR 0 14
11908: PPUSH
11909: LD_VAR 0 23
11913: PPUSH
11914: CALL_OW 115
// end ; end ;
11918: GO 11737
11920: POP
11921: POP
// for i in soldiersOK_list do
11922: LD_ADDR_VAR 0 14
11926: PUSH
11927: LD_VAR 0 19
11931: PUSH
11932: FOR_IN
11933: IFFALSE 12115
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11935: LD_ADDR_VAR 0 22
11939: PUSH
11940: LD_INT 22
11942: PUSH
11943: LD_VAR 0 11
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PPUSH
11952: CALL_OW 69
11956: PUSH
11957: LD_EXP 45
11961: DIFF
11962: PPUSH
11963: LD_VAR 0 14
11967: PPUSH
11968: CALL_OW 74
11972: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11973: LD_ADDR_VAR 0 23
11977: PUSH
11978: LD_INT 22
11980: PUSH
11981: LD_VAR 0 11
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 2
11992: PUSH
11993: LD_INT 59
11995: PUSH
11996: EMPTY
11997: LIST
11998: PUSH
11999: LD_INT 21
12001: PUSH
12002: LD_INT 1
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 21
12011: PUSH
12012: LD_INT 2
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: PPUSH
12037: LD_VAR 0 14
12041: PPUSH
12042: CALL_OW 74
12046: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12047: LD_VAR 0 14
12051: PPUSH
12052: LD_VAR 0 22
12056: PPUSH
12057: CALL_OW 296
12061: PUSH
12062: LD_INT 8
12064: PLUS
12065: PUSH
12066: LD_VAR 0 14
12070: PPUSH
12071: LD_VAR 0 23
12075: PPUSH
12076: CALL_OW 296
12080: LESS
12081: IFFALSE 12099
// begin ComAttackUnit ( i , target1 ) ;
12083: LD_VAR 0 14
12087: PPUSH
12088: LD_VAR 0 22
12092: PPUSH
12093: CALL_OW 115
// end else
12097: GO 12113
// begin ComAttackUnit ( i , target2 ) ;
12099: LD_VAR 0 14
12103: PPUSH
12104: LD_VAR 0 23
12108: PPUSH
12109: CALL_OW 115
// end ; end ;
12113: GO 11932
12115: POP
12116: POP
// until soldiersOK_list = [ ] ;
12117: LD_VAR 0 19
12121: PUSH
12122: EMPTY
12123: EQUAL
12124: IFFALSE 11490
// end ; if strategy = 2 then
12126: LD_VAR 0 12
12130: PUSH
12131: LD_INT 2
12133: EQUAL
12134: IFFALSE 12839
// begin repeat wait ( 0 0$1 ) ;
12136: LD_INT 35
12138: PPUSH
12139: CALL_OW 67
// for i in soldiersOK_list do
12143: LD_ADDR_VAR 0 14
12147: PUSH
12148: LD_VAR 0 19
12152: PUSH
12153: FOR_IN
12154: IFFALSE 12188
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
12156: LD_VAR 0 14
12160: PPUSH
12161: LD_INT 117
12163: PPUSH
12164: LD_INT 97
12166: PPUSH
12167: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
12171: LD_VAR 0 14
12175: PPUSH
12176: LD_INT 94
12178: PPUSH
12179: LD_INT 50
12181: PPUSH
12182: CALL_OW 174
// end ;
12186: GO 12153
12188: POP
12189: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
12190: LD_INT 14
12192: PPUSH
12193: LD_INT 22
12195: PUSH
12196: LD_VAR 0 1
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PPUSH
12205: CALL_OW 70
12209: PUSH
12210: LD_INT 0
12212: GREATER
12213: IFFALSE 12136
// repeat wait ( 0 0$3 ) ;
12215: LD_INT 105
12217: PPUSH
12218: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12222: LD_ADDR_VAR 0 17
12226: PUSH
12227: LD_INT 22
12229: PUSH
12230: LD_VAR 0 1
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: LD_INT 1
12241: PUSH
12242: LD_INT 3
12244: PUSH
12245: LD_INT 24
12247: PUSH
12248: LD_INT 550
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 24
12261: PUSH
12262: LD_INT 250
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: LIST
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PPUSH
12278: CALL_OW 69
12282: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12283: LD_ADDR_VAR 0 19
12287: PUSH
12288: LD_INT 22
12290: PUSH
12291: LD_VAR 0 1
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 2
12302: PUSH
12303: LD_INT 25
12305: PUSH
12306: LD_INT 1
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 25
12315: PUSH
12316: LD_INT 5
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 25
12325: PUSH
12326: LD_INT 8
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 25
12335: PUSH
12336: LD_INT 9
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 24
12352: PUSH
12353: LD_INT 1000
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 69
12369: ST_TO_ADDR
// if medicCount > 0 then
12370: LD_VAR 0 7
12374: PUSH
12375: LD_INT 0
12377: GREATER
12378: IFFALSE 12452
// begin if damageUnit_list > 0 then
12380: LD_VAR 0 17
12384: PUSH
12385: LD_INT 0
12387: GREATER
12388: IFFALSE 12452
// begin for i in damageUnit_list do
12390: LD_ADDR_VAR 0 14
12394: PUSH
12395: LD_VAR 0 17
12399: PUSH
12400: FOR_IN
12401: IFFALSE 12450
// begin ComMoveToArea ( i , healArea ) ;
12403: LD_VAR 0 14
12407: PPUSH
12408: LD_VAR 0 10
12412: PPUSH
12413: CALL_OW 113
// for j in medic_list do
12417: LD_ADDR_VAR 0 15
12421: PUSH
12422: LD_VAR 0 18
12426: PUSH
12427: FOR_IN
12428: IFFALSE 12446
// AddComHeal ( j , i ) ;
12430: LD_VAR 0 15
12434: PPUSH
12435: LD_VAR 0 14
12439: PPUSH
12440: CALL_OW 188
12444: GO 12427
12446: POP
12447: POP
// end ;
12448: GO 12400
12450: POP
12451: POP
// end ; end ; for i in soldiersOK_list do
12452: LD_ADDR_VAR 0 14
12456: PUSH
12457: LD_VAR 0 19
12461: PUSH
12462: FOR_IN
12463: IFFALSE 12639
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12465: LD_ADDR_VAR 0 22
12469: PUSH
12470: LD_INT 22
12472: PUSH
12473: LD_VAR 0 11
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PPUSH
12482: CALL_OW 69
12486: PPUSH
12487: LD_VAR 0 14
12491: PPUSH
12492: CALL_OW 74
12496: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12497: LD_ADDR_VAR 0 23
12501: PUSH
12502: LD_INT 22
12504: PUSH
12505: LD_VAR 0 11
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 2
12516: PUSH
12517: LD_INT 59
12519: PUSH
12520: EMPTY
12521: LIST
12522: PUSH
12523: LD_INT 21
12525: PUSH
12526: LD_INT 1
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: PUSH
12533: LD_INT 21
12535: PUSH
12536: LD_INT 2
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: EMPTY
12554: LIST
12555: PPUSH
12556: CALL_OW 69
12560: PPUSH
12561: LD_VAR 0 14
12565: PPUSH
12566: CALL_OW 74
12570: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12571: LD_VAR 0 14
12575: PPUSH
12576: LD_VAR 0 22
12580: PPUSH
12581: CALL_OW 296
12585: PUSH
12586: LD_INT 8
12588: PLUS
12589: PUSH
12590: LD_VAR 0 14
12594: PPUSH
12595: LD_VAR 0 23
12599: PPUSH
12600: CALL_OW 296
12604: LESS
12605: IFFALSE 12623
// begin ComAttackUnit ( i , target1 ) ;
12607: LD_VAR 0 14
12611: PPUSH
12612: LD_VAR 0 22
12616: PPUSH
12617: CALL_OW 115
// end else
12621: GO 12637
// begin ComAttackUnit ( i , target2 ) ;
12623: LD_VAR 0 14
12627: PPUSH
12628: LD_VAR 0 23
12632: PPUSH
12633: CALL_OW 115
// end ; end ;
12637: GO 12462
12639: POP
12640: POP
// for i in soldiersOK_list do
12641: LD_ADDR_VAR 0 14
12645: PUSH
12646: LD_VAR 0 19
12650: PUSH
12651: FOR_IN
12652: IFFALSE 12828
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12654: LD_ADDR_VAR 0 22
12658: PUSH
12659: LD_INT 22
12661: PUSH
12662: LD_VAR 0 11
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PPUSH
12671: CALL_OW 69
12675: PPUSH
12676: LD_VAR 0 14
12680: PPUSH
12681: CALL_OW 74
12685: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12686: LD_ADDR_VAR 0 23
12690: PUSH
12691: LD_INT 22
12693: PUSH
12694: LD_VAR 0 11
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: LD_INT 2
12705: PUSH
12706: LD_INT 59
12708: PUSH
12709: EMPTY
12710: LIST
12711: PUSH
12712: LD_INT 21
12714: PUSH
12715: LD_INT 1
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: LD_INT 21
12724: PUSH
12725: LD_INT 2
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: EMPTY
12743: LIST
12744: PPUSH
12745: CALL_OW 69
12749: PPUSH
12750: LD_VAR 0 14
12754: PPUSH
12755: CALL_OW 74
12759: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12760: LD_VAR 0 14
12764: PPUSH
12765: LD_VAR 0 22
12769: PPUSH
12770: CALL_OW 296
12774: PUSH
12775: LD_INT 8
12777: PLUS
12778: PUSH
12779: LD_VAR 0 14
12783: PPUSH
12784: LD_VAR 0 23
12788: PPUSH
12789: CALL_OW 296
12793: LESS
12794: IFFALSE 12812
// begin ComAttackUnit ( i , target1 ) ;
12796: LD_VAR 0 14
12800: PPUSH
12801: LD_VAR 0 22
12805: PPUSH
12806: CALL_OW 115
// end else
12810: GO 12826
// begin ComAttackUnit ( i , target2 ) ;
12812: LD_VAR 0 14
12816: PPUSH
12817: LD_VAR 0 23
12821: PPUSH
12822: CALL_OW 115
// end ; end ;
12826: GO 12651
12828: POP
12829: POP
// until soldiersOK_list = [ ] ;
12830: LD_VAR 0 19
12834: PUSH
12835: EMPTY
12836: EQUAL
12837: IFFALSE 12215
// end ; end ; end_of_file
12839: LD_VAR 0 13
12843: RET
// every 0 0$01 do
12844: GO 12846
12846: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12847: LD_INT 22
12849: PUSH
12850: LD_INT 1
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: LD_INT 25
12859: PUSH
12860: LD_INT 2
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PPUSH
12871: CALL_OW 69
12875: PUSH
12876: LD_INT 0
12878: EQUAL
12879: IFFALSE 12893
// SetClass ( JMM , 2 ) ;
12881: LD_EXP 1
12885: PPUSH
12886: LD_INT 2
12888: PPUSH
12889: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12893: LD_STRING M1
12895: PPUSH
12896: CALL_OW 337
// case difficulty of 1 :
12900: LD_OWVAR 67
12904: PUSH
12905: LD_INT 1
12907: DOUBLE
12908: EQUAL
12909: IFTRUE 12913
12911: GO 12923
12913: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12914: LD_STRING M1-1
12916: PPUSH
12917: CALL_OW 337
12921: GO 12960
12923: LD_INT 2
12925: DOUBLE
12926: EQUAL
12927: IFTRUE 12931
12929: GO 12941
12931: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12932: LD_STRING M1-2
12934: PPUSH
12935: CALL_OW 337
12939: GO 12960
12941: LD_INT 3
12943: DOUBLE
12944: EQUAL
12945: IFTRUE 12949
12947: GO 12959
12949: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12950: LD_STRING M1-3
12952: PPUSH
12953: CALL_OW 337
12957: GO 12960
12959: POP
// ChangeMissionObjectives ( M1cont ) ;
12960: LD_STRING M1cont
12962: PPUSH
12963: CALL_OW 337
// wait ( 0 0$2 ) ;
12967: LD_INT 70
12969: PPUSH
12970: CALL_OW 67
// SaveForQuickRestart ;
12974: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12978: LD_INT 525
12980: PPUSH
12981: LD_INT 700
12983: PPUSH
12984: CALL_OW 12
12988: PPUSH
12989: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12993: LD_INT 5
12995: PPUSH
12996: LD_INT 82
12998: PPUSH
12999: LD_INT 38
13001: PPUSH
13002: LD_INT 10
13004: PPUSH
13005: LD_INT 1
13007: PPUSH
13008: CALL_OW 56
// wait ( 0 0$14 ) ;
13012: LD_INT 490
13014: PPUSH
13015: CALL_OW 67
// firstCrateSpawn := true ;
13019: LD_ADDR_EXP 41
13023: PUSH
13024: LD_INT 1
13026: ST_TO_ADDR
// end ;
13027: END
// every 0 0$02 trigger firstCrateSpawn do
13028: LD_EXP 41
13032: IFFALSE 13395
13034: GO 13036
13036: DISABLE
// begin if IsOk ( Lisa ) then
13037: LD_EXP 2
13041: PPUSH
13042: CALL_OW 302
13046: IFFALSE 13062
// Say ( Lisa , DR0-Lisa-1 ) else
13048: LD_EXP 2
13052: PPUSH
13053: LD_STRING DR0-Lisa-1
13055: PPUSH
13056: CALL_OW 88
13060: GO 13208
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
13062: LD_INT 22
13064: PUSH
13065: LD_INT 1
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 21
13074: PUSH
13075: LD_INT 1
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: LD_INT 26
13084: PUSH
13085: LD_INT 1
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: LD_INT 2
13094: PUSH
13095: LD_INT 25
13097: PUSH
13098: LD_INT 1
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 25
13107: PUSH
13108: LD_INT 2
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 25
13117: PUSH
13118: LD_INT 3
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 25
13127: PUSH
13128: LD_INT 4
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: PPUSH
13148: CALL_OW 69
13152: PUSH
13153: LD_EXP 1
13157: PUSH
13158: LD_EXP 8
13162: PUSH
13163: LD_EXP 5
13167: PUSH
13168: LD_EXP 6
13172: PUSH
13173: LD_EXP 7
13177: PUSH
13178: LD_EXP 4
13182: PUSH
13183: LD_EXP 3
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: DIFF
13197: PPUSH
13198: LD_STRING DR0-Sol1-1
13200: PPUSH
13201: LD_STRING DR0-Sol1-1
13203: PPUSH
13204: CALL 6237 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
13208: LD_INT 22
13210: PUSH
13211: LD_INT 1
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: LD_INT 21
13220: PUSH
13221: LD_INT 1
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: LD_INT 26
13230: PUSH
13231: LD_INT 1
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 2
13240: PUSH
13241: LD_INT 25
13243: PUSH
13244: LD_INT 1
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 2
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 25
13263: PUSH
13264: LD_INT 3
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: LD_INT 25
13273: PUSH
13274: LD_INT 4
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: PPUSH
13294: CALL_OW 69
13298: PUSH
13299: LD_EXP 1
13303: PUSH
13304: LD_EXP 8
13308: PUSH
13309: LD_EXP 5
13313: PUSH
13314: LD_EXP 2
13318: PUSH
13319: LD_EXP 6
13323: PUSH
13324: LD_EXP 7
13328: PUSH
13329: LD_EXP 4
13333: PUSH
13334: LD_EXP 3
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: DIFF
13349: PPUSH
13350: LD_STRING DR0-Sol2-1
13352: PPUSH
13353: LD_STRING DR0-Sol2-1
13355: PPUSH
13356: CALL 6237 0 3
// if IsOk ( Cyrus ) then
13360: LD_EXP 4
13364: PPUSH
13365: CALL_OW 302
13369: IFFALSE 13383
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13371: LD_EXP 4
13375: PPUSH
13376: LD_STRING DR0-Cyrus-1
13378: PPUSH
13379: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13383: LD_EXP 1
13387: PPUSH
13388: LD_STRING DR0-JMM-1
13390: PPUSH
13391: CALL_OW 88
// end ;
13395: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13396: LD_EXP 5
13400: PPUSH
13401: CALL_OW 302
13405: PUSH
13406: LD_INT 22
13408: PUSH
13409: LD_INT 1
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 25
13418: PUSH
13419: LD_INT 16
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PPUSH
13430: CALL_OW 69
13434: PUSH
13435: LD_INT 0
13437: GREATER
13438: AND
13439: PUSH
13440: LD_INT 1
13442: PPUSH
13443: CALL_OW 463
13447: NOT
13448: AND
13449: IFFALSE 13727
13451: GO 13453
13453: DISABLE
// begin DialogueOn ;
13454: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13458: LD_EXP 5
13462: PPUSH
13463: LD_STRING D10-Frank-1
13465: PPUSH
13466: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13470: LD_INT 22
13472: PUSH
13473: LD_INT 1
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 21
13482: PUSH
13483: LD_INT 1
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 2
13492: PUSH
13493: LD_INT 25
13495: PUSH
13496: LD_INT 1
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 25
13505: PUSH
13506: LD_INT 2
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: LD_INT 25
13515: PUSH
13516: LD_INT 3
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: PUSH
13523: LD_INT 25
13525: PUSH
13526: LD_INT 4
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: LIST
13544: PPUSH
13545: CALL_OW 69
13549: PUSH
13550: LD_EXP 1
13554: PUSH
13555: LD_EXP 5
13559: PUSH
13560: LD_EXP 2
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: DIFF
13570: PPUSH
13571: LD_STRING D10-Sol1-1
13573: PPUSH
13574: LD_STRING D10-FSol1-1
13576: PPUSH
13577: CALL 6237 0 3
// Say ( Frank , D10-Frank-2 ) ;
13581: LD_EXP 5
13585: PPUSH
13586: LD_STRING D10-Frank-2
13588: PPUSH
13589: CALL_OW 88
// if IsOK ( Lisa ) then
13593: LD_EXP 2
13597: PPUSH
13598: CALL_OW 302
13602: IFFALSE 13618
// begin Say ( Lisa , D10-Lisa-2 ) ;
13604: LD_EXP 2
13608: PPUSH
13609: LD_STRING D10-Lisa-2
13611: PPUSH
13612: CALL_OW 88
// end else
13616: GO 13723
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13618: LD_INT 22
13620: PUSH
13621: LD_INT 1
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 21
13630: PUSH
13631: LD_INT 1
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PUSH
13638: LD_INT 2
13640: PUSH
13641: LD_INT 25
13643: PUSH
13644: LD_INT 1
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: PUSH
13651: LD_INT 25
13653: PUSH
13654: LD_INT 2
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 25
13663: PUSH
13664: LD_INT 3
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 25
13673: PUSH
13674: LD_INT 4
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: LIST
13692: PPUSH
13693: CALL_OW 69
13697: PUSH
13698: LD_EXP 1
13702: PUSH
13703: LD_EXP 5
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: DIFF
13712: PPUSH
13713: LD_STRING D10-Sol1-2
13715: PPUSH
13716: LD_STRING D10-FSol1-2
13718: PPUSH
13719: CALL 6237 0 3
// end ; DialogueOff ;
13723: CALL_OW 7
// end ;
13727: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13728: LD_INT 1
13730: PPUSH
13731: CALL_OW 463
13735: NOT
13736: IFFALSE 14031
13738: GO 13740
13740: DISABLE
// begin HarrisonSupport ;
13741: CALL 2546 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13745: LD_EXP 17
13749: PPUSH
13750: CALL_OW 310
13754: PPUSH
13755: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13759: LD_EXP 17
13763: PPUSH
13764: LD_STRING DEng-Eng1-1
13766: PPUSH
13767: CALL_OW 88
// wait ( 1 1$0 ) ;
13771: LD_INT 2100
13773: PPUSH
13774: CALL_OW 67
// DialogueOn ;
13778: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13782: LD_EXP 14
13786: PPUSH
13787: LD_STRING DRem-Har-1
13789: PPUSH
13790: CALL_OW 94
// if contactWithRussian = 1 then
13794: LD_EXP 22
13798: PUSH
13799: LD_INT 1
13801: EQUAL
13802: IFFALSE 13818
// begin Say ( JMM , DRem-JMM-1 ) ;
13804: LD_EXP 1
13808: PPUSH
13809: LD_STRING DRem-JMM-1
13811: PPUSH
13812: CALL_OW 88
// end else
13816: GO 13830
// begin Say ( JMM , DRem-JMM-1a ) ;
13818: LD_EXP 1
13822: PPUSH
13823: LD_STRING DRem-JMM-1a
13825: PPUSH
13826: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13830: LD_EXP 14
13834: PPUSH
13835: LD_STRING DRem-Har-2
13837: PPUSH
13838: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13842: LD_STRING DenisInDelta
13844: PPUSH
13845: LD_INT 0
13847: PPUSH
13848: CALL_OW 30
13852: PUSH
13853: LD_INT 1
13855: EQUAL
13856: IFFALSE 13872
// begin Say ( JMM , DRem-JMM-2 ) ;
13858: LD_EXP 1
13862: PPUSH
13863: LD_STRING DRem-JMM-2
13865: PPUSH
13866: CALL_OW 88
// end else
13870: GO 13884
// begin Say ( JMM , DRem-JMM-2a ) ;
13872: LD_EXP 1
13876: PPUSH
13877: LD_STRING DRem-JMM-2a
13879: PPUSH
13880: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13884: LD_EXP 14
13888: PPUSH
13889: LD_STRING DRem-Har-3
13891: PPUSH
13892: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13896: LD_EXP 1
13900: PPUSH
13901: LD_STRING DRem-JMM-3
13903: PPUSH
13904: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13908: LD_EXP 14
13912: PPUSH
13913: LD_STRING DRem-Har-4
13915: PPUSH
13916: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13920: LD_STRING DenisInDelta
13922: PPUSH
13923: LD_INT 0
13925: PPUSH
13926: CALL_OW 30
13930: PUSH
13931: LD_INT 1
13933: EQUAL
13934: IFFALSE 13994
// begin Say ( JMM , DRem-JMM-4 ) ;
13936: LD_EXP 1
13940: PPUSH
13941: LD_STRING DRem-JMM-4
13943: PPUSH
13944: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13948: LD_EXP 14
13952: PPUSH
13953: LD_STRING DRem-Har-5
13955: PPUSH
13956: CALL_OW 94
// DialogueOff ;
13960: CALL_OW 7
// wait ( 4 4$00 ) ;
13964: LD_INT 8400
13966: PPUSH
13967: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13971: LD_INT 35
13973: PPUSH
13974: CALL_OW 67
// until not InBattle ( 1 ) ;
13978: LD_INT 1
13980: PPUSH
13981: CALL_OW 463
13985: NOT
13986: IFFALSE 13971
// SpawnDenis ;
13988: CALL 14032 0 0
// end else
13992: GO 14031
// begin DialogueOff ;
13994: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13998: LD_INT 36
14000: PPUSH
14001: LD_INT 1
14003: PPUSH
14004: LD_INT 1
14006: PPUSH
14007: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14011: LD_INT 15
14013: PPUSH
14014: LD_INT 1
14016: PPUSH
14017: LD_INT 1
14019: PPUSH
14020: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14024: LD_STRING MR
14026: PPUSH
14027: CALL_OW 337
// end ; end ;
14031: END
// export function SpawnDenis ; var tmp ; begin
14032: LD_INT 0
14034: PPUSH
14035: PPUSH
// PrepareDenis ;
14036: CALL 2263 0 0
// CenterNowOnUnits ( Denis ) ;
14040: LD_EXP 9
14044: PPUSH
14045: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
14049: LD_ADDR_VAR 0 2
14053: PUSH
14054: LD_INT 22
14056: PUSH
14057: LD_INT 1
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PPUSH
14064: CALL_OW 69
14068: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
14069: LD_EXP 9
14073: PPUSH
14074: LD_VAR 0 2
14078: PPUSH
14079: LD_EXP 9
14083: PPUSH
14084: CALL_OW 74
14088: PPUSH
14089: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14093: LD_INT 35
14095: PPUSH
14096: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
14100: LD_INT 22
14102: PUSH
14103: LD_INT 1
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 91
14112: PUSH
14113: LD_EXP 9
14117: PUSH
14118: LD_INT 10
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PPUSH
14130: CALL_OW 69
14134: IFFALSE 14093
// SetSide ( Denis , 1 ) ;
14136: LD_EXP 9
14140: PPUSH
14141: LD_INT 1
14143: PPUSH
14144: CALL_OW 235
// DialogueOn ;
14148: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
14152: LD_EXP 9
14156: PPUSH
14157: LD_STRING DDen-Den-1
14159: PPUSH
14160: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
14164: LD_EXP 1
14168: PPUSH
14169: LD_STRING DDen-JMM-1
14171: PPUSH
14172: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
14176: LD_EXP 9
14180: PPUSH
14181: LD_STRING DDen-Den-2
14183: PPUSH
14184: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
14188: LD_EXP 1
14192: PPUSH
14193: LD_STRING DDen-JMM-2
14195: PPUSH
14196: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
14200: LD_EXP 9
14204: PPUSH
14205: LD_STRING DDen-Den-3
14207: PPUSH
14208: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
14212: LD_EXP 1
14216: PPUSH
14217: LD_STRING DDen-JMM-3
14219: PPUSH
14220: CALL_OW 88
// DialogueOff ;
14224: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14228: LD_INT 36
14230: PPUSH
14231: LD_INT 1
14233: PPUSH
14234: LD_INT 1
14236: PPUSH
14237: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14241: LD_INT 15
14243: PPUSH
14244: LD_INT 1
14246: PPUSH
14247: LD_INT 1
14249: PPUSH
14250: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14254: LD_STRING MR
14256: PPUSH
14257: CALL_OW 337
// end ;
14261: LD_VAR 0 1
14265: RET
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14266: CALL 14321 0 0
14270: PUSH
14271: LD_EXP 9
14275: PPUSH
14276: CALL_OW 302
14280: AND
14281: PUSH
14282: LD_INT 1
14284: PPUSH
14285: CALL_OW 463
14289: NOT
14290: AND
14291: IFFALSE 14320
14293: GO 14295
14295: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14296: LD_EXP 9
14300: PPUSH
14301: LD_STRING DR1-Den-1
14303: PPUSH
14304: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14308: LD_EXP 1
14312: PPUSH
14313: LD_STRING DR1-JMM-1
14315: PPUSH
14316: CALL_OW 88
// end ;
14320: END
// function CheckOptoLab ; var i ; begin
14321: LD_INT 0
14323: PPUSH
14324: PPUSH
// result = false ;
14325: LD_ADDR_VAR 0 1
14329: PUSH
14330: LD_INT 0
14332: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14333: LD_ADDR_VAR 0 2
14337: PUSH
14338: LD_INT 22
14340: PUSH
14341: LD_INT 1
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 2
14350: PUSH
14351: LD_INT 30
14353: PUSH
14354: LD_INT 7
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 30
14363: PUSH
14364: LD_INT 8
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: LIST
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PPUSH
14380: CALL_OW 69
14384: PUSH
14385: FOR_IN
14386: IFFALSE 14438
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14388: LD_VAR 0 2
14392: PPUSH
14393: LD_INT 1
14395: PPUSH
14396: CALL_OW 268
14400: PUSH
14401: LD_INT 15
14403: EQUAL
14404: PUSH
14405: LD_VAR 0 2
14409: PPUSH
14410: LD_INT 2
14412: PPUSH
14413: CALL_OW 268
14417: PUSH
14418: LD_INT 15
14420: EQUAL
14421: OR
14422: IFFALSE 14434
// begin result = true ;
14424: LD_ADDR_VAR 0 1
14428: PUSH
14429: LD_INT 1
14431: ST_TO_ADDR
// break ;
14432: GO 14438
// end ; break ;
14434: GO 14438
// end ;
14436: GO 14385
14438: POP
14439: POP
// end ;
14440: LD_VAR 0 1
14444: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14445: LD_INT 15
14447: PPUSH
14448: LD_INT 1
14450: PPUSH
14451: CALL_OW 321
14455: PUSH
14456: LD_INT 2
14458: EQUAL
14459: PUSH
14460: LD_EXP 9
14464: PPUSH
14465: CALL_OW 302
14469: AND
14470: PUSH
14471: LD_INT 1
14473: PPUSH
14474: CALL_OW 463
14478: NOT
14479: AND
14480: IFFALSE 14712
14482: GO 14484
14484: DISABLE
// begin DialogueOn ;
14485: CALL_OW 6
// if IsOK ( Denis ) then
14489: LD_EXP 9
14493: PPUSH
14494: CALL_OW 302
14498: IFFALSE 14514
// begin Say ( Denis , DR2-Den-1 ) ;
14500: LD_EXP 9
14504: PPUSH
14505: LD_STRING DR2-Den-1
14507: PPUSH
14508: CALL_OW 88
// end else
14512: GO 14573
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14514: LD_INT 22
14516: PUSH
14517: LD_INT 1
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 21
14526: PUSH
14527: LD_INT 1
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 25
14536: PUSH
14537: LD_INT 4
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: LIST
14548: PPUSH
14549: CALL_OW 69
14553: PUSH
14554: LD_EXP 1
14558: PUSH
14559: EMPTY
14560: LIST
14561: DIFF
14562: PPUSH
14563: LD_STRING DR2-Sci1-1
14565: PPUSH
14566: LD_STRING DR2-FSci1-1
14568: PPUSH
14569: CALL 6237 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14573: LD_EXP 1
14577: PPUSH
14578: LD_STRING DR2-JMM-1
14580: PPUSH
14581: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14585: LD_INT 22
14587: PUSH
14588: LD_INT 1
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: LD_INT 21
14597: PUSH
14598: LD_INT 1
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 2
14607: PUSH
14608: LD_INT 25
14610: PUSH
14611: LD_INT 1
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: LD_INT 25
14620: PUSH
14621: LD_INT 2
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: LD_INT 25
14630: PUSH
14631: LD_INT 3
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: LD_INT 25
14640: PUSH
14641: LD_INT 4
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: LIST
14659: PPUSH
14660: CALL_OW 69
14664: PUSH
14665: LD_EXP 1
14669: PUSH
14670: LD_EXP 9
14674: PUSH
14675: LD_EXP 8
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: LIST
14684: DIFF
14685: PPUSH
14686: LD_STRING DR2-Sol1-1
14688: PPUSH
14689: LD_STRING DR2-Sol1-11
14691: PPUSH
14692: CALL 6237 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14696: LD_EXP 1
14700: PPUSH
14701: LD_STRING DR2-JMM-2
14703: PPUSH
14704: CALL_OW 88
// DialogueOff ;
14708: CALL_OW 7
// end ;
14712: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14713: LD_INT 22
14715: PUSH
14716: LD_INT 1
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 30
14725: PUSH
14726: LD_INT 36
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PPUSH
14737: CALL_OW 69
14741: PUSH
14742: LD_INT 0
14744: EQUAL
14745: PUSH
14746: LD_INT 22
14748: PUSH
14749: LD_INT 1
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 21
14758: PUSH
14759: LD_INT 2
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 33
14768: PUSH
14769: LD_INT 2
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: PPUSH
14781: CALL_OW 69
14785: PUSH
14786: LD_INT 0
14788: GREATER
14789: AND
14790: PUSH
14791: LD_EXP 23
14795: PUSH
14796: LD_INT 0
14798: EQUAL
14799: AND
14800: PUSH
14801: LD_INT 1
14803: PPUSH
14804: CALL_OW 463
14808: NOT
14809: AND
14810: IFFALSE 14947
14812: GO 14814
14814: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14815: LD_INT 22
14817: PUSH
14818: LD_INT 1
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: LD_INT 21
14827: PUSH
14828: LD_INT 1
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: LD_INT 25
14837: PUSH
14838: LD_INT 3
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 26
14847: PUSH
14848: LD_INT 1
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: PPUSH
14861: CALL_OW 69
14865: PUSH
14866: LD_EXP 1
14870: PUSH
14871: LD_EXP 6
14875: PUSH
14876: LD_EXP 7
14880: PUSH
14881: LD_EXP 9
14885: PUSH
14886: LD_EXP 15
14890: PUSH
14891: LD_EXP 3
14895: PUSH
14896: LD_EXP 4
14900: PUSH
14901: LD_EXP 2
14905: PUSH
14906: LD_EXP 5
14910: PUSH
14911: LD_EXP 8
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: DIFF
14928: PPUSH
14929: LD_STRING D3a-Mech1-1
14931: PPUSH
14932: LD_STRING D3a-Mech1-1
14934: PPUSH
14935: CALL 6237 0 3
// firstTower = 2 ;
14939: LD_ADDR_EXP 23
14943: PUSH
14944: LD_INT 2
14946: ST_TO_ADDR
// end ;
14947: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14948: LD_INT 22
14950: PUSH
14951: LD_INT 3
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 21
14960: PUSH
14961: LD_INT 3
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PPUSH
14972: CALL_OW 69
14976: PUSH
14977: LD_INT 0
14979: EQUAL
14980: IFFALSE 15095
14982: GO 14984
14984: DISABLE
14985: LD_INT 0
14987: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14988: LD_ADDR_VAR 0 1
14992: PUSH
14993: LD_INT 22
14995: PUSH
14996: LD_INT 1
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: LD_INT 21
15005: PUSH
15006: LD_INT 1
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 2
15015: PUSH
15016: LD_INT 25
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 25
15028: PUSH
15029: LD_INT 2
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 25
15038: PUSH
15039: LD_INT 3
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: LD_INT 25
15048: PUSH
15049: LD_INT 4
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: LIST
15067: PPUSH
15068: CALL_OW 69
15072: PUSH
15073: FOR_IN
15074: IFFALSE 15093
// AddExperience ( i , 1 , 10000 ) ;
15076: LD_VAR 0 1
15080: PPUSH
15081: LD_INT 1
15083: PPUSH
15084: LD_INT 10000
15086: PPUSH
15087: CALL_OW 492
15091: GO 15073
15093: POP
15094: POP
// end ;
15095: PPOPN 1
15097: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
15098: LD_INT 22
15100: PUSH
15101: LD_INT 1
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 30
15110: PUSH
15111: LD_INT 36
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PPUSH
15122: CALL_OW 69
15126: PUSH
15127: LD_INT 0
15129: GREATER
15130: PUSH
15131: LD_INT 22
15133: PUSH
15134: LD_INT 1
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 21
15143: PUSH
15144: LD_INT 2
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 33
15153: PUSH
15154: LD_INT 2
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: LIST
15165: PPUSH
15166: CALL_OW 69
15170: PUSH
15171: LD_INT 0
15173: GREATER
15174: AND
15175: PUSH
15176: CALL 15768 0 0
15180: AND
15181: PUSH
15182: LD_INT 1
15184: PPUSH
15185: CALL_OW 463
15189: NOT
15190: AND
15191: IFFALSE 15765
15193: GO 15195
15195: DISABLE
15196: LD_INT 0
15198: PPUSH
15199: PPUSH
15200: PPUSH
15201: PPUSH
15202: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
15203: LD_ADDR_VAR 0 3
15207: PUSH
15208: LD_INT 22
15210: PUSH
15211: LD_INT 1
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 30
15220: PUSH
15221: LD_INT 36
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PPUSH
15232: CALL_OW 69
15236: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
15237: LD_ADDR_VAR 0 4
15241: PUSH
15242: LD_INT 22
15244: PUSH
15245: LD_INT 1
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PUSH
15252: LD_INT 21
15254: PUSH
15255: LD_INT 2
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: LD_INT 33
15264: PUSH
15265: LD_INT 2
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: LIST
15276: PPUSH
15277: CALL_OW 69
15281: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15282: LD_ADDR_VAR 0 5
15286: PUSH
15287: EMPTY
15288: ST_TO_ADDR
// for i in tmpControlTowers do
15289: LD_ADDR_VAR 0 1
15293: PUSH
15294: LD_VAR 0 3
15298: PUSH
15299: FOR_IN
15300: IFFALSE 15763
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15302: LD_EXP 1
15306: PPUSH
15307: CALL_OW 310
15311: PUSH
15312: LD_VAR 0 1
15316: EQUAL
15317: PUSH
15318: LD_EXP 1
15322: PPUSH
15323: CALL_OW 257
15327: PUSH
15328: LD_INT 3
15330: EQUAL
15331: AND
15332: IFFALSE 15462
// begin InGameOn ;
15334: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15338: LD_VAR 0 4
15342: PUSH
15343: LD_INT 1
15345: ARRAY
15346: PPUSH
15347: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15351: LD_EXP 1
15355: PPUSH
15356: LD_STRING D4a-JMM-1
15358: PPUSH
15359: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15363: LD_VAR 0 4
15367: PUSH
15368: LD_INT 1
15370: ARRAY
15371: PPUSH
15372: LD_EXP 1
15376: PPUSH
15377: CALL_OW 53
// wait ( 0 0$1 ) ;
15381: LD_INT 35
15383: PPUSH
15384: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15388: LD_VAR 0 4
15392: PUSH
15393: LD_INT 1
15395: ARRAY
15396: PPUSH
15397: LD_VAR 0 4
15401: PUSH
15402: LD_INT 1
15404: ARRAY
15405: PPUSH
15406: CALL_OW 250
15410: PUSH
15411: LD_INT 3
15413: PLUS
15414: PPUSH
15415: LD_VAR 0 4
15419: PUSH
15420: LD_INT 1
15422: ARRAY
15423: PPUSH
15424: CALL_OW 251
15428: PUSH
15429: LD_INT 2
15431: MINUS
15432: PPUSH
15433: CALL_OW 111
// wait ( 0 0$2 ) ;
15437: LD_INT 70
15439: PPUSH
15440: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15444: LD_EXP 1
15448: PPUSH
15449: LD_STRING D4b-JMM-1
15451: PPUSH
15452: CALL_OW 88
// InGameOff ;
15456: CALL_OW 9
// end else
15460: GO 15761
// begin InGameOn ;
15462: CALL_OW 8
// for j in UnitsInside ( i ) do
15466: LD_ADDR_VAR 0 2
15470: PUSH
15471: LD_VAR 0 1
15475: PPUSH
15476: CALL_OW 313
15480: PUSH
15481: FOR_IN
15482: IFFALSE 15517
// if GetClass ( j ) = 3 then
15484: LD_VAR 0 2
15488: PPUSH
15489: CALL_OW 257
15493: PUSH
15494: LD_INT 3
15496: EQUAL
15497: IFFALSE 15515
// tmpMechanicInside = tmpMechanicInside ^ j ;
15499: LD_ADDR_VAR 0 5
15503: PUSH
15504: LD_VAR 0 5
15508: PUSH
15509: LD_VAR 0 2
15513: ADD
15514: ST_TO_ADDR
15515: GO 15481
15517: POP
15518: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15519: LD_VAR 0 5
15523: PUSH
15524: LD_INT 1
15526: ARRAY
15527: PPUSH
15528: CALL_OW 258
15532: PUSH
15533: LD_INT 1
15535: EQUAL
15536: IFFALSE 15554
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15538: LD_VAR 0 5
15542: PUSH
15543: LD_INT 1
15545: ARRAY
15546: PPUSH
15547: LD_STRING D4a-Mech1-1
15549: PPUSH
15550: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15554: LD_VAR 0 5
15558: PUSH
15559: LD_INT 1
15561: ARRAY
15562: PPUSH
15563: CALL_OW 258
15567: PUSH
15568: LD_INT 2
15570: EQUAL
15571: IFFALSE 15589
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15573: LD_VAR 0 5
15577: PUSH
15578: LD_INT 1
15580: ARRAY
15581: PPUSH
15582: LD_STRING D4a-FMech1-1
15584: PPUSH
15585: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15589: LD_VAR 0 4
15593: PUSH
15594: LD_INT 1
15596: ARRAY
15597: PPUSH
15598: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15602: LD_VAR 0 4
15606: PUSH
15607: LD_INT 1
15609: ARRAY
15610: PPUSH
15611: LD_VAR 0 5
15615: PUSH
15616: LD_INT 1
15618: ARRAY
15619: PPUSH
15620: CALL_OW 53
// wait ( 0 0$1 ) ;
15624: LD_INT 35
15626: PPUSH
15627: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15631: LD_VAR 0 4
15635: PUSH
15636: LD_INT 1
15638: ARRAY
15639: PPUSH
15640: LD_VAR 0 4
15644: PUSH
15645: LD_INT 1
15647: ARRAY
15648: PPUSH
15649: CALL_OW 250
15653: PUSH
15654: LD_INT 3
15656: PLUS
15657: PPUSH
15658: LD_VAR 0 4
15662: PUSH
15663: LD_INT 1
15665: ARRAY
15666: PPUSH
15667: CALL_OW 251
15671: PUSH
15672: LD_INT 2
15674: MINUS
15675: PPUSH
15676: CALL_OW 111
// wait ( 0 0$2 ) ;
15680: LD_INT 70
15682: PPUSH
15683: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15687: LD_VAR 0 5
15691: PUSH
15692: LD_INT 1
15694: ARRAY
15695: PPUSH
15696: CALL_OW 258
15700: PUSH
15701: LD_INT 1
15703: EQUAL
15704: IFFALSE 15722
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15706: LD_VAR 0 5
15710: PUSH
15711: LD_INT 1
15713: ARRAY
15714: PPUSH
15715: LD_STRING D4b-Mech1-1
15717: PPUSH
15718: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15722: LD_VAR 0 5
15726: PUSH
15727: LD_INT 1
15729: ARRAY
15730: PPUSH
15731: CALL_OW 258
15735: PUSH
15736: LD_INT 2
15738: EQUAL
15739: IFFALSE 15757
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15741: LD_VAR 0 5
15745: PUSH
15746: LD_INT 1
15748: ARRAY
15749: PPUSH
15750: LD_STRING D4b-FMech1-1
15752: PPUSH
15753: CALL_OW 88
// InGameOff ;
15757: CALL_OW 9
// end ; end ;
15761: GO 15299
15763: POP
15764: POP
// end ;
15765: PPOPN 5
15767: END
// function CheckMehInside ; var i , j ; begin
15768: LD_INT 0
15770: PPUSH
15771: PPUSH
15772: PPUSH
// result = false ;
15773: LD_ADDR_VAR 0 1
15777: PUSH
15778: LD_INT 0
15780: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15781: LD_ADDR_VAR 0 2
15785: PUSH
15786: LD_INT 22
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 30
15798: PUSH
15799: LD_INT 36
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PPUSH
15810: CALL_OW 69
15814: PUSH
15815: FOR_IN
15816: IFFALSE 15867
// begin for j in UnitsInside ( i ) do
15818: LD_ADDR_VAR 0 3
15822: PUSH
15823: LD_VAR 0 2
15827: PPUSH
15828: CALL_OW 313
15832: PUSH
15833: FOR_IN
15834: IFFALSE 15863
// begin if GetClass ( j ) = 3 then
15836: LD_VAR 0 3
15840: PPUSH
15841: CALL_OW 257
15845: PUSH
15846: LD_INT 3
15848: EQUAL
15849: IFFALSE 15861
// begin result = true ;
15851: LD_ADDR_VAR 0 1
15855: PUSH
15856: LD_INT 1
15858: ST_TO_ADDR
// break ;
15859: GO 15863
// end ; end ;
15861: GO 15833
15863: POP
15864: POP
// end ;
15865: GO 15815
15867: POP
15868: POP
// end ;
15869: LD_VAR 0 1
15873: RET
// every 12 12$0 do
15874: GO 15876
15876: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15877: LD_INT 35
15879: PPUSH
15880: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
15884: LD_INT 1
15886: PPUSH
15887: CALL_OW 463
15891: NOT
15892: PUSH
15893: LD_INT 32
15895: PPUSH
15896: LD_INT 81
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PPUSH
15906: CALL_OW 70
15910: NOT
15911: AND
15912: IFFALSE 15877
// PrepareKurt ;
15914: CALL 19515 0 0
// end ;
15918: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
15919: LD_EXP 15
15923: PPUSH
15924: CALL_OW 302
15928: PUSH
15929: LD_EXP 15
15933: PPUSH
15934: CALL_OW 255
15938: PUSH
15939: LD_INT 1
15941: EQUAL
15942: AND
15943: PUSH
15944: LD_EXP 2
15948: AND
15949: IFFALSE 16114
15951: GO 15953
15953: DISABLE
// begin wait ( 0 0$50 ) ;
15954: LD_INT 1750
15956: PPUSH
15957: CALL_OW 67
// if not IsOk ( Joan ) then
15961: LD_EXP 15
15965: PPUSH
15966: CALL_OW 302
15970: NOT
15971: IFFALSE 15975
// exit ;
15973: GO 16114
// if IsOK ( Lisa ) then
15975: LD_EXP 2
15979: PPUSH
15980: CALL_OW 302
15984: IFFALSE 16114
// begin DialogueOn ;
15986: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15990: LD_EXP 2
15994: PPUSH
15995: LD_STRING D7-Lisa-1
15997: PPUSH
15998: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
16002: LD_EXP 1
16006: PPUSH
16007: LD_STRING D7-JMM-1
16009: PPUSH
16010: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
16014: LD_EXP 2
16018: PPUSH
16019: LD_STRING D7-Lisa-2
16021: PPUSH
16022: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
16026: LD_EXP 1
16030: PPUSH
16031: LD_STRING D7-JMM-2
16033: PPUSH
16034: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
16038: LD_EXP 2
16042: PPUSH
16043: LD_STRING D7-Lisa-3
16045: PPUSH
16046: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
16050: LD_EXP 1
16054: PPUSH
16055: LD_STRING D7-JMM-3
16057: PPUSH
16058: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
16062: LD_EXP 2
16066: PPUSH
16067: LD_STRING D7-Lisa-4
16069: PPUSH
16070: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
16074: LD_EXP 1
16078: PPUSH
16079: LD_STRING D7-JMM-4
16081: PPUSH
16082: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
16086: LD_EXP 1
16090: PPUSH
16091: LD_STRING D7-JMM-4a
16093: PPUSH
16094: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
16098: LD_EXP 2
16102: PPUSH
16103: LD_STRING D7-Lisa-5
16105: PPUSH
16106: CALL_OW 88
// DialogueOff ;
16110: CALL_OW 7
// end ; end ;
16114: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
16115: LD_EXP 13
16119: PUSH
16120: LD_INT 22
16122: PUSH
16123: LD_INT 1
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 91
16132: PUSH
16133: LD_EXP 13
16137: PUSH
16138: LD_INT 10
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: PUSH
16146: LD_INT 2
16148: PUSH
16149: LD_INT 25
16151: PUSH
16152: LD_INT 1
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 25
16161: PUSH
16162: LD_INT 2
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 25
16171: PUSH
16172: LD_INT 3
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 25
16181: PUSH
16182: LD_INT 4
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: LIST
16200: PPUSH
16201: CALL_OW 69
16205: PUSH
16206: LD_INT 1
16208: GREATER
16209: AND
16210: IFFALSE 16227
16212: GO 16214
16214: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
16215: LD_EXP 13
16219: PPUSH
16220: LD_STRING D5-Sol1-1
16222: PPUSH
16223: CALL_OW 88
// end ;
16227: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
16228: LD_INT 22
16230: PUSH
16231: LD_INT 1
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: LD_INT 33
16240: PUSH
16241: LD_INT 2
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PPUSH
16252: CALL_OW 69
16256: PUSH
16257: LD_INT 2
16259: GREATEREQUAL
16260: IFFALSE 16280
16262: GO 16264
16264: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
16265: LD_STRING MRa
16267: PPUSH
16268: CALL_OW 337
// remoteVehiclesBuild = 1 ;
16272: LD_ADDR_EXP 28
16276: PUSH
16277: LD_INT 1
16279: ST_TO_ADDR
// end ;
16280: END
// every 2 2$00 do var i , last ;
16281: GO 16283
16283: DISABLE
16284: LD_INT 0
16286: PPUSH
16287: PPUSH
// begin last := 8 ;
16288: LD_ADDR_VAR 0 2
16292: PUSH
16293: LD_INT 8
16295: ST_TO_ADDR
// for i = 1 to last do
16296: LD_ADDR_VAR 0 1
16300: PUSH
16301: DOUBLE
16302: LD_INT 1
16304: DEC
16305: ST_TO_ADDR
16306: LD_VAR 0 2
16310: PUSH
16311: FOR_TO
16312: IFFALSE 16340
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
16314: LD_INT 6300
16316: PPUSH
16317: LD_INT 12600
16319: PPUSH
16320: CALL_OW 12
16324: PPUSH
16325: CALL_OW 67
// PrepareRandoms ( i ) ;
16329: LD_VAR 0 1
16333: PPUSH
16334: CALL 4165 0 1
// end ;
16338: GO 16311
16340: POP
16341: POP
// end ;
16342: PPOPN 2
16344: END
// every 5 5$20 do
16345: GO 16347
16347: DISABLE
// begin DialogueOn ;
16348: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16352: LD_EXP 10
16356: PPUSH
16357: LD_STRING D12a-Sci-1
16359: PPUSH
16360: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16364: LD_EXP 1
16368: PPUSH
16369: LD_STRING D12a-JMM-1
16371: PPUSH
16372: CALL_OW 88
// DialogueOff ;
16376: CALL_OW 7
// cratesStatus = 1 ;
16380: LD_ADDR_EXP 38
16384: PUSH
16385: LD_INT 1
16387: ST_TO_ADDR
// end ;
16388: END
// every 13 13$0 do
16389: GO 16391
16391: DISABLE
// begin DialogueOn ;
16392: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16396: LD_EXP 10
16400: PPUSH
16401: LD_STRING D12b-Sci-1
16403: PPUSH
16404: CALL_OW 94
// DialogueOff ;
16408: CALL_OW 7
// cratesStatus = 2 ;
16412: LD_ADDR_EXP 38
16416: PUSH
16417: LD_INT 2
16419: ST_TO_ADDR
// end ;
16420: END
// every 32 32$0 do
16421: GO 16423
16423: DISABLE
// begin DialogueOn ;
16424: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16428: LD_EXP 10
16432: PPUSH
16433: LD_STRING D12c-Sci-1
16435: PPUSH
16436: CALL_OW 94
// DialogueOff ;
16440: CALL_OW 7
// wait ( 3 3$0 ) ;
16444: LD_INT 6300
16446: PPUSH
16447: CALL_OW 67
// DialogueOn ;
16451: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16455: LD_EXP 10
16459: PPUSH
16460: LD_STRING D12d-Sci-1
16462: PPUSH
16463: CALL_OW 94
// DialogueOff ;
16467: CALL_OW 7
// cratesStatus = 1 ;
16471: LD_ADDR_EXP 38
16475: PUSH
16476: LD_INT 1
16478: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16479: LD_INT 1400
16481: PPUSH
16482: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16486: LD_INT 35
16488: PPUSH
16489: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
16493: LD_INT 1
16495: PPUSH
16496: CALL_OW 463
16500: NOT
16501: PUSH
16502: LD_INT 32
16504: PPUSH
16505: LD_INT 81
16507: PUSH
16508: LD_INT 1
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PPUSH
16515: CALL_OW 70
16519: NOT
16520: AND
16521: IFFALSE 16486
// PrepareJoan ;
16523: CALL 3064 0 0
// end ;
16527: END
// every 42 42$0 do
16528: GO 16530
16530: DISABLE
// begin DialogueOn ;
16531: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16535: LD_EXP 10
16539: PPUSH
16540: LD_STRING D12e-Sci-1
16542: PPUSH
16543: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16547: LD_EXP 1
16551: PPUSH
16552: LD_STRING D12e-JMM-1
16554: PPUSH
16555: CALL_OW 88
// DialogueOff ;
16559: CALL_OW 7
// cratesStatus = 2 ;
16563: LD_ADDR_EXP 38
16567: PUSH
16568: LD_INT 2
16570: ST_TO_ADDR
// end ;
16571: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16572: LD_INT 22
16574: PUSH
16575: LD_INT 6
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 21
16584: PUSH
16585: LD_INT 2
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 34
16594: PUSH
16595: LD_INT 51
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: LIST
16606: PPUSH
16607: CALL_OW 69
16611: PUSH
16612: LD_INT 0
16614: GREATER
16615: IFFALSE 16698
16617: GO 16619
16619: DISABLE
16620: LD_INT 0
16622: PPUSH
// begin enable ;
16623: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16624: LD_ADDR_VAR 0 1
16628: PUSH
16629: LD_INT 22
16631: PUSH
16632: LD_INT 6
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 2
16641: PUSH
16642: LD_INT 21
16644: PUSH
16645: LD_INT 1
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 21
16654: PUSH
16655: LD_INT 2
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: LIST
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PPUSH
16671: CALL_OW 69
16675: PUSH
16676: FOR_IN
16677: IFFALSE 16696
// ComAgressiveMove ( i , 138 , 168 ) ;
16679: LD_VAR 0 1
16683: PPUSH
16684: LD_INT 138
16686: PPUSH
16687: LD_INT 168
16689: PPUSH
16690: CALL_OW 114
16694: GO 16676
16696: POP
16697: POP
// end ;
16698: PPOPN 1
16700: END
// every 0 0$1 do var i ;
16701: GO 16703
16703: DISABLE
16704: LD_INT 0
16706: PPUSH
// begin enable ;
16707: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16708: LD_ADDR_VAR 0 1
16712: PUSH
16713: LD_INT 4
16715: PPUSH
16716: LD_INT 2
16718: PUSH
16719: LD_INT 22
16721: PUSH
16722: LD_INT 3
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 22
16731: PUSH
16732: LD_INT 6
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: LIST
16743: PUSH
16744: EMPTY
16745: LIST
16746: PPUSH
16747: CALL_OW 70
16751: PUSH
16752: FOR_IN
16753: IFFALSE 16817
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16755: LD_INT 4
16757: PPUSH
16758: LD_INT 22
16760: PUSH
16761: LD_INT 6
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 34
16770: PUSH
16771: LD_INT 51
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PPUSH
16782: CALL_OW 70
16786: PUSH
16787: LD_INT 0
16789: GREATER
16790: IFFALSE 16806
// sendedConvoys = sendedConvoys + 1 ;
16792: LD_ADDR_EXP 39
16796: PUSH
16797: LD_EXP 39
16801: PUSH
16802: LD_INT 1
16804: PLUS
16805: ST_TO_ADDR
// RemoveUnit ( i ) ;
16806: LD_VAR 0 1
16810: PPUSH
16811: CALL_OW 64
// end ;
16815: GO 16752
16817: POP
16818: POP
// end ; end_of_file
16819: PPOPN 1
16821: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16822: LD_VAR 0 1
16826: PUSH
16827: LD_INT 1
16829: EQUAL
16830: PUSH
16831: LD_VAR 0 2
16835: PUSH
16836: LD_INT 3
16838: EQUAL
16839: AND
16840: IFFALSE 16850
// contactWithRussian = 1 ;
16842: LD_ADDR_EXP 22
16846: PUSH
16847: LD_INT 1
16849: ST_TO_ADDR
// end ;
16850: PPOPN 2
16852: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16853: LD_VAR 0 1
16857: PPUSH
16858: CALL_OW 266
16862: PUSH
16863: LD_INT 36
16865: EQUAL
16866: PUSH
16867: LD_VAR 0 1
16871: PPUSH
16872: CALL_OW 255
16876: PUSH
16877: LD_INT 1
16879: EQUAL
16880: AND
16881: PUSH
16882: LD_INT 22
16884: PUSH
16885: LD_INT 1
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 21
16894: PUSH
16895: LD_INT 2
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 33
16904: PUSH
16905: LD_INT 2
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: LIST
16916: PPUSH
16917: CALL_OW 69
16921: PUSH
16922: LD_INT 0
16924: EQUAL
16925: AND
16926: PUSH
16927: LD_EXP 23
16931: PUSH
16932: LD_INT 0
16934: EQUAL
16935: AND
16936: IFFALSE 17016
// begin firstTower = 1 ;
16938: LD_ADDR_EXP 23
16942: PUSH
16943: LD_INT 1
16945: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16946: LD_INT 22
16948: PUSH
16949: LD_INT 1
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 21
16958: PUSH
16959: LD_INT 1
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 25
16968: PUSH
16969: LD_INT 3
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 26
16978: PUSH
16979: LD_INT 1
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: PPUSH
16992: CALL_OW 69
16996: PUSH
16997: LD_EXP 1
17001: PUSH
17002: EMPTY
17003: LIST
17004: DIFF
17005: PPUSH
17006: LD_STRING D3b-Mech1-1
17008: PPUSH
17009: LD_STRING D3b-Mech1-1
17011: PPUSH
17012: CALL 6237 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
17016: LD_VAR 0 1
17020: PPUSH
17021: CALL_OW 266
17025: PUSH
17026: LD_INT 0
17028: EQUAL
17029: PUSH
17030: LD_VAR 0 1
17034: PPUSH
17035: CALL_OW 255
17039: PUSH
17040: LD_INT 1
17042: EQUAL
17043: AND
17044: IFFALSE 17058
// SetBName ( building , theta ) ;
17046: LD_VAR 0 1
17050: PPUSH
17051: LD_STRING theta
17053: PPUSH
17054: CALL_OW 500
// if GetSide ( building ) = 3 then
17058: LD_VAR 0 1
17062: PPUSH
17063: CALL_OW 255
17067: PUSH
17068: LD_INT 3
17070: EQUAL
17071: IFFALSE 17145
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17073: LD_ADDR_EXP 31
17077: PUSH
17078: LD_EXP 31
17082: PPUSH
17083: LD_INT 1
17085: PPUSH
17086: CALL_OW 3
17090: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17091: LD_ADDR_EXP 31
17095: PUSH
17096: LD_EXP 31
17100: PPUSH
17101: LD_INT 1
17103: PPUSH
17104: CALL_OW 3
17108: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17109: LD_ADDR_EXP 31
17113: PUSH
17114: LD_EXP 31
17118: PPUSH
17119: LD_INT 1
17121: PPUSH
17122: CALL_OW 3
17126: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17127: LD_ADDR_EXP 31
17131: PUSH
17132: LD_EXP 31
17136: PPUSH
17137: LD_INT 1
17139: PPUSH
17140: CALL_OW 3
17144: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
17145: LD_VAR 0 1
17149: PPUSH
17150: CALL_OW 255
17154: PUSH
17155: LD_INT 3
17157: EQUAL
17158: PUSH
17159: LD_VAR 0 1
17163: PPUSH
17164: CALL_OW 266
17168: PUSH
17169: LD_INT 0
17171: EQUAL
17172: PUSH
17173: LD_VAR 0 1
17177: PPUSH
17178: CALL_OW 266
17182: PUSH
17183: LD_INT 2
17185: EQUAL
17186: OR
17187: PUSH
17188: LD_VAR 0 1
17192: PPUSH
17193: CALL_OW 266
17197: PUSH
17198: LD_INT 4
17200: EQUAL
17201: OR
17202: PUSH
17203: EMPTY
17204: LIST
17205: AND
17206: IFFALSE 17217
// ComUpgrade ( building ) ;
17208: LD_VAR 0 1
17212: PPUSH
17213: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
17217: LD_VAR 0 1
17221: PPUSH
17222: CALL_OW 255
17226: PUSH
17227: LD_INT 3
17229: EQUAL
17230: PUSH
17231: LD_VAR 0 1
17235: PPUSH
17236: CALL_OW 266
17240: PUSH
17241: LD_INT 32
17243: EQUAL
17244: AND
17245: IFFALSE 17286
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
17247: LD_VAR 0 1
17251: PPUSH
17252: LD_INT 42
17254: PUSH
17255: LD_INT 43
17257: PUSH
17258: LD_INT 44
17260: PUSH
17261: LD_INT 46
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 1
17272: PPUSH
17273: LD_INT 4
17275: PPUSH
17276: CALL_OW 12
17280: ARRAY
17281: PPUSH
17282: CALL_OW 208
// end ; end ;
17286: PPOPN 1
17288: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
17289: LD_VAR 0 1
17293: PUSH
17294: LD_INT 22
17296: PUSH
17297: LD_INT 1
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 21
17306: PUSH
17307: LD_INT 1
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 23
17316: PUSH
17317: LD_INT 1
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: LIST
17328: PPUSH
17329: CALL_OW 69
17333: IN
17334: IFFALSE 17350
// killCounter := killCounter + 1 ;
17336: LD_ADDR_EXP 47
17340: PUSH
17341: LD_EXP 47
17345: PUSH
17346: LD_INT 1
17348: PLUS
17349: ST_TO_ADDR
// if unit = JMM then
17350: LD_VAR 0 1
17354: PUSH
17355: LD_EXP 1
17359: EQUAL
17360: IFFALSE 17369
// YouLost ( JMM ) ;
17362: LD_STRING JMM
17364: PPUSH
17365: CALL_OW 104
// if unit = Joan then
17369: LD_VAR 0 1
17373: PUSH
17374: LD_EXP 15
17378: EQUAL
17379: IFFALSE 17389
// JoanStatus = 0 ;
17381: LD_ADDR_EXP 16
17385: PUSH
17386: LD_INT 0
17388: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17389: LD_VAR 0 1
17393: PPUSH
17394: CALL_OW 255
17398: PUSH
17399: LD_INT 1
17401: EQUAL
17402: PUSH
17403: LD_VAR 0 1
17407: PPUSH
17408: CALL_OW 247
17412: PUSH
17413: LD_INT 1
17415: EQUAL
17416: AND
17417: IFFALSE 17493
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17419: LD_VAR 0 1
17423: PPUSH
17424: CALL_OW 257
17428: PUSH
17429: LD_INT 1
17431: EQUAL
17432: PUSH
17433: LD_VAR 0 1
17437: PPUSH
17438: CALL_OW 257
17442: PUSH
17443: LD_INT 2
17445: EQUAL
17446: OR
17447: PUSH
17448: LD_VAR 0 1
17452: PPUSH
17453: CALL_OW 257
17457: PUSH
17458: LD_INT 3
17460: EQUAL
17461: OR
17462: PUSH
17463: LD_VAR 0 1
17467: PPUSH
17468: CALL_OW 257
17472: PUSH
17473: LD_INT 4
17475: EQUAL
17476: OR
17477: IFFALSE 17493
// unitLost = unitLost + 1 ;
17479: LD_ADDR_EXP 30
17483: PUSH
17484: LD_EXP 30
17488: PUSH
17489: LD_INT 1
17491: PLUS
17492: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17493: LD_VAR 0 1
17497: PPUSH
17498: CALL_OW 255
17502: PUSH
17503: LD_INT 3
17505: EQUAL
17506: PUSH
17507: LD_VAR 0 1
17511: PPUSH
17512: CALL_OW 247
17516: PUSH
17517: LD_INT 3
17519: EQUAL
17520: AND
17521: IFFALSE 18213
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17523: LD_VAR 0 1
17527: PPUSH
17528: CALL_OW 266
17532: PUSH
17533: LD_INT 31
17535: EQUAL
17536: PUSH
17537: LD_VAR 0 1
17541: PPUSH
17542: CALL_OW 266
17546: PUSH
17547: LD_INT 32
17549: EQUAL
17550: OR
17551: PUSH
17552: LD_VAR 0 1
17556: PPUSH
17557: CALL_OW 266
17561: PUSH
17562: LD_INT 36
17564: EQUAL
17565: OR
17566: PUSH
17567: LD_VAR 0 1
17571: PPUSH
17572: CALL_OW 266
17576: PUSH
17577: LD_INT 0
17579: EQUAL
17580: OR
17581: PUSH
17582: LD_VAR 0 1
17586: PPUSH
17587: CALL_OW 266
17591: PUSH
17592: LD_INT 24
17594: EQUAL
17595: OR
17596: PUSH
17597: LD_VAR 0 1
17601: PPUSH
17602: CALL_OW 266
17606: PUSH
17607: LD_INT 17
17609: EQUAL
17610: OR
17611: PUSH
17612: LD_VAR 0 1
17616: PPUSH
17617: CALL_OW 266
17621: PUSH
17622: LD_INT 25
17624: EQUAL
17625: OR
17626: PUSH
17627: LD_VAR 0 1
17631: PPUSH
17632: CALL_OW 266
17636: PUSH
17637: LD_INT 19
17639: EQUAL
17640: OR
17641: PUSH
17642: LD_VAR 0 1
17646: PPUSH
17647: CALL_OW 266
17651: PUSH
17652: LD_INT 20
17654: EQUAL
17655: OR
17656: PUSH
17657: LD_VAR 0 1
17661: PPUSH
17662: CALL_OW 266
17666: PUSH
17667: LD_INT 18
17669: EQUAL
17670: OR
17671: PUSH
17672: LD_VAR 0 1
17676: PPUSH
17677: CALL_OW 266
17681: PUSH
17682: LD_INT 21
17684: EQUAL
17685: OR
17686: PUSH
17687: LD_VAR 0 1
17691: PPUSH
17692: CALL_OW 266
17696: PUSH
17697: LD_INT 23
17699: EQUAL
17700: OR
17701: PUSH
17702: LD_VAR 0 1
17706: PPUSH
17707: CALL_OW 266
17711: PUSH
17712: LD_INT 16
17714: EQUAL
17715: OR
17716: PUSH
17717: LD_VAR 0 1
17721: PPUSH
17722: CALL_OW 266
17726: PUSH
17727: LD_INT 6
17729: EQUAL
17730: OR
17731: PUSH
17732: LD_VAR 0 1
17736: PPUSH
17737: CALL_OW 266
17741: PUSH
17742: LD_INT 29
17744: EQUAL
17745: OR
17746: PUSH
17747: LD_VAR 0 1
17751: PPUSH
17752: CALL_OW 266
17756: PUSH
17757: LD_INT 26
17759: EQUAL
17760: OR
17761: PUSH
17762: LD_VAR 0 1
17766: PPUSH
17767: CALL_OW 266
17771: PUSH
17772: LD_INT 30
17774: EQUAL
17775: OR
17776: PUSH
17777: LD_VAR 0 1
17781: PPUSH
17782: CALL_OW 266
17786: PUSH
17787: LD_INT 28
17789: EQUAL
17790: OR
17791: PUSH
17792: LD_VAR 0 1
17796: PPUSH
17797: CALL_OW 266
17801: PUSH
17802: LD_INT 27
17804: EQUAL
17805: OR
17806: PUSH
17807: LD_VAR 0 1
17811: PPUSH
17812: CALL_OW 266
17816: PUSH
17817: LD_INT 33
17819: EQUAL
17820: OR
17821: PUSH
17822: LD_VAR 0 1
17826: PPUSH
17827: CALL_OW 266
17831: PUSH
17832: LD_INT 2
17834: EQUAL
17835: OR
17836: PUSH
17837: LD_VAR 0 1
17841: PPUSH
17842: CALL_OW 266
17846: PUSH
17847: LD_INT 4
17849: EQUAL
17850: OR
17851: IFFALSE 17937
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17853: LD_ADDR_EXP 31
17857: PUSH
17858: LD_EXP 31
17862: PUSH
17863: LD_VAR 0 1
17867: PPUSH
17868: CALL_OW 266
17872: ADD
17873: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17874: LD_ADDR_EXP 31
17878: PUSH
17879: LD_EXP 31
17883: PUSH
17884: LD_VAR 0 1
17888: PPUSH
17889: CALL_OW 250
17893: ADD
17894: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17895: LD_ADDR_EXP 31
17899: PUSH
17900: LD_EXP 31
17904: PUSH
17905: LD_VAR 0 1
17909: PPUSH
17910: CALL_OW 251
17914: ADD
17915: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17916: LD_ADDR_EXP 31
17920: PUSH
17921: LD_EXP 31
17925: PUSH
17926: LD_VAR 0 1
17930: PPUSH
17931: CALL_OW 254
17935: ADD
17936: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17937: LD_VAR 0 1
17941: PPUSH
17942: CALL_OW 266
17946: PUSH
17947: LD_INT 1
17949: EQUAL
17950: IFFALSE 18029
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17952: LD_ADDR_EXP 31
17956: PUSH
17957: LD_EXP 31
17961: PUSH
17962: LD_INT 0
17964: ADD
17965: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17966: LD_ADDR_EXP 31
17970: PUSH
17971: LD_EXP 31
17975: PUSH
17976: LD_VAR 0 1
17980: PPUSH
17981: CALL_OW 250
17985: ADD
17986: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17987: LD_ADDR_EXP 31
17991: PUSH
17992: LD_EXP 31
17996: PUSH
17997: LD_VAR 0 1
18001: PPUSH
18002: CALL_OW 251
18006: ADD
18007: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18008: LD_ADDR_EXP 31
18012: PUSH
18013: LD_EXP 31
18017: PUSH
18018: LD_VAR 0 1
18022: PPUSH
18023: CALL_OW 254
18027: ADD
18028: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18029: LD_VAR 0 1
18033: PPUSH
18034: CALL_OW 266
18038: PUSH
18039: LD_INT 3
18041: EQUAL
18042: IFFALSE 18121
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
18044: LD_ADDR_EXP 31
18048: PUSH
18049: LD_EXP 31
18053: PUSH
18054: LD_INT 2
18056: ADD
18057: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18058: LD_ADDR_EXP 31
18062: PUSH
18063: LD_EXP 31
18067: PUSH
18068: LD_VAR 0 1
18072: PPUSH
18073: CALL_OW 250
18077: ADD
18078: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18079: LD_ADDR_EXP 31
18083: PUSH
18084: LD_EXP 31
18088: PUSH
18089: LD_VAR 0 1
18093: PPUSH
18094: CALL_OW 251
18098: ADD
18099: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18100: LD_ADDR_EXP 31
18104: PUSH
18105: LD_EXP 31
18109: PUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: CALL_OW 254
18119: ADD
18120: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18121: LD_VAR 0 1
18125: PPUSH
18126: CALL_OW 266
18130: PUSH
18131: LD_INT 5
18133: EQUAL
18134: IFFALSE 18213
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
18136: LD_ADDR_EXP 31
18140: PUSH
18141: LD_EXP 31
18145: PUSH
18146: LD_INT 4
18148: ADD
18149: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18150: LD_ADDR_EXP 31
18154: PUSH
18155: LD_EXP 31
18159: PUSH
18160: LD_VAR 0 1
18164: PPUSH
18165: CALL_OW 250
18169: ADD
18170: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18171: LD_ADDR_EXP 31
18175: PUSH
18176: LD_EXP 31
18180: PUSH
18181: LD_VAR 0 1
18185: PPUSH
18186: CALL_OW 251
18190: ADD
18191: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18192: LD_ADDR_EXP 31
18196: PUSH
18197: LD_EXP 31
18201: PUSH
18202: LD_VAR 0 1
18206: PPUSH
18207: CALL_OW 254
18211: ADD
18212: ST_TO_ADDR
// end ; end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18213: LD_EXP 48
18217: PUSH
18218: LD_VAR 0 1
18222: PPUSH
18223: CALL_OW 257
18227: PUSH
18228: LD_INT 3
18230: EQUAL
18231: AND
18232: PUSH
18233: LD_VAR 0 1
18237: PPUSH
18238: CALL_OW 255
18242: PUSH
18243: LD_INT 3
18245: EQUAL
18246: AND
18247: PUSH
18248: LD_INT 21
18250: PPUSH
18251: CALL_OW 302
18255: AND
18256: PUSH
18257: LD_INT 21
18259: PPUSH
18260: CALL_OW 255
18264: PUSH
18265: LD_INT 3
18267: EQUAL
18268: AND
18269: IFFALSE 18351
// begin ruMechCounter := ruMechCounter - 1 ;
18271: LD_ADDR_EXP 48
18275: PUSH
18276: LD_EXP 48
18280: PUSH
18281: LD_INT 1
18283: MINUS
18284: ST_TO_ADDR
// uc_side = 3 ;
18285: LD_ADDR_OWVAR 20
18289: PUSH
18290: LD_INT 3
18292: ST_TO_ADDR
// uc_nation = 3 ;
18293: LD_ADDR_OWVAR 21
18297: PUSH
18298: LD_INT 3
18300: ST_TO_ADDR
// hc_gallery :=  ;
18301: LD_ADDR_OWVAR 33
18305: PUSH
18306: LD_STRING 
18308: ST_TO_ADDR
// hc_name :=  ;
18309: LD_ADDR_OWVAR 26
18313: PUSH
18314: LD_STRING 
18316: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18317: LD_INT 0
18319: PPUSH
18320: LD_EXP 34
18324: PPUSH
18325: LD_EXP 35
18329: PPUSH
18330: CALL_OW 12
18334: PPUSH
18335: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
18339: CALL_OW 44
18343: PPUSH
18344: LD_INT 21
18346: PPUSH
18347: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18351: LD_VAR 0 1
18355: PPUSH
18356: CALL_OW 255
18360: PUSH
18361: LD_INT 3
18363: EQUAL
18364: PUSH
18365: LD_VAR 0 1
18369: PPUSH
18370: CALL_OW 264
18374: PUSH
18375: LD_INT 52
18377: EQUAL
18378: AND
18379: PUSH
18380: LD_INT 21
18382: PPUSH
18383: CALL_OW 302
18387: AND
18388: PUSH
18389: LD_INT 21
18391: PPUSH
18392: CALL_OW 255
18396: PUSH
18397: LD_INT 3
18399: EQUAL
18400: AND
18401: IFFALSE 18422
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18403: LD_INT 21
18405: PPUSH
18406: LD_INT 22
18408: PPUSH
18409: LD_INT 1
18411: PPUSH
18412: LD_INT 1
18414: PPUSH
18415: LD_INT 52
18417: PPUSH
18418: CALL_OW 125
// end ;
18422: PPOPN 1
18424: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18425: LD_INT 0
18427: PPUSH
18428: PPUSH
18429: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18430: LD_VAR 0 1
18434: PPUSH
18435: CALL_OW 264
18439: PUSH
18440: LD_INT 51
18442: EQUAL
18443: PUSH
18444: LD_VAR 0 1
18448: PPUSH
18449: CALL_OW 255
18453: PUSH
18454: LD_INT 3
18456: EQUAL
18457: AND
18458: IFFALSE 18520
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18460: LD_ADDR_VAR 0 5
18464: PUSH
18465: LD_INT 2
18467: PPUSH
18468: CALL_OW 274
18472: PPUSH
18473: LD_INT 1
18475: PPUSH
18476: CALL_OW 275
18480: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18481: LD_INT 2
18483: PPUSH
18484: CALL_OW 274
18488: PPUSH
18489: LD_INT 1
18491: PPUSH
18492: LD_VAR 0 5
18496: PUSH
18497: LD_INT 100
18499: MINUS
18500: PPUSH
18501: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18505: LD_VAR 0 1
18509: PPUSH
18510: LD_INT 1
18512: PPUSH
18513: LD_INT 100
18515: PPUSH
18516: CALL_OW 291
// end ; if building = rufabsupp then
18520: LD_VAR 0 2
18524: PUSH
18525: LD_INT 17
18527: EQUAL
18528: IFFALSE 18542
// SetSide ( vehicle , 6 ) ;
18530: LD_VAR 0 1
18534: PPUSH
18535: LD_INT 6
18537: PPUSH
18538: CALL_OW 235
// end ;
18542: PPOPN 5
18544: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18545: LD_VAR 0 1
18549: PPUSH
18550: CALL_OW 255
18554: PUSH
18555: LD_INT 3
18557: EQUAL
18558: IFFALSE 18589
// begin tamedApemans = tamedApemans + 1 ;
18560: LD_ADDR_EXP 32
18564: PUSH
18565: LD_EXP 32
18569: PUSH
18570: LD_INT 1
18572: PLUS
18573: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18574: LD_VAR 0 1
18578: PPUSH
18579: LD_INT 106
18581: PPUSH
18582: LD_INT 85
18584: PPUSH
18585: CALL_OW 111
// end ; end ;
18589: PPOPN 2
18591: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18592: LD_INT 0
18594: PPUSH
18595: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18596: LD_VAR 0 1
18600: PPUSH
18601: CALL_OW 255
18605: PUSH
18606: LD_INT 3
18608: EQUAL
18609: PUSH
18610: LD_VAR 0 1
18614: PPUSH
18615: CALL_OW 247
18619: PUSH
18620: LD_INT 2
18622: EQUAL
18623: AND
18624: IFFALSE 18733
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18626: LD_VAR 0 1
18630: PPUSH
18631: CALL_OW 264
18635: PUSH
18636: LD_INT 42
18638: EQUAL
18639: PUSH
18640: LD_VAR 0 1
18644: PPUSH
18645: CALL_OW 264
18649: PUSH
18650: LD_INT 43
18652: EQUAL
18653: OR
18654: PUSH
18655: LD_VAR 0 1
18659: PPUSH
18660: CALL_OW 264
18664: PUSH
18665: LD_INT 44
18667: EQUAL
18668: OR
18669: PUSH
18670: LD_VAR 0 1
18674: PPUSH
18675: CALL_OW 264
18679: PUSH
18680: LD_INT 46
18682: EQUAL
18683: OR
18684: IFFALSE 18733
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18686: LD_INT 21
18688: PPUSH
18689: LD_VAR 0 1
18693: PPUSH
18694: CALL_OW 265
18698: PPUSH
18699: LD_VAR 0 1
18703: PPUSH
18704: CALL_OW 262
18708: PPUSH
18709: LD_VAR 0 1
18713: PPUSH
18714: CALL_OW 263
18718: PPUSH
18719: LD_VAR 0 1
18723: PPUSH
18724: CALL_OW 264
18728: PPUSH
18729: CALL_OW 185
// end ;
18733: PPOPN 3
18735: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18736: LD_VAR 0 1
18740: PPUSH
18741: CALL_OW 255
18745: PUSH
18746: LD_INT 3
18748: EQUAL
18749: PUSH
18750: LD_VAR 0 2
18754: PPUSH
18755: CALL_OW 255
18759: PUSH
18760: LD_INT 3
18762: EQUAL
18763: AND
18764: PUSH
18765: LD_VAR 0 1
18769: PPUSH
18770: CALL_OW 302
18774: AND
18775: IFFALSE 18817
// begin ComRepairVehicle ( human , vehicle ) ;
18777: LD_VAR 0 2
18781: PPUSH
18782: LD_VAR 0 1
18786: PPUSH
18787: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18791: LD_VAR 0 2
18795: PPUSH
18796: LD_VAR 0 1
18800: PPUSH
18801: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18805: LD_VAR 0 1
18809: PPUSH
18810: LD_INT 100
18812: PPUSH
18813: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18817: LD_VAR 0 1
18821: PPUSH
18822: CALL_OW 255
18826: PUSH
18827: LD_INT 3
18829: EQUAL
18830: PUSH
18831: LD_VAR 0 2
18835: PPUSH
18836: CALL_OW 255
18840: PUSH
18841: LD_INT 3
18843: EQUAL
18844: AND
18845: PUSH
18846: LD_INT 21
18848: PPUSH
18849: CALL_OW 302
18853: AND
18854: PUSH
18855: LD_VAR 0 1
18859: PPUSH
18860: CALL_OW 302
18864: NOT
18865: AND
18866: IFFALSE 18880
// ComEnterUnit ( human , rufab ) ;
18868: LD_VAR 0 2
18872: PPUSH
18873: LD_INT 21
18875: PPUSH
18876: CALL_OW 120
// end ;
18880: PPOPN 2
18882: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18883: LD_VAR 0 1
18887: PUSH
18888: LD_INT 21
18890: EQUAL
18891: PUSH
18892: LD_VAR 0 2
18896: PPUSH
18897: CALL_OW 255
18901: PUSH
18902: LD_INT 3
18904: EQUAL
18905: AND
18906: IFFALSE 18920
// SetLives ( human , 1000 ) ;
18908: LD_VAR 0 2
18912: PPUSH
18913: LD_INT 1000
18915: PPUSH
18916: CALL_OW 234
// end ;
18920: PPOPN 2
18922: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18923: LD_VAR 0 1
18927: PPUSH
18928: CALL 37375 0 1
// end ; end_of_file
18932: PPOPN 1
18934: END
// every 0 0$30 trigger cratesStatus = 1 do
18935: LD_EXP 38
18939: PUSH
18940: LD_INT 1
18942: EQUAL
18943: IFFALSE 18996
18945: GO 18947
18947: DISABLE
// begin enable ;
18948: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
18949: LD_INT 350
18951: PUSH
18952: LD_INT 875
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 1
18961: PPUSH
18962: LD_INT 2
18964: PPUSH
18965: CALL_OW 12
18969: ARRAY
18970: PPUSH
18971: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
18975: LD_INT 1
18977: PPUSH
18978: LD_INT 5
18980: PPUSH
18981: CALL_OW 12
18985: PPUSH
18986: LD_INT 7
18988: PPUSH
18989: LD_INT 1
18991: PPUSH
18992: CALL_OW 55
// end ;
18996: END
// every 1 1$0 trigger cratesStatus = 2 do
18997: LD_EXP 38
19001: PUSH
19002: LD_INT 2
19004: EQUAL
19005: IFFALSE 19088
19007: GO 19009
19009: DISABLE
// begin enable ;
19010: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
19011: LD_INT 3150
19013: PUSH
19014: LD_INT 4550
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 1
19023: PPUSH
19024: LD_INT 2
19026: PPUSH
19027: CALL_OW 12
19031: ARRAY
19032: PPUSH
19033: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
19037: LD_INT 2
19039: PUSH
19040: LD_INT 5
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 1
19049: PPUSH
19050: LD_INT 2
19052: PPUSH
19053: CALL_OW 12
19057: ARRAY
19058: PPUSH
19059: LD_INT 6
19061: PUSH
19062: LD_INT 7
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 1
19071: PPUSH
19072: LD_INT 2
19074: PPUSH
19075: CALL_OW 12
19079: ARRAY
19080: PPUSH
19081: LD_INT 1
19083: PPUSH
19084: CALL_OW 55
// end ;
19088: END
// every 0 0$30 + 0 0$10 do
19089: GO 19091
19091: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19092: LD_INT 4
19094: PUSH
19095: LD_INT 5
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 1
19104: PPUSH
19105: LD_INT 2
19107: PPUSH
19108: CALL_OW 12
19112: ARRAY
19113: PPUSH
19114: LD_INT 7
19116: PPUSH
19117: LD_INT 1
19119: PPUSH
19120: CALL_OW 55
// Wait ( 0 0$15 ) ;
19124: LD_INT 525
19126: PPUSH
19127: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19131: LD_INT 4
19133: PUSH
19134: LD_INT 5
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 1
19143: PPUSH
19144: LD_INT 2
19146: PPUSH
19147: CALL_OW 12
19151: ARRAY
19152: PPUSH
19153: LD_INT 7
19155: PPUSH
19156: LD_INT 1
19158: PPUSH
19159: CALL_OW 55
// Wait ( 0 0$20 ) ;
19163: LD_INT 700
19165: PPUSH
19166: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19170: LD_INT 4
19172: PUSH
19173: LD_INT 5
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 1
19182: PPUSH
19183: LD_INT 2
19185: PPUSH
19186: CALL_OW 12
19190: ARRAY
19191: PPUSH
19192: LD_INT 7
19194: PPUSH
19195: LD_INT 1
19197: PPUSH
19198: CALL_OW 55
// end ; end_of_file
19202: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
19203: LD_EXP 24
19207: PUSH
19208: LD_INT 1
19210: EQUAL
19211: IFFALSE 19512
19213: GO 19215
19215: DISABLE
19216: LD_INT 0
19218: PPUSH
19219: PPUSH
19220: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19221: LD_ADDR_VAR 0 2
19225: PUSH
19226: LD_INT 22
19228: PUSH
19229: LD_INT 1
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 21
19238: PUSH
19239: LD_INT 3
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: LD_INT 30
19251: PUSH
19252: LD_INT 0
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 30
19261: PUSH
19262: LD_INT 1
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: LIST
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: LIST
19278: PPUSH
19279: CALL_OW 69
19283: ST_TO_ADDR
// for i in tmp do
19284: LD_ADDR_VAR 0 1
19288: PUSH
19289: LD_VAR 0 2
19293: PUSH
19294: FOR_IN
19295: IFFALSE 19328
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19297: LD_ADDR_VAR 0 3
19301: PUSH
19302: LD_VAR 0 3
19306: PUSH
19307: LD_VAR 0 1
19311: PPUSH
19312: CALL_OW 274
19316: PPUSH
19317: LD_INT 1
19319: PPUSH
19320: CALL_OW 275
19324: PLUS
19325: ST_TO_ADDR
19326: GO 19294
19328: POP
19329: POP
// strings = [ ] ;
19330: LD_ADDR_EXP 27
19334: PUSH
19335: EMPTY
19336: ST_TO_ADDR
// if tmp = 0 then
19337: LD_VAR 0 2
19341: PUSH
19342: LD_INT 0
19344: EQUAL
19345: IFFALSE 19370
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19347: LD_ADDR_EXP 27
19351: PUSH
19352: LD_EXP 27
19356: PUSH
19357: LD_STRING #Am06-1
19359: PUSH
19360: LD_EXP 25
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: ADD
19369: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19370: LD_VAR 0 2
19374: PUSH
19375: LD_INT 0
19377: GREATER
19378: PUSH
19379: LD_EXP 25
19383: PUSH
19384: LD_VAR 0 3
19388: GREATER
19389: AND
19390: IFFALSE 19421
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19392: LD_ADDR_EXP 27
19396: PUSH
19397: LD_EXP 27
19401: PUSH
19402: LD_STRING #Am06-1
19404: PUSH
19405: LD_EXP 25
19409: PUSH
19410: LD_VAR 0 3
19414: MINUS
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: ADD
19420: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19421: LD_VAR 0 2
19425: PUSH
19426: LD_INT 0
19428: GREATER
19429: PUSH
19430: LD_EXP 25
19434: PUSH
19435: LD_VAR 0 3
19439: LESSEQUAL
19440: AND
19441: IFFALSE 19464
// strings = strings ^ [ #Am06-1 , 0 ] ;
19443: LD_ADDR_EXP 27
19447: PUSH
19448: LD_EXP 27
19452: PUSH
19453: LD_STRING #Am06-1
19455: PUSH
19456: LD_INT 0
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: ADD
19463: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19464: LD_ADDR_EXP 26
19468: PUSH
19469: LD_EXP 26
19473: PUSH
19474: LD_INT 35
19476: MINUS
19477: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19478: LD_ADDR_EXP 27
19482: PUSH
19483: LD_EXP 27
19487: PUSH
19488: LD_STRING #Am06-2
19490: PUSH
19491: LD_EXP 26
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: ADD
19500: ST_TO_ADDR
// display_strings = strings ;
19501: LD_ADDR_OWVAR 47
19505: PUSH
19506: LD_EXP 27
19510: ST_TO_ADDR
// enable ;
19511: ENABLE
// end ; end_of_file
19512: PPOPN 3
19514: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19515: LD_INT 0
19517: PPUSH
19518: PPUSH
19519: PPUSH
19520: PPUSH
19521: PPUSH
19522: PPUSH
19523: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19524: LD_ADDR_VAR 0 3
19528: PUSH
19529: LD_INT 22
19531: PUSH
19532: LD_INT 1
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 2
19541: PUSH
19542: LD_INT 30
19544: PUSH
19545: LD_INT 0
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 30
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: LIST
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PPUSH
19571: CALL_OW 69
19575: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19576: LD_INT 35
19578: PPUSH
19579: CALL_OW 67
// until depot ;
19583: LD_VAR 0 3
19587: IFFALSE 19524
// repeat wait ( 0 0$1 ) ;
19589: LD_INT 35
19591: PPUSH
19592: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19596: LD_ADDR_VAR 0 4
19600: PUSH
19601: LD_INT 22
19603: PUSH
19604: LD_INT 1
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 91
19613: PUSH
19614: LD_VAR 0 3
19618: PUSH
19619: LD_INT 1
19621: ARRAY
19622: PUSH
19623: LD_INT 15
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 21
19633: PUSH
19634: LD_INT 1
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 2
19643: PUSH
19644: LD_INT 25
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 25
19656: PUSH
19657: LD_INT 2
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 25
19666: PUSH
19667: LD_INT 3
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 25
19676: PUSH
19677: LD_INT 4
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 3
19693: PUSH
19694: LD_INT 54
19696: PUSH
19697: EMPTY
19698: LIST
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 3
19706: PUSH
19707: LD_INT 55
19709: PUSH
19710: EMPTY
19711: LIST
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: PPUSH
19725: CALL_OW 69
19729: PUSH
19730: LD_EXP 2
19734: PUSH
19735: LD_EXP 3
19739: PUSH
19740: LD_EXP 4
19744: PUSH
19745: LD_EXP 5
19749: PUSH
19750: LD_EXP 7
19754: PUSH
19755: LD_EXP 8
19759: PUSH
19760: LD_EXP 9
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: PUSH
19774: LD_EXP 46
19778: ADD
19779: DIFF
19780: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19781: LD_VAR 0 4
19785: PUSH
19786: LD_INT 1
19788: PPUSH
19789: CALL_OW 463
19793: NOT
19794: AND
19795: IFFALSE 19589
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19797: LD_ADDR_VAR 0 4
19801: PUSH
19802: LD_VAR 0 4
19806: PUSH
19807: LD_INT 1
19809: PPUSH
19810: LD_VAR 0 4
19814: PPUSH
19815: CALL_OW 12
19819: ARRAY
19820: ST_TO_ADDR
// blockSpawn = 1 ;
19821: LD_ADDR_EXP 29
19825: PUSH
19826: LD_INT 1
19828: ST_TO_ADDR
// uc_side = 2 ;
19829: LD_ADDR_OWVAR 20
19833: PUSH
19834: LD_INT 2
19836: ST_TO_ADDR
// uc_nation = 2 ;
19837: LD_ADDR_OWVAR 21
19841: PUSH
19842: LD_INT 2
19844: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ,  ) ;
19845: LD_ADDR_EXP 19
19849: PUSH
19850: LD_STRING Kurt
19852: PPUSH
19853: LD_INT 0
19855: PPUSH
19856: LD_STRING 
19858: PPUSH
19859: CALL 39057 0 3
19863: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19864: LD_EXP 19
19868: PPUSH
19869: LD_VAR 0 4
19873: PPUSH
19874: CALL_OW 250
19878: PPUSH
19879: LD_VAR 0 4
19883: PPUSH
19884: CALL_OW 251
19888: PPUSH
19889: LD_INT 5
19891: PPUSH
19892: LD_INT 1
19894: PPUSH
19895: CALL_OW 50
// InGameOn ;
19899: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19903: LD_EXP 19
19907: PPUSH
19908: CALL_OW 87
// wait ( 0 0$2 ) ;
19912: LD_INT 70
19914: PPUSH
19915: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19919: LD_EXP 19
19923: PPUSH
19924: LD_VAR 0 4
19928: PPUSH
19929: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19933: LD_VAR 0 4
19937: PPUSH
19938: LD_EXP 19
19942: PPUSH
19943: CALL_OW 112
// wait ( 0 0$1 ) ;
19947: LD_INT 35
19949: PPUSH
19950: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19954: LD_VAR 0 4
19958: PPUSH
19959: LD_EXP 19
19963: PPUSH
19964: CALL_OW 119
// DialogueOn ;
19968: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19972: LD_EXP 19
19976: PPUSH
19977: LD_STRING D2-Kurt-1
19979: PPUSH
19980: CALL_OW 88
// if tmp = JMM then
19984: LD_VAR 0 4
19988: PUSH
19989: LD_EXP 1
19993: EQUAL
19994: IFFALSE 20086
// begin Say ( JMM , D2-JMM-1 ) ;
19996: LD_EXP 1
20000: PPUSH
20001: LD_STRING D2-JMM-1
20003: PPUSH
20004: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
20008: LD_EXP 19
20012: PPUSH
20013: LD_STRING D2-Kurt-2
20015: PPUSH
20016: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
20020: LD_EXP 1
20024: PPUSH
20025: LD_STRING D2-JMM-2
20027: PPUSH
20028: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20032: LD_EXP 19
20036: PPUSH
20037: LD_STRING D2-Kurt-3
20039: PPUSH
20040: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
20044: LD_EXP 1
20048: PPUSH
20049: LD_STRING D2-JMM-3
20051: PPUSH
20052: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20056: LD_EXP 19
20060: PPUSH
20061: LD_STRING D2-Kurt-4
20063: PPUSH
20064: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
20068: LD_EXP 1
20072: PPUSH
20073: LD_STRING D2-JMM-4
20075: PPUSH
20076: CALL_OW 88
// DialogueOff ;
20080: CALL_OW 7
// end else
20084: GO 20396
// begin if GetSex ( tmp ) = 1 then
20086: LD_VAR 0 4
20090: PPUSH
20091: CALL_OW 258
20095: PUSH
20096: LD_INT 1
20098: EQUAL
20099: IFFALSE 20113
// Say ( tmp , D2-Sol1-1 ) ;
20101: LD_VAR 0 4
20105: PPUSH
20106: LD_STRING D2-Sol1-1
20108: PPUSH
20109: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20113: LD_VAR 0 4
20117: PPUSH
20118: CALL_OW 258
20122: PUSH
20123: LD_INT 2
20125: EQUAL
20126: IFFALSE 20140
// Say ( tmp , D2-FSol1-1 ) ;
20128: LD_VAR 0 4
20132: PPUSH
20133: LD_STRING D2-FSol1-1
20135: PPUSH
20136: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
20140: LD_EXP 19
20144: PPUSH
20145: LD_STRING D2-Kurt-2
20147: PPUSH
20148: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20152: LD_VAR 0 4
20156: PPUSH
20157: CALL_OW 258
20161: PUSH
20162: LD_INT 1
20164: EQUAL
20165: IFFALSE 20179
// Say ( tmp , D2-Sol1-2 ) ;
20167: LD_VAR 0 4
20171: PPUSH
20172: LD_STRING D2-Sol1-2
20174: PPUSH
20175: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20179: LD_VAR 0 4
20183: PPUSH
20184: CALL_OW 258
20188: PUSH
20189: LD_INT 2
20191: EQUAL
20192: IFFALSE 20206
// Say ( tmp , D2-FSol1-2 ) ;
20194: LD_VAR 0 4
20198: PPUSH
20199: LD_STRING D2-FSol1-2
20201: PPUSH
20202: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20206: LD_EXP 19
20210: PPUSH
20211: LD_STRING D2-Kurt-3
20213: PPUSH
20214: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20218: LD_VAR 0 4
20222: PPUSH
20223: CALL_OW 258
20227: PUSH
20228: LD_INT 1
20230: EQUAL
20231: IFFALSE 20245
// Say ( tmp , D2-Sol1-3 ) ;
20233: LD_VAR 0 4
20237: PPUSH
20238: LD_STRING D2-Sol1-3
20240: PPUSH
20241: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20245: LD_VAR 0 4
20249: PPUSH
20250: CALL_OW 258
20254: PUSH
20255: LD_INT 2
20257: EQUAL
20258: IFFALSE 20272
// Say ( tmp , D2-FSol1-3 ) ;
20260: LD_VAR 0 4
20264: PPUSH
20265: LD_STRING D2-FSol1-3
20267: PPUSH
20268: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20272: LD_EXP 19
20276: PPUSH
20277: LD_STRING D2-Kurt-4
20279: PPUSH
20280: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20284: LD_VAR 0 4
20288: PPUSH
20289: CALL_OW 258
20293: PUSH
20294: LD_INT 1
20296: EQUAL
20297: IFFALSE 20311
// Say ( tmp , D2-Sol1-4 ) ;
20299: LD_VAR 0 4
20303: PPUSH
20304: LD_STRING D2-Sol1-4
20306: PPUSH
20307: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20311: LD_VAR 0 4
20315: PPUSH
20316: CALL_OW 258
20320: PUSH
20321: LD_INT 2
20323: EQUAL
20324: IFFALSE 20338
// Say ( tmp , D2-FSol1-4 ) ;
20326: LD_VAR 0 4
20330: PPUSH
20331: LD_STRING D2-FSol1-4
20333: PPUSH
20334: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20338: LD_VAR 0 4
20342: PPUSH
20343: CALL_OW 258
20347: PUSH
20348: LD_INT 1
20350: EQUAL
20351: IFFALSE 20365
// Say ( tmp , D2-Sol1-5 ) ;
20353: LD_VAR 0 4
20357: PPUSH
20358: LD_STRING D2-Sol1-5
20360: PPUSH
20361: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20365: LD_VAR 0 4
20369: PPUSH
20370: CALL_OW 258
20374: PUSH
20375: LD_INT 2
20377: EQUAL
20378: IFFALSE 20392
// Say ( tmp , D2-FSol1-5 ) ;
20380: LD_VAR 0 4
20384: PPUSH
20385: LD_STRING D2-FSol1-5
20387: PPUSH
20388: CALL_OW 88
// DialogueOff ;
20392: CALL_OW 7
// end ; dec = ShowQuery1 ;
20396: LD_ADDR_VAR 0 6
20400: PUSH
20401: CALL 6698 0 0
20405: ST_TO_ADDR
// if dec = 1 then
20406: LD_VAR 0 6
20410: PUSH
20411: LD_INT 1
20413: EQUAL
20414: IFFALSE 20476
// begin DialogueOn ;
20416: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20420: LD_EXP 19
20424: PPUSH
20425: LD_STRING D2a-Kurt-1
20427: PPUSH
20428: CALL_OW 88
// DialogueOff ;
20432: CALL_OW 7
// InGameOff ;
20436: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20440: LD_INT 1
20442: PPUSH
20443: LD_INT 2
20445: PPUSH
20446: LD_INT 2
20448: PPUSH
20449: LD_INT 1
20451: PPUSH
20452: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20456: LD_EXP 19
20460: PPUSH
20461: LD_INT 8
20463: PPUSH
20464: CALL_OW 113
// readyToEscape = 1 ;
20468: LD_ADDR_EXP 21
20472: PUSH
20473: LD_INT 1
20475: ST_TO_ADDR
// end ; if dec = 2 then
20476: LD_VAR 0 6
20480: PUSH
20481: LD_INT 2
20483: EQUAL
20484: IFFALSE 21004
// begin DialogueOn ;
20486: CALL_OW 6
// if tmp = JMM then
20490: LD_VAR 0 4
20494: PUSH
20495: LD_EXP 1
20499: EQUAL
20500: IFFALSE 20556
// begin Say ( JMM , D2b-JMM-1 ) ;
20502: LD_EXP 1
20506: PPUSH
20507: LD_STRING D2b-JMM-1
20509: PPUSH
20510: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20514: LD_EXP 19
20518: PPUSH
20519: LD_STRING D2b-Kurt-1
20521: PPUSH
20522: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20526: LD_EXP 1
20530: PPUSH
20531: LD_STRING D2b-JMM-2
20533: PPUSH
20534: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20538: LD_EXP 19
20542: PPUSH
20543: LD_STRING D2b-Kurt-2
20545: PPUSH
20546: CALL_OW 88
// DialogueOff ;
20550: CALL_OW 7
// end else
20554: GO 20746
// begin if GetSex ( tmp ) = 1 then
20556: LD_VAR 0 4
20560: PPUSH
20561: CALL_OW 258
20565: PUSH
20566: LD_INT 1
20568: EQUAL
20569: IFFALSE 20583
// Say ( tmp , D2b-Sol1-1 ) ;
20571: LD_VAR 0 4
20575: PPUSH
20576: LD_STRING D2b-Sol1-1
20578: PPUSH
20579: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20583: LD_VAR 0 4
20587: PPUSH
20588: CALL_OW 258
20592: PUSH
20593: LD_INT 2
20595: EQUAL
20596: IFFALSE 20610
// Say ( tmp , D2b-FSol1-1 ) ;
20598: LD_VAR 0 4
20602: PPUSH
20603: LD_STRING D2b-FSol1-1
20605: PPUSH
20606: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20610: LD_EXP 19
20614: PPUSH
20615: LD_STRING D2b-Kurt-1
20617: PPUSH
20618: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20622: LD_VAR 0 4
20626: PPUSH
20627: CALL_OW 258
20631: PUSH
20632: LD_INT 1
20634: EQUAL
20635: IFFALSE 20649
// Say ( tmp , D2b-Sol1-2 ) ;
20637: LD_VAR 0 4
20641: PPUSH
20642: LD_STRING D2b-Sol1-2
20644: PPUSH
20645: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20649: LD_VAR 0 4
20653: PPUSH
20654: CALL_OW 258
20658: PUSH
20659: LD_INT 2
20661: EQUAL
20662: IFFALSE 20676
// Say ( tmp , D2b-FSol1-2 ) ;
20664: LD_VAR 0 4
20668: PPUSH
20669: LD_STRING D2b-FSol1-2
20671: PPUSH
20672: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20676: LD_EXP 19
20680: PPUSH
20681: LD_STRING D2b-Kurt-2
20683: PPUSH
20684: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20688: LD_VAR 0 4
20692: PPUSH
20693: CALL_OW 258
20697: PUSH
20698: LD_INT 1
20700: EQUAL
20701: IFFALSE 20715
// Say ( tmp , D2c-Sol1-2 ) ;
20703: LD_VAR 0 4
20707: PPUSH
20708: LD_STRING D2c-Sol1-2
20710: PPUSH
20711: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20715: LD_VAR 0 4
20719: PPUSH
20720: CALL_OW 258
20724: PUSH
20725: LD_INT 2
20727: EQUAL
20728: IFFALSE 20742
// Say ( tmp , D2c-FSol1-2 ) ;
20730: LD_VAR 0 4
20734: PPUSH
20735: LD_STRING D2c-FSol1-2
20737: PPUSH
20738: CALL_OW 88
// DialogueOff ;
20742: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20746: LD_ADDR_VAR 0 7
20750: PUSH
20751: CALL 6772 0 0
20755: ST_TO_ADDR
// if dec2 = 1 then
20756: LD_VAR 0 7
20760: PUSH
20761: LD_INT 1
20763: EQUAL
20764: IFFALSE 20826
// begin DialogueOn ;
20766: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20770: LD_EXP 19
20774: PPUSH
20775: LD_STRING D2a-Kurt-1
20777: PPUSH
20778: CALL_OW 88
// DialogueOff ;
20782: CALL_OW 7
// InGameOff ;
20786: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20790: LD_INT 1
20792: PPUSH
20793: LD_INT 2
20795: PPUSH
20796: LD_INT 2
20798: PPUSH
20799: LD_INT 1
20801: PPUSH
20802: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20806: LD_EXP 19
20810: PPUSH
20811: LD_INT 8
20813: PPUSH
20814: CALL_OW 113
// readyToEscape = 1 ;
20818: LD_ADDR_EXP 21
20822: PUSH
20823: LD_INT 1
20825: ST_TO_ADDR
// end ; if dec2 = 2 then
20826: LD_VAR 0 7
20830: PUSH
20831: LD_INT 2
20833: EQUAL
20834: IFFALSE 21004
// begin if tmp = JMM then
20836: LD_VAR 0 4
20840: PUSH
20841: LD_EXP 1
20845: EQUAL
20846: IFFALSE 20906
// begin DialogueOn ;
20848: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20852: LD_EXP 1
20856: PPUSH
20857: LD_STRING D2c-JMM-1
20859: PPUSH
20860: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20864: LD_EXP 19
20868: PPUSH
20869: LD_STRING D2c-Kurt-1
20871: PPUSH
20872: CALL_OW 88
// DialogueOff ;
20876: CALL_OW 7
// InGameOff ;
20880: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20884: LD_EXP 19
20888: PPUSH
20889: LD_INT 8
20891: PPUSH
20892: CALL_OW 113
// readyToEscape = 1 ;
20896: LD_ADDR_EXP 21
20900: PUSH
20901: LD_INT 1
20903: ST_TO_ADDR
// end else
20904: GO 21004
// begin DialogueOn ;
20906: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20910: LD_VAR 0 4
20914: PPUSH
20915: CALL_OW 258
20919: PUSH
20920: LD_INT 1
20922: EQUAL
20923: IFFALSE 20937
// Say ( tmp , D2c-Sol1-1 ) ;
20925: LD_VAR 0 4
20929: PPUSH
20930: LD_STRING D2c-Sol1-1
20932: PPUSH
20933: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20937: LD_VAR 0 4
20941: PPUSH
20942: CALL_OW 258
20946: PUSH
20947: LD_INT 2
20949: EQUAL
20950: IFFALSE 20964
// Say ( tmp , D2c-FSol1-1 ) ;
20952: LD_VAR 0 4
20956: PPUSH
20957: LD_STRING D2c-FSol1-1
20959: PPUSH
20960: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20964: LD_EXP 19
20968: PPUSH
20969: LD_STRING D2c-Kurt-1
20971: PPUSH
20972: CALL_OW 88
// DialogueOff ;
20976: CALL_OW 7
// InGameOff ;
20980: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20984: LD_EXP 19
20988: PPUSH
20989: LD_INT 8
20991: PPUSH
20992: CALL_OW 113
// readyToEscape = 1 ;
20996: LD_ADDR_EXP 21
21000: PUSH
21001: LD_INT 1
21003: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
21004: LD_VAR 0 6
21008: PUSH
21009: LD_INT 3
21011: EQUAL
21012: IFFALSE 21186
// begin DialogueOn ;
21014: CALL_OW 6
// if tmp = JMM then
21018: LD_VAR 0 4
21022: PUSH
21023: LD_EXP 1
21027: EQUAL
21028: IFFALSE 21088
// begin DialogueOn ;
21030: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
21034: LD_EXP 1
21038: PPUSH
21039: LD_STRING D2c-JMM-1
21041: PPUSH
21042: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21046: LD_EXP 19
21050: PPUSH
21051: LD_STRING D2c-Kurt-1
21053: PPUSH
21054: CALL_OW 88
// DialogueOff ;
21058: CALL_OW 7
// InGameOff ;
21062: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21066: LD_EXP 19
21070: PPUSH
21071: LD_INT 8
21073: PPUSH
21074: CALL_OW 113
// readyToEscape = 1 ;
21078: LD_ADDR_EXP 21
21082: PUSH
21083: LD_INT 1
21085: ST_TO_ADDR
// end else
21086: GO 21186
// begin DialogueOn ;
21088: CALL_OW 6
// if GetSex ( tmp ) = 1 then
21092: LD_VAR 0 4
21096: PPUSH
21097: CALL_OW 258
21101: PUSH
21102: LD_INT 1
21104: EQUAL
21105: IFFALSE 21119
// Say ( tmp , D2c-Sol1-1 ) ;
21107: LD_VAR 0 4
21111: PPUSH
21112: LD_STRING D2c-Sol1-1
21114: PPUSH
21115: CALL_OW 88
// if GetSex ( tmp ) = 2 then
21119: LD_VAR 0 4
21123: PPUSH
21124: CALL_OW 258
21128: PUSH
21129: LD_INT 2
21131: EQUAL
21132: IFFALSE 21146
// Say ( tmp , D2c-FSol1-1 ) ;
21134: LD_VAR 0 4
21138: PPUSH
21139: LD_STRING D2c-FSol1-1
21141: PPUSH
21142: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21146: LD_EXP 19
21150: PPUSH
21151: LD_STRING D2c-Kurt-1
21153: PPUSH
21154: CALL_OW 88
// DialogueOff ;
21158: CALL_OW 7
// InGameOff ;
21162: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21166: LD_EXP 19
21170: PPUSH
21171: LD_INT 8
21173: PPUSH
21174: CALL_OW 113
// readyToEscape = 1 ;
21178: LD_ADDR_EXP 21
21182: PUSH
21183: LD_INT 1
21185: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
21186: LD_ADDR_EXP 29
21190: PUSH
21191: LD_INT 0
21193: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21194: LD_INT 35
21196: PPUSH
21197: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
21201: LD_EXP 19
21205: PPUSH
21206: LD_INT 8
21208: PPUSH
21209: CALL_OW 308
21213: PUSH
21214: LD_EXP 21
21218: AND
21219: PUSH
21220: LD_EXP 19
21224: PPUSH
21225: CALL_OW 301
21229: OR
21230: IFFALSE 21194
// if IsDead ( Kurt ) then
21232: LD_EXP 19
21236: PPUSH
21237: CALL_OW 301
21241: IFFALSE 21245
// exit ;
21243: GO 21314
// RemoveUnit ( Kurt ) ;
21245: LD_EXP 19
21249: PPUSH
21250: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
21254: LD_EXP 19
21258: PPUSH
21259: LD_STRING Kurt
21261: PPUSH
21262: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
21266: LD_INT 1
21268: PPUSH
21269: LD_INT 2
21271: PPUSH
21272: CALL_OW 81
21276: PUSH
21277: LD_INT 0
21279: EQUAL
21280: IFFALSE 21290
// KurtStatus = 1 ;
21282: LD_ADDR_EXP 20
21286: PUSH
21287: LD_INT 1
21289: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
21290: LD_INT 1
21292: PPUSH
21293: LD_INT 2
21295: PPUSH
21296: CALL_OW 81
21300: PUSH
21301: LD_INT 2
21303: EQUAL
21304: IFFALSE 21314
// KurtStatus = 2 ;
21306: LD_ADDR_EXP 20
21310: PUSH
21311: LD_INT 2
21313: ST_TO_ADDR
// end ; end_of_file
21314: LD_VAR 0 1
21318: RET
// every 0 0$1 do
21319: GO 21321
21321: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
21322: LD_INT 3
21324: PPUSH
21325: LD_INT 32
21327: PPUSH
21328: LD_INT 3
21330: PPUSH
21331: CALL 6827 0 3
21335: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21336: GO 21338
21338: DISABLE
21339: LD_INT 0
21341: PPUSH
// begin enemyWayX = [ ] ;
21342: LD_ADDR_EXP 49
21346: PUSH
21347: EMPTY
21348: ST_TO_ADDR
// enemyWayY = [ ] ;
21349: LD_ADDR_EXP 50
21353: PUSH
21354: EMPTY
21355: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
21356: LD_ADDR_VAR 0 1
21360: PUSH
21361: LD_INT 1
21363: PPUSH
21364: LD_INT 2
21366: PPUSH
21367: CALL_OW 12
21371: ST_TO_ADDR
// if rnd = 1 then
21372: LD_VAR 0 1
21376: PUSH
21377: LD_INT 1
21379: EQUAL
21380: IFFALSE 21420
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21382: LD_ADDR_EXP 49
21386: PUSH
21387: LD_INT 93
21389: PUSH
21390: LD_INT 84
21392: PUSH
21393: LD_INT 104
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: LIST
21400: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21401: LD_ADDR_EXP 50
21405: PUSH
21406: LD_INT 51
21408: PUSH
21409: LD_INT 35
21411: PUSH
21412: LD_INT 28
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: LIST
21419: ST_TO_ADDR
// end ; if rnd = 2 then
21420: LD_VAR 0 1
21424: PUSH
21425: LD_INT 2
21427: EQUAL
21428: IFFALSE 21484
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21430: LD_ADDR_EXP 49
21434: PUSH
21435: LD_INT 93
21437: PUSH
21438: LD_INT 52
21440: PUSH
21441: LD_INT 34
21443: PUSH
21444: LD_INT 28
21446: PUSH
21447: LD_INT 30
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21457: LD_ADDR_EXP 50
21461: PUSH
21462: LD_INT 51
21464: PUSH
21465: LD_INT 45
21467: PUSH
21468: LD_INT 35
21470: PUSH
21471: LD_INT 26
21473: PUSH
21474: LD_INT 20
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: ST_TO_ADDR
// end ; enable ;
21484: ENABLE
// end ;
21485: PPOPN 1
21487: END
// every 0 0$1 do
21488: GO 21490
21490: DISABLE
// begin enable ;
21491: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21492: LD_INT 3
21494: PPUSH
21495: LD_INT 2
21497: PPUSH
21498: LD_INT 10
21500: PPUSH
21501: LD_EXP 31
21505: PPUSH
21506: CALL 8262 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21510: LD_INT 3
21512: PPUSH
21513: LD_INT 12
21515: PPUSH
21516: LD_EXP 31
21520: PPUSH
21521: CALL 10147 0 3
// if disableHealAI = 0 then
21525: LD_EXP 33
21529: PUSH
21530: LD_INT 0
21532: EQUAL
21533: IFFALSE 21554
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21535: LD_INT 3
21537: PPUSH
21538: LD_INT 9
21540: PPUSH
21541: LD_INT 10
21543: PPUSH
21544: LD_INT 32
21546: PUSH
21547: EMPTY
21548: LIST
21549: PPUSH
21550: CALL 8653 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21554: LD_INT 3
21556: PPUSH
21557: LD_INT 51
21559: PPUSH
21560: LD_INT 6
21562: PPUSH
21563: CALL 9361 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21567: LD_INT 3
21569: PPUSH
21570: LD_INT 12
21572: PPUSH
21573: LD_INT 121
21575: PPUSH
21576: LD_INT 100
21578: PPUSH
21579: CALL 7222 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21583: LD_INT 3
21585: PPUSH
21586: LD_INT 22
21588: PPUSH
21589: LD_EXP 49
21593: PPUSH
21594: LD_EXP 50
21598: PPUSH
21599: CALL 7425 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21603: LD_INT 3
21605: PPUSH
21606: LD_INT 10
21608: PPUSH
21609: CALL 9504 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21613: LD_INT 3
21615: PPUSH
21616: LD_INT 1
21618: PPUSH
21619: CALL 9917 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21623: LD_INT 2
21625: PPUSH
21626: CALL_OW 303
21630: PUSH
21631: LD_INT 2
21633: PPUSH
21634: CALL_OW 255
21638: PUSH
21639: LD_INT 1
21641: EQUAL
21642: OR
21643: IFFALSE 21655
// DefendDepot ( 3 , rudepo ) ;
21645: LD_INT 3
21647: PPUSH
21648: LD_INT 2
21650: PPUSH
21651: CALL 9197 0 2
// end ;
21655: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21656: LD_INT 22
21658: PUSH
21659: LD_INT 3
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 21
21668: PUSH
21669: LD_INT 2
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 55
21678: PUSH
21679: EMPTY
21680: LIST
21681: PUSH
21682: LD_INT 3
21684: PUSH
21685: LD_INT 34
21687: PUSH
21688: LD_INT 51
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: PPUSH
21705: CALL_OW 69
21709: PUSH
21710: LD_INT 0
21712: EQUAL
21713: PUSH
21714: LD_INT 21
21716: PPUSH
21717: CALL_OW 255
21721: PUSH
21722: LD_INT 3
21724: EQUAL
21725: AND
21726: PUSH
21727: LD_INT 21
21729: PPUSH
21730: CALL_OW 302
21734: AND
21735: PUSH
21736: LD_INT 2
21738: PPUSH
21739: CALL_OW 255
21743: PUSH
21744: LD_INT 3
21746: EQUAL
21747: AND
21748: PUSH
21749: LD_INT 2
21751: PPUSH
21752: CALL_OW 302
21756: AND
21757: IFFALSE 21937
21759: GO 21761
21761: DISABLE
// begin enable ;
21762: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21763: LD_INT 2
21765: PPUSH
21766: CALL_OW 274
21770: PPUSH
21771: LD_INT 1
21773: PPUSH
21774: LD_INT 1000
21776: PPUSH
21777: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21781: LD_INT 3
21783: PPUSH
21784: LD_INT 21
21786: PPUSH
21787: LD_INT 4
21789: PUSH
21790: LD_INT 5
21792: PUSH
21793: LD_INT 6
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: LIST
21800: PUSH
21801: LD_OWVAR 67
21805: ARRAY
21806: PPUSH
21807: LD_INT 43
21809: PUSH
21810: LD_INT 43
21812: PUSH
21813: LD_INT 44
21815: PUSH
21816: LD_INT 44
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 43
21827: PUSH
21828: LD_INT 43
21830: PUSH
21831: LD_INT 43
21833: PUSH
21834: LD_INT 44
21836: PUSH
21837: LD_INT 44
21839: PUSH
21840: LD_INT 46
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 43
21853: PUSH
21854: LD_INT 43
21856: PUSH
21857: LD_INT 43
21859: PUSH
21860: LD_INT 44
21862: PUSH
21863: LD_INT 44
21865: PUSH
21866: LD_INT 46
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: LIST
21881: PUSH
21882: LD_OWVAR 67
21886: ARRAY
21887: PPUSH
21888: LD_INT 1
21890: PPUSH
21891: LD_INT 1
21893: PPUSH
21894: LD_INT 22
21896: PUSH
21897: LD_INT 22
21899: PUSH
21900: LD_INT 24
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 1
21909: PPUSH
21910: LD_INT 2
21912: PPUSH
21913: CALL_OW 12
21917: ARRAY
21918: PUSH
21919: LD_INT 24
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: LIST
21926: PUSH
21927: LD_OWVAR 67
21931: ARRAY
21932: PPUSH
21933: CALL 7068 0 7
// end ;
21937: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21938: LD_INT 17
21940: PPUSH
21941: CALL_OW 255
21945: PUSH
21946: LD_INT 3
21948: EQUAL
21949: PUSH
21950: LD_INT 17
21952: PPUSH
21953: CALL_OW 302
21957: AND
21958: PUSH
21959: LD_INT 2
21961: PPUSH
21962: CALL_OW 255
21966: PUSH
21967: LD_INT 3
21969: EQUAL
21970: AND
21971: PUSH
21972: LD_INT 2
21974: PPUSH
21975: CALL_OW 302
21979: AND
21980: IFFALSE 22047
21982: GO 21984
21984: DISABLE
// begin enable ;
21985: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21986: LD_INT 17
21988: PPUSH
21989: LD_INT 22
21991: PPUSH
21992: LD_INT 1
21994: PPUSH
21995: LD_INT 1
21997: PPUSH
21998: LD_INT 42
22000: PUSH
22001: LD_INT 43
22003: PUSH
22004: LD_INT 44
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 1
22014: PPUSH
22015: LD_INT 3
22017: PPUSH
22018: CALL_OW 12
22022: ARRAY
22023: PPUSH
22024: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
22028: LD_INT 17
22030: PPUSH
22031: LD_INT 22
22033: PPUSH
22034: LD_INT 1
22036: PPUSH
22037: LD_INT 1
22039: PPUSH
22040: LD_INT 51
22042: PPUSH
22043: CALL_OW 185
// end ;
22047: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
22048: LD_INT 17
22050: PPUSH
22051: CALL_OW 302
22055: PUSH
22056: LD_INT 17
22058: PPUSH
22059: CALL_OW 255
22063: PUSH
22064: LD_INT 3
22066: EQUAL
22067: AND
22068: PUSH
22069: LD_INT 2
22071: PPUSH
22072: CALL_OW 302
22076: AND
22077: PUSH
22078: LD_INT 2
22080: PPUSH
22081: CALL_OW 255
22085: PUSH
22086: LD_INT 3
22088: EQUAL
22089: AND
22090: PUSH
22091: LD_INT 17
22093: PPUSH
22094: CALL_OW 313
22098: NOT
22099: AND
22100: IFFALSE 22194
22102: GO 22104
22104: DISABLE
22105: LD_INT 0
22107: PPUSH
// begin for i = 1 to 6 do
22108: LD_ADDR_VAR 0 1
22112: PUSH
22113: DOUBLE
22114: LD_INT 1
22116: DEC
22117: ST_TO_ADDR
22118: LD_INT 6
22120: PUSH
22121: FOR_TO
22122: IFFALSE 22192
// begin uc_side = 3 ;
22124: LD_ADDR_OWVAR 20
22128: PUSH
22129: LD_INT 3
22131: ST_TO_ADDR
// uc_nation = 3 ;
22132: LD_ADDR_OWVAR 21
22136: PUSH
22137: LD_INT 3
22139: ST_TO_ADDR
// hc_gallery :=  ;
22140: LD_ADDR_OWVAR 33
22144: PUSH
22145: LD_STRING 
22147: ST_TO_ADDR
// hc_name :=  ;
22148: LD_ADDR_OWVAR 26
22152: PUSH
22153: LD_STRING 
22155: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
22156: LD_INT 0
22158: PPUSH
22159: LD_EXP 34
22163: PPUSH
22164: LD_EXP 35
22168: PPUSH
22169: CALL_OW 12
22173: PPUSH
22174: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
22178: CALL_OW 44
22182: PPUSH
22183: LD_INT 17
22185: PPUSH
22186: CALL_OW 52
// end ;
22190: GO 22121
22192: POP
22193: POP
// end ;
22194: PPOPN 1
22196: END
// every 2 2$0 do var i , j ;
22197: GO 22199
22199: DISABLE
22200: LD_INT 0
22202: PPUSH
22203: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
22204: LD_INT 14700
22206: PUSH
22207: LD_INT 33600
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 1
22216: PPUSH
22217: LD_INT 2
22219: PPUSH
22220: CALL_OW 12
22224: ARRAY
22225: PPUSH
22226: CALL_OW 67
// disableHealAI = 1 ;
22230: LD_ADDR_EXP 33
22234: PUSH
22235: LD_INT 1
22237: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22238: LD_ADDR_VAR 0 1
22242: PUSH
22243: LD_INT 22
22245: PUSH
22246: LD_INT 3
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 25
22255: PUSH
22256: LD_INT 4
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PPUSH
22267: CALL_OW 69
22271: PUSH
22272: FOR_IN
22273: IFFALSE 22286
// ComExitBuilding ( i ) ;
22275: LD_VAR 0 1
22279: PPUSH
22280: CALL_OW 122
22284: GO 22272
22286: POP
22287: POP
// wait ( 0 0$1 ) ;
22288: LD_INT 35
22290: PPUSH
22291: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22295: LD_INT 35
22297: PPUSH
22298: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22302: LD_ADDR_VAR 0 1
22306: PUSH
22307: LD_INT 22
22309: PUSH
22310: LD_INT 3
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 25
22319: PUSH
22320: LD_INT 4
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PPUSH
22331: CALL_OW 69
22335: PUSH
22336: FOR_IN
22337: IFFALSE 22414
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
22339: LD_ADDR_VAR 0 2
22343: PUSH
22344: LD_INT 17
22346: PPUSH
22347: LD_INT 22
22349: PUSH
22350: LD_INT 0
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 25
22359: PUSH
22360: LD_INT 12
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PPUSH
22371: CALL_OW 70
22375: PUSH
22376: FOR_IN
22377: IFFALSE 22410
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22379: LD_VAR 0 1
22383: PPUSH
22384: LD_VAR 0 2
22388: PPUSH
22389: CALL_OW 250
22393: PPUSH
22394: LD_VAR 0 2
22398: PPUSH
22399: CALL_OW 251
22403: PPUSH
22404: CALL_OW 191
// end ;
22408: GO 22376
22410: POP
22411: POP
// end ;
22412: GO 22336
22414: POP
22415: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22416: LD_INT 22
22418: PUSH
22419: LD_INT 3
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 25
22428: PUSH
22429: LD_INT 4
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PPUSH
22440: CALL_OW 69
22444: PUSH
22445: LD_INT 0
22447: EQUAL
22448: PUSH
22449: LD_EXP 32
22453: PUSH
22454: LD_INT 6
22456: PUSH
22457: LD_INT 7
22459: PUSH
22460: LD_INT 8
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: PUSH
22468: LD_OWVAR 67
22472: ARRAY
22473: GREATEREQUAL
22474: OR
22475: PUSH
22476: LD_INT 17
22478: PPUSH
22479: LD_INT 22
22481: PUSH
22482: LD_INT 0
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 25
22491: PUSH
22492: LD_INT 12
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PPUSH
22503: CALL_OW 70
22507: PUSH
22508: LD_INT 0
22510: EQUAL
22511: OR
22512: IFFALSE 22295
// disableHealAI = 0 ;
22514: LD_ADDR_EXP 33
22518: PUSH
22519: LD_INT 0
22521: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22522: LD_ADDR_VAR 0 1
22526: PUSH
22527: LD_INT 22
22529: PUSH
22530: LD_INT 3
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 25
22539: PUSH
22540: LD_INT 12
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PPUSH
22551: CALL_OW 69
22555: PUSH
22556: FOR_IN
22557: IFFALSE 22573
// SetClass ( i , 16 ) ;
22559: LD_VAR 0 1
22563: PPUSH
22564: LD_INT 16
22566: PPUSH
22567: CALL_OW 336
22571: GO 22556
22573: POP
22574: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22575: LD_ADDR_VAR 0 1
22579: PUSH
22580: LD_INT 22
22582: PUSH
22583: LD_INT 3
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 25
22592: PUSH
22593: LD_INT 4
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PPUSH
22604: CALL_OW 69
22608: PUSH
22609: FOR_IN
22610: IFFALSE 22629
// ComMoveXY ( i , 113 , 94 ) ;
22612: LD_VAR 0 1
22616: PPUSH
22617: LD_INT 113
22619: PPUSH
22620: LD_INT 94
22622: PPUSH
22623: CALL_OW 111
22627: GO 22609
22629: POP
22630: POP
// end ;
22631: PPOPN 2
22633: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22634: LD_INT 21
22636: PPUSH
22637: CALL_OW 255
22641: PUSH
22642: LD_INT 3
22644: EQUAL
22645: PUSH
22646: LD_INT 21
22648: PPUSH
22649: CALL_OW 302
22653: AND
22654: PUSH
22655: LD_INT 22
22657: PUSH
22658: LD_INT 3
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 34
22667: PUSH
22668: LD_INT 51
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PPUSH
22679: CALL_OW 69
22683: PUSH
22684: LD_INT 0
22686: EQUAL
22687: AND
22688: IFFALSE 22720
22690: GO 22692
22692: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22693: LD_INT 21
22695: PPUSH
22696: LD_INT 23
22698: PPUSH
22699: LD_INT 1
22701: PPUSH
22702: LD_INT 1
22704: PPUSH
22705: LD_INT 51
22707: PPUSH
22708: CALL_OW 185
// wait ( 5 5$0 ) ;
22712: LD_INT 10500
22714: PPUSH
22715: CALL_OW 67
// enable ;
22719: ENABLE
// end ; end_of_file
22720: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22721: LD_EXP 26
22725: PUSH
22726: LD_INT 0
22728: LESSEQUAL
22729: IFFALSE 22878
22731: GO 22733
22733: DISABLE
22734: LD_INT 0
22736: PPUSH
22737: PPUSH
22738: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22739: LD_ADDR_VAR 0 2
22743: PUSH
22744: LD_INT 22
22746: PUSH
22747: LD_INT 1
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 21
22756: PUSH
22757: LD_INT 3
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 2
22766: PUSH
22767: LD_INT 30
22769: PUSH
22770: LD_INT 0
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 30
22779: PUSH
22780: LD_INT 1
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: LIST
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: LIST
22796: PPUSH
22797: CALL_OW 69
22801: ST_TO_ADDR
// for i in tmp do
22802: LD_ADDR_VAR 0 1
22806: PUSH
22807: LD_VAR 0 2
22811: PUSH
22812: FOR_IN
22813: IFFALSE 22846
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22815: LD_ADDR_VAR 0 3
22819: PUSH
22820: LD_VAR 0 3
22824: PUSH
22825: LD_VAR 0 1
22829: PPUSH
22830: CALL_OW 274
22834: PPUSH
22835: LD_INT 1
22837: PPUSH
22838: CALL_OW 275
22842: PLUS
22843: ST_TO_ADDR
22844: GO 22812
22846: POP
22847: POP
// if yourCrates >= needCrates then
22848: LD_VAR 0 3
22852: PUSH
22853: LD_EXP 25
22857: GREATEREQUAL
22858: IFFALSE 22871
// FinishMission ( yourCrates ) else
22860: LD_VAR 0 3
22864: PPUSH
22865: CALL 22881 0 1
22869: GO 22878
// YouLost ( matmin ) ;
22871: LD_STRING matmin
22873: PPUSH
22874: CALL_OW 104
// end ;
22878: PPOPN 3
22880: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22881: LD_INT 0
22883: PPUSH
22884: PPUSH
22885: PPUSH
22886: PPUSH
// if killCounter = 0 then
22887: LD_EXP 47
22891: PUSH
22892: LD_INT 0
22894: EQUAL
22895: IFFALSE 22904
// SetAchievement ( ACH_SURV ) ;
22897: LD_STRING ACH_SURV
22899: PPUSH
22900: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22904: LD_INT 22
22906: PUSH
22907: LD_INT 3
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 21
22916: PUSH
22917: LD_INT 3
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PPUSH
22928: CALL_OW 69
22932: PUSH
22933: LD_INT 0
22935: EQUAL
22936: IFFALSE 22952
// begin wait ( 3 ) ;
22938: LD_INT 3
22940: PPUSH
22941: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22945: LD_STRING ACH_BASEDESTROYER
22947: PPUSH
22948: CALL_OW 543
// end ; m1 := false ;
22952: LD_ADDR_VAR 0 3
22956: PUSH
22957: LD_INT 0
22959: ST_TO_ADDR
// m2 := false ;
22960: LD_ADDR_VAR 0 4
22964: PUSH
22965: LD_INT 0
22967: ST_TO_ADDR
// m3 := false ;
22968: LD_ADDR_VAR 0 5
22972: PUSH
22973: LD_INT 0
22975: ST_TO_ADDR
// if crates + 100 > crates then
22976: LD_VAR 0 1
22980: PUSH
22981: LD_INT 100
22983: PLUS
22984: PUSH
22985: LD_VAR 0 1
22989: GREATER
22990: IFFALSE 23022
// begin AddMedal ( cans , 1 ) ;
22992: LD_STRING cans
22994: PPUSH
22995: LD_INT 1
22997: PPUSH
22998: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
23002: LD_INT 1
23004: PPUSH
23005: LD_STRING 06_crates_1
23007: PPUSH
23008: CALL_OW 39
// m1 := true ;
23012: LD_ADDR_VAR 0 3
23016: PUSH
23017: LD_INT 1
23019: ST_TO_ADDR
// end else
23020: GO 23043
// begin AddMedal ( cans , - 1 ) ;
23022: LD_STRING cans
23024: PPUSH
23025: LD_INT 1
23027: NEG
23028: PPUSH
23029: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
23033: LD_INT 0
23035: PPUSH
23036: LD_STRING 06_crates_1
23038: PPUSH
23039: CALL_OW 39
// end ; if unitLost < 3 then
23043: LD_EXP 30
23047: PUSH
23048: LD_INT 3
23050: LESS
23051: IFFALSE 23073
// begin AddMedal ( people , 1 ) ;
23053: LD_STRING people
23055: PPUSH
23056: LD_INT 1
23058: PPUSH
23059: CALL_OW 101
// m2 := true ;
23063: LD_ADDR_VAR 0 4
23067: PUSH
23068: LD_INT 1
23070: ST_TO_ADDR
// end else
23071: GO 23084
// begin AddMedal ( people , - 1 ) ;
23073: LD_STRING people
23075: PPUSH
23076: LD_INT 1
23078: NEG
23079: PPUSH
23080: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
23084: LD_EXP 28
23088: PPUSH
23089: LD_STRING 06_remoteVehs_1
23091: PPUSH
23092: CALL_OW 39
// if remoteVehiclesBuild = 1 then
23096: LD_EXP 28
23100: PUSH
23101: LD_INT 1
23103: EQUAL
23104: IFFALSE 23126
// begin AddMedal ( remote , 1 ) ;
23106: LD_STRING remote
23108: PPUSH
23109: LD_INT 1
23111: PPUSH
23112: CALL_OW 101
// m3 := true ;
23116: LD_ADDR_VAR 0 5
23120: PUSH
23121: LD_INT 1
23123: ST_TO_ADDR
// end else
23124: GO 23166
// begin if GetTech ( 18 , 1 ) = state_enabled then
23126: LD_INT 18
23128: PPUSH
23129: LD_INT 1
23131: PPUSH
23132: CALL_OW 321
23136: PUSH
23137: LD_INT 1
23139: EQUAL
23140: IFFALSE 23155
// begin AddMedal ( remote , - 1 ) ;
23142: LD_STRING remote
23144: PPUSH
23145: LD_INT 1
23147: NEG
23148: PPUSH
23149: CALL_OW 101
// end else
23153: GO 23166
// begin AddMedal ( remote , - 2 ) ;
23155: LD_STRING remote
23157: PPUSH
23158: LD_INT 2
23160: NEG
23161: PPUSH
23162: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
23166: LD_VAR 0 3
23170: PUSH
23171: LD_VAR 0 4
23175: AND
23176: PUSH
23177: LD_VAR 0 5
23181: AND
23182: IFFALSE 23198
// begin wait ( 3 ) ;
23184: LD_INT 3
23186: PPUSH
23187: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
23191: LD_STRING ACH_ASPEED_6
23193: PPUSH
23194: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
23198: LD_OWVAR 67
23202: PUSH
23203: LD_INT 3
23205: EQUAL
23206: PUSH
23207: LD_VAR 0 3
23211: AND
23212: PUSH
23213: LD_VAR 0 4
23217: AND
23218: PUSH
23219: LD_VAR 0 5
23223: AND
23224: IFFALSE 23236
// SetAchievementEX ( ACH_AMER , 6 ) ;
23226: LD_STRING ACH_AMER
23228: PPUSH
23229: LD_INT 6
23231: PPUSH
23232: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
23236: LD_EXP 20
23240: PPUSH
23241: LD_STRING 06_KurtStatus_1
23243: PPUSH
23244: CALL_OW 39
// GiveMedals ( Main ) ;
23248: LD_STRING Main
23250: PPUSH
23251: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
23255: LD_INT 22
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 21
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 50
23277: PUSH
23278: EMPTY
23279: LIST
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: LD_INT 25
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 25
23296: PUSH
23297: LD_INT 2
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 25
23306: PUSH
23307: LD_INT 3
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 25
23316: PUSH
23317: LD_INT 4
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: PPUSH
23337: CALL_OW 69
23341: PPUSH
23342: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23346: LD_EXP 1
23350: PPUSH
23351: LD_EXP 43
23355: PUSH
23356: LD_STRING JMM
23358: STR
23359: PPUSH
23360: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23364: LD_EXP 2
23368: PPUSH
23369: LD_EXP 43
23373: PUSH
23374: LD_STRING Lisa
23376: STR
23377: PPUSH
23378: CALL 6326 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23382: LD_EXP 3
23386: PPUSH
23387: LD_EXP 43
23391: PUSH
23392: LD_STRING Bobby
23394: STR
23395: PPUSH
23396: CALL 6326 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23400: LD_EXP 4
23404: PPUSH
23405: LD_EXP 43
23409: PUSH
23410: LD_STRING Cyrus
23412: STR
23413: PPUSH
23414: CALL 6326 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23418: LD_EXP 5
23422: PPUSH
23423: LD_EXP 43
23427: PUSH
23428: LD_STRING Frank
23430: STR
23431: PPUSH
23432: CALL 6326 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23436: LD_EXP 6
23440: PPUSH
23441: LD_EXP 43
23445: PUSH
23446: LD_STRING Brown
23448: STR
23449: PPUSH
23450: CALL 6326 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23454: LD_EXP 7
23458: PPUSH
23459: LD_EXP 43
23463: PUSH
23464: LD_STRING Donaldson
23466: STR
23467: PPUSH
23468: CALL 6326 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23472: LD_EXP 8
23476: PPUSH
23477: LD_EXP 43
23481: PUSH
23482: LD_STRING Gladstone
23484: STR
23485: PPUSH
23486: CALL 6326 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23490: LD_EXP 9
23494: PPUSH
23495: LD_EXP 43
23499: PUSH
23500: LD_STRING Denis
23502: STR
23503: PPUSH
23504: CALL 6326 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23508: LD_EXP 15
23512: PPUSH
23513: LD_EXP 43
23517: PUSH
23518: LD_STRING Joan
23520: STR
23521: PPUSH
23522: CALL 6326 0 2
// if IsLive ( Joan ) then
23526: LD_EXP 15
23530: PPUSH
23531: CALL_OW 300
23535: IFFALSE 23549
// SaveCharacters ( Joan , Joan ) ;
23537: LD_EXP 15
23541: PPUSH
23542: LD_STRING Joan
23544: PPUSH
23545: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23549: LD_EXP 16
23553: PPUSH
23554: LD_STRING 06_JoanStatus_1
23556: PPUSH
23557: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23561: LD_INT 50
23563: PUSH
23564: EMPTY
23565: LIST
23566: PUSH
23567: LD_INT 22
23569: PUSH
23570: LD_INT 1
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 21
23579: PUSH
23580: LD_INT 1
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 2
23589: PUSH
23590: LD_INT 25
23592: PUSH
23593: LD_INT 1
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 25
23602: PUSH
23603: LD_INT 2
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 25
23612: PUSH
23613: LD_INT 3
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 25
23622: PUSH
23623: LD_INT 4
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: PPUSH
23643: CALL_OW 69
23647: PUSH
23648: LD_EXP 1
23652: PUSH
23653: LD_EXP 2
23657: PUSH
23658: LD_EXP 3
23662: PUSH
23663: LD_EXP 4
23667: PUSH
23668: LD_EXP 5
23672: PUSH
23673: LD_EXP 6
23677: PUSH
23678: LD_EXP 7
23682: PUSH
23683: LD_EXP 8
23687: PUSH
23688: LD_EXP 9
23692: PUSH
23693: LD_EXP 15
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: DIFF
23710: PPUSH
23711: LD_STRING 06_other_survivors
23713: PPUSH
23714: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23718: LD_INT 50
23720: PUSH
23721: EMPTY
23722: LIST
23723: PUSH
23724: LD_INT 22
23726: PUSH
23727: LD_INT 1
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 21
23736: PUSH
23737: LD_INT 1
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 2
23746: PUSH
23747: LD_INT 25
23749: PUSH
23750: LD_INT 12
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 25
23759: PUSH
23760: LD_INT 16
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: LIST
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: PPUSH
23778: CALL_OW 69
23782: PPUSH
23783: LD_STRING 06_other_apemans
23785: PPUSH
23786: CALL_OW 38
// YouWin ;
23790: CALL_OW 103
// end ; end_of_file
23794: LD_VAR 0 2
23798: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23799: LD_EXP 39
23803: PUSH
23804: LD_INT 3
23806: EQUAL
23807: IFFALSE 23898
23809: GO 23811
23811: DISABLE
// begin enable ;
23812: ENABLE
// sendedConvoys = 0 ;
23813: LD_ADDR_EXP 39
23817: PUSH
23818: LD_INT 0
23820: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23821: LD_INT 6
23823: PPUSH
23824: LD_INT 3
23826: PPUSH
23827: LD_INT 3
23829: PUSH
23830: LD_INT 4
23832: PUSH
23833: LD_INT 6
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: LIST
23840: PUSH
23841: LD_OWVAR 67
23845: ARRAY
23846: PPUSH
23847: LD_INT 0
23849: PPUSH
23850: LD_INT 0
23852: PPUSH
23853: LD_INT 0
23855: PPUSH
23856: LD_INT 0
23858: PPUSH
23859: LD_EXP 34
23863: PPUSH
23864: LD_EXP 35
23868: PPUSH
23869: CALL_OW 12
23873: PPUSH
23874: LD_INT 16
23876: PPUSH
23877: LD_INT 15
23879: PPUSH
23880: LD_INT 1
23882: PPUSH
23883: LD_INT 1
23885: PPUSH
23886: LD_INT 2
23888: PPUSH
23889: CALL_OW 12
23893: PPUSH
23894: CALL 10745 0 12
// end ; end_of_file
23898: END
// export function CreateNature ; var i , un ; begin
23899: LD_INT 0
23901: PPUSH
23902: PPUSH
23903: PPUSH
// for i = 1 to Difficulty + 2 do
23904: LD_ADDR_VAR 0 2
23908: PUSH
23909: DOUBLE
23910: LD_INT 1
23912: DEC
23913: ST_TO_ADDR
23914: LD_OWVAR 67
23918: PUSH
23919: LD_INT 2
23921: PLUS
23922: PUSH
23923: FOR_TO
23924: IFFALSE 24033
// begin hc_sex = sex_male ;
23926: LD_ADDR_OWVAR 27
23930: PUSH
23931: LD_INT 1
23933: ST_TO_ADDR
// uc_side = 0 ;
23934: LD_ADDR_OWVAR 20
23938: PUSH
23939: LD_INT 0
23941: ST_TO_ADDR
// uc_nation = nation_nature ;
23942: LD_ADDR_OWVAR 21
23946: PUSH
23947: LD_INT 0
23949: ST_TO_ADDR
// hc_class = class_tiger ;
23950: LD_ADDR_OWVAR 28
23954: PUSH
23955: LD_INT 14
23957: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23958: LD_ADDR_OWVAR 31
23962: PUSH
23963: LD_EXP 35
23967: PUSH
23968: LD_INT 0
23970: PUSH
23971: LD_INT 0
23973: PUSH
23974: LD_INT 0
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23983: LD_ADDR_OWVAR 35
23987: PUSH
23988: LD_INT 5
23990: NEG
23991: PPUSH
23992: LD_INT 5
23994: PPUSH
23995: CALL_OW 12
23999: PUSH
24000: LD_OWVAR 67
24004: MUL
24005: ST_TO_ADDR
// un = CreateHuman ;
24006: LD_ADDR_VAR 0 3
24010: PUSH
24011: CALL_OW 44
24015: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24016: LD_VAR 0 3
24020: PPUSH
24021: LD_INT 18
24023: PPUSH
24024: LD_INT 0
24026: PPUSH
24027: CALL_OW 49
// end ;
24031: GO 23923
24033: POP
24034: POP
// for i = 1 to rand ( 3 , 4 ) do
24035: LD_ADDR_VAR 0 2
24039: PUSH
24040: DOUBLE
24041: LD_INT 1
24043: DEC
24044: ST_TO_ADDR
24045: LD_INT 3
24047: PPUSH
24048: LD_INT 4
24050: PPUSH
24051: CALL_OW 12
24055: PUSH
24056: FOR_TO
24057: IFFALSE 24151
// begin hc_sex = sex_male ;
24059: LD_ADDR_OWVAR 27
24063: PUSH
24064: LD_INT 1
24066: ST_TO_ADDR
// uc_side = 0 ;
24067: LD_ADDR_OWVAR 20
24071: PUSH
24072: LD_INT 0
24074: ST_TO_ADDR
// uc_nation = nation_nature ;
24075: LD_ADDR_OWVAR 21
24079: PUSH
24080: LD_INT 0
24082: ST_TO_ADDR
// hc_class = 18 ;
24083: LD_ADDR_OWVAR 28
24087: PUSH
24088: LD_INT 18
24090: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24091: LD_ADDR_OWVAR 31
24095: PUSH
24096: LD_EXP 35
24100: PUSH
24101: LD_INT 0
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: LD_INT 0
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: ST_TO_ADDR
// hc_agressivity = 0 ;
24116: LD_ADDR_OWVAR 35
24120: PUSH
24121: LD_INT 0
24123: ST_TO_ADDR
// un = CreateHuman ;
24124: LD_ADDR_VAR 0 3
24128: PUSH
24129: CALL_OW 44
24133: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24134: LD_VAR 0 3
24138: PPUSH
24139: LD_INT 18
24141: PPUSH
24142: LD_INT 0
24144: PPUSH
24145: CALL_OW 49
// end ;
24149: GO 24056
24151: POP
24152: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
24153: LD_ADDR_VAR 0 2
24157: PUSH
24158: DOUBLE
24159: LD_INT 1
24161: DEC
24162: ST_TO_ADDR
24163: LD_INT 1
24165: PPUSH
24166: LD_INT 3
24168: PPUSH
24169: CALL_OW 12
24173: PUSH
24174: LD_OWVAR 67
24178: PLUS
24179: PUSH
24180: FOR_TO
24181: IFFALSE 24330
// begin hc_sex = sex_male ;
24183: LD_ADDR_OWVAR 27
24187: PUSH
24188: LD_INT 1
24190: ST_TO_ADDR
// uc_side = 0 ;
24191: LD_ADDR_OWVAR 20
24195: PUSH
24196: LD_INT 0
24198: ST_TO_ADDR
// uc_nation = nation_nature ;
24199: LD_ADDR_OWVAR 21
24203: PUSH
24204: LD_INT 0
24206: ST_TO_ADDR
// hc_class = class_apeman ;
24207: LD_ADDR_OWVAR 28
24211: PUSH
24212: LD_INT 12
24214: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24215: LD_ADDR_OWVAR 31
24219: PUSH
24220: LD_INT 2
24222: PPUSH
24223: LD_INT 5
24225: PPUSH
24226: CALL_OW 12
24230: PUSH
24231: LD_INT 0
24233: PPUSH
24234: LD_INT 2
24236: PPUSH
24237: CALL_OW 12
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: LD_INT 0
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
24254: LD_ADDR_OWVAR 35
24258: PUSH
24259: LD_INT 20
24261: PPUSH
24262: LD_INT 30
24264: PPUSH
24265: CALL_OW 12
24269: PUSH
24270: LD_INT 30
24272: PPUSH
24273: LD_INT 40
24275: PPUSH
24276: CALL_OW 12
24280: PUSH
24281: LD_INT 40
24283: PPUSH
24284: LD_INT 50
24286: PPUSH
24287: CALL_OW 12
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: LIST
24296: PUSH
24297: LD_OWVAR 67
24301: ARRAY
24302: ST_TO_ADDR
// un = CreateHuman ;
24303: LD_ADDR_VAR 0 3
24307: PUSH
24308: CALL_OW 44
24312: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
24313: LD_VAR 0 3
24317: PPUSH
24318: LD_INT 19
24320: PPUSH
24321: LD_INT 0
24323: PPUSH
24324: CALL_OW 49
// end ;
24328: GO 24180
24330: POP
24331: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
24332: LD_ADDR_VAR 0 2
24336: PUSH
24337: DOUBLE
24338: LD_INT 1
24340: DEC
24341: ST_TO_ADDR
24342: LD_INT 5
24344: PPUSH
24345: LD_INT 6
24347: PPUSH
24348: CALL_OW 12
24352: PUSH
24353: LD_OWVAR 67
24357: PLUS
24358: PUSH
24359: FOR_TO
24360: IFFALSE 24468
// begin hc_sex = sex_male ;
24362: LD_ADDR_OWVAR 27
24366: PUSH
24367: LD_INT 1
24369: ST_TO_ADDR
// uc_side = 0 ;
24370: LD_ADDR_OWVAR 20
24374: PUSH
24375: LD_INT 0
24377: ST_TO_ADDR
// uc_nation = nation_nature ;
24378: LD_ADDR_OWVAR 21
24382: PUSH
24383: LD_INT 0
24385: ST_TO_ADDR
// hc_class = class_apeman ;
24386: LD_ADDR_OWVAR 28
24390: PUSH
24391: LD_INT 12
24393: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24394: LD_ADDR_OWVAR 31
24398: PUSH
24399: LD_INT 2
24401: PPUSH
24402: LD_INT 5
24404: PPUSH
24405: CALL_OW 12
24409: PUSH
24410: LD_INT 0
24412: PPUSH
24413: LD_INT 2
24415: PPUSH
24416: CALL_OW 12
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: LD_INT 0
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: ST_TO_ADDR
// hc_agressivity = 0 ;
24433: LD_ADDR_OWVAR 35
24437: PUSH
24438: LD_INT 0
24440: ST_TO_ADDR
// un = CreateHuman ;
24441: LD_ADDR_VAR 0 3
24445: PUSH
24446: CALL_OW 44
24450: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24451: LD_VAR 0 3
24455: PPUSH
24456: LD_INT 20
24458: PPUSH
24459: LD_INT 0
24461: PPUSH
24462: CALL_OW 49
// end ;
24466: GO 24359
24468: POP
24469: POP
// end ; end_of_file end_of_file
24470: LD_VAR 0 1
24474: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
24475: LD_INT 0
24477: PPUSH
// ar_crane := 88 ;
24478: LD_ADDR_EXP 57
24482: PUSH
24483: LD_INT 88
24485: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24486: LD_ADDR_EXP 52
24490: PUSH
24491: LD_INT 89
24493: ST_TO_ADDR
// us_hack := 99 ;
24494: LD_ADDR_EXP 53
24498: PUSH
24499: LD_INT 99
24501: ST_TO_ADDR
// us_artillery := 97 ;
24502: LD_ADDR_EXP 54
24506: PUSH
24507: LD_INT 97
24509: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24510: LD_ADDR_EXP 55
24514: PUSH
24515: LD_INT 91
24517: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
24518: LD_ADDR_EXP 56
24522: PUSH
24523: LD_INT 92
24525: ST_TO_ADDR
// ru_radar := 98 ;
24526: LD_ADDR_EXP 51
24530: PUSH
24531: LD_INT 98
24533: ST_TO_ADDR
// tech_Artillery := 80 ;
24534: LD_ADDR_EXP 58
24538: PUSH
24539: LD_INT 80
24541: ST_TO_ADDR
// tech_RadMat := 81 ;
24542: LD_ADDR_EXP 59
24546: PUSH
24547: LD_INT 81
24549: ST_TO_ADDR
// tech_BasicTools := 82 ;
24550: LD_ADDR_EXP 60
24554: PUSH
24555: LD_INT 82
24557: ST_TO_ADDR
// tech_Cargo := 83 ;
24558: LD_ADDR_EXP 61
24562: PUSH
24563: LD_INT 83
24565: ST_TO_ADDR
// tech_Track := 84 ;
24566: LD_ADDR_EXP 62
24570: PUSH
24571: LD_INT 84
24573: ST_TO_ADDR
// tech_Crane := 85 ;
24574: LD_ADDR_EXP 63
24578: PUSH
24579: LD_INT 85
24581: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24582: LD_ADDR_EXP 64
24586: PUSH
24587: LD_INT 86
24589: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24590: LD_ADDR_EXP 65
24594: PUSH
24595: LD_INT 87
24597: ST_TO_ADDR
// end ;
24598: LD_VAR 0 1
24602: RET
// every 1 do
24603: GO 24605
24605: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
24606: CALL 24475 0 0
24610: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
24611: LD_VAR 0 2
24615: PUSH
24616: LD_INT 100
24618: EQUAL
24619: IFFALSE 25568
// begin if not StreamModeActive then
24621: LD_EXP 66
24625: NOT
24626: IFFALSE 24636
// StreamModeActive := true ;
24628: LD_ADDR_EXP 66
24632: PUSH
24633: LD_INT 1
24635: ST_TO_ADDR
// if p3 = 0 then
24636: LD_VAR 0 3
24640: PUSH
24641: LD_INT 0
24643: EQUAL
24644: IFFALSE 24650
// InitStreamMode ;
24646: CALL 25801 0 0
// if p3 = 1 then
24650: LD_VAR 0 3
24654: PUSH
24655: LD_INT 1
24657: EQUAL
24658: IFFALSE 24668
// sRocket := true ;
24660: LD_ADDR_EXP 71
24664: PUSH
24665: LD_INT 1
24667: ST_TO_ADDR
// if p3 = 2 then
24668: LD_VAR 0 3
24672: PUSH
24673: LD_INT 2
24675: EQUAL
24676: IFFALSE 24686
// sSpeed := true ;
24678: LD_ADDR_EXP 70
24682: PUSH
24683: LD_INT 1
24685: ST_TO_ADDR
// if p3 = 3 then
24686: LD_VAR 0 3
24690: PUSH
24691: LD_INT 3
24693: EQUAL
24694: IFFALSE 24704
// sEngine := true ;
24696: LD_ADDR_EXP 72
24700: PUSH
24701: LD_INT 1
24703: ST_TO_ADDR
// if p3 = 4 then
24704: LD_VAR 0 3
24708: PUSH
24709: LD_INT 4
24711: EQUAL
24712: IFFALSE 24722
// sSpec := true ;
24714: LD_ADDR_EXP 69
24718: PUSH
24719: LD_INT 1
24721: ST_TO_ADDR
// if p3 = 5 then
24722: LD_VAR 0 3
24726: PUSH
24727: LD_INT 5
24729: EQUAL
24730: IFFALSE 24740
// sLevel := true ;
24732: LD_ADDR_EXP 73
24736: PUSH
24737: LD_INT 1
24739: ST_TO_ADDR
// if p3 = 6 then
24740: LD_VAR 0 3
24744: PUSH
24745: LD_INT 6
24747: EQUAL
24748: IFFALSE 24758
// sArmoury := true ;
24750: LD_ADDR_EXP 74
24754: PUSH
24755: LD_INT 1
24757: ST_TO_ADDR
// if p3 = 7 then
24758: LD_VAR 0 3
24762: PUSH
24763: LD_INT 7
24765: EQUAL
24766: IFFALSE 24776
// sRadar := true ;
24768: LD_ADDR_EXP 75
24772: PUSH
24773: LD_INT 1
24775: ST_TO_ADDR
// if p3 = 8 then
24776: LD_VAR 0 3
24780: PUSH
24781: LD_INT 8
24783: EQUAL
24784: IFFALSE 24794
// sBunker := true ;
24786: LD_ADDR_EXP 76
24790: PUSH
24791: LD_INT 1
24793: ST_TO_ADDR
// if p3 = 9 then
24794: LD_VAR 0 3
24798: PUSH
24799: LD_INT 9
24801: EQUAL
24802: IFFALSE 24812
// sHack := true ;
24804: LD_ADDR_EXP 77
24808: PUSH
24809: LD_INT 1
24811: ST_TO_ADDR
// if p3 = 10 then
24812: LD_VAR 0 3
24816: PUSH
24817: LD_INT 10
24819: EQUAL
24820: IFFALSE 24830
// sFire := true ;
24822: LD_ADDR_EXP 78
24826: PUSH
24827: LD_INT 1
24829: ST_TO_ADDR
// if p3 = 11 then
24830: LD_VAR 0 3
24834: PUSH
24835: LD_INT 11
24837: EQUAL
24838: IFFALSE 24848
// sRefresh := true ;
24840: LD_ADDR_EXP 79
24844: PUSH
24845: LD_INT 1
24847: ST_TO_ADDR
// if p3 = 12 then
24848: LD_VAR 0 3
24852: PUSH
24853: LD_INT 12
24855: EQUAL
24856: IFFALSE 24866
// sExp := true ;
24858: LD_ADDR_EXP 80
24862: PUSH
24863: LD_INT 1
24865: ST_TO_ADDR
// if p3 = 13 then
24866: LD_VAR 0 3
24870: PUSH
24871: LD_INT 13
24873: EQUAL
24874: IFFALSE 24884
// sDepot := true ;
24876: LD_ADDR_EXP 81
24880: PUSH
24881: LD_INT 1
24883: ST_TO_ADDR
// if p3 = 14 then
24884: LD_VAR 0 3
24888: PUSH
24889: LD_INT 14
24891: EQUAL
24892: IFFALSE 24902
// sFlag := true ;
24894: LD_ADDR_EXP 82
24898: PUSH
24899: LD_INT 1
24901: ST_TO_ADDR
// if p3 = 15 then
24902: LD_VAR 0 3
24906: PUSH
24907: LD_INT 15
24909: EQUAL
24910: IFFALSE 24920
// sKamikadze := true ;
24912: LD_ADDR_EXP 90
24916: PUSH
24917: LD_INT 1
24919: ST_TO_ADDR
// if p3 = 16 then
24920: LD_VAR 0 3
24924: PUSH
24925: LD_INT 16
24927: EQUAL
24928: IFFALSE 24938
// sTroll := true ;
24930: LD_ADDR_EXP 91
24934: PUSH
24935: LD_INT 1
24937: ST_TO_ADDR
// if p3 = 17 then
24938: LD_VAR 0 3
24942: PUSH
24943: LD_INT 17
24945: EQUAL
24946: IFFALSE 24956
// sSlow := true ;
24948: LD_ADDR_EXP 92
24952: PUSH
24953: LD_INT 1
24955: ST_TO_ADDR
// if p3 = 18 then
24956: LD_VAR 0 3
24960: PUSH
24961: LD_INT 18
24963: EQUAL
24964: IFFALSE 24974
// sLack := true ;
24966: LD_ADDR_EXP 93
24970: PUSH
24971: LD_INT 1
24973: ST_TO_ADDR
// if p3 = 19 then
24974: LD_VAR 0 3
24978: PUSH
24979: LD_INT 19
24981: EQUAL
24982: IFFALSE 24992
// sTank := true ;
24984: LD_ADDR_EXP 95
24988: PUSH
24989: LD_INT 1
24991: ST_TO_ADDR
// if p3 = 20 then
24992: LD_VAR 0 3
24996: PUSH
24997: LD_INT 20
24999: EQUAL
25000: IFFALSE 25010
// sRemote := true ;
25002: LD_ADDR_EXP 96
25006: PUSH
25007: LD_INT 1
25009: ST_TO_ADDR
// if p3 = 21 then
25010: LD_VAR 0 3
25014: PUSH
25015: LD_INT 21
25017: EQUAL
25018: IFFALSE 25028
// sPowell := true ;
25020: LD_ADDR_EXP 97
25024: PUSH
25025: LD_INT 1
25027: ST_TO_ADDR
// if p3 = 22 then
25028: LD_VAR 0 3
25032: PUSH
25033: LD_INT 22
25035: EQUAL
25036: IFFALSE 25046
// sTeleport := true ;
25038: LD_ADDR_EXP 100
25042: PUSH
25043: LD_INT 1
25045: ST_TO_ADDR
// if p3 = 23 then
25046: LD_VAR 0 3
25050: PUSH
25051: LD_INT 23
25053: EQUAL
25054: IFFALSE 25064
// sOilTower := true ;
25056: LD_ADDR_EXP 102
25060: PUSH
25061: LD_INT 1
25063: ST_TO_ADDR
// if p3 = 24 then
25064: LD_VAR 0 3
25068: PUSH
25069: LD_INT 24
25071: EQUAL
25072: IFFALSE 25082
// sShovel := true ;
25074: LD_ADDR_EXP 103
25078: PUSH
25079: LD_INT 1
25081: ST_TO_ADDR
// if p3 = 25 then
25082: LD_VAR 0 3
25086: PUSH
25087: LD_INT 25
25089: EQUAL
25090: IFFALSE 25100
// sSheik := true ;
25092: LD_ADDR_EXP 104
25096: PUSH
25097: LD_INT 1
25099: ST_TO_ADDR
// if p3 = 26 then
25100: LD_VAR 0 3
25104: PUSH
25105: LD_INT 26
25107: EQUAL
25108: IFFALSE 25118
// sEarthquake := true ;
25110: LD_ADDR_EXP 106
25114: PUSH
25115: LD_INT 1
25117: ST_TO_ADDR
// if p3 = 27 then
25118: LD_VAR 0 3
25122: PUSH
25123: LD_INT 27
25125: EQUAL
25126: IFFALSE 25136
// sAI := true ;
25128: LD_ADDR_EXP 107
25132: PUSH
25133: LD_INT 1
25135: ST_TO_ADDR
// if p3 = 28 then
25136: LD_VAR 0 3
25140: PUSH
25141: LD_INT 28
25143: EQUAL
25144: IFFALSE 25154
// sCargo := true ;
25146: LD_ADDR_EXP 110
25150: PUSH
25151: LD_INT 1
25153: ST_TO_ADDR
// if p3 = 29 then
25154: LD_VAR 0 3
25158: PUSH
25159: LD_INT 29
25161: EQUAL
25162: IFFALSE 25172
// sDLaser := true ;
25164: LD_ADDR_EXP 111
25168: PUSH
25169: LD_INT 1
25171: ST_TO_ADDR
// if p3 = 30 then
25172: LD_VAR 0 3
25176: PUSH
25177: LD_INT 30
25179: EQUAL
25180: IFFALSE 25190
// sExchange := true ;
25182: LD_ADDR_EXP 112
25186: PUSH
25187: LD_INT 1
25189: ST_TO_ADDR
// if p3 = 31 then
25190: LD_VAR 0 3
25194: PUSH
25195: LD_INT 31
25197: EQUAL
25198: IFFALSE 25208
// sFac := true ;
25200: LD_ADDR_EXP 113
25204: PUSH
25205: LD_INT 1
25207: ST_TO_ADDR
// if p3 = 32 then
25208: LD_VAR 0 3
25212: PUSH
25213: LD_INT 32
25215: EQUAL
25216: IFFALSE 25226
// sPower := true ;
25218: LD_ADDR_EXP 114
25222: PUSH
25223: LD_INT 1
25225: ST_TO_ADDR
// if p3 = 33 then
25226: LD_VAR 0 3
25230: PUSH
25231: LD_INT 33
25233: EQUAL
25234: IFFALSE 25244
// sRandom := true ;
25236: LD_ADDR_EXP 115
25240: PUSH
25241: LD_INT 1
25243: ST_TO_ADDR
// if p3 = 34 then
25244: LD_VAR 0 3
25248: PUSH
25249: LD_INT 34
25251: EQUAL
25252: IFFALSE 25262
// sShield := true ;
25254: LD_ADDR_EXP 116
25258: PUSH
25259: LD_INT 1
25261: ST_TO_ADDR
// if p3 = 35 then
25262: LD_VAR 0 3
25266: PUSH
25267: LD_INT 35
25269: EQUAL
25270: IFFALSE 25280
// sTime := true ;
25272: LD_ADDR_EXP 117
25276: PUSH
25277: LD_INT 1
25279: ST_TO_ADDR
// if p3 = 36 then
25280: LD_VAR 0 3
25284: PUSH
25285: LD_INT 36
25287: EQUAL
25288: IFFALSE 25298
// sTools := true ;
25290: LD_ADDR_EXP 118
25294: PUSH
25295: LD_INT 1
25297: ST_TO_ADDR
// if p3 = 101 then
25298: LD_VAR 0 3
25302: PUSH
25303: LD_INT 101
25305: EQUAL
25306: IFFALSE 25316
// sSold := true ;
25308: LD_ADDR_EXP 83
25312: PUSH
25313: LD_INT 1
25315: ST_TO_ADDR
// if p3 = 102 then
25316: LD_VAR 0 3
25320: PUSH
25321: LD_INT 102
25323: EQUAL
25324: IFFALSE 25334
// sDiff := true ;
25326: LD_ADDR_EXP 84
25330: PUSH
25331: LD_INT 1
25333: ST_TO_ADDR
// if p3 = 103 then
25334: LD_VAR 0 3
25338: PUSH
25339: LD_INT 103
25341: EQUAL
25342: IFFALSE 25352
// sFog := true ;
25344: LD_ADDR_EXP 87
25348: PUSH
25349: LD_INT 1
25351: ST_TO_ADDR
// if p3 = 104 then
25352: LD_VAR 0 3
25356: PUSH
25357: LD_INT 104
25359: EQUAL
25360: IFFALSE 25370
// sReset := true ;
25362: LD_ADDR_EXP 88
25366: PUSH
25367: LD_INT 1
25369: ST_TO_ADDR
// if p3 = 105 then
25370: LD_VAR 0 3
25374: PUSH
25375: LD_INT 105
25377: EQUAL
25378: IFFALSE 25388
// sSun := true ;
25380: LD_ADDR_EXP 89
25384: PUSH
25385: LD_INT 1
25387: ST_TO_ADDR
// if p3 = 106 then
25388: LD_VAR 0 3
25392: PUSH
25393: LD_INT 106
25395: EQUAL
25396: IFFALSE 25406
// sTiger := true ;
25398: LD_ADDR_EXP 85
25402: PUSH
25403: LD_INT 1
25405: ST_TO_ADDR
// if p3 = 107 then
25406: LD_VAR 0 3
25410: PUSH
25411: LD_INT 107
25413: EQUAL
25414: IFFALSE 25424
// sBomb := true ;
25416: LD_ADDR_EXP 86
25420: PUSH
25421: LD_INT 1
25423: ST_TO_ADDR
// if p3 = 108 then
25424: LD_VAR 0 3
25428: PUSH
25429: LD_INT 108
25431: EQUAL
25432: IFFALSE 25442
// sWound := true ;
25434: LD_ADDR_EXP 94
25438: PUSH
25439: LD_INT 1
25441: ST_TO_ADDR
// if p3 = 109 then
25442: LD_VAR 0 3
25446: PUSH
25447: LD_INT 109
25449: EQUAL
25450: IFFALSE 25460
// sBetray := true ;
25452: LD_ADDR_EXP 98
25456: PUSH
25457: LD_INT 1
25459: ST_TO_ADDR
// if p3 = 110 then
25460: LD_VAR 0 3
25464: PUSH
25465: LD_INT 110
25467: EQUAL
25468: IFFALSE 25478
// sContamin := true ;
25470: LD_ADDR_EXP 99
25474: PUSH
25475: LD_INT 1
25477: ST_TO_ADDR
// if p3 = 111 then
25478: LD_VAR 0 3
25482: PUSH
25483: LD_INT 111
25485: EQUAL
25486: IFFALSE 25496
// sOil := true ;
25488: LD_ADDR_EXP 101
25492: PUSH
25493: LD_INT 1
25495: ST_TO_ADDR
// if p3 = 112 then
25496: LD_VAR 0 3
25500: PUSH
25501: LD_INT 112
25503: EQUAL
25504: IFFALSE 25514
// sStu := true ;
25506: LD_ADDR_EXP 105
25510: PUSH
25511: LD_INT 1
25513: ST_TO_ADDR
// if p3 = 113 then
25514: LD_VAR 0 3
25518: PUSH
25519: LD_INT 113
25521: EQUAL
25522: IFFALSE 25532
// sBazooka := true ;
25524: LD_ADDR_EXP 108
25528: PUSH
25529: LD_INT 1
25531: ST_TO_ADDR
// if p3 = 114 then
25532: LD_VAR 0 3
25536: PUSH
25537: LD_INT 114
25539: EQUAL
25540: IFFALSE 25550
// sMortar := true ;
25542: LD_ADDR_EXP 109
25546: PUSH
25547: LD_INT 1
25549: ST_TO_ADDR
// if p3 = 115 then
25550: LD_VAR 0 3
25554: PUSH
25555: LD_INT 115
25557: EQUAL
25558: IFFALSE 25568
// sRanger := true ;
25560: LD_ADDR_EXP 119
25564: PUSH
25565: LD_INT 1
25567: ST_TO_ADDR
// end ; if p2 = 101 then
25568: LD_VAR 0 2
25572: PUSH
25573: LD_INT 101
25575: EQUAL
25576: IFFALSE 25779
// begin case p3 of 1 :
25578: LD_VAR 0 3
25582: PUSH
25583: LD_INT 1
25585: DOUBLE
25586: EQUAL
25587: IFTRUE 25591
25589: GO 25598
25591: POP
// hHackUnlimitedResources ; 2 :
25592: CALL 35873 0 0
25596: GO 25779
25598: LD_INT 2
25600: DOUBLE
25601: EQUAL
25602: IFTRUE 25606
25604: GO 25613
25606: POP
// hHackSetLevel10 ; 3 :
25607: CALL 36006 0 0
25611: GO 25779
25613: LD_INT 3
25615: DOUBLE
25616: EQUAL
25617: IFTRUE 25621
25619: GO 25628
25621: POP
// hHackSetLevel10YourUnits ; 4 :
25622: CALL 36091 0 0
25626: GO 25779
25628: LD_INT 4
25630: DOUBLE
25631: EQUAL
25632: IFTRUE 25636
25634: GO 25658
25636: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
25637: LD_VAR 0 4
25641: PPUSH
25642: LD_VAR 0 5
25646: PPUSH
25647: LD_VAR 0 6
25651: PPUSH
25652: CALL 36181 0 3
25656: GO 25779
25658: LD_INT 5
25660: DOUBLE
25661: EQUAL
25662: IFTRUE 25666
25664: GO 25673
25666: POP
// hHackSpawnVehicle ; 6 :
25667: CALL 36242 0 0
25671: GO 25779
25673: LD_INT 6
25675: DOUBLE
25676: EQUAL
25677: IFTRUE 25681
25679: GO 25688
25681: POP
// hHackInvincible ; 7 :
25682: CALL 36788 0 0
25686: GO 25779
25688: LD_INT 7
25690: DOUBLE
25691: EQUAL
25692: IFTRUE 25696
25694: GO 25703
25696: POP
// hHackInvisible ; 8 :
25697: CALL 36899 0 0
25701: GO 25779
25703: LD_INT 8
25705: DOUBLE
25706: EQUAL
25707: IFTRUE 25711
25709: GO 25718
25711: POP
// hHackChangeYourSide ; 9 :
25712: CALL 36956 0 0
25716: GO 25779
25718: LD_INT 9
25720: DOUBLE
25721: EQUAL
25722: IFTRUE 25726
25724: GO 25733
25726: POP
// hHackChangeUnitSide ; 10 :
25727: CALL 36998 0 0
25731: GO 25779
25733: LD_INT 10
25735: DOUBLE
25736: EQUAL
25737: IFTRUE 25741
25739: GO 25748
25741: POP
// hHackFog ; 11 :
25742: CALL 37099 0 0
25746: GO 25779
25748: LD_INT 11
25750: DOUBLE
25751: EQUAL
25752: IFTRUE 25756
25754: GO 25763
25756: POP
// hHackApeman ; 12 :
25757: CALL 37114 0 0
25761: GO 25779
25763: LD_INT 12
25765: DOUBLE
25766: EQUAL
25767: IFTRUE 25771
25769: GO 25778
25771: POP
// hHackBoom ; end ;
25772: CALL 37199 0 0
25776: GO 25779
25778: POP
// end ; end ;
25779: PPOPN 6
25781: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
25782: GO 25784
25784: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
25785: LD_STRING initStreamRollete();
25787: PPUSH
25788: CALL_OW 559
// InitStreamMode ;
25792: CALL 25801 0 0
// DefineStreamItems ( ) ;
25796: CALL 26241 0 0
// end ;
25800: END
// function InitStreamMode ; begin
25801: LD_INT 0
25803: PPUSH
// streamModeActive := false ;
25804: LD_ADDR_EXP 66
25808: PUSH
25809: LD_INT 0
25811: ST_TO_ADDR
// normalCounter := 36 ;
25812: LD_ADDR_EXP 67
25816: PUSH
25817: LD_INT 36
25819: ST_TO_ADDR
// hardcoreCounter := 16 ;
25820: LD_ADDR_EXP 68
25824: PUSH
25825: LD_INT 16
25827: ST_TO_ADDR
// sRocket := false ;
25828: LD_ADDR_EXP 71
25832: PUSH
25833: LD_INT 0
25835: ST_TO_ADDR
// sSpeed := false ;
25836: LD_ADDR_EXP 70
25840: PUSH
25841: LD_INT 0
25843: ST_TO_ADDR
// sEngine := false ;
25844: LD_ADDR_EXP 72
25848: PUSH
25849: LD_INT 0
25851: ST_TO_ADDR
// sSpec := false ;
25852: LD_ADDR_EXP 69
25856: PUSH
25857: LD_INT 0
25859: ST_TO_ADDR
// sLevel := false ;
25860: LD_ADDR_EXP 73
25864: PUSH
25865: LD_INT 0
25867: ST_TO_ADDR
// sArmoury := false ;
25868: LD_ADDR_EXP 74
25872: PUSH
25873: LD_INT 0
25875: ST_TO_ADDR
// sRadar := false ;
25876: LD_ADDR_EXP 75
25880: PUSH
25881: LD_INT 0
25883: ST_TO_ADDR
// sBunker := false ;
25884: LD_ADDR_EXP 76
25888: PUSH
25889: LD_INT 0
25891: ST_TO_ADDR
// sHack := false ;
25892: LD_ADDR_EXP 77
25896: PUSH
25897: LD_INT 0
25899: ST_TO_ADDR
// sFire := false ;
25900: LD_ADDR_EXP 78
25904: PUSH
25905: LD_INT 0
25907: ST_TO_ADDR
// sRefresh := false ;
25908: LD_ADDR_EXP 79
25912: PUSH
25913: LD_INT 0
25915: ST_TO_ADDR
// sExp := false ;
25916: LD_ADDR_EXP 80
25920: PUSH
25921: LD_INT 0
25923: ST_TO_ADDR
// sDepot := false ;
25924: LD_ADDR_EXP 81
25928: PUSH
25929: LD_INT 0
25931: ST_TO_ADDR
// sFlag := false ;
25932: LD_ADDR_EXP 82
25936: PUSH
25937: LD_INT 0
25939: ST_TO_ADDR
// sKamikadze := false ;
25940: LD_ADDR_EXP 90
25944: PUSH
25945: LD_INT 0
25947: ST_TO_ADDR
// sTroll := false ;
25948: LD_ADDR_EXP 91
25952: PUSH
25953: LD_INT 0
25955: ST_TO_ADDR
// sSlow := false ;
25956: LD_ADDR_EXP 92
25960: PUSH
25961: LD_INT 0
25963: ST_TO_ADDR
// sLack := false ;
25964: LD_ADDR_EXP 93
25968: PUSH
25969: LD_INT 0
25971: ST_TO_ADDR
// sTank := false ;
25972: LD_ADDR_EXP 95
25976: PUSH
25977: LD_INT 0
25979: ST_TO_ADDR
// sRemote := false ;
25980: LD_ADDR_EXP 96
25984: PUSH
25985: LD_INT 0
25987: ST_TO_ADDR
// sPowell := false ;
25988: LD_ADDR_EXP 97
25992: PUSH
25993: LD_INT 0
25995: ST_TO_ADDR
// sTeleport := false ;
25996: LD_ADDR_EXP 100
26000: PUSH
26001: LD_INT 0
26003: ST_TO_ADDR
// sOilTower := false ;
26004: LD_ADDR_EXP 102
26008: PUSH
26009: LD_INT 0
26011: ST_TO_ADDR
// sShovel := false ;
26012: LD_ADDR_EXP 103
26016: PUSH
26017: LD_INT 0
26019: ST_TO_ADDR
// sSheik := false ;
26020: LD_ADDR_EXP 104
26024: PUSH
26025: LD_INT 0
26027: ST_TO_ADDR
// sEarthquake := false ;
26028: LD_ADDR_EXP 106
26032: PUSH
26033: LD_INT 0
26035: ST_TO_ADDR
// sAI := false ;
26036: LD_ADDR_EXP 107
26040: PUSH
26041: LD_INT 0
26043: ST_TO_ADDR
// sCargo := false ;
26044: LD_ADDR_EXP 110
26048: PUSH
26049: LD_INT 0
26051: ST_TO_ADDR
// sDLaser := false ;
26052: LD_ADDR_EXP 111
26056: PUSH
26057: LD_INT 0
26059: ST_TO_ADDR
// sExchange := false ;
26060: LD_ADDR_EXP 112
26064: PUSH
26065: LD_INT 0
26067: ST_TO_ADDR
// sFac := false ;
26068: LD_ADDR_EXP 113
26072: PUSH
26073: LD_INT 0
26075: ST_TO_ADDR
// sPower := false ;
26076: LD_ADDR_EXP 114
26080: PUSH
26081: LD_INT 0
26083: ST_TO_ADDR
// sRandom := false ;
26084: LD_ADDR_EXP 115
26088: PUSH
26089: LD_INT 0
26091: ST_TO_ADDR
// sShield := false ;
26092: LD_ADDR_EXP 116
26096: PUSH
26097: LD_INT 0
26099: ST_TO_ADDR
// sTime := false ;
26100: LD_ADDR_EXP 117
26104: PUSH
26105: LD_INT 0
26107: ST_TO_ADDR
// sTools := false ;
26108: LD_ADDR_EXP 118
26112: PUSH
26113: LD_INT 0
26115: ST_TO_ADDR
// sSold := false ;
26116: LD_ADDR_EXP 83
26120: PUSH
26121: LD_INT 0
26123: ST_TO_ADDR
// sDiff := false ;
26124: LD_ADDR_EXP 84
26128: PUSH
26129: LD_INT 0
26131: ST_TO_ADDR
// sFog := false ;
26132: LD_ADDR_EXP 87
26136: PUSH
26137: LD_INT 0
26139: ST_TO_ADDR
// sReset := false ;
26140: LD_ADDR_EXP 88
26144: PUSH
26145: LD_INT 0
26147: ST_TO_ADDR
// sSun := false ;
26148: LD_ADDR_EXP 89
26152: PUSH
26153: LD_INT 0
26155: ST_TO_ADDR
// sTiger := false ;
26156: LD_ADDR_EXP 85
26160: PUSH
26161: LD_INT 0
26163: ST_TO_ADDR
// sBomb := false ;
26164: LD_ADDR_EXP 86
26168: PUSH
26169: LD_INT 0
26171: ST_TO_ADDR
// sWound := false ;
26172: LD_ADDR_EXP 94
26176: PUSH
26177: LD_INT 0
26179: ST_TO_ADDR
// sBetray := false ;
26180: LD_ADDR_EXP 98
26184: PUSH
26185: LD_INT 0
26187: ST_TO_ADDR
// sContamin := false ;
26188: LD_ADDR_EXP 99
26192: PUSH
26193: LD_INT 0
26195: ST_TO_ADDR
// sOil := false ;
26196: LD_ADDR_EXP 101
26200: PUSH
26201: LD_INT 0
26203: ST_TO_ADDR
// sStu := false ;
26204: LD_ADDR_EXP 105
26208: PUSH
26209: LD_INT 0
26211: ST_TO_ADDR
// sBazooka := false ;
26212: LD_ADDR_EXP 108
26216: PUSH
26217: LD_INT 0
26219: ST_TO_ADDR
// sMortar := false ;
26220: LD_ADDR_EXP 109
26224: PUSH
26225: LD_INT 0
26227: ST_TO_ADDR
// sRanger := false ;
26228: LD_ADDR_EXP 119
26232: PUSH
26233: LD_INT 0
26235: ST_TO_ADDR
// end ;
26236: LD_VAR 0 1
26240: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
26241: LD_INT 0
26243: PPUSH
26244: PPUSH
26245: PPUSH
26246: PPUSH
26247: PPUSH
// result := [ ] ;
26248: LD_ADDR_VAR 0 1
26252: PUSH
26253: EMPTY
26254: ST_TO_ADDR
// if campaign_id = 1 then
26255: LD_OWVAR 69
26259: PUSH
26260: LD_INT 1
26262: EQUAL
26263: IFFALSE 29201
// begin case mission_number of 1 :
26265: LD_OWVAR 70
26269: PUSH
26270: LD_INT 1
26272: DOUBLE
26273: EQUAL
26274: IFTRUE 26278
26276: GO 26342
26278: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
26279: LD_ADDR_VAR 0 1
26283: PUSH
26284: LD_INT 2
26286: PUSH
26287: LD_INT 4
26289: PUSH
26290: LD_INT 11
26292: PUSH
26293: LD_INT 12
26295: PUSH
26296: LD_INT 15
26298: PUSH
26299: LD_INT 16
26301: PUSH
26302: LD_INT 22
26304: PUSH
26305: LD_INT 23
26307: PUSH
26308: LD_INT 26
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 101
26324: PUSH
26325: LD_INT 102
26327: PUSH
26328: LD_INT 106
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: LIST
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: ST_TO_ADDR
26340: GO 29199
26342: LD_INT 2
26344: DOUBLE
26345: EQUAL
26346: IFTRUE 26350
26348: GO 26422
26350: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
26351: LD_ADDR_VAR 0 1
26355: PUSH
26356: LD_INT 2
26358: PUSH
26359: LD_INT 4
26361: PUSH
26362: LD_INT 11
26364: PUSH
26365: LD_INT 12
26367: PUSH
26368: LD_INT 15
26370: PUSH
26371: LD_INT 16
26373: PUSH
26374: LD_INT 22
26376: PUSH
26377: LD_INT 23
26379: PUSH
26380: LD_INT 26
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 101
26396: PUSH
26397: LD_INT 102
26399: PUSH
26400: LD_INT 105
26402: PUSH
26403: LD_INT 106
26405: PUSH
26406: LD_INT 108
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: ST_TO_ADDR
26420: GO 29199
26422: LD_INT 3
26424: DOUBLE
26425: EQUAL
26426: IFTRUE 26430
26428: GO 26506
26430: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
26431: LD_ADDR_VAR 0 1
26435: PUSH
26436: LD_INT 2
26438: PUSH
26439: LD_INT 4
26441: PUSH
26442: LD_INT 5
26444: PUSH
26445: LD_INT 11
26447: PUSH
26448: LD_INT 12
26450: PUSH
26451: LD_INT 15
26453: PUSH
26454: LD_INT 16
26456: PUSH
26457: LD_INT 22
26459: PUSH
26460: LD_INT 26
26462: PUSH
26463: LD_INT 36
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 101
26480: PUSH
26481: LD_INT 102
26483: PUSH
26484: LD_INT 105
26486: PUSH
26487: LD_INT 106
26489: PUSH
26490: LD_INT 108
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: ST_TO_ADDR
26504: GO 29199
26506: LD_INT 4
26508: DOUBLE
26509: EQUAL
26510: IFTRUE 26514
26512: GO 26598
26514: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
26515: LD_ADDR_VAR 0 1
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: LD_INT 4
26525: PUSH
26526: LD_INT 5
26528: PUSH
26529: LD_INT 8
26531: PUSH
26532: LD_INT 11
26534: PUSH
26535: LD_INT 12
26537: PUSH
26538: LD_INT 15
26540: PUSH
26541: LD_INT 16
26543: PUSH
26544: LD_INT 22
26546: PUSH
26547: LD_INT 23
26549: PUSH
26550: LD_INT 26
26552: PUSH
26553: LD_INT 36
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 101
26572: PUSH
26573: LD_INT 102
26575: PUSH
26576: LD_INT 105
26578: PUSH
26579: LD_INT 106
26581: PUSH
26582: LD_INT 108
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: ST_TO_ADDR
26596: GO 29199
26598: LD_INT 5
26600: DOUBLE
26601: EQUAL
26602: IFTRUE 26606
26604: GO 26706
26606: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
26607: LD_ADDR_VAR 0 1
26611: PUSH
26612: LD_INT 2
26614: PUSH
26615: LD_INT 4
26617: PUSH
26618: LD_INT 5
26620: PUSH
26621: LD_INT 6
26623: PUSH
26624: LD_INT 8
26626: PUSH
26627: LD_INT 11
26629: PUSH
26630: LD_INT 12
26632: PUSH
26633: LD_INT 15
26635: PUSH
26636: LD_INT 16
26638: PUSH
26639: LD_INT 22
26641: PUSH
26642: LD_INT 23
26644: PUSH
26645: LD_INT 25
26647: PUSH
26648: LD_INT 26
26650: PUSH
26651: LD_INT 36
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 101
26672: PUSH
26673: LD_INT 102
26675: PUSH
26676: LD_INT 105
26678: PUSH
26679: LD_INT 106
26681: PUSH
26682: LD_INT 108
26684: PUSH
26685: LD_INT 109
26687: PUSH
26688: LD_INT 112
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: ST_TO_ADDR
26704: GO 29199
26706: LD_INT 6
26708: DOUBLE
26709: EQUAL
26710: IFTRUE 26714
26712: GO 26834
26714: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
26715: LD_ADDR_VAR 0 1
26719: PUSH
26720: LD_INT 2
26722: PUSH
26723: LD_INT 4
26725: PUSH
26726: LD_INT 5
26728: PUSH
26729: LD_INT 6
26731: PUSH
26732: LD_INT 8
26734: PUSH
26735: LD_INT 11
26737: PUSH
26738: LD_INT 12
26740: PUSH
26741: LD_INT 15
26743: PUSH
26744: LD_INT 16
26746: PUSH
26747: LD_INT 20
26749: PUSH
26750: LD_INT 21
26752: PUSH
26753: LD_INT 22
26755: PUSH
26756: LD_INT 23
26758: PUSH
26759: LD_INT 25
26761: PUSH
26762: LD_INT 26
26764: PUSH
26765: LD_INT 30
26767: PUSH
26768: LD_INT 31
26770: PUSH
26771: LD_INT 32
26773: PUSH
26774: LD_INT 36
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 101
26800: PUSH
26801: LD_INT 102
26803: PUSH
26804: LD_INT 105
26806: PUSH
26807: LD_INT 106
26809: PUSH
26810: LD_INT 108
26812: PUSH
26813: LD_INT 109
26815: PUSH
26816: LD_INT 112
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: ST_TO_ADDR
26832: GO 29199
26834: LD_INT 7
26836: DOUBLE
26837: EQUAL
26838: IFTRUE 26842
26840: GO 26942
26842: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
26843: LD_ADDR_VAR 0 1
26847: PUSH
26848: LD_INT 2
26850: PUSH
26851: LD_INT 4
26853: PUSH
26854: LD_INT 5
26856: PUSH
26857: LD_INT 7
26859: PUSH
26860: LD_INT 11
26862: PUSH
26863: LD_INT 12
26865: PUSH
26866: LD_INT 15
26868: PUSH
26869: LD_INT 16
26871: PUSH
26872: LD_INT 20
26874: PUSH
26875: LD_INT 21
26877: PUSH
26878: LD_INT 22
26880: PUSH
26881: LD_INT 23
26883: PUSH
26884: LD_INT 25
26886: PUSH
26887: LD_INT 26
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 101
26908: PUSH
26909: LD_INT 102
26911: PUSH
26912: LD_INT 103
26914: PUSH
26915: LD_INT 105
26917: PUSH
26918: LD_INT 106
26920: PUSH
26921: LD_INT 108
26923: PUSH
26924: LD_INT 112
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: ST_TO_ADDR
26940: GO 29199
26942: LD_INT 8
26944: DOUBLE
26945: EQUAL
26946: IFTRUE 26950
26948: GO 27078
26950: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
26951: LD_ADDR_VAR 0 1
26955: PUSH
26956: LD_INT 2
26958: PUSH
26959: LD_INT 4
26961: PUSH
26962: LD_INT 5
26964: PUSH
26965: LD_INT 6
26967: PUSH
26968: LD_INT 7
26970: PUSH
26971: LD_INT 8
26973: PUSH
26974: LD_INT 11
26976: PUSH
26977: LD_INT 12
26979: PUSH
26980: LD_INT 15
26982: PUSH
26983: LD_INT 16
26985: PUSH
26986: LD_INT 20
26988: PUSH
26989: LD_INT 21
26991: PUSH
26992: LD_INT 22
26994: PUSH
26995: LD_INT 23
26997: PUSH
26998: LD_INT 25
27000: PUSH
27001: LD_INT 26
27003: PUSH
27004: LD_INT 30
27006: PUSH
27007: LD_INT 31
27009: PUSH
27010: LD_INT 32
27012: PUSH
27013: LD_INT 36
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 101
27040: PUSH
27041: LD_INT 102
27043: PUSH
27044: LD_INT 103
27046: PUSH
27047: LD_INT 105
27049: PUSH
27050: LD_INT 106
27052: PUSH
27053: LD_INT 108
27055: PUSH
27056: LD_INT 109
27058: PUSH
27059: LD_INT 112
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: ST_TO_ADDR
27076: GO 29199
27078: LD_INT 9
27080: DOUBLE
27081: EQUAL
27082: IFTRUE 27086
27084: GO 27222
27086: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
27087: LD_ADDR_VAR 0 1
27091: PUSH
27092: LD_INT 2
27094: PUSH
27095: LD_INT 4
27097: PUSH
27098: LD_INT 5
27100: PUSH
27101: LD_INT 6
27103: PUSH
27104: LD_INT 7
27106: PUSH
27107: LD_INT 8
27109: PUSH
27110: LD_INT 11
27112: PUSH
27113: LD_INT 12
27115: PUSH
27116: LD_INT 15
27118: PUSH
27119: LD_INT 16
27121: PUSH
27122: LD_INT 20
27124: PUSH
27125: LD_INT 21
27127: PUSH
27128: LD_INT 22
27130: PUSH
27131: LD_INT 23
27133: PUSH
27134: LD_INT 25
27136: PUSH
27137: LD_INT 26
27139: PUSH
27140: LD_INT 28
27142: PUSH
27143: LD_INT 30
27145: PUSH
27146: LD_INT 31
27148: PUSH
27149: LD_INT 32
27151: PUSH
27152: LD_INT 36
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 101
27180: PUSH
27181: LD_INT 102
27183: PUSH
27184: LD_INT 103
27186: PUSH
27187: LD_INT 105
27189: PUSH
27190: LD_INT 106
27192: PUSH
27193: LD_INT 108
27195: PUSH
27196: LD_INT 109
27198: PUSH
27199: LD_INT 112
27201: PUSH
27202: LD_INT 114
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: ST_TO_ADDR
27220: GO 29199
27222: LD_INT 10
27224: DOUBLE
27225: EQUAL
27226: IFTRUE 27230
27228: GO 27414
27230: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
27231: LD_ADDR_VAR 0 1
27235: PUSH
27236: LD_INT 2
27238: PUSH
27239: LD_INT 4
27241: PUSH
27242: LD_INT 5
27244: PUSH
27245: LD_INT 6
27247: PUSH
27248: LD_INT 7
27250: PUSH
27251: LD_INT 8
27253: PUSH
27254: LD_INT 9
27256: PUSH
27257: LD_INT 10
27259: PUSH
27260: LD_INT 11
27262: PUSH
27263: LD_INT 12
27265: PUSH
27266: LD_INT 13
27268: PUSH
27269: LD_INT 14
27271: PUSH
27272: LD_INT 15
27274: PUSH
27275: LD_INT 16
27277: PUSH
27278: LD_INT 17
27280: PUSH
27281: LD_INT 18
27283: PUSH
27284: LD_INT 19
27286: PUSH
27287: LD_INT 20
27289: PUSH
27290: LD_INT 21
27292: PUSH
27293: LD_INT 22
27295: PUSH
27296: LD_INT 23
27298: PUSH
27299: LD_INT 24
27301: PUSH
27302: LD_INT 25
27304: PUSH
27305: LD_INT 26
27307: PUSH
27308: LD_INT 28
27310: PUSH
27311: LD_INT 30
27313: PUSH
27314: LD_INT 31
27316: PUSH
27317: LD_INT 32
27319: PUSH
27320: LD_INT 36
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 101
27356: PUSH
27357: LD_INT 102
27359: PUSH
27360: LD_INT 103
27362: PUSH
27363: LD_INT 104
27365: PUSH
27366: LD_INT 105
27368: PUSH
27369: LD_INT 106
27371: PUSH
27372: LD_INT 107
27374: PUSH
27375: LD_INT 108
27377: PUSH
27378: LD_INT 109
27380: PUSH
27381: LD_INT 110
27383: PUSH
27384: LD_INT 111
27386: PUSH
27387: LD_INT 112
27389: PUSH
27390: LD_INT 114
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: ST_TO_ADDR
27412: GO 29199
27414: LD_INT 11
27416: DOUBLE
27417: EQUAL
27418: IFTRUE 27422
27420: GO 27614
27422: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
27423: LD_ADDR_VAR 0 1
27427: PUSH
27428: LD_INT 2
27430: PUSH
27431: LD_INT 3
27433: PUSH
27434: LD_INT 4
27436: PUSH
27437: LD_INT 5
27439: PUSH
27440: LD_INT 6
27442: PUSH
27443: LD_INT 7
27445: PUSH
27446: LD_INT 8
27448: PUSH
27449: LD_INT 9
27451: PUSH
27452: LD_INT 10
27454: PUSH
27455: LD_INT 11
27457: PUSH
27458: LD_INT 12
27460: PUSH
27461: LD_INT 13
27463: PUSH
27464: LD_INT 14
27466: PUSH
27467: LD_INT 15
27469: PUSH
27470: LD_INT 16
27472: PUSH
27473: LD_INT 17
27475: PUSH
27476: LD_INT 18
27478: PUSH
27479: LD_INT 19
27481: PUSH
27482: LD_INT 20
27484: PUSH
27485: LD_INT 21
27487: PUSH
27488: LD_INT 22
27490: PUSH
27491: LD_INT 23
27493: PUSH
27494: LD_INT 24
27496: PUSH
27497: LD_INT 25
27499: PUSH
27500: LD_INT 26
27502: PUSH
27503: LD_INT 28
27505: PUSH
27506: LD_INT 30
27508: PUSH
27509: LD_INT 31
27511: PUSH
27512: LD_INT 32
27514: PUSH
27515: LD_INT 34
27517: PUSH
27518: LD_INT 36
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 101
27556: PUSH
27557: LD_INT 102
27559: PUSH
27560: LD_INT 103
27562: PUSH
27563: LD_INT 104
27565: PUSH
27566: LD_INT 105
27568: PUSH
27569: LD_INT 106
27571: PUSH
27572: LD_INT 107
27574: PUSH
27575: LD_INT 108
27577: PUSH
27578: LD_INT 109
27580: PUSH
27581: LD_INT 110
27583: PUSH
27584: LD_INT 111
27586: PUSH
27587: LD_INT 112
27589: PUSH
27590: LD_INT 114
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: ST_TO_ADDR
27612: GO 29199
27614: LD_INT 12
27616: DOUBLE
27617: EQUAL
27618: IFTRUE 27622
27620: GO 27830
27622: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
27623: LD_ADDR_VAR 0 1
27627: PUSH
27628: LD_INT 1
27630: PUSH
27631: LD_INT 2
27633: PUSH
27634: LD_INT 3
27636: PUSH
27637: LD_INT 4
27639: PUSH
27640: LD_INT 5
27642: PUSH
27643: LD_INT 6
27645: PUSH
27646: LD_INT 7
27648: PUSH
27649: LD_INT 8
27651: PUSH
27652: LD_INT 9
27654: PUSH
27655: LD_INT 10
27657: PUSH
27658: LD_INT 11
27660: PUSH
27661: LD_INT 12
27663: PUSH
27664: LD_INT 13
27666: PUSH
27667: LD_INT 14
27669: PUSH
27670: LD_INT 15
27672: PUSH
27673: LD_INT 16
27675: PUSH
27676: LD_INT 17
27678: PUSH
27679: LD_INT 18
27681: PUSH
27682: LD_INT 19
27684: PUSH
27685: LD_INT 20
27687: PUSH
27688: LD_INT 21
27690: PUSH
27691: LD_INT 22
27693: PUSH
27694: LD_INT 23
27696: PUSH
27697: LD_INT 24
27699: PUSH
27700: LD_INT 25
27702: PUSH
27703: LD_INT 26
27705: PUSH
27706: LD_INT 27
27708: PUSH
27709: LD_INT 28
27711: PUSH
27712: LD_INT 30
27714: PUSH
27715: LD_INT 31
27717: PUSH
27718: LD_INT 32
27720: PUSH
27721: LD_INT 33
27723: PUSH
27724: LD_INT 34
27726: PUSH
27727: LD_INT 36
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 101
27768: PUSH
27769: LD_INT 102
27771: PUSH
27772: LD_INT 103
27774: PUSH
27775: LD_INT 104
27777: PUSH
27778: LD_INT 105
27780: PUSH
27781: LD_INT 106
27783: PUSH
27784: LD_INT 107
27786: PUSH
27787: LD_INT 108
27789: PUSH
27790: LD_INT 109
27792: PUSH
27793: LD_INT 110
27795: PUSH
27796: LD_INT 111
27798: PUSH
27799: LD_INT 112
27801: PUSH
27802: LD_INT 113
27804: PUSH
27805: LD_INT 114
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: ST_TO_ADDR
27828: GO 29199
27830: LD_INT 13
27832: DOUBLE
27833: EQUAL
27834: IFTRUE 27838
27836: GO 28034
27838: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
27839: LD_ADDR_VAR 0 1
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: LD_INT 2
27849: PUSH
27850: LD_INT 3
27852: PUSH
27853: LD_INT 4
27855: PUSH
27856: LD_INT 5
27858: PUSH
27859: LD_INT 8
27861: PUSH
27862: LD_INT 9
27864: PUSH
27865: LD_INT 10
27867: PUSH
27868: LD_INT 11
27870: PUSH
27871: LD_INT 12
27873: PUSH
27874: LD_INT 14
27876: PUSH
27877: LD_INT 15
27879: PUSH
27880: LD_INT 16
27882: PUSH
27883: LD_INT 17
27885: PUSH
27886: LD_INT 18
27888: PUSH
27889: LD_INT 19
27891: PUSH
27892: LD_INT 20
27894: PUSH
27895: LD_INT 21
27897: PUSH
27898: LD_INT 22
27900: PUSH
27901: LD_INT 23
27903: PUSH
27904: LD_INT 24
27906: PUSH
27907: LD_INT 25
27909: PUSH
27910: LD_INT 26
27912: PUSH
27913: LD_INT 27
27915: PUSH
27916: LD_INT 28
27918: PUSH
27919: LD_INT 30
27921: PUSH
27922: LD_INT 31
27924: PUSH
27925: LD_INT 32
27927: PUSH
27928: LD_INT 33
27930: PUSH
27931: LD_INT 34
27933: PUSH
27934: LD_INT 36
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 101
27972: PUSH
27973: LD_INT 102
27975: PUSH
27976: LD_INT 103
27978: PUSH
27979: LD_INT 104
27981: PUSH
27982: LD_INT 105
27984: PUSH
27985: LD_INT 106
27987: PUSH
27988: LD_INT 107
27990: PUSH
27991: LD_INT 108
27993: PUSH
27994: LD_INT 109
27996: PUSH
27997: LD_INT 110
27999: PUSH
28000: LD_INT 111
28002: PUSH
28003: LD_INT 112
28005: PUSH
28006: LD_INT 113
28008: PUSH
28009: LD_INT 114
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: ST_TO_ADDR
28032: GO 29199
28034: LD_INT 14
28036: DOUBLE
28037: EQUAL
28038: IFTRUE 28042
28040: GO 28254
28042: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
28043: LD_ADDR_VAR 0 1
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: LD_INT 2
28053: PUSH
28054: LD_INT 3
28056: PUSH
28057: LD_INT 4
28059: PUSH
28060: LD_INT 5
28062: PUSH
28063: LD_INT 6
28065: PUSH
28066: LD_INT 7
28068: PUSH
28069: LD_INT 8
28071: PUSH
28072: LD_INT 9
28074: PUSH
28075: LD_INT 10
28077: PUSH
28078: LD_INT 11
28080: PUSH
28081: LD_INT 12
28083: PUSH
28084: LD_INT 13
28086: PUSH
28087: LD_INT 14
28089: PUSH
28090: LD_INT 15
28092: PUSH
28093: LD_INT 16
28095: PUSH
28096: LD_INT 17
28098: PUSH
28099: LD_INT 18
28101: PUSH
28102: LD_INT 19
28104: PUSH
28105: LD_INT 20
28107: PUSH
28108: LD_INT 21
28110: PUSH
28111: LD_INT 22
28113: PUSH
28114: LD_INT 23
28116: PUSH
28117: LD_INT 24
28119: PUSH
28120: LD_INT 25
28122: PUSH
28123: LD_INT 26
28125: PUSH
28126: LD_INT 27
28128: PUSH
28129: LD_INT 28
28131: PUSH
28132: LD_INT 29
28134: PUSH
28135: LD_INT 30
28137: PUSH
28138: LD_INT 31
28140: PUSH
28141: LD_INT 32
28143: PUSH
28144: LD_INT 33
28146: PUSH
28147: LD_INT 34
28149: PUSH
28150: LD_INT 36
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 101
28192: PUSH
28193: LD_INT 102
28195: PUSH
28196: LD_INT 103
28198: PUSH
28199: LD_INT 104
28201: PUSH
28202: LD_INT 105
28204: PUSH
28205: LD_INT 106
28207: PUSH
28208: LD_INT 107
28210: PUSH
28211: LD_INT 108
28213: PUSH
28214: LD_INT 109
28216: PUSH
28217: LD_INT 110
28219: PUSH
28220: LD_INT 111
28222: PUSH
28223: LD_INT 112
28225: PUSH
28226: LD_INT 113
28228: PUSH
28229: LD_INT 114
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: ST_TO_ADDR
28252: GO 29199
28254: LD_INT 15
28256: DOUBLE
28257: EQUAL
28258: IFTRUE 28262
28260: GO 28474
28262: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
28263: LD_ADDR_VAR 0 1
28267: PUSH
28268: LD_INT 1
28270: PUSH
28271: LD_INT 2
28273: PUSH
28274: LD_INT 3
28276: PUSH
28277: LD_INT 4
28279: PUSH
28280: LD_INT 5
28282: PUSH
28283: LD_INT 6
28285: PUSH
28286: LD_INT 7
28288: PUSH
28289: LD_INT 8
28291: PUSH
28292: LD_INT 9
28294: PUSH
28295: LD_INT 10
28297: PUSH
28298: LD_INT 11
28300: PUSH
28301: LD_INT 12
28303: PUSH
28304: LD_INT 13
28306: PUSH
28307: LD_INT 14
28309: PUSH
28310: LD_INT 15
28312: PUSH
28313: LD_INT 16
28315: PUSH
28316: LD_INT 17
28318: PUSH
28319: LD_INT 18
28321: PUSH
28322: LD_INT 19
28324: PUSH
28325: LD_INT 20
28327: PUSH
28328: LD_INT 21
28330: PUSH
28331: LD_INT 22
28333: PUSH
28334: LD_INT 23
28336: PUSH
28337: LD_INT 24
28339: PUSH
28340: LD_INT 25
28342: PUSH
28343: LD_INT 26
28345: PUSH
28346: LD_INT 27
28348: PUSH
28349: LD_INT 28
28351: PUSH
28352: LD_INT 29
28354: PUSH
28355: LD_INT 30
28357: PUSH
28358: LD_INT 31
28360: PUSH
28361: LD_INT 32
28363: PUSH
28364: LD_INT 33
28366: PUSH
28367: LD_INT 34
28369: PUSH
28370: LD_INT 36
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 101
28412: PUSH
28413: LD_INT 102
28415: PUSH
28416: LD_INT 103
28418: PUSH
28419: LD_INT 104
28421: PUSH
28422: LD_INT 105
28424: PUSH
28425: LD_INT 106
28427: PUSH
28428: LD_INT 107
28430: PUSH
28431: LD_INT 108
28433: PUSH
28434: LD_INT 109
28436: PUSH
28437: LD_INT 110
28439: PUSH
28440: LD_INT 111
28442: PUSH
28443: LD_INT 112
28445: PUSH
28446: LD_INT 113
28448: PUSH
28449: LD_INT 114
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: ST_TO_ADDR
28472: GO 29199
28474: LD_INT 16
28476: DOUBLE
28477: EQUAL
28478: IFTRUE 28482
28480: GO 28606
28482: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
28483: LD_ADDR_VAR 0 1
28487: PUSH
28488: LD_INT 2
28490: PUSH
28491: LD_INT 4
28493: PUSH
28494: LD_INT 5
28496: PUSH
28497: LD_INT 7
28499: PUSH
28500: LD_INT 11
28502: PUSH
28503: LD_INT 12
28505: PUSH
28506: LD_INT 15
28508: PUSH
28509: LD_INT 16
28511: PUSH
28512: LD_INT 20
28514: PUSH
28515: LD_INT 21
28517: PUSH
28518: LD_INT 22
28520: PUSH
28521: LD_INT 23
28523: PUSH
28524: LD_INT 25
28526: PUSH
28527: LD_INT 26
28529: PUSH
28530: LD_INT 30
28532: PUSH
28533: LD_INT 31
28535: PUSH
28536: LD_INT 32
28538: PUSH
28539: LD_INT 33
28541: PUSH
28542: LD_INT 34
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 101
28568: PUSH
28569: LD_INT 102
28571: PUSH
28572: LD_INT 103
28574: PUSH
28575: LD_INT 106
28577: PUSH
28578: LD_INT 108
28580: PUSH
28581: LD_INT 112
28583: PUSH
28584: LD_INT 113
28586: PUSH
28587: LD_INT 114
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: ST_TO_ADDR
28604: GO 29199
28606: LD_INT 17
28608: DOUBLE
28609: EQUAL
28610: IFTRUE 28614
28612: GO 28826
28614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
28615: LD_ADDR_VAR 0 1
28619: PUSH
28620: LD_INT 1
28622: PUSH
28623: LD_INT 2
28625: PUSH
28626: LD_INT 3
28628: PUSH
28629: LD_INT 4
28631: PUSH
28632: LD_INT 5
28634: PUSH
28635: LD_INT 6
28637: PUSH
28638: LD_INT 7
28640: PUSH
28641: LD_INT 8
28643: PUSH
28644: LD_INT 9
28646: PUSH
28647: LD_INT 10
28649: PUSH
28650: LD_INT 11
28652: PUSH
28653: LD_INT 12
28655: PUSH
28656: LD_INT 13
28658: PUSH
28659: LD_INT 14
28661: PUSH
28662: LD_INT 15
28664: PUSH
28665: LD_INT 16
28667: PUSH
28668: LD_INT 17
28670: PUSH
28671: LD_INT 18
28673: PUSH
28674: LD_INT 19
28676: PUSH
28677: LD_INT 20
28679: PUSH
28680: LD_INT 21
28682: PUSH
28683: LD_INT 22
28685: PUSH
28686: LD_INT 23
28688: PUSH
28689: LD_INT 24
28691: PUSH
28692: LD_INT 25
28694: PUSH
28695: LD_INT 26
28697: PUSH
28698: LD_INT 27
28700: PUSH
28701: LD_INT 28
28703: PUSH
28704: LD_INT 29
28706: PUSH
28707: LD_INT 30
28709: PUSH
28710: LD_INT 31
28712: PUSH
28713: LD_INT 32
28715: PUSH
28716: LD_INT 33
28718: PUSH
28719: LD_INT 34
28721: PUSH
28722: LD_INT 36
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 101
28764: PUSH
28765: LD_INT 102
28767: PUSH
28768: LD_INT 103
28770: PUSH
28771: LD_INT 104
28773: PUSH
28774: LD_INT 105
28776: PUSH
28777: LD_INT 106
28779: PUSH
28780: LD_INT 107
28782: PUSH
28783: LD_INT 108
28785: PUSH
28786: LD_INT 109
28788: PUSH
28789: LD_INT 110
28791: PUSH
28792: LD_INT 111
28794: PUSH
28795: LD_INT 112
28797: PUSH
28798: LD_INT 113
28800: PUSH
28801: LD_INT 114
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: ST_TO_ADDR
28824: GO 29199
28826: LD_INT 18
28828: DOUBLE
28829: EQUAL
28830: IFTRUE 28834
28832: GO 28970
28834: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
28835: LD_ADDR_VAR 0 1
28839: PUSH
28840: LD_INT 2
28842: PUSH
28843: LD_INT 4
28845: PUSH
28846: LD_INT 5
28848: PUSH
28849: LD_INT 7
28851: PUSH
28852: LD_INT 11
28854: PUSH
28855: LD_INT 12
28857: PUSH
28858: LD_INT 15
28860: PUSH
28861: LD_INT 16
28863: PUSH
28864: LD_INT 20
28866: PUSH
28867: LD_INT 21
28869: PUSH
28870: LD_INT 22
28872: PUSH
28873: LD_INT 23
28875: PUSH
28876: LD_INT 25
28878: PUSH
28879: LD_INT 26
28881: PUSH
28882: LD_INT 30
28884: PUSH
28885: LD_INT 31
28887: PUSH
28888: LD_INT 32
28890: PUSH
28891: LD_INT 33
28893: PUSH
28894: LD_INT 34
28896: PUSH
28897: LD_INT 35
28899: PUSH
28900: LD_INT 36
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 101
28928: PUSH
28929: LD_INT 102
28931: PUSH
28932: LD_INT 103
28934: PUSH
28935: LD_INT 106
28937: PUSH
28938: LD_INT 108
28940: PUSH
28941: LD_INT 112
28943: PUSH
28944: LD_INT 113
28946: PUSH
28947: LD_INT 114
28949: PUSH
28950: LD_INT 115
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: ST_TO_ADDR
28968: GO 29199
28970: LD_INT 19
28972: DOUBLE
28973: EQUAL
28974: IFTRUE 28978
28976: GO 29198
28978: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
28979: LD_ADDR_VAR 0 1
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: LD_INT 2
28989: PUSH
28990: LD_INT 3
28992: PUSH
28993: LD_INT 4
28995: PUSH
28996: LD_INT 5
28998: PUSH
28999: LD_INT 6
29001: PUSH
29002: LD_INT 7
29004: PUSH
29005: LD_INT 8
29007: PUSH
29008: LD_INT 9
29010: PUSH
29011: LD_INT 10
29013: PUSH
29014: LD_INT 11
29016: PUSH
29017: LD_INT 12
29019: PUSH
29020: LD_INT 13
29022: PUSH
29023: LD_INT 14
29025: PUSH
29026: LD_INT 15
29028: PUSH
29029: LD_INT 16
29031: PUSH
29032: LD_INT 17
29034: PUSH
29035: LD_INT 18
29037: PUSH
29038: LD_INT 19
29040: PUSH
29041: LD_INT 20
29043: PUSH
29044: LD_INT 21
29046: PUSH
29047: LD_INT 22
29049: PUSH
29050: LD_INT 23
29052: PUSH
29053: LD_INT 24
29055: PUSH
29056: LD_INT 25
29058: PUSH
29059: LD_INT 26
29061: PUSH
29062: LD_INT 27
29064: PUSH
29065: LD_INT 28
29067: PUSH
29068: LD_INT 29
29070: PUSH
29071: LD_INT 30
29073: PUSH
29074: LD_INT 31
29076: PUSH
29077: LD_INT 32
29079: PUSH
29080: LD_INT 33
29082: PUSH
29083: LD_INT 34
29085: PUSH
29086: LD_INT 35
29088: PUSH
29089: LD_INT 36
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 101
29132: PUSH
29133: LD_INT 102
29135: PUSH
29136: LD_INT 103
29138: PUSH
29139: LD_INT 104
29141: PUSH
29142: LD_INT 105
29144: PUSH
29145: LD_INT 106
29147: PUSH
29148: LD_INT 107
29150: PUSH
29151: LD_INT 108
29153: PUSH
29154: LD_INT 109
29156: PUSH
29157: LD_INT 110
29159: PUSH
29160: LD_INT 111
29162: PUSH
29163: LD_INT 112
29165: PUSH
29166: LD_INT 113
29168: PUSH
29169: LD_INT 114
29171: PUSH
29172: LD_INT 115
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: ST_TO_ADDR
29196: GO 29199
29198: POP
// end else
29199: GO 29418
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
29201: LD_ADDR_VAR 0 1
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: LD_INT 2
29211: PUSH
29212: LD_INT 3
29214: PUSH
29215: LD_INT 4
29217: PUSH
29218: LD_INT 5
29220: PUSH
29221: LD_INT 6
29223: PUSH
29224: LD_INT 7
29226: PUSH
29227: LD_INT 8
29229: PUSH
29230: LD_INT 9
29232: PUSH
29233: LD_INT 10
29235: PUSH
29236: LD_INT 11
29238: PUSH
29239: LD_INT 12
29241: PUSH
29242: LD_INT 13
29244: PUSH
29245: LD_INT 14
29247: PUSH
29248: LD_INT 15
29250: PUSH
29251: LD_INT 16
29253: PUSH
29254: LD_INT 17
29256: PUSH
29257: LD_INT 18
29259: PUSH
29260: LD_INT 19
29262: PUSH
29263: LD_INT 20
29265: PUSH
29266: LD_INT 21
29268: PUSH
29269: LD_INT 22
29271: PUSH
29272: LD_INT 23
29274: PUSH
29275: LD_INT 24
29277: PUSH
29278: LD_INT 25
29280: PUSH
29281: LD_INT 26
29283: PUSH
29284: LD_INT 27
29286: PUSH
29287: LD_INT 28
29289: PUSH
29290: LD_INT 29
29292: PUSH
29293: LD_INT 30
29295: PUSH
29296: LD_INT 31
29298: PUSH
29299: LD_INT 32
29301: PUSH
29302: LD_INT 33
29304: PUSH
29305: LD_INT 34
29307: PUSH
29308: LD_INT 35
29310: PUSH
29311: LD_INT 36
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 101
29354: PUSH
29355: LD_INT 102
29357: PUSH
29358: LD_INT 103
29360: PUSH
29361: LD_INT 104
29363: PUSH
29364: LD_INT 105
29366: PUSH
29367: LD_INT 106
29369: PUSH
29370: LD_INT 107
29372: PUSH
29373: LD_INT 108
29375: PUSH
29376: LD_INT 109
29378: PUSH
29379: LD_INT 110
29381: PUSH
29382: LD_INT 111
29384: PUSH
29385: LD_INT 112
29387: PUSH
29388: LD_INT 113
29390: PUSH
29391: LD_INT 114
29393: PUSH
29394: LD_INT 115
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: ST_TO_ADDR
// if result then
29418: LD_VAR 0 1
29422: IFFALSE 29711
// begin normal :=  ;
29424: LD_ADDR_VAR 0 3
29428: PUSH
29429: LD_STRING 
29431: ST_TO_ADDR
// hardcore :=  ;
29432: LD_ADDR_VAR 0 4
29436: PUSH
29437: LD_STRING 
29439: ST_TO_ADDR
// for i = 1 to normalCounter do
29440: LD_ADDR_VAR 0 5
29444: PUSH
29445: DOUBLE
29446: LD_INT 1
29448: DEC
29449: ST_TO_ADDR
29450: LD_EXP 67
29454: PUSH
29455: FOR_TO
29456: IFFALSE 29557
// begin tmp := 0 ;
29458: LD_ADDR_VAR 0 2
29462: PUSH
29463: LD_STRING 0
29465: ST_TO_ADDR
// if result [ 1 ] then
29466: LD_VAR 0 1
29470: PUSH
29471: LD_INT 1
29473: ARRAY
29474: IFFALSE 29539
// if result [ 1 ] [ 1 ] = i then
29476: LD_VAR 0 1
29480: PUSH
29481: LD_INT 1
29483: ARRAY
29484: PUSH
29485: LD_INT 1
29487: ARRAY
29488: PUSH
29489: LD_VAR 0 5
29493: EQUAL
29494: IFFALSE 29539
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
29496: LD_ADDR_VAR 0 1
29500: PUSH
29501: LD_VAR 0 1
29505: PPUSH
29506: LD_INT 1
29508: PPUSH
29509: LD_VAR 0 1
29513: PUSH
29514: LD_INT 1
29516: ARRAY
29517: PPUSH
29518: LD_INT 1
29520: PPUSH
29521: CALL_OW 3
29525: PPUSH
29526: CALL_OW 1
29530: ST_TO_ADDR
// tmp := 1 ;
29531: LD_ADDR_VAR 0 2
29535: PUSH
29536: LD_STRING 1
29538: ST_TO_ADDR
// end ; normal := normal & tmp ;
29539: LD_ADDR_VAR 0 3
29543: PUSH
29544: LD_VAR 0 3
29548: PUSH
29549: LD_VAR 0 2
29553: STR
29554: ST_TO_ADDR
// end ;
29555: GO 29455
29557: POP
29558: POP
// for i = 1 to hardcoreCounter do
29559: LD_ADDR_VAR 0 5
29563: PUSH
29564: DOUBLE
29565: LD_INT 1
29567: DEC
29568: ST_TO_ADDR
29569: LD_EXP 68
29573: PUSH
29574: FOR_TO
29575: IFFALSE 29680
// begin tmp := 0 ;
29577: LD_ADDR_VAR 0 2
29581: PUSH
29582: LD_STRING 0
29584: ST_TO_ADDR
// if result [ 2 ] then
29585: LD_VAR 0 1
29589: PUSH
29590: LD_INT 2
29592: ARRAY
29593: IFFALSE 29662
// if result [ 2 ] [ 1 ] = 100 + i then
29595: LD_VAR 0 1
29599: PUSH
29600: LD_INT 2
29602: ARRAY
29603: PUSH
29604: LD_INT 1
29606: ARRAY
29607: PUSH
29608: LD_INT 100
29610: PUSH
29611: LD_VAR 0 5
29615: PLUS
29616: EQUAL
29617: IFFALSE 29662
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
29619: LD_ADDR_VAR 0 1
29623: PUSH
29624: LD_VAR 0 1
29628: PPUSH
29629: LD_INT 2
29631: PPUSH
29632: LD_VAR 0 1
29636: PUSH
29637: LD_INT 2
29639: ARRAY
29640: PPUSH
29641: LD_INT 1
29643: PPUSH
29644: CALL_OW 3
29648: PPUSH
29649: CALL_OW 1
29653: ST_TO_ADDR
// tmp := 1 ;
29654: LD_ADDR_VAR 0 2
29658: PUSH
29659: LD_STRING 1
29661: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
29662: LD_ADDR_VAR 0 4
29666: PUSH
29667: LD_VAR 0 4
29671: PUSH
29672: LD_VAR 0 2
29676: STR
29677: ST_TO_ADDR
// end ;
29678: GO 29574
29680: POP
29681: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
29682: LD_STRING getStreamItemsFromMission("
29684: PUSH
29685: LD_VAR 0 3
29689: STR
29690: PUSH
29691: LD_STRING ","
29693: STR
29694: PUSH
29695: LD_VAR 0 4
29699: STR
29700: PUSH
29701: LD_STRING ")
29703: STR
29704: PPUSH
29705: CALL_OW 559
// end else
29709: GO 29718
// ToLua ( getStreamItemsFromMission("","") ) ;
29711: LD_STRING getStreamItemsFromMission("","")
29713: PPUSH
29714: CALL_OW 559
// end ;
29718: LD_VAR 0 1
29722: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
29723: LD_EXP 66
29727: PUSH
29728: LD_EXP 71
29732: AND
29733: IFFALSE 29857
29735: GO 29737
29737: DISABLE
29738: LD_INT 0
29740: PPUSH
29741: PPUSH
// begin enable ;
29742: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
29743: LD_ADDR_VAR 0 2
29747: PUSH
29748: LD_INT 22
29750: PUSH
29751: LD_OWVAR 2
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: LD_INT 34
29765: PUSH
29766: LD_INT 7
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 34
29775: PUSH
29776: LD_INT 45
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 34
29785: PUSH
29786: LD_INT 28
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 34
29795: PUSH
29796: LD_INT 47
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PPUSH
29814: CALL_OW 69
29818: ST_TO_ADDR
// if not tmp then
29819: LD_VAR 0 2
29823: NOT
29824: IFFALSE 29828
// exit ;
29826: GO 29857
// for i in tmp do
29828: LD_ADDR_VAR 0 1
29832: PUSH
29833: LD_VAR 0 2
29837: PUSH
29838: FOR_IN
29839: IFFALSE 29855
// begin SetLives ( i , 0 ) ;
29841: LD_VAR 0 1
29845: PPUSH
29846: LD_INT 0
29848: PPUSH
29849: CALL_OW 234
// end ;
29853: GO 29838
29855: POP
29856: POP
// end ;
29857: PPOPN 2
29859: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
29860: LD_EXP 66
29864: PUSH
29865: LD_EXP 72
29869: AND
29870: IFFALSE 29954
29872: GO 29874
29874: DISABLE
29875: LD_INT 0
29877: PPUSH
29878: PPUSH
// begin enable ;
29879: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
29880: LD_ADDR_VAR 0 2
29884: PUSH
29885: LD_INT 22
29887: PUSH
29888: LD_OWVAR 2
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 32
29899: PUSH
29900: LD_INT 3
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PPUSH
29911: CALL_OW 69
29915: ST_TO_ADDR
// if not tmp then
29916: LD_VAR 0 2
29920: NOT
29921: IFFALSE 29925
// exit ;
29923: GO 29954
// for i in tmp do
29925: LD_ADDR_VAR 0 1
29929: PUSH
29930: LD_VAR 0 2
29934: PUSH
29935: FOR_IN
29936: IFFALSE 29952
// begin SetLives ( i , 0 ) ;
29938: LD_VAR 0 1
29942: PPUSH
29943: LD_INT 0
29945: PPUSH
29946: CALL_OW 234
// end ;
29950: GO 29935
29952: POP
29953: POP
// end ;
29954: PPOPN 2
29956: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
29957: LD_EXP 66
29961: PUSH
29962: LD_EXP 69
29966: AND
29967: IFFALSE 30060
29969: GO 29971
29971: DISABLE
29972: LD_INT 0
29974: PPUSH
// begin enable ;
29975: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
29976: LD_ADDR_VAR 0 1
29980: PUSH
29981: LD_INT 22
29983: PUSH
29984: LD_OWVAR 2
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 2
29995: PUSH
29996: LD_INT 25
29998: PUSH
29999: LD_INT 5
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 25
30008: PUSH
30009: LD_INT 9
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 25
30018: PUSH
30019: LD_INT 8
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PPUSH
30036: CALL_OW 69
30040: PUSH
30041: FOR_IN
30042: IFFALSE 30058
// begin SetClass ( i , 1 ) ;
30044: LD_VAR 0 1
30048: PPUSH
30049: LD_INT 1
30051: PPUSH
30052: CALL_OW 336
// end ;
30056: GO 30041
30058: POP
30059: POP
// end ;
30060: PPOPN 1
30062: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
30063: LD_EXP 66
30067: PUSH
30068: LD_EXP 70
30072: AND
30073: PUSH
30074: LD_OWVAR 65
30078: PUSH
30079: LD_INT 7
30081: LESS
30082: AND
30083: IFFALSE 30097
30085: GO 30087
30087: DISABLE
// begin enable ;
30088: ENABLE
// game_speed := 7 ;
30089: LD_ADDR_OWVAR 65
30093: PUSH
30094: LD_INT 7
30096: ST_TO_ADDR
// end ;
30097: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
30098: LD_EXP 66
30102: PUSH
30103: LD_EXP 73
30107: AND
30108: IFFALSE 30310
30110: GO 30112
30112: DISABLE
30113: LD_INT 0
30115: PPUSH
30116: PPUSH
30117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30118: LD_ADDR_VAR 0 3
30122: PUSH
30123: LD_INT 81
30125: PUSH
30126: LD_OWVAR 2
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 21
30137: PUSH
30138: LD_INT 1
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PPUSH
30149: CALL_OW 69
30153: ST_TO_ADDR
// if not tmp then
30154: LD_VAR 0 3
30158: NOT
30159: IFFALSE 30163
// exit ;
30161: GO 30310
// if tmp > 5 then
30163: LD_VAR 0 3
30167: PUSH
30168: LD_INT 5
30170: GREATER
30171: IFFALSE 30183
// k := 5 else
30173: LD_ADDR_VAR 0 2
30177: PUSH
30178: LD_INT 5
30180: ST_TO_ADDR
30181: GO 30193
// k := tmp ;
30183: LD_ADDR_VAR 0 2
30187: PUSH
30188: LD_VAR 0 3
30192: ST_TO_ADDR
// for i := 1 to k do
30193: LD_ADDR_VAR 0 1
30197: PUSH
30198: DOUBLE
30199: LD_INT 1
30201: DEC
30202: ST_TO_ADDR
30203: LD_VAR 0 2
30207: PUSH
30208: FOR_TO
30209: IFFALSE 30308
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
30211: LD_VAR 0 3
30215: PUSH
30216: LD_VAR 0 1
30220: ARRAY
30221: PPUSH
30222: LD_VAR 0 1
30226: PUSH
30227: LD_INT 4
30229: MOD
30230: PUSH
30231: LD_INT 1
30233: PLUS
30234: PPUSH
30235: CALL_OW 259
30239: PUSH
30240: LD_INT 10
30242: LESS
30243: IFFALSE 30306
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
30245: LD_VAR 0 3
30249: PUSH
30250: LD_VAR 0 1
30254: ARRAY
30255: PPUSH
30256: LD_VAR 0 1
30260: PUSH
30261: LD_INT 4
30263: MOD
30264: PUSH
30265: LD_INT 1
30267: PLUS
30268: PPUSH
30269: LD_VAR 0 3
30273: PUSH
30274: LD_VAR 0 1
30278: ARRAY
30279: PPUSH
30280: LD_VAR 0 1
30284: PUSH
30285: LD_INT 4
30287: MOD
30288: PUSH
30289: LD_INT 1
30291: PLUS
30292: PPUSH
30293: CALL_OW 259
30297: PUSH
30298: LD_INT 1
30300: PLUS
30301: PPUSH
30302: CALL_OW 237
30306: GO 30208
30308: POP
30309: POP
// end ;
30310: PPOPN 3
30312: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
30313: LD_EXP 66
30317: PUSH
30318: LD_EXP 74
30322: AND
30323: IFFALSE 30343
30325: GO 30327
30327: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
30328: LD_INT 4
30330: PPUSH
30331: LD_OWVAR 2
30335: PPUSH
30336: LD_INT 0
30338: PPUSH
30339: CALL_OW 324
30343: END
// every 0 0$1 trigger StreamModeActive and sShovel do
30344: LD_EXP 66
30348: PUSH
30349: LD_EXP 103
30353: AND
30354: IFFALSE 30374
30356: GO 30358
30358: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
30359: LD_INT 19
30361: PPUSH
30362: LD_OWVAR 2
30366: PPUSH
30367: LD_INT 0
30369: PPUSH
30370: CALL_OW 324
30374: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
30375: LD_EXP 66
30379: PUSH
30380: LD_EXP 75
30384: AND
30385: IFFALSE 30487
30387: GO 30389
30389: DISABLE
30390: LD_INT 0
30392: PPUSH
30393: PPUSH
// begin enable ;
30394: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
30395: LD_ADDR_VAR 0 2
30399: PUSH
30400: LD_INT 22
30402: PUSH
30403: LD_OWVAR 2
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 2
30414: PUSH
30415: LD_INT 34
30417: PUSH
30418: LD_INT 11
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 34
30427: PUSH
30428: LD_INT 30
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: LIST
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PPUSH
30444: CALL_OW 69
30448: ST_TO_ADDR
// if not tmp then
30449: LD_VAR 0 2
30453: NOT
30454: IFFALSE 30458
// exit ;
30456: GO 30487
// for i in tmp do
30458: LD_ADDR_VAR 0 1
30462: PUSH
30463: LD_VAR 0 2
30467: PUSH
30468: FOR_IN
30469: IFFALSE 30485
// begin SetLives ( i , 0 ) ;
30471: LD_VAR 0 1
30475: PPUSH
30476: LD_INT 0
30478: PPUSH
30479: CALL_OW 234
// end ;
30483: GO 30468
30485: POP
30486: POP
// end ;
30487: PPOPN 2
30489: END
// every 0 0$1 trigger StreamModeActive and sBunker do
30490: LD_EXP 66
30494: PUSH
30495: LD_EXP 76
30499: AND
30500: IFFALSE 30520
30502: GO 30504
30504: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
30505: LD_INT 32
30507: PPUSH
30508: LD_OWVAR 2
30512: PPUSH
30513: LD_INT 0
30515: PPUSH
30516: CALL_OW 324
30520: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
30521: LD_EXP 66
30525: PUSH
30526: LD_EXP 77
30530: AND
30531: IFFALSE 30712
30533: GO 30535
30535: DISABLE
30536: LD_INT 0
30538: PPUSH
30539: PPUSH
30540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30541: LD_ADDR_VAR 0 2
30545: PUSH
30546: LD_INT 22
30548: PUSH
30549: LD_OWVAR 2
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 33
30560: PUSH
30561: LD_INT 3
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PPUSH
30572: CALL_OW 69
30576: ST_TO_ADDR
// if not tmp then
30577: LD_VAR 0 2
30581: NOT
30582: IFFALSE 30586
// exit ;
30584: GO 30712
// side := 0 ;
30586: LD_ADDR_VAR 0 3
30590: PUSH
30591: LD_INT 0
30593: ST_TO_ADDR
// for i := 1 to 8 do
30594: LD_ADDR_VAR 0 1
30598: PUSH
30599: DOUBLE
30600: LD_INT 1
30602: DEC
30603: ST_TO_ADDR
30604: LD_INT 8
30606: PUSH
30607: FOR_TO
30608: IFFALSE 30656
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30610: LD_OWVAR 2
30614: PUSH
30615: LD_VAR 0 1
30619: NONEQUAL
30620: PUSH
30621: LD_OWVAR 2
30625: PPUSH
30626: LD_VAR 0 1
30630: PPUSH
30631: CALL_OW 81
30635: PUSH
30636: LD_INT 2
30638: EQUAL
30639: AND
30640: IFFALSE 30654
// begin side := i ;
30642: LD_ADDR_VAR 0 3
30646: PUSH
30647: LD_VAR 0 1
30651: ST_TO_ADDR
// break ;
30652: GO 30656
// end ;
30654: GO 30607
30656: POP
30657: POP
// if not side then
30658: LD_VAR 0 3
30662: NOT
30663: IFFALSE 30667
// exit ;
30665: GO 30712
// for i := 1 to tmp do
30667: LD_ADDR_VAR 0 1
30671: PUSH
30672: DOUBLE
30673: LD_INT 1
30675: DEC
30676: ST_TO_ADDR
30677: LD_VAR 0 2
30681: PUSH
30682: FOR_TO
30683: IFFALSE 30710
// if Prob ( 60 ) then
30685: LD_INT 60
30687: PPUSH
30688: CALL_OW 13
30692: IFFALSE 30708
// SetSide ( i , side ) ;
30694: LD_VAR 0 1
30698: PPUSH
30699: LD_VAR 0 3
30703: PPUSH
30704: CALL_OW 235
30708: GO 30682
30710: POP
30711: POP
// end ;
30712: PPOPN 3
30714: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
30715: LD_EXP 66
30719: PUSH
30720: LD_EXP 79
30724: AND
30725: IFFALSE 30844
30727: GO 30729
30729: DISABLE
30730: LD_INT 0
30732: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
30733: LD_ADDR_VAR 0 1
30737: PUSH
30738: LD_INT 22
30740: PUSH
30741: LD_OWVAR 2
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 21
30752: PUSH
30753: LD_INT 1
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 3
30762: PUSH
30763: LD_INT 23
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: LIST
30781: PPUSH
30782: CALL_OW 69
30786: PUSH
30787: FOR_IN
30788: IFFALSE 30842
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
30790: LD_VAR 0 1
30794: PPUSH
30795: CALL_OW 257
30799: PUSH
30800: LD_INT 1
30802: PUSH
30803: LD_INT 2
30805: PUSH
30806: LD_INT 3
30808: PUSH
30809: LD_INT 4
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: IN
30818: IFFALSE 30840
// SetClass ( un , rand ( 1 , 4 ) ) ;
30820: LD_VAR 0 1
30824: PPUSH
30825: LD_INT 1
30827: PPUSH
30828: LD_INT 4
30830: PPUSH
30831: CALL_OW 12
30835: PPUSH
30836: CALL_OW 336
30840: GO 30787
30842: POP
30843: POP
// end ;
30844: PPOPN 1
30846: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
30847: LD_EXP 66
30851: PUSH
30852: LD_EXP 78
30856: AND
30857: IFFALSE 30936
30859: GO 30861
30861: DISABLE
30862: LD_INT 0
30864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30865: LD_ADDR_VAR 0 1
30869: PUSH
30870: LD_INT 22
30872: PUSH
30873: LD_OWVAR 2
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 21
30884: PUSH
30885: LD_INT 3
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PPUSH
30896: CALL_OW 69
30900: ST_TO_ADDR
// if not tmp then
30901: LD_VAR 0 1
30905: NOT
30906: IFFALSE 30910
// exit ;
30908: GO 30936
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
30910: LD_VAR 0 1
30914: PUSH
30915: LD_INT 1
30917: PPUSH
30918: LD_VAR 0 1
30922: PPUSH
30923: CALL_OW 12
30927: ARRAY
30928: PPUSH
30929: LD_INT 100
30931: PPUSH
30932: CALL_OW 234
// end ;
30936: PPOPN 1
30938: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
30939: LD_EXP 66
30943: PUSH
30944: LD_EXP 80
30948: AND
30949: IFFALSE 31047
30951: GO 30953
30953: DISABLE
30954: LD_INT 0
30956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30957: LD_ADDR_VAR 0 1
30961: PUSH
30962: LD_INT 22
30964: PUSH
30965: LD_OWVAR 2
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 21
30976: PUSH
30977: LD_INT 1
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PPUSH
30988: CALL_OW 69
30992: ST_TO_ADDR
// if not tmp then
30993: LD_VAR 0 1
30997: NOT
30998: IFFALSE 31002
// exit ;
31000: GO 31047
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
31002: LD_VAR 0 1
31006: PUSH
31007: LD_INT 1
31009: PPUSH
31010: LD_VAR 0 1
31014: PPUSH
31015: CALL_OW 12
31019: ARRAY
31020: PPUSH
31021: LD_INT 1
31023: PPUSH
31024: LD_INT 4
31026: PPUSH
31027: CALL_OW 12
31031: PPUSH
31032: LD_INT 3000
31034: PPUSH
31035: LD_INT 9000
31037: PPUSH
31038: CALL_OW 12
31042: PPUSH
31043: CALL_OW 492
// end ;
31047: PPOPN 1
31049: END
// every 0 0$1 trigger StreamModeActive and sDepot do
31050: LD_EXP 66
31054: PUSH
31055: LD_EXP 81
31059: AND
31060: IFFALSE 31080
31062: GO 31064
31064: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
31065: LD_INT 1
31067: PPUSH
31068: LD_OWVAR 2
31072: PPUSH
31073: LD_INT 0
31075: PPUSH
31076: CALL_OW 324
31080: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
31081: LD_EXP 66
31085: PUSH
31086: LD_EXP 82
31090: AND
31091: IFFALSE 31174
31093: GO 31095
31095: DISABLE
31096: LD_INT 0
31098: PPUSH
31099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
31100: LD_ADDR_VAR 0 2
31104: PUSH
31105: LD_INT 22
31107: PUSH
31108: LD_OWVAR 2
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 21
31119: PUSH
31120: LD_INT 3
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PPUSH
31131: CALL_OW 69
31135: ST_TO_ADDR
// if not tmp then
31136: LD_VAR 0 2
31140: NOT
31141: IFFALSE 31145
// exit ;
31143: GO 31174
// for i in tmp do
31145: LD_ADDR_VAR 0 1
31149: PUSH
31150: LD_VAR 0 2
31154: PUSH
31155: FOR_IN
31156: IFFALSE 31172
// SetBLevel ( i , 10 ) ;
31158: LD_VAR 0 1
31162: PPUSH
31163: LD_INT 10
31165: PPUSH
31166: CALL_OW 241
31170: GO 31155
31172: POP
31173: POP
// end ;
31174: PPOPN 2
31176: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
31177: LD_EXP 66
31181: PUSH
31182: LD_EXP 83
31186: AND
31187: IFFALSE 31298
31189: GO 31191
31191: DISABLE
31192: LD_INT 0
31194: PPUSH
31195: PPUSH
31196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31197: LD_ADDR_VAR 0 3
31201: PUSH
31202: LD_INT 22
31204: PUSH
31205: LD_OWVAR 2
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 25
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PPUSH
31228: CALL_OW 69
31232: ST_TO_ADDR
// if not tmp then
31233: LD_VAR 0 3
31237: NOT
31238: IFFALSE 31242
// exit ;
31240: GO 31298
// un := tmp [ rand ( 1 , tmp ) ] ;
31242: LD_ADDR_VAR 0 2
31246: PUSH
31247: LD_VAR 0 3
31251: PUSH
31252: LD_INT 1
31254: PPUSH
31255: LD_VAR 0 3
31259: PPUSH
31260: CALL_OW 12
31264: ARRAY
31265: ST_TO_ADDR
// if Crawls ( un ) then
31266: LD_VAR 0 2
31270: PPUSH
31271: CALL_OW 318
31275: IFFALSE 31286
// ComWalk ( un ) ;
31277: LD_VAR 0 2
31281: PPUSH
31282: CALL_OW 138
// SetClass ( un , class_sniper ) ;
31286: LD_VAR 0 2
31290: PPUSH
31291: LD_INT 5
31293: PPUSH
31294: CALL_OW 336
// end ;
31298: PPOPN 3
31300: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
31301: LD_EXP 66
31305: PUSH
31306: LD_EXP 84
31310: AND
31311: PUSH
31312: LD_OWVAR 67
31316: PUSH
31317: LD_INT 3
31319: LESS
31320: AND
31321: IFFALSE 31340
31323: GO 31325
31325: DISABLE
// Difficulty := Difficulty + 1 ;
31326: LD_ADDR_OWVAR 67
31330: PUSH
31331: LD_OWVAR 67
31335: PUSH
31336: LD_INT 1
31338: PLUS
31339: ST_TO_ADDR
31340: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
31341: LD_EXP 66
31345: PUSH
31346: LD_EXP 85
31350: AND
31351: IFFALSE 31454
31353: GO 31355
31355: DISABLE
31356: LD_INT 0
31358: PPUSH
// begin for i := 1 to 5 do
31359: LD_ADDR_VAR 0 1
31363: PUSH
31364: DOUBLE
31365: LD_INT 1
31367: DEC
31368: ST_TO_ADDR
31369: LD_INT 5
31371: PUSH
31372: FOR_TO
31373: IFFALSE 31452
// begin uc_nation := nation_nature ;
31375: LD_ADDR_OWVAR 21
31379: PUSH
31380: LD_INT 0
31382: ST_TO_ADDR
// uc_side := 0 ;
31383: LD_ADDR_OWVAR 20
31387: PUSH
31388: LD_INT 0
31390: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31391: LD_ADDR_OWVAR 29
31395: PUSH
31396: LD_INT 12
31398: PUSH
31399: LD_INT 12
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: ST_TO_ADDR
// hc_agressivity := 20 ;
31406: LD_ADDR_OWVAR 35
31410: PUSH
31411: LD_INT 20
31413: ST_TO_ADDR
// hc_class := class_tiger ;
31414: LD_ADDR_OWVAR 28
31418: PUSH
31419: LD_INT 14
31421: ST_TO_ADDR
// hc_gallery :=  ;
31422: LD_ADDR_OWVAR 33
31426: PUSH
31427: LD_STRING 
31429: ST_TO_ADDR
// hc_name :=  ;
31430: LD_ADDR_OWVAR 26
31434: PUSH
31435: LD_STRING 
31437: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
31438: CALL_OW 44
31442: PPUSH
31443: LD_INT 0
31445: PPUSH
31446: CALL_OW 51
// end ;
31450: GO 31372
31452: POP
31453: POP
// end ;
31454: PPOPN 1
31456: END
// every 0 0$1 trigger StreamModeActive and sBomb do
31457: LD_EXP 66
31461: PUSH
31462: LD_EXP 86
31466: AND
31467: IFFALSE 31476
31469: GO 31471
31471: DISABLE
// StreamSibBomb ;
31472: CALL 31477 0 0
31476: END
// export function StreamSibBomb ; var i , x , y ; begin
31477: LD_INT 0
31479: PPUSH
31480: PPUSH
31481: PPUSH
31482: PPUSH
// result := false ;
31483: LD_ADDR_VAR 0 1
31487: PUSH
31488: LD_INT 0
31490: ST_TO_ADDR
// for i := 1 to 16 do
31491: LD_ADDR_VAR 0 2
31495: PUSH
31496: DOUBLE
31497: LD_INT 1
31499: DEC
31500: ST_TO_ADDR
31501: LD_INT 16
31503: PUSH
31504: FOR_TO
31505: IFFALSE 31704
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31507: LD_ADDR_VAR 0 3
31511: PUSH
31512: LD_INT 10
31514: PUSH
31515: LD_INT 20
31517: PUSH
31518: LD_INT 30
31520: PUSH
31521: LD_INT 40
31523: PUSH
31524: LD_INT 50
31526: PUSH
31527: LD_INT 60
31529: PUSH
31530: LD_INT 70
31532: PUSH
31533: LD_INT 80
31535: PUSH
31536: LD_INT 90
31538: PUSH
31539: LD_INT 100
31541: PUSH
31542: LD_INT 110
31544: PUSH
31545: LD_INT 120
31547: PUSH
31548: LD_INT 130
31550: PUSH
31551: LD_INT 140
31553: PUSH
31554: LD_INT 150
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 1
31576: PPUSH
31577: LD_INT 15
31579: PPUSH
31580: CALL_OW 12
31584: ARRAY
31585: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31586: LD_ADDR_VAR 0 4
31590: PUSH
31591: LD_INT 10
31593: PUSH
31594: LD_INT 20
31596: PUSH
31597: LD_INT 30
31599: PUSH
31600: LD_INT 40
31602: PUSH
31603: LD_INT 50
31605: PUSH
31606: LD_INT 60
31608: PUSH
31609: LD_INT 70
31611: PUSH
31612: LD_INT 80
31614: PUSH
31615: LD_INT 90
31617: PUSH
31618: LD_INT 100
31620: PUSH
31621: LD_INT 110
31623: PUSH
31624: LD_INT 120
31626: PUSH
31627: LD_INT 130
31629: PUSH
31630: LD_INT 140
31632: PUSH
31633: LD_INT 150
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: PPUSH
31656: LD_INT 15
31658: PPUSH
31659: CALL_OW 12
31663: ARRAY
31664: ST_TO_ADDR
// if ValidHex ( x , y ) then
31665: LD_VAR 0 3
31669: PPUSH
31670: LD_VAR 0 4
31674: PPUSH
31675: CALL_OW 488
31679: IFFALSE 31702
// begin result := [ x , y ] ;
31681: LD_ADDR_VAR 0 1
31685: PUSH
31686: LD_VAR 0 3
31690: PUSH
31691: LD_VAR 0 4
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: ST_TO_ADDR
// break ;
31700: GO 31704
// end ; end ;
31702: GO 31504
31704: POP
31705: POP
// if result then
31706: LD_VAR 0 1
31710: IFFALSE 31770
// begin ToLua ( playSibBomb() ) ;
31712: LD_STRING playSibBomb()
31714: PPUSH
31715: CALL_OW 559
// wait ( 0 0$14 ) ;
31719: LD_INT 490
31721: PPUSH
31722: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
31726: LD_VAR 0 1
31730: PUSH
31731: LD_INT 1
31733: ARRAY
31734: PPUSH
31735: LD_VAR 0 1
31739: PUSH
31740: LD_INT 2
31742: ARRAY
31743: PPUSH
31744: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
31748: LD_VAR 0 1
31752: PUSH
31753: LD_INT 1
31755: ARRAY
31756: PPUSH
31757: LD_VAR 0 1
31761: PUSH
31762: LD_INT 2
31764: ARRAY
31765: PPUSH
31766: CALL_OW 429
// end ; end ;
31770: LD_VAR 0 1
31774: RET
// every 0 0$1 trigger StreamModeActive and sReset do
31775: LD_EXP 66
31779: PUSH
31780: LD_EXP 88
31784: AND
31785: IFFALSE 31797
31787: GO 31789
31789: DISABLE
// YouLost (  ) ;
31790: LD_STRING 
31792: PPUSH
31793: CALL_OW 104
31797: END
// every 0 0$1 trigger StreamModeActive and sFog do
31798: LD_EXP 66
31802: PUSH
31803: LD_EXP 87
31807: AND
31808: IFFALSE 31822
31810: GO 31812
31812: DISABLE
// FogOff ( your_side ) ;
31813: LD_OWVAR 2
31817: PPUSH
31818: CALL_OW 344
31822: END
// every 0 0$1 trigger StreamModeActive and sSun do
31823: LD_EXP 66
31827: PUSH
31828: LD_EXP 89
31832: AND
31833: IFFALSE 31861
31835: GO 31837
31837: DISABLE
// begin solar_recharge_percent := 0 ;
31838: LD_ADDR_OWVAR 79
31842: PUSH
31843: LD_INT 0
31845: ST_TO_ADDR
// wait ( 5 5$00 ) ;
31846: LD_INT 10500
31848: PPUSH
31849: CALL_OW 67
// solar_recharge_percent := 100 ;
31853: LD_ADDR_OWVAR 79
31857: PUSH
31858: LD_INT 100
31860: ST_TO_ADDR
// end ;
31861: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
31862: LD_EXP 66
31866: PUSH
31867: LD_EXP 90
31871: AND
31872: IFFALSE 32111
31874: GO 31876
31876: DISABLE
31877: LD_INT 0
31879: PPUSH
31880: PPUSH
31881: PPUSH
// begin tmp := [ ] ;
31882: LD_ADDR_VAR 0 3
31886: PUSH
31887: EMPTY
31888: ST_TO_ADDR
// for i := 1 to 6 do
31889: LD_ADDR_VAR 0 1
31893: PUSH
31894: DOUBLE
31895: LD_INT 1
31897: DEC
31898: ST_TO_ADDR
31899: LD_INT 6
31901: PUSH
31902: FOR_TO
31903: IFFALSE 32008
// begin uc_nation := nation_nature ;
31905: LD_ADDR_OWVAR 21
31909: PUSH
31910: LD_INT 0
31912: ST_TO_ADDR
// uc_side := 0 ;
31913: LD_ADDR_OWVAR 20
31917: PUSH
31918: LD_INT 0
31920: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31921: LD_ADDR_OWVAR 29
31925: PUSH
31926: LD_INT 12
31928: PUSH
31929: LD_INT 12
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: ST_TO_ADDR
// hc_agressivity := 20 ;
31936: LD_ADDR_OWVAR 35
31940: PUSH
31941: LD_INT 20
31943: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
31944: LD_ADDR_OWVAR 28
31948: PUSH
31949: LD_INT 17
31951: ST_TO_ADDR
// hc_gallery :=  ;
31952: LD_ADDR_OWVAR 33
31956: PUSH
31957: LD_STRING 
31959: ST_TO_ADDR
// hc_name :=  ;
31960: LD_ADDR_OWVAR 26
31964: PUSH
31965: LD_STRING 
31967: ST_TO_ADDR
// un := CreateHuman ;
31968: LD_ADDR_VAR 0 2
31972: PUSH
31973: CALL_OW 44
31977: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
31978: LD_VAR 0 2
31982: PPUSH
31983: LD_INT 1
31985: PPUSH
31986: CALL_OW 51
// tmp := tmp ^ un ;
31990: LD_ADDR_VAR 0 3
31994: PUSH
31995: LD_VAR 0 3
31999: PUSH
32000: LD_VAR 0 2
32004: ADD
32005: ST_TO_ADDR
// end ;
32006: GO 31902
32008: POP
32009: POP
// repeat wait ( 0 0$1 ) ;
32010: LD_INT 35
32012: PPUSH
32013: CALL_OW 67
// for un in tmp do
32017: LD_ADDR_VAR 0 2
32021: PUSH
32022: LD_VAR 0 3
32026: PUSH
32027: FOR_IN
32028: IFFALSE 32102
// begin if IsDead ( un ) then
32030: LD_VAR 0 2
32034: PPUSH
32035: CALL_OW 301
32039: IFFALSE 32059
// begin tmp := tmp diff un ;
32041: LD_ADDR_VAR 0 3
32045: PUSH
32046: LD_VAR 0 3
32050: PUSH
32051: LD_VAR 0 2
32055: DIFF
32056: ST_TO_ADDR
// continue ;
32057: GO 32027
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
32059: LD_VAR 0 2
32063: PPUSH
32064: LD_INT 3
32066: PUSH
32067: LD_INT 22
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PPUSH
32081: CALL_OW 69
32085: PPUSH
32086: LD_VAR 0 2
32090: PPUSH
32091: CALL_OW 74
32095: PPUSH
32096: CALL_OW 115
// end ;
32100: GO 32027
32102: POP
32103: POP
// until not tmp ;
32104: LD_VAR 0 3
32108: NOT
32109: IFFALSE 32010
// end ;
32111: PPOPN 3
32113: END
// every 0 0$1 trigger StreamModeActive and sTroll do
32114: LD_EXP 66
32118: PUSH
32119: LD_EXP 91
32123: AND
32124: IFFALSE 32178
32126: GO 32128
32128: DISABLE
// begin ToLua ( displayTroll(); ) ;
32129: LD_STRING displayTroll();
32131: PPUSH
32132: CALL_OW 559
// wait ( 3 3$00 ) ;
32136: LD_INT 6300
32138: PPUSH
32139: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32143: LD_STRING hideTroll();
32145: PPUSH
32146: CALL_OW 559
// wait ( 1 1$00 ) ;
32150: LD_INT 2100
32152: PPUSH
32153: CALL_OW 67
// ToLua ( displayTroll(); ) ;
32157: LD_STRING displayTroll();
32159: PPUSH
32160: CALL_OW 559
// wait ( 1 1$00 ) ;
32164: LD_INT 2100
32166: PPUSH
32167: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32171: LD_STRING hideTroll();
32173: PPUSH
32174: CALL_OW 559
// end ;
32178: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
32179: LD_EXP 66
32183: PUSH
32184: LD_EXP 92
32188: AND
32189: IFFALSE 32252
32191: GO 32193
32193: DISABLE
32194: LD_INT 0
32196: PPUSH
// begin p := 0 ;
32197: LD_ADDR_VAR 0 1
32201: PUSH
32202: LD_INT 0
32204: ST_TO_ADDR
// repeat game_speed := 1 ;
32205: LD_ADDR_OWVAR 65
32209: PUSH
32210: LD_INT 1
32212: ST_TO_ADDR
// wait ( 0 0$1 ) ;
32213: LD_INT 35
32215: PPUSH
32216: CALL_OW 67
// p := p + 1 ;
32220: LD_ADDR_VAR 0 1
32224: PUSH
32225: LD_VAR 0 1
32229: PUSH
32230: LD_INT 1
32232: PLUS
32233: ST_TO_ADDR
// until p >= 60 ;
32234: LD_VAR 0 1
32238: PUSH
32239: LD_INT 60
32241: GREATEREQUAL
32242: IFFALSE 32205
// game_speed := 4 ;
32244: LD_ADDR_OWVAR 65
32248: PUSH
32249: LD_INT 4
32251: ST_TO_ADDR
// end ;
32252: PPOPN 1
32254: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
32255: LD_EXP 66
32259: PUSH
32260: LD_EXP 93
32264: AND
32265: IFFALSE 32411
32267: GO 32269
32269: DISABLE
32270: LD_INT 0
32272: PPUSH
32273: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32274: LD_ADDR_VAR 0 1
32278: PUSH
32279: LD_INT 22
32281: PUSH
32282: LD_OWVAR 2
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 2
32293: PUSH
32294: LD_INT 30
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 30
32306: PUSH
32307: LD_INT 1
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: LIST
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PPUSH
32323: CALL_OW 69
32327: ST_TO_ADDR
// if not depot then
32328: LD_VAR 0 1
32332: NOT
32333: IFFALSE 32337
// exit ;
32335: GO 32411
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
32337: LD_ADDR_VAR 0 2
32341: PUSH
32342: LD_VAR 0 1
32346: PUSH
32347: LD_INT 1
32349: PPUSH
32350: LD_VAR 0 1
32354: PPUSH
32355: CALL_OW 12
32359: ARRAY
32360: PPUSH
32361: CALL_OW 274
32365: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
32366: LD_VAR 0 2
32370: PPUSH
32371: LD_INT 1
32373: PPUSH
32374: LD_INT 0
32376: PPUSH
32377: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
32381: LD_VAR 0 2
32385: PPUSH
32386: LD_INT 2
32388: PPUSH
32389: LD_INT 0
32391: PPUSH
32392: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
32396: LD_VAR 0 2
32400: PPUSH
32401: LD_INT 3
32403: PPUSH
32404: LD_INT 0
32406: PPUSH
32407: CALL_OW 277
// end ;
32411: PPOPN 2
32413: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
32414: LD_EXP 66
32418: PUSH
32419: LD_EXP 94
32423: AND
32424: IFFALSE 32521
32426: GO 32428
32428: DISABLE
32429: LD_INT 0
32431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32432: LD_ADDR_VAR 0 1
32436: PUSH
32437: LD_INT 22
32439: PUSH
32440: LD_OWVAR 2
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 21
32451: PUSH
32452: LD_INT 1
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 3
32461: PUSH
32462: LD_INT 23
32464: PUSH
32465: LD_INT 0
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: LIST
32480: PPUSH
32481: CALL_OW 69
32485: ST_TO_ADDR
// if not tmp then
32486: LD_VAR 0 1
32490: NOT
32491: IFFALSE 32495
// exit ;
32493: GO 32521
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
32495: LD_VAR 0 1
32499: PUSH
32500: LD_INT 1
32502: PPUSH
32503: LD_VAR 0 1
32507: PPUSH
32508: CALL_OW 12
32512: ARRAY
32513: PPUSH
32514: LD_INT 200
32516: PPUSH
32517: CALL_OW 234
// end ;
32521: PPOPN 1
32523: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
32524: LD_EXP 66
32528: PUSH
32529: LD_EXP 95
32533: AND
32534: IFFALSE 32613
32536: GO 32538
32538: DISABLE
32539: LD_INT 0
32541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32542: LD_ADDR_VAR 0 1
32546: PUSH
32547: LD_INT 22
32549: PUSH
32550: LD_OWVAR 2
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 21
32561: PUSH
32562: LD_INT 2
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PPUSH
32573: CALL_OW 69
32577: ST_TO_ADDR
// if not tmp then
32578: LD_VAR 0 1
32582: NOT
32583: IFFALSE 32587
// exit ;
32585: GO 32613
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32587: LD_VAR 0 1
32591: PUSH
32592: LD_INT 1
32594: PPUSH
32595: LD_VAR 0 1
32599: PPUSH
32600: CALL_OW 12
32604: ARRAY
32605: PPUSH
32606: LD_INT 60
32608: PPUSH
32609: CALL_OW 234
// end ;
32613: PPOPN 1
32615: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32616: LD_EXP 66
32620: PUSH
32621: LD_EXP 96
32625: AND
32626: IFFALSE 32725
32628: GO 32630
32630: DISABLE
32631: LD_INT 0
32633: PPUSH
32634: PPUSH
// begin enable ;
32635: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
32636: LD_ADDR_VAR 0 1
32640: PUSH
32641: LD_INT 22
32643: PUSH
32644: LD_OWVAR 2
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 61
32655: PUSH
32656: EMPTY
32657: LIST
32658: PUSH
32659: LD_INT 33
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: LIST
32673: PPUSH
32674: CALL_OW 69
32678: ST_TO_ADDR
// if not tmp then
32679: LD_VAR 0 1
32683: NOT
32684: IFFALSE 32688
// exit ;
32686: GO 32725
// for i in tmp do
32688: LD_ADDR_VAR 0 2
32692: PUSH
32693: LD_VAR 0 1
32697: PUSH
32698: FOR_IN
32699: IFFALSE 32723
// if IsControledBy ( i ) then
32701: LD_VAR 0 2
32705: PPUSH
32706: CALL_OW 312
32710: IFFALSE 32721
// ComUnlink ( i ) ;
32712: LD_VAR 0 2
32716: PPUSH
32717: CALL_OW 136
32721: GO 32698
32723: POP
32724: POP
// end ;
32725: PPOPN 2
32727: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
32728: LD_EXP 66
32732: PUSH
32733: LD_EXP 97
32737: AND
32738: IFFALSE 32878
32740: GO 32742
32742: DISABLE
32743: LD_INT 0
32745: PPUSH
32746: PPUSH
// begin ToLua ( displayPowell(); ) ;
32747: LD_STRING displayPowell();
32749: PPUSH
32750: CALL_OW 559
// uc_side := 0 ;
32754: LD_ADDR_OWVAR 20
32758: PUSH
32759: LD_INT 0
32761: ST_TO_ADDR
// uc_nation := 2 ;
32762: LD_ADDR_OWVAR 21
32766: PUSH
32767: LD_INT 2
32769: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
32770: LD_ADDR_OWVAR 37
32774: PUSH
32775: LD_INT 14
32777: ST_TO_ADDR
// vc_engine := engine_siberite ;
32778: LD_ADDR_OWVAR 39
32782: PUSH
32783: LD_INT 3
32785: ST_TO_ADDR
// vc_control := control_apeman ;
32786: LD_ADDR_OWVAR 38
32790: PUSH
32791: LD_INT 5
32793: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
32794: LD_ADDR_OWVAR 40
32798: PUSH
32799: LD_INT 29
32801: ST_TO_ADDR
// un := CreateVehicle ;
32802: LD_ADDR_VAR 0 2
32806: PUSH
32807: CALL_OW 45
32811: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32812: LD_VAR 0 2
32816: PPUSH
32817: LD_INT 1
32819: PPUSH
32820: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32824: LD_INT 35
32826: PPUSH
32827: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32831: LD_VAR 0 2
32835: PPUSH
32836: LD_INT 22
32838: PUSH
32839: LD_OWVAR 2
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PPUSH
32848: CALL_OW 69
32852: PPUSH
32853: LD_VAR 0 2
32857: PPUSH
32858: CALL_OW 74
32862: PPUSH
32863: CALL_OW 115
// until IsDead ( un ) ;
32867: LD_VAR 0 2
32871: PPUSH
32872: CALL_OW 301
32876: IFFALSE 32824
// end ;
32878: PPOPN 2
32880: END
// every 0 0$1 trigger StreamModeActive and sStu do
32881: LD_EXP 66
32885: PUSH
32886: LD_EXP 105
32890: AND
32891: IFFALSE 32907
32893: GO 32895
32895: DISABLE
// begin ToLua ( displayStucuk(); ) ;
32896: LD_STRING displayStucuk();
32898: PPUSH
32899: CALL_OW 559
// ResetFog ;
32903: CALL_OW 335
// end ;
32907: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
32908: LD_EXP 66
32912: PUSH
32913: LD_EXP 98
32917: AND
32918: IFFALSE 33059
32920: GO 32922
32922: DISABLE
32923: LD_INT 0
32925: PPUSH
32926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32927: LD_ADDR_VAR 0 2
32931: PUSH
32932: LD_INT 22
32934: PUSH
32935: LD_OWVAR 2
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 21
32946: PUSH
32947: LD_INT 1
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PPUSH
32958: CALL_OW 69
32962: ST_TO_ADDR
// if not tmp then
32963: LD_VAR 0 2
32967: NOT
32968: IFFALSE 32972
// exit ;
32970: GO 33059
// un := tmp [ rand ( 1 , tmp ) ] ;
32972: LD_ADDR_VAR 0 1
32976: PUSH
32977: LD_VAR 0 2
32981: PUSH
32982: LD_INT 1
32984: PPUSH
32985: LD_VAR 0 2
32989: PPUSH
32990: CALL_OW 12
32994: ARRAY
32995: ST_TO_ADDR
// SetSide ( un , 0 ) ;
32996: LD_VAR 0 1
33000: PPUSH
33001: LD_INT 0
33003: PPUSH
33004: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
33008: LD_VAR 0 1
33012: PPUSH
33013: LD_OWVAR 3
33017: PUSH
33018: LD_VAR 0 1
33022: DIFF
33023: PPUSH
33024: LD_VAR 0 1
33028: PPUSH
33029: CALL_OW 74
33033: PPUSH
33034: CALL_OW 115
// wait ( 0 0$20 ) ;
33038: LD_INT 700
33040: PPUSH
33041: CALL_OW 67
// SetSide ( un , your_side ) ;
33045: LD_VAR 0 1
33049: PPUSH
33050: LD_OWVAR 2
33054: PPUSH
33055: CALL_OW 235
// end ;
33059: PPOPN 2
33061: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
33062: LD_EXP 66
33066: PUSH
33067: LD_EXP 99
33071: AND
33072: IFFALSE 33178
33074: GO 33076
33076: DISABLE
33077: LD_INT 0
33079: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33080: LD_ADDR_VAR 0 1
33084: PUSH
33085: LD_INT 22
33087: PUSH
33088: LD_OWVAR 2
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 2
33099: PUSH
33100: LD_INT 30
33102: PUSH
33103: LD_INT 0
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 30
33112: PUSH
33113: LD_INT 1
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: LIST
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PPUSH
33129: CALL_OW 69
33133: ST_TO_ADDR
// if not depot then
33134: LD_VAR 0 1
33138: NOT
33139: IFFALSE 33143
// exit ;
33141: GO 33178
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
33143: LD_VAR 0 1
33147: PUSH
33148: LD_INT 1
33150: ARRAY
33151: PPUSH
33152: CALL_OW 250
33156: PPUSH
33157: LD_VAR 0 1
33161: PUSH
33162: LD_INT 1
33164: ARRAY
33165: PPUSH
33166: CALL_OW 251
33170: PPUSH
33171: LD_INT 70
33173: PPUSH
33174: CALL_OW 495
// end ;
33178: PPOPN 1
33180: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
33181: LD_EXP 66
33185: PUSH
33186: LD_EXP 100
33190: AND
33191: IFFALSE 33402
33193: GO 33195
33195: DISABLE
33196: LD_INT 0
33198: PPUSH
33199: PPUSH
33200: PPUSH
33201: PPUSH
33202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33203: LD_ADDR_VAR 0 5
33207: PUSH
33208: LD_INT 22
33210: PUSH
33211: LD_OWVAR 2
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 21
33222: PUSH
33223: LD_INT 1
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PPUSH
33234: CALL_OW 69
33238: ST_TO_ADDR
// if not tmp then
33239: LD_VAR 0 5
33243: NOT
33244: IFFALSE 33248
// exit ;
33246: GO 33402
// for i in tmp do
33248: LD_ADDR_VAR 0 1
33252: PUSH
33253: LD_VAR 0 5
33257: PUSH
33258: FOR_IN
33259: IFFALSE 33400
// begin d := rand ( 0 , 5 ) ;
33261: LD_ADDR_VAR 0 4
33265: PUSH
33266: LD_INT 0
33268: PPUSH
33269: LD_INT 5
33271: PPUSH
33272: CALL_OW 12
33276: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
33277: LD_ADDR_VAR 0 2
33281: PUSH
33282: LD_VAR 0 1
33286: PPUSH
33287: CALL_OW 250
33291: PPUSH
33292: LD_VAR 0 4
33296: PPUSH
33297: LD_INT 3
33299: PPUSH
33300: LD_INT 12
33302: PPUSH
33303: CALL_OW 12
33307: PPUSH
33308: CALL_OW 272
33312: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
33313: LD_ADDR_VAR 0 3
33317: PUSH
33318: LD_VAR 0 1
33322: PPUSH
33323: CALL_OW 251
33327: PPUSH
33328: LD_VAR 0 4
33332: PPUSH
33333: LD_INT 3
33335: PPUSH
33336: LD_INT 12
33338: PPUSH
33339: CALL_OW 12
33343: PPUSH
33344: CALL_OW 273
33348: ST_TO_ADDR
// if ValidHex ( x , y ) then
33349: LD_VAR 0 2
33353: PPUSH
33354: LD_VAR 0 3
33358: PPUSH
33359: CALL_OW 488
33363: IFFALSE 33398
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
33365: LD_VAR 0 1
33369: PPUSH
33370: LD_VAR 0 2
33374: PPUSH
33375: LD_VAR 0 3
33379: PPUSH
33380: LD_INT 3
33382: PPUSH
33383: LD_INT 6
33385: PPUSH
33386: CALL_OW 12
33390: PPUSH
33391: LD_INT 1
33393: PPUSH
33394: CALL_OW 483
// end ;
33398: GO 33258
33400: POP
33401: POP
// end ;
33402: PPOPN 5
33404: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
33405: LD_EXP 66
33409: PUSH
33410: LD_EXP 101
33414: AND
33415: IFFALSE 33509
33417: GO 33419
33419: DISABLE
33420: LD_INT 0
33422: PPUSH
33423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
33424: LD_ADDR_VAR 0 2
33428: PUSH
33429: LD_INT 22
33431: PUSH
33432: LD_OWVAR 2
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 32
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 21
33453: PUSH
33454: LD_INT 2
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: LIST
33465: PPUSH
33466: CALL_OW 69
33470: ST_TO_ADDR
// if not tmp then
33471: LD_VAR 0 2
33475: NOT
33476: IFFALSE 33480
// exit ;
33478: GO 33509
// for i in tmp do
33480: LD_ADDR_VAR 0 1
33484: PUSH
33485: LD_VAR 0 2
33489: PUSH
33490: FOR_IN
33491: IFFALSE 33507
// SetFuel ( i , 0 ) ;
33493: LD_VAR 0 1
33497: PPUSH
33498: LD_INT 0
33500: PPUSH
33501: CALL_OW 240
33505: GO 33490
33507: POP
33508: POP
// end ;
33509: PPOPN 2
33511: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
33512: LD_EXP 66
33516: PUSH
33517: LD_EXP 102
33521: AND
33522: IFFALSE 33588
33524: GO 33526
33526: DISABLE
33527: LD_INT 0
33529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33530: LD_ADDR_VAR 0 1
33534: PUSH
33535: LD_INT 22
33537: PUSH
33538: LD_OWVAR 2
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 30
33549: PUSH
33550: LD_INT 29
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PPUSH
33561: CALL_OW 69
33565: ST_TO_ADDR
// if not tmp then
33566: LD_VAR 0 1
33570: NOT
33571: IFFALSE 33575
// exit ;
33573: GO 33588
// DestroyUnit ( tmp [ 1 ] ) ;
33575: LD_VAR 0 1
33579: PUSH
33580: LD_INT 1
33582: ARRAY
33583: PPUSH
33584: CALL_OW 65
// end ;
33588: PPOPN 1
33590: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33591: LD_EXP 66
33595: PUSH
33596: LD_EXP 104
33600: AND
33601: IFFALSE 33730
33603: GO 33605
33605: DISABLE
33606: LD_INT 0
33608: PPUSH
// begin uc_side := 0 ;
33609: LD_ADDR_OWVAR 20
33613: PUSH
33614: LD_INT 0
33616: ST_TO_ADDR
// uc_nation := nation_arabian ;
33617: LD_ADDR_OWVAR 21
33621: PUSH
33622: LD_INT 2
33624: ST_TO_ADDR
// hc_gallery :=  ;
33625: LD_ADDR_OWVAR 33
33629: PUSH
33630: LD_STRING 
33632: ST_TO_ADDR
// hc_name :=  ;
33633: LD_ADDR_OWVAR 26
33637: PUSH
33638: LD_STRING 
33640: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
33641: LD_INT 1
33643: PPUSH
33644: LD_INT 11
33646: PPUSH
33647: LD_INT 10
33649: PPUSH
33650: CALL_OW 380
// un := CreateHuman ;
33654: LD_ADDR_VAR 0 1
33658: PUSH
33659: CALL_OW 44
33663: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33664: LD_VAR 0 1
33668: PPUSH
33669: LD_INT 1
33671: PPUSH
33672: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33676: LD_INT 35
33678: PPUSH
33679: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33683: LD_VAR 0 1
33687: PPUSH
33688: LD_INT 22
33690: PUSH
33691: LD_OWVAR 2
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PPUSH
33700: CALL_OW 69
33704: PPUSH
33705: LD_VAR 0 1
33709: PPUSH
33710: CALL_OW 74
33714: PPUSH
33715: CALL_OW 115
// until IsDead ( un ) ;
33719: LD_VAR 0 1
33723: PPUSH
33724: CALL_OW 301
33728: IFFALSE 33676
// end ;
33730: PPOPN 1
33732: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
33733: LD_EXP 66
33737: PUSH
33738: LD_EXP 106
33742: AND
33743: IFFALSE 33755
33745: GO 33747
33747: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
33748: LD_STRING earthquake(getX(game), 0, 32)
33750: PPUSH
33751: CALL_OW 559
33755: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
33756: LD_EXP 66
33760: PUSH
33761: LD_EXP 107
33765: AND
33766: IFFALSE 33857
33768: GO 33770
33770: DISABLE
33771: LD_INT 0
33773: PPUSH
// begin enable ;
33774: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
33775: LD_ADDR_VAR 0 1
33779: PUSH
33780: LD_INT 22
33782: PUSH
33783: LD_OWVAR 2
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 21
33794: PUSH
33795: LD_INT 2
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 33
33804: PUSH
33805: LD_INT 3
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: LIST
33816: PPUSH
33817: CALL_OW 69
33821: ST_TO_ADDR
// if not tmp then
33822: LD_VAR 0 1
33826: NOT
33827: IFFALSE 33831
// exit ;
33829: GO 33857
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33831: LD_VAR 0 1
33835: PUSH
33836: LD_INT 1
33838: PPUSH
33839: LD_VAR 0 1
33843: PPUSH
33844: CALL_OW 12
33848: ARRAY
33849: PPUSH
33850: LD_INT 1
33852: PPUSH
33853: CALL_OW 234
// end ;
33857: PPOPN 1
33859: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
33860: LD_EXP 66
33864: PUSH
33865: LD_EXP 108
33869: AND
33870: IFFALSE 34011
33872: GO 33874
33874: DISABLE
33875: LD_INT 0
33877: PPUSH
33878: PPUSH
33879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33880: LD_ADDR_VAR 0 3
33884: PUSH
33885: LD_INT 22
33887: PUSH
33888: LD_OWVAR 2
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 25
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PPUSH
33911: CALL_OW 69
33915: ST_TO_ADDR
// if not tmp then
33916: LD_VAR 0 3
33920: NOT
33921: IFFALSE 33925
// exit ;
33923: GO 34011
// un := tmp [ rand ( 1 , tmp ) ] ;
33925: LD_ADDR_VAR 0 2
33929: PUSH
33930: LD_VAR 0 3
33934: PUSH
33935: LD_INT 1
33937: PPUSH
33938: LD_VAR 0 3
33942: PPUSH
33943: CALL_OW 12
33947: ARRAY
33948: ST_TO_ADDR
// if Crawls ( un ) then
33949: LD_VAR 0 2
33953: PPUSH
33954: CALL_OW 318
33958: IFFALSE 33969
// ComWalk ( un ) ;
33960: LD_VAR 0 2
33964: PPUSH
33965: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
33969: LD_VAR 0 2
33973: PPUSH
33974: LD_INT 9
33976: PPUSH
33977: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
33981: LD_INT 28
33983: PPUSH
33984: LD_OWVAR 2
33988: PPUSH
33989: LD_INT 2
33991: PPUSH
33992: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
33996: LD_INT 29
33998: PPUSH
33999: LD_OWVAR 2
34003: PPUSH
34004: LD_INT 2
34006: PPUSH
34007: CALL_OW 322
// end ;
34011: PPOPN 3
34013: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
34014: LD_EXP 66
34018: PUSH
34019: LD_EXP 109
34023: AND
34024: IFFALSE 34135
34026: GO 34028
34028: DISABLE
34029: LD_INT 0
34031: PPUSH
34032: PPUSH
34033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34034: LD_ADDR_VAR 0 3
34038: PUSH
34039: LD_INT 22
34041: PUSH
34042: LD_OWVAR 2
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 25
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PPUSH
34065: CALL_OW 69
34069: ST_TO_ADDR
// if not tmp then
34070: LD_VAR 0 3
34074: NOT
34075: IFFALSE 34079
// exit ;
34077: GO 34135
// un := tmp [ rand ( 1 , tmp ) ] ;
34079: LD_ADDR_VAR 0 2
34083: PUSH
34084: LD_VAR 0 3
34088: PUSH
34089: LD_INT 1
34091: PPUSH
34092: LD_VAR 0 3
34096: PPUSH
34097: CALL_OW 12
34101: ARRAY
34102: ST_TO_ADDR
// if Crawls ( un ) then
34103: LD_VAR 0 2
34107: PPUSH
34108: CALL_OW 318
34112: IFFALSE 34123
// ComWalk ( un ) ;
34114: LD_VAR 0 2
34118: PPUSH
34119: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34123: LD_VAR 0 2
34127: PPUSH
34128: LD_INT 8
34130: PPUSH
34131: CALL_OW 336
// end ;
34135: PPOPN 3
34137: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
34138: LD_EXP 66
34142: PUSH
34143: LD_EXP 110
34147: AND
34148: IFFALSE 34292
34150: GO 34152
34152: DISABLE
34153: LD_INT 0
34155: PPUSH
34156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
34157: LD_ADDR_VAR 0 2
34161: PUSH
34162: LD_INT 22
34164: PUSH
34165: LD_OWVAR 2
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 21
34176: PUSH
34177: LD_INT 2
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 2
34186: PUSH
34187: LD_INT 34
34189: PUSH
34190: LD_INT 12
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 34
34199: PUSH
34200: LD_INT 51
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 34
34209: PUSH
34210: LD_INT 32
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: LIST
34227: PPUSH
34228: CALL_OW 69
34232: ST_TO_ADDR
// if not tmp then
34233: LD_VAR 0 2
34237: NOT
34238: IFFALSE 34242
// exit ;
34240: GO 34292
// for i in tmp do
34242: LD_ADDR_VAR 0 1
34246: PUSH
34247: LD_VAR 0 2
34251: PUSH
34252: FOR_IN
34253: IFFALSE 34290
// if GetCargo ( i , mat_artifact ) = 0 then
34255: LD_VAR 0 1
34259: PPUSH
34260: LD_INT 4
34262: PPUSH
34263: CALL_OW 289
34267: PUSH
34268: LD_INT 0
34270: EQUAL
34271: IFFALSE 34288
// SetCargo ( i , mat_siberit , 100 ) ;
34273: LD_VAR 0 1
34277: PPUSH
34278: LD_INT 3
34280: PPUSH
34281: LD_INT 100
34283: PPUSH
34284: CALL_OW 290
34288: GO 34252
34290: POP
34291: POP
// end ;
34292: PPOPN 2
34294: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
34295: LD_EXP 66
34299: PUSH
34300: LD_EXP 111
34304: AND
34305: IFFALSE 34488
34307: GO 34309
34309: DISABLE
34310: LD_INT 0
34312: PPUSH
34313: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34314: LD_ADDR_VAR 0 2
34318: PUSH
34319: LD_INT 22
34321: PUSH
34322: LD_OWVAR 2
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PPUSH
34331: CALL_OW 69
34335: ST_TO_ADDR
// if not tmp then
34336: LD_VAR 0 2
34340: NOT
34341: IFFALSE 34345
// exit ;
34343: GO 34488
// for i := 1 to 2 do
34345: LD_ADDR_VAR 0 1
34349: PUSH
34350: DOUBLE
34351: LD_INT 1
34353: DEC
34354: ST_TO_ADDR
34355: LD_INT 2
34357: PUSH
34358: FOR_TO
34359: IFFALSE 34486
// begin uc_side := your_side ;
34361: LD_ADDR_OWVAR 20
34365: PUSH
34366: LD_OWVAR 2
34370: ST_TO_ADDR
// uc_nation := nation_american ;
34371: LD_ADDR_OWVAR 21
34375: PUSH
34376: LD_INT 1
34378: ST_TO_ADDR
// vc_chassis := us_morphling ;
34379: LD_ADDR_OWVAR 37
34383: PUSH
34384: LD_INT 5
34386: ST_TO_ADDR
// vc_engine := engine_siberite ;
34387: LD_ADDR_OWVAR 39
34391: PUSH
34392: LD_INT 3
34394: ST_TO_ADDR
// vc_control := control_computer ;
34395: LD_ADDR_OWVAR 38
34399: PUSH
34400: LD_INT 3
34402: ST_TO_ADDR
// vc_weapon := us_double_laser ;
34403: LD_ADDR_OWVAR 40
34407: PUSH
34408: LD_INT 10
34410: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
34411: LD_VAR 0 2
34415: PUSH
34416: LD_INT 1
34418: ARRAY
34419: PPUSH
34420: CALL_OW 310
34424: NOT
34425: IFFALSE 34472
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
34427: CALL_OW 45
34431: PPUSH
34432: LD_VAR 0 2
34436: PUSH
34437: LD_INT 1
34439: ARRAY
34440: PPUSH
34441: CALL_OW 250
34445: PPUSH
34446: LD_VAR 0 2
34450: PUSH
34451: LD_INT 1
34453: ARRAY
34454: PPUSH
34455: CALL_OW 251
34459: PPUSH
34460: LD_INT 12
34462: PPUSH
34463: LD_INT 1
34465: PPUSH
34466: CALL_OW 50
34470: GO 34484
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
34472: CALL_OW 45
34476: PPUSH
34477: LD_INT 1
34479: PPUSH
34480: CALL_OW 51
// end ;
34484: GO 34358
34486: POP
34487: POP
// end ;
34488: PPOPN 2
34490: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
34491: LD_EXP 66
34495: PUSH
34496: LD_EXP 112
34500: AND
34501: IFFALSE 34723
34503: GO 34505
34505: DISABLE
34506: LD_INT 0
34508: PPUSH
34509: PPUSH
34510: PPUSH
34511: PPUSH
34512: PPUSH
34513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34514: LD_ADDR_VAR 0 6
34518: PUSH
34519: LD_INT 22
34521: PUSH
34522: LD_OWVAR 2
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 21
34533: PUSH
34534: LD_INT 1
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: LD_INT 23
34546: PUSH
34547: LD_INT 0
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: LIST
34562: PPUSH
34563: CALL_OW 69
34567: ST_TO_ADDR
// if not tmp then
34568: LD_VAR 0 6
34572: NOT
34573: IFFALSE 34577
// exit ;
34575: GO 34723
// s1 := rand ( 1 , 4 ) ;
34577: LD_ADDR_VAR 0 2
34581: PUSH
34582: LD_INT 1
34584: PPUSH
34585: LD_INT 4
34587: PPUSH
34588: CALL_OW 12
34592: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34593: LD_ADDR_VAR 0 4
34597: PUSH
34598: LD_VAR 0 6
34602: PUSH
34603: LD_INT 1
34605: ARRAY
34606: PPUSH
34607: LD_VAR 0 2
34611: PPUSH
34612: CALL_OW 259
34616: ST_TO_ADDR
// if s1 = 1 then
34617: LD_VAR 0 2
34621: PUSH
34622: LD_INT 1
34624: EQUAL
34625: IFFALSE 34645
// s2 := rand ( 2 , 4 ) else
34627: LD_ADDR_VAR 0 3
34631: PUSH
34632: LD_INT 2
34634: PPUSH
34635: LD_INT 4
34637: PPUSH
34638: CALL_OW 12
34642: ST_TO_ADDR
34643: GO 34653
// s2 := 1 ;
34645: LD_ADDR_VAR 0 3
34649: PUSH
34650: LD_INT 1
34652: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
34653: LD_ADDR_VAR 0 5
34657: PUSH
34658: LD_VAR 0 6
34662: PUSH
34663: LD_INT 1
34665: ARRAY
34666: PPUSH
34667: LD_VAR 0 3
34671: PPUSH
34672: CALL_OW 259
34676: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
34677: LD_VAR 0 6
34681: PUSH
34682: LD_INT 1
34684: ARRAY
34685: PPUSH
34686: LD_VAR 0 2
34690: PPUSH
34691: LD_VAR 0 5
34695: PPUSH
34696: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
34700: LD_VAR 0 6
34704: PUSH
34705: LD_INT 1
34707: ARRAY
34708: PPUSH
34709: LD_VAR 0 3
34713: PPUSH
34714: LD_VAR 0 4
34718: PPUSH
34719: CALL_OW 237
// end ;
34723: PPOPN 6
34725: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
34726: LD_EXP 66
34730: PUSH
34731: LD_EXP 113
34735: AND
34736: IFFALSE 34815
34738: GO 34740
34740: DISABLE
34741: LD_INT 0
34743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
34744: LD_ADDR_VAR 0 1
34748: PUSH
34749: LD_INT 22
34751: PUSH
34752: LD_OWVAR 2
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 30
34763: PUSH
34764: LD_INT 3
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PPUSH
34775: CALL_OW 69
34779: ST_TO_ADDR
// if not tmp then
34780: LD_VAR 0 1
34784: NOT
34785: IFFALSE 34789
// exit ;
34787: GO 34815
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34789: LD_VAR 0 1
34793: PUSH
34794: LD_INT 1
34796: PPUSH
34797: LD_VAR 0 1
34801: PPUSH
34802: CALL_OW 12
34806: ARRAY
34807: PPUSH
34808: LD_INT 1
34810: PPUSH
34811: CALL_OW 234
// end ;
34815: PPOPN 1
34817: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
34818: LD_EXP 66
34822: PUSH
34823: LD_EXP 114
34827: AND
34828: IFFALSE 34940
34830: GO 34832
34832: DISABLE
34833: LD_INT 0
34835: PPUSH
34836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
34837: LD_ADDR_VAR 0 2
34841: PUSH
34842: LD_INT 22
34844: PUSH
34845: LD_OWVAR 2
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 2
34856: PUSH
34857: LD_INT 30
34859: PUSH
34860: LD_INT 27
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 30
34869: PUSH
34870: LD_INT 26
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 30
34879: PUSH
34880: LD_INT 28
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PPUSH
34897: CALL_OW 69
34901: ST_TO_ADDR
// if not tmp then
34902: LD_VAR 0 2
34906: NOT
34907: IFFALSE 34911
// exit ;
34909: GO 34940
// for i in tmp do
34911: LD_ADDR_VAR 0 1
34915: PUSH
34916: LD_VAR 0 2
34920: PUSH
34921: FOR_IN
34922: IFFALSE 34938
// SetLives ( i , 1 ) ;
34924: LD_VAR 0 1
34928: PPUSH
34929: LD_INT 1
34931: PPUSH
34932: CALL_OW 234
34936: GO 34921
34938: POP
34939: POP
// end ;
34940: PPOPN 2
34942: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
34943: LD_EXP 66
34947: PUSH
34948: LD_EXP 115
34952: AND
34953: IFFALSE 35227
34955: GO 34957
34957: DISABLE
34958: LD_INT 0
34960: PPUSH
34961: PPUSH
34962: PPUSH
// begin i := rand ( 1 , 7 ) ;
34963: LD_ADDR_VAR 0 1
34967: PUSH
34968: LD_INT 1
34970: PPUSH
34971: LD_INT 7
34973: PPUSH
34974: CALL_OW 12
34978: ST_TO_ADDR
// case i of 1 :
34979: LD_VAR 0 1
34983: PUSH
34984: LD_INT 1
34986: DOUBLE
34987: EQUAL
34988: IFTRUE 34992
34990: GO 35002
34992: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
34993: LD_STRING earthquake(getX(game), 0, 32)
34995: PPUSH
34996: CALL_OW 559
35000: GO 35227
35002: LD_INT 2
35004: DOUBLE
35005: EQUAL
35006: IFTRUE 35010
35008: GO 35024
35010: POP
// begin ToLua ( displayStucuk(); ) ;
35011: LD_STRING displayStucuk();
35013: PPUSH
35014: CALL_OW 559
// ResetFog ;
35018: CALL_OW 335
// end ; 3 :
35022: GO 35227
35024: LD_INT 3
35026: DOUBLE
35027: EQUAL
35028: IFTRUE 35032
35030: GO 35136
35032: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
35033: LD_ADDR_VAR 0 2
35037: PUSH
35038: LD_INT 22
35040: PUSH
35041: LD_OWVAR 2
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 25
35052: PUSH
35053: LD_INT 1
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PPUSH
35064: CALL_OW 69
35068: ST_TO_ADDR
// if not tmp then
35069: LD_VAR 0 2
35073: NOT
35074: IFFALSE 35078
// exit ;
35076: GO 35227
// un := tmp [ rand ( 1 , tmp ) ] ;
35078: LD_ADDR_VAR 0 3
35082: PUSH
35083: LD_VAR 0 2
35087: PUSH
35088: LD_INT 1
35090: PPUSH
35091: LD_VAR 0 2
35095: PPUSH
35096: CALL_OW 12
35100: ARRAY
35101: ST_TO_ADDR
// if Crawls ( un ) then
35102: LD_VAR 0 3
35106: PPUSH
35107: CALL_OW 318
35111: IFFALSE 35122
// ComWalk ( un ) ;
35113: LD_VAR 0 3
35117: PPUSH
35118: CALL_OW 138
// SetClass ( un , class_mortar ) ;
35122: LD_VAR 0 3
35126: PPUSH
35127: LD_INT 8
35129: PPUSH
35130: CALL_OW 336
// end ; 4 :
35134: GO 35227
35136: LD_INT 4
35138: DOUBLE
35139: EQUAL
35140: IFTRUE 35144
35142: GO 35205
35144: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
35145: LD_ADDR_VAR 0 2
35149: PUSH
35150: LD_INT 22
35152: PUSH
35153: LD_OWVAR 2
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 30
35164: PUSH
35165: LD_INT 29
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PPUSH
35176: CALL_OW 69
35180: ST_TO_ADDR
// if not tmp then
35181: LD_VAR 0 2
35185: NOT
35186: IFFALSE 35190
// exit ;
35188: GO 35227
// DestroyUnit ( tmp [ 1 ] ) ;
35190: LD_VAR 0 2
35194: PUSH
35195: LD_INT 1
35197: ARRAY
35198: PPUSH
35199: CALL_OW 65
// end ; 5 .. 7 :
35203: GO 35227
35205: LD_INT 5
35207: DOUBLE
35208: GREATEREQUAL
35209: IFFALSE 35217
35211: LD_INT 7
35213: DOUBLE
35214: LESSEQUAL
35215: IFTRUE 35219
35217: GO 35226
35219: POP
// StreamSibBomb ; end ;
35220: CALL 31477 0 0
35224: GO 35227
35226: POP
// end ;
35227: PPOPN 3
35229: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
35230: LD_EXP 66
35234: PUSH
35235: LD_EXP 116
35239: AND
35240: IFFALSE 35396
35242: GO 35244
35244: DISABLE
35245: LD_INT 0
35247: PPUSH
35248: PPUSH
35249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
35250: LD_ADDR_VAR 0 2
35254: PUSH
35255: LD_INT 81
35257: PUSH
35258: LD_OWVAR 2
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 2
35269: PUSH
35270: LD_INT 21
35272: PUSH
35273: LD_INT 1
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 21
35282: PUSH
35283: LD_INT 2
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: LIST
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PPUSH
35299: CALL_OW 69
35303: ST_TO_ADDR
// if not tmp then
35304: LD_VAR 0 2
35308: NOT
35309: IFFALSE 35313
// exit ;
35311: GO 35396
// p := 0 ;
35313: LD_ADDR_VAR 0 3
35317: PUSH
35318: LD_INT 0
35320: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35321: LD_INT 35
35323: PPUSH
35324: CALL_OW 67
// p := p + 1 ;
35328: LD_ADDR_VAR 0 3
35332: PUSH
35333: LD_VAR 0 3
35337: PUSH
35338: LD_INT 1
35340: PLUS
35341: ST_TO_ADDR
// for i in tmp do
35342: LD_ADDR_VAR 0 1
35346: PUSH
35347: LD_VAR 0 2
35351: PUSH
35352: FOR_IN
35353: IFFALSE 35384
// if GetLives ( i ) < 1000 then
35355: LD_VAR 0 1
35359: PPUSH
35360: CALL_OW 256
35364: PUSH
35365: LD_INT 1000
35367: LESS
35368: IFFALSE 35382
// SetLives ( i , 1000 ) ;
35370: LD_VAR 0 1
35374: PPUSH
35375: LD_INT 1000
35377: PPUSH
35378: CALL_OW 234
35382: GO 35352
35384: POP
35385: POP
// until p > 20 ;
35386: LD_VAR 0 3
35390: PUSH
35391: LD_INT 20
35393: GREATER
35394: IFFALSE 35321
// end ;
35396: PPOPN 3
35398: END
// every 0 0$1 trigger StreamModeActive and sTime do
35399: LD_EXP 66
35403: PUSH
35404: LD_EXP 117
35408: AND
35409: IFFALSE 35444
35411: GO 35413
35413: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
35414: LD_INT 28
35416: PPUSH
35417: LD_OWVAR 2
35421: PPUSH
35422: LD_INT 2
35424: PPUSH
35425: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
35429: LD_INT 30
35431: PPUSH
35432: LD_OWVAR 2
35436: PPUSH
35437: LD_INT 2
35439: PPUSH
35440: CALL_OW 322
// end ;
35444: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
35445: LD_EXP 66
35449: PUSH
35450: LD_EXP 118
35454: AND
35455: IFFALSE 35576
35457: GO 35459
35459: DISABLE
35460: LD_INT 0
35462: PPUSH
35463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35464: LD_ADDR_VAR 0 2
35468: PUSH
35469: LD_INT 22
35471: PUSH
35472: LD_OWVAR 2
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 21
35483: PUSH
35484: LD_INT 1
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 3
35493: PUSH
35494: LD_INT 23
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: LIST
35512: PPUSH
35513: CALL_OW 69
35517: ST_TO_ADDR
// if not tmp then
35518: LD_VAR 0 2
35522: NOT
35523: IFFALSE 35527
// exit ;
35525: GO 35576
// for i in tmp do
35527: LD_ADDR_VAR 0 1
35531: PUSH
35532: LD_VAR 0 2
35536: PUSH
35537: FOR_IN
35538: IFFALSE 35574
// begin if Crawls ( i ) then
35540: LD_VAR 0 1
35544: PPUSH
35545: CALL_OW 318
35549: IFFALSE 35560
// ComWalk ( i ) ;
35551: LD_VAR 0 1
35555: PPUSH
35556: CALL_OW 138
// SetClass ( i , 2 ) ;
35560: LD_VAR 0 1
35564: PPUSH
35565: LD_INT 2
35567: PPUSH
35568: CALL_OW 336
// end ;
35572: GO 35537
35574: POP
35575: POP
// end ;
35576: PPOPN 2
35578: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35579: LD_EXP 66
35583: PUSH
35584: LD_EXP 119
35588: AND
35589: IFFALSE 35870
35591: GO 35593
35593: DISABLE
35594: LD_INT 0
35596: PPUSH
35597: PPUSH
35598: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35599: LD_OWVAR 2
35603: PPUSH
35604: LD_INT 9
35606: PPUSH
35607: LD_INT 1
35609: PPUSH
35610: LD_INT 1
35612: PPUSH
35613: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
35617: LD_INT 9
35619: PPUSH
35620: LD_OWVAR 2
35624: PPUSH
35625: CALL_OW 343
// uc_side := 9 ;
35629: LD_ADDR_OWVAR 20
35633: PUSH
35634: LD_INT 9
35636: ST_TO_ADDR
// uc_nation := 2 ;
35637: LD_ADDR_OWVAR 21
35641: PUSH
35642: LD_INT 2
35644: ST_TO_ADDR
// hc_name := Dark Warrior ;
35645: LD_ADDR_OWVAR 26
35649: PUSH
35650: LD_STRING Dark Warrior
35652: ST_TO_ADDR
// hc_gallery :=  ;
35653: LD_ADDR_OWVAR 33
35657: PUSH
35658: LD_STRING 
35660: ST_TO_ADDR
// hc_noskilllimit := true ;
35661: LD_ADDR_OWVAR 76
35665: PUSH
35666: LD_INT 1
35668: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
35669: LD_ADDR_OWVAR 31
35673: PUSH
35674: LD_INT 30
35676: PUSH
35677: LD_INT 30
35679: PUSH
35680: LD_INT 30
35682: PUSH
35683: LD_INT 30
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: ST_TO_ADDR
// un := CreateHuman ;
35692: LD_ADDR_VAR 0 3
35696: PUSH
35697: CALL_OW 44
35701: ST_TO_ADDR
// hc_noskilllimit := false ;
35702: LD_ADDR_OWVAR 76
35706: PUSH
35707: LD_INT 0
35709: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35710: LD_VAR 0 3
35714: PPUSH
35715: LD_INT 1
35717: PPUSH
35718: CALL_OW 51
// p := 0 ;
35722: LD_ADDR_VAR 0 2
35726: PUSH
35727: LD_INT 0
35729: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35730: LD_INT 35
35732: PPUSH
35733: CALL_OW 67
// p := p + 1 ;
35737: LD_ADDR_VAR 0 2
35741: PUSH
35742: LD_VAR 0 2
35746: PUSH
35747: LD_INT 1
35749: PLUS
35750: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
35751: LD_VAR 0 3
35755: PPUSH
35756: CALL_OW 256
35760: PUSH
35761: LD_INT 1000
35763: LESS
35764: IFFALSE 35778
// SetLives ( un , 1000 ) ;
35766: LD_VAR 0 3
35770: PPUSH
35771: LD_INT 1000
35773: PPUSH
35774: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
35778: LD_VAR 0 3
35782: PPUSH
35783: LD_INT 81
35785: PUSH
35786: LD_OWVAR 2
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 91
35797: PUSH
35798: LD_VAR 0 3
35802: PUSH
35803: LD_INT 30
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: LIST
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PPUSH
35815: CALL_OW 69
35819: PPUSH
35820: LD_VAR 0 3
35824: PPUSH
35825: CALL_OW 74
35829: PPUSH
35830: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
35834: LD_VAR 0 2
35838: PUSH
35839: LD_INT 60
35841: GREATER
35842: PUSH
35843: LD_VAR 0 3
35847: PPUSH
35848: CALL_OW 301
35852: OR
35853: IFFALSE 35730
// if un then
35855: LD_VAR 0 3
35859: IFFALSE 35870
// RemoveUnit ( un ) ;
35861: LD_VAR 0 3
35865: PPUSH
35866: CALL_OW 64
// end ;
35870: PPOPN 3
35872: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35873: LD_INT 0
35875: PPUSH
35876: PPUSH
35877: PPUSH
35878: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35879: LD_ADDR_VAR 0 4
35883: PUSH
35884: LD_INT 22
35886: PUSH
35887: LD_OWVAR 2
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 2
35898: PUSH
35899: LD_INT 30
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 30
35911: PUSH
35912: LD_INT 1
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: LIST
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PPUSH
35928: CALL_OW 69
35932: ST_TO_ADDR
// if not tmp then
35933: LD_VAR 0 4
35937: NOT
35938: IFFALSE 35942
// exit ;
35940: GO 36001
// for i in tmp do
35942: LD_ADDR_VAR 0 2
35946: PUSH
35947: LD_VAR 0 4
35951: PUSH
35952: FOR_IN
35953: IFFALSE 35999
// for j = 1 to 3 do
35955: LD_ADDR_VAR 0 3
35959: PUSH
35960: DOUBLE
35961: LD_INT 1
35963: DEC
35964: ST_TO_ADDR
35965: LD_INT 3
35967: PUSH
35968: FOR_TO
35969: IFFALSE 35995
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35971: LD_VAR 0 2
35975: PPUSH
35976: CALL_OW 274
35980: PPUSH
35981: LD_VAR 0 3
35985: PPUSH
35986: LD_INT 99999
35988: PPUSH
35989: CALL_OW 277
35993: GO 35968
35995: POP
35996: POP
35997: GO 35952
35999: POP
36000: POP
// end ;
36001: LD_VAR 0 1
36005: RET
// export function hHackSetLevel10 ; var i , j ; begin
36006: LD_INT 0
36008: PPUSH
36009: PPUSH
36010: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36011: LD_ADDR_VAR 0 2
36015: PUSH
36016: LD_INT 21
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PPUSH
36026: CALL_OW 69
36030: PUSH
36031: FOR_IN
36032: IFFALSE 36084
// if IsSelected ( i ) then
36034: LD_VAR 0 2
36038: PPUSH
36039: CALL_OW 306
36043: IFFALSE 36082
// begin for j := 1 to 4 do
36045: LD_ADDR_VAR 0 3
36049: PUSH
36050: DOUBLE
36051: LD_INT 1
36053: DEC
36054: ST_TO_ADDR
36055: LD_INT 4
36057: PUSH
36058: FOR_TO
36059: IFFALSE 36080
// SetSkill ( i , j , 10 ) ;
36061: LD_VAR 0 2
36065: PPUSH
36066: LD_VAR 0 3
36070: PPUSH
36071: LD_INT 10
36073: PPUSH
36074: CALL_OW 237
36078: GO 36058
36080: POP
36081: POP
// end ;
36082: GO 36031
36084: POP
36085: POP
// end ;
36086: LD_VAR 0 1
36090: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
36091: LD_INT 0
36093: PPUSH
36094: PPUSH
36095: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
36096: LD_ADDR_VAR 0 2
36100: PUSH
36101: LD_INT 22
36103: PUSH
36104: LD_OWVAR 2
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 21
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PPUSH
36127: CALL_OW 69
36131: PUSH
36132: FOR_IN
36133: IFFALSE 36174
// begin for j := 1 to 4 do
36135: LD_ADDR_VAR 0 3
36139: PUSH
36140: DOUBLE
36141: LD_INT 1
36143: DEC
36144: ST_TO_ADDR
36145: LD_INT 4
36147: PUSH
36148: FOR_TO
36149: IFFALSE 36170
// SetSkill ( i , j , 10 ) ;
36151: LD_VAR 0 2
36155: PPUSH
36156: LD_VAR 0 3
36160: PPUSH
36161: LD_INT 10
36163: PPUSH
36164: CALL_OW 237
36168: GO 36148
36170: POP
36171: POP
// end ;
36172: GO 36132
36174: POP
36175: POP
// end ;
36176: LD_VAR 0 1
36180: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
36181: LD_INT 0
36183: PPUSH
// uc_side := your_side ;
36184: LD_ADDR_OWVAR 20
36188: PUSH
36189: LD_OWVAR 2
36193: ST_TO_ADDR
// uc_nation := nation ;
36194: LD_ADDR_OWVAR 21
36198: PUSH
36199: LD_VAR 0 1
36203: ST_TO_ADDR
// InitHc ;
36204: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
36208: LD_INT 0
36210: PPUSH
36211: LD_VAR 0 2
36215: PPUSH
36216: LD_VAR 0 3
36220: PPUSH
36221: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
36225: CALL_OW 44
36229: PPUSH
36230: LD_INT 1
36232: PPUSH
36233: CALL_OW 51
// end ;
36237: LD_VAR 0 4
36241: RET
// export function hHackSpawnVehicle ; begin
36242: LD_INT 0
36244: PPUSH
// uc_side := your_side ;
36245: LD_ADDR_OWVAR 20
36249: PUSH
36250: LD_OWVAR 2
36254: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
36255: LD_ADDR_OWVAR 21
36259: PUSH
36260: LD_INT 1
36262: PPUSH
36263: LD_INT 3
36265: PPUSH
36266: CALL_OW 12
36270: ST_TO_ADDR
// InitVc ;
36271: CALL_OW 20
// case uc_nation of 1 :
36275: LD_OWVAR 21
36279: PUSH
36280: LD_INT 1
36282: DOUBLE
36283: EQUAL
36284: IFTRUE 36288
36286: GO 36432
36288: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
36289: LD_ADDR_OWVAR 37
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: LD_INT 2
36299: PUSH
36300: LD_INT 3
36302: PUSH
36303: LD_INT 4
36305: PUSH
36306: LD_INT 5
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: PPUSH
36319: LD_INT 5
36321: PPUSH
36322: CALL_OW 12
36326: ARRAY
36327: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
36328: LD_ADDR_OWVAR 39
36332: PUSH
36333: LD_INT 1
36335: PPUSH
36336: LD_INT 3
36338: PPUSH
36339: CALL_OW 12
36343: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
36344: LD_ADDR_OWVAR 38
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: LD_INT 2
36354: PUSH
36355: LD_INT 3
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 1
36365: PPUSH
36366: LD_INT 3
36368: PPUSH
36369: CALL_OW 12
36373: ARRAY
36374: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
36375: LD_ADDR_OWVAR 40
36379: PUSH
36380: LD_INT 2
36382: PUSH
36383: LD_INT 4
36385: PUSH
36386: LD_INT 5
36388: PUSH
36389: LD_INT 3
36391: PUSH
36392: LD_INT 7
36394: PUSH
36395: LD_INT 8
36397: PUSH
36398: LD_INT 9
36400: PUSH
36401: LD_INT 10
36403: PUSH
36404: LD_INT 6
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 1
36420: PPUSH
36421: LD_INT 9
36423: PPUSH
36424: CALL_OW 12
36428: ARRAY
36429: ST_TO_ADDR
// end ; 2 :
36430: GO 36697
36432: LD_INT 2
36434: DOUBLE
36435: EQUAL
36436: IFTRUE 36440
36438: GO 36564
36440: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
36441: LD_ADDR_OWVAR 37
36445: PUSH
36446: LD_INT 11
36448: PUSH
36449: LD_INT 12
36451: PUSH
36452: LD_INT 13
36454: PUSH
36455: LD_INT 14
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: PPUSH
36467: LD_INT 4
36469: PPUSH
36470: CALL_OW 12
36474: ARRAY
36475: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
36476: LD_ADDR_OWVAR 39
36480: PUSH
36481: LD_INT 1
36483: PPUSH
36484: LD_INT 3
36486: PPUSH
36487: CALL_OW 12
36491: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
36492: LD_ADDR_OWVAR 38
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: LD_INT 2
36502: PUSH
36503: LD_INT 5
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: PPUSH
36514: LD_INT 3
36516: PPUSH
36517: CALL_OW 12
36521: ARRAY
36522: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
36523: LD_ADDR_OWVAR 40
36527: PUSH
36528: LD_INT 24
36530: PUSH
36531: LD_INT 26
36533: PUSH
36534: LD_INT 27
36536: PUSH
36537: LD_INT 28
36539: PUSH
36540: LD_INT 29
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: PPUSH
36553: LD_INT 5
36555: PPUSH
36556: CALL_OW 12
36560: ARRAY
36561: ST_TO_ADDR
// end ; 3 :
36562: GO 36697
36564: LD_INT 3
36566: DOUBLE
36567: EQUAL
36568: IFTRUE 36572
36570: GO 36696
36572: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
36573: LD_ADDR_OWVAR 37
36577: PUSH
36578: LD_INT 21
36580: PUSH
36581: LD_INT 23
36583: PUSH
36584: LD_INT 22
36586: PUSH
36587: LD_INT 24
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: PPUSH
36599: LD_INT 4
36601: PPUSH
36602: CALL_OW 12
36606: ARRAY
36607: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
36608: LD_ADDR_OWVAR 39
36612: PUSH
36613: LD_INT 1
36615: PPUSH
36616: LD_INT 3
36618: PPUSH
36619: CALL_OW 12
36623: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
36624: LD_ADDR_OWVAR 38
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: LD_INT 3
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 1
36641: PPUSH
36642: LD_INT 2
36644: PPUSH
36645: CALL_OW 12
36649: ARRAY
36650: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
36651: LD_ADDR_OWVAR 40
36655: PUSH
36656: LD_INT 42
36658: PUSH
36659: LD_INT 43
36661: PUSH
36662: LD_INT 44
36664: PUSH
36665: LD_INT 46
36667: PUSH
36668: LD_INT 48
36670: PUSH
36671: LD_INT 47
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: PPUSH
36685: LD_INT 6
36687: PPUSH
36688: CALL_OW 12
36692: ARRAY
36693: ST_TO_ADDR
// end ; end ;
36694: GO 36697
36696: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
36697: CALL_OW 45
36701: PPUSH
36702: LD_INT 1
36704: PPUSH
36705: CALL_OW 51
// end ;
36709: LD_VAR 0 1
36713: RET
// export hInvincible ; every 1 do
36714: GO 36716
36716: DISABLE
// hInvincible := [ ] ;
36717: LD_ADDR_EXP 120
36721: PUSH
36722: EMPTY
36723: ST_TO_ADDR
36724: END
// every 10 do var i ;
36725: GO 36727
36727: DISABLE
36728: LD_INT 0
36730: PPUSH
// begin enable ;
36731: ENABLE
// if not hInvincible then
36732: LD_EXP 120
36736: NOT
36737: IFFALSE 36741
// exit ;
36739: GO 36785
// for i in hInvincible do
36741: LD_ADDR_VAR 0 1
36745: PUSH
36746: LD_EXP 120
36750: PUSH
36751: FOR_IN
36752: IFFALSE 36783
// if GetLives ( i ) < 1000 then
36754: LD_VAR 0 1
36758: PPUSH
36759: CALL_OW 256
36763: PUSH
36764: LD_INT 1000
36766: LESS
36767: IFFALSE 36781
// SetLives ( i , 1000 ) ;
36769: LD_VAR 0 1
36773: PPUSH
36774: LD_INT 1000
36776: PPUSH
36777: CALL_OW 234
36781: GO 36751
36783: POP
36784: POP
// end ;
36785: PPOPN 1
36787: END
// export function hHackInvincible ; var i ; begin
36788: LD_INT 0
36790: PPUSH
36791: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36792: LD_ADDR_VAR 0 2
36796: PUSH
36797: LD_INT 2
36799: PUSH
36800: LD_INT 21
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 21
36812: PUSH
36813: LD_INT 2
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: LIST
36824: PPUSH
36825: CALL_OW 69
36829: PUSH
36830: FOR_IN
36831: IFFALSE 36892
// if IsSelected ( i ) then
36833: LD_VAR 0 2
36837: PPUSH
36838: CALL_OW 306
36842: IFFALSE 36890
// begin if i in hInvincible then
36844: LD_VAR 0 2
36848: PUSH
36849: LD_EXP 120
36853: IN
36854: IFFALSE 36874
// hInvincible := hInvincible diff i else
36856: LD_ADDR_EXP 120
36860: PUSH
36861: LD_EXP 120
36865: PUSH
36866: LD_VAR 0 2
36870: DIFF
36871: ST_TO_ADDR
36872: GO 36890
// hInvincible := hInvincible union i ;
36874: LD_ADDR_EXP 120
36878: PUSH
36879: LD_EXP 120
36883: PUSH
36884: LD_VAR 0 2
36888: UNION
36889: ST_TO_ADDR
// end ;
36890: GO 36830
36892: POP
36893: POP
// end ;
36894: LD_VAR 0 1
36898: RET
// export function hHackInvisible ; var i , j ; begin
36899: LD_INT 0
36901: PPUSH
36902: PPUSH
36903: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36904: LD_ADDR_VAR 0 2
36908: PUSH
36909: LD_INT 21
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PPUSH
36919: CALL_OW 69
36923: PUSH
36924: FOR_IN
36925: IFFALSE 36949
// if IsSelected ( i ) then
36927: LD_VAR 0 2
36931: PPUSH
36932: CALL_OW 306
36936: IFFALSE 36947
// ComForceInvisible ( i ) ;
36938: LD_VAR 0 2
36942: PPUSH
36943: CALL_OW 496
36947: GO 36924
36949: POP
36950: POP
// end ;
36951: LD_VAR 0 1
36955: RET
// export function hHackChangeYourSide ; begin
36956: LD_INT 0
36958: PPUSH
// if your_side = 8 then
36959: LD_OWVAR 2
36963: PUSH
36964: LD_INT 8
36966: EQUAL
36967: IFFALSE 36979
// your_side := 0 else
36969: LD_ADDR_OWVAR 2
36973: PUSH
36974: LD_INT 0
36976: ST_TO_ADDR
36977: GO 36993
// your_side := your_side + 1 ;
36979: LD_ADDR_OWVAR 2
36983: PUSH
36984: LD_OWVAR 2
36988: PUSH
36989: LD_INT 1
36991: PLUS
36992: ST_TO_ADDR
// end ;
36993: LD_VAR 0 1
36997: RET
// export function hHackChangeUnitSide ; var i , j ; begin
36998: LD_INT 0
37000: PPUSH
37001: PPUSH
37002: PPUSH
// for i in all_units do
37003: LD_ADDR_VAR 0 2
37007: PUSH
37008: LD_OWVAR 3
37012: PUSH
37013: FOR_IN
37014: IFFALSE 37092
// if IsSelected ( i ) then
37016: LD_VAR 0 2
37020: PPUSH
37021: CALL_OW 306
37025: IFFALSE 37090
// begin j := GetSide ( i ) ;
37027: LD_ADDR_VAR 0 3
37031: PUSH
37032: LD_VAR 0 2
37036: PPUSH
37037: CALL_OW 255
37041: ST_TO_ADDR
// if j = 8 then
37042: LD_VAR 0 3
37046: PUSH
37047: LD_INT 8
37049: EQUAL
37050: IFFALSE 37062
// j := 0 else
37052: LD_ADDR_VAR 0 3
37056: PUSH
37057: LD_INT 0
37059: ST_TO_ADDR
37060: GO 37076
// j := j + 1 ;
37062: LD_ADDR_VAR 0 3
37066: PUSH
37067: LD_VAR 0 3
37071: PUSH
37072: LD_INT 1
37074: PLUS
37075: ST_TO_ADDR
// SetSide ( i , j ) ;
37076: LD_VAR 0 2
37080: PPUSH
37081: LD_VAR 0 3
37085: PPUSH
37086: CALL_OW 235
// end ;
37090: GO 37013
37092: POP
37093: POP
// end ;
37094: LD_VAR 0 1
37098: RET
// export function hHackFog ; begin
37099: LD_INT 0
37101: PPUSH
// FogOff ( true ) ;
37102: LD_INT 1
37104: PPUSH
37105: CALL_OW 344
// end ;
37109: LD_VAR 0 1
37113: RET
// export function hHackApeman ; begin
37114: LD_INT 0
37116: PPUSH
// uc_side := your_side ;
37117: LD_ADDR_OWVAR 20
37121: PUSH
37122: LD_OWVAR 2
37126: ST_TO_ADDR
// uc_nation := 0 ;
37127: LD_ADDR_OWVAR 21
37131: PUSH
37132: LD_INT 0
37134: ST_TO_ADDR
// hc_name :=  ;
37135: LD_ADDR_OWVAR 26
37139: PUSH
37140: LD_STRING 
37142: ST_TO_ADDR
// hc_gallery :=  ;
37143: LD_ADDR_OWVAR 33
37147: PUSH
37148: LD_STRING 
37150: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
37151: LD_ADDR_OWVAR 31
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 0
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: ST_TO_ADDR
// hc_class := class_apeman ;
37174: LD_ADDR_OWVAR 28
37178: PUSH
37179: LD_INT 12
37181: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
37182: CALL_OW 44
37186: PPUSH
37187: LD_INT 1
37189: PPUSH
37190: CALL_OW 51
// end ;
37194: LD_VAR 0 1
37198: RET
// export function hHackBoom ; begin
37199: LD_INT 0
37201: PPUSH
// uc_side := your_side ;
37202: LD_ADDR_OWVAR 20
37206: PUSH
37207: LD_OWVAR 2
37211: ST_TO_ADDR
// uc_nation := 1 ;
37212: LD_ADDR_OWVAR 21
37216: PUSH
37217: LD_INT 1
37219: ST_TO_ADDR
// vc_chassis := us_morphling ;
37220: LD_ADDR_OWVAR 37
37224: PUSH
37225: LD_INT 5
37227: ST_TO_ADDR
// vc_engine := engine_siberite ;
37228: LD_ADDR_OWVAR 39
37232: PUSH
37233: LD_INT 3
37235: ST_TO_ADDR
// vc_control := control_computer ;
37236: LD_ADDR_OWVAR 38
37240: PUSH
37241: LD_INT 3
37243: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
37244: LD_ADDR_OWVAR 40
37248: PUSH
37249: LD_INT 8
37251: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
37252: CALL_OW 45
37256: PPUSH
37257: LD_INT 1
37259: PPUSH
37260: CALL_OW 51
// end ; end_of_file
37264: LD_VAR 0 1
37268: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37269: LD_INT 0
37271: PPUSH
37272: PPUSH
37273: PPUSH
37274: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37275: LD_VAR 0 1
37279: PPUSH
37280: CALL_OW 264
37284: PUSH
37285: LD_EXP 55
37289: EQUAL
37290: IFFALSE 37362
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37292: LD_INT 68
37294: PPUSH
37295: LD_VAR 0 1
37299: PPUSH
37300: CALL_OW 255
37304: PPUSH
37305: CALL_OW 321
37309: PUSH
37310: LD_INT 2
37312: EQUAL
37313: IFFALSE 37325
// eff := 70 else
37315: LD_ADDR_VAR 0 4
37319: PUSH
37320: LD_INT 70
37322: ST_TO_ADDR
37323: GO 37333
// eff := 30 ;
37325: LD_ADDR_VAR 0 4
37329: PUSH
37330: LD_INT 30
37332: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37333: LD_VAR 0 1
37337: PPUSH
37338: CALL_OW 250
37342: PPUSH
37343: LD_VAR 0 1
37347: PPUSH
37348: CALL_OW 251
37352: PPUSH
37353: LD_VAR 0 4
37357: PPUSH
37358: CALL_OW 495
// end ; end ;
37362: LD_VAR 0 2
37366: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37367: LD_INT 0
37369: PPUSH
// end ;
37370: LD_VAR 0 4
37374: RET
// export function SOS_Command ( cmd ) ; begin
37375: LD_INT 0
37377: PPUSH
// end ;
37378: LD_VAR 0 2
37382: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37383: LD_VAR 0 1
37387: PUSH
37388: LD_INT 254
37390: EQUAL
37391: PUSH
37392: LD_VAR 0 2
37396: PPUSH
37397: CALL_OW 264
37401: PUSH
37402: LD_EXP 53
37406: EQUAL
37407: AND
37408: PUSH
37409: LD_VAR 0 3
37413: PPUSH
37414: CALL_OW 263
37418: PUSH
37419: LD_INT 3
37421: EQUAL
37422: AND
37423: IFFALSE 37439
// HackDestroyVehicle ( unit , selectedUnit ) ;
37425: LD_VAR 0 2
37429: PPUSH
37430: LD_VAR 0 3
37434: PPUSH
37435: CALL 38946 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37439: LD_VAR 0 1
37443: PUSH
37444: LD_INT 255
37446: EQUAL
37447: PUSH
37448: LD_VAR 0 2
37452: PPUSH
37453: CALL_OW 264
37457: PUSH
37458: LD_INT 14
37460: PUSH
37461: LD_INT 53
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: IN
37468: AND
37469: PUSH
37470: LD_VAR 0 4
37474: PPUSH
37475: LD_VAR 0 5
37479: PPUSH
37480: CALL_OW 488
37484: AND
37485: IFFALSE 37509
// CutTreeXYR ( unit , x , y , 12 ) ;
37487: LD_VAR 0 2
37491: PPUSH
37492: LD_VAR 0 4
37496: PPUSH
37497: LD_VAR 0 5
37501: PPUSH
37502: LD_INT 12
37504: PPUSH
37505: CALL 37512 0 4
// end ;
37509: PPOPN 5
37511: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37512: LD_INT 0
37514: PPUSH
37515: PPUSH
37516: PPUSH
37517: PPUSH
37518: PPUSH
37519: PPUSH
37520: PPUSH
37521: PPUSH
37522: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
37523: LD_VAR 0 1
37527: NOT
37528: PUSH
37529: LD_VAR 0 2
37533: PPUSH
37534: LD_VAR 0 3
37538: PPUSH
37539: CALL_OW 488
37543: NOT
37544: OR
37545: PUSH
37546: LD_VAR 0 4
37550: NOT
37551: OR
37552: IFFALSE 37556
// exit ;
37554: GO 37896
// list := [ ] ;
37556: LD_ADDR_VAR 0 13
37560: PUSH
37561: EMPTY
37562: ST_TO_ADDR
// if x - r < 0 then
37563: LD_VAR 0 2
37567: PUSH
37568: LD_VAR 0 4
37572: MINUS
37573: PUSH
37574: LD_INT 0
37576: LESS
37577: IFFALSE 37589
// min_x := 0 else
37579: LD_ADDR_VAR 0 7
37583: PUSH
37584: LD_INT 0
37586: ST_TO_ADDR
37587: GO 37605
// min_x := x - r ;
37589: LD_ADDR_VAR 0 7
37593: PUSH
37594: LD_VAR 0 2
37598: PUSH
37599: LD_VAR 0 4
37603: MINUS
37604: ST_TO_ADDR
// if y - r < 0 then
37605: LD_VAR 0 3
37609: PUSH
37610: LD_VAR 0 4
37614: MINUS
37615: PUSH
37616: LD_INT 0
37618: LESS
37619: IFFALSE 37631
// min_y := 0 else
37621: LD_ADDR_VAR 0 8
37625: PUSH
37626: LD_INT 0
37628: ST_TO_ADDR
37629: GO 37647
// min_y := y - r ;
37631: LD_ADDR_VAR 0 8
37635: PUSH
37636: LD_VAR 0 3
37640: PUSH
37641: LD_VAR 0 4
37645: MINUS
37646: ST_TO_ADDR
// max_x := x + r ;
37647: LD_ADDR_VAR 0 9
37651: PUSH
37652: LD_VAR 0 2
37656: PUSH
37657: LD_VAR 0 4
37661: PLUS
37662: ST_TO_ADDR
// max_y := y + r ;
37663: LD_ADDR_VAR 0 10
37667: PUSH
37668: LD_VAR 0 3
37672: PUSH
37673: LD_VAR 0 4
37677: PLUS
37678: ST_TO_ADDR
// for _x = min_x to max_x do
37679: LD_ADDR_VAR 0 11
37683: PUSH
37684: DOUBLE
37685: LD_VAR 0 7
37689: DEC
37690: ST_TO_ADDR
37691: LD_VAR 0 9
37695: PUSH
37696: FOR_TO
37697: IFFALSE 37814
// for _y = min_y to max_y do
37699: LD_ADDR_VAR 0 12
37703: PUSH
37704: DOUBLE
37705: LD_VAR 0 8
37709: DEC
37710: ST_TO_ADDR
37711: LD_VAR 0 10
37715: PUSH
37716: FOR_TO
37717: IFFALSE 37810
// begin if not ValidHex ( _x , _y ) then
37719: LD_VAR 0 11
37723: PPUSH
37724: LD_VAR 0 12
37728: PPUSH
37729: CALL_OW 488
37733: NOT
37734: IFFALSE 37738
// continue ;
37736: GO 37716
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37738: LD_VAR 0 11
37742: PPUSH
37743: LD_VAR 0 12
37747: PPUSH
37748: CALL_OW 351
37752: PUSH
37753: LD_VAR 0 11
37757: PPUSH
37758: LD_VAR 0 12
37762: PPUSH
37763: CALL_OW 554
37767: AND
37768: IFFALSE 37808
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37770: LD_ADDR_VAR 0 13
37774: PUSH
37775: LD_VAR 0 13
37779: PPUSH
37780: LD_VAR 0 13
37784: PUSH
37785: LD_INT 1
37787: PLUS
37788: PPUSH
37789: LD_VAR 0 11
37793: PUSH
37794: LD_VAR 0 12
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PPUSH
37803: CALL_OW 2
37807: ST_TO_ADDR
// end ;
37808: GO 37716
37810: POP
37811: POP
37812: GO 37696
37814: POP
37815: POP
// if not list then
37816: LD_VAR 0 13
37820: NOT
37821: IFFALSE 37825
// exit ;
37823: GO 37896
// for i in list do
37825: LD_ADDR_VAR 0 6
37829: PUSH
37830: LD_VAR 0 13
37834: PUSH
37835: FOR_IN
37836: IFFALSE 37894
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37838: LD_VAR 0 1
37842: PPUSH
37843: LD_STRING M
37845: PUSH
37846: LD_VAR 0 6
37850: PUSH
37851: LD_INT 1
37853: ARRAY
37854: PUSH
37855: LD_VAR 0 6
37859: PUSH
37860: LD_INT 2
37862: ARRAY
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: LD_INT 0
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: PUSH
37885: EMPTY
37886: LIST
37887: PPUSH
37888: CALL_OW 447
37892: GO 37835
37894: POP
37895: POP
// end ;
37896: LD_VAR 0 5
37900: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37901: LD_EXP 121
37905: NOT
37906: IFFALSE 37956
37908: GO 37910
37910: DISABLE
// begin initHack := true ;
37911: LD_ADDR_EXP 121
37915: PUSH
37916: LD_INT 1
37918: ST_TO_ADDR
// hackTanks := [ ] ;
37919: LD_ADDR_EXP 122
37923: PUSH
37924: EMPTY
37925: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37926: LD_ADDR_EXP 123
37930: PUSH
37931: EMPTY
37932: ST_TO_ADDR
// hackLimit := 3 ;
37933: LD_ADDR_EXP 124
37937: PUSH
37938: LD_INT 3
37940: ST_TO_ADDR
// hackDist := 12 ;
37941: LD_ADDR_EXP 125
37945: PUSH
37946: LD_INT 12
37948: ST_TO_ADDR
// hackCounter := [ ] ;
37949: LD_ADDR_EXP 126
37953: PUSH
37954: EMPTY
37955: ST_TO_ADDR
// end ;
37956: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37957: LD_EXP 121
37961: PUSH
37962: LD_INT 34
37964: PUSH
37965: LD_EXP 53
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PPUSH
37974: CALL_OW 69
37978: AND
37979: IFFALSE 38234
37981: GO 37983
37983: DISABLE
37984: LD_INT 0
37986: PPUSH
37987: PPUSH
// begin enable ;
37988: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37989: LD_ADDR_VAR 0 1
37993: PUSH
37994: LD_INT 34
37996: PUSH
37997: LD_EXP 53
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PPUSH
38006: CALL_OW 69
38010: PUSH
38011: FOR_IN
38012: IFFALSE 38232
// begin if not i in hackTanks then
38014: LD_VAR 0 1
38018: PUSH
38019: LD_EXP 122
38023: IN
38024: NOT
38025: IFFALSE 38108
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38027: LD_ADDR_EXP 122
38031: PUSH
38032: LD_EXP 122
38036: PPUSH
38037: LD_EXP 122
38041: PUSH
38042: LD_INT 1
38044: PLUS
38045: PPUSH
38046: LD_VAR 0 1
38050: PPUSH
38051: CALL_OW 1
38055: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38056: LD_ADDR_EXP 123
38060: PUSH
38061: LD_EXP 123
38065: PPUSH
38066: LD_EXP 123
38070: PUSH
38071: LD_INT 1
38073: PLUS
38074: PPUSH
38075: EMPTY
38076: PPUSH
38077: CALL_OW 1
38081: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38082: LD_ADDR_EXP 126
38086: PUSH
38087: LD_EXP 126
38091: PPUSH
38092: LD_EXP 126
38096: PUSH
38097: LD_INT 1
38099: PLUS
38100: PPUSH
38101: EMPTY
38102: PPUSH
38103: CALL_OW 1
38107: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38108: LD_VAR 0 1
38112: PPUSH
38113: CALL_OW 302
38117: NOT
38118: IFFALSE 38131
// begin HackUnlinkAll ( i ) ;
38120: LD_VAR 0 1
38124: PPUSH
38125: CALL 38237 0 1
// continue ;
38129: GO 38011
// end ; HackCheckCapturedStatus ( i ) ;
38131: LD_VAR 0 1
38135: PPUSH
38136: CALL 38680 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38140: LD_ADDR_VAR 0 2
38144: PUSH
38145: LD_INT 81
38147: PUSH
38148: LD_VAR 0 1
38152: PPUSH
38153: CALL_OW 255
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 33
38164: PUSH
38165: LD_INT 3
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 91
38174: PUSH
38175: LD_VAR 0 1
38179: PUSH
38180: LD_EXP 125
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 50
38192: PUSH
38193: EMPTY
38194: LIST
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: PPUSH
38202: CALL_OW 69
38206: ST_TO_ADDR
// if not tmp then
38207: LD_VAR 0 2
38211: NOT
38212: IFFALSE 38216
// continue ;
38214: GO 38011
// HackLink ( i , tmp ) ;
38216: LD_VAR 0 1
38220: PPUSH
38221: LD_VAR 0 2
38225: PPUSH
38226: CALL 38373 0 2
// end ;
38230: GO 38011
38232: POP
38233: POP
// end ;
38234: PPOPN 2
38236: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38237: LD_INT 0
38239: PPUSH
38240: PPUSH
38241: PPUSH
// if not hack in hackTanks then
38242: LD_VAR 0 1
38246: PUSH
38247: LD_EXP 122
38251: IN
38252: NOT
38253: IFFALSE 38257
// exit ;
38255: GO 38368
// index := GetElementIndex ( hackTanks , hack ) ;
38257: LD_ADDR_VAR 0 4
38261: PUSH
38262: LD_EXP 122
38266: PPUSH
38267: LD_VAR 0 1
38271: PPUSH
38272: CALL 43788 0 2
38276: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38277: LD_EXP 123
38281: PUSH
38282: LD_VAR 0 4
38286: ARRAY
38287: IFFALSE 38368
// begin for i in hackTanksCaptured [ index ] do
38289: LD_ADDR_VAR 0 3
38293: PUSH
38294: LD_EXP 123
38298: PUSH
38299: LD_VAR 0 4
38303: ARRAY
38304: PUSH
38305: FOR_IN
38306: IFFALSE 38332
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38308: LD_VAR 0 3
38312: PUSH
38313: LD_INT 1
38315: ARRAY
38316: PPUSH
38317: LD_VAR 0 3
38321: PUSH
38322: LD_INT 2
38324: ARRAY
38325: PPUSH
38326: CALL_OW 235
38330: GO 38305
38332: POP
38333: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38334: LD_ADDR_EXP 123
38338: PUSH
38339: LD_EXP 123
38343: PPUSH
38344: LD_VAR 0 4
38348: PPUSH
38349: EMPTY
38350: PPUSH
38351: CALL_OW 1
38355: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38356: LD_VAR 0 1
38360: PPUSH
38361: LD_INT 0
38363: PPUSH
38364: CALL_OW 505
// end ; end ;
38368: LD_VAR 0 2
38372: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38373: LD_INT 0
38375: PPUSH
38376: PPUSH
38377: PPUSH
// if not hack in hackTanks or not vehicles then
38378: LD_VAR 0 1
38382: PUSH
38383: LD_EXP 122
38387: IN
38388: NOT
38389: PUSH
38390: LD_VAR 0 2
38394: NOT
38395: OR
38396: IFFALSE 38400
// exit ;
38398: GO 38675
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38400: LD_ADDR_VAR 0 2
38404: PUSH
38405: LD_VAR 0 1
38409: PPUSH
38410: LD_VAR 0 2
38414: PPUSH
38415: LD_INT 1
38417: PPUSH
38418: LD_INT 1
38420: PPUSH
38421: CALL 44438 0 4
38425: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38426: LD_ADDR_VAR 0 5
38430: PUSH
38431: LD_EXP 122
38435: PPUSH
38436: LD_VAR 0 1
38440: PPUSH
38441: CALL 43788 0 2
38445: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38446: LD_EXP 123
38450: PUSH
38451: LD_VAR 0 5
38455: ARRAY
38456: PUSH
38457: LD_EXP 124
38461: LESS
38462: IFFALSE 38651
// begin for i := 1 to vehicles do
38464: LD_ADDR_VAR 0 4
38468: PUSH
38469: DOUBLE
38470: LD_INT 1
38472: DEC
38473: ST_TO_ADDR
38474: LD_VAR 0 2
38478: PUSH
38479: FOR_TO
38480: IFFALSE 38649
// begin if hackTanksCaptured [ index ] = hackLimit then
38482: LD_EXP 123
38486: PUSH
38487: LD_VAR 0 5
38491: ARRAY
38492: PUSH
38493: LD_EXP 124
38497: EQUAL
38498: IFFALSE 38502
// break ;
38500: GO 38649
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38502: LD_ADDR_EXP 126
38506: PUSH
38507: LD_EXP 126
38511: PPUSH
38512: LD_VAR 0 5
38516: PPUSH
38517: LD_EXP 126
38521: PUSH
38522: LD_VAR 0 5
38526: ARRAY
38527: PUSH
38528: LD_INT 1
38530: PLUS
38531: PPUSH
38532: CALL_OW 1
38536: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38537: LD_ADDR_EXP 123
38541: PUSH
38542: LD_EXP 123
38546: PPUSH
38547: LD_VAR 0 5
38551: PUSH
38552: LD_EXP 123
38556: PUSH
38557: LD_VAR 0 5
38561: ARRAY
38562: PUSH
38563: LD_INT 1
38565: PLUS
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PPUSH
38571: LD_VAR 0 2
38575: PUSH
38576: LD_VAR 0 4
38580: ARRAY
38581: PUSH
38582: LD_VAR 0 2
38586: PUSH
38587: LD_VAR 0 4
38591: ARRAY
38592: PPUSH
38593: CALL_OW 255
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PPUSH
38602: CALL 44003 0 3
38606: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38607: LD_VAR 0 2
38611: PUSH
38612: LD_VAR 0 4
38616: ARRAY
38617: PPUSH
38618: LD_VAR 0 1
38622: PPUSH
38623: CALL_OW 255
38627: PPUSH
38628: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38632: LD_VAR 0 2
38636: PUSH
38637: LD_VAR 0 4
38641: ARRAY
38642: PPUSH
38643: CALL_OW 141
// end ;
38647: GO 38479
38649: POP
38650: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38651: LD_VAR 0 1
38655: PPUSH
38656: LD_EXP 123
38660: PUSH
38661: LD_VAR 0 5
38665: ARRAY
38666: PUSH
38667: LD_INT 0
38669: PLUS
38670: PPUSH
38671: CALL_OW 505
// end ;
38675: LD_VAR 0 3
38679: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38680: LD_INT 0
38682: PPUSH
38683: PPUSH
38684: PPUSH
38685: PPUSH
// if not hack in hackTanks then
38686: LD_VAR 0 1
38690: PUSH
38691: LD_EXP 122
38695: IN
38696: NOT
38697: IFFALSE 38701
// exit ;
38699: GO 38941
// index := GetElementIndex ( hackTanks , hack ) ;
38701: LD_ADDR_VAR 0 4
38705: PUSH
38706: LD_EXP 122
38710: PPUSH
38711: LD_VAR 0 1
38715: PPUSH
38716: CALL 43788 0 2
38720: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38721: LD_ADDR_VAR 0 3
38725: PUSH
38726: DOUBLE
38727: LD_EXP 123
38731: PUSH
38732: LD_VAR 0 4
38736: ARRAY
38737: INC
38738: ST_TO_ADDR
38739: LD_INT 1
38741: PUSH
38742: FOR_DOWNTO
38743: IFFALSE 38915
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38745: LD_ADDR_VAR 0 5
38749: PUSH
38750: LD_EXP 123
38754: PUSH
38755: LD_VAR 0 4
38759: ARRAY
38760: PUSH
38761: LD_VAR 0 3
38765: ARRAY
38766: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38767: LD_VAR 0 5
38771: PUSH
38772: LD_INT 1
38774: ARRAY
38775: PPUSH
38776: CALL_OW 302
38780: NOT
38781: PUSH
38782: LD_VAR 0 5
38786: PUSH
38787: LD_INT 1
38789: ARRAY
38790: PPUSH
38791: CALL_OW 255
38795: PUSH
38796: LD_VAR 0 1
38800: PPUSH
38801: CALL_OW 255
38805: NONEQUAL
38806: OR
38807: IFFALSE 38913
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38809: LD_VAR 0 5
38813: PUSH
38814: LD_INT 1
38816: ARRAY
38817: PPUSH
38818: CALL_OW 305
38822: PUSH
38823: LD_VAR 0 5
38827: PUSH
38828: LD_INT 1
38830: ARRAY
38831: PPUSH
38832: CALL_OW 255
38836: PUSH
38837: LD_VAR 0 1
38841: PPUSH
38842: CALL_OW 255
38846: EQUAL
38847: AND
38848: IFFALSE 38872
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38850: LD_VAR 0 5
38854: PUSH
38855: LD_INT 1
38857: ARRAY
38858: PPUSH
38859: LD_VAR 0 5
38863: PUSH
38864: LD_INT 2
38866: ARRAY
38867: PPUSH
38868: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38872: LD_ADDR_EXP 123
38876: PUSH
38877: LD_EXP 123
38881: PPUSH
38882: LD_VAR 0 4
38886: PPUSH
38887: LD_EXP 123
38891: PUSH
38892: LD_VAR 0 4
38896: ARRAY
38897: PPUSH
38898: LD_VAR 0 3
38902: PPUSH
38903: CALL_OW 3
38907: PPUSH
38908: CALL_OW 1
38912: ST_TO_ADDR
// end ; end ;
38913: GO 38742
38915: POP
38916: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38917: LD_VAR 0 1
38921: PPUSH
38922: LD_EXP 123
38926: PUSH
38927: LD_VAR 0 4
38931: ARRAY
38932: PUSH
38933: LD_INT 0
38935: PLUS
38936: PPUSH
38937: CALL_OW 505
// end ;
38941: LD_VAR 0 2
38945: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38946: LD_INT 0
38948: PPUSH
38949: PPUSH
38950: PPUSH
38951: PPUSH
// if not hack in hackTanks then
38952: LD_VAR 0 1
38956: PUSH
38957: LD_EXP 122
38961: IN
38962: NOT
38963: IFFALSE 38967
// exit ;
38965: GO 39052
// index := GetElementIndex ( hackTanks , hack ) ;
38967: LD_ADDR_VAR 0 5
38971: PUSH
38972: LD_EXP 122
38976: PPUSH
38977: LD_VAR 0 1
38981: PPUSH
38982: CALL 43788 0 2
38986: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38987: LD_ADDR_VAR 0 4
38991: PUSH
38992: DOUBLE
38993: LD_INT 1
38995: DEC
38996: ST_TO_ADDR
38997: LD_EXP 123
39001: PUSH
39002: LD_VAR 0 5
39006: ARRAY
39007: PUSH
39008: FOR_TO
39009: IFFALSE 39050
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39011: LD_EXP 123
39015: PUSH
39016: LD_VAR 0 5
39020: ARRAY
39021: PUSH
39022: LD_VAR 0 4
39026: ARRAY
39027: PUSH
39028: LD_INT 1
39030: ARRAY
39031: PUSH
39032: LD_VAR 0 2
39036: EQUAL
39037: IFFALSE 39048
// KillUnit ( vehicle ) ;
39039: LD_VAR 0 2
39043: PPUSH
39044: CALL_OW 66
39048: GO 39008
39050: POP
39051: POP
// end ; end_of_file
39052: LD_VAR 0 3
39056: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39057: LD_INT 0
39059: PPUSH
39060: PPUSH
// if exist_mode then
39061: LD_VAR 0 2
39065: IFFALSE 39090
// unit := CreateCharacter ( prefix & ident ) else
39067: LD_ADDR_VAR 0 5
39071: PUSH
39072: LD_VAR 0 3
39076: PUSH
39077: LD_VAR 0 1
39081: STR
39082: PPUSH
39083: CALL_OW 34
39087: ST_TO_ADDR
39088: GO 39105
// unit := NewCharacter ( ident ) ;
39090: LD_ADDR_VAR 0 5
39094: PUSH
39095: LD_VAR 0 1
39099: PPUSH
39100: CALL_OW 25
39104: ST_TO_ADDR
// result := unit ;
39105: LD_ADDR_VAR 0 4
39109: PUSH
39110: LD_VAR 0 5
39114: ST_TO_ADDR
// end ;
39115: LD_VAR 0 4
39119: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39120: LD_INT 0
39122: PPUSH
39123: PPUSH
// if not side or not nation then
39124: LD_VAR 0 1
39128: NOT
39129: PUSH
39130: LD_VAR 0 2
39134: NOT
39135: OR
39136: IFFALSE 39140
// exit ;
39138: GO 39904
// case nation of nation_american :
39140: LD_VAR 0 2
39144: PUSH
39145: LD_INT 1
39147: DOUBLE
39148: EQUAL
39149: IFTRUE 39153
39151: GO 39367
39153: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39154: LD_ADDR_VAR 0 4
39158: PUSH
39159: LD_INT 35
39161: PUSH
39162: LD_INT 45
39164: PUSH
39165: LD_INT 46
39167: PUSH
39168: LD_INT 47
39170: PUSH
39171: LD_INT 82
39173: PUSH
39174: LD_INT 83
39176: PUSH
39177: LD_INT 84
39179: PUSH
39180: LD_INT 85
39182: PUSH
39183: LD_INT 86
39185: PUSH
39186: LD_INT 1
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: LD_INT 6
39194: PUSH
39195: LD_INT 15
39197: PUSH
39198: LD_INT 16
39200: PUSH
39201: LD_INT 7
39203: PUSH
39204: LD_INT 12
39206: PUSH
39207: LD_INT 13
39209: PUSH
39210: LD_INT 10
39212: PUSH
39213: LD_INT 14
39215: PUSH
39216: LD_INT 20
39218: PUSH
39219: LD_INT 21
39221: PUSH
39222: LD_INT 22
39224: PUSH
39225: LD_INT 25
39227: PUSH
39228: LD_INT 32
39230: PUSH
39231: LD_INT 27
39233: PUSH
39234: LD_INT 36
39236: PUSH
39237: LD_INT 69
39239: PUSH
39240: LD_INT 39
39242: PUSH
39243: LD_INT 34
39245: PUSH
39246: LD_INT 40
39248: PUSH
39249: LD_INT 48
39251: PUSH
39252: LD_INT 49
39254: PUSH
39255: LD_INT 50
39257: PUSH
39258: LD_INT 51
39260: PUSH
39261: LD_INT 52
39263: PUSH
39264: LD_INT 53
39266: PUSH
39267: LD_INT 54
39269: PUSH
39270: LD_INT 55
39272: PUSH
39273: LD_INT 56
39275: PUSH
39276: LD_INT 57
39278: PUSH
39279: LD_INT 58
39281: PUSH
39282: LD_INT 59
39284: PUSH
39285: LD_INT 60
39287: PUSH
39288: LD_INT 61
39290: PUSH
39291: LD_INT 62
39293: PUSH
39294: LD_INT 80
39296: PUSH
39297: LD_INT 82
39299: PUSH
39300: LD_INT 83
39302: PUSH
39303: LD_INT 84
39305: PUSH
39306: LD_INT 85
39308: PUSH
39309: LD_INT 86
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: ST_TO_ADDR
39365: GO 39828
39367: LD_INT 2
39369: DOUBLE
39370: EQUAL
39371: IFTRUE 39375
39373: GO 39597
39375: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
39376: LD_ADDR_VAR 0 4
39380: PUSH
39381: LD_INT 35
39383: PUSH
39384: LD_INT 45
39386: PUSH
39387: LD_INT 46
39389: PUSH
39390: LD_INT 47
39392: PUSH
39393: LD_INT 82
39395: PUSH
39396: LD_INT 83
39398: PUSH
39399: LD_INT 84
39401: PUSH
39402: LD_INT 85
39404: PUSH
39405: LD_INT 87
39407: PUSH
39408: LD_INT 70
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: LD_INT 11
39416: PUSH
39417: LD_INT 3
39419: PUSH
39420: LD_INT 4
39422: PUSH
39423: LD_INT 5
39425: PUSH
39426: LD_INT 6
39428: PUSH
39429: LD_INT 15
39431: PUSH
39432: LD_INT 18
39434: PUSH
39435: LD_INT 7
39437: PUSH
39438: LD_INT 17
39440: PUSH
39441: LD_INT 8
39443: PUSH
39444: LD_INT 20
39446: PUSH
39447: LD_INT 21
39449: PUSH
39450: LD_INT 22
39452: PUSH
39453: LD_INT 72
39455: PUSH
39456: LD_INT 26
39458: PUSH
39459: LD_INT 69
39461: PUSH
39462: LD_INT 39
39464: PUSH
39465: LD_INT 40
39467: PUSH
39468: LD_INT 41
39470: PUSH
39471: LD_INT 42
39473: PUSH
39474: LD_INT 43
39476: PUSH
39477: LD_INT 48
39479: PUSH
39480: LD_INT 49
39482: PUSH
39483: LD_INT 50
39485: PUSH
39486: LD_INT 51
39488: PUSH
39489: LD_INT 52
39491: PUSH
39492: LD_INT 53
39494: PUSH
39495: LD_INT 54
39497: PUSH
39498: LD_INT 55
39500: PUSH
39501: LD_INT 56
39503: PUSH
39504: LD_INT 60
39506: PUSH
39507: LD_INT 61
39509: PUSH
39510: LD_INT 62
39512: PUSH
39513: LD_INT 66
39515: PUSH
39516: LD_INT 67
39518: PUSH
39519: LD_INT 68
39521: PUSH
39522: LD_INT 81
39524: PUSH
39525: LD_INT 82
39527: PUSH
39528: LD_INT 83
39530: PUSH
39531: LD_INT 84
39533: PUSH
39534: LD_INT 85
39536: PUSH
39537: LD_INT 87
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: ST_TO_ADDR
39595: GO 39828
39597: LD_INT 3
39599: DOUBLE
39600: EQUAL
39601: IFTRUE 39605
39603: GO 39827
39605: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39606: LD_ADDR_VAR 0 4
39610: PUSH
39611: LD_INT 46
39613: PUSH
39614: LD_INT 47
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: LD_INT 2
39622: PUSH
39623: LD_INT 82
39625: PUSH
39626: LD_INT 83
39628: PUSH
39629: LD_INT 84
39631: PUSH
39632: LD_INT 85
39634: PUSH
39635: LD_INT 86
39637: PUSH
39638: LD_INT 11
39640: PUSH
39641: LD_INT 9
39643: PUSH
39644: LD_INT 20
39646: PUSH
39647: LD_INT 19
39649: PUSH
39650: LD_INT 21
39652: PUSH
39653: LD_INT 24
39655: PUSH
39656: LD_INT 22
39658: PUSH
39659: LD_INT 25
39661: PUSH
39662: LD_INT 28
39664: PUSH
39665: LD_INT 29
39667: PUSH
39668: LD_INT 30
39670: PUSH
39671: LD_INT 31
39673: PUSH
39674: LD_INT 37
39676: PUSH
39677: LD_INT 38
39679: PUSH
39680: LD_INT 32
39682: PUSH
39683: LD_INT 27
39685: PUSH
39686: LD_INT 33
39688: PUSH
39689: LD_INT 69
39691: PUSH
39692: LD_INT 39
39694: PUSH
39695: LD_INT 34
39697: PUSH
39698: LD_INT 40
39700: PUSH
39701: LD_INT 71
39703: PUSH
39704: LD_INT 23
39706: PUSH
39707: LD_INT 44
39709: PUSH
39710: LD_INT 48
39712: PUSH
39713: LD_INT 49
39715: PUSH
39716: LD_INT 50
39718: PUSH
39719: LD_INT 51
39721: PUSH
39722: LD_INT 52
39724: PUSH
39725: LD_INT 53
39727: PUSH
39728: LD_INT 54
39730: PUSH
39731: LD_INT 55
39733: PUSH
39734: LD_INT 56
39736: PUSH
39737: LD_INT 57
39739: PUSH
39740: LD_INT 58
39742: PUSH
39743: LD_INT 59
39745: PUSH
39746: LD_INT 63
39748: PUSH
39749: LD_INT 64
39751: PUSH
39752: LD_INT 65
39754: PUSH
39755: LD_INT 82
39757: PUSH
39758: LD_INT 83
39760: PUSH
39761: LD_INT 84
39763: PUSH
39764: LD_INT 85
39766: PUSH
39767: LD_INT 86
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: ST_TO_ADDR
39825: GO 39828
39827: POP
// if state > - 1 and state < 3 then
39828: LD_VAR 0 3
39832: PUSH
39833: LD_INT 1
39835: NEG
39836: GREATER
39837: PUSH
39838: LD_VAR 0 3
39842: PUSH
39843: LD_INT 3
39845: LESS
39846: AND
39847: IFFALSE 39904
// for i in result do
39849: LD_ADDR_VAR 0 5
39853: PUSH
39854: LD_VAR 0 4
39858: PUSH
39859: FOR_IN
39860: IFFALSE 39902
// if GetTech ( i , side ) <> state then
39862: LD_VAR 0 5
39866: PPUSH
39867: LD_VAR 0 1
39871: PPUSH
39872: CALL_OW 321
39876: PUSH
39877: LD_VAR 0 3
39881: NONEQUAL
39882: IFFALSE 39900
// result := result diff i ;
39884: LD_ADDR_VAR 0 4
39888: PUSH
39889: LD_VAR 0 4
39893: PUSH
39894: LD_VAR 0 5
39898: DIFF
39899: ST_TO_ADDR
39900: GO 39859
39902: POP
39903: POP
// end ;
39904: LD_VAR 0 4
39908: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39909: LD_INT 0
39911: PPUSH
39912: PPUSH
39913: PPUSH
// result := true ;
39914: LD_ADDR_VAR 0 3
39918: PUSH
39919: LD_INT 1
39921: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39922: LD_ADDR_VAR 0 5
39926: PUSH
39927: LD_VAR 0 2
39931: PPUSH
39932: CALL_OW 480
39936: ST_TO_ADDR
// if not tmp then
39937: LD_VAR 0 5
39941: NOT
39942: IFFALSE 39946
// exit ;
39944: GO 39995
// for i in tmp do
39946: LD_ADDR_VAR 0 4
39950: PUSH
39951: LD_VAR 0 5
39955: PUSH
39956: FOR_IN
39957: IFFALSE 39993
// if GetTech ( i , side ) <> state_researched then
39959: LD_VAR 0 4
39963: PPUSH
39964: LD_VAR 0 1
39968: PPUSH
39969: CALL_OW 321
39973: PUSH
39974: LD_INT 2
39976: NONEQUAL
39977: IFFALSE 39991
// begin result := false ;
39979: LD_ADDR_VAR 0 3
39983: PUSH
39984: LD_INT 0
39986: ST_TO_ADDR
// exit ;
39987: POP
39988: POP
39989: GO 39995
// end ;
39991: GO 39956
39993: POP
39994: POP
// end ;
39995: LD_VAR 0 3
39999: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40000: LD_INT 0
40002: PPUSH
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
40007: PPUSH
40008: PPUSH
40009: PPUSH
40010: PPUSH
40011: PPUSH
40012: PPUSH
40013: PPUSH
40014: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40015: LD_VAR 0 1
40019: NOT
40020: PUSH
40021: LD_VAR 0 1
40025: PPUSH
40026: CALL_OW 257
40030: PUSH
40031: LD_INT 9
40033: NONEQUAL
40034: OR
40035: IFFALSE 40039
// exit ;
40037: GO 40612
// side := GetSide ( unit ) ;
40039: LD_ADDR_VAR 0 9
40043: PUSH
40044: LD_VAR 0 1
40048: PPUSH
40049: CALL_OW 255
40053: ST_TO_ADDR
// tech_space := tech_spacanom ;
40054: LD_ADDR_VAR 0 12
40058: PUSH
40059: LD_INT 29
40061: ST_TO_ADDR
// tech_time := tech_taurad ;
40062: LD_ADDR_VAR 0 13
40066: PUSH
40067: LD_INT 28
40069: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40070: LD_ADDR_VAR 0 11
40074: PUSH
40075: LD_VAR 0 1
40079: PPUSH
40080: CALL_OW 310
40084: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40085: LD_VAR 0 11
40089: PPUSH
40090: CALL_OW 247
40094: PUSH
40095: LD_INT 2
40097: EQUAL
40098: IFFALSE 40102
// exit ;
40100: GO 40612
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40102: LD_ADDR_VAR 0 8
40106: PUSH
40107: LD_INT 81
40109: PUSH
40110: LD_VAR 0 9
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 3
40121: PUSH
40122: LD_INT 21
40124: PUSH
40125: LD_INT 3
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PPUSH
40140: CALL_OW 69
40144: ST_TO_ADDR
// if not tmp then
40145: LD_VAR 0 8
40149: NOT
40150: IFFALSE 40154
// exit ;
40152: GO 40612
// if in_unit then
40154: LD_VAR 0 11
40158: IFFALSE 40182
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40160: LD_ADDR_VAR 0 10
40164: PUSH
40165: LD_VAR 0 8
40169: PPUSH
40170: LD_VAR 0 11
40174: PPUSH
40175: CALL_OW 74
40179: ST_TO_ADDR
40180: GO 40202
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40182: LD_ADDR_VAR 0 10
40186: PUSH
40187: LD_VAR 0 8
40191: PPUSH
40192: LD_VAR 0 1
40196: PPUSH
40197: CALL_OW 74
40201: ST_TO_ADDR
// if not enemy then
40202: LD_VAR 0 10
40206: NOT
40207: IFFALSE 40211
// exit ;
40209: GO 40612
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40211: LD_VAR 0 11
40215: PUSH
40216: LD_VAR 0 11
40220: PPUSH
40221: LD_VAR 0 10
40225: PPUSH
40226: CALL_OW 296
40230: PUSH
40231: LD_INT 13
40233: GREATER
40234: AND
40235: PUSH
40236: LD_VAR 0 1
40240: PPUSH
40241: LD_VAR 0 10
40245: PPUSH
40246: CALL_OW 296
40250: PUSH
40251: LD_INT 12
40253: GREATER
40254: OR
40255: IFFALSE 40259
// exit ;
40257: GO 40612
// missile := [ 1 ] ;
40259: LD_ADDR_VAR 0 14
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: EMPTY
40268: LIST
40269: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40270: LD_VAR 0 9
40274: PPUSH
40275: LD_VAR 0 12
40279: PPUSH
40280: CALL_OW 325
40284: IFFALSE 40313
// missile := Insert ( missile , missile + 1 , 2 ) ;
40286: LD_ADDR_VAR 0 14
40290: PUSH
40291: LD_VAR 0 14
40295: PPUSH
40296: LD_VAR 0 14
40300: PUSH
40301: LD_INT 1
40303: PLUS
40304: PPUSH
40305: LD_INT 2
40307: PPUSH
40308: CALL_OW 2
40312: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40313: LD_VAR 0 9
40317: PPUSH
40318: LD_VAR 0 13
40322: PPUSH
40323: CALL_OW 325
40327: PUSH
40328: LD_VAR 0 10
40332: PPUSH
40333: CALL_OW 255
40337: PPUSH
40338: LD_VAR 0 13
40342: PPUSH
40343: CALL_OW 325
40347: NOT
40348: AND
40349: IFFALSE 40378
// missile := Insert ( missile , missile + 1 , 3 ) ;
40351: LD_ADDR_VAR 0 14
40355: PUSH
40356: LD_VAR 0 14
40360: PPUSH
40361: LD_VAR 0 14
40365: PUSH
40366: LD_INT 1
40368: PLUS
40369: PPUSH
40370: LD_INT 3
40372: PPUSH
40373: CALL_OW 2
40377: ST_TO_ADDR
// if missile < 2 then
40378: LD_VAR 0 14
40382: PUSH
40383: LD_INT 2
40385: LESS
40386: IFFALSE 40390
// exit ;
40388: GO 40612
// x := GetX ( enemy ) ;
40390: LD_ADDR_VAR 0 4
40394: PUSH
40395: LD_VAR 0 10
40399: PPUSH
40400: CALL_OW 250
40404: ST_TO_ADDR
// y := GetY ( enemy ) ;
40405: LD_ADDR_VAR 0 5
40409: PUSH
40410: LD_VAR 0 10
40414: PPUSH
40415: CALL_OW 251
40419: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40420: LD_ADDR_VAR 0 6
40424: PUSH
40425: LD_VAR 0 4
40429: PUSH
40430: LD_INT 1
40432: NEG
40433: PPUSH
40434: LD_INT 1
40436: PPUSH
40437: CALL_OW 12
40441: PLUS
40442: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40443: LD_ADDR_VAR 0 7
40447: PUSH
40448: LD_VAR 0 5
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: PPUSH
40457: LD_INT 1
40459: PPUSH
40460: CALL_OW 12
40464: PLUS
40465: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40466: LD_VAR 0 6
40470: PPUSH
40471: LD_VAR 0 7
40475: PPUSH
40476: CALL_OW 488
40480: NOT
40481: IFFALSE 40503
// begin _x := x ;
40483: LD_ADDR_VAR 0 6
40487: PUSH
40488: LD_VAR 0 4
40492: ST_TO_ADDR
// _y := y ;
40493: LD_ADDR_VAR 0 7
40497: PUSH
40498: LD_VAR 0 5
40502: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40503: LD_ADDR_VAR 0 3
40507: PUSH
40508: LD_INT 1
40510: PPUSH
40511: LD_VAR 0 14
40515: PPUSH
40516: CALL_OW 12
40520: ST_TO_ADDR
// case i of 1 :
40521: LD_VAR 0 3
40525: PUSH
40526: LD_INT 1
40528: DOUBLE
40529: EQUAL
40530: IFTRUE 40534
40532: GO 40551
40534: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40535: LD_VAR 0 1
40539: PPUSH
40540: LD_VAR 0 10
40544: PPUSH
40545: CALL_OW 115
40549: GO 40612
40551: LD_INT 2
40553: DOUBLE
40554: EQUAL
40555: IFTRUE 40559
40557: GO 40581
40559: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40560: LD_VAR 0 1
40564: PPUSH
40565: LD_VAR 0 6
40569: PPUSH
40570: LD_VAR 0 7
40574: PPUSH
40575: CALL_OW 153
40579: GO 40612
40581: LD_INT 3
40583: DOUBLE
40584: EQUAL
40585: IFTRUE 40589
40587: GO 40611
40589: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40590: LD_VAR 0 1
40594: PPUSH
40595: LD_VAR 0 6
40599: PPUSH
40600: LD_VAR 0 7
40604: PPUSH
40605: CALL_OW 154
40609: GO 40612
40611: POP
// end ;
40612: LD_VAR 0 2
40616: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40617: LD_INT 0
40619: PPUSH
40620: PPUSH
40621: PPUSH
40622: PPUSH
40623: PPUSH
40624: PPUSH
// if not unit or not building then
40625: LD_VAR 0 1
40629: NOT
40630: PUSH
40631: LD_VAR 0 2
40635: NOT
40636: OR
40637: IFFALSE 40641
// exit ;
40639: GO 40799
// x := GetX ( building ) ;
40641: LD_ADDR_VAR 0 5
40645: PUSH
40646: LD_VAR 0 2
40650: PPUSH
40651: CALL_OW 250
40655: ST_TO_ADDR
// y := GetY ( building ) ;
40656: LD_ADDR_VAR 0 6
40660: PUSH
40661: LD_VAR 0 2
40665: PPUSH
40666: CALL_OW 251
40670: ST_TO_ADDR
// for i = 0 to 5 do
40671: LD_ADDR_VAR 0 4
40675: PUSH
40676: DOUBLE
40677: LD_INT 0
40679: DEC
40680: ST_TO_ADDR
40681: LD_INT 5
40683: PUSH
40684: FOR_TO
40685: IFFALSE 40797
// begin _x := ShiftX ( x , i , 3 ) ;
40687: LD_ADDR_VAR 0 7
40691: PUSH
40692: LD_VAR 0 5
40696: PPUSH
40697: LD_VAR 0 4
40701: PPUSH
40702: LD_INT 3
40704: PPUSH
40705: CALL_OW 272
40709: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40710: LD_ADDR_VAR 0 8
40714: PUSH
40715: LD_VAR 0 6
40719: PPUSH
40720: LD_VAR 0 4
40724: PPUSH
40725: LD_INT 3
40727: PPUSH
40728: CALL_OW 273
40732: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40733: LD_VAR 0 7
40737: PPUSH
40738: LD_VAR 0 8
40742: PPUSH
40743: CALL_OW 488
40747: NOT
40748: IFFALSE 40752
// continue ;
40750: GO 40684
// if HexInfo ( _x , _y ) = 0 then
40752: LD_VAR 0 7
40756: PPUSH
40757: LD_VAR 0 8
40761: PPUSH
40762: CALL_OW 428
40766: PUSH
40767: LD_INT 0
40769: EQUAL
40770: IFFALSE 40795
// begin ComMoveXY ( unit , _x , _y ) ;
40772: LD_VAR 0 1
40776: PPUSH
40777: LD_VAR 0 7
40781: PPUSH
40782: LD_VAR 0 8
40786: PPUSH
40787: CALL_OW 111
// exit ;
40791: POP
40792: POP
40793: GO 40799
// end ; end ;
40795: GO 40684
40797: POP
40798: POP
// end ;
40799: LD_VAR 0 3
40803: RET
// export function ScanBase ( side , base_area ) ; begin
40804: LD_INT 0
40806: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40807: LD_ADDR_VAR 0 3
40811: PUSH
40812: LD_VAR 0 2
40816: PPUSH
40817: LD_INT 81
40819: PUSH
40820: LD_VAR 0 1
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PPUSH
40829: CALL_OW 70
40833: ST_TO_ADDR
// end ;
40834: LD_VAR 0 3
40838: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40839: LD_INT 0
40841: PPUSH
40842: PPUSH
40843: PPUSH
40844: PPUSH
// result := false ;
40845: LD_ADDR_VAR 0 2
40849: PUSH
40850: LD_INT 0
40852: ST_TO_ADDR
// side := GetSide ( unit ) ;
40853: LD_ADDR_VAR 0 3
40857: PUSH
40858: LD_VAR 0 1
40862: PPUSH
40863: CALL_OW 255
40867: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40868: LD_ADDR_VAR 0 4
40872: PUSH
40873: LD_VAR 0 1
40877: PPUSH
40878: CALL_OW 248
40882: ST_TO_ADDR
// case nat of 1 :
40883: LD_VAR 0 4
40887: PUSH
40888: LD_INT 1
40890: DOUBLE
40891: EQUAL
40892: IFTRUE 40896
40894: GO 40907
40896: POP
// tech := tech_lassight ; 2 :
40897: LD_ADDR_VAR 0 5
40901: PUSH
40902: LD_INT 12
40904: ST_TO_ADDR
40905: GO 40946
40907: LD_INT 2
40909: DOUBLE
40910: EQUAL
40911: IFTRUE 40915
40913: GO 40926
40915: POP
// tech := tech_mortar ; 3 :
40916: LD_ADDR_VAR 0 5
40920: PUSH
40921: LD_INT 41
40923: ST_TO_ADDR
40924: GO 40946
40926: LD_INT 3
40928: DOUBLE
40929: EQUAL
40930: IFTRUE 40934
40932: GO 40945
40934: POP
// tech := tech_bazooka ; end ;
40935: LD_ADDR_VAR 0 5
40939: PUSH
40940: LD_INT 44
40942: ST_TO_ADDR
40943: GO 40946
40945: POP
// if Researched ( side , tech ) then
40946: LD_VAR 0 3
40950: PPUSH
40951: LD_VAR 0 5
40955: PPUSH
40956: CALL_OW 325
40960: IFFALSE 40987
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40962: LD_ADDR_VAR 0 2
40966: PUSH
40967: LD_INT 5
40969: PUSH
40970: LD_INT 8
40972: PUSH
40973: LD_INT 9
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: LIST
40980: PUSH
40981: LD_VAR 0 4
40985: ARRAY
40986: ST_TO_ADDR
// end ;
40987: LD_VAR 0 2
40991: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40992: LD_INT 0
40994: PPUSH
40995: PPUSH
40996: PPUSH
// if not mines then
40997: LD_VAR 0 2
41001: NOT
41002: IFFALSE 41006
// exit ;
41004: GO 41150
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41006: LD_ADDR_VAR 0 5
41010: PUSH
41011: LD_INT 81
41013: PUSH
41014: LD_VAR 0 1
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 3
41025: PUSH
41026: LD_INT 21
41028: PUSH
41029: LD_INT 3
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PPUSH
41044: CALL_OW 69
41048: ST_TO_ADDR
// for i in mines do
41049: LD_ADDR_VAR 0 4
41053: PUSH
41054: LD_VAR 0 2
41058: PUSH
41059: FOR_IN
41060: IFFALSE 41148
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41062: LD_VAR 0 4
41066: PUSH
41067: LD_INT 1
41069: ARRAY
41070: PPUSH
41071: LD_VAR 0 4
41075: PUSH
41076: LD_INT 2
41078: ARRAY
41079: PPUSH
41080: CALL_OW 458
41084: NOT
41085: IFFALSE 41089
// continue ;
41087: GO 41059
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41089: LD_VAR 0 4
41093: PUSH
41094: LD_INT 1
41096: ARRAY
41097: PPUSH
41098: LD_VAR 0 4
41102: PUSH
41103: LD_INT 2
41105: ARRAY
41106: PPUSH
41107: CALL_OW 428
41111: PUSH
41112: LD_VAR 0 5
41116: IN
41117: IFFALSE 41146
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41119: LD_VAR 0 4
41123: PUSH
41124: LD_INT 1
41126: ARRAY
41127: PPUSH
41128: LD_VAR 0 4
41132: PUSH
41133: LD_INT 2
41135: ARRAY
41136: PPUSH
41137: LD_VAR 0 1
41141: PPUSH
41142: CALL_OW 456
// end ;
41146: GO 41059
41148: POP
41149: POP
// end ;
41150: LD_VAR 0 3
41154: RET
// export function Count ( array ) ; var i ; begin
41155: LD_INT 0
41157: PPUSH
41158: PPUSH
// result := 0 ;
41159: LD_ADDR_VAR 0 2
41163: PUSH
41164: LD_INT 0
41166: ST_TO_ADDR
// for i in array do
41167: LD_ADDR_VAR 0 3
41171: PUSH
41172: LD_VAR 0 1
41176: PUSH
41177: FOR_IN
41178: IFFALSE 41202
// if i then
41180: LD_VAR 0 3
41184: IFFALSE 41200
// result := result + 1 ;
41186: LD_ADDR_VAR 0 2
41190: PUSH
41191: LD_VAR 0 2
41195: PUSH
41196: LD_INT 1
41198: PLUS
41199: ST_TO_ADDR
41200: GO 41177
41202: POP
41203: POP
// end ;
41204: LD_VAR 0 2
41208: RET
// export function IsEmpty ( building ) ; begin
41209: LD_INT 0
41211: PPUSH
// if not building then
41212: LD_VAR 0 1
41216: NOT
41217: IFFALSE 41221
// exit ;
41219: GO 41264
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41221: LD_ADDR_VAR 0 2
41225: PUSH
41226: LD_VAR 0 1
41230: PUSH
41231: LD_INT 22
41233: PUSH
41234: LD_VAR 0 1
41238: PPUSH
41239: CALL_OW 255
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 58
41250: PUSH
41251: EMPTY
41252: LIST
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PPUSH
41258: CALL_OW 69
41262: IN
41263: ST_TO_ADDR
// end ;
41264: LD_VAR 0 2
41268: RET
// export function IsNotFull ( building ) ; begin
41269: LD_INT 0
41271: PPUSH
// if not building then
41272: LD_VAR 0 1
41276: NOT
41277: IFFALSE 41281
// exit ;
41279: GO 41300
// result := UnitsInside ( building ) < 6 ;
41281: LD_ADDR_VAR 0 2
41285: PUSH
41286: LD_VAR 0 1
41290: PPUSH
41291: CALL_OW 313
41295: PUSH
41296: LD_INT 6
41298: LESS
41299: ST_TO_ADDR
// end ;
41300: LD_VAR 0 2
41304: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41305: LD_INT 0
41307: PPUSH
41308: PPUSH
41309: PPUSH
41310: PPUSH
// tmp := [ ] ;
41311: LD_ADDR_VAR 0 3
41315: PUSH
41316: EMPTY
41317: ST_TO_ADDR
// list := [ ] ;
41318: LD_ADDR_VAR 0 5
41322: PUSH
41323: EMPTY
41324: ST_TO_ADDR
// for i = 16 to 25 do
41325: LD_ADDR_VAR 0 4
41329: PUSH
41330: DOUBLE
41331: LD_INT 16
41333: DEC
41334: ST_TO_ADDR
41335: LD_INT 25
41337: PUSH
41338: FOR_TO
41339: IFFALSE 41412
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41341: LD_ADDR_VAR 0 3
41345: PUSH
41346: LD_VAR 0 3
41350: PUSH
41351: LD_INT 22
41353: PUSH
41354: LD_VAR 0 1
41358: PPUSH
41359: CALL_OW 255
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 91
41370: PUSH
41371: LD_VAR 0 1
41375: PUSH
41376: LD_INT 6
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 30
41386: PUSH
41387: LD_VAR 0 4
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: LIST
41400: PUSH
41401: EMPTY
41402: LIST
41403: PPUSH
41404: CALL_OW 69
41408: ADD
41409: ST_TO_ADDR
41410: GO 41338
41412: POP
41413: POP
// for i = 1 to tmp do
41414: LD_ADDR_VAR 0 4
41418: PUSH
41419: DOUBLE
41420: LD_INT 1
41422: DEC
41423: ST_TO_ADDR
41424: LD_VAR 0 3
41428: PUSH
41429: FOR_TO
41430: IFFALSE 41518
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41432: LD_ADDR_VAR 0 5
41436: PUSH
41437: LD_VAR 0 5
41441: PUSH
41442: LD_VAR 0 3
41446: PUSH
41447: LD_VAR 0 4
41451: ARRAY
41452: PPUSH
41453: CALL_OW 266
41457: PUSH
41458: LD_VAR 0 3
41462: PUSH
41463: LD_VAR 0 4
41467: ARRAY
41468: PPUSH
41469: CALL_OW 250
41473: PUSH
41474: LD_VAR 0 3
41478: PUSH
41479: LD_VAR 0 4
41483: ARRAY
41484: PPUSH
41485: CALL_OW 251
41489: PUSH
41490: LD_VAR 0 3
41494: PUSH
41495: LD_VAR 0 4
41499: ARRAY
41500: PPUSH
41501: CALL_OW 254
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: PUSH
41512: EMPTY
41513: LIST
41514: ADD
41515: ST_TO_ADDR
41516: GO 41429
41518: POP
41519: POP
// result := list ;
41520: LD_ADDR_VAR 0 2
41524: PUSH
41525: LD_VAR 0 5
41529: ST_TO_ADDR
// end ;
41530: LD_VAR 0 2
41534: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41535: LD_INT 0
41537: PPUSH
41538: PPUSH
41539: PPUSH
41540: PPUSH
41541: PPUSH
41542: PPUSH
41543: PPUSH
// if not factory then
41544: LD_VAR 0 1
41548: NOT
41549: IFFALSE 41553
// exit ;
41551: GO 42146
// if control = control_apeman then
41553: LD_VAR 0 4
41557: PUSH
41558: LD_INT 5
41560: EQUAL
41561: IFFALSE 41670
// begin tmp := UnitsInside ( factory ) ;
41563: LD_ADDR_VAR 0 8
41567: PUSH
41568: LD_VAR 0 1
41572: PPUSH
41573: CALL_OW 313
41577: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41578: LD_VAR 0 8
41582: PPUSH
41583: LD_INT 25
41585: PUSH
41586: LD_INT 12
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PPUSH
41593: CALL_OW 72
41597: NOT
41598: IFFALSE 41608
// control := control_manual ;
41600: LD_ADDR_VAR 0 4
41604: PUSH
41605: LD_INT 1
41607: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41608: LD_ADDR_VAR 0 8
41612: PUSH
41613: LD_VAR 0 1
41617: PPUSH
41618: CALL 41305 0 1
41622: ST_TO_ADDR
// if tmp then
41623: LD_VAR 0 8
41627: IFFALSE 41670
// begin for i in tmp do
41629: LD_ADDR_VAR 0 7
41633: PUSH
41634: LD_VAR 0 8
41638: PUSH
41639: FOR_IN
41640: IFFALSE 41668
// if i [ 1 ] = b_ext_radio then
41642: LD_VAR 0 7
41646: PUSH
41647: LD_INT 1
41649: ARRAY
41650: PUSH
41651: LD_INT 22
41653: EQUAL
41654: IFFALSE 41666
// begin control := control_remote ;
41656: LD_ADDR_VAR 0 4
41660: PUSH
41661: LD_INT 2
41663: ST_TO_ADDR
// break ;
41664: GO 41668
// end ;
41666: GO 41639
41668: POP
41669: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41670: LD_VAR 0 1
41674: PPUSH
41675: LD_VAR 0 2
41679: PPUSH
41680: LD_VAR 0 3
41684: PPUSH
41685: LD_VAR 0 4
41689: PPUSH
41690: LD_VAR 0 5
41694: PPUSH
41695: CALL_OW 448
41699: IFFALSE 41734
// begin result := [ chassis , engine , control , weapon ] ;
41701: LD_ADDR_VAR 0 6
41705: PUSH
41706: LD_VAR 0 2
41710: PUSH
41711: LD_VAR 0 3
41715: PUSH
41716: LD_VAR 0 4
41720: PUSH
41721: LD_VAR 0 5
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: ST_TO_ADDR
// exit ;
41732: GO 42146
// end ; _chassis := AvailableChassisList ( factory ) ;
41734: LD_ADDR_VAR 0 9
41738: PUSH
41739: LD_VAR 0 1
41743: PPUSH
41744: CALL_OW 475
41748: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41749: LD_ADDR_VAR 0 11
41753: PUSH
41754: LD_VAR 0 1
41758: PPUSH
41759: CALL_OW 476
41763: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41764: LD_ADDR_VAR 0 12
41768: PUSH
41769: LD_VAR 0 1
41773: PPUSH
41774: CALL_OW 477
41778: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41779: LD_ADDR_VAR 0 10
41783: PUSH
41784: LD_VAR 0 1
41788: PPUSH
41789: CALL_OW 478
41793: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41794: LD_VAR 0 9
41798: NOT
41799: PUSH
41800: LD_VAR 0 11
41804: NOT
41805: OR
41806: PUSH
41807: LD_VAR 0 12
41811: NOT
41812: OR
41813: PUSH
41814: LD_VAR 0 10
41818: NOT
41819: OR
41820: IFFALSE 41855
// begin result := [ chassis , engine , control , weapon ] ;
41822: LD_ADDR_VAR 0 6
41826: PUSH
41827: LD_VAR 0 2
41831: PUSH
41832: LD_VAR 0 3
41836: PUSH
41837: LD_VAR 0 4
41841: PUSH
41842: LD_VAR 0 5
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: ST_TO_ADDR
// exit ;
41853: GO 42146
// end ; if not chassis in _chassis then
41855: LD_VAR 0 2
41859: PUSH
41860: LD_VAR 0 9
41864: IN
41865: NOT
41866: IFFALSE 41892
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41868: LD_ADDR_VAR 0 2
41872: PUSH
41873: LD_VAR 0 9
41877: PUSH
41878: LD_INT 1
41880: PPUSH
41881: LD_VAR 0 9
41885: PPUSH
41886: CALL_OW 12
41890: ARRAY
41891: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41892: LD_VAR 0 2
41896: PPUSH
41897: LD_VAR 0 3
41901: PPUSH
41902: CALL 42151 0 2
41906: NOT
41907: IFFALSE 41966
// repeat engine := _engine [ 1 ] ;
41909: LD_ADDR_VAR 0 3
41913: PUSH
41914: LD_VAR 0 11
41918: PUSH
41919: LD_INT 1
41921: ARRAY
41922: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41923: LD_ADDR_VAR 0 11
41927: PUSH
41928: LD_VAR 0 11
41932: PPUSH
41933: LD_INT 1
41935: PPUSH
41936: CALL_OW 3
41940: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41941: LD_VAR 0 2
41945: PPUSH
41946: LD_VAR 0 3
41950: PPUSH
41951: CALL 42151 0 2
41955: PUSH
41956: LD_VAR 0 11
41960: PUSH
41961: EMPTY
41962: EQUAL
41963: OR
41964: IFFALSE 41909
// if not control in _control then
41966: LD_VAR 0 4
41970: PUSH
41971: LD_VAR 0 12
41975: IN
41976: NOT
41977: IFFALSE 42003
// control := _control [ rand ( 1 , _control ) ] ;
41979: LD_ADDR_VAR 0 4
41983: PUSH
41984: LD_VAR 0 12
41988: PUSH
41989: LD_INT 1
41991: PPUSH
41992: LD_VAR 0 12
41996: PPUSH
41997: CALL_OW 12
42001: ARRAY
42002: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42003: LD_VAR 0 2
42007: PPUSH
42008: LD_VAR 0 5
42012: PPUSH
42013: CALL 42371 0 2
42017: NOT
42018: IFFALSE 42077
// repeat weapon := _weapon [ 1 ] ;
42020: LD_ADDR_VAR 0 5
42024: PUSH
42025: LD_VAR 0 10
42029: PUSH
42030: LD_INT 1
42032: ARRAY
42033: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42034: LD_ADDR_VAR 0 10
42038: PUSH
42039: LD_VAR 0 10
42043: PPUSH
42044: LD_INT 1
42046: PPUSH
42047: CALL_OW 3
42051: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42052: LD_VAR 0 2
42056: PPUSH
42057: LD_VAR 0 5
42061: PPUSH
42062: CALL 42371 0 2
42066: PUSH
42067: LD_VAR 0 10
42071: PUSH
42072: EMPTY
42073: EQUAL
42074: OR
42075: IFFALSE 42020
// result := [ ] ;
42077: LD_ADDR_VAR 0 6
42081: PUSH
42082: EMPTY
42083: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42084: LD_VAR 0 1
42088: PPUSH
42089: LD_VAR 0 2
42093: PPUSH
42094: LD_VAR 0 3
42098: PPUSH
42099: LD_VAR 0 4
42103: PPUSH
42104: LD_VAR 0 5
42108: PPUSH
42109: CALL_OW 448
42113: IFFALSE 42146
// result := [ chassis , engine , control , weapon ] ;
42115: LD_ADDR_VAR 0 6
42119: PUSH
42120: LD_VAR 0 2
42124: PUSH
42125: LD_VAR 0 3
42129: PUSH
42130: LD_VAR 0 4
42134: PUSH
42135: LD_VAR 0 5
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: ST_TO_ADDR
// end ;
42146: LD_VAR 0 6
42150: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42151: LD_INT 0
42153: PPUSH
// if not chassis or not engine then
42154: LD_VAR 0 1
42158: NOT
42159: PUSH
42160: LD_VAR 0 2
42164: NOT
42165: OR
42166: IFFALSE 42170
// exit ;
42168: GO 42366
// case engine of engine_solar :
42170: LD_VAR 0 2
42174: PUSH
42175: LD_INT 2
42177: DOUBLE
42178: EQUAL
42179: IFTRUE 42183
42181: GO 42221
42183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42184: LD_ADDR_VAR 0 3
42188: PUSH
42189: LD_INT 11
42191: PUSH
42192: LD_INT 12
42194: PUSH
42195: LD_INT 13
42197: PUSH
42198: LD_INT 14
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: LD_INT 3
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: ST_TO_ADDR
42219: GO 42350
42221: LD_INT 1
42223: DOUBLE
42224: EQUAL
42225: IFTRUE 42229
42227: GO 42291
42229: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42230: LD_ADDR_VAR 0 3
42234: PUSH
42235: LD_INT 11
42237: PUSH
42238: LD_INT 12
42240: PUSH
42241: LD_INT 13
42243: PUSH
42244: LD_INT 14
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: LD_INT 3
42255: PUSH
42256: LD_INT 4
42258: PUSH
42259: LD_INT 5
42261: PUSH
42262: LD_INT 21
42264: PUSH
42265: LD_INT 23
42267: PUSH
42268: LD_INT 22
42270: PUSH
42271: LD_INT 24
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: ST_TO_ADDR
42289: GO 42350
42291: LD_INT 3
42293: DOUBLE
42294: EQUAL
42295: IFTRUE 42299
42297: GO 42349
42299: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42300: LD_ADDR_VAR 0 3
42304: PUSH
42305: LD_INT 13
42307: PUSH
42308: LD_INT 14
42310: PUSH
42311: LD_INT 2
42313: PUSH
42314: LD_INT 3
42316: PUSH
42317: LD_INT 4
42319: PUSH
42320: LD_INT 5
42322: PUSH
42323: LD_INT 21
42325: PUSH
42326: LD_INT 22
42328: PUSH
42329: LD_INT 23
42331: PUSH
42332: LD_INT 24
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: ST_TO_ADDR
42347: GO 42350
42349: POP
// result := ( chassis in result ) ;
42350: LD_ADDR_VAR 0 3
42354: PUSH
42355: LD_VAR 0 1
42359: PUSH
42360: LD_VAR 0 3
42364: IN
42365: ST_TO_ADDR
// end ;
42366: LD_VAR 0 3
42370: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42371: LD_INT 0
42373: PPUSH
// if not chassis or not weapon then
42374: LD_VAR 0 1
42378: NOT
42379: PUSH
42380: LD_VAR 0 2
42384: NOT
42385: OR
42386: IFFALSE 42390
// exit ;
42388: GO 43416
// case weapon of us_machine_gun :
42390: LD_VAR 0 2
42394: PUSH
42395: LD_INT 2
42397: DOUBLE
42398: EQUAL
42399: IFTRUE 42403
42401: GO 42433
42403: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42404: LD_ADDR_VAR 0 3
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: LD_INT 3
42417: PUSH
42418: LD_INT 4
42420: PUSH
42421: LD_INT 5
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: ST_TO_ADDR
42431: GO 43400
42433: LD_INT 3
42435: DOUBLE
42436: EQUAL
42437: IFTRUE 42441
42439: GO 42471
42441: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42442: LD_ADDR_VAR 0 3
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 2
42452: PUSH
42453: LD_INT 3
42455: PUSH
42456: LD_INT 4
42458: PUSH
42459: LD_INT 5
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: ST_TO_ADDR
42469: GO 43400
42471: LD_INT 11
42473: DOUBLE
42474: EQUAL
42475: IFTRUE 42479
42477: GO 42509
42479: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42480: LD_ADDR_VAR 0 3
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: LD_INT 2
42490: PUSH
42491: LD_INT 3
42493: PUSH
42494: LD_INT 4
42496: PUSH
42497: LD_INT 5
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: ST_TO_ADDR
42507: GO 43400
42509: LD_INT 4
42511: DOUBLE
42512: EQUAL
42513: IFTRUE 42517
42515: GO 42543
42517: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42518: LD_ADDR_VAR 0 3
42522: PUSH
42523: LD_INT 2
42525: PUSH
42526: LD_INT 3
42528: PUSH
42529: LD_INT 4
42531: PUSH
42532: LD_INT 5
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: ST_TO_ADDR
42541: GO 43400
42543: LD_INT 5
42545: DOUBLE
42546: EQUAL
42547: IFTRUE 42551
42549: GO 42577
42551: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42552: LD_ADDR_VAR 0 3
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: LD_INT 3
42562: PUSH
42563: LD_INT 4
42565: PUSH
42566: LD_INT 5
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: ST_TO_ADDR
42575: GO 43400
42577: LD_INT 9
42579: DOUBLE
42580: EQUAL
42581: IFTRUE 42585
42583: GO 42611
42585: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42586: LD_ADDR_VAR 0 3
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: LD_INT 3
42596: PUSH
42597: LD_INT 4
42599: PUSH
42600: LD_INT 5
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: ST_TO_ADDR
42609: GO 43400
42611: LD_INT 7
42613: DOUBLE
42614: EQUAL
42615: IFTRUE 42619
42617: GO 42645
42619: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42620: LD_ADDR_VAR 0 3
42624: PUSH
42625: LD_INT 2
42627: PUSH
42628: LD_INT 3
42630: PUSH
42631: LD_INT 4
42633: PUSH
42634: LD_INT 5
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: ST_TO_ADDR
42643: GO 43400
42645: LD_INT 12
42647: DOUBLE
42648: EQUAL
42649: IFTRUE 42653
42651: GO 42679
42653: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42654: LD_ADDR_VAR 0 3
42658: PUSH
42659: LD_INT 2
42661: PUSH
42662: LD_INT 3
42664: PUSH
42665: LD_INT 4
42667: PUSH
42668: LD_INT 5
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: ST_TO_ADDR
42677: GO 43400
42679: LD_INT 13
42681: DOUBLE
42682: EQUAL
42683: IFTRUE 42687
42685: GO 42713
42687: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42688: LD_ADDR_VAR 0 3
42692: PUSH
42693: LD_INT 2
42695: PUSH
42696: LD_INT 3
42698: PUSH
42699: LD_INT 4
42701: PUSH
42702: LD_INT 5
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: ST_TO_ADDR
42711: GO 43400
42713: LD_INT 14
42715: DOUBLE
42716: EQUAL
42717: IFTRUE 42721
42719: GO 42739
42721: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42722: LD_ADDR_VAR 0 3
42726: PUSH
42727: LD_INT 4
42729: PUSH
42730: LD_INT 5
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: ST_TO_ADDR
42737: GO 43400
42739: LD_INT 6
42741: DOUBLE
42742: EQUAL
42743: IFTRUE 42747
42745: GO 42765
42747: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42748: LD_ADDR_VAR 0 3
42752: PUSH
42753: LD_INT 4
42755: PUSH
42756: LD_INT 5
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: ST_TO_ADDR
42763: GO 43400
42765: LD_INT 10
42767: DOUBLE
42768: EQUAL
42769: IFTRUE 42773
42771: GO 42791
42773: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42774: LD_ADDR_VAR 0 3
42778: PUSH
42779: LD_INT 4
42781: PUSH
42782: LD_INT 5
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: ST_TO_ADDR
42789: GO 43400
42791: LD_INT 22
42793: DOUBLE
42794: EQUAL
42795: IFTRUE 42799
42797: GO 42825
42799: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42800: LD_ADDR_VAR 0 3
42804: PUSH
42805: LD_INT 11
42807: PUSH
42808: LD_INT 12
42810: PUSH
42811: LD_INT 13
42813: PUSH
42814: LD_INT 14
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: ST_TO_ADDR
42823: GO 43400
42825: LD_INT 23
42827: DOUBLE
42828: EQUAL
42829: IFTRUE 42833
42831: GO 42859
42833: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42834: LD_ADDR_VAR 0 3
42838: PUSH
42839: LD_INT 11
42841: PUSH
42842: LD_INT 12
42844: PUSH
42845: LD_INT 13
42847: PUSH
42848: LD_INT 14
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: ST_TO_ADDR
42857: GO 43400
42859: LD_INT 24
42861: DOUBLE
42862: EQUAL
42863: IFTRUE 42867
42865: GO 42893
42867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42868: LD_ADDR_VAR 0 3
42872: PUSH
42873: LD_INT 11
42875: PUSH
42876: LD_INT 12
42878: PUSH
42879: LD_INT 13
42881: PUSH
42882: LD_INT 14
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: ST_TO_ADDR
42891: GO 43400
42893: LD_INT 30
42895: DOUBLE
42896: EQUAL
42897: IFTRUE 42901
42899: GO 42927
42901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42902: LD_ADDR_VAR 0 3
42906: PUSH
42907: LD_INT 11
42909: PUSH
42910: LD_INT 12
42912: PUSH
42913: LD_INT 13
42915: PUSH
42916: LD_INT 14
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: ST_TO_ADDR
42925: GO 43400
42927: LD_INT 25
42929: DOUBLE
42930: EQUAL
42931: IFTRUE 42935
42933: GO 42953
42935: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42936: LD_ADDR_VAR 0 3
42940: PUSH
42941: LD_INT 13
42943: PUSH
42944: LD_INT 14
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: ST_TO_ADDR
42951: GO 43400
42953: LD_INT 27
42955: DOUBLE
42956: EQUAL
42957: IFTRUE 42961
42959: GO 42979
42961: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42962: LD_ADDR_VAR 0 3
42966: PUSH
42967: LD_INT 13
42969: PUSH
42970: LD_INT 14
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: ST_TO_ADDR
42977: GO 43400
42979: LD_INT 28
42981: DOUBLE
42982: EQUAL
42983: IFTRUE 42987
42985: GO 43005
42987: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42988: LD_ADDR_VAR 0 3
42992: PUSH
42993: LD_INT 13
42995: PUSH
42996: LD_INT 14
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: ST_TO_ADDR
43003: GO 43400
43005: LD_INT 29
43007: DOUBLE
43008: EQUAL
43009: IFTRUE 43013
43011: GO 43031
43013: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43014: LD_ADDR_VAR 0 3
43018: PUSH
43019: LD_INT 13
43021: PUSH
43022: LD_INT 14
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: ST_TO_ADDR
43029: GO 43400
43031: LD_INT 31
43033: DOUBLE
43034: EQUAL
43035: IFTRUE 43039
43037: GO 43057
43039: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43040: LD_ADDR_VAR 0 3
43044: PUSH
43045: LD_INT 13
43047: PUSH
43048: LD_INT 14
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: ST_TO_ADDR
43055: GO 43400
43057: LD_INT 26
43059: DOUBLE
43060: EQUAL
43061: IFTRUE 43065
43063: GO 43083
43065: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43066: LD_ADDR_VAR 0 3
43070: PUSH
43071: LD_INT 13
43073: PUSH
43074: LD_INT 14
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: ST_TO_ADDR
43081: GO 43400
43083: LD_INT 42
43085: DOUBLE
43086: EQUAL
43087: IFTRUE 43091
43089: GO 43117
43091: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43092: LD_ADDR_VAR 0 3
43096: PUSH
43097: LD_INT 21
43099: PUSH
43100: LD_INT 22
43102: PUSH
43103: LD_INT 23
43105: PUSH
43106: LD_INT 24
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: ST_TO_ADDR
43115: GO 43400
43117: LD_INT 43
43119: DOUBLE
43120: EQUAL
43121: IFTRUE 43125
43123: GO 43151
43125: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43126: LD_ADDR_VAR 0 3
43130: PUSH
43131: LD_INT 21
43133: PUSH
43134: LD_INT 22
43136: PUSH
43137: LD_INT 23
43139: PUSH
43140: LD_INT 24
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: ST_TO_ADDR
43149: GO 43400
43151: LD_INT 44
43153: DOUBLE
43154: EQUAL
43155: IFTRUE 43159
43157: GO 43185
43159: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43160: LD_ADDR_VAR 0 3
43164: PUSH
43165: LD_INT 21
43167: PUSH
43168: LD_INT 22
43170: PUSH
43171: LD_INT 23
43173: PUSH
43174: LD_INT 24
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: ST_TO_ADDR
43183: GO 43400
43185: LD_INT 45
43187: DOUBLE
43188: EQUAL
43189: IFTRUE 43193
43191: GO 43219
43193: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43194: LD_ADDR_VAR 0 3
43198: PUSH
43199: LD_INT 21
43201: PUSH
43202: LD_INT 22
43204: PUSH
43205: LD_INT 23
43207: PUSH
43208: LD_INT 24
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: ST_TO_ADDR
43217: GO 43400
43219: LD_INT 49
43221: DOUBLE
43222: EQUAL
43223: IFTRUE 43227
43225: GO 43253
43227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43228: LD_ADDR_VAR 0 3
43232: PUSH
43233: LD_INT 21
43235: PUSH
43236: LD_INT 22
43238: PUSH
43239: LD_INT 23
43241: PUSH
43242: LD_INT 24
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: ST_TO_ADDR
43251: GO 43400
43253: LD_INT 51
43255: DOUBLE
43256: EQUAL
43257: IFTRUE 43261
43259: GO 43287
43261: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43262: LD_ADDR_VAR 0 3
43266: PUSH
43267: LD_INT 21
43269: PUSH
43270: LD_INT 22
43272: PUSH
43273: LD_INT 23
43275: PUSH
43276: LD_INT 24
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: ST_TO_ADDR
43285: GO 43400
43287: LD_INT 52
43289: DOUBLE
43290: EQUAL
43291: IFTRUE 43295
43293: GO 43321
43295: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43296: LD_ADDR_VAR 0 3
43300: PUSH
43301: LD_INT 21
43303: PUSH
43304: LD_INT 22
43306: PUSH
43307: LD_INT 23
43309: PUSH
43310: LD_INT 24
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: ST_TO_ADDR
43319: GO 43400
43321: LD_INT 53
43323: DOUBLE
43324: EQUAL
43325: IFTRUE 43329
43327: GO 43347
43329: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43330: LD_ADDR_VAR 0 3
43334: PUSH
43335: LD_INT 23
43337: PUSH
43338: LD_INT 24
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: ST_TO_ADDR
43345: GO 43400
43347: LD_INT 46
43349: DOUBLE
43350: EQUAL
43351: IFTRUE 43355
43353: GO 43373
43355: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43356: LD_ADDR_VAR 0 3
43360: PUSH
43361: LD_INT 23
43363: PUSH
43364: LD_INT 24
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: ST_TO_ADDR
43371: GO 43400
43373: LD_INT 47
43375: DOUBLE
43376: EQUAL
43377: IFTRUE 43381
43379: GO 43399
43381: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43382: LD_ADDR_VAR 0 3
43386: PUSH
43387: LD_INT 23
43389: PUSH
43390: LD_INT 24
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: ST_TO_ADDR
43397: GO 43400
43399: POP
// result := ( chassis in result ) ;
43400: LD_ADDR_VAR 0 3
43404: PUSH
43405: LD_VAR 0 1
43409: PUSH
43410: LD_VAR 0 3
43414: IN
43415: ST_TO_ADDR
// end ;
43416: LD_VAR 0 3
43420: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43421: LD_INT 0
43423: PPUSH
43424: PPUSH
43425: PPUSH
43426: PPUSH
43427: PPUSH
43428: PPUSH
43429: PPUSH
// result := array ;
43430: LD_ADDR_VAR 0 5
43434: PUSH
43435: LD_VAR 0 1
43439: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43440: LD_VAR 0 1
43444: NOT
43445: PUSH
43446: LD_VAR 0 2
43450: NOT
43451: OR
43452: PUSH
43453: LD_VAR 0 3
43457: NOT
43458: OR
43459: PUSH
43460: LD_VAR 0 2
43464: PUSH
43465: LD_VAR 0 1
43469: GREATER
43470: OR
43471: PUSH
43472: LD_VAR 0 3
43476: PUSH
43477: LD_VAR 0 1
43481: GREATER
43482: OR
43483: IFFALSE 43487
// exit ;
43485: GO 43783
// if direction then
43487: LD_VAR 0 4
43491: IFFALSE 43555
// begin d := 1 ;
43493: LD_ADDR_VAR 0 9
43497: PUSH
43498: LD_INT 1
43500: ST_TO_ADDR
// if i_from > i_to then
43501: LD_VAR 0 2
43505: PUSH
43506: LD_VAR 0 3
43510: GREATER
43511: IFFALSE 43537
// length := ( array - i_from ) + i_to else
43513: LD_ADDR_VAR 0 11
43517: PUSH
43518: LD_VAR 0 1
43522: PUSH
43523: LD_VAR 0 2
43527: MINUS
43528: PUSH
43529: LD_VAR 0 3
43533: PLUS
43534: ST_TO_ADDR
43535: GO 43553
// length := i_to - i_from ;
43537: LD_ADDR_VAR 0 11
43541: PUSH
43542: LD_VAR 0 3
43546: PUSH
43547: LD_VAR 0 2
43551: MINUS
43552: ST_TO_ADDR
// end else
43553: GO 43616
// begin d := - 1 ;
43555: LD_ADDR_VAR 0 9
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: ST_TO_ADDR
// if i_from > i_to then
43564: LD_VAR 0 2
43568: PUSH
43569: LD_VAR 0 3
43573: GREATER
43574: IFFALSE 43594
// length := i_from - i_to else
43576: LD_ADDR_VAR 0 11
43580: PUSH
43581: LD_VAR 0 2
43585: PUSH
43586: LD_VAR 0 3
43590: MINUS
43591: ST_TO_ADDR
43592: GO 43616
// length := ( array - i_to ) + i_from ;
43594: LD_ADDR_VAR 0 11
43598: PUSH
43599: LD_VAR 0 1
43603: PUSH
43604: LD_VAR 0 3
43608: MINUS
43609: PUSH
43610: LD_VAR 0 2
43614: PLUS
43615: ST_TO_ADDR
// end ; if not length then
43616: LD_VAR 0 11
43620: NOT
43621: IFFALSE 43625
// exit ;
43623: GO 43783
// tmp := array ;
43625: LD_ADDR_VAR 0 10
43629: PUSH
43630: LD_VAR 0 1
43634: ST_TO_ADDR
// for i = 1 to length do
43635: LD_ADDR_VAR 0 6
43639: PUSH
43640: DOUBLE
43641: LD_INT 1
43643: DEC
43644: ST_TO_ADDR
43645: LD_VAR 0 11
43649: PUSH
43650: FOR_TO
43651: IFFALSE 43771
// begin for j = 1 to array do
43653: LD_ADDR_VAR 0 7
43657: PUSH
43658: DOUBLE
43659: LD_INT 1
43661: DEC
43662: ST_TO_ADDR
43663: LD_VAR 0 1
43667: PUSH
43668: FOR_TO
43669: IFFALSE 43757
// begin k := j + d ;
43671: LD_ADDR_VAR 0 8
43675: PUSH
43676: LD_VAR 0 7
43680: PUSH
43681: LD_VAR 0 9
43685: PLUS
43686: ST_TO_ADDR
// if k > array then
43687: LD_VAR 0 8
43691: PUSH
43692: LD_VAR 0 1
43696: GREATER
43697: IFFALSE 43707
// k := 1 ;
43699: LD_ADDR_VAR 0 8
43703: PUSH
43704: LD_INT 1
43706: ST_TO_ADDR
// if not k then
43707: LD_VAR 0 8
43711: NOT
43712: IFFALSE 43724
// k := array ;
43714: LD_ADDR_VAR 0 8
43718: PUSH
43719: LD_VAR 0 1
43723: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43724: LD_ADDR_VAR 0 10
43728: PUSH
43729: LD_VAR 0 10
43733: PPUSH
43734: LD_VAR 0 8
43738: PPUSH
43739: LD_VAR 0 1
43743: PUSH
43744: LD_VAR 0 7
43748: ARRAY
43749: PPUSH
43750: CALL_OW 1
43754: ST_TO_ADDR
// end ;
43755: GO 43668
43757: POP
43758: POP
// array := tmp ;
43759: LD_ADDR_VAR 0 1
43763: PUSH
43764: LD_VAR 0 10
43768: ST_TO_ADDR
// end ;
43769: GO 43650
43771: POP
43772: POP
// result := array ;
43773: LD_ADDR_VAR 0 5
43777: PUSH
43778: LD_VAR 0 1
43782: ST_TO_ADDR
// end ;
43783: LD_VAR 0 5
43787: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43788: LD_INT 0
43790: PPUSH
43791: PPUSH
// result := 0 ;
43792: LD_ADDR_VAR 0 3
43796: PUSH
43797: LD_INT 0
43799: ST_TO_ADDR
// if not array or not value in array then
43800: LD_VAR 0 1
43804: NOT
43805: PUSH
43806: LD_VAR 0 2
43810: PUSH
43811: LD_VAR 0 1
43815: IN
43816: NOT
43817: OR
43818: IFFALSE 43822
// exit ;
43820: GO 43876
// for i = 1 to array do
43822: LD_ADDR_VAR 0 4
43826: PUSH
43827: DOUBLE
43828: LD_INT 1
43830: DEC
43831: ST_TO_ADDR
43832: LD_VAR 0 1
43836: PUSH
43837: FOR_TO
43838: IFFALSE 43874
// if value = array [ i ] then
43840: LD_VAR 0 2
43844: PUSH
43845: LD_VAR 0 1
43849: PUSH
43850: LD_VAR 0 4
43854: ARRAY
43855: EQUAL
43856: IFFALSE 43872
// begin result := i ;
43858: LD_ADDR_VAR 0 3
43862: PUSH
43863: LD_VAR 0 4
43867: ST_TO_ADDR
// exit ;
43868: POP
43869: POP
43870: GO 43876
// end ;
43872: GO 43837
43874: POP
43875: POP
// end ;
43876: LD_VAR 0 3
43880: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43881: LD_INT 0
43883: PPUSH
// vc_chassis := chassis ;
43884: LD_ADDR_OWVAR 37
43888: PUSH
43889: LD_VAR 0 1
43893: ST_TO_ADDR
// vc_engine := engine ;
43894: LD_ADDR_OWVAR 39
43898: PUSH
43899: LD_VAR 0 2
43903: ST_TO_ADDR
// vc_control := control ;
43904: LD_ADDR_OWVAR 38
43908: PUSH
43909: LD_VAR 0 3
43913: ST_TO_ADDR
// vc_weapon := weapon ;
43914: LD_ADDR_OWVAR 40
43918: PUSH
43919: LD_VAR 0 4
43923: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43924: LD_ADDR_OWVAR 41
43928: PUSH
43929: LD_VAR 0 5
43933: ST_TO_ADDR
// end ;
43934: LD_VAR 0 6
43938: RET
// export function WantPlant ( unit ) ; var task ; begin
43939: LD_INT 0
43941: PPUSH
43942: PPUSH
// result := false ;
43943: LD_ADDR_VAR 0 2
43947: PUSH
43948: LD_INT 0
43950: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43951: LD_ADDR_VAR 0 3
43955: PUSH
43956: LD_VAR 0 1
43960: PPUSH
43961: CALL_OW 437
43965: ST_TO_ADDR
// if task then
43966: LD_VAR 0 3
43970: IFFALSE 43998
// if task [ 1 ] [ 1 ] = p then
43972: LD_VAR 0 3
43976: PUSH
43977: LD_INT 1
43979: ARRAY
43980: PUSH
43981: LD_INT 1
43983: ARRAY
43984: PUSH
43985: LD_STRING p
43987: EQUAL
43988: IFFALSE 43998
// result := true ;
43990: LD_ADDR_VAR 0 2
43994: PUSH
43995: LD_INT 1
43997: ST_TO_ADDR
// end ;
43998: LD_VAR 0 2
44002: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44003: LD_INT 0
44005: PPUSH
44006: PPUSH
44007: PPUSH
44008: PPUSH
// if pos < 1 then
44009: LD_VAR 0 2
44013: PUSH
44014: LD_INT 1
44016: LESS
44017: IFFALSE 44021
// exit ;
44019: GO 44324
// if pos = 1 then
44021: LD_VAR 0 2
44025: PUSH
44026: LD_INT 1
44028: EQUAL
44029: IFFALSE 44062
// result := Replace ( arr , pos [ 1 ] , value ) else
44031: LD_ADDR_VAR 0 4
44035: PUSH
44036: LD_VAR 0 1
44040: PPUSH
44041: LD_VAR 0 2
44045: PUSH
44046: LD_INT 1
44048: ARRAY
44049: PPUSH
44050: LD_VAR 0 3
44054: PPUSH
44055: CALL_OW 1
44059: ST_TO_ADDR
44060: GO 44324
// begin tmp := arr ;
44062: LD_ADDR_VAR 0 6
44066: PUSH
44067: LD_VAR 0 1
44071: ST_TO_ADDR
// s_arr := [ tmp ] ;
44072: LD_ADDR_VAR 0 7
44076: PUSH
44077: LD_VAR 0 6
44081: PUSH
44082: EMPTY
44083: LIST
44084: ST_TO_ADDR
// for i = 1 to pos - 1 do
44085: LD_ADDR_VAR 0 5
44089: PUSH
44090: DOUBLE
44091: LD_INT 1
44093: DEC
44094: ST_TO_ADDR
44095: LD_VAR 0 2
44099: PUSH
44100: LD_INT 1
44102: MINUS
44103: PUSH
44104: FOR_TO
44105: IFFALSE 44150
// begin tmp := tmp [ pos [ i ] ] ;
44107: LD_ADDR_VAR 0 6
44111: PUSH
44112: LD_VAR 0 6
44116: PUSH
44117: LD_VAR 0 2
44121: PUSH
44122: LD_VAR 0 5
44126: ARRAY
44127: ARRAY
44128: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44129: LD_ADDR_VAR 0 7
44133: PUSH
44134: LD_VAR 0 7
44138: PUSH
44139: LD_VAR 0 6
44143: PUSH
44144: EMPTY
44145: LIST
44146: ADD
44147: ST_TO_ADDR
// end ;
44148: GO 44104
44150: POP
44151: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44152: LD_ADDR_VAR 0 6
44156: PUSH
44157: LD_VAR 0 6
44161: PPUSH
44162: LD_VAR 0 2
44166: PUSH
44167: LD_VAR 0 2
44171: ARRAY
44172: PPUSH
44173: LD_VAR 0 3
44177: PPUSH
44178: CALL_OW 1
44182: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44183: LD_ADDR_VAR 0 7
44187: PUSH
44188: LD_VAR 0 7
44192: PPUSH
44193: LD_VAR 0 7
44197: PPUSH
44198: LD_VAR 0 6
44202: PPUSH
44203: CALL_OW 1
44207: ST_TO_ADDR
// for i = s_arr downto 2 do
44208: LD_ADDR_VAR 0 5
44212: PUSH
44213: DOUBLE
44214: LD_VAR 0 7
44218: INC
44219: ST_TO_ADDR
44220: LD_INT 2
44222: PUSH
44223: FOR_DOWNTO
44224: IFFALSE 44308
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44226: LD_ADDR_VAR 0 6
44230: PUSH
44231: LD_VAR 0 7
44235: PUSH
44236: LD_VAR 0 5
44240: PUSH
44241: LD_INT 1
44243: MINUS
44244: ARRAY
44245: PPUSH
44246: LD_VAR 0 2
44250: PUSH
44251: LD_VAR 0 5
44255: PUSH
44256: LD_INT 1
44258: MINUS
44259: ARRAY
44260: PPUSH
44261: LD_VAR 0 7
44265: PUSH
44266: LD_VAR 0 5
44270: ARRAY
44271: PPUSH
44272: CALL_OW 1
44276: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44277: LD_ADDR_VAR 0 7
44281: PUSH
44282: LD_VAR 0 7
44286: PPUSH
44287: LD_VAR 0 5
44291: PUSH
44292: LD_INT 1
44294: MINUS
44295: PPUSH
44296: LD_VAR 0 6
44300: PPUSH
44301: CALL_OW 1
44305: ST_TO_ADDR
// end ;
44306: GO 44223
44308: POP
44309: POP
// result := s_arr [ 1 ] ;
44310: LD_ADDR_VAR 0 4
44314: PUSH
44315: LD_VAR 0 7
44319: PUSH
44320: LD_INT 1
44322: ARRAY
44323: ST_TO_ADDR
// end ; end ;
44324: LD_VAR 0 4
44328: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44329: LD_INT 0
44331: PPUSH
44332: PPUSH
// if not list then
44333: LD_VAR 0 1
44337: NOT
44338: IFFALSE 44342
// exit ;
44340: GO 44433
// i := list [ pos1 ] ;
44342: LD_ADDR_VAR 0 5
44346: PUSH
44347: LD_VAR 0 1
44351: PUSH
44352: LD_VAR 0 2
44356: ARRAY
44357: ST_TO_ADDR
// if not i then
44358: LD_VAR 0 5
44362: NOT
44363: IFFALSE 44367
// exit ;
44365: GO 44433
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44367: LD_ADDR_VAR 0 1
44371: PUSH
44372: LD_VAR 0 1
44376: PPUSH
44377: LD_VAR 0 2
44381: PPUSH
44382: LD_VAR 0 1
44386: PUSH
44387: LD_VAR 0 3
44391: ARRAY
44392: PPUSH
44393: CALL_OW 1
44397: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44398: LD_ADDR_VAR 0 1
44402: PUSH
44403: LD_VAR 0 1
44407: PPUSH
44408: LD_VAR 0 3
44412: PPUSH
44413: LD_VAR 0 5
44417: PPUSH
44418: CALL_OW 1
44422: ST_TO_ADDR
// result := list ;
44423: LD_ADDR_VAR 0 4
44427: PUSH
44428: LD_VAR 0 1
44432: ST_TO_ADDR
// end ;
44433: LD_VAR 0 4
44437: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44438: LD_INT 0
44440: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44441: LD_ADDR_VAR 0 5
44445: PUSH
44446: LD_VAR 0 1
44450: PPUSH
44451: CALL_OW 250
44455: PPUSH
44456: LD_VAR 0 1
44460: PPUSH
44461: CALL_OW 251
44465: PPUSH
44466: LD_VAR 0 2
44470: PPUSH
44471: LD_VAR 0 3
44475: PPUSH
44476: LD_VAR 0 4
44480: PPUSH
44481: CALL 44491 0 5
44485: ST_TO_ADDR
// end ;
44486: LD_VAR 0 5
44490: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44491: LD_INT 0
44493: PPUSH
44494: PPUSH
44495: PPUSH
44496: PPUSH
// if not list then
44497: LD_VAR 0 3
44501: NOT
44502: IFFALSE 44506
// exit ;
44504: GO 44894
// result := [ ] ;
44506: LD_ADDR_VAR 0 6
44510: PUSH
44511: EMPTY
44512: ST_TO_ADDR
// for i in list do
44513: LD_ADDR_VAR 0 7
44517: PUSH
44518: LD_VAR 0 3
44522: PUSH
44523: FOR_IN
44524: IFFALSE 44726
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44526: LD_ADDR_VAR 0 9
44530: PUSH
44531: LD_VAR 0 7
44535: PPUSH
44536: LD_VAR 0 1
44540: PPUSH
44541: LD_VAR 0 2
44545: PPUSH
44546: CALL_OW 297
44550: ST_TO_ADDR
// if not result then
44551: LD_VAR 0 6
44555: NOT
44556: IFFALSE 44582
// result := [ [ i , tmp ] ] else
44558: LD_ADDR_VAR 0 6
44562: PUSH
44563: LD_VAR 0 7
44567: PUSH
44568: LD_VAR 0 9
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: EMPTY
44578: LIST
44579: ST_TO_ADDR
44580: GO 44724
// begin if result [ result ] [ 2 ] < tmp then
44582: LD_VAR 0 6
44586: PUSH
44587: LD_VAR 0 6
44591: ARRAY
44592: PUSH
44593: LD_INT 2
44595: ARRAY
44596: PUSH
44597: LD_VAR 0 9
44601: LESS
44602: IFFALSE 44644
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44604: LD_ADDR_VAR 0 6
44608: PUSH
44609: LD_VAR 0 6
44613: PPUSH
44614: LD_VAR 0 6
44618: PUSH
44619: LD_INT 1
44621: PLUS
44622: PPUSH
44623: LD_VAR 0 7
44627: PUSH
44628: LD_VAR 0 9
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PPUSH
44637: CALL_OW 2
44641: ST_TO_ADDR
44642: GO 44724
// for j = 1 to result do
44644: LD_ADDR_VAR 0 8
44648: PUSH
44649: DOUBLE
44650: LD_INT 1
44652: DEC
44653: ST_TO_ADDR
44654: LD_VAR 0 6
44658: PUSH
44659: FOR_TO
44660: IFFALSE 44722
// begin if tmp < result [ j ] [ 2 ] then
44662: LD_VAR 0 9
44666: PUSH
44667: LD_VAR 0 6
44671: PUSH
44672: LD_VAR 0 8
44676: ARRAY
44677: PUSH
44678: LD_INT 2
44680: ARRAY
44681: LESS
44682: IFFALSE 44720
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44684: LD_ADDR_VAR 0 6
44688: PUSH
44689: LD_VAR 0 6
44693: PPUSH
44694: LD_VAR 0 8
44698: PPUSH
44699: LD_VAR 0 7
44703: PUSH
44704: LD_VAR 0 9
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PPUSH
44713: CALL_OW 2
44717: ST_TO_ADDR
// break ;
44718: GO 44722
// end ; end ;
44720: GO 44659
44722: POP
44723: POP
// end ; end ;
44724: GO 44523
44726: POP
44727: POP
// if result and not asc then
44728: LD_VAR 0 6
44732: PUSH
44733: LD_VAR 0 4
44737: NOT
44738: AND
44739: IFFALSE 44814
// begin tmp := result ;
44741: LD_ADDR_VAR 0 9
44745: PUSH
44746: LD_VAR 0 6
44750: ST_TO_ADDR
// for i = tmp downto 1 do
44751: LD_ADDR_VAR 0 7
44755: PUSH
44756: DOUBLE
44757: LD_VAR 0 9
44761: INC
44762: ST_TO_ADDR
44763: LD_INT 1
44765: PUSH
44766: FOR_DOWNTO
44767: IFFALSE 44812
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44769: LD_ADDR_VAR 0 6
44773: PUSH
44774: LD_VAR 0 6
44778: PPUSH
44779: LD_VAR 0 9
44783: PUSH
44784: LD_VAR 0 7
44788: MINUS
44789: PUSH
44790: LD_INT 1
44792: PLUS
44793: PPUSH
44794: LD_VAR 0 9
44798: PUSH
44799: LD_VAR 0 7
44803: ARRAY
44804: PPUSH
44805: CALL_OW 1
44809: ST_TO_ADDR
44810: GO 44766
44812: POP
44813: POP
// end ; tmp := [ ] ;
44814: LD_ADDR_VAR 0 9
44818: PUSH
44819: EMPTY
44820: ST_TO_ADDR
// if mode then
44821: LD_VAR 0 5
44825: IFFALSE 44894
// begin for i = 1 to result do
44827: LD_ADDR_VAR 0 7
44831: PUSH
44832: DOUBLE
44833: LD_INT 1
44835: DEC
44836: ST_TO_ADDR
44837: LD_VAR 0 6
44841: PUSH
44842: FOR_TO
44843: IFFALSE 44882
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44845: LD_ADDR_VAR 0 9
44849: PUSH
44850: LD_VAR 0 9
44854: PPUSH
44855: LD_VAR 0 7
44859: PPUSH
44860: LD_VAR 0 6
44864: PUSH
44865: LD_VAR 0 7
44869: ARRAY
44870: PUSH
44871: LD_INT 1
44873: ARRAY
44874: PPUSH
44875: CALL_OW 1
44879: ST_TO_ADDR
44880: GO 44842
44882: POP
44883: POP
// result := tmp ;
44884: LD_ADDR_VAR 0 6
44888: PUSH
44889: LD_VAR 0 9
44893: ST_TO_ADDR
// end ; end ;
44894: LD_VAR 0 6
44898: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44899: LD_INT 0
44901: PPUSH
44902: PPUSH
44903: PPUSH
44904: PPUSH
44905: PPUSH
44906: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44907: LD_ADDR_VAR 0 5
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: ST_TO_ADDR
// if not x or not y then
44929: LD_VAR 0 2
44933: NOT
44934: PUSH
44935: LD_VAR 0 3
44939: NOT
44940: OR
44941: IFFALSE 44945
// exit ;
44943: GO 46591
// if not range then
44945: LD_VAR 0 4
44949: NOT
44950: IFFALSE 44960
// range := 10 ;
44952: LD_ADDR_VAR 0 4
44956: PUSH
44957: LD_INT 10
44959: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44960: LD_ADDR_VAR 0 8
44964: PUSH
44965: LD_INT 81
44967: PUSH
44968: LD_VAR 0 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 92
44979: PUSH
44980: LD_VAR 0 2
44984: PUSH
44985: LD_VAR 0 3
44989: PUSH
44990: LD_VAR 0 4
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 3
45003: PUSH
45004: LD_INT 21
45006: PUSH
45007: LD_INT 3
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: LIST
45022: PPUSH
45023: CALL_OW 69
45027: ST_TO_ADDR
// if not tmp then
45028: LD_VAR 0 8
45032: NOT
45033: IFFALSE 45037
// exit ;
45035: GO 46591
// for i in tmp do
45037: LD_ADDR_VAR 0 6
45041: PUSH
45042: LD_VAR 0 8
45046: PUSH
45047: FOR_IN
45048: IFFALSE 46566
// begin points := [ 0 , 0 , 0 ] ;
45050: LD_ADDR_VAR 0 9
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: LIST
45068: ST_TO_ADDR
// bpoints := 1 ;
45069: LD_ADDR_VAR 0 10
45073: PUSH
45074: LD_INT 1
45076: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45077: LD_VAR 0 6
45081: PPUSH
45082: CALL_OW 247
45086: PUSH
45087: LD_INT 1
45089: DOUBLE
45090: EQUAL
45091: IFTRUE 45095
45093: GO 45673
45095: POP
// begin if GetClass ( i ) = 1 then
45096: LD_VAR 0 6
45100: PPUSH
45101: CALL_OW 257
45105: PUSH
45106: LD_INT 1
45108: EQUAL
45109: IFFALSE 45130
// points := [ 10 , 5 , 3 ] ;
45111: LD_ADDR_VAR 0 9
45115: PUSH
45116: LD_INT 10
45118: PUSH
45119: LD_INT 5
45121: PUSH
45122: LD_INT 3
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: LIST
45129: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45130: LD_VAR 0 6
45134: PPUSH
45135: CALL_OW 257
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: LD_INT 3
45145: PUSH
45146: LD_INT 4
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: LIST
45153: IN
45154: IFFALSE 45175
// points := [ 3 , 2 , 1 ] ;
45156: LD_ADDR_VAR 0 9
45160: PUSH
45161: LD_INT 3
45163: PUSH
45164: LD_INT 2
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: LIST
45174: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45175: LD_VAR 0 6
45179: PPUSH
45180: CALL_OW 257
45184: PUSH
45185: LD_INT 5
45187: EQUAL
45188: IFFALSE 45209
// points := [ 130 , 5 , 2 ] ;
45190: LD_ADDR_VAR 0 9
45194: PUSH
45195: LD_INT 130
45197: PUSH
45198: LD_INT 5
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: LIST
45208: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45209: LD_VAR 0 6
45213: PPUSH
45214: CALL_OW 257
45218: PUSH
45219: LD_INT 8
45221: EQUAL
45222: IFFALSE 45243
// points := [ 35 , 35 , 30 ] ;
45224: LD_ADDR_VAR 0 9
45228: PUSH
45229: LD_INT 35
45231: PUSH
45232: LD_INT 35
45234: PUSH
45235: LD_INT 30
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: LIST
45242: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45243: LD_VAR 0 6
45247: PPUSH
45248: CALL_OW 257
45252: PUSH
45253: LD_INT 9
45255: EQUAL
45256: IFFALSE 45277
// points := [ 20 , 55 , 40 ] ;
45258: LD_ADDR_VAR 0 9
45262: PUSH
45263: LD_INT 20
45265: PUSH
45266: LD_INT 55
45268: PUSH
45269: LD_INT 40
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: LIST
45276: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45277: LD_VAR 0 6
45281: PPUSH
45282: CALL_OW 257
45286: PUSH
45287: LD_INT 12
45289: PUSH
45290: LD_INT 16
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: IN
45297: IFFALSE 45318
// points := [ 5 , 3 , 2 ] ;
45299: LD_ADDR_VAR 0 9
45303: PUSH
45304: LD_INT 5
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: LD_INT 2
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: LIST
45317: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45318: LD_VAR 0 6
45322: PPUSH
45323: CALL_OW 257
45327: PUSH
45328: LD_INT 17
45330: EQUAL
45331: IFFALSE 45352
// points := [ 100 , 50 , 75 ] ;
45333: LD_ADDR_VAR 0 9
45337: PUSH
45338: LD_INT 100
45340: PUSH
45341: LD_INT 50
45343: PUSH
45344: LD_INT 75
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: LIST
45351: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45352: LD_VAR 0 6
45356: PPUSH
45357: CALL_OW 257
45361: PUSH
45362: LD_INT 15
45364: EQUAL
45365: IFFALSE 45386
// points := [ 10 , 5 , 3 ] ;
45367: LD_ADDR_VAR 0 9
45371: PUSH
45372: LD_INT 10
45374: PUSH
45375: LD_INT 5
45377: PUSH
45378: LD_INT 3
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: LIST
45385: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45386: LD_VAR 0 6
45390: PPUSH
45391: CALL_OW 257
45395: PUSH
45396: LD_INT 14
45398: EQUAL
45399: IFFALSE 45420
// points := [ 10 , 0 , 0 ] ;
45401: LD_ADDR_VAR 0 9
45405: PUSH
45406: LD_INT 10
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: LIST
45419: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45420: LD_VAR 0 6
45424: PPUSH
45425: CALL_OW 257
45429: PUSH
45430: LD_INT 11
45432: EQUAL
45433: IFFALSE 45454
// points := [ 30 , 10 , 5 ] ;
45435: LD_ADDR_VAR 0 9
45439: PUSH
45440: LD_INT 30
45442: PUSH
45443: LD_INT 10
45445: PUSH
45446: LD_INT 5
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: LIST
45453: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45454: LD_VAR 0 1
45458: PPUSH
45459: LD_INT 5
45461: PPUSH
45462: CALL_OW 321
45466: PUSH
45467: LD_INT 2
45469: EQUAL
45470: IFFALSE 45487
// bpoints := bpoints * 1.8 ;
45472: LD_ADDR_VAR 0 10
45476: PUSH
45477: LD_VAR 0 10
45481: PUSH
45482: LD_REAL  1.80000000000000E+0000
45485: MUL
45486: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45487: LD_VAR 0 6
45491: PPUSH
45492: CALL_OW 257
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: LD_INT 2
45502: PUSH
45503: LD_INT 3
45505: PUSH
45506: LD_INT 4
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: IN
45515: PUSH
45516: LD_VAR 0 1
45520: PPUSH
45521: LD_INT 51
45523: PPUSH
45524: CALL_OW 321
45528: PUSH
45529: LD_INT 2
45531: EQUAL
45532: AND
45533: IFFALSE 45550
// bpoints := bpoints * 1.2 ;
45535: LD_ADDR_VAR 0 10
45539: PUSH
45540: LD_VAR 0 10
45544: PUSH
45545: LD_REAL  1.20000000000000E+0000
45548: MUL
45549: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45550: LD_VAR 0 6
45554: PPUSH
45555: CALL_OW 257
45559: PUSH
45560: LD_INT 5
45562: PUSH
45563: LD_INT 7
45565: PUSH
45566: LD_INT 9
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: LIST
45573: IN
45574: PUSH
45575: LD_VAR 0 1
45579: PPUSH
45580: LD_INT 52
45582: PPUSH
45583: CALL_OW 321
45587: PUSH
45588: LD_INT 2
45590: EQUAL
45591: AND
45592: IFFALSE 45609
// bpoints := bpoints * 1.5 ;
45594: LD_ADDR_VAR 0 10
45598: PUSH
45599: LD_VAR 0 10
45603: PUSH
45604: LD_REAL  1.50000000000000E+0000
45607: MUL
45608: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45609: LD_VAR 0 1
45613: PPUSH
45614: LD_INT 66
45616: PPUSH
45617: CALL_OW 321
45621: PUSH
45622: LD_INT 2
45624: EQUAL
45625: IFFALSE 45642
// bpoints := bpoints * 1.1 ;
45627: LD_ADDR_VAR 0 10
45631: PUSH
45632: LD_VAR 0 10
45636: PUSH
45637: LD_REAL  1.10000000000000E+0000
45640: MUL
45641: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45642: LD_ADDR_VAR 0 10
45646: PUSH
45647: LD_VAR 0 10
45651: PUSH
45652: LD_VAR 0 6
45656: PPUSH
45657: LD_INT 1
45659: PPUSH
45660: CALL_OW 259
45664: PUSH
45665: LD_REAL  1.15000000000000E+0000
45668: MUL
45669: MUL
45670: ST_TO_ADDR
// end ; unit_vehicle :
45671: GO 46495
45673: LD_INT 2
45675: DOUBLE
45676: EQUAL
45677: IFTRUE 45681
45679: GO 46483
45681: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45682: LD_VAR 0 6
45686: PPUSH
45687: CALL_OW 264
45691: PUSH
45692: LD_INT 2
45694: PUSH
45695: LD_INT 42
45697: PUSH
45698: LD_INT 24
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: LIST
45705: IN
45706: IFFALSE 45727
// points := [ 25 , 5 , 3 ] ;
45708: LD_ADDR_VAR 0 9
45712: PUSH
45713: LD_INT 25
45715: PUSH
45716: LD_INT 5
45718: PUSH
45719: LD_INT 3
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: LIST
45726: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45727: LD_VAR 0 6
45731: PPUSH
45732: CALL_OW 264
45736: PUSH
45737: LD_INT 4
45739: PUSH
45740: LD_INT 43
45742: PUSH
45743: LD_INT 25
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: IN
45751: IFFALSE 45772
// points := [ 40 , 15 , 5 ] ;
45753: LD_ADDR_VAR 0 9
45757: PUSH
45758: LD_INT 40
45760: PUSH
45761: LD_INT 15
45763: PUSH
45764: LD_INT 5
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: LIST
45771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45772: LD_VAR 0 6
45776: PPUSH
45777: CALL_OW 264
45781: PUSH
45782: LD_INT 3
45784: PUSH
45785: LD_INT 23
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: IN
45792: IFFALSE 45813
// points := [ 7 , 25 , 8 ] ;
45794: LD_ADDR_VAR 0 9
45798: PUSH
45799: LD_INT 7
45801: PUSH
45802: LD_INT 25
45804: PUSH
45805: LD_INT 8
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: LIST
45812: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45813: LD_VAR 0 6
45817: PPUSH
45818: CALL_OW 264
45822: PUSH
45823: LD_INT 5
45825: PUSH
45826: LD_INT 27
45828: PUSH
45829: LD_INT 44
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: LIST
45836: IN
45837: IFFALSE 45858
// points := [ 14 , 50 , 16 ] ;
45839: LD_ADDR_VAR 0 9
45843: PUSH
45844: LD_INT 14
45846: PUSH
45847: LD_INT 50
45849: PUSH
45850: LD_INT 16
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45858: LD_VAR 0 6
45862: PPUSH
45863: CALL_OW 264
45867: PUSH
45868: LD_INT 6
45870: PUSH
45871: LD_INT 46
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: IN
45878: IFFALSE 45899
// points := [ 32 , 120 , 70 ] ;
45880: LD_ADDR_VAR 0 9
45884: PUSH
45885: LD_INT 32
45887: PUSH
45888: LD_INT 120
45890: PUSH
45891: LD_INT 70
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: LIST
45898: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
45899: LD_VAR 0 6
45903: PPUSH
45904: CALL_OW 264
45908: PUSH
45909: LD_INT 7
45911: PUSH
45912: LD_INT 28
45914: PUSH
45915: LD_INT 45
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: LIST
45922: IN
45923: IFFALSE 45944
// points := [ 35 , 20 , 45 ] ;
45925: LD_ADDR_VAR 0 9
45929: PUSH
45930: LD_INT 35
45932: PUSH
45933: LD_INT 20
45935: PUSH
45936: LD_INT 45
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45944: LD_VAR 0 6
45948: PPUSH
45949: CALL_OW 264
45953: PUSH
45954: LD_INT 47
45956: PUSH
45957: EMPTY
45958: LIST
45959: IN
45960: IFFALSE 45981
// points := [ 67 , 45 , 75 ] ;
45962: LD_ADDR_VAR 0 9
45966: PUSH
45967: LD_INT 67
45969: PUSH
45970: LD_INT 45
45972: PUSH
45973: LD_INT 75
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: LIST
45980: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45981: LD_VAR 0 6
45985: PPUSH
45986: CALL_OW 264
45990: PUSH
45991: LD_INT 26
45993: PUSH
45994: EMPTY
45995: LIST
45996: IN
45997: IFFALSE 46018
// points := [ 120 , 30 , 80 ] ;
45999: LD_ADDR_VAR 0 9
46003: PUSH
46004: LD_INT 120
46006: PUSH
46007: LD_INT 30
46009: PUSH
46010: LD_INT 80
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: LIST
46017: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46018: LD_VAR 0 6
46022: PPUSH
46023: CALL_OW 264
46027: PUSH
46028: LD_INT 22
46030: PUSH
46031: EMPTY
46032: LIST
46033: IN
46034: IFFALSE 46055
// points := [ 40 , 1 , 1 ] ;
46036: LD_ADDR_VAR 0 9
46040: PUSH
46041: LD_INT 40
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: LIST
46054: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46055: LD_VAR 0 6
46059: PPUSH
46060: CALL_OW 264
46064: PUSH
46065: LD_INT 29
46067: PUSH
46068: EMPTY
46069: LIST
46070: IN
46071: IFFALSE 46092
// points := [ 70 , 200 , 400 ] ;
46073: LD_ADDR_VAR 0 9
46077: PUSH
46078: LD_INT 70
46080: PUSH
46081: LD_INT 200
46083: PUSH
46084: LD_INT 400
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: LIST
46091: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46092: LD_VAR 0 6
46096: PPUSH
46097: CALL_OW 264
46101: PUSH
46102: LD_INT 14
46104: PUSH
46105: LD_INT 53
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: IN
46112: IFFALSE 46133
// points := [ 40 , 10 , 20 ] ;
46114: LD_ADDR_VAR 0 9
46118: PUSH
46119: LD_INT 40
46121: PUSH
46122: LD_INT 10
46124: PUSH
46125: LD_INT 20
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46133: LD_VAR 0 6
46137: PPUSH
46138: CALL_OW 264
46142: PUSH
46143: LD_INT 9
46145: PUSH
46146: EMPTY
46147: LIST
46148: IN
46149: IFFALSE 46170
// points := [ 5 , 70 , 20 ] ;
46151: LD_ADDR_VAR 0 9
46155: PUSH
46156: LD_INT 5
46158: PUSH
46159: LD_INT 70
46161: PUSH
46162: LD_INT 20
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: LIST
46169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46170: LD_VAR 0 6
46174: PPUSH
46175: CALL_OW 264
46179: PUSH
46180: LD_INT 10
46182: PUSH
46183: EMPTY
46184: LIST
46185: IN
46186: IFFALSE 46207
// points := [ 35 , 110 , 70 ] ;
46188: LD_ADDR_VAR 0 9
46192: PUSH
46193: LD_INT 35
46195: PUSH
46196: LD_INT 110
46198: PUSH
46199: LD_INT 70
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: LIST
46206: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46207: LD_VAR 0 6
46211: PPUSH
46212: CALL_OW 265
46216: PUSH
46217: LD_INT 25
46219: EQUAL
46220: IFFALSE 46241
// points := [ 80 , 65 , 100 ] ;
46222: LD_ADDR_VAR 0 9
46226: PUSH
46227: LD_INT 80
46229: PUSH
46230: LD_INT 65
46232: PUSH
46233: LD_INT 100
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46241: LD_VAR 0 6
46245: PPUSH
46246: CALL_OW 263
46250: PUSH
46251: LD_INT 1
46253: EQUAL
46254: IFFALSE 46289
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46256: LD_ADDR_VAR 0 10
46260: PUSH
46261: LD_VAR 0 10
46265: PUSH
46266: LD_VAR 0 6
46270: PPUSH
46271: CALL_OW 311
46275: PPUSH
46276: LD_INT 3
46278: PPUSH
46279: CALL_OW 259
46283: PUSH
46284: LD_INT 4
46286: MUL
46287: MUL
46288: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46289: LD_VAR 0 6
46293: PPUSH
46294: CALL_OW 263
46298: PUSH
46299: LD_INT 2
46301: EQUAL
46302: IFFALSE 46353
// begin j := IsControledBy ( i ) ;
46304: LD_ADDR_VAR 0 7
46308: PUSH
46309: LD_VAR 0 6
46313: PPUSH
46314: CALL_OW 312
46318: ST_TO_ADDR
// if j then
46319: LD_VAR 0 7
46323: IFFALSE 46353
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46325: LD_ADDR_VAR 0 10
46329: PUSH
46330: LD_VAR 0 10
46334: PUSH
46335: LD_VAR 0 7
46339: PPUSH
46340: LD_INT 3
46342: PPUSH
46343: CALL_OW 259
46347: PUSH
46348: LD_INT 3
46350: MUL
46351: MUL
46352: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46353: LD_VAR 0 6
46357: PPUSH
46358: CALL_OW 264
46362: PUSH
46363: LD_INT 5
46365: PUSH
46366: LD_INT 6
46368: PUSH
46369: LD_INT 46
46371: PUSH
46372: LD_INT 44
46374: PUSH
46375: LD_INT 47
46377: PUSH
46378: LD_INT 45
46380: PUSH
46381: LD_INT 28
46383: PUSH
46384: LD_INT 7
46386: PUSH
46387: LD_INT 27
46389: PUSH
46390: LD_INT 29
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: IN
46405: PUSH
46406: LD_VAR 0 1
46410: PPUSH
46411: LD_INT 52
46413: PPUSH
46414: CALL_OW 321
46418: PUSH
46419: LD_INT 2
46421: EQUAL
46422: AND
46423: IFFALSE 46440
// bpoints := bpoints * 1.2 ;
46425: LD_ADDR_VAR 0 10
46429: PUSH
46430: LD_VAR 0 10
46434: PUSH
46435: LD_REAL  1.20000000000000E+0000
46438: MUL
46439: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46440: LD_VAR 0 6
46444: PPUSH
46445: CALL_OW 264
46449: PUSH
46450: LD_INT 6
46452: PUSH
46453: LD_INT 46
46455: PUSH
46456: LD_INT 47
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: LIST
46463: IN
46464: IFFALSE 46481
// bpoints := bpoints * 1.2 ;
46466: LD_ADDR_VAR 0 10
46470: PUSH
46471: LD_VAR 0 10
46475: PUSH
46476: LD_REAL  1.20000000000000E+0000
46479: MUL
46480: ST_TO_ADDR
// end ; unit_building :
46481: GO 46495
46483: LD_INT 3
46485: DOUBLE
46486: EQUAL
46487: IFTRUE 46491
46489: GO 46494
46491: POP
// ; end ;
46492: GO 46495
46494: POP
// for j = 1 to 3 do
46495: LD_ADDR_VAR 0 7
46499: PUSH
46500: DOUBLE
46501: LD_INT 1
46503: DEC
46504: ST_TO_ADDR
46505: LD_INT 3
46507: PUSH
46508: FOR_TO
46509: IFFALSE 46562
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46511: LD_ADDR_VAR 0 5
46515: PUSH
46516: LD_VAR 0 5
46520: PPUSH
46521: LD_VAR 0 7
46525: PPUSH
46526: LD_VAR 0 5
46530: PUSH
46531: LD_VAR 0 7
46535: ARRAY
46536: PUSH
46537: LD_VAR 0 9
46541: PUSH
46542: LD_VAR 0 7
46546: ARRAY
46547: PUSH
46548: LD_VAR 0 10
46552: MUL
46553: PLUS
46554: PPUSH
46555: CALL_OW 1
46559: ST_TO_ADDR
46560: GO 46508
46562: POP
46563: POP
// end ;
46564: GO 45047
46566: POP
46567: POP
// result := Replace ( result , 4 , tmp ) ;
46568: LD_ADDR_VAR 0 5
46572: PUSH
46573: LD_VAR 0 5
46577: PPUSH
46578: LD_INT 4
46580: PPUSH
46581: LD_VAR 0 8
46585: PPUSH
46586: CALL_OW 1
46590: ST_TO_ADDR
// end ;
46591: LD_VAR 0 5
46595: RET
// export function DangerAtRange ( unit , range ) ; begin
46596: LD_INT 0
46598: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46599: LD_ADDR_VAR 0 3
46603: PUSH
46604: LD_VAR 0 1
46608: PPUSH
46609: CALL_OW 255
46613: PPUSH
46614: LD_VAR 0 1
46618: PPUSH
46619: CALL_OW 250
46623: PPUSH
46624: LD_VAR 0 1
46628: PPUSH
46629: CALL_OW 251
46633: PPUSH
46634: LD_VAR 0 2
46638: PPUSH
46639: CALL 44899 0 4
46643: ST_TO_ADDR
// end ;
46644: LD_VAR 0 3
46648: RET
// export function DangerInArea ( side , area ) ; begin
46649: LD_INT 0
46651: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46652: LD_ADDR_VAR 0 3
46656: PUSH
46657: LD_VAR 0 2
46661: PPUSH
46662: LD_INT 81
46664: PUSH
46665: LD_VAR 0 1
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PPUSH
46674: CALL_OW 70
46678: ST_TO_ADDR
// end ;
46679: LD_VAR 0 3
46683: RET
// export function IsExtension ( b ) ; begin
46684: LD_INT 0
46686: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46687: LD_ADDR_VAR 0 2
46691: PUSH
46692: LD_VAR 0 1
46696: PUSH
46697: LD_INT 23
46699: PUSH
46700: LD_INT 20
46702: PUSH
46703: LD_INT 22
46705: PUSH
46706: LD_INT 17
46708: PUSH
46709: LD_INT 24
46711: PUSH
46712: LD_INT 21
46714: PUSH
46715: LD_INT 19
46717: PUSH
46718: LD_INT 16
46720: PUSH
46721: LD_INT 25
46723: PUSH
46724: LD_INT 18
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: IN
46739: ST_TO_ADDR
// end ;
46740: LD_VAR 0 2
46744: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
46745: LD_INT 0
46747: PPUSH
46748: PPUSH
46749: PPUSH
// result := [ ] ;
46750: LD_ADDR_VAR 0 3
46754: PUSH
46755: EMPTY
46756: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46757: LD_ADDR_VAR 0 4
46761: PUSH
46762: LD_VAR 0 2
46766: PPUSH
46767: LD_INT 21
46769: PUSH
46770: LD_INT 3
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PPUSH
46777: CALL_OW 70
46781: ST_TO_ADDR
// if not tmp then
46782: LD_VAR 0 4
46786: NOT
46787: IFFALSE 46791
// exit ;
46789: GO 46849
// for i in tmp do
46791: LD_ADDR_VAR 0 5
46795: PUSH
46796: LD_VAR 0 4
46800: PUSH
46801: FOR_IN
46802: IFFALSE 46837
// if GetBase ( i ) <> base then
46804: LD_VAR 0 5
46808: PPUSH
46809: CALL_OW 274
46813: PUSH
46814: LD_VAR 0 1
46818: NONEQUAL
46819: IFFALSE 46835
// ComLinkToBase ( base , i ) ;
46821: LD_VAR 0 1
46825: PPUSH
46826: LD_VAR 0 5
46830: PPUSH
46831: CALL_OW 169
46835: GO 46801
46837: POP
46838: POP
// result := tmp ;
46839: LD_ADDR_VAR 0 3
46843: PUSH
46844: LD_VAR 0 4
46848: ST_TO_ADDR
// end ;
46849: LD_VAR 0 3
46853: RET
// export function ComComplete ( unit , b ) ; var i ; begin
46854: LD_INT 0
46856: PPUSH
46857: PPUSH
// if BuildingStatus ( b ) = bs_build then
46858: LD_VAR 0 2
46862: PPUSH
46863: CALL_OW 461
46867: PUSH
46868: LD_INT 1
46870: EQUAL
46871: IFFALSE 46931
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46873: LD_VAR 0 1
46877: PPUSH
46878: LD_STRING h
46880: PUSH
46881: LD_VAR 0 2
46885: PPUSH
46886: CALL_OW 250
46890: PUSH
46891: LD_VAR 0 2
46895: PPUSH
46896: CALL_OW 251
46900: PUSH
46901: LD_VAR 0 2
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: PUSH
46924: EMPTY
46925: LIST
46926: PPUSH
46927: CALL_OW 446
// end ;
46931: LD_VAR 0 3
46935: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46936: LD_INT 0
46938: PPUSH
46939: PPUSH
46940: PPUSH
46941: PPUSH
46942: PPUSH
46943: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
46944: LD_VAR 0 1
46948: NOT
46949: PUSH
46950: LD_VAR 0 1
46954: PPUSH
46955: CALL_OW 263
46959: PUSH
46960: LD_INT 2
46962: EQUAL
46963: NOT
46964: OR
46965: IFFALSE 46969
// exit ;
46967: GO 47285
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46969: LD_ADDR_VAR 0 6
46973: PUSH
46974: LD_INT 22
46976: PUSH
46977: LD_VAR 0 1
46981: PPUSH
46982: CALL_OW 255
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 2
46993: PUSH
46994: LD_INT 30
46996: PUSH
46997: LD_INT 36
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 34
47006: PUSH
47007: LD_INT 31
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: LIST
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PPUSH
47023: CALL_OW 69
47027: ST_TO_ADDR
// if not tmp then
47028: LD_VAR 0 6
47032: NOT
47033: IFFALSE 47037
// exit ;
47035: GO 47285
// result := [ ] ;
47037: LD_ADDR_VAR 0 2
47041: PUSH
47042: EMPTY
47043: ST_TO_ADDR
// for i in tmp do
47044: LD_ADDR_VAR 0 3
47048: PUSH
47049: LD_VAR 0 6
47053: PUSH
47054: FOR_IN
47055: IFFALSE 47126
// begin t := UnitsInside ( i ) ;
47057: LD_ADDR_VAR 0 4
47061: PUSH
47062: LD_VAR 0 3
47066: PPUSH
47067: CALL_OW 313
47071: ST_TO_ADDR
// if t then
47072: LD_VAR 0 4
47076: IFFALSE 47124
// for j in t do
47078: LD_ADDR_VAR 0 7
47082: PUSH
47083: LD_VAR 0 4
47087: PUSH
47088: FOR_IN
47089: IFFALSE 47122
// result := Insert ( result , result + 1 , j ) ;
47091: LD_ADDR_VAR 0 2
47095: PUSH
47096: LD_VAR 0 2
47100: PPUSH
47101: LD_VAR 0 2
47105: PUSH
47106: LD_INT 1
47108: PLUS
47109: PPUSH
47110: LD_VAR 0 7
47114: PPUSH
47115: CALL_OW 2
47119: ST_TO_ADDR
47120: GO 47088
47122: POP
47123: POP
// end ;
47124: GO 47054
47126: POP
47127: POP
// if not result then
47128: LD_VAR 0 2
47132: NOT
47133: IFFALSE 47137
// exit ;
47135: GO 47285
// mech := result [ 1 ] ;
47137: LD_ADDR_VAR 0 5
47141: PUSH
47142: LD_VAR 0 2
47146: PUSH
47147: LD_INT 1
47149: ARRAY
47150: ST_TO_ADDR
// if result > 1 then
47151: LD_VAR 0 2
47155: PUSH
47156: LD_INT 1
47158: GREATER
47159: IFFALSE 47271
// for i = 2 to result do
47161: LD_ADDR_VAR 0 3
47165: PUSH
47166: DOUBLE
47167: LD_INT 2
47169: DEC
47170: ST_TO_ADDR
47171: LD_VAR 0 2
47175: PUSH
47176: FOR_TO
47177: IFFALSE 47269
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47179: LD_ADDR_VAR 0 4
47183: PUSH
47184: LD_VAR 0 2
47188: PUSH
47189: LD_VAR 0 3
47193: ARRAY
47194: PPUSH
47195: LD_INT 3
47197: PPUSH
47198: CALL_OW 259
47202: PUSH
47203: LD_VAR 0 2
47207: PUSH
47208: LD_VAR 0 3
47212: ARRAY
47213: PPUSH
47214: CALL_OW 432
47218: MINUS
47219: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47220: LD_VAR 0 4
47224: PUSH
47225: LD_VAR 0 5
47229: PPUSH
47230: LD_INT 3
47232: PPUSH
47233: CALL_OW 259
47237: PUSH
47238: LD_VAR 0 5
47242: PPUSH
47243: CALL_OW 432
47247: MINUS
47248: GREATEREQUAL
47249: IFFALSE 47267
// mech := result [ i ] ;
47251: LD_ADDR_VAR 0 5
47255: PUSH
47256: LD_VAR 0 2
47260: PUSH
47261: LD_VAR 0 3
47265: ARRAY
47266: ST_TO_ADDR
// end ;
47267: GO 47176
47269: POP
47270: POP
// ComLinkTo ( vehicle , mech ) ;
47271: LD_VAR 0 1
47275: PPUSH
47276: LD_VAR 0 5
47280: PPUSH
47281: CALL_OW 135
// end ;
47285: LD_VAR 0 2
47289: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47290: LD_INT 0
47292: PPUSH
47293: PPUSH
47294: PPUSH
47295: PPUSH
47296: PPUSH
47297: PPUSH
47298: PPUSH
47299: PPUSH
47300: PPUSH
47301: PPUSH
47302: PPUSH
47303: PPUSH
47304: PPUSH
// result := [ ] ;
47305: LD_ADDR_VAR 0 7
47309: PUSH
47310: EMPTY
47311: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47312: LD_VAR 0 1
47316: PPUSH
47317: CALL_OW 266
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: IN
47332: NOT
47333: IFFALSE 47337
// exit ;
47335: GO 48968
// if name then
47337: LD_VAR 0 3
47341: IFFALSE 47357
// SetBName ( base_dep , name ) ;
47343: LD_VAR 0 1
47347: PPUSH
47348: LD_VAR 0 3
47352: PPUSH
47353: CALL_OW 500
// base := GetBase ( base_dep ) ;
47357: LD_ADDR_VAR 0 15
47361: PUSH
47362: LD_VAR 0 1
47366: PPUSH
47367: CALL_OW 274
47371: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47372: LD_ADDR_VAR 0 16
47376: PUSH
47377: LD_VAR 0 1
47381: PPUSH
47382: CALL_OW 255
47386: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47387: LD_ADDR_VAR 0 17
47391: PUSH
47392: LD_VAR 0 1
47396: PPUSH
47397: CALL_OW 248
47401: ST_TO_ADDR
// if sources then
47402: LD_VAR 0 5
47406: IFFALSE 47453
// for i = 1 to 3 do
47408: LD_ADDR_VAR 0 8
47412: PUSH
47413: DOUBLE
47414: LD_INT 1
47416: DEC
47417: ST_TO_ADDR
47418: LD_INT 3
47420: PUSH
47421: FOR_TO
47422: IFFALSE 47451
// AddResourceType ( base , i , sources [ i ] ) ;
47424: LD_VAR 0 15
47428: PPUSH
47429: LD_VAR 0 8
47433: PPUSH
47434: LD_VAR 0 5
47438: PUSH
47439: LD_VAR 0 8
47443: ARRAY
47444: PPUSH
47445: CALL_OW 276
47449: GO 47421
47451: POP
47452: POP
// buildings := GetBaseBuildings ( base , area ) ;
47453: LD_ADDR_VAR 0 18
47457: PUSH
47458: LD_VAR 0 15
47462: PPUSH
47463: LD_VAR 0 2
47467: PPUSH
47468: CALL 46745 0 2
47472: ST_TO_ADDR
// InitHc ;
47473: CALL_OW 19
// InitUc ;
47477: CALL_OW 18
// uc_side := side ;
47481: LD_ADDR_OWVAR 20
47485: PUSH
47486: LD_VAR 0 16
47490: ST_TO_ADDR
// uc_nation := nation ;
47491: LD_ADDR_OWVAR 21
47495: PUSH
47496: LD_VAR 0 17
47500: ST_TO_ADDR
// if buildings then
47501: LD_VAR 0 18
47505: IFFALSE 48827
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47507: LD_ADDR_VAR 0 19
47511: PUSH
47512: LD_VAR 0 18
47516: PPUSH
47517: LD_INT 2
47519: PUSH
47520: LD_INT 30
47522: PUSH
47523: LD_INT 29
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 30
47532: PUSH
47533: LD_INT 30
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: LIST
47544: PPUSH
47545: CALL_OW 72
47549: ST_TO_ADDR
// if tmp then
47550: LD_VAR 0 19
47554: IFFALSE 47602
// for i in tmp do
47556: LD_ADDR_VAR 0 8
47560: PUSH
47561: LD_VAR 0 19
47565: PUSH
47566: FOR_IN
47567: IFFALSE 47600
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47569: LD_VAR 0 8
47573: PPUSH
47574: CALL_OW 250
47578: PPUSH
47579: LD_VAR 0 8
47583: PPUSH
47584: CALL_OW 251
47588: PPUSH
47589: LD_VAR 0 16
47593: PPUSH
47594: CALL_OW 441
47598: GO 47566
47600: POP
47601: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47602: LD_VAR 0 18
47606: PPUSH
47607: LD_INT 2
47609: PUSH
47610: LD_INT 30
47612: PUSH
47613: LD_INT 32
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 30
47622: PUSH
47623: LD_INT 33
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: LIST
47634: PPUSH
47635: CALL_OW 72
47639: IFFALSE 47727
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47641: LD_ADDR_VAR 0 8
47645: PUSH
47646: LD_VAR 0 18
47650: PPUSH
47651: LD_INT 2
47653: PUSH
47654: LD_INT 30
47656: PUSH
47657: LD_INT 32
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 30
47666: PUSH
47667: LD_INT 33
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: PPUSH
47679: CALL_OW 72
47683: PUSH
47684: FOR_IN
47685: IFFALSE 47725
// begin if not GetBWeapon ( i ) then
47687: LD_VAR 0 8
47691: PPUSH
47692: CALL_OW 269
47696: NOT
47697: IFFALSE 47723
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47699: LD_VAR 0 8
47703: PPUSH
47704: LD_VAR 0 8
47708: PPUSH
47709: LD_VAR 0 2
47713: PPUSH
47714: CALL 48973 0 2
47718: PPUSH
47719: CALL_OW 431
// end ;
47723: GO 47684
47725: POP
47726: POP
// end ; for i = 1 to personel do
47727: LD_ADDR_VAR 0 8
47731: PUSH
47732: DOUBLE
47733: LD_INT 1
47735: DEC
47736: ST_TO_ADDR
47737: LD_VAR 0 6
47741: PUSH
47742: FOR_TO
47743: IFFALSE 48807
// begin if i > 4 then
47745: LD_VAR 0 8
47749: PUSH
47750: LD_INT 4
47752: GREATER
47753: IFFALSE 47757
// break ;
47755: GO 48807
// case i of 1 :
47757: LD_VAR 0 8
47761: PUSH
47762: LD_INT 1
47764: DOUBLE
47765: EQUAL
47766: IFTRUE 47770
47768: GO 47850
47770: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47771: LD_ADDR_VAR 0 12
47775: PUSH
47776: LD_VAR 0 18
47780: PPUSH
47781: LD_INT 22
47783: PUSH
47784: LD_VAR 0 16
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 58
47795: PUSH
47796: EMPTY
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: LD_INT 30
47804: PUSH
47805: LD_INT 32
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 30
47814: PUSH
47815: LD_INT 4
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 30
47824: PUSH
47825: LD_INT 5
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: LIST
47842: PPUSH
47843: CALL_OW 72
47847: ST_TO_ADDR
47848: GO 48072
47850: LD_INT 2
47852: DOUBLE
47853: EQUAL
47854: IFTRUE 47858
47856: GO 47920
47858: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47859: LD_ADDR_VAR 0 12
47863: PUSH
47864: LD_VAR 0 18
47868: PPUSH
47869: LD_INT 22
47871: PUSH
47872: LD_VAR 0 16
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: LD_INT 30
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 30
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PPUSH
47913: CALL_OW 72
47917: ST_TO_ADDR
47918: GO 48072
47920: LD_INT 3
47922: DOUBLE
47923: EQUAL
47924: IFTRUE 47928
47926: GO 47990
47928: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47929: LD_ADDR_VAR 0 12
47933: PUSH
47934: LD_VAR 0 18
47938: PPUSH
47939: LD_INT 22
47941: PUSH
47942: LD_VAR 0 16
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: LD_INT 30
47956: PUSH
47957: LD_INT 2
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 30
47966: PUSH
47967: LD_INT 3
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: LIST
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PPUSH
47983: CALL_OW 72
47987: ST_TO_ADDR
47988: GO 48072
47990: LD_INT 4
47992: DOUBLE
47993: EQUAL
47994: IFTRUE 47998
47996: GO 48071
47998: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47999: LD_ADDR_VAR 0 12
48003: PUSH
48004: LD_VAR 0 18
48008: PPUSH
48009: LD_INT 22
48011: PUSH
48012: LD_VAR 0 16
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: LD_INT 30
48026: PUSH
48027: LD_INT 6
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 30
48036: PUSH
48037: LD_INT 7
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 30
48046: PUSH
48047: LD_INT 8
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PPUSH
48064: CALL_OW 72
48068: ST_TO_ADDR
48069: GO 48072
48071: POP
// if i = 1 then
48072: LD_VAR 0 8
48076: PUSH
48077: LD_INT 1
48079: EQUAL
48080: IFFALSE 48191
// begin tmp := [ ] ;
48082: LD_ADDR_VAR 0 19
48086: PUSH
48087: EMPTY
48088: ST_TO_ADDR
// for j in f do
48089: LD_ADDR_VAR 0 9
48093: PUSH
48094: LD_VAR 0 12
48098: PUSH
48099: FOR_IN
48100: IFFALSE 48173
// if GetBType ( j ) = b_bunker then
48102: LD_VAR 0 9
48106: PPUSH
48107: CALL_OW 266
48111: PUSH
48112: LD_INT 32
48114: EQUAL
48115: IFFALSE 48142
// tmp := Insert ( tmp , 1 , j ) else
48117: LD_ADDR_VAR 0 19
48121: PUSH
48122: LD_VAR 0 19
48126: PPUSH
48127: LD_INT 1
48129: PPUSH
48130: LD_VAR 0 9
48134: PPUSH
48135: CALL_OW 2
48139: ST_TO_ADDR
48140: GO 48171
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48142: LD_ADDR_VAR 0 19
48146: PUSH
48147: LD_VAR 0 19
48151: PPUSH
48152: LD_VAR 0 19
48156: PUSH
48157: LD_INT 1
48159: PLUS
48160: PPUSH
48161: LD_VAR 0 9
48165: PPUSH
48166: CALL_OW 2
48170: ST_TO_ADDR
48171: GO 48099
48173: POP
48174: POP
// if tmp then
48175: LD_VAR 0 19
48179: IFFALSE 48191
// f := tmp ;
48181: LD_ADDR_VAR 0 12
48185: PUSH
48186: LD_VAR 0 19
48190: ST_TO_ADDR
// end ; x := personel [ i ] ;
48191: LD_ADDR_VAR 0 13
48195: PUSH
48196: LD_VAR 0 6
48200: PUSH
48201: LD_VAR 0 8
48205: ARRAY
48206: ST_TO_ADDR
// if x = - 1 then
48207: LD_VAR 0 13
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: EQUAL
48216: IFFALSE 48425
// begin for j in f do
48218: LD_ADDR_VAR 0 9
48222: PUSH
48223: LD_VAR 0 12
48227: PUSH
48228: FOR_IN
48229: IFFALSE 48421
// repeat InitHc ;
48231: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48235: LD_VAR 0 9
48239: PPUSH
48240: CALL_OW 266
48244: PUSH
48245: LD_INT 5
48247: EQUAL
48248: IFFALSE 48318
// begin if UnitsInside ( j ) < 3 then
48250: LD_VAR 0 9
48254: PPUSH
48255: CALL_OW 313
48259: PUSH
48260: LD_INT 3
48262: LESS
48263: IFFALSE 48299
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48265: LD_INT 0
48267: PPUSH
48268: LD_INT 5
48270: PUSH
48271: LD_INT 8
48273: PUSH
48274: LD_INT 9
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: LIST
48281: PUSH
48282: LD_VAR 0 17
48286: ARRAY
48287: PPUSH
48288: LD_VAR 0 4
48292: PPUSH
48293: CALL_OW 380
48297: GO 48316
// PrepareHuman ( false , i , skill ) ;
48299: LD_INT 0
48301: PPUSH
48302: LD_VAR 0 8
48306: PPUSH
48307: LD_VAR 0 4
48311: PPUSH
48312: CALL_OW 380
// end else
48316: GO 48335
// PrepareHuman ( false , i , skill ) ;
48318: LD_INT 0
48320: PPUSH
48321: LD_VAR 0 8
48325: PPUSH
48326: LD_VAR 0 4
48330: PPUSH
48331: CALL_OW 380
// un := CreateHuman ;
48335: LD_ADDR_VAR 0 14
48339: PUSH
48340: CALL_OW 44
48344: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48345: LD_ADDR_VAR 0 7
48349: PUSH
48350: LD_VAR 0 7
48354: PPUSH
48355: LD_INT 1
48357: PPUSH
48358: LD_VAR 0 14
48362: PPUSH
48363: CALL_OW 2
48367: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48368: LD_VAR 0 14
48372: PPUSH
48373: LD_VAR 0 9
48377: PPUSH
48378: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48382: LD_VAR 0 9
48386: PPUSH
48387: CALL_OW 313
48391: PUSH
48392: LD_INT 6
48394: EQUAL
48395: PUSH
48396: LD_VAR 0 9
48400: PPUSH
48401: CALL_OW 266
48405: PUSH
48406: LD_INT 32
48408: PUSH
48409: LD_INT 31
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: IN
48416: OR
48417: IFFALSE 48231
48419: GO 48228
48421: POP
48422: POP
// end else
48423: GO 48805
// for j = 1 to x do
48425: LD_ADDR_VAR 0 9
48429: PUSH
48430: DOUBLE
48431: LD_INT 1
48433: DEC
48434: ST_TO_ADDR
48435: LD_VAR 0 13
48439: PUSH
48440: FOR_TO
48441: IFFALSE 48803
// begin InitHc ;
48443: CALL_OW 19
// if not f then
48447: LD_VAR 0 12
48451: NOT
48452: IFFALSE 48541
// begin PrepareHuman ( false , i , skill ) ;
48454: LD_INT 0
48456: PPUSH
48457: LD_VAR 0 8
48461: PPUSH
48462: LD_VAR 0 4
48466: PPUSH
48467: CALL_OW 380
// un := CreateHuman ;
48471: LD_ADDR_VAR 0 14
48475: PUSH
48476: CALL_OW 44
48480: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48481: LD_ADDR_VAR 0 7
48485: PUSH
48486: LD_VAR 0 7
48490: PPUSH
48491: LD_INT 1
48493: PPUSH
48494: LD_VAR 0 14
48498: PPUSH
48499: CALL_OW 2
48503: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48504: LD_VAR 0 14
48508: PPUSH
48509: LD_VAR 0 1
48513: PPUSH
48514: CALL_OW 250
48518: PPUSH
48519: LD_VAR 0 1
48523: PPUSH
48524: CALL_OW 251
48528: PPUSH
48529: LD_INT 10
48531: PPUSH
48532: LD_INT 0
48534: PPUSH
48535: CALL_OW 50
// continue ;
48539: GO 48440
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48541: LD_VAR 0 12
48545: PUSH
48546: LD_INT 1
48548: ARRAY
48549: PPUSH
48550: CALL_OW 313
48554: PUSH
48555: LD_VAR 0 12
48559: PUSH
48560: LD_INT 1
48562: ARRAY
48563: PPUSH
48564: CALL_OW 266
48568: PUSH
48569: LD_INT 32
48571: PUSH
48572: LD_INT 31
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: IN
48579: AND
48580: PUSH
48581: LD_VAR 0 12
48585: PUSH
48586: LD_INT 1
48588: ARRAY
48589: PPUSH
48590: CALL_OW 313
48594: PUSH
48595: LD_INT 6
48597: EQUAL
48598: OR
48599: IFFALSE 48619
// f := Delete ( f , 1 ) ;
48601: LD_ADDR_VAR 0 12
48605: PUSH
48606: LD_VAR 0 12
48610: PPUSH
48611: LD_INT 1
48613: PPUSH
48614: CALL_OW 3
48618: ST_TO_ADDR
// if not f then
48619: LD_VAR 0 12
48623: NOT
48624: IFFALSE 48642
// begin x := x + 2 ;
48626: LD_ADDR_VAR 0 13
48630: PUSH
48631: LD_VAR 0 13
48635: PUSH
48636: LD_INT 2
48638: PLUS
48639: ST_TO_ADDR
// continue ;
48640: GO 48440
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48642: LD_VAR 0 12
48646: PUSH
48647: LD_INT 1
48649: ARRAY
48650: PPUSH
48651: CALL_OW 266
48655: PUSH
48656: LD_INT 5
48658: EQUAL
48659: IFFALSE 48733
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48661: LD_VAR 0 12
48665: PUSH
48666: LD_INT 1
48668: ARRAY
48669: PPUSH
48670: CALL_OW 313
48674: PUSH
48675: LD_INT 3
48677: LESS
48678: IFFALSE 48714
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48680: LD_INT 0
48682: PPUSH
48683: LD_INT 5
48685: PUSH
48686: LD_INT 8
48688: PUSH
48689: LD_INT 9
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: LIST
48696: PUSH
48697: LD_VAR 0 17
48701: ARRAY
48702: PPUSH
48703: LD_VAR 0 4
48707: PPUSH
48708: CALL_OW 380
48712: GO 48731
// PrepareHuman ( false , i , skill ) ;
48714: LD_INT 0
48716: PPUSH
48717: LD_VAR 0 8
48721: PPUSH
48722: LD_VAR 0 4
48726: PPUSH
48727: CALL_OW 380
// end else
48731: GO 48750
// PrepareHuman ( false , i , skill ) ;
48733: LD_INT 0
48735: PPUSH
48736: LD_VAR 0 8
48740: PPUSH
48741: LD_VAR 0 4
48745: PPUSH
48746: CALL_OW 380
// un := CreateHuman ;
48750: LD_ADDR_VAR 0 14
48754: PUSH
48755: CALL_OW 44
48759: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48760: LD_ADDR_VAR 0 7
48764: PUSH
48765: LD_VAR 0 7
48769: PPUSH
48770: LD_INT 1
48772: PPUSH
48773: LD_VAR 0 14
48777: PPUSH
48778: CALL_OW 2
48782: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48783: LD_VAR 0 14
48787: PPUSH
48788: LD_VAR 0 12
48792: PUSH
48793: LD_INT 1
48795: ARRAY
48796: PPUSH
48797: CALL_OW 52
// end ;
48801: GO 48440
48803: POP
48804: POP
// end ;
48805: GO 47742
48807: POP
48808: POP
// result := result ^ buildings ;
48809: LD_ADDR_VAR 0 7
48813: PUSH
48814: LD_VAR 0 7
48818: PUSH
48819: LD_VAR 0 18
48823: ADD
48824: ST_TO_ADDR
// end else
48825: GO 48968
// begin for i = 1 to personel do
48827: LD_ADDR_VAR 0 8
48831: PUSH
48832: DOUBLE
48833: LD_INT 1
48835: DEC
48836: ST_TO_ADDR
48837: LD_VAR 0 6
48841: PUSH
48842: FOR_TO
48843: IFFALSE 48966
// begin if i > 4 then
48845: LD_VAR 0 8
48849: PUSH
48850: LD_INT 4
48852: GREATER
48853: IFFALSE 48857
// break ;
48855: GO 48966
// x := personel [ i ] ;
48857: LD_ADDR_VAR 0 13
48861: PUSH
48862: LD_VAR 0 6
48866: PUSH
48867: LD_VAR 0 8
48871: ARRAY
48872: ST_TO_ADDR
// if x = - 1 then
48873: LD_VAR 0 13
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: EQUAL
48882: IFFALSE 48886
// continue ;
48884: GO 48842
// PrepareHuman ( false , i , skill ) ;
48886: LD_INT 0
48888: PPUSH
48889: LD_VAR 0 8
48893: PPUSH
48894: LD_VAR 0 4
48898: PPUSH
48899: CALL_OW 380
// un := CreateHuman ;
48903: LD_ADDR_VAR 0 14
48907: PUSH
48908: CALL_OW 44
48912: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48913: LD_VAR 0 14
48917: PPUSH
48918: LD_VAR 0 1
48922: PPUSH
48923: CALL_OW 250
48927: PPUSH
48928: LD_VAR 0 1
48932: PPUSH
48933: CALL_OW 251
48937: PPUSH
48938: LD_INT 10
48940: PPUSH
48941: LD_INT 0
48943: PPUSH
48944: CALL_OW 50
// result := result ^ un ;
48948: LD_ADDR_VAR 0 7
48952: PUSH
48953: LD_VAR 0 7
48957: PUSH
48958: LD_VAR 0 14
48962: ADD
48963: ST_TO_ADDR
// end ;
48964: GO 48842
48966: POP
48967: POP
// end ; end ;
48968: LD_VAR 0 7
48972: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48973: LD_INT 0
48975: PPUSH
48976: PPUSH
48977: PPUSH
48978: PPUSH
48979: PPUSH
48980: PPUSH
48981: PPUSH
48982: PPUSH
48983: PPUSH
48984: PPUSH
48985: PPUSH
48986: PPUSH
48987: PPUSH
48988: PPUSH
48989: PPUSH
48990: PPUSH
// result := false ;
48991: LD_ADDR_VAR 0 3
48995: PUSH
48996: LD_INT 0
48998: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48999: LD_VAR 0 1
49003: NOT
49004: PUSH
49005: LD_VAR 0 1
49009: PPUSH
49010: CALL_OW 266
49014: PUSH
49015: LD_INT 32
49017: PUSH
49018: LD_INT 33
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: IN
49025: NOT
49026: OR
49027: IFFALSE 49031
// exit ;
49029: GO 50167
// nat := GetNation ( tower ) ;
49031: LD_ADDR_VAR 0 12
49035: PUSH
49036: LD_VAR 0 1
49040: PPUSH
49041: CALL_OW 248
49045: ST_TO_ADDR
// side := GetSide ( tower ) ;
49046: LD_ADDR_VAR 0 16
49050: PUSH
49051: LD_VAR 0 1
49055: PPUSH
49056: CALL_OW 255
49060: ST_TO_ADDR
// x := GetX ( tower ) ;
49061: LD_ADDR_VAR 0 10
49065: PUSH
49066: LD_VAR 0 1
49070: PPUSH
49071: CALL_OW 250
49075: ST_TO_ADDR
// y := GetY ( tower ) ;
49076: LD_ADDR_VAR 0 11
49080: PUSH
49081: LD_VAR 0 1
49085: PPUSH
49086: CALL_OW 251
49090: ST_TO_ADDR
// if not x or not y then
49091: LD_VAR 0 10
49095: NOT
49096: PUSH
49097: LD_VAR 0 11
49101: NOT
49102: OR
49103: IFFALSE 49107
// exit ;
49105: GO 50167
// weapon := 0 ;
49107: LD_ADDR_VAR 0 18
49111: PUSH
49112: LD_INT 0
49114: ST_TO_ADDR
// fac_list := [ ] ;
49115: LD_ADDR_VAR 0 17
49119: PUSH
49120: EMPTY
49121: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
49122: LD_ADDR_VAR 0 6
49126: PUSH
49127: LD_VAR 0 1
49131: PPUSH
49132: CALL_OW 274
49136: PPUSH
49137: LD_VAR 0 2
49141: PPUSH
49142: CALL 46745 0 2
49146: PPUSH
49147: LD_INT 30
49149: PUSH
49150: LD_INT 3
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PPUSH
49157: CALL_OW 72
49161: ST_TO_ADDR
// if not factories then
49162: LD_VAR 0 6
49166: NOT
49167: IFFALSE 49171
// exit ;
49169: GO 50167
// for i in factories do
49171: LD_ADDR_VAR 0 8
49175: PUSH
49176: LD_VAR 0 6
49180: PUSH
49181: FOR_IN
49182: IFFALSE 49207
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49184: LD_ADDR_VAR 0 17
49188: PUSH
49189: LD_VAR 0 17
49193: PUSH
49194: LD_VAR 0 8
49198: PPUSH
49199: CALL_OW 478
49203: UNION
49204: ST_TO_ADDR
49205: GO 49181
49207: POP
49208: POP
// if not fac_list then
49209: LD_VAR 0 17
49213: NOT
49214: IFFALSE 49218
// exit ;
49216: GO 50167
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49218: LD_ADDR_VAR 0 5
49222: PUSH
49223: LD_INT 4
49225: PUSH
49226: LD_INT 5
49228: PUSH
49229: LD_INT 9
49231: PUSH
49232: LD_INT 10
49234: PUSH
49235: LD_INT 6
49237: PUSH
49238: LD_INT 7
49240: PUSH
49241: LD_INT 11
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 27
49255: PUSH
49256: LD_INT 28
49258: PUSH
49259: LD_INT 26
49261: PUSH
49262: LD_INT 30
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 43
49273: PUSH
49274: LD_INT 44
49276: PUSH
49277: LD_INT 46
49279: PUSH
49280: LD_INT 45
49282: PUSH
49283: LD_INT 47
49285: PUSH
49286: LD_INT 49
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: LIST
49301: PUSH
49302: LD_VAR 0 12
49306: ARRAY
49307: ST_TO_ADDR
// for i in list do
49308: LD_ADDR_VAR 0 8
49312: PUSH
49313: LD_VAR 0 5
49317: PUSH
49318: FOR_IN
49319: IFFALSE 49352
// if not i in fac_list then
49321: LD_VAR 0 8
49325: PUSH
49326: LD_VAR 0 17
49330: IN
49331: NOT
49332: IFFALSE 49350
// list := list diff i ;
49334: LD_ADDR_VAR 0 5
49338: PUSH
49339: LD_VAR 0 5
49343: PUSH
49344: LD_VAR 0 8
49348: DIFF
49349: ST_TO_ADDR
49350: GO 49318
49352: POP
49353: POP
// if not list then
49354: LD_VAR 0 5
49358: NOT
49359: IFFALSE 49363
// exit ;
49361: GO 50167
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49363: LD_VAR 0 12
49367: PUSH
49368: LD_INT 3
49370: EQUAL
49371: PUSH
49372: LD_INT 49
49374: PUSH
49375: LD_VAR 0 5
49379: IN
49380: AND
49381: PUSH
49382: LD_INT 31
49384: PPUSH
49385: LD_VAR 0 16
49389: PPUSH
49390: CALL_OW 321
49394: PUSH
49395: LD_INT 2
49397: EQUAL
49398: AND
49399: IFFALSE 49459
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49401: LD_INT 22
49403: PUSH
49404: LD_VAR 0 16
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 35
49415: PUSH
49416: LD_INT 49
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 91
49425: PUSH
49426: LD_VAR 0 1
49430: PUSH
49431: LD_INT 10
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: LIST
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: LIST
49443: PPUSH
49444: CALL_OW 69
49448: NOT
49449: IFFALSE 49459
// weapon := ru_time_lapser ;
49451: LD_ADDR_VAR 0 18
49455: PUSH
49456: LD_INT 49
49458: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49459: LD_VAR 0 12
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: IN
49474: PUSH
49475: LD_INT 11
49477: PUSH
49478: LD_VAR 0 5
49482: IN
49483: PUSH
49484: LD_INT 30
49486: PUSH
49487: LD_VAR 0 5
49491: IN
49492: OR
49493: AND
49494: PUSH
49495: LD_INT 6
49497: PPUSH
49498: LD_VAR 0 16
49502: PPUSH
49503: CALL_OW 321
49507: PUSH
49508: LD_INT 2
49510: EQUAL
49511: AND
49512: IFFALSE 49677
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49514: LD_INT 22
49516: PUSH
49517: LD_VAR 0 16
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 35
49531: PUSH
49532: LD_INT 11
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 35
49541: PUSH
49542: LD_INT 30
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 91
49556: PUSH
49557: LD_VAR 0 1
49561: PUSH
49562: LD_INT 18
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: LIST
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: LIST
49574: PPUSH
49575: CALL_OW 69
49579: NOT
49580: PUSH
49581: LD_INT 22
49583: PUSH
49584: LD_VAR 0 16
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 2
49595: PUSH
49596: LD_INT 30
49598: PUSH
49599: LD_INT 32
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 30
49608: PUSH
49609: LD_INT 33
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 91
49623: PUSH
49624: LD_VAR 0 1
49628: PUSH
49629: LD_INT 12
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: LIST
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: LIST
49641: PUSH
49642: EMPTY
49643: LIST
49644: PPUSH
49645: CALL_OW 69
49649: PUSH
49650: LD_INT 2
49652: GREATER
49653: AND
49654: IFFALSE 49677
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49656: LD_ADDR_VAR 0 18
49660: PUSH
49661: LD_INT 11
49663: PUSH
49664: LD_INT 30
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_VAR 0 12
49675: ARRAY
49676: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49677: LD_VAR 0 18
49681: NOT
49682: PUSH
49683: LD_INT 40
49685: PPUSH
49686: LD_VAR 0 16
49690: PPUSH
49691: CALL_OW 321
49695: PUSH
49696: LD_INT 2
49698: EQUAL
49699: AND
49700: PUSH
49701: LD_INT 7
49703: PUSH
49704: LD_VAR 0 5
49708: IN
49709: PUSH
49710: LD_INT 28
49712: PUSH
49713: LD_VAR 0 5
49717: IN
49718: OR
49719: PUSH
49720: LD_INT 45
49722: PUSH
49723: LD_VAR 0 5
49727: IN
49728: OR
49729: AND
49730: IFFALSE 49984
// begin hex := GetHexInfo ( x , y ) ;
49732: LD_ADDR_VAR 0 4
49736: PUSH
49737: LD_VAR 0 10
49741: PPUSH
49742: LD_VAR 0 11
49746: PPUSH
49747: CALL_OW 546
49751: ST_TO_ADDR
// if hex [ 1 ] then
49752: LD_VAR 0 4
49756: PUSH
49757: LD_INT 1
49759: ARRAY
49760: IFFALSE 49764
// exit ;
49762: GO 50167
// height := hex [ 2 ] ;
49764: LD_ADDR_VAR 0 15
49768: PUSH
49769: LD_VAR 0 4
49773: PUSH
49774: LD_INT 2
49776: ARRAY
49777: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49778: LD_ADDR_VAR 0 14
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: LD_INT 3
49791: PUSH
49792: LD_INT 5
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// for i in tmp do
49801: LD_ADDR_VAR 0 8
49805: PUSH
49806: LD_VAR 0 14
49810: PUSH
49811: FOR_IN
49812: IFFALSE 49982
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49814: LD_ADDR_VAR 0 9
49818: PUSH
49819: LD_VAR 0 10
49823: PPUSH
49824: LD_VAR 0 8
49828: PPUSH
49829: LD_INT 5
49831: PPUSH
49832: CALL_OW 272
49836: PUSH
49837: LD_VAR 0 11
49841: PPUSH
49842: LD_VAR 0 8
49846: PPUSH
49847: LD_INT 5
49849: PPUSH
49850: CALL_OW 273
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49859: LD_VAR 0 9
49863: PUSH
49864: LD_INT 1
49866: ARRAY
49867: PPUSH
49868: LD_VAR 0 9
49872: PUSH
49873: LD_INT 2
49875: ARRAY
49876: PPUSH
49877: CALL_OW 488
49881: IFFALSE 49980
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49883: LD_ADDR_VAR 0 4
49887: PUSH
49888: LD_VAR 0 9
49892: PUSH
49893: LD_INT 1
49895: ARRAY
49896: PPUSH
49897: LD_VAR 0 9
49901: PUSH
49902: LD_INT 2
49904: ARRAY
49905: PPUSH
49906: CALL_OW 546
49910: ST_TO_ADDR
// if hex [ 1 ] then
49911: LD_VAR 0 4
49915: PUSH
49916: LD_INT 1
49918: ARRAY
49919: IFFALSE 49923
// continue ;
49921: GO 49811
// h := hex [ 2 ] ;
49923: LD_ADDR_VAR 0 13
49927: PUSH
49928: LD_VAR 0 4
49932: PUSH
49933: LD_INT 2
49935: ARRAY
49936: ST_TO_ADDR
// if h + 7 < height then
49937: LD_VAR 0 13
49941: PUSH
49942: LD_INT 7
49944: PLUS
49945: PUSH
49946: LD_VAR 0 15
49950: LESS
49951: IFFALSE 49980
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49953: LD_ADDR_VAR 0 18
49957: PUSH
49958: LD_INT 7
49960: PUSH
49961: LD_INT 28
49963: PUSH
49964: LD_INT 45
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: LIST
49971: PUSH
49972: LD_VAR 0 12
49976: ARRAY
49977: ST_TO_ADDR
// break ;
49978: GO 49982
// end ; end ; end ;
49980: GO 49811
49982: POP
49983: POP
// end ; if not weapon then
49984: LD_VAR 0 18
49988: NOT
49989: IFFALSE 50049
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49991: LD_ADDR_VAR 0 5
49995: PUSH
49996: LD_VAR 0 5
50000: PUSH
50001: LD_INT 11
50003: PUSH
50004: LD_INT 30
50006: PUSH
50007: LD_INT 49
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: LIST
50014: DIFF
50015: ST_TO_ADDR
// if not list then
50016: LD_VAR 0 5
50020: NOT
50021: IFFALSE 50025
// exit ;
50023: GO 50167
// weapon := list [ rand ( 1 , list ) ] ;
50025: LD_ADDR_VAR 0 18
50029: PUSH
50030: LD_VAR 0 5
50034: PUSH
50035: LD_INT 1
50037: PPUSH
50038: LD_VAR 0 5
50042: PPUSH
50043: CALL_OW 12
50047: ARRAY
50048: ST_TO_ADDR
// end ; if weapon then
50049: LD_VAR 0 18
50053: IFFALSE 50167
// begin tmp := CostOfWeapon ( weapon ) ;
50055: LD_ADDR_VAR 0 14
50059: PUSH
50060: LD_VAR 0 18
50064: PPUSH
50065: CALL_OW 451
50069: ST_TO_ADDR
// j := GetBase ( tower ) ;
50070: LD_ADDR_VAR 0 9
50074: PUSH
50075: LD_VAR 0 1
50079: PPUSH
50080: CALL_OW 274
50084: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50085: LD_VAR 0 9
50089: PPUSH
50090: LD_INT 1
50092: PPUSH
50093: CALL_OW 275
50097: PUSH
50098: LD_VAR 0 14
50102: PUSH
50103: LD_INT 1
50105: ARRAY
50106: GREATEREQUAL
50107: PUSH
50108: LD_VAR 0 9
50112: PPUSH
50113: LD_INT 2
50115: PPUSH
50116: CALL_OW 275
50120: PUSH
50121: LD_VAR 0 14
50125: PUSH
50126: LD_INT 2
50128: ARRAY
50129: GREATEREQUAL
50130: AND
50131: PUSH
50132: LD_VAR 0 9
50136: PPUSH
50137: LD_INT 3
50139: PPUSH
50140: CALL_OW 275
50144: PUSH
50145: LD_VAR 0 14
50149: PUSH
50150: LD_INT 3
50152: ARRAY
50153: GREATEREQUAL
50154: AND
50155: IFFALSE 50167
// result := weapon ;
50157: LD_ADDR_VAR 0 3
50161: PUSH
50162: LD_VAR 0 18
50166: ST_TO_ADDR
// end ; end ;
50167: LD_VAR 0 3
50171: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50172: LD_INT 0
50174: PPUSH
50175: PPUSH
// result := true ;
50176: LD_ADDR_VAR 0 3
50180: PUSH
50181: LD_INT 1
50183: ST_TO_ADDR
// if array1 = array2 then
50184: LD_VAR 0 1
50188: PUSH
50189: LD_VAR 0 2
50193: EQUAL
50194: IFFALSE 50254
// begin for i = 1 to array1 do
50196: LD_ADDR_VAR 0 4
50200: PUSH
50201: DOUBLE
50202: LD_INT 1
50204: DEC
50205: ST_TO_ADDR
50206: LD_VAR 0 1
50210: PUSH
50211: FOR_TO
50212: IFFALSE 50250
// if array1 [ i ] <> array2 [ i ] then
50214: LD_VAR 0 1
50218: PUSH
50219: LD_VAR 0 4
50223: ARRAY
50224: PUSH
50225: LD_VAR 0 2
50229: PUSH
50230: LD_VAR 0 4
50234: ARRAY
50235: NONEQUAL
50236: IFFALSE 50248
// begin result := false ;
50238: LD_ADDR_VAR 0 3
50242: PUSH
50243: LD_INT 0
50245: ST_TO_ADDR
// break ;
50246: GO 50250
// end ;
50248: GO 50211
50250: POP
50251: POP
// end else
50252: GO 50262
// result := false ;
50254: LD_ADDR_VAR 0 3
50258: PUSH
50259: LD_INT 0
50261: ST_TO_ADDR
// end ;
50262: LD_VAR 0 3
50266: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50267: LD_INT 0
50269: PPUSH
50270: PPUSH
50271: PPUSH
// pom := GetBase ( fac ) ;
50272: LD_ADDR_VAR 0 5
50276: PUSH
50277: LD_VAR 0 1
50281: PPUSH
50282: CALL_OW 274
50286: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50287: LD_ADDR_VAR 0 4
50291: PUSH
50292: LD_VAR 0 2
50296: PUSH
50297: LD_INT 1
50299: ARRAY
50300: PPUSH
50301: LD_VAR 0 2
50305: PUSH
50306: LD_INT 2
50308: ARRAY
50309: PPUSH
50310: LD_VAR 0 2
50314: PUSH
50315: LD_INT 3
50317: ARRAY
50318: PPUSH
50319: LD_VAR 0 2
50323: PUSH
50324: LD_INT 4
50326: ARRAY
50327: PPUSH
50328: CALL_OW 449
50332: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50333: LD_ADDR_VAR 0 3
50337: PUSH
50338: LD_VAR 0 5
50342: PPUSH
50343: LD_INT 1
50345: PPUSH
50346: CALL_OW 275
50350: PUSH
50351: LD_VAR 0 4
50355: PUSH
50356: LD_INT 1
50358: ARRAY
50359: GREATEREQUAL
50360: PUSH
50361: LD_VAR 0 5
50365: PPUSH
50366: LD_INT 2
50368: PPUSH
50369: CALL_OW 275
50373: PUSH
50374: LD_VAR 0 4
50378: PUSH
50379: LD_INT 2
50381: ARRAY
50382: GREATEREQUAL
50383: AND
50384: PUSH
50385: LD_VAR 0 5
50389: PPUSH
50390: LD_INT 3
50392: PPUSH
50393: CALL_OW 275
50397: PUSH
50398: LD_VAR 0 4
50402: PUSH
50403: LD_INT 3
50405: ARRAY
50406: GREATEREQUAL
50407: AND
50408: ST_TO_ADDR
// end ;
50409: LD_VAR 0 3
50413: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50414: LD_INT 0
50416: PPUSH
50417: PPUSH
50418: PPUSH
50419: PPUSH
// pom := GetBase ( building ) ;
50420: LD_ADDR_VAR 0 3
50424: PUSH
50425: LD_VAR 0 1
50429: PPUSH
50430: CALL_OW 274
50434: ST_TO_ADDR
// if not pom then
50435: LD_VAR 0 3
50439: NOT
50440: IFFALSE 50444
// exit ;
50442: GO 50614
// btype := GetBType ( building ) ;
50444: LD_ADDR_VAR 0 5
50448: PUSH
50449: LD_VAR 0 1
50453: PPUSH
50454: CALL_OW 266
50458: ST_TO_ADDR
// if btype = b_armoury then
50459: LD_VAR 0 5
50463: PUSH
50464: LD_INT 4
50466: EQUAL
50467: IFFALSE 50477
// btype := b_barracks ;
50469: LD_ADDR_VAR 0 5
50473: PUSH
50474: LD_INT 5
50476: ST_TO_ADDR
// if btype = b_depot then
50477: LD_VAR 0 5
50481: PUSH
50482: LD_INT 0
50484: EQUAL
50485: IFFALSE 50495
// btype := b_warehouse ;
50487: LD_ADDR_VAR 0 5
50491: PUSH
50492: LD_INT 1
50494: ST_TO_ADDR
// if btype = b_workshop then
50495: LD_VAR 0 5
50499: PUSH
50500: LD_INT 2
50502: EQUAL
50503: IFFALSE 50513
// btype := b_factory ;
50505: LD_ADDR_VAR 0 5
50509: PUSH
50510: LD_INT 3
50512: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50513: LD_ADDR_VAR 0 4
50517: PUSH
50518: LD_VAR 0 5
50522: PPUSH
50523: LD_VAR 0 1
50527: PPUSH
50528: CALL_OW 248
50532: PPUSH
50533: CALL_OW 450
50537: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50538: LD_ADDR_VAR 0 2
50542: PUSH
50543: LD_VAR 0 3
50547: PPUSH
50548: LD_INT 1
50550: PPUSH
50551: CALL_OW 275
50555: PUSH
50556: LD_VAR 0 4
50560: PUSH
50561: LD_INT 1
50563: ARRAY
50564: GREATEREQUAL
50565: PUSH
50566: LD_VAR 0 3
50570: PPUSH
50571: LD_INT 2
50573: PPUSH
50574: CALL_OW 275
50578: PUSH
50579: LD_VAR 0 4
50583: PUSH
50584: LD_INT 2
50586: ARRAY
50587: GREATEREQUAL
50588: AND
50589: PUSH
50590: LD_VAR 0 3
50594: PPUSH
50595: LD_INT 3
50597: PPUSH
50598: CALL_OW 275
50602: PUSH
50603: LD_VAR 0 4
50607: PUSH
50608: LD_INT 3
50610: ARRAY
50611: GREATEREQUAL
50612: AND
50613: ST_TO_ADDR
// end ;
50614: LD_VAR 0 2
50618: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50619: LD_INT 0
50621: PPUSH
50622: PPUSH
50623: PPUSH
// pom := GetBase ( building ) ;
50624: LD_ADDR_VAR 0 4
50628: PUSH
50629: LD_VAR 0 1
50633: PPUSH
50634: CALL_OW 274
50638: ST_TO_ADDR
// if not pom then
50639: LD_VAR 0 4
50643: NOT
50644: IFFALSE 50648
// exit ;
50646: GO 50749
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50648: LD_ADDR_VAR 0 5
50652: PUSH
50653: LD_VAR 0 2
50657: PPUSH
50658: LD_VAR 0 1
50662: PPUSH
50663: CALL_OW 248
50667: PPUSH
50668: CALL_OW 450
50672: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50673: LD_ADDR_VAR 0 3
50677: PUSH
50678: LD_VAR 0 4
50682: PPUSH
50683: LD_INT 1
50685: PPUSH
50686: CALL_OW 275
50690: PUSH
50691: LD_VAR 0 5
50695: PUSH
50696: LD_INT 1
50698: ARRAY
50699: GREATEREQUAL
50700: PUSH
50701: LD_VAR 0 4
50705: PPUSH
50706: LD_INT 2
50708: PPUSH
50709: CALL_OW 275
50713: PUSH
50714: LD_VAR 0 5
50718: PUSH
50719: LD_INT 2
50721: ARRAY
50722: GREATEREQUAL
50723: AND
50724: PUSH
50725: LD_VAR 0 4
50729: PPUSH
50730: LD_INT 3
50732: PPUSH
50733: CALL_OW 275
50737: PUSH
50738: LD_VAR 0 5
50742: PUSH
50743: LD_INT 3
50745: ARRAY
50746: GREATEREQUAL
50747: AND
50748: ST_TO_ADDR
// end ;
50749: LD_VAR 0 3
50753: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
50754: LD_INT 0
50756: PPUSH
50757: PPUSH
50758: PPUSH
50759: PPUSH
50760: PPUSH
50761: PPUSH
50762: PPUSH
50763: PPUSH
50764: PPUSH
50765: PPUSH
// result := false ;
50766: LD_ADDR_VAR 0 6
50770: PUSH
50771: LD_INT 0
50773: ST_TO_ADDR
// if not base or not btype or not x or not y then
50774: LD_VAR 0 1
50778: NOT
50779: PUSH
50780: LD_VAR 0 2
50784: NOT
50785: OR
50786: PUSH
50787: LD_VAR 0 3
50791: NOT
50792: OR
50793: PUSH
50794: LD_VAR 0 4
50798: NOT
50799: OR
50800: IFFALSE 50804
// exit ;
50802: GO 51413
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
50804: LD_ADDR_VAR 0 12
50808: PUSH
50809: LD_VAR 0 2
50813: PPUSH
50814: LD_VAR 0 3
50818: PPUSH
50819: LD_VAR 0 4
50823: PPUSH
50824: LD_VAR 0 5
50828: PPUSH
50829: LD_VAR 0 1
50833: PUSH
50834: LD_INT 1
50836: ARRAY
50837: PPUSH
50838: CALL_OW 248
50842: PPUSH
50843: LD_INT 0
50845: PPUSH
50846: CALL 52250 0 6
50850: ST_TO_ADDR
// if not hexes then
50851: LD_VAR 0 12
50855: NOT
50856: IFFALSE 50860
// exit ;
50858: GO 51413
// for i = 1 to hexes do
50860: LD_ADDR_VAR 0 7
50864: PUSH
50865: DOUBLE
50866: LD_INT 1
50868: DEC
50869: ST_TO_ADDR
50870: LD_VAR 0 12
50874: PUSH
50875: FOR_TO
50876: IFFALSE 51411
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50878: LD_ADDR_VAR 0 11
50882: PUSH
50883: LD_VAR 0 12
50887: PUSH
50888: LD_VAR 0 7
50892: ARRAY
50893: PUSH
50894: LD_INT 1
50896: ARRAY
50897: PPUSH
50898: LD_VAR 0 12
50902: PUSH
50903: LD_VAR 0 7
50907: ARRAY
50908: PUSH
50909: LD_INT 2
50911: ARRAY
50912: PPUSH
50913: CALL_OW 428
50917: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50918: LD_VAR 0 12
50922: PUSH
50923: LD_VAR 0 7
50927: ARRAY
50928: PUSH
50929: LD_INT 1
50931: ARRAY
50932: PPUSH
50933: LD_VAR 0 12
50937: PUSH
50938: LD_VAR 0 7
50942: ARRAY
50943: PUSH
50944: LD_INT 2
50946: ARRAY
50947: PPUSH
50948: CALL_OW 351
50952: PUSH
50953: LD_VAR 0 12
50957: PUSH
50958: LD_VAR 0 7
50962: ARRAY
50963: PUSH
50964: LD_INT 1
50966: ARRAY
50967: PPUSH
50968: LD_VAR 0 12
50972: PUSH
50973: LD_VAR 0 7
50977: ARRAY
50978: PUSH
50979: LD_INT 2
50981: ARRAY
50982: PPUSH
50983: CALL_OW 488
50987: NOT
50988: OR
50989: PUSH
50990: LD_VAR 0 11
50994: PPUSH
50995: CALL_OW 247
50999: PUSH
51000: LD_INT 3
51002: EQUAL
51003: OR
51004: IFFALSE 51010
// exit ;
51006: POP
51007: POP
51008: GO 51413
// if not tmp or not tmp in base then
51010: LD_VAR 0 11
51014: NOT
51015: PUSH
51016: LD_VAR 0 11
51020: PUSH
51021: LD_VAR 0 1
51025: IN
51026: NOT
51027: OR
51028: IFFALSE 51032
// continue ;
51030: GO 50875
// result := true ;
51032: LD_ADDR_VAR 0 6
51036: PUSH
51037: LD_INT 1
51039: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51040: LD_ADDR_VAR 0 15
51044: PUSH
51045: LD_VAR 0 1
51049: PPUSH
51050: LD_INT 22
51052: PUSH
51053: LD_VAR 0 11
51057: PPUSH
51058: CALL_OW 255
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: LD_INT 30
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 30
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: LIST
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PPUSH
51099: CALL_OW 72
51103: ST_TO_ADDR
// if dep then
51104: LD_VAR 0 15
51108: IFFALSE 51244
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51110: LD_ADDR_VAR 0 14
51114: PUSH
51115: LD_VAR 0 15
51119: PUSH
51120: LD_INT 1
51122: ARRAY
51123: PPUSH
51124: CALL_OW 250
51128: PPUSH
51129: LD_VAR 0 15
51133: PUSH
51134: LD_INT 1
51136: ARRAY
51137: PPUSH
51138: CALL_OW 254
51142: PPUSH
51143: LD_INT 5
51145: PPUSH
51146: CALL_OW 272
51150: PUSH
51151: LD_VAR 0 15
51155: PUSH
51156: LD_INT 1
51158: ARRAY
51159: PPUSH
51160: CALL_OW 251
51164: PPUSH
51165: LD_VAR 0 15
51169: PUSH
51170: LD_INT 1
51172: ARRAY
51173: PPUSH
51174: CALL_OW 254
51178: PPUSH
51179: LD_INT 5
51181: PPUSH
51182: CALL_OW 273
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51191: LD_VAR 0 14
51195: PUSH
51196: LD_INT 1
51198: ARRAY
51199: PPUSH
51200: LD_VAR 0 14
51204: PUSH
51205: LD_INT 2
51207: ARRAY
51208: PPUSH
51209: CALL_OW 488
51213: IFFALSE 51244
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51215: LD_VAR 0 11
51219: PPUSH
51220: LD_VAR 0 14
51224: PUSH
51225: LD_INT 1
51227: ARRAY
51228: PPUSH
51229: LD_VAR 0 14
51233: PUSH
51234: LD_INT 2
51236: ARRAY
51237: PPUSH
51238: CALL_OW 111
// continue ;
51242: GO 50875
// end ; end ; r := GetDir ( tmp ) ;
51244: LD_ADDR_VAR 0 13
51248: PUSH
51249: LD_VAR 0 11
51253: PPUSH
51254: CALL_OW 254
51258: ST_TO_ADDR
// if r = 5 then
51259: LD_VAR 0 13
51263: PUSH
51264: LD_INT 5
51266: EQUAL
51267: IFFALSE 51277
// r := 0 ;
51269: LD_ADDR_VAR 0 13
51273: PUSH
51274: LD_INT 0
51276: ST_TO_ADDR
// for j = r to 5 do
51277: LD_ADDR_VAR 0 8
51281: PUSH
51282: DOUBLE
51283: LD_VAR 0 13
51287: DEC
51288: ST_TO_ADDR
51289: LD_INT 5
51291: PUSH
51292: FOR_TO
51293: IFFALSE 51407
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51295: LD_ADDR_VAR 0 9
51299: PUSH
51300: LD_VAR 0 11
51304: PPUSH
51305: CALL_OW 250
51309: PPUSH
51310: LD_VAR 0 8
51314: PPUSH
51315: LD_INT 2
51317: PPUSH
51318: CALL_OW 272
51322: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51323: LD_ADDR_VAR 0 10
51327: PUSH
51328: LD_VAR 0 11
51332: PPUSH
51333: CALL_OW 251
51337: PPUSH
51338: LD_VAR 0 8
51342: PPUSH
51343: LD_INT 2
51345: PPUSH
51346: CALL_OW 273
51350: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51351: LD_VAR 0 9
51355: PPUSH
51356: LD_VAR 0 10
51360: PPUSH
51361: CALL_OW 488
51365: PUSH
51366: LD_VAR 0 9
51370: PPUSH
51371: LD_VAR 0 10
51375: PPUSH
51376: CALL_OW 428
51380: NOT
51381: AND
51382: IFFALSE 51405
// begin ComMoveXY ( tmp , _x , _y ) ;
51384: LD_VAR 0 11
51388: PPUSH
51389: LD_VAR 0 9
51393: PPUSH
51394: LD_VAR 0 10
51398: PPUSH
51399: CALL_OW 111
// break ;
51403: GO 51407
// end ; end ;
51405: GO 51292
51407: POP
51408: POP
// end ;
51409: GO 50875
51411: POP
51412: POP
// end ;
51413: LD_VAR 0 6
51417: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
51418: LD_INT 0
51420: PPUSH
51421: PPUSH
51422: PPUSH
51423: PPUSH
51424: PPUSH
51425: PPUSH
51426: PPUSH
51427: PPUSH
51428: PPUSH
51429: PPUSH
// result := false ;
51430: LD_ADDR_VAR 0 6
51434: PUSH
51435: LD_INT 0
51437: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51438: LD_VAR 0 1
51442: NOT
51443: PUSH
51444: LD_VAR 0 1
51448: PPUSH
51449: CALL_OW 266
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: IN
51464: NOT
51465: OR
51466: PUSH
51467: LD_VAR 0 2
51471: NOT
51472: OR
51473: PUSH
51474: LD_VAR 0 5
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: LD_INT 3
51490: PUSH
51491: LD_INT 4
51493: PUSH
51494: LD_INT 5
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: IN
51505: NOT
51506: OR
51507: PUSH
51508: LD_VAR 0 3
51512: PPUSH
51513: LD_VAR 0 4
51517: PPUSH
51518: CALL_OW 488
51522: NOT
51523: OR
51524: IFFALSE 51528
// exit ;
51526: GO 52245
// pom := GetBase ( depot ) ;
51528: LD_ADDR_VAR 0 10
51532: PUSH
51533: LD_VAR 0 1
51537: PPUSH
51538: CALL_OW 274
51542: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51543: LD_ADDR_VAR 0 11
51547: PUSH
51548: LD_VAR 0 2
51552: PPUSH
51553: LD_VAR 0 1
51557: PPUSH
51558: CALL_OW 248
51562: PPUSH
51563: CALL_OW 450
51567: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51568: LD_VAR 0 10
51572: PPUSH
51573: LD_INT 1
51575: PPUSH
51576: CALL_OW 275
51580: PUSH
51581: LD_VAR 0 11
51585: PUSH
51586: LD_INT 1
51588: ARRAY
51589: GREATEREQUAL
51590: PUSH
51591: LD_VAR 0 10
51595: PPUSH
51596: LD_INT 2
51598: PPUSH
51599: CALL_OW 275
51603: PUSH
51604: LD_VAR 0 11
51608: PUSH
51609: LD_INT 2
51611: ARRAY
51612: GREATEREQUAL
51613: AND
51614: PUSH
51615: LD_VAR 0 10
51619: PPUSH
51620: LD_INT 3
51622: PPUSH
51623: CALL_OW 275
51627: PUSH
51628: LD_VAR 0 11
51632: PUSH
51633: LD_INT 3
51635: ARRAY
51636: GREATEREQUAL
51637: AND
51638: NOT
51639: IFFALSE 51643
// exit ;
51641: GO 52245
// if GetBType ( depot ) = b_depot then
51643: LD_VAR 0 1
51647: PPUSH
51648: CALL_OW 266
51652: PUSH
51653: LD_INT 0
51655: EQUAL
51656: IFFALSE 51668
// dist := 28 else
51658: LD_ADDR_VAR 0 14
51662: PUSH
51663: LD_INT 28
51665: ST_TO_ADDR
51666: GO 51676
// dist := 36 ;
51668: LD_ADDR_VAR 0 14
51672: PUSH
51673: LD_INT 36
51675: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51676: LD_VAR 0 1
51680: PPUSH
51681: LD_VAR 0 3
51685: PPUSH
51686: LD_VAR 0 4
51690: PPUSH
51691: CALL_OW 297
51695: PUSH
51696: LD_VAR 0 14
51700: GREATER
51701: IFFALSE 51705
// exit ;
51703: GO 52245
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51705: LD_ADDR_VAR 0 12
51709: PUSH
51710: LD_VAR 0 2
51714: PPUSH
51715: LD_VAR 0 3
51719: PPUSH
51720: LD_VAR 0 4
51724: PPUSH
51725: LD_VAR 0 5
51729: PPUSH
51730: LD_VAR 0 1
51734: PPUSH
51735: CALL_OW 248
51739: PPUSH
51740: LD_INT 0
51742: PPUSH
51743: CALL 52250 0 6
51747: ST_TO_ADDR
// if not hexes then
51748: LD_VAR 0 12
51752: NOT
51753: IFFALSE 51757
// exit ;
51755: GO 52245
// hex := GetHexInfo ( x , y ) ;
51757: LD_ADDR_VAR 0 15
51761: PUSH
51762: LD_VAR 0 3
51766: PPUSH
51767: LD_VAR 0 4
51771: PPUSH
51772: CALL_OW 546
51776: ST_TO_ADDR
// if hex [ 1 ] then
51777: LD_VAR 0 15
51781: PUSH
51782: LD_INT 1
51784: ARRAY
51785: IFFALSE 51789
// exit ;
51787: GO 52245
// height := hex [ 2 ] ;
51789: LD_ADDR_VAR 0 13
51793: PUSH
51794: LD_VAR 0 15
51798: PUSH
51799: LD_INT 2
51801: ARRAY
51802: ST_TO_ADDR
// for i = 1 to hexes do
51803: LD_ADDR_VAR 0 7
51807: PUSH
51808: DOUBLE
51809: LD_INT 1
51811: DEC
51812: ST_TO_ADDR
51813: LD_VAR 0 12
51817: PUSH
51818: FOR_TO
51819: IFFALSE 52149
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51821: LD_VAR 0 12
51825: PUSH
51826: LD_VAR 0 7
51830: ARRAY
51831: PUSH
51832: LD_INT 1
51834: ARRAY
51835: PPUSH
51836: LD_VAR 0 12
51840: PUSH
51841: LD_VAR 0 7
51845: ARRAY
51846: PUSH
51847: LD_INT 2
51849: ARRAY
51850: PPUSH
51851: CALL_OW 488
51855: NOT
51856: PUSH
51857: LD_VAR 0 12
51861: PUSH
51862: LD_VAR 0 7
51866: ARRAY
51867: PUSH
51868: LD_INT 1
51870: ARRAY
51871: PPUSH
51872: LD_VAR 0 12
51876: PUSH
51877: LD_VAR 0 7
51881: ARRAY
51882: PUSH
51883: LD_INT 2
51885: ARRAY
51886: PPUSH
51887: CALL_OW 428
51891: PUSH
51892: LD_INT 0
51894: GREATER
51895: OR
51896: PUSH
51897: LD_VAR 0 12
51901: PUSH
51902: LD_VAR 0 7
51906: ARRAY
51907: PUSH
51908: LD_INT 1
51910: ARRAY
51911: PPUSH
51912: LD_VAR 0 12
51916: PUSH
51917: LD_VAR 0 7
51921: ARRAY
51922: PUSH
51923: LD_INT 2
51925: ARRAY
51926: PPUSH
51927: CALL_OW 351
51931: OR
51932: IFFALSE 51938
// exit ;
51934: POP
51935: POP
51936: GO 52245
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51938: LD_ADDR_VAR 0 8
51942: PUSH
51943: LD_VAR 0 12
51947: PUSH
51948: LD_VAR 0 7
51952: ARRAY
51953: PUSH
51954: LD_INT 1
51956: ARRAY
51957: PPUSH
51958: LD_VAR 0 12
51962: PUSH
51963: LD_VAR 0 7
51967: ARRAY
51968: PUSH
51969: LD_INT 2
51971: ARRAY
51972: PPUSH
51973: CALL_OW 546
51977: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51978: LD_VAR 0 8
51982: PUSH
51983: LD_INT 1
51985: ARRAY
51986: PUSH
51987: LD_VAR 0 8
51991: PUSH
51992: LD_INT 2
51994: ARRAY
51995: PUSH
51996: LD_VAR 0 13
52000: PUSH
52001: LD_INT 2
52003: PLUS
52004: GREATER
52005: OR
52006: PUSH
52007: LD_VAR 0 8
52011: PUSH
52012: LD_INT 2
52014: ARRAY
52015: PUSH
52016: LD_VAR 0 13
52020: PUSH
52021: LD_INT 2
52023: MINUS
52024: LESS
52025: OR
52026: PUSH
52027: LD_VAR 0 8
52031: PUSH
52032: LD_INT 3
52034: ARRAY
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: LD_INT 8
52041: PUSH
52042: LD_INT 9
52044: PUSH
52045: LD_INT 10
52047: PUSH
52048: LD_INT 11
52050: PUSH
52051: LD_INT 12
52053: PUSH
52054: LD_INT 13
52056: PUSH
52057: LD_INT 16
52059: PUSH
52060: LD_INT 17
52062: PUSH
52063: LD_INT 18
52065: PUSH
52066: LD_INT 19
52068: PUSH
52069: LD_INT 20
52071: PUSH
52072: LD_INT 21
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: IN
52090: NOT
52091: OR
52092: PUSH
52093: LD_VAR 0 8
52097: PUSH
52098: LD_INT 5
52100: ARRAY
52101: NOT
52102: OR
52103: PUSH
52104: LD_VAR 0 8
52108: PUSH
52109: LD_INT 6
52111: ARRAY
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: LD_INT 2
52118: PUSH
52119: LD_INT 7
52121: PUSH
52122: LD_INT 9
52124: PUSH
52125: LD_INT 10
52127: PUSH
52128: LD_INT 11
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: IN
52139: NOT
52140: OR
52141: IFFALSE 52147
// exit ;
52143: POP
52144: POP
52145: GO 52245
// end ;
52147: GO 51818
52149: POP
52150: POP
// side := GetSide ( depot ) ;
52151: LD_ADDR_VAR 0 9
52155: PUSH
52156: LD_VAR 0 1
52160: PPUSH
52161: CALL_OW 255
52165: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52166: LD_VAR 0 9
52170: PPUSH
52171: LD_VAR 0 3
52175: PPUSH
52176: LD_VAR 0 4
52180: PPUSH
52181: LD_INT 20
52183: PPUSH
52184: CALL 44899 0 4
52188: PUSH
52189: LD_INT 4
52191: ARRAY
52192: IFFALSE 52196
// exit ;
52194: GO 52245
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52196: LD_VAR 0 2
52200: PUSH
52201: LD_INT 29
52203: PUSH
52204: LD_INT 30
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: IN
52211: PUSH
52212: LD_VAR 0 3
52216: PPUSH
52217: LD_VAR 0 4
52221: PPUSH
52222: LD_VAR 0 9
52226: PPUSH
52227: CALL_OW 440
52231: NOT
52232: AND
52233: IFFALSE 52237
// exit ;
52235: GO 52245
// result := true ;
52237: LD_ADDR_VAR 0 6
52241: PUSH
52242: LD_INT 1
52244: ST_TO_ADDR
// end ;
52245: LD_VAR 0 6
52249: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
52250: LD_INT 0
52252: PPUSH
52253: PPUSH
52254: PPUSH
52255: PPUSH
52256: PPUSH
52257: PPUSH
52258: PPUSH
52259: PPUSH
52260: PPUSH
52261: PPUSH
52262: PPUSH
52263: PPUSH
52264: PPUSH
52265: PPUSH
52266: PPUSH
52267: PPUSH
52268: PPUSH
52269: PPUSH
52270: PPUSH
52271: PPUSH
52272: PPUSH
52273: PPUSH
52274: PPUSH
52275: PPUSH
52276: PPUSH
52277: PPUSH
52278: PPUSH
52279: PPUSH
52280: PPUSH
52281: PPUSH
52282: PPUSH
52283: PPUSH
52284: PPUSH
52285: PPUSH
52286: PPUSH
52287: PPUSH
52288: PPUSH
52289: PPUSH
52290: PPUSH
52291: PPUSH
52292: PPUSH
52293: PPUSH
52294: PPUSH
52295: PPUSH
52296: PPUSH
52297: PPUSH
52298: PPUSH
52299: PPUSH
52300: PPUSH
52301: PPUSH
52302: PPUSH
52303: PPUSH
52304: PPUSH
52305: PPUSH
52306: PPUSH
52307: PPUSH
52308: PPUSH
52309: PPUSH
// result = [ ] ;
52310: LD_ADDR_VAR 0 7
52314: PUSH
52315: EMPTY
52316: ST_TO_ADDR
// temp_list = [ ] ;
52317: LD_ADDR_VAR 0 9
52321: PUSH
52322: EMPTY
52323: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52324: LD_VAR 0 4
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: LD_INT 3
52340: PUSH
52341: LD_INT 4
52343: PUSH
52344: LD_INT 5
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: IN
52355: NOT
52356: PUSH
52357: LD_VAR 0 1
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: IN
52372: PUSH
52373: LD_VAR 0 5
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: LD_INT 3
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: IN
52392: NOT
52393: AND
52394: OR
52395: IFFALSE 52399
// exit ;
52397: GO 70790
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52399: LD_VAR 0 1
52403: PUSH
52404: LD_INT 6
52406: PUSH
52407: LD_INT 7
52409: PUSH
52410: LD_INT 8
52412: PUSH
52413: LD_INT 13
52415: PUSH
52416: LD_INT 12
52418: PUSH
52419: LD_INT 15
52421: PUSH
52422: LD_INT 11
52424: PUSH
52425: LD_INT 14
52427: PUSH
52428: LD_INT 10
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: IN
52442: IFFALSE 52452
// btype = b_lab ;
52444: LD_ADDR_VAR 0 1
52448: PUSH
52449: LD_INT 6
52451: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52452: LD_VAR 0 6
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: LD_INT 2
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: LIST
52470: IN
52471: NOT
52472: PUSH
52473: LD_VAR 0 1
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: LD_INT 3
52489: PUSH
52490: LD_INT 6
52492: PUSH
52493: LD_INT 36
52495: PUSH
52496: LD_INT 4
52498: PUSH
52499: LD_INT 5
52501: PUSH
52502: LD_INT 31
52504: PUSH
52505: LD_INT 32
52507: PUSH
52508: LD_INT 33
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: IN
52524: NOT
52525: PUSH
52526: LD_VAR 0 6
52530: PUSH
52531: LD_INT 1
52533: EQUAL
52534: AND
52535: OR
52536: PUSH
52537: LD_VAR 0 1
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: LD_INT 3
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: IN
52552: NOT
52553: PUSH
52554: LD_VAR 0 6
52558: PUSH
52559: LD_INT 2
52561: EQUAL
52562: AND
52563: OR
52564: IFFALSE 52574
// mode = 0 ;
52566: LD_ADDR_VAR 0 6
52570: PUSH
52571: LD_INT 0
52573: ST_TO_ADDR
// case mode of 0 :
52574: LD_VAR 0 6
52578: PUSH
52579: LD_INT 0
52581: DOUBLE
52582: EQUAL
52583: IFTRUE 52587
52585: GO 64040
52587: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52588: LD_ADDR_VAR 0 11
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 2
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: LD_INT 2
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 3
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 3
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52781: LD_ADDR_VAR 0 12
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 2
52904: NEG
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 3
52938: NEG
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 3
52949: NEG
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52977: LD_ADDR_VAR 0 13
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: LD_INT 2
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: NEG
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 2
53124: NEG
53125: PUSH
53126: LD_INT 3
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 3
53136: NEG
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 3
53148: NEG
53149: PUSH
53150: LD_INT 3
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53176: LD_ADDR_VAR 0 14
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: LD_INT 2
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 3
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 3
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 2
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53372: LD_ADDR_VAR 0 15
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 2
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 2
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 3
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 3
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53565: LD_ADDR_VAR 0 16
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 2
53668: PUSH
53669: LD_INT 2
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 3
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 3
53722: PUSH
53723: LD_INT 3
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: LD_INT 3
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53758: LD_ADDR_VAR 0 17
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 2
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 2
53957: NEG
53958: PUSH
53959: LD_INT 2
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53988: LD_ADDR_VAR 0 18
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: NEG
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: LD_INT 2
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54218: LD_ADDR_VAR 0 19
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 2
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 2
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 2
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: NEG
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 2
54405: NEG
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54448: LD_ADDR_VAR 0 20
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 2
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 2
54624: NEG
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: NEG
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54678: LD_ADDR_VAR 0 21
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 2
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 2
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54908: LD_ADDR_VAR 0 22
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: LD_INT 2
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: LD_INT 2
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 2
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 2
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 2
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: NEG
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55138: LD_ADDR_VAR 0 23
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: LD_INT 2
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 2
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 2
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 2
55314: NEG
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: LD_INT 2
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: LD_INT 3
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: LD_INT 3
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55418: LD_ADDR_VAR 0 24
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 2
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 2
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 2
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: NEG
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 2
55617: NEG
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 2
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 3
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55694: LD_ADDR_VAR 0 25
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: LD_INT 1
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 2
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: LD_INT 2
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: LD_INT 2
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 2
55870: NEG
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 2
55881: NEG
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 3
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: LD_INT 3
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: LD_INT 3
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55968: LD_ADDR_VAR 0 26
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: LD_INT 2
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 2
56179: PUSH
56180: LD_INT 3
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 3
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56244: LD_ADDR_VAR 0 27
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 1
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 2
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: LD_INT 2
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: NEG
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 2
56431: NEG
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: LD_INT 2
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: LD_INT 2
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: NEG
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 3
56477: NEG
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: LD_INT 2
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56524: LD_ADDR_VAR 0 28
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: LD_INT 1
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: LD_INT 2
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: LD_INT 2
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 2
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 2
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: LD_INT 2
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 2
56723: NEG
56724: PUSH
56725: LD_INT 2
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 2
56735: NEG
56736: PUSH
56737: LD_INT 3
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: LD_INT 3
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 3
56759: NEG
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 3
56771: NEG
56772: PUSH
56773: LD_INT 2
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56806: LD_ADDR_VAR 0 29
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: LD_INT 2
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 2
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: LD_INT 2
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: LD_INT 2
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 2
56972: NEG
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 2
56984: NEG
56985: PUSH
56986: LD_INT 2
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 2
56996: NEG
56997: PUSH
56998: LD_INT 3
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: LD_INT 3
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 3
57050: NEG
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57085: LD_ADDR_VAR 0 30
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 2
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 2
57251: NEG
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 3
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 3
57297: PUSH
57298: LD_INT 2
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: LD_INT 3
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 2
57317: NEG
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 3
57328: NEG
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57363: LD_ADDR_VAR 0 31
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 0
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: LD_INT 2
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 2
57487: PUSH
57488: LD_INT 2
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: LD_INT 2
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: LD_INT 2
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: NEG
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: NEG
57553: PUSH
57554: LD_INT 3
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 3
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 3
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: LD_INT 2
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 3
57606: NEG
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57641: LD_ADDR_VAR 0 32
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: NEG
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 2
57807: NEG
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 2
57818: NEG
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: LD_INT 3
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 3
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: LD_INT 3
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 3
57884: NEG
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57919: LD_ADDR_VAR 0 33
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: LD_INT 2
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 2
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 2
58074: NEG
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 2
58097: NEG
58098: PUSH
58099: LD_INT 2
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: NEG
58110: PUSH
58111: LD_INT 3
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 2
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 1
58142: PUSH
58143: LD_INT 3
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 3
58163: NEG
58164: PUSH
58165: LD_INT 2
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58198: LD_ADDR_VAR 0 34
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: LD_INT 2
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: LD_INT 2
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 2
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: NEG
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 2
58365: NEG
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 2
58377: NEG
58378: PUSH
58379: LD_INT 2
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: LD_INT 3
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 2
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 3
58443: NEG
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58478: LD_ADDR_VAR 0 35
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 2
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 2
58569: NEG
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58590: LD_ADDR_VAR 0 36
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: NEG
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: LD_INT 2
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58702: LD_ADDR_VAR 0 37
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58814: LD_ADDR_VAR 0 38
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 2
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 2
58905: NEG
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58926: LD_ADDR_VAR 0 39
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: LD_INT 1
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: LD_INT 1
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: LD_INT 1
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 1
59007: NEG
59008: PUSH
59009: LD_INT 2
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 1
59019: PUSH
59020: LD_INT 2
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59038: LD_ADDR_VAR 0 40
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: LD_INT 1
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 1
59096: NEG
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59150: LD_ADDR_VAR 0 41
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: LD_INT 2
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: LD_INT 2
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 2
59305: NEG
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 2
59328: NEG
59329: PUSH
59330: LD_INT 2
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 2
59340: NEG
59341: PUSH
59342: LD_INT 3
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 2
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 3
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 3
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 3
59383: PUSH
59384: LD_INT 2
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 3
59393: PUSH
59394: LD_INT 3
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 2
59403: PUSH
59404: LD_INT 3
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 3
59424: NEG
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 3
59435: NEG
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 3
59447: NEG
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 3
59459: NEG
59460: PUSH
59461: LD_INT 3
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59500: LD_ADDR_VAR 0 42
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 1
59558: NEG
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 1
59569: NEG
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: LD_INT 2
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: LD_INT 2
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 2
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: LD_INT 2
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: LD_INT 2
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: LD_INT 2
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 2
59666: NEG
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 2
59678: NEG
59679: PUSH
59680: LD_INT 2
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 2
59690: NEG
59691: PUSH
59692: LD_INT 3
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: LD_INT 3
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: LD_INT 3
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 3
59736: PUSH
59737: LD_INT 2
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 3
59746: PUSH
59747: LD_INT 3
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 2
59756: PUSH
59757: LD_INT 3
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: LD_INT 3
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: LD_INT 3
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 3
59797: NEG
59798: PUSH
59799: LD_INT 2
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 3
59809: NEG
59810: PUSH
59811: LD_INT 3
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59850: LD_ADDR_VAR 0 43
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 1
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: LD_INT 1
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: LD_INT 2
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 2
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: NEG
60040: PUSH
60041: LD_INT 3
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: LD_INT 3
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: LD_INT 2
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 2
60073: PUSH
60074: LD_INT 1
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 3
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 3
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: LD_INT 3
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: LD_INT 3
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: LD_INT 2
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 2
60135: NEG
60136: PUSH
60137: LD_INT 1
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 3
60146: NEG
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 3
60157: NEG
60158: PUSH
60159: LD_INT 1
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60198: LD_ADDR_VAR 0 44
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 1
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 1
60267: NEG
60268: PUSH
60269: LD_INT 1
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 1
60279: NEG
60280: PUSH
60281: LD_INT 2
60283: NEG
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 1
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 2
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 2
60312: PUSH
60313: LD_INT 1
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 2
60322: PUSH
60323: LD_INT 2
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 2
60353: NEG
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 2
60364: NEG
60365: PUSH
60366: LD_INT 1
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 2
60376: NEG
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 2
60388: NEG
60389: PUSH
60390: LD_INT 3
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 2
60400: PUSH
60401: LD_INT 1
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 3
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 3
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 3
60431: PUSH
60432: LD_INT 2
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 3
60441: PUSH
60442: LD_INT 3
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 2
60451: PUSH
60452: LD_INT 3
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 2
60461: NEG
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 3
60472: NEG
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 3
60483: NEG
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 3
60495: NEG
60496: PUSH
60497: LD_INT 2
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 3
60507: NEG
60508: PUSH
60509: LD_INT 3
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60548: LD_ADDR_VAR 0 45
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: LD_INT 0
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: LD_INT 0
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 1
60629: NEG
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 0
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: LD_INT 2
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: LD_INT 2
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 2
60714: NEG
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 2
60726: NEG
60727: PUSH
60728: LD_INT 2
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 2
60738: NEG
60739: PUSH
60740: LD_INT 3
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: LD_INT 3
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 3
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: LD_INT 2
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 3
60784: PUSH
60785: LD_INT 2
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 3
60794: PUSH
60795: LD_INT 3
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: PUSH
60805: LD_INT 3
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: LD_INT 3
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: LD_INT 3
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 3
60845: NEG
60846: PUSH
60847: LD_INT 2
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 3
60857: NEG
60858: PUSH
60859: LD_INT 3
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60898: LD_ADDR_VAR 0 46
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: LD_INT 1
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 1
60956: NEG
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: LD_INT 2
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: LD_INT 2
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 2
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 2
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: LD_INT 2
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: LD_INT 2
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 2
61075: NEG
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: NEG
61088: PUSH
61089: LD_INT 3
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: LD_INT 3
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: LD_INT 2
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 3
61132: PUSH
61133: LD_INT 0
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 3
61142: PUSH
61143: LD_INT 1
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: LD_INT 3
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: LD_INT 3
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: LD_INT 2
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: NEG
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 3
61194: NEG
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 3
61205: NEG
61206: PUSH
61207: LD_INT 1
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61246: LD_ADDR_VAR 0 47
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: LD_INT 1
61266: NEG
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 1
61304: NEG
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 1
61327: NEG
61328: PUSH
61329: LD_INT 2
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: LD_INT 2
61342: NEG
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: LD_INT 1
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 2
61361: NEG
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 2
61373: NEG
61374: PUSH
61375: LD_INT 2
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61397: LD_ADDR_VAR 0 48
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 0
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 1
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 1
61455: NEG
61456: PUSH
61457: LD_INT 0
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: LD_INT 1
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 1
61478: NEG
61479: PUSH
61480: LD_INT 2
61482: NEG
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: LD_INT 2
61493: NEG
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 1
61501: PUSH
61502: LD_INT 1
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 2
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 2
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61544: LD_ADDR_VAR 0 49
61548: PUSH
61549: LD_INT 0
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 1
61602: NEG
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: LD_INT 1
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 2
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: LD_INT 2
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61688: LD_ADDR_VAR 0 50
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: LD_INT 1
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: LD_INT 0
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: LD_INT 1
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: NEG
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 2
61769: PUSH
61770: LD_INT 1
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 2
61779: PUSH
61780: LD_INT 2
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: LD_INT 2
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: LD_INT 2
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: LD_INT 1
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61832: LD_ADDR_VAR 0 51
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: LD_INT 1
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 1
61913: PUSH
61914: LD_INT 2
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: LD_INT 2
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: NEG
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: NEG
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 2
61955: NEG
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61979: LD_ADDR_VAR 0 52
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 0
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: NEG
62049: PUSH
62050: LD_INT 1
62052: NEG
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: LD_INT 2
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 1
62072: NEG
62073: PUSH
62074: LD_INT 1
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 2
62083: NEG
62084: PUSH
62085: LD_INT 0
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 2
62094: NEG
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 2
62106: NEG
62107: PUSH
62108: LD_INT 2
62110: NEG
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62130: LD_ADDR_VAR 0 53
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: LD_INT 1
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 1
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: LD_INT 1
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: LD_INT 1
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: LD_INT 0
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: LD_INT 1
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 1
62211: NEG
62212: PUSH
62213: LD_INT 2
62215: NEG
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: LD_INT 2
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 1
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 2
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 2
62255: PUSH
62256: LD_INT 1
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 2
62265: PUSH
62266: LD_INT 2
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: LD_INT 2
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 2
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 1
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 2
62306: NEG
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 2
62317: NEG
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 2
62329: NEG
62330: PUSH
62331: LD_INT 2
62333: NEG
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62360: LD_ADDR_VAR 0 54
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 1
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 0
62408: PUSH
62409: LD_INT 1
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 1
62418: NEG
62419: PUSH
62420: LD_INT 0
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 1
62429: NEG
62430: PUSH
62431: LD_INT 1
62433: NEG
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: LD_INT 2
62445: NEG
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 0
62453: PUSH
62454: LD_INT 2
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 1
62464: PUSH
62465: LD_INT 1
62467: NEG
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 2
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 2
62485: PUSH
62486: LD_INT 1
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 2
62495: PUSH
62496: LD_INT 2
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: LD_INT 2
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: LD_INT 2
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: LD_INT 1
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 2
62536: NEG
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 2
62547: NEG
62548: PUSH
62549: LD_INT 1
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 2
62559: NEG
62560: PUSH
62561: LD_INT 2
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62590: LD_ADDR_VAR 0 55
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: LD_INT 1
62610: NEG
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 1
62618: PUSH
62619: LD_INT 0
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: LD_INT 1
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 0
62638: PUSH
62639: LD_INT 1
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 1
62648: NEG
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: LD_INT 1
62663: NEG
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 1
62671: NEG
62672: PUSH
62673: LD_INT 2
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: LD_INT 2
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: LD_INT 1
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 2
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: LD_INT 2
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: LD_INT 2
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: LD_INT 2
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 1
62755: NEG
62756: PUSH
62757: LD_INT 1
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 2
62766: NEG
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 2
62777: NEG
62778: PUSH
62779: LD_INT 1
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 2
62789: NEG
62790: PUSH
62791: LD_INT 2
62793: NEG
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62820: LD_ADDR_VAR 0 56
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 0
62837: PUSH
62838: LD_INT 1
62840: NEG
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 1
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 1
62858: PUSH
62859: LD_INT 1
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 0
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 1
62878: NEG
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 1
62889: NEG
62890: PUSH
62891: LD_INT 1
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: LD_INT 2
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: LD_INT 2
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: LD_INT 1
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 2
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 2
62945: PUSH
62946: LD_INT 1
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 2
62955: PUSH
62956: LD_INT 2
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: PUSH
62966: LD_INT 2
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: LD_INT 2
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: PUSH
62987: LD_INT 1
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 2
62996: NEG
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 2
63007: NEG
63008: PUSH
63009: LD_INT 1
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 2
63019: NEG
63020: PUSH
63021: LD_INT 2
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63050: LD_ADDR_VAR 0 57
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: LD_INT 1
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: LD_INT 0
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 1
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 1
63108: NEG
63109: PUSH
63110: LD_INT 0
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: LD_INT 1
63123: NEG
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: NEG
63132: PUSH
63133: LD_INT 2
63135: NEG
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: LD_INT 2
63146: NEG
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 1
63154: PUSH
63155: LD_INT 1
63157: NEG
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 2
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 2
63175: PUSH
63176: LD_INT 1
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 2
63185: PUSH
63186: LD_INT 2
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: LD_INT 2
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 0
63205: PUSH
63206: LD_INT 2
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 1
63215: NEG
63216: PUSH
63217: LD_INT 1
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 2
63226: NEG
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 2
63237: NEG
63238: PUSH
63239: LD_INT 1
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 2
63249: NEG
63250: PUSH
63251: LD_INT 2
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63280: LD_ADDR_VAR 0 58
63284: PUSH
63285: LD_INT 0
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 1
63308: PUSH
63309: LD_INT 0
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: LD_INT 0
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 1
63349: NEG
63350: PUSH
63351: LD_INT 1
63353: NEG
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: NEG
63362: PUSH
63363: LD_INT 2
63365: NEG
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: LD_INT 2
63376: NEG
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 1
63384: PUSH
63385: LD_INT 1
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 2
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 2
63405: PUSH
63406: LD_INT 1
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 2
63415: PUSH
63416: LD_INT 2
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: LD_INT 2
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 0
63435: PUSH
63436: LD_INT 2
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 1
63445: NEG
63446: PUSH
63447: LD_INT 1
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 2
63456: NEG
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 2
63467: NEG
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 2
63479: NEG
63480: PUSH
63481: LD_INT 2
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63510: LD_ADDR_VAR 0 59
63514: PUSH
63515: LD_INT 0
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 1
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 1
63548: PUSH
63549: LD_INT 1
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 1
63568: NEG
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: NEG
63580: PUSH
63581: LD_INT 1
63583: NEG
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63598: LD_ADDR_VAR 0 60
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: LD_INT 1
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 1
63656: NEG
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 1
63667: NEG
63668: PUSH
63669: LD_INT 1
63671: NEG
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63686: LD_ADDR_VAR 0 61
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: LD_INT 0
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 0
63703: PUSH
63704: LD_INT 1
63706: NEG
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: PUSH
63715: LD_INT 0
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: LD_INT 1
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: LD_INT 1
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 1
63744: NEG
63745: PUSH
63746: LD_INT 0
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 1
63755: NEG
63756: PUSH
63757: LD_INT 1
63759: NEG
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63774: LD_ADDR_VAR 0 62
63778: PUSH
63779: LD_INT 0
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 0
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 1
63832: NEG
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: LD_INT 1
63847: NEG
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63862: LD_ADDR_VAR 0 63
63866: PUSH
63867: LD_INT 0
63869: PUSH
63870: LD_INT 0
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: LD_INT 1
63882: NEG
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 1
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 1
63900: PUSH
63901: LD_INT 1
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: LD_INT 1
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 1
63920: NEG
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 1
63931: NEG
63932: PUSH
63933: LD_INT 1
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63950: LD_ADDR_VAR 0 64
63954: PUSH
63955: LD_INT 0
63957: PUSH
63958: LD_INT 0
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: LD_INT 1
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 1
63978: PUSH
63979: LD_INT 0
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 1
63988: PUSH
63989: LD_INT 1
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: ST_TO_ADDR
// end ; 1 :
64038: GO 69935
64040: LD_INT 1
64042: DOUBLE
64043: EQUAL
64044: IFTRUE 64048
64046: GO 66671
64048: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64049: LD_ADDR_VAR 0 11
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: LD_INT 3
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 0
64068: PUSH
64069: LD_INT 3
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 1
64079: PUSH
64080: LD_INT 2
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: LIST
64092: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64093: LD_ADDR_VAR 0 12
64097: PUSH
64098: LD_INT 2
64100: PUSH
64101: LD_INT 1
64103: NEG
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 3
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 3
64121: PUSH
64122: LD_INT 1
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: LIST
64133: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64134: LD_ADDR_VAR 0 13
64138: PUSH
64139: LD_INT 3
64141: PUSH
64142: LD_INT 2
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 3
64151: PUSH
64152: LD_INT 3
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 2
64161: PUSH
64162: LD_INT 3
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: LIST
64173: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64174: LD_ADDR_VAR 0 14
64178: PUSH
64179: LD_INT 1
64181: PUSH
64182: LD_INT 3
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: LD_INT 3
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: LD_INT 2
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: LIST
64214: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64215: LD_ADDR_VAR 0 15
64219: PUSH
64220: LD_INT 2
64222: NEG
64223: PUSH
64224: LD_INT 1
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 3
64233: NEG
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 3
64244: NEG
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: LIST
64258: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64259: LD_ADDR_VAR 0 16
64263: PUSH
64264: LD_INT 2
64266: NEG
64267: PUSH
64268: LD_INT 3
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 3
64278: NEG
64279: PUSH
64280: LD_INT 2
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 3
64290: NEG
64291: PUSH
64292: LD_INT 3
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: LIST
64304: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64305: LD_ADDR_VAR 0 17
64309: PUSH
64310: LD_INT 1
64312: NEG
64313: PUSH
64314: LD_INT 3
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: LD_INT 3
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 1
64335: PUSH
64336: LD_INT 2
64338: NEG
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: LIST
64348: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64349: LD_ADDR_VAR 0 18
64353: PUSH
64354: LD_INT 2
64356: PUSH
64357: LD_INT 1
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 3
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 3
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: LIST
64389: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64390: LD_ADDR_VAR 0 19
64394: PUSH
64395: LD_INT 3
64397: PUSH
64398: LD_INT 2
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 3
64407: PUSH
64408: LD_INT 3
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 2
64417: PUSH
64418: LD_INT 3
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: LIST
64429: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64430: LD_ADDR_VAR 0 20
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: LD_INT 3
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 0
64447: PUSH
64448: LD_INT 3
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: NEG
64458: PUSH
64459: LD_INT 2
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: LIST
64470: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64471: LD_ADDR_VAR 0 21
64475: PUSH
64476: LD_INT 2
64478: NEG
64479: PUSH
64480: LD_INT 1
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 3
64489: NEG
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 3
64500: NEG
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: LIST
64514: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64515: LD_ADDR_VAR 0 22
64519: PUSH
64520: LD_INT 2
64522: NEG
64523: PUSH
64524: LD_INT 3
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 3
64534: NEG
64535: PUSH
64536: LD_INT 2
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 3
64546: NEG
64547: PUSH
64548: LD_INT 3
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: LIST
64560: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64561: LD_ADDR_VAR 0 23
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: LD_INT 3
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: LD_INT 4
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: LD_INT 3
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: LIST
64604: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64605: LD_ADDR_VAR 0 24
64609: PUSH
64610: LD_INT 3
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 3
64622: PUSH
64623: LD_INT 1
64625: NEG
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 4
64633: PUSH
64634: LD_INT 1
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: LIST
64645: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64646: LD_ADDR_VAR 0 25
64650: PUSH
64651: LD_INT 3
64653: PUSH
64654: LD_INT 3
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 4
64663: PUSH
64664: LD_INT 3
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 3
64673: PUSH
64674: LD_INT 4
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: LIST
64685: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64686: LD_ADDR_VAR 0 26
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: LD_INT 3
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: LD_INT 4
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 1
64713: NEG
64714: PUSH
64715: LD_INT 3
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: LIST
64726: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64727: LD_ADDR_VAR 0 27
64731: PUSH
64732: LD_INT 3
64734: NEG
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 3
64745: NEG
64746: PUSH
64747: LD_INT 1
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 4
64756: NEG
64757: PUSH
64758: LD_INT 1
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: LIST
64770: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64771: LD_ADDR_VAR 0 28
64775: PUSH
64776: LD_INT 3
64778: NEG
64779: PUSH
64780: LD_INT 3
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 3
64790: NEG
64791: PUSH
64792: LD_INT 4
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 4
64802: NEG
64803: PUSH
64804: LD_INT 3
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: LIST
64816: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64817: LD_ADDR_VAR 0 29
64821: PUSH
64822: LD_INT 1
64824: NEG
64825: PUSH
64826: LD_INT 3
64828: NEG
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: LD_INT 3
64839: NEG
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: LD_INT 2
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 1
64858: NEG
64859: PUSH
64860: LD_INT 4
64862: NEG
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 0
64870: PUSH
64871: LD_INT 4
64873: NEG
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 1
64881: PUSH
64882: LD_INT 3
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 1
64892: NEG
64893: PUSH
64894: LD_INT 5
64896: NEG
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: LD_INT 5
64907: NEG
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 1
64915: PUSH
64916: LD_INT 4
64918: NEG
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 1
64926: NEG
64927: PUSH
64928: LD_INT 6
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: LD_INT 6
64941: NEG
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 1
64949: PUSH
64950: LD_INT 5
64952: NEG
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64972: LD_ADDR_VAR 0 30
64976: PUSH
64977: LD_INT 2
64979: PUSH
64980: LD_INT 1
64982: NEG
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 3
64990: PUSH
64991: LD_INT 0
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 3
65000: PUSH
65001: LD_INT 1
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 3
65010: PUSH
65011: LD_INT 1
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 4
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 4
65031: PUSH
65032: LD_INT 1
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 4
65041: PUSH
65042: LD_INT 1
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 5
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 5
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 5
65072: PUSH
65073: LD_INT 1
65075: NEG
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 6
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 6
65093: PUSH
65094: LD_INT 1
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65115: LD_ADDR_VAR 0 31
65119: PUSH
65120: LD_INT 3
65122: PUSH
65123: LD_INT 2
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 3
65132: PUSH
65133: LD_INT 3
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 2
65142: PUSH
65143: LD_INT 3
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 4
65152: PUSH
65153: LD_INT 3
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 4
65162: PUSH
65163: LD_INT 4
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 3
65172: PUSH
65173: LD_INT 4
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 5
65182: PUSH
65183: LD_INT 4
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 5
65192: PUSH
65193: LD_INT 5
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 4
65202: PUSH
65203: LD_INT 5
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 6
65212: PUSH
65213: LD_INT 5
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 6
65222: PUSH
65223: LD_INT 6
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 5
65232: PUSH
65233: LD_INT 6
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65254: LD_ADDR_VAR 0 32
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: LD_INT 3
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: LD_INT 3
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 1
65281: NEG
65282: PUSH
65283: LD_INT 2
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 1
65292: PUSH
65293: LD_INT 4
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 0
65302: PUSH
65303: LD_INT 4
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 1
65312: NEG
65313: PUSH
65314: LD_INT 3
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 1
65323: PUSH
65324: LD_INT 5
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 0
65333: PUSH
65334: LD_INT 5
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 1
65343: NEG
65344: PUSH
65345: LD_INT 4
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 1
65354: PUSH
65355: LD_INT 6
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 0
65364: PUSH
65365: LD_INT 6
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 1
65374: NEG
65375: PUSH
65376: LD_INT 5
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65397: LD_ADDR_VAR 0 33
65401: PUSH
65402: LD_INT 2
65404: NEG
65405: PUSH
65406: LD_INT 1
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 3
65415: NEG
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 3
65426: NEG
65427: PUSH
65428: LD_INT 1
65430: NEG
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 3
65438: NEG
65439: PUSH
65440: LD_INT 1
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 4
65449: NEG
65450: PUSH
65451: LD_INT 0
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 4
65460: NEG
65461: PUSH
65462: LD_INT 1
65464: NEG
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 4
65472: NEG
65473: PUSH
65474: LD_INT 1
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 5
65483: NEG
65484: PUSH
65485: LD_INT 0
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 5
65494: NEG
65495: PUSH
65496: LD_INT 1
65498: NEG
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 5
65506: NEG
65507: PUSH
65508: LD_INT 1
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 6
65517: NEG
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 6
65528: NEG
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65552: LD_ADDR_VAR 0 34
65556: PUSH
65557: LD_INT 2
65559: NEG
65560: PUSH
65561: LD_INT 3
65563: NEG
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 3
65571: NEG
65572: PUSH
65573: LD_INT 2
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 3
65583: NEG
65584: PUSH
65585: LD_INT 3
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 3
65595: NEG
65596: PUSH
65597: LD_INT 4
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 4
65607: NEG
65608: PUSH
65609: LD_INT 3
65611: NEG
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 4
65619: NEG
65620: PUSH
65621: LD_INT 4
65623: NEG
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 4
65631: NEG
65632: PUSH
65633: LD_INT 5
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 5
65643: NEG
65644: PUSH
65645: LD_INT 4
65647: NEG
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 5
65655: NEG
65656: PUSH
65657: LD_INT 5
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 5
65667: NEG
65668: PUSH
65669: LD_INT 6
65671: NEG
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 6
65679: NEG
65680: PUSH
65681: LD_INT 5
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 6
65691: NEG
65692: PUSH
65693: LD_INT 6
65695: NEG
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65715: LD_ADDR_VAR 0 41
65719: PUSH
65720: LD_INT 0
65722: PUSH
65723: LD_INT 2
65725: NEG
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 1
65733: NEG
65734: PUSH
65735: LD_INT 3
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: PUSH
65746: LD_INT 2
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: LIST
65758: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65759: LD_ADDR_VAR 0 42
65763: PUSH
65764: LD_INT 2
65766: PUSH
65767: LD_INT 0
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 2
65776: PUSH
65777: LD_INT 1
65779: NEG
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 3
65787: PUSH
65788: LD_INT 1
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: LIST
65799: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65800: LD_ADDR_VAR 0 43
65804: PUSH
65805: LD_INT 2
65807: PUSH
65808: LD_INT 2
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 3
65817: PUSH
65818: LD_INT 2
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 2
65827: PUSH
65828: LD_INT 3
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: LIST
65839: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65840: LD_ADDR_VAR 0 44
65844: PUSH
65845: LD_INT 0
65847: PUSH
65848: LD_INT 2
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 1
65857: PUSH
65858: LD_INT 3
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 1
65867: NEG
65868: PUSH
65869: LD_INT 2
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: LIST
65880: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65881: LD_ADDR_VAR 0 45
65885: PUSH
65886: LD_INT 2
65888: NEG
65889: PUSH
65890: LD_INT 0
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 2
65899: NEG
65900: PUSH
65901: LD_INT 1
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 3
65910: NEG
65911: PUSH
65912: LD_INT 1
65914: NEG
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: LIST
65924: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65925: LD_ADDR_VAR 0 46
65929: PUSH
65930: LD_INT 2
65932: NEG
65933: PUSH
65934: LD_INT 2
65936: NEG
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 2
65944: NEG
65945: PUSH
65946: LD_INT 3
65948: NEG
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 3
65956: NEG
65957: PUSH
65958: LD_INT 2
65960: NEG
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: LIST
65970: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65971: LD_ADDR_VAR 0 47
65975: PUSH
65976: LD_INT 2
65978: NEG
65979: PUSH
65980: LD_INT 3
65982: NEG
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 1
65990: NEG
65991: PUSH
65992: LD_INT 3
65994: NEG
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66004: LD_ADDR_VAR 0 48
66008: PUSH
66009: LD_INT 1
66011: PUSH
66012: LD_INT 2
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 2
66022: PUSH
66023: LD_INT 1
66025: NEG
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66035: LD_ADDR_VAR 0 49
66039: PUSH
66040: LD_INT 3
66042: PUSH
66043: LD_INT 1
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 3
66052: PUSH
66053: LD_INT 2
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66064: LD_ADDR_VAR 0 50
66068: PUSH
66069: LD_INT 2
66071: PUSH
66072: LD_INT 3
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 1
66081: PUSH
66082: LD_INT 3
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66093: LD_ADDR_VAR 0 51
66097: PUSH
66098: LD_INT 1
66100: NEG
66101: PUSH
66102: LD_INT 2
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 2
66111: NEG
66112: PUSH
66113: LD_INT 1
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66124: LD_ADDR_VAR 0 52
66128: PUSH
66129: LD_INT 3
66131: NEG
66132: PUSH
66133: LD_INT 1
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 3
66143: NEG
66144: PUSH
66145: LD_INT 2
66147: NEG
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66157: LD_ADDR_VAR 0 53
66161: PUSH
66162: LD_INT 1
66164: NEG
66165: PUSH
66166: LD_INT 3
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 0
66176: PUSH
66177: LD_INT 3
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 1
66187: PUSH
66188: LD_INT 2
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: LIST
66200: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66201: LD_ADDR_VAR 0 54
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: LD_INT 1
66211: NEG
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 3
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 3
66229: PUSH
66230: LD_INT 1
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: LIST
66241: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66242: LD_ADDR_VAR 0 55
66246: PUSH
66247: LD_INT 3
66249: PUSH
66250: LD_INT 2
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 3
66259: PUSH
66260: LD_INT 3
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 2
66269: PUSH
66270: LD_INT 3
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: LIST
66281: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66282: LD_ADDR_VAR 0 56
66286: PUSH
66287: LD_INT 1
66289: PUSH
66290: LD_INT 3
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 0
66299: PUSH
66300: LD_INT 3
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 1
66309: NEG
66310: PUSH
66311: LD_INT 2
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: LIST
66322: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66323: LD_ADDR_VAR 0 57
66327: PUSH
66328: LD_INT 2
66330: NEG
66331: PUSH
66332: LD_INT 1
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 3
66341: NEG
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 3
66352: NEG
66353: PUSH
66354: LD_INT 1
66356: NEG
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: LIST
66366: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66367: LD_ADDR_VAR 0 58
66371: PUSH
66372: LD_INT 2
66374: NEG
66375: PUSH
66376: LD_INT 3
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 3
66386: NEG
66387: PUSH
66388: LD_INT 2
66390: NEG
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 3
66398: NEG
66399: PUSH
66400: LD_INT 3
66402: NEG
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: LIST
66412: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66413: LD_ADDR_VAR 0 59
66417: PUSH
66418: LD_INT 1
66420: NEG
66421: PUSH
66422: LD_INT 2
66424: NEG
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 0
66432: PUSH
66433: LD_INT 2
66435: NEG
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 1
66443: PUSH
66444: LD_INT 1
66446: NEG
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: LIST
66456: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66457: LD_ADDR_VAR 0 60
66461: PUSH
66462: LD_INT 1
66464: PUSH
66465: LD_INT 1
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 2
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 2
66485: PUSH
66486: LD_INT 1
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: LIST
66497: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66498: LD_ADDR_VAR 0 61
66502: PUSH
66503: LD_INT 2
66505: PUSH
66506: LD_INT 1
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 2
66515: PUSH
66516: LD_INT 2
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 1
66525: PUSH
66526: LD_INT 2
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: LIST
66537: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66538: LD_ADDR_VAR 0 62
66542: PUSH
66543: LD_INT 1
66545: PUSH
66546: LD_INT 2
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 0
66555: PUSH
66556: LD_INT 2
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 1
66565: NEG
66566: PUSH
66567: LD_INT 1
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: LIST
66578: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66579: LD_ADDR_VAR 0 63
66583: PUSH
66584: LD_INT 1
66586: NEG
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 2
66597: NEG
66598: PUSH
66599: LD_INT 0
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 2
66608: NEG
66609: PUSH
66610: LD_INT 1
66612: NEG
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: LIST
66622: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66623: LD_ADDR_VAR 0 64
66627: PUSH
66628: LD_INT 1
66630: NEG
66631: PUSH
66632: LD_INT 2
66634: NEG
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 2
66642: NEG
66643: PUSH
66644: LD_INT 1
66646: NEG
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 2
66654: NEG
66655: PUSH
66656: LD_INT 2
66658: NEG
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: LIST
66668: ST_TO_ADDR
// end ; 2 :
66669: GO 69935
66671: LD_INT 2
66673: DOUBLE
66674: EQUAL
66675: IFTRUE 66679
66677: GO 69934
66679: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66680: LD_ADDR_VAR 0 29
66684: PUSH
66685: LD_INT 4
66687: PUSH
66688: LD_INT 0
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 4
66697: PUSH
66698: LD_INT 1
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 5
66708: PUSH
66709: LD_INT 0
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 5
66718: PUSH
66719: LD_INT 1
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 4
66728: PUSH
66729: LD_INT 1
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 3
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 3
66748: PUSH
66749: LD_INT 1
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 3
66759: PUSH
66760: LD_INT 2
66762: NEG
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 5
66770: PUSH
66771: LD_INT 2
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 3
66780: PUSH
66781: LD_INT 3
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 3
66790: PUSH
66791: LD_INT 2
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 4
66800: PUSH
66801: LD_INT 3
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 4
66810: PUSH
66811: LD_INT 4
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 3
66820: PUSH
66821: LD_INT 4
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 2
66830: PUSH
66831: LD_INT 3
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 2
66840: PUSH
66841: LD_INT 2
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 4
66850: PUSH
66851: LD_INT 2
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 2
66860: PUSH
66861: LD_INT 4
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 0
66870: PUSH
66871: LD_INT 4
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 0
66880: PUSH
66881: LD_INT 3
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 1
66890: PUSH
66891: LD_INT 4
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 1
66900: PUSH
66901: LD_INT 5
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: LD_INT 5
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 1
66920: NEG
66921: PUSH
66922: LD_INT 4
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 1
66931: NEG
66932: PUSH
66933: LD_INT 3
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 2
66942: PUSH
66943: LD_INT 5
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 2
66952: NEG
66953: PUSH
66954: LD_INT 3
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 3
66963: NEG
66964: PUSH
66965: LD_INT 0
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 3
66974: NEG
66975: PUSH
66976: LD_INT 1
66978: NEG
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 2
66986: NEG
66987: PUSH
66988: LD_INT 0
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 2
66997: NEG
66998: PUSH
66999: LD_INT 1
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 3
67008: NEG
67009: PUSH
67010: LD_INT 1
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 4
67019: NEG
67020: PUSH
67021: LD_INT 0
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 4
67030: NEG
67031: PUSH
67032: LD_INT 1
67034: NEG
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 4
67042: NEG
67043: PUSH
67044: LD_INT 2
67046: NEG
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 2
67054: NEG
67055: PUSH
67056: LD_INT 2
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 4
67065: NEG
67066: PUSH
67067: LD_INT 4
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 4
67077: NEG
67078: PUSH
67079: LD_INT 5
67081: NEG
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 3
67089: NEG
67090: PUSH
67091: LD_INT 4
67093: NEG
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 3
67101: NEG
67102: PUSH
67103: LD_INT 3
67105: NEG
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 4
67113: NEG
67114: PUSH
67115: LD_INT 3
67117: NEG
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 5
67125: NEG
67126: PUSH
67127: LD_INT 4
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 5
67137: NEG
67138: PUSH
67139: LD_INT 5
67141: NEG
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 3
67149: NEG
67150: PUSH
67151: LD_INT 5
67153: NEG
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 5
67161: NEG
67162: PUSH
67163: LD_INT 3
67165: NEG
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67218: LD_ADDR_VAR 0 30
67222: PUSH
67223: LD_INT 4
67225: PUSH
67226: LD_INT 4
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 4
67235: PUSH
67236: LD_INT 3
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 5
67245: PUSH
67246: LD_INT 4
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 5
67255: PUSH
67256: LD_INT 5
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 4
67265: PUSH
67266: LD_INT 5
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 3
67275: PUSH
67276: LD_INT 4
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 3
67285: PUSH
67286: LD_INT 3
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 5
67295: PUSH
67296: LD_INT 3
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 3
67305: PUSH
67306: LD_INT 5
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 0
67315: PUSH
67316: LD_INT 3
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 0
67325: PUSH
67326: LD_INT 2
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 1
67335: PUSH
67336: LD_INT 3
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 1
67345: PUSH
67346: LD_INT 4
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 0
67355: PUSH
67356: LD_INT 4
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 1
67365: NEG
67366: PUSH
67367: LD_INT 3
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 1
67376: NEG
67377: PUSH
67378: LD_INT 2
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 2
67387: PUSH
67388: LD_INT 4
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 2
67397: NEG
67398: PUSH
67399: LD_INT 2
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 4
67408: NEG
67409: PUSH
67410: LD_INT 0
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 4
67419: NEG
67420: PUSH
67421: LD_INT 1
67423: NEG
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 3
67431: NEG
67432: PUSH
67433: LD_INT 0
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 3
67442: NEG
67443: PUSH
67444: LD_INT 1
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 4
67453: NEG
67454: PUSH
67455: LD_INT 1
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 5
67464: NEG
67465: PUSH
67466: LD_INT 0
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 5
67475: NEG
67476: PUSH
67477: LD_INT 1
67479: NEG
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 5
67487: NEG
67488: PUSH
67489: LD_INT 2
67491: NEG
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 3
67499: NEG
67500: PUSH
67501: LD_INT 2
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 3
67510: NEG
67511: PUSH
67512: LD_INT 3
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 3
67522: NEG
67523: PUSH
67524: LD_INT 4
67526: NEG
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 2
67534: NEG
67535: PUSH
67536: LD_INT 3
67538: NEG
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 2
67546: NEG
67547: PUSH
67548: LD_INT 2
67550: NEG
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 3
67558: NEG
67559: PUSH
67560: LD_INT 2
67562: NEG
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 4
67570: NEG
67571: PUSH
67572: LD_INT 3
67574: NEG
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 4
67582: NEG
67583: PUSH
67584: LD_INT 4
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 2
67594: NEG
67595: PUSH
67596: LD_INT 4
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 4
67606: NEG
67607: PUSH
67608: LD_INT 2
67610: NEG
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: LD_INT 4
67621: NEG
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 0
67629: PUSH
67630: LD_INT 5
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 1
67640: PUSH
67641: LD_INT 4
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 1
67651: PUSH
67652: LD_INT 3
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: LD_INT 3
67665: NEG
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 1
67673: NEG
67674: PUSH
67675: LD_INT 4
67677: NEG
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 1
67685: NEG
67686: PUSH
67687: LD_INT 5
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 2
67697: PUSH
67698: LD_INT 3
67700: NEG
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 2
67708: NEG
67709: PUSH
67710: LD_INT 5
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67765: LD_ADDR_VAR 0 31
67769: PUSH
67770: LD_INT 0
67772: PUSH
67773: LD_INT 4
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 0
67782: PUSH
67783: LD_INT 3
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 1
67792: PUSH
67793: LD_INT 4
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 1
67802: PUSH
67803: LD_INT 5
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 0
67812: PUSH
67813: LD_INT 5
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 1
67822: NEG
67823: PUSH
67824: LD_INT 4
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 1
67833: NEG
67834: PUSH
67835: LD_INT 3
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 2
67844: PUSH
67845: LD_INT 5
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 2
67854: NEG
67855: PUSH
67856: LD_INT 3
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 3
67865: NEG
67866: PUSH
67867: LD_INT 0
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 3
67876: NEG
67877: PUSH
67878: LD_INT 1
67880: NEG
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 2
67888: NEG
67889: PUSH
67890: LD_INT 0
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 2
67899: NEG
67900: PUSH
67901: LD_INT 1
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 3
67910: NEG
67911: PUSH
67912: LD_INT 1
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 4
67921: NEG
67922: PUSH
67923: LD_INT 0
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 4
67932: NEG
67933: PUSH
67934: LD_INT 1
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 4
67944: NEG
67945: PUSH
67946: LD_INT 2
67948: NEG
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 2
67956: NEG
67957: PUSH
67958: LD_INT 2
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 4
67967: NEG
67968: PUSH
67969: LD_INT 4
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 4
67979: NEG
67980: PUSH
67981: LD_INT 5
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 3
67991: NEG
67992: PUSH
67993: LD_INT 4
67995: NEG
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 3
68003: NEG
68004: PUSH
68005: LD_INT 3
68007: NEG
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 4
68015: NEG
68016: PUSH
68017: LD_INT 3
68019: NEG
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 5
68027: NEG
68028: PUSH
68029: LD_INT 4
68031: NEG
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 5
68039: NEG
68040: PUSH
68041: LD_INT 5
68043: NEG
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 3
68051: NEG
68052: PUSH
68053: LD_INT 5
68055: NEG
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 5
68063: NEG
68064: PUSH
68065: LD_INT 3
68067: NEG
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 0
68075: PUSH
68076: LD_INT 3
68078: NEG
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 0
68086: PUSH
68087: LD_INT 4
68089: NEG
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 1
68097: PUSH
68098: LD_INT 3
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 1
68108: PUSH
68109: LD_INT 2
68111: NEG
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 0
68119: PUSH
68120: LD_INT 2
68122: NEG
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 1
68130: NEG
68131: PUSH
68132: LD_INT 3
68134: NEG
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 1
68142: NEG
68143: PUSH
68144: LD_INT 4
68146: NEG
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 2
68154: PUSH
68155: LD_INT 2
68157: NEG
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 2
68165: NEG
68166: PUSH
68167: LD_INT 4
68169: NEG
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 4
68177: PUSH
68178: LD_INT 0
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 4
68187: PUSH
68188: LD_INT 1
68190: NEG
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 5
68198: PUSH
68199: LD_INT 0
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 5
68208: PUSH
68209: LD_INT 1
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 4
68218: PUSH
68219: LD_INT 1
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 3
68228: PUSH
68229: LD_INT 0
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 3
68238: PUSH
68239: LD_INT 1
68241: NEG
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 3
68249: PUSH
68250: LD_INT 2
68252: NEG
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 5
68260: PUSH
68261: LD_INT 2
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68315: LD_ADDR_VAR 0 32
68319: PUSH
68320: LD_INT 4
68322: NEG
68323: PUSH
68324: LD_INT 0
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 4
68333: NEG
68334: PUSH
68335: LD_INT 1
68337: NEG
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 3
68345: NEG
68346: PUSH
68347: LD_INT 0
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 3
68356: NEG
68357: PUSH
68358: LD_INT 1
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 4
68367: NEG
68368: PUSH
68369: LD_INT 1
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 5
68378: NEG
68379: PUSH
68380: LD_INT 0
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 5
68389: NEG
68390: PUSH
68391: LD_INT 1
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 5
68401: NEG
68402: PUSH
68403: LD_INT 2
68405: NEG
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 3
68413: NEG
68414: PUSH
68415: LD_INT 2
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 3
68424: NEG
68425: PUSH
68426: LD_INT 3
68428: NEG
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 3
68436: NEG
68437: PUSH
68438: LD_INT 4
68440: NEG
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 2
68448: NEG
68449: PUSH
68450: LD_INT 3
68452: NEG
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 2
68460: NEG
68461: PUSH
68462: LD_INT 2
68464: NEG
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: LD_INT 3
68472: NEG
68473: PUSH
68474: LD_INT 2
68476: NEG
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 4
68484: NEG
68485: PUSH
68486: LD_INT 3
68488: NEG
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 4
68496: NEG
68497: PUSH
68498: LD_INT 4
68500: NEG
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 2
68508: NEG
68509: PUSH
68510: LD_INT 4
68512: NEG
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 4
68520: NEG
68521: PUSH
68522: LD_INT 2
68524: NEG
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 0
68532: PUSH
68533: LD_INT 4
68535: NEG
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 0
68543: PUSH
68544: LD_INT 5
68546: NEG
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: LD_INT 1
68554: PUSH
68555: LD_INT 4
68557: NEG
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 1
68565: PUSH
68566: LD_INT 3
68568: NEG
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 0
68576: PUSH
68577: LD_INT 3
68579: NEG
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 1
68587: NEG
68588: PUSH
68589: LD_INT 4
68591: NEG
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 1
68599: NEG
68600: PUSH
68601: LD_INT 5
68603: NEG
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 2
68611: PUSH
68612: LD_INT 3
68614: NEG
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 2
68622: NEG
68623: PUSH
68624: LD_INT 5
68626: NEG
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 3
68634: PUSH
68635: LD_INT 0
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 3
68644: PUSH
68645: LD_INT 1
68647: NEG
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 4
68655: PUSH
68656: LD_INT 0
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 4
68665: PUSH
68666: LD_INT 1
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 3
68675: PUSH
68676: LD_INT 1
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 2
68685: PUSH
68686: LD_INT 0
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 2
68695: PUSH
68696: LD_INT 1
68698: NEG
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 2
68706: PUSH
68707: LD_INT 2
68709: NEG
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 4
68717: PUSH
68718: LD_INT 2
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 4
68727: PUSH
68728: LD_INT 4
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 4
68737: PUSH
68738: LD_INT 3
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 5
68747: PUSH
68748: LD_INT 4
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 5
68757: PUSH
68758: LD_INT 5
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 4
68767: PUSH
68768: LD_INT 5
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 3
68777: PUSH
68778: LD_INT 4
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 3
68787: PUSH
68788: LD_INT 3
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 5
68797: PUSH
68798: LD_INT 3
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 3
68807: PUSH
68808: LD_INT 5
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68862: LD_ADDR_VAR 0 33
68866: PUSH
68867: LD_INT 4
68869: NEG
68870: PUSH
68871: LD_INT 4
68873: NEG
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 4
68881: NEG
68882: PUSH
68883: LD_INT 5
68885: NEG
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 3
68893: NEG
68894: PUSH
68895: LD_INT 4
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 3
68905: NEG
68906: PUSH
68907: LD_INT 3
68909: NEG
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 4
68917: NEG
68918: PUSH
68919: LD_INT 3
68921: NEG
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: LD_INT 5
68929: NEG
68930: PUSH
68931: LD_INT 4
68933: NEG
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 5
68941: NEG
68942: PUSH
68943: LD_INT 5
68945: NEG
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 3
68953: NEG
68954: PUSH
68955: LD_INT 5
68957: NEG
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 5
68965: NEG
68966: PUSH
68967: LD_INT 3
68969: NEG
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 0
68977: PUSH
68978: LD_INT 3
68980: NEG
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 0
68988: PUSH
68989: LD_INT 4
68991: NEG
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 1
68999: PUSH
69000: LD_INT 3
69002: NEG
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 1
69010: PUSH
69011: LD_INT 2
69013: NEG
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 0
69021: PUSH
69022: LD_INT 2
69024: NEG
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 1
69032: NEG
69033: PUSH
69034: LD_INT 3
69036: NEG
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 1
69044: NEG
69045: PUSH
69046: LD_INT 4
69048: NEG
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 2
69056: PUSH
69057: LD_INT 2
69059: NEG
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 2
69067: NEG
69068: PUSH
69069: LD_INT 4
69071: NEG
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 4
69079: PUSH
69080: LD_INT 0
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 4
69089: PUSH
69090: LD_INT 1
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 5
69100: PUSH
69101: LD_INT 0
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 5
69110: PUSH
69111: LD_INT 1
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 4
69120: PUSH
69121: LD_INT 1
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 3
69130: PUSH
69131: LD_INT 0
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 3
69140: PUSH
69141: LD_INT 1
69143: NEG
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 3
69151: PUSH
69152: LD_INT 2
69154: NEG
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 5
69162: PUSH
69163: LD_INT 2
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 3
69172: PUSH
69173: LD_INT 3
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 3
69182: PUSH
69183: LD_INT 2
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 4
69192: PUSH
69193: LD_INT 3
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 4
69202: PUSH
69203: LD_INT 4
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 3
69212: PUSH
69213: LD_INT 4
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 2
69222: PUSH
69223: LD_INT 3
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 2
69232: PUSH
69233: LD_INT 2
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 4
69242: PUSH
69243: LD_INT 2
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 2
69252: PUSH
69253: LD_INT 4
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 0
69262: PUSH
69263: LD_INT 4
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 0
69272: PUSH
69273: LD_INT 3
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 1
69282: PUSH
69283: LD_INT 4
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 1
69292: PUSH
69293: LD_INT 5
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 0
69302: PUSH
69303: LD_INT 5
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 1
69312: NEG
69313: PUSH
69314: LD_INT 4
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 1
69323: NEG
69324: PUSH
69325: LD_INT 3
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 2
69334: PUSH
69335: LD_INT 5
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 2
69344: NEG
69345: PUSH
69346: LD_INT 3
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69400: LD_ADDR_VAR 0 34
69404: PUSH
69405: LD_INT 0
69407: PUSH
69408: LD_INT 4
69410: NEG
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 0
69418: PUSH
69419: LD_INT 5
69421: NEG
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 1
69429: PUSH
69430: LD_INT 4
69432: NEG
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 1
69440: PUSH
69441: LD_INT 3
69443: NEG
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 0
69451: PUSH
69452: LD_INT 3
69454: NEG
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 1
69462: NEG
69463: PUSH
69464: LD_INT 4
69466: NEG
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 1
69474: NEG
69475: PUSH
69476: LD_INT 5
69478: NEG
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 2
69486: PUSH
69487: LD_INT 3
69489: NEG
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 2
69497: NEG
69498: PUSH
69499: LD_INT 5
69501: NEG
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 3
69509: PUSH
69510: LD_INT 0
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 3
69519: PUSH
69520: LD_INT 1
69522: NEG
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 4
69530: PUSH
69531: LD_INT 0
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 4
69540: PUSH
69541: LD_INT 1
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 3
69550: PUSH
69551: LD_INT 1
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 2
69560: PUSH
69561: LD_INT 0
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 2
69570: PUSH
69571: LD_INT 1
69573: NEG
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 2
69581: PUSH
69582: LD_INT 2
69584: NEG
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 4
69592: PUSH
69593: LD_INT 2
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 4
69602: PUSH
69603: LD_INT 4
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 4
69612: PUSH
69613: LD_INT 3
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 5
69622: PUSH
69623: LD_INT 4
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 5
69632: PUSH
69633: LD_INT 5
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 4
69642: PUSH
69643: LD_INT 5
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 3
69652: PUSH
69653: LD_INT 4
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 3
69662: PUSH
69663: LD_INT 3
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 5
69672: PUSH
69673: LD_INT 3
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 3
69682: PUSH
69683: LD_INT 5
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 0
69692: PUSH
69693: LD_INT 3
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 0
69702: PUSH
69703: LD_INT 2
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 1
69712: PUSH
69713: LD_INT 3
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 1
69722: PUSH
69723: LD_INT 4
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 0
69732: PUSH
69733: LD_INT 4
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 1
69742: NEG
69743: PUSH
69744: LD_INT 3
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 1
69753: NEG
69754: PUSH
69755: LD_INT 2
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 2
69764: PUSH
69765: LD_INT 4
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 2
69774: NEG
69775: PUSH
69776: LD_INT 2
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 4
69785: NEG
69786: PUSH
69787: LD_INT 0
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 4
69796: NEG
69797: PUSH
69798: LD_INT 1
69800: NEG
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 3
69808: NEG
69809: PUSH
69810: LD_INT 0
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 3
69819: NEG
69820: PUSH
69821: LD_INT 1
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 4
69830: NEG
69831: PUSH
69832: LD_INT 1
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 5
69841: NEG
69842: PUSH
69843: LD_INT 0
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 5
69852: NEG
69853: PUSH
69854: LD_INT 1
69856: NEG
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 5
69864: NEG
69865: PUSH
69866: LD_INT 2
69868: NEG
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 3
69876: NEG
69877: PUSH
69878: LD_INT 2
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: ST_TO_ADDR
// end ; end ;
69932: GO 69935
69934: POP
// case btype of b_depot , b_warehouse :
69935: LD_VAR 0 1
69939: PUSH
69940: LD_INT 0
69942: DOUBLE
69943: EQUAL
69944: IFTRUE 69954
69946: LD_INT 1
69948: DOUBLE
69949: EQUAL
69950: IFTRUE 69954
69952: GO 70155
69954: POP
// case nation of nation_american :
69955: LD_VAR 0 5
69959: PUSH
69960: LD_INT 1
69962: DOUBLE
69963: EQUAL
69964: IFTRUE 69968
69966: GO 70024
69968: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
69969: LD_ADDR_VAR 0 9
69973: PUSH
69974: LD_VAR 0 11
69978: PUSH
69979: LD_VAR 0 12
69983: PUSH
69984: LD_VAR 0 13
69988: PUSH
69989: LD_VAR 0 14
69993: PUSH
69994: LD_VAR 0 15
69998: PUSH
69999: LD_VAR 0 16
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: PUSH
70012: LD_VAR 0 4
70016: PUSH
70017: LD_INT 1
70019: PLUS
70020: ARRAY
70021: ST_TO_ADDR
70022: GO 70153
70024: LD_INT 2
70026: DOUBLE
70027: EQUAL
70028: IFTRUE 70032
70030: GO 70088
70032: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
70033: LD_ADDR_VAR 0 9
70037: PUSH
70038: LD_VAR 0 17
70042: PUSH
70043: LD_VAR 0 18
70047: PUSH
70048: LD_VAR 0 19
70052: PUSH
70053: LD_VAR 0 20
70057: PUSH
70058: LD_VAR 0 21
70062: PUSH
70063: LD_VAR 0 22
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: PUSH
70076: LD_VAR 0 4
70080: PUSH
70081: LD_INT 1
70083: PLUS
70084: ARRAY
70085: ST_TO_ADDR
70086: GO 70153
70088: LD_INT 3
70090: DOUBLE
70091: EQUAL
70092: IFTRUE 70096
70094: GO 70152
70096: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70097: LD_ADDR_VAR 0 9
70101: PUSH
70102: LD_VAR 0 23
70106: PUSH
70107: LD_VAR 0 24
70111: PUSH
70112: LD_VAR 0 25
70116: PUSH
70117: LD_VAR 0 26
70121: PUSH
70122: LD_VAR 0 27
70126: PUSH
70127: LD_VAR 0 28
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: PUSH
70140: LD_VAR 0 4
70144: PUSH
70145: LD_INT 1
70147: PLUS
70148: ARRAY
70149: ST_TO_ADDR
70150: GO 70153
70152: POP
70153: GO 70708
70155: LD_INT 2
70157: DOUBLE
70158: EQUAL
70159: IFTRUE 70169
70161: LD_INT 3
70163: DOUBLE
70164: EQUAL
70165: IFTRUE 70169
70167: GO 70225
70169: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70170: LD_ADDR_VAR 0 9
70174: PUSH
70175: LD_VAR 0 29
70179: PUSH
70180: LD_VAR 0 30
70184: PUSH
70185: LD_VAR 0 31
70189: PUSH
70190: LD_VAR 0 32
70194: PUSH
70195: LD_VAR 0 33
70199: PUSH
70200: LD_VAR 0 34
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: PUSH
70213: LD_VAR 0 4
70217: PUSH
70218: LD_INT 1
70220: PLUS
70221: ARRAY
70222: ST_TO_ADDR
70223: GO 70708
70225: LD_INT 16
70227: DOUBLE
70228: EQUAL
70229: IFTRUE 70287
70231: LD_INT 17
70233: DOUBLE
70234: EQUAL
70235: IFTRUE 70287
70237: LD_INT 18
70239: DOUBLE
70240: EQUAL
70241: IFTRUE 70287
70243: LD_INT 19
70245: DOUBLE
70246: EQUAL
70247: IFTRUE 70287
70249: LD_INT 22
70251: DOUBLE
70252: EQUAL
70253: IFTRUE 70287
70255: LD_INT 20
70257: DOUBLE
70258: EQUAL
70259: IFTRUE 70287
70261: LD_INT 21
70263: DOUBLE
70264: EQUAL
70265: IFTRUE 70287
70267: LD_INT 23
70269: DOUBLE
70270: EQUAL
70271: IFTRUE 70287
70273: LD_INT 24
70275: DOUBLE
70276: EQUAL
70277: IFTRUE 70287
70279: LD_INT 25
70281: DOUBLE
70282: EQUAL
70283: IFTRUE 70287
70285: GO 70343
70287: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70288: LD_ADDR_VAR 0 9
70292: PUSH
70293: LD_VAR 0 35
70297: PUSH
70298: LD_VAR 0 36
70302: PUSH
70303: LD_VAR 0 37
70307: PUSH
70308: LD_VAR 0 38
70312: PUSH
70313: LD_VAR 0 39
70317: PUSH
70318: LD_VAR 0 40
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: PUSH
70331: LD_VAR 0 4
70335: PUSH
70336: LD_INT 1
70338: PLUS
70339: ARRAY
70340: ST_TO_ADDR
70341: GO 70708
70343: LD_INT 6
70345: DOUBLE
70346: EQUAL
70347: IFTRUE 70399
70349: LD_INT 7
70351: DOUBLE
70352: EQUAL
70353: IFTRUE 70399
70355: LD_INT 8
70357: DOUBLE
70358: EQUAL
70359: IFTRUE 70399
70361: LD_INT 13
70363: DOUBLE
70364: EQUAL
70365: IFTRUE 70399
70367: LD_INT 12
70369: DOUBLE
70370: EQUAL
70371: IFTRUE 70399
70373: LD_INT 15
70375: DOUBLE
70376: EQUAL
70377: IFTRUE 70399
70379: LD_INT 11
70381: DOUBLE
70382: EQUAL
70383: IFTRUE 70399
70385: LD_INT 14
70387: DOUBLE
70388: EQUAL
70389: IFTRUE 70399
70391: LD_INT 10
70393: DOUBLE
70394: EQUAL
70395: IFTRUE 70399
70397: GO 70455
70399: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
70400: LD_ADDR_VAR 0 9
70404: PUSH
70405: LD_VAR 0 41
70409: PUSH
70410: LD_VAR 0 42
70414: PUSH
70415: LD_VAR 0 43
70419: PUSH
70420: LD_VAR 0 44
70424: PUSH
70425: LD_VAR 0 45
70429: PUSH
70430: LD_VAR 0 46
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: PUSH
70443: LD_VAR 0 4
70447: PUSH
70448: LD_INT 1
70450: PLUS
70451: ARRAY
70452: ST_TO_ADDR
70453: GO 70708
70455: LD_INT 36
70457: DOUBLE
70458: EQUAL
70459: IFTRUE 70463
70461: GO 70519
70463: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70464: LD_ADDR_VAR 0 9
70468: PUSH
70469: LD_VAR 0 47
70473: PUSH
70474: LD_VAR 0 48
70478: PUSH
70479: LD_VAR 0 49
70483: PUSH
70484: LD_VAR 0 50
70488: PUSH
70489: LD_VAR 0 51
70493: PUSH
70494: LD_VAR 0 52
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: PUSH
70507: LD_VAR 0 4
70511: PUSH
70512: LD_INT 1
70514: PLUS
70515: ARRAY
70516: ST_TO_ADDR
70517: GO 70708
70519: LD_INT 4
70521: DOUBLE
70522: EQUAL
70523: IFTRUE 70545
70525: LD_INT 5
70527: DOUBLE
70528: EQUAL
70529: IFTRUE 70545
70531: LD_INT 34
70533: DOUBLE
70534: EQUAL
70535: IFTRUE 70545
70537: LD_INT 37
70539: DOUBLE
70540: EQUAL
70541: IFTRUE 70545
70543: GO 70601
70545: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70546: LD_ADDR_VAR 0 9
70550: PUSH
70551: LD_VAR 0 53
70555: PUSH
70556: LD_VAR 0 54
70560: PUSH
70561: LD_VAR 0 55
70565: PUSH
70566: LD_VAR 0 56
70570: PUSH
70571: LD_VAR 0 57
70575: PUSH
70576: LD_VAR 0 58
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: PUSH
70589: LD_VAR 0 4
70593: PUSH
70594: LD_INT 1
70596: PLUS
70597: ARRAY
70598: ST_TO_ADDR
70599: GO 70708
70601: LD_INT 31
70603: DOUBLE
70604: EQUAL
70605: IFTRUE 70651
70607: LD_INT 32
70609: DOUBLE
70610: EQUAL
70611: IFTRUE 70651
70613: LD_INT 33
70615: DOUBLE
70616: EQUAL
70617: IFTRUE 70651
70619: LD_INT 27
70621: DOUBLE
70622: EQUAL
70623: IFTRUE 70651
70625: LD_INT 26
70627: DOUBLE
70628: EQUAL
70629: IFTRUE 70651
70631: LD_INT 28
70633: DOUBLE
70634: EQUAL
70635: IFTRUE 70651
70637: LD_INT 29
70639: DOUBLE
70640: EQUAL
70641: IFTRUE 70651
70643: LD_INT 30
70645: DOUBLE
70646: EQUAL
70647: IFTRUE 70651
70649: GO 70707
70651: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
70652: LD_ADDR_VAR 0 9
70656: PUSH
70657: LD_VAR 0 59
70661: PUSH
70662: LD_VAR 0 60
70666: PUSH
70667: LD_VAR 0 61
70671: PUSH
70672: LD_VAR 0 62
70676: PUSH
70677: LD_VAR 0 63
70681: PUSH
70682: LD_VAR 0 64
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: PUSH
70695: LD_VAR 0 4
70699: PUSH
70700: LD_INT 1
70702: PLUS
70703: ARRAY
70704: ST_TO_ADDR
70705: GO 70708
70707: POP
// temp_list2 = [ ] ;
70708: LD_ADDR_VAR 0 10
70712: PUSH
70713: EMPTY
70714: ST_TO_ADDR
// for i in temp_list do
70715: LD_ADDR_VAR 0 8
70719: PUSH
70720: LD_VAR 0 9
70724: PUSH
70725: FOR_IN
70726: IFFALSE 70778
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70728: LD_ADDR_VAR 0 10
70732: PUSH
70733: LD_VAR 0 10
70737: PUSH
70738: LD_VAR 0 8
70742: PUSH
70743: LD_INT 1
70745: ARRAY
70746: PUSH
70747: LD_VAR 0 2
70751: PLUS
70752: PUSH
70753: LD_VAR 0 8
70757: PUSH
70758: LD_INT 2
70760: ARRAY
70761: PUSH
70762: LD_VAR 0 3
70766: PLUS
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: EMPTY
70773: LIST
70774: ADD
70775: ST_TO_ADDR
70776: GO 70725
70778: POP
70779: POP
// result = temp_list2 ;
70780: LD_ADDR_VAR 0 7
70784: PUSH
70785: LD_VAR 0 10
70789: ST_TO_ADDR
// end ;
70790: LD_VAR 0 7
70794: RET
// export function EnemyInRange ( unit , dist ) ; begin
70795: LD_INT 0
70797: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70798: LD_ADDR_VAR 0 3
70802: PUSH
70803: LD_VAR 0 1
70807: PPUSH
70808: CALL_OW 255
70812: PPUSH
70813: LD_VAR 0 1
70817: PPUSH
70818: CALL_OW 250
70822: PPUSH
70823: LD_VAR 0 1
70827: PPUSH
70828: CALL_OW 251
70832: PPUSH
70833: LD_VAR 0 2
70837: PPUSH
70838: CALL 44899 0 4
70842: PUSH
70843: LD_INT 4
70845: ARRAY
70846: ST_TO_ADDR
// end ;
70847: LD_VAR 0 3
70851: RET
// export function PlayerSeeMe ( unit ) ; begin
70852: LD_INT 0
70854: PPUSH
// result := See ( your_side , unit ) ;
70855: LD_ADDR_VAR 0 2
70859: PUSH
70860: LD_OWVAR 2
70864: PPUSH
70865: LD_VAR 0 1
70869: PPUSH
70870: CALL_OW 292
70874: ST_TO_ADDR
// end ;
70875: LD_VAR 0 2
70879: RET
// export function ReverseDir ( unit ) ; begin
70880: LD_INT 0
70882: PPUSH
// if not unit then
70883: LD_VAR 0 1
70887: NOT
70888: IFFALSE 70892
// exit ;
70890: GO 70915
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70892: LD_ADDR_VAR 0 2
70896: PUSH
70897: LD_VAR 0 1
70901: PPUSH
70902: CALL_OW 254
70906: PUSH
70907: LD_INT 3
70909: PLUS
70910: PUSH
70911: LD_INT 6
70913: MOD
70914: ST_TO_ADDR
// end ;
70915: LD_VAR 0 2
70919: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70920: LD_INT 0
70922: PPUSH
70923: PPUSH
70924: PPUSH
70925: PPUSH
70926: PPUSH
// if not hexes then
70927: LD_VAR 0 2
70931: NOT
70932: IFFALSE 70936
// exit ;
70934: GO 71084
// dist := 9999 ;
70936: LD_ADDR_VAR 0 5
70940: PUSH
70941: LD_INT 9999
70943: ST_TO_ADDR
// for i = 1 to hexes do
70944: LD_ADDR_VAR 0 4
70948: PUSH
70949: DOUBLE
70950: LD_INT 1
70952: DEC
70953: ST_TO_ADDR
70954: LD_VAR 0 2
70958: PUSH
70959: FOR_TO
70960: IFFALSE 71072
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70962: LD_VAR 0 1
70966: PPUSH
70967: LD_VAR 0 2
70971: PUSH
70972: LD_VAR 0 4
70976: ARRAY
70977: PUSH
70978: LD_INT 1
70980: ARRAY
70981: PPUSH
70982: LD_VAR 0 2
70986: PUSH
70987: LD_VAR 0 4
70991: ARRAY
70992: PUSH
70993: LD_INT 2
70995: ARRAY
70996: PPUSH
70997: CALL_OW 297
71001: PUSH
71002: LD_VAR 0 5
71006: LESS
71007: IFFALSE 71070
// begin hex := hexes [ i ] ;
71009: LD_ADDR_VAR 0 7
71013: PUSH
71014: LD_VAR 0 2
71018: PUSH
71019: LD_VAR 0 4
71023: ARRAY
71024: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71025: LD_ADDR_VAR 0 5
71029: PUSH
71030: LD_VAR 0 1
71034: PPUSH
71035: LD_VAR 0 2
71039: PUSH
71040: LD_VAR 0 4
71044: ARRAY
71045: PUSH
71046: LD_INT 1
71048: ARRAY
71049: PPUSH
71050: LD_VAR 0 2
71054: PUSH
71055: LD_VAR 0 4
71059: ARRAY
71060: PUSH
71061: LD_INT 2
71063: ARRAY
71064: PPUSH
71065: CALL_OW 297
71069: ST_TO_ADDR
// end ; end ;
71070: GO 70959
71072: POP
71073: POP
// result := hex ;
71074: LD_ADDR_VAR 0 3
71078: PUSH
71079: LD_VAR 0 7
71083: ST_TO_ADDR
// end ;
71084: LD_VAR 0 3
71088: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71089: LD_INT 0
71091: PPUSH
71092: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71093: LD_VAR 0 1
71097: NOT
71098: PUSH
71099: LD_VAR 0 1
71103: PUSH
71104: LD_INT 21
71106: PUSH
71107: LD_INT 2
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 23
71116: PUSH
71117: LD_INT 2
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PPUSH
71128: CALL_OW 69
71132: IN
71133: NOT
71134: OR
71135: IFFALSE 71139
// exit ;
71137: GO 71186
// for i = 1 to 3 do
71139: LD_ADDR_VAR 0 3
71143: PUSH
71144: DOUBLE
71145: LD_INT 1
71147: DEC
71148: ST_TO_ADDR
71149: LD_INT 3
71151: PUSH
71152: FOR_TO
71153: IFFALSE 71184
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71155: LD_VAR 0 1
71159: PPUSH
71160: CALL_OW 250
71164: PPUSH
71165: LD_VAR 0 1
71169: PPUSH
71170: CALL_OW 251
71174: PPUSH
71175: LD_INT 1
71177: PPUSH
71178: CALL_OW 453
71182: GO 71152
71184: POP
71185: POP
// end ;
71186: LD_VAR 0 2
71190: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71191: LD_INT 0
71193: PPUSH
71194: PPUSH
71195: PPUSH
71196: PPUSH
71197: PPUSH
71198: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71199: LD_VAR 0 1
71203: NOT
71204: PUSH
71205: LD_VAR 0 2
71209: NOT
71210: OR
71211: PUSH
71212: LD_VAR 0 1
71216: PPUSH
71217: CALL_OW 314
71221: OR
71222: IFFALSE 71226
// exit ;
71224: GO 71667
// x := GetX ( enemy_unit ) ;
71226: LD_ADDR_VAR 0 7
71230: PUSH
71231: LD_VAR 0 2
71235: PPUSH
71236: CALL_OW 250
71240: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71241: LD_ADDR_VAR 0 8
71245: PUSH
71246: LD_VAR 0 2
71250: PPUSH
71251: CALL_OW 251
71255: ST_TO_ADDR
// if not x or not y then
71256: LD_VAR 0 7
71260: NOT
71261: PUSH
71262: LD_VAR 0 8
71266: NOT
71267: OR
71268: IFFALSE 71272
// exit ;
71270: GO 71667
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71272: LD_ADDR_VAR 0 6
71276: PUSH
71277: LD_VAR 0 7
71281: PPUSH
71282: LD_INT 0
71284: PPUSH
71285: LD_INT 4
71287: PPUSH
71288: CALL_OW 272
71292: PUSH
71293: LD_VAR 0 8
71297: PPUSH
71298: LD_INT 0
71300: PPUSH
71301: LD_INT 4
71303: PPUSH
71304: CALL_OW 273
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_VAR 0 7
71317: PPUSH
71318: LD_INT 1
71320: PPUSH
71321: LD_INT 4
71323: PPUSH
71324: CALL_OW 272
71328: PUSH
71329: LD_VAR 0 8
71333: PPUSH
71334: LD_INT 1
71336: PPUSH
71337: LD_INT 4
71339: PPUSH
71340: CALL_OW 273
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_VAR 0 7
71353: PPUSH
71354: LD_INT 2
71356: PPUSH
71357: LD_INT 4
71359: PPUSH
71360: CALL_OW 272
71364: PUSH
71365: LD_VAR 0 8
71369: PPUSH
71370: LD_INT 2
71372: PPUSH
71373: LD_INT 4
71375: PPUSH
71376: CALL_OW 273
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_VAR 0 7
71389: PPUSH
71390: LD_INT 3
71392: PPUSH
71393: LD_INT 4
71395: PPUSH
71396: CALL_OW 272
71400: PUSH
71401: LD_VAR 0 8
71405: PPUSH
71406: LD_INT 3
71408: PPUSH
71409: LD_INT 4
71411: PPUSH
71412: CALL_OW 273
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PUSH
71421: LD_VAR 0 7
71425: PPUSH
71426: LD_INT 4
71428: PPUSH
71429: LD_INT 4
71431: PPUSH
71432: CALL_OW 272
71436: PUSH
71437: LD_VAR 0 8
71441: PPUSH
71442: LD_INT 4
71444: PPUSH
71445: LD_INT 4
71447: PPUSH
71448: CALL_OW 273
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_VAR 0 7
71461: PPUSH
71462: LD_INT 5
71464: PPUSH
71465: LD_INT 4
71467: PPUSH
71468: CALL_OW 272
71472: PUSH
71473: LD_VAR 0 8
71477: PPUSH
71478: LD_INT 5
71480: PPUSH
71481: LD_INT 4
71483: PPUSH
71484: CALL_OW 273
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: ST_TO_ADDR
// for i = tmp downto 1 do
71501: LD_ADDR_VAR 0 4
71505: PUSH
71506: DOUBLE
71507: LD_VAR 0 6
71511: INC
71512: ST_TO_ADDR
71513: LD_INT 1
71515: PUSH
71516: FOR_DOWNTO
71517: IFFALSE 71618
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71519: LD_VAR 0 6
71523: PUSH
71524: LD_VAR 0 4
71528: ARRAY
71529: PUSH
71530: LD_INT 1
71532: ARRAY
71533: PPUSH
71534: LD_VAR 0 6
71538: PUSH
71539: LD_VAR 0 4
71543: ARRAY
71544: PUSH
71545: LD_INT 2
71547: ARRAY
71548: PPUSH
71549: CALL_OW 488
71553: NOT
71554: PUSH
71555: LD_VAR 0 6
71559: PUSH
71560: LD_VAR 0 4
71564: ARRAY
71565: PUSH
71566: LD_INT 1
71568: ARRAY
71569: PPUSH
71570: LD_VAR 0 6
71574: PUSH
71575: LD_VAR 0 4
71579: ARRAY
71580: PUSH
71581: LD_INT 2
71583: ARRAY
71584: PPUSH
71585: CALL_OW 428
71589: PUSH
71590: LD_INT 0
71592: NONEQUAL
71593: OR
71594: IFFALSE 71616
// tmp := Delete ( tmp , i ) ;
71596: LD_ADDR_VAR 0 6
71600: PUSH
71601: LD_VAR 0 6
71605: PPUSH
71606: LD_VAR 0 4
71610: PPUSH
71611: CALL_OW 3
71615: ST_TO_ADDR
71616: GO 71516
71618: POP
71619: POP
// j := GetClosestHex ( unit , tmp ) ;
71620: LD_ADDR_VAR 0 5
71624: PUSH
71625: LD_VAR 0 1
71629: PPUSH
71630: LD_VAR 0 6
71634: PPUSH
71635: CALL 70920 0 2
71639: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71640: LD_VAR 0 1
71644: PPUSH
71645: LD_VAR 0 5
71649: PUSH
71650: LD_INT 1
71652: ARRAY
71653: PPUSH
71654: LD_VAR 0 5
71658: PUSH
71659: LD_INT 2
71661: ARRAY
71662: PPUSH
71663: CALL_OW 111
// end ;
71667: LD_VAR 0 3
71671: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71672: LD_INT 0
71674: PPUSH
71675: PPUSH
71676: PPUSH
// uc_side = 0 ;
71677: LD_ADDR_OWVAR 20
71681: PUSH
71682: LD_INT 0
71684: ST_TO_ADDR
// uc_nation = 0 ;
71685: LD_ADDR_OWVAR 21
71689: PUSH
71690: LD_INT 0
71692: ST_TO_ADDR
// InitHc ;
71693: CALL_OW 19
// InitVc ;
71697: CALL_OW 20
// if mastodonts then
71701: LD_VAR 0 6
71705: IFFALSE 71772
// for i = 1 to mastodonts do
71707: LD_ADDR_VAR 0 11
71711: PUSH
71712: DOUBLE
71713: LD_INT 1
71715: DEC
71716: ST_TO_ADDR
71717: LD_VAR 0 6
71721: PUSH
71722: FOR_TO
71723: IFFALSE 71770
// begin vc_chassis := 31 ;
71725: LD_ADDR_OWVAR 37
71729: PUSH
71730: LD_INT 31
71732: ST_TO_ADDR
// vc_control := control_rider ;
71733: LD_ADDR_OWVAR 38
71737: PUSH
71738: LD_INT 4
71740: ST_TO_ADDR
// animal := CreateVehicle ;
71741: LD_ADDR_VAR 0 12
71745: PUSH
71746: CALL_OW 45
71750: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71751: LD_VAR 0 12
71755: PPUSH
71756: LD_VAR 0 8
71760: PPUSH
71761: LD_INT 0
71763: PPUSH
71764: CALL 73841 0 3
// end ;
71768: GO 71722
71770: POP
71771: POP
// if horses then
71772: LD_VAR 0 5
71776: IFFALSE 71843
// for i = 1 to horses do
71778: LD_ADDR_VAR 0 11
71782: PUSH
71783: DOUBLE
71784: LD_INT 1
71786: DEC
71787: ST_TO_ADDR
71788: LD_VAR 0 5
71792: PUSH
71793: FOR_TO
71794: IFFALSE 71841
// begin hc_class := 21 ;
71796: LD_ADDR_OWVAR 28
71800: PUSH
71801: LD_INT 21
71803: ST_TO_ADDR
// hc_gallery :=  ;
71804: LD_ADDR_OWVAR 33
71808: PUSH
71809: LD_STRING 
71811: ST_TO_ADDR
// animal := CreateHuman ;
71812: LD_ADDR_VAR 0 12
71816: PUSH
71817: CALL_OW 44
71821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71822: LD_VAR 0 12
71826: PPUSH
71827: LD_VAR 0 8
71831: PPUSH
71832: LD_INT 0
71834: PPUSH
71835: CALL 73841 0 3
// end ;
71839: GO 71793
71841: POP
71842: POP
// if birds then
71843: LD_VAR 0 1
71847: IFFALSE 71914
// for i = 1 to birds do
71849: LD_ADDR_VAR 0 11
71853: PUSH
71854: DOUBLE
71855: LD_INT 1
71857: DEC
71858: ST_TO_ADDR
71859: LD_VAR 0 1
71863: PUSH
71864: FOR_TO
71865: IFFALSE 71912
// begin hc_class = 18 ;
71867: LD_ADDR_OWVAR 28
71871: PUSH
71872: LD_INT 18
71874: ST_TO_ADDR
// hc_gallery =  ;
71875: LD_ADDR_OWVAR 33
71879: PUSH
71880: LD_STRING 
71882: ST_TO_ADDR
// animal := CreateHuman ;
71883: LD_ADDR_VAR 0 12
71887: PUSH
71888: CALL_OW 44
71892: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71893: LD_VAR 0 12
71897: PPUSH
71898: LD_VAR 0 8
71902: PPUSH
71903: LD_INT 0
71905: PPUSH
71906: CALL 73841 0 3
// end ;
71910: GO 71864
71912: POP
71913: POP
// if tigers then
71914: LD_VAR 0 2
71918: IFFALSE 72002
// for i = 1 to tigers do
71920: LD_ADDR_VAR 0 11
71924: PUSH
71925: DOUBLE
71926: LD_INT 1
71928: DEC
71929: ST_TO_ADDR
71930: LD_VAR 0 2
71934: PUSH
71935: FOR_TO
71936: IFFALSE 72000
// begin hc_class = class_tiger ;
71938: LD_ADDR_OWVAR 28
71942: PUSH
71943: LD_INT 14
71945: ST_TO_ADDR
// hc_gallery =  ;
71946: LD_ADDR_OWVAR 33
71950: PUSH
71951: LD_STRING 
71953: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71954: LD_ADDR_OWVAR 35
71958: PUSH
71959: LD_INT 7
71961: NEG
71962: PPUSH
71963: LD_INT 7
71965: PPUSH
71966: CALL_OW 12
71970: ST_TO_ADDR
// animal := CreateHuman ;
71971: LD_ADDR_VAR 0 12
71975: PUSH
71976: CALL_OW 44
71980: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71981: LD_VAR 0 12
71985: PPUSH
71986: LD_VAR 0 8
71990: PPUSH
71991: LD_INT 0
71993: PPUSH
71994: CALL 73841 0 3
// end ;
71998: GO 71935
72000: POP
72001: POP
// if apemans then
72002: LD_VAR 0 3
72006: IFFALSE 72129
// for i = 1 to apemans do
72008: LD_ADDR_VAR 0 11
72012: PUSH
72013: DOUBLE
72014: LD_INT 1
72016: DEC
72017: ST_TO_ADDR
72018: LD_VAR 0 3
72022: PUSH
72023: FOR_TO
72024: IFFALSE 72127
// begin hc_class = class_apeman ;
72026: LD_ADDR_OWVAR 28
72030: PUSH
72031: LD_INT 12
72033: ST_TO_ADDR
// hc_gallery =  ;
72034: LD_ADDR_OWVAR 33
72038: PUSH
72039: LD_STRING 
72041: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
72042: LD_ADDR_OWVAR 35
72046: PUSH
72047: LD_INT 5
72049: NEG
72050: PPUSH
72051: LD_INT 5
72053: PPUSH
72054: CALL_OW 12
72058: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72059: LD_ADDR_OWVAR 31
72063: PUSH
72064: LD_INT 1
72066: PPUSH
72067: LD_INT 3
72069: PPUSH
72070: CALL_OW 12
72074: PUSH
72075: LD_INT 1
72077: PPUSH
72078: LD_INT 3
72080: PPUSH
72081: CALL_OW 12
72085: PUSH
72086: LD_INT 0
72088: PUSH
72089: LD_INT 0
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: ST_TO_ADDR
// animal := CreateHuman ;
72098: LD_ADDR_VAR 0 12
72102: PUSH
72103: CALL_OW 44
72107: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72108: LD_VAR 0 12
72112: PPUSH
72113: LD_VAR 0 8
72117: PPUSH
72118: LD_INT 0
72120: PPUSH
72121: CALL 73841 0 3
// end ;
72125: GO 72023
72127: POP
72128: POP
// if enchidnas then
72129: LD_VAR 0 4
72133: IFFALSE 72200
// for i = 1 to enchidnas do
72135: LD_ADDR_VAR 0 11
72139: PUSH
72140: DOUBLE
72141: LD_INT 1
72143: DEC
72144: ST_TO_ADDR
72145: LD_VAR 0 4
72149: PUSH
72150: FOR_TO
72151: IFFALSE 72198
// begin hc_class = 13 ;
72153: LD_ADDR_OWVAR 28
72157: PUSH
72158: LD_INT 13
72160: ST_TO_ADDR
// hc_gallery =  ;
72161: LD_ADDR_OWVAR 33
72165: PUSH
72166: LD_STRING 
72168: ST_TO_ADDR
// animal := CreateHuman ;
72169: LD_ADDR_VAR 0 12
72173: PUSH
72174: CALL_OW 44
72178: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72179: LD_VAR 0 12
72183: PPUSH
72184: LD_VAR 0 8
72188: PPUSH
72189: LD_INT 0
72191: PPUSH
72192: CALL 73841 0 3
// end ;
72196: GO 72150
72198: POP
72199: POP
// if fishes then
72200: LD_VAR 0 7
72204: IFFALSE 72271
// for i = 1 to fishes do
72206: LD_ADDR_VAR 0 11
72210: PUSH
72211: DOUBLE
72212: LD_INT 1
72214: DEC
72215: ST_TO_ADDR
72216: LD_VAR 0 7
72220: PUSH
72221: FOR_TO
72222: IFFALSE 72269
// begin hc_class = 20 ;
72224: LD_ADDR_OWVAR 28
72228: PUSH
72229: LD_INT 20
72231: ST_TO_ADDR
// hc_gallery =  ;
72232: LD_ADDR_OWVAR 33
72236: PUSH
72237: LD_STRING 
72239: ST_TO_ADDR
// animal := CreateHuman ;
72240: LD_ADDR_VAR 0 12
72244: PUSH
72245: CALL_OW 44
72249: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72250: LD_VAR 0 12
72254: PPUSH
72255: LD_VAR 0 9
72259: PPUSH
72260: LD_INT 0
72262: PPUSH
72263: CALL 73841 0 3
// end ;
72267: GO 72221
72269: POP
72270: POP
// end ;
72271: LD_VAR 0 10
72275: RET
// export function WantHeal ( sci , unit ) ; begin
72276: LD_INT 0
72278: PPUSH
// if GetTaskList ( sci ) > 0 then
72279: LD_VAR 0 1
72283: PPUSH
72284: CALL_OW 437
72288: PUSH
72289: LD_INT 0
72291: GREATER
72292: IFFALSE 72362
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72294: LD_VAR 0 1
72298: PPUSH
72299: CALL_OW 437
72303: PUSH
72304: LD_INT 1
72306: ARRAY
72307: PUSH
72308: LD_INT 1
72310: ARRAY
72311: PUSH
72312: LD_STRING l
72314: EQUAL
72315: PUSH
72316: LD_VAR 0 1
72320: PPUSH
72321: CALL_OW 437
72325: PUSH
72326: LD_INT 1
72328: ARRAY
72329: PUSH
72330: LD_INT 4
72332: ARRAY
72333: PUSH
72334: LD_VAR 0 2
72338: EQUAL
72339: AND
72340: IFFALSE 72352
// result := true else
72342: LD_ADDR_VAR 0 3
72346: PUSH
72347: LD_INT 1
72349: ST_TO_ADDR
72350: GO 72360
// result := false ;
72352: LD_ADDR_VAR 0 3
72356: PUSH
72357: LD_INT 0
72359: ST_TO_ADDR
// end else
72360: GO 72370
// result := false ;
72362: LD_ADDR_VAR 0 3
72366: PUSH
72367: LD_INT 0
72369: ST_TO_ADDR
// end ;
72370: LD_VAR 0 3
72374: RET
// export function HealTarget ( sci ) ; begin
72375: LD_INT 0
72377: PPUSH
// if not sci then
72378: LD_VAR 0 1
72382: NOT
72383: IFFALSE 72387
// exit ;
72385: GO 72452
// result := 0 ;
72387: LD_ADDR_VAR 0 2
72391: PUSH
72392: LD_INT 0
72394: ST_TO_ADDR
// if GetTaskList ( sci ) then
72395: LD_VAR 0 1
72399: PPUSH
72400: CALL_OW 437
72404: IFFALSE 72452
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72406: LD_VAR 0 1
72410: PPUSH
72411: CALL_OW 437
72415: PUSH
72416: LD_INT 1
72418: ARRAY
72419: PUSH
72420: LD_INT 1
72422: ARRAY
72423: PUSH
72424: LD_STRING l
72426: EQUAL
72427: IFFALSE 72452
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72429: LD_ADDR_VAR 0 2
72433: PUSH
72434: LD_VAR 0 1
72438: PPUSH
72439: CALL_OW 437
72443: PUSH
72444: LD_INT 1
72446: ARRAY
72447: PUSH
72448: LD_INT 4
72450: ARRAY
72451: ST_TO_ADDR
// end ;
72452: LD_VAR 0 2
72456: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72457: LD_INT 0
72459: PPUSH
72460: PPUSH
72461: PPUSH
72462: PPUSH
// if not base_units then
72463: LD_VAR 0 1
72467: NOT
72468: IFFALSE 72472
// exit ;
72470: GO 72559
// result := false ;
72472: LD_ADDR_VAR 0 2
72476: PUSH
72477: LD_INT 0
72479: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72480: LD_ADDR_VAR 0 5
72484: PUSH
72485: LD_VAR 0 1
72489: PPUSH
72490: LD_INT 21
72492: PUSH
72493: LD_INT 3
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: PPUSH
72500: CALL_OW 72
72504: ST_TO_ADDR
// if not tmp then
72505: LD_VAR 0 5
72509: NOT
72510: IFFALSE 72514
// exit ;
72512: GO 72559
// for i in tmp do
72514: LD_ADDR_VAR 0 3
72518: PUSH
72519: LD_VAR 0 5
72523: PUSH
72524: FOR_IN
72525: IFFALSE 72557
// begin result := EnemyInRange ( i , 22 ) ;
72527: LD_ADDR_VAR 0 2
72531: PUSH
72532: LD_VAR 0 3
72536: PPUSH
72537: LD_INT 22
72539: PPUSH
72540: CALL 70795 0 2
72544: ST_TO_ADDR
// if result then
72545: LD_VAR 0 2
72549: IFFALSE 72555
// exit ;
72551: POP
72552: POP
72553: GO 72559
// end ;
72555: GO 72524
72557: POP
72558: POP
// end ;
72559: LD_VAR 0 2
72563: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
72564: LD_INT 0
72566: PPUSH
72567: PPUSH
// if not units then
72568: LD_VAR 0 1
72572: NOT
72573: IFFALSE 72577
// exit ;
72575: GO 72647
// result := [ ] ;
72577: LD_ADDR_VAR 0 3
72581: PUSH
72582: EMPTY
72583: ST_TO_ADDR
// for i in units do
72584: LD_ADDR_VAR 0 4
72588: PUSH
72589: LD_VAR 0 1
72593: PUSH
72594: FOR_IN
72595: IFFALSE 72645
// if GetTag ( i ) = tag then
72597: LD_VAR 0 4
72601: PPUSH
72602: CALL_OW 110
72606: PUSH
72607: LD_VAR 0 2
72611: EQUAL
72612: IFFALSE 72643
// result := Insert ( result , result + 1 , i ) ;
72614: LD_ADDR_VAR 0 3
72618: PUSH
72619: LD_VAR 0 3
72623: PPUSH
72624: LD_VAR 0 3
72628: PUSH
72629: LD_INT 1
72631: PLUS
72632: PPUSH
72633: LD_VAR 0 4
72637: PPUSH
72638: CALL_OW 2
72642: ST_TO_ADDR
72643: GO 72594
72645: POP
72646: POP
// end ;
72647: LD_VAR 0 3
72651: RET
// export function IsDriver ( un ) ; begin
72652: LD_INT 0
72654: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72655: LD_ADDR_VAR 0 2
72659: PUSH
72660: LD_VAR 0 1
72664: PUSH
72665: LD_INT 55
72667: PUSH
72668: EMPTY
72669: LIST
72670: PPUSH
72671: CALL_OW 69
72675: IN
72676: ST_TO_ADDR
// end ;
72677: LD_VAR 0 2
72681: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72682: LD_INT 0
72684: PPUSH
72685: PPUSH
// list := [ ] ;
72686: LD_ADDR_VAR 0 5
72690: PUSH
72691: EMPTY
72692: ST_TO_ADDR
// case d of 0 :
72693: LD_VAR 0 3
72697: PUSH
72698: LD_INT 0
72700: DOUBLE
72701: EQUAL
72702: IFTRUE 72706
72704: GO 72839
72706: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72707: LD_ADDR_VAR 0 5
72711: PUSH
72712: LD_VAR 0 1
72716: PUSH
72717: LD_INT 4
72719: MINUS
72720: PUSH
72721: LD_VAR 0 2
72725: PUSH
72726: LD_INT 4
72728: MINUS
72729: PUSH
72730: LD_INT 2
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: LIST
72737: PUSH
72738: LD_VAR 0 1
72742: PUSH
72743: LD_INT 3
72745: MINUS
72746: PUSH
72747: LD_VAR 0 2
72751: PUSH
72752: LD_INT 1
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: LIST
72759: PUSH
72760: LD_VAR 0 1
72764: PUSH
72765: LD_INT 4
72767: PLUS
72768: PUSH
72769: LD_VAR 0 2
72773: PUSH
72774: LD_INT 4
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: LIST
72781: PUSH
72782: LD_VAR 0 1
72786: PUSH
72787: LD_INT 3
72789: PLUS
72790: PUSH
72791: LD_VAR 0 2
72795: PUSH
72796: LD_INT 3
72798: PLUS
72799: PUSH
72800: LD_INT 5
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: LIST
72807: PUSH
72808: LD_VAR 0 1
72812: PUSH
72813: LD_VAR 0 2
72817: PUSH
72818: LD_INT 4
72820: PLUS
72821: PUSH
72822: LD_INT 0
72824: PUSH
72825: EMPTY
72826: LIST
72827: LIST
72828: LIST
72829: PUSH
72830: EMPTY
72831: LIST
72832: LIST
72833: LIST
72834: LIST
72835: LIST
72836: ST_TO_ADDR
// end ; 1 :
72837: GO 73537
72839: LD_INT 1
72841: DOUBLE
72842: EQUAL
72843: IFTRUE 72847
72845: GO 72980
72847: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72848: LD_ADDR_VAR 0 5
72852: PUSH
72853: LD_VAR 0 1
72857: PUSH
72858: LD_VAR 0 2
72862: PUSH
72863: LD_INT 4
72865: MINUS
72866: PUSH
72867: LD_INT 3
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: LIST
72874: PUSH
72875: LD_VAR 0 1
72879: PUSH
72880: LD_INT 3
72882: MINUS
72883: PUSH
72884: LD_VAR 0 2
72888: PUSH
72889: LD_INT 3
72891: MINUS
72892: PUSH
72893: LD_INT 2
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: LIST
72900: PUSH
72901: LD_VAR 0 1
72905: PUSH
72906: LD_INT 4
72908: MINUS
72909: PUSH
72910: LD_VAR 0 2
72914: PUSH
72915: LD_INT 1
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: LIST
72922: PUSH
72923: LD_VAR 0 1
72927: PUSH
72928: LD_VAR 0 2
72932: PUSH
72933: LD_INT 3
72935: PLUS
72936: PUSH
72937: LD_INT 0
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: LIST
72944: PUSH
72945: LD_VAR 0 1
72949: PUSH
72950: LD_INT 4
72952: PLUS
72953: PUSH
72954: LD_VAR 0 2
72958: PUSH
72959: LD_INT 4
72961: PLUS
72962: PUSH
72963: LD_INT 5
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: LIST
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: LIST
72975: LIST
72976: LIST
72977: ST_TO_ADDR
// end ; 2 :
72978: GO 73537
72980: LD_INT 2
72982: DOUBLE
72983: EQUAL
72984: IFTRUE 72988
72986: GO 73117
72988: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72989: LD_ADDR_VAR 0 5
72993: PUSH
72994: LD_VAR 0 1
72998: PUSH
72999: LD_VAR 0 2
73003: PUSH
73004: LD_INT 3
73006: MINUS
73007: PUSH
73008: LD_INT 3
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: LIST
73015: PUSH
73016: LD_VAR 0 1
73020: PUSH
73021: LD_INT 4
73023: PLUS
73024: PUSH
73025: LD_VAR 0 2
73029: PUSH
73030: LD_INT 4
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: LIST
73037: PUSH
73038: LD_VAR 0 1
73042: PUSH
73043: LD_VAR 0 2
73047: PUSH
73048: LD_INT 4
73050: PLUS
73051: PUSH
73052: LD_INT 0
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: LIST
73059: PUSH
73060: LD_VAR 0 1
73064: PUSH
73065: LD_INT 3
73067: MINUS
73068: PUSH
73069: LD_VAR 0 2
73073: PUSH
73074: LD_INT 1
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: LIST
73081: PUSH
73082: LD_VAR 0 1
73086: PUSH
73087: LD_INT 4
73089: MINUS
73090: PUSH
73091: LD_VAR 0 2
73095: PUSH
73096: LD_INT 4
73098: MINUS
73099: PUSH
73100: LD_INT 2
73102: PUSH
73103: EMPTY
73104: LIST
73105: LIST
73106: LIST
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: ST_TO_ADDR
// end ; 3 :
73115: GO 73537
73117: LD_INT 3
73119: DOUBLE
73120: EQUAL
73121: IFTRUE 73125
73123: GO 73258
73125: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73126: LD_ADDR_VAR 0 5
73130: PUSH
73131: LD_VAR 0 1
73135: PUSH
73136: LD_INT 3
73138: PLUS
73139: PUSH
73140: LD_VAR 0 2
73144: PUSH
73145: LD_INT 4
73147: PUSH
73148: EMPTY
73149: LIST
73150: LIST
73151: LIST
73152: PUSH
73153: LD_VAR 0 1
73157: PUSH
73158: LD_INT 4
73160: PLUS
73161: PUSH
73162: LD_VAR 0 2
73166: PUSH
73167: LD_INT 4
73169: PLUS
73170: PUSH
73171: LD_INT 5
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: LIST
73178: PUSH
73179: LD_VAR 0 1
73183: PUSH
73184: LD_INT 4
73186: MINUS
73187: PUSH
73188: LD_VAR 0 2
73192: PUSH
73193: LD_INT 1
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: LIST
73200: PUSH
73201: LD_VAR 0 1
73205: PUSH
73206: LD_VAR 0 2
73210: PUSH
73211: LD_INT 4
73213: MINUS
73214: PUSH
73215: LD_INT 3
73217: PUSH
73218: EMPTY
73219: LIST
73220: LIST
73221: LIST
73222: PUSH
73223: LD_VAR 0 1
73227: PUSH
73228: LD_INT 3
73230: MINUS
73231: PUSH
73232: LD_VAR 0 2
73236: PUSH
73237: LD_INT 3
73239: MINUS
73240: PUSH
73241: LD_INT 2
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: LIST
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: ST_TO_ADDR
// end ; 4 :
73256: GO 73537
73258: LD_INT 4
73260: DOUBLE
73261: EQUAL
73262: IFTRUE 73266
73264: GO 73399
73266: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73267: LD_ADDR_VAR 0 5
73271: PUSH
73272: LD_VAR 0 1
73276: PUSH
73277: LD_VAR 0 2
73281: PUSH
73282: LD_INT 4
73284: PLUS
73285: PUSH
73286: LD_INT 0
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: LIST
73293: PUSH
73294: LD_VAR 0 1
73298: PUSH
73299: LD_INT 3
73301: PLUS
73302: PUSH
73303: LD_VAR 0 2
73307: PUSH
73308: LD_INT 3
73310: PLUS
73311: PUSH
73312: LD_INT 5
73314: PUSH
73315: EMPTY
73316: LIST
73317: LIST
73318: LIST
73319: PUSH
73320: LD_VAR 0 1
73324: PUSH
73325: LD_INT 4
73327: PLUS
73328: PUSH
73329: LD_VAR 0 2
73333: PUSH
73334: LD_INT 4
73336: PUSH
73337: EMPTY
73338: LIST
73339: LIST
73340: LIST
73341: PUSH
73342: LD_VAR 0 1
73346: PUSH
73347: LD_VAR 0 2
73351: PUSH
73352: LD_INT 3
73354: MINUS
73355: PUSH
73356: LD_INT 3
73358: PUSH
73359: EMPTY
73360: LIST
73361: LIST
73362: LIST
73363: PUSH
73364: LD_VAR 0 1
73368: PUSH
73369: LD_INT 4
73371: MINUS
73372: PUSH
73373: LD_VAR 0 2
73377: PUSH
73378: LD_INT 4
73380: MINUS
73381: PUSH
73382: LD_INT 2
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: LIST
73389: PUSH
73390: EMPTY
73391: LIST
73392: LIST
73393: LIST
73394: LIST
73395: LIST
73396: ST_TO_ADDR
// end ; 5 :
73397: GO 73537
73399: LD_INT 5
73401: DOUBLE
73402: EQUAL
73403: IFTRUE 73407
73405: GO 73536
73407: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73408: LD_ADDR_VAR 0 5
73412: PUSH
73413: LD_VAR 0 1
73417: PUSH
73418: LD_INT 4
73420: MINUS
73421: PUSH
73422: LD_VAR 0 2
73426: PUSH
73427: LD_INT 1
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: LIST
73434: PUSH
73435: LD_VAR 0 1
73439: PUSH
73440: LD_VAR 0 2
73444: PUSH
73445: LD_INT 4
73447: MINUS
73448: PUSH
73449: LD_INT 3
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: LIST
73456: PUSH
73457: LD_VAR 0 1
73461: PUSH
73462: LD_INT 4
73464: PLUS
73465: PUSH
73466: LD_VAR 0 2
73470: PUSH
73471: LD_INT 4
73473: PLUS
73474: PUSH
73475: LD_INT 5
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: LIST
73482: PUSH
73483: LD_VAR 0 1
73487: PUSH
73488: LD_INT 3
73490: PLUS
73491: PUSH
73492: LD_VAR 0 2
73496: PUSH
73497: LD_INT 4
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: LIST
73504: PUSH
73505: LD_VAR 0 1
73509: PUSH
73510: LD_VAR 0 2
73514: PUSH
73515: LD_INT 3
73517: PLUS
73518: PUSH
73519: LD_INT 0
73521: PUSH
73522: EMPTY
73523: LIST
73524: LIST
73525: LIST
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: LIST
73531: LIST
73532: LIST
73533: ST_TO_ADDR
// end ; end ;
73534: GO 73537
73536: POP
// result := list ;
73537: LD_ADDR_VAR 0 4
73541: PUSH
73542: LD_VAR 0 5
73546: ST_TO_ADDR
// end ;
73547: LD_VAR 0 4
73551: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73552: LD_INT 0
73554: PPUSH
73555: PPUSH
73556: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73557: LD_VAR 0 1
73561: NOT
73562: PUSH
73563: LD_VAR 0 2
73567: PUSH
73568: LD_INT 1
73570: PUSH
73571: LD_INT 2
73573: PUSH
73574: LD_INT 3
73576: PUSH
73577: LD_INT 4
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: IN
73586: NOT
73587: OR
73588: IFFALSE 73592
// exit ;
73590: GO 73684
// tmp := [ ] ;
73592: LD_ADDR_VAR 0 5
73596: PUSH
73597: EMPTY
73598: ST_TO_ADDR
// for i in units do
73599: LD_ADDR_VAR 0 4
73603: PUSH
73604: LD_VAR 0 1
73608: PUSH
73609: FOR_IN
73610: IFFALSE 73653
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73612: LD_ADDR_VAR 0 5
73616: PUSH
73617: LD_VAR 0 5
73621: PPUSH
73622: LD_VAR 0 5
73626: PUSH
73627: LD_INT 1
73629: PLUS
73630: PPUSH
73631: LD_VAR 0 4
73635: PPUSH
73636: LD_VAR 0 2
73640: PPUSH
73641: CALL_OW 259
73645: PPUSH
73646: CALL_OW 2
73650: ST_TO_ADDR
73651: GO 73609
73653: POP
73654: POP
// if not tmp then
73655: LD_VAR 0 5
73659: NOT
73660: IFFALSE 73664
// exit ;
73662: GO 73684
// result := SortListByListDesc ( units , tmp ) ;
73664: LD_ADDR_VAR 0 3
73668: PUSH
73669: LD_VAR 0 1
73673: PPUSH
73674: LD_VAR 0 5
73678: PPUSH
73679: CALL_OW 77
73683: ST_TO_ADDR
// end ;
73684: LD_VAR 0 3
73688: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73689: LD_INT 0
73691: PPUSH
73692: PPUSH
73693: PPUSH
// x := GetX ( building ) ;
73694: LD_ADDR_VAR 0 4
73698: PUSH
73699: LD_VAR 0 2
73703: PPUSH
73704: CALL_OW 250
73708: ST_TO_ADDR
// y := GetY ( building ) ;
73709: LD_ADDR_VAR 0 5
73713: PUSH
73714: LD_VAR 0 2
73718: PPUSH
73719: CALL_OW 251
73723: ST_TO_ADDR
// if GetTaskList ( unit ) then
73724: LD_VAR 0 1
73728: PPUSH
73729: CALL_OW 437
73733: IFFALSE 73828
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73735: LD_STRING e
73737: PUSH
73738: LD_VAR 0 1
73742: PPUSH
73743: CALL_OW 437
73747: PUSH
73748: LD_INT 1
73750: ARRAY
73751: PUSH
73752: LD_INT 1
73754: ARRAY
73755: EQUAL
73756: PUSH
73757: LD_VAR 0 4
73761: PUSH
73762: LD_VAR 0 1
73766: PPUSH
73767: CALL_OW 437
73771: PUSH
73772: LD_INT 1
73774: ARRAY
73775: PUSH
73776: LD_INT 2
73778: ARRAY
73779: EQUAL
73780: AND
73781: PUSH
73782: LD_VAR 0 5
73786: PUSH
73787: LD_VAR 0 1
73791: PPUSH
73792: CALL_OW 437
73796: PUSH
73797: LD_INT 1
73799: ARRAY
73800: PUSH
73801: LD_INT 3
73803: ARRAY
73804: EQUAL
73805: AND
73806: IFFALSE 73818
// result := true else
73808: LD_ADDR_VAR 0 3
73812: PUSH
73813: LD_INT 1
73815: ST_TO_ADDR
73816: GO 73826
// result := false ;
73818: LD_ADDR_VAR 0 3
73822: PUSH
73823: LD_INT 0
73825: ST_TO_ADDR
// end else
73826: GO 73836
// result := false ;
73828: LD_ADDR_VAR 0 3
73832: PUSH
73833: LD_INT 0
73835: ST_TO_ADDR
// end ;
73836: LD_VAR 0 3
73840: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73841: LD_INT 0
73843: PPUSH
73844: PPUSH
73845: PPUSH
73846: PPUSH
// if not unit or not area then
73847: LD_VAR 0 1
73851: NOT
73852: PUSH
73853: LD_VAR 0 2
73857: NOT
73858: OR
73859: IFFALSE 73863
// exit ;
73861: GO 74027
// tmp := AreaToList ( area , i ) ;
73863: LD_ADDR_VAR 0 6
73867: PUSH
73868: LD_VAR 0 2
73872: PPUSH
73873: LD_VAR 0 5
73877: PPUSH
73878: CALL_OW 517
73882: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73883: LD_ADDR_VAR 0 5
73887: PUSH
73888: DOUBLE
73889: LD_INT 1
73891: DEC
73892: ST_TO_ADDR
73893: LD_VAR 0 6
73897: PUSH
73898: LD_INT 1
73900: ARRAY
73901: PUSH
73902: FOR_TO
73903: IFFALSE 74025
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73905: LD_ADDR_VAR 0 7
73909: PUSH
73910: LD_VAR 0 6
73914: PUSH
73915: LD_INT 1
73917: ARRAY
73918: PUSH
73919: LD_VAR 0 5
73923: ARRAY
73924: PUSH
73925: LD_VAR 0 6
73929: PUSH
73930: LD_INT 2
73932: ARRAY
73933: PUSH
73934: LD_VAR 0 5
73938: ARRAY
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73944: LD_VAR 0 7
73948: PUSH
73949: LD_INT 1
73951: ARRAY
73952: PPUSH
73953: LD_VAR 0 7
73957: PUSH
73958: LD_INT 2
73960: ARRAY
73961: PPUSH
73962: CALL_OW 428
73966: PUSH
73967: LD_INT 0
73969: EQUAL
73970: IFFALSE 74023
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73972: LD_VAR 0 1
73976: PPUSH
73977: LD_VAR 0 7
73981: PUSH
73982: LD_INT 1
73984: ARRAY
73985: PPUSH
73986: LD_VAR 0 7
73990: PUSH
73991: LD_INT 2
73993: ARRAY
73994: PPUSH
73995: LD_VAR 0 3
73999: PPUSH
74000: CALL_OW 48
// result := IsPlaced ( unit ) ;
74004: LD_ADDR_VAR 0 4
74008: PUSH
74009: LD_VAR 0 1
74013: PPUSH
74014: CALL_OW 305
74018: ST_TO_ADDR
// exit ;
74019: POP
74020: POP
74021: GO 74027
// end ; end ;
74023: GO 73902
74025: POP
74026: POP
// end ;
74027: LD_VAR 0 4
74031: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74032: LD_INT 0
74034: PPUSH
74035: PPUSH
74036: PPUSH
// if not side or side > 8 then
74037: LD_VAR 0 1
74041: NOT
74042: PUSH
74043: LD_VAR 0 1
74047: PUSH
74048: LD_INT 8
74050: GREATER
74051: OR
74052: IFFALSE 74056
// exit ;
74054: GO 74243
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74056: LD_ADDR_VAR 0 4
74060: PUSH
74061: LD_INT 22
74063: PUSH
74064: LD_VAR 0 1
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: PUSH
74073: LD_INT 21
74075: PUSH
74076: LD_INT 3
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: PPUSH
74087: CALL_OW 69
74091: ST_TO_ADDR
// if not tmp then
74092: LD_VAR 0 4
74096: NOT
74097: IFFALSE 74101
// exit ;
74099: GO 74243
// enable_addtolog := true ;
74101: LD_ADDR_OWVAR 81
74105: PUSH
74106: LD_INT 1
74108: ST_TO_ADDR
// AddToLog ( [ ) ;
74109: LD_STRING [
74111: PPUSH
74112: CALL_OW 561
// for i in tmp do
74116: LD_ADDR_VAR 0 3
74120: PUSH
74121: LD_VAR 0 4
74125: PUSH
74126: FOR_IN
74127: IFFALSE 74234
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74129: LD_STRING [
74131: PUSH
74132: LD_VAR 0 3
74136: PPUSH
74137: CALL_OW 266
74141: STR
74142: PUSH
74143: LD_STRING , 
74145: STR
74146: PUSH
74147: LD_VAR 0 3
74151: PPUSH
74152: CALL_OW 250
74156: STR
74157: PUSH
74158: LD_STRING , 
74160: STR
74161: PUSH
74162: LD_VAR 0 3
74166: PPUSH
74167: CALL_OW 251
74171: STR
74172: PUSH
74173: LD_STRING , 
74175: STR
74176: PUSH
74177: LD_VAR 0 3
74181: PPUSH
74182: CALL_OW 254
74186: STR
74187: PUSH
74188: LD_STRING , 
74190: STR
74191: PUSH
74192: LD_VAR 0 3
74196: PPUSH
74197: LD_INT 1
74199: PPUSH
74200: CALL_OW 268
74204: STR
74205: PUSH
74206: LD_STRING , 
74208: STR
74209: PUSH
74210: LD_VAR 0 3
74214: PPUSH
74215: LD_INT 2
74217: PPUSH
74218: CALL_OW 268
74222: STR
74223: PUSH
74224: LD_STRING ],
74226: STR
74227: PPUSH
74228: CALL_OW 561
// end ;
74232: GO 74126
74234: POP
74235: POP
// AddToLog ( ]; ) ;
74236: LD_STRING ];
74238: PPUSH
74239: CALL_OW 561
// end ;
74243: LD_VAR 0 2
74247: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74248: LD_INT 0
74250: PPUSH
74251: PPUSH
74252: PPUSH
74253: PPUSH
74254: PPUSH
// if not area or not rate or not max then
74255: LD_VAR 0 1
74259: NOT
74260: PUSH
74261: LD_VAR 0 2
74265: NOT
74266: OR
74267: PUSH
74268: LD_VAR 0 4
74272: NOT
74273: OR
74274: IFFALSE 74278
// exit ;
74276: GO 74470
// while 1 do
74278: LD_INT 1
74280: IFFALSE 74470
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74282: LD_ADDR_VAR 0 9
74286: PUSH
74287: LD_VAR 0 1
74291: PPUSH
74292: LD_INT 1
74294: PPUSH
74295: CALL_OW 287
74299: PUSH
74300: LD_INT 10
74302: MUL
74303: ST_TO_ADDR
// r := rate / 10 ;
74304: LD_ADDR_VAR 0 7
74308: PUSH
74309: LD_VAR 0 2
74313: PUSH
74314: LD_INT 10
74316: DIVREAL
74317: ST_TO_ADDR
// time := 1 1$00 ;
74318: LD_ADDR_VAR 0 8
74322: PUSH
74323: LD_INT 2100
74325: ST_TO_ADDR
// if amount < min then
74326: LD_VAR 0 9
74330: PUSH
74331: LD_VAR 0 3
74335: LESS
74336: IFFALSE 74354
// r := r * 2 else
74338: LD_ADDR_VAR 0 7
74342: PUSH
74343: LD_VAR 0 7
74347: PUSH
74348: LD_INT 2
74350: MUL
74351: ST_TO_ADDR
74352: GO 74380
// if amount > max then
74354: LD_VAR 0 9
74358: PUSH
74359: LD_VAR 0 4
74363: GREATER
74364: IFFALSE 74380
// r := r / 2 ;
74366: LD_ADDR_VAR 0 7
74370: PUSH
74371: LD_VAR 0 7
74375: PUSH
74376: LD_INT 2
74378: DIVREAL
74379: ST_TO_ADDR
// time := time / r ;
74380: LD_ADDR_VAR 0 8
74384: PUSH
74385: LD_VAR 0 8
74389: PUSH
74390: LD_VAR 0 7
74394: DIVREAL
74395: ST_TO_ADDR
// if time < 0 then
74396: LD_VAR 0 8
74400: PUSH
74401: LD_INT 0
74403: LESS
74404: IFFALSE 74421
// time := time * - 1 ;
74406: LD_ADDR_VAR 0 8
74410: PUSH
74411: LD_VAR 0 8
74415: PUSH
74416: LD_INT 1
74418: NEG
74419: MUL
74420: ST_TO_ADDR
// wait ( time ) ;
74421: LD_VAR 0 8
74425: PPUSH
74426: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
74430: LD_INT 35
74432: PPUSH
74433: LD_INT 875
74435: PPUSH
74436: CALL_OW 12
74440: PPUSH
74441: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74445: LD_INT 1
74447: PPUSH
74448: LD_INT 5
74450: PPUSH
74451: CALL_OW 12
74455: PPUSH
74456: LD_VAR 0 1
74460: PPUSH
74461: LD_INT 1
74463: PPUSH
74464: CALL_OW 55
// end ;
74468: GO 74278
// end ;
74470: LD_VAR 0 5
74474: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74475: LD_INT 0
74477: PPUSH
74478: PPUSH
74479: PPUSH
74480: PPUSH
74481: PPUSH
74482: PPUSH
74483: PPUSH
74484: PPUSH
// if not turrets or not factories then
74485: LD_VAR 0 1
74489: NOT
74490: PUSH
74491: LD_VAR 0 2
74495: NOT
74496: OR
74497: IFFALSE 74501
// exit ;
74499: GO 74808
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74501: LD_ADDR_VAR 0 10
74505: PUSH
74506: LD_INT 5
74508: PUSH
74509: LD_INT 6
74511: PUSH
74512: EMPTY
74513: LIST
74514: LIST
74515: PUSH
74516: LD_INT 2
74518: PUSH
74519: LD_INT 4
74521: PUSH
74522: EMPTY
74523: LIST
74524: LIST
74525: PUSH
74526: LD_INT 3
74528: PUSH
74529: LD_INT 5
74531: PUSH
74532: EMPTY
74533: LIST
74534: LIST
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: LIST
74540: PUSH
74541: LD_INT 24
74543: PUSH
74544: LD_INT 25
74546: PUSH
74547: EMPTY
74548: LIST
74549: LIST
74550: PUSH
74551: LD_INT 23
74553: PUSH
74554: LD_INT 27
74556: PUSH
74557: EMPTY
74558: LIST
74559: LIST
74560: PUSH
74561: EMPTY
74562: LIST
74563: LIST
74564: PUSH
74565: LD_INT 42
74567: PUSH
74568: LD_INT 43
74570: PUSH
74571: EMPTY
74572: LIST
74573: LIST
74574: PUSH
74575: LD_INT 44
74577: PUSH
74578: LD_INT 46
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: PUSH
74585: LD_INT 45
74587: PUSH
74588: LD_INT 47
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: LIST
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: LIST
74604: ST_TO_ADDR
// result := [ ] ;
74605: LD_ADDR_VAR 0 3
74609: PUSH
74610: EMPTY
74611: ST_TO_ADDR
// for i in turrets do
74612: LD_ADDR_VAR 0 4
74616: PUSH
74617: LD_VAR 0 1
74621: PUSH
74622: FOR_IN
74623: IFFALSE 74806
// begin nat := GetNation ( i ) ;
74625: LD_ADDR_VAR 0 7
74629: PUSH
74630: LD_VAR 0 4
74634: PPUSH
74635: CALL_OW 248
74639: ST_TO_ADDR
// weapon := 0 ;
74640: LD_ADDR_VAR 0 8
74644: PUSH
74645: LD_INT 0
74647: ST_TO_ADDR
// if not nat then
74648: LD_VAR 0 7
74652: NOT
74653: IFFALSE 74657
// continue ;
74655: GO 74622
// for j in list [ nat ] do
74657: LD_ADDR_VAR 0 5
74661: PUSH
74662: LD_VAR 0 10
74666: PUSH
74667: LD_VAR 0 7
74671: ARRAY
74672: PUSH
74673: FOR_IN
74674: IFFALSE 74715
// if GetBWeapon ( i ) = j [ 1 ] then
74676: LD_VAR 0 4
74680: PPUSH
74681: CALL_OW 269
74685: PUSH
74686: LD_VAR 0 5
74690: PUSH
74691: LD_INT 1
74693: ARRAY
74694: EQUAL
74695: IFFALSE 74713
// begin weapon := j [ 2 ] ;
74697: LD_ADDR_VAR 0 8
74701: PUSH
74702: LD_VAR 0 5
74706: PUSH
74707: LD_INT 2
74709: ARRAY
74710: ST_TO_ADDR
// break ;
74711: GO 74715
// end ;
74713: GO 74673
74715: POP
74716: POP
// if not weapon then
74717: LD_VAR 0 8
74721: NOT
74722: IFFALSE 74726
// continue ;
74724: GO 74622
// for k in factories do
74726: LD_ADDR_VAR 0 6
74730: PUSH
74731: LD_VAR 0 2
74735: PUSH
74736: FOR_IN
74737: IFFALSE 74802
// begin weapons := AvailableWeaponList ( k ) ;
74739: LD_ADDR_VAR 0 9
74743: PUSH
74744: LD_VAR 0 6
74748: PPUSH
74749: CALL_OW 478
74753: ST_TO_ADDR
// if not weapons then
74754: LD_VAR 0 9
74758: NOT
74759: IFFALSE 74763
// continue ;
74761: GO 74736
// if weapon in weapons then
74763: LD_VAR 0 8
74767: PUSH
74768: LD_VAR 0 9
74772: IN
74773: IFFALSE 74800
// begin result := [ i , weapon ] ;
74775: LD_ADDR_VAR 0 3
74779: PUSH
74780: LD_VAR 0 4
74784: PUSH
74785: LD_VAR 0 8
74789: PUSH
74790: EMPTY
74791: LIST
74792: LIST
74793: ST_TO_ADDR
// exit ;
74794: POP
74795: POP
74796: POP
74797: POP
74798: GO 74808
// end ; end ;
74800: GO 74736
74802: POP
74803: POP
// end ;
74804: GO 74622
74806: POP
74807: POP
// end ;
74808: LD_VAR 0 3
74812: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74813: LD_INT 0
74815: PPUSH
// if not side or side > 8 then
74816: LD_VAR 0 3
74820: NOT
74821: PUSH
74822: LD_VAR 0 3
74826: PUSH
74827: LD_INT 8
74829: GREATER
74830: OR
74831: IFFALSE 74835
// exit ;
74833: GO 74894
// if not range then
74835: LD_VAR 0 4
74839: NOT
74840: IFFALSE 74851
// range := - 12 ;
74842: LD_ADDR_VAR 0 4
74846: PUSH
74847: LD_INT 12
74849: NEG
74850: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74851: LD_VAR 0 1
74855: PPUSH
74856: LD_VAR 0 2
74860: PPUSH
74861: LD_VAR 0 3
74865: PPUSH
74866: LD_VAR 0 4
74870: PPUSH
74871: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74875: LD_VAR 0 1
74879: PPUSH
74880: LD_VAR 0 2
74884: PPUSH
74885: LD_VAR 0 3
74889: PPUSH
74890: CALL_OW 331
// end ;
74894: LD_VAR 0 5
74898: RET
// export function Video ( mode ) ; begin
74899: LD_INT 0
74901: PPUSH
// ingame_video = mode ;
74902: LD_ADDR_OWVAR 52
74906: PUSH
74907: LD_VAR 0 1
74911: ST_TO_ADDR
// interface_hidden = mode ;
74912: LD_ADDR_OWVAR 54
74916: PUSH
74917: LD_VAR 0 1
74921: ST_TO_ADDR
// end ;
74922: LD_VAR 0 2
74926: RET
// export function Join ( array , element ) ; begin
74927: LD_INT 0
74929: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74930: LD_ADDR_VAR 0 3
74934: PUSH
74935: LD_VAR 0 1
74939: PPUSH
74940: LD_VAR 0 1
74944: PUSH
74945: LD_INT 1
74947: PLUS
74948: PPUSH
74949: LD_VAR 0 2
74953: PPUSH
74954: CALL_OW 1
74958: ST_TO_ADDR
// end ;
74959: LD_VAR 0 3
74963: RET
// export function JoinUnion ( array , element ) ; begin
74964: LD_INT 0
74966: PPUSH
// result := array union element ;
74967: LD_ADDR_VAR 0 3
74971: PUSH
74972: LD_VAR 0 1
74976: PUSH
74977: LD_VAR 0 2
74981: UNION
74982: ST_TO_ADDR
// end ;
74983: LD_VAR 0 3
74987: RET
// export function GetBehemoths ( side ) ; begin
74988: LD_INT 0
74990: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74991: LD_ADDR_VAR 0 2
74995: PUSH
74996: LD_INT 22
74998: PUSH
74999: LD_VAR 0 1
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: PUSH
75008: LD_INT 31
75010: PUSH
75011: LD_INT 25
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: PUSH
75018: EMPTY
75019: LIST
75020: LIST
75021: PPUSH
75022: CALL_OW 69
75026: ST_TO_ADDR
// end ;
75027: LD_VAR 0 2
75031: RET
// export function Shuffle ( array ) ; var i , index ; begin
75032: LD_INT 0
75034: PPUSH
75035: PPUSH
75036: PPUSH
// result := [ ] ;
75037: LD_ADDR_VAR 0 2
75041: PUSH
75042: EMPTY
75043: ST_TO_ADDR
// if not array then
75044: LD_VAR 0 1
75048: NOT
75049: IFFALSE 75053
// exit ;
75051: GO 75152
// Randomize ;
75053: CALL_OW 10
// for i = array downto 1 do
75057: LD_ADDR_VAR 0 3
75061: PUSH
75062: DOUBLE
75063: LD_VAR 0 1
75067: INC
75068: ST_TO_ADDR
75069: LD_INT 1
75071: PUSH
75072: FOR_DOWNTO
75073: IFFALSE 75150
// begin index := rand ( 1 , array ) ;
75075: LD_ADDR_VAR 0 4
75079: PUSH
75080: LD_INT 1
75082: PPUSH
75083: LD_VAR 0 1
75087: PPUSH
75088: CALL_OW 12
75092: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75093: LD_ADDR_VAR 0 2
75097: PUSH
75098: LD_VAR 0 2
75102: PPUSH
75103: LD_VAR 0 2
75107: PUSH
75108: LD_INT 1
75110: PLUS
75111: PPUSH
75112: LD_VAR 0 1
75116: PUSH
75117: LD_VAR 0 4
75121: ARRAY
75122: PPUSH
75123: CALL_OW 2
75127: ST_TO_ADDR
// array := Delete ( array , index ) ;
75128: LD_ADDR_VAR 0 1
75132: PUSH
75133: LD_VAR 0 1
75137: PPUSH
75138: LD_VAR 0 4
75142: PPUSH
75143: CALL_OW 3
75147: ST_TO_ADDR
// end ;
75148: GO 75072
75150: POP
75151: POP
// end ;
75152: LD_VAR 0 2
75156: RET
// export function GetBaseMaterials ( base ) ; begin
75157: LD_INT 0
75159: PPUSH
// result := [ 0 , 0 , 0 ] ;
75160: LD_ADDR_VAR 0 2
75164: PUSH
75165: LD_INT 0
75167: PUSH
75168: LD_INT 0
75170: PUSH
75171: LD_INT 0
75173: PUSH
75174: EMPTY
75175: LIST
75176: LIST
75177: LIST
75178: ST_TO_ADDR
// if not base then
75179: LD_VAR 0 1
75183: NOT
75184: IFFALSE 75188
// exit ;
75186: GO 75237
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75188: LD_ADDR_VAR 0 2
75192: PUSH
75193: LD_VAR 0 1
75197: PPUSH
75198: LD_INT 1
75200: PPUSH
75201: CALL_OW 275
75205: PUSH
75206: LD_VAR 0 1
75210: PPUSH
75211: LD_INT 2
75213: PPUSH
75214: CALL_OW 275
75218: PUSH
75219: LD_VAR 0 1
75223: PPUSH
75224: LD_INT 3
75226: PPUSH
75227: CALL_OW 275
75231: PUSH
75232: EMPTY
75233: LIST
75234: LIST
75235: LIST
75236: ST_TO_ADDR
// end ;
75237: LD_VAR 0 2
75241: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75242: LD_INT 0
75244: PPUSH
75245: PPUSH
// result := array ;
75246: LD_ADDR_VAR 0 3
75250: PUSH
75251: LD_VAR 0 1
75255: ST_TO_ADDR
// if size > 0 then
75256: LD_VAR 0 2
75260: PUSH
75261: LD_INT 0
75263: GREATER
75264: IFFALSE 75310
// for i := array downto size do
75266: LD_ADDR_VAR 0 4
75270: PUSH
75271: DOUBLE
75272: LD_VAR 0 1
75276: INC
75277: ST_TO_ADDR
75278: LD_VAR 0 2
75282: PUSH
75283: FOR_DOWNTO
75284: IFFALSE 75308
// result := Delete ( result , result ) ;
75286: LD_ADDR_VAR 0 3
75290: PUSH
75291: LD_VAR 0 3
75295: PPUSH
75296: LD_VAR 0 3
75300: PPUSH
75301: CALL_OW 3
75305: ST_TO_ADDR
75306: GO 75283
75308: POP
75309: POP
// end ;
75310: LD_VAR 0 3
75314: RET
// export function ComExit ( unit ) ; var tmp ; begin
75315: LD_INT 0
75317: PPUSH
75318: PPUSH
// if not IsInUnit ( unit ) then
75319: LD_VAR 0 1
75323: PPUSH
75324: CALL_OW 310
75328: NOT
75329: IFFALSE 75333
// exit ;
75331: GO 75393
// tmp := IsInUnit ( unit ) ;
75333: LD_ADDR_VAR 0 3
75337: PUSH
75338: LD_VAR 0 1
75342: PPUSH
75343: CALL_OW 310
75347: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75348: LD_VAR 0 3
75352: PPUSH
75353: CALL_OW 247
75357: PUSH
75358: LD_INT 2
75360: EQUAL
75361: IFFALSE 75374
// ComExitVehicle ( unit ) else
75363: LD_VAR 0 1
75367: PPUSH
75368: CALL_OW 121
75372: GO 75383
// ComExitBuilding ( unit ) ;
75374: LD_VAR 0 1
75378: PPUSH
75379: CALL_OW 122
// result := tmp ;
75383: LD_ADDR_VAR 0 2
75387: PUSH
75388: LD_VAR 0 3
75392: ST_TO_ADDR
// end ;
75393: LD_VAR 0 2
75397: RET
// export function ResetHc ; begin
75398: LD_INT 0
75400: PPUSH
// InitHc ;
75401: CALL_OW 19
// hc_importance := 0 ;
75405: LD_ADDR_OWVAR 32
75409: PUSH
75410: LD_INT 0
75412: ST_TO_ADDR
// end ;
75413: LD_VAR 0 1
75417: RET
