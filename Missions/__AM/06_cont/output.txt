// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 ] [ Difficulty ] ;
 177: LD_ADDR_EXP 48
 181: PUSH
 182: LD_INT 3
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: LD_INT 6
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: LIST
 195: PUSH
 196: LD_OWVAR 67
 200: ARRAY
 201: ST_TO_ADDR
// sendedConvoys = 0 ;
 202: LD_ADDR_EXP 39
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// tamedApemans = 0 ;
 210: LD_ADDR_EXP 32
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ignoreTarget := [ ] ;
 218: LD_ADDR_EXP 45
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// arrivals := [ ] ;
 225: LD_ADDR_EXP 46
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// unitLost = 0 ;
 232: LD_ADDR_EXP 30
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 240: LD_ADDR_EXP 31
 244: PUSH
 245: EMPTY
 246: ST_TO_ADDR
// russianTanks = [ ] ;
 247: LD_ADDR_EXP 36
 251: PUSH
 252: EMPTY
 253: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 254: LD_ADDR_EXP 37
 258: PUSH
 259: EMPTY
 260: ST_TO_ADDR
// disableHealAI = 0 ;
 261: LD_ADDR_EXP 33
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// strings = [ ] ;
 269: LD_ADDR_EXP 27
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 276: LD_INT 4
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: CALL_OW 343
// PrepareDifficulty ;
 286: CALL 6634 0 0
// CreateNature ;
 290: CALL 23921 0 0
// PrepareRussian ;
 294: CALL 5857 0 0
// PrepareVehicles ;
 298: CALL 1629 0 0
// PrepareHeroes ;
 302: CALL 594 0 0
// PrepareOthers ;
 306: CALL 2050 0 0
// PreparePlayerApemans ;
 310: CALL 2192 0 0
// end ;
 314: END
// every 0 0$1 trigger debugMode do var i ;
 315: LD_EXP 42
 319: IFFALSE 546
 321: GO 323
 323: DISABLE
 324: LD_INT 0
 326: PPUSH
// begin enable ;
 327: ENABLE
// fogoff ( true ) ;
 328: LD_INT 1
 330: PPUSH
 331: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 21
 352: PUSH
 353: LD_INT 1
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 386
// SetLives ( i , 1000 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: LD_INT 1000
 379: PPUSH
 380: CALL_OW 234
 384: GO 369
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 30
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: PUSH
 422: FOR_IN
 423: IFFALSE 447
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 425: LD_VAR 0 1
 429: PPUSH
 430: CALL_OW 274
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_INT 9999
 440: PPUSH
 441: CALL_OW 277
 445: GO 422
 447: POP
 448: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 449: LD_ADDR_VAR 0 1
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// if IsSelected ( rudepo ) then
 510: LD_INT 2
 512: PPUSH
 513: CALL_OW 306
 517: IFFALSE 527
// your_side = 3 ;
 519: LD_ADDR_OWVAR 2
 523: PUSH
 524: LD_INT 3
 526: ST_TO_ADDR
// if IsSelected ( JMM ) then
 527: LD_EXP 1
 531: PPUSH
 532: CALL_OW 306
 536: IFFALSE 546
// your_side = 1 ;
 538: LD_ADDR_OWVAR 2
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// end ;
 546: PPOPN 1
 548: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 34
 561: PUSH
 562: LD_INT 12
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: LD_INT 3
 580: GREATEREQUAL
 581: IFFALSE 593
 583: GO 585
 585: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 586: LD_STRING ACH_FULLCARGO
 588: PPUSH
 589: CALL_OW 543
 593: END
// export function PrepareHeroes ; var veh ; begin
 594: LD_INT 0
 596: PPUSH
 597: PPUSH
// uc_side = 1 ;
 598: LD_ADDR_OWVAR 20
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// uc_nation = 1 ;
 606: LD_ADDR_OWVAR 21
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 614: LD_ADDR_EXP 1
 618: PUSH
 619: LD_STRING JMM
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: LD_EXP 44
 629: PPUSH
 630: CALL 41797 0 3
 634: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 635: LD_ADDR_EXP 14
 639: PUSH
 640: LD_STRING Harisson
 642: PPUSH
 643: LD_INT 0
 645: PPUSH
 646: LD_STRING 
 648: PPUSH
 649: CALL 41797 0 3
 653: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING DeltaDoctor
 661: PPUSH
 662: CALL_OW 34
 666: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 667: LD_ADDR_VAR 0 2
 671: PUSH
 672: LD_INT 22
 674: PUSH
 675: LD_INT 1
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: PUSH
 682: LD_INT 21
 684: PUSH
 685: LD_INT 2
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: LD_INT 58
 694: PUSH
 695: EMPTY
 696: LIST
 697: PUSH
 698: EMPTY
 699: LIST
 700: LIST
 701: LIST
 702: PPUSH
 703: CALL_OW 69
 707: ST_TO_ADDR
// if veh > 0 then
 708: LD_VAR 0 2
 712: PUSH
 713: LD_INT 0
 715: GREATER
 716: IFFALSE 738
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_VAR 0 2
 727: PUSH
 728: LD_INT 1
 730: ARRAY
 731: PPUSH
 732: CALL_OW 52
// end else
 736: GO 753
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_INT 2
 745: PPUSH
 746: LD_INT 0
 748: PPUSH
 749: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 753: LD_STRING LisaIn06
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 30
 763: PUSH
 764: LD_INT 1
 766: EQUAL
 767: IFFALSE 876
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 769: LD_ADDR_VAR 0 2
 773: PUSH
 774: LD_INT 22
 776: PUSH
 777: LD_INT 1
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 21
 786: PUSH
 787: LD_INT 2
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 58
 796: PUSH
 797: EMPTY
 798: LIST
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PPUSH
 805: CALL_OW 69
 809: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 810: LD_ADDR_EXP 2
 814: PUSH
 815: LD_STRING Lisa
 817: PPUSH
 818: LD_INT 1
 820: PPUSH
 821: LD_EXP 44
 825: PPUSH
 826: CALL 41797 0 3
 830: ST_TO_ADDR
// if veh > 0 then
 831: LD_VAR 0 2
 835: PUSH
 836: LD_INT 0
 838: GREATER
 839: IFFALSE 861
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 841: LD_EXP 2
 845: PPUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: PPUSH
 855: CALL_OW 52
// end else
 859: GO 876
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 861: LD_EXP 2
 865: PPUSH
 866: LD_INT 2
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 876: LD_STRING BobbyIn06
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL_OW 30
 886: PUSH
 887: LD_INT 1
 889: EQUAL
 890: IFFALSE 999
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: LD_INT 22
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 21
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: LD_INT 58
 919: PUSH
 920: EMPTY
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PPUSH
 928: CALL_OW 69
 932: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 933: LD_ADDR_EXP 3
 937: PUSH
 938: LD_STRING Bobby
 940: PPUSH
 941: LD_INT 1
 943: PPUSH
 944: LD_EXP 44
 948: PPUSH
 949: CALL 41797 0 3
 953: ST_TO_ADDR
// if veh > 0 then
 954: LD_VAR 0 2
 958: PUSH
 959: LD_INT 0
 961: GREATER
 962: IFFALSE 984
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 964: LD_EXP 3
 968: PPUSH
 969: LD_VAR 0 2
 973: PUSH
 974: LD_INT 1
 976: ARRAY
 977: PPUSH
 978: CALL_OW 52
// end else
 982: GO 999
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 984: LD_EXP 3
 988: PPUSH
 989: LD_INT 2
 991: PPUSH
 992: LD_INT 0
 994: PPUSH
 995: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 999: LD_STRING CyrusIn06
1001: PPUSH
1002: LD_INT 0
1004: PPUSH
1005: CALL_OW 30
1009: PUSH
1010: LD_INT 1
1012: EQUAL
1013: IFFALSE 1122
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1015: LD_ADDR_VAR 0 2
1019: PUSH
1020: LD_INT 22
1022: PUSH
1023: LD_INT 1
1025: PUSH
1026: EMPTY
1027: LIST
1028: LIST
1029: PUSH
1030: LD_INT 21
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: PUSH
1040: LD_INT 58
1042: PUSH
1043: EMPTY
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: PPUSH
1051: CALL_OW 69
1055: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1056: LD_ADDR_EXP 4
1060: PUSH
1061: LD_STRING Cyrus
1063: PPUSH
1064: LD_INT 1
1066: PPUSH
1067: LD_EXP 44
1071: PPUSH
1072: CALL 41797 0 3
1076: ST_TO_ADDR
// if veh > 0 then
1077: LD_VAR 0 2
1081: PUSH
1082: LD_INT 0
1084: GREATER
1085: IFFALSE 1107
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1087: LD_EXP 4
1091: PPUSH
1092: LD_VAR 0 2
1096: PUSH
1097: LD_INT 1
1099: ARRAY
1100: PPUSH
1101: CALL_OW 52
// end else
1105: GO 1122
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1107: LD_EXP 4
1111: PPUSH
1112: LD_INT 2
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1122: LD_STRING FrankIn06
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL_OW 30
1132: PUSH
1133: LD_INT 1
1135: EQUAL
1136: IFFALSE 1245
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1138: LD_ADDR_VAR 0 2
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 21
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 58
1165: PUSH
1166: EMPTY
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: PPUSH
1174: CALL_OW 69
1178: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
1179: LD_ADDR_EXP 5
1183: PUSH
1184: LD_STRING Frank
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: LD_EXP 44
1194: PPUSH
1195: CALL 41797 0 3
1199: ST_TO_ADDR
// if veh > 0 then
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 0
1207: GREATER
1208: IFFALSE 1230
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1210: LD_EXP 5
1214: PPUSH
1215: LD_VAR 0 2
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 52
// end else
1228: GO 1245
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1230: LD_EXP 5
1234: PPUSH
1235: LD_INT 2
1237: PPUSH
1238: LD_INT 0
1240: PPUSH
1241: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1245: LD_STRING BrownIn06
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: CALL_OW 30
1255: PUSH
1256: LD_INT 1
1258: EQUAL
1259: IFFALSE 1368
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_INT 22
1268: PUSH
1269: LD_INT 1
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: LD_INT 21
1278: PUSH
1279: LD_INT 2
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: LD_INT 58
1288: PUSH
1289: EMPTY
1290: LIST
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: LIST
1296: PPUSH
1297: CALL_OW 69
1301: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1302: LD_ADDR_EXP 6
1306: PUSH
1307: LD_STRING Brown
1309: PPUSH
1310: LD_INT 1
1312: PPUSH
1313: LD_EXP 44
1317: PPUSH
1318: CALL 41797 0 3
1322: ST_TO_ADDR
// if veh > 0 then
1323: LD_VAR 0 2
1327: PUSH
1328: LD_INT 0
1330: GREATER
1331: IFFALSE 1353
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1333: LD_EXP 6
1337: PPUSH
1338: LD_VAR 0 2
1342: PUSH
1343: LD_INT 1
1345: ARRAY
1346: PPUSH
1347: CALL_OW 52
// end else
1351: GO 1368
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1353: LD_EXP 6
1357: PPUSH
1358: LD_INT 2
1360: PPUSH
1361: LD_INT 0
1363: PPUSH
1364: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1368: LD_STRING DonaldsonIn06
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 30
1378: PUSH
1379: LD_INT 1
1381: EQUAL
1382: IFFALSE 1491
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: LD_INT 22
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 2
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: LD_INT 58
1411: PUSH
1412: EMPTY
1413: LIST
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: PPUSH
1420: CALL_OW 69
1424: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1425: LD_ADDR_EXP 7
1429: PUSH
1430: LD_STRING Donaldson
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: LD_EXP 44
1440: PPUSH
1441: CALL 41797 0 3
1445: ST_TO_ADDR
// if veh > 0 then
1446: LD_VAR 0 2
1450: PUSH
1451: LD_INT 0
1453: GREATER
1454: IFFALSE 1476
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1456: LD_EXP 7
1460: PPUSH
1461: LD_VAR 0 2
1465: PUSH
1466: LD_INT 1
1468: ARRAY
1469: PPUSH
1470: CALL_OW 52
// end else
1474: GO 1491
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1476: LD_EXP 7
1480: PPUSH
1481: LD_INT 2
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1491: LD_STRING GladstoneIn06
1493: PPUSH
1494: LD_INT 0
1496: PPUSH
1497: CALL_OW 30
1501: PUSH
1502: LD_INT 1
1504: EQUAL
1505: IFFALSE 1614
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 22
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 21
1524: PUSH
1525: LD_INT 2
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 58
1534: PUSH
1535: EMPTY
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: PPUSH
1543: CALL_OW 69
1547: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
1548: LD_ADDR_EXP 8
1552: PUSH
1553: LD_STRING Gladstone
1555: PPUSH
1556: LD_INT 1
1558: PPUSH
1559: LD_EXP 44
1563: PPUSH
1564: CALL 41797 0 3
1568: ST_TO_ADDR
// if veh > 0 then
1569: LD_VAR 0 2
1573: PUSH
1574: LD_INT 0
1576: GREATER
1577: IFFALSE 1599
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1579: LD_EXP 8
1583: PPUSH
1584: LD_VAR 0 2
1588: PUSH
1589: LD_INT 1
1591: ARRAY
1592: PPUSH
1593: CALL_OW 52
// end else
1597: GO 1614
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1599: LD_EXP 8
1603: PPUSH
1604: LD_INT 2
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1614: LD_INT 66
1616: PPUSH
1617: LD_INT 4
1619: PPUSH
1620: CALL_OW 86
// end ;
1624: LD_VAR 0 1
1628: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1629: LD_INT 0
1631: PPUSH
1632: PPUSH
1633: PPUSH
1634: PPUSH
1635: PPUSH
1636: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1637: LD_ADDR_VAR 0 5
1641: PUSH
1642: LD_STRING 06_VehiclesIn06_1
1644: PPUSH
1645: EMPTY
1646: PPUSH
1647: CALL_OW 30
1651: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1652: LD_ADDR_EXP 40
1656: PUSH
1657: LD_STRING 06_ResourcesInCargo06_1
1659: PPUSH
1660: EMPTY
1661: PPUSH
1662: CALL_OW 30
1666: ST_TO_ADDR
// cargoList = [ ] ;
1667: LD_ADDR_VAR 0 6
1671: PUSH
1672: EMPTY
1673: ST_TO_ADDR
// uc_side = 1 ;
1674: LD_ADDR_OWVAR 20
1678: PUSH
1679: LD_INT 1
1681: ST_TO_ADDR
// if vehicles > 0 then
1682: LD_VAR 0 5
1686: PUSH
1687: LD_INT 0
1689: GREATER
1690: IFFALSE 2045
// begin for i := 1 to vehicles do
1692: LD_ADDR_VAR 0 2
1696: PUSH
1697: DOUBLE
1698: LD_INT 1
1700: DEC
1701: ST_TO_ADDR
1702: LD_VAR 0 5
1706: PUSH
1707: FOR_TO
1708: IFFALSE 1857
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1710: LD_ADDR_OWVAR 21
1714: PUSH
1715: LD_VAR 0 5
1719: PUSH
1720: LD_VAR 0 2
1724: ARRAY
1725: PUSH
1726: LD_INT 1
1728: ARRAY
1729: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1730: LD_ADDR_OWVAR 37
1734: PUSH
1735: LD_VAR 0 5
1739: PUSH
1740: LD_VAR 0 2
1744: ARRAY
1745: PUSH
1746: LD_INT 2
1748: ARRAY
1749: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1750: LD_ADDR_OWVAR 39
1754: PUSH
1755: LD_VAR 0 5
1759: PUSH
1760: LD_VAR 0 2
1764: ARRAY
1765: PUSH
1766: LD_INT 3
1768: ARRAY
1769: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1770: LD_ADDR_OWVAR 38
1774: PUSH
1775: LD_VAR 0 5
1779: PUSH
1780: LD_VAR 0 2
1784: ARRAY
1785: PUSH
1786: LD_INT 4
1788: ARRAY
1789: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1790: LD_ADDR_OWVAR 40
1794: PUSH
1795: LD_VAR 0 5
1799: PUSH
1800: LD_VAR 0 2
1804: ARRAY
1805: PUSH
1806: LD_INT 5
1808: ARRAY
1809: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1810: LD_ADDR_OWVAR 41
1814: PUSH
1815: LD_INT 40
1817: ST_TO_ADDR
// veh = CreateVehicle ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: CALL_OW 45
1827: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1828: LD_VAR 0 4
1832: PPUSH
1833: LD_INT 3
1835: PPUSH
1836: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1840: LD_VAR 0 4
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: LD_INT 0
1850: PPUSH
1851: CALL_OW 49
// end ;
1855: GO 1707
1857: POP
1858: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1859: LD_ADDR_VAR 0 6
1863: PUSH
1864: LD_INT 22
1866: PUSH
1867: LD_INT 1
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 21
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 34
1886: PUSH
1887: LD_INT 12
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PPUSH
1899: CALL_OW 69
1903: ST_TO_ADDR
// if cargoList > 0 then
1904: LD_VAR 0 6
1908: PUSH
1909: LD_INT 0
1911: GREATER
1912: IFFALSE 2045
// for i = 1 to cargoList do
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: DOUBLE
1920: LD_INT 1
1922: DEC
1923: ST_TO_ADDR
1924: LD_VAR 0 6
1928: PUSH
1929: FOR_TO
1930: IFFALSE 2043
// begin if resources > 0 then
1932: LD_EXP 40
1936: PUSH
1937: LD_INT 0
1939: GREATER
1940: IFFALSE 2041
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1942: LD_VAR 0 6
1946: PUSH
1947: LD_VAR 0 2
1951: ARRAY
1952: PPUSH
1953: LD_INT 1
1955: PPUSH
1956: LD_EXP 40
1960: PUSH
1961: LD_VAR 0 2
1965: ARRAY
1966: PUSH
1967: LD_INT 1
1969: ARRAY
1970: PPUSH
1971: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1975: LD_VAR 0 6
1979: PUSH
1980: LD_VAR 0 2
1984: ARRAY
1985: PPUSH
1986: LD_INT 2
1988: PPUSH
1989: LD_EXP 40
1993: PUSH
1994: LD_VAR 0 2
1998: ARRAY
1999: PUSH
2000: LD_INT 2
2002: ARRAY
2003: PPUSH
2004: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
2008: LD_VAR 0 6
2012: PUSH
2013: LD_VAR 0 2
2017: ARRAY
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_EXP 40
2026: PUSH
2027: LD_VAR 0 2
2031: ARRAY
2032: PUSH
2033: LD_INT 3
2035: ARRAY
2036: PPUSH
2037: CALL_OW 291
// end ; end ;
2041: GO 1929
2043: POP
2044: POP
// end ; end ;
2045: LD_VAR 0 1
2049: RET
// export function PrepareOthers ; var i , veh ; begin
2050: LD_INT 0
2052: PPUSH
2053: PPUSH
2054: PPUSH
// uc_side = 1 ;
2055: LD_ADDR_OWVAR 20
2059: PUSH
2060: LD_INT 1
2062: ST_TO_ADDR
// uc_nation = 1 ;
2063: LD_ADDR_OWVAR 21
2067: PUSH
2068: LD_INT 1
2070: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2071: LD_ADDR_EXP 11
2075: PUSH
2076: LD_STRING OthersIn06
2078: PPUSH
2079: CALL_OW 31
2083: ST_TO_ADDR
// for i in others do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: LD_EXP 11
2093: PUSH
2094: FOR_IN
2095: IFFALSE 2185
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2097: LD_ADDR_VAR 0 3
2101: PUSH
2102: LD_INT 22
2104: PUSH
2105: LD_INT 1
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 21
2114: PUSH
2115: LD_INT 2
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 58
2124: PUSH
2125: EMPTY
2126: LIST
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL_OW 69
2137: ST_TO_ADDR
// if veh > 0 then
2138: LD_VAR 0 3
2142: PUSH
2143: LD_INT 0
2145: GREATER
2146: IFFALSE 2168
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2148: LD_VAR 0 2
2152: PPUSH
2153: LD_VAR 0 3
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: CALL_OW 52
// end else
2166: GO 2183
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2168: LD_VAR 0 2
2172: PPUSH
2173: LD_INT 2
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 49
// end ; end ;
2183: GO 2094
2185: POP
2186: POP
// end ;
2187: LD_VAR 0 1
2191: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2192: LD_INT 0
2194: PPUSH
2195: PPUSH
2196: PPUSH
// uc_side = 1 ;
2197: LD_ADDR_OWVAR 20
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// uc_nation = 0 ;
2205: LD_ADDR_OWVAR 21
2209: PUSH
2210: LD_INT 0
2212: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2213: LD_ADDR_EXP 12
2217: PUSH
2218: LD_STRING ApeIn06
2220: PPUSH
2221: CALL_OW 31
2225: ST_TO_ADDR
// for i in ape do
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: LD_EXP 12
2235: PUSH
2236: FOR_IN
2237: IFFALSE 2256
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2239: LD_VAR 0 2
2243: PPUSH
2244: LD_INT 2
2246: PPUSH
2247: LD_INT 0
2249: PPUSH
2250: CALL_OW 49
2254: GO 2236
2256: POP
2257: POP
// end ;
2258: LD_VAR 0 1
2262: RET
// export function PrepareDenis ; var xy , i ; begin
2263: LD_INT 0
2265: PPUSH
2266: PPUSH
2267: PPUSH
// uc_side = 4 ;
2268: LD_ADDR_OWVAR 20
2272: PUSH
2273: LD_INT 4
2275: ST_TO_ADDR
// uc_nation = 1 ;
2276: LD_ADDR_OWVAR 21
2280: PUSH
2281: LD_INT 1
2283: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2284: LD_ADDR_VAR 0 2
2288: PUSH
2289: LD_INT 63
2291: PUSH
2292: LD_INT 1
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: PUSH
2299: LD_INT 70
2301: PUSH
2302: LD_INT 1
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PUSH
2309: LD_INT 83
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 16
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 27
2331: PUSH
2332: LD_INT 1
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: PUSH
2339: LD_INT 38
2341: PUSH
2342: LD_INT 1
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 5
2351: PUSH
2352: LD_INT 1
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 54
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2379: LD_ADDR_EXP 9
2383: PUSH
2384: LD_STRING Denis
2386: PPUSH
2387: LD_INT 1
2389: PPUSH
2390: LD_EXP 44
2394: PPUSH
2395: CALL 41797 0 3
2399: ST_TO_ADDR
// for i = 1 to xy do
2400: LD_ADDR_VAR 0 3
2404: PUSH
2405: DOUBLE
2406: LD_INT 1
2408: DEC
2409: ST_TO_ADDR
2410: LD_VAR 0 2
2414: PUSH
2415: FOR_TO
2416: IFFALSE 2515
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2418: LD_VAR 0 2
2422: PUSH
2423: LD_VAR 0 3
2427: ARRAY
2428: PUSH
2429: LD_INT 1
2431: ARRAY
2432: PPUSH
2433: LD_VAR 0 2
2437: PUSH
2438: LD_VAR 0 3
2442: ARRAY
2443: PUSH
2444: LD_INT 2
2446: ARRAY
2447: PPUSH
2448: CALL_OW 428
2452: PUSH
2453: LD_INT 0
2455: EQUAL
2456: IFFALSE 2513
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2458: LD_EXP 9
2462: PPUSH
2463: LD_VAR 0 2
2467: PUSH
2468: LD_VAR 0 3
2472: ARRAY
2473: PUSH
2474: LD_INT 1
2476: ARRAY
2477: PPUSH
2478: LD_VAR 0 2
2482: PUSH
2483: LD_VAR 0 3
2487: ARRAY
2488: PUSH
2489: LD_INT 2
2491: ARRAY
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 48
// if IsPlaced ( Denis ) then
2500: LD_EXP 9
2504: PPUSH
2505: CALL_OW 305
2509: IFFALSE 2513
// break ;
2511: GO 2515
// end ;
2513: GO 2415
2515: POP
2516: POP
// SetClass ( Denis , 4 ) ;
2517: LD_EXP 9
2521: PPUSH
2522: LD_INT 4
2524: PPUSH
2525: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2529: LD_EXP 9
2533: PPUSH
2534: LD_INT 750
2536: PPUSH
2537: CALL_OW 234
// end ;
2541: LD_VAR 0 1
2545: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2546: LD_INT 0
2548: PPUSH
2549: PPUSH
2550: PPUSH
2551: PPUSH
2552: PPUSH
// area := HarrisonSupportArea ;
2553: LD_ADDR_VAR 0 4
2557: PUSH
2558: LD_INT 3
2560: ST_TO_ADDR
// dir := 2 ;
2561: LD_ADDR_VAR 0 5
2565: PUSH
2566: LD_INT 2
2568: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2569: LD_VAR 0 4
2573: PPUSH
2574: LD_INT 21
2576: PUSH
2577: LD_INT 3
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PPUSH
2584: CALL_OW 70
2588: IFFALSE 2606
// begin area := HarrisonSupportArea2 ;
2590: LD_ADDR_VAR 0 4
2594: PUSH
2595: LD_INT 31
2597: ST_TO_ADDR
// dir := 1 ;
2598: LD_ADDR_VAR 0 5
2602: PUSH
2603: LD_INT 1
2605: ST_TO_ADDR
// end ; uc_side = 1 ;
2606: LD_ADDR_OWVAR 20
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// uc_nation = 1 ;
2614: LD_ADDR_OWVAR 21
2618: PUSH
2619: LD_INT 1
2621: ST_TO_ADDR
// vc_engine = 1 ;
2622: LD_ADDR_OWVAR 39
2626: PUSH
2627: LD_INT 1
2629: ST_TO_ADDR
// vc_control = 1 ;
2630: LD_ADDR_OWVAR 38
2634: PUSH
2635: LD_INT 1
2637: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2638: LD_ADDR_OWVAR 40
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: LD_INT 2
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = 2 ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh = CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := 2 ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2825: LD_ADDR_EXP 17
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 17
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine = 1 ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control = 1 ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 3
2872: ST_TO_ADDR
// vc_chassis = 2 ;
2873: LD_ADDR_OWVAR 37
2877: PUSH
2878: LD_INT 2
2880: ST_TO_ADDR
// veh = CreateVehicle ;
2881: LD_ADDR_VAR 0 3
2885: PUSH
2886: CALL_OW 45
2890: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2891: LD_VAR 0 3
2895: PPUSH
2896: LD_VAR 0 5
2900: PPUSH
2901: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2905: LD_VAR 0 3
2909: PPUSH
2910: LD_VAR 0 4
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2922: LD_VAR 0 3
2926: PPUSH
2927: LD_INT 50
2929: PPUSH
2930: CALL_OW 240
// hc_class := 1 ;
2934: LD_ADDR_OWVAR 28
2938: PUSH
2939: LD_INT 1
2941: ST_TO_ADDR
// hc_sex := sex_female ;
2942: LD_ADDR_OWVAR 27
2946: PUSH
2947: LD_INT 2
2949: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2950: LD_ADDR_OWVAR 33
2954: PUSH
2955: LD_STRING SecondCharsGal
2957: ST_TO_ADDR
// hc_face_number := 45 ;
2958: LD_ADDR_OWVAR 34
2962: PUSH
2963: LD_INT 45
2965: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2966: LD_ADDR_OWVAR 29
2970: PUSH
2971: LD_INT 11
2973: PUSH
2974: LD_INT 10
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2981: LD_ADDR_OWVAR 26
2985: PUSH
2986: LD_STRING Ingrid Jonsson
2988: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2989: LD_ADDR_OWVAR 30
2993: PUSH
2994: LD_INT 1
2996: PUSH
2997: LD_INT 1
2999: PUSH
3000: LD_INT 0
3002: PUSH
3003: LD_INT 0
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: LIST
3010: LIST
3011: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3012: LD_ADDR_OWVAR 31
3016: PUSH
3017: LD_INT 3
3019: PUSH
3020: LD_INT 1
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: LD_INT 0
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3035: LD_ADDR_EXP 18
3039: PUSH
3040: CALL_OW 44
3044: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3045: LD_EXP 18
3049: PPUSH
3050: LD_VAR 0 3
3054: PPUSH
3055: CALL_OW 52
// end ;
3059: LD_VAR 0 1
3063: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3064: LD_INT 0
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3070: LD_ADDR_VAR 0 4
3074: PUSH
3075: LD_INT 22
3077: PUSH
3078: LD_INT 1
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PUSH
3085: LD_INT 23
3087: PUSH
3088: LD_INT 1
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PUSH
3095: LD_INT 26
3097: PUSH
3098: LD_INT 1
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: LIST
3109: PPUSH
3110: CALL_OW 69
3114: PUSH
3115: LD_EXP 3
3119: PUSH
3120: LD_EXP 4
3124: PUSH
3125: LD_EXP 8
3129: PUSH
3130: LD_EXP 9
3134: PUSH
3135: LD_EXP 5
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: DIFF
3147: ST_TO_ADDR
// for i in _tmp do
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 4
3157: PUSH
3158: FOR_IN
3159: IFFALSE 3200
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3161: LD_VAR 0 2
3165: PPUSH
3166: LD_INT 32
3168: PPUSH
3169: CALL_OW 308
3173: PUSH
3174: LD_VAR 0 2
3178: PPUSH
3179: CALL_OW 302
3183: AND
3184: IFFALSE 3198
// begin tmp := i ;
3186: LD_ADDR_VAR 0 3
3190: PUSH
3191: LD_VAR 0 2
3195: ST_TO_ADDR
// break ;
3196: GO 3200
// end ;
3198: GO 3158
3200: POP
3201: POP
// if not tmp then
3202: LD_VAR 0 3
3206: NOT
3207: IFFALSE 3219
// tmp := JMM ;
3209: LD_ADDR_VAR 0 3
3213: PUSH
3214: LD_EXP 1
3218: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3219: LD_INT 35
3221: PPUSH
3222: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 22 ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 20 ] ] ) ;
3226: LD_INT 81
3228: PUSH
3229: LD_INT 1
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 92
3238: PUSH
3239: LD_VAR 0 3
3243: PPUSH
3244: CALL_OW 250
3248: PUSH
3249: LD_VAR 0 3
3253: PPUSH
3254: CALL_OW 251
3258: PUSH
3259: LD_INT 22
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 69
3276: NOT
3277: PUSH
3278: LD_INT 22
3280: PUSH
3281: LD_INT 1
3283: PUSH
3284: EMPTY
3285: LIST
3286: LIST
3287: PUSH
3288: LD_INT 21
3290: PUSH
3291: LD_INT 3
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PUSH
3298: LD_INT 92
3300: PUSH
3301: LD_VAR 0 3
3305: PPUSH
3306: CALL_OW 250
3310: PUSH
3311: LD_VAR 0 3
3315: PPUSH
3316: CALL_OW 251
3320: PUSH
3321: LD_INT 20
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: LIST
3334: PPUSH
3335: CALL_OW 69
3339: AND
3340: IFFALSE 3219
// blockSpawn = 1 ;
3342: LD_ADDR_EXP 29
3346: PUSH
3347: LD_INT 1
3349: ST_TO_ADDR
// uc_side = 4 ;
3350: LD_ADDR_OWVAR 20
3354: PUSH
3355: LD_INT 4
3357: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3358: LD_ADDR_EXP 15
3362: PUSH
3363: LD_STRING Joan
3365: PPUSH
3366: LD_INT 0
3368: PPUSH
3369: LD_EXP 44
3373: PPUSH
3374: CALL 41797 0 3
3378: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3379: LD_EXP 15
3383: PPUSH
3384: LD_VAR 0 3
3388: PPUSH
3389: CALL_OW 250
3393: PPUSH
3394: LD_VAR 0 3
3398: PPUSH
3399: CALL_OW 251
3403: PPUSH
3404: LD_INT 5
3406: PPUSH
3407: LD_INT 1
3409: PPUSH
3410: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3414: LD_EXP 15
3418: PPUSH
3419: LD_INT 250
3421: PPUSH
3422: CALL_OW 234
// InGameOn ;
3426: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3430: LD_EXP 15
3434: PPUSH
3435: CALL_OW 87
// wait ( 0 0$2 ) ;
3439: LD_INT 70
3441: PPUSH
3442: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3446: LD_VAR 0 3
3450: PPUSH
3451: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3455: LD_VAR 0 3
3459: PPUSH
3460: CALL_OW 122
// wait ( 0 0$1 ) ;
3464: LD_INT 35
3466: PPUSH
3467: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3471: LD_VAR 0 3
3475: PPUSH
3476: LD_EXP 15
3480: PPUSH
3481: CALL_OW 112
// wait ( 0 0$2 ) ;
3485: LD_INT 70
3487: PPUSH
3488: CALL_OW 67
// DialogueOn ;
3492: CALL_OW 6
// if tmp = JMM then
3496: LD_VAR 0 3
3500: PUSH
3501: LD_EXP 1
3505: EQUAL
3506: IFFALSE 3655
// begin ComTurnUnit ( JMM , Joan ) ;
3508: LD_EXP 1
3512: PPUSH
3513: LD_EXP 15
3517: PPUSH
3518: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3522: LD_EXP 1
3526: PPUSH
3527: LD_STRING D5b-JMM-1
3529: PPUSH
3530: CALL_OW 88
// DialogueOff ;
3534: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3538: LD_EXP 15
3542: PPUSH
3543: LD_INT 500
3545: PPUSH
3546: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3550: LD_EXP 15
3554: PPUSH
3555: LD_EXP 1
3559: PPUSH
3560: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3564: LD_EXP 1
3568: PPUSH
3569: LD_EXP 15
3573: PPUSH
3574: CALL_OW 119
// wait ( 0 0$1 ) ;
3578: LD_INT 35
3580: PPUSH
3581: CALL_OW 67
// DialogueOn ;
3585: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3589: LD_EXP 15
3593: PPUSH
3594: LD_STRING D5b-Joan-1
3596: PPUSH
3597: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3601: LD_EXP 1
3605: PPUSH
3606: LD_STRING D5b-JMM-2
3608: PPUSH
3609: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3613: LD_EXP 15
3617: PPUSH
3618: LD_STRING D5b-Joan-2
3620: PPUSH
3621: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3625: LD_EXP 1
3629: PPUSH
3630: LD_STRING D5b-JMM-3
3632: PPUSH
3633: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3637: LD_EXP 15
3641: PPUSH
3642: LD_STRING D5b-Joan-3
3644: PPUSH
3645: CALL_OW 88
// DialogueOff ;
3649: CALL_OW 7
// end else
3653: GO 4029
// begin ComTurnUnit ( tmp , Joan ) ;
3655: LD_VAR 0 3
3659: PPUSH
3660: LD_EXP 15
3664: PPUSH
3665: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3669: LD_VAR 0 3
3673: PPUSH
3674: LD_STRING D5a-Sol1-1
3676: PPUSH
3677: CALL_OW 88
// DialogueOff ;
3681: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3685: LD_EXP 15
3689: PPUSH
3690: LD_INT 500
3692: PPUSH
3693: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3697: LD_EXP 15
3701: PPUSH
3702: LD_VAR 0 3
3706: PPUSH
3707: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3711: LD_VAR 0 3
3715: PPUSH
3716: LD_EXP 15
3720: PPUSH
3721: CALL_OW 119
// wait ( 0 0$1 ) ;
3725: LD_INT 35
3727: PPUSH
3728: CALL_OW 67
// DialogueOn ;
3732: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3736: LD_EXP 15
3740: PPUSH
3741: LD_STRING D5a-Joan-1
3743: PPUSH
3744: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3748: LD_VAR 0 3
3752: PPUSH
3753: LD_STRING D5a-Sol1-2
3755: PPUSH
3756: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3760: LD_EXP 15
3764: PPUSH
3765: LD_STRING D5a-Joan-2
3767: PPUSH
3768: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_STRING D5a-Sol1-3
3779: PPUSH
3780: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3784: LD_EXP 15
3788: PPUSH
3789: LD_STRING D5a-Joan-3
3791: PPUSH
3792: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3796: LD_VAR 0 3
3800: PPUSH
3801: LD_STRING D5a-Sol1-4
3803: PPUSH
3804: CALL_OW 88
// DialogueOff ;
3808: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3812: LD_EXP 1
3816: PUSH
3817: LD_INT 55
3819: PUSH
3820: EMPTY
3821: LIST
3822: PPUSH
3823: CALL_OW 69
3827: IN
3828: IFFALSE 3851
// begin ComMoveUnit ( JMM , Joan ) ;
3830: LD_EXP 1
3834: PPUSH
3835: LD_EXP 15
3839: PPUSH
3840: CALL_OW 112
// wait ( 0 0$05 ) ;
3844: LD_INT 175
3846: PPUSH
3847: CALL_OW 67
// end ; ComExitVehicle ( JMM ) ;
3851: LD_EXP 1
3855: PPUSH
3856: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3860: LD_EXP 1
3864: PPUSH
3865: CALL_OW 122
// wait ( 0 0$1 ) ;
3869: LD_INT 35
3871: PPUSH
3872: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3876: LD_INT 35
3878: PPUSH
3879: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3883: LD_EXP 15
3887: PUSH
3888: LD_VAR 0 3
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PPUSH
3897: LD_EXP 1
3901: PPUSH
3902: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3906: LD_EXP 15
3910: PPUSH
3911: LD_EXP 1
3915: PPUSH
3916: CALL_OW 296
3920: PUSH
3921: LD_INT 5
3923: LESS
3924: IFFALSE 3876
// ComTurnUnit ( Joan , JMM ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_EXP 1
3935: PPUSH
3936: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3940: LD_EXP 1
3944: PPUSH
3945: LD_EXP 15
3949: PPUSH
3950: CALL_OW 119
// wait ( 0 0$1 ) ;
3954: LD_INT 35
3956: PPUSH
3957: CALL_OW 67
// DialogueOn ;
3961: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3965: LD_EXP 15
3969: PPUSH
3970: LD_STRING D5a-Joan-4
3972: PPUSH
3973: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3977: LD_EXP 1
3981: PPUSH
3982: LD_STRING D5a-JMM-4
3984: PPUSH
3985: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3989: LD_EXP 15
3993: PPUSH
3994: LD_STRING D5a-Joan-5
3996: PPUSH
3997: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
4001: LD_EXP 1
4005: PPUSH
4006: LD_STRING D5a-JMM-5
4008: PPUSH
4009: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
4013: LD_EXP 15
4017: PPUSH
4018: LD_STRING D5a-Joan-6
4020: PPUSH
4021: CALL_OW 88
// DialogueOff ;
4025: CALL_OW 7
// end ; DialogueOn ;
4029: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4033: LD_EXP 1
4037: PPUSH
4038: LD_STRING D6-JMM-1
4040: PPUSH
4041: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4045: LD_EXP 15
4049: PPUSH
4050: LD_STRING D6-Joan-1
4052: PPUSH
4053: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4057: LD_EXP 1
4061: PPUSH
4062: LD_STRING D6-JMM-2
4064: PPUSH
4065: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4069: LD_EXP 15
4073: PPUSH
4074: LD_STRING D6-Joan-2
4076: PPUSH
4077: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4081: LD_EXP 1
4085: PPUSH
4086: LD_STRING D6-JMM-3
4088: PPUSH
4089: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4093: LD_EXP 15
4097: PPUSH
4098: LD_STRING D6-Joan-3
4100: PPUSH
4101: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4105: LD_EXP 1
4109: PPUSH
4110: LD_STRING D6-JMM-4
4112: PPUSH
4113: CALL_OW 88
// DialogueOff ;
4117: CALL_OW 7
// InGameOff ;
4121: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4125: LD_EXP 15
4129: PPUSH
4130: LD_INT 1
4132: PPUSH
4133: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4137: LD_STRING MJ
4139: PPUSH
4140: CALL_OW 337
// JoanStatus = 1 ;
4144: LD_ADDR_EXP 16
4148: PUSH
4149: LD_INT 1
4151: ST_TO_ADDR
// blockSpawn = 0 ;
4152: LD_ADDR_EXP 29
4156: PUSH
4157: LD_INT 0
4159: ST_TO_ADDR
// end ;
4160: LD_VAR 0 1
4164: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4165: LD_INT 0
4167: PPUSH
4168: PPUSH
// if not number or number > 8 then
4169: LD_VAR 0 1
4173: NOT
4174: PUSH
4175: LD_VAR 0 1
4179: PUSH
4180: LD_INT 8
4182: GREATER
4183: OR
4184: IFFALSE 4188
// exit ;
4186: GO 5752
// repeat wait ( 0 0$7 ) ;
4188: LD_INT 245
4190: PPUSH
4191: CALL_OW 67
// until blockSpawn = 0 ;
4195: LD_EXP 29
4199: PUSH
4200: LD_INT 0
4202: EQUAL
4203: IFFALSE 4188
// uc_side = 1 ;
4205: LD_ADDR_OWVAR 20
4209: PUSH
4210: LD_INT 1
4212: ST_TO_ADDR
// uc_nation = 1 ;
4213: LD_ADDR_OWVAR 21
4217: PUSH
4218: LD_INT 1
4220: ST_TO_ADDR
// InitHc ;
4221: CALL_OW 19
// if number = 1 then
4225: LD_VAR 0 1
4229: PUSH
4230: LD_INT 1
4232: EQUAL
4233: IFFALSE 4409
// begin hc_class := 3 ;
4235: LD_ADDR_OWVAR 28
4239: PUSH
4240: LD_INT 3
4242: ST_TO_ADDR
// hc_sex := sex_male ;
4243: LD_ADDR_OWVAR 27
4247: PUSH
4248: LD_INT 1
4250: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4251: LD_ADDR_OWVAR 33
4255: PUSH
4256: LD_STRING SecondCharsGal
4258: ST_TO_ADDR
// hc_face_number := 55 ;
4259: LD_ADDR_OWVAR 34
4263: PUSH
4264: LD_INT 55
4266: ST_TO_ADDR
// hc_name := George McCarthy ;
4267: LD_ADDR_OWVAR 26
4271: PUSH
4272: LD_STRING George McCarthy
4274: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4275: LD_ADDR_OWVAR 29
4279: PUSH
4280: LD_INT 11
4282: PUSH
4283: LD_INT 10
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4290: LD_ADDR_OWVAR 30
4294: PUSH
4295: LD_INT 0
4297: PUSH
4298: LD_INT 0
4300: PUSH
4301: LD_INT 2
4303: PUSH
4304: LD_INT 0
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4313: LD_ADDR_OWVAR 31
4317: PUSH
4318: LD_INT 1
4320: PUSH
4321: LD_INT 2
4323: PUSH
4324: LD_INT 3
4326: PUSH
4327: LD_INT 1
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: ST_TO_ADDR
// un = CreateHuman ;
4336: LD_ADDR_VAR 0 3
4340: PUSH
4341: CALL_OW 44
4345: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4346: LD_VAR 0 3
4350: PPUSH
4351: LD_INT 23
4353: PPUSH
4354: LD_INT 1
4356: PPUSH
4357: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: CALL_OW 87
// wait ( 0 0$1 ) ;
4370: LD_INT 35
4372: PPUSH
4373: CALL_OW 67
// DialogueOn ;
4377: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4381: LD_VAR 0 3
4385: PPUSH
4386: LD_STRING D11d-Sol4-1
4388: PPUSH
4389: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4393: LD_EXP 1
4397: PPUSH
4398: LD_STRING D11d-JMM-1
4400: PPUSH
4401: CALL_OW 88
// DialogueOff ;
4405: CALL_OW 7
// end ; if number = 2 then
4409: LD_VAR 0 1
4413: PUSH
4414: LD_INT 2
4416: EQUAL
4417: IFFALSE 4593
// begin hc_class := 1 ;
4419: LD_ADDR_OWVAR 28
4423: PUSH
4424: LD_INT 1
4426: ST_TO_ADDR
// hc_sex := sex_male ;
4427: LD_ADDR_OWVAR 27
4431: PUSH
4432: LD_INT 1
4434: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4435: LD_ADDR_OWVAR 33
4439: PUSH
4440: LD_STRING AmGalRemake
4442: ST_TO_ADDR
// hc_face_number := 7 ;
4443: LD_ADDR_OWVAR 34
4447: PUSH
4448: LD_INT 7
4450: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4451: LD_ADDR_OWVAR 26
4455: PUSH
4456: LD_STRING Bobby Jordan
4458: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4459: LD_ADDR_OWVAR 29
4463: PUSH
4464: LD_INT 9
4466: PUSH
4467: LD_INT 11
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4474: LD_ADDR_OWVAR 30
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: LD_INT 0
4484: PUSH
4485: LD_INT 0
4487: PUSH
4488: LD_INT 1
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4497: LD_ADDR_OWVAR 31
4501: PUSH
4502: LD_INT 2
4504: PUSH
4505: LD_INT 1
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: ST_TO_ADDR
// un = CreateHuman ;
4520: LD_ADDR_VAR 0 3
4524: PUSH
4525: CALL_OW 44
4529: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: LD_INT 24
4537: PPUSH
4538: LD_INT 1
4540: PPUSH
4541: CALL_OW 49
// wait ( 0 0$1 ) ;
4545: LD_INT 35
4547: PPUSH
4548: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4552: LD_VAR 0 3
4556: PPUSH
4557: CALL_OW 87
// DialogueOn ;
4561: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4565: LD_VAR 0 3
4569: PPUSH
4570: LD_STRING D11b-Sol3-1
4572: PPUSH
4573: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4577: LD_EXP 1
4581: PPUSH
4582: LD_STRING D11b-JMM-1
4584: PPUSH
4585: CALL_OW 88
// DialogueOff ;
4589: CALL_OW 7
// end ; if number = 3 then
4593: LD_VAR 0 1
4597: PUSH
4598: LD_INT 3
4600: EQUAL
4601: IFFALSE 4765
// begin hc_class := 1 ;
4603: LD_ADDR_OWVAR 28
4607: PUSH
4608: LD_INT 1
4610: ST_TO_ADDR
// hc_sex := sex_male ;
4611: LD_ADDR_OWVAR 27
4615: PUSH
4616: LD_INT 1
4618: ST_TO_ADDR
// hc_gallery := DJ ;
4619: LD_ADDR_OWVAR 33
4623: PUSH
4624: LD_STRING DJ
4626: ST_TO_ADDR
// hc_face_number := 1 ;
4627: LD_ADDR_OWVAR 34
4631: PUSH
4632: LD_INT 1
4634: ST_TO_ADDR
// hc_name := Darius Dajay ;
4635: LD_ADDR_OWVAR 26
4639: PUSH
4640: LD_STRING Darius Dajay
4642: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4643: LD_ADDR_OWVAR 29
4647: PUSH
4648: LD_INT 11
4650: PUSH
4651: LD_INT 11
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4658: LD_ADDR_OWVAR 30
4662: PUSH
4663: LD_INT 2
4665: PUSH
4666: LD_INT 0
4668: PUSH
4669: LD_INT 0
4671: PUSH
4672: LD_INT 0
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4681: LD_ADDR_OWVAR 31
4685: PUSH
4686: LD_INT 4
4688: PUSH
4689: LD_INT 0
4691: PUSH
4692: LD_INT 1
4694: PUSH
4695: LD_INT 0
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: ST_TO_ADDR
// un = CreateHuman ;
4704: LD_ADDR_VAR 0 3
4708: PUSH
4709: CALL_OW 44
4713: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4714: LD_VAR 0 3
4718: PPUSH
4719: LD_INT 25
4721: PPUSH
4722: LD_INT 1
4724: PPUSH
4725: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4729: LD_VAR 0 3
4733: PPUSH
4734: CALL_OW 87
// wait ( 0 0$1 ) ;
4738: LD_INT 35
4740: PPUSH
4741: CALL_OW 67
// DialogueOn ;
4745: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4749: LD_VAR 0 3
4753: PPUSH
4754: LD_STRING D11f-Sol5-1
4756: PPUSH
4757: CALL_OW 88
// DialogueOff ;
4761: CALL_OW 7
// end ; if number = 4 then
4765: LD_VAR 0 1
4769: PUSH
4770: LD_INT 4
4772: EQUAL
4773: IFFALSE 4910
// begin hc_class := 2 ;
4775: LD_ADDR_OWVAR 28
4779: PUSH
4780: LD_INT 2
4782: ST_TO_ADDR
// hc_sex := sex_female ;
4783: LD_ADDR_OWVAR 27
4787: PUSH
4788: LD_INT 2
4790: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4791: LD_ADDR_OWVAR 33
4795: PUSH
4796: LD_STRING SecondCharsGal
4798: ST_TO_ADDR
// hc_face_number := 46 ;
4799: LD_ADDR_OWVAR 34
4803: PUSH
4804: LD_INT 46
4806: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4807: LD_ADDR_OWVAR 26
4811: PUSH
4812: LD_STRING Sylvia Creak
4814: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4815: LD_ADDR_OWVAR 29
4819: PUSH
4820: LD_INT 10
4822: PUSH
4823: LD_INT 9
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4830: LD_ADDR_OWVAR 30
4834: PUSH
4835: LD_INT 0
4837: PUSH
4838: LD_INT 1
4840: PUSH
4841: LD_INT 1
4843: PUSH
4844: LD_INT 1
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4853: LD_ADDR_OWVAR 31
4857: PUSH
4858: LD_INT 1
4860: PUSH
4861: LD_INT 3
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: LD_INT 1
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: ST_TO_ADDR
// un = CreateHuman ;
4876: LD_ADDR_VAR 0 3
4880: PUSH
4881: CALL_OW 44
4885: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4886: LD_VAR 0 3
4890: PPUSH
4891: LD_INT 26
4893: PPUSH
4894: LD_INT 1
4896: PPUSH
4897: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4901: LD_VAR 0 3
4905: PPUSH
4906: CALL_OW 87
// end ; if number = 5 then
4910: LD_VAR 0 1
4914: PUSH
4915: LD_INT 5
4917: EQUAL
4918: IFFALSE 5094
// begin hc_class := 1 ;
4920: LD_ADDR_OWVAR 28
4924: PUSH
4925: LD_INT 1
4927: ST_TO_ADDR
// hc_sex := sex_female ;
4928: LD_ADDR_OWVAR 27
4932: PUSH
4933: LD_INT 2
4935: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4936: LD_ADDR_OWVAR 33
4940: PUSH
4941: LD_STRING SecondCharsGal
4943: ST_TO_ADDR
// hc_face_number := 37 ;
4944: LD_ADDR_OWVAR 34
4948: PUSH
4949: LD_INT 37
4951: ST_TO_ADDR
// hc_name := Malena Johnson ;
4952: LD_ADDR_OWVAR 26
4956: PUSH
4957: LD_STRING Malena Johnson
4959: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4960: LD_ADDR_OWVAR 29
4964: PUSH
4965: LD_INT 11
4967: PUSH
4968: LD_INT 10
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4975: LD_ADDR_OWVAR 30
4979: PUSH
4980: LD_INT 1
4982: PUSH
4983: LD_INT 1
4985: PUSH
4986: LD_INT 0
4988: PUSH
4989: LD_INT 0
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4998: LD_ADDR_OWVAR 31
5002: PUSH
5003: LD_INT 1
5005: PUSH
5006: LD_INT 1
5008: PUSH
5009: LD_INT 1
5011: PUSH
5012: LD_INT 1
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: ST_TO_ADDR
// un = CreateHuman ;
5021: LD_ADDR_VAR 0 3
5025: PUSH
5026: CALL_OW 44
5030: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
5031: LD_VAR 0 3
5035: PPUSH
5036: LD_INT 27
5038: PPUSH
5039: LD_INT 1
5041: PPUSH
5042: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5046: LD_VAR 0 3
5050: PPUSH
5051: CALL_OW 87
// wait ( 0 0$1 ) ;
5055: LD_INT 35
5057: PPUSH
5058: CALL_OW 67
// DialogueOn ;
5062: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5066: LD_VAR 0 3
5070: PPUSH
5071: LD_STRING D11c-FSol3-1
5073: PPUSH
5074: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5078: LD_EXP 1
5082: PPUSH
5083: LD_STRING D11c-JMM-1
5085: PPUSH
5086: CALL_OW 88
// DialogueOff ;
5090: CALL_OW 7
// end ; if number = 6 then
5094: LD_VAR 0 1
5098: PUSH
5099: LD_INT 6
5101: EQUAL
5102: IFFALSE 5276
// begin hc_class := 1 ;
5104: LD_ADDR_OWVAR 28
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// hc_sex := sex_male ;
5112: LD_ADDR_OWVAR 27
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5120: LD_ADDR_OWVAR 33
5124: PUSH
5125: LD_STRING AmGalRemake
5127: ST_TO_ADDR
// hc_face_number := 1 ;
5128: LD_ADDR_OWVAR 34
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// hc_name := Charles Brown ;
5136: LD_ADDR_OWVAR 26
5140: PUSH
5141: LD_STRING Charles Brown
5143: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5144: LD_ADDR_OWVAR 29
5148: PUSH
5149: LD_INT 12
5151: PUSH
5152: LD_INT 11
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5159: LD_ADDR_OWVAR 30
5163: PUSH
5164: LD_INT 2
5166: PUSH
5167: LD_INT 0
5169: PUSH
5170: LD_INT 0
5172: PUSH
5173: LD_INT 0
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5182: LD_ADDR_OWVAR 31
5186: PUSH
5187: LD_INT 3
5189: PUSH
5190: LD_INT 0
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: LD_INT 1
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: ST_TO_ADDR
// un = CreateHuman ;
5205: LD_ADDR_VAR 0 3
5209: PUSH
5210: CALL_OW 44
5214: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5215: LD_VAR 0 3
5219: PPUSH
5220: LD_INT 28
5222: PPUSH
5223: LD_INT 1
5225: PPUSH
5226: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5230: LD_VAR 0 3
5234: PPUSH
5235: CALL_OW 87
// wait ( 0 0$1 ) ;
5239: LD_INT 35
5241: PPUSH
5242: CALL_OW 67
// DialogueOn ;
5246: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5250: LD_VAR 0 3
5254: PPUSH
5255: LD_STRING D4-Sol1-5
5257: PPUSH
5258: CALL_OW 88
// DialogueOff ;
5262: CALL_OW 7
// tempCharles = un ;
5266: LD_ADDR_EXP 13
5270: PUSH
5271: LD_VAR 0 3
5275: ST_TO_ADDR
// end ; if number = 7 then
5276: LD_VAR 0 1
5280: PUSH
5281: LD_INT 7
5283: EQUAL
5284: IFFALSE 5556
// begin hc_class := 1 ;
5286: LD_ADDR_OWVAR 28
5290: PUSH
5291: LD_INT 1
5293: ST_TO_ADDR
// hc_sex := sex_female ;
5294: LD_ADDR_OWVAR 27
5298: PUSH
5299: LD_INT 2
5301: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5302: LD_ADDR_OWVAR 33
5306: PUSH
5307: LD_STRING AmGalRemake
5309: ST_TO_ADDR
// hc_face_number := 2 ;
5310: LD_ADDR_OWVAR 34
5314: PUSH
5315: LD_INT 2
5317: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5318: LD_ADDR_OWVAR 26
5322: PUSH
5323: LD_STRING Rebecca Macdonald
5325: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5326: LD_ADDR_OWVAR 29
5330: PUSH
5331: LD_INT 10
5333: PUSH
5334: LD_INT 10
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5341: LD_ADDR_OWVAR 30
5345: PUSH
5346: LD_INT 1
5348: PUSH
5349: LD_INT 0
5351: PUSH
5352: LD_INT 0
5354: PUSH
5355: LD_INT 1
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5364: LD_ADDR_OWVAR 31
5368: PUSH
5369: LD_INT 1
5371: PUSH
5372: LD_INT 0
5374: PUSH
5375: LD_INT 0
5377: PUSH
5378: LD_INT 1
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: ST_TO_ADDR
// un = CreateHuman ;
5387: LD_ADDR_VAR 0 3
5391: PUSH
5392: CALL_OW 44
5396: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 29
5404: PPUSH
5405: LD_INT 1
5407: PPUSH
5408: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5412: LD_VAR 0 3
5416: PPUSH
5417: CALL_OW 87
// wait ( 0 0$1 ) ;
5421: LD_INT 35
5423: PPUSH
5424: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5428: LD_INT 30
5430: PPUSH
5431: LD_INT 22
5433: PUSH
5434: LD_INT 3
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 70
5445: IFFALSE 5556
// begin DialogueOn ;
5447: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5451: LD_VAR 0 3
5455: PPUSH
5456: CALL_OW 250
5460: PPUSH
5461: LD_VAR 0 3
5465: PPUSH
5466: CALL_OW 251
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: LD_INT 15
5476: NEG
5477: PPUSH
5478: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 250
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 251
5501: PPUSH
5502: LD_INT 1
5504: PPUSH
5505: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5509: LD_VAR 0 3
5513: PPUSH
5514: LD_STRING D11a-FSol2-1
5516: PPUSH
5517: CALL_OW 88
// DialogueOff ;
5521: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5525: LD_INT 3
5527: PPUSH
5528: LD_VAR 0 3
5532: PPUSH
5533: CALL_OW 471
// wait ( 0 0$2 ) ;
5537: LD_INT 70
5539: PPUSH
5540: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5544: LD_INT 3
5546: PPUSH
5547: LD_VAR 0 3
5551: PPUSH
5552: CALL_OW 472
// end ; end ; if number = 8 then
5556: LD_VAR 0 1
5560: PUSH
5561: LD_INT 8
5563: EQUAL
5564: IFFALSE 5720
// begin hc_class := 1 ;
5566: LD_ADDR_OWVAR 28
5570: PUSH
5571: LD_INT 1
5573: ST_TO_ADDR
// hc_sex := sex_female ;
5574: LD_ADDR_OWVAR 27
5578: PUSH
5579: LD_INT 2
5581: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5582: LD_ADDR_OWVAR 33
5586: PUSH
5587: LD_STRING SecondCharsGal
5589: ST_TO_ADDR
// hc_face_number := 42 ;
5590: LD_ADDR_OWVAR 34
5594: PUSH
5595: LD_INT 42
5597: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5598: LD_ADDR_OWVAR 26
5602: PUSH
5603: LD_STRING Margherite Simpson
5605: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5606: LD_ADDR_OWVAR 29
5610: PUSH
5611: LD_INT 12
5613: PUSH
5614: LD_INT 10
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5621: LD_ADDR_OWVAR 30
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: LD_INT 2
5631: PUSH
5632: LD_INT 0
5634: PUSH
5635: LD_INT 0
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5644: LD_ADDR_OWVAR 31
5648: PUSH
5649: LD_INT 1
5651: PUSH
5652: LD_INT 2
5654: PUSH
5655: LD_INT 0
5657: PUSH
5658: LD_INT 1
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: ST_TO_ADDR
// un = CreateHuman ;
5667: LD_ADDR_VAR 0 3
5671: PUSH
5672: CALL_OW 44
5676: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5677: LD_VAR 0 3
5681: PPUSH
5682: LD_INT 33
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5692: LD_VAR 0 3
5696: PPUSH
5697: CALL_OW 87
// wait ( 0 0$1 ) ;
5701: LD_INT 35
5703: PPUSH
5704: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5708: LD_VAR 0 3
5712: PPUSH
5713: LD_STRING D11e-FSol4-1
5715: PPUSH
5716: CALL_OW 88
// end ; ignoreTarget := ignoreTarget union un ;
5720: LD_ADDR_EXP 45
5724: PUSH
5725: LD_EXP 45
5729: PUSH
5730: LD_VAR 0 3
5734: UNION
5735: ST_TO_ADDR
// arrivals := arrivals union un ;
5736: LD_ADDR_EXP 46
5740: PUSH
5741: LD_EXP 46
5745: PUSH
5746: LD_VAR 0 3
5750: UNION
5751: ST_TO_ADDR
// end ;
5752: LD_VAR 0 2
5756: RET
// every 0 0$1 do var i ;
5757: GO 5759
5759: DISABLE
5760: LD_INT 0
5762: PPUSH
// begin enable ;
5763: ENABLE
// if not ignoreTarget then
5764: LD_EXP 45
5768: NOT
5769: IFFALSE 5773
// exit ;
5771: GO 5854
// for i in ignoreTarget do
5773: LD_ADDR_VAR 0 1
5777: PUSH
5778: LD_EXP 45
5782: PUSH
5783: FOR_IN
5784: IFFALSE 5852
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5786: LD_INT 22
5788: PUSH
5789: LD_INT 1
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_INT 91
5798: PUSH
5799: LD_VAR 0 1
5803: PUSH
5804: LD_INT 10
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PPUSH
5816: CALL_OW 69
5820: PUSH
5821: LD_EXP 45
5825: DIFF
5826: PUSH
5827: LD_INT 1
5829: GREATER
5830: IFFALSE 5850
// begin ignoreTarget := ignoreTarget diff i ;
5832: LD_ADDR_EXP 45
5836: PUSH
5837: LD_EXP 45
5841: PUSH
5842: LD_VAR 0 1
5846: DIFF
5847: ST_TO_ADDR
// break ;
5848: GO 5852
// end ;
5850: GO 5783
5852: POP
5853: POP
// end ; end_of_file
5854: PPOPN 1
5856: END
// export function PrepareRussian ; var i ; begin
5857: LD_INT 0
5859: PPUSH
5860: PPUSH
// if Difficulty < 3 then
5861: LD_OWVAR 67
5865: PUSH
5866: LD_INT 3
5868: LESS
5869: IFFALSE 5886
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5871: LD_INT 130
5873: PPUSH
5874: LD_INT 81
5876: PPUSH
5877: CALL_OW 428
5881: PPUSH
5882: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5886: LD_INT 3
5888: PPUSH
5889: LD_INT 3
5891: PPUSH
5892: LD_INT 2
5894: PPUSH
5895: LD_EXP 34
5899: PPUSH
5900: LD_EXP 35
5904: PPUSH
5905: CALL_OW 12
5909: PPUSH
5910: LD_INT 2
5912: PPUSH
5913: LD_INT 4
5915: PPUSH
5916: CALL 6388 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5920: LD_INT 3
5922: PPUSH
5923: LD_INT 3
5925: PPUSH
5926: LD_INT 8
5928: PPUSH
5929: LD_EXP 34
5933: PPUSH
5934: LD_EXP 35
5938: PPUSH
5939: CALL_OW 12
5943: PPUSH
5944: LD_INT 1
5946: PPUSH
5947: LD_INT 4
5949: PPUSH
5950: CALL 6388 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5954: LD_INT 3
5956: PPUSH
5957: LD_INT 3
5959: PPUSH
5960: LD_INT 67
5962: PPUSH
5963: LD_EXP 34
5967: PPUSH
5968: LD_EXP 35
5972: PPUSH
5973: CALL_OW 12
5977: PPUSH
5978: LD_INT 1
5980: PPUSH
5981: LD_INT 2
5983: PPUSH
5984: CALL 6388 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5988: LD_INT 3
5990: PPUSH
5991: LD_INT 3
5993: PPUSH
5994: LD_INT 21
5996: PPUSH
5997: LD_EXP 34
6001: PPUSH
6002: LD_EXP 35
6006: PPUSH
6007: CALL_OW 12
6011: PPUSH
6012: LD_INT 3
6014: PPUSH
6015: LD_INT 6
6017: PPUSH
6018: CALL 6388 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
6022: LD_INT 3
6024: PPUSH
6025: LD_INT 3
6027: PPUSH
6028: LD_INT 17
6030: PPUSH
6031: LD_EXP 34
6035: PPUSH
6036: LD_EXP 35
6040: PPUSH
6041: CALL_OW 12
6045: PPUSH
6046: LD_INT 3
6048: PPUSH
6049: LD_INT 6
6051: PPUSH
6052: CALL 6388 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
6056: LD_INT 3
6058: PPUSH
6059: LD_INT 3
6061: PPUSH
6062: LD_INT 32
6064: PPUSH
6065: LD_EXP 34
6069: PPUSH
6070: LD_EXP 35
6074: PPUSH
6075: CALL_OW 12
6079: PPUSH
6080: LD_INT 4
6082: PPUSH
6083: LD_INT 2
6085: PPUSH
6086: CALL 6388 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6090: LD_ADDR_VAR 0 2
6094: PUSH
6095: LD_INT 22
6097: PUSH
6098: LD_INT 3
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PUSH
6105: LD_INT 21
6107: PUSH
6108: LD_INT 3
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PUSH
6115: LD_INT 30
6117: PUSH
6118: LD_INT 32
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL_OW 69
6134: PUSH
6135: FOR_IN
6136: IFFALSE 6176
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6138: LD_INT 3
6140: PPUSH
6141: LD_INT 3
6143: PPUSH
6144: LD_VAR 0 2
6148: PPUSH
6149: LD_EXP 34
6153: PPUSH
6154: LD_EXP 35
6158: PPUSH
6159: CALL_OW 12
6163: PPUSH
6164: LD_INT 1
6166: PPUSH
6167: LD_INT 1
6169: PPUSH
6170: CALL 6388 0 6
6174: GO 6135
6176: POP
6177: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
6178: LD_ADDR_VAR 0 2
6182: PUSH
6183: LD_INT 22
6185: PUSH
6186: LD_INT 3
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: LD_INT 21
6195: PUSH
6196: LD_INT 3
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: LD_INT 30
6205: PUSH
6206: LD_INT 31
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: LIST
6217: PPUSH
6218: CALL_OW 69
6222: PUSH
6223: FOR_IN
6224: IFFALSE 6252
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6226: LD_EXP 34
6230: PPUSH
6231: LD_EXP 35
6235: PPUSH
6236: CALL_OW 12
6240: PPUSH
6241: LD_VAR 0 2
6245: PPUSH
6246: CALL 6498 0 2
6250: GO 6223
6252: POP
6253: POP
// end ; end_of_file
6254: LD_VAR 0 1
6258: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6259: LD_INT 0
6261: PPUSH
6262: PPUSH
6263: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6264: LD_ADDR_VAR 0 6
6268: PUSH
6269: LD_VAR 0 1
6273: PUSH
6274: LD_INT 1
6276: PPUSH
6277: LD_VAR 0 1
6281: PPUSH
6282: CALL_OW 12
6286: ARRAY
6287: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6288: LD_VAR 0 6
6292: PPUSH
6293: CALL_OW 258
6297: PUSH
6298: LD_INT 1
6300: EQUAL
6301: IFFALSE 6319
// Say ( speaker , dialogMID ) else
6303: LD_VAR 0 6
6307: PPUSH
6308: LD_VAR 0 2
6312: PPUSH
6313: CALL_OW 88
6317: GO 6333
// Say ( speaker , dialogFID ) ;
6319: LD_VAR 0 6
6323: PPUSH
6324: LD_VAR 0 3
6328: PPUSH
6329: CALL_OW 88
// result := speaker ;
6333: LD_ADDR_VAR 0 4
6337: PUSH
6338: LD_VAR 0 6
6342: ST_TO_ADDR
// end ;
6343: LD_VAR 0 4
6347: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6348: LD_INT 0
6350: PPUSH
6351: PPUSH
// for i in charactersList do
6352: LD_ADDR_VAR 0 4
6356: PUSH
6357: LD_VAR 0 1
6361: PUSH
6362: FOR_IN
6363: IFFALSE 6381
// SaveCharacters ( i , ident ) ;
6365: LD_VAR 0 4
6369: PPUSH
6370: LD_VAR 0 2
6374: PPUSH
6375: CALL_OW 38
6379: GO 6362
6381: POP
6382: POP
// end ;
6383: LD_VAR 0 3
6387: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6388: LD_INT 0
6390: PPUSH
6391: PPUSH
6392: PPUSH
6393: PPUSH
// for i = 1 to count do
6394: LD_ADDR_VAR 0 8
6398: PUSH
6399: DOUBLE
6400: LD_INT 1
6402: DEC
6403: ST_TO_ADDR
6404: LD_VAR 0 6
6408: PUSH
6409: FOR_TO
6410: IFFALSE 6491
// begin uc_side = side ;
6412: LD_ADDR_OWVAR 20
6416: PUSH
6417: LD_VAR 0 1
6421: ST_TO_ADDR
// uc_nation = nation ;
6422: LD_ADDR_OWVAR 21
6426: PUSH
6427: LD_VAR 0 2
6431: ST_TO_ADDR
// hc_gallery =  ;
6432: LD_ADDR_OWVAR 33
6436: PUSH
6437: LD_STRING 
6439: ST_TO_ADDR
// hc_name =  ;
6440: LD_ADDR_OWVAR 26
6444: PUSH
6445: LD_STRING 
6447: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6448: LD_INT 0
6450: PPUSH
6451: LD_VAR 0 5
6455: PPUSH
6456: LD_VAR 0 4
6460: PPUSH
6461: CALL_OW 380
// un = CreateHuman ;
6465: LD_ADDR_VAR 0 10
6469: PUSH
6470: CALL_OW 44
6474: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6475: LD_VAR 0 10
6479: PPUSH
6480: LD_VAR 0 3
6484: PPUSH
6485: CALL_OW 52
// end ;
6489: GO 6409
6491: POP
6492: POP
// end ;
6493: LD_VAR 0 7
6497: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6498: LD_INT 0
6500: PPUSH
6501: PPUSH
6502: PPUSH
// uc_side := GetSide ( b ) ;
6503: LD_ADDR_OWVAR 20
6507: PUSH
6508: LD_VAR 0 2
6512: PPUSH
6513: CALL_OW 255
6517: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6518: LD_ADDR_OWVAR 21
6522: PUSH
6523: LD_VAR 0 2
6527: PPUSH
6528: CALL_OW 248
6532: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6533: LD_INT 0
6535: PPUSH
6536: LD_INT 1
6538: PPUSH
6539: LD_VAR 0 1
6543: PPUSH
6544: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6548: LD_ADDR_VAR 0 5
6552: PUSH
6553: LD_VAR 0 2
6557: PPUSH
6558: CALL_OW 254
6562: PUSH
6563: LD_INT 3
6565: MINUS
6566: ST_TO_ADDR
// if dir < 0 then
6567: LD_VAR 0 5
6571: PUSH
6572: LD_INT 0
6574: LESS
6575: IFFALSE 6591
// dir := 6 + dir ;
6577: LD_ADDR_VAR 0 5
6581: PUSH
6582: LD_INT 6
6584: PUSH
6585: LD_VAR 0 5
6589: PLUS
6590: ST_TO_ADDR
// un := CreateHuman ;
6591: LD_ADDR_VAR 0 4
6595: PUSH
6596: CALL_OW 44
6600: ST_TO_ADDR
// SetDir ( un , dir ) ;
6601: LD_VAR 0 4
6605: PPUSH
6606: LD_VAR 0 5
6610: PPUSH
6611: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6615: LD_VAR 0 4
6619: PPUSH
6620: LD_VAR 0 2
6624: PPUSH
6625: CALL_OW 52
// end ;
6629: LD_VAR 0 3
6633: RET
// export function PrepareDifficulty ; begin
6634: LD_INT 0
6636: PPUSH
// if Difficulty = 1 then
6637: LD_OWVAR 67
6641: PUSH
6642: LD_INT 1
6644: EQUAL
6645: IFFALSE 6663
// begin RuSolMinLevel = 2 ;
6647: LD_ADDR_EXP 34
6651: PUSH
6652: LD_INT 2
6654: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6655: LD_ADDR_EXP 35
6659: PUSH
6660: LD_INT 3
6662: ST_TO_ADDR
// end ; if Difficulty = 2 then
6663: LD_OWVAR 67
6667: PUSH
6668: LD_INT 2
6670: EQUAL
6671: IFFALSE 6689
// begin RuSolMinLevel = 3 ;
6673: LD_ADDR_EXP 34
6677: PUSH
6678: LD_INT 3
6680: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6681: LD_ADDR_EXP 35
6685: PUSH
6686: LD_INT 5
6688: ST_TO_ADDR
// end ; if Difficulty = 3 then
6689: LD_OWVAR 67
6693: PUSH
6694: LD_INT 3
6696: EQUAL
6697: IFFALSE 6715
// begin RuSolMinLevel = 4 ;
6699: LD_ADDR_EXP 34
6703: PUSH
6704: LD_INT 4
6706: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6707: LD_ADDR_EXP 35
6711: PUSH
6712: LD_INT 6
6714: ST_TO_ADDR
// end ; end ;
6715: LD_VAR 0 1
6719: RET
// export function ShowQuery1 ; begin
6720: LD_INT 0
6722: PPUSH
// case query ( QKill ) of 1 :
6723: LD_STRING QKill
6725: PPUSH
6726: CALL_OW 97
6730: PUSH
6731: LD_INT 1
6733: DOUBLE
6734: EQUAL
6735: IFTRUE 6739
6737: GO 6750
6739: POP
// begin result = 1 ;
6740: LD_ADDR_VAR 0 1
6744: PUSH
6745: LD_INT 1
6747: ST_TO_ADDR
// end ; 2 :
6748: GO 6789
6750: LD_INT 2
6752: DOUBLE
6753: EQUAL
6754: IFTRUE 6758
6756: GO 6769
6758: POP
// begin result = 2 ;
6759: LD_ADDR_VAR 0 1
6763: PUSH
6764: LD_INT 2
6766: ST_TO_ADDR
// end ; 3 :
6767: GO 6789
6769: LD_INT 3
6771: DOUBLE
6772: EQUAL
6773: IFTRUE 6777
6775: GO 6788
6777: POP
// begin result = 3 ;
6778: LD_ADDR_VAR 0 1
6782: PUSH
6783: LD_INT 3
6785: ST_TO_ADDR
// end ; end ;
6786: GO 6789
6788: POP
// end ;
6789: LD_VAR 0 1
6793: RET
// export function ShowQuery2 ; begin
6794: LD_INT 0
6796: PPUSH
// case query ( QKill2 ) of 1 :
6797: LD_STRING QKill2
6799: PPUSH
6800: CALL_OW 97
6804: PUSH
6805: LD_INT 1
6807: DOUBLE
6808: EQUAL
6809: IFTRUE 6813
6811: GO 6824
6813: POP
// begin result = 1 ;
6814: LD_ADDR_VAR 0 1
6818: PUSH
6819: LD_INT 1
6821: ST_TO_ADDR
// end ; 2 :
6822: GO 6844
6824: LD_INT 2
6826: DOUBLE
6827: EQUAL
6828: IFTRUE 6832
6830: GO 6843
6832: POP
// begin result = 2 ;
6833: LD_ADDR_VAR 0 1
6837: PUSH
6838: LD_INT 2
6840: ST_TO_ADDR
// end ; end ;
6841: GO 6844
6843: POP
// end ;
6844: LD_VAR 0 1
6848: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6849: LD_INT 0
6851: PPUSH
6852: PPUSH
6853: PPUSH
6854: PPUSH
6855: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6856: LD_ADDR_VAR 0 8
6860: PUSH
6861: LD_INT 48
6863: PUSH
6864: LD_INT 49
6866: PUSH
6867: LD_INT 50
6869: PUSH
6870: LD_INT 20
6872: PUSH
6873: LD_INT 1
6875: PUSH
6876: LD_INT 51
6878: PUSH
6879: LD_INT 52
6881: PUSH
6882: LD_INT 69
6884: PUSH
6885: LD_INT 39
6887: PUSH
6888: LD_INT 34
6890: PUSH
6891: LD_INT 40
6893: PUSH
6894: LD_INT 53
6896: PUSH
6897: LD_INT 71
6899: PUSH
6900: LD_INT 57
6902: PUSH
6903: LD_INT 58
6905: PUSH
6906: LD_INT 44
6908: PUSH
6909: LD_INT 32
6911: PUSH
6912: LD_INT 27
6914: PUSH
6915: LD_INT 23
6917: PUSH
6918: LD_INT 33
6920: PUSH
6921: LD_INT 59
6923: PUSH
6924: LD_INT 54
6926: PUSH
6927: LD_INT 55
6929: PUSH
6930: LD_INT 56
6932: PUSH
6933: LD_INT 63
6935: PUSH
6936: LD_INT 64
6938: PUSH
6939: LD_INT 65
6941: PUSH
6942: LD_INT 30
6944: PUSH
6945: LD_INT 31
6947: PUSH
6948: LD_INT 21
6950: PUSH
6951: LD_INT 22
6953: PUSH
6954: LD_INT 25
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6991: LD_ADDR_VAR 0 5
6995: PUSH
6996: DOUBLE
6997: LD_INT 1
6999: DEC
7000: ST_TO_ADDR
7001: LD_VAR 0 8
7005: PUSH
7006: FOR_TO
7007: IFFALSE 7083
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
7009: LD_VAR 0 8
7013: PUSH
7014: LD_VAR 0 5
7018: ARRAY
7019: PPUSH
7020: LD_VAR 0 1
7024: PPUSH
7025: CALL_OW 321
7029: PUSH
7030: LD_INT 1
7032: EQUAL
7033: PUSH
7034: LD_VAR 0 8
7038: PUSH
7039: LD_VAR 0 5
7043: ARRAY
7044: PPUSH
7045: LD_VAR 0 3
7049: PPUSH
7050: CALL_OW 482
7054: PUSH
7055: LD_INT 1
7057: EQUAL
7058: AND
7059: IFFALSE 7081
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
7061: LD_VAR 0 2
7065: PPUSH
7066: LD_VAR 0 8
7070: PUSH
7071: LD_VAR 0 5
7075: ARRAY
7076: PPUSH
7077: CALL_OW 184
7081: GO 7006
7083: POP
7084: POP
// end ;
7085: LD_VAR 0 4
7089: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7090: LD_INT 0
7092: PPUSH
7093: PPUSH
7094: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7095: LD_INT 22
7097: PUSH
7098: LD_VAR 0 1
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 21
7109: PUSH
7110: LD_INT 2
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PPUSH
7121: CALL_OW 69
7125: PUSH
7126: LD_VAR 0 3
7130: LESSEQUAL
7131: IFFALSE 7239
// begin for i = 1 to vehCount do
7133: LD_ADDR_VAR 0 9
7137: PUSH
7138: DOUBLE
7139: LD_INT 1
7141: DEC
7142: ST_TO_ADDR
7143: LD_VAR 0 3
7147: PUSH
7148: FOR_TO
7149: IFFALSE 7237
// begin weapon = weaponTab [ i ] ;
7151: LD_ADDR_VAR 0 10
7155: PUSH
7156: LD_VAR 0 4
7160: PUSH
7161: LD_VAR 0 9
7165: ARRAY
7166: ST_TO_ADDR
// if weapon = 46 then
7167: LD_VAR 0 10
7171: PUSH
7172: LD_INT 46
7174: EQUAL
7175: IFFALSE 7206
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
7177: LD_VAR 0 2
7181: PPUSH
7182: LD_INT 24
7184: PPUSH
7185: LD_VAR 0 5
7189: PPUSH
7190: LD_VAR 0 6
7194: PPUSH
7195: LD_VAR 0 10
7199: PPUSH
7200: CALL_OW 185
// end else
7204: GO 7235
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7206: LD_VAR 0 2
7210: PPUSH
7211: LD_VAR 0 7
7215: PPUSH
7216: LD_VAR 0 5
7220: PPUSH
7221: LD_VAR 0 6
7225: PPUSH
7226: LD_VAR 0 10
7230: PPUSH
7231: CALL_OW 185
// end ; end ;
7235: GO 7148
7237: POP
7238: POP
// end ; end ;
7239: LD_VAR 0 8
7243: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7244: LD_INT 0
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7250: LD_ADDR_VAR 0 8
7254: PUSH
7255: LD_INT 22
7257: PUSH
7258: LD_VAR 0 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 21
7269: PUSH
7270: LD_INT 2
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 3
7279: PUSH
7280: LD_INT 24
7282: PUSH
7283: LD_INT 650
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: LIST
7298: PPUSH
7299: CALL_OW 69
7303: ST_TO_ADDR
// if damageVehicles > 0 then
7304: LD_VAR 0 8
7308: PUSH
7309: LD_INT 0
7311: GREATER
7312: IFFALSE 7333
// ComMoveXY ( damageVehicles , repX , repY ) ;
7314: LD_VAR 0 8
7318: PPUSH
7319: LD_VAR 0 3
7323: PPUSH
7324: LD_VAR 0 4
7328: PPUSH
7329: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7333: LD_VAR 0 8
7337: PPUSH
7338: LD_INT 95
7340: PUSH
7341: LD_VAR 0 2
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: LD_INT 58
7355: PUSH
7356: EMPTY
7357: LIST
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PPUSH
7367: CALL_OW 72
7371: PUSH
7372: LD_INT 0
7374: GREATER
7375: IFFALSE 7442
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7377: LD_ADDR_VAR 0 6
7381: PUSH
7382: LD_VAR 0 8
7386: PPUSH
7387: LD_INT 95
7389: PUSH
7390: LD_VAR 0 2
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: LD_INT 58
7404: PUSH
7405: EMPTY
7406: LIST
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 72
7420: PUSH
7421: FOR_IN
7422: IFFALSE 7440
// ComExitVehicle ( UnitsInside ( i ) ) ;
7424: LD_VAR 0 6
7428: PPUSH
7429: CALL_OW 313
7433: PPUSH
7434: CALL_OW 121
7438: GO 7421
7440: POP
7441: POP
// end ;
7442: LD_VAR 0 5
7446: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7447: LD_INT 0
7449: PPUSH
7450: PPUSH
7451: PPUSH
7452: PPUSH
7453: PPUSH
7454: PPUSH
7455: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7456: LD_ADDR_VAR 0 8
7460: PUSH
7461: LD_INT 22
7463: PUSH
7464: LD_VAR 0 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: LD_INT 21
7475: PUSH
7476: LD_INT 2
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 24
7485: PUSH
7486: LD_INT 660
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 3
7495: PUSH
7496: LD_INT 58
7498: PUSH
7499: EMPTY
7500: LIST
7501: PUSH
7502: LD_INT 2
7504: PUSH
7505: LD_INT 34
7507: PUSH
7508: LD_INT 43
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: LD_INT 34
7517: PUSH
7518: LD_INT 44
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 34
7527: PUSH
7528: LD_INT 46
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: LIST
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: PPUSH
7552: CALL_OW 69
7556: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7557: LD_INT 22
7559: PUSH
7560: LD_VAR 0 1
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 21
7571: PUSH
7572: LD_INT 2
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PUSH
7579: LD_INT 24
7581: PUSH
7582: LD_INT 1000
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: LD_INT 3
7591: PUSH
7592: LD_INT 58
7594: PUSH
7595: EMPTY
7596: LIST
7597: PUSH
7598: LD_INT 2
7600: PUSH
7601: LD_INT 34
7603: PUSH
7604: LD_INT 43
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PUSH
7611: LD_INT 34
7613: PUSH
7614: LD_INT 44
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: LD_INT 34
7623: PUSH
7624: LD_INT 46
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: PPUSH
7648: CALL_OW 69
7652: PUSH
7653: LD_INT 5
7655: PUSH
7656: LD_INT 6
7658: PUSH
7659: LD_INT 6
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: LIST
7666: PUSH
7667: LD_OWVAR 67
7671: ARRAY
7672: EQUAL
7673: IFFALSE 7929
// if seeEnemy = 0 then
7675: LD_VAR 0 11
7679: PUSH
7680: LD_INT 0
7682: EQUAL
7683: IFFALSE 7929
// repeat wait ( 0 0$1 ) ;
7685: LD_INT 35
7687: PPUSH
7688: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7692: LD_ADDR_VAR 0 8
7696: PUSH
7697: LD_INT 22
7699: PUSH
7700: LD_VAR 0 1
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PUSH
7709: LD_INT 21
7711: PUSH
7712: LD_INT 2
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: PUSH
7719: LD_INT 24
7721: PUSH
7722: LD_INT 660
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 3
7731: PUSH
7732: LD_INT 58
7734: PUSH
7735: EMPTY
7736: LIST
7737: PUSH
7738: LD_INT 2
7740: PUSH
7741: LD_INT 34
7743: PUSH
7744: LD_INT 43
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 34
7753: PUSH
7754: LD_INT 44
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 34
7763: PUSH
7764: LD_INT 46
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: PPUSH
7788: CALL_OW 69
7792: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7793: LD_INT 22
7795: PUSH
7796: LD_VAR 0 1
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 95
7807: PUSH
7808: LD_VAR 0 2
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PPUSH
7821: CALL_OW 69
7825: NOT
7826: PUSH
7827: LD_VAR 0 11
7831: PUSH
7832: LD_INT 0
7834: EQUAL
7835: AND
7836: IFFALSE 7891
// for i := 1 to wayX do
7838: LD_ADDR_VAR 0 6
7842: PUSH
7843: DOUBLE
7844: LD_INT 1
7846: DEC
7847: ST_TO_ADDR
7848: LD_VAR 0 3
7852: PUSH
7853: FOR_TO
7854: IFFALSE 7889
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7856: LD_VAR 0 8
7860: PPUSH
7861: LD_VAR 0 3
7865: PUSH
7866: LD_VAR 0 6
7870: ARRAY
7871: PPUSH
7872: LD_VAR 0 4
7876: PUSH
7877: LD_VAR 0 6
7881: ARRAY
7882: PPUSH
7883: CALL_OW 114
7887: GO 7853
7889: POP
7890: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7891: LD_INT 22
7893: PUSH
7894: LD_VAR 0 1
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: LD_INT 95
7905: PUSH
7906: LD_VAR 0 2
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PPUSH
7919: CALL_OW 69
7923: PUSH
7924: LD_INT 0
7926: GREATER
7927: IFFALSE 7685
// seeEnemy = 1 ;
7929: LD_ADDR_VAR 0 11
7933: PUSH
7934: LD_INT 1
7936: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7937: LD_INT 35
7939: PPUSH
7940: CALL_OW 67
// for j in vehiclesOK do
7944: LD_ADDR_VAR 0 7
7948: PUSH
7949: LD_VAR 0 8
7953: PUSH
7954: FOR_IN
7955: IFFALSE 8168
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7957: LD_ADDR_VAR 0 9
7961: PUSH
7962: LD_INT 81
7964: PUSH
7965: LD_VAR 0 1
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 101
7976: PUSH
7977: LD_INT 1
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PPUSH
7988: CALL_OW 69
7992: PUSH
7993: LD_EXP 45
7997: DIFF
7998: PPUSH
7999: LD_VAR 0 7
8003: PPUSH
8004: CALL_OW 74
8008: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
8009: LD_ADDR_VAR 0 10
8013: PUSH
8014: LD_INT 81
8016: PUSH
8017: LD_VAR 0 1
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PUSH
8026: LD_INT 101
8028: PUSH
8029: LD_INT 1
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 2
8038: PUSH
8039: LD_INT 59
8041: PUSH
8042: EMPTY
8043: LIST
8044: PUSH
8045: LD_INT 21
8047: PUSH
8048: LD_INT 1
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 21
8057: PUSH
8058: LD_INT 2
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: LIST
8075: PUSH
8076: EMPTY
8077: LIST
8078: PPUSH
8079: CALL_OW 69
8083: PUSH
8084: LD_EXP 45
8088: DIFF
8089: PPUSH
8090: LD_VAR 0 7
8094: PPUSH
8095: CALL_OW 74
8099: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
8100: LD_VAR 0 7
8104: PPUSH
8105: LD_VAR 0 9
8109: PPUSH
8110: CALL_OW 296
8114: PUSH
8115: LD_INT 8
8117: PLUS
8118: PUSH
8119: LD_VAR 0 7
8123: PPUSH
8124: LD_VAR 0 10
8128: PPUSH
8129: CALL_OW 296
8133: LESS
8134: IFFALSE 8152
// ComAttackUnit ( j , target1 ) else
8136: LD_VAR 0 7
8140: PPUSH
8141: LD_VAR 0 9
8145: PPUSH
8146: CALL_OW 115
8150: GO 8166
// ComAttackUnit ( j , target2 ) ;
8152: LD_VAR 0 7
8156: PPUSH
8157: LD_VAR 0 10
8161: PPUSH
8162: CALL_OW 115
// end ;
8166: GO 7954
8168: POP
8169: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
8170: LD_INT 22
8172: PUSH
8173: LD_VAR 0 1
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_INT 21
8184: PUSH
8185: LD_INT 2
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PUSH
8192: LD_INT 24
8194: PUSH
8195: LD_INT 1000
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 3
8204: PUSH
8205: LD_INT 58
8207: PUSH
8208: EMPTY
8209: LIST
8210: PUSH
8211: LD_INT 2
8213: PUSH
8214: LD_INT 34
8216: PUSH
8217: LD_INT 43
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: LD_INT 34
8226: PUSH
8227: LD_INT 44
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 34
8236: PUSH
8237: LD_INT 46
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: LIST
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: PPUSH
8261: CALL_OW 69
8265: PUSH
8266: LD_INT 0
8268: EQUAL
8269: IFFALSE 7937
// seeEnemy = 0 ;
8271: LD_ADDR_VAR 0 11
8275: PUSH
8276: LD_INT 0
8278: ST_TO_ADDR
// end ;
8279: LD_VAR 0 5
8283: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8284: LD_INT 0
8286: PPUSH
8287: PPUSH
8288: PPUSH
8289: PPUSH
8290: PPUSH
8291: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8292: LD_ADDR_VAR 0 8
8296: PUSH
8297: LD_VAR 0 2
8301: PPUSH
8302: CALL_OW 313
8306: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8307: LD_ADDR_VAR 0 9
8311: PUSH
8312: LD_VAR 0 3
8316: PPUSH
8317: LD_INT 22
8319: PUSH
8320: LD_VAR 0 1
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 25
8331: PUSH
8332: LD_INT 2
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PUSH
8339: LD_INT 24
8341: PUSH
8342: LD_INT 750
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 3
8351: PUSH
8352: LD_INT 54
8354: PUSH
8355: EMPTY
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: PPUSH
8368: CALL_OW 70
8372: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8373: LD_ADDR_VAR 0 6
8377: PUSH
8378: LD_VAR 0 3
8382: PPUSH
8383: LD_INT 22
8385: PUSH
8386: LD_VAR 0 1
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: LD_INT 21
8397: PUSH
8398: LD_INT 3
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: LD_INT 3
8407: PUSH
8408: LD_INT 24
8410: PUSH
8411: LD_INT 1000
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: LIST
8426: PUSH
8427: EMPTY
8428: LIST
8429: PPUSH
8430: CALL_OW 70
8434: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8435: LD_VAR 0 6
8439: NOT
8440: PUSH
8441: LD_INT 22
8443: PUSH
8444: LD_VAR 0 1
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: LD_INT 25
8455: PUSH
8456: LD_INT 2
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: PUSH
8463: LD_INT 24
8465: PUSH
8466: LD_INT 250
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: PPUSH
8478: CALL_OW 69
8482: NOT
8483: AND
8484: IFFALSE 8488
// exit ;
8486: GO 8670
// if buildings_list > 0 and engineerOkInside then
8488: LD_VAR 0 6
8492: PUSH
8493: LD_INT 0
8495: GREATER
8496: PUSH
8497: LD_VAR 0 8
8501: AND
8502: IFFALSE 8513
// ComExitBuilding ( engineerOkInside ) ;
8504: LD_VAR 0 8
8508: PPUSH
8509: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8513: LD_VAR 0 6
8517: PUSH
8518: LD_INT 0
8520: GREATER
8521: PUSH
8522: LD_VAR 0 9
8526: PUSH
8527: LD_INT 0
8529: GREATER
8530: AND
8531: IFFALSE 8551
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8533: LD_VAR 0 9
8537: PPUSH
8538: LD_VAR 0 6
8542: PUSH
8543: LD_INT 1
8545: ARRAY
8546: PPUSH
8547: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8551: LD_VAR 0 6
8555: PUSH
8556: LD_INT 0
8558: EQUAL
8559: PUSH
8560: LD_VAR 0 4
8564: PUSH
8565: LD_INT 0
8567: EQUAL
8568: AND
8569: PUSH
8570: LD_VAR 0 9
8574: PUSH
8575: LD_INT 0
8577: GREATER
8578: AND
8579: IFFALSE 8595
// ComEnterUnit ( engineerOkOutside , building ) ;
8581: LD_VAR 0 9
8585: PPUSH
8586: LD_VAR 0 2
8590: PPUSH
8591: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8595: LD_VAR 0 9
8599: PUSH
8600: LD_INT 0
8602: GREATER
8603: PUSH
8604: LD_VAR 0 6
8608: PUSH
8609: LD_INT 0
8611: EQUAL
8612: AND
8613: PUSH
8614: LD_VAR 0 4
8618: PUSH
8619: LD_INT 0
8621: GREATER
8622: AND
8623: IFFALSE 8670
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8625: LD_VAR 0 9
8629: PPUSH
8630: LD_VAR 0 4
8634: PUSH
8635: LD_INT 1
8637: ARRAY
8638: PPUSH
8639: LD_VAR 0 4
8643: PUSH
8644: LD_INT 2
8646: ARRAY
8647: PPUSH
8648: LD_VAR 0 4
8652: PUSH
8653: LD_INT 3
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 4
8661: PUSH
8662: LD_INT 4
8664: ARRAY
8665: PPUSH
8666: CALL_OW 145
// end ;
8670: LD_VAR 0 5
8674: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8675: LD_INT 0
8677: PPUSH
8678: PPUSH
8679: PPUSH
8680: PPUSH
8681: PPUSH
8682: PPUSH
8683: PPUSH
8684: PPUSH
8685: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8686: LD_ADDR_VAR 0 6
8690: PUSH
8691: LD_INT 22
8693: PUSH
8694: LD_VAR 0 1
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: LD_INT 25
8705: PUSH
8706: LD_INT 4
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: PUSH
8713: LD_INT 23
8715: PUSH
8716: LD_INT 2
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 24
8725: PUSH
8726: LD_INT 251
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: PPUSH
8739: CALL_OW 69
8743: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8744: LD_ADDR_VAR 0 7
8748: PUSH
8749: LD_VAR 0 3
8753: PPUSH
8754: LD_INT 22
8756: PUSH
8757: LD_VAR 0 1
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 23
8768: PUSH
8769: LD_INT 2
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: LD_INT 25
8778: PUSH
8779: LD_INT 4
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 50
8788: PUSH
8789: EMPTY
8790: LIST
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: PPUSH
8798: CALL_OW 70
8802: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8803: LD_ADDR_VAR 0 10
8807: PUSH
8808: LD_VAR 0 3
8812: PPUSH
8813: LD_INT 22
8815: PUSH
8816: LD_VAR 0 1
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PUSH
8825: LD_INT 21
8827: PUSH
8828: LD_INT 1
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 3
8837: PUSH
8838: LD_INT 25
8840: PUSH
8841: LD_INT 3
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PUSH
8852: LD_INT 3
8854: PUSH
8855: LD_INT 24
8857: PUSH
8858: LD_INT 750
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 70
8879: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8880: LD_ADDR_VAR 0 11
8884: PUSH
8885: LD_VAR 0 2
8889: PPUSH
8890: LD_INT 22
8892: PUSH
8893: LD_VAR 0 1
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: LD_INT 21
8904: PUSH
8905: LD_INT 1
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 3
8914: PUSH
8915: LD_INT 25
8917: PUSH
8918: LD_INT 3
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 3
8931: PUSH
8932: LD_INT 24
8934: PUSH
8935: LD_INT 1000
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 70
8956: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8957: LD_VAR 0 10
8961: NOT
8962: PUSH
8963: LD_VAR 0 11
8967: NOT
8968: AND
8969: PUSH
8970: LD_VAR 0 6
8974: NOT
8975: AND
8976: IFFALSE 8980
// exit ;
8978: GO 9214
// if damageUnits > 0 and sci_list > 0 then
8980: LD_VAR 0 10
8984: PUSH
8985: LD_INT 0
8987: GREATER
8988: PUSH
8989: LD_VAR 0 6
8993: PUSH
8994: LD_INT 0
8996: GREATER
8997: AND
8998: IFFALSE 9014
// ComMoveToArea ( damageUnits , healArea ) ;
9000: LD_VAR 0 10
9004: PPUSH
9005: LD_VAR 0 2
9009: PPUSH
9010: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
9014: LD_VAR 0 11
9018: PUSH
9019: LD_INT 0
9021: GREATER
9022: PUSH
9023: LD_VAR 0 6
9027: PUSH
9028: LD_INT 0
9030: GREATER
9031: AND
9032: IFFALSE 9043
// ComExitBuilding ( sci_list ) ;
9034: LD_VAR 0 6
9038: PPUSH
9039: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
9043: LD_VAR 0 11
9047: PUSH
9048: LD_INT 0
9050: GREATER
9051: PUSH
9052: LD_VAR 0 7
9056: PUSH
9057: LD_INT 0
9059: GREATER
9060: AND
9061: IFFALSE 9081
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9063: LD_VAR 0 7
9067: PPUSH
9068: LD_VAR 0 11
9072: PUSH
9073: LD_INT 1
9075: ARRAY
9076: PPUSH
9077: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
9081: LD_VAR 0 10
9085: PUSH
9086: LD_INT 0
9088: EQUAL
9089: PUSH
9090: LD_VAR 0 11
9094: PUSH
9095: LD_INT 0
9097: EQUAL
9098: AND
9099: PUSH
9100: LD_VAR 0 7
9104: PUSH
9105: LD_INT 0
9107: GREATER
9108: AND
9109: IFFALSE 9214
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9111: LD_ADDR_VAR 0 12
9115: PUSH
9116: LD_INT 22
9118: PUSH
9119: LD_VAR 0 1
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 21
9130: PUSH
9131: LD_INT 3
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: LD_INT 30
9140: PUSH
9141: LD_INT 8
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: LIST
9152: PPUSH
9153: CALL_OW 69
9157: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
9158: LD_ADDR_VAR 0 13
9162: PUSH
9163: LD_INT 1
9165: PPUSH
9166: LD_VAR 0 12
9170: PPUSH
9171: CALL_OW 12
9175: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9176: LD_VAR 0 7
9180: PPUSH
9181: LD_INT 3
9183: PUSH
9184: LD_INT 60
9186: PUSH
9187: EMPTY
9188: LIST
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PPUSH
9194: CALL_OW 72
9198: PPUSH
9199: LD_VAR 0 12
9203: PUSH
9204: LD_VAR 0 13
9208: ARRAY
9209: PPUSH
9210: CALL_OW 120
// end ; end ;
9214: LD_VAR 0 5
9218: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
9219: LD_INT 0
9221: PPUSH
9222: PPUSH
9223: PPUSH
9224: PPUSH
// tmpTab = [ ] ;
9225: LD_ADDR_VAR 0 6
9229: PUSH
9230: EMPTY
9231: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9232: LD_INT 22
9234: PUSH
9235: LD_VAR 0 1
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 30
9246: PUSH
9247: LD_INT 32
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: PPUSH
9258: CALL_OW 69
9262: PUSH
9263: LD_INT 0
9265: GREATER
9266: IFFALSE 9349
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9268: LD_ADDR_VAR 0 4
9272: PUSH
9273: LD_INT 22
9275: PUSH
9276: LD_VAR 0 1
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: LD_INT 30
9287: PUSH
9288: LD_INT 32
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 69
9303: PUSH
9304: FOR_IN
9305: IFFALSE 9347
// begin for j in UnitsInside ( i ) do
9307: LD_ADDR_VAR 0 5
9311: PUSH
9312: LD_VAR 0 4
9316: PPUSH
9317: CALL_OW 313
9321: PUSH
9322: FOR_IN
9323: IFFALSE 9343
// tmpTab = tmpTab ^ j ;
9325: LD_ADDR_VAR 0 6
9329: PUSH
9330: LD_VAR 0 6
9334: PUSH
9335: LD_VAR 0 5
9339: ADD
9340: ST_TO_ADDR
9341: GO 9322
9343: POP
9344: POP
// end ;
9345: GO 9304
9347: POP
9348: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9349: LD_VAR 0 6
9353: PPUSH
9354: LD_VAR 0 2
9358: PPUSH
9359: CALL_OW 250
9363: PPUSH
9364: LD_VAR 0 2
9368: PPUSH
9369: CALL_OW 251
9373: PPUSH
9374: CALL_OW 114
// end ;
9378: LD_VAR 0 3
9382: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9383: LD_INT 0
9385: PPUSH
9386: PPUSH
9387: PPUSH
9388: PPUSH
// enable ;
9389: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9390: LD_ADDR_VAR 0 7
9394: PUSH
9395: LD_VAR 0 3
9399: PPUSH
9400: CALL_OW 435
9404: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9405: LD_ADDR_VAR 0 6
9409: PUSH
9410: LD_INT 22
9412: PUSH
9413: LD_VAR 0 1
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: LD_INT 34
9424: PUSH
9425: LD_VAR 0 2
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PPUSH
9438: CALL_OW 69
9442: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9443: LD_VAR 0 6
9447: PUSH
9448: LD_INT 0
9450: GREATER
9451: PUSH
9452: LD_VAR 0 3
9456: PPUSH
9457: CALL_OW 435
9461: AND
9462: PUSH
9463: LD_VAR 0 7
9467: PUSH
9468: LD_INT 0
9470: GREATER
9471: AND
9472: IFFALSE 9521
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9474: LD_VAR 0 6
9478: PUSH
9479: LD_INT 1
9481: ARRAY
9482: PPUSH
9483: LD_VAR 0 7
9487: PUSH
9488: LD_INT 1
9490: ARRAY
9491: PPUSH
9492: LD_VAR 0 7
9496: PUSH
9497: LD_INT 2
9499: ARRAY
9500: PPUSH
9501: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9505: LD_VAR 0 6
9509: PUSH
9510: LD_INT 1
9512: ARRAY
9513: PPUSH
9514: LD_INT 100
9516: PPUSH
9517: CALL_OW 240
// end ; end ;
9521: LD_VAR 0 4
9525: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9526: LD_INT 0
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9536: LD_ADDR_VAR 0 6
9540: PUSH
9541: LD_VAR 0 2
9545: PPUSH
9546: LD_INT 22
9548: PUSH
9549: LD_VAR 0 1
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 56
9560: PUSH
9561: EMPTY
9562: LIST
9563: PUSH
9564: LD_INT 24
9566: PUSH
9567: LD_INT 700
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 3
9576: PUSH
9577: LD_INT 60
9579: PUSH
9580: EMPTY
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 2
9589: PUSH
9590: LD_INT 25
9592: PUSH
9593: LD_INT 1
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 25
9602: PUSH
9603: LD_INT 5
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 25
9612: PUSH
9613: LD_INT 8
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 25
9622: PUSH
9623: LD_INT 9
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: PPUSH
9644: CALL_OW 70
9648: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9649: LD_ADDR_VAR 0 7
9653: PUSH
9654: LD_VAR 0 2
9658: PPUSH
9659: LD_INT 22
9661: PUSH
9662: LD_VAR 0 1
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: LD_INT 30
9673: PUSH
9674: LD_INT 32
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 58
9683: PUSH
9684: EMPTY
9685: LIST
9686: PUSH
9687: LD_INT 24
9689: PUSH
9690: LD_INT 251
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: PPUSH
9703: CALL_OW 70
9707: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9708: LD_ADDR_VAR 0 9
9712: PUSH
9713: LD_VAR 0 2
9717: PPUSH
9718: LD_INT 22
9720: PUSH
9721: LD_VAR 0 1
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PUSH
9730: LD_INT 2
9732: PUSH
9733: LD_INT 30
9735: PUSH
9736: LD_INT 4
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 30
9745: PUSH
9746: LD_INT 5
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 24
9760: PUSH
9761: LD_INT 251
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: LIST
9772: PPUSH
9773: CALL_OW 70
9777: ST_TO_ADDR
// if barrackList > 0 then
9778: LD_VAR 0 9
9782: PUSH
9783: LD_INT 0
9785: GREATER
9786: IFFALSE 9934
// begin if turretList = 0 then
9788: LD_VAR 0 7
9792: PUSH
9793: LD_INT 0
9795: EQUAL
9796: IFFALSE 9838
// begin if soldiers_list > 0 then
9798: LD_VAR 0 6
9802: PUSH
9803: LD_INT 0
9805: GREATER
9806: IFFALSE 9836
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9808: LD_VAR 0 6
9812: PPUSH
9813: LD_VAR 0 9
9817: PUSH
9818: LD_INT 1
9820: PPUSH
9821: LD_VAR 0 9
9825: PPUSH
9826: CALL_OW 12
9830: ARRAY
9831: PPUSH
9832: CALL_OW 120
// end else
9836: GO 9934
// begin for i in barrackList do
9838: LD_ADDR_VAR 0 4
9842: PUSH
9843: LD_VAR 0 9
9847: PUSH
9848: FOR_IN
9849: IFFALSE 9932
// begin insideUnits = UnitsInside ( i ) ;
9851: LD_ADDR_VAR 0 10
9855: PUSH
9856: LD_VAR 0 4
9860: PPUSH
9861: CALL_OW 313
9865: ST_TO_ADDR
// if insideUnits > 0 then
9866: LD_VAR 0 10
9870: PUSH
9871: LD_INT 0
9873: GREATER
9874: IFFALSE 9898
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9876: LD_VAR 0 10
9880: PUSH
9881: LD_INT 1
9883: ARRAY
9884: PPUSH
9885: LD_VAR 0 7
9889: PUSH
9890: LD_INT 1
9892: ARRAY
9893: PPUSH
9894: CALL_OW 120
// if soldiers_list > 0 then
9898: LD_VAR 0 6
9902: PUSH
9903: LD_INT 0
9905: GREATER
9906: IFFALSE 9930
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9908: LD_VAR 0 6
9912: PUSH
9913: LD_INT 1
9915: ARRAY
9916: PPUSH
9917: LD_VAR 0 7
9921: PUSH
9922: LD_INT 1
9924: ARRAY
9925: PPUSH
9926: CALL_OW 120
// end ;
9930: GO 9848
9932: POP
9933: POP
// end ; end ; end ;
9934: LD_VAR 0 3
9938: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9939: LD_INT 0
9941: PPUSH
9942: PPUSH
9943: PPUSH
9944: PPUSH
9945: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9946: LD_ADDR_VAR 0 6
9950: PUSH
9951: LD_INT 22
9953: PUSH
9954: LD_VAR 0 1
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: LD_INT 2
9965: PUSH
9966: LD_INT 30
9968: PUSH
9969: LD_INT 31
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 30
9978: PUSH
9979: LD_INT 32
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: LD_INT 30
9988: PUSH
9989: LD_INT 33
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 30
9998: PUSH
9999: LD_INT 4
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 30
10008: PUSH
10009: LD_INT 5
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PPUSH
10028: CALL_OW 69
10032: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10033: LD_ADDR_VAR 0 7
10037: PUSH
10038: LD_INT 22
10040: PUSH
10041: LD_VAR 0 2
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: LD_INT 21
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 58
10062: PUSH
10063: EMPTY
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: PPUSH
10071: CALL_OW 69
10075: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
10076: LD_VAR 0 6
10080: PUSH
10081: LD_INT 0
10083: GREATER
10084: PUSH
10085: LD_VAR 0 7
10089: PUSH
10090: LD_INT 0
10092: GREATER
10093: AND
10094: IFFALSE 10164
// begin for i in turretsList do
10096: LD_ADDR_VAR 0 4
10100: PUSH
10101: LD_VAR 0 6
10105: PUSH
10106: FOR_IN
10107: IFFALSE 10162
// begin for j in enemyBuildings do
10109: LD_ADDR_VAR 0 5
10113: PUSH
10114: LD_VAR 0 7
10118: PUSH
10119: FOR_IN
10120: IFFALSE 10158
// begin if GetDistUnits ( i , j ) < 20 then
10122: LD_VAR 0 4
10126: PPUSH
10127: LD_VAR 0 5
10131: PPUSH
10132: CALL_OW 296
10136: PUSH
10137: LD_INT 20
10139: LESS
10140: IFFALSE 10156
// begin ComAttackUnit ( i , j ) ;
10142: LD_VAR 0 4
10146: PPUSH
10147: LD_VAR 0 5
10151: PPUSH
10152: CALL_OW 115
// end ; end ;
10156: GO 10119
10158: POP
10159: POP
// end ;
10160: GO 10106
10162: POP
10163: POP
// end ; end ;
10164: LD_VAR 0 3
10168: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10169: LD_INT 0
10171: PPUSH
10172: PPUSH
10173: PPUSH
10174: PPUSH
10175: PPUSH
10176: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10177: LD_ADDR_VAR 0 8
10181: PUSH
10182: LD_INT 22
10184: PUSH
10185: LD_VAR 0 1
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: LD_INT 21
10196: PUSH
10197: LD_INT 2
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PUSH
10204: LD_INT 34
10206: PUSH
10207: LD_INT 52
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: PPUSH
10219: CALL_OW 69
10223: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10224: LD_ADDR_VAR 0 9
10228: PUSH
10229: LD_INT 22
10231: PUSH
10232: LD_VAR 0 1
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: LD_INT 21
10243: PUSH
10244: LD_INT 3
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: LD_INT 3
10253: PUSH
10254: LD_INT 24
10256: PUSH
10257: LD_INT 1000
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: LIST
10272: PUSH
10273: EMPTY
10274: LIST
10275: PPUSH
10276: CALL_OW 69
10280: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10281: LD_VAR 0 9
10285: PUSH
10286: LD_INT 0
10288: GREATER
10289: PUSH
10290: LD_VAR 0 8
10294: PPUSH
10295: LD_INT 24
10297: PUSH
10298: LD_INT 750
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PPUSH
10305: CALL_OW 72
10309: PUSH
10310: LD_INT 0
10312: GREATER
10313: AND
10314: IFFALSE 10349
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10316: LD_VAR 0 8
10320: PPUSH
10321: LD_INT 24
10323: PUSH
10324: LD_INT 750
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PPUSH
10331: CALL_OW 72
10335: PPUSH
10336: LD_VAR 0 9
10340: PUSH
10341: LD_INT 1
10343: ARRAY
10344: PPUSH
10345: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10349: LD_VAR 0 8
10353: PPUSH
10354: LD_INT 3
10356: PUSH
10357: LD_INT 24
10359: PUSH
10360: LD_INT 750
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 72
10375: PUSH
10376: LD_INT 0
10378: GREATER
10379: IFFALSE 10417
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10381: LD_VAR 0 8
10385: PPUSH
10386: LD_INT 3
10388: PUSH
10389: LD_INT 24
10391: PUSH
10392: LD_INT 750
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PPUSH
10403: CALL_OW 72
10407: PPUSH
10408: LD_VAR 0 2
10412: PPUSH
10413: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10417: LD_VAR 0 8
10421: PUSH
10422: LD_INT 0
10424: GREATER
10425: PUSH
10426: LD_VAR 0 9
10430: PUSH
10431: LD_INT 0
10433: EQUAL
10434: AND
10435: PUSH
10436: LD_VAR 0 3
10440: PUSH
10441: LD_INT 0
10443: GREATER
10444: AND
10445: IFFALSE 10492
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10447: LD_VAR 0 8
10451: PPUSH
10452: LD_VAR 0 3
10456: PUSH
10457: LD_INT 1
10459: ARRAY
10460: PPUSH
10461: LD_VAR 0 3
10465: PUSH
10466: LD_INT 2
10468: ARRAY
10469: PPUSH
10470: LD_VAR 0 3
10474: PUSH
10475: LD_INT 3
10477: ARRAY
10478: PPUSH
10479: LD_VAR 0 3
10483: PUSH
10484: LD_INT 4
10486: ARRAY
10487: PPUSH
10488: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10492: LD_VAR 0 2
10496: PPUSH
10497: LD_INT 22
10499: PUSH
10500: LD_VAR 0 1
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 21
10511: PUSH
10512: LD_INT 2
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: LD_INT 34
10521: PUSH
10522: LD_INT 52
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 3
10531: PUSH
10532: LD_INT 24
10534: PUSH
10535: LD_INT 750
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: PPUSH
10552: CALL_OW 70
10556: PUSH
10557: LD_INT 0
10559: GREATER
10560: IFFALSE 10762
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10562: LD_ADDR_VAR 0 5
10566: PUSH
10567: LD_VAR 0 2
10571: PPUSH
10572: LD_INT 22
10574: PUSH
10575: LD_VAR 0 1
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PUSH
10584: LD_INT 21
10586: PUSH
10587: LD_INT 2
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 34
10596: PUSH
10597: LD_INT 52
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 3
10606: PUSH
10607: LD_INT 24
10609: PUSH
10610: LD_INT 750
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: PPUSH
10627: CALL_OW 70
10631: PUSH
10632: FOR_IN
10633: IFFALSE 10760
// begin mechTmp = UnitsInside ( i ) ;
10635: LD_ADDR_VAR 0 6
10639: PUSH
10640: LD_VAR 0 5
10644: PPUSH
10645: CALL_OW 313
10649: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10650: LD_VAR 0 6
10654: PPUSH
10655: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10659: LD_VAR 0 6
10663: PPUSH
10664: LD_VAR 0 7
10668: PPUSH
10669: CALL_OW 189
// wait ( 0 0$2 ) ;
10673: LD_INT 70
10675: PPUSH
10676: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10680: LD_VAR 0 6
10684: PPUSH
10685: LD_VAR 0 2
10689: PPUSH
10690: LD_INT 22
10692: PUSH
10693: LD_VAR 0 1
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 21
10704: PUSH
10705: LD_INT 2
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: LD_INT 34
10714: PUSH
10715: LD_INT 52
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 24
10724: PUSH
10725: LD_INT 1000
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 58
10734: PUSH
10735: EMPTY
10736: LIST
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: PPUSH
10745: CALL_OW 70
10749: PUSH
10750: LD_INT 1
10752: ARRAY
10753: PPUSH
10754: CALL_OW 180
// end ;
10758: GO 10632
10760: POP
10761: POP
// end ; end ;
10762: LD_VAR 0 4
10766: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10767: LD_INT 0
10769: PPUSH
10770: PPUSH
10771: PPUSH
10772: PPUSH
10773: PPUSH
10774: PPUSH
10775: PPUSH
10776: PPUSH
10777: PPUSH
10778: PPUSH
10779: PPUSH
// for i = 1 to medicCount do
10780: LD_ADDR_VAR 0 14
10784: PUSH
10785: DOUBLE
10786: LD_INT 1
10788: DEC
10789: ST_TO_ADDR
10790: LD_VAR 0 7
10794: PUSH
10795: FOR_TO
10796: IFFALSE 10878
// begin uc_side = side ;
10798: LD_ADDR_OWVAR 20
10802: PUSH
10803: LD_VAR 0 1
10807: ST_TO_ADDR
// uc_nation = nation ;
10808: LD_ADDR_OWVAR 21
10812: PUSH
10813: LD_VAR 0 2
10817: ST_TO_ADDR
// hc_name =  ;
10818: LD_ADDR_OWVAR 26
10822: PUSH
10823: LD_STRING 
10825: ST_TO_ADDR
// hc_gallery =  ;
10826: LD_ADDR_OWVAR 33
10830: PUSH
10831: LD_STRING 
10833: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10834: LD_INT 0
10836: PPUSH
10837: LD_INT 4
10839: PPUSH
10840: LD_VAR 0 8
10844: PPUSH
10845: CALL_OW 380
// un = CreateHuman ;
10849: LD_ADDR_VAR 0 16
10853: PUSH
10854: CALL_OW 44
10858: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10859: LD_VAR 0 16
10863: PPUSH
10864: LD_VAR 0 9
10868: PPUSH
10869: LD_INT 0
10871: PPUSH
10872: CALL_OW 49
// end ;
10876: GO 10795
10878: POP
10879: POP
// for i = 1 to soldierCount do
10880: LD_ADDR_VAR 0 14
10884: PUSH
10885: DOUBLE
10886: LD_INT 1
10888: DEC
10889: ST_TO_ADDR
10890: LD_VAR 0 3
10894: PUSH
10895: FOR_TO
10896: IFFALSE 10978
// begin uc_side = side ;
10898: LD_ADDR_OWVAR 20
10902: PUSH
10903: LD_VAR 0 1
10907: ST_TO_ADDR
// uc_nation = nation ;
10908: LD_ADDR_OWVAR 21
10912: PUSH
10913: LD_VAR 0 2
10917: ST_TO_ADDR
// hc_name =  ;
10918: LD_ADDR_OWVAR 26
10922: PUSH
10923: LD_STRING 
10925: ST_TO_ADDR
// hc_gallery =  ;
10926: LD_ADDR_OWVAR 33
10930: PUSH
10931: LD_STRING 
10933: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10934: LD_INT 0
10936: PPUSH
10937: LD_INT 1
10939: PPUSH
10940: LD_VAR 0 8
10944: PPUSH
10945: CALL_OW 380
// un = CreateHuman ;
10949: LD_ADDR_VAR 0 16
10953: PUSH
10954: CALL_OW 44
10958: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10959: LD_VAR 0 16
10963: PPUSH
10964: LD_VAR 0 9
10968: PPUSH
10969: LD_INT 0
10971: PPUSH
10972: CALL_OW 49
// end ;
10976: GO 10895
10978: POP
10979: POP
// for i = 1 to sniperCount do
10980: LD_ADDR_VAR 0 14
10984: PUSH
10985: DOUBLE
10986: LD_INT 1
10988: DEC
10989: ST_TO_ADDR
10990: LD_VAR 0 4
10994: PUSH
10995: FOR_TO
10996: IFFALSE 11078
// begin uc_side = side ;
10998: LD_ADDR_OWVAR 20
11002: PUSH
11003: LD_VAR 0 1
11007: ST_TO_ADDR
// uc_nation = nation ;
11008: LD_ADDR_OWVAR 21
11012: PUSH
11013: LD_VAR 0 2
11017: ST_TO_ADDR
// hc_name =  ;
11018: LD_ADDR_OWVAR 26
11022: PUSH
11023: LD_STRING 
11025: ST_TO_ADDR
// hc_gallery =  ;
11026: LD_ADDR_OWVAR 33
11030: PUSH
11031: LD_STRING 
11033: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
11034: LD_INT 0
11036: PPUSH
11037: LD_INT 5
11039: PPUSH
11040: LD_VAR 0 8
11044: PPUSH
11045: CALL_OW 380
// un = CreateHuman ;
11049: LD_ADDR_VAR 0 16
11053: PUSH
11054: CALL_OW 44
11058: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11059: LD_VAR 0 16
11063: PPUSH
11064: LD_VAR 0 9
11068: PPUSH
11069: LD_INT 0
11071: PPUSH
11072: CALL_OW 49
// end ;
11076: GO 10995
11078: POP
11079: POP
// for i = 1 to bazookCount do
11080: LD_ADDR_VAR 0 14
11084: PUSH
11085: DOUBLE
11086: LD_INT 1
11088: DEC
11089: ST_TO_ADDR
11090: LD_VAR 0 5
11094: PUSH
11095: FOR_TO
11096: IFFALSE 11178
// begin uc_side = side ;
11098: LD_ADDR_OWVAR 20
11102: PUSH
11103: LD_VAR 0 1
11107: ST_TO_ADDR
// uc_nation = nation ;
11108: LD_ADDR_OWVAR 21
11112: PUSH
11113: LD_VAR 0 2
11117: ST_TO_ADDR
// hc_name =  ;
11118: LD_ADDR_OWVAR 26
11122: PUSH
11123: LD_STRING 
11125: ST_TO_ADDR
// hc_gallery =  ;
11126: LD_ADDR_OWVAR 33
11130: PUSH
11131: LD_STRING 
11133: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11134: LD_INT 0
11136: PPUSH
11137: LD_INT 9
11139: PPUSH
11140: LD_VAR 0 8
11144: PPUSH
11145: CALL_OW 380
// un = CreateHuman ;
11149: LD_ADDR_VAR 0 16
11153: PUSH
11154: CALL_OW 44
11158: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11159: LD_VAR 0 16
11163: PPUSH
11164: LD_VAR 0 9
11168: PPUSH
11169: LD_INT 0
11171: PPUSH
11172: CALL_OW 49
// end ;
11176: GO 11095
11178: POP
11179: POP
// for i = 1 to mortalCount do
11180: LD_ADDR_VAR 0 14
11184: PUSH
11185: DOUBLE
11186: LD_INT 1
11188: DEC
11189: ST_TO_ADDR
11190: LD_VAR 0 6
11194: PUSH
11195: FOR_TO
11196: IFFALSE 11278
// begin uc_side = side ;
11198: LD_ADDR_OWVAR 20
11202: PUSH
11203: LD_VAR 0 1
11207: ST_TO_ADDR
// uc_nation = nation ;
11208: LD_ADDR_OWVAR 21
11212: PUSH
11213: LD_VAR 0 2
11217: ST_TO_ADDR
// hc_name =  ;
11218: LD_ADDR_OWVAR 26
11222: PUSH
11223: LD_STRING 
11225: ST_TO_ADDR
// hc_gallery =  ;
11226: LD_ADDR_OWVAR 33
11230: PUSH
11231: LD_STRING 
11233: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11234: LD_INT 0
11236: PPUSH
11237: LD_INT 8
11239: PPUSH
11240: LD_VAR 0 8
11244: PPUSH
11245: CALL_OW 380
// un = CreateHuman ;
11249: LD_ADDR_VAR 0 16
11253: PUSH
11254: CALL_OW 44
11258: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11259: LD_VAR 0 16
11263: PPUSH
11264: LD_VAR 0 9
11268: PPUSH
11269: LD_INT 0
11271: PPUSH
11272: CALL_OW 49
// end ;
11276: GO 11195
11278: POP
11279: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11280: LD_ADDR_VAR 0 19
11284: PUSH
11285: LD_INT 22
11287: PUSH
11288: LD_VAR 0 1
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: LD_INT 2
11299: PUSH
11300: LD_INT 25
11302: PUSH
11303: LD_INT 1
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 25
11312: PUSH
11313: LD_INT 5
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 25
11322: PUSH
11323: LD_INT 8
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: LD_INT 25
11332: PUSH
11333: LD_INT 9
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PPUSH
11351: CALL_OW 69
11355: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11356: LD_ADDR_VAR 0 18
11360: PUSH
11361: LD_INT 22
11363: PUSH
11364: LD_VAR 0 1
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 25
11375: PUSH
11376: LD_INT 4
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PPUSH
11387: CALL_OW 69
11391: ST_TO_ADDR
// for i in medic_list do
11392: LD_ADDR_VAR 0 14
11396: PUSH
11397: LD_VAR 0 18
11401: PUSH
11402: FOR_IN
11403: IFFALSE 11421
// ComMoveToArea ( i , healArea ) ;
11405: LD_VAR 0 14
11409: PPUSH
11410: LD_VAR 0 10
11414: PPUSH
11415: CALL_OW 113
11419: GO 11402
11421: POP
11422: POP
// if strategy = 1 then
11423: LD_VAR 0 12
11427: PUSH
11428: LD_INT 1
11430: EQUAL
11431: IFFALSE 12148
// begin repeat wait ( 0 0$3 ) ;
11433: LD_INT 105
11435: PPUSH
11436: CALL_OW 67
// for i in soldiersOK_list do
11440: LD_ADDR_VAR 0 14
11444: PUSH
11445: LD_VAR 0 19
11449: PUSH
11450: FOR_IN
11451: IFFALSE 11485
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11453: LD_VAR 0 14
11457: PPUSH
11458: LD_INT 80
11460: PPUSH
11461: LD_INT 109
11463: PPUSH
11464: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11468: LD_VAR 0 14
11472: PPUSH
11473: LD_INT 39
11475: PPUSH
11476: LD_INT 49
11478: PPUSH
11479: CALL_OW 174
// end ;
11483: GO 11450
11485: POP
11486: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11487: LD_INT 13
11489: PPUSH
11490: LD_INT 22
11492: PUSH
11493: LD_VAR 0 1
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PPUSH
11502: CALL_OW 70
11506: PUSH
11507: LD_INT 0
11509: GREATER
11510: IFFALSE 11433
// repeat wait ( 0 0$1 ) ;
11512: LD_INT 35
11514: PPUSH
11515: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11519: LD_ADDR_VAR 0 17
11523: PUSH
11524: LD_INT 22
11526: PUSH
11527: LD_VAR 0 1
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 1
11538: PUSH
11539: LD_INT 3
11541: PUSH
11542: LD_INT 24
11544: PUSH
11545: LD_INT 550
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 24
11558: PUSH
11559: LD_INT 250
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PPUSH
11575: CALL_OW 69
11579: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11580: LD_ADDR_VAR 0 19
11584: PUSH
11585: LD_INT 22
11587: PUSH
11588: LD_VAR 0 1
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 2
11599: PUSH
11600: LD_INT 25
11602: PUSH
11603: LD_INT 1
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 25
11612: PUSH
11613: LD_INT 5
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 25
11622: PUSH
11623: LD_INT 8
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 25
11632: PUSH
11633: LD_INT 9
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: PUSH
11647: LD_INT 24
11649: PUSH
11650: LD_INT 1000
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: LIST
11661: PPUSH
11662: CALL_OW 69
11666: ST_TO_ADDR
// if medicCount > 0 then
11667: LD_VAR 0 7
11671: PUSH
11672: LD_INT 0
11674: GREATER
11675: IFFALSE 11749
// begin if damageUnit_list > 0 then
11677: LD_VAR 0 17
11681: PUSH
11682: LD_INT 0
11684: GREATER
11685: IFFALSE 11749
// begin for i in damageUnit_list do
11687: LD_ADDR_VAR 0 14
11691: PUSH
11692: LD_VAR 0 17
11696: PUSH
11697: FOR_IN
11698: IFFALSE 11747
// begin ComMoveToArea ( i , healArea ) ;
11700: LD_VAR 0 14
11704: PPUSH
11705: LD_VAR 0 10
11709: PPUSH
11710: CALL_OW 113
// for j in medic_list do
11714: LD_ADDR_VAR 0 15
11718: PUSH
11719: LD_VAR 0 18
11723: PUSH
11724: FOR_IN
11725: IFFALSE 11743
// AddComHeal ( j , i ) ;
11727: LD_VAR 0 15
11731: PPUSH
11732: LD_VAR 0 14
11736: PPUSH
11737: CALL_OW 188
11741: GO 11724
11743: POP
11744: POP
// end ;
11745: GO 11697
11747: POP
11748: POP
// end ; end ; for i in soldiersOK_list do
11749: LD_ADDR_VAR 0 14
11753: PUSH
11754: LD_VAR 0 19
11758: PUSH
11759: FOR_IN
11760: IFFALSE 11942
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11762: LD_ADDR_VAR 0 22
11766: PUSH
11767: LD_INT 22
11769: PUSH
11770: LD_VAR 0 11
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PPUSH
11779: CALL_OW 69
11783: PUSH
11784: LD_EXP 45
11788: DIFF
11789: PPUSH
11790: LD_VAR 0 14
11794: PPUSH
11795: CALL_OW 74
11799: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11800: LD_ADDR_VAR 0 23
11804: PUSH
11805: LD_INT 22
11807: PUSH
11808: LD_VAR 0 11
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 2
11819: PUSH
11820: LD_INT 59
11822: PUSH
11823: EMPTY
11824: LIST
11825: PUSH
11826: LD_INT 21
11828: PUSH
11829: LD_INT 1
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: LD_INT 21
11838: PUSH
11839: LD_INT 2
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: PPUSH
11859: CALL_OW 69
11863: PPUSH
11864: LD_VAR 0 14
11868: PPUSH
11869: CALL_OW 74
11873: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11874: LD_VAR 0 14
11878: PPUSH
11879: LD_VAR 0 22
11883: PPUSH
11884: CALL_OW 296
11888: PUSH
11889: LD_INT 8
11891: PLUS
11892: PUSH
11893: LD_VAR 0 14
11897: PPUSH
11898: LD_VAR 0 23
11902: PPUSH
11903: CALL_OW 296
11907: LESS
11908: IFFALSE 11926
// begin ComAttackUnit ( i , target1 ) ;
11910: LD_VAR 0 14
11914: PPUSH
11915: LD_VAR 0 22
11919: PPUSH
11920: CALL_OW 115
// end else
11924: GO 11940
// begin ComAttackUnit ( i , target2 ) ;
11926: LD_VAR 0 14
11930: PPUSH
11931: LD_VAR 0 23
11935: PPUSH
11936: CALL_OW 115
// end ; end ;
11940: GO 11759
11942: POP
11943: POP
// for i in soldiersOK_list do
11944: LD_ADDR_VAR 0 14
11948: PUSH
11949: LD_VAR 0 19
11953: PUSH
11954: FOR_IN
11955: IFFALSE 12137
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11957: LD_ADDR_VAR 0 22
11961: PUSH
11962: LD_INT 22
11964: PUSH
11965: LD_VAR 0 11
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PPUSH
11974: CALL_OW 69
11978: PUSH
11979: LD_EXP 45
11983: DIFF
11984: PPUSH
11985: LD_VAR 0 14
11989: PPUSH
11990: CALL_OW 74
11994: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11995: LD_ADDR_VAR 0 23
11999: PUSH
12000: LD_INT 22
12002: PUSH
12003: LD_VAR 0 11
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 2
12014: PUSH
12015: LD_INT 59
12017: PUSH
12018: EMPTY
12019: LIST
12020: PUSH
12021: LD_INT 21
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 21
12033: PUSH
12034: LD_INT 2
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: EMPTY
12052: LIST
12053: PPUSH
12054: CALL_OW 69
12058: PPUSH
12059: LD_VAR 0 14
12063: PPUSH
12064: CALL_OW 74
12068: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12069: LD_VAR 0 14
12073: PPUSH
12074: LD_VAR 0 22
12078: PPUSH
12079: CALL_OW 296
12083: PUSH
12084: LD_INT 8
12086: PLUS
12087: PUSH
12088: LD_VAR 0 14
12092: PPUSH
12093: LD_VAR 0 23
12097: PPUSH
12098: CALL_OW 296
12102: LESS
12103: IFFALSE 12121
// begin ComAttackUnit ( i , target1 ) ;
12105: LD_VAR 0 14
12109: PPUSH
12110: LD_VAR 0 22
12114: PPUSH
12115: CALL_OW 115
// end else
12119: GO 12135
// begin ComAttackUnit ( i , target2 ) ;
12121: LD_VAR 0 14
12125: PPUSH
12126: LD_VAR 0 23
12130: PPUSH
12131: CALL_OW 115
// end ; end ;
12135: GO 11954
12137: POP
12138: POP
// until soldiersOK_list = [ ] ;
12139: LD_VAR 0 19
12143: PUSH
12144: EMPTY
12145: EQUAL
12146: IFFALSE 11512
// end ; if strategy = 2 then
12148: LD_VAR 0 12
12152: PUSH
12153: LD_INT 2
12155: EQUAL
12156: IFFALSE 12861
// begin repeat wait ( 0 0$1 ) ;
12158: LD_INT 35
12160: PPUSH
12161: CALL_OW 67
// for i in soldiersOK_list do
12165: LD_ADDR_VAR 0 14
12169: PUSH
12170: LD_VAR 0 19
12174: PUSH
12175: FOR_IN
12176: IFFALSE 12210
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
12178: LD_VAR 0 14
12182: PPUSH
12183: LD_INT 117
12185: PPUSH
12186: LD_INT 97
12188: PPUSH
12189: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
12193: LD_VAR 0 14
12197: PPUSH
12198: LD_INT 94
12200: PPUSH
12201: LD_INT 50
12203: PPUSH
12204: CALL_OW 174
// end ;
12208: GO 12175
12210: POP
12211: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
12212: LD_INT 14
12214: PPUSH
12215: LD_INT 22
12217: PUSH
12218: LD_VAR 0 1
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 70
12231: PUSH
12232: LD_INT 0
12234: GREATER
12235: IFFALSE 12158
// repeat wait ( 0 0$3 ) ;
12237: LD_INT 105
12239: PPUSH
12240: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12244: LD_ADDR_VAR 0 17
12248: PUSH
12249: LD_INT 22
12251: PUSH
12252: LD_VAR 0 1
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 1
12263: PUSH
12264: LD_INT 3
12266: PUSH
12267: LD_INT 24
12269: PUSH
12270: LD_INT 550
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 24
12283: PUSH
12284: LD_INT 250
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PPUSH
12300: CALL_OW 69
12304: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12305: LD_ADDR_VAR 0 19
12309: PUSH
12310: LD_INT 22
12312: PUSH
12313: LD_VAR 0 1
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 2
12324: PUSH
12325: LD_INT 25
12327: PUSH
12328: LD_INT 1
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 25
12337: PUSH
12338: LD_INT 5
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 25
12347: PUSH
12348: LD_INT 8
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 25
12357: PUSH
12358: LD_INT 9
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: PUSH
12372: LD_INT 24
12374: PUSH
12375: LD_INT 1000
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: LIST
12386: PPUSH
12387: CALL_OW 69
12391: ST_TO_ADDR
// if medicCount > 0 then
12392: LD_VAR 0 7
12396: PUSH
12397: LD_INT 0
12399: GREATER
12400: IFFALSE 12474
// begin if damageUnit_list > 0 then
12402: LD_VAR 0 17
12406: PUSH
12407: LD_INT 0
12409: GREATER
12410: IFFALSE 12474
// begin for i in damageUnit_list do
12412: LD_ADDR_VAR 0 14
12416: PUSH
12417: LD_VAR 0 17
12421: PUSH
12422: FOR_IN
12423: IFFALSE 12472
// begin ComMoveToArea ( i , healArea ) ;
12425: LD_VAR 0 14
12429: PPUSH
12430: LD_VAR 0 10
12434: PPUSH
12435: CALL_OW 113
// for j in medic_list do
12439: LD_ADDR_VAR 0 15
12443: PUSH
12444: LD_VAR 0 18
12448: PUSH
12449: FOR_IN
12450: IFFALSE 12468
// AddComHeal ( j , i ) ;
12452: LD_VAR 0 15
12456: PPUSH
12457: LD_VAR 0 14
12461: PPUSH
12462: CALL_OW 188
12466: GO 12449
12468: POP
12469: POP
// end ;
12470: GO 12422
12472: POP
12473: POP
// end ; end ; for i in soldiersOK_list do
12474: LD_ADDR_VAR 0 14
12478: PUSH
12479: LD_VAR 0 19
12483: PUSH
12484: FOR_IN
12485: IFFALSE 12661
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12487: LD_ADDR_VAR 0 22
12491: PUSH
12492: LD_INT 22
12494: PUSH
12495: LD_VAR 0 11
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PPUSH
12504: CALL_OW 69
12508: PPUSH
12509: LD_VAR 0 14
12513: PPUSH
12514: CALL_OW 74
12518: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12519: LD_ADDR_VAR 0 23
12523: PUSH
12524: LD_INT 22
12526: PUSH
12527: LD_VAR 0 11
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 2
12538: PUSH
12539: LD_INT 59
12541: PUSH
12542: EMPTY
12543: LIST
12544: PUSH
12545: LD_INT 21
12547: PUSH
12548: LD_INT 1
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: LD_INT 21
12557: PUSH
12558: LD_INT 2
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: EMPTY
12576: LIST
12577: PPUSH
12578: CALL_OW 69
12582: PPUSH
12583: LD_VAR 0 14
12587: PPUSH
12588: CALL_OW 74
12592: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12593: LD_VAR 0 14
12597: PPUSH
12598: LD_VAR 0 22
12602: PPUSH
12603: CALL_OW 296
12607: PUSH
12608: LD_INT 8
12610: PLUS
12611: PUSH
12612: LD_VAR 0 14
12616: PPUSH
12617: LD_VAR 0 23
12621: PPUSH
12622: CALL_OW 296
12626: LESS
12627: IFFALSE 12645
// begin ComAttackUnit ( i , target1 ) ;
12629: LD_VAR 0 14
12633: PPUSH
12634: LD_VAR 0 22
12638: PPUSH
12639: CALL_OW 115
// end else
12643: GO 12659
// begin ComAttackUnit ( i , target2 ) ;
12645: LD_VAR 0 14
12649: PPUSH
12650: LD_VAR 0 23
12654: PPUSH
12655: CALL_OW 115
// end ; end ;
12659: GO 12484
12661: POP
12662: POP
// for i in soldiersOK_list do
12663: LD_ADDR_VAR 0 14
12667: PUSH
12668: LD_VAR 0 19
12672: PUSH
12673: FOR_IN
12674: IFFALSE 12850
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12676: LD_ADDR_VAR 0 22
12680: PUSH
12681: LD_INT 22
12683: PUSH
12684: LD_VAR 0 11
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PPUSH
12693: CALL_OW 69
12697: PPUSH
12698: LD_VAR 0 14
12702: PPUSH
12703: CALL_OW 74
12707: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12708: LD_ADDR_VAR 0 23
12712: PUSH
12713: LD_INT 22
12715: PUSH
12716: LD_VAR 0 11
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 2
12727: PUSH
12728: LD_INT 59
12730: PUSH
12731: EMPTY
12732: LIST
12733: PUSH
12734: LD_INT 21
12736: PUSH
12737: LD_INT 1
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 21
12746: PUSH
12747: LD_INT 2
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: EMPTY
12765: LIST
12766: PPUSH
12767: CALL_OW 69
12771: PPUSH
12772: LD_VAR 0 14
12776: PPUSH
12777: CALL_OW 74
12781: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12782: LD_VAR 0 14
12786: PPUSH
12787: LD_VAR 0 22
12791: PPUSH
12792: CALL_OW 296
12796: PUSH
12797: LD_INT 8
12799: PLUS
12800: PUSH
12801: LD_VAR 0 14
12805: PPUSH
12806: LD_VAR 0 23
12810: PPUSH
12811: CALL_OW 296
12815: LESS
12816: IFFALSE 12834
// begin ComAttackUnit ( i , target1 ) ;
12818: LD_VAR 0 14
12822: PPUSH
12823: LD_VAR 0 22
12827: PPUSH
12828: CALL_OW 115
// end else
12832: GO 12848
// begin ComAttackUnit ( i , target2 ) ;
12834: LD_VAR 0 14
12838: PPUSH
12839: LD_VAR 0 23
12843: PPUSH
12844: CALL_OW 115
// end ; end ;
12848: GO 12673
12850: POP
12851: POP
// until soldiersOK_list = [ ] ;
12852: LD_VAR 0 19
12856: PUSH
12857: EMPTY
12858: EQUAL
12859: IFFALSE 12237
// end ; end ; end_of_file
12861: LD_VAR 0 13
12865: RET
// every 0 0$01 do
12866: GO 12868
12868: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12869: LD_INT 22
12871: PUSH
12872: LD_INT 1
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 25
12881: PUSH
12882: LD_INT 2
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PPUSH
12893: CALL_OW 69
12897: PUSH
12898: LD_INT 0
12900: EQUAL
12901: IFFALSE 12915
// SetClass ( JMM , 2 ) ;
12903: LD_EXP 1
12907: PPUSH
12908: LD_INT 2
12910: PPUSH
12911: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12915: LD_STRING M1
12917: PPUSH
12918: CALL_OW 337
// case difficulty of 1 :
12922: LD_OWVAR 67
12926: PUSH
12927: LD_INT 1
12929: DOUBLE
12930: EQUAL
12931: IFTRUE 12935
12933: GO 12945
12935: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12936: LD_STRING M1-1
12938: PPUSH
12939: CALL_OW 337
12943: GO 12982
12945: LD_INT 2
12947: DOUBLE
12948: EQUAL
12949: IFTRUE 12953
12951: GO 12963
12953: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12954: LD_STRING M1-2
12956: PPUSH
12957: CALL_OW 337
12961: GO 12982
12963: LD_INT 3
12965: DOUBLE
12966: EQUAL
12967: IFTRUE 12971
12969: GO 12981
12971: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12972: LD_STRING M1-3
12974: PPUSH
12975: CALL_OW 337
12979: GO 12982
12981: POP
// ChangeMissionObjectives ( M1cont ) ;
12982: LD_STRING M1cont
12984: PPUSH
12985: CALL_OW 337
// wait ( 0 0$2 ) ;
12989: LD_INT 70
12991: PPUSH
12992: CALL_OW 67
// SaveForQuickRestart ;
12996: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
13000: LD_INT 525
13002: PPUSH
13003: LD_INT 700
13005: PPUSH
13006: CALL_OW 12
13010: PPUSH
13011: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
13015: LD_INT 5
13017: PPUSH
13018: LD_INT 82
13020: PPUSH
13021: LD_INT 38
13023: PPUSH
13024: LD_INT 10
13026: PPUSH
13027: LD_INT 1
13029: PPUSH
13030: CALL_OW 56
// wait ( 0 0$14 ) ;
13034: LD_INT 490
13036: PPUSH
13037: CALL_OW 67
// firstCrateSpawn := true ;
13041: LD_ADDR_EXP 41
13045: PUSH
13046: LD_INT 1
13048: ST_TO_ADDR
// end ;
13049: END
// every 0 0$02 trigger firstCrateSpawn do
13050: LD_EXP 41
13054: IFFALSE 13417
13056: GO 13058
13058: DISABLE
// begin if IsOk ( Lisa ) then
13059: LD_EXP 2
13063: PPUSH
13064: CALL_OW 302
13068: IFFALSE 13084
// Say ( Lisa , DR0-Lisa-1 ) else
13070: LD_EXP 2
13074: PPUSH
13075: LD_STRING DR0-Lisa-1
13077: PPUSH
13078: CALL_OW 88
13082: GO 13230
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
13084: LD_INT 22
13086: PUSH
13087: LD_INT 1
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: PUSH
13094: LD_INT 21
13096: PUSH
13097: LD_INT 1
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 26
13106: PUSH
13107: LD_INT 1
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 2
13116: PUSH
13117: LD_INT 25
13119: PUSH
13120: LD_INT 1
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 25
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 25
13139: PUSH
13140: LD_INT 3
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 25
13149: PUSH
13150: LD_INT 4
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: PPUSH
13170: CALL_OW 69
13174: PUSH
13175: LD_EXP 1
13179: PUSH
13180: LD_EXP 8
13184: PUSH
13185: LD_EXP 5
13189: PUSH
13190: LD_EXP 6
13194: PUSH
13195: LD_EXP 7
13199: PUSH
13200: LD_EXP 4
13204: PUSH
13205: LD_EXP 3
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: DIFF
13219: PPUSH
13220: LD_STRING DR0-Sol1-1
13222: PPUSH
13223: LD_STRING DR0-Sol1-1
13225: PPUSH
13226: CALL 6259 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
13230: LD_INT 22
13232: PUSH
13233: LD_INT 1
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 21
13242: PUSH
13243: LD_INT 1
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 26
13252: PUSH
13253: LD_INT 1
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: LD_INT 2
13262: PUSH
13263: LD_INT 25
13265: PUSH
13266: LD_INT 1
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PUSH
13273: LD_INT 25
13275: PUSH
13276: LD_INT 2
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PUSH
13283: LD_INT 25
13285: PUSH
13286: LD_INT 3
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 25
13295: PUSH
13296: LD_INT 4
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: PPUSH
13316: CALL_OW 69
13320: PUSH
13321: LD_EXP 1
13325: PUSH
13326: LD_EXP 8
13330: PUSH
13331: LD_EXP 5
13335: PUSH
13336: LD_EXP 2
13340: PUSH
13341: LD_EXP 6
13345: PUSH
13346: LD_EXP 7
13350: PUSH
13351: LD_EXP 4
13355: PUSH
13356: LD_EXP 3
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: DIFF
13371: PPUSH
13372: LD_STRING DR0-Sol2-1
13374: PPUSH
13375: LD_STRING DR0-Sol2-1
13377: PPUSH
13378: CALL 6259 0 3
// if IsOk ( Cyrus ) then
13382: LD_EXP 4
13386: PPUSH
13387: CALL_OW 302
13391: IFFALSE 13405
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13393: LD_EXP 4
13397: PPUSH
13398: LD_STRING DR0-Cyrus-1
13400: PPUSH
13401: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13405: LD_EXP 1
13409: PPUSH
13410: LD_STRING DR0-JMM-1
13412: PPUSH
13413: CALL_OW 88
// end ;
13417: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13418: LD_EXP 5
13422: PPUSH
13423: CALL_OW 302
13427: PUSH
13428: LD_INT 22
13430: PUSH
13431: LD_INT 1
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 25
13440: PUSH
13441: LD_INT 16
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PPUSH
13452: CALL_OW 69
13456: PUSH
13457: LD_INT 0
13459: GREATER
13460: AND
13461: PUSH
13462: LD_INT 1
13464: PPUSH
13465: CALL_OW 463
13469: NOT
13470: AND
13471: IFFALSE 13749
13473: GO 13475
13475: DISABLE
// begin DialogueOn ;
13476: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13480: LD_EXP 5
13484: PPUSH
13485: LD_STRING D10-Frank-1
13487: PPUSH
13488: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13492: LD_INT 22
13494: PUSH
13495: LD_INT 1
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 21
13504: PUSH
13505: LD_INT 1
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PUSH
13512: LD_INT 2
13514: PUSH
13515: LD_INT 25
13517: PUSH
13518: LD_INT 1
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: LD_INT 25
13527: PUSH
13528: LD_INT 2
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: LD_INT 25
13537: PUSH
13538: LD_INT 3
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: LD_INT 25
13547: PUSH
13548: LD_INT 4
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: LIST
13566: PPUSH
13567: CALL_OW 69
13571: PUSH
13572: LD_EXP 1
13576: PUSH
13577: LD_EXP 5
13581: PUSH
13582: LD_EXP 2
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: LIST
13591: DIFF
13592: PPUSH
13593: LD_STRING D10-Sol1-1
13595: PPUSH
13596: LD_STRING D10-FSol1-1
13598: PPUSH
13599: CALL 6259 0 3
// Say ( Frank , D10-Frank-2 ) ;
13603: LD_EXP 5
13607: PPUSH
13608: LD_STRING D10-Frank-2
13610: PPUSH
13611: CALL_OW 88
// if IsOK ( Lisa ) then
13615: LD_EXP 2
13619: PPUSH
13620: CALL_OW 302
13624: IFFALSE 13640
// begin Say ( Lisa , D10-Lisa-2 ) ;
13626: LD_EXP 2
13630: PPUSH
13631: LD_STRING D10-Lisa-2
13633: PPUSH
13634: CALL_OW 88
// end else
13638: GO 13745
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13640: LD_INT 22
13642: PUSH
13643: LD_INT 1
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PUSH
13650: LD_INT 21
13652: PUSH
13653: LD_INT 1
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 2
13662: PUSH
13663: LD_INT 25
13665: PUSH
13666: LD_INT 1
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 25
13675: PUSH
13676: LD_INT 2
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 25
13685: PUSH
13686: LD_INT 3
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: LD_INT 25
13695: PUSH
13696: LD_INT 4
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: PPUSH
13715: CALL_OW 69
13719: PUSH
13720: LD_EXP 1
13724: PUSH
13725: LD_EXP 5
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: DIFF
13734: PPUSH
13735: LD_STRING D10-Sol1-2
13737: PPUSH
13738: LD_STRING D10-FSol1-2
13740: PPUSH
13741: CALL 6259 0 3
// end ; DialogueOff ;
13745: CALL_OW 7
// end ;
13749: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13750: LD_INT 1
13752: PPUSH
13753: CALL_OW 463
13757: NOT
13758: IFFALSE 14053
13760: GO 13762
13762: DISABLE
// begin HarrisonSupport ;
13763: CALL 2546 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13767: LD_EXP 17
13771: PPUSH
13772: CALL_OW 310
13776: PPUSH
13777: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13781: LD_EXP 17
13785: PPUSH
13786: LD_STRING DEng-Eng1-1
13788: PPUSH
13789: CALL_OW 88
// wait ( 1 1$0 ) ;
13793: LD_INT 2100
13795: PPUSH
13796: CALL_OW 67
// DialogueOn ;
13800: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13804: LD_EXP 14
13808: PPUSH
13809: LD_STRING DRem-Har-1
13811: PPUSH
13812: CALL_OW 94
// if contactWithRussian = 1 then
13816: LD_EXP 22
13820: PUSH
13821: LD_INT 1
13823: EQUAL
13824: IFFALSE 13840
// begin Say ( JMM , DRem-JMM-1 ) ;
13826: LD_EXP 1
13830: PPUSH
13831: LD_STRING DRem-JMM-1
13833: PPUSH
13834: CALL_OW 88
// end else
13838: GO 13852
// begin Say ( JMM , DRem-JMM-1a ) ;
13840: LD_EXP 1
13844: PPUSH
13845: LD_STRING DRem-JMM-1a
13847: PPUSH
13848: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13852: LD_EXP 14
13856: PPUSH
13857: LD_STRING DRem-Har-2
13859: PPUSH
13860: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13864: LD_STRING DenisInDelta
13866: PPUSH
13867: LD_INT 0
13869: PPUSH
13870: CALL_OW 30
13874: PUSH
13875: LD_INT 1
13877: EQUAL
13878: IFFALSE 13894
// begin Say ( JMM , DRem-JMM-2 ) ;
13880: LD_EXP 1
13884: PPUSH
13885: LD_STRING DRem-JMM-2
13887: PPUSH
13888: CALL_OW 88
// end else
13892: GO 13906
// begin Say ( JMM , DRem-JMM-2a ) ;
13894: LD_EXP 1
13898: PPUSH
13899: LD_STRING DRem-JMM-2a
13901: PPUSH
13902: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13906: LD_EXP 14
13910: PPUSH
13911: LD_STRING DRem-Har-3
13913: PPUSH
13914: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13918: LD_EXP 1
13922: PPUSH
13923: LD_STRING DRem-JMM-3
13925: PPUSH
13926: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13930: LD_EXP 14
13934: PPUSH
13935: LD_STRING DRem-Har-4
13937: PPUSH
13938: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13942: LD_STRING DenisInDelta
13944: PPUSH
13945: LD_INT 0
13947: PPUSH
13948: CALL_OW 30
13952: PUSH
13953: LD_INT 1
13955: EQUAL
13956: IFFALSE 14016
// begin Say ( JMM , DRem-JMM-4 ) ;
13958: LD_EXP 1
13962: PPUSH
13963: LD_STRING DRem-JMM-4
13965: PPUSH
13966: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13970: LD_EXP 14
13974: PPUSH
13975: LD_STRING DRem-Har-5
13977: PPUSH
13978: CALL_OW 94
// DialogueOff ;
13982: CALL_OW 7
// wait ( 4 4$00 ) ;
13986: LD_INT 8400
13988: PPUSH
13989: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13993: LD_INT 35
13995: PPUSH
13996: CALL_OW 67
// until not InBattle ( 1 ) ;
14000: LD_INT 1
14002: PPUSH
14003: CALL_OW 463
14007: NOT
14008: IFFALSE 13993
// SpawnDenis ;
14010: CALL 14054 0 0
// end else
14014: GO 14053
// begin DialogueOff ;
14016: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14020: LD_INT 36
14022: PPUSH
14023: LD_INT 1
14025: PPUSH
14026: LD_INT 1
14028: PPUSH
14029: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14033: LD_INT 15
14035: PPUSH
14036: LD_INT 1
14038: PPUSH
14039: LD_INT 1
14041: PPUSH
14042: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14046: LD_STRING MR
14048: PPUSH
14049: CALL_OW 337
// end ; end ;
14053: END
// export function SpawnDenis ; var tmp ; begin
14054: LD_INT 0
14056: PPUSH
14057: PPUSH
// PrepareDenis ;
14058: CALL 2263 0 0
// CenterNowOnUnits ( Denis ) ;
14062: LD_EXP 9
14066: PPUSH
14067: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
14071: LD_ADDR_VAR 0 2
14075: PUSH
14076: LD_INT 22
14078: PUSH
14079: LD_INT 1
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PPUSH
14086: CALL_OW 69
14090: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
14091: LD_EXP 9
14095: PPUSH
14096: LD_VAR 0 2
14100: PPUSH
14101: LD_EXP 9
14105: PPUSH
14106: CALL_OW 74
14110: PPUSH
14111: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14115: LD_INT 35
14117: PPUSH
14118: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
14122: LD_INT 22
14124: PUSH
14125: LD_INT 1
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: LD_INT 91
14134: PUSH
14135: LD_EXP 9
14139: PUSH
14140: LD_INT 10
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PPUSH
14152: CALL_OW 69
14156: IFFALSE 14115
// SetSide ( Denis , 1 ) ;
14158: LD_EXP 9
14162: PPUSH
14163: LD_INT 1
14165: PPUSH
14166: CALL_OW 235
// DialogueOn ;
14170: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
14174: LD_EXP 9
14178: PPUSH
14179: LD_STRING DDen-Den-1
14181: PPUSH
14182: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
14186: LD_EXP 1
14190: PPUSH
14191: LD_STRING DDen-JMM-1
14193: PPUSH
14194: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
14198: LD_EXP 9
14202: PPUSH
14203: LD_STRING DDen-Den-2
14205: PPUSH
14206: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
14210: LD_EXP 1
14214: PPUSH
14215: LD_STRING DDen-JMM-2
14217: PPUSH
14218: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
14222: LD_EXP 9
14226: PPUSH
14227: LD_STRING DDen-Den-3
14229: PPUSH
14230: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
14234: LD_EXP 1
14238: PPUSH
14239: LD_STRING DDen-JMM-3
14241: PPUSH
14242: CALL_OW 88
// DialogueOff ;
14246: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14250: LD_INT 36
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: LD_INT 1
14258: PPUSH
14259: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14263: LD_INT 15
14265: PPUSH
14266: LD_INT 1
14268: PPUSH
14269: LD_INT 1
14271: PPUSH
14272: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14276: LD_STRING MR
14278: PPUSH
14279: CALL_OW 337
// end ;
14283: LD_VAR 0 1
14287: RET
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14288: CALL 14343 0 0
14292: PUSH
14293: LD_EXP 9
14297: PPUSH
14298: CALL_OW 302
14302: AND
14303: PUSH
14304: LD_INT 1
14306: PPUSH
14307: CALL_OW 463
14311: NOT
14312: AND
14313: IFFALSE 14342
14315: GO 14317
14317: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14318: LD_EXP 9
14322: PPUSH
14323: LD_STRING DR1-Den-1
14325: PPUSH
14326: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14330: LD_EXP 1
14334: PPUSH
14335: LD_STRING DR1-JMM-1
14337: PPUSH
14338: CALL_OW 88
// end ;
14342: END
// function CheckOptoLab ; var i ; begin
14343: LD_INT 0
14345: PPUSH
14346: PPUSH
// result = false ;
14347: LD_ADDR_VAR 0 1
14351: PUSH
14352: LD_INT 0
14354: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14355: LD_ADDR_VAR 0 2
14359: PUSH
14360: LD_INT 22
14362: PUSH
14363: LD_INT 1
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 2
14372: PUSH
14373: LD_INT 30
14375: PUSH
14376: LD_INT 7
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: LD_INT 30
14385: PUSH
14386: LD_INT 8
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: LIST
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PPUSH
14402: CALL_OW 69
14406: PUSH
14407: FOR_IN
14408: IFFALSE 14460
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14410: LD_VAR 0 2
14414: PPUSH
14415: LD_INT 1
14417: PPUSH
14418: CALL_OW 268
14422: PUSH
14423: LD_INT 15
14425: EQUAL
14426: PUSH
14427: LD_VAR 0 2
14431: PPUSH
14432: LD_INT 2
14434: PPUSH
14435: CALL_OW 268
14439: PUSH
14440: LD_INT 15
14442: EQUAL
14443: OR
14444: IFFALSE 14456
// begin result = true ;
14446: LD_ADDR_VAR 0 1
14450: PUSH
14451: LD_INT 1
14453: ST_TO_ADDR
// break ;
14454: GO 14460
// end ; break ;
14456: GO 14460
// end ;
14458: GO 14407
14460: POP
14461: POP
// end ;
14462: LD_VAR 0 1
14466: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14467: LD_INT 15
14469: PPUSH
14470: LD_INT 1
14472: PPUSH
14473: CALL_OW 321
14477: PUSH
14478: LD_INT 2
14480: EQUAL
14481: PUSH
14482: LD_EXP 9
14486: PPUSH
14487: CALL_OW 302
14491: AND
14492: PUSH
14493: LD_INT 1
14495: PPUSH
14496: CALL_OW 463
14500: NOT
14501: AND
14502: IFFALSE 14734
14504: GO 14506
14506: DISABLE
// begin DialogueOn ;
14507: CALL_OW 6
// if IsOK ( Denis ) then
14511: LD_EXP 9
14515: PPUSH
14516: CALL_OW 302
14520: IFFALSE 14536
// begin Say ( Denis , DR2-Den-1 ) ;
14522: LD_EXP 9
14526: PPUSH
14527: LD_STRING DR2-Den-1
14529: PPUSH
14530: CALL_OW 88
// end else
14534: GO 14595
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14536: LD_INT 22
14538: PUSH
14539: LD_INT 1
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PUSH
14546: LD_INT 21
14548: PUSH
14549: LD_INT 1
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 25
14558: PUSH
14559: LD_INT 4
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: LIST
14570: PPUSH
14571: CALL_OW 69
14575: PUSH
14576: LD_EXP 1
14580: PUSH
14581: EMPTY
14582: LIST
14583: DIFF
14584: PPUSH
14585: LD_STRING DR2-Sci1-1
14587: PPUSH
14588: LD_STRING DR2-FSci1-1
14590: PPUSH
14591: CALL 6259 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14595: LD_EXP 1
14599: PPUSH
14600: LD_STRING DR2-JMM-1
14602: PPUSH
14603: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14607: LD_INT 22
14609: PUSH
14610: LD_INT 1
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: PUSH
14617: LD_INT 21
14619: PUSH
14620: LD_INT 1
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PUSH
14627: LD_INT 2
14629: PUSH
14630: LD_INT 25
14632: PUSH
14633: LD_INT 1
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 25
14642: PUSH
14643: LD_INT 2
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: LD_INT 25
14652: PUSH
14653: LD_INT 3
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 25
14662: PUSH
14663: LD_INT 4
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: PPUSH
14682: CALL_OW 69
14686: PUSH
14687: LD_EXP 1
14691: PUSH
14692: LD_EXP 9
14696: PUSH
14697: LD_EXP 8
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: DIFF
14707: PPUSH
14708: LD_STRING DR2-Sol1-1
14710: PPUSH
14711: LD_STRING DR2-Sol1-11
14713: PPUSH
14714: CALL 6259 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14718: LD_EXP 1
14722: PPUSH
14723: LD_STRING DR2-JMM-2
14725: PPUSH
14726: CALL_OW 88
// DialogueOff ;
14730: CALL_OW 7
// end ;
14734: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14735: LD_INT 22
14737: PUSH
14738: LD_INT 1
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 30
14747: PUSH
14748: LD_INT 36
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PPUSH
14759: CALL_OW 69
14763: PUSH
14764: LD_INT 0
14766: EQUAL
14767: PUSH
14768: LD_INT 22
14770: PUSH
14771: LD_INT 1
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 21
14780: PUSH
14781: LD_INT 2
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 33
14790: PUSH
14791: LD_INT 2
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: LIST
14802: PPUSH
14803: CALL_OW 69
14807: PUSH
14808: LD_INT 0
14810: GREATER
14811: AND
14812: PUSH
14813: LD_EXP 23
14817: PUSH
14818: LD_INT 0
14820: EQUAL
14821: AND
14822: PUSH
14823: LD_INT 1
14825: PPUSH
14826: CALL_OW 463
14830: NOT
14831: AND
14832: IFFALSE 14969
14834: GO 14836
14836: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14837: LD_INT 22
14839: PUSH
14840: LD_INT 1
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: LD_INT 21
14849: PUSH
14850: LD_INT 1
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 25
14859: PUSH
14860: LD_INT 3
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: LD_INT 26
14869: PUSH
14870: LD_INT 1
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL_OW 69
14887: PUSH
14888: LD_EXP 1
14892: PUSH
14893: LD_EXP 6
14897: PUSH
14898: LD_EXP 7
14902: PUSH
14903: LD_EXP 9
14907: PUSH
14908: LD_EXP 15
14912: PUSH
14913: LD_EXP 3
14917: PUSH
14918: LD_EXP 4
14922: PUSH
14923: LD_EXP 2
14927: PUSH
14928: LD_EXP 5
14932: PUSH
14933: LD_EXP 8
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: DIFF
14950: PPUSH
14951: LD_STRING D3a-Mech1-1
14953: PPUSH
14954: LD_STRING D3a-Mech1-1
14956: PPUSH
14957: CALL 6259 0 3
// firstTower = 2 ;
14961: LD_ADDR_EXP 23
14965: PUSH
14966: LD_INT 2
14968: ST_TO_ADDR
// end ;
14969: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14970: LD_INT 22
14972: PUSH
14973: LD_INT 3
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: LD_INT 21
14982: PUSH
14983: LD_INT 3
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PPUSH
14994: CALL_OW 69
14998: PUSH
14999: LD_INT 0
15001: EQUAL
15002: IFFALSE 15117
15004: GO 15006
15006: DISABLE
15007: LD_INT 0
15009: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
15010: LD_ADDR_VAR 0 1
15014: PUSH
15015: LD_INT 22
15017: PUSH
15018: LD_INT 1
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 21
15027: PUSH
15028: LD_INT 1
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: LD_INT 2
15037: PUSH
15038: LD_INT 25
15040: PUSH
15041: LD_INT 1
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 25
15050: PUSH
15051: LD_INT 2
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 25
15060: PUSH
15061: LD_INT 3
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 25
15070: PUSH
15071: LD_INT 4
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: LIST
15089: PPUSH
15090: CALL_OW 69
15094: PUSH
15095: FOR_IN
15096: IFFALSE 15115
// AddExperience ( i , 1 , 10000 ) ;
15098: LD_VAR 0 1
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: LD_INT 10000
15108: PPUSH
15109: CALL_OW 492
15113: GO 15095
15115: POP
15116: POP
// end ;
15117: PPOPN 1
15119: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
15120: LD_INT 22
15122: PUSH
15123: LD_INT 1
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 30
15132: PUSH
15133: LD_INT 36
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PPUSH
15144: CALL_OW 69
15148: PUSH
15149: LD_INT 0
15151: GREATER
15152: PUSH
15153: LD_INT 22
15155: PUSH
15156: LD_INT 1
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 21
15165: PUSH
15166: LD_INT 2
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 33
15175: PUSH
15176: LD_INT 2
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: LIST
15187: PPUSH
15188: CALL_OW 69
15192: PUSH
15193: LD_INT 0
15195: GREATER
15196: AND
15197: PUSH
15198: CALL 15790 0 0
15202: AND
15203: PUSH
15204: LD_INT 1
15206: PPUSH
15207: CALL_OW 463
15211: NOT
15212: AND
15213: IFFALSE 15787
15215: GO 15217
15217: DISABLE
15218: LD_INT 0
15220: PPUSH
15221: PPUSH
15222: PPUSH
15223: PPUSH
15224: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
15225: LD_ADDR_VAR 0 3
15229: PUSH
15230: LD_INT 22
15232: PUSH
15233: LD_INT 1
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 30
15242: PUSH
15243: LD_INT 36
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PPUSH
15254: CALL_OW 69
15258: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
15259: LD_ADDR_VAR 0 4
15263: PUSH
15264: LD_INT 22
15266: PUSH
15267: LD_INT 1
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 21
15276: PUSH
15277: LD_INT 2
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 33
15286: PUSH
15287: LD_INT 2
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: LIST
15298: PPUSH
15299: CALL_OW 69
15303: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15304: LD_ADDR_VAR 0 5
15308: PUSH
15309: EMPTY
15310: ST_TO_ADDR
// for i in tmpControlTowers do
15311: LD_ADDR_VAR 0 1
15315: PUSH
15316: LD_VAR 0 3
15320: PUSH
15321: FOR_IN
15322: IFFALSE 15785
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15324: LD_EXP 1
15328: PPUSH
15329: CALL_OW 310
15333: PUSH
15334: LD_VAR 0 1
15338: EQUAL
15339: PUSH
15340: LD_EXP 1
15344: PPUSH
15345: CALL_OW 257
15349: PUSH
15350: LD_INT 3
15352: EQUAL
15353: AND
15354: IFFALSE 15484
// begin InGameOn ;
15356: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15360: LD_VAR 0 4
15364: PUSH
15365: LD_INT 1
15367: ARRAY
15368: PPUSH
15369: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15373: LD_EXP 1
15377: PPUSH
15378: LD_STRING D4a-JMM-1
15380: PPUSH
15381: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15385: LD_VAR 0 4
15389: PUSH
15390: LD_INT 1
15392: ARRAY
15393: PPUSH
15394: LD_EXP 1
15398: PPUSH
15399: CALL_OW 53
// wait ( 0 0$1 ) ;
15403: LD_INT 35
15405: PPUSH
15406: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15410: LD_VAR 0 4
15414: PUSH
15415: LD_INT 1
15417: ARRAY
15418: PPUSH
15419: LD_VAR 0 4
15423: PUSH
15424: LD_INT 1
15426: ARRAY
15427: PPUSH
15428: CALL_OW 250
15432: PUSH
15433: LD_INT 3
15435: PLUS
15436: PPUSH
15437: LD_VAR 0 4
15441: PUSH
15442: LD_INT 1
15444: ARRAY
15445: PPUSH
15446: CALL_OW 251
15450: PUSH
15451: LD_INT 2
15453: MINUS
15454: PPUSH
15455: CALL_OW 111
// wait ( 0 0$2 ) ;
15459: LD_INT 70
15461: PPUSH
15462: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15466: LD_EXP 1
15470: PPUSH
15471: LD_STRING D4b-JMM-1
15473: PPUSH
15474: CALL_OW 88
// InGameOff ;
15478: CALL_OW 9
// end else
15482: GO 15783
// begin InGameOn ;
15484: CALL_OW 8
// for j in UnitsInside ( i ) do
15488: LD_ADDR_VAR 0 2
15492: PUSH
15493: LD_VAR 0 1
15497: PPUSH
15498: CALL_OW 313
15502: PUSH
15503: FOR_IN
15504: IFFALSE 15539
// if GetClass ( j ) = 3 then
15506: LD_VAR 0 2
15510: PPUSH
15511: CALL_OW 257
15515: PUSH
15516: LD_INT 3
15518: EQUAL
15519: IFFALSE 15537
// tmpMechanicInside = tmpMechanicInside ^ j ;
15521: LD_ADDR_VAR 0 5
15525: PUSH
15526: LD_VAR 0 5
15530: PUSH
15531: LD_VAR 0 2
15535: ADD
15536: ST_TO_ADDR
15537: GO 15503
15539: POP
15540: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15541: LD_VAR 0 5
15545: PUSH
15546: LD_INT 1
15548: ARRAY
15549: PPUSH
15550: CALL_OW 258
15554: PUSH
15555: LD_INT 1
15557: EQUAL
15558: IFFALSE 15576
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15560: LD_VAR 0 5
15564: PUSH
15565: LD_INT 1
15567: ARRAY
15568: PPUSH
15569: LD_STRING D4a-Mech1-1
15571: PPUSH
15572: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15576: LD_VAR 0 5
15580: PUSH
15581: LD_INT 1
15583: ARRAY
15584: PPUSH
15585: CALL_OW 258
15589: PUSH
15590: LD_INT 2
15592: EQUAL
15593: IFFALSE 15611
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15595: LD_VAR 0 5
15599: PUSH
15600: LD_INT 1
15602: ARRAY
15603: PPUSH
15604: LD_STRING D4a-FMech1-1
15606: PPUSH
15607: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15611: LD_VAR 0 4
15615: PUSH
15616: LD_INT 1
15618: ARRAY
15619: PPUSH
15620: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15624: LD_VAR 0 4
15628: PUSH
15629: LD_INT 1
15631: ARRAY
15632: PPUSH
15633: LD_VAR 0 5
15637: PUSH
15638: LD_INT 1
15640: ARRAY
15641: PPUSH
15642: CALL_OW 53
// wait ( 0 0$1 ) ;
15646: LD_INT 35
15648: PPUSH
15649: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15653: LD_VAR 0 4
15657: PUSH
15658: LD_INT 1
15660: ARRAY
15661: PPUSH
15662: LD_VAR 0 4
15666: PUSH
15667: LD_INT 1
15669: ARRAY
15670: PPUSH
15671: CALL_OW 250
15675: PUSH
15676: LD_INT 3
15678: PLUS
15679: PPUSH
15680: LD_VAR 0 4
15684: PUSH
15685: LD_INT 1
15687: ARRAY
15688: PPUSH
15689: CALL_OW 251
15693: PUSH
15694: LD_INT 2
15696: MINUS
15697: PPUSH
15698: CALL_OW 111
// wait ( 0 0$2 ) ;
15702: LD_INT 70
15704: PPUSH
15705: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15709: LD_VAR 0 5
15713: PUSH
15714: LD_INT 1
15716: ARRAY
15717: PPUSH
15718: CALL_OW 258
15722: PUSH
15723: LD_INT 1
15725: EQUAL
15726: IFFALSE 15744
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15728: LD_VAR 0 5
15732: PUSH
15733: LD_INT 1
15735: ARRAY
15736: PPUSH
15737: LD_STRING D4b-Mech1-1
15739: PPUSH
15740: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15744: LD_VAR 0 5
15748: PUSH
15749: LD_INT 1
15751: ARRAY
15752: PPUSH
15753: CALL_OW 258
15757: PUSH
15758: LD_INT 2
15760: EQUAL
15761: IFFALSE 15779
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15763: LD_VAR 0 5
15767: PUSH
15768: LD_INT 1
15770: ARRAY
15771: PPUSH
15772: LD_STRING D4b-FMech1-1
15774: PPUSH
15775: CALL_OW 88
// InGameOff ;
15779: CALL_OW 9
// end ; end ;
15783: GO 15321
15785: POP
15786: POP
// end ;
15787: PPOPN 5
15789: END
// function CheckMehInside ; var i , j ; begin
15790: LD_INT 0
15792: PPUSH
15793: PPUSH
15794: PPUSH
// result = false ;
15795: LD_ADDR_VAR 0 1
15799: PUSH
15800: LD_INT 0
15802: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15803: LD_ADDR_VAR 0 2
15807: PUSH
15808: LD_INT 22
15810: PUSH
15811: LD_INT 1
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 30
15820: PUSH
15821: LD_INT 36
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PPUSH
15832: CALL_OW 69
15836: PUSH
15837: FOR_IN
15838: IFFALSE 15889
// begin for j in UnitsInside ( i ) do
15840: LD_ADDR_VAR 0 3
15844: PUSH
15845: LD_VAR 0 2
15849: PPUSH
15850: CALL_OW 313
15854: PUSH
15855: FOR_IN
15856: IFFALSE 15885
// begin if GetClass ( j ) = 3 then
15858: LD_VAR 0 3
15862: PPUSH
15863: CALL_OW 257
15867: PUSH
15868: LD_INT 3
15870: EQUAL
15871: IFFALSE 15883
// begin result = true ;
15873: LD_ADDR_VAR 0 1
15877: PUSH
15878: LD_INT 1
15880: ST_TO_ADDR
// break ;
15881: GO 15885
// end ; end ;
15883: GO 15855
15885: POP
15886: POP
// end ;
15887: GO 15837
15889: POP
15890: POP
// end ;
15891: LD_VAR 0 1
15895: RET
// every 12 12$0 do
15896: GO 15898
15898: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15899: LD_INT 35
15901: PPUSH
15902: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
15906: LD_INT 1
15908: PPUSH
15909: CALL_OW 463
15913: NOT
15914: PUSH
15915: LD_INT 32
15917: PPUSH
15918: LD_INT 81
15920: PUSH
15921: LD_INT 1
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PPUSH
15928: CALL_OW 70
15932: NOT
15933: AND
15934: IFFALSE 15899
// PrepareKurt ;
15936: CALL 19537 0 0
// end ;
15940: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
15941: LD_EXP 15
15945: PPUSH
15946: CALL_OW 302
15950: PUSH
15951: LD_EXP 15
15955: PPUSH
15956: CALL_OW 255
15960: PUSH
15961: LD_INT 1
15963: EQUAL
15964: AND
15965: PUSH
15966: LD_EXP 2
15970: AND
15971: IFFALSE 16136
15973: GO 15975
15975: DISABLE
// begin wait ( 0 0$50 ) ;
15976: LD_INT 1750
15978: PPUSH
15979: CALL_OW 67
// if not IsOk ( Joan ) then
15983: LD_EXP 15
15987: PPUSH
15988: CALL_OW 302
15992: NOT
15993: IFFALSE 15997
// exit ;
15995: GO 16136
// if IsOK ( Lisa ) then
15997: LD_EXP 2
16001: PPUSH
16002: CALL_OW 302
16006: IFFALSE 16136
// begin DialogueOn ;
16008: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
16012: LD_EXP 2
16016: PPUSH
16017: LD_STRING D7-Lisa-1
16019: PPUSH
16020: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
16024: LD_EXP 1
16028: PPUSH
16029: LD_STRING D7-JMM-1
16031: PPUSH
16032: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
16036: LD_EXP 2
16040: PPUSH
16041: LD_STRING D7-Lisa-2
16043: PPUSH
16044: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
16048: LD_EXP 1
16052: PPUSH
16053: LD_STRING D7-JMM-2
16055: PPUSH
16056: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
16060: LD_EXP 2
16064: PPUSH
16065: LD_STRING D7-Lisa-3
16067: PPUSH
16068: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
16072: LD_EXP 1
16076: PPUSH
16077: LD_STRING D7-JMM-3
16079: PPUSH
16080: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
16084: LD_EXP 2
16088: PPUSH
16089: LD_STRING D7-Lisa-4
16091: PPUSH
16092: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
16096: LD_EXP 1
16100: PPUSH
16101: LD_STRING D7-JMM-4
16103: PPUSH
16104: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
16108: LD_EXP 1
16112: PPUSH
16113: LD_STRING D7-JMM-4a
16115: PPUSH
16116: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
16120: LD_EXP 2
16124: PPUSH
16125: LD_STRING D7-Lisa-5
16127: PPUSH
16128: CALL_OW 88
// DialogueOff ;
16132: CALL_OW 7
// end ; end ;
16136: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
16137: LD_EXP 13
16141: PUSH
16142: LD_INT 22
16144: PUSH
16145: LD_INT 1
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 91
16154: PUSH
16155: LD_EXP 13
16159: PUSH
16160: LD_INT 10
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 2
16170: PUSH
16171: LD_INT 25
16173: PUSH
16174: LD_INT 1
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: LD_INT 25
16183: PUSH
16184: LD_INT 2
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 25
16193: PUSH
16194: LD_INT 3
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 25
16203: PUSH
16204: LD_INT 4
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: PPUSH
16223: CALL_OW 69
16227: PUSH
16228: LD_INT 1
16230: GREATER
16231: AND
16232: IFFALSE 16249
16234: GO 16236
16236: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
16237: LD_EXP 13
16241: PPUSH
16242: LD_STRING D5-Sol1-1
16244: PPUSH
16245: CALL_OW 88
// end ;
16249: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
16250: LD_INT 22
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 33
16262: PUSH
16263: LD_INT 2
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PPUSH
16274: CALL_OW 69
16278: PUSH
16279: LD_INT 2
16281: GREATEREQUAL
16282: IFFALSE 16302
16284: GO 16286
16286: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
16287: LD_STRING MRa
16289: PPUSH
16290: CALL_OW 337
// remoteVehiclesBuild = 1 ;
16294: LD_ADDR_EXP 28
16298: PUSH
16299: LD_INT 1
16301: ST_TO_ADDR
// end ;
16302: END
// every 2 2$00 do var i , last ;
16303: GO 16305
16305: DISABLE
16306: LD_INT 0
16308: PPUSH
16309: PPUSH
// begin last := 8 ;
16310: LD_ADDR_VAR 0 2
16314: PUSH
16315: LD_INT 8
16317: ST_TO_ADDR
// for i = 1 to last do
16318: LD_ADDR_VAR 0 1
16322: PUSH
16323: DOUBLE
16324: LD_INT 1
16326: DEC
16327: ST_TO_ADDR
16328: LD_VAR 0 2
16332: PUSH
16333: FOR_TO
16334: IFFALSE 16362
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
16336: LD_INT 6300
16338: PPUSH
16339: LD_INT 12600
16341: PPUSH
16342: CALL_OW 12
16346: PPUSH
16347: CALL_OW 67
// PrepareRandoms ( i ) ;
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL 4165 0 1
// end ;
16360: GO 16333
16362: POP
16363: POP
// end ;
16364: PPOPN 2
16366: END
// every 5 5$20 do
16367: GO 16369
16369: DISABLE
// begin DialogueOn ;
16370: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16374: LD_EXP 10
16378: PPUSH
16379: LD_STRING D12a-Sci-1
16381: PPUSH
16382: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16386: LD_EXP 1
16390: PPUSH
16391: LD_STRING D12a-JMM-1
16393: PPUSH
16394: CALL_OW 88
// DialogueOff ;
16398: CALL_OW 7
// cratesStatus = 1 ;
16402: LD_ADDR_EXP 38
16406: PUSH
16407: LD_INT 1
16409: ST_TO_ADDR
// end ;
16410: END
// every 13 13$0 do
16411: GO 16413
16413: DISABLE
// begin DialogueOn ;
16414: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16418: LD_EXP 10
16422: PPUSH
16423: LD_STRING D12b-Sci-1
16425: PPUSH
16426: CALL_OW 94
// DialogueOff ;
16430: CALL_OW 7
// cratesStatus = 2 ;
16434: LD_ADDR_EXP 38
16438: PUSH
16439: LD_INT 2
16441: ST_TO_ADDR
// end ;
16442: END
// every 32 32$0 do
16443: GO 16445
16445: DISABLE
// begin DialogueOn ;
16446: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16450: LD_EXP 10
16454: PPUSH
16455: LD_STRING D12c-Sci-1
16457: PPUSH
16458: CALL_OW 94
// DialogueOff ;
16462: CALL_OW 7
// wait ( 3 3$0 ) ;
16466: LD_INT 6300
16468: PPUSH
16469: CALL_OW 67
// DialogueOn ;
16473: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16477: LD_EXP 10
16481: PPUSH
16482: LD_STRING D12d-Sci-1
16484: PPUSH
16485: CALL_OW 94
// DialogueOff ;
16489: CALL_OW 7
// cratesStatus = 1 ;
16493: LD_ADDR_EXP 38
16497: PUSH
16498: LD_INT 1
16500: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16501: LD_INT 1400
16503: PPUSH
16504: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16508: LD_INT 35
16510: PPUSH
16511: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
16515: LD_INT 1
16517: PPUSH
16518: CALL_OW 463
16522: NOT
16523: PUSH
16524: LD_INT 32
16526: PPUSH
16527: LD_INT 81
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PPUSH
16537: CALL_OW 70
16541: NOT
16542: AND
16543: IFFALSE 16508
// PrepareJoan ;
16545: CALL 3064 0 0
// end ;
16549: END
// every 42 42$0 do
16550: GO 16552
16552: DISABLE
// begin DialogueOn ;
16553: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16557: LD_EXP 10
16561: PPUSH
16562: LD_STRING D12e-Sci-1
16564: PPUSH
16565: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16569: LD_EXP 1
16573: PPUSH
16574: LD_STRING D12e-JMM-1
16576: PPUSH
16577: CALL_OW 88
// DialogueOff ;
16581: CALL_OW 7
// cratesStatus = 2 ;
16585: LD_ADDR_EXP 38
16589: PUSH
16590: LD_INT 2
16592: ST_TO_ADDR
// end ;
16593: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16594: LD_INT 22
16596: PUSH
16597: LD_INT 6
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 21
16606: PUSH
16607: LD_INT 2
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 34
16616: PUSH
16617: LD_INT 51
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: LIST
16628: PPUSH
16629: CALL_OW 69
16633: PUSH
16634: LD_INT 0
16636: GREATER
16637: IFFALSE 16720
16639: GO 16641
16641: DISABLE
16642: LD_INT 0
16644: PPUSH
// begin enable ;
16645: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16646: LD_ADDR_VAR 0 1
16650: PUSH
16651: LD_INT 22
16653: PUSH
16654: LD_INT 6
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 2
16663: PUSH
16664: LD_INT 21
16666: PUSH
16667: LD_INT 1
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 21
16676: PUSH
16677: LD_INT 2
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: PUSH
16698: FOR_IN
16699: IFFALSE 16718
// ComAgressiveMove ( i , 138 , 168 ) ;
16701: LD_VAR 0 1
16705: PPUSH
16706: LD_INT 138
16708: PPUSH
16709: LD_INT 168
16711: PPUSH
16712: CALL_OW 114
16716: GO 16698
16718: POP
16719: POP
// end ;
16720: PPOPN 1
16722: END
// every 0 0$1 do var i ;
16723: GO 16725
16725: DISABLE
16726: LD_INT 0
16728: PPUSH
// begin enable ;
16729: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16730: LD_ADDR_VAR 0 1
16734: PUSH
16735: LD_INT 4
16737: PPUSH
16738: LD_INT 2
16740: PUSH
16741: LD_INT 22
16743: PUSH
16744: LD_INT 3
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 22
16753: PUSH
16754: LD_INT 6
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: LIST
16765: PUSH
16766: EMPTY
16767: LIST
16768: PPUSH
16769: CALL_OW 70
16773: PUSH
16774: FOR_IN
16775: IFFALSE 16839
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16777: LD_INT 4
16779: PPUSH
16780: LD_INT 22
16782: PUSH
16783: LD_INT 6
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 34
16792: PUSH
16793: LD_INT 51
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PPUSH
16804: CALL_OW 70
16808: PUSH
16809: LD_INT 0
16811: GREATER
16812: IFFALSE 16828
// sendedConvoys = sendedConvoys + 1 ;
16814: LD_ADDR_EXP 39
16818: PUSH
16819: LD_EXP 39
16823: PUSH
16824: LD_INT 1
16826: PLUS
16827: ST_TO_ADDR
// RemoveUnit ( i ) ;
16828: LD_VAR 0 1
16832: PPUSH
16833: CALL_OW 64
// end ;
16837: GO 16774
16839: POP
16840: POP
// end ; end_of_file
16841: PPOPN 1
16843: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16844: LD_VAR 0 1
16848: PUSH
16849: LD_INT 1
16851: EQUAL
16852: PUSH
16853: LD_VAR 0 2
16857: PUSH
16858: LD_INT 3
16860: EQUAL
16861: AND
16862: IFFALSE 16872
// contactWithRussian = 1 ;
16864: LD_ADDR_EXP 22
16868: PUSH
16869: LD_INT 1
16871: ST_TO_ADDR
// end ;
16872: PPOPN 2
16874: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16875: LD_VAR 0 1
16879: PPUSH
16880: CALL_OW 266
16884: PUSH
16885: LD_INT 36
16887: EQUAL
16888: PUSH
16889: LD_VAR 0 1
16893: PPUSH
16894: CALL_OW 255
16898: PUSH
16899: LD_INT 1
16901: EQUAL
16902: AND
16903: PUSH
16904: LD_INT 22
16906: PUSH
16907: LD_INT 1
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 21
16916: PUSH
16917: LD_INT 2
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 33
16926: PUSH
16927: LD_INT 2
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: LIST
16938: PPUSH
16939: CALL_OW 69
16943: PUSH
16944: LD_INT 0
16946: EQUAL
16947: AND
16948: PUSH
16949: LD_EXP 23
16953: PUSH
16954: LD_INT 0
16956: EQUAL
16957: AND
16958: IFFALSE 17038
// begin firstTower = 1 ;
16960: LD_ADDR_EXP 23
16964: PUSH
16965: LD_INT 1
16967: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16968: LD_INT 22
16970: PUSH
16971: LD_INT 1
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: LD_INT 21
16980: PUSH
16981: LD_INT 1
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 25
16990: PUSH
16991: LD_INT 3
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: LD_INT 26
17000: PUSH
17001: LD_INT 1
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: PPUSH
17014: CALL_OW 69
17018: PUSH
17019: LD_EXP 1
17023: PUSH
17024: EMPTY
17025: LIST
17026: DIFF
17027: PPUSH
17028: LD_STRING D3b-Mech1-1
17030: PPUSH
17031: LD_STRING D3b-Mech1-1
17033: PPUSH
17034: CALL 6259 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
17038: LD_VAR 0 1
17042: PPUSH
17043: CALL_OW 266
17047: PUSH
17048: LD_INT 0
17050: EQUAL
17051: PUSH
17052: LD_VAR 0 1
17056: PPUSH
17057: CALL_OW 255
17061: PUSH
17062: LD_INT 1
17064: EQUAL
17065: AND
17066: IFFALSE 17080
// SetBName ( building , theta ) ;
17068: LD_VAR 0 1
17072: PPUSH
17073: LD_STRING theta
17075: PPUSH
17076: CALL_OW 500
// if GetSide ( building ) = 3 then
17080: LD_VAR 0 1
17084: PPUSH
17085: CALL_OW 255
17089: PUSH
17090: LD_INT 3
17092: EQUAL
17093: IFFALSE 17167
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17095: LD_ADDR_EXP 31
17099: PUSH
17100: LD_EXP 31
17104: PPUSH
17105: LD_INT 1
17107: PPUSH
17108: CALL_OW 3
17112: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17113: LD_ADDR_EXP 31
17117: PUSH
17118: LD_EXP 31
17122: PPUSH
17123: LD_INT 1
17125: PPUSH
17126: CALL_OW 3
17130: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17131: LD_ADDR_EXP 31
17135: PUSH
17136: LD_EXP 31
17140: PPUSH
17141: LD_INT 1
17143: PPUSH
17144: CALL_OW 3
17148: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17149: LD_ADDR_EXP 31
17153: PUSH
17154: LD_EXP 31
17158: PPUSH
17159: LD_INT 1
17161: PPUSH
17162: CALL_OW 3
17166: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
17167: LD_VAR 0 1
17171: PPUSH
17172: CALL_OW 255
17176: PUSH
17177: LD_INT 3
17179: EQUAL
17180: PUSH
17181: LD_VAR 0 1
17185: PPUSH
17186: CALL_OW 266
17190: PUSH
17191: LD_INT 0
17193: EQUAL
17194: PUSH
17195: LD_VAR 0 1
17199: PPUSH
17200: CALL_OW 266
17204: PUSH
17205: LD_INT 2
17207: EQUAL
17208: OR
17209: PUSH
17210: LD_VAR 0 1
17214: PPUSH
17215: CALL_OW 266
17219: PUSH
17220: LD_INT 4
17222: EQUAL
17223: OR
17224: PUSH
17225: EMPTY
17226: LIST
17227: AND
17228: IFFALSE 17239
// ComUpgrade ( building ) ;
17230: LD_VAR 0 1
17234: PPUSH
17235: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
17239: LD_VAR 0 1
17243: PPUSH
17244: CALL_OW 255
17248: PUSH
17249: LD_INT 3
17251: EQUAL
17252: PUSH
17253: LD_VAR 0 1
17257: PPUSH
17258: CALL_OW 266
17262: PUSH
17263: LD_INT 32
17265: EQUAL
17266: AND
17267: IFFALSE 17308
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
17269: LD_VAR 0 1
17273: PPUSH
17274: LD_INT 42
17276: PUSH
17277: LD_INT 43
17279: PUSH
17280: LD_INT 44
17282: PUSH
17283: LD_INT 46
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 1
17294: PPUSH
17295: LD_INT 4
17297: PPUSH
17298: CALL_OW 12
17302: ARRAY
17303: PPUSH
17304: CALL_OW 208
// end ; end ;
17308: PPOPN 1
17310: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
17311: LD_VAR 0 1
17315: PUSH
17316: LD_INT 22
17318: PUSH
17319: LD_INT 1
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 21
17328: PUSH
17329: LD_INT 1
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 23
17338: PUSH
17339: LD_INT 1
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: LIST
17350: PPUSH
17351: CALL_OW 69
17355: IN
17356: IFFALSE 17372
// killCounter := killCounter + 1 ;
17358: LD_ADDR_EXP 47
17362: PUSH
17363: LD_EXP 47
17367: PUSH
17368: LD_INT 1
17370: PLUS
17371: ST_TO_ADDR
// if unit = JMM then
17372: LD_VAR 0 1
17376: PUSH
17377: LD_EXP 1
17381: EQUAL
17382: IFFALSE 17391
// YouLost ( JMM ) ;
17384: LD_STRING JMM
17386: PPUSH
17387: CALL_OW 104
// if unit = Joan then
17391: LD_VAR 0 1
17395: PUSH
17396: LD_EXP 15
17400: EQUAL
17401: IFFALSE 17411
// JoanStatus = 0 ;
17403: LD_ADDR_EXP 16
17407: PUSH
17408: LD_INT 0
17410: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17411: LD_VAR 0 1
17415: PPUSH
17416: CALL_OW 255
17420: PUSH
17421: LD_INT 1
17423: EQUAL
17424: PUSH
17425: LD_VAR 0 1
17429: PPUSH
17430: CALL_OW 247
17434: PUSH
17435: LD_INT 1
17437: EQUAL
17438: AND
17439: IFFALSE 17515
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17441: LD_VAR 0 1
17445: PPUSH
17446: CALL_OW 257
17450: PUSH
17451: LD_INT 1
17453: EQUAL
17454: PUSH
17455: LD_VAR 0 1
17459: PPUSH
17460: CALL_OW 257
17464: PUSH
17465: LD_INT 2
17467: EQUAL
17468: OR
17469: PUSH
17470: LD_VAR 0 1
17474: PPUSH
17475: CALL_OW 257
17479: PUSH
17480: LD_INT 3
17482: EQUAL
17483: OR
17484: PUSH
17485: LD_VAR 0 1
17489: PPUSH
17490: CALL_OW 257
17494: PUSH
17495: LD_INT 4
17497: EQUAL
17498: OR
17499: IFFALSE 17515
// unitLost = unitLost + 1 ;
17501: LD_ADDR_EXP 30
17505: PUSH
17506: LD_EXP 30
17510: PUSH
17511: LD_INT 1
17513: PLUS
17514: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17515: LD_VAR 0 1
17519: PPUSH
17520: CALL_OW 255
17524: PUSH
17525: LD_INT 3
17527: EQUAL
17528: PUSH
17529: LD_VAR 0 1
17533: PPUSH
17534: CALL_OW 247
17538: PUSH
17539: LD_INT 3
17541: EQUAL
17542: AND
17543: IFFALSE 18235
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17545: LD_VAR 0 1
17549: PPUSH
17550: CALL_OW 266
17554: PUSH
17555: LD_INT 31
17557: EQUAL
17558: PUSH
17559: LD_VAR 0 1
17563: PPUSH
17564: CALL_OW 266
17568: PUSH
17569: LD_INT 32
17571: EQUAL
17572: OR
17573: PUSH
17574: LD_VAR 0 1
17578: PPUSH
17579: CALL_OW 266
17583: PUSH
17584: LD_INT 36
17586: EQUAL
17587: OR
17588: PUSH
17589: LD_VAR 0 1
17593: PPUSH
17594: CALL_OW 266
17598: PUSH
17599: LD_INT 0
17601: EQUAL
17602: OR
17603: PUSH
17604: LD_VAR 0 1
17608: PPUSH
17609: CALL_OW 266
17613: PUSH
17614: LD_INT 24
17616: EQUAL
17617: OR
17618: PUSH
17619: LD_VAR 0 1
17623: PPUSH
17624: CALL_OW 266
17628: PUSH
17629: LD_INT 17
17631: EQUAL
17632: OR
17633: PUSH
17634: LD_VAR 0 1
17638: PPUSH
17639: CALL_OW 266
17643: PUSH
17644: LD_INT 25
17646: EQUAL
17647: OR
17648: PUSH
17649: LD_VAR 0 1
17653: PPUSH
17654: CALL_OW 266
17658: PUSH
17659: LD_INT 19
17661: EQUAL
17662: OR
17663: PUSH
17664: LD_VAR 0 1
17668: PPUSH
17669: CALL_OW 266
17673: PUSH
17674: LD_INT 20
17676: EQUAL
17677: OR
17678: PUSH
17679: LD_VAR 0 1
17683: PPUSH
17684: CALL_OW 266
17688: PUSH
17689: LD_INT 18
17691: EQUAL
17692: OR
17693: PUSH
17694: LD_VAR 0 1
17698: PPUSH
17699: CALL_OW 266
17703: PUSH
17704: LD_INT 21
17706: EQUAL
17707: OR
17708: PUSH
17709: LD_VAR 0 1
17713: PPUSH
17714: CALL_OW 266
17718: PUSH
17719: LD_INT 23
17721: EQUAL
17722: OR
17723: PUSH
17724: LD_VAR 0 1
17728: PPUSH
17729: CALL_OW 266
17733: PUSH
17734: LD_INT 16
17736: EQUAL
17737: OR
17738: PUSH
17739: LD_VAR 0 1
17743: PPUSH
17744: CALL_OW 266
17748: PUSH
17749: LD_INT 6
17751: EQUAL
17752: OR
17753: PUSH
17754: LD_VAR 0 1
17758: PPUSH
17759: CALL_OW 266
17763: PUSH
17764: LD_INT 29
17766: EQUAL
17767: OR
17768: PUSH
17769: LD_VAR 0 1
17773: PPUSH
17774: CALL_OW 266
17778: PUSH
17779: LD_INT 26
17781: EQUAL
17782: OR
17783: PUSH
17784: LD_VAR 0 1
17788: PPUSH
17789: CALL_OW 266
17793: PUSH
17794: LD_INT 30
17796: EQUAL
17797: OR
17798: PUSH
17799: LD_VAR 0 1
17803: PPUSH
17804: CALL_OW 266
17808: PUSH
17809: LD_INT 28
17811: EQUAL
17812: OR
17813: PUSH
17814: LD_VAR 0 1
17818: PPUSH
17819: CALL_OW 266
17823: PUSH
17824: LD_INT 27
17826: EQUAL
17827: OR
17828: PUSH
17829: LD_VAR 0 1
17833: PPUSH
17834: CALL_OW 266
17838: PUSH
17839: LD_INT 33
17841: EQUAL
17842: OR
17843: PUSH
17844: LD_VAR 0 1
17848: PPUSH
17849: CALL_OW 266
17853: PUSH
17854: LD_INT 2
17856: EQUAL
17857: OR
17858: PUSH
17859: LD_VAR 0 1
17863: PPUSH
17864: CALL_OW 266
17868: PUSH
17869: LD_INT 4
17871: EQUAL
17872: OR
17873: IFFALSE 17959
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17875: LD_ADDR_EXP 31
17879: PUSH
17880: LD_EXP 31
17884: PUSH
17885: LD_VAR 0 1
17889: PPUSH
17890: CALL_OW 266
17894: ADD
17895: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17896: LD_ADDR_EXP 31
17900: PUSH
17901: LD_EXP 31
17905: PUSH
17906: LD_VAR 0 1
17910: PPUSH
17911: CALL_OW 250
17915: ADD
17916: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17917: LD_ADDR_EXP 31
17921: PUSH
17922: LD_EXP 31
17926: PUSH
17927: LD_VAR 0 1
17931: PPUSH
17932: CALL_OW 251
17936: ADD
17937: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17938: LD_ADDR_EXP 31
17942: PUSH
17943: LD_EXP 31
17947: PUSH
17948: LD_VAR 0 1
17952: PPUSH
17953: CALL_OW 254
17957: ADD
17958: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17959: LD_VAR 0 1
17963: PPUSH
17964: CALL_OW 266
17968: PUSH
17969: LD_INT 1
17971: EQUAL
17972: IFFALSE 18051
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17974: LD_ADDR_EXP 31
17978: PUSH
17979: LD_EXP 31
17983: PUSH
17984: LD_INT 0
17986: ADD
17987: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17988: LD_ADDR_EXP 31
17992: PUSH
17993: LD_EXP 31
17997: PUSH
17998: LD_VAR 0 1
18002: PPUSH
18003: CALL_OW 250
18007: ADD
18008: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18009: LD_ADDR_EXP 31
18013: PUSH
18014: LD_EXP 31
18018: PUSH
18019: LD_VAR 0 1
18023: PPUSH
18024: CALL_OW 251
18028: ADD
18029: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18030: LD_ADDR_EXP 31
18034: PUSH
18035: LD_EXP 31
18039: PUSH
18040: LD_VAR 0 1
18044: PPUSH
18045: CALL_OW 254
18049: ADD
18050: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18051: LD_VAR 0 1
18055: PPUSH
18056: CALL_OW 266
18060: PUSH
18061: LD_INT 3
18063: EQUAL
18064: IFFALSE 18143
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
18066: LD_ADDR_EXP 31
18070: PUSH
18071: LD_EXP 31
18075: PUSH
18076: LD_INT 2
18078: ADD
18079: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18080: LD_ADDR_EXP 31
18084: PUSH
18085: LD_EXP 31
18089: PUSH
18090: LD_VAR 0 1
18094: PPUSH
18095: CALL_OW 250
18099: ADD
18100: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18101: LD_ADDR_EXP 31
18105: PUSH
18106: LD_EXP 31
18110: PUSH
18111: LD_VAR 0 1
18115: PPUSH
18116: CALL_OW 251
18120: ADD
18121: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18122: LD_ADDR_EXP 31
18126: PUSH
18127: LD_EXP 31
18131: PUSH
18132: LD_VAR 0 1
18136: PPUSH
18137: CALL_OW 254
18141: ADD
18142: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 266
18152: PUSH
18153: LD_INT 5
18155: EQUAL
18156: IFFALSE 18235
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
18158: LD_ADDR_EXP 31
18162: PUSH
18163: LD_EXP 31
18167: PUSH
18168: LD_INT 4
18170: ADD
18171: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18172: LD_ADDR_EXP 31
18176: PUSH
18177: LD_EXP 31
18181: PUSH
18182: LD_VAR 0 1
18186: PPUSH
18187: CALL_OW 250
18191: ADD
18192: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18193: LD_ADDR_EXP 31
18197: PUSH
18198: LD_EXP 31
18202: PUSH
18203: LD_VAR 0 1
18207: PPUSH
18208: CALL_OW 251
18212: ADD
18213: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18214: LD_ADDR_EXP 31
18218: PUSH
18219: LD_EXP 31
18223: PUSH
18224: LD_VAR 0 1
18228: PPUSH
18229: CALL_OW 254
18233: ADD
18234: ST_TO_ADDR
// end ; end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18235: LD_EXP 48
18239: PUSH
18240: LD_VAR 0 1
18244: PPUSH
18245: CALL_OW 257
18249: PUSH
18250: LD_INT 3
18252: EQUAL
18253: AND
18254: PUSH
18255: LD_VAR 0 1
18259: PPUSH
18260: CALL_OW 255
18264: PUSH
18265: LD_INT 3
18267: EQUAL
18268: AND
18269: PUSH
18270: LD_INT 21
18272: PPUSH
18273: CALL_OW 302
18277: AND
18278: PUSH
18279: LD_INT 21
18281: PPUSH
18282: CALL_OW 255
18286: PUSH
18287: LD_INT 3
18289: EQUAL
18290: AND
18291: IFFALSE 18373
// begin ruMechCounter := ruMechCounter - 1 ;
18293: LD_ADDR_EXP 48
18297: PUSH
18298: LD_EXP 48
18302: PUSH
18303: LD_INT 1
18305: MINUS
18306: ST_TO_ADDR
// uc_side = 3 ;
18307: LD_ADDR_OWVAR 20
18311: PUSH
18312: LD_INT 3
18314: ST_TO_ADDR
// uc_nation = 3 ;
18315: LD_ADDR_OWVAR 21
18319: PUSH
18320: LD_INT 3
18322: ST_TO_ADDR
// hc_gallery :=  ;
18323: LD_ADDR_OWVAR 33
18327: PUSH
18328: LD_STRING 
18330: ST_TO_ADDR
// hc_name :=  ;
18331: LD_ADDR_OWVAR 26
18335: PUSH
18336: LD_STRING 
18338: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18339: LD_INT 0
18341: PPUSH
18342: LD_EXP 34
18346: PPUSH
18347: LD_EXP 35
18351: PPUSH
18352: CALL_OW 12
18356: PPUSH
18357: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
18361: CALL_OW 44
18365: PPUSH
18366: LD_INT 21
18368: PPUSH
18369: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18373: LD_VAR 0 1
18377: PPUSH
18378: CALL_OW 255
18382: PUSH
18383: LD_INT 3
18385: EQUAL
18386: PUSH
18387: LD_VAR 0 1
18391: PPUSH
18392: CALL_OW 264
18396: PUSH
18397: LD_INT 52
18399: EQUAL
18400: AND
18401: PUSH
18402: LD_INT 21
18404: PPUSH
18405: CALL_OW 302
18409: AND
18410: PUSH
18411: LD_INT 21
18413: PPUSH
18414: CALL_OW 255
18418: PUSH
18419: LD_INT 3
18421: EQUAL
18422: AND
18423: IFFALSE 18444
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18425: LD_INT 21
18427: PPUSH
18428: LD_INT 22
18430: PPUSH
18431: LD_INT 1
18433: PPUSH
18434: LD_INT 1
18436: PPUSH
18437: LD_INT 52
18439: PPUSH
18440: CALL_OW 125
// end ;
18444: PPOPN 1
18446: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18447: LD_INT 0
18449: PPUSH
18450: PPUSH
18451: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 264
18461: PUSH
18462: LD_INT 51
18464: EQUAL
18465: PUSH
18466: LD_VAR 0 1
18470: PPUSH
18471: CALL_OW 255
18475: PUSH
18476: LD_INT 3
18478: EQUAL
18479: AND
18480: IFFALSE 18542
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18482: LD_ADDR_VAR 0 5
18486: PUSH
18487: LD_INT 2
18489: PPUSH
18490: CALL_OW 274
18494: PPUSH
18495: LD_INT 1
18497: PPUSH
18498: CALL_OW 275
18502: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18503: LD_INT 2
18505: PPUSH
18506: CALL_OW 274
18510: PPUSH
18511: LD_INT 1
18513: PPUSH
18514: LD_VAR 0 5
18518: PUSH
18519: LD_INT 100
18521: MINUS
18522: PPUSH
18523: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18527: LD_VAR 0 1
18531: PPUSH
18532: LD_INT 1
18534: PPUSH
18535: LD_INT 100
18537: PPUSH
18538: CALL_OW 291
// end ; if building = rufabsupp then
18542: LD_VAR 0 2
18546: PUSH
18547: LD_INT 17
18549: EQUAL
18550: IFFALSE 18564
// SetSide ( vehicle , 6 ) ;
18552: LD_VAR 0 1
18556: PPUSH
18557: LD_INT 6
18559: PPUSH
18560: CALL_OW 235
// end ;
18564: PPOPN 5
18566: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18567: LD_VAR 0 1
18571: PPUSH
18572: CALL_OW 255
18576: PUSH
18577: LD_INT 3
18579: EQUAL
18580: IFFALSE 18611
// begin tamedApemans = tamedApemans + 1 ;
18582: LD_ADDR_EXP 32
18586: PUSH
18587: LD_EXP 32
18591: PUSH
18592: LD_INT 1
18594: PLUS
18595: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18596: LD_VAR 0 1
18600: PPUSH
18601: LD_INT 106
18603: PPUSH
18604: LD_INT 85
18606: PPUSH
18607: CALL_OW 111
// end ; end ;
18611: PPOPN 2
18613: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18614: LD_INT 0
18616: PPUSH
18617: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18618: LD_VAR 0 1
18622: PPUSH
18623: CALL_OW 255
18627: PUSH
18628: LD_INT 3
18630: EQUAL
18631: PUSH
18632: LD_VAR 0 1
18636: PPUSH
18637: CALL_OW 247
18641: PUSH
18642: LD_INT 2
18644: EQUAL
18645: AND
18646: IFFALSE 18755
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18648: LD_VAR 0 1
18652: PPUSH
18653: CALL_OW 264
18657: PUSH
18658: LD_INT 42
18660: EQUAL
18661: PUSH
18662: LD_VAR 0 1
18666: PPUSH
18667: CALL_OW 264
18671: PUSH
18672: LD_INT 43
18674: EQUAL
18675: OR
18676: PUSH
18677: LD_VAR 0 1
18681: PPUSH
18682: CALL_OW 264
18686: PUSH
18687: LD_INT 44
18689: EQUAL
18690: OR
18691: PUSH
18692: LD_VAR 0 1
18696: PPUSH
18697: CALL_OW 264
18701: PUSH
18702: LD_INT 46
18704: EQUAL
18705: OR
18706: IFFALSE 18755
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18708: LD_INT 21
18710: PPUSH
18711: LD_VAR 0 1
18715: PPUSH
18716: CALL_OW 265
18720: PPUSH
18721: LD_VAR 0 1
18725: PPUSH
18726: CALL_OW 262
18730: PPUSH
18731: LD_VAR 0 1
18735: PPUSH
18736: CALL_OW 263
18740: PPUSH
18741: LD_VAR 0 1
18745: PPUSH
18746: CALL_OW 264
18750: PPUSH
18751: CALL_OW 185
// end ;
18755: PPOPN 3
18757: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18758: LD_VAR 0 1
18762: PPUSH
18763: CALL_OW 255
18767: PUSH
18768: LD_INT 3
18770: EQUAL
18771: PUSH
18772: LD_VAR 0 2
18776: PPUSH
18777: CALL_OW 255
18781: PUSH
18782: LD_INT 3
18784: EQUAL
18785: AND
18786: PUSH
18787: LD_VAR 0 1
18791: PPUSH
18792: CALL_OW 302
18796: AND
18797: IFFALSE 18839
// begin ComRepairVehicle ( human , vehicle ) ;
18799: LD_VAR 0 2
18803: PPUSH
18804: LD_VAR 0 1
18808: PPUSH
18809: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18813: LD_VAR 0 2
18817: PPUSH
18818: LD_VAR 0 1
18822: PPUSH
18823: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18827: LD_VAR 0 1
18831: PPUSH
18832: LD_INT 100
18834: PPUSH
18835: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18839: LD_VAR 0 1
18843: PPUSH
18844: CALL_OW 255
18848: PUSH
18849: LD_INT 3
18851: EQUAL
18852: PUSH
18853: LD_VAR 0 2
18857: PPUSH
18858: CALL_OW 255
18862: PUSH
18863: LD_INT 3
18865: EQUAL
18866: AND
18867: PUSH
18868: LD_INT 21
18870: PPUSH
18871: CALL_OW 302
18875: AND
18876: PUSH
18877: LD_VAR 0 1
18881: PPUSH
18882: CALL_OW 302
18886: NOT
18887: AND
18888: IFFALSE 18902
// ComEnterUnit ( human , rufab ) ;
18890: LD_VAR 0 2
18894: PPUSH
18895: LD_INT 21
18897: PPUSH
18898: CALL_OW 120
// end ;
18902: PPOPN 2
18904: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18905: LD_VAR 0 1
18909: PUSH
18910: LD_INT 21
18912: EQUAL
18913: PUSH
18914: LD_VAR 0 2
18918: PPUSH
18919: CALL_OW 255
18923: PUSH
18924: LD_INT 3
18926: EQUAL
18927: AND
18928: IFFALSE 18942
// SetLives ( human , 1000 ) ;
18930: LD_VAR 0 2
18934: PPUSH
18935: LD_INT 1000
18937: PPUSH
18938: CALL_OW 234
// end ;
18942: PPOPN 2
18944: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18945: LD_VAR 0 1
18949: PPUSH
18950: CALL 37914 0 1
// end ; end_of_file
18954: PPOPN 1
18956: END
// every 0 0$30 trigger cratesStatus = 1 do
18957: LD_EXP 38
18961: PUSH
18962: LD_INT 1
18964: EQUAL
18965: IFFALSE 19018
18967: GO 18969
18969: DISABLE
// begin enable ;
18970: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
18971: LD_INT 350
18973: PUSH
18974: LD_INT 875
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 1
18983: PPUSH
18984: LD_INT 2
18986: PPUSH
18987: CALL_OW 12
18991: ARRAY
18992: PPUSH
18993: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
18997: LD_INT 1
18999: PPUSH
19000: LD_INT 5
19002: PPUSH
19003: CALL_OW 12
19007: PPUSH
19008: LD_INT 7
19010: PPUSH
19011: LD_INT 1
19013: PPUSH
19014: CALL_OW 55
// end ;
19018: END
// every 1 1$0 trigger cratesStatus = 2 do
19019: LD_EXP 38
19023: PUSH
19024: LD_INT 2
19026: EQUAL
19027: IFFALSE 19110
19029: GO 19031
19031: DISABLE
// begin enable ;
19032: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
19033: LD_INT 3150
19035: PUSH
19036: LD_INT 4550
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 1
19045: PPUSH
19046: LD_INT 2
19048: PPUSH
19049: CALL_OW 12
19053: ARRAY
19054: PPUSH
19055: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
19059: LD_INT 2
19061: PUSH
19062: LD_INT 5
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 1
19071: PPUSH
19072: LD_INT 2
19074: PPUSH
19075: CALL_OW 12
19079: ARRAY
19080: PPUSH
19081: LD_INT 6
19083: PUSH
19084: LD_INT 7
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 1
19093: PPUSH
19094: LD_INT 2
19096: PPUSH
19097: CALL_OW 12
19101: ARRAY
19102: PPUSH
19103: LD_INT 1
19105: PPUSH
19106: CALL_OW 55
// end ;
19110: END
// every 0 0$30 + 0 0$10 do
19111: GO 19113
19113: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19114: LD_INT 4
19116: PUSH
19117: LD_INT 5
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 1
19126: PPUSH
19127: LD_INT 2
19129: PPUSH
19130: CALL_OW 12
19134: ARRAY
19135: PPUSH
19136: LD_INT 7
19138: PPUSH
19139: LD_INT 1
19141: PPUSH
19142: CALL_OW 55
// Wait ( 0 0$15 ) ;
19146: LD_INT 525
19148: PPUSH
19149: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19153: LD_INT 4
19155: PUSH
19156: LD_INT 5
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: PPUSH
19166: LD_INT 2
19168: PPUSH
19169: CALL_OW 12
19173: ARRAY
19174: PPUSH
19175: LD_INT 7
19177: PPUSH
19178: LD_INT 1
19180: PPUSH
19181: CALL_OW 55
// Wait ( 0 0$20 ) ;
19185: LD_INT 700
19187: PPUSH
19188: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19192: LD_INT 4
19194: PUSH
19195: LD_INT 5
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 1
19204: PPUSH
19205: LD_INT 2
19207: PPUSH
19208: CALL_OW 12
19212: ARRAY
19213: PPUSH
19214: LD_INT 7
19216: PPUSH
19217: LD_INT 1
19219: PPUSH
19220: CALL_OW 55
// end ; end_of_file
19224: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
19225: LD_EXP 24
19229: PUSH
19230: LD_INT 1
19232: EQUAL
19233: IFFALSE 19534
19235: GO 19237
19237: DISABLE
19238: LD_INT 0
19240: PPUSH
19241: PPUSH
19242: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19243: LD_ADDR_VAR 0 2
19247: PUSH
19248: LD_INT 22
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 21
19260: PUSH
19261: LD_INT 3
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 2
19270: PUSH
19271: LD_INT 30
19273: PUSH
19274: LD_INT 0
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 30
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: LIST
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: LIST
19300: PPUSH
19301: CALL_OW 69
19305: ST_TO_ADDR
// for i in tmp do
19306: LD_ADDR_VAR 0 1
19310: PUSH
19311: LD_VAR 0 2
19315: PUSH
19316: FOR_IN
19317: IFFALSE 19350
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19319: LD_ADDR_VAR 0 3
19323: PUSH
19324: LD_VAR 0 3
19328: PUSH
19329: LD_VAR 0 1
19333: PPUSH
19334: CALL_OW 274
19338: PPUSH
19339: LD_INT 1
19341: PPUSH
19342: CALL_OW 275
19346: PLUS
19347: ST_TO_ADDR
19348: GO 19316
19350: POP
19351: POP
// strings = [ ] ;
19352: LD_ADDR_EXP 27
19356: PUSH
19357: EMPTY
19358: ST_TO_ADDR
// if tmp = 0 then
19359: LD_VAR 0 2
19363: PUSH
19364: LD_INT 0
19366: EQUAL
19367: IFFALSE 19392
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19369: LD_ADDR_EXP 27
19373: PUSH
19374: LD_EXP 27
19378: PUSH
19379: LD_STRING #Am06-1
19381: PUSH
19382: LD_EXP 25
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: ADD
19391: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19392: LD_VAR 0 2
19396: PUSH
19397: LD_INT 0
19399: GREATER
19400: PUSH
19401: LD_EXP 25
19405: PUSH
19406: LD_VAR 0 3
19410: GREATER
19411: AND
19412: IFFALSE 19443
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19414: LD_ADDR_EXP 27
19418: PUSH
19419: LD_EXP 27
19423: PUSH
19424: LD_STRING #Am06-1
19426: PUSH
19427: LD_EXP 25
19431: PUSH
19432: LD_VAR 0 3
19436: MINUS
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: ADD
19442: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19443: LD_VAR 0 2
19447: PUSH
19448: LD_INT 0
19450: GREATER
19451: PUSH
19452: LD_EXP 25
19456: PUSH
19457: LD_VAR 0 3
19461: LESSEQUAL
19462: AND
19463: IFFALSE 19486
// strings = strings ^ [ #Am06-1 , 0 ] ;
19465: LD_ADDR_EXP 27
19469: PUSH
19470: LD_EXP 27
19474: PUSH
19475: LD_STRING #Am06-1
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: ADD
19485: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19486: LD_ADDR_EXP 26
19490: PUSH
19491: LD_EXP 26
19495: PUSH
19496: LD_INT 35
19498: MINUS
19499: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19500: LD_ADDR_EXP 27
19504: PUSH
19505: LD_EXP 27
19509: PUSH
19510: LD_STRING #Am06-2
19512: PUSH
19513: LD_EXP 26
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: ADD
19522: ST_TO_ADDR
// display_strings = strings ;
19523: LD_ADDR_OWVAR 47
19527: PUSH
19528: LD_EXP 27
19532: ST_TO_ADDR
// enable ;
19533: ENABLE
// end ; end_of_file
19534: PPOPN 3
19536: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19537: LD_INT 0
19539: PPUSH
19540: PPUSH
19541: PPUSH
19542: PPUSH
19543: PPUSH
19544: PPUSH
19545: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19546: LD_ADDR_VAR 0 3
19550: PUSH
19551: LD_INT 22
19553: PUSH
19554: LD_INT 1
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 2
19563: PUSH
19564: LD_INT 30
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 30
19576: PUSH
19577: LD_INT 1
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: LIST
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PPUSH
19593: CALL_OW 69
19597: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19598: LD_INT 35
19600: PPUSH
19601: CALL_OW 67
// until depot ;
19605: LD_VAR 0 3
19609: IFFALSE 19546
// repeat wait ( 0 0$1 ) ;
19611: LD_INT 35
19613: PPUSH
19614: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19618: LD_ADDR_VAR 0 4
19622: PUSH
19623: LD_INT 22
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 91
19635: PUSH
19636: LD_VAR 0 3
19640: PUSH
19641: LD_INT 1
19643: ARRAY
19644: PUSH
19645: LD_INT 15
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 21
19655: PUSH
19656: LD_INT 1
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 2
19665: PUSH
19666: LD_INT 25
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 25
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 25
19688: PUSH
19689: LD_INT 3
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 25
19698: PUSH
19699: LD_INT 4
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 3
19715: PUSH
19716: LD_INT 54
19718: PUSH
19719: EMPTY
19720: LIST
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 3
19728: PUSH
19729: LD_INT 55
19731: PUSH
19732: EMPTY
19733: LIST
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: PPUSH
19747: CALL_OW 69
19751: PUSH
19752: LD_EXP 2
19756: PUSH
19757: LD_EXP 3
19761: PUSH
19762: LD_EXP 4
19766: PUSH
19767: LD_EXP 5
19771: PUSH
19772: LD_EXP 7
19776: PUSH
19777: LD_EXP 8
19781: PUSH
19782: LD_EXP 9
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: PUSH
19796: LD_EXP 46
19800: ADD
19801: DIFF
19802: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19803: LD_VAR 0 4
19807: PUSH
19808: LD_INT 1
19810: PPUSH
19811: CALL_OW 463
19815: NOT
19816: AND
19817: IFFALSE 19611
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19819: LD_ADDR_VAR 0 4
19823: PUSH
19824: LD_VAR 0 4
19828: PUSH
19829: LD_INT 1
19831: PPUSH
19832: LD_VAR 0 4
19836: PPUSH
19837: CALL_OW 12
19841: ARRAY
19842: ST_TO_ADDR
// blockSpawn = 1 ;
19843: LD_ADDR_EXP 29
19847: PUSH
19848: LD_INT 1
19850: ST_TO_ADDR
// uc_side = 2 ;
19851: LD_ADDR_OWVAR 20
19855: PUSH
19856: LD_INT 2
19858: ST_TO_ADDR
// uc_nation = 2 ;
19859: LD_ADDR_OWVAR 21
19863: PUSH
19864: LD_INT 2
19866: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ,  ) ;
19867: LD_ADDR_EXP 19
19871: PUSH
19872: LD_STRING Kurt
19874: PPUSH
19875: LD_INT 0
19877: PPUSH
19878: LD_STRING 
19880: PPUSH
19881: CALL 41797 0 3
19885: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19886: LD_EXP 19
19890: PPUSH
19891: LD_VAR 0 4
19895: PPUSH
19896: CALL_OW 250
19900: PPUSH
19901: LD_VAR 0 4
19905: PPUSH
19906: CALL_OW 251
19910: PPUSH
19911: LD_INT 5
19913: PPUSH
19914: LD_INT 1
19916: PPUSH
19917: CALL_OW 50
// InGameOn ;
19921: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19925: LD_EXP 19
19929: PPUSH
19930: CALL_OW 87
// wait ( 0 0$2 ) ;
19934: LD_INT 70
19936: PPUSH
19937: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19941: LD_EXP 19
19945: PPUSH
19946: LD_VAR 0 4
19950: PPUSH
19951: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19955: LD_VAR 0 4
19959: PPUSH
19960: LD_EXP 19
19964: PPUSH
19965: CALL_OW 112
// wait ( 0 0$1 ) ;
19969: LD_INT 35
19971: PPUSH
19972: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19976: LD_VAR 0 4
19980: PPUSH
19981: LD_EXP 19
19985: PPUSH
19986: CALL_OW 119
// DialogueOn ;
19990: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19994: LD_EXP 19
19998: PPUSH
19999: LD_STRING D2-Kurt-1
20001: PPUSH
20002: CALL_OW 88
// if tmp = JMM then
20006: LD_VAR 0 4
20010: PUSH
20011: LD_EXP 1
20015: EQUAL
20016: IFFALSE 20108
// begin Say ( JMM , D2-JMM-1 ) ;
20018: LD_EXP 1
20022: PPUSH
20023: LD_STRING D2-JMM-1
20025: PPUSH
20026: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
20030: LD_EXP 19
20034: PPUSH
20035: LD_STRING D2-Kurt-2
20037: PPUSH
20038: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
20042: LD_EXP 1
20046: PPUSH
20047: LD_STRING D2-JMM-2
20049: PPUSH
20050: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20054: LD_EXP 19
20058: PPUSH
20059: LD_STRING D2-Kurt-3
20061: PPUSH
20062: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
20066: LD_EXP 1
20070: PPUSH
20071: LD_STRING D2-JMM-3
20073: PPUSH
20074: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20078: LD_EXP 19
20082: PPUSH
20083: LD_STRING D2-Kurt-4
20085: PPUSH
20086: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
20090: LD_EXP 1
20094: PPUSH
20095: LD_STRING D2-JMM-4
20097: PPUSH
20098: CALL_OW 88
// DialogueOff ;
20102: CALL_OW 7
// end else
20106: GO 20418
// begin if GetSex ( tmp ) = 1 then
20108: LD_VAR 0 4
20112: PPUSH
20113: CALL_OW 258
20117: PUSH
20118: LD_INT 1
20120: EQUAL
20121: IFFALSE 20135
// Say ( tmp , D2-Sol1-1 ) ;
20123: LD_VAR 0 4
20127: PPUSH
20128: LD_STRING D2-Sol1-1
20130: PPUSH
20131: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20135: LD_VAR 0 4
20139: PPUSH
20140: CALL_OW 258
20144: PUSH
20145: LD_INT 2
20147: EQUAL
20148: IFFALSE 20162
// Say ( tmp , D2-FSol1-1 ) ;
20150: LD_VAR 0 4
20154: PPUSH
20155: LD_STRING D2-FSol1-1
20157: PPUSH
20158: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
20162: LD_EXP 19
20166: PPUSH
20167: LD_STRING D2-Kurt-2
20169: PPUSH
20170: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20174: LD_VAR 0 4
20178: PPUSH
20179: CALL_OW 258
20183: PUSH
20184: LD_INT 1
20186: EQUAL
20187: IFFALSE 20201
// Say ( tmp , D2-Sol1-2 ) ;
20189: LD_VAR 0 4
20193: PPUSH
20194: LD_STRING D2-Sol1-2
20196: PPUSH
20197: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20201: LD_VAR 0 4
20205: PPUSH
20206: CALL_OW 258
20210: PUSH
20211: LD_INT 2
20213: EQUAL
20214: IFFALSE 20228
// Say ( tmp , D2-FSol1-2 ) ;
20216: LD_VAR 0 4
20220: PPUSH
20221: LD_STRING D2-FSol1-2
20223: PPUSH
20224: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20228: LD_EXP 19
20232: PPUSH
20233: LD_STRING D2-Kurt-3
20235: PPUSH
20236: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20240: LD_VAR 0 4
20244: PPUSH
20245: CALL_OW 258
20249: PUSH
20250: LD_INT 1
20252: EQUAL
20253: IFFALSE 20267
// Say ( tmp , D2-Sol1-3 ) ;
20255: LD_VAR 0 4
20259: PPUSH
20260: LD_STRING D2-Sol1-3
20262: PPUSH
20263: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20267: LD_VAR 0 4
20271: PPUSH
20272: CALL_OW 258
20276: PUSH
20277: LD_INT 2
20279: EQUAL
20280: IFFALSE 20294
// Say ( tmp , D2-FSol1-3 ) ;
20282: LD_VAR 0 4
20286: PPUSH
20287: LD_STRING D2-FSol1-3
20289: PPUSH
20290: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20294: LD_EXP 19
20298: PPUSH
20299: LD_STRING D2-Kurt-4
20301: PPUSH
20302: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20306: LD_VAR 0 4
20310: PPUSH
20311: CALL_OW 258
20315: PUSH
20316: LD_INT 1
20318: EQUAL
20319: IFFALSE 20333
// Say ( tmp , D2-Sol1-4 ) ;
20321: LD_VAR 0 4
20325: PPUSH
20326: LD_STRING D2-Sol1-4
20328: PPUSH
20329: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20333: LD_VAR 0 4
20337: PPUSH
20338: CALL_OW 258
20342: PUSH
20343: LD_INT 2
20345: EQUAL
20346: IFFALSE 20360
// Say ( tmp , D2-FSol1-4 ) ;
20348: LD_VAR 0 4
20352: PPUSH
20353: LD_STRING D2-FSol1-4
20355: PPUSH
20356: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20360: LD_VAR 0 4
20364: PPUSH
20365: CALL_OW 258
20369: PUSH
20370: LD_INT 1
20372: EQUAL
20373: IFFALSE 20387
// Say ( tmp , D2-Sol1-5 ) ;
20375: LD_VAR 0 4
20379: PPUSH
20380: LD_STRING D2-Sol1-5
20382: PPUSH
20383: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20387: LD_VAR 0 4
20391: PPUSH
20392: CALL_OW 258
20396: PUSH
20397: LD_INT 2
20399: EQUAL
20400: IFFALSE 20414
// Say ( tmp , D2-FSol1-5 ) ;
20402: LD_VAR 0 4
20406: PPUSH
20407: LD_STRING D2-FSol1-5
20409: PPUSH
20410: CALL_OW 88
// DialogueOff ;
20414: CALL_OW 7
// end ; dec = ShowQuery1 ;
20418: LD_ADDR_VAR 0 6
20422: PUSH
20423: CALL 6720 0 0
20427: ST_TO_ADDR
// if dec = 1 then
20428: LD_VAR 0 6
20432: PUSH
20433: LD_INT 1
20435: EQUAL
20436: IFFALSE 20498
// begin DialogueOn ;
20438: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20442: LD_EXP 19
20446: PPUSH
20447: LD_STRING D2a-Kurt-1
20449: PPUSH
20450: CALL_OW 88
// DialogueOff ;
20454: CALL_OW 7
// InGameOff ;
20458: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20462: LD_INT 1
20464: PPUSH
20465: LD_INT 2
20467: PPUSH
20468: LD_INT 2
20470: PPUSH
20471: LD_INT 1
20473: PPUSH
20474: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20478: LD_EXP 19
20482: PPUSH
20483: LD_INT 8
20485: PPUSH
20486: CALL_OW 113
// readyToEscape = 1 ;
20490: LD_ADDR_EXP 21
20494: PUSH
20495: LD_INT 1
20497: ST_TO_ADDR
// end ; if dec = 2 then
20498: LD_VAR 0 6
20502: PUSH
20503: LD_INT 2
20505: EQUAL
20506: IFFALSE 21026
// begin DialogueOn ;
20508: CALL_OW 6
// if tmp = JMM then
20512: LD_VAR 0 4
20516: PUSH
20517: LD_EXP 1
20521: EQUAL
20522: IFFALSE 20578
// begin Say ( JMM , D2b-JMM-1 ) ;
20524: LD_EXP 1
20528: PPUSH
20529: LD_STRING D2b-JMM-1
20531: PPUSH
20532: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20536: LD_EXP 19
20540: PPUSH
20541: LD_STRING D2b-Kurt-1
20543: PPUSH
20544: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20548: LD_EXP 1
20552: PPUSH
20553: LD_STRING D2b-JMM-2
20555: PPUSH
20556: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20560: LD_EXP 19
20564: PPUSH
20565: LD_STRING D2b-Kurt-2
20567: PPUSH
20568: CALL_OW 88
// DialogueOff ;
20572: CALL_OW 7
// end else
20576: GO 20768
// begin if GetSex ( tmp ) = 1 then
20578: LD_VAR 0 4
20582: PPUSH
20583: CALL_OW 258
20587: PUSH
20588: LD_INT 1
20590: EQUAL
20591: IFFALSE 20605
// Say ( tmp , D2b-Sol1-1 ) ;
20593: LD_VAR 0 4
20597: PPUSH
20598: LD_STRING D2b-Sol1-1
20600: PPUSH
20601: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20605: LD_VAR 0 4
20609: PPUSH
20610: CALL_OW 258
20614: PUSH
20615: LD_INT 2
20617: EQUAL
20618: IFFALSE 20632
// Say ( tmp , D2b-FSol1-1 ) ;
20620: LD_VAR 0 4
20624: PPUSH
20625: LD_STRING D2b-FSol1-1
20627: PPUSH
20628: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20632: LD_EXP 19
20636: PPUSH
20637: LD_STRING D2b-Kurt-1
20639: PPUSH
20640: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20644: LD_VAR 0 4
20648: PPUSH
20649: CALL_OW 258
20653: PUSH
20654: LD_INT 1
20656: EQUAL
20657: IFFALSE 20671
// Say ( tmp , D2b-Sol1-2 ) ;
20659: LD_VAR 0 4
20663: PPUSH
20664: LD_STRING D2b-Sol1-2
20666: PPUSH
20667: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20671: LD_VAR 0 4
20675: PPUSH
20676: CALL_OW 258
20680: PUSH
20681: LD_INT 2
20683: EQUAL
20684: IFFALSE 20698
// Say ( tmp , D2b-FSol1-2 ) ;
20686: LD_VAR 0 4
20690: PPUSH
20691: LD_STRING D2b-FSol1-2
20693: PPUSH
20694: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20698: LD_EXP 19
20702: PPUSH
20703: LD_STRING D2b-Kurt-2
20705: PPUSH
20706: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20710: LD_VAR 0 4
20714: PPUSH
20715: CALL_OW 258
20719: PUSH
20720: LD_INT 1
20722: EQUAL
20723: IFFALSE 20737
// Say ( tmp , D2c-Sol1-2 ) ;
20725: LD_VAR 0 4
20729: PPUSH
20730: LD_STRING D2c-Sol1-2
20732: PPUSH
20733: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20737: LD_VAR 0 4
20741: PPUSH
20742: CALL_OW 258
20746: PUSH
20747: LD_INT 2
20749: EQUAL
20750: IFFALSE 20764
// Say ( tmp , D2c-FSol1-2 ) ;
20752: LD_VAR 0 4
20756: PPUSH
20757: LD_STRING D2c-FSol1-2
20759: PPUSH
20760: CALL_OW 88
// DialogueOff ;
20764: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20768: LD_ADDR_VAR 0 7
20772: PUSH
20773: CALL 6794 0 0
20777: ST_TO_ADDR
// if dec2 = 1 then
20778: LD_VAR 0 7
20782: PUSH
20783: LD_INT 1
20785: EQUAL
20786: IFFALSE 20848
// begin DialogueOn ;
20788: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20792: LD_EXP 19
20796: PPUSH
20797: LD_STRING D2a-Kurt-1
20799: PPUSH
20800: CALL_OW 88
// DialogueOff ;
20804: CALL_OW 7
// InGameOff ;
20808: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20812: LD_INT 1
20814: PPUSH
20815: LD_INT 2
20817: PPUSH
20818: LD_INT 2
20820: PPUSH
20821: LD_INT 1
20823: PPUSH
20824: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20828: LD_EXP 19
20832: PPUSH
20833: LD_INT 8
20835: PPUSH
20836: CALL_OW 113
// readyToEscape = 1 ;
20840: LD_ADDR_EXP 21
20844: PUSH
20845: LD_INT 1
20847: ST_TO_ADDR
// end ; if dec2 = 2 then
20848: LD_VAR 0 7
20852: PUSH
20853: LD_INT 2
20855: EQUAL
20856: IFFALSE 21026
// begin if tmp = JMM then
20858: LD_VAR 0 4
20862: PUSH
20863: LD_EXP 1
20867: EQUAL
20868: IFFALSE 20928
// begin DialogueOn ;
20870: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20874: LD_EXP 1
20878: PPUSH
20879: LD_STRING D2c-JMM-1
20881: PPUSH
20882: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20886: LD_EXP 19
20890: PPUSH
20891: LD_STRING D2c-Kurt-1
20893: PPUSH
20894: CALL_OW 88
// DialogueOff ;
20898: CALL_OW 7
// InGameOff ;
20902: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20906: LD_EXP 19
20910: PPUSH
20911: LD_INT 8
20913: PPUSH
20914: CALL_OW 113
// readyToEscape = 1 ;
20918: LD_ADDR_EXP 21
20922: PUSH
20923: LD_INT 1
20925: ST_TO_ADDR
// end else
20926: GO 21026
// begin DialogueOn ;
20928: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20932: LD_VAR 0 4
20936: PPUSH
20937: CALL_OW 258
20941: PUSH
20942: LD_INT 1
20944: EQUAL
20945: IFFALSE 20959
// Say ( tmp , D2c-Sol1-1 ) ;
20947: LD_VAR 0 4
20951: PPUSH
20952: LD_STRING D2c-Sol1-1
20954: PPUSH
20955: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20959: LD_VAR 0 4
20963: PPUSH
20964: CALL_OW 258
20968: PUSH
20969: LD_INT 2
20971: EQUAL
20972: IFFALSE 20986
// Say ( tmp , D2c-FSol1-1 ) ;
20974: LD_VAR 0 4
20978: PPUSH
20979: LD_STRING D2c-FSol1-1
20981: PPUSH
20982: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20986: LD_EXP 19
20990: PPUSH
20991: LD_STRING D2c-Kurt-1
20993: PPUSH
20994: CALL_OW 88
// DialogueOff ;
20998: CALL_OW 7
// InGameOff ;
21002: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21006: LD_EXP 19
21010: PPUSH
21011: LD_INT 8
21013: PPUSH
21014: CALL_OW 113
// readyToEscape = 1 ;
21018: LD_ADDR_EXP 21
21022: PUSH
21023: LD_INT 1
21025: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
21026: LD_VAR 0 6
21030: PUSH
21031: LD_INT 3
21033: EQUAL
21034: IFFALSE 21208
// begin DialogueOn ;
21036: CALL_OW 6
// if tmp = JMM then
21040: LD_VAR 0 4
21044: PUSH
21045: LD_EXP 1
21049: EQUAL
21050: IFFALSE 21110
// begin DialogueOn ;
21052: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
21056: LD_EXP 1
21060: PPUSH
21061: LD_STRING D2c-JMM-1
21063: PPUSH
21064: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21068: LD_EXP 19
21072: PPUSH
21073: LD_STRING D2c-Kurt-1
21075: PPUSH
21076: CALL_OW 88
// DialogueOff ;
21080: CALL_OW 7
// InGameOff ;
21084: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21088: LD_EXP 19
21092: PPUSH
21093: LD_INT 8
21095: PPUSH
21096: CALL_OW 113
// readyToEscape = 1 ;
21100: LD_ADDR_EXP 21
21104: PUSH
21105: LD_INT 1
21107: ST_TO_ADDR
// end else
21108: GO 21208
// begin DialogueOn ;
21110: CALL_OW 6
// if GetSex ( tmp ) = 1 then
21114: LD_VAR 0 4
21118: PPUSH
21119: CALL_OW 258
21123: PUSH
21124: LD_INT 1
21126: EQUAL
21127: IFFALSE 21141
// Say ( tmp , D2c-Sol1-1 ) ;
21129: LD_VAR 0 4
21133: PPUSH
21134: LD_STRING D2c-Sol1-1
21136: PPUSH
21137: CALL_OW 88
// if GetSex ( tmp ) = 2 then
21141: LD_VAR 0 4
21145: PPUSH
21146: CALL_OW 258
21150: PUSH
21151: LD_INT 2
21153: EQUAL
21154: IFFALSE 21168
// Say ( tmp , D2c-FSol1-1 ) ;
21156: LD_VAR 0 4
21160: PPUSH
21161: LD_STRING D2c-FSol1-1
21163: PPUSH
21164: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21168: LD_EXP 19
21172: PPUSH
21173: LD_STRING D2c-Kurt-1
21175: PPUSH
21176: CALL_OW 88
// DialogueOff ;
21180: CALL_OW 7
// InGameOff ;
21184: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21188: LD_EXP 19
21192: PPUSH
21193: LD_INT 8
21195: PPUSH
21196: CALL_OW 113
// readyToEscape = 1 ;
21200: LD_ADDR_EXP 21
21204: PUSH
21205: LD_INT 1
21207: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
21208: LD_ADDR_EXP 29
21212: PUSH
21213: LD_INT 0
21215: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21216: LD_INT 35
21218: PPUSH
21219: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
21223: LD_EXP 19
21227: PPUSH
21228: LD_INT 8
21230: PPUSH
21231: CALL_OW 308
21235: PUSH
21236: LD_EXP 21
21240: AND
21241: PUSH
21242: LD_EXP 19
21246: PPUSH
21247: CALL_OW 301
21251: OR
21252: IFFALSE 21216
// if IsDead ( Kurt ) then
21254: LD_EXP 19
21258: PPUSH
21259: CALL_OW 301
21263: IFFALSE 21267
// exit ;
21265: GO 21336
// RemoveUnit ( Kurt ) ;
21267: LD_EXP 19
21271: PPUSH
21272: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
21276: LD_EXP 19
21280: PPUSH
21281: LD_STRING Kurt
21283: PPUSH
21284: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
21288: LD_INT 1
21290: PPUSH
21291: LD_INT 2
21293: PPUSH
21294: CALL_OW 81
21298: PUSH
21299: LD_INT 0
21301: EQUAL
21302: IFFALSE 21312
// KurtStatus = 1 ;
21304: LD_ADDR_EXP 20
21308: PUSH
21309: LD_INT 1
21311: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
21312: LD_INT 1
21314: PPUSH
21315: LD_INT 2
21317: PPUSH
21318: CALL_OW 81
21322: PUSH
21323: LD_INT 2
21325: EQUAL
21326: IFFALSE 21336
// KurtStatus = 2 ;
21328: LD_ADDR_EXP 20
21332: PUSH
21333: LD_INT 2
21335: ST_TO_ADDR
// end ; end_of_file
21336: LD_VAR 0 1
21340: RET
// every 0 0$1 do
21341: GO 21343
21343: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
21344: LD_INT 3
21346: PPUSH
21347: LD_INT 32
21349: PPUSH
21350: LD_INT 3
21352: PPUSH
21353: CALL 6849 0 3
21357: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21358: GO 21360
21360: DISABLE
21361: LD_INT 0
21363: PPUSH
// begin enemyWayX = [ ] ;
21364: LD_ADDR_EXP 49
21368: PUSH
21369: EMPTY
21370: ST_TO_ADDR
// enemyWayY = [ ] ;
21371: LD_ADDR_EXP 50
21375: PUSH
21376: EMPTY
21377: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
21378: LD_ADDR_VAR 0 1
21382: PUSH
21383: LD_INT 1
21385: PPUSH
21386: LD_INT 2
21388: PPUSH
21389: CALL_OW 12
21393: ST_TO_ADDR
// if rnd = 1 then
21394: LD_VAR 0 1
21398: PUSH
21399: LD_INT 1
21401: EQUAL
21402: IFFALSE 21442
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21404: LD_ADDR_EXP 49
21408: PUSH
21409: LD_INT 93
21411: PUSH
21412: LD_INT 84
21414: PUSH
21415: LD_INT 104
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: LIST
21422: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21423: LD_ADDR_EXP 50
21427: PUSH
21428: LD_INT 51
21430: PUSH
21431: LD_INT 35
21433: PUSH
21434: LD_INT 28
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: LIST
21441: ST_TO_ADDR
// end ; if rnd = 2 then
21442: LD_VAR 0 1
21446: PUSH
21447: LD_INT 2
21449: EQUAL
21450: IFFALSE 21506
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21452: LD_ADDR_EXP 49
21456: PUSH
21457: LD_INT 93
21459: PUSH
21460: LD_INT 52
21462: PUSH
21463: LD_INT 34
21465: PUSH
21466: LD_INT 28
21468: PUSH
21469: LD_INT 30
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21479: LD_ADDR_EXP 50
21483: PUSH
21484: LD_INT 51
21486: PUSH
21487: LD_INT 45
21489: PUSH
21490: LD_INT 35
21492: PUSH
21493: LD_INT 26
21495: PUSH
21496: LD_INT 20
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: ST_TO_ADDR
// end ; enable ;
21506: ENABLE
// end ;
21507: PPOPN 1
21509: END
// every 0 0$1 do
21510: GO 21512
21512: DISABLE
// begin enable ;
21513: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21514: LD_INT 3
21516: PPUSH
21517: LD_INT 2
21519: PPUSH
21520: LD_INT 10
21522: PPUSH
21523: LD_EXP 31
21527: PPUSH
21528: CALL 8284 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21532: LD_INT 3
21534: PPUSH
21535: LD_INT 12
21537: PPUSH
21538: LD_EXP 31
21542: PPUSH
21543: CALL 10169 0 3
// if disableHealAI = 0 then
21547: LD_EXP 33
21551: PUSH
21552: LD_INT 0
21554: EQUAL
21555: IFFALSE 21576
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21557: LD_INT 3
21559: PPUSH
21560: LD_INT 9
21562: PPUSH
21563: LD_INT 10
21565: PPUSH
21566: LD_INT 32
21568: PUSH
21569: EMPTY
21570: LIST
21571: PPUSH
21572: CALL 8675 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21576: LD_INT 3
21578: PPUSH
21579: LD_INT 51
21581: PPUSH
21582: LD_INT 6
21584: PPUSH
21585: CALL 9383 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21589: LD_INT 3
21591: PPUSH
21592: LD_INT 12
21594: PPUSH
21595: LD_INT 121
21597: PPUSH
21598: LD_INT 100
21600: PPUSH
21601: CALL 7244 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21605: LD_INT 3
21607: PPUSH
21608: LD_INT 22
21610: PPUSH
21611: LD_EXP 49
21615: PPUSH
21616: LD_EXP 50
21620: PPUSH
21621: CALL 7447 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21625: LD_INT 3
21627: PPUSH
21628: LD_INT 10
21630: PPUSH
21631: CALL 9526 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21635: LD_INT 3
21637: PPUSH
21638: LD_INT 1
21640: PPUSH
21641: CALL 9939 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21645: LD_INT 2
21647: PPUSH
21648: CALL_OW 303
21652: PUSH
21653: LD_INT 2
21655: PPUSH
21656: CALL_OW 255
21660: PUSH
21661: LD_INT 1
21663: EQUAL
21664: OR
21665: IFFALSE 21677
// DefendDepot ( 3 , rudepo ) ;
21667: LD_INT 3
21669: PPUSH
21670: LD_INT 2
21672: PPUSH
21673: CALL 9219 0 2
// end ;
21677: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21678: LD_INT 22
21680: PUSH
21681: LD_INT 3
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 21
21690: PUSH
21691: LD_INT 2
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 55
21700: PUSH
21701: EMPTY
21702: LIST
21703: PUSH
21704: LD_INT 3
21706: PUSH
21707: LD_INT 34
21709: PUSH
21710: LD_INT 51
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: PPUSH
21727: CALL_OW 69
21731: PUSH
21732: LD_INT 0
21734: EQUAL
21735: PUSH
21736: LD_INT 21
21738: PPUSH
21739: CALL_OW 255
21743: PUSH
21744: LD_INT 3
21746: EQUAL
21747: AND
21748: PUSH
21749: LD_INT 21
21751: PPUSH
21752: CALL_OW 302
21756: AND
21757: PUSH
21758: LD_INT 2
21760: PPUSH
21761: CALL_OW 255
21765: PUSH
21766: LD_INT 3
21768: EQUAL
21769: AND
21770: PUSH
21771: LD_INT 2
21773: PPUSH
21774: CALL_OW 302
21778: AND
21779: IFFALSE 21959
21781: GO 21783
21783: DISABLE
// begin enable ;
21784: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21785: LD_INT 2
21787: PPUSH
21788: CALL_OW 274
21792: PPUSH
21793: LD_INT 1
21795: PPUSH
21796: LD_INT 1000
21798: PPUSH
21799: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21803: LD_INT 3
21805: PPUSH
21806: LD_INT 21
21808: PPUSH
21809: LD_INT 4
21811: PUSH
21812: LD_INT 5
21814: PUSH
21815: LD_INT 6
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: PUSH
21823: LD_OWVAR 67
21827: ARRAY
21828: PPUSH
21829: LD_INT 43
21831: PUSH
21832: LD_INT 43
21834: PUSH
21835: LD_INT 44
21837: PUSH
21838: LD_INT 44
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 43
21849: PUSH
21850: LD_INT 43
21852: PUSH
21853: LD_INT 43
21855: PUSH
21856: LD_INT 44
21858: PUSH
21859: LD_INT 44
21861: PUSH
21862: LD_INT 46
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 43
21875: PUSH
21876: LD_INT 43
21878: PUSH
21879: LD_INT 43
21881: PUSH
21882: LD_INT 44
21884: PUSH
21885: LD_INT 44
21887: PUSH
21888: LD_INT 46
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: LIST
21903: PUSH
21904: LD_OWVAR 67
21908: ARRAY
21909: PPUSH
21910: LD_INT 1
21912: PPUSH
21913: LD_INT 1
21915: PPUSH
21916: LD_INT 22
21918: PUSH
21919: LD_INT 22
21921: PUSH
21922: LD_INT 24
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 1
21931: PPUSH
21932: LD_INT 2
21934: PPUSH
21935: CALL_OW 12
21939: ARRAY
21940: PUSH
21941: LD_INT 24
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: LIST
21948: PUSH
21949: LD_OWVAR 67
21953: ARRAY
21954: PPUSH
21955: CALL 7090 0 7
// end ;
21959: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21960: LD_INT 17
21962: PPUSH
21963: CALL_OW 255
21967: PUSH
21968: LD_INT 3
21970: EQUAL
21971: PUSH
21972: LD_INT 17
21974: PPUSH
21975: CALL_OW 302
21979: AND
21980: PUSH
21981: LD_INT 2
21983: PPUSH
21984: CALL_OW 255
21988: PUSH
21989: LD_INT 3
21991: EQUAL
21992: AND
21993: PUSH
21994: LD_INT 2
21996: PPUSH
21997: CALL_OW 302
22001: AND
22002: IFFALSE 22069
22004: GO 22006
22006: DISABLE
// begin enable ;
22007: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
22008: LD_INT 17
22010: PPUSH
22011: LD_INT 22
22013: PPUSH
22014: LD_INT 1
22016: PPUSH
22017: LD_INT 1
22019: PPUSH
22020: LD_INT 42
22022: PUSH
22023: LD_INT 43
22025: PUSH
22026: LD_INT 44
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 1
22036: PPUSH
22037: LD_INT 3
22039: PPUSH
22040: CALL_OW 12
22044: ARRAY
22045: PPUSH
22046: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
22050: LD_INT 17
22052: PPUSH
22053: LD_INT 22
22055: PPUSH
22056: LD_INT 1
22058: PPUSH
22059: LD_INT 1
22061: PPUSH
22062: LD_INT 51
22064: PPUSH
22065: CALL_OW 185
// end ;
22069: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
22070: LD_INT 17
22072: PPUSH
22073: CALL_OW 302
22077: PUSH
22078: LD_INT 17
22080: PPUSH
22081: CALL_OW 255
22085: PUSH
22086: LD_INT 3
22088: EQUAL
22089: AND
22090: PUSH
22091: LD_INT 2
22093: PPUSH
22094: CALL_OW 302
22098: AND
22099: PUSH
22100: LD_INT 2
22102: PPUSH
22103: CALL_OW 255
22107: PUSH
22108: LD_INT 3
22110: EQUAL
22111: AND
22112: PUSH
22113: LD_INT 17
22115: PPUSH
22116: CALL_OW 313
22120: NOT
22121: AND
22122: IFFALSE 22216
22124: GO 22126
22126: DISABLE
22127: LD_INT 0
22129: PPUSH
// begin for i = 1 to 6 do
22130: LD_ADDR_VAR 0 1
22134: PUSH
22135: DOUBLE
22136: LD_INT 1
22138: DEC
22139: ST_TO_ADDR
22140: LD_INT 6
22142: PUSH
22143: FOR_TO
22144: IFFALSE 22214
// begin uc_side = 3 ;
22146: LD_ADDR_OWVAR 20
22150: PUSH
22151: LD_INT 3
22153: ST_TO_ADDR
// uc_nation = 3 ;
22154: LD_ADDR_OWVAR 21
22158: PUSH
22159: LD_INT 3
22161: ST_TO_ADDR
// hc_gallery :=  ;
22162: LD_ADDR_OWVAR 33
22166: PUSH
22167: LD_STRING 
22169: ST_TO_ADDR
// hc_name :=  ;
22170: LD_ADDR_OWVAR 26
22174: PUSH
22175: LD_STRING 
22177: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
22178: LD_INT 0
22180: PPUSH
22181: LD_EXP 34
22185: PPUSH
22186: LD_EXP 35
22190: PPUSH
22191: CALL_OW 12
22195: PPUSH
22196: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
22200: CALL_OW 44
22204: PPUSH
22205: LD_INT 17
22207: PPUSH
22208: CALL_OW 52
// end ;
22212: GO 22143
22214: POP
22215: POP
// end ;
22216: PPOPN 1
22218: END
// every 2 2$0 do var i , j ;
22219: GO 22221
22221: DISABLE
22222: LD_INT 0
22224: PPUSH
22225: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
22226: LD_INT 14700
22228: PUSH
22229: LD_INT 33600
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 1
22238: PPUSH
22239: LD_INT 2
22241: PPUSH
22242: CALL_OW 12
22246: ARRAY
22247: PPUSH
22248: CALL_OW 67
// disableHealAI = 1 ;
22252: LD_ADDR_EXP 33
22256: PUSH
22257: LD_INT 1
22259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22260: LD_ADDR_VAR 0 1
22264: PUSH
22265: LD_INT 22
22267: PUSH
22268: LD_INT 3
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 25
22277: PUSH
22278: LD_INT 4
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 69
22293: PUSH
22294: FOR_IN
22295: IFFALSE 22308
// ComExitBuilding ( i ) ;
22297: LD_VAR 0 1
22301: PPUSH
22302: CALL_OW 122
22306: GO 22294
22308: POP
22309: POP
// wait ( 0 0$1 ) ;
22310: LD_INT 35
22312: PPUSH
22313: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22317: LD_INT 35
22319: PPUSH
22320: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22324: LD_ADDR_VAR 0 1
22328: PUSH
22329: LD_INT 22
22331: PUSH
22332: LD_INT 3
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 25
22341: PUSH
22342: LD_INT 4
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PPUSH
22353: CALL_OW 69
22357: PUSH
22358: FOR_IN
22359: IFFALSE 22436
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
22361: LD_ADDR_VAR 0 2
22365: PUSH
22366: LD_INT 17
22368: PPUSH
22369: LD_INT 22
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 25
22381: PUSH
22382: LD_INT 12
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PPUSH
22393: CALL_OW 70
22397: PUSH
22398: FOR_IN
22399: IFFALSE 22432
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22401: LD_VAR 0 1
22405: PPUSH
22406: LD_VAR 0 2
22410: PPUSH
22411: CALL_OW 250
22415: PPUSH
22416: LD_VAR 0 2
22420: PPUSH
22421: CALL_OW 251
22425: PPUSH
22426: CALL_OW 191
// end ;
22430: GO 22398
22432: POP
22433: POP
// end ;
22434: GO 22358
22436: POP
22437: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22438: LD_INT 22
22440: PUSH
22441: LD_INT 3
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 25
22450: PUSH
22451: LD_INT 4
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PPUSH
22462: CALL_OW 69
22466: PUSH
22467: LD_INT 0
22469: EQUAL
22470: PUSH
22471: LD_EXP 32
22475: PUSH
22476: LD_INT 6
22478: PUSH
22479: LD_INT 7
22481: PUSH
22482: LD_INT 8
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: LIST
22489: PUSH
22490: LD_OWVAR 67
22494: ARRAY
22495: GREATEREQUAL
22496: OR
22497: PUSH
22498: LD_INT 17
22500: PPUSH
22501: LD_INT 22
22503: PUSH
22504: LD_INT 0
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 25
22513: PUSH
22514: LD_INT 12
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PPUSH
22525: CALL_OW 70
22529: PUSH
22530: LD_INT 0
22532: EQUAL
22533: OR
22534: IFFALSE 22317
// disableHealAI = 0 ;
22536: LD_ADDR_EXP 33
22540: PUSH
22541: LD_INT 0
22543: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22544: LD_ADDR_VAR 0 1
22548: PUSH
22549: LD_INT 22
22551: PUSH
22552: LD_INT 3
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 25
22561: PUSH
22562: LD_INT 12
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PPUSH
22573: CALL_OW 69
22577: PUSH
22578: FOR_IN
22579: IFFALSE 22595
// SetClass ( i , 16 ) ;
22581: LD_VAR 0 1
22585: PPUSH
22586: LD_INT 16
22588: PPUSH
22589: CALL_OW 336
22593: GO 22578
22595: POP
22596: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22597: LD_ADDR_VAR 0 1
22601: PUSH
22602: LD_INT 22
22604: PUSH
22605: LD_INT 3
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 25
22614: PUSH
22615: LD_INT 4
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PPUSH
22626: CALL_OW 69
22630: PUSH
22631: FOR_IN
22632: IFFALSE 22651
// ComMoveXY ( i , 113 , 94 ) ;
22634: LD_VAR 0 1
22638: PPUSH
22639: LD_INT 113
22641: PPUSH
22642: LD_INT 94
22644: PPUSH
22645: CALL_OW 111
22649: GO 22631
22651: POP
22652: POP
// end ;
22653: PPOPN 2
22655: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22656: LD_INT 21
22658: PPUSH
22659: CALL_OW 255
22663: PUSH
22664: LD_INT 3
22666: EQUAL
22667: PUSH
22668: LD_INT 21
22670: PPUSH
22671: CALL_OW 302
22675: AND
22676: PUSH
22677: LD_INT 22
22679: PUSH
22680: LD_INT 3
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 34
22689: PUSH
22690: LD_INT 51
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PPUSH
22701: CALL_OW 69
22705: PUSH
22706: LD_INT 0
22708: EQUAL
22709: AND
22710: IFFALSE 22742
22712: GO 22714
22714: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22715: LD_INT 21
22717: PPUSH
22718: LD_INT 23
22720: PPUSH
22721: LD_INT 1
22723: PPUSH
22724: LD_INT 1
22726: PPUSH
22727: LD_INT 51
22729: PPUSH
22730: CALL_OW 185
// wait ( 5 5$0 ) ;
22734: LD_INT 10500
22736: PPUSH
22737: CALL_OW 67
// enable ;
22741: ENABLE
// end ; end_of_file
22742: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22743: LD_EXP 26
22747: PUSH
22748: LD_INT 0
22750: LESSEQUAL
22751: IFFALSE 22900
22753: GO 22755
22755: DISABLE
22756: LD_INT 0
22758: PPUSH
22759: PPUSH
22760: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22761: LD_ADDR_VAR 0 2
22765: PUSH
22766: LD_INT 22
22768: PUSH
22769: LD_INT 1
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 21
22778: PUSH
22779: LD_INT 3
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: LD_INT 30
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 30
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: PPUSH
22819: CALL_OW 69
22823: ST_TO_ADDR
// for i in tmp do
22824: LD_ADDR_VAR 0 1
22828: PUSH
22829: LD_VAR 0 2
22833: PUSH
22834: FOR_IN
22835: IFFALSE 22868
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22837: LD_ADDR_VAR 0 3
22841: PUSH
22842: LD_VAR 0 3
22846: PUSH
22847: LD_VAR 0 1
22851: PPUSH
22852: CALL_OW 274
22856: PPUSH
22857: LD_INT 1
22859: PPUSH
22860: CALL_OW 275
22864: PLUS
22865: ST_TO_ADDR
22866: GO 22834
22868: POP
22869: POP
// if yourCrates >= needCrates then
22870: LD_VAR 0 3
22874: PUSH
22875: LD_EXP 25
22879: GREATEREQUAL
22880: IFFALSE 22893
// FinishMission ( yourCrates ) else
22882: LD_VAR 0 3
22886: PPUSH
22887: CALL 22903 0 1
22891: GO 22900
// YouLost ( matmin ) ;
22893: LD_STRING matmin
22895: PPUSH
22896: CALL_OW 104
// end ;
22900: PPOPN 3
22902: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22903: LD_INT 0
22905: PPUSH
22906: PPUSH
22907: PPUSH
22908: PPUSH
// if killCounter = 0 then
22909: LD_EXP 47
22913: PUSH
22914: LD_INT 0
22916: EQUAL
22917: IFFALSE 22926
// SetAchievement ( ACH_SURV ) ;
22919: LD_STRING ACH_SURV
22921: PPUSH
22922: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22926: LD_INT 22
22928: PUSH
22929: LD_INT 3
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 21
22938: PUSH
22939: LD_INT 3
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PPUSH
22950: CALL_OW 69
22954: PUSH
22955: LD_INT 0
22957: EQUAL
22958: IFFALSE 22974
// begin wait ( 3 ) ;
22960: LD_INT 3
22962: PPUSH
22963: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22967: LD_STRING ACH_BASEDESTROYER
22969: PPUSH
22970: CALL_OW 543
// end ; m1 := false ;
22974: LD_ADDR_VAR 0 3
22978: PUSH
22979: LD_INT 0
22981: ST_TO_ADDR
// m2 := false ;
22982: LD_ADDR_VAR 0 4
22986: PUSH
22987: LD_INT 0
22989: ST_TO_ADDR
// m3 := false ;
22990: LD_ADDR_VAR 0 5
22994: PUSH
22995: LD_INT 0
22997: ST_TO_ADDR
// if crates + 100 > crates then
22998: LD_VAR 0 1
23002: PUSH
23003: LD_INT 100
23005: PLUS
23006: PUSH
23007: LD_VAR 0 1
23011: GREATER
23012: IFFALSE 23044
// begin AddMedal ( cans , 1 ) ;
23014: LD_STRING cans
23016: PPUSH
23017: LD_INT 1
23019: PPUSH
23020: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
23024: LD_INT 1
23026: PPUSH
23027: LD_STRING 06_crates_1
23029: PPUSH
23030: CALL_OW 39
// m1 := true ;
23034: LD_ADDR_VAR 0 3
23038: PUSH
23039: LD_INT 1
23041: ST_TO_ADDR
// end else
23042: GO 23065
// begin AddMedal ( cans , - 1 ) ;
23044: LD_STRING cans
23046: PPUSH
23047: LD_INT 1
23049: NEG
23050: PPUSH
23051: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
23055: LD_INT 0
23057: PPUSH
23058: LD_STRING 06_crates_1
23060: PPUSH
23061: CALL_OW 39
// end ; if unitLost < 3 then
23065: LD_EXP 30
23069: PUSH
23070: LD_INT 3
23072: LESS
23073: IFFALSE 23095
// begin AddMedal ( people , 1 ) ;
23075: LD_STRING people
23077: PPUSH
23078: LD_INT 1
23080: PPUSH
23081: CALL_OW 101
// m2 := true ;
23085: LD_ADDR_VAR 0 4
23089: PUSH
23090: LD_INT 1
23092: ST_TO_ADDR
// end else
23093: GO 23106
// begin AddMedal ( people , - 1 ) ;
23095: LD_STRING people
23097: PPUSH
23098: LD_INT 1
23100: NEG
23101: PPUSH
23102: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
23106: LD_EXP 28
23110: PPUSH
23111: LD_STRING 06_remoteVehs_1
23113: PPUSH
23114: CALL_OW 39
// if remoteVehiclesBuild = 1 then
23118: LD_EXP 28
23122: PUSH
23123: LD_INT 1
23125: EQUAL
23126: IFFALSE 23148
// begin AddMedal ( remote , 1 ) ;
23128: LD_STRING remote
23130: PPUSH
23131: LD_INT 1
23133: PPUSH
23134: CALL_OW 101
// m3 := true ;
23138: LD_ADDR_VAR 0 5
23142: PUSH
23143: LD_INT 1
23145: ST_TO_ADDR
// end else
23146: GO 23188
// begin if GetTech ( 18 , 1 ) = state_enabled then
23148: LD_INT 18
23150: PPUSH
23151: LD_INT 1
23153: PPUSH
23154: CALL_OW 321
23158: PUSH
23159: LD_INT 1
23161: EQUAL
23162: IFFALSE 23177
// begin AddMedal ( remote , - 1 ) ;
23164: LD_STRING remote
23166: PPUSH
23167: LD_INT 1
23169: NEG
23170: PPUSH
23171: CALL_OW 101
// end else
23175: GO 23188
// begin AddMedal ( remote , - 2 ) ;
23177: LD_STRING remote
23179: PPUSH
23180: LD_INT 2
23182: NEG
23183: PPUSH
23184: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
23188: LD_VAR 0 3
23192: PUSH
23193: LD_VAR 0 4
23197: AND
23198: PUSH
23199: LD_VAR 0 5
23203: AND
23204: IFFALSE 23220
// begin wait ( 3 ) ;
23206: LD_INT 3
23208: PPUSH
23209: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
23213: LD_STRING ACH_ASPEED_6
23215: PPUSH
23216: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
23220: LD_OWVAR 67
23224: PUSH
23225: LD_INT 3
23227: EQUAL
23228: PUSH
23229: LD_VAR 0 3
23233: AND
23234: PUSH
23235: LD_VAR 0 4
23239: AND
23240: PUSH
23241: LD_VAR 0 5
23245: AND
23246: IFFALSE 23258
// SetAchievementEX ( ACH_AMER , 6 ) ;
23248: LD_STRING ACH_AMER
23250: PPUSH
23251: LD_INT 6
23253: PPUSH
23254: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
23258: LD_EXP 20
23262: PPUSH
23263: LD_STRING 06_KurtStatus_1
23265: PPUSH
23266: CALL_OW 39
// GiveMedals ( Main ) ;
23270: LD_STRING Main
23272: PPUSH
23273: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
23277: LD_INT 22
23279: PUSH
23280: LD_INT 1
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 21
23289: PUSH
23290: LD_INT 1
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 50
23299: PUSH
23300: EMPTY
23301: LIST
23302: PUSH
23303: LD_INT 2
23305: PUSH
23306: LD_INT 25
23308: PUSH
23309: LD_INT 1
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 25
23318: PUSH
23319: LD_INT 2
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 25
23328: PUSH
23329: LD_INT 3
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 25
23338: PUSH
23339: LD_INT 4
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: PPUSH
23359: CALL_OW 69
23363: PPUSH
23364: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23368: LD_EXP 1
23372: PPUSH
23373: LD_EXP 43
23377: PUSH
23378: LD_STRING JMM
23380: STR
23381: PPUSH
23382: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23386: LD_EXP 2
23390: PPUSH
23391: LD_EXP 43
23395: PUSH
23396: LD_STRING Lisa
23398: STR
23399: PPUSH
23400: CALL 6348 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23404: LD_EXP 3
23408: PPUSH
23409: LD_EXP 43
23413: PUSH
23414: LD_STRING Bobby
23416: STR
23417: PPUSH
23418: CALL 6348 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23422: LD_EXP 4
23426: PPUSH
23427: LD_EXP 43
23431: PUSH
23432: LD_STRING Cyrus
23434: STR
23435: PPUSH
23436: CALL 6348 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23440: LD_EXP 5
23444: PPUSH
23445: LD_EXP 43
23449: PUSH
23450: LD_STRING Frank
23452: STR
23453: PPUSH
23454: CALL 6348 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23458: LD_EXP 6
23462: PPUSH
23463: LD_EXP 43
23467: PUSH
23468: LD_STRING Brown
23470: STR
23471: PPUSH
23472: CALL 6348 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23476: LD_EXP 7
23480: PPUSH
23481: LD_EXP 43
23485: PUSH
23486: LD_STRING Donaldson
23488: STR
23489: PPUSH
23490: CALL 6348 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23494: LD_EXP 8
23498: PPUSH
23499: LD_EXP 43
23503: PUSH
23504: LD_STRING Gladstone
23506: STR
23507: PPUSH
23508: CALL 6348 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23512: LD_EXP 9
23516: PPUSH
23517: LD_EXP 43
23521: PUSH
23522: LD_STRING Denis
23524: STR
23525: PPUSH
23526: CALL 6348 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23530: LD_EXP 15
23534: PPUSH
23535: LD_EXP 43
23539: PUSH
23540: LD_STRING Joan
23542: STR
23543: PPUSH
23544: CALL 6348 0 2
// if IsLive ( Joan ) then
23548: LD_EXP 15
23552: PPUSH
23553: CALL_OW 300
23557: IFFALSE 23571
// SaveCharacters ( Joan , Joan ) ;
23559: LD_EXP 15
23563: PPUSH
23564: LD_STRING Joan
23566: PPUSH
23567: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23571: LD_EXP 16
23575: PPUSH
23576: LD_STRING 06_JoanStatus_1
23578: PPUSH
23579: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23583: LD_INT 50
23585: PUSH
23586: EMPTY
23587: LIST
23588: PUSH
23589: LD_INT 22
23591: PUSH
23592: LD_INT 1
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 21
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 2
23611: PUSH
23612: LD_INT 25
23614: PUSH
23615: LD_INT 1
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 25
23624: PUSH
23625: LD_INT 2
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 25
23634: PUSH
23635: LD_INT 3
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 25
23644: PUSH
23645: LD_INT 4
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: PPUSH
23665: CALL_OW 69
23669: PUSH
23670: LD_EXP 1
23674: PUSH
23675: LD_EXP 2
23679: PUSH
23680: LD_EXP 3
23684: PUSH
23685: LD_EXP 4
23689: PUSH
23690: LD_EXP 5
23694: PUSH
23695: LD_EXP 6
23699: PUSH
23700: LD_EXP 7
23704: PUSH
23705: LD_EXP 8
23709: PUSH
23710: LD_EXP 9
23714: PUSH
23715: LD_EXP 15
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: DIFF
23732: PPUSH
23733: LD_STRING 06_other_survivors
23735: PPUSH
23736: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23740: LD_INT 50
23742: PUSH
23743: EMPTY
23744: LIST
23745: PUSH
23746: LD_INT 22
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 21
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 2
23768: PUSH
23769: LD_INT 25
23771: PUSH
23772: LD_INT 12
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 25
23781: PUSH
23782: LD_INT 16
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: LIST
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: PPUSH
23800: CALL_OW 69
23804: PPUSH
23805: LD_STRING 06_other_apemans
23807: PPUSH
23808: CALL_OW 38
// YouWin ;
23812: CALL_OW 103
// end ; end_of_file
23816: LD_VAR 0 2
23820: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23821: LD_EXP 39
23825: PUSH
23826: LD_INT 3
23828: EQUAL
23829: IFFALSE 23920
23831: GO 23833
23833: DISABLE
// begin enable ;
23834: ENABLE
// sendedConvoys = 0 ;
23835: LD_ADDR_EXP 39
23839: PUSH
23840: LD_INT 0
23842: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23843: LD_INT 6
23845: PPUSH
23846: LD_INT 3
23848: PPUSH
23849: LD_INT 3
23851: PUSH
23852: LD_INT 4
23854: PUSH
23855: LD_INT 6
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: LIST
23862: PUSH
23863: LD_OWVAR 67
23867: ARRAY
23868: PPUSH
23869: LD_INT 0
23871: PPUSH
23872: LD_INT 0
23874: PPUSH
23875: LD_INT 0
23877: PPUSH
23878: LD_INT 0
23880: PPUSH
23881: LD_EXP 34
23885: PPUSH
23886: LD_EXP 35
23890: PPUSH
23891: CALL_OW 12
23895: PPUSH
23896: LD_INT 16
23898: PPUSH
23899: LD_INT 15
23901: PPUSH
23902: LD_INT 1
23904: PPUSH
23905: LD_INT 1
23907: PPUSH
23908: LD_INT 2
23910: PPUSH
23911: CALL_OW 12
23915: PPUSH
23916: CALL 10767 0 12
// end ; end_of_file
23920: END
// export function CreateNature ; var i , un ; begin
23921: LD_INT 0
23923: PPUSH
23924: PPUSH
23925: PPUSH
// for i = 1 to Difficulty + 2 do
23926: LD_ADDR_VAR 0 2
23930: PUSH
23931: DOUBLE
23932: LD_INT 1
23934: DEC
23935: ST_TO_ADDR
23936: LD_OWVAR 67
23940: PUSH
23941: LD_INT 2
23943: PLUS
23944: PUSH
23945: FOR_TO
23946: IFFALSE 24055
// begin hc_sex = sex_male ;
23948: LD_ADDR_OWVAR 27
23952: PUSH
23953: LD_INT 1
23955: ST_TO_ADDR
// uc_side = 0 ;
23956: LD_ADDR_OWVAR 20
23960: PUSH
23961: LD_INT 0
23963: ST_TO_ADDR
// uc_nation = nation_nature ;
23964: LD_ADDR_OWVAR 21
23968: PUSH
23969: LD_INT 0
23971: ST_TO_ADDR
// hc_class = class_tiger ;
23972: LD_ADDR_OWVAR 28
23976: PUSH
23977: LD_INT 14
23979: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23980: LD_ADDR_OWVAR 31
23984: PUSH
23985: LD_EXP 35
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: LD_INT 0
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24005: LD_ADDR_OWVAR 35
24009: PUSH
24010: LD_INT 5
24012: NEG
24013: PPUSH
24014: LD_INT 5
24016: PPUSH
24017: CALL_OW 12
24021: PUSH
24022: LD_OWVAR 67
24026: MUL
24027: ST_TO_ADDR
// un = CreateHuman ;
24028: LD_ADDR_VAR 0 3
24032: PUSH
24033: CALL_OW 44
24037: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24038: LD_VAR 0 3
24042: PPUSH
24043: LD_INT 18
24045: PPUSH
24046: LD_INT 0
24048: PPUSH
24049: CALL_OW 49
// end ;
24053: GO 23945
24055: POP
24056: POP
// for i = 1 to rand ( 3 , 4 ) do
24057: LD_ADDR_VAR 0 2
24061: PUSH
24062: DOUBLE
24063: LD_INT 1
24065: DEC
24066: ST_TO_ADDR
24067: LD_INT 3
24069: PPUSH
24070: LD_INT 4
24072: PPUSH
24073: CALL_OW 12
24077: PUSH
24078: FOR_TO
24079: IFFALSE 24173
// begin hc_sex = sex_male ;
24081: LD_ADDR_OWVAR 27
24085: PUSH
24086: LD_INT 1
24088: ST_TO_ADDR
// uc_side = 0 ;
24089: LD_ADDR_OWVAR 20
24093: PUSH
24094: LD_INT 0
24096: ST_TO_ADDR
// uc_nation = nation_nature ;
24097: LD_ADDR_OWVAR 21
24101: PUSH
24102: LD_INT 0
24104: ST_TO_ADDR
// hc_class = 18 ;
24105: LD_ADDR_OWVAR 28
24109: PUSH
24110: LD_INT 18
24112: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24113: LD_ADDR_OWVAR 31
24117: PUSH
24118: LD_EXP 35
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: LD_INT 0
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: ST_TO_ADDR
// hc_agressivity = 0 ;
24138: LD_ADDR_OWVAR 35
24142: PUSH
24143: LD_INT 0
24145: ST_TO_ADDR
// un = CreateHuman ;
24146: LD_ADDR_VAR 0 3
24150: PUSH
24151: CALL_OW 44
24155: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24156: LD_VAR 0 3
24160: PPUSH
24161: LD_INT 18
24163: PPUSH
24164: LD_INT 0
24166: PPUSH
24167: CALL_OW 49
// end ;
24171: GO 24078
24173: POP
24174: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
24175: LD_ADDR_VAR 0 2
24179: PUSH
24180: DOUBLE
24181: LD_INT 1
24183: DEC
24184: ST_TO_ADDR
24185: LD_INT 1
24187: PPUSH
24188: LD_INT 3
24190: PPUSH
24191: CALL_OW 12
24195: PUSH
24196: LD_OWVAR 67
24200: PLUS
24201: PUSH
24202: FOR_TO
24203: IFFALSE 24352
// begin hc_sex = sex_male ;
24205: LD_ADDR_OWVAR 27
24209: PUSH
24210: LD_INT 1
24212: ST_TO_ADDR
// uc_side = 0 ;
24213: LD_ADDR_OWVAR 20
24217: PUSH
24218: LD_INT 0
24220: ST_TO_ADDR
// uc_nation = nation_nature ;
24221: LD_ADDR_OWVAR 21
24225: PUSH
24226: LD_INT 0
24228: ST_TO_ADDR
// hc_class = class_apeman ;
24229: LD_ADDR_OWVAR 28
24233: PUSH
24234: LD_INT 12
24236: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24237: LD_ADDR_OWVAR 31
24241: PUSH
24242: LD_INT 2
24244: PPUSH
24245: LD_INT 5
24247: PPUSH
24248: CALL_OW 12
24252: PUSH
24253: LD_INT 0
24255: PPUSH
24256: LD_INT 2
24258: PPUSH
24259: CALL_OW 12
24263: PUSH
24264: LD_INT 0
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
24276: LD_ADDR_OWVAR 35
24280: PUSH
24281: LD_INT 20
24283: PPUSH
24284: LD_INT 30
24286: PPUSH
24287: CALL_OW 12
24291: PUSH
24292: LD_INT 30
24294: PPUSH
24295: LD_INT 40
24297: PPUSH
24298: CALL_OW 12
24302: PUSH
24303: LD_INT 40
24305: PPUSH
24306: LD_INT 50
24308: PPUSH
24309: CALL_OW 12
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: LIST
24318: PUSH
24319: LD_OWVAR 67
24323: ARRAY
24324: ST_TO_ADDR
// un = CreateHuman ;
24325: LD_ADDR_VAR 0 3
24329: PUSH
24330: CALL_OW 44
24334: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
24335: LD_VAR 0 3
24339: PPUSH
24340: LD_INT 19
24342: PPUSH
24343: LD_INT 0
24345: PPUSH
24346: CALL_OW 49
// end ;
24350: GO 24202
24352: POP
24353: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
24354: LD_ADDR_VAR 0 2
24358: PUSH
24359: DOUBLE
24360: LD_INT 1
24362: DEC
24363: ST_TO_ADDR
24364: LD_INT 5
24366: PPUSH
24367: LD_INT 6
24369: PPUSH
24370: CALL_OW 12
24374: PUSH
24375: LD_OWVAR 67
24379: PLUS
24380: PUSH
24381: FOR_TO
24382: IFFALSE 24490
// begin hc_sex = sex_male ;
24384: LD_ADDR_OWVAR 27
24388: PUSH
24389: LD_INT 1
24391: ST_TO_ADDR
// uc_side = 0 ;
24392: LD_ADDR_OWVAR 20
24396: PUSH
24397: LD_INT 0
24399: ST_TO_ADDR
// uc_nation = nation_nature ;
24400: LD_ADDR_OWVAR 21
24404: PUSH
24405: LD_INT 0
24407: ST_TO_ADDR
// hc_class = class_apeman ;
24408: LD_ADDR_OWVAR 28
24412: PUSH
24413: LD_INT 12
24415: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24416: LD_ADDR_OWVAR 31
24420: PUSH
24421: LD_INT 2
24423: PPUSH
24424: LD_INT 5
24426: PPUSH
24427: CALL_OW 12
24431: PUSH
24432: LD_INT 0
24434: PPUSH
24435: LD_INT 2
24437: PPUSH
24438: CALL_OW 12
24442: PUSH
24443: LD_INT 0
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: ST_TO_ADDR
// hc_agressivity = 0 ;
24455: LD_ADDR_OWVAR 35
24459: PUSH
24460: LD_INT 0
24462: ST_TO_ADDR
// un = CreateHuman ;
24463: LD_ADDR_VAR 0 3
24467: PUSH
24468: CALL_OW 44
24472: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24473: LD_VAR 0 3
24477: PPUSH
24478: LD_INT 20
24480: PPUSH
24481: LD_INT 0
24483: PPUSH
24484: CALL_OW 49
// end ;
24488: GO 24381
24490: POP
24491: POP
// end ; end_of_file end_of_file
24492: LD_VAR 0 1
24496: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
24497: LD_INT 0
24499: PPUSH
// ar_miner := 81 ;
24500: LD_ADDR_EXP 58
24504: PUSH
24505: LD_INT 81
24507: ST_TO_ADDR
// ar_crane := 88 ;
24508: LD_ADDR_EXP 57
24512: PUSH
24513: LD_INT 88
24515: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24516: LD_ADDR_EXP 52
24520: PUSH
24521: LD_INT 89
24523: ST_TO_ADDR
// us_hack := 99 ;
24524: LD_ADDR_EXP 53
24528: PUSH
24529: LD_INT 99
24531: ST_TO_ADDR
// us_artillery := 97 ;
24532: LD_ADDR_EXP 54
24536: PUSH
24537: LD_INT 97
24539: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24540: LD_ADDR_EXP 55
24544: PUSH
24545: LD_INT 91
24547: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
24548: LD_ADDR_EXP 56
24552: PUSH
24553: LD_INT 92
24555: ST_TO_ADDR
// ru_radar := 98 ;
24556: LD_ADDR_EXP 51
24560: PUSH
24561: LD_INT 98
24563: ST_TO_ADDR
// tech_Artillery := 80 ;
24564: LD_ADDR_EXP 59
24568: PUSH
24569: LD_INT 80
24571: ST_TO_ADDR
// tech_RadMat := 81 ;
24572: LD_ADDR_EXP 60
24576: PUSH
24577: LD_INT 81
24579: ST_TO_ADDR
// tech_BasicTools := 82 ;
24580: LD_ADDR_EXP 61
24584: PUSH
24585: LD_INT 82
24587: ST_TO_ADDR
// tech_Cargo := 83 ;
24588: LD_ADDR_EXP 62
24592: PUSH
24593: LD_INT 83
24595: ST_TO_ADDR
// tech_Track := 84 ;
24596: LD_ADDR_EXP 63
24600: PUSH
24601: LD_INT 84
24603: ST_TO_ADDR
// tech_Crane := 85 ;
24604: LD_ADDR_EXP 64
24608: PUSH
24609: LD_INT 85
24611: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24612: LD_ADDR_EXP 65
24616: PUSH
24617: LD_INT 86
24619: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24620: LD_ADDR_EXP 66
24624: PUSH
24625: LD_INT 87
24627: ST_TO_ADDR
// end ;
24628: LD_VAR 0 1
24632: RET
// every 1 do
24633: GO 24635
24635: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
24636: CALL 24497 0 0
24640: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
24641: LD_VAR 0 2
24645: PUSH
24646: LD_INT 100
24648: EQUAL
24649: IFFALSE 25598
// begin if not StreamModeActive then
24651: LD_EXP 67
24655: NOT
24656: IFFALSE 24666
// StreamModeActive := true ;
24658: LD_ADDR_EXP 67
24662: PUSH
24663: LD_INT 1
24665: ST_TO_ADDR
// if p3 = 0 then
24666: LD_VAR 0 3
24670: PUSH
24671: LD_INT 0
24673: EQUAL
24674: IFFALSE 24680
// InitStreamMode ;
24676: CALL 25756 0 0
// if p3 = 1 then
24680: LD_VAR 0 3
24684: PUSH
24685: LD_INT 1
24687: EQUAL
24688: IFFALSE 24698
// sRocket := true ;
24690: LD_ADDR_EXP 72
24694: PUSH
24695: LD_INT 1
24697: ST_TO_ADDR
// if p3 = 2 then
24698: LD_VAR 0 3
24702: PUSH
24703: LD_INT 2
24705: EQUAL
24706: IFFALSE 24716
// sSpeed := true ;
24708: LD_ADDR_EXP 71
24712: PUSH
24713: LD_INT 1
24715: ST_TO_ADDR
// if p3 = 3 then
24716: LD_VAR 0 3
24720: PUSH
24721: LD_INT 3
24723: EQUAL
24724: IFFALSE 24734
// sEngine := true ;
24726: LD_ADDR_EXP 73
24730: PUSH
24731: LD_INT 1
24733: ST_TO_ADDR
// if p3 = 4 then
24734: LD_VAR 0 3
24738: PUSH
24739: LD_INT 4
24741: EQUAL
24742: IFFALSE 24752
// sSpec := true ;
24744: LD_ADDR_EXP 70
24748: PUSH
24749: LD_INT 1
24751: ST_TO_ADDR
// if p3 = 5 then
24752: LD_VAR 0 3
24756: PUSH
24757: LD_INT 5
24759: EQUAL
24760: IFFALSE 24770
// sLevel := true ;
24762: LD_ADDR_EXP 74
24766: PUSH
24767: LD_INT 1
24769: ST_TO_ADDR
// if p3 = 6 then
24770: LD_VAR 0 3
24774: PUSH
24775: LD_INT 6
24777: EQUAL
24778: IFFALSE 24788
// sArmoury := true ;
24780: LD_ADDR_EXP 75
24784: PUSH
24785: LD_INT 1
24787: ST_TO_ADDR
// if p3 = 7 then
24788: LD_VAR 0 3
24792: PUSH
24793: LD_INT 7
24795: EQUAL
24796: IFFALSE 24806
// sRadar := true ;
24798: LD_ADDR_EXP 76
24802: PUSH
24803: LD_INT 1
24805: ST_TO_ADDR
// if p3 = 8 then
24806: LD_VAR 0 3
24810: PUSH
24811: LD_INT 8
24813: EQUAL
24814: IFFALSE 24824
// sBunker := true ;
24816: LD_ADDR_EXP 77
24820: PUSH
24821: LD_INT 1
24823: ST_TO_ADDR
// if p3 = 9 then
24824: LD_VAR 0 3
24828: PUSH
24829: LD_INT 9
24831: EQUAL
24832: IFFALSE 24842
// sHack := true ;
24834: LD_ADDR_EXP 78
24838: PUSH
24839: LD_INT 1
24841: ST_TO_ADDR
// if p3 = 10 then
24842: LD_VAR 0 3
24846: PUSH
24847: LD_INT 10
24849: EQUAL
24850: IFFALSE 24860
// sFire := true ;
24852: LD_ADDR_EXP 79
24856: PUSH
24857: LD_INT 1
24859: ST_TO_ADDR
// if p3 = 11 then
24860: LD_VAR 0 3
24864: PUSH
24865: LD_INT 11
24867: EQUAL
24868: IFFALSE 24878
// sRefresh := true ;
24870: LD_ADDR_EXP 80
24874: PUSH
24875: LD_INT 1
24877: ST_TO_ADDR
// if p3 = 12 then
24878: LD_VAR 0 3
24882: PUSH
24883: LD_INT 12
24885: EQUAL
24886: IFFALSE 24896
// sExp := true ;
24888: LD_ADDR_EXP 81
24892: PUSH
24893: LD_INT 1
24895: ST_TO_ADDR
// if p3 = 13 then
24896: LD_VAR 0 3
24900: PUSH
24901: LD_INT 13
24903: EQUAL
24904: IFFALSE 24914
// sDepot := true ;
24906: LD_ADDR_EXP 82
24910: PUSH
24911: LD_INT 1
24913: ST_TO_ADDR
// if p3 = 14 then
24914: LD_VAR 0 3
24918: PUSH
24919: LD_INT 14
24921: EQUAL
24922: IFFALSE 24932
// sFlag := true ;
24924: LD_ADDR_EXP 83
24928: PUSH
24929: LD_INT 1
24931: ST_TO_ADDR
// if p3 = 15 then
24932: LD_VAR 0 3
24936: PUSH
24937: LD_INT 15
24939: EQUAL
24940: IFFALSE 24950
// sKamikadze := true ;
24942: LD_ADDR_EXP 91
24946: PUSH
24947: LD_INT 1
24949: ST_TO_ADDR
// if p3 = 16 then
24950: LD_VAR 0 3
24954: PUSH
24955: LD_INT 16
24957: EQUAL
24958: IFFALSE 24968
// sTroll := true ;
24960: LD_ADDR_EXP 92
24964: PUSH
24965: LD_INT 1
24967: ST_TO_ADDR
// if p3 = 17 then
24968: LD_VAR 0 3
24972: PUSH
24973: LD_INT 17
24975: EQUAL
24976: IFFALSE 24986
// sSlow := true ;
24978: LD_ADDR_EXP 93
24982: PUSH
24983: LD_INT 1
24985: ST_TO_ADDR
// if p3 = 18 then
24986: LD_VAR 0 3
24990: PUSH
24991: LD_INT 18
24993: EQUAL
24994: IFFALSE 25004
// sLack := true ;
24996: LD_ADDR_EXP 94
25000: PUSH
25001: LD_INT 1
25003: ST_TO_ADDR
// if p3 = 19 then
25004: LD_VAR 0 3
25008: PUSH
25009: LD_INT 19
25011: EQUAL
25012: IFFALSE 25022
// sTank := true ;
25014: LD_ADDR_EXP 96
25018: PUSH
25019: LD_INT 1
25021: ST_TO_ADDR
// if p3 = 20 then
25022: LD_VAR 0 3
25026: PUSH
25027: LD_INT 20
25029: EQUAL
25030: IFFALSE 25040
// sRemote := true ;
25032: LD_ADDR_EXP 97
25036: PUSH
25037: LD_INT 1
25039: ST_TO_ADDR
// if p3 = 21 then
25040: LD_VAR 0 3
25044: PUSH
25045: LD_INT 21
25047: EQUAL
25048: IFFALSE 25058
// sPowell := true ;
25050: LD_ADDR_EXP 98
25054: PUSH
25055: LD_INT 1
25057: ST_TO_ADDR
// if p3 = 22 then
25058: LD_VAR 0 3
25062: PUSH
25063: LD_INT 22
25065: EQUAL
25066: IFFALSE 25076
// sTeleport := true ;
25068: LD_ADDR_EXP 101
25072: PUSH
25073: LD_INT 1
25075: ST_TO_ADDR
// if p3 = 23 then
25076: LD_VAR 0 3
25080: PUSH
25081: LD_INT 23
25083: EQUAL
25084: IFFALSE 25094
// sOilTower := true ;
25086: LD_ADDR_EXP 103
25090: PUSH
25091: LD_INT 1
25093: ST_TO_ADDR
// if p3 = 24 then
25094: LD_VAR 0 3
25098: PUSH
25099: LD_INT 24
25101: EQUAL
25102: IFFALSE 25112
// sShovel := true ;
25104: LD_ADDR_EXP 104
25108: PUSH
25109: LD_INT 1
25111: ST_TO_ADDR
// if p3 = 25 then
25112: LD_VAR 0 3
25116: PUSH
25117: LD_INT 25
25119: EQUAL
25120: IFFALSE 25130
// sSheik := true ;
25122: LD_ADDR_EXP 105
25126: PUSH
25127: LD_INT 1
25129: ST_TO_ADDR
// if p3 = 26 then
25130: LD_VAR 0 3
25134: PUSH
25135: LD_INT 26
25137: EQUAL
25138: IFFALSE 25148
// sEarthquake := true ;
25140: LD_ADDR_EXP 107
25144: PUSH
25145: LD_INT 1
25147: ST_TO_ADDR
// if p3 = 27 then
25148: LD_VAR 0 3
25152: PUSH
25153: LD_INT 27
25155: EQUAL
25156: IFFALSE 25166
// sAI := true ;
25158: LD_ADDR_EXP 108
25162: PUSH
25163: LD_INT 1
25165: ST_TO_ADDR
// if p3 = 28 then
25166: LD_VAR 0 3
25170: PUSH
25171: LD_INT 28
25173: EQUAL
25174: IFFALSE 25184
// sCargo := true ;
25176: LD_ADDR_EXP 111
25180: PUSH
25181: LD_INT 1
25183: ST_TO_ADDR
// if p3 = 29 then
25184: LD_VAR 0 3
25188: PUSH
25189: LD_INT 29
25191: EQUAL
25192: IFFALSE 25202
// sDLaser := true ;
25194: LD_ADDR_EXP 112
25198: PUSH
25199: LD_INT 1
25201: ST_TO_ADDR
// if p3 = 30 then
25202: LD_VAR 0 3
25206: PUSH
25207: LD_INT 30
25209: EQUAL
25210: IFFALSE 25220
// sExchange := true ;
25212: LD_ADDR_EXP 113
25216: PUSH
25217: LD_INT 1
25219: ST_TO_ADDR
// if p3 = 31 then
25220: LD_VAR 0 3
25224: PUSH
25225: LD_INT 31
25227: EQUAL
25228: IFFALSE 25238
// sFac := true ;
25230: LD_ADDR_EXP 114
25234: PUSH
25235: LD_INT 1
25237: ST_TO_ADDR
// if p3 = 32 then
25238: LD_VAR 0 3
25242: PUSH
25243: LD_INT 32
25245: EQUAL
25246: IFFALSE 25256
// sPower := true ;
25248: LD_ADDR_EXP 115
25252: PUSH
25253: LD_INT 1
25255: ST_TO_ADDR
// if p3 = 33 then
25256: LD_VAR 0 3
25260: PUSH
25261: LD_INT 33
25263: EQUAL
25264: IFFALSE 25274
// sRandom := true ;
25266: LD_ADDR_EXP 116
25270: PUSH
25271: LD_INT 1
25273: ST_TO_ADDR
// if p3 = 34 then
25274: LD_VAR 0 3
25278: PUSH
25279: LD_INT 34
25281: EQUAL
25282: IFFALSE 25292
// sShield := true ;
25284: LD_ADDR_EXP 117
25288: PUSH
25289: LD_INT 1
25291: ST_TO_ADDR
// if p3 = 35 then
25292: LD_VAR 0 3
25296: PUSH
25297: LD_INT 35
25299: EQUAL
25300: IFFALSE 25310
// sTime := true ;
25302: LD_ADDR_EXP 118
25306: PUSH
25307: LD_INT 1
25309: ST_TO_ADDR
// if p3 = 36 then
25310: LD_VAR 0 3
25314: PUSH
25315: LD_INT 36
25317: EQUAL
25318: IFFALSE 25328
// sTools := true ;
25320: LD_ADDR_EXP 119
25324: PUSH
25325: LD_INT 1
25327: ST_TO_ADDR
// if p3 = 101 then
25328: LD_VAR 0 3
25332: PUSH
25333: LD_INT 101
25335: EQUAL
25336: IFFALSE 25346
// sSold := true ;
25338: LD_ADDR_EXP 84
25342: PUSH
25343: LD_INT 1
25345: ST_TO_ADDR
// if p3 = 102 then
25346: LD_VAR 0 3
25350: PUSH
25351: LD_INT 102
25353: EQUAL
25354: IFFALSE 25364
// sDiff := true ;
25356: LD_ADDR_EXP 85
25360: PUSH
25361: LD_INT 1
25363: ST_TO_ADDR
// if p3 = 103 then
25364: LD_VAR 0 3
25368: PUSH
25369: LD_INT 103
25371: EQUAL
25372: IFFALSE 25382
// sFog := true ;
25374: LD_ADDR_EXP 88
25378: PUSH
25379: LD_INT 1
25381: ST_TO_ADDR
// if p3 = 104 then
25382: LD_VAR 0 3
25386: PUSH
25387: LD_INT 104
25389: EQUAL
25390: IFFALSE 25400
// sReset := true ;
25392: LD_ADDR_EXP 89
25396: PUSH
25397: LD_INT 1
25399: ST_TO_ADDR
// if p3 = 105 then
25400: LD_VAR 0 3
25404: PUSH
25405: LD_INT 105
25407: EQUAL
25408: IFFALSE 25418
// sSun := true ;
25410: LD_ADDR_EXP 90
25414: PUSH
25415: LD_INT 1
25417: ST_TO_ADDR
// if p3 = 106 then
25418: LD_VAR 0 3
25422: PUSH
25423: LD_INT 106
25425: EQUAL
25426: IFFALSE 25436
// sTiger := true ;
25428: LD_ADDR_EXP 86
25432: PUSH
25433: LD_INT 1
25435: ST_TO_ADDR
// if p3 = 107 then
25436: LD_VAR 0 3
25440: PUSH
25441: LD_INT 107
25443: EQUAL
25444: IFFALSE 25454
// sBomb := true ;
25446: LD_ADDR_EXP 87
25450: PUSH
25451: LD_INT 1
25453: ST_TO_ADDR
// if p3 = 108 then
25454: LD_VAR 0 3
25458: PUSH
25459: LD_INT 108
25461: EQUAL
25462: IFFALSE 25472
// sWound := true ;
25464: LD_ADDR_EXP 95
25468: PUSH
25469: LD_INT 1
25471: ST_TO_ADDR
// if p3 = 109 then
25472: LD_VAR 0 3
25476: PUSH
25477: LD_INT 109
25479: EQUAL
25480: IFFALSE 25490
// sBetray := true ;
25482: LD_ADDR_EXP 99
25486: PUSH
25487: LD_INT 1
25489: ST_TO_ADDR
// if p3 = 110 then
25490: LD_VAR 0 3
25494: PUSH
25495: LD_INT 110
25497: EQUAL
25498: IFFALSE 25508
// sContamin := true ;
25500: LD_ADDR_EXP 100
25504: PUSH
25505: LD_INT 1
25507: ST_TO_ADDR
// if p3 = 111 then
25508: LD_VAR 0 3
25512: PUSH
25513: LD_INT 111
25515: EQUAL
25516: IFFALSE 25526
// sOil := true ;
25518: LD_ADDR_EXP 102
25522: PUSH
25523: LD_INT 1
25525: ST_TO_ADDR
// if p3 = 112 then
25526: LD_VAR 0 3
25530: PUSH
25531: LD_INT 112
25533: EQUAL
25534: IFFALSE 25544
// sStu := true ;
25536: LD_ADDR_EXP 106
25540: PUSH
25541: LD_INT 1
25543: ST_TO_ADDR
// if p3 = 113 then
25544: LD_VAR 0 3
25548: PUSH
25549: LD_INT 113
25551: EQUAL
25552: IFFALSE 25562
// sBazooka := true ;
25554: LD_ADDR_EXP 109
25558: PUSH
25559: LD_INT 1
25561: ST_TO_ADDR
// if p3 = 114 then
25562: LD_VAR 0 3
25566: PUSH
25567: LD_INT 114
25569: EQUAL
25570: IFFALSE 25580
// sMortar := true ;
25572: LD_ADDR_EXP 110
25576: PUSH
25577: LD_INT 1
25579: ST_TO_ADDR
// if p3 = 115 then
25580: LD_VAR 0 3
25584: PUSH
25585: LD_INT 115
25587: EQUAL
25588: IFFALSE 25598
// sRanger := true ;
25590: LD_ADDR_EXP 120
25594: PUSH
25595: LD_INT 1
25597: ST_TO_ADDR
// end ; if p2 = 101 then
25598: LD_VAR 0 2
25602: PUSH
25603: LD_INT 101
25605: EQUAL
25606: IFFALSE 25734
// begin case p3 of 1 :
25608: LD_VAR 0 3
25612: PUSH
25613: LD_INT 1
25615: DOUBLE
25616: EQUAL
25617: IFTRUE 25621
25619: GO 25628
25621: POP
// hHackUnlimitedResources ; 2 :
25622: CALL 36769 0 0
25626: GO 25734
25628: LD_INT 2
25630: DOUBLE
25631: EQUAL
25632: IFTRUE 25636
25634: GO 25643
25636: POP
// hHackSetLevel10 ; 3 :
25637: CALL 36902 0 0
25641: GO 25734
25643: LD_INT 3
25645: DOUBLE
25646: EQUAL
25647: IFTRUE 25651
25649: GO 25658
25651: POP
// hHackSetLevel10YourUnits ; 4 :
25652: CALL 36987 0 0
25656: GO 25734
25658: LD_INT 4
25660: DOUBLE
25661: EQUAL
25662: IFTRUE 25666
25664: GO 25673
25666: POP
// hHackInvincible ; 5 :
25667: CALL 37435 0 0
25671: GO 25734
25673: LD_INT 5
25675: DOUBLE
25676: EQUAL
25677: IFTRUE 25681
25679: GO 25688
25681: POP
// hHackInvisible ; 6 :
25682: CALL 37546 0 0
25686: GO 25734
25688: LD_INT 6
25690: DOUBLE
25691: EQUAL
25692: IFTRUE 25696
25694: GO 25703
25696: POP
// hHackChangeYourSide ; 7 :
25697: CALL 37603 0 0
25701: GO 25734
25703: LD_INT 7
25705: DOUBLE
25706: EQUAL
25707: IFTRUE 25711
25709: GO 25718
25711: POP
// hHackChangeUnitSide ; 8 :
25712: CALL 37645 0 0
25716: GO 25734
25718: LD_INT 8
25720: DOUBLE
25721: EQUAL
25722: IFTRUE 25726
25724: GO 25733
25726: POP
// hHackFog ; end ;
25727: CALL 37746 0 0
25731: GO 25734
25733: POP
// end ; end ;
25734: PPOPN 6
25736: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
25737: GO 25739
25739: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
25740: LD_STRING initStreamRollete();
25742: PPUSH
25743: CALL_OW 559
// InitStreamMode ;
25747: CALL 25756 0 0
// DefineStreamItems ( ) ;
25751: CALL 26196 0 0
// end ;
25755: END
// function InitStreamMode ; begin
25756: LD_INT 0
25758: PPUSH
// streamModeActive := false ;
25759: LD_ADDR_EXP 67
25763: PUSH
25764: LD_INT 0
25766: ST_TO_ADDR
// normalCounter := 36 ;
25767: LD_ADDR_EXP 68
25771: PUSH
25772: LD_INT 36
25774: ST_TO_ADDR
// hardcoreCounter := 16 ;
25775: LD_ADDR_EXP 69
25779: PUSH
25780: LD_INT 16
25782: ST_TO_ADDR
// sRocket := false ;
25783: LD_ADDR_EXP 72
25787: PUSH
25788: LD_INT 0
25790: ST_TO_ADDR
// sSpeed := false ;
25791: LD_ADDR_EXP 71
25795: PUSH
25796: LD_INT 0
25798: ST_TO_ADDR
// sEngine := false ;
25799: LD_ADDR_EXP 73
25803: PUSH
25804: LD_INT 0
25806: ST_TO_ADDR
// sSpec := false ;
25807: LD_ADDR_EXP 70
25811: PUSH
25812: LD_INT 0
25814: ST_TO_ADDR
// sLevel := false ;
25815: LD_ADDR_EXP 74
25819: PUSH
25820: LD_INT 0
25822: ST_TO_ADDR
// sArmoury := false ;
25823: LD_ADDR_EXP 75
25827: PUSH
25828: LD_INT 0
25830: ST_TO_ADDR
// sRadar := false ;
25831: LD_ADDR_EXP 76
25835: PUSH
25836: LD_INT 0
25838: ST_TO_ADDR
// sBunker := false ;
25839: LD_ADDR_EXP 77
25843: PUSH
25844: LD_INT 0
25846: ST_TO_ADDR
// sHack := false ;
25847: LD_ADDR_EXP 78
25851: PUSH
25852: LD_INT 0
25854: ST_TO_ADDR
// sFire := false ;
25855: LD_ADDR_EXP 79
25859: PUSH
25860: LD_INT 0
25862: ST_TO_ADDR
// sRefresh := false ;
25863: LD_ADDR_EXP 80
25867: PUSH
25868: LD_INT 0
25870: ST_TO_ADDR
// sExp := false ;
25871: LD_ADDR_EXP 81
25875: PUSH
25876: LD_INT 0
25878: ST_TO_ADDR
// sDepot := false ;
25879: LD_ADDR_EXP 82
25883: PUSH
25884: LD_INT 0
25886: ST_TO_ADDR
// sFlag := false ;
25887: LD_ADDR_EXP 83
25891: PUSH
25892: LD_INT 0
25894: ST_TO_ADDR
// sKamikadze := false ;
25895: LD_ADDR_EXP 91
25899: PUSH
25900: LD_INT 0
25902: ST_TO_ADDR
// sTroll := false ;
25903: LD_ADDR_EXP 92
25907: PUSH
25908: LD_INT 0
25910: ST_TO_ADDR
// sSlow := false ;
25911: LD_ADDR_EXP 93
25915: PUSH
25916: LD_INT 0
25918: ST_TO_ADDR
// sLack := false ;
25919: LD_ADDR_EXP 94
25923: PUSH
25924: LD_INT 0
25926: ST_TO_ADDR
// sTank := false ;
25927: LD_ADDR_EXP 96
25931: PUSH
25932: LD_INT 0
25934: ST_TO_ADDR
// sRemote := false ;
25935: LD_ADDR_EXP 97
25939: PUSH
25940: LD_INT 0
25942: ST_TO_ADDR
// sPowell := false ;
25943: LD_ADDR_EXP 98
25947: PUSH
25948: LD_INT 0
25950: ST_TO_ADDR
// sTeleport := false ;
25951: LD_ADDR_EXP 101
25955: PUSH
25956: LD_INT 0
25958: ST_TO_ADDR
// sOilTower := false ;
25959: LD_ADDR_EXP 103
25963: PUSH
25964: LD_INT 0
25966: ST_TO_ADDR
// sShovel := false ;
25967: LD_ADDR_EXP 104
25971: PUSH
25972: LD_INT 0
25974: ST_TO_ADDR
// sSheik := false ;
25975: LD_ADDR_EXP 105
25979: PUSH
25980: LD_INT 0
25982: ST_TO_ADDR
// sEarthquake := false ;
25983: LD_ADDR_EXP 107
25987: PUSH
25988: LD_INT 0
25990: ST_TO_ADDR
// sAI := false ;
25991: LD_ADDR_EXP 108
25995: PUSH
25996: LD_INT 0
25998: ST_TO_ADDR
// sCargo := false ;
25999: LD_ADDR_EXP 111
26003: PUSH
26004: LD_INT 0
26006: ST_TO_ADDR
// sDLaser := false ;
26007: LD_ADDR_EXP 112
26011: PUSH
26012: LD_INT 0
26014: ST_TO_ADDR
// sExchange := false ;
26015: LD_ADDR_EXP 113
26019: PUSH
26020: LD_INT 0
26022: ST_TO_ADDR
// sFac := false ;
26023: LD_ADDR_EXP 114
26027: PUSH
26028: LD_INT 0
26030: ST_TO_ADDR
// sPower := false ;
26031: LD_ADDR_EXP 115
26035: PUSH
26036: LD_INT 0
26038: ST_TO_ADDR
// sRandom := false ;
26039: LD_ADDR_EXP 116
26043: PUSH
26044: LD_INT 0
26046: ST_TO_ADDR
// sShield := false ;
26047: LD_ADDR_EXP 117
26051: PUSH
26052: LD_INT 0
26054: ST_TO_ADDR
// sTime := false ;
26055: LD_ADDR_EXP 118
26059: PUSH
26060: LD_INT 0
26062: ST_TO_ADDR
// sTools := false ;
26063: LD_ADDR_EXP 119
26067: PUSH
26068: LD_INT 0
26070: ST_TO_ADDR
// sSold := false ;
26071: LD_ADDR_EXP 84
26075: PUSH
26076: LD_INT 0
26078: ST_TO_ADDR
// sDiff := false ;
26079: LD_ADDR_EXP 85
26083: PUSH
26084: LD_INT 0
26086: ST_TO_ADDR
// sFog := false ;
26087: LD_ADDR_EXP 88
26091: PUSH
26092: LD_INT 0
26094: ST_TO_ADDR
// sReset := false ;
26095: LD_ADDR_EXP 89
26099: PUSH
26100: LD_INT 0
26102: ST_TO_ADDR
// sSun := false ;
26103: LD_ADDR_EXP 90
26107: PUSH
26108: LD_INT 0
26110: ST_TO_ADDR
// sTiger := false ;
26111: LD_ADDR_EXP 86
26115: PUSH
26116: LD_INT 0
26118: ST_TO_ADDR
// sBomb := false ;
26119: LD_ADDR_EXP 87
26123: PUSH
26124: LD_INT 0
26126: ST_TO_ADDR
// sWound := false ;
26127: LD_ADDR_EXP 95
26131: PUSH
26132: LD_INT 0
26134: ST_TO_ADDR
// sBetray := false ;
26135: LD_ADDR_EXP 99
26139: PUSH
26140: LD_INT 0
26142: ST_TO_ADDR
// sContamin := false ;
26143: LD_ADDR_EXP 100
26147: PUSH
26148: LD_INT 0
26150: ST_TO_ADDR
// sOil := false ;
26151: LD_ADDR_EXP 102
26155: PUSH
26156: LD_INT 0
26158: ST_TO_ADDR
// sStu := false ;
26159: LD_ADDR_EXP 106
26163: PUSH
26164: LD_INT 0
26166: ST_TO_ADDR
// sBazooka := false ;
26167: LD_ADDR_EXP 109
26171: PUSH
26172: LD_INT 0
26174: ST_TO_ADDR
// sMortar := false ;
26175: LD_ADDR_EXP 110
26179: PUSH
26180: LD_INT 0
26182: ST_TO_ADDR
// sRanger := false ;
26183: LD_ADDR_EXP 120
26187: PUSH
26188: LD_INT 0
26190: ST_TO_ADDR
// end ;
26191: LD_VAR 0 1
26195: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
26196: LD_INT 0
26198: PPUSH
26199: PPUSH
26200: PPUSH
26201: PPUSH
26202: PPUSH
// result := [ ] ;
26203: LD_ADDR_VAR 0 1
26207: PUSH
26208: EMPTY
26209: ST_TO_ADDR
// if campaign_id = 1 then
26210: LD_OWVAR 69
26214: PUSH
26215: LD_INT 1
26217: EQUAL
26218: IFFALSE 29156
// begin case mission_number of 1 :
26220: LD_OWVAR 70
26224: PUSH
26225: LD_INT 1
26227: DOUBLE
26228: EQUAL
26229: IFTRUE 26233
26231: GO 26297
26233: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
26234: LD_ADDR_VAR 0 1
26238: PUSH
26239: LD_INT 2
26241: PUSH
26242: LD_INT 4
26244: PUSH
26245: LD_INT 11
26247: PUSH
26248: LD_INT 12
26250: PUSH
26251: LD_INT 15
26253: PUSH
26254: LD_INT 16
26256: PUSH
26257: LD_INT 22
26259: PUSH
26260: LD_INT 23
26262: PUSH
26263: LD_INT 26
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 101
26279: PUSH
26280: LD_INT 102
26282: PUSH
26283: LD_INT 106
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: LIST
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: ST_TO_ADDR
26295: GO 29154
26297: LD_INT 2
26299: DOUBLE
26300: EQUAL
26301: IFTRUE 26305
26303: GO 26377
26305: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
26306: LD_ADDR_VAR 0 1
26310: PUSH
26311: LD_INT 2
26313: PUSH
26314: LD_INT 4
26316: PUSH
26317: LD_INT 11
26319: PUSH
26320: LD_INT 12
26322: PUSH
26323: LD_INT 15
26325: PUSH
26326: LD_INT 16
26328: PUSH
26329: LD_INT 22
26331: PUSH
26332: LD_INT 23
26334: PUSH
26335: LD_INT 26
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 101
26351: PUSH
26352: LD_INT 102
26354: PUSH
26355: LD_INT 105
26357: PUSH
26358: LD_INT 106
26360: PUSH
26361: LD_INT 108
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: ST_TO_ADDR
26375: GO 29154
26377: LD_INT 3
26379: DOUBLE
26380: EQUAL
26381: IFTRUE 26385
26383: GO 26461
26385: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
26386: LD_ADDR_VAR 0 1
26390: PUSH
26391: LD_INT 2
26393: PUSH
26394: LD_INT 4
26396: PUSH
26397: LD_INT 5
26399: PUSH
26400: LD_INT 11
26402: PUSH
26403: LD_INT 12
26405: PUSH
26406: LD_INT 15
26408: PUSH
26409: LD_INT 16
26411: PUSH
26412: LD_INT 22
26414: PUSH
26415: LD_INT 26
26417: PUSH
26418: LD_INT 36
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 101
26435: PUSH
26436: LD_INT 102
26438: PUSH
26439: LD_INT 105
26441: PUSH
26442: LD_INT 106
26444: PUSH
26445: LD_INT 108
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: ST_TO_ADDR
26459: GO 29154
26461: LD_INT 4
26463: DOUBLE
26464: EQUAL
26465: IFTRUE 26469
26467: GO 26553
26469: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
26470: LD_ADDR_VAR 0 1
26474: PUSH
26475: LD_INT 2
26477: PUSH
26478: LD_INT 4
26480: PUSH
26481: LD_INT 5
26483: PUSH
26484: LD_INT 8
26486: PUSH
26487: LD_INT 11
26489: PUSH
26490: LD_INT 12
26492: PUSH
26493: LD_INT 15
26495: PUSH
26496: LD_INT 16
26498: PUSH
26499: LD_INT 22
26501: PUSH
26502: LD_INT 23
26504: PUSH
26505: LD_INT 26
26507: PUSH
26508: LD_INT 36
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 101
26527: PUSH
26528: LD_INT 102
26530: PUSH
26531: LD_INT 105
26533: PUSH
26534: LD_INT 106
26536: PUSH
26537: LD_INT 108
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: ST_TO_ADDR
26551: GO 29154
26553: LD_INT 5
26555: DOUBLE
26556: EQUAL
26557: IFTRUE 26561
26559: GO 26661
26561: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
26562: LD_ADDR_VAR 0 1
26566: PUSH
26567: LD_INT 2
26569: PUSH
26570: LD_INT 4
26572: PUSH
26573: LD_INT 5
26575: PUSH
26576: LD_INT 6
26578: PUSH
26579: LD_INT 8
26581: PUSH
26582: LD_INT 11
26584: PUSH
26585: LD_INT 12
26587: PUSH
26588: LD_INT 15
26590: PUSH
26591: LD_INT 16
26593: PUSH
26594: LD_INT 22
26596: PUSH
26597: LD_INT 23
26599: PUSH
26600: LD_INT 25
26602: PUSH
26603: LD_INT 26
26605: PUSH
26606: LD_INT 36
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 101
26627: PUSH
26628: LD_INT 102
26630: PUSH
26631: LD_INT 105
26633: PUSH
26634: LD_INT 106
26636: PUSH
26637: LD_INT 108
26639: PUSH
26640: LD_INT 109
26642: PUSH
26643: LD_INT 112
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: ST_TO_ADDR
26659: GO 29154
26661: LD_INT 6
26663: DOUBLE
26664: EQUAL
26665: IFTRUE 26669
26667: GO 26789
26669: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
26670: LD_ADDR_VAR 0 1
26674: PUSH
26675: LD_INT 2
26677: PUSH
26678: LD_INT 4
26680: PUSH
26681: LD_INT 5
26683: PUSH
26684: LD_INT 6
26686: PUSH
26687: LD_INT 8
26689: PUSH
26690: LD_INT 11
26692: PUSH
26693: LD_INT 12
26695: PUSH
26696: LD_INT 15
26698: PUSH
26699: LD_INT 16
26701: PUSH
26702: LD_INT 20
26704: PUSH
26705: LD_INT 21
26707: PUSH
26708: LD_INT 22
26710: PUSH
26711: LD_INT 23
26713: PUSH
26714: LD_INT 25
26716: PUSH
26717: LD_INT 26
26719: PUSH
26720: LD_INT 30
26722: PUSH
26723: LD_INT 31
26725: PUSH
26726: LD_INT 32
26728: PUSH
26729: LD_INT 36
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 101
26755: PUSH
26756: LD_INT 102
26758: PUSH
26759: LD_INT 105
26761: PUSH
26762: LD_INT 106
26764: PUSH
26765: LD_INT 108
26767: PUSH
26768: LD_INT 109
26770: PUSH
26771: LD_INT 112
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: ST_TO_ADDR
26787: GO 29154
26789: LD_INT 7
26791: DOUBLE
26792: EQUAL
26793: IFTRUE 26797
26795: GO 26897
26797: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
26798: LD_ADDR_VAR 0 1
26802: PUSH
26803: LD_INT 2
26805: PUSH
26806: LD_INT 4
26808: PUSH
26809: LD_INT 5
26811: PUSH
26812: LD_INT 7
26814: PUSH
26815: LD_INT 11
26817: PUSH
26818: LD_INT 12
26820: PUSH
26821: LD_INT 15
26823: PUSH
26824: LD_INT 16
26826: PUSH
26827: LD_INT 20
26829: PUSH
26830: LD_INT 21
26832: PUSH
26833: LD_INT 22
26835: PUSH
26836: LD_INT 23
26838: PUSH
26839: LD_INT 25
26841: PUSH
26842: LD_INT 26
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 101
26863: PUSH
26864: LD_INT 102
26866: PUSH
26867: LD_INT 103
26869: PUSH
26870: LD_INT 105
26872: PUSH
26873: LD_INT 106
26875: PUSH
26876: LD_INT 108
26878: PUSH
26879: LD_INT 112
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: ST_TO_ADDR
26895: GO 29154
26897: LD_INT 8
26899: DOUBLE
26900: EQUAL
26901: IFTRUE 26905
26903: GO 27033
26905: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
26906: LD_ADDR_VAR 0 1
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: LD_INT 4
26916: PUSH
26917: LD_INT 5
26919: PUSH
26920: LD_INT 6
26922: PUSH
26923: LD_INT 7
26925: PUSH
26926: LD_INT 8
26928: PUSH
26929: LD_INT 11
26931: PUSH
26932: LD_INT 12
26934: PUSH
26935: LD_INT 15
26937: PUSH
26938: LD_INT 16
26940: PUSH
26941: LD_INT 20
26943: PUSH
26944: LD_INT 21
26946: PUSH
26947: LD_INT 22
26949: PUSH
26950: LD_INT 23
26952: PUSH
26953: LD_INT 25
26955: PUSH
26956: LD_INT 26
26958: PUSH
26959: LD_INT 30
26961: PUSH
26962: LD_INT 31
26964: PUSH
26965: LD_INT 32
26967: PUSH
26968: LD_INT 36
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 101
26995: PUSH
26996: LD_INT 102
26998: PUSH
26999: LD_INT 103
27001: PUSH
27002: LD_INT 105
27004: PUSH
27005: LD_INT 106
27007: PUSH
27008: LD_INT 108
27010: PUSH
27011: LD_INT 109
27013: PUSH
27014: LD_INT 112
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: ST_TO_ADDR
27031: GO 29154
27033: LD_INT 9
27035: DOUBLE
27036: EQUAL
27037: IFTRUE 27041
27039: GO 27177
27041: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
27042: LD_ADDR_VAR 0 1
27046: PUSH
27047: LD_INT 2
27049: PUSH
27050: LD_INT 4
27052: PUSH
27053: LD_INT 5
27055: PUSH
27056: LD_INT 6
27058: PUSH
27059: LD_INT 7
27061: PUSH
27062: LD_INT 8
27064: PUSH
27065: LD_INT 11
27067: PUSH
27068: LD_INT 12
27070: PUSH
27071: LD_INT 15
27073: PUSH
27074: LD_INT 16
27076: PUSH
27077: LD_INT 20
27079: PUSH
27080: LD_INT 21
27082: PUSH
27083: LD_INT 22
27085: PUSH
27086: LD_INT 23
27088: PUSH
27089: LD_INT 25
27091: PUSH
27092: LD_INT 26
27094: PUSH
27095: LD_INT 28
27097: PUSH
27098: LD_INT 30
27100: PUSH
27101: LD_INT 31
27103: PUSH
27104: LD_INT 32
27106: PUSH
27107: LD_INT 36
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 101
27135: PUSH
27136: LD_INT 102
27138: PUSH
27139: LD_INT 103
27141: PUSH
27142: LD_INT 105
27144: PUSH
27145: LD_INT 106
27147: PUSH
27148: LD_INT 108
27150: PUSH
27151: LD_INT 109
27153: PUSH
27154: LD_INT 112
27156: PUSH
27157: LD_INT 114
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: ST_TO_ADDR
27175: GO 29154
27177: LD_INT 10
27179: DOUBLE
27180: EQUAL
27181: IFTRUE 27185
27183: GO 27369
27185: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
27186: LD_ADDR_VAR 0 1
27190: PUSH
27191: LD_INT 2
27193: PUSH
27194: LD_INT 4
27196: PUSH
27197: LD_INT 5
27199: PUSH
27200: LD_INT 6
27202: PUSH
27203: LD_INT 7
27205: PUSH
27206: LD_INT 8
27208: PUSH
27209: LD_INT 9
27211: PUSH
27212: LD_INT 10
27214: PUSH
27215: LD_INT 11
27217: PUSH
27218: LD_INT 12
27220: PUSH
27221: LD_INT 13
27223: PUSH
27224: LD_INT 14
27226: PUSH
27227: LD_INT 15
27229: PUSH
27230: LD_INT 16
27232: PUSH
27233: LD_INT 17
27235: PUSH
27236: LD_INT 18
27238: PUSH
27239: LD_INT 19
27241: PUSH
27242: LD_INT 20
27244: PUSH
27245: LD_INT 21
27247: PUSH
27248: LD_INT 22
27250: PUSH
27251: LD_INT 23
27253: PUSH
27254: LD_INT 24
27256: PUSH
27257: LD_INT 25
27259: PUSH
27260: LD_INT 26
27262: PUSH
27263: LD_INT 28
27265: PUSH
27266: LD_INT 30
27268: PUSH
27269: LD_INT 31
27271: PUSH
27272: LD_INT 32
27274: PUSH
27275: LD_INT 36
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 101
27311: PUSH
27312: LD_INT 102
27314: PUSH
27315: LD_INT 103
27317: PUSH
27318: LD_INT 104
27320: PUSH
27321: LD_INT 105
27323: PUSH
27324: LD_INT 106
27326: PUSH
27327: LD_INT 107
27329: PUSH
27330: LD_INT 108
27332: PUSH
27333: LD_INT 109
27335: PUSH
27336: LD_INT 110
27338: PUSH
27339: LD_INT 111
27341: PUSH
27342: LD_INT 112
27344: PUSH
27345: LD_INT 114
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: ST_TO_ADDR
27367: GO 29154
27369: LD_INT 11
27371: DOUBLE
27372: EQUAL
27373: IFTRUE 27377
27375: GO 27569
27377: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
27378: LD_ADDR_VAR 0 1
27382: PUSH
27383: LD_INT 2
27385: PUSH
27386: LD_INT 3
27388: PUSH
27389: LD_INT 4
27391: PUSH
27392: LD_INT 5
27394: PUSH
27395: LD_INT 6
27397: PUSH
27398: LD_INT 7
27400: PUSH
27401: LD_INT 8
27403: PUSH
27404: LD_INT 9
27406: PUSH
27407: LD_INT 10
27409: PUSH
27410: LD_INT 11
27412: PUSH
27413: LD_INT 12
27415: PUSH
27416: LD_INT 13
27418: PUSH
27419: LD_INT 14
27421: PUSH
27422: LD_INT 15
27424: PUSH
27425: LD_INT 16
27427: PUSH
27428: LD_INT 17
27430: PUSH
27431: LD_INT 18
27433: PUSH
27434: LD_INT 19
27436: PUSH
27437: LD_INT 20
27439: PUSH
27440: LD_INT 21
27442: PUSH
27443: LD_INT 22
27445: PUSH
27446: LD_INT 23
27448: PUSH
27449: LD_INT 24
27451: PUSH
27452: LD_INT 25
27454: PUSH
27455: LD_INT 26
27457: PUSH
27458: LD_INT 28
27460: PUSH
27461: LD_INT 30
27463: PUSH
27464: LD_INT 31
27466: PUSH
27467: LD_INT 32
27469: PUSH
27470: LD_INT 34
27472: PUSH
27473: LD_INT 36
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 101
27511: PUSH
27512: LD_INT 102
27514: PUSH
27515: LD_INT 103
27517: PUSH
27518: LD_INT 104
27520: PUSH
27521: LD_INT 105
27523: PUSH
27524: LD_INT 106
27526: PUSH
27527: LD_INT 107
27529: PUSH
27530: LD_INT 108
27532: PUSH
27533: LD_INT 109
27535: PUSH
27536: LD_INT 110
27538: PUSH
27539: LD_INT 111
27541: PUSH
27542: LD_INT 112
27544: PUSH
27545: LD_INT 114
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: ST_TO_ADDR
27567: GO 29154
27569: LD_INT 12
27571: DOUBLE
27572: EQUAL
27573: IFTRUE 27577
27575: GO 27785
27577: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
27578: LD_ADDR_VAR 0 1
27582: PUSH
27583: LD_INT 1
27585: PUSH
27586: LD_INT 2
27588: PUSH
27589: LD_INT 3
27591: PUSH
27592: LD_INT 4
27594: PUSH
27595: LD_INT 5
27597: PUSH
27598: LD_INT 6
27600: PUSH
27601: LD_INT 7
27603: PUSH
27604: LD_INT 8
27606: PUSH
27607: LD_INT 9
27609: PUSH
27610: LD_INT 10
27612: PUSH
27613: LD_INT 11
27615: PUSH
27616: LD_INT 12
27618: PUSH
27619: LD_INT 13
27621: PUSH
27622: LD_INT 14
27624: PUSH
27625: LD_INT 15
27627: PUSH
27628: LD_INT 16
27630: PUSH
27631: LD_INT 17
27633: PUSH
27634: LD_INT 18
27636: PUSH
27637: LD_INT 19
27639: PUSH
27640: LD_INT 20
27642: PUSH
27643: LD_INT 21
27645: PUSH
27646: LD_INT 22
27648: PUSH
27649: LD_INT 23
27651: PUSH
27652: LD_INT 24
27654: PUSH
27655: LD_INT 25
27657: PUSH
27658: LD_INT 26
27660: PUSH
27661: LD_INT 27
27663: PUSH
27664: LD_INT 28
27666: PUSH
27667: LD_INT 30
27669: PUSH
27670: LD_INT 31
27672: PUSH
27673: LD_INT 32
27675: PUSH
27676: LD_INT 33
27678: PUSH
27679: LD_INT 34
27681: PUSH
27682: LD_INT 36
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 101
27723: PUSH
27724: LD_INT 102
27726: PUSH
27727: LD_INT 103
27729: PUSH
27730: LD_INT 104
27732: PUSH
27733: LD_INT 105
27735: PUSH
27736: LD_INT 106
27738: PUSH
27739: LD_INT 107
27741: PUSH
27742: LD_INT 108
27744: PUSH
27745: LD_INT 109
27747: PUSH
27748: LD_INT 110
27750: PUSH
27751: LD_INT 111
27753: PUSH
27754: LD_INT 112
27756: PUSH
27757: LD_INT 113
27759: PUSH
27760: LD_INT 114
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: ST_TO_ADDR
27783: GO 29154
27785: LD_INT 13
27787: DOUBLE
27788: EQUAL
27789: IFTRUE 27793
27791: GO 27989
27793: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
27794: LD_ADDR_VAR 0 1
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: LD_INT 2
27804: PUSH
27805: LD_INT 3
27807: PUSH
27808: LD_INT 4
27810: PUSH
27811: LD_INT 5
27813: PUSH
27814: LD_INT 8
27816: PUSH
27817: LD_INT 9
27819: PUSH
27820: LD_INT 10
27822: PUSH
27823: LD_INT 11
27825: PUSH
27826: LD_INT 12
27828: PUSH
27829: LD_INT 14
27831: PUSH
27832: LD_INT 15
27834: PUSH
27835: LD_INT 16
27837: PUSH
27838: LD_INT 17
27840: PUSH
27841: LD_INT 18
27843: PUSH
27844: LD_INT 19
27846: PUSH
27847: LD_INT 20
27849: PUSH
27850: LD_INT 21
27852: PUSH
27853: LD_INT 22
27855: PUSH
27856: LD_INT 23
27858: PUSH
27859: LD_INT 24
27861: PUSH
27862: LD_INT 25
27864: PUSH
27865: LD_INT 26
27867: PUSH
27868: LD_INT 27
27870: PUSH
27871: LD_INT 28
27873: PUSH
27874: LD_INT 30
27876: PUSH
27877: LD_INT 31
27879: PUSH
27880: LD_INT 32
27882: PUSH
27883: LD_INT 33
27885: PUSH
27886: LD_INT 34
27888: PUSH
27889: LD_INT 36
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 101
27927: PUSH
27928: LD_INT 102
27930: PUSH
27931: LD_INT 103
27933: PUSH
27934: LD_INT 104
27936: PUSH
27937: LD_INT 105
27939: PUSH
27940: LD_INT 106
27942: PUSH
27943: LD_INT 107
27945: PUSH
27946: LD_INT 108
27948: PUSH
27949: LD_INT 109
27951: PUSH
27952: LD_INT 110
27954: PUSH
27955: LD_INT 111
27957: PUSH
27958: LD_INT 112
27960: PUSH
27961: LD_INT 113
27963: PUSH
27964: LD_INT 114
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: ST_TO_ADDR
27987: GO 29154
27989: LD_INT 14
27991: DOUBLE
27992: EQUAL
27993: IFTRUE 27997
27995: GO 28209
27997: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
27998: LD_ADDR_VAR 0 1
28002: PUSH
28003: LD_INT 1
28005: PUSH
28006: LD_INT 2
28008: PUSH
28009: LD_INT 3
28011: PUSH
28012: LD_INT 4
28014: PUSH
28015: LD_INT 5
28017: PUSH
28018: LD_INT 6
28020: PUSH
28021: LD_INT 7
28023: PUSH
28024: LD_INT 8
28026: PUSH
28027: LD_INT 9
28029: PUSH
28030: LD_INT 10
28032: PUSH
28033: LD_INT 11
28035: PUSH
28036: LD_INT 12
28038: PUSH
28039: LD_INT 13
28041: PUSH
28042: LD_INT 14
28044: PUSH
28045: LD_INT 15
28047: PUSH
28048: LD_INT 16
28050: PUSH
28051: LD_INT 17
28053: PUSH
28054: LD_INT 18
28056: PUSH
28057: LD_INT 19
28059: PUSH
28060: LD_INT 20
28062: PUSH
28063: LD_INT 21
28065: PUSH
28066: LD_INT 22
28068: PUSH
28069: LD_INT 23
28071: PUSH
28072: LD_INT 24
28074: PUSH
28075: LD_INT 25
28077: PUSH
28078: LD_INT 26
28080: PUSH
28081: LD_INT 27
28083: PUSH
28084: LD_INT 28
28086: PUSH
28087: LD_INT 29
28089: PUSH
28090: LD_INT 30
28092: PUSH
28093: LD_INT 31
28095: PUSH
28096: LD_INT 32
28098: PUSH
28099: LD_INT 33
28101: PUSH
28102: LD_INT 34
28104: PUSH
28105: LD_INT 36
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 101
28147: PUSH
28148: LD_INT 102
28150: PUSH
28151: LD_INT 103
28153: PUSH
28154: LD_INT 104
28156: PUSH
28157: LD_INT 105
28159: PUSH
28160: LD_INT 106
28162: PUSH
28163: LD_INT 107
28165: PUSH
28166: LD_INT 108
28168: PUSH
28169: LD_INT 109
28171: PUSH
28172: LD_INT 110
28174: PUSH
28175: LD_INT 111
28177: PUSH
28178: LD_INT 112
28180: PUSH
28181: LD_INT 113
28183: PUSH
28184: LD_INT 114
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: ST_TO_ADDR
28207: GO 29154
28209: LD_INT 15
28211: DOUBLE
28212: EQUAL
28213: IFTRUE 28217
28215: GO 28429
28217: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
28218: LD_ADDR_VAR 0 1
28222: PUSH
28223: LD_INT 1
28225: PUSH
28226: LD_INT 2
28228: PUSH
28229: LD_INT 3
28231: PUSH
28232: LD_INT 4
28234: PUSH
28235: LD_INT 5
28237: PUSH
28238: LD_INT 6
28240: PUSH
28241: LD_INT 7
28243: PUSH
28244: LD_INT 8
28246: PUSH
28247: LD_INT 9
28249: PUSH
28250: LD_INT 10
28252: PUSH
28253: LD_INT 11
28255: PUSH
28256: LD_INT 12
28258: PUSH
28259: LD_INT 13
28261: PUSH
28262: LD_INT 14
28264: PUSH
28265: LD_INT 15
28267: PUSH
28268: LD_INT 16
28270: PUSH
28271: LD_INT 17
28273: PUSH
28274: LD_INT 18
28276: PUSH
28277: LD_INT 19
28279: PUSH
28280: LD_INT 20
28282: PUSH
28283: LD_INT 21
28285: PUSH
28286: LD_INT 22
28288: PUSH
28289: LD_INT 23
28291: PUSH
28292: LD_INT 24
28294: PUSH
28295: LD_INT 25
28297: PUSH
28298: LD_INT 26
28300: PUSH
28301: LD_INT 27
28303: PUSH
28304: LD_INT 28
28306: PUSH
28307: LD_INT 29
28309: PUSH
28310: LD_INT 30
28312: PUSH
28313: LD_INT 31
28315: PUSH
28316: LD_INT 32
28318: PUSH
28319: LD_INT 33
28321: PUSH
28322: LD_INT 34
28324: PUSH
28325: LD_INT 36
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 101
28367: PUSH
28368: LD_INT 102
28370: PUSH
28371: LD_INT 103
28373: PUSH
28374: LD_INT 104
28376: PUSH
28377: LD_INT 105
28379: PUSH
28380: LD_INT 106
28382: PUSH
28383: LD_INT 107
28385: PUSH
28386: LD_INT 108
28388: PUSH
28389: LD_INT 109
28391: PUSH
28392: LD_INT 110
28394: PUSH
28395: LD_INT 111
28397: PUSH
28398: LD_INT 112
28400: PUSH
28401: LD_INT 113
28403: PUSH
28404: LD_INT 114
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: ST_TO_ADDR
28427: GO 29154
28429: LD_INT 16
28431: DOUBLE
28432: EQUAL
28433: IFTRUE 28437
28435: GO 28561
28437: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
28438: LD_ADDR_VAR 0 1
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: LD_INT 4
28448: PUSH
28449: LD_INT 5
28451: PUSH
28452: LD_INT 7
28454: PUSH
28455: LD_INT 11
28457: PUSH
28458: LD_INT 12
28460: PUSH
28461: LD_INT 15
28463: PUSH
28464: LD_INT 16
28466: PUSH
28467: LD_INT 20
28469: PUSH
28470: LD_INT 21
28472: PUSH
28473: LD_INT 22
28475: PUSH
28476: LD_INT 23
28478: PUSH
28479: LD_INT 25
28481: PUSH
28482: LD_INT 26
28484: PUSH
28485: LD_INT 30
28487: PUSH
28488: LD_INT 31
28490: PUSH
28491: LD_INT 32
28493: PUSH
28494: LD_INT 33
28496: PUSH
28497: LD_INT 34
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 101
28523: PUSH
28524: LD_INT 102
28526: PUSH
28527: LD_INT 103
28529: PUSH
28530: LD_INT 106
28532: PUSH
28533: LD_INT 108
28535: PUSH
28536: LD_INT 112
28538: PUSH
28539: LD_INT 113
28541: PUSH
28542: LD_INT 114
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: ST_TO_ADDR
28559: GO 29154
28561: LD_INT 17
28563: DOUBLE
28564: EQUAL
28565: IFTRUE 28569
28567: GO 28781
28569: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
28570: LD_ADDR_VAR 0 1
28574: PUSH
28575: LD_INT 1
28577: PUSH
28578: LD_INT 2
28580: PUSH
28581: LD_INT 3
28583: PUSH
28584: LD_INT 4
28586: PUSH
28587: LD_INT 5
28589: PUSH
28590: LD_INT 6
28592: PUSH
28593: LD_INT 7
28595: PUSH
28596: LD_INT 8
28598: PUSH
28599: LD_INT 9
28601: PUSH
28602: LD_INT 10
28604: PUSH
28605: LD_INT 11
28607: PUSH
28608: LD_INT 12
28610: PUSH
28611: LD_INT 13
28613: PUSH
28614: LD_INT 14
28616: PUSH
28617: LD_INT 15
28619: PUSH
28620: LD_INT 16
28622: PUSH
28623: LD_INT 17
28625: PUSH
28626: LD_INT 18
28628: PUSH
28629: LD_INT 19
28631: PUSH
28632: LD_INT 20
28634: PUSH
28635: LD_INT 21
28637: PUSH
28638: LD_INT 22
28640: PUSH
28641: LD_INT 23
28643: PUSH
28644: LD_INT 24
28646: PUSH
28647: LD_INT 25
28649: PUSH
28650: LD_INT 26
28652: PUSH
28653: LD_INT 27
28655: PUSH
28656: LD_INT 28
28658: PUSH
28659: LD_INT 29
28661: PUSH
28662: LD_INT 30
28664: PUSH
28665: LD_INT 31
28667: PUSH
28668: LD_INT 32
28670: PUSH
28671: LD_INT 33
28673: PUSH
28674: LD_INT 34
28676: PUSH
28677: LD_INT 36
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 101
28719: PUSH
28720: LD_INT 102
28722: PUSH
28723: LD_INT 103
28725: PUSH
28726: LD_INT 104
28728: PUSH
28729: LD_INT 105
28731: PUSH
28732: LD_INT 106
28734: PUSH
28735: LD_INT 107
28737: PUSH
28738: LD_INT 108
28740: PUSH
28741: LD_INT 109
28743: PUSH
28744: LD_INT 110
28746: PUSH
28747: LD_INT 111
28749: PUSH
28750: LD_INT 112
28752: PUSH
28753: LD_INT 113
28755: PUSH
28756: LD_INT 114
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: ST_TO_ADDR
28779: GO 29154
28781: LD_INT 18
28783: DOUBLE
28784: EQUAL
28785: IFTRUE 28789
28787: GO 28925
28789: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
28790: LD_ADDR_VAR 0 1
28794: PUSH
28795: LD_INT 2
28797: PUSH
28798: LD_INT 4
28800: PUSH
28801: LD_INT 5
28803: PUSH
28804: LD_INT 7
28806: PUSH
28807: LD_INT 11
28809: PUSH
28810: LD_INT 12
28812: PUSH
28813: LD_INT 15
28815: PUSH
28816: LD_INT 16
28818: PUSH
28819: LD_INT 20
28821: PUSH
28822: LD_INT 21
28824: PUSH
28825: LD_INT 22
28827: PUSH
28828: LD_INT 23
28830: PUSH
28831: LD_INT 25
28833: PUSH
28834: LD_INT 26
28836: PUSH
28837: LD_INT 30
28839: PUSH
28840: LD_INT 31
28842: PUSH
28843: LD_INT 32
28845: PUSH
28846: LD_INT 33
28848: PUSH
28849: LD_INT 34
28851: PUSH
28852: LD_INT 35
28854: PUSH
28855: LD_INT 36
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 101
28883: PUSH
28884: LD_INT 102
28886: PUSH
28887: LD_INT 103
28889: PUSH
28890: LD_INT 106
28892: PUSH
28893: LD_INT 108
28895: PUSH
28896: LD_INT 112
28898: PUSH
28899: LD_INT 113
28901: PUSH
28902: LD_INT 114
28904: PUSH
28905: LD_INT 115
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: ST_TO_ADDR
28923: GO 29154
28925: LD_INT 19
28927: DOUBLE
28928: EQUAL
28929: IFTRUE 28933
28931: GO 29153
28933: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
28934: LD_ADDR_VAR 0 1
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: LD_INT 2
28944: PUSH
28945: LD_INT 3
28947: PUSH
28948: LD_INT 4
28950: PUSH
28951: LD_INT 5
28953: PUSH
28954: LD_INT 6
28956: PUSH
28957: LD_INT 7
28959: PUSH
28960: LD_INT 8
28962: PUSH
28963: LD_INT 9
28965: PUSH
28966: LD_INT 10
28968: PUSH
28969: LD_INT 11
28971: PUSH
28972: LD_INT 12
28974: PUSH
28975: LD_INT 13
28977: PUSH
28978: LD_INT 14
28980: PUSH
28981: LD_INT 15
28983: PUSH
28984: LD_INT 16
28986: PUSH
28987: LD_INT 17
28989: PUSH
28990: LD_INT 18
28992: PUSH
28993: LD_INT 19
28995: PUSH
28996: LD_INT 20
28998: PUSH
28999: LD_INT 21
29001: PUSH
29002: LD_INT 22
29004: PUSH
29005: LD_INT 23
29007: PUSH
29008: LD_INT 24
29010: PUSH
29011: LD_INT 25
29013: PUSH
29014: LD_INT 26
29016: PUSH
29017: LD_INT 27
29019: PUSH
29020: LD_INT 28
29022: PUSH
29023: LD_INT 29
29025: PUSH
29026: LD_INT 30
29028: PUSH
29029: LD_INT 31
29031: PUSH
29032: LD_INT 32
29034: PUSH
29035: LD_INT 33
29037: PUSH
29038: LD_INT 34
29040: PUSH
29041: LD_INT 35
29043: PUSH
29044: LD_INT 36
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 101
29087: PUSH
29088: LD_INT 102
29090: PUSH
29091: LD_INT 103
29093: PUSH
29094: LD_INT 104
29096: PUSH
29097: LD_INT 105
29099: PUSH
29100: LD_INT 106
29102: PUSH
29103: LD_INT 107
29105: PUSH
29106: LD_INT 108
29108: PUSH
29109: LD_INT 109
29111: PUSH
29112: LD_INT 110
29114: PUSH
29115: LD_INT 111
29117: PUSH
29118: LD_INT 112
29120: PUSH
29121: LD_INT 113
29123: PUSH
29124: LD_INT 114
29126: PUSH
29127: LD_INT 115
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: ST_TO_ADDR
29151: GO 29154
29153: POP
// end else
29154: GO 29373
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
29156: LD_ADDR_VAR 0 1
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: LD_INT 2
29166: PUSH
29167: LD_INT 3
29169: PUSH
29170: LD_INT 4
29172: PUSH
29173: LD_INT 5
29175: PUSH
29176: LD_INT 6
29178: PUSH
29179: LD_INT 7
29181: PUSH
29182: LD_INT 8
29184: PUSH
29185: LD_INT 9
29187: PUSH
29188: LD_INT 10
29190: PUSH
29191: LD_INT 11
29193: PUSH
29194: LD_INT 12
29196: PUSH
29197: LD_INT 13
29199: PUSH
29200: LD_INT 14
29202: PUSH
29203: LD_INT 15
29205: PUSH
29206: LD_INT 16
29208: PUSH
29209: LD_INT 17
29211: PUSH
29212: LD_INT 18
29214: PUSH
29215: LD_INT 19
29217: PUSH
29218: LD_INT 20
29220: PUSH
29221: LD_INT 21
29223: PUSH
29224: LD_INT 22
29226: PUSH
29227: LD_INT 23
29229: PUSH
29230: LD_INT 24
29232: PUSH
29233: LD_INT 25
29235: PUSH
29236: LD_INT 26
29238: PUSH
29239: LD_INT 27
29241: PUSH
29242: LD_INT 28
29244: PUSH
29245: LD_INT 29
29247: PUSH
29248: LD_INT 30
29250: PUSH
29251: LD_INT 31
29253: PUSH
29254: LD_INT 32
29256: PUSH
29257: LD_INT 33
29259: PUSH
29260: LD_INT 34
29262: PUSH
29263: LD_INT 35
29265: PUSH
29266: LD_INT 36
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 101
29309: PUSH
29310: LD_INT 102
29312: PUSH
29313: LD_INT 103
29315: PUSH
29316: LD_INT 104
29318: PUSH
29319: LD_INT 105
29321: PUSH
29322: LD_INT 106
29324: PUSH
29325: LD_INT 107
29327: PUSH
29328: LD_INT 108
29330: PUSH
29331: LD_INT 109
29333: PUSH
29334: LD_INT 110
29336: PUSH
29337: LD_INT 111
29339: PUSH
29340: LD_INT 112
29342: PUSH
29343: LD_INT 113
29345: PUSH
29346: LD_INT 114
29348: PUSH
29349: LD_INT 115
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: ST_TO_ADDR
// if result then
29373: LD_VAR 0 1
29377: IFFALSE 29666
// begin normal :=  ;
29379: LD_ADDR_VAR 0 3
29383: PUSH
29384: LD_STRING 
29386: ST_TO_ADDR
// hardcore :=  ;
29387: LD_ADDR_VAR 0 4
29391: PUSH
29392: LD_STRING 
29394: ST_TO_ADDR
// for i = 1 to normalCounter do
29395: LD_ADDR_VAR 0 5
29399: PUSH
29400: DOUBLE
29401: LD_INT 1
29403: DEC
29404: ST_TO_ADDR
29405: LD_EXP 68
29409: PUSH
29410: FOR_TO
29411: IFFALSE 29512
// begin tmp := 0 ;
29413: LD_ADDR_VAR 0 2
29417: PUSH
29418: LD_STRING 0
29420: ST_TO_ADDR
// if result [ 1 ] then
29421: LD_VAR 0 1
29425: PUSH
29426: LD_INT 1
29428: ARRAY
29429: IFFALSE 29494
// if result [ 1 ] [ 1 ] = i then
29431: LD_VAR 0 1
29435: PUSH
29436: LD_INT 1
29438: ARRAY
29439: PUSH
29440: LD_INT 1
29442: ARRAY
29443: PUSH
29444: LD_VAR 0 5
29448: EQUAL
29449: IFFALSE 29494
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
29451: LD_ADDR_VAR 0 1
29455: PUSH
29456: LD_VAR 0 1
29460: PPUSH
29461: LD_INT 1
29463: PPUSH
29464: LD_VAR 0 1
29468: PUSH
29469: LD_INT 1
29471: ARRAY
29472: PPUSH
29473: LD_INT 1
29475: PPUSH
29476: CALL_OW 3
29480: PPUSH
29481: CALL_OW 1
29485: ST_TO_ADDR
// tmp := 1 ;
29486: LD_ADDR_VAR 0 2
29490: PUSH
29491: LD_STRING 1
29493: ST_TO_ADDR
// end ; normal := normal & tmp ;
29494: LD_ADDR_VAR 0 3
29498: PUSH
29499: LD_VAR 0 3
29503: PUSH
29504: LD_VAR 0 2
29508: STR
29509: ST_TO_ADDR
// end ;
29510: GO 29410
29512: POP
29513: POP
// for i = 1 to hardcoreCounter do
29514: LD_ADDR_VAR 0 5
29518: PUSH
29519: DOUBLE
29520: LD_INT 1
29522: DEC
29523: ST_TO_ADDR
29524: LD_EXP 69
29528: PUSH
29529: FOR_TO
29530: IFFALSE 29635
// begin tmp := 0 ;
29532: LD_ADDR_VAR 0 2
29536: PUSH
29537: LD_STRING 0
29539: ST_TO_ADDR
// if result [ 2 ] then
29540: LD_VAR 0 1
29544: PUSH
29545: LD_INT 2
29547: ARRAY
29548: IFFALSE 29617
// if result [ 2 ] [ 1 ] = 100 + i then
29550: LD_VAR 0 1
29554: PUSH
29555: LD_INT 2
29557: ARRAY
29558: PUSH
29559: LD_INT 1
29561: ARRAY
29562: PUSH
29563: LD_INT 100
29565: PUSH
29566: LD_VAR 0 5
29570: PLUS
29571: EQUAL
29572: IFFALSE 29617
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
29574: LD_ADDR_VAR 0 1
29578: PUSH
29579: LD_VAR 0 1
29583: PPUSH
29584: LD_INT 2
29586: PPUSH
29587: LD_VAR 0 1
29591: PUSH
29592: LD_INT 2
29594: ARRAY
29595: PPUSH
29596: LD_INT 1
29598: PPUSH
29599: CALL_OW 3
29603: PPUSH
29604: CALL_OW 1
29608: ST_TO_ADDR
// tmp := 1 ;
29609: LD_ADDR_VAR 0 2
29613: PUSH
29614: LD_STRING 1
29616: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
29617: LD_ADDR_VAR 0 4
29621: PUSH
29622: LD_VAR 0 4
29626: PUSH
29627: LD_VAR 0 2
29631: STR
29632: ST_TO_ADDR
// end ;
29633: GO 29529
29635: POP
29636: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
29637: LD_STRING getStreamItemsFromMission("
29639: PUSH
29640: LD_VAR 0 3
29644: STR
29645: PUSH
29646: LD_STRING ","
29648: STR
29649: PUSH
29650: LD_VAR 0 4
29654: STR
29655: PUSH
29656: LD_STRING ")
29658: STR
29659: PPUSH
29660: CALL_OW 559
// end else
29664: GO 29673
// ToLua ( getStreamItemsFromMission("","") ) ;
29666: LD_STRING getStreamItemsFromMission("","")
29668: PPUSH
29669: CALL_OW 559
// end ;
29673: LD_VAR 0 1
29677: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
29678: LD_EXP 67
29682: PUSH
29683: LD_EXP 72
29687: AND
29688: IFFALSE 29812
29690: GO 29692
29692: DISABLE
29693: LD_INT 0
29695: PPUSH
29696: PPUSH
// begin enable ;
29697: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
29698: LD_ADDR_VAR 0 2
29702: PUSH
29703: LD_INT 22
29705: PUSH
29706: LD_OWVAR 2
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 2
29717: PUSH
29718: LD_INT 34
29720: PUSH
29721: LD_INT 7
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 34
29730: PUSH
29731: LD_INT 45
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 34
29740: PUSH
29741: LD_INT 28
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 34
29750: PUSH
29751: LD_INT 47
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PPUSH
29769: CALL_OW 69
29773: ST_TO_ADDR
// if not tmp then
29774: LD_VAR 0 2
29778: NOT
29779: IFFALSE 29783
// exit ;
29781: GO 29812
// for i in tmp do
29783: LD_ADDR_VAR 0 1
29787: PUSH
29788: LD_VAR 0 2
29792: PUSH
29793: FOR_IN
29794: IFFALSE 29810
// begin SetLives ( i , 0 ) ;
29796: LD_VAR 0 1
29800: PPUSH
29801: LD_INT 0
29803: PPUSH
29804: CALL_OW 234
// end ;
29808: GO 29793
29810: POP
29811: POP
// end ;
29812: PPOPN 2
29814: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
29815: LD_EXP 67
29819: PUSH
29820: LD_EXP 73
29824: AND
29825: IFFALSE 29909
29827: GO 29829
29829: DISABLE
29830: LD_INT 0
29832: PPUSH
29833: PPUSH
// begin enable ;
29834: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
29835: LD_ADDR_VAR 0 2
29839: PUSH
29840: LD_INT 22
29842: PUSH
29843: LD_OWVAR 2
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 32
29854: PUSH
29855: LD_INT 3
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PPUSH
29866: CALL_OW 69
29870: ST_TO_ADDR
// if not tmp then
29871: LD_VAR 0 2
29875: NOT
29876: IFFALSE 29880
// exit ;
29878: GO 29909
// for i in tmp do
29880: LD_ADDR_VAR 0 1
29884: PUSH
29885: LD_VAR 0 2
29889: PUSH
29890: FOR_IN
29891: IFFALSE 29907
// begin SetLives ( i , 0 ) ;
29893: LD_VAR 0 1
29897: PPUSH
29898: LD_INT 0
29900: PPUSH
29901: CALL_OW 234
// end ;
29905: GO 29890
29907: POP
29908: POP
// end ;
29909: PPOPN 2
29911: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
29912: LD_EXP 67
29916: PUSH
29917: LD_EXP 70
29921: AND
29922: IFFALSE 30015
29924: GO 29926
29926: DISABLE
29927: LD_INT 0
29929: PPUSH
// begin enable ;
29930: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
29931: LD_ADDR_VAR 0 1
29935: PUSH
29936: LD_INT 22
29938: PUSH
29939: LD_OWVAR 2
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 2
29950: PUSH
29951: LD_INT 25
29953: PUSH
29954: LD_INT 5
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 25
29963: PUSH
29964: LD_INT 9
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 25
29973: PUSH
29974: LD_INT 8
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PPUSH
29991: CALL_OW 69
29995: PUSH
29996: FOR_IN
29997: IFFALSE 30013
// begin SetClass ( i , 1 ) ;
29999: LD_VAR 0 1
30003: PPUSH
30004: LD_INT 1
30006: PPUSH
30007: CALL_OW 336
// end ;
30011: GO 29996
30013: POP
30014: POP
// end ;
30015: PPOPN 1
30017: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
30018: LD_EXP 67
30022: PUSH
30023: LD_EXP 71
30027: AND
30028: PUSH
30029: LD_OWVAR 65
30033: PUSH
30034: LD_INT 7
30036: LESS
30037: AND
30038: IFFALSE 30052
30040: GO 30042
30042: DISABLE
// begin enable ;
30043: ENABLE
// game_speed := 7 ;
30044: LD_ADDR_OWVAR 65
30048: PUSH
30049: LD_INT 7
30051: ST_TO_ADDR
// end ;
30052: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
30053: LD_EXP 67
30057: PUSH
30058: LD_EXP 74
30062: AND
30063: IFFALSE 30265
30065: GO 30067
30067: DISABLE
30068: LD_INT 0
30070: PPUSH
30071: PPUSH
30072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30073: LD_ADDR_VAR 0 3
30077: PUSH
30078: LD_INT 81
30080: PUSH
30081: LD_OWVAR 2
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 21
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PPUSH
30104: CALL_OW 69
30108: ST_TO_ADDR
// if not tmp then
30109: LD_VAR 0 3
30113: NOT
30114: IFFALSE 30118
// exit ;
30116: GO 30265
// if tmp > 5 then
30118: LD_VAR 0 3
30122: PUSH
30123: LD_INT 5
30125: GREATER
30126: IFFALSE 30138
// k := 5 else
30128: LD_ADDR_VAR 0 2
30132: PUSH
30133: LD_INT 5
30135: ST_TO_ADDR
30136: GO 30148
// k := tmp ;
30138: LD_ADDR_VAR 0 2
30142: PUSH
30143: LD_VAR 0 3
30147: ST_TO_ADDR
// for i := 1 to k do
30148: LD_ADDR_VAR 0 1
30152: PUSH
30153: DOUBLE
30154: LD_INT 1
30156: DEC
30157: ST_TO_ADDR
30158: LD_VAR 0 2
30162: PUSH
30163: FOR_TO
30164: IFFALSE 30263
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
30166: LD_VAR 0 3
30170: PUSH
30171: LD_VAR 0 1
30175: ARRAY
30176: PPUSH
30177: LD_VAR 0 1
30181: PUSH
30182: LD_INT 4
30184: MOD
30185: PUSH
30186: LD_INT 1
30188: PLUS
30189: PPUSH
30190: CALL_OW 259
30194: PUSH
30195: LD_INT 10
30197: LESS
30198: IFFALSE 30261
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
30200: LD_VAR 0 3
30204: PUSH
30205: LD_VAR 0 1
30209: ARRAY
30210: PPUSH
30211: LD_VAR 0 1
30215: PUSH
30216: LD_INT 4
30218: MOD
30219: PUSH
30220: LD_INT 1
30222: PLUS
30223: PPUSH
30224: LD_VAR 0 3
30228: PUSH
30229: LD_VAR 0 1
30233: ARRAY
30234: PPUSH
30235: LD_VAR 0 1
30239: PUSH
30240: LD_INT 4
30242: MOD
30243: PUSH
30244: LD_INT 1
30246: PLUS
30247: PPUSH
30248: CALL_OW 259
30252: PUSH
30253: LD_INT 1
30255: PLUS
30256: PPUSH
30257: CALL_OW 237
30261: GO 30163
30263: POP
30264: POP
// end ;
30265: PPOPN 3
30267: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
30268: LD_EXP 67
30272: PUSH
30273: LD_EXP 75
30277: AND
30278: IFFALSE 30298
30280: GO 30282
30282: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
30283: LD_INT 4
30285: PPUSH
30286: LD_OWVAR 2
30290: PPUSH
30291: LD_INT 0
30293: PPUSH
30294: CALL_OW 324
30298: END
// every 0 0$1 trigger StreamModeActive and sShovel do
30299: LD_EXP 67
30303: PUSH
30304: LD_EXP 104
30308: AND
30309: IFFALSE 30329
30311: GO 30313
30313: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
30314: LD_INT 19
30316: PPUSH
30317: LD_OWVAR 2
30321: PPUSH
30322: LD_INT 0
30324: PPUSH
30325: CALL_OW 324
30329: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
30330: LD_EXP 67
30334: PUSH
30335: LD_EXP 76
30339: AND
30340: IFFALSE 30442
30342: GO 30344
30344: DISABLE
30345: LD_INT 0
30347: PPUSH
30348: PPUSH
// begin enable ;
30349: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
30350: LD_ADDR_VAR 0 2
30354: PUSH
30355: LD_INT 22
30357: PUSH
30358: LD_OWVAR 2
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: LD_INT 34
30372: PUSH
30373: LD_INT 11
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 34
30382: PUSH
30383: LD_INT 30
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: LIST
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PPUSH
30399: CALL_OW 69
30403: ST_TO_ADDR
// if not tmp then
30404: LD_VAR 0 2
30408: NOT
30409: IFFALSE 30413
// exit ;
30411: GO 30442
// for i in tmp do
30413: LD_ADDR_VAR 0 1
30417: PUSH
30418: LD_VAR 0 2
30422: PUSH
30423: FOR_IN
30424: IFFALSE 30440
// begin SetLives ( i , 0 ) ;
30426: LD_VAR 0 1
30430: PPUSH
30431: LD_INT 0
30433: PPUSH
30434: CALL_OW 234
// end ;
30438: GO 30423
30440: POP
30441: POP
// end ;
30442: PPOPN 2
30444: END
// every 0 0$1 trigger StreamModeActive and sBunker do
30445: LD_EXP 67
30449: PUSH
30450: LD_EXP 77
30454: AND
30455: IFFALSE 30475
30457: GO 30459
30459: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
30460: LD_INT 32
30462: PPUSH
30463: LD_OWVAR 2
30467: PPUSH
30468: LD_INT 0
30470: PPUSH
30471: CALL_OW 324
30475: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
30476: LD_EXP 67
30480: PUSH
30481: LD_EXP 78
30485: AND
30486: IFFALSE 30667
30488: GO 30490
30490: DISABLE
30491: LD_INT 0
30493: PPUSH
30494: PPUSH
30495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30496: LD_ADDR_VAR 0 2
30500: PUSH
30501: LD_INT 22
30503: PUSH
30504: LD_OWVAR 2
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 33
30515: PUSH
30516: LD_INT 3
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PPUSH
30527: CALL_OW 69
30531: ST_TO_ADDR
// if not tmp then
30532: LD_VAR 0 2
30536: NOT
30537: IFFALSE 30541
// exit ;
30539: GO 30667
// side := 0 ;
30541: LD_ADDR_VAR 0 3
30545: PUSH
30546: LD_INT 0
30548: ST_TO_ADDR
// for i := 1 to 8 do
30549: LD_ADDR_VAR 0 1
30553: PUSH
30554: DOUBLE
30555: LD_INT 1
30557: DEC
30558: ST_TO_ADDR
30559: LD_INT 8
30561: PUSH
30562: FOR_TO
30563: IFFALSE 30611
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30565: LD_OWVAR 2
30569: PUSH
30570: LD_VAR 0 1
30574: NONEQUAL
30575: PUSH
30576: LD_OWVAR 2
30580: PPUSH
30581: LD_VAR 0 1
30585: PPUSH
30586: CALL_OW 81
30590: PUSH
30591: LD_INT 2
30593: EQUAL
30594: AND
30595: IFFALSE 30609
// begin side := i ;
30597: LD_ADDR_VAR 0 3
30601: PUSH
30602: LD_VAR 0 1
30606: ST_TO_ADDR
// break ;
30607: GO 30611
// end ;
30609: GO 30562
30611: POP
30612: POP
// if not side then
30613: LD_VAR 0 3
30617: NOT
30618: IFFALSE 30622
// exit ;
30620: GO 30667
// for i := 1 to tmp do
30622: LD_ADDR_VAR 0 1
30626: PUSH
30627: DOUBLE
30628: LD_INT 1
30630: DEC
30631: ST_TO_ADDR
30632: LD_VAR 0 2
30636: PUSH
30637: FOR_TO
30638: IFFALSE 30665
// if Prob ( 60 ) then
30640: LD_INT 60
30642: PPUSH
30643: CALL_OW 13
30647: IFFALSE 30663
// SetSide ( i , side ) ;
30649: LD_VAR 0 1
30653: PPUSH
30654: LD_VAR 0 3
30658: PPUSH
30659: CALL_OW 235
30663: GO 30637
30665: POP
30666: POP
// end ;
30667: PPOPN 3
30669: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
30670: LD_EXP 67
30674: PUSH
30675: LD_EXP 80
30679: AND
30680: IFFALSE 30799
30682: GO 30684
30684: DISABLE
30685: LD_INT 0
30687: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
30688: LD_ADDR_VAR 0 1
30692: PUSH
30693: LD_INT 22
30695: PUSH
30696: LD_OWVAR 2
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 21
30707: PUSH
30708: LD_INT 1
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 3
30717: PUSH
30718: LD_INT 23
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: LIST
30736: PPUSH
30737: CALL_OW 69
30741: PUSH
30742: FOR_IN
30743: IFFALSE 30797
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
30745: LD_VAR 0 1
30749: PPUSH
30750: CALL_OW 257
30754: PUSH
30755: LD_INT 1
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: LD_INT 3
30763: PUSH
30764: LD_INT 4
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: IN
30773: IFFALSE 30795
// SetClass ( un , rand ( 1 , 4 ) ) ;
30775: LD_VAR 0 1
30779: PPUSH
30780: LD_INT 1
30782: PPUSH
30783: LD_INT 4
30785: PPUSH
30786: CALL_OW 12
30790: PPUSH
30791: CALL_OW 336
30795: GO 30742
30797: POP
30798: POP
// end ;
30799: PPOPN 1
30801: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
30802: LD_EXP 67
30806: PUSH
30807: LD_EXP 79
30811: AND
30812: IFFALSE 30891
30814: GO 30816
30816: DISABLE
30817: LD_INT 0
30819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30820: LD_ADDR_VAR 0 1
30824: PUSH
30825: LD_INT 22
30827: PUSH
30828: LD_OWVAR 2
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 21
30839: PUSH
30840: LD_INT 3
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PPUSH
30851: CALL_OW 69
30855: ST_TO_ADDR
// if not tmp then
30856: LD_VAR 0 1
30860: NOT
30861: IFFALSE 30865
// exit ;
30863: GO 30891
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
30865: LD_VAR 0 1
30869: PUSH
30870: LD_INT 1
30872: PPUSH
30873: LD_VAR 0 1
30877: PPUSH
30878: CALL_OW 12
30882: ARRAY
30883: PPUSH
30884: LD_INT 100
30886: PPUSH
30887: CALL_OW 234
// end ;
30891: PPOPN 1
30893: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
30894: LD_EXP 67
30898: PUSH
30899: LD_EXP 81
30903: AND
30904: IFFALSE 31002
30906: GO 30908
30908: DISABLE
30909: LD_INT 0
30911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30912: LD_ADDR_VAR 0 1
30916: PUSH
30917: LD_INT 22
30919: PUSH
30920: LD_OWVAR 2
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 21
30931: PUSH
30932: LD_INT 1
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PPUSH
30943: CALL_OW 69
30947: ST_TO_ADDR
// if not tmp then
30948: LD_VAR 0 1
30952: NOT
30953: IFFALSE 30957
// exit ;
30955: GO 31002
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
30957: LD_VAR 0 1
30961: PUSH
30962: LD_INT 1
30964: PPUSH
30965: LD_VAR 0 1
30969: PPUSH
30970: CALL_OW 12
30974: ARRAY
30975: PPUSH
30976: LD_INT 1
30978: PPUSH
30979: LD_INT 4
30981: PPUSH
30982: CALL_OW 12
30986: PPUSH
30987: LD_INT 3000
30989: PPUSH
30990: LD_INT 9000
30992: PPUSH
30993: CALL_OW 12
30997: PPUSH
30998: CALL_OW 492
// end ;
31002: PPOPN 1
31004: END
// every 0 0$1 trigger StreamModeActive and sDepot do
31005: LD_EXP 67
31009: PUSH
31010: LD_EXP 82
31014: AND
31015: IFFALSE 31035
31017: GO 31019
31019: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
31020: LD_INT 1
31022: PPUSH
31023: LD_OWVAR 2
31027: PPUSH
31028: LD_INT 0
31030: PPUSH
31031: CALL_OW 324
31035: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
31036: LD_EXP 67
31040: PUSH
31041: LD_EXP 83
31045: AND
31046: IFFALSE 31129
31048: GO 31050
31050: DISABLE
31051: LD_INT 0
31053: PPUSH
31054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
31055: LD_ADDR_VAR 0 2
31059: PUSH
31060: LD_INT 22
31062: PUSH
31063: LD_OWVAR 2
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 21
31074: PUSH
31075: LD_INT 3
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PPUSH
31086: CALL_OW 69
31090: ST_TO_ADDR
// if not tmp then
31091: LD_VAR 0 2
31095: NOT
31096: IFFALSE 31100
// exit ;
31098: GO 31129
// for i in tmp do
31100: LD_ADDR_VAR 0 1
31104: PUSH
31105: LD_VAR 0 2
31109: PUSH
31110: FOR_IN
31111: IFFALSE 31127
// SetBLevel ( i , 10 ) ;
31113: LD_VAR 0 1
31117: PPUSH
31118: LD_INT 10
31120: PPUSH
31121: CALL_OW 241
31125: GO 31110
31127: POP
31128: POP
// end ;
31129: PPOPN 2
31131: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
31132: LD_EXP 67
31136: PUSH
31137: LD_EXP 84
31141: AND
31142: IFFALSE 31253
31144: GO 31146
31146: DISABLE
31147: LD_INT 0
31149: PPUSH
31150: PPUSH
31151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31152: LD_ADDR_VAR 0 3
31156: PUSH
31157: LD_INT 22
31159: PUSH
31160: LD_OWVAR 2
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 25
31171: PUSH
31172: LD_INT 1
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PPUSH
31183: CALL_OW 69
31187: ST_TO_ADDR
// if not tmp then
31188: LD_VAR 0 3
31192: NOT
31193: IFFALSE 31197
// exit ;
31195: GO 31253
// un := tmp [ rand ( 1 , tmp ) ] ;
31197: LD_ADDR_VAR 0 2
31201: PUSH
31202: LD_VAR 0 3
31206: PUSH
31207: LD_INT 1
31209: PPUSH
31210: LD_VAR 0 3
31214: PPUSH
31215: CALL_OW 12
31219: ARRAY
31220: ST_TO_ADDR
// if Crawls ( un ) then
31221: LD_VAR 0 2
31225: PPUSH
31226: CALL_OW 318
31230: IFFALSE 31241
// ComWalk ( un ) ;
31232: LD_VAR 0 2
31236: PPUSH
31237: CALL_OW 138
// SetClass ( un , class_sniper ) ;
31241: LD_VAR 0 2
31245: PPUSH
31246: LD_INT 5
31248: PPUSH
31249: CALL_OW 336
// end ;
31253: PPOPN 3
31255: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
31256: LD_EXP 67
31260: PUSH
31261: LD_EXP 85
31265: AND
31266: PUSH
31267: LD_OWVAR 67
31271: PUSH
31272: LD_INT 3
31274: LESS
31275: AND
31276: IFFALSE 31295
31278: GO 31280
31280: DISABLE
// Difficulty := Difficulty + 1 ;
31281: LD_ADDR_OWVAR 67
31285: PUSH
31286: LD_OWVAR 67
31290: PUSH
31291: LD_INT 1
31293: PLUS
31294: ST_TO_ADDR
31295: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
31296: LD_EXP 67
31300: PUSH
31301: LD_EXP 86
31305: AND
31306: IFFALSE 31409
31308: GO 31310
31310: DISABLE
31311: LD_INT 0
31313: PPUSH
// begin for i := 1 to 5 do
31314: LD_ADDR_VAR 0 1
31318: PUSH
31319: DOUBLE
31320: LD_INT 1
31322: DEC
31323: ST_TO_ADDR
31324: LD_INT 5
31326: PUSH
31327: FOR_TO
31328: IFFALSE 31407
// begin uc_nation := nation_nature ;
31330: LD_ADDR_OWVAR 21
31334: PUSH
31335: LD_INT 0
31337: ST_TO_ADDR
// uc_side := 0 ;
31338: LD_ADDR_OWVAR 20
31342: PUSH
31343: LD_INT 0
31345: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31346: LD_ADDR_OWVAR 29
31350: PUSH
31351: LD_INT 12
31353: PUSH
31354: LD_INT 12
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: ST_TO_ADDR
// hc_agressivity := 20 ;
31361: LD_ADDR_OWVAR 35
31365: PUSH
31366: LD_INT 20
31368: ST_TO_ADDR
// hc_class := class_tiger ;
31369: LD_ADDR_OWVAR 28
31373: PUSH
31374: LD_INT 14
31376: ST_TO_ADDR
// hc_gallery :=  ;
31377: LD_ADDR_OWVAR 33
31381: PUSH
31382: LD_STRING 
31384: ST_TO_ADDR
// hc_name :=  ;
31385: LD_ADDR_OWVAR 26
31389: PUSH
31390: LD_STRING 
31392: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
31393: CALL_OW 44
31397: PPUSH
31398: LD_INT 0
31400: PPUSH
31401: CALL_OW 51
// end ;
31405: GO 31327
31407: POP
31408: POP
// end ;
31409: PPOPN 1
31411: END
// every 0 0$1 trigger StreamModeActive and sBomb do
31412: LD_EXP 67
31416: PUSH
31417: LD_EXP 87
31421: AND
31422: IFFALSE 31431
31424: GO 31426
31426: DISABLE
// StreamSibBomb ;
31427: CALL 31432 0 0
31431: END
// export function StreamSibBomb ; var i , x , y ; begin
31432: LD_INT 0
31434: PPUSH
31435: PPUSH
31436: PPUSH
31437: PPUSH
// result := false ;
31438: LD_ADDR_VAR 0 1
31442: PUSH
31443: LD_INT 0
31445: ST_TO_ADDR
// for i := 1 to 16 do
31446: LD_ADDR_VAR 0 2
31450: PUSH
31451: DOUBLE
31452: LD_INT 1
31454: DEC
31455: ST_TO_ADDR
31456: LD_INT 16
31458: PUSH
31459: FOR_TO
31460: IFFALSE 31659
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31462: LD_ADDR_VAR 0 3
31466: PUSH
31467: LD_INT 10
31469: PUSH
31470: LD_INT 20
31472: PUSH
31473: LD_INT 30
31475: PUSH
31476: LD_INT 40
31478: PUSH
31479: LD_INT 50
31481: PUSH
31482: LD_INT 60
31484: PUSH
31485: LD_INT 70
31487: PUSH
31488: LD_INT 80
31490: PUSH
31491: LD_INT 90
31493: PUSH
31494: LD_INT 100
31496: PUSH
31497: LD_INT 110
31499: PUSH
31500: LD_INT 120
31502: PUSH
31503: LD_INT 130
31505: PUSH
31506: LD_INT 140
31508: PUSH
31509: LD_INT 150
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 1
31531: PPUSH
31532: LD_INT 15
31534: PPUSH
31535: CALL_OW 12
31539: ARRAY
31540: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31541: LD_ADDR_VAR 0 4
31545: PUSH
31546: LD_INT 10
31548: PUSH
31549: LD_INT 20
31551: PUSH
31552: LD_INT 30
31554: PUSH
31555: LD_INT 40
31557: PUSH
31558: LD_INT 50
31560: PUSH
31561: LD_INT 60
31563: PUSH
31564: LD_INT 70
31566: PUSH
31567: LD_INT 80
31569: PUSH
31570: LD_INT 90
31572: PUSH
31573: LD_INT 100
31575: PUSH
31576: LD_INT 110
31578: PUSH
31579: LD_INT 120
31581: PUSH
31582: LD_INT 130
31584: PUSH
31585: LD_INT 140
31587: PUSH
31588: LD_INT 150
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 1
31610: PPUSH
31611: LD_INT 15
31613: PPUSH
31614: CALL_OW 12
31618: ARRAY
31619: ST_TO_ADDR
// if ValidHex ( x , y ) then
31620: LD_VAR 0 3
31624: PPUSH
31625: LD_VAR 0 4
31629: PPUSH
31630: CALL_OW 488
31634: IFFALSE 31657
// begin result := [ x , y ] ;
31636: LD_ADDR_VAR 0 1
31640: PUSH
31641: LD_VAR 0 3
31645: PUSH
31646: LD_VAR 0 4
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: ST_TO_ADDR
// break ;
31655: GO 31659
// end ; end ;
31657: GO 31459
31659: POP
31660: POP
// if result then
31661: LD_VAR 0 1
31665: IFFALSE 31725
// begin ToLua ( playSibBomb() ) ;
31667: LD_STRING playSibBomb()
31669: PPUSH
31670: CALL_OW 559
// wait ( 0 0$14 ) ;
31674: LD_INT 490
31676: PPUSH
31677: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
31681: LD_VAR 0 1
31685: PUSH
31686: LD_INT 1
31688: ARRAY
31689: PPUSH
31690: LD_VAR 0 1
31694: PUSH
31695: LD_INT 2
31697: ARRAY
31698: PPUSH
31699: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
31703: LD_VAR 0 1
31707: PUSH
31708: LD_INT 1
31710: ARRAY
31711: PPUSH
31712: LD_VAR 0 1
31716: PUSH
31717: LD_INT 2
31719: ARRAY
31720: PPUSH
31721: CALL_OW 429
// end ; end ;
31725: LD_VAR 0 1
31729: RET
// every 0 0$1 trigger StreamModeActive and sReset do
31730: LD_EXP 67
31734: PUSH
31735: LD_EXP 89
31739: AND
31740: IFFALSE 31752
31742: GO 31744
31744: DISABLE
// YouLost (  ) ;
31745: LD_STRING 
31747: PPUSH
31748: CALL_OW 104
31752: END
// every 0 0$1 trigger StreamModeActive and sFog do
31753: LD_EXP 67
31757: PUSH
31758: LD_EXP 88
31762: AND
31763: IFFALSE 31777
31765: GO 31767
31767: DISABLE
// FogOff ( your_side ) ;
31768: LD_OWVAR 2
31772: PPUSH
31773: CALL_OW 344
31777: END
// every 0 0$1 trigger StreamModeActive and sSun do
31778: LD_EXP 67
31782: PUSH
31783: LD_EXP 90
31787: AND
31788: IFFALSE 31816
31790: GO 31792
31792: DISABLE
// begin solar_recharge_percent := 0 ;
31793: LD_ADDR_OWVAR 79
31797: PUSH
31798: LD_INT 0
31800: ST_TO_ADDR
// wait ( 5 5$00 ) ;
31801: LD_INT 10500
31803: PPUSH
31804: CALL_OW 67
// solar_recharge_percent := 100 ;
31808: LD_ADDR_OWVAR 79
31812: PUSH
31813: LD_INT 100
31815: ST_TO_ADDR
// end ;
31816: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
31817: LD_EXP 67
31821: PUSH
31822: LD_EXP 91
31826: AND
31827: IFFALSE 32066
31829: GO 31831
31831: DISABLE
31832: LD_INT 0
31834: PPUSH
31835: PPUSH
31836: PPUSH
// begin tmp := [ ] ;
31837: LD_ADDR_VAR 0 3
31841: PUSH
31842: EMPTY
31843: ST_TO_ADDR
// for i := 1 to 6 do
31844: LD_ADDR_VAR 0 1
31848: PUSH
31849: DOUBLE
31850: LD_INT 1
31852: DEC
31853: ST_TO_ADDR
31854: LD_INT 6
31856: PUSH
31857: FOR_TO
31858: IFFALSE 31963
// begin uc_nation := nation_nature ;
31860: LD_ADDR_OWVAR 21
31864: PUSH
31865: LD_INT 0
31867: ST_TO_ADDR
// uc_side := 0 ;
31868: LD_ADDR_OWVAR 20
31872: PUSH
31873: LD_INT 0
31875: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31876: LD_ADDR_OWVAR 29
31880: PUSH
31881: LD_INT 12
31883: PUSH
31884: LD_INT 12
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: ST_TO_ADDR
// hc_agressivity := 20 ;
31891: LD_ADDR_OWVAR 35
31895: PUSH
31896: LD_INT 20
31898: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
31899: LD_ADDR_OWVAR 28
31903: PUSH
31904: LD_INT 17
31906: ST_TO_ADDR
// hc_gallery :=  ;
31907: LD_ADDR_OWVAR 33
31911: PUSH
31912: LD_STRING 
31914: ST_TO_ADDR
// hc_name :=  ;
31915: LD_ADDR_OWVAR 26
31919: PUSH
31920: LD_STRING 
31922: ST_TO_ADDR
// un := CreateHuman ;
31923: LD_ADDR_VAR 0 2
31927: PUSH
31928: CALL_OW 44
31932: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
31933: LD_VAR 0 2
31937: PPUSH
31938: LD_INT 1
31940: PPUSH
31941: CALL_OW 51
// tmp := tmp ^ un ;
31945: LD_ADDR_VAR 0 3
31949: PUSH
31950: LD_VAR 0 3
31954: PUSH
31955: LD_VAR 0 2
31959: ADD
31960: ST_TO_ADDR
// end ;
31961: GO 31857
31963: POP
31964: POP
// repeat wait ( 0 0$1 ) ;
31965: LD_INT 35
31967: PPUSH
31968: CALL_OW 67
// for un in tmp do
31972: LD_ADDR_VAR 0 2
31976: PUSH
31977: LD_VAR 0 3
31981: PUSH
31982: FOR_IN
31983: IFFALSE 32057
// begin if IsDead ( un ) then
31985: LD_VAR 0 2
31989: PPUSH
31990: CALL_OW 301
31994: IFFALSE 32014
// begin tmp := tmp diff un ;
31996: LD_ADDR_VAR 0 3
32000: PUSH
32001: LD_VAR 0 3
32005: PUSH
32006: LD_VAR 0 2
32010: DIFF
32011: ST_TO_ADDR
// continue ;
32012: GO 31982
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
32014: LD_VAR 0 2
32018: PPUSH
32019: LD_INT 3
32021: PUSH
32022: LD_INT 22
32024: PUSH
32025: LD_INT 0
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PPUSH
32036: CALL_OW 69
32040: PPUSH
32041: LD_VAR 0 2
32045: PPUSH
32046: CALL_OW 74
32050: PPUSH
32051: CALL_OW 115
// end ;
32055: GO 31982
32057: POP
32058: POP
// until not tmp ;
32059: LD_VAR 0 3
32063: NOT
32064: IFFALSE 31965
// end ;
32066: PPOPN 3
32068: END
// every 0 0$1 trigger StreamModeActive and sTroll do
32069: LD_EXP 67
32073: PUSH
32074: LD_EXP 92
32078: AND
32079: IFFALSE 32133
32081: GO 32083
32083: DISABLE
// begin ToLua ( displayTroll(); ) ;
32084: LD_STRING displayTroll();
32086: PPUSH
32087: CALL_OW 559
// wait ( 3 3$00 ) ;
32091: LD_INT 6300
32093: PPUSH
32094: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32098: LD_STRING hideTroll();
32100: PPUSH
32101: CALL_OW 559
// wait ( 1 1$00 ) ;
32105: LD_INT 2100
32107: PPUSH
32108: CALL_OW 67
// ToLua ( displayTroll(); ) ;
32112: LD_STRING displayTroll();
32114: PPUSH
32115: CALL_OW 559
// wait ( 1 1$00 ) ;
32119: LD_INT 2100
32121: PPUSH
32122: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32126: LD_STRING hideTroll();
32128: PPUSH
32129: CALL_OW 559
// end ;
32133: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
32134: LD_EXP 67
32138: PUSH
32139: LD_EXP 93
32143: AND
32144: IFFALSE 32207
32146: GO 32148
32148: DISABLE
32149: LD_INT 0
32151: PPUSH
// begin p := 0 ;
32152: LD_ADDR_VAR 0 1
32156: PUSH
32157: LD_INT 0
32159: ST_TO_ADDR
// repeat game_speed := 1 ;
32160: LD_ADDR_OWVAR 65
32164: PUSH
32165: LD_INT 1
32167: ST_TO_ADDR
// wait ( 0 0$1 ) ;
32168: LD_INT 35
32170: PPUSH
32171: CALL_OW 67
// p := p + 1 ;
32175: LD_ADDR_VAR 0 1
32179: PUSH
32180: LD_VAR 0 1
32184: PUSH
32185: LD_INT 1
32187: PLUS
32188: ST_TO_ADDR
// until p >= 60 ;
32189: LD_VAR 0 1
32193: PUSH
32194: LD_INT 60
32196: GREATEREQUAL
32197: IFFALSE 32160
// game_speed := 4 ;
32199: LD_ADDR_OWVAR 65
32203: PUSH
32204: LD_INT 4
32206: ST_TO_ADDR
// end ;
32207: PPOPN 1
32209: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
32210: LD_EXP 67
32214: PUSH
32215: LD_EXP 94
32219: AND
32220: IFFALSE 32366
32222: GO 32224
32224: DISABLE
32225: LD_INT 0
32227: PPUSH
32228: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32229: LD_ADDR_VAR 0 1
32233: PUSH
32234: LD_INT 22
32236: PUSH
32237: LD_OWVAR 2
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 2
32248: PUSH
32249: LD_INT 30
32251: PUSH
32252: LD_INT 0
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 30
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: LIST
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PPUSH
32278: CALL_OW 69
32282: ST_TO_ADDR
// if not depot then
32283: LD_VAR 0 1
32287: NOT
32288: IFFALSE 32292
// exit ;
32290: GO 32366
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
32292: LD_ADDR_VAR 0 2
32296: PUSH
32297: LD_VAR 0 1
32301: PUSH
32302: LD_INT 1
32304: PPUSH
32305: LD_VAR 0 1
32309: PPUSH
32310: CALL_OW 12
32314: ARRAY
32315: PPUSH
32316: CALL_OW 274
32320: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
32321: LD_VAR 0 2
32325: PPUSH
32326: LD_INT 1
32328: PPUSH
32329: LD_INT 0
32331: PPUSH
32332: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
32336: LD_VAR 0 2
32340: PPUSH
32341: LD_INT 2
32343: PPUSH
32344: LD_INT 0
32346: PPUSH
32347: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
32351: LD_VAR 0 2
32355: PPUSH
32356: LD_INT 3
32358: PPUSH
32359: LD_INT 0
32361: PPUSH
32362: CALL_OW 277
// end ;
32366: PPOPN 2
32368: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
32369: LD_EXP 67
32373: PUSH
32374: LD_EXP 95
32378: AND
32379: IFFALSE 32476
32381: GO 32383
32383: DISABLE
32384: LD_INT 0
32386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32387: LD_ADDR_VAR 0 1
32391: PUSH
32392: LD_INT 22
32394: PUSH
32395: LD_OWVAR 2
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 21
32406: PUSH
32407: LD_INT 1
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 3
32416: PUSH
32417: LD_INT 23
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: LIST
32435: PPUSH
32436: CALL_OW 69
32440: ST_TO_ADDR
// if not tmp then
32441: LD_VAR 0 1
32445: NOT
32446: IFFALSE 32450
// exit ;
32448: GO 32476
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
32450: LD_VAR 0 1
32454: PUSH
32455: LD_INT 1
32457: PPUSH
32458: LD_VAR 0 1
32462: PPUSH
32463: CALL_OW 12
32467: ARRAY
32468: PPUSH
32469: LD_INT 200
32471: PPUSH
32472: CALL_OW 234
// end ;
32476: PPOPN 1
32478: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
32479: LD_EXP 67
32483: PUSH
32484: LD_EXP 96
32488: AND
32489: IFFALSE 32568
32491: GO 32493
32493: DISABLE
32494: LD_INT 0
32496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32497: LD_ADDR_VAR 0 1
32501: PUSH
32502: LD_INT 22
32504: PUSH
32505: LD_OWVAR 2
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 21
32516: PUSH
32517: LD_INT 2
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PPUSH
32528: CALL_OW 69
32532: ST_TO_ADDR
// if not tmp then
32533: LD_VAR 0 1
32537: NOT
32538: IFFALSE 32542
// exit ;
32540: GO 32568
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32542: LD_VAR 0 1
32546: PUSH
32547: LD_INT 1
32549: PPUSH
32550: LD_VAR 0 1
32554: PPUSH
32555: CALL_OW 12
32559: ARRAY
32560: PPUSH
32561: LD_INT 60
32563: PPUSH
32564: CALL_OW 234
// end ;
32568: PPOPN 1
32570: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32571: LD_EXP 67
32575: PUSH
32576: LD_EXP 97
32580: AND
32581: IFFALSE 32680
32583: GO 32585
32585: DISABLE
32586: LD_INT 0
32588: PPUSH
32589: PPUSH
// begin enable ;
32590: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
32591: LD_ADDR_VAR 0 1
32595: PUSH
32596: LD_INT 22
32598: PUSH
32599: LD_OWVAR 2
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 61
32610: PUSH
32611: EMPTY
32612: LIST
32613: PUSH
32614: LD_INT 33
32616: PUSH
32617: LD_INT 2
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: LIST
32628: PPUSH
32629: CALL_OW 69
32633: ST_TO_ADDR
// if not tmp then
32634: LD_VAR 0 1
32638: NOT
32639: IFFALSE 32643
// exit ;
32641: GO 32680
// for i in tmp do
32643: LD_ADDR_VAR 0 2
32647: PUSH
32648: LD_VAR 0 1
32652: PUSH
32653: FOR_IN
32654: IFFALSE 32678
// if IsControledBy ( i ) then
32656: LD_VAR 0 2
32660: PPUSH
32661: CALL_OW 312
32665: IFFALSE 32676
// ComUnlink ( i ) ;
32667: LD_VAR 0 2
32671: PPUSH
32672: CALL_OW 136
32676: GO 32653
32678: POP
32679: POP
// end ;
32680: PPOPN 2
32682: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
32683: LD_EXP 67
32687: PUSH
32688: LD_EXP 98
32692: AND
32693: IFFALSE 32833
32695: GO 32697
32697: DISABLE
32698: LD_INT 0
32700: PPUSH
32701: PPUSH
// begin ToLua ( displayPowell(); ) ;
32702: LD_STRING displayPowell();
32704: PPUSH
32705: CALL_OW 559
// uc_side := 0 ;
32709: LD_ADDR_OWVAR 20
32713: PUSH
32714: LD_INT 0
32716: ST_TO_ADDR
// uc_nation := 2 ;
32717: LD_ADDR_OWVAR 21
32721: PUSH
32722: LD_INT 2
32724: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
32725: LD_ADDR_OWVAR 37
32729: PUSH
32730: LD_INT 14
32732: ST_TO_ADDR
// vc_engine := engine_siberite ;
32733: LD_ADDR_OWVAR 39
32737: PUSH
32738: LD_INT 3
32740: ST_TO_ADDR
// vc_control := control_apeman ;
32741: LD_ADDR_OWVAR 38
32745: PUSH
32746: LD_INT 5
32748: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
32749: LD_ADDR_OWVAR 40
32753: PUSH
32754: LD_INT 29
32756: ST_TO_ADDR
// un := CreateVehicle ;
32757: LD_ADDR_VAR 0 2
32761: PUSH
32762: CALL_OW 45
32766: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32767: LD_VAR 0 2
32771: PPUSH
32772: LD_INT 1
32774: PPUSH
32775: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32779: LD_INT 35
32781: PPUSH
32782: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32786: LD_VAR 0 2
32790: PPUSH
32791: LD_INT 22
32793: PUSH
32794: LD_OWVAR 2
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PPUSH
32803: CALL_OW 69
32807: PPUSH
32808: LD_VAR 0 2
32812: PPUSH
32813: CALL_OW 74
32817: PPUSH
32818: CALL_OW 115
// until IsDead ( un ) ;
32822: LD_VAR 0 2
32826: PPUSH
32827: CALL_OW 301
32831: IFFALSE 32779
// end ;
32833: PPOPN 2
32835: END
// every 0 0$1 trigger StreamModeActive and sStu do
32836: LD_EXP 67
32840: PUSH
32841: LD_EXP 106
32845: AND
32846: IFFALSE 32862
32848: GO 32850
32850: DISABLE
// begin ToLua ( displayStucuk(); ) ;
32851: LD_STRING displayStucuk();
32853: PPUSH
32854: CALL_OW 559
// ResetFog ;
32858: CALL_OW 335
// end ;
32862: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
32863: LD_EXP 67
32867: PUSH
32868: LD_EXP 99
32872: AND
32873: IFFALSE 33014
32875: GO 32877
32877: DISABLE
32878: LD_INT 0
32880: PPUSH
32881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32882: LD_ADDR_VAR 0 2
32886: PUSH
32887: LD_INT 22
32889: PUSH
32890: LD_OWVAR 2
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 21
32901: PUSH
32902: LD_INT 1
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PPUSH
32913: CALL_OW 69
32917: ST_TO_ADDR
// if not tmp then
32918: LD_VAR 0 2
32922: NOT
32923: IFFALSE 32927
// exit ;
32925: GO 33014
// un := tmp [ rand ( 1 , tmp ) ] ;
32927: LD_ADDR_VAR 0 1
32931: PUSH
32932: LD_VAR 0 2
32936: PUSH
32937: LD_INT 1
32939: PPUSH
32940: LD_VAR 0 2
32944: PPUSH
32945: CALL_OW 12
32949: ARRAY
32950: ST_TO_ADDR
// SetSide ( un , 0 ) ;
32951: LD_VAR 0 1
32955: PPUSH
32956: LD_INT 0
32958: PPUSH
32959: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
32963: LD_VAR 0 1
32967: PPUSH
32968: LD_OWVAR 3
32972: PUSH
32973: LD_VAR 0 1
32977: DIFF
32978: PPUSH
32979: LD_VAR 0 1
32983: PPUSH
32984: CALL_OW 74
32988: PPUSH
32989: CALL_OW 115
// wait ( 0 0$20 ) ;
32993: LD_INT 700
32995: PPUSH
32996: CALL_OW 67
// SetSide ( un , your_side ) ;
33000: LD_VAR 0 1
33004: PPUSH
33005: LD_OWVAR 2
33009: PPUSH
33010: CALL_OW 235
// end ;
33014: PPOPN 2
33016: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
33017: LD_EXP 67
33021: PUSH
33022: LD_EXP 100
33026: AND
33027: IFFALSE 33133
33029: GO 33031
33031: DISABLE
33032: LD_INT 0
33034: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33035: LD_ADDR_VAR 0 1
33039: PUSH
33040: LD_INT 22
33042: PUSH
33043: LD_OWVAR 2
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 2
33054: PUSH
33055: LD_INT 30
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 30
33067: PUSH
33068: LD_INT 1
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: LIST
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PPUSH
33084: CALL_OW 69
33088: ST_TO_ADDR
// if not depot then
33089: LD_VAR 0 1
33093: NOT
33094: IFFALSE 33098
// exit ;
33096: GO 33133
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
33098: LD_VAR 0 1
33102: PUSH
33103: LD_INT 1
33105: ARRAY
33106: PPUSH
33107: CALL_OW 250
33111: PPUSH
33112: LD_VAR 0 1
33116: PUSH
33117: LD_INT 1
33119: ARRAY
33120: PPUSH
33121: CALL_OW 251
33125: PPUSH
33126: LD_INT 70
33128: PPUSH
33129: CALL_OW 495
// end ;
33133: PPOPN 1
33135: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
33136: LD_EXP 67
33140: PUSH
33141: LD_EXP 101
33145: AND
33146: IFFALSE 33357
33148: GO 33150
33150: DISABLE
33151: LD_INT 0
33153: PPUSH
33154: PPUSH
33155: PPUSH
33156: PPUSH
33157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33158: LD_ADDR_VAR 0 5
33162: PUSH
33163: LD_INT 22
33165: PUSH
33166: LD_OWVAR 2
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 21
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PPUSH
33189: CALL_OW 69
33193: ST_TO_ADDR
// if not tmp then
33194: LD_VAR 0 5
33198: NOT
33199: IFFALSE 33203
// exit ;
33201: GO 33357
// for i in tmp do
33203: LD_ADDR_VAR 0 1
33207: PUSH
33208: LD_VAR 0 5
33212: PUSH
33213: FOR_IN
33214: IFFALSE 33355
// begin d := rand ( 0 , 5 ) ;
33216: LD_ADDR_VAR 0 4
33220: PUSH
33221: LD_INT 0
33223: PPUSH
33224: LD_INT 5
33226: PPUSH
33227: CALL_OW 12
33231: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
33232: LD_ADDR_VAR 0 2
33236: PUSH
33237: LD_VAR 0 1
33241: PPUSH
33242: CALL_OW 250
33246: PPUSH
33247: LD_VAR 0 4
33251: PPUSH
33252: LD_INT 3
33254: PPUSH
33255: LD_INT 12
33257: PPUSH
33258: CALL_OW 12
33262: PPUSH
33263: CALL_OW 272
33267: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
33268: LD_ADDR_VAR 0 3
33272: PUSH
33273: LD_VAR 0 1
33277: PPUSH
33278: CALL_OW 251
33282: PPUSH
33283: LD_VAR 0 4
33287: PPUSH
33288: LD_INT 3
33290: PPUSH
33291: LD_INT 12
33293: PPUSH
33294: CALL_OW 12
33298: PPUSH
33299: CALL_OW 273
33303: ST_TO_ADDR
// if ValidHex ( x , y ) then
33304: LD_VAR 0 2
33308: PPUSH
33309: LD_VAR 0 3
33313: PPUSH
33314: CALL_OW 488
33318: IFFALSE 33353
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
33320: LD_VAR 0 1
33324: PPUSH
33325: LD_VAR 0 2
33329: PPUSH
33330: LD_VAR 0 3
33334: PPUSH
33335: LD_INT 3
33337: PPUSH
33338: LD_INT 6
33340: PPUSH
33341: CALL_OW 12
33345: PPUSH
33346: LD_INT 1
33348: PPUSH
33349: CALL_OW 483
// end ;
33353: GO 33213
33355: POP
33356: POP
// end ;
33357: PPOPN 5
33359: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
33360: LD_EXP 67
33364: PUSH
33365: LD_EXP 102
33369: AND
33370: IFFALSE 33464
33372: GO 33374
33374: DISABLE
33375: LD_INT 0
33377: PPUSH
33378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
33379: LD_ADDR_VAR 0 2
33383: PUSH
33384: LD_INT 22
33386: PUSH
33387: LD_OWVAR 2
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 32
33398: PUSH
33399: LD_INT 1
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 21
33408: PUSH
33409: LD_INT 2
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: LIST
33420: PPUSH
33421: CALL_OW 69
33425: ST_TO_ADDR
// if not tmp then
33426: LD_VAR 0 2
33430: NOT
33431: IFFALSE 33435
// exit ;
33433: GO 33464
// for i in tmp do
33435: LD_ADDR_VAR 0 1
33439: PUSH
33440: LD_VAR 0 2
33444: PUSH
33445: FOR_IN
33446: IFFALSE 33462
// SetFuel ( i , 0 ) ;
33448: LD_VAR 0 1
33452: PPUSH
33453: LD_INT 0
33455: PPUSH
33456: CALL_OW 240
33460: GO 33445
33462: POP
33463: POP
// end ;
33464: PPOPN 2
33466: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
33467: LD_EXP 67
33471: PUSH
33472: LD_EXP 103
33476: AND
33477: IFFALSE 33543
33479: GO 33481
33481: DISABLE
33482: LD_INT 0
33484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33485: LD_ADDR_VAR 0 1
33489: PUSH
33490: LD_INT 22
33492: PUSH
33493: LD_OWVAR 2
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 30
33504: PUSH
33505: LD_INT 29
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PPUSH
33516: CALL_OW 69
33520: ST_TO_ADDR
// if not tmp then
33521: LD_VAR 0 1
33525: NOT
33526: IFFALSE 33530
// exit ;
33528: GO 33543
// DestroyUnit ( tmp [ 1 ] ) ;
33530: LD_VAR 0 1
33534: PUSH
33535: LD_INT 1
33537: ARRAY
33538: PPUSH
33539: CALL_OW 65
// end ;
33543: PPOPN 1
33545: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33546: LD_EXP 67
33550: PUSH
33551: LD_EXP 105
33555: AND
33556: IFFALSE 33685
33558: GO 33560
33560: DISABLE
33561: LD_INT 0
33563: PPUSH
// begin uc_side := 0 ;
33564: LD_ADDR_OWVAR 20
33568: PUSH
33569: LD_INT 0
33571: ST_TO_ADDR
// uc_nation := nation_arabian ;
33572: LD_ADDR_OWVAR 21
33576: PUSH
33577: LD_INT 2
33579: ST_TO_ADDR
// hc_gallery :=  ;
33580: LD_ADDR_OWVAR 33
33584: PUSH
33585: LD_STRING 
33587: ST_TO_ADDR
// hc_name :=  ;
33588: LD_ADDR_OWVAR 26
33592: PUSH
33593: LD_STRING 
33595: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
33596: LD_INT 1
33598: PPUSH
33599: LD_INT 11
33601: PPUSH
33602: LD_INT 10
33604: PPUSH
33605: CALL_OW 380
// un := CreateHuman ;
33609: LD_ADDR_VAR 0 1
33613: PUSH
33614: CALL_OW 44
33618: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33619: LD_VAR 0 1
33623: PPUSH
33624: LD_INT 1
33626: PPUSH
33627: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33631: LD_INT 35
33633: PPUSH
33634: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33638: LD_VAR 0 1
33642: PPUSH
33643: LD_INT 22
33645: PUSH
33646: LD_OWVAR 2
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PPUSH
33655: CALL_OW 69
33659: PPUSH
33660: LD_VAR 0 1
33664: PPUSH
33665: CALL_OW 74
33669: PPUSH
33670: CALL_OW 115
// until IsDead ( un ) ;
33674: LD_VAR 0 1
33678: PPUSH
33679: CALL_OW 301
33683: IFFALSE 33631
// end ;
33685: PPOPN 1
33687: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
33688: LD_EXP 67
33692: PUSH
33693: LD_EXP 107
33697: AND
33698: IFFALSE 33710
33700: GO 33702
33702: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
33703: LD_STRING earthquake(getX(game), 0, 32)
33705: PPUSH
33706: CALL_OW 559
33710: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
33711: LD_EXP 67
33715: PUSH
33716: LD_EXP 108
33720: AND
33721: IFFALSE 33812
33723: GO 33725
33725: DISABLE
33726: LD_INT 0
33728: PPUSH
// begin enable ;
33729: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
33730: LD_ADDR_VAR 0 1
33734: PUSH
33735: LD_INT 22
33737: PUSH
33738: LD_OWVAR 2
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 21
33749: PUSH
33750: LD_INT 2
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 33
33759: PUSH
33760: LD_INT 3
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: LIST
33771: PPUSH
33772: CALL_OW 69
33776: ST_TO_ADDR
// if not tmp then
33777: LD_VAR 0 1
33781: NOT
33782: IFFALSE 33786
// exit ;
33784: GO 33812
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33786: LD_VAR 0 1
33790: PUSH
33791: LD_INT 1
33793: PPUSH
33794: LD_VAR 0 1
33798: PPUSH
33799: CALL_OW 12
33803: ARRAY
33804: PPUSH
33805: LD_INT 1
33807: PPUSH
33808: CALL_OW 234
// end ;
33812: PPOPN 1
33814: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
33815: LD_EXP 67
33819: PUSH
33820: LD_EXP 109
33824: AND
33825: IFFALSE 33966
33827: GO 33829
33829: DISABLE
33830: LD_INT 0
33832: PPUSH
33833: PPUSH
33834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33835: LD_ADDR_VAR 0 3
33839: PUSH
33840: LD_INT 22
33842: PUSH
33843: LD_OWVAR 2
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 25
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PPUSH
33866: CALL_OW 69
33870: ST_TO_ADDR
// if not tmp then
33871: LD_VAR 0 3
33875: NOT
33876: IFFALSE 33880
// exit ;
33878: GO 33966
// un := tmp [ rand ( 1 , tmp ) ] ;
33880: LD_ADDR_VAR 0 2
33884: PUSH
33885: LD_VAR 0 3
33889: PUSH
33890: LD_INT 1
33892: PPUSH
33893: LD_VAR 0 3
33897: PPUSH
33898: CALL_OW 12
33902: ARRAY
33903: ST_TO_ADDR
// if Crawls ( un ) then
33904: LD_VAR 0 2
33908: PPUSH
33909: CALL_OW 318
33913: IFFALSE 33924
// ComWalk ( un ) ;
33915: LD_VAR 0 2
33919: PPUSH
33920: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
33924: LD_VAR 0 2
33928: PPUSH
33929: LD_INT 9
33931: PPUSH
33932: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
33936: LD_INT 28
33938: PPUSH
33939: LD_OWVAR 2
33943: PPUSH
33944: LD_INT 2
33946: PPUSH
33947: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
33951: LD_INT 29
33953: PPUSH
33954: LD_OWVAR 2
33958: PPUSH
33959: LD_INT 2
33961: PPUSH
33962: CALL_OW 322
// end ;
33966: PPOPN 3
33968: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
33969: LD_EXP 67
33973: PUSH
33974: LD_EXP 110
33978: AND
33979: IFFALSE 34090
33981: GO 33983
33983: DISABLE
33984: LD_INT 0
33986: PPUSH
33987: PPUSH
33988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33989: LD_ADDR_VAR 0 3
33993: PUSH
33994: LD_INT 22
33996: PUSH
33997: LD_OWVAR 2
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 25
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PPUSH
34020: CALL_OW 69
34024: ST_TO_ADDR
// if not tmp then
34025: LD_VAR 0 3
34029: NOT
34030: IFFALSE 34034
// exit ;
34032: GO 34090
// un := tmp [ rand ( 1 , tmp ) ] ;
34034: LD_ADDR_VAR 0 2
34038: PUSH
34039: LD_VAR 0 3
34043: PUSH
34044: LD_INT 1
34046: PPUSH
34047: LD_VAR 0 3
34051: PPUSH
34052: CALL_OW 12
34056: ARRAY
34057: ST_TO_ADDR
// if Crawls ( un ) then
34058: LD_VAR 0 2
34062: PPUSH
34063: CALL_OW 318
34067: IFFALSE 34078
// ComWalk ( un ) ;
34069: LD_VAR 0 2
34073: PPUSH
34074: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34078: LD_VAR 0 2
34082: PPUSH
34083: LD_INT 8
34085: PPUSH
34086: CALL_OW 336
// end ;
34090: PPOPN 3
34092: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
34093: LD_EXP 67
34097: PUSH
34098: LD_EXP 111
34102: AND
34103: IFFALSE 34247
34105: GO 34107
34107: DISABLE
34108: LD_INT 0
34110: PPUSH
34111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
34112: LD_ADDR_VAR 0 2
34116: PUSH
34117: LD_INT 22
34119: PUSH
34120: LD_OWVAR 2
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 21
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: LD_INT 34
34144: PUSH
34145: LD_INT 12
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 34
34154: PUSH
34155: LD_INT 51
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 34
34164: PUSH
34165: LD_INT 32
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: LIST
34182: PPUSH
34183: CALL_OW 69
34187: ST_TO_ADDR
// if not tmp then
34188: LD_VAR 0 2
34192: NOT
34193: IFFALSE 34197
// exit ;
34195: GO 34247
// for i in tmp do
34197: LD_ADDR_VAR 0 1
34201: PUSH
34202: LD_VAR 0 2
34206: PUSH
34207: FOR_IN
34208: IFFALSE 34245
// if GetCargo ( i , mat_artifact ) = 0 then
34210: LD_VAR 0 1
34214: PPUSH
34215: LD_INT 4
34217: PPUSH
34218: CALL_OW 289
34222: PUSH
34223: LD_INT 0
34225: EQUAL
34226: IFFALSE 34243
// SetCargo ( i , mat_siberit , 100 ) ;
34228: LD_VAR 0 1
34232: PPUSH
34233: LD_INT 3
34235: PPUSH
34236: LD_INT 100
34238: PPUSH
34239: CALL_OW 290
34243: GO 34207
34245: POP
34246: POP
// end ;
34247: PPOPN 2
34249: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
34250: LD_EXP 67
34254: PUSH
34255: LD_EXP 112
34259: AND
34260: IFFALSE 34443
34262: GO 34264
34264: DISABLE
34265: LD_INT 0
34267: PPUSH
34268: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34269: LD_ADDR_VAR 0 2
34273: PUSH
34274: LD_INT 22
34276: PUSH
34277: LD_OWVAR 2
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PPUSH
34286: CALL_OW 69
34290: ST_TO_ADDR
// if not tmp then
34291: LD_VAR 0 2
34295: NOT
34296: IFFALSE 34300
// exit ;
34298: GO 34443
// for i := 1 to 2 do
34300: LD_ADDR_VAR 0 1
34304: PUSH
34305: DOUBLE
34306: LD_INT 1
34308: DEC
34309: ST_TO_ADDR
34310: LD_INT 2
34312: PUSH
34313: FOR_TO
34314: IFFALSE 34441
// begin uc_side := your_side ;
34316: LD_ADDR_OWVAR 20
34320: PUSH
34321: LD_OWVAR 2
34325: ST_TO_ADDR
// uc_nation := nation_american ;
34326: LD_ADDR_OWVAR 21
34330: PUSH
34331: LD_INT 1
34333: ST_TO_ADDR
// vc_chassis := us_morphling ;
34334: LD_ADDR_OWVAR 37
34338: PUSH
34339: LD_INT 5
34341: ST_TO_ADDR
// vc_engine := engine_siberite ;
34342: LD_ADDR_OWVAR 39
34346: PUSH
34347: LD_INT 3
34349: ST_TO_ADDR
// vc_control := control_computer ;
34350: LD_ADDR_OWVAR 38
34354: PUSH
34355: LD_INT 3
34357: ST_TO_ADDR
// vc_weapon := us_double_laser ;
34358: LD_ADDR_OWVAR 40
34362: PUSH
34363: LD_INT 10
34365: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
34366: LD_VAR 0 2
34370: PUSH
34371: LD_INT 1
34373: ARRAY
34374: PPUSH
34375: CALL_OW 310
34379: NOT
34380: IFFALSE 34427
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
34382: CALL_OW 45
34386: PPUSH
34387: LD_VAR 0 2
34391: PUSH
34392: LD_INT 1
34394: ARRAY
34395: PPUSH
34396: CALL_OW 250
34400: PPUSH
34401: LD_VAR 0 2
34405: PUSH
34406: LD_INT 1
34408: ARRAY
34409: PPUSH
34410: CALL_OW 251
34414: PPUSH
34415: LD_INT 12
34417: PPUSH
34418: LD_INT 1
34420: PPUSH
34421: CALL_OW 50
34425: GO 34439
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
34427: CALL_OW 45
34431: PPUSH
34432: LD_INT 1
34434: PPUSH
34435: CALL_OW 51
// end ;
34439: GO 34313
34441: POP
34442: POP
// end ;
34443: PPOPN 2
34445: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
34446: LD_EXP 67
34450: PUSH
34451: LD_EXP 113
34455: AND
34456: IFFALSE 34678
34458: GO 34460
34460: DISABLE
34461: LD_INT 0
34463: PPUSH
34464: PPUSH
34465: PPUSH
34466: PPUSH
34467: PPUSH
34468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34469: LD_ADDR_VAR 0 6
34473: PUSH
34474: LD_INT 22
34476: PUSH
34477: LD_OWVAR 2
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 21
34488: PUSH
34489: LD_INT 1
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 3
34498: PUSH
34499: LD_INT 23
34501: PUSH
34502: LD_INT 0
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: LIST
34517: PPUSH
34518: CALL_OW 69
34522: ST_TO_ADDR
// if not tmp then
34523: LD_VAR 0 6
34527: NOT
34528: IFFALSE 34532
// exit ;
34530: GO 34678
// s1 := rand ( 1 , 4 ) ;
34532: LD_ADDR_VAR 0 2
34536: PUSH
34537: LD_INT 1
34539: PPUSH
34540: LD_INT 4
34542: PPUSH
34543: CALL_OW 12
34547: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34548: LD_ADDR_VAR 0 4
34552: PUSH
34553: LD_VAR 0 6
34557: PUSH
34558: LD_INT 1
34560: ARRAY
34561: PPUSH
34562: LD_VAR 0 2
34566: PPUSH
34567: CALL_OW 259
34571: ST_TO_ADDR
// if s1 = 1 then
34572: LD_VAR 0 2
34576: PUSH
34577: LD_INT 1
34579: EQUAL
34580: IFFALSE 34600
// s2 := rand ( 2 , 4 ) else
34582: LD_ADDR_VAR 0 3
34586: PUSH
34587: LD_INT 2
34589: PPUSH
34590: LD_INT 4
34592: PPUSH
34593: CALL_OW 12
34597: ST_TO_ADDR
34598: GO 34608
// s2 := 1 ;
34600: LD_ADDR_VAR 0 3
34604: PUSH
34605: LD_INT 1
34607: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
34608: LD_ADDR_VAR 0 5
34612: PUSH
34613: LD_VAR 0 6
34617: PUSH
34618: LD_INT 1
34620: ARRAY
34621: PPUSH
34622: LD_VAR 0 3
34626: PPUSH
34627: CALL_OW 259
34631: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
34632: LD_VAR 0 6
34636: PUSH
34637: LD_INT 1
34639: ARRAY
34640: PPUSH
34641: LD_VAR 0 2
34645: PPUSH
34646: LD_VAR 0 5
34650: PPUSH
34651: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
34655: LD_VAR 0 6
34659: PUSH
34660: LD_INT 1
34662: ARRAY
34663: PPUSH
34664: LD_VAR 0 3
34668: PPUSH
34669: LD_VAR 0 4
34673: PPUSH
34674: CALL_OW 237
// end ;
34678: PPOPN 6
34680: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
34681: LD_EXP 67
34685: PUSH
34686: LD_EXP 114
34690: AND
34691: IFFALSE 34770
34693: GO 34695
34695: DISABLE
34696: LD_INT 0
34698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
34699: LD_ADDR_VAR 0 1
34703: PUSH
34704: LD_INT 22
34706: PUSH
34707: LD_OWVAR 2
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 30
34718: PUSH
34719: LD_INT 3
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PPUSH
34730: CALL_OW 69
34734: ST_TO_ADDR
// if not tmp then
34735: LD_VAR 0 1
34739: NOT
34740: IFFALSE 34744
// exit ;
34742: GO 34770
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34744: LD_VAR 0 1
34748: PUSH
34749: LD_INT 1
34751: PPUSH
34752: LD_VAR 0 1
34756: PPUSH
34757: CALL_OW 12
34761: ARRAY
34762: PPUSH
34763: LD_INT 1
34765: PPUSH
34766: CALL_OW 234
// end ;
34770: PPOPN 1
34772: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
34773: LD_EXP 67
34777: PUSH
34778: LD_EXP 115
34782: AND
34783: IFFALSE 34895
34785: GO 34787
34787: DISABLE
34788: LD_INT 0
34790: PPUSH
34791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
34792: LD_ADDR_VAR 0 2
34796: PUSH
34797: LD_INT 22
34799: PUSH
34800: LD_OWVAR 2
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 2
34811: PUSH
34812: LD_INT 30
34814: PUSH
34815: LD_INT 27
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 30
34824: PUSH
34825: LD_INT 26
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 30
34834: PUSH
34835: LD_INT 28
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PPUSH
34852: CALL_OW 69
34856: ST_TO_ADDR
// if not tmp then
34857: LD_VAR 0 2
34861: NOT
34862: IFFALSE 34866
// exit ;
34864: GO 34895
// for i in tmp do
34866: LD_ADDR_VAR 0 1
34870: PUSH
34871: LD_VAR 0 2
34875: PUSH
34876: FOR_IN
34877: IFFALSE 34893
// SetLives ( i , 1 ) ;
34879: LD_VAR 0 1
34883: PPUSH
34884: LD_INT 1
34886: PPUSH
34887: CALL_OW 234
34891: GO 34876
34893: POP
34894: POP
// end ;
34895: PPOPN 2
34897: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
34898: LD_EXP 67
34902: PUSH
34903: LD_EXP 116
34907: AND
34908: IFFALSE 35182
34910: GO 34912
34912: DISABLE
34913: LD_INT 0
34915: PPUSH
34916: PPUSH
34917: PPUSH
// begin i := rand ( 1 , 7 ) ;
34918: LD_ADDR_VAR 0 1
34922: PUSH
34923: LD_INT 1
34925: PPUSH
34926: LD_INT 7
34928: PPUSH
34929: CALL_OW 12
34933: ST_TO_ADDR
// case i of 1 :
34934: LD_VAR 0 1
34938: PUSH
34939: LD_INT 1
34941: DOUBLE
34942: EQUAL
34943: IFTRUE 34947
34945: GO 34957
34947: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
34948: LD_STRING earthquake(getX(game), 0, 32)
34950: PPUSH
34951: CALL_OW 559
34955: GO 35182
34957: LD_INT 2
34959: DOUBLE
34960: EQUAL
34961: IFTRUE 34965
34963: GO 34979
34965: POP
// begin ToLua ( displayStucuk(); ) ;
34966: LD_STRING displayStucuk();
34968: PPUSH
34969: CALL_OW 559
// ResetFog ;
34973: CALL_OW 335
// end ; 3 :
34977: GO 35182
34979: LD_INT 3
34981: DOUBLE
34982: EQUAL
34983: IFTRUE 34987
34985: GO 35091
34987: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34988: LD_ADDR_VAR 0 2
34992: PUSH
34993: LD_INT 22
34995: PUSH
34996: LD_OWVAR 2
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 25
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PPUSH
35019: CALL_OW 69
35023: ST_TO_ADDR
// if not tmp then
35024: LD_VAR 0 2
35028: NOT
35029: IFFALSE 35033
// exit ;
35031: GO 35182
// un := tmp [ rand ( 1 , tmp ) ] ;
35033: LD_ADDR_VAR 0 3
35037: PUSH
35038: LD_VAR 0 2
35042: PUSH
35043: LD_INT 1
35045: PPUSH
35046: LD_VAR 0 2
35050: PPUSH
35051: CALL_OW 12
35055: ARRAY
35056: ST_TO_ADDR
// if Crawls ( un ) then
35057: LD_VAR 0 3
35061: PPUSH
35062: CALL_OW 318
35066: IFFALSE 35077
// ComWalk ( un ) ;
35068: LD_VAR 0 3
35072: PPUSH
35073: CALL_OW 138
// SetClass ( un , class_mortar ) ;
35077: LD_VAR 0 3
35081: PPUSH
35082: LD_INT 8
35084: PPUSH
35085: CALL_OW 336
// end ; 4 :
35089: GO 35182
35091: LD_INT 4
35093: DOUBLE
35094: EQUAL
35095: IFTRUE 35099
35097: GO 35160
35099: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
35100: LD_ADDR_VAR 0 2
35104: PUSH
35105: LD_INT 22
35107: PUSH
35108: LD_OWVAR 2
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 30
35119: PUSH
35120: LD_INT 29
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PPUSH
35131: CALL_OW 69
35135: ST_TO_ADDR
// if not tmp then
35136: LD_VAR 0 2
35140: NOT
35141: IFFALSE 35145
// exit ;
35143: GO 35182
// DestroyUnit ( tmp [ 1 ] ) ;
35145: LD_VAR 0 2
35149: PUSH
35150: LD_INT 1
35152: ARRAY
35153: PPUSH
35154: CALL_OW 65
// end ; 5 .. 7 :
35158: GO 35182
35160: LD_INT 5
35162: DOUBLE
35163: GREATEREQUAL
35164: IFFALSE 35172
35166: LD_INT 7
35168: DOUBLE
35169: LESSEQUAL
35170: IFTRUE 35174
35172: GO 35181
35174: POP
// StreamSibBomb ; end ;
35175: CALL 31432 0 0
35179: GO 35182
35181: POP
// end ;
35182: PPOPN 3
35184: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
35185: LD_EXP 67
35189: PUSH
35190: LD_EXP 117
35194: AND
35195: IFFALSE 35351
35197: GO 35199
35199: DISABLE
35200: LD_INT 0
35202: PPUSH
35203: PPUSH
35204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
35205: LD_ADDR_VAR 0 2
35209: PUSH
35210: LD_INT 81
35212: PUSH
35213: LD_OWVAR 2
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 2
35224: PUSH
35225: LD_INT 21
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 21
35237: PUSH
35238: LD_INT 2
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: LIST
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PPUSH
35254: CALL_OW 69
35258: ST_TO_ADDR
// if not tmp then
35259: LD_VAR 0 2
35263: NOT
35264: IFFALSE 35268
// exit ;
35266: GO 35351
// p := 0 ;
35268: LD_ADDR_VAR 0 3
35272: PUSH
35273: LD_INT 0
35275: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35276: LD_INT 35
35278: PPUSH
35279: CALL_OW 67
// p := p + 1 ;
35283: LD_ADDR_VAR 0 3
35287: PUSH
35288: LD_VAR 0 3
35292: PUSH
35293: LD_INT 1
35295: PLUS
35296: ST_TO_ADDR
// for i in tmp do
35297: LD_ADDR_VAR 0 1
35301: PUSH
35302: LD_VAR 0 2
35306: PUSH
35307: FOR_IN
35308: IFFALSE 35339
// if GetLives ( i ) < 1000 then
35310: LD_VAR 0 1
35314: PPUSH
35315: CALL_OW 256
35319: PUSH
35320: LD_INT 1000
35322: LESS
35323: IFFALSE 35337
// SetLives ( i , 1000 ) ;
35325: LD_VAR 0 1
35329: PPUSH
35330: LD_INT 1000
35332: PPUSH
35333: CALL_OW 234
35337: GO 35307
35339: POP
35340: POP
// until p > 20 ;
35341: LD_VAR 0 3
35345: PUSH
35346: LD_INT 20
35348: GREATER
35349: IFFALSE 35276
// end ;
35351: PPOPN 3
35353: END
// every 0 0$1 trigger StreamModeActive and sTime do
35354: LD_EXP 67
35358: PUSH
35359: LD_EXP 118
35363: AND
35364: IFFALSE 35399
35366: GO 35368
35368: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
35369: LD_INT 28
35371: PPUSH
35372: LD_OWVAR 2
35376: PPUSH
35377: LD_INT 2
35379: PPUSH
35380: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
35384: LD_INT 30
35386: PPUSH
35387: LD_OWVAR 2
35391: PPUSH
35392: LD_INT 2
35394: PPUSH
35395: CALL_OW 322
// end ;
35399: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
35400: LD_EXP 67
35404: PUSH
35405: LD_EXP 119
35409: AND
35410: IFFALSE 35531
35412: GO 35414
35414: DISABLE
35415: LD_INT 0
35417: PPUSH
35418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35419: LD_ADDR_VAR 0 2
35423: PUSH
35424: LD_INT 22
35426: PUSH
35427: LD_OWVAR 2
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 21
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 3
35448: PUSH
35449: LD_INT 23
35451: PUSH
35452: LD_INT 0
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: LIST
35467: PPUSH
35468: CALL_OW 69
35472: ST_TO_ADDR
// if not tmp then
35473: LD_VAR 0 2
35477: NOT
35478: IFFALSE 35482
// exit ;
35480: GO 35531
// for i in tmp do
35482: LD_ADDR_VAR 0 1
35486: PUSH
35487: LD_VAR 0 2
35491: PUSH
35492: FOR_IN
35493: IFFALSE 35529
// begin if Crawls ( i ) then
35495: LD_VAR 0 1
35499: PPUSH
35500: CALL_OW 318
35504: IFFALSE 35515
// ComWalk ( i ) ;
35506: LD_VAR 0 1
35510: PPUSH
35511: CALL_OW 138
// SetClass ( i , 2 ) ;
35515: LD_VAR 0 1
35519: PPUSH
35520: LD_INT 2
35522: PPUSH
35523: CALL_OW 336
// end ;
35527: GO 35492
35529: POP
35530: POP
// end ;
35531: PPOPN 2
35533: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35534: LD_EXP 67
35538: PUSH
35539: LD_EXP 120
35543: AND
35544: IFFALSE 35825
35546: GO 35548
35548: DISABLE
35549: LD_INT 0
35551: PPUSH
35552: PPUSH
35553: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35554: LD_OWVAR 2
35558: PPUSH
35559: LD_INT 9
35561: PPUSH
35562: LD_INT 1
35564: PPUSH
35565: LD_INT 1
35567: PPUSH
35568: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
35572: LD_INT 9
35574: PPUSH
35575: LD_OWVAR 2
35579: PPUSH
35580: CALL_OW 343
// uc_side := 9 ;
35584: LD_ADDR_OWVAR 20
35588: PUSH
35589: LD_INT 9
35591: ST_TO_ADDR
// uc_nation := 2 ;
35592: LD_ADDR_OWVAR 21
35596: PUSH
35597: LD_INT 2
35599: ST_TO_ADDR
// hc_name := Dark Warrior ;
35600: LD_ADDR_OWVAR 26
35604: PUSH
35605: LD_STRING Dark Warrior
35607: ST_TO_ADDR
// hc_gallery :=  ;
35608: LD_ADDR_OWVAR 33
35612: PUSH
35613: LD_STRING 
35615: ST_TO_ADDR
// hc_noskilllimit := true ;
35616: LD_ADDR_OWVAR 76
35620: PUSH
35621: LD_INT 1
35623: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
35624: LD_ADDR_OWVAR 31
35628: PUSH
35629: LD_INT 30
35631: PUSH
35632: LD_INT 30
35634: PUSH
35635: LD_INT 30
35637: PUSH
35638: LD_INT 30
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: ST_TO_ADDR
// un := CreateHuman ;
35647: LD_ADDR_VAR 0 3
35651: PUSH
35652: CALL_OW 44
35656: ST_TO_ADDR
// hc_noskilllimit := false ;
35657: LD_ADDR_OWVAR 76
35661: PUSH
35662: LD_INT 0
35664: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35665: LD_VAR 0 3
35669: PPUSH
35670: LD_INT 1
35672: PPUSH
35673: CALL_OW 51
// p := 0 ;
35677: LD_ADDR_VAR 0 2
35681: PUSH
35682: LD_INT 0
35684: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35685: LD_INT 35
35687: PPUSH
35688: CALL_OW 67
// p := p + 1 ;
35692: LD_ADDR_VAR 0 2
35696: PUSH
35697: LD_VAR 0 2
35701: PUSH
35702: LD_INT 1
35704: PLUS
35705: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
35706: LD_VAR 0 3
35710: PPUSH
35711: CALL_OW 256
35715: PUSH
35716: LD_INT 1000
35718: LESS
35719: IFFALSE 35733
// SetLives ( un , 1000 ) ;
35721: LD_VAR 0 3
35725: PPUSH
35726: LD_INT 1000
35728: PPUSH
35729: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
35733: LD_VAR 0 3
35737: PPUSH
35738: LD_INT 81
35740: PUSH
35741: LD_OWVAR 2
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 91
35752: PUSH
35753: LD_VAR 0 3
35757: PUSH
35758: LD_INT 30
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: LIST
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PPUSH
35770: CALL_OW 69
35774: PPUSH
35775: LD_VAR 0 3
35779: PPUSH
35780: CALL_OW 74
35784: PPUSH
35785: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
35789: LD_VAR 0 2
35793: PUSH
35794: LD_INT 60
35796: GREATER
35797: PUSH
35798: LD_VAR 0 3
35802: PPUSH
35803: CALL_OW 301
35807: OR
35808: IFFALSE 35685
// if un then
35810: LD_VAR 0 3
35814: IFFALSE 35825
// RemoveUnit ( un ) ;
35816: LD_VAR 0 3
35820: PPUSH
35821: CALL_OW 64
// end ;
35825: PPOPN 3
35827: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
35828: LD_INT 0
35830: PPUSH
// case cmd of 301 :
35831: LD_VAR 0 1
35835: PUSH
35836: LD_INT 301
35838: DOUBLE
35839: EQUAL
35840: IFTRUE 35844
35842: GO 35876
35844: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
35845: LD_VAR 0 6
35849: PPUSH
35850: LD_VAR 0 7
35854: PPUSH
35855: LD_VAR 0 8
35859: PPUSH
35860: LD_VAR 0 4
35864: PPUSH
35865: LD_VAR 0 5
35869: PPUSH
35870: CALL 37077 0 5
35874: GO 35997
35876: LD_INT 302
35878: DOUBLE
35879: EQUAL
35880: IFTRUE 35884
35882: GO 35921
35884: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
35885: LD_VAR 0 6
35889: PPUSH
35890: LD_VAR 0 7
35894: PPUSH
35895: LD_VAR 0 8
35899: PPUSH
35900: LD_VAR 0 9
35904: PPUSH
35905: LD_VAR 0 4
35909: PPUSH
35910: LD_VAR 0 5
35914: PPUSH
35915: CALL 37168 0 6
35919: GO 35997
35921: LD_INT 303
35923: DOUBLE
35924: EQUAL
35925: IFTRUE 35929
35927: GO 35966
35929: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
35930: LD_VAR 0 6
35934: PPUSH
35935: LD_VAR 0 7
35939: PPUSH
35940: LD_VAR 0 8
35944: PPUSH
35945: LD_VAR 0 9
35949: PPUSH
35950: LD_VAR 0 4
35954: PPUSH
35955: LD_VAR 0 5
35959: PPUSH
35960: CALL 36002 0 6
35964: GO 35997
35966: LD_INT 304
35968: DOUBLE
35969: EQUAL
35970: IFTRUE 35974
35972: GO 35996
35974: POP
// hHackTeleport ( unit , x , y ) ; end ;
35975: LD_VAR 0 2
35979: PPUSH
35980: LD_VAR 0 4
35984: PPUSH
35985: LD_VAR 0 5
35989: PPUSH
35990: CALL 37761 0 3
35994: GO 35997
35996: POP
// end ;
35997: LD_VAR 0 12
36001: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
36002: LD_INT 0
36004: PPUSH
36005: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
36006: LD_VAR 0 1
36010: PUSH
36011: LD_INT 1
36013: LESS
36014: PUSH
36015: LD_VAR 0 1
36019: PUSH
36020: LD_INT 3
36022: GREATER
36023: OR
36024: PUSH
36025: LD_VAR 0 5
36029: PPUSH
36030: LD_VAR 0 6
36034: PPUSH
36035: CALL_OW 428
36039: OR
36040: IFFALSE 36044
// exit ;
36042: GO 36764
// uc_side := your_side ;
36044: LD_ADDR_OWVAR 20
36048: PUSH
36049: LD_OWVAR 2
36053: ST_TO_ADDR
// uc_nation := nation ;
36054: LD_ADDR_OWVAR 21
36058: PUSH
36059: LD_VAR 0 1
36063: ST_TO_ADDR
// bc_level = 1 ;
36064: LD_ADDR_OWVAR 43
36068: PUSH
36069: LD_INT 1
36071: ST_TO_ADDR
// case btype of 1 :
36072: LD_VAR 0 2
36076: PUSH
36077: LD_INT 1
36079: DOUBLE
36080: EQUAL
36081: IFTRUE 36085
36083: GO 36096
36085: POP
// bc_type := b_depot ; 2 :
36086: LD_ADDR_OWVAR 42
36090: PUSH
36091: LD_INT 0
36093: ST_TO_ADDR
36094: GO 36708
36096: LD_INT 2
36098: DOUBLE
36099: EQUAL
36100: IFTRUE 36104
36102: GO 36115
36104: POP
// bc_type := b_warehouse ; 3 :
36105: LD_ADDR_OWVAR 42
36109: PUSH
36110: LD_INT 1
36112: ST_TO_ADDR
36113: GO 36708
36115: LD_INT 3
36117: DOUBLE
36118: EQUAL
36119: IFTRUE 36123
36121: GO 36134
36123: POP
// bc_type := b_lab ; 4 .. 9 :
36124: LD_ADDR_OWVAR 42
36128: PUSH
36129: LD_INT 6
36131: ST_TO_ADDR
36132: GO 36708
36134: LD_INT 4
36136: DOUBLE
36137: GREATEREQUAL
36138: IFFALSE 36146
36140: LD_INT 9
36142: DOUBLE
36143: LESSEQUAL
36144: IFTRUE 36148
36146: GO 36200
36148: POP
// begin bc_type := b_lab_half ;
36149: LD_ADDR_OWVAR 42
36153: PUSH
36154: LD_INT 7
36156: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
36157: LD_ADDR_OWVAR 44
36161: PUSH
36162: LD_INT 10
36164: PUSH
36165: LD_INT 11
36167: PUSH
36168: LD_INT 12
36170: PUSH
36171: LD_INT 15
36173: PUSH
36174: LD_INT 14
36176: PUSH
36177: LD_INT 13
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: PUSH
36188: LD_VAR 0 2
36192: PUSH
36193: LD_INT 3
36195: MINUS
36196: ARRAY
36197: ST_TO_ADDR
// end ; 10 .. 13 :
36198: GO 36708
36200: LD_INT 10
36202: DOUBLE
36203: GREATEREQUAL
36204: IFFALSE 36212
36206: LD_INT 13
36208: DOUBLE
36209: LESSEQUAL
36210: IFTRUE 36214
36212: GO 36291
36214: POP
// begin bc_type := b_lab_full ;
36215: LD_ADDR_OWVAR 42
36219: PUSH
36220: LD_INT 8
36222: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
36223: LD_ADDR_OWVAR 44
36227: PUSH
36228: LD_INT 10
36230: PUSH
36231: LD_INT 12
36233: PUSH
36234: LD_INT 14
36236: PUSH
36237: LD_INT 13
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: PUSH
36246: LD_VAR 0 2
36250: PUSH
36251: LD_INT 9
36253: MINUS
36254: ARRAY
36255: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
36256: LD_ADDR_OWVAR 45
36260: PUSH
36261: LD_INT 11
36263: PUSH
36264: LD_INT 15
36266: PUSH
36267: LD_INT 12
36269: PUSH
36270: LD_INT 15
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: PUSH
36279: LD_VAR 0 2
36283: PUSH
36284: LD_INT 9
36286: MINUS
36287: ARRAY
36288: ST_TO_ADDR
// end ; 14 :
36289: GO 36708
36291: LD_INT 14
36293: DOUBLE
36294: EQUAL
36295: IFTRUE 36299
36297: GO 36310
36299: POP
// bc_type := b_workshop ; 15 :
36300: LD_ADDR_OWVAR 42
36304: PUSH
36305: LD_INT 2
36307: ST_TO_ADDR
36308: GO 36708
36310: LD_INT 15
36312: DOUBLE
36313: EQUAL
36314: IFTRUE 36318
36316: GO 36329
36318: POP
// bc_type := b_factory ; 16 :
36319: LD_ADDR_OWVAR 42
36323: PUSH
36324: LD_INT 3
36326: ST_TO_ADDR
36327: GO 36708
36329: LD_INT 16
36331: DOUBLE
36332: EQUAL
36333: IFTRUE 36337
36335: GO 36348
36337: POP
// bc_type := b_ext_gun ; 17 :
36338: LD_ADDR_OWVAR 42
36342: PUSH
36343: LD_INT 17
36345: ST_TO_ADDR
36346: GO 36708
36348: LD_INT 17
36350: DOUBLE
36351: EQUAL
36352: IFTRUE 36356
36354: GO 36384
36356: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
36357: LD_ADDR_OWVAR 42
36361: PUSH
36362: LD_INT 19
36364: PUSH
36365: LD_INT 23
36367: PUSH
36368: LD_INT 19
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: PUSH
36376: LD_VAR 0 1
36380: ARRAY
36381: ST_TO_ADDR
36382: GO 36708
36384: LD_INT 18
36386: DOUBLE
36387: EQUAL
36388: IFTRUE 36392
36390: GO 36403
36392: POP
// bc_type := b_ext_radar ; 19 :
36393: LD_ADDR_OWVAR 42
36397: PUSH
36398: LD_INT 20
36400: ST_TO_ADDR
36401: GO 36708
36403: LD_INT 19
36405: DOUBLE
36406: EQUAL
36407: IFTRUE 36411
36409: GO 36422
36411: POP
// bc_type := b_ext_radio ; 20 :
36412: LD_ADDR_OWVAR 42
36416: PUSH
36417: LD_INT 22
36419: ST_TO_ADDR
36420: GO 36708
36422: LD_INT 20
36424: DOUBLE
36425: EQUAL
36426: IFTRUE 36430
36428: GO 36441
36430: POP
// bc_type := b_ext_siberium ; 21 :
36431: LD_ADDR_OWVAR 42
36435: PUSH
36436: LD_INT 21
36438: ST_TO_ADDR
36439: GO 36708
36441: LD_INT 21
36443: DOUBLE
36444: EQUAL
36445: IFTRUE 36449
36447: GO 36460
36449: POP
// bc_type := b_ext_computer ; 22 :
36450: LD_ADDR_OWVAR 42
36454: PUSH
36455: LD_INT 24
36457: ST_TO_ADDR
36458: GO 36708
36460: LD_INT 22
36462: DOUBLE
36463: EQUAL
36464: IFTRUE 36468
36466: GO 36479
36468: POP
// bc_type := b_ext_track ; 23 :
36469: LD_ADDR_OWVAR 42
36473: PUSH
36474: LD_INT 16
36476: ST_TO_ADDR
36477: GO 36708
36479: LD_INT 23
36481: DOUBLE
36482: EQUAL
36483: IFTRUE 36487
36485: GO 36498
36487: POP
// bc_type := b_ext_laser ; 24 :
36488: LD_ADDR_OWVAR 42
36492: PUSH
36493: LD_INT 25
36495: ST_TO_ADDR
36496: GO 36708
36498: LD_INT 24
36500: DOUBLE
36501: EQUAL
36502: IFTRUE 36506
36504: GO 36517
36506: POP
// bc_type := b_control_tower ; 25 :
36507: LD_ADDR_OWVAR 42
36511: PUSH
36512: LD_INT 36
36514: ST_TO_ADDR
36515: GO 36708
36517: LD_INT 25
36519: DOUBLE
36520: EQUAL
36521: IFTRUE 36525
36523: GO 36536
36525: POP
// bc_type := b_breastwork ; 26 :
36526: LD_ADDR_OWVAR 42
36530: PUSH
36531: LD_INT 31
36533: ST_TO_ADDR
36534: GO 36708
36536: LD_INT 26
36538: DOUBLE
36539: EQUAL
36540: IFTRUE 36544
36542: GO 36555
36544: POP
// bc_type := b_bunker ; 27 :
36545: LD_ADDR_OWVAR 42
36549: PUSH
36550: LD_INT 32
36552: ST_TO_ADDR
36553: GO 36708
36555: LD_INT 27
36557: DOUBLE
36558: EQUAL
36559: IFTRUE 36563
36561: GO 36574
36563: POP
// bc_type := b_turret ; 28 :
36564: LD_ADDR_OWVAR 42
36568: PUSH
36569: LD_INT 33
36571: ST_TO_ADDR
36572: GO 36708
36574: LD_INT 28
36576: DOUBLE
36577: EQUAL
36578: IFTRUE 36582
36580: GO 36593
36582: POP
// bc_type := b_armoury ; 29 :
36583: LD_ADDR_OWVAR 42
36587: PUSH
36588: LD_INT 4
36590: ST_TO_ADDR
36591: GO 36708
36593: LD_INT 29
36595: DOUBLE
36596: EQUAL
36597: IFTRUE 36601
36599: GO 36612
36601: POP
// bc_type := b_barracks ; 30 :
36602: LD_ADDR_OWVAR 42
36606: PUSH
36607: LD_INT 5
36609: ST_TO_ADDR
36610: GO 36708
36612: LD_INT 30
36614: DOUBLE
36615: EQUAL
36616: IFTRUE 36620
36618: GO 36631
36620: POP
// bc_type := b_solar_power ; 31 :
36621: LD_ADDR_OWVAR 42
36625: PUSH
36626: LD_INT 27
36628: ST_TO_ADDR
36629: GO 36708
36631: LD_INT 31
36633: DOUBLE
36634: EQUAL
36635: IFTRUE 36639
36637: GO 36650
36639: POP
// bc_type := b_oil_power ; 32 :
36640: LD_ADDR_OWVAR 42
36644: PUSH
36645: LD_INT 26
36647: ST_TO_ADDR
36648: GO 36708
36650: LD_INT 32
36652: DOUBLE
36653: EQUAL
36654: IFTRUE 36658
36656: GO 36669
36658: POP
// bc_type := b_siberite_power ; 33 :
36659: LD_ADDR_OWVAR 42
36663: PUSH
36664: LD_INT 28
36666: ST_TO_ADDR
36667: GO 36708
36669: LD_INT 33
36671: DOUBLE
36672: EQUAL
36673: IFTRUE 36677
36675: GO 36688
36677: POP
// bc_type := b_oil_mine ; 34 :
36678: LD_ADDR_OWVAR 42
36682: PUSH
36683: LD_INT 29
36685: ST_TO_ADDR
36686: GO 36708
36688: LD_INT 34
36690: DOUBLE
36691: EQUAL
36692: IFTRUE 36696
36694: GO 36707
36696: POP
// bc_type := b_siberite_mine ; end ;
36697: LD_ADDR_OWVAR 42
36701: PUSH
36702: LD_INT 30
36704: ST_TO_ADDR
36705: GO 36708
36707: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
36708: LD_ADDR_VAR 0 8
36712: PUSH
36713: LD_VAR 0 5
36717: PPUSH
36718: LD_VAR 0 6
36722: PPUSH
36723: LD_VAR 0 3
36727: PPUSH
36728: CALL_OW 47
36732: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
36733: LD_OWVAR 42
36737: PUSH
36738: LD_INT 32
36740: PUSH
36741: LD_INT 33
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: IN
36748: IFFALSE 36764
// PlaceWeaponTurret ( b , weapon ) ;
36750: LD_VAR 0 8
36754: PPUSH
36755: LD_VAR 0 4
36759: PPUSH
36760: CALL_OW 431
// end ;
36764: LD_VAR 0 7
36768: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
36769: LD_INT 0
36771: PPUSH
36772: PPUSH
36773: PPUSH
36774: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36775: LD_ADDR_VAR 0 4
36779: PUSH
36780: LD_INT 22
36782: PUSH
36783: LD_OWVAR 2
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 2
36794: PUSH
36795: LD_INT 30
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 30
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: LIST
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PPUSH
36824: CALL_OW 69
36828: ST_TO_ADDR
// if not tmp then
36829: LD_VAR 0 4
36833: NOT
36834: IFFALSE 36838
// exit ;
36836: GO 36897
// for i in tmp do
36838: LD_ADDR_VAR 0 2
36842: PUSH
36843: LD_VAR 0 4
36847: PUSH
36848: FOR_IN
36849: IFFALSE 36895
// for j = 1 to 3 do
36851: LD_ADDR_VAR 0 3
36855: PUSH
36856: DOUBLE
36857: LD_INT 1
36859: DEC
36860: ST_TO_ADDR
36861: LD_INT 3
36863: PUSH
36864: FOR_TO
36865: IFFALSE 36891
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
36867: LD_VAR 0 2
36871: PPUSH
36872: CALL_OW 274
36876: PPUSH
36877: LD_VAR 0 3
36881: PPUSH
36882: LD_INT 99999
36884: PPUSH
36885: CALL_OW 277
36889: GO 36864
36891: POP
36892: POP
36893: GO 36848
36895: POP
36896: POP
// end ;
36897: LD_VAR 0 1
36901: RET
// export function hHackSetLevel10 ; var i , j ; begin
36902: LD_INT 0
36904: PPUSH
36905: PPUSH
36906: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36907: LD_ADDR_VAR 0 2
36911: PUSH
36912: LD_INT 21
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PPUSH
36922: CALL_OW 69
36926: PUSH
36927: FOR_IN
36928: IFFALSE 36980
// if IsSelected ( i ) then
36930: LD_VAR 0 2
36934: PPUSH
36935: CALL_OW 306
36939: IFFALSE 36978
// begin for j := 1 to 4 do
36941: LD_ADDR_VAR 0 3
36945: PUSH
36946: DOUBLE
36947: LD_INT 1
36949: DEC
36950: ST_TO_ADDR
36951: LD_INT 4
36953: PUSH
36954: FOR_TO
36955: IFFALSE 36976
// SetSkill ( i , j , 10 ) ;
36957: LD_VAR 0 2
36961: PPUSH
36962: LD_VAR 0 3
36966: PPUSH
36967: LD_INT 10
36969: PPUSH
36970: CALL_OW 237
36974: GO 36954
36976: POP
36977: POP
// end ;
36978: GO 36927
36980: POP
36981: POP
// end ;
36982: LD_VAR 0 1
36986: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
36987: LD_INT 0
36989: PPUSH
36990: PPUSH
36991: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
36992: LD_ADDR_VAR 0 2
36996: PUSH
36997: LD_INT 22
36999: PUSH
37000: LD_OWVAR 2
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 21
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PPUSH
37023: CALL_OW 69
37027: PUSH
37028: FOR_IN
37029: IFFALSE 37070
// begin for j := 1 to 4 do
37031: LD_ADDR_VAR 0 3
37035: PUSH
37036: DOUBLE
37037: LD_INT 1
37039: DEC
37040: ST_TO_ADDR
37041: LD_INT 4
37043: PUSH
37044: FOR_TO
37045: IFFALSE 37066
// SetSkill ( i , j , 10 ) ;
37047: LD_VAR 0 2
37051: PPUSH
37052: LD_VAR 0 3
37056: PPUSH
37057: LD_INT 10
37059: PPUSH
37060: CALL_OW 237
37064: GO 37044
37066: POP
37067: POP
// end ;
37068: GO 37028
37070: POP
37071: POP
// end ;
37072: LD_VAR 0 1
37076: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
37077: LD_INT 0
37079: PPUSH
// uc_side := your_side ;
37080: LD_ADDR_OWVAR 20
37084: PUSH
37085: LD_OWVAR 2
37089: ST_TO_ADDR
// uc_nation := nation ;
37090: LD_ADDR_OWVAR 21
37094: PUSH
37095: LD_VAR 0 1
37099: ST_TO_ADDR
// InitHc ;
37100: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
37104: LD_INT 0
37106: PPUSH
37107: LD_VAR 0 2
37111: PPUSH
37112: LD_VAR 0 3
37116: PPUSH
37117: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
37121: LD_VAR 0 4
37125: PPUSH
37126: LD_VAR 0 5
37130: PPUSH
37131: CALL_OW 428
37135: PUSH
37136: LD_INT 0
37138: EQUAL
37139: IFFALSE 37163
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
37141: CALL_OW 44
37145: PPUSH
37146: LD_VAR 0 4
37150: PPUSH
37151: LD_VAR 0 5
37155: PPUSH
37156: LD_INT 1
37158: PPUSH
37159: CALL_OW 48
// end ;
37163: LD_VAR 0 6
37167: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
37168: LD_INT 0
37170: PPUSH
37171: PPUSH
// uc_side := your_side ;
37172: LD_ADDR_OWVAR 20
37176: PUSH
37177: LD_OWVAR 2
37181: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
37182: LD_VAR 0 1
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: LD_INT 2
37192: PUSH
37193: LD_INT 3
37195: PUSH
37196: LD_INT 4
37198: PUSH
37199: LD_INT 5
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: IN
37209: IFFALSE 37221
// uc_nation := nation_american else
37211: LD_ADDR_OWVAR 21
37215: PUSH
37216: LD_INT 1
37218: ST_TO_ADDR
37219: GO 37264
// if chassis in [ 11 , 12 , 13 , 14 ] then
37221: LD_VAR 0 1
37225: PUSH
37226: LD_INT 11
37228: PUSH
37229: LD_INT 12
37231: PUSH
37232: LD_INT 13
37234: PUSH
37235: LD_INT 14
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: IN
37244: IFFALSE 37256
// uc_nation := nation_arabian else
37246: LD_ADDR_OWVAR 21
37250: PUSH
37251: LD_INT 2
37253: ST_TO_ADDR
37254: GO 37264
// uc_nation := nation_russian ;
37256: LD_ADDR_OWVAR 21
37260: PUSH
37261: LD_INT 3
37263: ST_TO_ADDR
// vc_chassis := chassis ;
37264: LD_ADDR_OWVAR 37
37268: PUSH
37269: LD_VAR 0 1
37273: ST_TO_ADDR
// vc_engine := engine ;
37274: LD_ADDR_OWVAR 39
37278: PUSH
37279: LD_VAR 0 2
37283: ST_TO_ADDR
// vc_control := control ;
37284: LD_ADDR_OWVAR 38
37288: PUSH
37289: LD_VAR 0 3
37293: ST_TO_ADDR
// vc_weapon := weapon ;
37294: LD_ADDR_OWVAR 40
37298: PUSH
37299: LD_VAR 0 4
37303: ST_TO_ADDR
// un := CreateVehicle ;
37304: LD_ADDR_VAR 0 8
37308: PUSH
37309: CALL_OW 45
37313: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
37314: LD_VAR 0 8
37318: PPUSH
37319: LD_INT 0
37321: PPUSH
37322: LD_INT 5
37324: PPUSH
37325: CALL_OW 12
37329: PPUSH
37330: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
37334: LD_VAR 0 8
37338: PPUSH
37339: LD_VAR 0 5
37343: PPUSH
37344: LD_VAR 0 6
37348: PPUSH
37349: LD_INT 1
37351: PPUSH
37352: CALL_OW 48
// end ;
37356: LD_VAR 0 7
37360: RET
// export hInvincible ; every 1 do
37361: GO 37363
37363: DISABLE
// hInvincible := [ ] ;
37364: LD_ADDR_EXP 121
37368: PUSH
37369: EMPTY
37370: ST_TO_ADDR
37371: END
// every 10 do var i ;
37372: GO 37374
37374: DISABLE
37375: LD_INT 0
37377: PPUSH
// begin enable ;
37378: ENABLE
// if not hInvincible then
37379: LD_EXP 121
37383: NOT
37384: IFFALSE 37388
// exit ;
37386: GO 37432
// for i in hInvincible do
37388: LD_ADDR_VAR 0 1
37392: PUSH
37393: LD_EXP 121
37397: PUSH
37398: FOR_IN
37399: IFFALSE 37430
// if GetLives ( i ) < 1000 then
37401: LD_VAR 0 1
37405: PPUSH
37406: CALL_OW 256
37410: PUSH
37411: LD_INT 1000
37413: LESS
37414: IFFALSE 37428
// SetLives ( i , 1000 ) ;
37416: LD_VAR 0 1
37420: PPUSH
37421: LD_INT 1000
37423: PPUSH
37424: CALL_OW 234
37428: GO 37398
37430: POP
37431: POP
// end ;
37432: PPOPN 1
37434: END
// export function hHackInvincible ; var i ; begin
37435: LD_INT 0
37437: PPUSH
37438: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
37439: LD_ADDR_VAR 0 2
37443: PUSH
37444: LD_INT 2
37446: PUSH
37447: LD_INT 21
37449: PUSH
37450: LD_INT 1
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 21
37459: PUSH
37460: LD_INT 2
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: LIST
37471: PPUSH
37472: CALL_OW 69
37476: PUSH
37477: FOR_IN
37478: IFFALSE 37539
// if IsSelected ( i ) then
37480: LD_VAR 0 2
37484: PPUSH
37485: CALL_OW 306
37489: IFFALSE 37537
// begin if i in hInvincible then
37491: LD_VAR 0 2
37495: PUSH
37496: LD_EXP 121
37500: IN
37501: IFFALSE 37521
// hInvincible := hInvincible diff i else
37503: LD_ADDR_EXP 121
37507: PUSH
37508: LD_EXP 121
37512: PUSH
37513: LD_VAR 0 2
37517: DIFF
37518: ST_TO_ADDR
37519: GO 37537
// hInvincible := hInvincible union i ;
37521: LD_ADDR_EXP 121
37525: PUSH
37526: LD_EXP 121
37530: PUSH
37531: LD_VAR 0 2
37535: UNION
37536: ST_TO_ADDR
// end ;
37537: GO 37477
37539: POP
37540: POP
// end ;
37541: LD_VAR 0 1
37545: RET
// export function hHackInvisible ; var i , j ; begin
37546: LD_INT 0
37548: PPUSH
37549: PPUSH
37550: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
37551: LD_ADDR_VAR 0 2
37555: PUSH
37556: LD_INT 21
37558: PUSH
37559: LD_INT 1
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PPUSH
37566: CALL_OW 69
37570: PUSH
37571: FOR_IN
37572: IFFALSE 37596
// if IsSelected ( i ) then
37574: LD_VAR 0 2
37578: PPUSH
37579: CALL_OW 306
37583: IFFALSE 37594
// ComForceInvisible ( i ) ;
37585: LD_VAR 0 2
37589: PPUSH
37590: CALL_OW 496
37594: GO 37571
37596: POP
37597: POP
// end ;
37598: LD_VAR 0 1
37602: RET
// export function hHackChangeYourSide ; begin
37603: LD_INT 0
37605: PPUSH
// if your_side = 8 then
37606: LD_OWVAR 2
37610: PUSH
37611: LD_INT 8
37613: EQUAL
37614: IFFALSE 37626
// your_side := 0 else
37616: LD_ADDR_OWVAR 2
37620: PUSH
37621: LD_INT 0
37623: ST_TO_ADDR
37624: GO 37640
// your_side := your_side + 1 ;
37626: LD_ADDR_OWVAR 2
37630: PUSH
37631: LD_OWVAR 2
37635: PUSH
37636: LD_INT 1
37638: PLUS
37639: ST_TO_ADDR
// end ;
37640: LD_VAR 0 1
37644: RET
// export function hHackChangeUnitSide ; var i , j ; begin
37645: LD_INT 0
37647: PPUSH
37648: PPUSH
37649: PPUSH
// for i in all_units do
37650: LD_ADDR_VAR 0 2
37654: PUSH
37655: LD_OWVAR 3
37659: PUSH
37660: FOR_IN
37661: IFFALSE 37739
// if IsSelected ( i ) then
37663: LD_VAR 0 2
37667: PPUSH
37668: CALL_OW 306
37672: IFFALSE 37737
// begin j := GetSide ( i ) ;
37674: LD_ADDR_VAR 0 3
37678: PUSH
37679: LD_VAR 0 2
37683: PPUSH
37684: CALL_OW 255
37688: ST_TO_ADDR
// if j = 8 then
37689: LD_VAR 0 3
37693: PUSH
37694: LD_INT 8
37696: EQUAL
37697: IFFALSE 37709
// j := 0 else
37699: LD_ADDR_VAR 0 3
37703: PUSH
37704: LD_INT 0
37706: ST_TO_ADDR
37707: GO 37723
// j := j + 1 ;
37709: LD_ADDR_VAR 0 3
37713: PUSH
37714: LD_VAR 0 3
37718: PUSH
37719: LD_INT 1
37721: PLUS
37722: ST_TO_ADDR
// SetSide ( i , j ) ;
37723: LD_VAR 0 2
37727: PPUSH
37728: LD_VAR 0 3
37732: PPUSH
37733: CALL_OW 235
// end ;
37737: GO 37660
37739: POP
37740: POP
// end ;
37741: LD_VAR 0 1
37745: RET
// export function hHackFog ; begin
37746: LD_INT 0
37748: PPUSH
// FogOff ( true ) ;
37749: LD_INT 1
37751: PPUSH
37752: CALL_OW 344
// end ;
37756: LD_VAR 0 1
37760: RET
// export function hHackTeleport ( unit , x , y ) ; begin
37761: LD_INT 0
37763: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
37764: LD_VAR 0 1
37768: PPUSH
37769: LD_VAR 0 2
37773: PPUSH
37774: LD_VAR 0 3
37778: PPUSH
37779: LD_INT 1
37781: PPUSH
37782: LD_INT 1
37784: PPUSH
37785: CALL_OW 483
// CenterOnXY ( x , y ) ;
37789: LD_VAR 0 2
37793: PPUSH
37794: LD_VAR 0 3
37798: PPUSH
37799: CALL_OW 84
// end ; end_of_file
37803: LD_VAR 0 4
37807: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37808: LD_INT 0
37810: PPUSH
37811: PPUSH
37812: PPUSH
37813: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37814: LD_VAR 0 1
37818: PPUSH
37819: CALL_OW 264
37823: PUSH
37824: LD_EXP 55
37828: EQUAL
37829: IFFALSE 37901
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37831: LD_INT 68
37833: PPUSH
37834: LD_VAR 0 1
37838: PPUSH
37839: CALL_OW 255
37843: PPUSH
37844: CALL_OW 321
37848: PUSH
37849: LD_INT 2
37851: EQUAL
37852: IFFALSE 37864
// eff := 70 else
37854: LD_ADDR_VAR 0 4
37858: PUSH
37859: LD_INT 70
37861: ST_TO_ADDR
37862: GO 37872
// eff := 30 ;
37864: LD_ADDR_VAR 0 4
37868: PUSH
37869: LD_INT 30
37871: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37872: LD_VAR 0 1
37876: PPUSH
37877: CALL_OW 250
37881: PPUSH
37882: LD_VAR 0 1
37886: PPUSH
37887: CALL_OW 251
37891: PPUSH
37892: LD_VAR 0 4
37896: PPUSH
37897: CALL_OW 495
// end ; end ;
37901: LD_VAR 0 2
37905: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37906: LD_INT 0
37908: PPUSH
// end ;
37909: LD_VAR 0 4
37913: RET
// export function SOS_Command ( cmd ) ; begin
37914: LD_INT 0
37916: PPUSH
// end ;
37917: LD_VAR 0 2
37921: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37922: LD_INT 0
37924: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37925: LD_VAR 0 1
37929: PUSH
37930: LD_INT 250
37932: EQUAL
37933: PUSH
37934: LD_VAR 0 2
37938: PPUSH
37939: CALL_OW 264
37943: PUSH
37944: LD_EXP 58
37948: EQUAL
37949: AND
37950: IFFALSE 37971
// MinerPlaceMine ( unit , x , y ) ;
37952: LD_VAR 0 2
37956: PPUSH
37957: LD_VAR 0 4
37961: PPUSH
37962: LD_VAR 0 5
37966: PPUSH
37967: CALL 40312 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37971: LD_VAR 0 1
37975: PUSH
37976: LD_INT 251
37978: EQUAL
37979: PUSH
37980: LD_VAR 0 2
37984: PPUSH
37985: CALL_OW 264
37989: PUSH
37990: LD_EXP 58
37994: EQUAL
37995: AND
37996: IFFALSE 38017
// MinerDetonateMine ( unit , x , y ) ;
37998: LD_VAR 0 2
38002: PPUSH
38003: LD_VAR 0 4
38007: PPUSH
38008: LD_VAR 0 5
38012: PPUSH
38013: CALL 40589 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
38017: LD_VAR 0 1
38021: PUSH
38022: LD_INT 252
38024: EQUAL
38025: PUSH
38026: LD_VAR 0 2
38030: PPUSH
38031: CALL_OW 264
38035: PUSH
38036: LD_EXP 58
38040: EQUAL
38041: AND
38042: IFFALSE 38063
// MinerCreateMinefield ( unit , x , y ) ;
38044: LD_VAR 0 2
38048: PPUSH
38049: LD_VAR 0 4
38053: PPUSH
38054: LD_VAR 0 5
38058: PPUSH
38059: CALL 41006 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
38063: LD_VAR 0 1
38067: PUSH
38068: LD_INT 253
38070: EQUAL
38071: PUSH
38072: LD_VAR 0 2
38076: PPUSH
38077: CALL_OW 257
38081: PUSH
38082: LD_INT 5
38084: EQUAL
38085: AND
38086: IFFALSE 38107
// ComBinocular ( unit , x , y ) ;
38088: LD_VAR 0 2
38092: PPUSH
38093: LD_VAR 0 4
38097: PPUSH
38098: LD_VAR 0 5
38102: PPUSH
38103: CALL 41377 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
38107: LD_VAR 0 1
38111: PUSH
38112: LD_INT 254
38114: EQUAL
38115: PUSH
38116: LD_VAR 0 2
38120: PPUSH
38121: CALL_OW 264
38125: PUSH
38126: LD_EXP 53
38130: EQUAL
38131: AND
38132: PUSH
38133: LD_VAR 0 3
38137: PPUSH
38138: CALL_OW 263
38142: PUSH
38143: LD_INT 3
38145: EQUAL
38146: AND
38147: IFFALSE 38163
// HackDestroyVehicle ( unit , selectedUnit ) ;
38149: LD_VAR 0 2
38153: PPUSH
38154: LD_VAR 0 3
38158: PPUSH
38159: CALL 39672 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
38163: LD_VAR 0 1
38167: PUSH
38168: LD_INT 255
38170: EQUAL
38171: PUSH
38172: LD_VAR 0 2
38176: PPUSH
38177: CALL_OW 264
38181: PUSH
38182: LD_INT 14
38184: PUSH
38185: LD_INT 53
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: IN
38192: AND
38193: PUSH
38194: LD_VAR 0 4
38198: PPUSH
38199: LD_VAR 0 5
38203: PPUSH
38204: CALL_OW 488
38208: AND
38209: IFFALSE 38233
// CutTreeXYR ( unit , x , y , 12 ) ;
38211: LD_VAR 0 2
38215: PPUSH
38216: LD_VAR 0 4
38220: PPUSH
38221: LD_VAR 0 5
38225: PPUSH
38226: LD_INT 12
38228: PPUSH
38229: CALL 38238 0 4
// end ;
38233: LD_VAR 0 6
38237: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38238: LD_INT 0
38240: PPUSH
38241: PPUSH
38242: PPUSH
38243: PPUSH
38244: PPUSH
38245: PPUSH
38246: PPUSH
38247: PPUSH
38248: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
38249: LD_VAR 0 1
38253: NOT
38254: PUSH
38255: LD_VAR 0 2
38259: PPUSH
38260: LD_VAR 0 3
38264: PPUSH
38265: CALL_OW 488
38269: NOT
38270: OR
38271: PUSH
38272: LD_VAR 0 4
38276: NOT
38277: OR
38278: IFFALSE 38282
// exit ;
38280: GO 38622
// list := [ ] ;
38282: LD_ADDR_VAR 0 13
38286: PUSH
38287: EMPTY
38288: ST_TO_ADDR
// if x - r < 0 then
38289: LD_VAR 0 2
38293: PUSH
38294: LD_VAR 0 4
38298: MINUS
38299: PUSH
38300: LD_INT 0
38302: LESS
38303: IFFALSE 38315
// min_x := 0 else
38305: LD_ADDR_VAR 0 7
38309: PUSH
38310: LD_INT 0
38312: ST_TO_ADDR
38313: GO 38331
// min_x := x - r ;
38315: LD_ADDR_VAR 0 7
38319: PUSH
38320: LD_VAR 0 2
38324: PUSH
38325: LD_VAR 0 4
38329: MINUS
38330: ST_TO_ADDR
// if y - r < 0 then
38331: LD_VAR 0 3
38335: PUSH
38336: LD_VAR 0 4
38340: MINUS
38341: PUSH
38342: LD_INT 0
38344: LESS
38345: IFFALSE 38357
// min_y := 0 else
38347: LD_ADDR_VAR 0 8
38351: PUSH
38352: LD_INT 0
38354: ST_TO_ADDR
38355: GO 38373
// min_y := y - r ;
38357: LD_ADDR_VAR 0 8
38361: PUSH
38362: LD_VAR 0 3
38366: PUSH
38367: LD_VAR 0 4
38371: MINUS
38372: ST_TO_ADDR
// max_x := x + r ;
38373: LD_ADDR_VAR 0 9
38377: PUSH
38378: LD_VAR 0 2
38382: PUSH
38383: LD_VAR 0 4
38387: PLUS
38388: ST_TO_ADDR
// max_y := y + r ;
38389: LD_ADDR_VAR 0 10
38393: PUSH
38394: LD_VAR 0 3
38398: PUSH
38399: LD_VAR 0 4
38403: PLUS
38404: ST_TO_ADDR
// for _x = min_x to max_x do
38405: LD_ADDR_VAR 0 11
38409: PUSH
38410: DOUBLE
38411: LD_VAR 0 7
38415: DEC
38416: ST_TO_ADDR
38417: LD_VAR 0 9
38421: PUSH
38422: FOR_TO
38423: IFFALSE 38540
// for _y = min_y to max_y do
38425: LD_ADDR_VAR 0 12
38429: PUSH
38430: DOUBLE
38431: LD_VAR 0 8
38435: DEC
38436: ST_TO_ADDR
38437: LD_VAR 0 10
38441: PUSH
38442: FOR_TO
38443: IFFALSE 38536
// begin if not ValidHex ( _x , _y ) then
38445: LD_VAR 0 11
38449: PPUSH
38450: LD_VAR 0 12
38454: PPUSH
38455: CALL_OW 488
38459: NOT
38460: IFFALSE 38464
// continue ;
38462: GO 38442
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38464: LD_VAR 0 11
38468: PPUSH
38469: LD_VAR 0 12
38473: PPUSH
38474: CALL_OW 351
38478: PUSH
38479: LD_VAR 0 11
38483: PPUSH
38484: LD_VAR 0 12
38488: PPUSH
38489: CALL_OW 554
38493: AND
38494: IFFALSE 38534
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38496: LD_ADDR_VAR 0 13
38500: PUSH
38501: LD_VAR 0 13
38505: PPUSH
38506: LD_VAR 0 13
38510: PUSH
38511: LD_INT 1
38513: PLUS
38514: PPUSH
38515: LD_VAR 0 11
38519: PUSH
38520: LD_VAR 0 12
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PPUSH
38529: CALL_OW 2
38533: ST_TO_ADDR
// end ;
38534: GO 38442
38536: POP
38537: POP
38538: GO 38422
38540: POP
38541: POP
// if not list then
38542: LD_VAR 0 13
38546: NOT
38547: IFFALSE 38551
// exit ;
38549: GO 38622
// for i in list do
38551: LD_ADDR_VAR 0 6
38555: PUSH
38556: LD_VAR 0 13
38560: PUSH
38561: FOR_IN
38562: IFFALSE 38620
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38564: LD_VAR 0 1
38568: PPUSH
38569: LD_STRING M
38571: PUSH
38572: LD_VAR 0 6
38576: PUSH
38577: LD_INT 1
38579: ARRAY
38580: PUSH
38581: LD_VAR 0 6
38585: PUSH
38586: LD_INT 2
38588: ARRAY
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: LD_INT 0
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: PUSH
38611: EMPTY
38612: LIST
38613: PPUSH
38614: CALL_OW 447
38618: GO 38561
38620: POP
38621: POP
// end ;
38622: LD_VAR 0 5
38626: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38627: LD_EXP 122
38631: NOT
38632: IFFALSE 38682
38634: GO 38636
38636: DISABLE
// begin initHack := true ;
38637: LD_ADDR_EXP 122
38641: PUSH
38642: LD_INT 1
38644: ST_TO_ADDR
// hackTanks := [ ] ;
38645: LD_ADDR_EXP 123
38649: PUSH
38650: EMPTY
38651: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38652: LD_ADDR_EXP 124
38656: PUSH
38657: EMPTY
38658: ST_TO_ADDR
// hackLimit := 3 ;
38659: LD_ADDR_EXP 125
38663: PUSH
38664: LD_INT 3
38666: ST_TO_ADDR
// hackDist := 12 ;
38667: LD_ADDR_EXP 126
38671: PUSH
38672: LD_INT 12
38674: ST_TO_ADDR
// hackCounter := [ ] ;
38675: LD_ADDR_EXP 127
38679: PUSH
38680: EMPTY
38681: ST_TO_ADDR
// end ;
38682: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38683: LD_EXP 122
38687: PUSH
38688: LD_INT 34
38690: PUSH
38691: LD_EXP 53
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PPUSH
38700: CALL_OW 69
38704: AND
38705: IFFALSE 38960
38707: GO 38709
38709: DISABLE
38710: LD_INT 0
38712: PPUSH
38713: PPUSH
// begin enable ;
38714: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38715: LD_ADDR_VAR 0 1
38719: PUSH
38720: LD_INT 34
38722: PUSH
38723: LD_EXP 53
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PPUSH
38732: CALL_OW 69
38736: PUSH
38737: FOR_IN
38738: IFFALSE 38958
// begin if not i in hackTanks then
38740: LD_VAR 0 1
38744: PUSH
38745: LD_EXP 123
38749: IN
38750: NOT
38751: IFFALSE 38834
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38753: LD_ADDR_EXP 123
38757: PUSH
38758: LD_EXP 123
38762: PPUSH
38763: LD_EXP 123
38767: PUSH
38768: LD_INT 1
38770: PLUS
38771: PPUSH
38772: LD_VAR 0 1
38776: PPUSH
38777: CALL_OW 1
38781: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38782: LD_ADDR_EXP 124
38786: PUSH
38787: LD_EXP 124
38791: PPUSH
38792: LD_EXP 124
38796: PUSH
38797: LD_INT 1
38799: PLUS
38800: PPUSH
38801: EMPTY
38802: PPUSH
38803: CALL_OW 1
38807: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38808: LD_ADDR_EXP 127
38812: PUSH
38813: LD_EXP 127
38817: PPUSH
38818: LD_EXP 127
38822: PUSH
38823: LD_INT 1
38825: PLUS
38826: PPUSH
38827: EMPTY
38828: PPUSH
38829: CALL_OW 1
38833: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38834: LD_VAR 0 1
38838: PPUSH
38839: CALL_OW 302
38843: NOT
38844: IFFALSE 38857
// begin HackUnlinkAll ( i ) ;
38846: LD_VAR 0 1
38850: PPUSH
38851: CALL 38963 0 1
// continue ;
38855: GO 38737
// end ; HackCheckCapturedStatus ( i ) ;
38857: LD_VAR 0 1
38861: PPUSH
38862: CALL 39406 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38866: LD_ADDR_VAR 0 2
38870: PUSH
38871: LD_INT 81
38873: PUSH
38874: LD_VAR 0 1
38878: PPUSH
38879: CALL_OW 255
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 33
38890: PUSH
38891: LD_INT 3
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 91
38900: PUSH
38901: LD_VAR 0 1
38905: PUSH
38906: LD_EXP 126
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 50
38918: PUSH
38919: EMPTY
38920: LIST
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: PPUSH
38928: CALL_OW 69
38932: ST_TO_ADDR
// if not tmp then
38933: LD_VAR 0 2
38937: NOT
38938: IFFALSE 38942
// continue ;
38940: GO 38737
// HackLink ( i , tmp ) ;
38942: LD_VAR 0 1
38946: PPUSH
38947: LD_VAR 0 2
38951: PPUSH
38952: CALL 39099 0 2
// end ;
38956: GO 38737
38958: POP
38959: POP
// end ;
38960: PPOPN 2
38962: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38963: LD_INT 0
38965: PPUSH
38966: PPUSH
38967: PPUSH
// if not hack in hackTanks then
38968: LD_VAR 0 1
38972: PUSH
38973: LD_EXP 123
38977: IN
38978: NOT
38979: IFFALSE 38983
// exit ;
38981: GO 39094
// index := GetElementIndex ( hackTanks , hack ) ;
38983: LD_ADDR_VAR 0 4
38987: PUSH
38988: LD_EXP 123
38992: PPUSH
38993: LD_VAR 0 1
38997: PPUSH
38998: CALL 46528 0 2
39002: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
39003: LD_EXP 124
39007: PUSH
39008: LD_VAR 0 4
39012: ARRAY
39013: IFFALSE 39094
// begin for i in hackTanksCaptured [ index ] do
39015: LD_ADDR_VAR 0 3
39019: PUSH
39020: LD_EXP 124
39024: PUSH
39025: LD_VAR 0 4
39029: ARRAY
39030: PUSH
39031: FOR_IN
39032: IFFALSE 39058
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39034: LD_VAR 0 3
39038: PUSH
39039: LD_INT 1
39041: ARRAY
39042: PPUSH
39043: LD_VAR 0 3
39047: PUSH
39048: LD_INT 2
39050: ARRAY
39051: PPUSH
39052: CALL_OW 235
39056: GO 39031
39058: POP
39059: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39060: LD_ADDR_EXP 124
39064: PUSH
39065: LD_EXP 124
39069: PPUSH
39070: LD_VAR 0 4
39074: PPUSH
39075: EMPTY
39076: PPUSH
39077: CALL_OW 1
39081: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39082: LD_VAR 0 1
39086: PPUSH
39087: LD_INT 0
39089: PPUSH
39090: CALL_OW 505
// end ; end ;
39094: LD_VAR 0 2
39098: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39099: LD_INT 0
39101: PPUSH
39102: PPUSH
39103: PPUSH
// if not hack in hackTanks or not vehicles then
39104: LD_VAR 0 1
39108: PUSH
39109: LD_EXP 123
39113: IN
39114: NOT
39115: PUSH
39116: LD_VAR 0 2
39120: NOT
39121: OR
39122: IFFALSE 39126
// exit ;
39124: GO 39401
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39126: LD_ADDR_VAR 0 2
39130: PUSH
39131: LD_VAR 0 1
39135: PPUSH
39136: LD_VAR 0 2
39140: PPUSH
39141: LD_INT 1
39143: PPUSH
39144: LD_INT 1
39146: PPUSH
39147: CALL 47178 0 4
39151: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39152: LD_ADDR_VAR 0 5
39156: PUSH
39157: LD_EXP 123
39161: PPUSH
39162: LD_VAR 0 1
39166: PPUSH
39167: CALL 46528 0 2
39171: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39172: LD_EXP 124
39176: PUSH
39177: LD_VAR 0 5
39181: ARRAY
39182: PUSH
39183: LD_EXP 125
39187: LESS
39188: IFFALSE 39377
// begin for i := 1 to vehicles do
39190: LD_ADDR_VAR 0 4
39194: PUSH
39195: DOUBLE
39196: LD_INT 1
39198: DEC
39199: ST_TO_ADDR
39200: LD_VAR 0 2
39204: PUSH
39205: FOR_TO
39206: IFFALSE 39375
// begin if hackTanksCaptured [ index ] = hackLimit then
39208: LD_EXP 124
39212: PUSH
39213: LD_VAR 0 5
39217: ARRAY
39218: PUSH
39219: LD_EXP 125
39223: EQUAL
39224: IFFALSE 39228
// break ;
39226: GO 39375
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39228: LD_ADDR_EXP 127
39232: PUSH
39233: LD_EXP 127
39237: PPUSH
39238: LD_VAR 0 5
39242: PPUSH
39243: LD_EXP 127
39247: PUSH
39248: LD_VAR 0 5
39252: ARRAY
39253: PUSH
39254: LD_INT 1
39256: PLUS
39257: PPUSH
39258: CALL_OW 1
39262: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39263: LD_ADDR_EXP 124
39267: PUSH
39268: LD_EXP 124
39272: PPUSH
39273: LD_VAR 0 5
39277: PUSH
39278: LD_EXP 124
39282: PUSH
39283: LD_VAR 0 5
39287: ARRAY
39288: PUSH
39289: LD_INT 1
39291: PLUS
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PPUSH
39297: LD_VAR 0 2
39301: PUSH
39302: LD_VAR 0 4
39306: ARRAY
39307: PUSH
39308: LD_VAR 0 2
39312: PUSH
39313: LD_VAR 0 4
39317: ARRAY
39318: PPUSH
39319: CALL_OW 255
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PPUSH
39328: CALL 46743 0 3
39332: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39333: LD_VAR 0 2
39337: PUSH
39338: LD_VAR 0 4
39342: ARRAY
39343: PPUSH
39344: LD_VAR 0 1
39348: PPUSH
39349: CALL_OW 255
39353: PPUSH
39354: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39358: LD_VAR 0 2
39362: PUSH
39363: LD_VAR 0 4
39367: ARRAY
39368: PPUSH
39369: CALL_OW 141
// end ;
39373: GO 39205
39375: POP
39376: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39377: LD_VAR 0 1
39381: PPUSH
39382: LD_EXP 124
39386: PUSH
39387: LD_VAR 0 5
39391: ARRAY
39392: PUSH
39393: LD_INT 0
39395: PLUS
39396: PPUSH
39397: CALL_OW 505
// end ;
39401: LD_VAR 0 3
39405: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39406: LD_INT 0
39408: PPUSH
39409: PPUSH
39410: PPUSH
39411: PPUSH
// if not hack in hackTanks then
39412: LD_VAR 0 1
39416: PUSH
39417: LD_EXP 123
39421: IN
39422: NOT
39423: IFFALSE 39427
// exit ;
39425: GO 39667
// index := GetElementIndex ( hackTanks , hack ) ;
39427: LD_ADDR_VAR 0 4
39431: PUSH
39432: LD_EXP 123
39436: PPUSH
39437: LD_VAR 0 1
39441: PPUSH
39442: CALL 46528 0 2
39446: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39447: LD_ADDR_VAR 0 3
39451: PUSH
39452: DOUBLE
39453: LD_EXP 124
39457: PUSH
39458: LD_VAR 0 4
39462: ARRAY
39463: INC
39464: ST_TO_ADDR
39465: LD_INT 1
39467: PUSH
39468: FOR_DOWNTO
39469: IFFALSE 39641
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39471: LD_ADDR_VAR 0 5
39475: PUSH
39476: LD_EXP 124
39480: PUSH
39481: LD_VAR 0 4
39485: ARRAY
39486: PUSH
39487: LD_VAR 0 3
39491: ARRAY
39492: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39493: LD_VAR 0 5
39497: PUSH
39498: LD_INT 1
39500: ARRAY
39501: PPUSH
39502: CALL_OW 302
39506: NOT
39507: PUSH
39508: LD_VAR 0 5
39512: PUSH
39513: LD_INT 1
39515: ARRAY
39516: PPUSH
39517: CALL_OW 255
39521: PUSH
39522: LD_VAR 0 1
39526: PPUSH
39527: CALL_OW 255
39531: NONEQUAL
39532: OR
39533: IFFALSE 39639
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39535: LD_VAR 0 5
39539: PUSH
39540: LD_INT 1
39542: ARRAY
39543: PPUSH
39544: CALL_OW 305
39548: PUSH
39549: LD_VAR 0 5
39553: PUSH
39554: LD_INT 1
39556: ARRAY
39557: PPUSH
39558: CALL_OW 255
39562: PUSH
39563: LD_VAR 0 1
39567: PPUSH
39568: CALL_OW 255
39572: EQUAL
39573: AND
39574: IFFALSE 39598
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39576: LD_VAR 0 5
39580: PUSH
39581: LD_INT 1
39583: ARRAY
39584: PPUSH
39585: LD_VAR 0 5
39589: PUSH
39590: LD_INT 2
39592: ARRAY
39593: PPUSH
39594: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39598: LD_ADDR_EXP 124
39602: PUSH
39603: LD_EXP 124
39607: PPUSH
39608: LD_VAR 0 4
39612: PPUSH
39613: LD_EXP 124
39617: PUSH
39618: LD_VAR 0 4
39622: ARRAY
39623: PPUSH
39624: LD_VAR 0 3
39628: PPUSH
39629: CALL_OW 3
39633: PPUSH
39634: CALL_OW 1
39638: ST_TO_ADDR
// end ; end ;
39639: GO 39468
39641: POP
39642: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39643: LD_VAR 0 1
39647: PPUSH
39648: LD_EXP 124
39652: PUSH
39653: LD_VAR 0 4
39657: ARRAY
39658: PUSH
39659: LD_INT 0
39661: PLUS
39662: PPUSH
39663: CALL_OW 505
// end ;
39667: LD_VAR 0 2
39671: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39672: LD_INT 0
39674: PPUSH
39675: PPUSH
39676: PPUSH
39677: PPUSH
// if not hack in hackTanks then
39678: LD_VAR 0 1
39682: PUSH
39683: LD_EXP 123
39687: IN
39688: NOT
39689: IFFALSE 39693
// exit ;
39691: GO 39778
// index := GetElementIndex ( hackTanks , hack ) ;
39693: LD_ADDR_VAR 0 5
39697: PUSH
39698: LD_EXP 123
39702: PPUSH
39703: LD_VAR 0 1
39707: PPUSH
39708: CALL 46528 0 2
39712: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39713: LD_ADDR_VAR 0 4
39717: PUSH
39718: DOUBLE
39719: LD_INT 1
39721: DEC
39722: ST_TO_ADDR
39723: LD_EXP 124
39727: PUSH
39728: LD_VAR 0 5
39732: ARRAY
39733: PUSH
39734: FOR_TO
39735: IFFALSE 39776
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39737: LD_EXP 124
39741: PUSH
39742: LD_VAR 0 5
39746: ARRAY
39747: PUSH
39748: LD_VAR 0 4
39752: ARRAY
39753: PUSH
39754: LD_INT 1
39756: ARRAY
39757: PUSH
39758: LD_VAR 0 2
39762: EQUAL
39763: IFFALSE 39774
// KillUnit ( vehicle ) ;
39765: LD_VAR 0 2
39769: PPUSH
39770: CALL_OW 66
39774: GO 39734
39776: POP
39777: POP
// end ;
39778: LD_VAR 0 3
39782: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39783: LD_EXP 128
39787: NOT
39788: IFFALSE 39823
39790: GO 39792
39792: DISABLE
// begin initMiner := true ;
39793: LD_ADDR_EXP 128
39797: PUSH
39798: LD_INT 1
39800: ST_TO_ADDR
// minersList := [ ] ;
39801: LD_ADDR_EXP 129
39805: PUSH
39806: EMPTY
39807: ST_TO_ADDR
// minerMinesList := [ ] ;
39808: LD_ADDR_EXP 130
39812: PUSH
39813: EMPTY
39814: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39815: LD_ADDR_EXP 131
39819: PUSH
39820: LD_INT 5
39822: ST_TO_ADDR
// end ;
39823: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39824: LD_EXP 128
39828: PUSH
39829: LD_INT 34
39831: PUSH
39832: LD_EXP 58
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PPUSH
39841: CALL_OW 69
39845: AND
39846: IFFALSE 40309
39848: GO 39850
39850: DISABLE
39851: LD_INT 0
39853: PPUSH
39854: PPUSH
39855: PPUSH
39856: PPUSH
// begin enable ;
39857: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39858: LD_ADDR_VAR 0 1
39862: PUSH
39863: LD_INT 34
39865: PUSH
39866: LD_EXP 58
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PPUSH
39875: CALL_OW 69
39879: PUSH
39880: FOR_IN
39881: IFFALSE 39953
// begin if not i in minersList then
39883: LD_VAR 0 1
39887: PUSH
39888: LD_EXP 129
39892: IN
39893: NOT
39894: IFFALSE 39951
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39896: LD_ADDR_EXP 129
39900: PUSH
39901: LD_EXP 129
39905: PPUSH
39906: LD_EXP 129
39910: PUSH
39911: LD_INT 1
39913: PLUS
39914: PPUSH
39915: LD_VAR 0 1
39919: PPUSH
39920: CALL_OW 1
39924: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39925: LD_ADDR_EXP 130
39929: PUSH
39930: LD_EXP 130
39934: PPUSH
39935: LD_EXP 130
39939: PUSH
39940: LD_INT 1
39942: PLUS
39943: PPUSH
39944: EMPTY
39945: PPUSH
39946: CALL_OW 1
39950: ST_TO_ADDR
// end end ;
39951: GO 39880
39953: POP
39954: POP
// for i := minerMinesList downto 1 do
39955: LD_ADDR_VAR 0 1
39959: PUSH
39960: DOUBLE
39961: LD_EXP 130
39965: INC
39966: ST_TO_ADDR
39967: LD_INT 1
39969: PUSH
39970: FOR_DOWNTO
39971: IFFALSE 40307
// begin if IsLive ( minersList [ i ] ) then
39973: LD_EXP 129
39977: PUSH
39978: LD_VAR 0 1
39982: ARRAY
39983: PPUSH
39984: CALL_OW 300
39988: IFFALSE 40016
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39990: LD_EXP 129
39994: PUSH
39995: LD_VAR 0 1
39999: ARRAY
40000: PPUSH
40001: LD_EXP 130
40005: PUSH
40006: LD_VAR 0 1
40010: ARRAY
40011: PPUSH
40012: CALL_OW 505
// if not minerMinesList [ i ] then
40016: LD_EXP 130
40020: PUSH
40021: LD_VAR 0 1
40025: ARRAY
40026: NOT
40027: IFFALSE 40031
// continue ;
40029: GO 39970
// for j := minerMinesList [ i ] downto 1 do
40031: LD_ADDR_VAR 0 2
40035: PUSH
40036: DOUBLE
40037: LD_EXP 130
40041: PUSH
40042: LD_VAR 0 1
40046: ARRAY
40047: INC
40048: ST_TO_ADDR
40049: LD_INT 1
40051: PUSH
40052: FOR_DOWNTO
40053: IFFALSE 40303
// begin side := GetSide ( minersList [ i ] ) ;
40055: LD_ADDR_VAR 0 3
40059: PUSH
40060: LD_EXP 129
40064: PUSH
40065: LD_VAR 0 1
40069: ARRAY
40070: PPUSH
40071: CALL_OW 255
40075: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40076: LD_ADDR_VAR 0 4
40080: PUSH
40081: LD_EXP 130
40085: PUSH
40086: LD_VAR 0 1
40090: ARRAY
40091: PUSH
40092: LD_VAR 0 2
40096: ARRAY
40097: PUSH
40098: LD_INT 1
40100: ARRAY
40101: PPUSH
40102: LD_EXP 130
40106: PUSH
40107: LD_VAR 0 1
40111: ARRAY
40112: PUSH
40113: LD_VAR 0 2
40117: ARRAY
40118: PUSH
40119: LD_INT 2
40121: ARRAY
40122: PPUSH
40123: CALL_OW 428
40127: ST_TO_ADDR
// if not tmp then
40128: LD_VAR 0 4
40132: NOT
40133: IFFALSE 40137
// continue ;
40135: GO 40052
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40137: LD_VAR 0 4
40141: PUSH
40142: LD_INT 81
40144: PUSH
40145: LD_VAR 0 3
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PPUSH
40154: CALL_OW 69
40158: IN
40159: PUSH
40160: LD_EXP 130
40164: PUSH
40165: LD_VAR 0 1
40169: ARRAY
40170: PUSH
40171: LD_VAR 0 2
40175: ARRAY
40176: PUSH
40177: LD_INT 1
40179: ARRAY
40180: PPUSH
40181: LD_EXP 130
40185: PUSH
40186: LD_VAR 0 1
40190: ARRAY
40191: PUSH
40192: LD_VAR 0 2
40196: ARRAY
40197: PUSH
40198: LD_INT 2
40200: ARRAY
40201: PPUSH
40202: CALL_OW 458
40206: AND
40207: IFFALSE 40301
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40209: LD_EXP 130
40213: PUSH
40214: LD_VAR 0 1
40218: ARRAY
40219: PUSH
40220: LD_VAR 0 2
40224: ARRAY
40225: PUSH
40226: LD_INT 1
40228: ARRAY
40229: PPUSH
40230: LD_EXP 130
40234: PUSH
40235: LD_VAR 0 1
40239: ARRAY
40240: PUSH
40241: LD_VAR 0 2
40245: ARRAY
40246: PUSH
40247: LD_INT 2
40249: ARRAY
40250: PPUSH
40251: LD_VAR 0 3
40255: PPUSH
40256: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40260: LD_ADDR_EXP 130
40264: PUSH
40265: LD_EXP 130
40269: PPUSH
40270: LD_VAR 0 1
40274: PPUSH
40275: LD_EXP 130
40279: PUSH
40280: LD_VAR 0 1
40284: ARRAY
40285: PPUSH
40286: LD_VAR 0 2
40290: PPUSH
40291: CALL_OW 3
40295: PPUSH
40296: CALL_OW 1
40300: ST_TO_ADDR
// end ; end ;
40301: GO 40052
40303: POP
40304: POP
// end ;
40305: GO 39970
40307: POP
40308: POP
// end ;
40309: PPOPN 4
40311: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40312: LD_INT 0
40314: PPUSH
40315: PPUSH
// result := false ;
40316: LD_ADDR_VAR 0 4
40320: PUSH
40321: LD_INT 0
40323: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40324: LD_VAR 0 1
40328: PPUSH
40329: CALL_OW 264
40333: PUSH
40334: LD_EXP 58
40338: EQUAL
40339: NOT
40340: IFFALSE 40344
// exit ;
40342: GO 40584
// index := GetElementIndex ( minersList , unit ) ;
40344: LD_ADDR_VAR 0 5
40348: PUSH
40349: LD_EXP 129
40353: PPUSH
40354: LD_VAR 0 1
40358: PPUSH
40359: CALL 46528 0 2
40363: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40364: LD_EXP 130
40368: PUSH
40369: LD_VAR 0 5
40373: ARRAY
40374: PUSH
40375: LD_EXP 131
40379: GREATEREQUAL
40380: IFFALSE 40384
// exit ;
40382: GO 40584
// ComMoveXY ( unit , x , y ) ;
40384: LD_VAR 0 1
40388: PPUSH
40389: LD_VAR 0 2
40393: PPUSH
40394: LD_VAR 0 3
40398: PPUSH
40399: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40403: LD_INT 35
40405: PPUSH
40406: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40410: LD_VAR 0 1
40414: PPUSH
40415: LD_VAR 0 2
40419: PPUSH
40420: LD_VAR 0 3
40424: PPUSH
40425: CALL 76592 0 3
40429: NOT
40430: PUSH
40431: LD_VAR 0 1
40435: PPUSH
40436: CALL_OW 314
40440: AND
40441: IFFALSE 40445
// exit ;
40443: GO 40584
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40445: LD_VAR 0 2
40449: PPUSH
40450: LD_VAR 0 3
40454: PPUSH
40455: CALL_OW 428
40459: PUSH
40460: LD_VAR 0 1
40464: EQUAL
40465: PUSH
40466: LD_VAR 0 1
40470: PPUSH
40471: CALL_OW 314
40475: NOT
40476: AND
40477: IFFALSE 40403
// PlaySoundXY ( x , y , PlantMine ) ;
40479: LD_VAR 0 2
40483: PPUSH
40484: LD_VAR 0 3
40488: PPUSH
40489: LD_STRING PlantMine
40491: PPUSH
40492: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40496: LD_VAR 0 2
40500: PPUSH
40501: LD_VAR 0 3
40505: PPUSH
40506: LD_VAR 0 1
40510: PPUSH
40511: CALL_OW 255
40515: PPUSH
40516: LD_INT 0
40518: PPUSH
40519: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40523: LD_ADDR_EXP 130
40527: PUSH
40528: LD_EXP 130
40532: PPUSH
40533: LD_VAR 0 5
40537: PUSH
40538: LD_EXP 130
40542: PUSH
40543: LD_VAR 0 5
40547: ARRAY
40548: PUSH
40549: LD_INT 1
40551: PLUS
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PPUSH
40557: LD_VAR 0 2
40561: PUSH
40562: LD_VAR 0 3
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PPUSH
40571: CALL 46743 0 3
40575: ST_TO_ADDR
// result := true ;
40576: LD_ADDR_VAR 0 4
40580: PUSH
40581: LD_INT 1
40583: ST_TO_ADDR
// end ;
40584: LD_VAR 0 4
40588: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40589: LD_INT 0
40591: PPUSH
40592: PPUSH
40593: PPUSH
// if not unit in minersList then
40594: LD_VAR 0 1
40598: PUSH
40599: LD_EXP 129
40603: IN
40604: NOT
40605: IFFALSE 40609
// exit ;
40607: GO 41001
// index := GetElementIndex ( minersList , unit ) ;
40609: LD_ADDR_VAR 0 6
40613: PUSH
40614: LD_EXP 129
40618: PPUSH
40619: LD_VAR 0 1
40623: PPUSH
40624: CALL 46528 0 2
40628: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40629: LD_ADDR_VAR 0 5
40633: PUSH
40634: DOUBLE
40635: LD_EXP 130
40639: PUSH
40640: LD_VAR 0 6
40644: ARRAY
40645: INC
40646: ST_TO_ADDR
40647: LD_INT 1
40649: PUSH
40650: FOR_DOWNTO
40651: IFFALSE 40812
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40653: LD_EXP 130
40657: PUSH
40658: LD_VAR 0 6
40662: ARRAY
40663: PUSH
40664: LD_VAR 0 5
40668: ARRAY
40669: PUSH
40670: LD_INT 1
40672: ARRAY
40673: PUSH
40674: LD_VAR 0 2
40678: EQUAL
40679: PUSH
40680: LD_EXP 130
40684: PUSH
40685: LD_VAR 0 6
40689: ARRAY
40690: PUSH
40691: LD_VAR 0 5
40695: ARRAY
40696: PUSH
40697: LD_INT 2
40699: ARRAY
40700: PUSH
40701: LD_VAR 0 3
40705: EQUAL
40706: AND
40707: IFFALSE 40810
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40709: LD_EXP 130
40713: PUSH
40714: LD_VAR 0 6
40718: ARRAY
40719: PUSH
40720: LD_VAR 0 5
40724: ARRAY
40725: PUSH
40726: LD_INT 1
40728: ARRAY
40729: PPUSH
40730: LD_EXP 130
40734: PUSH
40735: LD_VAR 0 6
40739: ARRAY
40740: PUSH
40741: LD_VAR 0 5
40745: ARRAY
40746: PUSH
40747: LD_INT 2
40749: ARRAY
40750: PPUSH
40751: LD_VAR 0 1
40755: PPUSH
40756: CALL_OW 255
40760: PPUSH
40761: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40765: LD_ADDR_EXP 130
40769: PUSH
40770: LD_EXP 130
40774: PPUSH
40775: LD_VAR 0 6
40779: PPUSH
40780: LD_EXP 130
40784: PUSH
40785: LD_VAR 0 6
40789: ARRAY
40790: PPUSH
40791: LD_VAR 0 5
40795: PPUSH
40796: CALL_OW 3
40800: PPUSH
40801: CALL_OW 1
40805: ST_TO_ADDR
// exit ;
40806: POP
40807: POP
40808: GO 41001
// end ; end ;
40810: GO 40650
40812: POP
40813: POP
// for i := minerMinesList [ index ] downto 1 do
40814: LD_ADDR_VAR 0 5
40818: PUSH
40819: DOUBLE
40820: LD_EXP 130
40824: PUSH
40825: LD_VAR 0 6
40829: ARRAY
40830: INC
40831: ST_TO_ADDR
40832: LD_INT 1
40834: PUSH
40835: FOR_DOWNTO
40836: IFFALSE 40999
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40838: LD_EXP 130
40842: PUSH
40843: LD_VAR 0 6
40847: ARRAY
40848: PUSH
40849: LD_VAR 0 5
40853: ARRAY
40854: PUSH
40855: LD_INT 1
40857: ARRAY
40858: PPUSH
40859: LD_EXP 130
40863: PUSH
40864: LD_VAR 0 6
40868: ARRAY
40869: PUSH
40870: LD_VAR 0 5
40874: ARRAY
40875: PUSH
40876: LD_INT 2
40878: ARRAY
40879: PPUSH
40880: LD_VAR 0 2
40884: PPUSH
40885: LD_VAR 0 3
40889: PPUSH
40890: CALL_OW 298
40894: PUSH
40895: LD_INT 6
40897: LESS
40898: IFFALSE 40997
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40900: LD_EXP 130
40904: PUSH
40905: LD_VAR 0 6
40909: ARRAY
40910: PUSH
40911: LD_VAR 0 5
40915: ARRAY
40916: PUSH
40917: LD_INT 1
40919: ARRAY
40920: PPUSH
40921: LD_EXP 130
40925: PUSH
40926: LD_VAR 0 6
40930: ARRAY
40931: PUSH
40932: LD_VAR 0 5
40936: ARRAY
40937: PUSH
40938: LD_INT 2
40940: ARRAY
40941: PPUSH
40942: LD_VAR 0 1
40946: PPUSH
40947: CALL_OW 255
40951: PPUSH
40952: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40956: LD_ADDR_EXP 130
40960: PUSH
40961: LD_EXP 130
40965: PPUSH
40966: LD_VAR 0 6
40970: PPUSH
40971: LD_EXP 130
40975: PUSH
40976: LD_VAR 0 6
40980: ARRAY
40981: PPUSH
40982: LD_VAR 0 5
40986: PPUSH
40987: CALL_OW 3
40991: PPUSH
40992: CALL_OW 1
40996: ST_TO_ADDR
// end ; end ;
40997: GO 40835
40999: POP
41000: POP
// end ;
41001: LD_VAR 0 4
41005: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
41006: LD_INT 0
41008: PPUSH
41009: PPUSH
41010: PPUSH
41011: PPUSH
41012: PPUSH
41013: PPUSH
41014: PPUSH
41015: PPUSH
41016: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41017: LD_VAR 0 1
41021: PPUSH
41022: CALL_OW 264
41026: PUSH
41027: LD_EXP 58
41031: EQUAL
41032: NOT
41033: PUSH
41034: LD_VAR 0 1
41038: PUSH
41039: LD_EXP 129
41043: IN
41044: NOT
41045: OR
41046: IFFALSE 41050
// exit ;
41048: GO 41372
// index := GetElementIndex ( minersList , unit ) ;
41050: LD_ADDR_VAR 0 6
41054: PUSH
41055: LD_EXP 129
41059: PPUSH
41060: LD_VAR 0 1
41064: PPUSH
41065: CALL 46528 0 2
41069: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41070: LD_ADDR_VAR 0 8
41074: PUSH
41075: LD_EXP 131
41079: PUSH
41080: LD_EXP 130
41084: PUSH
41085: LD_VAR 0 6
41089: ARRAY
41090: MINUS
41091: ST_TO_ADDR
// if not minesFreeAmount then
41092: LD_VAR 0 8
41096: NOT
41097: IFFALSE 41101
// exit ;
41099: GO 41372
// tmp := [ ] ;
41101: LD_ADDR_VAR 0 7
41105: PUSH
41106: EMPTY
41107: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41108: LD_ADDR_VAR 0 5
41112: PUSH
41113: DOUBLE
41114: LD_INT 1
41116: DEC
41117: ST_TO_ADDR
41118: LD_VAR 0 8
41122: PUSH
41123: FOR_TO
41124: IFFALSE 41319
// begin _d := rand ( 0 , 5 ) ;
41126: LD_ADDR_VAR 0 11
41130: PUSH
41131: LD_INT 0
41133: PPUSH
41134: LD_INT 5
41136: PPUSH
41137: CALL_OW 12
41141: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41142: LD_ADDR_VAR 0 12
41146: PUSH
41147: LD_INT 2
41149: PPUSH
41150: LD_INT 6
41152: PPUSH
41153: CALL_OW 12
41157: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41158: LD_ADDR_VAR 0 9
41162: PUSH
41163: LD_VAR 0 2
41167: PPUSH
41168: LD_VAR 0 11
41172: PPUSH
41173: LD_VAR 0 12
41177: PPUSH
41178: CALL_OW 272
41182: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41183: LD_ADDR_VAR 0 10
41187: PUSH
41188: LD_VAR 0 3
41192: PPUSH
41193: LD_VAR 0 11
41197: PPUSH
41198: LD_VAR 0 12
41202: PPUSH
41203: CALL_OW 273
41207: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41208: LD_VAR 0 9
41212: PPUSH
41213: LD_VAR 0 10
41217: PPUSH
41218: CALL_OW 488
41222: PUSH
41223: LD_VAR 0 9
41227: PUSH
41228: LD_VAR 0 10
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_VAR 0 7
41241: IN
41242: NOT
41243: AND
41244: PUSH
41245: LD_VAR 0 9
41249: PPUSH
41250: LD_VAR 0 10
41254: PPUSH
41255: CALL_OW 458
41259: NOT
41260: AND
41261: IFFALSE 41303
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41263: LD_ADDR_VAR 0 7
41267: PUSH
41268: LD_VAR 0 7
41272: PPUSH
41273: LD_VAR 0 7
41277: PUSH
41278: LD_INT 1
41280: PLUS
41281: PPUSH
41282: LD_VAR 0 9
41286: PUSH
41287: LD_VAR 0 10
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PPUSH
41296: CALL_OW 1
41300: ST_TO_ADDR
41301: GO 41317
// i := i - 1 ;
41303: LD_ADDR_VAR 0 5
41307: PUSH
41308: LD_VAR 0 5
41312: PUSH
41313: LD_INT 1
41315: MINUS
41316: ST_TO_ADDR
// end ;
41317: GO 41123
41319: POP
41320: POP
// for i in tmp do
41321: LD_ADDR_VAR 0 5
41325: PUSH
41326: LD_VAR 0 7
41330: PUSH
41331: FOR_IN
41332: IFFALSE 41370
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41334: LD_VAR 0 1
41338: PPUSH
41339: LD_VAR 0 5
41343: PUSH
41344: LD_INT 1
41346: ARRAY
41347: PPUSH
41348: LD_VAR 0 5
41352: PUSH
41353: LD_INT 2
41355: ARRAY
41356: PPUSH
41357: CALL 40312 0 3
41361: NOT
41362: IFFALSE 41368
// exit ;
41364: POP
41365: POP
41366: GO 41372
41368: GO 41331
41370: POP
41371: POP
// end ;
41372: LD_VAR 0 4
41376: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
41377: LD_INT 0
41379: PPUSH
41380: PPUSH
41381: PPUSH
41382: PPUSH
41383: PPUSH
41384: PPUSH
41385: PPUSH
// if not GetClass ( unit ) = class_sniper then
41386: LD_VAR 0 1
41390: PPUSH
41391: CALL_OW 257
41395: PUSH
41396: LD_INT 5
41398: EQUAL
41399: NOT
41400: IFFALSE 41404
// exit ;
41402: GO 41792
// dist := 8 ;
41404: LD_ADDR_VAR 0 5
41408: PUSH
41409: LD_INT 8
41411: ST_TO_ADDR
// viewRange := 12 ;
41412: LD_ADDR_VAR 0 7
41416: PUSH
41417: LD_INT 12
41419: ST_TO_ADDR
// side := GetSide ( unit ) ;
41420: LD_ADDR_VAR 0 6
41424: PUSH
41425: LD_VAR 0 1
41429: PPUSH
41430: CALL_OW 255
41434: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41435: LD_INT 61
41437: PPUSH
41438: LD_VAR 0 6
41442: PPUSH
41443: CALL_OW 321
41447: PUSH
41448: LD_INT 2
41450: EQUAL
41451: IFFALSE 41461
// viewRange := 16 ;
41453: LD_ADDR_VAR 0 7
41457: PUSH
41458: LD_INT 16
41460: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41461: LD_VAR 0 1
41465: PPUSH
41466: LD_VAR 0 2
41470: PPUSH
41471: LD_VAR 0 3
41475: PPUSH
41476: CALL_OW 297
41480: PUSH
41481: LD_VAR 0 5
41485: GREATER
41486: IFFALSE 41565
// begin ComMoveXY ( unit , x , y ) ;
41488: LD_VAR 0 1
41492: PPUSH
41493: LD_VAR 0 2
41497: PPUSH
41498: LD_VAR 0 3
41502: PPUSH
41503: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41507: LD_INT 35
41509: PPUSH
41510: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41514: LD_VAR 0 1
41518: PPUSH
41519: LD_VAR 0 2
41523: PPUSH
41524: LD_VAR 0 3
41528: PPUSH
41529: CALL 76592 0 3
41533: NOT
41534: IFFALSE 41538
// exit ;
41536: GO 41792
// until GetDistUnitXY ( unit , x , y ) < dist ;
41538: LD_VAR 0 1
41542: PPUSH
41543: LD_VAR 0 2
41547: PPUSH
41548: LD_VAR 0 3
41552: PPUSH
41553: CALL_OW 297
41557: PUSH
41558: LD_VAR 0 5
41562: LESS
41563: IFFALSE 41507
// end ; ComTurnXY ( unit , x , y ) ;
41565: LD_VAR 0 1
41569: PPUSH
41570: LD_VAR 0 2
41574: PPUSH
41575: LD_VAR 0 3
41579: PPUSH
41580: CALL_OW 118
// wait ( 5 ) ;
41584: LD_INT 5
41586: PPUSH
41587: CALL_OW 67
// _d := GetDir ( unit ) ;
41591: LD_ADDR_VAR 0 10
41595: PUSH
41596: LD_VAR 0 1
41600: PPUSH
41601: CALL_OW 254
41605: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41606: LD_ADDR_VAR 0 8
41610: PUSH
41611: LD_VAR 0 1
41615: PPUSH
41616: CALL_OW 250
41620: PPUSH
41621: LD_VAR 0 10
41625: PPUSH
41626: LD_VAR 0 5
41630: PPUSH
41631: CALL_OW 272
41635: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41636: LD_ADDR_VAR 0 9
41640: PUSH
41641: LD_VAR 0 1
41645: PPUSH
41646: CALL_OW 251
41650: PPUSH
41651: LD_VAR 0 10
41655: PPUSH
41656: LD_VAR 0 5
41660: PPUSH
41661: CALL_OW 273
41665: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41666: LD_VAR 0 8
41670: PPUSH
41671: LD_VAR 0 9
41675: PPUSH
41676: CALL_OW 488
41680: NOT
41681: IFFALSE 41685
// exit ;
41683: GO 41792
// ComAnimCustom ( unit , 1 ) ;
41685: LD_VAR 0 1
41689: PPUSH
41690: LD_INT 1
41692: PPUSH
41693: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41697: LD_VAR 0 8
41701: PPUSH
41702: LD_VAR 0 9
41706: PPUSH
41707: LD_VAR 0 6
41711: PPUSH
41712: LD_VAR 0 7
41716: PPUSH
41717: CALL_OW 330
// repeat wait ( 1 ) ;
41721: LD_INT 1
41723: PPUSH
41724: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41728: LD_VAR 0 1
41732: PPUSH
41733: CALL_OW 316
41737: PUSH
41738: LD_VAR 0 1
41742: PPUSH
41743: CALL_OW 314
41747: OR
41748: PUSH
41749: LD_VAR 0 1
41753: PPUSH
41754: CALL_OW 302
41758: NOT
41759: OR
41760: PUSH
41761: LD_VAR 0 1
41765: PPUSH
41766: CALL_OW 301
41770: OR
41771: IFFALSE 41721
// RemoveSeeing ( _x , _y , side ) ;
41773: LD_VAR 0 8
41777: PPUSH
41778: LD_VAR 0 9
41782: PPUSH
41783: LD_VAR 0 6
41787: PPUSH
41788: CALL_OW 331
// end ; end_of_file
41792: LD_VAR 0 4
41796: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41797: LD_INT 0
41799: PPUSH
41800: PPUSH
// if exist_mode then
41801: LD_VAR 0 2
41805: IFFALSE 41830
// unit := CreateCharacter ( prefix & ident ) else
41807: LD_ADDR_VAR 0 5
41811: PUSH
41812: LD_VAR 0 3
41816: PUSH
41817: LD_VAR 0 1
41821: STR
41822: PPUSH
41823: CALL_OW 34
41827: ST_TO_ADDR
41828: GO 41845
// unit := NewCharacter ( ident ) ;
41830: LD_ADDR_VAR 0 5
41834: PUSH
41835: LD_VAR 0 1
41839: PPUSH
41840: CALL_OW 25
41844: ST_TO_ADDR
// result := unit ;
41845: LD_ADDR_VAR 0 4
41849: PUSH
41850: LD_VAR 0 5
41854: ST_TO_ADDR
// end ;
41855: LD_VAR 0 4
41859: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41860: LD_INT 0
41862: PPUSH
41863: PPUSH
// if not side or not nation then
41864: LD_VAR 0 1
41868: NOT
41869: PUSH
41870: LD_VAR 0 2
41874: NOT
41875: OR
41876: IFFALSE 41880
// exit ;
41878: GO 42644
// case nation of nation_american :
41880: LD_VAR 0 2
41884: PUSH
41885: LD_INT 1
41887: DOUBLE
41888: EQUAL
41889: IFTRUE 41893
41891: GO 42107
41893: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41894: LD_ADDR_VAR 0 4
41898: PUSH
41899: LD_INT 35
41901: PUSH
41902: LD_INT 45
41904: PUSH
41905: LD_INT 46
41907: PUSH
41908: LD_INT 47
41910: PUSH
41911: LD_INT 82
41913: PUSH
41914: LD_INT 83
41916: PUSH
41917: LD_INT 84
41919: PUSH
41920: LD_INT 85
41922: PUSH
41923: LD_INT 86
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: LD_INT 2
41931: PUSH
41932: LD_INT 6
41934: PUSH
41935: LD_INT 15
41937: PUSH
41938: LD_INT 16
41940: PUSH
41941: LD_INT 7
41943: PUSH
41944: LD_INT 12
41946: PUSH
41947: LD_INT 13
41949: PUSH
41950: LD_INT 10
41952: PUSH
41953: LD_INT 14
41955: PUSH
41956: LD_INT 20
41958: PUSH
41959: LD_INT 21
41961: PUSH
41962: LD_INT 22
41964: PUSH
41965: LD_INT 25
41967: PUSH
41968: LD_INT 32
41970: PUSH
41971: LD_INT 27
41973: PUSH
41974: LD_INT 36
41976: PUSH
41977: LD_INT 69
41979: PUSH
41980: LD_INT 39
41982: PUSH
41983: LD_INT 34
41985: PUSH
41986: LD_INT 40
41988: PUSH
41989: LD_INT 48
41991: PUSH
41992: LD_INT 49
41994: PUSH
41995: LD_INT 50
41997: PUSH
41998: LD_INT 51
42000: PUSH
42001: LD_INT 52
42003: PUSH
42004: LD_INT 53
42006: PUSH
42007: LD_INT 54
42009: PUSH
42010: LD_INT 55
42012: PUSH
42013: LD_INT 56
42015: PUSH
42016: LD_INT 57
42018: PUSH
42019: LD_INT 58
42021: PUSH
42022: LD_INT 59
42024: PUSH
42025: LD_INT 60
42027: PUSH
42028: LD_INT 61
42030: PUSH
42031: LD_INT 62
42033: PUSH
42034: LD_INT 80
42036: PUSH
42037: LD_INT 82
42039: PUSH
42040: LD_INT 83
42042: PUSH
42043: LD_INT 84
42045: PUSH
42046: LD_INT 85
42048: PUSH
42049: LD_INT 86
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: ST_TO_ADDR
42105: GO 42568
42107: LD_INT 2
42109: DOUBLE
42110: EQUAL
42111: IFTRUE 42115
42113: GO 42337
42115: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
42116: LD_ADDR_VAR 0 4
42120: PUSH
42121: LD_INT 35
42123: PUSH
42124: LD_INT 45
42126: PUSH
42127: LD_INT 46
42129: PUSH
42130: LD_INT 47
42132: PUSH
42133: LD_INT 82
42135: PUSH
42136: LD_INT 83
42138: PUSH
42139: LD_INT 84
42141: PUSH
42142: LD_INT 85
42144: PUSH
42145: LD_INT 87
42147: PUSH
42148: LD_INT 70
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: LD_INT 11
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: LD_INT 4
42162: PUSH
42163: LD_INT 5
42165: PUSH
42166: LD_INT 6
42168: PUSH
42169: LD_INT 15
42171: PUSH
42172: LD_INT 18
42174: PUSH
42175: LD_INT 7
42177: PUSH
42178: LD_INT 17
42180: PUSH
42181: LD_INT 8
42183: PUSH
42184: LD_INT 20
42186: PUSH
42187: LD_INT 21
42189: PUSH
42190: LD_INT 22
42192: PUSH
42193: LD_INT 72
42195: PUSH
42196: LD_INT 26
42198: PUSH
42199: LD_INT 69
42201: PUSH
42202: LD_INT 39
42204: PUSH
42205: LD_INT 40
42207: PUSH
42208: LD_INT 41
42210: PUSH
42211: LD_INT 42
42213: PUSH
42214: LD_INT 43
42216: PUSH
42217: LD_INT 48
42219: PUSH
42220: LD_INT 49
42222: PUSH
42223: LD_INT 50
42225: PUSH
42226: LD_INT 51
42228: PUSH
42229: LD_INT 52
42231: PUSH
42232: LD_INT 53
42234: PUSH
42235: LD_INT 54
42237: PUSH
42238: LD_INT 55
42240: PUSH
42241: LD_INT 56
42243: PUSH
42244: LD_INT 60
42246: PUSH
42247: LD_INT 61
42249: PUSH
42250: LD_INT 62
42252: PUSH
42253: LD_INT 66
42255: PUSH
42256: LD_INT 67
42258: PUSH
42259: LD_INT 68
42261: PUSH
42262: LD_INT 81
42264: PUSH
42265: LD_INT 82
42267: PUSH
42268: LD_INT 83
42270: PUSH
42271: LD_INT 84
42273: PUSH
42274: LD_INT 85
42276: PUSH
42277: LD_INT 87
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: ST_TO_ADDR
42335: GO 42568
42337: LD_INT 3
42339: DOUBLE
42340: EQUAL
42341: IFTRUE 42345
42343: GO 42567
42345: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42346: LD_ADDR_VAR 0 4
42350: PUSH
42351: LD_INT 46
42353: PUSH
42354: LD_INT 47
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: LD_INT 2
42362: PUSH
42363: LD_INT 82
42365: PUSH
42366: LD_INT 83
42368: PUSH
42369: LD_INT 84
42371: PUSH
42372: LD_INT 85
42374: PUSH
42375: LD_INT 86
42377: PUSH
42378: LD_INT 11
42380: PUSH
42381: LD_INT 9
42383: PUSH
42384: LD_INT 20
42386: PUSH
42387: LD_INT 19
42389: PUSH
42390: LD_INT 21
42392: PUSH
42393: LD_INT 24
42395: PUSH
42396: LD_INT 22
42398: PUSH
42399: LD_INT 25
42401: PUSH
42402: LD_INT 28
42404: PUSH
42405: LD_INT 29
42407: PUSH
42408: LD_INT 30
42410: PUSH
42411: LD_INT 31
42413: PUSH
42414: LD_INT 37
42416: PUSH
42417: LD_INT 38
42419: PUSH
42420: LD_INT 32
42422: PUSH
42423: LD_INT 27
42425: PUSH
42426: LD_INT 33
42428: PUSH
42429: LD_INT 69
42431: PUSH
42432: LD_INT 39
42434: PUSH
42435: LD_INT 34
42437: PUSH
42438: LD_INT 40
42440: PUSH
42441: LD_INT 71
42443: PUSH
42444: LD_INT 23
42446: PUSH
42447: LD_INT 44
42449: PUSH
42450: LD_INT 48
42452: PUSH
42453: LD_INT 49
42455: PUSH
42456: LD_INT 50
42458: PUSH
42459: LD_INT 51
42461: PUSH
42462: LD_INT 52
42464: PUSH
42465: LD_INT 53
42467: PUSH
42468: LD_INT 54
42470: PUSH
42471: LD_INT 55
42473: PUSH
42474: LD_INT 56
42476: PUSH
42477: LD_INT 57
42479: PUSH
42480: LD_INT 58
42482: PUSH
42483: LD_INT 59
42485: PUSH
42486: LD_INT 63
42488: PUSH
42489: LD_INT 64
42491: PUSH
42492: LD_INT 65
42494: PUSH
42495: LD_INT 82
42497: PUSH
42498: LD_INT 83
42500: PUSH
42501: LD_INT 84
42503: PUSH
42504: LD_INT 85
42506: PUSH
42507: LD_INT 86
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: ST_TO_ADDR
42565: GO 42568
42567: POP
// if state > - 1 and state < 3 then
42568: LD_VAR 0 3
42572: PUSH
42573: LD_INT 1
42575: NEG
42576: GREATER
42577: PUSH
42578: LD_VAR 0 3
42582: PUSH
42583: LD_INT 3
42585: LESS
42586: AND
42587: IFFALSE 42644
// for i in result do
42589: LD_ADDR_VAR 0 5
42593: PUSH
42594: LD_VAR 0 4
42598: PUSH
42599: FOR_IN
42600: IFFALSE 42642
// if GetTech ( i , side ) <> state then
42602: LD_VAR 0 5
42606: PPUSH
42607: LD_VAR 0 1
42611: PPUSH
42612: CALL_OW 321
42616: PUSH
42617: LD_VAR 0 3
42621: NONEQUAL
42622: IFFALSE 42640
// result := result diff i ;
42624: LD_ADDR_VAR 0 4
42628: PUSH
42629: LD_VAR 0 4
42633: PUSH
42634: LD_VAR 0 5
42638: DIFF
42639: ST_TO_ADDR
42640: GO 42599
42642: POP
42643: POP
// end ;
42644: LD_VAR 0 4
42648: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42649: LD_INT 0
42651: PPUSH
42652: PPUSH
42653: PPUSH
// result := true ;
42654: LD_ADDR_VAR 0 3
42658: PUSH
42659: LD_INT 1
42661: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42662: LD_ADDR_VAR 0 5
42666: PUSH
42667: LD_VAR 0 2
42671: PPUSH
42672: CALL_OW 480
42676: ST_TO_ADDR
// if not tmp then
42677: LD_VAR 0 5
42681: NOT
42682: IFFALSE 42686
// exit ;
42684: GO 42735
// for i in tmp do
42686: LD_ADDR_VAR 0 4
42690: PUSH
42691: LD_VAR 0 5
42695: PUSH
42696: FOR_IN
42697: IFFALSE 42733
// if GetTech ( i , side ) <> state_researched then
42699: LD_VAR 0 4
42703: PPUSH
42704: LD_VAR 0 1
42708: PPUSH
42709: CALL_OW 321
42713: PUSH
42714: LD_INT 2
42716: NONEQUAL
42717: IFFALSE 42731
// begin result := false ;
42719: LD_ADDR_VAR 0 3
42723: PUSH
42724: LD_INT 0
42726: ST_TO_ADDR
// exit ;
42727: POP
42728: POP
42729: GO 42735
// end ;
42731: GO 42696
42733: POP
42734: POP
// end ;
42735: LD_VAR 0 3
42739: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42740: LD_INT 0
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
42746: PPUSH
42747: PPUSH
42748: PPUSH
42749: PPUSH
42750: PPUSH
42751: PPUSH
42752: PPUSH
42753: PPUSH
42754: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42755: LD_VAR 0 1
42759: NOT
42760: PUSH
42761: LD_VAR 0 1
42765: PPUSH
42766: CALL_OW 257
42770: PUSH
42771: LD_INT 9
42773: NONEQUAL
42774: OR
42775: IFFALSE 42779
// exit ;
42777: GO 43352
// side := GetSide ( unit ) ;
42779: LD_ADDR_VAR 0 9
42783: PUSH
42784: LD_VAR 0 1
42788: PPUSH
42789: CALL_OW 255
42793: ST_TO_ADDR
// tech_space := tech_spacanom ;
42794: LD_ADDR_VAR 0 12
42798: PUSH
42799: LD_INT 29
42801: ST_TO_ADDR
// tech_time := tech_taurad ;
42802: LD_ADDR_VAR 0 13
42806: PUSH
42807: LD_INT 28
42809: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42810: LD_ADDR_VAR 0 11
42814: PUSH
42815: LD_VAR 0 1
42819: PPUSH
42820: CALL_OW 310
42824: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42825: LD_VAR 0 11
42829: PPUSH
42830: CALL_OW 247
42834: PUSH
42835: LD_INT 2
42837: EQUAL
42838: IFFALSE 42842
// exit ;
42840: GO 43352
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42842: LD_ADDR_VAR 0 8
42846: PUSH
42847: LD_INT 81
42849: PUSH
42850: LD_VAR 0 9
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 3
42861: PUSH
42862: LD_INT 21
42864: PUSH
42865: LD_INT 3
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PPUSH
42880: CALL_OW 69
42884: ST_TO_ADDR
// if not tmp then
42885: LD_VAR 0 8
42889: NOT
42890: IFFALSE 42894
// exit ;
42892: GO 43352
// if in_unit then
42894: LD_VAR 0 11
42898: IFFALSE 42922
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42900: LD_ADDR_VAR 0 10
42904: PUSH
42905: LD_VAR 0 8
42909: PPUSH
42910: LD_VAR 0 11
42914: PPUSH
42915: CALL_OW 74
42919: ST_TO_ADDR
42920: GO 42942
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42922: LD_ADDR_VAR 0 10
42926: PUSH
42927: LD_VAR 0 8
42931: PPUSH
42932: LD_VAR 0 1
42936: PPUSH
42937: CALL_OW 74
42941: ST_TO_ADDR
// if not enemy then
42942: LD_VAR 0 10
42946: NOT
42947: IFFALSE 42951
// exit ;
42949: GO 43352
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42951: LD_VAR 0 11
42955: PUSH
42956: LD_VAR 0 11
42960: PPUSH
42961: LD_VAR 0 10
42965: PPUSH
42966: CALL_OW 296
42970: PUSH
42971: LD_INT 13
42973: GREATER
42974: AND
42975: PUSH
42976: LD_VAR 0 1
42980: PPUSH
42981: LD_VAR 0 10
42985: PPUSH
42986: CALL_OW 296
42990: PUSH
42991: LD_INT 12
42993: GREATER
42994: OR
42995: IFFALSE 42999
// exit ;
42997: GO 43352
// missile := [ 1 ] ;
42999: LD_ADDR_VAR 0 14
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: EMPTY
43008: LIST
43009: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43010: LD_VAR 0 9
43014: PPUSH
43015: LD_VAR 0 12
43019: PPUSH
43020: CALL_OW 325
43024: IFFALSE 43053
// missile := Insert ( missile , missile + 1 , 2 ) ;
43026: LD_ADDR_VAR 0 14
43030: PUSH
43031: LD_VAR 0 14
43035: PPUSH
43036: LD_VAR 0 14
43040: PUSH
43041: LD_INT 1
43043: PLUS
43044: PPUSH
43045: LD_INT 2
43047: PPUSH
43048: CALL_OW 2
43052: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43053: LD_VAR 0 9
43057: PPUSH
43058: LD_VAR 0 13
43062: PPUSH
43063: CALL_OW 325
43067: PUSH
43068: LD_VAR 0 10
43072: PPUSH
43073: CALL_OW 255
43077: PPUSH
43078: LD_VAR 0 13
43082: PPUSH
43083: CALL_OW 325
43087: NOT
43088: AND
43089: IFFALSE 43118
// missile := Insert ( missile , missile + 1 , 3 ) ;
43091: LD_ADDR_VAR 0 14
43095: PUSH
43096: LD_VAR 0 14
43100: PPUSH
43101: LD_VAR 0 14
43105: PUSH
43106: LD_INT 1
43108: PLUS
43109: PPUSH
43110: LD_INT 3
43112: PPUSH
43113: CALL_OW 2
43117: ST_TO_ADDR
// if missile < 2 then
43118: LD_VAR 0 14
43122: PUSH
43123: LD_INT 2
43125: LESS
43126: IFFALSE 43130
// exit ;
43128: GO 43352
// x := GetX ( enemy ) ;
43130: LD_ADDR_VAR 0 4
43134: PUSH
43135: LD_VAR 0 10
43139: PPUSH
43140: CALL_OW 250
43144: ST_TO_ADDR
// y := GetY ( enemy ) ;
43145: LD_ADDR_VAR 0 5
43149: PUSH
43150: LD_VAR 0 10
43154: PPUSH
43155: CALL_OW 251
43159: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43160: LD_ADDR_VAR 0 6
43164: PUSH
43165: LD_VAR 0 4
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PPUSH
43174: LD_INT 1
43176: PPUSH
43177: CALL_OW 12
43181: PLUS
43182: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43183: LD_ADDR_VAR 0 7
43187: PUSH
43188: LD_VAR 0 5
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PPUSH
43197: LD_INT 1
43199: PPUSH
43200: CALL_OW 12
43204: PLUS
43205: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43206: LD_VAR 0 6
43210: PPUSH
43211: LD_VAR 0 7
43215: PPUSH
43216: CALL_OW 488
43220: NOT
43221: IFFALSE 43243
// begin _x := x ;
43223: LD_ADDR_VAR 0 6
43227: PUSH
43228: LD_VAR 0 4
43232: ST_TO_ADDR
// _y := y ;
43233: LD_ADDR_VAR 0 7
43237: PUSH
43238: LD_VAR 0 5
43242: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43243: LD_ADDR_VAR 0 3
43247: PUSH
43248: LD_INT 1
43250: PPUSH
43251: LD_VAR 0 14
43255: PPUSH
43256: CALL_OW 12
43260: ST_TO_ADDR
// case i of 1 :
43261: LD_VAR 0 3
43265: PUSH
43266: LD_INT 1
43268: DOUBLE
43269: EQUAL
43270: IFTRUE 43274
43272: GO 43291
43274: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43275: LD_VAR 0 1
43279: PPUSH
43280: LD_VAR 0 10
43284: PPUSH
43285: CALL_OW 115
43289: GO 43352
43291: LD_INT 2
43293: DOUBLE
43294: EQUAL
43295: IFTRUE 43299
43297: GO 43321
43299: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43300: LD_VAR 0 1
43304: PPUSH
43305: LD_VAR 0 6
43309: PPUSH
43310: LD_VAR 0 7
43314: PPUSH
43315: CALL_OW 153
43319: GO 43352
43321: LD_INT 3
43323: DOUBLE
43324: EQUAL
43325: IFTRUE 43329
43327: GO 43351
43329: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43330: LD_VAR 0 1
43334: PPUSH
43335: LD_VAR 0 6
43339: PPUSH
43340: LD_VAR 0 7
43344: PPUSH
43345: CALL_OW 154
43349: GO 43352
43351: POP
// end ;
43352: LD_VAR 0 2
43356: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43357: LD_INT 0
43359: PPUSH
43360: PPUSH
43361: PPUSH
43362: PPUSH
43363: PPUSH
43364: PPUSH
// if not unit or not building then
43365: LD_VAR 0 1
43369: NOT
43370: PUSH
43371: LD_VAR 0 2
43375: NOT
43376: OR
43377: IFFALSE 43381
// exit ;
43379: GO 43539
// x := GetX ( building ) ;
43381: LD_ADDR_VAR 0 5
43385: PUSH
43386: LD_VAR 0 2
43390: PPUSH
43391: CALL_OW 250
43395: ST_TO_ADDR
// y := GetY ( building ) ;
43396: LD_ADDR_VAR 0 6
43400: PUSH
43401: LD_VAR 0 2
43405: PPUSH
43406: CALL_OW 251
43410: ST_TO_ADDR
// for i = 0 to 5 do
43411: LD_ADDR_VAR 0 4
43415: PUSH
43416: DOUBLE
43417: LD_INT 0
43419: DEC
43420: ST_TO_ADDR
43421: LD_INT 5
43423: PUSH
43424: FOR_TO
43425: IFFALSE 43537
// begin _x := ShiftX ( x , i , 3 ) ;
43427: LD_ADDR_VAR 0 7
43431: PUSH
43432: LD_VAR 0 5
43436: PPUSH
43437: LD_VAR 0 4
43441: PPUSH
43442: LD_INT 3
43444: PPUSH
43445: CALL_OW 272
43449: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43450: LD_ADDR_VAR 0 8
43454: PUSH
43455: LD_VAR 0 6
43459: PPUSH
43460: LD_VAR 0 4
43464: PPUSH
43465: LD_INT 3
43467: PPUSH
43468: CALL_OW 273
43472: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43473: LD_VAR 0 7
43477: PPUSH
43478: LD_VAR 0 8
43482: PPUSH
43483: CALL_OW 488
43487: NOT
43488: IFFALSE 43492
// continue ;
43490: GO 43424
// if HexInfo ( _x , _y ) = 0 then
43492: LD_VAR 0 7
43496: PPUSH
43497: LD_VAR 0 8
43501: PPUSH
43502: CALL_OW 428
43506: PUSH
43507: LD_INT 0
43509: EQUAL
43510: IFFALSE 43535
// begin ComMoveXY ( unit , _x , _y ) ;
43512: LD_VAR 0 1
43516: PPUSH
43517: LD_VAR 0 7
43521: PPUSH
43522: LD_VAR 0 8
43526: PPUSH
43527: CALL_OW 111
// exit ;
43531: POP
43532: POP
43533: GO 43539
// end ; end ;
43535: GO 43424
43537: POP
43538: POP
// end ;
43539: LD_VAR 0 3
43543: RET
// export function ScanBase ( side , base_area ) ; begin
43544: LD_INT 0
43546: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43547: LD_ADDR_VAR 0 3
43551: PUSH
43552: LD_VAR 0 2
43556: PPUSH
43557: LD_INT 81
43559: PUSH
43560: LD_VAR 0 1
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PPUSH
43569: CALL_OW 70
43573: ST_TO_ADDR
// end ;
43574: LD_VAR 0 3
43578: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43579: LD_INT 0
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
// result := false ;
43585: LD_ADDR_VAR 0 2
43589: PUSH
43590: LD_INT 0
43592: ST_TO_ADDR
// side := GetSide ( unit ) ;
43593: LD_ADDR_VAR 0 3
43597: PUSH
43598: LD_VAR 0 1
43602: PPUSH
43603: CALL_OW 255
43607: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43608: LD_ADDR_VAR 0 4
43612: PUSH
43613: LD_VAR 0 1
43617: PPUSH
43618: CALL_OW 248
43622: ST_TO_ADDR
// case nat of 1 :
43623: LD_VAR 0 4
43627: PUSH
43628: LD_INT 1
43630: DOUBLE
43631: EQUAL
43632: IFTRUE 43636
43634: GO 43647
43636: POP
// tech := tech_lassight ; 2 :
43637: LD_ADDR_VAR 0 5
43641: PUSH
43642: LD_INT 12
43644: ST_TO_ADDR
43645: GO 43686
43647: LD_INT 2
43649: DOUBLE
43650: EQUAL
43651: IFTRUE 43655
43653: GO 43666
43655: POP
// tech := tech_mortar ; 3 :
43656: LD_ADDR_VAR 0 5
43660: PUSH
43661: LD_INT 41
43663: ST_TO_ADDR
43664: GO 43686
43666: LD_INT 3
43668: DOUBLE
43669: EQUAL
43670: IFTRUE 43674
43672: GO 43685
43674: POP
// tech := tech_bazooka ; end ;
43675: LD_ADDR_VAR 0 5
43679: PUSH
43680: LD_INT 44
43682: ST_TO_ADDR
43683: GO 43686
43685: POP
// if Researched ( side , tech ) then
43686: LD_VAR 0 3
43690: PPUSH
43691: LD_VAR 0 5
43695: PPUSH
43696: CALL_OW 325
43700: IFFALSE 43727
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43702: LD_ADDR_VAR 0 2
43706: PUSH
43707: LD_INT 5
43709: PUSH
43710: LD_INT 8
43712: PUSH
43713: LD_INT 9
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: LIST
43720: PUSH
43721: LD_VAR 0 4
43725: ARRAY
43726: ST_TO_ADDR
// end ;
43727: LD_VAR 0 2
43731: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43732: LD_INT 0
43734: PPUSH
43735: PPUSH
43736: PPUSH
// if not mines then
43737: LD_VAR 0 2
43741: NOT
43742: IFFALSE 43746
// exit ;
43744: GO 43890
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43746: LD_ADDR_VAR 0 5
43750: PUSH
43751: LD_INT 81
43753: PUSH
43754: LD_VAR 0 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 3
43765: PUSH
43766: LD_INT 21
43768: PUSH
43769: LD_INT 3
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PPUSH
43784: CALL_OW 69
43788: ST_TO_ADDR
// for i in mines do
43789: LD_ADDR_VAR 0 4
43793: PUSH
43794: LD_VAR 0 2
43798: PUSH
43799: FOR_IN
43800: IFFALSE 43888
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43802: LD_VAR 0 4
43806: PUSH
43807: LD_INT 1
43809: ARRAY
43810: PPUSH
43811: LD_VAR 0 4
43815: PUSH
43816: LD_INT 2
43818: ARRAY
43819: PPUSH
43820: CALL_OW 458
43824: NOT
43825: IFFALSE 43829
// continue ;
43827: GO 43799
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43829: LD_VAR 0 4
43833: PUSH
43834: LD_INT 1
43836: ARRAY
43837: PPUSH
43838: LD_VAR 0 4
43842: PUSH
43843: LD_INT 2
43845: ARRAY
43846: PPUSH
43847: CALL_OW 428
43851: PUSH
43852: LD_VAR 0 5
43856: IN
43857: IFFALSE 43886
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43859: LD_VAR 0 4
43863: PUSH
43864: LD_INT 1
43866: ARRAY
43867: PPUSH
43868: LD_VAR 0 4
43872: PUSH
43873: LD_INT 2
43875: ARRAY
43876: PPUSH
43877: LD_VAR 0 1
43881: PPUSH
43882: CALL_OW 456
// end ;
43886: GO 43799
43888: POP
43889: POP
// end ;
43890: LD_VAR 0 3
43894: RET
// export function Count ( array ) ; var i ; begin
43895: LD_INT 0
43897: PPUSH
43898: PPUSH
// result := 0 ;
43899: LD_ADDR_VAR 0 2
43903: PUSH
43904: LD_INT 0
43906: ST_TO_ADDR
// for i in array do
43907: LD_ADDR_VAR 0 3
43911: PUSH
43912: LD_VAR 0 1
43916: PUSH
43917: FOR_IN
43918: IFFALSE 43942
// if i then
43920: LD_VAR 0 3
43924: IFFALSE 43940
// result := result + 1 ;
43926: LD_ADDR_VAR 0 2
43930: PUSH
43931: LD_VAR 0 2
43935: PUSH
43936: LD_INT 1
43938: PLUS
43939: ST_TO_ADDR
43940: GO 43917
43942: POP
43943: POP
// end ;
43944: LD_VAR 0 2
43948: RET
// export function IsEmpty ( building ) ; begin
43949: LD_INT 0
43951: PPUSH
// if not building then
43952: LD_VAR 0 1
43956: NOT
43957: IFFALSE 43961
// exit ;
43959: GO 44004
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43961: LD_ADDR_VAR 0 2
43965: PUSH
43966: LD_VAR 0 1
43970: PUSH
43971: LD_INT 22
43973: PUSH
43974: LD_VAR 0 1
43978: PPUSH
43979: CALL_OW 255
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 58
43990: PUSH
43991: EMPTY
43992: LIST
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PPUSH
43998: CALL_OW 69
44002: IN
44003: ST_TO_ADDR
// end ;
44004: LD_VAR 0 2
44008: RET
// export function IsNotFull ( building ) ; begin
44009: LD_INT 0
44011: PPUSH
// if not building then
44012: LD_VAR 0 1
44016: NOT
44017: IFFALSE 44021
// exit ;
44019: GO 44040
// result := UnitsInside ( building ) < 6 ;
44021: LD_ADDR_VAR 0 2
44025: PUSH
44026: LD_VAR 0 1
44030: PPUSH
44031: CALL_OW 313
44035: PUSH
44036: LD_INT 6
44038: LESS
44039: ST_TO_ADDR
// end ;
44040: LD_VAR 0 2
44044: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44045: LD_INT 0
44047: PPUSH
44048: PPUSH
44049: PPUSH
44050: PPUSH
// tmp := [ ] ;
44051: LD_ADDR_VAR 0 3
44055: PUSH
44056: EMPTY
44057: ST_TO_ADDR
// list := [ ] ;
44058: LD_ADDR_VAR 0 5
44062: PUSH
44063: EMPTY
44064: ST_TO_ADDR
// for i = 16 to 25 do
44065: LD_ADDR_VAR 0 4
44069: PUSH
44070: DOUBLE
44071: LD_INT 16
44073: DEC
44074: ST_TO_ADDR
44075: LD_INT 25
44077: PUSH
44078: FOR_TO
44079: IFFALSE 44152
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44081: LD_ADDR_VAR 0 3
44085: PUSH
44086: LD_VAR 0 3
44090: PUSH
44091: LD_INT 22
44093: PUSH
44094: LD_VAR 0 1
44098: PPUSH
44099: CALL_OW 255
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 91
44110: PUSH
44111: LD_VAR 0 1
44115: PUSH
44116: LD_INT 6
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 30
44126: PUSH
44127: LD_VAR 0 4
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: PUSH
44141: EMPTY
44142: LIST
44143: PPUSH
44144: CALL_OW 69
44148: ADD
44149: ST_TO_ADDR
44150: GO 44078
44152: POP
44153: POP
// for i = 1 to tmp do
44154: LD_ADDR_VAR 0 4
44158: PUSH
44159: DOUBLE
44160: LD_INT 1
44162: DEC
44163: ST_TO_ADDR
44164: LD_VAR 0 3
44168: PUSH
44169: FOR_TO
44170: IFFALSE 44258
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44172: LD_ADDR_VAR 0 5
44176: PUSH
44177: LD_VAR 0 5
44181: PUSH
44182: LD_VAR 0 3
44186: PUSH
44187: LD_VAR 0 4
44191: ARRAY
44192: PPUSH
44193: CALL_OW 266
44197: PUSH
44198: LD_VAR 0 3
44202: PUSH
44203: LD_VAR 0 4
44207: ARRAY
44208: PPUSH
44209: CALL_OW 250
44213: PUSH
44214: LD_VAR 0 3
44218: PUSH
44219: LD_VAR 0 4
44223: ARRAY
44224: PPUSH
44225: CALL_OW 251
44229: PUSH
44230: LD_VAR 0 3
44234: PUSH
44235: LD_VAR 0 4
44239: ARRAY
44240: PPUSH
44241: CALL_OW 254
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: PUSH
44252: EMPTY
44253: LIST
44254: ADD
44255: ST_TO_ADDR
44256: GO 44169
44258: POP
44259: POP
// result := list ;
44260: LD_ADDR_VAR 0 2
44264: PUSH
44265: LD_VAR 0 5
44269: ST_TO_ADDR
// end ;
44270: LD_VAR 0 2
44274: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44275: LD_INT 0
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
44281: PPUSH
44282: PPUSH
44283: PPUSH
// if not factory then
44284: LD_VAR 0 1
44288: NOT
44289: IFFALSE 44293
// exit ;
44291: GO 44886
// if control = control_apeman then
44293: LD_VAR 0 4
44297: PUSH
44298: LD_INT 5
44300: EQUAL
44301: IFFALSE 44410
// begin tmp := UnitsInside ( factory ) ;
44303: LD_ADDR_VAR 0 8
44307: PUSH
44308: LD_VAR 0 1
44312: PPUSH
44313: CALL_OW 313
44317: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44318: LD_VAR 0 8
44322: PPUSH
44323: LD_INT 25
44325: PUSH
44326: LD_INT 12
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PPUSH
44333: CALL_OW 72
44337: NOT
44338: IFFALSE 44348
// control := control_manual ;
44340: LD_ADDR_VAR 0 4
44344: PUSH
44345: LD_INT 1
44347: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44348: LD_ADDR_VAR 0 8
44352: PUSH
44353: LD_VAR 0 1
44357: PPUSH
44358: CALL 44045 0 1
44362: ST_TO_ADDR
// if tmp then
44363: LD_VAR 0 8
44367: IFFALSE 44410
// begin for i in tmp do
44369: LD_ADDR_VAR 0 7
44373: PUSH
44374: LD_VAR 0 8
44378: PUSH
44379: FOR_IN
44380: IFFALSE 44408
// if i [ 1 ] = b_ext_radio then
44382: LD_VAR 0 7
44386: PUSH
44387: LD_INT 1
44389: ARRAY
44390: PUSH
44391: LD_INT 22
44393: EQUAL
44394: IFFALSE 44406
// begin control := control_remote ;
44396: LD_ADDR_VAR 0 4
44400: PUSH
44401: LD_INT 2
44403: ST_TO_ADDR
// break ;
44404: GO 44408
// end ;
44406: GO 44379
44408: POP
44409: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44410: LD_VAR 0 1
44414: PPUSH
44415: LD_VAR 0 2
44419: PPUSH
44420: LD_VAR 0 3
44424: PPUSH
44425: LD_VAR 0 4
44429: PPUSH
44430: LD_VAR 0 5
44434: PPUSH
44435: CALL_OW 448
44439: IFFALSE 44474
// begin result := [ chassis , engine , control , weapon ] ;
44441: LD_ADDR_VAR 0 6
44445: PUSH
44446: LD_VAR 0 2
44450: PUSH
44451: LD_VAR 0 3
44455: PUSH
44456: LD_VAR 0 4
44460: PUSH
44461: LD_VAR 0 5
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: ST_TO_ADDR
// exit ;
44472: GO 44886
// end ; _chassis := AvailableChassisList ( factory ) ;
44474: LD_ADDR_VAR 0 9
44478: PUSH
44479: LD_VAR 0 1
44483: PPUSH
44484: CALL_OW 475
44488: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44489: LD_ADDR_VAR 0 11
44493: PUSH
44494: LD_VAR 0 1
44498: PPUSH
44499: CALL_OW 476
44503: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44504: LD_ADDR_VAR 0 12
44508: PUSH
44509: LD_VAR 0 1
44513: PPUSH
44514: CALL_OW 477
44518: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44519: LD_ADDR_VAR 0 10
44523: PUSH
44524: LD_VAR 0 1
44528: PPUSH
44529: CALL_OW 478
44533: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44534: LD_VAR 0 9
44538: NOT
44539: PUSH
44540: LD_VAR 0 11
44544: NOT
44545: OR
44546: PUSH
44547: LD_VAR 0 12
44551: NOT
44552: OR
44553: PUSH
44554: LD_VAR 0 10
44558: NOT
44559: OR
44560: IFFALSE 44595
// begin result := [ chassis , engine , control , weapon ] ;
44562: LD_ADDR_VAR 0 6
44566: PUSH
44567: LD_VAR 0 2
44571: PUSH
44572: LD_VAR 0 3
44576: PUSH
44577: LD_VAR 0 4
44581: PUSH
44582: LD_VAR 0 5
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: ST_TO_ADDR
// exit ;
44593: GO 44886
// end ; if not chassis in _chassis then
44595: LD_VAR 0 2
44599: PUSH
44600: LD_VAR 0 9
44604: IN
44605: NOT
44606: IFFALSE 44632
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44608: LD_ADDR_VAR 0 2
44612: PUSH
44613: LD_VAR 0 9
44617: PUSH
44618: LD_INT 1
44620: PPUSH
44621: LD_VAR 0 9
44625: PPUSH
44626: CALL_OW 12
44630: ARRAY
44631: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44632: LD_VAR 0 2
44636: PPUSH
44637: LD_VAR 0 3
44641: PPUSH
44642: CALL 44891 0 2
44646: NOT
44647: IFFALSE 44706
// repeat engine := _engine [ 1 ] ;
44649: LD_ADDR_VAR 0 3
44653: PUSH
44654: LD_VAR 0 11
44658: PUSH
44659: LD_INT 1
44661: ARRAY
44662: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44663: LD_ADDR_VAR 0 11
44667: PUSH
44668: LD_VAR 0 11
44672: PPUSH
44673: LD_INT 1
44675: PPUSH
44676: CALL_OW 3
44680: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44681: LD_VAR 0 2
44685: PPUSH
44686: LD_VAR 0 3
44690: PPUSH
44691: CALL 44891 0 2
44695: PUSH
44696: LD_VAR 0 11
44700: PUSH
44701: EMPTY
44702: EQUAL
44703: OR
44704: IFFALSE 44649
// if not control in _control then
44706: LD_VAR 0 4
44710: PUSH
44711: LD_VAR 0 12
44715: IN
44716: NOT
44717: IFFALSE 44743
// control := _control [ rand ( 1 , _control ) ] ;
44719: LD_ADDR_VAR 0 4
44723: PUSH
44724: LD_VAR 0 12
44728: PUSH
44729: LD_INT 1
44731: PPUSH
44732: LD_VAR 0 12
44736: PPUSH
44737: CALL_OW 12
44741: ARRAY
44742: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44743: LD_VAR 0 2
44747: PPUSH
44748: LD_VAR 0 5
44752: PPUSH
44753: CALL 45111 0 2
44757: NOT
44758: IFFALSE 44817
// repeat weapon := _weapon [ 1 ] ;
44760: LD_ADDR_VAR 0 5
44764: PUSH
44765: LD_VAR 0 10
44769: PUSH
44770: LD_INT 1
44772: ARRAY
44773: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44774: LD_ADDR_VAR 0 10
44778: PUSH
44779: LD_VAR 0 10
44783: PPUSH
44784: LD_INT 1
44786: PPUSH
44787: CALL_OW 3
44791: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44792: LD_VAR 0 2
44796: PPUSH
44797: LD_VAR 0 5
44801: PPUSH
44802: CALL 45111 0 2
44806: PUSH
44807: LD_VAR 0 10
44811: PUSH
44812: EMPTY
44813: EQUAL
44814: OR
44815: IFFALSE 44760
// result := [ ] ;
44817: LD_ADDR_VAR 0 6
44821: PUSH
44822: EMPTY
44823: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44824: LD_VAR 0 1
44828: PPUSH
44829: LD_VAR 0 2
44833: PPUSH
44834: LD_VAR 0 3
44838: PPUSH
44839: LD_VAR 0 4
44843: PPUSH
44844: LD_VAR 0 5
44848: PPUSH
44849: CALL_OW 448
44853: IFFALSE 44886
// result := [ chassis , engine , control , weapon ] ;
44855: LD_ADDR_VAR 0 6
44859: PUSH
44860: LD_VAR 0 2
44864: PUSH
44865: LD_VAR 0 3
44869: PUSH
44870: LD_VAR 0 4
44874: PUSH
44875: LD_VAR 0 5
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: ST_TO_ADDR
// end ;
44886: LD_VAR 0 6
44890: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44891: LD_INT 0
44893: PPUSH
// if not chassis or not engine then
44894: LD_VAR 0 1
44898: NOT
44899: PUSH
44900: LD_VAR 0 2
44904: NOT
44905: OR
44906: IFFALSE 44910
// exit ;
44908: GO 45106
// case engine of engine_solar :
44910: LD_VAR 0 2
44914: PUSH
44915: LD_INT 2
44917: DOUBLE
44918: EQUAL
44919: IFTRUE 44923
44921: GO 44961
44923: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44924: LD_ADDR_VAR 0 3
44928: PUSH
44929: LD_INT 11
44931: PUSH
44932: LD_INT 12
44934: PUSH
44935: LD_INT 13
44937: PUSH
44938: LD_INT 14
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 2
44946: PUSH
44947: LD_INT 3
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: ST_TO_ADDR
44959: GO 45090
44961: LD_INT 1
44963: DOUBLE
44964: EQUAL
44965: IFTRUE 44969
44967: GO 45031
44969: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44970: LD_ADDR_VAR 0 3
44974: PUSH
44975: LD_INT 11
44977: PUSH
44978: LD_INT 12
44980: PUSH
44981: LD_INT 13
44983: PUSH
44984: LD_INT 14
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: LD_INT 3
44995: PUSH
44996: LD_INT 4
44998: PUSH
44999: LD_INT 5
45001: PUSH
45002: LD_INT 21
45004: PUSH
45005: LD_INT 23
45007: PUSH
45008: LD_INT 22
45010: PUSH
45011: LD_INT 24
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: ST_TO_ADDR
45029: GO 45090
45031: LD_INT 3
45033: DOUBLE
45034: EQUAL
45035: IFTRUE 45039
45037: GO 45089
45039: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45040: LD_ADDR_VAR 0 3
45044: PUSH
45045: LD_INT 13
45047: PUSH
45048: LD_INT 14
45050: PUSH
45051: LD_INT 2
45053: PUSH
45054: LD_INT 3
45056: PUSH
45057: LD_INT 4
45059: PUSH
45060: LD_INT 5
45062: PUSH
45063: LD_INT 21
45065: PUSH
45066: LD_INT 22
45068: PUSH
45069: LD_INT 23
45071: PUSH
45072: LD_INT 24
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: ST_TO_ADDR
45087: GO 45090
45089: POP
// result := ( chassis in result ) ;
45090: LD_ADDR_VAR 0 3
45094: PUSH
45095: LD_VAR 0 1
45099: PUSH
45100: LD_VAR 0 3
45104: IN
45105: ST_TO_ADDR
// end ;
45106: LD_VAR 0 3
45110: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45111: LD_INT 0
45113: PPUSH
// if not chassis or not weapon then
45114: LD_VAR 0 1
45118: NOT
45119: PUSH
45120: LD_VAR 0 2
45124: NOT
45125: OR
45126: IFFALSE 45130
// exit ;
45128: GO 46156
// case weapon of us_machine_gun :
45130: LD_VAR 0 2
45134: PUSH
45135: LD_INT 2
45137: DOUBLE
45138: EQUAL
45139: IFTRUE 45143
45141: GO 45173
45143: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45144: LD_ADDR_VAR 0 3
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: LD_INT 3
45157: PUSH
45158: LD_INT 4
45160: PUSH
45161: LD_INT 5
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: ST_TO_ADDR
45171: GO 46140
45173: LD_INT 3
45175: DOUBLE
45176: EQUAL
45177: IFTRUE 45181
45179: GO 45211
45181: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45182: LD_ADDR_VAR 0 3
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 2
45192: PUSH
45193: LD_INT 3
45195: PUSH
45196: LD_INT 4
45198: PUSH
45199: LD_INT 5
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: ST_TO_ADDR
45209: GO 46140
45211: LD_INT 11
45213: DOUBLE
45214: EQUAL
45215: IFTRUE 45219
45217: GO 45249
45219: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45220: LD_ADDR_VAR 0 3
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: LD_INT 3
45233: PUSH
45234: LD_INT 4
45236: PUSH
45237: LD_INT 5
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: ST_TO_ADDR
45247: GO 46140
45249: LD_INT 4
45251: DOUBLE
45252: EQUAL
45253: IFTRUE 45257
45255: GO 45283
45257: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45258: LD_ADDR_VAR 0 3
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: LD_INT 3
45268: PUSH
45269: LD_INT 4
45271: PUSH
45272: LD_INT 5
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: ST_TO_ADDR
45281: GO 46140
45283: LD_INT 5
45285: DOUBLE
45286: EQUAL
45287: IFTRUE 45291
45289: GO 45317
45291: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45292: LD_ADDR_VAR 0 3
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: LD_INT 4
45305: PUSH
45306: LD_INT 5
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: ST_TO_ADDR
45315: GO 46140
45317: LD_INT 9
45319: DOUBLE
45320: EQUAL
45321: IFTRUE 45325
45323: GO 45351
45325: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45326: LD_ADDR_VAR 0 3
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: LD_INT 3
45336: PUSH
45337: LD_INT 4
45339: PUSH
45340: LD_INT 5
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: ST_TO_ADDR
45349: GO 46140
45351: LD_INT 7
45353: DOUBLE
45354: EQUAL
45355: IFTRUE 45359
45357: GO 45385
45359: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45360: LD_ADDR_VAR 0 3
45364: PUSH
45365: LD_INT 2
45367: PUSH
45368: LD_INT 3
45370: PUSH
45371: LD_INT 4
45373: PUSH
45374: LD_INT 5
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: ST_TO_ADDR
45383: GO 46140
45385: LD_INT 12
45387: DOUBLE
45388: EQUAL
45389: IFTRUE 45393
45391: GO 45419
45393: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45394: LD_ADDR_VAR 0 3
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: LD_INT 3
45404: PUSH
45405: LD_INT 4
45407: PUSH
45408: LD_INT 5
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: ST_TO_ADDR
45417: GO 46140
45419: LD_INT 13
45421: DOUBLE
45422: EQUAL
45423: IFTRUE 45427
45425: GO 45453
45427: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45428: LD_ADDR_VAR 0 3
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: LD_INT 3
45438: PUSH
45439: LD_INT 4
45441: PUSH
45442: LD_INT 5
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: ST_TO_ADDR
45451: GO 46140
45453: LD_INT 14
45455: DOUBLE
45456: EQUAL
45457: IFTRUE 45461
45459: GO 45479
45461: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45462: LD_ADDR_VAR 0 3
45466: PUSH
45467: LD_INT 4
45469: PUSH
45470: LD_INT 5
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: ST_TO_ADDR
45477: GO 46140
45479: LD_INT 6
45481: DOUBLE
45482: EQUAL
45483: IFTRUE 45487
45485: GO 45505
45487: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45488: LD_ADDR_VAR 0 3
45492: PUSH
45493: LD_INT 4
45495: PUSH
45496: LD_INT 5
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: ST_TO_ADDR
45503: GO 46140
45505: LD_INT 10
45507: DOUBLE
45508: EQUAL
45509: IFTRUE 45513
45511: GO 45531
45513: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45514: LD_ADDR_VAR 0 3
45518: PUSH
45519: LD_INT 4
45521: PUSH
45522: LD_INT 5
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: ST_TO_ADDR
45529: GO 46140
45531: LD_INT 22
45533: DOUBLE
45534: EQUAL
45535: IFTRUE 45539
45537: GO 45565
45539: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45540: LD_ADDR_VAR 0 3
45544: PUSH
45545: LD_INT 11
45547: PUSH
45548: LD_INT 12
45550: PUSH
45551: LD_INT 13
45553: PUSH
45554: LD_INT 14
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: ST_TO_ADDR
45563: GO 46140
45565: LD_INT 23
45567: DOUBLE
45568: EQUAL
45569: IFTRUE 45573
45571: GO 45599
45573: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45574: LD_ADDR_VAR 0 3
45578: PUSH
45579: LD_INT 11
45581: PUSH
45582: LD_INT 12
45584: PUSH
45585: LD_INT 13
45587: PUSH
45588: LD_INT 14
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: ST_TO_ADDR
45597: GO 46140
45599: LD_INT 24
45601: DOUBLE
45602: EQUAL
45603: IFTRUE 45607
45605: GO 45633
45607: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45608: LD_ADDR_VAR 0 3
45612: PUSH
45613: LD_INT 11
45615: PUSH
45616: LD_INT 12
45618: PUSH
45619: LD_INT 13
45621: PUSH
45622: LD_INT 14
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: ST_TO_ADDR
45631: GO 46140
45633: LD_INT 30
45635: DOUBLE
45636: EQUAL
45637: IFTRUE 45641
45639: GO 45667
45641: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45642: LD_ADDR_VAR 0 3
45646: PUSH
45647: LD_INT 11
45649: PUSH
45650: LD_INT 12
45652: PUSH
45653: LD_INT 13
45655: PUSH
45656: LD_INT 14
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: ST_TO_ADDR
45665: GO 46140
45667: LD_INT 25
45669: DOUBLE
45670: EQUAL
45671: IFTRUE 45675
45673: GO 45693
45675: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45676: LD_ADDR_VAR 0 3
45680: PUSH
45681: LD_INT 13
45683: PUSH
45684: LD_INT 14
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: ST_TO_ADDR
45691: GO 46140
45693: LD_INT 27
45695: DOUBLE
45696: EQUAL
45697: IFTRUE 45701
45699: GO 45719
45701: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45702: LD_ADDR_VAR 0 3
45706: PUSH
45707: LD_INT 13
45709: PUSH
45710: LD_INT 14
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: ST_TO_ADDR
45717: GO 46140
45719: LD_INT 28
45721: DOUBLE
45722: EQUAL
45723: IFTRUE 45727
45725: GO 45745
45727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45728: LD_ADDR_VAR 0 3
45732: PUSH
45733: LD_INT 13
45735: PUSH
45736: LD_INT 14
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: ST_TO_ADDR
45743: GO 46140
45745: LD_INT 29
45747: DOUBLE
45748: EQUAL
45749: IFTRUE 45753
45751: GO 45771
45753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45754: LD_ADDR_VAR 0 3
45758: PUSH
45759: LD_INT 13
45761: PUSH
45762: LD_INT 14
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: ST_TO_ADDR
45769: GO 46140
45771: LD_INT 31
45773: DOUBLE
45774: EQUAL
45775: IFTRUE 45779
45777: GO 45797
45779: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45780: LD_ADDR_VAR 0 3
45784: PUSH
45785: LD_INT 13
45787: PUSH
45788: LD_INT 14
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: ST_TO_ADDR
45795: GO 46140
45797: LD_INT 26
45799: DOUBLE
45800: EQUAL
45801: IFTRUE 45805
45803: GO 45823
45805: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45806: LD_ADDR_VAR 0 3
45810: PUSH
45811: LD_INT 13
45813: PUSH
45814: LD_INT 14
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: ST_TO_ADDR
45821: GO 46140
45823: LD_INT 42
45825: DOUBLE
45826: EQUAL
45827: IFTRUE 45831
45829: GO 45857
45831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45832: LD_ADDR_VAR 0 3
45836: PUSH
45837: LD_INT 21
45839: PUSH
45840: LD_INT 22
45842: PUSH
45843: LD_INT 23
45845: PUSH
45846: LD_INT 24
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: ST_TO_ADDR
45855: GO 46140
45857: LD_INT 43
45859: DOUBLE
45860: EQUAL
45861: IFTRUE 45865
45863: GO 45891
45865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45866: LD_ADDR_VAR 0 3
45870: PUSH
45871: LD_INT 21
45873: PUSH
45874: LD_INT 22
45876: PUSH
45877: LD_INT 23
45879: PUSH
45880: LD_INT 24
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: ST_TO_ADDR
45889: GO 46140
45891: LD_INT 44
45893: DOUBLE
45894: EQUAL
45895: IFTRUE 45899
45897: GO 45925
45899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45900: LD_ADDR_VAR 0 3
45904: PUSH
45905: LD_INT 21
45907: PUSH
45908: LD_INT 22
45910: PUSH
45911: LD_INT 23
45913: PUSH
45914: LD_INT 24
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: ST_TO_ADDR
45923: GO 46140
45925: LD_INT 45
45927: DOUBLE
45928: EQUAL
45929: IFTRUE 45933
45931: GO 45959
45933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45934: LD_ADDR_VAR 0 3
45938: PUSH
45939: LD_INT 21
45941: PUSH
45942: LD_INT 22
45944: PUSH
45945: LD_INT 23
45947: PUSH
45948: LD_INT 24
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: ST_TO_ADDR
45957: GO 46140
45959: LD_INT 49
45961: DOUBLE
45962: EQUAL
45963: IFTRUE 45967
45965: GO 45993
45967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45968: LD_ADDR_VAR 0 3
45972: PUSH
45973: LD_INT 21
45975: PUSH
45976: LD_INT 22
45978: PUSH
45979: LD_INT 23
45981: PUSH
45982: LD_INT 24
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: ST_TO_ADDR
45991: GO 46140
45993: LD_INT 51
45995: DOUBLE
45996: EQUAL
45997: IFTRUE 46001
45999: GO 46027
46001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46002: LD_ADDR_VAR 0 3
46006: PUSH
46007: LD_INT 21
46009: PUSH
46010: LD_INT 22
46012: PUSH
46013: LD_INT 23
46015: PUSH
46016: LD_INT 24
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: ST_TO_ADDR
46025: GO 46140
46027: LD_INT 52
46029: DOUBLE
46030: EQUAL
46031: IFTRUE 46035
46033: GO 46061
46035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46036: LD_ADDR_VAR 0 3
46040: PUSH
46041: LD_INT 21
46043: PUSH
46044: LD_INT 22
46046: PUSH
46047: LD_INT 23
46049: PUSH
46050: LD_INT 24
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: ST_TO_ADDR
46059: GO 46140
46061: LD_INT 53
46063: DOUBLE
46064: EQUAL
46065: IFTRUE 46069
46067: GO 46087
46069: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46070: LD_ADDR_VAR 0 3
46074: PUSH
46075: LD_INT 23
46077: PUSH
46078: LD_INT 24
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: ST_TO_ADDR
46085: GO 46140
46087: LD_INT 46
46089: DOUBLE
46090: EQUAL
46091: IFTRUE 46095
46093: GO 46113
46095: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46096: LD_ADDR_VAR 0 3
46100: PUSH
46101: LD_INT 23
46103: PUSH
46104: LD_INT 24
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: ST_TO_ADDR
46111: GO 46140
46113: LD_INT 47
46115: DOUBLE
46116: EQUAL
46117: IFTRUE 46121
46119: GO 46139
46121: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46122: LD_ADDR_VAR 0 3
46126: PUSH
46127: LD_INT 23
46129: PUSH
46130: LD_INT 24
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: ST_TO_ADDR
46137: GO 46140
46139: POP
// result := ( chassis in result ) ;
46140: LD_ADDR_VAR 0 3
46144: PUSH
46145: LD_VAR 0 1
46149: PUSH
46150: LD_VAR 0 3
46154: IN
46155: ST_TO_ADDR
// end ;
46156: LD_VAR 0 3
46160: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46161: LD_INT 0
46163: PPUSH
46164: PPUSH
46165: PPUSH
46166: PPUSH
46167: PPUSH
46168: PPUSH
46169: PPUSH
// result := array ;
46170: LD_ADDR_VAR 0 5
46174: PUSH
46175: LD_VAR 0 1
46179: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46180: LD_VAR 0 1
46184: NOT
46185: PUSH
46186: LD_VAR 0 2
46190: NOT
46191: OR
46192: PUSH
46193: LD_VAR 0 3
46197: NOT
46198: OR
46199: PUSH
46200: LD_VAR 0 2
46204: PUSH
46205: LD_VAR 0 1
46209: GREATER
46210: OR
46211: PUSH
46212: LD_VAR 0 3
46216: PUSH
46217: LD_VAR 0 1
46221: GREATER
46222: OR
46223: IFFALSE 46227
// exit ;
46225: GO 46523
// if direction then
46227: LD_VAR 0 4
46231: IFFALSE 46295
// begin d := 1 ;
46233: LD_ADDR_VAR 0 9
46237: PUSH
46238: LD_INT 1
46240: ST_TO_ADDR
// if i_from > i_to then
46241: LD_VAR 0 2
46245: PUSH
46246: LD_VAR 0 3
46250: GREATER
46251: IFFALSE 46277
// length := ( array - i_from ) + i_to else
46253: LD_ADDR_VAR 0 11
46257: PUSH
46258: LD_VAR 0 1
46262: PUSH
46263: LD_VAR 0 2
46267: MINUS
46268: PUSH
46269: LD_VAR 0 3
46273: PLUS
46274: ST_TO_ADDR
46275: GO 46293
// length := i_to - i_from ;
46277: LD_ADDR_VAR 0 11
46281: PUSH
46282: LD_VAR 0 3
46286: PUSH
46287: LD_VAR 0 2
46291: MINUS
46292: ST_TO_ADDR
// end else
46293: GO 46356
// begin d := - 1 ;
46295: LD_ADDR_VAR 0 9
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: ST_TO_ADDR
// if i_from > i_to then
46304: LD_VAR 0 2
46308: PUSH
46309: LD_VAR 0 3
46313: GREATER
46314: IFFALSE 46334
// length := i_from - i_to else
46316: LD_ADDR_VAR 0 11
46320: PUSH
46321: LD_VAR 0 2
46325: PUSH
46326: LD_VAR 0 3
46330: MINUS
46331: ST_TO_ADDR
46332: GO 46356
// length := ( array - i_to ) + i_from ;
46334: LD_ADDR_VAR 0 11
46338: PUSH
46339: LD_VAR 0 1
46343: PUSH
46344: LD_VAR 0 3
46348: MINUS
46349: PUSH
46350: LD_VAR 0 2
46354: PLUS
46355: ST_TO_ADDR
// end ; if not length then
46356: LD_VAR 0 11
46360: NOT
46361: IFFALSE 46365
// exit ;
46363: GO 46523
// tmp := array ;
46365: LD_ADDR_VAR 0 10
46369: PUSH
46370: LD_VAR 0 1
46374: ST_TO_ADDR
// for i = 1 to length do
46375: LD_ADDR_VAR 0 6
46379: PUSH
46380: DOUBLE
46381: LD_INT 1
46383: DEC
46384: ST_TO_ADDR
46385: LD_VAR 0 11
46389: PUSH
46390: FOR_TO
46391: IFFALSE 46511
// begin for j = 1 to array do
46393: LD_ADDR_VAR 0 7
46397: PUSH
46398: DOUBLE
46399: LD_INT 1
46401: DEC
46402: ST_TO_ADDR
46403: LD_VAR 0 1
46407: PUSH
46408: FOR_TO
46409: IFFALSE 46497
// begin k := j + d ;
46411: LD_ADDR_VAR 0 8
46415: PUSH
46416: LD_VAR 0 7
46420: PUSH
46421: LD_VAR 0 9
46425: PLUS
46426: ST_TO_ADDR
// if k > array then
46427: LD_VAR 0 8
46431: PUSH
46432: LD_VAR 0 1
46436: GREATER
46437: IFFALSE 46447
// k := 1 ;
46439: LD_ADDR_VAR 0 8
46443: PUSH
46444: LD_INT 1
46446: ST_TO_ADDR
// if not k then
46447: LD_VAR 0 8
46451: NOT
46452: IFFALSE 46464
// k := array ;
46454: LD_ADDR_VAR 0 8
46458: PUSH
46459: LD_VAR 0 1
46463: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46464: LD_ADDR_VAR 0 10
46468: PUSH
46469: LD_VAR 0 10
46473: PPUSH
46474: LD_VAR 0 8
46478: PPUSH
46479: LD_VAR 0 1
46483: PUSH
46484: LD_VAR 0 7
46488: ARRAY
46489: PPUSH
46490: CALL_OW 1
46494: ST_TO_ADDR
// end ;
46495: GO 46408
46497: POP
46498: POP
// array := tmp ;
46499: LD_ADDR_VAR 0 1
46503: PUSH
46504: LD_VAR 0 10
46508: ST_TO_ADDR
// end ;
46509: GO 46390
46511: POP
46512: POP
// result := array ;
46513: LD_ADDR_VAR 0 5
46517: PUSH
46518: LD_VAR 0 1
46522: ST_TO_ADDR
// end ;
46523: LD_VAR 0 5
46527: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46528: LD_INT 0
46530: PPUSH
46531: PPUSH
// result := 0 ;
46532: LD_ADDR_VAR 0 3
46536: PUSH
46537: LD_INT 0
46539: ST_TO_ADDR
// if not array or not value in array then
46540: LD_VAR 0 1
46544: NOT
46545: PUSH
46546: LD_VAR 0 2
46550: PUSH
46551: LD_VAR 0 1
46555: IN
46556: NOT
46557: OR
46558: IFFALSE 46562
// exit ;
46560: GO 46616
// for i = 1 to array do
46562: LD_ADDR_VAR 0 4
46566: PUSH
46567: DOUBLE
46568: LD_INT 1
46570: DEC
46571: ST_TO_ADDR
46572: LD_VAR 0 1
46576: PUSH
46577: FOR_TO
46578: IFFALSE 46614
// if value = array [ i ] then
46580: LD_VAR 0 2
46584: PUSH
46585: LD_VAR 0 1
46589: PUSH
46590: LD_VAR 0 4
46594: ARRAY
46595: EQUAL
46596: IFFALSE 46612
// begin result := i ;
46598: LD_ADDR_VAR 0 3
46602: PUSH
46603: LD_VAR 0 4
46607: ST_TO_ADDR
// exit ;
46608: POP
46609: POP
46610: GO 46616
// end ;
46612: GO 46577
46614: POP
46615: POP
// end ;
46616: LD_VAR 0 3
46620: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46621: LD_INT 0
46623: PPUSH
// vc_chassis := chassis ;
46624: LD_ADDR_OWVAR 37
46628: PUSH
46629: LD_VAR 0 1
46633: ST_TO_ADDR
// vc_engine := engine ;
46634: LD_ADDR_OWVAR 39
46638: PUSH
46639: LD_VAR 0 2
46643: ST_TO_ADDR
// vc_control := control ;
46644: LD_ADDR_OWVAR 38
46648: PUSH
46649: LD_VAR 0 3
46653: ST_TO_ADDR
// vc_weapon := weapon ;
46654: LD_ADDR_OWVAR 40
46658: PUSH
46659: LD_VAR 0 4
46663: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46664: LD_ADDR_OWVAR 41
46668: PUSH
46669: LD_VAR 0 5
46673: ST_TO_ADDR
// end ;
46674: LD_VAR 0 6
46678: RET
// export function WantPlant ( unit ) ; var task ; begin
46679: LD_INT 0
46681: PPUSH
46682: PPUSH
// result := false ;
46683: LD_ADDR_VAR 0 2
46687: PUSH
46688: LD_INT 0
46690: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46691: LD_ADDR_VAR 0 3
46695: PUSH
46696: LD_VAR 0 1
46700: PPUSH
46701: CALL_OW 437
46705: ST_TO_ADDR
// if task then
46706: LD_VAR 0 3
46710: IFFALSE 46738
// if task [ 1 ] [ 1 ] = p then
46712: LD_VAR 0 3
46716: PUSH
46717: LD_INT 1
46719: ARRAY
46720: PUSH
46721: LD_INT 1
46723: ARRAY
46724: PUSH
46725: LD_STRING p
46727: EQUAL
46728: IFFALSE 46738
// result := true ;
46730: LD_ADDR_VAR 0 2
46734: PUSH
46735: LD_INT 1
46737: ST_TO_ADDR
// end ;
46738: LD_VAR 0 2
46742: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46743: LD_INT 0
46745: PPUSH
46746: PPUSH
46747: PPUSH
46748: PPUSH
// if pos < 1 then
46749: LD_VAR 0 2
46753: PUSH
46754: LD_INT 1
46756: LESS
46757: IFFALSE 46761
// exit ;
46759: GO 47064
// if pos = 1 then
46761: LD_VAR 0 2
46765: PUSH
46766: LD_INT 1
46768: EQUAL
46769: IFFALSE 46802
// result := Replace ( arr , pos [ 1 ] , value ) else
46771: LD_ADDR_VAR 0 4
46775: PUSH
46776: LD_VAR 0 1
46780: PPUSH
46781: LD_VAR 0 2
46785: PUSH
46786: LD_INT 1
46788: ARRAY
46789: PPUSH
46790: LD_VAR 0 3
46794: PPUSH
46795: CALL_OW 1
46799: ST_TO_ADDR
46800: GO 47064
// begin tmp := arr ;
46802: LD_ADDR_VAR 0 6
46806: PUSH
46807: LD_VAR 0 1
46811: ST_TO_ADDR
// s_arr := [ tmp ] ;
46812: LD_ADDR_VAR 0 7
46816: PUSH
46817: LD_VAR 0 6
46821: PUSH
46822: EMPTY
46823: LIST
46824: ST_TO_ADDR
// for i = 1 to pos - 1 do
46825: LD_ADDR_VAR 0 5
46829: PUSH
46830: DOUBLE
46831: LD_INT 1
46833: DEC
46834: ST_TO_ADDR
46835: LD_VAR 0 2
46839: PUSH
46840: LD_INT 1
46842: MINUS
46843: PUSH
46844: FOR_TO
46845: IFFALSE 46890
// begin tmp := tmp [ pos [ i ] ] ;
46847: LD_ADDR_VAR 0 6
46851: PUSH
46852: LD_VAR 0 6
46856: PUSH
46857: LD_VAR 0 2
46861: PUSH
46862: LD_VAR 0 5
46866: ARRAY
46867: ARRAY
46868: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46869: LD_ADDR_VAR 0 7
46873: PUSH
46874: LD_VAR 0 7
46878: PUSH
46879: LD_VAR 0 6
46883: PUSH
46884: EMPTY
46885: LIST
46886: ADD
46887: ST_TO_ADDR
// end ;
46888: GO 46844
46890: POP
46891: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46892: LD_ADDR_VAR 0 6
46896: PUSH
46897: LD_VAR 0 6
46901: PPUSH
46902: LD_VAR 0 2
46906: PUSH
46907: LD_VAR 0 2
46911: ARRAY
46912: PPUSH
46913: LD_VAR 0 3
46917: PPUSH
46918: CALL_OW 1
46922: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46923: LD_ADDR_VAR 0 7
46927: PUSH
46928: LD_VAR 0 7
46932: PPUSH
46933: LD_VAR 0 7
46937: PPUSH
46938: LD_VAR 0 6
46942: PPUSH
46943: CALL_OW 1
46947: ST_TO_ADDR
// for i = s_arr downto 2 do
46948: LD_ADDR_VAR 0 5
46952: PUSH
46953: DOUBLE
46954: LD_VAR 0 7
46958: INC
46959: ST_TO_ADDR
46960: LD_INT 2
46962: PUSH
46963: FOR_DOWNTO
46964: IFFALSE 47048
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46966: LD_ADDR_VAR 0 6
46970: PUSH
46971: LD_VAR 0 7
46975: PUSH
46976: LD_VAR 0 5
46980: PUSH
46981: LD_INT 1
46983: MINUS
46984: ARRAY
46985: PPUSH
46986: LD_VAR 0 2
46990: PUSH
46991: LD_VAR 0 5
46995: PUSH
46996: LD_INT 1
46998: MINUS
46999: ARRAY
47000: PPUSH
47001: LD_VAR 0 7
47005: PUSH
47006: LD_VAR 0 5
47010: ARRAY
47011: PPUSH
47012: CALL_OW 1
47016: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47017: LD_ADDR_VAR 0 7
47021: PUSH
47022: LD_VAR 0 7
47026: PPUSH
47027: LD_VAR 0 5
47031: PUSH
47032: LD_INT 1
47034: MINUS
47035: PPUSH
47036: LD_VAR 0 6
47040: PPUSH
47041: CALL_OW 1
47045: ST_TO_ADDR
// end ;
47046: GO 46963
47048: POP
47049: POP
// result := s_arr [ 1 ] ;
47050: LD_ADDR_VAR 0 4
47054: PUSH
47055: LD_VAR 0 7
47059: PUSH
47060: LD_INT 1
47062: ARRAY
47063: ST_TO_ADDR
// end ; end ;
47064: LD_VAR 0 4
47068: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47069: LD_INT 0
47071: PPUSH
47072: PPUSH
// if not list then
47073: LD_VAR 0 1
47077: NOT
47078: IFFALSE 47082
// exit ;
47080: GO 47173
// i := list [ pos1 ] ;
47082: LD_ADDR_VAR 0 5
47086: PUSH
47087: LD_VAR 0 1
47091: PUSH
47092: LD_VAR 0 2
47096: ARRAY
47097: ST_TO_ADDR
// if not i then
47098: LD_VAR 0 5
47102: NOT
47103: IFFALSE 47107
// exit ;
47105: GO 47173
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47107: LD_ADDR_VAR 0 1
47111: PUSH
47112: LD_VAR 0 1
47116: PPUSH
47117: LD_VAR 0 2
47121: PPUSH
47122: LD_VAR 0 1
47126: PUSH
47127: LD_VAR 0 3
47131: ARRAY
47132: PPUSH
47133: CALL_OW 1
47137: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47138: LD_ADDR_VAR 0 1
47142: PUSH
47143: LD_VAR 0 1
47147: PPUSH
47148: LD_VAR 0 3
47152: PPUSH
47153: LD_VAR 0 5
47157: PPUSH
47158: CALL_OW 1
47162: ST_TO_ADDR
// result := list ;
47163: LD_ADDR_VAR 0 4
47167: PUSH
47168: LD_VAR 0 1
47172: ST_TO_ADDR
// end ;
47173: LD_VAR 0 4
47177: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47178: LD_INT 0
47180: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47181: LD_ADDR_VAR 0 5
47185: PUSH
47186: LD_VAR 0 1
47190: PPUSH
47191: CALL_OW 250
47195: PPUSH
47196: LD_VAR 0 1
47200: PPUSH
47201: CALL_OW 251
47205: PPUSH
47206: LD_VAR 0 2
47210: PPUSH
47211: LD_VAR 0 3
47215: PPUSH
47216: LD_VAR 0 4
47220: PPUSH
47221: CALL 47231 0 5
47225: ST_TO_ADDR
// end ;
47226: LD_VAR 0 5
47230: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47231: LD_INT 0
47233: PPUSH
47234: PPUSH
47235: PPUSH
47236: PPUSH
// if not list then
47237: LD_VAR 0 3
47241: NOT
47242: IFFALSE 47246
// exit ;
47244: GO 47634
// result := [ ] ;
47246: LD_ADDR_VAR 0 6
47250: PUSH
47251: EMPTY
47252: ST_TO_ADDR
// for i in list do
47253: LD_ADDR_VAR 0 7
47257: PUSH
47258: LD_VAR 0 3
47262: PUSH
47263: FOR_IN
47264: IFFALSE 47466
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47266: LD_ADDR_VAR 0 9
47270: PUSH
47271: LD_VAR 0 7
47275: PPUSH
47276: LD_VAR 0 1
47280: PPUSH
47281: LD_VAR 0 2
47285: PPUSH
47286: CALL_OW 297
47290: ST_TO_ADDR
// if not result then
47291: LD_VAR 0 6
47295: NOT
47296: IFFALSE 47322
// result := [ [ i , tmp ] ] else
47298: LD_ADDR_VAR 0 6
47302: PUSH
47303: LD_VAR 0 7
47307: PUSH
47308: LD_VAR 0 9
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: EMPTY
47318: LIST
47319: ST_TO_ADDR
47320: GO 47464
// begin if result [ result ] [ 2 ] < tmp then
47322: LD_VAR 0 6
47326: PUSH
47327: LD_VAR 0 6
47331: ARRAY
47332: PUSH
47333: LD_INT 2
47335: ARRAY
47336: PUSH
47337: LD_VAR 0 9
47341: LESS
47342: IFFALSE 47384
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47344: LD_ADDR_VAR 0 6
47348: PUSH
47349: LD_VAR 0 6
47353: PPUSH
47354: LD_VAR 0 6
47358: PUSH
47359: LD_INT 1
47361: PLUS
47362: PPUSH
47363: LD_VAR 0 7
47367: PUSH
47368: LD_VAR 0 9
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PPUSH
47377: CALL_OW 2
47381: ST_TO_ADDR
47382: GO 47464
// for j = 1 to result do
47384: LD_ADDR_VAR 0 8
47388: PUSH
47389: DOUBLE
47390: LD_INT 1
47392: DEC
47393: ST_TO_ADDR
47394: LD_VAR 0 6
47398: PUSH
47399: FOR_TO
47400: IFFALSE 47462
// begin if tmp < result [ j ] [ 2 ] then
47402: LD_VAR 0 9
47406: PUSH
47407: LD_VAR 0 6
47411: PUSH
47412: LD_VAR 0 8
47416: ARRAY
47417: PUSH
47418: LD_INT 2
47420: ARRAY
47421: LESS
47422: IFFALSE 47460
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47424: LD_ADDR_VAR 0 6
47428: PUSH
47429: LD_VAR 0 6
47433: PPUSH
47434: LD_VAR 0 8
47438: PPUSH
47439: LD_VAR 0 7
47443: PUSH
47444: LD_VAR 0 9
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PPUSH
47453: CALL_OW 2
47457: ST_TO_ADDR
// break ;
47458: GO 47462
// end ; end ;
47460: GO 47399
47462: POP
47463: POP
// end ; end ;
47464: GO 47263
47466: POP
47467: POP
// if result and not asc then
47468: LD_VAR 0 6
47472: PUSH
47473: LD_VAR 0 4
47477: NOT
47478: AND
47479: IFFALSE 47554
// begin tmp := result ;
47481: LD_ADDR_VAR 0 9
47485: PUSH
47486: LD_VAR 0 6
47490: ST_TO_ADDR
// for i = tmp downto 1 do
47491: LD_ADDR_VAR 0 7
47495: PUSH
47496: DOUBLE
47497: LD_VAR 0 9
47501: INC
47502: ST_TO_ADDR
47503: LD_INT 1
47505: PUSH
47506: FOR_DOWNTO
47507: IFFALSE 47552
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47509: LD_ADDR_VAR 0 6
47513: PUSH
47514: LD_VAR 0 6
47518: PPUSH
47519: LD_VAR 0 9
47523: PUSH
47524: LD_VAR 0 7
47528: MINUS
47529: PUSH
47530: LD_INT 1
47532: PLUS
47533: PPUSH
47534: LD_VAR 0 9
47538: PUSH
47539: LD_VAR 0 7
47543: ARRAY
47544: PPUSH
47545: CALL_OW 1
47549: ST_TO_ADDR
47550: GO 47506
47552: POP
47553: POP
// end ; tmp := [ ] ;
47554: LD_ADDR_VAR 0 9
47558: PUSH
47559: EMPTY
47560: ST_TO_ADDR
// if mode then
47561: LD_VAR 0 5
47565: IFFALSE 47634
// begin for i = 1 to result do
47567: LD_ADDR_VAR 0 7
47571: PUSH
47572: DOUBLE
47573: LD_INT 1
47575: DEC
47576: ST_TO_ADDR
47577: LD_VAR 0 6
47581: PUSH
47582: FOR_TO
47583: IFFALSE 47622
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47585: LD_ADDR_VAR 0 9
47589: PUSH
47590: LD_VAR 0 9
47594: PPUSH
47595: LD_VAR 0 7
47599: PPUSH
47600: LD_VAR 0 6
47604: PUSH
47605: LD_VAR 0 7
47609: ARRAY
47610: PUSH
47611: LD_INT 1
47613: ARRAY
47614: PPUSH
47615: CALL_OW 1
47619: ST_TO_ADDR
47620: GO 47582
47622: POP
47623: POP
// result := tmp ;
47624: LD_ADDR_VAR 0 6
47628: PUSH
47629: LD_VAR 0 9
47633: ST_TO_ADDR
// end ; end ;
47634: LD_VAR 0 6
47638: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47639: LD_INT 0
47641: PPUSH
47642: PPUSH
47643: PPUSH
47644: PPUSH
47645: PPUSH
47646: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47647: LD_ADDR_VAR 0 5
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: ST_TO_ADDR
// if not x or not y then
47669: LD_VAR 0 2
47673: NOT
47674: PUSH
47675: LD_VAR 0 3
47679: NOT
47680: OR
47681: IFFALSE 47685
// exit ;
47683: GO 49331
// if not range then
47685: LD_VAR 0 4
47689: NOT
47690: IFFALSE 47700
// range := 10 ;
47692: LD_ADDR_VAR 0 4
47696: PUSH
47697: LD_INT 10
47699: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47700: LD_ADDR_VAR 0 8
47704: PUSH
47705: LD_INT 81
47707: PUSH
47708: LD_VAR 0 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 92
47719: PUSH
47720: LD_VAR 0 2
47724: PUSH
47725: LD_VAR 0 3
47729: PUSH
47730: LD_VAR 0 4
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 3
47743: PUSH
47744: LD_INT 21
47746: PUSH
47747: LD_INT 3
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: LIST
47762: PPUSH
47763: CALL_OW 69
47767: ST_TO_ADDR
// if not tmp then
47768: LD_VAR 0 8
47772: NOT
47773: IFFALSE 47777
// exit ;
47775: GO 49331
// for i in tmp do
47777: LD_ADDR_VAR 0 6
47781: PUSH
47782: LD_VAR 0 8
47786: PUSH
47787: FOR_IN
47788: IFFALSE 49306
// begin points := [ 0 , 0 , 0 ] ;
47790: LD_ADDR_VAR 0 9
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: ST_TO_ADDR
// bpoints := 1 ;
47809: LD_ADDR_VAR 0 10
47813: PUSH
47814: LD_INT 1
47816: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47817: LD_VAR 0 6
47821: PPUSH
47822: CALL_OW 247
47826: PUSH
47827: LD_INT 1
47829: DOUBLE
47830: EQUAL
47831: IFTRUE 47835
47833: GO 48413
47835: POP
// begin if GetClass ( i ) = 1 then
47836: LD_VAR 0 6
47840: PPUSH
47841: CALL_OW 257
47845: PUSH
47846: LD_INT 1
47848: EQUAL
47849: IFFALSE 47870
// points := [ 10 , 5 , 3 ] ;
47851: LD_ADDR_VAR 0 9
47855: PUSH
47856: LD_INT 10
47858: PUSH
47859: LD_INT 5
47861: PUSH
47862: LD_INT 3
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: LIST
47869: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47870: LD_VAR 0 6
47874: PPUSH
47875: CALL_OW 257
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: LD_INT 3
47885: PUSH
47886: LD_INT 4
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: LIST
47893: IN
47894: IFFALSE 47915
// points := [ 3 , 2 , 1 ] ;
47896: LD_ADDR_VAR 0 9
47900: PUSH
47901: LD_INT 3
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: LIST
47914: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47915: LD_VAR 0 6
47919: PPUSH
47920: CALL_OW 257
47924: PUSH
47925: LD_INT 5
47927: EQUAL
47928: IFFALSE 47949
// points := [ 130 , 5 , 2 ] ;
47930: LD_ADDR_VAR 0 9
47934: PUSH
47935: LD_INT 130
47937: PUSH
47938: LD_INT 5
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: LIST
47948: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47949: LD_VAR 0 6
47953: PPUSH
47954: CALL_OW 257
47958: PUSH
47959: LD_INT 8
47961: EQUAL
47962: IFFALSE 47983
// points := [ 35 , 35 , 30 ] ;
47964: LD_ADDR_VAR 0 9
47968: PUSH
47969: LD_INT 35
47971: PUSH
47972: LD_INT 35
47974: PUSH
47975: LD_INT 30
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: LIST
47982: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47983: LD_VAR 0 6
47987: PPUSH
47988: CALL_OW 257
47992: PUSH
47993: LD_INT 9
47995: EQUAL
47996: IFFALSE 48017
// points := [ 20 , 55 , 40 ] ;
47998: LD_ADDR_VAR 0 9
48002: PUSH
48003: LD_INT 20
48005: PUSH
48006: LD_INT 55
48008: PUSH
48009: LD_INT 40
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: LIST
48016: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48017: LD_VAR 0 6
48021: PPUSH
48022: CALL_OW 257
48026: PUSH
48027: LD_INT 12
48029: PUSH
48030: LD_INT 16
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: IN
48037: IFFALSE 48058
// points := [ 5 , 3 , 2 ] ;
48039: LD_ADDR_VAR 0 9
48043: PUSH
48044: LD_INT 5
48046: PUSH
48047: LD_INT 3
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: LIST
48057: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48058: LD_VAR 0 6
48062: PPUSH
48063: CALL_OW 257
48067: PUSH
48068: LD_INT 17
48070: EQUAL
48071: IFFALSE 48092
// points := [ 100 , 50 , 75 ] ;
48073: LD_ADDR_VAR 0 9
48077: PUSH
48078: LD_INT 100
48080: PUSH
48081: LD_INT 50
48083: PUSH
48084: LD_INT 75
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: LIST
48091: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48092: LD_VAR 0 6
48096: PPUSH
48097: CALL_OW 257
48101: PUSH
48102: LD_INT 15
48104: EQUAL
48105: IFFALSE 48126
// points := [ 10 , 5 , 3 ] ;
48107: LD_ADDR_VAR 0 9
48111: PUSH
48112: LD_INT 10
48114: PUSH
48115: LD_INT 5
48117: PUSH
48118: LD_INT 3
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: LIST
48125: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48126: LD_VAR 0 6
48130: PPUSH
48131: CALL_OW 257
48135: PUSH
48136: LD_INT 14
48138: EQUAL
48139: IFFALSE 48160
// points := [ 10 , 0 , 0 ] ;
48141: LD_ADDR_VAR 0 9
48145: PUSH
48146: LD_INT 10
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: LIST
48159: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48160: LD_VAR 0 6
48164: PPUSH
48165: CALL_OW 257
48169: PUSH
48170: LD_INT 11
48172: EQUAL
48173: IFFALSE 48194
// points := [ 30 , 10 , 5 ] ;
48175: LD_ADDR_VAR 0 9
48179: PUSH
48180: LD_INT 30
48182: PUSH
48183: LD_INT 10
48185: PUSH
48186: LD_INT 5
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: LIST
48193: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48194: LD_VAR 0 1
48198: PPUSH
48199: LD_INT 5
48201: PPUSH
48202: CALL_OW 321
48206: PUSH
48207: LD_INT 2
48209: EQUAL
48210: IFFALSE 48227
// bpoints := bpoints * 1.8 ;
48212: LD_ADDR_VAR 0 10
48216: PUSH
48217: LD_VAR 0 10
48221: PUSH
48222: LD_REAL  1.80000000000000E+0000
48225: MUL
48226: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48227: LD_VAR 0 6
48231: PPUSH
48232: CALL_OW 257
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: LD_INT 3
48245: PUSH
48246: LD_INT 4
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: IN
48255: PUSH
48256: LD_VAR 0 1
48260: PPUSH
48261: LD_INT 51
48263: PPUSH
48264: CALL_OW 321
48268: PUSH
48269: LD_INT 2
48271: EQUAL
48272: AND
48273: IFFALSE 48290
// bpoints := bpoints * 1.2 ;
48275: LD_ADDR_VAR 0 10
48279: PUSH
48280: LD_VAR 0 10
48284: PUSH
48285: LD_REAL  1.20000000000000E+0000
48288: MUL
48289: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48290: LD_VAR 0 6
48294: PPUSH
48295: CALL_OW 257
48299: PUSH
48300: LD_INT 5
48302: PUSH
48303: LD_INT 7
48305: PUSH
48306: LD_INT 9
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: LIST
48313: IN
48314: PUSH
48315: LD_VAR 0 1
48319: PPUSH
48320: LD_INT 52
48322: PPUSH
48323: CALL_OW 321
48327: PUSH
48328: LD_INT 2
48330: EQUAL
48331: AND
48332: IFFALSE 48349
// bpoints := bpoints * 1.5 ;
48334: LD_ADDR_VAR 0 10
48338: PUSH
48339: LD_VAR 0 10
48343: PUSH
48344: LD_REAL  1.50000000000000E+0000
48347: MUL
48348: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48349: LD_VAR 0 1
48353: PPUSH
48354: LD_INT 66
48356: PPUSH
48357: CALL_OW 321
48361: PUSH
48362: LD_INT 2
48364: EQUAL
48365: IFFALSE 48382
// bpoints := bpoints * 1.1 ;
48367: LD_ADDR_VAR 0 10
48371: PUSH
48372: LD_VAR 0 10
48376: PUSH
48377: LD_REAL  1.10000000000000E+0000
48380: MUL
48381: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48382: LD_ADDR_VAR 0 10
48386: PUSH
48387: LD_VAR 0 10
48391: PUSH
48392: LD_VAR 0 6
48396: PPUSH
48397: LD_INT 1
48399: PPUSH
48400: CALL_OW 259
48404: PUSH
48405: LD_REAL  1.15000000000000E+0000
48408: MUL
48409: MUL
48410: ST_TO_ADDR
// end ; unit_vehicle :
48411: GO 49235
48413: LD_INT 2
48415: DOUBLE
48416: EQUAL
48417: IFTRUE 48421
48419: GO 49223
48421: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48422: LD_VAR 0 6
48426: PPUSH
48427: CALL_OW 264
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: LD_INT 42
48437: PUSH
48438: LD_INT 24
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: LIST
48445: IN
48446: IFFALSE 48467
// points := [ 25 , 5 , 3 ] ;
48448: LD_ADDR_VAR 0 9
48452: PUSH
48453: LD_INT 25
48455: PUSH
48456: LD_INT 5
48458: PUSH
48459: LD_INT 3
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: LIST
48466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48467: LD_VAR 0 6
48471: PPUSH
48472: CALL_OW 264
48476: PUSH
48477: LD_INT 4
48479: PUSH
48480: LD_INT 43
48482: PUSH
48483: LD_INT 25
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: LIST
48490: IN
48491: IFFALSE 48512
// points := [ 40 , 15 , 5 ] ;
48493: LD_ADDR_VAR 0 9
48497: PUSH
48498: LD_INT 40
48500: PUSH
48501: LD_INT 15
48503: PUSH
48504: LD_INT 5
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: LIST
48511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48512: LD_VAR 0 6
48516: PPUSH
48517: CALL_OW 264
48521: PUSH
48522: LD_INT 3
48524: PUSH
48525: LD_INT 23
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: IN
48532: IFFALSE 48553
// points := [ 7 , 25 , 8 ] ;
48534: LD_ADDR_VAR 0 9
48538: PUSH
48539: LD_INT 7
48541: PUSH
48542: LD_INT 25
48544: PUSH
48545: LD_INT 8
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: LIST
48552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48553: LD_VAR 0 6
48557: PPUSH
48558: CALL_OW 264
48562: PUSH
48563: LD_INT 5
48565: PUSH
48566: LD_INT 27
48568: PUSH
48569: LD_INT 44
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: LIST
48576: IN
48577: IFFALSE 48598
// points := [ 14 , 50 , 16 ] ;
48579: LD_ADDR_VAR 0 9
48583: PUSH
48584: LD_INT 14
48586: PUSH
48587: LD_INT 50
48589: PUSH
48590: LD_INT 16
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: LIST
48597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48598: LD_VAR 0 6
48602: PPUSH
48603: CALL_OW 264
48607: PUSH
48608: LD_INT 6
48610: PUSH
48611: LD_INT 46
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: IN
48618: IFFALSE 48639
// points := [ 32 , 120 , 70 ] ;
48620: LD_ADDR_VAR 0 9
48624: PUSH
48625: LD_INT 32
48627: PUSH
48628: LD_INT 120
48630: PUSH
48631: LD_INT 70
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: LIST
48638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
48639: LD_VAR 0 6
48643: PPUSH
48644: CALL_OW 264
48648: PUSH
48649: LD_INT 7
48651: PUSH
48652: LD_INT 28
48654: PUSH
48655: LD_INT 45
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: LIST
48662: IN
48663: IFFALSE 48684
// points := [ 35 , 20 , 45 ] ;
48665: LD_ADDR_VAR 0 9
48669: PUSH
48670: LD_INT 35
48672: PUSH
48673: LD_INT 20
48675: PUSH
48676: LD_INT 45
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: LIST
48683: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48684: LD_VAR 0 6
48688: PPUSH
48689: CALL_OW 264
48693: PUSH
48694: LD_INT 47
48696: PUSH
48697: EMPTY
48698: LIST
48699: IN
48700: IFFALSE 48721
// points := [ 67 , 45 , 75 ] ;
48702: LD_ADDR_VAR 0 9
48706: PUSH
48707: LD_INT 67
48709: PUSH
48710: LD_INT 45
48712: PUSH
48713: LD_INT 75
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: LIST
48720: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48721: LD_VAR 0 6
48725: PPUSH
48726: CALL_OW 264
48730: PUSH
48731: LD_INT 26
48733: PUSH
48734: EMPTY
48735: LIST
48736: IN
48737: IFFALSE 48758
// points := [ 120 , 30 , 80 ] ;
48739: LD_ADDR_VAR 0 9
48743: PUSH
48744: LD_INT 120
48746: PUSH
48747: LD_INT 30
48749: PUSH
48750: LD_INT 80
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: LIST
48757: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48758: LD_VAR 0 6
48762: PPUSH
48763: CALL_OW 264
48767: PUSH
48768: LD_INT 22
48770: PUSH
48771: EMPTY
48772: LIST
48773: IN
48774: IFFALSE 48795
// points := [ 40 , 1 , 1 ] ;
48776: LD_ADDR_VAR 0 9
48780: PUSH
48781: LD_INT 40
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: LIST
48794: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48795: LD_VAR 0 6
48799: PPUSH
48800: CALL_OW 264
48804: PUSH
48805: LD_INT 29
48807: PUSH
48808: EMPTY
48809: LIST
48810: IN
48811: IFFALSE 48832
// points := [ 70 , 200 , 400 ] ;
48813: LD_ADDR_VAR 0 9
48817: PUSH
48818: LD_INT 70
48820: PUSH
48821: LD_INT 200
48823: PUSH
48824: LD_INT 400
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: LIST
48831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48832: LD_VAR 0 6
48836: PPUSH
48837: CALL_OW 264
48841: PUSH
48842: LD_INT 14
48844: PUSH
48845: LD_INT 53
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: IN
48852: IFFALSE 48873
// points := [ 40 , 10 , 20 ] ;
48854: LD_ADDR_VAR 0 9
48858: PUSH
48859: LD_INT 40
48861: PUSH
48862: LD_INT 10
48864: PUSH
48865: LD_INT 20
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: LIST
48872: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48873: LD_VAR 0 6
48877: PPUSH
48878: CALL_OW 264
48882: PUSH
48883: LD_INT 9
48885: PUSH
48886: EMPTY
48887: LIST
48888: IN
48889: IFFALSE 48910
// points := [ 5 , 70 , 20 ] ;
48891: LD_ADDR_VAR 0 9
48895: PUSH
48896: LD_INT 5
48898: PUSH
48899: LD_INT 70
48901: PUSH
48902: LD_INT 20
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: LIST
48909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48910: LD_VAR 0 6
48914: PPUSH
48915: CALL_OW 264
48919: PUSH
48920: LD_INT 10
48922: PUSH
48923: EMPTY
48924: LIST
48925: IN
48926: IFFALSE 48947
// points := [ 35 , 110 , 70 ] ;
48928: LD_ADDR_VAR 0 9
48932: PUSH
48933: LD_INT 35
48935: PUSH
48936: LD_INT 110
48938: PUSH
48939: LD_INT 70
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: LIST
48946: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48947: LD_VAR 0 6
48951: PPUSH
48952: CALL_OW 265
48956: PUSH
48957: LD_INT 25
48959: EQUAL
48960: IFFALSE 48981
// points := [ 80 , 65 , 100 ] ;
48962: LD_ADDR_VAR 0 9
48966: PUSH
48967: LD_INT 80
48969: PUSH
48970: LD_INT 65
48972: PUSH
48973: LD_INT 100
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48981: LD_VAR 0 6
48985: PPUSH
48986: CALL_OW 263
48990: PUSH
48991: LD_INT 1
48993: EQUAL
48994: IFFALSE 49029
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48996: LD_ADDR_VAR 0 10
49000: PUSH
49001: LD_VAR 0 10
49005: PUSH
49006: LD_VAR 0 6
49010: PPUSH
49011: CALL_OW 311
49015: PPUSH
49016: LD_INT 3
49018: PPUSH
49019: CALL_OW 259
49023: PUSH
49024: LD_INT 4
49026: MUL
49027: MUL
49028: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49029: LD_VAR 0 6
49033: PPUSH
49034: CALL_OW 263
49038: PUSH
49039: LD_INT 2
49041: EQUAL
49042: IFFALSE 49093
// begin j := IsControledBy ( i ) ;
49044: LD_ADDR_VAR 0 7
49048: PUSH
49049: LD_VAR 0 6
49053: PPUSH
49054: CALL_OW 312
49058: ST_TO_ADDR
// if j then
49059: LD_VAR 0 7
49063: IFFALSE 49093
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49065: LD_ADDR_VAR 0 10
49069: PUSH
49070: LD_VAR 0 10
49074: PUSH
49075: LD_VAR 0 7
49079: PPUSH
49080: LD_INT 3
49082: PPUSH
49083: CALL_OW 259
49087: PUSH
49088: LD_INT 3
49090: MUL
49091: MUL
49092: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49093: LD_VAR 0 6
49097: PPUSH
49098: CALL_OW 264
49102: PUSH
49103: LD_INT 5
49105: PUSH
49106: LD_INT 6
49108: PUSH
49109: LD_INT 46
49111: PUSH
49112: LD_INT 44
49114: PUSH
49115: LD_INT 47
49117: PUSH
49118: LD_INT 45
49120: PUSH
49121: LD_INT 28
49123: PUSH
49124: LD_INT 7
49126: PUSH
49127: LD_INT 27
49129: PUSH
49130: LD_INT 29
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: IN
49145: PUSH
49146: LD_VAR 0 1
49150: PPUSH
49151: LD_INT 52
49153: PPUSH
49154: CALL_OW 321
49158: PUSH
49159: LD_INT 2
49161: EQUAL
49162: AND
49163: IFFALSE 49180
// bpoints := bpoints * 1.2 ;
49165: LD_ADDR_VAR 0 10
49169: PUSH
49170: LD_VAR 0 10
49174: PUSH
49175: LD_REAL  1.20000000000000E+0000
49178: MUL
49179: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49180: LD_VAR 0 6
49184: PPUSH
49185: CALL_OW 264
49189: PUSH
49190: LD_INT 6
49192: PUSH
49193: LD_INT 46
49195: PUSH
49196: LD_INT 47
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: LIST
49203: IN
49204: IFFALSE 49221
// bpoints := bpoints * 1.2 ;
49206: LD_ADDR_VAR 0 10
49210: PUSH
49211: LD_VAR 0 10
49215: PUSH
49216: LD_REAL  1.20000000000000E+0000
49219: MUL
49220: ST_TO_ADDR
// end ; unit_building :
49221: GO 49235
49223: LD_INT 3
49225: DOUBLE
49226: EQUAL
49227: IFTRUE 49231
49229: GO 49234
49231: POP
// ; end ;
49232: GO 49235
49234: POP
// for j = 1 to 3 do
49235: LD_ADDR_VAR 0 7
49239: PUSH
49240: DOUBLE
49241: LD_INT 1
49243: DEC
49244: ST_TO_ADDR
49245: LD_INT 3
49247: PUSH
49248: FOR_TO
49249: IFFALSE 49302
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49251: LD_ADDR_VAR 0 5
49255: PUSH
49256: LD_VAR 0 5
49260: PPUSH
49261: LD_VAR 0 7
49265: PPUSH
49266: LD_VAR 0 5
49270: PUSH
49271: LD_VAR 0 7
49275: ARRAY
49276: PUSH
49277: LD_VAR 0 9
49281: PUSH
49282: LD_VAR 0 7
49286: ARRAY
49287: PUSH
49288: LD_VAR 0 10
49292: MUL
49293: PLUS
49294: PPUSH
49295: CALL_OW 1
49299: ST_TO_ADDR
49300: GO 49248
49302: POP
49303: POP
// end ;
49304: GO 47787
49306: POP
49307: POP
// result := Replace ( result , 4 , tmp ) ;
49308: LD_ADDR_VAR 0 5
49312: PUSH
49313: LD_VAR 0 5
49317: PPUSH
49318: LD_INT 4
49320: PPUSH
49321: LD_VAR 0 8
49325: PPUSH
49326: CALL_OW 1
49330: ST_TO_ADDR
// end ;
49331: LD_VAR 0 5
49335: RET
// export function DangerAtRange ( unit , range ) ; begin
49336: LD_INT 0
49338: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49339: LD_ADDR_VAR 0 3
49343: PUSH
49344: LD_VAR 0 1
49348: PPUSH
49349: CALL_OW 255
49353: PPUSH
49354: LD_VAR 0 1
49358: PPUSH
49359: CALL_OW 250
49363: PPUSH
49364: LD_VAR 0 1
49368: PPUSH
49369: CALL_OW 251
49373: PPUSH
49374: LD_VAR 0 2
49378: PPUSH
49379: CALL 47639 0 4
49383: ST_TO_ADDR
// end ;
49384: LD_VAR 0 3
49388: RET
// export function DangerInArea ( side , area ) ; begin
49389: LD_INT 0
49391: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49392: LD_ADDR_VAR 0 3
49396: PUSH
49397: LD_VAR 0 2
49401: PPUSH
49402: LD_INT 81
49404: PUSH
49405: LD_VAR 0 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PPUSH
49414: CALL_OW 70
49418: ST_TO_ADDR
// end ;
49419: LD_VAR 0 3
49423: RET
// export function IsExtension ( b ) ; begin
49424: LD_INT 0
49426: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49427: LD_ADDR_VAR 0 2
49431: PUSH
49432: LD_VAR 0 1
49436: PUSH
49437: LD_INT 23
49439: PUSH
49440: LD_INT 20
49442: PUSH
49443: LD_INT 22
49445: PUSH
49446: LD_INT 17
49448: PUSH
49449: LD_INT 24
49451: PUSH
49452: LD_INT 21
49454: PUSH
49455: LD_INT 19
49457: PUSH
49458: LD_INT 16
49460: PUSH
49461: LD_INT 25
49463: PUSH
49464: LD_INT 18
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: IN
49479: ST_TO_ADDR
// end ;
49480: LD_VAR 0 2
49484: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
49485: LD_INT 0
49487: PPUSH
49488: PPUSH
49489: PPUSH
// result := [ ] ;
49490: LD_ADDR_VAR 0 3
49494: PUSH
49495: EMPTY
49496: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49497: LD_ADDR_VAR 0 4
49501: PUSH
49502: LD_VAR 0 2
49506: PPUSH
49507: LD_INT 21
49509: PUSH
49510: LD_INT 3
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PPUSH
49517: CALL_OW 70
49521: ST_TO_ADDR
// if not tmp then
49522: LD_VAR 0 4
49526: NOT
49527: IFFALSE 49531
// exit ;
49529: GO 49589
// for i in tmp do
49531: LD_ADDR_VAR 0 5
49535: PUSH
49536: LD_VAR 0 4
49540: PUSH
49541: FOR_IN
49542: IFFALSE 49577
// if GetBase ( i ) <> base then
49544: LD_VAR 0 5
49548: PPUSH
49549: CALL_OW 274
49553: PUSH
49554: LD_VAR 0 1
49558: NONEQUAL
49559: IFFALSE 49575
// ComLinkToBase ( base , i ) ;
49561: LD_VAR 0 1
49565: PPUSH
49566: LD_VAR 0 5
49570: PPUSH
49571: CALL_OW 169
49575: GO 49541
49577: POP
49578: POP
// result := tmp ;
49579: LD_ADDR_VAR 0 3
49583: PUSH
49584: LD_VAR 0 4
49588: ST_TO_ADDR
// end ;
49589: LD_VAR 0 3
49593: RET
// export function ComComplete ( unit , b ) ; var i ; begin
49594: LD_INT 0
49596: PPUSH
49597: PPUSH
// if BuildingStatus ( b ) = bs_build then
49598: LD_VAR 0 2
49602: PPUSH
49603: CALL_OW 461
49607: PUSH
49608: LD_INT 1
49610: EQUAL
49611: IFFALSE 49671
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49613: LD_VAR 0 1
49617: PPUSH
49618: LD_STRING h
49620: PUSH
49621: LD_VAR 0 2
49625: PPUSH
49626: CALL_OW 250
49630: PUSH
49631: LD_VAR 0 2
49635: PPUSH
49636: CALL_OW 251
49640: PUSH
49641: LD_VAR 0 2
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: PUSH
49664: EMPTY
49665: LIST
49666: PPUSH
49667: CALL_OW 446
// end ;
49671: LD_VAR 0 3
49675: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49676: LD_INT 0
49678: PPUSH
49679: PPUSH
49680: PPUSH
49681: PPUSH
49682: PPUSH
49683: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
49684: LD_VAR 0 1
49688: NOT
49689: PUSH
49690: LD_VAR 0 1
49694: PPUSH
49695: CALL_OW 263
49699: PUSH
49700: LD_INT 2
49702: EQUAL
49703: NOT
49704: OR
49705: IFFALSE 49709
// exit ;
49707: GO 50025
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49709: LD_ADDR_VAR 0 6
49713: PUSH
49714: LD_INT 22
49716: PUSH
49717: LD_VAR 0 1
49721: PPUSH
49722: CALL_OW 255
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: LD_INT 30
49736: PUSH
49737: LD_INT 36
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 34
49746: PUSH
49747: LD_INT 31
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: LIST
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PPUSH
49763: CALL_OW 69
49767: ST_TO_ADDR
// if not tmp then
49768: LD_VAR 0 6
49772: NOT
49773: IFFALSE 49777
// exit ;
49775: GO 50025
// result := [ ] ;
49777: LD_ADDR_VAR 0 2
49781: PUSH
49782: EMPTY
49783: ST_TO_ADDR
// for i in tmp do
49784: LD_ADDR_VAR 0 3
49788: PUSH
49789: LD_VAR 0 6
49793: PUSH
49794: FOR_IN
49795: IFFALSE 49866
// begin t := UnitsInside ( i ) ;
49797: LD_ADDR_VAR 0 4
49801: PUSH
49802: LD_VAR 0 3
49806: PPUSH
49807: CALL_OW 313
49811: ST_TO_ADDR
// if t then
49812: LD_VAR 0 4
49816: IFFALSE 49864
// for j in t do
49818: LD_ADDR_VAR 0 7
49822: PUSH
49823: LD_VAR 0 4
49827: PUSH
49828: FOR_IN
49829: IFFALSE 49862
// result := Insert ( result , result + 1 , j ) ;
49831: LD_ADDR_VAR 0 2
49835: PUSH
49836: LD_VAR 0 2
49840: PPUSH
49841: LD_VAR 0 2
49845: PUSH
49846: LD_INT 1
49848: PLUS
49849: PPUSH
49850: LD_VAR 0 7
49854: PPUSH
49855: CALL_OW 2
49859: ST_TO_ADDR
49860: GO 49828
49862: POP
49863: POP
// end ;
49864: GO 49794
49866: POP
49867: POP
// if not result then
49868: LD_VAR 0 2
49872: NOT
49873: IFFALSE 49877
// exit ;
49875: GO 50025
// mech := result [ 1 ] ;
49877: LD_ADDR_VAR 0 5
49881: PUSH
49882: LD_VAR 0 2
49886: PUSH
49887: LD_INT 1
49889: ARRAY
49890: ST_TO_ADDR
// if result > 1 then
49891: LD_VAR 0 2
49895: PUSH
49896: LD_INT 1
49898: GREATER
49899: IFFALSE 50011
// for i = 2 to result do
49901: LD_ADDR_VAR 0 3
49905: PUSH
49906: DOUBLE
49907: LD_INT 2
49909: DEC
49910: ST_TO_ADDR
49911: LD_VAR 0 2
49915: PUSH
49916: FOR_TO
49917: IFFALSE 50009
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49919: LD_ADDR_VAR 0 4
49923: PUSH
49924: LD_VAR 0 2
49928: PUSH
49929: LD_VAR 0 3
49933: ARRAY
49934: PPUSH
49935: LD_INT 3
49937: PPUSH
49938: CALL_OW 259
49942: PUSH
49943: LD_VAR 0 2
49947: PUSH
49948: LD_VAR 0 3
49952: ARRAY
49953: PPUSH
49954: CALL_OW 432
49958: MINUS
49959: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49960: LD_VAR 0 4
49964: PUSH
49965: LD_VAR 0 5
49969: PPUSH
49970: LD_INT 3
49972: PPUSH
49973: CALL_OW 259
49977: PUSH
49978: LD_VAR 0 5
49982: PPUSH
49983: CALL_OW 432
49987: MINUS
49988: GREATEREQUAL
49989: IFFALSE 50007
// mech := result [ i ] ;
49991: LD_ADDR_VAR 0 5
49995: PUSH
49996: LD_VAR 0 2
50000: PUSH
50001: LD_VAR 0 3
50005: ARRAY
50006: ST_TO_ADDR
// end ;
50007: GO 49916
50009: POP
50010: POP
// ComLinkTo ( vehicle , mech ) ;
50011: LD_VAR 0 1
50015: PPUSH
50016: LD_VAR 0 5
50020: PPUSH
50021: CALL_OW 135
// end ;
50025: LD_VAR 0 2
50029: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50030: LD_INT 0
50032: PPUSH
50033: PPUSH
50034: PPUSH
50035: PPUSH
50036: PPUSH
50037: PPUSH
50038: PPUSH
50039: PPUSH
50040: PPUSH
50041: PPUSH
50042: PPUSH
50043: PPUSH
50044: PPUSH
// result := [ ] ;
50045: LD_ADDR_VAR 0 7
50049: PUSH
50050: EMPTY
50051: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50052: LD_VAR 0 1
50056: PPUSH
50057: CALL_OW 266
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: IN
50072: NOT
50073: IFFALSE 50077
// exit ;
50075: GO 51708
// if name then
50077: LD_VAR 0 3
50081: IFFALSE 50097
// SetBName ( base_dep , name ) ;
50083: LD_VAR 0 1
50087: PPUSH
50088: LD_VAR 0 3
50092: PPUSH
50093: CALL_OW 500
// base := GetBase ( base_dep ) ;
50097: LD_ADDR_VAR 0 15
50101: PUSH
50102: LD_VAR 0 1
50106: PPUSH
50107: CALL_OW 274
50111: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50112: LD_ADDR_VAR 0 16
50116: PUSH
50117: LD_VAR 0 1
50121: PPUSH
50122: CALL_OW 255
50126: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50127: LD_ADDR_VAR 0 17
50131: PUSH
50132: LD_VAR 0 1
50136: PPUSH
50137: CALL_OW 248
50141: ST_TO_ADDR
// if sources then
50142: LD_VAR 0 5
50146: IFFALSE 50193
// for i = 1 to 3 do
50148: LD_ADDR_VAR 0 8
50152: PUSH
50153: DOUBLE
50154: LD_INT 1
50156: DEC
50157: ST_TO_ADDR
50158: LD_INT 3
50160: PUSH
50161: FOR_TO
50162: IFFALSE 50191
// AddResourceType ( base , i , sources [ i ] ) ;
50164: LD_VAR 0 15
50168: PPUSH
50169: LD_VAR 0 8
50173: PPUSH
50174: LD_VAR 0 5
50178: PUSH
50179: LD_VAR 0 8
50183: ARRAY
50184: PPUSH
50185: CALL_OW 276
50189: GO 50161
50191: POP
50192: POP
// buildings := GetBaseBuildings ( base , area ) ;
50193: LD_ADDR_VAR 0 18
50197: PUSH
50198: LD_VAR 0 15
50202: PPUSH
50203: LD_VAR 0 2
50207: PPUSH
50208: CALL 49485 0 2
50212: ST_TO_ADDR
// InitHc ;
50213: CALL_OW 19
// InitUc ;
50217: CALL_OW 18
// uc_side := side ;
50221: LD_ADDR_OWVAR 20
50225: PUSH
50226: LD_VAR 0 16
50230: ST_TO_ADDR
// uc_nation := nation ;
50231: LD_ADDR_OWVAR 21
50235: PUSH
50236: LD_VAR 0 17
50240: ST_TO_ADDR
// if buildings then
50241: LD_VAR 0 18
50245: IFFALSE 51567
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50247: LD_ADDR_VAR 0 19
50251: PUSH
50252: LD_VAR 0 18
50256: PPUSH
50257: LD_INT 2
50259: PUSH
50260: LD_INT 30
50262: PUSH
50263: LD_INT 29
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 30
50272: PUSH
50273: LD_INT 30
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: LIST
50284: PPUSH
50285: CALL_OW 72
50289: ST_TO_ADDR
// if tmp then
50290: LD_VAR 0 19
50294: IFFALSE 50342
// for i in tmp do
50296: LD_ADDR_VAR 0 8
50300: PUSH
50301: LD_VAR 0 19
50305: PUSH
50306: FOR_IN
50307: IFFALSE 50340
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50309: LD_VAR 0 8
50313: PPUSH
50314: CALL_OW 250
50318: PPUSH
50319: LD_VAR 0 8
50323: PPUSH
50324: CALL_OW 251
50328: PPUSH
50329: LD_VAR 0 16
50333: PPUSH
50334: CALL_OW 441
50338: GO 50306
50340: POP
50341: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50342: LD_VAR 0 18
50346: PPUSH
50347: LD_INT 2
50349: PUSH
50350: LD_INT 30
50352: PUSH
50353: LD_INT 32
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 30
50362: PUSH
50363: LD_INT 33
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: LIST
50374: PPUSH
50375: CALL_OW 72
50379: IFFALSE 50467
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50381: LD_ADDR_VAR 0 8
50385: PUSH
50386: LD_VAR 0 18
50390: PPUSH
50391: LD_INT 2
50393: PUSH
50394: LD_INT 30
50396: PUSH
50397: LD_INT 32
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 30
50406: PUSH
50407: LD_INT 33
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: LIST
50418: PPUSH
50419: CALL_OW 72
50423: PUSH
50424: FOR_IN
50425: IFFALSE 50465
// begin if not GetBWeapon ( i ) then
50427: LD_VAR 0 8
50431: PPUSH
50432: CALL_OW 269
50436: NOT
50437: IFFALSE 50463
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50439: LD_VAR 0 8
50443: PPUSH
50444: LD_VAR 0 8
50448: PPUSH
50449: LD_VAR 0 2
50453: PPUSH
50454: CALL 51713 0 2
50458: PPUSH
50459: CALL_OW 431
// end ;
50463: GO 50424
50465: POP
50466: POP
// end ; for i = 1 to personel do
50467: LD_ADDR_VAR 0 8
50471: PUSH
50472: DOUBLE
50473: LD_INT 1
50475: DEC
50476: ST_TO_ADDR
50477: LD_VAR 0 6
50481: PUSH
50482: FOR_TO
50483: IFFALSE 51547
// begin if i > 4 then
50485: LD_VAR 0 8
50489: PUSH
50490: LD_INT 4
50492: GREATER
50493: IFFALSE 50497
// break ;
50495: GO 51547
// case i of 1 :
50497: LD_VAR 0 8
50501: PUSH
50502: LD_INT 1
50504: DOUBLE
50505: EQUAL
50506: IFTRUE 50510
50508: GO 50590
50510: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50511: LD_ADDR_VAR 0 12
50515: PUSH
50516: LD_VAR 0 18
50520: PPUSH
50521: LD_INT 22
50523: PUSH
50524: LD_VAR 0 16
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 58
50535: PUSH
50536: EMPTY
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: PUSH
50542: LD_INT 30
50544: PUSH
50545: LD_INT 32
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 30
50554: PUSH
50555: LD_INT 4
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 30
50564: PUSH
50565: LD_INT 5
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: LIST
50582: PPUSH
50583: CALL_OW 72
50587: ST_TO_ADDR
50588: GO 50812
50590: LD_INT 2
50592: DOUBLE
50593: EQUAL
50594: IFTRUE 50598
50596: GO 50660
50598: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50599: LD_ADDR_VAR 0 12
50603: PUSH
50604: LD_VAR 0 18
50608: PPUSH
50609: LD_INT 22
50611: PUSH
50612: LD_VAR 0 16
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: LD_INT 30
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 30
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PPUSH
50653: CALL_OW 72
50657: ST_TO_ADDR
50658: GO 50812
50660: LD_INT 3
50662: DOUBLE
50663: EQUAL
50664: IFTRUE 50668
50666: GO 50730
50668: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50669: LD_ADDR_VAR 0 12
50673: PUSH
50674: LD_VAR 0 18
50678: PPUSH
50679: LD_INT 22
50681: PUSH
50682: LD_VAR 0 16
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 30
50696: PUSH
50697: LD_INT 2
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 30
50706: PUSH
50707: LD_INT 3
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: LIST
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PPUSH
50723: CALL_OW 72
50727: ST_TO_ADDR
50728: GO 50812
50730: LD_INT 4
50732: DOUBLE
50733: EQUAL
50734: IFTRUE 50738
50736: GO 50811
50738: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50739: LD_ADDR_VAR 0 12
50743: PUSH
50744: LD_VAR 0 18
50748: PPUSH
50749: LD_INT 22
50751: PUSH
50752: LD_VAR 0 16
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 2
50763: PUSH
50764: LD_INT 30
50766: PUSH
50767: LD_INT 6
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 30
50776: PUSH
50777: LD_INT 7
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 30
50786: PUSH
50787: LD_INT 8
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PPUSH
50804: CALL_OW 72
50808: ST_TO_ADDR
50809: GO 50812
50811: POP
// if i = 1 then
50812: LD_VAR 0 8
50816: PUSH
50817: LD_INT 1
50819: EQUAL
50820: IFFALSE 50931
// begin tmp := [ ] ;
50822: LD_ADDR_VAR 0 19
50826: PUSH
50827: EMPTY
50828: ST_TO_ADDR
// for j in f do
50829: LD_ADDR_VAR 0 9
50833: PUSH
50834: LD_VAR 0 12
50838: PUSH
50839: FOR_IN
50840: IFFALSE 50913
// if GetBType ( j ) = b_bunker then
50842: LD_VAR 0 9
50846: PPUSH
50847: CALL_OW 266
50851: PUSH
50852: LD_INT 32
50854: EQUAL
50855: IFFALSE 50882
// tmp := Insert ( tmp , 1 , j ) else
50857: LD_ADDR_VAR 0 19
50861: PUSH
50862: LD_VAR 0 19
50866: PPUSH
50867: LD_INT 1
50869: PPUSH
50870: LD_VAR 0 9
50874: PPUSH
50875: CALL_OW 2
50879: ST_TO_ADDR
50880: GO 50911
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50882: LD_ADDR_VAR 0 19
50886: PUSH
50887: LD_VAR 0 19
50891: PPUSH
50892: LD_VAR 0 19
50896: PUSH
50897: LD_INT 1
50899: PLUS
50900: PPUSH
50901: LD_VAR 0 9
50905: PPUSH
50906: CALL_OW 2
50910: ST_TO_ADDR
50911: GO 50839
50913: POP
50914: POP
// if tmp then
50915: LD_VAR 0 19
50919: IFFALSE 50931
// f := tmp ;
50921: LD_ADDR_VAR 0 12
50925: PUSH
50926: LD_VAR 0 19
50930: ST_TO_ADDR
// end ; x := personel [ i ] ;
50931: LD_ADDR_VAR 0 13
50935: PUSH
50936: LD_VAR 0 6
50940: PUSH
50941: LD_VAR 0 8
50945: ARRAY
50946: ST_TO_ADDR
// if x = - 1 then
50947: LD_VAR 0 13
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: EQUAL
50956: IFFALSE 51165
// begin for j in f do
50958: LD_ADDR_VAR 0 9
50962: PUSH
50963: LD_VAR 0 12
50967: PUSH
50968: FOR_IN
50969: IFFALSE 51161
// repeat InitHc ;
50971: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50975: LD_VAR 0 9
50979: PPUSH
50980: CALL_OW 266
50984: PUSH
50985: LD_INT 5
50987: EQUAL
50988: IFFALSE 51058
// begin if UnitsInside ( j ) < 3 then
50990: LD_VAR 0 9
50994: PPUSH
50995: CALL_OW 313
50999: PUSH
51000: LD_INT 3
51002: LESS
51003: IFFALSE 51039
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51005: LD_INT 0
51007: PPUSH
51008: LD_INT 5
51010: PUSH
51011: LD_INT 8
51013: PUSH
51014: LD_INT 9
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: LIST
51021: PUSH
51022: LD_VAR 0 17
51026: ARRAY
51027: PPUSH
51028: LD_VAR 0 4
51032: PPUSH
51033: CALL_OW 380
51037: GO 51056
// PrepareHuman ( false , i , skill ) ;
51039: LD_INT 0
51041: PPUSH
51042: LD_VAR 0 8
51046: PPUSH
51047: LD_VAR 0 4
51051: PPUSH
51052: CALL_OW 380
// end else
51056: GO 51075
// PrepareHuman ( false , i , skill ) ;
51058: LD_INT 0
51060: PPUSH
51061: LD_VAR 0 8
51065: PPUSH
51066: LD_VAR 0 4
51070: PPUSH
51071: CALL_OW 380
// un := CreateHuman ;
51075: LD_ADDR_VAR 0 14
51079: PUSH
51080: CALL_OW 44
51084: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51085: LD_ADDR_VAR 0 7
51089: PUSH
51090: LD_VAR 0 7
51094: PPUSH
51095: LD_INT 1
51097: PPUSH
51098: LD_VAR 0 14
51102: PPUSH
51103: CALL_OW 2
51107: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51108: LD_VAR 0 14
51112: PPUSH
51113: LD_VAR 0 9
51117: PPUSH
51118: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51122: LD_VAR 0 9
51126: PPUSH
51127: CALL_OW 313
51131: PUSH
51132: LD_INT 6
51134: EQUAL
51135: PUSH
51136: LD_VAR 0 9
51140: PPUSH
51141: CALL_OW 266
51145: PUSH
51146: LD_INT 32
51148: PUSH
51149: LD_INT 31
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: IN
51156: OR
51157: IFFALSE 50971
51159: GO 50968
51161: POP
51162: POP
// end else
51163: GO 51545
// for j = 1 to x do
51165: LD_ADDR_VAR 0 9
51169: PUSH
51170: DOUBLE
51171: LD_INT 1
51173: DEC
51174: ST_TO_ADDR
51175: LD_VAR 0 13
51179: PUSH
51180: FOR_TO
51181: IFFALSE 51543
// begin InitHc ;
51183: CALL_OW 19
// if not f then
51187: LD_VAR 0 12
51191: NOT
51192: IFFALSE 51281
// begin PrepareHuman ( false , i , skill ) ;
51194: LD_INT 0
51196: PPUSH
51197: LD_VAR 0 8
51201: PPUSH
51202: LD_VAR 0 4
51206: PPUSH
51207: CALL_OW 380
// un := CreateHuman ;
51211: LD_ADDR_VAR 0 14
51215: PUSH
51216: CALL_OW 44
51220: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51221: LD_ADDR_VAR 0 7
51225: PUSH
51226: LD_VAR 0 7
51230: PPUSH
51231: LD_INT 1
51233: PPUSH
51234: LD_VAR 0 14
51238: PPUSH
51239: CALL_OW 2
51243: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51244: LD_VAR 0 14
51248: PPUSH
51249: LD_VAR 0 1
51253: PPUSH
51254: CALL_OW 250
51258: PPUSH
51259: LD_VAR 0 1
51263: PPUSH
51264: CALL_OW 251
51268: PPUSH
51269: LD_INT 10
51271: PPUSH
51272: LD_INT 0
51274: PPUSH
51275: CALL_OW 50
// continue ;
51279: GO 51180
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51281: LD_VAR 0 12
51285: PUSH
51286: LD_INT 1
51288: ARRAY
51289: PPUSH
51290: CALL_OW 313
51294: PUSH
51295: LD_VAR 0 12
51299: PUSH
51300: LD_INT 1
51302: ARRAY
51303: PPUSH
51304: CALL_OW 266
51308: PUSH
51309: LD_INT 32
51311: PUSH
51312: LD_INT 31
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: IN
51319: AND
51320: PUSH
51321: LD_VAR 0 12
51325: PUSH
51326: LD_INT 1
51328: ARRAY
51329: PPUSH
51330: CALL_OW 313
51334: PUSH
51335: LD_INT 6
51337: EQUAL
51338: OR
51339: IFFALSE 51359
// f := Delete ( f , 1 ) ;
51341: LD_ADDR_VAR 0 12
51345: PUSH
51346: LD_VAR 0 12
51350: PPUSH
51351: LD_INT 1
51353: PPUSH
51354: CALL_OW 3
51358: ST_TO_ADDR
// if not f then
51359: LD_VAR 0 12
51363: NOT
51364: IFFALSE 51382
// begin x := x + 2 ;
51366: LD_ADDR_VAR 0 13
51370: PUSH
51371: LD_VAR 0 13
51375: PUSH
51376: LD_INT 2
51378: PLUS
51379: ST_TO_ADDR
// continue ;
51380: GO 51180
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51382: LD_VAR 0 12
51386: PUSH
51387: LD_INT 1
51389: ARRAY
51390: PPUSH
51391: CALL_OW 266
51395: PUSH
51396: LD_INT 5
51398: EQUAL
51399: IFFALSE 51473
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51401: LD_VAR 0 12
51405: PUSH
51406: LD_INT 1
51408: ARRAY
51409: PPUSH
51410: CALL_OW 313
51414: PUSH
51415: LD_INT 3
51417: LESS
51418: IFFALSE 51454
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51420: LD_INT 0
51422: PPUSH
51423: LD_INT 5
51425: PUSH
51426: LD_INT 8
51428: PUSH
51429: LD_INT 9
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: LIST
51436: PUSH
51437: LD_VAR 0 17
51441: ARRAY
51442: PPUSH
51443: LD_VAR 0 4
51447: PPUSH
51448: CALL_OW 380
51452: GO 51471
// PrepareHuman ( false , i , skill ) ;
51454: LD_INT 0
51456: PPUSH
51457: LD_VAR 0 8
51461: PPUSH
51462: LD_VAR 0 4
51466: PPUSH
51467: CALL_OW 380
// end else
51471: GO 51490
// PrepareHuman ( false , i , skill ) ;
51473: LD_INT 0
51475: PPUSH
51476: LD_VAR 0 8
51480: PPUSH
51481: LD_VAR 0 4
51485: PPUSH
51486: CALL_OW 380
// un := CreateHuman ;
51490: LD_ADDR_VAR 0 14
51494: PUSH
51495: CALL_OW 44
51499: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51500: LD_ADDR_VAR 0 7
51504: PUSH
51505: LD_VAR 0 7
51509: PPUSH
51510: LD_INT 1
51512: PPUSH
51513: LD_VAR 0 14
51517: PPUSH
51518: CALL_OW 2
51522: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51523: LD_VAR 0 14
51527: PPUSH
51528: LD_VAR 0 12
51532: PUSH
51533: LD_INT 1
51535: ARRAY
51536: PPUSH
51537: CALL_OW 52
// end ;
51541: GO 51180
51543: POP
51544: POP
// end ;
51545: GO 50482
51547: POP
51548: POP
// result := result ^ buildings ;
51549: LD_ADDR_VAR 0 7
51553: PUSH
51554: LD_VAR 0 7
51558: PUSH
51559: LD_VAR 0 18
51563: ADD
51564: ST_TO_ADDR
// end else
51565: GO 51708
// begin for i = 1 to personel do
51567: LD_ADDR_VAR 0 8
51571: PUSH
51572: DOUBLE
51573: LD_INT 1
51575: DEC
51576: ST_TO_ADDR
51577: LD_VAR 0 6
51581: PUSH
51582: FOR_TO
51583: IFFALSE 51706
// begin if i > 4 then
51585: LD_VAR 0 8
51589: PUSH
51590: LD_INT 4
51592: GREATER
51593: IFFALSE 51597
// break ;
51595: GO 51706
// x := personel [ i ] ;
51597: LD_ADDR_VAR 0 13
51601: PUSH
51602: LD_VAR 0 6
51606: PUSH
51607: LD_VAR 0 8
51611: ARRAY
51612: ST_TO_ADDR
// if x = - 1 then
51613: LD_VAR 0 13
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: EQUAL
51622: IFFALSE 51626
// continue ;
51624: GO 51582
// PrepareHuman ( false , i , skill ) ;
51626: LD_INT 0
51628: PPUSH
51629: LD_VAR 0 8
51633: PPUSH
51634: LD_VAR 0 4
51638: PPUSH
51639: CALL_OW 380
// un := CreateHuman ;
51643: LD_ADDR_VAR 0 14
51647: PUSH
51648: CALL_OW 44
51652: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51653: LD_VAR 0 14
51657: PPUSH
51658: LD_VAR 0 1
51662: PPUSH
51663: CALL_OW 250
51667: PPUSH
51668: LD_VAR 0 1
51672: PPUSH
51673: CALL_OW 251
51677: PPUSH
51678: LD_INT 10
51680: PPUSH
51681: LD_INT 0
51683: PPUSH
51684: CALL_OW 50
// result := result ^ un ;
51688: LD_ADDR_VAR 0 7
51692: PUSH
51693: LD_VAR 0 7
51697: PUSH
51698: LD_VAR 0 14
51702: ADD
51703: ST_TO_ADDR
// end ;
51704: GO 51582
51706: POP
51707: POP
// end ; end ;
51708: LD_VAR 0 7
51712: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51713: LD_INT 0
51715: PPUSH
51716: PPUSH
51717: PPUSH
51718: PPUSH
51719: PPUSH
51720: PPUSH
51721: PPUSH
51722: PPUSH
51723: PPUSH
51724: PPUSH
51725: PPUSH
51726: PPUSH
51727: PPUSH
51728: PPUSH
51729: PPUSH
51730: PPUSH
// result := false ;
51731: LD_ADDR_VAR 0 3
51735: PUSH
51736: LD_INT 0
51738: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51739: LD_VAR 0 1
51743: NOT
51744: PUSH
51745: LD_VAR 0 1
51749: PPUSH
51750: CALL_OW 266
51754: PUSH
51755: LD_INT 32
51757: PUSH
51758: LD_INT 33
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: IN
51765: NOT
51766: OR
51767: IFFALSE 51771
// exit ;
51769: GO 52907
// nat := GetNation ( tower ) ;
51771: LD_ADDR_VAR 0 12
51775: PUSH
51776: LD_VAR 0 1
51780: PPUSH
51781: CALL_OW 248
51785: ST_TO_ADDR
// side := GetSide ( tower ) ;
51786: LD_ADDR_VAR 0 16
51790: PUSH
51791: LD_VAR 0 1
51795: PPUSH
51796: CALL_OW 255
51800: ST_TO_ADDR
// x := GetX ( tower ) ;
51801: LD_ADDR_VAR 0 10
51805: PUSH
51806: LD_VAR 0 1
51810: PPUSH
51811: CALL_OW 250
51815: ST_TO_ADDR
// y := GetY ( tower ) ;
51816: LD_ADDR_VAR 0 11
51820: PUSH
51821: LD_VAR 0 1
51825: PPUSH
51826: CALL_OW 251
51830: ST_TO_ADDR
// if not x or not y then
51831: LD_VAR 0 10
51835: NOT
51836: PUSH
51837: LD_VAR 0 11
51841: NOT
51842: OR
51843: IFFALSE 51847
// exit ;
51845: GO 52907
// weapon := 0 ;
51847: LD_ADDR_VAR 0 18
51851: PUSH
51852: LD_INT 0
51854: ST_TO_ADDR
// fac_list := [ ] ;
51855: LD_ADDR_VAR 0 17
51859: PUSH
51860: EMPTY
51861: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
51862: LD_ADDR_VAR 0 6
51866: PUSH
51867: LD_VAR 0 1
51871: PPUSH
51872: CALL_OW 274
51876: PPUSH
51877: LD_VAR 0 2
51881: PPUSH
51882: CALL 49485 0 2
51886: PPUSH
51887: LD_INT 30
51889: PUSH
51890: LD_INT 3
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PPUSH
51897: CALL_OW 72
51901: ST_TO_ADDR
// if not factories then
51902: LD_VAR 0 6
51906: NOT
51907: IFFALSE 51911
// exit ;
51909: GO 52907
// for i in factories do
51911: LD_ADDR_VAR 0 8
51915: PUSH
51916: LD_VAR 0 6
51920: PUSH
51921: FOR_IN
51922: IFFALSE 51947
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51924: LD_ADDR_VAR 0 17
51928: PUSH
51929: LD_VAR 0 17
51933: PUSH
51934: LD_VAR 0 8
51938: PPUSH
51939: CALL_OW 478
51943: UNION
51944: ST_TO_ADDR
51945: GO 51921
51947: POP
51948: POP
// if not fac_list then
51949: LD_VAR 0 17
51953: NOT
51954: IFFALSE 51958
// exit ;
51956: GO 52907
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51958: LD_ADDR_VAR 0 5
51962: PUSH
51963: LD_INT 4
51965: PUSH
51966: LD_INT 5
51968: PUSH
51969: LD_INT 9
51971: PUSH
51972: LD_INT 10
51974: PUSH
51975: LD_INT 6
51977: PUSH
51978: LD_INT 7
51980: PUSH
51981: LD_INT 11
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 27
51995: PUSH
51996: LD_INT 28
51998: PUSH
51999: LD_INT 26
52001: PUSH
52002: LD_INT 30
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 43
52013: PUSH
52014: LD_INT 44
52016: PUSH
52017: LD_INT 46
52019: PUSH
52020: LD_INT 45
52022: PUSH
52023: LD_INT 47
52025: PUSH
52026: LD_INT 49
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: PUSH
52042: LD_VAR 0 12
52046: ARRAY
52047: ST_TO_ADDR
// for i in list do
52048: LD_ADDR_VAR 0 8
52052: PUSH
52053: LD_VAR 0 5
52057: PUSH
52058: FOR_IN
52059: IFFALSE 52092
// if not i in fac_list then
52061: LD_VAR 0 8
52065: PUSH
52066: LD_VAR 0 17
52070: IN
52071: NOT
52072: IFFALSE 52090
// list := list diff i ;
52074: LD_ADDR_VAR 0 5
52078: PUSH
52079: LD_VAR 0 5
52083: PUSH
52084: LD_VAR 0 8
52088: DIFF
52089: ST_TO_ADDR
52090: GO 52058
52092: POP
52093: POP
// if not list then
52094: LD_VAR 0 5
52098: NOT
52099: IFFALSE 52103
// exit ;
52101: GO 52907
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52103: LD_VAR 0 12
52107: PUSH
52108: LD_INT 3
52110: EQUAL
52111: PUSH
52112: LD_INT 49
52114: PUSH
52115: LD_VAR 0 5
52119: IN
52120: AND
52121: PUSH
52122: LD_INT 31
52124: PPUSH
52125: LD_VAR 0 16
52129: PPUSH
52130: CALL_OW 321
52134: PUSH
52135: LD_INT 2
52137: EQUAL
52138: AND
52139: IFFALSE 52199
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52141: LD_INT 22
52143: PUSH
52144: LD_VAR 0 16
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 35
52155: PUSH
52156: LD_INT 49
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 91
52165: PUSH
52166: LD_VAR 0 1
52170: PUSH
52171: LD_INT 10
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: LIST
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: LIST
52183: PPUSH
52184: CALL_OW 69
52188: NOT
52189: IFFALSE 52199
// weapon := ru_time_lapser ;
52191: LD_ADDR_VAR 0 18
52195: PUSH
52196: LD_INT 49
52198: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52199: LD_VAR 0 12
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: IN
52214: PUSH
52215: LD_INT 11
52217: PUSH
52218: LD_VAR 0 5
52222: IN
52223: PUSH
52224: LD_INT 30
52226: PUSH
52227: LD_VAR 0 5
52231: IN
52232: OR
52233: AND
52234: PUSH
52235: LD_INT 6
52237: PPUSH
52238: LD_VAR 0 16
52242: PPUSH
52243: CALL_OW 321
52247: PUSH
52248: LD_INT 2
52250: EQUAL
52251: AND
52252: IFFALSE 52417
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52254: LD_INT 22
52256: PUSH
52257: LD_VAR 0 16
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: LD_INT 35
52271: PUSH
52272: LD_INT 11
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 35
52281: PUSH
52282: LD_INT 30
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 91
52296: PUSH
52297: LD_VAR 0 1
52301: PUSH
52302: LD_INT 18
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: LIST
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: LIST
52314: PPUSH
52315: CALL_OW 69
52319: NOT
52320: PUSH
52321: LD_INT 22
52323: PUSH
52324: LD_VAR 0 16
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 2
52335: PUSH
52336: LD_INT 30
52338: PUSH
52339: LD_INT 32
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 30
52348: PUSH
52349: LD_INT 33
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 91
52363: PUSH
52364: LD_VAR 0 1
52368: PUSH
52369: LD_INT 12
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: LIST
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: LIST
52381: PUSH
52382: EMPTY
52383: LIST
52384: PPUSH
52385: CALL_OW 69
52389: PUSH
52390: LD_INT 2
52392: GREATER
52393: AND
52394: IFFALSE 52417
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52396: LD_ADDR_VAR 0 18
52400: PUSH
52401: LD_INT 11
52403: PUSH
52404: LD_INT 30
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_VAR 0 12
52415: ARRAY
52416: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52417: LD_VAR 0 18
52421: NOT
52422: PUSH
52423: LD_INT 40
52425: PPUSH
52426: LD_VAR 0 16
52430: PPUSH
52431: CALL_OW 321
52435: PUSH
52436: LD_INT 2
52438: EQUAL
52439: AND
52440: PUSH
52441: LD_INT 7
52443: PUSH
52444: LD_VAR 0 5
52448: IN
52449: PUSH
52450: LD_INT 28
52452: PUSH
52453: LD_VAR 0 5
52457: IN
52458: OR
52459: PUSH
52460: LD_INT 45
52462: PUSH
52463: LD_VAR 0 5
52467: IN
52468: OR
52469: AND
52470: IFFALSE 52724
// begin hex := GetHexInfo ( x , y ) ;
52472: LD_ADDR_VAR 0 4
52476: PUSH
52477: LD_VAR 0 10
52481: PPUSH
52482: LD_VAR 0 11
52486: PPUSH
52487: CALL_OW 546
52491: ST_TO_ADDR
// if hex [ 1 ] then
52492: LD_VAR 0 4
52496: PUSH
52497: LD_INT 1
52499: ARRAY
52500: IFFALSE 52504
// exit ;
52502: GO 52907
// height := hex [ 2 ] ;
52504: LD_ADDR_VAR 0 15
52508: PUSH
52509: LD_VAR 0 4
52513: PUSH
52514: LD_INT 2
52516: ARRAY
52517: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52518: LD_ADDR_VAR 0 14
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: LD_INT 3
52531: PUSH
52532: LD_INT 5
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: ST_TO_ADDR
// for i in tmp do
52541: LD_ADDR_VAR 0 8
52545: PUSH
52546: LD_VAR 0 14
52550: PUSH
52551: FOR_IN
52552: IFFALSE 52722
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52554: LD_ADDR_VAR 0 9
52558: PUSH
52559: LD_VAR 0 10
52563: PPUSH
52564: LD_VAR 0 8
52568: PPUSH
52569: LD_INT 5
52571: PPUSH
52572: CALL_OW 272
52576: PUSH
52577: LD_VAR 0 11
52581: PPUSH
52582: LD_VAR 0 8
52586: PPUSH
52587: LD_INT 5
52589: PPUSH
52590: CALL_OW 273
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52599: LD_VAR 0 9
52603: PUSH
52604: LD_INT 1
52606: ARRAY
52607: PPUSH
52608: LD_VAR 0 9
52612: PUSH
52613: LD_INT 2
52615: ARRAY
52616: PPUSH
52617: CALL_OW 488
52621: IFFALSE 52720
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52623: LD_ADDR_VAR 0 4
52627: PUSH
52628: LD_VAR 0 9
52632: PUSH
52633: LD_INT 1
52635: ARRAY
52636: PPUSH
52637: LD_VAR 0 9
52641: PUSH
52642: LD_INT 2
52644: ARRAY
52645: PPUSH
52646: CALL_OW 546
52650: ST_TO_ADDR
// if hex [ 1 ] then
52651: LD_VAR 0 4
52655: PUSH
52656: LD_INT 1
52658: ARRAY
52659: IFFALSE 52663
// continue ;
52661: GO 52551
// h := hex [ 2 ] ;
52663: LD_ADDR_VAR 0 13
52667: PUSH
52668: LD_VAR 0 4
52672: PUSH
52673: LD_INT 2
52675: ARRAY
52676: ST_TO_ADDR
// if h + 7 < height then
52677: LD_VAR 0 13
52681: PUSH
52682: LD_INT 7
52684: PLUS
52685: PUSH
52686: LD_VAR 0 15
52690: LESS
52691: IFFALSE 52720
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52693: LD_ADDR_VAR 0 18
52697: PUSH
52698: LD_INT 7
52700: PUSH
52701: LD_INT 28
52703: PUSH
52704: LD_INT 45
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: PUSH
52712: LD_VAR 0 12
52716: ARRAY
52717: ST_TO_ADDR
// break ;
52718: GO 52722
// end ; end ; end ;
52720: GO 52551
52722: POP
52723: POP
// end ; if not weapon then
52724: LD_VAR 0 18
52728: NOT
52729: IFFALSE 52789
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52731: LD_ADDR_VAR 0 5
52735: PUSH
52736: LD_VAR 0 5
52740: PUSH
52741: LD_INT 11
52743: PUSH
52744: LD_INT 30
52746: PUSH
52747: LD_INT 49
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: LIST
52754: DIFF
52755: ST_TO_ADDR
// if not list then
52756: LD_VAR 0 5
52760: NOT
52761: IFFALSE 52765
// exit ;
52763: GO 52907
// weapon := list [ rand ( 1 , list ) ] ;
52765: LD_ADDR_VAR 0 18
52769: PUSH
52770: LD_VAR 0 5
52774: PUSH
52775: LD_INT 1
52777: PPUSH
52778: LD_VAR 0 5
52782: PPUSH
52783: CALL_OW 12
52787: ARRAY
52788: ST_TO_ADDR
// end ; if weapon then
52789: LD_VAR 0 18
52793: IFFALSE 52907
// begin tmp := CostOfWeapon ( weapon ) ;
52795: LD_ADDR_VAR 0 14
52799: PUSH
52800: LD_VAR 0 18
52804: PPUSH
52805: CALL_OW 451
52809: ST_TO_ADDR
// j := GetBase ( tower ) ;
52810: LD_ADDR_VAR 0 9
52814: PUSH
52815: LD_VAR 0 1
52819: PPUSH
52820: CALL_OW 274
52824: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52825: LD_VAR 0 9
52829: PPUSH
52830: LD_INT 1
52832: PPUSH
52833: CALL_OW 275
52837: PUSH
52838: LD_VAR 0 14
52842: PUSH
52843: LD_INT 1
52845: ARRAY
52846: GREATEREQUAL
52847: PUSH
52848: LD_VAR 0 9
52852: PPUSH
52853: LD_INT 2
52855: PPUSH
52856: CALL_OW 275
52860: PUSH
52861: LD_VAR 0 14
52865: PUSH
52866: LD_INT 2
52868: ARRAY
52869: GREATEREQUAL
52870: AND
52871: PUSH
52872: LD_VAR 0 9
52876: PPUSH
52877: LD_INT 3
52879: PPUSH
52880: CALL_OW 275
52884: PUSH
52885: LD_VAR 0 14
52889: PUSH
52890: LD_INT 3
52892: ARRAY
52893: GREATEREQUAL
52894: AND
52895: IFFALSE 52907
// result := weapon ;
52897: LD_ADDR_VAR 0 3
52901: PUSH
52902: LD_VAR 0 18
52906: ST_TO_ADDR
// end ; end ;
52907: LD_VAR 0 3
52911: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52912: LD_INT 0
52914: PPUSH
52915: PPUSH
// result := true ;
52916: LD_ADDR_VAR 0 3
52920: PUSH
52921: LD_INT 1
52923: ST_TO_ADDR
// if array1 = array2 then
52924: LD_VAR 0 1
52928: PUSH
52929: LD_VAR 0 2
52933: EQUAL
52934: IFFALSE 52994
// begin for i = 1 to array1 do
52936: LD_ADDR_VAR 0 4
52940: PUSH
52941: DOUBLE
52942: LD_INT 1
52944: DEC
52945: ST_TO_ADDR
52946: LD_VAR 0 1
52950: PUSH
52951: FOR_TO
52952: IFFALSE 52990
// if array1 [ i ] <> array2 [ i ] then
52954: LD_VAR 0 1
52958: PUSH
52959: LD_VAR 0 4
52963: ARRAY
52964: PUSH
52965: LD_VAR 0 2
52969: PUSH
52970: LD_VAR 0 4
52974: ARRAY
52975: NONEQUAL
52976: IFFALSE 52988
// begin result := false ;
52978: LD_ADDR_VAR 0 3
52982: PUSH
52983: LD_INT 0
52985: ST_TO_ADDR
// break ;
52986: GO 52990
// end ;
52988: GO 52951
52990: POP
52991: POP
// end else
52992: GO 53002
// result := false ;
52994: LD_ADDR_VAR 0 3
52998: PUSH
52999: LD_INT 0
53001: ST_TO_ADDR
// end ;
53002: LD_VAR 0 3
53006: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53007: LD_INT 0
53009: PPUSH
53010: PPUSH
53011: PPUSH
// pom := GetBase ( fac ) ;
53012: LD_ADDR_VAR 0 5
53016: PUSH
53017: LD_VAR 0 1
53021: PPUSH
53022: CALL_OW 274
53026: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53027: LD_ADDR_VAR 0 4
53031: PUSH
53032: LD_VAR 0 2
53036: PUSH
53037: LD_INT 1
53039: ARRAY
53040: PPUSH
53041: LD_VAR 0 2
53045: PUSH
53046: LD_INT 2
53048: ARRAY
53049: PPUSH
53050: LD_VAR 0 2
53054: PUSH
53055: LD_INT 3
53057: ARRAY
53058: PPUSH
53059: LD_VAR 0 2
53063: PUSH
53064: LD_INT 4
53066: ARRAY
53067: PPUSH
53068: CALL_OW 449
53072: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53073: LD_ADDR_VAR 0 3
53077: PUSH
53078: LD_VAR 0 5
53082: PPUSH
53083: LD_INT 1
53085: PPUSH
53086: CALL_OW 275
53090: PUSH
53091: LD_VAR 0 4
53095: PUSH
53096: LD_INT 1
53098: ARRAY
53099: GREATEREQUAL
53100: PUSH
53101: LD_VAR 0 5
53105: PPUSH
53106: LD_INT 2
53108: PPUSH
53109: CALL_OW 275
53113: PUSH
53114: LD_VAR 0 4
53118: PUSH
53119: LD_INT 2
53121: ARRAY
53122: GREATEREQUAL
53123: AND
53124: PUSH
53125: LD_VAR 0 5
53129: PPUSH
53130: LD_INT 3
53132: PPUSH
53133: CALL_OW 275
53137: PUSH
53138: LD_VAR 0 4
53142: PUSH
53143: LD_INT 3
53145: ARRAY
53146: GREATEREQUAL
53147: AND
53148: ST_TO_ADDR
// end ;
53149: LD_VAR 0 3
53153: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53154: LD_INT 0
53156: PPUSH
53157: PPUSH
53158: PPUSH
53159: PPUSH
// pom := GetBase ( building ) ;
53160: LD_ADDR_VAR 0 3
53164: PUSH
53165: LD_VAR 0 1
53169: PPUSH
53170: CALL_OW 274
53174: ST_TO_ADDR
// if not pom then
53175: LD_VAR 0 3
53179: NOT
53180: IFFALSE 53184
// exit ;
53182: GO 53354
// btype := GetBType ( building ) ;
53184: LD_ADDR_VAR 0 5
53188: PUSH
53189: LD_VAR 0 1
53193: PPUSH
53194: CALL_OW 266
53198: ST_TO_ADDR
// if btype = b_armoury then
53199: LD_VAR 0 5
53203: PUSH
53204: LD_INT 4
53206: EQUAL
53207: IFFALSE 53217
// btype := b_barracks ;
53209: LD_ADDR_VAR 0 5
53213: PUSH
53214: LD_INT 5
53216: ST_TO_ADDR
// if btype = b_depot then
53217: LD_VAR 0 5
53221: PUSH
53222: LD_INT 0
53224: EQUAL
53225: IFFALSE 53235
// btype := b_warehouse ;
53227: LD_ADDR_VAR 0 5
53231: PUSH
53232: LD_INT 1
53234: ST_TO_ADDR
// if btype = b_workshop then
53235: LD_VAR 0 5
53239: PUSH
53240: LD_INT 2
53242: EQUAL
53243: IFFALSE 53253
// btype := b_factory ;
53245: LD_ADDR_VAR 0 5
53249: PUSH
53250: LD_INT 3
53252: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53253: LD_ADDR_VAR 0 4
53257: PUSH
53258: LD_VAR 0 5
53262: PPUSH
53263: LD_VAR 0 1
53267: PPUSH
53268: CALL_OW 248
53272: PPUSH
53273: CALL_OW 450
53277: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53278: LD_ADDR_VAR 0 2
53282: PUSH
53283: LD_VAR 0 3
53287: PPUSH
53288: LD_INT 1
53290: PPUSH
53291: CALL_OW 275
53295: PUSH
53296: LD_VAR 0 4
53300: PUSH
53301: LD_INT 1
53303: ARRAY
53304: GREATEREQUAL
53305: PUSH
53306: LD_VAR 0 3
53310: PPUSH
53311: LD_INT 2
53313: PPUSH
53314: CALL_OW 275
53318: PUSH
53319: LD_VAR 0 4
53323: PUSH
53324: LD_INT 2
53326: ARRAY
53327: GREATEREQUAL
53328: AND
53329: PUSH
53330: LD_VAR 0 3
53334: PPUSH
53335: LD_INT 3
53337: PPUSH
53338: CALL_OW 275
53342: PUSH
53343: LD_VAR 0 4
53347: PUSH
53348: LD_INT 3
53350: ARRAY
53351: GREATEREQUAL
53352: AND
53353: ST_TO_ADDR
// end ;
53354: LD_VAR 0 2
53358: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53359: LD_INT 0
53361: PPUSH
53362: PPUSH
53363: PPUSH
// pom := GetBase ( building ) ;
53364: LD_ADDR_VAR 0 4
53368: PUSH
53369: LD_VAR 0 1
53373: PPUSH
53374: CALL_OW 274
53378: ST_TO_ADDR
// if not pom then
53379: LD_VAR 0 4
53383: NOT
53384: IFFALSE 53388
// exit ;
53386: GO 53489
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53388: LD_ADDR_VAR 0 5
53392: PUSH
53393: LD_VAR 0 2
53397: PPUSH
53398: LD_VAR 0 1
53402: PPUSH
53403: CALL_OW 248
53407: PPUSH
53408: CALL_OW 450
53412: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53413: LD_ADDR_VAR 0 3
53417: PUSH
53418: LD_VAR 0 4
53422: PPUSH
53423: LD_INT 1
53425: PPUSH
53426: CALL_OW 275
53430: PUSH
53431: LD_VAR 0 5
53435: PUSH
53436: LD_INT 1
53438: ARRAY
53439: GREATEREQUAL
53440: PUSH
53441: LD_VAR 0 4
53445: PPUSH
53446: LD_INT 2
53448: PPUSH
53449: CALL_OW 275
53453: PUSH
53454: LD_VAR 0 5
53458: PUSH
53459: LD_INT 2
53461: ARRAY
53462: GREATEREQUAL
53463: AND
53464: PUSH
53465: LD_VAR 0 4
53469: PPUSH
53470: LD_INT 3
53472: PPUSH
53473: CALL_OW 275
53477: PUSH
53478: LD_VAR 0 5
53482: PUSH
53483: LD_INT 3
53485: ARRAY
53486: GREATEREQUAL
53487: AND
53488: ST_TO_ADDR
// end ;
53489: LD_VAR 0 3
53493: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
53494: LD_INT 0
53496: PPUSH
53497: PPUSH
53498: PPUSH
53499: PPUSH
53500: PPUSH
53501: PPUSH
53502: PPUSH
53503: PPUSH
53504: PPUSH
53505: PPUSH
// result := false ;
53506: LD_ADDR_VAR 0 6
53510: PUSH
53511: LD_INT 0
53513: ST_TO_ADDR
// if not base or not btype or not x or not y then
53514: LD_VAR 0 1
53518: NOT
53519: PUSH
53520: LD_VAR 0 2
53524: NOT
53525: OR
53526: PUSH
53527: LD_VAR 0 3
53531: NOT
53532: OR
53533: PUSH
53534: LD_VAR 0 4
53538: NOT
53539: OR
53540: IFFALSE 53544
// exit ;
53542: GO 54153
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
53544: LD_ADDR_VAR 0 12
53548: PUSH
53549: LD_VAR 0 2
53553: PPUSH
53554: LD_VAR 0 3
53558: PPUSH
53559: LD_VAR 0 4
53563: PPUSH
53564: LD_VAR 0 5
53568: PPUSH
53569: LD_VAR 0 1
53573: PUSH
53574: LD_INT 1
53576: ARRAY
53577: PPUSH
53578: CALL_OW 248
53582: PPUSH
53583: LD_INT 0
53585: PPUSH
53586: CALL 54990 0 6
53590: ST_TO_ADDR
// if not hexes then
53591: LD_VAR 0 12
53595: NOT
53596: IFFALSE 53600
// exit ;
53598: GO 54153
// for i = 1 to hexes do
53600: LD_ADDR_VAR 0 7
53604: PUSH
53605: DOUBLE
53606: LD_INT 1
53608: DEC
53609: ST_TO_ADDR
53610: LD_VAR 0 12
53614: PUSH
53615: FOR_TO
53616: IFFALSE 54151
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53618: LD_ADDR_VAR 0 11
53622: PUSH
53623: LD_VAR 0 12
53627: PUSH
53628: LD_VAR 0 7
53632: ARRAY
53633: PUSH
53634: LD_INT 1
53636: ARRAY
53637: PPUSH
53638: LD_VAR 0 12
53642: PUSH
53643: LD_VAR 0 7
53647: ARRAY
53648: PUSH
53649: LD_INT 2
53651: ARRAY
53652: PPUSH
53653: CALL_OW 428
53657: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53658: LD_VAR 0 12
53662: PUSH
53663: LD_VAR 0 7
53667: ARRAY
53668: PUSH
53669: LD_INT 1
53671: ARRAY
53672: PPUSH
53673: LD_VAR 0 12
53677: PUSH
53678: LD_VAR 0 7
53682: ARRAY
53683: PUSH
53684: LD_INT 2
53686: ARRAY
53687: PPUSH
53688: CALL_OW 351
53692: PUSH
53693: LD_VAR 0 12
53697: PUSH
53698: LD_VAR 0 7
53702: ARRAY
53703: PUSH
53704: LD_INT 1
53706: ARRAY
53707: PPUSH
53708: LD_VAR 0 12
53712: PUSH
53713: LD_VAR 0 7
53717: ARRAY
53718: PUSH
53719: LD_INT 2
53721: ARRAY
53722: PPUSH
53723: CALL_OW 488
53727: NOT
53728: OR
53729: PUSH
53730: LD_VAR 0 11
53734: PPUSH
53735: CALL_OW 247
53739: PUSH
53740: LD_INT 3
53742: EQUAL
53743: OR
53744: IFFALSE 53750
// exit ;
53746: POP
53747: POP
53748: GO 54153
// if not tmp or not tmp in base then
53750: LD_VAR 0 11
53754: NOT
53755: PUSH
53756: LD_VAR 0 11
53760: PUSH
53761: LD_VAR 0 1
53765: IN
53766: NOT
53767: OR
53768: IFFALSE 53772
// continue ;
53770: GO 53615
// result := true ;
53772: LD_ADDR_VAR 0 6
53776: PUSH
53777: LD_INT 1
53779: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53780: LD_ADDR_VAR 0 15
53784: PUSH
53785: LD_VAR 0 1
53789: PPUSH
53790: LD_INT 22
53792: PUSH
53793: LD_VAR 0 11
53797: PPUSH
53798: CALL_OW 255
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 2
53809: PUSH
53810: LD_INT 30
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 30
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: LIST
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PPUSH
53839: CALL_OW 72
53843: ST_TO_ADDR
// if dep then
53844: LD_VAR 0 15
53848: IFFALSE 53984
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53850: LD_ADDR_VAR 0 14
53854: PUSH
53855: LD_VAR 0 15
53859: PUSH
53860: LD_INT 1
53862: ARRAY
53863: PPUSH
53864: CALL_OW 250
53868: PPUSH
53869: LD_VAR 0 15
53873: PUSH
53874: LD_INT 1
53876: ARRAY
53877: PPUSH
53878: CALL_OW 254
53882: PPUSH
53883: LD_INT 5
53885: PPUSH
53886: CALL_OW 272
53890: PUSH
53891: LD_VAR 0 15
53895: PUSH
53896: LD_INT 1
53898: ARRAY
53899: PPUSH
53900: CALL_OW 251
53904: PPUSH
53905: LD_VAR 0 15
53909: PUSH
53910: LD_INT 1
53912: ARRAY
53913: PPUSH
53914: CALL_OW 254
53918: PPUSH
53919: LD_INT 5
53921: PPUSH
53922: CALL_OW 273
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53931: LD_VAR 0 14
53935: PUSH
53936: LD_INT 1
53938: ARRAY
53939: PPUSH
53940: LD_VAR 0 14
53944: PUSH
53945: LD_INT 2
53947: ARRAY
53948: PPUSH
53949: CALL_OW 488
53953: IFFALSE 53984
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53955: LD_VAR 0 11
53959: PPUSH
53960: LD_VAR 0 14
53964: PUSH
53965: LD_INT 1
53967: ARRAY
53968: PPUSH
53969: LD_VAR 0 14
53973: PUSH
53974: LD_INT 2
53976: ARRAY
53977: PPUSH
53978: CALL_OW 111
// continue ;
53982: GO 53615
// end ; end ; r := GetDir ( tmp ) ;
53984: LD_ADDR_VAR 0 13
53988: PUSH
53989: LD_VAR 0 11
53993: PPUSH
53994: CALL_OW 254
53998: ST_TO_ADDR
// if r = 5 then
53999: LD_VAR 0 13
54003: PUSH
54004: LD_INT 5
54006: EQUAL
54007: IFFALSE 54017
// r := 0 ;
54009: LD_ADDR_VAR 0 13
54013: PUSH
54014: LD_INT 0
54016: ST_TO_ADDR
// for j = r to 5 do
54017: LD_ADDR_VAR 0 8
54021: PUSH
54022: DOUBLE
54023: LD_VAR 0 13
54027: DEC
54028: ST_TO_ADDR
54029: LD_INT 5
54031: PUSH
54032: FOR_TO
54033: IFFALSE 54147
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54035: LD_ADDR_VAR 0 9
54039: PUSH
54040: LD_VAR 0 11
54044: PPUSH
54045: CALL_OW 250
54049: PPUSH
54050: LD_VAR 0 8
54054: PPUSH
54055: LD_INT 2
54057: PPUSH
54058: CALL_OW 272
54062: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54063: LD_ADDR_VAR 0 10
54067: PUSH
54068: LD_VAR 0 11
54072: PPUSH
54073: CALL_OW 251
54077: PPUSH
54078: LD_VAR 0 8
54082: PPUSH
54083: LD_INT 2
54085: PPUSH
54086: CALL_OW 273
54090: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54091: LD_VAR 0 9
54095: PPUSH
54096: LD_VAR 0 10
54100: PPUSH
54101: CALL_OW 488
54105: PUSH
54106: LD_VAR 0 9
54110: PPUSH
54111: LD_VAR 0 10
54115: PPUSH
54116: CALL_OW 428
54120: NOT
54121: AND
54122: IFFALSE 54145
// begin ComMoveXY ( tmp , _x , _y ) ;
54124: LD_VAR 0 11
54128: PPUSH
54129: LD_VAR 0 9
54133: PPUSH
54134: LD_VAR 0 10
54138: PPUSH
54139: CALL_OW 111
// break ;
54143: GO 54147
// end ; end ;
54145: GO 54032
54147: POP
54148: POP
// end ;
54149: GO 53615
54151: POP
54152: POP
// end ;
54153: LD_VAR 0 6
54157: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
54158: LD_INT 0
54160: PPUSH
54161: PPUSH
54162: PPUSH
54163: PPUSH
54164: PPUSH
54165: PPUSH
54166: PPUSH
54167: PPUSH
54168: PPUSH
54169: PPUSH
// result := false ;
54170: LD_ADDR_VAR 0 6
54174: PUSH
54175: LD_INT 0
54177: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54178: LD_VAR 0 1
54182: NOT
54183: PUSH
54184: LD_VAR 0 1
54188: PPUSH
54189: CALL_OW 266
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: IN
54204: NOT
54205: OR
54206: PUSH
54207: LD_VAR 0 2
54211: NOT
54212: OR
54213: PUSH
54214: LD_VAR 0 5
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: LD_INT 3
54230: PUSH
54231: LD_INT 4
54233: PUSH
54234: LD_INT 5
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: IN
54245: NOT
54246: OR
54247: PUSH
54248: LD_VAR 0 3
54252: PPUSH
54253: LD_VAR 0 4
54257: PPUSH
54258: CALL_OW 488
54262: NOT
54263: OR
54264: IFFALSE 54268
// exit ;
54266: GO 54985
// pom := GetBase ( depot ) ;
54268: LD_ADDR_VAR 0 10
54272: PUSH
54273: LD_VAR 0 1
54277: PPUSH
54278: CALL_OW 274
54282: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54283: LD_ADDR_VAR 0 11
54287: PUSH
54288: LD_VAR 0 2
54292: PPUSH
54293: LD_VAR 0 1
54297: PPUSH
54298: CALL_OW 248
54302: PPUSH
54303: CALL_OW 450
54307: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54308: LD_VAR 0 10
54312: PPUSH
54313: LD_INT 1
54315: PPUSH
54316: CALL_OW 275
54320: PUSH
54321: LD_VAR 0 11
54325: PUSH
54326: LD_INT 1
54328: ARRAY
54329: GREATEREQUAL
54330: PUSH
54331: LD_VAR 0 10
54335: PPUSH
54336: LD_INT 2
54338: PPUSH
54339: CALL_OW 275
54343: PUSH
54344: LD_VAR 0 11
54348: PUSH
54349: LD_INT 2
54351: ARRAY
54352: GREATEREQUAL
54353: AND
54354: PUSH
54355: LD_VAR 0 10
54359: PPUSH
54360: LD_INT 3
54362: PPUSH
54363: CALL_OW 275
54367: PUSH
54368: LD_VAR 0 11
54372: PUSH
54373: LD_INT 3
54375: ARRAY
54376: GREATEREQUAL
54377: AND
54378: NOT
54379: IFFALSE 54383
// exit ;
54381: GO 54985
// if GetBType ( depot ) = b_depot then
54383: LD_VAR 0 1
54387: PPUSH
54388: CALL_OW 266
54392: PUSH
54393: LD_INT 0
54395: EQUAL
54396: IFFALSE 54408
// dist := 28 else
54398: LD_ADDR_VAR 0 14
54402: PUSH
54403: LD_INT 28
54405: ST_TO_ADDR
54406: GO 54416
// dist := 36 ;
54408: LD_ADDR_VAR 0 14
54412: PUSH
54413: LD_INT 36
54415: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54416: LD_VAR 0 1
54420: PPUSH
54421: LD_VAR 0 3
54425: PPUSH
54426: LD_VAR 0 4
54430: PPUSH
54431: CALL_OW 297
54435: PUSH
54436: LD_VAR 0 14
54440: GREATER
54441: IFFALSE 54445
// exit ;
54443: GO 54985
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54445: LD_ADDR_VAR 0 12
54449: PUSH
54450: LD_VAR 0 2
54454: PPUSH
54455: LD_VAR 0 3
54459: PPUSH
54460: LD_VAR 0 4
54464: PPUSH
54465: LD_VAR 0 5
54469: PPUSH
54470: LD_VAR 0 1
54474: PPUSH
54475: CALL_OW 248
54479: PPUSH
54480: LD_INT 0
54482: PPUSH
54483: CALL 54990 0 6
54487: ST_TO_ADDR
// if not hexes then
54488: LD_VAR 0 12
54492: NOT
54493: IFFALSE 54497
// exit ;
54495: GO 54985
// hex := GetHexInfo ( x , y ) ;
54497: LD_ADDR_VAR 0 15
54501: PUSH
54502: LD_VAR 0 3
54506: PPUSH
54507: LD_VAR 0 4
54511: PPUSH
54512: CALL_OW 546
54516: ST_TO_ADDR
// if hex [ 1 ] then
54517: LD_VAR 0 15
54521: PUSH
54522: LD_INT 1
54524: ARRAY
54525: IFFALSE 54529
// exit ;
54527: GO 54985
// height := hex [ 2 ] ;
54529: LD_ADDR_VAR 0 13
54533: PUSH
54534: LD_VAR 0 15
54538: PUSH
54539: LD_INT 2
54541: ARRAY
54542: ST_TO_ADDR
// for i = 1 to hexes do
54543: LD_ADDR_VAR 0 7
54547: PUSH
54548: DOUBLE
54549: LD_INT 1
54551: DEC
54552: ST_TO_ADDR
54553: LD_VAR 0 12
54557: PUSH
54558: FOR_TO
54559: IFFALSE 54889
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54561: LD_VAR 0 12
54565: PUSH
54566: LD_VAR 0 7
54570: ARRAY
54571: PUSH
54572: LD_INT 1
54574: ARRAY
54575: PPUSH
54576: LD_VAR 0 12
54580: PUSH
54581: LD_VAR 0 7
54585: ARRAY
54586: PUSH
54587: LD_INT 2
54589: ARRAY
54590: PPUSH
54591: CALL_OW 488
54595: NOT
54596: PUSH
54597: LD_VAR 0 12
54601: PUSH
54602: LD_VAR 0 7
54606: ARRAY
54607: PUSH
54608: LD_INT 1
54610: ARRAY
54611: PPUSH
54612: LD_VAR 0 12
54616: PUSH
54617: LD_VAR 0 7
54621: ARRAY
54622: PUSH
54623: LD_INT 2
54625: ARRAY
54626: PPUSH
54627: CALL_OW 428
54631: PUSH
54632: LD_INT 0
54634: GREATER
54635: OR
54636: PUSH
54637: LD_VAR 0 12
54641: PUSH
54642: LD_VAR 0 7
54646: ARRAY
54647: PUSH
54648: LD_INT 1
54650: ARRAY
54651: PPUSH
54652: LD_VAR 0 12
54656: PUSH
54657: LD_VAR 0 7
54661: ARRAY
54662: PUSH
54663: LD_INT 2
54665: ARRAY
54666: PPUSH
54667: CALL_OW 351
54671: OR
54672: IFFALSE 54678
// exit ;
54674: POP
54675: POP
54676: GO 54985
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54678: LD_ADDR_VAR 0 8
54682: PUSH
54683: LD_VAR 0 12
54687: PUSH
54688: LD_VAR 0 7
54692: ARRAY
54693: PUSH
54694: LD_INT 1
54696: ARRAY
54697: PPUSH
54698: LD_VAR 0 12
54702: PUSH
54703: LD_VAR 0 7
54707: ARRAY
54708: PUSH
54709: LD_INT 2
54711: ARRAY
54712: PPUSH
54713: CALL_OW 546
54717: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54718: LD_VAR 0 8
54722: PUSH
54723: LD_INT 1
54725: ARRAY
54726: PUSH
54727: LD_VAR 0 8
54731: PUSH
54732: LD_INT 2
54734: ARRAY
54735: PUSH
54736: LD_VAR 0 13
54740: PUSH
54741: LD_INT 2
54743: PLUS
54744: GREATER
54745: OR
54746: PUSH
54747: LD_VAR 0 8
54751: PUSH
54752: LD_INT 2
54754: ARRAY
54755: PUSH
54756: LD_VAR 0 13
54760: PUSH
54761: LD_INT 2
54763: MINUS
54764: LESS
54765: OR
54766: PUSH
54767: LD_VAR 0 8
54771: PUSH
54772: LD_INT 3
54774: ARRAY
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: LD_INT 8
54781: PUSH
54782: LD_INT 9
54784: PUSH
54785: LD_INT 10
54787: PUSH
54788: LD_INT 11
54790: PUSH
54791: LD_INT 12
54793: PUSH
54794: LD_INT 13
54796: PUSH
54797: LD_INT 16
54799: PUSH
54800: LD_INT 17
54802: PUSH
54803: LD_INT 18
54805: PUSH
54806: LD_INT 19
54808: PUSH
54809: LD_INT 20
54811: PUSH
54812: LD_INT 21
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: IN
54830: NOT
54831: OR
54832: PUSH
54833: LD_VAR 0 8
54837: PUSH
54838: LD_INT 5
54840: ARRAY
54841: NOT
54842: OR
54843: PUSH
54844: LD_VAR 0 8
54848: PUSH
54849: LD_INT 6
54851: ARRAY
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: LD_INT 7
54861: PUSH
54862: LD_INT 9
54864: PUSH
54865: LD_INT 10
54867: PUSH
54868: LD_INT 11
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: IN
54879: NOT
54880: OR
54881: IFFALSE 54887
// exit ;
54883: POP
54884: POP
54885: GO 54985
// end ;
54887: GO 54558
54889: POP
54890: POP
// side := GetSide ( depot ) ;
54891: LD_ADDR_VAR 0 9
54895: PUSH
54896: LD_VAR 0 1
54900: PPUSH
54901: CALL_OW 255
54905: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54906: LD_VAR 0 9
54910: PPUSH
54911: LD_VAR 0 3
54915: PPUSH
54916: LD_VAR 0 4
54920: PPUSH
54921: LD_INT 20
54923: PPUSH
54924: CALL 47639 0 4
54928: PUSH
54929: LD_INT 4
54931: ARRAY
54932: IFFALSE 54936
// exit ;
54934: GO 54985
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54936: LD_VAR 0 2
54940: PUSH
54941: LD_INT 29
54943: PUSH
54944: LD_INT 30
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: IN
54951: PUSH
54952: LD_VAR 0 3
54956: PPUSH
54957: LD_VAR 0 4
54961: PPUSH
54962: LD_VAR 0 9
54966: PPUSH
54967: CALL_OW 440
54971: NOT
54972: AND
54973: IFFALSE 54977
// exit ;
54975: GO 54985
// result := true ;
54977: LD_ADDR_VAR 0 6
54981: PUSH
54982: LD_INT 1
54984: ST_TO_ADDR
// end ;
54985: LD_VAR 0 6
54989: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54990: LD_INT 0
54992: PPUSH
54993: PPUSH
54994: PPUSH
54995: PPUSH
54996: PPUSH
54997: PPUSH
54998: PPUSH
54999: PPUSH
55000: PPUSH
55001: PPUSH
55002: PPUSH
55003: PPUSH
55004: PPUSH
55005: PPUSH
55006: PPUSH
55007: PPUSH
55008: PPUSH
55009: PPUSH
55010: PPUSH
55011: PPUSH
55012: PPUSH
55013: PPUSH
55014: PPUSH
55015: PPUSH
55016: PPUSH
55017: PPUSH
55018: PPUSH
55019: PPUSH
55020: PPUSH
55021: PPUSH
55022: PPUSH
55023: PPUSH
55024: PPUSH
55025: PPUSH
55026: PPUSH
55027: PPUSH
55028: PPUSH
55029: PPUSH
55030: PPUSH
55031: PPUSH
55032: PPUSH
55033: PPUSH
55034: PPUSH
55035: PPUSH
55036: PPUSH
55037: PPUSH
55038: PPUSH
55039: PPUSH
55040: PPUSH
55041: PPUSH
55042: PPUSH
55043: PPUSH
55044: PPUSH
55045: PPUSH
55046: PPUSH
55047: PPUSH
55048: PPUSH
55049: PPUSH
// result = [ ] ;
55050: LD_ADDR_VAR 0 7
55054: PUSH
55055: EMPTY
55056: ST_TO_ADDR
// temp_list = [ ] ;
55057: LD_ADDR_VAR 0 9
55061: PUSH
55062: EMPTY
55063: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55064: LD_VAR 0 4
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 2
55077: PUSH
55078: LD_INT 3
55080: PUSH
55081: LD_INT 4
55083: PUSH
55084: LD_INT 5
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: IN
55095: NOT
55096: PUSH
55097: LD_VAR 0 1
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: IN
55112: PUSH
55113: LD_VAR 0 5
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: LD_INT 3
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: LIST
55131: IN
55132: NOT
55133: AND
55134: OR
55135: IFFALSE 55139
// exit ;
55137: GO 73530
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55139: LD_VAR 0 1
55143: PUSH
55144: LD_INT 6
55146: PUSH
55147: LD_INT 7
55149: PUSH
55150: LD_INT 8
55152: PUSH
55153: LD_INT 13
55155: PUSH
55156: LD_INT 12
55158: PUSH
55159: LD_INT 15
55161: PUSH
55162: LD_INT 11
55164: PUSH
55165: LD_INT 14
55167: PUSH
55168: LD_INT 10
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: IN
55182: IFFALSE 55192
// btype = b_lab ;
55184: LD_ADDR_VAR 0 1
55188: PUSH
55189: LD_INT 6
55191: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55192: LD_VAR 0 6
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: LIST
55210: IN
55211: NOT
55212: PUSH
55213: LD_VAR 0 1
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: LD_INT 2
55226: PUSH
55227: LD_INT 3
55229: PUSH
55230: LD_INT 6
55232: PUSH
55233: LD_INT 36
55235: PUSH
55236: LD_INT 4
55238: PUSH
55239: LD_INT 5
55241: PUSH
55242: LD_INT 31
55244: PUSH
55245: LD_INT 32
55247: PUSH
55248: LD_INT 33
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: IN
55264: NOT
55265: PUSH
55266: LD_VAR 0 6
55270: PUSH
55271: LD_INT 1
55273: EQUAL
55274: AND
55275: OR
55276: PUSH
55277: LD_VAR 0 1
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: LD_INT 3
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: IN
55292: NOT
55293: PUSH
55294: LD_VAR 0 6
55298: PUSH
55299: LD_INT 2
55301: EQUAL
55302: AND
55303: OR
55304: IFFALSE 55314
// mode = 0 ;
55306: LD_ADDR_VAR 0 6
55310: PUSH
55311: LD_INT 0
55313: ST_TO_ADDR
// case mode of 0 :
55314: LD_VAR 0 6
55318: PUSH
55319: LD_INT 0
55321: DOUBLE
55322: EQUAL
55323: IFTRUE 55327
55325: GO 66780
55327: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55328: LD_ADDR_VAR 0 11
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: LD_INT 2
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: LD_INT 2
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: LD_INT 3
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: LD_INT 3
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55521: LD_ADDR_VAR 0 12
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 2
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 2
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: NEG
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 2
55655: NEG
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 3
55678: NEG
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 3
55689: NEG
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55717: LD_ADDR_VAR 0 13
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: NEG
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: LD_INT 2
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 2
55864: NEG
55865: PUSH
55866: LD_INT 3
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 3
55876: NEG
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 3
55888: NEG
55889: PUSH
55890: LD_INT 3
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55916: LD_ADDR_VAR 0 14
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: LD_INT 3
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 3
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56112: LD_ADDR_VAR 0 15
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 2
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 3
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 3
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56305: LD_ADDR_VAR 0 16
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: LD_INT 2
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 2
56428: NEG
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 3
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 3
56462: PUSH
56463: LD_INT 3
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: LD_INT 3
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56498: LD_ADDR_VAR 0 17
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: LD_INT 2
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: PUSH
56634: LD_INT 2
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 2
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 2
56697: NEG
56698: PUSH
56699: LD_INT 2
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56728: LD_ADDR_VAR 0 18
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 2
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: LD_INT 2
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 2
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 2
56904: NEG
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 2
56915: NEG
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: LD_INT 2
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56958: LD_ADDR_VAR 0 19
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 2
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 2
57083: PUSH
57084: LD_INT 1
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 2
57093: PUSH
57094: LD_INT 2
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: LD_INT 2
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: LD_INT 2
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 2
57157: NEG
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57188: LD_ADDR_VAR 0 20
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 1
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: LD_INT 1
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 2
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: LD_INT 2
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 2
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 2
57375: NEG
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57418: LD_ADDR_VAR 0 21
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: LD_INT 1
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: LD_INT 1
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: LD_INT 1
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: NEG
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: LD_INT 2
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 2
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 2
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 2
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: LD_INT 2
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: LD_INT 2
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 2
57594: NEG
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: LD_INT 1
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57648: LD_ADDR_VAR 0 22
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 1
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: LD_INT 2
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 2
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 2
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57878: LD_ADDR_VAR 0 23
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: LD_INT 1
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 2
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 2
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 2
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 2
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: LD_INT 2
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 2
58077: NEG
58078: PUSH
58079: LD_INT 2
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: LD_INT 3
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: LD_INT 3
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: PUSH
58125: LD_INT 1
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58158: LD_ADDR_VAR 0 24
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 2
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 2
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 2
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: LD_INT 2
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: LD_INT 2
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 3
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 3
58401: PUSH
58402: LD_INT 2
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58434: LD_ADDR_VAR 0 25
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: LD_INT 2
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 2
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 2
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 2
58569: PUSH
58570: LD_INT 2
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: LD_INT 2
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: LD_INT 2
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 3
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 3
58655: PUSH
58656: LD_INT 2
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: LD_INT 3
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: LD_INT 3
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58708: LD_ADDR_VAR 0 26
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: LD_INT 2
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: LD_INT 2
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: LD_INT 1
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 2
58843: PUSH
58844: LD_INT 2
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 1
58853: PUSH
58854: LD_INT 2
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: LD_INT 2
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 1
58873: NEG
58874: PUSH
58875: LD_INT 1
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 2
58884: NEG
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 2
58895: NEG
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 2
58907: NEG
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 2
58919: PUSH
58920: LD_INT 3
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: LD_INT 3
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: LD_INT 2
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 2
58950: NEG
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58984: LD_ADDR_VAR 0 27
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: LD_INT 2
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 2
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 2
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: LD_INT 2
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: LD_INT 2
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 2
59160: NEG
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: NEG
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: LD_INT 2
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 3
59217: NEG
59218: PUSH
59219: LD_INT 1
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 3
59229: NEG
59230: PUSH
59231: LD_INT 2
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59264: LD_ADDR_VAR 0 28
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: LD_INT 1
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: LD_INT 1
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 2
59440: NEG
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 2
59463: NEG
59464: PUSH
59465: LD_INT 2
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 2
59475: NEG
59476: PUSH
59477: LD_INT 3
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: LD_INT 3
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 3
59499: NEG
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 3
59511: NEG
59512: PUSH
59513: LD_INT 2
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59546: LD_ADDR_VAR 0 29
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: LD_INT 2
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 2
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 2
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 2
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: LD_INT 2
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: LD_INT 1
59716: NEG
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: LD_INT 3
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 2
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 3
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: LD_INT 3
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 3
59790: NEG
59791: PUSH
59792: LD_INT 2
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59825: LD_ADDR_VAR 0 30
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: LD_INT 2
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: LD_INT 2
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 2
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 2
59960: PUSH
59961: LD_INT 2
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: LD_INT 2
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 2
59991: NEG
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 2
60002: NEG
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: NEG
60015: PUSH
60016: LD_INT 3
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 3
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: NEG
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 3
60068: NEG
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60103: LD_ADDR_VAR 0 31
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: NEG
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 1
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 2
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 2
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: LD_INT 2
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: LD_INT 2
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: LD_INT 2
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: LD_INT 1
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 2
60268: NEG
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: LD_INT 2
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: LD_INT 3
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 3
60315: PUSH
60316: LD_INT 1
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: LD_INT 3
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: LD_INT 2
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 3
60346: NEG
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60381: LD_ADDR_VAR 0 32
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: LD_INT 2
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 1
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 2
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: LD_INT 2
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: PUSH
60517: LD_INT 2
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: LD_INT 2
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: NEG
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: LD_INT 3
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: LD_INT 2
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 3
60593: PUSH
60594: LD_INT 2
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 2
60603: PUSH
60604: LD_INT 3
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 2
60613: NEG
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 3
60624: NEG
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60659: LD_ADDR_VAR 0 33
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: LD_INT 2
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 1
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 2
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 2
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: LD_INT 2
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: LD_INT 2
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 2
60814: NEG
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 2
60825: NEG
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 2
60837: NEG
60838: PUSH
60839: LD_INT 2
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 2
60849: NEG
60850: PUSH
60851: LD_INT 3
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 2
60861: PUSH
60862: LD_INT 1
60864: NEG
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 3
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 1
60882: PUSH
60883: LD_INT 3
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 1
60892: NEG
60893: PUSH
60894: LD_INT 2
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60938: LD_ADDR_VAR 0 34
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: LD_INT 0
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 1
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 1
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: NEG
61008: PUSH
61009: LD_INT 1
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 1
61019: NEG
61020: PUSH
61021: LD_INT 2
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: LD_INT 2
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: LD_INT 1
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 2
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 2
61063: PUSH
61064: LD_INT 2
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: LD_INT 2
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 1
61083: NEG
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 2
61105: NEG
61106: PUSH
61107: LD_INT 1
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: LD_INT 2
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: LD_INT 3
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: LD_INT 2
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 3
61152: PUSH
61153: LD_INT 2
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 2
61162: PUSH
61163: LD_INT 3
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 3
61183: NEG
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61218: LD_ADDR_VAR 0 35
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 0
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 1
61256: PUSH
61257: LD_INT 1
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 1
61276: NEG
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 1
61287: NEG
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 2
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: LD_INT 1
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61330: LD_ADDR_VAR 0 36
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: LD_INT 1
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: LD_INT 2
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: LD_INT 2
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61442: LD_ADDR_VAR 0 37
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 0
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 1
61480: PUSH
61481: LD_INT 1
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: LD_INT 1
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: LD_INT 0
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61554: LD_ADDR_VAR 0 38
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: LD_INT 1
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 2
61635: PUSH
61636: LD_INT 1
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 2
61645: NEG
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61666: LD_ADDR_VAR 0 39
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: LD_INT 1
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: LD_INT 0
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 1
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 1
61724: NEG
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: LD_INT 2
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: LD_INT 2
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61778: LD_ADDR_VAR 0 40
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: LD_INT 1
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: LD_INT 1
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: LD_INT 1
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: LD_INT 1
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61890: LD_ADDR_VAR 0 41
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 1
61928: PUSH
61929: LD_INT 1
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: LD_INT 1
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 1
61948: NEG
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: LD_INT 1
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 1
61971: NEG
61972: PUSH
61973: LD_INT 2
61975: NEG
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 1
61983: PUSH
61984: LD_INT 1
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 2
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 2
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 2
62014: PUSH
62015: LD_INT 2
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 1
62024: PUSH
62025: LD_INT 2
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 1
62034: NEG
62035: PUSH
62036: LD_INT 1
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 2
62045: NEG
62046: PUSH
62047: LD_INT 0
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 2
62056: NEG
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 2
62068: NEG
62069: PUSH
62070: LD_INT 2
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 2
62080: NEG
62081: PUSH
62082: LD_INT 3
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 2
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 3
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 3
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 3
62123: PUSH
62124: LD_INT 2
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 3
62133: PUSH
62134: LD_INT 3
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 2
62143: PUSH
62144: LD_INT 3
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 2
62153: NEG
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 3
62164: NEG
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 3
62175: NEG
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 3
62187: NEG
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 3
62199: NEG
62200: PUSH
62201: LD_INT 3
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62240: LD_ADDR_VAR 0 42
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: LD_INT 1
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 1
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: LD_INT 1
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 0
62288: PUSH
62289: LD_INT 1
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: NEG
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: LD_INT 2
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: LD_INT 2
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 1
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 2
62355: PUSH
62356: LD_INT 1
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 2
62365: PUSH
62366: LD_INT 2
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 1
62375: PUSH
62376: LD_INT 2
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: LD_INT 2
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 2
62406: NEG
62407: PUSH
62408: LD_INT 1
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 2
62418: NEG
62419: PUSH
62420: LD_INT 2
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 2
62430: NEG
62431: PUSH
62432: LD_INT 3
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: LD_INT 3
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: LD_INT 3
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: LD_INT 2
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 3
62476: PUSH
62477: LD_INT 2
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 3
62486: PUSH
62487: LD_INT 3
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 2
62496: PUSH
62497: LD_INT 3
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: LD_INT 3
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: LD_INT 3
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: LD_INT 2
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 3
62537: NEG
62538: PUSH
62539: LD_INT 2
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 3
62549: NEG
62550: PUSH
62551: LD_INT 3
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62590: LD_ADDR_VAR 0 43
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: LD_INT 1
62610: NEG
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 1
62618: PUSH
62619: LD_INT 0
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: LD_INT 1
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 0
62638: PUSH
62639: LD_INT 1
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 1
62648: NEG
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: LD_INT 1
62663: NEG
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 1
62671: NEG
62672: PUSH
62673: LD_INT 2
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: LD_INT 2
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: LD_INT 1
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 2
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: LD_INT 2
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: LD_INT 2
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: NEG
62746: PUSH
62747: LD_INT 1
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 2
62756: NEG
62757: PUSH
62758: LD_INT 0
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 2
62767: NEG
62768: PUSH
62769: LD_INT 1
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 1
62779: NEG
62780: PUSH
62781: LD_INT 3
62783: NEG
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: LD_INT 3
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 1
62802: PUSH
62803: LD_INT 2
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 2
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 3
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 3
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: LD_INT 3
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: LD_INT 3
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: LD_INT 2
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 2
62875: NEG
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 3
62886: NEG
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 3
62897: NEG
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62938: LD_ADDR_VAR 0 44
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: LD_INT 1
62958: NEG
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 1
62976: PUSH
62977: LD_INT 1
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 1
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 1
62996: NEG
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 1
63007: NEG
63008: PUSH
63009: LD_INT 1
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: LD_INT 2
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: PUSH
63032: LD_INT 1
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 2
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 2
63052: PUSH
63053: LD_INT 1
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 2
63062: PUSH
63063: LD_INT 2
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 2
63093: NEG
63094: PUSH
63095: LD_INT 0
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 2
63104: NEG
63105: PUSH
63106: LD_INT 1
63108: NEG
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 2
63116: NEG
63117: PUSH
63118: LD_INT 2
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 2
63128: NEG
63129: PUSH
63130: LD_INT 3
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 2
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 3
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 3
63161: PUSH
63162: LD_INT 1
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 3
63171: PUSH
63172: LD_INT 2
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 3
63181: PUSH
63182: LD_INT 3
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 2
63191: PUSH
63192: LD_INT 3
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 2
63201: NEG
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 3
63212: NEG
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 3
63223: NEG
63224: PUSH
63225: LD_INT 1
63227: NEG
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 3
63235: NEG
63236: PUSH
63237: LD_INT 2
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 3
63247: NEG
63248: PUSH
63249: LD_INT 3
63251: NEG
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63288: LD_ADDR_VAR 0 45
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: LD_INT 1
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 1
63316: PUSH
63317: LD_INT 0
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: LD_INT 1
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: NEG
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: LD_INT 1
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: LD_INT 2
63373: NEG
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: LD_INT 2
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 1
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 2
63403: PUSH
63404: LD_INT 1
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 2
63413: PUSH
63414: LD_INT 2
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 1
63423: PUSH
63424: LD_INT 2
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 1
63443: NEG
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 2
63454: NEG
63455: PUSH
63456: LD_INT 1
63458: NEG
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 2
63466: NEG
63467: PUSH
63468: LD_INT 2
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 2
63478: NEG
63479: PUSH
63480: LD_INT 3
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: LD_INT 3
63494: NEG
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: LD_INT 3
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: PUSH
63514: LD_INT 2
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 3
63524: PUSH
63525: LD_INT 2
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 3
63534: PUSH
63535: LD_INT 3
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 2
63544: PUSH
63545: LD_INT 3
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: LD_INT 3
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: LD_INT 3
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 1
63574: NEG
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 3
63585: NEG
63586: PUSH
63587: LD_INT 2
63589: NEG
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 3
63597: NEG
63598: PUSH
63599: LD_INT 3
63601: NEG
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63638: LD_ADDR_VAR 0 46
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: LD_INT 1
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: LD_INT 0
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: LD_INT 1
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: LD_INT 1
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 1
63696: NEG
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: LD_INT 1
63711: NEG
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 1
63719: NEG
63720: PUSH
63721: LD_INT 2
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: LD_INT 2
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 2
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: LD_INT 2
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: LD_INT 2
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 2
63804: NEG
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 2
63815: NEG
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 1
63827: NEG
63828: PUSH
63829: LD_INT 3
63831: NEG
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: LD_INT 3
63842: NEG
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 1
63850: PUSH
63851: LD_INT 2
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 2
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 3
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 3
63882: PUSH
63883: LD_INT 1
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: LD_INT 3
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: LD_INT 3
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: LD_INT 2
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 2
63923: NEG
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 3
63934: NEG
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 3
63945: NEG
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63986: LD_ADDR_VAR 0 47
63990: PUSH
63991: LD_INT 0
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 0
64003: PUSH
64004: LD_INT 1
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 1
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: LD_INT 1
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: NEG
64056: PUSH
64057: LD_INT 1
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 1
64067: NEG
64068: PUSH
64069: LD_INT 2
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: LD_INT 2
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 1
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 2
64101: NEG
64102: PUSH
64103: LD_INT 1
64105: NEG
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 2
64113: NEG
64114: PUSH
64115: LD_INT 2
64117: NEG
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64137: LD_ADDR_VAR 0 48
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: LD_INT 0
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 0
64154: PUSH
64155: LD_INT 1
64157: NEG
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 1
64175: PUSH
64176: LD_INT 1
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: LD_INT 1
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: LD_INT 1
64210: NEG
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 1
64218: NEG
64219: PUSH
64220: LD_INT 2
64222: NEG
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: LD_INT 2
64233: NEG
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 1
64241: PUSH
64242: LD_INT 1
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 2
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 2
64262: PUSH
64263: LD_INT 1
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64284: LD_ADDR_VAR 0 49
64288: PUSH
64289: LD_INT 0
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: LD_INT 1
64304: NEG
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 1
64312: PUSH
64313: LD_INT 0
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 1
64322: PUSH
64323: LD_INT 1
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: LD_INT 1
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 1
64342: NEG
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 1
64353: NEG
64354: PUSH
64355: LD_INT 1
64357: NEG
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: LD_INT 1
64368: NEG
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 2
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 2
64386: PUSH
64387: LD_INT 1
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 2
64396: PUSH
64397: LD_INT 2
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 1
64406: PUSH
64407: LD_INT 2
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64428: LD_ADDR_VAR 0 50
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: LD_INT 0
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: LD_INT 1
64448: NEG
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: LD_INT 0
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 1
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 0
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 1
64486: NEG
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 1
64497: NEG
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 2
64509: PUSH
64510: LD_INT 1
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 2
64519: PUSH
64520: LD_INT 2
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 1
64529: PUSH
64530: LD_INT 2
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: LD_INT 2
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 1
64549: NEG
64550: PUSH
64551: LD_INT 1
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64572: LD_ADDR_VAR 0 51
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: LD_INT 1
64592: NEG
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 1
64610: PUSH
64611: LD_INT 1
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: LD_INT 1
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 1
64630: NEG
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 1
64641: NEG
64642: PUSH
64643: LD_INT 1
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 1
64653: PUSH
64654: LD_INT 2
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 0
64663: PUSH
64664: LD_INT 2
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 1
64673: NEG
64674: PUSH
64675: LD_INT 1
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 2
64684: NEG
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 2
64695: NEG
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64719: LD_ADDR_VAR 0 52
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 0
64736: PUSH
64737: LD_INT 1
64739: NEG
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 1
64747: PUSH
64748: LD_INT 0
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 1
64757: PUSH
64758: LD_INT 1
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: LD_INT 1
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 1
64777: NEG
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: LD_INT 1
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 1
64800: NEG
64801: PUSH
64802: LD_INT 2
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: NEG
64813: PUSH
64814: LD_INT 1
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 2
64823: NEG
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 2
64834: NEG
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 2
64846: NEG
64847: PUSH
64848: LD_INT 2
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64870: LD_ADDR_VAR 0 53
64874: PUSH
64875: LD_INT 0
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: LD_INT 1
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 1
64908: PUSH
64909: LD_INT 1
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: LD_INT 1
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 1
64928: NEG
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: LD_INT 1
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 1
64951: NEG
64952: PUSH
64953: LD_INT 2
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: LD_INT 2
64966: NEG
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: LD_INT 1
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 2
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 2
64995: PUSH
64996: LD_INT 1
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 2
65005: PUSH
65006: LD_INT 2
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 1
65015: PUSH
65016: LD_INT 2
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 0
65025: PUSH
65026: LD_INT 2
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 1
65035: NEG
65036: PUSH
65037: LD_INT 1
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 2
65046: NEG
65047: PUSH
65048: LD_INT 0
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 2
65057: NEG
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 2
65069: NEG
65070: PUSH
65071: LD_INT 2
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65100: LD_ADDR_VAR 0 54
65104: PUSH
65105: LD_INT 0
65107: PUSH
65108: LD_INT 0
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: LD_INT 1
65120: NEG
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 1
65128: PUSH
65129: LD_INT 0
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 1
65138: PUSH
65139: LD_INT 1
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 0
65148: PUSH
65149: LD_INT 1
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 1
65158: NEG
65159: PUSH
65160: LD_INT 0
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: LD_INT 1
65173: NEG
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 1
65181: NEG
65182: PUSH
65183: LD_INT 2
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 0
65193: PUSH
65194: LD_INT 2
65196: NEG
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 1
65204: PUSH
65205: LD_INT 1
65207: NEG
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 2
65215: PUSH
65216: LD_INT 0
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 2
65225: PUSH
65226: LD_INT 1
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 2
65235: PUSH
65236: LD_INT 2
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 1
65245: PUSH
65246: LD_INT 2
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 0
65255: PUSH
65256: LD_INT 2
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 1
65265: NEG
65266: PUSH
65267: LD_INT 1
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 2
65276: NEG
65277: PUSH
65278: LD_INT 0
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 2
65287: NEG
65288: PUSH
65289: LD_INT 1
65291: NEG
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 2
65299: NEG
65300: PUSH
65301: LD_INT 2
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65330: LD_ADDR_VAR 0 55
65334: PUSH
65335: LD_INT 0
65337: PUSH
65338: LD_INT 0
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 0
65347: PUSH
65348: LD_INT 1
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 1
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 1
65368: PUSH
65369: LD_INT 1
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 0
65378: PUSH
65379: LD_INT 1
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 1
65388: NEG
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: LD_INT 1
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 1
65411: NEG
65412: PUSH
65413: LD_INT 2
65415: NEG
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 0
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: LD_INT 1
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 2
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 2
65455: PUSH
65456: LD_INT 1
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 2
65465: PUSH
65466: LD_INT 2
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 1
65475: PUSH
65476: LD_INT 2
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: LD_INT 2
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: LD_INT 1
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 2
65506: NEG
65507: PUSH
65508: LD_INT 0
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 2
65517: NEG
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 2
65529: NEG
65530: PUSH
65531: LD_INT 2
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65560: LD_ADDR_VAR 0 56
65564: PUSH
65565: LD_INT 0
65567: PUSH
65568: LD_INT 0
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 0
65577: PUSH
65578: LD_INT 1
65580: NEG
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 1
65588: PUSH
65589: LD_INT 0
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 1
65598: PUSH
65599: LD_INT 1
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: LD_INT 1
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 1
65618: NEG
65619: PUSH
65620: LD_INT 0
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 1
65629: NEG
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 1
65641: NEG
65642: PUSH
65643: LD_INT 2
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: LD_INT 2
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: LD_INT 1
65667: NEG
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 2
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 2
65685: PUSH
65686: LD_INT 1
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 2
65695: PUSH
65696: LD_INT 2
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: LD_INT 2
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 0
65715: PUSH
65716: LD_INT 2
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 1
65725: NEG
65726: PUSH
65727: LD_INT 1
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 2
65736: NEG
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 2
65747: NEG
65748: PUSH
65749: LD_INT 1
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 2
65759: NEG
65760: PUSH
65761: LD_INT 2
65763: NEG
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65790: LD_ADDR_VAR 0 57
65794: PUSH
65795: LD_INT 0
65797: PUSH
65798: LD_INT 0
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 0
65807: PUSH
65808: LD_INT 1
65810: NEG
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 1
65818: PUSH
65819: LD_INT 0
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 1
65828: PUSH
65829: LD_INT 1
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 0
65838: PUSH
65839: LD_INT 1
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 1
65848: NEG
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 1
65859: NEG
65860: PUSH
65861: LD_INT 1
65863: NEG
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 1
65871: NEG
65872: PUSH
65873: LD_INT 2
65875: NEG
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 0
65883: PUSH
65884: LD_INT 2
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 1
65894: PUSH
65895: LD_INT 1
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 2
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 2
65915: PUSH
65916: LD_INT 1
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 2
65925: PUSH
65926: LD_INT 2
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 1
65935: PUSH
65936: LD_INT 2
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: LD_INT 2
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 1
65955: NEG
65956: PUSH
65957: LD_INT 1
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 2
65966: NEG
65967: PUSH
65968: LD_INT 0
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 2
65977: NEG
65978: PUSH
65979: LD_INT 1
65981: NEG
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 2
65989: NEG
65990: PUSH
65991: LD_INT 2
65993: NEG
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66020: LD_ADDR_VAR 0 58
66024: PUSH
66025: LD_INT 0
66027: PUSH
66028: LD_INT 0
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: LD_INT 1
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 1
66048: PUSH
66049: LD_INT 0
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 1
66058: PUSH
66059: LD_INT 1
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 0
66068: PUSH
66069: LD_INT 1
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 1
66078: NEG
66079: PUSH
66080: LD_INT 0
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 1
66089: NEG
66090: PUSH
66091: LD_INT 1
66093: NEG
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 1
66101: NEG
66102: PUSH
66103: LD_INT 2
66105: NEG
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 0
66113: PUSH
66114: LD_INT 2
66116: NEG
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 1
66124: PUSH
66125: LD_INT 1
66127: NEG
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 2
66135: PUSH
66136: LD_INT 0
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 2
66145: PUSH
66146: LD_INT 1
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 2
66155: PUSH
66156: LD_INT 2
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 1
66165: PUSH
66166: LD_INT 2
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: LD_INT 2
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: LD_INT 1
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 2
66196: NEG
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 2
66207: NEG
66208: PUSH
66209: LD_INT 1
66211: NEG
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 2
66219: NEG
66220: PUSH
66221: LD_INT 2
66223: NEG
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66250: LD_ADDR_VAR 0 59
66254: PUSH
66255: LD_INT 0
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 0
66267: PUSH
66268: LD_INT 1
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 1
66278: PUSH
66279: LD_INT 0
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 1
66288: PUSH
66289: LD_INT 1
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 0
66298: PUSH
66299: LD_INT 1
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 1
66308: NEG
66309: PUSH
66310: LD_INT 0
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 1
66319: NEG
66320: PUSH
66321: LD_INT 1
66323: NEG
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66338: LD_ADDR_VAR 0 60
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 1
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 1
66376: PUSH
66377: LD_INT 1
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: LD_INT 1
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 1
66396: NEG
66397: PUSH
66398: LD_INT 0
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 1
66407: NEG
66408: PUSH
66409: LD_INT 1
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66426: LD_ADDR_VAR 0 61
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: LD_INT 0
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 0
66443: PUSH
66444: LD_INT 1
66446: NEG
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 1
66454: PUSH
66455: LD_INT 0
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 1
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 0
66474: PUSH
66475: LD_INT 1
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 1
66484: NEG
66485: PUSH
66486: LD_INT 0
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 1
66495: NEG
66496: PUSH
66497: LD_INT 1
66499: NEG
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66514: LD_ADDR_VAR 0 62
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: LD_INT 0
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 0
66531: PUSH
66532: LD_INT 1
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 1
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 1
66552: PUSH
66553: LD_INT 1
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 0
66562: PUSH
66563: LD_INT 1
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 1
66572: NEG
66573: PUSH
66574: LD_INT 0
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 1
66583: NEG
66584: PUSH
66585: LD_INT 1
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66602: LD_ADDR_VAR 0 63
66606: PUSH
66607: LD_INT 0
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: LD_INT 1
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 1
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 1
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: LD_INT 1
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 1
66660: NEG
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 1
66671: NEG
66672: PUSH
66673: LD_INT 1
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66690: LD_ADDR_VAR 0 64
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 0
66707: PUSH
66708: LD_INT 1
66710: NEG
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 1
66718: PUSH
66719: LD_INT 0
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 1
66728: PUSH
66729: LD_INT 1
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: LD_INT 1
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 1
66748: NEG
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 1
66759: NEG
66760: PUSH
66761: LD_INT 1
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: ST_TO_ADDR
// end ; 1 :
66778: GO 72675
66780: LD_INT 1
66782: DOUBLE
66783: EQUAL
66784: IFTRUE 66788
66786: GO 69411
66788: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66789: LD_ADDR_VAR 0 11
66793: PUSH
66794: LD_INT 1
66796: NEG
66797: PUSH
66798: LD_INT 3
66800: NEG
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: LD_INT 3
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 1
66819: PUSH
66820: LD_INT 2
66822: NEG
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: LIST
66832: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66833: LD_ADDR_VAR 0 12
66837: PUSH
66838: LD_INT 2
66840: PUSH
66841: LD_INT 1
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 3
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 3
66861: PUSH
66862: LD_INT 1
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: LIST
66873: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66874: LD_ADDR_VAR 0 13
66878: PUSH
66879: LD_INT 3
66881: PUSH
66882: LD_INT 2
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 3
66891: PUSH
66892: LD_INT 3
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 2
66901: PUSH
66902: LD_INT 3
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: LIST
66913: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66914: LD_ADDR_VAR 0 14
66918: PUSH
66919: LD_INT 1
66921: PUSH
66922: LD_INT 3
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 0
66931: PUSH
66932: LD_INT 3
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 1
66941: NEG
66942: PUSH
66943: LD_INT 2
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: LIST
66954: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66955: LD_ADDR_VAR 0 15
66959: PUSH
66960: LD_INT 2
66962: NEG
66963: PUSH
66964: LD_INT 1
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 3
66973: NEG
66974: PUSH
66975: LD_INT 0
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 3
66984: NEG
66985: PUSH
66986: LD_INT 1
66988: NEG
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: LIST
66998: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66999: LD_ADDR_VAR 0 16
67003: PUSH
67004: LD_INT 2
67006: NEG
67007: PUSH
67008: LD_INT 3
67010: NEG
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 3
67018: NEG
67019: PUSH
67020: LD_INT 2
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 3
67030: NEG
67031: PUSH
67032: LD_INT 3
67034: NEG
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: LIST
67044: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67045: LD_ADDR_VAR 0 17
67049: PUSH
67050: LD_INT 1
67052: NEG
67053: PUSH
67054: LD_INT 3
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: LD_INT 3
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: PUSH
67076: LD_INT 2
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: LIST
67088: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67089: LD_ADDR_VAR 0 18
67093: PUSH
67094: LD_INT 2
67096: PUSH
67097: LD_INT 1
67099: NEG
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 3
67107: PUSH
67108: LD_INT 0
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 3
67117: PUSH
67118: LD_INT 1
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: LIST
67129: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67130: LD_ADDR_VAR 0 19
67134: PUSH
67135: LD_INT 3
67137: PUSH
67138: LD_INT 2
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 3
67147: PUSH
67148: LD_INT 3
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 2
67157: PUSH
67158: LD_INT 3
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: LIST
67169: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67170: LD_ADDR_VAR 0 20
67174: PUSH
67175: LD_INT 1
67177: PUSH
67178: LD_INT 3
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 0
67187: PUSH
67188: LD_INT 3
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 1
67197: NEG
67198: PUSH
67199: LD_INT 2
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: LIST
67210: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67211: LD_ADDR_VAR 0 21
67215: PUSH
67216: LD_INT 2
67218: NEG
67219: PUSH
67220: LD_INT 1
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 3
67229: NEG
67230: PUSH
67231: LD_INT 0
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 3
67240: NEG
67241: PUSH
67242: LD_INT 1
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: LIST
67254: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67255: LD_ADDR_VAR 0 22
67259: PUSH
67260: LD_INT 2
67262: NEG
67263: PUSH
67264: LD_INT 3
67266: NEG
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 3
67274: NEG
67275: PUSH
67276: LD_INT 2
67278: NEG
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 3
67286: NEG
67287: PUSH
67288: LD_INT 3
67290: NEG
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: LIST
67300: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67301: LD_ADDR_VAR 0 23
67305: PUSH
67306: LD_INT 0
67308: PUSH
67309: LD_INT 3
67311: NEG
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 1
67319: NEG
67320: PUSH
67321: LD_INT 4
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 1
67331: PUSH
67332: LD_INT 3
67334: NEG
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: LIST
67344: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67345: LD_ADDR_VAR 0 24
67349: PUSH
67350: LD_INT 3
67352: PUSH
67353: LD_INT 0
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 3
67362: PUSH
67363: LD_INT 1
67365: NEG
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 4
67373: PUSH
67374: LD_INT 1
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: LIST
67385: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67386: LD_ADDR_VAR 0 25
67390: PUSH
67391: LD_INT 3
67393: PUSH
67394: LD_INT 3
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 4
67403: PUSH
67404: LD_INT 3
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 3
67413: PUSH
67414: LD_INT 4
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: LIST
67425: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67426: LD_ADDR_VAR 0 26
67430: PUSH
67431: LD_INT 0
67433: PUSH
67434: LD_INT 3
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 1
67443: PUSH
67444: LD_INT 4
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 1
67453: NEG
67454: PUSH
67455: LD_INT 3
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: LIST
67466: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67467: LD_ADDR_VAR 0 27
67471: PUSH
67472: LD_INT 3
67474: NEG
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 3
67485: NEG
67486: PUSH
67487: LD_INT 1
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 4
67496: NEG
67497: PUSH
67498: LD_INT 1
67500: NEG
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: LIST
67510: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67511: LD_ADDR_VAR 0 28
67515: PUSH
67516: LD_INT 3
67518: NEG
67519: PUSH
67520: LD_INT 3
67522: NEG
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 3
67530: NEG
67531: PUSH
67532: LD_INT 4
67534: NEG
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 4
67542: NEG
67543: PUSH
67544: LD_INT 3
67546: NEG
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: LIST
67556: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67557: LD_ADDR_VAR 0 29
67561: PUSH
67562: LD_INT 1
67564: NEG
67565: PUSH
67566: LD_INT 3
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 0
67576: PUSH
67577: LD_INT 3
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 1
67587: PUSH
67588: LD_INT 2
67590: NEG
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 1
67598: NEG
67599: PUSH
67600: LD_INT 4
67602: NEG
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 0
67610: PUSH
67611: LD_INT 4
67613: NEG
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 1
67621: PUSH
67622: LD_INT 3
67624: NEG
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 1
67632: NEG
67633: PUSH
67634: LD_INT 5
67636: NEG
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 0
67644: PUSH
67645: LD_INT 5
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 1
67655: PUSH
67656: LD_INT 4
67658: NEG
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 1
67666: NEG
67667: PUSH
67668: LD_INT 6
67670: NEG
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 0
67678: PUSH
67679: LD_INT 6
67681: NEG
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 1
67689: PUSH
67690: LD_INT 5
67692: NEG
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67712: LD_ADDR_VAR 0 30
67716: PUSH
67717: LD_INT 2
67719: PUSH
67720: LD_INT 1
67722: NEG
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 3
67730: PUSH
67731: LD_INT 0
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 3
67740: PUSH
67741: LD_INT 1
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 3
67750: PUSH
67751: LD_INT 1
67753: NEG
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 4
67761: PUSH
67762: LD_INT 0
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 4
67771: PUSH
67772: LD_INT 1
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 4
67781: PUSH
67782: LD_INT 1
67784: NEG
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 5
67792: PUSH
67793: LD_INT 0
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 5
67802: PUSH
67803: LD_INT 1
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 5
67812: PUSH
67813: LD_INT 1
67815: NEG
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 6
67823: PUSH
67824: LD_INT 0
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 6
67833: PUSH
67834: LD_INT 1
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67855: LD_ADDR_VAR 0 31
67859: PUSH
67860: LD_INT 3
67862: PUSH
67863: LD_INT 2
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 3
67872: PUSH
67873: LD_INT 3
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 2
67882: PUSH
67883: LD_INT 3
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 4
67892: PUSH
67893: LD_INT 3
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 4
67902: PUSH
67903: LD_INT 4
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 3
67912: PUSH
67913: LD_INT 4
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 5
67922: PUSH
67923: LD_INT 4
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 5
67932: PUSH
67933: LD_INT 5
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 4
67942: PUSH
67943: LD_INT 5
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 6
67952: PUSH
67953: LD_INT 5
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 6
67962: PUSH
67963: LD_INT 6
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 5
67972: PUSH
67973: LD_INT 6
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67994: LD_ADDR_VAR 0 32
67998: PUSH
67999: LD_INT 1
68001: PUSH
68002: LD_INT 3
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 0
68011: PUSH
68012: LD_INT 3
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 1
68021: NEG
68022: PUSH
68023: LD_INT 2
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 1
68032: PUSH
68033: LD_INT 4
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 0
68042: PUSH
68043: LD_INT 4
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 1
68052: NEG
68053: PUSH
68054: LD_INT 3
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 1
68063: PUSH
68064: LD_INT 5
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: LD_INT 5
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 1
68083: NEG
68084: PUSH
68085: LD_INT 4
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 1
68094: PUSH
68095: LD_INT 6
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: LD_INT 6
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 1
68114: NEG
68115: PUSH
68116: LD_INT 5
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68137: LD_ADDR_VAR 0 33
68141: PUSH
68142: LD_INT 2
68144: NEG
68145: PUSH
68146: LD_INT 1
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 3
68155: NEG
68156: PUSH
68157: LD_INT 0
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 3
68166: NEG
68167: PUSH
68168: LD_INT 1
68170: NEG
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 3
68178: NEG
68179: PUSH
68180: LD_INT 1
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 4
68189: NEG
68190: PUSH
68191: LD_INT 0
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 4
68200: NEG
68201: PUSH
68202: LD_INT 1
68204: NEG
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 4
68212: NEG
68213: PUSH
68214: LD_INT 1
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 5
68223: NEG
68224: PUSH
68225: LD_INT 0
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 5
68234: NEG
68235: PUSH
68236: LD_INT 1
68238: NEG
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 5
68246: NEG
68247: PUSH
68248: LD_INT 1
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 6
68257: NEG
68258: PUSH
68259: LD_INT 0
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 6
68268: NEG
68269: PUSH
68270: LD_INT 1
68272: NEG
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68292: LD_ADDR_VAR 0 34
68296: PUSH
68297: LD_INT 2
68299: NEG
68300: PUSH
68301: LD_INT 3
68303: NEG
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 3
68311: NEG
68312: PUSH
68313: LD_INT 2
68315: NEG
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 3
68323: NEG
68324: PUSH
68325: LD_INT 3
68327: NEG
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 3
68335: NEG
68336: PUSH
68337: LD_INT 4
68339: NEG
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 4
68347: NEG
68348: PUSH
68349: LD_INT 3
68351: NEG
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 4
68359: NEG
68360: PUSH
68361: LD_INT 4
68363: NEG
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: LD_INT 4
68371: NEG
68372: PUSH
68373: LD_INT 5
68375: NEG
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 5
68383: NEG
68384: PUSH
68385: LD_INT 4
68387: NEG
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 5
68395: NEG
68396: PUSH
68397: LD_INT 5
68399: NEG
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 5
68407: NEG
68408: PUSH
68409: LD_INT 6
68411: NEG
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 6
68419: NEG
68420: PUSH
68421: LD_INT 5
68423: NEG
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 6
68431: NEG
68432: PUSH
68433: LD_INT 6
68435: NEG
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68455: LD_ADDR_VAR 0 41
68459: PUSH
68460: LD_INT 0
68462: PUSH
68463: LD_INT 2
68465: NEG
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 1
68473: NEG
68474: PUSH
68475: LD_INT 3
68477: NEG
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 1
68485: PUSH
68486: LD_INT 2
68488: NEG
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: LIST
68498: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68499: LD_ADDR_VAR 0 42
68503: PUSH
68504: LD_INT 2
68506: PUSH
68507: LD_INT 0
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 2
68516: PUSH
68517: LD_INT 1
68519: NEG
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 3
68527: PUSH
68528: LD_INT 1
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: LIST
68539: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68540: LD_ADDR_VAR 0 43
68544: PUSH
68545: LD_INT 2
68547: PUSH
68548: LD_INT 2
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 3
68557: PUSH
68558: LD_INT 2
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 2
68567: PUSH
68568: LD_INT 3
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: LIST
68579: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68580: LD_ADDR_VAR 0 44
68584: PUSH
68585: LD_INT 0
68587: PUSH
68588: LD_INT 2
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 1
68597: PUSH
68598: LD_INT 3
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 1
68607: NEG
68608: PUSH
68609: LD_INT 2
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: LIST
68620: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68621: LD_ADDR_VAR 0 45
68625: PUSH
68626: LD_INT 2
68628: NEG
68629: PUSH
68630: LD_INT 0
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 2
68639: NEG
68640: PUSH
68641: LD_INT 1
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 3
68650: NEG
68651: PUSH
68652: LD_INT 1
68654: NEG
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: LIST
68664: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68665: LD_ADDR_VAR 0 46
68669: PUSH
68670: LD_INT 2
68672: NEG
68673: PUSH
68674: LD_INT 2
68676: NEG
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 2
68684: NEG
68685: PUSH
68686: LD_INT 3
68688: NEG
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 3
68696: NEG
68697: PUSH
68698: LD_INT 2
68700: NEG
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: LIST
68710: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68711: LD_ADDR_VAR 0 47
68715: PUSH
68716: LD_INT 2
68718: NEG
68719: PUSH
68720: LD_INT 3
68722: NEG
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 1
68730: NEG
68731: PUSH
68732: LD_INT 3
68734: NEG
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68744: LD_ADDR_VAR 0 48
68748: PUSH
68749: LD_INT 1
68751: PUSH
68752: LD_INT 2
68754: NEG
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 2
68762: PUSH
68763: LD_INT 1
68765: NEG
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68775: LD_ADDR_VAR 0 49
68779: PUSH
68780: LD_INT 3
68782: PUSH
68783: LD_INT 1
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 3
68792: PUSH
68793: LD_INT 2
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68804: LD_ADDR_VAR 0 50
68808: PUSH
68809: LD_INT 2
68811: PUSH
68812: LD_INT 3
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 1
68821: PUSH
68822: LD_INT 3
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68833: LD_ADDR_VAR 0 51
68837: PUSH
68838: LD_INT 1
68840: NEG
68841: PUSH
68842: LD_INT 2
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 2
68851: NEG
68852: PUSH
68853: LD_INT 1
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68864: LD_ADDR_VAR 0 52
68868: PUSH
68869: LD_INT 3
68871: NEG
68872: PUSH
68873: LD_INT 1
68875: NEG
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 3
68883: NEG
68884: PUSH
68885: LD_INT 2
68887: NEG
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68897: LD_ADDR_VAR 0 53
68901: PUSH
68902: LD_INT 1
68904: NEG
68905: PUSH
68906: LD_INT 3
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 0
68916: PUSH
68917: LD_INT 3
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 1
68927: PUSH
68928: LD_INT 2
68930: NEG
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: LIST
68940: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68941: LD_ADDR_VAR 0 54
68945: PUSH
68946: LD_INT 2
68948: PUSH
68949: LD_INT 1
68951: NEG
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 3
68959: PUSH
68960: LD_INT 0
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 3
68969: PUSH
68970: LD_INT 1
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: LIST
68981: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68982: LD_ADDR_VAR 0 55
68986: PUSH
68987: LD_INT 3
68989: PUSH
68990: LD_INT 2
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 3
68999: PUSH
69000: LD_INT 3
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 2
69009: PUSH
69010: LD_INT 3
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: LIST
69021: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69022: LD_ADDR_VAR 0 56
69026: PUSH
69027: LD_INT 1
69029: PUSH
69030: LD_INT 3
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 0
69039: PUSH
69040: LD_INT 3
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 1
69049: NEG
69050: PUSH
69051: LD_INT 2
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: LIST
69062: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69063: LD_ADDR_VAR 0 57
69067: PUSH
69068: LD_INT 2
69070: NEG
69071: PUSH
69072: LD_INT 1
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 3
69081: NEG
69082: PUSH
69083: LD_INT 0
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 3
69092: NEG
69093: PUSH
69094: LD_INT 1
69096: NEG
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: LIST
69106: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69107: LD_ADDR_VAR 0 58
69111: PUSH
69112: LD_INT 2
69114: NEG
69115: PUSH
69116: LD_INT 3
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 3
69126: NEG
69127: PUSH
69128: LD_INT 2
69130: NEG
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 3
69138: NEG
69139: PUSH
69140: LD_INT 3
69142: NEG
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: LIST
69152: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69153: LD_ADDR_VAR 0 59
69157: PUSH
69158: LD_INT 1
69160: NEG
69161: PUSH
69162: LD_INT 2
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 0
69172: PUSH
69173: LD_INT 2
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 1
69183: PUSH
69184: LD_INT 1
69186: NEG
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: LIST
69196: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69197: LD_ADDR_VAR 0 60
69201: PUSH
69202: LD_INT 1
69204: PUSH
69205: LD_INT 1
69207: NEG
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 2
69215: PUSH
69216: LD_INT 0
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 2
69225: PUSH
69226: LD_INT 1
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: LIST
69237: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69238: LD_ADDR_VAR 0 61
69242: PUSH
69243: LD_INT 2
69245: PUSH
69246: LD_INT 1
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 2
69255: PUSH
69256: LD_INT 2
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 1
69265: PUSH
69266: LD_INT 2
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: LIST
69277: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69278: LD_ADDR_VAR 0 62
69282: PUSH
69283: LD_INT 1
69285: PUSH
69286: LD_INT 2
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 0
69295: PUSH
69296: LD_INT 2
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 1
69305: NEG
69306: PUSH
69307: LD_INT 1
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: LIST
69318: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69319: LD_ADDR_VAR 0 63
69323: PUSH
69324: LD_INT 1
69326: NEG
69327: PUSH
69328: LD_INT 1
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 2
69337: NEG
69338: PUSH
69339: LD_INT 0
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 2
69348: NEG
69349: PUSH
69350: LD_INT 1
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: LIST
69362: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69363: LD_ADDR_VAR 0 64
69367: PUSH
69368: LD_INT 1
69370: NEG
69371: PUSH
69372: LD_INT 2
69374: NEG
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 2
69382: NEG
69383: PUSH
69384: LD_INT 1
69386: NEG
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 2
69394: NEG
69395: PUSH
69396: LD_INT 2
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: LIST
69408: ST_TO_ADDR
// end ; 2 :
69409: GO 72675
69411: LD_INT 2
69413: DOUBLE
69414: EQUAL
69415: IFTRUE 69419
69417: GO 72674
69419: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69420: LD_ADDR_VAR 0 29
69424: PUSH
69425: LD_INT 4
69427: PUSH
69428: LD_INT 0
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 4
69437: PUSH
69438: LD_INT 1
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 5
69448: PUSH
69449: LD_INT 0
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 5
69458: PUSH
69459: LD_INT 1
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 4
69468: PUSH
69469: LD_INT 1
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 3
69478: PUSH
69479: LD_INT 0
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 3
69488: PUSH
69489: LD_INT 1
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 3
69499: PUSH
69500: LD_INT 2
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 5
69510: PUSH
69511: LD_INT 2
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 3
69520: PUSH
69521: LD_INT 3
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 3
69530: PUSH
69531: LD_INT 2
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 4
69540: PUSH
69541: LD_INT 3
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 4
69550: PUSH
69551: LD_INT 4
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 3
69560: PUSH
69561: LD_INT 4
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 2
69570: PUSH
69571: LD_INT 3
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 2
69580: PUSH
69581: LD_INT 2
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 4
69590: PUSH
69591: LD_INT 2
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 2
69600: PUSH
69601: LD_INT 4
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 0
69610: PUSH
69611: LD_INT 4
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 0
69620: PUSH
69621: LD_INT 3
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 1
69630: PUSH
69631: LD_INT 4
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 1
69640: PUSH
69641: LD_INT 5
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 0
69650: PUSH
69651: LD_INT 5
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 1
69660: NEG
69661: PUSH
69662: LD_INT 4
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 1
69671: NEG
69672: PUSH
69673: LD_INT 3
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 2
69682: PUSH
69683: LD_INT 5
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 2
69692: NEG
69693: PUSH
69694: LD_INT 3
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 3
69703: NEG
69704: PUSH
69705: LD_INT 0
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 3
69714: NEG
69715: PUSH
69716: LD_INT 1
69718: NEG
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 2
69726: NEG
69727: PUSH
69728: LD_INT 0
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 2
69737: NEG
69738: PUSH
69739: LD_INT 1
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 3
69748: NEG
69749: PUSH
69750: LD_INT 1
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 4
69759: NEG
69760: PUSH
69761: LD_INT 0
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 4
69770: NEG
69771: PUSH
69772: LD_INT 1
69774: NEG
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 4
69782: NEG
69783: PUSH
69784: LD_INT 2
69786: NEG
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 2
69794: NEG
69795: PUSH
69796: LD_INT 2
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 4
69805: NEG
69806: PUSH
69807: LD_INT 4
69809: NEG
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 4
69817: NEG
69818: PUSH
69819: LD_INT 5
69821: NEG
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 3
69829: NEG
69830: PUSH
69831: LD_INT 4
69833: NEG
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 3
69841: NEG
69842: PUSH
69843: LD_INT 3
69845: NEG
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 4
69853: NEG
69854: PUSH
69855: LD_INT 3
69857: NEG
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 5
69865: NEG
69866: PUSH
69867: LD_INT 4
69869: NEG
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 5
69877: NEG
69878: PUSH
69879: LD_INT 5
69881: NEG
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 3
69889: NEG
69890: PUSH
69891: LD_INT 5
69893: NEG
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 5
69901: NEG
69902: PUSH
69903: LD_INT 3
69905: NEG
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69958: LD_ADDR_VAR 0 30
69962: PUSH
69963: LD_INT 4
69965: PUSH
69966: LD_INT 4
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 4
69975: PUSH
69976: LD_INT 3
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 5
69985: PUSH
69986: LD_INT 4
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 5
69995: PUSH
69996: LD_INT 5
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 4
70005: PUSH
70006: LD_INT 5
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 3
70015: PUSH
70016: LD_INT 4
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 3
70025: PUSH
70026: LD_INT 3
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 5
70035: PUSH
70036: LD_INT 3
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 3
70045: PUSH
70046: LD_INT 5
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 0
70055: PUSH
70056: LD_INT 3
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 0
70065: PUSH
70066: LD_INT 2
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 1
70075: PUSH
70076: LD_INT 3
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 1
70085: PUSH
70086: LD_INT 4
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 0
70095: PUSH
70096: LD_INT 4
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 1
70105: NEG
70106: PUSH
70107: LD_INT 3
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 1
70116: NEG
70117: PUSH
70118: LD_INT 2
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 2
70127: PUSH
70128: LD_INT 4
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 2
70137: NEG
70138: PUSH
70139: LD_INT 2
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 4
70148: NEG
70149: PUSH
70150: LD_INT 0
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 4
70159: NEG
70160: PUSH
70161: LD_INT 1
70163: NEG
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 3
70171: NEG
70172: PUSH
70173: LD_INT 0
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 3
70182: NEG
70183: PUSH
70184: LD_INT 1
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 4
70193: NEG
70194: PUSH
70195: LD_INT 1
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 5
70204: NEG
70205: PUSH
70206: LD_INT 0
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 5
70215: NEG
70216: PUSH
70217: LD_INT 1
70219: NEG
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 5
70227: NEG
70228: PUSH
70229: LD_INT 2
70231: NEG
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 3
70239: NEG
70240: PUSH
70241: LD_INT 2
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 3
70250: NEG
70251: PUSH
70252: LD_INT 3
70254: NEG
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 3
70262: NEG
70263: PUSH
70264: LD_INT 4
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 2
70274: NEG
70275: PUSH
70276: LD_INT 3
70278: NEG
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 2
70286: NEG
70287: PUSH
70288: LD_INT 2
70290: NEG
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 3
70298: NEG
70299: PUSH
70300: LD_INT 2
70302: NEG
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 4
70310: NEG
70311: PUSH
70312: LD_INT 3
70314: NEG
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 4
70322: NEG
70323: PUSH
70324: LD_INT 4
70326: NEG
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 2
70334: NEG
70335: PUSH
70336: LD_INT 4
70338: NEG
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 4
70346: NEG
70347: PUSH
70348: LD_INT 2
70350: NEG
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 0
70358: PUSH
70359: LD_INT 4
70361: NEG
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 0
70369: PUSH
70370: LD_INT 5
70372: NEG
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 1
70380: PUSH
70381: LD_INT 4
70383: NEG
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PUSH
70389: LD_INT 1
70391: PUSH
70392: LD_INT 3
70394: NEG
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 0
70402: PUSH
70403: LD_INT 3
70405: NEG
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 1
70413: NEG
70414: PUSH
70415: LD_INT 4
70417: NEG
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 1
70425: NEG
70426: PUSH
70427: LD_INT 5
70429: NEG
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 2
70437: PUSH
70438: LD_INT 3
70440: NEG
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 2
70448: NEG
70449: PUSH
70450: LD_INT 5
70452: NEG
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70505: LD_ADDR_VAR 0 31
70509: PUSH
70510: LD_INT 0
70512: PUSH
70513: LD_INT 4
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 0
70522: PUSH
70523: LD_INT 3
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 1
70532: PUSH
70533: LD_INT 4
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: LD_INT 1
70542: PUSH
70543: LD_INT 5
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 0
70552: PUSH
70553: LD_INT 5
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 1
70562: NEG
70563: PUSH
70564: LD_INT 4
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 1
70573: NEG
70574: PUSH
70575: LD_INT 3
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 2
70584: PUSH
70585: LD_INT 5
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 2
70594: NEG
70595: PUSH
70596: LD_INT 3
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 3
70605: NEG
70606: PUSH
70607: LD_INT 0
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 3
70616: NEG
70617: PUSH
70618: LD_INT 1
70620: NEG
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: LD_INT 2
70628: NEG
70629: PUSH
70630: LD_INT 0
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 2
70639: NEG
70640: PUSH
70641: LD_INT 1
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: PUSH
70648: LD_INT 3
70650: NEG
70651: PUSH
70652: LD_INT 1
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 4
70661: NEG
70662: PUSH
70663: LD_INT 0
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 4
70672: NEG
70673: PUSH
70674: LD_INT 1
70676: NEG
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 4
70684: NEG
70685: PUSH
70686: LD_INT 2
70688: NEG
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 2
70696: NEG
70697: PUSH
70698: LD_INT 2
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 4
70707: NEG
70708: PUSH
70709: LD_INT 4
70711: NEG
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 4
70719: NEG
70720: PUSH
70721: LD_INT 5
70723: NEG
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 3
70731: NEG
70732: PUSH
70733: LD_INT 4
70735: NEG
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 3
70743: NEG
70744: PUSH
70745: LD_INT 3
70747: NEG
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 4
70755: NEG
70756: PUSH
70757: LD_INT 3
70759: NEG
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 5
70767: NEG
70768: PUSH
70769: LD_INT 4
70771: NEG
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 5
70779: NEG
70780: PUSH
70781: LD_INT 5
70783: NEG
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 3
70791: NEG
70792: PUSH
70793: LD_INT 5
70795: NEG
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: LD_INT 5
70803: NEG
70804: PUSH
70805: LD_INT 3
70807: NEG
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 0
70815: PUSH
70816: LD_INT 3
70818: NEG
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 0
70826: PUSH
70827: LD_INT 4
70829: NEG
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 1
70837: PUSH
70838: LD_INT 3
70840: NEG
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: LD_INT 1
70848: PUSH
70849: LD_INT 2
70851: NEG
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 0
70859: PUSH
70860: LD_INT 2
70862: NEG
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 1
70870: NEG
70871: PUSH
70872: LD_INT 3
70874: NEG
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 1
70882: NEG
70883: PUSH
70884: LD_INT 4
70886: NEG
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 2
70894: PUSH
70895: LD_INT 2
70897: NEG
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 2
70905: NEG
70906: PUSH
70907: LD_INT 4
70909: NEG
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 4
70917: PUSH
70918: LD_INT 0
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: PUSH
70925: LD_INT 4
70927: PUSH
70928: LD_INT 1
70930: NEG
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 5
70938: PUSH
70939: LD_INT 0
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 5
70948: PUSH
70949: LD_INT 1
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 4
70958: PUSH
70959: LD_INT 1
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 3
70968: PUSH
70969: LD_INT 0
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 3
70978: PUSH
70979: LD_INT 1
70981: NEG
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 3
70989: PUSH
70990: LD_INT 2
70992: NEG
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 5
71000: PUSH
71001: LD_INT 2
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71055: LD_ADDR_VAR 0 32
71059: PUSH
71060: LD_INT 4
71062: NEG
71063: PUSH
71064: LD_INT 0
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: LD_INT 4
71073: NEG
71074: PUSH
71075: LD_INT 1
71077: NEG
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 3
71085: NEG
71086: PUSH
71087: LD_INT 0
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 3
71096: NEG
71097: PUSH
71098: LD_INT 1
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 4
71107: NEG
71108: PUSH
71109: LD_INT 1
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 5
71118: NEG
71119: PUSH
71120: LD_INT 0
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 5
71129: NEG
71130: PUSH
71131: LD_INT 1
71133: NEG
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: PUSH
71139: LD_INT 5
71141: NEG
71142: PUSH
71143: LD_INT 2
71145: NEG
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 3
71153: NEG
71154: PUSH
71155: LD_INT 2
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_INT 3
71164: NEG
71165: PUSH
71166: LD_INT 3
71168: NEG
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 3
71176: NEG
71177: PUSH
71178: LD_INT 4
71180: NEG
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 2
71188: NEG
71189: PUSH
71190: LD_INT 3
71192: NEG
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 2
71200: NEG
71201: PUSH
71202: LD_INT 2
71204: NEG
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 3
71212: NEG
71213: PUSH
71214: LD_INT 2
71216: NEG
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 4
71224: NEG
71225: PUSH
71226: LD_INT 3
71228: NEG
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 4
71236: NEG
71237: PUSH
71238: LD_INT 4
71240: NEG
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 2
71248: NEG
71249: PUSH
71250: LD_INT 4
71252: NEG
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: LD_INT 4
71260: NEG
71261: PUSH
71262: LD_INT 2
71264: NEG
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 0
71272: PUSH
71273: LD_INT 4
71275: NEG
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: LD_INT 0
71283: PUSH
71284: LD_INT 5
71286: NEG
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 1
71294: PUSH
71295: LD_INT 4
71297: NEG
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PUSH
71303: LD_INT 1
71305: PUSH
71306: LD_INT 3
71308: NEG
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: PUSH
71314: LD_INT 0
71316: PUSH
71317: LD_INT 3
71319: NEG
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 1
71327: NEG
71328: PUSH
71329: LD_INT 4
71331: NEG
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 1
71339: NEG
71340: PUSH
71341: LD_INT 5
71343: NEG
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 2
71351: PUSH
71352: LD_INT 3
71354: NEG
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 2
71362: NEG
71363: PUSH
71364: LD_INT 5
71366: NEG
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: LD_INT 3
71374: PUSH
71375: LD_INT 0
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 3
71384: PUSH
71385: LD_INT 1
71387: NEG
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: PUSH
71393: LD_INT 4
71395: PUSH
71396: LD_INT 0
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: PUSH
71403: LD_INT 4
71405: PUSH
71406: LD_INT 1
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: LD_INT 3
71415: PUSH
71416: LD_INT 1
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 2
71425: PUSH
71426: LD_INT 0
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PUSH
71433: LD_INT 2
71435: PUSH
71436: LD_INT 1
71438: NEG
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 2
71446: PUSH
71447: LD_INT 2
71449: NEG
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 4
71457: PUSH
71458: LD_INT 2
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 4
71467: PUSH
71468: LD_INT 4
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 4
71477: PUSH
71478: LD_INT 3
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 5
71487: PUSH
71488: LD_INT 4
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 5
71497: PUSH
71498: LD_INT 5
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 4
71507: PUSH
71508: LD_INT 5
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 3
71517: PUSH
71518: LD_INT 4
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 3
71527: PUSH
71528: LD_INT 3
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 5
71537: PUSH
71538: LD_INT 3
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PUSH
71545: LD_INT 3
71547: PUSH
71548: LD_INT 5
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71602: LD_ADDR_VAR 0 33
71606: PUSH
71607: LD_INT 4
71609: NEG
71610: PUSH
71611: LD_INT 4
71613: NEG
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 4
71621: NEG
71622: PUSH
71623: LD_INT 5
71625: NEG
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PUSH
71631: LD_INT 3
71633: NEG
71634: PUSH
71635: LD_INT 4
71637: NEG
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 3
71645: NEG
71646: PUSH
71647: LD_INT 3
71649: NEG
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 4
71657: NEG
71658: PUSH
71659: LD_INT 3
71661: NEG
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 5
71669: NEG
71670: PUSH
71671: LD_INT 4
71673: NEG
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 5
71681: NEG
71682: PUSH
71683: LD_INT 5
71685: NEG
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PUSH
71691: LD_INT 3
71693: NEG
71694: PUSH
71695: LD_INT 5
71697: NEG
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PUSH
71703: LD_INT 5
71705: NEG
71706: PUSH
71707: LD_INT 3
71709: NEG
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: LD_INT 0
71717: PUSH
71718: LD_INT 3
71720: NEG
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PUSH
71726: LD_INT 0
71728: PUSH
71729: LD_INT 4
71731: NEG
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 1
71739: PUSH
71740: LD_INT 3
71742: NEG
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: PUSH
71748: LD_INT 1
71750: PUSH
71751: LD_INT 2
71753: NEG
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: PUSH
71759: LD_INT 0
71761: PUSH
71762: LD_INT 2
71764: NEG
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 1
71772: NEG
71773: PUSH
71774: LD_INT 3
71776: NEG
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PUSH
71782: LD_INT 1
71784: NEG
71785: PUSH
71786: LD_INT 4
71788: NEG
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: PUSH
71794: LD_INT 2
71796: PUSH
71797: LD_INT 2
71799: NEG
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 2
71807: NEG
71808: PUSH
71809: LD_INT 4
71811: NEG
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 4
71819: PUSH
71820: LD_INT 0
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 4
71829: PUSH
71830: LD_INT 1
71832: NEG
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PUSH
71838: LD_INT 5
71840: PUSH
71841: LD_INT 0
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: PUSH
71848: LD_INT 5
71850: PUSH
71851: LD_INT 1
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_INT 4
71860: PUSH
71861: LD_INT 1
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: LD_INT 3
71870: PUSH
71871: LD_INT 0
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: PUSH
71878: LD_INT 3
71880: PUSH
71881: LD_INT 1
71883: NEG
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: LD_INT 3
71891: PUSH
71892: LD_INT 2
71894: NEG
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 5
71902: PUSH
71903: LD_INT 2
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: PUSH
71910: LD_INT 3
71912: PUSH
71913: LD_INT 3
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: LD_INT 3
71922: PUSH
71923: LD_INT 2
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: PUSH
71930: LD_INT 4
71932: PUSH
71933: LD_INT 3
71935: PUSH
71936: EMPTY
71937: LIST
71938: LIST
71939: PUSH
71940: LD_INT 4
71942: PUSH
71943: LD_INT 4
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 3
71952: PUSH
71953: LD_INT 4
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 2
71962: PUSH
71963: LD_INT 3
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 2
71972: PUSH
71973: LD_INT 2
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 4
71982: PUSH
71983: LD_INT 2
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 2
71992: PUSH
71993: LD_INT 4
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 0
72002: PUSH
72003: LD_INT 4
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 0
72012: PUSH
72013: LD_INT 3
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 1
72022: PUSH
72023: LD_INT 4
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 1
72032: PUSH
72033: LD_INT 5
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 0
72042: PUSH
72043: LD_INT 5
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: PUSH
72050: LD_INT 1
72052: NEG
72053: PUSH
72054: LD_INT 4
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PUSH
72061: LD_INT 1
72063: NEG
72064: PUSH
72065: LD_INT 3
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: LD_INT 2
72074: PUSH
72075: LD_INT 5
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: LD_INT 2
72084: NEG
72085: PUSH
72086: LD_INT 3
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72140: LD_ADDR_VAR 0 34
72144: PUSH
72145: LD_INT 0
72147: PUSH
72148: LD_INT 4
72150: NEG
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 0
72158: PUSH
72159: LD_INT 5
72161: NEG
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: PUSH
72167: LD_INT 1
72169: PUSH
72170: LD_INT 4
72172: NEG
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: LD_INT 1
72180: PUSH
72181: LD_INT 3
72183: NEG
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: PUSH
72189: LD_INT 0
72191: PUSH
72192: LD_INT 3
72194: NEG
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: LD_INT 1
72202: NEG
72203: PUSH
72204: LD_INT 4
72206: NEG
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: PUSH
72212: LD_INT 1
72214: NEG
72215: PUSH
72216: LD_INT 5
72218: NEG
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: PUSH
72224: LD_INT 2
72226: PUSH
72227: LD_INT 3
72229: NEG
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: LD_INT 2
72237: NEG
72238: PUSH
72239: LD_INT 5
72241: NEG
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: LD_INT 3
72249: PUSH
72250: LD_INT 0
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 3
72259: PUSH
72260: LD_INT 1
72262: NEG
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: LD_INT 4
72270: PUSH
72271: LD_INT 0
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 4
72280: PUSH
72281: LD_INT 1
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: PUSH
72288: LD_INT 3
72290: PUSH
72291: LD_INT 1
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PUSH
72298: LD_INT 2
72300: PUSH
72301: LD_INT 0
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: PUSH
72308: LD_INT 2
72310: PUSH
72311: LD_INT 1
72313: NEG
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: LD_INT 2
72321: PUSH
72322: LD_INT 2
72324: NEG
72325: PUSH
72326: EMPTY
72327: LIST
72328: LIST
72329: PUSH
72330: LD_INT 4
72332: PUSH
72333: LD_INT 2
72335: PUSH
72336: EMPTY
72337: LIST
72338: LIST
72339: PUSH
72340: LD_INT 4
72342: PUSH
72343: LD_INT 4
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 4
72352: PUSH
72353: LD_INT 3
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: PUSH
72360: LD_INT 5
72362: PUSH
72363: LD_INT 4
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 5
72372: PUSH
72373: LD_INT 5
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 4
72382: PUSH
72383: LD_INT 5
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 3
72392: PUSH
72393: LD_INT 4
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PUSH
72400: LD_INT 3
72402: PUSH
72403: LD_INT 3
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: LD_INT 5
72412: PUSH
72413: LD_INT 3
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 3
72422: PUSH
72423: LD_INT 5
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 0
72432: PUSH
72433: LD_INT 3
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: PUSH
72440: LD_INT 0
72442: PUSH
72443: LD_INT 2
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: LD_INT 1
72452: PUSH
72453: LD_INT 3
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: PUSH
72460: LD_INT 1
72462: PUSH
72463: LD_INT 4
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 0
72472: PUSH
72473: LD_INT 4
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: LD_INT 1
72482: NEG
72483: PUSH
72484: LD_INT 3
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 1
72493: NEG
72494: PUSH
72495: LD_INT 2
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 2
72504: PUSH
72505: LD_INT 4
72507: PUSH
72508: EMPTY
72509: LIST
72510: LIST
72511: PUSH
72512: LD_INT 2
72514: NEG
72515: PUSH
72516: LD_INT 2
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: PUSH
72523: LD_INT 4
72525: NEG
72526: PUSH
72527: LD_INT 0
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: LD_INT 4
72536: NEG
72537: PUSH
72538: LD_INT 1
72540: NEG
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: LD_INT 3
72548: NEG
72549: PUSH
72550: LD_INT 0
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: PUSH
72557: LD_INT 3
72559: NEG
72560: PUSH
72561: LD_INT 1
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: LD_INT 4
72570: NEG
72571: PUSH
72572: LD_INT 1
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 5
72581: NEG
72582: PUSH
72583: LD_INT 0
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: PUSH
72590: LD_INT 5
72592: NEG
72593: PUSH
72594: LD_INT 1
72596: NEG
72597: PUSH
72598: EMPTY
72599: LIST
72600: LIST
72601: PUSH
72602: LD_INT 5
72604: NEG
72605: PUSH
72606: LD_INT 2
72608: NEG
72609: PUSH
72610: EMPTY
72611: LIST
72612: LIST
72613: PUSH
72614: LD_INT 3
72616: NEG
72617: PUSH
72618: LD_INT 2
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: ST_TO_ADDR
// end ; end ;
72672: GO 72675
72674: POP
// case btype of b_depot , b_warehouse :
72675: LD_VAR 0 1
72679: PUSH
72680: LD_INT 0
72682: DOUBLE
72683: EQUAL
72684: IFTRUE 72694
72686: LD_INT 1
72688: DOUBLE
72689: EQUAL
72690: IFTRUE 72694
72692: GO 72895
72694: POP
// case nation of nation_american :
72695: LD_VAR 0 5
72699: PUSH
72700: LD_INT 1
72702: DOUBLE
72703: EQUAL
72704: IFTRUE 72708
72706: GO 72764
72708: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72709: LD_ADDR_VAR 0 9
72713: PUSH
72714: LD_VAR 0 11
72718: PUSH
72719: LD_VAR 0 12
72723: PUSH
72724: LD_VAR 0 13
72728: PUSH
72729: LD_VAR 0 14
72733: PUSH
72734: LD_VAR 0 15
72738: PUSH
72739: LD_VAR 0 16
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: PUSH
72752: LD_VAR 0 4
72756: PUSH
72757: LD_INT 1
72759: PLUS
72760: ARRAY
72761: ST_TO_ADDR
72762: GO 72893
72764: LD_INT 2
72766: DOUBLE
72767: EQUAL
72768: IFTRUE 72772
72770: GO 72828
72772: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72773: LD_ADDR_VAR 0 9
72777: PUSH
72778: LD_VAR 0 17
72782: PUSH
72783: LD_VAR 0 18
72787: PUSH
72788: LD_VAR 0 19
72792: PUSH
72793: LD_VAR 0 20
72797: PUSH
72798: LD_VAR 0 21
72802: PUSH
72803: LD_VAR 0 22
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: LIST
72812: LIST
72813: LIST
72814: LIST
72815: PUSH
72816: LD_VAR 0 4
72820: PUSH
72821: LD_INT 1
72823: PLUS
72824: ARRAY
72825: ST_TO_ADDR
72826: GO 72893
72828: LD_INT 3
72830: DOUBLE
72831: EQUAL
72832: IFTRUE 72836
72834: GO 72892
72836: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72837: LD_ADDR_VAR 0 9
72841: PUSH
72842: LD_VAR 0 23
72846: PUSH
72847: LD_VAR 0 24
72851: PUSH
72852: LD_VAR 0 25
72856: PUSH
72857: LD_VAR 0 26
72861: PUSH
72862: LD_VAR 0 27
72866: PUSH
72867: LD_VAR 0 28
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: PUSH
72880: LD_VAR 0 4
72884: PUSH
72885: LD_INT 1
72887: PLUS
72888: ARRAY
72889: ST_TO_ADDR
72890: GO 72893
72892: POP
72893: GO 73448
72895: LD_INT 2
72897: DOUBLE
72898: EQUAL
72899: IFTRUE 72909
72901: LD_INT 3
72903: DOUBLE
72904: EQUAL
72905: IFTRUE 72909
72907: GO 72965
72909: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72910: LD_ADDR_VAR 0 9
72914: PUSH
72915: LD_VAR 0 29
72919: PUSH
72920: LD_VAR 0 30
72924: PUSH
72925: LD_VAR 0 31
72929: PUSH
72930: LD_VAR 0 32
72934: PUSH
72935: LD_VAR 0 33
72939: PUSH
72940: LD_VAR 0 34
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: LIST
72952: PUSH
72953: LD_VAR 0 4
72957: PUSH
72958: LD_INT 1
72960: PLUS
72961: ARRAY
72962: ST_TO_ADDR
72963: GO 73448
72965: LD_INT 16
72967: DOUBLE
72968: EQUAL
72969: IFTRUE 73027
72971: LD_INT 17
72973: DOUBLE
72974: EQUAL
72975: IFTRUE 73027
72977: LD_INT 18
72979: DOUBLE
72980: EQUAL
72981: IFTRUE 73027
72983: LD_INT 19
72985: DOUBLE
72986: EQUAL
72987: IFTRUE 73027
72989: LD_INT 22
72991: DOUBLE
72992: EQUAL
72993: IFTRUE 73027
72995: LD_INT 20
72997: DOUBLE
72998: EQUAL
72999: IFTRUE 73027
73001: LD_INT 21
73003: DOUBLE
73004: EQUAL
73005: IFTRUE 73027
73007: LD_INT 23
73009: DOUBLE
73010: EQUAL
73011: IFTRUE 73027
73013: LD_INT 24
73015: DOUBLE
73016: EQUAL
73017: IFTRUE 73027
73019: LD_INT 25
73021: DOUBLE
73022: EQUAL
73023: IFTRUE 73027
73025: GO 73083
73027: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73028: LD_ADDR_VAR 0 9
73032: PUSH
73033: LD_VAR 0 35
73037: PUSH
73038: LD_VAR 0 36
73042: PUSH
73043: LD_VAR 0 37
73047: PUSH
73048: LD_VAR 0 38
73052: PUSH
73053: LD_VAR 0 39
73057: PUSH
73058: LD_VAR 0 40
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: LIST
73067: LIST
73068: LIST
73069: LIST
73070: PUSH
73071: LD_VAR 0 4
73075: PUSH
73076: LD_INT 1
73078: PLUS
73079: ARRAY
73080: ST_TO_ADDR
73081: GO 73448
73083: LD_INT 6
73085: DOUBLE
73086: EQUAL
73087: IFTRUE 73139
73089: LD_INT 7
73091: DOUBLE
73092: EQUAL
73093: IFTRUE 73139
73095: LD_INT 8
73097: DOUBLE
73098: EQUAL
73099: IFTRUE 73139
73101: LD_INT 13
73103: DOUBLE
73104: EQUAL
73105: IFTRUE 73139
73107: LD_INT 12
73109: DOUBLE
73110: EQUAL
73111: IFTRUE 73139
73113: LD_INT 15
73115: DOUBLE
73116: EQUAL
73117: IFTRUE 73139
73119: LD_INT 11
73121: DOUBLE
73122: EQUAL
73123: IFTRUE 73139
73125: LD_INT 14
73127: DOUBLE
73128: EQUAL
73129: IFTRUE 73139
73131: LD_INT 10
73133: DOUBLE
73134: EQUAL
73135: IFTRUE 73139
73137: GO 73195
73139: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73140: LD_ADDR_VAR 0 9
73144: PUSH
73145: LD_VAR 0 41
73149: PUSH
73150: LD_VAR 0 42
73154: PUSH
73155: LD_VAR 0 43
73159: PUSH
73160: LD_VAR 0 44
73164: PUSH
73165: LD_VAR 0 45
73169: PUSH
73170: LD_VAR 0 46
73174: PUSH
73175: EMPTY
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: PUSH
73183: LD_VAR 0 4
73187: PUSH
73188: LD_INT 1
73190: PLUS
73191: ARRAY
73192: ST_TO_ADDR
73193: GO 73448
73195: LD_INT 36
73197: DOUBLE
73198: EQUAL
73199: IFTRUE 73203
73201: GO 73259
73203: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73204: LD_ADDR_VAR 0 9
73208: PUSH
73209: LD_VAR 0 47
73213: PUSH
73214: LD_VAR 0 48
73218: PUSH
73219: LD_VAR 0 49
73223: PUSH
73224: LD_VAR 0 50
73228: PUSH
73229: LD_VAR 0 51
73233: PUSH
73234: LD_VAR 0 52
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: PUSH
73247: LD_VAR 0 4
73251: PUSH
73252: LD_INT 1
73254: PLUS
73255: ARRAY
73256: ST_TO_ADDR
73257: GO 73448
73259: LD_INT 4
73261: DOUBLE
73262: EQUAL
73263: IFTRUE 73285
73265: LD_INT 5
73267: DOUBLE
73268: EQUAL
73269: IFTRUE 73285
73271: LD_INT 34
73273: DOUBLE
73274: EQUAL
73275: IFTRUE 73285
73277: LD_INT 37
73279: DOUBLE
73280: EQUAL
73281: IFTRUE 73285
73283: GO 73341
73285: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73286: LD_ADDR_VAR 0 9
73290: PUSH
73291: LD_VAR 0 53
73295: PUSH
73296: LD_VAR 0 54
73300: PUSH
73301: LD_VAR 0 55
73305: PUSH
73306: LD_VAR 0 56
73310: PUSH
73311: LD_VAR 0 57
73315: PUSH
73316: LD_VAR 0 58
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: PUSH
73329: LD_VAR 0 4
73333: PUSH
73334: LD_INT 1
73336: PLUS
73337: ARRAY
73338: ST_TO_ADDR
73339: GO 73448
73341: LD_INT 31
73343: DOUBLE
73344: EQUAL
73345: IFTRUE 73391
73347: LD_INT 32
73349: DOUBLE
73350: EQUAL
73351: IFTRUE 73391
73353: LD_INT 33
73355: DOUBLE
73356: EQUAL
73357: IFTRUE 73391
73359: LD_INT 27
73361: DOUBLE
73362: EQUAL
73363: IFTRUE 73391
73365: LD_INT 26
73367: DOUBLE
73368: EQUAL
73369: IFTRUE 73391
73371: LD_INT 28
73373: DOUBLE
73374: EQUAL
73375: IFTRUE 73391
73377: LD_INT 29
73379: DOUBLE
73380: EQUAL
73381: IFTRUE 73391
73383: LD_INT 30
73385: DOUBLE
73386: EQUAL
73387: IFTRUE 73391
73389: GO 73447
73391: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73392: LD_ADDR_VAR 0 9
73396: PUSH
73397: LD_VAR 0 59
73401: PUSH
73402: LD_VAR 0 60
73406: PUSH
73407: LD_VAR 0 61
73411: PUSH
73412: LD_VAR 0 62
73416: PUSH
73417: LD_VAR 0 63
73421: PUSH
73422: LD_VAR 0 64
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: PUSH
73435: LD_VAR 0 4
73439: PUSH
73440: LD_INT 1
73442: PLUS
73443: ARRAY
73444: ST_TO_ADDR
73445: GO 73448
73447: POP
// temp_list2 = [ ] ;
73448: LD_ADDR_VAR 0 10
73452: PUSH
73453: EMPTY
73454: ST_TO_ADDR
// for i in temp_list do
73455: LD_ADDR_VAR 0 8
73459: PUSH
73460: LD_VAR 0 9
73464: PUSH
73465: FOR_IN
73466: IFFALSE 73518
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73468: LD_ADDR_VAR 0 10
73472: PUSH
73473: LD_VAR 0 10
73477: PUSH
73478: LD_VAR 0 8
73482: PUSH
73483: LD_INT 1
73485: ARRAY
73486: PUSH
73487: LD_VAR 0 2
73491: PLUS
73492: PUSH
73493: LD_VAR 0 8
73497: PUSH
73498: LD_INT 2
73500: ARRAY
73501: PUSH
73502: LD_VAR 0 3
73506: PLUS
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: PUSH
73512: EMPTY
73513: LIST
73514: ADD
73515: ST_TO_ADDR
73516: GO 73465
73518: POP
73519: POP
// result = temp_list2 ;
73520: LD_ADDR_VAR 0 7
73524: PUSH
73525: LD_VAR 0 10
73529: ST_TO_ADDR
// end ;
73530: LD_VAR 0 7
73534: RET
// export function EnemyInRange ( unit , dist ) ; begin
73535: LD_INT 0
73537: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73538: LD_ADDR_VAR 0 3
73542: PUSH
73543: LD_VAR 0 1
73547: PPUSH
73548: CALL_OW 255
73552: PPUSH
73553: LD_VAR 0 1
73557: PPUSH
73558: CALL_OW 250
73562: PPUSH
73563: LD_VAR 0 1
73567: PPUSH
73568: CALL_OW 251
73572: PPUSH
73573: LD_VAR 0 2
73577: PPUSH
73578: CALL 47639 0 4
73582: PUSH
73583: LD_INT 4
73585: ARRAY
73586: ST_TO_ADDR
// end ;
73587: LD_VAR 0 3
73591: RET
// export function PlayerSeeMe ( unit ) ; begin
73592: LD_INT 0
73594: PPUSH
// result := See ( your_side , unit ) ;
73595: LD_ADDR_VAR 0 2
73599: PUSH
73600: LD_OWVAR 2
73604: PPUSH
73605: LD_VAR 0 1
73609: PPUSH
73610: CALL_OW 292
73614: ST_TO_ADDR
// end ;
73615: LD_VAR 0 2
73619: RET
// export function ReverseDir ( unit ) ; begin
73620: LD_INT 0
73622: PPUSH
// if not unit then
73623: LD_VAR 0 1
73627: NOT
73628: IFFALSE 73632
// exit ;
73630: GO 73655
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73632: LD_ADDR_VAR 0 2
73636: PUSH
73637: LD_VAR 0 1
73641: PPUSH
73642: CALL_OW 254
73646: PUSH
73647: LD_INT 3
73649: PLUS
73650: PUSH
73651: LD_INT 6
73653: MOD
73654: ST_TO_ADDR
// end ;
73655: LD_VAR 0 2
73659: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
73660: LD_INT 0
73662: PPUSH
73663: PPUSH
73664: PPUSH
73665: PPUSH
73666: PPUSH
// if not hexes then
73667: LD_VAR 0 2
73671: NOT
73672: IFFALSE 73676
// exit ;
73674: GO 73824
// dist := 9999 ;
73676: LD_ADDR_VAR 0 5
73680: PUSH
73681: LD_INT 9999
73683: ST_TO_ADDR
// for i = 1 to hexes do
73684: LD_ADDR_VAR 0 4
73688: PUSH
73689: DOUBLE
73690: LD_INT 1
73692: DEC
73693: ST_TO_ADDR
73694: LD_VAR 0 2
73698: PUSH
73699: FOR_TO
73700: IFFALSE 73812
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
73702: LD_VAR 0 1
73706: PPUSH
73707: LD_VAR 0 2
73711: PUSH
73712: LD_VAR 0 4
73716: ARRAY
73717: PUSH
73718: LD_INT 1
73720: ARRAY
73721: PPUSH
73722: LD_VAR 0 2
73726: PUSH
73727: LD_VAR 0 4
73731: ARRAY
73732: PUSH
73733: LD_INT 2
73735: ARRAY
73736: PPUSH
73737: CALL_OW 297
73741: PUSH
73742: LD_VAR 0 5
73746: LESS
73747: IFFALSE 73810
// begin hex := hexes [ i ] ;
73749: LD_ADDR_VAR 0 7
73753: PUSH
73754: LD_VAR 0 2
73758: PUSH
73759: LD_VAR 0 4
73763: ARRAY
73764: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73765: LD_ADDR_VAR 0 5
73769: PUSH
73770: LD_VAR 0 1
73774: PPUSH
73775: LD_VAR 0 2
73779: PUSH
73780: LD_VAR 0 4
73784: ARRAY
73785: PUSH
73786: LD_INT 1
73788: ARRAY
73789: PPUSH
73790: LD_VAR 0 2
73794: PUSH
73795: LD_VAR 0 4
73799: ARRAY
73800: PUSH
73801: LD_INT 2
73803: ARRAY
73804: PPUSH
73805: CALL_OW 297
73809: ST_TO_ADDR
// end ; end ;
73810: GO 73699
73812: POP
73813: POP
// result := hex ;
73814: LD_ADDR_VAR 0 3
73818: PUSH
73819: LD_VAR 0 7
73823: ST_TO_ADDR
// end ;
73824: LD_VAR 0 3
73828: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73829: LD_INT 0
73831: PPUSH
73832: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73833: LD_VAR 0 1
73837: NOT
73838: PUSH
73839: LD_VAR 0 1
73843: PUSH
73844: LD_INT 21
73846: PUSH
73847: LD_INT 2
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PUSH
73854: LD_INT 23
73856: PUSH
73857: LD_INT 2
73859: PUSH
73860: EMPTY
73861: LIST
73862: LIST
73863: PUSH
73864: EMPTY
73865: LIST
73866: LIST
73867: PPUSH
73868: CALL_OW 69
73872: IN
73873: NOT
73874: OR
73875: IFFALSE 73879
// exit ;
73877: GO 73926
// for i = 1 to 3 do
73879: LD_ADDR_VAR 0 3
73883: PUSH
73884: DOUBLE
73885: LD_INT 1
73887: DEC
73888: ST_TO_ADDR
73889: LD_INT 3
73891: PUSH
73892: FOR_TO
73893: IFFALSE 73924
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73895: LD_VAR 0 1
73899: PPUSH
73900: CALL_OW 250
73904: PPUSH
73905: LD_VAR 0 1
73909: PPUSH
73910: CALL_OW 251
73914: PPUSH
73915: LD_INT 1
73917: PPUSH
73918: CALL_OW 453
73922: GO 73892
73924: POP
73925: POP
// end ;
73926: LD_VAR 0 2
73930: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73931: LD_INT 0
73933: PPUSH
73934: PPUSH
73935: PPUSH
73936: PPUSH
73937: PPUSH
73938: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73939: LD_VAR 0 1
73943: NOT
73944: PUSH
73945: LD_VAR 0 2
73949: NOT
73950: OR
73951: PUSH
73952: LD_VAR 0 1
73956: PPUSH
73957: CALL_OW 314
73961: OR
73962: IFFALSE 73966
// exit ;
73964: GO 74407
// x := GetX ( enemy_unit ) ;
73966: LD_ADDR_VAR 0 7
73970: PUSH
73971: LD_VAR 0 2
73975: PPUSH
73976: CALL_OW 250
73980: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73981: LD_ADDR_VAR 0 8
73985: PUSH
73986: LD_VAR 0 2
73990: PPUSH
73991: CALL_OW 251
73995: ST_TO_ADDR
// if not x or not y then
73996: LD_VAR 0 7
74000: NOT
74001: PUSH
74002: LD_VAR 0 8
74006: NOT
74007: OR
74008: IFFALSE 74012
// exit ;
74010: GO 74407
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74012: LD_ADDR_VAR 0 6
74016: PUSH
74017: LD_VAR 0 7
74021: PPUSH
74022: LD_INT 0
74024: PPUSH
74025: LD_INT 4
74027: PPUSH
74028: CALL_OW 272
74032: PUSH
74033: LD_VAR 0 8
74037: PPUSH
74038: LD_INT 0
74040: PPUSH
74041: LD_INT 4
74043: PPUSH
74044: CALL_OW 273
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: PUSH
74053: LD_VAR 0 7
74057: PPUSH
74058: LD_INT 1
74060: PPUSH
74061: LD_INT 4
74063: PPUSH
74064: CALL_OW 272
74068: PUSH
74069: LD_VAR 0 8
74073: PPUSH
74074: LD_INT 1
74076: PPUSH
74077: LD_INT 4
74079: PPUSH
74080: CALL_OW 273
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: PUSH
74089: LD_VAR 0 7
74093: PPUSH
74094: LD_INT 2
74096: PPUSH
74097: LD_INT 4
74099: PPUSH
74100: CALL_OW 272
74104: PUSH
74105: LD_VAR 0 8
74109: PPUSH
74110: LD_INT 2
74112: PPUSH
74113: LD_INT 4
74115: PPUSH
74116: CALL_OW 273
74120: PUSH
74121: EMPTY
74122: LIST
74123: LIST
74124: PUSH
74125: LD_VAR 0 7
74129: PPUSH
74130: LD_INT 3
74132: PPUSH
74133: LD_INT 4
74135: PPUSH
74136: CALL_OW 272
74140: PUSH
74141: LD_VAR 0 8
74145: PPUSH
74146: LD_INT 3
74148: PPUSH
74149: LD_INT 4
74151: PPUSH
74152: CALL_OW 273
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: PUSH
74161: LD_VAR 0 7
74165: PPUSH
74166: LD_INT 4
74168: PPUSH
74169: LD_INT 4
74171: PPUSH
74172: CALL_OW 272
74176: PUSH
74177: LD_VAR 0 8
74181: PPUSH
74182: LD_INT 4
74184: PPUSH
74185: LD_INT 4
74187: PPUSH
74188: CALL_OW 273
74192: PUSH
74193: EMPTY
74194: LIST
74195: LIST
74196: PUSH
74197: LD_VAR 0 7
74201: PPUSH
74202: LD_INT 5
74204: PPUSH
74205: LD_INT 4
74207: PPUSH
74208: CALL_OW 272
74212: PUSH
74213: LD_VAR 0 8
74217: PPUSH
74218: LD_INT 5
74220: PPUSH
74221: LD_INT 4
74223: PPUSH
74224: CALL_OW 273
74228: PUSH
74229: EMPTY
74230: LIST
74231: LIST
74232: PUSH
74233: EMPTY
74234: LIST
74235: LIST
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: ST_TO_ADDR
// for i = tmp downto 1 do
74241: LD_ADDR_VAR 0 4
74245: PUSH
74246: DOUBLE
74247: LD_VAR 0 6
74251: INC
74252: ST_TO_ADDR
74253: LD_INT 1
74255: PUSH
74256: FOR_DOWNTO
74257: IFFALSE 74358
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74259: LD_VAR 0 6
74263: PUSH
74264: LD_VAR 0 4
74268: ARRAY
74269: PUSH
74270: LD_INT 1
74272: ARRAY
74273: PPUSH
74274: LD_VAR 0 6
74278: PUSH
74279: LD_VAR 0 4
74283: ARRAY
74284: PUSH
74285: LD_INT 2
74287: ARRAY
74288: PPUSH
74289: CALL_OW 488
74293: NOT
74294: PUSH
74295: LD_VAR 0 6
74299: PUSH
74300: LD_VAR 0 4
74304: ARRAY
74305: PUSH
74306: LD_INT 1
74308: ARRAY
74309: PPUSH
74310: LD_VAR 0 6
74314: PUSH
74315: LD_VAR 0 4
74319: ARRAY
74320: PUSH
74321: LD_INT 2
74323: ARRAY
74324: PPUSH
74325: CALL_OW 428
74329: PUSH
74330: LD_INT 0
74332: NONEQUAL
74333: OR
74334: IFFALSE 74356
// tmp := Delete ( tmp , i ) ;
74336: LD_ADDR_VAR 0 6
74340: PUSH
74341: LD_VAR 0 6
74345: PPUSH
74346: LD_VAR 0 4
74350: PPUSH
74351: CALL_OW 3
74355: ST_TO_ADDR
74356: GO 74256
74358: POP
74359: POP
// j := GetClosestHex ( unit , tmp ) ;
74360: LD_ADDR_VAR 0 5
74364: PUSH
74365: LD_VAR 0 1
74369: PPUSH
74370: LD_VAR 0 6
74374: PPUSH
74375: CALL 73660 0 2
74379: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74380: LD_VAR 0 1
74384: PPUSH
74385: LD_VAR 0 5
74389: PUSH
74390: LD_INT 1
74392: ARRAY
74393: PPUSH
74394: LD_VAR 0 5
74398: PUSH
74399: LD_INT 2
74401: ARRAY
74402: PPUSH
74403: CALL_OW 111
// end ;
74407: LD_VAR 0 3
74411: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74412: LD_INT 0
74414: PPUSH
74415: PPUSH
74416: PPUSH
// uc_side = 0 ;
74417: LD_ADDR_OWVAR 20
74421: PUSH
74422: LD_INT 0
74424: ST_TO_ADDR
// uc_nation = 0 ;
74425: LD_ADDR_OWVAR 21
74429: PUSH
74430: LD_INT 0
74432: ST_TO_ADDR
// InitHc_All ( ) ;
74433: CALL_OW 584
// InitVc ;
74437: CALL_OW 20
// if mastodonts then
74441: LD_VAR 0 6
74445: IFFALSE 74512
// for i = 1 to mastodonts do
74447: LD_ADDR_VAR 0 11
74451: PUSH
74452: DOUBLE
74453: LD_INT 1
74455: DEC
74456: ST_TO_ADDR
74457: LD_VAR 0 6
74461: PUSH
74462: FOR_TO
74463: IFFALSE 74510
// begin vc_chassis := 31 ;
74465: LD_ADDR_OWVAR 37
74469: PUSH
74470: LD_INT 31
74472: ST_TO_ADDR
// vc_control := control_rider ;
74473: LD_ADDR_OWVAR 38
74477: PUSH
74478: LD_INT 4
74480: ST_TO_ADDR
// animal := CreateVehicle ;
74481: LD_ADDR_VAR 0 12
74485: PUSH
74486: CALL_OW 45
74490: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74491: LD_VAR 0 12
74495: PPUSH
74496: LD_VAR 0 8
74500: PPUSH
74501: LD_INT 0
74503: PPUSH
74504: CALL 76700 0 3
// end ;
74508: GO 74462
74510: POP
74511: POP
// if horses then
74512: LD_VAR 0 5
74516: IFFALSE 74583
// for i = 1 to horses do
74518: LD_ADDR_VAR 0 11
74522: PUSH
74523: DOUBLE
74524: LD_INT 1
74526: DEC
74527: ST_TO_ADDR
74528: LD_VAR 0 5
74532: PUSH
74533: FOR_TO
74534: IFFALSE 74581
// begin hc_class := 21 ;
74536: LD_ADDR_OWVAR 28
74540: PUSH
74541: LD_INT 21
74543: ST_TO_ADDR
// hc_gallery :=  ;
74544: LD_ADDR_OWVAR 33
74548: PUSH
74549: LD_STRING 
74551: ST_TO_ADDR
// animal := CreateHuman ;
74552: LD_ADDR_VAR 0 12
74556: PUSH
74557: CALL_OW 44
74561: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74562: LD_VAR 0 12
74566: PPUSH
74567: LD_VAR 0 8
74571: PPUSH
74572: LD_INT 0
74574: PPUSH
74575: CALL 76700 0 3
// end ;
74579: GO 74533
74581: POP
74582: POP
// if birds then
74583: LD_VAR 0 1
74587: IFFALSE 74654
// for i = 1 to birds do
74589: LD_ADDR_VAR 0 11
74593: PUSH
74594: DOUBLE
74595: LD_INT 1
74597: DEC
74598: ST_TO_ADDR
74599: LD_VAR 0 1
74603: PUSH
74604: FOR_TO
74605: IFFALSE 74652
// begin hc_class = 18 ;
74607: LD_ADDR_OWVAR 28
74611: PUSH
74612: LD_INT 18
74614: ST_TO_ADDR
// hc_gallery =  ;
74615: LD_ADDR_OWVAR 33
74619: PUSH
74620: LD_STRING 
74622: ST_TO_ADDR
// animal := CreateHuman ;
74623: LD_ADDR_VAR 0 12
74627: PUSH
74628: CALL_OW 44
74632: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74633: LD_VAR 0 12
74637: PPUSH
74638: LD_VAR 0 8
74642: PPUSH
74643: LD_INT 0
74645: PPUSH
74646: CALL 76700 0 3
// end ;
74650: GO 74604
74652: POP
74653: POP
// if tigers then
74654: LD_VAR 0 2
74658: IFFALSE 74742
// for i = 1 to tigers do
74660: LD_ADDR_VAR 0 11
74664: PUSH
74665: DOUBLE
74666: LD_INT 1
74668: DEC
74669: ST_TO_ADDR
74670: LD_VAR 0 2
74674: PUSH
74675: FOR_TO
74676: IFFALSE 74740
// begin hc_class = class_tiger ;
74678: LD_ADDR_OWVAR 28
74682: PUSH
74683: LD_INT 14
74685: ST_TO_ADDR
// hc_gallery =  ;
74686: LD_ADDR_OWVAR 33
74690: PUSH
74691: LD_STRING 
74693: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74694: LD_ADDR_OWVAR 35
74698: PUSH
74699: LD_INT 7
74701: NEG
74702: PPUSH
74703: LD_INT 7
74705: PPUSH
74706: CALL_OW 12
74710: ST_TO_ADDR
// animal := CreateHuman ;
74711: LD_ADDR_VAR 0 12
74715: PUSH
74716: CALL_OW 44
74720: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74721: LD_VAR 0 12
74725: PPUSH
74726: LD_VAR 0 8
74730: PPUSH
74731: LD_INT 0
74733: PPUSH
74734: CALL 76700 0 3
// end ;
74738: GO 74675
74740: POP
74741: POP
// if apemans then
74742: LD_VAR 0 3
74746: IFFALSE 74869
// for i = 1 to apemans do
74748: LD_ADDR_VAR 0 11
74752: PUSH
74753: DOUBLE
74754: LD_INT 1
74756: DEC
74757: ST_TO_ADDR
74758: LD_VAR 0 3
74762: PUSH
74763: FOR_TO
74764: IFFALSE 74867
// begin hc_class = class_apeman ;
74766: LD_ADDR_OWVAR 28
74770: PUSH
74771: LD_INT 12
74773: ST_TO_ADDR
// hc_gallery =  ;
74774: LD_ADDR_OWVAR 33
74778: PUSH
74779: LD_STRING 
74781: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
74782: LD_ADDR_OWVAR 35
74786: PUSH
74787: LD_INT 5
74789: NEG
74790: PPUSH
74791: LD_INT 5
74793: PPUSH
74794: CALL_OW 12
74798: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74799: LD_ADDR_OWVAR 31
74803: PUSH
74804: LD_INT 1
74806: PPUSH
74807: LD_INT 3
74809: PPUSH
74810: CALL_OW 12
74814: PUSH
74815: LD_INT 1
74817: PPUSH
74818: LD_INT 3
74820: PPUSH
74821: CALL_OW 12
74825: PUSH
74826: LD_INT 0
74828: PUSH
74829: LD_INT 0
74831: PUSH
74832: EMPTY
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: ST_TO_ADDR
// animal := CreateHuman ;
74838: LD_ADDR_VAR 0 12
74842: PUSH
74843: CALL_OW 44
74847: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74848: LD_VAR 0 12
74852: PPUSH
74853: LD_VAR 0 8
74857: PPUSH
74858: LD_INT 0
74860: PPUSH
74861: CALL 76700 0 3
// end ;
74865: GO 74763
74867: POP
74868: POP
// if enchidnas then
74869: LD_VAR 0 4
74873: IFFALSE 74940
// for i = 1 to enchidnas do
74875: LD_ADDR_VAR 0 11
74879: PUSH
74880: DOUBLE
74881: LD_INT 1
74883: DEC
74884: ST_TO_ADDR
74885: LD_VAR 0 4
74889: PUSH
74890: FOR_TO
74891: IFFALSE 74938
// begin hc_class = 13 ;
74893: LD_ADDR_OWVAR 28
74897: PUSH
74898: LD_INT 13
74900: ST_TO_ADDR
// hc_gallery =  ;
74901: LD_ADDR_OWVAR 33
74905: PUSH
74906: LD_STRING 
74908: ST_TO_ADDR
// animal := CreateHuman ;
74909: LD_ADDR_VAR 0 12
74913: PUSH
74914: CALL_OW 44
74918: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74919: LD_VAR 0 12
74923: PPUSH
74924: LD_VAR 0 8
74928: PPUSH
74929: LD_INT 0
74931: PPUSH
74932: CALL 76700 0 3
// end ;
74936: GO 74890
74938: POP
74939: POP
// if fishes then
74940: LD_VAR 0 7
74944: IFFALSE 75011
// for i = 1 to fishes do
74946: LD_ADDR_VAR 0 11
74950: PUSH
74951: DOUBLE
74952: LD_INT 1
74954: DEC
74955: ST_TO_ADDR
74956: LD_VAR 0 7
74960: PUSH
74961: FOR_TO
74962: IFFALSE 75009
// begin hc_class = 20 ;
74964: LD_ADDR_OWVAR 28
74968: PUSH
74969: LD_INT 20
74971: ST_TO_ADDR
// hc_gallery =  ;
74972: LD_ADDR_OWVAR 33
74976: PUSH
74977: LD_STRING 
74979: ST_TO_ADDR
// animal := CreateHuman ;
74980: LD_ADDR_VAR 0 12
74984: PUSH
74985: CALL_OW 44
74989: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74990: LD_VAR 0 12
74994: PPUSH
74995: LD_VAR 0 9
74999: PPUSH
75000: LD_INT 0
75002: PPUSH
75003: CALL 76700 0 3
// end ;
75007: GO 74961
75009: POP
75010: POP
// end ;
75011: LD_VAR 0 10
75015: RET
// export function WantHeal ( sci , unit ) ; begin
75016: LD_INT 0
75018: PPUSH
// if GetTaskList ( sci ) > 0 then
75019: LD_VAR 0 1
75023: PPUSH
75024: CALL_OW 437
75028: PUSH
75029: LD_INT 0
75031: GREATER
75032: IFFALSE 75102
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75034: LD_VAR 0 1
75038: PPUSH
75039: CALL_OW 437
75043: PUSH
75044: LD_INT 1
75046: ARRAY
75047: PUSH
75048: LD_INT 1
75050: ARRAY
75051: PUSH
75052: LD_STRING l
75054: EQUAL
75055: PUSH
75056: LD_VAR 0 1
75060: PPUSH
75061: CALL_OW 437
75065: PUSH
75066: LD_INT 1
75068: ARRAY
75069: PUSH
75070: LD_INT 4
75072: ARRAY
75073: PUSH
75074: LD_VAR 0 2
75078: EQUAL
75079: AND
75080: IFFALSE 75092
// result := true else
75082: LD_ADDR_VAR 0 3
75086: PUSH
75087: LD_INT 1
75089: ST_TO_ADDR
75090: GO 75100
// result := false ;
75092: LD_ADDR_VAR 0 3
75096: PUSH
75097: LD_INT 0
75099: ST_TO_ADDR
// end else
75100: GO 75110
// result := false ;
75102: LD_ADDR_VAR 0 3
75106: PUSH
75107: LD_INT 0
75109: ST_TO_ADDR
// end ;
75110: LD_VAR 0 3
75114: RET
// export function HealTarget ( sci ) ; begin
75115: LD_INT 0
75117: PPUSH
// if not sci then
75118: LD_VAR 0 1
75122: NOT
75123: IFFALSE 75127
// exit ;
75125: GO 75192
// result := 0 ;
75127: LD_ADDR_VAR 0 2
75131: PUSH
75132: LD_INT 0
75134: ST_TO_ADDR
// if GetTaskList ( sci ) then
75135: LD_VAR 0 1
75139: PPUSH
75140: CALL_OW 437
75144: IFFALSE 75192
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75146: LD_VAR 0 1
75150: PPUSH
75151: CALL_OW 437
75155: PUSH
75156: LD_INT 1
75158: ARRAY
75159: PUSH
75160: LD_INT 1
75162: ARRAY
75163: PUSH
75164: LD_STRING l
75166: EQUAL
75167: IFFALSE 75192
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75169: LD_ADDR_VAR 0 2
75173: PUSH
75174: LD_VAR 0 1
75178: PPUSH
75179: CALL_OW 437
75183: PUSH
75184: LD_INT 1
75186: ARRAY
75187: PUSH
75188: LD_INT 4
75190: ARRAY
75191: ST_TO_ADDR
// end ;
75192: LD_VAR 0 2
75196: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75197: LD_INT 0
75199: PPUSH
75200: PPUSH
75201: PPUSH
75202: PPUSH
// if not base_units then
75203: LD_VAR 0 1
75207: NOT
75208: IFFALSE 75212
// exit ;
75210: GO 75299
// result := false ;
75212: LD_ADDR_VAR 0 2
75216: PUSH
75217: LD_INT 0
75219: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75220: LD_ADDR_VAR 0 5
75224: PUSH
75225: LD_VAR 0 1
75229: PPUSH
75230: LD_INT 21
75232: PUSH
75233: LD_INT 3
75235: PUSH
75236: EMPTY
75237: LIST
75238: LIST
75239: PPUSH
75240: CALL_OW 72
75244: ST_TO_ADDR
// if not tmp then
75245: LD_VAR 0 5
75249: NOT
75250: IFFALSE 75254
// exit ;
75252: GO 75299
// for i in tmp do
75254: LD_ADDR_VAR 0 3
75258: PUSH
75259: LD_VAR 0 5
75263: PUSH
75264: FOR_IN
75265: IFFALSE 75297
// begin result := EnemyInRange ( i , 22 ) ;
75267: LD_ADDR_VAR 0 2
75271: PUSH
75272: LD_VAR 0 3
75276: PPUSH
75277: LD_INT 22
75279: PPUSH
75280: CALL 73535 0 2
75284: ST_TO_ADDR
// if result then
75285: LD_VAR 0 2
75289: IFFALSE 75295
// exit ;
75291: POP
75292: POP
75293: GO 75299
// end ;
75295: GO 75264
75297: POP
75298: POP
// end ;
75299: LD_VAR 0 2
75303: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
75304: LD_INT 0
75306: PPUSH
75307: PPUSH
// if not units then
75308: LD_VAR 0 1
75312: NOT
75313: IFFALSE 75317
// exit ;
75315: GO 75387
// result := [ ] ;
75317: LD_ADDR_VAR 0 3
75321: PUSH
75322: EMPTY
75323: ST_TO_ADDR
// for i in units do
75324: LD_ADDR_VAR 0 4
75328: PUSH
75329: LD_VAR 0 1
75333: PUSH
75334: FOR_IN
75335: IFFALSE 75385
// if GetTag ( i ) = tag then
75337: LD_VAR 0 4
75341: PPUSH
75342: CALL_OW 110
75346: PUSH
75347: LD_VAR 0 2
75351: EQUAL
75352: IFFALSE 75383
// result := Insert ( result , result + 1 , i ) ;
75354: LD_ADDR_VAR 0 3
75358: PUSH
75359: LD_VAR 0 3
75363: PPUSH
75364: LD_VAR 0 3
75368: PUSH
75369: LD_INT 1
75371: PLUS
75372: PPUSH
75373: LD_VAR 0 4
75377: PPUSH
75378: CALL_OW 2
75382: ST_TO_ADDR
75383: GO 75334
75385: POP
75386: POP
// end ;
75387: LD_VAR 0 3
75391: RET
// export function IsDriver ( un ) ; begin
75392: LD_INT 0
75394: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75395: LD_ADDR_VAR 0 2
75399: PUSH
75400: LD_VAR 0 1
75404: PUSH
75405: LD_INT 55
75407: PUSH
75408: EMPTY
75409: LIST
75410: PPUSH
75411: CALL_OW 69
75415: IN
75416: ST_TO_ADDR
// end ;
75417: LD_VAR 0 2
75421: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75422: LD_INT 0
75424: PPUSH
75425: PPUSH
// list := [ ] ;
75426: LD_ADDR_VAR 0 5
75430: PUSH
75431: EMPTY
75432: ST_TO_ADDR
// case d of 0 :
75433: LD_VAR 0 3
75437: PUSH
75438: LD_INT 0
75440: DOUBLE
75441: EQUAL
75442: IFTRUE 75446
75444: GO 75579
75446: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75447: LD_ADDR_VAR 0 5
75451: PUSH
75452: LD_VAR 0 1
75456: PUSH
75457: LD_INT 4
75459: MINUS
75460: PUSH
75461: LD_VAR 0 2
75465: PUSH
75466: LD_INT 4
75468: MINUS
75469: PUSH
75470: LD_INT 2
75472: PUSH
75473: EMPTY
75474: LIST
75475: LIST
75476: LIST
75477: PUSH
75478: LD_VAR 0 1
75482: PUSH
75483: LD_INT 3
75485: MINUS
75486: PUSH
75487: LD_VAR 0 2
75491: PUSH
75492: LD_INT 1
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: LIST
75499: PUSH
75500: LD_VAR 0 1
75504: PUSH
75505: LD_INT 4
75507: PLUS
75508: PUSH
75509: LD_VAR 0 2
75513: PUSH
75514: LD_INT 4
75516: PUSH
75517: EMPTY
75518: LIST
75519: LIST
75520: LIST
75521: PUSH
75522: LD_VAR 0 1
75526: PUSH
75527: LD_INT 3
75529: PLUS
75530: PUSH
75531: LD_VAR 0 2
75535: PUSH
75536: LD_INT 3
75538: PLUS
75539: PUSH
75540: LD_INT 5
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: LIST
75547: PUSH
75548: LD_VAR 0 1
75552: PUSH
75553: LD_VAR 0 2
75557: PUSH
75558: LD_INT 4
75560: PLUS
75561: PUSH
75562: LD_INT 0
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: LIST
75569: PUSH
75570: EMPTY
75571: LIST
75572: LIST
75573: LIST
75574: LIST
75575: LIST
75576: ST_TO_ADDR
// end ; 1 :
75577: GO 76277
75579: LD_INT 1
75581: DOUBLE
75582: EQUAL
75583: IFTRUE 75587
75585: GO 75720
75587: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75588: LD_ADDR_VAR 0 5
75592: PUSH
75593: LD_VAR 0 1
75597: PUSH
75598: LD_VAR 0 2
75602: PUSH
75603: LD_INT 4
75605: MINUS
75606: PUSH
75607: LD_INT 3
75609: PUSH
75610: EMPTY
75611: LIST
75612: LIST
75613: LIST
75614: PUSH
75615: LD_VAR 0 1
75619: PUSH
75620: LD_INT 3
75622: MINUS
75623: PUSH
75624: LD_VAR 0 2
75628: PUSH
75629: LD_INT 3
75631: MINUS
75632: PUSH
75633: LD_INT 2
75635: PUSH
75636: EMPTY
75637: LIST
75638: LIST
75639: LIST
75640: PUSH
75641: LD_VAR 0 1
75645: PUSH
75646: LD_INT 4
75648: MINUS
75649: PUSH
75650: LD_VAR 0 2
75654: PUSH
75655: LD_INT 1
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: LIST
75662: PUSH
75663: LD_VAR 0 1
75667: PUSH
75668: LD_VAR 0 2
75672: PUSH
75673: LD_INT 3
75675: PLUS
75676: PUSH
75677: LD_INT 0
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: LIST
75684: PUSH
75685: LD_VAR 0 1
75689: PUSH
75690: LD_INT 4
75692: PLUS
75693: PUSH
75694: LD_VAR 0 2
75698: PUSH
75699: LD_INT 4
75701: PLUS
75702: PUSH
75703: LD_INT 5
75705: PUSH
75706: EMPTY
75707: LIST
75708: LIST
75709: LIST
75710: PUSH
75711: EMPTY
75712: LIST
75713: LIST
75714: LIST
75715: LIST
75716: LIST
75717: ST_TO_ADDR
// end ; 2 :
75718: GO 76277
75720: LD_INT 2
75722: DOUBLE
75723: EQUAL
75724: IFTRUE 75728
75726: GO 75857
75728: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75729: LD_ADDR_VAR 0 5
75733: PUSH
75734: LD_VAR 0 1
75738: PUSH
75739: LD_VAR 0 2
75743: PUSH
75744: LD_INT 3
75746: MINUS
75747: PUSH
75748: LD_INT 3
75750: PUSH
75751: EMPTY
75752: LIST
75753: LIST
75754: LIST
75755: PUSH
75756: LD_VAR 0 1
75760: PUSH
75761: LD_INT 4
75763: PLUS
75764: PUSH
75765: LD_VAR 0 2
75769: PUSH
75770: LD_INT 4
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: LIST
75777: PUSH
75778: LD_VAR 0 1
75782: PUSH
75783: LD_VAR 0 2
75787: PUSH
75788: LD_INT 4
75790: PLUS
75791: PUSH
75792: LD_INT 0
75794: PUSH
75795: EMPTY
75796: LIST
75797: LIST
75798: LIST
75799: PUSH
75800: LD_VAR 0 1
75804: PUSH
75805: LD_INT 3
75807: MINUS
75808: PUSH
75809: LD_VAR 0 2
75813: PUSH
75814: LD_INT 1
75816: PUSH
75817: EMPTY
75818: LIST
75819: LIST
75820: LIST
75821: PUSH
75822: LD_VAR 0 1
75826: PUSH
75827: LD_INT 4
75829: MINUS
75830: PUSH
75831: LD_VAR 0 2
75835: PUSH
75836: LD_INT 4
75838: MINUS
75839: PUSH
75840: LD_INT 2
75842: PUSH
75843: EMPTY
75844: LIST
75845: LIST
75846: LIST
75847: PUSH
75848: EMPTY
75849: LIST
75850: LIST
75851: LIST
75852: LIST
75853: LIST
75854: ST_TO_ADDR
// end ; 3 :
75855: GO 76277
75857: LD_INT 3
75859: DOUBLE
75860: EQUAL
75861: IFTRUE 75865
75863: GO 75998
75865: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75866: LD_ADDR_VAR 0 5
75870: PUSH
75871: LD_VAR 0 1
75875: PUSH
75876: LD_INT 3
75878: PLUS
75879: PUSH
75880: LD_VAR 0 2
75884: PUSH
75885: LD_INT 4
75887: PUSH
75888: EMPTY
75889: LIST
75890: LIST
75891: LIST
75892: PUSH
75893: LD_VAR 0 1
75897: PUSH
75898: LD_INT 4
75900: PLUS
75901: PUSH
75902: LD_VAR 0 2
75906: PUSH
75907: LD_INT 4
75909: PLUS
75910: PUSH
75911: LD_INT 5
75913: PUSH
75914: EMPTY
75915: LIST
75916: LIST
75917: LIST
75918: PUSH
75919: LD_VAR 0 1
75923: PUSH
75924: LD_INT 4
75926: MINUS
75927: PUSH
75928: LD_VAR 0 2
75932: PUSH
75933: LD_INT 1
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: LIST
75940: PUSH
75941: LD_VAR 0 1
75945: PUSH
75946: LD_VAR 0 2
75950: PUSH
75951: LD_INT 4
75953: MINUS
75954: PUSH
75955: LD_INT 3
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: LIST
75962: PUSH
75963: LD_VAR 0 1
75967: PUSH
75968: LD_INT 3
75970: MINUS
75971: PUSH
75972: LD_VAR 0 2
75976: PUSH
75977: LD_INT 3
75979: MINUS
75980: PUSH
75981: LD_INT 2
75983: PUSH
75984: EMPTY
75985: LIST
75986: LIST
75987: LIST
75988: PUSH
75989: EMPTY
75990: LIST
75991: LIST
75992: LIST
75993: LIST
75994: LIST
75995: ST_TO_ADDR
// end ; 4 :
75996: GO 76277
75998: LD_INT 4
76000: DOUBLE
76001: EQUAL
76002: IFTRUE 76006
76004: GO 76139
76006: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76007: LD_ADDR_VAR 0 5
76011: PUSH
76012: LD_VAR 0 1
76016: PUSH
76017: LD_VAR 0 2
76021: PUSH
76022: LD_INT 4
76024: PLUS
76025: PUSH
76026: LD_INT 0
76028: PUSH
76029: EMPTY
76030: LIST
76031: LIST
76032: LIST
76033: PUSH
76034: LD_VAR 0 1
76038: PUSH
76039: LD_INT 3
76041: PLUS
76042: PUSH
76043: LD_VAR 0 2
76047: PUSH
76048: LD_INT 3
76050: PLUS
76051: PUSH
76052: LD_INT 5
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: LIST
76059: PUSH
76060: LD_VAR 0 1
76064: PUSH
76065: LD_INT 4
76067: PLUS
76068: PUSH
76069: LD_VAR 0 2
76073: PUSH
76074: LD_INT 4
76076: PUSH
76077: EMPTY
76078: LIST
76079: LIST
76080: LIST
76081: PUSH
76082: LD_VAR 0 1
76086: PUSH
76087: LD_VAR 0 2
76091: PUSH
76092: LD_INT 3
76094: MINUS
76095: PUSH
76096: LD_INT 3
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: LIST
76103: PUSH
76104: LD_VAR 0 1
76108: PUSH
76109: LD_INT 4
76111: MINUS
76112: PUSH
76113: LD_VAR 0 2
76117: PUSH
76118: LD_INT 4
76120: MINUS
76121: PUSH
76122: LD_INT 2
76124: PUSH
76125: EMPTY
76126: LIST
76127: LIST
76128: LIST
76129: PUSH
76130: EMPTY
76131: LIST
76132: LIST
76133: LIST
76134: LIST
76135: LIST
76136: ST_TO_ADDR
// end ; 5 :
76137: GO 76277
76139: LD_INT 5
76141: DOUBLE
76142: EQUAL
76143: IFTRUE 76147
76145: GO 76276
76147: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76148: LD_ADDR_VAR 0 5
76152: PUSH
76153: LD_VAR 0 1
76157: PUSH
76158: LD_INT 4
76160: MINUS
76161: PUSH
76162: LD_VAR 0 2
76166: PUSH
76167: LD_INT 1
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: LIST
76174: PUSH
76175: LD_VAR 0 1
76179: PUSH
76180: LD_VAR 0 2
76184: PUSH
76185: LD_INT 4
76187: MINUS
76188: PUSH
76189: LD_INT 3
76191: PUSH
76192: EMPTY
76193: LIST
76194: LIST
76195: LIST
76196: PUSH
76197: LD_VAR 0 1
76201: PUSH
76202: LD_INT 4
76204: PLUS
76205: PUSH
76206: LD_VAR 0 2
76210: PUSH
76211: LD_INT 4
76213: PLUS
76214: PUSH
76215: LD_INT 5
76217: PUSH
76218: EMPTY
76219: LIST
76220: LIST
76221: LIST
76222: PUSH
76223: LD_VAR 0 1
76227: PUSH
76228: LD_INT 3
76230: PLUS
76231: PUSH
76232: LD_VAR 0 2
76236: PUSH
76237: LD_INT 4
76239: PUSH
76240: EMPTY
76241: LIST
76242: LIST
76243: LIST
76244: PUSH
76245: LD_VAR 0 1
76249: PUSH
76250: LD_VAR 0 2
76254: PUSH
76255: LD_INT 3
76257: PLUS
76258: PUSH
76259: LD_INT 0
76261: PUSH
76262: EMPTY
76263: LIST
76264: LIST
76265: LIST
76266: PUSH
76267: EMPTY
76268: LIST
76269: LIST
76270: LIST
76271: LIST
76272: LIST
76273: ST_TO_ADDR
// end ; end ;
76274: GO 76277
76276: POP
// result := list ;
76277: LD_ADDR_VAR 0 4
76281: PUSH
76282: LD_VAR 0 5
76286: ST_TO_ADDR
// end ;
76287: LD_VAR 0 4
76291: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76292: LD_INT 0
76294: PPUSH
76295: PPUSH
76296: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76297: LD_VAR 0 1
76301: NOT
76302: PUSH
76303: LD_VAR 0 2
76307: PUSH
76308: LD_INT 1
76310: PUSH
76311: LD_INT 2
76313: PUSH
76314: LD_INT 3
76316: PUSH
76317: LD_INT 4
76319: PUSH
76320: EMPTY
76321: LIST
76322: LIST
76323: LIST
76324: LIST
76325: IN
76326: NOT
76327: OR
76328: IFFALSE 76332
// exit ;
76330: GO 76424
// tmp := [ ] ;
76332: LD_ADDR_VAR 0 5
76336: PUSH
76337: EMPTY
76338: ST_TO_ADDR
// for i in units do
76339: LD_ADDR_VAR 0 4
76343: PUSH
76344: LD_VAR 0 1
76348: PUSH
76349: FOR_IN
76350: IFFALSE 76393
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
76352: LD_ADDR_VAR 0 5
76356: PUSH
76357: LD_VAR 0 5
76361: PPUSH
76362: LD_VAR 0 5
76366: PUSH
76367: LD_INT 1
76369: PLUS
76370: PPUSH
76371: LD_VAR 0 4
76375: PPUSH
76376: LD_VAR 0 2
76380: PPUSH
76381: CALL_OW 259
76385: PPUSH
76386: CALL_OW 2
76390: ST_TO_ADDR
76391: GO 76349
76393: POP
76394: POP
// if not tmp then
76395: LD_VAR 0 5
76399: NOT
76400: IFFALSE 76404
// exit ;
76402: GO 76424
// result := SortListByListDesc ( units , tmp ) ;
76404: LD_ADDR_VAR 0 3
76408: PUSH
76409: LD_VAR 0 1
76413: PPUSH
76414: LD_VAR 0 5
76418: PPUSH
76419: CALL_OW 77
76423: ST_TO_ADDR
// end ;
76424: LD_VAR 0 3
76428: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76429: LD_INT 0
76431: PPUSH
76432: PPUSH
76433: PPUSH
// result := false ;
76434: LD_ADDR_VAR 0 3
76438: PUSH
76439: LD_INT 0
76441: ST_TO_ADDR
// x := GetX ( building ) ;
76442: LD_ADDR_VAR 0 4
76446: PUSH
76447: LD_VAR 0 2
76451: PPUSH
76452: CALL_OW 250
76456: ST_TO_ADDR
// y := GetY ( building ) ;
76457: LD_ADDR_VAR 0 5
76461: PUSH
76462: LD_VAR 0 2
76466: PPUSH
76467: CALL_OW 251
76471: ST_TO_ADDR
// if not building or not x or not y then
76472: LD_VAR 0 2
76476: NOT
76477: PUSH
76478: LD_VAR 0 4
76482: NOT
76483: OR
76484: PUSH
76485: LD_VAR 0 5
76489: NOT
76490: OR
76491: IFFALSE 76495
// exit ;
76493: GO 76587
// if GetTaskList ( unit ) then
76495: LD_VAR 0 1
76499: PPUSH
76500: CALL_OW 437
76504: IFFALSE 76587
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76506: LD_STRING e
76508: PUSH
76509: LD_VAR 0 1
76513: PPUSH
76514: CALL_OW 437
76518: PUSH
76519: LD_INT 1
76521: ARRAY
76522: PUSH
76523: LD_INT 1
76525: ARRAY
76526: EQUAL
76527: PUSH
76528: LD_VAR 0 4
76532: PUSH
76533: LD_VAR 0 1
76537: PPUSH
76538: CALL_OW 437
76542: PUSH
76543: LD_INT 1
76545: ARRAY
76546: PUSH
76547: LD_INT 2
76549: ARRAY
76550: EQUAL
76551: AND
76552: PUSH
76553: LD_VAR 0 5
76557: PUSH
76558: LD_VAR 0 1
76562: PPUSH
76563: CALL_OW 437
76567: PUSH
76568: LD_INT 1
76570: ARRAY
76571: PUSH
76572: LD_INT 3
76574: ARRAY
76575: EQUAL
76576: AND
76577: IFFALSE 76587
// result := true end ;
76579: LD_ADDR_VAR 0 3
76583: PUSH
76584: LD_INT 1
76586: ST_TO_ADDR
// end ;
76587: LD_VAR 0 3
76591: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76592: LD_INT 0
76594: PPUSH
// result := false ;
76595: LD_ADDR_VAR 0 4
76599: PUSH
76600: LD_INT 0
76602: ST_TO_ADDR
// if GetTaskList ( unit ) then
76603: LD_VAR 0 1
76607: PPUSH
76608: CALL_OW 437
76612: IFFALSE 76695
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76614: LD_STRING M
76616: PUSH
76617: LD_VAR 0 1
76621: PPUSH
76622: CALL_OW 437
76626: PUSH
76627: LD_INT 1
76629: ARRAY
76630: PUSH
76631: LD_INT 1
76633: ARRAY
76634: EQUAL
76635: PUSH
76636: LD_VAR 0 2
76640: PUSH
76641: LD_VAR 0 1
76645: PPUSH
76646: CALL_OW 437
76650: PUSH
76651: LD_INT 1
76653: ARRAY
76654: PUSH
76655: LD_INT 2
76657: ARRAY
76658: EQUAL
76659: AND
76660: PUSH
76661: LD_VAR 0 3
76665: PUSH
76666: LD_VAR 0 1
76670: PPUSH
76671: CALL_OW 437
76675: PUSH
76676: LD_INT 1
76678: ARRAY
76679: PUSH
76680: LD_INT 3
76682: ARRAY
76683: EQUAL
76684: AND
76685: IFFALSE 76695
// result := true ;
76687: LD_ADDR_VAR 0 4
76691: PUSH
76692: LD_INT 1
76694: ST_TO_ADDR
// end ; end ;
76695: LD_VAR 0 4
76699: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76700: LD_INT 0
76702: PPUSH
76703: PPUSH
76704: PPUSH
76705: PPUSH
// if not unit or not area then
76706: LD_VAR 0 1
76710: NOT
76711: PUSH
76712: LD_VAR 0 2
76716: NOT
76717: OR
76718: IFFALSE 76722
// exit ;
76720: GO 76886
// tmp := AreaToList ( area , i ) ;
76722: LD_ADDR_VAR 0 6
76726: PUSH
76727: LD_VAR 0 2
76731: PPUSH
76732: LD_VAR 0 5
76736: PPUSH
76737: CALL_OW 517
76741: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76742: LD_ADDR_VAR 0 5
76746: PUSH
76747: DOUBLE
76748: LD_INT 1
76750: DEC
76751: ST_TO_ADDR
76752: LD_VAR 0 6
76756: PUSH
76757: LD_INT 1
76759: ARRAY
76760: PUSH
76761: FOR_TO
76762: IFFALSE 76884
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76764: LD_ADDR_VAR 0 7
76768: PUSH
76769: LD_VAR 0 6
76773: PUSH
76774: LD_INT 1
76776: ARRAY
76777: PUSH
76778: LD_VAR 0 5
76782: ARRAY
76783: PUSH
76784: LD_VAR 0 6
76788: PUSH
76789: LD_INT 2
76791: ARRAY
76792: PUSH
76793: LD_VAR 0 5
76797: ARRAY
76798: PUSH
76799: EMPTY
76800: LIST
76801: LIST
76802: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76803: LD_VAR 0 7
76807: PUSH
76808: LD_INT 1
76810: ARRAY
76811: PPUSH
76812: LD_VAR 0 7
76816: PUSH
76817: LD_INT 2
76819: ARRAY
76820: PPUSH
76821: CALL_OW 428
76825: PUSH
76826: LD_INT 0
76828: EQUAL
76829: IFFALSE 76882
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76831: LD_VAR 0 1
76835: PPUSH
76836: LD_VAR 0 7
76840: PUSH
76841: LD_INT 1
76843: ARRAY
76844: PPUSH
76845: LD_VAR 0 7
76849: PUSH
76850: LD_INT 2
76852: ARRAY
76853: PPUSH
76854: LD_VAR 0 3
76858: PPUSH
76859: CALL_OW 48
// result := IsPlaced ( unit ) ;
76863: LD_ADDR_VAR 0 4
76867: PUSH
76868: LD_VAR 0 1
76872: PPUSH
76873: CALL_OW 305
76877: ST_TO_ADDR
// exit ;
76878: POP
76879: POP
76880: GO 76886
// end ; end ;
76882: GO 76761
76884: POP
76885: POP
// end ;
76886: LD_VAR 0 4
76890: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76891: LD_INT 0
76893: PPUSH
76894: PPUSH
76895: PPUSH
// if not side or side > 8 then
76896: LD_VAR 0 1
76900: NOT
76901: PUSH
76902: LD_VAR 0 1
76906: PUSH
76907: LD_INT 8
76909: GREATER
76910: OR
76911: IFFALSE 76915
// exit ;
76913: GO 77102
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76915: LD_ADDR_VAR 0 4
76919: PUSH
76920: LD_INT 22
76922: PUSH
76923: LD_VAR 0 1
76927: PUSH
76928: EMPTY
76929: LIST
76930: LIST
76931: PUSH
76932: LD_INT 21
76934: PUSH
76935: LD_INT 3
76937: PUSH
76938: EMPTY
76939: LIST
76940: LIST
76941: PUSH
76942: EMPTY
76943: LIST
76944: LIST
76945: PPUSH
76946: CALL_OW 69
76950: ST_TO_ADDR
// if not tmp then
76951: LD_VAR 0 4
76955: NOT
76956: IFFALSE 76960
// exit ;
76958: GO 77102
// enable_addtolog := true ;
76960: LD_ADDR_OWVAR 81
76964: PUSH
76965: LD_INT 1
76967: ST_TO_ADDR
// AddToLog ( [ ) ;
76968: LD_STRING [
76970: PPUSH
76971: CALL_OW 561
// for i in tmp do
76975: LD_ADDR_VAR 0 3
76979: PUSH
76980: LD_VAR 0 4
76984: PUSH
76985: FOR_IN
76986: IFFALSE 77093
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76988: LD_STRING [
76990: PUSH
76991: LD_VAR 0 3
76995: PPUSH
76996: CALL_OW 266
77000: STR
77001: PUSH
77002: LD_STRING , 
77004: STR
77005: PUSH
77006: LD_VAR 0 3
77010: PPUSH
77011: CALL_OW 250
77015: STR
77016: PUSH
77017: LD_STRING , 
77019: STR
77020: PUSH
77021: LD_VAR 0 3
77025: PPUSH
77026: CALL_OW 251
77030: STR
77031: PUSH
77032: LD_STRING , 
77034: STR
77035: PUSH
77036: LD_VAR 0 3
77040: PPUSH
77041: CALL_OW 254
77045: STR
77046: PUSH
77047: LD_STRING , 
77049: STR
77050: PUSH
77051: LD_VAR 0 3
77055: PPUSH
77056: LD_INT 1
77058: PPUSH
77059: CALL_OW 268
77063: STR
77064: PUSH
77065: LD_STRING , 
77067: STR
77068: PUSH
77069: LD_VAR 0 3
77073: PPUSH
77074: LD_INT 2
77076: PPUSH
77077: CALL_OW 268
77081: STR
77082: PUSH
77083: LD_STRING ],
77085: STR
77086: PPUSH
77087: CALL_OW 561
// end ;
77091: GO 76985
77093: POP
77094: POP
// AddToLog ( ]; ) ;
77095: LD_STRING ];
77097: PPUSH
77098: CALL_OW 561
// end ;
77102: LD_VAR 0 2
77106: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77107: LD_INT 0
77109: PPUSH
77110: PPUSH
77111: PPUSH
77112: PPUSH
77113: PPUSH
// if not area or not rate or not max then
77114: LD_VAR 0 1
77118: NOT
77119: PUSH
77120: LD_VAR 0 2
77124: NOT
77125: OR
77126: PUSH
77127: LD_VAR 0 4
77131: NOT
77132: OR
77133: IFFALSE 77137
// exit ;
77135: GO 77329
// while 1 do
77137: LD_INT 1
77139: IFFALSE 77329
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77141: LD_ADDR_VAR 0 9
77145: PUSH
77146: LD_VAR 0 1
77150: PPUSH
77151: LD_INT 1
77153: PPUSH
77154: CALL_OW 287
77158: PUSH
77159: LD_INT 10
77161: MUL
77162: ST_TO_ADDR
// r := rate / 10 ;
77163: LD_ADDR_VAR 0 7
77167: PUSH
77168: LD_VAR 0 2
77172: PUSH
77173: LD_INT 10
77175: DIVREAL
77176: ST_TO_ADDR
// time := 1 1$00 ;
77177: LD_ADDR_VAR 0 8
77181: PUSH
77182: LD_INT 2100
77184: ST_TO_ADDR
// if amount < min then
77185: LD_VAR 0 9
77189: PUSH
77190: LD_VAR 0 3
77194: LESS
77195: IFFALSE 77213
// r := r * 2 else
77197: LD_ADDR_VAR 0 7
77201: PUSH
77202: LD_VAR 0 7
77206: PUSH
77207: LD_INT 2
77209: MUL
77210: ST_TO_ADDR
77211: GO 77239
// if amount > max then
77213: LD_VAR 0 9
77217: PUSH
77218: LD_VAR 0 4
77222: GREATER
77223: IFFALSE 77239
// r := r / 2 ;
77225: LD_ADDR_VAR 0 7
77229: PUSH
77230: LD_VAR 0 7
77234: PUSH
77235: LD_INT 2
77237: DIVREAL
77238: ST_TO_ADDR
// time := time / r ;
77239: LD_ADDR_VAR 0 8
77243: PUSH
77244: LD_VAR 0 8
77248: PUSH
77249: LD_VAR 0 7
77253: DIVREAL
77254: ST_TO_ADDR
// if time < 0 then
77255: LD_VAR 0 8
77259: PUSH
77260: LD_INT 0
77262: LESS
77263: IFFALSE 77280
// time := time * - 1 ;
77265: LD_ADDR_VAR 0 8
77269: PUSH
77270: LD_VAR 0 8
77274: PUSH
77275: LD_INT 1
77277: NEG
77278: MUL
77279: ST_TO_ADDR
// wait ( time ) ;
77280: LD_VAR 0 8
77284: PPUSH
77285: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
77289: LD_INT 35
77291: PPUSH
77292: LD_INT 875
77294: PPUSH
77295: CALL_OW 12
77299: PPUSH
77300: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77304: LD_INT 1
77306: PPUSH
77307: LD_INT 5
77309: PPUSH
77310: CALL_OW 12
77314: PPUSH
77315: LD_VAR 0 1
77319: PPUSH
77320: LD_INT 1
77322: PPUSH
77323: CALL_OW 55
// end ;
77327: GO 77137
// end ;
77329: LD_VAR 0 5
77333: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77334: LD_INT 0
77336: PPUSH
77337: PPUSH
77338: PPUSH
77339: PPUSH
77340: PPUSH
77341: PPUSH
77342: PPUSH
77343: PPUSH
// if not turrets or not factories then
77344: LD_VAR 0 1
77348: NOT
77349: PUSH
77350: LD_VAR 0 2
77354: NOT
77355: OR
77356: IFFALSE 77360
// exit ;
77358: GO 77667
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77360: LD_ADDR_VAR 0 10
77364: PUSH
77365: LD_INT 5
77367: PUSH
77368: LD_INT 6
77370: PUSH
77371: EMPTY
77372: LIST
77373: LIST
77374: PUSH
77375: LD_INT 2
77377: PUSH
77378: LD_INT 4
77380: PUSH
77381: EMPTY
77382: LIST
77383: LIST
77384: PUSH
77385: LD_INT 3
77387: PUSH
77388: LD_INT 5
77390: PUSH
77391: EMPTY
77392: LIST
77393: LIST
77394: PUSH
77395: EMPTY
77396: LIST
77397: LIST
77398: LIST
77399: PUSH
77400: LD_INT 24
77402: PUSH
77403: LD_INT 25
77405: PUSH
77406: EMPTY
77407: LIST
77408: LIST
77409: PUSH
77410: LD_INT 23
77412: PUSH
77413: LD_INT 27
77415: PUSH
77416: EMPTY
77417: LIST
77418: LIST
77419: PUSH
77420: EMPTY
77421: LIST
77422: LIST
77423: PUSH
77424: LD_INT 42
77426: PUSH
77427: LD_INT 43
77429: PUSH
77430: EMPTY
77431: LIST
77432: LIST
77433: PUSH
77434: LD_INT 44
77436: PUSH
77437: LD_INT 46
77439: PUSH
77440: EMPTY
77441: LIST
77442: LIST
77443: PUSH
77444: LD_INT 45
77446: PUSH
77447: LD_INT 47
77449: PUSH
77450: EMPTY
77451: LIST
77452: LIST
77453: PUSH
77454: EMPTY
77455: LIST
77456: LIST
77457: LIST
77458: PUSH
77459: EMPTY
77460: LIST
77461: LIST
77462: LIST
77463: ST_TO_ADDR
// result := [ ] ;
77464: LD_ADDR_VAR 0 3
77468: PUSH
77469: EMPTY
77470: ST_TO_ADDR
// for i in turrets do
77471: LD_ADDR_VAR 0 4
77475: PUSH
77476: LD_VAR 0 1
77480: PUSH
77481: FOR_IN
77482: IFFALSE 77665
// begin nat := GetNation ( i ) ;
77484: LD_ADDR_VAR 0 7
77488: PUSH
77489: LD_VAR 0 4
77493: PPUSH
77494: CALL_OW 248
77498: ST_TO_ADDR
// weapon := 0 ;
77499: LD_ADDR_VAR 0 8
77503: PUSH
77504: LD_INT 0
77506: ST_TO_ADDR
// if not nat then
77507: LD_VAR 0 7
77511: NOT
77512: IFFALSE 77516
// continue ;
77514: GO 77481
// for j in list [ nat ] do
77516: LD_ADDR_VAR 0 5
77520: PUSH
77521: LD_VAR 0 10
77525: PUSH
77526: LD_VAR 0 7
77530: ARRAY
77531: PUSH
77532: FOR_IN
77533: IFFALSE 77574
// if GetBWeapon ( i ) = j [ 1 ] then
77535: LD_VAR 0 4
77539: PPUSH
77540: CALL_OW 269
77544: PUSH
77545: LD_VAR 0 5
77549: PUSH
77550: LD_INT 1
77552: ARRAY
77553: EQUAL
77554: IFFALSE 77572
// begin weapon := j [ 2 ] ;
77556: LD_ADDR_VAR 0 8
77560: PUSH
77561: LD_VAR 0 5
77565: PUSH
77566: LD_INT 2
77568: ARRAY
77569: ST_TO_ADDR
// break ;
77570: GO 77574
// end ;
77572: GO 77532
77574: POP
77575: POP
// if not weapon then
77576: LD_VAR 0 8
77580: NOT
77581: IFFALSE 77585
// continue ;
77583: GO 77481
// for k in factories do
77585: LD_ADDR_VAR 0 6
77589: PUSH
77590: LD_VAR 0 2
77594: PUSH
77595: FOR_IN
77596: IFFALSE 77661
// begin weapons := AvailableWeaponList ( k ) ;
77598: LD_ADDR_VAR 0 9
77602: PUSH
77603: LD_VAR 0 6
77607: PPUSH
77608: CALL_OW 478
77612: ST_TO_ADDR
// if not weapons then
77613: LD_VAR 0 9
77617: NOT
77618: IFFALSE 77622
// continue ;
77620: GO 77595
// if weapon in weapons then
77622: LD_VAR 0 8
77626: PUSH
77627: LD_VAR 0 9
77631: IN
77632: IFFALSE 77659
// begin result := [ i , weapon ] ;
77634: LD_ADDR_VAR 0 3
77638: PUSH
77639: LD_VAR 0 4
77643: PUSH
77644: LD_VAR 0 8
77648: PUSH
77649: EMPTY
77650: LIST
77651: LIST
77652: ST_TO_ADDR
// exit ;
77653: POP
77654: POP
77655: POP
77656: POP
77657: GO 77667
// end ; end ;
77659: GO 77595
77661: POP
77662: POP
// end ;
77663: GO 77481
77665: POP
77666: POP
// end ;
77667: LD_VAR 0 3
77671: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77672: LD_INT 0
77674: PPUSH
// if not side or side > 8 then
77675: LD_VAR 0 3
77679: NOT
77680: PUSH
77681: LD_VAR 0 3
77685: PUSH
77686: LD_INT 8
77688: GREATER
77689: OR
77690: IFFALSE 77694
// exit ;
77692: GO 77753
// if not range then
77694: LD_VAR 0 4
77698: NOT
77699: IFFALSE 77710
// range := - 12 ;
77701: LD_ADDR_VAR 0 4
77705: PUSH
77706: LD_INT 12
77708: NEG
77709: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77710: LD_VAR 0 1
77714: PPUSH
77715: LD_VAR 0 2
77719: PPUSH
77720: LD_VAR 0 3
77724: PPUSH
77725: LD_VAR 0 4
77729: PPUSH
77730: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77734: LD_VAR 0 1
77738: PPUSH
77739: LD_VAR 0 2
77743: PPUSH
77744: LD_VAR 0 3
77748: PPUSH
77749: CALL_OW 331
// end ;
77753: LD_VAR 0 5
77757: RET
// export function Video ( mode ) ; begin
77758: LD_INT 0
77760: PPUSH
// ingame_video = mode ;
77761: LD_ADDR_OWVAR 52
77765: PUSH
77766: LD_VAR 0 1
77770: ST_TO_ADDR
// interface_hidden = mode ;
77771: LD_ADDR_OWVAR 54
77775: PUSH
77776: LD_VAR 0 1
77780: ST_TO_ADDR
// end ;
77781: LD_VAR 0 2
77785: RET
// export function Join ( array , element ) ; begin
77786: LD_INT 0
77788: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77789: LD_ADDR_VAR 0 3
77793: PUSH
77794: LD_VAR 0 1
77798: PPUSH
77799: LD_VAR 0 1
77803: PUSH
77804: LD_INT 1
77806: PLUS
77807: PPUSH
77808: LD_VAR 0 2
77812: PPUSH
77813: CALL_OW 1
77817: ST_TO_ADDR
// end ;
77818: LD_VAR 0 3
77822: RET
// export function JoinUnion ( array , element ) ; begin
77823: LD_INT 0
77825: PPUSH
// result := array union element ;
77826: LD_ADDR_VAR 0 3
77830: PUSH
77831: LD_VAR 0 1
77835: PUSH
77836: LD_VAR 0 2
77840: UNION
77841: ST_TO_ADDR
// end ;
77842: LD_VAR 0 3
77846: RET
// export function GetBehemoths ( side ) ; begin
77847: LD_INT 0
77849: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
77850: LD_ADDR_VAR 0 2
77854: PUSH
77855: LD_INT 22
77857: PUSH
77858: LD_VAR 0 1
77862: PUSH
77863: EMPTY
77864: LIST
77865: LIST
77866: PUSH
77867: LD_INT 31
77869: PUSH
77870: LD_INT 25
77872: PUSH
77873: EMPTY
77874: LIST
77875: LIST
77876: PUSH
77877: EMPTY
77878: LIST
77879: LIST
77880: PPUSH
77881: CALL_OW 69
77885: ST_TO_ADDR
// end ;
77886: LD_VAR 0 2
77890: RET
// export function Shuffle ( array ) ; var i , index ; begin
77891: LD_INT 0
77893: PPUSH
77894: PPUSH
77895: PPUSH
// result := [ ] ;
77896: LD_ADDR_VAR 0 2
77900: PUSH
77901: EMPTY
77902: ST_TO_ADDR
// if not array then
77903: LD_VAR 0 1
77907: NOT
77908: IFFALSE 77912
// exit ;
77910: GO 78011
// Randomize ;
77912: CALL_OW 10
// for i = array downto 1 do
77916: LD_ADDR_VAR 0 3
77920: PUSH
77921: DOUBLE
77922: LD_VAR 0 1
77926: INC
77927: ST_TO_ADDR
77928: LD_INT 1
77930: PUSH
77931: FOR_DOWNTO
77932: IFFALSE 78009
// begin index := rand ( 1 , array ) ;
77934: LD_ADDR_VAR 0 4
77938: PUSH
77939: LD_INT 1
77941: PPUSH
77942: LD_VAR 0 1
77946: PPUSH
77947: CALL_OW 12
77951: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77952: LD_ADDR_VAR 0 2
77956: PUSH
77957: LD_VAR 0 2
77961: PPUSH
77962: LD_VAR 0 2
77966: PUSH
77967: LD_INT 1
77969: PLUS
77970: PPUSH
77971: LD_VAR 0 1
77975: PUSH
77976: LD_VAR 0 4
77980: ARRAY
77981: PPUSH
77982: CALL_OW 2
77986: ST_TO_ADDR
// array := Delete ( array , index ) ;
77987: LD_ADDR_VAR 0 1
77991: PUSH
77992: LD_VAR 0 1
77996: PPUSH
77997: LD_VAR 0 4
78001: PPUSH
78002: CALL_OW 3
78006: ST_TO_ADDR
// end ;
78007: GO 77931
78009: POP
78010: POP
// end ;
78011: LD_VAR 0 2
78015: RET
// export function GetBaseMaterials ( base ) ; begin
78016: LD_INT 0
78018: PPUSH
// result := [ 0 , 0 , 0 ] ;
78019: LD_ADDR_VAR 0 2
78023: PUSH
78024: LD_INT 0
78026: PUSH
78027: LD_INT 0
78029: PUSH
78030: LD_INT 0
78032: PUSH
78033: EMPTY
78034: LIST
78035: LIST
78036: LIST
78037: ST_TO_ADDR
// if not base then
78038: LD_VAR 0 1
78042: NOT
78043: IFFALSE 78047
// exit ;
78045: GO 78096
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78047: LD_ADDR_VAR 0 2
78051: PUSH
78052: LD_VAR 0 1
78056: PPUSH
78057: LD_INT 1
78059: PPUSH
78060: CALL_OW 275
78064: PUSH
78065: LD_VAR 0 1
78069: PPUSH
78070: LD_INT 2
78072: PPUSH
78073: CALL_OW 275
78077: PUSH
78078: LD_VAR 0 1
78082: PPUSH
78083: LD_INT 3
78085: PPUSH
78086: CALL_OW 275
78090: PUSH
78091: EMPTY
78092: LIST
78093: LIST
78094: LIST
78095: ST_TO_ADDR
// end ;
78096: LD_VAR 0 2
78100: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78101: LD_INT 0
78103: PPUSH
78104: PPUSH
// result := array ;
78105: LD_ADDR_VAR 0 3
78109: PUSH
78110: LD_VAR 0 1
78114: ST_TO_ADDR
// if size > 0 then
78115: LD_VAR 0 2
78119: PUSH
78120: LD_INT 0
78122: GREATER
78123: IFFALSE 78169
// for i := array downto size do
78125: LD_ADDR_VAR 0 4
78129: PUSH
78130: DOUBLE
78131: LD_VAR 0 1
78135: INC
78136: ST_TO_ADDR
78137: LD_VAR 0 2
78141: PUSH
78142: FOR_DOWNTO
78143: IFFALSE 78167
// result := Delete ( result , result ) ;
78145: LD_ADDR_VAR 0 3
78149: PUSH
78150: LD_VAR 0 3
78154: PPUSH
78155: LD_VAR 0 3
78159: PPUSH
78160: CALL_OW 3
78164: ST_TO_ADDR
78165: GO 78142
78167: POP
78168: POP
// end ;
78169: LD_VAR 0 3
78173: RET
// export function ComExit ( unit ) ; var tmp ; begin
78174: LD_INT 0
78176: PPUSH
78177: PPUSH
// if not IsInUnit ( unit ) then
78178: LD_VAR 0 1
78182: PPUSH
78183: CALL_OW 310
78187: NOT
78188: IFFALSE 78192
// exit ;
78190: GO 78252
// tmp := IsInUnit ( unit ) ;
78192: LD_ADDR_VAR 0 3
78196: PUSH
78197: LD_VAR 0 1
78201: PPUSH
78202: CALL_OW 310
78206: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78207: LD_VAR 0 3
78211: PPUSH
78212: CALL_OW 247
78216: PUSH
78217: LD_INT 2
78219: EQUAL
78220: IFFALSE 78233
// ComExitVehicle ( unit ) else
78222: LD_VAR 0 1
78226: PPUSH
78227: CALL_OW 121
78231: GO 78242
// ComExitBuilding ( unit ) ;
78233: LD_VAR 0 1
78237: PPUSH
78238: CALL_OW 122
// result := tmp ;
78242: LD_ADDR_VAR 0 2
78246: PUSH
78247: LD_VAR 0 3
78251: ST_TO_ADDR
// end ;
78252: LD_VAR 0 2
78256: RET
// export function ResetHc ; begin
78257: LD_INT 0
78259: PPUSH
// InitHc ;
78260: CALL_OW 19
// hc_importance := 0 ;
78264: LD_ADDR_OWVAR 32
78268: PUSH
78269: LD_INT 0
78271: ST_TO_ADDR
// end ;
78272: LD_VAR 0 1
78276: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78277: LD_INT 0
78279: PPUSH
78280: PPUSH
78281: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78282: LD_ADDR_VAR 0 6
78286: PUSH
78287: LD_VAR 0 1
78291: PUSH
78292: LD_VAR 0 3
78296: PLUS
78297: PUSH
78298: LD_INT 2
78300: DIV
78301: ST_TO_ADDR
// if _x < 0 then
78302: LD_VAR 0 6
78306: PUSH
78307: LD_INT 0
78309: LESS
78310: IFFALSE 78327
// _x := _x * - 1 ;
78312: LD_ADDR_VAR 0 6
78316: PUSH
78317: LD_VAR 0 6
78321: PUSH
78322: LD_INT 1
78324: NEG
78325: MUL
78326: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78327: LD_ADDR_VAR 0 7
78331: PUSH
78332: LD_VAR 0 2
78336: PUSH
78337: LD_VAR 0 4
78341: PLUS
78342: PUSH
78343: LD_INT 2
78345: DIV
78346: ST_TO_ADDR
// if _y < 0 then
78347: LD_VAR 0 7
78351: PUSH
78352: LD_INT 0
78354: LESS
78355: IFFALSE 78372
// _y := _y * - 1 ;
78357: LD_ADDR_VAR 0 7
78361: PUSH
78362: LD_VAR 0 7
78366: PUSH
78367: LD_INT 1
78369: NEG
78370: MUL
78371: ST_TO_ADDR
// result := [ _x , _y ] ;
78372: LD_ADDR_VAR 0 5
78376: PUSH
78377: LD_VAR 0 6
78381: PUSH
78382: LD_VAR 0 7
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: ST_TO_ADDR
// end ;
78391: LD_VAR 0 5
78395: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78396: LD_INT 0
78398: PPUSH
78399: PPUSH
78400: PPUSH
78401: PPUSH
// task := GetTaskList ( unit ) ;
78402: LD_ADDR_VAR 0 7
78406: PUSH
78407: LD_VAR 0 1
78411: PPUSH
78412: CALL_OW 437
78416: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78417: LD_VAR 0 7
78421: NOT
78422: PUSH
78423: LD_VAR 0 1
78427: PPUSH
78428: LD_VAR 0 2
78432: PPUSH
78433: CALL_OW 308
78437: NOT
78438: AND
78439: IFFALSE 78443
// exit ;
78441: GO 78561
// if IsInArea ( unit , area ) then
78443: LD_VAR 0 1
78447: PPUSH
78448: LD_VAR 0 2
78452: PPUSH
78453: CALL_OW 308
78457: IFFALSE 78475
// begin ComMoveToArea ( unit , goAway ) ;
78459: LD_VAR 0 1
78463: PPUSH
78464: LD_VAR 0 3
78468: PPUSH
78469: CALL_OW 113
// exit ;
78473: GO 78561
// end ; if task [ 1 ] [ 1 ] <> M then
78475: LD_VAR 0 7
78479: PUSH
78480: LD_INT 1
78482: ARRAY
78483: PUSH
78484: LD_INT 1
78486: ARRAY
78487: PUSH
78488: LD_STRING M
78490: NONEQUAL
78491: IFFALSE 78495
// exit ;
78493: GO 78561
// x := task [ 1 ] [ 2 ] ;
78495: LD_ADDR_VAR 0 5
78499: PUSH
78500: LD_VAR 0 7
78504: PUSH
78505: LD_INT 1
78507: ARRAY
78508: PUSH
78509: LD_INT 2
78511: ARRAY
78512: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78513: LD_ADDR_VAR 0 6
78517: PUSH
78518: LD_VAR 0 7
78522: PUSH
78523: LD_INT 1
78525: ARRAY
78526: PUSH
78527: LD_INT 3
78529: ARRAY
78530: ST_TO_ADDR
// if InArea ( x , y , area ) then
78531: LD_VAR 0 5
78535: PPUSH
78536: LD_VAR 0 6
78540: PPUSH
78541: LD_VAR 0 2
78545: PPUSH
78546: CALL_OW 309
78550: IFFALSE 78561
// ComStop ( unit ) ;
78552: LD_VAR 0 1
78556: PPUSH
78557: CALL_OW 141
// end ;
78561: LD_VAR 0 4
78565: RET
// export function Abs ( value ) ; begin
78566: LD_INT 0
78568: PPUSH
// result := value ;
78569: LD_ADDR_VAR 0 2
78573: PUSH
78574: LD_VAR 0 1
78578: ST_TO_ADDR
// if value < 0 then
78579: LD_VAR 0 1
78583: PUSH
78584: LD_INT 0
78586: LESS
78587: IFFALSE 78604
// result := value * - 1 ;
78589: LD_ADDR_VAR 0 2
78593: PUSH
78594: LD_VAR 0 1
78598: PUSH
78599: LD_INT 1
78601: NEG
78602: MUL
78603: ST_TO_ADDR
// end ; end_of_file
78604: LD_VAR 0 2
78608: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78609: LD_VAR 0 1
78613: PUSH
78614: LD_INT 200
78616: DOUBLE
78617: GREATEREQUAL
78618: IFFALSE 78626
78620: LD_INT 299
78622: DOUBLE
78623: LESSEQUAL
78624: IFTRUE 78628
78626: GO 78660
78628: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78629: LD_VAR 0 1
78633: PPUSH
78634: LD_VAR 0 2
78638: PPUSH
78639: LD_VAR 0 3
78643: PPUSH
78644: LD_VAR 0 4
78648: PPUSH
78649: LD_VAR 0 5
78653: PPUSH
78654: CALL 37922 0 5
78658: GO 78737
78660: LD_INT 300
78662: DOUBLE
78663: GREATEREQUAL
78664: IFFALSE 78672
78666: LD_INT 399
78668: DOUBLE
78669: LESSEQUAL
78670: IFTRUE 78674
78672: GO 78736
78674: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78675: LD_VAR 0 1
78679: PPUSH
78680: LD_VAR 0 2
78684: PPUSH
78685: LD_VAR 0 3
78689: PPUSH
78690: LD_VAR 0 4
78694: PPUSH
78695: LD_VAR 0 5
78699: PPUSH
78700: LD_VAR 0 6
78704: PPUSH
78705: LD_VAR 0 7
78709: PPUSH
78710: LD_VAR 0 8
78714: PPUSH
78715: LD_VAR 0 9
78719: PPUSH
78720: LD_VAR 0 10
78724: PPUSH
78725: LD_VAR 0 11
78729: PPUSH
78730: CALL 35828 0 11
78734: GO 78737
78736: POP
// end ;
78737: PPOPN 11
78739: END
