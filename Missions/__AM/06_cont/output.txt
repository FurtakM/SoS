// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 ] [ Difficulty ] ;
 177: LD_ADDR_EXP 48
 181: PUSH
 182: LD_INT 3
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: LD_INT 6
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: LIST
 195: PUSH
 196: LD_OWVAR 67
 200: ARRAY
 201: ST_TO_ADDR
// sendedConvoys = 0 ;
 202: LD_ADDR_EXP 39
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// tamedApemans = 0 ;
 210: LD_ADDR_EXP 32
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ignoreTarget := [ ] ;
 218: LD_ADDR_EXP 45
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// arrivals := [ ] ;
 225: LD_ADDR_EXP 46
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// unitLost = 0 ;
 232: LD_ADDR_EXP 30
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 240: LD_ADDR_EXP 31
 244: PUSH
 245: EMPTY
 246: ST_TO_ADDR
// russianTanks = [ ] ;
 247: LD_ADDR_EXP 36
 251: PUSH
 252: EMPTY
 253: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 254: LD_ADDR_EXP 37
 258: PUSH
 259: EMPTY
 260: ST_TO_ADDR
// disableHealAI = 0 ;
 261: LD_ADDR_EXP 33
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// strings = [ ] ;
 269: LD_ADDR_EXP 27
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 276: LD_INT 4
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: CALL_OW 343
// PrepareDifficulty ;
 286: CALL 6622 0 0
// PrepareNature ;
 290: CALL 23906 0 0
// PrepareRussian ;
 294: CALL 5782 0 0
// PrepareVehicles ;
 298: CALL 1586 0 0
// PrepareHeroes ;
 302: CALL 594 0 0
// PrepareOthers ;
 306: CALL 2007 0 0
// PreparePlayerApemans ;
 310: CALL 2149 0 0
// end ;
 314: END
// every 0 0$1 trigger debugMode do var i ;
 315: LD_EXP 42
 319: IFFALSE 546
 321: GO 323
 323: DISABLE
 324: LD_INT 0
 326: PPUSH
// begin enable ;
 327: ENABLE
// fogoff ( true ) ;
 328: LD_INT 1
 330: PPUSH
 331: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 21
 352: PUSH
 353: LD_INT 1
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 386
// SetLives ( i , 1000 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: LD_INT 1000
 379: PPUSH
 380: CALL_OW 234
 384: GO 369
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 30
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: PUSH
 422: FOR_IN
 423: IFFALSE 447
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 425: LD_VAR 0 1
 429: PPUSH
 430: CALL_OW 274
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_INT 9999
 440: PPUSH
 441: CALL_OW 277
 445: GO 422
 447: POP
 448: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 449: LD_ADDR_VAR 0 1
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// if IsSelected ( rudepo ) then
 510: LD_INT 2
 512: PPUSH
 513: CALL_OW 306
 517: IFFALSE 527
// your_side = 3 ;
 519: LD_ADDR_OWVAR 2
 523: PUSH
 524: LD_INT 3
 526: ST_TO_ADDR
// if IsSelected ( JMM ) then
 527: LD_EXP 1
 531: PPUSH
 532: CALL_OW 306
 536: IFFALSE 546
// your_side = 1 ;
 538: LD_ADDR_OWVAR 2
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// end ;
 546: PPOPN 1
 548: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 34
 561: PUSH
 562: LD_INT 12
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: LD_INT 3
 580: GREATEREQUAL
 581: IFFALSE 593
 583: GO 585
 585: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 586: LD_STRING ACH_FULLCARGO
 588: PPUSH
 589: CALL_OW 543
 593: END
// export function PrepareHeroes ; var veh ; begin
 594: LD_INT 0
 596: PPUSH
 597: PPUSH
// uc_side = 1 ;
 598: LD_ADDR_OWVAR 20
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// uc_nation = 1 ;
 606: LD_ADDR_OWVAR 21
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 614: LD_ADDR_EXP 1
 618: PUSH
 619: LD_STRING JMM
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: CALL 6184 0 2
 629: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 630: LD_ADDR_EXP 14
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL 6184 0 2
 645: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 646: LD_ADDR_EXP 10
 650: PUSH
 651: LD_STRING DeltaDoctor
 653: PPUSH
 654: CALL_OW 34
 658: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 659: LD_ADDR_VAR 0 2
 663: PUSH
 664: LD_INT 22
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 21
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 58
 686: PUSH
 687: EMPTY
 688: LIST
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: PPUSH
 695: CALL_OW 69
 699: ST_TO_ADDR
// if veh > 0 then
 700: LD_VAR 0 2
 704: PUSH
 705: LD_INT 0
 707: GREATER
 708: IFFALSE 730
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 710: LD_EXP 1
 714: PPUSH
 715: LD_VAR 0 2
 719: PUSH
 720: LD_INT 1
 722: ARRAY
 723: PPUSH
 724: CALL_OW 52
// end else
 728: GO 745
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 730: LD_EXP 1
 734: PPUSH
 735: LD_INT 2
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 745: LD_STRING LisaIn06
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 30
 755: PUSH
 756: LD_INT 1
 758: EQUAL
 759: IFFALSE 863
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 761: LD_ADDR_VAR 0 2
 765: PUSH
 766: LD_INT 22
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 21
 778: PUSH
 779: LD_INT 2
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: PUSH
 786: LD_INT 58
 788: PUSH
 789: EMPTY
 790: LIST
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: PPUSH
 797: CALL_OW 69
 801: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 802: LD_ADDR_EXP 2
 806: PUSH
 807: LD_STRING Lisa
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL 6184 0 2
 817: ST_TO_ADDR
// if veh > 0 then
 818: LD_VAR 0 2
 822: PUSH
 823: LD_INT 0
 825: GREATER
 826: IFFALSE 848
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_VAR 0 2
 837: PUSH
 838: LD_INT 1
 840: ARRAY
 841: PPUSH
 842: CALL_OW 52
// end else
 846: GO 863
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 848: LD_EXP 2
 852: PPUSH
 853: LD_INT 2
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 863: LD_STRING BobbyIn06
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 30
 873: PUSH
 874: LD_INT 1
 876: EQUAL
 877: IFFALSE 981
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 879: LD_ADDR_VAR 0 2
 883: PUSH
 884: LD_INT 22
 886: PUSH
 887: LD_INT 1
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 21
 896: PUSH
 897: LD_INT 2
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 58
 906: PUSH
 907: EMPTY
 908: LIST
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 920: LD_ADDR_EXP 3
 924: PUSH
 925: LD_STRING Bobby
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: CALL 6184 0 2
 935: ST_TO_ADDR
// if veh > 0 then
 936: LD_VAR 0 2
 940: PUSH
 941: LD_INT 0
 943: GREATER
 944: IFFALSE 966
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 946: LD_EXP 3
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 1
 958: ARRAY
 959: PPUSH
 960: CALL_OW 52
// end else
 964: GO 981
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 966: LD_EXP 3
 970: PPUSH
 971: LD_INT 2
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 981: LD_STRING CyrusIn06
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 30
 991: PUSH
 992: LD_INT 1
 994: EQUAL
 995: IFFALSE 1099
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 997: LD_ADDR_VAR 0 2
1001: PUSH
1002: LD_INT 22
1004: PUSH
1005: LD_INT 1
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 21
1014: PUSH
1015: LD_INT 2
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: LD_INT 58
1024: PUSH
1025: EMPTY
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 69
1037: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
1038: LD_ADDR_EXP 4
1042: PUSH
1043: LD_STRING Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6184 0 2
1053: ST_TO_ADDR
// if veh > 0 then
1054: LD_VAR 0 2
1058: PUSH
1059: LD_INT 0
1061: GREATER
1062: IFFALSE 1084
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1064: LD_EXP 4
1068: PPUSH
1069: LD_VAR 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: CALL_OW 52
// end else
1082: GO 1099
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1084: LD_EXP 4
1088: PPUSH
1089: LD_INT 2
1091: PPUSH
1092: LD_INT 0
1094: PPUSH
1095: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1099: LD_STRING FrankIn06
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL_OW 30
1109: PUSH
1110: LD_INT 1
1112: EQUAL
1113: IFFALSE 1217
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1115: LD_ADDR_VAR 0 2
1119: PUSH
1120: LD_INT 22
1122: PUSH
1123: LD_INT 1
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 21
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 58
1142: PUSH
1143: EMPTY
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PPUSH
1151: CALL_OW 69
1155: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1156: LD_ADDR_EXP 5
1160: PUSH
1161: LD_STRING Frank
1163: PPUSH
1164: LD_INT 1
1166: PPUSH
1167: CALL 6184 0 2
1171: ST_TO_ADDR
// if veh > 0 then
1172: LD_VAR 0 2
1176: PUSH
1177: LD_INT 0
1179: GREATER
1180: IFFALSE 1202
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1182: LD_EXP 5
1186: PPUSH
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: CALL_OW 52
// end else
1200: GO 1217
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1202: LD_EXP 5
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1217: LD_STRING BrownIn06
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 30
1227: PUSH
1228: LD_INT 1
1230: EQUAL
1231: IFFALSE 1335
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 2
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 58
1260: PUSH
1261: EMPTY
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PPUSH
1269: CALL_OW 69
1273: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1274: LD_ADDR_EXP 6
1278: PUSH
1279: LD_STRING Brown
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: CALL 6184 0 2
1289: ST_TO_ADDR
// if veh > 0 then
1290: LD_VAR 0 2
1294: PUSH
1295: LD_INT 0
1297: GREATER
1298: IFFALSE 1320
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1300: LD_EXP 6
1304: PPUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 52
// end else
1318: GO 1335
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1320: LD_EXP 6
1324: PPUSH
1325: LD_INT 2
1327: PPUSH
1328: LD_INT 0
1330: PPUSH
1331: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1335: LD_STRING DonaldsonIn06
1337: PPUSH
1338: LD_INT 0
1340: PPUSH
1341: CALL_OW 30
1345: PUSH
1346: LD_INT 1
1348: EQUAL
1349: IFFALSE 1453
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1351: LD_ADDR_VAR 0 2
1355: PUSH
1356: LD_INT 22
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 21
1368: PUSH
1369: LD_INT 2
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 58
1378: PUSH
1379: EMPTY
1380: LIST
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: PPUSH
1387: CALL_OW 69
1391: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1392: LD_ADDR_EXP 7
1396: PUSH
1397: LD_STRING Donaldson
1399: PPUSH
1400: LD_INT 1
1402: PPUSH
1403: CALL 6184 0 2
1407: ST_TO_ADDR
// if veh > 0 then
1408: LD_VAR 0 2
1412: PUSH
1413: LD_INT 0
1415: GREATER
1416: IFFALSE 1438
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1418: LD_EXP 7
1422: PPUSH
1423: LD_VAR 0 2
1427: PUSH
1428: LD_INT 1
1430: ARRAY
1431: PPUSH
1432: CALL_OW 52
// end else
1436: GO 1453
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1438: LD_EXP 7
1442: PPUSH
1443: LD_INT 2
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1453: LD_STRING GladstoneIn06
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 30
1463: PUSH
1464: LD_INT 1
1466: EQUAL
1467: IFFALSE 1571
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1469: LD_ADDR_VAR 0 2
1473: PUSH
1474: LD_INT 22
1476: PUSH
1477: LD_INT 1
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 21
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 58
1496: PUSH
1497: EMPTY
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: PPUSH
1505: CALL_OW 69
1509: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1510: LD_ADDR_EXP 8
1514: PUSH
1515: LD_STRING Gladstone
1517: PPUSH
1518: LD_INT 1
1520: PPUSH
1521: CALL 6184 0 2
1525: ST_TO_ADDR
// if veh > 0 then
1526: LD_VAR 0 2
1530: PUSH
1531: LD_INT 0
1533: GREATER
1534: IFFALSE 1556
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1536: LD_EXP 8
1540: PPUSH
1541: LD_VAR 0 2
1545: PUSH
1546: LD_INT 1
1548: ARRAY
1549: PPUSH
1550: CALL_OW 52
// end else
1554: GO 1571
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1556: LD_EXP 8
1560: PPUSH
1561: LD_INT 2
1563: PPUSH
1564: LD_INT 0
1566: PPUSH
1567: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1571: LD_INT 66
1573: PPUSH
1574: LD_INT 4
1576: PPUSH
1577: CALL_OW 86
// end ;
1581: LD_VAR 0 1
1585: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1586: LD_INT 0
1588: PPUSH
1589: PPUSH
1590: PPUSH
1591: PPUSH
1592: PPUSH
1593: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1594: LD_ADDR_VAR 0 5
1598: PUSH
1599: LD_STRING 06_VehiclesIn06_1
1601: PPUSH
1602: EMPTY
1603: PPUSH
1604: CALL_OW 30
1608: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1609: LD_ADDR_EXP 40
1613: PUSH
1614: LD_STRING 06_ResourcesInCargo06_1
1616: PPUSH
1617: EMPTY
1618: PPUSH
1619: CALL_OW 30
1623: ST_TO_ADDR
// cargoList = [ ] ;
1624: LD_ADDR_VAR 0 6
1628: PUSH
1629: EMPTY
1630: ST_TO_ADDR
// uc_side = 1 ;
1631: LD_ADDR_OWVAR 20
1635: PUSH
1636: LD_INT 1
1638: ST_TO_ADDR
// if vehicles > 0 then
1639: LD_VAR 0 5
1643: PUSH
1644: LD_INT 0
1646: GREATER
1647: IFFALSE 2002
// begin for i := 1 to vehicles do
1649: LD_ADDR_VAR 0 2
1653: PUSH
1654: DOUBLE
1655: LD_INT 1
1657: DEC
1658: ST_TO_ADDR
1659: LD_VAR 0 5
1663: PUSH
1664: FOR_TO
1665: IFFALSE 1814
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1667: LD_ADDR_OWVAR 21
1671: PUSH
1672: LD_VAR 0 5
1676: PUSH
1677: LD_VAR 0 2
1681: ARRAY
1682: PUSH
1683: LD_INT 1
1685: ARRAY
1686: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1687: LD_ADDR_OWVAR 37
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_VAR 0 2
1701: ARRAY
1702: PUSH
1703: LD_INT 2
1705: ARRAY
1706: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1707: LD_ADDR_OWVAR 39
1711: PUSH
1712: LD_VAR 0 5
1716: PUSH
1717: LD_VAR 0 2
1721: ARRAY
1722: PUSH
1723: LD_INT 3
1725: ARRAY
1726: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1727: LD_ADDR_OWVAR 38
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_VAR 0 2
1741: ARRAY
1742: PUSH
1743: LD_INT 4
1745: ARRAY
1746: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1747: LD_ADDR_OWVAR 40
1751: PUSH
1752: LD_VAR 0 5
1756: PUSH
1757: LD_VAR 0 2
1761: ARRAY
1762: PUSH
1763: LD_INT 5
1765: ARRAY
1766: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1767: LD_ADDR_OWVAR 41
1771: PUSH
1772: LD_INT 40
1774: ST_TO_ADDR
// veh = CreateVehicle ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: CALL_OW 45
1784: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1785: LD_VAR 0 4
1789: PPUSH
1790: LD_INT 3
1792: PPUSH
1793: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1797: LD_VAR 0 4
1801: PPUSH
1802: LD_INT 2
1804: PPUSH
1805: LD_INT 0
1807: PPUSH
1808: CALL_OW 49
// end ;
1812: GO 1664
1814: POP
1815: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1816: LD_ADDR_VAR 0 6
1820: PUSH
1821: LD_INT 22
1823: PUSH
1824: LD_INT 1
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 21
1833: PUSH
1834: LD_INT 2
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 34
1843: PUSH
1844: LD_INT 12
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL_OW 69
1860: ST_TO_ADDR
// if cargoList > 0 then
1861: LD_VAR 0 6
1865: PUSH
1866: LD_INT 0
1868: GREATER
1869: IFFALSE 2002
// for i = 1 to cargoList do
1871: LD_ADDR_VAR 0 2
1875: PUSH
1876: DOUBLE
1877: LD_INT 1
1879: DEC
1880: ST_TO_ADDR
1881: LD_VAR 0 6
1885: PUSH
1886: FOR_TO
1887: IFFALSE 2000
// begin if resources > 0 then
1889: LD_EXP 40
1893: PUSH
1894: LD_INT 0
1896: GREATER
1897: IFFALSE 1998
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1899: LD_VAR 0 6
1903: PUSH
1904: LD_VAR 0 2
1908: ARRAY
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: LD_EXP 40
1917: PUSH
1918: LD_VAR 0 2
1922: ARRAY
1923: PUSH
1924: LD_INT 1
1926: ARRAY
1927: PPUSH
1928: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1932: LD_VAR 0 6
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PPUSH
1943: LD_INT 2
1945: PPUSH
1946: LD_EXP 40
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 2
1959: ARRAY
1960: PPUSH
1961: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1965: LD_VAR 0 6
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: LD_EXP 40
1983: PUSH
1984: LD_VAR 0 2
1988: ARRAY
1989: PUSH
1990: LD_INT 3
1992: ARRAY
1993: PPUSH
1994: CALL_OW 291
// end ; end ;
1998: GO 1886
2000: POP
2001: POP
// end ; end ;
2002: LD_VAR 0 1
2006: RET
// export function PrepareOthers ; var i , veh ; begin
2007: LD_INT 0
2009: PPUSH
2010: PPUSH
2011: PPUSH
// uc_side = 1 ;
2012: LD_ADDR_OWVAR 20
2016: PUSH
2017: LD_INT 1
2019: ST_TO_ADDR
// uc_nation = 1 ;
2020: LD_ADDR_OWVAR 21
2024: PUSH
2025: LD_INT 1
2027: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2028: LD_ADDR_EXP 11
2032: PUSH
2033: LD_STRING OthersIn06
2035: PPUSH
2036: CALL_OW 31
2040: ST_TO_ADDR
// for i in others do
2041: LD_ADDR_VAR 0 2
2045: PUSH
2046: LD_EXP 11
2050: PUSH
2051: FOR_IN
2052: IFFALSE 2142
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2054: LD_ADDR_VAR 0 3
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 58
2081: PUSH
2082: EMPTY
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: ST_TO_ADDR
// if veh > 0 then
2095: LD_VAR 0 3
2099: PUSH
2100: LD_INT 0
2102: GREATER
2103: IFFALSE 2125
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: LD_VAR 0 3
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PPUSH
2119: CALL_OW 52
// end else
2123: GO 2140
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2125: LD_VAR 0 2
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 0
2135: PPUSH
2136: CALL_OW 49
// end ; end ;
2140: GO 2051
2142: POP
2143: POP
// end ;
2144: LD_VAR 0 1
2148: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2149: LD_INT 0
2151: PPUSH
2152: PPUSH
2153: PPUSH
// uc_side = 1 ;
2154: LD_ADDR_OWVAR 20
2158: PUSH
2159: LD_INT 1
2161: ST_TO_ADDR
// uc_nation = 0 ;
2162: LD_ADDR_OWVAR 21
2166: PUSH
2167: LD_INT 0
2169: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2170: LD_ADDR_EXP 12
2174: PUSH
2175: LD_STRING ApeIn06
2177: PPUSH
2178: CALL_OW 31
2182: ST_TO_ADDR
// for i in ape do
2183: LD_ADDR_VAR 0 2
2187: PUSH
2188: LD_EXP 12
2192: PUSH
2193: FOR_IN
2194: IFFALSE 2213
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2196: LD_VAR 0 2
2200: PPUSH
2201: LD_INT 2
2203: PPUSH
2204: LD_INT 0
2206: PPUSH
2207: CALL_OW 49
2211: GO 2193
2213: POP
2214: POP
// end ;
2215: LD_VAR 0 1
2219: RET
// export function PrepareDenis ; var xy , i ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// uc_side = 4 ;
2225: LD_ADDR_OWVAR 20
2229: PUSH
2230: LD_INT 4
2232: ST_TO_ADDR
// uc_nation = 1 ;
2233: LD_ADDR_OWVAR 21
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2241: LD_ADDR_VAR 0 2
2245: PUSH
2246: LD_INT 63
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 70
2258: PUSH
2259: LD_INT 1
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PUSH
2266: LD_INT 83
2268: PUSH
2269: LD_INT 1
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 16
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 27
2288: PUSH
2289: LD_INT 1
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 38
2298: PUSH
2299: LD_INT 1
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 5
2308: PUSH
2309: LD_INT 1
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 54
2318: PUSH
2319: LD_INT 1
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2336: LD_ADDR_EXP 9
2340: PUSH
2341: LD_STRING Denis
2343: PPUSH
2344: LD_INT 1
2346: PPUSH
2347: CALL 6184 0 2
2351: ST_TO_ADDR
// for i = 1 to xy do
2352: LD_ADDR_VAR 0 3
2356: PUSH
2357: DOUBLE
2358: LD_INT 1
2360: DEC
2361: ST_TO_ADDR
2362: LD_VAR 0 2
2366: PUSH
2367: FOR_TO
2368: IFFALSE 2467
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2370: LD_VAR 0 2
2374: PUSH
2375: LD_VAR 0 3
2379: ARRAY
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 2
2389: PUSH
2390: LD_VAR 0 3
2394: ARRAY
2395: PUSH
2396: LD_INT 2
2398: ARRAY
2399: PPUSH
2400: CALL_OW 428
2404: PUSH
2405: LD_INT 0
2407: EQUAL
2408: IFFALSE 2465
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2410: LD_EXP 9
2414: PPUSH
2415: LD_VAR 0 2
2419: PUSH
2420: LD_VAR 0 3
2424: ARRAY
2425: PUSH
2426: LD_INT 1
2428: ARRAY
2429: PPUSH
2430: LD_VAR 0 2
2434: PUSH
2435: LD_VAR 0 3
2439: ARRAY
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 0
2447: PPUSH
2448: CALL_OW 48
// if IsPlaced ( Denis ) then
2452: LD_EXP 9
2456: PPUSH
2457: CALL_OW 305
2461: IFFALSE 2465
// break ;
2463: GO 2467
// end ;
2465: GO 2367
2467: POP
2468: POP
// SetClass ( Denis , 4 ) ;
2469: LD_EXP 9
2473: PPUSH
2474: LD_INT 4
2476: PPUSH
2477: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2481: LD_EXP 9
2485: PPUSH
2486: LD_INT 750
2488: PPUSH
2489: CALL_OW 234
// end ;
2493: LD_VAR 0 1
2497: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2498: LD_INT 0
2500: PPUSH
2501: PPUSH
2502: PPUSH
2503: PPUSH
2504: PPUSH
// area := HarrisonSupportArea ;
2505: LD_ADDR_VAR 0 4
2509: PUSH
2510: LD_INT 3
2512: ST_TO_ADDR
// dir := 2 ;
2513: LD_ADDR_VAR 0 5
2517: PUSH
2518: LD_INT 2
2520: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2521: LD_VAR 0 4
2525: PPUSH
2526: LD_INT 21
2528: PUSH
2529: LD_INT 3
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PPUSH
2536: CALL_OW 70
2540: IFFALSE 2558
// begin area := HarrisonSupportArea2 ;
2542: LD_ADDR_VAR 0 4
2546: PUSH
2547: LD_INT 31
2549: ST_TO_ADDR
// dir := 1 ;
2550: LD_ADDR_VAR 0 5
2554: PUSH
2555: LD_INT 1
2557: ST_TO_ADDR
// end ; uc_side = 1 ;
2558: LD_ADDR_OWVAR 20
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// uc_nation = 1 ;
2566: LD_ADDR_OWVAR 21
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// vc_engine = 1 ;
2574: LD_ADDR_OWVAR 39
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// vc_control = 1 ;
2582: LD_ADDR_OWVAR 38
2586: PUSH
2587: LD_INT 1
2589: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2590: LD_ADDR_OWVAR 40
2594: PUSH
2595: LD_INT 4
2597: PUSH
2598: LD_INT 4
2600: PUSH
2601: LD_INT 2
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: PUSH
2609: LD_OWVAR 67
2613: ARRAY
2614: ST_TO_ADDR
// vc_chassis = 2 ;
2615: LD_ADDR_OWVAR 37
2619: PUSH
2620: LD_INT 2
2622: ST_TO_ADDR
// veh = CreateVehicle ;
2623: LD_ADDR_VAR 0 3
2627: PUSH
2628: CALL_OW 45
2632: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2633: LD_VAR 0 3
2637: PPUSH
2638: LD_VAR 0 5
2642: PPUSH
2643: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2647: LD_VAR 0 3
2651: PPUSH
2652: LD_VAR 0 4
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2664: LD_VAR 0 3
2668: PPUSH
2669: LD_INT 50
2671: PPUSH
2672: CALL_OW 240
// hc_class := 2 ;
2676: LD_ADDR_OWVAR 28
2680: PUSH
2681: LD_INT 2
2683: ST_TO_ADDR
// hc_sex := sex_male ;
2684: LD_ADDR_OWVAR 27
2688: PUSH
2689: LD_INT 1
2691: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2692: LD_ADDR_OWVAR 33
2696: PUSH
2697: LD_STRING SecondCharsGal
2699: ST_TO_ADDR
// hc_face_number := 52 ;
2700: LD_ADDR_OWVAR 34
2704: PUSH
2705: LD_INT 52
2707: ST_TO_ADDR
// hc_name := Craig Brown ;
2708: LD_ADDR_OWVAR 26
2712: PUSH
2713: LD_STRING Craig Brown
2715: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2716: LD_ADDR_OWVAR 29
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: LD_INT 10
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2731: LD_ADDR_OWVAR 30
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: LD_INT 2
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2754: LD_ADDR_OWVAR 31
2758: PUSH
2759: LD_INT 2
2761: PUSH
2762: LD_INT 3
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: LD_INT 0
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2777: LD_ADDR_EXP 17
2781: PUSH
2782: CALL_OW 44
2786: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2787: LD_EXP 17
2791: PPUSH
2792: LD_VAR 0 3
2796: PPUSH
2797: CALL_OW 52
// vc_engine = 1 ;
2801: LD_ADDR_OWVAR 39
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// vc_control = 1 ;
2809: LD_ADDR_OWVAR 38
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2817: LD_ADDR_OWVAR 40
2821: PUSH
2822: LD_INT 3
2824: ST_TO_ADDR
// vc_chassis = 2 ;
2825: LD_ADDR_OWVAR 37
2829: PUSH
2830: LD_INT 2
2832: ST_TO_ADDR
// veh = CreateVehicle ;
2833: LD_ADDR_VAR 0 3
2837: PUSH
2838: CALL_OW 45
2842: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_VAR 0 5
2852: PPUSH
2853: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2857: LD_VAR 0 3
2861: PPUSH
2862: LD_VAR 0 4
2866: PPUSH
2867: LD_INT 0
2869: PPUSH
2870: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2874: LD_VAR 0 3
2878: PPUSH
2879: LD_INT 50
2881: PPUSH
2882: CALL_OW 240
// hc_class := 1 ;
2886: LD_ADDR_OWVAR 28
2890: PUSH
2891: LD_INT 1
2893: ST_TO_ADDR
// hc_sex := sex_female ;
2894: LD_ADDR_OWVAR 27
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2902: LD_ADDR_OWVAR 33
2906: PUSH
2907: LD_STRING SecondCharsGal
2909: ST_TO_ADDR
// hc_face_number := 45 ;
2910: LD_ADDR_OWVAR 34
2914: PUSH
2915: LD_INT 45
2917: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2918: LD_ADDR_OWVAR 29
2922: PUSH
2923: LD_INT 11
2925: PUSH
2926: LD_INT 10
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2933: LD_ADDR_OWVAR 26
2937: PUSH
2938: LD_STRING Ingrid Jonsson
2940: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2941: LD_ADDR_OWVAR 30
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: LD_INT 1
2951: PUSH
2952: LD_INT 0
2954: PUSH
2955: LD_INT 0
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2964: LD_ADDR_OWVAR 31
2968: PUSH
2969: LD_INT 3
2971: PUSH
2972: LD_INT 1
2974: PUSH
2975: LD_INT 1
2977: PUSH
2978: LD_INT 0
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2987: LD_ADDR_EXP 18
2991: PUSH
2992: CALL_OW 44
2996: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2997: LD_EXP 18
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: CALL_OW 52
// end ;
3011: LD_VAR 0 1
3015: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3016: LD_INT 0
3018: PPUSH
3019: PPUSH
3020: PPUSH
3021: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3022: LD_ADDR_VAR 0 4
3026: PUSH
3027: LD_INT 22
3029: PUSH
3030: LD_INT 1
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 23
3039: PUSH
3040: LD_INT 1
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 26
3049: PUSH
3050: LD_INT 1
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: LIST
3061: PPUSH
3062: CALL_OW 69
3066: PUSH
3067: LD_EXP 3
3071: PUSH
3072: LD_EXP 4
3076: PUSH
3077: LD_EXP 8
3081: PUSH
3082: LD_EXP 9
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: DIFF
3099: ST_TO_ADDR
// for i in _tmp do
3100: LD_ADDR_VAR 0 2
3104: PUSH
3105: LD_VAR 0 4
3109: PUSH
3110: FOR_IN
3111: IFFALSE 3152
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3113: LD_VAR 0 2
3117: PPUSH
3118: LD_INT 32
3120: PPUSH
3121: CALL_OW 308
3125: PUSH
3126: LD_VAR 0 2
3130: PPUSH
3131: CALL_OW 302
3135: AND
3136: IFFALSE 3150
// begin tmp := i ;
3138: LD_ADDR_VAR 0 3
3142: PUSH
3143: LD_VAR 0 2
3147: ST_TO_ADDR
// break ;
3148: GO 3152
// end ;
3150: GO 3110
3152: POP
3153: POP
// if not tmp then
3154: LD_VAR 0 3
3158: NOT
3159: IFFALSE 3171
// tmp := JMM ;
3161: LD_ADDR_VAR 0 3
3165: PUSH
3166: LD_EXP 1
3170: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3171: LD_INT 35
3173: PPUSH
3174: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 22 ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 20 ] ] ) ;
3178: LD_INT 81
3180: PUSH
3181: LD_INT 1
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 92
3190: PUSH
3191: LD_VAR 0 3
3195: PPUSH
3196: CALL_OW 250
3200: PUSH
3201: LD_VAR 0 3
3205: PPUSH
3206: CALL_OW 251
3210: PUSH
3211: LD_INT 22
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PPUSH
3224: CALL_OW 69
3228: NOT
3229: PUSH
3230: LD_INT 22
3232: PUSH
3233: LD_INT 1
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: PUSH
3240: LD_INT 21
3242: PUSH
3243: LD_INT 3
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PUSH
3250: LD_INT 92
3252: PUSH
3253: LD_VAR 0 3
3257: PPUSH
3258: CALL_OW 250
3262: PUSH
3263: LD_VAR 0 3
3267: PPUSH
3268: CALL_OW 251
3272: PUSH
3273: LD_INT 20
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: LIST
3286: PPUSH
3287: CALL_OW 69
3291: AND
3292: IFFALSE 3171
// blockSpawn = 1 ;
3294: LD_ADDR_EXP 29
3298: PUSH
3299: LD_INT 1
3301: ST_TO_ADDR
// uc_side = 4 ;
3302: LD_ADDR_OWVAR 20
3306: PUSH
3307: LD_INT 4
3309: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3310: LD_ADDR_EXP 15
3314: PUSH
3315: LD_STRING Joan
3317: PPUSH
3318: LD_INT 0
3320: PPUSH
3321: CALL 6184 0 2
3325: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3326: LD_EXP 15
3330: PPUSH
3331: LD_VAR 0 3
3335: PPUSH
3336: CALL_OW 250
3340: PPUSH
3341: LD_VAR 0 3
3345: PPUSH
3346: CALL_OW 251
3350: PPUSH
3351: LD_INT 5
3353: PPUSH
3354: LD_INT 1
3356: PPUSH
3357: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3361: LD_EXP 15
3365: PPUSH
3366: LD_INT 250
3368: PPUSH
3369: CALL_OW 234
// InGameOn ;
3373: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3377: LD_EXP 15
3381: PPUSH
3382: CALL_OW 87
// wait ( 0 0$2 ) ;
3386: LD_INT 70
3388: PPUSH
3389: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3393: LD_VAR 0 3
3397: PPUSH
3398: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3402: LD_VAR 0 3
3406: PPUSH
3407: CALL_OW 122
// wait ( 0 0$1 ) ;
3411: LD_INT 35
3413: PPUSH
3414: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3418: LD_VAR 0 3
3422: PPUSH
3423: LD_EXP 15
3427: PPUSH
3428: CALL_OW 112
// wait ( 0 0$2 ) ;
3432: LD_INT 70
3434: PPUSH
3435: CALL_OW 67
// DialogueOn ;
3439: CALL_OW 6
// if tmp = JMM then
3443: LD_VAR 0 3
3447: PUSH
3448: LD_EXP 1
3452: EQUAL
3453: IFFALSE 3602
// begin ComTurnUnit ( JMM , Joan ) ;
3455: LD_EXP 1
3459: PPUSH
3460: LD_EXP 15
3464: PPUSH
3465: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3469: LD_EXP 1
3473: PPUSH
3474: LD_STRING D5b-JMM-1
3476: PPUSH
3477: CALL_OW 88
// DialogueOff ;
3481: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3485: LD_EXP 15
3489: PPUSH
3490: LD_INT 500
3492: PPUSH
3493: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3497: LD_EXP 15
3501: PPUSH
3502: LD_EXP 1
3506: PPUSH
3507: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3511: LD_EXP 1
3515: PPUSH
3516: LD_EXP 15
3520: PPUSH
3521: CALL_OW 119
// wait ( 0 0$1 ) ;
3525: LD_INT 35
3527: PPUSH
3528: CALL_OW 67
// DialogueOn ;
3532: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3536: LD_EXP 15
3540: PPUSH
3541: LD_STRING D5b-Joan-1
3543: PPUSH
3544: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3548: LD_EXP 1
3552: PPUSH
3553: LD_STRING D5b-JMM-2
3555: PPUSH
3556: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3560: LD_EXP 15
3564: PPUSH
3565: LD_STRING D5b-Joan-2
3567: PPUSH
3568: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3572: LD_EXP 1
3576: PPUSH
3577: LD_STRING D5b-JMM-3
3579: PPUSH
3580: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3584: LD_EXP 15
3588: PPUSH
3589: LD_STRING D5b-Joan-3
3591: PPUSH
3592: CALL_OW 88
// DialogueOff ;
3596: CALL_OW 7
// end else
3600: GO 3976
// begin ComTurnUnit ( tmp , Joan ) ;
3602: LD_VAR 0 3
3606: PPUSH
3607: LD_EXP 15
3611: PPUSH
3612: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3616: LD_VAR 0 3
3620: PPUSH
3621: LD_STRING D5a-Sol1-1
3623: PPUSH
3624: CALL_OW 88
// DialogueOff ;
3628: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3632: LD_EXP 15
3636: PPUSH
3637: LD_INT 500
3639: PPUSH
3640: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3644: LD_EXP 15
3648: PPUSH
3649: LD_VAR 0 3
3653: PPUSH
3654: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3658: LD_VAR 0 3
3662: PPUSH
3663: LD_EXP 15
3667: PPUSH
3668: CALL_OW 119
// wait ( 0 0$1 ) ;
3672: LD_INT 35
3674: PPUSH
3675: CALL_OW 67
// DialogueOn ;
3679: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3683: LD_EXP 15
3687: PPUSH
3688: LD_STRING D5a-Joan-1
3690: PPUSH
3691: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3695: LD_VAR 0 3
3699: PPUSH
3700: LD_STRING D5a-Sol1-2
3702: PPUSH
3703: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3707: LD_EXP 15
3711: PPUSH
3712: LD_STRING D5a-Joan-2
3714: PPUSH
3715: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3719: LD_VAR 0 3
3723: PPUSH
3724: LD_STRING D5a-Sol1-3
3726: PPUSH
3727: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3731: LD_EXP 15
3735: PPUSH
3736: LD_STRING D5a-Joan-3
3738: PPUSH
3739: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3743: LD_VAR 0 3
3747: PPUSH
3748: LD_STRING D5a-Sol1-4
3750: PPUSH
3751: CALL_OW 88
// DialogueOff ;
3755: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3759: LD_EXP 1
3763: PUSH
3764: LD_INT 55
3766: PUSH
3767: EMPTY
3768: LIST
3769: PPUSH
3770: CALL_OW 69
3774: IN
3775: IFFALSE 3798
// begin ComMoveUnit ( JMM , Joan ) ;
3777: LD_EXP 1
3781: PPUSH
3782: LD_EXP 15
3786: PPUSH
3787: CALL_OW 112
// wait ( 0 0$05 ) ;
3791: LD_INT 175
3793: PPUSH
3794: CALL_OW 67
// end ; ComExitVehicle ( JMM ) ;
3798: LD_EXP 1
3802: PPUSH
3803: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3807: LD_EXP 1
3811: PPUSH
3812: CALL_OW 122
// wait ( 0 0$1 ) ;
3816: LD_INT 35
3818: PPUSH
3819: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3823: LD_INT 35
3825: PPUSH
3826: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3830: LD_EXP 15
3834: PUSH
3835: LD_VAR 0 3
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PPUSH
3844: LD_EXP 1
3848: PPUSH
3849: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3853: LD_EXP 15
3857: PPUSH
3858: LD_EXP 1
3862: PPUSH
3863: CALL_OW 296
3867: PUSH
3868: LD_INT 5
3870: LESS
3871: IFFALSE 3823
// ComTurnUnit ( Joan , JMM ) ;
3873: LD_EXP 15
3877: PPUSH
3878: LD_EXP 1
3882: PPUSH
3883: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3887: LD_EXP 1
3891: PPUSH
3892: LD_EXP 15
3896: PPUSH
3897: CALL_OW 119
// wait ( 0 0$1 ) ;
3901: LD_INT 35
3903: PPUSH
3904: CALL_OW 67
// DialogueOn ;
3908: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3912: LD_EXP 15
3916: PPUSH
3917: LD_STRING D5a-Joan-4
3919: PPUSH
3920: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3924: LD_EXP 1
3928: PPUSH
3929: LD_STRING D5a-JMM-4
3931: PPUSH
3932: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3936: LD_EXP 15
3940: PPUSH
3941: LD_STRING D5a-Joan-5
3943: PPUSH
3944: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3948: LD_EXP 1
3952: PPUSH
3953: LD_STRING D5a-JMM-5
3955: PPUSH
3956: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3960: LD_EXP 15
3964: PPUSH
3965: LD_STRING D5a-Joan-6
3967: PPUSH
3968: CALL_OW 88
// DialogueOff ;
3972: CALL_OW 7
// end ; DialogueOn ;
3976: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3980: LD_EXP 1
3984: PPUSH
3985: LD_STRING D6-JMM-1
3987: PPUSH
3988: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3992: LD_EXP 15
3996: PPUSH
3997: LD_STRING D6-Joan-1
3999: PPUSH
4000: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4004: LD_EXP 1
4008: PPUSH
4009: LD_STRING D6-JMM-2
4011: PPUSH
4012: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4016: LD_EXP 15
4020: PPUSH
4021: LD_STRING D6-Joan-2
4023: PPUSH
4024: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4028: LD_EXP 1
4032: PPUSH
4033: LD_STRING D6-JMM-3
4035: PPUSH
4036: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4040: LD_EXP 15
4044: PPUSH
4045: LD_STRING D6-Joan-3
4047: PPUSH
4048: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4052: LD_EXP 1
4056: PPUSH
4057: LD_STRING D6-JMM-4
4059: PPUSH
4060: CALL_OW 88
// DialogueOff ;
4064: CALL_OW 7
// InGameOff ;
4068: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4072: LD_EXP 15
4076: PPUSH
4077: LD_INT 1
4079: PPUSH
4080: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4084: LD_STRING MJ
4086: PPUSH
4087: CALL_OW 337
// JoanStatus = 1 ;
4091: LD_ADDR_EXP 16
4095: PUSH
4096: LD_INT 1
4098: ST_TO_ADDR
// blockSpawn = 0 ;
4099: LD_ADDR_EXP 29
4103: PUSH
4104: LD_INT 0
4106: ST_TO_ADDR
// end ;
4107: LD_VAR 0 1
4111: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4112: LD_INT 0
4114: PPUSH
4115: PPUSH
// if not number or number > 8 then
4116: LD_VAR 0 1
4120: NOT
4121: PUSH
4122: LD_VAR 0 1
4126: PUSH
4127: LD_INT 8
4129: GREATER
4130: OR
4131: IFFALSE 4135
// exit ;
4133: GO 5677
// repeat wait ( 0 0$7 ) ;
4135: LD_INT 245
4137: PPUSH
4138: CALL_OW 67
// until blockSpawn = 0 ;
4142: LD_EXP 29
4146: PUSH
4147: LD_INT 0
4149: EQUAL
4150: IFFALSE 4135
// uc_side = 1 ;
4152: LD_ADDR_OWVAR 20
4156: PUSH
4157: LD_INT 1
4159: ST_TO_ADDR
// uc_nation = 1 ;
4160: LD_ADDR_OWVAR 21
4164: PUSH
4165: LD_INT 1
4167: ST_TO_ADDR
// InitHc ;
4168: CALL_OW 19
// if number = 1 then
4172: LD_VAR 0 1
4176: PUSH
4177: LD_INT 1
4179: EQUAL
4180: IFFALSE 4356
// begin hc_class := 3 ;
4182: LD_ADDR_OWVAR 28
4186: PUSH
4187: LD_INT 3
4189: ST_TO_ADDR
// hc_sex := sex_male ;
4190: LD_ADDR_OWVAR 27
4194: PUSH
4195: LD_INT 1
4197: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4198: LD_ADDR_OWVAR 33
4202: PUSH
4203: LD_STRING SecondCharsGal
4205: ST_TO_ADDR
// hc_face_number := 55 ;
4206: LD_ADDR_OWVAR 34
4210: PUSH
4211: LD_INT 55
4213: ST_TO_ADDR
// hc_name := George McCarthy ;
4214: LD_ADDR_OWVAR 26
4218: PUSH
4219: LD_STRING George McCarthy
4221: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4222: LD_ADDR_OWVAR 29
4226: PUSH
4227: LD_INT 11
4229: PUSH
4230: LD_INT 10
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4237: LD_ADDR_OWVAR 30
4241: PUSH
4242: LD_INT 0
4244: PUSH
4245: LD_INT 0
4247: PUSH
4248: LD_INT 2
4250: PUSH
4251: LD_INT 0
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4260: LD_ADDR_OWVAR 31
4264: PUSH
4265: LD_INT 1
4267: PUSH
4268: LD_INT 2
4270: PUSH
4271: LD_INT 3
4273: PUSH
4274: LD_INT 1
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: ST_TO_ADDR
// un = CreateHuman ;
4283: LD_ADDR_VAR 0 3
4287: PUSH
4288: CALL_OW 44
4292: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4293: LD_VAR 0 3
4297: PPUSH
4298: LD_INT 23
4300: PPUSH
4301: LD_INT 1
4303: PPUSH
4304: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4308: LD_VAR 0 3
4312: PPUSH
4313: CALL_OW 87
// wait ( 0 0$1 ) ;
4317: LD_INT 35
4319: PPUSH
4320: CALL_OW 67
// DialogueOn ;
4324: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4328: LD_VAR 0 3
4332: PPUSH
4333: LD_STRING D11d-Sol4-1
4335: PPUSH
4336: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4340: LD_EXP 1
4344: PPUSH
4345: LD_STRING D11d-JMM-1
4347: PPUSH
4348: CALL_OW 88
// DialogueOff ;
4352: CALL_OW 7
// end ; if number = 2 then
4356: LD_VAR 0 1
4360: PUSH
4361: LD_INT 2
4363: EQUAL
4364: IFFALSE 4540
// begin hc_class := 1 ;
4366: LD_ADDR_OWVAR 28
4370: PUSH
4371: LD_INT 1
4373: ST_TO_ADDR
// hc_sex := sex_male ;
4374: LD_ADDR_OWVAR 27
4378: PUSH
4379: LD_INT 1
4381: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4382: LD_ADDR_OWVAR 33
4386: PUSH
4387: LD_STRING AmGalRemake
4389: ST_TO_ADDR
// hc_face_number := 7 ;
4390: LD_ADDR_OWVAR 34
4394: PUSH
4395: LD_INT 7
4397: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4398: LD_ADDR_OWVAR 26
4402: PUSH
4403: LD_STRING Bobby Jordan
4405: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4406: LD_ADDR_OWVAR 29
4410: PUSH
4411: LD_INT 9
4413: PUSH
4414: LD_INT 11
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4421: LD_ADDR_OWVAR 30
4425: PUSH
4426: LD_INT 1
4428: PUSH
4429: LD_INT 0
4431: PUSH
4432: LD_INT 0
4434: PUSH
4435: LD_INT 1
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4444: LD_ADDR_OWVAR 31
4448: PUSH
4449: LD_INT 2
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: LD_INT 1
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: ST_TO_ADDR
// un = CreateHuman ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: CALL_OW 44
4476: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4477: LD_VAR 0 3
4481: PPUSH
4482: LD_INT 24
4484: PPUSH
4485: LD_INT 1
4487: PPUSH
4488: CALL_OW 49
// wait ( 0 0$1 ) ;
4492: LD_INT 35
4494: PPUSH
4495: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4499: LD_VAR 0 3
4503: PPUSH
4504: CALL_OW 87
// DialogueOn ;
4508: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4512: LD_VAR 0 3
4516: PPUSH
4517: LD_STRING D11b-Sol3-1
4519: PPUSH
4520: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4524: LD_EXP 1
4528: PPUSH
4529: LD_STRING D11b-JMM-1
4531: PPUSH
4532: CALL_OW 88
// DialogueOff ;
4536: CALL_OW 7
// end ; if number = 3 then
4540: LD_VAR 0 1
4544: PUSH
4545: LD_INT 3
4547: EQUAL
4548: IFFALSE 4712
// begin hc_class := 1 ;
4550: LD_ADDR_OWVAR 28
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// hc_sex := sex_male ;
4558: LD_ADDR_OWVAR 27
4562: PUSH
4563: LD_INT 1
4565: ST_TO_ADDR
// hc_gallery := DJ ;
4566: LD_ADDR_OWVAR 33
4570: PUSH
4571: LD_STRING DJ
4573: ST_TO_ADDR
// hc_face_number := 1 ;
4574: LD_ADDR_OWVAR 34
4578: PUSH
4579: LD_INT 1
4581: ST_TO_ADDR
// hc_name := Darius Dajay ;
4582: LD_ADDR_OWVAR 26
4586: PUSH
4587: LD_STRING Darius Dajay
4589: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4590: LD_ADDR_OWVAR 29
4594: PUSH
4595: LD_INT 11
4597: PUSH
4598: LD_INT 11
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4605: LD_ADDR_OWVAR 30
4609: PUSH
4610: LD_INT 2
4612: PUSH
4613: LD_INT 0
4615: PUSH
4616: LD_INT 0
4618: PUSH
4619: LD_INT 0
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4628: LD_ADDR_OWVAR 31
4632: PUSH
4633: LD_INT 4
4635: PUSH
4636: LD_INT 0
4638: PUSH
4639: LD_INT 1
4641: PUSH
4642: LD_INT 0
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: ST_TO_ADDR
// un = CreateHuman ;
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: CALL_OW 44
4660: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4661: LD_VAR 0 3
4665: PPUSH
4666: LD_INT 25
4668: PPUSH
4669: LD_INT 1
4671: PPUSH
4672: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4676: LD_VAR 0 3
4680: PPUSH
4681: CALL_OW 87
// wait ( 0 0$1 ) ;
4685: LD_INT 35
4687: PPUSH
4688: CALL_OW 67
// DialogueOn ;
4692: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4696: LD_VAR 0 3
4700: PPUSH
4701: LD_STRING D11f-Sol5-1
4703: PPUSH
4704: CALL_OW 88
// DialogueOff ;
4708: CALL_OW 7
// end ; if number = 4 then
4712: LD_VAR 0 1
4716: PUSH
4717: LD_INT 4
4719: EQUAL
4720: IFFALSE 4857
// begin hc_class := 2 ;
4722: LD_ADDR_OWVAR 28
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// hc_sex := sex_female ;
4730: LD_ADDR_OWVAR 27
4734: PUSH
4735: LD_INT 2
4737: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4738: LD_ADDR_OWVAR 33
4742: PUSH
4743: LD_STRING SecondCharsGal
4745: ST_TO_ADDR
// hc_face_number := 46 ;
4746: LD_ADDR_OWVAR 34
4750: PUSH
4751: LD_INT 46
4753: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4754: LD_ADDR_OWVAR 26
4758: PUSH
4759: LD_STRING Sylvia Creak
4761: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4762: LD_ADDR_OWVAR 29
4766: PUSH
4767: LD_INT 10
4769: PUSH
4770: LD_INT 9
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4777: LD_ADDR_OWVAR 30
4781: PUSH
4782: LD_INT 0
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: LD_INT 1
4790: PUSH
4791: LD_INT 1
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4800: LD_ADDR_OWVAR 31
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: LD_INT 3
4810: PUSH
4811: LD_INT 1
4813: PUSH
4814: LD_INT 1
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: ST_TO_ADDR
// un = CreateHuman ;
4823: LD_ADDR_VAR 0 3
4827: PUSH
4828: CALL_OW 44
4832: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4833: LD_VAR 0 3
4837: PPUSH
4838: LD_INT 26
4840: PPUSH
4841: LD_INT 1
4843: PPUSH
4844: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4848: LD_VAR 0 3
4852: PPUSH
4853: CALL_OW 87
// end ; if number = 5 then
4857: LD_VAR 0 1
4861: PUSH
4862: LD_INT 5
4864: EQUAL
4865: IFFALSE 5041
// begin hc_class := 1 ;
4867: LD_ADDR_OWVAR 28
4871: PUSH
4872: LD_INT 1
4874: ST_TO_ADDR
// hc_sex := sex_female ;
4875: LD_ADDR_OWVAR 27
4879: PUSH
4880: LD_INT 2
4882: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4883: LD_ADDR_OWVAR 33
4887: PUSH
4888: LD_STRING SecondCharsGal
4890: ST_TO_ADDR
// hc_face_number := 37 ;
4891: LD_ADDR_OWVAR 34
4895: PUSH
4896: LD_INT 37
4898: ST_TO_ADDR
// hc_name := Malena Johnson ;
4899: LD_ADDR_OWVAR 26
4903: PUSH
4904: LD_STRING Malena Johnson
4906: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4907: LD_ADDR_OWVAR 29
4911: PUSH
4912: LD_INT 11
4914: PUSH
4915: LD_INT 10
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4922: LD_ADDR_OWVAR 30
4926: PUSH
4927: LD_INT 1
4929: PUSH
4930: LD_INT 1
4932: PUSH
4933: LD_INT 0
4935: PUSH
4936: LD_INT 0
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4945: LD_ADDR_OWVAR 31
4949: PUSH
4950: LD_INT 1
4952: PUSH
4953: LD_INT 1
4955: PUSH
4956: LD_INT 1
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: ST_TO_ADDR
// un = CreateHuman ;
4968: LD_ADDR_VAR 0 3
4972: PUSH
4973: CALL_OW 44
4977: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4978: LD_VAR 0 3
4982: PPUSH
4983: LD_INT 27
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4993: LD_VAR 0 3
4997: PPUSH
4998: CALL_OW 87
// wait ( 0 0$1 ) ;
5002: LD_INT 35
5004: PPUSH
5005: CALL_OW 67
// DialogueOn ;
5009: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5013: LD_VAR 0 3
5017: PPUSH
5018: LD_STRING D11c-FSol3-1
5020: PPUSH
5021: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5025: LD_EXP 1
5029: PPUSH
5030: LD_STRING D11c-JMM-1
5032: PPUSH
5033: CALL_OW 88
// DialogueOff ;
5037: CALL_OW 7
// end ; if number = 6 then
5041: LD_VAR 0 1
5045: PUSH
5046: LD_INT 6
5048: EQUAL
5049: IFFALSE 5223
// begin hc_class := 1 ;
5051: LD_ADDR_OWVAR 28
5055: PUSH
5056: LD_INT 1
5058: ST_TO_ADDR
// hc_sex := sex_male ;
5059: LD_ADDR_OWVAR 27
5063: PUSH
5064: LD_INT 1
5066: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5067: LD_ADDR_OWVAR 33
5071: PUSH
5072: LD_STRING AmGalRemake
5074: ST_TO_ADDR
// hc_face_number := 1 ;
5075: LD_ADDR_OWVAR 34
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// hc_name := Charles Brown ;
5083: LD_ADDR_OWVAR 26
5087: PUSH
5088: LD_STRING Charles Brown
5090: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5091: LD_ADDR_OWVAR 29
5095: PUSH
5096: LD_INT 12
5098: PUSH
5099: LD_INT 11
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5106: LD_ADDR_OWVAR 30
5110: PUSH
5111: LD_INT 2
5113: PUSH
5114: LD_INT 0
5116: PUSH
5117: LD_INT 0
5119: PUSH
5120: LD_INT 0
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5129: LD_ADDR_OWVAR 31
5133: PUSH
5134: LD_INT 3
5136: PUSH
5137: LD_INT 0
5139: PUSH
5140: LD_INT 1
5142: PUSH
5143: LD_INT 1
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: ST_TO_ADDR
// un = CreateHuman ;
5152: LD_ADDR_VAR 0 3
5156: PUSH
5157: CALL_OW 44
5161: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5162: LD_VAR 0 3
5166: PPUSH
5167: LD_INT 28
5169: PPUSH
5170: LD_INT 1
5172: PPUSH
5173: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5177: LD_VAR 0 3
5181: PPUSH
5182: CALL_OW 87
// wait ( 0 0$1 ) ;
5186: LD_INT 35
5188: PPUSH
5189: CALL_OW 67
// DialogueOn ;
5193: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5197: LD_VAR 0 3
5201: PPUSH
5202: LD_STRING D4-Sol1-5
5204: PPUSH
5205: CALL_OW 88
// DialogueOff ;
5209: CALL_OW 7
// tempCharles = un ;
5213: LD_ADDR_EXP 13
5217: PUSH
5218: LD_VAR 0 3
5222: ST_TO_ADDR
// end ; if number = 7 then
5223: LD_VAR 0 1
5227: PUSH
5228: LD_INT 7
5230: EQUAL
5231: IFFALSE 5481
// begin hc_class := 1 ;
5233: LD_ADDR_OWVAR 28
5237: PUSH
5238: LD_INT 1
5240: ST_TO_ADDR
// hc_sex := sex_female ;
5241: LD_ADDR_OWVAR 27
5245: PUSH
5246: LD_INT 2
5248: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5249: LD_ADDR_OWVAR 33
5253: PUSH
5254: LD_STRING AmGalRemake
5256: ST_TO_ADDR
// hc_face_number := 2 ;
5257: LD_ADDR_OWVAR 34
5261: PUSH
5262: LD_INT 2
5264: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5265: LD_ADDR_OWVAR 26
5269: PUSH
5270: LD_STRING Rebecca Macdonald
5272: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5273: LD_ADDR_OWVAR 29
5277: PUSH
5278: LD_INT 10
5280: PUSH
5281: LD_INT 10
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5288: LD_ADDR_OWVAR 30
5292: PUSH
5293: LD_INT 1
5295: PUSH
5296: LD_INT 0
5298: PUSH
5299: LD_INT 0
5301: PUSH
5302: LD_INT 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5311: LD_ADDR_OWVAR 31
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: LD_INT 0
5321: PUSH
5322: LD_INT 0
5324: PUSH
5325: LD_INT 1
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: ST_TO_ADDR
// un = CreateHuman ;
5334: LD_ADDR_VAR 0 3
5338: PUSH
5339: CALL_OW 44
5343: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5344: LD_VAR 0 3
5348: PPUSH
5349: LD_INT 29
5351: PPUSH
5352: LD_INT 1
5354: PPUSH
5355: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5359: LD_VAR 0 3
5363: PPUSH
5364: CALL_OW 87
// wait ( 0 0$1 ) ;
5368: LD_INT 35
5370: PPUSH
5371: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5375: LD_INT 30
5377: PPUSH
5378: LD_INT 22
5380: PUSH
5381: LD_INT 3
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PPUSH
5388: CALL_OW 70
5392: IFFALSE 5481
// begin DialogueOn ;
5394: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5398: LD_VAR 0 3
5402: PPUSH
5403: CALL_OW 250
5407: PPUSH
5408: LD_VAR 0 3
5412: PPUSH
5413: CALL_OW 251
5417: PPUSH
5418: LD_INT 1
5420: PPUSH
5421: LD_INT 15
5423: NEG
5424: PPUSH
5425: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5429: LD_VAR 0 3
5433: PPUSH
5434: CALL_OW 250
5438: PPUSH
5439: LD_VAR 0 3
5443: PPUSH
5444: CALL_OW 251
5448: PPUSH
5449: LD_INT 1
5451: PPUSH
5452: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5456: LD_VAR 0 3
5460: PPUSH
5461: LD_STRING D11a-FSol2-1
5463: PPUSH
5464: CALL_OW 88
// ComCrawl ( un ) ;
5468: LD_VAR 0 3
5472: PPUSH
5473: CALL_OW 137
// DialogueOff ;
5477: CALL_OW 7
// end ; end ; if number = 8 then
5481: LD_VAR 0 1
5485: PUSH
5486: LD_INT 8
5488: EQUAL
5489: IFFALSE 5645
// begin hc_class := 1 ;
5491: LD_ADDR_OWVAR 28
5495: PUSH
5496: LD_INT 1
5498: ST_TO_ADDR
// hc_sex := sex_female ;
5499: LD_ADDR_OWVAR 27
5503: PUSH
5504: LD_INT 2
5506: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5507: LD_ADDR_OWVAR 33
5511: PUSH
5512: LD_STRING SecondCharsGal
5514: ST_TO_ADDR
// hc_face_number := 42 ;
5515: LD_ADDR_OWVAR 34
5519: PUSH
5520: LD_INT 42
5522: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5523: LD_ADDR_OWVAR 26
5527: PUSH
5528: LD_STRING Margherite Simpson
5530: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5531: LD_ADDR_OWVAR 29
5535: PUSH
5536: LD_INT 12
5538: PUSH
5539: LD_INT 10
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5546: LD_ADDR_OWVAR 30
5550: PUSH
5551: LD_INT 1
5553: PUSH
5554: LD_INT 2
5556: PUSH
5557: LD_INT 0
5559: PUSH
5560: LD_INT 0
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5569: LD_ADDR_OWVAR 31
5573: PUSH
5574: LD_INT 1
5576: PUSH
5577: LD_INT 2
5579: PUSH
5580: LD_INT 0
5582: PUSH
5583: LD_INT 1
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: ST_TO_ADDR
// un = CreateHuman ;
5592: LD_ADDR_VAR 0 3
5596: PUSH
5597: CALL_OW 44
5601: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5602: LD_VAR 0 3
5606: PPUSH
5607: LD_INT 33
5609: PPUSH
5610: LD_INT 1
5612: PPUSH
5613: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5617: LD_VAR 0 3
5621: PPUSH
5622: CALL_OW 87
// wait ( 0 0$1 ) ;
5626: LD_INT 35
5628: PPUSH
5629: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5633: LD_VAR 0 3
5637: PPUSH
5638: LD_STRING D11e-FSol4-1
5640: PPUSH
5641: CALL_OW 88
// end ; ignoreTarget := ignoreTarget union un ;
5645: LD_ADDR_EXP 45
5649: PUSH
5650: LD_EXP 45
5654: PUSH
5655: LD_VAR 0 3
5659: UNION
5660: ST_TO_ADDR
// arrivals := arrivals union un ;
5661: LD_ADDR_EXP 46
5665: PUSH
5666: LD_EXP 46
5670: PUSH
5671: LD_VAR 0 3
5675: UNION
5676: ST_TO_ADDR
// end ;
5677: LD_VAR 0 2
5681: RET
// every 0 0$1 do var i ;
5682: GO 5684
5684: DISABLE
5685: LD_INT 0
5687: PPUSH
// begin enable ;
5688: ENABLE
// if not ignoreTarget then
5689: LD_EXP 45
5693: NOT
5694: IFFALSE 5698
// exit ;
5696: GO 5779
// for i in ignoreTarget do
5698: LD_ADDR_VAR 0 1
5702: PUSH
5703: LD_EXP 45
5707: PUSH
5708: FOR_IN
5709: IFFALSE 5777
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5711: LD_INT 22
5713: PUSH
5714: LD_INT 1
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: PUSH
5721: LD_INT 91
5723: PUSH
5724: LD_VAR 0 1
5728: PUSH
5729: LD_INT 10
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: PPUSH
5741: CALL_OW 69
5745: PUSH
5746: LD_EXP 45
5750: DIFF
5751: PUSH
5752: LD_INT 1
5754: GREATER
5755: IFFALSE 5775
// begin ignoreTarget := ignoreTarget diff i ;
5757: LD_ADDR_EXP 45
5761: PUSH
5762: LD_EXP 45
5766: PUSH
5767: LD_VAR 0 1
5771: DIFF
5772: ST_TO_ADDR
// break ;
5773: GO 5777
// end ;
5775: GO 5708
5777: POP
5778: POP
// end ; end_of_file
5779: PPOPN 1
5781: END
// export function PrepareRussian ; var i ; begin
5782: LD_INT 0
5784: PPUSH
5785: PPUSH
// if Difficulty < 3 then
5786: LD_OWVAR 67
5790: PUSH
5791: LD_INT 3
5793: LESS
5794: IFFALSE 5811
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5796: LD_INT 130
5798: PPUSH
5799: LD_INT 81
5801: PPUSH
5802: CALL_OW 428
5806: PPUSH
5807: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5811: LD_INT 3
5813: PPUSH
5814: LD_INT 3
5816: PPUSH
5817: LD_INT 2
5819: PPUSH
5820: LD_EXP 34
5824: PPUSH
5825: LD_EXP 35
5829: PPUSH
5830: CALL_OW 12
5834: PPUSH
5835: LD_INT 2
5837: PPUSH
5838: LD_INT 4
5840: PPUSH
5841: CALL 6376 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5845: LD_INT 3
5847: PPUSH
5848: LD_INT 3
5850: PPUSH
5851: LD_INT 8
5853: PPUSH
5854: LD_EXP 34
5858: PPUSH
5859: LD_EXP 35
5863: PPUSH
5864: CALL_OW 12
5868: PPUSH
5869: LD_INT 1
5871: PPUSH
5872: LD_INT 4
5874: PPUSH
5875: CALL 6376 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5879: LD_INT 3
5881: PPUSH
5882: LD_INT 3
5884: PPUSH
5885: LD_INT 67
5887: PPUSH
5888: LD_EXP 34
5892: PPUSH
5893: LD_EXP 35
5897: PPUSH
5898: CALL_OW 12
5902: PPUSH
5903: LD_INT 1
5905: PPUSH
5906: LD_INT 2
5908: PPUSH
5909: CALL 6376 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5913: LD_INT 3
5915: PPUSH
5916: LD_INT 3
5918: PPUSH
5919: LD_INT 21
5921: PPUSH
5922: LD_EXP 34
5926: PPUSH
5927: LD_EXP 35
5931: PPUSH
5932: CALL_OW 12
5936: PPUSH
5937: LD_INT 3
5939: PPUSH
5940: LD_INT 6
5942: PPUSH
5943: CALL 6376 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5947: LD_INT 3
5949: PPUSH
5950: LD_INT 3
5952: PPUSH
5953: LD_INT 17
5955: PPUSH
5956: LD_EXP 34
5960: PPUSH
5961: LD_EXP 35
5965: PPUSH
5966: CALL_OW 12
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: LD_INT 6
5976: PPUSH
5977: CALL 6376 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5981: LD_INT 3
5983: PPUSH
5984: LD_INT 3
5986: PPUSH
5987: LD_INT 32
5989: PPUSH
5990: LD_EXP 34
5994: PPUSH
5995: LD_EXP 35
5999: PPUSH
6000: CALL_OW 12
6004: PPUSH
6005: LD_INT 4
6007: PPUSH
6008: LD_INT 2
6010: PPUSH
6011: CALL 6376 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6015: LD_ADDR_VAR 0 2
6019: PUSH
6020: LD_INT 22
6022: PUSH
6023: LD_INT 3
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PUSH
6030: LD_INT 21
6032: PUSH
6033: LD_INT 3
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: PUSH
6040: LD_INT 30
6042: PUSH
6043: LD_INT 32
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: PPUSH
6055: CALL_OW 69
6059: PUSH
6060: FOR_IN
6061: IFFALSE 6101
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6063: LD_INT 3
6065: PPUSH
6066: LD_INT 3
6068: PPUSH
6069: LD_VAR 0 2
6073: PPUSH
6074: LD_EXP 34
6078: PPUSH
6079: LD_EXP 35
6083: PPUSH
6084: CALL_OW 12
6088: PPUSH
6089: LD_INT 1
6091: PPUSH
6092: LD_INT 1
6094: PPUSH
6095: CALL 6376 0 6
6099: GO 6060
6101: POP
6102: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
6103: LD_ADDR_VAR 0 2
6107: PUSH
6108: LD_INT 22
6110: PUSH
6111: LD_INT 3
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 21
6120: PUSH
6121: LD_INT 3
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 30
6130: PUSH
6131: LD_INT 31
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: LIST
6142: PPUSH
6143: CALL_OW 69
6147: PUSH
6148: FOR_IN
6149: IFFALSE 6177
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6151: LD_EXP 34
6155: PPUSH
6156: LD_EXP 35
6160: PPUSH
6161: CALL_OW 12
6165: PPUSH
6166: LD_VAR 0 2
6170: PPUSH
6171: CALL 6486 0 2
6175: GO 6148
6177: POP
6178: POP
// end ; end_of_file
6179: LD_VAR 0 1
6183: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6184: LD_INT 0
6186: PPUSH
6187: PPUSH
// if exist_mode then
6188: LD_VAR 0 2
6192: IFFALSE 6217
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
6194: LD_ADDR_VAR 0 4
6198: PUSH
6199: LD_EXP 44
6203: PUSH
6204: LD_VAR 0 1
6208: STR
6209: PPUSH
6210: CALL_OW 34
6214: ST_TO_ADDR
// end else
6215: GO 6232
// begin unit := NewCharacter ( ident ) ;
6217: LD_ADDR_VAR 0 4
6221: PUSH
6222: LD_VAR 0 1
6226: PPUSH
6227: CALL_OW 25
6231: ST_TO_ADDR
// end ; result := unit ;
6232: LD_ADDR_VAR 0 3
6236: PUSH
6237: LD_VAR 0 4
6241: ST_TO_ADDR
// end ;
6242: LD_VAR 0 3
6246: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6247: LD_INT 0
6249: PPUSH
6250: PPUSH
6251: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6252: LD_ADDR_VAR 0 6
6256: PUSH
6257: LD_VAR 0 1
6261: PUSH
6262: LD_INT 1
6264: PPUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: CALL_OW 12
6274: ARRAY
6275: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6276: LD_VAR 0 6
6280: PPUSH
6281: CALL_OW 258
6285: PUSH
6286: LD_INT 1
6288: EQUAL
6289: IFFALSE 6307
// Say ( speaker , dialogMID ) else
6291: LD_VAR 0 6
6295: PPUSH
6296: LD_VAR 0 2
6300: PPUSH
6301: CALL_OW 88
6305: GO 6321
// Say ( speaker , dialogFID ) ;
6307: LD_VAR 0 6
6311: PPUSH
6312: LD_VAR 0 3
6316: PPUSH
6317: CALL_OW 88
// result := speaker ;
6321: LD_ADDR_VAR 0 4
6325: PUSH
6326: LD_VAR 0 6
6330: ST_TO_ADDR
// end ;
6331: LD_VAR 0 4
6335: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6336: LD_INT 0
6338: PPUSH
6339: PPUSH
// for i in charactersList do
6340: LD_ADDR_VAR 0 4
6344: PUSH
6345: LD_VAR 0 1
6349: PUSH
6350: FOR_IN
6351: IFFALSE 6369
// SaveCharacters ( i , ident ) ;
6353: LD_VAR 0 4
6357: PPUSH
6358: LD_VAR 0 2
6362: PPUSH
6363: CALL_OW 38
6367: GO 6350
6369: POP
6370: POP
// end ;
6371: LD_VAR 0 3
6375: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
// for i = 1 to count do
6382: LD_ADDR_VAR 0 8
6386: PUSH
6387: DOUBLE
6388: LD_INT 1
6390: DEC
6391: ST_TO_ADDR
6392: LD_VAR 0 6
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6479
// begin uc_side = side ;
6400: LD_ADDR_OWVAR 20
6404: PUSH
6405: LD_VAR 0 1
6409: ST_TO_ADDR
// uc_nation = nation ;
6410: LD_ADDR_OWVAR 21
6414: PUSH
6415: LD_VAR 0 2
6419: ST_TO_ADDR
// hc_gallery =  ;
6420: LD_ADDR_OWVAR 33
6424: PUSH
6425: LD_STRING 
6427: ST_TO_ADDR
// hc_name =  ;
6428: LD_ADDR_OWVAR 26
6432: PUSH
6433: LD_STRING 
6435: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6436: LD_INT 0
6438: PPUSH
6439: LD_VAR 0 5
6443: PPUSH
6444: LD_VAR 0 4
6448: PPUSH
6449: CALL_OW 380
// un = CreateHuman ;
6453: LD_ADDR_VAR 0 10
6457: PUSH
6458: CALL_OW 44
6462: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6463: LD_VAR 0 10
6467: PPUSH
6468: LD_VAR 0 3
6472: PPUSH
6473: CALL_OW 52
// end ;
6477: GO 6397
6479: POP
6480: POP
// end ;
6481: LD_VAR 0 7
6485: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6486: LD_INT 0
6488: PPUSH
6489: PPUSH
6490: PPUSH
// uc_side := GetSide ( b ) ;
6491: LD_ADDR_OWVAR 20
6495: PUSH
6496: LD_VAR 0 2
6500: PPUSH
6501: CALL_OW 255
6505: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6506: LD_ADDR_OWVAR 21
6510: PUSH
6511: LD_VAR 0 2
6515: PPUSH
6516: CALL_OW 248
6520: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6521: LD_INT 0
6523: PPUSH
6524: LD_INT 1
6526: PPUSH
6527: LD_VAR 0 1
6531: PPUSH
6532: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6536: LD_ADDR_VAR 0 5
6540: PUSH
6541: LD_VAR 0 2
6545: PPUSH
6546: CALL_OW 254
6550: PUSH
6551: LD_INT 3
6553: MINUS
6554: ST_TO_ADDR
// if dir < 0 then
6555: LD_VAR 0 5
6559: PUSH
6560: LD_INT 0
6562: LESS
6563: IFFALSE 6579
// dir := 6 + dir ;
6565: LD_ADDR_VAR 0 5
6569: PUSH
6570: LD_INT 6
6572: PUSH
6573: LD_VAR 0 5
6577: PLUS
6578: ST_TO_ADDR
// un := CreateHuman ;
6579: LD_ADDR_VAR 0 4
6583: PUSH
6584: CALL_OW 44
6588: ST_TO_ADDR
// SetDir ( un , dir ) ;
6589: LD_VAR 0 4
6593: PPUSH
6594: LD_VAR 0 5
6598: PPUSH
6599: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6603: LD_VAR 0 4
6607: PPUSH
6608: LD_VAR 0 2
6612: PPUSH
6613: CALL_OW 52
// end ;
6617: LD_VAR 0 3
6621: RET
// export function PrepareDifficulty ; begin
6622: LD_INT 0
6624: PPUSH
// if Difficulty = 1 then
6625: LD_OWVAR 67
6629: PUSH
6630: LD_INT 1
6632: EQUAL
6633: IFFALSE 6651
// begin RuSolMinLevel = 2 ;
6635: LD_ADDR_EXP 34
6639: PUSH
6640: LD_INT 2
6642: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6643: LD_ADDR_EXP 35
6647: PUSH
6648: LD_INT 3
6650: ST_TO_ADDR
// end ; if Difficulty = 2 then
6651: LD_OWVAR 67
6655: PUSH
6656: LD_INT 2
6658: EQUAL
6659: IFFALSE 6677
// begin RuSolMinLevel = 3 ;
6661: LD_ADDR_EXP 34
6665: PUSH
6666: LD_INT 3
6668: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6669: LD_ADDR_EXP 35
6673: PUSH
6674: LD_INT 5
6676: ST_TO_ADDR
// end ; if Difficulty = 3 then
6677: LD_OWVAR 67
6681: PUSH
6682: LD_INT 3
6684: EQUAL
6685: IFFALSE 6703
// begin RuSolMinLevel = 4 ;
6687: LD_ADDR_EXP 34
6691: PUSH
6692: LD_INT 4
6694: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6695: LD_ADDR_EXP 35
6699: PUSH
6700: LD_INT 6
6702: ST_TO_ADDR
// end ; end ;
6703: LD_VAR 0 1
6707: RET
// export function ShowQuery1 ; begin
6708: LD_INT 0
6710: PPUSH
// case query ( QKill ) of 1 :
6711: LD_STRING QKill
6713: PPUSH
6714: CALL_OW 97
6718: PUSH
6719: LD_INT 1
6721: DOUBLE
6722: EQUAL
6723: IFTRUE 6727
6725: GO 6738
6727: POP
// begin result = 1 ;
6728: LD_ADDR_VAR 0 1
6732: PUSH
6733: LD_INT 1
6735: ST_TO_ADDR
// end ; 2 :
6736: GO 6777
6738: LD_INT 2
6740: DOUBLE
6741: EQUAL
6742: IFTRUE 6746
6744: GO 6757
6746: POP
// begin result = 2 ;
6747: LD_ADDR_VAR 0 1
6751: PUSH
6752: LD_INT 2
6754: ST_TO_ADDR
// end ; 3 :
6755: GO 6777
6757: LD_INT 3
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6776
6765: POP
// begin result = 3 ;
6766: LD_ADDR_VAR 0 1
6770: PUSH
6771: LD_INT 3
6773: ST_TO_ADDR
// end ; end ;
6774: GO 6777
6776: POP
// end ;
6777: LD_VAR 0 1
6781: RET
// export function ShowQuery2 ; begin
6782: LD_INT 0
6784: PPUSH
// case query ( QKill2 ) of 1 :
6785: LD_STRING QKill2
6787: PPUSH
6788: CALL_OW 97
6792: PUSH
6793: LD_INT 1
6795: DOUBLE
6796: EQUAL
6797: IFTRUE 6801
6799: GO 6812
6801: POP
// begin result = 1 ;
6802: LD_ADDR_VAR 0 1
6806: PUSH
6807: LD_INT 1
6809: ST_TO_ADDR
// end ; 2 :
6810: GO 6832
6812: LD_INT 2
6814: DOUBLE
6815: EQUAL
6816: IFTRUE 6820
6818: GO 6831
6820: POP
// begin result = 2 ;
6821: LD_ADDR_VAR 0 1
6825: PUSH
6826: LD_INT 2
6828: ST_TO_ADDR
// end ; end ;
6829: GO 6832
6831: POP
// end ;
6832: LD_VAR 0 1
6836: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6837: LD_INT 0
6839: PPUSH
6840: PPUSH
6841: PPUSH
6842: PPUSH
6843: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6844: LD_ADDR_VAR 0 8
6848: PUSH
6849: LD_INT 48
6851: PUSH
6852: LD_INT 49
6854: PUSH
6855: LD_INT 50
6857: PUSH
6858: LD_INT 20
6860: PUSH
6861: LD_INT 1
6863: PUSH
6864: LD_INT 51
6866: PUSH
6867: LD_INT 52
6869: PUSH
6870: LD_INT 69
6872: PUSH
6873: LD_INT 39
6875: PUSH
6876: LD_INT 34
6878: PUSH
6879: LD_INT 40
6881: PUSH
6882: LD_INT 53
6884: PUSH
6885: LD_INT 71
6887: PUSH
6888: LD_INT 57
6890: PUSH
6891: LD_INT 58
6893: PUSH
6894: LD_INT 44
6896: PUSH
6897: LD_INT 32
6899: PUSH
6900: LD_INT 27
6902: PUSH
6903: LD_INT 23
6905: PUSH
6906: LD_INT 33
6908: PUSH
6909: LD_INT 59
6911: PUSH
6912: LD_INT 54
6914: PUSH
6915: LD_INT 55
6917: PUSH
6918: LD_INT 56
6920: PUSH
6921: LD_INT 63
6923: PUSH
6924: LD_INT 64
6926: PUSH
6927: LD_INT 65
6929: PUSH
6930: LD_INT 30
6932: PUSH
6933: LD_INT 31
6935: PUSH
6936: LD_INT 21
6938: PUSH
6939: LD_INT 22
6941: PUSH
6942: LD_INT 25
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6979: LD_ADDR_VAR 0 5
6983: PUSH
6984: DOUBLE
6985: LD_INT 1
6987: DEC
6988: ST_TO_ADDR
6989: LD_VAR 0 8
6993: PUSH
6994: FOR_TO
6995: IFFALSE 7071
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6997: LD_VAR 0 8
7001: PUSH
7002: LD_VAR 0 5
7006: ARRAY
7007: PPUSH
7008: LD_VAR 0 1
7012: PPUSH
7013: CALL_OW 321
7017: PUSH
7018: LD_INT 1
7020: EQUAL
7021: PUSH
7022: LD_VAR 0 8
7026: PUSH
7027: LD_VAR 0 5
7031: ARRAY
7032: PPUSH
7033: LD_VAR 0 3
7037: PPUSH
7038: CALL_OW 482
7042: PUSH
7043: LD_INT 1
7045: EQUAL
7046: AND
7047: IFFALSE 7069
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
7049: LD_VAR 0 2
7053: PPUSH
7054: LD_VAR 0 8
7058: PUSH
7059: LD_VAR 0 5
7063: ARRAY
7064: PPUSH
7065: CALL_OW 184
7069: GO 6994
7071: POP
7072: POP
// end ;
7073: LD_VAR 0 4
7077: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7078: LD_INT 0
7080: PPUSH
7081: PPUSH
7082: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7083: LD_INT 22
7085: PUSH
7086: LD_VAR 0 1
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: LD_INT 21
7097: PUSH
7098: LD_INT 2
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PPUSH
7109: CALL_OW 69
7113: PUSH
7114: LD_VAR 0 3
7118: LESSEQUAL
7119: IFFALSE 7227
// begin for i = 1 to vehCount do
7121: LD_ADDR_VAR 0 9
7125: PUSH
7126: DOUBLE
7127: LD_INT 1
7129: DEC
7130: ST_TO_ADDR
7131: LD_VAR 0 3
7135: PUSH
7136: FOR_TO
7137: IFFALSE 7225
// begin weapon = weaponTab [ i ] ;
7139: LD_ADDR_VAR 0 10
7143: PUSH
7144: LD_VAR 0 4
7148: PUSH
7149: LD_VAR 0 9
7153: ARRAY
7154: ST_TO_ADDR
// if weapon = 46 then
7155: LD_VAR 0 10
7159: PUSH
7160: LD_INT 46
7162: EQUAL
7163: IFFALSE 7194
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
7165: LD_VAR 0 2
7169: PPUSH
7170: LD_INT 24
7172: PPUSH
7173: LD_VAR 0 5
7177: PPUSH
7178: LD_VAR 0 6
7182: PPUSH
7183: LD_VAR 0 10
7187: PPUSH
7188: CALL_OW 185
// end else
7192: GO 7223
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7194: LD_VAR 0 2
7198: PPUSH
7199: LD_VAR 0 7
7203: PPUSH
7204: LD_VAR 0 5
7208: PPUSH
7209: LD_VAR 0 6
7213: PPUSH
7214: LD_VAR 0 10
7218: PPUSH
7219: CALL_OW 185
// end ; end ;
7223: GO 7136
7225: POP
7226: POP
// end ; end ;
7227: LD_VAR 0 8
7231: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7232: LD_INT 0
7234: PPUSH
7235: PPUSH
7236: PPUSH
7237: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7238: LD_ADDR_VAR 0 8
7242: PUSH
7243: LD_INT 22
7245: PUSH
7246: LD_VAR 0 1
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 21
7257: PUSH
7258: LD_INT 2
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 24
7270: PUSH
7271: LD_INT 650
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: PPUSH
7287: CALL_OW 69
7291: ST_TO_ADDR
// if damageVehicles > 0 then
7292: LD_VAR 0 8
7296: PUSH
7297: LD_INT 0
7299: GREATER
7300: IFFALSE 7321
// ComMoveXY ( damageVehicles , repX , repY ) ;
7302: LD_VAR 0 8
7306: PPUSH
7307: LD_VAR 0 3
7311: PPUSH
7312: LD_VAR 0 4
7316: PPUSH
7317: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7321: LD_VAR 0 8
7325: PPUSH
7326: LD_INT 95
7328: PUSH
7329: LD_VAR 0 2
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: PUSH
7338: LD_INT 3
7340: PUSH
7341: LD_INT 58
7343: PUSH
7344: EMPTY
7345: LIST
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PPUSH
7355: CALL_OW 72
7359: PUSH
7360: LD_INT 0
7362: GREATER
7363: IFFALSE 7430
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7365: LD_ADDR_VAR 0 6
7369: PUSH
7370: LD_VAR 0 8
7374: PPUSH
7375: LD_INT 95
7377: PUSH
7378: LD_VAR 0 2
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PUSH
7387: LD_INT 3
7389: PUSH
7390: LD_INT 58
7392: PUSH
7393: EMPTY
7394: LIST
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PPUSH
7404: CALL_OW 72
7408: PUSH
7409: FOR_IN
7410: IFFALSE 7428
// ComExitVehicle ( UnitsInside ( i ) ) ;
7412: LD_VAR 0 6
7416: PPUSH
7417: CALL_OW 313
7421: PPUSH
7422: CALL_OW 121
7426: GO 7409
7428: POP
7429: POP
// end ;
7430: LD_VAR 0 5
7434: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7435: LD_INT 0
7437: PPUSH
7438: PPUSH
7439: PPUSH
7440: PPUSH
7441: PPUSH
7442: PPUSH
7443: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7444: LD_ADDR_VAR 0 8
7448: PUSH
7449: LD_INT 22
7451: PUSH
7452: LD_VAR 0 1
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PUSH
7461: LD_INT 21
7463: PUSH
7464: LD_INT 2
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: LD_INT 24
7473: PUSH
7474: LD_INT 660
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 3
7483: PUSH
7484: LD_INT 58
7486: PUSH
7487: EMPTY
7488: LIST
7489: PUSH
7490: LD_INT 2
7492: PUSH
7493: LD_INT 34
7495: PUSH
7496: LD_INT 43
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: LD_INT 34
7505: PUSH
7506: LD_INT 44
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PUSH
7513: LD_INT 34
7515: PUSH
7516: LD_INT 46
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: PPUSH
7540: CALL_OW 69
7544: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7545: LD_INT 22
7547: PUSH
7548: LD_VAR 0 1
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 21
7559: PUSH
7560: LD_INT 2
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 24
7569: PUSH
7570: LD_INT 1000
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 3
7579: PUSH
7580: LD_INT 58
7582: PUSH
7583: EMPTY
7584: LIST
7585: PUSH
7586: LD_INT 2
7588: PUSH
7589: LD_INT 34
7591: PUSH
7592: LD_INT 43
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 34
7601: PUSH
7602: LD_INT 44
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 34
7611: PUSH
7612: LD_INT 46
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 69
7640: PUSH
7641: LD_INT 5
7643: PUSH
7644: LD_INT 6
7646: PUSH
7647: LD_INT 6
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: LIST
7654: PUSH
7655: LD_OWVAR 67
7659: ARRAY
7660: EQUAL
7661: IFFALSE 7917
// if seeEnemy = 0 then
7663: LD_VAR 0 11
7667: PUSH
7668: LD_INT 0
7670: EQUAL
7671: IFFALSE 7917
// repeat wait ( 0 0$1 ) ;
7673: LD_INT 35
7675: PPUSH
7676: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7680: LD_ADDR_VAR 0 8
7684: PUSH
7685: LD_INT 22
7687: PUSH
7688: LD_VAR 0 1
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 21
7699: PUSH
7700: LD_INT 2
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: LD_INT 24
7709: PUSH
7710: LD_INT 660
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: LD_INT 3
7719: PUSH
7720: LD_INT 58
7722: PUSH
7723: EMPTY
7724: LIST
7725: PUSH
7726: LD_INT 2
7728: PUSH
7729: LD_INT 34
7731: PUSH
7732: LD_INT 43
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 34
7741: PUSH
7742: LD_INT 44
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 34
7751: PUSH
7752: LD_INT 46
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: LIST
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7781: LD_INT 22
7783: PUSH
7784: LD_VAR 0 1
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: LD_INT 95
7795: PUSH
7796: LD_VAR 0 2
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PPUSH
7809: CALL_OW 69
7813: NOT
7814: PUSH
7815: LD_VAR 0 11
7819: PUSH
7820: LD_INT 0
7822: EQUAL
7823: AND
7824: IFFALSE 7879
// for i := 1 to wayX do
7826: LD_ADDR_VAR 0 6
7830: PUSH
7831: DOUBLE
7832: LD_INT 1
7834: DEC
7835: ST_TO_ADDR
7836: LD_VAR 0 3
7840: PUSH
7841: FOR_TO
7842: IFFALSE 7877
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7844: LD_VAR 0 8
7848: PPUSH
7849: LD_VAR 0 3
7853: PUSH
7854: LD_VAR 0 6
7858: ARRAY
7859: PPUSH
7860: LD_VAR 0 4
7864: PUSH
7865: LD_VAR 0 6
7869: ARRAY
7870: PPUSH
7871: CALL_OW 114
7875: GO 7841
7877: POP
7878: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7879: LD_INT 22
7881: PUSH
7882: LD_VAR 0 1
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: LD_INT 95
7893: PUSH
7894: LD_VAR 0 2
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PPUSH
7907: CALL_OW 69
7911: PUSH
7912: LD_INT 0
7914: GREATER
7915: IFFALSE 7673
// seeEnemy = 1 ;
7917: LD_ADDR_VAR 0 11
7921: PUSH
7922: LD_INT 1
7924: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7925: LD_INT 35
7927: PPUSH
7928: CALL_OW 67
// for j in vehiclesOK do
7932: LD_ADDR_VAR 0 7
7936: PUSH
7937: LD_VAR 0 8
7941: PUSH
7942: FOR_IN
7943: IFFALSE 8156
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7945: LD_ADDR_VAR 0 9
7949: PUSH
7950: LD_INT 81
7952: PUSH
7953: LD_VAR 0 1
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: PUSH
7962: LD_INT 101
7964: PUSH
7965: LD_INT 1
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PPUSH
7976: CALL_OW 69
7980: PUSH
7981: LD_EXP 45
7985: DIFF
7986: PPUSH
7987: LD_VAR 0 7
7991: PPUSH
7992: CALL_OW 74
7996: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7997: LD_ADDR_VAR 0 10
8001: PUSH
8002: LD_INT 81
8004: PUSH
8005: LD_VAR 0 1
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 101
8016: PUSH
8017: LD_INT 1
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 2
8026: PUSH
8027: LD_INT 59
8029: PUSH
8030: EMPTY
8031: LIST
8032: PUSH
8033: LD_INT 21
8035: PUSH
8036: LD_INT 1
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PUSH
8043: LD_INT 21
8045: PUSH
8046: LD_INT 2
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: PUSH
8064: EMPTY
8065: LIST
8066: PPUSH
8067: CALL_OW 69
8071: PUSH
8072: LD_EXP 45
8076: DIFF
8077: PPUSH
8078: LD_VAR 0 7
8082: PPUSH
8083: CALL_OW 74
8087: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
8088: LD_VAR 0 7
8092: PPUSH
8093: LD_VAR 0 9
8097: PPUSH
8098: CALL_OW 296
8102: PUSH
8103: LD_INT 8
8105: PLUS
8106: PUSH
8107: LD_VAR 0 7
8111: PPUSH
8112: LD_VAR 0 10
8116: PPUSH
8117: CALL_OW 296
8121: LESS
8122: IFFALSE 8140
// ComAttackUnit ( j , target1 ) else
8124: LD_VAR 0 7
8128: PPUSH
8129: LD_VAR 0 9
8133: PPUSH
8134: CALL_OW 115
8138: GO 8154
// ComAttackUnit ( j , target2 ) ;
8140: LD_VAR 0 7
8144: PPUSH
8145: LD_VAR 0 10
8149: PPUSH
8150: CALL_OW 115
// end ;
8154: GO 7942
8156: POP
8157: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
8158: LD_INT 22
8160: PUSH
8161: LD_VAR 0 1
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 21
8172: PUSH
8173: LD_INT 2
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 24
8182: PUSH
8183: LD_INT 1000
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 3
8192: PUSH
8193: LD_INT 58
8195: PUSH
8196: EMPTY
8197: LIST
8198: PUSH
8199: LD_INT 2
8201: PUSH
8202: LD_INT 34
8204: PUSH
8205: LD_INT 43
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 34
8214: PUSH
8215: LD_INT 44
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 34
8224: PUSH
8225: LD_INT 46
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: LIST
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: PPUSH
8249: CALL_OW 69
8253: PUSH
8254: LD_INT 0
8256: EQUAL
8257: IFFALSE 7925
// seeEnemy = 0 ;
8259: LD_ADDR_VAR 0 11
8263: PUSH
8264: LD_INT 0
8266: ST_TO_ADDR
// end ;
8267: LD_VAR 0 5
8271: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
8279: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8280: LD_ADDR_VAR 0 8
8284: PUSH
8285: LD_VAR 0 2
8289: PPUSH
8290: CALL_OW 313
8294: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8295: LD_ADDR_VAR 0 9
8299: PUSH
8300: LD_VAR 0 3
8304: PPUSH
8305: LD_INT 22
8307: PUSH
8308: LD_VAR 0 1
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 25
8319: PUSH
8320: LD_INT 2
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: PUSH
8327: LD_INT 24
8329: PUSH
8330: LD_INT 750
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PUSH
8337: LD_INT 3
8339: PUSH
8340: LD_INT 54
8342: PUSH
8343: EMPTY
8344: LIST
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: PPUSH
8356: CALL_OW 70
8360: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8361: LD_ADDR_VAR 0 6
8365: PUSH
8366: LD_VAR 0 3
8370: PPUSH
8371: LD_INT 22
8373: PUSH
8374: LD_VAR 0 1
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PUSH
8383: LD_INT 21
8385: PUSH
8386: LD_INT 3
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_INT 3
8395: PUSH
8396: LD_INT 24
8398: PUSH
8399: LD_INT 1000
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: LIST
8414: PUSH
8415: EMPTY
8416: LIST
8417: PPUSH
8418: CALL_OW 70
8422: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8423: LD_VAR 0 6
8427: NOT
8428: PUSH
8429: LD_INT 22
8431: PUSH
8432: LD_VAR 0 1
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 25
8443: PUSH
8444: LD_INT 2
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 24
8453: PUSH
8454: LD_INT 250
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: LIST
8465: PPUSH
8466: CALL_OW 69
8470: NOT
8471: AND
8472: IFFALSE 8476
// exit ;
8474: GO 8658
// if buildings_list > 0 and engineerOkInside then
8476: LD_VAR 0 6
8480: PUSH
8481: LD_INT 0
8483: GREATER
8484: PUSH
8485: LD_VAR 0 8
8489: AND
8490: IFFALSE 8501
// ComExitBuilding ( engineerOkInside ) ;
8492: LD_VAR 0 8
8496: PPUSH
8497: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8501: LD_VAR 0 6
8505: PUSH
8506: LD_INT 0
8508: GREATER
8509: PUSH
8510: LD_VAR 0 9
8514: PUSH
8515: LD_INT 0
8517: GREATER
8518: AND
8519: IFFALSE 8539
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8521: LD_VAR 0 9
8525: PPUSH
8526: LD_VAR 0 6
8530: PUSH
8531: LD_INT 1
8533: ARRAY
8534: PPUSH
8535: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8539: LD_VAR 0 6
8543: PUSH
8544: LD_INT 0
8546: EQUAL
8547: PUSH
8548: LD_VAR 0 4
8552: PUSH
8553: LD_INT 0
8555: EQUAL
8556: AND
8557: PUSH
8558: LD_VAR 0 9
8562: PUSH
8563: LD_INT 0
8565: GREATER
8566: AND
8567: IFFALSE 8583
// ComEnterUnit ( engineerOkOutside , building ) ;
8569: LD_VAR 0 9
8573: PPUSH
8574: LD_VAR 0 2
8578: PPUSH
8579: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8583: LD_VAR 0 9
8587: PUSH
8588: LD_INT 0
8590: GREATER
8591: PUSH
8592: LD_VAR 0 6
8596: PUSH
8597: LD_INT 0
8599: EQUAL
8600: AND
8601: PUSH
8602: LD_VAR 0 4
8606: PUSH
8607: LD_INT 0
8609: GREATER
8610: AND
8611: IFFALSE 8658
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8613: LD_VAR 0 9
8617: PPUSH
8618: LD_VAR 0 4
8622: PUSH
8623: LD_INT 1
8625: ARRAY
8626: PPUSH
8627: LD_VAR 0 4
8631: PUSH
8632: LD_INT 2
8634: ARRAY
8635: PPUSH
8636: LD_VAR 0 4
8640: PUSH
8641: LD_INT 3
8643: ARRAY
8644: PPUSH
8645: LD_VAR 0 4
8649: PUSH
8650: LD_INT 4
8652: ARRAY
8653: PPUSH
8654: CALL_OW 145
// end ;
8658: LD_VAR 0 5
8662: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8663: LD_INT 0
8665: PPUSH
8666: PPUSH
8667: PPUSH
8668: PPUSH
8669: PPUSH
8670: PPUSH
8671: PPUSH
8672: PPUSH
8673: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8674: LD_ADDR_VAR 0 6
8678: PUSH
8679: LD_INT 22
8681: PUSH
8682: LD_VAR 0 1
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: LD_INT 25
8693: PUSH
8694: LD_INT 4
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: LD_INT 23
8703: PUSH
8704: LD_INT 2
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: PUSH
8711: LD_INT 24
8713: PUSH
8714: LD_INT 251
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: PPUSH
8727: CALL_OW 69
8731: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8732: LD_ADDR_VAR 0 7
8736: PUSH
8737: LD_VAR 0 3
8741: PPUSH
8742: LD_INT 22
8744: PUSH
8745: LD_VAR 0 1
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 23
8756: PUSH
8757: LD_INT 2
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: LD_INT 25
8766: PUSH
8767: LD_INT 4
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: PUSH
8774: LD_INT 50
8776: PUSH
8777: EMPTY
8778: LIST
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: PPUSH
8786: CALL_OW 70
8790: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8791: LD_ADDR_VAR 0 10
8795: PUSH
8796: LD_VAR 0 3
8800: PPUSH
8801: LD_INT 22
8803: PUSH
8804: LD_VAR 0 1
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 21
8815: PUSH
8816: LD_INT 1
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: LD_INT 3
8825: PUSH
8826: LD_INT 25
8828: PUSH
8829: LD_INT 3
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: LD_INT 3
8842: PUSH
8843: LD_INT 24
8845: PUSH
8846: LD_INT 750
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: PPUSH
8863: CALL_OW 70
8867: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8868: LD_ADDR_VAR 0 11
8872: PUSH
8873: LD_VAR 0 2
8877: PPUSH
8878: LD_INT 22
8880: PUSH
8881: LD_VAR 0 1
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 21
8892: PUSH
8893: LD_INT 1
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 3
8902: PUSH
8903: LD_INT 25
8905: PUSH
8906: LD_INT 3
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PUSH
8917: LD_INT 3
8919: PUSH
8920: LD_INT 24
8922: PUSH
8923: LD_INT 1000
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: PPUSH
8940: CALL_OW 70
8944: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8945: LD_VAR 0 10
8949: NOT
8950: PUSH
8951: LD_VAR 0 11
8955: NOT
8956: AND
8957: PUSH
8958: LD_VAR 0 6
8962: NOT
8963: AND
8964: IFFALSE 8968
// exit ;
8966: GO 9202
// if damageUnits > 0 and sci_list > 0 then
8968: LD_VAR 0 10
8972: PUSH
8973: LD_INT 0
8975: GREATER
8976: PUSH
8977: LD_VAR 0 6
8981: PUSH
8982: LD_INT 0
8984: GREATER
8985: AND
8986: IFFALSE 9002
// ComMoveToArea ( damageUnits , healArea ) ;
8988: LD_VAR 0 10
8992: PPUSH
8993: LD_VAR 0 2
8997: PPUSH
8998: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
9002: LD_VAR 0 11
9006: PUSH
9007: LD_INT 0
9009: GREATER
9010: PUSH
9011: LD_VAR 0 6
9015: PUSH
9016: LD_INT 0
9018: GREATER
9019: AND
9020: IFFALSE 9031
// ComExitBuilding ( sci_list ) ;
9022: LD_VAR 0 6
9026: PPUSH
9027: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
9031: LD_VAR 0 11
9035: PUSH
9036: LD_INT 0
9038: GREATER
9039: PUSH
9040: LD_VAR 0 7
9044: PUSH
9045: LD_INT 0
9047: GREATER
9048: AND
9049: IFFALSE 9069
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9051: LD_VAR 0 7
9055: PPUSH
9056: LD_VAR 0 11
9060: PUSH
9061: LD_INT 1
9063: ARRAY
9064: PPUSH
9065: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
9069: LD_VAR 0 10
9073: PUSH
9074: LD_INT 0
9076: EQUAL
9077: PUSH
9078: LD_VAR 0 11
9082: PUSH
9083: LD_INT 0
9085: EQUAL
9086: AND
9087: PUSH
9088: LD_VAR 0 7
9092: PUSH
9093: LD_INT 0
9095: GREATER
9096: AND
9097: IFFALSE 9202
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9099: LD_ADDR_VAR 0 12
9103: PUSH
9104: LD_INT 22
9106: PUSH
9107: LD_VAR 0 1
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: LD_INT 21
9118: PUSH
9119: LD_INT 3
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: LD_INT 30
9128: PUSH
9129: LD_INT 8
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: LIST
9140: PPUSH
9141: CALL_OW 69
9145: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
9146: LD_ADDR_VAR 0 13
9150: PUSH
9151: LD_INT 1
9153: PPUSH
9154: LD_VAR 0 12
9158: PPUSH
9159: CALL_OW 12
9163: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9164: LD_VAR 0 7
9168: PPUSH
9169: LD_INT 3
9171: PUSH
9172: LD_INT 60
9174: PUSH
9175: EMPTY
9176: LIST
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PPUSH
9182: CALL_OW 72
9186: PPUSH
9187: LD_VAR 0 12
9191: PUSH
9192: LD_VAR 0 13
9196: ARRAY
9197: PPUSH
9198: CALL_OW 120
// end ; end ;
9202: LD_VAR 0 5
9206: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
9207: LD_INT 0
9209: PPUSH
9210: PPUSH
9211: PPUSH
9212: PPUSH
// tmpTab = [ ] ;
9213: LD_ADDR_VAR 0 6
9217: PUSH
9218: EMPTY
9219: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 30
9234: PUSH
9235: LD_INT 32
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PPUSH
9246: CALL_OW 69
9250: PUSH
9251: LD_INT 0
9253: GREATER
9254: IFFALSE 9337
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9256: LD_ADDR_VAR 0 4
9260: PUSH
9261: LD_INT 22
9263: PUSH
9264: LD_VAR 0 1
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PUSH
9273: LD_INT 30
9275: PUSH
9276: LD_INT 32
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PPUSH
9287: CALL_OW 69
9291: PUSH
9292: FOR_IN
9293: IFFALSE 9335
// begin for j in UnitsInside ( i ) do
9295: LD_ADDR_VAR 0 5
9299: PUSH
9300: LD_VAR 0 4
9304: PPUSH
9305: CALL_OW 313
9309: PUSH
9310: FOR_IN
9311: IFFALSE 9331
// tmpTab = tmpTab ^ j ;
9313: LD_ADDR_VAR 0 6
9317: PUSH
9318: LD_VAR 0 6
9322: PUSH
9323: LD_VAR 0 5
9327: ADD
9328: ST_TO_ADDR
9329: GO 9310
9331: POP
9332: POP
// end ;
9333: GO 9292
9335: POP
9336: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9337: LD_VAR 0 6
9341: PPUSH
9342: LD_VAR 0 2
9346: PPUSH
9347: CALL_OW 250
9351: PPUSH
9352: LD_VAR 0 2
9356: PPUSH
9357: CALL_OW 251
9361: PPUSH
9362: CALL_OW 114
// end ;
9366: LD_VAR 0 3
9370: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9371: LD_INT 0
9373: PPUSH
9374: PPUSH
9375: PPUSH
9376: PPUSH
// enable ;
9377: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9378: LD_ADDR_VAR 0 7
9382: PUSH
9383: LD_VAR 0 3
9387: PPUSH
9388: CALL_OW 435
9392: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9393: LD_ADDR_VAR 0 6
9397: PUSH
9398: LD_INT 22
9400: PUSH
9401: LD_VAR 0 1
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PUSH
9410: LD_INT 34
9412: PUSH
9413: LD_VAR 0 2
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PPUSH
9426: CALL_OW 69
9430: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9431: LD_VAR 0 6
9435: PUSH
9436: LD_INT 0
9438: GREATER
9439: PUSH
9440: LD_VAR 0 3
9444: PPUSH
9445: CALL_OW 435
9449: AND
9450: PUSH
9451: LD_VAR 0 7
9455: PUSH
9456: LD_INT 0
9458: GREATER
9459: AND
9460: IFFALSE 9509
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9462: LD_VAR 0 6
9466: PUSH
9467: LD_INT 1
9469: ARRAY
9470: PPUSH
9471: LD_VAR 0 7
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: PPUSH
9480: LD_VAR 0 7
9484: PUSH
9485: LD_INT 2
9487: ARRAY
9488: PPUSH
9489: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9493: LD_VAR 0 6
9497: PUSH
9498: LD_INT 1
9500: ARRAY
9501: PPUSH
9502: LD_INT 100
9504: PPUSH
9505: CALL_OW 240
// end ; end ;
9509: LD_VAR 0 4
9513: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9514: LD_INT 0
9516: PPUSH
9517: PPUSH
9518: PPUSH
9519: PPUSH
9520: PPUSH
9521: PPUSH
9522: PPUSH
9523: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9524: LD_ADDR_VAR 0 6
9528: PUSH
9529: LD_VAR 0 2
9533: PPUSH
9534: LD_INT 22
9536: PUSH
9537: LD_VAR 0 1
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 56
9548: PUSH
9549: EMPTY
9550: LIST
9551: PUSH
9552: LD_INT 24
9554: PUSH
9555: LD_INT 700
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 3
9564: PUSH
9565: LD_INT 60
9567: PUSH
9568: EMPTY
9569: LIST
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: LD_INT 2
9577: PUSH
9578: LD_INT 25
9580: PUSH
9581: LD_INT 1
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 25
9590: PUSH
9591: LD_INT 5
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 25
9600: PUSH
9601: LD_INT 8
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 25
9610: PUSH
9611: LD_INT 9
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: PPUSH
9632: CALL_OW 70
9636: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9637: LD_ADDR_VAR 0 7
9641: PUSH
9642: LD_VAR 0 2
9646: PPUSH
9647: LD_INT 22
9649: PUSH
9650: LD_VAR 0 1
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PUSH
9659: LD_INT 30
9661: PUSH
9662: LD_INT 32
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: PUSH
9669: LD_INT 58
9671: PUSH
9672: EMPTY
9673: LIST
9674: PUSH
9675: LD_INT 24
9677: PUSH
9678: LD_INT 251
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: PPUSH
9691: CALL_OW 70
9695: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9696: LD_ADDR_VAR 0 9
9700: PUSH
9701: LD_VAR 0 2
9705: PPUSH
9706: LD_INT 22
9708: PUSH
9709: LD_VAR 0 1
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: LD_INT 2
9720: PUSH
9721: LD_INT 30
9723: PUSH
9724: LD_INT 4
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 30
9733: PUSH
9734: LD_INT 5
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 24
9748: PUSH
9749: LD_INT 251
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: LIST
9760: PPUSH
9761: CALL_OW 70
9765: ST_TO_ADDR
// if barrackList > 0 then
9766: LD_VAR 0 9
9770: PUSH
9771: LD_INT 0
9773: GREATER
9774: IFFALSE 9922
// begin if turretList = 0 then
9776: LD_VAR 0 7
9780: PUSH
9781: LD_INT 0
9783: EQUAL
9784: IFFALSE 9826
// begin if soldiers_list > 0 then
9786: LD_VAR 0 6
9790: PUSH
9791: LD_INT 0
9793: GREATER
9794: IFFALSE 9824
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9796: LD_VAR 0 6
9800: PPUSH
9801: LD_VAR 0 9
9805: PUSH
9806: LD_INT 1
9808: PPUSH
9809: LD_VAR 0 9
9813: PPUSH
9814: CALL_OW 12
9818: ARRAY
9819: PPUSH
9820: CALL_OW 120
// end else
9824: GO 9922
// begin for i in barrackList do
9826: LD_ADDR_VAR 0 4
9830: PUSH
9831: LD_VAR 0 9
9835: PUSH
9836: FOR_IN
9837: IFFALSE 9920
// begin insideUnits = UnitsInside ( i ) ;
9839: LD_ADDR_VAR 0 10
9843: PUSH
9844: LD_VAR 0 4
9848: PPUSH
9849: CALL_OW 313
9853: ST_TO_ADDR
// if insideUnits > 0 then
9854: LD_VAR 0 10
9858: PUSH
9859: LD_INT 0
9861: GREATER
9862: IFFALSE 9886
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9864: LD_VAR 0 10
9868: PUSH
9869: LD_INT 1
9871: ARRAY
9872: PPUSH
9873: LD_VAR 0 7
9877: PUSH
9878: LD_INT 1
9880: ARRAY
9881: PPUSH
9882: CALL_OW 120
// if soldiers_list > 0 then
9886: LD_VAR 0 6
9890: PUSH
9891: LD_INT 0
9893: GREATER
9894: IFFALSE 9918
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9896: LD_VAR 0 6
9900: PUSH
9901: LD_INT 1
9903: ARRAY
9904: PPUSH
9905: LD_VAR 0 7
9909: PUSH
9910: LD_INT 1
9912: ARRAY
9913: PPUSH
9914: CALL_OW 120
// end ;
9918: GO 9836
9920: POP
9921: POP
// end ; end ; end ;
9922: LD_VAR 0 3
9926: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9927: LD_INT 0
9929: PPUSH
9930: PPUSH
9931: PPUSH
9932: PPUSH
9933: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9934: LD_ADDR_VAR 0 6
9938: PUSH
9939: LD_INT 22
9941: PUSH
9942: LD_VAR 0 1
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: LD_INT 2
9953: PUSH
9954: LD_INT 30
9956: PUSH
9957: LD_INT 31
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: LD_INT 30
9966: PUSH
9967: LD_INT 32
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PUSH
9974: LD_INT 30
9976: PUSH
9977: LD_INT 33
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: LD_INT 30
9986: PUSH
9987: LD_INT 4
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: LD_INT 30
9996: PUSH
9997: LD_INT 5
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PPUSH
10016: CALL_OW 69
10020: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10021: LD_ADDR_VAR 0 7
10025: PUSH
10026: LD_INT 22
10028: PUSH
10029: LD_VAR 0 2
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 21
10040: PUSH
10041: LD_INT 3
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 58
10050: PUSH
10051: EMPTY
10052: LIST
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: LIST
10058: PPUSH
10059: CALL_OW 69
10063: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
10064: LD_VAR 0 6
10068: PUSH
10069: LD_INT 0
10071: GREATER
10072: PUSH
10073: LD_VAR 0 7
10077: PUSH
10078: LD_INT 0
10080: GREATER
10081: AND
10082: IFFALSE 10152
// begin for i in turretsList do
10084: LD_ADDR_VAR 0 4
10088: PUSH
10089: LD_VAR 0 6
10093: PUSH
10094: FOR_IN
10095: IFFALSE 10150
// begin for j in enemyBuildings do
10097: LD_ADDR_VAR 0 5
10101: PUSH
10102: LD_VAR 0 7
10106: PUSH
10107: FOR_IN
10108: IFFALSE 10146
// begin if GetDistUnits ( i , j ) < 20 then
10110: LD_VAR 0 4
10114: PPUSH
10115: LD_VAR 0 5
10119: PPUSH
10120: CALL_OW 296
10124: PUSH
10125: LD_INT 20
10127: LESS
10128: IFFALSE 10144
// begin ComAttackUnit ( i , j ) ;
10130: LD_VAR 0 4
10134: PPUSH
10135: LD_VAR 0 5
10139: PPUSH
10140: CALL_OW 115
// end ; end ;
10144: GO 10107
10146: POP
10147: POP
// end ;
10148: GO 10094
10150: POP
10151: POP
// end ; end ;
10152: LD_VAR 0 3
10156: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10157: LD_INT 0
10159: PPUSH
10160: PPUSH
10161: PPUSH
10162: PPUSH
10163: PPUSH
10164: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10165: LD_ADDR_VAR 0 8
10169: PUSH
10170: LD_INT 22
10172: PUSH
10173: LD_VAR 0 1
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: LD_INT 21
10184: PUSH
10185: LD_INT 2
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: LD_INT 34
10194: PUSH
10195: LD_INT 52
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: LIST
10206: PPUSH
10207: CALL_OW 69
10211: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10212: LD_ADDR_VAR 0 9
10216: PUSH
10217: LD_INT 22
10219: PUSH
10220: LD_VAR 0 1
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 21
10231: PUSH
10232: LD_INT 3
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 3
10241: PUSH
10242: LD_INT 24
10244: PUSH
10245: LD_INT 1000
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: LIST
10260: PUSH
10261: EMPTY
10262: LIST
10263: PPUSH
10264: CALL_OW 69
10268: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10269: LD_VAR 0 9
10273: PUSH
10274: LD_INT 0
10276: GREATER
10277: PUSH
10278: LD_VAR 0 8
10282: PPUSH
10283: LD_INT 24
10285: PUSH
10286: LD_INT 750
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PPUSH
10293: CALL_OW 72
10297: PUSH
10298: LD_INT 0
10300: GREATER
10301: AND
10302: IFFALSE 10337
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10304: LD_VAR 0 8
10308: PPUSH
10309: LD_INT 24
10311: PUSH
10312: LD_INT 750
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PPUSH
10319: CALL_OW 72
10323: PPUSH
10324: LD_VAR 0 9
10328: PUSH
10329: LD_INT 1
10331: ARRAY
10332: PPUSH
10333: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10337: LD_VAR 0 8
10341: PPUSH
10342: LD_INT 3
10344: PUSH
10345: LD_INT 24
10347: PUSH
10348: LD_INT 750
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PPUSH
10359: CALL_OW 72
10363: PUSH
10364: LD_INT 0
10366: GREATER
10367: IFFALSE 10405
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10369: LD_VAR 0 8
10373: PPUSH
10374: LD_INT 3
10376: PUSH
10377: LD_INT 24
10379: PUSH
10380: LD_INT 750
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PPUSH
10391: CALL_OW 72
10395: PPUSH
10396: LD_VAR 0 2
10400: PPUSH
10401: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10405: LD_VAR 0 8
10409: PUSH
10410: LD_INT 0
10412: GREATER
10413: PUSH
10414: LD_VAR 0 9
10418: PUSH
10419: LD_INT 0
10421: EQUAL
10422: AND
10423: PUSH
10424: LD_VAR 0 3
10428: PUSH
10429: LD_INT 0
10431: GREATER
10432: AND
10433: IFFALSE 10480
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10435: LD_VAR 0 8
10439: PPUSH
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 1
10447: ARRAY
10448: PPUSH
10449: LD_VAR 0 3
10453: PUSH
10454: LD_INT 2
10456: ARRAY
10457: PPUSH
10458: LD_VAR 0 3
10462: PUSH
10463: LD_INT 3
10465: ARRAY
10466: PPUSH
10467: LD_VAR 0 3
10471: PUSH
10472: LD_INT 4
10474: ARRAY
10475: PPUSH
10476: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10480: LD_VAR 0 2
10484: PPUSH
10485: LD_INT 22
10487: PUSH
10488: LD_VAR 0 1
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: LD_INT 21
10499: PUSH
10500: LD_INT 2
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 34
10509: PUSH
10510: LD_INT 52
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 3
10519: PUSH
10520: LD_INT 24
10522: PUSH
10523: LD_INT 750
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: PPUSH
10540: CALL_OW 70
10544: PUSH
10545: LD_INT 0
10547: GREATER
10548: IFFALSE 10750
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10550: LD_ADDR_VAR 0 5
10554: PUSH
10555: LD_VAR 0 2
10559: PPUSH
10560: LD_INT 22
10562: PUSH
10563: LD_VAR 0 1
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: LD_INT 21
10574: PUSH
10575: LD_INT 2
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PUSH
10582: LD_INT 34
10584: PUSH
10585: LD_INT 52
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PUSH
10592: LD_INT 3
10594: PUSH
10595: LD_INT 24
10597: PUSH
10598: LD_INT 750
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: PPUSH
10615: CALL_OW 70
10619: PUSH
10620: FOR_IN
10621: IFFALSE 10748
// begin mechTmp = UnitsInside ( i ) ;
10623: LD_ADDR_VAR 0 6
10627: PUSH
10628: LD_VAR 0 5
10632: PPUSH
10633: CALL_OW 313
10637: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10638: LD_VAR 0 6
10642: PPUSH
10643: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10647: LD_VAR 0 6
10651: PPUSH
10652: LD_VAR 0 7
10656: PPUSH
10657: CALL_OW 189
// wait ( 0 0$2 ) ;
10661: LD_INT 70
10663: PPUSH
10664: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10668: LD_VAR 0 6
10672: PPUSH
10673: LD_VAR 0 2
10677: PPUSH
10678: LD_INT 22
10680: PUSH
10681: LD_VAR 0 1
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: PUSH
10690: LD_INT 21
10692: PUSH
10693: LD_INT 2
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: PUSH
10700: LD_INT 34
10702: PUSH
10703: LD_INT 52
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 24
10712: PUSH
10713: LD_INT 1000
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 58
10722: PUSH
10723: EMPTY
10724: LIST
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: PPUSH
10733: CALL_OW 70
10737: PUSH
10738: LD_INT 1
10740: ARRAY
10741: PPUSH
10742: CALL_OW 180
// end ;
10746: GO 10620
10748: POP
10749: POP
// end ; end ;
10750: LD_VAR 0 4
10754: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10755: LD_INT 0
10757: PPUSH
10758: PPUSH
10759: PPUSH
10760: PPUSH
10761: PPUSH
10762: PPUSH
10763: PPUSH
10764: PPUSH
10765: PPUSH
10766: PPUSH
10767: PPUSH
// for i = 1 to medicCount do
10768: LD_ADDR_VAR 0 14
10772: PUSH
10773: DOUBLE
10774: LD_INT 1
10776: DEC
10777: ST_TO_ADDR
10778: LD_VAR 0 7
10782: PUSH
10783: FOR_TO
10784: IFFALSE 10866
// begin uc_side = side ;
10786: LD_ADDR_OWVAR 20
10790: PUSH
10791: LD_VAR 0 1
10795: ST_TO_ADDR
// uc_nation = nation ;
10796: LD_ADDR_OWVAR 21
10800: PUSH
10801: LD_VAR 0 2
10805: ST_TO_ADDR
// hc_name =  ;
10806: LD_ADDR_OWVAR 26
10810: PUSH
10811: LD_STRING 
10813: ST_TO_ADDR
// hc_gallery =  ;
10814: LD_ADDR_OWVAR 33
10818: PUSH
10819: LD_STRING 
10821: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10822: LD_INT 0
10824: PPUSH
10825: LD_INT 4
10827: PPUSH
10828: LD_VAR 0 8
10832: PPUSH
10833: CALL_OW 380
// un = CreateHuman ;
10837: LD_ADDR_VAR 0 16
10841: PUSH
10842: CALL_OW 44
10846: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10847: LD_VAR 0 16
10851: PPUSH
10852: LD_VAR 0 9
10856: PPUSH
10857: LD_INT 0
10859: PPUSH
10860: CALL_OW 49
// end ;
10864: GO 10783
10866: POP
10867: POP
// for i = 1 to soldierCount do
10868: LD_ADDR_VAR 0 14
10872: PUSH
10873: DOUBLE
10874: LD_INT 1
10876: DEC
10877: ST_TO_ADDR
10878: LD_VAR 0 3
10882: PUSH
10883: FOR_TO
10884: IFFALSE 10966
// begin uc_side = side ;
10886: LD_ADDR_OWVAR 20
10890: PUSH
10891: LD_VAR 0 1
10895: ST_TO_ADDR
// uc_nation = nation ;
10896: LD_ADDR_OWVAR 21
10900: PUSH
10901: LD_VAR 0 2
10905: ST_TO_ADDR
// hc_name =  ;
10906: LD_ADDR_OWVAR 26
10910: PUSH
10911: LD_STRING 
10913: ST_TO_ADDR
// hc_gallery =  ;
10914: LD_ADDR_OWVAR 33
10918: PUSH
10919: LD_STRING 
10921: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10922: LD_INT 0
10924: PPUSH
10925: LD_INT 1
10927: PPUSH
10928: LD_VAR 0 8
10932: PPUSH
10933: CALL_OW 380
// un = CreateHuman ;
10937: LD_ADDR_VAR 0 16
10941: PUSH
10942: CALL_OW 44
10946: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10947: LD_VAR 0 16
10951: PPUSH
10952: LD_VAR 0 9
10956: PPUSH
10957: LD_INT 0
10959: PPUSH
10960: CALL_OW 49
// end ;
10964: GO 10883
10966: POP
10967: POP
// for i = 1 to sniperCount do
10968: LD_ADDR_VAR 0 14
10972: PUSH
10973: DOUBLE
10974: LD_INT 1
10976: DEC
10977: ST_TO_ADDR
10978: LD_VAR 0 4
10982: PUSH
10983: FOR_TO
10984: IFFALSE 11066
// begin uc_side = side ;
10986: LD_ADDR_OWVAR 20
10990: PUSH
10991: LD_VAR 0 1
10995: ST_TO_ADDR
// uc_nation = nation ;
10996: LD_ADDR_OWVAR 21
11000: PUSH
11001: LD_VAR 0 2
11005: ST_TO_ADDR
// hc_name =  ;
11006: LD_ADDR_OWVAR 26
11010: PUSH
11011: LD_STRING 
11013: ST_TO_ADDR
// hc_gallery =  ;
11014: LD_ADDR_OWVAR 33
11018: PUSH
11019: LD_STRING 
11021: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
11022: LD_INT 0
11024: PPUSH
11025: LD_INT 5
11027: PPUSH
11028: LD_VAR 0 8
11032: PPUSH
11033: CALL_OW 380
// un = CreateHuman ;
11037: LD_ADDR_VAR 0 16
11041: PUSH
11042: CALL_OW 44
11046: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11047: LD_VAR 0 16
11051: PPUSH
11052: LD_VAR 0 9
11056: PPUSH
11057: LD_INT 0
11059: PPUSH
11060: CALL_OW 49
// end ;
11064: GO 10983
11066: POP
11067: POP
// for i = 1 to bazookCount do
11068: LD_ADDR_VAR 0 14
11072: PUSH
11073: DOUBLE
11074: LD_INT 1
11076: DEC
11077: ST_TO_ADDR
11078: LD_VAR 0 5
11082: PUSH
11083: FOR_TO
11084: IFFALSE 11166
// begin uc_side = side ;
11086: LD_ADDR_OWVAR 20
11090: PUSH
11091: LD_VAR 0 1
11095: ST_TO_ADDR
// uc_nation = nation ;
11096: LD_ADDR_OWVAR 21
11100: PUSH
11101: LD_VAR 0 2
11105: ST_TO_ADDR
// hc_name =  ;
11106: LD_ADDR_OWVAR 26
11110: PUSH
11111: LD_STRING 
11113: ST_TO_ADDR
// hc_gallery =  ;
11114: LD_ADDR_OWVAR 33
11118: PUSH
11119: LD_STRING 
11121: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11122: LD_INT 0
11124: PPUSH
11125: LD_INT 9
11127: PPUSH
11128: LD_VAR 0 8
11132: PPUSH
11133: CALL_OW 380
// un = CreateHuman ;
11137: LD_ADDR_VAR 0 16
11141: PUSH
11142: CALL_OW 44
11146: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11147: LD_VAR 0 16
11151: PPUSH
11152: LD_VAR 0 9
11156: PPUSH
11157: LD_INT 0
11159: PPUSH
11160: CALL_OW 49
// end ;
11164: GO 11083
11166: POP
11167: POP
// for i = 1 to mortalCount do
11168: LD_ADDR_VAR 0 14
11172: PUSH
11173: DOUBLE
11174: LD_INT 1
11176: DEC
11177: ST_TO_ADDR
11178: LD_VAR 0 6
11182: PUSH
11183: FOR_TO
11184: IFFALSE 11266
// begin uc_side = side ;
11186: LD_ADDR_OWVAR 20
11190: PUSH
11191: LD_VAR 0 1
11195: ST_TO_ADDR
// uc_nation = nation ;
11196: LD_ADDR_OWVAR 21
11200: PUSH
11201: LD_VAR 0 2
11205: ST_TO_ADDR
// hc_name =  ;
11206: LD_ADDR_OWVAR 26
11210: PUSH
11211: LD_STRING 
11213: ST_TO_ADDR
// hc_gallery =  ;
11214: LD_ADDR_OWVAR 33
11218: PUSH
11219: LD_STRING 
11221: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11222: LD_INT 0
11224: PPUSH
11225: LD_INT 8
11227: PPUSH
11228: LD_VAR 0 8
11232: PPUSH
11233: CALL_OW 380
// un = CreateHuman ;
11237: LD_ADDR_VAR 0 16
11241: PUSH
11242: CALL_OW 44
11246: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11247: LD_VAR 0 16
11251: PPUSH
11252: LD_VAR 0 9
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 49
// end ;
11264: GO 11183
11266: POP
11267: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11268: LD_ADDR_VAR 0 19
11272: PUSH
11273: LD_INT 22
11275: PUSH
11276: LD_VAR 0 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 2
11287: PUSH
11288: LD_INT 25
11290: PUSH
11291: LD_INT 1
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 25
11300: PUSH
11301: LD_INT 5
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 25
11310: PUSH
11311: LD_INT 8
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: LD_INT 25
11320: PUSH
11321: LD_INT 9
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PPUSH
11339: CALL_OW 69
11343: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11344: LD_ADDR_VAR 0 18
11348: PUSH
11349: LD_INT 22
11351: PUSH
11352: LD_VAR 0 1
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 25
11363: PUSH
11364: LD_INT 4
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PPUSH
11375: CALL_OW 69
11379: ST_TO_ADDR
// for i in medic_list do
11380: LD_ADDR_VAR 0 14
11384: PUSH
11385: LD_VAR 0 18
11389: PUSH
11390: FOR_IN
11391: IFFALSE 11409
// ComMoveToArea ( i , healArea ) ;
11393: LD_VAR 0 14
11397: PPUSH
11398: LD_VAR 0 10
11402: PPUSH
11403: CALL_OW 113
11407: GO 11390
11409: POP
11410: POP
// if strategy = 1 then
11411: LD_VAR 0 12
11415: PUSH
11416: LD_INT 1
11418: EQUAL
11419: IFFALSE 12136
// begin repeat wait ( 0 0$3 ) ;
11421: LD_INT 105
11423: PPUSH
11424: CALL_OW 67
// for i in soldiersOK_list do
11428: LD_ADDR_VAR 0 14
11432: PUSH
11433: LD_VAR 0 19
11437: PUSH
11438: FOR_IN
11439: IFFALSE 11473
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11441: LD_VAR 0 14
11445: PPUSH
11446: LD_INT 80
11448: PPUSH
11449: LD_INT 109
11451: PPUSH
11452: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11456: LD_VAR 0 14
11460: PPUSH
11461: LD_INT 39
11463: PPUSH
11464: LD_INT 49
11466: PPUSH
11467: CALL_OW 174
// end ;
11471: GO 11438
11473: POP
11474: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11475: LD_INT 13
11477: PPUSH
11478: LD_INT 22
11480: PUSH
11481: LD_VAR 0 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PPUSH
11490: CALL_OW 70
11494: PUSH
11495: LD_INT 0
11497: GREATER
11498: IFFALSE 11421
// repeat wait ( 0 0$1 ) ;
11500: LD_INT 35
11502: PPUSH
11503: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11507: LD_ADDR_VAR 0 17
11511: PUSH
11512: LD_INT 22
11514: PUSH
11515: LD_VAR 0 1
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 1
11526: PUSH
11527: LD_INT 3
11529: PUSH
11530: LD_INT 24
11532: PUSH
11533: LD_INT 550
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 24
11546: PUSH
11547: LD_INT 250
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: LIST
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PPUSH
11563: CALL_OW 69
11567: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11568: LD_ADDR_VAR 0 19
11572: PUSH
11573: LD_INT 22
11575: PUSH
11576: LD_VAR 0 1
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 2
11587: PUSH
11588: LD_INT 25
11590: PUSH
11591: LD_INT 1
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 25
11600: PUSH
11601: LD_INT 5
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 25
11610: PUSH
11611: LD_INT 8
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: LD_INT 25
11620: PUSH
11621: LD_INT 9
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: PUSH
11635: LD_INT 24
11637: PUSH
11638: LD_INT 1000
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: PPUSH
11650: CALL_OW 69
11654: ST_TO_ADDR
// if medicCount > 0 then
11655: LD_VAR 0 7
11659: PUSH
11660: LD_INT 0
11662: GREATER
11663: IFFALSE 11737
// begin if damageUnit_list > 0 then
11665: LD_VAR 0 17
11669: PUSH
11670: LD_INT 0
11672: GREATER
11673: IFFALSE 11737
// begin for i in damageUnit_list do
11675: LD_ADDR_VAR 0 14
11679: PUSH
11680: LD_VAR 0 17
11684: PUSH
11685: FOR_IN
11686: IFFALSE 11735
// begin ComMoveToArea ( i , healArea ) ;
11688: LD_VAR 0 14
11692: PPUSH
11693: LD_VAR 0 10
11697: PPUSH
11698: CALL_OW 113
// for j in medic_list do
11702: LD_ADDR_VAR 0 15
11706: PUSH
11707: LD_VAR 0 18
11711: PUSH
11712: FOR_IN
11713: IFFALSE 11731
// AddComHeal ( j , i ) ;
11715: LD_VAR 0 15
11719: PPUSH
11720: LD_VAR 0 14
11724: PPUSH
11725: CALL_OW 188
11729: GO 11712
11731: POP
11732: POP
// end ;
11733: GO 11685
11735: POP
11736: POP
// end ; end ; for i in soldiersOK_list do
11737: LD_ADDR_VAR 0 14
11741: PUSH
11742: LD_VAR 0 19
11746: PUSH
11747: FOR_IN
11748: IFFALSE 11930
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11750: LD_ADDR_VAR 0 22
11754: PUSH
11755: LD_INT 22
11757: PUSH
11758: LD_VAR 0 11
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PPUSH
11767: CALL_OW 69
11771: PUSH
11772: LD_EXP 45
11776: DIFF
11777: PPUSH
11778: LD_VAR 0 14
11782: PPUSH
11783: CALL_OW 74
11787: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11788: LD_ADDR_VAR 0 23
11792: PUSH
11793: LD_INT 22
11795: PUSH
11796: LD_VAR 0 11
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: LD_INT 2
11807: PUSH
11808: LD_INT 59
11810: PUSH
11811: EMPTY
11812: LIST
11813: PUSH
11814: LD_INT 21
11816: PUSH
11817: LD_INT 1
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: LD_INT 21
11826: PUSH
11827: LD_INT 2
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: EMPTY
11845: LIST
11846: PPUSH
11847: CALL_OW 69
11851: PPUSH
11852: LD_VAR 0 14
11856: PPUSH
11857: CALL_OW 74
11861: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11862: LD_VAR 0 14
11866: PPUSH
11867: LD_VAR 0 22
11871: PPUSH
11872: CALL_OW 296
11876: PUSH
11877: LD_INT 8
11879: PLUS
11880: PUSH
11881: LD_VAR 0 14
11885: PPUSH
11886: LD_VAR 0 23
11890: PPUSH
11891: CALL_OW 296
11895: LESS
11896: IFFALSE 11914
// begin ComAttackUnit ( i , target1 ) ;
11898: LD_VAR 0 14
11902: PPUSH
11903: LD_VAR 0 22
11907: PPUSH
11908: CALL_OW 115
// end else
11912: GO 11928
// begin ComAttackUnit ( i , target2 ) ;
11914: LD_VAR 0 14
11918: PPUSH
11919: LD_VAR 0 23
11923: PPUSH
11924: CALL_OW 115
// end ; end ;
11928: GO 11747
11930: POP
11931: POP
// for i in soldiersOK_list do
11932: LD_ADDR_VAR 0 14
11936: PUSH
11937: LD_VAR 0 19
11941: PUSH
11942: FOR_IN
11943: IFFALSE 12125
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11945: LD_ADDR_VAR 0 22
11949: PUSH
11950: LD_INT 22
11952: PUSH
11953: LD_VAR 0 11
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PPUSH
11962: CALL_OW 69
11966: PUSH
11967: LD_EXP 45
11971: DIFF
11972: PPUSH
11973: LD_VAR 0 14
11977: PPUSH
11978: CALL_OW 74
11982: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11983: LD_ADDR_VAR 0 23
11987: PUSH
11988: LD_INT 22
11990: PUSH
11991: LD_VAR 0 11
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 2
12002: PUSH
12003: LD_INT 59
12005: PUSH
12006: EMPTY
12007: LIST
12008: PUSH
12009: LD_INT 21
12011: PUSH
12012: LD_INT 1
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 21
12021: PUSH
12022: LD_INT 2
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: EMPTY
12040: LIST
12041: PPUSH
12042: CALL_OW 69
12046: PPUSH
12047: LD_VAR 0 14
12051: PPUSH
12052: CALL_OW 74
12056: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12057: LD_VAR 0 14
12061: PPUSH
12062: LD_VAR 0 22
12066: PPUSH
12067: CALL_OW 296
12071: PUSH
12072: LD_INT 8
12074: PLUS
12075: PUSH
12076: LD_VAR 0 14
12080: PPUSH
12081: LD_VAR 0 23
12085: PPUSH
12086: CALL_OW 296
12090: LESS
12091: IFFALSE 12109
// begin ComAttackUnit ( i , target1 ) ;
12093: LD_VAR 0 14
12097: PPUSH
12098: LD_VAR 0 22
12102: PPUSH
12103: CALL_OW 115
// end else
12107: GO 12123
// begin ComAttackUnit ( i , target2 ) ;
12109: LD_VAR 0 14
12113: PPUSH
12114: LD_VAR 0 23
12118: PPUSH
12119: CALL_OW 115
// end ; end ;
12123: GO 11942
12125: POP
12126: POP
// until soldiersOK_list = [ ] ;
12127: LD_VAR 0 19
12131: PUSH
12132: EMPTY
12133: EQUAL
12134: IFFALSE 11500
// end ; if strategy = 2 then
12136: LD_VAR 0 12
12140: PUSH
12141: LD_INT 2
12143: EQUAL
12144: IFFALSE 12849
// begin repeat wait ( 0 0$1 ) ;
12146: LD_INT 35
12148: PPUSH
12149: CALL_OW 67
// for i in soldiersOK_list do
12153: LD_ADDR_VAR 0 14
12157: PUSH
12158: LD_VAR 0 19
12162: PUSH
12163: FOR_IN
12164: IFFALSE 12198
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
12166: LD_VAR 0 14
12170: PPUSH
12171: LD_INT 117
12173: PPUSH
12174: LD_INT 97
12176: PPUSH
12177: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
12181: LD_VAR 0 14
12185: PPUSH
12186: LD_INT 94
12188: PPUSH
12189: LD_INT 50
12191: PPUSH
12192: CALL_OW 174
// end ;
12196: GO 12163
12198: POP
12199: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
12200: LD_INT 14
12202: PPUSH
12203: LD_INT 22
12205: PUSH
12206: LD_VAR 0 1
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PPUSH
12215: CALL_OW 70
12219: PUSH
12220: LD_INT 0
12222: GREATER
12223: IFFALSE 12146
// repeat wait ( 0 0$3 ) ;
12225: LD_INT 105
12227: PPUSH
12228: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12232: LD_ADDR_VAR 0 17
12236: PUSH
12237: LD_INT 22
12239: PUSH
12240: LD_VAR 0 1
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 1
12251: PUSH
12252: LD_INT 3
12254: PUSH
12255: LD_INT 24
12257: PUSH
12258: LD_INT 550
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 24
12271: PUSH
12272: LD_INT 250
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: LIST
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PPUSH
12288: CALL_OW 69
12292: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12293: LD_ADDR_VAR 0 19
12297: PUSH
12298: LD_INT 22
12300: PUSH
12301: LD_VAR 0 1
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 2
12312: PUSH
12313: LD_INT 25
12315: PUSH
12316: LD_INT 1
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 25
12325: PUSH
12326: LD_INT 5
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 25
12335: PUSH
12336: LD_INT 8
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: LD_INT 25
12345: PUSH
12346: LD_INT 9
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 24
12362: PUSH
12363: LD_INT 1000
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 69
12379: ST_TO_ADDR
// if medicCount > 0 then
12380: LD_VAR 0 7
12384: PUSH
12385: LD_INT 0
12387: GREATER
12388: IFFALSE 12462
// begin if damageUnit_list > 0 then
12390: LD_VAR 0 17
12394: PUSH
12395: LD_INT 0
12397: GREATER
12398: IFFALSE 12462
// begin for i in damageUnit_list do
12400: LD_ADDR_VAR 0 14
12404: PUSH
12405: LD_VAR 0 17
12409: PUSH
12410: FOR_IN
12411: IFFALSE 12460
// begin ComMoveToArea ( i , healArea ) ;
12413: LD_VAR 0 14
12417: PPUSH
12418: LD_VAR 0 10
12422: PPUSH
12423: CALL_OW 113
// for j in medic_list do
12427: LD_ADDR_VAR 0 15
12431: PUSH
12432: LD_VAR 0 18
12436: PUSH
12437: FOR_IN
12438: IFFALSE 12456
// AddComHeal ( j , i ) ;
12440: LD_VAR 0 15
12444: PPUSH
12445: LD_VAR 0 14
12449: PPUSH
12450: CALL_OW 188
12454: GO 12437
12456: POP
12457: POP
// end ;
12458: GO 12410
12460: POP
12461: POP
// end ; end ; for i in soldiersOK_list do
12462: LD_ADDR_VAR 0 14
12466: PUSH
12467: LD_VAR 0 19
12471: PUSH
12472: FOR_IN
12473: IFFALSE 12649
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12475: LD_ADDR_VAR 0 22
12479: PUSH
12480: LD_INT 22
12482: PUSH
12483: LD_VAR 0 11
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PPUSH
12492: CALL_OW 69
12496: PPUSH
12497: LD_VAR 0 14
12501: PPUSH
12502: CALL_OW 74
12506: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12507: LD_ADDR_VAR 0 23
12511: PUSH
12512: LD_INT 22
12514: PUSH
12515: LD_VAR 0 11
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 2
12526: PUSH
12527: LD_INT 59
12529: PUSH
12530: EMPTY
12531: LIST
12532: PUSH
12533: LD_INT 21
12535: PUSH
12536: LD_INT 1
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 21
12545: PUSH
12546: LD_INT 2
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: PPUSH
12566: CALL_OW 69
12570: PPUSH
12571: LD_VAR 0 14
12575: PPUSH
12576: CALL_OW 74
12580: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12581: LD_VAR 0 14
12585: PPUSH
12586: LD_VAR 0 22
12590: PPUSH
12591: CALL_OW 296
12595: PUSH
12596: LD_INT 8
12598: PLUS
12599: PUSH
12600: LD_VAR 0 14
12604: PPUSH
12605: LD_VAR 0 23
12609: PPUSH
12610: CALL_OW 296
12614: LESS
12615: IFFALSE 12633
// begin ComAttackUnit ( i , target1 ) ;
12617: LD_VAR 0 14
12621: PPUSH
12622: LD_VAR 0 22
12626: PPUSH
12627: CALL_OW 115
// end else
12631: GO 12647
// begin ComAttackUnit ( i , target2 ) ;
12633: LD_VAR 0 14
12637: PPUSH
12638: LD_VAR 0 23
12642: PPUSH
12643: CALL_OW 115
// end ; end ;
12647: GO 12472
12649: POP
12650: POP
// for i in soldiersOK_list do
12651: LD_ADDR_VAR 0 14
12655: PUSH
12656: LD_VAR 0 19
12660: PUSH
12661: FOR_IN
12662: IFFALSE 12838
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12664: LD_ADDR_VAR 0 22
12668: PUSH
12669: LD_INT 22
12671: PUSH
12672: LD_VAR 0 11
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PPUSH
12681: CALL_OW 69
12685: PPUSH
12686: LD_VAR 0 14
12690: PPUSH
12691: CALL_OW 74
12695: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12696: LD_ADDR_VAR 0 23
12700: PUSH
12701: LD_INT 22
12703: PUSH
12704: LD_VAR 0 11
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PUSH
12713: LD_INT 2
12715: PUSH
12716: LD_INT 59
12718: PUSH
12719: EMPTY
12720: LIST
12721: PUSH
12722: LD_INT 21
12724: PUSH
12725: LD_INT 1
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 21
12734: PUSH
12735: LD_INT 2
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: PPUSH
12755: CALL_OW 69
12759: PPUSH
12760: LD_VAR 0 14
12764: PPUSH
12765: CALL_OW 74
12769: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12770: LD_VAR 0 14
12774: PPUSH
12775: LD_VAR 0 22
12779: PPUSH
12780: CALL_OW 296
12784: PUSH
12785: LD_INT 8
12787: PLUS
12788: PUSH
12789: LD_VAR 0 14
12793: PPUSH
12794: LD_VAR 0 23
12798: PPUSH
12799: CALL_OW 296
12803: LESS
12804: IFFALSE 12822
// begin ComAttackUnit ( i , target1 ) ;
12806: LD_VAR 0 14
12810: PPUSH
12811: LD_VAR 0 22
12815: PPUSH
12816: CALL_OW 115
// end else
12820: GO 12836
// begin ComAttackUnit ( i , target2 ) ;
12822: LD_VAR 0 14
12826: PPUSH
12827: LD_VAR 0 23
12831: PPUSH
12832: CALL_OW 115
// end ; end ;
12836: GO 12661
12838: POP
12839: POP
// until soldiersOK_list = [ ] ;
12840: LD_VAR 0 19
12844: PUSH
12845: EMPTY
12846: EQUAL
12847: IFFALSE 12225
// end ; end ; end_of_file
12849: LD_VAR 0 13
12853: RET
// every 0 0$01 do
12854: GO 12856
12856: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12857: LD_INT 22
12859: PUSH
12860: LD_INT 1
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: LD_INT 25
12869: PUSH
12870: LD_INT 2
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PPUSH
12881: CALL_OW 69
12885: PUSH
12886: LD_INT 0
12888: EQUAL
12889: IFFALSE 12903
// SetClass ( JMM , 2 ) ;
12891: LD_EXP 1
12895: PPUSH
12896: LD_INT 2
12898: PPUSH
12899: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12903: LD_STRING M1
12905: PPUSH
12906: CALL_OW 337
// case difficulty of 1 :
12910: LD_OWVAR 67
12914: PUSH
12915: LD_INT 1
12917: DOUBLE
12918: EQUAL
12919: IFTRUE 12923
12921: GO 12933
12923: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12924: LD_STRING M1-1
12926: PPUSH
12927: CALL_OW 337
12931: GO 12970
12933: LD_INT 2
12935: DOUBLE
12936: EQUAL
12937: IFTRUE 12941
12939: GO 12951
12941: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12942: LD_STRING M1-2
12944: PPUSH
12945: CALL_OW 337
12949: GO 12970
12951: LD_INT 3
12953: DOUBLE
12954: EQUAL
12955: IFTRUE 12959
12957: GO 12969
12959: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12960: LD_STRING M1-3
12962: PPUSH
12963: CALL_OW 337
12967: GO 12970
12969: POP
// ChangeMissionObjectives ( M1cont ) ;
12970: LD_STRING M1cont
12972: PPUSH
12973: CALL_OW 337
// wait ( 0 0$2 ) ;
12977: LD_INT 70
12979: PPUSH
12980: CALL_OW 67
// SaveForQuickRestart ;
12984: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12988: LD_INT 525
12990: PPUSH
12991: LD_INT 700
12993: PPUSH
12994: CALL_OW 12
12998: PPUSH
12999: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
13003: LD_INT 5
13005: PPUSH
13006: LD_INT 82
13008: PPUSH
13009: LD_INT 38
13011: PPUSH
13012: LD_INT 10
13014: PPUSH
13015: LD_INT 1
13017: PPUSH
13018: CALL_OW 56
// wait ( 0 0$14 ) ;
13022: LD_INT 490
13024: PPUSH
13025: CALL_OW 67
// firstCrateSpawn := true ;
13029: LD_ADDR_EXP 41
13033: PUSH
13034: LD_INT 1
13036: ST_TO_ADDR
// end ;
13037: END
// every 0 0$02 trigger firstCrateSpawn do
13038: LD_EXP 41
13042: IFFALSE 13405
13044: GO 13046
13046: DISABLE
// begin if IsOk ( Lisa ) then
13047: LD_EXP 2
13051: PPUSH
13052: CALL_OW 302
13056: IFFALSE 13072
// Say ( Lisa , DR0-Lisa-1 ) else
13058: LD_EXP 2
13062: PPUSH
13063: LD_STRING DR0-Lisa-1
13065: PPUSH
13066: CALL_OW 88
13070: GO 13218
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
13072: LD_INT 22
13074: PUSH
13075: LD_INT 1
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: LD_INT 21
13084: PUSH
13085: LD_INT 1
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: LD_INT 26
13094: PUSH
13095: LD_INT 1
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: LD_INT 2
13104: PUSH
13105: LD_INT 25
13107: PUSH
13108: LD_INT 1
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 25
13117: PUSH
13118: LD_INT 2
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 25
13127: PUSH
13128: LD_INT 3
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 25
13137: PUSH
13138: LD_INT 4
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: PPUSH
13158: CALL_OW 69
13162: PUSH
13163: LD_EXP 1
13167: PUSH
13168: LD_EXP 8
13172: PUSH
13173: LD_EXP 5
13177: PUSH
13178: LD_EXP 6
13182: PUSH
13183: LD_EXP 7
13187: PUSH
13188: LD_EXP 4
13192: PUSH
13193: LD_EXP 3
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: DIFF
13207: PPUSH
13208: LD_STRING DR0-Sol1-1
13210: PPUSH
13211: LD_STRING DR0-Sol1-1
13213: PPUSH
13214: CALL 6247 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
13218: LD_INT 22
13220: PUSH
13221: LD_INT 1
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: LD_INT 21
13230: PUSH
13231: LD_INT 1
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 26
13240: PUSH
13241: LD_INT 1
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: LD_INT 2
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 1
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 25
13263: PUSH
13264: LD_INT 2
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: LD_INT 25
13273: PUSH
13274: LD_INT 3
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PUSH
13281: LD_INT 25
13283: PUSH
13284: LD_INT 4
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: PPUSH
13304: CALL_OW 69
13308: PUSH
13309: LD_EXP 1
13313: PUSH
13314: LD_EXP 8
13318: PUSH
13319: LD_EXP 5
13323: PUSH
13324: LD_EXP 2
13328: PUSH
13329: LD_EXP 6
13333: PUSH
13334: LD_EXP 7
13338: PUSH
13339: LD_EXP 4
13343: PUSH
13344: LD_EXP 3
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: DIFF
13359: PPUSH
13360: LD_STRING DR0-Sol2-1
13362: PPUSH
13363: LD_STRING DR0-Sol2-1
13365: PPUSH
13366: CALL 6247 0 3
// if IsOk ( Cyrus ) then
13370: LD_EXP 4
13374: PPUSH
13375: CALL_OW 302
13379: IFFALSE 13393
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13381: LD_EXP 4
13385: PPUSH
13386: LD_STRING DR0-Cyrus-1
13388: PPUSH
13389: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13393: LD_EXP 1
13397: PPUSH
13398: LD_STRING DR0-JMM-1
13400: PPUSH
13401: CALL_OW 88
// end ;
13405: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13406: LD_EXP 5
13410: PPUSH
13411: CALL_OW 302
13415: PUSH
13416: LD_INT 22
13418: PUSH
13419: LD_INT 1
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: LD_INT 25
13428: PUSH
13429: LD_INT 16
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PPUSH
13440: CALL_OW 69
13444: PUSH
13445: LD_INT 0
13447: GREATER
13448: AND
13449: PUSH
13450: LD_INT 1
13452: PPUSH
13453: CALL_OW 463
13457: NOT
13458: AND
13459: IFFALSE 13737
13461: GO 13463
13463: DISABLE
// begin DialogueOn ;
13464: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13468: LD_EXP 5
13472: PPUSH
13473: LD_STRING D10-Frank-1
13475: PPUSH
13476: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13480: LD_INT 22
13482: PUSH
13483: LD_INT 1
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 21
13492: PUSH
13493: LD_INT 1
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 2
13502: PUSH
13503: LD_INT 25
13505: PUSH
13506: LD_INT 1
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: LD_INT 25
13515: PUSH
13516: LD_INT 2
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: PUSH
13523: LD_INT 25
13525: PUSH
13526: LD_INT 3
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: LD_INT 25
13535: PUSH
13536: LD_INT 4
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: LIST
13554: PPUSH
13555: CALL_OW 69
13559: PUSH
13560: LD_EXP 1
13564: PUSH
13565: LD_EXP 5
13569: PUSH
13570: LD_EXP 2
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: LIST
13579: DIFF
13580: PPUSH
13581: LD_STRING D10-Sol1-1
13583: PPUSH
13584: LD_STRING D10-FSol1-1
13586: PPUSH
13587: CALL 6247 0 3
// Say ( Frank , D10-Frank-2 ) ;
13591: LD_EXP 5
13595: PPUSH
13596: LD_STRING D10-Frank-2
13598: PPUSH
13599: CALL_OW 88
// if IsOK ( Lisa ) then
13603: LD_EXP 2
13607: PPUSH
13608: CALL_OW 302
13612: IFFALSE 13628
// begin Say ( Lisa , D10-Lisa-2 ) ;
13614: LD_EXP 2
13618: PPUSH
13619: LD_STRING D10-Lisa-2
13621: PPUSH
13622: CALL_OW 88
// end else
13626: GO 13733
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13628: LD_INT 22
13630: PUSH
13631: LD_INT 1
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PUSH
13638: LD_INT 21
13640: PUSH
13641: LD_INT 1
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: LD_INT 2
13650: PUSH
13651: LD_INT 25
13653: PUSH
13654: LD_INT 1
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 25
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 25
13673: PUSH
13674: LD_INT 3
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: LD_INT 25
13683: PUSH
13684: LD_INT 4
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: LIST
13702: PPUSH
13703: CALL_OW 69
13707: PUSH
13708: LD_EXP 1
13712: PUSH
13713: LD_EXP 5
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: DIFF
13722: PPUSH
13723: LD_STRING D10-Sol1-2
13725: PPUSH
13726: LD_STRING D10-FSol1-2
13728: PPUSH
13729: CALL 6247 0 3
// end ; DialogueOff ;
13733: CALL_OW 7
// end ;
13737: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13738: LD_INT 1
13740: PPUSH
13741: CALL_OW 463
13745: NOT
13746: IFFALSE 14041
13748: GO 13750
13750: DISABLE
// begin HarrisonSupport ;
13751: CALL 2498 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13755: LD_EXP 17
13759: PPUSH
13760: CALL_OW 310
13764: PPUSH
13765: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13769: LD_EXP 17
13773: PPUSH
13774: LD_STRING DEng-Eng1-1
13776: PPUSH
13777: CALL_OW 88
// wait ( 1 1$0 ) ;
13781: LD_INT 2100
13783: PPUSH
13784: CALL_OW 67
// DialogueOn ;
13788: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13792: LD_EXP 14
13796: PPUSH
13797: LD_STRING DRem-Har-1
13799: PPUSH
13800: CALL_OW 94
// if contactWithRussian = 1 then
13804: LD_EXP 22
13808: PUSH
13809: LD_INT 1
13811: EQUAL
13812: IFFALSE 13828
// begin Say ( JMM , DRem-JMM-1 ) ;
13814: LD_EXP 1
13818: PPUSH
13819: LD_STRING DRem-JMM-1
13821: PPUSH
13822: CALL_OW 88
// end else
13826: GO 13840
// begin Say ( JMM , DRem-JMM-1a ) ;
13828: LD_EXP 1
13832: PPUSH
13833: LD_STRING DRem-JMM-1a
13835: PPUSH
13836: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13840: LD_EXP 14
13844: PPUSH
13845: LD_STRING DRem-Har-2
13847: PPUSH
13848: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13852: LD_STRING DenisInDelta
13854: PPUSH
13855: LD_INT 0
13857: PPUSH
13858: CALL_OW 30
13862: PUSH
13863: LD_INT 1
13865: EQUAL
13866: IFFALSE 13882
// begin Say ( JMM , DRem-JMM-2 ) ;
13868: LD_EXP 1
13872: PPUSH
13873: LD_STRING DRem-JMM-2
13875: PPUSH
13876: CALL_OW 88
// end else
13880: GO 13894
// begin Say ( JMM , DRem-JMM-2a ) ;
13882: LD_EXP 1
13886: PPUSH
13887: LD_STRING DRem-JMM-2a
13889: PPUSH
13890: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13894: LD_EXP 14
13898: PPUSH
13899: LD_STRING DRem-Har-3
13901: PPUSH
13902: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13906: LD_EXP 1
13910: PPUSH
13911: LD_STRING DRem-JMM-3
13913: PPUSH
13914: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13918: LD_EXP 14
13922: PPUSH
13923: LD_STRING DRem-Har-4
13925: PPUSH
13926: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13930: LD_STRING DenisInDelta
13932: PPUSH
13933: LD_INT 0
13935: PPUSH
13936: CALL_OW 30
13940: PUSH
13941: LD_INT 1
13943: EQUAL
13944: IFFALSE 14004
// begin Say ( JMM , DRem-JMM-4 ) ;
13946: LD_EXP 1
13950: PPUSH
13951: LD_STRING DRem-JMM-4
13953: PPUSH
13954: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13958: LD_EXP 14
13962: PPUSH
13963: LD_STRING DRem-Har-5
13965: PPUSH
13966: CALL_OW 94
// DialogueOff ;
13970: CALL_OW 7
// wait ( 4 4$00 ) ;
13974: LD_INT 8400
13976: PPUSH
13977: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13981: LD_INT 35
13983: PPUSH
13984: CALL_OW 67
// until not InBattle ( 1 ) ;
13988: LD_INT 1
13990: PPUSH
13991: CALL_OW 463
13995: NOT
13996: IFFALSE 13981
// SpawnDenis ;
13998: CALL 14042 0 0
// end else
14002: GO 14041
// begin DialogueOff ;
14004: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14008: LD_INT 36
14010: PPUSH
14011: LD_INT 1
14013: PPUSH
14014: LD_INT 1
14016: PPUSH
14017: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14021: LD_INT 15
14023: PPUSH
14024: LD_INT 1
14026: PPUSH
14027: LD_INT 1
14029: PPUSH
14030: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14034: LD_STRING MR
14036: PPUSH
14037: CALL_OW 337
// end ; end ;
14041: END
// export function SpawnDenis ; var tmp ; begin
14042: LD_INT 0
14044: PPUSH
14045: PPUSH
// PrepareDenis ;
14046: CALL 2220 0 0
// CenterNowOnUnits ( Denis ) ;
14050: LD_EXP 9
14054: PPUSH
14055: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
14059: LD_ADDR_VAR 0 2
14063: PUSH
14064: LD_INT 22
14066: PUSH
14067: LD_INT 1
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PPUSH
14074: CALL_OW 69
14078: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
14079: LD_EXP 9
14083: PPUSH
14084: LD_VAR 0 2
14088: PPUSH
14089: LD_EXP 9
14093: PPUSH
14094: CALL_OW 74
14098: PPUSH
14099: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14103: LD_INT 35
14105: PPUSH
14106: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
14110: LD_INT 22
14112: PUSH
14113: LD_INT 1
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 91
14122: PUSH
14123: LD_EXP 9
14127: PUSH
14128: LD_INT 10
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: LIST
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: CALL_OW 69
14144: IFFALSE 14103
// SetSide ( Denis , 1 ) ;
14146: LD_EXP 9
14150: PPUSH
14151: LD_INT 1
14153: PPUSH
14154: CALL_OW 235
// DialogueOn ;
14158: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
14162: LD_EXP 9
14166: PPUSH
14167: LD_STRING DDen-Den-1
14169: PPUSH
14170: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
14174: LD_EXP 1
14178: PPUSH
14179: LD_STRING DDen-JMM-1
14181: PPUSH
14182: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
14186: LD_EXP 9
14190: PPUSH
14191: LD_STRING DDen-Den-2
14193: PPUSH
14194: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
14198: LD_EXP 1
14202: PPUSH
14203: LD_STRING DDen-JMM-2
14205: PPUSH
14206: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
14210: LD_EXP 9
14214: PPUSH
14215: LD_STRING DDen-Den-3
14217: PPUSH
14218: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
14222: LD_EXP 1
14226: PPUSH
14227: LD_STRING DDen-JMM-3
14229: PPUSH
14230: CALL_OW 88
// DialogueOff ;
14234: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14238: LD_INT 36
14240: PPUSH
14241: LD_INT 1
14243: PPUSH
14244: LD_INT 1
14246: PPUSH
14247: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14251: LD_INT 15
14253: PPUSH
14254: LD_INT 1
14256: PPUSH
14257: LD_INT 1
14259: PPUSH
14260: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14264: LD_STRING MR
14266: PPUSH
14267: CALL_OW 337
// end ;
14271: LD_VAR 0 1
14275: RET
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14276: CALL 14331 0 0
14280: PUSH
14281: LD_EXP 9
14285: PPUSH
14286: CALL_OW 302
14290: AND
14291: PUSH
14292: LD_INT 1
14294: PPUSH
14295: CALL_OW 463
14299: NOT
14300: AND
14301: IFFALSE 14330
14303: GO 14305
14305: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14306: LD_EXP 9
14310: PPUSH
14311: LD_STRING DR1-Den-1
14313: PPUSH
14314: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14318: LD_EXP 1
14322: PPUSH
14323: LD_STRING DR1-JMM-1
14325: PPUSH
14326: CALL_OW 88
// end ;
14330: END
// function CheckOptoLab ; var i ; begin
14331: LD_INT 0
14333: PPUSH
14334: PPUSH
// result = false ;
14335: LD_ADDR_VAR 0 1
14339: PUSH
14340: LD_INT 0
14342: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14343: LD_ADDR_VAR 0 2
14347: PUSH
14348: LD_INT 22
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 2
14360: PUSH
14361: LD_INT 30
14363: PUSH
14364: LD_INT 7
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 30
14373: PUSH
14374: LD_INT 8
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: LIST
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PPUSH
14390: CALL_OW 69
14394: PUSH
14395: FOR_IN
14396: IFFALSE 14448
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14398: LD_VAR 0 2
14402: PPUSH
14403: LD_INT 1
14405: PPUSH
14406: CALL_OW 268
14410: PUSH
14411: LD_INT 15
14413: EQUAL
14414: PUSH
14415: LD_VAR 0 2
14419: PPUSH
14420: LD_INT 2
14422: PPUSH
14423: CALL_OW 268
14427: PUSH
14428: LD_INT 15
14430: EQUAL
14431: OR
14432: IFFALSE 14444
// begin result = true ;
14434: LD_ADDR_VAR 0 1
14438: PUSH
14439: LD_INT 1
14441: ST_TO_ADDR
// break ;
14442: GO 14448
// end ; break ;
14444: GO 14448
// end ;
14446: GO 14395
14448: POP
14449: POP
// end ;
14450: LD_VAR 0 1
14454: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14455: LD_INT 15
14457: PPUSH
14458: LD_INT 1
14460: PPUSH
14461: CALL_OW 321
14465: PUSH
14466: LD_INT 2
14468: EQUAL
14469: PUSH
14470: LD_EXP 9
14474: PPUSH
14475: CALL_OW 302
14479: AND
14480: PUSH
14481: LD_INT 1
14483: PPUSH
14484: CALL_OW 463
14488: NOT
14489: AND
14490: IFFALSE 14722
14492: GO 14494
14494: DISABLE
// begin DialogueOn ;
14495: CALL_OW 6
// if IsOK ( Denis ) then
14499: LD_EXP 9
14503: PPUSH
14504: CALL_OW 302
14508: IFFALSE 14524
// begin Say ( Denis , DR2-Den-1 ) ;
14510: LD_EXP 9
14514: PPUSH
14515: LD_STRING DR2-Den-1
14517: PPUSH
14518: CALL_OW 88
// end else
14522: GO 14583
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14524: LD_INT 22
14526: PUSH
14527: LD_INT 1
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 21
14536: PUSH
14537: LD_INT 1
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: LD_INT 25
14546: PUSH
14547: LD_INT 4
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: LIST
14558: PPUSH
14559: CALL_OW 69
14563: PUSH
14564: LD_EXP 1
14568: PUSH
14569: EMPTY
14570: LIST
14571: DIFF
14572: PPUSH
14573: LD_STRING DR2-Sci1-1
14575: PPUSH
14576: LD_STRING DR2-FSci1-1
14578: PPUSH
14579: CALL 6247 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14583: LD_EXP 1
14587: PPUSH
14588: LD_STRING DR2-JMM-1
14590: PPUSH
14591: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14595: LD_INT 22
14597: PUSH
14598: LD_INT 1
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 21
14607: PUSH
14608: LD_INT 1
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PUSH
14615: LD_INT 2
14617: PUSH
14618: LD_INT 25
14620: PUSH
14621: LD_INT 1
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: LD_INT 25
14630: PUSH
14631: LD_INT 2
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: LD_INT 25
14640: PUSH
14641: LD_INT 3
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 25
14650: PUSH
14651: LD_INT 4
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: LIST
14669: PPUSH
14670: CALL_OW 69
14674: PUSH
14675: LD_EXP 1
14679: PUSH
14680: LD_EXP 9
14684: PUSH
14685: LD_EXP 8
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: DIFF
14695: PPUSH
14696: LD_STRING DR2-Sol1-1
14698: PPUSH
14699: LD_STRING DR2-Sol1-11
14701: PPUSH
14702: CALL 6247 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14706: LD_EXP 1
14710: PPUSH
14711: LD_STRING DR2-JMM-2
14713: PPUSH
14714: CALL_OW 88
// DialogueOff ;
14718: CALL_OW 7
// end ;
14722: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14723: LD_INT 22
14725: PUSH
14726: LD_INT 1
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: LD_INT 30
14735: PUSH
14736: LD_INT 36
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PPUSH
14747: CALL_OW 69
14751: PUSH
14752: LD_INT 0
14754: EQUAL
14755: PUSH
14756: LD_INT 22
14758: PUSH
14759: LD_INT 1
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 21
14768: PUSH
14769: LD_INT 2
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: LD_INT 33
14778: PUSH
14779: LD_INT 2
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: LIST
14790: PPUSH
14791: CALL_OW 69
14795: PUSH
14796: LD_INT 0
14798: GREATER
14799: AND
14800: PUSH
14801: LD_EXP 23
14805: PUSH
14806: LD_INT 0
14808: EQUAL
14809: AND
14810: PUSH
14811: LD_INT 1
14813: PPUSH
14814: CALL_OW 463
14818: NOT
14819: AND
14820: IFFALSE 14957
14822: GO 14824
14824: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14825: LD_INT 22
14827: PUSH
14828: LD_INT 1
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: LD_INT 21
14837: PUSH
14838: LD_INT 1
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 25
14847: PUSH
14848: LD_INT 3
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 26
14857: PUSH
14858: LD_INT 1
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: PPUSH
14871: CALL_OW 69
14875: PUSH
14876: LD_EXP 1
14880: PUSH
14881: LD_EXP 6
14885: PUSH
14886: LD_EXP 7
14890: PUSH
14891: LD_EXP 9
14895: PUSH
14896: LD_EXP 15
14900: PUSH
14901: LD_EXP 3
14905: PUSH
14906: LD_EXP 4
14910: PUSH
14911: LD_EXP 2
14915: PUSH
14916: LD_EXP 5
14920: PUSH
14921: LD_EXP 8
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: DIFF
14938: PPUSH
14939: LD_STRING D3a-Mech1-1
14941: PPUSH
14942: LD_STRING D3a-Mech1-1
14944: PPUSH
14945: CALL 6247 0 3
// firstTower = 2 ;
14949: LD_ADDR_EXP 23
14953: PUSH
14954: LD_INT 2
14956: ST_TO_ADDR
// end ;
14957: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14958: LD_INT 22
14960: PUSH
14961: LD_INT 3
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 21
14970: PUSH
14971: LD_INT 3
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PPUSH
14982: CALL_OW 69
14986: PUSH
14987: LD_INT 0
14989: EQUAL
14990: IFFALSE 15105
14992: GO 14994
14994: DISABLE
14995: LD_INT 0
14997: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14998: LD_ADDR_VAR 0 1
15002: PUSH
15003: LD_INT 22
15005: PUSH
15006: LD_INT 1
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 21
15015: PUSH
15016: LD_INT 1
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: LD_INT 2
15025: PUSH
15026: LD_INT 25
15028: PUSH
15029: LD_INT 1
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 25
15038: PUSH
15039: LD_INT 2
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: LD_INT 25
15048: PUSH
15049: LD_INT 3
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: LD_INT 25
15058: PUSH
15059: LD_INT 4
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: LIST
15077: PPUSH
15078: CALL_OW 69
15082: PUSH
15083: FOR_IN
15084: IFFALSE 15103
// AddExperience ( i , 1 , 10000 ) ;
15086: LD_VAR 0 1
15090: PPUSH
15091: LD_INT 1
15093: PPUSH
15094: LD_INT 10000
15096: PPUSH
15097: CALL_OW 492
15101: GO 15083
15103: POP
15104: POP
// end ;
15105: PPOPN 1
15107: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
15108: LD_INT 22
15110: PUSH
15111: LD_INT 1
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 30
15120: PUSH
15121: LD_INT 36
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PPUSH
15132: CALL_OW 69
15136: PUSH
15137: LD_INT 0
15139: GREATER
15140: PUSH
15141: LD_INT 22
15143: PUSH
15144: LD_INT 1
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 21
15153: PUSH
15154: LD_INT 2
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 33
15163: PUSH
15164: LD_INT 2
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: LIST
15175: PPUSH
15176: CALL_OW 69
15180: PUSH
15181: LD_INT 0
15183: GREATER
15184: AND
15185: PUSH
15186: CALL 15778 0 0
15190: AND
15191: PUSH
15192: LD_INT 1
15194: PPUSH
15195: CALL_OW 463
15199: NOT
15200: AND
15201: IFFALSE 15775
15203: GO 15205
15205: DISABLE
15206: LD_INT 0
15208: PPUSH
15209: PPUSH
15210: PPUSH
15211: PPUSH
15212: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
15213: LD_ADDR_VAR 0 3
15217: PUSH
15218: LD_INT 22
15220: PUSH
15221: LD_INT 1
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 30
15230: PUSH
15231: LD_INT 36
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 69
15246: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
15247: LD_ADDR_VAR 0 4
15251: PUSH
15252: LD_INT 22
15254: PUSH
15255: LD_INT 1
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: LD_INT 21
15264: PUSH
15265: LD_INT 2
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 33
15274: PUSH
15275: LD_INT 2
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: LIST
15286: PPUSH
15287: CALL_OW 69
15291: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15292: LD_ADDR_VAR 0 5
15296: PUSH
15297: EMPTY
15298: ST_TO_ADDR
// for i in tmpControlTowers do
15299: LD_ADDR_VAR 0 1
15303: PUSH
15304: LD_VAR 0 3
15308: PUSH
15309: FOR_IN
15310: IFFALSE 15773
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15312: LD_EXP 1
15316: PPUSH
15317: CALL_OW 310
15321: PUSH
15322: LD_VAR 0 1
15326: EQUAL
15327: PUSH
15328: LD_EXP 1
15332: PPUSH
15333: CALL_OW 257
15337: PUSH
15338: LD_INT 3
15340: EQUAL
15341: AND
15342: IFFALSE 15472
// begin InGameOn ;
15344: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15348: LD_VAR 0 4
15352: PUSH
15353: LD_INT 1
15355: ARRAY
15356: PPUSH
15357: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15361: LD_EXP 1
15365: PPUSH
15366: LD_STRING D4a-JMM-1
15368: PPUSH
15369: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15373: LD_VAR 0 4
15377: PUSH
15378: LD_INT 1
15380: ARRAY
15381: PPUSH
15382: LD_EXP 1
15386: PPUSH
15387: CALL_OW 53
// wait ( 0 0$1 ) ;
15391: LD_INT 35
15393: PPUSH
15394: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15398: LD_VAR 0 4
15402: PUSH
15403: LD_INT 1
15405: ARRAY
15406: PPUSH
15407: LD_VAR 0 4
15411: PUSH
15412: LD_INT 1
15414: ARRAY
15415: PPUSH
15416: CALL_OW 250
15420: PUSH
15421: LD_INT 3
15423: PLUS
15424: PPUSH
15425: LD_VAR 0 4
15429: PUSH
15430: LD_INT 1
15432: ARRAY
15433: PPUSH
15434: CALL_OW 251
15438: PUSH
15439: LD_INT 2
15441: MINUS
15442: PPUSH
15443: CALL_OW 111
// wait ( 0 0$2 ) ;
15447: LD_INT 70
15449: PPUSH
15450: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15454: LD_EXP 1
15458: PPUSH
15459: LD_STRING D4b-JMM-1
15461: PPUSH
15462: CALL_OW 88
// InGameOff ;
15466: CALL_OW 9
// end else
15470: GO 15771
// begin InGameOn ;
15472: CALL_OW 8
// for j in UnitsInside ( i ) do
15476: LD_ADDR_VAR 0 2
15480: PUSH
15481: LD_VAR 0 1
15485: PPUSH
15486: CALL_OW 313
15490: PUSH
15491: FOR_IN
15492: IFFALSE 15527
// if GetClass ( j ) = 3 then
15494: LD_VAR 0 2
15498: PPUSH
15499: CALL_OW 257
15503: PUSH
15504: LD_INT 3
15506: EQUAL
15507: IFFALSE 15525
// tmpMechanicInside = tmpMechanicInside ^ j ;
15509: LD_ADDR_VAR 0 5
15513: PUSH
15514: LD_VAR 0 5
15518: PUSH
15519: LD_VAR 0 2
15523: ADD
15524: ST_TO_ADDR
15525: GO 15491
15527: POP
15528: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15529: LD_VAR 0 5
15533: PUSH
15534: LD_INT 1
15536: ARRAY
15537: PPUSH
15538: CALL_OW 258
15542: PUSH
15543: LD_INT 1
15545: EQUAL
15546: IFFALSE 15564
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15548: LD_VAR 0 5
15552: PUSH
15553: LD_INT 1
15555: ARRAY
15556: PPUSH
15557: LD_STRING D4a-Mech1-1
15559: PPUSH
15560: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15564: LD_VAR 0 5
15568: PUSH
15569: LD_INT 1
15571: ARRAY
15572: PPUSH
15573: CALL_OW 258
15577: PUSH
15578: LD_INT 2
15580: EQUAL
15581: IFFALSE 15599
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15583: LD_VAR 0 5
15587: PUSH
15588: LD_INT 1
15590: ARRAY
15591: PPUSH
15592: LD_STRING D4a-FMech1-1
15594: PPUSH
15595: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15599: LD_VAR 0 4
15603: PUSH
15604: LD_INT 1
15606: ARRAY
15607: PPUSH
15608: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15612: LD_VAR 0 4
15616: PUSH
15617: LD_INT 1
15619: ARRAY
15620: PPUSH
15621: LD_VAR 0 5
15625: PUSH
15626: LD_INT 1
15628: ARRAY
15629: PPUSH
15630: CALL_OW 53
// wait ( 0 0$1 ) ;
15634: LD_INT 35
15636: PPUSH
15637: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15641: LD_VAR 0 4
15645: PUSH
15646: LD_INT 1
15648: ARRAY
15649: PPUSH
15650: LD_VAR 0 4
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: PPUSH
15659: CALL_OW 250
15663: PUSH
15664: LD_INT 3
15666: PLUS
15667: PPUSH
15668: LD_VAR 0 4
15672: PUSH
15673: LD_INT 1
15675: ARRAY
15676: PPUSH
15677: CALL_OW 251
15681: PUSH
15682: LD_INT 2
15684: MINUS
15685: PPUSH
15686: CALL_OW 111
// wait ( 0 0$2 ) ;
15690: LD_INT 70
15692: PPUSH
15693: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15697: LD_VAR 0 5
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: CALL_OW 258
15710: PUSH
15711: LD_INT 1
15713: EQUAL
15714: IFFALSE 15732
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15716: LD_VAR 0 5
15720: PUSH
15721: LD_INT 1
15723: ARRAY
15724: PPUSH
15725: LD_STRING D4b-Mech1-1
15727: PPUSH
15728: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15732: LD_VAR 0 5
15736: PUSH
15737: LD_INT 1
15739: ARRAY
15740: PPUSH
15741: CALL_OW 258
15745: PUSH
15746: LD_INT 2
15748: EQUAL
15749: IFFALSE 15767
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15751: LD_VAR 0 5
15755: PUSH
15756: LD_INT 1
15758: ARRAY
15759: PPUSH
15760: LD_STRING D4b-FMech1-1
15762: PPUSH
15763: CALL_OW 88
// InGameOff ;
15767: CALL_OW 9
// end ; end ;
15771: GO 15309
15773: POP
15774: POP
// end ;
15775: PPOPN 5
15777: END
// function CheckMehInside ; var i , j ; begin
15778: LD_INT 0
15780: PPUSH
15781: PPUSH
15782: PPUSH
// result = false ;
15783: LD_ADDR_VAR 0 1
15787: PUSH
15788: LD_INT 0
15790: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15791: LD_ADDR_VAR 0 2
15795: PUSH
15796: LD_INT 22
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 30
15808: PUSH
15809: LD_INT 36
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PPUSH
15820: CALL_OW 69
15824: PUSH
15825: FOR_IN
15826: IFFALSE 15877
// begin for j in UnitsInside ( i ) do
15828: LD_ADDR_VAR 0 3
15832: PUSH
15833: LD_VAR 0 2
15837: PPUSH
15838: CALL_OW 313
15842: PUSH
15843: FOR_IN
15844: IFFALSE 15873
// begin if GetClass ( j ) = 3 then
15846: LD_VAR 0 3
15850: PPUSH
15851: CALL_OW 257
15855: PUSH
15856: LD_INT 3
15858: EQUAL
15859: IFFALSE 15871
// begin result = true ;
15861: LD_ADDR_VAR 0 1
15865: PUSH
15866: LD_INT 1
15868: ST_TO_ADDR
// break ;
15869: GO 15873
// end ; end ;
15871: GO 15843
15873: POP
15874: POP
// end ;
15875: GO 15825
15877: POP
15878: POP
// end ;
15879: LD_VAR 0 1
15883: RET
// every 12 12$0 do
15884: GO 15886
15886: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15887: LD_INT 35
15889: PPUSH
15890: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
15894: LD_INT 1
15896: PPUSH
15897: CALL_OW 463
15901: NOT
15902: PUSH
15903: LD_INT 32
15905: PPUSH
15906: LD_INT 81
15908: PUSH
15909: LD_INT 1
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PPUSH
15916: CALL_OW 70
15920: NOT
15921: AND
15922: IFFALSE 15887
// PrepareKurt ;
15924: CALL 19525 0 0
// end ;
15928: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
15929: LD_EXP 15
15933: PPUSH
15934: CALL_OW 302
15938: PUSH
15939: LD_EXP 15
15943: PPUSH
15944: CALL_OW 255
15948: PUSH
15949: LD_INT 1
15951: EQUAL
15952: AND
15953: PUSH
15954: LD_EXP 2
15958: AND
15959: IFFALSE 16124
15961: GO 15963
15963: DISABLE
// begin wait ( 0 0$50 ) ;
15964: LD_INT 1750
15966: PPUSH
15967: CALL_OW 67
// if not IsOk ( Joan ) then
15971: LD_EXP 15
15975: PPUSH
15976: CALL_OW 302
15980: NOT
15981: IFFALSE 15985
// exit ;
15983: GO 16124
// if IsOK ( Lisa ) then
15985: LD_EXP 2
15989: PPUSH
15990: CALL_OW 302
15994: IFFALSE 16124
// begin DialogueOn ;
15996: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
16000: LD_EXP 2
16004: PPUSH
16005: LD_STRING D7-Lisa-1
16007: PPUSH
16008: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
16012: LD_EXP 1
16016: PPUSH
16017: LD_STRING D7-JMM-1
16019: PPUSH
16020: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
16024: LD_EXP 2
16028: PPUSH
16029: LD_STRING D7-Lisa-2
16031: PPUSH
16032: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
16036: LD_EXP 1
16040: PPUSH
16041: LD_STRING D7-JMM-2
16043: PPUSH
16044: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
16048: LD_EXP 2
16052: PPUSH
16053: LD_STRING D7-Lisa-3
16055: PPUSH
16056: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
16060: LD_EXP 1
16064: PPUSH
16065: LD_STRING D7-JMM-3
16067: PPUSH
16068: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
16072: LD_EXP 2
16076: PPUSH
16077: LD_STRING D7-Lisa-4
16079: PPUSH
16080: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
16084: LD_EXP 1
16088: PPUSH
16089: LD_STRING D7-JMM-4
16091: PPUSH
16092: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
16096: LD_EXP 1
16100: PPUSH
16101: LD_STRING D7-JMM-4a
16103: PPUSH
16104: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
16108: LD_EXP 2
16112: PPUSH
16113: LD_STRING D7-Lisa-5
16115: PPUSH
16116: CALL_OW 88
// DialogueOff ;
16120: CALL_OW 7
// end ; end ;
16124: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
16125: LD_EXP 13
16129: PUSH
16130: LD_INT 22
16132: PUSH
16133: LD_INT 1
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 91
16142: PUSH
16143: LD_EXP 13
16147: PUSH
16148: LD_INT 10
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 2
16158: PUSH
16159: LD_INT 25
16161: PUSH
16162: LD_INT 1
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 25
16171: PUSH
16172: LD_INT 2
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 25
16181: PUSH
16182: LD_INT 3
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: LD_INT 25
16191: PUSH
16192: LD_INT 4
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: LIST
16210: PPUSH
16211: CALL_OW 69
16215: PUSH
16216: LD_INT 1
16218: GREATER
16219: AND
16220: IFFALSE 16237
16222: GO 16224
16224: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
16225: LD_EXP 13
16229: PPUSH
16230: LD_STRING D5-Sol1-1
16232: PPUSH
16233: CALL_OW 88
// end ;
16237: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
16238: LD_INT 22
16240: PUSH
16241: LD_INT 1
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 33
16250: PUSH
16251: LD_INT 2
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PPUSH
16262: CALL_OW 69
16266: PUSH
16267: LD_INT 2
16269: GREATEREQUAL
16270: IFFALSE 16290
16272: GO 16274
16274: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
16275: LD_STRING MRa
16277: PPUSH
16278: CALL_OW 337
// remoteVehiclesBuild = 1 ;
16282: LD_ADDR_EXP 28
16286: PUSH
16287: LD_INT 1
16289: ST_TO_ADDR
// end ;
16290: END
// every 2 2$00 do var i , last ;
16291: GO 16293
16293: DISABLE
16294: LD_INT 0
16296: PPUSH
16297: PPUSH
// begin last := 8 ;
16298: LD_ADDR_VAR 0 2
16302: PUSH
16303: LD_INT 8
16305: ST_TO_ADDR
// for i = 1 to last do
16306: LD_ADDR_VAR 0 1
16310: PUSH
16311: DOUBLE
16312: LD_INT 1
16314: DEC
16315: ST_TO_ADDR
16316: LD_VAR 0 2
16320: PUSH
16321: FOR_TO
16322: IFFALSE 16350
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
16324: LD_INT 6300
16326: PPUSH
16327: LD_INT 12600
16329: PPUSH
16330: CALL_OW 12
16334: PPUSH
16335: CALL_OW 67
// PrepareRandoms ( i ) ;
16339: LD_VAR 0 1
16343: PPUSH
16344: CALL 4112 0 1
// end ;
16348: GO 16321
16350: POP
16351: POP
// end ;
16352: PPOPN 2
16354: END
// every 5 5$20 do
16355: GO 16357
16357: DISABLE
// begin DialogueOn ;
16358: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16362: LD_EXP 10
16366: PPUSH
16367: LD_STRING D12a-Sci-1
16369: PPUSH
16370: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16374: LD_EXP 1
16378: PPUSH
16379: LD_STRING D12a-JMM-1
16381: PPUSH
16382: CALL_OW 88
// DialogueOff ;
16386: CALL_OW 7
// cratesStatus = 1 ;
16390: LD_ADDR_EXP 38
16394: PUSH
16395: LD_INT 1
16397: ST_TO_ADDR
// end ;
16398: END
// every 13 13$0 do
16399: GO 16401
16401: DISABLE
// begin DialogueOn ;
16402: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16406: LD_EXP 10
16410: PPUSH
16411: LD_STRING D12b-Sci-1
16413: PPUSH
16414: CALL_OW 94
// DialogueOff ;
16418: CALL_OW 7
// cratesStatus = 2 ;
16422: LD_ADDR_EXP 38
16426: PUSH
16427: LD_INT 2
16429: ST_TO_ADDR
// end ;
16430: END
// every 32 32$0 do
16431: GO 16433
16433: DISABLE
// begin DialogueOn ;
16434: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16438: LD_EXP 10
16442: PPUSH
16443: LD_STRING D12c-Sci-1
16445: PPUSH
16446: CALL_OW 94
// DialogueOff ;
16450: CALL_OW 7
// wait ( 3 3$0 ) ;
16454: LD_INT 6300
16456: PPUSH
16457: CALL_OW 67
// DialogueOn ;
16461: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16465: LD_EXP 10
16469: PPUSH
16470: LD_STRING D12d-Sci-1
16472: PPUSH
16473: CALL_OW 94
// DialogueOff ;
16477: CALL_OW 7
// cratesStatus = 1 ;
16481: LD_ADDR_EXP 38
16485: PUSH
16486: LD_INT 1
16488: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16489: LD_INT 1400
16491: PPUSH
16492: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16496: LD_INT 35
16498: PPUSH
16499: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
16503: LD_INT 1
16505: PPUSH
16506: CALL_OW 463
16510: NOT
16511: PUSH
16512: LD_INT 32
16514: PPUSH
16515: LD_INT 81
16517: PUSH
16518: LD_INT 1
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PPUSH
16525: CALL_OW 70
16529: NOT
16530: AND
16531: IFFALSE 16496
// PrepareJoan ;
16533: CALL 3016 0 0
// end ;
16537: END
// every 42 42$0 do
16538: GO 16540
16540: DISABLE
// begin DialogueOn ;
16541: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16545: LD_EXP 10
16549: PPUSH
16550: LD_STRING D12e-Sci-1
16552: PPUSH
16553: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16557: LD_EXP 1
16561: PPUSH
16562: LD_STRING D12e-JMM-1
16564: PPUSH
16565: CALL_OW 88
// DialogueOff ;
16569: CALL_OW 7
// cratesStatus = 2 ;
16573: LD_ADDR_EXP 38
16577: PUSH
16578: LD_INT 2
16580: ST_TO_ADDR
// end ;
16581: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16582: LD_INT 22
16584: PUSH
16585: LD_INT 6
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 21
16594: PUSH
16595: LD_INT 2
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 34
16604: PUSH
16605: LD_INT 51
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: LIST
16616: PPUSH
16617: CALL_OW 69
16621: PUSH
16622: LD_INT 0
16624: GREATER
16625: IFFALSE 16708
16627: GO 16629
16629: DISABLE
16630: LD_INT 0
16632: PPUSH
// begin enable ;
16633: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16634: LD_ADDR_VAR 0 1
16638: PUSH
16639: LD_INT 22
16641: PUSH
16642: LD_INT 6
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 2
16651: PUSH
16652: LD_INT 21
16654: PUSH
16655: LD_INT 1
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 21
16664: PUSH
16665: LD_INT 2
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: LIST
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PPUSH
16681: CALL_OW 69
16685: PUSH
16686: FOR_IN
16687: IFFALSE 16706
// ComAgressiveMove ( i , 138 , 168 ) ;
16689: LD_VAR 0 1
16693: PPUSH
16694: LD_INT 138
16696: PPUSH
16697: LD_INT 168
16699: PPUSH
16700: CALL_OW 114
16704: GO 16686
16706: POP
16707: POP
// end ;
16708: PPOPN 1
16710: END
// every 0 0$1 do var i ;
16711: GO 16713
16713: DISABLE
16714: LD_INT 0
16716: PPUSH
// begin enable ;
16717: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16718: LD_ADDR_VAR 0 1
16722: PUSH
16723: LD_INT 4
16725: PPUSH
16726: LD_INT 2
16728: PUSH
16729: LD_INT 22
16731: PUSH
16732: LD_INT 3
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 22
16741: PUSH
16742: LD_INT 6
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: LIST
16753: PUSH
16754: EMPTY
16755: LIST
16756: PPUSH
16757: CALL_OW 70
16761: PUSH
16762: FOR_IN
16763: IFFALSE 16827
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16765: LD_INT 4
16767: PPUSH
16768: LD_INT 22
16770: PUSH
16771: LD_INT 6
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 34
16780: PUSH
16781: LD_INT 51
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PPUSH
16792: CALL_OW 70
16796: PUSH
16797: LD_INT 0
16799: GREATER
16800: IFFALSE 16816
// sendedConvoys = sendedConvoys + 1 ;
16802: LD_ADDR_EXP 39
16806: PUSH
16807: LD_EXP 39
16811: PUSH
16812: LD_INT 1
16814: PLUS
16815: ST_TO_ADDR
// RemoveUnit ( i ) ;
16816: LD_VAR 0 1
16820: PPUSH
16821: CALL_OW 64
// end ;
16825: GO 16762
16827: POP
16828: POP
// end ; end_of_file
16829: PPOPN 1
16831: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16832: LD_VAR 0 1
16836: PUSH
16837: LD_INT 1
16839: EQUAL
16840: PUSH
16841: LD_VAR 0 2
16845: PUSH
16846: LD_INT 3
16848: EQUAL
16849: AND
16850: IFFALSE 16860
// contactWithRussian = 1 ;
16852: LD_ADDR_EXP 22
16856: PUSH
16857: LD_INT 1
16859: ST_TO_ADDR
// end ;
16860: PPOPN 2
16862: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16863: LD_VAR 0 1
16867: PPUSH
16868: CALL_OW 266
16872: PUSH
16873: LD_INT 36
16875: EQUAL
16876: PUSH
16877: LD_VAR 0 1
16881: PPUSH
16882: CALL_OW 255
16886: PUSH
16887: LD_INT 1
16889: EQUAL
16890: AND
16891: PUSH
16892: LD_INT 22
16894: PUSH
16895: LD_INT 1
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 21
16904: PUSH
16905: LD_INT 2
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 33
16914: PUSH
16915: LD_INT 2
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: LIST
16926: PPUSH
16927: CALL_OW 69
16931: PUSH
16932: LD_INT 0
16934: EQUAL
16935: AND
16936: PUSH
16937: LD_EXP 23
16941: PUSH
16942: LD_INT 0
16944: EQUAL
16945: AND
16946: IFFALSE 17026
// begin firstTower = 1 ;
16948: LD_ADDR_EXP 23
16952: PUSH
16953: LD_INT 1
16955: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16956: LD_INT 22
16958: PUSH
16959: LD_INT 1
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 21
16968: PUSH
16969: LD_INT 1
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 25
16978: PUSH
16979: LD_INT 3
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 26
16988: PUSH
16989: LD_INT 1
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: PPUSH
17002: CALL_OW 69
17006: PUSH
17007: LD_EXP 1
17011: PUSH
17012: EMPTY
17013: LIST
17014: DIFF
17015: PPUSH
17016: LD_STRING D3b-Mech1-1
17018: PPUSH
17019: LD_STRING D3b-Mech1-1
17021: PPUSH
17022: CALL 6247 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
17026: LD_VAR 0 1
17030: PPUSH
17031: CALL_OW 266
17035: PUSH
17036: LD_INT 0
17038: EQUAL
17039: PUSH
17040: LD_VAR 0 1
17044: PPUSH
17045: CALL_OW 255
17049: PUSH
17050: LD_INT 1
17052: EQUAL
17053: AND
17054: IFFALSE 17068
// SetBName ( building , theta ) ;
17056: LD_VAR 0 1
17060: PPUSH
17061: LD_STRING theta
17063: PPUSH
17064: CALL_OW 500
// if GetSide ( building ) = 3 then
17068: LD_VAR 0 1
17072: PPUSH
17073: CALL_OW 255
17077: PUSH
17078: LD_INT 3
17080: EQUAL
17081: IFFALSE 17155
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17083: LD_ADDR_EXP 31
17087: PUSH
17088: LD_EXP 31
17092: PPUSH
17093: LD_INT 1
17095: PPUSH
17096: CALL_OW 3
17100: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17101: LD_ADDR_EXP 31
17105: PUSH
17106: LD_EXP 31
17110: PPUSH
17111: LD_INT 1
17113: PPUSH
17114: CALL_OW 3
17118: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17119: LD_ADDR_EXP 31
17123: PUSH
17124: LD_EXP 31
17128: PPUSH
17129: LD_INT 1
17131: PPUSH
17132: CALL_OW 3
17136: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17137: LD_ADDR_EXP 31
17141: PUSH
17142: LD_EXP 31
17146: PPUSH
17147: LD_INT 1
17149: PPUSH
17150: CALL_OW 3
17154: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
17155: LD_VAR 0 1
17159: PPUSH
17160: CALL_OW 255
17164: PUSH
17165: LD_INT 3
17167: EQUAL
17168: PUSH
17169: LD_VAR 0 1
17173: PPUSH
17174: CALL_OW 266
17178: PUSH
17179: LD_INT 0
17181: EQUAL
17182: PUSH
17183: LD_VAR 0 1
17187: PPUSH
17188: CALL_OW 266
17192: PUSH
17193: LD_INT 2
17195: EQUAL
17196: OR
17197: PUSH
17198: LD_VAR 0 1
17202: PPUSH
17203: CALL_OW 266
17207: PUSH
17208: LD_INT 4
17210: EQUAL
17211: OR
17212: PUSH
17213: EMPTY
17214: LIST
17215: AND
17216: IFFALSE 17227
// ComUpgrade ( building ) ;
17218: LD_VAR 0 1
17222: PPUSH
17223: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
17227: LD_VAR 0 1
17231: PPUSH
17232: CALL_OW 255
17236: PUSH
17237: LD_INT 3
17239: EQUAL
17240: PUSH
17241: LD_VAR 0 1
17245: PPUSH
17246: CALL_OW 266
17250: PUSH
17251: LD_INT 32
17253: EQUAL
17254: AND
17255: IFFALSE 17296
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
17257: LD_VAR 0 1
17261: PPUSH
17262: LD_INT 42
17264: PUSH
17265: LD_INT 43
17267: PUSH
17268: LD_INT 44
17270: PUSH
17271: LD_INT 46
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 1
17282: PPUSH
17283: LD_INT 4
17285: PPUSH
17286: CALL_OW 12
17290: ARRAY
17291: PPUSH
17292: CALL_OW 208
// end ; end ;
17296: PPOPN 1
17298: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
17299: LD_VAR 0 1
17303: PUSH
17304: LD_INT 22
17306: PUSH
17307: LD_INT 1
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 21
17316: PUSH
17317: LD_INT 1
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 23
17326: PUSH
17327: LD_INT 1
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: LIST
17338: PPUSH
17339: CALL_OW 69
17343: IN
17344: IFFALSE 17360
// killCounter := killCounter + 1 ;
17346: LD_ADDR_EXP 47
17350: PUSH
17351: LD_EXP 47
17355: PUSH
17356: LD_INT 1
17358: PLUS
17359: ST_TO_ADDR
// if unit = JMM then
17360: LD_VAR 0 1
17364: PUSH
17365: LD_EXP 1
17369: EQUAL
17370: IFFALSE 17379
// YouLost ( JMM ) ;
17372: LD_STRING JMM
17374: PPUSH
17375: CALL_OW 104
// if unit = Joan then
17379: LD_VAR 0 1
17383: PUSH
17384: LD_EXP 15
17388: EQUAL
17389: IFFALSE 17399
// JoanStatus = 0 ;
17391: LD_ADDR_EXP 16
17395: PUSH
17396: LD_INT 0
17398: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17399: LD_VAR 0 1
17403: PPUSH
17404: CALL_OW 255
17408: PUSH
17409: LD_INT 1
17411: EQUAL
17412: PUSH
17413: LD_VAR 0 1
17417: PPUSH
17418: CALL_OW 247
17422: PUSH
17423: LD_INT 1
17425: EQUAL
17426: AND
17427: IFFALSE 17503
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17429: LD_VAR 0 1
17433: PPUSH
17434: CALL_OW 257
17438: PUSH
17439: LD_INT 1
17441: EQUAL
17442: PUSH
17443: LD_VAR 0 1
17447: PPUSH
17448: CALL_OW 257
17452: PUSH
17453: LD_INT 2
17455: EQUAL
17456: OR
17457: PUSH
17458: LD_VAR 0 1
17462: PPUSH
17463: CALL_OW 257
17467: PUSH
17468: LD_INT 3
17470: EQUAL
17471: OR
17472: PUSH
17473: LD_VAR 0 1
17477: PPUSH
17478: CALL_OW 257
17482: PUSH
17483: LD_INT 4
17485: EQUAL
17486: OR
17487: IFFALSE 17503
// unitLost = unitLost + 1 ;
17489: LD_ADDR_EXP 30
17493: PUSH
17494: LD_EXP 30
17498: PUSH
17499: LD_INT 1
17501: PLUS
17502: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17503: LD_VAR 0 1
17507: PPUSH
17508: CALL_OW 255
17512: PUSH
17513: LD_INT 3
17515: EQUAL
17516: PUSH
17517: LD_VAR 0 1
17521: PPUSH
17522: CALL_OW 247
17526: PUSH
17527: LD_INT 3
17529: EQUAL
17530: AND
17531: IFFALSE 18223
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17533: LD_VAR 0 1
17537: PPUSH
17538: CALL_OW 266
17542: PUSH
17543: LD_INT 31
17545: EQUAL
17546: PUSH
17547: LD_VAR 0 1
17551: PPUSH
17552: CALL_OW 266
17556: PUSH
17557: LD_INT 32
17559: EQUAL
17560: OR
17561: PUSH
17562: LD_VAR 0 1
17566: PPUSH
17567: CALL_OW 266
17571: PUSH
17572: LD_INT 36
17574: EQUAL
17575: OR
17576: PUSH
17577: LD_VAR 0 1
17581: PPUSH
17582: CALL_OW 266
17586: PUSH
17587: LD_INT 0
17589: EQUAL
17590: OR
17591: PUSH
17592: LD_VAR 0 1
17596: PPUSH
17597: CALL_OW 266
17601: PUSH
17602: LD_INT 24
17604: EQUAL
17605: OR
17606: PUSH
17607: LD_VAR 0 1
17611: PPUSH
17612: CALL_OW 266
17616: PUSH
17617: LD_INT 17
17619: EQUAL
17620: OR
17621: PUSH
17622: LD_VAR 0 1
17626: PPUSH
17627: CALL_OW 266
17631: PUSH
17632: LD_INT 25
17634: EQUAL
17635: OR
17636: PUSH
17637: LD_VAR 0 1
17641: PPUSH
17642: CALL_OW 266
17646: PUSH
17647: LD_INT 19
17649: EQUAL
17650: OR
17651: PUSH
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 266
17661: PUSH
17662: LD_INT 20
17664: EQUAL
17665: OR
17666: PUSH
17667: LD_VAR 0 1
17671: PPUSH
17672: CALL_OW 266
17676: PUSH
17677: LD_INT 18
17679: EQUAL
17680: OR
17681: PUSH
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 266
17691: PUSH
17692: LD_INT 21
17694: EQUAL
17695: OR
17696: PUSH
17697: LD_VAR 0 1
17701: PPUSH
17702: CALL_OW 266
17706: PUSH
17707: LD_INT 23
17709: EQUAL
17710: OR
17711: PUSH
17712: LD_VAR 0 1
17716: PPUSH
17717: CALL_OW 266
17721: PUSH
17722: LD_INT 16
17724: EQUAL
17725: OR
17726: PUSH
17727: LD_VAR 0 1
17731: PPUSH
17732: CALL_OW 266
17736: PUSH
17737: LD_INT 6
17739: EQUAL
17740: OR
17741: PUSH
17742: LD_VAR 0 1
17746: PPUSH
17747: CALL_OW 266
17751: PUSH
17752: LD_INT 29
17754: EQUAL
17755: OR
17756: PUSH
17757: LD_VAR 0 1
17761: PPUSH
17762: CALL_OW 266
17766: PUSH
17767: LD_INT 26
17769: EQUAL
17770: OR
17771: PUSH
17772: LD_VAR 0 1
17776: PPUSH
17777: CALL_OW 266
17781: PUSH
17782: LD_INT 30
17784: EQUAL
17785: OR
17786: PUSH
17787: LD_VAR 0 1
17791: PPUSH
17792: CALL_OW 266
17796: PUSH
17797: LD_INT 28
17799: EQUAL
17800: OR
17801: PUSH
17802: LD_VAR 0 1
17806: PPUSH
17807: CALL_OW 266
17811: PUSH
17812: LD_INT 27
17814: EQUAL
17815: OR
17816: PUSH
17817: LD_VAR 0 1
17821: PPUSH
17822: CALL_OW 266
17826: PUSH
17827: LD_INT 33
17829: EQUAL
17830: OR
17831: PUSH
17832: LD_VAR 0 1
17836: PPUSH
17837: CALL_OW 266
17841: PUSH
17842: LD_INT 2
17844: EQUAL
17845: OR
17846: PUSH
17847: LD_VAR 0 1
17851: PPUSH
17852: CALL_OW 266
17856: PUSH
17857: LD_INT 4
17859: EQUAL
17860: OR
17861: IFFALSE 17947
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17863: LD_ADDR_EXP 31
17867: PUSH
17868: LD_EXP 31
17872: PUSH
17873: LD_VAR 0 1
17877: PPUSH
17878: CALL_OW 266
17882: ADD
17883: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17884: LD_ADDR_EXP 31
17888: PUSH
17889: LD_EXP 31
17893: PUSH
17894: LD_VAR 0 1
17898: PPUSH
17899: CALL_OW 250
17903: ADD
17904: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17905: LD_ADDR_EXP 31
17909: PUSH
17910: LD_EXP 31
17914: PUSH
17915: LD_VAR 0 1
17919: PPUSH
17920: CALL_OW 251
17924: ADD
17925: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17926: LD_ADDR_EXP 31
17930: PUSH
17931: LD_EXP 31
17935: PUSH
17936: LD_VAR 0 1
17940: PPUSH
17941: CALL_OW 254
17945: ADD
17946: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17947: LD_VAR 0 1
17951: PPUSH
17952: CALL_OW 266
17956: PUSH
17957: LD_INT 1
17959: EQUAL
17960: IFFALSE 18039
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17962: LD_ADDR_EXP 31
17966: PUSH
17967: LD_EXP 31
17971: PUSH
17972: LD_INT 0
17974: ADD
17975: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17976: LD_ADDR_EXP 31
17980: PUSH
17981: LD_EXP 31
17985: PUSH
17986: LD_VAR 0 1
17990: PPUSH
17991: CALL_OW 250
17995: ADD
17996: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17997: LD_ADDR_EXP 31
18001: PUSH
18002: LD_EXP 31
18006: PUSH
18007: LD_VAR 0 1
18011: PPUSH
18012: CALL_OW 251
18016: ADD
18017: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18018: LD_ADDR_EXP 31
18022: PUSH
18023: LD_EXP 31
18027: PUSH
18028: LD_VAR 0 1
18032: PPUSH
18033: CALL_OW 254
18037: ADD
18038: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18039: LD_VAR 0 1
18043: PPUSH
18044: CALL_OW 266
18048: PUSH
18049: LD_INT 3
18051: EQUAL
18052: IFFALSE 18131
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
18054: LD_ADDR_EXP 31
18058: PUSH
18059: LD_EXP 31
18063: PUSH
18064: LD_INT 2
18066: ADD
18067: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18068: LD_ADDR_EXP 31
18072: PUSH
18073: LD_EXP 31
18077: PUSH
18078: LD_VAR 0 1
18082: PPUSH
18083: CALL_OW 250
18087: ADD
18088: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18089: LD_ADDR_EXP 31
18093: PUSH
18094: LD_EXP 31
18098: PUSH
18099: LD_VAR 0 1
18103: PPUSH
18104: CALL_OW 251
18108: ADD
18109: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18110: LD_ADDR_EXP 31
18114: PUSH
18115: LD_EXP 31
18119: PUSH
18120: LD_VAR 0 1
18124: PPUSH
18125: CALL_OW 254
18129: ADD
18130: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18131: LD_VAR 0 1
18135: PPUSH
18136: CALL_OW 266
18140: PUSH
18141: LD_INT 5
18143: EQUAL
18144: IFFALSE 18223
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
18146: LD_ADDR_EXP 31
18150: PUSH
18151: LD_EXP 31
18155: PUSH
18156: LD_INT 4
18158: ADD
18159: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18160: LD_ADDR_EXP 31
18164: PUSH
18165: LD_EXP 31
18169: PUSH
18170: LD_VAR 0 1
18174: PPUSH
18175: CALL_OW 250
18179: ADD
18180: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18181: LD_ADDR_EXP 31
18185: PUSH
18186: LD_EXP 31
18190: PUSH
18191: LD_VAR 0 1
18195: PPUSH
18196: CALL_OW 251
18200: ADD
18201: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18202: LD_ADDR_EXP 31
18206: PUSH
18207: LD_EXP 31
18211: PUSH
18212: LD_VAR 0 1
18216: PPUSH
18217: CALL_OW 254
18221: ADD
18222: ST_TO_ADDR
// end ; end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18223: LD_EXP 48
18227: PUSH
18228: LD_VAR 0 1
18232: PPUSH
18233: CALL_OW 257
18237: PUSH
18238: LD_INT 3
18240: EQUAL
18241: AND
18242: PUSH
18243: LD_VAR 0 1
18247: PPUSH
18248: CALL_OW 255
18252: PUSH
18253: LD_INT 3
18255: EQUAL
18256: AND
18257: PUSH
18258: LD_INT 21
18260: PPUSH
18261: CALL_OW 302
18265: AND
18266: PUSH
18267: LD_INT 21
18269: PPUSH
18270: CALL_OW 255
18274: PUSH
18275: LD_INT 3
18277: EQUAL
18278: AND
18279: IFFALSE 18361
// begin ruMechCounter := ruMechCounter - 1 ;
18281: LD_ADDR_EXP 48
18285: PUSH
18286: LD_EXP 48
18290: PUSH
18291: LD_INT 1
18293: MINUS
18294: ST_TO_ADDR
// uc_side = 3 ;
18295: LD_ADDR_OWVAR 20
18299: PUSH
18300: LD_INT 3
18302: ST_TO_ADDR
// uc_nation = 3 ;
18303: LD_ADDR_OWVAR 21
18307: PUSH
18308: LD_INT 3
18310: ST_TO_ADDR
// hc_gallery :=  ;
18311: LD_ADDR_OWVAR 33
18315: PUSH
18316: LD_STRING 
18318: ST_TO_ADDR
// hc_name :=  ;
18319: LD_ADDR_OWVAR 26
18323: PUSH
18324: LD_STRING 
18326: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18327: LD_INT 0
18329: PPUSH
18330: LD_EXP 34
18334: PPUSH
18335: LD_EXP 35
18339: PPUSH
18340: CALL_OW 12
18344: PPUSH
18345: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
18349: CALL_OW 44
18353: PPUSH
18354: LD_INT 21
18356: PPUSH
18357: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18361: LD_VAR 0 1
18365: PPUSH
18366: CALL_OW 255
18370: PUSH
18371: LD_INT 3
18373: EQUAL
18374: PUSH
18375: LD_VAR 0 1
18379: PPUSH
18380: CALL_OW 264
18384: PUSH
18385: LD_INT 52
18387: EQUAL
18388: AND
18389: PUSH
18390: LD_INT 21
18392: PPUSH
18393: CALL_OW 302
18397: AND
18398: PUSH
18399: LD_INT 21
18401: PPUSH
18402: CALL_OW 255
18406: PUSH
18407: LD_INT 3
18409: EQUAL
18410: AND
18411: IFFALSE 18432
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18413: LD_INT 21
18415: PPUSH
18416: LD_INT 22
18418: PPUSH
18419: LD_INT 1
18421: PPUSH
18422: LD_INT 1
18424: PPUSH
18425: LD_INT 52
18427: PPUSH
18428: CALL_OW 125
// end ;
18432: PPOPN 1
18434: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18435: LD_INT 0
18437: PPUSH
18438: PPUSH
18439: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18440: LD_VAR 0 1
18444: PPUSH
18445: CALL_OW 264
18449: PUSH
18450: LD_INT 51
18452: EQUAL
18453: PUSH
18454: LD_VAR 0 1
18458: PPUSH
18459: CALL_OW 255
18463: PUSH
18464: LD_INT 3
18466: EQUAL
18467: AND
18468: IFFALSE 18530
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18470: LD_ADDR_VAR 0 5
18474: PUSH
18475: LD_INT 2
18477: PPUSH
18478: CALL_OW 274
18482: PPUSH
18483: LD_INT 1
18485: PPUSH
18486: CALL_OW 275
18490: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18491: LD_INT 2
18493: PPUSH
18494: CALL_OW 274
18498: PPUSH
18499: LD_INT 1
18501: PPUSH
18502: LD_VAR 0 5
18506: PUSH
18507: LD_INT 100
18509: MINUS
18510: PPUSH
18511: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18515: LD_VAR 0 1
18519: PPUSH
18520: LD_INT 1
18522: PPUSH
18523: LD_INT 100
18525: PPUSH
18526: CALL_OW 291
// end ; if building = rufabsupp then
18530: LD_VAR 0 2
18534: PUSH
18535: LD_INT 17
18537: EQUAL
18538: IFFALSE 18552
// SetSide ( vehicle , 6 ) ;
18540: LD_VAR 0 1
18544: PPUSH
18545: LD_INT 6
18547: PPUSH
18548: CALL_OW 235
// end ;
18552: PPOPN 5
18554: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18555: LD_VAR 0 1
18559: PPUSH
18560: CALL_OW 255
18564: PUSH
18565: LD_INT 3
18567: EQUAL
18568: IFFALSE 18599
// begin tamedApemans = tamedApemans + 1 ;
18570: LD_ADDR_EXP 32
18574: PUSH
18575: LD_EXP 32
18579: PUSH
18580: LD_INT 1
18582: PLUS
18583: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18584: LD_VAR 0 1
18588: PPUSH
18589: LD_INT 106
18591: PPUSH
18592: LD_INT 85
18594: PPUSH
18595: CALL_OW 111
// end ; end ;
18599: PPOPN 2
18601: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18602: LD_INT 0
18604: PPUSH
18605: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18606: LD_VAR 0 1
18610: PPUSH
18611: CALL_OW 255
18615: PUSH
18616: LD_INT 3
18618: EQUAL
18619: PUSH
18620: LD_VAR 0 1
18624: PPUSH
18625: CALL_OW 247
18629: PUSH
18630: LD_INT 2
18632: EQUAL
18633: AND
18634: IFFALSE 18743
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18636: LD_VAR 0 1
18640: PPUSH
18641: CALL_OW 264
18645: PUSH
18646: LD_INT 42
18648: EQUAL
18649: PUSH
18650: LD_VAR 0 1
18654: PPUSH
18655: CALL_OW 264
18659: PUSH
18660: LD_INT 43
18662: EQUAL
18663: OR
18664: PUSH
18665: LD_VAR 0 1
18669: PPUSH
18670: CALL_OW 264
18674: PUSH
18675: LD_INT 44
18677: EQUAL
18678: OR
18679: PUSH
18680: LD_VAR 0 1
18684: PPUSH
18685: CALL_OW 264
18689: PUSH
18690: LD_INT 46
18692: EQUAL
18693: OR
18694: IFFALSE 18743
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18696: LD_INT 21
18698: PPUSH
18699: LD_VAR 0 1
18703: PPUSH
18704: CALL_OW 265
18708: PPUSH
18709: LD_VAR 0 1
18713: PPUSH
18714: CALL_OW 262
18718: PPUSH
18719: LD_VAR 0 1
18723: PPUSH
18724: CALL_OW 263
18728: PPUSH
18729: LD_VAR 0 1
18733: PPUSH
18734: CALL_OW 264
18738: PPUSH
18739: CALL_OW 185
// end ;
18743: PPOPN 3
18745: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18746: LD_VAR 0 1
18750: PPUSH
18751: CALL_OW 255
18755: PUSH
18756: LD_INT 3
18758: EQUAL
18759: PUSH
18760: LD_VAR 0 2
18764: PPUSH
18765: CALL_OW 255
18769: PUSH
18770: LD_INT 3
18772: EQUAL
18773: AND
18774: PUSH
18775: LD_VAR 0 1
18779: PPUSH
18780: CALL_OW 302
18784: AND
18785: IFFALSE 18827
// begin ComRepairVehicle ( human , vehicle ) ;
18787: LD_VAR 0 2
18791: PPUSH
18792: LD_VAR 0 1
18796: PPUSH
18797: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18801: LD_VAR 0 2
18805: PPUSH
18806: LD_VAR 0 1
18810: PPUSH
18811: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18815: LD_VAR 0 1
18819: PPUSH
18820: LD_INT 100
18822: PPUSH
18823: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18827: LD_VAR 0 1
18831: PPUSH
18832: CALL_OW 255
18836: PUSH
18837: LD_INT 3
18839: EQUAL
18840: PUSH
18841: LD_VAR 0 2
18845: PPUSH
18846: CALL_OW 255
18850: PUSH
18851: LD_INT 3
18853: EQUAL
18854: AND
18855: PUSH
18856: LD_INT 21
18858: PPUSH
18859: CALL_OW 302
18863: AND
18864: PUSH
18865: LD_VAR 0 1
18869: PPUSH
18870: CALL_OW 302
18874: NOT
18875: AND
18876: IFFALSE 18890
// ComEnterUnit ( human , rufab ) ;
18878: LD_VAR 0 2
18882: PPUSH
18883: LD_INT 21
18885: PPUSH
18886: CALL_OW 120
// end ;
18890: PPOPN 2
18892: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18893: LD_VAR 0 1
18897: PUSH
18898: LD_INT 21
18900: EQUAL
18901: PUSH
18902: LD_VAR 0 2
18906: PPUSH
18907: CALL_OW 255
18911: PUSH
18912: LD_INT 3
18914: EQUAL
18915: AND
18916: IFFALSE 18930
// SetLives ( human , 1000 ) ;
18918: LD_VAR 0 2
18922: PPUSH
18923: LD_INT 1000
18925: PPUSH
18926: CALL_OW 234
// end ;
18930: PPOPN 2
18932: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18933: LD_VAR 0 1
18937: PPUSH
18938: CALL 35755 0 1
// end ; end_of_file
18942: PPOPN 1
18944: END
// every 0 0$30 trigger cratesStatus = 1 do
18945: LD_EXP 38
18949: PUSH
18950: LD_INT 1
18952: EQUAL
18953: IFFALSE 19006
18955: GO 18957
18957: DISABLE
// begin enable ;
18958: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
18959: LD_INT 350
18961: PUSH
18962: LD_INT 875
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 1
18971: PPUSH
18972: LD_INT 2
18974: PPUSH
18975: CALL_OW 12
18979: ARRAY
18980: PPUSH
18981: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
18985: LD_INT 1
18987: PPUSH
18988: LD_INT 5
18990: PPUSH
18991: CALL_OW 12
18995: PPUSH
18996: LD_INT 7
18998: PPUSH
18999: LD_INT 1
19001: PPUSH
19002: CALL_OW 55
// end ;
19006: END
// every 1 1$0 trigger cratesStatus = 2 do
19007: LD_EXP 38
19011: PUSH
19012: LD_INT 2
19014: EQUAL
19015: IFFALSE 19098
19017: GO 19019
19019: DISABLE
// begin enable ;
19020: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
19021: LD_INT 3150
19023: PUSH
19024: LD_INT 4550
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 1
19033: PPUSH
19034: LD_INT 2
19036: PPUSH
19037: CALL_OW 12
19041: ARRAY
19042: PPUSH
19043: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
19047: LD_INT 2
19049: PUSH
19050: LD_INT 5
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 1
19059: PPUSH
19060: LD_INT 2
19062: PPUSH
19063: CALL_OW 12
19067: ARRAY
19068: PPUSH
19069: LD_INT 6
19071: PUSH
19072: LD_INT 7
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 1
19081: PPUSH
19082: LD_INT 2
19084: PPUSH
19085: CALL_OW 12
19089: ARRAY
19090: PPUSH
19091: LD_INT 1
19093: PPUSH
19094: CALL_OW 55
// end ;
19098: END
// every 0 0$30 + 0 0$10 do
19099: GO 19101
19101: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19102: LD_INT 4
19104: PUSH
19105: LD_INT 5
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 1
19114: PPUSH
19115: LD_INT 2
19117: PPUSH
19118: CALL_OW 12
19122: ARRAY
19123: PPUSH
19124: LD_INT 7
19126: PPUSH
19127: LD_INT 1
19129: PPUSH
19130: CALL_OW 55
// Wait ( 0 0$15 ) ;
19134: LD_INT 525
19136: PPUSH
19137: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19141: LD_INT 4
19143: PUSH
19144: LD_INT 5
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 1
19153: PPUSH
19154: LD_INT 2
19156: PPUSH
19157: CALL_OW 12
19161: ARRAY
19162: PPUSH
19163: LD_INT 7
19165: PPUSH
19166: LD_INT 1
19168: PPUSH
19169: CALL_OW 55
// Wait ( 0 0$20 ) ;
19173: LD_INT 700
19175: PPUSH
19176: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19180: LD_INT 4
19182: PUSH
19183: LD_INT 5
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 1
19192: PPUSH
19193: LD_INT 2
19195: PPUSH
19196: CALL_OW 12
19200: ARRAY
19201: PPUSH
19202: LD_INT 7
19204: PPUSH
19205: LD_INT 1
19207: PPUSH
19208: CALL_OW 55
// end ; end_of_file
19212: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
19213: LD_EXP 24
19217: PUSH
19218: LD_INT 1
19220: EQUAL
19221: IFFALSE 19522
19223: GO 19225
19225: DISABLE
19226: LD_INT 0
19228: PPUSH
19229: PPUSH
19230: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19231: LD_ADDR_VAR 0 2
19235: PUSH
19236: LD_INT 22
19238: PUSH
19239: LD_INT 1
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 21
19248: PUSH
19249: LD_INT 3
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 2
19258: PUSH
19259: LD_INT 30
19261: PUSH
19262: LD_INT 0
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 30
19271: PUSH
19272: LD_INT 1
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: LIST
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: LIST
19288: PPUSH
19289: CALL_OW 69
19293: ST_TO_ADDR
// for i in tmp do
19294: LD_ADDR_VAR 0 1
19298: PUSH
19299: LD_VAR 0 2
19303: PUSH
19304: FOR_IN
19305: IFFALSE 19338
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19307: LD_ADDR_VAR 0 3
19311: PUSH
19312: LD_VAR 0 3
19316: PUSH
19317: LD_VAR 0 1
19321: PPUSH
19322: CALL_OW 274
19326: PPUSH
19327: LD_INT 1
19329: PPUSH
19330: CALL_OW 275
19334: PLUS
19335: ST_TO_ADDR
19336: GO 19304
19338: POP
19339: POP
// strings = [ ] ;
19340: LD_ADDR_EXP 27
19344: PUSH
19345: EMPTY
19346: ST_TO_ADDR
// if tmp = 0 then
19347: LD_VAR 0 2
19351: PUSH
19352: LD_INT 0
19354: EQUAL
19355: IFFALSE 19380
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19357: LD_ADDR_EXP 27
19361: PUSH
19362: LD_EXP 27
19366: PUSH
19367: LD_STRING #Am06-1
19369: PUSH
19370: LD_EXP 25
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: ADD
19379: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19380: LD_VAR 0 2
19384: PUSH
19385: LD_INT 0
19387: GREATER
19388: PUSH
19389: LD_EXP 25
19393: PUSH
19394: LD_VAR 0 3
19398: GREATER
19399: AND
19400: IFFALSE 19431
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19402: LD_ADDR_EXP 27
19406: PUSH
19407: LD_EXP 27
19411: PUSH
19412: LD_STRING #Am06-1
19414: PUSH
19415: LD_EXP 25
19419: PUSH
19420: LD_VAR 0 3
19424: MINUS
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: ADD
19430: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19431: LD_VAR 0 2
19435: PUSH
19436: LD_INT 0
19438: GREATER
19439: PUSH
19440: LD_EXP 25
19444: PUSH
19445: LD_VAR 0 3
19449: LESSEQUAL
19450: AND
19451: IFFALSE 19474
// strings = strings ^ [ #Am06-1 , 0 ] ;
19453: LD_ADDR_EXP 27
19457: PUSH
19458: LD_EXP 27
19462: PUSH
19463: LD_STRING #Am06-1
19465: PUSH
19466: LD_INT 0
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: ADD
19473: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19474: LD_ADDR_EXP 26
19478: PUSH
19479: LD_EXP 26
19483: PUSH
19484: LD_INT 35
19486: MINUS
19487: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19488: LD_ADDR_EXP 27
19492: PUSH
19493: LD_EXP 27
19497: PUSH
19498: LD_STRING #Am06-2
19500: PUSH
19501: LD_EXP 26
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: ADD
19510: ST_TO_ADDR
// display_strings = strings ;
19511: LD_ADDR_OWVAR 47
19515: PUSH
19516: LD_EXP 27
19520: ST_TO_ADDR
// enable ;
19521: ENABLE
// end ; end_of_file
19522: PPOPN 3
19524: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19525: LD_INT 0
19527: PPUSH
19528: PPUSH
19529: PPUSH
19530: PPUSH
19531: PPUSH
19532: PPUSH
19533: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19534: LD_ADDR_VAR 0 3
19538: PUSH
19539: LD_INT 22
19541: PUSH
19542: LD_INT 1
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 2
19551: PUSH
19552: LD_INT 30
19554: PUSH
19555: LD_INT 0
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 30
19564: PUSH
19565: LD_INT 1
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: LIST
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PPUSH
19581: CALL_OW 69
19585: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19586: LD_INT 35
19588: PPUSH
19589: CALL_OW 67
// until depot ;
19593: LD_VAR 0 3
19597: IFFALSE 19534
// repeat wait ( 0 0$1 ) ;
19599: LD_INT 35
19601: PPUSH
19602: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19606: LD_ADDR_VAR 0 4
19610: PUSH
19611: LD_INT 22
19613: PUSH
19614: LD_INT 1
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 91
19623: PUSH
19624: LD_VAR 0 3
19628: PUSH
19629: LD_INT 1
19631: ARRAY
19632: PUSH
19633: LD_INT 15
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 21
19643: PUSH
19644: LD_INT 1
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 2
19653: PUSH
19654: LD_INT 25
19656: PUSH
19657: LD_INT 1
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 25
19666: PUSH
19667: LD_INT 2
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 25
19676: PUSH
19677: LD_INT 3
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 25
19686: PUSH
19687: LD_INT 4
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 3
19703: PUSH
19704: LD_INT 54
19706: PUSH
19707: EMPTY
19708: LIST
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 3
19716: PUSH
19717: LD_INT 55
19719: PUSH
19720: EMPTY
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: PPUSH
19735: CALL_OW 69
19739: PUSH
19740: LD_EXP 2
19744: PUSH
19745: LD_EXP 3
19749: PUSH
19750: LD_EXP 4
19754: PUSH
19755: LD_EXP 5
19759: PUSH
19760: LD_EXP 7
19764: PUSH
19765: LD_EXP 8
19769: PUSH
19770: LD_EXP 9
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: PUSH
19784: LD_EXP 46
19788: ADD
19789: DIFF
19790: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19791: LD_VAR 0 4
19795: PUSH
19796: LD_INT 1
19798: PPUSH
19799: CALL_OW 463
19803: NOT
19804: AND
19805: IFFALSE 19599
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19807: LD_ADDR_VAR 0 4
19811: PUSH
19812: LD_VAR 0 4
19816: PUSH
19817: LD_INT 1
19819: PPUSH
19820: LD_VAR 0 4
19824: PPUSH
19825: CALL_OW 12
19829: ARRAY
19830: ST_TO_ADDR
// blockSpawn = 1 ;
19831: LD_ADDR_EXP 29
19835: PUSH
19836: LD_INT 1
19838: ST_TO_ADDR
// uc_side = 2 ;
19839: LD_ADDR_OWVAR 20
19843: PUSH
19844: LD_INT 2
19846: ST_TO_ADDR
// uc_nation = 2 ;
19847: LD_ADDR_OWVAR 21
19851: PUSH
19852: LD_INT 2
19854: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19855: LD_ADDR_EXP 19
19859: PUSH
19860: LD_STRING Kurt
19862: PPUSH
19863: LD_INT 0
19865: PPUSH
19866: CALL 6184 0 2
19870: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19871: LD_EXP 19
19875: PPUSH
19876: LD_VAR 0 4
19880: PPUSH
19881: CALL_OW 250
19885: PPUSH
19886: LD_VAR 0 4
19890: PPUSH
19891: CALL_OW 251
19895: PPUSH
19896: LD_INT 5
19898: PPUSH
19899: LD_INT 1
19901: PPUSH
19902: CALL_OW 50
// InGameOn ;
19906: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19910: LD_EXP 19
19914: PPUSH
19915: CALL_OW 87
// wait ( 0 0$2 ) ;
19919: LD_INT 70
19921: PPUSH
19922: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19926: LD_EXP 19
19930: PPUSH
19931: LD_VAR 0 4
19935: PPUSH
19936: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19940: LD_VAR 0 4
19944: PPUSH
19945: LD_EXP 19
19949: PPUSH
19950: CALL_OW 112
// wait ( 0 0$1 ) ;
19954: LD_INT 35
19956: PPUSH
19957: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19961: LD_VAR 0 4
19965: PPUSH
19966: LD_EXP 19
19970: PPUSH
19971: CALL_OW 119
// DialogueOn ;
19975: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19979: LD_EXP 19
19983: PPUSH
19984: LD_STRING D2-Kurt-1
19986: PPUSH
19987: CALL_OW 88
// if tmp = JMM then
19991: LD_VAR 0 4
19995: PUSH
19996: LD_EXP 1
20000: EQUAL
20001: IFFALSE 20093
// begin Say ( JMM , D2-JMM-1 ) ;
20003: LD_EXP 1
20007: PPUSH
20008: LD_STRING D2-JMM-1
20010: PPUSH
20011: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
20015: LD_EXP 19
20019: PPUSH
20020: LD_STRING D2-Kurt-2
20022: PPUSH
20023: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
20027: LD_EXP 1
20031: PPUSH
20032: LD_STRING D2-JMM-2
20034: PPUSH
20035: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20039: LD_EXP 19
20043: PPUSH
20044: LD_STRING D2-Kurt-3
20046: PPUSH
20047: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
20051: LD_EXP 1
20055: PPUSH
20056: LD_STRING D2-JMM-3
20058: PPUSH
20059: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20063: LD_EXP 19
20067: PPUSH
20068: LD_STRING D2-Kurt-4
20070: PPUSH
20071: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
20075: LD_EXP 1
20079: PPUSH
20080: LD_STRING D2-JMM-4
20082: PPUSH
20083: CALL_OW 88
// DialogueOff ;
20087: CALL_OW 7
// end else
20091: GO 20403
// begin if GetSex ( tmp ) = 1 then
20093: LD_VAR 0 4
20097: PPUSH
20098: CALL_OW 258
20102: PUSH
20103: LD_INT 1
20105: EQUAL
20106: IFFALSE 20120
// Say ( tmp , D2-Sol1-1 ) ;
20108: LD_VAR 0 4
20112: PPUSH
20113: LD_STRING D2-Sol1-1
20115: PPUSH
20116: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20120: LD_VAR 0 4
20124: PPUSH
20125: CALL_OW 258
20129: PUSH
20130: LD_INT 2
20132: EQUAL
20133: IFFALSE 20147
// Say ( tmp , D2-FSol1-1 ) ;
20135: LD_VAR 0 4
20139: PPUSH
20140: LD_STRING D2-FSol1-1
20142: PPUSH
20143: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
20147: LD_EXP 19
20151: PPUSH
20152: LD_STRING D2-Kurt-2
20154: PPUSH
20155: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20159: LD_VAR 0 4
20163: PPUSH
20164: CALL_OW 258
20168: PUSH
20169: LD_INT 1
20171: EQUAL
20172: IFFALSE 20186
// Say ( tmp , D2-Sol1-2 ) ;
20174: LD_VAR 0 4
20178: PPUSH
20179: LD_STRING D2-Sol1-2
20181: PPUSH
20182: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20186: LD_VAR 0 4
20190: PPUSH
20191: CALL_OW 258
20195: PUSH
20196: LD_INT 2
20198: EQUAL
20199: IFFALSE 20213
// Say ( tmp , D2-FSol1-2 ) ;
20201: LD_VAR 0 4
20205: PPUSH
20206: LD_STRING D2-FSol1-2
20208: PPUSH
20209: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20213: LD_EXP 19
20217: PPUSH
20218: LD_STRING D2-Kurt-3
20220: PPUSH
20221: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20225: LD_VAR 0 4
20229: PPUSH
20230: CALL_OW 258
20234: PUSH
20235: LD_INT 1
20237: EQUAL
20238: IFFALSE 20252
// Say ( tmp , D2-Sol1-3 ) ;
20240: LD_VAR 0 4
20244: PPUSH
20245: LD_STRING D2-Sol1-3
20247: PPUSH
20248: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20252: LD_VAR 0 4
20256: PPUSH
20257: CALL_OW 258
20261: PUSH
20262: LD_INT 2
20264: EQUAL
20265: IFFALSE 20279
// Say ( tmp , D2-FSol1-3 ) ;
20267: LD_VAR 0 4
20271: PPUSH
20272: LD_STRING D2-FSol1-3
20274: PPUSH
20275: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20279: LD_EXP 19
20283: PPUSH
20284: LD_STRING D2-Kurt-4
20286: PPUSH
20287: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20291: LD_VAR 0 4
20295: PPUSH
20296: CALL_OW 258
20300: PUSH
20301: LD_INT 1
20303: EQUAL
20304: IFFALSE 20318
// Say ( tmp , D2-Sol1-4 ) ;
20306: LD_VAR 0 4
20310: PPUSH
20311: LD_STRING D2-Sol1-4
20313: PPUSH
20314: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20318: LD_VAR 0 4
20322: PPUSH
20323: CALL_OW 258
20327: PUSH
20328: LD_INT 2
20330: EQUAL
20331: IFFALSE 20345
// Say ( tmp , D2-FSol1-4 ) ;
20333: LD_VAR 0 4
20337: PPUSH
20338: LD_STRING D2-FSol1-4
20340: PPUSH
20341: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20345: LD_VAR 0 4
20349: PPUSH
20350: CALL_OW 258
20354: PUSH
20355: LD_INT 1
20357: EQUAL
20358: IFFALSE 20372
// Say ( tmp , D2-Sol1-5 ) ;
20360: LD_VAR 0 4
20364: PPUSH
20365: LD_STRING D2-Sol1-5
20367: PPUSH
20368: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20372: LD_VAR 0 4
20376: PPUSH
20377: CALL_OW 258
20381: PUSH
20382: LD_INT 2
20384: EQUAL
20385: IFFALSE 20399
// Say ( tmp , D2-FSol1-5 ) ;
20387: LD_VAR 0 4
20391: PPUSH
20392: LD_STRING D2-FSol1-5
20394: PPUSH
20395: CALL_OW 88
// DialogueOff ;
20399: CALL_OW 7
// end ; dec = ShowQuery1 ;
20403: LD_ADDR_VAR 0 6
20407: PUSH
20408: CALL 6708 0 0
20412: ST_TO_ADDR
// if dec = 1 then
20413: LD_VAR 0 6
20417: PUSH
20418: LD_INT 1
20420: EQUAL
20421: IFFALSE 20483
// begin DialogueOn ;
20423: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20427: LD_EXP 19
20431: PPUSH
20432: LD_STRING D2a-Kurt-1
20434: PPUSH
20435: CALL_OW 88
// DialogueOff ;
20439: CALL_OW 7
// InGameOff ;
20443: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20447: LD_INT 1
20449: PPUSH
20450: LD_INT 2
20452: PPUSH
20453: LD_INT 2
20455: PPUSH
20456: LD_INT 1
20458: PPUSH
20459: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20463: LD_EXP 19
20467: PPUSH
20468: LD_INT 8
20470: PPUSH
20471: CALL_OW 113
// readyToEscape = 1 ;
20475: LD_ADDR_EXP 21
20479: PUSH
20480: LD_INT 1
20482: ST_TO_ADDR
// end ; if dec = 2 then
20483: LD_VAR 0 6
20487: PUSH
20488: LD_INT 2
20490: EQUAL
20491: IFFALSE 21011
// begin DialogueOn ;
20493: CALL_OW 6
// if tmp = JMM then
20497: LD_VAR 0 4
20501: PUSH
20502: LD_EXP 1
20506: EQUAL
20507: IFFALSE 20563
// begin Say ( JMM , D2b-JMM-1 ) ;
20509: LD_EXP 1
20513: PPUSH
20514: LD_STRING D2b-JMM-1
20516: PPUSH
20517: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20521: LD_EXP 19
20525: PPUSH
20526: LD_STRING D2b-Kurt-1
20528: PPUSH
20529: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20533: LD_EXP 1
20537: PPUSH
20538: LD_STRING D2b-JMM-2
20540: PPUSH
20541: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20545: LD_EXP 19
20549: PPUSH
20550: LD_STRING D2b-Kurt-2
20552: PPUSH
20553: CALL_OW 88
// DialogueOff ;
20557: CALL_OW 7
// end else
20561: GO 20753
// begin if GetSex ( tmp ) = 1 then
20563: LD_VAR 0 4
20567: PPUSH
20568: CALL_OW 258
20572: PUSH
20573: LD_INT 1
20575: EQUAL
20576: IFFALSE 20590
// Say ( tmp , D2b-Sol1-1 ) ;
20578: LD_VAR 0 4
20582: PPUSH
20583: LD_STRING D2b-Sol1-1
20585: PPUSH
20586: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20590: LD_VAR 0 4
20594: PPUSH
20595: CALL_OW 258
20599: PUSH
20600: LD_INT 2
20602: EQUAL
20603: IFFALSE 20617
// Say ( tmp , D2b-FSol1-1 ) ;
20605: LD_VAR 0 4
20609: PPUSH
20610: LD_STRING D2b-FSol1-1
20612: PPUSH
20613: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20617: LD_EXP 19
20621: PPUSH
20622: LD_STRING D2b-Kurt-1
20624: PPUSH
20625: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20629: LD_VAR 0 4
20633: PPUSH
20634: CALL_OW 258
20638: PUSH
20639: LD_INT 1
20641: EQUAL
20642: IFFALSE 20656
// Say ( tmp , D2b-Sol1-2 ) ;
20644: LD_VAR 0 4
20648: PPUSH
20649: LD_STRING D2b-Sol1-2
20651: PPUSH
20652: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20656: LD_VAR 0 4
20660: PPUSH
20661: CALL_OW 258
20665: PUSH
20666: LD_INT 2
20668: EQUAL
20669: IFFALSE 20683
// Say ( tmp , D2b-FSol1-2 ) ;
20671: LD_VAR 0 4
20675: PPUSH
20676: LD_STRING D2b-FSol1-2
20678: PPUSH
20679: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20683: LD_EXP 19
20687: PPUSH
20688: LD_STRING D2b-Kurt-2
20690: PPUSH
20691: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20695: LD_VAR 0 4
20699: PPUSH
20700: CALL_OW 258
20704: PUSH
20705: LD_INT 1
20707: EQUAL
20708: IFFALSE 20722
// Say ( tmp , D2c-Sol1-2 ) ;
20710: LD_VAR 0 4
20714: PPUSH
20715: LD_STRING D2c-Sol1-2
20717: PPUSH
20718: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20722: LD_VAR 0 4
20726: PPUSH
20727: CALL_OW 258
20731: PUSH
20732: LD_INT 2
20734: EQUAL
20735: IFFALSE 20749
// Say ( tmp , D2c-FSol1-2 ) ;
20737: LD_VAR 0 4
20741: PPUSH
20742: LD_STRING D2c-FSol1-2
20744: PPUSH
20745: CALL_OW 88
// DialogueOff ;
20749: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20753: LD_ADDR_VAR 0 7
20757: PUSH
20758: CALL 6782 0 0
20762: ST_TO_ADDR
// if dec2 = 1 then
20763: LD_VAR 0 7
20767: PUSH
20768: LD_INT 1
20770: EQUAL
20771: IFFALSE 20833
// begin DialogueOn ;
20773: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20777: LD_EXP 19
20781: PPUSH
20782: LD_STRING D2a-Kurt-1
20784: PPUSH
20785: CALL_OW 88
// DialogueOff ;
20789: CALL_OW 7
// InGameOff ;
20793: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20797: LD_INT 1
20799: PPUSH
20800: LD_INT 2
20802: PPUSH
20803: LD_INT 2
20805: PPUSH
20806: LD_INT 1
20808: PPUSH
20809: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20813: LD_EXP 19
20817: PPUSH
20818: LD_INT 8
20820: PPUSH
20821: CALL_OW 113
// readyToEscape = 1 ;
20825: LD_ADDR_EXP 21
20829: PUSH
20830: LD_INT 1
20832: ST_TO_ADDR
// end ; if dec2 = 2 then
20833: LD_VAR 0 7
20837: PUSH
20838: LD_INT 2
20840: EQUAL
20841: IFFALSE 21011
// begin if tmp = JMM then
20843: LD_VAR 0 4
20847: PUSH
20848: LD_EXP 1
20852: EQUAL
20853: IFFALSE 20913
// begin DialogueOn ;
20855: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20859: LD_EXP 1
20863: PPUSH
20864: LD_STRING D2c-JMM-1
20866: PPUSH
20867: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20871: LD_EXP 19
20875: PPUSH
20876: LD_STRING D2c-Kurt-1
20878: PPUSH
20879: CALL_OW 88
// DialogueOff ;
20883: CALL_OW 7
// InGameOff ;
20887: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20891: LD_EXP 19
20895: PPUSH
20896: LD_INT 8
20898: PPUSH
20899: CALL_OW 113
// readyToEscape = 1 ;
20903: LD_ADDR_EXP 21
20907: PUSH
20908: LD_INT 1
20910: ST_TO_ADDR
// end else
20911: GO 21011
// begin DialogueOn ;
20913: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20917: LD_VAR 0 4
20921: PPUSH
20922: CALL_OW 258
20926: PUSH
20927: LD_INT 1
20929: EQUAL
20930: IFFALSE 20944
// Say ( tmp , D2c-Sol1-1 ) ;
20932: LD_VAR 0 4
20936: PPUSH
20937: LD_STRING D2c-Sol1-1
20939: PPUSH
20940: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20944: LD_VAR 0 4
20948: PPUSH
20949: CALL_OW 258
20953: PUSH
20954: LD_INT 2
20956: EQUAL
20957: IFFALSE 20971
// Say ( tmp , D2c-FSol1-1 ) ;
20959: LD_VAR 0 4
20963: PPUSH
20964: LD_STRING D2c-FSol1-1
20966: PPUSH
20967: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20971: LD_EXP 19
20975: PPUSH
20976: LD_STRING D2c-Kurt-1
20978: PPUSH
20979: CALL_OW 88
// DialogueOff ;
20983: CALL_OW 7
// InGameOff ;
20987: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20991: LD_EXP 19
20995: PPUSH
20996: LD_INT 8
20998: PPUSH
20999: CALL_OW 113
// readyToEscape = 1 ;
21003: LD_ADDR_EXP 21
21007: PUSH
21008: LD_INT 1
21010: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
21011: LD_VAR 0 6
21015: PUSH
21016: LD_INT 3
21018: EQUAL
21019: IFFALSE 21193
// begin DialogueOn ;
21021: CALL_OW 6
// if tmp = JMM then
21025: LD_VAR 0 4
21029: PUSH
21030: LD_EXP 1
21034: EQUAL
21035: IFFALSE 21095
// begin DialogueOn ;
21037: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
21041: LD_EXP 1
21045: PPUSH
21046: LD_STRING D2c-JMM-1
21048: PPUSH
21049: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21053: LD_EXP 19
21057: PPUSH
21058: LD_STRING D2c-Kurt-1
21060: PPUSH
21061: CALL_OW 88
// DialogueOff ;
21065: CALL_OW 7
// InGameOff ;
21069: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21073: LD_EXP 19
21077: PPUSH
21078: LD_INT 8
21080: PPUSH
21081: CALL_OW 113
// readyToEscape = 1 ;
21085: LD_ADDR_EXP 21
21089: PUSH
21090: LD_INT 1
21092: ST_TO_ADDR
// end else
21093: GO 21193
// begin DialogueOn ;
21095: CALL_OW 6
// if GetSex ( tmp ) = 1 then
21099: LD_VAR 0 4
21103: PPUSH
21104: CALL_OW 258
21108: PUSH
21109: LD_INT 1
21111: EQUAL
21112: IFFALSE 21126
// Say ( tmp , D2c-Sol1-1 ) ;
21114: LD_VAR 0 4
21118: PPUSH
21119: LD_STRING D2c-Sol1-1
21121: PPUSH
21122: CALL_OW 88
// if GetSex ( tmp ) = 2 then
21126: LD_VAR 0 4
21130: PPUSH
21131: CALL_OW 258
21135: PUSH
21136: LD_INT 2
21138: EQUAL
21139: IFFALSE 21153
// Say ( tmp , D2c-FSol1-1 ) ;
21141: LD_VAR 0 4
21145: PPUSH
21146: LD_STRING D2c-FSol1-1
21148: PPUSH
21149: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21153: LD_EXP 19
21157: PPUSH
21158: LD_STRING D2c-Kurt-1
21160: PPUSH
21161: CALL_OW 88
// DialogueOff ;
21165: CALL_OW 7
// InGameOff ;
21169: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21173: LD_EXP 19
21177: PPUSH
21178: LD_INT 8
21180: PPUSH
21181: CALL_OW 113
// readyToEscape = 1 ;
21185: LD_ADDR_EXP 21
21189: PUSH
21190: LD_INT 1
21192: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
21193: LD_ADDR_EXP 29
21197: PUSH
21198: LD_INT 0
21200: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21201: LD_INT 35
21203: PPUSH
21204: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
21208: LD_EXP 19
21212: PPUSH
21213: LD_INT 8
21215: PPUSH
21216: CALL_OW 308
21220: PUSH
21221: LD_EXP 21
21225: AND
21226: PUSH
21227: LD_EXP 19
21231: PPUSH
21232: CALL_OW 301
21236: OR
21237: IFFALSE 21201
// if IsDead ( Kurt ) then
21239: LD_EXP 19
21243: PPUSH
21244: CALL_OW 301
21248: IFFALSE 21252
// exit ;
21250: GO 21321
// RemoveUnit ( Kurt ) ;
21252: LD_EXP 19
21256: PPUSH
21257: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
21261: LD_EXP 19
21265: PPUSH
21266: LD_STRING Kurt
21268: PPUSH
21269: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
21273: LD_INT 1
21275: PPUSH
21276: LD_INT 2
21278: PPUSH
21279: CALL_OW 81
21283: PUSH
21284: LD_INT 0
21286: EQUAL
21287: IFFALSE 21297
// KurtStatus = 1 ;
21289: LD_ADDR_EXP 20
21293: PUSH
21294: LD_INT 1
21296: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
21297: LD_INT 1
21299: PPUSH
21300: LD_INT 2
21302: PPUSH
21303: CALL_OW 81
21307: PUSH
21308: LD_INT 2
21310: EQUAL
21311: IFFALSE 21321
// KurtStatus = 2 ;
21313: LD_ADDR_EXP 20
21317: PUSH
21318: LD_INT 2
21320: ST_TO_ADDR
// end ; end_of_file
21321: LD_VAR 0 1
21325: RET
// every 0 0$1 do
21326: GO 21328
21328: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
21329: LD_INT 3
21331: PPUSH
21332: LD_INT 32
21334: PPUSH
21335: LD_INT 3
21337: PPUSH
21338: CALL 6837 0 3
21342: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21343: GO 21345
21345: DISABLE
21346: LD_INT 0
21348: PPUSH
// begin enemyWayX = [ ] ;
21349: LD_ADDR_EXP 49
21353: PUSH
21354: EMPTY
21355: ST_TO_ADDR
// enemyWayY = [ ] ;
21356: LD_ADDR_EXP 50
21360: PUSH
21361: EMPTY
21362: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
21363: LD_ADDR_VAR 0 1
21367: PUSH
21368: LD_INT 1
21370: PPUSH
21371: LD_INT 2
21373: PPUSH
21374: CALL_OW 12
21378: ST_TO_ADDR
// if rnd = 1 then
21379: LD_VAR 0 1
21383: PUSH
21384: LD_INT 1
21386: EQUAL
21387: IFFALSE 21427
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21389: LD_ADDR_EXP 49
21393: PUSH
21394: LD_INT 93
21396: PUSH
21397: LD_INT 84
21399: PUSH
21400: LD_INT 104
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: LIST
21407: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21408: LD_ADDR_EXP 50
21412: PUSH
21413: LD_INT 51
21415: PUSH
21416: LD_INT 35
21418: PUSH
21419: LD_INT 28
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: LIST
21426: ST_TO_ADDR
// end ; if rnd = 2 then
21427: LD_VAR 0 1
21431: PUSH
21432: LD_INT 2
21434: EQUAL
21435: IFFALSE 21491
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21437: LD_ADDR_EXP 49
21441: PUSH
21442: LD_INT 93
21444: PUSH
21445: LD_INT 52
21447: PUSH
21448: LD_INT 34
21450: PUSH
21451: LD_INT 28
21453: PUSH
21454: LD_INT 30
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21464: LD_ADDR_EXP 50
21468: PUSH
21469: LD_INT 51
21471: PUSH
21472: LD_INT 45
21474: PUSH
21475: LD_INT 35
21477: PUSH
21478: LD_INT 26
21480: PUSH
21481: LD_INT 20
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: ST_TO_ADDR
// end ; enable ;
21491: ENABLE
// end ;
21492: PPOPN 1
21494: END
// every 0 0$1 do
21495: GO 21497
21497: DISABLE
// begin enable ;
21498: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21499: LD_INT 3
21501: PPUSH
21502: LD_INT 2
21504: PPUSH
21505: LD_INT 10
21507: PPUSH
21508: LD_EXP 31
21512: PPUSH
21513: CALL 8272 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21517: LD_INT 3
21519: PPUSH
21520: LD_INT 12
21522: PPUSH
21523: LD_EXP 31
21527: PPUSH
21528: CALL 10157 0 3
// if disableHealAI = 0 then
21532: LD_EXP 33
21536: PUSH
21537: LD_INT 0
21539: EQUAL
21540: IFFALSE 21561
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21542: LD_INT 3
21544: PPUSH
21545: LD_INT 9
21547: PPUSH
21548: LD_INT 10
21550: PPUSH
21551: LD_INT 32
21553: PUSH
21554: EMPTY
21555: LIST
21556: PPUSH
21557: CALL 8663 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21561: LD_INT 3
21563: PPUSH
21564: LD_INT 51
21566: PPUSH
21567: LD_INT 6
21569: PPUSH
21570: CALL 9371 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21574: LD_INT 3
21576: PPUSH
21577: LD_INT 12
21579: PPUSH
21580: LD_INT 121
21582: PPUSH
21583: LD_INT 100
21585: PPUSH
21586: CALL 7232 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21590: LD_INT 3
21592: PPUSH
21593: LD_INT 22
21595: PPUSH
21596: LD_EXP 49
21600: PPUSH
21601: LD_EXP 50
21605: PPUSH
21606: CALL 7435 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21610: LD_INT 3
21612: PPUSH
21613: LD_INT 10
21615: PPUSH
21616: CALL 9514 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21620: LD_INT 3
21622: PPUSH
21623: LD_INT 1
21625: PPUSH
21626: CALL 9927 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21630: LD_INT 2
21632: PPUSH
21633: CALL_OW 303
21637: PUSH
21638: LD_INT 2
21640: PPUSH
21641: CALL_OW 255
21645: PUSH
21646: LD_INT 1
21648: EQUAL
21649: OR
21650: IFFALSE 21662
// DefendDepot ( 3 , rudepo ) ;
21652: LD_INT 3
21654: PPUSH
21655: LD_INT 2
21657: PPUSH
21658: CALL 9207 0 2
// end ;
21662: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21663: LD_INT 22
21665: PUSH
21666: LD_INT 3
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 21
21675: PUSH
21676: LD_INT 2
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 55
21685: PUSH
21686: EMPTY
21687: LIST
21688: PUSH
21689: LD_INT 3
21691: PUSH
21692: LD_INT 34
21694: PUSH
21695: LD_INT 51
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: PPUSH
21712: CALL_OW 69
21716: PUSH
21717: LD_INT 0
21719: EQUAL
21720: PUSH
21721: LD_INT 21
21723: PPUSH
21724: CALL_OW 255
21728: PUSH
21729: LD_INT 3
21731: EQUAL
21732: AND
21733: PUSH
21734: LD_INT 21
21736: PPUSH
21737: CALL_OW 302
21741: AND
21742: PUSH
21743: LD_INT 2
21745: PPUSH
21746: CALL_OW 255
21750: PUSH
21751: LD_INT 3
21753: EQUAL
21754: AND
21755: PUSH
21756: LD_INT 2
21758: PPUSH
21759: CALL_OW 302
21763: AND
21764: IFFALSE 21944
21766: GO 21768
21768: DISABLE
// begin enable ;
21769: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21770: LD_INT 2
21772: PPUSH
21773: CALL_OW 274
21777: PPUSH
21778: LD_INT 1
21780: PPUSH
21781: LD_INT 1000
21783: PPUSH
21784: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21788: LD_INT 3
21790: PPUSH
21791: LD_INT 21
21793: PPUSH
21794: LD_INT 4
21796: PUSH
21797: LD_INT 5
21799: PUSH
21800: LD_INT 6
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: LIST
21807: PUSH
21808: LD_OWVAR 67
21812: ARRAY
21813: PPUSH
21814: LD_INT 43
21816: PUSH
21817: LD_INT 43
21819: PUSH
21820: LD_INT 44
21822: PUSH
21823: LD_INT 44
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 43
21834: PUSH
21835: LD_INT 43
21837: PUSH
21838: LD_INT 43
21840: PUSH
21841: LD_INT 44
21843: PUSH
21844: LD_INT 44
21846: PUSH
21847: LD_INT 46
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 43
21860: PUSH
21861: LD_INT 43
21863: PUSH
21864: LD_INT 43
21866: PUSH
21867: LD_INT 44
21869: PUSH
21870: LD_INT 44
21872: PUSH
21873: LD_INT 46
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: LIST
21888: PUSH
21889: LD_OWVAR 67
21893: ARRAY
21894: PPUSH
21895: LD_INT 1
21897: PPUSH
21898: LD_INT 1
21900: PPUSH
21901: LD_INT 22
21903: PUSH
21904: LD_INT 22
21906: PUSH
21907: LD_INT 24
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 1
21916: PPUSH
21917: LD_INT 2
21919: PPUSH
21920: CALL_OW 12
21924: ARRAY
21925: PUSH
21926: LD_INT 24
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: LIST
21933: PUSH
21934: LD_OWVAR 67
21938: ARRAY
21939: PPUSH
21940: CALL 7078 0 7
// end ;
21944: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21945: LD_INT 17
21947: PPUSH
21948: CALL_OW 255
21952: PUSH
21953: LD_INT 3
21955: EQUAL
21956: PUSH
21957: LD_INT 17
21959: PPUSH
21960: CALL_OW 302
21964: AND
21965: PUSH
21966: LD_INT 2
21968: PPUSH
21969: CALL_OW 255
21973: PUSH
21974: LD_INT 3
21976: EQUAL
21977: AND
21978: PUSH
21979: LD_INT 2
21981: PPUSH
21982: CALL_OW 302
21986: AND
21987: IFFALSE 22054
21989: GO 21991
21991: DISABLE
// begin enable ;
21992: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21993: LD_INT 17
21995: PPUSH
21996: LD_INT 22
21998: PPUSH
21999: LD_INT 1
22001: PPUSH
22002: LD_INT 1
22004: PPUSH
22005: LD_INT 42
22007: PUSH
22008: LD_INT 43
22010: PUSH
22011: LD_INT 44
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 1
22021: PPUSH
22022: LD_INT 3
22024: PPUSH
22025: CALL_OW 12
22029: ARRAY
22030: PPUSH
22031: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
22035: LD_INT 17
22037: PPUSH
22038: LD_INT 22
22040: PPUSH
22041: LD_INT 1
22043: PPUSH
22044: LD_INT 1
22046: PPUSH
22047: LD_INT 51
22049: PPUSH
22050: CALL_OW 185
// end ;
22054: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
22055: LD_INT 17
22057: PPUSH
22058: CALL_OW 302
22062: PUSH
22063: LD_INT 17
22065: PPUSH
22066: CALL_OW 255
22070: PUSH
22071: LD_INT 3
22073: EQUAL
22074: AND
22075: PUSH
22076: LD_INT 2
22078: PPUSH
22079: CALL_OW 302
22083: AND
22084: PUSH
22085: LD_INT 2
22087: PPUSH
22088: CALL_OW 255
22092: PUSH
22093: LD_INT 3
22095: EQUAL
22096: AND
22097: PUSH
22098: LD_INT 17
22100: PPUSH
22101: CALL_OW 313
22105: NOT
22106: AND
22107: IFFALSE 22201
22109: GO 22111
22111: DISABLE
22112: LD_INT 0
22114: PPUSH
// begin for i = 1 to 6 do
22115: LD_ADDR_VAR 0 1
22119: PUSH
22120: DOUBLE
22121: LD_INT 1
22123: DEC
22124: ST_TO_ADDR
22125: LD_INT 6
22127: PUSH
22128: FOR_TO
22129: IFFALSE 22199
// begin uc_side = 3 ;
22131: LD_ADDR_OWVAR 20
22135: PUSH
22136: LD_INT 3
22138: ST_TO_ADDR
// uc_nation = 3 ;
22139: LD_ADDR_OWVAR 21
22143: PUSH
22144: LD_INT 3
22146: ST_TO_ADDR
// hc_gallery :=  ;
22147: LD_ADDR_OWVAR 33
22151: PUSH
22152: LD_STRING 
22154: ST_TO_ADDR
// hc_name :=  ;
22155: LD_ADDR_OWVAR 26
22159: PUSH
22160: LD_STRING 
22162: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
22163: LD_INT 0
22165: PPUSH
22166: LD_EXP 34
22170: PPUSH
22171: LD_EXP 35
22175: PPUSH
22176: CALL_OW 12
22180: PPUSH
22181: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
22185: CALL_OW 44
22189: PPUSH
22190: LD_INT 17
22192: PPUSH
22193: CALL_OW 52
// end ;
22197: GO 22128
22199: POP
22200: POP
// end ;
22201: PPOPN 1
22203: END
// every 2 2$0 do var i , j ;
22204: GO 22206
22206: DISABLE
22207: LD_INT 0
22209: PPUSH
22210: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
22211: LD_INT 14700
22213: PUSH
22214: LD_INT 33600
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 1
22223: PPUSH
22224: LD_INT 2
22226: PPUSH
22227: CALL_OW 12
22231: ARRAY
22232: PPUSH
22233: CALL_OW 67
// disableHealAI = 1 ;
22237: LD_ADDR_EXP 33
22241: PUSH
22242: LD_INT 1
22244: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22245: LD_ADDR_VAR 0 1
22249: PUSH
22250: LD_INT 22
22252: PUSH
22253: LD_INT 3
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 25
22262: PUSH
22263: LD_INT 4
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PPUSH
22274: CALL_OW 69
22278: PUSH
22279: FOR_IN
22280: IFFALSE 22293
// ComExitBuilding ( i ) ;
22282: LD_VAR 0 1
22286: PPUSH
22287: CALL_OW 122
22291: GO 22279
22293: POP
22294: POP
// wait ( 0 0$1 ) ;
22295: LD_INT 35
22297: PPUSH
22298: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22302: LD_INT 35
22304: PPUSH
22305: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22309: LD_ADDR_VAR 0 1
22313: PUSH
22314: LD_INT 22
22316: PUSH
22317: LD_INT 3
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 25
22326: PUSH
22327: LD_INT 4
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PPUSH
22338: CALL_OW 69
22342: PUSH
22343: FOR_IN
22344: IFFALSE 22421
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
22346: LD_ADDR_VAR 0 2
22350: PUSH
22351: LD_INT 17
22353: PPUSH
22354: LD_INT 22
22356: PUSH
22357: LD_INT 0
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 25
22366: PUSH
22367: LD_INT 12
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PPUSH
22378: CALL_OW 70
22382: PUSH
22383: FOR_IN
22384: IFFALSE 22417
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22386: LD_VAR 0 1
22390: PPUSH
22391: LD_VAR 0 2
22395: PPUSH
22396: CALL_OW 250
22400: PPUSH
22401: LD_VAR 0 2
22405: PPUSH
22406: CALL_OW 251
22410: PPUSH
22411: CALL_OW 191
// end ;
22415: GO 22383
22417: POP
22418: POP
// end ;
22419: GO 22343
22421: POP
22422: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22423: LD_INT 22
22425: PUSH
22426: LD_INT 3
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 25
22435: PUSH
22436: LD_INT 4
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PPUSH
22447: CALL_OW 69
22451: PUSH
22452: LD_INT 0
22454: EQUAL
22455: PUSH
22456: LD_EXP 32
22460: PUSH
22461: LD_INT 6
22463: PUSH
22464: LD_INT 7
22466: PUSH
22467: LD_INT 8
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: LIST
22474: PUSH
22475: LD_OWVAR 67
22479: ARRAY
22480: GREATEREQUAL
22481: OR
22482: PUSH
22483: LD_INT 17
22485: PPUSH
22486: LD_INT 22
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 25
22498: PUSH
22499: LD_INT 12
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PPUSH
22510: CALL_OW 70
22514: PUSH
22515: LD_INT 0
22517: EQUAL
22518: OR
22519: IFFALSE 22302
// disableHealAI = 0 ;
22521: LD_ADDR_EXP 33
22525: PUSH
22526: LD_INT 0
22528: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22529: LD_ADDR_VAR 0 1
22533: PUSH
22534: LD_INT 22
22536: PUSH
22537: LD_INT 3
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 25
22546: PUSH
22547: LD_INT 12
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PPUSH
22558: CALL_OW 69
22562: PUSH
22563: FOR_IN
22564: IFFALSE 22580
// SetClass ( i , 16 ) ;
22566: LD_VAR 0 1
22570: PPUSH
22571: LD_INT 16
22573: PPUSH
22574: CALL_OW 336
22578: GO 22563
22580: POP
22581: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22582: LD_ADDR_VAR 0 1
22586: PUSH
22587: LD_INT 22
22589: PUSH
22590: LD_INT 3
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 25
22599: PUSH
22600: LD_INT 4
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PPUSH
22611: CALL_OW 69
22615: PUSH
22616: FOR_IN
22617: IFFALSE 22636
// ComMoveXY ( i , 113 , 94 ) ;
22619: LD_VAR 0 1
22623: PPUSH
22624: LD_INT 113
22626: PPUSH
22627: LD_INT 94
22629: PPUSH
22630: CALL_OW 111
22634: GO 22616
22636: POP
22637: POP
// end ;
22638: PPOPN 2
22640: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22641: LD_INT 21
22643: PPUSH
22644: CALL_OW 255
22648: PUSH
22649: LD_INT 3
22651: EQUAL
22652: PUSH
22653: LD_INT 21
22655: PPUSH
22656: CALL_OW 302
22660: AND
22661: PUSH
22662: LD_INT 22
22664: PUSH
22665: LD_INT 3
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 34
22674: PUSH
22675: LD_INT 51
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PPUSH
22686: CALL_OW 69
22690: PUSH
22691: LD_INT 0
22693: EQUAL
22694: AND
22695: IFFALSE 22727
22697: GO 22699
22699: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22700: LD_INT 21
22702: PPUSH
22703: LD_INT 23
22705: PPUSH
22706: LD_INT 1
22708: PPUSH
22709: LD_INT 1
22711: PPUSH
22712: LD_INT 51
22714: PPUSH
22715: CALL_OW 185
// wait ( 5 5$0 ) ;
22719: LD_INT 10500
22721: PPUSH
22722: CALL_OW 67
// enable ;
22726: ENABLE
// end ; end_of_file
22727: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22728: LD_EXP 26
22732: PUSH
22733: LD_INT 0
22735: LESSEQUAL
22736: IFFALSE 22885
22738: GO 22740
22740: DISABLE
22741: LD_INT 0
22743: PPUSH
22744: PPUSH
22745: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22746: LD_ADDR_VAR 0 2
22750: PUSH
22751: LD_INT 22
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 21
22763: PUSH
22764: LD_INT 3
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 2
22773: PUSH
22774: LD_INT 30
22776: PUSH
22777: LD_INT 0
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 30
22786: PUSH
22787: LD_INT 1
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: LIST
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: LIST
22803: PPUSH
22804: CALL_OW 69
22808: ST_TO_ADDR
// for i in tmp do
22809: LD_ADDR_VAR 0 1
22813: PUSH
22814: LD_VAR 0 2
22818: PUSH
22819: FOR_IN
22820: IFFALSE 22853
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22822: LD_ADDR_VAR 0 3
22826: PUSH
22827: LD_VAR 0 3
22831: PUSH
22832: LD_VAR 0 1
22836: PPUSH
22837: CALL_OW 274
22841: PPUSH
22842: LD_INT 1
22844: PPUSH
22845: CALL_OW 275
22849: PLUS
22850: ST_TO_ADDR
22851: GO 22819
22853: POP
22854: POP
// if yourCrates >= needCrates then
22855: LD_VAR 0 3
22859: PUSH
22860: LD_EXP 25
22864: GREATEREQUAL
22865: IFFALSE 22878
// FinishMission ( yourCrates ) else
22867: LD_VAR 0 3
22871: PPUSH
22872: CALL 22888 0 1
22876: GO 22885
// YouLost ( matmin ) ;
22878: LD_STRING matmin
22880: PPUSH
22881: CALL_OW 104
// end ;
22885: PPOPN 3
22887: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22888: LD_INT 0
22890: PPUSH
22891: PPUSH
22892: PPUSH
22893: PPUSH
// if killCounter = 0 then
22894: LD_EXP 47
22898: PUSH
22899: LD_INT 0
22901: EQUAL
22902: IFFALSE 22911
// SetAchievement ( ACH_SURV ) ;
22904: LD_STRING ACH_SURV
22906: PPUSH
22907: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22911: LD_INT 22
22913: PUSH
22914: LD_INT 3
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 21
22923: PUSH
22924: LD_INT 3
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PPUSH
22935: CALL_OW 69
22939: PUSH
22940: LD_INT 0
22942: EQUAL
22943: IFFALSE 22959
// begin wait ( 3 ) ;
22945: LD_INT 3
22947: PPUSH
22948: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22952: LD_STRING ACH_BASEDESTROYER
22954: PPUSH
22955: CALL_OW 543
// end ; m1 := false ;
22959: LD_ADDR_VAR 0 3
22963: PUSH
22964: LD_INT 0
22966: ST_TO_ADDR
// m2 := false ;
22967: LD_ADDR_VAR 0 4
22971: PUSH
22972: LD_INT 0
22974: ST_TO_ADDR
// m3 := false ;
22975: LD_ADDR_VAR 0 5
22979: PUSH
22980: LD_INT 0
22982: ST_TO_ADDR
// if crates + 100 > crates then
22983: LD_VAR 0 1
22987: PUSH
22988: LD_INT 100
22990: PLUS
22991: PUSH
22992: LD_VAR 0 1
22996: GREATER
22997: IFFALSE 23029
// begin AddMedal ( cans , 1 ) ;
22999: LD_STRING cans
23001: PPUSH
23002: LD_INT 1
23004: PPUSH
23005: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
23009: LD_INT 1
23011: PPUSH
23012: LD_STRING 06_crates_1
23014: PPUSH
23015: CALL_OW 39
// m1 := true ;
23019: LD_ADDR_VAR 0 3
23023: PUSH
23024: LD_INT 1
23026: ST_TO_ADDR
// end else
23027: GO 23050
// begin AddMedal ( cans , - 1 ) ;
23029: LD_STRING cans
23031: PPUSH
23032: LD_INT 1
23034: NEG
23035: PPUSH
23036: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
23040: LD_INT 0
23042: PPUSH
23043: LD_STRING 06_crates_1
23045: PPUSH
23046: CALL_OW 39
// end ; if unitLost < 3 then
23050: LD_EXP 30
23054: PUSH
23055: LD_INT 3
23057: LESS
23058: IFFALSE 23080
// begin AddMedal ( people , 1 ) ;
23060: LD_STRING people
23062: PPUSH
23063: LD_INT 1
23065: PPUSH
23066: CALL_OW 101
// m2 := true ;
23070: LD_ADDR_VAR 0 4
23074: PUSH
23075: LD_INT 1
23077: ST_TO_ADDR
// end else
23078: GO 23091
// begin AddMedal ( people , - 1 ) ;
23080: LD_STRING people
23082: PPUSH
23083: LD_INT 1
23085: NEG
23086: PPUSH
23087: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
23091: LD_EXP 28
23095: PPUSH
23096: LD_STRING 06_remoteVehs_1
23098: PPUSH
23099: CALL_OW 39
// if remoteVehiclesBuild = 1 then
23103: LD_EXP 28
23107: PUSH
23108: LD_INT 1
23110: EQUAL
23111: IFFALSE 23133
// begin AddMedal ( remote , 1 ) ;
23113: LD_STRING remote
23115: PPUSH
23116: LD_INT 1
23118: PPUSH
23119: CALL_OW 101
// m3 := true ;
23123: LD_ADDR_VAR 0 5
23127: PUSH
23128: LD_INT 1
23130: ST_TO_ADDR
// end else
23131: GO 23173
// begin if GetTech ( 18 , 1 ) = state_enabled then
23133: LD_INT 18
23135: PPUSH
23136: LD_INT 1
23138: PPUSH
23139: CALL_OW 321
23143: PUSH
23144: LD_INT 1
23146: EQUAL
23147: IFFALSE 23162
// begin AddMedal ( remote , - 1 ) ;
23149: LD_STRING remote
23151: PPUSH
23152: LD_INT 1
23154: NEG
23155: PPUSH
23156: CALL_OW 101
// end else
23160: GO 23173
// begin AddMedal ( remote , - 2 ) ;
23162: LD_STRING remote
23164: PPUSH
23165: LD_INT 2
23167: NEG
23168: PPUSH
23169: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
23173: LD_VAR 0 3
23177: PUSH
23178: LD_VAR 0 4
23182: AND
23183: PUSH
23184: LD_VAR 0 5
23188: AND
23189: IFFALSE 23205
// begin wait ( 3 ) ;
23191: LD_INT 3
23193: PPUSH
23194: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
23198: LD_STRING ACH_ASPEED_6
23200: PPUSH
23201: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
23205: LD_OWVAR 67
23209: PUSH
23210: LD_INT 3
23212: EQUAL
23213: PUSH
23214: LD_VAR 0 3
23218: AND
23219: PUSH
23220: LD_VAR 0 4
23224: AND
23225: PUSH
23226: LD_VAR 0 5
23230: AND
23231: IFFALSE 23243
// SetAchievementEX ( ACH_AMER , 6 ) ;
23233: LD_STRING ACH_AMER
23235: PPUSH
23236: LD_INT 6
23238: PPUSH
23239: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
23243: LD_EXP 20
23247: PPUSH
23248: LD_STRING 06_KurtStatus_1
23250: PPUSH
23251: CALL_OW 39
// GiveMedals ( Main ) ;
23255: LD_STRING Main
23257: PPUSH
23258: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
23262: LD_INT 22
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 21
23274: PUSH
23275: LD_INT 1
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 50
23284: PUSH
23285: EMPTY
23286: LIST
23287: PUSH
23288: LD_INT 2
23290: PUSH
23291: LD_INT 25
23293: PUSH
23294: LD_INT 1
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 25
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 25
23313: PUSH
23314: LD_INT 3
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 25
23323: PUSH
23324: LD_INT 4
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: PPUSH
23344: CALL_OW 69
23348: PPUSH
23349: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23353: LD_EXP 1
23357: PPUSH
23358: LD_EXP 43
23362: PUSH
23363: LD_STRING JMM
23365: STR
23366: PPUSH
23367: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23371: LD_EXP 2
23375: PPUSH
23376: LD_EXP 43
23380: PUSH
23381: LD_STRING Lisa
23383: STR
23384: PPUSH
23385: CALL 6336 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23389: LD_EXP 3
23393: PPUSH
23394: LD_EXP 43
23398: PUSH
23399: LD_STRING Bobby
23401: STR
23402: PPUSH
23403: CALL 6336 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23407: LD_EXP 4
23411: PPUSH
23412: LD_EXP 43
23416: PUSH
23417: LD_STRING Cyrus
23419: STR
23420: PPUSH
23421: CALL 6336 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23425: LD_EXP 5
23429: PPUSH
23430: LD_EXP 43
23434: PUSH
23435: LD_STRING Frank
23437: STR
23438: PPUSH
23439: CALL 6336 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23443: LD_EXP 6
23447: PPUSH
23448: LD_EXP 43
23452: PUSH
23453: LD_STRING Brown
23455: STR
23456: PPUSH
23457: CALL 6336 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23461: LD_EXP 7
23465: PPUSH
23466: LD_EXP 43
23470: PUSH
23471: LD_STRING Donaldson
23473: STR
23474: PPUSH
23475: CALL 6336 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23479: LD_EXP 8
23483: PPUSH
23484: LD_EXP 43
23488: PUSH
23489: LD_STRING Gladstone
23491: STR
23492: PPUSH
23493: CALL 6336 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23497: LD_EXP 9
23501: PPUSH
23502: LD_EXP 43
23506: PUSH
23507: LD_STRING Denis
23509: STR
23510: PPUSH
23511: CALL 6336 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23515: LD_EXP 15
23519: PPUSH
23520: LD_EXP 43
23524: PUSH
23525: LD_STRING Joan
23527: STR
23528: PPUSH
23529: CALL 6336 0 2
// if IsLive ( Joan ) then
23533: LD_EXP 15
23537: PPUSH
23538: CALL_OW 300
23542: IFFALSE 23556
// SaveCharacters ( Joan , Joan ) ;
23544: LD_EXP 15
23548: PPUSH
23549: LD_STRING Joan
23551: PPUSH
23552: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23556: LD_EXP 16
23560: PPUSH
23561: LD_STRING 06_JoanStatus_1
23563: PPUSH
23564: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23568: LD_INT 50
23570: PUSH
23571: EMPTY
23572: LIST
23573: PUSH
23574: LD_INT 22
23576: PUSH
23577: LD_INT 1
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 21
23586: PUSH
23587: LD_INT 1
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 2
23596: PUSH
23597: LD_INT 25
23599: PUSH
23600: LD_INT 1
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 25
23609: PUSH
23610: LD_INT 2
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 25
23619: PUSH
23620: LD_INT 3
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 25
23629: PUSH
23630: LD_INT 4
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: PPUSH
23650: CALL_OW 69
23654: PUSH
23655: LD_EXP 1
23659: PUSH
23660: LD_EXP 2
23664: PUSH
23665: LD_EXP 3
23669: PUSH
23670: LD_EXP 4
23674: PUSH
23675: LD_EXP 5
23679: PUSH
23680: LD_EXP 6
23684: PUSH
23685: LD_EXP 7
23689: PUSH
23690: LD_EXP 8
23694: PUSH
23695: LD_EXP 9
23699: PUSH
23700: LD_EXP 15
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: DIFF
23717: PPUSH
23718: LD_STRING 06_other_survivors
23720: PPUSH
23721: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23725: LD_INT 50
23727: PUSH
23728: EMPTY
23729: LIST
23730: PUSH
23731: LD_INT 22
23733: PUSH
23734: LD_INT 1
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 21
23743: PUSH
23744: LD_INT 1
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 2
23753: PUSH
23754: LD_INT 25
23756: PUSH
23757: LD_INT 12
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 25
23766: PUSH
23767: LD_INT 16
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: LIST
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: PPUSH
23785: CALL_OW 69
23789: PPUSH
23790: LD_STRING 06_other_apemans
23792: PPUSH
23793: CALL_OW 38
// YouWin ;
23797: CALL_OW 103
// end ; end_of_file
23801: LD_VAR 0 2
23805: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23806: LD_EXP 39
23810: PUSH
23811: LD_INT 3
23813: EQUAL
23814: IFFALSE 23905
23816: GO 23818
23818: DISABLE
// begin enable ;
23819: ENABLE
// sendedConvoys = 0 ;
23820: LD_ADDR_EXP 39
23824: PUSH
23825: LD_INT 0
23827: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23828: LD_INT 6
23830: PPUSH
23831: LD_INT 3
23833: PPUSH
23834: LD_INT 3
23836: PUSH
23837: LD_INT 4
23839: PUSH
23840: LD_INT 6
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: LIST
23847: PUSH
23848: LD_OWVAR 67
23852: ARRAY
23853: PPUSH
23854: LD_INT 0
23856: PPUSH
23857: LD_INT 0
23859: PPUSH
23860: LD_INT 0
23862: PPUSH
23863: LD_INT 0
23865: PPUSH
23866: LD_EXP 34
23870: PPUSH
23871: LD_EXP 35
23875: PPUSH
23876: CALL_OW 12
23880: PPUSH
23881: LD_INT 16
23883: PPUSH
23884: LD_INT 15
23886: PPUSH
23887: LD_INT 1
23889: PPUSH
23890: LD_INT 1
23892: PPUSH
23893: LD_INT 2
23895: PPUSH
23896: CALL_OW 12
23900: PPUSH
23901: CALL 10755 0 12
// end ; end_of_file
23905: END
// export function PrepareNature ; var i , un ; begin
23906: LD_INT 0
23908: PPUSH
23909: PPUSH
23910: PPUSH
// for i = 1 to Difficulty + 2 do
23911: LD_ADDR_VAR 0 2
23915: PUSH
23916: DOUBLE
23917: LD_INT 1
23919: DEC
23920: ST_TO_ADDR
23921: LD_OWVAR 67
23925: PUSH
23926: LD_INT 2
23928: PLUS
23929: PUSH
23930: FOR_TO
23931: IFFALSE 24040
// begin hc_sex = sex_male ;
23933: LD_ADDR_OWVAR 27
23937: PUSH
23938: LD_INT 1
23940: ST_TO_ADDR
// uc_side = 0 ;
23941: LD_ADDR_OWVAR 20
23945: PUSH
23946: LD_INT 0
23948: ST_TO_ADDR
// uc_nation = nation_nature ;
23949: LD_ADDR_OWVAR 21
23953: PUSH
23954: LD_INT 0
23956: ST_TO_ADDR
// hc_class = class_tiger ;
23957: LD_ADDR_OWVAR 28
23961: PUSH
23962: LD_INT 14
23964: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23965: LD_ADDR_OWVAR 31
23969: PUSH
23970: LD_EXP 35
23974: PUSH
23975: LD_INT 0
23977: PUSH
23978: LD_INT 0
23980: PUSH
23981: LD_INT 0
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23990: LD_ADDR_OWVAR 35
23994: PUSH
23995: LD_INT 5
23997: NEG
23998: PPUSH
23999: LD_INT 5
24001: PPUSH
24002: CALL_OW 12
24006: PUSH
24007: LD_OWVAR 67
24011: MUL
24012: ST_TO_ADDR
// un = CreateHuman ;
24013: LD_ADDR_VAR 0 3
24017: PUSH
24018: CALL_OW 44
24022: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24023: LD_VAR 0 3
24027: PPUSH
24028: LD_INT 18
24030: PPUSH
24031: LD_INT 0
24033: PPUSH
24034: CALL_OW 49
// end ;
24038: GO 23930
24040: POP
24041: POP
// for i = 1 to rand ( 3 , 4 ) do
24042: LD_ADDR_VAR 0 2
24046: PUSH
24047: DOUBLE
24048: LD_INT 1
24050: DEC
24051: ST_TO_ADDR
24052: LD_INT 3
24054: PPUSH
24055: LD_INT 4
24057: PPUSH
24058: CALL_OW 12
24062: PUSH
24063: FOR_TO
24064: IFFALSE 24158
// begin hc_sex = sex_male ;
24066: LD_ADDR_OWVAR 27
24070: PUSH
24071: LD_INT 1
24073: ST_TO_ADDR
// uc_side = 0 ;
24074: LD_ADDR_OWVAR 20
24078: PUSH
24079: LD_INT 0
24081: ST_TO_ADDR
// uc_nation = nation_nature ;
24082: LD_ADDR_OWVAR 21
24086: PUSH
24087: LD_INT 0
24089: ST_TO_ADDR
// hc_class = 18 ;
24090: LD_ADDR_OWVAR 28
24094: PUSH
24095: LD_INT 18
24097: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24098: LD_ADDR_OWVAR 31
24102: PUSH
24103: LD_EXP 35
24107: PUSH
24108: LD_INT 0
24110: PUSH
24111: LD_INT 0
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: ST_TO_ADDR
// hc_agressivity = 0 ;
24123: LD_ADDR_OWVAR 35
24127: PUSH
24128: LD_INT 0
24130: ST_TO_ADDR
// un = CreateHuman ;
24131: LD_ADDR_VAR 0 3
24135: PUSH
24136: CALL_OW 44
24140: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24141: LD_VAR 0 3
24145: PPUSH
24146: LD_INT 18
24148: PPUSH
24149: LD_INT 0
24151: PPUSH
24152: CALL_OW 49
// end ;
24156: GO 24063
24158: POP
24159: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
24160: LD_ADDR_VAR 0 2
24164: PUSH
24165: DOUBLE
24166: LD_INT 1
24168: DEC
24169: ST_TO_ADDR
24170: LD_INT 1
24172: PPUSH
24173: LD_INT 3
24175: PPUSH
24176: CALL_OW 12
24180: PUSH
24181: LD_OWVAR 67
24185: PLUS
24186: PUSH
24187: FOR_TO
24188: IFFALSE 24337
// begin hc_sex = sex_male ;
24190: LD_ADDR_OWVAR 27
24194: PUSH
24195: LD_INT 1
24197: ST_TO_ADDR
// uc_side = 0 ;
24198: LD_ADDR_OWVAR 20
24202: PUSH
24203: LD_INT 0
24205: ST_TO_ADDR
// uc_nation = nation_nature ;
24206: LD_ADDR_OWVAR 21
24210: PUSH
24211: LD_INT 0
24213: ST_TO_ADDR
// hc_class = class_apeman ;
24214: LD_ADDR_OWVAR 28
24218: PUSH
24219: LD_INT 12
24221: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24222: LD_ADDR_OWVAR 31
24226: PUSH
24227: LD_INT 2
24229: PPUSH
24230: LD_INT 5
24232: PPUSH
24233: CALL_OW 12
24237: PUSH
24238: LD_INT 0
24240: PPUSH
24241: LD_INT 2
24243: PPUSH
24244: CALL_OW 12
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: LD_INT 0
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
24261: LD_ADDR_OWVAR 35
24265: PUSH
24266: LD_INT 20
24268: PPUSH
24269: LD_INT 30
24271: PPUSH
24272: CALL_OW 12
24276: PUSH
24277: LD_INT 30
24279: PPUSH
24280: LD_INT 40
24282: PPUSH
24283: CALL_OW 12
24287: PUSH
24288: LD_INT 40
24290: PPUSH
24291: LD_INT 50
24293: PPUSH
24294: CALL_OW 12
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: LIST
24303: PUSH
24304: LD_OWVAR 67
24308: ARRAY
24309: ST_TO_ADDR
// un = CreateHuman ;
24310: LD_ADDR_VAR 0 3
24314: PUSH
24315: CALL_OW 44
24319: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
24320: LD_VAR 0 3
24324: PPUSH
24325: LD_INT 19
24327: PPUSH
24328: LD_INT 0
24330: PPUSH
24331: CALL_OW 49
// end ;
24335: GO 24187
24337: POP
24338: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
24339: LD_ADDR_VAR 0 2
24343: PUSH
24344: DOUBLE
24345: LD_INT 1
24347: DEC
24348: ST_TO_ADDR
24349: LD_INT 5
24351: PPUSH
24352: LD_INT 6
24354: PPUSH
24355: CALL_OW 12
24359: PUSH
24360: LD_OWVAR 67
24364: PLUS
24365: PUSH
24366: FOR_TO
24367: IFFALSE 24475
// begin hc_sex = sex_male ;
24369: LD_ADDR_OWVAR 27
24373: PUSH
24374: LD_INT 1
24376: ST_TO_ADDR
// uc_side = 0 ;
24377: LD_ADDR_OWVAR 20
24381: PUSH
24382: LD_INT 0
24384: ST_TO_ADDR
// uc_nation = nation_nature ;
24385: LD_ADDR_OWVAR 21
24389: PUSH
24390: LD_INT 0
24392: ST_TO_ADDR
// hc_class = class_apeman ;
24393: LD_ADDR_OWVAR 28
24397: PUSH
24398: LD_INT 12
24400: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24401: LD_ADDR_OWVAR 31
24405: PUSH
24406: LD_INT 2
24408: PPUSH
24409: LD_INT 5
24411: PPUSH
24412: CALL_OW 12
24416: PUSH
24417: LD_INT 0
24419: PPUSH
24420: LD_INT 2
24422: PPUSH
24423: CALL_OW 12
24427: PUSH
24428: LD_INT 0
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: ST_TO_ADDR
// hc_agressivity = 0 ;
24440: LD_ADDR_OWVAR 35
24444: PUSH
24445: LD_INT 0
24447: ST_TO_ADDR
// un = CreateHuman ;
24448: LD_ADDR_VAR 0 3
24452: PUSH
24453: CALL_OW 44
24457: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24458: LD_VAR 0 3
24462: PPUSH
24463: LD_INT 20
24465: PPUSH
24466: LD_INT 0
24468: PPUSH
24469: CALL_OW 49
// end ;
24473: GO 24366
24475: POP
24476: POP
// end ; end_of_file end_of_file
24477: LD_VAR 0 1
24481: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
24482: GO 24484
24484: DISABLE
// begin ru_radar := 98 ;
24485: LD_ADDR_EXP 51
24489: PUSH
24490: LD_INT 98
24492: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24493: LD_ADDR_EXP 52
24497: PUSH
24498: LD_INT 89
24500: ST_TO_ADDR
// us_hack := 99 ;
24501: LD_ADDR_EXP 53
24505: PUSH
24506: LD_INT 99
24508: ST_TO_ADDR
// us_artillery := 97 ;
24509: LD_ADDR_EXP 54
24513: PUSH
24514: LD_INT 97
24516: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24517: LD_ADDR_EXP 55
24521: PUSH
24522: LD_INT 91
24524: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
24525: LD_ADDR_EXP 56
24529: PUSH
24530: LD_INT 92
24532: ST_TO_ADDR
// tech_Artillery := 80 ;
24533: LD_ADDR_EXP 57
24537: PUSH
24538: LD_INT 80
24540: ST_TO_ADDR
// tech_RadMat := 81 ;
24541: LD_ADDR_EXP 58
24545: PUSH
24546: LD_INT 81
24548: ST_TO_ADDR
// tech_BasicTools := 82 ;
24549: LD_ADDR_EXP 59
24553: PUSH
24554: LD_INT 82
24556: ST_TO_ADDR
// tech_Cargo := 83 ;
24557: LD_ADDR_EXP 60
24561: PUSH
24562: LD_INT 83
24564: ST_TO_ADDR
// tech_Track := 84 ;
24565: LD_ADDR_EXP 61
24569: PUSH
24570: LD_INT 84
24572: ST_TO_ADDR
// tech_Crane := 85 ;
24573: LD_ADDR_EXP 62
24577: PUSH
24578: LD_INT 85
24580: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24581: LD_ADDR_EXP 63
24585: PUSH
24586: LD_INT 86
24588: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24589: LD_ADDR_EXP 64
24593: PUSH
24594: LD_INT 87
24596: ST_TO_ADDR
// end ; end_of_file end_of_file
24597: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
24598: GO 24600
24600: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
24601: LD_STRING initStreamRollete();
24603: PPUSH
24604: CALL_OW 559
// InitStreamMode ;
24608: CALL 24617 0 0
// DefineStreamItems ( ) ;
24612: CALL 25057 0 0
// end ;
24616: END
// function InitStreamMode ; begin
24617: LD_INT 0
24619: PPUSH
// streamModeActive := false ;
24620: LD_ADDR_EXP 65
24624: PUSH
24625: LD_INT 0
24627: ST_TO_ADDR
// normalCounter := 36 ;
24628: LD_ADDR_EXP 66
24632: PUSH
24633: LD_INT 36
24635: ST_TO_ADDR
// hardcoreCounter := 16 ;
24636: LD_ADDR_EXP 67
24640: PUSH
24641: LD_INT 16
24643: ST_TO_ADDR
// sRocket := false ;
24644: LD_ADDR_EXP 70
24648: PUSH
24649: LD_INT 0
24651: ST_TO_ADDR
// sSpeed := false ;
24652: LD_ADDR_EXP 69
24656: PUSH
24657: LD_INT 0
24659: ST_TO_ADDR
// sEngine := false ;
24660: LD_ADDR_EXP 71
24664: PUSH
24665: LD_INT 0
24667: ST_TO_ADDR
// sSpec := false ;
24668: LD_ADDR_EXP 68
24672: PUSH
24673: LD_INT 0
24675: ST_TO_ADDR
// sLevel := false ;
24676: LD_ADDR_EXP 72
24680: PUSH
24681: LD_INT 0
24683: ST_TO_ADDR
// sArmoury := false ;
24684: LD_ADDR_EXP 73
24688: PUSH
24689: LD_INT 0
24691: ST_TO_ADDR
// sRadar := false ;
24692: LD_ADDR_EXP 74
24696: PUSH
24697: LD_INT 0
24699: ST_TO_ADDR
// sBunker := false ;
24700: LD_ADDR_EXP 75
24704: PUSH
24705: LD_INT 0
24707: ST_TO_ADDR
// sHack := false ;
24708: LD_ADDR_EXP 76
24712: PUSH
24713: LD_INT 0
24715: ST_TO_ADDR
// sFire := false ;
24716: LD_ADDR_EXP 77
24720: PUSH
24721: LD_INT 0
24723: ST_TO_ADDR
// sRefresh := false ;
24724: LD_ADDR_EXP 78
24728: PUSH
24729: LD_INT 0
24731: ST_TO_ADDR
// sExp := false ;
24732: LD_ADDR_EXP 79
24736: PUSH
24737: LD_INT 0
24739: ST_TO_ADDR
// sDepot := false ;
24740: LD_ADDR_EXP 80
24744: PUSH
24745: LD_INT 0
24747: ST_TO_ADDR
// sFlag := false ;
24748: LD_ADDR_EXP 81
24752: PUSH
24753: LD_INT 0
24755: ST_TO_ADDR
// sKamikadze := false ;
24756: LD_ADDR_EXP 89
24760: PUSH
24761: LD_INT 0
24763: ST_TO_ADDR
// sTroll := false ;
24764: LD_ADDR_EXP 90
24768: PUSH
24769: LD_INT 0
24771: ST_TO_ADDR
// sSlow := false ;
24772: LD_ADDR_EXP 91
24776: PUSH
24777: LD_INT 0
24779: ST_TO_ADDR
// sLack := false ;
24780: LD_ADDR_EXP 92
24784: PUSH
24785: LD_INT 0
24787: ST_TO_ADDR
// sTank := false ;
24788: LD_ADDR_EXP 94
24792: PUSH
24793: LD_INT 0
24795: ST_TO_ADDR
// sRemote := false ;
24796: LD_ADDR_EXP 95
24800: PUSH
24801: LD_INT 0
24803: ST_TO_ADDR
// sPowell := false ;
24804: LD_ADDR_EXP 96
24808: PUSH
24809: LD_INT 0
24811: ST_TO_ADDR
// sTeleport := false ;
24812: LD_ADDR_EXP 99
24816: PUSH
24817: LD_INT 0
24819: ST_TO_ADDR
// sOilTower := false ;
24820: LD_ADDR_EXP 101
24824: PUSH
24825: LD_INT 0
24827: ST_TO_ADDR
// sShovel := false ;
24828: LD_ADDR_EXP 102
24832: PUSH
24833: LD_INT 0
24835: ST_TO_ADDR
// sSheik := false ;
24836: LD_ADDR_EXP 103
24840: PUSH
24841: LD_INT 0
24843: ST_TO_ADDR
// sEarthquake := false ;
24844: LD_ADDR_EXP 105
24848: PUSH
24849: LD_INT 0
24851: ST_TO_ADDR
// sAI := false ;
24852: LD_ADDR_EXP 106
24856: PUSH
24857: LD_INT 0
24859: ST_TO_ADDR
// sCargo := false ;
24860: LD_ADDR_EXP 109
24864: PUSH
24865: LD_INT 0
24867: ST_TO_ADDR
// sDLaser := false ;
24868: LD_ADDR_EXP 110
24872: PUSH
24873: LD_INT 0
24875: ST_TO_ADDR
// sExchange := false ;
24876: LD_ADDR_EXP 111
24880: PUSH
24881: LD_INT 0
24883: ST_TO_ADDR
// sFac := false ;
24884: LD_ADDR_EXP 112
24888: PUSH
24889: LD_INT 0
24891: ST_TO_ADDR
// sPower := false ;
24892: LD_ADDR_EXP 113
24896: PUSH
24897: LD_INT 0
24899: ST_TO_ADDR
// sRandom := false ;
24900: LD_ADDR_EXP 114
24904: PUSH
24905: LD_INT 0
24907: ST_TO_ADDR
// sShield := false ;
24908: LD_ADDR_EXP 115
24912: PUSH
24913: LD_INT 0
24915: ST_TO_ADDR
// sTime := false ;
24916: LD_ADDR_EXP 116
24920: PUSH
24921: LD_INT 0
24923: ST_TO_ADDR
// sTools := false ;
24924: LD_ADDR_EXP 117
24928: PUSH
24929: LD_INT 0
24931: ST_TO_ADDR
// sSold := false ;
24932: LD_ADDR_EXP 82
24936: PUSH
24937: LD_INT 0
24939: ST_TO_ADDR
// sDiff := false ;
24940: LD_ADDR_EXP 83
24944: PUSH
24945: LD_INT 0
24947: ST_TO_ADDR
// sFog := false ;
24948: LD_ADDR_EXP 86
24952: PUSH
24953: LD_INT 0
24955: ST_TO_ADDR
// sReset := false ;
24956: LD_ADDR_EXP 87
24960: PUSH
24961: LD_INT 0
24963: ST_TO_ADDR
// sSun := false ;
24964: LD_ADDR_EXP 88
24968: PUSH
24969: LD_INT 0
24971: ST_TO_ADDR
// sTiger := false ;
24972: LD_ADDR_EXP 84
24976: PUSH
24977: LD_INT 0
24979: ST_TO_ADDR
// sBomb := false ;
24980: LD_ADDR_EXP 85
24984: PUSH
24985: LD_INT 0
24987: ST_TO_ADDR
// sWound := false ;
24988: LD_ADDR_EXP 93
24992: PUSH
24993: LD_INT 0
24995: ST_TO_ADDR
// sBetray := false ;
24996: LD_ADDR_EXP 97
25000: PUSH
25001: LD_INT 0
25003: ST_TO_ADDR
// sContamin := false ;
25004: LD_ADDR_EXP 98
25008: PUSH
25009: LD_INT 0
25011: ST_TO_ADDR
// sOil := false ;
25012: LD_ADDR_EXP 100
25016: PUSH
25017: LD_INT 0
25019: ST_TO_ADDR
// sStu := false ;
25020: LD_ADDR_EXP 104
25024: PUSH
25025: LD_INT 0
25027: ST_TO_ADDR
// sBazooka := false ;
25028: LD_ADDR_EXP 107
25032: PUSH
25033: LD_INT 0
25035: ST_TO_ADDR
// sMortar := false ;
25036: LD_ADDR_EXP 108
25040: PUSH
25041: LD_INT 0
25043: ST_TO_ADDR
// sRanger := false ;
25044: LD_ADDR_EXP 118
25048: PUSH
25049: LD_INT 0
25051: ST_TO_ADDR
// end ;
25052: LD_VAR 0 1
25056: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
25057: LD_INT 0
25059: PPUSH
25060: PPUSH
25061: PPUSH
25062: PPUSH
25063: PPUSH
// result := [ ] ;
25064: LD_ADDR_VAR 0 1
25068: PUSH
25069: EMPTY
25070: ST_TO_ADDR
// if campaign_id = 1 then
25071: LD_OWVAR 69
25075: PUSH
25076: LD_INT 1
25078: EQUAL
25079: IFFALSE 28017
// begin case mission_number of 1 :
25081: LD_OWVAR 70
25085: PUSH
25086: LD_INT 1
25088: DOUBLE
25089: EQUAL
25090: IFTRUE 25094
25092: GO 25158
25094: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
25095: LD_ADDR_VAR 0 1
25099: PUSH
25100: LD_INT 2
25102: PUSH
25103: LD_INT 4
25105: PUSH
25106: LD_INT 11
25108: PUSH
25109: LD_INT 12
25111: PUSH
25112: LD_INT 15
25114: PUSH
25115: LD_INT 16
25117: PUSH
25118: LD_INT 22
25120: PUSH
25121: LD_INT 23
25123: PUSH
25124: LD_INT 26
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 101
25140: PUSH
25141: LD_INT 102
25143: PUSH
25144: LD_INT 106
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: LIST
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: ST_TO_ADDR
25156: GO 28015
25158: LD_INT 2
25160: DOUBLE
25161: EQUAL
25162: IFTRUE 25166
25164: GO 25238
25166: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
25167: LD_ADDR_VAR 0 1
25171: PUSH
25172: LD_INT 2
25174: PUSH
25175: LD_INT 4
25177: PUSH
25178: LD_INT 11
25180: PUSH
25181: LD_INT 12
25183: PUSH
25184: LD_INT 15
25186: PUSH
25187: LD_INT 16
25189: PUSH
25190: LD_INT 22
25192: PUSH
25193: LD_INT 23
25195: PUSH
25196: LD_INT 26
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 101
25212: PUSH
25213: LD_INT 102
25215: PUSH
25216: LD_INT 105
25218: PUSH
25219: LD_INT 106
25221: PUSH
25222: LD_INT 108
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: ST_TO_ADDR
25236: GO 28015
25238: LD_INT 3
25240: DOUBLE
25241: EQUAL
25242: IFTRUE 25246
25244: GO 25322
25246: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
25247: LD_ADDR_VAR 0 1
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: LD_INT 4
25257: PUSH
25258: LD_INT 5
25260: PUSH
25261: LD_INT 11
25263: PUSH
25264: LD_INT 12
25266: PUSH
25267: LD_INT 15
25269: PUSH
25270: LD_INT 16
25272: PUSH
25273: LD_INT 22
25275: PUSH
25276: LD_INT 26
25278: PUSH
25279: LD_INT 36
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 101
25296: PUSH
25297: LD_INT 102
25299: PUSH
25300: LD_INT 105
25302: PUSH
25303: LD_INT 106
25305: PUSH
25306: LD_INT 108
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: ST_TO_ADDR
25320: GO 28015
25322: LD_INT 4
25324: DOUBLE
25325: EQUAL
25326: IFTRUE 25330
25328: GO 25414
25330: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
25331: LD_ADDR_VAR 0 1
25335: PUSH
25336: LD_INT 2
25338: PUSH
25339: LD_INT 4
25341: PUSH
25342: LD_INT 5
25344: PUSH
25345: LD_INT 8
25347: PUSH
25348: LD_INT 11
25350: PUSH
25351: LD_INT 12
25353: PUSH
25354: LD_INT 15
25356: PUSH
25357: LD_INT 16
25359: PUSH
25360: LD_INT 22
25362: PUSH
25363: LD_INT 23
25365: PUSH
25366: LD_INT 26
25368: PUSH
25369: LD_INT 36
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 101
25388: PUSH
25389: LD_INT 102
25391: PUSH
25392: LD_INT 105
25394: PUSH
25395: LD_INT 106
25397: PUSH
25398: LD_INT 108
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: ST_TO_ADDR
25412: GO 28015
25414: LD_INT 5
25416: DOUBLE
25417: EQUAL
25418: IFTRUE 25422
25420: GO 25522
25422: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
25423: LD_ADDR_VAR 0 1
25427: PUSH
25428: LD_INT 2
25430: PUSH
25431: LD_INT 4
25433: PUSH
25434: LD_INT 5
25436: PUSH
25437: LD_INT 6
25439: PUSH
25440: LD_INT 8
25442: PUSH
25443: LD_INT 11
25445: PUSH
25446: LD_INT 12
25448: PUSH
25449: LD_INT 15
25451: PUSH
25452: LD_INT 16
25454: PUSH
25455: LD_INT 22
25457: PUSH
25458: LD_INT 23
25460: PUSH
25461: LD_INT 25
25463: PUSH
25464: LD_INT 26
25466: PUSH
25467: LD_INT 36
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 101
25488: PUSH
25489: LD_INT 102
25491: PUSH
25492: LD_INT 105
25494: PUSH
25495: LD_INT 106
25497: PUSH
25498: LD_INT 108
25500: PUSH
25501: LD_INT 109
25503: PUSH
25504: LD_INT 112
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: ST_TO_ADDR
25520: GO 28015
25522: LD_INT 6
25524: DOUBLE
25525: EQUAL
25526: IFTRUE 25530
25528: GO 25650
25530: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
25531: LD_ADDR_VAR 0 1
25535: PUSH
25536: LD_INT 2
25538: PUSH
25539: LD_INT 4
25541: PUSH
25542: LD_INT 5
25544: PUSH
25545: LD_INT 6
25547: PUSH
25548: LD_INT 8
25550: PUSH
25551: LD_INT 11
25553: PUSH
25554: LD_INT 12
25556: PUSH
25557: LD_INT 15
25559: PUSH
25560: LD_INT 16
25562: PUSH
25563: LD_INT 20
25565: PUSH
25566: LD_INT 21
25568: PUSH
25569: LD_INT 22
25571: PUSH
25572: LD_INT 23
25574: PUSH
25575: LD_INT 25
25577: PUSH
25578: LD_INT 26
25580: PUSH
25581: LD_INT 30
25583: PUSH
25584: LD_INT 31
25586: PUSH
25587: LD_INT 32
25589: PUSH
25590: LD_INT 36
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 101
25616: PUSH
25617: LD_INT 102
25619: PUSH
25620: LD_INT 105
25622: PUSH
25623: LD_INT 106
25625: PUSH
25626: LD_INT 108
25628: PUSH
25629: LD_INT 109
25631: PUSH
25632: LD_INT 112
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: ST_TO_ADDR
25648: GO 28015
25650: LD_INT 7
25652: DOUBLE
25653: EQUAL
25654: IFTRUE 25658
25656: GO 25758
25658: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
25659: LD_ADDR_VAR 0 1
25663: PUSH
25664: LD_INT 2
25666: PUSH
25667: LD_INT 4
25669: PUSH
25670: LD_INT 5
25672: PUSH
25673: LD_INT 7
25675: PUSH
25676: LD_INT 11
25678: PUSH
25679: LD_INT 12
25681: PUSH
25682: LD_INT 15
25684: PUSH
25685: LD_INT 16
25687: PUSH
25688: LD_INT 20
25690: PUSH
25691: LD_INT 21
25693: PUSH
25694: LD_INT 22
25696: PUSH
25697: LD_INT 23
25699: PUSH
25700: LD_INT 25
25702: PUSH
25703: LD_INT 26
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 101
25724: PUSH
25725: LD_INT 102
25727: PUSH
25728: LD_INT 103
25730: PUSH
25731: LD_INT 105
25733: PUSH
25734: LD_INT 106
25736: PUSH
25737: LD_INT 108
25739: PUSH
25740: LD_INT 112
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: ST_TO_ADDR
25756: GO 28015
25758: LD_INT 8
25760: DOUBLE
25761: EQUAL
25762: IFTRUE 25766
25764: GO 25894
25766: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
25767: LD_ADDR_VAR 0 1
25771: PUSH
25772: LD_INT 2
25774: PUSH
25775: LD_INT 4
25777: PUSH
25778: LD_INT 5
25780: PUSH
25781: LD_INT 6
25783: PUSH
25784: LD_INT 7
25786: PUSH
25787: LD_INT 8
25789: PUSH
25790: LD_INT 11
25792: PUSH
25793: LD_INT 12
25795: PUSH
25796: LD_INT 15
25798: PUSH
25799: LD_INT 16
25801: PUSH
25802: LD_INT 20
25804: PUSH
25805: LD_INT 21
25807: PUSH
25808: LD_INT 22
25810: PUSH
25811: LD_INT 23
25813: PUSH
25814: LD_INT 25
25816: PUSH
25817: LD_INT 26
25819: PUSH
25820: LD_INT 30
25822: PUSH
25823: LD_INT 31
25825: PUSH
25826: LD_INT 32
25828: PUSH
25829: LD_INT 36
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 101
25856: PUSH
25857: LD_INT 102
25859: PUSH
25860: LD_INT 103
25862: PUSH
25863: LD_INT 105
25865: PUSH
25866: LD_INT 106
25868: PUSH
25869: LD_INT 108
25871: PUSH
25872: LD_INT 109
25874: PUSH
25875: LD_INT 112
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: ST_TO_ADDR
25892: GO 28015
25894: LD_INT 9
25896: DOUBLE
25897: EQUAL
25898: IFTRUE 25902
25900: GO 26038
25902: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
25903: LD_ADDR_VAR 0 1
25907: PUSH
25908: LD_INT 2
25910: PUSH
25911: LD_INT 4
25913: PUSH
25914: LD_INT 5
25916: PUSH
25917: LD_INT 6
25919: PUSH
25920: LD_INT 7
25922: PUSH
25923: LD_INT 8
25925: PUSH
25926: LD_INT 11
25928: PUSH
25929: LD_INT 12
25931: PUSH
25932: LD_INT 15
25934: PUSH
25935: LD_INT 16
25937: PUSH
25938: LD_INT 20
25940: PUSH
25941: LD_INT 21
25943: PUSH
25944: LD_INT 22
25946: PUSH
25947: LD_INT 23
25949: PUSH
25950: LD_INT 25
25952: PUSH
25953: LD_INT 26
25955: PUSH
25956: LD_INT 28
25958: PUSH
25959: LD_INT 30
25961: PUSH
25962: LD_INT 31
25964: PUSH
25965: LD_INT 32
25967: PUSH
25968: LD_INT 36
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 101
25996: PUSH
25997: LD_INT 102
25999: PUSH
26000: LD_INT 103
26002: PUSH
26003: LD_INT 105
26005: PUSH
26006: LD_INT 106
26008: PUSH
26009: LD_INT 108
26011: PUSH
26012: LD_INT 109
26014: PUSH
26015: LD_INT 112
26017: PUSH
26018: LD_INT 114
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: ST_TO_ADDR
26036: GO 28015
26038: LD_INT 10
26040: DOUBLE
26041: EQUAL
26042: IFTRUE 26046
26044: GO 26230
26046: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
26047: LD_ADDR_VAR 0 1
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: LD_INT 4
26057: PUSH
26058: LD_INT 5
26060: PUSH
26061: LD_INT 6
26063: PUSH
26064: LD_INT 7
26066: PUSH
26067: LD_INT 8
26069: PUSH
26070: LD_INT 9
26072: PUSH
26073: LD_INT 10
26075: PUSH
26076: LD_INT 11
26078: PUSH
26079: LD_INT 12
26081: PUSH
26082: LD_INT 13
26084: PUSH
26085: LD_INT 14
26087: PUSH
26088: LD_INT 15
26090: PUSH
26091: LD_INT 16
26093: PUSH
26094: LD_INT 17
26096: PUSH
26097: LD_INT 18
26099: PUSH
26100: LD_INT 19
26102: PUSH
26103: LD_INT 20
26105: PUSH
26106: LD_INT 21
26108: PUSH
26109: LD_INT 22
26111: PUSH
26112: LD_INT 23
26114: PUSH
26115: LD_INT 24
26117: PUSH
26118: LD_INT 25
26120: PUSH
26121: LD_INT 26
26123: PUSH
26124: LD_INT 28
26126: PUSH
26127: LD_INT 30
26129: PUSH
26130: LD_INT 31
26132: PUSH
26133: LD_INT 32
26135: PUSH
26136: LD_INT 36
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 101
26172: PUSH
26173: LD_INT 102
26175: PUSH
26176: LD_INT 103
26178: PUSH
26179: LD_INT 104
26181: PUSH
26182: LD_INT 105
26184: PUSH
26185: LD_INT 106
26187: PUSH
26188: LD_INT 107
26190: PUSH
26191: LD_INT 108
26193: PUSH
26194: LD_INT 109
26196: PUSH
26197: LD_INT 110
26199: PUSH
26200: LD_INT 111
26202: PUSH
26203: LD_INT 112
26205: PUSH
26206: LD_INT 114
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: ST_TO_ADDR
26228: GO 28015
26230: LD_INT 11
26232: DOUBLE
26233: EQUAL
26234: IFTRUE 26238
26236: GO 26430
26238: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
26239: LD_ADDR_VAR 0 1
26243: PUSH
26244: LD_INT 2
26246: PUSH
26247: LD_INT 3
26249: PUSH
26250: LD_INT 4
26252: PUSH
26253: LD_INT 5
26255: PUSH
26256: LD_INT 6
26258: PUSH
26259: LD_INT 7
26261: PUSH
26262: LD_INT 8
26264: PUSH
26265: LD_INT 9
26267: PUSH
26268: LD_INT 10
26270: PUSH
26271: LD_INT 11
26273: PUSH
26274: LD_INT 12
26276: PUSH
26277: LD_INT 13
26279: PUSH
26280: LD_INT 14
26282: PUSH
26283: LD_INT 15
26285: PUSH
26286: LD_INT 16
26288: PUSH
26289: LD_INT 17
26291: PUSH
26292: LD_INT 18
26294: PUSH
26295: LD_INT 19
26297: PUSH
26298: LD_INT 20
26300: PUSH
26301: LD_INT 21
26303: PUSH
26304: LD_INT 22
26306: PUSH
26307: LD_INT 23
26309: PUSH
26310: LD_INT 24
26312: PUSH
26313: LD_INT 25
26315: PUSH
26316: LD_INT 26
26318: PUSH
26319: LD_INT 28
26321: PUSH
26322: LD_INT 30
26324: PUSH
26325: LD_INT 31
26327: PUSH
26328: LD_INT 32
26330: PUSH
26331: LD_INT 34
26333: PUSH
26334: LD_INT 36
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 101
26372: PUSH
26373: LD_INT 102
26375: PUSH
26376: LD_INT 103
26378: PUSH
26379: LD_INT 104
26381: PUSH
26382: LD_INT 105
26384: PUSH
26385: LD_INT 106
26387: PUSH
26388: LD_INT 107
26390: PUSH
26391: LD_INT 108
26393: PUSH
26394: LD_INT 109
26396: PUSH
26397: LD_INT 110
26399: PUSH
26400: LD_INT 111
26402: PUSH
26403: LD_INT 112
26405: PUSH
26406: LD_INT 114
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: ST_TO_ADDR
26428: GO 28015
26430: LD_INT 12
26432: DOUBLE
26433: EQUAL
26434: IFTRUE 26438
26436: GO 26646
26438: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
26439: LD_ADDR_VAR 0 1
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: LD_INT 2
26449: PUSH
26450: LD_INT 3
26452: PUSH
26453: LD_INT 4
26455: PUSH
26456: LD_INT 5
26458: PUSH
26459: LD_INT 6
26461: PUSH
26462: LD_INT 7
26464: PUSH
26465: LD_INT 8
26467: PUSH
26468: LD_INT 9
26470: PUSH
26471: LD_INT 10
26473: PUSH
26474: LD_INT 11
26476: PUSH
26477: LD_INT 12
26479: PUSH
26480: LD_INT 13
26482: PUSH
26483: LD_INT 14
26485: PUSH
26486: LD_INT 15
26488: PUSH
26489: LD_INT 16
26491: PUSH
26492: LD_INT 17
26494: PUSH
26495: LD_INT 18
26497: PUSH
26498: LD_INT 19
26500: PUSH
26501: LD_INT 20
26503: PUSH
26504: LD_INT 21
26506: PUSH
26507: LD_INT 22
26509: PUSH
26510: LD_INT 23
26512: PUSH
26513: LD_INT 24
26515: PUSH
26516: LD_INT 25
26518: PUSH
26519: LD_INT 26
26521: PUSH
26522: LD_INT 27
26524: PUSH
26525: LD_INT 28
26527: PUSH
26528: LD_INT 30
26530: PUSH
26531: LD_INT 31
26533: PUSH
26534: LD_INT 32
26536: PUSH
26537: LD_INT 33
26539: PUSH
26540: LD_INT 34
26542: PUSH
26543: LD_INT 36
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 101
26584: PUSH
26585: LD_INT 102
26587: PUSH
26588: LD_INT 103
26590: PUSH
26591: LD_INT 104
26593: PUSH
26594: LD_INT 105
26596: PUSH
26597: LD_INT 106
26599: PUSH
26600: LD_INT 107
26602: PUSH
26603: LD_INT 108
26605: PUSH
26606: LD_INT 109
26608: PUSH
26609: LD_INT 110
26611: PUSH
26612: LD_INT 111
26614: PUSH
26615: LD_INT 112
26617: PUSH
26618: LD_INT 113
26620: PUSH
26621: LD_INT 114
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: ST_TO_ADDR
26644: GO 28015
26646: LD_INT 13
26648: DOUBLE
26649: EQUAL
26650: IFTRUE 26654
26652: GO 26850
26654: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
26655: LD_ADDR_VAR 0 1
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: LD_INT 2
26665: PUSH
26666: LD_INT 3
26668: PUSH
26669: LD_INT 4
26671: PUSH
26672: LD_INT 5
26674: PUSH
26675: LD_INT 8
26677: PUSH
26678: LD_INT 9
26680: PUSH
26681: LD_INT 10
26683: PUSH
26684: LD_INT 11
26686: PUSH
26687: LD_INT 12
26689: PUSH
26690: LD_INT 14
26692: PUSH
26693: LD_INT 15
26695: PUSH
26696: LD_INT 16
26698: PUSH
26699: LD_INT 17
26701: PUSH
26702: LD_INT 18
26704: PUSH
26705: LD_INT 19
26707: PUSH
26708: LD_INT 20
26710: PUSH
26711: LD_INT 21
26713: PUSH
26714: LD_INT 22
26716: PUSH
26717: LD_INT 23
26719: PUSH
26720: LD_INT 24
26722: PUSH
26723: LD_INT 25
26725: PUSH
26726: LD_INT 26
26728: PUSH
26729: LD_INT 27
26731: PUSH
26732: LD_INT 28
26734: PUSH
26735: LD_INT 30
26737: PUSH
26738: LD_INT 31
26740: PUSH
26741: LD_INT 32
26743: PUSH
26744: LD_INT 33
26746: PUSH
26747: LD_INT 34
26749: PUSH
26750: LD_INT 36
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 101
26788: PUSH
26789: LD_INT 102
26791: PUSH
26792: LD_INT 103
26794: PUSH
26795: LD_INT 104
26797: PUSH
26798: LD_INT 105
26800: PUSH
26801: LD_INT 106
26803: PUSH
26804: LD_INT 107
26806: PUSH
26807: LD_INT 108
26809: PUSH
26810: LD_INT 109
26812: PUSH
26813: LD_INT 110
26815: PUSH
26816: LD_INT 111
26818: PUSH
26819: LD_INT 112
26821: PUSH
26822: LD_INT 113
26824: PUSH
26825: LD_INT 114
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: ST_TO_ADDR
26848: GO 28015
26850: LD_INT 14
26852: DOUBLE
26853: EQUAL
26854: IFTRUE 26858
26856: GO 27070
26858: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
26859: LD_ADDR_VAR 0 1
26863: PUSH
26864: LD_INT 1
26866: PUSH
26867: LD_INT 2
26869: PUSH
26870: LD_INT 3
26872: PUSH
26873: LD_INT 4
26875: PUSH
26876: LD_INT 5
26878: PUSH
26879: LD_INT 6
26881: PUSH
26882: LD_INT 7
26884: PUSH
26885: LD_INT 8
26887: PUSH
26888: LD_INT 9
26890: PUSH
26891: LD_INT 10
26893: PUSH
26894: LD_INT 11
26896: PUSH
26897: LD_INT 12
26899: PUSH
26900: LD_INT 13
26902: PUSH
26903: LD_INT 14
26905: PUSH
26906: LD_INT 15
26908: PUSH
26909: LD_INT 16
26911: PUSH
26912: LD_INT 17
26914: PUSH
26915: LD_INT 18
26917: PUSH
26918: LD_INT 19
26920: PUSH
26921: LD_INT 20
26923: PUSH
26924: LD_INT 21
26926: PUSH
26927: LD_INT 22
26929: PUSH
26930: LD_INT 23
26932: PUSH
26933: LD_INT 24
26935: PUSH
26936: LD_INT 25
26938: PUSH
26939: LD_INT 26
26941: PUSH
26942: LD_INT 27
26944: PUSH
26945: LD_INT 28
26947: PUSH
26948: LD_INT 29
26950: PUSH
26951: LD_INT 30
26953: PUSH
26954: LD_INT 31
26956: PUSH
26957: LD_INT 32
26959: PUSH
26960: LD_INT 33
26962: PUSH
26963: LD_INT 34
26965: PUSH
26966: LD_INT 36
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 101
27008: PUSH
27009: LD_INT 102
27011: PUSH
27012: LD_INT 103
27014: PUSH
27015: LD_INT 104
27017: PUSH
27018: LD_INT 105
27020: PUSH
27021: LD_INT 106
27023: PUSH
27024: LD_INT 107
27026: PUSH
27027: LD_INT 108
27029: PUSH
27030: LD_INT 109
27032: PUSH
27033: LD_INT 110
27035: PUSH
27036: LD_INT 111
27038: PUSH
27039: LD_INT 112
27041: PUSH
27042: LD_INT 113
27044: PUSH
27045: LD_INT 114
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: ST_TO_ADDR
27068: GO 28015
27070: LD_INT 15
27072: DOUBLE
27073: EQUAL
27074: IFTRUE 27078
27076: GO 27290
27078: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
27079: LD_ADDR_VAR 0 1
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: LD_INT 2
27089: PUSH
27090: LD_INT 3
27092: PUSH
27093: LD_INT 4
27095: PUSH
27096: LD_INT 5
27098: PUSH
27099: LD_INT 6
27101: PUSH
27102: LD_INT 7
27104: PUSH
27105: LD_INT 8
27107: PUSH
27108: LD_INT 9
27110: PUSH
27111: LD_INT 10
27113: PUSH
27114: LD_INT 11
27116: PUSH
27117: LD_INT 12
27119: PUSH
27120: LD_INT 13
27122: PUSH
27123: LD_INT 14
27125: PUSH
27126: LD_INT 15
27128: PUSH
27129: LD_INT 16
27131: PUSH
27132: LD_INT 17
27134: PUSH
27135: LD_INT 18
27137: PUSH
27138: LD_INT 19
27140: PUSH
27141: LD_INT 20
27143: PUSH
27144: LD_INT 21
27146: PUSH
27147: LD_INT 22
27149: PUSH
27150: LD_INT 23
27152: PUSH
27153: LD_INT 24
27155: PUSH
27156: LD_INT 25
27158: PUSH
27159: LD_INT 26
27161: PUSH
27162: LD_INT 27
27164: PUSH
27165: LD_INT 28
27167: PUSH
27168: LD_INT 29
27170: PUSH
27171: LD_INT 30
27173: PUSH
27174: LD_INT 31
27176: PUSH
27177: LD_INT 32
27179: PUSH
27180: LD_INT 33
27182: PUSH
27183: LD_INT 34
27185: PUSH
27186: LD_INT 36
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 101
27228: PUSH
27229: LD_INT 102
27231: PUSH
27232: LD_INT 103
27234: PUSH
27235: LD_INT 104
27237: PUSH
27238: LD_INT 105
27240: PUSH
27241: LD_INT 106
27243: PUSH
27244: LD_INT 107
27246: PUSH
27247: LD_INT 108
27249: PUSH
27250: LD_INT 109
27252: PUSH
27253: LD_INT 110
27255: PUSH
27256: LD_INT 111
27258: PUSH
27259: LD_INT 112
27261: PUSH
27262: LD_INT 113
27264: PUSH
27265: LD_INT 114
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: ST_TO_ADDR
27288: GO 28015
27290: LD_INT 16
27292: DOUBLE
27293: EQUAL
27294: IFTRUE 27298
27296: GO 27422
27298: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
27299: LD_ADDR_VAR 0 1
27303: PUSH
27304: LD_INT 2
27306: PUSH
27307: LD_INT 4
27309: PUSH
27310: LD_INT 5
27312: PUSH
27313: LD_INT 7
27315: PUSH
27316: LD_INT 11
27318: PUSH
27319: LD_INT 12
27321: PUSH
27322: LD_INT 15
27324: PUSH
27325: LD_INT 16
27327: PUSH
27328: LD_INT 20
27330: PUSH
27331: LD_INT 21
27333: PUSH
27334: LD_INT 22
27336: PUSH
27337: LD_INT 23
27339: PUSH
27340: LD_INT 25
27342: PUSH
27343: LD_INT 26
27345: PUSH
27346: LD_INT 30
27348: PUSH
27349: LD_INT 31
27351: PUSH
27352: LD_INT 32
27354: PUSH
27355: LD_INT 33
27357: PUSH
27358: LD_INT 34
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 101
27384: PUSH
27385: LD_INT 102
27387: PUSH
27388: LD_INT 103
27390: PUSH
27391: LD_INT 106
27393: PUSH
27394: LD_INT 108
27396: PUSH
27397: LD_INT 112
27399: PUSH
27400: LD_INT 113
27402: PUSH
27403: LD_INT 114
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: ST_TO_ADDR
27420: GO 28015
27422: LD_INT 17
27424: DOUBLE
27425: EQUAL
27426: IFTRUE 27430
27428: GO 27642
27430: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
27431: LD_ADDR_VAR 0 1
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: LD_INT 2
27441: PUSH
27442: LD_INT 3
27444: PUSH
27445: LD_INT 4
27447: PUSH
27448: LD_INT 5
27450: PUSH
27451: LD_INT 6
27453: PUSH
27454: LD_INT 7
27456: PUSH
27457: LD_INT 8
27459: PUSH
27460: LD_INT 9
27462: PUSH
27463: LD_INT 10
27465: PUSH
27466: LD_INT 11
27468: PUSH
27469: LD_INT 12
27471: PUSH
27472: LD_INT 13
27474: PUSH
27475: LD_INT 14
27477: PUSH
27478: LD_INT 15
27480: PUSH
27481: LD_INT 16
27483: PUSH
27484: LD_INT 17
27486: PUSH
27487: LD_INT 18
27489: PUSH
27490: LD_INT 19
27492: PUSH
27493: LD_INT 20
27495: PUSH
27496: LD_INT 21
27498: PUSH
27499: LD_INT 22
27501: PUSH
27502: LD_INT 23
27504: PUSH
27505: LD_INT 24
27507: PUSH
27508: LD_INT 25
27510: PUSH
27511: LD_INT 26
27513: PUSH
27514: LD_INT 27
27516: PUSH
27517: LD_INT 28
27519: PUSH
27520: LD_INT 29
27522: PUSH
27523: LD_INT 30
27525: PUSH
27526: LD_INT 31
27528: PUSH
27529: LD_INT 32
27531: PUSH
27532: LD_INT 33
27534: PUSH
27535: LD_INT 34
27537: PUSH
27538: LD_INT 36
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 101
27580: PUSH
27581: LD_INT 102
27583: PUSH
27584: LD_INT 103
27586: PUSH
27587: LD_INT 104
27589: PUSH
27590: LD_INT 105
27592: PUSH
27593: LD_INT 106
27595: PUSH
27596: LD_INT 107
27598: PUSH
27599: LD_INT 108
27601: PUSH
27602: LD_INT 109
27604: PUSH
27605: LD_INT 110
27607: PUSH
27608: LD_INT 111
27610: PUSH
27611: LD_INT 112
27613: PUSH
27614: LD_INT 113
27616: PUSH
27617: LD_INT 114
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: ST_TO_ADDR
27640: GO 28015
27642: LD_INT 18
27644: DOUBLE
27645: EQUAL
27646: IFTRUE 27650
27648: GO 27786
27650: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
27651: LD_ADDR_VAR 0 1
27655: PUSH
27656: LD_INT 2
27658: PUSH
27659: LD_INT 4
27661: PUSH
27662: LD_INT 5
27664: PUSH
27665: LD_INT 7
27667: PUSH
27668: LD_INT 11
27670: PUSH
27671: LD_INT 12
27673: PUSH
27674: LD_INT 15
27676: PUSH
27677: LD_INT 16
27679: PUSH
27680: LD_INT 20
27682: PUSH
27683: LD_INT 21
27685: PUSH
27686: LD_INT 22
27688: PUSH
27689: LD_INT 23
27691: PUSH
27692: LD_INT 25
27694: PUSH
27695: LD_INT 26
27697: PUSH
27698: LD_INT 30
27700: PUSH
27701: LD_INT 31
27703: PUSH
27704: LD_INT 32
27706: PUSH
27707: LD_INT 33
27709: PUSH
27710: LD_INT 34
27712: PUSH
27713: LD_INT 35
27715: PUSH
27716: LD_INT 36
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 101
27744: PUSH
27745: LD_INT 102
27747: PUSH
27748: LD_INT 103
27750: PUSH
27751: LD_INT 106
27753: PUSH
27754: LD_INT 108
27756: PUSH
27757: LD_INT 112
27759: PUSH
27760: LD_INT 113
27762: PUSH
27763: LD_INT 114
27765: PUSH
27766: LD_INT 115
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: ST_TO_ADDR
27784: GO 28015
27786: LD_INT 19
27788: DOUBLE
27789: EQUAL
27790: IFTRUE 27794
27792: GO 28014
27794: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
27795: LD_ADDR_VAR 0 1
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: LD_INT 2
27805: PUSH
27806: LD_INT 3
27808: PUSH
27809: LD_INT 4
27811: PUSH
27812: LD_INT 5
27814: PUSH
27815: LD_INT 6
27817: PUSH
27818: LD_INT 7
27820: PUSH
27821: LD_INT 8
27823: PUSH
27824: LD_INT 9
27826: PUSH
27827: LD_INT 10
27829: PUSH
27830: LD_INT 11
27832: PUSH
27833: LD_INT 12
27835: PUSH
27836: LD_INT 13
27838: PUSH
27839: LD_INT 14
27841: PUSH
27842: LD_INT 15
27844: PUSH
27845: LD_INT 16
27847: PUSH
27848: LD_INT 17
27850: PUSH
27851: LD_INT 18
27853: PUSH
27854: LD_INT 19
27856: PUSH
27857: LD_INT 20
27859: PUSH
27860: LD_INT 21
27862: PUSH
27863: LD_INT 22
27865: PUSH
27866: LD_INT 23
27868: PUSH
27869: LD_INT 24
27871: PUSH
27872: LD_INT 25
27874: PUSH
27875: LD_INT 26
27877: PUSH
27878: LD_INT 27
27880: PUSH
27881: LD_INT 28
27883: PUSH
27884: LD_INT 29
27886: PUSH
27887: LD_INT 30
27889: PUSH
27890: LD_INT 31
27892: PUSH
27893: LD_INT 32
27895: PUSH
27896: LD_INT 33
27898: PUSH
27899: LD_INT 34
27901: PUSH
27902: LD_INT 35
27904: PUSH
27905: LD_INT 36
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 101
27948: PUSH
27949: LD_INT 102
27951: PUSH
27952: LD_INT 103
27954: PUSH
27955: LD_INT 104
27957: PUSH
27958: LD_INT 105
27960: PUSH
27961: LD_INT 106
27963: PUSH
27964: LD_INT 107
27966: PUSH
27967: LD_INT 108
27969: PUSH
27970: LD_INT 109
27972: PUSH
27973: LD_INT 110
27975: PUSH
27976: LD_INT 111
27978: PUSH
27979: LD_INT 112
27981: PUSH
27982: LD_INT 113
27984: PUSH
27985: LD_INT 114
27987: PUSH
27988: LD_INT 115
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: ST_TO_ADDR
28012: GO 28015
28014: POP
// end else
28015: GO 28234
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
28017: LD_ADDR_VAR 0 1
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: LD_INT 2
28027: PUSH
28028: LD_INT 3
28030: PUSH
28031: LD_INT 4
28033: PUSH
28034: LD_INT 5
28036: PUSH
28037: LD_INT 6
28039: PUSH
28040: LD_INT 7
28042: PUSH
28043: LD_INT 8
28045: PUSH
28046: LD_INT 9
28048: PUSH
28049: LD_INT 10
28051: PUSH
28052: LD_INT 11
28054: PUSH
28055: LD_INT 12
28057: PUSH
28058: LD_INT 13
28060: PUSH
28061: LD_INT 14
28063: PUSH
28064: LD_INT 15
28066: PUSH
28067: LD_INT 16
28069: PUSH
28070: LD_INT 17
28072: PUSH
28073: LD_INT 18
28075: PUSH
28076: LD_INT 19
28078: PUSH
28079: LD_INT 20
28081: PUSH
28082: LD_INT 21
28084: PUSH
28085: LD_INT 22
28087: PUSH
28088: LD_INT 23
28090: PUSH
28091: LD_INT 24
28093: PUSH
28094: LD_INT 25
28096: PUSH
28097: LD_INT 26
28099: PUSH
28100: LD_INT 27
28102: PUSH
28103: LD_INT 28
28105: PUSH
28106: LD_INT 29
28108: PUSH
28109: LD_INT 30
28111: PUSH
28112: LD_INT 31
28114: PUSH
28115: LD_INT 32
28117: PUSH
28118: LD_INT 33
28120: PUSH
28121: LD_INT 34
28123: PUSH
28124: LD_INT 35
28126: PUSH
28127: LD_INT 36
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 101
28170: PUSH
28171: LD_INT 102
28173: PUSH
28174: LD_INT 103
28176: PUSH
28177: LD_INT 104
28179: PUSH
28180: LD_INT 105
28182: PUSH
28183: LD_INT 106
28185: PUSH
28186: LD_INT 107
28188: PUSH
28189: LD_INT 108
28191: PUSH
28192: LD_INT 109
28194: PUSH
28195: LD_INT 110
28197: PUSH
28198: LD_INT 111
28200: PUSH
28201: LD_INT 112
28203: PUSH
28204: LD_INT 113
28206: PUSH
28207: LD_INT 114
28209: PUSH
28210: LD_INT 115
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: ST_TO_ADDR
// if result then
28234: LD_VAR 0 1
28238: IFFALSE 28527
// begin normal :=  ;
28240: LD_ADDR_VAR 0 3
28244: PUSH
28245: LD_STRING 
28247: ST_TO_ADDR
// hardcore :=  ;
28248: LD_ADDR_VAR 0 4
28252: PUSH
28253: LD_STRING 
28255: ST_TO_ADDR
// for i = 1 to normalCounter do
28256: LD_ADDR_VAR 0 5
28260: PUSH
28261: DOUBLE
28262: LD_INT 1
28264: DEC
28265: ST_TO_ADDR
28266: LD_EXP 66
28270: PUSH
28271: FOR_TO
28272: IFFALSE 28373
// begin tmp := 0 ;
28274: LD_ADDR_VAR 0 2
28278: PUSH
28279: LD_STRING 0
28281: ST_TO_ADDR
// if result [ 1 ] then
28282: LD_VAR 0 1
28286: PUSH
28287: LD_INT 1
28289: ARRAY
28290: IFFALSE 28355
// if result [ 1 ] [ 1 ] = i then
28292: LD_VAR 0 1
28296: PUSH
28297: LD_INT 1
28299: ARRAY
28300: PUSH
28301: LD_INT 1
28303: ARRAY
28304: PUSH
28305: LD_VAR 0 5
28309: EQUAL
28310: IFFALSE 28355
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
28312: LD_ADDR_VAR 0 1
28316: PUSH
28317: LD_VAR 0 1
28321: PPUSH
28322: LD_INT 1
28324: PPUSH
28325: LD_VAR 0 1
28329: PUSH
28330: LD_INT 1
28332: ARRAY
28333: PPUSH
28334: LD_INT 1
28336: PPUSH
28337: CALL_OW 3
28341: PPUSH
28342: CALL_OW 1
28346: ST_TO_ADDR
// tmp := 1 ;
28347: LD_ADDR_VAR 0 2
28351: PUSH
28352: LD_STRING 1
28354: ST_TO_ADDR
// end ; normal := normal & tmp ;
28355: LD_ADDR_VAR 0 3
28359: PUSH
28360: LD_VAR 0 3
28364: PUSH
28365: LD_VAR 0 2
28369: STR
28370: ST_TO_ADDR
// end ;
28371: GO 28271
28373: POP
28374: POP
// for i = 1 to hardcoreCounter do
28375: LD_ADDR_VAR 0 5
28379: PUSH
28380: DOUBLE
28381: LD_INT 1
28383: DEC
28384: ST_TO_ADDR
28385: LD_EXP 67
28389: PUSH
28390: FOR_TO
28391: IFFALSE 28496
// begin tmp := 0 ;
28393: LD_ADDR_VAR 0 2
28397: PUSH
28398: LD_STRING 0
28400: ST_TO_ADDR
// if result [ 2 ] then
28401: LD_VAR 0 1
28405: PUSH
28406: LD_INT 2
28408: ARRAY
28409: IFFALSE 28478
// if result [ 2 ] [ 1 ] = 100 + i then
28411: LD_VAR 0 1
28415: PUSH
28416: LD_INT 2
28418: ARRAY
28419: PUSH
28420: LD_INT 1
28422: ARRAY
28423: PUSH
28424: LD_INT 100
28426: PUSH
28427: LD_VAR 0 5
28431: PLUS
28432: EQUAL
28433: IFFALSE 28478
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
28435: LD_ADDR_VAR 0 1
28439: PUSH
28440: LD_VAR 0 1
28444: PPUSH
28445: LD_INT 2
28447: PPUSH
28448: LD_VAR 0 1
28452: PUSH
28453: LD_INT 2
28455: ARRAY
28456: PPUSH
28457: LD_INT 1
28459: PPUSH
28460: CALL_OW 3
28464: PPUSH
28465: CALL_OW 1
28469: ST_TO_ADDR
// tmp := 1 ;
28470: LD_ADDR_VAR 0 2
28474: PUSH
28475: LD_STRING 1
28477: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
28478: LD_ADDR_VAR 0 4
28482: PUSH
28483: LD_VAR 0 4
28487: PUSH
28488: LD_VAR 0 2
28492: STR
28493: ST_TO_ADDR
// end ;
28494: GO 28390
28496: POP
28497: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
28498: LD_STRING getStreamItemsFromMission("
28500: PUSH
28501: LD_VAR 0 3
28505: STR
28506: PUSH
28507: LD_STRING ","
28509: STR
28510: PUSH
28511: LD_VAR 0 4
28515: STR
28516: PUSH
28517: LD_STRING ")
28519: STR
28520: PPUSH
28521: CALL_OW 559
// end else
28525: GO 28534
// ToLua ( getStreamItemsFromMission("","") ) ;
28527: LD_STRING getStreamItemsFromMission("","")
28529: PPUSH
28530: CALL_OW 559
// end ;
28534: LD_VAR 0 1
28538: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
28539: LD_VAR 0 2
28543: PUSH
28544: LD_INT 100
28546: EQUAL
28547: IFFALSE 29496
// begin if not StreamModeActive then
28549: LD_EXP 65
28553: NOT
28554: IFFALSE 28564
// StreamModeActive := true ;
28556: LD_ADDR_EXP 65
28560: PUSH
28561: LD_INT 1
28563: ST_TO_ADDR
// if p3 = 0 then
28564: LD_VAR 0 3
28568: PUSH
28569: LD_INT 0
28571: EQUAL
28572: IFFALSE 28578
// InitStreamMode ;
28574: CALL 24617 0 0
// if p3 = 1 then
28578: LD_VAR 0 3
28582: PUSH
28583: LD_INT 1
28585: EQUAL
28586: IFFALSE 28596
// sRocket := true ;
28588: LD_ADDR_EXP 70
28592: PUSH
28593: LD_INT 1
28595: ST_TO_ADDR
// if p3 = 2 then
28596: LD_VAR 0 3
28600: PUSH
28601: LD_INT 2
28603: EQUAL
28604: IFFALSE 28614
// sSpeed := true ;
28606: LD_ADDR_EXP 69
28610: PUSH
28611: LD_INT 1
28613: ST_TO_ADDR
// if p3 = 3 then
28614: LD_VAR 0 3
28618: PUSH
28619: LD_INT 3
28621: EQUAL
28622: IFFALSE 28632
// sEngine := true ;
28624: LD_ADDR_EXP 71
28628: PUSH
28629: LD_INT 1
28631: ST_TO_ADDR
// if p3 = 4 then
28632: LD_VAR 0 3
28636: PUSH
28637: LD_INT 4
28639: EQUAL
28640: IFFALSE 28650
// sSpec := true ;
28642: LD_ADDR_EXP 68
28646: PUSH
28647: LD_INT 1
28649: ST_TO_ADDR
// if p3 = 5 then
28650: LD_VAR 0 3
28654: PUSH
28655: LD_INT 5
28657: EQUAL
28658: IFFALSE 28668
// sLevel := true ;
28660: LD_ADDR_EXP 72
28664: PUSH
28665: LD_INT 1
28667: ST_TO_ADDR
// if p3 = 6 then
28668: LD_VAR 0 3
28672: PUSH
28673: LD_INT 6
28675: EQUAL
28676: IFFALSE 28686
// sArmoury := true ;
28678: LD_ADDR_EXP 73
28682: PUSH
28683: LD_INT 1
28685: ST_TO_ADDR
// if p3 = 7 then
28686: LD_VAR 0 3
28690: PUSH
28691: LD_INT 7
28693: EQUAL
28694: IFFALSE 28704
// sRadar := true ;
28696: LD_ADDR_EXP 74
28700: PUSH
28701: LD_INT 1
28703: ST_TO_ADDR
// if p3 = 8 then
28704: LD_VAR 0 3
28708: PUSH
28709: LD_INT 8
28711: EQUAL
28712: IFFALSE 28722
// sBunker := true ;
28714: LD_ADDR_EXP 75
28718: PUSH
28719: LD_INT 1
28721: ST_TO_ADDR
// if p3 = 9 then
28722: LD_VAR 0 3
28726: PUSH
28727: LD_INT 9
28729: EQUAL
28730: IFFALSE 28740
// sHack := true ;
28732: LD_ADDR_EXP 76
28736: PUSH
28737: LD_INT 1
28739: ST_TO_ADDR
// if p3 = 10 then
28740: LD_VAR 0 3
28744: PUSH
28745: LD_INT 10
28747: EQUAL
28748: IFFALSE 28758
// sFire := true ;
28750: LD_ADDR_EXP 77
28754: PUSH
28755: LD_INT 1
28757: ST_TO_ADDR
// if p3 = 11 then
28758: LD_VAR 0 3
28762: PUSH
28763: LD_INT 11
28765: EQUAL
28766: IFFALSE 28776
// sRefresh := true ;
28768: LD_ADDR_EXP 78
28772: PUSH
28773: LD_INT 1
28775: ST_TO_ADDR
// if p3 = 12 then
28776: LD_VAR 0 3
28780: PUSH
28781: LD_INT 12
28783: EQUAL
28784: IFFALSE 28794
// sExp := true ;
28786: LD_ADDR_EXP 79
28790: PUSH
28791: LD_INT 1
28793: ST_TO_ADDR
// if p3 = 13 then
28794: LD_VAR 0 3
28798: PUSH
28799: LD_INT 13
28801: EQUAL
28802: IFFALSE 28812
// sDepot := true ;
28804: LD_ADDR_EXP 80
28808: PUSH
28809: LD_INT 1
28811: ST_TO_ADDR
// if p3 = 14 then
28812: LD_VAR 0 3
28816: PUSH
28817: LD_INT 14
28819: EQUAL
28820: IFFALSE 28830
// sFlag := true ;
28822: LD_ADDR_EXP 81
28826: PUSH
28827: LD_INT 1
28829: ST_TO_ADDR
// if p3 = 15 then
28830: LD_VAR 0 3
28834: PUSH
28835: LD_INT 15
28837: EQUAL
28838: IFFALSE 28848
// sKamikadze := true ;
28840: LD_ADDR_EXP 89
28844: PUSH
28845: LD_INT 1
28847: ST_TO_ADDR
// if p3 = 16 then
28848: LD_VAR 0 3
28852: PUSH
28853: LD_INT 16
28855: EQUAL
28856: IFFALSE 28866
// sTroll := true ;
28858: LD_ADDR_EXP 90
28862: PUSH
28863: LD_INT 1
28865: ST_TO_ADDR
// if p3 = 17 then
28866: LD_VAR 0 3
28870: PUSH
28871: LD_INT 17
28873: EQUAL
28874: IFFALSE 28884
// sSlow := true ;
28876: LD_ADDR_EXP 91
28880: PUSH
28881: LD_INT 1
28883: ST_TO_ADDR
// if p3 = 18 then
28884: LD_VAR 0 3
28888: PUSH
28889: LD_INT 18
28891: EQUAL
28892: IFFALSE 28902
// sLack := true ;
28894: LD_ADDR_EXP 92
28898: PUSH
28899: LD_INT 1
28901: ST_TO_ADDR
// if p3 = 19 then
28902: LD_VAR 0 3
28906: PUSH
28907: LD_INT 19
28909: EQUAL
28910: IFFALSE 28920
// sTank := true ;
28912: LD_ADDR_EXP 94
28916: PUSH
28917: LD_INT 1
28919: ST_TO_ADDR
// if p3 = 20 then
28920: LD_VAR 0 3
28924: PUSH
28925: LD_INT 20
28927: EQUAL
28928: IFFALSE 28938
// sRemote := true ;
28930: LD_ADDR_EXP 95
28934: PUSH
28935: LD_INT 1
28937: ST_TO_ADDR
// if p3 = 21 then
28938: LD_VAR 0 3
28942: PUSH
28943: LD_INT 21
28945: EQUAL
28946: IFFALSE 28956
// sPowell := true ;
28948: LD_ADDR_EXP 96
28952: PUSH
28953: LD_INT 1
28955: ST_TO_ADDR
// if p3 = 22 then
28956: LD_VAR 0 3
28960: PUSH
28961: LD_INT 22
28963: EQUAL
28964: IFFALSE 28974
// sTeleport := true ;
28966: LD_ADDR_EXP 99
28970: PUSH
28971: LD_INT 1
28973: ST_TO_ADDR
// if p3 = 23 then
28974: LD_VAR 0 3
28978: PUSH
28979: LD_INT 23
28981: EQUAL
28982: IFFALSE 28992
// sOilTower := true ;
28984: LD_ADDR_EXP 101
28988: PUSH
28989: LD_INT 1
28991: ST_TO_ADDR
// if p3 = 24 then
28992: LD_VAR 0 3
28996: PUSH
28997: LD_INT 24
28999: EQUAL
29000: IFFALSE 29010
// sShovel := true ;
29002: LD_ADDR_EXP 102
29006: PUSH
29007: LD_INT 1
29009: ST_TO_ADDR
// if p3 = 25 then
29010: LD_VAR 0 3
29014: PUSH
29015: LD_INT 25
29017: EQUAL
29018: IFFALSE 29028
// sSheik := true ;
29020: LD_ADDR_EXP 103
29024: PUSH
29025: LD_INT 1
29027: ST_TO_ADDR
// if p3 = 26 then
29028: LD_VAR 0 3
29032: PUSH
29033: LD_INT 26
29035: EQUAL
29036: IFFALSE 29046
// sEarthquake := true ;
29038: LD_ADDR_EXP 105
29042: PUSH
29043: LD_INT 1
29045: ST_TO_ADDR
// if p3 = 27 then
29046: LD_VAR 0 3
29050: PUSH
29051: LD_INT 27
29053: EQUAL
29054: IFFALSE 29064
// sAI := true ;
29056: LD_ADDR_EXP 106
29060: PUSH
29061: LD_INT 1
29063: ST_TO_ADDR
// if p3 = 28 then
29064: LD_VAR 0 3
29068: PUSH
29069: LD_INT 28
29071: EQUAL
29072: IFFALSE 29082
// sCargo := true ;
29074: LD_ADDR_EXP 109
29078: PUSH
29079: LD_INT 1
29081: ST_TO_ADDR
// if p3 = 29 then
29082: LD_VAR 0 3
29086: PUSH
29087: LD_INT 29
29089: EQUAL
29090: IFFALSE 29100
// sDLaser := true ;
29092: LD_ADDR_EXP 110
29096: PUSH
29097: LD_INT 1
29099: ST_TO_ADDR
// if p3 = 30 then
29100: LD_VAR 0 3
29104: PUSH
29105: LD_INT 30
29107: EQUAL
29108: IFFALSE 29118
// sExchange := true ;
29110: LD_ADDR_EXP 111
29114: PUSH
29115: LD_INT 1
29117: ST_TO_ADDR
// if p3 = 31 then
29118: LD_VAR 0 3
29122: PUSH
29123: LD_INT 31
29125: EQUAL
29126: IFFALSE 29136
// sFac := true ;
29128: LD_ADDR_EXP 112
29132: PUSH
29133: LD_INT 1
29135: ST_TO_ADDR
// if p3 = 32 then
29136: LD_VAR 0 3
29140: PUSH
29141: LD_INT 32
29143: EQUAL
29144: IFFALSE 29154
// sPower := true ;
29146: LD_ADDR_EXP 113
29150: PUSH
29151: LD_INT 1
29153: ST_TO_ADDR
// if p3 = 33 then
29154: LD_VAR 0 3
29158: PUSH
29159: LD_INT 33
29161: EQUAL
29162: IFFALSE 29172
// sRandom := true ;
29164: LD_ADDR_EXP 114
29168: PUSH
29169: LD_INT 1
29171: ST_TO_ADDR
// if p3 = 34 then
29172: LD_VAR 0 3
29176: PUSH
29177: LD_INT 34
29179: EQUAL
29180: IFFALSE 29190
// sShield := true ;
29182: LD_ADDR_EXP 115
29186: PUSH
29187: LD_INT 1
29189: ST_TO_ADDR
// if p3 = 35 then
29190: LD_VAR 0 3
29194: PUSH
29195: LD_INT 35
29197: EQUAL
29198: IFFALSE 29208
// sTime := true ;
29200: LD_ADDR_EXP 116
29204: PUSH
29205: LD_INT 1
29207: ST_TO_ADDR
// if p3 = 36 then
29208: LD_VAR 0 3
29212: PUSH
29213: LD_INT 36
29215: EQUAL
29216: IFFALSE 29226
// sTools := true ;
29218: LD_ADDR_EXP 117
29222: PUSH
29223: LD_INT 1
29225: ST_TO_ADDR
// if p3 = 101 then
29226: LD_VAR 0 3
29230: PUSH
29231: LD_INT 101
29233: EQUAL
29234: IFFALSE 29244
// sSold := true ;
29236: LD_ADDR_EXP 82
29240: PUSH
29241: LD_INT 1
29243: ST_TO_ADDR
// if p3 = 102 then
29244: LD_VAR 0 3
29248: PUSH
29249: LD_INT 102
29251: EQUAL
29252: IFFALSE 29262
// sDiff := true ;
29254: LD_ADDR_EXP 83
29258: PUSH
29259: LD_INT 1
29261: ST_TO_ADDR
// if p3 = 103 then
29262: LD_VAR 0 3
29266: PUSH
29267: LD_INT 103
29269: EQUAL
29270: IFFALSE 29280
// sFog := true ;
29272: LD_ADDR_EXP 86
29276: PUSH
29277: LD_INT 1
29279: ST_TO_ADDR
// if p3 = 104 then
29280: LD_VAR 0 3
29284: PUSH
29285: LD_INT 104
29287: EQUAL
29288: IFFALSE 29298
// sReset := true ;
29290: LD_ADDR_EXP 87
29294: PUSH
29295: LD_INT 1
29297: ST_TO_ADDR
// if p3 = 105 then
29298: LD_VAR 0 3
29302: PUSH
29303: LD_INT 105
29305: EQUAL
29306: IFFALSE 29316
// sSun := true ;
29308: LD_ADDR_EXP 88
29312: PUSH
29313: LD_INT 1
29315: ST_TO_ADDR
// if p3 = 106 then
29316: LD_VAR 0 3
29320: PUSH
29321: LD_INT 106
29323: EQUAL
29324: IFFALSE 29334
// sTiger := true ;
29326: LD_ADDR_EXP 84
29330: PUSH
29331: LD_INT 1
29333: ST_TO_ADDR
// if p3 = 107 then
29334: LD_VAR 0 3
29338: PUSH
29339: LD_INT 107
29341: EQUAL
29342: IFFALSE 29352
// sBomb := true ;
29344: LD_ADDR_EXP 85
29348: PUSH
29349: LD_INT 1
29351: ST_TO_ADDR
// if p3 = 108 then
29352: LD_VAR 0 3
29356: PUSH
29357: LD_INT 108
29359: EQUAL
29360: IFFALSE 29370
// sWound := true ;
29362: LD_ADDR_EXP 93
29366: PUSH
29367: LD_INT 1
29369: ST_TO_ADDR
// if p3 = 109 then
29370: LD_VAR 0 3
29374: PUSH
29375: LD_INT 109
29377: EQUAL
29378: IFFALSE 29388
// sBetray := true ;
29380: LD_ADDR_EXP 97
29384: PUSH
29385: LD_INT 1
29387: ST_TO_ADDR
// if p3 = 110 then
29388: LD_VAR 0 3
29392: PUSH
29393: LD_INT 110
29395: EQUAL
29396: IFFALSE 29406
// sContamin := true ;
29398: LD_ADDR_EXP 98
29402: PUSH
29403: LD_INT 1
29405: ST_TO_ADDR
// if p3 = 111 then
29406: LD_VAR 0 3
29410: PUSH
29411: LD_INT 111
29413: EQUAL
29414: IFFALSE 29424
// sOil := true ;
29416: LD_ADDR_EXP 100
29420: PUSH
29421: LD_INT 1
29423: ST_TO_ADDR
// if p3 = 112 then
29424: LD_VAR 0 3
29428: PUSH
29429: LD_INT 112
29431: EQUAL
29432: IFFALSE 29442
// sStu := true ;
29434: LD_ADDR_EXP 104
29438: PUSH
29439: LD_INT 1
29441: ST_TO_ADDR
// if p3 = 113 then
29442: LD_VAR 0 3
29446: PUSH
29447: LD_INT 113
29449: EQUAL
29450: IFFALSE 29460
// sBazooka := true ;
29452: LD_ADDR_EXP 107
29456: PUSH
29457: LD_INT 1
29459: ST_TO_ADDR
// if p3 = 114 then
29460: LD_VAR 0 3
29464: PUSH
29465: LD_INT 114
29467: EQUAL
29468: IFFALSE 29478
// sMortar := true ;
29470: LD_ADDR_EXP 108
29474: PUSH
29475: LD_INT 1
29477: ST_TO_ADDR
// if p3 = 115 then
29478: LD_VAR 0 3
29482: PUSH
29483: LD_INT 115
29485: EQUAL
29486: IFFALSE 29496
// sRanger := true ;
29488: LD_ADDR_EXP 118
29492: PUSH
29493: LD_INT 1
29495: ST_TO_ADDR
// end ; end ;
29496: PPOPN 6
29498: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
29499: LD_EXP 65
29503: PUSH
29504: LD_EXP 70
29508: AND
29509: IFFALSE 29633
29511: GO 29513
29513: DISABLE
29514: LD_INT 0
29516: PPUSH
29517: PPUSH
// begin enable ;
29518: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
29519: LD_ADDR_VAR 0 2
29523: PUSH
29524: LD_INT 22
29526: PUSH
29527: LD_OWVAR 2
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 2
29538: PUSH
29539: LD_INT 34
29541: PUSH
29542: LD_INT 7
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 34
29551: PUSH
29552: LD_INT 45
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 34
29561: PUSH
29562: LD_INT 28
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 34
29571: PUSH
29572: LD_INT 47
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PPUSH
29590: CALL_OW 69
29594: ST_TO_ADDR
// if not tmp then
29595: LD_VAR 0 2
29599: NOT
29600: IFFALSE 29604
// exit ;
29602: GO 29633
// for i in tmp do
29604: LD_ADDR_VAR 0 1
29608: PUSH
29609: LD_VAR 0 2
29613: PUSH
29614: FOR_IN
29615: IFFALSE 29631
// begin SetLives ( i , 0 ) ;
29617: LD_VAR 0 1
29621: PPUSH
29622: LD_INT 0
29624: PPUSH
29625: CALL_OW 234
// end ;
29629: GO 29614
29631: POP
29632: POP
// end ;
29633: PPOPN 2
29635: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
29636: LD_EXP 65
29640: PUSH
29641: LD_EXP 71
29645: AND
29646: IFFALSE 29730
29648: GO 29650
29650: DISABLE
29651: LD_INT 0
29653: PPUSH
29654: PPUSH
// begin enable ;
29655: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
29656: LD_ADDR_VAR 0 2
29660: PUSH
29661: LD_INT 22
29663: PUSH
29664: LD_OWVAR 2
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 32
29675: PUSH
29676: LD_INT 3
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PPUSH
29687: CALL_OW 69
29691: ST_TO_ADDR
// if not tmp then
29692: LD_VAR 0 2
29696: NOT
29697: IFFALSE 29701
// exit ;
29699: GO 29730
// for i in tmp do
29701: LD_ADDR_VAR 0 1
29705: PUSH
29706: LD_VAR 0 2
29710: PUSH
29711: FOR_IN
29712: IFFALSE 29728
// begin SetLives ( i , 0 ) ;
29714: LD_VAR 0 1
29718: PPUSH
29719: LD_INT 0
29721: PPUSH
29722: CALL_OW 234
// end ;
29726: GO 29711
29728: POP
29729: POP
// end ;
29730: PPOPN 2
29732: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
29733: LD_EXP 65
29737: PUSH
29738: LD_EXP 68
29742: AND
29743: IFFALSE 29836
29745: GO 29747
29747: DISABLE
29748: LD_INT 0
29750: PPUSH
// begin enable ;
29751: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
29752: LD_ADDR_VAR 0 1
29756: PUSH
29757: LD_INT 22
29759: PUSH
29760: LD_OWVAR 2
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 2
29771: PUSH
29772: LD_INT 25
29774: PUSH
29775: LD_INT 5
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 25
29784: PUSH
29785: LD_INT 9
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 25
29794: PUSH
29795: LD_INT 8
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PPUSH
29812: CALL_OW 69
29816: PUSH
29817: FOR_IN
29818: IFFALSE 29834
// begin SetClass ( i , 1 ) ;
29820: LD_VAR 0 1
29824: PPUSH
29825: LD_INT 1
29827: PPUSH
29828: CALL_OW 336
// end ;
29832: GO 29817
29834: POP
29835: POP
// end ;
29836: PPOPN 1
29838: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
29839: LD_EXP 65
29843: PUSH
29844: LD_EXP 69
29848: AND
29849: PUSH
29850: LD_OWVAR 65
29854: PUSH
29855: LD_INT 7
29857: LESS
29858: AND
29859: IFFALSE 29873
29861: GO 29863
29863: DISABLE
// begin enable ;
29864: ENABLE
// game_speed := 7 ;
29865: LD_ADDR_OWVAR 65
29869: PUSH
29870: LD_INT 7
29872: ST_TO_ADDR
// end ;
29873: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
29874: LD_EXP 65
29878: PUSH
29879: LD_EXP 72
29883: AND
29884: IFFALSE 30086
29886: GO 29888
29888: DISABLE
29889: LD_INT 0
29891: PPUSH
29892: PPUSH
29893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29894: LD_ADDR_VAR 0 3
29898: PUSH
29899: LD_INT 81
29901: PUSH
29902: LD_OWVAR 2
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 21
29913: PUSH
29914: LD_INT 1
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PPUSH
29925: CALL_OW 69
29929: ST_TO_ADDR
// if not tmp then
29930: LD_VAR 0 3
29934: NOT
29935: IFFALSE 29939
// exit ;
29937: GO 30086
// if tmp > 5 then
29939: LD_VAR 0 3
29943: PUSH
29944: LD_INT 5
29946: GREATER
29947: IFFALSE 29959
// k := 5 else
29949: LD_ADDR_VAR 0 2
29953: PUSH
29954: LD_INT 5
29956: ST_TO_ADDR
29957: GO 29969
// k := tmp ;
29959: LD_ADDR_VAR 0 2
29963: PUSH
29964: LD_VAR 0 3
29968: ST_TO_ADDR
// for i := 1 to k do
29969: LD_ADDR_VAR 0 1
29973: PUSH
29974: DOUBLE
29975: LD_INT 1
29977: DEC
29978: ST_TO_ADDR
29979: LD_VAR 0 2
29983: PUSH
29984: FOR_TO
29985: IFFALSE 30084
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
29987: LD_VAR 0 3
29991: PUSH
29992: LD_VAR 0 1
29996: ARRAY
29997: PPUSH
29998: LD_VAR 0 1
30002: PUSH
30003: LD_INT 4
30005: MOD
30006: PUSH
30007: LD_INT 1
30009: PLUS
30010: PPUSH
30011: CALL_OW 259
30015: PUSH
30016: LD_INT 10
30018: LESS
30019: IFFALSE 30082
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
30021: LD_VAR 0 3
30025: PUSH
30026: LD_VAR 0 1
30030: ARRAY
30031: PPUSH
30032: LD_VAR 0 1
30036: PUSH
30037: LD_INT 4
30039: MOD
30040: PUSH
30041: LD_INT 1
30043: PLUS
30044: PPUSH
30045: LD_VAR 0 3
30049: PUSH
30050: LD_VAR 0 1
30054: ARRAY
30055: PPUSH
30056: LD_VAR 0 1
30060: PUSH
30061: LD_INT 4
30063: MOD
30064: PUSH
30065: LD_INT 1
30067: PLUS
30068: PPUSH
30069: CALL_OW 259
30073: PUSH
30074: LD_INT 1
30076: PLUS
30077: PPUSH
30078: CALL_OW 237
30082: GO 29984
30084: POP
30085: POP
// end ;
30086: PPOPN 3
30088: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
30089: LD_EXP 65
30093: PUSH
30094: LD_EXP 73
30098: AND
30099: IFFALSE 30119
30101: GO 30103
30103: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
30104: LD_INT 4
30106: PPUSH
30107: LD_OWVAR 2
30111: PPUSH
30112: LD_INT 0
30114: PPUSH
30115: CALL_OW 324
30119: END
// every 0 0$1 trigger StreamModeActive and sShovel do
30120: LD_EXP 65
30124: PUSH
30125: LD_EXP 102
30129: AND
30130: IFFALSE 30150
30132: GO 30134
30134: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
30135: LD_INT 19
30137: PPUSH
30138: LD_OWVAR 2
30142: PPUSH
30143: LD_INT 0
30145: PPUSH
30146: CALL_OW 324
30150: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
30151: LD_EXP 65
30155: PUSH
30156: LD_EXP 74
30160: AND
30161: IFFALSE 30263
30163: GO 30165
30165: DISABLE
30166: LD_INT 0
30168: PPUSH
30169: PPUSH
// begin enable ;
30170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
30171: LD_ADDR_VAR 0 2
30175: PUSH
30176: LD_INT 22
30178: PUSH
30179: LD_OWVAR 2
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 2
30190: PUSH
30191: LD_INT 34
30193: PUSH
30194: LD_INT 11
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 34
30203: PUSH
30204: LD_INT 30
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: LIST
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PPUSH
30220: CALL_OW 69
30224: ST_TO_ADDR
// if not tmp then
30225: LD_VAR 0 2
30229: NOT
30230: IFFALSE 30234
// exit ;
30232: GO 30263
// for i in tmp do
30234: LD_ADDR_VAR 0 1
30238: PUSH
30239: LD_VAR 0 2
30243: PUSH
30244: FOR_IN
30245: IFFALSE 30261
// begin SetLives ( i , 0 ) ;
30247: LD_VAR 0 1
30251: PPUSH
30252: LD_INT 0
30254: PPUSH
30255: CALL_OW 234
// end ;
30259: GO 30244
30261: POP
30262: POP
// end ;
30263: PPOPN 2
30265: END
// every 0 0$1 trigger StreamModeActive and sBunker do
30266: LD_EXP 65
30270: PUSH
30271: LD_EXP 75
30275: AND
30276: IFFALSE 30296
30278: GO 30280
30280: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
30281: LD_INT 32
30283: PPUSH
30284: LD_OWVAR 2
30288: PPUSH
30289: LD_INT 0
30291: PPUSH
30292: CALL_OW 324
30296: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
30297: LD_EXP 65
30301: PUSH
30302: LD_EXP 76
30306: AND
30307: IFFALSE 30488
30309: GO 30311
30311: DISABLE
30312: LD_INT 0
30314: PPUSH
30315: PPUSH
30316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30317: LD_ADDR_VAR 0 2
30321: PUSH
30322: LD_INT 22
30324: PUSH
30325: LD_OWVAR 2
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 33
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PPUSH
30348: CALL_OW 69
30352: ST_TO_ADDR
// if not tmp then
30353: LD_VAR 0 2
30357: NOT
30358: IFFALSE 30362
// exit ;
30360: GO 30488
// side := 0 ;
30362: LD_ADDR_VAR 0 3
30366: PUSH
30367: LD_INT 0
30369: ST_TO_ADDR
// for i := 1 to 8 do
30370: LD_ADDR_VAR 0 1
30374: PUSH
30375: DOUBLE
30376: LD_INT 1
30378: DEC
30379: ST_TO_ADDR
30380: LD_INT 8
30382: PUSH
30383: FOR_TO
30384: IFFALSE 30432
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30386: LD_OWVAR 2
30390: PUSH
30391: LD_VAR 0 1
30395: NONEQUAL
30396: PUSH
30397: LD_OWVAR 2
30401: PPUSH
30402: LD_VAR 0 1
30406: PPUSH
30407: CALL_OW 81
30411: PUSH
30412: LD_INT 2
30414: EQUAL
30415: AND
30416: IFFALSE 30430
// begin side := i ;
30418: LD_ADDR_VAR 0 3
30422: PUSH
30423: LD_VAR 0 1
30427: ST_TO_ADDR
// break ;
30428: GO 30432
// end ;
30430: GO 30383
30432: POP
30433: POP
// if not side then
30434: LD_VAR 0 3
30438: NOT
30439: IFFALSE 30443
// exit ;
30441: GO 30488
// for i := 1 to tmp do
30443: LD_ADDR_VAR 0 1
30447: PUSH
30448: DOUBLE
30449: LD_INT 1
30451: DEC
30452: ST_TO_ADDR
30453: LD_VAR 0 2
30457: PUSH
30458: FOR_TO
30459: IFFALSE 30486
// if Prob ( 60 ) then
30461: LD_INT 60
30463: PPUSH
30464: CALL_OW 13
30468: IFFALSE 30484
// SetSide ( i , side ) ;
30470: LD_VAR 0 1
30474: PPUSH
30475: LD_VAR 0 3
30479: PPUSH
30480: CALL_OW 235
30484: GO 30458
30486: POP
30487: POP
// end ;
30488: PPOPN 3
30490: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
30491: LD_EXP 65
30495: PUSH
30496: LD_EXP 78
30500: AND
30501: IFFALSE 30620
30503: GO 30505
30505: DISABLE
30506: LD_INT 0
30508: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
30509: LD_ADDR_VAR 0 1
30513: PUSH
30514: LD_INT 22
30516: PUSH
30517: LD_OWVAR 2
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 21
30528: PUSH
30529: LD_INT 1
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 3
30538: PUSH
30539: LD_INT 23
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: LIST
30557: PPUSH
30558: CALL_OW 69
30562: PUSH
30563: FOR_IN
30564: IFFALSE 30618
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
30566: LD_VAR 0 1
30570: PPUSH
30571: CALL_OW 257
30575: PUSH
30576: LD_INT 1
30578: PUSH
30579: LD_INT 2
30581: PUSH
30582: LD_INT 3
30584: PUSH
30585: LD_INT 4
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: IN
30594: IFFALSE 30616
// SetClass ( un , rand ( 1 , 4 ) ) ;
30596: LD_VAR 0 1
30600: PPUSH
30601: LD_INT 1
30603: PPUSH
30604: LD_INT 4
30606: PPUSH
30607: CALL_OW 12
30611: PPUSH
30612: CALL_OW 336
30616: GO 30563
30618: POP
30619: POP
// end ;
30620: PPOPN 1
30622: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
30623: LD_EXP 65
30627: PUSH
30628: LD_EXP 77
30632: AND
30633: IFFALSE 30712
30635: GO 30637
30637: DISABLE
30638: LD_INT 0
30640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30641: LD_ADDR_VAR 0 1
30645: PUSH
30646: LD_INT 22
30648: PUSH
30649: LD_OWVAR 2
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 21
30660: PUSH
30661: LD_INT 3
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PPUSH
30672: CALL_OW 69
30676: ST_TO_ADDR
// if not tmp then
30677: LD_VAR 0 1
30681: NOT
30682: IFFALSE 30686
// exit ;
30684: GO 30712
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
30686: LD_VAR 0 1
30690: PUSH
30691: LD_INT 1
30693: PPUSH
30694: LD_VAR 0 1
30698: PPUSH
30699: CALL_OW 12
30703: ARRAY
30704: PPUSH
30705: LD_INT 100
30707: PPUSH
30708: CALL_OW 234
// end ;
30712: PPOPN 1
30714: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
30715: LD_EXP 65
30719: PUSH
30720: LD_EXP 79
30724: AND
30725: IFFALSE 30823
30727: GO 30729
30729: DISABLE
30730: LD_INT 0
30732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30733: LD_ADDR_VAR 0 1
30737: PUSH
30738: LD_INT 22
30740: PUSH
30741: LD_OWVAR 2
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 21
30752: PUSH
30753: LD_INT 1
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PPUSH
30764: CALL_OW 69
30768: ST_TO_ADDR
// if not tmp then
30769: LD_VAR 0 1
30773: NOT
30774: IFFALSE 30778
// exit ;
30776: GO 30823
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
30778: LD_VAR 0 1
30782: PUSH
30783: LD_INT 1
30785: PPUSH
30786: LD_VAR 0 1
30790: PPUSH
30791: CALL_OW 12
30795: ARRAY
30796: PPUSH
30797: LD_INT 1
30799: PPUSH
30800: LD_INT 4
30802: PPUSH
30803: CALL_OW 12
30807: PPUSH
30808: LD_INT 3000
30810: PPUSH
30811: LD_INT 9000
30813: PPUSH
30814: CALL_OW 12
30818: PPUSH
30819: CALL_OW 492
// end ;
30823: PPOPN 1
30825: END
// every 0 0$1 trigger StreamModeActive and sDepot do
30826: LD_EXP 65
30830: PUSH
30831: LD_EXP 80
30835: AND
30836: IFFALSE 30856
30838: GO 30840
30840: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
30841: LD_INT 1
30843: PPUSH
30844: LD_OWVAR 2
30848: PPUSH
30849: LD_INT 0
30851: PPUSH
30852: CALL_OW 324
30856: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
30857: LD_EXP 65
30861: PUSH
30862: LD_EXP 81
30866: AND
30867: IFFALSE 30950
30869: GO 30871
30871: DISABLE
30872: LD_INT 0
30874: PPUSH
30875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30876: LD_ADDR_VAR 0 2
30880: PUSH
30881: LD_INT 22
30883: PUSH
30884: LD_OWVAR 2
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 21
30895: PUSH
30896: LD_INT 3
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PPUSH
30907: CALL_OW 69
30911: ST_TO_ADDR
// if not tmp then
30912: LD_VAR 0 2
30916: NOT
30917: IFFALSE 30921
// exit ;
30919: GO 30950
// for i in tmp do
30921: LD_ADDR_VAR 0 1
30925: PUSH
30926: LD_VAR 0 2
30930: PUSH
30931: FOR_IN
30932: IFFALSE 30948
// SetBLevel ( i , 10 ) ;
30934: LD_VAR 0 1
30938: PPUSH
30939: LD_INT 10
30941: PPUSH
30942: CALL_OW 241
30946: GO 30931
30948: POP
30949: POP
// end ;
30950: PPOPN 2
30952: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
30953: LD_EXP 65
30957: PUSH
30958: LD_EXP 82
30962: AND
30963: IFFALSE 31074
30965: GO 30967
30967: DISABLE
30968: LD_INT 0
30970: PPUSH
30971: PPUSH
30972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30973: LD_ADDR_VAR 0 3
30977: PUSH
30978: LD_INT 22
30980: PUSH
30981: LD_OWVAR 2
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 25
30992: PUSH
30993: LD_INT 1
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PPUSH
31004: CALL_OW 69
31008: ST_TO_ADDR
// if not tmp then
31009: LD_VAR 0 3
31013: NOT
31014: IFFALSE 31018
// exit ;
31016: GO 31074
// un := tmp [ rand ( 1 , tmp ) ] ;
31018: LD_ADDR_VAR 0 2
31022: PUSH
31023: LD_VAR 0 3
31027: PUSH
31028: LD_INT 1
31030: PPUSH
31031: LD_VAR 0 3
31035: PPUSH
31036: CALL_OW 12
31040: ARRAY
31041: ST_TO_ADDR
// if Crawls ( un ) then
31042: LD_VAR 0 2
31046: PPUSH
31047: CALL_OW 318
31051: IFFALSE 31062
// ComWalk ( un ) ;
31053: LD_VAR 0 2
31057: PPUSH
31058: CALL_OW 138
// SetClass ( un , class_sniper ) ;
31062: LD_VAR 0 2
31066: PPUSH
31067: LD_INT 5
31069: PPUSH
31070: CALL_OW 336
// end ;
31074: PPOPN 3
31076: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
31077: LD_EXP 65
31081: PUSH
31082: LD_EXP 83
31086: AND
31087: PUSH
31088: LD_OWVAR 67
31092: PUSH
31093: LD_INT 3
31095: LESS
31096: AND
31097: IFFALSE 31116
31099: GO 31101
31101: DISABLE
// Difficulty := Difficulty + 1 ;
31102: LD_ADDR_OWVAR 67
31106: PUSH
31107: LD_OWVAR 67
31111: PUSH
31112: LD_INT 1
31114: PLUS
31115: ST_TO_ADDR
31116: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
31117: LD_EXP 65
31121: PUSH
31122: LD_EXP 84
31126: AND
31127: IFFALSE 31230
31129: GO 31131
31131: DISABLE
31132: LD_INT 0
31134: PPUSH
// begin for i := 1 to 5 do
31135: LD_ADDR_VAR 0 1
31139: PUSH
31140: DOUBLE
31141: LD_INT 1
31143: DEC
31144: ST_TO_ADDR
31145: LD_INT 5
31147: PUSH
31148: FOR_TO
31149: IFFALSE 31228
// begin uc_nation := nation_nature ;
31151: LD_ADDR_OWVAR 21
31155: PUSH
31156: LD_INT 0
31158: ST_TO_ADDR
// uc_side := 0 ;
31159: LD_ADDR_OWVAR 20
31163: PUSH
31164: LD_INT 0
31166: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31167: LD_ADDR_OWVAR 29
31171: PUSH
31172: LD_INT 12
31174: PUSH
31175: LD_INT 12
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: ST_TO_ADDR
// hc_agressivity := 20 ;
31182: LD_ADDR_OWVAR 35
31186: PUSH
31187: LD_INT 20
31189: ST_TO_ADDR
// hc_class := class_tiger ;
31190: LD_ADDR_OWVAR 28
31194: PUSH
31195: LD_INT 14
31197: ST_TO_ADDR
// hc_gallery :=  ;
31198: LD_ADDR_OWVAR 33
31202: PUSH
31203: LD_STRING 
31205: ST_TO_ADDR
// hc_name :=  ;
31206: LD_ADDR_OWVAR 26
31210: PUSH
31211: LD_STRING 
31213: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
31214: CALL_OW 44
31218: PPUSH
31219: LD_INT 0
31221: PPUSH
31222: CALL_OW 51
// end ;
31226: GO 31148
31228: POP
31229: POP
// end ;
31230: PPOPN 1
31232: END
// every 0 0$1 trigger StreamModeActive and sBomb do
31233: LD_EXP 65
31237: PUSH
31238: LD_EXP 85
31242: AND
31243: IFFALSE 31252
31245: GO 31247
31247: DISABLE
// StreamSibBomb ;
31248: CALL 31253 0 0
31252: END
// export function StreamSibBomb ; var i , x , y ; begin
31253: LD_INT 0
31255: PPUSH
31256: PPUSH
31257: PPUSH
31258: PPUSH
// result := false ;
31259: LD_ADDR_VAR 0 1
31263: PUSH
31264: LD_INT 0
31266: ST_TO_ADDR
// for i := 1 to 16 do
31267: LD_ADDR_VAR 0 2
31271: PUSH
31272: DOUBLE
31273: LD_INT 1
31275: DEC
31276: ST_TO_ADDR
31277: LD_INT 16
31279: PUSH
31280: FOR_TO
31281: IFFALSE 31480
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31283: LD_ADDR_VAR 0 3
31287: PUSH
31288: LD_INT 10
31290: PUSH
31291: LD_INT 20
31293: PUSH
31294: LD_INT 30
31296: PUSH
31297: LD_INT 40
31299: PUSH
31300: LD_INT 50
31302: PUSH
31303: LD_INT 60
31305: PUSH
31306: LD_INT 70
31308: PUSH
31309: LD_INT 80
31311: PUSH
31312: LD_INT 90
31314: PUSH
31315: LD_INT 100
31317: PUSH
31318: LD_INT 110
31320: PUSH
31321: LD_INT 120
31323: PUSH
31324: LD_INT 130
31326: PUSH
31327: LD_INT 140
31329: PUSH
31330: LD_INT 150
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 1
31352: PPUSH
31353: LD_INT 15
31355: PPUSH
31356: CALL_OW 12
31360: ARRAY
31361: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31362: LD_ADDR_VAR 0 4
31366: PUSH
31367: LD_INT 10
31369: PUSH
31370: LD_INT 20
31372: PUSH
31373: LD_INT 30
31375: PUSH
31376: LD_INT 40
31378: PUSH
31379: LD_INT 50
31381: PUSH
31382: LD_INT 60
31384: PUSH
31385: LD_INT 70
31387: PUSH
31388: LD_INT 80
31390: PUSH
31391: LD_INT 90
31393: PUSH
31394: LD_INT 100
31396: PUSH
31397: LD_INT 110
31399: PUSH
31400: LD_INT 120
31402: PUSH
31403: LD_INT 130
31405: PUSH
31406: LD_INT 140
31408: PUSH
31409: LD_INT 150
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: PPUSH
31432: LD_INT 15
31434: PPUSH
31435: CALL_OW 12
31439: ARRAY
31440: ST_TO_ADDR
// if ValidHex ( x , y ) then
31441: LD_VAR 0 3
31445: PPUSH
31446: LD_VAR 0 4
31450: PPUSH
31451: CALL_OW 488
31455: IFFALSE 31478
// begin result := [ x , y ] ;
31457: LD_ADDR_VAR 0 1
31461: PUSH
31462: LD_VAR 0 3
31466: PUSH
31467: LD_VAR 0 4
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: ST_TO_ADDR
// break ;
31476: GO 31480
// end ; end ;
31478: GO 31280
31480: POP
31481: POP
// if result then
31482: LD_VAR 0 1
31486: IFFALSE 31546
// begin ToLua ( playSibBomb() ) ;
31488: LD_STRING playSibBomb()
31490: PPUSH
31491: CALL_OW 559
// wait ( 0 0$14 ) ;
31495: LD_INT 490
31497: PPUSH
31498: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
31502: LD_VAR 0 1
31506: PUSH
31507: LD_INT 1
31509: ARRAY
31510: PPUSH
31511: LD_VAR 0 1
31515: PUSH
31516: LD_INT 2
31518: ARRAY
31519: PPUSH
31520: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
31524: LD_VAR 0 1
31528: PUSH
31529: LD_INT 1
31531: ARRAY
31532: PPUSH
31533: LD_VAR 0 1
31537: PUSH
31538: LD_INT 2
31540: ARRAY
31541: PPUSH
31542: CALL_OW 429
// end ; end ;
31546: LD_VAR 0 1
31550: RET
// every 0 0$1 trigger StreamModeActive and sReset do
31551: LD_EXP 65
31555: PUSH
31556: LD_EXP 87
31560: AND
31561: IFFALSE 31573
31563: GO 31565
31565: DISABLE
// YouLost (  ) ;
31566: LD_STRING 
31568: PPUSH
31569: CALL_OW 104
31573: END
// every 0 0$1 trigger StreamModeActive and sFog do
31574: LD_EXP 65
31578: PUSH
31579: LD_EXP 86
31583: AND
31584: IFFALSE 31598
31586: GO 31588
31588: DISABLE
// FogOff ( your_side ) ;
31589: LD_OWVAR 2
31593: PPUSH
31594: CALL_OW 344
31598: END
// every 0 0$1 trigger StreamModeActive and sSun do
31599: LD_EXP 65
31603: PUSH
31604: LD_EXP 88
31608: AND
31609: IFFALSE 31637
31611: GO 31613
31613: DISABLE
// begin solar_recharge_percent := 0 ;
31614: LD_ADDR_OWVAR 79
31618: PUSH
31619: LD_INT 0
31621: ST_TO_ADDR
// wait ( 5 5$00 ) ;
31622: LD_INT 10500
31624: PPUSH
31625: CALL_OW 67
// solar_recharge_percent := 100 ;
31629: LD_ADDR_OWVAR 79
31633: PUSH
31634: LD_INT 100
31636: ST_TO_ADDR
// end ;
31637: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
31638: LD_EXP 65
31642: PUSH
31643: LD_EXP 89
31647: AND
31648: IFFALSE 31887
31650: GO 31652
31652: DISABLE
31653: LD_INT 0
31655: PPUSH
31656: PPUSH
31657: PPUSH
// begin tmp := [ ] ;
31658: LD_ADDR_VAR 0 3
31662: PUSH
31663: EMPTY
31664: ST_TO_ADDR
// for i := 1 to 6 do
31665: LD_ADDR_VAR 0 1
31669: PUSH
31670: DOUBLE
31671: LD_INT 1
31673: DEC
31674: ST_TO_ADDR
31675: LD_INT 6
31677: PUSH
31678: FOR_TO
31679: IFFALSE 31784
// begin uc_nation := nation_nature ;
31681: LD_ADDR_OWVAR 21
31685: PUSH
31686: LD_INT 0
31688: ST_TO_ADDR
// uc_side := 0 ;
31689: LD_ADDR_OWVAR 20
31693: PUSH
31694: LD_INT 0
31696: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31697: LD_ADDR_OWVAR 29
31701: PUSH
31702: LD_INT 12
31704: PUSH
31705: LD_INT 12
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: ST_TO_ADDR
// hc_agressivity := 20 ;
31712: LD_ADDR_OWVAR 35
31716: PUSH
31717: LD_INT 20
31719: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
31720: LD_ADDR_OWVAR 28
31724: PUSH
31725: LD_INT 17
31727: ST_TO_ADDR
// hc_gallery :=  ;
31728: LD_ADDR_OWVAR 33
31732: PUSH
31733: LD_STRING 
31735: ST_TO_ADDR
// hc_name :=  ;
31736: LD_ADDR_OWVAR 26
31740: PUSH
31741: LD_STRING 
31743: ST_TO_ADDR
// un := CreateHuman ;
31744: LD_ADDR_VAR 0 2
31748: PUSH
31749: CALL_OW 44
31753: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
31754: LD_VAR 0 2
31758: PPUSH
31759: LD_INT 1
31761: PPUSH
31762: CALL_OW 51
// tmp := tmp ^ un ;
31766: LD_ADDR_VAR 0 3
31770: PUSH
31771: LD_VAR 0 3
31775: PUSH
31776: LD_VAR 0 2
31780: ADD
31781: ST_TO_ADDR
// end ;
31782: GO 31678
31784: POP
31785: POP
// repeat wait ( 0 0$1 ) ;
31786: LD_INT 35
31788: PPUSH
31789: CALL_OW 67
// for un in tmp do
31793: LD_ADDR_VAR 0 2
31797: PUSH
31798: LD_VAR 0 3
31802: PUSH
31803: FOR_IN
31804: IFFALSE 31878
// begin if IsDead ( un ) then
31806: LD_VAR 0 2
31810: PPUSH
31811: CALL_OW 301
31815: IFFALSE 31835
// begin tmp := tmp diff un ;
31817: LD_ADDR_VAR 0 3
31821: PUSH
31822: LD_VAR 0 3
31826: PUSH
31827: LD_VAR 0 2
31831: DIFF
31832: ST_TO_ADDR
// continue ;
31833: GO 31803
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
31835: LD_VAR 0 2
31839: PPUSH
31840: LD_INT 3
31842: PUSH
31843: LD_INT 22
31845: PUSH
31846: LD_INT 0
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PPUSH
31857: CALL_OW 69
31861: PPUSH
31862: LD_VAR 0 2
31866: PPUSH
31867: CALL_OW 74
31871: PPUSH
31872: CALL_OW 115
// end ;
31876: GO 31803
31878: POP
31879: POP
// until not tmp ;
31880: LD_VAR 0 3
31884: NOT
31885: IFFALSE 31786
// end ;
31887: PPOPN 3
31889: END
// every 0 0$1 trigger StreamModeActive and sTroll do
31890: LD_EXP 65
31894: PUSH
31895: LD_EXP 90
31899: AND
31900: IFFALSE 31954
31902: GO 31904
31904: DISABLE
// begin ToLua ( displayTroll(); ) ;
31905: LD_STRING displayTroll();
31907: PPUSH
31908: CALL_OW 559
// wait ( 3 3$00 ) ;
31912: LD_INT 6300
31914: PPUSH
31915: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31919: LD_STRING hideTroll();
31921: PPUSH
31922: CALL_OW 559
// wait ( 1 1$00 ) ;
31926: LD_INT 2100
31928: PPUSH
31929: CALL_OW 67
// ToLua ( displayTroll(); ) ;
31933: LD_STRING displayTroll();
31935: PPUSH
31936: CALL_OW 559
// wait ( 1 1$00 ) ;
31940: LD_INT 2100
31942: PPUSH
31943: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31947: LD_STRING hideTroll();
31949: PPUSH
31950: CALL_OW 559
// end ;
31954: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
31955: LD_EXP 65
31959: PUSH
31960: LD_EXP 91
31964: AND
31965: IFFALSE 32028
31967: GO 31969
31969: DISABLE
31970: LD_INT 0
31972: PPUSH
// begin p := 0 ;
31973: LD_ADDR_VAR 0 1
31977: PUSH
31978: LD_INT 0
31980: ST_TO_ADDR
// repeat game_speed := 1 ;
31981: LD_ADDR_OWVAR 65
31985: PUSH
31986: LD_INT 1
31988: ST_TO_ADDR
// wait ( 0 0$1 ) ;
31989: LD_INT 35
31991: PPUSH
31992: CALL_OW 67
// p := p + 1 ;
31996: LD_ADDR_VAR 0 1
32000: PUSH
32001: LD_VAR 0 1
32005: PUSH
32006: LD_INT 1
32008: PLUS
32009: ST_TO_ADDR
// until p >= 60 ;
32010: LD_VAR 0 1
32014: PUSH
32015: LD_INT 60
32017: GREATEREQUAL
32018: IFFALSE 31981
// game_speed := 4 ;
32020: LD_ADDR_OWVAR 65
32024: PUSH
32025: LD_INT 4
32027: ST_TO_ADDR
// end ;
32028: PPOPN 1
32030: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
32031: LD_EXP 65
32035: PUSH
32036: LD_EXP 92
32040: AND
32041: IFFALSE 32187
32043: GO 32045
32045: DISABLE
32046: LD_INT 0
32048: PPUSH
32049: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32050: LD_ADDR_VAR 0 1
32054: PUSH
32055: LD_INT 22
32057: PUSH
32058: LD_OWVAR 2
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: LD_INT 30
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 30
32082: PUSH
32083: LD_INT 1
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: LIST
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PPUSH
32099: CALL_OW 69
32103: ST_TO_ADDR
// if not depot then
32104: LD_VAR 0 1
32108: NOT
32109: IFFALSE 32113
// exit ;
32111: GO 32187
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
32113: LD_ADDR_VAR 0 2
32117: PUSH
32118: LD_VAR 0 1
32122: PUSH
32123: LD_INT 1
32125: PPUSH
32126: LD_VAR 0 1
32130: PPUSH
32131: CALL_OW 12
32135: ARRAY
32136: PPUSH
32137: CALL_OW 274
32141: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
32142: LD_VAR 0 2
32146: PPUSH
32147: LD_INT 1
32149: PPUSH
32150: LD_INT 0
32152: PPUSH
32153: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
32157: LD_VAR 0 2
32161: PPUSH
32162: LD_INT 2
32164: PPUSH
32165: LD_INT 0
32167: PPUSH
32168: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
32172: LD_VAR 0 2
32176: PPUSH
32177: LD_INT 3
32179: PPUSH
32180: LD_INT 0
32182: PPUSH
32183: CALL_OW 277
// end ;
32187: PPOPN 2
32189: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
32190: LD_EXP 65
32194: PUSH
32195: LD_EXP 93
32199: AND
32200: IFFALSE 32297
32202: GO 32204
32204: DISABLE
32205: LD_INT 0
32207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32208: LD_ADDR_VAR 0 1
32212: PUSH
32213: LD_INT 22
32215: PUSH
32216: LD_OWVAR 2
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 21
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 3
32237: PUSH
32238: LD_INT 23
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: LIST
32256: PPUSH
32257: CALL_OW 69
32261: ST_TO_ADDR
// if not tmp then
32262: LD_VAR 0 1
32266: NOT
32267: IFFALSE 32271
// exit ;
32269: GO 32297
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
32271: LD_VAR 0 1
32275: PUSH
32276: LD_INT 1
32278: PPUSH
32279: LD_VAR 0 1
32283: PPUSH
32284: CALL_OW 12
32288: ARRAY
32289: PPUSH
32290: LD_INT 200
32292: PPUSH
32293: CALL_OW 234
// end ;
32297: PPOPN 1
32299: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
32300: LD_EXP 65
32304: PUSH
32305: LD_EXP 94
32309: AND
32310: IFFALSE 32389
32312: GO 32314
32314: DISABLE
32315: LD_INT 0
32317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32318: LD_ADDR_VAR 0 1
32322: PUSH
32323: LD_INT 22
32325: PUSH
32326: LD_OWVAR 2
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 21
32337: PUSH
32338: LD_INT 2
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PPUSH
32349: CALL_OW 69
32353: ST_TO_ADDR
// if not tmp then
32354: LD_VAR 0 1
32358: NOT
32359: IFFALSE 32363
// exit ;
32361: GO 32389
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32363: LD_VAR 0 1
32367: PUSH
32368: LD_INT 1
32370: PPUSH
32371: LD_VAR 0 1
32375: PPUSH
32376: CALL_OW 12
32380: ARRAY
32381: PPUSH
32382: LD_INT 60
32384: PPUSH
32385: CALL_OW 234
// end ;
32389: PPOPN 1
32391: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32392: LD_EXP 65
32396: PUSH
32397: LD_EXP 95
32401: AND
32402: IFFALSE 32501
32404: GO 32406
32406: DISABLE
32407: LD_INT 0
32409: PPUSH
32410: PPUSH
// begin enable ;
32411: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
32412: LD_ADDR_VAR 0 1
32416: PUSH
32417: LD_INT 22
32419: PUSH
32420: LD_OWVAR 2
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 61
32431: PUSH
32432: EMPTY
32433: LIST
32434: PUSH
32435: LD_INT 33
32437: PUSH
32438: LD_INT 2
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: LIST
32449: PPUSH
32450: CALL_OW 69
32454: ST_TO_ADDR
// if not tmp then
32455: LD_VAR 0 1
32459: NOT
32460: IFFALSE 32464
// exit ;
32462: GO 32501
// for i in tmp do
32464: LD_ADDR_VAR 0 2
32468: PUSH
32469: LD_VAR 0 1
32473: PUSH
32474: FOR_IN
32475: IFFALSE 32499
// if IsControledBy ( i ) then
32477: LD_VAR 0 2
32481: PPUSH
32482: CALL_OW 312
32486: IFFALSE 32497
// ComUnlink ( i ) ;
32488: LD_VAR 0 2
32492: PPUSH
32493: CALL_OW 136
32497: GO 32474
32499: POP
32500: POP
// end ;
32501: PPOPN 2
32503: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
32504: LD_EXP 65
32508: PUSH
32509: LD_EXP 96
32513: AND
32514: IFFALSE 32654
32516: GO 32518
32518: DISABLE
32519: LD_INT 0
32521: PPUSH
32522: PPUSH
// begin ToLua ( displayPowell(); ) ;
32523: LD_STRING displayPowell();
32525: PPUSH
32526: CALL_OW 559
// uc_side := 0 ;
32530: LD_ADDR_OWVAR 20
32534: PUSH
32535: LD_INT 0
32537: ST_TO_ADDR
// uc_nation := 2 ;
32538: LD_ADDR_OWVAR 21
32542: PUSH
32543: LD_INT 2
32545: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
32546: LD_ADDR_OWVAR 37
32550: PUSH
32551: LD_INT 14
32553: ST_TO_ADDR
// vc_engine := engine_siberite ;
32554: LD_ADDR_OWVAR 39
32558: PUSH
32559: LD_INT 3
32561: ST_TO_ADDR
// vc_control := control_apeman ;
32562: LD_ADDR_OWVAR 38
32566: PUSH
32567: LD_INT 5
32569: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
32570: LD_ADDR_OWVAR 40
32574: PUSH
32575: LD_INT 29
32577: ST_TO_ADDR
// un := CreateVehicle ;
32578: LD_ADDR_VAR 0 2
32582: PUSH
32583: CALL_OW 45
32587: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32588: LD_VAR 0 2
32592: PPUSH
32593: LD_INT 1
32595: PPUSH
32596: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32600: LD_INT 35
32602: PPUSH
32603: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32607: LD_VAR 0 2
32611: PPUSH
32612: LD_INT 22
32614: PUSH
32615: LD_OWVAR 2
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PPUSH
32624: CALL_OW 69
32628: PPUSH
32629: LD_VAR 0 2
32633: PPUSH
32634: CALL_OW 74
32638: PPUSH
32639: CALL_OW 115
// until IsDead ( un ) ;
32643: LD_VAR 0 2
32647: PPUSH
32648: CALL_OW 301
32652: IFFALSE 32600
// end ;
32654: PPOPN 2
32656: END
// every 0 0$1 trigger StreamModeActive and sStu do
32657: LD_EXP 65
32661: PUSH
32662: LD_EXP 104
32666: AND
32667: IFFALSE 32683
32669: GO 32671
32671: DISABLE
// begin ToLua ( displayStucuk(); ) ;
32672: LD_STRING displayStucuk();
32674: PPUSH
32675: CALL_OW 559
// ResetFog ;
32679: CALL_OW 335
// end ;
32683: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
32684: LD_EXP 65
32688: PUSH
32689: LD_EXP 97
32693: AND
32694: IFFALSE 32835
32696: GO 32698
32698: DISABLE
32699: LD_INT 0
32701: PPUSH
32702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32703: LD_ADDR_VAR 0 2
32707: PUSH
32708: LD_INT 22
32710: PUSH
32711: LD_OWVAR 2
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 21
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PPUSH
32734: CALL_OW 69
32738: ST_TO_ADDR
// if not tmp then
32739: LD_VAR 0 2
32743: NOT
32744: IFFALSE 32748
// exit ;
32746: GO 32835
// un := tmp [ rand ( 1 , tmp ) ] ;
32748: LD_ADDR_VAR 0 1
32752: PUSH
32753: LD_VAR 0 2
32757: PUSH
32758: LD_INT 1
32760: PPUSH
32761: LD_VAR 0 2
32765: PPUSH
32766: CALL_OW 12
32770: ARRAY
32771: ST_TO_ADDR
// SetSide ( un , 0 ) ;
32772: LD_VAR 0 1
32776: PPUSH
32777: LD_INT 0
32779: PPUSH
32780: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
32784: LD_VAR 0 1
32788: PPUSH
32789: LD_OWVAR 3
32793: PUSH
32794: LD_VAR 0 1
32798: DIFF
32799: PPUSH
32800: LD_VAR 0 1
32804: PPUSH
32805: CALL_OW 74
32809: PPUSH
32810: CALL_OW 115
// wait ( 0 0$20 ) ;
32814: LD_INT 700
32816: PPUSH
32817: CALL_OW 67
// SetSide ( un , your_side ) ;
32821: LD_VAR 0 1
32825: PPUSH
32826: LD_OWVAR 2
32830: PPUSH
32831: CALL_OW 235
// end ;
32835: PPOPN 2
32837: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
32838: LD_EXP 65
32842: PUSH
32843: LD_EXP 98
32847: AND
32848: IFFALSE 32954
32850: GO 32852
32852: DISABLE
32853: LD_INT 0
32855: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32856: LD_ADDR_VAR 0 1
32860: PUSH
32861: LD_INT 22
32863: PUSH
32864: LD_OWVAR 2
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 2
32875: PUSH
32876: LD_INT 30
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 30
32888: PUSH
32889: LD_INT 1
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: LIST
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PPUSH
32905: CALL_OW 69
32909: ST_TO_ADDR
// if not depot then
32910: LD_VAR 0 1
32914: NOT
32915: IFFALSE 32919
// exit ;
32917: GO 32954
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
32919: LD_VAR 0 1
32923: PUSH
32924: LD_INT 1
32926: ARRAY
32927: PPUSH
32928: CALL_OW 250
32932: PPUSH
32933: LD_VAR 0 1
32937: PUSH
32938: LD_INT 1
32940: ARRAY
32941: PPUSH
32942: CALL_OW 251
32946: PPUSH
32947: LD_INT 70
32949: PPUSH
32950: CALL_OW 495
// end ;
32954: PPOPN 1
32956: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
32957: LD_EXP 65
32961: PUSH
32962: LD_EXP 99
32966: AND
32967: IFFALSE 33178
32969: GO 32971
32971: DISABLE
32972: LD_INT 0
32974: PPUSH
32975: PPUSH
32976: PPUSH
32977: PPUSH
32978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32979: LD_ADDR_VAR 0 5
32983: PUSH
32984: LD_INT 22
32986: PUSH
32987: LD_OWVAR 2
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 21
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PPUSH
33010: CALL_OW 69
33014: ST_TO_ADDR
// if not tmp then
33015: LD_VAR 0 5
33019: NOT
33020: IFFALSE 33024
// exit ;
33022: GO 33178
// for i in tmp do
33024: LD_ADDR_VAR 0 1
33028: PUSH
33029: LD_VAR 0 5
33033: PUSH
33034: FOR_IN
33035: IFFALSE 33176
// begin d := rand ( 0 , 5 ) ;
33037: LD_ADDR_VAR 0 4
33041: PUSH
33042: LD_INT 0
33044: PPUSH
33045: LD_INT 5
33047: PPUSH
33048: CALL_OW 12
33052: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
33053: LD_ADDR_VAR 0 2
33057: PUSH
33058: LD_VAR 0 1
33062: PPUSH
33063: CALL_OW 250
33067: PPUSH
33068: LD_VAR 0 4
33072: PPUSH
33073: LD_INT 3
33075: PPUSH
33076: LD_INT 12
33078: PPUSH
33079: CALL_OW 12
33083: PPUSH
33084: CALL_OW 272
33088: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
33089: LD_ADDR_VAR 0 3
33093: PUSH
33094: LD_VAR 0 1
33098: PPUSH
33099: CALL_OW 251
33103: PPUSH
33104: LD_VAR 0 4
33108: PPUSH
33109: LD_INT 3
33111: PPUSH
33112: LD_INT 12
33114: PPUSH
33115: CALL_OW 12
33119: PPUSH
33120: CALL_OW 273
33124: ST_TO_ADDR
// if ValidHex ( x , y ) then
33125: LD_VAR 0 2
33129: PPUSH
33130: LD_VAR 0 3
33134: PPUSH
33135: CALL_OW 488
33139: IFFALSE 33174
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
33141: LD_VAR 0 1
33145: PPUSH
33146: LD_VAR 0 2
33150: PPUSH
33151: LD_VAR 0 3
33155: PPUSH
33156: LD_INT 3
33158: PPUSH
33159: LD_INT 6
33161: PPUSH
33162: CALL_OW 12
33166: PPUSH
33167: LD_INT 1
33169: PPUSH
33170: CALL_OW 483
// end ;
33174: GO 33034
33176: POP
33177: POP
// end ;
33178: PPOPN 5
33180: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
33181: LD_EXP 65
33185: PUSH
33186: LD_EXP 100
33190: AND
33191: IFFALSE 33285
33193: GO 33195
33195: DISABLE
33196: LD_INT 0
33198: PPUSH
33199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
33200: LD_ADDR_VAR 0 2
33204: PUSH
33205: LD_INT 22
33207: PUSH
33208: LD_OWVAR 2
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 32
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 21
33229: PUSH
33230: LD_INT 2
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: PPUSH
33242: CALL_OW 69
33246: ST_TO_ADDR
// if not tmp then
33247: LD_VAR 0 2
33251: NOT
33252: IFFALSE 33256
// exit ;
33254: GO 33285
// for i in tmp do
33256: LD_ADDR_VAR 0 1
33260: PUSH
33261: LD_VAR 0 2
33265: PUSH
33266: FOR_IN
33267: IFFALSE 33283
// SetFuel ( i , 0 ) ;
33269: LD_VAR 0 1
33273: PPUSH
33274: LD_INT 0
33276: PPUSH
33277: CALL_OW 240
33281: GO 33266
33283: POP
33284: POP
// end ;
33285: PPOPN 2
33287: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
33288: LD_EXP 65
33292: PUSH
33293: LD_EXP 101
33297: AND
33298: IFFALSE 33364
33300: GO 33302
33302: DISABLE
33303: LD_INT 0
33305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33306: LD_ADDR_VAR 0 1
33310: PUSH
33311: LD_INT 22
33313: PUSH
33314: LD_OWVAR 2
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 30
33325: PUSH
33326: LD_INT 29
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PPUSH
33337: CALL_OW 69
33341: ST_TO_ADDR
// if not tmp then
33342: LD_VAR 0 1
33346: NOT
33347: IFFALSE 33351
// exit ;
33349: GO 33364
// DestroyUnit ( tmp [ 1 ] ) ;
33351: LD_VAR 0 1
33355: PUSH
33356: LD_INT 1
33358: ARRAY
33359: PPUSH
33360: CALL_OW 65
// end ;
33364: PPOPN 1
33366: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33367: LD_EXP 65
33371: PUSH
33372: LD_EXP 103
33376: AND
33377: IFFALSE 33506
33379: GO 33381
33381: DISABLE
33382: LD_INT 0
33384: PPUSH
// begin uc_side := 0 ;
33385: LD_ADDR_OWVAR 20
33389: PUSH
33390: LD_INT 0
33392: ST_TO_ADDR
// uc_nation := nation_arabian ;
33393: LD_ADDR_OWVAR 21
33397: PUSH
33398: LD_INT 2
33400: ST_TO_ADDR
// hc_gallery :=  ;
33401: LD_ADDR_OWVAR 33
33405: PUSH
33406: LD_STRING 
33408: ST_TO_ADDR
// hc_name :=  ;
33409: LD_ADDR_OWVAR 26
33413: PUSH
33414: LD_STRING 
33416: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
33417: LD_INT 1
33419: PPUSH
33420: LD_INT 11
33422: PPUSH
33423: LD_INT 10
33425: PPUSH
33426: CALL_OW 380
// un := CreateHuman ;
33430: LD_ADDR_VAR 0 1
33434: PUSH
33435: CALL_OW 44
33439: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33440: LD_VAR 0 1
33444: PPUSH
33445: LD_INT 1
33447: PPUSH
33448: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33452: LD_INT 35
33454: PPUSH
33455: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33459: LD_VAR 0 1
33463: PPUSH
33464: LD_INT 22
33466: PUSH
33467: LD_OWVAR 2
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PPUSH
33476: CALL_OW 69
33480: PPUSH
33481: LD_VAR 0 1
33485: PPUSH
33486: CALL_OW 74
33490: PPUSH
33491: CALL_OW 115
// until IsDead ( un ) ;
33495: LD_VAR 0 1
33499: PPUSH
33500: CALL_OW 301
33504: IFFALSE 33452
// end ;
33506: PPOPN 1
33508: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
33509: LD_EXP 65
33513: PUSH
33514: LD_EXP 105
33518: AND
33519: IFFALSE 33531
33521: GO 33523
33523: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
33524: LD_STRING earthquake(getX(game), 0, 32)
33526: PPUSH
33527: CALL_OW 559
33531: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
33532: LD_EXP 65
33536: PUSH
33537: LD_EXP 106
33541: AND
33542: IFFALSE 33633
33544: GO 33546
33546: DISABLE
33547: LD_INT 0
33549: PPUSH
// begin enable ;
33550: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
33551: LD_ADDR_VAR 0 1
33555: PUSH
33556: LD_INT 22
33558: PUSH
33559: LD_OWVAR 2
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 21
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 33
33580: PUSH
33581: LD_INT 3
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: LIST
33592: PPUSH
33593: CALL_OW 69
33597: ST_TO_ADDR
// if not tmp then
33598: LD_VAR 0 1
33602: NOT
33603: IFFALSE 33607
// exit ;
33605: GO 33633
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33607: LD_VAR 0 1
33611: PUSH
33612: LD_INT 1
33614: PPUSH
33615: LD_VAR 0 1
33619: PPUSH
33620: CALL_OW 12
33624: ARRAY
33625: PPUSH
33626: LD_INT 1
33628: PPUSH
33629: CALL_OW 234
// end ;
33633: PPOPN 1
33635: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
33636: LD_EXP 65
33640: PUSH
33641: LD_EXP 107
33645: AND
33646: IFFALSE 33787
33648: GO 33650
33650: DISABLE
33651: LD_INT 0
33653: PPUSH
33654: PPUSH
33655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33656: LD_ADDR_VAR 0 3
33660: PUSH
33661: LD_INT 22
33663: PUSH
33664: LD_OWVAR 2
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 25
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PPUSH
33687: CALL_OW 69
33691: ST_TO_ADDR
// if not tmp then
33692: LD_VAR 0 3
33696: NOT
33697: IFFALSE 33701
// exit ;
33699: GO 33787
// un := tmp [ rand ( 1 , tmp ) ] ;
33701: LD_ADDR_VAR 0 2
33705: PUSH
33706: LD_VAR 0 3
33710: PUSH
33711: LD_INT 1
33713: PPUSH
33714: LD_VAR 0 3
33718: PPUSH
33719: CALL_OW 12
33723: ARRAY
33724: ST_TO_ADDR
// if Crawls ( un ) then
33725: LD_VAR 0 2
33729: PPUSH
33730: CALL_OW 318
33734: IFFALSE 33745
// ComWalk ( un ) ;
33736: LD_VAR 0 2
33740: PPUSH
33741: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
33745: LD_VAR 0 2
33749: PPUSH
33750: LD_INT 9
33752: PPUSH
33753: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
33757: LD_INT 28
33759: PPUSH
33760: LD_OWVAR 2
33764: PPUSH
33765: LD_INT 2
33767: PPUSH
33768: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
33772: LD_INT 29
33774: PPUSH
33775: LD_OWVAR 2
33779: PPUSH
33780: LD_INT 2
33782: PPUSH
33783: CALL_OW 322
// end ;
33787: PPOPN 3
33789: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
33790: LD_EXP 65
33794: PUSH
33795: LD_EXP 108
33799: AND
33800: IFFALSE 33911
33802: GO 33804
33804: DISABLE
33805: LD_INT 0
33807: PPUSH
33808: PPUSH
33809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33810: LD_ADDR_VAR 0 3
33814: PUSH
33815: LD_INT 22
33817: PUSH
33818: LD_OWVAR 2
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 25
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PPUSH
33841: CALL_OW 69
33845: ST_TO_ADDR
// if not tmp then
33846: LD_VAR 0 3
33850: NOT
33851: IFFALSE 33855
// exit ;
33853: GO 33911
// un := tmp [ rand ( 1 , tmp ) ] ;
33855: LD_ADDR_VAR 0 2
33859: PUSH
33860: LD_VAR 0 3
33864: PUSH
33865: LD_INT 1
33867: PPUSH
33868: LD_VAR 0 3
33872: PPUSH
33873: CALL_OW 12
33877: ARRAY
33878: ST_TO_ADDR
// if Crawls ( un ) then
33879: LD_VAR 0 2
33883: PPUSH
33884: CALL_OW 318
33888: IFFALSE 33899
// ComWalk ( un ) ;
33890: LD_VAR 0 2
33894: PPUSH
33895: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33899: LD_VAR 0 2
33903: PPUSH
33904: LD_INT 8
33906: PPUSH
33907: CALL_OW 336
// end ;
33911: PPOPN 3
33913: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
33914: LD_EXP 65
33918: PUSH
33919: LD_EXP 109
33923: AND
33924: IFFALSE 34068
33926: GO 33928
33928: DISABLE
33929: LD_INT 0
33931: PPUSH
33932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
33933: LD_ADDR_VAR 0 2
33937: PUSH
33938: LD_INT 22
33940: PUSH
33941: LD_OWVAR 2
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 21
33952: PUSH
33953: LD_INT 2
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 2
33962: PUSH
33963: LD_INT 34
33965: PUSH
33966: LD_INT 12
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 34
33975: PUSH
33976: LD_INT 51
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 34
33985: PUSH
33986: LD_INT 32
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: PPUSH
34004: CALL_OW 69
34008: ST_TO_ADDR
// if not tmp then
34009: LD_VAR 0 2
34013: NOT
34014: IFFALSE 34018
// exit ;
34016: GO 34068
// for i in tmp do
34018: LD_ADDR_VAR 0 1
34022: PUSH
34023: LD_VAR 0 2
34027: PUSH
34028: FOR_IN
34029: IFFALSE 34066
// if GetCargo ( i , mat_artifact ) = 0 then
34031: LD_VAR 0 1
34035: PPUSH
34036: LD_INT 4
34038: PPUSH
34039: CALL_OW 289
34043: PUSH
34044: LD_INT 0
34046: EQUAL
34047: IFFALSE 34064
// SetCargo ( i , mat_siberit , 100 ) ;
34049: LD_VAR 0 1
34053: PPUSH
34054: LD_INT 3
34056: PPUSH
34057: LD_INT 100
34059: PPUSH
34060: CALL_OW 290
34064: GO 34028
34066: POP
34067: POP
// end ;
34068: PPOPN 2
34070: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
34071: LD_EXP 65
34075: PUSH
34076: LD_EXP 110
34080: AND
34081: IFFALSE 34264
34083: GO 34085
34085: DISABLE
34086: LD_INT 0
34088: PPUSH
34089: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34090: LD_ADDR_VAR 0 2
34094: PUSH
34095: LD_INT 22
34097: PUSH
34098: LD_OWVAR 2
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PPUSH
34107: CALL_OW 69
34111: ST_TO_ADDR
// if not tmp then
34112: LD_VAR 0 2
34116: NOT
34117: IFFALSE 34121
// exit ;
34119: GO 34264
// for i := 1 to 2 do
34121: LD_ADDR_VAR 0 1
34125: PUSH
34126: DOUBLE
34127: LD_INT 1
34129: DEC
34130: ST_TO_ADDR
34131: LD_INT 2
34133: PUSH
34134: FOR_TO
34135: IFFALSE 34262
// begin uc_side := your_side ;
34137: LD_ADDR_OWVAR 20
34141: PUSH
34142: LD_OWVAR 2
34146: ST_TO_ADDR
// uc_nation := nation_american ;
34147: LD_ADDR_OWVAR 21
34151: PUSH
34152: LD_INT 1
34154: ST_TO_ADDR
// vc_chassis := us_morphling ;
34155: LD_ADDR_OWVAR 37
34159: PUSH
34160: LD_INT 5
34162: ST_TO_ADDR
// vc_engine := engine_siberite ;
34163: LD_ADDR_OWVAR 39
34167: PUSH
34168: LD_INT 3
34170: ST_TO_ADDR
// vc_control := control_computer ;
34171: LD_ADDR_OWVAR 38
34175: PUSH
34176: LD_INT 3
34178: ST_TO_ADDR
// vc_weapon := us_double_laser ;
34179: LD_ADDR_OWVAR 40
34183: PUSH
34184: LD_INT 10
34186: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
34187: LD_VAR 0 2
34191: PUSH
34192: LD_INT 1
34194: ARRAY
34195: PPUSH
34196: CALL_OW 310
34200: NOT
34201: IFFALSE 34248
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
34203: CALL_OW 45
34207: PPUSH
34208: LD_VAR 0 2
34212: PUSH
34213: LD_INT 1
34215: ARRAY
34216: PPUSH
34217: CALL_OW 250
34221: PPUSH
34222: LD_VAR 0 2
34226: PUSH
34227: LD_INT 1
34229: ARRAY
34230: PPUSH
34231: CALL_OW 251
34235: PPUSH
34236: LD_INT 12
34238: PPUSH
34239: LD_INT 1
34241: PPUSH
34242: CALL_OW 50
34246: GO 34260
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
34248: CALL_OW 45
34252: PPUSH
34253: LD_INT 1
34255: PPUSH
34256: CALL_OW 51
// end ;
34260: GO 34134
34262: POP
34263: POP
// end ;
34264: PPOPN 2
34266: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
34267: LD_EXP 65
34271: PUSH
34272: LD_EXP 111
34276: AND
34277: IFFALSE 34499
34279: GO 34281
34281: DISABLE
34282: LD_INT 0
34284: PPUSH
34285: PPUSH
34286: PPUSH
34287: PPUSH
34288: PPUSH
34289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34290: LD_ADDR_VAR 0 6
34294: PUSH
34295: LD_INT 22
34297: PUSH
34298: LD_OWVAR 2
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 21
34309: PUSH
34310: LD_INT 1
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 3
34319: PUSH
34320: LD_INT 23
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: LIST
34338: PPUSH
34339: CALL_OW 69
34343: ST_TO_ADDR
// if not tmp then
34344: LD_VAR 0 6
34348: NOT
34349: IFFALSE 34353
// exit ;
34351: GO 34499
// s1 := rand ( 1 , 4 ) ;
34353: LD_ADDR_VAR 0 2
34357: PUSH
34358: LD_INT 1
34360: PPUSH
34361: LD_INT 4
34363: PPUSH
34364: CALL_OW 12
34368: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34369: LD_ADDR_VAR 0 4
34373: PUSH
34374: LD_VAR 0 6
34378: PUSH
34379: LD_INT 1
34381: ARRAY
34382: PPUSH
34383: LD_VAR 0 2
34387: PPUSH
34388: CALL_OW 259
34392: ST_TO_ADDR
// if s1 = 1 then
34393: LD_VAR 0 2
34397: PUSH
34398: LD_INT 1
34400: EQUAL
34401: IFFALSE 34421
// s2 := rand ( 2 , 4 ) else
34403: LD_ADDR_VAR 0 3
34407: PUSH
34408: LD_INT 2
34410: PPUSH
34411: LD_INT 4
34413: PPUSH
34414: CALL_OW 12
34418: ST_TO_ADDR
34419: GO 34429
// s2 := 1 ;
34421: LD_ADDR_VAR 0 3
34425: PUSH
34426: LD_INT 1
34428: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
34429: LD_ADDR_VAR 0 5
34433: PUSH
34434: LD_VAR 0 6
34438: PUSH
34439: LD_INT 1
34441: ARRAY
34442: PPUSH
34443: LD_VAR 0 3
34447: PPUSH
34448: CALL_OW 259
34452: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
34453: LD_VAR 0 6
34457: PUSH
34458: LD_INT 1
34460: ARRAY
34461: PPUSH
34462: LD_VAR 0 2
34466: PPUSH
34467: LD_VAR 0 5
34471: PPUSH
34472: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
34476: LD_VAR 0 6
34480: PUSH
34481: LD_INT 1
34483: ARRAY
34484: PPUSH
34485: LD_VAR 0 3
34489: PPUSH
34490: LD_VAR 0 4
34494: PPUSH
34495: CALL_OW 237
// end ;
34499: PPOPN 6
34501: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
34502: LD_EXP 65
34506: PUSH
34507: LD_EXP 112
34511: AND
34512: IFFALSE 34591
34514: GO 34516
34516: DISABLE
34517: LD_INT 0
34519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
34520: LD_ADDR_VAR 0 1
34524: PUSH
34525: LD_INT 22
34527: PUSH
34528: LD_OWVAR 2
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 30
34539: PUSH
34540: LD_INT 3
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PPUSH
34551: CALL_OW 69
34555: ST_TO_ADDR
// if not tmp then
34556: LD_VAR 0 1
34560: NOT
34561: IFFALSE 34565
// exit ;
34563: GO 34591
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34565: LD_VAR 0 1
34569: PUSH
34570: LD_INT 1
34572: PPUSH
34573: LD_VAR 0 1
34577: PPUSH
34578: CALL_OW 12
34582: ARRAY
34583: PPUSH
34584: LD_INT 1
34586: PPUSH
34587: CALL_OW 234
// end ;
34591: PPOPN 1
34593: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
34594: LD_EXP 65
34598: PUSH
34599: LD_EXP 113
34603: AND
34604: IFFALSE 34716
34606: GO 34608
34608: DISABLE
34609: LD_INT 0
34611: PPUSH
34612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
34613: LD_ADDR_VAR 0 2
34617: PUSH
34618: LD_INT 22
34620: PUSH
34621: LD_OWVAR 2
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 2
34632: PUSH
34633: LD_INT 30
34635: PUSH
34636: LD_INT 27
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 30
34645: PUSH
34646: LD_INT 26
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 30
34655: PUSH
34656: LD_INT 28
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PPUSH
34673: CALL_OW 69
34677: ST_TO_ADDR
// if not tmp then
34678: LD_VAR 0 2
34682: NOT
34683: IFFALSE 34687
// exit ;
34685: GO 34716
// for i in tmp do
34687: LD_ADDR_VAR 0 1
34691: PUSH
34692: LD_VAR 0 2
34696: PUSH
34697: FOR_IN
34698: IFFALSE 34714
// SetLives ( i , 1 ) ;
34700: LD_VAR 0 1
34704: PPUSH
34705: LD_INT 1
34707: PPUSH
34708: CALL_OW 234
34712: GO 34697
34714: POP
34715: POP
// end ;
34716: PPOPN 2
34718: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
34719: LD_EXP 65
34723: PUSH
34724: LD_EXP 114
34728: AND
34729: IFFALSE 35003
34731: GO 34733
34733: DISABLE
34734: LD_INT 0
34736: PPUSH
34737: PPUSH
34738: PPUSH
// begin i := rand ( 1 , 7 ) ;
34739: LD_ADDR_VAR 0 1
34743: PUSH
34744: LD_INT 1
34746: PPUSH
34747: LD_INT 7
34749: PPUSH
34750: CALL_OW 12
34754: ST_TO_ADDR
// case i of 1 :
34755: LD_VAR 0 1
34759: PUSH
34760: LD_INT 1
34762: DOUBLE
34763: EQUAL
34764: IFTRUE 34768
34766: GO 34778
34768: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
34769: LD_STRING earthquake(getX(game), 0, 32)
34771: PPUSH
34772: CALL_OW 559
34776: GO 35003
34778: LD_INT 2
34780: DOUBLE
34781: EQUAL
34782: IFTRUE 34786
34784: GO 34800
34786: POP
// begin ToLua ( displayStucuk(); ) ;
34787: LD_STRING displayStucuk();
34789: PPUSH
34790: CALL_OW 559
// ResetFog ;
34794: CALL_OW 335
// end ; 3 :
34798: GO 35003
34800: LD_INT 3
34802: DOUBLE
34803: EQUAL
34804: IFTRUE 34808
34806: GO 34912
34808: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34809: LD_ADDR_VAR 0 2
34813: PUSH
34814: LD_INT 22
34816: PUSH
34817: LD_OWVAR 2
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 25
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PPUSH
34840: CALL_OW 69
34844: ST_TO_ADDR
// if not tmp then
34845: LD_VAR 0 2
34849: NOT
34850: IFFALSE 34854
// exit ;
34852: GO 35003
// un := tmp [ rand ( 1 , tmp ) ] ;
34854: LD_ADDR_VAR 0 3
34858: PUSH
34859: LD_VAR 0 2
34863: PUSH
34864: LD_INT 1
34866: PPUSH
34867: LD_VAR 0 2
34871: PPUSH
34872: CALL_OW 12
34876: ARRAY
34877: ST_TO_ADDR
// if Crawls ( un ) then
34878: LD_VAR 0 3
34882: PPUSH
34883: CALL_OW 318
34887: IFFALSE 34898
// ComWalk ( un ) ;
34889: LD_VAR 0 3
34893: PPUSH
34894: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34898: LD_VAR 0 3
34902: PPUSH
34903: LD_INT 8
34905: PPUSH
34906: CALL_OW 336
// end ; 4 :
34910: GO 35003
34912: LD_INT 4
34914: DOUBLE
34915: EQUAL
34916: IFTRUE 34920
34918: GO 34981
34920: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
34921: LD_ADDR_VAR 0 2
34925: PUSH
34926: LD_INT 22
34928: PUSH
34929: LD_OWVAR 2
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 30
34940: PUSH
34941: LD_INT 29
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PPUSH
34952: CALL_OW 69
34956: ST_TO_ADDR
// if not tmp then
34957: LD_VAR 0 2
34961: NOT
34962: IFFALSE 34966
// exit ;
34964: GO 35003
// DestroyUnit ( tmp [ 1 ] ) ;
34966: LD_VAR 0 2
34970: PUSH
34971: LD_INT 1
34973: ARRAY
34974: PPUSH
34975: CALL_OW 65
// end ; 5 .. 7 :
34979: GO 35003
34981: LD_INT 5
34983: DOUBLE
34984: GREATEREQUAL
34985: IFFALSE 34993
34987: LD_INT 7
34989: DOUBLE
34990: LESSEQUAL
34991: IFTRUE 34995
34993: GO 35002
34995: POP
// StreamSibBomb ; end ;
34996: CALL 31253 0 0
35000: GO 35003
35002: POP
// end ;
35003: PPOPN 3
35005: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
35006: LD_EXP 65
35010: PUSH
35011: LD_EXP 115
35015: AND
35016: IFFALSE 35172
35018: GO 35020
35020: DISABLE
35021: LD_INT 0
35023: PPUSH
35024: PPUSH
35025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
35026: LD_ADDR_VAR 0 2
35030: PUSH
35031: LD_INT 81
35033: PUSH
35034: LD_OWVAR 2
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 2
35045: PUSH
35046: LD_INT 21
35048: PUSH
35049: LD_INT 1
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 21
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: LIST
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PPUSH
35075: CALL_OW 69
35079: ST_TO_ADDR
// if not tmp then
35080: LD_VAR 0 2
35084: NOT
35085: IFFALSE 35089
// exit ;
35087: GO 35172
// p := 0 ;
35089: LD_ADDR_VAR 0 3
35093: PUSH
35094: LD_INT 0
35096: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35097: LD_INT 35
35099: PPUSH
35100: CALL_OW 67
// p := p + 1 ;
35104: LD_ADDR_VAR 0 3
35108: PUSH
35109: LD_VAR 0 3
35113: PUSH
35114: LD_INT 1
35116: PLUS
35117: ST_TO_ADDR
// for i in tmp do
35118: LD_ADDR_VAR 0 1
35122: PUSH
35123: LD_VAR 0 2
35127: PUSH
35128: FOR_IN
35129: IFFALSE 35160
// if GetLives ( i ) < 1000 then
35131: LD_VAR 0 1
35135: PPUSH
35136: CALL_OW 256
35140: PUSH
35141: LD_INT 1000
35143: LESS
35144: IFFALSE 35158
// SetLives ( i , 1000 ) ;
35146: LD_VAR 0 1
35150: PPUSH
35151: LD_INT 1000
35153: PPUSH
35154: CALL_OW 234
35158: GO 35128
35160: POP
35161: POP
// until p > 20 ;
35162: LD_VAR 0 3
35166: PUSH
35167: LD_INT 20
35169: GREATER
35170: IFFALSE 35097
// end ;
35172: PPOPN 3
35174: END
// every 0 0$1 trigger StreamModeActive and sTime do
35175: LD_EXP 65
35179: PUSH
35180: LD_EXP 116
35184: AND
35185: IFFALSE 35220
35187: GO 35189
35189: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
35190: LD_INT 28
35192: PPUSH
35193: LD_OWVAR 2
35197: PPUSH
35198: LD_INT 2
35200: PPUSH
35201: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
35205: LD_INT 30
35207: PPUSH
35208: LD_OWVAR 2
35212: PPUSH
35213: LD_INT 2
35215: PPUSH
35216: CALL_OW 322
// end ;
35220: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
35221: LD_EXP 65
35225: PUSH
35226: LD_EXP 117
35230: AND
35231: IFFALSE 35352
35233: GO 35235
35235: DISABLE
35236: LD_INT 0
35238: PPUSH
35239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35240: LD_ADDR_VAR 0 2
35244: PUSH
35245: LD_INT 22
35247: PUSH
35248: LD_OWVAR 2
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 21
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 3
35269: PUSH
35270: LD_INT 23
35272: PUSH
35273: LD_INT 0
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: LIST
35288: PPUSH
35289: CALL_OW 69
35293: ST_TO_ADDR
// if not tmp then
35294: LD_VAR 0 2
35298: NOT
35299: IFFALSE 35303
// exit ;
35301: GO 35352
// for i in tmp do
35303: LD_ADDR_VAR 0 1
35307: PUSH
35308: LD_VAR 0 2
35312: PUSH
35313: FOR_IN
35314: IFFALSE 35350
// begin if Crawls ( i ) then
35316: LD_VAR 0 1
35320: PPUSH
35321: CALL_OW 318
35325: IFFALSE 35336
// ComWalk ( i ) ;
35327: LD_VAR 0 1
35331: PPUSH
35332: CALL_OW 138
// SetClass ( i , 2 ) ;
35336: LD_VAR 0 1
35340: PPUSH
35341: LD_INT 2
35343: PPUSH
35344: CALL_OW 336
// end ;
35348: GO 35313
35350: POP
35351: POP
// end ;
35352: PPOPN 2
35354: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35355: LD_EXP 65
35359: PUSH
35360: LD_EXP 118
35364: AND
35365: IFFALSE 35646
35367: GO 35369
35369: DISABLE
35370: LD_INT 0
35372: PPUSH
35373: PPUSH
35374: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35375: LD_OWVAR 2
35379: PPUSH
35380: LD_INT 9
35382: PPUSH
35383: LD_INT 1
35385: PPUSH
35386: LD_INT 1
35388: PPUSH
35389: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
35393: LD_INT 9
35395: PPUSH
35396: LD_OWVAR 2
35400: PPUSH
35401: CALL_OW 343
// uc_side := 9 ;
35405: LD_ADDR_OWVAR 20
35409: PUSH
35410: LD_INT 9
35412: ST_TO_ADDR
// uc_nation := 2 ;
35413: LD_ADDR_OWVAR 21
35417: PUSH
35418: LD_INT 2
35420: ST_TO_ADDR
// hc_name := Dark Warrior ;
35421: LD_ADDR_OWVAR 26
35425: PUSH
35426: LD_STRING Dark Warrior
35428: ST_TO_ADDR
// hc_gallery :=  ;
35429: LD_ADDR_OWVAR 33
35433: PUSH
35434: LD_STRING 
35436: ST_TO_ADDR
// hc_noskilllimit := true ;
35437: LD_ADDR_OWVAR 76
35441: PUSH
35442: LD_INT 1
35444: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
35445: LD_ADDR_OWVAR 31
35449: PUSH
35450: LD_INT 30
35452: PUSH
35453: LD_INT 30
35455: PUSH
35456: LD_INT 30
35458: PUSH
35459: LD_INT 30
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: ST_TO_ADDR
// un := CreateHuman ;
35468: LD_ADDR_VAR 0 3
35472: PUSH
35473: CALL_OW 44
35477: ST_TO_ADDR
// hc_noskilllimit := false ;
35478: LD_ADDR_OWVAR 76
35482: PUSH
35483: LD_INT 0
35485: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35486: LD_VAR 0 3
35490: PPUSH
35491: LD_INT 1
35493: PPUSH
35494: CALL_OW 51
// p := 0 ;
35498: LD_ADDR_VAR 0 2
35502: PUSH
35503: LD_INT 0
35505: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35506: LD_INT 35
35508: PPUSH
35509: CALL_OW 67
// p := p + 1 ;
35513: LD_ADDR_VAR 0 2
35517: PUSH
35518: LD_VAR 0 2
35522: PUSH
35523: LD_INT 1
35525: PLUS
35526: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
35527: LD_VAR 0 3
35531: PPUSH
35532: CALL_OW 256
35536: PUSH
35537: LD_INT 1000
35539: LESS
35540: IFFALSE 35554
// SetLives ( un , 1000 ) ;
35542: LD_VAR 0 3
35546: PPUSH
35547: LD_INT 1000
35549: PPUSH
35550: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
35554: LD_VAR 0 3
35558: PPUSH
35559: LD_INT 81
35561: PUSH
35562: LD_OWVAR 2
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 91
35573: PUSH
35574: LD_VAR 0 3
35578: PUSH
35579: LD_INT 30
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: LIST
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PPUSH
35591: CALL_OW 69
35595: PPUSH
35596: LD_VAR 0 3
35600: PPUSH
35601: CALL_OW 74
35605: PPUSH
35606: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
35610: LD_VAR 0 2
35614: PUSH
35615: LD_INT 60
35617: GREATER
35618: PUSH
35619: LD_VAR 0 3
35623: PPUSH
35624: CALL_OW 301
35628: OR
35629: IFFALSE 35506
// if un then
35631: LD_VAR 0 3
35635: IFFALSE 35646
// RemoveUnit ( un ) ;
35637: LD_VAR 0 3
35641: PPUSH
35642: CALL_OW 64
// end ; end_of_file
35646: PPOPN 3
35648: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35649: LD_INT 0
35651: PPUSH
35652: PPUSH
35653: PPUSH
35654: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35655: LD_VAR 0 1
35659: PPUSH
35660: CALL_OW 264
35664: PUSH
35665: LD_EXP 55
35669: EQUAL
35670: IFFALSE 35742
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35672: LD_INT 68
35674: PPUSH
35675: LD_VAR 0 1
35679: PPUSH
35680: CALL_OW 255
35684: PPUSH
35685: CALL_OW 321
35689: PUSH
35690: LD_INT 2
35692: EQUAL
35693: IFFALSE 35705
// eff := 70 else
35695: LD_ADDR_VAR 0 4
35699: PUSH
35700: LD_INT 70
35702: ST_TO_ADDR
35703: GO 35713
// eff := 30 ;
35705: LD_ADDR_VAR 0 4
35709: PUSH
35710: LD_INT 30
35712: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35713: LD_VAR 0 1
35717: PPUSH
35718: CALL_OW 250
35722: PPUSH
35723: LD_VAR 0 1
35727: PPUSH
35728: CALL_OW 251
35732: PPUSH
35733: LD_VAR 0 4
35737: PPUSH
35738: CALL_OW 495
// end ; end ;
35742: LD_VAR 0 2
35746: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35747: LD_INT 0
35749: PPUSH
// end ;
35750: LD_VAR 0 4
35754: RET
// export function SOS_Command ( cmd ) ; begin
35755: LD_INT 0
35757: PPUSH
// end ;
35758: LD_VAR 0 2
35762: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35763: LD_VAR 0 1
35767: PUSH
35768: LD_INT 255
35770: EQUAL
35771: PUSH
35772: LD_VAR 0 2
35776: PPUSH
35777: CALL_OW 264
35781: PUSH
35782: LD_INT 14
35784: PUSH
35785: LD_INT 53
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: IN
35792: AND
35793: PUSH
35794: LD_VAR 0 4
35798: PPUSH
35799: LD_VAR 0 5
35803: PPUSH
35804: CALL_OW 488
35808: AND
35809: IFFALSE 35833
// CutTreeXYR ( unit , x , y , 12 ) ;
35811: LD_VAR 0 2
35815: PPUSH
35816: LD_VAR 0 4
35820: PPUSH
35821: LD_VAR 0 5
35825: PPUSH
35826: LD_INT 12
35828: PPUSH
35829: CALL 35836 0 4
// end ;
35833: PPOPN 5
35835: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35836: LD_INT 0
35838: PPUSH
35839: PPUSH
35840: PPUSH
35841: PPUSH
35842: PPUSH
35843: PPUSH
35844: PPUSH
35845: PPUSH
35846: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35847: LD_VAR 0 1
35851: NOT
35852: PUSH
35853: LD_VAR 0 2
35857: PPUSH
35858: LD_VAR 0 3
35862: PPUSH
35863: CALL_OW 488
35867: NOT
35868: OR
35869: PUSH
35870: LD_VAR 0 4
35874: NOT
35875: OR
35876: IFFALSE 35880
// exit ;
35878: GO 36220
// list := [ ] ;
35880: LD_ADDR_VAR 0 13
35884: PUSH
35885: EMPTY
35886: ST_TO_ADDR
// if x - r < 0 then
35887: LD_VAR 0 2
35891: PUSH
35892: LD_VAR 0 4
35896: MINUS
35897: PUSH
35898: LD_INT 0
35900: LESS
35901: IFFALSE 35913
// min_x := 0 else
35903: LD_ADDR_VAR 0 7
35907: PUSH
35908: LD_INT 0
35910: ST_TO_ADDR
35911: GO 35929
// min_x := x - r ;
35913: LD_ADDR_VAR 0 7
35917: PUSH
35918: LD_VAR 0 2
35922: PUSH
35923: LD_VAR 0 4
35927: MINUS
35928: ST_TO_ADDR
// if y - r < 0 then
35929: LD_VAR 0 3
35933: PUSH
35934: LD_VAR 0 4
35938: MINUS
35939: PUSH
35940: LD_INT 0
35942: LESS
35943: IFFALSE 35955
// min_y := 0 else
35945: LD_ADDR_VAR 0 8
35949: PUSH
35950: LD_INT 0
35952: ST_TO_ADDR
35953: GO 35971
// min_y := y - r ;
35955: LD_ADDR_VAR 0 8
35959: PUSH
35960: LD_VAR 0 3
35964: PUSH
35965: LD_VAR 0 4
35969: MINUS
35970: ST_TO_ADDR
// max_x := x + r ;
35971: LD_ADDR_VAR 0 9
35975: PUSH
35976: LD_VAR 0 2
35980: PUSH
35981: LD_VAR 0 4
35985: PLUS
35986: ST_TO_ADDR
// max_y := y + r ;
35987: LD_ADDR_VAR 0 10
35991: PUSH
35992: LD_VAR 0 3
35996: PUSH
35997: LD_VAR 0 4
36001: PLUS
36002: ST_TO_ADDR
// for _x = min_x to max_x do
36003: LD_ADDR_VAR 0 11
36007: PUSH
36008: DOUBLE
36009: LD_VAR 0 7
36013: DEC
36014: ST_TO_ADDR
36015: LD_VAR 0 9
36019: PUSH
36020: FOR_TO
36021: IFFALSE 36138
// for _y = min_y to max_y do
36023: LD_ADDR_VAR 0 12
36027: PUSH
36028: DOUBLE
36029: LD_VAR 0 8
36033: DEC
36034: ST_TO_ADDR
36035: LD_VAR 0 10
36039: PUSH
36040: FOR_TO
36041: IFFALSE 36134
// begin if not ValidHex ( _x , _y ) then
36043: LD_VAR 0 11
36047: PPUSH
36048: LD_VAR 0 12
36052: PPUSH
36053: CALL_OW 488
36057: NOT
36058: IFFALSE 36062
// continue ;
36060: GO 36040
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36062: LD_VAR 0 11
36066: PPUSH
36067: LD_VAR 0 12
36071: PPUSH
36072: CALL_OW 351
36076: PUSH
36077: LD_VAR 0 11
36081: PPUSH
36082: LD_VAR 0 12
36086: PPUSH
36087: CALL_OW 554
36091: AND
36092: IFFALSE 36132
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36094: LD_ADDR_VAR 0 13
36098: PUSH
36099: LD_VAR 0 13
36103: PPUSH
36104: LD_VAR 0 13
36108: PUSH
36109: LD_INT 1
36111: PLUS
36112: PPUSH
36113: LD_VAR 0 11
36117: PUSH
36118: LD_VAR 0 12
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PPUSH
36127: CALL_OW 2
36131: ST_TO_ADDR
// end ;
36132: GO 36040
36134: POP
36135: POP
36136: GO 36020
36138: POP
36139: POP
// if not list then
36140: LD_VAR 0 13
36144: NOT
36145: IFFALSE 36149
// exit ;
36147: GO 36220
// for i in list do
36149: LD_ADDR_VAR 0 6
36153: PUSH
36154: LD_VAR 0 13
36158: PUSH
36159: FOR_IN
36160: IFFALSE 36218
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36162: LD_VAR 0 1
36166: PPUSH
36167: LD_STRING M
36169: PUSH
36170: LD_VAR 0 6
36174: PUSH
36175: LD_INT 1
36177: ARRAY
36178: PUSH
36179: LD_VAR 0 6
36183: PUSH
36184: LD_INT 2
36186: ARRAY
36187: PUSH
36188: LD_INT 0
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: PUSH
36209: EMPTY
36210: LIST
36211: PPUSH
36212: CALL_OW 447
36216: GO 36159
36218: POP
36219: POP
// end ;
36220: LD_VAR 0 5
36224: RET
