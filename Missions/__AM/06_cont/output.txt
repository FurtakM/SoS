// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 41
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7203 0 0
// CreateNature ;
  57: CALL 19579 0 0
// PrepareRussian ;
  61: CALL 5702 0 0
// PrepareVehicles ;
  65: CALL 1572 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 1981 0 0
// PreparePlayerApemans ;
  77: CALL 2119 0 0
// Action ;
  81: CALL 9842 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 41
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 42
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 43
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 22
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 23
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 39
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 40
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 29
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 20
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 21
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 45
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 38
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 24
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 700 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 25
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 700
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 26
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 28
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 46
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 32
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 44
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 30
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 31
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 36
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 37
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 33
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 27
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 41
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 41
 611: NOT
 612: PPUSH
 613: LD_EXP 43
 617: PPUSH
 618: CALL 37450 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 14
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 37450 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 41
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 41
 804: NOT
 805: PPUSH
 806: LD_EXP 43
 810: PPUSH
 811: CALL 37450 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 43
 925: PPUSH
 926: CALL 37450 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 43
1040: PPUSH
1041: CALL 37450 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 41
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 41
1154: NOT
1155: PPUSH
1156: LD_EXP 43
1160: PPUSH
1161: CALL 37450 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 41
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 41
1274: NOT
1275: PPUSH
1276: LD_EXP 43
1280: PPUSH
1281: CALL 37450 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 41
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 41
1394: NOT
1395: PPUSH
1396: LD_EXP 43
1400: PPUSH
1401: CALL 37450 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 41
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 41
1514: NOT
1515: PPUSH
1516: LD_EXP 43
1520: PPUSH
1521: CALL 37450 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; end ;
1567: LD_VAR 0 1
1571: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1572: LD_INT 0
1574: PPUSH
1575: PPUSH
1576: PPUSH
1577: PPUSH
1578: PPUSH
1579: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1580: LD_ADDR_VAR 0 5
1584: PUSH
1585: LD_STRING 06_VehiclesIn06_1
1587: PPUSH
1588: EMPTY
1589: PPUSH
1590: CALL_OW 30
1594: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1595: LD_ADDR_EXP 39
1599: PUSH
1600: LD_STRING 06_ResourcesInCargo06_1
1602: PPUSH
1603: EMPTY
1604: PPUSH
1605: CALL_OW 30
1609: ST_TO_ADDR
// cargoList := [ ] ;
1610: LD_ADDR_VAR 0 6
1614: PUSH
1615: EMPTY
1616: ST_TO_ADDR
// uc_side := 1 ;
1617: LD_ADDR_OWVAR 20
1621: PUSH
1622: LD_INT 1
1624: ST_TO_ADDR
// if vehicles then
1625: LD_VAR 0 5
1629: IFFALSE 1976
// begin for i := 1 to vehicles do
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: DOUBLE
1637: LD_INT 1
1639: DEC
1640: ST_TO_ADDR
1641: LD_VAR 0 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1796
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1649: LD_ADDR_OWVAR 21
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 1
1667: ARRAY
1668: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1669: LD_ADDR_OWVAR 37
1673: PUSH
1674: LD_VAR 0 5
1678: PUSH
1679: LD_VAR 0 2
1683: ARRAY
1684: PUSH
1685: LD_INT 2
1687: ARRAY
1688: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1689: LD_ADDR_OWVAR 39
1693: PUSH
1694: LD_VAR 0 5
1698: PUSH
1699: LD_VAR 0 2
1703: ARRAY
1704: PUSH
1705: LD_INT 3
1707: ARRAY
1708: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1709: LD_ADDR_OWVAR 38
1713: PUSH
1714: LD_VAR 0 5
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PUSH
1725: LD_INT 4
1727: ARRAY
1728: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1729: LD_ADDR_OWVAR 40
1733: PUSH
1734: LD_VAR 0 5
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 5
1747: ARRAY
1748: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1749: LD_ADDR_OWVAR 41
1753: PUSH
1754: LD_INT 40
1756: ST_TO_ADDR
// veh := CreateVehicle ;
1757: LD_ADDR_VAR 0 4
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1767: LD_VAR 0 4
1771: PPUSH
1772: LD_INT 3
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1779: LD_VAR 0 4
1783: PPUSH
1784: LD_INT 2
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 49
// end ;
1794: GO 1646
1796: POP
1797: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1798: LD_ADDR_VAR 0 6
1802: PUSH
1803: LD_INT 22
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 21
1815: PUSH
1816: LD_INT 2
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 34
1825: PUSH
1826: LD_INT 12
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PPUSH
1838: CALL_OW 69
1842: ST_TO_ADDR
// if cargoList then
1843: LD_VAR 0 6
1847: IFFALSE 1976
// for i := 1 to cargoList do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: DOUBLE
1855: LD_INT 1
1857: DEC
1858: ST_TO_ADDR
1859: LD_VAR 0 6
1863: PUSH
1864: FOR_TO
1865: IFFALSE 1974
// begin if resources then
1867: LD_EXP 39
1871: IFFALSE 1972
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_EXP 39
1891: PUSH
1892: LD_VAR 0 2
1896: ARRAY
1897: PUSH
1898: LD_INT 1
1900: ARRAY
1901: PPUSH
1902: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1906: LD_VAR 0 6
1910: PUSH
1911: LD_VAR 0 2
1915: ARRAY
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_EXP 39
1924: PUSH
1925: LD_VAR 0 2
1929: ARRAY
1930: PUSH
1931: LD_INT 2
1933: ARRAY
1934: PPUSH
1935: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1939: LD_VAR 0 6
1943: PUSH
1944: LD_VAR 0 2
1948: ARRAY
1949: PPUSH
1950: LD_INT 3
1952: PPUSH
1953: LD_EXP 39
1957: PUSH
1958: LD_VAR 0 2
1962: ARRAY
1963: PUSH
1964: LD_INT 3
1966: ARRAY
1967: PPUSH
1968: CALL_OW 291
// end ; end ;
1972: GO 1864
1974: POP
1975: POP
// end ; end ;
1976: LD_VAR 0 1
1980: RET
// export function PrepareOthers ; var i , veh ; begin
1981: LD_INT 0
1983: PPUSH
1984: PPUSH
1985: PPUSH
// uc_side := 1 ;
1986: LD_ADDR_OWVAR 20
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// uc_nation := 1 ;
1994: LD_ADDR_OWVAR 21
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2002: LD_ADDR_EXP 11
2006: PUSH
2007: LD_STRING OthersIn06
2009: PPUSH
2010: CALL_OW 31
2014: ST_TO_ADDR
// for i in others do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_EXP 11
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2028: LD_ADDR_VAR 0 3
2032: PUSH
2033: LD_INT 22
2035: PUSH
2036: LD_INT 1
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 21
2045: PUSH
2046: LD_INT 2
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 58
2055: PUSH
2056: EMPTY
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: ST_TO_ADDR
// if veh then
2069: LD_VAR 0 3
2073: IFFALSE 2095
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_VAR 0 3
2084: PUSH
2085: LD_INT 1
2087: ARRAY
2088: PPUSH
2089: CALL_OW 52
2093: GO 2110
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2095: LD_VAR 0 2
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// end ;
2110: GO 2025
2112: POP
2113: POP
// end ;
2114: LD_VAR 0 1
2118: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2119: LD_INT 0
2121: PPUSH
2122: PPUSH
2123: PPUSH
// uc_side = 1 ;
2124: LD_ADDR_OWVAR 20
2128: PUSH
2129: LD_INT 1
2131: ST_TO_ADDR
// uc_nation = 0 ;
2132: LD_ADDR_OWVAR 21
2136: PUSH
2137: LD_INT 0
2139: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2140: LD_ADDR_EXP 12
2144: PUSH
2145: LD_STRING ApeIn06
2147: PPUSH
2148: CALL_OW 31
2152: ST_TO_ADDR
// if not ape then
2153: LD_EXP 12
2157: NOT
2158: IFFALSE 2162
// exit ;
2160: GO 2194
// for i in ape do
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_EXP 12
2171: PUSH
2172: FOR_IN
2173: IFFALSE 2192
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
2190: GO 2172
2192: POP
2193: POP
// end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareDenis ; var xy , i ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
// uc_side := 4 ;
2204: LD_ADDR_OWVAR 20
2208: PUSH
2209: LD_INT 4
2211: ST_TO_ADDR
// uc_nation := 1 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 1
2219: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: LD_INT 63
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 70
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 83
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 16
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 27
2267: PUSH
2268: LD_INT 1
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 38
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 5
2287: PUSH
2288: LD_INT 1
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 54
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2315: LD_ADDR_EXP 9
2319: PUSH
2320: LD_STRING Denis
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: LD_EXP 43
2330: PPUSH
2331: CALL 37450 0 3
2335: ST_TO_ADDR
// if not Denis then
2336: LD_EXP 9
2340: NOT
2341: IFFALSE 2345
// exit ;
2343: GO 2486
// for i = 1 to xy do
2345: LD_ADDR_VAR 0 3
2349: PUSH
2350: DOUBLE
2351: LD_INT 1
2353: DEC
2354: ST_TO_ADDR
2355: LD_VAR 0 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2460
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2363: LD_VAR 0 2
2367: PUSH
2368: LD_VAR 0 3
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 2
2382: PUSH
2383: LD_VAR 0 3
2387: ARRAY
2388: PUSH
2389: LD_INT 2
2391: ARRAY
2392: PPUSH
2393: CALL_OW 428
2397: PUSH
2398: LD_INT 0
2400: EQUAL
2401: IFFALSE 2458
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2403: LD_EXP 9
2407: PPUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 0
2440: PPUSH
2441: CALL_OW 48
// if IsPlaced ( Denis ) then
2445: LD_EXP 9
2449: PPUSH
2450: CALL_OW 305
2454: IFFALSE 2458
// break ;
2456: GO 2460
// end ;
2458: GO 2360
2460: POP
2461: POP
// SetClass ( Denis , 4 ) ;
2462: LD_EXP 9
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2474: LD_EXP 9
2478: PPUSH
2479: LD_INT 750
2481: PPUSH
2482: CALL_OW 234
// end ;
2486: LD_VAR 0 1
2490: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2491: LD_INT 0
2493: PPUSH
2494: PPUSH
2495: PPUSH
2496: PPUSH
2497: PPUSH
// area := HarrisonSupportArea ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_INT 3
2505: ST_TO_ADDR
// dir := 2 ;
2506: LD_ADDR_VAR 0 5
2510: PUSH
2511: LD_INT 2
2513: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2514: LD_VAR 0 4
2518: PPUSH
2519: LD_INT 21
2521: PUSH
2522: LD_INT 3
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 70
2533: IFFALSE 2551
// begin area := HarrisonSupportArea2 ;
2535: LD_ADDR_VAR 0 4
2539: PUSH
2540: LD_INT 31
2542: ST_TO_ADDR
// dir := 1 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 1
2550: ST_TO_ADDR
// end ; uc_side = 1 ;
2551: LD_ADDR_OWVAR 20
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// uc_nation = 1 ;
2559: LD_ADDR_OWVAR 21
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// vc_engine := engine_combustion ;
2567: LD_ADDR_OWVAR 39
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// vc_control := control_manual ;
2575: LD_ADDR_OWVAR 38
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2583: LD_ADDR_OWVAR 40
2587: PUSH
2588: LD_INT 4
2590: PUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 2
2596: PUSH
2597: LD_INT 2
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_OWVAR 67
2610: ARRAY
2611: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2612: LD_ADDR_OWVAR 37
2616: PUSH
2617: LD_INT 2
2619: ST_TO_ADDR
// veh := CreateVehicle ;
2620: LD_ADDR_VAR 0 3
2624: PUSH
2625: CALL_OW 45
2629: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_VAR 0 5
2639: PPUSH
2640: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2644: LD_VAR 0 3
2648: PPUSH
2649: LD_VAR 0 4
2653: PPUSH
2654: LD_INT 0
2656: PPUSH
2657: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 50
2668: PPUSH
2669: CALL_OW 240
// hc_class := class_engineer ;
2673: LD_ADDR_OWVAR 28
2677: PUSH
2678: LD_INT 2
2680: ST_TO_ADDR
// hc_sex := sex_male ;
2681: LD_ADDR_OWVAR 27
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2689: LD_ADDR_OWVAR 33
2693: PUSH
2694: LD_STRING SecondCharsGal
2696: ST_TO_ADDR
// hc_face_number := 52 ;
2697: LD_ADDR_OWVAR 34
2701: PUSH
2702: LD_INT 52
2704: ST_TO_ADDR
// hc_name := Craig Brown ;
2705: LD_ADDR_OWVAR 26
2709: PUSH
2710: LD_STRING Craig Brown
2712: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2713: LD_ADDR_OWVAR 29
2717: PUSH
2718: LD_INT 10
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2728: LD_ADDR_OWVAR 30
2732: PUSH
2733: LD_INT 0
2735: PUSH
2736: LD_INT 2
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2751: LD_ADDR_OWVAR 31
2755: PUSH
2756: LD_INT 2
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 0
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2774: LD_ADDR_EXP 17
2778: PUSH
2779: CALL_OW 44
2783: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2784: LD_EXP 17
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: CALL_OW 52
// vc_engine := engine_combustion ;
2798: LD_ADDR_OWVAR 39
2802: PUSH
2803: LD_INT 1
2805: ST_TO_ADDR
// vc_control := control_manual ;
2806: LD_ADDR_OWVAR 38
2810: PUSH
2811: LD_INT 1
2813: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2814: LD_ADDR_OWVAR 40
2818: PUSH
2819: LD_INT 5
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 3
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: LD_OWVAR 67
2841: ARRAY
2842: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2843: LD_ADDR_OWVAR 37
2847: PUSH
2848: LD_INT 2
2850: ST_TO_ADDR
// veh := CreateVehicle ;
2851: LD_ADDR_VAR 0 3
2855: PUSH
2856: CALL_OW 45
2860: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_VAR 0 5
2870: PPUSH
2871: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2875: LD_VAR 0 3
2879: PPUSH
2880: LD_VAR 0 4
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2892: LD_VAR 0 3
2896: PPUSH
2897: LD_INT 50
2899: PPUSH
2900: CALL_OW 240
// hc_class := class_soldier ;
2904: LD_ADDR_OWVAR 28
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// hc_sex := sex_female ;
2912: LD_ADDR_OWVAR 27
2916: PUSH
2917: LD_INT 2
2919: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2920: LD_ADDR_OWVAR 33
2924: PUSH
2925: LD_STRING SecondCharsGal
2927: ST_TO_ADDR
// hc_face_number := 42 ;
2928: LD_ADDR_OWVAR 34
2932: PUSH
2933: LD_INT 42
2935: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2936: LD_ADDR_OWVAR 29
2940: PUSH
2941: LD_INT 11
2943: PUSH
2944: LD_INT 10
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2951: LD_ADDR_OWVAR 26
2955: PUSH
2956: LD_STRING Ingrid Jonsson
2958: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2959: LD_ADDR_OWVAR 30
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: LD_INT 1
2969: PUSH
2970: LD_INT 0
2972: PUSH
2973: LD_INT 0
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2982: LD_ADDR_OWVAR 31
2986: PUSH
2987: LD_INT 3
2989: PUSH
2990: LD_INT 1
2992: PUSH
2993: LD_INT 1
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3005: LD_ADDR_EXP 18
3009: PUSH
3010: CALL_OW 44
3014: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3015: LD_EXP 18
3019: PPUSH
3020: LD_VAR 0 3
3024: PPUSH
3025: CALL_OW 52
// end ;
3029: LD_VAR 0 1
3033: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3040: LD_ADDR_VAR 0 4
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 1
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 23
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 26
3067: PUSH
3068: LD_INT 1
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: PPUSH
3080: CALL_OW 69
3084: PUSH
3085: LD_EXP 3
3089: PUSH
3090: LD_EXP 4
3094: PUSH
3095: LD_EXP 8
3099: PUSH
3100: LD_EXP 9
3104: PUSH
3105: LD_EXP 5
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: DIFF
3117: ST_TO_ADDR
// for i in _tmp do
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_VAR 0 4
3127: PUSH
3128: FOR_IN
3129: IFFALSE 3170
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3131: LD_VAR 0 2
3135: PPUSH
3136: LD_INT 32
3138: PPUSH
3139: CALL_OW 308
3143: PUSH
3144: LD_VAR 0 2
3148: PPUSH
3149: CALL_OW 302
3153: AND
3154: IFFALSE 3168
// begin tmp := i ;
3156: LD_ADDR_VAR 0 3
3160: PUSH
3161: LD_VAR 0 2
3165: ST_TO_ADDR
// break ;
3166: GO 3170
// end ;
3168: GO 3128
3170: POP
3171: POP
// if not tmp then
3172: LD_VAR 0 3
3176: NOT
3177: IFFALSE 3189
// tmp := JMM ;
3179: LD_ADDR_VAR 0 3
3183: PUSH
3184: LD_EXP 1
3188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3189: LD_INT 35
3191: PPUSH
3192: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 22 ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 20 ] ] ) ;
3196: LD_INT 81
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: LD_INT 92
3208: PUSH
3209: LD_VAR 0 3
3213: PPUSH
3214: CALL_OW 250
3218: PUSH
3219: LD_VAR 0 3
3223: PPUSH
3224: CALL_OW 251
3228: PUSH
3229: LD_INT 22
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: NOT
3247: PUSH
3248: LD_INT 22
3250: PUSH
3251: LD_INT 1
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 21
3260: PUSH
3261: LD_INT 3
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PUSH
3268: LD_INT 92
3270: PUSH
3271: LD_VAR 0 3
3275: PPUSH
3276: CALL_OW 250
3280: PUSH
3281: LD_VAR 0 3
3285: PPUSH
3286: CALL_OW 251
3290: PUSH
3291: LD_INT 20
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: LIST
3304: PPUSH
3305: CALL_OW 69
3309: AND
3310: IFFALSE 3189
// blockSpawn := 1 ;
3312: LD_ADDR_EXP 29
3316: PUSH
3317: LD_INT 1
3319: ST_TO_ADDR
// uc_side := 4 ;
3320: LD_ADDR_OWVAR 20
3324: PUSH
3325: LD_INT 4
3327: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3328: LD_ADDR_EXP 15
3332: PUSH
3333: LD_STRING Joan
3335: PPUSH
3336: LD_INT 0
3338: PPUSH
3339: LD_EXP 43
3343: PPUSH
3344: CALL 37450 0 3
3348: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3349: LD_EXP 15
3353: PPUSH
3354: LD_VAR 0 3
3358: PPUSH
3359: CALL_OW 250
3363: PPUSH
3364: LD_VAR 0 3
3368: PPUSH
3369: CALL_OW 251
3373: PPUSH
3374: LD_INT 5
3376: PPUSH
3377: LD_INT 1
3379: PPUSH
3380: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3384: LD_EXP 15
3388: PPUSH
3389: LD_INT 250
3391: PPUSH
3392: CALL_OW 234
// InGameOn ;
3396: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3400: LD_EXP 15
3404: PPUSH
3405: CALL_OW 87
// wait ( 0 0$2 ) ;
3409: LD_INT 70
3411: PPUSH
3412: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3416: LD_VAR 0 3
3420: PPUSH
3421: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3425: LD_VAR 0 3
3429: PPUSH
3430: CALL_OW 122
// wait ( 0 0$1 ) ;
3434: LD_INT 35
3436: PPUSH
3437: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3441: LD_VAR 0 3
3445: PPUSH
3446: LD_EXP 15
3450: PPUSH
3451: CALL_OW 112
// wait ( 0 0$2 ) ;
3455: LD_INT 70
3457: PPUSH
3458: CALL_OW 67
// DialogueOn ;
3462: CALL_OW 6
// if tmp = JMM then
3466: LD_VAR 0 3
3470: PUSH
3471: LD_EXP 1
3475: EQUAL
3476: IFFALSE 3625
// begin ComTurnUnit ( JMM , Joan ) ;
3478: LD_EXP 1
3482: PPUSH
3483: LD_EXP 15
3487: PPUSH
3488: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3492: LD_EXP 1
3496: PPUSH
3497: LD_STRING D5b-JMM-1
3499: PPUSH
3500: CALL_OW 88
// DialogueOff ;
3504: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3508: LD_EXP 15
3512: PPUSH
3513: LD_INT 500
3515: PPUSH
3516: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3520: LD_EXP 15
3524: PPUSH
3525: LD_EXP 1
3529: PPUSH
3530: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3534: LD_EXP 1
3538: PPUSH
3539: LD_EXP 15
3543: PPUSH
3544: CALL_OW 119
// wait ( 0 0$1 ) ;
3548: LD_INT 35
3550: PPUSH
3551: CALL_OW 67
// DialogueOn ;
3555: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3559: LD_EXP 15
3563: PPUSH
3564: LD_STRING D5b-Joan-1
3566: PPUSH
3567: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3571: LD_EXP 1
3575: PPUSH
3576: LD_STRING D5b-JMM-2
3578: PPUSH
3579: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3583: LD_EXP 15
3587: PPUSH
3588: LD_STRING D5b-Joan-2
3590: PPUSH
3591: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3595: LD_EXP 1
3599: PPUSH
3600: LD_STRING D5b-JMM-3
3602: PPUSH
3603: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3607: LD_EXP 15
3611: PPUSH
3612: LD_STRING D5b-Joan-3
3614: PPUSH
3615: CALL_OW 88
// DialogueOff ;
3619: CALL_OW 7
// end else
3623: GO 3990
// begin ComTurnUnit ( tmp , Joan ) ;
3625: LD_VAR 0 3
3629: PPUSH
3630: LD_EXP 15
3634: PPUSH
3635: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3639: LD_VAR 0 3
3643: PPUSH
3644: LD_STRING D5a-Sol1-1
3646: PPUSH
3647: CALL_OW 88
// DialogueOff ;
3651: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3655: LD_EXP 15
3659: PPUSH
3660: LD_INT 500
3662: PPUSH
3663: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3667: LD_EXP 15
3671: PPUSH
3672: LD_VAR 0 3
3676: PPUSH
3677: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3681: LD_VAR 0 3
3685: PPUSH
3686: LD_EXP 15
3690: PPUSH
3691: CALL_OW 119
// wait ( 0 0$1 ) ;
3695: LD_INT 35
3697: PPUSH
3698: CALL_OW 67
// DialogueOn ;
3702: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3706: LD_EXP 15
3710: PPUSH
3711: LD_STRING D5a-Joan-1
3713: PPUSH
3714: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3718: LD_VAR 0 3
3722: PPUSH
3723: LD_STRING D5a-Sol1-2
3725: PPUSH
3726: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3730: LD_EXP 15
3734: PPUSH
3735: LD_STRING D5a-Joan-2
3737: PPUSH
3738: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3742: LD_VAR 0 3
3746: PPUSH
3747: LD_STRING D5a-Sol1-3
3749: PPUSH
3750: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3754: LD_EXP 15
3758: PPUSH
3759: LD_STRING D5a-Joan-3
3761: PPUSH
3762: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3766: LD_VAR 0 3
3770: PPUSH
3771: LD_STRING D5a-Sol1-4
3773: PPUSH
3774: CALL_OW 88
// DialogueOff ;
3778: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3782: LD_EXP 1
3786: PUSH
3787: LD_INT 55
3789: PUSH
3790: EMPTY
3791: LIST
3792: PPUSH
3793: CALL_OW 69
3797: IN
3798: IFFALSE 3821
// begin ComMoveUnit ( JMM , Joan ) ;
3800: LD_EXP 1
3804: PPUSH
3805: LD_EXP 15
3809: PPUSH
3810: CALL_OW 112
// wait ( 0 0$05 ) ;
3814: LD_INT 175
3816: PPUSH
3817: CALL_OW 67
// end ; ComExit ( JMM ) ;
3821: LD_EXP 1
3825: PPUSH
3826: CALL 74575 0 1
// wait ( 0 0$1 ) ;
3830: LD_INT 35
3832: PPUSH
3833: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3837: LD_INT 35
3839: PPUSH
3840: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3844: LD_EXP 15
3848: PUSH
3849: LD_VAR 0 3
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PPUSH
3858: LD_EXP 1
3862: PPUSH
3863: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3867: LD_EXP 15
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 296
3881: PUSH
3882: LD_INT 5
3884: LESS
3885: IFFALSE 3837
// ComTurnUnit ( Joan , JMM ) ;
3887: LD_EXP 15
3891: PPUSH
3892: LD_EXP 1
3896: PPUSH
3897: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3901: LD_EXP 1
3905: PPUSH
3906: LD_EXP 15
3910: PPUSH
3911: CALL_OW 119
// wait ( 0 0$1 ) ;
3915: LD_INT 35
3917: PPUSH
3918: CALL_OW 67
// DialogueOn ;
3922: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_STRING D5a-Joan-4
3933: PPUSH
3934: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3938: LD_EXP 1
3942: PPUSH
3943: LD_STRING D5a-JMM-4
3945: PPUSH
3946: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3950: LD_EXP 15
3954: PPUSH
3955: LD_STRING D5a-Joan-5
3957: PPUSH
3958: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3962: LD_EXP 1
3966: PPUSH
3967: LD_STRING D5a-JMM-5
3969: PPUSH
3970: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3974: LD_EXP 15
3978: PPUSH
3979: LD_STRING D5a-Joan-6
3981: PPUSH
3982: CALL_OW 88
// DialogueOff ;
3986: CALL_OW 7
// end ; DialogueOn ;
3990: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3994: LD_EXP 1
3998: PPUSH
3999: LD_STRING D6-JMM-1
4001: PPUSH
4002: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4006: LD_EXP 15
4010: PPUSH
4011: LD_STRING D6-Joan-1
4013: PPUSH
4014: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4018: LD_EXP 1
4022: PPUSH
4023: LD_STRING D6-JMM-2
4025: PPUSH
4026: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4030: LD_EXP 15
4034: PPUSH
4035: LD_STRING D6-Joan-2
4037: PPUSH
4038: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4042: LD_EXP 1
4046: PPUSH
4047: LD_STRING D6-JMM-3
4049: PPUSH
4050: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4054: LD_EXP 15
4058: PPUSH
4059: LD_STRING D6-Joan-3
4061: PPUSH
4062: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4066: LD_EXP 1
4070: PPUSH
4071: LD_STRING D6-JMM-4
4073: PPUSH
4074: CALL_OW 88
// DialogueOff ;
4078: CALL_OW 7
// InGameOff ;
4082: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4086: LD_EXP 15
4090: PPUSH
4091: LD_INT 1
4093: PPUSH
4094: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4098: LD_STRING MJ
4100: PPUSH
4101: CALL_OW 337
// joanStatus = 1 ;
4105: LD_ADDR_EXP 16
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// blockSpawn = 0 ;
4113: LD_ADDR_EXP 29
4117: PUSH
4118: LD_INT 0
4120: ST_TO_ADDR
// end ;
4121: LD_VAR 0 1
4125: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
// if not number or number > 8 then
4130: LD_VAR 0 1
4134: NOT
4135: PUSH
4136: LD_VAR 0 1
4140: PUSH
4141: LD_INT 8
4143: GREATER
4144: OR
4145: IFFALSE 4149
// exit ;
4147: GO 5697
// repeat wait ( 0 0$7 ) ;
4149: LD_INT 245
4151: PPUSH
4152: CALL_OW 67
// until blockSpawn = 0 ;
4156: LD_EXP 29
4160: PUSH
4161: LD_INT 0
4163: EQUAL
4164: IFFALSE 4149
// uc_side := 1 ;
4166: LD_ADDR_OWVAR 20
4170: PUSH
4171: LD_INT 1
4173: ST_TO_ADDR
// uc_nation := 1 ;
4174: LD_ADDR_OWVAR 21
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// InitHc ;
4182: CALL_OW 19
// if number = 1 then
4186: LD_VAR 0 1
4190: PUSH
4191: LD_INT 1
4193: EQUAL
4194: IFFALSE 4370
// begin hc_class := 3 ;
4196: LD_ADDR_OWVAR 28
4200: PUSH
4201: LD_INT 3
4203: ST_TO_ADDR
// hc_sex := sex_male ;
4204: LD_ADDR_OWVAR 27
4208: PUSH
4209: LD_INT 1
4211: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4212: LD_ADDR_OWVAR 33
4216: PUSH
4217: LD_STRING SecondCharsGal
4219: ST_TO_ADDR
// hc_face_number := 55 ;
4220: LD_ADDR_OWVAR 34
4224: PUSH
4225: LD_INT 55
4227: ST_TO_ADDR
// hc_name := George McCarthy ;
4228: LD_ADDR_OWVAR 26
4232: PUSH
4233: LD_STRING George McCarthy
4235: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4236: LD_ADDR_OWVAR 29
4240: PUSH
4241: LD_INT 11
4243: PUSH
4244: LD_INT 10
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4251: LD_ADDR_OWVAR 30
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: LD_INT 2
4264: PUSH
4265: LD_INT 0
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4274: LD_ADDR_OWVAR 31
4278: PUSH
4279: LD_INT 1
4281: PUSH
4282: LD_INT 2
4284: PUSH
4285: LD_INT 3
4287: PUSH
4288: LD_INT 1
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: ST_TO_ADDR
// un = CreateHuman ;
4297: LD_ADDR_VAR 0 3
4301: PUSH
4302: CALL_OW 44
4306: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_INT 23
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4322: LD_VAR 0 3
4326: PPUSH
4327: CALL_OW 87
// wait ( 0 0$1 ) ;
4331: LD_INT 35
4333: PPUSH
4334: CALL_OW 67
// DialogueOn ;
4338: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4342: LD_VAR 0 3
4346: PPUSH
4347: LD_STRING D11d-Sol4-1
4349: PPUSH
4350: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4354: LD_EXP 1
4358: PPUSH
4359: LD_STRING D11d-JMM-1
4361: PPUSH
4362: CALL_OW 88
// DialogueOff ;
4366: CALL_OW 7
// end ; if number = 2 then
4370: LD_VAR 0 1
4374: PUSH
4375: LD_INT 2
4377: EQUAL
4378: IFFALSE 4554
// begin hc_class := 1 ;
4380: LD_ADDR_OWVAR 28
4384: PUSH
4385: LD_INT 1
4387: ST_TO_ADDR
// hc_sex := sex_male ;
4388: LD_ADDR_OWVAR 27
4392: PUSH
4393: LD_INT 1
4395: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING AmGalRemake
4403: ST_TO_ADDR
// hc_face_number := 7 ;
4404: LD_ADDR_OWVAR 34
4408: PUSH
4409: LD_INT 7
4411: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4412: LD_ADDR_OWVAR 26
4416: PUSH
4417: LD_STRING Bobby Jordan
4419: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4420: LD_ADDR_OWVAR 29
4424: PUSH
4425: LD_INT 9
4427: PUSH
4428: LD_INT 11
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4435: LD_ADDR_OWVAR 30
4439: PUSH
4440: LD_INT 1
4442: PUSH
4443: LD_INT 0
4445: PUSH
4446: LD_INT 0
4448: PUSH
4449: LD_INT 1
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4458: LD_ADDR_OWVAR 31
4462: PUSH
4463: LD_INT 2
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: ST_TO_ADDR
// un = CreateHuman ;
4481: LD_ADDR_VAR 0 3
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4491: LD_VAR 0 3
4495: PPUSH
4496: LD_INT 24
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: CALL_OW 49
// wait ( 0 0$1 ) ;
4506: LD_INT 35
4508: PPUSH
4509: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4513: LD_VAR 0 3
4517: PPUSH
4518: CALL_OW 87
// DialogueOn ;
4522: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4526: LD_VAR 0 3
4530: PPUSH
4531: LD_STRING D11b-Sol3-1
4533: PPUSH
4534: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4538: LD_EXP 1
4542: PPUSH
4543: LD_STRING D11b-JMM-1
4545: PPUSH
4546: CALL_OW 88
// DialogueOff ;
4550: CALL_OW 7
// end ; if number = 3 then
4554: LD_VAR 0 1
4558: PUSH
4559: LD_INT 3
4561: EQUAL
4562: IFFALSE 4726
// begin hc_class := 1 ;
4564: LD_ADDR_OWVAR 28
4568: PUSH
4569: LD_INT 1
4571: ST_TO_ADDR
// hc_sex := sex_male ;
4572: LD_ADDR_OWVAR 27
4576: PUSH
4577: LD_INT 1
4579: ST_TO_ADDR
// hc_gallery := DJ ;
4580: LD_ADDR_OWVAR 33
4584: PUSH
4585: LD_STRING DJ
4587: ST_TO_ADDR
// hc_face_number := 1 ;
4588: LD_ADDR_OWVAR 34
4592: PUSH
4593: LD_INT 1
4595: ST_TO_ADDR
// hc_name := Darius Dajay ;
4596: LD_ADDR_OWVAR 26
4600: PUSH
4601: LD_STRING Darius Dajay
4603: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4604: LD_ADDR_OWVAR 29
4608: PUSH
4609: LD_INT 11
4611: PUSH
4612: LD_INT 11
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4619: LD_ADDR_OWVAR 30
4623: PUSH
4624: LD_INT 2
4626: PUSH
4627: LD_INT 0
4629: PUSH
4630: LD_INT 0
4632: PUSH
4633: LD_INT 0
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4642: LD_ADDR_OWVAR 31
4646: PUSH
4647: LD_INT 4
4649: PUSH
4650: LD_INT 0
4652: PUSH
4653: LD_INT 1
4655: PUSH
4656: LD_INT 0
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: ST_TO_ADDR
// un = CreateHuman ;
4665: LD_ADDR_VAR 0 3
4669: PUSH
4670: CALL_OW 44
4674: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4675: LD_VAR 0 3
4679: PPUSH
4680: LD_INT 25
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4690: LD_VAR 0 3
4694: PPUSH
4695: CALL_OW 87
// wait ( 0 0$1 ) ;
4699: LD_INT 35
4701: PPUSH
4702: CALL_OW 67
// DialogueOn ;
4706: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4710: LD_VAR 0 3
4714: PPUSH
4715: LD_STRING D11f-Sol5-1
4717: PPUSH
4718: CALL_OW 88
// DialogueOff ;
4722: CALL_OW 7
// end ; if number = 4 then
4726: LD_VAR 0 1
4730: PUSH
4731: LD_INT 4
4733: EQUAL
4734: IFFALSE 4871
// begin hc_class := 2 ;
4736: LD_ADDR_OWVAR 28
4740: PUSH
4741: LD_INT 2
4743: ST_TO_ADDR
// hc_sex := sex_female ;
4744: LD_ADDR_OWVAR 27
4748: PUSH
4749: LD_INT 2
4751: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4752: LD_ADDR_OWVAR 33
4756: PUSH
4757: LD_STRING SecondCharsGal
4759: ST_TO_ADDR
// hc_face_number := 46 ;
4760: LD_ADDR_OWVAR 34
4764: PUSH
4765: LD_INT 46
4767: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4768: LD_ADDR_OWVAR 26
4772: PUSH
4773: LD_STRING Sylvia Creak
4775: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4776: LD_ADDR_OWVAR 29
4780: PUSH
4781: LD_INT 10
4783: PUSH
4784: LD_INT 9
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4791: LD_ADDR_OWVAR 30
4795: PUSH
4796: LD_INT 0
4798: PUSH
4799: LD_INT 1
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4814: LD_ADDR_OWVAR 31
4818: PUSH
4819: LD_INT 1
4821: PUSH
4822: LD_INT 3
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: ST_TO_ADDR
// un = CreateHuman ;
4837: LD_ADDR_VAR 0 3
4841: PUSH
4842: CALL_OW 44
4846: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4847: LD_VAR 0 3
4851: PPUSH
4852: LD_INT 26
4854: PPUSH
4855: LD_INT 1
4857: PPUSH
4858: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4862: LD_VAR 0 3
4866: PPUSH
4867: CALL_OW 87
// end ; if number = 5 then
4871: LD_VAR 0 1
4875: PUSH
4876: LD_INT 5
4878: EQUAL
4879: IFFALSE 5055
// begin hc_class := 1 ;
4881: LD_ADDR_OWVAR 28
4885: PUSH
4886: LD_INT 1
4888: ST_TO_ADDR
// hc_sex := sex_female ;
4889: LD_ADDR_OWVAR 27
4893: PUSH
4894: LD_INT 2
4896: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4897: LD_ADDR_OWVAR 33
4901: PUSH
4902: LD_STRING SecondCharsGal
4904: ST_TO_ADDR
// hc_face_number := 37 ;
4905: LD_ADDR_OWVAR 34
4909: PUSH
4910: LD_INT 37
4912: ST_TO_ADDR
// hc_name := Malena Johnson ;
4913: LD_ADDR_OWVAR 26
4917: PUSH
4918: LD_STRING Malena Johnson
4920: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4921: LD_ADDR_OWVAR 29
4925: PUSH
4926: LD_INT 11
4928: PUSH
4929: LD_INT 10
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4936: LD_ADDR_OWVAR 30
4940: PUSH
4941: LD_INT 1
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: LD_INT 0
4949: PUSH
4950: LD_INT 0
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4959: LD_ADDR_OWVAR 31
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: ST_TO_ADDR
// un = CreateHuman ;
4982: LD_ADDR_VAR 0 3
4986: PUSH
4987: CALL_OW 44
4991: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4992: LD_VAR 0 3
4996: PPUSH
4997: LD_INT 27
4999: PPUSH
5000: LD_INT 1
5002: PPUSH
5003: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5007: LD_VAR 0 3
5011: PPUSH
5012: CALL_OW 87
// wait ( 0 0$1 ) ;
5016: LD_INT 35
5018: PPUSH
5019: CALL_OW 67
// DialogueOn ;
5023: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5027: LD_VAR 0 3
5031: PPUSH
5032: LD_STRING D11c-FSol3-1
5034: PPUSH
5035: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5039: LD_EXP 1
5043: PPUSH
5044: LD_STRING D11c-JMM-1
5046: PPUSH
5047: CALL_OW 88
// DialogueOff ;
5051: CALL_OW 7
// end ; if number = 6 then
5055: LD_VAR 0 1
5059: PUSH
5060: LD_INT 6
5062: EQUAL
5063: IFFALSE 5237
// begin hc_class := 1 ;
5065: LD_ADDR_OWVAR 28
5069: PUSH
5070: LD_INT 1
5072: ST_TO_ADDR
// hc_sex := sex_male ;
5073: LD_ADDR_OWVAR 27
5077: PUSH
5078: LD_INT 1
5080: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5081: LD_ADDR_OWVAR 33
5085: PUSH
5086: LD_STRING AmGalRemake
5088: ST_TO_ADDR
// hc_face_number := 1 ;
5089: LD_ADDR_OWVAR 34
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// hc_name := Charles Brown ;
5097: LD_ADDR_OWVAR 26
5101: PUSH
5102: LD_STRING Charles Brown
5104: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5105: LD_ADDR_OWVAR 29
5109: PUSH
5110: LD_INT 12
5112: PUSH
5113: LD_INT 11
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5120: LD_ADDR_OWVAR 30
5124: PUSH
5125: LD_INT 2
5127: PUSH
5128: LD_INT 0
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: LD_INT 0
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5143: LD_ADDR_OWVAR 31
5147: PUSH
5148: LD_INT 3
5150: PUSH
5151: LD_INT 0
5153: PUSH
5154: LD_INT 1
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: ST_TO_ADDR
// un = CreateHuman ;
5166: LD_ADDR_VAR 0 3
5170: PUSH
5171: CALL_OW 44
5175: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5176: LD_VAR 0 3
5180: PPUSH
5181: LD_INT 28
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5191: LD_VAR 0 3
5195: PPUSH
5196: CALL_OW 87
// wait ( 0 0$1 ) ;
5200: LD_INT 35
5202: PPUSH
5203: CALL_OW 67
// DialogueOn ;
5207: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5211: LD_VAR 0 3
5215: PPUSH
5216: LD_STRING D4-Sol1-5
5218: PPUSH
5219: CALL_OW 88
// DialogueOff ;
5223: CALL_OW 7
// tempCharles = un ;
5227: LD_ADDR_EXP 13
5231: PUSH
5232: LD_VAR 0 3
5236: ST_TO_ADDR
// end ; if number = 7 then
5237: LD_VAR 0 1
5241: PUSH
5242: LD_INT 7
5244: EQUAL
5245: IFFALSE 5517
// begin hc_class := 1 ;
5247: LD_ADDR_OWVAR 28
5251: PUSH
5252: LD_INT 1
5254: ST_TO_ADDR
// hc_sex := sex_female ;
5255: LD_ADDR_OWVAR 27
5259: PUSH
5260: LD_INT 2
5262: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5263: LD_ADDR_OWVAR 33
5267: PUSH
5268: LD_STRING AmGalRemake
5270: ST_TO_ADDR
// hc_face_number := 2 ;
5271: LD_ADDR_OWVAR 34
5275: PUSH
5276: LD_INT 2
5278: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5279: LD_ADDR_OWVAR 26
5283: PUSH
5284: LD_STRING Rebecca Macdonald
5286: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5287: LD_ADDR_OWVAR 29
5291: PUSH
5292: LD_INT 10
5294: PUSH
5295: LD_INT 10
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5302: LD_ADDR_OWVAR 30
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: LD_INT 0
5312: PUSH
5313: LD_INT 0
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5325: LD_ADDR_OWVAR 31
5329: PUSH
5330: LD_INT 1
5332: PUSH
5333: LD_INT 0
5335: PUSH
5336: LD_INT 0
5338: PUSH
5339: LD_INT 1
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: ST_TO_ADDR
// un = CreateHuman ;
5348: LD_ADDR_VAR 0 3
5352: PUSH
5353: CALL_OW 44
5357: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5358: LD_VAR 0 3
5362: PPUSH
5363: LD_INT 29
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5373: LD_VAR 0 3
5377: PPUSH
5378: CALL_OW 87
// wait ( 0 0$1 ) ;
5382: LD_INT 35
5384: PPUSH
5385: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5389: LD_INT 30
5391: PPUSH
5392: LD_INT 22
5394: PUSH
5395: LD_INT 3
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PPUSH
5402: CALL_OW 70
5406: IFFALSE 5517
// begin DialogueOn ;
5408: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5412: LD_VAR 0 3
5416: PPUSH
5417: CALL_OW 250
5421: PPUSH
5422: LD_VAR 0 3
5426: PPUSH
5427: CALL_OW 251
5431: PPUSH
5432: LD_INT 1
5434: PPUSH
5435: LD_INT 15
5437: NEG
5438: PPUSH
5439: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5443: LD_VAR 0 3
5447: PPUSH
5448: CALL_OW 250
5452: PPUSH
5453: LD_VAR 0 3
5457: PPUSH
5458: CALL_OW 251
5462: PPUSH
5463: LD_INT 1
5465: PPUSH
5466: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5470: LD_VAR 0 3
5474: PPUSH
5475: LD_STRING D11a-FSol2-1
5477: PPUSH
5478: CALL_OW 88
// DialogueOff ;
5482: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5486: LD_INT 3
5488: PPUSH
5489: LD_VAR 0 3
5493: PPUSH
5494: CALL_OW 471
// wait ( 0 0$2 ) ;
5498: LD_INT 70
5500: PPUSH
5501: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5505: LD_INT 3
5507: PPUSH
5508: LD_VAR 0 3
5512: PPUSH
5513: CALL_OW 472
// end ; end ; if number = 8 then
5517: LD_VAR 0 1
5521: PUSH
5522: LD_INT 8
5524: EQUAL
5525: IFFALSE 5681
// begin hc_class := 1 ;
5527: LD_ADDR_OWVAR 28
5531: PUSH
5532: LD_INT 1
5534: ST_TO_ADDR
// hc_sex := sex_female ;
5535: LD_ADDR_OWVAR 27
5539: PUSH
5540: LD_INT 2
5542: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5543: LD_ADDR_OWVAR 33
5547: PUSH
5548: LD_STRING SecondCharsGal
5550: ST_TO_ADDR
// hc_face_number := 45 ;
5551: LD_ADDR_OWVAR 34
5555: PUSH
5556: LD_INT 45
5558: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5559: LD_ADDR_OWVAR 26
5563: PUSH
5564: LD_STRING Margherite Simpson
5566: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5567: LD_ADDR_OWVAR 29
5571: PUSH
5572: LD_INT 12
5574: PUSH
5575: LD_INT 10
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5582: LD_ADDR_OWVAR 30
5586: PUSH
5587: LD_INT 1
5589: PUSH
5590: LD_INT 2
5592: PUSH
5593: LD_INT 0
5595: PUSH
5596: LD_INT 0
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5605: LD_ADDR_OWVAR 31
5609: PUSH
5610: LD_INT 1
5612: PUSH
5613: LD_INT 2
5615: PUSH
5616: LD_INT 0
5618: PUSH
5619: LD_INT 1
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: ST_TO_ADDR
// un = CreateHuman ;
5628: LD_ADDR_VAR 0 3
5632: PUSH
5633: CALL_OW 44
5637: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5638: LD_VAR 0 3
5642: PPUSH
5643: LD_INT 33
5645: PPUSH
5646: LD_INT 1
5648: PPUSH
5649: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5653: LD_VAR 0 3
5657: PPUSH
5658: CALL_OW 87
// wait ( 0 0$1 ) ;
5662: LD_INT 35
5664: PPUSH
5665: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5669: LD_VAR 0 3
5673: PPUSH
5674: LD_STRING D11e-FSol4-1
5676: PPUSH
5677: CALL_OW 88
// end ; arrivals := arrivals union un ;
5681: LD_ADDR_EXP 44
5685: PUSH
5686: LD_EXP 44
5690: PUSH
5691: LD_VAR 0 3
5695: UNION
5696: ST_TO_ADDR
// end ; end_of_file
5697: LD_VAR 0 2
5701: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5702: LD_INT 0
5704: PPUSH
5705: PPUSH
// ruAttackers := [ ] ;
5706: LD_ADDR_EXP 47
5710: PUSH
5711: EMPTY
5712: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5713: LD_ADDR_EXP 48
5717: PUSH
5718: EMPTY
5719: ST_TO_ADDR
// if Difficulty < 3 then
5720: LD_OWVAR 67
5724: PUSH
5725: LD_INT 3
5727: LESS
5728: IFFALSE 5745
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5730: LD_INT 130
5732: PPUSH
5733: LD_INT 81
5735: PPUSH
5736: CALL_OW 428
5740: PPUSH
5741: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5745: LD_INT 3
5747: PPUSH
5748: LD_INT 3
5750: PPUSH
5751: LD_INT 2
5753: PPUSH
5754: LD_EXP 34
5758: PPUSH
5759: LD_EXP 35
5763: PPUSH
5764: CALL_OW 12
5768: PPUSH
5769: LD_INT 2
5771: PPUSH
5772: LD_INT 4
5774: PPUSH
5775: CALL 6957 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5779: LD_INT 3
5781: PPUSH
5782: LD_INT 3
5784: PPUSH
5785: LD_INT 8
5787: PPUSH
5788: LD_EXP 34
5792: PPUSH
5793: LD_EXP 35
5797: PPUSH
5798: CALL_OW 12
5802: PPUSH
5803: LD_INT 1
5805: PPUSH
5806: LD_INT 4
5808: PPUSH
5809: CALL 6957 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5813: LD_INT 3
5815: PPUSH
5816: LD_INT 3
5818: PPUSH
5819: LD_INT 67
5821: PPUSH
5822: LD_EXP 34
5826: PPUSH
5827: LD_EXP 35
5831: PPUSH
5832: CALL_OW 12
5836: PPUSH
5837: LD_INT 1
5839: PPUSH
5840: LD_INT 2
5842: PPUSH
5843: CALL 6957 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5847: LD_INT 3
5849: PPUSH
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 21
5855: PPUSH
5856: LD_EXP 34
5860: PPUSH
5861: LD_EXP 35
5865: PPUSH
5866: CALL_OW 12
5870: PPUSH
5871: LD_INT 3
5873: PPUSH
5874: LD_INT 6
5876: PPUSH
5877: CALL 6957 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5881: LD_INT 3
5883: PPUSH
5884: LD_INT 3
5886: PPUSH
5887: LD_INT 17
5889: PPUSH
5890: LD_EXP 34
5894: PPUSH
5895: LD_EXP 35
5899: PPUSH
5900: CALL_OW 12
5904: PPUSH
5905: LD_INT 3
5907: PPUSH
5908: LD_INT 6
5910: PPUSH
5911: CALL 6957 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5915: LD_INT 3
5917: PPUSH
5918: LD_INT 3
5920: PPUSH
5921: LD_INT 32
5923: PPUSH
5924: LD_EXP 34
5928: PPUSH
5929: LD_EXP 35
5933: PPUSH
5934: CALL_OW 12
5938: PPUSH
5939: LD_INT 4
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: CALL 6957 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5949: LD_ADDR_VAR 0 2
5953: PUSH
5954: LD_INT 22
5956: PUSH
5957: LD_INT 3
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: LD_INT 21
5966: PUSH
5967: LD_INT 3
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 30
5976: PUSH
5977: LD_INT 32
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: LIST
5988: PPUSH
5989: CALL_OW 69
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6035
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5997: LD_INT 3
5999: PPUSH
6000: LD_INT 3
6002: PPUSH
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_EXP 34
6012: PPUSH
6013: LD_EXP 35
6017: PPUSH
6018: CALL_OW 12
6022: PPUSH
6023: LD_INT 1
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: CALL 6957 0 6
6033: GO 5994
6035: POP
6036: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6037: LD_ADDR_VAR 0 2
6041: PUSH
6042: LD_INT 22
6044: PUSH
6045: LD_INT 3
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 21
6054: PUSH
6055: LD_INT 3
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 30
6064: PUSH
6065: LD_INT 31
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: LIST
6076: PPUSH
6077: CALL_OW 69
6081: PUSH
6082: FOR_IN
6083: IFFALSE 6111
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6085: LD_EXP 34
6089: PPUSH
6090: LD_EXP 35
6094: PPUSH
6095: CALL_OW 12
6099: PPUSH
6100: LD_VAR 0 2
6104: PPUSH
6105: CALL 7067 0 2
6109: GO 6082
6111: POP
6112: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6113: LD_INT 3
6115: PPUSH
6116: LD_INT 32
6118: PPUSH
6119: LD_INT 3
6121: PPUSH
6122: CALL 7346 0 3
// end ;
6126: LD_VAR 0 1
6130: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6131: LD_INT 22
6133: PUSH
6134: LD_INT 3
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: PUSH
6141: LD_INT 32
6143: PUSH
6144: LD_INT 1
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PPUSH
6155: CALL_OW 69
6159: IFFALSE 6236
6161: GO 6163
6163: DISABLE
6164: LD_INT 0
6166: PPUSH
// begin enable ;
6167: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6168: LD_ADDR_VAR 0 1
6172: PUSH
6173: LD_INT 22
6175: PUSH
6176: LD_INT 3
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 32
6185: PUSH
6186: LD_INT 1
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: PUSH
6202: FOR_IN
6203: IFFALSE 6234
// if GetFuel ( i ) < 3 then
6205: LD_VAR 0 1
6209: PPUSH
6210: CALL_OW 261
6214: PUSH
6215: LD_INT 3
6217: LESS
6218: IFFALSE 6232
// SetFuel ( i , 3 ) ;
6220: LD_VAR 0 1
6224: PPUSH
6225: LD_INT 3
6227: PPUSH
6228: CALL_OW 240
6232: GO 6202
6234: POP
6235: POP
// end ;
6236: PPOPN 1
6238: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6239: LD_OWVAR 67
6243: PUSH
6244: LD_INT 1
6246: GREATER
6247: IFFALSE 6816
6249: GO 6251
6251: DISABLE
6252: LD_INT 0
6254: PPUSH
6255: PPUSH
6256: PPUSH
6257: PPUSH
// begin uc_side := 3 ;
6258: LD_ADDR_OWVAR 20
6262: PUSH
6263: LD_INT 3
6265: ST_TO_ADDR
// uc_nation := 3 ;
6266: LD_ADDR_OWVAR 21
6270: PUSH
6271: LD_INT 3
6273: ST_TO_ADDR
// for i := 1 to 2 do
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: DOUBLE
6280: LD_INT 1
6282: DEC
6283: ST_TO_ADDR
6284: LD_INT 2
6286: PUSH
6287: FOR_TO
6288: IFFALSE 6402
// begin InitHC_All ( ) ;
6290: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6294: LD_INT 0
6296: PPUSH
6297: LD_INT 4
6299: PUSH
6300: LD_INT 5
6302: PUSH
6303: LD_INT 6
6305: PUSH
6306: LD_INT 6
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: PUSH
6315: LD_OWVAR 67
6319: ARRAY
6320: PPUSH
6321: CALL_OW 381
// un := CreateHuman ;
6325: LD_ADDR_VAR 0 2
6329: PUSH
6330: CALL_OW 44
6334: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: LD_INT 91
6342: PPUSH
6343: LD_INT 87
6345: PPUSH
6346: LD_INT 3
6348: PPUSH
6349: LD_INT 0
6351: PPUSH
6352: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6356: LD_ADDR_EXP 48
6360: PUSH
6361: LD_EXP 48
6365: PPUSH
6366: LD_EXP 48
6370: PUSH
6371: LD_INT 1
6373: PLUS
6374: PPUSH
6375: LD_VAR 0 2
6379: PPUSH
6380: CALL_OW 1
6384: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6385: LD_VAR 0 2
6389: PPUSH
6390: LD_INT 46
6392: PPUSH
6393: LD_INT 78
6395: PPUSH
6396: CALL_OW 114
// end ;
6400: GO 6287
6402: POP
6403: POP
// if Difficulty > 2 then
6404: LD_OWVAR 67
6408: PUSH
6409: LD_INT 2
6411: GREATER
6412: IFFALSE 6544
// begin for i := 1 to 3 do
6414: LD_ADDR_VAR 0 1
6418: PUSH
6419: DOUBLE
6420: LD_INT 1
6422: DEC
6423: ST_TO_ADDR
6424: LD_INT 3
6426: PUSH
6427: FOR_TO
6428: IFFALSE 6542
// begin InitHC_All ( ) ;
6430: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6434: LD_INT 0
6436: PPUSH
6437: LD_INT 4
6439: PUSH
6440: LD_INT 5
6442: PUSH
6443: LD_INT 6
6445: PUSH
6446: LD_INT 6
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PUSH
6455: LD_OWVAR 67
6459: ARRAY
6460: PPUSH
6461: CALL_OW 381
// un := CreateHuman ;
6465: LD_ADDR_VAR 0 2
6469: PUSH
6470: CALL_OW 44
6474: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6475: LD_VAR 0 2
6479: PPUSH
6480: LD_INT 91
6482: PPUSH
6483: LD_INT 87
6485: PPUSH
6486: LD_INT 3
6488: PPUSH
6489: LD_INT 0
6491: PPUSH
6492: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6496: LD_ADDR_EXP 48
6500: PUSH
6501: LD_EXP 48
6505: PPUSH
6506: LD_EXP 48
6510: PUSH
6511: LD_INT 1
6513: PLUS
6514: PPUSH
6515: LD_VAR 0 2
6519: PPUSH
6520: CALL_OW 1
6524: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6525: LD_VAR 0 2
6529: PPUSH
6530: LD_INT 89
6532: PPUSH
6533: LD_INT 148
6535: PPUSH
6536: CALL_OW 114
// end ;
6540: GO 6427
6542: POP
6543: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6544: LD_ADDR_VAR 0 3
6548: PUSH
6549: LD_INT 33
6551: PUSH
6552: LD_INT 61
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 49
6561: PUSH
6562: LD_INT 85
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 76
6571: PUSH
6572: LD_INT 99
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 81
6581: PUSH
6582: LD_INT 135
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 111
6591: PUSH
6592: LD_INT 155
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 147
6601: PUSH
6602: LD_INT 158
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6617: LD_INT 1050
6619: PPUSH
6620: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6624: LD_ADDR_VAR 0 1
6628: PUSH
6629: DOUBLE
6630: LD_INT 1
6632: DEC
6633: ST_TO_ADDR
6634: LD_EXP 48
6638: PUSH
6639: FOR_TO
6640: IFFALSE 6807
// begin un := ruAttackersInForest [ i ] ;
6642: LD_ADDR_VAR 0 2
6646: PUSH
6647: LD_EXP 48
6651: PUSH
6652: LD_VAR 0 1
6656: ARRAY
6657: ST_TO_ADDR
// tag := GetTag ( un ) ;
6658: LD_ADDR_VAR 0 4
6662: PUSH
6663: LD_VAR 0 2
6667: PPUSH
6668: CALL_OW 110
6672: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6673: LD_VAR 0 2
6677: PPUSH
6678: CALL_OW 302
6682: PUSH
6683: LD_VAR 0 2
6687: PPUSH
6688: CALL_OW 314
6692: NOT
6693: AND
6694: IFFALSE 6805
// begin if tag <> i then
6696: LD_VAR 0 4
6700: PUSH
6701: LD_VAR 0 1
6705: NONEQUAL
6706: IFFALSE 6734
// begin SetTag ( un , i ) ;
6708: LD_VAR 0 2
6712: PPUSH
6713: LD_VAR 0 1
6717: PPUSH
6718: CALL_OW 109
// tag := i ;
6722: LD_ADDR_VAR 0 4
6726: PUSH
6727: LD_VAR 0 1
6731: ST_TO_ADDR
// end else
6732: GO 6766
// begin SetTag ( un , i + 1 ) ;
6734: LD_VAR 0 2
6738: PPUSH
6739: LD_VAR 0 1
6743: PUSH
6744: LD_INT 1
6746: PLUS
6747: PPUSH
6748: CALL_OW 109
// tag := i + 1 ;
6752: LD_ADDR_VAR 0 4
6756: PUSH
6757: LD_VAR 0 1
6761: PUSH
6762: LD_INT 1
6764: PLUS
6765: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6766: LD_VAR 0 2
6770: PPUSH
6771: LD_VAR 0 3
6775: PUSH
6776: LD_VAR 0 4
6780: ARRAY
6781: PUSH
6782: LD_INT 1
6784: ARRAY
6785: PPUSH
6786: LD_VAR 0 3
6790: PUSH
6791: LD_VAR 0 4
6795: ARRAY
6796: PUSH
6797: LD_INT 2
6799: ARRAY
6800: PPUSH
6801: CALL_OW 114
// end ; end ;
6805: GO 6639
6807: POP
6808: POP
// until not ruAttackersInForest ;
6809: LD_EXP 48
6813: NOT
6814: IFFALSE 6617
// end ; end_of_file
6816: PPOPN 4
6818: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6819: LD_INT 0
6821: PPUSH
6822: PPUSH
6823: PPUSH
// if not characters then
6824: LD_VAR 0 1
6828: NOT
6829: IFFALSE 6833
// exit ;
6831: GO 6912
// speaker := characters [ rand ( 1 , characters ) ] ;
6833: LD_ADDR_VAR 0 6
6837: PUSH
6838: LD_VAR 0 1
6842: PUSH
6843: LD_INT 1
6845: PPUSH
6846: LD_VAR 0 1
6850: PPUSH
6851: CALL_OW 12
6855: ARRAY
6856: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6857: LD_VAR 0 6
6861: PPUSH
6862: CALL_OW 258
6866: PUSH
6867: LD_INT 1
6869: EQUAL
6870: IFFALSE 6888
// Say ( speaker , dialogMID ) else
6872: LD_VAR 0 6
6876: PPUSH
6877: LD_VAR 0 2
6881: PPUSH
6882: CALL_OW 88
6886: GO 6902
// Say ( speaker , dialogFID ) ;
6888: LD_VAR 0 6
6892: PPUSH
6893: LD_VAR 0 3
6897: PPUSH
6898: CALL_OW 88
// result := speaker ;
6902: LD_ADDR_VAR 0 4
6906: PUSH
6907: LD_VAR 0 6
6911: ST_TO_ADDR
// end ;
6912: LD_VAR 0 4
6916: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6917: LD_INT 0
6919: PPUSH
6920: PPUSH
// for i in charactersList do
6921: LD_ADDR_VAR 0 4
6925: PUSH
6926: LD_VAR 0 1
6930: PUSH
6931: FOR_IN
6932: IFFALSE 6950
// SaveCharacters ( i , ident ) ;
6934: LD_VAR 0 4
6938: PPUSH
6939: LD_VAR 0 2
6943: PPUSH
6944: CALL_OW 38
6948: GO 6931
6950: POP
6951: POP
// end ;
6952: LD_VAR 0 3
6956: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6957: LD_INT 0
6959: PPUSH
6960: PPUSH
6961: PPUSH
6962: PPUSH
// for i = 1 to count do
6963: LD_ADDR_VAR 0 8
6967: PUSH
6968: DOUBLE
6969: LD_INT 1
6971: DEC
6972: ST_TO_ADDR
6973: LD_VAR 0 6
6977: PUSH
6978: FOR_TO
6979: IFFALSE 7060
// begin uc_side = side ;
6981: LD_ADDR_OWVAR 20
6985: PUSH
6986: LD_VAR 0 1
6990: ST_TO_ADDR
// uc_nation = nation ;
6991: LD_ADDR_OWVAR 21
6995: PUSH
6996: LD_VAR 0 2
7000: ST_TO_ADDR
// hc_gallery =  ;
7001: LD_ADDR_OWVAR 33
7005: PUSH
7006: LD_STRING 
7008: ST_TO_ADDR
// hc_name =  ;
7009: LD_ADDR_OWVAR 26
7013: PUSH
7014: LD_STRING 
7016: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7017: LD_INT 0
7019: PPUSH
7020: LD_VAR 0 5
7024: PPUSH
7025: LD_VAR 0 4
7029: PPUSH
7030: CALL_OW 380
// un = CreateHuman ;
7034: LD_ADDR_VAR 0 10
7038: PUSH
7039: CALL_OW 44
7043: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7044: LD_VAR 0 10
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: CALL_OW 52
// end ;
7058: GO 6978
7060: POP
7061: POP
// end ;
7062: LD_VAR 0 7
7066: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7067: LD_INT 0
7069: PPUSH
7070: PPUSH
7071: PPUSH
// uc_side := GetSide ( b ) ;
7072: LD_ADDR_OWVAR 20
7076: PUSH
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 255
7086: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7087: LD_ADDR_OWVAR 21
7091: PUSH
7092: LD_VAR 0 2
7096: PPUSH
7097: CALL_OW 248
7101: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7102: LD_INT 0
7104: PPUSH
7105: LD_INT 1
7107: PPUSH
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7117: LD_ADDR_VAR 0 5
7121: PUSH
7122: LD_VAR 0 2
7126: PPUSH
7127: CALL_OW 254
7131: PUSH
7132: LD_INT 3
7134: MINUS
7135: ST_TO_ADDR
// if dir < 0 then
7136: LD_VAR 0 5
7140: PUSH
7141: LD_INT 0
7143: LESS
7144: IFFALSE 7160
// dir := 6 + dir ;
7146: LD_ADDR_VAR 0 5
7150: PUSH
7151: LD_INT 6
7153: PUSH
7154: LD_VAR 0 5
7158: PLUS
7159: ST_TO_ADDR
// un := CreateHuman ;
7160: LD_ADDR_VAR 0 4
7164: PUSH
7165: CALL_OW 44
7169: ST_TO_ADDR
// SetDir ( un , dir ) ;
7170: LD_VAR 0 4
7174: PPUSH
7175: LD_VAR 0 5
7179: PPUSH
7180: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7184: LD_VAR 0 4
7188: PPUSH
7189: LD_VAR 0 2
7193: PPUSH
7194: CALL_OW 52
// end ;
7198: LD_VAR 0 3
7202: RET
// export function PrepareDifficulty ; begin
7203: LD_INT 0
7205: PPUSH
// case Difficulty of 1 :
7206: LD_OWVAR 67
7210: PUSH
7211: LD_INT 1
7213: DOUBLE
7214: EQUAL
7215: IFTRUE 7219
7217: GO 7238
7219: POP
// begin RuSolMinLevel = 2 ;
7220: LD_ADDR_EXP 34
7224: PUSH
7225: LD_INT 2
7227: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7228: LD_ADDR_EXP 35
7232: PUSH
7233: LD_INT 3
7235: ST_TO_ADDR
// end ; 2 :
7236: GO 7299
7238: LD_INT 2
7240: DOUBLE
7241: EQUAL
7242: IFTRUE 7246
7244: GO 7265
7246: POP
// begin RuSolMinLevel = 3 ;
7247: LD_ADDR_EXP 34
7251: PUSH
7252: LD_INT 3
7254: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7255: LD_ADDR_EXP 35
7259: PUSH
7260: LD_INT 5
7262: ST_TO_ADDR
// end ; 3 .. 4 :
7263: GO 7299
7265: LD_INT 3
7267: DOUBLE
7268: GREATEREQUAL
7269: IFFALSE 7277
7271: LD_INT 4
7273: DOUBLE
7274: LESSEQUAL
7275: IFTRUE 7279
7277: GO 7298
7279: POP
// begin RuSolMinLevel = 4 ;
7280: LD_ADDR_EXP 34
7284: PUSH
7285: LD_INT 4
7287: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7288: LD_ADDR_EXP 35
7292: PUSH
7293: LD_INT 6
7295: ST_TO_ADDR
// end ; end ;
7296: GO 7299
7298: POP
// end ;
7299: LD_VAR 0 1
7303: RET
// export function ShowQuery1 ; begin
7304: LD_INT 0
7306: PPUSH
// result := Query ( QKill ) ;
7307: LD_ADDR_VAR 0 1
7311: PUSH
7312: LD_STRING QKill
7314: PPUSH
7315: CALL_OW 97
7319: ST_TO_ADDR
// end ;
7320: LD_VAR 0 1
7324: RET
// export function ShowQuery2 ; begin
7325: LD_INT 0
7327: PPUSH
// result := Query ( QKill2 ) ;
7328: LD_ADDR_VAR 0 1
7332: PUSH
7333: LD_STRING QKill2
7335: PPUSH
7336: CALL_OW 97
7340: ST_TO_ADDR
// end ;
7341: LD_VAR 0 1
7345: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7346: LD_INT 0
7348: PPUSH
7349: PPUSH
7350: PPUSH
7351: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
7352: LD_ADDR_VAR 0 7
7356: PUSH
7357: LD_INT 48
7359: PUSH
7360: LD_INT 49
7362: PUSH
7363: LD_INT 50
7365: PUSH
7366: LD_INT 20
7368: PUSH
7369: LD_INT 1
7371: PUSH
7372: LD_INT 51
7374: PUSH
7375: LD_INT 52
7377: PUSH
7378: LD_INT 69
7380: PUSH
7381: LD_INT 39
7383: PUSH
7384: LD_INT 34
7386: PUSH
7387: LD_INT 40
7389: PUSH
7390: LD_INT 53
7392: PUSH
7393: LD_INT 71
7395: PUSH
7396: LD_INT 57
7398: PUSH
7399: LD_INT 58
7401: PUSH
7402: LD_INT 44
7404: PUSH
7405: LD_INT 32
7407: PUSH
7408: LD_INT 27
7410: PUSH
7411: LD_INT 23
7413: PUSH
7414: LD_INT 33
7416: PUSH
7417: LD_INT 59
7419: PUSH
7420: LD_INT 54
7422: PUSH
7423: LD_INT 55
7425: PUSH
7426: LD_INT 56
7428: PUSH
7429: LD_INT 63
7431: PUSH
7432: LD_INT 64
7434: PUSH
7435: LD_INT 65
7437: PUSH
7438: LD_INT 30
7440: PUSH
7441: LD_INT 31
7443: PUSH
7444: LD_INT 21
7446: PUSH
7447: LD_INT 22
7449: PUSH
7450: LD_INT 25
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: ST_TO_ADDR
// for i = 1 to list do
7487: LD_ADDR_VAR 0 5
7491: PUSH
7492: DOUBLE
7493: LD_INT 1
7495: DEC
7496: ST_TO_ADDR
7497: LD_VAR 0 7
7501: PUSH
7502: FOR_TO
7503: IFFALSE 7575
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7505: LD_VAR 0 7
7509: PUSH
7510: LD_VAR 0 5
7514: ARRAY
7515: PPUSH
7516: LD_VAR 0 1
7520: PPUSH
7521: CALL_OW 321
7525: PUSH
7526: LD_INT 1
7528: EQUAL
7529: PUSH
7530: LD_VAR 0 7
7534: PUSH
7535: LD_VAR 0 5
7539: ARRAY
7540: PPUSH
7541: LD_VAR 0 3
7545: PPUSH
7546: CALL_OW 482
7550: AND
7551: IFFALSE 7573
// AddComResearch ( lab , list [ i ] ) ;
7553: LD_VAR 0 2
7557: PPUSH
7558: LD_VAR 0 7
7562: PUSH
7563: LD_VAR 0 5
7567: ARRAY
7568: PPUSH
7569: CALL_OW 184
7573: GO 7502
7575: POP
7576: POP
// end ;
7577: LD_VAR 0 4
7581: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7582: LD_INT 0
7584: PPUSH
7585: PPUSH
7586: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7587: LD_INT 22
7589: PUSH
7590: LD_VAR 0 1
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 2
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 69
7617: PUSH
7618: LD_VAR 0 3
7622: LESSEQUAL
7623: IFFALSE 7731
// begin for i = 1 to vehCount do
7625: LD_ADDR_VAR 0 9
7629: PUSH
7630: DOUBLE
7631: LD_INT 1
7633: DEC
7634: ST_TO_ADDR
7635: LD_VAR 0 3
7639: PUSH
7640: FOR_TO
7641: IFFALSE 7729
// begin weapon := weaponTab [ i ] ;
7643: LD_ADDR_VAR 0 10
7647: PUSH
7648: LD_VAR 0 4
7652: PUSH
7653: LD_VAR 0 9
7657: ARRAY
7658: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7659: LD_VAR 0 10
7663: PUSH
7664: LD_INT 46
7666: EQUAL
7667: IFFALSE 7698
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7669: LD_VAR 0 2
7673: PPUSH
7674: LD_INT 24
7676: PPUSH
7677: LD_VAR 0 5
7681: PPUSH
7682: LD_VAR 0 6
7686: PPUSH
7687: LD_VAR 0 10
7691: PPUSH
7692: CALL_OW 185
7696: GO 7727
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7698: LD_VAR 0 2
7702: PPUSH
7703: LD_VAR 0 7
7707: PPUSH
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_VAR 0 6
7717: PPUSH
7718: LD_VAR 0 10
7722: PPUSH
7723: CALL_OW 185
// end ;
7727: GO 7640
7729: POP
7730: POP
// end ; end ;
7731: LD_VAR 0 8
7735: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7736: LD_INT 0
7738: PPUSH
7739: PPUSH
7740: PPUSH
7741: PPUSH
7742: PPUSH
7743: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7744: LD_ADDR_VAR 0 8
7748: PUSH
7749: LD_VAR 0 2
7753: PPUSH
7754: CALL_OW 313
7758: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7759: LD_ADDR_VAR 0 9
7763: PUSH
7764: LD_VAR 0 3
7768: PPUSH
7769: LD_INT 22
7771: PUSH
7772: LD_VAR 0 1
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: LD_INT 25
7783: PUSH
7784: LD_INT 2
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 24
7793: PUSH
7794: LD_INT 750
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: LD_INT 3
7803: PUSH
7804: LD_INT 54
7806: PUSH
7807: EMPTY
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: PPUSH
7820: CALL_OW 70
7824: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7825: LD_ADDR_VAR 0 6
7829: PUSH
7830: LD_VAR 0 3
7834: PPUSH
7835: LD_INT 22
7837: PUSH
7838: LD_VAR 0 1
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: PUSH
7847: LD_INT 21
7849: PUSH
7850: LD_INT 3
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: LD_INT 24
7862: PUSH
7863: LD_INT 1000
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: LIST
7878: PUSH
7879: EMPTY
7880: LIST
7881: PPUSH
7882: CALL_OW 70
7886: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7887: LD_VAR 0 6
7891: NOT
7892: PUSH
7893: LD_INT 22
7895: PUSH
7896: LD_VAR 0 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 2
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 24
7917: PUSH
7918: LD_INT 250
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: LIST
7929: PPUSH
7930: CALL_OW 69
7934: NOT
7935: AND
7936: IFFALSE 7940
// exit ;
7938: GO 8098
// if buildingsList and engineerOkInside then
7940: LD_VAR 0 6
7944: PUSH
7945: LD_VAR 0 8
7949: AND
7950: IFFALSE 7961
// ComExitBuilding ( engineerOkInside ) ;
7952: LD_VAR 0 8
7956: PPUSH
7957: CALL_OW 122
// if buildingsList and engineerOkOutside then
7961: LD_VAR 0 6
7965: PUSH
7966: LD_VAR 0 9
7970: AND
7971: IFFALSE 7991
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7973: LD_VAR 0 9
7977: PPUSH
7978: LD_VAR 0 6
7982: PUSH
7983: LD_INT 1
7985: ARRAY
7986: PPUSH
7987: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
7991: LD_VAR 0 6
7995: PUSH
7996: LD_INT 0
7998: EQUAL
7999: PUSH
8000: LD_VAR 0 4
8004: PUSH
8005: LD_INT 0
8007: EQUAL
8008: AND
8009: PUSH
8010: LD_VAR 0 9
8014: AND
8015: IFFALSE 8031
// ComEnterUnit ( engineerOkOutside , depot ) ;
8017: LD_VAR 0 9
8021: PPUSH
8022: LD_VAR 0 2
8026: PPUSH
8027: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8031: LD_VAR 0 9
8035: PUSH
8036: LD_VAR 0 6
8040: PUSH
8041: LD_INT 0
8043: EQUAL
8044: AND
8045: PUSH
8046: LD_VAR 0 4
8050: AND
8051: IFFALSE 8098
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8053: LD_VAR 0 9
8057: PPUSH
8058: LD_VAR 0 4
8062: PUSH
8063: LD_INT 1
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 4
8071: PUSH
8072: LD_INT 2
8074: ARRAY
8075: PPUSH
8076: LD_VAR 0 4
8080: PUSH
8081: LD_INT 3
8083: ARRAY
8084: PPUSH
8085: LD_VAR 0 4
8089: PUSH
8090: LD_INT 4
8092: ARRAY
8093: PPUSH
8094: CALL_OW 145
// end ;
8098: LD_VAR 0 5
8102: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8103: LD_INT 0
8105: PPUSH
8106: PPUSH
8107: PPUSH
8108: PPUSH
8109: PPUSH
8110: PPUSH
8111: PPUSH
8112: PPUSH
8113: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8114: LD_ADDR_VAR 0 6
8118: PUSH
8119: LD_INT 22
8121: PUSH
8122: LD_VAR 0 1
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_INT 25
8133: PUSH
8134: LD_INT 4
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 23
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 24
8153: PUSH
8154: LD_INT 251
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8172: LD_ADDR_VAR 0 7
8176: PUSH
8177: LD_VAR 0 3
8181: PPUSH
8182: LD_INT 22
8184: PUSH
8185: LD_VAR 0 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 23
8196: PUSH
8197: LD_INT 2
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PUSH
8204: LD_INT 25
8206: PUSH
8207: LD_INT 4
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 50
8216: PUSH
8217: EMPTY
8218: LIST
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: PPUSH
8226: CALL_OW 70
8230: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8231: LD_ADDR_VAR 0 10
8235: PUSH
8236: LD_VAR 0 3
8240: PPUSH
8241: LD_INT 22
8243: PUSH
8244: LD_VAR 0 1
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: PUSH
8253: LD_INT 21
8255: PUSH
8256: LD_INT 1
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 3
8265: PUSH
8266: LD_INT 25
8268: PUSH
8269: LD_INT 3
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: LD_INT 3
8282: PUSH
8283: LD_INT 24
8285: PUSH
8286: LD_INT 750
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: PPUSH
8303: CALL_OW 70
8307: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8308: LD_ADDR_VAR 0 11
8312: PUSH
8313: LD_VAR 0 2
8317: PPUSH
8318: LD_INT 22
8320: PUSH
8321: LD_VAR 0 1
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 21
8332: PUSH
8333: LD_INT 1
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: LD_INT 3
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: LD_INT 3
8359: PUSH
8360: LD_INT 24
8362: PUSH
8363: LD_INT 1000
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: PPUSH
8380: CALL_OW 70
8384: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8385: LD_VAR 0 10
8389: NOT
8390: PUSH
8391: LD_VAR 0 11
8395: NOT
8396: AND
8397: PUSH
8398: LD_VAR 0 6
8402: NOT
8403: AND
8404: IFFALSE 8408
// exit ;
8406: GO 8614
// if damageUnits and sci_list then
8408: LD_VAR 0 10
8412: PUSH
8413: LD_VAR 0 6
8417: AND
8418: IFFALSE 8434
// ComMoveToArea ( damageUnits , healArea ) ;
8420: LD_VAR 0 10
8424: PPUSH
8425: LD_VAR 0 2
8429: PPUSH
8430: CALL_OW 113
// if unitsToHeal and sci_list then
8434: LD_VAR 0 11
8438: PUSH
8439: LD_VAR 0 6
8443: AND
8444: IFFALSE 8455
// ComExitBuilding ( sci_list ) ;
8446: LD_VAR 0 6
8450: PPUSH
8451: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8455: LD_VAR 0 11
8459: PUSH
8460: LD_VAR 0 7
8464: AND
8465: IFFALSE 8485
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8467: LD_VAR 0 7
8471: PPUSH
8472: LD_VAR 0 11
8476: PUSH
8477: LD_INT 1
8479: ARRAY
8480: PPUSH
8481: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8485: LD_VAR 0 10
8489: PUSH
8490: LD_INT 0
8492: EQUAL
8493: PUSH
8494: LD_VAR 0 11
8498: PUSH
8499: LD_INT 0
8501: EQUAL
8502: AND
8503: PUSH
8504: LD_VAR 0 7
8508: AND
8509: IFFALSE 8614
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8511: LD_ADDR_VAR 0 12
8515: PUSH
8516: LD_INT 22
8518: PUSH
8519: LD_VAR 0 1
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 21
8530: PUSH
8531: LD_INT 3
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 30
8540: PUSH
8541: LD_INT 8
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: LIST
8552: PPUSH
8553: CALL_OW 69
8557: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8558: LD_ADDR_VAR 0 13
8562: PUSH
8563: LD_INT 1
8565: PPUSH
8566: LD_VAR 0 12
8570: PPUSH
8571: CALL_OW 12
8575: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8576: LD_VAR 0 7
8580: PPUSH
8581: LD_INT 3
8583: PUSH
8584: LD_INT 60
8586: PUSH
8587: EMPTY
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PPUSH
8594: CALL_OW 72
8598: PPUSH
8599: LD_VAR 0 12
8603: PUSH
8604: LD_VAR 0 13
8608: ARRAY
8609: PPUSH
8610: CALL_OW 120
// end ; end ;
8614: LD_VAR 0 5
8618: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8619: LD_INT 0
8621: PPUSH
8622: PPUSH
8623: PPUSH
8624: PPUSH
8625: PPUSH
// tmp := [ ] ;
8626: LD_ADDR_VAR 0 6
8630: PUSH
8631: EMPTY
8632: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8633: LD_ADDR_VAR 0 7
8637: PUSH
8638: LD_INT 22
8640: PUSH
8641: LD_VAR 0 1
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 30
8652: PUSH
8653: LD_INT 32
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PPUSH
8664: CALL_OW 69
8668: ST_TO_ADDR
// if bunkers then
8669: LD_VAR 0 7
8673: IFFALSE 8743
// for i in bunkers do
8675: LD_ADDR_VAR 0 4
8679: PUSH
8680: LD_VAR 0 7
8684: PUSH
8685: FOR_IN
8686: IFFALSE 8741
// for j in UnitsInside ( i ) do
8688: LD_ADDR_VAR 0 5
8692: PUSH
8693: LD_VAR 0 4
8697: PPUSH
8698: CALL_OW 313
8702: PUSH
8703: FOR_IN
8704: IFFALSE 8737
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8706: LD_ADDR_VAR 0 6
8710: PUSH
8711: LD_VAR 0 6
8715: PPUSH
8716: LD_VAR 0 6
8720: PUSH
8721: LD_INT 1
8723: PLUS
8724: PPUSH
8725: LD_VAR 0 5
8729: PPUSH
8730: CALL_OW 1
8734: ST_TO_ADDR
8735: GO 8703
8737: POP
8738: POP
8739: GO 8685
8741: POP
8742: POP
// if tmp then
8743: LD_VAR 0 6
8747: IFFALSE 8787
// begin ComExitBuilding ( tmp ) ;
8749: LD_VAR 0 6
8753: PPUSH
8754: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8758: LD_VAR 0 6
8762: PPUSH
8763: LD_VAR 0 2
8767: PPUSH
8768: CALL_OW 250
8772: PPUSH
8773: LD_VAR 0 2
8777: PPUSH
8778: CALL_OW 251
8782: PPUSH
8783: CALL_OW 174
// end ; end ;
8787: LD_VAR 0 3
8791: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8792: LD_INT 0
8794: PPUSH
8795: PPUSH
8796: PPUSH
// enable ;
8797: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8798: LD_ADDR_VAR 0 6
8802: PUSH
8803: LD_VAR 0 3
8807: PPUSH
8808: CALL_OW 435
8812: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8813: LD_ADDR_VAR 0 5
8817: PUSH
8818: LD_INT 22
8820: PUSH
8821: LD_VAR 0 1
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 34
8832: PUSH
8833: LD_VAR 0 2
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PPUSH
8846: CALL_OW 69
8850: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8851: LD_VAR 0 5
8855: PUSH
8856: LD_VAR 0 3
8860: PPUSH
8861: CALL_OW 435
8865: AND
8866: PUSH
8867: LD_VAR 0 6
8871: AND
8872: IFFALSE 8905
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8874: LD_VAR 0 5
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 6
8887: PUSH
8888: LD_INT 1
8890: ARRAY
8891: PPUSH
8892: LD_VAR 0 6
8896: PUSH
8897: LD_INT 2
8899: ARRAY
8900: PPUSH
8901: CALL_OW 177
// end ;
8905: LD_VAR 0 4
8909: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8910: LD_INT 0
8912: PPUSH
8913: PPUSH
8914: PPUSH
8915: PPUSH
8916: PPUSH
8917: PPUSH
8918: PPUSH
8919: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8920: LD_ADDR_VAR 0 6
8924: PUSH
8925: LD_VAR 0 2
8929: PPUSH
8930: LD_INT 22
8932: PUSH
8933: LD_VAR 0 1
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PUSH
8942: LD_INT 56
8944: PUSH
8945: EMPTY
8946: LIST
8947: PUSH
8948: LD_INT 24
8950: PUSH
8951: LD_INT 700
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: LD_INT 3
8960: PUSH
8961: LD_INT 60
8963: PUSH
8964: EMPTY
8965: LIST
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: LD_INT 2
8973: PUSH
8974: LD_INT 25
8976: PUSH
8977: LD_INT 1
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: LD_INT 25
8986: PUSH
8987: LD_INT 5
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 25
8996: PUSH
8997: LD_INT 8
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PUSH
9004: LD_INT 25
9006: PUSH
9007: LD_INT 9
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL_OW 70
9032: PUSH
9033: LD_EXP 47
9037: PUSH
9038: LD_EXP 48
9042: UNION
9043: DIFF
9044: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9045: LD_ADDR_VAR 0 7
9049: PUSH
9050: LD_VAR 0 2
9054: PPUSH
9055: LD_INT 22
9057: PUSH
9058: LD_VAR 0 1
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: LD_INT 30
9069: PUSH
9070: LD_INT 32
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PUSH
9077: LD_INT 58
9079: PUSH
9080: EMPTY
9081: LIST
9082: PUSH
9083: LD_INT 24
9085: PUSH
9086: LD_INT 251
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: PPUSH
9099: CALL_OW 70
9103: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9104: LD_ADDR_VAR 0 9
9108: PUSH
9109: LD_VAR 0 2
9113: PPUSH
9114: LD_INT 22
9116: PUSH
9117: LD_VAR 0 1
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: LD_INT 2
9128: PUSH
9129: LD_INT 30
9131: PUSH
9132: LD_INT 4
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: LD_INT 5
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: LIST
9153: PUSH
9154: LD_INT 24
9156: PUSH
9157: LD_INT 251
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: LIST
9168: PPUSH
9169: CALL_OW 70
9173: ST_TO_ADDR
// if barrackList then
9174: LD_VAR 0 9
9178: IFFALSE 9334
// begin if turretList = 0 then
9180: LD_VAR 0 7
9184: PUSH
9185: LD_INT 0
9187: EQUAL
9188: IFFALSE 9226
// begin if soldiersList then
9190: LD_VAR 0 6
9194: IFFALSE 9224
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9196: LD_VAR 0 6
9200: PPUSH
9201: LD_VAR 0 9
9205: PUSH
9206: LD_INT 1
9208: PPUSH
9209: LD_VAR 0 9
9213: PPUSH
9214: CALL_OW 12
9218: ARRAY
9219: PPUSH
9220: CALL_OW 120
// end else
9224: GO 9334
// begin for i in barrackList do
9226: LD_ADDR_VAR 0 4
9230: PUSH
9231: LD_VAR 0 9
9235: PUSH
9236: FOR_IN
9237: IFFALSE 9332
// begin if not turretList then
9239: LD_VAR 0 7
9243: NOT
9244: IFFALSE 9250
// exit ;
9246: POP
9247: POP
9248: GO 9334
// insideUnits = UnitsInside ( i ) ;
9250: LD_ADDR_VAR 0 10
9254: PUSH
9255: LD_VAR 0 4
9259: PPUSH
9260: CALL_OW 313
9264: ST_TO_ADDR
// if insideUnits then
9265: LD_VAR 0 10
9269: IFFALSE 9330
// begin tmp := insideUnits [ 1 ] ;
9271: LD_ADDR_VAR 0 8
9275: PUSH
9276: LD_VAR 0 10
9280: PUSH
9281: LD_INT 1
9283: ARRAY
9284: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9285: LD_VAR 0 8
9289: PPUSH
9290: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9294: LD_VAR 0 8
9298: PPUSH
9299: LD_VAR 0 7
9303: PUSH
9304: LD_INT 1
9306: ARRAY
9307: PPUSH
9308: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9312: LD_ADDR_VAR 0 7
9316: PUSH
9317: LD_VAR 0 7
9321: PPUSH
9322: LD_INT 1
9324: PPUSH
9325: CALL_OW 3
9329: ST_TO_ADDR
// end ; end ;
9330: GO 9236
9332: POP
9333: POP
// end ; end ; end ;
9334: LD_VAR 0 3
9338: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9339: LD_INT 0
9341: PPUSH
9342: PPUSH
9343: PPUSH
9344: PPUSH
9345: PPUSH
9346: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9347: LD_ADDR_VAR 0 8
9351: PUSH
9352: LD_INT 22
9354: PUSH
9355: LD_VAR 0 1
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: LD_INT 21
9366: PUSH
9367: LD_INT 2
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 34
9376: PUSH
9377: LD_INT 52
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: LIST
9388: PPUSH
9389: CALL_OW 69
9393: ST_TO_ADDR
// if not craneList then
9394: LD_VAR 0 8
9398: NOT
9399: IFFALSE 9403
// exit ;
9401: GO 9837
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9403: LD_ADDR_VAR 0 9
9407: PUSH
9408: LD_INT 22
9410: PUSH
9411: LD_VAR 0 1
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 21
9422: PUSH
9423: LD_INT 3
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: LD_INT 24
9435: PUSH
9436: LD_INT 1000
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: PUSH
9452: EMPTY
9453: LIST
9454: PPUSH
9455: CALL_OW 69
9459: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9460: LD_VAR 0 9
9464: PUSH
9465: LD_VAR 0 8
9469: PPUSH
9470: LD_INT 24
9472: PUSH
9473: LD_INT 750
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PPUSH
9480: CALL_OW 72
9484: AND
9485: IFFALSE 9520
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9487: LD_VAR 0 8
9491: PPUSH
9492: LD_INT 24
9494: PUSH
9495: LD_INT 750
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PPUSH
9502: CALL_OW 72
9506: PPUSH
9507: LD_VAR 0 9
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: PPUSH
9516: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9520: LD_VAR 0 8
9524: PPUSH
9525: LD_INT 3
9527: PUSH
9528: LD_INT 24
9530: PUSH
9531: LD_INT 750
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PPUSH
9542: CALL_OW 72
9546: IFFALSE 9584
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9548: LD_VAR 0 8
9552: PPUSH
9553: LD_INT 3
9555: PUSH
9556: LD_INT 24
9558: PUSH
9559: LD_INT 750
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PPUSH
9570: CALL_OW 72
9574: PPUSH
9575: LD_VAR 0 2
9579: PPUSH
9580: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9584: LD_VAR 0 8
9588: PUSH
9589: LD_VAR 0 9
9593: PUSH
9594: LD_INT 0
9596: EQUAL
9597: AND
9598: PUSH
9599: LD_VAR 0 3
9603: AND
9604: IFFALSE 9651
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9606: LD_VAR 0 8
9610: PPUSH
9611: LD_VAR 0 3
9615: PUSH
9616: LD_INT 1
9618: ARRAY
9619: PPUSH
9620: LD_VAR 0 3
9624: PUSH
9625: LD_INT 2
9627: ARRAY
9628: PPUSH
9629: LD_VAR 0 3
9633: PUSH
9634: LD_INT 3
9636: ARRAY
9637: PPUSH
9638: LD_VAR 0 3
9642: PUSH
9643: LD_INT 4
9645: ARRAY
9646: PPUSH
9647: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9651: LD_ADDR_VAR 0 7
9655: PUSH
9656: LD_VAR 0 2
9660: PPUSH
9661: LD_INT 22
9663: PUSH
9664: LD_VAR 0 1
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: LD_INT 21
9675: PUSH
9676: LD_INT 2
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PUSH
9683: LD_INT 34
9685: PUSH
9686: LD_INT 52
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 3
9695: PUSH
9696: LD_INT 24
9698: PUSH
9699: LD_INT 750
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: PPUSH
9716: CALL_OW 70
9720: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9721: LD_ADDR_VAR 0 6
9725: PUSH
9726: LD_VAR 0 2
9730: PPUSH
9731: LD_INT 22
9733: PUSH
9734: LD_VAR 0 1
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 2
9745: PUSH
9746: LD_INT 30
9748: PUSH
9749: LD_INT 0
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 30
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PPUSH
9775: CALL_OW 70
9779: ST_TO_ADDR
// if crane then
9780: LD_VAR 0 7
9784: IFFALSE 9837
// for i in crane do
9786: LD_ADDR_VAR 0 5
9790: PUSH
9791: LD_VAR 0 7
9795: PUSH
9796: FOR_IN
9797: IFFALSE 9835
// begin if dep then
9799: LD_VAR 0 6
9803: IFFALSE 9819
// ComMoveUnit ( i , dep ) ;
9805: LD_VAR 0 5
9809: PPUSH
9810: LD_VAR 0 6
9814: PPUSH
9815: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9819: LD_VAR 0 5
9823: PPUSH
9824: CALL_OW 311
9828: PPUSH
9829: CALL 75798 0 1
// end ;
9833: GO 9796
9835: POP
9836: POP
// end ; end_of_file
9837: LD_VAR 0 4
9841: RET
// export function Action ; begin
9842: LD_INT 0
9844: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
9845: LD_INT 66
9847: PPUSH
9848: LD_INT 4
9850: PPUSH
9851: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
9855: LD_INT 22
9857: PUSH
9858: LD_INT 1
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 25
9867: PUSH
9868: LD_INT 2
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PPUSH
9879: CALL_OW 69
9883: PUSH
9884: LD_INT 0
9886: EQUAL
9887: IFFALSE 9901
// SetClass ( JMM , 2 ) ;
9889: LD_EXP 1
9893: PPUSH
9894: LD_INT 2
9896: PPUSH
9897: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
9901: LD_STRING M1
9903: PPUSH
9904: CALL_OW 337
// case Difficulty of 1 :
9908: LD_OWVAR 67
9912: PUSH
9913: LD_INT 1
9915: DOUBLE
9916: EQUAL
9917: IFTRUE 9921
9919: GO 9931
9921: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
9922: LD_STRING M1-1
9924: PPUSH
9925: CALL_OW 337
9929: GO 9974
9931: LD_INT 2
9933: DOUBLE
9934: EQUAL
9935: IFTRUE 9939
9937: GO 9949
9939: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 .. 4 :
9940: LD_STRING M1-2
9942: PPUSH
9943: CALL_OW 337
9947: GO 9974
9949: LD_INT 3
9951: DOUBLE
9952: GREATEREQUAL
9953: IFFALSE 9961
9955: LD_INT 4
9957: DOUBLE
9958: LESSEQUAL
9959: IFTRUE 9963
9961: GO 9973
9963: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
9964: LD_STRING M1-3
9966: PPUSH
9967: CALL_OW 337
9971: GO 9974
9973: POP
// ChangeMissionObjectives ( M1cont ) ;
9974: LD_STRING M1cont
9976: PPUSH
9977: CALL_OW 337
// wait ( 0 0$2 ) ;
9981: LD_INT 70
9983: PPUSH
9984: CALL_OW 67
// SaveForQuickRestart ;
9988: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
9992: LD_INT 525
9994: PPUSH
9995: LD_INT 700
9997: PPUSH
9998: CALL_OW 12
10002: PPUSH
10003: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
10007: LD_INT 5
10009: PPUSH
10010: LD_INT 82
10012: PPUSH
10013: LD_INT 38
10015: PPUSH
10016: LD_INT 10
10018: PPUSH
10019: LD_INT 1
10021: PPUSH
10022: CALL_OW 56
// wait ( 0 0$14 ) ;
10026: LD_INT 490
10028: PPUSH
10029: CALL_OW 67
// firstCrateSpawn := true ;
10033: LD_ADDR_EXP 40
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// end ;
10041: LD_VAR 0 1
10045: RET
// every 0 0$02 trigger firstCrateSpawn do
10046: LD_EXP 40
10050: IFFALSE 10413
10052: GO 10054
10054: DISABLE
// begin if IsOk ( Lisa ) then
10055: LD_EXP 2
10059: PPUSH
10060: CALL_OW 302
10064: IFFALSE 10080
// Say ( Lisa , DR0-Lisa-1 ) else
10066: LD_EXP 2
10070: PPUSH
10071: LD_STRING DR0-Lisa-1
10073: PPUSH
10074: CALL_OW 88
10078: GO 10226
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10080: LD_INT 22
10082: PUSH
10083: LD_INT 1
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PUSH
10090: LD_INT 21
10092: PUSH
10093: LD_INT 1
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 26
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 2
10112: PUSH
10113: LD_INT 25
10115: PUSH
10116: LD_INT 1
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 25
10125: PUSH
10126: LD_INT 2
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: LD_INT 25
10135: PUSH
10136: LD_INT 3
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: LD_INT 25
10145: PUSH
10146: LD_INT 4
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: PPUSH
10166: CALL_OW 69
10170: PUSH
10171: LD_EXP 1
10175: PUSH
10176: LD_EXP 8
10180: PUSH
10181: LD_EXP 5
10185: PUSH
10186: LD_EXP 6
10190: PUSH
10191: LD_EXP 7
10195: PUSH
10196: LD_EXP 4
10200: PUSH
10201: LD_EXP 3
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: DIFF
10215: PPUSH
10216: LD_STRING DR0-Sol1-1
10218: PPUSH
10219: LD_STRING DR0-Sol1-1
10221: PPUSH
10222: CALL 6819 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10226: LD_INT 22
10228: PUSH
10229: LD_INT 1
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 21
10238: PUSH
10239: LD_INT 1
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: LD_INT 26
10248: PUSH
10249: LD_INT 1
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: LD_INT 25
10261: PUSH
10262: LD_INT 1
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: LD_INT 25
10271: PUSH
10272: LD_INT 2
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: LD_INT 25
10281: PUSH
10282: LD_INT 3
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 25
10291: PUSH
10292: LD_INT 4
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: PPUSH
10312: CALL_OW 69
10316: PUSH
10317: LD_EXP 1
10321: PUSH
10322: LD_EXP 8
10326: PUSH
10327: LD_EXP 5
10331: PUSH
10332: LD_EXP 2
10336: PUSH
10337: LD_EXP 6
10341: PUSH
10342: LD_EXP 7
10346: PUSH
10347: LD_EXP 4
10351: PUSH
10352: LD_EXP 3
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: DIFF
10367: PPUSH
10368: LD_STRING DR0-Sol2-1
10370: PPUSH
10371: LD_STRING DR0-Sol2-1
10373: PPUSH
10374: CALL 6819 0 3
// if IsOk ( Cyrus ) then
10378: LD_EXP 4
10382: PPUSH
10383: CALL_OW 302
10387: IFFALSE 10401
// Say ( Cyrus , DR0-Cyrus-1 ) ;
10389: LD_EXP 4
10393: PPUSH
10394: LD_STRING DR0-Cyrus-1
10396: PPUSH
10397: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
10401: LD_EXP 1
10405: PPUSH
10406: LD_STRING DR0-JMM-1
10408: PPUSH
10409: CALL_OW 88
// end ;
10413: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
10414: LD_EXP 5
10418: PPUSH
10419: CALL_OW 302
10423: PUSH
10424: LD_INT 22
10426: PUSH
10427: LD_INT 1
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: LD_INT 25
10436: PUSH
10437: LD_INT 16
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PPUSH
10448: CALL_OW 69
10452: PUSH
10453: LD_INT 0
10455: GREATER
10456: AND
10457: PUSH
10458: LD_INT 1
10460: PPUSH
10461: CALL_OW 463
10465: NOT
10466: AND
10467: IFFALSE 10745
10469: GO 10471
10471: DISABLE
// begin DialogueOn ;
10472: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10476: LD_EXP 5
10480: PPUSH
10481: LD_STRING D10-Frank-1
10483: PPUSH
10484: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10488: LD_INT 22
10490: PUSH
10491: LD_INT 1
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 21
10500: PUSH
10501: LD_INT 1
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: LD_INT 2
10510: PUSH
10511: LD_INT 25
10513: PUSH
10514: LD_INT 1
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 2
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 25
10533: PUSH
10534: LD_INT 3
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 4
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: PUSH
10568: LD_EXP 1
10572: PUSH
10573: LD_EXP 5
10577: PUSH
10578: LD_EXP 2
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: DIFF
10588: PPUSH
10589: LD_STRING D10-Sol1-1
10591: PPUSH
10592: LD_STRING D10-FSol1-1
10594: PPUSH
10595: CALL 6819 0 3
// Say ( Frank , D10-Frank-2 ) ;
10599: LD_EXP 5
10603: PPUSH
10604: LD_STRING D10-Frank-2
10606: PPUSH
10607: CALL_OW 88
// if IsOK ( Lisa ) then
10611: LD_EXP 2
10615: PPUSH
10616: CALL_OW 302
10620: IFFALSE 10636
// begin Say ( Lisa , D10-Lisa-2 ) ;
10622: LD_EXP 2
10626: PPUSH
10627: LD_STRING D10-Lisa-2
10629: PPUSH
10630: CALL_OW 88
// end else
10634: GO 10741
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10636: LD_INT 22
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 21
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 2
10658: PUSH
10659: LD_INT 25
10661: PUSH
10662: LD_INT 1
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: LD_INT 25
10671: PUSH
10672: LD_INT 2
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PUSH
10679: LD_INT 25
10681: PUSH
10682: LD_INT 3
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 25
10691: PUSH
10692: LD_INT 4
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: LIST
10710: PPUSH
10711: CALL_OW 69
10715: PUSH
10716: LD_EXP 1
10720: PUSH
10721: LD_EXP 5
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: DIFF
10730: PPUSH
10731: LD_STRING D10-Sol1-2
10733: PPUSH
10734: LD_STRING D10-FSol1-2
10736: PPUSH
10737: CALL 6819 0 3
// end ; DialogueOff ;
10741: CALL_OW 7
// end ;
10745: END
// every 10 10$30 trigger not InBattle ( 1 ) do
10746: LD_INT 1
10748: PPUSH
10749: CALL_OW 463
10753: NOT
10754: IFFALSE 11049
10756: GO 10758
10758: DISABLE
// begin HarrisonSupport ;
10759: CALL 2491 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
10763: LD_EXP 17
10767: PPUSH
10768: CALL_OW 310
10772: PPUSH
10773: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
10777: LD_EXP 17
10781: PPUSH
10782: LD_STRING DEng-Eng1-1
10784: PPUSH
10785: CALL_OW 88
// wait ( 1 1$0 ) ;
10789: LD_INT 2100
10791: PPUSH
10792: CALL_OW 67
// DialogueOn ;
10796: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
10800: LD_EXP 14
10804: PPUSH
10805: LD_STRING DRem-Har-1
10807: PPUSH
10808: CALL_OW 94
// if contactWithRussian = 1 then
10812: LD_EXP 22
10816: PUSH
10817: LD_INT 1
10819: EQUAL
10820: IFFALSE 10836
// begin Say ( JMM , DRem-JMM-1 ) ;
10822: LD_EXP 1
10826: PPUSH
10827: LD_STRING DRem-JMM-1
10829: PPUSH
10830: CALL_OW 88
// end else
10834: GO 10848
// begin Say ( JMM , DRem-JMM-1a ) ;
10836: LD_EXP 1
10840: PPUSH
10841: LD_STRING DRem-JMM-1a
10843: PPUSH
10844: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
10848: LD_EXP 14
10852: PPUSH
10853: LD_STRING DRem-Har-2
10855: PPUSH
10856: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
10860: LD_STRING DenisInDelta
10862: PPUSH
10863: LD_INT 0
10865: PPUSH
10866: CALL_OW 30
10870: PUSH
10871: LD_INT 1
10873: EQUAL
10874: IFFALSE 10890
// begin Say ( JMM , DRem-JMM-2 ) ;
10876: LD_EXP 1
10880: PPUSH
10881: LD_STRING DRem-JMM-2
10883: PPUSH
10884: CALL_OW 88
// end else
10888: GO 10902
// begin Say ( JMM , DRem-JMM-2a ) ;
10890: LD_EXP 1
10894: PPUSH
10895: LD_STRING DRem-JMM-2a
10897: PPUSH
10898: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
10902: LD_EXP 14
10906: PPUSH
10907: LD_STRING DRem-Har-3
10909: PPUSH
10910: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
10914: LD_EXP 1
10918: PPUSH
10919: LD_STRING DRem-JMM-3
10921: PPUSH
10922: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
10926: LD_EXP 14
10930: PPUSH
10931: LD_STRING DRem-Har-4
10933: PPUSH
10934: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
10938: LD_STRING DenisInDelta
10940: PPUSH
10941: LD_INT 0
10943: PPUSH
10944: CALL_OW 30
10948: PUSH
10949: LD_INT 1
10951: EQUAL
10952: IFFALSE 11012
// begin Say ( JMM , DRem-JMM-4 ) ;
10954: LD_EXP 1
10958: PPUSH
10959: LD_STRING DRem-JMM-4
10961: PPUSH
10962: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
10966: LD_EXP 14
10970: PPUSH
10971: LD_STRING DRem-Har-5
10973: PPUSH
10974: CALL_OW 94
// DialogueOff ;
10978: CALL_OW 7
// wait ( 4 4$00 ) ;
10982: LD_INT 8400
10984: PPUSH
10985: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10989: LD_INT 35
10991: PPUSH
10992: CALL_OW 67
// until not InBattle ( 1 ) ;
10996: LD_INT 1
10998: PPUSH
10999: CALL_OW 463
11003: NOT
11004: IFFALSE 10989
// SpawnDenis ;
11006: CALL 11050 0 0
// end else
11010: GO 11049
// begin DialogueOff ;
11012: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11016: LD_INT 36
11018: PPUSH
11019: LD_INT 1
11021: PPUSH
11022: LD_INT 1
11024: PPUSH
11025: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11029: LD_INT 15
11031: PPUSH
11032: LD_INT 1
11034: PPUSH
11035: LD_INT 1
11037: PPUSH
11038: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11042: LD_STRING MR
11044: PPUSH
11045: CALL_OW 337
// end ; end ;
11049: END
// export function SpawnDenis ; var tmp ; begin
11050: LD_INT 0
11052: PPUSH
11053: PPUSH
// PrepareDenis ;
11054: CALL 2199 0 0
// if not Denis then
11058: LD_EXP 9
11062: NOT
11063: IFFALSE 11067
// exit ;
11065: GO 11288
// CenterNowOnUnits ( Denis ) ;
11067: LD_EXP 9
11071: PPUSH
11072: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11076: LD_ADDR_VAR 0 2
11080: PUSH
11081: LD_INT 22
11083: PUSH
11084: LD_INT 1
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 69
11095: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11096: LD_EXP 9
11100: PPUSH
11101: LD_VAR 0 2
11105: PPUSH
11106: LD_EXP 9
11110: PPUSH
11111: CALL_OW 74
11115: PPUSH
11116: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11120: LD_INT 35
11122: PPUSH
11123: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11127: LD_INT 22
11129: PUSH
11130: LD_INT 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 91
11139: PUSH
11140: LD_EXP 9
11144: PUSH
11145: LD_INT 10
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: LIST
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PPUSH
11157: CALL_OW 69
11161: IFFALSE 11120
// SetSide ( Denis , 1 ) ;
11163: LD_EXP 9
11167: PPUSH
11168: LD_INT 1
11170: PPUSH
11171: CALL_OW 235
// DialogueOn ;
11175: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11179: LD_EXP 9
11183: PPUSH
11184: LD_STRING DDen-Den-1
11186: PPUSH
11187: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11191: LD_EXP 1
11195: PPUSH
11196: LD_STRING DDen-JMM-1
11198: PPUSH
11199: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11203: LD_EXP 9
11207: PPUSH
11208: LD_STRING DDen-Den-2
11210: PPUSH
11211: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11215: LD_EXP 1
11219: PPUSH
11220: LD_STRING DDen-JMM-2
11222: PPUSH
11223: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11227: LD_EXP 9
11231: PPUSH
11232: LD_STRING DDen-Den-3
11234: PPUSH
11235: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11239: LD_EXP 1
11243: PPUSH
11244: LD_STRING DDen-JMM-3
11246: PPUSH
11247: CALL_OW 88
// DialogueOff ;
11251: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11255: LD_INT 36
11257: PPUSH
11258: LD_INT 1
11260: PPUSH
11261: LD_INT 1
11263: PPUSH
11264: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11268: LD_INT 15
11270: PPUSH
11271: LD_INT 1
11273: PPUSH
11274: LD_INT 1
11276: PPUSH
11277: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11281: LD_STRING MR
11283: PPUSH
11284: CALL_OW 337
// end ;
11288: LD_VAR 0 1
11292: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11293: LD_INT 22
11295: PUSH
11296: LD_INT 1
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 30
11305: PUSH
11306: LD_INT 15
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PPUSH
11317: CALL_OW 69
11321: PUSH
11322: LD_EXP 9
11326: PPUSH
11327: CALL_OW 302
11331: AND
11332: PUSH
11333: LD_INT 1
11335: PPUSH
11336: CALL_OW 463
11340: NOT
11341: AND
11342: IFFALSE 11371
11344: GO 11346
11346: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11347: LD_EXP 9
11351: PPUSH
11352: LD_STRING DR1-Den-1
11354: PPUSH
11355: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11359: LD_EXP 1
11363: PPUSH
11364: LD_STRING DR1-JMM-1
11366: PPUSH
11367: CALL_OW 88
// end ;
11371: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
11372: LD_INT 15
11374: PPUSH
11375: LD_INT 1
11377: PPUSH
11378: CALL_OW 321
11382: PUSH
11383: LD_INT 2
11385: EQUAL
11386: PUSH
11387: LD_EXP 9
11391: PPUSH
11392: CALL_OW 302
11396: AND
11397: PUSH
11398: LD_INT 1
11400: PPUSH
11401: CALL_OW 463
11405: NOT
11406: AND
11407: IFFALSE 11639
11409: GO 11411
11411: DISABLE
// begin DialogueOn ;
11412: CALL_OW 6
// if IsOK ( Denis ) then
11416: LD_EXP 9
11420: PPUSH
11421: CALL_OW 302
11425: IFFALSE 11441
// Say ( Denis , DR2-Den-1 ) else
11427: LD_EXP 9
11431: PPUSH
11432: LD_STRING DR2-Den-1
11434: PPUSH
11435: CALL_OW 88
11439: GO 11500
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11441: LD_INT 22
11443: PUSH
11444: LD_INT 1
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: PUSH
11451: LD_INT 21
11453: PUSH
11454: LD_INT 1
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 25
11463: PUSH
11464: LD_INT 4
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: LIST
11475: PPUSH
11476: CALL_OW 69
11480: PUSH
11481: LD_EXP 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: DIFF
11489: PPUSH
11490: LD_STRING DR2-Sci1-1
11492: PPUSH
11493: LD_STRING DR2-FSci1-1
11495: PPUSH
11496: CALL 6819 0 3
// Say ( JMM , DR2-JMM-1 ) ;
11500: LD_EXP 1
11504: PPUSH
11505: LD_STRING DR2-JMM-1
11507: PPUSH
11508: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11512: LD_INT 22
11514: PUSH
11515: LD_INT 1
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 21
11524: PUSH
11525: LD_INT 1
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: LD_INT 2
11534: PUSH
11535: LD_INT 25
11537: PUSH
11538: LD_INT 1
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 25
11547: PUSH
11548: LD_INT 2
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 25
11557: PUSH
11558: LD_INT 3
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 25
11567: PUSH
11568: LD_INT 4
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 69
11591: PUSH
11592: LD_EXP 1
11596: PUSH
11597: LD_EXP 9
11601: PUSH
11602: LD_EXP 8
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: LIST
11611: DIFF
11612: PPUSH
11613: LD_STRING DR2-Sol1-1
11615: PPUSH
11616: LD_STRING DR2-Sol1-11
11618: PPUSH
11619: CALL 6819 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11623: LD_EXP 1
11627: PPUSH
11628: LD_STRING DR2-JMM-2
11630: PPUSH
11631: CALL_OW 88
// DialogueOff ;
11635: CALL_OW 7
// end ;
11639: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
11640: LD_INT 22
11642: PUSH
11643: LD_INT 1
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 30
11652: PUSH
11653: LD_INT 36
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 69
11668: PUSH
11669: LD_INT 0
11671: EQUAL
11672: PUSH
11673: LD_INT 22
11675: PUSH
11676: LD_INT 1
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: LD_INT 21
11685: PUSH
11686: LD_INT 2
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 33
11695: PUSH
11696: LD_INT 2
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: LIST
11707: PPUSH
11708: CALL_OW 69
11712: PUSH
11713: LD_INT 0
11715: GREATER
11716: AND
11717: PUSH
11718: LD_EXP 23
11722: PUSH
11723: LD_INT 0
11725: EQUAL
11726: AND
11727: PUSH
11728: LD_INT 1
11730: PPUSH
11731: CALL_OW 463
11735: NOT
11736: AND
11737: IFFALSE 11874
11739: GO 11741
11741: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11742: LD_INT 22
11744: PUSH
11745: LD_INT 1
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: LD_INT 21
11754: PUSH
11755: LD_INT 1
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 25
11764: PUSH
11765: LD_INT 3
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 26
11774: PUSH
11775: LD_INT 1
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: PPUSH
11788: CALL_OW 69
11792: PUSH
11793: LD_EXP 1
11797: PUSH
11798: LD_EXP 6
11802: PUSH
11803: LD_EXP 7
11807: PUSH
11808: LD_EXP 9
11812: PUSH
11813: LD_EXP 15
11817: PUSH
11818: LD_EXP 3
11822: PUSH
11823: LD_EXP 4
11827: PUSH
11828: LD_EXP 2
11832: PUSH
11833: LD_EXP 5
11837: PUSH
11838: LD_EXP 8
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: DIFF
11855: PPUSH
11856: LD_STRING D3a-Mech1-1
11858: PPUSH
11859: LD_STRING D3a-Mech1-1
11861: PPUSH
11862: CALL 6819 0 3
// firstTower = 2 ;
11866: LD_ADDR_EXP 23
11870: PUSH
11871: LD_INT 2
11873: ST_TO_ADDR
// end ;
11874: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
11875: LD_INT 22
11877: PUSH
11878: LD_INT 3
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 21
11887: PUSH
11888: LD_INT 3
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PPUSH
11899: CALL_OW 69
11903: PUSH
11904: LD_INT 0
11906: EQUAL
11907: IFFALSE 12022
11909: GO 11911
11911: DISABLE
11912: LD_INT 0
11914: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
11915: LD_ADDR_VAR 0 1
11919: PUSH
11920: LD_INT 22
11922: PUSH
11923: LD_INT 1
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 21
11932: PUSH
11933: LD_INT 1
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 2
11942: PUSH
11943: LD_INT 25
11945: PUSH
11946: LD_INT 1
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 25
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 25
11965: PUSH
11966: LD_INT 3
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 25
11975: PUSH
11976: LD_INT 4
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: LIST
11994: PPUSH
11995: CALL_OW 69
11999: PUSH
12000: FOR_IN
12001: IFFALSE 12020
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
12003: LD_VAR 0 1
12007: PPUSH
12008: LD_INT 1
12010: PPUSH
12011: LD_INT 7500
12013: PPUSH
12014: CALL_OW 591
12018: GO 12000
12020: POP
12021: POP
// end ;
12022: PPOPN 1
12024: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12025: LD_INT 22
12027: PUSH
12028: LD_INT 1
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: LD_INT 30
12037: PUSH
12038: LD_INT 36
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 69
12053: PUSH
12054: LD_INT 22
12056: PUSH
12057: LD_INT 1
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 21
12066: PUSH
12067: LD_INT 2
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PUSH
12074: LD_INT 33
12076: PUSH
12077: LD_INT 2
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: PPUSH
12089: CALL_OW 69
12093: AND
12094: PUSH
12095: CALL 12647 0 0
12099: AND
12100: PUSH
12101: LD_INT 1
12103: PPUSH
12104: CALL_OW 463
12108: NOT
12109: AND
12110: IFFALSE 12644
12112: GO 12114
12114: DISABLE
12115: LD_INT 0
12117: PPUSH
12118: PPUSH
12119: PPUSH
12120: PPUSH
12121: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12122: LD_ADDR_VAR 0 3
12126: PUSH
12127: LD_INT 22
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 30
12139: PUSH
12140: LD_INT 36
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PPUSH
12151: CALL_OW 69
12155: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12156: LD_ADDR_VAR 0 4
12160: PUSH
12161: LD_INT 22
12163: PUSH
12164: LD_INT 1
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 21
12173: PUSH
12174: LD_INT 2
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 33
12183: PUSH
12184: LD_INT 2
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: PPUSH
12196: CALL_OW 69
12200: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12201: LD_ADDR_VAR 0 5
12205: PUSH
12206: EMPTY
12207: ST_TO_ADDR
// for i in tmpControlTowers do
12208: LD_ADDR_VAR 0 1
12212: PUSH
12213: LD_VAR 0 3
12217: PUSH
12218: FOR_IN
12219: IFFALSE 12642
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12221: LD_EXP 1
12225: PPUSH
12226: CALL_OW 310
12230: PUSH
12231: LD_VAR 0 1
12235: EQUAL
12236: PUSH
12237: LD_EXP 1
12241: PPUSH
12242: CALL_OW 257
12246: PUSH
12247: LD_INT 3
12249: EQUAL
12250: AND
12251: IFFALSE 12385
// begin InGameOn ;
12253: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12257: LD_VAR 0 4
12261: PUSH
12262: LD_INT 1
12264: ARRAY
12265: PPUSH
12266: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12270: LD_EXP 1
12274: PPUSH
12275: LD_STRING D4a-JMM-1
12277: PPUSH
12278: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12282: LD_VAR 0 4
12286: PUSH
12287: LD_INT 1
12289: ARRAY
12290: PPUSH
12291: LD_EXP 1
12295: PPUSH
12296: CALL_OW 53
// wait ( 0 0$1 ) ;
12300: LD_INT 35
12302: PPUSH
12303: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12307: LD_VAR 0 4
12311: PUSH
12312: LD_INT 1
12314: ARRAY
12315: PPUSH
12316: LD_VAR 0 4
12320: PUSH
12321: LD_INT 1
12323: ARRAY
12324: PPUSH
12325: CALL_OW 250
12329: PUSH
12330: LD_INT 3
12332: PLUS
12333: PPUSH
12334: LD_VAR 0 4
12338: PUSH
12339: LD_INT 1
12341: ARRAY
12342: PPUSH
12343: CALL_OW 251
12347: PUSH
12348: LD_INT 2
12350: MINUS
12351: PPUSH
12352: CALL_OW 111
// wait ( 0 0$2 ) ;
12356: LD_INT 70
12358: PPUSH
12359: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12363: LD_EXP 1
12367: PPUSH
12368: LD_STRING D4b-JMM-1
12370: PPUSH
12371: CALL_OW 88
// InGameOff ;
12375: CALL_OW 9
// exit ;
12379: POP
12380: POP
12381: GO 12644
// end else
12383: GO 12640
// begin InGameOn ;
12385: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
12389: LD_ADDR_VAR 0 5
12393: PUSH
12394: LD_VAR 0 1
12398: PPUSH
12399: CALL_OW 313
12403: PPUSH
12404: LD_INT 25
12406: PUSH
12407: LD_INT 3
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PPUSH
12414: CALL_OW 72
12418: ST_TO_ADDR
// if not tmpMechanicInside then
12419: LD_VAR 0 5
12423: NOT
12424: IFFALSE 12428
// continue ;
12426: GO 12218
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
12428: LD_VAR 0 5
12432: PUSH
12433: LD_INT 1
12435: ARRAY
12436: PPUSH
12437: CALL_OW 258
12441: PUSH
12442: LD_INT 1
12444: EQUAL
12445: IFFALSE 12465
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
12447: LD_VAR 0 5
12451: PUSH
12452: LD_INT 1
12454: ARRAY
12455: PPUSH
12456: LD_STRING D4a-Mech1-1
12458: PPUSH
12459: CALL_OW 88
12463: GO 12481
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12465: LD_VAR 0 5
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: PPUSH
12474: LD_STRING D4a-FMech1-1
12476: PPUSH
12477: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12481: LD_VAR 0 4
12485: PUSH
12486: LD_INT 1
12488: ARRAY
12489: PPUSH
12490: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12494: LD_VAR 0 4
12498: PUSH
12499: LD_INT 1
12501: ARRAY
12502: PPUSH
12503: LD_VAR 0 5
12507: PUSH
12508: LD_INT 1
12510: ARRAY
12511: PPUSH
12512: CALL_OW 53
// wait ( 0 0$1 ) ;
12516: LD_INT 35
12518: PPUSH
12519: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12523: LD_VAR 0 4
12527: PUSH
12528: LD_INT 1
12530: ARRAY
12531: PPUSH
12532: LD_VAR 0 4
12536: PUSH
12537: LD_INT 1
12539: ARRAY
12540: PPUSH
12541: CALL_OW 250
12545: PUSH
12546: LD_INT 3
12548: PLUS
12549: PPUSH
12550: LD_VAR 0 4
12554: PUSH
12555: LD_INT 1
12557: ARRAY
12558: PPUSH
12559: CALL_OW 251
12563: PUSH
12564: LD_INT 2
12566: MINUS
12567: PPUSH
12568: CALL_OW 111
// wait ( 0 0$2 ) ;
12572: LD_INT 70
12574: PPUSH
12575: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
12579: LD_VAR 0 5
12583: PUSH
12584: LD_INT 1
12586: ARRAY
12587: PPUSH
12588: CALL_OW 258
12592: PUSH
12593: LD_INT 1
12595: EQUAL
12596: IFFALSE 12616
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
12598: LD_VAR 0 5
12602: PUSH
12603: LD_INT 1
12605: ARRAY
12606: PPUSH
12607: LD_STRING D4b-Mech1-1
12609: PPUSH
12610: CALL_OW 88
12614: GO 12632
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12616: LD_VAR 0 5
12620: PUSH
12621: LD_INT 1
12623: ARRAY
12624: PPUSH
12625: LD_STRING D4b-FMech1-1
12627: PPUSH
12628: CALL_OW 88
// InGameOff ;
12632: CALL_OW 9
// exit ;
12636: POP
12637: POP
12638: GO 12644
// end ; end ;
12640: GO 12218
12642: POP
12643: POP
// end ;
12644: PPOPN 5
12646: END
// function CheckMehInside ; var i , j , tmp ; begin
12647: LD_INT 0
12649: PPUSH
12650: PPUSH
12651: PPUSH
12652: PPUSH
// result := false ;
12653: LD_ADDR_VAR 0 1
12657: PUSH
12658: LD_INT 0
12660: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12661: LD_ADDR_VAR 0 4
12665: PUSH
12666: LD_INT 22
12668: PUSH
12669: LD_INT 1
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 30
12678: PUSH
12679: LD_INT 36
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 69
12694: ST_TO_ADDR
// if not tmp then
12695: LD_VAR 0 4
12699: NOT
12700: IFFALSE 12704
// exit ;
12702: GO 12768
// for i in tmp do
12704: LD_ADDR_VAR 0 2
12708: PUSH
12709: LD_VAR 0 4
12713: PUSH
12714: FOR_IN
12715: IFFALSE 12766
// for j in UnitsInside ( i ) do
12717: LD_ADDR_VAR 0 3
12721: PUSH
12722: LD_VAR 0 2
12726: PPUSH
12727: CALL_OW 313
12731: PUSH
12732: FOR_IN
12733: IFFALSE 12762
// if GetClass ( j ) = class_mechanic then
12735: LD_VAR 0 3
12739: PPUSH
12740: CALL_OW 257
12744: PUSH
12745: LD_INT 3
12747: EQUAL
12748: IFFALSE 12760
// begin result := true ;
12750: LD_ADDR_VAR 0 1
12754: PUSH
12755: LD_INT 1
12757: ST_TO_ADDR
// break ;
12758: GO 12762
// end ;
12760: GO 12732
12762: POP
12763: POP
12764: GO 12714
12766: POP
12767: POP
// end ;
12768: LD_VAR 0 1
12772: RET
// every 12 12$0 do
12773: GO 12775
12775: DISABLE
// begin repeat wait ( 0 0$1 ) ;
12776: LD_INT 35
12778: PPUSH
12779: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
12783: LD_INT 1
12785: PPUSH
12786: CALL_OW 463
12790: NOT
12791: PUSH
12792: LD_INT 32
12794: PPUSH
12795: LD_INT 81
12797: PUSH
12798: LD_INT 1
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PPUSH
12805: CALL_OW 70
12809: NOT
12810: AND
12811: IFFALSE 12776
// PrepareKurt ;
12813: CALL 15237 0 0
// end ;
12817: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
12818: LD_EXP 15
12822: PPUSH
12823: CALL_OW 302
12827: PUSH
12828: LD_EXP 15
12832: PPUSH
12833: CALL_OW 255
12837: PUSH
12838: LD_INT 1
12840: EQUAL
12841: AND
12842: PUSH
12843: LD_EXP 2
12847: AND
12848: IFFALSE 13013
12850: GO 12852
12852: DISABLE
// begin wait ( 0 0$50 ) ;
12853: LD_INT 1750
12855: PPUSH
12856: CALL_OW 67
// if not IsOk ( Joan ) then
12860: LD_EXP 15
12864: PPUSH
12865: CALL_OW 302
12869: NOT
12870: IFFALSE 12874
// exit ;
12872: GO 13013
// if IsOK ( Lisa ) then
12874: LD_EXP 2
12878: PPUSH
12879: CALL_OW 302
12883: IFFALSE 13013
// begin DialogueOn ;
12885: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
12889: LD_EXP 2
12893: PPUSH
12894: LD_STRING D7-Lisa-1
12896: PPUSH
12897: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
12901: LD_EXP 1
12905: PPUSH
12906: LD_STRING D7-JMM-1
12908: PPUSH
12909: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
12913: LD_EXP 2
12917: PPUSH
12918: LD_STRING D7-Lisa-2
12920: PPUSH
12921: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
12925: LD_EXP 1
12929: PPUSH
12930: LD_STRING D7-JMM-2
12932: PPUSH
12933: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
12937: LD_EXP 2
12941: PPUSH
12942: LD_STRING D7-Lisa-3
12944: PPUSH
12945: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
12949: LD_EXP 1
12953: PPUSH
12954: LD_STRING D7-JMM-3
12956: PPUSH
12957: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
12961: LD_EXP 2
12965: PPUSH
12966: LD_STRING D7-Lisa-4
12968: PPUSH
12969: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
12973: LD_EXP 1
12977: PPUSH
12978: LD_STRING D7-JMM-4
12980: PPUSH
12981: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
12985: LD_EXP 1
12989: PPUSH
12990: LD_STRING D7-JMM-4a
12992: PPUSH
12993: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
12997: LD_EXP 2
13001: PPUSH
13002: LD_STRING D7-Lisa-5
13004: PPUSH
13005: CALL_OW 88
// DialogueOff ;
13009: CALL_OW 7
// end ; end ;
13013: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
13014: LD_EXP 13
13018: PUSH
13019: LD_INT 22
13021: PUSH
13022: LD_INT 1
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 91
13031: PUSH
13032: LD_EXP 13
13036: PUSH
13037: LD_INT 10
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 2
13047: PUSH
13048: LD_INT 25
13050: PUSH
13051: LD_INT 1
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 25
13060: PUSH
13061: LD_INT 2
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 25
13070: PUSH
13071: LD_INT 3
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 25
13080: PUSH
13081: LD_INT 4
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: PPUSH
13100: CALL_OW 69
13104: PUSH
13105: LD_INT 1
13107: GREATER
13108: AND
13109: IFFALSE 13126
13111: GO 13113
13113: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13114: LD_EXP 13
13118: PPUSH
13119: LD_STRING D5-Sol1-1
13121: PPUSH
13122: CALL_OW 88
13126: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13127: LD_INT 22
13129: PUSH
13130: LD_INT 1
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 33
13139: PUSH
13140: LD_INT 2
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PPUSH
13151: CALL_OW 69
13155: PUSH
13156: LD_INT 2
13158: GREATEREQUAL
13159: IFFALSE 13179
13161: GO 13163
13163: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13164: LD_STRING MRa
13166: PPUSH
13167: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13171: LD_ADDR_EXP 28
13175: PUSH
13176: LD_INT 1
13178: ST_TO_ADDR
// end ;
13179: END
// every 2 2$00 do var i , last ;
13180: GO 13182
13182: DISABLE
13183: LD_INT 0
13185: PPUSH
13186: PPUSH
// begin last := 8 ;
13187: LD_ADDR_VAR 0 2
13191: PUSH
13192: LD_INT 8
13194: ST_TO_ADDR
// for i = 1 to last do
13195: LD_ADDR_VAR 0 1
13199: PUSH
13200: DOUBLE
13201: LD_INT 1
13203: DEC
13204: ST_TO_ADDR
13205: LD_VAR 0 2
13209: PUSH
13210: FOR_TO
13211: IFFALSE 13239
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13213: LD_INT 6300
13215: PPUSH
13216: LD_INT 12600
13218: PPUSH
13219: CALL_OW 12
13223: PPUSH
13224: CALL_OW 67
// PrepareRandoms ( i ) ;
13228: LD_VAR 0 1
13232: PPUSH
13233: CALL 4126 0 1
// end ;
13237: GO 13210
13239: POP
13240: POP
// end ;
13241: PPOPN 2
13243: END
// every 5 5$20 do
13244: GO 13246
13246: DISABLE
// begin DialogueOn ;
13247: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13251: LD_EXP 10
13255: PPUSH
13256: LD_STRING D12a-Sci-1
13258: PPUSH
13259: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13263: LD_EXP 1
13267: PPUSH
13268: LD_STRING D12a-JMM-1
13270: PPUSH
13271: CALL_OW 88
// DialogueOff ;
13275: CALL_OW 7
// cratesStatus = 1 ;
13279: LD_ADDR_EXP 38
13283: PUSH
13284: LD_INT 1
13286: ST_TO_ADDR
// end ;
13287: END
// every 13 13$0 do
13288: GO 13290
13290: DISABLE
// begin DialogueOn ;
13291: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13295: LD_EXP 10
13299: PPUSH
13300: LD_STRING D12b-Sci-1
13302: PPUSH
13303: CALL_OW 94
// DialogueOff ;
13307: CALL_OW 7
// cratesStatus = 2 ;
13311: LD_ADDR_EXP 38
13315: PUSH
13316: LD_INT 2
13318: ST_TO_ADDR
// end ;
13319: END
// every 32 32$0 do
13320: GO 13322
13322: DISABLE
// begin DialogueOn ;
13323: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
13327: LD_EXP 10
13331: PPUSH
13332: LD_STRING D12c-Sci-1
13334: PPUSH
13335: CALL_OW 94
// DialogueOff ;
13339: CALL_OW 7
// wait ( 3 3$0 ) ;
13343: LD_INT 6300
13345: PPUSH
13346: CALL_OW 67
// DialogueOn ;
13350: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
13354: LD_EXP 10
13358: PPUSH
13359: LD_STRING D12d-Sci-1
13361: PPUSH
13362: CALL_OW 94
// DialogueOff ;
13366: CALL_OW 7
// cratesStatus = 1 ;
13370: LD_ADDR_EXP 38
13374: PUSH
13375: LD_INT 1
13377: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
13378: CALL 19357 0 0
// wait ( 2 2$30 ) ;
13382: LD_INT 5250
13384: PPUSH
13385: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13389: LD_INT 35
13391: PPUSH
13392: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
13396: LD_INT 1
13398: PPUSH
13399: CALL_OW 463
13403: NOT
13404: PUSH
13405: LD_INT 32
13407: PPUSH
13408: LD_INT 81
13410: PUSH
13411: LD_INT 1
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PPUSH
13418: CALL_OW 70
13422: NOT
13423: AND
13424: IFFALSE 13389
// PrepareJoan ;
13426: CALL 3034 0 0
// end ;
13430: END
// every 42 42$0 do
13431: GO 13433
13433: DISABLE
// begin DialogueOn ;
13434: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13438: LD_EXP 10
13442: PPUSH
13443: LD_STRING D12e-Sci-1
13445: PPUSH
13446: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13450: LD_EXP 1
13454: PPUSH
13455: LD_STRING D12e-JMM-1
13457: PPUSH
13458: CALL_OW 88
// DialogueOff ;
13462: CALL_OW 7
// cratesStatus := 2 ;
13466: LD_ADDR_EXP 38
13470: PUSH
13471: LD_INT 2
13473: ST_TO_ADDR
// end ; end_of_file
13474: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13475: LD_VAR 0 1
13479: PUSH
13480: LD_INT 1
13482: EQUAL
13483: PUSH
13484: LD_VAR 0 2
13488: PUSH
13489: LD_INT 3
13491: EQUAL
13492: AND
13493: IFFALSE 13503
// contactWithRussian := 1 ;
13495: LD_ADDR_EXP 22
13499: PUSH
13500: LD_INT 1
13502: ST_TO_ADDR
// end ;
13503: PPOPN 2
13505: END
// on BuildingComplete ( building ) do var i ;
13506: LD_INT 0
13508: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
13509: LD_VAR 0 1
13513: PPUSH
13514: CALL_OW 266
13518: PUSH
13519: LD_INT 36
13521: EQUAL
13522: PUSH
13523: LD_VAR 0 1
13527: PPUSH
13528: CALL_OW 255
13532: PUSH
13533: LD_INT 1
13535: EQUAL
13536: AND
13537: PUSH
13538: LD_EXP 23
13542: PUSH
13543: LD_INT 0
13545: EQUAL
13546: AND
13547: IFFALSE 13627
// begin firstTower = 1 ;
13549: LD_ADDR_EXP 23
13553: PUSH
13554: LD_INT 1
13556: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13557: LD_INT 22
13559: PUSH
13560: LD_INT 1
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 21
13569: PUSH
13570: LD_INT 1
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 25
13579: PUSH
13580: LD_INT 3
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PUSH
13587: LD_INT 26
13589: PUSH
13590: LD_INT 1
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: PPUSH
13603: CALL_OW 69
13607: PUSH
13608: LD_EXP 1
13612: PUSH
13613: EMPTY
13614: LIST
13615: DIFF
13616: PPUSH
13617: LD_STRING D3b-Mech1-1
13619: PPUSH
13620: LD_STRING D3b-Mech1-1
13622: PPUSH
13623: CALL 6819 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
13627: LD_VAR 0 1
13631: PPUSH
13632: CALL_OW 266
13636: PUSH
13637: LD_INT 0
13639: EQUAL
13640: PUSH
13641: LD_VAR 0 1
13645: PPUSH
13646: CALL_OW 255
13650: PUSH
13651: LD_INT 1
13653: EQUAL
13654: AND
13655: IFFALSE 13669
// SetBName ( building , theta ) ;
13657: LD_VAR 0 1
13661: PPUSH
13662: LD_STRING theta
13664: PPUSH
13665: CALL_OW 500
// if GetSide ( building ) = 3 then
13669: LD_VAR 0 1
13673: PPUSH
13674: CALL_OW 255
13678: PUSH
13679: LD_INT 3
13681: EQUAL
13682: IFFALSE 13722
// begin for i := 1 to 4 do
13684: LD_ADDR_VAR 0 2
13688: PUSH
13689: DOUBLE
13690: LD_INT 1
13692: DEC
13693: ST_TO_ADDR
13694: LD_INT 4
13696: PUSH
13697: FOR_TO
13698: IFFALSE 13720
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13700: LD_ADDR_EXP 31
13704: PUSH
13705: LD_EXP 31
13709: PPUSH
13710: LD_INT 1
13712: PPUSH
13713: CALL_OW 3
13717: ST_TO_ADDR
13718: GO 13697
13720: POP
13721: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
13722: LD_VAR 0 1
13726: PPUSH
13727: CALL_OW 255
13731: PUSH
13732: LD_INT 3
13734: EQUAL
13735: PUSH
13736: LD_VAR 0 1
13740: PPUSH
13741: CALL_OW 266
13745: PUSH
13746: LD_INT 0
13748: EQUAL
13749: PUSH
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 266
13759: PUSH
13760: LD_INT 2
13762: EQUAL
13763: OR
13764: PUSH
13765: LD_VAR 0 1
13769: PPUSH
13770: CALL_OW 266
13774: PUSH
13775: LD_INT 4
13777: EQUAL
13778: OR
13779: PUSH
13780: EMPTY
13781: LIST
13782: AND
13783: IFFALSE 13794
// ComUpgrade ( building ) ;
13785: LD_VAR 0 1
13789: PPUSH
13790: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
13794: LD_VAR 0 1
13798: PPUSH
13799: CALL_OW 255
13803: PUSH
13804: LD_INT 3
13806: EQUAL
13807: PUSH
13808: LD_VAR 0 1
13812: PPUSH
13813: CALL_OW 266
13817: PUSH
13818: LD_INT 32
13820: EQUAL
13821: AND
13822: IFFALSE 13863
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
13824: LD_VAR 0 1
13828: PPUSH
13829: LD_INT 42
13831: PUSH
13832: LD_INT 43
13834: PUSH
13835: LD_INT 44
13837: PUSH
13838: LD_INT 46
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 1
13849: PPUSH
13850: LD_INT 4
13852: PPUSH
13853: CALL_OW 12
13857: ARRAY
13858: PPUSH
13859: CALL_OW 208
// end ;
13863: PPOPN 2
13865: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
13866: LD_VAR 0 1
13870: PUSH
13871: LD_INT 22
13873: PUSH
13874: LD_INT 1
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 21
13883: PUSH
13884: LD_INT 1
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 23
13893: PUSH
13894: LD_INT 1
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: PPUSH
13906: CALL_OW 69
13910: IN
13911: IFFALSE 13927
// killCounter := killCounter + 1 ;
13913: LD_ADDR_EXP 45
13917: PUSH
13918: LD_EXP 45
13922: PUSH
13923: LD_INT 1
13925: PLUS
13926: ST_TO_ADDR
// if unit in ruAttackersInForest then
13927: LD_VAR 0 1
13931: PUSH
13932: LD_EXP 48
13936: IN
13937: IFFALSE 13955
// ruAttackersInForest := ruAttackersInForest diff unit ;
13939: LD_ADDR_EXP 48
13943: PUSH
13944: LD_EXP 48
13948: PUSH
13949: LD_VAR 0 1
13953: DIFF
13954: ST_TO_ADDR
// if unit in ruAttackers then
13955: LD_VAR 0 1
13959: PUSH
13960: LD_EXP 47
13964: IN
13965: IFFALSE 13983
// ruAttackers := ruAttackers diff unit ;
13967: LD_ADDR_EXP 47
13971: PUSH
13972: LD_EXP 47
13976: PUSH
13977: LD_VAR 0 1
13981: DIFF
13982: ST_TO_ADDR
// if unit = JMM then
13983: LD_VAR 0 1
13987: PUSH
13988: LD_EXP 1
13992: EQUAL
13993: IFFALSE 14002
// YouLost ( JMM ) ;
13995: LD_STRING JMM
13997: PPUSH
13998: CALL_OW 104
// if unit = Joan then
14002: LD_VAR 0 1
14006: PUSH
14007: LD_EXP 15
14011: EQUAL
14012: IFFALSE 14022
// JoanStatus := 0 ;
14014: LD_ADDR_EXP 16
14018: PUSH
14019: LD_INT 0
14021: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14022: LD_VAR 0 1
14026: PPUSH
14027: CALL_OW 255
14031: PUSH
14032: LD_INT 1
14034: EQUAL
14035: PUSH
14036: LD_VAR 0 1
14040: PPUSH
14041: CALL_OW 247
14045: PUSH
14046: LD_INT 1
14048: EQUAL
14049: AND
14050: PUSH
14051: LD_VAR 0 1
14055: PPUSH
14056: CALL_OW 248
14060: PUSH
14061: LD_INT 1
14063: EQUAL
14064: AND
14065: IFFALSE 14081
// unitLost = unitLost + 1 ;
14067: LD_ADDR_EXP 30
14071: PUSH
14072: LD_EXP 30
14076: PUSH
14077: LD_INT 1
14079: PLUS
14080: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14081: LD_VAR 0 1
14085: PPUSH
14086: CALL_OW 255
14090: PUSH
14091: LD_INT 3
14093: EQUAL
14094: PUSH
14095: LD_VAR 0 1
14099: PPUSH
14100: CALL_OW 247
14104: PUSH
14105: LD_INT 3
14107: EQUAL
14108: AND
14109: PUSH
14110: LD_VAR 0 1
14114: PPUSH
14115: CALL_OW 266
14119: PUSH
14120: LD_INT 4
14122: PUSH
14123: LD_INT 5
14125: PUSH
14126: LD_INT 32
14128: PUSH
14129: LD_INT 31
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: IN
14138: AND
14139: IFFALSE 14225
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14141: LD_ADDR_EXP 31
14145: PUSH
14146: LD_EXP 31
14150: PUSH
14151: LD_VAR 0 1
14155: PPUSH
14156: CALL_OW 266
14160: ADD
14161: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14162: LD_ADDR_EXP 31
14166: PUSH
14167: LD_EXP 31
14171: PUSH
14172: LD_VAR 0 1
14176: PPUSH
14177: CALL_OW 250
14181: ADD
14182: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14183: LD_ADDR_EXP 31
14187: PUSH
14188: LD_EXP 31
14192: PUSH
14193: LD_VAR 0 1
14197: PPUSH
14198: CALL_OW 251
14202: ADD
14203: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14204: LD_ADDR_EXP 31
14208: PUSH
14209: LD_EXP 31
14213: PUSH
14214: LD_VAR 0 1
14218: PPUSH
14219: CALL_OW 254
14223: ADD
14224: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14225: LD_EXP 46
14229: PUSH
14230: LD_VAR 0 1
14234: PPUSH
14235: CALL_OW 257
14239: PUSH
14240: LD_INT 3
14242: EQUAL
14243: AND
14244: PUSH
14245: LD_VAR 0 1
14249: PPUSH
14250: CALL_OW 255
14254: PUSH
14255: LD_INT 3
14257: EQUAL
14258: AND
14259: PUSH
14260: LD_INT 21
14262: PPUSH
14263: CALL_OW 302
14267: AND
14268: PUSH
14269: LD_INT 21
14271: PPUSH
14272: CALL_OW 255
14276: PUSH
14277: LD_INT 3
14279: EQUAL
14280: AND
14281: IFFALSE 14363
// begin ruMechCounter := ruMechCounter - 1 ;
14283: LD_ADDR_EXP 46
14287: PUSH
14288: LD_EXP 46
14292: PUSH
14293: LD_INT 1
14295: MINUS
14296: ST_TO_ADDR
// uc_side := 3 ;
14297: LD_ADDR_OWVAR 20
14301: PUSH
14302: LD_INT 3
14304: ST_TO_ADDR
// uc_nation := 3 ;
14305: LD_ADDR_OWVAR 21
14309: PUSH
14310: LD_INT 3
14312: ST_TO_ADDR
// hc_gallery :=  ;
14313: LD_ADDR_OWVAR 33
14317: PUSH
14318: LD_STRING 
14320: ST_TO_ADDR
// hc_name :=  ;
14321: LD_ADDR_OWVAR 26
14325: PUSH
14326: LD_STRING 
14328: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
14329: LD_INT 0
14331: PPUSH
14332: LD_EXP 34
14336: PPUSH
14337: LD_EXP 35
14341: PPUSH
14342: CALL_OW 12
14346: PPUSH
14347: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
14351: CALL_OW 44
14355: PPUSH
14356: LD_INT 21
14358: PPUSH
14359: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 255
14372: PUSH
14373: LD_INT 3
14375: EQUAL
14376: PUSH
14377: LD_VAR 0 1
14381: PPUSH
14382: CALL_OW 264
14386: PUSH
14387: LD_INT 52
14389: EQUAL
14390: AND
14391: PUSH
14392: LD_INT 21
14394: PPUSH
14395: CALL_OW 302
14399: AND
14400: PUSH
14401: LD_INT 21
14403: PPUSH
14404: CALL_OW 255
14408: PUSH
14409: LD_INT 3
14411: EQUAL
14412: AND
14413: IFFALSE 14434
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
14415: LD_INT 21
14417: PPUSH
14418: LD_INT 22
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: LD_INT 1
14426: PPUSH
14427: LD_INT 52
14429: PPUSH
14430: CALL_OW 125
// end ;
14434: PPOPN 1
14436: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
14437: LD_INT 0
14439: PPUSH
14440: PPUSH
14441: PPUSH
// begin if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
14442: LD_VAR 0 1
14446: PPUSH
14447: CALL_OW 255
14451: PUSH
14452: LD_INT 3
14454: EQUAL
14455: PUSH
14456: LD_VAR 0 1
14460: PPUSH
14461: CALL_OW 264
14465: PUSH
14466: LD_INT 51
14468: PUSH
14469: LD_INT 52
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: IN
14476: NOT
14477: AND
14478: IFFALSE 14509
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
14480: LD_ADDR_EXP 47
14484: PUSH
14485: LD_EXP 47
14489: PPUSH
14490: LD_EXP 47
14494: PUSH
14495: LD_INT 1
14497: PLUS
14498: PPUSH
14499: LD_VAR 0 1
14503: PPUSH
14504: CALL_OW 1
14508: ST_TO_ADDR
// end ;
14509: PPOPN 5
14511: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
14512: LD_VAR 0 1
14516: PPUSH
14517: CALL_OW 255
14521: PUSH
14522: LD_INT 3
14524: EQUAL
14525: IFFALSE 14556
// begin tamedApemans = tamedApemans + 1 ;
14527: LD_ADDR_EXP 32
14531: PUSH
14532: LD_EXP 32
14536: PUSH
14537: LD_INT 1
14539: PLUS
14540: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
14541: LD_VAR 0 1
14545: PPUSH
14546: LD_INT 106
14548: PPUSH
14549: LD_INT 85
14551: PPUSH
14552: CALL_OW 111
// end ; end ;
14556: PPOPN 2
14558: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
14559: LD_VAR 0 2
14563: PPUSH
14564: CALL_OW 255
14568: PUSH
14569: LD_INT 3
14571: EQUAL
14572: PUSH
14573: LD_VAR 0 1
14577: PPUSH
14578: CALL_OW 255
14582: PUSH
14583: LD_INT 3
14585: EQUAL
14586: AND
14587: PUSH
14588: LD_INT 21
14590: PPUSH
14591: CALL_OW 302
14595: AND
14596: IFFALSE 14610
// ComEnterUnit ( human , rufab ) ;
14598: LD_VAR 0 1
14602: PPUSH
14603: LD_INT 21
14605: PPUSH
14606: CALL_OW 120
// end ;
14610: PPOPN 4
14612: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
14613: LD_VAR 0 1
14617: PUSH
14618: LD_INT 21
14620: EQUAL
14621: PUSH
14622: LD_VAR 0 2
14626: PPUSH
14627: CALL_OW 255
14631: PUSH
14632: LD_INT 3
14634: EQUAL
14635: AND
14636: IFFALSE 14650
// SetLives ( human , 1000 ) ;
14638: LD_VAR 0 2
14642: PPUSH
14643: LD_INT 1000
14645: PPUSH
14646: CALL_OW 234
// end ;
14650: PPOPN 2
14652: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14653: LD_VAR 0 1
14657: PPUSH
14658: CALL 33541 0 1
// end ; end_of_file
14662: PPOPN 1
14664: END
// every 0 0$30 trigger cratesStatus = 1 do
14665: LD_EXP 38
14669: PUSH
14670: LD_INT 1
14672: EQUAL
14673: IFFALSE 14726
14675: GO 14677
14677: DISABLE
// begin enable ;
14678: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
14679: LD_INT 350
14681: PUSH
14682: LD_INT 875
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 1
14691: PPUSH
14692: LD_INT 2
14694: PPUSH
14695: CALL_OW 12
14699: ARRAY
14700: PPUSH
14701: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
14705: LD_INT 1
14707: PPUSH
14708: LD_INT 5
14710: PPUSH
14711: CALL_OW 12
14715: PPUSH
14716: LD_INT 7
14718: PPUSH
14719: LD_INT 1
14721: PPUSH
14722: CALL_OW 55
// end ;
14726: END
// every 1 1$0 trigger cratesStatus = 2 do
14727: LD_EXP 38
14731: PUSH
14732: LD_INT 2
14734: EQUAL
14735: IFFALSE 14818
14737: GO 14739
14739: DISABLE
// begin enable ;
14740: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
14741: LD_INT 3150
14743: PUSH
14744: LD_INT 4550
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 1
14753: PPUSH
14754: LD_INT 2
14756: PPUSH
14757: CALL_OW 12
14761: ARRAY
14762: PPUSH
14763: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
14767: LD_INT 2
14769: PUSH
14770: LD_INT 5
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 1
14779: PPUSH
14780: LD_INT 2
14782: PPUSH
14783: CALL_OW 12
14787: ARRAY
14788: PPUSH
14789: LD_INT 6
14791: PUSH
14792: LD_INT 7
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 1
14801: PPUSH
14802: LD_INT 2
14804: PPUSH
14805: CALL_OW 12
14809: ARRAY
14810: PPUSH
14811: LD_INT 1
14813: PPUSH
14814: CALL_OW 55
// end ;
14818: END
// every 0 0$30 + 0 0$10 do
14819: GO 14821
14821: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14822: LD_INT 4
14824: PUSH
14825: LD_INT 5
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 1
14834: PPUSH
14835: LD_INT 2
14837: PPUSH
14838: CALL_OW 12
14842: ARRAY
14843: PPUSH
14844: LD_INT 7
14846: PPUSH
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 55
// Wait ( 0 0$15 ) ;
14854: LD_INT 525
14856: PPUSH
14857: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14861: LD_INT 4
14863: PUSH
14864: LD_INT 5
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 1
14873: PPUSH
14874: LD_INT 2
14876: PPUSH
14877: CALL_OW 12
14881: ARRAY
14882: PPUSH
14883: LD_INT 7
14885: PPUSH
14886: LD_INT 1
14888: PPUSH
14889: CALL_OW 55
// Wait ( 0 0$20 ) ;
14893: LD_INT 700
14895: PPUSH
14896: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14900: LD_INT 4
14902: PUSH
14903: LD_INT 5
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 1
14912: PPUSH
14913: LD_INT 2
14915: PPUSH
14916: CALL_OW 12
14920: ARRAY
14921: PPUSH
14922: LD_INT 7
14924: PPUSH
14925: LD_INT 1
14927: PPUSH
14928: CALL_OW 55
// end ; end_of_file
14932: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
14933: LD_EXP 24
14937: PUSH
14938: LD_INT 1
14940: EQUAL
14941: IFFALSE 15234
14943: GO 14945
14945: DISABLE
14946: LD_INT 0
14948: PPUSH
14949: PPUSH
14950: PPUSH
// begin enable ;
14951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14952: LD_ADDR_VAR 0 2
14956: PUSH
14957: LD_INT 22
14959: PUSH
14960: LD_INT 1
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 21
14969: PUSH
14970: LD_INT 3
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 2
14979: PUSH
14980: LD_INT 30
14982: PUSH
14983: LD_INT 0
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 30
14992: PUSH
14993: LD_INT 1
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: LIST
15009: PPUSH
15010: CALL_OW 69
15014: ST_TO_ADDR
// for i in tmp do
15015: LD_ADDR_VAR 0 1
15019: PUSH
15020: LD_VAR 0 2
15024: PUSH
15025: FOR_IN
15026: IFFALSE 15059
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15028: LD_ADDR_VAR 0 3
15032: PUSH
15033: LD_VAR 0 3
15037: PUSH
15038: LD_VAR 0 1
15042: PPUSH
15043: CALL_OW 274
15047: PPUSH
15048: LD_INT 1
15050: PPUSH
15051: CALL_OW 275
15055: PLUS
15056: ST_TO_ADDR
15057: GO 15025
15059: POP
15060: POP
// strings = [ ] ;
15061: LD_ADDR_EXP 27
15065: PUSH
15066: EMPTY
15067: ST_TO_ADDR
// if tmp = 0 then
15068: LD_VAR 0 2
15072: PUSH
15073: LD_INT 0
15075: EQUAL
15076: IFFALSE 15101
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15078: LD_ADDR_EXP 27
15082: PUSH
15083: LD_EXP 27
15087: PUSH
15088: LD_STRING #Am06-1
15090: PUSH
15091: LD_EXP 25
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: ADD
15100: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
15101: LD_VAR 0 2
15105: PUSH
15106: LD_EXP 25
15110: PUSH
15111: LD_VAR 0 3
15115: GREATER
15116: AND
15117: IFFALSE 15148
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15119: LD_ADDR_EXP 27
15123: PUSH
15124: LD_EXP 27
15128: PUSH
15129: LD_STRING #Am06-1
15131: PUSH
15132: LD_EXP 25
15136: PUSH
15137: LD_VAR 0 3
15141: MINUS
15142: PUSH
15143: EMPTY
15144: LIST
15145: LIST
15146: ADD
15147: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
15148: LD_VAR 0 2
15152: PUSH
15153: LD_EXP 25
15157: PUSH
15158: LD_VAR 0 3
15162: LESSEQUAL
15163: AND
15164: IFFALSE 15187
// strings = strings ^ [ #Am06-1 , 0 ] ;
15166: LD_ADDR_EXP 27
15170: PUSH
15171: LD_EXP 27
15175: PUSH
15176: LD_STRING #Am06-1
15178: PUSH
15179: LD_INT 0
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: ADD
15186: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15187: LD_ADDR_EXP 26
15191: PUSH
15192: LD_EXP 26
15196: PUSH
15197: LD_INT 35
15199: MINUS
15200: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15201: LD_ADDR_EXP 27
15205: PUSH
15206: LD_EXP 27
15210: PUSH
15211: LD_STRING #Am06-2
15213: PUSH
15214: LD_EXP 26
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: ADD
15223: ST_TO_ADDR
// display_strings = strings ;
15224: LD_ADDR_OWVAR 47
15228: PUSH
15229: LD_EXP 27
15233: ST_TO_ADDR
// end ; end_of_file
15234: PPOPN 3
15236: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
15237: LD_INT 0
15239: PPUSH
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15246: LD_ADDR_VAR 0 3
15250: PUSH
15251: LD_INT 22
15253: PUSH
15254: LD_INT 1
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: LD_INT 2
15263: PUSH
15264: LD_INT 30
15266: PUSH
15267: LD_INT 0
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 30
15276: PUSH
15277: LD_INT 1
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: LIST
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PPUSH
15293: CALL_OW 69
15297: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15298: LD_INT 35
15300: PPUSH
15301: CALL_OW 67
// until depot ;
15305: LD_VAR 0 3
15309: IFFALSE 15246
// repeat wait ( 0 0$1 ) ;
15311: LD_INT 35
15313: PPUSH
15314: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
15318: LD_ADDR_VAR 0 4
15322: PUSH
15323: LD_INT 22
15325: PUSH
15326: LD_INT 1
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 91
15335: PUSH
15336: LD_VAR 0 3
15340: PUSH
15341: LD_INT 1
15343: ARRAY
15344: PUSH
15345: LD_INT 15
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 21
15355: PUSH
15356: LD_INT 1
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 2
15365: PUSH
15366: LD_INT 25
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 25
15378: PUSH
15379: LD_INT 2
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 25
15388: PUSH
15389: LD_INT 3
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: PUSH
15396: LD_INT 25
15398: PUSH
15399: LD_INT 4
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 3
15415: PUSH
15416: LD_INT 54
15418: PUSH
15419: EMPTY
15420: LIST
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 3
15428: PUSH
15429: LD_INT 55
15431: PUSH
15432: EMPTY
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: PPUSH
15447: CALL_OW 69
15451: PUSH
15452: LD_EXP 2
15456: PUSH
15457: LD_EXP 3
15461: PUSH
15462: LD_EXP 4
15466: PUSH
15467: LD_EXP 5
15471: PUSH
15472: LD_EXP 7
15476: PUSH
15477: LD_EXP 8
15481: PUSH
15482: LD_EXP 9
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: PUSH
15496: LD_EXP 44
15500: ADD
15501: DIFF
15502: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
15503: LD_VAR 0 4
15507: PUSH
15508: LD_INT 1
15510: PPUSH
15511: CALL_OW 463
15515: NOT
15516: AND
15517: IFFALSE 15311
// tmp := tmp [ rand ( 1 , tmp ) ] ;
15519: LD_ADDR_VAR 0 4
15523: PUSH
15524: LD_VAR 0 4
15528: PUSH
15529: LD_INT 1
15531: PPUSH
15532: LD_VAR 0 4
15536: PPUSH
15537: CALL_OW 12
15541: ARRAY
15542: ST_TO_ADDR
// blockSpawn := 1 ;
15543: LD_ADDR_EXP 29
15547: PUSH
15548: LD_INT 1
15550: ST_TO_ADDR
// uc_side := 2 ;
15551: LD_ADDR_OWVAR 20
15555: PUSH
15556: LD_INT 2
15558: ST_TO_ADDR
// uc_nation := 2 ;
15559: LD_ADDR_OWVAR 21
15563: PUSH
15564: LD_INT 2
15566: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
15567: LD_ADDR_EXP 19
15571: PUSH
15572: LD_STRING Kurt
15574: PPUSH
15575: LD_INT 0
15577: PPUSH
15578: LD_STRING 
15580: PPUSH
15581: CALL 37450 0 3
15585: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
15586: LD_EXP 19
15590: PPUSH
15591: LD_VAR 0 4
15595: PPUSH
15596: CALL_OW 250
15600: PPUSH
15601: LD_VAR 0 4
15605: PPUSH
15606: CALL_OW 251
15610: PPUSH
15611: LD_INT 5
15613: PPUSH
15614: LD_INT 1
15616: PPUSH
15617: CALL_OW 50
// InGameOn ;
15621: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
15625: LD_EXP 19
15629: PPUSH
15630: CALL_OW 87
// wait ( 0 0$2 ) ;
15634: LD_INT 70
15636: PPUSH
15637: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
15641: LD_EXP 19
15645: PPUSH
15646: LD_VAR 0 4
15650: PPUSH
15651: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
15655: LD_VAR 0 4
15659: PPUSH
15660: LD_EXP 19
15664: PPUSH
15665: CALL_OW 112
// wait ( 0 0$1 ) ;
15669: LD_INT 35
15671: PPUSH
15672: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
15676: LD_VAR 0 4
15680: PPUSH
15681: LD_EXP 19
15685: PPUSH
15686: CALL_OW 119
// DialogueOn ;
15690: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
15694: LD_EXP 19
15698: PPUSH
15699: LD_STRING D2-Kurt-1
15701: PPUSH
15702: CALL_OW 88
// if tmp = JMM then
15706: LD_VAR 0 4
15710: PUSH
15711: LD_EXP 1
15715: EQUAL
15716: IFFALSE 15808
// begin Say ( JMM , D2-JMM-1 ) ;
15718: LD_EXP 1
15722: PPUSH
15723: LD_STRING D2-JMM-1
15725: PPUSH
15726: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15730: LD_EXP 19
15734: PPUSH
15735: LD_STRING D2-Kurt-2
15737: PPUSH
15738: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
15742: LD_EXP 1
15746: PPUSH
15747: LD_STRING D2-JMM-2
15749: PPUSH
15750: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15754: LD_EXP 19
15758: PPUSH
15759: LD_STRING D2-Kurt-3
15761: PPUSH
15762: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
15766: LD_EXP 1
15770: PPUSH
15771: LD_STRING D2-JMM-3
15773: PPUSH
15774: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15778: LD_EXP 19
15782: PPUSH
15783: LD_STRING D2-Kurt-4
15785: PPUSH
15786: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
15790: LD_EXP 1
15794: PPUSH
15795: LD_STRING D2-JMM-4
15797: PPUSH
15798: CALL_OW 88
// DialogueOff ;
15802: CALL_OW 7
// end else
15806: GO 16036
// begin if GetSex ( tmp ) = 1 then
15808: LD_VAR 0 4
15812: PPUSH
15813: CALL_OW 258
15817: PUSH
15818: LD_INT 1
15820: EQUAL
15821: IFFALSE 15837
// Say ( tmp , D2-Sol1-1 ) else
15823: LD_VAR 0 4
15827: PPUSH
15828: LD_STRING D2-Sol1-1
15830: PPUSH
15831: CALL_OW 88
15835: GO 15849
// Say ( tmp , D2-FSol1-1 ) ;
15837: LD_VAR 0 4
15841: PPUSH
15842: LD_STRING D2-FSol1-1
15844: PPUSH
15845: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15849: LD_EXP 19
15853: PPUSH
15854: LD_STRING D2-Kurt-2
15856: PPUSH
15857: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15861: LD_VAR 0 4
15865: PPUSH
15866: CALL_OW 258
15870: PUSH
15871: LD_INT 1
15873: EQUAL
15874: IFFALSE 15890
// Say ( tmp , D2-Sol1-2 ) else
15876: LD_VAR 0 4
15880: PPUSH
15881: LD_STRING D2-Sol1-2
15883: PPUSH
15884: CALL_OW 88
15888: GO 15902
// Say ( tmp , D2-FSol1-2 ) ;
15890: LD_VAR 0 4
15894: PPUSH
15895: LD_STRING D2-FSol1-2
15897: PPUSH
15898: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15902: LD_EXP 19
15906: PPUSH
15907: LD_STRING D2-Kurt-3
15909: PPUSH
15910: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15914: LD_VAR 0 4
15918: PPUSH
15919: CALL_OW 258
15923: PUSH
15924: LD_INT 1
15926: EQUAL
15927: IFFALSE 15943
// Say ( tmp , D2-Sol1-3 ) else
15929: LD_VAR 0 4
15933: PPUSH
15934: LD_STRING D2-Sol1-3
15936: PPUSH
15937: CALL_OW 88
15941: GO 15955
// Say ( tmp , D2-FSol1-3 ) ;
15943: LD_VAR 0 4
15947: PPUSH
15948: LD_STRING D2-FSol1-3
15950: PPUSH
15951: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15955: LD_EXP 19
15959: PPUSH
15960: LD_STRING D2-Kurt-4
15962: PPUSH
15963: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15967: LD_VAR 0 4
15971: PPUSH
15972: CALL_OW 258
15976: PUSH
15977: LD_INT 1
15979: EQUAL
15980: IFFALSE 16008
// begin Say ( tmp , D2-Sol1-4 ) ;
15982: LD_VAR 0 4
15986: PPUSH
15987: LD_STRING D2-Sol1-4
15989: PPUSH
15990: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
15994: LD_VAR 0 4
15998: PPUSH
15999: LD_STRING D2-Sol1-5
16001: PPUSH
16002: CALL_OW 88
// end else
16006: GO 16032
// begin Say ( tmp , D2-FSol1-4 ) ;
16008: LD_VAR 0 4
16012: PPUSH
16013: LD_STRING D2-FSol1-4
16015: PPUSH
16016: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16020: LD_VAR 0 4
16024: PPUSH
16025: LD_STRING D2-FSol1-5
16027: PPUSH
16028: CALL_OW 88
// end ; DialogueOff ;
16032: CALL_OW 7
// end ; dec := ShowQuery1 ;
16036: LD_ADDR_VAR 0 6
16040: PUSH
16041: CALL 7304 0 0
16045: ST_TO_ADDR
// if dec = 1 then
16046: LD_VAR 0 6
16050: PUSH
16051: LD_INT 1
16053: EQUAL
16054: IFFALSE 16116
// begin DialogueOn ;
16056: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16060: LD_EXP 19
16064: PPUSH
16065: LD_STRING D2a-Kurt-1
16067: PPUSH
16068: CALL_OW 88
// DialogueOff ;
16072: CALL_OW 7
// InGameOff ;
16076: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16080: LD_INT 1
16082: PPUSH
16083: LD_INT 2
16085: PPUSH
16086: LD_INT 2
16088: PPUSH
16089: LD_INT 1
16091: PPUSH
16092: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16096: LD_EXP 19
16100: PPUSH
16101: LD_INT 8
16103: PPUSH
16104: CALL_OW 113
// readyToEscape := 1 ;
16108: LD_ADDR_EXP 21
16112: PUSH
16113: LD_INT 1
16115: ST_TO_ADDR
// end ; if dec = 2 then
16116: LD_VAR 0 6
16120: PUSH
16121: LD_INT 2
16123: EQUAL
16124: IFFALSE 16592
// begin DialogueOn ;
16126: CALL_OW 6
// if tmp = JMM then
16130: LD_VAR 0 4
16134: PUSH
16135: LD_EXP 1
16139: EQUAL
16140: IFFALSE 16196
// begin Say ( JMM , D2b-JMM-1 ) ;
16142: LD_EXP 1
16146: PPUSH
16147: LD_STRING D2b-JMM-1
16149: PPUSH
16150: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16154: LD_EXP 19
16158: PPUSH
16159: LD_STRING D2b-Kurt-1
16161: PPUSH
16162: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
16166: LD_EXP 1
16170: PPUSH
16171: LD_STRING D2b-JMM-2
16173: PPUSH
16174: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16178: LD_EXP 19
16182: PPUSH
16183: LD_STRING D2b-Kurt-2
16185: PPUSH
16186: CALL_OW 88
// DialogueOff ;
16190: CALL_OW 7
// end else
16194: GO 16347
// begin if GetSex ( tmp ) = 1 then
16196: LD_VAR 0 4
16200: PPUSH
16201: CALL_OW 258
16205: PUSH
16206: LD_INT 1
16208: EQUAL
16209: IFFALSE 16225
// Say ( tmp , D2b-Sol1-1 ) else
16211: LD_VAR 0 4
16215: PPUSH
16216: LD_STRING D2b-Sol1-1
16218: PPUSH
16219: CALL_OW 88
16223: GO 16237
// Say ( tmp , D2b-FSol1-1 ) ;
16225: LD_VAR 0 4
16229: PPUSH
16230: LD_STRING D2b-FSol1-1
16232: PPUSH
16233: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16237: LD_EXP 19
16241: PPUSH
16242: LD_STRING D2b-Kurt-1
16244: PPUSH
16245: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16249: LD_VAR 0 4
16253: PPUSH
16254: CALL_OW 258
16258: PUSH
16259: LD_INT 1
16261: EQUAL
16262: IFFALSE 16278
// Say ( tmp , D2b-Sol1-2 ) else
16264: LD_VAR 0 4
16268: PPUSH
16269: LD_STRING D2b-Sol1-2
16271: PPUSH
16272: CALL_OW 88
16276: GO 16290
// Say ( tmp , D2b-FSol1-2 ) ;
16278: LD_VAR 0 4
16282: PPUSH
16283: LD_STRING D2b-FSol1-2
16285: PPUSH
16286: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16290: LD_EXP 19
16294: PPUSH
16295: LD_STRING D2b-Kurt-2
16297: PPUSH
16298: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16302: LD_VAR 0 4
16306: PPUSH
16307: CALL_OW 258
16311: PUSH
16312: LD_INT 1
16314: EQUAL
16315: IFFALSE 16331
// Say ( tmp , D2c-Sol1-2 ) else
16317: LD_VAR 0 4
16321: PPUSH
16322: LD_STRING D2c-Sol1-2
16324: PPUSH
16325: CALL_OW 88
16329: GO 16343
// Say ( tmp , D2c-FSol1-2 ) ;
16331: LD_VAR 0 4
16335: PPUSH
16336: LD_STRING D2c-FSol1-2
16338: PPUSH
16339: CALL_OW 88
// DialogueOff ;
16343: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
16347: LD_ADDR_VAR 0 7
16351: PUSH
16352: CALL 7325 0 0
16356: ST_TO_ADDR
// if dec2 = 1 then
16357: LD_VAR 0 7
16361: PUSH
16362: LD_INT 1
16364: EQUAL
16365: IFFALSE 16427
// begin DialogueOn ;
16367: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16371: LD_EXP 19
16375: PPUSH
16376: LD_STRING D2a-Kurt-1
16378: PPUSH
16379: CALL_OW 88
// DialogueOff ;
16383: CALL_OW 7
// InGameOff ;
16387: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16391: LD_INT 1
16393: PPUSH
16394: LD_INT 2
16396: PPUSH
16397: LD_INT 2
16399: PPUSH
16400: LD_INT 1
16402: PPUSH
16403: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16407: LD_EXP 19
16411: PPUSH
16412: LD_INT 8
16414: PPUSH
16415: CALL_OW 113
// readyToEscape := 1 ;
16419: LD_ADDR_EXP 21
16423: PUSH
16424: LD_INT 1
16426: ST_TO_ADDR
// end ; if dec2 = 2 then
16427: LD_VAR 0 7
16431: PUSH
16432: LD_INT 2
16434: EQUAL
16435: IFFALSE 16592
// begin if tmp = JMM then
16437: LD_VAR 0 4
16441: PUSH
16442: LD_EXP 1
16446: EQUAL
16447: IFFALSE 16507
// begin DialogueOn ;
16449: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
16453: LD_EXP 1
16457: PPUSH
16458: LD_STRING D2c-JMM-1
16460: PPUSH
16461: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16465: LD_EXP 19
16469: PPUSH
16470: LD_STRING D2c-Kurt-1
16472: PPUSH
16473: CALL_OW 88
// DialogueOff ;
16477: CALL_OW 7
// InGameOff ;
16481: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16485: LD_EXP 19
16489: PPUSH
16490: LD_INT 8
16492: PPUSH
16493: CALL_OW 113
// readyToEscape := 1 ;
16497: LD_ADDR_EXP 21
16501: PUSH
16502: LD_INT 1
16504: ST_TO_ADDR
// end else
16505: GO 16592
// begin DialogueOn ;
16507: CALL_OW 6
// if GetSex ( tmp ) = 1 then
16511: LD_VAR 0 4
16515: PPUSH
16516: CALL_OW 258
16520: PUSH
16521: LD_INT 1
16523: EQUAL
16524: IFFALSE 16540
// Say ( tmp , D2c-Sol1-1 ) else
16526: LD_VAR 0 4
16530: PPUSH
16531: LD_STRING D2c-Sol1-1
16533: PPUSH
16534: CALL_OW 88
16538: GO 16552
// Say ( tmp , D2c-FSol1-1 ) ;
16540: LD_VAR 0 4
16544: PPUSH
16545: LD_STRING D2c-FSol1-1
16547: PPUSH
16548: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16552: LD_EXP 19
16556: PPUSH
16557: LD_STRING D2c-Kurt-1
16559: PPUSH
16560: CALL_OW 88
// DialogueOff ;
16564: CALL_OW 7
// InGameOff ;
16568: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16572: LD_EXP 19
16576: PPUSH
16577: LD_INT 8
16579: PPUSH
16580: CALL_OW 113
// readyToEscape := 1 ;
16584: LD_ADDR_EXP 21
16588: PUSH
16589: LD_INT 1
16591: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
16592: LD_VAR 0 6
16596: PUSH
16597: LD_INT 3
16599: EQUAL
16600: IFFALSE 16761
// begin DialogueOn ;
16602: CALL_OW 6
// if tmp = JMM then
16606: LD_VAR 0 4
16610: PUSH
16611: LD_EXP 1
16615: EQUAL
16616: IFFALSE 16676
// begin DialogueOn ;
16618: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
16622: LD_EXP 1
16626: PPUSH
16627: LD_STRING D2c-JMM-1
16629: PPUSH
16630: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16634: LD_EXP 19
16638: PPUSH
16639: LD_STRING D2c-Kurt-1
16641: PPUSH
16642: CALL_OW 88
// DialogueOff ;
16646: CALL_OW 7
// InGameOff ;
16650: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16654: LD_EXP 19
16658: PPUSH
16659: LD_INT 8
16661: PPUSH
16662: CALL_OW 113
// readyToEscape := 1 ;
16666: LD_ADDR_EXP 21
16670: PUSH
16671: LD_INT 1
16673: ST_TO_ADDR
// end else
16674: GO 16761
// begin DialogueOn ;
16676: CALL_OW 6
// if GetSex ( tmp ) = 1 then
16680: LD_VAR 0 4
16684: PPUSH
16685: CALL_OW 258
16689: PUSH
16690: LD_INT 1
16692: EQUAL
16693: IFFALSE 16709
// Say ( tmp , D2c-Sol1-1 ) else
16695: LD_VAR 0 4
16699: PPUSH
16700: LD_STRING D2c-Sol1-1
16702: PPUSH
16703: CALL_OW 88
16707: GO 16721
// Say ( tmp , D2c-FSol1-1 ) ;
16709: LD_VAR 0 4
16713: PPUSH
16714: LD_STRING D2c-FSol1-1
16716: PPUSH
16717: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16721: LD_EXP 19
16725: PPUSH
16726: LD_STRING D2c-Kurt-1
16728: PPUSH
16729: CALL_OW 88
// DialogueOff ;
16733: CALL_OW 7
// InGameOff ;
16737: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16741: LD_EXP 19
16745: PPUSH
16746: LD_INT 8
16748: PPUSH
16749: CALL_OW 113
// readyToEscape := 1 ;
16753: LD_ADDR_EXP 21
16757: PUSH
16758: LD_INT 1
16760: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
16761: LD_ADDR_EXP 29
16765: PUSH
16766: LD_INT 0
16768: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16769: LD_INT 35
16771: PPUSH
16772: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
16776: LD_EXP 19
16780: PPUSH
16781: LD_INT 8
16783: PPUSH
16784: CALL_OW 308
16788: PUSH
16789: LD_EXP 21
16793: AND
16794: PUSH
16795: LD_EXP 19
16799: PPUSH
16800: CALL_OW 301
16804: OR
16805: IFFALSE 16769
// if IsDead ( Kurt ) then
16807: LD_EXP 19
16811: PPUSH
16812: CALL_OW 301
16816: IFFALSE 16820
// exit ;
16818: GO 16875
// RemoveUnit ( Kurt ) ;
16820: LD_EXP 19
16824: PPUSH
16825: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
16829: LD_EXP 19
16833: PPUSH
16834: LD_STRING Kurt
16836: PPUSH
16837: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
16841: LD_INT 1
16843: PPUSH
16844: LD_INT 2
16846: PPUSH
16847: CALL_OW 81
16851: PUSH
16852: LD_INT 0
16854: EQUAL
16855: IFFALSE 16867
// kurtStatus = 1 else
16857: LD_ADDR_EXP 20
16861: PUSH
16862: LD_INT 1
16864: ST_TO_ADDR
16865: GO 16875
// kurtStatus = 2 ;
16867: LD_ADDR_EXP 20
16871: PUSH
16872: LD_INT 2
16874: ST_TO_ADDR
// end ; end_of_file
16875: LD_VAR 0 1
16879: RET
// every 0 0$2 do
16880: GO 16882
16882: DISABLE
// begin enable ;
16883: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
16884: LD_INT 3
16886: PPUSH
16887: LD_INT 2
16889: PPUSH
16890: LD_INT 10
16892: PPUSH
16893: LD_EXP 31
16897: PPUSH
16898: CALL 7736 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
16902: LD_INT 3
16904: PPUSH
16905: LD_INT 12
16907: PPUSH
16908: LD_EXP 31
16912: PPUSH
16913: CALL 9339 0 3
// if disableHealAI = 0 then
16917: LD_EXP 33
16921: PUSH
16922: LD_INT 0
16924: EQUAL
16925: IFFALSE 16946
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
16927: LD_INT 3
16929: PPUSH
16930: LD_INT 9
16932: PPUSH
16933: LD_INT 10
16935: PPUSH
16936: LD_INT 32
16938: PUSH
16939: EMPTY
16940: LIST
16941: PPUSH
16942: CALL 8103 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
16946: LD_INT 3
16948: PPUSH
16949: LD_INT 51
16951: PPUSH
16952: LD_INT 6
16954: PPUSH
16955: CALL 8792 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
16959: LD_INT 2
16961: PPUSH
16962: CALL_OW 303
16966: PUSH
16967: LD_INT 2
16969: PPUSH
16970: CALL_OW 255
16974: PUSH
16975: LD_INT 1
16977: EQUAL
16978: OR
16979: IFFALSE 16993
// DefendDepot ( 3 , rudepo ) else
16981: LD_INT 3
16983: PPUSH
16984: LD_INT 2
16986: PPUSH
16987: CALL 8619 0 2
16991: GO 17003
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
16993: LD_INT 3
16995: PPUSH
16996: LD_INT 10
16998: PPUSH
16999: CALL 8910 0 2
// end ;
17003: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17004: LD_INT 22
17006: PUSH
17007: LD_INT 3
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 21
17016: PUSH
17017: LD_INT 2
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 55
17026: PUSH
17027: EMPTY
17028: LIST
17029: PUSH
17030: LD_INT 3
17032: PUSH
17033: LD_INT 34
17035: PUSH
17036: LD_INT 51
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: PPUSH
17053: CALL_OW 69
17057: PUSH
17058: LD_INT 0
17060: EQUAL
17061: PUSH
17062: LD_INT 21
17064: PPUSH
17065: CALL_OW 255
17069: PUSH
17070: LD_INT 3
17072: EQUAL
17073: AND
17074: PUSH
17075: LD_INT 21
17077: PPUSH
17078: CALL_OW 302
17082: AND
17083: PUSH
17084: LD_INT 2
17086: PPUSH
17087: CALL_OW 255
17091: PUSH
17092: LD_INT 3
17094: EQUAL
17095: AND
17096: PUSH
17097: LD_INT 2
17099: PPUSH
17100: CALL_OW 302
17104: AND
17105: PUSH
17106: LD_INT 21
17108: PPUSH
17109: CALL_OW 313
17113: AND
17114: PUSH
17115: LD_EXP 47
17119: PUSH
17120: LD_INT 4
17122: PUSH
17123: LD_INT 5
17125: PUSH
17126: LD_INT 6
17128: PUSH
17129: LD_INT 6
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: PUSH
17138: LD_OWVAR 67
17142: ARRAY
17143: LESS
17144: AND
17145: IFFALSE 17366
17147: GO 17149
17149: DISABLE
// begin enable ;
17150: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
17151: LD_INT 2
17153: PPUSH
17154: CALL_OW 274
17158: PPUSH
17159: LD_INT 1
17161: PPUSH
17162: LD_INT 2000
17164: PPUSH
17165: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
17169: LD_INT 3
17171: PPUSH
17172: LD_INT 21
17174: PPUSH
17175: LD_INT 4
17177: PUSH
17178: LD_INT 5
17180: PUSH
17181: LD_INT 6
17183: PUSH
17184: LD_INT 6
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: PUSH
17193: LD_OWVAR 67
17197: ARRAY
17198: PUSH
17199: LD_EXP 47
17203: MINUS
17204: PPUSH
17205: LD_INT 43
17207: PUSH
17208: LD_INT 43
17210: PUSH
17211: LD_INT 44
17213: PUSH
17214: LD_INT 44
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 43
17225: PUSH
17226: LD_INT 43
17228: PUSH
17229: LD_INT 43
17231: PUSH
17232: LD_INT 44
17234: PUSH
17235: LD_INT 44
17237: PUSH
17238: LD_INT 46
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 43
17251: PUSH
17252: LD_INT 43
17254: PUSH
17255: LD_INT 43
17257: PUSH
17258: LD_INT 44
17260: PUSH
17261: LD_INT 44
17263: PUSH
17264: LD_INT 46
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 43
17277: PUSH
17278: LD_INT 43
17280: PUSH
17281: LD_INT 44
17283: PUSH
17284: LD_INT 46
17286: PUSH
17287: LD_INT 46
17289: PUSH
17290: LD_INT 46
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: PUSH
17307: LD_OWVAR 67
17311: ARRAY
17312: PPUSH
17313: LD_INT 1
17315: PPUSH
17316: LD_INT 1
17318: PPUSH
17319: LD_INT 22
17321: PUSH
17322: LD_INT 22
17324: PUSH
17325: LD_INT 24
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 1
17334: PPUSH
17335: LD_INT 2
17337: PPUSH
17338: CALL_OW 12
17342: ARRAY
17343: PUSH
17344: LD_INT 24
17346: PUSH
17347: LD_INT 24
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: PUSH
17356: LD_OWVAR 67
17360: ARRAY
17361: PPUSH
17362: CALL 7582 0 7
// end ;
17366: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
17367: LD_INT 17
17369: PPUSH
17370: CALL_OW 255
17374: PUSH
17375: LD_INT 3
17377: EQUAL
17378: PUSH
17379: LD_INT 17
17381: PPUSH
17382: CALL_OW 302
17386: AND
17387: PUSH
17388: LD_INT 2
17390: PPUSH
17391: CALL_OW 255
17395: PUSH
17396: LD_INT 3
17398: EQUAL
17399: AND
17400: PUSH
17401: LD_INT 2
17403: PPUSH
17404: CALL_OW 302
17408: AND
17409: PUSH
17410: LD_EXP 47
17414: PUSH
17415: LD_INT 4
17417: PUSH
17418: LD_INT 5
17420: PUSH
17421: LD_INT 6
17423: PUSH
17424: LD_INT 7
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: PUSH
17433: LD_OWVAR 67
17437: ARRAY
17438: LESS
17439: AND
17440: IFFALSE 17488
17442: GO 17444
17444: DISABLE
// begin enable ;
17445: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17446: LD_INT 17
17448: PPUSH
17449: LD_INT 22
17451: PPUSH
17452: LD_INT 1
17454: PPUSH
17455: LD_INT 1
17457: PPUSH
17458: LD_INT 42
17460: PUSH
17461: LD_INT 43
17463: PUSH
17464: LD_INT 44
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 1
17474: PPUSH
17475: LD_INT 3
17477: PPUSH
17478: CALL_OW 12
17482: ARRAY
17483: PPUSH
17484: CALL_OW 185
// end ;
17488: END
// every 2 2$0 do var i , j ;
17489: GO 17491
17491: DISABLE
17492: LD_INT 0
17494: PPUSH
17495: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17496: LD_INT 14700
17498: PUSH
17499: LD_INT 33600
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 2
17511: PPUSH
17512: CALL_OW 12
17516: ARRAY
17517: PPUSH
17518: CALL_OW 67
// disableHealAI = 1 ;
17522: LD_ADDR_EXP 33
17526: PUSH
17527: LD_INT 1
17529: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17530: LD_ADDR_VAR 0 1
17534: PUSH
17535: LD_INT 22
17537: PUSH
17538: LD_INT 3
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 25
17547: PUSH
17548: LD_INT 4
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PPUSH
17559: CALL_OW 69
17563: PUSH
17564: FOR_IN
17565: IFFALSE 17578
// ComExitBuilding ( i ) ;
17567: LD_VAR 0 1
17571: PPUSH
17572: CALL_OW 122
17576: GO 17564
17578: POP
17579: POP
// wait ( 0 0$1 ) ;
17580: LD_INT 35
17582: PPUSH
17583: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17587: LD_INT 35
17589: PPUSH
17590: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17594: LD_ADDR_VAR 0 1
17598: PUSH
17599: LD_INT 22
17601: PUSH
17602: LD_INT 3
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 25
17611: PUSH
17612: LD_INT 4
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PPUSH
17623: CALL_OW 69
17627: PUSH
17628: FOR_IN
17629: IFFALSE 17706
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17631: LD_ADDR_VAR 0 2
17635: PUSH
17636: LD_INT 17
17638: PPUSH
17639: LD_INT 22
17641: PUSH
17642: LD_INT 0
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 25
17651: PUSH
17652: LD_INT 12
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PPUSH
17663: CALL_OW 70
17667: PUSH
17668: FOR_IN
17669: IFFALSE 17702
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
17671: LD_VAR 0 1
17675: PPUSH
17676: LD_VAR 0 2
17680: PPUSH
17681: CALL_OW 250
17685: PPUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: CALL_OW 251
17695: PPUSH
17696: CALL_OW 191
17700: GO 17668
17702: POP
17703: POP
17704: GO 17628
17706: POP
17707: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
17708: LD_INT 22
17710: PUSH
17711: LD_INT 3
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 25
17720: PUSH
17721: LD_INT 4
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PPUSH
17732: CALL_OW 69
17736: PUSH
17737: LD_INT 0
17739: EQUAL
17740: PUSH
17741: LD_EXP 32
17745: PUSH
17746: LD_INT 6
17748: PUSH
17749: LD_INT 7
17751: PUSH
17752: LD_INT 8
17754: PUSH
17755: LD_INT 8
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: PUSH
17764: LD_OWVAR 67
17768: ARRAY
17769: GREATEREQUAL
17770: OR
17771: PUSH
17772: LD_INT 17
17774: PPUSH
17775: LD_INT 22
17777: PUSH
17778: LD_INT 0
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 25
17787: PUSH
17788: LD_INT 12
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PPUSH
17799: CALL_OW 70
17803: PUSH
17804: LD_INT 0
17806: EQUAL
17807: OR
17808: IFFALSE 17587
// disableHealAI = 0 ;
17810: LD_ADDR_EXP 33
17814: PUSH
17815: LD_INT 0
17817: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
17818: LD_ADDR_VAR 0 1
17822: PUSH
17823: LD_INT 22
17825: PUSH
17826: LD_INT 3
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 25
17835: PUSH
17836: LD_INT 12
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PPUSH
17847: CALL_OW 69
17851: PUSH
17852: FOR_IN
17853: IFFALSE 17869
// SetClass ( i , 16 ) ;
17855: LD_VAR 0 1
17859: PPUSH
17860: LD_INT 16
17862: PPUSH
17863: CALL_OW 336
17867: GO 17852
17869: POP
17870: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17871: LD_ADDR_VAR 0 1
17875: PUSH
17876: LD_INT 22
17878: PUSH
17879: LD_INT 3
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 25
17888: PUSH
17889: LD_INT 4
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PPUSH
17900: CALL_OW 69
17904: PUSH
17905: FOR_IN
17906: IFFALSE 17922
// ComEnterUnit ( i , rulab ) ;
17908: LD_VAR 0 1
17912: PPUSH
17913: LD_INT 32
17915: PPUSH
17916: CALL_OW 120
17920: GO 17905
17922: POP
17923: POP
// end ; end_of_file
17924: PPOPN 2
17926: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
17927: LD_EXP 26
17931: PUSH
17932: LD_INT 0
17934: LESSEQUAL
17935: IFFALSE 18084
17937: GO 17939
17939: DISABLE
17940: LD_INT 0
17942: PPUSH
17943: PPUSH
17944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17945: LD_ADDR_VAR 0 2
17949: PUSH
17950: LD_INT 22
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 21
17962: PUSH
17963: LD_INT 3
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 2
17972: PUSH
17973: LD_INT 30
17975: PUSH
17976: LD_INT 0
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 30
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: LIST
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: PPUSH
18003: CALL_OW 69
18007: ST_TO_ADDR
// for i in tmp do
18008: LD_ADDR_VAR 0 1
18012: PUSH
18013: LD_VAR 0 2
18017: PUSH
18018: FOR_IN
18019: IFFALSE 18052
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18021: LD_ADDR_VAR 0 3
18025: PUSH
18026: LD_VAR 0 3
18030: PUSH
18031: LD_VAR 0 1
18035: PPUSH
18036: CALL_OW 274
18040: PPUSH
18041: LD_INT 1
18043: PPUSH
18044: CALL_OW 275
18048: PLUS
18049: ST_TO_ADDR
18050: GO 18018
18052: POP
18053: POP
// if yourCrates >= needCrates then
18054: LD_VAR 0 3
18058: PUSH
18059: LD_EXP 25
18063: GREATEREQUAL
18064: IFFALSE 18077
// FinishMission ( yourCrates ) else
18066: LD_VAR 0 3
18070: PPUSH
18071: CALL 18087 0 1
18075: GO 18084
// YouLost ( matmin ) ;
18077: LD_STRING matmin
18079: PPUSH
18080: CALL_OW 104
// end ;
18084: PPOPN 3
18086: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
18087: LD_INT 0
18089: PPUSH
18090: PPUSH
18091: PPUSH
18092: PPUSH
// if killCounter = 0 then
18093: LD_EXP 45
18097: PUSH
18098: LD_INT 0
18100: EQUAL
18101: IFFALSE 18110
// SetAchievement ( ACH_SURV ) ;
18103: LD_STRING ACH_SURV
18105: PPUSH
18106: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
18110: LD_INT 22
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 21
18122: PUSH
18123: LD_INT 3
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 69
18138: PUSH
18139: LD_INT 0
18141: EQUAL
18142: IFFALSE 18158
// begin wait ( 3 ) ;
18144: LD_INT 3
18146: PPUSH
18147: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
18151: LD_STRING ACH_BASEDESTROYER
18153: PPUSH
18154: CALL_OW 543
// end ; m1 := false ;
18158: LD_ADDR_VAR 0 3
18162: PUSH
18163: LD_INT 0
18165: ST_TO_ADDR
// m2 := false ;
18166: LD_ADDR_VAR 0 4
18170: PUSH
18171: LD_INT 0
18173: ST_TO_ADDR
// m3 := false ;
18174: LD_ADDR_VAR 0 5
18178: PUSH
18179: LD_INT 0
18181: ST_TO_ADDR
// if crates + 100 > crates then
18182: LD_VAR 0 1
18186: PUSH
18187: LD_INT 100
18189: PLUS
18190: PUSH
18191: LD_VAR 0 1
18195: GREATER
18196: IFFALSE 18228
// begin AddMedal ( cans , 1 ) ;
18198: LD_STRING cans
18200: PPUSH
18201: LD_INT 1
18203: PPUSH
18204: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
18208: LD_INT 1
18210: PPUSH
18211: LD_STRING 06_crates_1
18213: PPUSH
18214: CALL_OW 39
// m1 := true ;
18218: LD_ADDR_VAR 0 3
18222: PUSH
18223: LD_INT 1
18225: ST_TO_ADDR
// end else
18226: GO 18249
// begin AddMedal ( cans , - 1 ) ;
18228: LD_STRING cans
18230: PPUSH
18231: LD_INT 1
18233: NEG
18234: PPUSH
18235: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
18239: LD_INT 0
18241: PPUSH
18242: LD_STRING 06_crates_1
18244: PPUSH
18245: CALL_OW 39
// end ; if unitLost < 3 then
18249: LD_EXP 30
18253: PUSH
18254: LD_INT 3
18256: LESS
18257: IFFALSE 18279
// begin AddMedal ( people , 1 ) ;
18259: LD_STRING people
18261: PPUSH
18262: LD_INT 1
18264: PPUSH
18265: CALL_OW 101
// m2 := true ;
18269: LD_ADDR_VAR 0 4
18273: PUSH
18274: LD_INT 1
18276: ST_TO_ADDR
// end else
18277: GO 18290
// AddMedal ( people , - 1 ) ;
18279: LD_STRING people
18281: PPUSH
18282: LD_INT 1
18284: NEG
18285: PPUSH
18286: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18290: LD_EXP 28
18294: PPUSH
18295: LD_STRING 06_remoteVehs_1
18297: PPUSH
18298: CALL_OW 39
// if remoteVehiclesBuild = 1 then
18302: LD_EXP 28
18306: PUSH
18307: LD_INT 1
18309: EQUAL
18310: IFFALSE 18332
// begin AddMedal ( remote , 1 ) ;
18312: LD_STRING remote
18314: PPUSH
18315: LD_INT 1
18317: PPUSH
18318: CALL_OW 101
// m3 := true ;
18322: LD_ADDR_VAR 0 5
18326: PUSH
18327: LD_INT 1
18329: ST_TO_ADDR
// end else
18330: GO 18372
// begin if GetTech ( 18 , 1 ) = state_enabled then
18332: LD_INT 18
18334: PPUSH
18335: LD_INT 1
18337: PPUSH
18338: CALL_OW 321
18342: PUSH
18343: LD_INT 1
18345: EQUAL
18346: IFFALSE 18361
// AddMedal ( remote , - 1 ) else
18348: LD_STRING remote
18350: PPUSH
18351: LD_INT 1
18353: NEG
18354: PPUSH
18355: CALL_OW 101
18359: GO 18372
// AddMedal ( remote , - 2 ) ;
18361: LD_STRING remote
18363: PPUSH
18364: LD_INT 2
18366: NEG
18367: PPUSH
18368: CALL_OW 101
// end ; if m1 and m2 and m3 then
18372: LD_VAR 0 3
18376: PUSH
18377: LD_VAR 0 4
18381: AND
18382: PUSH
18383: LD_VAR 0 5
18387: AND
18388: IFFALSE 18404
// begin wait ( 3 ) ;
18390: LD_INT 3
18392: PPUSH
18393: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
18397: LD_STRING ACH_ASPEED_6
18399: PPUSH
18400: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
18404: LD_OWVAR 67
18408: PUSH
18409: LD_INT 3
18411: GREATEREQUAL
18412: PUSH
18413: LD_VAR 0 3
18417: AND
18418: PUSH
18419: LD_VAR 0 4
18423: AND
18424: PUSH
18425: LD_VAR 0 5
18429: AND
18430: IFFALSE 18442
// SetAchievementEX ( ACH_AMER , 6 ) ;
18432: LD_STRING ACH_AMER
18434: PPUSH
18435: LD_INT 6
18437: PPUSH
18438: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
18442: LD_EXP 20
18446: PPUSH
18447: LD_STRING 06_KurtStatus_1
18449: PPUSH
18450: CALL_OW 39
// GiveMedals ( Main ) ;
18454: LD_STRING Main
18456: PPUSH
18457: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18461: LD_INT 22
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 21
18473: PUSH
18474: LD_INT 1
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 50
18483: PUSH
18484: EMPTY
18485: LIST
18486: PUSH
18487: LD_INT 2
18489: PUSH
18490: LD_INT 25
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 25
18502: PUSH
18503: LD_INT 2
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 25
18512: PUSH
18513: LD_INT 3
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 25
18522: PUSH
18523: LD_INT 4
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: PPUSH
18543: CALL_OW 69
18547: PPUSH
18548: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18552: LD_EXP 1
18556: PPUSH
18557: LD_EXP 42
18561: PUSH
18562: LD_STRING JMM
18564: STR
18565: PPUSH
18566: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18570: LD_EXP 2
18574: PPUSH
18575: LD_EXP 42
18579: PUSH
18580: LD_STRING Lisa
18582: STR
18583: PPUSH
18584: CALL 6917 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18588: LD_EXP 3
18592: PPUSH
18593: LD_EXP 42
18597: PUSH
18598: LD_STRING Bobby
18600: STR
18601: PPUSH
18602: CALL 6917 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18606: LD_EXP 4
18610: PPUSH
18611: LD_EXP 42
18615: PUSH
18616: LD_STRING Cyrus
18618: STR
18619: PPUSH
18620: CALL 6917 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18624: LD_EXP 5
18628: PPUSH
18629: LD_EXP 42
18633: PUSH
18634: LD_STRING Frank
18636: STR
18637: PPUSH
18638: CALL 6917 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18642: LD_EXP 6
18646: PPUSH
18647: LD_EXP 42
18651: PUSH
18652: LD_STRING Brown
18654: STR
18655: PPUSH
18656: CALL 6917 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18660: LD_EXP 7
18664: PPUSH
18665: LD_EXP 42
18669: PUSH
18670: LD_STRING Donaldson
18672: STR
18673: PPUSH
18674: CALL 6917 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18678: LD_EXP 8
18682: PPUSH
18683: LD_EXP 42
18687: PUSH
18688: LD_STRING Gladstone
18690: STR
18691: PPUSH
18692: CALL 6917 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18696: LD_EXP 9
18700: PPUSH
18701: LD_EXP 42
18705: PUSH
18706: LD_STRING Denis
18708: STR
18709: PPUSH
18710: CALL 6917 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
18714: LD_EXP 15
18718: PPUSH
18719: LD_EXP 42
18723: PUSH
18724: LD_STRING Joan
18726: STR
18727: PPUSH
18728: CALL 6917 0 2
// if IsLive ( Joan ) then
18732: LD_EXP 15
18736: PPUSH
18737: CALL_OW 300
18741: IFFALSE 18755
// SaveCharacters ( Joan , Joan ) ;
18743: LD_EXP 15
18747: PPUSH
18748: LD_STRING Joan
18750: PPUSH
18751: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
18755: LD_EXP 16
18759: PPUSH
18760: LD_STRING 06_JoanStatus_1
18762: PPUSH
18763: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
18767: LD_INT 50
18769: PUSH
18770: EMPTY
18771: LIST
18772: PUSH
18773: LD_INT 22
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 21
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 25
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 25
18808: PUSH
18809: LD_INT 2
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 25
18818: PUSH
18819: LD_INT 3
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 25
18828: PUSH
18829: LD_INT 4
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: PPUSH
18849: CALL_OW 69
18853: PUSH
18854: LD_EXP 1
18858: PUSH
18859: LD_EXP 2
18863: PUSH
18864: LD_EXP 3
18868: PUSH
18869: LD_EXP 4
18873: PUSH
18874: LD_EXP 5
18878: PUSH
18879: LD_EXP 6
18883: PUSH
18884: LD_EXP 7
18888: PUSH
18889: LD_EXP 8
18893: PUSH
18894: LD_EXP 9
18898: PUSH
18899: LD_EXP 15
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: DIFF
18916: PPUSH
18917: LD_STRING 06_other_survivors
18919: PPUSH
18920: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
18924: LD_INT 50
18926: PUSH
18927: EMPTY
18928: LIST
18929: PUSH
18930: LD_INT 22
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 2
18952: PUSH
18953: LD_INT 25
18955: PUSH
18956: LD_INT 12
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 25
18965: PUSH
18966: LD_INT 16
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: PPUSH
18984: CALL_OW 69
18988: PPUSH
18989: LD_STRING 06_other_apemans
18991: PPUSH
18992: CALL_OW 38
// YouWin ;
18996: CALL_OW 103
// end ; end_of_file
19000: LD_VAR 0 2
19004: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
19005: LD_EXP 47
19009: PUSH
19010: LD_OWVAR 1
19014: PUSH
19015: LD_INT 23100
19017: PUSH
19018: LD_INT 21000
19020: PUSH
19021: LD_INT 18900
19023: PUSH
19024: LD_INT 16800
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: PUSH
19033: LD_OWVAR 67
19037: ARRAY
19038: GREATER
19039: AND
19040: IFFALSE 19354
19042: GO 19044
19044: DISABLE
19045: LD_INT 0
19047: PPUSH
19048: PPUSH
19049: PPUSH
19050: PPUSH
// begin enable ;
19051: ENABLE
// for i in ruAttackers do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_EXP 47
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19352
// begin if not IsDrivenBy ( i ) then
19065: LD_VAR 0 1
19069: PPUSH
19070: CALL_OW 311
19074: NOT
19075: IFFALSE 19079
// continue ;
19077: GO 19062
// if i mod 2 = 0 then
19079: LD_VAR 0 1
19083: PUSH
19084: LD_INT 2
19086: MOD
19087: PUSH
19088: LD_INT 0
19090: EQUAL
19091: IFFALSE 19146
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 80 , 12 ] ] else
19093: LD_ADDR_VAR 0 3
19097: PUSH
19098: LD_INT 91
19100: PUSH
19101: LD_INT 52
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 82
19110: PUSH
19111: LD_INT 34
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 90
19120: PUSH
19121: LD_INT 26
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 80
19130: PUSH
19131: LD_INT 12
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: ST_TO_ADDR
19144: GO 19208
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 33 , 34 ] , [ 30 , 19 ] ] ;
19146: LD_ADDR_VAR 0 3
19150: PUSH
19151: LD_INT 91
19153: PUSH
19154: LD_INT 52
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 68
19163: PUSH
19164: LD_INT 46
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 48
19173: PUSH
19174: LD_INT 43
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 33
19183: PUSH
19184: LD_INT 34
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 30
19193: PUSH
19194: LD_INT 19
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
19208: LD_VAR 0 1
19212: PPUSH
19213: CALL_OW 256
19217: PUSH
19218: LD_INT 1000
19220: EQUAL
19221: IFFALSE 19239
// AgressiveMove ( i , path ) else
19223: LD_VAR 0 1
19227: PPUSH
19228: LD_VAR 0 3
19232: PPUSH
19233: CALL 76582 0 2
19237: GO 19350
// if GetLives ( i ) < 650 then
19239: LD_VAR 0 1
19243: PPUSH
19244: CALL_OW 256
19248: PUSH
19249: LD_INT 650
19251: LESS
19252: IFFALSE 19350
// begin if not IsInArea ( i , russianRepairArea ) then
19254: LD_VAR 0 1
19258: PPUSH
19259: LD_INT 12
19261: PPUSH
19262: CALL_OW 308
19266: NOT
19267: IFFALSE 19336
// begin SetTag ( i , 0 ) ;
19269: LD_VAR 0 1
19273: PPUSH
19274: LD_INT 0
19276: PPUSH
19277: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
19281: LD_VAR 0 1
19285: PPUSH
19286: CALL_OW 261
19290: PUSH
19291: LD_INT 50
19293: LESS
19294: PUSH
19295: LD_INT 21
19297: PPUSH
19298: CALL_OW 302
19302: AND
19303: IFFALSE 19319
// ComMoveUnit ( i , rufab ) else
19305: LD_VAR 0 1
19309: PPUSH
19310: LD_INT 21
19312: PPUSH
19313: CALL_OW 112
19317: GO 19334
// ComMoveXY ( i , 121 , 99 ) ;
19319: LD_VAR 0 1
19323: PPUSH
19324: LD_INT 121
19326: PPUSH
19327: LD_INT 99
19329: PPUSH
19330: CALL_OW 111
// end else
19334: GO 19350
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
19336: LD_VAR 0 1
19340: PPUSH
19341: CALL_OW 311
19345: PPUSH
19346: CALL 75678 0 1
// end ; end ;
19350: GO 19062
19352: POP
19353: POP
// end ;
19354: PPOPN 4
19356: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
19357: LD_INT 0
19359: PPUSH
19360: PPUSH
19361: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
19362: LD_ADDR_VAR 0 2
19366: PUSH
19367: DOUBLE
19368: LD_INT 1
19370: DEC
19371: ST_TO_ADDR
19372: LD_INT 4
19374: PUSH
19375: LD_INT 5
19377: PUSH
19378: LD_INT 6
19380: PUSH
19381: LD_INT 6
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: PUSH
19390: LD_OWVAR 67
19394: ARRAY
19395: PUSH
19396: FOR_TO
19397: IFFALSE 19572
// begin uc_side := 3 ;
19399: LD_ADDR_OWVAR 20
19403: PUSH
19404: LD_INT 3
19406: ST_TO_ADDR
// uc_nation := 3 ;
19407: LD_ADDR_OWVAR 21
19411: PUSH
19412: LD_INT 3
19414: ST_TO_ADDR
// InitHC_All ( ) ;
19415: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
19419: LD_INT 0
19421: PPUSH
19422: LD_INT 4
19424: PUSH
19425: LD_INT 5
19427: PUSH
19428: LD_INT 6
19430: PUSH
19431: LD_INT 6
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: PUSH
19440: LD_OWVAR 67
19444: ARRAY
19445: PPUSH
19446: CALL_OW 381
// un := CreateHuman ;
19450: LD_ADDR_VAR 0 3
19454: PUSH
19455: CALL_OW 44
19459: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
19460: LD_VAR 0 3
19464: PPUSH
19465: LD_INT 127
19467: PPUSH
19468: LD_INT 62
19470: PPUSH
19471: LD_INT 3
19473: PPUSH
19474: LD_INT 0
19476: PPUSH
19477: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
19481: LD_ADDR_EXP 48
19485: PUSH
19486: LD_EXP 48
19490: PPUSH
19491: LD_EXP 48
19495: PUSH
19496: LD_INT 1
19498: PLUS
19499: PPUSH
19500: LD_VAR 0 3
19504: PPUSH
19505: CALL_OW 1
19509: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
19510: LD_VAR 0 3
19514: PPUSH
19515: LD_INT 83
19517: PPUSH
19518: LD_INT 49
19520: PPUSH
19521: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
19525: LD_VAR 0 3
19529: PPUSH
19530: LD_INT 49
19532: PPUSH
19533: LD_INT 43
19535: PPUSH
19536: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
19540: LD_VAR 0 3
19544: PPUSH
19545: LD_INT 31
19547: PPUSH
19548: LD_INT 15
19550: PPUSH
19551: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
19555: LD_VAR 0 3
19559: PPUSH
19560: LD_INT 63
19562: PPUSH
19563: LD_INT 9
19565: PPUSH
19566: CALL_OW 174
// end ;
19570: GO 19396
19572: POP
19573: POP
// end ; end_of_file
19574: LD_VAR 0 1
19578: RET
// export function CreateNature ; var i , un ; begin
19579: LD_INT 0
19581: PPUSH
19582: PPUSH
19583: PPUSH
// for i := 1 to Difficulty + 2 do
19584: LD_ADDR_VAR 0 2
19588: PUSH
19589: DOUBLE
19590: LD_INT 1
19592: DEC
19593: ST_TO_ADDR
19594: LD_OWVAR 67
19598: PUSH
19599: LD_INT 2
19601: PLUS
19602: PUSH
19603: FOR_TO
19604: IFFALSE 19713
// begin hc_sex := sex_male ;
19606: LD_ADDR_OWVAR 27
19610: PUSH
19611: LD_INT 1
19613: ST_TO_ADDR
// uc_side := 0 ;
19614: LD_ADDR_OWVAR 20
19618: PUSH
19619: LD_INT 0
19621: ST_TO_ADDR
// uc_nation := nation_nature ;
19622: LD_ADDR_OWVAR 21
19626: PUSH
19627: LD_INT 0
19629: ST_TO_ADDR
// hc_class := class_tiger ;
19630: LD_ADDR_OWVAR 28
19634: PUSH
19635: LD_INT 14
19637: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19638: LD_ADDR_OWVAR 31
19642: PUSH
19643: LD_EXP 35
19647: PUSH
19648: LD_INT 0
19650: PUSH
19651: LD_INT 0
19653: PUSH
19654: LD_INT 0
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
19663: LD_ADDR_OWVAR 35
19667: PUSH
19668: LD_INT 5
19670: NEG
19671: PPUSH
19672: LD_INT 5
19674: PPUSH
19675: CALL_OW 12
19679: PUSH
19680: LD_OWVAR 67
19684: MUL
19685: ST_TO_ADDR
// un := CreateHuman ;
19686: LD_ADDR_VAR 0 3
19690: PUSH
19691: CALL_OW 44
19695: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19696: LD_VAR 0 3
19700: PPUSH
19701: LD_INT 18
19703: PPUSH
19704: LD_INT 0
19706: PPUSH
19707: CALL_OW 49
// end ;
19711: GO 19603
19713: POP
19714: POP
// for i = 1 to rand ( 3 , 4 ) do
19715: LD_ADDR_VAR 0 2
19719: PUSH
19720: DOUBLE
19721: LD_INT 1
19723: DEC
19724: ST_TO_ADDR
19725: LD_INT 3
19727: PPUSH
19728: LD_INT 4
19730: PPUSH
19731: CALL_OW 12
19735: PUSH
19736: FOR_TO
19737: IFFALSE 19807
// begin hc_class := class_phororhacos ;
19739: LD_ADDR_OWVAR 28
19743: PUSH
19744: LD_INT 18
19746: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19747: LD_ADDR_OWVAR 31
19751: PUSH
19752: LD_EXP 35
19756: PUSH
19757: LD_INT 0
19759: PUSH
19760: LD_INT 0
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: ST_TO_ADDR
// hc_agressivity := 0 ;
19772: LD_ADDR_OWVAR 35
19776: PUSH
19777: LD_INT 0
19779: ST_TO_ADDR
// un = CreateHuman ;
19780: LD_ADDR_VAR 0 3
19784: PUSH
19785: CALL_OW 44
19789: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19790: LD_VAR 0 3
19794: PPUSH
19795: LD_INT 18
19797: PPUSH
19798: LD_INT 0
19800: PPUSH
19801: CALL_OW 49
// end ;
19805: GO 19736
19807: POP
19808: POP
// for i := 1 to rand ( 1 , 3 ) + Difficulty do
19809: LD_ADDR_VAR 0 2
19813: PUSH
19814: DOUBLE
19815: LD_INT 1
19817: DEC
19818: ST_TO_ADDR
19819: LD_INT 1
19821: PPUSH
19822: LD_INT 3
19824: PPUSH
19825: CALL_OW 12
19829: PUSH
19830: LD_OWVAR 67
19834: PLUS
19835: PUSH
19836: FOR_TO
19837: IFFALSE 19974
// begin hc_class := class_apeman ;
19839: LD_ADDR_OWVAR 28
19843: PUSH
19844: LD_INT 12
19846: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
19847: LD_ADDR_OWVAR 31
19851: PUSH
19852: LD_INT 2
19854: PPUSH
19855: LD_INT 5
19857: PPUSH
19858: CALL_OW 12
19862: PUSH
19863: LD_INT 0
19865: PPUSH
19866: LD_INT 2
19868: PPUSH
19869: CALL_OW 12
19873: PUSH
19874: LD_INT 0
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: ST_TO_ADDR
// hc_agressivity := [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 45 , 55 ) ] [ Difficulty ] ;
19886: LD_ADDR_OWVAR 35
19890: PUSH
19891: LD_INT 20
19893: PPUSH
19894: LD_INT 30
19896: PPUSH
19897: CALL_OW 12
19901: PUSH
19902: LD_INT 30
19904: PPUSH
19905: LD_INT 40
19907: PPUSH
19908: CALL_OW 12
19912: PUSH
19913: LD_INT 40
19915: PPUSH
19916: LD_INT 50
19918: PPUSH
19919: CALL_OW 12
19923: PUSH
19924: LD_INT 45
19926: PPUSH
19927: LD_INT 55
19929: PPUSH
19930: CALL_OW 12
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: PUSH
19941: LD_OWVAR 67
19945: ARRAY
19946: ST_TO_ADDR
// un := CreateHuman ;
19947: LD_ADDR_VAR 0 3
19951: PUSH
19952: CALL_OW 44
19956: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
19957: LD_VAR 0 3
19961: PPUSH
19962: LD_INT 19
19964: PPUSH
19965: LD_INT 0
19967: PPUSH
19968: CALL_OW 49
// end ;
19972: GO 19836
19974: POP
19975: POP
// for i := 1 to rand ( 5 , 6 ) + Difficulty do
19976: LD_ADDR_VAR 0 2
19980: PUSH
19981: DOUBLE
19982: LD_INT 1
19984: DEC
19985: ST_TO_ADDR
19986: LD_INT 5
19988: PPUSH
19989: LD_INT 6
19991: PPUSH
19992: CALL_OW 12
19996: PUSH
19997: LD_OWVAR 67
20001: PLUS
20002: PUSH
20003: FOR_TO
20004: IFFALSE 20088
// begin hc_class := class_apeman ;
20006: LD_ADDR_OWVAR 28
20010: PUSH
20011: LD_INT 12
20013: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20014: LD_ADDR_OWVAR 31
20018: PUSH
20019: LD_INT 2
20021: PPUSH
20022: LD_INT 5
20024: PPUSH
20025: CALL_OW 12
20029: PUSH
20030: LD_INT 0
20032: PPUSH
20033: LD_INT 2
20035: PPUSH
20036: CALL_OW 12
20040: PUSH
20041: LD_INT 0
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: ST_TO_ADDR
// hc_agressivity := 0 ;
20053: LD_ADDR_OWVAR 35
20057: PUSH
20058: LD_INT 0
20060: ST_TO_ADDR
// un = CreateHuman ;
20061: LD_ADDR_VAR 0 3
20065: PUSH
20066: CALL_OW 44
20070: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
20071: LD_VAR 0 3
20075: PPUSH
20076: LD_INT 20
20078: PPUSH
20079: LD_INT 0
20081: PPUSH
20082: CALL_OW 49
// end ;
20086: GO 20003
20088: POP
20089: POP
// end ; end_of_file
20090: LD_VAR 0 1
20094: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
20095: LD_INT 0
20097: PPUSH
// ar_miner := 81 ;
20098: LD_ADDR_EXP 56
20102: PUSH
20103: LD_INT 81
20105: ST_TO_ADDR
// ar_crane := 88 ;
20106: LD_ADDR_EXP 55
20110: PUSH
20111: LD_INT 88
20113: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20114: LD_ADDR_EXP 50
20118: PUSH
20119: LD_INT 89
20121: ST_TO_ADDR
// us_hack := 99 ;
20122: LD_ADDR_EXP 51
20126: PUSH
20127: LD_INT 99
20129: ST_TO_ADDR
// us_artillery := 97 ;
20130: LD_ADDR_EXP 52
20134: PUSH
20135: LD_INT 97
20137: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20138: LD_ADDR_EXP 53
20142: PUSH
20143: LD_INT 91
20145: ST_TO_ADDR
// ar_mortar := 92 ;
20146: LD_ADDR_EXP 54
20150: PUSH
20151: LD_INT 92
20153: ST_TO_ADDR
// ru_radar := 98 ;
20154: LD_ADDR_EXP 49
20158: PUSH
20159: LD_INT 98
20161: ST_TO_ADDR
// tech_Artillery := 80 ;
20162: LD_ADDR_EXP 57
20166: PUSH
20167: LD_INT 80
20169: ST_TO_ADDR
// tech_RadMat := 81 ;
20170: LD_ADDR_EXP 58
20174: PUSH
20175: LD_INT 81
20177: ST_TO_ADDR
// tech_BasicTools := 82 ;
20178: LD_ADDR_EXP 59
20182: PUSH
20183: LD_INT 82
20185: ST_TO_ADDR
// tech_Cargo := 83 ;
20186: LD_ADDR_EXP 60
20190: PUSH
20191: LD_INT 83
20193: ST_TO_ADDR
// tech_Track := 84 ;
20194: LD_ADDR_EXP 61
20198: PUSH
20199: LD_INT 84
20201: ST_TO_ADDR
// tech_Crane := 85 ;
20202: LD_ADDR_EXP 62
20206: PUSH
20207: LD_INT 85
20209: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20210: LD_ADDR_EXP 63
20214: PUSH
20215: LD_INT 86
20217: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20218: LD_ADDR_EXP 64
20222: PUSH
20223: LD_INT 87
20225: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
20226: LD_ADDR_EXP 65
20230: PUSH
20231: LD_INT 88
20233: ST_TO_ADDR
// class_mastodont := 31 ;
20234: LD_ADDR_EXP 66
20238: PUSH
20239: LD_INT 31
20241: ST_TO_ADDR
// class_horse := 21 ;
20242: LD_ADDR_EXP 67
20246: PUSH
20247: LD_INT 21
20249: ST_TO_ADDR
// end ;
20250: LD_VAR 0 1
20254: RET
// every 1 do
20255: GO 20257
20257: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
20258: CALL 20095 0 0
20262: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20263: LD_INT 0
20265: PPUSH
// if p2 = 100 then
20266: LD_VAR 0 2
20270: PUSH
20271: LD_INT 100
20273: EQUAL
20274: IFFALSE 21223
// begin if not StreamModeActive then
20276: LD_EXP 68
20280: NOT
20281: IFFALSE 20291
// StreamModeActive := true ;
20283: LD_ADDR_EXP 68
20287: PUSH
20288: LD_INT 1
20290: ST_TO_ADDR
// if p3 = 0 then
20291: LD_VAR 0 3
20295: PUSH
20296: LD_INT 0
20298: EQUAL
20299: IFFALSE 20305
// InitStreamMode ;
20301: CALL 21383 0 0
// if p3 = 1 then
20305: LD_VAR 0 3
20309: PUSH
20310: LD_INT 1
20312: EQUAL
20313: IFFALSE 20323
// sRocket := true ;
20315: LD_ADDR_EXP 73
20319: PUSH
20320: LD_INT 1
20322: ST_TO_ADDR
// if p3 = 2 then
20323: LD_VAR 0 3
20327: PUSH
20328: LD_INT 2
20330: EQUAL
20331: IFFALSE 20341
// sSpeed := true ;
20333: LD_ADDR_EXP 72
20337: PUSH
20338: LD_INT 1
20340: ST_TO_ADDR
// if p3 = 3 then
20341: LD_VAR 0 3
20345: PUSH
20346: LD_INT 3
20348: EQUAL
20349: IFFALSE 20359
// sEngine := true ;
20351: LD_ADDR_EXP 74
20355: PUSH
20356: LD_INT 1
20358: ST_TO_ADDR
// if p3 = 4 then
20359: LD_VAR 0 3
20363: PUSH
20364: LD_INT 4
20366: EQUAL
20367: IFFALSE 20377
// sSpec := true ;
20369: LD_ADDR_EXP 71
20373: PUSH
20374: LD_INT 1
20376: ST_TO_ADDR
// if p3 = 5 then
20377: LD_VAR 0 3
20381: PUSH
20382: LD_INT 5
20384: EQUAL
20385: IFFALSE 20395
// sLevel := true ;
20387: LD_ADDR_EXP 75
20391: PUSH
20392: LD_INT 1
20394: ST_TO_ADDR
// if p3 = 6 then
20395: LD_VAR 0 3
20399: PUSH
20400: LD_INT 6
20402: EQUAL
20403: IFFALSE 20413
// sArmoury := true ;
20405: LD_ADDR_EXP 76
20409: PUSH
20410: LD_INT 1
20412: ST_TO_ADDR
// if p3 = 7 then
20413: LD_VAR 0 3
20417: PUSH
20418: LD_INT 7
20420: EQUAL
20421: IFFALSE 20431
// sRadar := true ;
20423: LD_ADDR_EXP 77
20427: PUSH
20428: LD_INT 1
20430: ST_TO_ADDR
// if p3 = 8 then
20431: LD_VAR 0 3
20435: PUSH
20436: LD_INT 8
20438: EQUAL
20439: IFFALSE 20449
// sBunker := true ;
20441: LD_ADDR_EXP 78
20445: PUSH
20446: LD_INT 1
20448: ST_TO_ADDR
// if p3 = 9 then
20449: LD_VAR 0 3
20453: PUSH
20454: LD_INT 9
20456: EQUAL
20457: IFFALSE 20467
// sHack := true ;
20459: LD_ADDR_EXP 79
20463: PUSH
20464: LD_INT 1
20466: ST_TO_ADDR
// if p3 = 10 then
20467: LD_VAR 0 3
20471: PUSH
20472: LD_INT 10
20474: EQUAL
20475: IFFALSE 20485
// sFire := true ;
20477: LD_ADDR_EXP 80
20481: PUSH
20482: LD_INT 1
20484: ST_TO_ADDR
// if p3 = 11 then
20485: LD_VAR 0 3
20489: PUSH
20490: LD_INT 11
20492: EQUAL
20493: IFFALSE 20503
// sRefresh := true ;
20495: LD_ADDR_EXP 81
20499: PUSH
20500: LD_INT 1
20502: ST_TO_ADDR
// if p3 = 12 then
20503: LD_VAR 0 3
20507: PUSH
20508: LD_INT 12
20510: EQUAL
20511: IFFALSE 20521
// sExp := true ;
20513: LD_ADDR_EXP 82
20517: PUSH
20518: LD_INT 1
20520: ST_TO_ADDR
// if p3 = 13 then
20521: LD_VAR 0 3
20525: PUSH
20526: LD_INT 13
20528: EQUAL
20529: IFFALSE 20539
// sDepot := true ;
20531: LD_ADDR_EXP 83
20535: PUSH
20536: LD_INT 1
20538: ST_TO_ADDR
// if p3 = 14 then
20539: LD_VAR 0 3
20543: PUSH
20544: LD_INT 14
20546: EQUAL
20547: IFFALSE 20557
// sFlag := true ;
20549: LD_ADDR_EXP 84
20553: PUSH
20554: LD_INT 1
20556: ST_TO_ADDR
// if p3 = 15 then
20557: LD_VAR 0 3
20561: PUSH
20562: LD_INT 15
20564: EQUAL
20565: IFFALSE 20575
// sKamikadze := true ;
20567: LD_ADDR_EXP 92
20571: PUSH
20572: LD_INT 1
20574: ST_TO_ADDR
// if p3 = 16 then
20575: LD_VAR 0 3
20579: PUSH
20580: LD_INT 16
20582: EQUAL
20583: IFFALSE 20593
// sTroll := true ;
20585: LD_ADDR_EXP 93
20589: PUSH
20590: LD_INT 1
20592: ST_TO_ADDR
// if p3 = 17 then
20593: LD_VAR 0 3
20597: PUSH
20598: LD_INT 17
20600: EQUAL
20601: IFFALSE 20611
// sSlow := true ;
20603: LD_ADDR_EXP 94
20607: PUSH
20608: LD_INT 1
20610: ST_TO_ADDR
// if p3 = 18 then
20611: LD_VAR 0 3
20615: PUSH
20616: LD_INT 18
20618: EQUAL
20619: IFFALSE 20629
// sLack := true ;
20621: LD_ADDR_EXP 95
20625: PUSH
20626: LD_INT 1
20628: ST_TO_ADDR
// if p3 = 19 then
20629: LD_VAR 0 3
20633: PUSH
20634: LD_INT 19
20636: EQUAL
20637: IFFALSE 20647
// sTank := true ;
20639: LD_ADDR_EXP 97
20643: PUSH
20644: LD_INT 1
20646: ST_TO_ADDR
// if p3 = 20 then
20647: LD_VAR 0 3
20651: PUSH
20652: LD_INT 20
20654: EQUAL
20655: IFFALSE 20665
// sRemote := true ;
20657: LD_ADDR_EXP 98
20661: PUSH
20662: LD_INT 1
20664: ST_TO_ADDR
// if p3 = 21 then
20665: LD_VAR 0 3
20669: PUSH
20670: LD_INT 21
20672: EQUAL
20673: IFFALSE 20683
// sPowell := true ;
20675: LD_ADDR_EXP 99
20679: PUSH
20680: LD_INT 1
20682: ST_TO_ADDR
// if p3 = 22 then
20683: LD_VAR 0 3
20687: PUSH
20688: LD_INT 22
20690: EQUAL
20691: IFFALSE 20701
// sTeleport := true ;
20693: LD_ADDR_EXP 102
20697: PUSH
20698: LD_INT 1
20700: ST_TO_ADDR
// if p3 = 23 then
20701: LD_VAR 0 3
20705: PUSH
20706: LD_INT 23
20708: EQUAL
20709: IFFALSE 20719
// sOilTower := true ;
20711: LD_ADDR_EXP 104
20715: PUSH
20716: LD_INT 1
20718: ST_TO_ADDR
// if p3 = 24 then
20719: LD_VAR 0 3
20723: PUSH
20724: LD_INT 24
20726: EQUAL
20727: IFFALSE 20737
// sShovel := true ;
20729: LD_ADDR_EXP 105
20733: PUSH
20734: LD_INT 1
20736: ST_TO_ADDR
// if p3 = 25 then
20737: LD_VAR 0 3
20741: PUSH
20742: LD_INT 25
20744: EQUAL
20745: IFFALSE 20755
// sSheik := true ;
20747: LD_ADDR_EXP 106
20751: PUSH
20752: LD_INT 1
20754: ST_TO_ADDR
// if p3 = 26 then
20755: LD_VAR 0 3
20759: PUSH
20760: LD_INT 26
20762: EQUAL
20763: IFFALSE 20773
// sEarthquake := true ;
20765: LD_ADDR_EXP 108
20769: PUSH
20770: LD_INT 1
20772: ST_TO_ADDR
// if p3 = 27 then
20773: LD_VAR 0 3
20777: PUSH
20778: LD_INT 27
20780: EQUAL
20781: IFFALSE 20791
// sAI := true ;
20783: LD_ADDR_EXP 109
20787: PUSH
20788: LD_INT 1
20790: ST_TO_ADDR
// if p3 = 28 then
20791: LD_VAR 0 3
20795: PUSH
20796: LD_INT 28
20798: EQUAL
20799: IFFALSE 20809
// sCargo := true ;
20801: LD_ADDR_EXP 112
20805: PUSH
20806: LD_INT 1
20808: ST_TO_ADDR
// if p3 = 29 then
20809: LD_VAR 0 3
20813: PUSH
20814: LD_INT 29
20816: EQUAL
20817: IFFALSE 20827
// sDLaser := true ;
20819: LD_ADDR_EXP 113
20823: PUSH
20824: LD_INT 1
20826: ST_TO_ADDR
// if p3 = 30 then
20827: LD_VAR 0 3
20831: PUSH
20832: LD_INT 30
20834: EQUAL
20835: IFFALSE 20845
// sExchange := true ;
20837: LD_ADDR_EXP 114
20841: PUSH
20842: LD_INT 1
20844: ST_TO_ADDR
// if p3 = 31 then
20845: LD_VAR 0 3
20849: PUSH
20850: LD_INT 31
20852: EQUAL
20853: IFFALSE 20863
// sFac := true ;
20855: LD_ADDR_EXP 115
20859: PUSH
20860: LD_INT 1
20862: ST_TO_ADDR
// if p3 = 32 then
20863: LD_VAR 0 3
20867: PUSH
20868: LD_INT 32
20870: EQUAL
20871: IFFALSE 20881
// sPower := true ;
20873: LD_ADDR_EXP 116
20877: PUSH
20878: LD_INT 1
20880: ST_TO_ADDR
// if p3 = 33 then
20881: LD_VAR 0 3
20885: PUSH
20886: LD_INT 33
20888: EQUAL
20889: IFFALSE 20899
// sRandom := true ;
20891: LD_ADDR_EXP 117
20895: PUSH
20896: LD_INT 1
20898: ST_TO_ADDR
// if p3 = 34 then
20899: LD_VAR 0 3
20903: PUSH
20904: LD_INT 34
20906: EQUAL
20907: IFFALSE 20917
// sShield := true ;
20909: LD_ADDR_EXP 118
20913: PUSH
20914: LD_INT 1
20916: ST_TO_ADDR
// if p3 = 35 then
20917: LD_VAR 0 3
20921: PUSH
20922: LD_INT 35
20924: EQUAL
20925: IFFALSE 20935
// sTime := true ;
20927: LD_ADDR_EXP 119
20931: PUSH
20932: LD_INT 1
20934: ST_TO_ADDR
// if p3 = 36 then
20935: LD_VAR 0 3
20939: PUSH
20940: LD_INT 36
20942: EQUAL
20943: IFFALSE 20953
// sTools := true ;
20945: LD_ADDR_EXP 120
20949: PUSH
20950: LD_INT 1
20952: ST_TO_ADDR
// if p3 = 101 then
20953: LD_VAR 0 3
20957: PUSH
20958: LD_INT 101
20960: EQUAL
20961: IFFALSE 20971
// sSold := true ;
20963: LD_ADDR_EXP 85
20967: PUSH
20968: LD_INT 1
20970: ST_TO_ADDR
// if p3 = 102 then
20971: LD_VAR 0 3
20975: PUSH
20976: LD_INT 102
20978: EQUAL
20979: IFFALSE 20989
// sDiff := true ;
20981: LD_ADDR_EXP 86
20985: PUSH
20986: LD_INT 1
20988: ST_TO_ADDR
// if p3 = 103 then
20989: LD_VAR 0 3
20993: PUSH
20994: LD_INT 103
20996: EQUAL
20997: IFFALSE 21007
// sFog := true ;
20999: LD_ADDR_EXP 89
21003: PUSH
21004: LD_INT 1
21006: ST_TO_ADDR
// if p3 = 104 then
21007: LD_VAR 0 3
21011: PUSH
21012: LD_INT 104
21014: EQUAL
21015: IFFALSE 21025
// sReset := true ;
21017: LD_ADDR_EXP 90
21021: PUSH
21022: LD_INT 1
21024: ST_TO_ADDR
// if p3 = 105 then
21025: LD_VAR 0 3
21029: PUSH
21030: LD_INT 105
21032: EQUAL
21033: IFFALSE 21043
// sSun := true ;
21035: LD_ADDR_EXP 91
21039: PUSH
21040: LD_INT 1
21042: ST_TO_ADDR
// if p3 = 106 then
21043: LD_VAR 0 3
21047: PUSH
21048: LD_INT 106
21050: EQUAL
21051: IFFALSE 21061
// sTiger := true ;
21053: LD_ADDR_EXP 87
21057: PUSH
21058: LD_INT 1
21060: ST_TO_ADDR
// if p3 = 107 then
21061: LD_VAR 0 3
21065: PUSH
21066: LD_INT 107
21068: EQUAL
21069: IFFALSE 21079
// sBomb := true ;
21071: LD_ADDR_EXP 88
21075: PUSH
21076: LD_INT 1
21078: ST_TO_ADDR
// if p3 = 108 then
21079: LD_VAR 0 3
21083: PUSH
21084: LD_INT 108
21086: EQUAL
21087: IFFALSE 21097
// sWound := true ;
21089: LD_ADDR_EXP 96
21093: PUSH
21094: LD_INT 1
21096: ST_TO_ADDR
// if p3 = 109 then
21097: LD_VAR 0 3
21101: PUSH
21102: LD_INT 109
21104: EQUAL
21105: IFFALSE 21115
// sBetray := true ;
21107: LD_ADDR_EXP 100
21111: PUSH
21112: LD_INT 1
21114: ST_TO_ADDR
// if p3 = 110 then
21115: LD_VAR 0 3
21119: PUSH
21120: LD_INT 110
21122: EQUAL
21123: IFFALSE 21133
// sContamin := true ;
21125: LD_ADDR_EXP 101
21129: PUSH
21130: LD_INT 1
21132: ST_TO_ADDR
// if p3 = 111 then
21133: LD_VAR 0 3
21137: PUSH
21138: LD_INT 111
21140: EQUAL
21141: IFFALSE 21151
// sOil := true ;
21143: LD_ADDR_EXP 103
21147: PUSH
21148: LD_INT 1
21150: ST_TO_ADDR
// if p3 = 112 then
21151: LD_VAR 0 3
21155: PUSH
21156: LD_INT 112
21158: EQUAL
21159: IFFALSE 21169
// sStu := true ;
21161: LD_ADDR_EXP 107
21165: PUSH
21166: LD_INT 1
21168: ST_TO_ADDR
// if p3 = 113 then
21169: LD_VAR 0 3
21173: PUSH
21174: LD_INT 113
21176: EQUAL
21177: IFFALSE 21187
// sBazooka := true ;
21179: LD_ADDR_EXP 110
21183: PUSH
21184: LD_INT 1
21186: ST_TO_ADDR
// if p3 = 114 then
21187: LD_VAR 0 3
21191: PUSH
21192: LD_INT 114
21194: EQUAL
21195: IFFALSE 21205
// sMortar := true ;
21197: LD_ADDR_EXP 111
21201: PUSH
21202: LD_INT 1
21204: ST_TO_ADDR
// if p3 = 115 then
21205: LD_VAR 0 3
21209: PUSH
21210: LD_INT 115
21212: EQUAL
21213: IFFALSE 21223
// sRanger := true ;
21215: LD_ADDR_EXP 121
21219: PUSH
21220: LD_INT 1
21222: ST_TO_ADDR
// end ; if p2 = 101 then
21223: LD_VAR 0 2
21227: PUSH
21228: LD_INT 101
21230: EQUAL
21231: IFFALSE 21359
// begin case p3 of 1 :
21233: LD_VAR 0 3
21237: PUSH
21238: LD_INT 1
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21253
21246: POP
// hHackUnlimitedResources ; 2 :
21247: CALL 32396 0 0
21251: GO 21359
21253: LD_INT 2
21255: DOUBLE
21256: EQUAL
21257: IFTRUE 21261
21259: GO 21268
21261: POP
// hHackSetLevel10 ; 3 :
21262: CALL 32529 0 0
21266: GO 21359
21268: LD_INT 3
21270: DOUBLE
21271: EQUAL
21272: IFTRUE 21276
21274: GO 21283
21276: POP
// hHackSetLevel10YourUnits ; 4 :
21277: CALL 32614 0 0
21281: GO 21359
21283: LD_INT 4
21285: DOUBLE
21286: EQUAL
21287: IFTRUE 21291
21289: GO 21298
21291: POP
// hHackInvincible ; 5 :
21292: CALL 33062 0 0
21296: GO 21359
21298: LD_INT 5
21300: DOUBLE
21301: EQUAL
21302: IFTRUE 21306
21304: GO 21313
21306: POP
// hHackInvisible ; 6 :
21307: CALL 33173 0 0
21311: GO 21359
21313: LD_INT 6
21315: DOUBLE
21316: EQUAL
21317: IFTRUE 21321
21319: GO 21328
21321: POP
// hHackChangeYourSide ; 7 :
21322: CALL 33230 0 0
21326: GO 21359
21328: LD_INT 7
21330: DOUBLE
21331: EQUAL
21332: IFTRUE 21336
21334: GO 21343
21336: POP
// hHackChangeUnitSide ; 8 :
21337: CALL 33272 0 0
21341: GO 21359
21343: LD_INT 8
21345: DOUBLE
21346: EQUAL
21347: IFTRUE 21351
21349: GO 21358
21351: POP
// hHackFog ; end ;
21352: CALL 33373 0 0
21356: GO 21359
21358: POP
// end ; end ;
21359: LD_VAR 0 7
21363: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
21364: GO 21366
21366: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21367: LD_STRING initStreamRollete();
21369: PPUSH
21370: CALL_OW 559
// InitStreamMode ;
21374: CALL 21383 0 0
// DefineStreamItems ( ) ;
21378: CALL 21823 0 0
// end ;
21382: END
// function InitStreamMode ; begin
21383: LD_INT 0
21385: PPUSH
// streamModeActive := false ;
21386: LD_ADDR_EXP 68
21390: PUSH
21391: LD_INT 0
21393: ST_TO_ADDR
// normalCounter := 36 ;
21394: LD_ADDR_EXP 69
21398: PUSH
21399: LD_INT 36
21401: ST_TO_ADDR
// hardcoreCounter := 16 ;
21402: LD_ADDR_EXP 70
21406: PUSH
21407: LD_INT 16
21409: ST_TO_ADDR
// sRocket := false ;
21410: LD_ADDR_EXP 73
21414: PUSH
21415: LD_INT 0
21417: ST_TO_ADDR
// sSpeed := false ;
21418: LD_ADDR_EXP 72
21422: PUSH
21423: LD_INT 0
21425: ST_TO_ADDR
// sEngine := false ;
21426: LD_ADDR_EXP 74
21430: PUSH
21431: LD_INT 0
21433: ST_TO_ADDR
// sSpec := false ;
21434: LD_ADDR_EXP 71
21438: PUSH
21439: LD_INT 0
21441: ST_TO_ADDR
// sLevel := false ;
21442: LD_ADDR_EXP 75
21446: PUSH
21447: LD_INT 0
21449: ST_TO_ADDR
// sArmoury := false ;
21450: LD_ADDR_EXP 76
21454: PUSH
21455: LD_INT 0
21457: ST_TO_ADDR
// sRadar := false ;
21458: LD_ADDR_EXP 77
21462: PUSH
21463: LD_INT 0
21465: ST_TO_ADDR
// sBunker := false ;
21466: LD_ADDR_EXP 78
21470: PUSH
21471: LD_INT 0
21473: ST_TO_ADDR
// sHack := false ;
21474: LD_ADDR_EXP 79
21478: PUSH
21479: LD_INT 0
21481: ST_TO_ADDR
// sFire := false ;
21482: LD_ADDR_EXP 80
21486: PUSH
21487: LD_INT 0
21489: ST_TO_ADDR
// sRefresh := false ;
21490: LD_ADDR_EXP 81
21494: PUSH
21495: LD_INT 0
21497: ST_TO_ADDR
// sExp := false ;
21498: LD_ADDR_EXP 82
21502: PUSH
21503: LD_INT 0
21505: ST_TO_ADDR
// sDepot := false ;
21506: LD_ADDR_EXP 83
21510: PUSH
21511: LD_INT 0
21513: ST_TO_ADDR
// sFlag := false ;
21514: LD_ADDR_EXP 84
21518: PUSH
21519: LD_INT 0
21521: ST_TO_ADDR
// sKamikadze := false ;
21522: LD_ADDR_EXP 92
21526: PUSH
21527: LD_INT 0
21529: ST_TO_ADDR
// sTroll := false ;
21530: LD_ADDR_EXP 93
21534: PUSH
21535: LD_INT 0
21537: ST_TO_ADDR
// sSlow := false ;
21538: LD_ADDR_EXP 94
21542: PUSH
21543: LD_INT 0
21545: ST_TO_ADDR
// sLack := false ;
21546: LD_ADDR_EXP 95
21550: PUSH
21551: LD_INT 0
21553: ST_TO_ADDR
// sTank := false ;
21554: LD_ADDR_EXP 97
21558: PUSH
21559: LD_INT 0
21561: ST_TO_ADDR
// sRemote := false ;
21562: LD_ADDR_EXP 98
21566: PUSH
21567: LD_INT 0
21569: ST_TO_ADDR
// sPowell := false ;
21570: LD_ADDR_EXP 99
21574: PUSH
21575: LD_INT 0
21577: ST_TO_ADDR
// sTeleport := false ;
21578: LD_ADDR_EXP 102
21582: PUSH
21583: LD_INT 0
21585: ST_TO_ADDR
// sOilTower := false ;
21586: LD_ADDR_EXP 104
21590: PUSH
21591: LD_INT 0
21593: ST_TO_ADDR
// sShovel := false ;
21594: LD_ADDR_EXP 105
21598: PUSH
21599: LD_INT 0
21601: ST_TO_ADDR
// sSheik := false ;
21602: LD_ADDR_EXP 106
21606: PUSH
21607: LD_INT 0
21609: ST_TO_ADDR
// sEarthquake := false ;
21610: LD_ADDR_EXP 108
21614: PUSH
21615: LD_INT 0
21617: ST_TO_ADDR
// sAI := false ;
21618: LD_ADDR_EXP 109
21622: PUSH
21623: LD_INT 0
21625: ST_TO_ADDR
// sCargo := false ;
21626: LD_ADDR_EXP 112
21630: PUSH
21631: LD_INT 0
21633: ST_TO_ADDR
// sDLaser := false ;
21634: LD_ADDR_EXP 113
21638: PUSH
21639: LD_INT 0
21641: ST_TO_ADDR
// sExchange := false ;
21642: LD_ADDR_EXP 114
21646: PUSH
21647: LD_INT 0
21649: ST_TO_ADDR
// sFac := false ;
21650: LD_ADDR_EXP 115
21654: PUSH
21655: LD_INT 0
21657: ST_TO_ADDR
// sPower := false ;
21658: LD_ADDR_EXP 116
21662: PUSH
21663: LD_INT 0
21665: ST_TO_ADDR
// sRandom := false ;
21666: LD_ADDR_EXP 117
21670: PUSH
21671: LD_INT 0
21673: ST_TO_ADDR
// sShield := false ;
21674: LD_ADDR_EXP 118
21678: PUSH
21679: LD_INT 0
21681: ST_TO_ADDR
// sTime := false ;
21682: LD_ADDR_EXP 119
21686: PUSH
21687: LD_INT 0
21689: ST_TO_ADDR
// sTools := false ;
21690: LD_ADDR_EXP 120
21694: PUSH
21695: LD_INT 0
21697: ST_TO_ADDR
// sSold := false ;
21698: LD_ADDR_EXP 85
21702: PUSH
21703: LD_INT 0
21705: ST_TO_ADDR
// sDiff := false ;
21706: LD_ADDR_EXP 86
21710: PUSH
21711: LD_INT 0
21713: ST_TO_ADDR
// sFog := false ;
21714: LD_ADDR_EXP 89
21718: PUSH
21719: LD_INT 0
21721: ST_TO_ADDR
// sReset := false ;
21722: LD_ADDR_EXP 90
21726: PUSH
21727: LD_INT 0
21729: ST_TO_ADDR
// sSun := false ;
21730: LD_ADDR_EXP 91
21734: PUSH
21735: LD_INT 0
21737: ST_TO_ADDR
// sTiger := false ;
21738: LD_ADDR_EXP 87
21742: PUSH
21743: LD_INT 0
21745: ST_TO_ADDR
// sBomb := false ;
21746: LD_ADDR_EXP 88
21750: PUSH
21751: LD_INT 0
21753: ST_TO_ADDR
// sWound := false ;
21754: LD_ADDR_EXP 96
21758: PUSH
21759: LD_INT 0
21761: ST_TO_ADDR
// sBetray := false ;
21762: LD_ADDR_EXP 100
21766: PUSH
21767: LD_INT 0
21769: ST_TO_ADDR
// sContamin := false ;
21770: LD_ADDR_EXP 101
21774: PUSH
21775: LD_INT 0
21777: ST_TO_ADDR
// sOil := false ;
21778: LD_ADDR_EXP 103
21782: PUSH
21783: LD_INT 0
21785: ST_TO_ADDR
// sStu := false ;
21786: LD_ADDR_EXP 107
21790: PUSH
21791: LD_INT 0
21793: ST_TO_ADDR
// sBazooka := false ;
21794: LD_ADDR_EXP 110
21798: PUSH
21799: LD_INT 0
21801: ST_TO_ADDR
// sMortar := false ;
21802: LD_ADDR_EXP 111
21806: PUSH
21807: LD_INT 0
21809: ST_TO_ADDR
// sRanger := false ;
21810: LD_ADDR_EXP 121
21814: PUSH
21815: LD_INT 0
21817: ST_TO_ADDR
// end ;
21818: LD_VAR 0 1
21822: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21823: LD_INT 0
21825: PPUSH
21826: PPUSH
21827: PPUSH
21828: PPUSH
21829: PPUSH
// result := [ ] ;
21830: LD_ADDR_VAR 0 1
21834: PUSH
21835: EMPTY
21836: ST_TO_ADDR
// if campaign_id = 1 then
21837: LD_OWVAR 69
21841: PUSH
21842: LD_INT 1
21844: EQUAL
21845: IFFALSE 24783
// begin case mission_number of 1 :
21847: LD_OWVAR 70
21851: PUSH
21852: LD_INT 1
21854: DOUBLE
21855: EQUAL
21856: IFTRUE 21860
21858: GO 21924
21860: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
21861: LD_ADDR_VAR 0 1
21865: PUSH
21866: LD_INT 2
21868: PUSH
21869: LD_INT 4
21871: PUSH
21872: LD_INT 11
21874: PUSH
21875: LD_INT 12
21877: PUSH
21878: LD_INT 15
21880: PUSH
21881: LD_INT 16
21883: PUSH
21884: LD_INT 22
21886: PUSH
21887: LD_INT 23
21889: PUSH
21890: LD_INT 26
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 101
21906: PUSH
21907: LD_INT 102
21909: PUSH
21910: LD_INT 106
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: LIST
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: ST_TO_ADDR
21922: GO 24781
21924: LD_INT 2
21926: DOUBLE
21927: EQUAL
21928: IFTRUE 21932
21930: GO 22004
21932: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
21933: LD_ADDR_VAR 0 1
21937: PUSH
21938: LD_INT 2
21940: PUSH
21941: LD_INT 4
21943: PUSH
21944: LD_INT 11
21946: PUSH
21947: LD_INT 12
21949: PUSH
21950: LD_INT 15
21952: PUSH
21953: LD_INT 16
21955: PUSH
21956: LD_INT 22
21958: PUSH
21959: LD_INT 23
21961: PUSH
21962: LD_INT 26
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 101
21978: PUSH
21979: LD_INT 102
21981: PUSH
21982: LD_INT 105
21984: PUSH
21985: LD_INT 106
21987: PUSH
21988: LD_INT 108
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: ST_TO_ADDR
22002: GO 24781
22004: LD_INT 3
22006: DOUBLE
22007: EQUAL
22008: IFTRUE 22012
22010: GO 22088
22012: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
22013: LD_ADDR_VAR 0 1
22017: PUSH
22018: LD_INT 2
22020: PUSH
22021: LD_INT 4
22023: PUSH
22024: LD_INT 5
22026: PUSH
22027: LD_INT 11
22029: PUSH
22030: LD_INT 12
22032: PUSH
22033: LD_INT 15
22035: PUSH
22036: LD_INT 16
22038: PUSH
22039: LD_INT 22
22041: PUSH
22042: LD_INT 26
22044: PUSH
22045: LD_INT 36
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 101
22062: PUSH
22063: LD_INT 102
22065: PUSH
22066: LD_INT 105
22068: PUSH
22069: LD_INT 106
22071: PUSH
22072: LD_INT 108
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: ST_TO_ADDR
22086: GO 24781
22088: LD_INT 4
22090: DOUBLE
22091: EQUAL
22092: IFTRUE 22096
22094: GO 22180
22096: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
22097: LD_ADDR_VAR 0 1
22101: PUSH
22102: LD_INT 2
22104: PUSH
22105: LD_INT 4
22107: PUSH
22108: LD_INT 5
22110: PUSH
22111: LD_INT 8
22113: PUSH
22114: LD_INT 11
22116: PUSH
22117: LD_INT 12
22119: PUSH
22120: LD_INT 15
22122: PUSH
22123: LD_INT 16
22125: PUSH
22126: LD_INT 22
22128: PUSH
22129: LD_INT 23
22131: PUSH
22132: LD_INT 26
22134: PUSH
22135: LD_INT 36
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 101
22154: PUSH
22155: LD_INT 102
22157: PUSH
22158: LD_INT 105
22160: PUSH
22161: LD_INT 106
22163: PUSH
22164: LD_INT 108
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: ST_TO_ADDR
22178: GO 24781
22180: LD_INT 5
22182: DOUBLE
22183: EQUAL
22184: IFTRUE 22188
22186: GO 22288
22188: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
22189: LD_ADDR_VAR 0 1
22193: PUSH
22194: LD_INT 2
22196: PUSH
22197: LD_INT 4
22199: PUSH
22200: LD_INT 5
22202: PUSH
22203: LD_INT 6
22205: PUSH
22206: LD_INT 8
22208: PUSH
22209: LD_INT 11
22211: PUSH
22212: LD_INT 12
22214: PUSH
22215: LD_INT 15
22217: PUSH
22218: LD_INT 16
22220: PUSH
22221: LD_INT 22
22223: PUSH
22224: LD_INT 23
22226: PUSH
22227: LD_INT 25
22229: PUSH
22230: LD_INT 26
22232: PUSH
22233: LD_INT 36
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 101
22254: PUSH
22255: LD_INT 102
22257: PUSH
22258: LD_INT 105
22260: PUSH
22261: LD_INT 106
22263: PUSH
22264: LD_INT 108
22266: PUSH
22267: LD_INT 109
22269: PUSH
22270: LD_INT 112
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: ST_TO_ADDR
22286: GO 24781
22288: LD_INT 6
22290: DOUBLE
22291: EQUAL
22292: IFTRUE 22296
22294: GO 22416
22296: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
22297: LD_ADDR_VAR 0 1
22301: PUSH
22302: LD_INT 2
22304: PUSH
22305: LD_INT 4
22307: PUSH
22308: LD_INT 5
22310: PUSH
22311: LD_INT 6
22313: PUSH
22314: LD_INT 8
22316: PUSH
22317: LD_INT 11
22319: PUSH
22320: LD_INT 12
22322: PUSH
22323: LD_INT 15
22325: PUSH
22326: LD_INT 16
22328: PUSH
22329: LD_INT 20
22331: PUSH
22332: LD_INT 21
22334: PUSH
22335: LD_INT 22
22337: PUSH
22338: LD_INT 23
22340: PUSH
22341: LD_INT 25
22343: PUSH
22344: LD_INT 26
22346: PUSH
22347: LD_INT 30
22349: PUSH
22350: LD_INT 31
22352: PUSH
22353: LD_INT 32
22355: PUSH
22356: LD_INT 36
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 101
22382: PUSH
22383: LD_INT 102
22385: PUSH
22386: LD_INT 105
22388: PUSH
22389: LD_INT 106
22391: PUSH
22392: LD_INT 108
22394: PUSH
22395: LD_INT 109
22397: PUSH
22398: LD_INT 112
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: ST_TO_ADDR
22414: GO 24781
22416: LD_INT 7
22418: DOUBLE
22419: EQUAL
22420: IFTRUE 22424
22422: GO 22524
22424: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
22425: LD_ADDR_VAR 0 1
22429: PUSH
22430: LD_INT 2
22432: PUSH
22433: LD_INT 4
22435: PUSH
22436: LD_INT 5
22438: PUSH
22439: LD_INT 7
22441: PUSH
22442: LD_INT 11
22444: PUSH
22445: LD_INT 12
22447: PUSH
22448: LD_INT 15
22450: PUSH
22451: LD_INT 16
22453: PUSH
22454: LD_INT 20
22456: PUSH
22457: LD_INT 21
22459: PUSH
22460: LD_INT 22
22462: PUSH
22463: LD_INT 23
22465: PUSH
22466: LD_INT 25
22468: PUSH
22469: LD_INT 26
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 101
22490: PUSH
22491: LD_INT 102
22493: PUSH
22494: LD_INT 103
22496: PUSH
22497: LD_INT 105
22499: PUSH
22500: LD_INT 106
22502: PUSH
22503: LD_INT 108
22505: PUSH
22506: LD_INT 112
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: ST_TO_ADDR
22522: GO 24781
22524: LD_INT 8
22526: DOUBLE
22527: EQUAL
22528: IFTRUE 22532
22530: GO 22660
22532: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
22533: LD_ADDR_VAR 0 1
22537: PUSH
22538: LD_INT 2
22540: PUSH
22541: LD_INT 4
22543: PUSH
22544: LD_INT 5
22546: PUSH
22547: LD_INT 6
22549: PUSH
22550: LD_INT 7
22552: PUSH
22553: LD_INT 8
22555: PUSH
22556: LD_INT 11
22558: PUSH
22559: LD_INT 12
22561: PUSH
22562: LD_INT 15
22564: PUSH
22565: LD_INT 16
22567: PUSH
22568: LD_INT 20
22570: PUSH
22571: LD_INT 21
22573: PUSH
22574: LD_INT 22
22576: PUSH
22577: LD_INT 23
22579: PUSH
22580: LD_INT 25
22582: PUSH
22583: LD_INT 26
22585: PUSH
22586: LD_INT 30
22588: PUSH
22589: LD_INT 31
22591: PUSH
22592: LD_INT 32
22594: PUSH
22595: LD_INT 36
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 101
22622: PUSH
22623: LD_INT 102
22625: PUSH
22626: LD_INT 103
22628: PUSH
22629: LD_INT 105
22631: PUSH
22632: LD_INT 106
22634: PUSH
22635: LD_INT 108
22637: PUSH
22638: LD_INT 109
22640: PUSH
22641: LD_INT 112
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: ST_TO_ADDR
22658: GO 24781
22660: LD_INT 9
22662: DOUBLE
22663: EQUAL
22664: IFTRUE 22668
22666: GO 22804
22668: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
22669: LD_ADDR_VAR 0 1
22673: PUSH
22674: LD_INT 2
22676: PUSH
22677: LD_INT 4
22679: PUSH
22680: LD_INT 5
22682: PUSH
22683: LD_INT 6
22685: PUSH
22686: LD_INT 7
22688: PUSH
22689: LD_INT 8
22691: PUSH
22692: LD_INT 11
22694: PUSH
22695: LD_INT 12
22697: PUSH
22698: LD_INT 15
22700: PUSH
22701: LD_INT 16
22703: PUSH
22704: LD_INT 20
22706: PUSH
22707: LD_INT 21
22709: PUSH
22710: LD_INT 22
22712: PUSH
22713: LD_INT 23
22715: PUSH
22716: LD_INT 25
22718: PUSH
22719: LD_INT 26
22721: PUSH
22722: LD_INT 28
22724: PUSH
22725: LD_INT 30
22727: PUSH
22728: LD_INT 31
22730: PUSH
22731: LD_INT 32
22733: PUSH
22734: LD_INT 36
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 101
22762: PUSH
22763: LD_INT 102
22765: PUSH
22766: LD_INT 103
22768: PUSH
22769: LD_INT 105
22771: PUSH
22772: LD_INT 106
22774: PUSH
22775: LD_INT 108
22777: PUSH
22778: LD_INT 109
22780: PUSH
22781: LD_INT 112
22783: PUSH
22784: LD_INT 114
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: ST_TO_ADDR
22802: GO 24781
22804: LD_INT 10
22806: DOUBLE
22807: EQUAL
22808: IFTRUE 22812
22810: GO 22996
22812: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
22813: LD_ADDR_VAR 0 1
22817: PUSH
22818: LD_INT 2
22820: PUSH
22821: LD_INT 4
22823: PUSH
22824: LD_INT 5
22826: PUSH
22827: LD_INT 6
22829: PUSH
22830: LD_INT 7
22832: PUSH
22833: LD_INT 8
22835: PUSH
22836: LD_INT 9
22838: PUSH
22839: LD_INT 10
22841: PUSH
22842: LD_INT 11
22844: PUSH
22845: LD_INT 12
22847: PUSH
22848: LD_INT 13
22850: PUSH
22851: LD_INT 14
22853: PUSH
22854: LD_INT 15
22856: PUSH
22857: LD_INT 16
22859: PUSH
22860: LD_INT 17
22862: PUSH
22863: LD_INT 18
22865: PUSH
22866: LD_INT 19
22868: PUSH
22869: LD_INT 20
22871: PUSH
22872: LD_INT 21
22874: PUSH
22875: LD_INT 22
22877: PUSH
22878: LD_INT 23
22880: PUSH
22881: LD_INT 24
22883: PUSH
22884: LD_INT 25
22886: PUSH
22887: LD_INT 26
22889: PUSH
22890: LD_INT 28
22892: PUSH
22893: LD_INT 30
22895: PUSH
22896: LD_INT 31
22898: PUSH
22899: LD_INT 32
22901: PUSH
22902: LD_INT 36
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 101
22938: PUSH
22939: LD_INT 102
22941: PUSH
22942: LD_INT 103
22944: PUSH
22945: LD_INT 104
22947: PUSH
22948: LD_INT 105
22950: PUSH
22951: LD_INT 106
22953: PUSH
22954: LD_INT 107
22956: PUSH
22957: LD_INT 108
22959: PUSH
22960: LD_INT 109
22962: PUSH
22963: LD_INT 110
22965: PUSH
22966: LD_INT 111
22968: PUSH
22969: LD_INT 112
22971: PUSH
22972: LD_INT 114
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: ST_TO_ADDR
22994: GO 24781
22996: LD_INT 11
22998: DOUBLE
22999: EQUAL
23000: IFTRUE 23004
23002: GO 23196
23004: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
23005: LD_ADDR_VAR 0 1
23009: PUSH
23010: LD_INT 2
23012: PUSH
23013: LD_INT 3
23015: PUSH
23016: LD_INT 4
23018: PUSH
23019: LD_INT 5
23021: PUSH
23022: LD_INT 6
23024: PUSH
23025: LD_INT 7
23027: PUSH
23028: LD_INT 8
23030: PUSH
23031: LD_INT 9
23033: PUSH
23034: LD_INT 10
23036: PUSH
23037: LD_INT 11
23039: PUSH
23040: LD_INT 12
23042: PUSH
23043: LD_INT 13
23045: PUSH
23046: LD_INT 14
23048: PUSH
23049: LD_INT 15
23051: PUSH
23052: LD_INT 16
23054: PUSH
23055: LD_INT 17
23057: PUSH
23058: LD_INT 18
23060: PUSH
23061: LD_INT 19
23063: PUSH
23064: LD_INT 20
23066: PUSH
23067: LD_INT 21
23069: PUSH
23070: LD_INT 22
23072: PUSH
23073: LD_INT 23
23075: PUSH
23076: LD_INT 24
23078: PUSH
23079: LD_INT 25
23081: PUSH
23082: LD_INT 26
23084: PUSH
23085: LD_INT 28
23087: PUSH
23088: LD_INT 30
23090: PUSH
23091: LD_INT 31
23093: PUSH
23094: LD_INT 32
23096: PUSH
23097: LD_INT 34
23099: PUSH
23100: LD_INT 36
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 101
23138: PUSH
23139: LD_INT 102
23141: PUSH
23142: LD_INT 103
23144: PUSH
23145: LD_INT 104
23147: PUSH
23148: LD_INT 105
23150: PUSH
23151: LD_INT 106
23153: PUSH
23154: LD_INT 107
23156: PUSH
23157: LD_INT 108
23159: PUSH
23160: LD_INT 109
23162: PUSH
23163: LD_INT 110
23165: PUSH
23166: LD_INT 111
23168: PUSH
23169: LD_INT 112
23171: PUSH
23172: LD_INT 114
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: ST_TO_ADDR
23194: GO 24781
23196: LD_INT 12
23198: DOUBLE
23199: EQUAL
23200: IFTRUE 23204
23202: GO 23412
23204: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
23205: LD_ADDR_VAR 0 1
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: LD_INT 2
23215: PUSH
23216: LD_INT 3
23218: PUSH
23219: LD_INT 4
23221: PUSH
23222: LD_INT 5
23224: PUSH
23225: LD_INT 6
23227: PUSH
23228: LD_INT 7
23230: PUSH
23231: LD_INT 8
23233: PUSH
23234: LD_INT 9
23236: PUSH
23237: LD_INT 10
23239: PUSH
23240: LD_INT 11
23242: PUSH
23243: LD_INT 12
23245: PUSH
23246: LD_INT 13
23248: PUSH
23249: LD_INT 14
23251: PUSH
23252: LD_INT 15
23254: PUSH
23255: LD_INT 16
23257: PUSH
23258: LD_INT 17
23260: PUSH
23261: LD_INT 18
23263: PUSH
23264: LD_INT 19
23266: PUSH
23267: LD_INT 20
23269: PUSH
23270: LD_INT 21
23272: PUSH
23273: LD_INT 22
23275: PUSH
23276: LD_INT 23
23278: PUSH
23279: LD_INT 24
23281: PUSH
23282: LD_INT 25
23284: PUSH
23285: LD_INT 26
23287: PUSH
23288: LD_INT 27
23290: PUSH
23291: LD_INT 28
23293: PUSH
23294: LD_INT 30
23296: PUSH
23297: LD_INT 31
23299: PUSH
23300: LD_INT 32
23302: PUSH
23303: LD_INT 33
23305: PUSH
23306: LD_INT 34
23308: PUSH
23309: LD_INT 36
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 101
23350: PUSH
23351: LD_INT 102
23353: PUSH
23354: LD_INT 103
23356: PUSH
23357: LD_INT 104
23359: PUSH
23360: LD_INT 105
23362: PUSH
23363: LD_INT 106
23365: PUSH
23366: LD_INT 107
23368: PUSH
23369: LD_INT 108
23371: PUSH
23372: LD_INT 109
23374: PUSH
23375: LD_INT 110
23377: PUSH
23378: LD_INT 111
23380: PUSH
23381: LD_INT 112
23383: PUSH
23384: LD_INT 113
23386: PUSH
23387: LD_INT 114
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: ST_TO_ADDR
23410: GO 24781
23412: LD_INT 13
23414: DOUBLE
23415: EQUAL
23416: IFTRUE 23420
23418: GO 23616
23420: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
23421: LD_ADDR_VAR 0 1
23425: PUSH
23426: LD_INT 1
23428: PUSH
23429: LD_INT 2
23431: PUSH
23432: LD_INT 3
23434: PUSH
23435: LD_INT 4
23437: PUSH
23438: LD_INT 5
23440: PUSH
23441: LD_INT 8
23443: PUSH
23444: LD_INT 9
23446: PUSH
23447: LD_INT 10
23449: PUSH
23450: LD_INT 11
23452: PUSH
23453: LD_INT 12
23455: PUSH
23456: LD_INT 14
23458: PUSH
23459: LD_INT 15
23461: PUSH
23462: LD_INT 16
23464: PUSH
23465: LD_INT 17
23467: PUSH
23468: LD_INT 18
23470: PUSH
23471: LD_INT 19
23473: PUSH
23474: LD_INT 20
23476: PUSH
23477: LD_INT 21
23479: PUSH
23480: LD_INT 22
23482: PUSH
23483: LD_INT 23
23485: PUSH
23486: LD_INT 24
23488: PUSH
23489: LD_INT 25
23491: PUSH
23492: LD_INT 26
23494: PUSH
23495: LD_INT 27
23497: PUSH
23498: LD_INT 28
23500: PUSH
23501: LD_INT 30
23503: PUSH
23504: LD_INT 31
23506: PUSH
23507: LD_INT 32
23509: PUSH
23510: LD_INT 33
23512: PUSH
23513: LD_INT 34
23515: PUSH
23516: LD_INT 36
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 101
23554: PUSH
23555: LD_INT 102
23557: PUSH
23558: LD_INT 103
23560: PUSH
23561: LD_INT 104
23563: PUSH
23564: LD_INT 105
23566: PUSH
23567: LD_INT 106
23569: PUSH
23570: LD_INT 107
23572: PUSH
23573: LD_INT 108
23575: PUSH
23576: LD_INT 109
23578: PUSH
23579: LD_INT 110
23581: PUSH
23582: LD_INT 111
23584: PUSH
23585: LD_INT 112
23587: PUSH
23588: LD_INT 113
23590: PUSH
23591: LD_INT 114
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: ST_TO_ADDR
23614: GO 24781
23616: LD_INT 14
23618: DOUBLE
23619: EQUAL
23620: IFTRUE 23624
23622: GO 23836
23624: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
23625: LD_ADDR_VAR 0 1
23629: PUSH
23630: LD_INT 1
23632: PUSH
23633: LD_INT 2
23635: PUSH
23636: LD_INT 3
23638: PUSH
23639: LD_INT 4
23641: PUSH
23642: LD_INT 5
23644: PUSH
23645: LD_INT 6
23647: PUSH
23648: LD_INT 7
23650: PUSH
23651: LD_INT 8
23653: PUSH
23654: LD_INT 9
23656: PUSH
23657: LD_INT 10
23659: PUSH
23660: LD_INT 11
23662: PUSH
23663: LD_INT 12
23665: PUSH
23666: LD_INT 13
23668: PUSH
23669: LD_INT 14
23671: PUSH
23672: LD_INT 15
23674: PUSH
23675: LD_INT 16
23677: PUSH
23678: LD_INT 17
23680: PUSH
23681: LD_INT 18
23683: PUSH
23684: LD_INT 19
23686: PUSH
23687: LD_INT 20
23689: PUSH
23690: LD_INT 21
23692: PUSH
23693: LD_INT 22
23695: PUSH
23696: LD_INT 23
23698: PUSH
23699: LD_INT 24
23701: PUSH
23702: LD_INT 25
23704: PUSH
23705: LD_INT 26
23707: PUSH
23708: LD_INT 27
23710: PUSH
23711: LD_INT 28
23713: PUSH
23714: LD_INT 29
23716: PUSH
23717: LD_INT 30
23719: PUSH
23720: LD_INT 31
23722: PUSH
23723: LD_INT 32
23725: PUSH
23726: LD_INT 33
23728: PUSH
23729: LD_INT 34
23731: PUSH
23732: LD_INT 36
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 101
23774: PUSH
23775: LD_INT 102
23777: PUSH
23778: LD_INT 103
23780: PUSH
23781: LD_INT 104
23783: PUSH
23784: LD_INT 105
23786: PUSH
23787: LD_INT 106
23789: PUSH
23790: LD_INT 107
23792: PUSH
23793: LD_INT 108
23795: PUSH
23796: LD_INT 109
23798: PUSH
23799: LD_INT 110
23801: PUSH
23802: LD_INT 111
23804: PUSH
23805: LD_INT 112
23807: PUSH
23808: LD_INT 113
23810: PUSH
23811: LD_INT 114
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: ST_TO_ADDR
23834: GO 24781
23836: LD_INT 15
23838: DOUBLE
23839: EQUAL
23840: IFTRUE 23844
23842: GO 24056
23844: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
23845: LD_ADDR_VAR 0 1
23849: PUSH
23850: LD_INT 1
23852: PUSH
23853: LD_INT 2
23855: PUSH
23856: LD_INT 3
23858: PUSH
23859: LD_INT 4
23861: PUSH
23862: LD_INT 5
23864: PUSH
23865: LD_INT 6
23867: PUSH
23868: LD_INT 7
23870: PUSH
23871: LD_INT 8
23873: PUSH
23874: LD_INT 9
23876: PUSH
23877: LD_INT 10
23879: PUSH
23880: LD_INT 11
23882: PUSH
23883: LD_INT 12
23885: PUSH
23886: LD_INT 13
23888: PUSH
23889: LD_INT 14
23891: PUSH
23892: LD_INT 15
23894: PUSH
23895: LD_INT 16
23897: PUSH
23898: LD_INT 17
23900: PUSH
23901: LD_INT 18
23903: PUSH
23904: LD_INT 19
23906: PUSH
23907: LD_INT 20
23909: PUSH
23910: LD_INT 21
23912: PUSH
23913: LD_INT 22
23915: PUSH
23916: LD_INT 23
23918: PUSH
23919: LD_INT 24
23921: PUSH
23922: LD_INT 25
23924: PUSH
23925: LD_INT 26
23927: PUSH
23928: LD_INT 27
23930: PUSH
23931: LD_INT 28
23933: PUSH
23934: LD_INT 29
23936: PUSH
23937: LD_INT 30
23939: PUSH
23940: LD_INT 31
23942: PUSH
23943: LD_INT 32
23945: PUSH
23946: LD_INT 33
23948: PUSH
23949: LD_INT 34
23951: PUSH
23952: LD_INT 36
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 101
23994: PUSH
23995: LD_INT 102
23997: PUSH
23998: LD_INT 103
24000: PUSH
24001: LD_INT 104
24003: PUSH
24004: LD_INT 105
24006: PUSH
24007: LD_INT 106
24009: PUSH
24010: LD_INT 107
24012: PUSH
24013: LD_INT 108
24015: PUSH
24016: LD_INT 109
24018: PUSH
24019: LD_INT 110
24021: PUSH
24022: LD_INT 111
24024: PUSH
24025: LD_INT 112
24027: PUSH
24028: LD_INT 113
24030: PUSH
24031: LD_INT 114
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: ST_TO_ADDR
24054: GO 24781
24056: LD_INT 16
24058: DOUBLE
24059: EQUAL
24060: IFTRUE 24064
24062: GO 24188
24064: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
24065: LD_ADDR_VAR 0 1
24069: PUSH
24070: LD_INT 2
24072: PUSH
24073: LD_INT 4
24075: PUSH
24076: LD_INT 5
24078: PUSH
24079: LD_INT 7
24081: PUSH
24082: LD_INT 11
24084: PUSH
24085: LD_INT 12
24087: PUSH
24088: LD_INT 15
24090: PUSH
24091: LD_INT 16
24093: PUSH
24094: LD_INT 20
24096: PUSH
24097: LD_INT 21
24099: PUSH
24100: LD_INT 22
24102: PUSH
24103: LD_INT 23
24105: PUSH
24106: LD_INT 25
24108: PUSH
24109: LD_INT 26
24111: PUSH
24112: LD_INT 30
24114: PUSH
24115: LD_INT 31
24117: PUSH
24118: LD_INT 32
24120: PUSH
24121: LD_INT 33
24123: PUSH
24124: LD_INT 34
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 101
24150: PUSH
24151: LD_INT 102
24153: PUSH
24154: LD_INT 103
24156: PUSH
24157: LD_INT 106
24159: PUSH
24160: LD_INT 108
24162: PUSH
24163: LD_INT 112
24165: PUSH
24166: LD_INT 113
24168: PUSH
24169: LD_INT 114
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: ST_TO_ADDR
24186: GO 24781
24188: LD_INT 17
24190: DOUBLE
24191: EQUAL
24192: IFTRUE 24196
24194: GO 24408
24196: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
24197: LD_ADDR_VAR 0 1
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: LD_INT 2
24207: PUSH
24208: LD_INT 3
24210: PUSH
24211: LD_INT 4
24213: PUSH
24214: LD_INT 5
24216: PUSH
24217: LD_INT 6
24219: PUSH
24220: LD_INT 7
24222: PUSH
24223: LD_INT 8
24225: PUSH
24226: LD_INT 9
24228: PUSH
24229: LD_INT 10
24231: PUSH
24232: LD_INT 11
24234: PUSH
24235: LD_INT 12
24237: PUSH
24238: LD_INT 13
24240: PUSH
24241: LD_INT 14
24243: PUSH
24244: LD_INT 15
24246: PUSH
24247: LD_INT 16
24249: PUSH
24250: LD_INT 17
24252: PUSH
24253: LD_INT 18
24255: PUSH
24256: LD_INT 19
24258: PUSH
24259: LD_INT 20
24261: PUSH
24262: LD_INT 21
24264: PUSH
24265: LD_INT 22
24267: PUSH
24268: LD_INT 23
24270: PUSH
24271: LD_INT 24
24273: PUSH
24274: LD_INT 25
24276: PUSH
24277: LD_INT 26
24279: PUSH
24280: LD_INT 27
24282: PUSH
24283: LD_INT 28
24285: PUSH
24286: LD_INT 29
24288: PUSH
24289: LD_INT 30
24291: PUSH
24292: LD_INT 31
24294: PUSH
24295: LD_INT 32
24297: PUSH
24298: LD_INT 33
24300: PUSH
24301: LD_INT 34
24303: PUSH
24304: LD_INT 36
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 101
24346: PUSH
24347: LD_INT 102
24349: PUSH
24350: LD_INT 103
24352: PUSH
24353: LD_INT 104
24355: PUSH
24356: LD_INT 105
24358: PUSH
24359: LD_INT 106
24361: PUSH
24362: LD_INT 107
24364: PUSH
24365: LD_INT 108
24367: PUSH
24368: LD_INT 109
24370: PUSH
24371: LD_INT 110
24373: PUSH
24374: LD_INT 111
24376: PUSH
24377: LD_INT 112
24379: PUSH
24380: LD_INT 113
24382: PUSH
24383: LD_INT 114
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: ST_TO_ADDR
24406: GO 24781
24408: LD_INT 18
24410: DOUBLE
24411: EQUAL
24412: IFTRUE 24416
24414: GO 24552
24416: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
24417: LD_ADDR_VAR 0 1
24421: PUSH
24422: LD_INT 2
24424: PUSH
24425: LD_INT 4
24427: PUSH
24428: LD_INT 5
24430: PUSH
24431: LD_INT 7
24433: PUSH
24434: LD_INT 11
24436: PUSH
24437: LD_INT 12
24439: PUSH
24440: LD_INT 15
24442: PUSH
24443: LD_INT 16
24445: PUSH
24446: LD_INT 20
24448: PUSH
24449: LD_INT 21
24451: PUSH
24452: LD_INT 22
24454: PUSH
24455: LD_INT 23
24457: PUSH
24458: LD_INT 25
24460: PUSH
24461: LD_INT 26
24463: PUSH
24464: LD_INT 30
24466: PUSH
24467: LD_INT 31
24469: PUSH
24470: LD_INT 32
24472: PUSH
24473: LD_INT 33
24475: PUSH
24476: LD_INT 34
24478: PUSH
24479: LD_INT 35
24481: PUSH
24482: LD_INT 36
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 101
24510: PUSH
24511: LD_INT 102
24513: PUSH
24514: LD_INT 103
24516: PUSH
24517: LD_INT 106
24519: PUSH
24520: LD_INT 108
24522: PUSH
24523: LD_INT 112
24525: PUSH
24526: LD_INT 113
24528: PUSH
24529: LD_INT 114
24531: PUSH
24532: LD_INT 115
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: ST_TO_ADDR
24550: GO 24781
24552: LD_INT 19
24554: DOUBLE
24555: EQUAL
24556: IFTRUE 24560
24558: GO 24780
24560: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
24561: LD_ADDR_VAR 0 1
24565: PUSH
24566: LD_INT 1
24568: PUSH
24569: LD_INT 2
24571: PUSH
24572: LD_INT 3
24574: PUSH
24575: LD_INT 4
24577: PUSH
24578: LD_INT 5
24580: PUSH
24581: LD_INT 6
24583: PUSH
24584: LD_INT 7
24586: PUSH
24587: LD_INT 8
24589: PUSH
24590: LD_INT 9
24592: PUSH
24593: LD_INT 10
24595: PUSH
24596: LD_INT 11
24598: PUSH
24599: LD_INT 12
24601: PUSH
24602: LD_INT 13
24604: PUSH
24605: LD_INT 14
24607: PUSH
24608: LD_INT 15
24610: PUSH
24611: LD_INT 16
24613: PUSH
24614: LD_INT 17
24616: PUSH
24617: LD_INT 18
24619: PUSH
24620: LD_INT 19
24622: PUSH
24623: LD_INT 20
24625: PUSH
24626: LD_INT 21
24628: PUSH
24629: LD_INT 22
24631: PUSH
24632: LD_INT 23
24634: PUSH
24635: LD_INT 24
24637: PUSH
24638: LD_INT 25
24640: PUSH
24641: LD_INT 26
24643: PUSH
24644: LD_INT 27
24646: PUSH
24647: LD_INT 28
24649: PUSH
24650: LD_INT 29
24652: PUSH
24653: LD_INT 30
24655: PUSH
24656: LD_INT 31
24658: PUSH
24659: LD_INT 32
24661: PUSH
24662: LD_INT 33
24664: PUSH
24665: LD_INT 34
24667: PUSH
24668: LD_INT 35
24670: PUSH
24671: LD_INT 36
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 101
24714: PUSH
24715: LD_INT 102
24717: PUSH
24718: LD_INT 103
24720: PUSH
24721: LD_INT 104
24723: PUSH
24724: LD_INT 105
24726: PUSH
24727: LD_INT 106
24729: PUSH
24730: LD_INT 107
24732: PUSH
24733: LD_INT 108
24735: PUSH
24736: LD_INT 109
24738: PUSH
24739: LD_INT 110
24741: PUSH
24742: LD_INT 111
24744: PUSH
24745: LD_INT 112
24747: PUSH
24748: LD_INT 113
24750: PUSH
24751: LD_INT 114
24753: PUSH
24754: LD_INT 115
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: ST_TO_ADDR
24778: GO 24781
24780: POP
// end else
24781: GO 25000
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
24783: LD_ADDR_VAR 0 1
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: LD_INT 2
24793: PUSH
24794: LD_INT 3
24796: PUSH
24797: LD_INT 4
24799: PUSH
24800: LD_INT 5
24802: PUSH
24803: LD_INT 6
24805: PUSH
24806: LD_INT 7
24808: PUSH
24809: LD_INT 8
24811: PUSH
24812: LD_INT 9
24814: PUSH
24815: LD_INT 10
24817: PUSH
24818: LD_INT 11
24820: PUSH
24821: LD_INT 12
24823: PUSH
24824: LD_INT 13
24826: PUSH
24827: LD_INT 14
24829: PUSH
24830: LD_INT 15
24832: PUSH
24833: LD_INT 16
24835: PUSH
24836: LD_INT 17
24838: PUSH
24839: LD_INT 18
24841: PUSH
24842: LD_INT 19
24844: PUSH
24845: LD_INT 20
24847: PUSH
24848: LD_INT 21
24850: PUSH
24851: LD_INT 22
24853: PUSH
24854: LD_INT 23
24856: PUSH
24857: LD_INT 24
24859: PUSH
24860: LD_INT 25
24862: PUSH
24863: LD_INT 26
24865: PUSH
24866: LD_INT 27
24868: PUSH
24869: LD_INT 28
24871: PUSH
24872: LD_INT 29
24874: PUSH
24875: LD_INT 30
24877: PUSH
24878: LD_INT 31
24880: PUSH
24881: LD_INT 32
24883: PUSH
24884: LD_INT 33
24886: PUSH
24887: LD_INT 34
24889: PUSH
24890: LD_INT 35
24892: PUSH
24893: LD_INT 36
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 101
24936: PUSH
24937: LD_INT 102
24939: PUSH
24940: LD_INT 103
24942: PUSH
24943: LD_INT 104
24945: PUSH
24946: LD_INT 105
24948: PUSH
24949: LD_INT 106
24951: PUSH
24952: LD_INT 107
24954: PUSH
24955: LD_INT 108
24957: PUSH
24958: LD_INT 109
24960: PUSH
24961: LD_INT 110
24963: PUSH
24964: LD_INT 111
24966: PUSH
24967: LD_INT 112
24969: PUSH
24970: LD_INT 113
24972: PUSH
24973: LD_INT 114
24975: PUSH
24976: LD_INT 115
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: ST_TO_ADDR
// if result then
25000: LD_VAR 0 1
25004: IFFALSE 25293
// begin normal :=  ;
25006: LD_ADDR_VAR 0 3
25010: PUSH
25011: LD_STRING 
25013: ST_TO_ADDR
// hardcore :=  ;
25014: LD_ADDR_VAR 0 4
25018: PUSH
25019: LD_STRING 
25021: ST_TO_ADDR
// for i = 1 to normalCounter do
25022: LD_ADDR_VAR 0 5
25026: PUSH
25027: DOUBLE
25028: LD_INT 1
25030: DEC
25031: ST_TO_ADDR
25032: LD_EXP 69
25036: PUSH
25037: FOR_TO
25038: IFFALSE 25139
// begin tmp := 0 ;
25040: LD_ADDR_VAR 0 2
25044: PUSH
25045: LD_STRING 0
25047: ST_TO_ADDR
// if result [ 1 ] then
25048: LD_VAR 0 1
25052: PUSH
25053: LD_INT 1
25055: ARRAY
25056: IFFALSE 25121
// if result [ 1 ] [ 1 ] = i then
25058: LD_VAR 0 1
25062: PUSH
25063: LD_INT 1
25065: ARRAY
25066: PUSH
25067: LD_INT 1
25069: ARRAY
25070: PUSH
25071: LD_VAR 0 5
25075: EQUAL
25076: IFFALSE 25121
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25078: LD_ADDR_VAR 0 1
25082: PUSH
25083: LD_VAR 0 1
25087: PPUSH
25088: LD_INT 1
25090: PPUSH
25091: LD_VAR 0 1
25095: PUSH
25096: LD_INT 1
25098: ARRAY
25099: PPUSH
25100: LD_INT 1
25102: PPUSH
25103: CALL_OW 3
25107: PPUSH
25108: CALL_OW 1
25112: ST_TO_ADDR
// tmp := 1 ;
25113: LD_ADDR_VAR 0 2
25117: PUSH
25118: LD_STRING 1
25120: ST_TO_ADDR
// end ; normal := normal & tmp ;
25121: LD_ADDR_VAR 0 3
25125: PUSH
25126: LD_VAR 0 3
25130: PUSH
25131: LD_VAR 0 2
25135: STR
25136: ST_TO_ADDR
// end ;
25137: GO 25037
25139: POP
25140: POP
// for i = 1 to hardcoreCounter do
25141: LD_ADDR_VAR 0 5
25145: PUSH
25146: DOUBLE
25147: LD_INT 1
25149: DEC
25150: ST_TO_ADDR
25151: LD_EXP 70
25155: PUSH
25156: FOR_TO
25157: IFFALSE 25262
// begin tmp := 0 ;
25159: LD_ADDR_VAR 0 2
25163: PUSH
25164: LD_STRING 0
25166: ST_TO_ADDR
// if result [ 2 ] then
25167: LD_VAR 0 1
25171: PUSH
25172: LD_INT 2
25174: ARRAY
25175: IFFALSE 25244
// if result [ 2 ] [ 1 ] = 100 + i then
25177: LD_VAR 0 1
25181: PUSH
25182: LD_INT 2
25184: ARRAY
25185: PUSH
25186: LD_INT 1
25188: ARRAY
25189: PUSH
25190: LD_INT 100
25192: PUSH
25193: LD_VAR 0 5
25197: PLUS
25198: EQUAL
25199: IFFALSE 25244
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25201: LD_ADDR_VAR 0 1
25205: PUSH
25206: LD_VAR 0 1
25210: PPUSH
25211: LD_INT 2
25213: PPUSH
25214: LD_VAR 0 1
25218: PUSH
25219: LD_INT 2
25221: ARRAY
25222: PPUSH
25223: LD_INT 1
25225: PPUSH
25226: CALL_OW 3
25230: PPUSH
25231: CALL_OW 1
25235: ST_TO_ADDR
// tmp := 1 ;
25236: LD_ADDR_VAR 0 2
25240: PUSH
25241: LD_STRING 1
25243: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25244: LD_ADDR_VAR 0 4
25248: PUSH
25249: LD_VAR 0 4
25253: PUSH
25254: LD_VAR 0 2
25258: STR
25259: ST_TO_ADDR
// end ;
25260: GO 25156
25262: POP
25263: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
25264: LD_STRING getStreamItemsFromMission("
25266: PUSH
25267: LD_VAR 0 3
25271: STR
25272: PUSH
25273: LD_STRING ","
25275: STR
25276: PUSH
25277: LD_VAR 0 4
25281: STR
25282: PUSH
25283: LD_STRING ")
25285: STR
25286: PPUSH
25287: CALL_OW 559
// end else
25291: GO 25300
// ToLua ( getStreamItemsFromMission("","") ) ;
25293: LD_STRING getStreamItemsFromMission("","")
25295: PPUSH
25296: CALL_OW 559
// end ;
25300: LD_VAR 0 1
25304: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25305: LD_EXP 68
25309: PUSH
25310: LD_EXP 73
25314: AND
25315: IFFALSE 25439
25317: GO 25319
25319: DISABLE
25320: LD_INT 0
25322: PPUSH
25323: PPUSH
// begin enable ;
25324: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25325: LD_ADDR_VAR 0 2
25329: PUSH
25330: LD_INT 22
25332: PUSH
25333: LD_OWVAR 2
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 2
25344: PUSH
25345: LD_INT 34
25347: PUSH
25348: LD_INT 7
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 34
25357: PUSH
25358: LD_INT 45
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 34
25367: PUSH
25368: LD_INT 28
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 34
25377: PUSH
25378: LD_INT 47
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PPUSH
25396: CALL_OW 69
25400: ST_TO_ADDR
// if not tmp then
25401: LD_VAR 0 2
25405: NOT
25406: IFFALSE 25410
// exit ;
25408: GO 25439
// for i in tmp do
25410: LD_ADDR_VAR 0 1
25414: PUSH
25415: LD_VAR 0 2
25419: PUSH
25420: FOR_IN
25421: IFFALSE 25437
// begin SetLives ( i , 0 ) ;
25423: LD_VAR 0 1
25427: PPUSH
25428: LD_INT 0
25430: PPUSH
25431: CALL_OW 234
// end ;
25435: GO 25420
25437: POP
25438: POP
// end ;
25439: PPOPN 2
25441: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25442: LD_EXP 68
25446: PUSH
25447: LD_EXP 74
25451: AND
25452: IFFALSE 25536
25454: GO 25456
25456: DISABLE
25457: LD_INT 0
25459: PPUSH
25460: PPUSH
// begin enable ;
25461: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25462: LD_ADDR_VAR 0 2
25466: PUSH
25467: LD_INT 22
25469: PUSH
25470: LD_OWVAR 2
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 32
25481: PUSH
25482: LD_INT 3
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PPUSH
25493: CALL_OW 69
25497: ST_TO_ADDR
// if not tmp then
25498: LD_VAR 0 2
25502: NOT
25503: IFFALSE 25507
// exit ;
25505: GO 25536
// for i in tmp do
25507: LD_ADDR_VAR 0 1
25511: PUSH
25512: LD_VAR 0 2
25516: PUSH
25517: FOR_IN
25518: IFFALSE 25534
// begin SetLives ( i , 0 ) ;
25520: LD_VAR 0 1
25524: PPUSH
25525: LD_INT 0
25527: PPUSH
25528: CALL_OW 234
// end ;
25532: GO 25517
25534: POP
25535: POP
// end ;
25536: PPOPN 2
25538: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25539: LD_EXP 68
25543: PUSH
25544: LD_EXP 71
25548: AND
25549: IFFALSE 25642
25551: GO 25553
25553: DISABLE
25554: LD_INT 0
25556: PPUSH
// begin enable ;
25557: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25558: LD_ADDR_VAR 0 1
25562: PUSH
25563: LD_INT 22
25565: PUSH
25566: LD_OWVAR 2
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 2
25577: PUSH
25578: LD_INT 25
25580: PUSH
25581: LD_INT 5
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 25
25590: PUSH
25591: LD_INT 9
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 25
25600: PUSH
25601: LD_INT 8
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PPUSH
25618: CALL_OW 69
25622: PUSH
25623: FOR_IN
25624: IFFALSE 25640
// begin SetClass ( i , 1 ) ;
25626: LD_VAR 0 1
25630: PPUSH
25631: LD_INT 1
25633: PPUSH
25634: CALL_OW 336
// end ;
25638: GO 25623
25640: POP
25641: POP
// end ;
25642: PPOPN 1
25644: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25645: LD_EXP 68
25649: PUSH
25650: LD_EXP 72
25654: AND
25655: PUSH
25656: LD_OWVAR 65
25660: PUSH
25661: LD_INT 7
25663: LESS
25664: AND
25665: IFFALSE 25679
25667: GO 25669
25669: DISABLE
// begin enable ;
25670: ENABLE
// game_speed := 7 ;
25671: LD_ADDR_OWVAR 65
25675: PUSH
25676: LD_INT 7
25678: ST_TO_ADDR
// end ;
25679: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25680: LD_EXP 68
25684: PUSH
25685: LD_EXP 75
25689: AND
25690: IFFALSE 25892
25692: GO 25694
25694: DISABLE
25695: LD_INT 0
25697: PPUSH
25698: PPUSH
25699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25700: LD_ADDR_VAR 0 3
25704: PUSH
25705: LD_INT 81
25707: PUSH
25708: LD_OWVAR 2
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 21
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PPUSH
25731: CALL_OW 69
25735: ST_TO_ADDR
// if not tmp then
25736: LD_VAR 0 3
25740: NOT
25741: IFFALSE 25745
// exit ;
25743: GO 25892
// if tmp > 5 then
25745: LD_VAR 0 3
25749: PUSH
25750: LD_INT 5
25752: GREATER
25753: IFFALSE 25765
// k := 5 else
25755: LD_ADDR_VAR 0 2
25759: PUSH
25760: LD_INT 5
25762: ST_TO_ADDR
25763: GO 25775
// k := tmp ;
25765: LD_ADDR_VAR 0 2
25769: PUSH
25770: LD_VAR 0 3
25774: ST_TO_ADDR
// for i := 1 to k do
25775: LD_ADDR_VAR 0 1
25779: PUSH
25780: DOUBLE
25781: LD_INT 1
25783: DEC
25784: ST_TO_ADDR
25785: LD_VAR 0 2
25789: PUSH
25790: FOR_TO
25791: IFFALSE 25890
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25793: LD_VAR 0 3
25797: PUSH
25798: LD_VAR 0 1
25802: ARRAY
25803: PPUSH
25804: LD_VAR 0 1
25808: PUSH
25809: LD_INT 4
25811: MOD
25812: PUSH
25813: LD_INT 1
25815: PLUS
25816: PPUSH
25817: CALL_OW 259
25821: PUSH
25822: LD_INT 10
25824: LESS
25825: IFFALSE 25888
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25827: LD_VAR 0 3
25831: PUSH
25832: LD_VAR 0 1
25836: ARRAY
25837: PPUSH
25838: LD_VAR 0 1
25842: PUSH
25843: LD_INT 4
25845: MOD
25846: PUSH
25847: LD_INT 1
25849: PLUS
25850: PPUSH
25851: LD_VAR 0 3
25855: PUSH
25856: LD_VAR 0 1
25860: ARRAY
25861: PPUSH
25862: LD_VAR 0 1
25866: PUSH
25867: LD_INT 4
25869: MOD
25870: PUSH
25871: LD_INT 1
25873: PLUS
25874: PPUSH
25875: CALL_OW 259
25879: PUSH
25880: LD_INT 1
25882: PLUS
25883: PPUSH
25884: CALL_OW 237
25888: GO 25790
25890: POP
25891: POP
// end ;
25892: PPOPN 3
25894: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25895: LD_EXP 68
25899: PUSH
25900: LD_EXP 76
25904: AND
25905: IFFALSE 25925
25907: GO 25909
25909: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25910: LD_INT 4
25912: PPUSH
25913: LD_OWVAR 2
25917: PPUSH
25918: LD_INT 0
25920: PPUSH
25921: CALL_OW 324
25925: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25926: LD_EXP 68
25930: PUSH
25931: LD_EXP 105
25935: AND
25936: IFFALSE 25956
25938: GO 25940
25940: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25941: LD_INT 19
25943: PPUSH
25944: LD_OWVAR 2
25948: PPUSH
25949: LD_INT 0
25951: PPUSH
25952: CALL_OW 324
25956: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25957: LD_EXP 68
25961: PUSH
25962: LD_EXP 77
25966: AND
25967: IFFALSE 26069
25969: GO 25971
25971: DISABLE
25972: LD_INT 0
25974: PPUSH
25975: PPUSH
// begin enable ;
25976: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25977: LD_ADDR_VAR 0 2
25981: PUSH
25982: LD_INT 22
25984: PUSH
25985: LD_OWVAR 2
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 2
25996: PUSH
25997: LD_INT 34
25999: PUSH
26000: LD_INT 11
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 34
26009: PUSH
26010: LD_INT 30
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: LIST
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PPUSH
26026: CALL_OW 69
26030: ST_TO_ADDR
// if not tmp then
26031: LD_VAR 0 2
26035: NOT
26036: IFFALSE 26040
// exit ;
26038: GO 26069
// for i in tmp do
26040: LD_ADDR_VAR 0 1
26044: PUSH
26045: LD_VAR 0 2
26049: PUSH
26050: FOR_IN
26051: IFFALSE 26067
// begin SetLives ( i , 0 ) ;
26053: LD_VAR 0 1
26057: PPUSH
26058: LD_INT 0
26060: PPUSH
26061: CALL_OW 234
// end ;
26065: GO 26050
26067: POP
26068: POP
// end ;
26069: PPOPN 2
26071: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26072: LD_EXP 68
26076: PUSH
26077: LD_EXP 78
26081: AND
26082: IFFALSE 26102
26084: GO 26086
26086: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26087: LD_INT 32
26089: PPUSH
26090: LD_OWVAR 2
26094: PPUSH
26095: LD_INT 0
26097: PPUSH
26098: CALL_OW 324
26102: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26103: LD_EXP 68
26107: PUSH
26108: LD_EXP 79
26112: AND
26113: IFFALSE 26294
26115: GO 26117
26117: DISABLE
26118: LD_INT 0
26120: PPUSH
26121: PPUSH
26122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26123: LD_ADDR_VAR 0 2
26127: PUSH
26128: LD_INT 22
26130: PUSH
26131: LD_OWVAR 2
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 33
26142: PUSH
26143: LD_INT 3
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PPUSH
26154: CALL_OW 69
26158: ST_TO_ADDR
// if not tmp then
26159: LD_VAR 0 2
26163: NOT
26164: IFFALSE 26168
// exit ;
26166: GO 26294
// side := 0 ;
26168: LD_ADDR_VAR 0 3
26172: PUSH
26173: LD_INT 0
26175: ST_TO_ADDR
// for i := 1 to 8 do
26176: LD_ADDR_VAR 0 1
26180: PUSH
26181: DOUBLE
26182: LD_INT 1
26184: DEC
26185: ST_TO_ADDR
26186: LD_INT 8
26188: PUSH
26189: FOR_TO
26190: IFFALSE 26238
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26192: LD_OWVAR 2
26196: PUSH
26197: LD_VAR 0 1
26201: NONEQUAL
26202: PUSH
26203: LD_OWVAR 2
26207: PPUSH
26208: LD_VAR 0 1
26212: PPUSH
26213: CALL_OW 81
26217: PUSH
26218: LD_INT 2
26220: EQUAL
26221: AND
26222: IFFALSE 26236
// begin side := i ;
26224: LD_ADDR_VAR 0 3
26228: PUSH
26229: LD_VAR 0 1
26233: ST_TO_ADDR
// break ;
26234: GO 26238
// end ;
26236: GO 26189
26238: POP
26239: POP
// if not side then
26240: LD_VAR 0 3
26244: NOT
26245: IFFALSE 26249
// exit ;
26247: GO 26294
// for i := 1 to tmp do
26249: LD_ADDR_VAR 0 1
26253: PUSH
26254: DOUBLE
26255: LD_INT 1
26257: DEC
26258: ST_TO_ADDR
26259: LD_VAR 0 2
26263: PUSH
26264: FOR_TO
26265: IFFALSE 26292
// if Prob ( 60 ) then
26267: LD_INT 60
26269: PPUSH
26270: CALL_OW 13
26274: IFFALSE 26290
// SetSide ( i , side ) ;
26276: LD_VAR 0 1
26280: PPUSH
26281: LD_VAR 0 3
26285: PPUSH
26286: CALL_OW 235
26290: GO 26264
26292: POP
26293: POP
// end ;
26294: PPOPN 3
26296: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26297: LD_EXP 68
26301: PUSH
26302: LD_EXP 81
26306: AND
26307: IFFALSE 26426
26309: GO 26311
26311: DISABLE
26312: LD_INT 0
26314: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26315: LD_ADDR_VAR 0 1
26319: PUSH
26320: LD_INT 22
26322: PUSH
26323: LD_OWVAR 2
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 21
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 3
26344: PUSH
26345: LD_INT 23
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: LIST
26363: PPUSH
26364: CALL_OW 69
26368: PUSH
26369: FOR_IN
26370: IFFALSE 26424
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26372: LD_VAR 0 1
26376: PPUSH
26377: CALL_OW 257
26381: PUSH
26382: LD_INT 1
26384: PUSH
26385: LD_INT 2
26387: PUSH
26388: LD_INT 3
26390: PUSH
26391: LD_INT 4
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: IN
26400: IFFALSE 26422
// SetClass ( un , rand ( 1 , 4 ) ) ;
26402: LD_VAR 0 1
26406: PPUSH
26407: LD_INT 1
26409: PPUSH
26410: LD_INT 4
26412: PPUSH
26413: CALL_OW 12
26417: PPUSH
26418: CALL_OW 336
26422: GO 26369
26424: POP
26425: POP
// end ;
26426: PPOPN 1
26428: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26429: LD_EXP 68
26433: PUSH
26434: LD_EXP 80
26438: AND
26439: IFFALSE 26518
26441: GO 26443
26443: DISABLE
26444: LD_INT 0
26446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26447: LD_ADDR_VAR 0 1
26451: PUSH
26452: LD_INT 22
26454: PUSH
26455: LD_OWVAR 2
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 21
26466: PUSH
26467: LD_INT 3
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PPUSH
26478: CALL_OW 69
26482: ST_TO_ADDR
// if not tmp then
26483: LD_VAR 0 1
26487: NOT
26488: IFFALSE 26492
// exit ;
26490: GO 26518
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26492: LD_VAR 0 1
26496: PUSH
26497: LD_INT 1
26499: PPUSH
26500: LD_VAR 0 1
26504: PPUSH
26505: CALL_OW 12
26509: ARRAY
26510: PPUSH
26511: LD_INT 100
26513: PPUSH
26514: CALL_OW 234
// end ;
26518: PPOPN 1
26520: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26521: LD_EXP 68
26525: PUSH
26526: LD_EXP 82
26530: AND
26531: IFFALSE 26629
26533: GO 26535
26535: DISABLE
26536: LD_INT 0
26538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26539: LD_ADDR_VAR 0 1
26543: PUSH
26544: LD_INT 22
26546: PUSH
26547: LD_OWVAR 2
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 21
26558: PUSH
26559: LD_INT 1
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PPUSH
26570: CALL_OW 69
26574: ST_TO_ADDR
// if not tmp then
26575: LD_VAR 0 1
26579: NOT
26580: IFFALSE 26584
// exit ;
26582: GO 26629
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26584: LD_VAR 0 1
26588: PUSH
26589: LD_INT 1
26591: PPUSH
26592: LD_VAR 0 1
26596: PPUSH
26597: CALL_OW 12
26601: ARRAY
26602: PPUSH
26603: LD_INT 1
26605: PPUSH
26606: LD_INT 4
26608: PPUSH
26609: CALL_OW 12
26613: PPUSH
26614: LD_INT 3000
26616: PPUSH
26617: LD_INT 9000
26619: PPUSH
26620: CALL_OW 12
26624: PPUSH
26625: CALL_OW 492
// end ;
26629: PPOPN 1
26631: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26632: LD_EXP 68
26636: PUSH
26637: LD_EXP 83
26641: AND
26642: IFFALSE 26662
26644: GO 26646
26646: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26647: LD_INT 1
26649: PPUSH
26650: LD_OWVAR 2
26654: PPUSH
26655: LD_INT 0
26657: PPUSH
26658: CALL_OW 324
26662: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26663: LD_EXP 68
26667: PUSH
26668: LD_EXP 84
26672: AND
26673: IFFALSE 26756
26675: GO 26677
26677: DISABLE
26678: LD_INT 0
26680: PPUSH
26681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26682: LD_ADDR_VAR 0 2
26686: PUSH
26687: LD_INT 22
26689: PUSH
26690: LD_OWVAR 2
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 21
26701: PUSH
26702: LD_INT 3
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PPUSH
26713: CALL_OW 69
26717: ST_TO_ADDR
// if not tmp then
26718: LD_VAR 0 2
26722: NOT
26723: IFFALSE 26727
// exit ;
26725: GO 26756
// for i in tmp do
26727: LD_ADDR_VAR 0 1
26731: PUSH
26732: LD_VAR 0 2
26736: PUSH
26737: FOR_IN
26738: IFFALSE 26754
// SetBLevel ( i , 10 ) ;
26740: LD_VAR 0 1
26744: PPUSH
26745: LD_INT 10
26747: PPUSH
26748: CALL_OW 241
26752: GO 26737
26754: POP
26755: POP
// end ;
26756: PPOPN 2
26758: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26759: LD_EXP 68
26763: PUSH
26764: LD_EXP 85
26768: AND
26769: IFFALSE 26880
26771: GO 26773
26773: DISABLE
26774: LD_INT 0
26776: PPUSH
26777: PPUSH
26778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26779: LD_ADDR_VAR 0 3
26783: PUSH
26784: LD_INT 22
26786: PUSH
26787: LD_OWVAR 2
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 25
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PPUSH
26810: CALL_OW 69
26814: ST_TO_ADDR
// if not tmp then
26815: LD_VAR 0 3
26819: NOT
26820: IFFALSE 26824
// exit ;
26822: GO 26880
// un := tmp [ rand ( 1 , tmp ) ] ;
26824: LD_ADDR_VAR 0 2
26828: PUSH
26829: LD_VAR 0 3
26833: PUSH
26834: LD_INT 1
26836: PPUSH
26837: LD_VAR 0 3
26841: PPUSH
26842: CALL_OW 12
26846: ARRAY
26847: ST_TO_ADDR
// if Crawls ( un ) then
26848: LD_VAR 0 2
26852: PPUSH
26853: CALL_OW 318
26857: IFFALSE 26868
// ComWalk ( un ) ;
26859: LD_VAR 0 2
26863: PPUSH
26864: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26868: LD_VAR 0 2
26872: PPUSH
26873: LD_INT 5
26875: PPUSH
26876: CALL_OW 336
// end ;
26880: PPOPN 3
26882: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
26883: LD_EXP 68
26887: PUSH
26888: LD_EXP 86
26892: AND
26893: PUSH
26894: LD_OWVAR 67
26898: PUSH
26899: LD_INT 3
26901: LESS
26902: AND
26903: IFFALSE 26922
26905: GO 26907
26907: DISABLE
// Difficulty := Difficulty + 1 ;
26908: LD_ADDR_OWVAR 67
26912: PUSH
26913: LD_OWVAR 67
26917: PUSH
26918: LD_INT 1
26920: PLUS
26921: ST_TO_ADDR
26922: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26923: LD_EXP 68
26927: PUSH
26928: LD_EXP 87
26932: AND
26933: IFFALSE 27036
26935: GO 26937
26937: DISABLE
26938: LD_INT 0
26940: PPUSH
// begin for i := 1 to 5 do
26941: LD_ADDR_VAR 0 1
26945: PUSH
26946: DOUBLE
26947: LD_INT 1
26949: DEC
26950: ST_TO_ADDR
26951: LD_INT 5
26953: PUSH
26954: FOR_TO
26955: IFFALSE 27034
// begin uc_nation := nation_nature ;
26957: LD_ADDR_OWVAR 21
26961: PUSH
26962: LD_INT 0
26964: ST_TO_ADDR
// uc_side := 0 ;
26965: LD_ADDR_OWVAR 20
26969: PUSH
26970: LD_INT 0
26972: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26973: LD_ADDR_OWVAR 29
26977: PUSH
26978: LD_INT 12
26980: PUSH
26981: LD_INT 12
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: ST_TO_ADDR
// hc_agressivity := 20 ;
26988: LD_ADDR_OWVAR 35
26992: PUSH
26993: LD_INT 20
26995: ST_TO_ADDR
// hc_class := class_tiger ;
26996: LD_ADDR_OWVAR 28
27000: PUSH
27001: LD_INT 14
27003: ST_TO_ADDR
// hc_gallery :=  ;
27004: LD_ADDR_OWVAR 33
27008: PUSH
27009: LD_STRING 
27011: ST_TO_ADDR
// hc_name :=  ;
27012: LD_ADDR_OWVAR 26
27016: PUSH
27017: LD_STRING 
27019: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27020: CALL_OW 44
27024: PPUSH
27025: LD_INT 0
27027: PPUSH
27028: CALL_OW 51
// end ;
27032: GO 26954
27034: POP
27035: POP
// end ;
27036: PPOPN 1
27038: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27039: LD_EXP 68
27043: PUSH
27044: LD_EXP 88
27048: AND
27049: IFFALSE 27058
27051: GO 27053
27053: DISABLE
// StreamSibBomb ;
27054: CALL 27059 0 0
27058: END
// export function StreamSibBomb ; var i , x , y ; begin
27059: LD_INT 0
27061: PPUSH
27062: PPUSH
27063: PPUSH
27064: PPUSH
// result := false ;
27065: LD_ADDR_VAR 0 1
27069: PUSH
27070: LD_INT 0
27072: ST_TO_ADDR
// for i := 1 to 16 do
27073: LD_ADDR_VAR 0 2
27077: PUSH
27078: DOUBLE
27079: LD_INT 1
27081: DEC
27082: ST_TO_ADDR
27083: LD_INT 16
27085: PUSH
27086: FOR_TO
27087: IFFALSE 27286
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27089: LD_ADDR_VAR 0 3
27093: PUSH
27094: LD_INT 10
27096: PUSH
27097: LD_INT 20
27099: PUSH
27100: LD_INT 30
27102: PUSH
27103: LD_INT 40
27105: PUSH
27106: LD_INT 50
27108: PUSH
27109: LD_INT 60
27111: PUSH
27112: LD_INT 70
27114: PUSH
27115: LD_INT 80
27117: PUSH
27118: LD_INT 90
27120: PUSH
27121: LD_INT 100
27123: PUSH
27124: LD_INT 110
27126: PUSH
27127: LD_INT 120
27129: PUSH
27130: LD_INT 130
27132: PUSH
27133: LD_INT 140
27135: PUSH
27136: LD_INT 150
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: PPUSH
27159: LD_INT 15
27161: PPUSH
27162: CALL_OW 12
27166: ARRAY
27167: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27168: LD_ADDR_VAR 0 4
27172: PUSH
27173: LD_INT 10
27175: PUSH
27176: LD_INT 20
27178: PUSH
27179: LD_INT 30
27181: PUSH
27182: LD_INT 40
27184: PUSH
27185: LD_INT 50
27187: PUSH
27188: LD_INT 60
27190: PUSH
27191: LD_INT 70
27193: PUSH
27194: LD_INT 80
27196: PUSH
27197: LD_INT 90
27199: PUSH
27200: LD_INT 100
27202: PUSH
27203: LD_INT 110
27205: PUSH
27206: LD_INT 120
27208: PUSH
27209: LD_INT 130
27211: PUSH
27212: LD_INT 140
27214: PUSH
27215: LD_INT 150
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 1
27237: PPUSH
27238: LD_INT 15
27240: PPUSH
27241: CALL_OW 12
27245: ARRAY
27246: ST_TO_ADDR
// if ValidHex ( x , y ) then
27247: LD_VAR 0 3
27251: PPUSH
27252: LD_VAR 0 4
27256: PPUSH
27257: CALL_OW 488
27261: IFFALSE 27284
// begin result := [ x , y ] ;
27263: LD_ADDR_VAR 0 1
27267: PUSH
27268: LD_VAR 0 3
27272: PUSH
27273: LD_VAR 0 4
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: ST_TO_ADDR
// break ;
27282: GO 27286
// end ; end ;
27284: GO 27086
27286: POP
27287: POP
// if result then
27288: LD_VAR 0 1
27292: IFFALSE 27352
// begin ToLua ( playSibBomb() ) ;
27294: LD_STRING playSibBomb()
27296: PPUSH
27297: CALL_OW 559
// wait ( 0 0$14 ) ;
27301: LD_INT 490
27303: PPUSH
27304: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27308: LD_VAR 0 1
27312: PUSH
27313: LD_INT 1
27315: ARRAY
27316: PPUSH
27317: LD_VAR 0 1
27321: PUSH
27322: LD_INT 2
27324: ARRAY
27325: PPUSH
27326: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27330: LD_VAR 0 1
27334: PUSH
27335: LD_INT 1
27337: ARRAY
27338: PPUSH
27339: LD_VAR 0 1
27343: PUSH
27344: LD_INT 2
27346: ARRAY
27347: PPUSH
27348: CALL_OW 429
// end ; end ;
27352: LD_VAR 0 1
27356: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27357: LD_EXP 68
27361: PUSH
27362: LD_EXP 90
27366: AND
27367: IFFALSE 27379
27369: GO 27371
27371: DISABLE
// YouLost (  ) ;
27372: LD_STRING 
27374: PPUSH
27375: CALL_OW 104
27379: END
// every 0 0$1 trigger StreamModeActive and sFog do
27380: LD_EXP 68
27384: PUSH
27385: LD_EXP 89
27389: AND
27390: IFFALSE 27404
27392: GO 27394
27394: DISABLE
// FogOff ( your_side ) ;
27395: LD_OWVAR 2
27399: PPUSH
27400: CALL_OW 344
27404: END
// every 0 0$1 trigger StreamModeActive and sSun do
27405: LD_EXP 68
27409: PUSH
27410: LD_EXP 91
27414: AND
27415: IFFALSE 27443
27417: GO 27419
27419: DISABLE
// begin solar_recharge_percent := 0 ;
27420: LD_ADDR_OWVAR 79
27424: PUSH
27425: LD_INT 0
27427: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27428: LD_INT 10500
27430: PPUSH
27431: CALL_OW 67
// solar_recharge_percent := 100 ;
27435: LD_ADDR_OWVAR 79
27439: PUSH
27440: LD_INT 100
27442: ST_TO_ADDR
// end ;
27443: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27444: LD_EXP 68
27448: PUSH
27449: LD_EXP 92
27453: AND
27454: IFFALSE 27693
27456: GO 27458
27458: DISABLE
27459: LD_INT 0
27461: PPUSH
27462: PPUSH
27463: PPUSH
// begin tmp := [ ] ;
27464: LD_ADDR_VAR 0 3
27468: PUSH
27469: EMPTY
27470: ST_TO_ADDR
// for i := 1 to 6 do
27471: LD_ADDR_VAR 0 1
27475: PUSH
27476: DOUBLE
27477: LD_INT 1
27479: DEC
27480: ST_TO_ADDR
27481: LD_INT 6
27483: PUSH
27484: FOR_TO
27485: IFFALSE 27590
// begin uc_nation := nation_nature ;
27487: LD_ADDR_OWVAR 21
27491: PUSH
27492: LD_INT 0
27494: ST_TO_ADDR
// uc_side := 0 ;
27495: LD_ADDR_OWVAR 20
27499: PUSH
27500: LD_INT 0
27502: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27503: LD_ADDR_OWVAR 29
27507: PUSH
27508: LD_INT 12
27510: PUSH
27511: LD_INT 12
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: ST_TO_ADDR
// hc_agressivity := 20 ;
27518: LD_ADDR_OWVAR 35
27522: PUSH
27523: LD_INT 20
27525: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27526: LD_ADDR_OWVAR 28
27530: PUSH
27531: LD_INT 17
27533: ST_TO_ADDR
// hc_gallery :=  ;
27534: LD_ADDR_OWVAR 33
27538: PUSH
27539: LD_STRING 
27541: ST_TO_ADDR
// hc_name :=  ;
27542: LD_ADDR_OWVAR 26
27546: PUSH
27547: LD_STRING 
27549: ST_TO_ADDR
// un := CreateHuman ;
27550: LD_ADDR_VAR 0 2
27554: PUSH
27555: CALL_OW 44
27559: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27560: LD_VAR 0 2
27564: PPUSH
27565: LD_INT 1
27567: PPUSH
27568: CALL_OW 51
// tmp := tmp ^ un ;
27572: LD_ADDR_VAR 0 3
27576: PUSH
27577: LD_VAR 0 3
27581: PUSH
27582: LD_VAR 0 2
27586: ADD
27587: ST_TO_ADDR
// end ;
27588: GO 27484
27590: POP
27591: POP
// repeat wait ( 0 0$1 ) ;
27592: LD_INT 35
27594: PPUSH
27595: CALL_OW 67
// for un in tmp do
27599: LD_ADDR_VAR 0 2
27603: PUSH
27604: LD_VAR 0 3
27608: PUSH
27609: FOR_IN
27610: IFFALSE 27684
// begin if IsDead ( un ) then
27612: LD_VAR 0 2
27616: PPUSH
27617: CALL_OW 301
27621: IFFALSE 27641
// begin tmp := tmp diff un ;
27623: LD_ADDR_VAR 0 3
27627: PUSH
27628: LD_VAR 0 3
27632: PUSH
27633: LD_VAR 0 2
27637: DIFF
27638: ST_TO_ADDR
// continue ;
27639: GO 27609
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27641: LD_VAR 0 2
27645: PPUSH
27646: LD_INT 3
27648: PUSH
27649: LD_INT 22
27651: PUSH
27652: LD_INT 0
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PPUSH
27663: CALL_OW 69
27667: PPUSH
27668: LD_VAR 0 2
27672: PPUSH
27673: CALL_OW 74
27677: PPUSH
27678: CALL_OW 115
// end ;
27682: GO 27609
27684: POP
27685: POP
// until not tmp ;
27686: LD_VAR 0 3
27690: NOT
27691: IFFALSE 27592
// end ;
27693: PPOPN 3
27695: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27696: LD_EXP 68
27700: PUSH
27701: LD_EXP 93
27705: AND
27706: IFFALSE 27760
27708: GO 27710
27710: DISABLE
// begin ToLua ( displayTroll(); ) ;
27711: LD_STRING displayTroll();
27713: PPUSH
27714: CALL_OW 559
// wait ( 3 3$00 ) ;
27718: LD_INT 6300
27720: PPUSH
27721: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27725: LD_STRING hideTroll();
27727: PPUSH
27728: CALL_OW 559
// wait ( 1 1$00 ) ;
27732: LD_INT 2100
27734: PPUSH
27735: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27739: LD_STRING displayTroll();
27741: PPUSH
27742: CALL_OW 559
// wait ( 1 1$00 ) ;
27746: LD_INT 2100
27748: PPUSH
27749: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27753: LD_STRING hideTroll();
27755: PPUSH
27756: CALL_OW 559
// end ;
27760: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27761: LD_EXP 68
27765: PUSH
27766: LD_EXP 94
27770: AND
27771: IFFALSE 27834
27773: GO 27775
27775: DISABLE
27776: LD_INT 0
27778: PPUSH
// begin p := 0 ;
27779: LD_ADDR_VAR 0 1
27783: PUSH
27784: LD_INT 0
27786: ST_TO_ADDR
// repeat game_speed := 1 ;
27787: LD_ADDR_OWVAR 65
27791: PUSH
27792: LD_INT 1
27794: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27795: LD_INT 35
27797: PPUSH
27798: CALL_OW 67
// p := p + 1 ;
27802: LD_ADDR_VAR 0 1
27806: PUSH
27807: LD_VAR 0 1
27811: PUSH
27812: LD_INT 1
27814: PLUS
27815: ST_TO_ADDR
// until p >= 60 ;
27816: LD_VAR 0 1
27820: PUSH
27821: LD_INT 60
27823: GREATEREQUAL
27824: IFFALSE 27787
// game_speed := 4 ;
27826: LD_ADDR_OWVAR 65
27830: PUSH
27831: LD_INT 4
27833: ST_TO_ADDR
// end ;
27834: PPOPN 1
27836: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27837: LD_EXP 68
27841: PUSH
27842: LD_EXP 95
27846: AND
27847: IFFALSE 27993
27849: GO 27851
27851: DISABLE
27852: LD_INT 0
27854: PPUSH
27855: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27856: LD_ADDR_VAR 0 1
27860: PUSH
27861: LD_INT 22
27863: PUSH
27864: LD_OWVAR 2
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: LD_INT 30
27878: PUSH
27879: LD_INT 0
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 30
27888: PUSH
27889: LD_INT 1
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: LIST
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PPUSH
27905: CALL_OW 69
27909: ST_TO_ADDR
// if not depot then
27910: LD_VAR 0 1
27914: NOT
27915: IFFALSE 27919
// exit ;
27917: GO 27993
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27919: LD_ADDR_VAR 0 2
27923: PUSH
27924: LD_VAR 0 1
27928: PUSH
27929: LD_INT 1
27931: PPUSH
27932: LD_VAR 0 1
27936: PPUSH
27937: CALL_OW 12
27941: ARRAY
27942: PPUSH
27943: CALL_OW 274
27947: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27948: LD_VAR 0 2
27952: PPUSH
27953: LD_INT 1
27955: PPUSH
27956: LD_INT 0
27958: PPUSH
27959: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27963: LD_VAR 0 2
27967: PPUSH
27968: LD_INT 2
27970: PPUSH
27971: LD_INT 0
27973: PPUSH
27974: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27978: LD_VAR 0 2
27982: PPUSH
27983: LD_INT 3
27985: PPUSH
27986: LD_INT 0
27988: PPUSH
27989: CALL_OW 277
// end ;
27993: PPOPN 2
27995: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27996: LD_EXP 68
28000: PUSH
28001: LD_EXP 96
28005: AND
28006: IFFALSE 28103
28008: GO 28010
28010: DISABLE
28011: LD_INT 0
28013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28014: LD_ADDR_VAR 0 1
28018: PUSH
28019: LD_INT 22
28021: PUSH
28022: LD_OWVAR 2
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 21
28033: PUSH
28034: LD_INT 1
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 3
28043: PUSH
28044: LD_INT 23
28046: PUSH
28047: LD_INT 0
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: LIST
28062: PPUSH
28063: CALL_OW 69
28067: ST_TO_ADDR
// if not tmp then
28068: LD_VAR 0 1
28072: NOT
28073: IFFALSE 28077
// exit ;
28075: GO 28103
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28077: LD_VAR 0 1
28081: PUSH
28082: LD_INT 1
28084: PPUSH
28085: LD_VAR 0 1
28089: PPUSH
28090: CALL_OW 12
28094: ARRAY
28095: PPUSH
28096: LD_INT 200
28098: PPUSH
28099: CALL_OW 234
// end ;
28103: PPOPN 1
28105: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28106: LD_EXP 68
28110: PUSH
28111: LD_EXP 97
28115: AND
28116: IFFALSE 28195
28118: GO 28120
28120: DISABLE
28121: LD_INT 0
28123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28124: LD_ADDR_VAR 0 1
28128: PUSH
28129: LD_INT 22
28131: PUSH
28132: LD_OWVAR 2
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 21
28143: PUSH
28144: LD_INT 2
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PPUSH
28155: CALL_OW 69
28159: ST_TO_ADDR
// if not tmp then
28160: LD_VAR 0 1
28164: NOT
28165: IFFALSE 28169
// exit ;
28167: GO 28195
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28169: LD_VAR 0 1
28173: PUSH
28174: LD_INT 1
28176: PPUSH
28177: LD_VAR 0 1
28181: PPUSH
28182: CALL_OW 12
28186: ARRAY
28187: PPUSH
28188: LD_INT 60
28190: PPUSH
28191: CALL_OW 234
// end ;
28195: PPOPN 1
28197: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28198: LD_EXP 68
28202: PUSH
28203: LD_EXP 98
28207: AND
28208: IFFALSE 28307
28210: GO 28212
28212: DISABLE
28213: LD_INT 0
28215: PPUSH
28216: PPUSH
// begin enable ;
28217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28218: LD_ADDR_VAR 0 1
28222: PUSH
28223: LD_INT 22
28225: PUSH
28226: LD_OWVAR 2
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 61
28237: PUSH
28238: EMPTY
28239: LIST
28240: PUSH
28241: LD_INT 33
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: LIST
28255: PPUSH
28256: CALL_OW 69
28260: ST_TO_ADDR
// if not tmp then
28261: LD_VAR 0 1
28265: NOT
28266: IFFALSE 28270
// exit ;
28268: GO 28307
// for i in tmp do
28270: LD_ADDR_VAR 0 2
28274: PUSH
28275: LD_VAR 0 1
28279: PUSH
28280: FOR_IN
28281: IFFALSE 28305
// if IsControledBy ( i ) then
28283: LD_VAR 0 2
28287: PPUSH
28288: CALL_OW 312
28292: IFFALSE 28303
// ComUnlink ( i ) ;
28294: LD_VAR 0 2
28298: PPUSH
28299: CALL_OW 136
28303: GO 28280
28305: POP
28306: POP
// end ;
28307: PPOPN 2
28309: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28310: LD_EXP 68
28314: PUSH
28315: LD_EXP 99
28319: AND
28320: IFFALSE 28460
28322: GO 28324
28324: DISABLE
28325: LD_INT 0
28327: PPUSH
28328: PPUSH
// begin ToLua ( displayPowell(); ) ;
28329: LD_STRING displayPowell();
28331: PPUSH
28332: CALL_OW 559
// uc_side := 0 ;
28336: LD_ADDR_OWVAR 20
28340: PUSH
28341: LD_INT 0
28343: ST_TO_ADDR
// uc_nation := 2 ;
28344: LD_ADDR_OWVAR 21
28348: PUSH
28349: LD_INT 2
28351: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28352: LD_ADDR_OWVAR 37
28356: PUSH
28357: LD_INT 14
28359: ST_TO_ADDR
// vc_engine := engine_siberite ;
28360: LD_ADDR_OWVAR 39
28364: PUSH
28365: LD_INT 3
28367: ST_TO_ADDR
// vc_control := control_apeman ;
28368: LD_ADDR_OWVAR 38
28372: PUSH
28373: LD_INT 5
28375: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28376: LD_ADDR_OWVAR 40
28380: PUSH
28381: LD_INT 29
28383: ST_TO_ADDR
// un := CreateVehicle ;
28384: LD_ADDR_VAR 0 2
28388: PUSH
28389: CALL_OW 45
28393: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28394: LD_VAR 0 2
28398: PPUSH
28399: LD_INT 1
28401: PPUSH
28402: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28406: LD_INT 35
28408: PPUSH
28409: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28413: LD_VAR 0 2
28417: PPUSH
28418: LD_INT 22
28420: PUSH
28421: LD_OWVAR 2
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PPUSH
28430: CALL_OW 69
28434: PPUSH
28435: LD_VAR 0 2
28439: PPUSH
28440: CALL_OW 74
28444: PPUSH
28445: CALL_OW 115
// until IsDead ( un ) ;
28449: LD_VAR 0 2
28453: PPUSH
28454: CALL_OW 301
28458: IFFALSE 28406
// end ;
28460: PPOPN 2
28462: END
// every 0 0$1 trigger StreamModeActive and sStu do
28463: LD_EXP 68
28467: PUSH
28468: LD_EXP 107
28472: AND
28473: IFFALSE 28489
28475: GO 28477
28477: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28478: LD_STRING displayStucuk();
28480: PPUSH
28481: CALL_OW 559
// ResetFog ;
28485: CALL_OW 335
// end ;
28489: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28490: LD_EXP 68
28494: PUSH
28495: LD_EXP 100
28499: AND
28500: IFFALSE 28641
28502: GO 28504
28504: DISABLE
28505: LD_INT 0
28507: PPUSH
28508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28509: LD_ADDR_VAR 0 2
28513: PUSH
28514: LD_INT 22
28516: PUSH
28517: LD_OWVAR 2
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 21
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PPUSH
28540: CALL_OW 69
28544: ST_TO_ADDR
// if not tmp then
28545: LD_VAR 0 2
28549: NOT
28550: IFFALSE 28554
// exit ;
28552: GO 28641
// un := tmp [ rand ( 1 , tmp ) ] ;
28554: LD_ADDR_VAR 0 1
28558: PUSH
28559: LD_VAR 0 2
28563: PUSH
28564: LD_INT 1
28566: PPUSH
28567: LD_VAR 0 2
28571: PPUSH
28572: CALL_OW 12
28576: ARRAY
28577: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28578: LD_VAR 0 1
28582: PPUSH
28583: LD_INT 0
28585: PPUSH
28586: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28590: LD_VAR 0 1
28594: PPUSH
28595: LD_OWVAR 3
28599: PUSH
28600: LD_VAR 0 1
28604: DIFF
28605: PPUSH
28606: LD_VAR 0 1
28610: PPUSH
28611: CALL_OW 74
28615: PPUSH
28616: CALL_OW 115
// wait ( 0 0$20 ) ;
28620: LD_INT 700
28622: PPUSH
28623: CALL_OW 67
// SetSide ( un , your_side ) ;
28627: LD_VAR 0 1
28631: PPUSH
28632: LD_OWVAR 2
28636: PPUSH
28637: CALL_OW 235
// end ;
28641: PPOPN 2
28643: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28644: LD_EXP 68
28648: PUSH
28649: LD_EXP 101
28653: AND
28654: IFFALSE 28760
28656: GO 28658
28658: DISABLE
28659: LD_INT 0
28661: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28662: LD_ADDR_VAR 0 1
28666: PUSH
28667: LD_INT 22
28669: PUSH
28670: LD_OWVAR 2
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 2
28681: PUSH
28682: LD_INT 30
28684: PUSH
28685: LD_INT 0
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 30
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: LIST
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PPUSH
28711: CALL_OW 69
28715: ST_TO_ADDR
// if not depot then
28716: LD_VAR 0 1
28720: NOT
28721: IFFALSE 28725
// exit ;
28723: GO 28760
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28725: LD_VAR 0 1
28729: PUSH
28730: LD_INT 1
28732: ARRAY
28733: PPUSH
28734: CALL_OW 250
28738: PPUSH
28739: LD_VAR 0 1
28743: PUSH
28744: LD_INT 1
28746: ARRAY
28747: PPUSH
28748: CALL_OW 251
28752: PPUSH
28753: LD_INT 70
28755: PPUSH
28756: CALL_OW 495
// end ;
28760: PPOPN 1
28762: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28763: LD_EXP 68
28767: PUSH
28768: LD_EXP 102
28772: AND
28773: IFFALSE 28984
28775: GO 28777
28777: DISABLE
28778: LD_INT 0
28780: PPUSH
28781: PPUSH
28782: PPUSH
28783: PPUSH
28784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28785: LD_ADDR_VAR 0 5
28789: PUSH
28790: LD_INT 22
28792: PUSH
28793: LD_OWVAR 2
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 21
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PPUSH
28816: CALL_OW 69
28820: ST_TO_ADDR
// if not tmp then
28821: LD_VAR 0 5
28825: NOT
28826: IFFALSE 28830
// exit ;
28828: GO 28984
// for i in tmp do
28830: LD_ADDR_VAR 0 1
28834: PUSH
28835: LD_VAR 0 5
28839: PUSH
28840: FOR_IN
28841: IFFALSE 28982
// begin d := rand ( 0 , 5 ) ;
28843: LD_ADDR_VAR 0 4
28847: PUSH
28848: LD_INT 0
28850: PPUSH
28851: LD_INT 5
28853: PPUSH
28854: CALL_OW 12
28858: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28859: LD_ADDR_VAR 0 2
28863: PUSH
28864: LD_VAR 0 1
28868: PPUSH
28869: CALL_OW 250
28873: PPUSH
28874: LD_VAR 0 4
28878: PPUSH
28879: LD_INT 3
28881: PPUSH
28882: LD_INT 12
28884: PPUSH
28885: CALL_OW 12
28889: PPUSH
28890: CALL_OW 272
28894: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28895: LD_ADDR_VAR 0 3
28899: PUSH
28900: LD_VAR 0 1
28904: PPUSH
28905: CALL_OW 251
28909: PPUSH
28910: LD_VAR 0 4
28914: PPUSH
28915: LD_INT 3
28917: PPUSH
28918: LD_INT 12
28920: PPUSH
28921: CALL_OW 12
28925: PPUSH
28926: CALL_OW 273
28930: ST_TO_ADDR
// if ValidHex ( x , y ) then
28931: LD_VAR 0 2
28935: PPUSH
28936: LD_VAR 0 3
28940: PPUSH
28941: CALL_OW 488
28945: IFFALSE 28980
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28947: LD_VAR 0 1
28951: PPUSH
28952: LD_VAR 0 2
28956: PPUSH
28957: LD_VAR 0 3
28961: PPUSH
28962: LD_INT 3
28964: PPUSH
28965: LD_INT 6
28967: PPUSH
28968: CALL_OW 12
28972: PPUSH
28973: LD_INT 1
28975: PPUSH
28976: CALL_OW 483
// end ;
28980: GO 28840
28982: POP
28983: POP
// end ;
28984: PPOPN 5
28986: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28987: LD_EXP 68
28991: PUSH
28992: LD_EXP 103
28996: AND
28997: IFFALSE 29091
28999: GO 29001
29001: DISABLE
29002: LD_INT 0
29004: PPUSH
29005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29006: LD_ADDR_VAR 0 2
29010: PUSH
29011: LD_INT 22
29013: PUSH
29014: LD_OWVAR 2
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 32
29025: PUSH
29026: LD_INT 1
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 21
29035: PUSH
29036: LD_INT 2
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: LIST
29047: PPUSH
29048: CALL_OW 69
29052: ST_TO_ADDR
// if not tmp then
29053: LD_VAR 0 2
29057: NOT
29058: IFFALSE 29062
// exit ;
29060: GO 29091
// for i in tmp do
29062: LD_ADDR_VAR 0 1
29066: PUSH
29067: LD_VAR 0 2
29071: PUSH
29072: FOR_IN
29073: IFFALSE 29089
// SetFuel ( i , 0 ) ;
29075: LD_VAR 0 1
29079: PPUSH
29080: LD_INT 0
29082: PPUSH
29083: CALL_OW 240
29087: GO 29072
29089: POP
29090: POP
// end ;
29091: PPOPN 2
29093: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29094: LD_EXP 68
29098: PUSH
29099: LD_EXP 104
29103: AND
29104: IFFALSE 29170
29106: GO 29108
29108: DISABLE
29109: LD_INT 0
29111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29112: LD_ADDR_VAR 0 1
29116: PUSH
29117: LD_INT 22
29119: PUSH
29120: LD_OWVAR 2
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 30
29131: PUSH
29132: LD_INT 29
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PPUSH
29143: CALL_OW 69
29147: ST_TO_ADDR
// if not tmp then
29148: LD_VAR 0 1
29152: NOT
29153: IFFALSE 29157
// exit ;
29155: GO 29170
// DestroyUnit ( tmp [ 1 ] ) ;
29157: LD_VAR 0 1
29161: PUSH
29162: LD_INT 1
29164: ARRAY
29165: PPUSH
29166: CALL_OW 65
// end ;
29170: PPOPN 1
29172: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29173: LD_EXP 68
29177: PUSH
29178: LD_EXP 106
29182: AND
29183: IFFALSE 29312
29185: GO 29187
29187: DISABLE
29188: LD_INT 0
29190: PPUSH
// begin uc_side := 0 ;
29191: LD_ADDR_OWVAR 20
29195: PUSH
29196: LD_INT 0
29198: ST_TO_ADDR
// uc_nation := nation_arabian ;
29199: LD_ADDR_OWVAR 21
29203: PUSH
29204: LD_INT 2
29206: ST_TO_ADDR
// hc_gallery :=  ;
29207: LD_ADDR_OWVAR 33
29211: PUSH
29212: LD_STRING 
29214: ST_TO_ADDR
// hc_name :=  ;
29215: LD_ADDR_OWVAR 26
29219: PUSH
29220: LD_STRING 
29222: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29223: LD_INT 1
29225: PPUSH
29226: LD_INT 11
29228: PPUSH
29229: LD_INT 10
29231: PPUSH
29232: CALL_OW 380
// un := CreateHuman ;
29236: LD_ADDR_VAR 0 1
29240: PUSH
29241: CALL_OW 44
29245: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29246: LD_VAR 0 1
29250: PPUSH
29251: LD_INT 1
29253: PPUSH
29254: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29258: LD_INT 35
29260: PPUSH
29261: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29265: LD_VAR 0 1
29269: PPUSH
29270: LD_INT 22
29272: PUSH
29273: LD_OWVAR 2
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PPUSH
29282: CALL_OW 69
29286: PPUSH
29287: LD_VAR 0 1
29291: PPUSH
29292: CALL_OW 74
29296: PPUSH
29297: CALL_OW 115
// until IsDead ( un ) ;
29301: LD_VAR 0 1
29305: PPUSH
29306: CALL_OW 301
29310: IFFALSE 29258
// end ;
29312: PPOPN 1
29314: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29315: LD_EXP 68
29319: PUSH
29320: LD_EXP 108
29324: AND
29325: IFFALSE 29337
29327: GO 29329
29329: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29330: LD_STRING earthquake(getX(game), 0, 32)
29332: PPUSH
29333: CALL_OW 559
29337: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29338: LD_EXP 68
29342: PUSH
29343: LD_EXP 109
29347: AND
29348: IFFALSE 29439
29350: GO 29352
29352: DISABLE
29353: LD_INT 0
29355: PPUSH
// begin enable ;
29356: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29357: LD_ADDR_VAR 0 1
29361: PUSH
29362: LD_INT 22
29364: PUSH
29365: LD_OWVAR 2
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 21
29376: PUSH
29377: LD_INT 2
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 33
29386: PUSH
29387: LD_INT 3
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: LIST
29398: PPUSH
29399: CALL_OW 69
29403: ST_TO_ADDR
// if not tmp then
29404: LD_VAR 0 1
29408: NOT
29409: IFFALSE 29413
// exit ;
29411: GO 29439
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29413: LD_VAR 0 1
29417: PUSH
29418: LD_INT 1
29420: PPUSH
29421: LD_VAR 0 1
29425: PPUSH
29426: CALL_OW 12
29430: ARRAY
29431: PPUSH
29432: LD_INT 1
29434: PPUSH
29435: CALL_OW 234
// end ;
29439: PPOPN 1
29441: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29442: LD_EXP 68
29446: PUSH
29447: LD_EXP 110
29451: AND
29452: IFFALSE 29593
29454: GO 29456
29456: DISABLE
29457: LD_INT 0
29459: PPUSH
29460: PPUSH
29461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29462: LD_ADDR_VAR 0 3
29466: PUSH
29467: LD_INT 22
29469: PUSH
29470: LD_OWVAR 2
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 25
29481: PUSH
29482: LD_INT 1
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PPUSH
29493: CALL_OW 69
29497: ST_TO_ADDR
// if not tmp then
29498: LD_VAR 0 3
29502: NOT
29503: IFFALSE 29507
// exit ;
29505: GO 29593
// un := tmp [ rand ( 1 , tmp ) ] ;
29507: LD_ADDR_VAR 0 2
29511: PUSH
29512: LD_VAR 0 3
29516: PUSH
29517: LD_INT 1
29519: PPUSH
29520: LD_VAR 0 3
29524: PPUSH
29525: CALL_OW 12
29529: ARRAY
29530: ST_TO_ADDR
// if Crawls ( un ) then
29531: LD_VAR 0 2
29535: PPUSH
29536: CALL_OW 318
29540: IFFALSE 29551
// ComWalk ( un ) ;
29542: LD_VAR 0 2
29546: PPUSH
29547: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29551: LD_VAR 0 2
29555: PPUSH
29556: LD_INT 9
29558: PPUSH
29559: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29563: LD_INT 28
29565: PPUSH
29566: LD_OWVAR 2
29570: PPUSH
29571: LD_INT 2
29573: PPUSH
29574: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29578: LD_INT 29
29580: PPUSH
29581: LD_OWVAR 2
29585: PPUSH
29586: LD_INT 2
29588: PPUSH
29589: CALL_OW 322
// end ;
29593: PPOPN 3
29595: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29596: LD_EXP 68
29600: PUSH
29601: LD_EXP 111
29605: AND
29606: IFFALSE 29717
29608: GO 29610
29610: DISABLE
29611: LD_INT 0
29613: PPUSH
29614: PPUSH
29615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29616: LD_ADDR_VAR 0 3
29620: PUSH
29621: LD_INT 22
29623: PUSH
29624: LD_OWVAR 2
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 25
29635: PUSH
29636: LD_INT 1
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PPUSH
29647: CALL_OW 69
29651: ST_TO_ADDR
// if not tmp then
29652: LD_VAR 0 3
29656: NOT
29657: IFFALSE 29661
// exit ;
29659: GO 29717
// un := tmp [ rand ( 1 , tmp ) ] ;
29661: LD_ADDR_VAR 0 2
29665: PUSH
29666: LD_VAR 0 3
29670: PUSH
29671: LD_INT 1
29673: PPUSH
29674: LD_VAR 0 3
29678: PPUSH
29679: CALL_OW 12
29683: ARRAY
29684: ST_TO_ADDR
// if Crawls ( un ) then
29685: LD_VAR 0 2
29689: PPUSH
29690: CALL_OW 318
29694: IFFALSE 29705
// ComWalk ( un ) ;
29696: LD_VAR 0 2
29700: PPUSH
29701: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29705: LD_VAR 0 2
29709: PPUSH
29710: LD_INT 8
29712: PPUSH
29713: CALL_OW 336
// end ;
29717: PPOPN 3
29719: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29720: LD_EXP 68
29724: PUSH
29725: LD_EXP 112
29729: AND
29730: IFFALSE 29874
29732: GO 29734
29734: DISABLE
29735: LD_INT 0
29737: PPUSH
29738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29739: LD_ADDR_VAR 0 2
29743: PUSH
29744: LD_INT 22
29746: PUSH
29747: LD_OWVAR 2
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 21
29758: PUSH
29759: LD_INT 2
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 2
29768: PUSH
29769: LD_INT 34
29771: PUSH
29772: LD_INT 12
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 34
29781: PUSH
29782: LD_INT 51
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 34
29791: PUSH
29792: LD_INT 32
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: LIST
29809: PPUSH
29810: CALL_OW 69
29814: ST_TO_ADDR
// if not tmp then
29815: LD_VAR 0 2
29819: NOT
29820: IFFALSE 29824
// exit ;
29822: GO 29874
// for i in tmp do
29824: LD_ADDR_VAR 0 1
29828: PUSH
29829: LD_VAR 0 2
29833: PUSH
29834: FOR_IN
29835: IFFALSE 29872
// if GetCargo ( i , mat_artifact ) = 0 then
29837: LD_VAR 0 1
29841: PPUSH
29842: LD_INT 4
29844: PPUSH
29845: CALL_OW 289
29849: PUSH
29850: LD_INT 0
29852: EQUAL
29853: IFFALSE 29870
// SetCargo ( i , mat_siberit , 100 ) ;
29855: LD_VAR 0 1
29859: PPUSH
29860: LD_INT 3
29862: PPUSH
29863: LD_INT 100
29865: PPUSH
29866: CALL_OW 290
29870: GO 29834
29872: POP
29873: POP
// end ;
29874: PPOPN 2
29876: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29877: LD_EXP 68
29881: PUSH
29882: LD_EXP 113
29886: AND
29887: IFFALSE 30070
29889: GO 29891
29891: DISABLE
29892: LD_INT 0
29894: PPUSH
29895: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29896: LD_ADDR_VAR 0 2
29900: PUSH
29901: LD_INT 22
29903: PUSH
29904: LD_OWVAR 2
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PPUSH
29913: CALL_OW 69
29917: ST_TO_ADDR
// if not tmp then
29918: LD_VAR 0 2
29922: NOT
29923: IFFALSE 29927
// exit ;
29925: GO 30070
// for i := 1 to 2 do
29927: LD_ADDR_VAR 0 1
29931: PUSH
29932: DOUBLE
29933: LD_INT 1
29935: DEC
29936: ST_TO_ADDR
29937: LD_INT 2
29939: PUSH
29940: FOR_TO
29941: IFFALSE 30068
// begin uc_side := your_side ;
29943: LD_ADDR_OWVAR 20
29947: PUSH
29948: LD_OWVAR 2
29952: ST_TO_ADDR
// uc_nation := nation_american ;
29953: LD_ADDR_OWVAR 21
29957: PUSH
29958: LD_INT 1
29960: ST_TO_ADDR
// vc_chassis := us_morphling ;
29961: LD_ADDR_OWVAR 37
29965: PUSH
29966: LD_INT 5
29968: ST_TO_ADDR
// vc_engine := engine_siberite ;
29969: LD_ADDR_OWVAR 39
29973: PUSH
29974: LD_INT 3
29976: ST_TO_ADDR
// vc_control := control_computer ;
29977: LD_ADDR_OWVAR 38
29981: PUSH
29982: LD_INT 3
29984: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29985: LD_ADDR_OWVAR 40
29989: PUSH
29990: LD_INT 10
29992: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29993: LD_VAR 0 2
29997: PUSH
29998: LD_INT 1
30000: ARRAY
30001: PPUSH
30002: CALL_OW 310
30006: NOT
30007: IFFALSE 30054
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30009: CALL_OW 45
30013: PPUSH
30014: LD_VAR 0 2
30018: PUSH
30019: LD_INT 1
30021: ARRAY
30022: PPUSH
30023: CALL_OW 250
30027: PPUSH
30028: LD_VAR 0 2
30032: PUSH
30033: LD_INT 1
30035: ARRAY
30036: PPUSH
30037: CALL_OW 251
30041: PPUSH
30042: LD_INT 12
30044: PPUSH
30045: LD_INT 1
30047: PPUSH
30048: CALL_OW 50
30052: GO 30066
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30054: CALL_OW 45
30058: PPUSH
30059: LD_INT 1
30061: PPUSH
30062: CALL_OW 51
// end ;
30066: GO 29940
30068: POP
30069: POP
// end ;
30070: PPOPN 2
30072: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30073: LD_EXP 68
30077: PUSH
30078: LD_EXP 114
30082: AND
30083: IFFALSE 30305
30085: GO 30087
30087: DISABLE
30088: LD_INT 0
30090: PPUSH
30091: PPUSH
30092: PPUSH
30093: PPUSH
30094: PPUSH
30095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30096: LD_ADDR_VAR 0 6
30100: PUSH
30101: LD_INT 22
30103: PUSH
30104: LD_OWVAR 2
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 21
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 3
30125: PUSH
30126: LD_INT 23
30128: PUSH
30129: LD_INT 0
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: LIST
30144: PPUSH
30145: CALL_OW 69
30149: ST_TO_ADDR
// if not tmp then
30150: LD_VAR 0 6
30154: NOT
30155: IFFALSE 30159
// exit ;
30157: GO 30305
// s1 := rand ( 1 , 4 ) ;
30159: LD_ADDR_VAR 0 2
30163: PUSH
30164: LD_INT 1
30166: PPUSH
30167: LD_INT 4
30169: PPUSH
30170: CALL_OW 12
30174: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30175: LD_ADDR_VAR 0 4
30179: PUSH
30180: LD_VAR 0 6
30184: PUSH
30185: LD_INT 1
30187: ARRAY
30188: PPUSH
30189: LD_VAR 0 2
30193: PPUSH
30194: CALL_OW 259
30198: ST_TO_ADDR
// if s1 = 1 then
30199: LD_VAR 0 2
30203: PUSH
30204: LD_INT 1
30206: EQUAL
30207: IFFALSE 30227
// s2 := rand ( 2 , 4 ) else
30209: LD_ADDR_VAR 0 3
30213: PUSH
30214: LD_INT 2
30216: PPUSH
30217: LD_INT 4
30219: PPUSH
30220: CALL_OW 12
30224: ST_TO_ADDR
30225: GO 30235
// s2 := 1 ;
30227: LD_ADDR_VAR 0 3
30231: PUSH
30232: LD_INT 1
30234: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30235: LD_ADDR_VAR 0 5
30239: PUSH
30240: LD_VAR 0 6
30244: PUSH
30245: LD_INT 1
30247: ARRAY
30248: PPUSH
30249: LD_VAR 0 3
30253: PPUSH
30254: CALL_OW 259
30258: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30259: LD_VAR 0 6
30263: PUSH
30264: LD_INT 1
30266: ARRAY
30267: PPUSH
30268: LD_VAR 0 2
30272: PPUSH
30273: LD_VAR 0 5
30277: PPUSH
30278: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30282: LD_VAR 0 6
30286: PUSH
30287: LD_INT 1
30289: ARRAY
30290: PPUSH
30291: LD_VAR 0 3
30295: PPUSH
30296: LD_VAR 0 4
30300: PPUSH
30301: CALL_OW 237
// end ;
30305: PPOPN 6
30307: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30308: LD_EXP 68
30312: PUSH
30313: LD_EXP 115
30317: AND
30318: IFFALSE 30397
30320: GO 30322
30322: DISABLE
30323: LD_INT 0
30325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30326: LD_ADDR_VAR 0 1
30330: PUSH
30331: LD_INT 22
30333: PUSH
30334: LD_OWVAR 2
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 30
30345: PUSH
30346: LD_INT 3
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PPUSH
30357: CALL_OW 69
30361: ST_TO_ADDR
// if not tmp then
30362: LD_VAR 0 1
30366: NOT
30367: IFFALSE 30371
// exit ;
30369: GO 30397
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30371: LD_VAR 0 1
30375: PUSH
30376: LD_INT 1
30378: PPUSH
30379: LD_VAR 0 1
30383: PPUSH
30384: CALL_OW 12
30388: ARRAY
30389: PPUSH
30390: LD_INT 1
30392: PPUSH
30393: CALL_OW 234
// end ;
30397: PPOPN 1
30399: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30400: LD_EXP 68
30404: PUSH
30405: LD_EXP 116
30409: AND
30410: IFFALSE 30522
30412: GO 30414
30414: DISABLE
30415: LD_INT 0
30417: PPUSH
30418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30419: LD_ADDR_VAR 0 2
30423: PUSH
30424: LD_INT 22
30426: PUSH
30427: LD_OWVAR 2
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 2
30438: PUSH
30439: LD_INT 30
30441: PUSH
30442: LD_INT 27
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 30
30451: PUSH
30452: LD_INT 26
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 30
30461: PUSH
30462: LD_INT 28
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PPUSH
30479: CALL_OW 69
30483: ST_TO_ADDR
// if not tmp then
30484: LD_VAR 0 2
30488: NOT
30489: IFFALSE 30493
// exit ;
30491: GO 30522
// for i in tmp do
30493: LD_ADDR_VAR 0 1
30497: PUSH
30498: LD_VAR 0 2
30502: PUSH
30503: FOR_IN
30504: IFFALSE 30520
// SetLives ( i , 1 ) ;
30506: LD_VAR 0 1
30510: PPUSH
30511: LD_INT 1
30513: PPUSH
30514: CALL_OW 234
30518: GO 30503
30520: POP
30521: POP
// end ;
30522: PPOPN 2
30524: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30525: LD_EXP 68
30529: PUSH
30530: LD_EXP 117
30534: AND
30535: IFFALSE 30809
30537: GO 30539
30539: DISABLE
30540: LD_INT 0
30542: PPUSH
30543: PPUSH
30544: PPUSH
// begin i := rand ( 1 , 7 ) ;
30545: LD_ADDR_VAR 0 1
30549: PUSH
30550: LD_INT 1
30552: PPUSH
30553: LD_INT 7
30555: PPUSH
30556: CALL_OW 12
30560: ST_TO_ADDR
// case i of 1 :
30561: LD_VAR 0 1
30565: PUSH
30566: LD_INT 1
30568: DOUBLE
30569: EQUAL
30570: IFTRUE 30574
30572: GO 30584
30574: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30575: LD_STRING earthquake(getX(game), 0, 32)
30577: PPUSH
30578: CALL_OW 559
30582: GO 30809
30584: LD_INT 2
30586: DOUBLE
30587: EQUAL
30588: IFTRUE 30592
30590: GO 30606
30592: POP
// begin ToLua ( displayStucuk(); ) ;
30593: LD_STRING displayStucuk();
30595: PPUSH
30596: CALL_OW 559
// ResetFog ;
30600: CALL_OW 335
// end ; 3 :
30604: GO 30809
30606: LD_INT 3
30608: DOUBLE
30609: EQUAL
30610: IFTRUE 30614
30612: GO 30718
30614: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30615: LD_ADDR_VAR 0 2
30619: PUSH
30620: LD_INT 22
30622: PUSH
30623: LD_OWVAR 2
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 25
30634: PUSH
30635: LD_INT 1
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PPUSH
30646: CALL_OW 69
30650: ST_TO_ADDR
// if not tmp then
30651: LD_VAR 0 2
30655: NOT
30656: IFFALSE 30660
// exit ;
30658: GO 30809
// un := tmp [ rand ( 1 , tmp ) ] ;
30660: LD_ADDR_VAR 0 3
30664: PUSH
30665: LD_VAR 0 2
30669: PUSH
30670: LD_INT 1
30672: PPUSH
30673: LD_VAR 0 2
30677: PPUSH
30678: CALL_OW 12
30682: ARRAY
30683: ST_TO_ADDR
// if Crawls ( un ) then
30684: LD_VAR 0 3
30688: PPUSH
30689: CALL_OW 318
30693: IFFALSE 30704
// ComWalk ( un ) ;
30695: LD_VAR 0 3
30699: PPUSH
30700: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30704: LD_VAR 0 3
30708: PPUSH
30709: LD_INT 8
30711: PPUSH
30712: CALL_OW 336
// end ; 4 :
30716: GO 30809
30718: LD_INT 4
30720: DOUBLE
30721: EQUAL
30722: IFTRUE 30726
30724: GO 30787
30726: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30727: LD_ADDR_VAR 0 2
30731: PUSH
30732: LD_INT 22
30734: PUSH
30735: LD_OWVAR 2
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 30
30746: PUSH
30747: LD_INT 29
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PPUSH
30758: CALL_OW 69
30762: ST_TO_ADDR
// if not tmp then
30763: LD_VAR 0 2
30767: NOT
30768: IFFALSE 30772
// exit ;
30770: GO 30809
// DestroyUnit ( tmp [ 1 ] ) ;
30772: LD_VAR 0 2
30776: PUSH
30777: LD_INT 1
30779: ARRAY
30780: PPUSH
30781: CALL_OW 65
// end ; 5 .. 7 :
30785: GO 30809
30787: LD_INT 5
30789: DOUBLE
30790: GREATEREQUAL
30791: IFFALSE 30799
30793: LD_INT 7
30795: DOUBLE
30796: LESSEQUAL
30797: IFTRUE 30801
30799: GO 30808
30801: POP
// StreamSibBomb ; end ;
30802: CALL 27059 0 0
30806: GO 30809
30808: POP
// end ;
30809: PPOPN 3
30811: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30812: LD_EXP 68
30816: PUSH
30817: LD_EXP 118
30821: AND
30822: IFFALSE 30978
30824: GO 30826
30826: DISABLE
30827: LD_INT 0
30829: PPUSH
30830: PPUSH
30831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30832: LD_ADDR_VAR 0 2
30836: PUSH
30837: LD_INT 81
30839: PUSH
30840: LD_OWVAR 2
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 2
30851: PUSH
30852: LD_INT 21
30854: PUSH
30855: LD_INT 1
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 21
30864: PUSH
30865: LD_INT 2
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: LIST
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PPUSH
30881: CALL_OW 69
30885: ST_TO_ADDR
// if not tmp then
30886: LD_VAR 0 2
30890: NOT
30891: IFFALSE 30895
// exit ;
30893: GO 30978
// p := 0 ;
30895: LD_ADDR_VAR 0 3
30899: PUSH
30900: LD_INT 0
30902: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30903: LD_INT 35
30905: PPUSH
30906: CALL_OW 67
// p := p + 1 ;
30910: LD_ADDR_VAR 0 3
30914: PUSH
30915: LD_VAR 0 3
30919: PUSH
30920: LD_INT 1
30922: PLUS
30923: ST_TO_ADDR
// for i in tmp do
30924: LD_ADDR_VAR 0 1
30928: PUSH
30929: LD_VAR 0 2
30933: PUSH
30934: FOR_IN
30935: IFFALSE 30966
// if GetLives ( i ) < 1000 then
30937: LD_VAR 0 1
30941: PPUSH
30942: CALL_OW 256
30946: PUSH
30947: LD_INT 1000
30949: LESS
30950: IFFALSE 30964
// SetLives ( i , 1000 ) ;
30952: LD_VAR 0 1
30956: PPUSH
30957: LD_INT 1000
30959: PPUSH
30960: CALL_OW 234
30964: GO 30934
30966: POP
30967: POP
// until p > 20 ;
30968: LD_VAR 0 3
30972: PUSH
30973: LD_INT 20
30975: GREATER
30976: IFFALSE 30903
// end ;
30978: PPOPN 3
30980: END
// every 0 0$1 trigger StreamModeActive and sTime do
30981: LD_EXP 68
30985: PUSH
30986: LD_EXP 119
30990: AND
30991: IFFALSE 31026
30993: GO 30995
30995: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30996: LD_INT 28
30998: PPUSH
30999: LD_OWVAR 2
31003: PPUSH
31004: LD_INT 2
31006: PPUSH
31007: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31011: LD_INT 30
31013: PPUSH
31014: LD_OWVAR 2
31018: PPUSH
31019: LD_INT 2
31021: PPUSH
31022: CALL_OW 322
// end ;
31026: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31027: LD_EXP 68
31031: PUSH
31032: LD_EXP 120
31036: AND
31037: IFFALSE 31158
31039: GO 31041
31041: DISABLE
31042: LD_INT 0
31044: PPUSH
31045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31046: LD_ADDR_VAR 0 2
31050: PUSH
31051: LD_INT 22
31053: PUSH
31054: LD_OWVAR 2
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 21
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 3
31075: PUSH
31076: LD_INT 23
31078: PUSH
31079: LD_INT 0
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: LIST
31094: PPUSH
31095: CALL_OW 69
31099: ST_TO_ADDR
// if not tmp then
31100: LD_VAR 0 2
31104: NOT
31105: IFFALSE 31109
// exit ;
31107: GO 31158
// for i in tmp do
31109: LD_ADDR_VAR 0 1
31113: PUSH
31114: LD_VAR 0 2
31118: PUSH
31119: FOR_IN
31120: IFFALSE 31156
// begin if Crawls ( i ) then
31122: LD_VAR 0 1
31126: PPUSH
31127: CALL_OW 318
31131: IFFALSE 31142
// ComWalk ( i ) ;
31133: LD_VAR 0 1
31137: PPUSH
31138: CALL_OW 138
// SetClass ( i , 2 ) ;
31142: LD_VAR 0 1
31146: PPUSH
31147: LD_INT 2
31149: PPUSH
31150: CALL_OW 336
// end ;
31154: GO 31119
31156: POP
31157: POP
// end ;
31158: PPOPN 2
31160: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31161: LD_EXP 68
31165: PUSH
31166: LD_EXP 121
31170: AND
31171: IFFALSE 31452
31173: GO 31175
31175: DISABLE
31176: LD_INT 0
31178: PPUSH
31179: PPUSH
31180: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31181: LD_OWVAR 2
31185: PPUSH
31186: LD_INT 9
31188: PPUSH
31189: LD_INT 1
31191: PPUSH
31192: LD_INT 1
31194: PPUSH
31195: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31199: LD_INT 9
31201: PPUSH
31202: LD_OWVAR 2
31206: PPUSH
31207: CALL_OW 343
// uc_side := 9 ;
31211: LD_ADDR_OWVAR 20
31215: PUSH
31216: LD_INT 9
31218: ST_TO_ADDR
// uc_nation := 2 ;
31219: LD_ADDR_OWVAR 21
31223: PUSH
31224: LD_INT 2
31226: ST_TO_ADDR
// hc_name := Dark Warrior ;
31227: LD_ADDR_OWVAR 26
31231: PUSH
31232: LD_STRING Dark Warrior
31234: ST_TO_ADDR
// hc_gallery :=  ;
31235: LD_ADDR_OWVAR 33
31239: PUSH
31240: LD_STRING 
31242: ST_TO_ADDR
// hc_noskilllimit := true ;
31243: LD_ADDR_OWVAR 76
31247: PUSH
31248: LD_INT 1
31250: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31251: LD_ADDR_OWVAR 31
31255: PUSH
31256: LD_INT 30
31258: PUSH
31259: LD_INT 30
31261: PUSH
31262: LD_INT 30
31264: PUSH
31265: LD_INT 30
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: ST_TO_ADDR
// un := CreateHuman ;
31274: LD_ADDR_VAR 0 3
31278: PUSH
31279: CALL_OW 44
31283: ST_TO_ADDR
// hc_noskilllimit := false ;
31284: LD_ADDR_OWVAR 76
31288: PUSH
31289: LD_INT 0
31291: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31292: LD_VAR 0 3
31296: PPUSH
31297: LD_INT 1
31299: PPUSH
31300: CALL_OW 51
// p := 0 ;
31304: LD_ADDR_VAR 0 2
31308: PUSH
31309: LD_INT 0
31311: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31312: LD_INT 35
31314: PPUSH
31315: CALL_OW 67
// p := p + 1 ;
31319: LD_ADDR_VAR 0 2
31323: PUSH
31324: LD_VAR 0 2
31328: PUSH
31329: LD_INT 1
31331: PLUS
31332: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31333: LD_VAR 0 3
31337: PPUSH
31338: CALL_OW 256
31342: PUSH
31343: LD_INT 1000
31345: LESS
31346: IFFALSE 31360
// SetLives ( un , 1000 ) ;
31348: LD_VAR 0 3
31352: PPUSH
31353: LD_INT 1000
31355: PPUSH
31356: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31360: LD_VAR 0 3
31364: PPUSH
31365: LD_INT 81
31367: PUSH
31368: LD_OWVAR 2
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 91
31379: PUSH
31380: LD_VAR 0 3
31384: PUSH
31385: LD_INT 30
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: LIST
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PPUSH
31397: CALL_OW 69
31401: PPUSH
31402: LD_VAR 0 3
31406: PPUSH
31407: CALL_OW 74
31411: PPUSH
31412: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
31416: LD_VAR 0 2
31420: PUSH
31421: LD_INT 60
31423: GREATER
31424: PUSH
31425: LD_VAR 0 3
31429: PPUSH
31430: CALL_OW 301
31434: OR
31435: IFFALSE 31312
// if un then
31437: LD_VAR 0 3
31441: IFFALSE 31452
// RemoveUnit ( un ) ;
31443: LD_VAR 0 3
31447: PPUSH
31448: CALL_OW 64
// end ;
31452: PPOPN 3
31454: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31455: LD_INT 0
31457: PPUSH
// case cmd of 301 :
31458: LD_VAR 0 1
31462: PUSH
31463: LD_INT 301
31465: DOUBLE
31466: EQUAL
31467: IFTRUE 31471
31469: GO 31503
31471: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31472: LD_VAR 0 6
31476: PPUSH
31477: LD_VAR 0 7
31481: PPUSH
31482: LD_VAR 0 8
31486: PPUSH
31487: LD_VAR 0 4
31491: PPUSH
31492: LD_VAR 0 5
31496: PPUSH
31497: CALL 32704 0 5
31501: GO 31624
31503: LD_INT 302
31505: DOUBLE
31506: EQUAL
31507: IFTRUE 31511
31509: GO 31548
31511: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31512: LD_VAR 0 6
31516: PPUSH
31517: LD_VAR 0 7
31521: PPUSH
31522: LD_VAR 0 8
31526: PPUSH
31527: LD_VAR 0 9
31531: PPUSH
31532: LD_VAR 0 4
31536: PPUSH
31537: LD_VAR 0 5
31541: PPUSH
31542: CALL 32795 0 6
31546: GO 31624
31548: LD_INT 303
31550: DOUBLE
31551: EQUAL
31552: IFTRUE 31556
31554: GO 31593
31556: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31557: LD_VAR 0 6
31561: PPUSH
31562: LD_VAR 0 7
31566: PPUSH
31567: LD_VAR 0 8
31571: PPUSH
31572: LD_VAR 0 9
31576: PPUSH
31577: LD_VAR 0 4
31581: PPUSH
31582: LD_VAR 0 5
31586: PPUSH
31587: CALL 31629 0 6
31591: GO 31624
31593: LD_INT 304
31595: DOUBLE
31596: EQUAL
31597: IFTRUE 31601
31599: GO 31623
31601: POP
// hHackTeleport ( unit , x , y ) ; end ;
31602: LD_VAR 0 2
31606: PPUSH
31607: LD_VAR 0 4
31611: PPUSH
31612: LD_VAR 0 5
31616: PPUSH
31617: CALL 33388 0 3
31621: GO 31624
31623: POP
// end ;
31624: LD_VAR 0 12
31628: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31629: LD_INT 0
31631: PPUSH
31632: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31633: LD_VAR 0 1
31637: PUSH
31638: LD_INT 1
31640: LESS
31641: PUSH
31642: LD_VAR 0 1
31646: PUSH
31647: LD_INT 3
31649: GREATER
31650: OR
31651: PUSH
31652: LD_VAR 0 5
31656: PPUSH
31657: LD_VAR 0 6
31661: PPUSH
31662: CALL_OW 428
31666: OR
31667: IFFALSE 31671
// exit ;
31669: GO 32391
// uc_side := your_side ;
31671: LD_ADDR_OWVAR 20
31675: PUSH
31676: LD_OWVAR 2
31680: ST_TO_ADDR
// uc_nation := nation ;
31681: LD_ADDR_OWVAR 21
31685: PUSH
31686: LD_VAR 0 1
31690: ST_TO_ADDR
// bc_level = 1 ;
31691: LD_ADDR_OWVAR 43
31695: PUSH
31696: LD_INT 1
31698: ST_TO_ADDR
// case btype of 1 :
31699: LD_VAR 0 2
31703: PUSH
31704: LD_INT 1
31706: DOUBLE
31707: EQUAL
31708: IFTRUE 31712
31710: GO 31723
31712: POP
// bc_type := b_depot ; 2 :
31713: LD_ADDR_OWVAR 42
31717: PUSH
31718: LD_INT 0
31720: ST_TO_ADDR
31721: GO 32335
31723: LD_INT 2
31725: DOUBLE
31726: EQUAL
31727: IFTRUE 31731
31729: GO 31742
31731: POP
// bc_type := b_warehouse ; 3 :
31732: LD_ADDR_OWVAR 42
31736: PUSH
31737: LD_INT 1
31739: ST_TO_ADDR
31740: GO 32335
31742: LD_INT 3
31744: DOUBLE
31745: EQUAL
31746: IFTRUE 31750
31748: GO 31761
31750: POP
// bc_type := b_lab ; 4 .. 9 :
31751: LD_ADDR_OWVAR 42
31755: PUSH
31756: LD_INT 6
31758: ST_TO_ADDR
31759: GO 32335
31761: LD_INT 4
31763: DOUBLE
31764: GREATEREQUAL
31765: IFFALSE 31773
31767: LD_INT 9
31769: DOUBLE
31770: LESSEQUAL
31771: IFTRUE 31775
31773: GO 31827
31775: POP
// begin bc_type := b_lab_half ;
31776: LD_ADDR_OWVAR 42
31780: PUSH
31781: LD_INT 7
31783: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31784: LD_ADDR_OWVAR 44
31788: PUSH
31789: LD_INT 10
31791: PUSH
31792: LD_INT 11
31794: PUSH
31795: LD_INT 12
31797: PUSH
31798: LD_INT 15
31800: PUSH
31801: LD_INT 14
31803: PUSH
31804: LD_INT 13
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: PUSH
31815: LD_VAR 0 2
31819: PUSH
31820: LD_INT 3
31822: MINUS
31823: ARRAY
31824: ST_TO_ADDR
// end ; 10 .. 13 :
31825: GO 32335
31827: LD_INT 10
31829: DOUBLE
31830: GREATEREQUAL
31831: IFFALSE 31839
31833: LD_INT 13
31835: DOUBLE
31836: LESSEQUAL
31837: IFTRUE 31841
31839: GO 31918
31841: POP
// begin bc_type := b_lab_full ;
31842: LD_ADDR_OWVAR 42
31846: PUSH
31847: LD_INT 8
31849: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31850: LD_ADDR_OWVAR 44
31854: PUSH
31855: LD_INT 10
31857: PUSH
31858: LD_INT 12
31860: PUSH
31861: LD_INT 14
31863: PUSH
31864: LD_INT 13
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: PUSH
31873: LD_VAR 0 2
31877: PUSH
31878: LD_INT 9
31880: MINUS
31881: ARRAY
31882: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31883: LD_ADDR_OWVAR 45
31887: PUSH
31888: LD_INT 11
31890: PUSH
31891: LD_INT 15
31893: PUSH
31894: LD_INT 12
31896: PUSH
31897: LD_INT 15
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: PUSH
31906: LD_VAR 0 2
31910: PUSH
31911: LD_INT 9
31913: MINUS
31914: ARRAY
31915: ST_TO_ADDR
// end ; 14 :
31916: GO 32335
31918: LD_INT 14
31920: DOUBLE
31921: EQUAL
31922: IFTRUE 31926
31924: GO 31937
31926: POP
// bc_type := b_workshop ; 15 :
31927: LD_ADDR_OWVAR 42
31931: PUSH
31932: LD_INT 2
31934: ST_TO_ADDR
31935: GO 32335
31937: LD_INT 15
31939: DOUBLE
31940: EQUAL
31941: IFTRUE 31945
31943: GO 31956
31945: POP
// bc_type := b_factory ; 16 :
31946: LD_ADDR_OWVAR 42
31950: PUSH
31951: LD_INT 3
31953: ST_TO_ADDR
31954: GO 32335
31956: LD_INT 16
31958: DOUBLE
31959: EQUAL
31960: IFTRUE 31964
31962: GO 31975
31964: POP
// bc_type := b_ext_gun ; 17 :
31965: LD_ADDR_OWVAR 42
31969: PUSH
31970: LD_INT 17
31972: ST_TO_ADDR
31973: GO 32335
31975: LD_INT 17
31977: DOUBLE
31978: EQUAL
31979: IFTRUE 31983
31981: GO 32011
31983: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31984: LD_ADDR_OWVAR 42
31988: PUSH
31989: LD_INT 19
31991: PUSH
31992: LD_INT 23
31994: PUSH
31995: LD_INT 19
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: LIST
32002: PUSH
32003: LD_VAR 0 1
32007: ARRAY
32008: ST_TO_ADDR
32009: GO 32335
32011: LD_INT 18
32013: DOUBLE
32014: EQUAL
32015: IFTRUE 32019
32017: GO 32030
32019: POP
// bc_type := b_ext_radar ; 19 :
32020: LD_ADDR_OWVAR 42
32024: PUSH
32025: LD_INT 20
32027: ST_TO_ADDR
32028: GO 32335
32030: LD_INT 19
32032: DOUBLE
32033: EQUAL
32034: IFTRUE 32038
32036: GO 32049
32038: POP
// bc_type := b_ext_radio ; 20 :
32039: LD_ADDR_OWVAR 42
32043: PUSH
32044: LD_INT 22
32046: ST_TO_ADDR
32047: GO 32335
32049: LD_INT 20
32051: DOUBLE
32052: EQUAL
32053: IFTRUE 32057
32055: GO 32068
32057: POP
// bc_type := b_ext_siberium ; 21 :
32058: LD_ADDR_OWVAR 42
32062: PUSH
32063: LD_INT 21
32065: ST_TO_ADDR
32066: GO 32335
32068: LD_INT 21
32070: DOUBLE
32071: EQUAL
32072: IFTRUE 32076
32074: GO 32087
32076: POP
// bc_type := b_ext_computer ; 22 :
32077: LD_ADDR_OWVAR 42
32081: PUSH
32082: LD_INT 24
32084: ST_TO_ADDR
32085: GO 32335
32087: LD_INT 22
32089: DOUBLE
32090: EQUAL
32091: IFTRUE 32095
32093: GO 32106
32095: POP
// bc_type := b_ext_track ; 23 :
32096: LD_ADDR_OWVAR 42
32100: PUSH
32101: LD_INT 16
32103: ST_TO_ADDR
32104: GO 32335
32106: LD_INT 23
32108: DOUBLE
32109: EQUAL
32110: IFTRUE 32114
32112: GO 32125
32114: POP
// bc_type := b_ext_laser ; 24 :
32115: LD_ADDR_OWVAR 42
32119: PUSH
32120: LD_INT 25
32122: ST_TO_ADDR
32123: GO 32335
32125: LD_INT 24
32127: DOUBLE
32128: EQUAL
32129: IFTRUE 32133
32131: GO 32144
32133: POP
// bc_type := b_control_tower ; 25 :
32134: LD_ADDR_OWVAR 42
32138: PUSH
32139: LD_INT 36
32141: ST_TO_ADDR
32142: GO 32335
32144: LD_INT 25
32146: DOUBLE
32147: EQUAL
32148: IFTRUE 32152
32150: GO 32163
32152: POP
// bc_type := b_breastwork ; 26 :
32153: LD_ADDR_OWVAR 42
32157: PUSH
32158: LD_INT 31
32160: ST_TO_ADDR
32161: GO 32335
32163: LD_INT 26
32165: DOUBLE
32166: EQUAL
32167: IFTRUE 32171
32169: GO 32182
32171: POP
// bc_type := b_bunker ; 27 :
32172: LD_ADDR_OWVAR 42
32176: PUSH
32177: LD_INT 32
32179: ST_TO_ADDR
32180: GO 32335
32182: LD_INT 27
32184: DOUBLE
32185: EQUAL
32186: IFTRUE 32190
32188: GO 32201
32190: POP
// bc_type := b_turret ; 28 :
32191: LD_ADDR_OWVAR 42
32195: PUSH
32196: LD_INT 33
32198: ST_TO_ADDR
32199: GO 32335
32201: LD_INT 28
32203: DOUBLE
32204: EQUAL
32205: IFTRUE 32209
32207: GO 32220
32209: POP
// bc_type := b_armoury ; 29 :
32210: LD_ADDR_OWVAR 42
32214: PUSH
32215: LD_INT 4
32217: ST_TO_ADDR
32218: GO 32335
32220: LD_INT 29
32222: DOUBLE
32223: EQUAL
32224: IFTRUE 32228
32226: GO 32239
32228: POP
// bc_type := b_barracks ; 30 :
32229: LD_ADDR_OWVAR 42
32233: PUSH
32234: LD_INT 5
32236: ST_TO_ADDR
32237: GO 32335
32239: LD_INT 30
32241: DOUBLE
32242: EQUAL
32243: IFTRUE 32247
32245: GO 32258
32247: POP
// bc_type := b_solar_power ; 31 :
32248: LD_ADDR_OWVAR 42
32252: PUSH
32253: LD_INT 27
32255: ST_TO_ADDR
32256: GO 32335
32258: LD_INT 31
32260: DOUBLE
32261: EQUAL
32262: IFTRUE 32266
32264: GO 32277
32266: POP
// bc_type := b_oil_power ; 32 :
32267: LD_ADDR_OWVAR 42
32271: PUSH
32272: LD_INT 26
32274: ST_TO_ADDR
32275: GO 32335
32277: LD_INT 32
32279: DOUBLE
32280: EQUAL
32281: IFTRUE 32285
32283: GO 32296
32285: POP
// bc_type := b_siberite_power ; 33 :
32286: LD_ADDR_OWVAR 42
32290: PUSH
32291: LD_INT 28
32293: ST_TO_ADDR
32294: GO 32335
32296: LD_INT 33
32298: DOUBLE
32299: EQUAL
32300: IFTRUE 32304
32302: GO 32315
32304: POP
// bc_type := b_oil_mine ; 34 :
32305: LD_ADDR_OWVAR 42
32309: PUSH
32310: LD_INT 29
32312: ST_TO_ADDR
32313: GO 32335
32315: LD_INT 34
32317: DOUBLE
32318: EQUAL
32319: IFTRUE 32323
32321: GO 32334
32323: POP
// bc_type := b_siberite_mine ; end ;
32324: LD_ADDR_OWVAR 42
32328: PUSH
32329: LD_INT 30
32331: ST_TO_ADDR
32332: GO 32335
32334: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32335: LD_ADDR_VAR 0 8
32339: PUSH
32340: LD_VAR 0 5
32344: PPUSH
32345: LD_VAR 0 6
32349: PPUSH
32350: LD_VAR 0 3
32354: PPUSH
32355: CALL_OW 47
32359: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32360: LD_OWVAR 42
32364: PUSH
32365: LD_INT 32
32367: PUSH
32368: LD_INT 33
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: IN
32375: IFFALSE 32391
// PlaceWeaponTurret ( b , weapon ) ;
32377: LD_VAR 0 8
32381: PPUSH
32382: LD_VAR 0 4
32386: PPUSH
32387: CALL_OW 431
// end ;
32391: LD_VAR 0 7
32395: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32396: LD_INT 0
32398: PPUSH
32399: PPUSH
32400: PPUSH
32401: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32402: LD_ADDR_VAR 0 4
32406: PUSH
32407: LD_INT 22
32409: PUSH
32410: LD_OWVAR 2
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 2
32421: PUSH
32422: LD_INT 30
32424: PUSH
32425: LD_INT 0
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 30
32434: PUSH
32435: LD_INT 1
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: LIST
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PPUSH
32451: CALL_OW 69
32455: ST_TO_ADDR
// if not tmp then
32456: LD_VAR 0 4
32460: NOT
32461: IFFALSE 32465
// exit ;
32463: GO 32524
// for i in tmp do
32465: LD_ADDR_VAR 0 2
32469: PUSH
32470: LD_VAR 0 4
32474: PUSH
32475: FOR_IN
32476: IFFALSE 32522
// for j = 1 to 3 do
32478: LD_ADDR_VAR 0 3
32482: PUSH
32483: DOUBLE
32484: LD_INT 1
32486: DEC
32487: ST_TO_ADDR
32488: LD_INT 3
32490: PUSH
32491: FOR_TO
32492: IFFALSE 32518
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32494: LD_VAR 0 2
32498: PPUSH
32499: CALL_OW 274
32503: PPUSH
32504: LD_VAR 0 3
32508: PPUSH
32509: LD_INT 99999
32511: PPUSH
32512: CALL_OW 277
32516: GO 32491
32518: POP
32519: POP
32520: GO 32475
32522: POP
32523: POP
// end ;
32524: LD_VAR 0 1
32528: RET
// export function hHackSetLevel10 ; var i , j ; begin
32529: LD_INT 0
32531: PPUSH
32532: PPUSH
32533: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32534: LD_ADDR_VAR 0 2
32538: PUSH
32539: LD_INT 21
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PPUSH
32549: CALL_OW 69
32553: PUSH
32554: FOR_IN
32555: IFFALSE 32607
// if IsSelected ( i ) then
32557: LD_VAR 0 2
32561: PPUSH
32562: CALL_OW 306
32566: IFFALSE 32605
// begin for j := 1 to 4 do
32568: LD_ADDR_VAR 0 3
32572: PUSH
32573: DOUBLE
32574: LD_INT 1
32576: DEC
32577: ST_TO_ADDR
32578: LD_INT 4
32580: PUSH
32581: FOR_TO
32582: IFFALSE 32603
// SetSkill ( i , j , 10 ) ;
32584: LD_VAR 0 2
32588: PPUSH
32589: LD_VAR 0 3
32593: PPUSH
32594: LD_INT 10
32596: PPUSH
32597: CALL_OW 237
32601: GO 32581
32603: POP
32604: POP
// end ;
32605: GO 32554
32607: POP
32608: POP
// end ;
32609: LD_VAR 0 1
32613: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32614: LD_INT 0
32616: PPUSH
32617: PPUSH
32618: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32619: LD_ADDR_VAR 0 2
32623: PUSH
32624: LD_INT 22
32626: PUSH
32627: LD_OWVAR 2
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 21
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PPUSH
32650: CALL_OW 69
32654: PUSH
32655: FOR_IN
32656: IFFALSE 32697
// begin for j := 1 to 4 do
32658: LD_ADDR_VAR 0 3
32662: PUSH
32663: DOUBLE
32664: LD_INT 1
32666: DEC
32667: ST_TO_ADDR
32668: LD_INT 4
32670: PUSH
32671: FOR_TO
32672: IFFALSE 32693
// SetSkill ( i , j , 10 ) ;
32674: LD_VAR 0 2
32678: PPUSH
32679: LD_VAR 0 3
32683: PPUSH
32684: LD_INT 10
32686: PPUSH
32687: CALL_OW 237
32691: GO 32671
32693: POP
32694: POP
// end ;
32695: GO 32655
32697: POP
32698: POP
// end ;
32699: LD_VAR 0 1
32703: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32704: LD_INT 0
32706: PPUSH
// uc_side := your_side ;
32707: LD_ADDR_OWVAR 20
32711: PUSH
32712: LD_OWVAR 2
32716: ST_TO_ADDR
// uc_nation := nation ;
32717: LD_ADDR_OWVAR 21
32721: PUSH
32722: LD_VAR 0 1
32726: ST_TO_ADDR
// InitHc ;
32727: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32731: LD_INT 0
32733: PPUSH
32734: LD_VAR 0 2
32738: PPUSH
32739: LD_VAR 0 3
32743: PPUSH
32744: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32748: LD_VAR 0 4
32752: PPUSH
32753: LD_VAR 0 5
32757: PPUSH
32758: CALL_OW 428
32762: PUSH
32763: LD_INT 0
32765: EQUAL
32766: IFFALSE 32790
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32768: CALL_OW 44
32772: PPUSH
32773: LD_VAR 0 4
32777: PPUSH
32778: LD_VAR 0 5
32782: PPUSH
32783: LD_INT 1
32785: PPUSH
32786: CALL_OW 48
// end ;
32790: LD_VAR 0 6
32794: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32795: LD_INT 0
32797: PPUSH
32798: PPUSH
// uc_side := your_side ;
32799: LD_ADDR_OWVAR 20
32803: PUSH
32804: LD_OWVAR 2
32808: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32809: LD_VAR 0 1
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: LD_INT 2
32819: PUSH
32820: LD_INT 3
32822: PUSH
32823: LD_INT 4
32825: PUSH
32826: LD_INT 5
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: IN
32836: IFFALSE 32848
// uc_nation := nation_american else
32838: LD_ADDR_OWVAR 21
32842: PUSH
32843: LD_INT 1
32845: ST_TO_ADDR
32846: GO 32891
// if chassis in [ 11 , 12 , 13 , 14 ] then
32848: LD_VAR 0 1
32852: PUSH
32853: LD_INT 11
32855: PUSH
32856: LD_INT 12
32858: PUSH
32859: LD_INT 13
32861: PUSH
32862: LD_INT 14
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: IN
32871: IFFALSE 32883
// uc_nation := nation_arabian else
32873: LD_ADDR_OWVAR 21
32877: PUSH
32878: LD_INT 2
32880: ST_TO_ADDR
32881: GO 32891
// uc_nation := nation_russian ;
32883: LD_ADDR_OWVAR 21
32887: PUSH
32888: LD_INT 3
32890: ST_TO_ADDR
// vc_chassis := chassis ;
32891: LD_ADDR_OWVAR 37
32895: PUSH
32896: LD_VAR 0 1
32900: ST_TO_ADDR
// vc_engine := engine ;
32901: LD_ADDR_OWVAR 39
32905: PUSH
32906: LD_VAR 0 2
32910: ST_TO_ADDR
// vc_control := control ;
32911: LD_ADDR_OWVAR 38
32915: PUSH
32916: LD_VAR 0 3
32920: ST_TO_ADDR
// vc_weapon := weapon ;
32921: LD_ADDR_OWVAR 40
32925: PUSH
32926: LD_VAR 0 4
32930: ST_TO_ADDR
// un := CreateVehicle ;
32931: LD_ADDR_VAR 0 8
32935: PUSH
32936: CALL_OW 45
32940: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32941: LD_VAR 0 8
32945: PPUSH
32946: LD_INT 0
32948: PPUSH
32949: LD_INT 5
32951: PPUSH
32952: CALL_OW 12
32956: PPUSH
32957: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32961: LD_VAR 0 8
32965: PPUSH
32966: LD_VAR 0 5
32970: PPUSH
32971: LD_VAR 0 6
32975: PPUSH
32976: LD_INT 1
32978: PPUSH
32979: CALL_OW 48
// end ;
32983: LD_VAR 0 7
32987: RET
// export hInvincible ; every 1 do
32988: GO 32990
32990: DISABLE
// hInvincible := [ ] ;
32991: LD_ADDR_EXP 122
32995: PUSH
32996: EMPTY
32997: ST_TO_ADDR
32998: END
// every 10 do var i ;
32999: GO 33001
33001: DISABLE
33002: LD_INT 0
33004: PPUSH
// begin enable ;
33005: ENABLE
// if not hInvincible then
33006: LD_EXP 122
33010: NOT
33011: IFFALSE 33015
// exit ;
33013: GO 33059
// for i in hInvincible do
33015: LD_ADDR_VAR 0 1
33019: PUSH
33020: LD_EXP 122
33024: PUSH
33025: FOR_IN
33026: IFFALSE 33057
// if GetLives ( i ) < 1000 then
33028: LD_VAR 0 1
33032: PPUSH
33033: CALL_OW 256
33037: PUSH
33038: LD_INT 1000
33040: LESS
33041: IFFALSE 33055
// SetLives ( i , 1000 ) ;
33043: LD_VAR 0 1
33047: PPUSH
33048: LD_INT 1000
33050: PPUSH
33051: CALL_OW 234
33055: GO 33025
33057: POP
33058: POP
// end ;
33059: PPOPN 1
33061: END
// export function hHackInvincible ; var i ; begin
33062: LD_INT 0
33064: PPUSH
33065: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33066: LD_ADDR_VAR 0 2
33070: PUSH
33071: LD_INT 2
33073: PUSH
33074: LD_INT 21
33076: PUSH
33077: LD_INT 1
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 21
33086: PUSH
33087: LD_INT 2
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: LIST
33098: PPUSH
33099: CALL_OW 69
33103: PUSH
33104: FOR_IN
33105: IFFALSE 33166
// if IsSelected ( i ) then
33107: LD_VAR 0 2
33111: PPUSH
33112: CALL_OW 306
33116: IFFALSE 33164
// begin if i in hInvincible then
33118: LD_VAR 0 2
33122: PUSH
33123: LD_EXP 122
33127: IN
33128: IFFALSE 33148
// hInvincible := hInvincible diff i else
33130: LD_ADDR_EXP 122
33134: PUSH
33135: LD_EXP 122
33139: PUSH
33140: LD_VAR 0 2
33144: DIFF
33145: ST_TO_ADDR
33146: GO 33164
// hInvincible := hInvincible union i ;
33148: LD_ADDR_EXP 122
33152: PUSH
33153: LD_EXP 122
33157: PUSH
33158: LD_VAR 0 2
33162: UNION
33163: ST_TO_ADDR
// end ;
33164: GO 33104
33166: POP
33167: POP
// end ;
33168: LD_VAR 0 1
33172: RET
// export function hHackInvisible ; var i , j ; begin
33173: LD_INT 0
33175: PPUSH
33176: PPUSH
33177: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33178: LD_ADDR_VAR 0 2
33182: PUSH
33183: LD_INT 21
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PPUSH
33193: CALL_OW 69
33197: PUSH
33198: FOR_IN
33199: IFFALSE 33223
// if IsSelected ( i ) then
33201: LD_VAR 0 2
33205: PPUSH
33206: CALL_OW 306
33210: IFFALSE 33221
// ComForceInvisible ( i ) ;
33212: LD_VAR 0 2
33216: PPUSH
33217: CALL_OW 496
33221: GO 33198
33223: POP
33224: POP
// end ;
33225: LD_VAR 0 1
33229: RET
// export function hHackChangeYourSide ; begin
33230: LD_INT 0
33232: PPUSH
// if your_side = 8 then
33233: LD_OWVAR 2
33237: PUSH
33238: LD_INT 8
33240: EQUAL
33241: IFFALSE 33253
// your_side := 0 else
33243: LD_ADDR_OWVAR 2
33247: PUSH
33248: LD_INT 0
33250: ST_TO_ADDR
33251: GO 33267
// your_side := your_side + 1 ;
33253: LD_ADDR_OWVAR 2
33257: PUSH
33258: LD_OWVAR 2
33262: PUSH
33263: LD_INT 1
33265: PLUS
33266: ST_TO_ADDR
// end ;
33267: LD_VAR 0 1
33271: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33272: LD_INT 0
33274: PPUSH
33275: PPUSH
33276: PPUSH
// for i in all_units do
33277: LD_ADDR_VAR 0 2
33281: PUSH
33282: LD_OWVAR 3
33286: PUSH
33287: FOR_IN
33288: IFFALSE 33366
// if IsSelected ( i ) then
33290: LD_VAR 0 2
33294: PPUSH
33295: CALL_OW 306
33299: IFFALSE 33364
// begin j := GetSide ( i ) ;
33301: LD_ADDR_VAR 0 3
33305: PUSH
33306: LD_VAR 0 2
33310: PPUSH
33311: CALL_OW 255
33315: ST_TO_ADDR
// if j = 8 then
33316: LD_VAR 0 3
33320: PUSH
33321: LD_INT 8
33323: EQUAL
33324: IFFALSE 33336
// j := 0 else
33326: LD_ADDR_VAR 0 3
33330: PUSH
33331: LD_INT 0
33333: ST_TO_ADDR
33334: GO 33350
// j := j + 1 ;
33336: LD_ADDR_VAR 0 3
33340: PUSH
33341: LD_VAR 0 3
33345: PUSH
33346: LD_INT 1
33348: PLUS
33349: ST_TO_ADDR
// SetSide ( i , j ) ;
33350: LD_VAR 0 2
33354: PPUSH
33355: LD_VAR 0 3
33359: PPUSH
33360: CALL_OW 235
// end ;
33364: GO 33287
33366: POP
33367: POP
// end ;
33368: LD_VAR 0 1
33372: RET
// export function hHackFog ; begin
33373: LD_INT 0
33375: PPUSH
// FogOff ( true ) ;
33376: LD_INT 1
33378: PPUSH
33379: CALL_OW 344
// end ;
33383: LD_VAR 0 1
33387: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33388: LD_INT 0
33390: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33391: LD_VAR 0 1
33395: PPUSH
33396: LD_VAR 0 2
33400: PPUSH
33401: LD_VAR 0 3
33405: PPUSH
33406: LD_INT 1
33408: PPUSH
33409: LD_INT 1
33411: PPUSH
33412: CALL_OW 483
// CenterOnXY ( x , y ) ;
33416: LD_VAR 0 2
33420: PPUSH
33421: LD_VAR 0 3
33425: PPUSH
33426: CALL_OW 84
// end ; end_of_file
33430: LD_VAR 0 4
33434: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33435: LD_INT 0
33437: PPUSH
33438: PPUSH
33439: PPUSH
33440: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33441: LD_VAR 0 1
33445: PPUSH
33446: CALL_OW 264
33450: PUSH
33451: LD_EXP 53
33455: EQUAL
33456: IFFALSE 33528
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33458: LD_INT 68
33460: PPUSH
33461: LD_VAR 0 1
33465: PPUSH
33466: CALL_OW 255
33470: PPUSH
33471: CALL_OW 321
33475: PUSH
33476: LD_INT 2
33478: EQUAL
33479: IFFALSE 33491
// eff := 70 else
33481: LD_ADDR_VAR 0 4
33485: PUSH
33486: LD_INT 70
33488: ST_TO_ADDR
33489: GO 33499
// eff := 30 ;
33491: LD_ADDR_VAR 0 4
33495: PUSH
33496: LD_INT 30
33498: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33499: LD_VAR 0 1
33503: PPUSH
33504: CALL_OW 250
33508: PPUSH
33509: LD_VAR 0 1
33513: PPUSH
33514: CALL_OW 251
33518: PPUSH
33519: LD_VAR 0 4
33523: PPUSH
33524: CALL_OW 495
// end ; end ;
33528: LD_VAR 0 2
33532: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33533: LD_INT 0
33535: PPUSH
// end ;
33536: LD_VAR 0 4
33540: RET
// export function SOS_Command ( cmd ) ; begin
33541: LD_INT 0
33543: PPUSH
// end ;
33544: LD_VAR 0 2
33548: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33549: LD_INT 0
33551: PPUSH
// if cmd = 121 then
33552: LD_VAR 0 1
33556: PUSH
33557: LD_INT 121
33559: EQUAL
33560: IFFALSE 33562
// end ;
33562: LD_VAR 0 6
33566: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33567: LD_INT 0
33569: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33570: LD_VAR 0 1
33574: PUSH
33575: LD_INT 250
33577: EQUAL
33578: PUSH
33579: LD_VAR 0 2
33583: PPUSH
33584: CALL_OW 264
33588: PUSH
33589: LD_EXP 56
33593: EQUAL
33594: AND
33595: IFFALSE 33616
// MinerPlaceMine ( unit , x , y ) ;
33597: LD_VAR 0 2
33601: PPUSH
33602: LD_VAR 0 4
33606: PPUSH
33607: LD_VAR 0 5
33611: PPUSH
33612: CALL 35965 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33616: LD_VAR 0 1
33620: PUSH
33621: LD_INT 251
33623: EQUAL
33624: PUSH
33625: LD_VAR 0 2
33629: PPUSH
33630: CALL_OW 264
33634: PUSH
33635: LD_EXP 56
33639: EQUAL
33640: AND
33641: IFFALSE 33662
// MinerDetonateMine ( unit , x , y ) ;
33643: LD_VAR 0 2
33647: PPUSH
33648: LD_VAR 0 4
33652: PPUSH
33653: LD_VAR 0 5
33657: PPUSH
33658: CALL 36242 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33662: LD_VAR 0 1
33666: PUSH
33667: LD_INT 252
33669: EQUAL
33670: PUSH
33671: LD_VAR 0 2
33675: PPUSH
33676: CALL_OW 264
33680: PUSH
33681: LD_EXP 56
33685: EQUAL
33686: AND
33687: IFFALSE 33708
// MinerCreateMinefield ( unit , x , y ) ;
33689: LD_VAR 0 2
33693: PPUSH
33694: LD_VAR 0 4
33698: PPUSH
33699: LD_VAR 0 5
33703: PPUSH
33704: CALL 36659 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33708: LD_VAR 0 1
33712: PUSH
33713: LD_INT 253
33715: EQUAL
33716: PUSH
33717: LD_VAR 0 2
33721: PPUSH
33722: CALL_OW 257
33726: PUSH
33727: LD_INT 5
33729: EQUAL
33730: AND
33731: IFFALSE 33752
// ComBinocular ( unit , x , y ) ;
33733: LD_VAR 0 2
33737: PPUSH
33738: LD_VAR 0 4
33742: PPUSH
33743: LD_VAR 0 5
33747: PPUSH
33748: CALL 37030 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33752: LD_VAR 0 1
33756: PUSH
33757: LD_INT 254
33759: EQUAL
33760: PUSH
33761: LD_VAR 0 2
33765: PPUSH
33766: CALL_OW 264
33770: PUSH
33771: LD_EXP 51
33775: EQUAL
33776: AND
33777: PUSH
33778: LD_VAR 0 3
33782: PPUSH
33783: CALL_OW 263
33787: PUSH
33788: LD_INT 3
33790: EQUAL
33791: AND
33792: IFFALSE 33808
// HackDestroyVehicle ( unit , selectedUnit ) ;
33794: LD_VAR 0 2
33798: PPUSH
33799: LD_VAR 0 3
33803: PPUSH
33804: CALL 35325 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33808: LD_VAR 0 1
33812: PUSH
33813: LD_INT 255
33815: EQUAL
33816: PUSH
33817: LD_VAR 0 2
33821: PPUSH
33822: CALL_OW 264
33826: PUSH
33827: LD_INT 14
33829: PUSH
33830: LD_INT 53
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: IN
33837: AND
33838: PUSH
33839: LD_VAR 0 4
33843: PPUSH
33844: LD_VAR 0 5
33848: PPUSH
33849: CALL_OW 488
33853: AND
33854: IFFALSE 33878
// CutTreeXYR ( unit , x , y , 12 ) ;
33856: LD_VAR 0 2
33860: PPUSH
33861: LD_VAR 0 4
33865: PPUSH
33866: LD_VAR 0 5
33870: PPUSH
33871: LD_INT 12
33873: PPUSH
33874: CALL 33891 0 4
// end ;
33878: LD_VAR 0 6
33882: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33883: LD_INT 0
33885: PPUSH
// end ;
33886: LD_VAR 0 4
33890: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33891: LD_INT 0
33893: PPUSH
33894: PPUSH
33895: PPUSH
33896: PPUSH
33897: PPUSH
33898: PPUSH
33899: PPUSH
33900: PPUSH
33901: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33902: LD_VAR 0 1
33906: NOT
33907: PUSH
33908: LD_VAR 0 2
33912: PPUSH
33913: LD_VAR 0 3
33917: PPUSH
33918: CALL_OW 488
33922: NOT
33923: OR
33924: PUSH
33925: LD_VAR 0 4
33929: NOT
33930: OR
33931: IFFALSE 33935
// exit ;
33933: GO 34275
// list := [ ] ;
33935: LD_ADDR_VAR 0 13
33939: PUSH
33940: EMPTY
33941: ST_TO_ADDR
// if x - r < 0 then
33942: LD_VAR 0 2
33946: PUSH
33947: LD_VAR 0 4
33951: MINUS
33952: PUSH
33953: LD_INT 0
33955: LESS
33956: IFFALSE 33968
// min_x := 0 else
33958: LD_ADDR_VAR 0 7
33962: PUSH
33963: LD_INT 0
33965: ST_TO_ADDR
33966: GO 33984
// min_x := x - r ;
33968: LD_ADDR_VAR 0 7
33972: PUSH
33973: LD_VAR 0 2
33977: PUSH
33978: LD_VAR 0 4
33982: MINUS
33983: ST_TO_ADDR
// if y - r < 0 then
33984: LD_VAR 0 3
33988: PUSH
33989: LD_VAR 0 4
33993: MINUS
33994: PUSH
33995: LD_INT 0
33997: LESS
33998: IFFALSE 34010
// min_y := 0 else
34000: LD_ADDR_VAR 0 8
34004: PUSH
34005: LD_INT 0
34007: ST_TO_ADDR
34008: GO 34026
// min_y := y - r ;
34010: LD_ADDR_VAR 0 8
34014: PUSH
34015: LD_VAR 0 3
34019: PUSH
34020: LD_VAR 0 4
34024: MINUS
34025: ST_TO_ADDR
// max_x := x + r ;
34026: LD_ADDR_VAR 0 9
34030: PUSH
34031: LD_VAR 0 2
34035: PUSH
34036: LD_VAR 0 4
34040: PLUS
34041: ST_TO_ADDR
// max_y := y + r ;
34042: LD_ADDR_VAR 0 10
34046: PUSH
34047: LD_VAR 0 3
34051: PUSH
34052: LD_VAR 0 4
34056: PLUS
34057: ST_TO_ADDR
// for _x = min_x to max_x do
34058: LD_ADDR_VAR 0 11
34062: PUSH
34063: DOUBLE
34064: LD_VAR 0 7
34068: DEC
34069: ST_TO_ADDR
34070: LD_VAR 0 9
34074: PUSH
34075: FOR_TO
34076: IFFALSE 34193
// for _y = min_y to max_y do
34078: LD_ADDR_VAR 0 12
34082: PUSH
34083: DOUBLE
34084: LD_VAR 0 8
34088: DEC
34089: ST_TO_ADDR
34090: LD_VAR 0 10
34094: PUSH
34095: FOR_TO
34096: IFFALSE 34189
// begin if not ValidHex ( _x , _y ) then
34098: LD_VAR 0 11
34102: PPUSH
34103: LD_VAR 0 12
34107: PPUSH
34108: CALL_OW 488
34112: NOT
34113: IFFALSE 34117
// continue ;
34115: GO 34095
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34117: LD_VAR 0 11
34121: PPUSH
34122: LD_VAR 0 12
34126: PPUSH
34127: CALL_OW 351
34131: PUSH
34132: LD_VAR 0 11
34136: PPUSH
34137: LD_VAR 0 12
34141: PPUSH
34142: CALL_OW 554
34146: AND
34147: IFFALSE 34187
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34149: LD_ADDR_VAR 0 13
34153: PUSH
34154: LD_VAR 0 13
34158: PPUSH
34159: LD_VAR 0 13
34163: PUSH
34164: LD_INT 1
34166: PLUS
34167: PPUSH
34168: LD_VAR 0 11
34172: PUSH
34173: LD_VAR 0 12
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PPUSH
34182: CALL_OW 2
34186: ST_TO_ADDR
// end ;
34187: GO 34095
34189: POP
34190: POP
34191: GO 34075
34193: POP
34194: POP
// if not list then
34195: LD_VAR 0 13
34199: NOT
34200: IFFALSE 34204
// exit ;
34202: GO 34275
// for i in list do
34204: LD_ADDR_VAR 0 6
34208: PUSH
34209: LD_VAR 0 13
34213: PUSH
34214: FOR_IN
34215: IFFALSE 34273
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34217: LD_VAR 0 1
34221: PPUSH
34222: LD_STRING M
34224: PUSH
34225: LD_VAR 0 6
34229: PUSH
34230: LD_INT 1
34232: ARRAY
34233: PUSH
34234: LD_VAR 0 6
34238: PUSH
34239: LD_INT 2
34241: ARRAY
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: LD_INT 0
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: PUSH
34264: EMPTY
34265: LIST
34266: PPUSH
34267: CALL_OW 447
34271: GO 34214
34273: POP
34274: POP
// end ;
34275: LD_VAR 0 5
34279: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34280: LD_EXP 125
34284: NOT
34285: IFFALSE 34335
34287: GO 34289
34289: DISABLE
// begin initHack := true ;
34290: LD_ADDR_EXP 125
34294: PUSH
34295: LD_INT 1
34297: ST_TO_ADDR
// hackTanks := [ ] ;
34298: LD_ADDR_EXP 126
34302: PUSH
34303: EMPTY
34304: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34305: LD_ADDR_EXP 127
34309: PUSH
34310: EMPTY
34311: ST_TO_ADDR
// hackLimit := 3 ;
34312: LD_ADDR_EXP 128
34316: PUSH
34317: LD_INT 3
34319: ST_TO_ADDR
// hackDist := 12 ;
34320: LD_ADDR_EXP 129
34324: PUSH
34325: LD_INT 12
34327: ST_TO_ADDR
// hackCounter := [ ] ;
34328: LD_ADDR_EXP 130
34332: PUSH
34333: EMPTY
34334: ST_TO_ADDR
// end ;
34335: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34336: LD_EXP 125
34340: PUSH
34341: LD_INT 34
34343: PUSH
34344: LD_EXP 51
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PPUSH
34353: CALL_OW 69
34357: AND
34358: IFFALSE 34613
34360: GO 34362
34362: DISABLE
34363: LD_INT 0
34365: PPUSH
34366: PPUSH
// begin enable ;
34367: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34368: LD_ADDR_VAR 0 1
34372: PUSH
34373: LD_INT 34
34375: PUSH
34376: LD_EXP 51
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PPUSH
34385: CALL_OW 69
34389: PUSH
34390: FOR_IN
34391: IFFALSE 34611
// begin if not i in hackTanks then
34393: LD_VAR 0 1
34397: PUSH
34398: LD_EXP 126
34402: IN
34403: NOT
34404: IFFALSE 34487
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34406: LD_ADDR_EXP 126
34410: PUSH
34411: LD_EXP 126
34415: PPUSH
34416: LD_EXP 126
34420: PUSH
34421: LD_INT 1
34423: PLUS
34424: PPUSH
34425: LD_VAR 0 1
34429: PPUSH
34430: CALL_OW 1
34434: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34435: LD_ADDR_EXP 127
34439: PUSH
34440: LD_EXP 127
34444: PPUSH
34445: LD_EXP 127
34449: PUSH
34450: LD_INT 1
34452: PLUS
34453: PPUSH
34454: EMPTY
34455: PPUSH
34456: CALL_OW 1
34460: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34461: LD_ADDR_EXP 130
34465: PUSH
34466: LD_EXP 130
34470: PPUSH
34471: LD_EXP 130
34475: PUSH
34476: LD_INT 1
34478: PLUS
34479: PPUSH
34480: EMPTY
34481: PPUSH
34482: CALL_OW 1
34486: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34487: LD_VAR 0 1
34491: PPUSH
34492: CALL_OW 302
34496: NOT
34497: IFFALSE 34510
// begin HackUnlinkAll ( i ) ;
34499: LD_VAR 0 1
34503: PPUSH
34504: CALL 34616 0 1
// continue ;
34508: GO 34390
// end ; HackCheckCapturedStatus ( i ) ;
34510: LD_VAR 0 1
34514: PPUSH
34515: CALL 35059 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34519: LD_ADDR_VAR 0 2
34523: PUSH
34524: LD_INT 81
34526: PUSH
34527: LD_VAR 0 1
34531: PPUSH
34532: CALL_OW 255
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 33
34543: PUSH
34544: LD_INT 3
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 91
34553: PUSH
34554: LD_VAR 0 1
34558: PUSH
34559: LD_EXP 129
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 50
34571: PUSH
34572: EMPTY
34573: LIST
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: PPUSH
34581: CALL_OW 69
34585: ST_TO_ADDR
// if not tmp then
34586: LD_VAR 0 2
34590: NOT
34591: IFFALSE 34595
// continue ;
34593: GO 34390
// HackLink ( i , tmp ) ;
34595: LD_VAR 0 1
34599: PPUSH
34600: LD_VAR 0 2
34604: PPUSH
34605: CALL 34752 0 2
// end ;
34609: GO 34390
34611: POP
34612: POP
// end ;
34613: PPOPN 2
34615: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34616: LD_INT 0
34618: PPUSH
34619: PPUSH
34620: PPUSH
// if not hack in hackTanks then
34621: LD_VAR 0 1
34625: PUSH
34626: LD_EXP 126
34630: IN
34631: NOT
34632: IFFALSE 34636
// exit ;
34634: GO 34747
// index := GetElementIndex ( hackTanks , hack ) ;
34636: LD_ADDR_VAR 0 4
34640: PUSH
34641: LD_EXP 126
34645: PPUSH
34646: LD_VAR 0 1
34650: PPUSH
34651: CALL 42221 0 2
34655: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34656: LD_EXP 127
34660: PUSH
34661: LD_VAR 0 4
34665: ARRAY
34666: IFFALSE 34747
// begin for i in hackTanksCaptured [ index ] do
34668: LD_ADDR_VAR 0 3
34672: PUSH
34673: LD_EXP 127
34677: PUSH
34678: LD_VAR 0 4
34682: ARRAY
34683: PUSH
34684: FOR_IN
34685: IFFALSE 34711
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34687: LD_VAR 0 3
34691: PUSH
34692: LD_INT 1
34694: ARRAY
34695: PPUSH
34696: LD_VAR 0 3
34700: PUSH
34701: LD_INT 2
34703: ARRAY
34704: PPUSH
34705: CALL_OW 235
34709: GO 34684
34711: POP
34712: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34713: LD_ADDR_EXP 127
34717: PUSH
34718: LD_EXP 127
34722: PPUSH
34723: LD_VAR 0 4
34727: PPUSH
34728: EMPTY
34729: PPUSH
34730: CALL_OW 1
34734: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34735: LD_VAR 0 1
34739: PPUSH
34740: LD_INT 0
34742: PPUSH
34743: CALL_OW 505
// end ; end ;
34747: LD_VAR 0 2
34751: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34752: LD_INT 0
34754: PPUSH
34755: PPUSH
34756: PPUSH
// if not hack in hackTanks or not vehicles then
34757: LD_VAR 0 1
34761: PUSH
34762: LD_EXP 126
34766: IN
34767: NOT
34768: PUSH
34769: LD_VAR 0 2
34773: NOT
34774: OR
34775: IFFALSE 34779
// exit ;
34777: GO 35054
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34779: LD_ADDR_VAR 0 2
34783: PUSH
34784: LD_VAR 0 1
34788: PPUSH
34789: LD_VAR 0 2
34793: PPUSH
34794: LD_INT 1
34796: PPUSH
34797: LD_INT 1
34799: PPUSH
34800: CALL 42871 0 4
34804: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34805: LD_ADDR_VAR 0 5
34809: PUSH
34810: LD_EXP 126
34814: PPUSH
34815: LD_VAR 0 1
34819: PPUSH
34820: CALL 42221 0 2
34824: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34825: LD_EXP 127
34829: PUSH
34830: LD_VAR 0 5
34834: ARRAY
34835: PUSH
34836: LD_EXP 128
34840: LESS
34841: IFFALSE 35030
// begin for i := 1 to vehicles do
34843: LD_ADDR_VAR 0 4
34847: PUSH
34848: DOUBLE
34849: LD_INT 1
34851: DEC
34852: ST_TO_ADDR
34853: LD_VAR 0 2
34857: PUSH
34858: FOR_TO
34859: IFFALSE 35028
// begin if hackTanksCaptured [ index ] = hackLimit then
34861: LD_EXP 127
34865: PUSH
34866: LD_VAR 0 5
34870: ARRAY
34871: PUSH
34872: LD_EXP 128
34876: EQUAL
34877: IFFALSE 34881
// break ;
34879: GO 35028
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34881: LD_ADDR_EXP 130
34885: PUSH
34886: LD_EXP 130
34890: PPUSH
34891: LD_VAR 0 5
34895: PPUSH
34896: LD_EXP 130
34900: PUSH
34901: LD_VAR 0 5
34905: ARRAY
34906: PUSH
34907: LD_INT 1
34909: PLUS
34910: PPUSH
34911: CALL_OW 1
34915: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34916: LD_ADDR_EXP 127
34920: PUSH
34921: LD_EXP 127
34925: PPUSH
34926: LD_VAR 0 5
34930: PUSH
34931: LD_EXP 127
34935: PUSH
34936: LD_VAR 0 5
34940: ARRAY
34941: PUSH
34942: LD_INT 1
34944: PLUS
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PPUSH
34950: LD_VAR 0 2
34954: PUSH
34955: LD_VAR 0 4
34959: ARRAY
34960: PUSH
34961: LD_VAR 0 2
34965: PUSH
34966: LD_VAR 0 4
34970: ARRAY
34971: PPUSH
34972: CALL_OW 255
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PPUSH
34981: CALL 42436 0 3
34985: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34986: LD_VAR 0 2
34990: PUSH
34991: LD_VAR 0 4
34995: ARRAY
34996: PPUSH
34997: LD_VAR 0 1
35001: PPUSH
35002: CALL_OW 255
35006: PPUSH
35007: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35011: LD_VAR 0 2
35015: PUSH
35016: LD_VAR 0 4
35020: ARRAY
35021: PPUSH
35022: CALL_OW 141
// end ;
35026: GO 34858
35028: POP
35029: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35030: LD_VAR 0 1
35034: PPUSH
35035: LD_EXP 127
35039: PUSH
35040: LD_VAR 0 5
35044: ARRAY
35045: PUSH
35046: LD_INT 0
35048: PLUS
35049: PPUSH
35050: CALL_OW 505
// end ;
35054: LD_VAR 0 3
35058: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35059: LD_INT 0
35061: PPUSH
35062: PPUSH
35063: PPUSH
35064: PPUSH
// if not hack in hackTanks then
35065: LD_VAR 0 1
35069: PUSH
35070: LD_EXP 126
35074: IN
35075: NOT
35076: IFFALSE 35080
// exit ;
35078: GO 35320
// index := GetElementIndex ( hackTanks , hack ) ;
35080: LD_ADDR_VAR 0 4
35084: PUSH
35085: LD_EXP 126
35089: PPUSH
35090: LD_VAR 0 1
35094: PPUSH
35095: CALL 42221 0 2
35099: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35100: LD_ADDR_VAR 0 3
35104: PUSH
35105: DOUBLE
35106: LD_EXP 127
35110: PUSH
35111: LD_VAR 0 4
35115: ARRAY
35116: INC
35117: ST_TO_ADDR
35118: LD_INT 1
35120: PUSH
35121: FOR_DOWNTO
35122: IFFALSE 35294
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35124: LD_ADDR_VAR 0 5
35128: PUSH
35129: LD_EXP 127
35133: PUSH
35134: LD_VAR 0 4
35138: ARRAY
35139: PUSH
35140: LD_VAR 0 3
35144: ARRAY
35145: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35146: LD_VAR 0 5
35150: PUSH
35151: LD_INT 1
35153: ARRAY
35154: PPUSH
35155: CALL_OW 302
35159: NOT
35160: PUSH
35161: LD_VAR 0 5
35165: PUSH
35166: LD_INT 1
35168: ARRAY
35169: PPUSH
35170: CALL_OW 255
35174: PUSH
35175: LD_VAR 0 1
35179: PPUSH
35180: CALL_OW 255
35184: NONEQUAL
35185: OR
35186: IFFALSE 35292
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35188: LD_VAR 0 5
35192: PUSH
35193: LD_INT 1
35195: ARRAY
35196: PPUSH
35197: CALL_OW 305
35201: PUSH
35202: LD_VAR 0 5
35206: PUSH
35207: LD_INT 1
35209: ARRAY
35210: PPUSH
35211: CALL_OW 255
35215: PUSH
35216: LD_VAR 0 1
35220: PPUSH
35221: CALL_OW 255
35225: EQUAL
35226: AND
35227: IFFALSE 35251
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35229: LD_VAR 0 5
35233: PUSH
35234: LD_INT 1
35236: ARRAY
35237: PPUSH
35238: LD_VAR 0 5
35242: PUSH
35243: LD_INT 2
35245: ARRAY
35246: PPUSH
35247: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35251: LD_ADDR_EXP 127
35255: PUSH
35256: LD_EXP 127
35260: PPUSH
35261: LD_VAR 0 4
35265: PPUSH
35266: LD_EXP 127
35270: PUSH
35271: LD_VAR 0 4
35275: ARRAY
35276: PPUSH
35277: LD_VAR 0 3
35281: PPUSH
35282: CALL_OW 3
35286: PPUSH
35287: CALL_OW 1
35291: ST_TO_ADDR
// end ; end ;
35292: GO 35121
35294: POP
35295: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35296: LD_VAR 0 1
35300: PPUSH
35301: LD_EXP 127
35305: PUSH
35306: LD_VAR 0 4
35310: ARRAY
35311: PUSH
35312: LD_INT 0
35314: PLUS
35315: PPUSH
35316: CALL_OW 505
// end ;
35320: LD_VAR 0 2
35324: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35325: LD_INT 0
35327: PPUSH
35328: PPUSH
35329: PPUSH
35330: PPUSH
// if not hack in hackTanks then
35331: LD_VAR 0 1
35335: PUSH
35336: LD_EXP 126
35340: IN
35341: NOT
35342: IFFALSE 35346
// exit ;
35344: GO 35431
// index := GetElementIndex ( hackTanks , hack ) ;
35346: LD_ADDR_VAR 0 5
35350: PUSH
35351: LD_EXP 126
35355: PPUSH
35356: LD_VAR 0 1
35360: PPUSH
35361: CALL 42221 0 2
35365: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35366: LD_ADDR_VAR 0 4
35370: PUSH
35371: DOUBLE
35372: LD_INT 1
35374: DEC
35375: ST_TO_ADDR
35376: LD_EXP 127
35380: PUSH
35381: LD_VAR 0 5
35385: ARRAY
35386: PUSH
35387: FOR_TO
35388: IFFALSE 35429
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35390: LD_EXP 127
35394: PUSH
35395: LD_VAR 0 5
35399: ARRAY
35400: PUSH
35401: LD_VAR 0 4
35405: ARRAY
35406: PUSH
35407: LD_INT 1
35409: ARRAY
35410: PUSH
35411: LD_VAR 0 2
35415: EQUAL
35416: IFFALSE 35427
// KillUnit ( vehicle ) ;
35418: LD_VAR 0 2
35422: PPUSH
35423: CALL_OW 66
35427: GO 35387
35429: POP
35430: POP
// end ;
35431: LD_VAR 0 3
35435: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35436: LD_EXP 131
35440: NOT
35441: IFFALSE 35476
35443: GO 35445
35445: DISABLE
// begin initMiner := true ;
35446: LD_ADDR_EXP 131
35450: PUSH
35451: LD_INT 1
35453: ST_TO_ADDR
// minersList := [ ] ;
35454: LD_ADDR_EXP 132
35458: PUSH
35459: EMPTY
35460: ST_TO_ADDR
// minerMinesList := [ ] ;
35461: LD_ADDR_EXP 133
35465: PUSH
35466: EMPTY
35467: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35468: LD_ADDR_EXP 134
35472: PUSH
35473: LD_INT 5
35475: ST_TO_ADDR
// end ;
35476: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35477: LD_EXP 131
35481: PUSH
35482: LD_INT 34
35484: PUSH
35485: LD_EXP 56
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PPUSH
35494: CALL_OW 69
35498: AND
35499: IFFALSE 35962
35501: GO 35503
35503: DISABLE
35504: LD_INT 0
35506: PPUSH
35507: PPUSH
35508: PPUSH
35509: PPUSH
// begin enable ;
35510: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35511: LD_ADDR_VAR 0 1
35515: PUSH
35516: LD_INT 34
35518: PUSH
35519: LD_EXP 56
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PPUSH
35528: CALL_OW 69
35532: PUSH
35533: FOR_IN
35534: IFFALSE 35606
// begin if not i in minersList then
35536: LD_VAR 0 1
35540: PUSH
35541: LD_EXP 132
35545: IN
35546: NOT
35547: IFFALSE 35604
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35549: LD_ADDR_EXP 132
35553: PUSH
35554: LD_EXP 132
35558: PPUSH
35559: LD_EXP 132
35563: PUSH
35564: LD_INT 1
35566: PLUS
35567: PPUSH
35568: LD_VAR 0 1
35572: PPUSH
35573: CALL_OW 1
35577: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35578: LD_ADDR_EXP 133
35582: PUSH
35583: LD_EXP 133
35587: PPUSH
35588: LD_EXP 133
35592: PUSH
35593: LD_INT 1
35595: PLUS
35596: PPUSH
35597: EMPTY
35598: PPUSH
35599: CALL_OW 1
35603: ST_TO_ADDR
// end end ;
35604: GO 35533
35606: POP
35607: POP
// for i := minerMinesList downto 1 do
35608: LD_ADDR_VAR 0 1
35612: PUSH
35613: DOUBLE
35614: LD_EXP 133
35618: INC
35619: ST_TO_ADDR
35620: LD_INT 1
35622: PUSH
35623: FOR_DOWNTO
35624: IFFALSE 35960
// begin if IsLive ( minersList [ i ] ) then
35626: LD_EXP 132
35630: PUSH
35631: LD_VAR 0 1
35635: ARRAY
35636: PPUSH
35637: CALL_OW 300
35641: IFFALSE 35669
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35643: LD_EXP 132
35647: PUSH
35648: LD_VAR 0 1
35652: ARRAY
35653: PPUSH
35654: LD_EXP 133
35658: PUSH
35659: LD_VAR 0 1
35663: ARRAY
35664: PPUSH
35665: CALL_OW 505
// if not minerMinesList [ i ] then
35669: LD_EXP 133
35673: PUSH
35674: LD_VAR 0 1
35678: ARRAY
35679: NOT
35680: IFFALSE 35684
// continue ;
35682: GO 35623
// for j := minerMinesList [ i ] downto 1 do
35684: LD_ADDR_VAR 0 2
35688: PUSH
35689: DOUBLE
35690: LD_EXP 133
35694: PUSH
35695: LD_VAR 0 1
35699: ARRAY
35700: INC
35701: ST_TO_ADDR
35702: LD_INT 1
35704: PUSH
35705: FOR_DOWNTO
35706: IFFALSE 35956
// begin side := GetSide ( minersList [ i ] ) ;
35708: LD_ADDR_VAR 0 3
35712: PUSH
35713: LD_EXP 132
35717: PUSH
35718: LD_VAR 0 1
35722: ARRAY
35723: PPUSH
35724: CALL_OW 255
35728: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35729: LD_ADDR_VAR 0 4
35733: PUSH
35734: LD_EXP 133
35738: PUSH
35739: LD_VAR 0 1
35743: ARRAY
35744: PUSH
35745: LD_VAR 0 2
35749: ARRAY
35750: PUSH
35751: LD_INT 1
35753: ARRAY
35754: PPUSH
35755: LD_EXP 133
35759: PUSH
35760: LD_VAR 0 1
35764: ARRAY
35765: PUSH
35766: LD_VAR 0 2
35770: ARRAY
35771: PUSH
35772: LD_INT 2
35774: ARRAY
35775: PPUSH
35776: CALL_OW 428
35780: ST_TO_ADDR
// if not tmp then
35781: LD_VAR 0 4
35785: NOT
35786: IFFALSE 35790
// continue ;
35788: GO 35705
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35790: LD_VAR 0 4
35794: PUSH
35795: LD_INT 81
35797: PUSH
35798: LD_VAR 0 3
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PPUSH
35807: CALL_OW 69
35811: IN
35812: PUSH
35813: LD_EXP 133
35817: PUSH
35818: LD_VAR 0 1
35822: ARRAY
35823: PUSH
35824: LD_VAR 0 2
35828: ARRAY
35829: PUSH
35830: LD_INT 1
35832: ARRAY
35833: PPUSH
35834: LD_EXP 133
35838: PUSH
35839: LD_VAR 0 1
35843: ARRAY
35844: PUSH
35845: LD_VAR 0 2
35849: ARRAY
35850: PUSH
35851: LD_INT 2
35853: ARRAY
35854: PPUSH
35855: CALL_OW 458
35859: AND
35860: IFFALSE 35954
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35862: LD_EXP 133
35866: PUSH
35867: LD_VAR 0 1
35871: ARRAY
35872: PUSH
35873: LD_VAR 0 2
35877: ARRAY
35878: PUSH
35879: LD_INT 1
35881: ARRAY
35882: PPUSH
35883: LD_EXP 133
35887: PUSH
35888: LD_VAR 0 1
35892: ARRAY
35893: PUSH
35894: LD_VAR 0 2
35898: ARRAY
35899: PUSH
35900: LD_INT 2
35902: ARRAY
35903: PPUSH
35904: LD_VAR 0 3
35908: PPUSH
35909: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35913: LD_ADDR_EXP 133
35917: PUSH
35918: LD_EXP 133
35922: PPUSH
35923: LD_VAR 0 1
35927: PPUSH
35928: LD_EXP 133
35932: PUSH
35933: LD_VAR 0 1
35937: ARRAY
35938: PPUSH
35939: LD_VAR 0 2
35943: PPUSH
35944: CALL_OW 3
35948: PPUSH
35949: CALL_OW 1
35953: ST_TO_ADDR
// end ; end ;
35954: GO 35705
35956: POP
35957: POP
// end ;
35958: GO 35623
35960: POP
35961: POP
// end ;
35962: PPOPN 4
35964: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35965: LD_INT 0
35967: PPUSH
35968: PPUSH
// result := false ;
35969: LD_ADDR_VAR 0 4
35973: PUSH
35974: LD_INT 0
35976: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35977: LD_VAR 0 1
35981: PPUSH
35982: CALL_OW 264
35986: PUSH
35987: LD_EXP 56
35991: EQUAL
35992: NOT
35993: IFFALSE 35997
// exit ;
35995: GO 36237
// index := GetElementIndex ( minersList , unit ) ;
35997: LD_ADDR_VAR 0 5
36001: PUSH
36002: LD_EXP 132
36006: PPUSH
36007: LD_VAR 0 1
36011: PPUSH
36012: CALL 42221 0 2
36016: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36017: LD_EXP 133
36021: PUSH
36022: LD_VAR 0 5
36026: ARRAY
36027: PUSH
36028: LD_EXP 134
36032: GREATEREQUAL
36033: IFFALSE 36037
// exit ;
36035: GO 36237
// ComMoveXY ( unit , x , y ) ;
36037: LD_VAR 0 1
36041: PPUSH
36042: LD_VAR 0 2
36046: PPUSH
36047: LD_VAR 0 3
36051: PPUSH
36052: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36056: LD_INT 35
36058: PPUSH
36059: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36063: LD_VAR 0 1
36067: PPUSH
36068: LD_VAR 0 2
36072: PPUSH
36073: LD_VAR 0 3
36077: PPUSH
36078: CALL 72993 0 3
36082: NOT
36083: PUSH
36084: LD_VAR 0 1
36088: PPUSH
36089: CALL_OW 314
36093: AND
36094: IFFALSE 36098
// exit ;
36096: GO 36237
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36098: LD_VAR 0 2
36102: PPUSH
36103: LD_VAR 0 3
36107: PPUSH
36108: CALL_OW 428
36112: PUSH
36113: LD_VAR 0 1
36117: EQUAL
36118: PUSH
36119: LD_VAR 0 1
36123: PPUSH
36124: CALL_OW 314
36128: NOT
36129: AND
36130: IFFALSE 36056
// PlaySoundXY ( x , y , PlantMine ) ;
36132: LD_VAR 0 2
36136: PPUSH
36137: LD_VAR 0 3
36141: PPUSH
36142: LD_STRING PlantMine
36144: PPUSH
36145: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36149: LD_VAR 0 2
36153: PPUSH
36154: LD_VAR 0 3
36158: PPUSH
36159: LD_VAR 0 1
36163: PPUSH
36164: CALL_OW 255
36168: PPUSH
36169: LD_INT 0
36171: PPUSH
36172: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36176: LD_ADDR_EXP 133
36180: PUSH
36181: LD_EXP 133
36185: PPUSH
36186: LD_VAR 0 5
36190: PUSH
36191: LD_EXP 133
36195: PUSH
36196: LD_VAR 0 5
36200: ARRAY
36201: PUSH
36202: LD_INT 1
36204: PLUS
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PPUSH
36210: LD_VAR 0 2
36214: PUSH
36215: LD_VAR 0 3
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PPUSH
36224: CALL 42436 0 3
36228: ST_TO_ADDR
// result := true ;
36229: LD_ADDR_VAR 0 4
36233: PUSH
36234: LD_INT 1
36236: ST_TO_ADDR
// end ;
36237: LD_VAR 0 4
36241: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36242: LD_INT 0
36244: PPUSH
36245: PPUSH
36246: PPUSH
// if not unit in minersList then
36247: LD_VAR 0 1
36251: PUSH
36252: LD_EXP 132
36256: IN
36257: NOT
36258: IFFALSE 36262
// exit ;
36260: GO 36654
// index := GetElementIndex ( minersList , unit ) ;
36262: LD_ADDR_VAR 0 6
36266: PUSH
36267: LD_EXP 132
36271: PPUSH
36272: LD_VAR 0 1
36276: PPUSH
36277: CALL 42221 0 2
36281: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36282: LD_ADDR_VAR 0 5
36286: PUSH
36287: DOUBLE
36288: LD_EXP 133
36292: PUSH
36293: LD_VAR 0 6
36297: ARRAY
36298: INC
36299: ST_TO_ADDR
36300: LD_INT 1
36302: PUSH
36303: FOR_DOWNTO
36304: IFFALSE 36465
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36306: LD_EXP 133
36310: PUSH
36311: LD_VAR 0 6
36315: ARRAY
36316: PUSH
36317: LD_VAR 0 5
36321: ARRAY
36322: PUSH
36323: LD_INT 1
36325: ARRAY
36326: PUSH
36327: LD_VAR 0 2
36331: EQUAL
36332: PUSH
36333: LD_EXP 133
36337: PUSH
36338: LD_VAR 0 6
36342: ARRAY
36343: PUSH
36344: LD_VAR 0 5
36348: ARRAY
36349: PUSH
36350: LD_INT 2
36352: ARRAY
36353: PUSH
36354: LD_VAR 0 3
36358: EQUAL
36359: AND
36360: IFFALSE 36463
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36362: LD_EXP 133
36366: PUSH
36367: LD_VAR 0 6
36371: ARRAY
36372: PUSH
36373: LD_VAR 0 5
36377: ARRAY
36378: PUSH
36379: LD_INT 1
36381: ARRAY
36382: PPUSH
36383: LD_EXP 133
36387: PUSH
36388: LD_VAR 0 6
36392: ARRAY
36393: PUSH
36394: LD_VAR 0 5
36398: ARRAY
36399: PUSH
36400: LD_INT 2
36402: ARRAY
36403: PPUSH
36404: LD_VAR 0 1
36408: PPUSH
36409: CALL_OW 255
36413: PPUSH
36414: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36418: LD_ADDR_EXP 133
36422: PUSH
36423: LD_EXP 133
36427: PPUSH
36428: LD_VAR 0 6
36432: PPUSH
36433: LD_EXP 133
36437: PUSH
36438: LD_VAR 0 6
36442: ARRAY
36443: PPUSH
36444: LD_VAR 0 5
36448: PPUSH
36449: CALL_OW 3
36453: PPUSH
36454: CALL_OW 1
36458: ST_TO_ADDR
// exit ;
36459: POP
36460: POP
36461: GO 36654
// end ; end ;
36463: GO 36303
36465: POP
36466: POP
// for i := minerMinesList [ index ] downto 1 do
36467: LD_ADDR_VAR 0 5
36471: PUSH
36472: DOUBLE
36473: LD_EXP 133
36477: PUSH
36478: LD_VAR 0 6
36482: ARRAY
36483: INC
36484: ST_TO_ADDR
36485: LD_INT 1
36487: PUSH
36488: FOR_DOWNTO
36489: IFFALSE 36652
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36491: LD_EXP 133
36495: PUSH
36496: LD_VAR 0 6
36500: ARRAY
36501: PUSH
36502: LD_VAR 0 5
36506: ARRAY
36507: PUSH
36508: LD_INT 1
36510: ARRAY
36511: PPUSH
36512: LD_EXP 133
36516: PUSH
36517: LD_VAR 0 6
36521: ARRAY
36522: PUSH
36523: LD_VAR 0 5
36527: ARRAY
36528: PUSH
36529: LD_INT 2
36531: ARRAY
36532: PPUSH
36533: LD_VAR 0 2
36537: PPUSH
36538: LD_VAR 0 3
36542: PPUSH
36543: CALL_OW 298
36547: PUSH
36548: LD_INT 6
36550: LESS
36551: IFFALSE 36650
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36553: LD_EXP 133
36557: PUSH
36558: LD_VAR 0 6
36562: ARRAY
36563: PUSH
36564: LD_VAR 0 5
36568: ARRAY
36569: PUSH
36570: LD_INT 1
36572: ARRAY
36573: PPUSH
36574: LD_EXP 133
36578: PUSH
36579: LD_VAR 0 6
36583: ARRAY
36584: PUSH
36585: LD_VAR 0 5
36589: ARRAY
36590: PUSH
36591: LD_INT 2
36593: ARRAY
36594: PPUSH
36595: LD_VAR 0 1
36599: PPUSH
36600: CALL_OW 255
36604: PPUSH
36605: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36609: LD_ADDR_EXP 133
36613: PUSH
36614: LD_EXP 133
36618: PPUSH
36619: LD_VAR 0 6
36623: PPUSH
36624: LD_EXP 133
36628: PUSH
36629: LD_VAR 0 6
36633: ARRAY
36634: PPUSH
36635: LD_VAR 0 5
36639: PPUSH
36640: CALL_OW 3
36644: PPUSH
36645: CALL_OW 1
36649: ST_TO_ADDR
// end ; end ;
36650: GO 36488
36652: POP
36653: POP
// end ;
36654: LD_VAR 0 4
36658: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36659: LD_INT 0
36661: PPUSH
36662: PPUSH
36663: PPUSH
36664: PPUSH
36665: PPUSH
36666: PPUSH
36667: PPUSH
36668: PPUSH
36669: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36670: LD_VAR 0 1
36674: PPUSH
36675: CALL_OW 264
36679: PUSH
36680: LD_EXP 56
36684: EQUAL
36685: NOT
36686: PUSH
36687: LD_VAR 0 1
36691: PUSH
36692: LD_EXP 132
36696: IN
36697: NOT
36698: OR
36699: IFFALSE 36703
// exit ;
36701: GO 37025
// index := GetElementIndex ( minersList , unit ) ;
36703: LD_ADDR_VAR 0 6
36707: PUSH
36708: LD_EXP 132
36712: PPUSH
36713: LD_VAR 0 1
36717: PPUSH
36718: CALL 42221 0 2
36722: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36723: LD_ADDR_VAR 0 8
36727: PUSH
36728: LD_EXP 134
36732: PUSH
36733: LD_EXP 133
36737: PUSH
36738: LD_VAR 0 6
36742: ARRAY
36743: MINUS
36744: ST_TO_ADDR
// if not minesFreeAmount then
36745: LD_VAR 0 8
36749: NOT
36750: IFFALSE 36754
// exit ;
36752: GO 37025
// tmp := [ ] ;
36754: LD_ADDR_VAR 0 7
36758: PUSH
36759: EMPTY
36760: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36761: LD_ADDR_VAR 0 5
36765: PUSH
36766: DOUBLE
36767: LD_INT 1
36769: DEC
36770: ST_TO_ADDR
36771: LD_VAR 0 8
36775: PUSH
36776: FOR_TO
36777: IFFALSE 36972
// begin _d := rand ( 0 , 5 ) ;
36779: LD_ADDR_VAR 0 11
36783: PUSH
36784: LD_INT 0
36786: PPUSH
36787: LD_INT 5
36789: PPUSH
36790: CALL_OW 12
36794: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36795: LD_ADDR_VAR 0 12
36799: PUSH
36800: LD_INT 2
36802: PPUSH
36803: LD_INT 6
36805: PPUSH
36806: CALL_OW 12
36810: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36811: LD_ADDR_VAR 0 9
36815: PUSH
36816: LD_VAR 0 2
36820: PPUSH
36821: LD_VAR 0 11
36825: PPUSH
36826: LD_VAR 0 12
36830: PPUSH
36831: CALL_OW 272
36835: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36836: LD_ADDR_VAR 0 10
36840: PUSH
36841: LD_VAR 0 3
36845: PPUSH
36846: LD_VAR 0 11
36850: PPUSH
36851: LD_VAR 0 12
36855: PPUSH
36856: CALL_OW 273
36860: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36861: LD_VAR 0 9
36865: PPUSH
36866: LD_VAR 0 10
36870: PPUSH
36871: CALL_OW 488
36875: PUSH
36876: LD_VAR 0 9
36880: PUSH
36881: LD_VAR 0 10
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_VAR 0 7
36894: IN
36895: NOT
36896: AND
36897: PUSH
36898: LD_VAR 0 9
36902: PPUSH
36903: LD_VAR 0 10
36907: PPUSH
36908: CALL_OW 458
36912: NOT
36913: AND
36914: IFFALSE 36956
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36916: LD_ADDR_VAR 0 7
36920: PUSH
36921: LD_VAR 0 7
36925: PPUSH
36926: LD_VAR 0 7
36930: PUSH
36931: LD_INT 1
36933: PLUS
36934: PPUSH
36935: LD_VAR 0 9
36939: PUSH
36940: LD_VAR 0 10
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PPUSH
36949: CALL_OW 1
36953: ST_TO_ADDR
36954: GO 36970
// i := i - 1 ;
36956: LD_ADDR_VAR 0 5
36960: PUSH
36961: LD_VAR 0 5
36965: PUSH
36966: LD_INT 1
36968: MINUS
36969: ST_TO_ADDR
// end ;
36970: GO 36776
36972: POP
36973: POP
// for i in tmp do
36974: LD_ADDR_VAR 0 5
36978: PUSH
36979: LD_VAR 0 7
36983: PUSH
36984: FOR_IN
36985: IFFALSE 37023
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36987: LD_VAR 0 1
36991: PPUSH
36992: LD_VAR 0 5
36996: PUSH
36997: LD_INT 1
36999: ARRAY
37000: PPUSH
37001: LD_VAR 0 5
37005: PUSH
37006: LD_INT 2
37008: ARRAY
37009: PPUSH
37010: CALL 35965 0 3
37014: NOT
37015: IFFALSE 37021
// exit ;
37017: POP
37018: POP
37019: GO 37025
37021: GO 36984
37023: POP
37024: POP
// end ;
37025: LD_VAR 0 4
37029: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37030: LD_INT 0
37032: PPUSH
37033: PPUSH
37034: PPUSH
37035: PPUSH
37036: PPUSH
37037: PPUSH
37038: PPUSH
// if not GetClass ( unit ) = class_sniper then
37039: LD_VAR 0 1
37043: PPUSH
37044: CALL_OW 257
37048: PUSH
37049: LD_INT 5
37051: EQUAL
37052: NOT
37053: IFFALSE 37057
// exit ;
37055: GO 37445
// dist := 8 ;
37057: LD_ADDR_VAR 0 5
37061: PUSH
37062: LD_INT 8
37064: ST_TO_ADDR
// viewRange := 12 ;
37065: LD_ADDR_VAR 0 7
37069: PUSH
37070: LD_INT 12
37072: ST_TO_ADDR
// side := GetSide ( unit ) ;
37073: LD_ADDR_VAR 0 6
37077: PUSH
37078: LD_VAR 0 1
37082: PPUSH
37083: CALL_OW 255
37087: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37088: LD_INT 61
37090: PPUSH
37091: LD_VAR 0 6
37095: PPUSH
37096: CALL_OW 321
37100: PUSH
37101: LD_INT 2
37103: EQUAL
37104: IFFALSE 37114
// viewRange := 16 ;
37106: LD_ADDR_VAR 0 7
37110: PUSH
37111: LD_INT 16
37113: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37114: LD_VAR 0 1
37118: PPUSH
37119: LD_VAR 0 2
37123: PPUSH
37124: LD_VAR 0 3
37128: PPUSH
37129: CALL_OW 297
37133: PUSH
37134: LD_VAR 0 5
37138: GREATER
37139: IFFALSE 37218
// begin ComMoveXY ( unit , x , y ) ;
37141: LD_VAR 0 1
37145: PPUSH
37146: LD_VAR 0 2
37150: PPUSH
37151: LD_VAR 0 3
37155: PPUSH
37156: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37160: LD_INT 35
37162: PPUSH
37163: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37167: LD_VAR 0 1
37171: PPUSH
37172: LD_VAR 0 2
37176: PPUSH
37177: LD_VAR 0 3
37181: PPUSH
37182: CALL 72993 0 3
37186: NOT
37187: IFFALSE 37191
// exit ;
37189: GO 37445
// until GetDistUnitXY ( unit , x , y ) < dist ;
37191: LD_VAR 0 1
37195: PPUSH
37196: LD_VAR 0 2
37200: PPUSH
37201: LD_VAR 0 3
37205: PPUSH
37206: CALL_OW 297
37210: PUSH
37211: LD_VAR 0 5
37215: LESS
37216: IFFALSE 37160
// end ; ComTurnXY ( unit , x , y ) ;
37218: LD_VAR 0 1
37222: PPUSH
37223: LD_VAR 0 2
37227: PPUSH
37228: LD_VAR 0 3
37232: PPUSH
37233: CALL_OW 118
// wait ( 5 ) ;
37237: LD_INT 5
37239: PPUSH
37240: CALL_OW 67
// _d := GetDir ( unit ) ;
37244: LD_ADDR_VAR 0 10
37248: PUSH
37249: LD_VAR 0 1
37253: PPUSH
37254: CALL_OW 254
37258: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37259: LD_ADDR_VAR 0 8
37263: PUSH
37264: LD_VAR 0 1
37268: PPUSH
37269: CALL_OW 250
37273: PPUSH
37274: LD_VAR 0 10
37278: PPUSH
37279: LD_VAR 0 5
37283: PPUSH
37284: CALL_OW 272
37288: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37289: LD_ADDR_VAR 0 9
37293: PUSH
37294: LD_VAR 0 1
37298: PPUSH
37299: CALL_OW 251
37303: PPUSH
37304: LD_VAR 0 10
37308: PPUSH
37309: LD_VAR 0 5
37313: PPUSH
37314: CALL_OW 273
37318: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37319: LD_VAR 0 8
37323: PPUSH
37324: LD_VAR 0 9
37328: PPUSH
37329: CALL_OW 488
37333: NOT
37334: IFFALSE 37338
// exit ;
37336: GO 37445
// ComAnimCustom ( unit , 1 ) ;
37338: LD_VAR 0 1
37342: PPUSH
37343: LD_INT 1
37345: PPUSH
37346: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37350: LD_VAR 0 8
37354: PPUSH
37355: LD_VAR 0 9
37359: PPUSH
37360: LD_VAR 0 6
37364: PPUSH
37365: LD_VAR 0 7
37369: PPUSH
37370: CALL_OW 330
// repeat wait ( 1 ) ;
37374: LD_INT 1
37376: PPUSH
37377: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37381: LD_VAR 0 1
37385: PPUSH
37386: CALL_OW 316
37390: PUSH
37391: LD_VAR 0 1
37395: PPUSH
37396: CALL_OW 314
37400: OR
37401: PUSH
37402: LD_VAR 0 1
37406: PPUSH
37407: CALL_OW 302
37411: NOT
37412: OR
37413: PUSH
37414: LD_VAR 0 1
37418: PPUSH
37419: CALL_OW 301
37423: OR
37424: IFFALSE 37374
// RemoveSeeing ( _x , _y , side ) ;
37426: LD_VAR 0 8
37430: PPUSH
37431: LD_VAR 0 9
37435: PPUSH
37436: LD_VAR 0 6
37440: PPUSH
37441: CALL_OW 331
// end ; end_of_file
37445: LD_VAR 0 4
37449: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37450: LD_INT 0
37452: PPUSH
37453: PPUSH
// if exist_mode then
37454: LD_VAR 0 2
37458: IFFALSE 37483
// unit := CreateCharacter ( prefix & ident ) else
37460: LD_ADDR_VAR 0 5
37464: PUSH
37465: LD_VAR 0 3
37469: PUSH
37470: LD_VAR 0 1
37474: STR
37475: PPUSH
37476: CALL_OW 34
37480: ST_TO_ADDR
37481: GO 37498
// unit := NewCharacter ( ident ) ;
37483: LD_ADDR_VAR 0 5
37487: PUSH
37488: LD_VAR 0 1
37492: PPUSH
37493: CALL_OW 25
37497: ST_TO_ADDR
// result := unit ;
37498: LD_ADDR_VAR 0 4
37502: PUSH
37503: LD_VAR 0 5
37507: ST_TO_ADDR
// end ;
37508: LD_VAR 0 4
37512: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37513: LD_INT 0
37515: PPUSH
37516: PPUSH
// if not side or not nation then
37517: LD_VAR 0 1
37521: NOT
37522: PUSH
37523: LD_VAR 0 2
37527: NOT
37528: OR
37529: IFFALSE 37533
// exit ;
37531: GO 38301
// case nation of nation_american :
37533: LD_VAR 0 2
37537: PUSH
37538: LD_INT 1
37540: DOUBLE
37541: EQUAL
37542: IFTRUE 37546
37544: GO 37760
37546: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37547: LD_ADDR_VAR 0 4
37551: PUSH
37552: LD_INT 35
37554: PUSH
37555: LD_INT 45
37557: PUSH
37558: LD_INT 46
37560: PUSH
37561: LD_INT 47
37563: PUSH
37564: LD_INT 82
37566: PUSH
37567: LD_INT 83
37569: PUSH
37570: LD_INT 84
37572: PUSH
37573: LD_INT 85
37575: PUSH
37576: LD_INT 86
37578: PUSH
37579: LD_INT 1
37581: PUSH
37582: LD_INT 2
37584: PUSH
37585: LD_INT 6
37587: PUSH
37588: LD_INT 15
37590: PUSH
37591: LD_INT 16
37593: PUSH
37594: LD_INT 7
37596: PUSH
37597: LD_INT 12
37599: PUSH
37600: LD_INT 13
37602: PUSH
37603: LD_INT 10
37605: PUSH
37606: LD_INT 14
37608: PUSH
37609: LD_INT 20
37611: PUSH
37612: LD_INT 21
37614: PUSH
37615: LD_INT 22
37617: PUSH
37618: LD_INT 25
37620: PUSH
37621: LD_INT 32
37623: PUSH
37624: LD_INT 27
37626: PUSH
37627: LD_INT 36
37629: PUSH
37630: LD_INT 69
37632: PUSH
37633: LD_INT 39
37635: PUSH
37636: LD_INT 34
37638: PUSH
37639: LD_INT 40
37641: PUSH
37642: LD_INT 48
37644: PUSH
37645: LD_INT 49
37647: PUSH
37648: LD_INT 50
37650: PUSH
37651: LD_INT 51
37653: PUSH
37654: LD_INT 52
37656: PUSH
37657: LD_INT 53
37659: PUSH
37660: LD_INT 54
37662: PUSH
37663: LD_INT 55
37665: PUSH
37666: LD_INT 56
37668: PUSH
37669: LD_INT 57
37671: PUSH
37672: LD_INT 58
37674: PUSH
37675: LD_INT 59
37677: PUSH
37678: LD_INT 60
37680: PUSH
37681: LD_INT 61
37683: PUSH
37684: LD_INT 62
37686: PUSH
37687: LD_INT 80
37689: PUSH
37690: LD_INT 82
37692: PUSH
37693: LD_INT 83
37695: PUSH
37696: LD_INT 84
37698: PUSH
37699: LD_INT 85
37701: PUSH
37702: LD_INT 86
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: ST_TO_ADDR
37758: GO 38225
37760: LD_INT 2
37762: DOUBLE
37763: EQUAL
37764: IFTRUE 37768
37766: GO 37994
37768: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37769: LD_ADDR_VAR 0 4
37773: PUSH
37774: LD_INT 35
37776: PUSH
37777: LD_INT 45
37779: PUSH
37780: LD_INT 46
37782: PUSH
37783: LD_INT 47
37785: PUSH
37786: LD_INT 82
37788: PUSH
37789: LD_INT 83
37791: PUSH
37792: LD_INT 84
37794: PUSH
37795: LD_INT 85
37797: PUSH
37798: LD_INT 87
37800: PUSH
37801: LD_INT 70
37803: PUSH
37804: LD_INT 1
37806: PUSH
37807: LD_INT 11
37809: PUSH
37810: LD_INT 3
37812: PUSH
37813: LD_INT 4
37815: PUSH
37816: LD_INT 5
37818: PUSH
37819: LD_INT 6
37821: PUSH
37822: LD_INT 15
37824: PUSH
37825: LD_INT 18
37827: PUSH
37828: LD_INT 7
37830: PUSH
37831: LD_INT 17
37833: PUSH
37834: LD_INT 8
37836: PUSH
37837: LD_INT 20
37839: PUSH
37840: LD_INT 21
37842: PUSH
37843: LD_INT 22
37845: PUSH
37846: LD_INT 72
37848: PUSH
37849: LD_INT 26
37851: PUSH
37852: LD_INT 69
37854: PUSH
37855: LD_INT 39
37857: PUSH
37858: LD_INT 40
37860: PUSH
37861: LD_INT 41
37863: PUSH
37864: LD_INT 42
37866: PUSH
37867: LD_INT 43
37869: PUSH
37870: LD_INT 48
37872: PUSH
37873: LD_INT 49
37875: PUSH
37876: LD_INT 50
37878: PUSH
37879: LD_INT 51
37881: PUSH
37882: LD_INT 52
37884: PUSH
37885: LD_INT 53
37887: PUSH
37888: LD_INT 54
37890: PUSH
37891: LD_INT 55
37893: PUSH
37894: LD_INT 56
37896: PUSH
37897: LD_INT 60
37899: PUSH
37900: LD_INT 61
37902: PUSH
37903: LD_INT 62
37905: PUSH
37906: LD_INT 66
37908: PUSH
37909: LD_INT 67
37911: PUSH
37912: LD_INT 68
37914: PUSH
37915: LD_INT 81
37917: PUSH
37918: LD_INT 82
37920: PUSH
37921: LD_INT 83
37923: PUSH
37924: LD_INT 84
37926: PUSH
37927: LD_INT 85
37929: PUSH
37930: LD_INT 87
37932: PUSH
37933: LD_INT 88
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: ST_TO_ADDR
37992: GO 38225
37994: LD_INT 3
37996: DOUBLE
37997: EQUAL
37998: IFTRUE 38002
38000: GO 38224
38002: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38003: LD_ADDR_VAR 0 4
38007: PUSH
38008: LD_INT 46
38010: PUSH
38011: LD_INT 47
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: LD_INT 2
38019: PUSH
38020: LD_INT 82
38022: PUSH
38023: LD_INT 83
38025: PUSH
38026: LD_INT 84
38028: PUSH
38029: LD_INT 85
38031: PUSH
38032: LD_INT 86
38034: PUSH
38035: LD_INT 11
38037: PUSH
38038: LD_INT 9
38040: PUSH
38041: LD_INT 20
38043: PUSH
38044: LD_INT 19
38046: PUSH
38047: LD_INT 21
38049: PUSH
38050: LD_INT 24
38052: PUSH
38053: LD_INT 22
38055: PUSH
38056: LD_INT 25
38058: PUSH
38059: LD_INT 28
38061: PUSH
38062: LD_INT 29
38064: PUSH
38065: LD_INT 30
38067: PUSH
38068: LD_INT 31
38070: PUSH
38071: LD_INT 37
38073: PUSH
38074: LD_INT 38
38076: PUSH
38077: LD_INT 32
38079: PUSH
38080: LD_INT 27
38082: PUSH
38083: LD_INT 33
38085: PUSH
38086: LD_INT 69
38088: PUSH
38089: LD_INT 39
38091: PUSH
38092: LD_INT 34
38094: PUSH
38095: LD_INT 40
38097: PUSH
38098: LD_INT 71
38100: PUSH
38101: LD_INT 23
38103: PUSH
38104: LD_INT 44
38106: PUSH
38107: LD_INT 48
38109: PUSH
38110: LD_INT 49
38112: PUSH
38113: LD_INT 50
38115: PUSH
38116: LD_INT 51
38118: PUSH
38119: LD_INT 52
38121: PUSH
38122: LD_INT 53
38124: PUSH
38125: LD_INT 54
38127: PUSH
38128: LD_INT 55
38130: PUSH
38131: LD_INT 56
38133: PUSH
38134: LD_INT 57
38136: PUSH
38137: LD_INT 58
38139: PUSH
38140: LD_INT 59
38142: PUSH
38143: LD_INT 63
38145: PUSH
38146: LD_INT 64
38148: PUSH
38149: LD_INT 65
38151: PUSH
38152: LD_INT 82
38154: PUSH
38155: LD_INT 83
38157: PUSH
38158: LD_INT 84
38160: PUSH
38161: LD_INT 85
38163: PUSH
38164: LD_INT 86
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: ST_TO_ADDR
38222: GO 38225
38224: POP
// if state > - 1 and state < 3 then
38225: LD_VAR 0 3
38229: PUSH
38230: LD_INT 1
38232: NEG
38233: GREATER
38234: PUSH
38235: LD_VAR 0 3
38239: PUSH
38240: LD_INT 3
38242: LESS
38243: AND
38244: IFFALSE 38301
// for i in result do
38246: LD_ADDR_VAR 0 5
38250: PUSH
38251: LD_VAR 0 4
38255: PUSH
38256: FOR_IN
38257: IFFALSE 38299
// if GetTech ( i , side ) <> state then
38259: LD_VAR 0 5
38263: PPUSH
38264: LD_VAR 0 1
38268: PPUSH
38269: CALL_OW 321
38273: PUSH
38274: LD_VAR 0 3
38278: NONEQUAL
38279: IFFALSE 38297
// result := result diff i ;
38281: LD_ADDR_VAR 0 4
38285: PUSH
38286: LD_VAR 0 4
38290: PUSH
38291: LD_VAR 0 5
38295: DIFF
38296: ST_TO_ADDR
38297: GO 38256
38299: POP
38300: POP
// end ;
38301: LD_VAR 0 4
38305: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38306: LD_INT 0
38308: PPUSH
38309: PPUSH
38310: PPUSH
// result := true ;
38311: LD_ADDR_VAR 0 3
38315: PUSH
38316: LD_INT 1
38318: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38319: LD_ADDR_VAR 0 5
38323: PUSH
38324: LD_VAR 0 2
38328: PPUSH
38329: CALL_OW 480
38333: ST_TO_ADDR
// if not tmp then
38334: LD_VAR 0 5
38338: NOT
38339: IFFALSE 38343
// exit ;
38341: GO 38392
// for i in tmp do
38343: LD_ADDR_VAR 0 4
38347: PUSH
38348: LD_VAR 0 5
38352: PUSH
38353: FOR_IN
38354: IFFALSE 38390
// if GetTech ( i , side ) <> state_researched then
38356: LD_VAR 0 4
38360: PPUSH
38361: LD_VAR 0 1
38365: PPUSH
38366: CALL_OW 321
38370: PUSH
38371: LD_INT 2
38373: NONEQUAL
38374: IFFALSE 38388
// begin result := false ;
38376: LD_ADDR_VAR 0 3
38380: PUSH
38381: LD_INT 0
38383: ST_TO_ADDR
// exit ;
38384: POP
38385: POP
38386: GO 38392
// end ;
38388: GO 38353
38390: POP
38391: POP
// end ;
38392: LD_VAR 0 3
38396: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38397: LD_INT 0
38399: PPUSH
38400: PPUSH
38401: PPUSH
38402: PPUSH
38403: PPUSH
38404: PPUSH
38405: PPUSH
38406: PPUSH
38407: PPUSH
38408: PPUSH
38409: PPUSH
38410: PPUSH
38411: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38412: LD_VAR 0 1
38416: NOT
38417: PUSH
38418: LD_VAR 0 1
38422: PPUSH
38423: CALL_OW 257
38427: PUSH
38428: LD_INT 9
38430: NONEQUAL
38431: OR
38432: IFFALSE 38436
// exit ;
38434: GO 39009
// side := GetSide ( unit ) ;
38436: LD_ADDR_VAR 0 9
38440: PUSH
38441: LD_VAR 0 1
38445: PPUSH
38446: CALL_OW 255
38450: ST_TO_ADDR
// tech_space := tech_spacanom ;
38451: LD_ADDR_VAR 0 12
38455: PUSH
38456: LD_INT 29
38458: ST_TO_ADDR
// tech_time := tech_taurad ;
38459: LD_ADDR_VAR 0 13
38463: PUSH
38464: LD_INT 28
38466: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38467: LD_ADDR_VAR 0 11
38471: PUSH
38472: LD_VAR 0 1
38476: PPUSH
38477: CALL_OW 310
38481: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38482: LD_VAR 0 11
38486: PPUSH
38487: CALL_OW 247
38491: PUSH
38492: LD_INT 2
38494: EQUAL
38495: IFFALSE 38499
// exit ;
38497: GO 39009
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38499: LD_ADDR_VAR 0 8
38503: PUSH
38504: LD_INT 81
38506: PUSH
38507: LD_VAR 0 9
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 3
38518: PUSH
38519: LD_INT 21
38521: PUSH
38522: LD_INT 3
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PPUSH
38537: CALL_OW 69
38541: ST_TO_ADDR
// if not tmp then
38542: LD_VAR 0 8
38546: NOT
38547: IFFALSE 38551
// exit ;
38549: GO 39009
// if in_unit then
38551: LD_VAR 0 11
38555: IFFALSE 38579
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38557: LD_ADDR_VAR 0 10
38561: PUSH
38562: LD_VAR 0 8
38566: PPUSH
38567: LD_VAR 0 11
38571: PPUSH
38572: CALL_OW 74
38576: ST_TO_ADDR
38577: GO 38599
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38579: LD_ADDR_VAR 0 10
38583: PUSH
38584: LD_VAR 0 8
38588: PPUSH
38589: LD_VAR 0 1
38593: PPUSH
38594: CALL_OW 74
38598: ST_TO_ADDR
// if not enemy then
38599: LD_VAR 0 10
38603: NOT
38604: IFFALSE 38608
// exit ;
38606: GO 39009
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38608: LD_VAR 0 11
38612: PUSH
38613: LD_VAR 0 11
38617: PPUSH
38618: LD_VAR 0 10
38622: PPUSH
38623: CALL_OW 296
38627: PUSH
38628: LD_INT 13
38630: GREATER
38631: AND
38632: PUSH
38633: LD_VAR 0 1
38637: PPUSH
38638: LD_VAR 0 10
38642: PPUSH
38643: CALL_OW 296
38647: PUSH
38648: LD_INT 12
38650: GREATER
38651: OR
38652: IFFALSE 38656
// exit ;
38654: GO 39009
// missile := [ 1 ] ;
38656: LD_ADDR_VAR 0 14
38660: PUSH
38661: LD_INT 1
38663: PUSH
38664: EMPTY
38665: LIST
38666: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38667: LD_VAR 0 9
38671: PPUSH
38672: LD_VAR 0 12
38676: PPUSH
38677: CALL_OW 325
38681: IFFALSE 38710
// missile := Insert ( missile , missile + 1 , 2 ) ;
38683: LD_ADDR_VAR 0 14
38687: PUSH
38688: LD_VAR 0 14
38692: PPUSH
38693: LD_VAR 0 14
38697: PUSH
38698: LD_INT 1
38700: PLUS
38701: PPUSH
38702: LD_INT 2
38704: PPUSH
38705: CALL_OW 2
38709: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38710: LD_VAR 0 9
38714: PPUSH
38715: LD_VAR 0 13
38719: PPUSH
38720: CALL_OW 325
38724: PUSH
38725: LD_VAR 0 10
38729: PPUSH
38730: CALL_OW 255
38734: PPUSH
38735: LD_VAR 0 13
38739: PPUSH
38740: CALL_OW 325
38744: NOT
38745: AND
38746: IFFALSE 38775
// missile := Insert ( missile , missile + 1 , 3 ) ;
38748: LD_ADDR_VAR 0 14
38752: PUSH
38753: LD_VAR 0 14
38757: PPUSH
38758: LD_VAR 0 14
38762: PUSH
38763: LD_INT 1
38765: PLUS
38766: PPUSH
38767: LD_INT 3
38769: PPUSH
38770: CALL_OW 2
38774: ST_TO_ADDR
// if missile < 2 then
38775: LD_VAR 0 14
38779: PUSH
38780: LD_INT 2
38782: LESS
38783: IFFALSE 38787
// exit ;
38785: GO 39009
// x := GetX ( enemy ) ;
38787: LD_ADDR_VAR 0 4
38791: PUSH
38792: LD_VAR 0 10
38796: PPUSH
38797: CALL_OW 250
38801: ST_TO_ADDR
// y := GetY ( enemy ) ;
38802: LD_ADDR_VAR 0 5
38806: PUSH
38807: LD_VAR 0 10
38811: PPUSH
38812: CALL_OW 251
38816: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38817: LD_ADDR_VAR 0 6
38821: PUSH
38822: LD_VAR 0 4
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PPUSH
38831: LD_INT 1
38833: PPUSH
38834: CALL_OW 12
38838: PLUS
38839: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38840: LD_ADDR_VAR 0 7
38844: PUSH
38845: LD_VAR 0 5
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PPUSH
38854: LD_INT 1
38856: PPUSH
38857: CALL_OW 12
38861: PLUS
38862: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38863: LD_VAR 0 6
38867: PPUSH
38868: LD_VAR 0 7
38872: PPUSH
38873: CALL_OW 488
38877: NOT
38878: IFFALSE 38900
// begin _x := x ;
38880: LD_ADDR_VAR 0 6
38884: PUSH
38885: LD_VAR 0 4
38889: ST_TO_ADDR
// _y := y ;
38890: LD_ADDR_VAR 0 7
38894: PUSH
38895: LD_VAR 0 5
38899: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38900: LD_ADDR_VAR 0 3
38904: PUSH
38905: LD_INT 1
38907: PPUSH
38908: LD_VAR 0 14
38912: PPUSH
38913: CALL_OW 12
38917: ST_TO_ADDR
// case i of 1 :
38918: LD_VAR 0 3
38922: PUSH
38923: LD_INT 1
38925: DOUBLE
38926: EQUAL
38927: IFTRUE 38931
38929: GO 38948
38931: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38932: LD_VAR 0 1
38936: PPUSH
38937: LD_VAR 0 10
38941: PPUSH
38942: CALL_OW 115
38946: GO 39009
38948: LD_INT 2
38950: DOUBLE
38951: EQUAL
38952: IFTRUE 38956
38954: GO 38978
38956: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38957: LD_VAR 0 1
38961: PPUSH
38962: LD_VAR 0 6
38966: PPUSH
38967: LD_VAR 0 7
38971: PPUSH
38972: CALL_OW 153
38976: GO 39009
38978: LD_INT 3
38980: DOUBLE
38981: EQUAL
38982: IFTRUE 38986
38984: GO 39008
38986: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38987: LD_VAR 0 1
38991: PPUSH
38992: LD_VAR 0 6
38996: PPUSH
38997: LD_VAR 0 7
39001: PPUSH
39002: CALL_OW 154
39006: GO 39009
39008: POP
// end ;
39009: LD_VAR 0 2
39013: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39014: LD_INT 0
39016: PPUSH
39017: PPUSH
39018: PPUSH
39019: PPUSH
39020: PPUSH
39021: PPUSH
// if not unit or not building then
39022: LD_VAR 0 1
39026: NOT
39027: PUSH
39028: LD_VAR 0 2
39032: NOT
39033: OR
39034: IFFALSE 39038
// exit ;
39036: GO 39196
// x := GetX ( building ) ;
39038: LD_ADDR_VAR 0 5
39042: PUSH
39043: LD_VAR 0 2
39047: PPUSH
39048: CALL_OW 250
39052: ST_TO_ADDR
// y := GetY ( building ) ;
39053: LD_ADDR_VAR 0 6
39057: PUSH
39058: LD_VAR 0 2
39062: PPUSH
39063: CALL_OW 251
39067: ST_TO_ADDR
// for i = 0 to 5 do
39068: LD_ADDR_VAR 0 4
39072: PUSH
39073: DOUBLE
39074: LD_INT 0
39076: DEC
39077: ST_TO_ADDR
39078: LD_INT 5
39080: PUSH
39081: FOR_TO
39082: IFFALSE 39194
// begin _x := ShiftX ( x , i , 3 ) ;
39084: LD_ADDR_VAR 0 7
39088: PUSH
39089: LD_VAR 0 5
39093: PPUSH
39094: LD_VAR 0 4
39098: PPUSH
39099: LD_INT 3
39101: PPUSH
39102: CALL_OW 272
39106: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39107: LD_ADDR_VAR 0 8
39111: PUSH
39112: LD_VAR 0 6
39116: PPUSH
39117: LD_VAR 0 4
39121: PPUSH
39122: LD_INT 3
39124: PPUSH
39125: CALL_OW 273
39129: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39130: LD_VAR 0 7
39134: PPUSH
39135: LD_VAR 0 8
39139: PPUSH
39140: CALL_OW 488
39144: NOT
39145: IFFALSE 39149
// continue ;
39147: GO 39081
// if HexInfo ( _x , _y ) = 0 then
39149: LD_VAR 0 7
39153: PPUSH
39154: LD_VAR 0 8
39158: PPUSH
39159: CALL_OW 428
39163: PUSH
39164: LD_INT 0
39166: EQUAL
39167: IFFALSE 39192
// begin ComMoveXY ( unit , _x , _y ) ;
39169: LD_VAR 0 1
39173: PPUSH
39174: LD_VAR 0 7
39178: PPUSH
39179: LD_VAR 0 8
39183: PPUSH
39184: CALL_OW 111
// exit ;
39188: POP
39189: POP
39190: GO 39196
// end ; end ;
39192: GO 39081
39194: POP
39195: POP
// end ;
39196: LD_VAR 0 3
39200: RET
// export function ScanBase ( side , base_area ) ; begin
39201: LD_INT 0
39203: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39204: LD_ADDR_VAR 0 3
39208: PUSH
39209: LD_VAR 0 2
39213: PPUSH
39214: LD_INT 81
39216: PUSH
39217: LD_VAR 0 1
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PPUSH
39226: CALL_OW 70
39230: ST_TO_ADDR
// end ;
39231: LD_VAR 0 3
39235: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39236: LD_INT 0
39238: PPUSH
39239: PPUSH
39240: PPUSH
39241: PPUSH
// result := false ;
39242: LD_ADDR_VAR 0 2
39246: PUSH
39247: LD_INT 0
39249: ST_TO_ADDR
// side := GetSide ( unit ) ;
39250: LD_ADDR_VAR 0 3
39254: PUSH
39255: LD_VAR 0 1
39259: PPUSH
39260: CALL_OW 255
39264: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39265: LD_ADDR_VAR 0 4
39269: PUSH
39270: LD_VAR 0 1
39274: PPUSH
39275: CALL_OW 248
39279: ST_TO_ADDR
// case nat of 1 :
39280: LD_VAR 0 4
39284: PUSH
39285: LD_INT 1
39287: DOUBLE
39288: EQUAL
39289: IFTRUE 39293
39291: GO 39304
39293: POP
// tech := tech_lassight ; 2 :
39294: LD_ADDR_VAR 0 5
39298: PUSH
39299: LD_INT 12
39301: ST_TO_ADDR
39302: GO 39343
39304: LD_INT 2
39306: DOUBLE
39307: EQUAL
39308: IFTRUE 39312
39310: GO 39323
39312: POP
// tech := tech_mortar ; 3 :
39313: LD_ADDR_VAR 0 5
39317: PUSH
39318: LD_INT 41
39320: ST_TO_ADDR
39321: GO 39343
39323: LD_INT 3
39325: DOUBLE
39326: EQUAL
39327: IFTRUE 39331
39329: GO 39342
39331: POP
// tech := tech_bazooka ; end ;
39332: LD_ADDR_VAR 0 5
39336: PUSH
39337: LD_INT 44
39339: ST_TO_ADDR
39340: GO 39343
39342: POP
// if Researched ( side , tech ) then
39343: LD_VAR 0 3
39347: PPUSH
39348: LD_VAR 0 5
39352: PPUSH
39353: CALL_OW 325
39357: IFFALSE 39384
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39359: LD_ADDR_VAR 0 2
39363: PUSH
39364: LD_INT 5
39366: PUSH
39367: LD_INT 8
39369: PUSH
39370: LD_INT 9
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: LIST
39377: PUSH
39378: LD_VAR 0 4
39382: ARRAY
39383: ST_TO_ADDR
// end ;
39384: LD_VAR 0 2
39388: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39389: LD_INT 0
39391: PPUSH
39392: PPUSH
39393: PPUSH
// if not mines then
39394: LD_VAR 0 2
39398: NOT
39399: IFFALSE 39403
// exit ;
39401: GO 39547
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39403: LD_ADDR_VAR 0 5
39407: PUSH
39408: LD_INT 81
39410: PUSH
39411: LD_VAR 0 1
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 3
39422: PUSH
39423: LD_INT 21
39425: PUSH
39426: LD_INT 3
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PPUSH
39441: CALL_OW 69
39445: ST_TO_ADDR
// for i in mines do
39446: LD_ADDR_VAR 0 4
39450: PUSH
39451: LD_VAR 0 2
39455: PUSH
39456: FOR_IN
39457: IFFALSE 39545
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39459: LD_VAR 0 4
39463: PUSH
39464: LD_INT 1
39466: ARRAY
39467: PPUSH
39468: LD_VAR 0 4
39472: PUSH
39473: LD_INT 2
39475: ARRAY
39476: PPUSH
39477: CALL_OW 458
39481: NOT
39482: IFFALSE 39486
// continue ;
39484: GO 39456
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39486: LD_VAR 0 4
39490: PUSH
39491: LD_INT 1
39493: ARRAY
39494: PPUSH
39495: LD_VAR 0 4
39499: PUSH
39500: LD_INT 2
39502: ARRAY
39503: PPUSH
39504: CALL_OW 428
39508: PUSH
39509: LD_VAR 0 5
39513: IN
39514: IFFALSE 39543
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39516: LD_VAR 0 4
39520: PUSH
39521: LD_INT 1
39523: ARRAY
39524: PPUSH
39525: LD_VAR 0 4
39529: PUSH
39530: LD_INT 2
39532: ARRAY
39533: PPUSH
39534: LD_VAR 0 1
39538: PPUSH
39539: CALL_OW 456
// end ;
39543: GO 39456
39545: POP
39546: POP
// end ;
39547: LD_VAR 0 3
39551: RET
// export function Count ( array ) ; var i ; begin
39552: LD_INT 0
39554: PPUSH
39555: PPUSH
// result := 0 ;
39556: LD_ADDR_VAR 0 2
39560: PUSH
39561: LD_INT 0
39563: ST_TO_ADDR
// for i in array do
39564: LD_ADDR_VAR 0 3
39568: PUSH
39569: LD_VAR 0 1
39573: PUSH
39574: FOR_IN
39575: IFFALSE 39599
// if i then
39577: LD_VAR 0 3
39581: IFFALSE 39597
// result := result + 1 ;
39583: LD_ADDR_VAR 0 2
39587: PUSH
39588: LD_VAR 0 2
39592: PUSH
39593: LD_INT 1
39595: PLUS
39596: ST_TO_ADDR
39597: GO 39574
39599: POP
39600: POP
// end ;
39601: LD_VAR 0 2
39605: RET
// export function IsEmpty ( building ) ; begin
39606: LD_INT 0
39608: PPUSH
// if not building then
39609: LD_VAR 0 1
39613: NOT
39614: IFFALSE 39618
// exit ;
39616: GO 39661
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39618: LD_ADDR_VAR 0 2
39622: PUSH
39623: LD_VAR 0 1
39627: PUSH
39628: LD_INT 22
39630: PUSH
39631: LD_VAR 0 1
39635: PPUSH
39636: CALL_OW 255
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 58
39647: PUSH
39648: EMPTY
39649: LIST
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PPUSH
39655: CALL_OW 69
39659: IN
39660: ST_TO_ADDR
// end ;
39661: LD_VAR 0 2
39665: RET
// export function IsNotFull ( building ) ; begin
39666: LD_INT 0
39668: PPUSH
// if not building then
39669: LD_VAR 0 1
39673: NOT
39674: IFFALSE 39678
// exit ;
39676: GO 39697
// result := UnitsInside ( building ) < 6 ;
39678: LD_ADDR_VAR 0 2
39682: PUSH
39683: LD_VAR 0 1
39687: PPUSH
39688: CALL_OW 313
39692: PUSH
39693: LD_INT 6
39695: LESS
39696: ST_TO_ADDR
// end ;
39697: LD_VAR 0 2
39701: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39702: LD_INT 0
39704: PPUSH
39705: PPUSH
39706: PPUSH
39707: PPUSH
// tmp := [ ] ;
39708: LD_ADDR_VAR 0 3
39712: PUSH
39713: EMPTY
39714: ST_TO_ADDR
// list := [ ] ;
39715: LD_ADDR_VAR 0 5
39719: PUSH
39720: EMPTY
39721: ST_TO_ADDR
// for i = 16 to 25 do
39722: LD_ADDR_VAR 0 4
39726: PUSH
39727: DOUBLE
39728: LD_INT 16
39730: DEC
39731: ST_TO_ADDR
39732: LD_INT 25
39734: PUSH
39735: FOR_TO
39736: IFFALSE 39809
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39738: LD_ADDR_VAR 0 3
39742: PUSH
39743: LD_VAR 0 3
39747: PUSH
39748: LD_INT 22
39750: PUSH
39751: LD_VAR 0 1
39755: PPUSH
39756: CALL_OW 255
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 91
39767: PUSH
39768: LD_VAR 0 1
39772: PUSH
39773: LD_INT 6
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 30
39783: PUSH
39784: LD_VAR 0 4
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: LIST
39797: PUSH
39798: EMPTY
39799: LIST
39800: PPUSH
39801: CALL_OW 69
39805: ADD
39806: ST_TO_ADDR
39807: GO 39735
39809: POP
39810: POP
// for i = 1 to tmp do
39811: LD_ADDR_VAR 0 4
39815: PUSH
39816: DOUBLE
39817: LD_INT 1
39819: DEC
39820: ST_TO_ADDR
39821: LD_VAR 0 3
39825: PUSH
39826: FOR_TO
39827: IFFALSE 39915
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39829: LD_ADDR_VAR 0 5
39833: PUSH
39834: LD_VAR 0 5
39838: PUSH
39839: LD_VAR 0 3
39843: PUSH
39844: LD_VAR 0 4
39848: ARRAY
39849: PPUSH
39850: CALL_OW 266
39854: PUSH
39855: LD_VAR 0 3
39859: PUSH
39860: LD_VAR 0 4
39864: ARRAY
39865: PPUSH
39866: CALL_OW 250
39870: PUSH
39871: LD_VAR 0 3
39875: PUSH
39876: LD_VAR 0 4
39880: ARRAY
39881: PPUSH
39882: CALL_OW 251
39886: PUSH
39887: LD_VAR 0 3
39891: PUSH
39892: LD_VAR 0 4
39896: ARRAY
39897: PPUSH
39898: CALL_OW 254
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: PUSH
39909: EMPTY
39910: LIST
39911: ADD
39912: ST_TO_ADDR
39913: GO 39826
39915: POP
39916: POP
// result := list ;
39917: LD_ADDR_VAR 0 2
39921: PUSH
39922: LD_VAR 0 5
39926: ST_TO_ADDR
// end ;
39927: LD_VAR 0 2
39931: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39932: LD_INT 0
39934: PPUSH
39935: PPUSH
39936: PPUSH
39937: PPUSH
39938: PPUSH
39939: PPUSH
39940: PPUSH
// if not factory then
39941: LD_VAR 0 1
39945: NOT
39946: IFFALSE 39950
// exit ;
39948: GO 40543
// if control = control_apeman then
39950: LD_VAR 0 4
39954: PUSH
39955: LD_INT 5
39957: EQUAL
39958: IFFALSE 40067
// begin tmp := UnitsInside ( factory ) ;
39960: LD_ADDR_VAR 0 8
39964: PUSH
39965: LD_VAR 0 1
39969: PPUSH
39970: CALL_OW 313
39974: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39975: LD_VAR 0 8
39979: PPUSH
39980: LD_INT 25
39982: PUSH
39983: LD_INT 12
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PPUSH
39990: CALL_OW 72
39994: NOT
39995: IFFALSE 40005
// control := control_manual ;
39997: LD_ADDR_VAR 0 4
40001: PUSH
40002: LD_INT 1
40004: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40005: LD_ADDR_VAR 0 8
40009: PUSH
40010: LD_VAR 0 1
40014: PPUSH
40015: CALL 39702 0 1
40019: ST_TO_ADDR
// if tmp then
40020: LD_VAR 0 8
40024: IFFALSE 40067
// begin for i in tmp do
40026: LD_ADDR_VAR 0 7
40030: PUSH
40031: LD_VAR 0 8
40035: PUSH
40036: FOR_IN
40037: IFFALSE 40065
// if i [ 1 ] = b_ext_radio then
40039: LD_VAR 0 7
40043: PUSH
40044: LD_INT 1
40046: ARRAY
40047: PUSH
40048: LD_INT 22
40050: EQUAL
40051: IFFALSE 40063
// begin control := control_remote ;
40053: LD_ADDR_VAR 0 4
40057: PUSH
40058: LD_INT 2
40060: ST_TO_ADDR
// break ;
40061: GO 40065
// end ;
40063: GO 40036
40065: POP
40066: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40067: LD_VAR 0 1
40071: PPUSH
40072: LD_VAR 0 2
40076: PPUSH
40077: LD_VAR 0 3
40081: PPUSH
40082: LD_VAR 0 4
40086: PPUSH
40087: LD_VAR 0 5
40091: PPUSH
40092: CALL_OW 448
40096: IFFALSE 40131
// begin result := [ chassis , engine , control , weapon ] ;
40098: LD_ADDR_VAR 0 6
40102: PUSH
40103: LD_VAR 0 2
40107: PUSH
40108: LD_VAR 0 3
40112: PUSH
40113: LD_VAR 0 4
40117: PUSH
40118: LD_VAR 0 5
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: ST_TO_ADDR
// exit ;
40129: GO 40543
// end ; _chassis := AvailableChassisList ( factory ) ;
40131: LD_ADDR_VAR 0 9
40135: PUSH
40136: LD_VAR 0 1
40140: PPUSH
40141: CALL_OW 475
40145: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40146: LD_ADDR_VAR 0 11
40150: PUSH
40151: LD_VAR 0 1
40155: PPUSH
40156: CALL_OW 476
40160: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40161: LD_ADDR_VAR 0 12
40165: PUSH
40166: LD_VAR 0 1
40170: PPUSH
40171: CALL_OW 477
40175: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40176: LD_ADDR_VAR 0 10
40180: PUSH
40181: LD_VAR 0 1
40185: PPUSH
40186: CALL_OW 478
40190: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40191: LD_VAR 0 9
40195: NOT
40196: PUSH
40197: LD_VAR 0 11
40201: NOT
40202: OR
40203: PUSH
40204: LD_VAR 0 12
40208: NOT
40209: OR
40210: PUSH
40211: LD_VAR 0 10
40215: NOT
40216: OR
40217: IFFALSE 40252
// begin result := [ chassis , engine , control , weapon ] ;
40219: LD_ADDR_VAR 0 6
40223: PUSH
40224: LD_VAR 0 2
40228: PUSH
40229: LD_VAR 0 3
40233: PUSH
40234: LD_VAR 0 4
40238: PUSH
40239: LD_VAR 0 5
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: ST_TO_ADDR
// exit ;
40250: GO 40543
// end ; if not chassis in _chassis then
40252: LD_VAR 0 2
40256: PUSH
40257: LD_VAR 0 9
40261: IN
40262: NOT
40263: IFFALSE 40289
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40265: LD_ADDR_VAR 0 2
40269: PUSH
40270: LD_VAR 0 9
40274: PUSH
40275: LD_INT 1
40277: PPUSH
40278: LD_VAR 0 9
40282: PPUSH
40283: CALL_OW 12
40287: ARRAY
40288: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40289: LD_VAR 0 2
40293: PPUSH
40294: LD_VAR 0 3
40298: PPUSH
40299: CALL 40548 0 2
40303: NOT
40304: IFFALSE 40363
// repeat engine := _engine [ 1 ] ;
40306: LD_ADDR_VAR 0 3
40310: PUSH
40311: LD_VAR 0 11
40315: PUSH
40316: LD_INT 1
40318: ARRAY
40319: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40320: LD_ADDR_VAR 0 11
40324: PUSH
40325: LD_VAR 0 11
40329: PPUSH
40330: LD_INT 1
40332: PPUSH
40333: CALL_OW 3
40337: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40338: LD_VAR 0 2
40342: PPUSH
40343: LD_VAR 0 3
40347: PPUSH
40348: CALL 40548 0 2
40352: PUSH
40353: LD_VAR 0 11
40357: PUSH
40358: EMPTY
40359: EQUAL
40360: OR
40361: IFFALSE 40306
// if not control in _control then
40363: LD_VAR 0 4
40367: PUSH
40368: LD_VAR 0 12
40372: IN
40373: NOT
40374: IFFALSE 40400
// control := _control [ rand ( 1 , _control ) ] ;
40376: LD_ADDR_VAR 0 4
40380: PUSH
40381: LD_VAR 0 12
40385: PUSH
40386: LD_INT 1
40388: PPUSH
40389: LD_VAR 0 12
40393: PPUSH
40394: CALL_OW 12
40398: ARRAY
40399: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40400: LD_VAR 0 2
40404: PPUSH
40405: LD_VAR 0 5
40409: PPUSH
40410: CALL 40768 0 2
40414: NOT
40415: IFFALSE 40474
// repeat weapon := _weapon [ 1 ] ;
40417: LD_ADDR_VAR 0 5
40421: PUSH
40422: LD_VAR 0 10
40426: PUSH
40427: LD_INT 1
40429: ARRAY
40430: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40431: LD_ADDR_VAR 0 10
40435: PUSH
40436: LD_VAR 0 10
40440: PPUSH
40441: LD_INT 1
40443: PPUSH
40444: CALL_OW 3
40448: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40449: LD_VAR 0 2
40453: PPUSH
40454: LD_VAR 0 5
40458: PPUSH
40459: CALL 40768 0 2
40463: PUSH
40464: LD_VAR 0 10
40468: PUSH
40469: EMPTY
40470: EQUAL
40471: OR
40472: IFFALSE 40417
// result := [ ] ;
40474: LD_ADDR_VAR 0 6
40478: PUSH
40479: EMPTY
40480: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40481: LD_VAR 0 1
40485: PPUSH
40486: LD_VAR 0 2
40490: PPUSH
40491: LD_VAR 0 3
40495: PPUSH
40496: LD_VAR 0 4
40500: PPUSH
40501: LD_VAR 0 5
40505: PPUSH
40506: CALL_OW 448
40510: IFFALSE 40543
// result := [ chassis , engine , control , weapon ] ;
40512: LD_ADDR_VAR 0 6
40516: PUSH
40517: LD_VAR 0 2
40521: PUSH
40522: LD_VAR 0 3
40526: PUSH
40527: LD_VAR 0 4
40531: PUSH
40532: LD_VAR 0 5
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: ST_TO_ADDR
// end ;
40543: LD_VAR 0 6
40547: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40548: LD_INT 0
40550: PPUSH
// if not chassis or not engine then
40551: LD_VAR 0 1
40555: NOT
40556: PUSH
40557: LD_VAR 0 2
40561: NOT
40562: OR
40563: IFFALSE 40567
// exit ;
40565: GO 40763
// case engine of engine_solar :
40567: LD_VAR 0 2
40571: PUSH
40572: LD_INT 2
40574: DOUBLE
40575: EQUAL
40576: IFTRUE 40580
40578: GO 40618
40580: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40581: LD_ADDR_VAR 0 3
40585: PUSH
40586: LD_INT 11
40588: PUSH
40589: LD_INT 12
40591: PUSH
40592: LD_INT 13
40594: PUSH
40595: LD_INT 14
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 3
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: ST_TO_ADDR
40616: GO 40747
40618: LD_INT 1
40620: DOUBLE
40621: EQUAL
40622: IFTRUE 40626
40624: GO 40688
40626: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40627: LD_ADDR_VAR 0 3
40631: PUSH
40632: LD_INT 11
40634: PUSH
40635: LD_INT 12
40637: PUSH
40638: LD_INT 13
40640: PUSH
40641: LD_INT 14
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: LD_INT 2
40649: PUSH
40650: LD_INT 3
40652: PUSH
40653: LD_INT 4
40655: PUSH
40656: LD_INT 5
40658: PUSH
40659: LD_INT 21
40661: PUSH
40662: LD_INT 23
40664: PUSH
40665: LD_INT 22
40667: PUSH
40668: LD_INT 24
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: ST_TO_ADDR
40686: GO 40747
40688: LD_INT 3
40690: DOUBLE
40691: EQUAL
40692: IFTRUE 40696
40694: GO 40746
40696: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40697: LD_ADDR_VAR 0 3
40701: PUSH
40702: LD_INT 13
40704: PUSH
40705: LD_INT 14
40707: PUSH
40708: LD_INT 2
40710: PUSH
40711: LD_INT 3
40713: PUSH
40714: LD_INT 4
40716: PUSH
40717: LD_INT 5
40719: PUSH
40720: LD_INT 21
40722: PUSH
40723: LD_INT 22
40725: PUSH
40726: LD_INT 23
40728: PUSH
40729: LD_INT 24
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: ST_TO_ADDR
40744: GO 40747
40746: POP
// result := ( chassis in result ) ;
40747: LD_ADDR_VAR 0 3
40751: PUSH
40752: LD_VAR 0 1
40756: PUSH
40757: LD_VAR 0 3
40761: IN
40762: ST_TO_ADDR
// end ;
40763: LD_VAR 0 3
40767: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40768: LD_INT 0
40770: PPUSH
// if not chassis or not weapon then
40771: LD_VAR 0 1
40775: NOT
40776: PUSH
40777: LD_VAR 0 2
40781: NOT
40782: OR
40783: IFFALSE 40787
// exit ;
40785: GO 41849
// case weapon of us_machine_gun :
40787: LD_VAR 0 2
40791: PUSH
40792: LD_INT 2
40794: DOUBLE
40795: EQUAL
40796: IFTRUE 40800
40798: GO 40830
40800: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40801: LD_ADDR_VAR 0 3
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: LD_INT 3
40814: PUSH
40815: LD_INT 4
40817: PUSH
40818: LD_INT 5
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: ST_TO_ADDR
40828: GO 41833
40830: LD_INT 3
40832: DOUBLE
40833: EQUAL
40834: IFTRUE 40838
40836: GO 40868
40838: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40839: LD_ADDR_VAR 0 3
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: LD_INT 2
40849: PUSH
40850: LD_INT 3
40852: PUSH
40853: LD_INT 4
40855: PUSH
40856: LD_INT 5
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: ST_TO_ADDR
40866: GO 41833
40868: LD_INT 11
40870: DOUBLE
40871: EQUAL
40872: IFTRUE 40876
40874: GO 40906
40876: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40877: LD_ADDR_VAR 0 3
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: LD_INT 2
40887: PUSH
40888: LD_INT 3
40890: PUSH
40891: LD_INT 4
40893: PUSH
40894: LD_INT 5
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: ST_TO_ADDR
40904: GO 41833
40906: LD_INT 4
40908: DOUBLE
40909: EQUAL
40910: IFTRUE 40914
40912: GO 40940
40914: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40915: LD_ADDR_VAR 0 3
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: LD_INT 3
40925: PUSH
40926: LD_INT 4
40928: PUSH
40929: LD_INT 5
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: ST_TO_ADDR
40938: GO 41833
40940: LD_INT 5
40942: DOUBLE
40943: EQUAL
40944: IFTRUE 40948
40946: GO 40974
40948: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40949: LD_ADDR_VAR 0 3
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: LD_INT 3
40959: PUSH
40960: LD_INT 4
40962: PUSH
40963: LD_INT 5
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: ST_TO_ADDR
40972: GO 41833
40974: LD_INT 9
40976: DOUBLE
40977: EQUAL
40978: IFTRUE 40982
40980: GO 41008
40982: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40983: LD_ADDR_VAR 0 3
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: LD_INT 3
40993: PUSH
40994: LD_INT 4
40996: PUSH
40997: LD_INT 5
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: ST_TO_ADDR
41006: GO 41833
41008: LD_INT 7
41010: DOUBLE
41011: EQUAL
41012: IFTRUE 41016
41014: GO 41042
41016: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41017: LD_ADDR_VAR 0 3
41021: PUSH
41022: LD_INT 2
41024: PUSH
41025: LD_INT 3
41027: PUSH
41028: LD_INT 4
41030: PUSH
41031: LD_INT 5
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: ST_TO_ADDR
41040: GO 41833
41042: LD_INT 12
41044: DOUBLE
41045: EQUAL
41046: IFTRUE 41050
41048: GO 41076
41050: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41051: LD_ADDR_VAR 0 3
41055: PUSH
41056: LD_INT 2
41058: PUSH
41059: LD_INT 3
41061: PUSH
41062: LD_INT 4
41064: PUSH
41065: LD_INT 5
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: ST_TO_ADDR
41074: GO 41833
41076: LD_INT 13
41078: DOUBLE
41079: EQUAL
41080: IFTRUE 41084
41082: GO 41110
41084: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41085: LD_ADDR_VAR 0 3
41089: PUSH
41090: LD_INT 2
41092: PUSH
41093: LD_INT 3
41095: PUSH
41096: LD_INT 4
41098: PUSH
41099: LD_INT 5
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: ST_TO_ADDR
41108: GO 41833
41110: LD_INT 14
41112: DOUBLE
41113: EQUAL
41114: IFTRUE 41118
41116: GO 41136
41118: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41119: LD_ADDR_VAR 0 3
41123: PUSH
41124: LD_INT 4
41126: PUSH
41127: LD_INT 5
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: ST_TO_ADDR
41134: GO 41833
41136: LD_INT 6
41138: DOUBLE
41139: EQUAL
41140: IFTRUE 41144
41142: GO 41162
41144: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41145: LD_ADDR_VAR 0 3
41149: PUSH
41150: LD_INT 4
41152: PUSH
41153: LD_INT 5
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: ST_TO_ADDR
41160: GO 41833
41162: LD_INT 10
41164: DOUBLE
41165: EQUAL
41166: IFTRUE 41170
41168: GO 41188
41170: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41171: LD_ADDR_VAR 0 3
41175: PUSH
41176: LD_INT 4
41178: PUSH
41179: LD_INT 5
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: ST_TO_ADDR
41186: GO 41833
41188: LD_INT 22
41190: DOUBLE
41191: EQUAL
41192: IFTRUE 41196
41194: GO 41222
41196: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41197: LD_ADDR_VAR 0 3
41201: PUSH
41202: LD_INT 11
41204: PUSH
41205: LD_INT 12
41207: PUSH
41208: LD_INT 13
41210: PUSH
41211: LD_INT 14
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: ST_TO_ADDR
41220: GO 41833
41222: LD_INT 23
41224: DOUBLE
41225: EQUAL
41226: IFTRUE 41230
41228: GO 41256
41230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41231: LD_ADDR_VAR 0 3
41235: PUSH
41236: LD_INT 11
41238: PUSH
41239: LD_INT 12
41241: PUSH
41242: LD_INT 13
41244: PUSH
41245: LD_INT 14
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: ST_TO_ADDR
41254: GO 41833
41256: LD_INT 24
41258: DOUBLE
41259: EQUAL
41260: IFTRUE 41264
41262: GO 41290
41264: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41265: LD_ADDR_VAR 0 3
41269: PUSH
41270: LD_INT 11
41272: PUSH
41273: LD_INT 12
41275: PUSH
41276: LD_INT 13
41278: PUSH
41279: LD_INT 14
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: ST_TO_ADDR
41288: GO 41833
41290: LD_INT 30
41292: DOUBLE
41293: EQUAL
41294: IFTRUE 41298
41296: GO 41324
41298: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41299: LD_ADDR_VAR 0 3
41303: PUSH
41304: LD_INT 11
41306: PUSH
41307: LD_INT 12
41309: PUSH
41310: LD_INT 13
41312: PUSH
41313: LD_INT 14
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: ST_TO_ADDR
41322: GO 41833
41324: LD_INT 25
41326: DOUBLE
41327: EQUAL
41328: IFTRUE 41332
41330: GO 41350
41332: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41333: LD_ADDR_VAR 0 3
41337: PUSH
41338: LD_INT 13
41340: PUSH
41341: LD_INT 14
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: ST_TO_ADDR
41348: GO 41833
41350: LD_INT 27
41352: DOUBLE
41353: EQUAL
41354: IFTRUE 41358
41356: GO 41376
41358: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41359: LD_ADDR_VAR 0 3
41363: PUSH
41364: LD_INT 13
41366: PUSH
41367: LD_INT 14
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: ST_TO_ADDR
41374: GO 41833
41376: LD_EXP 54
41380: DOUBLE
41381: EQUAL
41382: IFTRUE 41386
41384: GO 41412
41386: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41387: LD_ADDR_VAR 0 3
41391: PUSH
41392: LD_INT 11
41394: PUSH
41395: LD_INT 12
41397: PUSH
41398: LD_INT 13
41400: PUSH
41401: LD_INT 14
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: ST_TO_ADDR
41410: GO 41833
41412: LD_INT 28
41414: DOUBLE
41415: EQUAL
41416: IFTRUE 41420
41418: GO 41438
41420: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41421: LD_ADDR_VAR 0 3
41425: PUSH
41426: LD_INT 13
41428: PUSH
41429: LD_INT 14
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: ST_TO_ADDR
41436: GO 41833
41438: LD_INT 29
41440: DOUBLE
41441: EQUAL
41442: IFTRUE 41446
41444: GO 41464
41446: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41447: LD_ADDR_VAR 0 3
41451: PUSH
41452: LD_INT 13
41454: PUSH
41455: LD_INT 14
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: ST_TO_ADDR
41462: GO 41833
41464: LD_INT 31
41466: DOUBLE
41467: EQUAL
41468: IFTRUE 41472
41470: GO 41490
41472: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41473: LD_ADDR_VAR 0 3
41477: PUSH
41478: LD_INT 13
41480: PUSH
41481: LD_INT 14
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: ST_TO_ADDR
41488: GO 41833
41490: LD_INT 26
41492: DOUBLE
41493: EQUAL
41494: IFTRUE 41498
41496: GO 41516
41498: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41499: LD_ADDR_VAR 0 3
41503: PUSH
41504: LD_INT 13
41506: PUSH
41507: LD_INT 14
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: ST_TO_ADDR
41514: GO 41833
41516: LD_INT 42
41518: DOUBLE
41519: EQUAL
41520: IFTRUE 41524
41522: GO 41550
41524: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41525: LD_ADDR_VAR 0 3
41529: PUSH
41530: LD_INT 21
41532: PUSH
41533: LD_INT 22
41535: PUSH
41536: LD_INT 23
41538: PUSH
41539: LD_INT 24
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: ST_TO_ADDR
41548: GO 41833
41550: LD_INT 43
41552: DOUBLE
41553: EQUAL
41554: IFTRUE 41558
41556: GO 41584
41558: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41559: LD_ADDR_VAR 0 3
41563: PUSH
41564: LD_INT 21
41566: PUSH
41567: LD_INT 22
41569: PUSH
41570: LD_INT 23
41572: PUSH
41573: LD_INT 24
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: ST_TO_ADDR
41582: GO 41833
41584: LD_INT 44
41586: DOUBLE
41587: EQUAL
41588: IFTRUE 41592
41590: GO 41618
41592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41593: LD_ADDR_VAR 0 3
41597: PUSH
41598: LD_INT 21
41600: PUSH
41601: LD_INT 22
41603: PUSH
41604: LD_INT 23
41606: PUSH
41607: LD_INT 24
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: ST_TO_ADDR
41616: GO 41833
41618: LD_INT 45
41620: DOUBLE
41621: EQUAL
41622: IFTRUE 41626
41624: GO 41652
41626: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41627: LD_ADDR_VAR 0 3
41631: PUSH
41632: LD_INT 21
41634: PUSH
41635: LD_INT 22
41637: PUSH
41638: LD_INT 23
41640: PUSH
41641: LD_INT 24
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: ST_TO_ADDR
41650: GO 41833
41652: LD_INT 49
41654: DOUBLE
41655: EQUAL
41656: IFTRUE 41660
41658: GO 41686
41660: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41661: LD_ADDR_VAR 0 3
41665: PUSH
41666: LD_INT 21
41668: PUSH
41669: LD_INT 22
41671: PUSH
41672: LD_INT 23
41674: PUSH
41675: LD_INT 24
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: ST_TO_ADDR
41684: GO 41833
41686: LD_INT 51
41688: DOUBLE
41689: EQUAL
41690: IFTRUE 41694
41692: GO 41720
41694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41695: LD_ADDR_VAR 0 3
41699: PUSH
41700: LD_INT 21
41702: PUSH
41703: LD_INT 22
41705: PUSH
41706: LD_INT 23
41708: PUSH
41709: LD_INT 24
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: ST_TO_ADDR
41718: GO 41833
41720: LD_INT 52
41722: DOUBLE
41723: EQUAL
41724: IFTRUE 41728
41726: GO 41754
41728: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41729: LD_ADDR_VAR 0 3
41733: PUSH
41734: LD_INT 21
41736: PUSH
41737: LD_INT 22
41739: PUSH
41740: LD_INT 23
41742: PUSH
41743: LD_INT 24
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: ST_TO_ADDR
41752: GO 41833
41754: LD_INT 53
41756: DOUBLE
41757: EQUAL
41758: IFTRUE 41762
41760: GO 41780
41762: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41763: LD_ADDR_VAR 0 3
41767: PUSH
41768: LD_INT 23
41770: PUSH
41771: LD_INT 24
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: ST_TO_ADDR
41778: GO 41833
41780: LD_INT 46
41782: DOUBLE
41783: EQUAL
41784: IFTRUE 41788
41786: GO 41806
41788: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41789: LD_ADDR_VAR 0 3
41793: PUSH
41794: LD_INT 23
41796: PUSH
41797: LD_INT 24
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: ST_TO_ADDR
41804: GO 41833
41806: LD_INT 47
41808: DOUBLE
41809: EQUAL
41810: IFTRUE 41814
41812: GO 41832
41814: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41815: LD_ADDR_VAR 0 3
41819: PUSH
41820: LD_INT 23
41822: PUSH
41823: LD_INT 24
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: ST_TO_ADDR
41830: GO 41833
41832: POP
// result := ( chassis in result ) ;
41833: LD_ADDR_VAR 0 3
41837: PUSH
41838: LD_VAR 0 1
41842: PUSH
41843: LD_VAR 0 3
41847: IN
41848: ST_TO_ADDR
// end ;
41849: LD_VAR 0 3
41853: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41854: LD_INT 0
41856: PPUSH
41857: PPUSH
41858: PPUSH
41859: PPUSH
41860: PPUSH
41861: PPUSH
41862: PPUSH
// result := array ;
41863: LD_ADDR_VAR 0 5
41867: PUSH
41868: LD_VAR 0 1
41872: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41873: LD_VAR 0 1
41877: NOT
41878: PUSH
41879: LD_VAR 0 2
41883: NOT
41884: OR
41885: PUSH
41886: LD_VAR 0 3
41890: NOT
41891: OR
41892: PUSH
41893: LD_VAR 0 2
41897: PUSH
41898: LD_VAR 0 1
41902: GREATER
41903: OR
41904: PUSH
41905: LD_VAR 0 3
41909: PUSH
41910: LD_VAR 0 1
41914: GREATER
41915: OR
41916: IFFALSE 41920
// exit ;
41918: GO 42216
// if direction then
41920: LD_VAR 0 4
41924: IFFALSE 41988
// begin d := 1 ;
41926: LD_ADDR_VAR 0 9
41930: PUSH
41931: LD_INT 1
41933: ST_TO_ADDR
// if i_from > i_to then
41934: LD_VAR 0 2
41938: PUSH
41939: LD_VAR 0 3
41943: GREATER
41944: IFFALSE 41970
// length := ( array - i_from ) + i_to else
41946: LD_ADDR_VAR 0 11
41950: PUSH
41951: LD_VAR 0 1
41955: PUSH
41956: LD_VAR 0 2
41960: MINUS
41961: PUSH
41962: LD_VAR 0 3
41966: PLUS
41967: ST_TO_ADDR
41968: GO 41986
// length := i_to - i_from ;
41970: LD_ADDR_VAR 0 11
41974: PUSH
41975: LD_VAR 0 3
41979: PUSH
41980: LD_VAR 0 2
41984: MINUS
41985: ST_TO_ADDR
// end else
41986: GO 42049
// begin d := - 1 ;
41988: LD_ADDR_VAR 0 9
41992: PUSH
41993: LD_INT 1
41995: NEG
41996: ST_TO_ADDR
// if i_from > i_to then
41997: LD_VAR 0 2
42001: PUSH
42002: LD_VAR 0 3
42006: GREATER
42007: IFFALSE 42027
// length := i_from - i_to else
42009: LD_ADDR_VAR 0 11
42013: PUSH
42014: LD_VAR 0 2
42018: PUSH
42019: LD_VAR 0 3
42023: MINUS
42024: ST_TO_ADDR
42025: GO 42049
// length := ( array - i_to ) + i_from ;
42027: LD_ADDR_VAR 0 11
42031: PUSH
42032: LD_VAR 0 1
42036: PUSH
42037: LD_VAR 0 3
42041: MINUS
42042: PUSH
42043: LD_VAR 0 2
42047: PLUS
42048: ST_TO_ADDR
// end ; if not length then
42049: LD_VAR 0 11
42053: NOT
42054: IFFALSE 42058
// exit ;
42056: GO 42216
// tmp := array ;
42058: LD_ADDR_VAR 0 10
42062: PUSH
42063: LD_VAR 0 1
42067: ST_TO_ADDR
// for i = 1 to length do
42068: LD_ADDR_VAR 0 6
42072: PUSH
42073: DOUBLE
42074: LD_INT 1
42076: DEC
42077: ST_TO_ADDR
42078: LD_VAR 0 11
42082: PUSH
42083: FOR_TO
42084: IFFALSE 42204
// begin for j = 1 to array do
42086: LD_ADDR_VAR 0 7
42090: PUSH
42091: DOUBLE
42092: LD_INT 1
42094: DEC
42095: ST_TO_ADDR
42096: LD_VAR 0 1
42100: PUSH
42101: FOR_TO
42102: IFFALSE 42190
// begin k := j + d ;
42104: LD_ADDR_VAR 0 8
42108: PUSH
42109: LD_VAR 0 7
42113: PUSH
42114: LD_VAR 0 9
42118: PLUS
42119: ST_TO_ADDR
// if k > array then
42120: LD_VAR 0 8
42124: PUSH
42125: LD_VAR 0 1
42129: GREATER
42130: IFFALSE 42140
// k := 1 ;
42132: LD_ADDR_VAR 0 8
42136: PUSH
42137: LD_INT 1
42139: ST_TO_ADDR
// if not k then
42140: LD_VAR 0 8
42144: NOT
42145: IFFALSE 42157
// k := array ;
42147: LD_ADDR_VAR 0 8
42151: PUSH
42152: LD_VAR 0 1
42156: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42157: LD_ADDR_VAR 0 10
42161: PUSH
42162: LD_VAR 0 10
42166: PPUSH
42167: LD_VAR 0 8
42171: PPUSH
42172: LD_VAR 0 1
42176: PUSH
42177: LD_VAR 0 7
42181: ARRAY
42182: PPUSH
42183: CALL_OW 1
42187: ST_TO_ADDR
// end ;
42188: GO 42101
42190: POP
42191: POP
// array := tmp ;
42192: LD_ADDR_VAR 0 1
42196: PUSH
42197: LD_VAR 0 10
42201: ST_TO_ADDR
// end ;
42202: GO 42083
42204: POP
42205: POP
// result := array ;
42206: LD_ADDR_VAR 0 5
42210: PUSH
42211: LD_VAR 0 1
42215: ST_TO_ADDR
// end ;
42216: LD_VAR 0 5
42220: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42221: LD_INT 0
42223: PPUSH
42224: PPUSH
// result := 0 ;
42225: LD_ADDR_VAR 0 3
42229: PUSH
42230: LD_INT 0
42232: ST_TO_ADDR
// if not array or not value in array then
42233: LD_VAR 0 1
42237: NOT
42238: PUSH
42239: LD_VAR 0 2
42243: PUSH
42244: LD_VAR 0 1
42248: IN
42249: NOT
42250: OR
42251: IFFALSE 42255
// exit ;
42253: GO 42309
// for i = 1 to array do
42255: LD_ADDR_VAR 0 4
42259: PUSH
42260: DOUBLE
42261: LD_INT 1
42263: DEC
42264: ST_TO_ADDR
42265: LD_VAR 0 1
42269: PUSH
42270: FOR_TO
42271: IFFALSE 42307
// if value = array [ i ] then
42273: LD_VAR 0 2
42277: PUSH
42278: LD_VAR 0 1
42282: PUSH
42283: LD_VAR 0 4
42287: ARRAY
42288: EQUAL
42289: IFFALSE 42305
// begin result := i ;
42291: LD_ADDR_VAR 0 3
42295: PUSH
42296: LD_VAR 0 4
42300: ST_TO_ADDR
// exit ;
42301: POP
42302: POP
42303: GO 42309
// end ;
42305: GO 42270
42307: POP
42308: POP
// end ;
42309: LD_VAR 0 3
42313: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42314: LD_INT 0
42316: PPUSH
// vc_chassis := chassis ;
42317: LD_ADDR_OWVAR 37
42321: PUSH
42322: LD_VAR 0 1
42326: ST_TO_ADDR
// vc_engine := engine ;
42327: LD_ADDR_OWVAR 39
42331: PUSH
42332: LD_VAR 0 2
42336: ST_TO_ADDR
// vc_control := control ;
42337: LD_ADDR_OWVAR 38
42341: PUSH
42342: LD_VAR 0 3
42346: ST_TO_ADDR
// vc_weapon := weapon ;
42347: LD_ADDR_OWVAR 40
42351: PUSH
42352: LD_VAR 0 4
42356: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42357: LD_ADDR_OWVAR 41
42361: PUSH
42362: LD_VAR 0 5
42366: ST_TO_ADDR
// end ;
42367: LD_VAR 0 6
42371: RET
// export function WantPlant ( unit ) ; var task ; begin
42372: LD_INT 0
42374: PPUSH
42375: PPUSH
// result := false ;
42376: LD_ADDR_VAR 0 2
42380: PUSH
42381: LD_INT 0
42383: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42384: LD_ADDR_VAR 0 3
42388: PUSH
42389: LD_VAR 0 1
42393: PPUSH
42394: CALL_OW 437
42398: ST_TO_ADDR
// if task then
42399: LD_VAR 0 3
42403: IFFALSE 42431
// if task [ 1 ] [ 1 ] = p then
42405: LD_VAR 0 3
42409: PUSH
42410: LD_INT 1
42412: ARRAY
42413: PUSH
42414: LD_INT 1
42416: ARRAY
42417: PUSH
42418: LD_STRING p
42420: EQUAL
42421: IFFALSE 42431
// result := true ;
42423: LD_ADDR_VAR 0 2
42427: PUSH
42428: LD_INT 1
42430: ST_TO_ADDR
// end ;
42431: LD_VAR 0 2
42435: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42436: LD_INT 0
42438: PPUSH
42439: PPUSH
42440: PPUSH
42441: PPUSH
// if pos < 1 then
42442: LD_VAR 0 2
42446: PUSH
42447: LD_INT 1
42449: LESS
42450: IFFALSE 42454
// exit ;
42452: GO 42757
// if pos = 1 then
42454: LD_VAR 0 2
42458: PUSH
42459: LD_INT 1
42461: EQUAL
42462: IFFALSE 42495
// result := Replace ( arr , pos [ 1 ] , value ) else
42464: LD_ADDR_VAR 0 4
42468: PUSH
42469: LD_VAR 0 1
42473: PPUSH
42474: LD_VAR 0 2
42478: PUSH
42479: LD_INT 1
42481: ARRAY
42482: PPUSH
42483: LD_VAR 0 3
42487: PPUSH
42488: CALL_OW 1
42492: ST_TO_ADDR
42493: GO 42757
// begin tmp := arr ;
42495: LD_ADDR_VAR 0 6
42499: PUSH
42500: LD_VAR 0 1
42504: ST_TO_ADDR
// s_arr := [ tmp ] ;
42505: LD_ADDR_VAR 0 7
42509: PUSH
42510: LD_VAR 0 6
42514: PUSH
42515: EMPTY
42516: LIST
42517: ST_TO_ADDR
// for i = 1 to pos - 1 do
42518: LD_ADDR_VAR 0 5
42522: PUSH
42523: DOUBLE
42524: LD_INT 1
42526: DEC
42527: ST_TO_ADDR
42528: LD_VAR 0 2
42532: PUSH
42533: LD_INT 1
42535: MINUS
42536: PUSH
42537: FOR_TO
42538: IFFALSE 42583
// begin tmp := tmp [ pos [ i ] ] ;
42540: LD_ADDR_VAR 0 6
42544: PUSH
42545: LD_VAR 0 6
42549: PUSH
42550: LD_VAR 0 2
42554: PUSH
42555: LD_VAR 0 5
42559: ARRAY
42560: ARRAY
42561: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42562: LD_ADDR_VAR 0 7
42566: PUSH
42567: LD_VAR 0 7
42571: PUSH
42572: LD_VAR 0 6
42576: PUSH
42577: EMPTY
42578: LIST
42579: ADD
42580: ST_TO_ADDR
// end ;
42581: GO 42537
42583: POP
42584: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42585: LD_ADDR_VAR 0 6
42589: PUSH
42590: LD_VAR 0 6
42594: PPUSH
42595: LD_VAR 0 2
42599: PUSH
42600: LD_VAR 0 2
42604: ARRAY
42605: PPUSH
42606: LD_VAR 0 3
42610: PPUSH
42611: CALL_OW 1
42615: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42616: LD_ADDR_VAR 0 7
42620: PUSH
42621: LD_VAR 0 7
42625: PPUSH
42626: LD_VAR 0 7
42630: PPUSH
42631: LD_VAR 0 6
42635: PPUSH
42636: CALL_OW 1
42640: ST_TO_ADDR
// for i = s_arr downto 2 do
42641: LD_ADDR_VAR 0 5
42645: PUSH
42646: DOUBLE
42647: LD_VAR 0 7
42651: INC
42652: ST_TO_ADDR
42653: LD_INT 2
42655: PUSH
42656: FOR_DOWNTO
42657: IFFALSE 42741
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42659: LD_ADDR_VAR 0 6
42663: PUSH
42664: LD_VAR 0 7
42668: PUSH
42669: LD_VAR 0 5
42673: PUSH
42674: LD_INT 1
42676: MINUS
42677: ARRAY
42678: PPUSH
42679: LD_VAR 0 2
42683: PUSH
42684: LD_VAR 0 5
42688: PUSH
42689: LD_INT 1
42691: MINUS
42692: ARRAY
42693: PPUSH
42694: LD_VAR 0 7
42698: PUSH
42699: LD_VAR 0 5
42703: ARRAY
42704: PPUSH
42705: CALL_OW 1
42709: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42710: LD_ADDR_VAR 0 7
42714: PUSH
42715: LD_VAR 0 7
42719: PPUSH
42720: LD_VAR 0 5
42724: PUSH
42725: LD_INT 1
42727: MINUS
42728: PPUSH
42729: LD_VAR 0 6
42733: PPUSH
42734: CALL_OW 1
42738: ST_TO_ADDR
// end ;
42739: GO 42656
42741: POP
42742: POP
// result := s_arr [ 1 ] ;
42743: LD_ADDR_VAR 0 4
42747: PUSH
42748: LD_VAR 0 7
42752: PUSH
42753: LD_INT 1
42755: ARRAY
42756: ST_TO_ADDR
// end ; end ;
42757: LD_VAR 0 4
42761: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42762: LD_INT 0
42764: PPUSH
42765: PPUSH
// if not list then
42766: LD_VAR 0 1
42770: NOT
42771: IFFALSE 42775
// exit ;
42773: GO 42866
// i := list [ pos1 ] ;
42775: LD_ADDR_VAR 0 5
42779: PUSH
42780: LD_VAR 0 1
42784: PUSH
42785: LD_VAR 0 2
42789: ARRAY
42790: ST_TO_ADDR
// if not i then
42791: LD_VAR 0 5
42795: NOT
42796: IFFALSE 42800
// exit ;
42798: GO 42866
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42800: LD_ADDR_VAR 0 1
42804: PUSH
42805: LD_VAR 0 1
42809: PPUSH
42810: LD_VAR 0 2
42814: PPUSH
42815: LD_VAR 0 1
42819: PUSH
42820: LD_VAR 0 3
42824: ARRAY
42825: PPUSH
42826: CALL_OW 1
42830: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42831: LD_ADDR_VAR 0 1
42835: PUSH
42836: LD_VAR 0 1
42840: PPUSH
42841: LD_VAR 0 3
42845: PPUSH
42846: LD_VAR 0 5
42850: PPUSH
42851: CALL_OW 1
42855: ST_TO_ADDR
// result := list ;
42856: LD_ADDR_VAR 0 4
42860: PUSH
42861: LD_VAR 0 1
42865: ST_TO_ADDR
// end ;
42866: LD_VAR 0 4
42870: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42871: LD_INT 0
42873: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42874: LD_ADDR_VAR 0 5
42878: PUSH
42879: LD_VAR 0 1
42883: PPUSH
42884: CALL_OW 250
42888: PPUSH
42889: LD_VAR 0 1
42893: PPUSH
42894: CALL_OW 251
42898: PPUSH
42899: LD_VAR 0 2
42903: PPUSH
42904: LD_VAR 0 3
42908: PPUSH
42909: LD_VAR 0 4
42913: PPUSH
42914: CALL 42924 0 5
42918: ST_TO_ADDR
// end ;
42919: LD_VAR 0 5
42923: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42924: LD_INT 0
42926: PPUSH
42927: PPUSH
42928: PPUSH
42929: PPUSH
// if not list then
42930: LD_VAR 0 3
42934: NOT
42935: IFFALSE 42939
// exit ;
42937: GO 43327
// result := [ ] ;
42939: LD_ADDR_VAR 0 6
42943: PUSH
42944: EMPTY
42945: ST_TO_ADDR
// for i in list do
42946: LD_ADDR_VAR 0 7
42950: PUSH
42951: LD_VAR 0 3
42955: PUSH
42956: FOR_IN
42957: IFFALSE 43159
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42959: LD_ADDR_VAR 0 9
42963: PUSH
42964: LD_VAR 0 7
42968: PPUSH
42969: LD_VAR 0 1
42973: PPUSH
42974: LD_VAR 0 2
42978: PPUSH
42979: CALL_OW 297
42983: ST_TO_ADDR
// if not result then
42984: LD_VAR 0 6
42988: NOT
42989: IFFALSE 43015
// result := [ [ i , tmp ] ] else
42991: LD_ADDR_VAR 0 6
42995: PUSH
42996: LD_VAR 0 7
43000: PUSH
43001: LD_VAR 0 9
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: EMPTY
43011: LIST
43012: ST_TO_ADDR
43013: GO 43157
// begin if result [ result ] [ 2 ] < tmp then
43015: LD_VAR 0 6
43019: PUSH
43020: LD_VAR 0 6
43024: ARRAY
43025: PUSH
43026: LD_INT 2
43028: ARRAY
43029: PUSH
43030: LD_VAR 0 9
43034: LESS
43035: IFFALSE 43077
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43037: LD_ADDR_VAR 0 6
43041: PUSH
43042: LD_VAR 0 6
43046: PPUSH
43047: LD_VAR 0 6
43051: PUSH
43052: LD_INT 1
43054: PLUS
43055: PPUSH
43056: LD_VAR 0 7
43060: PUSH
43061: LD_VAR 0 9
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PPUSH
43070: CALL_OW 2
43074: ST_TO_ADDR
43075: GO 43157
// for j = 1 to result do
43077: LD_ADDR_VAR 0 8
43081: PUSH
43082: DOUBLE
43083: LD_INT 1
43085: DEC
43086: ST_TO_ADDR
43087: LD_VAR 0 6
43091: PUSH
43092: FOR_TO
43093: IFFALSE 43155
// begin if tmp < result [ j ] [ 2 ] then
43095: LD_VAR 0 9
43099: PUSH
43100: LD_VAR 0 6
43104: PUSH
43105: LD_VAR 0 8
43109: ARRAY
43110: PUSH
43111: LD_INT 2
43113: ARRAY
43114: LESS
43115: IFFALSE 43153
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43117: LD_ADDR_VAR 0 6
43121: PUSH
43122: LD_VAR 0 6
43126: PPUSH
43127: LD_VAR 0 8
43131: PPUSH
43132: LD_VAR 0 7
43136: PUSH
43137: LD_VAR 0 9
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PPUSH
43146: CALL_OW 2
43150: ST_TO_ADDR
// break ;
43151: GO 43155
// end ; end ;
43153: GO 43092
43155: POP
43156: POP
// end ; end ;
43157: GO 42956
43159: POP
43160: POP
// if result and not asc then
43161: LD_VAR 0 6
43165: PUSH
43166: LD_VAR 0 4
43170: NOT
43171: AND
43172: IFFALSE 43247
// begin tmp := result ;
43174: LD_ADDR_VAR 0 9
43178: PUSH
43179: LD_VAR 0 6
43183: ST_TO_ADDR
// for i = tmp downto 1 do
43184: LD_ADDR_VAR 0 7
43188: PUSH
43189: DOUBLE
43190: LD_VAR 0 9
43194: INC
43195: ST_TO_ADDR
43196: LD_INT 1
43198: PUSH
43199: FOR_DOWNTO
43200: IFFALSE 43245
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43202: LD_ADDR_VAR 0 6
43206: PUSH
43207: LD_VAR 0 6
43211: PPUSH
43212: LD_VAR 0 9
43216: PUSH
43217: LD_VAR 0 7
43221: MINUS
43222: PUSH
43223: LD_INT 1
43225: PLUS
43226: PPUSH
43227: LD_VAR 0 9
43231: PUSH
43232: LD_VAR 0 7
43236: ARRAY
43237: PPUSH
43238: CALL_OW 1
43242: ST_TO_ADDR
43243: GO 43199
43245: POP
43246: POP
// end ; tmp := [ ] ;
43247: LD_ADDR_VAR 0 9
43251: PUSH
43252: EMPTY
43253: ST_TO_ADDR
// if mode then
43254: LD_VAR 0 5
43258: IFFALSE 43327
// begin for i = 1 to result do
43260: LD_ADDR_VAR 0 7
43264: PUSH
43265: DOUBLE
43266: LD_INT 1
43268: DEC
43269: ST_TO_ADDR
43270: LD_VAR 0 6
43274: PUSH
43275: FOR_TO
43276: IFFALSE 43315
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43278: LD_ADDR_VAR 0 9
43282: PUSH
43283: LD_VAR 0 9
43287: PPUSH
43288: LD_VAR 0 7
43292: PPUSH
43293: LD_VAR 0 6
43297: PUSH
43298: LD_VAR 0 7
43302: ARRAY
43303: PUSH
43304: LD_INT 1
43306: ARRAY
43307: PPUSH
43308: CALL_OW 1
43312: ST_TO_ADDR
43313: GO 43275
43315: POP
43316: POP
// result := tmp ;
43317: LD_ADDR_VAR 0 6
43321: PUSH
43322: LD_VAR 0 9
43326: ST_TO_ADDR
// end ; end ;
43327: LD_VAR 0 6
43331: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43332: LD_INT 0
43334: PPUSH
43335: PPUSH
43336: PPUSH
43337: PPUSH
43338: PPUSH
43339: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43340: LD_ADDR_VAR 0 5
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: EMPTY
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: ST_TO_ADDR
// if not x or not y then
43362: LD_VAR 0 2
43366: NOT
43367: PUSH
43368: LD_VAR 0 3
43372: NOT
43373: OR
43374: IFFALSE 43378
// exit ;
43376: GO 45030
// if not range then
43378: LD_VAR 0 4
43382: NOT
43383: IFFALSE 43393
// range := 10 ;
43385: LD_ADDR_VAR 0 4
43389: PUSH
43390: LD_INT 10
43392: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43393: LD_ADDR_VAR 0 8
43397: PUSH
43398: LD_INT 81
43400: PUSH
43401: LD_VAR 0 1
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 92
43412: PUSH
43413: LD_VAR 0 2
43417: PUSH
43418: LD_VAR 0 3
43422: PUSH
43423: LD_VAR 0 4
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 3
43436: PUSH
43437: LD_INT 21
43439: PUSH
43440: LD_INT 3
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: LIST
43455: PPUSH
43456: CALL_OW 69
43460: ST_TO_ADDR
// if not tmp then
43461: LD_VAR 0 8
43465: NOT
43466: IFFALSE 43470
// exit ;
43468: GO 45030
// for i in tmp do
43470: LD_ADDR_VAR 0 6
43474: PUSH
43475: LD_VAR 0 8
43479: PUSH
43480: FOR_IN
43481: IFFALSE 45005
// begin points := [ 0 , 0 , 0 ] ;
43483: LD_ADDR_VAR 0 9
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: LIST
43501: ST_TO_ADDR
// bpoints := 1 ;
43502: LD_ADDR_VAR 0 10
43506: PUSH
43507: LD_INT 1
43509: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43510: LD_VAR 0 6
43514: PPUSH
43515: CALL_OW 247
43519: PUSH
43520: LD_INT 1
43522: DOUBLE
43523: EQUAL
43524: IFTRUE 43528
43526: GO 44106
43528: POP
// begin if GetClass ( i ) = 1 then
43529: LD_VAR 0 6
43533: PPUSH
43534: CALL_OW 257
43538: PUSH
43539: LD_INT 1
43541: EQUAL
43542: IFFALSE 43563
// points := [ 10 , 5 , 3 ] ;
43544: LD_ADDR_VAR 0 9
43548: PUSH
43549: LD_INT 10
43551: PUSH
43552: LD_INT 5
43554: PUSH
43555: LD_INT 3
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: LIST
43562: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43563: LD_VAR 0 6
43567: PPUSH
43568: CALL_OW 257
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: LD_INT 3
43578: PUSH
43579: LD_INT 4
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: LIST
43586: IN
43587: IFFALSE 43608
// points := [ 3 , 2 , 1 ] ;
43589: LD_ADDR_VAR 0 9
43593: PUSH
43594: LD_INT 3
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: LIST
43607: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43608: LD_VAR 0 6
43612: PPUSH
43613: CALL_OW 257
43617: PUSH
43618: LD_INT 5
43620: EQUAL
43621: IFFALSE 43642
// points := [ 130 , 5 , 2 ] ;
43623: LD_ADDR_VAR 0 9
43627: PUSH
43628: LD_INT 130
43630: PUSH
43631: LD_INT 5
43633: PUSH
43634: LD_INT 2
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: LIST
43641: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43642: LD_VAR 0 6
43646: PPUSH
43647: CALL_OW 257
43651: PUSH
43652: LD_INT 8
43654: EQUAL
43655: IFFALSE 43676
// points := [ 35 , 35 , 30 ] ;
43657: LD_ADDR_VAR 0 9
43661: PUSH
43662: LD_INT 35
43664: PUSH
43665: LD_INT 35
43667: PUSH
43668: LD_INT 30
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: LIST
43675: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43676: LD_VAR 0 6
43680: PPUSH
43681: CALL_OW 257
43685: PUSH
43686: LD_INT 9
43688: EQUAL
43689: IFFALSE 43710
// points := [ 20 , 55 , 40 ] ;
43691: LD_ADDR_VAR 0 9
43695: PUSH
43696: LD_INT 20
43698: PUSH
43699: LD_INT 55
43701: PUSH
43702: LD_INT 40
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43710: LD_VAR 0 6
43714: PPUSH
43715: CALL_OW 257
43719: PUSH
43720: LD_INT 12
43722: PUSH
43723: LD_INT 16
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: IN
43730: IFFALSE 43751
// points := [ 5 , 3 , 2 ] ;
43732: LD_ADDR_VAR 0 9
43736: PUSH
43737: LD_INT 5
43739: PUSH
43740: LD_INT 3
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43751: LD_VAR 0 6
43755: PPUSH
43756: CALL_OW 257
43760: PUSH
43761: LD_INT 17
43763: EQUAL
43764: IFFALSE 43785
// points := [ 100 , 50 , 75 ] ;
43766: LD_ADDR_VAR 0 9
43770: PUSH
43771: LD_INT 100
43773: PUSH
43774: LD_INT 50
43776: PUSH
43777: LD_INT 75
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: LIST
43784: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43785: LD_VAR 0 6
43789: PPUSH
43790: CALL_OW 257
43794: PUSH
43795: LD_INT 15
43797: EQUAL
43798: IFFALSE 43819
// points := [ 10 , 5 , 3 ] ;
43800: LD_ADDR_VAR 0 9
43804: PUSH
43805: LD_INT 10
43807: PUSH
43808: LD_INT 5
43810: PUSH
43811: LD_INT 3
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: LIST
43818: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43819: LD_VAR 0 6
43823: PPUSH
43824: CALL_OW 257
43828: PUSH
43829: LD_INT 14
43831: EQUAL
43832: IFFALSE 43853
// points := [ 10 , 0 , 0 ] ;
43834: LD_ADDR_VAR 0 9
43838: PUSH
43839: LD_INT 10
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: LIST
43852: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43853: LD_VAR 0 6
43857: PPUSH
43858: CALL_OW 257
43862: PUSH
43863: LD_INT 11
43865: EQUAL
43866: IFFALSE 43887
// points := [ 30 , 10 , 5 ] ;
43868: LD_ADDR_VAR 0 9
43872: PUSH
43873: LD_INT 30
43875: PUSH
43876: LD_INT 10
43878: PUSH
43879: LD_INT 5
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: LIST
43886: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43887: LD_VAR 0 1
43891: PPUSH
43892: LD_INT 5
43894: PPUSH
43895: CALL_OW 321
43899: PUSH
43900: LD_INT 2
43902: EQUAL
43903: IFFALSE 43920
// bpoints := bpoints * 1.8 ;
43905: LD_ADDR_VAR 0 10
43909: PUSH
43910: LD_VAR 0 10
43914: PUSH
43915: LD_REAL  1.80000000000000E+0000
43918: MUL
43919: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43920: LD_VAR 0 6
43924: PPUSH
43925: CALL_OW 257
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: LD_INT 2
43935: PUSH
43936: LD_INT 3
43938: PUSH
43939: LD_INT 4
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: IN
43948: PUSH
43949: LD_VAR 0 1
43953: PPUSH
43954: LD_INT 51
43956: PPUSH
43957: CALL_OW 321
43961: PUSH
43962: LD_INT 2
43964: EQUAL
43965: AND
43966: IFFALSE 43983
// bpoints := bpoints * 1.2 ;
43968: LD_ADDR_VAR 0 10
43972: PUSH
43973: LD_VAR 0 10
43977: PUSH
43978: LD_REAL  1.20000000000000E+0000
43981: MUL
43982: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43983: LD_VAR 0 6
43987: PPUSH
43988: CALL_OW 257
43992: PUSH
43993: LD_INT 5
43995: PUSH
43996: LD_INT 7
43998: PUSH
43999: LD_INT 9
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: LIST
44006: IN
44007: PUSH
44008: LD_VAR 0 1
44012: PPUSH
44013: LD_INT 52
44015: PPUSH
44016: CALL_OW 321
44020: PUSH
44021: LD_INT 2
44023: EQUAL
44024: AND
44025: IFFALSE 44042
// bpoints := bpoints * 1.5 ;
44027: LD_ADDR_VAR 0 10
44031: PUSH
44032: LD_VAR 0 10
44036: PUSH
44037: LD_REAL  1.50000000000000E+0000
44040: MUL
44041: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44042: LD_VAR 0 1
44046: PPUSH
44047: LD_INT 66
44049: PPUSH
44050: CALL_OW 321
44054: PUSH
44055: LD_INT 2
44057: EQUAL
44058: IFFALSE 44075
// bpoints := bpoints * 1.1 ;
44060: LD_ADDR_VAR 0 10
44064: PUSH
44065: LD_VAR 0 10
44069: PUSH
44070: LD_REAL  1.10000000000000E+0000
44073: MUL
44074: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44075: LD_ADDR_VAR 0 10
44079: PUSH
44080: LD_VAR 0 10
44084: PUSH
44085: LD_VAR 0 6
44089: PPUSH
44090: LD_INT 1
44092: PPUSH
44093: CALL_OW 259
44097: PUSH
44098: LD_REAL  1.15000000000000E+0000
44101: MUL
44102: MUL
44103: ST_TO_ADDR
// end ; unit_vehicle :
44104: GO 44934
44106: LD_INT 2
44108: DOUBLE
44109: EQUAL
44110: IFTRUE 44114
44112: GO 44922
44114: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44115: LD_VAR 0 6
44119: PPUSH
44120: CALL_OW 264
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: LD_INT 42
44130: PUSH
44131: LD_INT 24
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: IN
44139: IFFALSE 44160
// points := [ 25 , 5 , 3 ] ;
44141: LD_ADDR_VAR 0 9
44145: PUSH
44146: LD_INT 25
44148: PUSH
44149: LD_INT 5
44151: PUSH
44152: LD_INT 3
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: LIST
44159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44160: LD_VAR 0 6
44164: PPUSH
44165: CALL_OW 264
44169: PUSH
44170: LD_INT 4
44172: PUSH
44173: LD_INT 43
44175: PUSH
44176: LD_INT 25
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: IN
44184: IFFALSE 44205
// points := [ 40 , 15 , 5 ] ;
44186: LD_ADDR_VAR 0 9
44190: PUSH
44191: LD_INT 40
44193: PUSH
44194: LD_INT 15
44196: PUSH
44197: LD_INT 5
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: LIST
44204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44205: LD_VAR 0 6
44209: PPUSH
44210: CALL_OW 264
44214: PUSH
44215: LD_INT 3
44217: PUSH
44218: LD_INT 23
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: IN
44225: IFFALSE 44246
// points := [ 7 , 25 , 8 ] ;
44227: LD_ADDR_VAR 0 9
44231: PUSH
44232: LD_INT 7
44234: PUSH
44235: LD_INT 25
44237: PUSH
44238: LD_INT 8
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44246: LD_VAR 0 6
44250: PPUSH
44251: CALL_OW 264
44255: PUSH
44256: LD_INT 5
44258: PUSH
44259: LD_INT 27
44261: PUSH
44262: LD_INT 44
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: LIST
44269: IN
44270: IFFALSE 44291
// points := [ 14 , 50 , 16 ] ;
44272: LD_ADDR_VAR 0 9
44276: PUSH
44277: LD_INT 14
44279: PUSH
44280: LD_INT 50
44282: PUSH
44283: LD_INT 16
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: LIST
44290: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44291: LD_VAR 0 6
44295: PPUSH
44296: CALL_OW 264
44300: PUSH
44301: LD_INT 6
44303: PUSH
44304: LD_INT 46
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: IN
44311: IFFALSE 44332
// points := [ 32 , 120 , 70 ] ;
44313: LD_ADDR_VAR 0 9
44317: PUSH
44318: LD_INT 32
44320: PUSH
44321: LD_INT 120
44323: PUSH
44324: LD_INT 70
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: LIST
44331: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44332: LD_VAR 0 6
44336: PPUSH
44337: CALL_OW 264
44341: PUSH
44342: LD_INT 7
44344: PUSH
44345: LD_INT 28
44347: PUSH
44348: LD_INT 45
44350: PUSH
44351: LD_EXP 54
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: IN
44362: IFFALSE 44383
// points := [ 35 , 20 , 45 ] ;
44364: LD_ADDR_VAR 0 9
44368: PUSH
44369: LD_INT 35
44371: PUSH
44372: LD_INT 20
44374: PUSH
44375: LD_INT 45
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: LIST
44382: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44383: LD_VAR 0 6
44387: PPUSH
44388: CALL_OW 264
44392: PUSH
44393: LD_INT 47
44395: PUSH
44396: EMPTY
44397: LIST
44398: IN
44399: IFFALSE 44420
// points := [ 67 , 45 , 75 ] ;
44401: LD_ADDR_VAR 0 9
44405: PUSH
44406: LD_INT 67
44408: PUSH
44409: LD_INT 45
44411: PUSH
44412: LD_INT 75
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: LIST
44419: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44420: LD_VAR 0 6
44424: PPUSH
44425: CALL_OW 264
44429: PUSH
44430: LD_INT 26
44432: PUSH
44433: EMPTY
44434: LIST
44435: IN
44436: IFFALSE 44457
// points := [ 120 , 30 , 80 ] ;
44438: LD_ADDR_VAR 0 9
44442: PUSH
44443: LD_INT 120
44445: PUSH
44446: LD_INT 30
44448: PUSH
44449: LD_INT 80
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: LIST
44456: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44457: LD_VAR 0 6
44461: PPUSH
44462: CALL_OW 264
44466: PUSH
44467: LD_INT 22
44469: PUSH
44470: EMPTY
44471: LIST
44472: IN
44473: IFFALSE 44494
// points := [ 40 , 1 , 1 ] ;
44475: LD_ADDR_VAR 0 9
44479: PUSH
44480: LD_INT 40
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44494: LD_VAR 0 6
44498: PPUSH
44499: CALL_OW 264
44503: PUSH
44504: LD_INT 29
44506: PUSH
44507: EMPTY
44508: LIST
44509: IN
44510: IFFALSE 44531
// points := [ 70 , 200 , 400 ] ;
44512: LD_ADDR_VAR 0 9
44516: PUSH
44517: LD_INT 70
44519: PUSH
44520: LD_INT 200
44522: PUSH
44523: LD_INT 400
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: LIST
44530: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44531: LD_VAR 0 6
44535: PPUSH
44536: CALL_OW 264
44540: PUSH
44541: LD_INT 14
44543: PUSH
44544: LD_INT 53
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: IN
44551: IFFALSE 44572
// points := [ 40 , 10 , 20 ] ;
44553: LD_ADDR_VAR 0 9
44557: PUSH
44558: LD_INT 40
44560: PUSH
44561: LD_INT 10
44563: PUSH
44564: LD_INT 20
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: LIST
44571: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44572: LD_VAR 0 6
44576: PPUSH
44577: CALL_OW 264
44581: PUSH
44582: LD_INT 9
44584: PUSH
44585: EMPTY
44586: LIST
44587: IN
44588: IFFALSE 44609
// points := [ 5 , 70 , 20 ] ;
44590: LD_ADDR_VAR 0 9
44594: PUSH
44595: LD_INT 5
44597: PUSH
44598: LD_INT 70
44600: PUSH
44601: LD_INT 20
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44609: LD_VAR 0 6
44613: PPUSH
44614: CALL_OW 264
44618: PUSH
44619: LD_INT 10
44621: PUSH
44622: EMPTY
44623: LIST
44624: IN
44625: IFFALSE 44646
// points := [ 35 , 110 , 70 ] ;
44627: LD_ADDR_VAR 0 9
44631: PUSH
44632: LD_INT 35
44634: PUSH
44635: LD_INT 110
44637: PUSH
44638: LD_INT 70
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: LIST
44645: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44646: LD_VAR 0 6
44650: PPUSH
44651: CALL_OW 265
44655: PUSH
44656: LD_INT 25
44658: EQUAL
44659: IFFALSE 44680
// points := [ 80 , 65 , 100 ] ;
44661: LD_ADDR_VAR 0 9
44665: PUSH
44666: LD_INT 80
44668: PUSH
44669: LD_INT 65
44671: PUSH
44672: LD_INT 100
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44680: LD_VAR 0 6
44684: PPUSH
44685: CALL_OW 263
44689: PUSH
44690: LD_INT 1
44692: EQUAL
44693: IFFALSE 44728
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44695: LD_ADDR_VAR 0 10
44699: PUSH
44700: LD_VAR 0 10
44704: PUSH
44705: LD_VAR 0 6
44709: PPUSH
44710: CALL_OW 311
44714: PPUSH
44715: LD_INT 3
44717: PPUSH
44718: CALL_OW 259
44722: PUSH
44723: LD_INT 4
44725: MUL
44726: MUL
44727: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44728: LD_VAR 0 6
44732: PPUSH
44733: CALL_OW 263
44737: PUSH
44738: LD_INT 2
44740: EQUAL
44741: IFFALSE 44792
// begin j := IsControledBy ( i ) ;
44743: LD_ADDR_VAR 0 7
44747: PUSH
44748: LD_VAR 0 6
44752: PPUSH
44753: CALL_OW 312
44757: ST_TO_ADDR
// if j then
44758: LD_VAR 0 7
44762: IFFALSE 44792
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44764: LD_ADDR_VAR 0 10
44768: PUSH
44769: LD_VAR 0 10
44773: PUSH
44774: LD_VAR 0 7
44778: PPUSH
44779: LD_INT 3
44781: PPUSH
44782: CALL_OW 259
44786: PUSH
44787: LD_INT 3
44789: MUL
44790: MUL
44791: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44792: LD_VAR 0 6
44796: PPUSH
44797: CALL_OW 264
44801: PUSH
44802: LD_INT 5
44804: PUSH
44805: LD_INT 6
44807: PUSH
44808: LD_INT 46
44810: PUSH
44811: LD_INT 44
44813: PUSH
44814: LD_INT 47
44816: PUSH
44817: LD_INT 45
44819: PUSH
44820: LD_INT 28
44822: PUSH
44823: LD_INT 7
44825: PUSH
44826: LD_INT 27
44828: PUSH
44829: LD_INT 29
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: IN
44844: PUSH
44845: LD_VAR 0 1
44849: PPUSH
44850: LD_INT 52
44852: PPUSH
44853: CALL_OW 321
44857: PUSH
44858: LD_INT 2
44860: EQUAL
44861: AND
44862: IFFALSE 44879
// bpoints := bpoints * 1.2 ;
44864: LD_ADDR_VAR 0 10
44868: PUSH
44869: LD_VAR 0 10
44873: PUSH
44874: LD_REAL  1.20000000000000E+0000
44877: MUL
44878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44879: LD_VAR 0 6
44883: PPUSH
44884: CALL_OW 264
44888: PUSH
44889: LD_INT 6
44891: PUSH
44892: LD_INT 46
44894: PUSH
44895: LD_INT 47
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: IN
44903: IFFALSE 44920
// bpoints := bpoints * 1.2 ;
44905: LD_ADDR_VAR 0 10
44909: PUSH
44910: LD_VAR 0 10
44914: PUSH
44915: LD_REAL  1.20000000000000E+0000
44918: MUL
44919: ST_TO_ADDR
// end ; unit_building :
44920: GO 44934
44922: LD_INT 3
44924: DOUBLE
44925: EQUAL
44926: IFTRUE 44930
44928: GO 44933
44930: POP
// ; end ;
44931: GO 44934
44933: POP
// for j = 1 to 3 do
44934: LD_ADDR_VAR 0 7
44938: PUSH
44939: DOUBLE
44940: LD_INT 1
44942: DEC
44943: ST_TO_ADDR
44944: LD_INT 3
44946: PUSH
44947: FOR_TO
44948: IFFALSE 45001
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44950: LD_ADDR_VAR 0 5
44954: PUSH
44955: LD_VAR 0 5
44959: PPUSH
44960: LD_VAR 0 7
44964: PPUSH
44965: LD_VAR 0 5
44969: PUSH
44970: LD_VAR 0 7
44974: ARRAY
44975: PUSH
44976: LD_VAR 0 9
44980: PUSH
44981: LD_VAR 0 7
44985: ARRAY
44986: PUSH
44987: LD_VAR 0 10
44991: MUL
44992: PLUS
44993: PPUSH
44994: CALL_OW 1
44998: ST_TO_ADDR
44999: GO 44947
45001: POP
45002: POP
// end ;
45003: GO 43480
45005: POP
45006: POP
// result := Replace ( result , 4 , tmp ) ;
45007: LD_ADDR_VAR 0 5
45011: PUSH
45012: LD_VAR 0 5
45016: PPUSH
45017: LD_INT 4
45019: PPUSH
45020: LD_VAR 0 8
45024: PPUSH
45025: CALL_OW 1
45029: ST_TO_ADDR
// end ;
45030: LD_VAR 0 5
45034: RET
// export function DangerAtRange ( unit , range ) ; begin
45035: LD_INT 0
45037: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45038: LD_ADDR_VAR 0 3
45042: PUSH
45043: LD_VAR 0 1
45047: PPUSH
45048: CALL_OW 255
45052: PPUSH
45053: LD_VAR 0 1
45057: PPUSH
45058: CALL_OW 250
45062: PPUSH
45063: LD_VAR 0 1
45067: PPUSH
45068: CALL_OW 251
45072: PPUSH
45073: LD_VAR 0 2
45077: PPUSH
45078: CALL 43332 0 4
45082: ST_TO_ADDR
// end ;
45083: LD_VAR 0 3
45087: RET
// export function DangerInArea ( side , area ) ; begin
45088: LD_INT 0
45090: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45091: LD_ADDR_VAR 0 3
45095: PUSH
45096: LD_VAR 0 2
45100: PPUSH
45101: LD_INT 81
45103: PUSH
45104: LD_VAR 0 1
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PPUSH
45113: CALL_OW 70
45117: ST_TO_ADDR
// end ;
45118: LD_VAR 0 3
45122: RET
// export function IsExtension ( b ) ; begin
45123: LD_INT 0
45125: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45126: LD_ADDR_VAR 0 2
45130: PUSH
45131: LD_VAR 0 1
45135: PUSH
45136: LD_INT 23
45138: PUSH
45139: LD_INT 20
45141: PUSH
45142: LD_INT 22
45144: PUSH
45145: LD_INT 17
45147: PUSH
45148: LD_INT 24
45150: PUSH
45151: LD_INT 21
45153: PUSH
45154: LD_INT 19
45156: PUSH
45157: LD_INT 16
45159: PUSH
45160: LD_INT 25
45162: PUSH
45163: LD_INT 18
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: IN
45178: ST_TO_ADDR
// end ;
45179: LD_VAR 0 2
45183: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45184: LD_INT 0
45186: PPUSH
45187: PPUSH
45188: PPUSH
// result := [ ] ;
45189: LD_ADDR_VAR 0 4
45193: PUSH
45194: EMPTY
45195: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45196: LD_ADDR_VAR 0 5
45200: PUSH
45201: LD_VAR 0 2
45205: PPUSH
45206: LD_INT 21
45208: PUSH
45209: LD_INT 3
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PPUSH
45216: CALL_OW 70
45220: ST_TO_ADDR
// if not tmp then
45221: LD_VAR 0 5
45225: NOT
45226: IFFALSE 45230
// exit ;
45228: GO 45294
// if checkLink then
45230: LD_VAR 0 3
45234: IFFALSE 45284
// begin for i in tmp do
45236: LD_ADDR_VAR 0 6
45240: PUSH
45241: LD_VAR 0 5
45245: PUSH
45246: FOR_IN
45247: IFFALSE 45282
// if GetBase ( i ) <> base then
45249: LD_VAR 0 6
45253: PPUSH
45254: CALL_OW 274
45258: PUSH
45259: LD_VAR 0 1
45263: NONEQUAL
45264: IFFALSE 45280
// ComLinkToBase ( base , i ) ;
45266: LD_VAR 0 1
45270: PPUSH
45271: LD_VAR 0 6
45275: PPUSH
45276: CALL_OW 169
45280: GO 45246
45282: POP
45283: POP
// end ; result := tmp ;
45284: LD_ADDR_VAR 0 4
45288: PUSH
45289: LD_VAR 0 5
45293: ST_TO_ADDR
// end ;
45294: LD_VAR 0 4
45298: RET
// export function ComComplete ( units , b ) ; var i ; begin
45299: LD_INT 0
45301: PPUSH
45302: PPUSH
// if not units then
45303: LD_VAR 0 1
45307: NOT
45308: IFFALSE 45312
// exit ;
45310: GO 45402
// for i in units do
45312: LD_ADDR_VAR 0 4
45316: PUSH
45317: LD_VAR 0 1
45321: PUSH
45322: FOR_IN
45323: IFFALSE 45400
// if BuildingStatus ( b ) = bs_build then
45325: LD_VAR 0 2
45329: PPUSH
45330: CALL_OW 461
45334: PUSH
45335: LD_INT 1
45337: EQUAL
45338: IFFALSE 45398
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45340: LD_VAR 0 4
45344: PPUSH
45345: LD_STRING h
45347: PUSH
45348: LD_VAR 0 2
45352: PPUSH
45353: CALL_OW 250
45357: PUSH
45358: LD_VAR 0 2
45362: PPUSH
45363: CALL_OW 251
45367: PUSH
45368: LD_VAR 0 2
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: PUSH
45391: EMPTY
45392: LIST
45393: PPUSH
45394: CALL_OW 446
45398: GO 45322
45400: POP
45401: POP
// end ;
45402: LD_VAR 0 3
45406: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45407: LD_INT 0
45409: PPUSH
45410: PPUSH
45411: PPUSH
45412: PPUSH
45413: PPUSH
45414: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45415: LD_VAR 0 1
45419: NOT
45420: PUSH
45421: LD_VAR 0 1
45425: PPUSH
45426: CALL_OW 263
45430: PUSH
45431: LD_INT 2
45433: NONEQUAL
45434: OR
45435: IFFALSE 45439
// exit ;
45437: GO 45755
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45439: LD_ADDR_VAR 0 6
45443: PUSH
45444: LD_INT 22
45446: PUSH
45447: LD_VAR 0 1
45451: PPUSH
45452: CALL_OW 255
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: LD_INT 30
45466: PUSH
45467: LD_INT 36
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 34
45476: PUSH
45477: LD_INT 31
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: LIST
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PPUSH
45493: CALL_OW 69
45497: ST_TO_ADDR
// if not tmp then
45498: LD_VAR 0 6
45502: NOT
45503: IFFALSE 45507
// exit ;
45505: GO 45755
// result := [ ] ;
45507: LD_ADDR_VAR 0 2
45511: PUSH
45512: EMPTY
45513: ST_TO_ADDR
// for i in tmp do
45514: LD_ADDR_VAR 0 3
45518: PUSH
45519: LD_VAR 0 6
45523: PUSH
45524: FOR_IN
45525: IFFALSE 45596
// begin t := UnitsInside ( i ) ;
45527: LD_ADDR_VAR 0 4
45531: PUSH
45532: LD_VAR 0 3
45536: PPUSH
45537: CALL_OW 313
45541: ST_TO_ADDR
// if t then
45542: LD_VAR 0 4
45546: IFFALSE 45594
// for j in t do
45548: LD_ADDR_VAR 0 7
45552: PUSH
45553: LD_VAR 0 4
45557: PUSH
45558: FOR_IN
45559: IFFALSE 45592
// result := Replace ( result , result + 1 , j ) ;
45561: LD_ADDR_VAR 0 2
45565: PUSH
45566: LD_VAR 0 2
45570: PPUSH
45571: LD_VAR 0 2
45575: PUSH
45576: LD_INT 1
45578: PLUS
45579: PPUSH
45580: LD_VAR 0 7
45584: PPUSH
45585: CALL_OW 1
45589: ST_TO_ADDR
45590: GO 45558
45592: POP
45593: POP
// end ;
45594: GO 45524
45596: POP
45597: POP
// if not result then
45598: LD_VAR 0 2
45602: NOT
45603: IFFALSE 45607
// exit ;
45605: GO 45755
// mech := result [ 1 ] ;
45607: LD_ADDR_VAR 0 5
45611: PUSH
45612: LD_VAR 0 2
45616: PUSH
45617: LD_INT 1
45619: ARRAY
45620: ST_TO_ADDR
// if result > 1 then
45621: LD_VAR 0 2
45625: PUSH
45626: LD_INT 1
45628: GREATER
45629: IFFALSE 45741
// begin for i = 2 to result do
45631: LD_ADDR_VAR 0 3
45635: PUSH
45636: DOUBLE
45637: LD_INT 2
45639: DEC
45640: ST_TO_ADDR
45641: LD_VAR 0 2
45645: PUSH
45646: FOR_TO
45647: IFFALSE 45739
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45649: LD_ADDR_VAR 0 4
45653: PUSH
45654: LD_VAR 0 2
45658: PUSH
45659: LD_VAR 0 3
45663: ARRAY
45664: PPUSH
45665: LD_INT 3
45667: PPUSH
45668: CALL_OW 259
45672: PUSH
45673: LD_VAR 0 2
45677: PUSH
45678: LD_VAR 0 3
45682: ARRAY
45683: PPUSH
45684: CALL_OW 432
45688: MINUS
45689: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45690: LD_VAR 0 4
45694: PUSH
45695: LD_VAR 0 5
45699: PPUSH
45700: LD_INT 3
45702: PPUSH
45703: CALL_OW 259
45707: PUSH
45708: LD_VAR 0 5
45712: PPUSH
45713: CALL_OW 432
45717: MINUS
45718: GREATEREQUAL
45719: IFFALSE 45737
// mech := result [ i ] ;
45721: LD_ADDR_VAR 0 5
45725: PUSH
45726: LD_VAR 0 2
45730: PUSH
45731: LD_VAR 0 3
45735: ARRAY
45736: ST_TO_ADDR
// end ;
45737: GO 45646
45739: POP
45740: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45741: LD_VAR 0 1
45745: PPUSH
45746: LD_VAR 0 5
45750: PPUSH
45751: CALL_OW 135
// end ;
45755: LD_VAR 0 2
45759: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45760: LD_INT 0
45762: PPUSH
45763: PPUSH
45764: PPUSH
45765: PPUSH
45766: PPUSH
45767: PPUSH
45768: PPUSH
45769: PPUSH
45770: PPUSH
45771: PPUSH
45772: PPUSH
45773: PPUSH
45774: PPUSH
// result := [ ] ;
45775: LD_ADDR_VAR 0 7
45779: PUSH
45780: EMPTY
45781: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45782: LD_VAR 0 1
45786: PPUSH
45787: CALL_OW 266
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: IN
45802: NOT
45803: IFFALSE 45807
// exit ;
45805: GO 47441
// if name then
45807: LD_VAR 0 3
45811: IFFALSE 45827
// SetBName ( base_dep , name ) ;
45813: LD_VAR 0 1
45817: PPUSH
45818: LD_VAR 0 3
45822: PPUSH
45823: CALL_OW 500
// base := GetBase ( base_dep ) ;
45827: LD_ADDR_VAR 0 15
45831: PUSH
45832: LD_VAR 0 1
45836: PPUSH
45837: CALL_OW 274
45841: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45842: LD_ADDR_VAR 0 16
45846: PUSH
45847: LD_VAR 0 1
45851: PPUSH
45852: CALL_OW 255
45856: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45857: LD_ADDR_VAR 0 17
45861: PUSH
45862: LD_VAR 0 1
45866: PPUSH
45867: CALL_OW 248
45871: ST_TO_ADDR
// if sources then
45872: LD_VAR 0 5
45876: IFFALSE 45923
// for i = 1 to 3 do
45878: LD_ADDR_VAR 0 8
45882: PUSH
45883: DOUBLE
45884: LD_INT 1
45886: DEC
45887: ST_TO_ADDR
45888: LD_INT 3
45890: PUSH
45891: FOR_TO
45892: IFFALSE 45921
// AddResourceType ( base , i , sources [ i ] ) ;
45894: LD_VAR 0 15
45898: PPUSH
45899: LD_VAR 0 8
45903: PPUSH
45904: LD_VAR 0 5
45908: PUSH
45909: LD_VAR 0 8
45913: ARRAY
45914: PPUSH
45915: CALL_OW 276
45919: GO 45891
45921: POP
45922: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45923: LD_ADDR_VAR 0 18
45927: PUSH
45928: LD_VAR 0 15
45932: PPUSH
45933: LD_VAR 0 2
45937: PPUSH
45938: LD_INT 1
45940: PPUSH
45941: CALL 45184 0 3
45945: ST_TO_ADDR
// InitHc ;
45946: CALL_OW 19
// InitUc ;
45950: CALL_OW 18
// uc_side := side ;
45954: LD_ADDR_OWVAR 20
45958: PUSH
45959: LD_VAR 0 16
45963: ST_TO_ADDR
// uc_nation := nation ;
45964: LD_ADDR_OWVAR 21
45968: PUSH
45969: LD_VAR 0 17
45973: ST_TO_ADDR
// if buildings then
45974: LD_VAR 0 18
45978: IFFALSE 47300
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45980: LD_ADDR_VAR 0 19
45984: PUSH
45985: LD_VAR 0 18
45989: PPUSH
45990: LD_INT 2
45992: PUSH
45993: LD_INT 30
45995: PUSH
45996: LD_INT 29
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 30
46005: PUSH
46006: LD_INT 30
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: LIST
46017: PPUSH
46018: CALL_OW 72
46022: ST_TO_ADDR
// if tmp then
46023: LD_VAR 0 19
46027: IFFALSE 46075
// for i in tmp do
46029: LD_ADDR_VAR 0 8
46033: PUSH
46034: LD_VAR 0 19
46038: PUSH
46039: FOR_IN
46040: IFFALSE 46073
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46042: LD_VAR 0 8
46046: PPUSH
46047: CALL_OW 250
46051: PPUSH
46052: LD_VAR 0 8
46056: PPUSH
46057: CALL_OW 251
46061: PPUSH
46062: LD_VAR 0 16
46066: PPUSH
46067: CALL_OW 441
46071: GO 46039
46073: POP
46074: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46075: LD_VAR 0 18
46079: PPUSH
46080: LD_INT 2
46082: PUSH
46083: LD_INT 30
46085: PUSH
46086: LD_INT 32
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 30
46095: PUSH
46096: LD_INT 33
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: LIST
46107: PPUSH
46108: CALL_OW 72
46112: IFFALSE 46200
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46114: LD_ADDR_VAR 0 8
46118: PUSH
46119: LD_VAR 0 18
46123: PPUSH
46124: LD_INT 2
46126: PUSH
46127: LD_INT 30
46129: PUSH
46130: LD_INT 32
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 30
46139: PUSH
46140: LD_INT 33
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: LIST
46151: PPUSH
46152: CALL_OW 72
46156: PUSH
46157: FOR_IN
46158: IFFALSE 46198
// begin if not GetBWeapon ( i ) then
46160: LD_VAR 0 8
46164: PPUSH
46165: CALL_OW 269
46169: NOT
46170: IFFALSE 46196
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46172: LD_VAR 0 8
46176: PPUSH
46177: LD_VAR 0 8
46181: PPUSH
46182: LD_VAR 0 2
46186: PPUSH
46187: CALL 47446 0 2
46191: PPUSH
46192: CALL_OW 431
// end ;
46196: GO 46157
46198: POP
46199: POP
// end ; for i = 1 to personel do
46200: LD_ADDR_VAR 0 8
46204: PUSH
46205: DOUBLE
46206: LD_INT 1
46208: DEC
46209: ST_TO_ADDR
46210: LD_VAR 0 6
46214: PUSH
46215: FOR_TO
46216: IFFALSE 47280
// begin if i > 4 then
46218: LD_VAR 0 8
46222: PUSH
46223: LD_INT 4
46225: GREATER
46226: IFFALSE 46230
// break ;
46228: GO 47280
// case i of 1 :
46230: LD_VAR 0 8
46234: PUSH
46235: LD_INT 1
46237: DOUBLE
46238: EQUAL
46239: IFTRUE 46243
46241: GO 46323
46243: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46244: LD_ADDR_VAR 0 12
46248: PUSH
46249: LD_VAR 0 18
46253: PPUSH
46254: LD_INT 22
46256: PUSH
46257: LD_VAR 0 16
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 58
46268: PUSH
46269: EMPTY
46270: LIST
46271: PUSH
46272: LD_INT 2
46274: PUSH
46275: LD_INT 30
46277: PUSH
46278: LD_INT 32
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 30
46287: PUSH
46288: LD_INT 4
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 30
46297: PUSH
46298: LD_INT 5
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: LIST
46315: PPUSH
46316: CALL_OW 72
46320: ST_TO_ADDR
46321: GO 46545
46323: LD_INT 2
46325: DOUBLE
46326: EQUAL
46327: IFTRUE 46331
46329: GO 46393
46331: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46332: LD_ADDR_VAR 0 12
46336: PUSH
46337: LD_VAR 0 18
46341: PPUSH
46342: LD_INT 22
46344: PUSH
46345: LD_VAR 0 16
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: LD_INT 30
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 30
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: LIST
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PPUSH
46386: CALL_OW 72
46390: ST_TO_ADDR
46391: GO 46545
46393: LD_INT 3
46395: DOUBLE
46396: EQUAL
46397: IFTRUE 46401
46399: GO 46463
46401: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46402: LD_ADDR_VAR 0 12
46406: PUSH
46407: LD_VAR 0 18
46411: PPUSH
46412: LD_INT 22
46414: PUSH
46415: LD_VAR 0 16
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: LD_INT 30
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 30
46439: PUSH
46440: LD_INT 3
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: LIST
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PPUSH
46456: CALL_OW 72
46460: ST_TO_ADDR
46461: GO 46545
46463: LD_INT 4
46465: DOUBLE
46466: EQUAL
46467: IFTRUE 46471
46469: GO 46544
46471: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46472: LD_ADDR_VAR 0 12
46476: PUSH
46477: LD_VAR 0 18
46481: PPUSH
46482: LD_INT 22
46484: PUSH
46485: LD_VAR 0 16
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 30
46499: PUSH
46500: LD_INT 6
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 30
46509: PUSH
46510: LD_INT 7
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 30
46519: PUSH
46520: LD_INT 8
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PPUSH
46537: CALL_OW 72
46541: ST_TO_ADDR
46542: GO 46545
46544: POP
// if i = 1 then
46545: LD_VAR 0 8
46549: PUSH
46550: LD_INT 1
46552: EQUAL
46553: IFFALSE 46664
// begin tmp := [ ] ;
46555: LD_ADDR_VAR 0 19
46559: PUSH
46560: EMPTY
46561: ST_TO_ADDR
// for j in f do
46562: LD_ADDR_VAR 0 9
46566: PUSH
46567: LD_VAR 0 12
46571: PUSH
46572: FOR_IN
46573: IFFALSE 46646
// if GetBType ( j ) = b_bunker then
46575: LD_VAR 0 9
46579: PPUSH
46580: CALL_OW 266
46584: PUSH
46585: LD_INT 32
46587: EQUAL
46588: IFFALSE 46615
// tmp := Insert ( tmp , 1 , j ) else
46590: LD_ADDR_VAR 0 19
46594: PUSH
46595: LD_VAR 0 19
46599: PPUSH
46600: LD_INT 1
46602: PPUSH
46603: LD_VAR 0 9
46607: PPUSH
46608: CALL_OW 2
46612: ST_TO_ADDR
46613: GO 46644
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46615: LD_ADDR_VAR 0 19
46619: PUSH
46620: LD_VAR 0 19
46624: PPUSH
46625: LD_VAR 0 19
46629: PUSH
46630: LD_INT 1
46632: PLUS
46633: PPUSH
46634: LD_VAR 0 9
46638: PPUSH
46639: CALL_OW 2
46643: ST_TO_ADDR
46644: GO 46572
46646: POP
46647: POP
// if tmp then
46648: LD_VAR 0 19
46652: IFFALSE 46664
// f := tmp ;
46654: LD_ADDR_VAR 0 12
46658: PUSH
46659: LD_VAR 0 19
46663: ST_TO_ADDR
// end ; x := personel [ i ] ;
46664: LD_ADDR_VAR 0 13
46668: PUSH
46669: LD_VAR 0 6
46673: PUSH
46674: LD_VAR 0 8
46678: ARRAY
46679: ST_TO_ADDR
// if x = - 1 then
46680: LD_VAR 0 13
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: EQUAL
46689: IFFALSE 46898
// begin for j in f do
46691: LD_ADDR_VAR 0 9
46695: PUSH
46696: LD_VAR 0 12
46700: PUSH
46701: FOR_IN
46702: IFFALSE 46894
// repeat InitHc ;
46704: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46708: LD_VAR 0 9
46712: PPUSH
46713: CALL_OW 266
46717: PUSH
46718: LD_INT 5
46720: EQUAL
46721: IFFALSE 46791
// begin if UnitsInside ( j ) < 3 then
46723: LD_VAR 0 9
46727: PPUSH
46728: CALL_OW 313
46732: PUSH
46733: LD_INT 3
46735: LESS
46736: IFFALSE 46772
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46738: LD_INT 0
46740: PPUSH
46741: LD_INT 5
46743: PUSH
46744: LD_INT 8
46746: PUSH
46747: LD_INT 9
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: PUSH
46755: LD_VAR 0 17
46759: ARRAY
46760: PPUSH
46761: LD_VAR 0 4
46765: PPUSH
46766: CALL_OW 380
46770: GO 46789
// PrepareHuman ( false , i , skill ) ;
46772: LD_INT 0
46774: PPUSH
46775: LD_VAR 0 8
46779: PPUSH
46780: LD_VAR 0 4
46784: PPUSH
46785: CALL_OW 380
// end else
46789: GO 46808
// PrepareHuman ( false , i , skill ) ;
46791: LD_INT 0
46793: PPUSH
46794: LD_VAR 0 8
46798: PPUSH
46799: LD_VAR 0 4
46803: PPUSH
46804: CALL_OW 380
// un := CreateHuman ;
46808: LD_ADDR_VAR 0 14
46812: PUSH
46813: CALL_OW 44
46817: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46818: LD_ADDR_VAR 0 7
46822: PUSH
46823: LD_VAR 0 7
46827: PPUSH
46828: LD_INT 1
46830: PPUSH
46831: LD_VAR 0 14
46835: PPUSH
46836: CALL_OW 2
46840: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46841: LD_VAR 0 14
46845: PPUSH
46846: LD_VAR 0 9
46850: PPUSH
46851: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46855: LD_VAR 0 9
46859: PPUSH
46860: CALL_OW 313
46864: PUSH
46865: LD_INT 6
46867: EQUAL
46868: PUSH
46869: LD_VAR 0 9
46873: PPUSH
46874: CALL_OW 266
46878: PUSH
46879: LD_INT 32
46881: PUSH
46882: LD_INT 31
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: IN
46889: OR
46890: IFFALSE 46704
46892: GO 46701
46894: POP
46895: POP
// end else
46896: GO 47278
// for j = 1 to x do
46898: LD_ADDR_VAR 0 9
46902: PUSH
46903: DOUBLE
46904: LD_INT 1
46906: DEC
46907: ST_TO_ADDR
46908: LD_VAR 0 13
46912: PUSH
46913: FOR_TO
46914: IFFALSE 47276
// begin InitHc ;
46916: CALL_OW 19
// if not f then
46920: LD_VAR 0 12
46924: NOT
46925: IFFALSE 47014
// begin PrepareHuman ( false , i , skill ) ;
46927: LD_INT 0
46929: PPUSH
46930: LD_VAR 0 8
46934: PPUSH
46935: LD_VAR 0 4
46939: PPUSH
46940: CALL_OW 380
// un := CreateHuman ;
46944: LD_ADDR_VAR 0 14
46948: PUSH
46949: CALL_OW 44
46953: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46954: LD_ADDR_VAR 0 7
46958: PUSH
46959: LD_VAR 0 7
46963: PPUSH
46964: LD_INT 1
46966: PPUSH
46967: LD_VAR 0 14
46971: PPUSH
46972: CALL_OW 2
46976: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46977: LD_VAR 0 14
46981: PPUSH
46982: LD_VAR 0 1
46986: PPUSH
46987: CALL_OW 250
46991: PPUSH
46992: LD_VAR 0 1
46996: PPUSH
46997: CALL_OW 251
47001: PPUSH
47002: LD_INT 10
47004: PPUSH
47005: LD_INT 0
47007: PPUSH
47008: CALL_OW 50
// continue ;
47012: GO 46913
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47014: LD_VAR 0 12
47018: PUSH
47019: LD_INT 1
47021: ARRAY
47022: PPUSH
47023: CALL_OW 313
47027: PUSH
47028: LD_VAR 0 12
47032: PUSH
47033: LD_INT 1
47035: ARRAY
47036: PPUSH
47037: CALL_OW 266
47041: PUSH
47042: LD_INT 32
47044: PUSH
47045: LD_INT 31
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: IN
47052: AND
47053: PUSH
47054: LD_VAR 0 12
47058: PUSH
47059: LD_INT 1
47061: ARRAY
47062: PPUSH
47063: CALL_OW 313
47067: PUSH
47068: LD_INT 6
47070: EQUAL
47071: OR
47072: IFFALSE 47092
// f := Delete ( f , 1 ) ;
47074: LD_ADDR_VAR 0 12
47078: PUSH
47079: LD_VAR 0 12
47083: PPUSH
47084: LD_INT 1
47086: PPUSH
47087: CALL_OW 3
47091: ST_TO_ADDR
// if not f then
47092: LD_VAR 0 12
47096: NOT
47097: IFFALSE 47115
// begin x := x + 2 ;
47099: LD_ADDR_VAR 0 13
47103: PUSH
47104: LD_VAR 0 13
47108: PUSH
47109: LD_INT 2
47111: PLUS
47112: ST_TO_ADDR
// continue ;
47113: GO 46913
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47115: LD_VAR 0 12
47119: PUSH
47120: LD_INT 1
47122: ARRAY
47123: PPUSH
47124: CALL_OW 266
47128: PUSH
47129: LD_INT 5
47131: EQUAL
47132: IFFALSE 47206
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47134: LD_VAR 0 12
47138: PUSH
47139: LD_INT 1
47141: ARRAY
47142: PPUSH
47143: CALL_OW 313
47147: PUSH
47148: LD_INT 3
47150: LESS
47151: IFFALSE 47187
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47153: LD_INT 0
47155: PPUSH
47156: LD_INT 5
47158: PUSH
47159: LD_INT 8
47161: PUSH
47162: LD_INT 9
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: LIST
47169: PUSH
47170: LD_VAR 0 17
47174: ARRAY
47175: PPUSH
47176: LD_VAR 0 4
47180: PPUSH
47181: CALL_OW 380
47185: GO 47204
// PrepareHuman ( false , i , skill ) ;
47187: LD_INT 0
47189: PPUSH
47190: LD_VAR 0 8
47194: PPUSH
47195: LD_VAR 0 4
47199: PPUSH
47200: CALL_OW 380
// end else
47204: GO 47223
// PrepareHuman ( false , i , skill ) ;
47206: LD_INT 0
47208: PPUSH
47209: LD_VAR 0 8
47213: PPUSH
47214: LD_VAR 0 4
47218: PPUSH
47219: CALL_OW 380
// un := CreateHuman ;
47223: LD_ADDR_VAR 0 14
47227: PUSH
47228: CALL_OW 44
47232: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47233: LD_ADDR_VAR 0 7
47237: PUSH
47238: LD_VAR 0 7
47242: PPUSH
47243: LD_INT 1
47245: PPUSH
47246: LD_VAR 0 14
47250: PPUSH
47251: CALL_OW 2
47255: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47256: LD_VAR 0 14
47260: PPUSH
47261: LD_VAR 0 12
47265: PUSH
47266: LD_INT 1
47268: ARRAY
47269: PPUSH
47270: CALL_OW 52
// end ;
47274: GO 46913
47276: POP
47277: POP
// end ;
47278: GO 46215
47280: POP
47281: POP
// result := result ^ buildings ;
47282: LD_ADDR_VAR 0 7
47286: PUSH
47287: LD_VAR 0 7
47291: PUSH
47292: LD_VAR 0 18
47296: ADD
47297: ST_TO_ADDR
// end else
47298: GO 47441
// begin for i = 1 to personel do
47300: LD_ADDR_VAR 0 8
47304: PUSH
47305: DOUBLE
47306: LD_INT 1
47308: DEC
47309: ST_TO_ADDR
47310: LD_VAR 0 6
47314: PUSH
47315: FOR_TO
47316: IFFALSE 47439
// begin if i > 4 then
47318: LD_VAR 0 8
47322: PUSH
47323: LD_INT 4
47325: GREATER
47326: IFFALSE 47330
// break ;
47328: GO 47439
// x := personel [ i ] ;
47330: LD_ADDR_VAR 0 13
47334: PUSH
47335: LD_VAR 0 6
47339: PUSH
47340: LD_VAR 0 8
47344: ARRAY
47345: ST_TO_ADDR
// if x = - 1 then
47346: LD_VAR 0 13
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: EQUAL
47355: IFFALSE 47359
// continue ;
47357: GO 47315
// PrepareHuman ( false , i , skill ) ;
47359: LD_INT 0
47361: PPUSH
47362: LD_VAR 0 8
47366: PPUSH
47367: LD_VAR 0 4
47371: PPUSH
47372: CALL_OW 380
// un := CreateHuman ;
47376: LD_ADDR_VAR 0 14
47380: PUSH
47381: CALL_OW 44
47385: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47386: LD_VAR 0 14
47390: PPUSH
47391: LD_VAR 0 1
47395: PPUSH
47396: CALL_OW 250
47400: PPUSH
47401: LD_VAR 0 1
47405: PPUSH
47406: CALL_OW 251
47410: PPUSH
47411: LD_INT 10
47413: PPUSH
47414: LD_INT 0
47416: PPUSH
47417: CALL_OW 50
// result := result ^ un ;
47421: LD_ADDR_VAR 0 7
47425: PUSH
47426: LD_VAR 0 7
47430: PUSH
47431: LD_VAR 0 14
47435: ADD
47436: ST_TO_ADDR
// end ;
47437: GO 47315
47439: POP
47440: POP
// end ; end ;
47441: LD_VAR 0 7
47445: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47446: LD_INT 0
47448: PPUSH
47449: PPUSH
47450: PPUSH
47451: PPUSH
47452: PPUSH
47453: PPUSH
47454: PPUSH
47455: PPUSH
47456: PPUSH
47457: PPUSH
47458: PPUSH
47459: PPUSH
47460: PPUSH
47461: PPUSH
47462: PPUSH
47463: PPUSH
// result := false ;
47464: LD_ADDR_VAR 0 3
47468: PUSH
47469: LD_INT 0
47471: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47472: LD_VAR 0 1
47476: NOT
47477: PUSH
47478: LD_VAR 0 1
47482: PPUSH
47483: CALL_OW 266
47487: PUSH
47488: LD_INT 32
47490: PUSH
47491: LD_INT 33
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: IN
47498: NOT
47499: OR
47500: IFFALSE 47504
// exit ;
47502: GO 48613
// nat := GetNation ( tower ) ;
47504: LD_ADDR_VAR 0 12
47508: PUSH
47509: LD_VAR 0 1
47513: PPUSH
47514: CALL_OW 248
47518: ST_TO_ADDR
// side := GetSide ( tower ) ;
47519: LD_ADDR_VAR 0 16
47523: PUSH
47524: LD_VAR 0 1
47528: PPUSH
47529: CALL_OW 255
47533: ST_TO_ADDR
// x := GetX ( tower ) ;
47534: LD_ADDR_VAR 0 10
47538: PUSH
47539: LD_VAR 0 1
47543: PPUSH
47544: CALL_OW 250
47548: ST_TO_ADDR
// y := GetY ( tower ) ;
47549: LD_ADDR_VAR 0 11
47553: PUSH
47554: LD_VAR 0 1
47558: PPUSH
47559: CALL_OW 251
47563: ST_TO_ADDR
// if not x or not y then
47564: LD_VAR 0 10
47568: NOT
47569: PUSH
47570: LD_VAR 0 11
47574: NOT
47575: OR
47576: IFFALSE 47580
// exit ;
47578: GO 48613
// weapon := 0 ;
47580: LD_ADDR_VAR 0 18
47584: PUSH
47585: LD_INT 0
47587: ST_TO_ADDR
// fac_list := [ ] ;
47588: LD_ADDR_VAR 0 17
47592: PUSH
47593: EMPTY
47594: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47595: LD_ADDR_VAR 0 6
47599: PUSH
47600: LD_VAR 0 1
47604: PPUSH
47605: CALL_OW 274
47609: PPUSH
47610: LD_VAR 0 2
47614: PPUSH
47615: LD_INT 0
47617: PPUSH
47618: CALL 45184 0 3
47622: PPUSH
47623: LD_INT 30
47625: PUSH
47626: LD_INT 3
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PPUSH
47633: CALL_OW 72
47637: ST_TO_ADDR
// if not factories then
47638: LD_VAR 0 6
47642: NOT
47643: IFFALSE 47647
// exit ;
47645: GO 48613
// for i in factories do
47647: LD_ADDR_VAR 0 8
47651: PUSH
47652: LD_VAR 0 6
47656: PUSH
47657: FOR_IN
47658: IFFALSE 47683
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47660: LD_ADDR_VAR 0 17
47664: PUSH
47665: LD_VAR 0 17
47669: PUSH
47670: LD_VAR 0 8
47674: PPUSH
47675: CALL_OW 478
47679: UNION
47680: ST_TO_ADDR
47681: GO 47657
47683: POP
47684: POP
// if not fac_list then
47685: LD_VAR 0 17
47689: NOT
47690: IFFALSE 47694
// exit ;
47692: GO 48613
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47694: LD_ADDR_VAR 0 5
47698: PUSH
47699: LD_INT 4
47701: PUSH
47702: LD_INT 5
47704: PUSH
47705: LD_INT 9
47707: PUSH
47708: LD_INT 10
47710: PUSH
47711: LD_INT 6
47713: PUSH
47714: LD_INT 7
47716: PUSH
47717: LD_INT 11
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 27
47731: PUSH
47732: LD_INT 28
47734: PUSH
47735: LD_INT 26
47737: PUSH
47738: LD_INT 30
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 43
47749: PUSH
47750: LD_INT 44
47752: PUSH
47753: LD_INT 46
47755: PUSH
47756: LD_INT 45
47758: PUSH
47759: LD_INT 47
47761: PUSH
47762: LD_INT 49
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: LIST
47777: PUSH
47778: LD_VAR 0 12
47782: ARRAY
47783: ST_TO_ADDR
// list := list isect fac_list ;
47784: LD_ADDR_VAR 0 5
47788: PUSH
47789: LD_VAR 0 5
47793: PUSH
47794: LD_VAR 0 17
47798: ISECT
47799: ST_TO_ADDR
// if not list then
47800: LD_VAR 0 5
47804: NOT
47805: IFFALSE 47809
// exit ;
47807: GO 48613
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47809: LD_VAR 0 12
47813: PUSH
47814: LD_INT 3
47816: EQUAL
47817: PUSH
47818: LD_INT 49
47820: PUSH
47821: LD_VAR 0 5
47825: IN
47826: AND
47827: PUSH
47828: LD_INT 31
47830: PPUSH
47831: LD_VAR 0 16
47835: PPUSH
47836: CALL_OW 321
47840: PUSH
47841: LD_INT 2
47843: EQUAL
47844: AND
47845: IFFALSE 47905
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47847: LD_INT 22
47849: PUSH
47850: LD_VAR 0 16
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 35
47861: PUSH
47862: LD_INT 49
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 91
47871: PUSH
47872: LD_VAR 0 1
47876: PUSH
47877: LD_INT 10
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: LIST
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: LIST
47889: PPUSH
47890: CALL_OW 69
47894: NOT
47895: IFFALSE 47905
// weapon := ru_time_lapser ;
47897: LD_ADDR_VAR 0 18
47901: PUSH
47902: LD_INT 49
47904: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47905: LD_VAR 0 12
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 2
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: IN
47920: PUSH
47921: LD_INT 11
47923: PUSH
47924: LD_VAR 0 5
47928: IN
47929: PUSH
47930: LD_INT 30
47932: PUSH
47933: LD_VAR 0 5
47937: IN
47938: OR
47939: AND
47940: PUSH
47941: LD_INT 6
47943: PPUSH
47944: LD_VAR 0 16
47948: PPUSH
47949: CALL_OW 321
47953: PUSH
47954: LD_INT 2
47956: EQUAL
47957: AND
47958: IFFALSE 48123
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47960: LD_INT 22
47962: PUSH
47963: LD_VAR 0 16
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: LD_INT 35
47977: PUSH
47978: LD_INT 11
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 35
47987: PUSH
47988: LD_INT 30
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 91
48002: PUSH
48003: LD_VAR 0 1
48007: PUSH
48008: LD_INT 18
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: LIST
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: LIST
48020: PPUSH
48021: CALL_OW 69
48025: NOT
48026: PUSH
48027: LD_INT 22
48029: PUSH
48030: LD_VAR 0 16
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: PUSH
48042: LD_INT 30
48044: PUSH
48045: LD_INT 32
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 30
48054: PUSH
48055: LD_INT 33
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 91
48069: PUSH
48070: LD_VAR 0 1
48074: PUSH
48075: LD_INT 12
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: LIST
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: LIST
48087: PUSH
48088: EMPTY
48089: LIST
48090: PPUSH
48091: CALL_OW 69
48095: PUSH
48096: LD_INT 2
48098: GREATER
48099: AND
48100: IFFALSE 48123
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48102: LD_ADDR_VAR 0 18
48106: PUSH
48107: LD_INT 11
48109: PUSH
48110: LD_INT 30
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_VAR 0 12
48121: ARRAY
48122: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48123: LD_VAR 0 18
48127: NOT
48128: PUSH
48129: LD_INT 40
48131: PPUSH
48132: LD_VAR 0 16
48136: PPUSH
48137: CALL_OW 321
48141: PUSH
48142: LD_INT 2
48144: EQUAL
48145: AND
48146: PUSH
48147: LD_INT 7
48149: PUSH
48150: LD_VAR 0 5
48154: IN
48155: PUSH
48156: LD_INT 28
48158: PUSH
48159: LD_VAR 0 5
48163: IN
48164: OR
48165: PUSH
48166: LD_INT 45
48168: PUSH
48169: LD_VAR 0 5
48173: IN
48174: OR
48175: AND
48176: IFFALSE 48430
// begin hex := GetHexInfo ( x , y ) ;
48178: LD_ADDR_VAR 0 4
48182: PUSH
48183: LD_VAR 0 10
48187: PPUSH
48188: LD_VAR 0 11
48192: PPUSH
48193: CALL_OW 546
48197: ST_TO_ADDR
// if hex [ 1 ] then
48198: LD_VAR 0 4
48202: PUSH
48203: LD_INT 1
48205: ARRAY
48206: IFFALSE 48210
// exit ;
48208: GO 48613
// height := hex [ 2 ] ;
48210: LD_ADDR_VAR 0 15
48214: PUSH
48215: LD_VAR 0 4
48219: PUSH
48220: LD_INT 2
48222: ARRAY
48223: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48224: LD_ADDR_VAR 0 14
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: LD_INT 3
48237: PUSH
48238: LD_INT 5
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: ST_TO_ADDR
// for i in tmp do
48247: LD_ADDR_VAR 0 8
48251: PUSH
48252: LD_VAR 0 14
48256: PUSH
48257: FOR_IN
48258: IFFALSE 48428
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48260: LD_ADDR_VAR 0 9
48264: PUSH
48265: LD_VAR 0 10
48269: PPUSH
48270: LD_VAR 0 8
48274: PPUSH
48275: LD_INT 5
48277: PPUSH
48278: CALL_OW 272
48282: PUSH
48283: LD_VAR 0 11
48287: PPUSH
48288: LD_VAR 0 8
48292: PPUSH
48293: LD_INT 5
48295: PPUSH
48296: CALL_OW 273
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48305: LD_VAR 0 9
48309: PUSH
48310: LD_INT 1
48312: ARRAY
48313: PPUSH
48314: LD_VAR 0 9
48318: PUSH
48319: LD_INT 2
48321: ARRAY
48322: PPUSH
48323: CALL_OW 488
48327: IFFALSE 48426
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48329: LD_ADDR_VAR 0 4
48333: PUSH
48334: LD_VAR 0 9
48338: PUSH
48339: LD_INT 1
48341: ARRAY
48342: PPUSH
48343: LD_VAR 0 9
48347: PUSH
48348: LD_INT 2
48350: ARRAY
48351: PPUSH
48352: CALL_OW 546
48356: ST_TO_ADDR
// if hex [ 1 ] then
48357: LD_VAR 0 4
48361: PUSH
48362: LD_INT 1
48364: ARRAY
48365: IFFALSE 48369
// continue ;
48367: GO 48257
// h := hex [ 2 ] ;
48369: LD_ADDR_VAR 0 13
48373: PUSH
48374: LD_VAR 0 4
48378: PUSH
48379: LD_INT 2
48381: ARRAY
48382: ST_TO_ADDR
// if h + 7 < height then
48383: LD_VAR 0 13
48387: PUSH
48388: LD_INT 7
48390: PLUS
48391: PUSH
48392: LD_VAR 0 15
48396: LESS
48397: IFFALSE 48426
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48399: LD_ADDR_VAR 0 18
48403: PUSH
48404: LD_INT 7
48406: PUSH
48407: LD_INT 28
48409: PUSH
48410: LD_INT 45
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: LIST
48417: PUSH
48418: LD_VAR 0 12
48422: ARRAY
48423: ST_TO_ADDR
// break ;
48424: GO 48428
// end ; end ; end ;
48426: GO 48257
48428: POP
48429: POP
// end ; if not weapon then
48430: LD_VAR 0 18
48434: NOT
48435: IFFALSE 48495
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48437: LD_ADDR_VAR 0 5
48441: PUSH
48442: LD_VAR 0 5
48446: PUSH
48447: LD_INT 11
48449: PUSH
48450: LD_INT 30
48452: PUSH
48453: LD_INT 49
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: LIST
48460: DIFF
48461: ST_TO_ADDR
// if not list then
48462: LD_VAR 0 5
48466: NOT
48467: IFFALSE 48471
// exit ;
48469: GO 48613
// weapon := list [ rand ( 1 , list ) ] ;
48471: LD_ADDR_VAR 0 18
48475: PUSH
48476: LD_VAR 0 5
48480: PUSH
48481: LD_INT 1
48483: PPUSH
48484: LD_VAR 0 5
48488: PPUSH
48489: CALL_OW 12
48493: ARRAY
48494: ST_TO_ADDR
// end ; if weapon then
48495: LD_VAR 0 18
48499: IFFALSE 48613
// begin tmp := CostOfWeapon ( weapon ) ;
48501: LD_ADDR_VAR 0 14
48505: PUSH
48506: LD_VAR 0 18
48510: PPUSH
48511: CALL_OW 451
48515: ST_TO_ADDR
// j := GetBase ( tower ) ;
48516: LD_ADDR_VAR 0 9
48520: PUSH
48521: LD_VAR 0 1
48525: PPUSH
48526: CALL_OW 274
48530: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48531: LD_VAR 0 9
48535: PPUSH
48536: LD_INT 1
48538: PPUSH
48539: CALL_OW 275
48543: PUSH
48544: LD_VAR 0 14
48548: PUSH
48549: LD_INT 1
48551: ARRAY
48552: GREATEREQUAL
48553: PUSH
48554: LD_VAR 0 9
48558: PPUSH
48559: LD_INT 2
48561: PPUSH
48562: CALL_OW 275
48566: PUSH
48567: LD_VAR 0 14
48571: PUSH
48572: LD_INT 2
48574: ARRAY
48575: GREATEREQUAL
48576: AND
48577: PUSH
48578: LD_VAR 0 9
48582: PPUSH
48583: LD_INT 3
48585: PPUSH
48586: CALL_OW 275
48590: PUSH
48591: LD_VAR 0 14
48595: PUSH
48596: LD_INT 3
48598: ARRAY
48599: GREATEREQUAL
48600: AND
48601: IFFALSE 48613
// result := weapon ;
48603: LD_ADDR_VAR 0 3
48607: PUSH
48608: LD_VAR 0 18
48612: ST_TO_ADDR
// end ; end ;
48613: LD_VAR 0 3
48617: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48618: LD_INT 0
48620: PPUSH
48621: PPUSH
// result := true ;
48622: LD_ADDR_VAR 0 3
48626: PUSH
48627: LD_INT 1
48629: ST_TO_ADDR
// if array1 = array2 then
48630: LD_VAR 0 1
48634: PUSH
48635: LD_VAR 0 2
48639: EQUAL
48640: IFFALSE 48700
// begin for i = 1 to array1 do
48642: LD_ADDR_VAR 0 4
48646: PUSH
48647: DOUBLE
48648: LD_INT 1
48650: DEC
48651: ST_TO_ADDR
48652: LD_VAR 0 1
48656: PUSH
48657: FOR_TO
48658: IFFALSE 48696
// if array1 [ i ] <> array2 [ i ] then
48660: LD_VAR 0 1
48664: PUSH
48665: LD_VAR 0 4
48669: ARRAY
48670: PUSH
48671: LD_VAR 0 2
48675: PUSH
48676: LD_VAR 0 4
48680: ARRAY
48681: NONEQUAL
48682: IFFALSE 48694
// begin result := false ;
48684: LD_ADDR_VAR 0 3
48688: PUSH
48689: LD_INT 0
48691: ST_TO_ADDR
// break ;
48692: GO 48696
// end ;
48694: GO 48657
48696: POP
48697: POP
// end else
48698: GO 48708
// result := false ;
48700: LD_ADDR_VAR 0 3
48704: PUSH
48705: LD_INT 0
48707: ST_TO_ADDR
// end ;
48708: LD_VAR 0 3
48712: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48713: LD_INT 0
48715: PPUSH
48716: PPUSH
// if not array1 or not array2 then
48717: LD_VAR 0 1
48721: NOT
48722: PUSH
48723: LD_VAR 0 2
48727: NOT
48728: OR
48729: IFFALSE 48733
// exit ;
48731: GO 48797
// result := true ;
48733: LD_ADDR_VAR 0 3
48737: PUSH
48738: LD_INT 1
48740: ST_TO_ADDR
// for i = 1 to array1 do
48741: LD_ADDR_VAR 0 4
48745: PUSH
48746: DOUBLE
48747: LD_INT 1
48749: DEC
48750: ST_TO_ADDR
48751: LD_VAR 0 1
48755: PUSH
48756: FOR_TO
48757: IFFALSE 48795
// if array1 [ i ] <> array2 [ i ] then
48759: LD_VAR 0 1
48763: PUSH
48764: LD_VAR 0 4
48768: ARRAY
48769: PUSH
48770: LD_VAR 0 2
48774: PUSH
48775: LD_VAR 0 4
48779: ARRAY
48780: NONEQUAL
48781: IFFALSE 48793
// begin result := false ;
48783: LD_ADDR_VAR 0 3
48787: PUSH
48788: LD_INT 0
48790: ST_TO_ADDR
// break ;
48791: GO 48795
// end ;
48793: GO 48756
48795: POP
48796: POP
// end ;
48797: LD_VAR 0 3
48801: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48802: LD_INT 0
48804: PPUSH
48805: PPUSH
48806: PPUSH
// pom := GetBase ( fac ) ;
48807: LD_ADDR_VAR 0 5
48811: PUSH
48812: LD_VAR 0 1
48816: PPUSH
48817: CALL_OW 274
48821: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48822: LD_ADDR_VAR 0 4
48826: PUSH
48827: LD_VAR 0 2
48831: PUSH
48832: LD_INT 1
48834: ARRAY
48835: PPUSH
48836: LD_VAR 0 2
48840: PUSH
48841: LD_INT 2
48843: ARRAY
48844: PPUSH
48845: LD_VAR 0 2
48849: PUSH
48850: LD_INT 3
48852: ARRAY
48853: PPUSH
48854: LD_VAR 0 2
48858: PUSH
48859: LD_INT 4
48861: ARRAY
48862: PPUSH
48863: CALL_OW 449
48867: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48868: LD_ADDR_VAR 0 3
48872: PUSH
48873: LD_VAR 0 5
48877: PPUSH
48878: LD_INT 1
48880: PPUSH
48881: CALL_OW 275
48885: PUSH
48886: LD_VAR 0 4
48890: PUSH
48891: LD_INT 1
48893: ARRAY
48894: GREATEREQUAL
48895: PUSH
48896: LD_VAR 0 5
48900: PPUSH
48901: LD_INT 2
48903: PPUSH
48904: CALL_OW 275
48908: PUSH
48909: LD_VAR 0 4
48913: PUSH
48914: LD_INT 2
48916: ARRAY
48917: GREATEREQUAL
48918: AND
48919: PUSH
48920: LD_VAR 0 5
48924: PPUSH
48925: LD_INT 3
48927: PPUSH
48928: CALL_OW 275
48932: PUSH
48933: LD_VAR 0 4
48937: PUSH
48938: LD_INT 3
48940: ARRAY
48941: GREATEREQUAL
48942: AND
48943: ST_TO_ADDR
// end ;
48944: LD_VAR 0 3
48948: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48949: LD_INT 0
48951: PPUSH
48952: PPUSH
48953: PPUSH
48954: PPUSH
// pom := GetBase ( building ) ;
48955: LD_ADDR_VAR 0 3
48959: PUSH
48960: LD_VAR 0 1
48964: PPUSH
48965: CALL_OW 274
48969: ST_TO_ADDR
// if not pom then
48970: LD_VAR 0 3
48974: NOT
48975: IFFALSE 48979
// exit ;
48977: GO 49149
// btype := GetBType ( building ) ;
48979: LD_ADDR_VAR 0 5
48983: PUSH
48984: LD_VAR 0 1
48988: PPUSH
48989: CALL_OW 266
48993: ST_TO_ADDR
// if btype = b_armoury then
48994: LD_VAR 0 5
48998: PUSH
48999: LD_INT 4
49001: EQUAL
49002: IFFALSE 49012
// btype := b_barracks ;
49004: LD_ADDR_VAR 0 5
49008: PUSH
49009: LD_INT 5
49011: ST_TO_ADDR
// if btype = b_depot then
49012: LD_VAR 0 5
49016: PUSH
49017: LD_INT 0
49019: EQUAL
49020: IFFALSE 49030
// btype := b_warehouse ;
49022: LD_ADDR_VAR 0 5
49026: PUSH
49027: LD_INT 1
49029: ST_TO_ADDR
// if btype = b_workshop then
49030: LD_VAR 0 5
49034: PUSH
49035: LD_INT 2
49037: EQUAL
49038: IFFALSE 49048
// btype := b_factory ;
49040: LD_ADDR_VAR 0 5
49044: PUSH
49045: LD_INT 3
49047: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49048: LD_ADDR_VAR 0 4
49052: PUSH
49053: LD_VAR 0 5
49057: PPUSH
49058: LD_VAR 0 1
49062: PPUSH
49063: CALL_OW 248
49067: PPUSH
49068: CALL_OW 450
49072: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49073: LD_ADDR_VAR 0 2
49077: PUSH
49078: LD_VAR 0 3
49082: PPUSH
49083: LD_INT 1
49085: PPUSH
49086: CALL_OW 275
49090: PUSH
49091: LD_VAR 0 4
49095: PUSH
49096: LD_INT 1
49098: ARRAY
49099: GREATEREQUAL
49100: PUSH
49101: LD_VAR 0 3
49105: PPUSH
49106: LD_INT 2
49108: PPUSH
49109: CALL_OW 275
49113: PUSH
49114: LD_VAR 0 4
49118: PUSH
49119: LD_INT 2
49121: ARRAY
49122: GREATEREQUAL
49123: AND
49124: PUSH
49125: LD_VAR 0 3
49129: PPUSH
49130: LD_INT 3
49132: PPUSH
49133: CALL_OW 275
49137: PUSH
49138: LD_VAR 0 4
49142: PUSH
49143: LD_INT 3
49145: ARRAY
49146: GREATEREQUAL
49147: AND
49148: ST_TO_ADDR
// end ;
49149: LD_VAR 0 2
49153: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49154: LD_INT 0
49156: PPUSH
49157: PPUSH
49158: PPUSH
// pom := GetBase ( building ) ;
49159: LD_ADDR_VAR 0 4
49163: PUSH
49164: LD_VAR 0 1
49168: PPUSH
49169: CALL_OW 274
49173: ST_TO_ADDR
// if not pom then
49174: LD_VAR 0 4
49178: NOT
49179: IFFALSE 49183
// exit ;
49181: GO 49284
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49183: LD_ADDR_VAR 0 5
49187: PUSH
49188: LD_VAR 0 2
49192: PPUSH
49193: LD_VAR 0 1
49197: PPUSH
49198: CALL_OW 248
49202: PPUSH
49203: CALL_OW 450
49207: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49208: LD_ADDR_VAR 0 3
49212: PUSH
49213: LD_VAR 0 4
49217: PPUSH
49218: LD_INT 1
49220: PPUSH
49221: CALL_OW 275
49225: PUSH
49226: LD_VAR 0 5
49230: PUSH
49231: LD_INT 1
49233: ARRAY
49234: GREATEREQUAL
49235: PUSH
49236: LD_VAR 0 4
49240: PPUSH
49241: LD_INT 2
49243: PPUSH
49244: CALL_OW 275
49248: PUSH
49249: LD_VAR 0 5
49253: PUSH
49254: LD_INT 2
49256: ARRAY
49257: GREATEREQUAL
49258: AND
49259: PUSH
49260: LD_VAR 0 4
49264: PPUSH
49265: LD_INT 3
49267: PPUSH
49268: CALL_OW 275
49272: PUSH
49273: LD_VAR 0 5
49277: PUSH
49278: LD_INT 3
49280: ARRAY
49281: GREATEREQUAL
49282: AND
49283: ST_TO_ADDR
// end ;
49284: LD_VAR 0 3
49288: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49289: LD_INT 0
49291: PPUSH
49292: PPUSH
49293: PPUSH
49294: PPUSH
49295: PPUSH
49296: PPUSH
49297: PPUSH
49298: PPUSH
49299: PPUSH
49300: PPUSH
49301: PPUSH
// result := false ;
49302: LD_ADDR_VAR 0 8
49306: PUSH
49307: LD_INT 0
49309: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49310: LD_VAR 0 5
49314: NOT
49315: PUSH
49316: LD_VAR 0 1
49320: NOT
49321: OR
49322: PUSH
49323: LD_VAR 0 2
49327: NOT
49328: OR
49329: PUSH
49330: LD_VAR 0 3
49334: NOT
49335: OR
49336: IFFALSE 49340
// exit ;
49338: GO 50154
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49340: LD_ADDR_VAR 0 14
49344: PUSH
49345: LD_VAR 0 1
49349: PPUSH
49350: LD_VAR 0 2
49354: PPUSH
49355: LD_VAR 0 3
49359: PPUSH
49360: LD_VAR 0 4
49364: PPUSH
49365: LD_VAR 0 5
49369: PUSH
49370: LD_INT 1
49372: ARRAY
49373: PPUSH
49374: CALL_OW 248
49378: PPUSH
49379: LD_INT 0
49381: PPUSH
49382: CALL 51391 0 6
49386: ST_TO_ADDR
// if not hexes then
49387: LD_VAR 0 14
49391: NOT
49392: IFFALSE 49396
// exit ;
49394: GO 50154
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49396: LD_ADDR_VAR 0 17
49400: PUSH
49401: LD_VAR 0 5
49405: PPUSH
49406: LD_INT 22
49408: PUSH
49409: LD_VAR 0 13
49413: PPUSH
49414: CALL_OW 255
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: LD_INT 30
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 30
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: LIST
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PPUSH
49455: CALL_OW 72
49459: ST_TO_ADDR
// for i = 1 to hexes do
49460: LD_ADDR_VAR 0 9
49464: PUSH
49465: DOUBLE
49466: LD_INT 1
49468: DEC
49469: ST_TO_ADDR
49470: LD_VAR 0 14
49474: PUSH
49475: FOR_TO
49476: IFFALSE 50152
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49478: LD_ADDR_VAR 0 13
49482: PUSH
49483: LD_VAR 0 14
49487: PUSH
49488: LD_VAR 0 9
49492: ARRAY
49493: PUSH
49494: LD_INT 1
49496: ARRAY
49497: PPUSH
49498: LD_VAR 0 14
49502: PUSH
49503: LD_VAR 0 9
49507: ARRAY
49508: PUSH
49509: LD_INT 2
49511: ARRAY
49512: PPUSH
49513: CALL_OW 428
49517: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49518: LD_VAR 0 14
49522: PUSH
49523: LD_VAR 0 9
49527: ARRAY
49528: PUSH
49529: LD_INT 1
49531: ARRAY
49532: PPUSH
49533: LD_VAR 0 14
49537: PUSH
49538: LD_VAR 0 9
49542: ARRAY
49543: PUSH
49544: LD_INT 2
49546: ARRAY
49547: PPUSH
49548: CALL_OW 351
49552: PUSH
49553: LD_VAR 0 14
49557: PUSH
49558: LD_VAR 0 9
49562: ARRAY
49563: PUSH
49564: LD_INT 1
49566: ARRAY
49567: PPUSH
49568: LD_VAR 0 14
49572: PUSH
49573: LD_VAR 0 9
49577: ARRAY
49578: PUSH
49579: LD_INT 2
49581: ARRAY
49582: PPUSH
49583: CALL_OW 488
49587: NOT
49588: OR
49589: PUSH
49590: LD_VAR 0 13
49594: PPUSH
49595: CALL_OW 247
49599: PUSH
49600: LD_INT 3
49602: EQUAL
49603: OR
49604: IFFALSE 49610
// exit ;
49606: POP
49607: POP
49608: GO 50154
// if not tmp then
49610: LD_VAR 0 13
49614: NOT
49615: IFFALSE 49619
// continue ;
49617: GO 49475
// result := true ;
49619: LD_ADDR_VAR 0 8
49623: PUSH
49624: LD_INT 1
49626: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49627: LD_VAR 0 6
49631: PUSH
49632: LD_VAR 0 13
49636: PPUSH
49637: CALL_OW 247
49641: PUSH
49642: LD_INT 2
49644: EQUAL
49645: AND
49646: PUSH
49647: LD_VAR 0 13
49651: PPUSH
49652: CALL_OW 263
49656: PUSH
49657: LD_INT 1
49659: EQUAL
49660: AND
49661: IFFALSE 49825
// begin if IsDrivenBy ( tmp ) then
49663: LD_VAR 0 13
49667: PPUSH
49668: CALL_OW 311
49672: IFFALSE 49676
// continue ;
49674: GO 49475
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49676: LD_VAR 0 6
49680: PPUSH
49681: LD_INT 3
49683: PUSH
49684: LD_INT 60
49686: PUSH
49687: EMPTY
49688: LIST
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 3
49696: PUSH
49697: LD_INT 55
49699: PUSH
49700: EMPTY
49701: LIST
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PPUSH
49711: CALL_OW 72
49715: IFFALSE 49823
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49717: LD_ADDR_VAR 0 18
49721: PUSH
49722: LD_VAR 0 6
49726: PPUSH
49727: LD_INT 3
49729: PUSH
49730: LD_INT 60
49732: PUSH
49733: EMPTY
49734: LIST
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 3
49742: PUSH
49743: LD_INT 55
49745: PUSH
49746: EMPTY
49747: LIST
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PPUSH
49757: CALL_OW 72
49761: PUSH
49762: LD_INT 1
49764: ARRAY
49765: ST_TO_ADDR
// if IsInUnit ( driver ) then
49766: LD_VAR 0 18
49770: PPUSH
49771: CALL_OW 310
49775: IFFALSE 49786
// ComExit ( driver ) ;
49777: LD_VAR 0 18
49781: PPUSH
49782: CALL 74575 0 1
// AddComEnterUnit ( driver , tmp ) ;
49786: LD_VAR 0 18
49790: PPUSH
49791: LD_VAR 0 13
49795: PPUSH
49796: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49800: LD_VAR 0 18
49804: PPUSH
49805: LD_VAR 0 7
49809: PPUSH
49810: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49814: LD_VAR 0 18
49818: PPUSH
49819: CALL_OW 181
// end ; continue ;
49823: GO 49475
// end ; if not cleaners or not tmp in cleaners then
49825: LD_VAR 0 6
49829: NOT
49830: PUSH
49831: LD_VAR 0 13
49835: PUSH
49836: LD_VAR 0 6
49840: IN
49841: NOT
49842: OR
49843: IFFALSE 50150
// begin if dep then
49845: LD_VAR 0 17
49849: IFFALSE 49985
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49851: LD_ADDR_VAR 0 16
49855: PUSH
49856: LD_VAR 0 17
49860: PUSH
49861: LD_INT 1
49863: ARRAY
49864: PPUSH
49865: CALL_OW 250
49869: PPUSH
49870: LD_VAR 0 17
49874: PUSH
49875: LD_INT 1
49877: ARRAY
49878: PPUSH
49879: CALL_OW 254
49883: PPUSH
49884: LD_INT 5
49886: PPUSH
49887: CALL_OW 272
49891: PUSH
49892: LD_VAR 0 17
49896: PUSH
49897: LD_INT 1
49899: ARRAY
49900: PPUSH
49901: CALL_OW 251
49905: PPUSH
49906: LD_VAR 0 17
49910: PUSH
49911: LD_INT 1
49913: ARRAY
49914: PPUSH
49915: CALL_OW 254
49919: PPUSH
49920: LD_INT 5
49922: PPUSH
49923: CALL_OW 273
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49932: LD_VAR 0 16
49936: PUSH
49937: LD_INT 1
49939: ARRAY
49940: PPUSH
49941: LD_VAR 0 16
49945: PUSH
49946: LD_INT 2
49948: ARRAY
49949: PPUSH
49950: CALL_OW 488
49954: IFFALSE 49985
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49956: LD_VAR 0 13
49960: PPUSH
49961: LD_VAR 0 16
49965: PUSH
49966: LD_INT 1
49968: ARRAY
49969: PPUSH
49970: LD_VAR 0 16
49974: PUSH
49975: LD_INT 2
49977: ARRAY
49978: PPUSH
49979: CALL_OW 111
// continue ;
49983: GO 49475
// end ; end ; r := GetDir ( tmp ) ;
49985: LD_ADDR_VAR 0 15
49989: PUSH
49990: LD_VAR 0 13
49994: PPUSH
49995: CALL_OW 254
49999: ST_TO_ADDR
// if r = 5 then
50000: LD_VAR 0 15
50004: PUSH
50005: LD_INT 5
50007: EQUAL
50008: IFFALSE 50018
// r := 0 ;
50010: LD_ADDR_VAR 0 15
50014: PUSH
50015: LD_INT 0
50017: ST_TO_ADDR
// for j = r to 5 do
50018: LD_ADDR_VAR 0 10
50022: PUSH
50023: DOUBLE
50024: LD_VAR 0 15
50028: DEC
50029: ST_TO_ADDR
50030: LD_INT 5
50032: PUSH
50033: FOR_TO
50034: IFFALSE 50148
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50036: LD_ADDR_VAR 0 11
50040: PUSH
50041: LD_VAR 0 13
50045: PPUSH
50046: CALL_OW 250
50050: PPUSH
50051: LD_VAR 0 10
50055: PPUSH
50056: LD_INT 2
50058: PPUSH
50059: CALL_OW 272
50063: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50064: LD_ADDR_VAR 0 12
50068: PUSH
50069: LD_VAR 0 13
50073: PPUSH
50074: CALL_OW 251
50078: PPUSH
50079: LD_VAR 0 10
50083: PPUSH
50084: LD_INT 2
50086: PPUSH
50087: CALL_OW 273
50091: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50092: LD_VAR 0 11
50096: PPUSH
50097: LD_VAR 0 12
50101: PPUSH
50102: CALL_OW 488
50106: PUSH
50107: LD_VAR 0 11
50111: PPUSH
50112: LD_VAR 0 12
50116: PPUSH
50117: CALL_OW 428
50121: NOT
50122: AND
50123: IFFALSE 50146
// begin ComMoveXY ( tmp , _x , _y ) ;
50125: LD_VAR 0 13
50129: PPUSH
50130: LD_VAR 0 11
50134: PPUSH
50135: LD_VAR 0 12
50139: PPUSH
50140: CALL_OW 111
// break ;
50144: GO 50148
// end ; end ;
50146: GO 50033
50148: POP
50149: POP
// end ; end ;
50150: GO 49475
50152: POP
50153: POP
// end ;
50154: LD_VAR 0 8
50158: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50159: LD_INT 0
50161: PPUSH
// result := true ;
50162: LD_ADDR_VAR 0 3
50166: PUSH
50167: LD_INT 1
50169: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50170: LD_VAR 0 2
50174: PUSH
50175: LD_INT 24
50177: DOUBLE
50178: EQUAL
50179: IFTRUE 50189
50181: LD_INT 33
50183: DOUBLE
50184: EQUAL
50185: IFTRUE 50189
50187: GO 50214
50189: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50190: LD_ADDR_VAR 0 3
50194: PUSH
50195: LD_INT 32
50197: PPUSH
50198: LD_VAR 0 1
50202: PPUSH
50203: CALL_OW 321
50207: PUSH
50208: LD_INT 2
50210: EQUAL
50211: ST_TO_ADDR
50212: GO 50534
50214: LD_INT 20
50216: DOUBLE
50217: EQUAL
50218: IFTRUE 50222
50220: GO 50247
50222: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50223: LD_ADDR_VAR 0 3
50227: PUSH
50228: LD_INT 6
50230: PPUSH
50231: LD_VAR 0 1
50235: PPUSH
50236: CALL_OW 321
50240: PUSH
50241: LD_INT 2
50243: EQUAL
50244: ST_TO_ADDR
50245: GO 50534
50247: LD_INT 22
50249: DOUBLE
50250: EQUAL
50251: IFTRUE 50261
50253: LD_INT 36
50255: DOUBLE
50256: EQUAL
50257: IFTRUE 50261
50259: GO 50286
50261: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50262: LD_ADDR_VAR 0 3
50266: PUSH
50267: LD_INT 15
50269: PPUSH
50270: LD_VAR 0 1
50274: PPUSH
50275: CALL_OW 321
50279: PUSH
50280: LD_INT 2
50282: EQUAL
50283: ST_TO_ADDR
50284: GO 50534
50286: LD_INT 30
50288: DOUBLE
50289: EQUAL
50290: IFTRUE 50294
50292: GO 50319
50294: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50295: LD_ADDR_VAR 0 3
50299: PUSH
50300: LD_INT 20
50302: PPUSH
50303: LD_VAR 0 1
50307: PPUSH
50308: CALL_OW 321
50312: PUSH
50313: LD_INT 2
50315: EQUAL
50316: ST_TO_ADDR
50317: GO 50534
50319: LD_INT 28
50321: DOUBLE
50322: EQUAL
50323: IFTRUE 50333
50325: LD_INT 21
50327: DOUBLE
50328: EQUAL
50329: IFTRUE 50333
50331: GO 50358
50333: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50334: LD_ADDR_VAR 0 3
50338: PUSH
50339: LD_INT 21
50341: PPUSH
50342: LD_VAR 0 1
50346: PPUSH
50347: CALL_OW 321
50351: PUSH
50352: LD_INT 2
50354: EQUAL
50355: ST_TO_ADDR
50356: GO 50534
50358: LD_INT 16
50360: DOUBLE
50361: EQUAL
50362: IFTRUE 50366
50364: GO 50393
50366: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50367: LD_ADDR_VAR 0 3
50371: PUSH
50372: LD_EXP 61
50376: PPUSH
50377: LD_VAR 0 1
50381: PPUSH
50382: CALL_OW 321
50386: PUSH
50387: LD_INT 2
50389: EQUAL
50390: ST_TO_ADDR
50391: GO 50534
50393: LD_INT 19
50395: DOUBLE
50396: EQUAL
50397: IFTRUE 50407
50399: LD_INT 23
50401: DOUBLE
50402: EQUAL
50403: IFTRUE 50407
50405: GO 50434
50407: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50408: LD_ADDR_VAR 0 3
50412: PUSH
50413: LD_EXP 60
50417: PPUSH
50418: LD_VAR 0 1
50422: PPUSH
50423: CALL_OW 321
50427: PUSH
50428: LD_INT 2
50430: EQUAL
50431: ST_TO_ADDR
50432: GO 50534
50434: LD_INT 17
50436: DOUBLE
50437: EQUAL
50438: IFTRUE 50442
50440: GO 50467
50442: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50443: LD_ADDR_VAR 0 3
50447: PUSH
50448: LD_INT 39
50450: PPUSH
50451: LD_VAR 0 1
50455: PPUSH
50456: CALL_OW 321
50460: PUSH
50461: LD_INT 2
50463: EQUAL
50464: ST_TO_ADDR
50465: GO 50534
50467: LD_INT 18
50469: DOUBLE
50470: EQUAL
50471: IFTRUE 50475
50473: GO 50500
50475: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50476: LD_ADDR_VAR 0 3
50480: PUSH
50481: LD_INT 40
50483: PPUSH
50484: LD_VAR 0 1
50488: PPUSH
50489: CALL_OW 321
50493: PUSH
50494: LD_INT 2
50496: EQUAL
50497: ST_TO_ADDR
50498: GO 50534
50500: LD_INT 27
50502: DOUBLE
50503: EQUAL
50504: IFTRUE 50508
50506: GO 50533
50508: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50509: LD_ADDR_VAR 0 3
50513: PUSH
50514: LD_INT 35
50516: PPUSH
50517: LD_VAR 0 1
50521: PPUSH
50522: CALL_OW 321
50526: PUSH
50527: LD_INT 2
50529: EQUAL
50530: ST_TO_ADDR
50531: GO 50534
50533: POP
// end ;
50534: LD_VAR 0 3
50538: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50539: LD_INT 0
50541: PPUSH
50542: PPUSH
50543: PPUSH
50544: PPUSH
50545: PPUSH
50546: PPUSH
50547: PPUSH
50548: PPUSH
50549: PPUSH
50550: PPUSH
50551: PPUSH
// result := false ;
50552: LD_ADDR_VAR 0 6
50556: PUSH
50557: LD_INT 0
50559: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50560: LD_VAR 0 1
50564: NOT
50565: PUSH
50566: LD_VAR 0 1
50570: PPUSH
50571: CALL_OW 266
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: IN
50586: NOT
50587: OR
50588: PUSH
50589: LD_VAR 0 2
50593: NOT
50594: OR
50595: PUSH
50596: LD_VAR 0 5
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: LD_INT 3
50612: PUSH
50613: LD_INT 4
50615: PUSH
50616: LD_INT 5
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: IN
50627: NOT
50628: OR
50629: PUSH
50630: LD_VAR 0 3
50634: PPUSH
50635: LD_VAR 0 4
50639: PPUSH
50640: CALL_OW 488
50644: NOT
50645: OR
50646: IFFALSE 50650
// exit ;
50648: GO 51386
// side := GetSide ( depot ) ;
50650: LD_ADDR_VAR 0 9
50654: PUSH
50655: LD_VAR 0 1
50659: PPUSH
50660: CALL_OW 255
50664: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50665: LD_VAR 0 9
50669: PPUSH
50670: LD_VAR 0 2
50674: PPUSH
50675: CALL 50159 0 2
50679: NOT
50680: IFFALSE 50684
// exit ;
50682: GO 51386
// pom := GetBase ( depot ) ;
50684: LD_ADDR_VAR 0 10
50688: PUSH
50689: LD_VAR 0 1
50693: PPUSH
50694: CALL_OW 274
50698: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50699: LD_ADDR_VAR 0 11
50703: PUSH
50704: LD_VAR 0 2
50708: PPUSH
50709: LD_VAR 0 1
50713: PPUSH
50714: CALL_OW 248
50718: PPUSH
50719: CALL_OW 450
50723: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50724: LD_VAR 0 10
50728: PPUSH
50729: LD_INT 1
50731: PPUSH
50732: CALL_OW 275
50736: PUSH
50737: LD_VAR 0 11
50741: PUSH
50742: LD_INT 1
50744: ARRAY
50745: GREATEREQUAL
50746: PUSH
50747: LD_VAR 0 10
50751: PPUSH
50752: LD_INT 2
50754: PPUSH
50755: CALL_OW 275
50759: PUSH
50760: LD_VAR 0 11
50764: PUSH
50765: LD_INT 2
50767: ARRAY
50768: GREATEREQUAL
50769: AND
50770: PUSH
50771: LD_VAR 0 10
50775: PPUSH
50776: LD_INT 3
50778: PPUSH
50779: CALL_OW 275
50783: PUSH
50784: LD_VAR 0 11
50788: PUSH
50789: LD_INT 3
50791: ARRAY
50792: GREATEREQUAL
50793: AND
50794: NOT
50795: IFFALSE 50799
// exit ;
50797: GO 51386
// if GetBType ( depot ) = b_depot then
50799: LD_VAR 0 1
50803: PPUSH
50804: CALL_OW 266
50808: PUSH
50809: LD_INT 0
50811: EQUAL
50812: IFFALSE 50824
// dist := 28 else
50814: LD_ADDR_VAR 0 14
50818: PUSH
50819: LD_INT 28
50821: ST_TO_ADDR
50822: GO 50832
// dist := 36 ;
50824: LD_ADDR_VAR 0 14
50828: PUSH
50829: LD_INT 36
50831: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50832: LD_VAR 0 1
50836: PPUSH
50837: LD_VAR 0 3
50841: PPUSH
50842: LD_VAR 0 4
50846: PPUSH
50847: CALL_OW 297
50851: PUSH
50852: LD_VAR 0 14
50856: GREATER
50857: IFFALSE 50861
// exit ;
50859: GO 51386
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50861: LD_ADDR_VAR 0 12
50865: PUSH
50866: LD_VAR 0 2
50870: PPUSH
50871: LD_VAR 0 3
50875: PPUSH
50876: LD_VAR 0 4
50880: PPUSH
50881: LD_VAR 0 5
50885: PPUSH
50886: LD_VAR 0 1
50890: PPUSH
50891: CALL_OW 248
50895: PPUSH
50896: LD_INT 0
50898: PPUSH
50899: CALL 51391 0 6
50903: ST_TO_ADDR
// if not hexes then
50904: LD_VAR 0 12
50908: NOT
50909: IFFALSE 50913
// exit ;
50911: GO 51386
// hex := GetHexInfo ( x , y ) ;
50913: LD_ADDR_VAR 0 15
50917: PUSH
50918: LD_VAR 0 3
50922: PPUSH
50923: LD_VAR 0 4
50927: PPUSH
50928: CALL_OW 546
50932: ST_TO_ADDR
// if hex [ 1 ] then
50933: LD_VAR 0 15
50937: PUSH
50938: LD_INT 1
50940: ARRAY
50941: IFFALSE 50945
// exit ;
50943: GO 51386
// height := hex [ 2 ] ;
50945: LD_ADDR_VAR 0 13
50949: PUSH
50950: LD_VAR 0 15
50954: PUSH
50955: LD_INT 2
50957: ARRAY
50958: ST_TO_ADDR
// for i = 1 to hexes do
50959: LD_ADDR_VAR 0 7
50963: PUSH
50964: DOUBLE
50965: LD_INT 1
50967: DEC
50968: ST_TO_ADDR
50969: LD_VAR 0 12
50973: PUSH
50974: FOR_TO
50975: IFFALSE 51305
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50977: LD_VAR 0 12
50981: PUSH
50982: LD_VAR 0 7
50986: ARRAY
50987: PUSH
50988: LD_INT 1
50990: ARRAY
50991: PPUSH
50992: LD_VAR 0 12
50996: PUSH
50997: LD_VAR 0 7
51001: ARRAY
51002: PUSH
51003: LD_INT 2
51005: ARRAY
51006: PPUSH
51007: CALL_OW 488
51011: NOT
51012: PUSH
51013: LD_VAR 0 12
51017: PUSH
51018: LD_VAR 0 7
51022: ARRAY
51023: PUSH
51024: LD_INT 1
51026: ARRAY
51027: PPUSH
51028: LD_VAR 0 12
51032: PUSH
51033: LD_VAR 0 7
51037: ARRAY
51038: PUSH
51039: LD_INT 2
51041: ARRAY
51042: PPUSH
51043: CALL_OW 428
51047: PUSH
51048: LD_INT 0
51050: GREATER
51051: OR
51052: PUSH
51053: LD_VAR 0 12
51057: PUSH
51058: LD_VAR 0 7
51062: ARRAY
51063: PUSH
51064: LD_INT 1
51066: ARRAY
51067: PPUSH
51068: LD_VAR 0 12
51072: PUSH
51073: LD_VAR 0 7
51077: ARRAY
51078: PUSH
51079: LD_INT 2
51081: ARRAY
51082: PPUSH
51083: CALL_OW 351
51087: OR
51088: IFFALSE 51094
// exit ;
51090: POP
51091: POP
51092: GO 51386
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51094: LD_ADDR_VAR 0 8
51098: PUSH
51099: LD_VAR 0 12
51103: PUSH
51104: LD_VAR 0 7
51108: ARRAY
51109: PUSH
51110: LD_INT 1
51112: ARRAY
51113: PPUSH
51114: LD_VAR 0 12
51118: PUSH
51119: LD_VAR 0 7
51123: ARRAY
51124: PUSH
51125: LD_INT 2
51127: ARRAY
51128: PPUSH
51129: CALL_OW 546
51133: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51134: LD_VAR 0 8
51138: PUSH
51139: LD_INT 1
51141: ARRAY
51142: PUSH
51143: LD_VAR 0 8
51147: PUSH
51148: LD_INT 2
51150: ARRAY
51151: PUSH
51152: LD_VAR 0 13
51156: PUSH
51157: LD_INT 2
51159: PLUS
51160: GREATER
51161: OR
51162: PUSH
51163: LD_VAR 0 8
51167: PUSH
51168: LD_INT 2
51170: ARRAY
51171: PUSH
51172: LD_VAR 0 13
51176: PUSH
51177: LD_INT 2
51179: MINUS
51180: LESS
51181: OR
51182: PUSH
51183: LD_VAR 0 8
51187: PUSH
51188: LD_INT 3
51190: ARRAY
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: LD_INT 8
51197: PUSH
51198: LD_INT 9
51200: PUSH
51201: LD_INT 10
51203: PUSH
51204: LD_INT 11
51206: PUSH
51207: LD_INT 12
51209: PUSH
51210: LD_INT 13
51212: PUSH
51213: LD_INT 16
51215: PUSH
51216: LD_INT 17
51218: PUSH
51219: LD_INT 18
51221: PUSH
51222: LD_INT 19
51224: PUSH
51225: LD_INT 20
51227: PUSH
51228: LD_INT 21
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: IN
51246: NOT
51247: OR
51248: PUSH
51249: LD_VAR 0 8
51253: PUSH
51254: LD_INT 5
51256: ARRAY
51257: NOT
51258: OR
51259: PUSH
51260: LD_VAR 0 8
51264: PUSH
51265: LD_INT 6
51267: ARRAY
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: LD_INT 7
51277: PUSH
51278: LD_INT 9
51280: PUSH
51281: LD_INT 10
51283: PUSH
51284: LD_INT 11
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: IN
51295: NOT
51296: OR
51297: IFFALSE 51303
// exit ;
51299: POP
51300: POP
51301: GO 51386
// end ;
51303: GO 50974
51305: POP
51306: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51307: LD_VAR 0 9
51311: PPUSH
51312: LD_VAR 0 3
51316: PPUSH
51317: LD_VAR 0 4
51321: PPUSH
51322: LD_INT 20
51324: PPUSH
51325: CALL 43332 0 4
51329: PUSH
51330: LD_INT 4
51332: ARRAY
51333: IFFALSE 51337
// exit ;
51335: GO 51386
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51337: LD_VAR 0 2
51341: PUSH
51342: LD_INT 29
51344: PUSH
51345: LD_INT 30
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: IN
51352: PUSH
51353: LD_VAR 0 3
51357: PPUSH
51358: LD_VAR 0 4
51362: PPUSH
51363: LD_VAR 0 9
51367: PPUSH
51368: CALL_OW 440
51372: NOT
51373: AND
51374: IFFALSE 51378
// exit ;
51376: GO 51386
// result := true ;
51378: LD_ADDR_VAR 0 6
51382: PUSH
51383: LD_INT 1
51385: ST_TO_ADDR
// end ;
51386: LD_VAR 0 6
51390: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51391: LD_INT 0
51393: PPUSH
51394: PPUSH
51395: PPUSH
51396: PPUSH
51397: PPUSH
51398: PPUSH
51399: PPUSH
51400: PPUSH
51401: PPUSH
51402: PPUSH
51403: PPUSH
51404: PPUSH
51405: PPUSH
51406: PPUSH
51407: PPUSH
51408: PPUSH
51409: PPUSH
51410: PPUSH
51411: PPUSH
51412: PPUSH
51413: PPUSH
51414: PPUSH
51415: PPUSH
51416: PPUSH
51417: PPUSH
51418: PPUSH
51419: PPUSH
51420: PPUSH
51421: PPUSH
51422: PPUSH
51423: PPUSH
51424: PPUSH
51425: PPUSH
51426: PPUSH
51427: PPUSH
51428: PPUSH
51429: PPUSH
51430: PPUSH
51431: PPUSH
51432: PPUSH
51433: PPUSH
51434: PPUSH
51435: PPUSH
51436: PPUSH
51437: PPUSH
51438: PPUSH
51439: PPUSH
51440: PPUSH
51441: PPUSH
51442: PPUSH
51443: PPUSH
51444: PPUSH
51445: PPUSH
51446: PPUSH
51447: PPUSH
51448: PPUSH
51449: PPUSH
51450: PPUSH
// result = [ ] ;
51451: LD_ADDR_VAR 0 7
51455: PUSH
51456: EMPTY
51457: ST_TO_ADDR
// temp_list = [ ] ;
51458: LD_ADDR_VAR 0 9
51462: PUSH
51463: EMPTY
51464: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51465: LD_VAR 0 4
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: LD_INT 3
51481: PUSH
51482: LD_INT 4
51484: PUSH
51485: LD_INT 5
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: IN
51496: NOT
51497: PUSH
51498: LD_VAR 0 1
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: IN
51513: PUSH
51514: LD_VAR 0 5
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: LD_INT 3
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: LIST
51532: IN
51533: NOT
51534: AND
51535: OR
51536: IFFALSE 51540
// exit ;
51538: GO 69931
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51540: LD_VAR 0 1
51544: PUSH
51545: LD_INT 6
51547: PUSH
51548: LD_INT 7
51550: PUSH
51551: LD_INT 8
51553: PUSH
51554: LD_INT 13
51556: PUSH
51557: LD_INT 12
51559: PUSH
51560: LD_INT 15
51562: PUSH
51563: LD_INT 11
51565: PUSH
51566: LD_INT 14
51568: PUSH
51569: LD_INT 10
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: IN
51583: IFFALSE 51593
// btype = b_lab ;
51585: LD_ADDR_VAR 0 1
51589: PUSH
51590: LD_INT 6
51592: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51593: LD_VAR 0 6
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: LD_INT 2
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: IN
51612: NOT
51613: PUSH
51614: LD_VAR 0 1
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 2
51627: PUSH
51628: LD_INT 3
51630: PUSH
51631: LD_INT 6
51633: PUSH
51634: LD_INT 36
51636: PUSH
51637: LD_INT 4
51639: PUSH
51640: LD_INT 5
51642: PUSH
51643: LD_INT 31
51645: PUSH
51646: LD_INT 32
51648: PUSH
51649: LD_INT 33
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: IN
51665: NOT
51666: PUSH
51667: LD_VAR 0 6
51671: PUSH
51672: LD_INT 1
51674: EQUAL
51675: AND
51676: OR
51677: PUSH
51678: LD_VAR 0 1
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: LD_INT 3
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: IN
51693: NOT
51694: PUSH
51695: LD_VAR 0 6
51699: PUSH
51700: LD_INT 2
51702: EQUAL
51703: AND
51704: OR
51705: IFFALSE 51715
// mode = 0 ;
51707: LD_ADDR_VAR 0 6
51711: PUSH
51712: LD_INT 0
51714: ST_TO_ADDR
// case mode of 0 :
51715: LD_VAR 0 6
51719: PUSH
51720: LD_INT 0
51722: DOUBLE
51723: EQUAL
51724: IFTRUE 51728
51726: GO 63181
51728: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51729: LD_ADDR_VAR 0 11
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 2
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 3
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 3
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51922: LD_ADDR_VAR 0 12
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: NEG
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: NEG
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 3
52079: NEG
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 3
52090: NEG
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52118: LD_ADDR_VAR 0 13
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 2
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 2
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 2
52241: NEG
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: NEG
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: LD_INT 3
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 3
52277: NEG
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 3
52289: NEG
52290: PUSH
52291: LD_INT 3
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52317: LD_ADDR_VAR 0 14
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 2
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: LD_INT 3
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: LD_INT 3
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52513: LD_ADDR_VAR 0 15
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 2
52636: NEG
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 2
52647: NEG
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: LD_INT 1
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 3
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 3
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52706: LD_ADDR_VAR 0 16
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 2
52829: NEG
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 3
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 3
52863: PUSH
52864: LD_INT 3
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: LD_INT 3
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52899: LD_ADDR_VAR 0 17
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: LD_INT 2
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 2
53075: NEG
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 2
53086: NEG
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 2
53098: NEG
53099: PUSH
53100: LD_INT 2
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53129: LD_ADDR_VAR 0 18
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: LD_INT 2
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 2
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 2
53316: NEG
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: LD_INT 2
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53359: LD_ADDR_VAR 0 19
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: LD_INT 2
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 2
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: LD_INT 2
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 2
53535: NEG
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 2
53546: NEG
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: LD_INT 2
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53589: LD_ADDR_VAR 0 20
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: NEG
53789: PUSH
53790: LD_INT 2
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53819: LD_ADDR_VAR 0 21
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: LD_INT 2
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: LD_INT 2
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 2
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: LD_INT 2
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 2
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 2
54006: NEG
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54049: LD_ADDR_VAR 0 22
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 2
54248: NEG
54249: PUSH
54250: LD_INT 2
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54279: LD_ADDR_VAR 0 23
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: LD_INT 2
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 2
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 2
54466: NEG
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: LD_INT 2
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: NEG
54491: PUSH
54492: LD_INT 3
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: LD_INT 3
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54559: LD_ADDR_VAR 0 24
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: LD_INT 2
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: NEG
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: NEG
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 3
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 3
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54835: LD_ADDR_VAR 0 25
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 2
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 2
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: LD_INT 2
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 2
55022: NEG
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 2
55034: NEG
55035: PUSH
55036: LD_INT 2
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 3
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 3
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 2
55066: PUSH
55067: LD_INT 3
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: LD_INT 3
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55109: LD_ADDR_VAR 0 26
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 2
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 2
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 2
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 2
55320: PUSH
55321: LD_INT 3
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: LD_INT 3
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: LD_INT 2
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55385: LD_ADDR_VAR 0 27
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 2
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: LD_INT 2
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 2
55572: NEG
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 2
55584: NEG
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: LD_INT 2
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 3
55618: NEG
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 3
55630: NEG
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55665: LD_ADDR_VAR 0 28
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 2
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: LD_INT 2
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: LD_INT 2
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 2
55841: NEG
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 2
55864: NEG
55865: PUSH
55866: LD_INT 2
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 2
55876: NEG
55877: PUSH
55878: LD_INT 3
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: LD_INT 3
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 3
55900: NEG
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 3
55912: NEG
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55947: LD_ADDR_VAR 0 29
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 3
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 3
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 3
56191: NEG
56192: PUSH
56193: LD_INT 2
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56226: LD_ADDR_VAR 0 30
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: LD_INT 2
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: LD_INT 1
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 2
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: LD_INT 2
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 2
56392: NEG
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 2
56403: NEG
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 3
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: LD_INT 2
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 3
56438: PUSH
56439: LD_INT 2
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: LD_INT 3
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 2
56458: NEG
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 3
56469: NEG
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56504: LD_ADDR_VAR 0 31
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 0
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 2
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 2
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: PUSH
56629: LD_INT 2
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: LD_INT 2
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: LD_INT 2
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 2
56669: NEG
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 2
56681: NEG
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 2
56693: NEG
56694: PUSH
56695: LD_INT 3
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 3
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: LD_INT 3
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 3
56747: NEG
56748: PUSH
56749: LD_INT 2
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56782: LD_ADDR_VAR 0 32
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: LD_INT 2
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 2
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: LD_INT 2
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: LD_INT 2
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 2
56948: NEG
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 2
56959: NEG
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: LD_INT 3
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 3
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: LD_INT 3
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 3
57025: NEG
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57060: LD_ADDR_VAR 0 33
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: LD_INT 2
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: LD_INT 2
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 2
57250: NEG
57251: PUSH
57252: LD_INT 3
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: LD_INT 3
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 3
57304: NEG
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57339: LD_ADDR_VAR 0 34
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: LD_INT 2
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: LD_INT 2
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: NEG
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 2
57495: NEG
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 2
57506: NEG
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: LD_INT 3
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: LD_INT 2
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 3
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: LD_INT 3
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 3
57584: NEG
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57619: LD_ADDR_VAR 0 35
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: LD_INT 1
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 2
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 2
57710: NEG
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57731: LD_ADDR_VAR 0 36
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: LD_INT 2
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57843: LD_ADDR_VAR 0 37
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57955: LD_ADDR_VAR 0 38
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 2
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58067: LD_ADDR_VAR 0 39
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: LD_INT 2
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58179: LD_ADDR_VAR 0 40
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58291: LD_ADDR_VAR 0 41
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 2
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 2
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 2
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: LD_INT 2
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 2
58446: NEG
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 2
58457: NEG
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: LD_INT 2
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: LD_INT 3
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 2
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 3
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 3
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 3
58524: PUSH
58525: LD_INT 2
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 3
58534: PUSH
58535: LD_INT 3
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: LD_INT 3
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 2
58554: NEG
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 3
58565: NEG
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 3
58576: NEG
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 3
58588: NEG
58589: PUSH
58590: LD_INT 2
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 3
58600: NEG
58601: PUSH
58602: LD_INT 3
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58641: LD_ADDR_VAR 0 42
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 2
58766: PUSH
58767: LD_INT 2
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 1
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 2
58807: NEG
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: LD_INT 2
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: LD_INT 3
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: LD_INT 3
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 3
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 3
58877: PUSH
58878: LD_INT 2
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 3
58887: PUSH
58888: LD_INT 3
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: LD_INT 3
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: LD_INT 3
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: LD_INT 3
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: LD_INT 2
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 3
58938: NEG
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 3
58950: NEG
58951: PUSH
58952: LD_INT 3
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58991: LD_ADDR_VAR 0 43
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 1
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: LD_INT 2
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 2
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: LD_INT 2
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 2
59157: NEG
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 2
59168: NEG
59169: PUSH
59170: LD_INT 1
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: LD_INT 3
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: LD_INT 3
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 2
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 3
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 3
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: LD_INT 3
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: LD_INT 3
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 2
59276: NEG
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 3
59287: NEG
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 3
59298: NEG
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59339: LD_ADDR_VAR 0 44
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 0
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: NEG
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: NEG
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: LD_INT 2
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 2
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 2
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 2
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: LD_INT 2
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 2
59505: NEG
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: NEG
59518: PUSH
59519: LD_INT 2
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 2
59529: NEG
59530: PUSH
59531: LD_INT 3
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 3
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 3
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 3
59572: PUSH
59573: LD_INT 2
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 3
59582: PUSH
59583: LD_INT 3
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 2
59592: PUSH
59593: LD_INT 3
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 2
59602: NEG
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 3
59613: NEG
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 3
59624: NEG
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 3
59636: NEG
59637: PUSH
59638: LD_INT 2
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 3
59648: NEG
59649: PUSH
59650: LD_INT 3
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59689: LD_ADDR_VAR 0 45
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: LD_INT 1
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 1
59747: NEG
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: LD_INT 2
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 2
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 0
59834: PUSH
59835: LD_INT 2
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 2
59867: NEG
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 2
59879: NEG
59880: PUSH
59881: LD_INT 3
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: LD_INT 3
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 3
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: PUSH
59915: LD_INT 2
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 3
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 3
59935: PUSH
59936: LD_INT 3
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 2
59945: PUSH
59946: LD_INT 3
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 1
59955: PUSH
59956: LD_INT 3
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: LD_INT 3
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: LD_INT 2
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 3
59986: NEG
59987: PUSH
59988: LD_INT 2
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 3
59998: NEG
59999: PUSH
60000: LD_INT 3
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60039: LD_ADDR_VAR 0 46
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: LD_INT 1
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: LD_INT 2
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 2
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: LD_INT 2
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: LD_INT 2
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 2
60216: NEG
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: LD_INT 3
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: LD_INT 3
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 2
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 3
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 3
60283: PUSH
60284: LD_INT 1
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: LD_INT 3
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: LD_INT 3
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: LD_INT 2
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 2
60324: NEG
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 3
60335: NEG
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 3
60346: NEG
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60387: LD_ADDR_VAR 0 47
60391: PUSH
60392: LD_INT 0
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 1
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: LD_INT 1
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 1
60445: NEG
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 1
60456: NEG
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 1
60468: NEG
60469: PUSH
60470: LD_INT 2
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 2
60502: NEG
60503: PUSH
60504: LD_INT 1
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 2
60514: NEG
60515: PUSH
60516: LD_INT 2
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60538: LD_ADDR_VAR 0 48
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: LD_INT 0
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 0
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: LD_INT 2
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 2
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: LD_INT 1
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 2
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60685: LD_ADDR_VAR 0 49
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 1
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: LD_INT 1
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: NEG
60755: PUSH
60756: LD_INT 1
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 2
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 2
60797: PUSH
60798: LD_INT 2
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 2
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60829: LD_ADDR_VAR 0 50
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 2
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 2
60920: PUSH
60921: LD_INT 2
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: LD_INT 2
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60973: LD_ADDR_VAR 0 51
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: LD_INT 1
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 1
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: LD_INT 2
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: LD_INT 2
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 2
61085: NEG
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: NEG
61097: PUSH
61098: LD_INT 1
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61120: LD_ADDR_VAR 0 52
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: NEG
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: LD_INT 2
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 1
61213: NEG
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 2
61224: NEG
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: NEG
61236: PUSH
61237: LD_INT 1
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 2
61247: NEG
61248: PUSH
61249: LD_INT 2
61251: NEG
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61271: LD_ADDR_VAR 0 53
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 1
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: LD_INT 2
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: PUSH
61376: LD_INT 1
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 2
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 2
61406: PUSH
61407: LD_INT 2
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: LD_INT 2
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 2
61447: NEG
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 2
61458: NEG
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 2
61470: NEG
61471: PUSH
61472: LD_INT 2
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61501: LD_ADDR_VAR 0 54
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 0
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: LD_INT 2
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 1
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 2
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 2
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: LD_INT 2
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: PUSH
61647: LD_INT 2
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 1
61666: NEG
61667: PUSH
61668: LD_INT 1
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 2
61677: NEG
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 2
61688: NEG
61689: PUSH
61690: LD_INT 1
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 2
61700: NEG
61701: PUSH
61702: LD_INT 2
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61731: LD_ADDR_VAR 0 55
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: LD_INT 1
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: LD_INT 1
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: LD_INT 1
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: NEG
61790: PUSH
61791: LD_INT 0
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 1
61812: NEG
61813: PUSH
61814: LD_INT 2
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: LD_INT 2
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 1
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 2
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: LD_INT 2
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 1
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: LD_INT 2
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 2
61907: NEG
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 2
61918: NEG
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: LD_INT 2
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61961: LD_ADDR_VAR 0 56
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: LD_INT 1
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: NEG
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 1
62030: NEG
62031: PUSH
62032: LD_INT 1
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 1
62042: NEG
62043: PUSH
62044: LD_INT 2
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: LD_INT 2
62057: NEG
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 1
62065: PUSH
62066: LD_INT 1
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 2
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 2
62096: PUSH
62097: LD_INT 2
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: LD_INT 2
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: LD_INT 1
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 2
62137: NEG
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 2
62148: NEG
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 2
62160: NEG
62161: PUSH
62162: LD_INT 2
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62191: LD_ADDR_VAR 0 57
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: LD_INT 0
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: LD_INT 1
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: LD_INT 1
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: LD_INT 1
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: NEG
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: LD_INT 2
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 2
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: LD_INT 1
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 2
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 2
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 2
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: LD_INT 2
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 1
62356: NEG
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 2
62367: NEG
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 2
62378: NEG
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 2
62390: NEG
62391: PUSH
62392: LD_INT 2
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62421: LD_ADDR_VAR 0 58
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: LD_INT 1
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 1
62490: NEG
62491: PUSH
62492: LD_INT 1
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: NEG
62503: PUSH
62504: LD_INT 2
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: LD_INT 2
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 2
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 2
62546: PUSH
62547: LD_INT 1
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 2
62556: PUSH
62557: LD_INT 2
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 1
62566: PUSH
62567: LD_INT 2
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: LD_INT 2
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: NEG
62587: PUSH
62588: LD_INT 1
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 2
62597: NEG
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 2
62608: NEG
62609: PUSH
62610: LD_INT 1
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PUSH
62622: LD_INT 2
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62651: LD_ADDR_VAR 0 59
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: LD_INT 0
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: LD_INT 1
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 1
62709: NEG
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: LD_INT 1
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62739: LD_ADDR_VAR 0 60
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: LD_INT 0
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: LD_INT 1
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 1
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 1
62777: PUSH
62778: LD_INT 1
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: LD_INT 1
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 1
62797: NEG
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62827: LD_ADDR_VAR 0 61
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: LD_INT 0
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: LD_INT 1
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62915: LD_ADDR_VAR 0 62
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: NEG
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63003: LD_ADDR_VAR 0 63
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: LD_INT 0
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: LD_INT 1
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: PUSH
63042: LD_INT 1
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 0
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 1
63061: NEG
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 1
63072: NEG
63073: PUSH
63074: LD_INT 1
63076: NEG
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63091: LD_ADDR_VAR 0 64
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 1
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: LD_INT 0
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: LD_INT 1
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: ST_TO_ADDR
// end ; 1 :
63179: GO 69076
63181: LD_INT 1
63183: DOUBLE
63184: EQUAL
63185: IFTRUE 63189
63187: GO 65812
63189: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63190: LD_ADDR_VAR 0 11
63194: PUSH
63195: LD_INT 1
63197: NEG
63198: PUSH
63199: LD_INT 3
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: LD_INT 3
63212: NEG
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: LD_INT 2
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: LIST
63233: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63234: LD_ADDR_VAR 0 12
63238: PUSH
63239: LD_INT 2
63241: PUSH
63242: LD_INT 1
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 3
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 3
63262: PUSH
63263: LD_INT 1
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: LIST
63274: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63275: LD_ADDR_VAR 0 13
63279: PUSH
63280: LD_INT 3
63282: PUSH
63283: LD_INT 2
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 3
63292: PUSH
63293: LD_INT 3
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 2
63302: PUSH
63303: LD_INT 3
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: LIST
63314: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63315: LD_ADDR_VAR 0 14
63319: PUSH
63320: LD_INT 1
63322: PUSH
63323: LD_INT 3
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: LD_INT 3
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: LD_INT 2
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: LIST
63355: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63356: LD_ADDR_VAR 0 15
63360: PUSH
63361: LD_INT 2
63363: NEG
63364: PUSH
63365: LD_INT 1
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 3
63374: NEG
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 3
63385: NEG
63386: PUSH
63387: LD_INT 1
63389: NEG
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: LIST
63399: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63400: LD_ADDR_VAR 0 16
63404: PUSH
63405: LD_INT 2
63407: NEG
63408: PUSH
63409: LD_INT 3
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 3
63419: NEG
63420: PUSH
63421: LD_INT 2
63423: NEG
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 3
63431: NEG
63432: PUSH
63433: LD_INT 3
63435: NEG
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: LIST
63445: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63446: LD_ADDR_VAR 0 17
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: LD_INT 3
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: LD_INT 3
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 1
63476: PUSH
63477: LD_INT 2
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: LIST
63489: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63490: LD_ADDR_VAR 0 18
63494: PUSH
63495: LD_INT 2
63497: PUSH
63498: LD_INT 1
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 3
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 3
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: LIST
63530: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63531: LD_ADDR_VAR 0 19
63535: PUSH
63536: LD_INT 3
63538: PUSH
63539: LD_INT 2
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 3
63548: PUSH
63549: LD_INT 3
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: LD_INT 3
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: LIST
63570: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63571: LD_ADDR_VAR 0 20
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: LD_INT 3
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: LD_INT 3
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 1
63598: NEG
63599: PUSH
63600: LD_INT 2
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: LIST
63611: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63612: LD_ADDR_VAR 0 21
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: LD_INT 1
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 3
63630: NEG
63631: PUSH
63632: LD_INT 0
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 3
63641: NEG
63642: PUSH
63643: LD_INT 1
63645: NEG
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: LIST
63655: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63656: LD_ADDR_VAR 0 22
63660: PUSH
63661: LD_INT 2
63663: NEG
63664: PUSH
63665: LD_INT 3
63667: NEG
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 3
63675: NEG
63676: PUSH
63677: LD_INT 2
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 3
63687: NEG
63688: PUSH
63689: LD_INT 3
63691: NEG
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: LIST
63701: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63702: LD_ADDR_VAR 0 23
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: LD_INT 3
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 1
63720: NEG
63721: PUSH
63722: LD_INT 4
63724: NEG
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 1
63732: PUSH
63733: LD_INT 3
63735: NEG
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: LIST
63745: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63746: LD_ADDR_VAR 0 24
63750: PUSH
63751: LD_INT 3
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 3
63763: PUSH
63764: LD_INT 1
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 4
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: LIST
63786: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63787: LD_ADDR_VAR 0 25
63791: PUSH
63792: LD_INT 3
63794: PUSH
63795: LD_INT 3
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 4
63804: PUSH
63805: LD_INT 3
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 3
63814: PUSH
63815: LD_INT 4
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: LIST
63826: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63827: LD_ADDR_VAR 0 26
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: LD_INT 3
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 1
63844: PUSH
63845: LD_INT 4
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: LD_INT 3
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: LIST
63867: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63868: LD_ADDR_VAR 0 27
63872: PUSH
63873: LD_INT 3
63875: NEG
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 3
63886: NEG
63887: PUSH
63888: LD_INT 1
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 4
63897: NEG
63898: PUSH
63899: LD_INT 1
63901: NEG
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: LIST
63911: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63912: LD_ADDR_VAR 0 28
63916: PUSH
63917: LD_INT 3
63919: NEG
63920: PUSH
63921: LD_INT 3
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 3
63931: NEG
63932: PUSH
63933: LD_INT 4
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 4
63943: NEG
63944: PUSH
63945: LD_INT 3
63947: NEG
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: LIST
63957: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63958: LD_ADDR_VAR 0 29
63962: PUSH
63963: LD_INT 1
63965: NEG
63966: PUSH
63967: LD_INT 3
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 0
63977: PUSH
63978: LD_INT 3
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 1
63988: PUSH
63989: LD_INT 2
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 1
63999: NEG
64000: PUSH
64001: LD_INT 4
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: LD_INT 4
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 1
64022: PUSH
64023: LD_INT 3
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: NEG
64034: PUSH
64035: LD_INT 5
64037: NEG
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: LD_INT 5
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: LD_INT 4
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 1
64067: NEG
64068: PUSH
64069: LD_INT 6
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: LD_INT 6
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 1
64090: PUSH
64091: LD_INT 5
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64113: LD_ADDR_VAR 0 30
64117: PUSH
64118: LD_INT 2
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 3
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 3
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 3
64151: PUSH
64152: LD_INT 1
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 4
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 4
64172: PUSH
64173: LD_INT 1
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 4
64182: PUSH
64183: LD_INT 1
64185: NEG
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 5
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 5
64203: PUSH
64204: LD_INT 1
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 5
64213: PUSH
64214: LD_INT 1
64216: NEG
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 6
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 6
64234: PUSH
64235: LD_INT 1
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64256: LD_ADDR_VAR 0 31
64260: PUSH
64261: LD_INT 3
64263: PUSH
64264: LD_INT 2
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 3
64273: PUSH
64274: LD_INT 3
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 2
64283: PUSH
64284: LD_INT 3
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 4
64293: PUSH
64294: LD_INT 3
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 4
64303: PUSH
64304: LD_INT 4
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 3
64313: PUSH
64314: LD_INT 4
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 5
64323: PUSH
64324: LD_INT 4
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 5
64333: PUSH
64334: LD_INT 5
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 4
64343: PUSH
64344: LD_INT 5
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 6
64353: PUSH
64354: LD_INT 5
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 6
64363: PUSH
64364: LD_INT 6
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 5
64373: PUSH
64374: LD_INT 6
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64395: LD_ADDR_VAR 0 32
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: LD_INT 3
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: LD_INT 3
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 1
64422: NEG
64423: PUSH
64424: LD_INT 2
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 1
64433: PUSH
64434: LD_INT 4
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: LD_INT 4
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: LD_INT 3
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 1
64464: PUSH
64465: LD_INT 5
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: LD_INT 5
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 1
64484: NEG
64485: PUSH
64486: LD_INT 4
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 1
64495: PUSH
64496: LD_INT 6
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: LD_INT 6
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 1
64515: NEG
64516: PUSH
64517: LD_INT 5
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64538: LD_ADDR_VAR 0 33
64542: PUSH
64543: LD_INT 2
64545: NEG
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 3
64556: NEG
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 3
64567: NEG
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 3
64579: NEG
64580: PUSH
64581: LD_INT 1
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 4
64590: NEG
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 4
64601: NEG
64602: PUSH
64603: LD_INT 1
64605: NEG
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 4
64613: NEG
64614: PUSH
64615: LD_INT 1
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 5
64624: NEG
64625: PUSH
64626: LD_INT 0
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 5
64635: NEG
64636: PUSH
64637: LD_INT 1
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 5
64647: NEG
64648: PUSH
64649: LD_INT 1
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 6
64658: NEG
64659: PUSH
64660: LD_INT 0
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 6
64669: NEG
64670: PUSH
64671: LD_INT 1
64673: NEG
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64693: LD_ADDR_VAR 0 34
64697: PUSH
64698: LD_INT 2
64700: NEG
64701: PUSH
64702: LD_INT 3
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 3
64712: NEG
64713: PUSH
64714: LD_INT 2
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 3
64724: NEG
64725: PUSH
64726: LD_INT 3
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 3
64736: NEG
64737: PUSH
64738: LD_INT 4
64740: NEG
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 4
64748: NEG
64749: PUSH
64750: LD_INT 3
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 4
64760: NEG
64761: PUSH
64762: LD_INT 4
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 4
64772: NEG
64773: PUSH
64774: LD_INT 5
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 5
64784: NEG
64785: PUSH
64786: LD_INT 4
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 5
64796: NEG
64797: PUSH
64798: LD_INT 5
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 5
64808: NEG
64809: PUSH
64810: LD_INT 6
64812: NEG
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 6
64820: NEG
64821: PUSH
64822: LD_INT 5
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 6
64832: NEG
64833: PUSH
64834: LD_INT 6
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64856: LD_ADDR_VAR 0 41
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: LD_INT 2
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 1
64874: NEG
64875: PUSH
64876: LD_INT 3
64878: NEG
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 1
64886: PUSH
64887: LD_INT 2
64889: NEG
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: LIST
64899: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64900: LD_ADDR_VAR 0 42
64904: PUSH
64905: LD_INT 2
64907: PUSH
64908: LD_INT 0
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 2
64917: PUSH
64918: LD_INT 1
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 3
64928: PUSH
64929: LD_INT 1
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: LIST
64940: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64941: LD_ADDR_VAR 0 43
64945: PUSH
64946: LD_INT 2
64948: PUSH
64949: LD_INT 2
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 3
64958: PUSH
64959: LD_INT 2
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 2
64968: PUSH
64969: LD_INT 3
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: LIST
64980: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64981: LD_ADDR_VAR 0 44
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: LD_INT 2
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 1
64998: PUSH
64999: LD_INT 3
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 1
65008: NEG
65009: PUSH
65010: LD_INT 2
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: LIST
65021: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65022: LD_ADDR_VAR 0 45
65026: PUSH
65027: LD_INT 2
65029: NEG
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 2
65040: NEG
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 3
65051: NEG
65052: PUSH
65053: LD_INT 1
65055: NEG
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: LIST
65065: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65066: LD_ADDR_VAR 0 46
65070: PUSH
65071: LD_INT 2
65073: NEG
65074: PUSH
65075: LD_INT 2
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 2
65085: NEG
65086: PUSH
65087: LD_INT 3
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 3
65097: NEG
65098: PUSH
65099: LD_INT 2
65101: NEG
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: LIST
65111: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65112: LD_ADDR_VAR 0 47
65116: PUSH
65117: LD_INT 2
65119: NEG
65120: PUSH
65121: LD_INT 3
65123: NEG
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 1
65131: NEG
65132: PUSH
65133: LD_INT 3
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65145: LD_ADDR_VAR 0 48
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: LD_INT 2
65155: NEG
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 2
65163: PUSH
65164: LD_INT 1
65166: NEG
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65176: LD_ADDR_VAR 0 49
65180: PUSH
65181: LD_INT 3
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 3
65193: PUSH
65194: LD_INT 2
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65205: LD_ADDR_VAR 0 50
65209: PUSH
65210: LD_INT 2
65212: PUSH
65213: LD_INT 3
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 1
65222: PUSH
65223: LD_INT 3
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65234: LD_ADDR_VAR 0 51
65238: PUSH
65239: LD_INT 1
65241: NEG
65242: PUSH
65243: LD_INT 2
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 2
65252: NEG
65253: PUSH
65254: LD_INT 1
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65265: LD_ADDR_VAR 0 52
65269: PUSH
65270: LD_INT 3
65272: NEG
65273: PUSH
65274: LD_INT 1
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 3
65284: NEG
65285: PUSH
65286: LD_INT 2
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65298: LD_ADDR_VAR 0 53
65302: PUSH
65303: LD_INT 1
65305: NEG
65306: PUSH
65307: LD_INT 3
65309: NEG
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 0
65317: PUSH
65318: LD_INT 3
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: LD_INT 2
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: LIST
65341: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65342: LD_ADDR_VAR 0 54
65346: PUSH
65347: LD_INT 2
65349: PUSH
65350: LD_INT 1
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 3
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 3
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: LIST
65382: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65383: LD_ADDR_VAR 0 55
65387: PUSH
65388: LD_INT 3
65390: PUSH
65391: LD_INT 2
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 3
65400: PUSH
65401: LD_INT 3
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 2
65410: PUSH
65411: LD_INT 3
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: LIST
65422: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65423: LD_ADDR_VAR 0 56
65427: PUSH
65428: LD_INT 1
65430: PUSH
65431: LD_INT 3
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 0
65440: PUSH
65441: LD_INT 3
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 1
65450: NEG
65451: PUSH
65452: LD_INT 2
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: LIST
65463: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65464: LD_ADDR_VAR 0 57
65468: PUSH
65469: LD_INT 2
65471: NEG
65472: PUSH
65473: LD_INT 1
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 3
65482: NEG
65483: PUSH
65484: LD_INT 0
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 3
65493: NEG
65494: PUSH
65495: LD_INT 1
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: LIST
65507: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65508: LD_ADDR_VAR 0 58
65512: PUSH
65513: LD_INT 2
65515: NEG
65516: PUSH
65517: LD_INT 3
65519: NEG
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 3
65527: NEG
65528: PUSH
65529: LD_INT 2
65531: NEG
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 3
65539: NEG
65540: PUSH
65541: LD_INT 3
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: LIST
65553: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65554: LD_ADDR_VAR 0 59
65558: PUSH
65559: LD_INT 1
65561: NEG
65562: PUSH
65563: LD_INT 2
65565: NEG
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: LD_INT 2
65576: NEG
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 1
65584: PUSH
65585: LD_INT 1
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: LIST
65597: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65598: LD_ADDR_VAR 0 60
65602: PUSH
65603: LD_INT 1
65605: PUSH
65606: LD_INT 1
65608: NEG
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 2
65616: PUSH
65617: LD_INT 0
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 2
65626: PUSH
65627: LD_INT 1
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: LIST
65638: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65639: LD_ADDR_VAR 0 61
65643: PUSH
65644: LD_INT 2
65646: PUSH
65647: LD_INT 1
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 2
65656: PUSH
65657: LD_INT 2
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 1
65666: PUSH
65667: LD_INT 2
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: LIST
65678: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65679: LD_ADDR_VAR 0 62
65683: PUSH
65684: LD_INT 1
65686: PUSH
65687: LD_INT 2
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 0
65696: PUSH
65697: LD_INT 2
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 1
65706: NEG
65707: PUSH
65708: LD_INT 1
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: LIST
65719: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65720: LD_ADDR_VAR 0 63
65724: PUSH
65725: LD_INT 1
65727: NEG
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 2
65738: NEG
65739: PUSH
65740: LD_INT 0
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 2
65749: NEG
65750: PUSH
65751: LD_INT 1
65753: NEG
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: LIST
65763: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65764: LD_ADDR_VAR 0 64
65768: PUSH
65769: LD_INT 1
65771: NEG
65772: PUSH
65773: LD_INT 2
65775: NEG
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 2
65783: NEG
65784: PUSH
65785: LD_INT 1
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 2
65795: NEG
65796: PUSH
65797: LD_INT 2
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: LIST
65809: ST_TO_ADDR
// end ; 2 :
65810: GO 69076
65812: LD_INT 2
65814: DOUBLE
65815: EQUAL
65816: IFTRUE 65820
65818: GO 69075
65820: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65821: LD_ADDR_VAR 0 29
65825: PUSH
65826: LD_INT 4
65828: PUSH
65829: LD_INT 0
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 4
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 5
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 5
65859: PUSH
65860: LD_INT 1
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 4
65869: PUSH
65870: LD_INT 1
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 3
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 3
65889: PUSH
65890: LD_INT 1
65892: NEG
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 3
65900: PUSH
65901: LD_INT 2
65903: NEG
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 5
65911: PUSH
65912: LD_INT 2
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 3
65921: PUSH
65922: LD_INT 3
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 3
65931: PUSH
65932: LD_INT 2
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 4
65941: PUSH
65942: LD_INT 3
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 4
65951: PUSH
65952: LD_INT 4
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 3
65961: PUSH
65962: LD_INT 4
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 2
65971: PUSH
65972: LD_INT 3
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 2
65981: PUSH
65982: LD_INT 2
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 4
65991: PUSH
65992: LD_INT 2
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 2
66001: PUSH
66002: LD_INT 4
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 0
66011: PUSH
66012: LD_INT 4
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 0
66021: PUSH
66022: LD_INT 3
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 1
66031: PUSH
66032: LD_INT 4
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 1
66041: PUSH
66042: LD_INT 5
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 0
66051: PUSH
66052: LD_INT 5
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 1
66061: NEG
66062: PUSH
66063: LD_INT 4
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 1
66072: NEG
66073: PUSH
66074: LD_INT 3
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 2
66083: PUSH
66084: LD_INT 5
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 2
66093: NEG
66094: PUSH
66095: LD_INT 3
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 3
66104: NEG
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 3
66115: NEG
66116: PUSH
66117: LD_INT 1
66119: NEG
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 2
66127: NEG
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 2
66138: NEG
66139: PUSH
66140: LD_INT 1
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 3
66149: NEG
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 4
66160: NEG
66161: PUSH
66162: LD_INT 0
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 4
66171: NEG
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 4
66183: NEG
66184: PUSH
66185: LD_INT 2
66187: NEG
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 2
66195: NEG
66196: PUSH
66197: LD_INT 2
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 4
66206: NEG
66207: PUSH
66208: LD_INT 4
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 4
66218: NEG
66219: PUSH
66220: LD_INT 5
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 3
66230: NEG
66231: PUSH
66232: LD_INT 4
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 3
66242: NEG
66243: PUSH
66244: LD_INT 3
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 4
66254: NEG
66255: PUSH
66256: LD_INT 3
66258: NEG
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 5
66266: NEG
66267: PUSH
66268: LD_INT 4
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 5
66278: NEG
66279: PUSH
66280: LD_INT 5
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 3
66290: NEG
66291: PUSH
66292: LD_INT 5
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 5
66302: NEG
66303: PUSH
66304: LD_INT 3
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66359: LD_ADDR_VAR 0 30
66363: PUSH
66364: LD_INT 4
66366: PUSH
66367: LD_INT 4
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 4
66376: PUSH
66377: LD_INT 3
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 5
66386: PUSH
66387: LD_INT 4
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 5
66396: PUSH
66397: LD_INT 5
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 4
66406: PUSH
66407: LD_INT 5
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 3
66416: PUSH
66417: LD_INT 4
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 3
66426: PUSH
66427: LD_INT 3
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 5
66436: PUSH
66437: LD_INT 3
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 3
66446: PUSH
66447: LD_INT 5
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 0
66456: PUSH
66457: LD_INT 3
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: LD_INT 2
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 1
66476: PUSH
66477: LD_INT 3
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 1
66486: PUSH
66487: LD_INT 4
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: LD_INT 4
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 1
66506: NEG
66507: PUSH
66508: LD_INT 3
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 1
66517: NEG
66518: PUSH
66519: LD_INT 2
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 2
66528: PUSH
66529: LD_INT 4
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 2
66538: NEG
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 4
66549: NEG
66550: PUSH
66551: LD_INT 0
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 4
66560: NEG
66561: PUSH
66562: LD_INT 1
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 3
66572: NEG
66573: PUSH
66574: LD_INT 0
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 3
66583: NEG
66584: PUSH
66585: LD_INT 1
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 4
66594: NEG
66595: PUSH
66596: LD_INT 1
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 5
66605: NEG
66606: PUSH
66607: LD_INT 0
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 5
66616: NEG
66617: PUSH
66618: LD_INT 1
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 5
66628: NEG
66629: PUSH
66630: LD_INT 2
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 3
66640: NEG
66641: PUSH
66642: LD_INT 2
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 3
66651: NEG
66652: PUSH
66653: LD_INT 3
66655: NEG
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 3
66663: NEG
66664: PUSH
66665: LD_INT 4
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 2
66675: NEG
66676: PUSH
66677: LD_INT 3
66679: NEG
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 2
66687: NEG
66688: PUSH
66689: LD_INT 2
66691: NEG
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 3
66699: NEG
66700: PUSH
66701: LD_INT 2
66703: NEG
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 4
66711: NEG
66712: PUSH
66713: LD_INT 3
66715: NEG
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 4
66723: NEG
66724: PUSH
66725: LD_INT 4
66727: NEG
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 2
66735: NEG
66736: PUSH
66737: LD_INT 4
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 4
66747: NEG
66748: PUSH
66749: LD_INT 2
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: LD_INT 4
66762: NEG
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: LD_INT 5
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 1
66781: PUSH
66782: LD_INT 4
66784: NEG
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 1
66792: PUSH
66793: LD_INT 3
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 0
66803: PUSH
66804: LD_INT 3
66806: NEG
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 1
66814: NEG
66815: PUSH
66816: LD_INT 4
66818: NEG
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 1
66826: NEG
66827: PUSH
66828: LD_INT 5
66830: NEG
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 2
66838: PUSH
66839: LD_INT 3
66841: NEG
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 2
66849: NEG
66850: PUSH
66851: LD_INT 5
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66906: LD_ADDR_VAR 0 31
66910: PUSH
66911: LD_INT 0
66913: PUSH
66914: LD_INT 4
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: LD_INT 3
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 1
66933: PUSH
66934: LD_INT 4
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 1
66943: PUSH
66944: LD_INT 5
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 0
66953: PUSH
66954: LD_INT 5
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 1
66963: NEG
66964: PUSH
66965: LD_INT 4
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 1
66974: NEG
66975: PUSH
66976: LD_INT 3
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 2
66985: PUSH
66986: LD_INT 5
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 2
66995: NEG
66996: PUSH
66997: LD_INT 3
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 3
67006: NEG
67007: PUSH
67008: LD_INT 0
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 3
67017: NEG
67018: PUSH
67019: LD_INT 1
67021: NEG
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 2
67029: NEG
67030: PUSH
67031: LD_INT 0
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 2
67040: NEG
67041: PUSH
67042: LD_INT 1
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 3
67051: NEG
67052: PUSH
67053: LD_INT 1
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 4
67062: NEG
67063: PUSH
67064: LD_INT 0
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 4
67073: NEG
67074: PUSH
67075: LD_INT 1
67077: NEG
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 4
67085: NEG
67086: PUSH
67087: LD_INT 2
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 2
67097: NEG
67098: PUSH
67099: LD_INT 2
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 4
67108: NEG
67109: PUSH
67110: LD_INT 4
67112: NEG
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 4
67120: NEG
67121: PUSH
67122: LD_INT 5
67124: NEG
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 3
67132: NEG
67133: PUSH
67134: LD_INT 4
67136: NEG
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 3
67144: NEG
67145: PUSH
67146: LD_INT 3
67148: NEG
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 4
67156: NEG
67157: PUSH
67158: LD_INT 3
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 5
67168: NEG
67169: PUSH
67170: LD_INT 4
67172: NEG
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 5
67180: NEG
67181: PUSH
67182: LD_INT 5
67184: NEG
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 3
67192: NEG
67193: PUSH
67194: LD_INT 5
67196: NEG
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 5
67204: NEG
67205: PUSH
67206: LD_INT 3
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 0
67216: PUSH
67217: LD_INT 3
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 0
67227: PUSH
67228: LD_INT 4
67230: NEG
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 1
67238: PUSH
67239: LD_INT 3
67241: NEG
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 1
67249: PUSH
67250: LD_INT 2
67252: NEG
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: LD_INT 2
67263: NEG
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 1
67271: NEG
67272: PUSH
67273: LD_INT 3
67275: NEG
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 1
67283: NEG
67284: PUSH
67285: LD_INT 4
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 2
67295: PUSH
67296: LD_INT 2
67298: NEG
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 2
67306: NEG
67307: PUSH
67308: LD_INT 4
67310: NEG
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 4
67318: PUSH
67319: LD_INT 0
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 4
67328: PUSH
67329: LD_INT 1
67331: NEG
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 5
67339: PUSH
67340: LD_INT 0
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 5
67349: PUSH
67350: LD_INT 1
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 4
67359: PUSH
67360: LD_INT 1
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 3
67369: PUSH
67370: LD_INT 0
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 3
67379: PUSH
67380: LD_INT 1
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 3
67390: PUSH
67391: LD_INT 2
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 5
67401: PUSH
67402: LD_INT 2
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67456: LD_ADDR_VAR 0 32
67460: PUSH
67461: LD_INT 4
67463: NEG
67464: PUSH
67465: LD_INT 0
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 4
67474: NEG
67475: PUSH
67476: LD_INT 1
67478: NEG
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 3
67486: NEG
67487: PUSH
67488: LD_INT 0
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 3
67497: NEG
67498: PUSH
67499: LD_INT 1
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 4
67508: NEG
67509: PUSH
67510: LD_INT 1
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 5
67519: NEG
67520: PUSH
67521: LD_INT 0
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 5
67530: NEG
67531: PUSH
67532: LD_INT 1
67534: NEG
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 5
67542: NEG
67543: PUSH
67544: LD_INT 2
67546: NEG
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 3
67554: NEG
67555: PUSH
67556: LD_INT 2
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 3
67565: NEG
67566: PUSH
67567: LD_INT 3
67569: NEG
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 3
67577: NEG
67578: PUSH
67579: LD_INT 4
67581: NEG
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 2
67589: NEG
67590: PUSH
67591: LD_INT 3
67593: NEG
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 2
67601: NEG
67602: PUSH
67603: LD_INT 2
67605: NEG
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 3
67613: NEG
67614: PUSH
67615: LD_INT 2
67617: NEG
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 4
67625: NEG
67626: PUSH
67627: LD_INT 3
67629: NEG
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 4
67637: NEG
67638: PUSH
67639: LD_INT 4
67641: NEG
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 2
67649: NEG
67650: PUSH
67651: LD_INT 4
67653: NEG
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 4
67661: NEG
67662: PUSH
67663: LD_INT 2
67665: NEG
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 0
67673: PUSH
67674: LD_INT 4
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 0
67684: PUSH
67685: LD_INT 5
67687: NEG
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 1
67695: PUSH
67696: LD_INT 4
67698: NEG
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 1
67706: PUSH
67707: LD_INT 3
67709: NEG
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 0
67717: PUSH
67718: LD_INT 3
67720: NEG
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 1
67728: NEG
67729: PUSH
67730: LD_INT 4
67732: NEG
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 1
67740: NEG
67741: PUSH
67742: LD_INT 5
67744: NEG
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 2
67752: PUSH
67753: LD_INT 3
67755: NEG
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 2
67763: NEG
67764: PUSH
67765: LD_INT 5
67767: NEG
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 3
67775: PUSH
67776: LD_INT 0
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 3
67785: PUSH
67786: LD_INT 1
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 4
67796: PUSH
67797: LD_INT 0
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 4
67806: PUSH
67807: LD_INT 1
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 3
67816: PUSH
67817: LD_INT 1
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 2
67826: PUSH
67827: LD_INT 0
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 2
67836: PUSH
67837: LD_INT 1
67839: NEG
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 2
67847: PUSH
67848: LD_INT 2
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 4
67858: PUSH
67859: LD_INT 2
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 4
67868: PUSH
67869: LD_INT 4
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 4
67878: PUSH
67879: LD_INT 3
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 5
67888: PUSH
67889: LD_INT 4
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 5
67898: PUSH
67899: LD_INT 5
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 4
67908: PUSH
67909: LD_INT 5
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 3
67918: PUSH
67919: LD_INT 4
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 3
67928: PUSH
67929: LD_INT 3
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 5
67938: PUSH
67939: LD_INT 3
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 3
67948: PUSH
67949: LD_INT 5
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68003: LD_ADDR_VAR 0 33
68007: PUSH
68008: LD_INT 4
68010: NEG
68011: PUSH
68012: LD_INT 4
68014: NEG
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 4
68022: NEG
68023: PUSH
68024: LD_INT 5
68026: NEG
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 3
68034: NEG
68035: PUSH
68036: LD_INT 4
68038: NEG
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 3
68046: NEG
68047: PUSH
68048: LD_INT 3
68050: NEG
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 4
68058: NEG
68059: PUSH
68060: LD_INT 3
68062: NEG
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 5
68070: NEG
68071: PUSH
68072: LD_INT 4
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 5
68082: NEG
68083: PUSH
68084: LD_INT 5
68086: NEG
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 3
68094: NEG
68095: PUSH
68096: LD_INT 5
68098: NEG
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 5
68106: NEG
68107: PUSH
68108: LD_INT 3
68110: NEG
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 0
68118: PUSH
68119: LD_INT 3
68121: NEG
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 0
68129: PUSH
68130: LD_INT 4
68132: NEG
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 1
68140: PUSH
68141: LD_INT 3
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 1
68151: PUSH
68152: LD_INT 2
68154: NEG
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 0
68162: PUSH
68163: LD_INT 2
68165: NEG
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 1
68173: NEG
68174: PUSH
68175: LD_INT 3
68177: NEG
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 1
68185: NEG
68186: PUSH
68187: LD_INT 4
68189: NEG
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 2
68197: PUSH
68198: LD_INT 2
68200: NEG
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 2
68208: NEG
68209: PUSH
68210: LD_INT 4
68212: NEG
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 4
68220: PUSH
68221: LD_INT 0
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 4
68230: PUSH
68231: LD_INT 1
68233: NEG
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 5
68241: PUSH
68242: LD_INT 0
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 5
68251: PUSH
68252: LD_INT 1
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 4
68261: PUSH
68262: LD_INT 1
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 3
68271: PUSH
68272: LD_INT 0
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 3
68281: PUSH
68282: LD_INT 1
68284: NEG
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 3
68292: PUSH
68293: LD_INT 2
68295: NEG
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 5
68303: PUSH
68304: LD_INT 2
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 3
68313: PUSH
68314: LD_INT 3
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 3
68323: PUSH
68324: LD_INT 2
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 4
68333: PUSH
68334: LD_INT 3
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 4
68343: PUSH
68344: LD_INT 4
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 3
68353: PUSH
68354: LD_INT 4
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 2
68363: PUSH
68364: LD_INT 3
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 2
68373: PUSH
68374: LD_INT 2
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 4
68383: PUSH
68384: LD_INT 2
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 2
68393: PUSH
68394: LD_INT 4
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 0
68403: PUSH
68404: LD_INT 4
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 0
68413: PUSH
68414: LD_INT 3
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 1
68423: PUSH
68424: LD_INT 4
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 1
68433: PUSH
68434: LD_INT 5
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 0
68443: PUSH
68444: LD_INT 5
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 1
68453: NEG
68454: PUSH
68455: LD_INT 4
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 1
68464: NEG
68465: PUSH
68466: LD_INT 3
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 2
68475: PUSH
68476: LD_INT 5
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 2
68485: NEG
68486: PUSH
68487: LD_INT 3
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68541: LD_ADDR_VAR 0 34
68545: PUSH
68546: LD_INT 0
68548: PUSH
68549: LD_INT 4
68551: NEG
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 0
68559: PUSH
68560: LD_INT 5
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 1
68570: PUSH
68571: LD_INT 4
68573: NEG
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 1
68581: PUSH
68582: LD_INT 3
68584: NEG
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 0
68592: PUSH
68593: LD_INT 3
68595: NEG
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 1
68603: NEG
68604: PUSH
68605: LD_INT 4
68607: NEG
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 1
68615: NEG
68616: PUSH
68617: LD_INT 5
68619: NEG
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 2
68627: PUSH
68628: LD_INT 3
68630: NEG
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 2
68638: NEG
68639: PUSH
68640: LD_INT 5
68642: NEG
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 3
68650: PUSH
68651: LD_INT 0
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 3
68660: PUSH
68661: LD_INT 1
68663: NEG
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 4
68671: PUSH
68672: LD_INT 0
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 4
68681: PUSH
68682: LD_INT 1
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 3
68691: PUSH
68692: LD_INT 1
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 2
68701: PUSH
68702: LD_INT 0
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 2
68711: PUSH
68712: LD_INT 1
68714: NEG
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 2
68722: PUSH
68723: LD_INT 2
68725: NEG
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 4
68733: PUSH
68734: LD_INT 2
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 4
68743: PUSH
68744: LD_INT 4
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 4
68753: PUSH
68754: LD_INT 3
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 5
68763: PUSH
68764: LD_INT 4
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 5
68773: PUSH
68774: LD_INT 5
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 4
68783: PUSH
68784: LD_INT 5
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 3
68793: PUSH
68794: LD_INT 4
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 3
68803: PUSH
68804: LD_INT 3
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 5
68813: PUSH
68814: LD_INT 3
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 3
68823: PUSH
68824: LD_INT 5
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 0
68833: PUSH
68834: LD_INT 3
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 0
68843: PUSH
68844: LD_INT 2
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 1
68853: PUSH
68854: LD_INT 3
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 1
68863: PUSH
68864: LD_INT 4
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: LD_INT 4
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 1
68883: NEG
68884: PUSH
68885: LD_INT 3
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 1
68894: NEG
68895: PUSH
68896: LD_INT 2
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 2
68905: PUSH
68906: LD_INT 4
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 2
68915: NEG
68916: PUSH
68917: LD_INT 2
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 4
68926: NEG
68927: PUSH
68928: LD_INT 0
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 4
68937: NEG
68938: PUSH
68939: LD_INT 1
68941: NEG
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 3
68949: NEG
68950: PUSH
68951: LD_INT 0
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 3
68960: NEG
68961: PUSH
68962: LD_INT 1
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 4
68971: NEG
68972: PUSH
68973: LD_INT 1
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 5
68982: NEG
68983: PUSH
68984: LD_INT 0
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: LD_INT 5
68993: NEG
68994: PUSH
68995: LD_INT 1
68997: NEG
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 5
69005: NEG
69006: PUSH
69007: LD_INT 2
69009: NEG
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 3
69017: NEG
69018: PUSH
69019: LD_INT 2
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: ST_TO_ADDR
// end ; end ;
69073: GO 69076
69075: POP
// case btype of b_depot , b_warehouse :
69076: LD_VAR 0 1
69080: PUSH
69081: LD_INT 0
69083: DOUBLE
69084: EQUAL
69085: IFTRUE 69095
69087: LD_INT 1
69089: DOUBLE
69090: EQUAL
69091: IFTRUE 69095
69093: GO 69296
69095: POP
// case nation of nation_american :
69096: LD_VAR 0 5
69100: PUSH
69101: LD_INT 1
69103: DOUBLE
69104: EQUAL
69105: IFTRUE 69109
69107: GO 69165
69109: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69110: LD_ADDR_VAR 0 9
69114: PUSH
69115: LD_VAR 0 11
69119: PUSH
69120: LD_VAR 0 12
69124: PUSH
69125: LD_VAR 0 13
69129: PUSH
69130: LD_VAR 0 14
69134: PUSH
69135: LD_VAR 0 15
69139: PUSH
69140: LD_VAR 0 16
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: PUSH
69153: LD_VAR 0 4
69157: PUSH
69158: LD_INT 1
69160: PLUS
69161: ARRAY
69162: ST_TO_ADDR
69163: GO 69294
69165: LD_INT 2
69167: DOUBLE
69168: EQUAL
69169: IFTRUE 69173
69171: GO 69229
69173: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69174: LD_ADDR_VAR 0 9
69178: PUSH
69179: LD_VAR 0 17
69183: PUSH
69184: LD_VAR 0 18
69188: PUSH
69189: LD_VAR 0 19
69193: PUSH
69194: LD_VAR 0 20
69198: PUSH
69199: LD_VAR 0 21
69203: PUSH
69204: LD_VAR 0 22
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: PUSH
69217: LD_VAR 0 4
69221: PUSH
69222: LD_INT 1
69224: PLUS
69225: ARRAY
69226: ST_TO_ADDR
69227: GO 69294
69229: LD_INT 3
69231: DOUBLE
69232: EQUAL
69233: IFTRUE 69237
69235: GO 69293
69237: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69238: LD_ADDR_VAR 0 9
69242: PUSH
69243: LD_VAR 0 23
69247: PUSH
69248: LD_VAR 0 24
69252: PUSH
69253: LD_VAR 0 25
69257: PUSH
69258: LD_VAR 0 26
69262: PUSH
69263: LD_VAR 0 27
69267: PUSH
69268: LD_VAR 0 28
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: PUSH
69281: LD_VAR 0 4
69285: PUSH
69286: LD_INT 1
69288: PLUS
69289: ARRAY
69290: ST_TO_ADDR
69291: GO 69294
69293: POP
69294: GO 69849
69296: LD_INT 2
69298: DOUBLE
69299: EQUAL
69300: IFTRUE 69310
69302: LD_INT 3
69304: DOUBLE
69305: EQUAL
69306: IFTRUE 69310
69308: GO 69366
69310: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69311: LD_ADDR_VAR 0 9
69315: PUSH
69316: LD_VAR 0 29
69320: PUSH
69321: LD_VAR 0 30
69325: PUSH
69326: LD_VAR 0 31
69330: PUSH
69331: LD_VAR 0 32
69335: PUSH
69336: LD_VAR 0 33
69340: PUSH
69341: LD_VAR 0 34
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: PUSH
69354: LD_VAR 0 4
69358: PUSH
69359: LD_INT 1
69361: PLUS
69362: ARRAY
69363: ST_TO_ADDR
69364: GO 69849
69366: LD_INT 16
69368: DOUBLE
69369: EQUAL
69370: IFTRUE 69428
69372: LD_INT 17
69374: DOUBLE
69375: EQUAL
69376: IFTRUE 69428
69378: LD_INT 18
69380: DOUBLE
69381: EQUAL
69382: IFTRUE 69428
69384: LD_INT 19
69386: DOUBLE
69387: EQUAL
69388: IFTRUE 69428
69390: LD_INT 22
69392: DOUBLE
69393: EQUAL
69394: IFTRUE 69428
69396: LD_INT 20
69398: DOUBLE
69399: EQUAL
69400: IFTRUE 69428
69402: LD_INT 21
69404: DOUBLE
69405: EQUAL
69406: IFTRUE 69428
69408: LD_INT 23
69410: DOUBLE
69411: EQUAL
69412: IFTRUE 69428
69414: LD_INT 24
69416: DOUBLE
69417: EQUAL
69418: IFTRUE 69428
69420: LD_INT 25
69422: DOUBLE
69423: EQUAL
69424: IFTRUE 69428
69426: GO 69484
69428: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69429: LD_ADDR_VAR 0 9
69433: PUSH
69434: LD_VAR 0 35
69438: PUSH
69439: LD_VAR 0 36
69443: PUSH
69444: LD_VAR 0 37
69448: PUSH
69449: LD_VAR 0 38
69453: PUSH
69454: LD_VAR 0 39
69458: PUSH
69459: LD_VAR 0 40
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: PUSH
69472: LD_VAR 0 4
69476: PUSH
69477: LD_INT 1
69479: PLUS
69480: ARRAY
69481: ST_TO_ADDR
69482: GO 69849
69484: LD_INT 6
69486: DOUBLE
69487: EQUAL
69488: IFTRUE 69540
69490: LD_INT 7
69492: DOUBLE
69493: EQUAL
69494: IFTRUE 69540
69496: LD_INT 8
69498: DOUBLE
69499: EQUAL
69500: IFTRUE 69540
69502: LD_INT 13
69504: DOUBLE
69505: EQUAL
69506: IFTRUE 69540
69508: LD_INT 12
69510: DOUBLE
69511: EQUAL
69512: IFTRUE 69540
69514: LD_INT 15
69516: DOUBLE
69517: EQUAL
69518: IFTRUE 69540
69520: LD_INT 11
69522: DOUBLE
69523: EQUAL
69524: IFTRUE 69540
69526: LD_INT 14
69528: DOUBLE
69529: EQUAL
69530: IFTRUE 69540
69532: LD_INT 10
69534: DOUBLE
69535: EQUAL
69536: IFTRUE 69540
69538: GO 69596
69540: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69541: LD_ADDR_VAR 0 9
69545: PUSH
69546: LD_VAR 0 41
69550: PUSH
69551: LD_VAR 0 42
69555: PUSH
69556: LD_VAR 0 43
69560: PUSH
69561: LD_VAR 0 44
69565: PUSH
69566: LD_VAR 0 45
69570: PUSH
69571: LD_VAR 0 46
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: PUSH
69584: LD_VAR 0 4
69588: PUSH
69589: LD_INT 1
69591: PLUS
69592: ARRAY
69593: ST_TO_ADDR
69594: GO 69849
69596: LD_INT 36
69598: DOUBLE
69599: EQUAL
69600: IFTRUE 69604
69602: GO 69660
69604: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69605: LD_ADDR_VAR 0 9
69609: PUSH
69610: LD_VAR 0 47
69614: PUSH
69615: LD_VAR 0 48
69619: PUSH
69620: LD_VAR 0 49
69624: PUSH
69625: LD_VAR 0 50
69629: PUSH
69630: LD_VAR 0 51
69634: PUSH
69635: LD_VAR 0 52
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: PUSH
69648: LD_VAR 0 4
69652: PUSH
69653: LD_INT 1
69655: PLUS
69656: ARRAY
69657: ST_TO_ADDR
69658: GO 69849
69660: LD_INT 4
69662: DOUBLE
69663: EQUAL
69664: IFTRUE 69686
69666: LD_INT 5
69668: DOUBLE
69669: EQUAL
69670: IFTRUE 69686
69672: LD_INT 34
69674: DOUBLE
69675: EQUAL
69676: IFTRUE 69686
69678: LD_INT 37
69680: DOUBLE
69681: EQUAL
69682: IFTRUE 69686
69684: GO 69742
69686: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69687: LD_ADDR_VAR 0 9
69691: PUSH
69692: LD_VAR 0 53
69696: PUSH
69697: LD_VAR 0 54
69701: PUSH
69702: LD_VAR 0 55
69706: PUSH
69707: LD_VAR 0 56
69711: PUSH
69712: LD_VAR 0 57
69716: PUSH
69717: LD_VAR 0 58
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: PUSH
69730: LD_VAR 0 4
69734: PUSH
69735: LD_INT 1
69737: PLUS
69738: ARRAY
69739: ST_TO_ADDR
69740: GO 69849
69742: LD_INT 31
69744: DOUBLE
69745: EQUAL
69746: IFTRUE 69792
69748: LD_INT 32
69750: DOUBLE
69751: EQUAL
69752: IFTRUE 69792
69754: LD_INT 33
69756: DOUBLE
69757: EQUAL
69758: IFTRUE 69792
69760: LD_INT 27
69762: DOUBLE
69763: EQUAL
69764: IFTRUE 69792
69766: LD_INT 26
69768: DOUBLE
69769: EQUAL
69770: IFTRUE 69792
69772: LD_INT 28
69774: DOUBLE
69775: EQUAL
69776: IFTRUE 69792
69778: LD_INT 29
69780: DOUBLE
69781: EQUAL
69782: IFTRUE 69792
69784: LD_INT 30
69786: DOUBLE
69787: EQUAL
69788: IFTRUE 69792
69790: GO 69848
69792: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69793: LD_ADDR_VAR 0 9
69797: PUSH
69798: LD_VAR 0 59
69802: PUSH
69803: LD_VAR 0 60
69807: PUSH
69808: LD_VAR 0 61
69812: PUSH
69813: LD_VAR 0 62
69817: PUSH
69818: LD_VAR 0 63
69822: PUSH
69823: LD_VAR 0 64
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: PUSH
69836: LD_VAR 0 4
69840: PUSH
69841: LD_INT 1
69843: PLUS
69844: ARRAY
69845: ST_TO_ADDR
69846: GO 69849
69848: POP
// temp_list2 = [ ] ;
69849: LD_ADDR_VAR 0 10
69853: PUSH
69854: EMPTY
69855: ST_TO_ADDR
// for i in temp_list do
69856: LD_ADDR_VAR 0 8
69860: PUSH
69861: LD_VAR 0 9
69865: PUSH
69866: FOR_IN
69867: IFFALSE 69919
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69869: LD_ADDR_VAR 0 10
69873: PUSH
69874: LD_VAR 0 10
69878: PUSH
69879: LD_VAR 0 8
69883: PUSH
69884: LD_INT 1
69886: ARRAY
69887: PUSH
69888: LD_VAR 0 2
69892: PLUS
69893: PUSH
69894: LD_VAR 0 8
69898: PUSH
69899: LD_INT 2
69901: ARRAY
69902: PUSH
69903: LD_VAR 0 3
69907: PLUS
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: EMPTY
69914: LIST
69915: ADD
69916: ST_TO_ADDR
69917: GO 69866
69919: POP
69920: POP
// result = temp_list2 ;
69921: LD_ADDR_VAR 0 7
69925: PUSH
69926: LD_VAR 0 10
69930: ST_TO_ADDR
// end ;
69931: LD_VAR 0 7
69935: RET
// export function EnemyInRange ( unit , dist ) ; begin
69936: LD_INT 0
69938: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69939: LD_ADDR_VAR 0 3
69943: PUSH
69944: LD_VAR 0 1
69948: PPUSH
69949: CALL_OW 255
69953: PPUSH
69954: LD_VAR 0 1
69958: PPUSH
69959: CALL_OW 250
69963: PPUSH
69964: LD_VAR 0 1
69968: PPUSH
69969: CALL_OW 251
69973: PPUSH
69974: LD_VAR 0 2
69978: PPUSH
69979: CALL 43332 0 4
69983: PUSH
69984: LD_INT 4
69986: ARRAY
69987: ST_TO_ADDR
// end ;
69988: LD_VAR 0 3
69992: RET
// export function PlayerSeeMe ( unit ) ; begin
69993: LD_INT 0
69995: PPUSH
// result := See ( your_side , unit ) ;
69996: LD_ADDR_VAR 0 2
70000: PUSH
70001: LD_OWVAR 2
70005: PPUSH
70006: LD_VAR 0 1
70010: PPUSH
70011: CALL_OW 292
70015: ST_TO_ADDR
// end ;
70016: LD_VAR 0 2
70020: RET
// export function ReverseDir ( unit ) ; begin
70021: LD_INT 0
70023: PPUSH
// if not unit then
70024: LD_VAR 0 1
70028: NOT
70029: IFFALSE 70033
// exit ;
70031: GO 70056
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70033: LD_ADDR_VAR 0 2
70037: PUSH
70038: LD_VAR 0 1
70042: PPUSH
70043: CALL_OW 254
70047: PUSH
70048: LD_INT 3
70050: PLUS
70051: PUSH
70052: LD_INT 6
70054: MOD
70055: ST_TO_ADDR
// end ;
70056: LD_VAR 0 2
70060: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70061: LD_INT 0
70063: PPUSH
70064: PPUSH
70065: PPUSH
70066: PPUSH
70067: PPUSH
// if not hexes then
70068: LD_VAR 0 2
70072: NOT
70073: IFFALSE 70077
// exit ;
70075: GO 70225
// dist := 9999 ;
70077: LD_ADDR_VAR 0 5
70081: PUSH
70082: LD_INT 9999
70084: ST_TO_ADDR
// for i = 1 to hexes do
70085: LD_ADDR_VAR 0 4
70089: PUSH
70090: DOUBLE
70091: LD_INT 1
70093: DEC
70094: ST_TO_ADDR
70095: LD_VAR 0 2
70099: PUSH
70100: FOR_TO
70101: IFFALSE 70213
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70103: LD_VAR 0 1
70107: PPUSH
70108: LD_VAR 0 2
70112: PUSH
70113: LD_VAR 0 4
70117: ARRAY
70118: PUSH
70119: LD_INT 1
70121: ARRAY
70122: PPUSH
70123: LD_VAR 0 2
70127: PUSH
70128: LD_VAR 0 4
70132: ARRAY
70133: PUSH
70134: LD_INT 2
70136: ARRAY
70137: PPUSH
70138: CALL_OW 297
70142: PUSH
70143: LD_VAR 0 5
70147: LESS
70148: IFFALSE 70211
// begin hex := hexes [ i ] ;
70150: LD_ADDR_VAR 0 7
70154: PUSH
70155: LD_VAR 0 2
70159: PUSH
70160: LD_VAR 0 4
70164: ARRAY
70165: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70166: LD_ADDR_VAR 0 5
70170: PUSH
70171: LD_VAR 0 1
70175: PPUSH
70176: LD_VAR 0 2
70180: PUSH
70181: LD_VAR 0 4
70185: ARRAY
70186: PUSH
70187: LD_INT 1
70189: ARRAY
70190: PPUSH
70191: LD_VAR 0 2
70195: PUSH
70196: LD_VAR 0 4
70200: ARRAY
70201: PUSH
70202: LD_INT 2
70204: ARRAY
70205: PPUSH
70206: CALL_OW 297
70210: ST_TO_ADDR
// end ; end ;
70211: GO 70100
70213: POP
70214: POP
// result := hex ;
70215: LD_ADDR_VAR 0 3
70219: PUSH
70220: LD_VAR 0 7
70224: ST_TO_ADDR
// end ;
70225: LD_VAR 0 3
70229: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70230: LD_INT 0
70232: PPUSH
70233: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70234: LD_VAR 0 1
70238: NOT
70239: PUSH
70240: LD_VAR 0 1
70244: PUSH
70245: LD_INT 21
70247: PUSH
70248: LD_INT 2
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 23
70257: PUSH
70258: LD_INT 2
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PPUSH
70269: CALL_OW 69
70273: IN
70274: NOT
70275: OR
70276: IFFALSE 70280
// exit ;
70278: GO 70327
// for i = 1 to 3 do
70280: LD_ADDR_VAR 0 3
70284: PUSH
70285: DOUBLE
70286: LD_INT 1
70288: DEC
70289: ST_TO_ADDR
70290: LD_INT 3
70292: PUSH
70293: FOR_TO
70294: IFFALSE 70325
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70296: LD_VAR 0 1
70300: PPUSH
70301: CALL_OW 250
70305: PPUSH
70306: LD_VAR 0 1
70310: PPUSH
70311: CALL_OW 251
70315: PPUSH
70316: LD_INT 1
70318: PPUSH
70319: CALL_OW 453
70323: GO 70293
70325: POP
70326: POP
// end ;
70327: LD_VAR 0 2
70331: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70332: LD_INT 0
70334: PPUSH
70335: PPUSH
70336: PPUSH
70337: PPUSH
70338: PPUSH
70339: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70340: LD_VAR 0 1
70344: NOT
70345: PUSH
70346: LD_VAR 0 2
70350: NOT
70351: OR
70352: PUSH
70353: LD_VAR 0 1
70357: PPUSH
70358: CALL_OW 314
70362: OR
70363: IFFALSE 70367
// exit ;
70365: GO 70808
// x := GetX ( enemy_unit ) ;
70367: LD_ADDR_VAR 0 7
70371: PUSH
70372: LD_VAR 0 2
70376: PPUSH
70377: CALL_OW 250
70381: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70382: LD_ADDR_VAR 0 8
70386: PUSH
70387: LD_VAR 0 2
70391: PPUSH
70392: CALL_OW 251
70396: ST_TO_ADDR
// if not x or not y then
70397: LD_VAR 0 7
70401: NOT
70402: PUSH
70403: LD_VAR 0 8
70407: NOT
70408: OR
70409: IFFALSE 70413
// exit ;
70411: GO 70808
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70413: LD_ADDR_VAR 0 6
70417: PUSH
70418: LD_VAR 0 7
70422: PPUSH
70423: LD_INT 0
70425: PPUSH
70426: LD_INT 4
70428: PPUSH
70429: CALL_OW 272
70433: PUSH
70434: LD_VAR 0 8
70438: PPUSH
70439: LD_INT 0
70441: PPUSH
70442: LD_INT 4
70444: PPUSH
70445: CALL_OW 273
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_VAR 0 7
70458: PPUSH
70459: LD_INT 1
70461: PPUSH
70462: LD_INT 4
70464: PPUSH
70465: CALL_OW 272
70469: PUSH
70470: LD_VAR 0 8
70474: PPUSH
70475: LD_INT 1
70477: PPUSH
70478: LD_INT 4
70480: PPUSH
70481: CALL_OW 273
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_VAR 0 7
70494: PPUSH
70495: LD_INT 2
70497: PPUSH
70498: LD_INT 4
70500: PPUSH
70501: CALL_OW 272
70505: PUSH
70506: LD_VAR 0 8
70510: PPUSH
70511: LD_INT 2
70513: PPUSH
70514: LD_INT 4
70516: PPUSH
70517: CALL_OW 273
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: LD_VAR 0 7
70530: PPUSH
70531: LD_INT 3
70533: PPUSH
70534: LD_INT 4
70536: PPUSH
70537: CALL_OW 272
70541: PUSH
70542: LD_VAR 0 8
70546: PPUSH
70547: LD_INT 3
70549: PPUSH
70550: LD_INT 4
70552: PPUSH
70553: CALL_OW 273
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_VAR 0 7
70566: PPUSH
70567: LD_INT 4
70569: PPUSH
70570: LD_INT 4
70572: PPUSH
70573: CALL_OW 272
70577: PUSH
70578: LD_VAR 0 8
70582: PPUSH
70583: LD_INT 4
70585: PPUSH
70586: LD_INT 4
70588: PPUSH
70589: CALL_OW 273
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_VAR 0 7
70602: PPUSH
70603: LD_INT 5
70605: PPUSH
70606: LD_INT 4
70608: PPUSH
70609: CALL_OW 272
70613: PUSH
70614: LD_VAR 0 8
70618: PPUSH
70619: LD_INT 5
70621: PPUSH
70622: LD_INT 4
70624: PPUSH
70625: CALL_OW 273
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: ST_TO_ADDR
// for i = tmp downto 1 do
70642: LD_ADDR_VAR 0 4
70646: PUSH
70647: DOUBLE
70648: LD_VAR 0 6
70652: INC
70653: ST_TO_ADDR
70654: LD_INT 1
70656: PUSH
70657: FOR_DOWNTO
70658: IFFALSE 70759
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70660: LD_VAR 0 6
70664: PUSH
70665: LD_VAR 0 4
70669: ARRAY
70670: PUSH
70671: LD_INT 1
70673: ARRAY
70674: PPUSH
70675: LD_VAR 0 6
70679: PUSH
70680: LD_VAR 0 4
70684: ARRAY
70685: PUSH
70686: LD_INT 2
70688: ARRAY
70689: PPUSH
70690: CALL_OW 488
70694: NOT
70695: PUSH
70696: LD_VAR 0 6
70700: PUSH
70701: LD_VAR 0 4
70705: ARRAY
70706: PUSH
70707: LD_INT 1
70709: ARRAY
70710: PPUSH
70711: LD_VAR 0 6
70715: PUSH
70716: LD_VAR 0 4
70720: ARRAY
70721: PUSH
70722: LD_INT 2
70724: ARRAY
70725: PPUSH
70726: CALL_OW 428
70730: PUSH
70731: LD_INT 0
70733: NONEQUAL
70734: OR
70735: IFFALSE 70757
// tmp := Delete ( tmp , i ) ;
70737: LD_ADDR_VAR 0 6
70741: PUSH
70742: LD_VAR 0 6
70746: PPUSH
70747: LD_VAR 0 4
70751: PPUSH
70752: CALL_OW 3
70756: ST_TO_ADDR
70757: GO 70657
70759: POP
70760: POP
// j := GetClosestHex ( unit , tmp ) ;
70761: LD_ADDR_VAR 0 5
70765: PUSH
70766: LD_VAR 0 1
70770: PPUSH
70771: LD_VAR 0 6
70775: PPUSH
70776: CALL 70061 0 2
70780: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70781: LD_VAR 0 1
70785: PPUSH
70786: LD_VAR 0 5
70790: PUSH
70791: LD_INT 1
70793: ARRAY
70794: PPUSH
70795: LD_VAR 0 5
70799: PUSH
70800: LD_INT 2
70802: ARRAY
70803: PPUSH
70804: CALL_OW 111
// end ;
70808: LD_VAR 0 3
70812: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70813: LD_INT 0
70815: PPUSH
70816: PPUSH
70817: PPUSH
// uc_side = 0 ;
70818: LD_ADDR_OWVAR 20
70822: PUSH
70823: LD_INT 0
70825: ST_TO_ADDR
// uc_nation = 0 ;
70826: LD_ADDR_OWVAR 21
70830: PUSH
70831: LD_INT 0
70833: ST_TO_ADDR
// InitHc_All ( ) ;
70834: CALL_OW 584
// InitVc ;
70838: CALL_OW 20
// if mastodonts then
70842: LD_VAR 0 6
70846: IFFALSE 70913
// for i = 1 to mastodonts do
70848: LD_ADDR_VAR 0 11
70852: PUSH
70853: DOUBLE
70854: LD_INT 1
70856: DEC
70857: ST_TO_ADDR
70858: LD_VAR 0 6
70862: PUSH
70863: FOR_TO
70864: IFFALSE 70911
// begin vc_chassis := 31 ;
70866: LD_ADDR_OWVAR 37
70870: PUSH
70871: LD_INT 31
70873: ST_TO_ADDR
// vc_control := control_rider ;
70874: LD_ADDR_OWVAR 38
70878: PUSH
70879: LD_INT 4
70881: ST_TO_ADDR
// animal := CreateVehicle ;
70882: LD_ADDR_VAR 0 12
70886: PUSH
70887: CALL_OW 45
70891: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70892: LD_VAR 0 12
70896: PPUSH
70897: LD_VAR 0 8
70901: PPUSH
70902: LD_INT 0
70904: PPUSH
70905: CALL 73101 0 3
// end ;
70909: GO 70863
70911: POP
70912: POP
// if horses then
70913: LD_VAR 0 5
70917: IFFALSE 70984
// for i = 1 to horses do
70919: LD_ADDR_VAR 0 11
70923: PUSH
70924: DOUBLE
70925: LD_INT 1
70927: DEC
70928: ST_TO_ADDR
70929: LD_VAR 0 5
70933: PUSH
70934: FOR_TO
70935: IFFALSE 70982
// begin hc_class := 21 ;
70937: LD_ADDR_OWVAR 28
70941: PUSH
70942: LD_INT 21
70944: ST_TO_ADDR
// hc_gallery :=  ;
70945: LD_ADDR_OWVAR 33
70949: PUSH
70950: LD_STRING 
70952: ST_TO_ADDR
// animal := CreateHuman ;
70953: LD_ADDR_VAR 0 12
70957: PUSH
70958: CALL_OW 44
70962: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70963: LD_VAR 0 12
70967: PPUSH
70968: LD_VAR 0 8
70972: PPUSH
70973: LD_INT 0
70975: PPUSH
70976: CALL 73101 0 3
// end ;
70980: GO 70934
70982: POP
70983: POP
// if birds then
70984: LD_VAR 0 1
70988: IFFALSE 71055
// for i = 1 to birds do
70990: LD_ADDR_VAR 0 11
70994: PUSH
70995: DOUBLE
70996: LD_INT 1
70998: DEC
70999: ST_TO_ADDR
71000: LD_VAR 0 1
71004: PUSH
71005: FOR_TO
71006: IFFALSE 71053
// begin hc_class = 18 ;
71008: LD_ADDR_OWVAR 28
71012: PUSH
71013: LD_INT 18
71015: ST_TO_ADDR
// hc_gallery =  ;
71016: LD_ADDR_OWVAR 33
71020: PUSH
71021: LD_STRING 
71023: ST_TO_ADDR
// animal := CreateHuman ;
71024: LD_ADDR_VAR 0 12
71028: PUSH
71029: CALL_OW 44
71033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71034: LD_VAR 0 12
71038: PPUSH
71039: LD_VAR 0 8
71043: PPUSH
71044: LD_INT 0
71046: PPUSH
71047: CALL 73101 0 3
// end ;
71051: GO 71005
71053: POP
71054: POP
// if tigers then
71055: LD_VAR 0 2
71059: IFFALSE 71143
// for i = 1 to tigers do
71061: LD_ADDR_VAR 0 11
71065: PUSH
71066: DOUBLE
71067: LD_INT 1
71069: DEC
71070: ST_TO_ADDR
71071: LD_VAR 0 2
71075: PUSH
71076: FOR_TO
71077: IFFALSE 71141
// begin hc_class = class_tiger ;
71079: LD_ADDR_OWVAR 28
71083: PUSH
71084: LD_INT 14
71086: ST_TO_ADDR
// hc_gallery =  ;
71087: LD_ADDR_OWVAR 33
71091: PUSH
71092: LD_STRING 
71094: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71095: LD_ADDR_OWVAR 35
71099: PUSH
71100: LD_INT 7
71102: NEG
71103: PPUSH
71104: LD_INT 7
71106: PPUSH
71107: CALL_OW 12
71111: ST_TO_ADDR
// animal := CreateHuman ;
71112: LD_ADDR_VAR 0 12
71116: PUSH
71117: CALL_OW 44
71121: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71122: LD_VAR 0 12
71126: PPUSH
71127: LD_VAR 0 8
71131: PPUSH
71132: LD_INT 0
71134: PPUSH
71135: CALL 73101 0 3
// end ;
71139: GO 71076
71141: POP
71142: POP
// if apemans then
71143: LD_VAR 0 3
71147: IFFALSE 71270
// for i = 1 to apemans do
71149: LD_ADDR_VAR 0 11
71153: PUSH
71154: DOUBLE
71155: LD_INT 1
71157: DEC
71158: ST_TO_ADDR
71159: LD_VAR 0 3
71163: PUSH
71164: FOR_TO
71165: IFFALSE 71268
// begin hc_class = class_apeman ;
71167: LD_ADDR_OWVAR 28
71171: PUSH
71172: LD_INT 12
71174: ST_TO_ADDR
// hc_gallery =  ;
71175: LD_ADDR_OWVAR 33
71179: PUSH
71180: LD_STRING 
71182: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71183: LD_ADDR_OWVAR 35
71187: PUSH
71188: LD_INT 2
71190: NEG
71191: PPUSH
71192: LD_INT 2
71194: PPUSH
71195: CALL_OW 12
71199: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71200: LD_ADDR_OWVAR 31
71204: PUSH
71205: LD_INT 1
71207: PPUSH
71208: LD_INT 3
71210: PPUSH
71211: CALL_OW 12
71215: PUSH
71216: LD_INT 1
71218: PPUSH
71219: LD_INT 3
71221: PPUSH
71222: CALL_OW 12
71226: PUSH
71227: LD_INT 0
71229: PUSH
71230: LD_INT 0
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: ST_TO_ADDR
// animal := CreateHuman ;
71239: LD_ADDR_VAR 0 12
71243: PUSH
71244: CALL_OW 44
71248: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71249: LD_VAR 0 12
71253: PPUSH
71254: LD_VAR 0 8
71258: PPUSH
71259: LD_INT 0
71261: PPUSH
71262: CALL 73101 0 3
// end ;
71266: GO 71164
71268: POP
71269: POP
// if enchidnas then
71270: LD_VAR 0 4
71274: IFFALSE 71341
// for i = 1 to enchidnas do
71276: LD_ADDR_VAR 0 11
71280: PUSH
71281: DOUBLE
71282: LD_INT 1
71284: DEC
71285: ST_TO_ADDR
71286: LD_VAR 0 4
71290: PUSH
71291: FOR_TO
71292: IFFALSE 71339
// begin hc_class = 13 ;
71294: LD_ADDR_OWVAR 28
71298: PUSH
71299: LD_INT 13
71301: ST_TO_ADDR
// hc_gallery =  ;
71302: LD_ADDR_OWVAR 33
71306: PUSH
71307: LD_STRING 
71309: ST_TO_ADDR
// animal := CreateHuman ;
71310: LD_ADDR_VAR 0 12
71314: PUSH
71315: CALL_OW 44
71319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71320: LD_VAR 0 12
71324: PPUSH
71325: LD_VAR 0 8
71329: PPUSH
71330: LD_INT 0
71332: PPUSH
71333: CALL 73101 0 3
// end ;
71337: GO 71291
71339: POP
71340: POP
// if fishes then
71341: LD_VAR 0 7
71345: IFFALSE 71412
// for i = 1 to fishes do
71347: LD_ADDR_VAR 0 11
71351: PUSH
71352: DOUBLE
71353: LD_INT 1
71355: DEC
71356: ST_TO_ADDR
71357: LD_VAR 0 7
71361: PUSH
71362: FOR_TO
71363: IFFALSE 71410
// begin hc_class = 20 ;
71365: LD_ADDR_OWVAR 28
71369: PUSH
71370: LD_INT 20
71372: ST_TO_ADDR
// hc_gallery =  ;
71373: LD_ADDR_OWVAR 33
71377: PUSH
71378: LD_STRING 
71380: ST_TO_ADDR
// animal := CreateHuman ;
71381: LD_ADDR_VAR 0 12
71385: PUSH
71386: CALL_OW 44
71390: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71391: LD_VAR 0 12
71395: PPUSH
71396: LD_VAR 0 9
71400: PPUSH
71401: LD_INT 0
71403: PPUSH
71404: CALL 73101 0 3
// end ;
71408: GO 71362
71410: POP
71411: POP
// end ;
71412: LD_VAR 0 10
71416: RET
// export function WantHeal ( sci , unit ) ; begin
71417: LD_INT 0
71419: PPUSH
// if GetTaskList ( sci ) > 0 then
71420: LD_VAR 0 1
71424: PPUSH
71425: CALL_OW 437
71429: PUSH
71430: LD_INT 0
71432: GREATER
71433: IFFALSE 71503
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71435: LD_VAR 0 1
71439: PPUSH
71440: CALL_OW 437
71444: PUSH
71445: LD_INT 1
71447: ARRAY
71448: PUSH
71449: LD_INT 1
71451: ARRAY
71452: PUSH
71453: LD_STRING l
71455: EQUAL
71456: PUSH
71457: LD_VAR 0 1
71461: PPUSH
71462: CALL_OW 437
71466: PUSH
71467: LD_INT 1
71469: ARRAY
71470: PUSH
71471: LD_INT 4
71473: ARRAY
71474: PUSH
71475: LD_VAR 0 2
71479: EQUAL
71480: AND
71481: IFFALSE 71493
// result := true else
71483: LD_ADDR_VAR 0 3
71487: PUSH
71488: LD_INT 1
71490: ST_TO_ADDR
71491: GO 71501
// result := false ;
71493: LD_ADDR_VAR 0 3
71497: PUSH
71498: LD_INT 0
71500: ST_TO_ADDR
// end else
71501: GO 71511
// result := false ;
71503: LD_ADDR_VAR 0 3
71507: PUSH
71508: LD_INT 0
71510: ST_TO_ADDR
// end ;
71511: LD_VAR 0 3
71515: RET
// export function HealTarget ( sci ) ; begin
71516: LD_INT 0
71518: PPUSH
// if not sci then
71519: LD_VAR 0 1
71523: NOT
71524: IFFALSE 71528
// exit ;
71526: GO 71593
// result := 0 ;
71528: LD_ADDR_VAR 0 2
71532: PUSH
71533: LD_INT 0
71535: ST_TO_ADDR
// if GetTaskList ( sci ) then
71536: LD_VAR 0 1
71540: PPUSH
71541: CALL_OW 437
71545: IFFALSE 71593
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71547: LD_VAR 0 1
71551: PPUSH
71552: CALL_OW 437
71556: PUSH
71557: LD_INT 1
71559: ARRAY
71560: PUSH
71561: LD_INT 1
71563: ARRAY
71564: PUSH
71565: LD_STRING l
71567: EQUAL
71568: IFFALSE 71593
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71570: LD_ADDR_VAR 0 2
71574: PUSH
71575: LD_VAR 0 1
71579: PPUSH
71580: CALL_OW 437
71584: PUSH
71585: LD_INT 1
71587: ARRAY
71588: PUSH
71589: LD_INT 4
71591: ARRAY
71592: ST_TO_ADDR
// end ;
71593: LD_VAR 0 2
71597: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71598: LD_INT 0
71600: PPUSH
71601: PPUSH
71602: PPUSH
71603: PPUSH
// if not base_units then
71604: LD_VAR 0 1
71608: NOT
71609: IFFALSE 71613
// exit ;
71611: GO 71700
// result := false ;
71613: LD_ADDR_VAR 0 2
71617: PUSH
71618: LD_INT 0
71620: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71621: LD_ADDR_VAR 0 5
71625: PUSH
71626: LD_VAR 0 1
71630: PPUSH
71631: LD_INT 21
71633: PUSH
71634: LD_INT 3
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PPUSH
71641: CALL_OW 72
71645: ST_TO_ADDR
// if not tmp then
71646: LD_VAR 0 5
71650: NOT
71651: IFFALSE 71655
// exit ;
71653: GO 71700
// for i in tmp do
71655: LD_ADDR_VAR 0 3
71659: PUSH
71660: LD_VAR 0 5
71664: PUSH
71665: FOR_IN
71666: IFFALSE 71698
// begin result := EnemyInRange ( i , 22 ) ;
71668: LD_ADDR_VAR 0 2
71672: PUSH
71673: LD_VAR 0 3
71677: PPUSH
71678: LD_INT 22
71680: PPUSH
71681: CALL 69936 0 2
71685: ST_TO_ADDR
// if result then
71686: LD_VAR 0 2
71690: IFFALSE 71696
// exit ;
71692: POP
71693: POP
71694: GO 71700
// end ;
71696: GO 71665
71698: POP
71699: POP
// end ;
71700: LD_VAR 0 2
71704: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71705: LD_INT 0
71707: PPUSH
71708: PPUSH
// if not units then
71709: LD_VAR 0 1
71713: NOT
71714: IFFALSE 71718
// exit ;
71716: GO 71788
// result := [ ] ;
71718: LD_ADDR_VAR 0 3
71722: PUSH
71723: EMPTY
71724: ST_TO_ADDR
// for i in units do
71725: LD_ADDR_VAR 0 4
71729: PUSH
71730: LD_VAR 0 1
71734: PUSH
71735: FOR_IN
71736: IFFALSE 71786
// if GetTag ( i ) = tag then
71738: LD_VAR 0 4
71742: PPUSH
71743: CALL_OW 110
71747: PUSH
71748: LD_VAR 0 2
71752: EQUAL
71753: IFFALSE 71784
// result := Replace ( result , result + 1 , i ) ;
71755: LD_ADDR_VAR 0 3
71759: PUSH
71760: LD_VAR 0 3
71764: PPUSH
71765: LD_VAR 0 3
71769: PUSH
71770: LD_INT 1
71772: PLUS
71773: PPUSH
71774: LD_VAR 0 4
71778: PPUSH
71779: CALL_OW 1
71783: ST_TO_ADDR
71784: GO 71735
71786: POP
71787: POP
// end ;
71788: LD_VAR 0 3
71792: RET
// export function IsDriver ( un ) ; begin
71793: LD_INT 0
71795: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71796: LD_ADDR_VAR 0 2
71800: PUSH
71801: LD_VAR 0 1
71805: PUSH
71806: LD_INT 55
71808: PUSH
71809: EMPTY
71810: LIST
71811: PPUSH
71812: CALL_OW 69
71816: IN
71817: ST_TO_ADDR
// end ;
71818: LD_VAR 0 2
71822: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71823: LD_INT 0
71825: PPUSH
71826: PPUSH
// list := [ ] ;
71827: LD_ADDR_VAR 0 5
71831: PUSH
71832: EMPTY
71833: ST_TO_ADDR
// case d of 0 :
71834: LD_VAR 0 3
71838: PUSH
71839: LD_INT 0
71841: DOUBLE
71842: EQUAL
71843: IFTRUE 71847
71845: GO 71980
71847: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71848: LD_ADDR_VAR 0 5
71852: PUSH
71853: LD_VAR 0 1
71857: PUSH
71858: LD_INT 4
71860: MINUS
71861: PUSH
71862: LD_VAR 0 2
71866: PUSH
71867: LD_INT 4
71869: MINUS
71870: PUSH
71871: LD_INT 2
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: LIST
71878: PUSH
71879: LD_VAR 0 1
71883: PUSH
71884: LD_INT 3
71886: MINUS
71887: PUSH
71888: LD_VAR 0 2
71892: PUSH
71893: LD_INT 1
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: LIST
71900: PUSH
71901: LD_VAR 0 1
71905: PUSH
71906: LD_INT 4
71908: PLUS
71909: PUSH
71910: LD_VAR 0 2
71914: PUSH
71915: LD_INT 4
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: LIST
71922: PUSH
71923: LD_VAR 0 1
71927: PUSH
71928: LD_INT 3
71930: PLUS
71931: PUSH
71932: LD_VAR 0 2
71936: PUSH
71937: LD_INT 3
71939: PLUS
71940: PUSH
71941: LD_INT 5
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: LIST
71948: PUSH
71949: LD_VAR 0 1
71953: PUSH
71954: LD_VAR 0 2
71958: PUSH
71959: LD_INT 4
71961: PLUS
71962: PUSH
71963: LD_INT 0
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: LIST
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: ST_TO_ADDR
// end ; 1 :
71978: GO 72678
71980: LD_INT 1
71982: DOUBLE
71983: EQUAL
71984: IFTRUE 71988
71986: GO 72121
71988: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71989: LD_ADDR_VAR 0 5
71993: PUSH
71994: LD_VAR 0 1
71998: PUSH
71999: LD_VAR 0 2
72003: PUSH
72004: LD_INT 4
72006: MINUS
72007: PUSH
72008: LD_INT 3
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: LIST
72015: PUSH
72016: LD_VAR 0 1
72020: PUSH
72021: LD_INT 3
72023: MINUS
72024: PUSH
72025: LD_VAR 0 2
72029: PUSH
72030: LD_INT 3
72032: MINUS
72033: PUSH
72034: LD_INT 2
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: LIST
72041: PUSH
72042: LD_VAR 0 1
72046: PUSH
72047: LD_INT 4
72049: MINUS
72050: PUSH
72051: LD_VAR 0 2
72055: PUSH
72056: LD_INT 1
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: LIST
72063: PUSH
72064: LD_VAR 0 1
72068: PUSH
72069: LD_VAR 0 2
72073: PUSH
72074: LD_INT 3
72076: PLUS
72077: PUSH
72078: LD_INT 0
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: LIST
72085: PUSH
72086: LD_VAR 0 1
72090: PUSH
72091: LD_INT 4
72093: PLUS
72094: PUSH
72095: LD_VAR 0 2
72099: PUSH
72100: LD_INT 4
72102: PLUS
72103: PUSH
72104: LD_INT 5
72106: PUSH
72107: EMPTY
72108: LIST
72109: LIST
72110: LIST
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: ST_TO_ADDR
// end ; 2 :
72119: GO 72678
72121: LD_INT 2
72123: DOUBLE
72124: EQUAL
72125: IFTRUE 72129
72127: GO 72258
72129: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72130: LD_ADDR_VAR 0 5
72134: PUSH
72135: LD_VAR 0 1
72139: PUSH
72140: LD_VAR 0 2
72144: PUSH
72145: LD_INT 3
72147: MINUS
72148: PUSH
72149: LD_INT 3
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: LIST
72156: PUSH
72157: LD_VAR 0 1
72161: PUSH
72162: LD_INT 4
72164: PLUS
72165: PUSH
72166: LD_VAR 0 2
72170: PUSH
72171: LD_INT 4
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: LIST
72178: PUSH
72179: LD_VAR 0 1
72183: PUSH
72184: LD_VAR 0 2
72188: PUSH
72189: LD_INT 4
72191: PLUS
72192: PUSH
72193: LD_INT 0
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: LIST
72200: PUSH
72201: LD_VAR 0 1
72205: PUSH
72206: LD_INT 3
72208: MINUS
72209: PUSH
72210: LD_VAR 0 2
72214: PUSH
72215: LD_INT 1
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: LIST
72222: PUSH
72223: LD_VAR 0 1
72227: PUSH
72228: LD_INT 4
72230: MINUS
72231: PUSH
72232: LD_VAR 0 2
72236: PUSH
72237: LD_INT 4
72239: MINUS
72240: PUSH
72241: LD_INT 2
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: LIST
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: ST_TO_ADDR
// end ; 3 :
72256: GO 72678
72258: LD_INT 3
72260: DOUBLE
72261: EQUAL
72262: IFTRUE 72266
72264: GO 72399
72266: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72267: LD_ADDR_VAR 0 5
72271: PUSH
72272: LD_VAR 0 1
72276: PUSH
72277: LD_INT 3
72279: PLUS
72280: PUSH
72281: LD_VAR 0 2
72285: PUSH
72286: LD_INT 4
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: LIST
72293: PUSH
72294: LD_VAR 0 1
72298: PUSH
72299: LD_INT 4
72301: PLUS
72302: PUSH
72303: LD_VAR 0 2
72307: PUSH
72308: LD_INT 4
72310: PLUS
72311: PUSH
72312: LD_INT 5
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: LIST
72319: PUSH
72320: LD_VAR 0 1
72324: PUSH
72325: LD_INT 4
72327: MINUS
72328: PUSH
72329: LD_VAR 0 2
72333: PUSH
72334: LD_INT 1
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: LIST
72341: PUSH
72342: LD_VAR 0 1
72346: PUSH
72347: LD_VAR 0 2
72351: PUSH
72352: LD_INT 4
72354: MINUS
72355: PUSH
72356: LD_INT 3
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: LIST
72363: PUSH
72364: LD_VAR 0 1
72368: PUSH
72369: LD_INT 3
72371: MINUS
72372: PUSH
72373: LD_VAR 0 2
72377: PUSH
72378: LD_INT 3
72380: MINUS
72381: PUSH
72382: LD_INT 2
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: LIST
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: ST_TO_ADDR
// end ; 4 :
72397: GO 72678
72399: LD_INT 4
72401: DOUBLE
72402: EQUAL
72403: IFTRUE 72407
72405: GO 72540
72407: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72408: LD_ADDR_VAR 0 5
72412: PUSH
72413: LD_VAR 0 1
72417: PUSH
72418: LD_VAR 0 2
72422: PUSH
72423: LD_INT 4
72425: PLUS
72426: PUSH
72427: LD_INT 0
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: LIST
72434: PUSH
72435: LD_VAR 0 1
72439: PUSH
72440: LD_INT 3
72442: PLUS
72443: PUSH
72444: LD_VAR 0 2
72448: PUSH
72449: LD_INT 3
72451: PLUS
72452: PUSH
72453: LD_INT 5
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: LIST
72460: PUSH
72461: LD_VAR 0 1
72465: PUSH
72466: LD_INT 4
72468: PLUS
72469: PUSH
72470: LD_VAR 0 2
72474: PUSH
72475: LD_INT 4
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: LIST
72482: PUSH
72483: LD_VAR 0 1
72487: PUSH
72488: LD_VAR 0 2
72492: PUSH
72493: LD_INT 3
72495: MINUS
72496: PUSH
72497: LD_INT 3
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: LIST
72504: PUSH
72505: LD_VAR 0 1
72509: PUSH
72510: LD_INT 4
72512: MINUS
72513: PUSH
72514: LD_VAR 0 2
72518: PUSH
72519: LD_INT 4
72521: MINUS
72522: PUSH
72523: LD_INT 2
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: LIST
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: ST_TO_ADDR
// end ; 5 :
72538: GO 72678
72540: LD_INT 5
72542: DOUBLE
72543: EQUAL
72544: IFTRUE 72548
72546: GO 72677
72548: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72549: LD_ADDR_VAR 0 5
72553: PUSH
72554: LD_VAR 0 1
72558: PUSH
72559: LD_INT 4
72561: MINUS
72562: PUSH
72563: LD_VAR 0 2
72567: PUSH
72568: LD_INT 1
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: LIST
72575: PUSH
72576: LD_VAR 0 1
72580: PUSH
72581: LD_VAR 0 2
72585: PUSH
72586: LD_INT 4
72588: MINUS
72589: PUSH
72590: LD_INT 3
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: LIST
72597: PUSH
72598: LD_VAR 0 1
72602: PUSH
72603: LD_INT 4
72605: PLUS
72606: PUSH
72607: LD_VAR 0 2
72611: PUSH
72612: LD_INT 4
72614: PLUS
72615: PUSH
72616: LD_INT 5
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: LIST
72623: PUSH
72624: LD_VAR 0 1
72628: PUSH
72629: LD_INT 3
72631: PLUS
72632: PUSH
72633: LD_VAR 0 2
72637: PUSH
72638: LD_INT 4
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: LIST
72645: PUSH
72646: LD_VAR 0 1
72650: PUSH
72651: LD_VAR 0 2
72655: PUSH
72656: LD_INT 3
72658: PLUS
72659: PUSH
72660: LD_INT 0
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: LIST
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: ST_TO_ADDR
// end ; end ;
72675: GO 72678
72677: POP
// result := list ;
72678: LD_ADDR_VAR 0 4
72682: PUSH
72683: LD_VAR 0 5
72687: ST_TO_ADDR
// end ;
72688: LD_VAR 0 4
72692: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72693: LD_INT 0
72695: PPUSH
72696: PPUSH
72697: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72698: LD_VAR 0 1
72702: NOT
72703: PUSH
72704: LD_VAR 0 2
72708: PUSH
72709: LD_INT 1
72711: PUSH
72712: LD_INT 2
72714: PUSH
72715: LD_INT 3
72717: PUSH
72718: LD_INT 4
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: IN
72727: NOT
72728: OR
72729: IFFALSE 72733
// exit ;
72731: GO 72825
// tmp := [ ] ;
72733: LD_ADDR_VAR 0 5
72737: PUSH
72738: EMPTY
72739: ST_TO_ADDR
// for i in units do
72740: LD_ADDR_VAR 0 4
72744: PUSH
72745: LD_VAR 0 1
72749: PUSH
72750: FOR_IN
72751: IFFALSE 72794
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72753: LD_ADDR_VAR 0 5
72757: PUSH
72758: LD_VAR 0 5
72762: PPUSH
72763: LD_VAR 0 5
72767: PUSH
72768: LD_INT 1
72770: PLUS
72771: PPUSH
72772: LD_VAR 0 4
72776: PPUSH
72777: LD_VAR 0 2
72781: PPUSH
72782: CALL_OW 259
72786: PPUSH
72787: CALL_OW 2
72791: ST_TO_ADDR
72792: GO 72750
72794: POP
72795: POP
// if not tmp then
72796: LD_VAR 0 5
72800: NOT
72801: IFFALSE 72805
// exit ;
72803: GO 72825
// result := SortListByListDesc ( units , tmp ) ;
72805: LD_ADDR_VAR 0 3
72809: PUSH
72810: LD_VAR 0 1
72814: PPUSH
72815: LD_VAR 0 5
72819: PPUSH
72820: CALL_OW 77
72824: ST_TO_ADDR
// end ;
72825: LD_VAR 0 3
72829: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72830: LD_INT 0
72832: PPUSH
72833: PPUSH
72834: PPUSH
// result := false ;
72835: LD_ADDR_VAR 0 3
72839: PUSH
72840: LD_INT 0
72842: ST_TO_ADDR
// x := GetX ( building ) ;
72843: LD_ADDR_VAR 0 4
72847: PUSH
72848: LD_VAR 0 2
72852: PPUSH
72853: CALL_OW 250
72857: ST_TO_ADDR
// y := GetY ( building ) ;
72858: LD_ADDR_VAR 0 5
72862: PUSH
72863: LD_VAR 0 2
72867: PPUSH
72868: CALL_OW 251
72872: ST_TO_ADDR
// if not building or not x or not y then
72873: LD_VAR 0 2
72877: NOT
72878: PUSH
72879: LD_VAR 0 4
72883: NOT
72884: OR
72885: PUSH
72886: LD_VAR 0 5
72890: NOT
72891: OR
72892: IFFALSE 72896
// exit ;
72894: GO 72988
// if GetTaskList ( unit ) then
72896: LD_VAR 0 1
72900: PPUSH
72901: CALL_OW 437
72905: IFFALSE 72988
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72907: LD_STRING e
72909: PUSH
72910: LD_VAR 0 1
72914: PPUSH
72915: CALL_OW 437
72919: PUSH
72920: LD_INT 1
72922: ARRAY
72923: PUSH
72924: LD_INT 1
72926: ARRAY
72927: EQUAL
72928: PUSH
72929: LD_VAR 0 4
72933: PUSH
72934: LD_VAR 0 1
72938: PPUSH
72939: CALL_OW 437
72943: PUSH
72944: LD_INT 1
72946: ARRAY
72947: PUSH
72948: LD_INT 2
72950: ARRAY
72951: EQUAL
72952: AND
72953: PUSH
72954: LD_VAR 0 5
72958: PUSH
72959: LD_VAR 0 1
72963: PPUSH
72964: CALL_OW 437
72968: PUSH
72969: LD_INT 1
72971: ARRAY
72972: PUSH
72973: LD_INT 3
72975: ARRAY
72976: EQUAL
72977: AND
72978: IFFALSE 72988
// result := true end ;
72980: LD_ADDR_VAR 0 3
72984: PUSH
72985: LD_INT 1
72987: ST_TO_ADDR
// end ;
72988: LD_VAR 0 3
72992: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72993: LD_INT 0
72995: PPUSH
// result := false ;
72996: LD_ADDR_VAR 0 4
73000: PUSH
73001: LD_INT 0
73003: ST_TO_ADDR
// if GetTaskList ( unit ) then
73004: LD_VAR 0 1
73008: PPUSH
73009: CALL_OW 437
73013: IFFALSE 73096
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73015: LD_STRING M
73017: PUSH
73018: LD_VAR 0 1
73022: PPUSH
73023: CALL_OW 437
73027: PUSH
73028: LD_INT 1
73030: ARRAY
73031: PUSH
73032: LD_INT 1
73034: ARRAY
73035: EQUAL
73036: PUSH
73037: LD_VAR 0 2
73041: PUSH
73042: LD_VAR 0 1
73046: PPUSH
73047: CALL_OW 437
73051: PUSH
73052: LD_INT 1
73054: ARRAY
73055: PUSH
73056: LD_INT 2
73058: ARRAY
73059: EQUAL
73060: AND
73061: PUSH
73062: LD_VAR 0 3
73066: PUSH
73067: LD_VAR 0 1
73071: PPUSH
73072: CALL_OW 437
73076: PUSH
73077: LD_INT 1
73079: ARRAY
73080: PUSH
73081: LD_INT 3
73083: ARRAY
73084: EQUAL
73085: AND
73086: IFFALSE 73096
// result := true ;
73088: LD_ADDR_VAR 0 4
73092: PUSH
73093: LD_INT 1
73095: ST_TO_ADDR
// end ; end ;
73096: LD_VAR 0 4
73100: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73101: LD_INT 0
73103: PPUSH
73104: PPUSH
73105: PPUSH
73106: PPUSH
// if not unit or not area then
73107: LD_VAR 0 1
73111: NOT
73112: PUSH
73113: LD_VAR 0 2
73117: NOT
73118: OR
73119: IFFALSE 73123
// exit ;
73121: GO 73287
// tmp := AreaToList ( area , i ) ;
73123: LD_ADDR_VAR 0 6
73127: PUSH
73128: LD_VAR 0 2
73132: PPUSH
73133: LD_VAR 0 5
73137: PPUSH
73138: CALL_OW 517
73142: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73143: LD_ADDR_VAR 0 5
73147: PUSH
73148: DOUBLE
73149: LD_INT 1
73151: DEC
73152: ST_TO_ADDR
73153: LD_VAR 0 6
73157: PUSH
73158: LD_INT 1
73160: ARRAY
73161: PUSH
73162: FOR_TO
73163: IFFALSE 73285
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73165: LD_ADDR_VAR 0 7
73169: PUSH
73170: LD_VAR 0 6
73174: PUSH
73175: LD_INT 1
73177: ARRAY
73178: PUSH
73179: LD_VAR 0 5
73183: ARRAY
73184: PUSH
73185: LD_VAR 0 6
73189: PUSH
73190: LD_INT 2
73192: ARRAY
73193: PUSH
73194: LD_VAR 0 5
73198: ARRAY
73199: PUSH
73200: EMPTY
73201: LIST
73202: LIST
73203: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73204: LD_VAR 0 7
73208: PUSH
73209: LD_INT 1
73211: ARRAY
73212: PPUSH
73213: LD_VAR 0 7
73217: PUSH
73218: LD_INT 2
73220: ARRAY
73221: PPUSH
73222: CALL_OW 428
73226: PUSH
73227: LD_INT 0
73229: EQUAL
73230: IFFALSE 73283
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73232: LD_VAR 0 1
73236: PPUSH
73237: LD_VAR 0 7
73241: PUSH
73242: LD_INT 1
73244: ARRAY
73245: PPUSH
73246: LD_VAR 0 7
73250: PUSH
73251: LD_INT 2
73253: ARRAY
73254: PPUSH
73255: LD_VAR 0 3
73259: PPUSH
73260: CALL_OW 48
// result := IsPlaced ( unit ) ;
73264: LD_ADDR_VAR 0 4
73268: PUSH
73269: LD_VAR 0 1
73273: PPUSH
73274: CALL_OW 305
73278: ST_TO_ADDR
// exit ;
73279: POP
73280: POP
73281: GO 73287
// end ; end ;
73283: GO 73162
73285: POP
73286: POP
// end ;
73287: LD_VAR 0 4
73291: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73292: LD_INT 0
73294: PPUSH
73295: PPUSH
73296: PPUSH
// if not side or side > 8 then
73297: LD_VAR 0 1
73301: NOT
73302: PUSH
73303: LD_VAR 0 1
73307: PUSH
73308: LD_INT 8
73310: GREATER
73311: OR
73312: IFFALSE 73316
// exit ;
73314: GO 73503
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73316: LD_ADDR_VAR 0 4
73320: PUSH
73321: LD_INT 22
73323: PUSH
73324: LD_VAR 0 1
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: PUSH
73333: LD_INT 21
73335: PUSH
73336: LD_INT 3
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: PPUSH
73347: CALL_OW 69
73351: ST_TO_ADDR
// if not tmp then
73352: LD_VAR 0 4
73356: NOT
73357: IFFALSE 73361
// exit ;
73359: GO 73503
// enable_addtolog := true ;
73361: LD_ADDR_OWVAR 81
73365: PUSH
73366: LD_INT 1
73368: ST_TO_ADDR
// AddToLog ( [ ) ;
73369: LD_STRING [
73371: PPUSH
73372: CALL_OW 561
// for i in tmp do
73376: LD_ADDR_VAR 0 3
73380: PUSH
73381: LD_VAR 0 4
73385: PUSH
73386: FOR_IN
73387: IFFALSE 73494
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73389: LD_STRING [
73391: PUSH
73392: LD_VAR 0 3
73396: PPUSH
73397: CALL_OW 266
73401: STR
73402: PUSH
73403: LD_STRING , 
73405: STR
73406: PUSH
73407: LD_VAR 0 3
73411: PPUSH
73412: CALL_OW 250
73416: STR
73417: PUSH
73418: LD_STRING , 
73420: STR
73421: PUSH
73422: LD_VAR 0 3
73426: PPUSH
73427: CALL_OW 251
73431: STR
73432: PUSH
73433: LD_STRING , 
73435: STR
73436: PUSH
73437: LD_VAR 0 3
73441: PPUSH
73442: CALL_OW 254
73446: STR
73447: PUSH
73448: LD_STRING , 
73450: STR
73451: PUSH
73452: LD_VAR 0 3
73456: PPUSH
73457: LD_INT 1
73459: PPUSH
73460: CALL_OW 268
73464: STR
73465: PUSH
73466: LD_STRING , 
73468: STR
73469: PUSH
73470: LD_VAR 0 3
73474: PPUSH
73475: LD_INT 2
73477: PPUSH
73478: CALL_OW 268
73482: STR
73483: PUSH
73484: LD_STRING ],
73486: STR
73487: PPUSH
73488: CALL_OW 561
// end ;
73492: GO 73386
73494: POP
73495: POP
// AddToLog ( ]; ) ;
73496: LD_STRING ];
73498: PPUSH
73499: CALL_OW 561
// end ;
73503: LD_VAR 0 2
73507: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73508: LD_INT 0
73510: PPUSH
73511: PPUSH
73512: PPUSH
73513: PPUSH
73514: PPUSH
// if not area or not rate or not max then
73515: LD_VAR 0 1
73519: NOT
73520: PUSH
73521: LD_VAR 0 2
73525: NOT
73526: OR
73527: PUSH
73528: LD_VAR 0 4
73532: NOT
73533: OR
73534: IFFALSE 73538
// exit ;
73536: GO 73730
// while 1 do
73538: LD_INT 1
73540: IFFALSE 73730
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73542: LD_ADDR_VAR 0 9
73546: PUSH
73547: LD_VAR 0 1
73551: PPUSH
73552: LD_INT 1
73554: PPUSH
73555: CALL_OW 287
73559: PUSH
73560: LD_INT 10
73562: MUL
73563: ST_TO_ADDR
// r := rate / 10 ;
73564: LD_ADDR_VAR 0 7
73568: PUSH
73569: LD_VAR 0 2
73573: PUSH
73574: LD_INT 10
73576: DIVREAL
73577: ST_TO_ADDR
// time := 1 1$00 ;
73578: LD_ADDR_VAR 0 8
73582: PUSH
73583: LD_INT 2100
73585: ST_TO_ADDR
// if amount < min then
73586: LD_VAR 0 9
73590: PUSH
73591: LD_VAR 0 3
73595: LESS
73596: IFFALSE 73614
// r := r * 2 else
73598: LD_ADDR_VAR 0 7
73602: PUSH
73603: LD_VAR 0 7
73607: PUSH
73608: LD_INT 2
73610: MUL
73611: ST_TO_ADDR
73612: GO 73640
// if amount > max then
73614: LD_VAR 0 9
73618: PUSH
73619: LD_VAR 0 4
73623: GREATER
73624: IFFALSE 73640
// r := r / 2 ;
73626: LD_ADDR_VAR 0 7
73630: PUSH
73631: LD_VAR 0 7
73635: PUSH
73636: LD_INT 2
73638: DIVREAL
73639: ST_TO_ADDR
// time := time / r ;
73640: LD_ADDR_VAR 0 8
73644: PUSH
73645: LD_VAR 0 8
73649: PUSH
73650: LD_VAR 0 7
73654: DIVREAL
73655: ST_TO_ADDR
// if time < 0 then
73656: LD_VAR 0 8
73660: PUSH
73661: LD_INT 0
73663: LESS
73664: IFFALSE 73681
// time := time * - 1 ;
73666: LD_ADDR_VAR 0 8
73670: PUSH
73671: LD_VAR 0 8
73675: PUSH
73676: LD_INT 1
73678: NEG
73679: MUL
73680: ST_TO_ADDR
// wait ( time ) ;
73681: LD_VAR 0 8
73685: PPUSH
73686: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73690: LD_INT 35
73692: PPUSH
73693: LD_INT 875
73695: PPUSH
73696: CALL_OW 12
73700: PPUSH
73701: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73705: LD_INT 1
73707: PPUSH
73708: LD_INT 5
73710: PPUSH
73711: CALL_OW 12
73715: PPUSH
73716: LD_VAR 0 1
73720: PPUSH
73721: LD_INT 1
73723: PPUSH
73724: CALL_OW 55
// end ;
73728: GO 73538
// end ;
73730: LD_VAR 0 5
73734: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73735: LD_INT 0
73737: PPUSH
73738: PPUSH
73739: PPUSH
73740: PPUSH
73741: PPUSH
73742: PPUSH
73743: PPUSH
73744: PPUSH
// if not turrets or not factories then
73745: LD_VAR 0 1
73749: NOT
73750: PUSH
73751: LD_VAR 0 2
73755: NOT
73756: OR
73757: IFFALSE 73761
// exit ;
73759: GO 74068
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73761: LD_ADDR_VAR 0 10
73765: PUSH
73766: LD_INT 5
73768: PUSH
73769: LD_INT 6
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: PUSH
73776: LD_INT 2
73778: PUSH
73779: LD_INT 4
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_INT 3
73788: PUSH
73789: LD_INT 5
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: LIST
73800: PUSH
73801: LD_INT 24
73803: PUSH
73804: LD_INT 25
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: PUSH
73811: LD_INT 23
73813: PUSH
73814: LD_INT 27
73816: PUSH
73817: EMPTY
73818: LIST
73819: LIST
73820: PUSH
73821: EMPTY
73822: LIST
73823: LIST
73824: PUSH
73825: LD_INT 42
73827: PUSH
73828: LD_INT 43
73830: PUSH
73831: EMPTY
73832: LIST
73833: LIST
73834: PUSH
73835: LD_INT 44
73837: PUSH
73838: LD_INT 46
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: PUSH
73845: LD_INT 45
73847: PUSH
73848: LD_INT 47
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: LIST
73859: PUSH
73860: EMPTY
73861: LIST
73862: LIST
73863: LIST
73864: ST_TO_ADDR
// result := [ ] ;
73865: LD_ADDR_VAR 0 3
73869: PUSH
73870: EMPTY
73871: ST_TO_ADDR
// for i in turrets do
73872: LD_ADDR_VAR 0 4
73876: PUSH
73877: LD_VAR 0 1
73881: PUSH
73882: FOR_IN
73883: IFFALSE 74066
// begin nat := GetNation ( i ) ;
73885: LD_ADDR_VAR 0 7
73889: PUSH
73890: LD_VAR 0 4
73894: PPUSH
73895: CALL_OW 248
73899: ST_TO_ADDR
// weapon := 0 ;
73900: LD_ADDR_VAR 0 8
73904: PUSH
73905: LD_INT 0
73907: ST_TO_ADDR
// if not nat then
73908: LD_VAR 0 7
73912: NOT
73913: IFFALSE 73917
// continue ;
73915: GO 73882
// for j in list [ nat ] do
73917: LD_ADDR_VAR 0 5
73921: PUSH
73922: LD_VAR 0 10
73926: PUSH
73927: LD_VAR 0 7
73931: ARRAY
73932: PUSH
73933: FOR_IN
73934: IFFALSE 73975
// if GetBWeapon ( i ) = j [ 1 ] then
73936: LD_VAR 0 4
73940: PPUSH
73941: CALL_OW 269
73945: PUSH
73946: LD_VAR 0 5
73950: PUSH
73951: LD_INT 1
73953: ARRAY
73954: EQUAL
73955: IFFALSE 73973
// begin weapon := j [ 2 ] ;
73957: LD_ADDR_VAR 0 8
73961: PUSH
73962: LD_VAR 0 5
73966: PUSH
73967: LD_INT 2
73969: ARRAY
73970: ST_TO_ADDR
// break ;
73971: GO 73975
// end ;
73973: GO 73933
73975: POP
73976: POP
// if not weapon then
73977: LD_VAR 0 8
73981: NOT
73982: IFFALSE 73986
// continue ;
73984: GO 73882
// for k in factories do
73986: LD_ADDR_VAR 0 6
73990: PUSH
73991: LD_VAR 0 2
73995: PUSH
73996: FOR_IN
73997: IFFALSE 74062
// begin weapons := AvailableWeaponList ( k ) ;
73999: LD_ADDR_VAR 0 9
74003: PUSH
74004: LD_VAR 0 6
74008: PPUSH
74009: CALL_OW 478
74013: ST_TO_ADDR
// if not weapons then
74014: LD_VAR 0 9
74018: NOT
74019: IFFALSE 74023
// continue ;
74021: GO 73996
// if weapon in weapons then
74023: LD_VAR 0 8
74027: PUSH
74028: LD_VAR 0 9
74032: IN
74033: IFFALSE 74060
// begin result := [ i , weapon ] ;
74035: LD_ADDR_VAR 0 3
74039: PUSH
74040: LD_VAR 0 4
74044: PUSH
74045: LD_VAR 0 8
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: ST_TO_ADDR
// exit ;
74054: POP
74055: POP
74056: POP
74057: POP
74058: GO 74068
// end ; end ;
74060: GO 73996
74062: POP
74063: POP
// end ;
74064: GO 73882
74066: POP
74067: POP
// end ;
74068: LD_VAR 0 3
74072: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74073: LD_INT 0
74075: PPUSH
// if not side or side > 8 then
74076: LD_VAR 0 3
74080: NOT
74081: PUSH
74082: LD_VAR 0 3
74086: PUSH
74087: LD_INT 8
74089: GREATER
74090: OR
74091: IFFALSE 74095
// exit ;
74093: GO 74154
// if not range then
74095: LD_VAR 0 4
74099: NOT
74100: IFFALSE 74111
// range := - 12 ;
74102: LD_ADDR_VAR 0 4
74106: PUSH
74107: LD_INT 12
74109: NEG
74110: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74111: LD_VAR 0 1
74115: PPUSH
74116: LD_VAR 0 2
74120: PPUSH
74121: LD_VAR 0 3
74125: PPUSH
74126: LD_VAR 0 4
74130: PPUSH
74131: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74135: LD_VAR 0 1
74139: PPUSH
74140: LD_VAR 0 2
74144: PPUSH
74145: LD_VAR 0 3
74149: PPUSH
74150: CALL_OW 331
// end ;
74154: LD_VAR 0 5
74158: RET
// export function Video ( mode ) ; begin
74159: LD_INT 0
74161: PPUSH
// ingame_video = mode ;
74162: LD_ADDR_OWVAR 52
74166: PUSH
74167: LD_VAR 0 1
74171: ST_TO_ADDR
// interface_hidden = mode ;
74172: LD_ADDR_OWVAR 54
74176: PUSH
74177: LD_VAR 0 1
74181: ST_TO_ADDR
// end ;
74182: LD_VAR 0 2
74186: RET
// export function Join ( array , element ) ; begin
74187: LD_INT 0
74189: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74190: LD_ADDR_VAR 0 3
74194: PUSH
74195: LD_VAR 0 1
74199: PPUSH
74200: LD_VAR 0 1
74204: PUSH
74205: LD_INT 1
74207: PLUS
74208: PPUSH
74209: LD_VAR 0 2
74213: PPUSH
74214: CALL_OW 1
74218: ST_TO_ADDR
// end ;
74219: LD_VAR 0 3
74223: RET
// export function JoinUnion ( array , element ) ; begin
74224: LD_INT 0
74226: PPUSH
// result := array union element ;
74227: LD_ADDR_VAR 0 3
74231: PUSH
74232: LD_VAR 0 1
74236: PUSH
74237: LD_VAR 0 2
74241: UNION
74242: ST_TO_ADDR
// end ;
74243: LD_VAR 0 3
74247: RET
// export function GetBehemoths ( side ) ; begin
74248: LD_INT 0
74250: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74251: LD_ADDR_VAR 0 2
74255: PUSH
74256: LD_INT 22
74258: PUSH
74259: LD_VAR 0 1
74263: PUSH
74264: EMPTY
74265: LIST
74266: LIST
74267: PUSH
74268: LD_INT 31
74270: PUSH
74271: LD_INT 25
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: PUSH
74278: EMPTY
74279: LIST
74280: LIST
74281: PPUSH
74282: CALL_OW 69
74286: ST_TO_ADDR
// end ;
74287: LD_VAR 0 2
74291: RET
// export function Shuffle ( array ) ; var i , index ; begin
74292: LD_INT 0
74294: PPUSH
74295: PPUSH
74296: PPUSH
// result := [ ] ;
74297: LD_ADDR_VAR 0 2
74301: PUSH
74302: EMPTY
74303: ST_TO_ADDR
// if not array then
74304: LD_VAR 0 1
74308: NOT
74309: IFFALSE 74313
// exit ;
74311: GO 74412
// Randomize ;
74313: CALL_OW 10
// for i = array downto 1 do
74317: LD_ADDR_VAR 0 3
74321: PUSH
74322: DOUBLE
74323: LD_VAR 0 1
74327: INC
74328: ST_TO_ADDR
74329: LD_INT 1
74331: PUSH
74332: FOR_DOWNTO
74333: IFFALSE 74410
// begin index := rand ( 1 , array ) ;
74335: LD_ADDR_VAR 0 4
74339: PUSH
74340: LD_INT 1
74342: PPUSH
74343: LD_VAR 0 1
74347: PPUSH
74348: CALL_OW 12
74352: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74353: LD_ADDR_VAR 0 2
74357: PUSH
74358: LD_VAR 0 2
74362: PPUSH
74363: LD_VAR 0 2
74367: PUSH
74368: LD_INT 1
74370: PLUS
74371: PPUSH
74372: LD_VAR 0 1
74376: PUSH
74377: LD_VAR 0 4
74381: ARRAY
74382: PPUSH
74383: CALL_OW 2
74387: ST_TO_ADDR
// array := Delete ( array , index ) ;
74388: LD_ADDR_VAR 0 1
74392: PUSH
74393: LD_VAR 0 1
74397: PPUSH
74398: LD_VAR 0 4
74402: PPUSH
74403: CALL_OW 3
74407: ST_TO_ADDR
// end ;
74408: GO 74332
74410: POP
74411: POP
// end ;
74412: LD_VAR 0 2
74416: RET
// export function GetBaseMaterials ( base ) ; begin
74417: LD_INT 0
74419: PPUSH
// result := [ 0 , 0 , 0 ] ;
74420: LD_ADDR_VAR 0 2
74424: PUSH
74425: LD_INT 0
74427: PUSH
74428: LD_INT 0
74430: PUSH
74431: LD_INT 0
74433: PUSH
74434: EMPTY
74435: LIST
74436: LIST
74437: LIST
74438: ST_TO_ADDR
// if not base then
74439: LD_VAR 0 1
74443: NOT
74444: IFFALSE 74448
// exit ;
74446: GO 74497
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74448: LD_ADDR_VAR 0 2
74452: PUSH
74453: LD_VAR 0 1
74457: PPUSH
74458: LD_INT 1
74460: PPUSH
74461: CALL_OW 275
74465: PUSH
74466: LD_VAR 0 1
74470: PPUSH
74471: LD_INT 2
74473: PPUSH
74474: CALL_OW 275
74478: PUSH
74479: LD_VAR 0 1
74483: PPUSH
74484: LD_INT 3
74486: PPUSH
74487: CALL_OW 275
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: LIST
74496: ST_TO_ADDR
// end ;
74497: LD_VAR 0 2
74501: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74502: LD_INT 0
74504: PPUSH
74505: PPUSH
// result := array ;
74506: LD_ADDR_VAR 0 3
74510: PUSH
74511: LD_VAR 0 1
74515: ST_TO_ADDR
// if size > 0 then
74516: LD_VAR 0 2
74520: PUSH
74521: LD_INT 0
74523: GREATER
74524: IFFALSE 74570
// for i := array downto size do
74526: LD_ADDR_VAR 0 4
74530: PUSH
74531: DOUBLE
74532: LD_VAR 0 1
74536: INC
74537: ST_TO_ADDR
74538: LD_VAR 0 2
74542: PUSH
74543: FOR_DOWNTO
74544: IFFALSE 74568
// result := Delete ( result , result ) ;
74546: LD_ADDR_VAR 0 3
74550: PUSH
74551: LD_VAR 0 3
74555: PPUSH
74556: LD_VAR 0 3
74560: PPUSH
74561: CALL_OW 3
74565: ST_TO_ADDR
74566: GO 74543
74568: POP
74569: POP
// end ;
74570: LD_VAR 0 3
74574: RET
// export function ComExit ( unit ) ; var tmp ; begin
74575: LD_INT 0
74577: PPUSH
74578: PPUSH
// if not IsInUnit ( unit ) then
74579: LD_VAR 0 1
74583: PPUSH
74584: CALL_OW 310
74588: NOT
74589: IFFALSE 74593
// exit ;
74591: GO 74653
// tmp := IsInUnit ( unit ) ;
74593: LD_ADDR_VAR 0 3
74597: PUSH
74598: LD_VAR 0 1
74602: PPUSH
74603: CALL_OW 310
74607: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74608: LD_VAR 0 3
74612: PPUSH
74613: CALL_OW 247
74617: PUSH
74618: LD_INT 2
74620: EQUAL
74621: IFFALSE 74634
// ComExitVehicle ( unit ) else
74623: LD_VAR 0 1
74627: PPUSH
74628: CALL_OW 121
74632: GO 74643
// ComExitBuilding ( unit ) ;
74634: LD_VAR 0 1
74638: PPUSH
74639: CALL_OW 122
// result := tmp ;
74643: LD_ADDR_VAR 0 2
74647: PUSH
74648: LD_VAR 0 3
74652: ST_TO_ADDR
// end ;
74653: LD_VAR 0 2
74657: RET
// export function ComExitAll ( units ) ; var i ; begin
74658: LD_INT 0
74660: PPUSH
74661: PPUSH
// if not units then
74662: LD_VAR 0 1
74666: NOT
74667: IFFALSE 74671
// exit ;
74669: GO 74697
// for i in units do
74671: LD_ADDR_VAR 0 3
74675: PUSH
74676: LD_VAR 0 1
74680: PUSH
74681: FOR_IN
74682: IFFALSE 74695
// ComExit ( i ) ;
74684: LD_VAR 0 3
74688: PPUSH
74689: CALL 74575 0 1
74693: GO 74681
74695: POP
74696: POP
// end ;
74697: LD_VAR 0 2
74701: RET
// export function ResetHc ; begin
74702: LD_INT 0
74704: PPUSH
// InitHc ;
74705: CALL_OW 19
// hc_importance := 0 ;
74709: LD_ADDR_OWVAR 32
74713: PUSH
74714: LD_INT 0
74716: ST_TO_ADDR
// end ;
74717: LD_VAR 0 1
74721: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74722: LD_INT 0
74724: PPUSH
74725: PPUSH
74726: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74727: LD_ADDR_VAR 0 6
74731: PUSH
74732: LD_VAR 0 1
74736: PUSH
74737: LD_VAR 0 3
74741: PLUS
74742: PUSH
74743: LD_INT 2
74745: DIV
74746: ST_TO_ADDR
// if _x < 0 then
74747: LD_VAR 0 6
74751: PUSH
74752: LD_INT 0
74754: LESS
74755: IFFALSE 74772
// _x := _x * - 1 ;
74757: LD_ADDR_VAR 0 6
74761: PUSH
74762: LD_VAR 0 6
74766: PUSH
74767: LD_INT 1
74769: NEG
74770: MUL
74771: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74772: LD_ADDR_VAR 0 7
74776: PUSH
74777: LD_VAR 0 2
74781: PUSH
74782: LD_VAR 0 4
74786: PLUS
74787: PUSH
74788: LD_INT 2
74790: DIV
74791: ST_TO_ADDR
// if _y < 0 then
74792: LD_VAR 0 7
74796: PUSH
74797: LD_INT 0
74799: LESS
74800: IFFALSE 74817
// _y := _y * - 1 ;
74802: LD_ADDR_VAR 0 7
74806: PUSH
74807: LD_VAR 0 7
74811: PUSH
74812: LD_INT 1
74814: NEG
74815: MUL
74816: ST_TO_ADDR
// result := [ _x , _y ] ;
74817: LD_ADDR_VAR 0 5
74821: PUSH
74822: LD_VAR 0 6
74826: PUSH
74827: LD_VAR 0 7
74831: PUSH
74832: EMPTY
74833: LIST
74834: LIST
74835: ST_TO_ADDR
// end ;
74836: LD_VAR 0 5
74840: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74841: LD_INT 0
74843: PPUSH
74844: PPUSH
74845: PPUSH
74846: PPUSH
// task := GetTaskList ( unit ) ;
74847: LD_ADDR_VAR 0 7
74851: PUSH
74852: LD_VAR 0 1
74856: PPUSH
74857: CALL_OW 437
74861: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74862: LD_VAR 0 7
74866: NOT
74867: PUSH
74868: LD_VAR 0 1
74872: PPUSH
74873: LD_VAR 0 2
74877: PPUSH
74878: CALL_OW 308
74882: NOT
74883: AND
74884: IFFALSE 74888
// exit ;
74886: GO 75006
// if IsInArea ( unit , area ) then
74888: LD_VAR 0 1
74892: PPUSH
74893: LD_VAR 0 2
74897: PPUSH
74898: CALL_OW 308
74902: IFFALSE 74920
// begin ComMoveToArea ( unit , goAway ) ;
74904: LD_VAR 0 1
74908: PPUSH
74909: LD_VAR 0 3
74913: PPUSH
74914: CALL_OW 113
// exit ;
74918: GO 75006
// end ; if task [ 1 ] [ 1 ] <> M then
74920: LD_VAR 0 7
74924: PUSH
74925: LD_INT 1
74927: ARRAY
74928: PUSH
74929: LD_INT 1
74931: ARRAY
74932: PUSH
74933: LD_STRING M
74935: NONEQUAL
74936: IFFALSE 74940
// exit ;
74938: GO 75006
// x := task [ 1 ] [ 2 ] ;
74940: LD_ADDR_VAR 0 5
74944: PUSH
74945: LD_VAR 0 7
74949: PUSH
74950: LD_INT 1
74952: ARRAY
74953: PUSH
74954: LD_INT 2
74956: ARRAY
74957: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74958: LD_ADDR_VAR 0 6
74962: PUSH
74963: LD_VAR 0 7
74967: PUSH
74968: LD_INT 1
74970: ARRAY
74971: PUSH
74972: LD_INT 3
74974: ARRAY
74975: ST_TO_ADDR
// if InArea ( x , y , area ) then
74976: LD_VAR 0 5
74980: PPUSH
74981: LD_VAR 0 6
74985: PPUSH
74986: LD_VAR 0 2
74990: PPUSH
74991: CALL_OW 309
74995: IFFALSE 75006
// ComStop ( unit ) ;
74997: LD_VAR 0 1
75001: PPUSH
75002: CALL_OW 141
// end ;
75006: LD_VAR 0 4
75010: RET
// export function Abs ( value ) ; begin
75011: LD_INT 0
75013: PPUSH
// result := value ;
75014: LD_ADDR_VAR 0 2
75018: PUSH
75019: LD_VAR 0 1
75023: ST_TO_ADDR
// if value < 0 then
75024: LD_VAR 0 1
75028: PUSH
75029: LD_INT 0
75031: LESS
75032: IFFALSE 75049
// result := value * - 1 ;
75034: LD_ADDR_VAR 0 2
75038: PUSH
75039: LD_VAR 0 1
75043: PUSH
75044: LD_INT 1
75046: NEG
75047: MUL
75048: ST_TO_ADDR
// end ;
75049: LD_VAR 0 2
75053: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75054: LD_INT 0
75056: PPUSH
75057: PPUSH
75058: PPUSH
75059: PPUSH
75060: PPUSH
75061: PPUSH
75062: PPUSH
75063: PPUSH
// if not unit or not building then
75064: LD_VAR 0 1
75068: NOT
75069: PUSH
75070: LD_VAR 0 2
75074: NOT
75075: OR
75076: IFFALSE 75080
// exit ;
75078: GO 75306
// x := GetX ( building ) ;
75080: LD_ADDR_VAR 0 4
75084: PUSH
75085: LD_VAR 0 2
75089: PPUSH
75090: CALL_OW 250
75094: ST_TO_ADDR
// y := GetY ( building ) ;
75095: LD_ADDR_VAR 0 6
75099: PUSH
75100: LD_VAR 0 2
75104: PPUSH
75105: CALL_OW 251
75109: ST_TO_ADDR
// d := GetDir ( building ) ;
75110: LD_ADDR_VAR 0 8
75114: PUSH
75115: LD_VAR 0 2
75119: PPUSH
75120: CALL_OW 254
75124: ST_TO_ADDR
// r := 4 ;
75125: LD_ADDR_VAR 0 9
75129: PUSH
75130: LD_INT 4
75132: ST_TO_ADDR
// for i := 1 to 5 do
75133: LD_ADDR_VAR 0 10
75137: PUSH
75138: DOUBLE
75139: LD_INT 1
75141: DEC
75142: ST_TO_ADDR
75143: LD_INT 5
75145: PUSH
75146: FOR_TO
75147: IFFALSE 75304
// begin _x := ShiftX ( x , d , r + i ) ;
75149: LD_ADDR_VAR 0 5
75153: PUSH
75154: LD_VAR 0 4
75158: PPUSH
75159: LD_VAR 0 8
75163: PPUSH
75164: LD_VAR 0 9
75168: PUSH
75169: LD_VAR 0 10
75173: PLUS
75174: PPUSH
75175: CALL_OW 272
75179: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75180: LD_ADDR_VAR 0 7
75184: PUSH
75185: LD_VAR 0 6
75189: PPUSH
75190: LD_VAR 0 8
75194: PPUSH
75195: LD_VAR 0 9
75199: PUSH
75200: LD_VAR 0 10
75204: PLUS
75205: PPUSH
75206: CALL_OW 273
75210: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75211: LD_VAR 0 5
75215: PPUSH
75216: LD_VAR 0 7
75220: PPUSH
75221: CALL_OW 488
75225: PUSH
75226: LD_VAR 0 5
75230: PPUSH
75231: LD_VAR 0 7
75235: PPUSH
75236: CALL_OW 428
75240: PPUSH
75241: CALL_OW 247
75245: PUSH
75246: LD_INT 3
75248: PUSH
75249: LD_INT 2
75251: PUSH
75252: EMPTY
75253: LIST
75254: LIST
75255: IN
75256: NOT
75257: AND
75258: IFFALSE 75302
// begin ComMoveXY ( unit , _x , _y ) ;
75260: LD_VAR 0 1
75264: PPUSH
75265: LD_VAR 0 5
75269: PPUSH
75270: LD_VAR 0 7
75274: PPUSH
75275: CALL_OW 111
// result := [ _x , _y ] ;
75279: LD_ADDR_VAR 0 3
75283: PUSH
75284: LD_VAR 0 5
75288: PUSH
75289: LD_VAR 0 7
75293: PUSH
75294: EMPTY
75295: LIST
75296: LIST
75297: ST_TO_ADDR
// exit ;
75298: POP
75299: POP
75300: GO 75306
// end ; end ;
75302: GO 75146
75304: POP
75305: POP
// end ;
75306: LD_VAR 0 3
75310: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75311: LD_INT 0
75313: PPUSH
75314: PPUSH
75315: PPUSH
// result := 0 ;
75316: LD_ADDR_VAR 0 3
75320: PUSH
75321: LD_INT 0
75323: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75324: LD_VAR 0 1
75328: PUSH
75329: LD_INT 0
75331: LESS
75332: PUSH
75333: LD_VAR 0 1
75337: PUSH
75338: LD_INT 8
75340: GREATER
75341: OR
75342: PUSH
75343: LD_VAR 0 2
75347: PUSH
75348: LD_INT 0
75350: LESS
75351: OR
75352: PUSH
75353: LD_VAR 0 2
75357: PUSH
75358: LD_INT 8
75360: GREATER
75361: OR
75362: IFFALSE 75366
// exit ;
75364: GO 75441
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75366: LD_ADDR_VAR 0 4
75370: PUSH
75371: LD_INT 22
75373: PUSH
75374: LD_VAR 0 2
75378: PUSH
75379: EMPTY
75380: LIST
75381: LIST
75382: PPUSH
75383: CALL_OW 69
75387: PUSH
75388: FOR_IN
75389: IFFALSE 75439
// begin un := UnitShoot ( i ) ;
75391: LD_ADDR_VAR 0 5
75395: PUSH
75396: LD_VAR 0 4
75400: PPUSH
75401: CALL_OW 504
75405: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75406: LD_VAR 0 5
75410: PPUSH
75411: CALL_OW 255
75415: PUSH
75416: LD_VAR 0 1
75420: EQUAL
75421: IFFALSE 75437
// begin result := un ;
75423: LD_ADDR_VAR 0 3
75427: PUSH
75428: LD_VAR 0 5
75432: ST_TO_ADDR
// exit ;
75433: POP
75434: POP
75435: GO 75441
// end ; end ;
75437: GO 75388
75439: POP
75440: POP
// end ;
75441: LD_VAR 0 3
75445: RET
// export function GetCargoBay ( units ) ; begin
75446: LD_INT 0
75448: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75449: LD_ADDR_VAR 0 2
75453: PUSH
75454: LD_VAR 0 1
75458: PPUSH
75459: LD_INT 2
75461: PUSH
75462: LD_INT 34
75464: PUSH
75465: LD_INT 12
75467: PUSH
75468: EMPTY
75469: LIST
75470: LIST
75471: PUSH
75472: LD_INT 34
75474: PUSH
75475: LD_INT 51
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: PUSH
75482: LD_INT 34
75484: PUSH
75485: LD_INT 32
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: PUSH
75492: LD_INT 34
75494: PUSH
75495: LD_EXP 50
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: PUSH
75504: EMPTY
75505: LIST
75506: LIST
75507: LIST
75508: LIST
75509: LIST
75510: PPUSH
75511: CALL_OW 72
75515: ST_TO_ADDR
// end ;
75516: LD_VAR 0 2
75520: RET
// export function Negate ( value ) ; begin
75521: LD_INT 0
75523: PPUSH
// result := not value ;
75524: LD_ADDR_VAR 0 2
75528: PUSH
75529: LD_VAR 0 1
75533: NOT
75534: ST_TO_ADDR
// end ;
75535: LD_VAR 0 2
75539: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
75540: LD_INT 0
75542: PPUSH
// if x1 = x2 then
75543: LD_VAR 0 1
75547: PUSH
75548: LD_VAR 0 3
75552: EQUAL
75553: IFFALSE 75587
// begin if y1 > y2 then
75555: LD_VAR 0 2
75559: PUSH
75560: LD_VAR 0 4
75564: GREATER
75565: IFFALSE 75577
// result := 0 else
75567: LD_ADDR_VAR 0 5
75571: PUSH
75572: LD_INT 0
75574: ST_TO_ADDR
75575: GO 75585
// result := 3 ;
75577: LD_ADDR_VAR 0 5
75581: PUSH
75582: LD_INT 3
75584: ST_TO_ADDR
// exit ;
75585: GO 75673
// end ; if y1 = y2 then
75587: LD_VAR 0 2
75591: PUSH
75592: LD_VAR 0 4
75596: EQUAL
75597: IFFALSE 75631
// begin if x1 > x2 then
75599: LD_VAR 0 1
75603: PUSH
75604: LD_VAR 0 3
75608: GREATER
75609: IFFALSE 75621
// result := 1 else
75611: LD_ADDR_VAR 0 5
75615: PUSH
75616: LD_INT 1
75618: ST_TO_ADDR
75619: GO 75629
// result := 4 ;
75621: LD_ADDR_VAR 0 5
75625: PUSH
75626: LD_INT 4
75628: ST_TO_ADDR
// exit ;
75629: GO 75673
// end ; if x1 > x2 and y1 > y2 then
75631: LD_VAR 0 1
75635: PUSH
75636: LD_VAR 0 3
75640: GREATER
75641: PUSH
75642: LD_VAR 0 2
75646: PUSH
75647: LD_VAR 0 4
75651: GREATER
75652: AND
75653: IFFALSE 75665
// result := 2 else
75655: LD_ADDR_VAR 0 5
75659: PUSH
75660: LD_INT 2
75662: ST_TO_ADDR
75663: GO 75673
// result := 5 ;
75665: LD_ADDR_VAR 0 5
75669: PUSH
75670: LD_INT 5
75672: ST_TO_ADDR
// end ;
75673: LD_VAR 0 5
75677: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75678: LD_INT 0
75680: PPUSH
75681: PPUSH
// if not driver or not IsInUnit ( driver ) then
75682: LD_VAR 0 1
75686: NOT
75687: PUSH
75688: LD_VAR 0 1
75692: PPUSH
75693: CALL_OW 310
75697: NOT
75698: OR
75699: IFFALSE 75703
// exit ;
75701: GO 75793
// vehicle := IsInUnit ( driver ) ;
75703: LD_ADDR_VAR 0 3
75707: PUSH
75708: LD_VAR 0 1
75712: PPUSH
75713: CALL_OW 310
75717: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75718: LD_VAR 0 1
75722: PPUSH
75723: LD_STRING \
75725: PUSH
75726: LD_INT 0
75728: PUSH
75729: LD_INT 0
75731: PUSH
75732: LD_INT 0
75734: PUSH
75735: LD_INT 0
75737: PUSH
75738: LD_INT 0
75740: PUSH
75741: LD_INT 0
75743: PUSH
75744: EMPTY
75745: LIST
75746: LIST
75747: LIST
75748: LIST
75749: LIST
75750: LIST
75751: LIST
75752: PUSH
75753: LD_STRING E
75755: PUSH
75756: LD_INT 0
75758: PUSH
75759: LD_INT 0
75761: PUSH
75762: LD_VAR 0 3
75766: PUSH
75767: LD_INT 0
75769: PUSH
75770: LD_INT 0
75772: PUSH
75773: LD_INT 0
75775: PUSH
75776: EMPTY
75777: LIST
75778: LIST
75779: LIST
75780: LIST
75781: LIST
75782: LIST
75783: LIST
75784: PUSH
75785: EMPTY
75786: LIST
75787: LIST
75788: PPUSH
75789: CALL_OW 446
// end ;
75793: LD_VAR 0 2
75797: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75798: LD_INT 0
75800: PPUSH
75801: PPUSH
// if not driver or not IsInUnit ( driver ) then
75802: LD_VAR 0 1
75806: NOT
75807: PUSH
75808: LD_VAR 0 1
75812: PPUSH
75813: CALL_OW 310
75817: NOT
75818: OR
75819: IFFALSE 75823
// exit ;
75821: GO 75913
// vehicle := IsInUnit ( driver ) ;
75823: LD_ADDR_VAR 0 3
75827: PUSH
75828: LD_VAR 0 1
75832: PPUSH
75833: CALL_OW 310
75837: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75838: LD_VAR 0 1
75842: PPUSH
75843: LD_STRING \
75845: PUSH
75846: LD_INT 0
75848: PUSH
75849: LD_INT 0
75851: PUSH
75852: LD_INT 0
75854: PUSH
75855: LD_INT 0
75857: PUSH
75858: LD_INT 0
75860: PUSH
75861: LD_INT 0
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: LIST
75870: LIST
75871: LIST
75872: PUSH
75873: LD_STRING E
75875: PUSH
75876: LD_INT 0
75878: PUSH
75879: LD_INT 0
75881: PUSH
75882: LD_VAR 0 3
75886: PUSH
75887: LD_INT 0
75889: PUSH
75890: LD_INT 0
75892: PUSH
75893: LD_INT 0
75895: PUSH
75896: EMPTY
75897: LIST
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: LIST
75903: LIST
75904: PUSH
75905: EMPTY
75906: LIST
75907: LIST
75908: PPUSH
75909: CALL_OW 447
// end ;
75913: LD_VAR 0 2
75917: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75918: LD_INT 0
75920: PPUSH
75921: PPUSH
75922: PPUSH
// tmp := [ ] ;
75923: LD_ADDR_VAR 0 5
75927: PUSH
75928: EMPTY
75929: ST_TO_ADDR
// for i in units do
75930: LD_ADDR_VAR 0 4
75934: PUSH
75935: LD_VAR 0 1
75939: PUSH
75940: FOR_IN
75941: IFFALSE 75979
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75943: LD_ADDR_VAR 0 5
75947: PUSH
75948: LD_VAR 0 5
75952: PPUSH
75953: LD_VAR 0 5
75957: PUSH
75958: LD_INT 1
75960: PLUS
75961: PPUSH
75962: LD_VAR 0 4
75966: PPUSH
75967: CALL_OW 256
75971: PPUSH
75972: CALL_OW 2
75976: ST_TO_ADDR
75977: GO 75940
75979: POP
75980: POP
// if not tmp then
75981: LD_VAR 0 5
75985: NOT
75986: IFFALSE 75990
// exit ;
75988: GO 76038
// if asc then
75990: LD_VAR 0 2
75994: IFFALSE 76018
// result := SortListByListAsc ( units , tmp ) else
75996: LD_ADDR_VAR 0 3
76000: PUSH
76001: LD_VAR 0 1
76005: PPUSH
76006: LD_VAR 0 5
76010: PPUSH
76011: CALL_OW 76
76015: ST_TO_ADDR
76016: GO 76038
// result := SortListByListDesc ( units , tmp ) ;
76018: LD_ADDR_VAR 0 3
76022: PUSH
76023: LD_VAR 0 1
76027: PPUSH
76028: LD_VAR 0 5
76032: PPUSH
76033: CALL_OW 77
76037: ST_TO_ADDR
// end ;
76038: LD_VAR 0 3
76042: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76043: LD_INT 0
76045: PPUSH
76046: PPUSH
// task := GetTaskList ( mech ) ;
76047: LD_ADDR_VAR 0 4
76051: PUSH
76052: LD_VAR 0 1
76056: PPUSH
76057: CALL_OW 437
76061: ST_TO_ADDR
// if not task then
76062: LD_VAR 0 4
76066: NOT
76067: IFFALSE 76071
// exit ;
76069: GO 76113
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76071: LD_ADDR_VAR 0 3
76075: PUSH
76076: LD_VAR 0 4
76080: PUSH
76081: LD_INT 1
76083: ARRAY
76084: PUSH
76085: LD_INT 1
76087: ARRAY
76088: PUSH
76089: LD_STRING r
76091: EQUAL
76092: PUSH
76093: LD_VAR 0 4
76097: PUSH
76098: LD_INT 1
76100: ARRAY
76101: PUSH
76102: LD_INT 4
76104: ARRAY
76105: PUSH
76106: LD_VAR 0 2
76110: EQUAL
76111: AND
76112: ST_TO_ADDR
// end ;
76113: LD_VAR 0 3
76117: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76118: LD_INT 0
76120: PPUSH
// SetDir ( unit , d ) ;
76121: LD_VAR 0 1
76125: PPUSH
76126: LD_VAR 0 4
76130: PPUSH
76131: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76135: LD_VAR 0 1
76139: PPUSH
76140: LD_VAR 0 2
76144: PPUSH
76145: LD_VAR 0 3
76149: PPUSH
76150: LD_VAR 0 5
76154: PPUSH
76155: CALL_OW 48
// end ;
76159: LD_VAR 0 6
76163: RET
// export function ToNaturalNumber ( number ) ; begin
76164: LD_INT 0
76166: PPUSH
// result := number div 1 ;
76167: LD_ADDR_VAR 0 2
76171: PUSH
76172: LD_VAR 0 1
76176: PUSH
76177: LD_INT 1
76179: DIV
76180: ST_TO_ADDR
// if number < 0 then
76181: LD_VAR 0 1
76185: PUSH
76186: LD_INT 0
76188: LESS
76189: IFFALSE 76199
// result := 0 ;
76191: LD_ADDR_VAR 0 2
76195: PUSH
76196: LD_INT 0
76198: ST_TO_ADDR
// end ;
76199: LD_VAR 0 2
76203: RET
// export function SortByClass ( units , class ) ; var un ; begin
76204: LD_INT 0
76206: PPUSH
76207: PPUSH
// if not units or not class then
76208: LD_VAR 0 1
76212: NOT
76213: PUSH
76214: LD_VAR 0 2
76218: NOT
76219: OR
76220: IFFALSE 76224
// exit ;
76222: GO 76319
// result := [ ] ;
76224: LD_ADDR_VAR 0 3
76228: PUSH
76229: EMPTY
76230: ST_TO_ADDR
// for un in units do
76231: LD_ADDR_VAR 0 4
76235: PUSH
76236: LD_VAR 0 1
76240: PUSH
76241: FOR_IN
76242: IFFALSE 76317
// if GetClass ( un ) = class then
76244: LD_VAR 0 4
76248: PPUSH
76249: CALL_OW 257
76253: PUSH
76254: LD_VAR 0 2
76258: EQUAL
76259: IFFALSE 76286
// result := Insert ( result , 1 , un ) else
76261: LD_ADDR_VAR 0 3
76265: PUSH
76266: LD_VAR 0 3
76270: PPUSH
76271: LD_INT 1
76273: PPUSH
76274: LD_VAR 0 4
76278: PPUSH
76279: CALL_OW 2
76283: ST_TO_ADDR
76284: GO 76315
// result := Replace ( result , result + 1 , un ) ;
76286: LD_ADDR_VAR 0 3
76290: PUSH
76291: LD_VAR 0 3
76295: PPUSH
76296: LD_VAR 0 3
76300: PUSH
76301: LD_INT 1
76303: PLUS
76304: PPUSH
76305: LD_VAR 0 4
76309: PPUSH
76310: CALL_OW 1
76314: ST_TO_ADDR
76315: GO 76241
76317: POP
76318: POP
// end ;
76319: LD_VAR 0 3
76323: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76324: LD_INT 0
76326: PPUSH
76327: PPUSH
76328: PPUSH
76329: PPUSH
76330: PPUSH
76331: PPUSH
76332: PPUSH
// result := [ ] ;
76333: LD_ADDR_VAR 0 4
76337: PUSH
76338: EMPTY
76339: ST_TO_ADDR
// if x - r < 0 then
76340: LD_VAR 0 1
76344: PUSH
76345: LD_VAR 0 3
76349: MINUS
76350: PUSH
76351: LD_INT 0
76353: LESS
76354: IFFALSE 76366
// min_x := 0 else
76356: LD_ADDR_VAR 0 8
76360: PUSH
76361: LD_INT 0
76363: ST_TO_ADDR
76364: GO 76382
// min_x := x - r ;
76366: LD_ADDR_VAR 0 8
76370: PUSH
76371: LD_VAR 0 1
76375: PUSH
76376: LD_VAR 0 3
76380: MINUS
76381: ST_TO_ADDR
// if y - r < 0 then
76382: LD_VAR 0 2
76386: PUSH
76387: LD_VAR 0 3
76391: MINUS
76392: PUSH
76393: LD_INT 0
76395: LESS
76396: IFFALSE 76408
// min_y := 0 else
76398: LD_ADDR_VAR 0 7
76402: PUSH
76403: LD_INT 0
76405: ST_TO_ADDR
76406: GO 76424
// min_y := y - r ;
76408: LD_ADDR_VAR 0 7
76412: PUSH
76413: LD_VAR 0 2
76417: PUSH
76418: LD_VAR 0 3
76422: MINUS
76423: ST_TO_ADDR
// max_x := x + r ;
76424: LD_ADDR_VAR 0 9
76428: PUSH
76429: LD_VAR 0 1
76433: PUSH
76434: LD_VAR 0 3
76438: PLUS
76439: ST_TO_ADDR
// max_y := y + r ;
76440: LD_ADDR_VAR 0 10
76444: PUSH
76445: LD_VAR 0 2
76449: PUSH
76450: LD_VAR 0 3
76454: PLUS
76455: ST_TO_ADDR
// for _x = min_x to max_x do
76456: LD_ADDR_VAR 0 5
76460: PUSH
76461: DOUBLE
76462: LD_VAR 0 8
76466: DEC
76467: ST_TO_ADDR
76468: LD_VAR 0 9
76472: PUSH
76473: FOR_TO
76474: IFFALSE 76575
// for _y = min_y to max_y do
76476: LD_ADDR_VAR 0 6
76480: PUSH
76481: DOUBLE
76482: LD_VAR 0 7
76486: DEC
76487: ST_TO_ADDR
76488: LD_VAR 0 10
76492: PUSH
76493: FOR_TO
76494: IFFALSE 76571
// begin if not ValidHex ( _x , _y ) then
76496: LD_VAR 0 5
76500: PPUSH
76501: LD_VAR 0 6
76505: PPUSH
76506: CALL_OW 488
76510: NOT
76511: IFFALSE 76515
// continue ;
76513: GO 76493
// if GetResourceTypeXY ( _x , _y ) then
76515: LD_VAR 0 5
76519: PPUSH
76520: LD_VAR 0 6
76524: PPUSH
76525: CALL_OW 283
76529: IFFALSE 76569
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76531: LD_ADDR_VAR 0 4
76535: PUSH
76536: LD_VAR 0 4
76540: PPUSH
76541: LD_VAR 0 4
76545: PUSH
76546: LD_INT 1
76548: PLUS
76549: PPUSH
76550: LD_VAR 0 5
76554: PUSH
76555: LD_VAR 0 6
76559: PUSH
76560: EMPTY
76561: LIST
76562: LIST
76563: PPUSH
76564: CALL_OW 1
76568: ST_TO_ADDR
// end ;
76569: GO 76493
76571: POP
76572: POP
76573: GO 76473
76575: POP
76576: POP
// end ;
76577: LD_VAR 0 4
76581: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
76582: LD_INT 0
76584: PPUSH
76585: PPUSH
76586: PPUSH
76587: PPUSH
76588: PPUSH
76589: PPUSH
// if not units then
76590: LD_VAR 0 1
76594: NOT
76595: IFFALSE 76599
// exit ;
76597: GO 77000
// result := UnitFilter ( units , [ f_ok ] ) ;
76599: LD_ADDR_VAR 0 3
76603: PUSH
76604: LD_VAR 0 1
76608: PPUSH
76609: LD_INT 50
76611: PUSH
76612: EMPTY
76613: LIST
76614: PPUSH
76615: CALL_OW 72
76619: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76620: LD_ADDR_VAR 0 7
76624: PUSH
76625: LD_VAR 0 1
76629: PUSH
76630: LD_INT 1
76632: ARRAY
76633: PPUSH
76634: CALL_OW 255
76638: ST_TO_ADDR
// if not result then
76639: LD_VAR 0 3
76643: NOT
76644: IFFALSE 76648
// exit ;
76646: GO 77000
// for i in result do
76648: LD_ADDR_VAR 0 4
76652: PUSH
76653: LD_VAR 0 3
76657: PUSH
76658: FOR_IN
76659: IFFALSE 76998
// begin tag := GetTag ( i ) + 1 ;
76661: LD_ADDR_VAR 0 8
76665: PUSH
76666: LD_VAR 0 4
76670: PPUSH
76671: CALL_OW 110
76675: PUSH
76676: LD_INT 1
76678: PLUS
76679: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76680: LD_ADDR_VAR 0 6
76684: PUSH
76685: LD_VAR 0 4
76689: PPUSH
76690: CALL_OW 250
76694: PPUSH
76695: LD_VAR 0 4
76699: PPUSH
76700: CALL_OW 251
76704: PPUSH
76705: LD_INT 6
76707: PPUSH
76708: CALL 76324 0 3
76712: ST_TO_ADDR
// if cr then
76713: LD_VAR 0 6
76717: IFFALSE 76756
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76719: LD_VAR 0 4
76723: PPUSH
76724: LD_VAR 0 6
76728: PUSH
76729: LD_INT 1
76731: ARRAY
76732: PUSH
76733: LD_INT 1
76735: ARRAY
76736: PPUSH
76737: LD_VAR 0 6
76741: PUSH
76742: LD_INT 1
76744: ARRAY
76745: PUSH
76746: LD_INT 2
76748: ARRAY
76749: PPUSH
76750: CALL_OW 116
76754: GO 76996
// if path > tag then
76756: LD_VAR 0 2
76760: PUSH
76761: LD_VAR 0 8
76765: GREATER
76766: IFFALSE 76944
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
76768: LD_ADDR_VAR 0 5
76772: PUSH
76773: LD_INT 81
76775: PUSH
76776: LD_VAR 0 7
76780: PUSH
76781: EMPTY
76782: LIST
76783: LIST
76784: PUSH
76785: LD_INT 91
76787: PUSH
76788: LD_VAR 0 4
76792: PUSH
76793: LD_INT 12
76795: PUSH
76796: EMPTY
76797: LIST
76798: LIST
76799: LIST
76800: PUSH
76801: EMPTY
76802: LIST
76803: LIST
76804: PPUSH
76805: CALL_OW 69
76809: ST_TO_ADDR
// if enemy then
76810: LD_VAR 0 5
76814: IFFALSE 76842
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76816: LD_VAR 0 4
76820: PPUSH
76821: LD_VAR 0 5
76825: PPUSH
76826: LD_VAR 0 4
76830: PPUSH
76831: CALL_OW 74
76835: PPUSH
76836: CALL_OW 115
76840: GO 76942
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76842: LD_VAR 0 4
76846: PPUSH
76847: LD_VAR 0 2
76851: PUSH
76852: LD_VAR 0 8
76856: ARRAY
76857: PUSH
76858: LD_INT 1
76860: ARRAY
76861: PPUSH
76862: LD_VAR 0 2
76866: PUSH
76867: LD_VAR 0 8
76871: ARRAY
76872: PUSH
76873: LD_INT 2
76875: ARRAY
76876: PPUSH
76877: CALL_OW 297
76881: PUSH
76882: LD_INT 6
76884: GREATER
76885: IFFALSE 76928
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76887: LD_VAR 0 4
76891: PPUSH
76892: LD_VAR 0 2
76896: PUSH
76897: LD_VAR 0 8
76901: ARRAY
76902: PUSH
76903: LD_INT 1
76905: ARRAY
76906: PPUSH
76907: LD_VAR 0 2
76911: PUSH
76912: LD_VAR 0 8
76916: ARRAY
76917: PUSH
76918: LD_INT 2
76920: ARRAY
76921: PPUSH
76922: CALL_OW 114
76926: GO 76942
// SetTag ( i , tag ) ;
76928: LD_VAR 0 4
76932: PPUSH
76933: LD_VAR 0 8
76937: PPUSH
76938: CALL_OW 109
// end else
76942: GO 76996
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76944: LD_ADDR_VAR 0 5
76948: PUSH
76949: LD_INT 81
76951: PUSH
76952: LD_VAR 0 7
76956: PUSH
76957: EMPTY
76958: LIST
76959: LIST
76960: PPUSH
76961: CALL_OW 69
76965: ST_TO_ADDR
// if enemy then
76966: LD_VAR 0 5
76970: IFFALSE 76996
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76972: LD_VAR 0 4
76976: PPUSH
76977: LD_VAR 0 5
76981: PPUSH
76982: LD_VAR 0 4
76986: PPUSH
76987: CALL_OW 74
76991: PPUSH
76992: CALL_OW 115
// end ; end ;
76996: GO 76658
76998: POP
76999: POP
// end ; end_of_file
77000: LD_VAR 0 3
77004: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77005: LD_VAR 0 1
77009: PUSH
77010: LD_INT 200
77012: DOUBLE
77013: GREATEREQUAL
77014: IFFALSE 77022
77016: LD_INT 299
77018: DOUBLE
77019: LESSEQUAL
77020: IFTRUE 77024
77022: GO 77056
77024: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77025: LD_VAR 0 1
77029: PPUSH
77030: LD_VAR 0 2
77034: PPUSH
77035: LD_VAR 0 3
77039: PPUSH
77040: LD_VAR 0 4
77044: PPUSH
77045: LD_VAR 0 5
77049: PPUSH
77050: CALL 33567 0 5
77054: GO 77133
77056: LD_INT 300
77058: DOUBLE
77059: GREATEREQUAL
77060: IFFALSE 77068
77062: LD_INT 399
77064: DOUBLE
77065: LESSEQUAL
77066: IFTRUE 77070
77068: GO 77132
77070: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77071: LD_VAR 0 1
77075: PPUSH
77076: LD_VAR 0 2
77080: PPUSH
77081: LD_VAR 0 3
77085: PPUSH
77086: LD_VAR 0 4
77090: PPUSH
77091: LD_VAR 0 5
77095: PPUSH
77096: LD_VAR 0 6
77100: PPUSH
77101: LD_VAR 0 7
77105: PPUSH
77106: LD_VAR 0 8
77110: PPUSH
77111: LD_VAR 0 9
77115: PPUSH
77116: LD_VAR 0 10
77120: PPUSH
77121: LD_VAR 0 11
77125: PPUSH
77126: CALL 31455 0 11
77130: GO 77133
77132: POP
// end ;
77133: PPOPN 11
77135: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77136: LD_VAR 0 1
77140: PPUSH
77141: LD_VAR 0 2
77145: PPUSH
77146: LD_VAR 0 3
77150: PPUSH
77151: LD_VAR 0 4
77155: PPUSH
77156: LD_VAR 0 5
77160: PPUSH
77161: CALL 33549 0 5
// end ; end_of_file
77165: PPOPN 5
77167: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77168: LD_VAR 0 1
77172: PPUSH
77173: LD_VAR 0 2
77177: PPUSH
77178: LD_VAR 0 3
77182: PPUSH
77183: LD_VAR 0 4
77187: PPUSH
77188: LD_VAR 0 5
77192: PPUSH
77193: LD_VAR 0 6
77197: PPUSH
77198: CALL 20263 0 6
// end ;
77202: PPOPN 6
77204: END
