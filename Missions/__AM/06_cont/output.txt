// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 ] [ Difficulty ] ;
 177: LD_ADDR_EXP 48
 181: PUSH
 182: LD_INT 3
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: LD_INT 6
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: LIST
 195: PUSH
 196: LD_OWVAR 67
 200: ARRAY
 201: ST_TO_ADDR
// sendedConvoys = 0 ;
 202: LD_ADDR_EXP 39
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// tamedApemans = 0 ;
 210: LD_ADDR_EXP 32
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ignoreTarget := [ ] ;
 218: LD_ADDR_EXP 45
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// arrivals := [ ] ;
 225: LD_ADDR_EXP 46
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// unitLost = 0 ;
 232: LD_ADDR_EXP 30
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 240: LD_ADDR_EXP 31
 244: PUSH
 245: EMPTY
 246: ST_TO_ADDR
// russianTanks = [ ] ;
 247: LD_ADDR_EXP 36
 251: PUSH
 252: EMPTY
 253: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 254: LD_ADDR_EXP 37
 258: PUSH
 259: EMPTY
 260: ST_TO_ADDR
// disableHealAI = 0 ;
 261: LD_ADDR_EXP 33
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// strings = [ ] ;
 269: LD_ADDR_EXP 27
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 276: LD_INT 4
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: CALL_OW 343
// PrepareDifficulty ;
 286: CALL 6634 0 0
// CreateNature ;
 290: CALL 23921 0 0
// PrepareRussian ;
 294: CALL 5857 0 0
// PrepareVehicles ;
 298: CALL 1629 0 0
// PrepareHeroes ;
 302: CALL 594 0 0
// PrepareOthers ;
 306: CALL 2050 0 0
// PreparePlayerApemans ;
 310: CALL 2192 0 0
// end ;
 314: END
// every 0 0$1 trigger debugMode do var i ;
 315: LD_EXP 42
 319: IFFALSE 546
 321: GO 323
 323: DISABLE
 324: LD_INT 0
 326: PPUSH
// begin enable ;
 327: ENABLE
// fogoff ( true ) ;
 328: LD_INT 1
 330: PPUSH
 331: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 21
 352: PUSH
 353: LD_INT 1
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 386
// SetLives ( i , 1000 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: LD_INT 1000
 379: PPUSH
 380: CALL_OW 234
 384: GO 369
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 30
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: PUSH
 422: FOR_IN
 423: IFFALSE 447
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 425: LD_VAR 0 1
 429: PPUSH
 430: CALL_OW 274
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_INT 9999
 440: PPUSH
 441: CALL_OW 277
 445: GO 422
 447: POP
 448: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 449: LD_ADDR_VAR 0 1
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// if IsSelected ( rudepo ) then
 510: LD_INT 2
 512: PPUSH
 513: CALL_OW 306
 517: IFFALSE 527
// your_side = 3 ;
 519: LD_ADDR_OWVAR 2
 523: PUSH
 524: LD_INT 3
 526: ST_TO_ADDR
// if IsSelected ( JMM ) then
 527: LD_EXP 1
 531: PPUSH
 532: CALL_OW 306
 536: IFFALSE 546
// your_side = 1 ;
 538: LD_ADDR_OWVAR 2
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// end ;
 546: PPOPN 1
 548: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 34
 561: PUSH
 562: LD_INT 12
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: LD_INT 3
 580: GREATEREQUAL
 581: IFFALSE 593
 583: GO 585
 585: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 586: LD_STRING ACH_FULLCARGO
 588: PPUSH
 589: CALL_OW 543
 593: END
// export function PrepareHeroes ; var veh ; begin
 594: LD_INT 0
 596: PPUSH
 597: PPUSH
// uc_side = 1 ;
 598: LD_ADDR_OWVAR 20
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// uc_nation = 1 ;
 606: LD_ADDR_OWVAR 21
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 614: LD_ADDR_EXP 1
 618: PUSH
 619: LD_STRING JMM
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: LD_EXP 44
 629: PPUSH
 630: CALL 39116 0 3
 634: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 635: LD_ADDR_EXP 14
 639: PUSH
 640: LD_STRING Harisson
 642: PPUSH
 643: LD_INT 0
 645: PPUSH
 646: LD_STRING 
 648: PPUSH
 649: CALL 39116 0 3
 653: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING DeltaDoctor
 661: PPUSH
 662: CALL_OW 34
 666: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 667: LD_ADDR_VAR 0 2
 671: PUSH
 672: LD_INT 22
 674: PUSH
 675: LD_INT 1
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: PUSH
 682: LD_INT 21
 684: PUSH
 685: LD_INT 2
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: LD_INT 58
 694: PUSH
 695: EMPTY
 696: LIST
 697: PUSH
 698: EMPTY
 699: LIST
 700: LIST
 701: LIST
 702: PPUSH
 703: CALL_OW 69
 707: ST_TO_ADDR
// if veh > 0 then
 708: LD_VAR 0 2
 712: PUSH
 713: LD_INT 0
 715: GREATER
 716: IFFALSE 738
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_VAR 0 2
 727: PUSH
 728: LD_INT 1
 730: ARRAY
 731: PPUSH
 732: CALL_OW 52
// end else
 736: GO 753
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_INT 2
 745: PPUSH
 746: LD_INT 0
 748: PPUSH
 749: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 753: LD_STRING LisaIn06
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 30
 763: PUSH
 764: LD_INT 1
 766: EQUAL
 767: IFFALSE 876
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 769: LD_ADDR_VAR 0 2
 773: PUSH
 774: LD_INT 22
 776: PUSH
 777: LD_INT 1
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 21
 786: PUSH
 787: LD_INT 2
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 58
 796: PUSH
 797: EMPTY
 798: LIST
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PPUSH
 805: CALL_OW 69
 809: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 810: LD_ADDR_EXP 2
 814: PUSH
 815: LD_STRING Lisa
 817: PPUSH
 818: LD_INT 1
 820: PPUSH
 821: LD_EXP 44
 825: PPUSH
 826: CALL 39116 0 3
 830: ST_TO_ADDR
// if veh > 0 then
 831: LD_VAR 0 2
 835: PUSH
 836: LD_INT 0
 838: GREATER
 839: IFFALSE 861
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 841: LD_EXP 2
 845: PPUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: PPUSH
 855: CALL_OW 52
// end else
 859: GO 876
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 861: LD_EXP 2
 865: PPUSH
 866: LD_INT 2
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 876: LD_STRING BobbyIn06
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL_OW 30
 886: PUSH
 887: LD_INT 1
 889: EQUAL
 890: IFFALSE 999
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: LD_INT 22
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 21
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: LD_INT 58
 919: PUSH
 920: EMPTY
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PPUSH
 928: CALL_OW 69
 932: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 933: LD_ADDR_EXP 3
 937: PUSH
 938: LD_STRING Bobby
 940: PPUSH
 941: LD_INT 1
 943: PPUSH
 944: LD_EXP 44
 948: PPUSH
 949: CALL 39116 0 3
 953: ST_TO_ADDR
// if veh > 0 then
 954: LD_VAR 0 2
 958: PUSH
 959: LD_INT 0
 961: GREATER
 962: IFFALSE 984
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 964: LD_EXP 3
 968: PPUSH
 969: LD_VAR 0 2
 973: PUSH
 974: LD_INT 1
 976: ARRAY
 977: PPUSH
 978: CALL_OW 52
// end else
 982: GO 999
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 984: LD_EXP 3
 988: PPUSH
 989: LD_INT 2
 991: PPUSH
 992: LD_INT 0
 994: PPUSH
 995: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 999: LD_STRING CyrusIn06
1001: PPUSH
1002: LD_INT 0
1004: PPUSH
1005: CALL_OW 30
1009: PUSH
1010: LD_INT 1
1012: EQUAL
1013: IFFALSE 1122
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1015: LD_ADDR_VAR 0 2
1019: PUSH
1020: LD_INT 22
1022: PUSH
1023: LD_INT 1
1025: PUSH
1026: EMPTY
1027: LIST
1028: LIST
1029: PUSH
1030: LD_INT 21
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: PUSH
1040: LD_INT 58
1042: PUSH
1043: EMPTY
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: PPUSH
1051: CALL_OW 69
1055: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1056: LD_ADDR_EXP 4
1060: PUSH
1061: LD_STRING Cyrus
1063: PPUSH
1064: LD_INT 1
1066: PPUSH
1067: LD_EXP 44
1071: PPUSH
1072: CALL 39116 0 3
1076: ST_TO_ADDR
// if veh > 0 then
1077: LD_VAR 0 2
1081: PUSH
1082: LD_INT 0
1084: GREATER
1085: IFFALSE 1107
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1087: LD_EXP 4
1091: PPUSH
1092: LD_VAR 0 2
1096: PUSH
1097: LD_INT 1
1099: ARRAY
1100: PPUSH
1101: CALL_OW 52
// end else
1105: GO 1122
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1107: LD_EXP 4
1111: PPUSH
1112: LD_INT 2
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1122: LD_STRING FrankIn06
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL_OW 30
1132: PUSH
1133: LD_INT 1
1135: EQUAL
1136: IFFALSE 1245
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1138: LD_ADDR_VAR 0 2
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 21
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 58
1165: PUSH
1166: EMPTY
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: PPUSH
1174: CALL_OW 69
1178: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
1179: LD_ADDR_EXP 5
1183: PUSH
1184: LD_STRING Frank
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: LD_EXP 44
1194: PPUSH
1195: CALL 39116 0 3
1199: ST_TO_ADDR
// if veh > 0 then
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 0
1207: GREATER
1208: IFFALSE 1230
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1210: LD_EXP 5
1214: PPUSH
1215: LD_VAR 0 2
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 52
// end else
1228: GO 1245
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1230: LD_EXP 5
1234: PPUSH
1235: LD_INT 2
1237: PPUSH
1238: LD_INT 0
1240: PPUSH
1241: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1245: LD_STRING BrownIn06
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: CALL_OW 30
1255: PUSH
1256: LD_INT 1
1258: EQUAL
1259: IFFALSE 1368
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_INT 22
1268: PUSH
1269: LD_INT 1
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: LD_INT 21
1278: PUSH
1279: LD_INT 2
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: LD_INT 58
1288: PUSH
1289: EMPTY
1290: LIST
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: LIST
1296: PPUSH
1297: CALL_OW 69
1301: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1302: LD_ADDR_EXP 6
1306: PUSH
1307: LD_STRING Brown
1309: PPUSH
1310: LD_INT 1
1312: PPUSH
1313: LD_EXP 44
1317: PPUSH
1318: CALL 39116 0 3
1322: ST_TO_ADDR
// if veh > 0 then
1323: LD_VAR 0 2
1327: PUSH
1328: LD_INT 0
1330: GREATER
1331: IFFALSE 1353
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1333: LD_EXP 6
1337: PPUSH
1338: LD_VAR 0 2
1342: PUSH
1343: LD_INT 1
1345: ARRAY
1346: PPUSH
1347: CALL_OW 52
// end else
1351: GO 1368
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1353: LD_EXP 6
1357: PPUSH
1358: LD_INT 2
1360: PPUSH
1361: LD_INT 0
1363: PPUSH
1364: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1368: LD_STRING DonaldsonIn06
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 30
1378: PUSH
1379: LD_INT 1
1381: EQUAL
1382: IFFALSE 1491
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: LD_INT 22
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 2
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: LD_INT 58
1411: PUSH
1412: EMPTY
1413: LIST
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: PPUSH
1420: CALL_OW 69
1424: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1425: LD_ADDR_EXP 7
1429: PUSH
1430: LD_STRING Donaldson
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: LD_EXP 44
1440: PPUSH
1441: CALL 39116 0 3
1445: ST_TO_ADDR
// if veh > 0 then
1446: LD_VAR 0 2
1450: PUSH
1451: LD_INT 0
1453: GREATER
1454: IFFALSE 1476
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1456: LD_EXP 7
1460: PPUSH
1461: LD_VAR 0 2
1465: PUSH
1466: LD_INT 1
1468: ARRAY
1469: PPUSH
1470: CALL_OW 52
// end else
1474: GO 1491
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1476: LD_EXP 7
1480: PPUSH
1481: LD_INT 2
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1491: LD_STRING GladstoneIn06
1493: PPUSH
1494: LD_INT 0
1496: PPUSH
1497: CALL_OW 30
1501: PUSH
1502: LD_INT 1
1504: EQUAL
1505: IFFALSE 1614
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 22
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 21
1524: PUSH
1525: LD_INT 2
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 58
1534: PUSH
1535: EMPTY
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: PPUSH
1543: CALL_OW 69
1547: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
1548: LD_ADDR_EXP 8
1552: PUSH
1553: LD_STRING Gladstone
1555: PPUSH
1556: LD_INT 1
1558: PPUSH
1559: LD_EXP 44
1563: PPUSH
1564: CALL 39116 0 3
1568: ST_TO_ADDR
// if veh > 0 then
1569: LD_VAR 0 2
1573: PUSH
1574: LD_INT 0
1576: GREATER
1577: IFFALSE 1599
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1579: LD_EXP 8
1583: PPUSH
1584: LD_VAR 0 2
1588: PUSH
1589: LD_INT 1
1591: ARRAY
1592: PPUSH
1593: CALL_OW 52
// end else
1597: GO 1614
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1599: LD_EXP 8
1603: PPUSH
1604: LD_INT 2
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1614: LD_INT 66
1616: PPUSH
1617: LD_INT 4
1619: PPUSH
1620: CALL_OW 86
// end ;
1624: LD_VAR 0 1
1628: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1629: LD_INT 0
1631: PPUSH
1632: PPUSH
1633: PPUSH
1634: PPUSH
1635: PPUSH
1636: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1637: LD_ADDR_VAR 0 5
1641: PUSH
1642: LD_STRING 06_VehiclesIn06_1
1644: PPUSH
1645: EMPTY
1646: PPUSH
1647: CALL_OW 30
1651: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1652: LD_ADDR_EXP 40
1656: PUSH
1657: LD_STRING 06_ResourcesInCargo06_1
1659: PPUSH
1660: EMPTY
1661: PPUSH
1662: CALL_OW 30
1666: ST_TO_ADDR
// cargoList = [ ] ;
1667: LD_ADDR_VAR 0 6
1671: PUSH
1672: EMPTY
1673: ST_TO_ADDR
// uc_side = 1 ;
1674: LD_ADDR_OWVAR 20
1678: PUSH
1679: LD_INT 1
1681: ST_TO_ADDR
// if vehicles > 0 then
1682: LD_VAR 0 5
1686: PUSH
1687: LD_INT 0
1689: GREATER
1690: IFFALSE 2045
// begin for i := 1 to vehicles do
1692: LD_ADDR_VAR 0 2
1696: PUSH
1697: DOUBLE
1698: LD_INT 1
1700: DEC
1701: ST_TO_ADDR
1702: LD_VAR 0 5
1706: PUSH
1707: FOR_TO
1708: IFFALSE 1857
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1710: LD_ADDR_OWVAR 21
1714: PUSH
1715: LD_VAR 0 5
1719: PUSH
1720: LD_VAR 0 2
1724: ARRAY
1725: PUSH
1726: LD_INT 1
1728: ARRAY
1729: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1730: LD_ADDR_OWVAR 37
1734: PUSH
1735: LD_VAR 0 5
1739: PUSH
1740: LD_VAR 0 2
1744: ARRAY
1745: PUSH
1746: LD_INT 2
1748: ARRAY
1749: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1750: LD_ADDR_OWVAR 39
1754: PUSH
1755: LD_VAR 0 5
1759: PUSH
1760: LD_VAR 0 2
1764: ARRAY
1765: PUSH
1766: LD_INT 3
1768: ARRAY
1769: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1770: LD_ADDR_OWVAR 38
1774: PUSH
1775: LD_VAR 0 5
1779: PUSH
1780: LD_VAR 0 2
1784: ARRAY
1785: PUSH
1786: LD_INT 4
1788: ARRAY
1789: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1790: LD_ADDR_OWVAR 40
1794: PUSH
1795: LD_VAR 0 5
1799: PUSH
1800: LD_VAR 0 2
1804: ARRAY
1805: PUSH
1806: LD_INT 5
1808: ARRAY
1809: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1810: LD_ADDR_OWVAR 41
1814: PUSH
1815: LD_INT 40
1817: ST_TO_ADDR
// veh = CreateVehicle ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: CALL_OW 45
1827: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1828: LD_VAR 0 4
1832: PPUSH
1833: LD_INT 3
1835: PPUSH
1836: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1840: LD_VAR 0 4
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: LD_INT 0
1850: PPUSH
1851: CALL_OW 49
// end ;
1855: GO 1707
1857: POP
1858: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1859: LD_ADDR_VAR 0 6
1863: PUSH
1864: LD_INT 22
1866: PUSH
1867: LD_INT 1
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 21
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 34
1886: PUSH
1887: LD_INT 12
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PPUSH
1899: CALL_OW 69
1903: ST_TO_ADDR
// if cargoList > 0 then
1904: LD_VAR 0 6
1908: PUSH
1909: LD_INT 0
1911: GREATER
1912: IFFALSE 2045
// for i = 1 to cargoList do
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: DOUBLE
1920: LD_INT 1
1922: DEC
1923: ST_TO_ADDR
1924: LD_VAR 0 6
1928: PUSH
1929: FOR_TO
1930: IFFALSE 2043
// begin if resources > 0 then
1932: LD_EXP 40
1936: PUSH
1937: LD_INT 0
1939: GREATER
1940: IFFALSE 2041
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1942: LD_VAR 0 6
1946: PUSH
1947: LD_VAR 0 2
1951: ARRAY
1952: PPUSH
1953: LD_INT 1
1955: PPUSH
1956: LD_EXP 40
1960: PUSH
1961: LD_VAR 0 2
1965: ARRAY
1966: PUSH
1967: LD_INT 1
1969: ARRAY
1970: PPUSH
1971: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1975: LD_VAR 0 6
1979: PUSH
1980: LD_VAR 0 2
1984: ARRAY
1985: PPUSH
1986: LD_INT 2
1988: PPUSH
1989: LD_EXP 40
1993: PUSH
1994: LD_VAR 0 2
1998: ARRAY
1999: PUSH
2000: LD_INT 2
2002: ARRAY
2003: PPUSH
2004: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
2008: LD_VAR 0 6
2012: PUSH
2013: LD_VAR 0 2
2017: ARRAY
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_EXP 40
2026: PUSH
2027: LD_VAR 0 2
2031: ARRAY
2032: PUSH
2033: LD_INT 3
2035: ARRAY
2036: PPUSH
2037: CALL_OW 291
// end ; end ;
2041: GO 1929
2043: POP
2044: POP
// end ; end ;
2045: LD_VAR 0 1
2049: RET
// export function PrepareOthers ; var i , veh ; begin
2050: LD_INT 0
2052: PPUSH
2053: PPUSH
2054: PPUSH
// uc_side = 1 ;
2055: LD_ADDR_OWVAR 20
2059: PUSH
2060: LD_INT 1
2062: ST_TO_ADDR
// uc_nation = 1 ;
2063: LD_ADDR_OWVAR 21
2067: PUSH
2068: LD_INT 1
2070: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2071: LD_ADDR_EXP 11
2075: PUSH
2076: LD_STRING OthersIn06
2078: PPUSH
2079: CALL_OW 31
2083: ST_TO_ADDR
// for i in others do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: LD_EXP 11
2093: PUSH
2094: FOR_IN
2095: IFFALSE 2185
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2097: LD_ADDR_VAR 0 3
2101: PUSH
2102: LD_INT 22
2104: PUSH
2105: LD_INT 1
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 21
2114: PUSH
2115: LD_INT 2
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 58
2124: PUSH
2125: EMPTY
2126: LIST
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL_OW 69
2137: ST_TO_ADDR
// if veh > 0 then
2138: LD_VAR 0 3
2142: PUSH
2143: LD_INT 0
2145: GREATER
2146: IFFALSE 2168
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2148: LD_VAR 0 2
2152: PPUSH
2153: LD_VAR 0 3
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: CALL_OW 52
// end else
2166: GO 2183
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2168: LD_VAR 0 2
2172: PPUSH
2173: LD_INT 2
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 49
// end ; end ;
2183: GO 2094
2185: POP
2186: POP
// end ;
2187: LD_VAR 0 1
2191: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2192: LD_INT 0
2194: PPUSH
2195: PPUSH
2196: PPUSH
// uc_side = 1 ;
2197: LD_ADDR_OWVAR 20
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// uc_nation = 0 ;
2205: LD_ADDR_OWVAR 21
2209: PUSH
2210: LD_INT 0
2212: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2213: LD_ADDR_EXP 12
2217: PUSH
2218: LD_STRING ApeIn06
2220: PPUSH
2221: CALL_OW 31
2225: ST_TO_ADDR
// for i in ape do
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: LD_EXP 12
2235: PUSH
2236: FOR_IN
2237: IFFALSE 2256
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2239: LD_VAR 0 2
2243: PPUSH
2244: LD_INT 2
2246: PPUSH
2247: LD_INT 0
2249: PPUSH
2250: CALL_OW 49
2254: GO 2236
2256: POP
2257: POP
// end ;
2258: LD_VAR 0 1
2262: RET
// export function PrepareDenis ; var xy , i ; begin
2263: LD_INT 0
2265: PPUSH
2266: PPUSH
2267: PPUSH
// uc_side = 4 ;
2268: LD_ADDR_OWVAR 20
2272: PUSH
2273: LD_INT 4
2275: ST_TO_ADDR
// uc_nation = 1 ;
2276: LD_ADDR_OWVAR 21
2280: PUSH
2281: LD_INT 1
2283: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2284: LD_ADDR_VAR 0 2
2288: PUSH
2289: LD_INT 63
2291: PUSH
2292: LD_INT 1
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: PUSH
2299: LD_INT 70
2301: PUSH
2302: LD_INT 1
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PUSH
2309: LD_INT 83
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 16
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 27
2331: PUSH
2332: LD_INT 1
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: PUSH
2339: LD_INT 38
2341: PUSH
2342: LD_INT 1
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 5
2351: PUSH
2352: LD_INT 1
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 54
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2379: LD_ADDR_EXP 9
2383: PUSH
2384: LD_STRING Denis
2386: PPUSH
2387: LD_INT 1
2389: PPUSH
2390: LD_EXP 44
2394: PPUSH
2395: CALL 39116 0 3
2399: ST_TO_ADDR
// for i = 1 to xy do
2400: LD_ADDR_VAR 0 3
2404: PUSH
2405: DOUBLE
2406: LD_INT 1
2408: DEC
2409: ST_TO_ADDR
2410: LD_VAR 0 2
2414: PUSH
2415: FOR_TO
2416: IFFALSE 2515
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2418: LD_VAR 0 2
2422: PUSH
2423: LD_VAR 0 3
2427: ARRAY
2428: PUSH
2429: LD_INT 1
2431: ARRAY
2432: PPUSH
2433: LD_VAR 0 2
2437: PUSH
2438: LD_VAR 0 3
2442: ARRAY
2443: PUSH
2444: LD_INT 2
2446: ARRAY
2447: PPUSH
2448: CALL_OW 428
2452: PUSH
2453: LD_INT 0
2455: EQUAL
2456: IFFALSE 2513
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2458: LD_EXP 9
2462: PPUSH
2463: LD_VAR 0 2
2467: PUSH
2468: LD_VAR 0 3
2472: ARRAY
2473: PUSH
2474: LD_INT 1
2476: ARRAY
2477: PPUSH
2478: LD_VAR 0 2
2482: PUSH
2483: LD_VAR 0 3
2487: ARRAY
2488: PUSH
2489: LD_INT 2
2491: ARRAY
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 48
// if IsPlaced ( Denis ) then
2500: LD_EXP 9
2504: PPUSH
2505: CALL_OW 305
2509: IFFALSE 2513
// break ;
2511: GO 2515
// end ;
2513: GO 2415
2515: POP
2516: POP
// SetClass ( Denis , 4 ) ;
2517: LD_EXP 9
2521: PPUSH
2522: LD_INT 4
2524: PPUSH
2525: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2529: LD_EXP 9
2533: PPUSH
2534: LD_INT 750
2536: PPUSH
2537: CALL_OW 234
// end ;
2541: LD_VAR 0 1
2545: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2546: LD_INT 0
2548: PPUSH
2549: PPUSH
2550: PPUSH
2551: PPUSH
2552: PPUSH
// area := HarrisonSupportArea ;
2553: LD_ADDR_VAR 0 4
2557: PUSH
2558: LD_INT 3
2560: ST_TO_ADDR
// dir := 2 ;
2561: LD_ADDR_VAR 0 5
2565: PUSH
2566: LD_INT 2
2568: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2569: LD_VAR 0 4
2573: PPUSH
2574: LD_INT 21
2576: PUSH
2577: LD_INT 3
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PPUSH
2584: CALL_OW 70
2588: IFFALSE 2606
// begin area := HarrisonSupportArea2 ;
2590: LD_ADDR_VAR 0 4
2594: PUSH
2595: LD_INT 31
2597: ST_TO_ADDR
// dir := 1 ;
2598: LD_ADDR_VAR 0 5
2602: PUSH
2603: LD_INT 1
2605: ST_TO_ADDR
// end ; uc_side = 1 ;
2606: LD_ADDR_OWVAR 20
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// uc_nation = 1 ;
2614: LD_ADDR_OWVAR 21
2618: PUSH
2619: LD_INT 1
2621: ST_TO_ADDR
// vc_engine = 1 ;
2622: LD_ADDR_OWVAR 39
2626: PUSH
2627: LD_INT 1
2629: ST_TO_ADDR
// vc_control = 1 ;
2630: LD_ADDR_OWVAR 38
2634: PUSH
2635: LD_INT 1
2637: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2638: LD_ADDR_OWVAR 40
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: LD_INT 2
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = 2 ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh = CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := 2 ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2825: LD_ADDR_EXP 17
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 17
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine = 1 ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control = 1 ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 3
2872: ST_TO_ADDR
// vc_chassis = 2 ;
2873: LD_ADDR_OWVAR 37
2877: PUSH
2878: LD_INT 2
2880: ST_TO_ADDR
// veh = CreateVehicle ;
2881: LD_ADDR_VAR 0 3
2885: PUSH
2886: CALL_OW 45
2890: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2891: LD_VAR 0 3
2895: PPUSH
2896: LD_VAR 0 5
2900: PPUSH
2901: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2905: LD_VAR 0 3
2909: PPUSH
2910: LD_VAR 0 4
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2922: LD_VAR 0 3
2926: PPUSH
2927: LD_INT 50
2929: PPUSH
2930: CALL_OW 240
// hc_class := 1 ;
2934: LD_ADDR_OWVAR 28
2938: PUSH
2939: LD_INT 1
2941: ST_TO_ADDR
// hc_sex := sex_female ;
2942: LD_ADDR_OWVAR 27
2946: PUSH
2947: LD_INT 2
2949: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2950: LD_ADDR_OWVAR 33
2954: PUSH
2955: LD_STRING SecondCharsGal
2957: ST_TO_ADDR
// hc_face_number := 45 ;
2958: LD_ADDR_OWVAR 34
2962: PUSH
2963: LD_INT 45
2965: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2966: LD_ADDR_OWVAR 29
2970: PUSH
2971: LD_INT 11
2973: PUSH
2974: LD_INT 10
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2981: LD_ADDR_OWVAR 26
2985: PUSH
2986: LD_STRING Ingrid Jonsson
2988: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2989: LD_ADDR_OWVAR 30
2993: PUSH
2994: LD_INT 1
2996: PUSH
2997: LD_INT 1
2999: PUSH
3000: LD_INT 0
3002: PUSH
3003: LD_INT 0
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: LIST
3010: LIST
3011: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3012: LD_ADDR_OWVAR 31
3016: PUSH
3017: LD_INT 3
3019: PUSH
3020: LD_INT 1
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: LD_INT 0
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3035: LD_ADDR_EXP 18
3039: PUSH
3040: CALL_OW 44
3044: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3045: LD_EXP 18
3049: PPUSH
3050: LD_VAR 0 3
3054: PPUSH
3055: CALL_OW 52
// end ;
3059: LD_VAR 0 1
3063: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3064: LD_INT 0
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3070: LD_ADDR_VAR 0 4
3074: PUSH
3075: LD_INT 22
3077: PUSH
3078: LD_INT 1
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PUSH
3085: LD_INT 23
3087: PUSH
3088: LD_INT 1
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PUSH
3095: LD_INT 26
3097: PUSH
3098: LD_INT 1
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: LIST
3109: PPUSH
3110: CALL_OW 69
3114: PUSH
3115: LD_EXP 3
3119: PUSH
3120: LD_EXP 4
3124: PUSH
3125: LD_EXP 8
3129: PUSH
3130: LD_EXP 9
3134: PUSH
3135: LD_EXP 5
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: DIFF
3147: ST_TO_ADDR
// for i in _tmp do
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 4
3157: PUSH
3158: FOR_IN
3159: IFFALSE 3200
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3161: LD_VAR 0 2
3165: PPUSH
3166: LD_INT 32
3168: PPUSH
3169: CALL_OW 308
3173: PUSH
3174: LD_VAR 0 2
3178: PPUSH
3179: CALL_OW 302
3183: AND
3184: IFFALSE 3198
// begin tmp := i ;
3186: LD_ADDR_VAR 0 3
3190: PUSH
3191: LD_VAR 0 2
3195: ST_TO_ADDR
// break ;
3196: GO 3200
// end ;
3198: GO 3158
3200: POP
3201: POP
// if not tmp then
3202: LD_VAR 0 3
3206: NOT
3207: IFFALSE 3219
// tmp := JMM ;
3209: LD_ADDR_VAR 0 3
3213: PUSH
3214: LD_EXP 1
3218: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3219: LD_INT 35
3221: PPUSH
3222: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 22 ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 20 ] ] ) ;
3226: LD_INT 81
3228: PUSH
3229: LD_INT 1
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 92
3238: PUSH
3239: LD_VAR 0 3
3243: PPUSH
3244: CALL_OW 250
3248: PUSH
3249: LD_VAR 0 3
3253: PPUSH
3254: CALL_OW 251
3258: PUSH
3259: LD_INT 22
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 69
3276: NOT
3277: PUSH
3278: LD_INT 22
3280: PUSH
3281: LD_INT 1
3283: PUSH
3284: EMPTY
3285: LIST
3286: LIST
3287: PUSH
3288: LD_INT 21
3290: PUSH
3291: LD_INT 3
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PUSH
3298: LD_INT 92
3300: PUSH
3301: LD_VAR 0 3
3305: PPUSH
3306: CALL_OW 250
3310: PUSH
3311: LD_VAR 0 3
3315: PPUSH
3316: CALL_OW 251
3320: PUSH
3321: LD_INT 20
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: LIST
3334: PPUSH
3335: CALL_OW 69
3339: AND
3340: IFFALSE 3219
// blockSpawn = 1 ;
3342: LD_ADDR_EXP 29
3346: PUSH
3347: LD_INT 1
3349: ST_TO_ADDR
// uc_side = 4 ;
3350: LD_ADDR_OWVAR 20
3354: PUSH
3355: LD_INT 4
3357: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3358: LD_ADDR_EXP 15
3362: PUSH
3363: LD_STRING Joan
3365: PPUSH
3366: LD_INT 0
3368: PPUSH
3369: LD_EXP 44
3373: PPUSH
3374: CALL 39116 0 3
3378: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3379: LD_EXP 15
3383: PPUSH
3384: LD_VAR 0 3
3388: PPUSH
3389: CALL_OW 250
3393: PPUSH
3394: LD_VAR 0 3
3398: PPUSH
3399: CALL_OW 251
3403: PPUSH
3404: LD_INT 5
3406: PPUSH
3407: LD_INT 1
3409: PPUSH
3410: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3414: LD_EXP 15
3418: PPUSH
3419: LD_INT 250
3421: PPUSH
3422: CALL_OW 234
// InGameOn ;
3426: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3430: LD_EXP 15
3434: PPUSH
3435: CALL_OW 87
// wait ( 0 0$2 ) ;
3439: LD_INT 70
3441: PPUSH
3442: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3446: LD_VAR 0 3
3450: PPUSH
3451: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3455: LD_VAR 0 3
3459: PPUSH
3460: CALL_OW 122
// wait ( 0 0$1 ) ;
3464: LD_INT 35
3466: PPUSH
3467: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3471: LD_VAR 0 3
3475: PPUSH
3476: LD_EXP 15
3480: PPUSH
3481: CALL_OW 112
// wait ( 0 0$2 ) ;
3485: LD_INT 70
3487: PPUSH
3488: CALL_OW 67
// DialogueOn ;
3492: CALL_OW 6
// if tmp = JMM then
3496: LD_VAR 0 3
3500: PUSH
3501: LD_EXP 1
3505: EQUAL
3506: IFFALSE 3655
// begin ComTurnUnit ( JMM , Joan ) ;
3508: LD_EXP 1
3512: PPUSH
3513: LD_EXP 15
3517: PPUSH
3518: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3522: LD_EXP 1
3526: PPUSH
3527: LD_STRING D5b-JMM-1
3529: PPUSH
3530: CALL_OW 88
// DialogueOff ;
3534: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3538: LD_EXP 15
3542: PPUSH
3543: LD_INT 500
3545: PPUSH
3546: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3550: LD_EXP 15
3554: PPUSH
3555: LD_EXP 1
3559: PPUSH
3560: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3564: LD_EXP 1
3568: PPUSH
3569: LD_EXP 15
3573: PPUSH
3574: CALL_OW 119
// wait ( 0 0$1 ) ;
3578: LD_INT 35
3580: PPUSH
3581: CALL_OW 67
// DialogueOn ;
3585: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3589: LD_EXP 15
3593: PPUSH
3594: LD_STRING D5b-Joan-1
3596: PPUSH
3597: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3601: LD_EXP 1
3605: PPUSH
3606: LD_STRING D5b-JMM-2
3608: PPUSH
3609: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3613: LD_EXP 15
3617: PPUSH
3618: LD_STRING D5b-Joan-2
3620: PPUSH
3621: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3625: LD_EXP 1
3629: PPUSH
3630: LD_STRING D5b-JMM-3
3632: PPUSH
3633: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3637: LD_EXP 15
3641: PPUSH
3642: LD_STRING D5b-Joan-3
3644: PPUSH
3645: CALL_OW 88
// DialogueOff ;
3649: CALL_OW 7
// end else
3653: GO 4029
// begin ComTurnUnit ( tmp , Joan ) ;
3655: LD_VAR 0 3
3659: PPUSH
3660: LD_EXP 15
3664: PPUSH
3665: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3669: LD_VAR 0 3
3673: PPUSH
3674: LD_STRING D5a-Sol1-1
3676: PPUSH
3677: CALL_OW 88
// DialogueOff ;
3681: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3685: LD_EXP 15
3689: PPUSH
3690: LD_INT 500
3692: PPUSH
3693: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3697: LD_EXP 15
3701: PPUSH
3702: LD_VAR 0 3
3706: PPUSH
3707: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3711: LD_VAR 0 3
3715: PPUSH
3716: LD_EXP 15
3720: PPUSH
3721: CALL_OW 119
// wait ( 0 0$1 ) ;
3725: LD_INT 35
3727: PPUSH
3728: CALL_OW 67
// DialogueOn ;
3732: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3736: LD_EXP 15
3740: PPUSH
3741: LD_STRING D5a-Joan-1
3743: PPUSH
3744: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3748: LD_VAR 0 3
3752: PPUSH
3753: LD_STRING D5a-Sol1-2
3755: PPUSH
3756: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3760: LD_EXP 15
3764: PPUSH
3765: LD_STRING D5a-Joan-2
3767: PPUSH
3768: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_STRING D5a-Sol1-3
3779: PPUSH
3780: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3784: LD_EXP 15
3788: PPUSH
3789: LD_STRING D5a-Joan-3
3791: PPUSH
3792: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3796: LD_VAR 0 3
3800: PPUSH
3801: LD_STRING D5a-Sol1-4
3803: PPUSH
3804: CALL_OW 88
// DialogueOff ;
3808: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3812: LD_EXP 1
3816: PUSH
3817: LD_INT 55
3819: PUSH
3820: EMPTY
3821: LIST
3822: PPUSH
3823: CALL_OW 69
3827: IN
3828: IFFALSE 3851
// begin ComMoveUnit ( JMM , Joan ) ;
3830: LD_EXP 1
3834: PPUSH
3835: LD_EXP 15
3839: PPUSH
3840: CALL_OW 112
// wait ( 0 0$05 ) ;
3844: LD_INT 175
3846: PPUSH
3847: CALL_OW 67
// end ; ComExitVehicle ( JMM ) ;
3851: LD_EXP 1
3855: PPUSH
3856: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3860: LD_EXP 1
3864: PPUSH
3865: CALL_OW 122
// wait ( 0 0$1 ) ;
3869: LD_INT 35
3871: PPUSH
3872: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3876: LD_INT 35
3878: PPUSH
3879: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3883: LD_EXP 15
3887: PUSH
3888: LD_VAR 0 3
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PPUSH
3897: LD_EXP 1
3901: PPUSH
3902: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3906: LD_EXP 15
3910: PPUSH
3911: LD_EXP 1
3915: PPUSH
3916: CALL_OW 296
3920: PUSH
3921: LD_INT 5
3923: LESS
3924: IFFALSE 3876
// ComTurnUnit ( Joan , JMM ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_EXP 1
3935: PPUSH
3936: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3940: LD_EXP 1
3944: PPUSH
3945: LD_EXP 15
3949: PPUSH
3950: CALL_OW 119
// wait ( 0 0$1 ) ;
3954: LD_INT 35
3956: PPUSH
3957: CALL_OW 67
// DialogueOn ;
3961: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3965: LD_EXP 15
3969: PPUSH
3970: LD_STRING D5a-Joan-4
3972: PPUSH
3973: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3977: LD_EXP 1
3981: PPUSH
3982: LD_STRING D5a-JMM-4
3984: PPUSH
3985: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3989: LD_EXP 15
3993: PPUSH
3994: LD_STRING D5a-Joan-5
3996: PPUSH
3997: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
4001: LD_EXP 1
4005: PPUSH
4006: LD_STRING D5a-JMM-5
4008: PPUSH
4009: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
4013: LD_EXP 15
4017: PPUSH
4018: LD_STRING D5a-Joan-6
4020: PPUSH
4021: CALL_OW 88
// DialogueOff ;
4025: CALL_OW 7
// end ; DialogueOn ;
4029: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4033: LD_EXP 1
4037: PPUSH
4038: LD_STRING D6-JMM-1
4040: PPUSH
4041: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4045: LD_EXP 15
4049: PPUSH
4050: LD_STRING D6-Joan-1
4052: PPUSH
4053: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4057: LD_EXP 1
4061: PPUSH
4062: LD_STRING D6-JMM-2
4064: PPUSH
4065: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4069: LD_EXP 15
4073: PPUSH
4074: LD_STRING D6-Joan-2
4076: PPUSH
4077: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4081: LD_EXP 1
4085: PPUSH
4086: LD_STRING D6-JMM-3
4088: PPUSH
4089: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4093: LD_EXP 15
4097: PPUSH
4098: LD_STRING D6-Joan-3
4100: PPUSH
4101: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4105: LD_EXP 1
4109: PPUSH
4110: LD_STRING D6-JMM-4
4112: PPUSH
4113: CALL_OW 88
// DialogueOff ;
4117: CALL_OW 7
// InGameOff ;
4121: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4125: LD_EXP 15
4129: PPUSH
4130: LD_INT 1
4132: PPUSH
4133: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4137: LD_STRING MJ
4139: PPUSH
4140: CALL_OW 337
// JoanStatus = 1 ;
4144: LD_ADDR_EXP 16
4148: PUSH
4149: LD_INT 1
4151: ST_TO_ADDR
// blockSpawn = 0 ;
4152: LD_ADDR_EXP 29
4156: PUSH
4157: LD_INT 0
4159: ST_TO_ADDR
// end ;
4160: LD_VAR 0 1
4164: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4165: LD_INT 0
4167: PPUSH
4168: PPUSH
// if not number or number > 8 then
4169: LD_VAR 0 1
4173: NOT
4174: PUSH
4175: LD_VAR 0 1
4179: PUSH
4180: LD_INT 8
4182: GREATER
4183: OR
4184: IFFALSE 4188
// exit ;
4186: GO 5752
// repeat wait ( 0 0$7 ) ;
4188: LD_INT 245
4190: PPUSH
4191: CALL_OW 67
// until blockSpawn = 0 ;
4195: LD_EXP 29
4199: PUSH
4200: LD_INT 0
4202: EQUAL
4203: IFFALSE 4188
// uc_side = 1 ;
4205: LD_ADDR_OWVAR 20
4209: PUSH
4210: LD_INT 1
4212: ST_TO_ADDR
// uc_nation = 1 ;
4213: LD_ADDR_OWVAR 21
4217: PUSH
4218: LD_INT 1
4220: ST_TO_ADDR
// InitHc ;
4221: CALL_OW 19
// if number = 1 then
4225: LD_VAR 0 1
4229: PUSH
4230: LD_INT 1
4232: EQUAL
4233: IFFALSE 4409
// begin hc_class := 3 ;
4235: LD_ADDR_OWVAR 28
4239: PUSH
4240: LD_INT 3
4242: ST_TO_ADDR
// hc_sex := sex_male ;
4243: LD_ADDR_OWVAR 27
4247: PUSH
4248: LD_INT 1
4250: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4251: LD_ADDR_OWVAR 33
4255: PUSH
4256: LD_STRING SecondCharsGal
4258: ST_TO_ADDR
// hc_face_number := 55 ;
4259: LD_ADDR_OWVAR 34
4263: PUSH
4264: LD_INT 55
4266: ST_TO_ADDR
// hc_name := George McCarthy ;
4267: LD_ADDR_OWVAR 26
4271: PUSH
4272: LD_STRING George McCarthy
4274: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4275: LD_ADDR_OWVAR 29
4279: PUSH
4280: LD_INT 11
4282: PUSH
4283: LD_INT 10
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4290: LD_ADDR_OWVAR 30
4294: PUSH
4295: LD_INT 0
4297: PUSH
4298: LD_INT 0
4300: PUSH
4301: LD_INT 2
4303: PUSH
4304: LD_INT 0
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4313: LD_ADDR_OWVAR 31
4317: PUSH
4318: LD_INT 1
4320: PUSH
4321: LD_INT 2
4323: PUSH
4324: LD_INT 3
4326: PUSH
4327: LD_INT 1
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: ST_TO_ADDR
// un = CreateHuman ;
4336: LD_ADDR_VAR 0 3
4340: PUSH
4341: CALL_OW 44
4345: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4346: LD_VAR 0 3
4350: PPUSH
4351: LD_INT 23
4353: PPUSH
4354: LD_INT 1
4356: PPUSH
4357: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: CALL_OW 87
// wait ( 0 0$1 ) ;
4370: LD_INT 35
4372: PPUSH
4373: CALL_OW 67
// DialogueOn ;
4377: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4381: LD_VAR 0 3
4385: PPUSH
4386: LD_STRING D11d-Sol4-1
4388: PPUSH
4389: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4393: LD_EXP 1
4397: PPUSH
4398: LD_STRING D11d-JMM-1
4400: PPUSH
4401: CALL_OW 88
// DialogueOff ;
4405: CALL_OW 7
// end ; if number = 2 then
4409: LD_VAR 0 1
4413: PUSH
4414: LD_INT 2
4416: EQUAL
4417: IFFALSE 4593
// begin hc_class := 1 ;
4419: LD_ADDR_OWVAR 28
4423: PUSH
4424: LD_INT 1
4426: ST_TO_ADDR
// hc_sex := sex_male ;
4427: LD_ADDR_OWVAR 27
4431: PUSH
4432: LD_INT 1
4434: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4435: LD_ADDR_OWVAR 33
4439: PUSH
4440: LD_STRING AmGalRemake
4442: ST_TO_ADDR
// hc_face_number := 7 ;
4443: LD_ADDR_OWVAR 34
4447: PUSH
4448: LD_INT 7
4450: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4451: LD_ADDR_OWVAR 26
4455: PUSH
4456: LD_STRING Bobby Jordan
4458: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4459: LD_ADDR_OWVAR 29
4463: PUSH
4464: LD_INT 9
4466: PUSH
4467: LD_INT 11
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4474: LD_ADDR_OWVAR 30
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: LD_INT 0
4484: PUSH
4485: LD_INT 0
4487: PUSH
4488: LD_INT 1
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4497: LD_ADDR_OWVAR 31
4501: PUSH
4502: LD_INT 2
4504: PUSH
4505: LD_INT 1
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: ST_TO_ADDR
// un = CreateHuman ;
4520: LD_ADDR_VAR 0 3
4524: PUSH
4525: CALL_OW 44
4529: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: LD_INT 24
4537: PPUSH
4538: LD_INT 1
4540: PPUSH
4541: CALL_OW 49
// wait ( 0 0$1 ) ;
4545: LD_INT 35
4547: PPUSH
4548: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4552: LD_VAR 0 3
4556: PPUSH
4557: CALL_OW 87
// DialogueOn ;
4561: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4565: LD_VAR 0 3
4569: PPUSH
4570: LD_STRING D11b-Sol3-1
4572: PPUSH
4573: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4577: LD_EXP 1
4581: PPUSH
4582: LD_STRING D11b-JMM-1
4584: PPUSH
4585: CALL_OW 88
// DialogueOff ;
4589: CALL_OW 7
// end ; if number = 3 then
4593: LD_VAR 0 1
4597: PUSH
4598: LD_INT 3
4600: EQUAL
4601: IFFALSE 4765
// begin hc_class := 1 ;
4603: LD_ADDR_OWVAR 28
4607: PUSH
4608: LD_INT 1
4610: ST_TO_ADDR
// hc_sex := sex_male ;
4611: LD_ADDR_OWVAR 27
4615: PUSH
4616: LD_INT 1
4618: ST_TO_ADDR
// hc_gallery := DJ ;
4619: LD_ADDR_OWVAR 33
4623: PUSH
4624: LD_STRING DJ
4626: ST_TO_ADDR
// hc_face_number := 1 ;
4627: LD_ADDR_OWVAR 34
4631: PUSH
4632: LD_INT 1
4634: ST_TO_ADDR
// hc_name := Darius Dajay ;
4635: LD_ADDR_OWVAR 26
4639: PUSH
4640: LD_STRING Darius Dajay
4642: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4643: LD_ADDR_OWVAR 29
4647: PUSH
4648: LD_INT 11
4650: PUSH
4651: LD_INT 11
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4658: LD_ADDR_OWVAR 30
4662: PUSH
4663: LD_INT 2
4665: PUSH
4666: LD_INT 0
4668: PUSH
4669: LD_INT 0
4671: PUSH
4672: LD_INT 0
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4681: LD_ADDR_OWVAR 31
4685: PUSH
4686: LD_INT 4
4688: PUSH
4689: LD_INT 0
4691: PUSH
4692: LD_INT 1
4694: PUSH
4695: LD_INT 0
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: ST_TO_ADDR
// un = CreateHuman ;
4704: LD_ADDR_VAR 0 3
4708: PUSH
4709: CALL_OW 44
4713: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4714: LD_VAR 0 3
4718: PPUSH
4719: LD_INT 25
4721: PPUSH
4722: LD_INT 1
4724: PPUSH
4725: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4729: LD_VAR 0 3
4733: PPUSH
4734: CALL_OW 87
// wait ( 0 0$1 ) ;
4738: LD_INT 35
4740: PPUSH
4741: CALL_OW 67
// DialogueOn ;
4745: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4749: LD_VAR 0 3
4753: PPUSH
4754: LD_STRING D11f-Sol5-1
4756: PPUSH
4757: CALL_OW 88
// DialogueOff ;
4761: CALL_OW 7
// end ; if number = 4 then
4765: LD_VAR 0 1
4769: PUSH
4770: LD_INT 4
4772: EQUAL
4773: IFFALSE 4910
// begin hc_class := 2 ;
4775: LD_ADDR_OWVAR 28
4779: PUSH
4780: LD_INT 2
4782: ST_TO_ADDR
// hc_sex := sex_female ;
4783: LD_ADDR_OWVAR 27
4787: PUSH
4788: LD_INT 2
4790: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4791: LD_ADDR_OWVAR 33
4795: PUSH
4796: LD_STRING SecondCharsGal
4798: ST_TO_ADDR
// hc_face_number := 46 ;
4799: LD_ADDR_OWVAR 34
4803: PUSH
4804: LD_INT 46
4806: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4807: LD_ADDR_OWVAR 26
4811: PUSH
4812: LD_STRING Sylvia Creak
4814: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4815: LD_ADDR_OWVAR 29
4819: PUSH
4820: LD_INT 10
4822: PUSH
4823: LD_INT 9
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4830: LD_ADDR_OWVAR 30
4834: PUSH
4835: LD_INT 0
4837: PUSH
4838: LD_INT 1
4840: PUSH
4841: LD_INT 1
4843: PUSH
4844: LD_INT 1
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4853: LD_ADDR_OWVAR 31
4857: PUSH
4858: LD_INT 1
4860: PUSH
4861: LD_INT 3
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: LD_INT 1
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: ST_TO_ADDR
// un = CreateHuman ;
4876: LD_ADDR_VAR 0 3
4880: PUSH
4881: CALL_OW 44
4885: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4886: LD_VAR 0 3
4890: PPUSH
4891: LD_INT 26
4893: PPUSH
4894: LD_INT 1
4896: PPUSH
4897: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4901: LD_VAR 0 3
4905: PPUSH
4906: CALL_OW 87
// end ; if number = 5 then
4910: LD_VAR 0 1
4914: PUSH
4915: LD_INT 5
4917: EQUAL
4918: IFFALSE 5094
// begin hc_class := 1 ;
4920: LD_ADDR_OWVAR 28
4924: PUSH
4925: LD_INT 1
4927: ST_TO_ADDR
// hc_sex := sex_female ;
4928: LD_ADDR_OWVAR 27
4932: PUSH
4933: LD_INT 2
4935: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4936: LD_ADDR_OWVAR 33
4940: PUSH
4941: LD_STRING SecondCharsGal
4943: ST_TO_ADDR
// hc_face_number := 37 ;
4944: LD_ADDR_OWVAR 34
4948: PUSH
4949: LD_INT 37
4951: ST_TO_ADDR
// hc_name := Malena Johnson ;
4952: LD_ADDR_OWVAR 26
4956: PUSH
4957: LD_STRING Malena Johnson
4959: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4960: LD_ADDR_OWVAR 29
4964: PUSH
4965: LD_INT 11
4967: PUSH
4968: LD_INT 10
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4975: LD_ADDR_OWVAR 30
4979: PUSH
4980: LD_INT 1
4982: PUSH
4983: LD_INT 1
4985: PUSH
4986: LD_INT 0
4988: PUSH
4989: LD_INT 0
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4998: LD_ADDR_OWVAR 31
5002: PUSH
5003: LD_INT 1
5005: PUSH
5006: LD_INT 1
5008: PUSH
5009: LD_INT 1
5011: PUSH
5012: LD_INT 1
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: ST_TO_ADDR
// un = CreateHuman ;
5021: LD_ADDR_VAR 0 3
5025: PUSH
5026: CALL_OW 44
5030: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
5031: LD_VAR 0 3
5035: PPUSH
5036: LD_INT 27
5038: PPUSH
5039: LD_INT 1
5041: PPUSH
5042: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5046: LD_VAR 0 3
5050: PPUSH
5051: CALL_OW 87
// wait ( 0 0$1 ) ;
5055: LD_INT 35
5057: PPUSH
5058: CALL_OW 67
// DialogueOn ;
5062: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5066: LD_VAR 0 3
5070: PPUSH
5071: LD_STRING D11c-FSol3-1
5073: PPUSH
5074: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5078: LD_EXP 1
5082: PPUSH
5083: LD_STRING D11c-JMM-1
5085: PPUSH
5086: CALL_OW 88
// DialogueOff ;
5090: CALL_OW 7
// end ; if number = 6 then
5094: LD_VAR 0 1
5098: PUSH
5099: LD_INT 6
5101: EQUAL
5102: IFFALSE 5276
// begin hc_class := 1 ;
5104: LD_ADDR_OWVAR 28
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// hc_sex := sex_male ;
5112: LD_ADDR_OWVAR 27
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5120: LD_ADDR_OWVAR 33
5124: PUSH
5125: LD_STRING AmGalRemake
5127: ST_TO_ADDR
// hc_face_number := 1 ;
5128: LD_ADDR_OWVAR 34
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// hc_name := Charles Brown ;
5136: LD_ADDR_OWVAR 26
5140: PUSH
5141: LD_STRING Charles Brown
5143: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5144: LD_ADDR_OWVAR 29
5148: PUSH
5149: LD_INT 12
5151: PUSH
5152: LD_INT 11
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5159: LD_ADDR_OWVAR 30
5163: PUSH
5164: LD_INT 2
5166: PUSH
5167: LD_INT 0
5169: PUSH
5170: LD_INT 0
5172: PUSH
5173: LD_INT 0
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5182: LD_ADDR_OWVAR 31
5186: PUSH
5187: LD_INT 3
5189: PUSH
5190: LD_INT 0
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: LD_INT 1
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: ST_TO_ADDR
// un = CreateHuman ;
5205: LD_ADDR_VAR 0 3
5209: PUSH
5210: CALL_OW 44
5214: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5215: LD_VAR 0 3
5219: PPUSH
5220: LD_INT 28
5222: PPUSH
5223: LD_INT 1
5225: PPUSH
5226: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5230: LD_VAR 0 3
5234: PPUSH
5235: CALL_OW 87
// wait ( 0 0$1 ) ;
5239: LD_INT 35
5241: PPUSH
5242: CALL_OW 67
// DialogueOn ;
5246: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5250: LD_VAR 0 3
5254: PPUSH
5255: LD_STRING D4-Sol1-5
5257: PPUSH
5258: CALL_OW 88
// DialogueOff ;
5262: CALL_OW 7
// tempCharles = un ;
5266: LD_ADDR_EXP 13
5270: PUSH
5271: LD_VAR 0 3
5275: ST_TO_ADDR
// end ; if number = 7 then
5276: LD_VAR 0 1
5280: PUSH
5281: LD_INT 7
5283: EQUAL
5284: IFFALSE 5556
// begin hc_class := 1 ;
5286: LD_ADDR_OWVAR 28
5290: PUSH
5291: LD_INT 1
5293: ST_TO_ADDR
// hc_sex := sex_female ;
5294: LD_ADDR_OWVAR 27
5298: PUSH
5299: LD_INT 2
5301: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5302: LD_ADDR_OWVAR 33
5306: PUSH
5307: LD_STRING AmGalRemake
5309: ST_TO_ADDR
// hc_face_number := 2 ;
5310: LD_ADDR_OWVAR 34
5314: PUSH
5315: LD_INT 2
5317: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5318: LD_ADDR_OWVAR 26
5322: PUSH
5323: LD_STRING Rebecca Macdonald
5325: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5326: LD_ADDR_OWVAR 29
5330: PUSH
5331: LD_INT 10
5333: PUSH
5334: LD_INT 10
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5341: LD_ADDR_OWVAR 30
5345: PUSH
5346: LD_INT 1
5348: PUSH
5349: LD_INT 0
5351: PUSH
5352: LD_INT 0
5354: PUSH
5355: LD_INT 1
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5364: LD_ADDR_OWVAR 31
5368: PUSH
5369: LD_INT 1
5371: PUSH
5372: LD_INT 0
5374: PUSH
5375: LD_INT 0
5377: PUSH
5378: LD_INT 1
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: ST_TO_ADDR
// un = CreateHuman ;
5387: LD_ADDR_VAR 0 3
5391: PUSH
5392: CALL_OW 44
5396: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 29
5404: PPUSH
5405: LD_INT 1
5407: PPUSH
5408: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5412: LD_VAR 0 3
5416: PPUSH
5417: CALL_OW 87
// wait ( 0 0$1 ) ;
5421: LD_INT 35
5423: PPUSH
5424: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5428: LD_INT 30
5430: PPUSH
5431: LD_INT 22
5433: PUSH
5434: LD_INT 3
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 70
5445: IFFALSE 5556
// begin DialogueOn ;
5447: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5451: LD_VAR 0 3
5455: PPUSH
5456: CALL_OW 250
5460: PPUSH
5461: LD_VAR 0 3
5465: PPUSH
5466: CALL_OW 251
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: LD_INT 15
5476: NEG
5477: PPUSH
5478: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 250
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 251
5501: PPUSH
5502: LD_INT 1
5504: PPUSH
5505: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5509: LD_VAR 0 3
5513: PPUSH
5514: LD_STRING D11a-FSol2-1
5516: PPUSH
5517: CALL_OW 88
// DialogueOff ;
5521: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5525: LD_INT 3
5527: PPUSH
5528: LD_VAR 0 3
5532: PPUSH
5533: CALL_OW 471
// wait ( 0 0$2 ) ;
5537: LD_INT 70
5539: PPUSH
5540: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5544: LD_INT 3
5546: PPUSH
5547: LD_VAR 0 3
5551: PPUSH
5552: CALL_OW 472
// end ; end ; if number = 8 then
5556: LD_VAR 0 1
5560: PUSH
5561: LD_INT 8
5563: EQUAL
5564: IFFALSE 5720
// begin hc_class := 1 ;
5566: LD_ADDR_OWVAR 28
5570: PUSH
5571: LD_INT 1
5573: ST_TO_ADDR
// hc_sex := sex_female ;
5574: LD_ADDR_OWVAR 27
5578: PUSH
5579: LD_INT 2
5581: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5582: LD_ADDR_OWVAR 33
5586: PUSH
5587: LD_STRING SecondCharsGal
5589: ST_TO_ADDR
// hc_face_number := 42 ;
5590: LD_ADDR_OWVAR 34
5594: PUSH
5595: LD_INT 42
5597: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5598: LD_ADDR_OWVAR 26
5602: PUSH
5603: LD_STRING Margherite Simpson
5605: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5606: LD_ADDR_OWVAR 29
5610: PUSH
5611: LD_INT 12
5613: PUSH
5614: LD_INT 10
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5621: LD_ADDR_OWVAR 30
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: LD_INT 2
5631: PUSH
5632: LD_INT 0
5634: PUSH
5635: LD_INT 0
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5644: LD_ADDR_OWVAR 31
5648: PUSH
5649: LD_INT 1
5651: PUSH
5652: LD_INT 2
5654: PUSH
5655: LD_INT 0
5657: PUSH
5658: LD_INT 1
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: ST_TO_ADDR
// un = CreateHuman ;
5667: LD_ADDR_VAR 0 3
5671: PUSH
5672: CALL_OW 44
5676: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5677: LD_VAR 0 3
5681: PPUSH
5682: LD_INT 33
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5692: LD_VAR 0 3
5696: PPUSH
5697: CALL_OW 87
// wait ( 0 0$1 ) ;
5701: LD_INT 35
5703: PPUSH
5704: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5708: LD_VAR 0 3
5712: PPUSH
5713: LD_STRING D11e-FSol4-1
5715: PPUSH
5716: CALL_OW 88
// end ; ignoreTarget := ignoreTarget union un ;
5720: LD_ADDR_EXP 45
5724: PUSH
5725: LD_EXP 45
5729: PUSH
5730: LD_VAR 0 3
5734: UNION
5735: ST_TO_ADDR
// arrivals := arrivals union un ;
5736: LD_ADDR_EXP 46
5740: PUSH
5741: LD_EXP 46
5745: PUSH
5746: LD_VAR 0 3
5750: UNION
5751: ST_TO_ADDR
// end ;
5752: LD_VAR 0 2
5756: RET
// every 0 0$1 do var i ;
5757: GO 5759
5759: DISABLE
5760: LD_INT 0
5762: PPUSH
// begin enable ;
5763: ENABLE
// if not ignoreTarget then
5764: LD_EXP 45
5768: NOT
5769: IFFALSE 5773
// exit ;
5771: GO 5854
// for i in ignoreTarget do
5773: LD_ADDR_VAR 0 1
5777: PUSH
5778: LD_EXP 45
5782: PUSH
5783: FOR_IN
5784: IFFALSE 5852
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5786: LD_INT 22
5788: PUSH
5789: LD_INT 1
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_INT 91
5798: PUSH
5799: LD_VAR 0 1
5803: PUSH
5804: LD_INT 10
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PPUSH
5816: CALL_OW 69
5820: PUSH
5821: LD_EXP 45
5825: DIFF
5826: PUSH
5827: LD_INT 1
5829: GREATER
5830: IFFALSE 5850
// begin ignoreTarget := ignoreTarget diff i ;
5832: LD_ADDR_EXP 45
5836: PUSH
5837: LD_EXP 45
5841: PUSH
5842: LD_VAR 0 1
5846: DIFF
5847: ST_TO_ADDR
// break ;
5848: GO 5852
// end ;
5850: GO 5783
5852: POP
5853: POP
// end ; end_of_file
5854: PPOPN 1
5856: END
// export function PrepareRussian ; var i ; begin
5857: LD_INT 0
5859: PPUSH
5860: PPUSH
// if Difficulty < 3 then
5861: LD_OWVAR 67
5865: PUSH
5866: LD_INT 3
5868: LESS
5869: IFFALSE 5886
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5871: LD_INT 130
5873: PPUSH
5874: LD_INT 81
5876: PPUSH
5877: CALL_OW 428
5881: PPUSH
5882: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5886: LD_INT 3
5888: PPUSH
5889: LD_INT 3
5891: PPUSH
5892: LD_INT 2
5894: PPUSH
5895: LD_EXP 34
5899: PPUSH
5900: LD_EXP 35
5904: PPUSH
5905: CALL_OW 12
5909: PPUSH
5910: LD_INT 2
5912: PPUSH
5913: LD_INT 4
5915: PPUSH
5916: CALL 6388 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5920: LD_INT 3
5922: PPUSH
5923: LD_INT 3
5925: PPUSH
5926: LD_INT 8
5928: PPUSH
5929: LD_EXP 34
5933: PPUSH
5934: LD_EXP 35
5938: PPUSH
5939: CALL_OW 12
5943: PPUSH
5944: LD_INT 1
5946: PPUSH
5947: LD_INT 4
5949: PPUSH
5950: CALL 6388 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5954: LD_INT 3
5956: PPUSH
5957: LD_INT 3
5959: PPUSH
5960: LD_INT 67
5962: PPUSH
5963: LD_EXP 34
5967: PPUSH
5968: LD_EXP 35
5972: PPUSH
5973: CALL_OW 12
5977: PPUSH
5978: LD_INT 1
5980: PPUSH
5981: LD_INT 2
5983: PPUSH
5984: CALL 6388 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5988: LD_INT 3
5990: PPUSH
5991: LD_INT 3
5993: PPUSH
5994: LD_INT 21
5996: PPUSH
5997: LD_EXP 34
6001: PPUSH
6002: LD_EXP 35
6006: PPUSH
6007: CALL_OW 12
6011: PPUSH
6012: LD_INT 3
6014: PPUSH
6015: LD_INT 6
6017: PPUSH
6018: CALL 6388 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
6022: LD_INT 3
6024: PPUSH
6025: LD_INT 3
6027: PPUSH
6028: LD_INT 17
6030: PPUSH
6031: LD_EXP 34
6035: PPUSH
6036: LD_EXP 35
6040: PPUSH
6041: CALL_OW 12
6045: PPUSH
6046: LD_INT 3
6048: PPUSH
6049: LD_INT 6
6051: PPUSH
6052: CALL 6388 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
6056: LD_INT 3
6058: PPUSH
6059: LD_INT 3
6061: PPUSH
6062: LD_INT 32
6064: PPUSH
6065: LD_EXP 34
6069: PPUSH
6070: LD_EXP 35
6074: PPUSH
6075: CALL_OW 12
6079: PPUSH
6080: LD_INT 4
6082: PPUSH
6083: LD_INT 2
6085: PPUSH
6086: CALL 6388 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6090: LD_ADDR_VAR 0 2
6094: PUSH
6095: LD_INT 22
6097: PUSH
6098: LD_INT 3
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PUSH
6105: LD_INT 21
6107: PUSH
6108: LD_INT 3
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PUSH
6115: LD_INT 30
6117: PUSH
6118: LD_INT 32
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL_OW 69
6134: PUSH
6135: FOR_IN
6136: IFFALSE 6176
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6138: LD_INT 3
6140: PPUSH
6141: LD_INT 3
6143: PPUSH
6144: LD_VAR 0 2
6148: PPUSH
6149: LD_EXP 34
6153: PPUSH
6154: LD_EXP 35
6158: PPUSH
6159: CALL_OW 12
6163: PPUSH
6164: LD_INT 1
6166: PPUSH
6167: LD_INT 1
6169: PPUSH
6170: CALL 6388 0 6
6174: GO 6135
6176: POP
6177: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
6178: LD_ADDR_VAR 0 2
6182: PUSH
6183: LD_INT 22
6185: PUSH
6186: LD_INT 3
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: LD_INT 21
6195: PUSH
6196: LD_INT 3
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: LD_INT 30
6205: PUSH
6206: LD_INT 31
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: LIST
6217: PPUSH
6218: CALL_OW 69
6222: PUSH
6223: FOR_IN
6224: IFFALSE 6252
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6226: LD_EXP 34
6230: PPUSH
6231: LD_EXP 35
6235: PPUSH
6236: CALL_OW 12
6240: PPUSH
6241: LD_VAR 0 2
6245: PPUSH
6246: CALL 6498 0 2
6250: GO 6223
6252: POP
6253: POP
// end ; end_of_file
6254: LD_VAR 0 1
6258: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6259: LD_INT 0
6261: PPUSH
6262: PPUSH
6263: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6264: LD_ADDR_VAR 0 6
6268: PUSH
6269: LD_VAR 0 1
6273: PUSH
6274: LD_INT 1
6276: PPUSH
6277: LD_VAR 0 1
6281: PPUSH
6282: CALL_OW 12
6286: ARRAY
6287: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6288: LD_VAR 0 6
6292: PPUSH
6293: CALL_OW 258
6297: PUSH
6298: LD_INT 1
6300: EQUAL
6301: IFFALSE 6319
// Say ( speaker , dialogMID ) else
6303: LD_VAR 0 6
6307: PPUSH
6308: LD_VAR 0 2
6312: PPUSH
6313: CALL_OW 88
6317: GO 6333
// Say ( speaker , dialogFID ) ;
6319: LD_VAR 0 6
6323: PPUSH
6324: LD_VAR 0 3
6328: PPUSH
6329: CALL_OW 88
// result := speaker ;
6333: LD_ADDR_VAR 0 4
6337: PUSH
6338: LD_VAR 0 6
6342: ST_TO_ADDR
// end ;
6343: LD_VAR 0 4
6347: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6348: LD_INT 0
6350: PPUSH
6351: PPUSH
// for i in charactersList do
6352: LD_ADDR_VAR 0 4
6356: PUSH
6357: LD_VAR 0 1
6361: PUSH
6362: FOR_IN
6363: IFFALSE 6381
// SaveCharacters ( i , ident ) ;
6365: LD_VAR 0 4
6369: PPUSH
6370: LD_VAR 0 2
6374: PPUSH
6375: CALL_OW 38
6379: GO 6362
6381: POP
6382: POP
// end ;
6383: LD_VAR 0 3
6387: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6388: LD_INT 0
6390: PPUSH
6391: PPUSH
6392: PPUSH
6393: PPUSH
// for i = 1 to count do
6394: LD_ADDR_VAR 0 8
6398: PUSH
6399: DOUBLE
6400: LD_INT 1
6402: DEC
6403: ST_TO_ADDR
6404: LD_VAR 0 6
6408: PUSH
6409: FOR_TO
6410: IFFALSE 6491
// begin uc_side = side ;
6412: LD_ADDR_OWVAR 20
6416: PUSH
6417: LD_VAR 0 1
6421: ST_TO_ADDR
// uc_nation = nation ;
6422: LD_ADDR_OWVAR 21
6426: PUSH
6427: LD_VAR 0 2
6431: ST_TO_ADDR
// hc_gallery =  ;
6432: LD_ADDR_OWVAR 33
6436: PUSH
6437: LD_STRING 
6439: ST_TO_ADDR
// hc_name =  ;
6440: LD_ADDR_OWVAR 26
6444: PUSH
6445: LD_STRING 
6447: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6448: LD_INT 0
6450: PPUSH
6451: LD_VAR 0 5
6455: PPUSH
6456: LD_VAR 0 4
6460: PPUSH
6461: CALL_OW 380
// un = CreateHuman ;
6465: LD_ADDR_VAR 0 10
6469: PUSH
6470: CALL_OW 44
6474: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6475: LD_VAR 0 10
6479: PPUSH
6480: LD_VAR 0 3
6484: PPUSH
6485: CALL_OW 52
// end ;
6489: GO 6409
6491: POP
6492: POP
// end ;
6493: LD_VAR 0 7
6497: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6498: LD_INT 0
6500: PPUSH
6501: PPUSH
6502: PPUSH
// uc_side := GetSide ( b ) ;
6503: LD_ADDR_OWVAR 20
6507: PUSH
6508: LD_VAR 0 2
6512: PPUSH
6513: CALL_OW 255
6517: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6518: LD_ADDR_OWVAR 21
6522: PUSH
6523: LD_VAR 0 2
6527: PPUSH
6528: CALL_OW 248
6532: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6533: LD_INT 0
6535: PPUSH
6536: LD_INT 1
6538: PPUSH
6539: LD_VAR 0 1
6543: PPUSH
6544: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6548: LD_ADDR_VAR 0 5
6552: PUSH
6553: LD_VAR 0 2
6557: PPUSH
6558: CALL_OW 254
6562: PUSH
6563: LD_INT 3
6565: MINUS
6566: ST_TO_ADDR
// if dir < 0 then
6567: LD_VAR 0 5
6571: PUSH
6572: LD_INT 0
6574: LESS
6575: IFFALSE 6591
// dir := 6 + dir ;
6577: LD_ADDR_VAR 0 5
6581: PUSH
6582: LD_INT 6
6584: PUSH
6585: LD_VAR 0 5
6589: PLUS
6590: ST_TO_ADDR
// un := CreateHuman ;
6591: LD_ADDR_VAR 0 4
6595: PUSH
6596: CALL_OW 44
6600: ST_TO_ADDR
// SetDir ( un , dir ) ;
6601: LD_VAR 0 4
6605: PPUSH
6606: LD_VAR 0 5
6610: PPUSH
6611: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6615: LD_VAR 0 4
6619: PPUSH
6620: LD_VAR 0 2
6624: PPUSH
6625: CALL_OW 52
// end ;
6629: LD_VAR 0 3
6633: RET
// export function PrepareDifficulty ; begin
6634: LD_INT 0
6636: PPUSH
// if Difficulty = 1 then
6637: LD_OWVAR 67
6641: PUSH
6642: LD_INT 1
6644: EQUAL
6645: IFFALSE 6663
// begin RuSolMinLevel = 2 ;
6647: LD_ADDR_EXP 34
6651: PUSH
6652: LD_INT 2
6654: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6655: LD_ADDR_EXP 35
6659: PUSH
6660: LD_INT 3
6662: ST_TO_ADDR
// end ; if Difficulty = 2 then
6663: LD_OWVAR 67
6667: PUSH
6668: LD_INT 2
6670: EQUAL
6671: IFFALSE 6689
// begin RuSolMinLevel = 3 ;
6673: LD_ADDR_EXP 34
6677: PUSH
6678: LD_INT 3
6680: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6681: LD_ADDR_EXP 35
6685: PUSH
6686: LD_INT 5
6688: ST_TO_ADDR
// end ; if Difficulty = 3 then
6689: LD_OWVAR 67
6693: PUSH
6694: LD_INT 3
6696: EQUAL
6697: IFFALSE 6715
// begin RuSolMinLevel = 4 ;
6699: LD_ADDR_EXP 34
6703: PUSH
6704: LD_INT 4
6706: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6707: LD_ADDR_EXP 35
6711: PUSH
6712: LD_INT 6
6714: ST_TO_ADDR
// end ; end ;
6715: LD_VAR 0 1
6719: RET
// export function ShowQuery1 ; begin
6720: LD_INT 0
6722: PPUSH
// case query ( QKill ) of 1 :
6723: LD_STRING QKill
6725: PPUSH
6726: CALL_OW 97
6730: PUSH
6731: LD_INT 1
6733: DOUBLE
6734: EQUAL
6735: IFTRUE 6739
6737: GO 6750
6739: POP
// begin result = 1 ;
6740: LD_ADDR_VAR 0 1
6744: PUSH
6745: LD_INT 1
6747: ST_TO_ADDR
// end ; 2 :
6748: GO 6789
6750: LD_INT 2
6752: DOUBLE
6753: EQUAL
6754: IFTRUE 6758
6756: GO 6769
6758: POP
// begin result = 2 ;
6759: LD_ADDR_VAR 0 1
6763: PUSH
6764: LD_INT 2
6766: ST_TO_ADDR
// end ; 3 :
6767: GO 6789
6769: LD_INT 3
6771: DOUBLE
6772: EQUAL
6773: IFTRUE 6777
6775: GO 6788
6777: POP
// begin result = 3 ;
6778: LD_ADDR_VAR 0 1
6782: PUSH
6783: LD_INT 3
6785: ST_TO_ADDR
// end ; end ;
6786: GO 6789
6788: POP
// end ;
6789: LD_VAR 0 1
6793: RET
// export function ShowQuery2 ; begin
6794: LD_INT 0
6796: PPUSH
// case query ( QKill2 ) of 1 :
6797: LD_STRING QKill2
6799: PPUSH
6800: CALL_OW 97
6804: PUSH
6805: LD_INT 1
6807: DOUBLE
6808: EQUAL
6809: IFTRUE 6813
6811: GO 6824
6813: POP
// begin result = 1 ;
6814: LD_ADDR_VAR 0 1
6818: PUSH
6819: LD_INT 1
6821: ST_TO_ADDR
// end ; 2 :
6822: GO 6844
6824: LD_INT 2
6826: DOUBLE
6827: EQUAL
6828: IFTRUE 6832
6830: GO 6843
6832: POP
// begin result = 2 ;
6833: LD_ADDR_VAR 0 1
6837: PUSH
6838: LD_INT 2
6840: ST_TO_ADDR
// end ; end ;
6841: GO 6844
6843: POP
// end ;
6844: LD_VAR 0 1
6848: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6849: LD_INT 0
6851: PPUSH
6852: PPUSH
6853: PPUSH
6854: PPUSH
6855: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6856: LD_ADDR_VAR 0 8
6860: PUSH
6861: LD_INT 48
6863: PUSH
6864: LD_INT 49
6866: PUSH
6867: LD_INT 50
6869: PUSH
6870: LD_INT 20
6872: PUSH
6873: LD_INT 1
6875: PUSH
6876: LD_INT 51
6878: PUSH
6879: LD_INT 52
6881: PUSH
6882: LD_INT 69
6884: PUSH
6885: LD_INT 39
6887: PUSH
6888: LD_INT 34
6890: PUSH
6891: LD_INT 40
6893: PUSH
6894: LD_INT 53
6896: PUSH
6897: LD_INT 71
6899: PUSH
6900: LD_INT 57
6902: PUSH
6903: LD_INT 58
6905: PUSH
6906: LD_INT 44
6908: PUSH
6909: LD_INT 32
6911: PUSH
6912: LD_INT 27
6914: PUSH
6915: LD_INT 23
6917: PUSH
6918: LD_INT 33
6920: PUSH
6921: LD_INT 59
6923: PUSH
6924: LD_INT 54
6926: PUSH
6927: LD_INT 55
6929: PUSH
6930: LD_INT 56
6932: PUSH
6933: LD_INT 63
6935: PUSH
6936: LD_INT 64
6938: PUSH
6939: LD_INT 65
6941: PUSH
6942: LD_INT 30
6944: PUSH
6945: LD_INT 31
6947: PUSH
6948: LD_INT 21
6950: PUSH
6951: LD_INT 22
6953: PUSH
6954: LD_INT 25
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6991: LD_ADDR_VAR 0 5
6995: PUSH
6996: DOUBLE
6997: LD_INT 1
6999: DEC
7000: ST_TO_ADDR
7001: LD_VAR 0 8
7005: PUSH
7006: FOR_TO
7007: IFFALSE 7083
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
7009: LD_VAR 0 8
7013: PUSH
7014: LD_VAR 0 5
7018: ARRAY
7019: PPUSH
7020: LD_VAR 0 1
7024: PPUSH
7025: CALL_OW 321
7029: PUSH
7030: LD_INT 1
7032: EQUAL
7033: PUSH
7034: LD_VAR 0 8
7038: PUSH
7039: LD_VAR 0 5
7043: ARRAY
7044: PPUSH
7045: LD_VAR 0 3
7049: PPUSH
7050: CALL_OW 482
7054: PUSH
7055: LD_INT 1
7057: EQUAL
7058: AND
7059: IFFALSE 7081
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
7061: LD_VAR 0 2
7065: PPUSH
7066: LD_VAR 0 8
7070: PUSH
7071: LD_VAR 0 5
7075: ARRAY
7076: PPUSH
7077: CALL_OW 184
7081: GO 7006
7083: POP
7084: POP
// end ;
7085: LD_VAR 0 4
7089: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7090: LD_INT 0
7092: PPUSH
7093: PPUSH
7094: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7095: LD_INT 22
7097: PUSH
7098: LD_VAR 0 1
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 21
7109: PUSH
7110: LD_INT 2
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PPUSH
7121: CALL_OW 69
7125: PUSH
7126: LD_VAR 0 3
7130: LESSEQUAL
7131: IFFALSE 7239
// begin for i = 1 to vehCount do
7133: LD_ADDR_VAR 0 9
7137: PUSH
7138: DOUBLE
7139: LD_INT 1
7141: DEC
7142: ST_TO_ADDR
7143: LD_VAR 0 3
7147: PUSH
7148: FOR_TO
7149: IFFALSE 7237
// begin weapon = weaponTab [ i ] ;
7151: LD_ADDR_VAR 0 10
7155: PUSH
7156: LD_VAR 0 4
7160: PUSH
7161: LD_VAR 0 9
7165: ARRAY
7166: ST_TO_ADDR
// if weapon = 46 then
7167: LD_VAR 0 10
7171: PUSH
7172: LD_INT 46
7174: EQUAL
7175: IFFALSE 7206
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
7177: LD_VAR 0 2
7181: PPUSH
7182: LD_INT 24
7184: PPUSH
7185: LD_VAR 0 5
7189: PPUSH
7190: LD_VAR 0 6
7194: PPUSH
7195: LD_VAR 0 10
7199: PPUSH
7200: CALL_OW 185
// end else
7204: GO 7235
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7206: LD_VAR 0 2
7210: PPUSH
7211: LD_VAR 0 7
7215: PPUSH
7216: LD_VAR 0 5
7220: PPUSH
7221: LD_VAR 0 6
7225: PPUSH
7226: LD_VAR 0 10
7230: PPUSH
7231: CALL_OW 185
// end ; end ;
7235: GO 7148
7237: POP
7238: POP
// end ; end ;
7239: LD_VAR 0 8
7243: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7244: LD_INT 0
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7250: LD_ADDR_VAR 0 8
7254: PUSH
7255: LD_INT 22
7257: PUSH
7258: LD_VAR 0 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 21
7269: PUSH
7270: LD_INT 2
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 3
7279: PUSH
7280: LD_INT 24
7282: PUSH
7283: LD_INT 650
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: LIST
7298: PPUSH
7299: CALL_OW 69
7303: ST_TO_ADDR
// if damageVehicles > 0 then
7304: LD_VAR 0 8
7308: PUSH
7309: LD_INT 0
7311: GREATER
7312: IFFALSE 7333
// ComMoveXY ( damageVehicles , repX , repY ) ;
7314: LD_VAR 0 8
7318: PPUSH
7319: LD_VAR 0 3
7323: PPUSH
7324: LD_VAR 0 4
7328: PPUSH
7329: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7333: LD_VAR 0 8
7337: PPUSH
7338: LD_INT 95
7340: PUSH
7341: LD_VAR 0 2
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: LD_INT 58
7355: PUSH
7356: EMPTY
7357: LIST
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PPUSH
7367: CALL_OW 72
7371: PUSH
7372: LD_INT 0
7374: GREATER
7375: IFFALSE 7442
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7377: LD_ADDR_VAR 0 6
7381: PUSH
7382: LD_VAR 0 8
7386: PPUSH
7387: LD_INT 95
7389: PUSH
7390: LD_VAR 0 2
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: LD_INT 58
7404: PUSH
7405: EMPTY
7406: LIST
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 72
7420: PUSH
7421: FOR_IN
7422: IFFALSE 7440
// ComExitVehicle ( UnitsInside ( i ) ) ;
7424: LD_VAR 0 6
7428: PPUSH
7429: CALL_OW 313
7433: PPUSH
7434: CALL_OW 121
7438: GO 7421
7440: POP
7441: POP
// end ;
7442: LD_VAR 0 5
7446: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7447: LD_INT 0
7449: PPUSH
7450: PPUSH
7451: PPUSH
7452: PPUSH
7453: PPUSH
7454: PPUSH
7455: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7456: LD_ADDR_VAR 0 8
7460: PUSH
7461: LD_INT 22
7463: PUSH
7464: LD_VAR 0 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: LD_INT 21
7475: PUSH
7476: LD_INT 2
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 24
7485: PUSH
7486: LD_INT 660
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 3
7495: PUSH
7496: LD_INT 58
7498: PUSH
7499: EMPTY
7500: LIST
7501: PUSH
7502: LD_INT 2
7504: PUSH
7505: LD_INT 34
7507: PUSH
7508: LD_INT 43
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: LD_INT 34
7517: PUSH
7518: LD_INT 44
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 34
7527: PUSH
7528: LD_INT 46
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: LIST
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: PPUSH
7552: CALL_OW 69
7556: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7557: LD_INT 22
7559: PUSH
7560: LD_VAR 0 1
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 21
7571: PUSH
7572: LD_INT 2
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PUSH
7579: LD_INT 24
7581: PUSH
7582: LD_INT 1000
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: LD_INT 3
7591: PUSH
7592: LD_INT 58
7594: PUSH
7595: EMPTY
7596: LIST
7597: PUSH
7598: LD_INT 2
7600: PUSH
7601: LD_INT 34
7603: PUSH
7604: LD_INT 43
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PUSH
7611: LD_INT 34
7613: PUSH
7614: LD_INT 44
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: LD_INT 34
7623: PUSH
7624: LD_INT 46
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: PPUSH
7648: CALL_OW 69
7652: PUSH
7653: LD_INT 5
7655: PUSH
7656: LD_INT 6
7658: PUSH
7659: LD_INT 6
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: LIST
7666: PUSH
7667: LD_OWVAR 67
7671: ARRAY
7672: EQUAL
7673: IFFALSE 7929
// if seeEnemy = 0 then
7675: LD_VAR 0 11
7679: PUSH
7680: LD_INT 0
7682: EQUAL
7683: IFFALSE 7929
// repeat wait ( 0 0$1 ) ;
7685: LD_INT 35
7687: PPUSH
7688: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7692: LD_ADDR_VAR 0 8
7696: PUSH
7697: LD_INT 22
7699: PUSH
7700: LD_VAR 0 1
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PUSH
7709: LD_INT 21
7711: PUSH
7712: LD_INT 2
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: PUSH
7719: LD_INT 24
7721: PUSH
7722: LD_INT 660
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 3
7731: PUSH
7732: LD_INT 58
7734: PUSH
7735: EMPTY
7736: LIST
7737: PUSH
7738: LD_INT 2
7740: PUSH
7741: LD_INT 34
7743: PUSH
7744: LD_INT 43
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 34
7753: PUSH
7754: LD_INT 44
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 34
7763: PUSH
7764: LD_INT 46
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: PPUSH
7788: CALL_OW 69
7792: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7793: LD_INT 22
7795: PUSH
7796: LD_VAR 0 1
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 95
7807: PUSH
7808: LD_VAR 0 2
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PPUSH
7821: CALL_OW 69
7825: NOT
7826: PUSH
7827: LD_VAR 0 11
7831: PUSH
7832: LD_INT 0
7834: EQUAL
7835: AND
7836: IFFALSE 7891
// for i := 1 to wayX do
7838: LD_ADDR_VAR 0 6
7842: PUSH
7843: DOUBLE
7844: LD_INT 1
7846: DEC
7847: ST_TO_ADDR
7848: LD_VAR 0 3
7852: PUSH
7853: FOR_TO
7854: IFFALSE 7889
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7856: LD_VAR 0 8
7860: PPUSH
7861: LD_VAR 0 3
7865: PUSH
7866: LD_VAR 0 6
7870: ARRAY
7871: PPUSH
7872: LD_VAR 0 4
7876: PUSH
7877: LD_VAR 0 6
7881: ARRAY
7882: PPUSH
7883: CALL_OW 114
7887: GO 7853
7889: POP
7890: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7891: LD_INT 22
7893: PUSH
7894: LD_VAR 0 1
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: LD_INT 95
7905: PUSH
7906: LD_VAR 0 2
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PPUSH
7919: CALL_OW 69
7923: PUSH
7924: LD_INT 0
7926: GREATER
7927: IFFALSE 7685
// seeEnemy = 1 ;
7929: LD_ADDR_VAR 0 11
7933: PUSH
7934: LD_INT 1
7936: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7937: LD_INT 35
7939: PPUSH
7940: CALL_OW 67
// for j in vehiclesOK do
7944: LD_ADDR_VAR 0 7
7948: PUSH
7949: LD_VAR 0 8
7953: PUSH
7954: FOR_IN
7955: IFFALSE 8168
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7957: LD_ADDR_VAR 0 9
7961: PUSH
7962: LD_INT 81
7964: PUSH
7965: LD_VAR 0 1
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 101
7976: PUSH
7977: LD_INT 1
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PPUSH
7988: CALL_OW 69
7992: PUSH
7993: LD_EXP 45
7997: DIFF
7998: PPUSH
7999: LD_VAR 0 7
8003: PPUSH
8004: CALL_OW 74
8008: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
8009: LD_ADDR_VAR 0 10
8013: PUSH
8014: LD_INT 81
8016: PUSH
8017: LD_VAR 0 1
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PUSH
8026: LD_INT 101
8028: PUSH
8029: LD_INT 1
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 2
8038: PUSH
8039: LD_INT 59
8041: PUSH
8042: EMPTY
8043: LIST
8044: PUSH
8045: LD_INT 21
8047: PUSH
8048: LD_INT 1
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 21
8057: PUSH
8058: LD_INT 2
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: LIST
8075: PUSH
8076: EMPTY
8077: LIST
8078: PPUSH
8079: CALL_OW 69
8083: PUSH
8084: LD_EXP 45
8088: DIFF
8089: PPUSH
8090: LD_VAR 0 7
8094: PPUSH
8095: CALL_OW 74
8099: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
8100: LD_VAR 0 7
8104: PPUSH
8105: LD_VAR 0 9
8109: PPUSH
8110: CALL_OW 296
8114: PUSH
8115: LD_INT 8
8117: PLUS
8118: PUSH
8119: LD_VAR 0 7
8123: PPUSH
8124: LD_VAR 0 10
8128: PPUSH
8129: CALL_OW 296
8133: LESS
8134: IFFALSE 8152
// ComAttackUnit ( j , target1 ) else
8136: LD_VAR 0 7
8140: PPUSH
8141: LD_VAR 0 9
8145: PPUSH
8146: CALL_OW 115
8150: GO 8166
// ComAttackUnit ( j , target2 ) ;
8152: LD_VAR 0 7
8156: PPUSH
8157: LD_VAR 0 10
8161: PPUSH
8162: CALL_OW 115
// end ;
8166: GO 7954
8168: POP
8169: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
8170: LD_INT 22
8172: PUSH
8173: LD_VAR 0 1
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_INT 21
8184: PUSH
8185: LD_INT 2
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PUSH
8192: LD_INT 24
8194: PUSH
8195: LD_INT 1000
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 3
8204: PUSH
8205: LD_INT 58
8207: PUSH
8208: EMPTY
8209: LIST
8210: PUSH
8211: LD_INT 2
8213: PUSH
8214: LD_INT 34
8216: PUSH
8217: LD_INT 43
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: LD_INT 34
8226: PUSH
8227: LD_INT 44
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 34
8236: PUSH
8237: LD_INT 46
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: LIST
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: PPUSH
8261: CALL_OW 69
8265: PUSH
8266: LD_INT 0
8268: EQUAL
8269: IFFALSE 7937
// seeEnemy = 0 ;
8271: LD_ADDR_VAR 0 11
8275: PUSH
8276: LD_INT 0
8278: ST_TO_ADDR
// end ;
8279: LD_VAR 0 5
8283: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8284: LD_INT 0
8286: PPUSH
8287: PPUSH
8288: PPUSH
8289: PPUSH
8290: PPUSH
8291: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8292: LD_ADDR_VAR 0 8
8296: PUSH
8297: LD_VAR 0 2
8301: PPUSH
8302: CALL_OW 313
8306: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8307: LD_ADDR_VAR 0 9
8311: PUSH
8312: LD_VAR 0 3
8316: PPUSH
8317: LD_INT 22
8319: PUSH
8320: LD_VAR 0 1
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 25
8331: PUSH
8332: LD_INT 2
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PUSH
8339: LD_INT 24
8341: PUSH
8342: LD_INT 750
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 3
8351: PUSH
8352: LD_INT 54
8354: PUSH
8355: EMPTY
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: PPUSH
8368: CALL_OW 70
8372: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8373: LD_ADDR_VAR 0 6
8377: PUSH
8378: LD_VAR 0 3
8382: PPUSH
8383: LD_INT 22
8385: PUSH
8386: LD_VAR 0 1
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: LD_INT 21
8397: PUSH
8398: LD_INT 3
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: LD_INT 3
8407: PUSH
8408: LD_INT 24
8410: PUSH
8411: LD_INT 1000
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: LIST
8426: PUSH
8427: EMPTY
8428: LIST
8429: PPUSH
8430: CALL_OW 70
8434: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8435: LD_VAR 0 6
8439: NOT
8440: PUSH
8441: LD_INT 22
8443: PUSH
8444: LD_VAR 0 1
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: LD_INT 25
8455: PUSH
8456: LD_INT 2
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: PUSH
8463: LD_INT 24
8465: PUSH
8466: LD_INT 250
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: PPUSH
8478: CALL_OW 69
8482: NOT
8483: AND
8484: IFFALSE 8488
// exit ;
8486: GO 8670
// if buildings_list > 0 and engineerOkInside then
8488: LD_VAR 0 6
8492: PUSH
8493: LD_INT 0
8495: GREATER
8496: PUSH
8497: LD_VAR 0 8
8501: AND
8502: IFFALSE 8513
// ComExitBuilding ( engineerOkInside ) ;
8504: LD_VAR 0 8
8508: PPUSH
8509: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8513: LD_VAR 0 6
8517: PUSH
8518: LD_INT 0
8520: GREATER
8521: PUSH
8522: LD_VAR 0 9
8526: PUSH
8527: LD_INT 0
8529: GREATER
8530: AND
8531: IFFALSE 8551
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8533: LD_VAR 0 9
8537: PPUSH
8538: LD_VAR 0 6
8542: PUSH
8543: LD_INT 1
8545: ARRAY
8546: PPUSH
8547: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8551: LD_VAR 0 6
8555: PUSH
8556: LD_INT 0
8558: EQUAL
8559: PUSH
8560: LD_VAR 0 4
8564: PUSH
8565: LD_INT 0
8567: EQUAL
8568: AND
8569: PUSH
8570: LD_VAR 0 9
8574: PUSH
8575: LD_INT 0
8577: GREATER
8578: AND
8579: IFFALSE 8595
// ComEnterUnit ( engineerOkOutside , building ) ;
8581: LD_VAR 0 9
8585: PPUSH
8586: LD_VAR 0 2
8590: PPUSH
8591: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8595: LD_VAR 0 9
8599: PUSH
8600: LD_INT 0
8602: GREATER
8603: PUSH
8604: LD_VAR 0 6
8608: PUSH
8609: LD_INT 0
8611: EQUAL
8612: AND
8613: PUSH
8614: LD_VAR 0 4
8618: PUSH
8619: LD_INT 0
8621: GREATER
8622: AND
8623: IFFALSE 8670
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8625: LD_VAR 0 9
8629: PPUSH
8630: LD_VAR 0 4
8634: PUSH
8635: LD_INT 1
8637: ARRAY
8638: PPUSH
8639: LD_VAR 0 4
8643: PUSH
8644: LD_INT 2
8646: ARRAY
8647: PPUSH
8648: LD_VAR 0 4
8652: PUSH
8653: LD_INT 3
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 4
8661: PUSH
8662: LD_INT 4
8664: ARRAY
8665: PPUSH
8666: CALL_OW 145
// end ;
8670: LD_VAR 0 5
8674: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8675: LD_INT 0
8677: PPUSH
8678: PPUSH
8679: PPUSH
8680: PPUSH
8681: PPUSH
8682: PPUSH
8683: PPUSH
8684: PPUSH
8685: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8686: LD_ADDR_VAR 0 6
8690: PUSH
8691: LD_INT 22
8693: PUSH
8694: LD_VAR 0 1
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: LD_INT 25
8705: PUSH
8706: LD_INT 4
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: PUSH
8713: LD_INT 23
8715: PUSH
8716: LD_INT 2
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 24
8725: PUSH
8726: LD_INT 251
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: PPUSH
8739: CALL_OW 69
8743: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8744: LD_ADDR_VAR 0 7
8748: PUSH
8749: LD_VAR 0 3
8753: PPUSH
8754: LD_INT 22
8756: PUSH
8757: LD_VAR 0 1
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 23
8768: PUSH
8769: LD_INT 2
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: LD_INT 25
8778: PUSH
8779: LD_INT 4
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 50
8788: PUSH
8789: EMPTY
8790: LIST
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: PPUSH
8798: CALL_OW 70
8802: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8803: LD_ADDR_VAR 0 10
8807: PUSH
8808: LD_VAR 0 3
8812: PPUSH
8813: LD_INT 22
8815: PUSH
8816: LD_VAR 0 1
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PUSH
8825: LD_INT 21
8827: PUSH
8828: LD_INT 1
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 3
8837: PUSH
8838: LD_INT 25
8840: PUSH
8841: LD_INT 3
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PUSH
8852: LD_INT 3
8854: PUSH
8855: LD_INT 24
8857: PUSH
8858: LD_INT 750
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 70
8879: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8880: LD_ADDR_VAR 0 11
8884: PUSH
8885: LD_VAR 0 2
8889: PPUSH
8890: LD_INT 22
8892: PUSH
8893: LD_VAR 0 1
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: LD_INT 21
8904: PUSH
8905: LD_INT 1
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 3
8914: PUSH
8915: LD_INT 25
8917: PUSH
8918: LD_INT 3
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 3
8931: PUSH
8932: LD_INT 24
8934: PUSH
8935: LD_INT 1000
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 70
8956: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8957: LD_VAR 0 10
8961: NOT
8962: PUSH
8963: LD_VAR 0 11
8967: NOT
8968: AND
8969: PUSH
8970: LD_VAR 0 6
8974: NOT
8975: AND
8976: IFFALSE 8980
// exit ;
8978: GO 9214
// if damageUnits > 0 and sci_list > 0 then
8980: LD_VAR 0 10
8984: PUSH
8985: LD_INT 0
8987: GREATER
8988: PUSH
8989: LD_VAR 0 6
8993: PUSH
8994: LD_INT 0
8996: GREATER
8997: AND
8998: IFFALSE 9014
// ComMoveToArea ( damageUnits , healArea ) ;
9000: LD_VAR 0 10
9004: PPUSH
9005: LD_VAR 0 2
9009: PPUSH
9010: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
9014: LD_VAR 0 11
9018: PUSH
9019: LD_INT 0
9021: GREATER
9022: PUSH
9023: LD_VAR 0 6
9027: PUSH
9028: LD_INT 0
9030: GREATER
9031: AND
9032: IFFALSE 9043
// ComExitBuilding ( sci_list ) ;
9034: LD_VAR 0 6
9038: PPUSH
9039: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
9043: LD_VAR 0 11
9047: PUSH
9048: LD_INT 0
9050: GREATER
9051: PUSH
9052: LD_VAR 0 7
9056: PUSH
9057: LD_INT 0
9059: GREATER
9060: AND
9061: IFFALSE 9081
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9063: LD_VAR 0 7
9067: PPUSH
9068: LD_VAR 0 11
9072: PUSH
9073: LD_INT 1
9075: ARRAY
9076: PPUSH
9077: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
9081: LD_VAR 0 10
9085: PUSH
9086: LD_INT 0
9088: EQUAL
9089: PUSH
9090: LD_VAR 0 11
9094: PUSH
9095: LD_INT 0
9097: EQUAL
9098: AND
9099: PUSH
9100: LD_VAR 0 7
9104: PUSH
9105: LD_INT 0
9107: GREATER
9108: AND
9109: IFFALSE 9214
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9111: LD_ADDR_VAR 0 12
9115: PUSH
9116: LD_INT 22
9118: PUSH
9119: LD_VAR 0 1
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 21
9130: PUSH
9131: LD_INT 3
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: LD_INT 30
9140: PUSH
9141: LD_INT 8
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: LIST
9152: PPUSH
9153: CALL_OW 69
9157: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
9158: LD_ADDR_VAR 0 13
9162: PUSH
9163: LD_INT 1
9165: PPUSH
9166: LD_VAR 0 12
9170: PPUSH
9171: CALL_OW 12
9175: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9176: LD_VAR 0 7
9180: PPUSH
9181: LD_INT 3
9183: PUSH
9184: LD_INT 60
9186: PUSH
9187: EMPTY
9188: LIST
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PPUSH
9194: CALL_OW 72
9198: PPUSH
9199: LD_VAR 0 12
9203: PUSH
9204: LD_VAR 0 13
9208: ARRAY
9209: PPUSH
9210: CALL_OW 120
// end ; end ;
9214: LD_VAR 0 5
9218: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
9219: LD_INT 0
9221: PPUSH
9222: PPUSH
9223: PPUSH
9224: PPUSH
// tmpTab = [ ] ;
9225: LD_ADDR_VAR 0 6
9229: PUSH
9230: EMPTY
9231: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9232: LD_INT 22
9234: PUSH
9235: LD_VAR 0 1
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 30
9246: PUSH
9247: LD_INT 32
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: PPUSH
9258: CALL_OW 69
9262: PUSH
9263: LD_INT 0
9265: GREATER
9266: IFFALSE 9349
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9268: LD_ADDR_VAR 0 4
9272: PUSH
9273: LD_INT 22
9275: PUSH
9276: LD_VAR 0 1
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: LD_INT 30
9287: PUSH
9288: LD_INT 32
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 69
9303: PUSH
9304: FOR_IN
9305: IFFALSE 9347
// begin for j in UnitsInside ( i ) do
9307: LD_ADDR_VAR 0 5
9311: PUSH
9312: LD_VAR 0 4
9316: PPUSH
9317: CALL_OW 313
9321: PUSH
9322: FOR_IN
9323: IFFALSE 9343
// tmpTab = tmpTab ^ j ;
9325: LD_ADDR_VAR 0 6
9329: PUSH
9330: LD_VAR 0 6
9334: PUSH
9335: LD_VAR 0 5
9339: ADD
9340: ST_TO_ADDR
9341: GO 9322
9343: POP
9344: POP
// end ;
9345: GO 9304
9347: POP
9348: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9349: LD_VAR 0 6
9353: PPUSH
9354: LD_VAR 0 2
9358: PPUSH
9359: CALL_OW 250
9363: PPUSH
9364: LD_VAR 0 2
9368: PPUSH
9369: CALL_OW 251
9373: PPUSH
9374: CALL_OW 114
// end ;
9378: LD_VAR 0 3
9382: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9383: LD_INT 0
9385: PPUSH
9386: PPUSH
9387: PPUSH
9388: PPUSH
// enable ;
9389: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9390: LD_ADDR_VAR 0 7
9394: PUSH
9395: LD_VAR 0 3
9399: PPUSH
9400: CALL_OW 435
9404: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9405: LD_ADDR_VAR 0 6
9409: PUSH
9410: LD_INT 22
9412: PUSH
9413: LD_VAR 0 1
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: LD_INT 34
9424: PUSH
9425: LD_VAR 0 2
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PPUSH
9438: CALL_OW 69
9442: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9443: LD_VAR 0 6
9447: PUSH
9448: LD_INT 0
9450: GREATER
9451: PUSH
9452: LD_VAR 0 3
9456: PPUSH
9457: CALL_OW 435
9461: AND
9462: PUSH
9463: LD_VAR 0 7
9467: PUSH
9468: LD_INT 0
9470: GREATER
9471: AND
9472: IFFALSE 9521
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9474: LD_VAR 0 6
9478: PUSH
9479: LD_INT 1
9481: ARRAY
9482: PPUSH
9483: LD_VAR 0 7
9487: PUSH
9488: LD_INT 1
9490: ARRAY
9491: PPUSH
9492: LD_VAR 0 7
9496: PUSH
9497: LD_INT 2
9499: ARRAY
9500: PPUSH
9501: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9505: LD_VAR 0 6
9509: PUSH
9510: LD_INT 1
9512: ARRAY
9513: PPUSH
9514: LD_INT 100
9516: PPUSH
9517: CALL_OW 240
// end ; end ;
9521: LD_VAR 0 4
9525: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9526: LD_INT 0
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9536: LD_ADDR_VAR 0 6
9540: PUSH
9541: LD_VAR 0 2
9545: PPUSH
9546: LD_INT 22
9548: PUSH
9549: LD_VAR 0 1
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 56
9560: PUSH
9561: EMPTY
9562: LIST
9563: PUSH
9564: LD_INT 24
9566: PUSH
9567: LD_INT 700
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 3
9576: PUSH
9577: LD_INT 60
9579: PUSH
9580: EMPTY
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 2
9589: PUSH
9590: LD_INT 25
9592: PUSH
9593: LD_INT 1
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 25
9602: PUSH
9603: LD_INT 5
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 25
9612: PUSH
9613: LD_INT 8
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 25
9622: PUSH
9623: LD_INT 9
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: PPUSH
9644: CALL_OW 70
9648: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9649: LD_ADDR_VAR 0 7
9653: PUSH
9654: LD_VAR 0 2
9658: PPUSH
9659: LD_INT 22
9661: PUSH
9662: LD_VAR 0 1
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: LD_INT 30
9673: PUSH
9674: LD_INT 32
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 58
9683: PUSH
9684: EMPTY
9685: LIST
9686: PUSH
9687: LD_INT 24
9689: PUSH
9690: LD_INT 251
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: PPUSH
9703: CALL_OW 70
9707: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9708: LD_ADDR_VAR 0 9
9712: PUSH
9713: LD_VAR 0 2
9717: PPUSH
9718: LD_INT 22
9720: PUSH
9721: LD_VAR 0 1
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PUSH
9730: LD_INT 2
9732: PUSH
9733: LD_INT 30
9735: PUSH
9736: LD_INT 4
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 30
9745: PUSH
9746: LD_INT 5
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 24
9760: PUSH
9761: LD_INT 251
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: LIST
9772: PPUSH
9773: CALL_OW 70
9777: ST_TO_ADDR
// if barrackList > 0 then
9778: LD_VAR 0 9
9782: PUSH
9783: LD_INT 0
9785: GREATER
9786: IFFALSE 9934
// begin if turretList = 0 then
9788: LD_VAR 0 7
9792: PUSH
9793: LD_INT 0
9795: EQUAL
9796: IFFALSE 9838
// begin if soldiers_list > 0 then
9798: LD_VAR 0 6
9802: PUSH
9803: LD_INT 0
9805: GREATER
9806: IFFALSE 9836
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9808: LD_VAR 0 6
9812: PPUSH
9813: LD_VAR 0 9
9817: PUSH
9818: LD_INT 1
9820: PPUSH
9821: LD_VAR 0 9
9825: PPUSH
9826: CALL_OW 12
9830: ARRAY
9831: PPUSH
9832: CALL_OW 120
// end else
9836: GO 9934
// begin for i in barrackList do
9838: LD_ADDR_VAR 0 4
9842: PUSH
9843: LD_VAR 0 9
9847: PUSH
9848: FOR_IN
9849: IFFALSE 9932
// begin insideUnits = UnitsInside ( i ) ;
9851: LD_ADDR_VAR 0 10
9855: PUSH
9856: LD_VAR 0 4
9860: PPUSH
9861: CALL_OW 313
9865: ST_TO_ADDR
// if insideUnits > 0 then
9866: LD_VAR 0 10
9870: PUSH
9871: LD_INT 0
9873: GREATER
9874: IFFALSE 9898
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9876: LD_VAR 0 10
9880: PUSH
9881: LD_INT 1
9883: ARRAY
9884: PPUSH
9885: LD_VAR 0 7
9889: PUSH
9890: LD_INT 1
9892: ARRAY
9893: PPUSH
9894: CALL_OW 120
// if soldiers_list > 0 then
9898: LD_VAR 0 6
9902: PUSH
9903: LD_INT 0
9905: GREATER
9906: IFFALSE 9930
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9908: LD_VAR 0 6
9912: PUSH
9913: LD_INT 1
9915: ARRAY
9916: PPUSH
9917: LD_VAR 0 7
9921: PUSH
9922: LD_INT 1
9924: ARRAY
9925: PPUSH
9926: CALL_OW 120
// end ;
9930: GO 9848
9932: POP
9933: POP
// end ; end ; end ;
9934: LD_VAR 0 3
9938: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9939: LD_INT 0
9941: PPUSH
9942: PPUSH
9943: PPUSH
9944: PPUSH
9945: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9946: LD_ADDR_VAR 0 6
9950: PUSH
9951: LD_INT 22
9953: PUSH
9954: LD_VAR 0 1
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: LD_INT 2
9965: PUSH
9966: LD_INT 30
9968: PUSH
9969: LD_INT 31
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 30
9978: PUSH
9979: LD_INT 32
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: LD_INT 30
9988: PUSH
9989: LD_INT 33
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 30
9998: PUSH
9999: LD_INT 4
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 30
10008: PUSH
10009: LD_INT 5
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PPUSH
10028: CALL_OW 69
10032: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10033: LD_ADDR_VAR 0 7
10037: PUSH
10038: LD_INT 22
10040: PUSH
10041: LD_VAR 0 2
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: LD_INT 21
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 58
10062: PUSH
10063: EMPTY
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: PPUSH
10071: CALL_OW 69
10075: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
10076: LD_VAR 0 6
10080: PUSH
10081: LD_INT 0
10083: GREATER
10084: PUSH
10085: LD_VAR 0 7
10089: PUSH
10090: LD_INT 0
10092: GREATER
10093: AND
10094: IFFALSE 10164
// begin for i in turretsList do
10096: LD_ADDR_VAR 0 4
10100: PUSH
10101: LD_VAR 0 6
10105: PUSH
10106: FOR_IN
10107: IFFALSE 10162
// begin for j in enemyBuildings do
10109: LD_ADDR_VAR 0 5
10113: PUSH
10114: LD_VAR 0 7
10118: PUSH
10119: FOR_IN
10120: IFFALSE 10158
// begin if GetDistUnits ( i , j ) < 20 then
10122: LD_VAR 0 4
10126: PPUSH
10127: LD_VAR 0 5
10131: PPUSH
10132: CALL_OW 296
10136: PUSH
10137: LD_INT 20
10139: LESS
10140: IFFALSE 10156
// begin ComAttackUnit ( i , j ) ;
10142: LD_VAR 0 4
10146: PPUSH
10147: LD_VAR 0 5
10151: PPUSH
10152: CALL_OW 115
// end ; end ;
10156: GO 10119
10158: POP
10159: POP
// end ;
10160: GO 10106
10162: POP
10163: POP
// end ; end ;
10164: LD_VAR 0 3
10168: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10169: LD_INT 0
10171: PPUSH
10172: PPUSH
10173: PPUSH
10174: PPUSH
10175: PPUSH
10176: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10177: LD_ADDR_VAR 0 8
10181: PUSH
10182: LD_INT 22
10184: PUSH
10185: LD_VAR 0 1
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: LD_INT 21
10196: PUSH
10197: LD_INT 2
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PUSH
10204: LD_INT 34
10206: PUSH
10207: LD_INT 52
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: PPUSH
10219: CALL_OW 69
10223: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10224: LD_ADDR_VAR 0 9
10228: PUSH
10229: LD_INT 22
10231: PUSH
10232: LD_VAR 0 1
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: LD_INT 21
10243: PUSH
10244: LD_INT 3
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: LD_INT 3
10253: PUSH
10254: LD_INT 24
10256: PUSH
10257: LD_INT 1000
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: LIST
10272: PUSH
10273: EMPTY
10274: LIST
10275: PPUSH
10276: CALL_OW 69
10280: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10281: LD_VAR 0 9
10285: PUSH
10286: LD_INT 0
10288: GREATER
10289: PUSH
10290: LD_VAR 0 8
10294: PPUSH
10295: LD_INT 24
10297: PUSH
10298: LD_INT 750
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PPUSH
10305: CALL_OW 72
10309: PUSH
10310: LD_INT 0
10312: GREATER
10313: AND
10314: IFFALSE 10349
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10316: LD_VAR 0 8
10320: PPUSH
10321: LD_INT 24
10323: PUSH
10324: LD_INT 750
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PPUSH
10331: CALL_OW 72
10335: PPUSH
10336: LD_VAR 0 9
10340: PUSH
10341: LD_INT 1
10343: ARRAY
10344: PPUSH
10345: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10349: LD_VAR 0 8
10353: PPUSH
10354: LD_INT 3
10356: PUSH
10357: LD_INT 24
10359: PUSH
10360: LD_INT 750
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 72
10375: PUSH
10376: LD_INT 0
10378: GREATER
10379: IFFALSE 10417
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10381: LD_VAR 0 8
10385: PPUSH
10386: LD_INT 3
10388: PUSH
10389: LD_INT 24
10391: PUSH
10392: LD_INT 750
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PPUSH
10403: CALL_OW 72
10407: PPUSH
10408: LD_VAR 0 2
10412: PPUSH
10413: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10417: LD_VAR 0 8
10421: PUSH
10422: LD_INT 0
10424: GREATER
10425: PUSH
10426: LD_VAR 0 9
10430: PUSH
10431: LD_INT 0
10433: EQUAL
10434: AND
10435: PUSH
10436: LD_VAR 0 3
10440: PUSH
10441: LD_INT 0
10443: GREATER
10444: AND
10445: IFFALSE 10492
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10447: LD_VAR 0 8
10451: PPUSH
10452: LD_VAR 0 3
10456: PUSH
10457: LD_INT 1
10459: ARRAY
10460: PPUSH
10461: LD_VAR 0 3
10465: PUSH
10466: LD_INT 2
10468: ARRAY
10469: PPUSH
10470: LD_VAR 0 3
10474: PUSH
10475: LD_INT 3
10477: ARRAY
10478: PPUSH
10479: LD_VAR 0 3
10483: PUSH
10484: LD_INT 4
10486: ARRAY
10487: PPUSH
10488: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10492: LD_VAR 0 2
10496: PPUSH
10497: LD_INT 22
10499: PUSH
10500: LD_VAR 0 1
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 21
10511: PUSH
10512: LD_INT 2
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: LD_INT 34
10521: PUSH
10522: LD_INT 52
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 3
10531: PUSH
10532: LD_INT 24
10534: PUSH
10535: LD_INT 750
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: PPUSH
10552: CALL_OW 70
10556: PUSH
10557: LD_INT 0
10559: GREATER
10560: IFFALSE 10762
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10562: LD_ADDR_VAR 0 5
10566: PUSH
10567: LD_VAR 0 2
10571: PPUSH
10572: LD_INT 22
10574: PUSH
10575: LD_VAR 0 1
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PUSH
10584: LD_INT 21
10586: PUSH
10587: LD_INT 2
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 34
10596: PUSH
10597: LD_INT 52
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 3
10606: PUSH
10607: LD_INT 24
10609: PUSH
10610: LD_INT 750
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: PPUSH
10627: CALL_OW 70
10631: PUSH
10632: FOR_IN
10633: IFFALSE 10760
// begin mechTmp = UnitsInside ( i ) ;
10635: LD_ADDR_VAR 0 6
10639: PUSH
10640: LD_VAR 0 5
10644: PPUSH
10645: CALL_OW 313
10649: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10650: LD_VAR 0 6
10654: PPUSH
10655: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10659: LD_VAR 0 6
10663: PPUSH
10664: LD_VAR 0 7
10668: PPUSH
10669: CALL_OW 189
// wait ( 0 0$2 ) ;
10673: LD_INT 70
10675: PPUSH
10676: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10680: LD_VAR 0 6
10684: PPUSH
10685: LD_VAR 0 2
10689: PPUSH
10690: LD_INT 22
10692: PUSH
10693: LD_VAR 0 1
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 21
10704: PUSH
10705: LD_INT 2
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: LD_INT 34
10714: PUSH
10715: LD_INT 52
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 24
10724: PUSH
10725: LD_INT 1000
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 58
10734: PUSH
10735: EMPTY
10736: LIST
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: PPUSH
10745: CALL_OW 70
10749: PUSH
10750: LD_INT 1
10752: ARRAY
10753: PPUSH
10754: CALL_OW 180
// end ;
10758: GO 10632
10760: POP
10761: POP
// end ; end ;
10762: LD_VAR 0 4
10766: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10767: LD_INT 0
10769: PPUSH
10770: PPUSH
10771: PPUSH
10772: PPUSH
10773: PPUSH
10774: PPUSH
10775: PPUSH
10776: PPUSH
10777: PPUSH
10778: PPUSH
10779: PPUSH
// for i = 1 to medicCount do
10780: LD_ADDR_VAR 0 14
10784: PUSH
10785: DOUBLE
10786: LD_INT 1
10788: DEC
10789: ST_TO_ADDR
10790: LD_VAR 0 7
10794: PUSH
10795: FOR_TO
10796: IFFALSE 10878
// begin uc_side = side ;
10798: LD_ADDR_OWVAR 20
10802: PUSH
10803: LD_VAR 0 1
10807: ST_TO_ADDR
// uc_nation = nation ;
10808: LD_ADDR_OWVAR 21
10812: PUSH
10813: LD_VAR 0 2
10817: ST_TO_ADDR
// hc_name =  ;
10818: LD_ADDR_OWVAR 26
10822: PUSH
10823: LD_STRING 
10825: ST_TO_ADDR
// hc_gallery =  ;
10826: LD_ADDR_OWVAR 33
10830: PUSH
10831: LD_STRING 
10833: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10834: LD_INT 0
10836: PPUSH
10837: LD_INT 4
10839: PPUSH
10840: LD_VAR 0 8
10844: PPUSH
10845: CALL_OW 380
// un = CreateHuman ;
10849: LD_ADDR_VAR 0 16
10853: PUSH
10854: CALL_OW 44
10858: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10859: LD_VAR 0 16
10863: PPUSH
10864: LD_VAR 0 9
10868: PPUSH
10869: LD_INT 0
10871: PPUSH
10872: CALL_OW 49
// end ;
10876: GO 10795
10878: POP
10879: POP
// for i = 1 to soldierCount do
10880: LD_ADDR_VAR 0 14
10884: PUSH
10885: DOUBLE
10886: LD_INT 1
10888: DEC
10889: ST_TO_ADDR
10890: LD_VAR 0 3
10894: PUSH
10895: FOR_TO
10896: IFFALSE 10978
// begin uc_side = side ;
10898: LD_ADDR_OWVAR 20
10902: PUSH
10903: LD_VAR 0 1
10907: ST_TO_ADDR
// uc_nation = nation ;
10908: LD_ADDR_OWVAR 21
10912: PUSH
10913: LD_VAR 0 2
10917: ST_TO_ADDR
// hc_name =  ;
10918: LD_ADDR_OWVAR 26
10922: PUSH
10923: LD_STRING 
10925: ST_TO_ADDR
// hc_gallery =  ;
10926: LD_ADDR_OWVAR 33
10930: PUSH
10931: LD_STRING 
10933: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10934: LD_INT 0
10936: PPUSH
10937: LD_INT 1
10939: PPUSH
10940: LD_VAR 0 8
10944: PPUSH
10945: CALL_OW 380
// un = CreateHuman ;
10949: LD_ADDR_VAR 0 16
10953: PUSH
10954: CALL_OW 44
10958: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10959: LD_VAR 0 16
10963: PPUSH
10964: LD_VAR 0 9
10968: PPUSH
10969: LD_INT 0
10971: PPUSH
10972: CALL_OW 49
// end ;
10976: GO 10895
10978: POP
10979: POP
// for i = 1 to sniperCount do
10980: LD_ADDR_VAR 0 14
10984: PUSH
10985: DOUBLE
10986: LD_INT 1
10988: DEC
10989: ST_TO_ADDR
10990: LD_VAR 0 4
10994: PUSH
10995: FOR_TO
10996: IFFALSE 11078
// begin uc_side = side ;
10998: LD_ADDR_OWVAR 20
11002: PUSH
11003: LD_VAR 0 1
11007: ST_TO_ADDR
// uc_nation = nation ;
11008: LD_ADDR_OWVAR 21
11012: PUSH
11013: LD_VAR 0 2
11017: ST_TO_ADDR
// hc_name =  ;
11018: LD_ADDR_OWVAR 26
11022: PUSH
11023: LD_STRING 
11025: ST_TO_ADDR
// hc_gallery =  ;
11026: LD_ADDR_OWVAR 33
11030: PUSH
11031: LD_STRING 
11033: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
11034: LD_INT 0
11036: PPUSH
11037: LD_INT 5
11039: PPUSH
11040: LD_VAR 0 8
11044: PPUSH
11045: CALL_OW 380
// un = CreateHuman ;
11049: LD_ADDR_VAR 0 16
11053: PUSH
11054: CALL_OW 44
11058: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11059: LD_VAR 0 16
11063: PPUSH
11064: LD_VAR 0 9
11068: PPUSH
11069: LD_INT 0
11071: PPUSH
11072: CALL_OW 49
// end ;
11076: GO 10995
11078: POP
11079: POP
// for i = 1 to bazookCount do
11080: LD_ADDR_VAR 0 14
11084: PUSH
11085: DOUBLE
11086: LD_INT 1
11088: DEC
11089: ST_TO_ADDR
11090: LD_VAR 0 5
11094: PUSH
11095: FOR_TO
11096: IFFALSE 11178
// begin uc_side = side ;
11098: LD_ADDR_OWVAR 20
11102: PUSH
11103: LD_VAR 0 1
11107: ST_TO_ADDR
// uc_nation = nation ;
11108: LD_ADDR_OWVAR 21
11112: PUSH
11113: LD_VAR 0 2
11117: ST_TO_ADDR
// hc_name =  ;
11118: LD_ADDR_OWVAR 26
11122: PUSH
11123: LD_STRING 
11125: ST_TO_ADDR
// hc_gallery =  ;
11126: LD_ADDR_OWVAR 33
11130: PUSH
11131: LD_STRING 
11133: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11134: LD_INT 0
11136: PPUSH
11137: LD_INT 9
11139: PPUSH
11140: LD_VAR 0 8
11144: PPUSH
11145: CALL_OW 380
// un = CreateHuman ;
11149: LD_ADDR_VAR 0 16
11153: PUSH
11154: CALL_OW 44
11158: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11159: LD_VAR 0 16
11163: PPUSH
11164: LD_VAR 0 9
11168: PPUSH
11169: LD_INT 0
11171: PPUSH
11172: CALL_OW 49
// end ;
11176: GO 11095
11178: POP
11179: POP
// for i = 1 to mortalCount do
11180: LD_ADDR_VAR 0 14
11184: PUSH
11185: DOUBLE
11186: LD_INT 1
11188: DEC
11189: ST_TO_ADDR
11190: LD_VAR 0 6
11194: PUSH
11195: FOR_TO
11196: IFFALSE 11278
// begin uc_side = side ;
11198: LD_ADDR_OWVAR 20
11202: PUSH
11203: LD_VAR 0 1
11207: ST_TO_ADDR
// uc_nation = nation ;
11208: LD_ADDR_OWVAR 21
11212: PUSH
11213: LD_VAR 0 2
11217: ST_TO_ADDR
// hc_name =  ;
11218: LD_ADDR_OWVAR 26
11222: PUSH
11223: LD_STRING 
11225: ST_TO_ADDR
// hc_gallery =  ;
11226: LD_ADDR_OWVAR 33
11230: PUSH
11231: LD_STRING 
11233: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11234: LD_INT 0
11236: PPUSH
11237: LD_INT 8
11239: PPUSH
11240: LD_VAR 0 8
11244: PPUSH
11245: CALL_OW 380
// un = CreateHuman ;
11249: LD_ADDR_VAR 0 16
11253: PUSH
11254: CALL_OW 44
11258: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11259: LD_VAR 0 16
11263: PPUSH
11264: LD_VAR 0 9
11268: PPUSH
11269: LD_INT 0
11271: PPUSH
11272: CALL_OW 49
// end ;
11276: GO 11195
11278: POP
11279: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11280: LD_ADDR_VAR 0 19
11284: PUSH
11285: LD_INT 22
11287: PUSH
11288: LD_VAR 0 1
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: LD_INT 2
11299: PUSH
11300: LD_INT 25
11302: PUSH
11303: LD_INT 1
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 25
11312: PUSH
11313: LD_INT 5
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 25
11322: PUSH
11323: LD_INT 8
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: LD_INT 25
11332: PUSH
11333: LD_INT 9
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PPUSH
11351: CALL_OW 69
11355: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11356: LD_ADDR_VAR 0 18
11360: PUSH
11361: LD_INT 22
11363: PUSH
11364: LD_VAR 0 1
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 25
11375: PUSH
11376: LD_INT 4
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PPUSH
11387: CALL_OW 69
11391: ST_TO_ADDR
// for i in medic_list do
11392: LD_ADDR_VAR 0 14
11396: PUSH
11397: LD_VAR 0 18
11401: PUSH
11402: FOR_IN
11403: IFFALSE 11421
// ComMoveToArea ( i , healArea ) ;
11405: LD_VAR 0 14
11409: PPUSH
11410: LD_VAR 0 10
11414: PPUSH
11415: CALL_OW 113
11419: GO 11402
11421: POP
11422: POP
// if strategy = 1 then
11423: LD_VAR 0 12
11427: PUSH
11428: LD_INT 1
11430: EQUAL
11431: IFFALSE 12148
// begin repeat wait ( 0 0$3 ) ;
11433: LD_INT 105
11435: PPUSH
11436: CALL_OW 67
// for i in soldiersOK_list do
11440: LD_ADDR_VAR 0 14
11444: PUSH
11445: LD_VAR 0 19
11449: PUSH
11450: FOR_IN
11451: IFFALSE 11485
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11453: LD_VAR 0 14
11457: PPUSH
11458: LD_INT 80
11460: PPUSH
11461: LD_INT 109
11463: PPUSH
11464: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11468: LD_VAR 0 14
11472: PPUSH
11473: LD_INT 39
11475: PPUSH
11476: LD_INT 49
11478: PPUSH
11479: CALL_OW 174
// end ;
11483: GO 11450
11485: POP
11486: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11487: LD_INT 13
11489: PPUSH
11490: LD_INT 22
11492: PUSH
11493: LD_VAR 0 1
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PPUSH
11502: CALL_OW 70
11506: PUSH
11507: LD_INT 0
11509: GREATER
11510: IFFALSE 11433
// repeat wait ( 0 0$1 ) ;
11512: LD_INT 35
11514: PPUSH
11515: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11519: LD_ADDR_VAR 0 17
11523: PUSH
11524: LD_INT 22
11526: PUSH
11527: LD_VAR 0 1
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 1
11538: PUSH
11539: LD_INT 3
11541: PUSH
11542: LD_INT 24
11544: PUSH
11545: LD_INT 550
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 24
11558: PUSH
11559: LD_INT 250
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PPUSH
11575: CALL_OW 69
11579: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11580: LD_ADDR_VAR 0 19
11584: PUSH
11585: LD_INT 22
11587: PUSH
11588: LD_VAR 0 1
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 2
11599: PUSH
11600: LD_INT 25
11602: PUSH
11603: LD_INT 1
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 25
11612: PUSH
11613: LD_INT 5
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 25
11622: PUSH
11623: LD_INT 8
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 25
11632: PUSH
11633: LD_INT 9
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: PUSH
11647: LD_INT 24
11649: PUSH
11650: LD_INT 1000
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: LIST
11661: PPUSH
11662: CALL_OW 69
11666: ST_TO_ADDR
// if medicCount > 0 then
11667: LD_VAR 0 7
11671: PUSH
11672: LD_INT 0
11674: GREATER
11675: IFFALSE 11749
// begin if damageUnit_list > 0 then
11677: LD_VAR 0 17
11681: PUSH
11682: LD_INT 0
11684: GREATER
11685: IFFALSE 11749
// begin for i in damageUnit_list do
11687: LD_ADDR_VAR 0 14
11691: PUSH
11692: LD_VAR 0 17
11696: PUSH
11697: FOR_IN
11698: IFFALSE 11747
// begin ComMoveToArea ( i , healArea ) ;
11700: LD_VAR 0 14
11704: PPUSH
11705: LD_VAR 0 10
11709: PPUSH
11710: CALL_OW 113
// for j in medic_list do
11714: LD_ADDR_VAR 0 15
11718: PUSH
11719: LD_VAR 0 18
11723: PUSH
11724: FOR_IN
11725: IFFALSE 11743
// AddComHeal ( j , i ) ;
11727: LD_VAR 0 15
11731: PPUSH
11732: LD_VAR 0 14
11736: PPUSH
11737: CALL_OW 188
11741: GO 11724
11743: POP
11744: POP
// end ;
11745: GO 11697
11747: POP
11748: POP
// end ; end ; for i in soldiersOK_list do
11749: LD_ADDR_VAR 0 14
11753: PUSH
11754: LD_VAR 0 19
11758: PUSH
11759: FOR_IN
11760: IFFALSE 11942
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11762: LD_ADDR_VAR 0 22
11766: PUSH
11767: LD_INT 22
11769: PUSH
11770: LD_VAR 0 11
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PPUSH
11779: CALL_OW 69
11783: PUSH
11784: LD_EXP 45
11788: DIFF
11789: PPUSH
11790: LD_VAR 0 14
11794: PPUSH
11795: CALL_OW 74
11799: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11800: LD_ADDR_VAR 0 23
11804: PUSH
11805: LD_INT 22
11807: PUSH
11808: LD_VAR 0 11
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 2
11819: PUSH
11820: LD_INT 59
11822: PUSH
11823: EMPTY
11824: LIST
11825: PUSH
11826: LD_INT 21
11828: PUSH
11829: LD_INT 1
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: LD_INT 21
11838: PUSH
11839: LD_INT 2
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: PPUSH
11859: CALL_OW 69
11863: PPUSH
11864: LD_VAR 0 14
11868: PPUSH
11869: CALL_OW 74
11873: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11874: LD_VAR 0 14
11878: PPUSH
11879: LD_VAR 0 22
11883: PPUSH
11884: CALL_OW 296
11888: PUSH
11889: LD_INT 8
11891: PLUS
11892: PUSH
11893: LD_VAR 0 14
11897: PPUSH
11898: LD_VAR 0 23
11902: PPUSH
11903: CALL_OW 296
11907: LESS
11908: IFFALSE 11926
// begin ComAttackUnit ( i , target1 ) ;
11910: LD_VAR 0 14
11914: PPUSH
11915: LD_VAR 0 22
11919: PPUSH
11920: CALL_OW 115
// end else
11924: GO 11940
// begin ComAttackUnit ( i , target2 ) ;
11926: LD_VAR 0 14
11930: PPUSH
11931: LD_VAR 0 23
11935: PPUSH
11936: CALL_OW 115
// end ; end ;
11940: GO 11759
11942: POP
11943: POP
// for i in soldiersOK_list do
11944: LD_ADDR_VAR 0 14
11948: PUSH
11949: LD_VAR 0 19
11953: PUSH
11954: FOR_IN
11955: IFFALSE 12137
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11957: LD_ADDR_VAR 0 22
11961: PUSH
11962: LD_INT 22
11964: PUSH
11965: LD_VAR 0 11
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PPUSH
11974: CALL_OW 69
11978: PUSH
11979: LD_EXP 45
11983: DIFF
11984: PPUSH
11985: LD_VAR 0 14
11989: PPUSH
11990: CALL_OW 74
11994: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11995: LD_ADDR_VAR 0 23
11999: PUSH
12000: LD_INT 22
12002: PUSH
12003: LD_VAR 0 11
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 2
12014: PUSH
12015: LD_INT 59
12017: PUSH
12018: EMPTY
12019: LIST
12020: PUSH
12021: LD_INT 21
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 21
12033: PUSH
12034: LD_INT 2
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: EMPTY
12052: LIST
12053: PPUSH
12054: CALL_OW 69
12058: PPUSH
12059: LD_VAR 0 14
12063: PPUSH
12064: CALL_OW 74
12068: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12069: LD_VAR 0 14
12073: PPUSH
12074: LD_VAR 0 22
12078: PPUSH
12079: CALL_OW 296
12083: PUSH
12084: LD_INT 8
12086: PLUS
12087: PUSH
12088: LD_VAR 0 14
12092: PPUSH
12093: LD_VAR 0 23
12097: PPUSH
12098: CALL_OW 296
12102: LESS
12103: IFFALSE 12121
// begin ComAttackUnit ( i , target1 ) ;
12105: LD_VAR 0 14
12109: PPUSH
12110: LD_VAR 0 22
12114: PPUSH
12115: CALL_OW 115
// end else
12119: GO 12135
// begin ComAttackUnit ( i , target2 ) ;
12121: LD_VAR 0 14
12125: PPUSH
12126: LD_VAR 0 23
12130: PPUSH
12131: CALL_OW 115
// end ; end ;
12135: GO 11954
12137: POP
12138: POP
// until soldiersOK_list = [ ] ;
12139: LD_VAR 0 19
12143: PUSH
12144: EMPTY
12145: EQUAL
12146: IFFALSE 11512
// end ; if strategy = 2 then
12148: LD_VAR 0 12
12152: PUSH
12153: LD_INT 2
12155: EQUAL
12156: IFFALSE 12861
// begin repeat wait ( 0 0$1 ) ;
12158: LD_INT 35
12160: PPUSH
12161: CALL_OW 67
// for i in soldiersOK_list do
12165: LD_ADDR_VAR 0 14
12169: PUSH
12170: LD_VAR 0 19
12174: PUSH
12175: FOR_IN
12176: IFFALSE 12210
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
12178: LD_VAR 0 14
12182: PPUSH
12183: LD_INT 117
12185: PPUSH
12186: LD_INT 97
12188: PPUSH
12189: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
12193: LD_VAR 0 14
12197: PPUSH
12198: LD_INT 94
12200: PPUSH
12201: LD_INT 50
12203: PPUSH
12204: CALL_OW 174
// end ;
12208: GO 12175
12210: POP
12211: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
12212: LD_INT 14
12214: PPUSH
12215: LD_INT 22
12217: PUSH
12218: LD_VAR 0 1
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 70
12231: PUSH
12232: LD_INT 0
12234: GREATER
12235: IFFALSE 12158
// repeat wait ( 0 0$3 ) ;
12237: LD_INT 105
12239: PPUSH
12240: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12244: LD_ADDR_VAR 0 17
12248: PUSH
12249: LD_INT 22
12251: PUSH
12252: LD_VAR 0 1
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 1
12263: PUSH
12264: LD_INT 3
12266: PUSH
12267: LD_INT 24
12269: PUSH
12270: LD_INT 550
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 24
12283: PUSH
12284: LD_INT 250
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PPUSH
12300: CALL_OW 69
12304: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12305: LD_ADDR_VAR 0 19
12309: PUSH
12310: LD_INT 22
12312: PUSH
12313: LD_VAR 0 1
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 2
12324: PUSH
12325: LD_INT 25
12327: PUSH
12328: LD_INT 1
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 25
12337: PUSH
12338: LD_INT 5
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 25
12347: PUSH
12348: LD_INT 8
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 25
12357: PUSH
12358: LD_INT 9
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: PUSH
12372: LD_INT 24
12374: PUSH
12375: LD_INT 1000
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: LIST
12386: PPUSH
12387: CALL_OW 69
12391: ST_TO_ADDR
// if medicCount > 0 then
12392: LD_VAR 0 7
12396: PUSH
12397: LD_INT 0
12399: GREATER
12400: IFFALSE 12474
// begin if damageUnit_list > 0 then
12402: LD_VAR 0 17
12406: PUSH
12407: LD_INT 0
12409: GREATER
12410: IFFALSE 12474
// begin for i in damageUnit_list do
12412: LD_ADDR_VAR 0 14
12416: PUSH
12417: LD_VAR 0 17
12421: PUSH
12422: FOR_IN
12423: IFFALSE 12472
// begin ComMoveToArea ( i , healArea ) ;
12425: LD_VAR 0 14
12429: PPUSH
12430: LD_VAR 0 10
12434: PPUSH
12435: CALL_OW 113
// for j in medic_list do
12439: LD_ADDR_VAR 0 15
12443: PUSH
12444: LD_VAR 0 18
12448: PUSH
12449: FOR_IN
12450: IFFALSE 12468
// AddComHeal ( j , i ) ;
12452: LD_VAR 0 15
12456: PPUSH
12457: LD_VAR 0 14
12461: PPUSH
12462: CALL_OW 188
12466: GO 12449
12468: POP
12469: POP
// end ;
12470: GO 12422
12472: POP
12473: POP
// end ; end ; for i in soldiersOK_list do
12474: LD_ADDR_VAR 0 14
12478: PUSH
12479: LD_VAR 0 19
12483: PUSH
12484: FOR_IN
12485: IFFALSE 12661
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12487: LD_ADDR_VAR 0 22
12491: PUSH
12492: LD_INT 22
12494: PUSH
12495: LD_VAR 0 11
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PPUSH
12504: CALL_OW 69
12508: PPUSH
12509: LD_VAR 0 14
12513: PPUSH
12514: CALL_OW 74
12518: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12519: LD_ADDR_VAR 0 23
12523: PUSH
12524: LD_INT 22
12526: PUSH
12527: LD_VAR 0 11
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 2
12538: PUSH
12539: LD_INT 59
12541: PUSH
12542: EMPTY
12543: LIST
12544: PUSH
12545: LD_INT 21
12547: PUSH
12548: LD_INT 1
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: LD_INT 21
12557: PUSH
12558: LD_INT 2
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: EMPTY
12576: LIST
12577: PPUSH
12578: CALL_OW 69
12582: PPUSH
12583: LD_VAR 0 14
12587: PPUSH
12588: CALL_OW 74
12592: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12593: LD_VAR 0 14
12597: PPUSH
12598: LD_VAR 0 22
12602: PPUSH
12603: CALL_OW 296
12607: PUSH
12608: LD_INT 8
12610: PLUS
12611: PUSH
12612: LD_VAR 0 14
12616: PPUSH
12617: LD_VAR 0 23
12621: PPUSH
12622: CALL_OW 296
12626: LESS
12627: IFFALSE 12645
// begin ComAttackUnit ( i , target1 ) ;
12629: LD_VAR 0 14
12633: PPUSH
12634: LD_VAR 0 22
12638: PPUSH
12639: CALL_OW 115
// end else
12643: GO 12659
// begin ComAttackUnit ( i , target2 ) ;
12645: LD_VAR 0 14
12649: PPUSH
12650: LD_VAR 0 23
12654: PPUSH
12655: CALL_OW 115
// end ; end ;
12659: GO 12484
12661: POP
12662: POP
// for i in soldiersOK_list do
12663: LD_ADDR_VAR 0 14
12667: PUSH
12668: LD_VAR 0 19
12672: PUSH
12673: FOR_IN
12674: IFFALSE 12850
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12676: LD_ADDR_VAR 0 22
12680: PUSH
12681: LD_INT 22
12683: PUSH
12684: LD_VAR 0 11
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PPUSH
12693: CALL_OW 69
12697: PPUSH
12698: LD_VAR 0 14
12702: PPUSH
12703: CALL_OW 74
12707: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12708: LD_ADDR_VAR 0 23
12712: PUSH
12713: LD_INT 22
12715: PUSH
12716: LD_VAR 0 11
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 2
12727: PUSH
12728: LD_INT 59
12730: PUSH
12731: EMPTY
12732: LIST
12733: PUSH
12734: LD_INT 21
12736: PUSH
12737: LD_INT 1
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 21
12746: PUSH
12747: LD_INT 2
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: EMPTY
12765: LIST
12766: PPUSH
12767: CALL_OW 69
12771: PPUSH
12772: LD_VAR 0 14
12776: PPUSH
12777: CALL_OW 74
12781: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12782: LD_VAR 0 14
12786: PPUSH
12787: LD_VAR 0 22
12791: PPUSH
12792: CALL_OW 296
12796: PUSH
12797: LD_INT 8
12799: PLUS
12800: PUSH
12801: LD_VAR 0 14
12805: PPUSH
12806: LD_VAR 0 23
12810: PPUSH
12811: CALL_OW 296
12815: LESS
12816: IFFALSE 12834
// begin ComAttackUnit ( i , target1 ) ;
12818: LD_VAR 0 14
12822: PPUSH
12823: LD_VAR 0 22
12827: PPUSH
12828: CALL_OW 115
// end else
12832: GO 12848
// begin ComAttackUnit ( i , target2 ) ;
12834: LD_VAR 0 14
12838: PPUSH
12839: LD_VAR 0 23
12843: PPUSH
12844: CALL_OW 115
// end ; end ;
12848: GO 12673
12850: POP
12851: POP
// until soldiersOK_list = [ ] ;
12852: LD_VAR 0 19
12856: PUSH
12857: EMPTY
12858: EQUAL
12859: IFFALSE 12237
// end ; end ; end_of_file
12861: LD_VAR 0 13
12865: RET
// every 0 0$01 do
12866: GO 12868
12868: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12869: LD_INT 22
12871: PUSH
12872: LD_INT 1
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 25
12881: PUSH
12882: LD_INT 2
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PPUSH
12893: CALL_OW 69
12897: PUSH
12898: LD_INT 0
12900: EQUAL
12901: IFFALSE 12915
// SetClass ( JMM , 2 ) ;
12903: LD_EXP 1
12907: PPUSH
12908: LD_INT 2
12910: PPUSH
12911: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12915: LD_STRING M1
12917: PPUSH
12918: CALL_OW 337
// case difficulty of 1 :
12922: LD_OWVAR 67
12926: PUSH
12927: LD_INT 1
12929: DOUBLE
12930: EQUAL
12931: IFTRUE 12935
12933: GO 12945
12935: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12936: LD_STRING M1-1
12938: PPUSH
12939: CALL_OW 337
12943: GO 12982
12945: LD_INT 2
12947: DOUBLE
12948: EQUAL
12949: IFTRUE 12953
12951: GO 12963
12953: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12954: LD_STRING M1-2
12956: PPUSH
12957: CALL_OW 337
12961: GO 12982
12963: LD_INT 3
12965: DOUBLE
12966: EQUAL
12967: IFTRUE 12971
12969: GO 12981
12971: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12972: LD_STRING M1-3
12974: PPUSH
12975: CALL_OW 337
12979: GO 12982
12981: POP
// ChangeMissionObjectives ( M1cont ) ;
12982: LD_STRING M1cont
12984: PPUSH
12985: CALL_OW 337
// wait ( 0 0$2 ) ;
12989: LD_INT 70
12991: PPUSH
12992: CALL_OW 67
// SaveForQuickRestart ;
12996: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
13000: LD_INT 525
13002: PPUSH
13003: LD_INT 700
13005: PPUSH
13006: CALL_OW 12
13010: PPUSH
13011: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
13015: LD_INT 5
13017: PPUSH
13018: LD_INT 82
13020: PPUSH
13021: LD_INT 38
13023: PPUSH
13024: LD_INT 10
13026: PPUSH
13027: LD_INT 1
13029: PPUSH
13030: CALL_OW 56
// wait ( 0 0$14 ) ;
13034: LD_INT 490
13036: PPUSH
13037: CALL_OW 67
// firstCrateSpawn := true ;
13041: LD_ADDR_EXP 41
13045: PUSH
13046: LD_INT 1
13048: ST_TO_ADDR
// end ;
13049: END
// every 0 0$02 trigger firstCrateSpawn do
13050: LD_EXP 41
13054: IFFALSE 13417
13056: GO 13058
13058: DISABLE
// begin if IsOk ( Lisa ) then
13059: LD_EXP 2
13063: PPUSH
13064: CALL_OW 302
13068: IFFALSE 13084
// Say ( Lisa , DR0-Lisa-1 ) else
13070: LD_EXP 2
13074: PPUSH
13075: LD_STRING DR0-Lisa-1
13077: PPUSH
13078: CALL_OW 88
13082: GO 13230
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
13084: LD_INT 22
13086: PUSH
13087: LD_INT 1
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: PUSH
13094: LD_INT 21
13096: PUSH
13097: LD_INT 1
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 26
13106: PUSH
13107: LD_INT 1
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 2
13116: PUSH
13117: LD_INT 25
13119: PUSH
13120: LD_INT 1
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 25
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 25
13139: PUSH
13140: LD_INT 3
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 25
13149: PUSH
13150: LD_INT 4
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: PPUSH
13170: CALL_OW 69
13174: PUSH
13175: LD_EXP 1
13179: PUSH
13180: LD_EXP 8
13184: PUSH
13185: LD_EXP 5
13189: PUSH
13190: LD_EXP 6
13194: PUSH
13195: LD_EXP 7
13199: PUSH
13200: LD_EXP 4
13204: PUSH
13205: LD_EXP 3
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: DIFF
13219: PPUSH
13220: LD_STRING DR0-Sol1-1
13222: PPUSH
13223: LD_STRING DR0-Sol1-1
13225: PPUSH
13226: CALL 6259 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
13230: LD_INT 22
13232: PUSH
13233: LD_INT 1
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 21
13242: PUSH
13243: LD_INT 1
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 26
13252: PUSH
13253: LD_INT 1
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: LD_INT 2
13262: PUSH
13263: LD_INT 25
13265: PUSH
13266: LD_INT 1
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PUSH
13273: LD_INT 25
13275: PUSH
13276: LD_INT 2
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PUSH
13283: LD_INT 25
13285: PUSH
13286: LD_INT 3
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 25
13295: PUSH
13296: LD_INT 4
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: PPUSH
13316: CALL_OW 69
13320: PUSH
13321: LD_EXP 1
13325: PUSH
13326: LD_EXP 8
13330: PUSH
13331: LD_EXP 5
13335: PUSH
13336: LD_EXP 2
13340: PUSH
13341: LD_EXP 6
13345: PUSH
13346: LD_EXP 7
13350: PUSH
13351: LD_EXP 4
13355: PUSH
13356: LD_EXP 3
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: DIFF
13371: PPUSH
13372: LD_STRING DR0-Sol2-1
13374: PPUSH
13375: LD_STRING DR0-Sol2-1
13377: PPUSH
13378: CALL 6259 0 3
// if IsOk ( Cyrus ) then
13382: LD_EXP 4
13386: PPUSH
13387: CALL_OW 302
13391: IFFALSE 13405
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13393: LD_EXP 4
13397: PPUSH
13398: LD_STRING DR0-Cyrus-1
13400: PPUSH
13401: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13405: LD_EXP 1
13409: PPUSH
13410: LD_STRING DR0-JMM-1
13412: PPUSH
13413: CALL_OW 88
// end ;
13417: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13418: LD_EXP 5
13422: PPUSH
13423: CALL_OW 302
13427: PUSH
13428: LD_INT 22
13430: PUSH
13431: LD_INT 1
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 25
13440: PUSH
13441: LD_INT 16
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PPUSH
13452: CALL_OW 69
13456: PUSH
13457: LD_INT 0
13459: GREATER
13460: AND
13461: PUSH
13462: LD_INT 1
13464: PPUSH
13465: CALL_OW 463
13469: NOT
13470: AND
13471: IFFALSE 13749
13473: GO 13475
13475: DISABLE
// begin DialogueOn ;
13476: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13480: LD_EXP 5
13484: PPUSH
13485: LD_STRING D10-Frank-1
13487: PPUSH
13488: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13492: LD_INT 22
13494: PUSH
13495: LD_INT 1
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 21
13504: PUSH
13505: LD_INT 1
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PUSH
13512: LD_INT 2
13514: PUSH
13515: LD_INT 25
13517: PUSH
13518: LD_INT 1
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: LD_INT 25
13527: PUSH
13528: LD_INT 2
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: LD_INT 25
13537: PUSH
13538: LD_INT 3
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: LD_INT 25
13547: PUSH
13548: LD_INT 4
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: LIST
13566: PPUSH
13567: CALL_OW 69
13571: PUSH
13572: LD_EXP 1
13576: PUSH
13577: LD_EXP 5
13581: PUSH
13582: LD_EXP 2
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: LIST
13591: DIFF
13592: PPUSH
13593: LD_STRING D10-Sol1-1
13595: PPUSH
13596: LD_STRING D10-FSol1-1
13598: PPUSH
13599: CALL 6259 0 3
// Say ( Frank , D10-Frank-2 ) ;
13603: LD_EXP 5
13607: PPUSH
13608: LD_STRING D10-Frank-2
13610: PPUSH
13611: CALL_OW 88
// if IsOK ( Lisa ) then
13615: LD_EXP 2
13619: PPUSH
13620: CALL_OW 302
13624: IFFALSE 13640
// begin Say ( Lisa , D10-Lisa-2 ) ;
13626: LD_EXP 2
13630: PPUSH
13631: LD_STRING D10-Lisa-2
13633: PPUSH
13634: CALL_OW 88
// end else
13638: GO 13745
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13640: LD_INT 22
13642: PUSH
13643: LD_INT 1
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PUSH
13650: LD_INT 21
13652: PUSH
13653: LD_INT 1
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 2
13662: PUSH
13663: LD_INT 25
13665: PUSH
13666: LD_INT 1
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 25
13675: PUSH
13676: LD_INT 2
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 25
13685: PUSH
13686: LD_INT 3
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: LD_INT 25
13695: PUSH
13696: LD_INT 4
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: PPUSH
13715: CALL_OW 69
13719: PUSH
13720: LD_EXP 1
13724: PUSH
13725: LD_EXP 5
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: DIFF
13734: PPUSH
13735: LD_STRING D10-Sol1-2
13737: PPUSH
13738: LD_STRING D10-FSol1-2
13740: PPUSH
13741: CALL 6259 0 3
// end ; DialogueOff ;
13745: CALL_OW 7
// end ;
13749: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13750: LD_INT 1
13752: PPUSH
13753: CALL_OW 463
13757: NOT
13758: IFFALSE 14053
13760: GO 13762
13762: DISABLE
// begin HarrisonSupport ;
13763: CALL 2546 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13767: LD_EXP 17
13771: PPUSH
13772: CALL_OW 310
13776: PPUSH
13777: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13781: LD_EXP 17
13785: PPUSH
13786: LD_STRING DEng-Eng1-1
13788: PPUSH
13789: CALL_OW 88
// wait ( 1 1$0 ) ;
13793: LD_INT 2100
13795: PPUSH
13796: CALL_OW 67
// DialogueOn ;
13800: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13804: LD_EXP 14
13808: PPUSH
13809: LD_STRING DRem-Har-1
13811: PPUSH
13812: CALL_OW 94
// if contactWithRussian = 1 then
13816: LD_EXP 22
13820: PUSH
13821: LD_INT 1
13823: EQUAL
13824: IFFALSE 13840
// begin Say ( JMM , DRem-JMM-1 ) ;
13826: LD_EXP 1
13830: PPUSH
13831: LD_STRING DRem-JMM-1
13833: PPUSH
13834: CALL_OW 88
// end else
13838: GO 13852
// begin Say ( JMM , DRem-JMM-1a ) ;
13840: LD_EXP 1
13844: PPUSH
13845: LD_STRING DRem-JMM-1a
13847: PPUSH
13848: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13852: LD_EXP 14
13856: PPUSH
13857: LD_STRING DRem-Har-2
13859: PPUSH
13860: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13864: LD_STRING DenisInDelta
13866: PPUSH
13867: LD_INT 0
13869: PPUSH
13870: CALL_OW 30
13874: PUSH
13875: LD_INT 1
13877: EQUAL
13878: IFFALSE 13894
// begin Say ( JMM , DRem-JMM-2 ) ;
13880: LD_EXP 1
13884: PPUSH
13885: LD_STRING DRem-JMM-2
13887: PPUSH
13888: CALL_OW 88
// end else
13892: GO 13906
// begin Say ( JMM , DRem-JMM-2a ) ;
13894: LD_EXP 1
13898: PPUSH
13899: LD_STRING DRem-JMM-2a
13901: PPUSH
13902: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13906: LD_EXP 14
13910: PPUSH
13911: LD_STRING DRem-Har-3
13913: PPUSH
13914: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13918: LD_EXP 1
13922: PPUSH
13923: LD_STRING DRem-JMM-3
13925: PPUSH
13926: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13930: LD_EXP 14
13934: PPUSH
13935: LD_STRING DRem-Har-4
13937: PPUSH
13938: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13942: LD_STRING DenisInDelta
13944: PPUSH
13945: LD_INT 0
13947: PPUSH
13948: CALL_OW 30
13952: PUSH
13953: LD_INT 1
13955: EQUAL
13956: IFFALSE 14016
// begin Say ( JMM , DRem-JMM-4 ) ;
13958: LD_EXP 1
13962: PPUSH
13963: LD_STRING DRem-JMM-4
13965: PPUSH
13966: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13970: LD_EXP 14
13974: PPUSH
13975: LD_STRING DRem-Har-5
13977: PPUSH
13978: CALL_OW 94
// DialogueOff ;
13982: CALL_OW 7
// wait ( 4 4$00 ) ;
13986: LD_INT 8400
13988: PPUSH
13989: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13993: LD_INT 35
13995: PPUSH
13996: CALL_OW 67
// until not InBattle ( 1 ) ;
14000: LD_INT 1
14002: PPUSH
14003: CALL_OW 463
14007: NOT
14008: IFFALSE 13993
// SpawnDenis ;
14010: CALL 14054 0 0
// end else
14014: GO 14053
// begin DialogueOff ;
14016: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14020: LD_INT 36
14022: PPUSH
14023: LD_INT 1
14025: PPUSH
14026: LD_INT 1
14028: PPUSH
14029: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14033: LD_INT 15
14035: PPUSH
14036: LD_INT 1
14038: PPUSH
14039: LD_INT 1
14041: PPUSH
14042: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14046: LD_STRING MR
14048: PPUSH
14049: CALL_OW 337
// end ; end ;
14053: END
// export function SpawnDenis ; var tmp ; begin
14054: LD_INT 0
14056: PPUSH
14057: PPUSH
// PrepareDenis ;
14058: CALL 2263 0 0
// CenterNowOnUnits ( Denis ) ;
14062: LD_EXP 9
14066: PPUSH
14067: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
14071: LD_ADDR_VAR 0 2
14075: PUSH
14076: LD_INT 22
14078: PUSH
14079: LD_INT 1
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PPUSH
14086: CALL_OW 69
14090: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
14091: LD_EXP 9
14095: PPUSH
14096: LD_VAR 0 2
14100: PPUSH
14101: LD_EXP 9
14105: PPUSH
14106: CALL_OW 74
14110: PPUSH
14111: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14115: LD_INT 35
14117: PPUSH
14118: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
14122: LD_INT 22
14124: PUSH
14125: LD_INT 1
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: LD_INT 91
14134: PUSH
14135: LD_EXP 9
14139: PUSH
14140: LD_INT 10
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PPUSH
14152: CALL_OW 69
14156: IFFALSE 14115
// SetSide ( Denis , 1 ) ;
14158: LD_EXP 9
14162: PPUSH
14163: LD_INT 1
14165: PPUSH
14166: CALL_OW 235
// DialogueOn ;
14170: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
14174: LD_EXP 9
14178: PPUSH
14179: LD_STRING DDen-Den-1
14181: PPUSH
14182: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
14186: LD_EXP 1
14190: PPUSH
14191: LD_STRING DDen-JMM-1
14193: PPUSH
14194: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
14198: LD_EXP 9
14202: PPUSH
14203: LD_STRING DDen-Den-2
14205: PPUSH
14206: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
14210: LD_EXP 1
14214: PPUSH
14215: LD_STRING DDen-JMM-2
14217: PPUSH
14218: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
14222: LD_EXP 9
14226: PPUSH
14227: LD_STRING DDen-Den-3
14229: PPUSH
14230: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
14234: LD_EXP 1
14238: PPUSH
14239: LD_STRING DDen-JMM-3
14241: PPUSH
14242: CALL_OW 88
// DialogueOff ;
14246: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14250: LD_INT 36
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: LD_INT 1
14258: PPUSH
14259: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14263: LD_INT 15
14265: PPUSH
14266: LD_INT 1
14268: PPUSH
14269: LD_INT 1
14271: PPUSH
14272: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14276: LD_STRING MR
14278: PPUSH
14279: CALL_OW 337
// end ;
14283: LD_VAR 0 1
14287: RET
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14288: CALL 14343 0 0
14292: PUSH
14293: LD_EXP 9
14297: PPUSH
14298: CALL_OW 302
14302: AND
14303: PUSH
14304: LD_INT 1
14306: PPUSH
14307: CALL_OW 463
14311: NOT
14312: AND
14313: IFFALSE 14342
14315: GO 14317
14317: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14318: LD_EXP 9
14322: PPUSH
14323: LD_STRING DR1-Den-1
14325: PPUSH
14326: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14330: LD_EXP 1
14334: PPUSH
14335: LD_STRING DR1-JMM-1
14337: PPUSH
14338: CALL_OW 88
// end ;
14342: END
// function CheckOptoLab ; var i ; begin
14343: LD_INT 0
14345: PPUSH
14346: PPUSH
// result = false ;
14347: LD_ADDR_VAR 0 1
14351: PUSH
14352: LD_INT 0
14354: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14355: LD_ADDR_VAR 0 2
14359: PUSH
14360: LD_INT 22
14362: PUSH
14363: LD_INT 1
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 2
14372: PUSH
14373: LD_INT 30
14375: PUSH
14376: LD_INT 7
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: LD_INT 30
14385: PUSH
14386: LD_INT 8
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: LIST
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PPUSH
14402: CALL_OW 69
14406: PUSH
14407: FOR_IN
14408: IFFALSE 14460
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14410: LD_VAR 0 2
14414: PPUSH
14415: LD_INT 1
14417: PPUSH
14418: CALL_OW 268
14422: PUSH
14423: LD_INT 15
14425: EQUAL
14426: PUSH
14427: LD_VAR 0 2
14431: PPUSH
14432: LD_INT 2
14434: PPUSH
14435: CALL_OW 268
14439: PUSH
14440: LD_INT 15
14442: EQUAL
14443: OR
14444: IFFALSE 14456
// begin result = true ;
14446: LD_ADDR_VAR 0 1
14450: PUSH
14451: LD_INT 1
14453: ST_TO_ADDR
// break ;
14454: GO 14460
// end ; break ;
14456: GO 14460
// end ;
14458: GO 14407
14460: POP
14461: POP
// end ;
14462: LD_VAR 0 1
14466: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14467: LD_INT 15
14469: PPUSH
14470: LD_INT 1
14472: PPUSH
14473: CALL_OW 321
14477: PUSH
14478: LD_INT 2
14480: EQUAL
14481: PUSH
14482: LD_EXP 9
14486: PPUSH
14487: CALL_OW 302
14491: AND
14492: PUSH
14493: LD_INT 1
14495: PPUSH
14496: CALL_OW 463
14500: NOT
14501: AND
14502: IFFALSE 14734
14504: GO 14506
14506: DISABLE
// begin DialogueOn ;
14507: CALL_OW 6
// if IsOK ( Denis ) then
14511: LD_EXP 9
14515: PPUSH
14516: CALL_OW 302
14520: IFFALSE 14536
// begin Say ( Denis , DR2-Den-1 ) ;
14522: LD_EXP 9
14526: PPUSH
14527: LD_STRING DR2-Den-1
14529: PPUSH
14530: CALL_OW 88
// end else
14534: GO 14595
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14536: LD_INT 22
14538: PUSH
14539: LD_INT 1
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PUSH
14546: LD_INT 21
14548: PUSH
14549: LD_INT 1
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 25
14558: PUSH
14559: LD_INT 4
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: LIST
14570: PPUSH
14571: CALL_OW 69
14575: PUSH
14576: LD_EXP 1
14580: PUSH
14581: EMPTY
14582: LIST
14583: DIFF
14584: PPUSH
14585: LD_STRING DR2-Sci1-1
14587: PPUSH
14588: LD_STRING DR2-FSci1-1
14590: PPUSH
14591: CALL 6259 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14595: LD_EXP 1
14599: PPUSH
14600: LD_STRING DR2-JMM-1
14602: PPUSH
14603: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14607: LD_INT 22
14609: PUSH
14610: LD_INT 1
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: PUSH
14617: LD_INT 21
14619: PUSH
14620: LD_INT 1
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PUSH
14627: LD_INT 2
14629: PUSH
14630: LD_INT 25
14632: PUSH
14633: LD_INT 1
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 25
14642: PUSH
14643: LD_INT 2
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: LD_INT 25
14652: PUSH
14653: LD_INT 3
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 25
14662: PUSH
14663: LD_INT 4
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: PPUSH
14682: CALL_OW 69
14686: PUSH
14687: LD_EXP 1
14691: PUSH
14692: LD_EXP 9
14696: PUSH
14697: LD_EXP 8
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: DIFF
14707: PPUSH
14708: LD_STRING DR2-Sol1-1
14710: PPUSH
14711: LD_STRING DR2-Sol1-11
14713: PPUSH
14714: CALL 6259 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14718: LD_EXP 1
14722: PPUSH
14723: LD_STRING DR2-JMM-2
14725: PPUSH
14726: CALL_OW 88
// DialogueOff ;
14730: CALL_OW 7
// end ;
14734: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14735: LD_INT 22
14737: PUSH
14738: LD_INT 1
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 30
14747: PUSH
14748: LD_INT 36
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PPUSH
14759: CALL_OW 69
14763: PUSH
14764: LD_INT 0
14766: EQUAL
14767: PUSH
14768: LD_INT 22
14770: PUSH
14771: LD_INT 1
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 21
14780: PUSH
14781: LD_INT 2
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 33
14790: PUSH
14791: LD_INT 2
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: LIST
14802: PPUSH
14803: CALL_OW 69
14807: PUSH
14808: LD_INT 0
14810: GREATER
14811: AND
14812: PUSH
14813: LD_EXP 23
14817: PUSH
14818: LD_INT 0
14820: EQUAL
14821: AND
14822: PUSH
14823: LD_INT 1
14825: PPUSH
14826: CALL_OW 463
14830: NOT
14831: AND
14832: IFFALSE 14969
14834: GO 14836
14836: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14837: LD_INT 22
14839: PUSH
14840: LD_INT 1
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: LD_INT 21
14849: PUSH
14850: LD_INT 1
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 25
14859: PUSH
14860: LD_INT 3
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: LD_INT 26
14869: PUSH
14870: LD_INT 1
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL_OW 69
14887: PUSH
14888: LD_EXP 1
14892: PUSH
14893: LD_EXP 6
14897: PUSH
14898: LD_EXP 7
14902: PUSH
14903: LD_EXP 9
14907: PUSH
14908: LD_EXP 15
14912: PUSH
14913: LD_EXP 3
14917: PUSH
14918: LD_EXP 4
14922: PUSH
14923: LD_EXP 2
14927: PUSH
14928: LD_EXP 5
14932: PUSH
14933: LD_EXP 8
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: DIFF
14950: PPUSH
14951: LD_STRING D3a-Mech1-1
14953: PPUSH
14954: LD_STRING D3a-Mech1-1
14956: PPUSH
14957: CALL 6259 0 3
// firstTower = 2 ;
14961: LD_ADDR_EXP 23
14965: PUSH
14966: LD_INT 2
14968: ST_TO_ADDR
// end ;
14969: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14970: LD_INT 22
14972: PUSH
14973: LD_INT 3
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: LD_INT 21
14982: PUSH
14983: LD_INT 3
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PPUSH
14994: CALL_OW 69
14998: PUSH
14999: LD_INT 0
15001: EQUAL
15002: IFFALSE 15117
15004: GO 15006
15006: DISABLE
15007: LD_INT 0
15009: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
15010: LD_ADDR_VAR 0 1
15014: PUSH
15015: LD_INT 22
15017: PUSH
15018: LD_INT 1
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 21
15027: PUSH
15028: LD_INT 1
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: LD_INT 2
15037: PUSH
15038: LD_INT 25
15040: PUSH
15041: LD_INT 1
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 25
15050: PUSH
15051: LD_INT 2
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 25
15060: PUSH
15061: LD_INT 3
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 25
15070: PUSH
15071: LD_INT 4
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: LIST
15089: PPUSH
15090: CALL_OW 69
15094: PUSH
15095: FOR_IN
15096: IFFALSE 15115
// AddExperience ( i , 1 , 10000 ) ;
15098: LD_VAR 0 1
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: LD_INT 10000
15108: PPUSH
15109: CALL_OW 492
15113: GO 15095
15115: POP
15116: POP
// end ;
15117: PPOPN 1
15119: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
15120: LD_INT 22
15122: PUSH
15123: LD_INT 1
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 30
15132: PUSH
15133: LD_INT 36
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PPUSH
15144: CALL_OW 69
15148: PUSH
15149: LD_INT 0
15151: GREATER
15152: PUSH
15153: LD_INT 22
15155: PUSH
15156: LD_INT 1
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 21
15165: PUSH
15166: LD_INT 2
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 33
15175: PUSH
15176: LD_INT 2
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: LIST
15187: PPUSH
15188: CALL_OW 69
15192: PUSH
15193: LD_INT 0
15195: GREATER
15196: AND
15197: PUSH
15198: CALL 15790 0 0
15202: AND
15203: PUSH
15204: LD_INT 1
15206: PPUSH
15207: CALL_OW 463
15211: NOT
15212: AND
15213: IFFALSE 15787
15215: GO 15217
15217: DISABLE
15218: LD_INT 0
15220: PPUSH
15221: PPUSH
15222: PPUSH
15223: PPUSH
15224: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
15225: LD_ADDR_VAR 0 3
15229: PUSH
15230: LD_INT 22
15232: PUSH
15233: LD_INT 1
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 30
15242: PUSH
15243: LD_INT 36
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PPUSH
15254: CALL_OW 69
15258: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
15259: LD_ADDR_VAR 0 4
15263: PUSH
15264: LD_INT 22
15266: PUSH
15267: LD_INT 1
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 21
15276: PUSH
15277: LD_INT 2
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 33
15286: PUSH
15287: LD_INT 2
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: LIST
15298: PPUSH
15299: CALL_OW 69
15303: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15304: LD_ADDR_VAR 0 5
15308: PUSH
15309: EMPTY
15310: ST_TO_ADDR
// for i in tmpControlTowers do
15311: LD_ADDR_VAR 0 1
15315: PUSH
15316: LD_VAR 0 3
15320: PUSH
15321: FOR_IN
15322: IFFALSE 15785
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15324: LD_EXP 1
15328: PPUSH
15329: CALL_OW 310
15333: PUSH
15334: LD_VAR 0 1
15338: EQUAL
15339: PUSH
15340: LD_EXP 1
15344: PPUSH
15345: CALL_OW 257
15349: PUSH
15350: LD_INT 3
15352: EQUAL
15353: AND
15354: IFFALSE 15484
// begin InGameOn ;
15356: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15360: LD_VAR 0 4
15364: PUSH
15365: LD_INT 1
15367: ARRAY
15368: PPUSH
15369: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15373: LD_EXP 1
15377: PPUSH
15378: LD_STRING D4a-JMM-1
15380: PPUSH
15381: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15385: LD_VAR 0 4
15389: PUSH
15390: LD_INT 1
15392: ARRAY
15393: PPUSH
15394: LD_EXP 1
15398: PPUSH
15399: CALL_OW 53
// wait ( 0 0$1 ) ;
15403: LD_INT 35
15405: PPUSH
15406: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15410: LD_VAR 0 4
15414: PUSH
15415: LD_INT 1
15417: ARRAY
15418: PPUSH
15419: LD_VAR 0 4
15423: PUSH
15424: LD_INT 1
15426: ARRAY
15427: PPUSH
15428: CALL_OW 250
15432: PUSH
15433: LD_INT 3
15435: PLUS
15436: PPUSH
15437: LD_VAR 0 4
15441: PUSH
15442: LD_INT 1
15444: ARRAY
15445: PPUSH
15446: CALL_OW 251
15450: PUSH
15451: LD_INT 2
15453: MINUS
15454: PPUSH
15455: CALL_OW 111
// wait ( 0 0$2 ) ;
15459: LD_INT 70
15461: PPUSH
15462: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15466: LD_EXP 1
15470: PPUSH
15471: LD_STRING D4b-JMM-1
15473: PPUSH
15474: CALL_OW 88
// InGameOff ;
15478: CALL_OW 9
// end else
15482: GO 15783
// begin InGameOn ;
15484: CALL_OW 8
// for j in UnitsInside ( i ) do
15488: LD_ADDR_VAR 0 2
15492: PUSH
15493: LD_VAR 0 1
15497: PPUSH
15498: CALL_OW 313
15502: PUSH
15503: FOR_IN
15504: IFFALSE 15539
// if GetClass ( j ) = 3 then
15506: LD_VAR 0 2
15510: PPUSH
15511: CALL_OW 257
15515: PUSH
15516: LD_INT 3
15518: EQUAL
15519: IFFALSE 15537
// tmpMechanicInside = tmpMechanicInside ^ j ;
15521: LD_ADDR_VAR 0 5
15525: PUSH
15526: LD_VAR 0 5
15530: PUSH
15531: LD_VAR 0 2
15535: ADD
15536: ST_TO_ADDR
15537: GO 15503
15539: POP
15540: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15541: LD_VAR 0 5
15545: PUSH
15546: LD_INT 1
15548: ARRAY
15549: PPUSH
15550: CALL_OW 258
15554: PUSH
15555: LD_INT 1
15557: EQUAL
15558: IFFALSE 15576
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15560: LD_VAR 0 5
15564: PUSH
15565: LD_INT 1
15567: ARRAY
15568: PPUSH
15569: LD_STRING D4a-Mech1-1
15571: PPUSH
15572: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15576: LD_VAR 0 5
15580: PUSH
15581: LD_INT 1
15583: ARRAY
15584: PPUSH
15585: CALL_OW 258
15589: PUSH
15590: LD_INT 2
15592: EQUAL
15593: IFFALSE 15611
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15595: LD_VAR 0 5
15599: PUSH
15600: LD_INT 1
15602: ARRAY
15603: PPUSH
15604: LD_STRING D4a-FMech1-1
15606: PPUSH
15607: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15611: LD_VAR 0 4
15615: PUSH
15616: LD_INT 1
15618: ARRAY
15619: PPUSH
15620: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15624: LD_VAR 0 4
15628: PUSH
15629: LD_INT 1
15631: ARRAY
15632: PPUSH
15633: LD_VAR 0 5
15637: PUSH
15638: LD_INT 1
15640: ARRAY
15641: PPUSH
15642: CALL_OW 53
// wait ( 0 0$1 ) ;
15646: LD_INT 35
15648: PPUSH
15649: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15653: LD_VAR 0 4
15657: PUSH
15658: LD_INT 1
15660: ARRAY
15661: PPUSH
15662: LD_VAR 0 4
15666: PUSH
15667: LD_INT 1
15669: ARRAY
15670: PPUSH
15671: CALL_OW 250
15675: PUSH
15676: LD_INT 3
15678: PLUS
15679: PPUSH
15680: LD_VAR 0 4
15684: PUSH
15685: LD_INT 1
15687: ARRAY
15688: PPUSH
15689: CALL_OW 251
15693: PUSH
15694: LD_INT 2
15696: MINUS
15697: PPUSH
15698: CALL_OW 111
// wait ( 0 0$2 ) ;
15702: LD_INT 70
15704: PPUSH
15705: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15709: LD_VAR 0 5
15713: PUSH
15714: LD_INT 1
15716: ARRAY
15717: PPUSH
15718: CALL_OW 258
15722: PUSH
15723: LD_INT 1
15725: EQUAL
15726: IFFALSE 15744
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15728: LD_VAR 0 5
15732: PUSH
15733: LD_INT 1
15735: ARRAY
15736: PPUSH
15737: LD_STRING D4b-Mech1-1
15739: PPUSH
15740: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15744: LD_VAR 0 5
15748: PUSH
15749: LD_INT 1
15751: ARRAY
15752: PPUSH
15753: CALL_OW 258
15757: PUSH
15758: LD_INT 2
15760: EQUAL
15761: IFFALSE 15779
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15763: LD_VAR 0 5
15767: PUSH
15768: LD_INT 1
15770: ARRAY
15771: PPUSH
15772: LD_STRING D4b-FMech1-1
15774: PPUSH
15775: CALL_OW 88
// InGameOff ;
15779: CALL_OW 9
// end ; end ;
15783: GO 15321
15785: POP
15786: POP
// end ;
15787: PPOPN 5
15789: END
// function CheckMehInside ; var i , j ; begin
15790: LD_INT 0
15792: PPUSH
15793: PPUSH
15794: PPUSH
// result = false ;
15795: LD_ADDR_VAR 0 1
15799: PUSH
15800: LD_INT 0
15802: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15803: LD_ADDR_VAR 0 2
15807: PUSH
15808: LD_INT 22
15810: PUSH
15811: LD_INT 1
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 30
15820: PUSH
15821: LD_INT 36
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PPUSH
15832: CALL_OW 69
15836: PUSH
15837: FOR_IN
15838: IFFALSE 15889
// begin for j in UnitsInside ( i ) do
15840: LD_ADDR_VAR 0 3
15844: PUSH
15845: LD_VAR 0 2
15849: PPUSH
15850: CALL_OW 313
15854: PUSH
15855: FOR_IN
15856: IFFALSE 15885
// begin if GetClass ( j ) = 3 then
15858: LD_VAR 0 3
15862: PPUSH
15863: CALL_OW 257
15867: PUSH
15868: LD_INT 3
15870: EQUAL
15871: IFFALSE 15883
// begin result = true ;
15873: LD_ADDR_VAR 0 1
15877: PUSH
15878: LD_INT 1
15880: ST_TO_ADDR
// break ;
15881: GO 15885
// end ; end ;
15883: GO 15855
15885: POP
15886: POP
// end ;
15887: GO 15837
15889: POP
15890: POP
// end ;
15891: LD_VAR 0 1
15895: RET
// every 12 12$0 do
15896: GO 15898
15898: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15899: LD_INT 35
15901: PPUSH
15902: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
15906: LD_INT 1
15908: PPUSH
15909: CALL_OW 463
15913: NOT
15914: PUSH
15915: LD_INT 32
15917: PPUSH
15918: LD_INT 81
15920: PUSH
15921: LD_INT 1
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PPUSH
15928: CALL_OW 70
15932: NOT
15933: AND
15934: IFFALSE 15899
// PrepareKurt ;
15936: CALL 19537 0 0
// end ;
15940: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
15941: LD_EXP 15
15945: PPUSH
15946: CALL_OW 302
15950: PUSH
15951: LD_EXP 15
15955: PPUSH
15956: CALL_OW 255
15960: PUSH
15961: LD_INT 1
15963: EQUAL
15964: AND
15965: PUSH
15966: LD_EXP 2
15970: AND
15971: IFFALSE 16136
15973: GO 15975
15975: DISABLE
// begin wait ( 0 0$50 ) ;
15976: LD_INT 1750
15978: PPUSH
15979: CALL_OW 67
// if not IsOk ( Joan ) then
15983: LD_EXP 15
15987: PPUSH
15988: CALL_OW 302
15992: NOT
15993: IFFALSE 15997
// exit ;
15995: GO 16136
// if IsOK ( Lisa ) then
15997: LD_EXP 2
16001: PPUSH
16002: CALL_OW 302
16006: IFFALSE 16136
// begin DialogueOn ;
16008: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
16012: LD_EXP 2
16016: PPUSH
16017: LD_STRING D7-Lisa-1
16019: PPUSH
16020: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
16024: LD_EXP 1
16028: PPUSH
16029: LD_STRING D7-JMM-1
16031: PPUSH
16032: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
16036: LD_EXP 2
16040: PPUSH
16041: LD_STRING D7-Lisa-2
16043: PPUSH
16044: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
16048: LD_EXP 1
16052: PPUSH
16053: LD_STRING D7-JMM-2
16055: PPUSH
16056: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
16060: LD_EXP 2
16064: PPUSH
16065: LD_STRING D7-Lisa-3
16067: PPUSH
16068: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
16072: LD_EXP 1
16076: PPUSH
16077: LD_STRING D7-JMM-3
16079: PPUSH
16080: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
16084: LD_EXP 2
16088: PPUSH
16089: LD_STRING D7-Lisa-4
16091: PPUSH
16092: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
16096: LD_EXP 1
16100: PPUSH
16101: LD_STRING D7-JMM-4
16103: PPUSH
16104: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
16108: LD_EXP 1
16112: PPUSH
16113: LD_STRING D7-JMM-4a
16115: PPUSH
16116: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
16120: LD_EXP 2
16124: PPUSH
16125: LD_STRING D7-Lisa-5
16127: PPUSH
16128: CALL_OW 88
// DialogueOff ;
16132: CALL_OW 7
// end ; end ;
16136: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
16137: LD_EXP 13
16141: PUSH
16142: LD_INT 22
16144: PUSH
16145: LD_INT 1
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 91
16154: PUSH
16155: LD_EXP 13
16159: PUSH
16160: LD_INT 10
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 2
16170: PUSH
16171: LD_INT 25
16173: PUSH
16174: LD_INT 1
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: LD_INT 25
16183: PUSH
16184: LD_INT 2
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 25
16193: PUSH
16194: LD_INT 3
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 25
16203: PUSH
16204: LD_INT 4
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: PPUSH
16223: CALL_OW 69
16227: PUSH
16228: LD_INT 1
16230: GREATER
16231: AND
16232: IFFALSE 16249
16234: GO 16236
16236: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
16237: LD_EXP 13
16241: PPUSH
16242: LD_STRING D5-Sol1-1
16244: PPUSH
16245: CALL_OW 88
// end ;
16249: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
16250: LD_INT 22
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 33
16262: PUSH
16263: LD_INT 2
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PPUSH
16274: CALL_OW 69
16278: PUSH
16279: LD_INT 2
16281: GREATEREQUAL
16282: IFFALSE 16302
16284: GO 16286
16286: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
16287: LD_STRING MRa
16289: PPUSH
16290: CALL_OW 337
// remoteVehiclesBuild = 1 ;
16294: LD_ADDR_EXP 28
16298: PUSH
16299: LD_INT 1
16301: ST_TO_ADDR
// end ;
16302: END
// every 2 2$00 do var i , last ;
16303: GO 16305
16305: DISABLE
16306: LD_INT 0
16308: PPUSH
16309: PPUSH
// begin last := 8 ;
16310: LD_ADDR_VAR 0 2
16314: PUSH
16315: LD_INT 8
16317: ST_TO_ADDR
// for i = 1 to last do
16318: LD_ADDR_VAR 0 1
16322: PUSH
16323: DOUBLE
16324: LD_INT 1
16326: DEC
16327: ST_TO_ADDR
16328: LD_VAR 0 2
16332: PUSH
16333: FOR_TO
16334: IFFALSE 16362
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
16336: LD_INT 6300
16338: PPUSH
16339: LD_INT 12600
16341: PPUSH
16342: CALL_OW 12
16346: PPUSH
16347: CALL_OW 67
// PrepareRandoms ( i ) ;
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL 4165 0 1
// end ;
16360: GO 16333
16362: POP
16363: POP
// end ;
16364: PPOPN 2
16366: END
// every 5 5$20 do
16367: GO 16369
16369: DISABLE
// begin DialogueOn ;
16370: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16374: LD_EXP 10
16378: PPUSH
16379: LD_STRING D12a-Sci-1
16381: PPUSH
16382: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16386: LD_EXP 1
16390: PPUSH
16391: LD_STRING D12a-JMM-1
16393: PPUSH
16394: CALL_OW 88
// DialogueOff ;
16398: CALL_OW 7
// cratesStatus = 1 ;
16402: LD_ADDR_EXP 38
16406: PUSH
16407: LD_INT 1
16409: ST_TO_ADDR
// end ;
16410: END
// every 13 13$0 do
16411: GO 16413
16413: DISABLE
// begin DialogueOn ;
16414: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16418: LD_EXP 10
16422: PPUSH
16423: LD_STRING D12b-Sci-1
16425: PPUSH
16426: CALL_OW 94
// DialogueOff ;
16430: CALL_OW 7
// cratesStatus = 2 ;
16434: LD_ADDR_EXP 38
16438: PUSH
16439: LD_INT 2
16441: ST_TO_ADDR
// end ;
16442: END
// every 32 32$0 do
16443: GO 16445
16445: DISABLE
// begin DialogueOn ;
16446: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16450: LD_EXP 10
16454: PPUSH
16455: LD_STRING D12c-Sci-1
16457: PPUSH
16458: CALL_OW 94
// DialogueOff ;
16462: CALL_OW 7
// wait ( 3 3$0 ) ;
16466: LD_INT 6300
16468: PPUSH
16469: CALL_OW 67
// DialogueOn ;
16473: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16477: LD_EXP 10
16481: PPUSH
16482: LD_STRING D12d-Sci-1
16484: PPUSH
16485: CALL_OW 94
// DialogueOff ;
16489: CALL_OW 7
// cratesStatus = 1 ;
16493: LD_ADDR_EXP 38
16497: PUSH
16498: LD_INT 1
16500: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16501: LD_INT 1400
16503: PPUSH
16504: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16508: LD_INT 35
16510: PPUSH
16511: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
16515: LD_INT 1
16517: PPUSH
16518: CALL_OW 463
16522: NOT
16523: PUSH
16524: LD_INT 32
16526: PPUSH
16527: LD_INT 81
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PPUSH
16537: CALL_OW 70
16541: NOT
16542: AND
16543: IFFALSE 16508
// PrepareJoan ;
16545: CALL 3064 0 0
// end ;
16549: END
// every 42 42$0 do
16550: GO 16552
16552: DISABLE
// begin DialogueOn ;
16553: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16557: LD_EXP 10
16561: PPUSH
16562: LD_STRING D12e-Sci-1
16564: PPUSH
16565: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16569: LD_EXP 1
16573: PPUSH
16574: LD_STRING D12e-JMM-1
16576: PPUSH
16577: CALL_OW 88
// DialogueOff ;
16581: CALL_OW 7
// cratesStatus = 2 ;
16585: LD_ADDR_EXP 38
16589: PUSH
16590: LD_INT 2
16592: ST_TO_ADDR
// end ;
16593: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16594: LD_INT 22
16596: PUSH
16597: LD_INT 6
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 21
16606: PUSH
16607: LD_INT 2
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 34
16616: PUSH
16617: LD_INT 51
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: LIST
16628: PPUSH
16629: CALL_OW 69
16633: PUSH
16634: LD_INT 0
16636: GREATER
16637: IFFALSE 16720
16639: GO 16641
16641: DISABLE
16642: LD_INT 0
16644: PPUSH
// begin enable ;
16645: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16646: LD_ADDR_VAR 0 1
16650: PUSH
16651: LD_INT 22
16653: PUSH
16654: LD_INT 6
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 2
16663: PUSH
16664: LD_INT 21
16666: PUSH
16667: LD_INT 1
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 21
16676: PUSH
16677: LD_INT 2
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: PUSH
16698: FOR_IN
16699: IFFALSE 16718
// ComAgressiveMove ( i , 138 , 168 ) ;
16701: LD_VAR 0 1
16705: PPUSH
16706: LD_INT 138
16708: PPUSH
16709: LD_INT 168
16711: PPUSH
16712: CALL_OW 114
16716: GO 16698
16718: POP
16719: POP
// end ;
16720: PPOPN 1
16722: END
// every 0 0$1 do var i ;
16723: GO 16725
16725: DISABLE
16726: LD_INT 0
16728: PPUSH
// begin enable ;
16729: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16730: LD_ADDR_VAR 0 1
16734: PUSH
16735: LD_INT 4
16737: PPUSH
16738: LD_INT 2
16740: PUSH
16741: LD_INT 22
16743: PUSH
16744: LD_INT 3
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 22
16753: PUSH
16754: LD_INT 6
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: LIST
16765: PUSH
16766: EMPTY
16767: LIST
16768: PPUSH
16769: CALL_OW 70
16773: PUSH
16774: FOR_IN
16775: IFFALSE 16839
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16777: LD_INT 4
16779: PPUSH
16780: LD_INT 22
16782: PUSH
16783: LD_INT 6
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 34
16792: PUSH
16793: LD_INT 51
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PPUSH
16804: CALL_OW 70
16808: PUSH
16809: LD_INT 0
16811: GREATER
16812: IFFALSE 16828
// sendedConvoys = sendedConvoys + 1 ;
16814: LD_ADDR_EXP 39
16818: PUSH
16819: LD_EXP 39
16823: PUSH
16824: LD_INT 1
16826: PLUS
16827: ST_TO_ADDR
// RemoveUnit ( i ) ;
16828: LD_VAR 0 1
16832: PPUSH
16833: CALL_OW 64
// end ;
16837: GO 16774
16839: POP
16840: POP
// end ; end_of_file
16841: PPOPN 1
16843: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16844: LD_VAR 0 1
16848: PUSH
16849: LD_INT 1
16851: EQUAL
16852: PUSH
16853: LD_VAR 0 2
16857: PUSH
16858: LD_INT 3
16860: EQUAL
16861: AND
16862: IFFALSE 16872
// contactWithRussian = 1 ;
16864: LD_ADDR_EXP 22
16868: PUSH
16869: LD_INT 1
16871: ST_TO_ADDR
// end ;
16872: PPOPN 2
16874: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16875: LD_VAR 0 1
16879: PPUSH
16880: CALL_OW 266
16884: PUSH
16885: LD_INT 36
16887: EQUAL
16888: PUSH
16889: LD_VAR 0 1
16893: PPUSH
16894: CALL_OW 255
16898: PUSH
16899: LD_INT 1
16901: EQUAL
16902: AND
16903: PUSH
16904: LD_INT 22
16906: PUSH
16907: LD_INT 1
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 21
16916: PUSH
16917: LD_INT 2
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 33
16926: PUSH
16927: LD_INT 2
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: LIST
16938: PPUSH
16939: CALL_OW 69
16943: PUSH
16944: LD_INT 0
16946: EQUAL
16947: AND
16948: PUSH
16949: LD_EXP 23
16953: PUSH
16954: LD_INT 0
16956: EQUAL
16957: AND
16958: IFFALSE 17038
// begin firstTower = 1 ;
16960: LD_ADDR_EXP 23
16964: PUSH
16965: LD_INT 1
16967: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16968: LD_INT 22
16970: PUSH
16971: LD_INT 1
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: LD_INT 21
16980: PUSH
16981: LD_INT 1
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 25
16990: PUSH
16991: LD_INT 3
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: LD_INT 26
17000: PUSH
17001: LD_INT 1
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: PPUSH
17014: CALL_OW 69
17018: PUSH
17019: LD_EXP 1
17023: PUSH
17024: EMPTY
17025: LIST
17026: DIFF
17027: PPUSH
17028: LD_STRING D3b-Mech1-1
17030: PPUSH
17031: LD_STRING D3b-Mech1-1
17033: PPUSH
17034: CALL 6259 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
17038: LD_VAR 0 1
17042: PPUSH
17043: CALL_OW 266
17047: PUSH
17048: LD_INT 0
17050: EQUAL
17051: PUSH
17052: LD_VAR 0 1
17056: PPUSH
17057: CALL_OW 255
17061: PUSH
17062: LD_INT 1
17064: EQUAL
17065: AND
17066: IFFALSE 17080
// SetBName ( building , theta ) ;
17068: LD_VAR 0 1
17072: PPUSH
17073: LD_STRING theta
17075: PPUSH
17076: CALL_OW 500
// if GetSide ( building ) = 3 then
17080: LD_VAR 0 1
17084: PPUSH
17085: CALL_OW 255
17089: PUSH
17090: LD_INT 3
17092: EQUAL
17093: IFFALSE 17167
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17095: LD_ADDR_EXP 31
17099: PUSH
17100: LD_EXP 31
17104: PPUSH
17105: LD_INT 1
17107: PPUSH
17108: CALL_OW 3
17112: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17113: LD_ADDR_EXP 31
17117: PUSH
17118: LD_EXP 31
17122: PPUSH
17123: LD_INT 1
17125: PPUSH
17126: CALL_OW 3
17130: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17131: LD_ADDR_EXP 31
17135: PUSH
17136: LD_EXP 31
17140: PPUSH
17141: LD_INT 1
17143: PPUSH
17144: CALL_OW 3
17148: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17149: LD_ADDR_EXP 31
17153: PUSH
17154: LD_EXP 31
17158: PPUSH
17159: LD_INT 1
17161: PPUSH
17162: CALL_OW 3
17166: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
17167: LD_VAR 0 1
17171: PPUSH
17172: CALL_OW 255
17176: PUSH
17177: LD_INT 3
17179: EQUAL
17180: PUSH
17181: LD_VAR 0 1
17185: PPUSH
17186: CALL_OW 266
17190: PUSH
17191: LD_INT 0
17193: EQUAL
17194: PUSH
17195: LD_VAR 0 1
17199: PPUSH
17200: CALL_OW 266
17204: PUSH
17205: LD_INT 2
17207: EQUAL
17208: OR
17209: PUSH
17210: LD_VAR 0 1
17214: PPUSH
17215: CALL_OW 266
17219: PUSH
17220: LD_INT 4
17222: EQUAL
17223: OR
17224: PUSH
17225: EMPTY
17226: LIST
17227: AND
17228: IFFALSE 17239
// ComUpgrade ( building ) ;
17230: LD_VAR 0 1
17234: PPUSH
17235: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
17239: LD_VAR 0 1
17243: PPUSH
17244: CALL_OW 255
17248: PUSH
17249: LD_INT 3
17251: EQUAL
17252: PUSH
17253: LD_VAR 0 1
17257: PPUSH
17258: CALL_OW 266
17262: PUSH
17263: LD_INT 32
17265: EQUAL
17266: AND
17267: IFFALSE 17308
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
17269: LD_VAR 0 1
17273: PPUSH
17274: LD_INT 42
17276: PUSH
17277: LD_INT 43
17279: PUSH
17280: LD_INT 44
17282: PUSH
17283: LD_INT 46
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 1
17294: PPUSH
17295: LD_INT 4
17297: PPUSH
17298: CALL_OW 12
17302: ARRAY
17303: PPUSH
17304: CALL_OW 208
// end ; end ;
17308: PPOPN 1
17310: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
17311: LD_VAR 0 1
17315: PUSH
17316: LD_INT 22
17318: PUSH
17319: LD_INT 1
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 21
17328: PUSH
17329: LD_INT 1
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 23
17338: PUSH
17339: LD_INT 1
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: LIST
17350: PPUSH
17351: CALL_OW 69
17355: IN
17356: IFFALSE 17372
// killCounter := killCounter + 1 ;
17358: LD_ADDR_EXP 47
17362: PUSH
17363: LD_EXP 47
17367: PUSH
17368: LD_INT 1
17370: PLUS
17371: ST_TO_ADDR
// if unit = JMM then
17372: LD_VAR 0 1
17376: PUSH
17377: LD_EXP 1
17381: EQUAL
17382: IFFALSE 17391
// YouLost ( JMM ) ;
17384: LD_STRING JMM
17386: PPUSH
17387: CALL_OW 104
// if unit = Joan then
17391: LD_VAR 0 1
17395: PUSH
17396: LD_EXP 15
17400: EQUAL
17401: IFFALSE 17411
// JoanStatus = 0 ;
17403: LD_ADDR_EXP 16
17407: PUSH
17408: LD_INT 0
17410: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17411: LD_VAR 0 1
17415: PPUSH
17416: CALL_OW 255
17420: PUSH
17421: LD_INT 1
17423: EQUAL
17424: PUSH
17425: LD_VAR 0 1
17429: PPUSH
17430: CALL_OW 247
17434: PUSH
17435: LD_INT 1
17437: EQUAL
17438: AND
17439: IFFALSE 17515
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17441: LD_VAR 0 1
17445: PPUSH
17446: CALL_OW 257
17450: PUSH
17451: LD_INT 1
17453: EQUAL
17454: PUSH
17455: LD_VAR 0 1
17459: PPUSH
17460: CALL_OW 257
17464: PUSH
17465: LD_INT 2
17467: EQUAL
17468: OR
17469: PUSH
17470: LD_VAR 0 1
17474: PPUSH
17475: CALL_OW 257
17479: PUSH
17480: LD_INT 3
17482: EQUAL
17483: OR
17484: PUSH
17485: LD_VAR 0 1
17489: PPUSH
17490: CALL_OW 257
17494: PUSH
17495: LD_INT 4
17497: EQUAL
17498: OR
17499: IFFALSE 17515
// unitLost = unitLost + 1 ;
17501: LD_ADDR_EXP 30
17505: PUSH
17506: LD_EXP 30
17510: PUSH
17511: LD_INT 1
17513: PLUS
17514: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17515: LD_VAR 0 1
17519: PPUSH
17520: CALL_OW 255
17524: PUSH
17525: LD_INT 3
17527: EQUAL
17528: PUSH
17529: LD_VAR 0 1
17533: PPUSH
17534: CALL_OW 247
17538: PUSH
17539: LD_INT 3
17541: EQUAL
17542: AND
17543: IFFALSE 18235
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17545: LD_VAR 0 1
17549: PPUSH
17550: CALL_OW 266
17554: PUSH
17555: LD_INT 31
17557: EQUAL
17558: PUSH
17559: LD_VAR 0 1
17563: PPUSH
17564: CALL_OW 266
17568: PUSH
17569: LD_INT 32
17571: EQUAL
17572: OR
17573: PUSH
17574: LD_VAR 0 1
17578: PPUSH
17579: CALL_OW 266
17583: PUSH
17584: LD_INT 36
17586: EQUAL
17587: OR
17588: PUSH
17589: LD_VAR 0 1
17593: PPUSH
17594: CALL_OW 266
17598: PUSH
17599: LD_INT 0
17601: EQUAL
17602: OR
17603: PUSH
17604: LD_VAR 0 1
17608: PPUSH
17609: CALL_OW 266
17613: PUSH
17614: LD_INT 24
17616: EQUAL
17617: OR
17618: PUSH
17619: LD_VAR 0 1
17623: PPUSH
17624: CALL_OW 266
17628: PUSH
17629: LD_INT 17
17631: EQUAL
17632: OR
17633: PUSH
17634: LD_VAR 0 1
17638: PPUSH
17639: CALL_OW 266
17643: PUSH
17644: LD_INT 25
17646: EQUAL
17647: OR
17648: PUSH
17649: LD_VAR 0 1
17653: PPUSH
17654: CALL_OW 266
17658: PUSH
17659: LD_INT 19
17661: EQUAL
17662: OR
17663: PUSH
17664: LD_VAR 0 1
17668: PPUSH
17669: CALL_OW 266
17673: PUSH
17674: LD_INT 20
17676: EQUAL
17677: OR
17678: PUSH
17679: LD_VAR 0 1
17683: PPUSH
17684: CALL_OW 266
17688: PUSH
17689: LD_INT 18
17691: EQUAL
17692: OR
17693: PUSH
17694: LD_VAR 0 1
17698: PPUSH
17699: CALL_OW 266
17703: PUSH
17704: LD_INT 21
17706: EQUAL
17707: OR
17708: PUSH
17709: LD_VAR 0 1
17713: PPUSH
17714: CALL_OW 266
17718: PUSH
17719: LD_INT 23
17721: EQUAL
17722: OR
17723: PUSH
17724: LD_VAR 0 1
17728: PPUSH
17729: CALL_OW 266
17733: PUSH
17734: LD_INT 16
17736: EQUAL
17737: OR
17738: PUSH
17739: LD_VAR 0 1
17743: PPUSH
17744: CALL_OW 266
17748: PUSH
17749: LD_INT 6
17751: EQUAL
17752: OR
17753: PUSH
17754: LD_VAR 0 1
17758: PPUSH
17759: CALL_OW 266
17763: PUSH
17764: LD_INT 29
17766: EQUAL
17767: OR
17768: PUSH
17769: LD_VAR 0 1
17773: PPUSH
17774: CALL_OW 266
17778: PUSH
17779: LD_INT 26
17781: EQUAL
17782: OR
17783: PUSH
17784: LD_VAR 0 1
17788: PPUSH
17789: CALL_OW 266
17793: PUSH
17794: LD_INT 30
17796: EQUAL
17797: OR
17798: PUSH
17799: LD_VAR 0 1
17803: PPUSH
17804: CALL_OW 266
17808: PUSH
17809: LD_INT 28
17811: EQUAL
17812: OR
17813: PUSH
17814: LD_VAR 0 1
17818: PPUSH
17819: CALL_OW 266
17823: PUSH
17824: LD_INT 27
17826: EQUAL
17827: OR
17828: PUSH
17829: LD_VAR 0 1
17833: PPUSH
17834: CALL_OW 266
17838: PUSH
17839: LD_INT 33
17841: EQUAL
17842: OR
17843: PUSH
17844: LD_VAR 0 1
17848: PPUSH
17849: CALL_OW 266
17853: PUSH
17854: LD_INT 2
17856: EQUAL
17857: OR
17858: PUSH
17859: LD_VAR 0 1
17863: PPUSH
17864: CALL_OW 266
17868: PUSH
17869: LD_INT 4
17871: EQUAL
17872: OR
17873: IFFALSE 17959
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17875: LD_ADDR_EXP 31
17879: PUSH
17880: LD_EXP 31
17884: PUSH
17885: LD_VAR 0 1
17889: PPUSH
17890: CALL_OW 266
17894: ADD
17895: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17896: LD_ADDR_EXP 31
17900: PUSH
17901: LD_EXP 31
17905: PUSH
17906: LD_VAR 0 1
17910: PPUSH
17911: CALL_OW 250
17915: ADD
17916: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17917: LD_ADDR_EXP 31
17921: PUSH
17922: LD_EXP 31
17926: PUSH
17927: LD_VAR 0 1
17931: PPUSH
17932: CALL_OW 251
17936: ADD
17937: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17938: LD_ADDR_EXP 31
17942: PUSH
17943: LD_EXP 31
17947: PUSH
17948: LD_VAR 0 1
17952: PPUSH
17953: CALL_OW 254
17957: ADD
17958: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17959: LD_VAR 0 1
17963: PPUSH
17964: CALL_OW 266
17968: PUSH
17969: LD_INT 1
17971: EQUAL
17972: IFFALSE 18051
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17974: LD_ADDR_EXP 31
17978: PUSH
17979: LD_EXP 31
17983: PUSH
17984: LD_INT 0
17986: ADD
17987: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17988: LD_ADDR_EXP 31
17992: PUSH
17993: LD_EXP 31
17997: PUSH
17998: LD_VAR 0 1
18002: PPUSH
18003: CALL_OW 250
18007: ADD
18008: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18009: LD_ADDR_EXP 31
18013: PUSH
18014: LD_EXP 31
18018: PUSH
18019: LD_VAR 0 1
18023: PPUSH
18024: CALL_OW 251
18028: ADD
18029: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18030: LD_ADDR_EXP 31
18034: PUSH
18035: LD_EXP 31
18039: PUSH
18040: LD_VAR 0 1
18044: PPUSH
18045: CALL_OW 254
18049: ADD
18050: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18051: LD_VAR 0 1
18055: PPUSH
18056: CALL_OW 266
18060: PUSH
18061: LD_INT 3
18063: EQUAL
18064: IFFALSE 18143
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
18066: LD_ADDR_EXP 31
18070: PUSH
18071: LD_EXP 31
18075: PUSH
18076: LD_INT 2
18078: ADD
18079: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18080: LD_ADDR_EXP 31
18084: PUSH
18085: LD_EXP 31
18089: PUSH
18090: LD_VAR 0 1
18094: PPUSH
18095: CALL_OW 250
18099: ADD
18100: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18101: LD_ADDR_EXP 31
18105: PUSH
18106: LD_EXP 31
18110: PUSH
18111: LD_VAR 0 1
18115: PPUSH
18116: CALL_OW 251
18120: ADD
18121: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18122: LD_ADDR_EXP 31
18126: PUSH
18127: LD_EXP 31
18131: PUSH
18132: LD_VAR 0 1
18136: PPUSH
18137: CALL_OW 254
18141: ADD
18142: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 266
18152: PUSH
18153: LD_INT 5
18155: EQUAL
18156: IFFALSE 18235
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
18158: LD_ADDR_EXP 31
18162: PUSH
18163: LD_EXP 31
18167: PUSH
18168: LD_INT 4
18170: ADD
18171: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18172: LD_ADDR_EXP 31
18176: PUSH
18177: LD_EXP 31
18181: PUSH
18182: LD_VAR 0 1
18186: PPUSH
18187: CALL_OW 250
18191: ADD
18192: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18193: LD_ADDR_EXP 31
18197: PUSH
18198: LD_EXP 31
18202: PUSH
18203: LD_VAR 0 1
18207: PPUSH
18208: CALL_OW 251
18212: ADD
18213: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18214: LD_ADDR_EXP 31
18218: PUSH
18219: LD_EXP 31
18223: PUSH
18224: LD_VAR 0 1
18228: PPUSH
18229: CALL_OW 254
18233: ADD
18234: ST_TO_ADDR
// end ; end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18235: LD_EXP 48
18239: PUSH
18240: LD_VAR 0 1
18244: PPUSH
18245: CALL_OW 257
18249: PUSH
18250: LD_INT 3
18252: EQUAL
18253: AND
18254: PUSH
18255: LD_VAR 0 1
18259: PPUSH
18260: CALL_OW 255
18264: PUSH
18265: LD_INT 3
18267: EQUAL
18268: AND
18269: PUSH
18270: LD_INT 21
18272: PPUSH
18273: CALL_OW 302
18277: AND
18278: PUSH
18279: LD_INT 21
18281: PPUSH
18282: CALL_OW 255
18286: PUSH
18287: LD_INT 3
18289: EQUAL
18290: AND
18291: IFFALSE 18373
// begin ruMechCounter := ruMechCounter - 1 ;
18293: LD_ADDR_EXP 48
18297: PUSH
18298: LD_EXP 48
18302: PUSH
18303: LD_INT 1
18305: MINUS
18306: ST_TO_ADDR
// uc_side = 3 ;
18307: LD_ADDR_OWVAR 20
18311: PUSH
18312: LD_INT 3
18314: ST_TO_ADDR
// uc_nation = 3 ;
18315: LD_ADDR_OWVAR 21
18319: PUSH
18320: LD_INT 3
18322: ST_TO_ADDR
// hc_gallery :=  ;
18323: LD_ADDR_OWVAR 33
18327: PUSH
18328: LD_STRING 
18330: ST_TO_ADDR
// hc_name :=  ;
18331: LD_ADDR_OWVAR 26
18335: PUSH
18336: LD_STRING 
18338: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18339: LD_INT 0
18341: PPUSH
18342: LD_EXP 34
18346: PPUSH
18347: LD_EXP 35
18351: PPUSH
18352: CALL_OW 12
18356: PPUSH
18357: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
18361: CALL_OW 44
18365: PPUSH
18366: LD_INT 21
18368: PPUSH
18369: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18373: LD_VAR 0 1
18377: PPUSH
18378: CALL_OW 255
18382: PUSH
18383: LD_INT 3
18385: EQUAL
18386: PUSH
18387: LD_VAR 0 1
18391: PPUSH
18392: CALL_OW 264
18396: PUSH
18397: LD_INT 52
18399: EQUAL
18400: AND
18401: PUSH
18402: LD_INT 21
18404: PPUSH
18405: CALL_OW 302
18409: AND
18410: PUSH
18411: LD_INT 21
18413: PPUSH
18414: CALL_OW 255
18418: PUSH
18419: LD_INT 3
18421: EQUAL
18422: AND
18423: IFFALSE 18444
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18425: LD_INT 21
18427: PPUSH
18428: LD_INT 22
18430: PPUSH
18431: LD_INT 1
18433: PPUSH
18434: LD_INT 1
18436: PPUSH
18437: LD_INT 52
18439: PPUSH
18440: CALL_OW 125
// end ;
18444: PPOPN 1
18446: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18447: LD_INT 0
18449: PPUSH
18450: PPUSH
18451: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 264
18461: PUSH
18462: LD_INT 51
18464: EQUAL
18465: PUSH
18466: LD_VAR 0 1
18470: PPUSH
18471: CALL_OW 255
18475: PUSH
18476: LD_INT 3
18478: EQUAL
18479: AND
18480: IFFALSE 18542
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18482: LD_ADDR_VAR 0 5
18486: PUSH
18487: LD_INT 2
18489: PPUSH
18490: CALL_OW 274
18494: PPUSH
18495: LD_INT 1
18497: PPUSH
18498: CALL_OW 275
18502: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18503: LD_INT 2
18505: PPUSH
18506: CALL_OW 274
18510: PPUSH
18511: LD_INT 1
18513: PPUSH
18514: LD_VAR 0 5
18518: PUSH
18519: LD_INT 100
18521: MINUS
18522: PPUSH
18523: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18527: LD_VAR 0 1
18531: PPUSH
18532: LD_INT 1
18534: PPUSH
18535: LD_INT 100
18537: PPUSH
18538: CALL_OW 291
// end ; if building = rufabsupp then
18542: LD_VAR 0 2
18546: PUSH
18547: LD_INT 17
18549: EQUAL
18550: IFFALSE 18564
// SetSide ( vehicle , 6 ) ;
18552: LD_VAR 0 1
18556: PPUSH
18557: LD_INT 6
18559: PPUSH
18560: CALL_OW 235
// end ;
18564: PPOPN 5
18566: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18567: LD_VAR 0 1
18571: PPUSH
18572: CALL_OW 255
18576: PUSH
18577: LD_INT 3
18579: EQUAL
18580: IFFALSE 18611
// begin tamedApemans = tamedApemans + 1 ;
18582: LD_ADDR_EXP 32
18586: PUSH
18587: LD_EXP 32
18591: PUSH
18592: LD_INT 1
18594: PLUS
18595: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18596: LD_VAR 0 1
18600: PPUSH
18601: LD_INT 106
18603: PPUSH
18604: LD_INT 85
18606: PPUSH
18607: CALL_OW 111
// end ; end ;
18611: PPOPN 2
18613: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18614: LD_INT 0
18616: PPUSH
18617: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18618: LD_VAR 0 1
18622: PPUSH
18623: CALL_OW 255
18627: PUSH
18628: LD_INT 3
18630: EQUAL
18631: PUSH
18632: LD_VAR 0 1
18636: PPUSH
18637: CALL_OW 247
18641: PUSH
18642: LD_INT 2
18644: EQUAL
18645: AND
18646: IFFALSE 18755
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18648: LD_VAR 0 1
18652: PPUSH
18653: CALL_OW 264
18657: PUSH
18658: LD_INT 42
18660: EQUAL
18661: PUSH
18662: LD_VAR 0 1
18666: PPUSH
18667: CALL_OW 264
18671: PUSH
18672: LD_INT 43
18674: EQUAL
18675: OR
18676: PUSH
18677: LD_VAR 0 1
18681: PPUSH
18682: CALL_OW 264
18686: PUSH
18687: LD_INT 44
18689: EQUAL
18690: OR
18691: PUSH
18692: LD_VAR 0 1
18696: PPUSH
18697: CALL_OW 264
18701: PUSH
18702: LD_INT 46
18704: EQUAL
18705: OR
18706: IFFALSE 18755
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18708: LD_INT 21
18710: PPUSH
18711: LD_VAR 0 1
18715: PPUSH
18716: CALL_OW 265
18720: PPUSH
18721: LD_VAR 0 1
18725: PPUSH
18726: CALL_OW 262
18730: PPUSH
18731: LD_VAR 0 1
18735: PPUSH
18736: CALL_OW 263
18740: PPUSH
18741: LD_VAR 0 1
18745: PPUSH
18746: CALL_OW 264
18750: PPUSH
18751: CALL_OW 185
// end ;
18755: PPOPN 3
18757: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18758: LD_VAR 0 1
18762: PPUSH
18763: CALL_OW 255
18767: PUSH
18768: LD_INT 3
18770: EQUAL
18771: PUSH
18772: LD_VAR 0 2
18776: PPUSH
18777: CALL_OW 255
18781: PUSH
18782: LD_INT 3
18784: EQUAL
18785: AND
18786: PUSH
18787: LD_VAR 0 1
18791: PPUSH
18792: CALL_OW 302
18796: AND
18797: IFFALSE 18839
// begin ComRepairVehicle ( human , vehicle ) ;
18799: LD_VAR 0 2
18803: PPUSH
18804: LD_VAR 0 1
18808: PPUSH
18809: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18813: LD_VAR 0 2
18817: PPUSH
18818: LD_VAR 0 1
18822: PPUSH
18823: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18827: LD_VAR 0 1
18831: PPUSH
18832: LD_INT 100
18834: PPUSH
18835: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18839: LD_VAR 0 1
18843: PPUSH
18844: CALL_OW 255
18848: PUSH
18849: LD_INT 3
18851: EQUAL
18852: PUSH
18853: LD_VAR 0 2
18857: PPUSH
18858: CALL_OW 255
18862: PUSH
18863: LD_INT 3
18865: EQUAL
18866: AND
18867: PUSH
18868: LD_INT 21
18870: PPUSH
18871: CALL_OW 302
18875: AND
18876: PUSH
18877: LD_VAR 0 1
18881: PPUSH
18882: CALL_OW 302
18886: NOT
18887: AND
18888: IFFALSE 18902
// ComEnterUnit ( human , rufab ) ;
18890: LD_VAR 0 2
18894: PPUSH
18895: LD_INT 21
18897: PPUSH
18898: CALL_OW 120
// end ;
18902: PPOPN 2
18904: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18905: LD_VAR 0 1
18909: PUSH
18910: LD_INT 21
18912: EQUAL
18913: PUSH
18914: LD_VAR 0 2
18918: PPUSH
18919: CALL_OW 255
18923: PUSH
18924: LD_INT 3
18926: EQUAL
18927: AND
18928: IFFALSE 18942
// SetLives ( human , 1000 ) ;
18930: LD_VAR 0 2
18934: PPUSH
18935: LD_INT 1000
18937: PPUSH
18938: CALL_OW 234
// end ;
18942: PPOPN 2
18944: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18945: LD_VAR 0 1
18949: PPUSH
18950: CALL 37429 0 1
// end ; end_of_file
18954: PPOPN 1
18956: END
// every 0 0$30 trigger cratesStatus = 1 do
18957: LD_EXP 38
18961: PUSH
18962: LD_INT 1
18964: EQUAL
18965: IFFALSE 19018
18967: GO 18969
18969: DISABLE
// begin enable ;
18970: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
18971: LD_INT 350
18973: PUSH
18974: LD_INT 875
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 1
18983: PPUSH
18984: LD_INT 2
18986: PPUSH
18987: CALL_OW 12
18991: ARRAY
18992: PPUSH
18993: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
18997: LD_INT 1
18999: PPUSH
19000: LD_INT 5
19002: PPUSH
19003: CALL_OW 12
19007: PPUSH
19008: LD_INT 7
19010: PPUSH
19011: LD_INT 1
19013: PPUSH
19014: CALL_OW 55
// end ;
19018: END
// every 1 1$0 trigger cratesStatus = 2 do
19019: LD_EXP 38
19023: PUSH
19024: LD_INT 2
19026: EQUAL
19027: IFFALSE 19110
19029: GO 19031
19031: DISABLE
// begin enable ;
19032: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
19033: LD_INT 3150
19035: PUSH
19036: LD_INT 4550
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 1
19045: PPUSH
19046: LD_INT 2
19048: PPUSH
19049: CALL_OW 12
19053: ARRAY
19054: PPUSH
19055: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
19059: LD_INT 2
19061: PUSH
19062: LD_INT 5
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 1
19071: PPUSH
19072: LD_INT 2
19074: PPUSH
19075: CALL_OW 12
19079: ARRAY
19080: PPUSH
19081: LD_INT 6
19083: PUSH
19084: LD_INT 7
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 1
19093: PPUSH
19094: LD_INT 2
19096: PPUSH
19097: CALL_OW 12
19101: ARRAY
19102: PPUSH
19103: LD_INT 1
19105: PPUSH
19106: CALL_OW 55
// end ;
19110: END
// every 0 0$30 + 0 0$10 do
19111: GO 19113
19113: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19114: LD_INT 4
19116: PUSH
19117: LD_INT 5
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 1
19126: PPUSH
19127: LD_INT 2
19129: PPUSH
19130: CALL_OW 12
19134: ARRAY
19135: PPUSH
19136: LD_INT 7
19138: PPUSH
19139: LD_INT 1
19141: PPUSH
19142: CALL_OW 55
// Wait ( 0 0$15 ) ;
19146: LD_INT 525
19148: PPUSH
19149: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19153: LD_INT 4
19155: PUSH
19156: LD_INT 5
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: PPUSH
19166: LD_INT 2
19168: PPUSH
19169: CALL_OW 12
19173: ARRAY
19174: PPUSH
19175: LD_INT 7
19177: PPUSH
19178: LD_INT 1
19180: PPUSH
19181: CALL_OW 55
// Wait ( 0 0$20 ) ;
19185: LD_INT 700
19187: PPUSH
19188: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19192: LD_INT 4
19194: PUSH
19195: LD_INT 5
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 1
19204: PPUSH
19205: LD_INT 2
19207: PPUSH
19208: CALL_OW 12
19212: ARRAY
19213: PPUSH
19214: LD_INT 7
19216: PPUSH
19217: LD_INT 1
19219: PPUSH
19220: CALL_OW 55
// end ; end_of_file
19224: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
19225: LD_EXP 24
19229: PUSH
19230: LD_INT 1
19232: EQUAL
19233: IFFALSE 19534
19235: GO 19237
19237: DISABLE
19238: LD_INT 0
19240: PPUSH
19241: PPUSH
19242: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19243: LD_ADDR_VAR 0 2
19247: PUSH
19248: LD_INT 22
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 21
19260: PUSH
19261: LD_INT 3
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 2
19270: PUSH
19271: LD_INT 30
19273: PUSH
19274: LD_INT 0
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 30
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: LIST
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: LIST
19300: PPUSH
19301: CALL_OW 69
19305: ST_TO_ADDR
// for i in tmp do
19306: LD_ADDR_VAR 0 1
19310: PUSH
19311: LD_VAR 0 2
19315: PUSH
19316: FOR_IN
19317: IFFALSE 19350
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19319: LD_ADDR_VAR 0 3
19323: PUSH
19324: LD_VAR 0 3
19328: PUSH
19329: LD_VAR 0 1
19333: PPUSH
19334: CALL_OW 274
19338: PPUSH
19339: LD_INT 1
19341: PPUSH
19342: CALL_OW 275
19346: PLUS
19347: ST_TO_ADDR
19348: GO 19316
19350: POP
19351: POP
// strings = [ ] ;
19352: LD_ADDR_EXP 27
19356: PUSH
19357: EMPTY
19358: ST_TO_ADDR
// if tmp = 0 then
19359: LD_VAR 0 2
19363: PUSH
19364: LD_INT 0
19366: EQUAL
19367: IFFALSE 19392
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19369: LD_ADDR_EXP 27
19373: PUSH
19374: LD_EXP 27
19378: PUSH
19379: LD_STRING #Am06-1
19381: PUSH
19382: LD_EXP 25
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: ADD
19391: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19392: LD_VAR 0 2
19396: PUSH
19397: LD_INT 0
19399: GREATER
19400: PUSH
19401: LD_EXP 25
19405: PUSH
19406: LD_VAR 0 3
19410: GREATER
19411: AND
19412: IFFALSE 19443
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19414: LD_ADDR_EXP 27
19418: PUSH
19419: LD_EXP 27
19423: PUSH
19424: LD_STRING #Am06-1
19426: PUSH
19427: LD_EXP 25
19431: PUSH
19432: LD_VAR 0 3
19436: MINUS
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: ADD
19442: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19443: LD_VAR 0 2
19447: PUSH
19448: LD_INT 0
19450: GREATER
19451: PUSH
19452: LD_EXP 25
19456: PUSH
19457: LD_VAR 0 3
19461: LESSEQUAL
19462: AND
19463: IFFALSE 19486
// strings = strings ^ [ #Am06-1 , 0 ] ;
19465: LD_ADDR_EXP 27
19469: PUSH
19470: LD_EXP 27
19474: PUSH
19475: LD_STRING #Am06-1
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: ADD
19485: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19486: LD_ADDR_EXP 26
19490: PUSH
19491: LD_EXP 26
19495: PUSH
19496: LD_INT 35
19498: MINUS
19499: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19500: LD_ADDR_EXP 27
19504: PUSH
19505: LD_EXP 27
19509: PUSH
19510: LD_STRING #Am06-2
19512: PUSH
19513: LD_EXP 26
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: ADD
19522: ST_TO_ADDR
// display_strings = strings ;
19523: LD_ADDR_OWVAR 47
19527: PUSH
19528: LD_EXP 27
19532: ST_TO_ADDR
// enable ;
19533: ENABLE
// end ; end_of_file
19534: PPOPN 3
19536: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19537: LD_INT 0
19539: PPUSH
19540: PPUSH
19541: PPUSH
19542: PPUSH
19543: PPUSH
19544: PPUSH
19545: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19546: LD_ADDR_VAR 0 3
19550: PUSH
19551: LD_INT 22
19553: PUSH
19554: LD_INT 1
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 2
19563: PUSH
19564: LD_INT 30
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 30
19576: PUSH
19577: LD_INT 1
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: LIST
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PPUSH
19593: CALL_OW 69
19597: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19598: LD_INT 35
19600: PPUSH
19601: CALL_OW 67
// until depot ;
19605: LD_VAR 0 3
19609: IFFALSE 19546
// repeat wait ( 0 0$1 ) ;
19611: LD_INT 35
19613: PPUSH
19614: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19618: LD_ADDR_VAR 0 4
19622: PUSH
19623: LD_INT 22
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 91
19635: PUSH
19636: LD_VAR 0 3
19640: PUSH
19641: LD_INT 1
19643: ARRAY
19644: PUSH
19645: LD_INT 15
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 21
19655: PUSH
19656: LD_INT 1
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 2
19665: PUSH
19666: LD_INT 25
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 25
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 25
19688: PUSH
19689: LD_INT 3
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 25
19698: PUSH
19699: LD_INT 4
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 3
19715: PUSH
19716: LD_INT 54
19718: PUSH
19719: EMPTY
19720: LIST
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 3
19728: PUSH
19729: LD_INT 55
19731: PUSH
19732: EMPTY
19733: LIST
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: PPUSH
19747: CALL_OW 69
19751: PUSH
19752: LD_EXP 2
19756: PUSH
19757: LD_EXP 3
19761: PUSH
19762: LD_EXP 4
19766: PUSH
19767: LD_EXP 5
19771: PUSH
19772: LD_EXP 7
19776: PUSH
19777: LD_EXP 8
19781: PUSH
19782: LD_EXP 9
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: PUSH
19796: LD_EXP 46
19800: ADD
19801: DIFF
19802: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19803: LD_VAR 0 4
19807: PUSH
19808: LD_INT 1
19810: PPUSH
19811: CALL_OW 463
19815: NOT
19816: AND
19817: IFFALSE 19611
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19819: LD_ADDR_VAR 0 4
19823: PUSH
19824: LD_VAR 0 4
19828: PUSH
19829: LD_INT 1
19831: PPUSH
19832: LD_VAR 0 4
19836: PPUSH
19837: CALL_OW 12
19841: ARRAY
19842: ST_TO_ADDR
// blockSpawn = 1 ;
19843: LD_ADDR_EXP 29
19847: PUSH
19848: LD_INT 1
19850: ST_TO_ADDR
// uc_side = 2 ;
19851: LD_ADDR_OWVAR 20
19855: PUSH
19856: LD_INT 2
19858: ST_TO_ADDR
// uc_nation = 2 ;
19859: LD_ADDR_OWVAR 21
19863: PUSH
19864: LD_INT 2
19866: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ,  ) ;
19867: LD_ADDR_EXP 19
19871: PUSH
19872: LD_STRING Kurt
19874: PPUSH
19875: LD_INT 0
19877: PPUSH
19878: LD_STRING 
19880: PPUSH
19881: CALL 39116 0 3
19885: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19886: LD_EXP 19
19890: PPUSH
19891: LD_VAR 0 4
19895: PPUSH
19896: CALL_OW 250
19900: PPUSH
19901: LD_VAR 0 4
19905: PPUSH
19906: CALL_OW 251
19910: PPUSH
19911: LD_INT 5
19913: PPUSH
19914: LD_INT 1
19916: PPUSH
19917: CALL_OW 50
// InGameOn ;
19921: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19925: LD_EXP 19
19929: PPUSH
19930: CALL_OW 87
// wait ( 0 0$2 ) ;
19934: LD_INT 70
19936: PPUSH
19937: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19941: LD_EXP 19
19945: PPUSH
19946: LD_VAR 0 4
19950: PPUSH
19951: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19955: LD_VAR 0 4
19959: PPUSH
19960: LD_EXP 19
19964: PPUSH
19965: CALL_OW 112
// wait ( 0 0$1 ) ;
19969: LD_INT 35
19971: PPUSH
19972: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19976: LD_VAR 0 4
19980: PPUSH
19981: LD_EXP 19
19985: PPUSH
19986: CALL_OW 119
// DialogueOn ;
19990: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19994: LD_EXP 19
19998: PPUSH
19999: LD_STRING D2-Kurt-1
20001: PPUSH
20002: CALL_OW 88
// if tmp = JMM then
20006: LD_VAR 0 4
20010: PUSH
20011: LD_EXP 1
20015: EQUAL
20016: IFFALSE 20108
// begin Say ( JMM , D2-JMM-1 ) ;
20018: LD_EXP 1
20022: PPUSH
20023: LD_STRING D2-JMM-1
20025: PPUSH
20026: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
20030: LD_EXP 19
20034: PPUSH
20035: LD_STRING D2-Kurt-2
20037: PPUSH
20038: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
20042: LD_EXP 1
20046: PPUSH
20047: LD_STRING D2-JMM-2
20049: PPUSH
20050: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20054: LD_EXP 19
20058: PPUSH
20059: LD_STRING D2-Kurt-3
20061: PPUSH
20062: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
20066: LD_EXP 1
20070: PPUSH
20071: LD_STRING D2-JMM-3
20073: PPUSH
20074: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20078: LD_EXP 19
20082: PPUSH
20083: LD_STRING D2-Kurt-4
20085: PPUSH
20086: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
20090: LD_EXP 1
20094: PPUSH
20095: LD_STRING D2-JMM-4
20097: PPUSH
20098: CALL_OW 88
// DialogueOff ;
20102: CALL_OW 7
// end else
20106: GO 20418
// begin if GetSex ( tmp ) = 1 then
20108: LD_VAR 0 4
20112: PPUSH
20113: CALL_OW 258
20117: PUSH
20118: LD_INT 1
20120: EQUAL
20121: IFFALSE 20135
// Say ( tmp , D2-Sol1-1 ) ;
20123: LD_VAR 0 4
20127: PPUSH
20128: LD_STRING D2-Sol1-1
20130: PPUSH
20131: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20135: LD_VAR 0 4
20139: PPUSH
20140: CALL_OW 258
20144: PUSH
20145: LD_INT 2
20147: EQUAL
20148: IFFALSE 20162
// Say ( tmp , D2-FSol1-1 ) ;
20150: LD_VAR 0 4
20154: PPUSH
20155: LD_STRING D2-FSol1-1
20157: PPUSH
20158: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
20162: LD_EXP 19
20166: PPUSH
20167: LD_STRING D2-Kurt-2
20169: PPUSH
20170: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20174: LD_VAR 0 4
20178: PPUSH
20179: CALL_OW 258
20183: PUSH
20184: LD_INT 1
20186: EQUAL
20187: IFFALSE 20201
// Say ( tmp , D2-Sol1-2 ) ;
20189: LD_VAR 0 4
20193: PPUSH
20194: LD_STRING D2-Sol1-2
20196: PPUSH
20197: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20201: LD_VAR 0 4
20205: PPUSH
20206: CALL_OW 258
20210: PUSH
20211: LD_INT 2
20213: EQUAL
20214: IFFALSE 20228
// Say ( tmp , D2-FSol1-2 ) ;
20216: LD_VAR 0 4
20220: PPUSH
20221: LD_STRING D2-FSol1-2
20223: PPUSH
20224: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20228: LD_EXP 19
20232: PPUSH
20233: LD_STRING D2-Kurt-3
20235: PPUSH
20236: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20240: LD_VAR 0 4
20244: PPUSH
20245: CALL_OW 258
20249: PUSH
20250: LD_INT 1
20252: EQUAL
20253: IFFALSE 20267
// Say ( tmp , D2-Sol1-3 ) ;
20255: LD_VAR 0 4
20259: PPUSH
20260: LD_STRING D2-Sol1-3
20262: PPUSH
20263: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20267: LD_VAR 0 4
20271: PPUSH
20272: CALL_OW 258
20276: PUSH
20277: LD_INT 2
20279: EQUAL
20280: IFFALSE 20294
// Say ( tmp , D2-FSol1-3 ) ;
20282: LD_VAR 0 4
20286: PPUSH
20287: LD_STRING D2-FSol1-3
20289: PPUSH
20290: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20294: LD_EXP 19
20298: PPUSH
20299: LD_STRING D2-Kurt-4
20301: PPUSH
20302: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20306: LD_VAR 0 4
20310: PPUSH
20311: CALL_OW 258
20315: PUSH
20316: LD_INT 1
20318: EQUAL
20319: IFFALSE 20333
// Say ( tmp , D2-Sol1-4 ) ;
20321: LD_VAR 0 4
20325: PPUSH
20326: LD_STRING D2-Sol1-4
20328: PPUSH
20329: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20333: LD_VAR 0 4
20337: PPUSH
20338: CALL_OW 258
20342: PUSH
20343: LD_INT 2
20345: EQUAL
20346: IFFALSE 20360
// Say ( tmp , D2-FSol1-4 ) ;
20348: LD_VAR 0 4
20352: PPUSH
20353: LD_STRING D2-FSol1-4
20355: PPUSH
20356: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20360: LD_VAR 0 4
20364: PPUSH
20365: CALL_OW 258
20369: PUSH
20370: LD_INT 1
20372: EQUAL
20373: IFFALSE 20387
// Say ( tmp , D2-Sol1-5 ) ;
20375: LD_VAR 0 4
20379: PPUSH
20380: LD_STRING D2-Sol1-5
20382: PPUSH
20383: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20387: LD_VAR 0 4
20391: PPUSH
20392: CALL_OW 258
20396: PUSH
20397: LD_INT 2
20399: EQUAL
20400: IFFALSE 20414
// Say ( tmp , D2-FSol1-5 ) ;
20402: LD_VAR 0 4
20406: PPUSH
20407: LD_STRING D2-FSol1-5
20409: PPUSH
20410: CALL_OW 88
// DialogueOff ;
20414: CALL_OW 7
// end ; dec = ShowQuery1 ;
20418: LD_ADDR_VAR 0 6
20422: PUSH
20423: CALL 6720 0 0
20427: ST_TO_ADDR
// if dec = 1 then
20428: LD_VAR 0 6
20432: PUSH
20433: LD_INT 1
20435: EQUAL
20436: IFFALSE 20498
// begin DialogueOn ;
20438: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20442: LD_EXP 19
20446: PPUSH
20447: LD_STRING D2a-Kurt-1
20449: PPUSH
20450: CALL_OW 88
// DialogueOff ;
20454: CALL_OW 7
// InGameOff ;
20458: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20462: LD_INT 1
20464: PPUSH
20465: LD_INT 2
20467: PPUSH
20468: LD_INT 2
20470: PPUSH
20471: LD_INT 1
20473: PPUSH
20474: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20478: LD_EXP 19
20482: PPUSH
20483: LD_INT 8
20485: PPUSH
20486: CALL_OW 113
// readyToEscape = 1 ;
20490: LD_ADDR_EXP 21
20494: PUSH
20495: LD_INT 1
20497: ST_TO_ADDR
// end ; if dec = 2 then
20498: LD_VAR 0 6
20502: PUSH
20503: LD_INT 2
20505: EQUAL
20506: IFFALSE 21026
// begin DialogueOn ;
20508: CALL_OW 6
// if tmp = JMM then
20512: LD_VAR 0 4
20516: PUSH
20517: LD_EXP 1
20521: EQUAL
20522: IFFALSE 20578
// begin Say ( JMM , D2b-JMM-1 ) ;
20524: LD_EXP 1
20528: PPUSH
20529: LD_STRING D2b-JMM-1
20531: PPUSH
20532: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20536: LD_EXP 19
20540: PPUSH
20541: LD_STRING D2b-Kurt-1
20543: PPUSH
20544: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20548: LD_EXP 1
20552: PPUSH
20553: LD_STRING D2b-JMM-2
20555: PPUSH
20556: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20560: LD_EXP 19
20564: PPUSH
20565: LD_STRING D2b-Kurt-2
20567: PPUSH
20568: CALL_OW 88
// DialogueOff ;
20572: CALL_OW 7
// end else
20576: GO 20768
// begin if GetSex ( tmp ) = 1 then
20578: LD_VAR 0 4
20582: PPUSH
20583: CALL_OW 258
20587: PUSH
20588: LD_INT 1
20590: EQUAL
20591: IFFALSE 20605
// Say ( tmp , D2b-Sol1-1 ) ;
20593: LD_VAR 0 4
20597: PPUSH
20598: LD_STRING D2b-Sol1-1
20600: PPUSH
20601: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20605: LD_VAR 0 4
20609: PPUSH
20610: CALL_OW 258
20614: PUSH
20615: LD_INT 2
20617: EQUAL
20618: IFFALSE 20632
// Say ( tmp , D2b-FSol1-1 ) ;
20620: LD_VAR 0 4
20624: PPUSH
20625: LD_STRING D2b-FSol1-1
20627: PPUSH
20628: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20632: LD_EXP 19
20636: PPUSH
20637: LD_STRING D2b-Kurt-1
20639: PPUSH
20640: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20644: LD_VAR 0 4
20648: PPUSH
20649: CALL_OW 258
20653: PUSH
20654: LD_INT 1
20656: EQUAL
20657: IFFALSE 20671
// Say ( tmp , D2b-Sol1-2 ) ;
20659: LD_VAR 0 4
20663: PPUSH
20664: LD_STRING D2b-Sol1-2
20666: PPUSH
20667: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20671: LD_VAR 0 4
20675: PPUSH
20676: CALL_OW 258
20680: PUSH
20681: LD_INT 2
20683: EQUAL
20684: IFFALSE 20698
// Say ( tmp , D2b-FSol1-2 ) ;
20686: LD_VAR 0 4
20690: PPUSH
20691: LD_STRING D2b-FSol1-2
20693: PPUSH
20694: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20698: LD_EXP 19
20702: PPUSH
20703: LD_STRING D2b-Kurt-2
20705: PPUSH
20706: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20710: LD_VAR 0 4
20714: PPUSH
20715: CALL_OW 258
20719: PUSH
20720: LD_INT 1
20722: EQUAL
20723: IFFALSE 20737
// Say ( tmp , D2c-Sol1-2 ) ;
20725: LD_VAR 0 4
20729: PPUSH
20730: LD_STRING D2c-Sol1-2
20732: PPUSH
20733: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20737: LD_VAR 0 4
20741: PPUSH
20742: CALL_OW 258
20746: PUSH
20747: LD_INT 2
20749: EQUAL
20750: IFFALSE 20764
// Say ( tmp , D2c-FSol1-2 ) ;
20752: LD_VAR 0 4
20756: PPUSH
20757: LD_STRING D2c-FSol1-2
20759: PPUSH
20760: CALL_OW 88
// DialogueOff ;
20764: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20768: LD_ADDR_VAR 0 7
20772: PUSH
20773: CALL 6794 0 0
20777: ST_TO_ADDR
// if dec2 = 1 then
20778: LD_VAR 0 7
20782: PUSH
20783: LD_INT 1
20785: EQUAL
20786: IFFALSE 20848
// begin DialogueOn ;
20788: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20792: LD_EXP 19
20796: PPUSH
20797: LD_STRING D2a-Kurt-1
20799: PPUSH
20800: CALL_OW 88
// DialogueOff ;
20804: CALL_OW 7
// InGameOff ;
20808: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20812: LD_INT 1
20814: PPUSH
20815: LD_INT 2
20817: PPUSH
20818: LD_INT 2
20820: PPUSH
20821: LD_INT 1
20823: PPUSH
20824: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20828: LD_EXP 19
20832: PPUSH
20833: LD_INT 8
20835: PPUSH
20836: CALL_OW 113
// readyToEscape = 1 ;
20840: LD_ADDR_EXP 21
20844: PUSH
20845: LD_INT 1
20847: ST_TO_ADDR
// end ; if dec2 = 2 then
20848: LD_VAR 0 7
20852: PUSH
20853: LD_INT 2
20855: EQUAL
20856: IFFALSE 21026
// begin if tmp = JMM then
20858: LD_VAR 0 4
20862: PUSH
20863: LD_EXP 1
20867: EQUAL
20868: IFFALSE 20928
// begin DialogueOn ;
20870: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20874: LD_EXP 1
20878: PPUSH
20879: LD_STRING D2c-JMM-1
20881: PPUSH
20882: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20886: LD_EXP 19
20890: PPUSH
20891: LD_STRING D2c-Kurt-1
20893: PPUSH
20894: CALL_OW 88
// DialogueOff ;
20898: CALL_OW 7
// InGameOff ;
20902: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20906: LD_EXP 19
20910: PPUSH
20911: LD_INT 8
20913: PPUSH
20914: CALL_OW 113
// readyToEscape = 1 ;
20918: LD_ADDR_EXP 21
20922: PUSH
20923: LD_INT 1
20925: ST_TO_ADDR
// end else
20926: GO 21026
// begin DialogueOn ;
20928: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20932: LD_VAR 0 4
20936: PPUSH
20937: CALL_OW 258
20941: PUSH
20942: LD_INT 1
20944: EQUAL
20945: IFFALSE 20959
// Say ( tmp , D2c-Sol1-1 ) ;
20947: LD_VAR 0 4
20951: PPUSH
20952: LD_STRING D2c-Sol1-1
20954: PPUSH
20955: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20959: LD_VAR 0 4
20963: PPUSH
20964: CALL_OW 258
20968: PUSH
20969: LD_INT 2
20971: EQUAL
20972: IFFALSE 20986
// Say ( tmp , D2c-FSol1-1 ) ;
20974: LD_VAR 0 4
20978: PPUSH
20979: LD_STRING D2c-FSol1-1
20981: PPUSH
20982: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20986: LD_EXP 19
20990: PPUSH
20991: LD_STRING D2c-Kurt-1
20993: PPUSH
20994: CALL_OW 88
// DialogueOff ;
20998: CALL_OW 7
// InGameOff ;
21002: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21006: LD_EXP 19
21010: PPUSH
21011: LD_INT 8
21013: PPUSH
21014: CALL_OW 113
// readyToEscape = 1 ;
21018: LD_ADDR_EXP 21
21022: PUSH
21023: LD_INT 1
21025: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
21026: LD_VAR 0 6
21030: PUSH
21031: LD_INT 3
21033: EQUAL
21034: IFFALSE 21208
// begin DialogueOn ;
21036: CALL_OW 6
// if tmp = JMM then
21040: LD_VAR 0 4
21044: PUSH
21045: LD_EXP 1
21049: EQUAL
21050: IFFALSE 21110
// begin DialogueOn ;
21052: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
21056: LD_EXP 1
21060: PPUSH
21061: LD_STRING D2c-JMM-1
21063: PPUSH
21064: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21068: LD_EXP 19
21072: PPUSH
21073: LD_STRING D2c-Kurt-1
21075: PPUSH
21076: CALL_OW 88
// DialogueOff ;
21080: CALL_OW 7
// InGameOff ;
21084: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21088: LD_EXP 19
21092: PPUSH
21093: LD_INT 8
21095: PPUSH
21096: CALL_OW 113
// readyToEscape = 1 ;
21100: LD_ADDR_EXP 21
21104: PUSH
21105: LD_INT 1
21107: ST_TO_ADDR
// end else
21108: GO 21208
// begin DialogueOn ;
21110: CALL_OW 6
// if GetSex ( tmp ) = 1 then
21114: LD_VAR 0 4
21118: PPUSH
21119: CALL_OW 258
21123: PUSH
21124: LD_INT 1
21126: EQUAL
21127: IFFALSE 21141
// Say ( tmp , D2c-Sol1-1 ) ;
21129: LD_VAR 0 4
21133: PPUSH
21134: LD_STRING D2c-Sol1-1
21136: PPUSH
21137: CALL_OW 88
// if GetSex ( tmp ) = 2 then
21141: LD_VAR 0 4
21145: PPUSH
21146: CALL_OW 258
21150: PUSH
21151: LD_INT 2
21153: EQUAL
21154: IFFALSE 21168
// Say ( tmp , D2c-FSol1-1 ) ;
21156: LD_VAR 0 4
21160: PPUSH
21161: LD_STRING D2c-FSol1-1
21163: PPUSH
21164: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21168: LD_EXP 19
21172: PPUSH
21173: LD_STRING D2c-Kurt-1
21175: PPUSH
21176: CALL_OW 88
// DialogueOff ;
21180: CALL_OW 7
// InGameOff ;
21184: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21188: LD_EXP 19
21192: PPUSH
21193: LD_INT 8
21195: PPUSH
21196: CALL_OW 113
// readyToEscape = 1 ;
21200: LD_ADDR_EXP 21
21204: PUSH
21205: LD_INT 1
21207: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
21208: LD_ADDR_EXP 29
21212: PUSH
21213: LD_INT 0
21215: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21216: LD_INT 35
21218: PPUSH
21219: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
21223: LD_EXP 19
21227: PPUSH
21228: LD_INT 8
21230: PPUSH
21231: CALL_OW 308
21235: PUSH
21236: LD_EXP 21
21240: AND
21241: PUSH
21242: LD_EXP 19
21246: PPUSH
21247: CALL_OW 301
21251: OR
21252: IFFALSE 21216
// if IsDead ( Kurt ) then
21254: LD_EXP 19
21258: PPUSH
21259: CALL_OW 301
21263: IFFALSE 21267
// exit ;
21265: GO 21336
// RemoveUnit ( Kurt ) ;
21267: LD_EXP 19
21271: PPUSH
21272: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
21276: LD_EXP 19
21280: PPUSH
21281: LD_STRING Kurt
21283: PPUSH
21284: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
21288: LD_INT 1
21290: PPUSH
21291: LD_INT 2
21293: PPUSH
21294: CALL_OW 81
21298: PUSH
21299: LD_INT 0
21301: EQUAL
21302: IFFALSE 21312
// KurtStatus = 1 ;
21304: LD_ADDR_EXP 20
21308: PUSH
21309: LD_INT 1
21311: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
21312: LD_INT 1
21314: PPUSH
21315: LD_INT 2
21317: PPUSH
21318: CALL_OW 81
21322: PUSH
21323: LD_INT 2
21325: EQUAL
21326: IFFALSE 21336
// KurtStatus = 2 ;
21328: LD_ADDR_EXP 20
21332: PUSH
21333: LD_INT 2
21335: ST_TO_ADDR
// end ; end_of_file
21336: LD_VAR 0 1
21340: RET
// every 0 0$1 do
21341: GO 21343
21343: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
21344: LD_INT 3
21346: PPUSH
21347: LD_INT 32
21349: PPUSH
21350: LD_INT 3
21352: PPUSH
21353: CALL 6849 0 3
21357: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21358: GO 21360
21360: DISABLE
21361: LD_INT 0
21363: PPUSH
// begin enemyWayX = [ ] ;
21364: LD_ADDR_EXP 49
21368: PUSH
21369: EMPTY
21370: ST_TO_ADDR
// enemyWayY = [ ] ;
21371: LD_ADDR_EXP 50
21375: PUSH
21376: EMPTY
21377: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
21378: LD_ADDR_VAR 0 1
21382: PUSH
21383: LD_INT 1
21385: PPUSH
21386: LD_INT 2
21388: PPUSH
21389: CALL_OW 12
21393: ST_TO_ADDR
// if rnd = 1 then
21394: LD_VAR 0 1
21398: PUSH
21399: LD_INT 1
21401: EQUAL
21402: IFFALSE 21442
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21404: LD_ADDR_EXP 49
21408: PUSH
21409: LD_INT 93
21411: PUSH
21412: LD_INT 84
21414: PUSH
21415: LD_INT 104
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: LIST
21422: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21423: LD_ADDR_EXP 50
21427: PUSH
21428: LD_INT 51
21430: PUSH
21431: LD_INT 35
21433: PUSH
21434: LD_INT 28
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: LIST
21441: ST_TO_ADDR
// end ; if rnd = 2 then
21442: LD_VAR 0 1
21446: PUSH
21447: LD_INT 2
21449: EQUAL
21450: IFFALSE 21506
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21452: LD_ADDR_EXP 49
21456: PUSH
21457: LD_INT 93
21459: PUSH
21460: LD_INT 52
21462: PUSH
21463: LD_INT 34
21465: PUSH
21466: LD_INT 28
21468: PUSH
21469: LD_INT 30
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21479: LD_ADDR_EXP 50
21483: PUSH
21484: LD_INT 51
21486: PUSH
21487: LD_INT 45
21489: PUSH
21490: LD_INT 35
21492: PUSH
21493: LD_INT 26
21495: PUSH
21496: LD_INT 20
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: ST_TO_ADDR
// end ; enable ;
21506: ENABLE
// end ;
21507: PPOPN 1
21509: END
// every 0 0$1 do
21510: GO 21512
21512: DISABLE
// begin enable ;
21513: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21514: LD_INT 3
21516: PPUSH
21517: LD_INT 2
21519: PPUSH
21520: LD_INT 10
21522: PPUSH
21523: LD_EXP 31
21527: PPUSH
21528: CALL 8284 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21532: LD_INT 3
21534: PPUSH
21535: LD_INT 12
21537: PPUSH
21538: LD_EXP 31
21542: PPUSH
21543: CALL 10169 0 3
// if disableHealAI = 0 then
21547: LD_EXP 33
21551: PUSH
21552: LD_INT 0
21554: EQUAL
21555: IFFALSE 21576
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21557: LD_INT 3
21559: PPUSH
21560: LD_INT 9
21562: PPUSH
21563: LD_INT 10
21565: PPUSH
21566: LD_INT 32
21568: PUSH
21569: EMPTY
21570: LIST
21571: PPUSH
21572: CALL 8675 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21576: LD_INT 3
21578: PPUSH
21579: LD_INT 51
21581: PPUSH
21582: LD_INT 6
21584: PPUSH
21585: CALL 9383 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21589: LD_INT 3
21591: PPUSH
21592: LD_INT 12
21594: PPUSH
21595: LD_INT 121
21597: PPUSH
21598: LD_INT 100
21600: PPUSH
21601: CALL 7244 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21605: LD_INT 3
21607: PPUSH
21608: LD_INT 22
21610: PPUSH
21611: LD_EXP 49
21615: PPUSH
21616: LD_EXP 50
21620: PPUSH
21621: CALL 7447 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21625: LD_INT 3
21627: PPUSH
21628: LD_INT 10
21630: PPUSH
21631: CALL 9526 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21635: LD_INT 3
21637: PPUSH
21638: LD_INT 1
21640: PPUSH
21641: CALL 9939 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21645: LD_INT 2
21647: PPUSH
21648: CALL_OW 303
21652: PUSH
21653: LD_INT 2
21655: PPUSH
21656: CALL_OW 255
21660: PUSH
21661: LD_INT 1
21663: EQUAL
21664: OR
21665: IFFALSE 21677
// DefendDepot ( 3 , rudepo ) ;
21667: LD_INT 3
21669: PPUSH
21670: LD_INT 2
21672: PPUSH
21673: CALL 9219 0 2
// end ;
21677: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21678: LD_INT 22
21680: PUSH
21681: LD_INT 3
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 21
21690: PUSH
21691: LD_INT 2
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 55
21700: PUSH
21701: EMPTY
21702: LIST
21703: PUSH
21704: LD_INT 3
21706: PUSH
21707: LD_INT 34
21709: PUSH
21710: LD_INT 51
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: PPUSH
21727: CALL_OW 69
21731: PUSH
21732: LD_INT 0
21734: EQUAL
21735: PUSH
21736: LD_INT 21
21738: PPUSH
21739: CALL_OW 255
21743: PUSH
21744: LD_INT 3
21746: EQUAL
21747: AND
21748: PUSH
21749: LD_INT 21
21751: PPUSH
21752: CALL_OW 302
21756: AND
21757: PUSH
21758: LD_INT 2
21760: PPUSH
21761: CALL_OW 255
21765: PUSH
21766: LD_INT 3
21768: EQUAL
21769: AND
21770: PUSH
21771: LD_INT 2
21773: PPUSH
21774: CALL_OW 302
21778: AND
21779: IFFALSE 21959
21781: GO 21783
21783: DISABLE
// begin enable ;
21784: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21785: LD_INT 2
21787: PPUSH
21788: CALL_OW 274
21792: PPUSH
21793: LD_INT 1
21795: PPUSH
21796: LD_INT 1000
21798: PPUSH
21799: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21803: LD_INT 3
21805: PPUSH
21806: LD_INT 21
21808: PPUSH
21809: LD_INT 4
21811: PUSH
21812: LD_INT 5
21814: PUSH
21815: LD_INT 6
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: PUSH
21823: LD_OWVAR 67
21827: ARRAY
21828: PPUSH
21829: LD_INT 43
21831: PUSH
21832: LD_INT 43
21834: PUSH
21835: LD_INT 44
21837: PUSH
21838: LD_INT 44
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 43
21849: PUSH
21850: LD_INT 43
21852: PUSH
21853: LD_INT 43
21855: PUSH
21856: LD_INT 44
21858: PUSH
21859: LD_INT 44
21861: PUSH
21862: LD_INT 46
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 43
21875: PUSH
21876: LD_INT 43
21878: PUSH
21879: LD_INT 43
21881: PUSH
21882: LD_INT 44
21884: PUSH
21885: LD_INT 44
21887: PUSH
21888: LD_INT 46
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: LIST
21903: PUSH
21904: LD_OWVAR 67
21908: ARRAY
21909: PPUSH
21910: LD_INT 1
21912: PPUSH
21913: LD_INT 1
21915: PPUSH
21916: LD_INT 22
21918: PUSH
21919: LD_INT 22
21921: PUSH
21922: LD_INT 24
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 1
21931: PPUSH
21932: LD_INT 2
21934: PPUSH
21935: CALL_OW 12
21939: ARRAY
21940: PUSH
21941: LD_INT 24
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: LIST
21948: PUSH
21949: LD_OWVAR 67
21953: ARRAY
21954: PPUSH
21955: CALL 7090 0 7
// end ;
21959: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21960: LD_INT 17
21962: PPUSH
21963: CALL_OW 255
21967: PUSH
21968: LD_INT 3
21970: EQUAL
21971: PUSH
21972: LD_INT 17
21974: PPUSH
21975: CALL_OW 302
21979: AND
21980: PUSH
21981: LD_INT 2
21983: PPUSH
21984: CALL_OW 255
21988: PUSH
21989: LD_INT 3
21991: EQUAL
21992: AND
21993: PUSH
21994: LD_INT 2
21996: PPUSH
21997: CALL_OW 302
22001: AND
22002: IFFALSE 22069
22004: GO 22006
22006: DISABLE
// begin enable ;
22007: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
22008: LD_INT 17
22010: PPUSH
22011: LD_INT 22
22013: PPUSH
22014: LD_INT 1
22016: PPUSH
22017: LD_INT 1
22019: PPUSH
22020: LD_INT 42
22022: PUSH
22023: LD_INT 43
22025: PUSH
22026: LD_INT 44
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 1
22036: PPUSH
22037: LD_INT 3
22039: PPUSH
22040: CALL_OW 12
22044: ARRAY
22045: PPUSH
22046: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
22050: LD_INT 17
22052: PPUSH
22053: LD_INT 22
22055: PPUSH
22056: LD_INT 1
22058: PPUSH
22059: LD_INT 1
22061: PPUSH
22062: LD_INT 51
22064: PPUSH
22065: CALL_OW 185
// end ;
22069: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
22070: LD_INT 17
22072: PPUSH
22073: CALL_OW 302
22077: PUSH
22078: LD_INT 17
22080: PPUSH
22081: CALL_OW 255
22085: PUSH
22086: LD_INT 3
22088: EQUAL
22089: AND
22090: PUSH
22091: LD_INT 2
22093: PPUSH
22094: CALL_OW 302
22098: AND
22099: PUSH
22100: LD_INT 2
22102: PPUSH
22103: CALL_OW 255
22107: PUSH
22108: LD_INT 3
22110: EQUAL
22111: AND
22112: PUSH
22113: LD_INT 17
22115: PPUSH
22116: CALL_OW 313
22120: NOT
22121: AND
22122: IFFALSE 22216
22124: GO 22126
22126: DISABLE
22127: LD_INT 0
22129: PPUSH
// begin for i = 1 to 6 do
22130: LD_ADDR_VAR 0 1
22134: PUSH
22135: DOUBLE
22136: LD_INT 1
22138: DEC
22139: ST_TO_ADDR
22140: LD_INT 6
22142: PUSH
22143: FOR_TO
22144: IFFALSE 22214
// begin uc_side = 3 ;
22146: LD_ADDR_OWVAR 20
22150: PUSH
22151: LD_INT 3
22153: ST_TO_ADDR
// uc_nation = 3 ;
22154: LD_ADDR_OWVAR 21
22158: PUSH
22159: LD_INT 3
22161: ST_TO_ADDR
// hc_gallery :=  ;
22162: LD_ADDR_OWVAR 33
22166: PUSH
22167: LD_STRING 
22169: ST_TO_ADDR
// hc_name :=  ;
22170: LD_ADDR_OWVAR 26
22174: PUSH
22175: LD_STRING 
22177: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
22178: LD_INT 0
22180: PPUSH
22181: LD_EXP 34
22185: PPUSH
22186: LD_EXP 35
22190: PPUSH
22191: CALL_OW 12
22195: PPUSH
22196: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
22200: CALL_OW 44
22204: PPUSH
22205: LD_INT 17
22207: PPUSH
22208: CALL_OW 52
// end ;
22212: GO 22143
22214: POP
22215: POP
// end ;
22216: PPOPN 1
22218: END
// every 2 2$0 do var i , j ;
22219: GO 22221
22221: DISABLE
22222: LD_INT 0
22224: PPUSH
22225: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
22226: LD_INT 14700
22228: PUSH
22229: LD_INT 33600
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 1
22238: PPUSH
22239: LD_INT 2
22241: PPUSH
22242: CALL_OW 12
22246: ARRAY
22247: PPUSH
22248: CALL_OW 67
// disableHealAI = 1 ;
22252: LD_ADDR_EXP 33
22256: PUSH
22257: LD_INT 1
22259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22260: LD_ADDR_VAR 0 1
22264: PUSH
22265: LD_INT 22
22267: PUSH
22268: LD_INT 3
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 25
22277: PUSH
22278: LD_INT 4
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 69
22293: PUSH
22294: FOR_IN
22295: IFFALSE 22308
// ComExitBuilding ( i ) ;
22297: LD_VAR 0 1
22301: PPUSH
22302: CALL_OW 122
22306: GO 22294
22308: POP
22309: POP
// wait ( 0 0$1 ) ;
22310: LD_INT 35
22312: PPUSH
22313: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22317: LD_INT 35
22319: PPUSH
22320: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22324: LD_ADDR_VAR 0 1
22328: PUSH
22329: LD_INT 22
22331: PUSH
22332: LD_INT 3
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 25
22341: PUSH
22342: LD_INT 4
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PPUSH
22353: CALL_OW 69
22357: PUSH
22358: FOR_IN
22359: IFFALSE 22436
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
22361: LD_ADDR_VAR 0 2
22365: PUSH
22366: LD_INT 17
22368: PPUSH
22369: LD_INT 22
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 25
22381: PUSH
22382: LD_INT 12
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PPUSH
22393: CALL_OW 70
22397: PUSH
22398: FOR_IN
22399: IFFALSE 22432
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22401: LD_VAR 0 1
22405: PPUSH
22406: LD_VAR 0 2
22410: PPUSH
22411: CALL_OW 250
22415: PPUSH
22416: LD_VAR 0 2
22420: PPUSH
22421: CALL_OW 251
22425: PPUSH
22426: CALL_OW 191
// end ;
22430: GO 22398
22432: POP
22433: POP
// end ;
22434: GO 22358
22436: POP
22437: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22438: LD_INT 22
22440: PUSH
22441: LD_INT 3
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 25
22450: PUSH
22451: LD_INT 4
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PPUSH
22462: CALL_OW 69
22466: PUSH
22467: LD_INT 0
22469: EQUAL
22470: PUSH
22471: LD_EXP 32
22475: PUSH
22476: LD_INT 6
22478: PUSH
22479: LD_INT 7
22481: PUSH
22482: LD_INT 8
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: LIST
22489: PUSH
22490: LD_OWVAR 67
22494: ARRAY
22495: GREATEREQUAL
22496: OR
22497: PUSH
22498: LD_INT 17
22500: PPUSH
22501: LD_INT 22
22503: PUSH
22504: LD_INT 0
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 25
22513: PUSH
22514: LD_INT 12
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PPUSH
22525: CALL_OW 70
22529: PUSH
22530: LD_INT 0
22532: EQUAL
22533: OR
22534: IFFALSE 22317
// disableHealAI = 0 ;
22536: LD_ADDR_EXP 33
22540: PUSH
22541: LD_INT 0
22543: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22544: LD_ADDR_VAR 0 1
22548: PUSH
22549: LD_INT 22
22551: PUSH
22552: LD_INT 3
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 25
22561: PUSH
22562: LD_INT 12
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PPUSH
22573: CALL_OW 69
22577: PUSH
22578: FOR_IN
22579: IFFALSE 22595
// SetClass ( i , 16 ) ;
22581: LD_VAR 0 1
22585: PPUSH
22586: LD_INT 16
22588: PPUSH
22589: CALL_OW 336
22593: GO 22578
22595: POP
22596: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22597: LD_ADDR_VAR 0 1
22601: PUSH
22602: LD_INT 22
22604: PUSH
22605: LD_INT 3
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 25
22614: PUSH
22615: LD_INT 4
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PPUSH
22626: CALL_OW 69
22630: PUSH
22631: FOR_IN
22632: IFFALSE 22651
// ComMoveXY ( i , 113 , 94 ) ;
22634: LD_VAR 0 1
22638: PPUSH
22639: LD_INT 113
22641: PPUSH
22642: LD_INT 94
22644: PPUSH
22645: CALL_OW 111
22649: GO 22631
22651: POP
22652: POP
// end ;
22653: PPOPN 2
22655: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22656: LD_INT 21
22658: PPUSH
22659: CALL_OW 255
22663: PUSH
22664: LD_INT 3
22666: EQUAL
22667: PUSH
22668: LD_INT 21
22670: PPUSH
22671: CALL_OW 302
22675: AND
22676: PUSH
22677: LD_INT 22
22679: PUSH
22680: LD_INT 3
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 34
22689: PUSH
22690: LD_INT 51
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PPUSH
22701: CALL_OW 69
22705: PUSH
22706: LD_INT 0
22708: EQUAL
22709: AND
22710: IFFALSE 22742
22712: GO 22714
22714: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22715: LD_INT 21
22717: PPUSH
22718: LD_INT 23
22720: PPUSH
22721: LD_INT 1
22723: PPUSH
22724: LD_INT 1
22726: PPUSH
22727: LD_INT 51
22729: PPUSH
22730: CALL_OW 185
// wait ( 5 5$0 ) ;
22734: LD_INT 10500
22736: PPUSH
22737: CALL_OW 67
// enable ;
22741: ENABLE
// end ; end_of_file
22742: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22743: LD_EXP 26
22747: PUSH
22748: LD_INT 0
22750: LESSEQUAL
22751: IFFALSE 22900
22753: GO 22755
22755: DISABLE
22756: LD_INT 0
22758: PPUSH
22759: PPUSH
22760: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22761: LD_ADDR_VAR 0 2
22765: PUSH
22766: LD_INT 22
22768: PUSH
22769: LD_INT 1
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 21
22778: PUSH
22779: LD_INT 3
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: LD_INT 30
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 30
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: PPUSH
22819: CALL_OW 69
22823: ST_TO_ADDR
// for i in tmp do
22824: LD_ADDR_VAR 0 1
22828: PUSH
22829: LD_VAR 0 2
22833: PUSH
22834: FOR_IN
22835: IFFALSE 22868
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22837: LD_ADDR_VAR 0 3
22841: PUSH
22842: LD_VAR 0 3
22846: PUSH
22847: LD_VAR 0 1
22851: PPUSH
22852: CALL_OW 274
22856: PPUSH
22857: LD_INT 1
22859: PPUSH
22860: CALL_OW 275
22864: PLUS
22865: ST_TO_ADDR
22866: GO 22834
22868: POP
22869: POP
// if yourCrates >= needCrates then
22870: LD_VAR 0 3
22874: PUSH
22875: LD_EXP 25
22879: GREATEREQUAL
22880: IFFALSE 22893
// FinishMission ( yourCrates ) else
22882: LD_VAR 0 3
22886: PPUSH
22887: CALL 22903 0 1
22891: GO 22900
// YouLost ( matmin ) ;
22893: LD_STRING matmin
22895: PPUSH
22896: CALL_OW 104
// end ;
22900: PPOPN 3
22902: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22903: LD_INT 0
22905: PPUSH
22906: PPUSH
22907: PPUSH
22908: PPUSH
// if killCounter = 0 then
22909: LD_EXP 47
22913: PUSH
22914: LD_INT 0
22916: EQUAL
22917: IFFALSE 22926
// SetAchievement ( ACH_SURV ) ;
22919: LD_STRING ACH_SURV
22921: PPUSH
22922: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22926: LD_INT 22
22928: PUSH
22929: LD_INT 3
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 21
22938: PUSH
22939: LD_INT 3
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PPUSH
22950: CALL_OW 69
22954: PUSH
22955: LD_INT 0
22957: EQUAL
22958: IFFALSE 22974
// begin wait ( 3 ) ;
22960: LD_INT 3
22962: PPUSH
22963: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22967: LD_STRING ACH_BASEDESTROYER
22969: PPUSH
22970: CALL_OW 543
// end ; m1 := false ;
22974: LD_ADDR_VAR 0 3
22978: PUSH
22979: LD_INT 0
22981: ST_TO_ADDR
// m2 := false ;
22982: LD_ADDR_VAR 0 4
22986: PUSH
22987: LD_INT 0
22989: ST_TO_ADDR
// m3 := false ;
22990: LD_ADDR_VAR 0 5
22994: PUSH
22995: LD_INT 0
22997: ST_TO_ADDR
// if crates + 100 > crates then
22998: LD_VAR 0 1
23002: PUSH
23003: LD_INT 100
23005: PLUS
23006: PUSH
23007: LD_VAR 0 1
23011: GREATER
23012: IFFALSE 23044
// begin AddMedal ( cans , 1 ) ;
23014: LD_STRING cans
23016: PPUSH
23017: LD_INT 1
23019: PPUSH
23020: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
23024: LD_INT 1
23026: PPUSH
23027: LD_STRING 06_crates_1
23029: PPUSH
23030: CALL_OW 39
// m1 := true ;
23034: LD_ADDR_VAR 0 3
23038: PUSH
23039: LD_INT 1
23041: ST_TO_ADDR
// end else
23042: GO 23065
// begin AddMedal ( cans , - 1 ) ;
23044: LD_STRING cans
23046: PPUSH
23047: LD_INT 1
23049: NEG
23050: PPUSH
23051: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
23055: LD_INT 0
23057: PPUSH
23058: LD_STRING 06_crates_1
23060: PPUSH
23061: CALL_OW 39
// end ; if unitLost < 3 then
23065: LD_EXP 30
23069: PUSH
23070: LD_INT 3
23072: LESS
23073: IFFALSE 23095
// begin AddMedal ( people , 1 ) ;
23075: LD_STRING people
23077: PPUSH
23078: LD_INT 1
23080: PPUSH
23081: CALL_OW 101
// m2 := true ;
23085: LD_ADDR_VAR 0 4
23089: PUSH
23090: LD_INT 1
23092: ST_TO_ADDR
// end else
23093: GO 23106
// begin AddMedal ( people , - 1 ) ;
23095: LD_STRING people
23097: PPUSH
23098: LD_INT 1
23100: NEG
23101: PPUSH
23102: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
23106: LD_EXP 28
23110: PPUSH
23111: LD_STRING 06_remoteVehs_1
23113: PPUSH
23114: CALL_OW 39
// if remoteVehiclesBuild = 1 then
23118: LD_EXP 28
23122: PUSH
23123: LD_INT 1
23125: EQUAL
23126: IFFALSE 23148
// begin AddMedal ( remote , 1 ) ;
23128: LD_STRING remote
23130: PPUSH
23131: LD_INT 1
23133: PPUSH
23134: CALL_OW 101
// m3 := true ;
23138: LD_ADDR_VAR 0 5
23142: PUSH
23143: LD_INT 1
23145: ST_TO_ADDR
// end else
23146: GO 23188
// begin if GetTech ( 18 , 1 ) = state_enabled then
23148: LD_INT 18
23150: PPUSH
23151: LD_INT 1
23153: PPUSH
23154: CALL_OW 321
23158: PUSH
23159: LD_INT 1
23161: EQUAL
23162: IFFALSE 23177
// begin AddMedal ( remote , - 1 ) ;
23164: LD_STRING remote
23166: PPUSH
23167: LD_INT 1
23169: NEG
23170: PPUSH
23171: CALL_OW 101
// end else
23175: GO 23188
// begin AddMedal ( remote , - 2 ) ;
23177: LD_STRING remote
23179: PPUSH
23180: LD_INT 2
23182: NEG
23183: PPUSH
23184: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
23188: LD_VAR 0 3
23192: PUSH
23193: LD_VAR 0 4
23197: AND
23198: PUSH
23199: LD_VAR 0 5
23203: AND
23204: IFFALSE 23220
// begin wait ( 3 ) ;
23206: LD_INT 3
23208: PPUSH
23209: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
23213: LD_STRING ACH_ASPEED_6
23215: PPUSH
23216: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
23220: LD_OWVAR 67
23224: PUSH
23225: LD_INT 3
23227: EQUAL
23228: PUSH
23229: LD_VAR 0 3
23233: AND
23234: PUSH
23235: LD_VAR 0 4
23239: AND
23240: PUSH
23241: LD_VAR 0 5
23245: AND
23246: IFFALSE 23258
// SetAchievementEX ( ACH_AMER , 6 ) ;
23248: LD_STRING ACH_AMER
23250: PPUSH
23251: LD_INT 6
23253: PPUSH
23254: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
23258: LD_EXP 20
23262: PPUSH
23263: LD_STRING 06_KurtStatus_1
23265: PPUSH
23266: CALL_OW 39
// GiveMedals ( Main ) ;
23270: LD_STRING Main
23272: PPUSH
23273: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
23277: LD_INT 22
23279: PUSH
23280: LD_INT 1
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 21
23289: PUSH
23290: LD_INT 1
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 50
23299: PUSH
23300: EMPTY
23301: LIST
23302: PUSH
23303: LD_INT 2
23305: PUSH
23306: LD_INT 25
23308: PUSH
23309: LD_INT 1
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 25
23318: PUSH
23319: LD_INT 2
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 25
23328: PUSH
23329: LD_INT 3
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 25
23338: PUSH
23339: LD_INT 4
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: PPUSH
23359: CALL_OW 69
23363: PPUSH
23364: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23368: LD_EXP 1
23372: PPUSH
23373: LD_EXP 43
23377: PUSH
23378: LD_STRING JMM
23380: STR
23381: PPUSH
23382: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23386: LD_EXP 2
23390: PPUSH
23391: LD_EXP 43
23395: PUSH
23396: LD_STRING Lisa
23398: STR
23399: PPUSH
23400: CALL 6348 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23404: LD_EXP 3
23408: PPUSH
23409: LD_EXP 43
23413: PUSH
23414: LD_STRING Bobby
23416: STR
23417: PPUSH
23418: CALL 6348 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23422: LD_EXP 4
23426: PPUSH
23427: LD_EXP 43
23431: PUSH
23432: LD_STRING Cyrus
23434: STR
23435: PPUSH
23436: CALL 6348 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23440: LD_EXP 5
23444: PPUSH
23445: LD_EXP 43
23449: PUSH
23450: LD_STRING Frank
23452: STR
23453: PPUSH
23454: CALL 6348 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23458: LD_EXP 6
23462: PPUSH
23463: LD_EXP 43
23467: PUSH
23468: LD_STRING Brown
23470: STR
23471: PPUSH
23472: CALL 6348 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23476: LD_EXP 7
23480: PPUSH
23481: LD_EXP 43
23485: PUSH
23486: LD_STRING Donaldson
23488: STR
23489: PPUSH
23490: CALL 6348 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23494: LD_EXP 8
23498: PPUSH
23499: LD_EXP 43
23503: PUSH
23504: LD_STRING Gladstone
23506: STR
23507: PPUSH
23508: CALL 6348 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23512: LD_EXP 9
23516: PPUSH
23517: LD_EXP 43
23521: PUSH
23522: LD_STRING Denis
23524: STR
23525: PPUSH
23526: CALL 6348 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23530: LD_EXP 15
23534: PPUSH
23535: LD_EXP 43
23539: PUSH
23540: LD_STRING Joan
23542: STR
23543: PPUSH
23544: CALL 6348 0 2
// if IsLive ( Joan ) then
23548: LD_EXP 15
23552: PPUSH
23553: CALL_OW 300
23557: IFFALSE 23571
// SaveCharacters ( Joan , Joan ) ;
23559: LD_EXP 15
23563: PPUSH
23564: LD_STRING Joan
23566: PPUSH
23567: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23571: LD_EXP 16
23575: PPUSH
23576: LD_STRING 06_JoanStatus_1
23578: PPUSH
23579: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23583: LD_INT 50
23585: PUSH
23586: EMPTY
23587: LIST
23588: PUSH
23589: LD_INT 22
23591: PUSH
23592: LD_INT 1
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 21
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 2
23611: PUSH
23612: LD_INT 25
23614: PUSH
23615: LD_INT 1
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 25
23624: PUSH
23625: LD_INT 2
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 25
23634: PUSH
23635: LD_INT 3
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 25
23644: PUSH
23645: LD_INT 4
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: PPUSH
23665: CALL_OW 69
23669: PUSH
23670: LD_EXP 1
23674: PUSH
23675: LD_EXP 2
23679: PUSH
23680: LD_EXP 3
23684: PUSH
23685: LD_EXP 4
23689: PUSH
23690: LD_EXP 5
23694: PUSH
23695: LD_EXP 6
23699: PUSH
23700: LD_EXP 7
23704: PUSH
23705: LD_EXP 8
23709: PUSH
23710: LD_EXP 9
23714: PUSH
23715: LD_EXP 15
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: DIFF
23732: PPUSH
23733: LD_STRING 06_other_survivors
23735: PPUSH
23736: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23740: LD_INT 50
23742: PUSH
23743: EMPTY
23744: LIST
23745: PUSH
23746: LD_INT 22
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 21
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 2
23768: PUSH
23769: LD_INT 25
23771: PUSH
23772: LD_INT 12
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 25
23781: PUSH
23782: LD_INT 16
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: LIST
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: PPUSH
23800: CALL_OW 69
23804: PPUSH
23805: LD_STRING 06_other_apemans
23807: PPUSH
23808: CALL_OW 38
// YouWin ;
23812: CALL_OW 103
// end ; end_of_file
23816: LD_VAR 0 2
23820: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23821: LD_EXP 39
23825: PUSH
23826: LD_INT 3
23828: EQUAL
23829: IFFALSE 23920
23831: GO 23833
23833: DISABLE
// begin enable ;
23834: ENABLE
// sendedConvoys = 0 ;
23835: LD_ADDR_EXP 39
23839: PUSH
23840: LD_INT 0
23842: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23843: LD_INT 6
23845: PPUSH
23846: LD_INT 3
23848: PPUSH
23849: LD_INT 3
23851: PUSH
23852: LD_INT 4
23854: PUSH
23855: LD_INT 6
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: LIST
23862: PUSH
23863: LD_OWVAR 67
23867: ARRAY
23868: PPUSH
23869: LD_INT 0
23871: PPUSH
23872: LD_INT 0
23874: PPUSH
23875: LD_INT 0
23877: PPUSH
23878: LD_INT 0
23880: PPUSH
23881: LD_EXP 34
23885: PPUSH
23886: LD_EXP 35
23890: PPUSH
23891: CALL_OW 12
23895: PPUSH
23896: LD_INT 16
23898: PPUSH
23899: LD_INT 15
23901: PPUSH
23902: LD_INT 1
23904: PPUSH
23905: LD_INT 1
23907: PPUSH
23908: LD_INT 2
23910: PPUSH
23911: CALL_OW 12
23915: PPUSH
23916: CALL 10767 0 12
// end ; end_of_file
23920: END
// export function CreateNature ; var i , un ; begin
23921: LD_INT 0
23923: PPUSH
23924: PPUSH
23925: PPUSH
// for i = 1 to Difficulty + 2 do
23926: LD_ADDR_VAR 0 2
23930: PUSH
23931: DOUBLE
23932: LD_INT 1
23934: DEC
23935: ST_TO_ADDR
23936: LD_OWVAR 67
23940: PUSH
23941: LD_INT 2
23943: PLUS
23944: PUSH
23945: FOR_TO
23946: IFFALSE 24055
// begin hc_sex = sex_male ;
23948: LD_ADDR_OWVAR 27
23952: PUSH
23953: LD_INT 1
23955: ST_TO_ADDR
// uc_side = 0 ;
23956: LD_ADDR_OWVAR 20
23960: PUSH
23961: LD_INT 0
23963: ST_TO_ADDR
// uc_nation = nation_nature ;
23964: LD_ADDR_OWVAR 21
23968: PUSH
23969: LD_INT 0
23971: ST_TO_ADDR
// hc_class = class_tiger ;
23972: LD_ADDR_OWVAR 28
23976: PUSH
23977: LD_INT 14
23979: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23980: LD_ADDR_OWVAR 31
23984: PUSH
23985: LD_EXP 35
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: LD_INT 0
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24005: LD_ADDR_OWVAR 35
24009: PUSH
24010: LD_INT 5
24012: NEG
24013: PPUSH
24014: LD_INT 5
24016: PPUSH
24017: CALL_OW 12
24021: PUSH
24022: LD_OWVAR 67
24026: MUL
24027: ST_TO_ADDR
// un = CreateHuman ;
24028: LD_ADDR_VAR 0 3
24032: PUSH
24033: CALL_OW 44
24037: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24038: LD_VAR 0 3
24042: PPUSH
24043: LD_INT 18
24045: PPUSH
24046: LD_INT 0
24048: PPUSH
24049: CALL_OW 49
// end ;
24053: GO 23945
24055: POP
24056: POP
// for i = 1 to rand ( 3 , 4 ) do
24057: LD_ADDR_VAR 0 2
24061: PUSH
24062: DOUBLE
24063: LD_INT 1
24065: DEC
24066: ST_TO_ADDR
24067: LD_INT 3
24069: PPUSH
24070: LD_INT 4
24072: PPUSH
24073: CALL_OW 12
24077: PUSH
24078: FOR_TO
24079: IFFALSE 24173
// begin hc_sex = sex_male ;
24081: LD_ADDR_OWVAR 27
24085: PUSH
24086: LD_INT 1
24088: ST_TO_ADDR
// uc_side = 0 ;
24089: LD_ADDR_OWVAR 20
24093: PUSH
24094: LD_INT 0
24096: ST_TO_ADDR
// uc_nation = nation_nature ;
24097: LD_ADDR_OWVAR 21
24101: PUSH
24102: LD_INT 0
24104: ST_TO_ADDR
// hc_class = 18 ;
24105: LD_ADDR_OWVAR 28
24109: PUSH
24110: LD_INT 18
24112: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24113: LD_ADDR_OWVAR 31
24117: PUSH
24118: LD_EXP 35
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: LD_INT 0
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: ST_TO_ADDR
// hc_agressivity = 0 ;
24138: LD_ADDR_OWVAR 35
24142: PUSH
24143: LD_INT 0
24145: ST_TO_ADDR
// un = CreateHuman ;
24146: LD_ADDR_VAR 0 3
24150: PUSH
24151: CALL_OW 44
24155: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24156: LD_VAR 0 3
24160: PPUSH
24161: LD_INT 18
24163: PPUSH
24164: LD_INT 0
24166: PPUSH
24167: CALL_OW 49
// end ;
24171: GO 24078
24173: POP
24174: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
24175: LD_ADDR_VAR 0 2
24179: PUSH
24180: DOUBLE
24181: LD_INT 1
24183: DEC
24184: ST_TO_ADDR
24185: LD_INT 1
24187: PPUSH
24188: LD_INT 3
24190: PPUSH
24191: CALL_OW 12
24195: PUSH
24196: LD_OWVAR 67
24200: PLUS
24201: PUSH
24202: FOR_TO
24203: IFFALSE 24352
// begin hc_sex = sex_male ;
24205: LD_ADDR_OWVAR 27
24209: PUSH
24210: LD_INT 1
24212: ST_TO_ADDR
// uc_side = 0 ;
24213: LD_ADDR_OWVAR 20
24217: PUSH
24218: LD_INT 0
24220: ST_TO_ADDR
// uc_nation = nation_nature ;
24221: LD_ADDR_OWVAR 21
24225: PUSH
24226: LD_INT 0
24228: ST_TO_ADDR
// hc_class = class_apeman ;
24229: LD_ADDR_OWVAR 28
24233: PUSH
24234: LD_INT 12
24236: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24237: LD_ADDR_OWVAR 31
24241: PUSH
24242: LD_INT 2
24244: PPUSH
24245: LD_INT 5
24247: PPUSH
24248: CALL_OW 12
24252: PUSH
24253: LD_INT 0
24255: PPUSH
24256: LD_INT 2
24258: PPUSH
24259: CALL_OW 12
24263: PUSH
24264: LD_INT 0
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
24276: LD_ADDR_OWVAR 35
24280: PUSH
24281: LD_INT 20
24283: PPUSH
24284: LD_INT 30
24286: PPUSH
24287: CALL_OW 12
24291: PUSH
24292: LD_INT 30
24294: PPUSH
24295: LD_INT 40
24297: PPUSH
24298: CALL_OW 12
24302: PUSH
24303: LD_INT 40
24305: PPUSH
24306: LD_INT 50
24308: PPUSH
24309: CALL_OW 12
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: LIST
24318: PUSH
24319: LD_OWVAR 67
24323: ARRAY
24324: ST_TO_ADDR
// un = CreateHuman ;
24325: LD_ADDR_VAR 0 3
24329: PUSH
24330: CALL_OW 44
24334: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
24335: LD_VAR 0 3
24339: PPUSH
24340: LD_INT 19
24342: PPUSH
24343: LD_INT 0
24345: PPUSH
24346: CALL_OW 49
// end ;
24350: GO 24202
24352: POP
24353: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
24354: LD_ADDR_VAR 0 2
24358: PUSH
24359: DOUBLE
24360: LD_INT 1
24362: DEC
24363: ST_TO_ADDR
24364: LD_INT 5
24366: PPUSH
24367: LD_INT 6
24369: PPUSH
24370: CALL_OW 12
24374: PUSH
24375: LD_OWVAR 67
24379: PLUS
24380: PUSH
24381: FOR_TO
24382: IFFALSE 24490
// begin hc_sex = sex_male ;
24384: LD_ADDR_OWVAR 27
24388: PUSH
24389: LD_INT 1
24391: ST_TO_ADDR
// uc_side = 0 ;
24392: LD_ADDR_OWVAR 20
24396: PUSH
24397: LD_INT 0
24399: ST_TO_ADDR
// uc_nation = nation_nature ;
24400: LD_ADDR_OWVAR 21
24404: PUSH
24405: LD_INT 0
24407: ST_TO_ADDR
// hc_class = class_apeman ;
24408: LD_ADDR_OWVAR 28
24412: PUSH
24413: LD_INT 12
24415: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24416: LD_ADDR_OWVAR 31
24420: PUSH
24421: LD_INT 2
24423: PPUSH
24424: LD_INT 5
24426: PPUSH
24427: CALL_OW 12
24431: PUSH
24432: LD_INT 0
24434: PPUSH
24435: LD_INT 2
24437: PPUSH
24438: CALL_OW 12
24442: PUSH
24443: LD_INT 0
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: ST_TO_ADDR
// hc_agressivity = 0 ;
24455: LD_ADDR_OWVAR 35
24459: PUSH
24460: LD_INT 0
24462: ST_TO_ADDR
// un = CreateHuman ;
24463: LD_ADDR_VAR 0 3
24467: PUSH
24468: CALL_OW 44
24472: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24473: LD_VAR 0 3
24477: PPUSH
24478: LD_INT 20
24480: PPUSH
24481: LD_INT 0
24483: PPUSH
24484: CALL_OW 49
// end ;
24488: GO 24381
24490: POP
24491: POP
// end ; end_of_file end_of_file
24492: LD_VAR 0 1
24496: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
24497: LD_INT 0
24499: PPUSH
// ar_crane := 88 ;
24500: LD_ADDR_EXP 57
24504: PUSH
24505: LD_INT 88
24507: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24508: LD_ADDR_EXP 52
24512: PUSH
24513: LD_INT 89
24515: ST_TO_ADDR
// us_hack := 99 ;
24516: LD_ADDR_EXP 53
24520: PUSH
24521: LD_INT 99
24523: ST_TO_ADDR
// us_artillery := 97 ;
24524: LD_ADDR_EXP 54
24528: PUSH
24529: LD_INT 97
24531: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24532: LD_ADDR_EXP 55
24536: PUSH
24537: LD_INT 91
24539: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
24540: LD_ADDR_EXP 56
24544: PUSH
24545: LD_INT 92
24547: ST_TO_ADDR
// ru_radar := 98 ;
24548: LD_ADDR_EXP 51
24552: PUSH
24553: LD_INT 98
24555: ST_TO_ADDR
// tech_Artillery := 80 ;
24556: LD_ADDR_EXP 58
24560: PUSH
24561: LD_INT 80
24563: ST_TO_ADDR
// tech_RadMat := 81 ;
24564: LD_ADDR_EXP 59
24568: PUSH
24569: LD_INT 81
24571: ST_TO_ADDR
// tech_BasicTools := 82 ;
24572: LD_ADDR_EXP 60
24576: PUSH
24577: LD_INT 82
24579: ST_TO_ADDR
// tech_Cargo := 83 ;
24580: LD_ADDR_EXP 61
24584: PUSH
24585: LD_INT 83
24587: ST_TO_ADDR
// tech_Track := 84 ;
24588: LD_ADDR_EXP 62
24592: PUSH
24593: LD_INT 84
24595: ST_TO_ADDR
// tech_Crane := 85 ;
24596: LD_ADDR_EXP 63
24600: PUSH
24601: LD_INT 85
24603: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24604: LD_ADDR_EXP 64
24608: PUSH
24609: LD_INT 86
24611: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24612: LD_ADDR_EXP 65
24616: PUSH
24617: LD_INT 87
24619: ST_TO_ADDR
// end ;
24620: LD_VAR 0 1
24624: RET
// every 1 do
24625: GO 24627
24627: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
24628: CALL 24497 0 0
24632: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ;
24633: LD_VAR 0 1
24637: PPUSH
24638: LD_VAR 0 2
24642: PPUSH
24643: LD_VAR 0 3
24647: PPUSH
24648: LD_VAR 0 4
24652: PPUSH
24653: LD_VAR 0 5
24657: PPUSH
24658: CALL 37437 0 5
// end ;
24662: PPOPN 5
24664: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
24665: LD_VAR 0 2
24669: PUSH
24670: LD_INT 100
24672: EQUAL
24673: IFFALSE 25622
// begin if not StreamModeActive then
24675: LD_EXP 66
24679: NOT
24680: IFFALSE 24690
// StreamModeActive := true ;
24682: LD_ADDR_EXP 66
24686: PUSH
24687: LD_INT 1
24689: ST_TO_ADDR
// if p3 = 0 then
24690: LD_VAR 0 3
24694: PUSH
24695: LD_INT 0
24697: EQUAL
24698: IFFALSE 24704
// InitStreamMode ;
24700: CALL 25855 0 0
// if p3 = 1 then
24704: LD_VAR 0 3
24708: PUSH
24709: LD_INT 1
24711: EQUAL
24712: IFFALSE 24722
// sRocket := true ;
24714: LD_ADDR_EXP 71
24718: PUSH
24719: LD_INT 1
24721: ST_TO_ADDR
// if p3 = 2 then
24722: LD_VAR 0 3
24726: PUSH
24727: LD_INT 2
24729: EQUAL
24730: IFFALSE 24740
// sSpeed := true ;
24732: LD_ADDR_EXP 70
24736: PUSH
24737: LD_INT 1
24739: ST_TO_ADDR
// if p3 = 3 then
24740: LD_VAR 0 3
24744: PUSH
24745: LD_INT 3
24747: EQUAL
24748: IFFALSE 24758
// sEngine := true ;
24750: LD_ADDR_EXP 72
24754: PUSH
24755: LD_INT 1
24757: ST_TO_ADDR
// if p3 = 4 then
24758: LD_VAR 0 3
24762: PUSH
24763: LD_INT 4
24765: EQUAL
24766: IFFALSE 24776
// sSpec := true ;
24768: LD_ADDR_EXP 69
24772: PUSH
24773: LD_INT 1
24775: ST_TO_ADDR
// if p3 = 5 then
24776: LD_VAR 0 3
24780: PUSH
24781: LD_INT 5
24783: EQUAL
24784: IFFALSE 24794
// sLevel := true ;
24786: LD_ADDR_EXP 73
24790: PUSH
24791: LD_INT 1
24793: ST_TO_ADDR
// if p3 = 6 then
24794: LD_VAR 0 3
24798: PUSH
24799: LD_INT 6
24801: EQUAL
24802: IFFALSE 24812
// sArmoury := true ;
24804: LD_ADDR_EXP 74
24808: PUSH
24809: LD_INT 1
24811: ST_TO_ADDR
// if p3 = 7 then
24812: LD_VAR 0 3
24816: PUSH
24817: LD_INT 7
24819: EQUAL
24820: IFFALSE 24830
// sRadar := true ;
24822: LD_ADDR_EXP 75
24826: PUSH
24827: LD_INT 1
24829: ST_TO_ADDR
// if p3 = 8 then
24830: LD_VAR 0 3
24834: PUSH
24835: LD_INT 8
24837: EQUAL
24838: IFFALSE 24848
// sBunker := true ;
24840: LD_ADDR_EXP 76
24844: PUSH
24845: LD_INT 1
24847: ST_TO_ADDR
// if p3 = 9 then
24848: LD_VAR 0 3
24852: PUSH
24853: LD_INT 9
24855: EQUAL
24856: IFFALSE 24866
// sHack := true ;
24858: LD_ADDR_EXP 77
24862: PUSH
24863: LD_INT 1
24865: ST_TO_ADDR
// if p3 = 10 then
24866: LD_VAR 0 3
24870: PUSH
24871: LD_INT 10
24873: EQUAL
24874: IFFALSE 24884
// sFire := true ;
24876: LD_ADDR_EXP 78
24880: PUSH
24881: LD_INT 1
24883: ST_TO_ADDR
// if p3 = 11 then
24884: LD_VAR 0 3
24888: PUSH
24889: LD_INT 11
24891: EQUAL
24892: IFFALSE 24902
// sRefresh := true ;
24894: LD_ADDR_EXP 79
24898: PUSH
24899: LD_INT 1
24901: ST_TO_ADDR
// if p3 = 12 then
24902: LD_VAR 0 3
24906: PUSH
24907: LD_INT 12
24909: EQUAL
24910: IFFALSE 24920
// sExp := true ;
24912: LD_ADDR_EXP 80
24916: PUSH
24917: LD_INT 1
24919: ST_TO_ADDR
// if p3 = 13 then
24920: LD_VAR 0 3
24924: PUSH
24925: LD_INT 13
24927: EQUAL
24928: IFFALSE 24938
// sDepot := true ;
24930: LD_ADDR_EXP 81
24934: PUSH
24935: LD_INT 1
24937: ST_TO_ADDR
// if p3 = 14 then
24938: LD_VAR 0 3
24942: PUSH
24943: LD_INT 14
24945: EQUAL
24946: IFFALSE 24956
// sFlag := true ;
24948: LD_ADDR_EXP 82
24952: PUSH
24953: LD_INT 1
24955: ST_TO_ADDR
// if p3 = 15 then
24956: LD_VAR 0 3
24960: PUSH
24961: LD_INT 15
24963: EQUAL
24964: IFFALSE 24974
// sKamikadze := true ;
24966: LD_ADDR_EXP 90
24970: PUSH
24971: LD_INT 1
24973: ST_TO_ADDR
// if p3 = 16 then
24974: LD_VAR 0 3
24978: PUSH
24979: LD_INT 16
24981: EQUAL
24982: IFFALSE 24992
// sTroll := true ;
24984: LD_ADDR_EXP 91
24988: PUSH
24989: LD_INT 1
24991: ST_TO_ADDR
// if p3 = 17 then
24992: LD_VAR 0 3
24996: PUSH
24997: LD_INT 17
24999: EQUAL
25000: IFFALSE 25010
// sSlow := true ;
25002: LD_ADDR_EXP 92
25006: PUSH
25007: LD_INT 1
25009: ST_TO_ADDR
// if p3 = 18 then
25010: LD_VAR 0 3
25014: PUSH
25015: LD_INT 18
25017: EQUAL
25018: IFFALSE 25028
// sLack := true ;
25020: LD_ADDR_EXP 93
25024: PUSH
25025: LD_INT 1
25027: ST_TO_ADDR
// if p3 = 19 then
25028: LD_VAR 0 3
25032: PUSH
25033: LD_INT 19
25035: EQUAL
25036: IFFALSE 25046
// sTank := true ;
25038: LD_ADDR_EXP 95
25042: PUSH
25043: LD_INT 1
25045: ST_TO_ADDR
// if p3 = 20 then
25046: LD_VAR 0 3
25050: PUSH
25051: LD_INT 20
25053: EQUAL
25054: IFFALSE 25064
// sRemote := true ;
25056: LD_ADDR_EXP 96
25060: PUSH
25061: LD_INT 1
25063: ST_TO_ADDR
// if p3 = 21 then
25064: LD_VAR 0 3
25068: PUSH
25069: LD_INT 21
25071: EQUAL
25072: IFFALSE 25082
// sPowell := true ;
25074: LD_ADDR_EXP 97
25078: PUSH
25079: LD_INT 1
25081: ST_TO_ADDR
// if p3 = 22 then
25082: LD_VAR 0 3
25086: PUSH
25087: LD_INT 22
25089: EQUAL
25090: IFFALSE 25100
// sTeleport := true ;
25092: LD_ADDR_EXP 100
25096: PUSH
25097: LD_INT 1
25099: ST_TO_ADDR
// if p3 = 23 then
25100: LD_VAR 0 3
25104: PUSH
25105: LD_INT 23
25107: EQUAL
25108: IFFALSE 25118
// sOilTower := true ;
25110: LD_ADDR_EXP 102
25114: PUSH
25115: LD_INT 1
25117: ST_TO_ADDR
// if p3 = 24 then
25118: LD_VAR 0 3
25122: PUSH
25123: LD_INT 24
25125: EQUAL
25126: IFFALSE 25136
// sShovel := true ;
25128: LD_ADDR_EXP 103
25132: PUSH
25133: LD_INT 1
25135: ST_TO_ADDR
// if p3 = 25 then
25136: LD_VAR 0 3
25140: PUSH
25141: LD_INT 25
25143: EQUAL
25144: IFFALSE 25154
// sSheik := true ;
25146: LD_ADDR_EXP 104
25150: PUSH
25151: LD_INT 1
25153: ST_TO_ADDR
// if p3 = 26 then
25154: LD_VAR 0 3
25158: PUSH
25159: LD_INT 26
25161: EQUAL
25162: IFFALSE 25172
// sEarthquake := true ;
25164: LD_ADDR_EXP 106
25168: PUSH
25169: LD_INT 1
25171: ST_TO_ADDR
// if p3 = 27 then
25172: LD_VAR 0 3
25176: PUSH
25177: LD_INT 27
25179: EQUAL
25180: IFFALSE 25190
// sAI := true ;
25182: LD_ADDR_EXP 107
25186: PUSH
25187: LD_INT 1
25189: ST_TO_ADDR
// if p3 = 28 then
25190: LD_VAR 0 3
25194: PUSH
25195: LD_INT 28
25197: EQUAL
25198: IFFALSE 25208
// sCargo := true ;
25200: LD_ADDR_EXP 110
25204: PUSH
25205: LD_INT 1
25207: ST_TO_ADDR
// if p3 = 29 then
25208: LD_VAR 0 3
25212: PUSH
25213: LD_INT 29
25215: EQUAL
25216: IFFALSE 25226
// sDLaser := true ;
25218: LD_ADDR_EXP 111
25222: PUSH
25223: LD_INT 1
25225: ST_TO_ADDR
// if p3 = 30 then
25226: LD_VAR 0 3
25230: PUSH
25231: LD_INT 30
25233: EQUAL
25234: IFFALSE 25244
// sExchange := true ;
25236: LD_ADDR_EXP 112
25240: PUSH
25241: LD_INT 1
25243: ST_TO_ADDR
// if p3 = 31 then
25244: LD_VAR 0 3
25248: PUSH
25249: LD_INT 31
25251: EQUAL
25252: IFFALSE 25262
// sFac := true ;
25254: LD_ADDR_EXP 113
25258: PUSH
25259: LD_INT 1
25261: ST_TO_ADDR
// if p3 = 32 then
25262: LD_VAR 0 3
25266: PUSH
25267: LD_INT 32
25269: EQUAL
25270: IFFALSE 25280
// sPower := true ;
25272: LD_ADDR_EXP 114
25276: PUSH
25277: LD_INT 1
25279: ST_TO_ADDR
// if p3 = 33 then
25280: LD_VAR 0 3
25284: PUSH
25285: LD_INT 33
25287: EQUAL
25288: IFFALSE 25298
// sRandom := true ;
25290: LD_ADDR_EXP 115
25294: PUSH
25295: LD_INT 1
25297: ST_TO_ADDR
// if p3 = 34 then
25298: LD_VAR 0 3
25302: PUSH
25303: LD_INT 34
25305: EQUAL
25306: IFFALSE 25316
// sShield := true ;
25308: LD_ADDR_EXP 116
25312: PUSH
25313: LD_INT 1
25315: ST_TO_ADDR
// if p3 = 35 then
25316: LD_VAR 0 3
25320: PUSH
25321: LD_INT 35
25323: EQUAL
25324: IFFALSE 25334
// sTime := true ;
25326: LD_ADDR_EXP 117
25330: PUSH
25331: LD_INT 1
25333: ST_TO_ADDR
// if p3 = 36 then
25334: LD_VAR 0 3
25338: PUSH
25339: LD_INT 36
25341: EQUAL
25342: IFFALSE 25352
// sTools := true ;
25344: LD_ADDR_EXP 118
25348: PUSH
25349: LD_INT 1
25351: ST_TO_ADDR
// if p3 = 101 then
25352: LD_VAR 0 3
25356: PUSH
25357: LD_INT 101
25359: EQUAL
25360: IFFALSE 25370
// sSold := true ;
25362: LD_ADDR_EXP 83
25366: PUSH
25367: LD_INT 1
25369: ST_TO_ADDR
// if p3 = 102 then
25370: LD_VAR 0 3
25374: PUSH
25375: LD_INT 102
25377: EQUAL
25378: IFFALSE 25388
// sDiff := true ;
25380: LD_ADDR_EXP 84
25384: PUSH
25385: LD_INT 1
25387: ST_TO_ADDR
// if p3 = 103 then
25388: LD_VAR 0 3
25392: PUSH
25393: LD_INT 103
25395: EQUAL
25396: IFFALSE 25406
// sFog := true ;
25398: LD_ADDR_EXP 87
25402: PUSH
25403: LD_INT 1
25405: ST_TO_ADDR
// if p3 = 104 then
25406: LD_VAR 0 3
25410: PUSH
25411: LD_INT 104
25413: EQUAL
25414: IFFALSE 25424
// sReset := true ;
25416: LD_ADDR_EXP 88
25420: PUSH
25421: LD_INT 1
25423: ST_TO_ADDR
// if p3 = 105 then
25424: LD_VAR 0 3
25428: PUSH
25429: LD_INT 105
25431: EQUAL
25432: IFFALSE 25442
// sSun := true ;
25434: LD_ADDR_EXP 89
25438: PUSH
25439: LD_INT 1
25441: ST_TO_ADDR
// if p3 = 106 then
25442: LD_VAR 0 3
25446: PUSH
25447: LD_INT 106
25449: EQUAL
25450: IFFALSE 25460
// sTiger := true ;
25452: LD_ADDR_EXP 85
25456: PUSH
25457: LD_INT 1
25459: ST_TO_ADDR
// if p3 = 107 then
25460: LD_VAR 0 3
25464: PUSH
25465: LD_INT 107
25467: EQUAL
25468: IFFALSE 25478
// sBomb := true ;
25470: LD_ADDR_EXP 86
25474: PUSH
25475: LD_INT 1
25477: ST_TO_ADDR
// if p3 = 108 then
25478: LD_VAR 0 3
25482: PUSH
25483: LD_INT 108
25485: EQUAL
25486: IFFALSE 25496
// sWound := true ;
25488: LD_ADDR_EXP 94
25492: PUSH
25493: LD_INT 1
25495: ST_TO_ADDR
// if p3 = 109 then
25496: LD_VAR 0 3
25500: PUSH
25501: LD_INT 109
25503: EQUAL
25504: IFFALSE 25514
// sBetray := true ;
25506: LD_ADDR_EXP 98
25510: PUSH
25511: LD_INT 1
25513: ST_TO_ADDR
// if p3 = 110 then
25514: LD_VAR 0 3
25518: PUSH
25519: LD_INT 110
25521: EQUAL
25522: IFFALSE 25532
// sContamin := true ;
25524: LD_ADDR_EXP 99
25528: PUSH
25529: LD_INT 1
25531: ST_TO_ADDR
// if p3 = 111 then
25532: LD_VAR 0 3
25536: PUSH
25537: LD_INT 111
25539: EQUAL
25540: IFFALSE 25550
// sOil := true ;
25542: LD_ADDR_EXP 101
25546: PUSH
25547: LD_INT 1
25549: ST_TO_ADDR
// if p3 = 112 then
25550: LD_VAR 0 3
25554: PUSH
25555: LD_INT 112
25557: EQUAL
25558: IFFALSE 25568
// sStu := true ;
25560: LD_ADDR_EXP 105
25564: PUSH
25565: LD_INT 1
25567: ST_TO_ADDR
// if p3 = 113 then
25568: LD_VAR 0 3
25572: PUSH
25573: LD_INT 113
25575: EQUAL
25576: IFFALSE 25586
// sBazooka := true ;
25578: LD_ADDR_EXP 108
25582: PUSH
25583: LD_INT 1
25585: ST_TO_ADDR
// if p3 = 114 then
25586: LD_VAR 0 3
25590: PUSH
25591: LD_INT 114
25593: EQUAL
25594: IFFALSE 25604
// sMortar := true ;
25596: LD_ADDR_EXP 109
25600: PUSH
25601: LD_INT 1
25603: ST_TO_ADDR
// if p3 = 115 then
25604: LD_VAR 0 3
25608: PUSH
25609: LD_INT 115
25611: EQUAL
25612: IFFALSE 25622
// sRanger := true ;
25614: LD_ADDR_EXP 119
25618: PUSH
25619: LD_INT 1
25621: ST_TO_ADDR
// end ; if p2 = 101 then
25622: LD_VAR 0 2
25626: PUSH
25627: LD_INT 101
25629: EQUAL
25630: IFFALSE 25833
// begin case p3 of 1 :
25632: LD_VAR 0 3
25636: PUSH
25637: LD_INT 1
25639: DOUBLE
25640: EQUAL
25641: IFTRUE 25645
25643: GO 25652
25645: POP
// hHackUnlimitedResources ; 2 :
25646: CALL 35927 0 0
25650: GO 25833
25652: LD_INT 2
25654: DOUBLE
25655: EQUAL
25656: IFTRUE 25660
25658: GO 25667
25660: POP
// hHackSetLevel10 ; 3 :
25661: CALL 36060 0 0
25665: GO 25833
25667: LD_INT 3
25669: DOUBLE
25670: EQUAL
25671: IFTRUE 25675
25673: GO 25682
25675: POP
// hHackSetLevel10YourUnits ; 4 :
25676: CALL 36145 0 0
25680: GO 25833
25682: LD_INT 4
25684: DOUBLE
25685: EQUAL
25686: IFTRUE 25690
25688: GO 25712
25690: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
25691: LD_VAR 0 4
25695: PPUSH
25696: LD_VAR 0 5
25700: PPUSH
25701: LD_VAR 0 6
25705: PPUSH
25706: CALL 36235 0 3
25710: GO 25833
25712: LD_INT 5
25714: DOUBLE
25715: EQUAL
25716: IFTRUE 25720
25718: GO 25727
25720: POP
// hHackSpawnVehicle ; 6 :
25721: CALL 36296 0 0
25725: GO 25833
25727: LD_INT 6
25729: DOUBLE
25730: EQUAL
25731: IFTRUE 25735
25733: GO 25742
25735: POP
// hHackInvincible ; 7 :
25736: CALL 36842 0 0
25740: GO 25833
25742: LD_INT 7
25744: DOUBLE
25745: EQUAL
25746: IFTRUE 25750
25748: GO 25757
25750: POP
// hHackInvisible ; 8 :
25751: CALL 36953 0 0
25755: GO 25833
25757: LD_INT 8
25759: DOUBLE
25760: EQUAL
25761: IFTRUE 25765
25763: GO 25772
25765: POP
// hHackChangeYourSide ; 9 :
25766: CALL 37010 0 0
25770: GO 25833
25772: LD_INT 9
25774: DOUBLE
25775: EQUAL
25776: IFTRUE 25780
25778: GO 25787
25780: POP
// hHackChangeUnitSide ; 10 :
25781: CALL 37052 0 0
25785: GO 25833
25787: LD_INT 10
25789: DOUBLE
25790: EQUAL
25791: IFTRUE 25795
25793: GO 25802
25795: POP
// hHackFog ; 11 :
25796: CALL 37153 0 0
25800: GO 25833
25802: LD_INT 11
25804: DOUBLE
25805: EQUAL
25806: IFTRUE 25810
25808: GO 25817
25810: POP
// hHackApeman ; 12 :
25811: CALL 37168 0 0
25815: GO 25833
25817: LD_INT 12
25819: DOUBLE
25820: EQUAL
25821: IFTRUE 25825
25823: GO 25832
25825: POP
// hHackBoom ; end ;
25826: CALL 37253 0 0
25830: GO 25833
25832: POP
// end ; end ;
25833: PPOPN 6
25835: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
25836: GO 25838
25838: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
25839: LD_STRING initStreamRollete();
25841: PPUSH
25842: CALL_OW 559
// InitStreamMode ;
25846: CALL 25855 0 0
// DefineStreamItems ( ) ;
25850: CALL 26295 0 0
// end ;
25854: END
// function InitStreamMode ; begin
25855: LD_INT 0
25857: PPUSH
// streamModeActive := false ;
25858: LD_ADDR_EXP 66
25862: PUSH
25863: LD_INT 0
25865: ST_TO_ADDR
// normalCounter := 36 ;
25866: LD_ADDR_EXP 67
25870: PUSH
25871: LD_INT 36
25873: ST_TO_ADDR
// hardcoreCounter := 16 ;
25874: LD_ADDR_EXP 68
25878: PUSH
25879: LD_INT 16
25881: ST_TO_ADDR
// sRocket := false ;
25882: LD_ADDR_EXP 71
25886: PUSH
25887: LD_INT 0
25889: ST_TO_ADDR
// sSpeed := false ;
25890: LD_ADDR_EXP 70
25894: PUSH
25895: LD_INT 0
25897: ST_TO_ADDR
// sEngine := false ;
25898: LD_ADDR_EXP 72
25902: PUSH
25903: LD_INT 0
25905: ST_TO_ADDR
// sSpec := false ;
25906: LD_ADDR_EXP 69
25910: PUSH
25911: LD_INT 0
25913: ST_TO_ADDR
// sLevel := false ;
25914: LD_ADDR_EXP 73
25918: PUSH
25919: LD_INT 0
25921: ST_TO_ADDR
// sArmoury := false ;
25922: LD_ADDR_EXP 74
25926: PUSH
25927: LD_INT 0
25929: ST_TO_ADDR
// sRadar := false ;
25930: LD_ADDR_EXP 75
25934: PUSH
25935: LD_INT 0
25937: ST_TO_ADDR
// sBunker := false ;
25938: LD_ADDR_EXP 76
25942: PUSH
25943: LD_INT 0
25945: ST_TO_ADDR
// sHack := false ;
25946: LD_ADDR_EXP 77
25950: PUSH
25951: LD_INT 0
25953: ST_TO_ADDR
// sFire := false ;
25954: LD_ADDR_EXP 78
25958: PUSH
25959: LD_INT 0
25961: ST_TO_ADDR
// sRefresh := false ;
25962: LD_ADDR_EXP 79
25966: PUSH
25967: LD_INT 0
25969: ST_TO_ADDR
// sExp := false ;
25970: LD_ADDR_EXP 80
25974: PUSH
25975: LD_INT 0
25977: ST_TO_ADDR
// sDepot := false ;
25978: LD_ADDR_EXP 81
25982: PUSH
25983: LD_INT 0
25985: ST_TO_ADDR
// sFlag := false ;
25986: LD_ADDR_EXP 82
25990: PUSH
25991: LD_INT 0
25993: ST_TO_ADDR
// sKamikadze := false ;
25994: LD_ADDR_EXP 90
25998: PUSH
25999: LD_INT 0
26001: ST_TO_ADDR
// sTroll := false ;
26002: LD_ADDR_EXP 91
26006: PUSH
26007: LD_INT 0
26009: ST_TO_ADDR
// sSlow := false ;
26010: LD_ADDR_EXP 92
26014: PUSH
26015: LD_INT 0
26017: ST_TO_ADDR
// sLack := false ;
26018: LD_ADDR_EXP 93
26022: PUSH
26023: LD_INT 0
26025: ST_TO_ADDR
// sTank := false ;
26026: LD_ADDR_EXP 95
26030: PUSH
26031: LD_INT 0
26033: ST_TO_ADDR
// sRemote := false ;
26034: LD_ADDR_EXP 96
26038: PUSH
26039: LD_INT 0
26041: ST_TO_ADDR
// sPowell := false ;
26042: LD_ADDR_EXP 97
26046: PUSH
26047: LD_INT 0
26049: ST_TO_ADDR
// sTeleport := false ;
26050: LD_ADDR_EXP 100
26054: PUSH
26055: LD_INT 0
26057: ST_TO_ADDR
// sOilTower := false ;
26058: LD_ADDR_EXP 102
26062: PUSH
26063: LD_INT 0
26065: ST_TO_ADDR
// sShovel := false ;
26066: LD_ADDR_EXP 103
26070: PUSH
26071: LD_INT 0
26073: ST_TO_ADDR
// sSheik := false ;
26074: LD_ADDR_EXP 104
26078: PUSH
26079: LD_INT 0
26081: ST_TO_ADDR
// sEarthquake := false ;
26082: LD_ADDR_EXP 106
26086: PUSH
26087: LD_INT 0
26089: ST_TO_ADDR
// sAI := false ;
26090: LD_ADDR_EXP 107
26094: PUSH
26095: LD_INT 0
26097: ST_TO_ADDR
// sCargo := false ;
26098: LD_ADDR_EXP 110
26102: PUSH
26103: LD_INT 0
26105: ST_TO_ADDR
// sDLaser := false ;
26106: LD_ADDR_EXP 111
26110: PUSH
26111: LD_INT 0
26113: ST_TO_ADDR
// sExchange := false ;
26114: LD_ADDR_EXP 112
26118: PUSH
26119: LD_INT 0
26121: ST_TO_ADDR
// sFac := false ;
26122: LD_ADDR_EXP 113
26126: PUSH
26127: LD_INT 0
26129: ST_TO_ADDR
// sPower := false ;
26130: LD_ADDR_EXP 114
26134: PUSH
26135: LD_INT 0
26137: ST_TO_ADDR
// sRandom := false ;
26138: LD_ADDR_EXP 115
26142: PUSH
26143: LD_INT 0
26145: ST_TO_ADDR
// sShield := false ;
26146: LD_ADDR_EXP 116
26150: PUSH
26151: LD_INT 0
26153: ST_TO_ADDR
// sTime := false ;
26154: LD_ADDR_EXP 117
26158: PUSH
26159: LD_INT 0
26161: ST_TO_ADDR
// sTools := false ;
26162: LD_ADDR_EXP 118
26166: PUSH
26167: LD_INT 0
26169: ST_TO_ADDR
// sSold := false ;
26170: LD_ADDR_EXP 83
26174: PUSH
26175: LD_INT 0
26177: ST_TO_ADDR
// sDiff := false ;
26178: LD_ADDR_EXP 84
26182: PUSH
26183: LD_INT 0
26185: ST_TO_ADDR
// sFog := false ;
26186: LD_ADDR_EXP 87
26190: PUSH
26191: LD_INT 0
26193: ST_TO_ADDR
// sReset := false ;
26194: LD_ADDR_EXP 88
26198: PUSH
26199: LD_INT 0
26201: ST_TO_ADDR
// sSun := false ;
26202: LD_ADDR_EXP 89
26206: PUSH
26207: LD_INT 0
26209: ST_TO_ADDR
// sTiger := false ;
26210: LD_ADDR_EXP 85
26214: PUSH
26215: LD_INT 0
26217: ST_TO_ADDR
// sBomb := false ;
26218: LD_ADDR_EXP 86
26222: PUSH
26223: LD_INT 0
26225: ST_TO_ADDR
// sWound := false ;
26226: LD_ADDR_EXP 94
26230: PUSH
26231: LD_INT 0
26233: ST_TO_ADDR
// sBetray := false ;
26234: LD_ADDR_EXP 98
26238: PUSH
26239: LD_INT 0
26241: ST_TO_ADDR
// sContamin := false ;
26242: LD_ADDR_EXP 99
26246: PUSH
26247: LD_INT 0
26249: ST_TO_ADDR
// sOil := false ;
26250: LD_ADDR_EXP 101
26254: PUSH
26255: LD_INT 0
26257: ST_TO_ADDR
// sStu := false ;
26258: LD_ADDR_EXP 105
26262: PUSH
26263: LD_INT 0
26265: ST_TO_ADDR
// sBazooka := false ;
26266: LD_ADDR_EXP 108
26270: PUSH
26271: LD_INT 0
26273: ST_TO_ADDR
// sMortar := false ;
26274: LD_ADDR_EXP 109
26278: PUSH
26279: LD_INT 0
26281: ST_TO_ADDR
// sRanger := false ;
26282: LD_ADDR_EXP 119
26286: PUSH
26287: LD_INT 0
26289: ST_TO_ADDR
// end ;
26290: LD_VAR 0 1
26294: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
26295: LD_INT 0
26297: PPUSH
26298: PPUSH
26299: PPUSH
26300: PPUSH
26301: PPUSH
// result := [ ] ;
26302: LD_ADDR_VAR 0 1
26306: PUSH
26307: EMPTY
26308: ST_TO_ADDR
// if campaign_id = 1 then
26309: LD_OWVAR 69
26313: PUSH
26314: LD_INT 1
26316: EQUAL
26317: IFFALSE 29255
// begin case mission_number of 1 :
26319: LD_OWVAR 70
26323: PUSH
26324: LD_INT 1
26326: DOUBLE
26327: EQUAL
26328: IFTRUE 26332
26330: GO 26396
26332: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
26333: LD_ADDR_VAR 0 1
26337: PUSH
26338: LD_INT 2
26340: PUSH
26341: LD_INT 4
26343: PUSH
26344: LD_INT 11
26346: PUSH
26347: LD_INT 12
26349: PUSH
26350: LD_INT 15
26352: PUSH
26353: LD_INT 16
26355: PUSH
26356: LD_INT 22
26358: PUSH
26359: LD_INT 23
26361: PUSH
26362: LD_INT 26
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 101
26378: PUSH
26379: LD_INT 102
26381: PUSH
26382: LD_INT 106
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: ST_TO_ADDR
26394: GO 29253
26396: LD_INT 2
26398: DOUBLE
26399: EQUAL
26400: IFTRUE 26404
26402: GO 26476
26404: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
26405: LD_ADDR_VAR 0 1
26409: PUSH
26410: LD_INT 2
26412: PUSH
26413: LD_INT 4
26415: PUSH
26416: LD_INT 11
26418: PUSH
26419: LD_INT 12
26421: PUSH
26422: LD_INT 15
26424: PUSH
26425: LD_INT 16
26427: PUSH
26428: LD_INT 22
26430: PUSH
26431: LD_INT 23
26433: PUSH
26434: LD_INT 26
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 101
26450: PUSH
26451: LD_INT 102
26453: PUSH
26454: LD_INT 105
26456: PUSH
26457: LD_INT 106
26459: PUSH
26460: LD_INT 108
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: ST_TO_ADDR
26474: GO 29253
26476: LD_INT 3
26478: DOUBLE
26479: EQUAL
26480: IFTRUE 26484
26482: GO 26560
26484: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
26485: LD_ADDR_VAR 0 1
26489: PUSH
26490: LD_INT 2
26492: PUSH
26493: LD_INT 4
26495: PUSH
26496: LD_INT 5
26498: PUSH
26499: LD_INT 11
26501: PUSH
26502: LD_INT 12
26504: PUSH
26505: LD_INT 15
26507: PUSH
26508: LD_INT 16
26510: PUSH
26511: LD_INT 22
26513: PUSH
26514: LD_INT 26
26516: PUSH
26517: LD_INT 36
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 101
26534: PUSH
26535: LD_INT 102
26537: PUSH
26538: LD_INT 105
26540: PUSH
26541: LD_INT 106
26543: PUSH
26544: LD_INT 108
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: ST_TO_ADDR
26558: GO 29253
26560: LD_INT 4
26562: DOUBLE
26563: EQUAL
26564: IFTRUE 26568
26566: GO 26652
26568: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
26569: LD_ADDR_VAR 0 1
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: LD_INT 4
26579: PUSH
26580: LD_INT 5
26582: PUSH
26583: LD_INT 8
26585: PUSH
26586: LD_INT 11
26588: PUSH
26589: LD_INT 12
26591: PUSH
26592: LD_INT 15
26594: PUSH
26595: LD_INT 16
26597: PUSH
26598: LD_INT 22
26600: PUSH
26601: LD_INT 23
26603: PUSH
26604: LD_INT 26
26606: PUSH
26607: LD_INT 36
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 101
26626: PUSH
26627: LD_INT 102
26629: PUSH
26630: LD_INT 105
26632: PUSH
26633: LD_INT 106
26635: PUSH
26636: LD_INT 108
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: ST_TO_ADDR
26650: GO 29253
26652: LD_INT 5
26654: DOUBLE
26655: EQUAL
26656: IFTRUE 26660
26658: GO 26760
26660: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
26661: LD_ADDR_VAR 0 1
26665: PUSH
26666: LD_INT 2
26668: PUSH
26669: LD_INT 4
26671: PUSH
26672: LD_INT 5
26674: PUSH
26675: LD_INT 6
26677: PUSH
26678: LD_INT 8
26680: PUSH
26681: LD_INT 11
26683: PUSH
26684: LD_INT 12
26686: PUSH
26687: LD_INT 15
26689: PUSH
26690: LD_INT 16
26692: PUSH
26693: LD_INT 22
26695: PUSH
26696: LD_INT 23
26698: PUSH
26699: LD_INT 25
26701: PUSH
26702: LD_INT 26
26704: PUSH
26705: LD_INT 36
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 101
26726: PUSH
26727: LD_INT 102
26729: PUSH
26730: LD_INT 105
26732: PUSH
26733: LD_INT 106
26735: PUSH
26736: LD_INT 108
26738: PUSH
26739: LD_INT 109
26741: PUSH
26742: LD_INT 112
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: ST_TO_ADDR
26758: GO 29253
26760: LD_INT 6
26762: DOUBLE
26763: EQUAL
26764: IFTRUE 26768
26766: GO 26888
26768: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
26769: LD_ADDR_VAR 0 1
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: LD_INT 4
26779: PUSH
26780: LD_INT 5
26782: PUSH
26783: LD_INT 6
26785: PUSH
26786: LD_INT 8
26788: PUSH
26789: LD_INT 11
26791: PUSH
26792: LD_INT 12
26794: PUSH
26795: LD_INT 15
26797: PUSH
26798: LD_INT 16
26800: PUSH
26801: LD_INT 20
26803: PUSH
26804: LD_INT 21
26806: PUSH
26807: LD_INT 22
26809: PUSH
26810: LD_INT 23
26812: PUSH
26813: LD_INT 25
26815: PUSH
26816: LD_INT 26
26818: PUSH
26819: LD_INT 30
26821: PUSH
26822: LD_INT 31
26824: PUSH
26825: LD_INT 32
26827: PUSH
26828: LD_INT 36
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 101
26854: PUSH
26855: LD_INT 102
26857: PUSH
26858: LD_INT 105
26860: PUSH
26861: LD_INT 106
26863: PUSH
26864: LD_INT 108
26866: PUSH
26867: LD_INT 109
26869: PUSH
26870: LD_INT 112
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: ST_TO_ADDR
26886: GO 29253
26888: LD_INT 7
26890: DOUBLE
26891: EQUAL
26892: IFTRUE 26896
26894: GO 26996
26896: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
26897: LD_ADDR_VAR 0 1
26901: PUSH
26902: LD_INT 2
26904: PUSH
26905: LD_INT 4
26907: PUSH
26908: LD_INT 5
26910: PUSH
26911: LD_INT 7
26913: PUSH
26914: LD_INT 11
26916: PUSH
26917: LD_INT 12
26919: PUSH
26920: LD_INT 15
26922: PUSH
26923: LD_INT 16
26925: PUSH
26926: LD_INT 20
26928: PUSH
26929: LD_INT 21
26931: PUSH
26932: LD_INT 22
26934: PUSH
26935: LD_INT 23
26937: PUSH
26938: LD_INT 25
26940: PUSH
26941: LD_INT 26
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 101
26962: PUSH
26963: LD_INT 102
26965: PUSH
26966: LD_INT 103
26968: PUSH
26969: LD_INT 105
26971: PUSH
26972: LD_INT 106
26974: PUSH
26975: LD_INT 108
26977: PUSH
26978: LD_INT 112
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: ST_TO_ADDR
26994: GO 29253
26996: LD_INT 8
26998: DOUBLE
26999: EQUAL
27000: IFTRUE 27004
27002: GO 27132
27004: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
27005: LD_ADDR_VAR 0 1
27009: PUSH
27010: LD_INT 2
27012: PUSH
27013: LD_INT 4
27015: PUSH
27016: LD_INT 5
27018: PUSH
27019: LD_INT 6
27021: PUSH
27022: LD_INT 7
27024: PUSH
27025: LD_INT 8
27027: PUSH
27028: LD_INT 11
27030: PUSH
27031: LD_INT 12
27033: PUSH
27034: LD_INT 15
27036: PUSH
27037: LD_INT 16
27039: PUSH
27040: LD_INT 20
27042: PUSH
27043: LD_INT 21
27045: PUSH
27046: LD_INT 22
27048: PUSH
27049: LD_INT 23
27051: PUSH
27052: LD_INT 25
27054: PUSH
27055: LD_INT 26
27057: PUSH
27058: LD_INT 30
27060: PUSH
27061: LD_INT 31
27063: PUSH
27064: LD_INT 32
27066: PUSH
27067: LD_INT 36
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 101
27094: PUSH
27095: LD_INT 102
27097: PUSH
27098: LD_INT 103
27100: PUSH
27101: LD_INT 105
27103: PUSH
27104: LD_INT 106
27106: PUSH
27107: LD_INT 108
27109: PUSH
27110: LD_INT 109
27112: PUSH
27113: LD_INT 112
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: ST_TO_ADDR
27130: GO 29253
27132: LD_INT 9
27134: DOUBLE
27135: EQUAL
27136: IFTRUE 27140
27138: GO 27276
27140: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
27141: LD_ADDR_VAR 0 1
27145: PUSH
27146: LD_INT 2
27148: PUSH
27149: LD_INT 4
27151: PUSH
27152: LD_INT 5
27154: PUSH
27155: LD_INT 6
27157: PUSH
27158: LD_INT 7
27160: PUSH
27161: LD_INT 8
27163: PUSH
27164: LD_INT 11
27166: PUSH
27167: LD_INT 12
27169: PUSH
27170: LD_INT 15
27172: PUSH
27173: LD_INT 16
27175: PUSH
27176: LD_INT 20
27178: PUSH
27179: LD_INT 21
27181: PUSH
27182: LD_INT 22
27184: PUSH
27185: LD_INT 23
27187: PUSH
27188: LD_INT 25
27190: PUSH
27191: LD_INT 26
27193: PUSH
27194: LD_INT 28
27196: PUSH
27197: LD_INT 30
27199: PUSH
27200: LD_INT 31
27202: PUSH
27203: LD_INT 32
27205: PUSH
27206: LD_INT 36
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 101
27234: PUSH
27235: LD_INT 102
27237: PUSH
27238: LD_INT 103
27240: PUSH
27241: LD_INT 105
27243: PUSH
27244: LD_INT 106
27246: PUSH
27247: LD_INT 108
27249: PUSH
27250: LD_INT 109
27252: PUSH
27253: LD_INT 112
27255: PUSH
27256: LD_INT 114
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: ST_TO_ADDR
27274: GO 29253
27276: LD_INT 10
27278: DOUBLE
27279: EQUAL
27280: IFTRUE 27284
27282: GO 27468
27284: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
27285: LD_ADDR_VAR 0 1
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: LD_INT 4
27295: PUSH
27296: LD_INT 5
27298: PUSH
27299: LD_INT 6
27301: PUSH
27302: LD_INT 7
27304: PUSH
27305: LD_INT 8
27307: PUSH
27308: LD_INT 9
27310: PUSH
27311: LD_INT 10
27313: PUSH
27314: LD_INT 11
27316: PUSH
27317: LD_INT 12
27319: PUSH
27320: LD_INT 13
27322: PUSH
27323: LD_INT 14
27325: PUSH
27326: LD_INT 15
27328: PUSH
27329: LD_INT 16
27331: PUSH
27332: LD_INT 17
27334: PUSH
27335: LD_INT 18
27337: PUSH
27338: LD_INT 19
27340: PUSH
27341: LD_INT 20
27343: PUSH
27344: LD_INT 21
27346: PUSH
27347: LD_INT 22
27349: PUSH
27350: LD_INT 23
27352: PUSH
27353: LD_INT 24
27355: PUSH
27356: LD_INT 25
27358: PUSH
27359: LD_INT 26
27361: PUSH
27362: LD_INT 28
27364: PUSH
27365: LD_INT 30
27367: PUSH
27368: LD_INT 31
27370: PUSH
27371: LD_INT 32
27373: PUSH
27374: LD_INT 36
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 101
27410: PUSH
27411: LD_INT 102
27413: PUSH
27414: LD_INT 103
27416: PUSH
27417: LD_INT 104
27419: PUSH
27420: LD_INT 105
27422: PUSH
27423: LD_INT 106
27425: PUSH
27426: LD_INT 107
27428: PUSH
27429: LD_INT 108
27431: PUSH
27432: LD_INT 109
27434: PUSH
27435: LD_INT 110
27437: PUSH
27438: LD_INT 111
27440: PUSH
27441: LD_INT 112
27443: PUSH
27444: LD_INT 114
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: ST_TO_ADDR
27466: GO 29253
27468: LD_INT 11
27470: DOUBLE
27471: EQUAL
27472: IFTRUE 27476
27474: GO 27668
27476: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
27477: LD_ADDR_VAR 0 1
27481: PUSH
27482: LD_INT 2
27484: PUSH
27485: LD_INT 3
27487: PUSH
27488: LD_INT 4
27490: PUSH
27491: LD_INT 5
27493: PUSH
27494: LD_INT 6
27496: PUSH
27497: LD_INT 7
27499: PUSH
27500: LD_INT 8
27502: PUSH
27503: LD_INT 9
27505: PUSH
27506: LD_INT 10
27508: PUSH
27509: LD_INT 11
27511: PUSH
27512: LD_INT 12
27514: PUSH
27515: LD_INT 13
27517: PUSH
27518: LD_INT 14
27520: PUSH
27521: LD_INT 15
27523: PUSH
27524: LD_INT 16
27526: PUSH
27527: LD_INT 17
27529: PUSH
27530: LD_INT 18
27532: PUSH
27533: LD_INT 19
27535: PUSH
27536: LD_INT 20
27538: PUSH
27539: LD_INT 21
27541: PUSH
27542: LD_INT 22
27544: PUSH
27545: LD_INT 23
27547: PUSH
27548: LD_INT 24
27550: PUSH
27551: LD_INT 25
27553: PUSH
27554: LD_INT 26
27556: PUSH
27557: LD_INT 28
27559: PUSH
27560: LD_INT 30
27562: PUSH
27563: LD_INT 31
27565: PUSH
27566: LD_INT 32
27568: PUSH
27569: LD_INT 34
27571: PUSH
27572: LD_INT 36
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 101
27610: PUSH
27611: LD_INT 102
27613: PUSH
27614: LD_INT 103
27616: PUSH
27617: LD_INT 104
27619: PUSH
27620: LD_INT 105
27622: PUSH
27623: LD_INT 106
27625: PUSH
27626: LD_INT 107
27628: PUSH
27629: LD_INT 108
27631: PUSH
27632: LD_INT 109
27634: PUSH
27635: LD_INT 110
27637: PUSH
27638: LD_INT 111
27640: PUSH
27641: LD_INT 112
27643: PUSH
27644: LD_INT 114
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: ST_TO_ADDR
27666: GO 29253
27668: LD_INT 12
27670: DOUBLE
27671: EQUAL
27672: IFTRUE 27676
27674: GO 27884
27676: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
27677: LD_ADDR_VAR 0 1
27681: PUSH
27682: LD_INT 1
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: LD_INT 3
27690: PUSH
27691: LD_INT 4
27693: PUSH
27694: LD_INT 5
27696: PUSH
27697: LD_INT 6
27699: PUSH
27700: LD_INT 7
27702: PUSH
27703: LD_INT 8
27705: PUSH
27706: LD_INT 9
27708: PUSH
27709: LD_INT 10
27711: PUSH
27712: LD_INT 11
27714: PUSH
27715: LD_INT 12
27717: PUSH
27718: LD_INT 13
27720: PUSH
27721: LD_INT 14
27723: PUSH
27724: LD_INT 15
27726: PUSH
27727: LD_INT 16
27729: PUSH
27730: LD_INT 17
27732: PUSH
27733: LD_INT 18
27735: PUSH
27736: LD_INT 19
27738: PUSH
27739: LD_INT 20
27741: PUSH
27742: LD_INT 21
27744: PUSH
27745: LD_INT 22
27747: PUSH
27748: LD_INT 23
27750: PUSH
27751: LD_INT 24
27753: PUSH
27754: LD_INT 25
27756: PUSH
27757: LD_INT 26
27759: PUSH
27760: LD_INT 27
27762: PUSH
27763: LD_INT 28
27765: PUSH
27766: LD_INT 30
27768: PUSH
27769: LD_INT 31
27771: PUSH
27772: LD_INT 32
27774: PUSH
27775: LD_INT 33
27777: PUSH
27778: LD_INT 34
27780: PUSH
27781: LD_INT 36
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 101
27822: PUSH
27823: LD_INT 102
27825: PUSH
27826: LD_INT 103
27828: PUSH
27829: LD_INT 104
27831: PUSH
27832: LD_INT 105
27834: PUSH
27835: LD_INT 106
27837: PUSH
27838: LD_INT 107
27840: PUSH
27841: LD_INT 108
27843: PUSH
27844: LD_INT 109
27846: PUSH
27847: LD_INT 110
27849: PUSH
27850: LD_INT 111
27852: PUSH
27853: LD_INT 112
27855: PUSH
27856: LD_INT 113
27858: PUSH
27859: LD_INT 114
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: ST_TO_ADDR
27882: GO 29253
27884: LD_INT 13
27886: DOUBLE
27887: EQUAL
27888: IFTRUE 27892
27890: GO 28088
27892: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
27893: LD_ADDR_VAR 0 1
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: LD_INT 2
27903: PUSH
27904: LD_INT 3
27906: PUSH
27907: LD_INT 4
27909: PUSH
27910: LD_INT 5
27912: PUSH
27913: LD_INT 8
27915: PUSH
27916: LD_INT 9
27918: PUSH
27919: LD_INT 10
27921: PUSH
27922: LD_INT 11
27924: PUSH
27925: LD_INT 12
27927: PUSH
27928: LD_INT 14
27930: PUSH
27931: LD_INT 15
27933: PUSH
27934: LD_INT 16
27936: PUSH
27937: LD_INT 17
27939: PUSH
27940: LD_INT 18
27942: PUSH
27943: LD_INT 19
27945: PUSH
27946: LD_INT 20
27948: PUSH
27949: LD_INT 21
27951: PUSH
27952: LD_INT 22
27954: PUSH
27955: LD_INT 23
27957: PUSH
27958: LD_INT 24
27960: PUSH
27961: LD_INT 25
27963: PUSH
27964: LD_INT 26
27966: PUSH
27967: LD_INT 27
27969: PUSH
27970: LD_INT 28
27972: PUSH
27973: LD_INT 30
27975: PUSH
27976: LD_INT 31
27978: PUSH
27979: LD_INT 32
27981: PUSH
27982: LD_INT 33
27984: PUSH
27985: LD_INT 34
27987: PUSH
27988: LD_INT 36
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 101
28026: PUSH
28027: LD_INT 102
28029: PUSH
28030: LD_INT 103
28032: PUSH
28033: LD_INT 104
28035: PUSH
28036: LD_INT 105
28038: PUSH
28039: LD_INT 106
28041: PUSH
28042: LD_INT 107
28044: PUSH
28045: LD_INT 108
28047: PUSH
28048: LD_INT 109
28050: PUSH
28051: LD_INT 110
28053: PUSH
28054: LD_INT 111
28056: PUSH
28057: LD_INT 112
28059: PUSH
28060: LD_INT 113
28062: PUSH
28063: LD_INT 114
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: ST_TO_ADDR
28086: GO 29253
28088: LD_INT 14
28090: DOUBLE
28091: EQUAL
28092: IFTRUE 28096
28094: GO 28308
28096: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
28097: LD_ADDR_VAR 0 1
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: LD_INT 2
28107: PUSH
28108: LD_INT 3
28110: PUSH
28111: LD_INT 4
28113: PUSH
28114: LD_INT 5
28116: PUSH
28117: LD_INT 6
28119: PUSH
28120: LD_INT 7
28122: PUSH
28123: LD_INT 8
28125: PUSH
28126: LD_INT 9
28128: PUSH
28129: LD_INT 10
28131: PUSH
28132: LD_INT 11
28134: PUSH
28135: LD_INT 12
28137: PUSH
28138: LD_INT 13
28140: PUSH
28141: LD_INT 14
28143: PUSH
28144: LD_INT 15
28146: PUSH
28147: LD_INT 16
28149: PUSH
28150: LD_INT 17
28152: PUSH
28153: LD_INT 18
28155: PUSH
28156: LD_INT 19
28158: PUSH
28159: LD_INT 20
28161: PUSH
28162: LD_INT 21
28164: PUSH
28165: LD_INT 22
28167: PUSH
28168: LD_INT 23
28170: PUSH
28171: LD_INT 24
28173: PUSH
28174: LD_INT 25
28176: PUSH
28177: LD_INT 26
28179: PUSH
28180: LD_INT 27
28182: PUSH
28183: LD_INT 28
28185: PUSH
28186: LD_INT 29
28188: PUSH
28189: LD_INT 30
28191: PUSH
28192: LD_INT 31
28194: PUSH
28195: LD_INT 32
28197: PUSH
28198: LD_INT 33
28200: PUSH
28201: LD_INT 34
28203: PUSH
28204: LD_INT 36
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 101
28246: PUSH
28247: LD_INT 102
28249: PUSH
28250: LD_INT 103
28252: PUSH
28253: LD_INT 104
28255: PUSH
28256: LD_INT 105
28258: PUSH
28259: LD_INT 106
28261: PUSH
28262: LD_INT 107
28264: PUSH
28265: LD_INT 108
28267: PUSH
28268: LD_INT 109
28270: PUSH
28271: LD_INT 110
28273: PUSH
28274: LD_INT 111
28276: PUSH
28277: LD_INT 112
28279: PUSH
28280: LD_INT 113
28282: PUSH
28283: LD_INT 114
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: ST_TO_ADDR
28306: GO 29253
28308: LD_INT 15
28310: DOUBLE
28311: EQUAL
28312: IFTRUE 28316
28314: GO 28528
28316: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
28317: LD_ADDR_VAR 0 1
28321: PUSH
28322: LD_INT 1
28324: PUSH
28325: LD_INT 2
28327: PUSH
28328: LD_INT 3
28330: PUSH
28331: LD_INT 4
28333: PUSH
28334: LD_INT 5
28336: PUSH
28337: LD_INT 6
28339: PUSH
28340: LD_INT 7
28342: PUSH
28343: LD_INT 8
28345: PUSH
28346: LD_INT 9
28348: PUSH
28349: LD_INT 10
28351: PUSH
28352: LD_INT 11
28354: PUSH
28355: LD_INT 12
28357: PUSH
28358: LD_INT 13
28360: PUSH
28361: LD_INT 14
28363: PUSH
28364: LD_INT 15
28366: PUSH
28367: LD_INT 16
28369: PUSH
28370: LD_INT 17
28372: PUSH
28373: LD_INT 18
28375: PUSH
28376: LD_INT 19
28378: PUSH
28379: LD_INT 20
28381: PUSH
28382: LD_INT 21
28384: PUSH
28385: LD_INT 22
28387: PUSH
28388: LD_INT 23
28390: PUSH
28391: LD_INT 24
28393: PUSH
28394: LD_INT 25
28396: PUSH
28397: LD_INT 26
28399: PUSH
28400: LD_INT 27
28402: PUSH
28403: LD_INT 28
28405: PUSH
28406: LD_INT 29
28408: PUSH
28409: LD_INT 30
28411: PUSH
28412: LD_INT 31
28414: PUSH
28415: LD_INT 32
28417: PUSH
28418: LD_INT 33
28420: PUSH
28421: LD_INT 34
28423: PUSH
28424: LD_INT 36
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 101
28466: PUSH
28467: LD_INT 102
28469: PUSH
28470: LD_INT 103
28472: PUSH
28473: LD_INT 104
28475: PUSH
28476: LD_INT 105
28478: PUSH
28479: LD_INT 106
28481: PUSH
28482: LD_INT 107
28484: PUSH
28485: LD_INT 108
28487: PUSH
28488: LD_INT 109
28490: PUSH
28491: LD_INT 110
28493: PUSH
28494: LD_INT 111
28496: PUSH
28497: LD_INT 112
28499: PUSH
28500: LD_INT 113
28502: PUSH
28503: LD_INT 114
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: ST_TO_ADDR
28526: GO 29253
28528: LD_INT 16
28530: DOUBLE
28531: EQUAL
28532: IFTRUE 28536
28534: GO 28660
28536: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
28537: LD_ADDR_VAR 0 1
28541: PUSH
28542: LD_INT 2
28544: PUSH
28545: LD_INT 4
28547: PUSH
28548: LD_INT 5
28550: PUSH
28551: LD_INT 7
28553: PUSH
28554: LD_INT 11
28556: PUSH
28557: LD_INT 12
28559: PUSH
28560: LD_INT 15
28562: PUSH
28563: LD_INT 16
28565: PUSH
28566: LD_INT 20
28568: PUSH
28569: LD_INT 21
28571: PUSH
28572: LD_INT 22
28574: PUSH
28575: LD_INT 23
28577: PUSH
28578: LD_INT 25
28580: PUSH
28581: LD_INT 26
28583: PUSH
28584: LD_INT 30
28586: PUSH
28587: LD_INT 31
28589: PUSH
28590: LD_INT 32
28592: PUSH
28593: LD_INT 33
28595: PUSH
28596: LD_INT 34
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 101
28622: PUSH
28623: LD_INT 102
28625: PUSH
28626: LD_INT 103
28628: PUSH
28629: LD_INT 106
28631: PUSH
28632: LD_INT 108
28634: PUSH
28635: LD_INT 112
28637: PUSH
28638: LD_INT 113
28640: PUSH
28641: LD_INT 114
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: ST_TO_ADDR
28658: GO 29253
28660: LD_INT 17
28662: DOUBLE
28663: EQUAL
28664: IFTRUE 28668
28666: GO 28880
28668: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
28669: LD_ADDR_VAR 0 1
28673: PUSH
28674: LD_INT 1
28676: PUSH
28677: LD_INT 2
28679: PUSH
28680: LD_INT 3
28682: PUSH
28683: LD_INT 4
28685: PUSH
28686: LD_INT 5
28688: PUSH
28689: LD_INT 6
28691: PUSH
28692: LD_INT 7
28694: PUSH
28695: LD_INT 8
28697: PUSH
28698: LD_INT 9
28700: PUSH
28701: LD_INT 10
28703: PUSH
28704: LD_INT 11
28706: PUSH
28707: LD_INT 12
28709: PUSH
28710: LD_INT 13
28712: PUSH
28713: LD_INT 14
28715: PUSH
28716: LD_INT 15
28718: PUSH
28719: LD_INT 16
28721: PUSH
28722: LD_INT 17
28724: PUSH
28725: LD_INT 18
28727: PUSH
28728: LD_INT 19
28730: PUSH
28731: LD_INT 20
28733: PUSH
28734: LD_INT 21
28736: PUSH
28737: LD_INT 22
28739: PUSH
28740: LD_INT 23
28742: PUSH
28743: LD_INT 24
28745: PUSH
28746: LD_INT 25
28748: PUSH
28749: LD_INT 26
28751: PUSH
28752: LD_INT 27
28754: PUSH
28755: LD_INT 28
28757: PUSH
28758: LD_INT 29
28760: PUSH
28761: LD_INT 30
28763: PUSH
28764: LD_INT 31
28766: PUSH
28767: LD_INT 32
28769: PUSH
28770: LD_INT 33
28772: PUSH
28773: LD_INT 34
28775: PUSH
28776: LD_INT 36
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 101
28818: PUSH
28819: LD_INT 102
28821: PUSH
28822: LD_INT 103
28824: PUSH
28825: LD_INT 104
28827: PUSH
28828: LD_INT 105
28830: PUSH
28831: LD_INT 106
28833: PUSH
28834: LD_INT 107
28836: PUSH
28837: LD_INT 108
28839: PUSH
28840: LD_INT 109
28842: PUSH
28843: LD_INT 110
28845: PUSH
28846: LD_INT 111
28848: PUSH
28849: LD_INT 112
28851: PUSH
28852: LD_INT 113
28854: PUSH
28855: LD_INT 114
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: ST_TO_ADDR
28878: GO 29253
28880: LD_INT 18
28882: DOUBLE
28883: EQUAL
28884: IFTRUE 28888
28886: GO 29024
28888: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
28889: LD_ADDR_VAR 0 1
28893: PUSH
28894: LD_INT 2
28896: PUSH
28897: LD_INT 4
28899: PUSH
28900: LD_INT 5
28902: PUSH
28903: LD_INT 7
28905: PUSH
28906: LD_INT 11
28908: PUSH
28909: LD_INT 12
28911: PUSH
28912: LD_INT 15
28914: PUSH
28915: LD_INT 16
28917: PUSH
28918: LD_INT 20
28920: PUSH
28921: LD_INT 21
28923: PUSH
28924: LD_INT 22
28926: PUSH
28927: LD_INT 23
28929: PUSH
28930: LD_INT 25
28932: PUSH
28933: LD_INT 26
28935: PUSH
28936: LD_INT 30
28938: PUSH
28939: LD_INT 31
28941: PUSH
28942: LD_INT 32
28944: PUSH
28945: LD_INT 33
28947: PUSH
28948: LD_INT 34
28950: PUSH
28951: LD_INT 35
28953: PUSH
28954: LD_INT 36
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 101
28982: PUSH
28983: LD_INT 102
28985: PUSH
28986: LD_INT 103
28988: PUSH
28989: LD_INT 106
28991: PUSH
28992: LD_INT 108
28994: PUSH
28995: LD_INT 112
28997: PUSH
28998: LD_INT 113
29000: PUSH
29001: LD_INT 114
29003: PUSH
29004: LD_INT 115
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: ST_TO_ADDR
29022: GO 29253
29024: LD_INT 19
29026: DOUBLE
29027: EQUAL
29028: IFTRUE 29032
29030: GO 29252
29032: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
29033: LD_ADDR_VAR 0 1
29037: PUSH
29038: LD_INT 1
29040: PUSH
29041: LD_INT 2
29043: PUSH
29044: LD_INT 3
29046: PUSH
29047: LD_INT 4
29049: PUSH
29050: LD_INT 5
29052: PUSH
29053: LD_INT 6
29055: PUSH
29056: LD_INT 7
29058: PUSH
29059: LD_INT 8
29061: PUSH
29062: LD_INT 9
29064: PUSH
29065: LD_INT 10
29067: PUSH
29068: LD_INT 11
29070: PUSH
29071: LD_INT 12
29073: PUSH
29074: LD_INT 13
29076: PUSH
29077: LD_INT 14
29079: PUSH
29080: LD_INT 15
29082: PUSH
29083: LD_INT 16
29085: PUSH
29086: LD_INT 17
29088: PUSH
29089: LD_INT 18
29091: PUSH
29092: LD_INT 19
29094: PUSH
29095: LD_INT 20
29097: PUSH
29098: LD_INT 21
29100: PUSH
29101: LD_INT 22
29103: PUSH
29104: LD_INT 23
29106: PUSH
29107: LD_INT 24
29109: PUSH
29110: LD_INT 25
29112: PUSH
29113: LD_INT 26
29115: PUSH
29116: LD_INT 27
29118: PUSH
29119: LD_INT 28
29121: PUSH
29122: LD_INT 29
29124: PUSH
29125: LD_INT 30
29127: PUSH
29128: LD_INT 31
29130: PUSH
29131: LD_INT 32
29133: PUSH
29134: LD_INT 33
29136: PUSH
29137: LD_INT 34
29139: PUSH
29140: LD_INT 35
29142: PUSH
29143: LD_INT 36
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 101
29186: PUSH
29187: LD_INT 102
29189: PUSH
29190: LD_INT 103
29192: PUSH
29193: LD_INT 104
29195: PUSH
29196: LD_INT 105
29198: PUSH
29199: LD_INT 106
29201: PUSH
29202: LD_INT 107
29204: PUSH
29205: LD_INT 108
29207: PUSH
29208: LD_INT 109
29210: PUSH
29211: LD_INT 110
29213: PUSH
29214: LD_INT 111
29216: PUSH
29217: LD_INT 112
29219: PUSH
29220: LD_INT 113
29222: PUSH
29223: LD_INT 114
29225: PUSH
29226: LD_INT 115
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: ST_TO_ADDR
29250: GO 29253
29252: POP
// end else
29253: GO 29472
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
29255: LD_ADDR_VAR 0 1
29259: PUSH
29260: LD_INT 1
29262: PUSH
29263: LD_INT 2
29265: PUSH
29266: LD_INT 3
29268: PUSH
29269: LD_INT 4
29271: PUSH
29272: LD_INT 5
29274: PUSH
29275: LD_INT 6
29277: PUSH
29278: LD_INT 7
29280: PUSH
29281: LD_INT 8
29283: PUSH
29284: LD_INT 9
29286: PUSH
29287: LD_INT 10
29289: PUSH
29290: LD_INT 11
29292: PUSH
29293: LD_INT 12
29295: PUSH
29296: LD_INT 13
29298: PUSH
29299: LD_INT 14
29301: PUSH
29302: LD_INT 15
29304: PUSH
29305: LD_INT 16
29307: PUSH
29308: LD_INT 17
29310: PUSH
29311: LD_INT 18
29313: PUSH
29314: LD_INT 19
29316: PUSH
29317: LD_INT 20
29319: PUSH
29320: LD_INT 21
29322: PUSH
29323: LD_INT 22
29325: PUSH
29326: LD_INT 23
29328: PUSH
29329: LD_INT 24
29331: PUSH
29332: LD_INT 25
29334: PUSH
29335: LD_INT 26
29337: PUSH
29338: LD_INT 27
29340: PUSH
29341: LD_INT 28
29343: PUSH
29344: LD_INT 29
29346: PUSH
29347: LD_INT 30
29349: PUSH
29350: LD_INT 31
29352: PUSH
29353: LD_INT 32
29355: PUSH
29356: LD_INT 33
29358: PUSH
29359: LD_INT 34
29361: PUSH
29362: LD_INT 35
29364: PUSH
29365: LD_INT 36
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 101
29408: PUSH
29409: LD_INT 102
29411: PUSH
29412: LD_INT 103
29414: PUSH
29415: LD_INT 104
29417: PUSH
29418: LD_INT 105
29420: PUSH
29421: LD_INT 106
29423: PUSH
29424: LD_INT 107
29426: PUSH
29427: LD_INT 108
29429: PUSH
29430: LD_INT 109
29432: PUSH
29433: LD_INT 110
29435: PUSH
29436: LD_INT 111
29438: PUSH
29439: LD_INT 112
29441: PUSH
29442: LD_INT 113
29444: PUSH
29445: LD_INT 114
29447: PUSH
29448: LD_INT 115
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: ST_TO_ADDR
// if result then
29472: LD_VAR 0 1
29476: IFFALSE 29765
// begin normal :=  ;
29478: LD_ADDR_VAR 0 3
29482: PUSH
29483: LD_STRING 
29485: ST_TO_ADDR
// hardcore :=  ;
29486: LD_ADDR_VAR 0 4
29490: PUSH
29491: LD_STRING 
29493: ST_TO_ADDR
// for i = 1 to normalCounter do
29494: LD_ADDR_VAR 0 5
29498: PUSH
29499: DOUBLE
29500: LD_INT 1
29502: DEC
29503: ST_TO_ADDR
29504: LD_EXP 67
29508: PUSH
29509: FOR_TO
29510: IFFALSE 29611
// begin tmp := 0 ;
29512: LD_ADDR_VAR 0 2
29516: PUSH
29517: LD_STRING 0
29519: ST_TO_ADDR
// if result [ 1 ] then
29520: LD_VAR 0 1
29524: PUSH
29525: LD_INT 1
29527: ARRAY
29528: IFFALSE 29593
// if result [ 1 ] [ 1 ] = i then
29530: LD_VAR 0 1
29534: PUSH
29535: LD_INT 1
29537: ARRAY
29538: PUSH
29539: LD_INT 1
29541: ARRAY
29542: PUSH
29543: LD_VAR 0 5
29547: EQUAL
29548: IFFALSE 29593
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
29550: LD_ADDR_VAR 0 1
29554: PUSH
29555: LD_VAR 0 1
29559: PPUSH
29560: LD_INT 1
29562: PPUSH
29563: LD_VAR 0 1
29567: PUSH
29568: LD_INT 1
29570: ARRAY
29571: PPUSH
29572: LD_INT 1
29574: PPUSH
29575: CALL_OW 3
29579: PPUSH
29580: CALL_OW 1
29584: ST_TO_ADDR
// tmp := 1 ;
29585: LD_ADDR_VAR 0 2
29589: PUSH
29590: LD_STRING 1
29592: ST_TO_ADDR
// end ; normal := normal & tmp ;
29593: LD_ADDR_VAR 0 3
29597: PUSH
29598: LD_VAR 0 3
29602: PUSH
29603: LD_VAR 0 2
29607: STR
29608: ST_TO_ADDR
// end ;
29609: GO 29509
29611: POP
29612: POP
// for i = 1 to hardcoreCounter do
29613: LD_ADDR_VAR 0 5
29617: PUSH
29618: DOUBLE
29619: LD_INT 1
29621: DEC
29622: ST_TO_ADDR
29623: LD_EXP 68
29627: PUSH
29628: FOR_TO
29629: IFFALSE 29734
// begin tmp := 0 ;
29631: LD_ADDR_VAR 0 2
29635: PUSH
29636: LD_STRING 0
29638: ST_TO_ADDR
// if result [ 2 ] then
29639: LD_VAR 0 1
29643: PUSH
29644: LD_INT 2
29646: ARRAY
29647: IFFALSE 29716
// if result [ 2 ] [ 1 ] = 100 + i then
29649: LD_VAR 0 1
29653: PUSH
29654: LD_INT 2
29656: ARRAY
29657: PUSH
29658: LD_INT 1
29660: ARRAY
29661: PUSH
29662: LD_INT 100
29664: PUSH
29665: LD_VAR 0 5
29669: PLUS
29670: EQUAL
29671: IFFALSE 29716
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
29673: LD_ADDR_VAR 0 1
29677: PUSH
29678: LD_VAR 0 1
29682: PPUSH
29683: LD_INT 2
29685: PPUSH
29686: LD_VAR 0 1
29690: PUSH
29691: LD_INT 2
29693: ARRAY
29694: PPUSH
29695: LD_INT 1
29697: PPUSH
29698: CALL_OW 3
29702: PPUSH
29703: CALL_OW 1
29707: ST_TO_ADDR
// tmp := 1 ;
29708: LD_ADDR_VAR 0 2
29712: PUSH
29713: LD_STRING 1
29715: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
29716: LD_ADDR_VAR 0 4
29720: PUSH
29721: LD_VAR 0 4
29725: PUSH
29726: LD_VAR 0 2
29730: STR
29731: ST_TO_ADDR
// end ;
29732: GO 29628
29734: POP
29735: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
29736: LD_STRING getStreamItemsFromMission("
29738: PUSH
29739: LD_VAR 0 3
29743: STR
29744: PUSH
29745: LD_STRING ","
29747: STR
29748: PUSH
29749: LD_VAR 0 4
29753: STR
29754: PUSH
29755: LD_STRING ")
29757: STR
29758: PPUSH
29759: CALL_OW 559
// end else
29763: GO 29772
// ToLua ( getStreamItemsFromMission("","") ) ;
29765: LD_STRING getStreamItemsFromMission("","")
29767: PPUSH
29768: CALL_OW 559
// end ;
29772: LD_VAR 0 1
29776: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
29777: LD_EXP 66
29781: PUSH
29782: LD_EXP 71
29786: AND
29787: IFFALSE 29911
29789: GO 29791
29791: DISABLE
29792: LD_INT 0
29794: PPUSH
29795: PPUSH
// begin enable ;
29796: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
29797: LD_ADDR_VAR 0 2
29801: PUSH
29802: LD_INT 22
29804: PUSH
29805: LD_OWVAR 2
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: LD_INT 34
29819: PUSH
29820: LD_INT 7
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 34
29829: PUSH
29830: LD_INT 45
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 34
29839: PUSH
29840: LD_INT 28
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 34
29849: PUSH
29850: LD_INT 47
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PPUSH
29868: CALL_OW 69
29872: ST_TO_ADDR
// if not tmp then
29873: LD_VAR 0 2
29877: NOT
29878: IFFALSE 29882
// exit ;
29880: GO 29911
// for i in tmp do
29882: LD_ADDR_VAR 0 1
29886: PUSH
29887: LD_VAR 0 2
29891: PUSH
29892: FOR_IN
29893: IFFALSE 29909
// begin SetLives ( i , 0 ) ;
29895: LD_VAR 0 1
29899: PPUSH
29900: LD_INT 0
29902: PPUSH
29903: CALL_OW 234
// end ;
29907: GO 29892
29909: POP
29910: POP
// end ;
29911: PPOPN 2
29913: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
29914: LD_EXP 66
29918: PUSH
29919: LD_EXP 72
29923: AND
29924: IFFALSE 30008
29926: GO 29928
29928: DISABLE
29929: LD_INT 0
29931: PPUSH
29932: PPUSH
// begin enable ;
29933: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
29934: LD_ADDR_VAR 0 2
29938: PUSH
29939: LD_INT 22
29941: PUSH
29942: LD_OWVAR 2
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 32
29953: PUSH
29954: LD_INT 3
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PPUSH
29965: CALL_OW 69
29969: ST_TO_ADDR
// if not tmp then
29970: LD_VAR 0 2
29974: NOT
29975: IFFALSE 29979
// exit ;
29977: GO 30008
// for i in tmp do
29979: LD_ADDR_VAR 0 1
29983: PUSH
29984: LD_VAR 0 2
29988: PUSH
29989: FOR_IN
29990: IFFALSE 30006
// begin SetLives ( i , 0 ) ;
29992: LD_VAR 0 1
29996: PPUSH
29997: LD_INT 0
29999: PPUSH
30000: CALL_OW 234
// end ;
30004: GO 29989
30006: POP
30007: POP
// end ;
30008: PPOPN 2
30010: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
30011: LD_EXP 66
30015: PUSH
30016: LD_EXP 69
30020: AND
30021: IFFALSE 30114
30023: GO 30025
30025: DISABLE
30026: LD_INT 0
30028: PPUSH
// begin enable ;
30029: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
30030: LD_ADDR_VAR 0 1
30034: PUSH
30035: LD_INT 22
30037: PUSH
30038: LD_OWVAR 2
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 2
30049: PUSH
30050: LD_INT 25
30052: PUSH
30053: LD_INT 5
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 25
30062: PUSH
30063: LD_INT 9
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 25
30072: PUSH
30073: LD_INT 8
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PPUSH
30090: CALL_OW 69
30094: PUSH
30095: FOR_IN
30096: IFFALSE 30112
// begin SetClass ( i , 1 ) ;
30098: LD_VAR 0 1
30102: PPUSH
30103: LD_INT 1
30105: PPUSH
30106: CALL_OW 336
// end ;
30110: GO 30095
30112: POP
30113: POP
// end ;
30114: PPOPN 1
30116: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
30117: LD_EXP 66
30121: PUSH
30122: LD_EXP 70
30126: AND
30127: PUSH
30128: LD_OWVAR 65
30132: PUSH
30133: LD_INT 7
30135: LESS
30136: AND
30137: IFFALSE 30151
30139: GO 30141
30141: DISABLE
// begin enable ;
30142: ENABLE
// game_speed := 7 ;
30143: LD_ADDR_OWVAR 65
30147: PUSH
30148: LD_INT 7
30150: ST_TO_ADDR
// end ;
30151: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
30152: LD_EXP 66
30156: PUSH
30157: LD_EXP 73
30161: AND
30162: IFFALSE 30364
30164: GO 30166
30166: DISABLE
30167: LD_INT 0
30169: PPUSH
30170: PPUSH
30171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30172: LD_ADDR_VAR 0 3
30176: PUSH
30177: LD_INT 81
30179: PUSH
30180: LD_OWVAR 2
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 21
30191: PUSH
30192: LD_INT 1
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PPUSH
30203: CALL_OW 69
30207: ST_TO_ADDR
// if not tmp then
30208: LD_VAR 0 3
30212: NOT
30213: IFFALSE 30217
// exit ;
30215: GO 30364
// if tmp > 5 then
30217: LD_VAR 0 3
30221: PUSH
30222: LD_INT 5
30224: GREATER
30225: IFFALSE 30237
// k := 5 else
30227: LD_ADDR_VAR 0 2
30231: PUSH
30232: LD_INT 5
30234: ST_TO_ADDR
30235: GO 30247
// k := tmp ;
30237: LD_ADDR_VAR 0 2
30241: PUSH
30242: LD_VAR 0 3
30246: ST_TO_ADDR
// for i := 1 to k do
30247: LD_ADDR_VAR 0 1
30251: PUSH
30252: DOUBLE
30253: LD_INT 1
30255: DEC
30256: ST_TO_ADDR
30257: LD_VAR 0 2
30261: PUSH
30262: FOR_TO
30263: IFFALSE 30362
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
30265: LD_VAR 0 3
30269: PUSH
30270: LD_VAR 0 1
30274: ARRAY
30275: PPUSH
30276: LD_VAR 0 1
30280: PUSH
30281: LD_INT 4
30283: MOD
30284: PUSH
30285: LD_INT 1
30287: PLUS
30288: PPUSH
30289: CALL_OW 259
30293: PUSH
30294: LD_INT 10
30296: LESS
30297: IFFALSE 30360
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
30299: LD_VAR 0 3
30303: PUSH
30304: LD_VAR 0 1
30308: ARRAY
30309: PPUSH
30310: LD_VAR 0 1
30314: PUSH
30315: LD_INT 4
30317: MOD
30318: PUSH
30319: LD_INT 1
30321: PLUS
30322: PPUSH
30323: LD_VAR 0 3
30327: PUSH
30328: LD_VAR 0 1
30332: ARRAY
30333: PPUSH
30334: LD_VAR 0 1
30338: PUSH
30339: LD_INT 4
30341: MOD
30342: PUSH
30343: LD_INT 1
30345: PLUS
30346: PPUSH
30347: CALL_OW 259
30351: PUSH
30352: LD_INT 1
30354: PLUS
30355: PPUSH
30356: CALL_OW 237
30360: GO 30262
30362: POP
30363: POP
// end ;
30364: PPOPN 3
30366: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
30367: LD_EXP 66
30371: PUSH
30372: LD_EXP 74
30376: AND
30377: IFFALSE 30397
30379: GO 30381
30381: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
30382: LD_INT 4
30384: PPUSH
30385: LD_OWVAR 2
30389: PPUSH
30390: LD_INT 0
30392: PPUSH
30393: CALL_OW 324
30397: END
// every 0 0$1 trigger StreamModeActive and sShovel do
30398: LD_EXP 66
30402: PUSH
30403: LD_EXP 103
30407: AND
30408: IFFALSE 30428
30410: GO 30412
30412: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
30413: LD_INT 19
30415: PPUSH
30416: LD_OWVAR 2
30420: PPUSH
30421: LD_INT 0
30423: PPUSH
30424: CALL_OW 324
30428: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
30429: LD_EXP 66
30433: PUSH
30434: LD_EXP 75
30438: AND
30439: IFFALSE 30541
30441: GO 30443
30443: DISABLE
30444: LD_INT 0
30446: PPUSH
30447: PPUSH
// begin enable ;
30448: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
30449: LD_ADDR_VAR 0 2
30453: PUSH
30454: LD_INT 22
30456: PUSH
30457: LD_OWVAR 2
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 2
30468: PUSH
30469: LD_INT 34
30471: PUSH
30472: LD_INT 11
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 34
30481: PUSH
30482: LD_INT 30
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: LIST
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PPUSH
30498: CALL_OW 69
30502: ST_TO_ADDR
// if not tmp then
30503: LD_VAR 0 2
30507: NOT
30508: IFFALSE 30512
// exit ;
30510: GO 30541
// for i in tmp do
30512: LD_ADDR_VAR 0 1
30516: PUSH
30517: LD_VAR 0 2
30521: PUSH
30522: FOR_IN
30523: IFFALSE 30539
// begin SetLives ( i , 0 ) ;
30525: LD_VAR 0 1
30529: PPUSH
30530: LD_INT 0
30532: PPUSH
30533: CALL_OW 234
// end ;
30537: GO 30522
30539: POP
30540: POP
// end ;
30541: PPOPN 2
30543: END
// every 0 0$1 trigger StreamModeActive and sBunker do
30544: LD_EXP 66
30548: PUSH
30549: LD_EXP 76
30553: AND
30554: IFFALSE 30574
30556: GO 30558
30558: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
30559: LD_INT 32
30561: PPUSH
30562: LD_OWVAR 2
30566: PPUSH
30567: LD_INT 0
30569: PPUSH
30570: CALL_OW 324
30574: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
30575: LD_EXP 66
30579: PUSH
30580: LD_EXP 77
30584: AND
30585: IFFALSE 30766
30587: GO 30589
30589: DISABLE
30590: LD_INT 0
30592: PPUSH
30593: PPUSH
30594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30595: LD_ADDR_VAR 0 2
30599: PUSH
30600: LD_INT 22
30602: PUSH
30603: LD_OWVAR 2
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 33
30614: PUSH
30615: LD_INT 3
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PPUSH
30626: CALL_OW 69
30630: ST_TO_ADDR
// if not tmp then
30631: LD_VAR 0 2
30635: NOT
30636: IFFALSE 30640
// exit ;
30638: GO 30766
// side := 0 ;
30640: LD_ADDR_VAR 0 3
30644: PUSH
30645: LD_INT 0
30647: ST_TO_ADDR
// for i := 1 to 8 do
30648: LD_ADDR_VAR 0 1
30652: PUSH
30653: DOUBLE
30654: LD_INT 1
30656: DEC
30657: ST_TO_ADDR
30658: LD_INT 8
30660: PUSH
30661: FOR_TO
30662: IFFALSE 30710
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30664: LD_OWVAR 2
30668: PUSH
30669: LD_VAR 0 1
30673: NONEQUAL
30674: PUSH
30675: LD_OWVAR 2
30679: PPUSH
30680: LD_VAR 0 1
30684: PPUSH
30685: CALL_OW 81
30689: PUSH
30690: LD_INT 2
30692: EQUAL
30693: AND
30694: IFFALSE 30708
// begin side := i ;
30696: LD_ADDR_VAR 0 3
30700: PUSH
30701: LD_VAR 0 1
30705: ST_TO_ADDR
// break ;
30706: GO 30710
// end ;
30708: GO 30661
30710: POP
30711: POP
// if not side then
30712: LD_VAR 0 3
30716: NOT
30717: IFFALSE 30721
// exit ;
30719: GO 30766
// for i := 1 to tmp do
30721: LD_ADDR_VAR 0 1
30725: PUSH
30726: DOUBLE
30727: LD_INT 1
30729: DEC
30730: ST_TO_ADDR
30731: LD_VAR 0 2
30735: PUSH
30736: FOR_TO
30737: IFFALSE 30764
// if Prob ( 60 ) then
30739: LD_INT 60
30741: PPUSH
30742: CALL_OW 13
30746: IFFALSE 30762
// SetSide ( i , side ) ;
30748: LD_VAR 0 1
30752: PPUSH
30753: LD_VAR 0 3
30757: PPUSH
30758: CALL_OW 235
30762: GO 30736
30764: POP
30765: POP
// end ;
30766: PPOPN 3
30768: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
30769: LD_EXP 66
30773: PUSH
30774: LD_EXP 79
30778: AND
30779: IFFALSE 30898
30781: GO 30783
30783: DISABLE
30784: LD_INT 0
30786: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
30787: LD_ADDR_VAR 0 1
30791: PUSH
30792: LD_INT 22
30794: PUSH
30795: LD_OWVAR 2
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 21
30806: PUSH
30807: LD_INT 1
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 3
30816: PUSH
30817: LD_INT 23
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: LIST
30835: PPUSH
30836: CALL_OW 69
30840: PUSH
30841: FOR_IN
30842: IFFALSE 30896
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
30844: LD_VAR 0 1
30848: PPUSH
30849: CALL_OW 257
30853: PUSH
30854: LD_INT 1
30856: PUSH
30857: LD_INT 2
30859: PUSH
30860: LD_INT 3
30862: PUSH
30863: LD_INT 4
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: IN
30872: IFFALSE 30894
// SetClass ( un , rand ( 1 , 4 ) ) ;
30874: LD_VAR 0 1
30878: PPUSH
30879: LD_INT 1
30881: PPUSH
30882: LD_INT 4
30884: PPUSH
30885: CALL_OW 12
30889: PPUSH
30890: CALL_OW 336
30894: GO 30841
30896: POP
30897: POP
// end ;
30898: PPOPN 1
30900: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
30901: LD_EXP 66
30905: PUSH
30906: LD_EXP 78
30910: AND
30911: IFFALSE 30990
30913: GO 30915
30915: DISABLE
30916: LD_INT 0
30918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30919: LD_ADDR_VAR 0 1
30923: PUSH
30924: LD_INT 22
30926: PUSH
30927: LD_OWVAR 2
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 21
30938: PUSH
30939: LD_INT 3
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PPUSH
30950: CALL_OW 69
30954: ST_TO_ADDR
// if not tmp then
30955: LD_VAR 0 1
30959: NOT
30960: IFFALSE 30964
// exit ;
30962: GO 30990
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
30964: LD_VAR 0 1
30968: PUSH
30969: LD_INT 1
30971: PPUSH
30972: LD_VAR 0 1
30976: PPUSH
30977: CALL_OW 12
30981: ARRAY
30982: PPUSH
30983: LD_INT 100
30985: PPUSH
30986: CALL_OW 234
// end ;
30990: PPOPN 1
30992: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
30993: LD_EXP 66
30997: PUSH
30998: LD_EXP 80
31002: AND
31003: IFFALSE 31101
31005: GO 31007
31007: DISABLE
31008: LD_INT 0
31010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31011: LD_ADDR_VAR 0 1
31015: PUSH
31016: LD_INT 22
31018: PUSH
31019: LD_OWVAR 2
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 21
31030: PUSH
31031: LD_INT 1
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PPUSH
31042: CALL_OW 69
31046: ST_TO_ADDR
// if not tmp then
31047: LD_VAR 0 1
31051: NOT
31052: IFFALSE 31056
// exit ;
31054: GO 31101
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
31056: LD_VAR 0 1
31060: PUSH
31061: LD_INT 1
31063: PPUSH
31064: LD_VAR 0 1
31068: PPUSH
31069: CALL_OW 12
31073: ARRAY
31074: PPUSH
31075: LD_INT 1
31077: PPUSH
31078: LD_INT 4
31080: PPUSH
31081: CALL_OW 12
31085: PPUSH
31086: LD_INT 3000
31088: PPUSH
31089: LD_INT 9000
31091: PPUSH
31092: CALL_OW 12
31096: PPUSH
31097: CALL_OW 492
// end ;
31101: PPOPN 1
31103: END
// every 0 0$1 trigger StreamModeActive and sDepot do
31104: LD_EXP 66
31108: PUSH
31109: LD_EXP 81
31113: AND
31114: IFFALSE 31134
31116: GO 31118
31118: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
31119: LD_INT 1
31121: PPUSH
31122: LD_OWVAR 2
31126: PPUSH
31127: LD_INT 0
31129: PPUSH
31130: CALL_OW 324
31134: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
31135: LD_EXP 66
31139: PUSH
31140: LD_EXP 82
31144: AND
31145: IFFALSE 31228
31147: GO 31149
31149: DISABLE
31150: LD_INT 0
31152: PPUSH
31153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
31154: LD_ADDR_VAR 0 2
31158: PUSH
31159: LD_INT 22
31161: PUSH
31162: LD_OWVAR 2
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 21
31173: PUSH
31174: LD_INT 3
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PPUSH
31185: CALL_OW 69
31189: ST_TO_ADDR
// if not tmp then
31190: LD_VAR 0 2
31194: NOT
31195: IFFALSE 31199
// exit ;
31197: GO 31228
// for i in tmp do
31199: LD_ADDR_VAR 0 1
31203: PUSH
31204: LD_VAR 0 2
31208: PUSH
31209: FOR_IN
31210: IFFALSE 31226
// SetBLevel ( i , 10 ) ;
31212: LD_VAR 0 1
31216: PPUSH
31217: LD_INT 10
31219: PPUSH
31220: CALL_OW 241
31224: GO 31209
31226: POP
31227: POP
// end ;
31228: PPOPN 2
31230: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
31231: LD_EXP 66
31235: PUSH
31236: LD_EXP 83
31240: AND
31241: IFFALSE 31352
31243: GO 31245
31245: DISABLE
31246: LD_INT 0
31248: PPUSH
31249: PPUSH
31250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31251: LD_ADDR_VAR 0 3
31255: PUSH
31256: LD_INT 22
31258: PUSH
31259: LD_OWVAR 2
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 25
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PPUSH
31282: CALL_OW 69
31286: ST_TO_ADDR
// if not tmp then
31287: LD_VAR 0 3
31291: NOT
31292: IFFALSE 31296
// exit ;
31294: GO 31352
// un := tmp [ rand ( 1 , tmp ) ] ;
31296: LD_ADDR_VAR 0 2
31300: PUSH
31301: LD_VAR 0 3
31305: PUSH
31306: LD_INT 1
31308: PPUSH
31309: LD_VAR 0 3
31313: PPUSH
31314: CALL_OW 12
31318: ARRAY
31319: ST_TO_ADDR
// if Crawls ( un ) then
31320: LD_VAR 0 2
31324: PPUSH
31325: CALL_OW 318
31329: IFFALSE 31340
// ComWalk ( un ) ;
31331: LD_VAR 0 2
31335: PPUSH
31336: CALL_OW 138
// SetClass ( un , class_sniper ) ;
31340: LD_VAR 0 2
31344: PPUSH
31345: LD_INT 5
31347: PPUSH
31348: CALL_OW 336
// end ;
31352: PPOPN 3
31354: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
31355: LD_EXP 66
31359: PUSH
31360: LD_EXP 84
31364: AND
31365: PUSH
31366: LD_OWVAR 67
31370: PUSH
31371: LD_INT 3
31373: LESS
31374: AND
31375: IFFALSE 31394
31377: GO 31379
31379: DISABLE
// Difficulty := Difficulty + 1 ;
31380: LD_ADDR_OWVAR 67
31384: PUSH
31385: LD_OWVAR 67
31389: PUSH
31390: LD_INT 1
31392: PLUS
31393: ST_TO_ADDR
31394: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
31395: LD_EXP 66
31399: PUSH
31400: LD_EXP 85
31404: AND
31405: IFFALSE 31508
31407: GO 31409
31409: DISABLE
31410: LD_INT 0
31412: PPUSH
// begin for i := 1 to 5 do
31413: LD_ADDR_VAR 0 1
31417: PUSH
31418: DOUBLE
31419: LD_INT 1
31421: DEC
31422: ST_TO_ADDR
31423: LD_INT 5
31425: PUSH
31426: FOR_TO
31427: IFFALSE 31506
// begin uc_nation := nation_nature ;
31429: LD_ADDR_OWVAR 21
31433: PUSH
31434: LD_INT 0
31436: ST_TO_ADDR
// uc_side := 0 ;
31437: LD_ADDR_OWVAR 20
31441: PUSH
31442: LD_INT 0
31444: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31445: LD_ADDR_OWVAR 29
31449: PUSH
31450: LD_INT 12
31452: PUSH
31453: LD_INT 12
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: ST_TO_ADDR
// hc_agressivity := 20 ;
31460: LD_ADDR_OWVAR 35
31464: PUSH
31465: LD_INT 20
31467: ST_TO_ADDR
// hc_class := class_tiger ;
31468: LD_ADDR_OWVAR 28
31472: PUSH
31473: LD_INT 14
31475: ST_TO_ADDR
// hc_gallery :=  ;
31476: LD_ADDR_OWVAR 33
31480: PUSH
31481: LD_STRING 
31483: ST_TO_ADDR
// hc_name :=  ;
31484: LD_ADDR_OWVAR 26
31488: PUSH
31489: LD_STRING 
31491: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
31492: CALL_OW 44
31496: PPUSH
31497: LD_INT 0
31499: PPUSH
31500: CALL_OW 51
// end ;
31504: GO 31426
31506: POP
31507: POP
// end ;
31508: PPOPN 1
31510: END
// every 0 0$1 trigger StreamModeActive and sBomb do
31511: LD_EXP 66
31515: PUSH
31516: LD_EXP 86
31520: AND
31521: IFFALSE 31530
31523: GO 31525
31525: DISABLE
// StreamSibBomb ;
31526: CALL 31531 0 0
31530: END
// export function StreamSibBomb ; var i , x , y ; begin
31531: LD_INT 0
31533: PPUSH
31534: PPUSH
31535: PPUSH
31536: PPUSH
// result := false ;
31537: LD_ADDR_VAR 0 1
31541: PUSH
31542: LD_INT 0
31544: ST_TO_ADDR
// for i := 1 to 16 do
31545: LD_ADDR_VAR 0 2
31549: PUSH
31550: DOUBLE
31551: LD_INT 1
31553: DEC
31554: ST_TO_ADDR
31555: LD_INT 16
31557: PUSH
31558: FOR_TO
31559: IFFALSE 31758
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31561: LD_ADDR_VAR 0 3
31565: PUSH
31566: LD_INT 10
31568: PUSH
31569: LD_INT 20
31571: PUSH
31572: LD_INT 30
31574: PUSH
31575: LD_INT 40
31577: PUSH
31578: LD_INT 50
31580: PUSH
31581: LD_INT 60
31583: PUSH
31584: LD_INT 70
31586: PUSH
31587: LD_INT 80
31589: PUSH
31590: LD_INT 90
31592: PUSH
31593: LD_INT 100
31595: PUSH
31596: LD_INT 110
31598: PUSH
31599: LD_INT 120
31601: PUSH
31602: LD_INT 130
31604: PUSH
31605: LD_INT 140
31607: PUSH
31608: LD_INT 150
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 1
31630: PPUSH
31631: LD_INT 15
31633: PPUSH
31634: CALL_OW 12
31638: ARRAY
31639: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31640: LD_ADDR_VAR 0 4
31644: PUSH
31645: LD_INT 10
31647: PUSH
31648: LD_INT 20
31650: PUSH
31651: LD_INT 30
31653: PUSH
31654: LD_INT 40
31656: PUSH
31657: LD_INT 50
31659: PUSH
31660: LD_INT 60
31662: PUSH
31663: LD_INT 70
31665: PUSH
31666: LD_INT 80
31668: PUSH
31669: LD_INT 90
31671: PUSH
31672: LD_INT 100
31674: PUSH
31675: LD_INT 110
31677: PUSH
31678: LD_INT 120
31680: PUSH
31681: LD_INT 130
31683: PUSH
31684: LD_INT 140
31686: PUSH
31687: LD_INT 150
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: PPUSH
31710: LD_INT 15
31712: PPUSH
31713: CALL_OW 12
31717: ARRAY
31718: ST_TO_ADDR
// if ValidHex ( x , y ) then
31719: LD_VAR 0 3
31723: PPUSH
31724: LD_VAR 0 4
31728: PPUSH
31729: CALL_OW 488
31733: IFFALSE 31756
// begin result := [ x , y ] ;
31735: LD_ADDR_VAR 0 1
31739: PUSH
31740: LD_VAR 0 3
31744: PUSH
31745: LD_VAR 0 4
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: ST_TO_ADDR
// break ;
31754: GO 31758
// end ; end ;
31756: GO 31558
31758: POP
31759: POP
// if result then
31760: LD_VAR 0 1
31764: IFFALSE 31824
// begin ToLua ( playSibBomb() ) ;
31766: LD_STRING playSibBomb()
31768: PPUSH
31769: CALL_OW 559
// wait ( 0 0$14 ) ;
31773: LD_INT 490
31775: PPUSH
31776: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
31780: LD_VAR 0 1
31784: PUSH
31785: LD_INT 1
31787: ARRAY
31788: PPUSH
31789: LD_VAR 0 1
31793: PUSH
31794: LD_INT 2
31796: ARRAY
31797: PPUSH
31798: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
31802: LD_VAR 0 1
31806: PUSH
31807: LD_INT 1
31809: ARRAY
31810: PPUSH
31811: LD_VAR 0 1
31815: PUSH
31816: LD_INT 2
31818: ARRAY
31819: PPUSH
31820: CALL_OW 429
// end ; end ;
31824: LD_VAR 0 1
31828: RET
// every 0 0$1 trigger StreamModeActive and sReset do
31829: LD_EXP 66
31833: PUSH
31834: LD_EXP 88
31838: AND
31839: IFFALSE 31851
31841: GO 31843
31843: DISABLE
// YouLost (  ) ;
31844: LD_STRING 
31846: PPUSH
31847: CALL_OW 104
31851: END
// every 0 0$1 trigger StreamModeActive and sFog do
31852: LD_EXP 66
31856: PUSH
31857: LD_EXP 87
31861: AND
31862: IFFALSE 31876
31864: GO 31866
31866: DISABLE
// FogOff ( your_side ) ;
31867: LD_OWVAR 2
31871: PPUSH
31872: CALL_OW 344
31876: END
// every 0 0$1 trigger StreamModeActive and sSun do
31877: LD_EXP 66
31881: PUSH
31882: LD_EXP 89
31886: AND
31887: IFFALSE 31915
31889: GO 31891
31891: DISABLE
// begin solar_recharge_percent := 0 ;
31892: LD_ADDR_OWVAR 79
31896: PUSH
31897: LD_INT 0
31899: ST_TO_ADDR
// wait ( 5 5$00 ) ;
31900: LD_INT 10500
31902: PPUSH
31903: CALL_OW 67
// solar_recharge_percent := 100 ;
31907: LD_ADDR_OWVAR 79
31911: PUSH
31912: LD_INT 100
31914: ST_TO_ADDR
// end ;
31915: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
31916: LD_EXP 66
31920: PUSH
31921: LD_EXP 90
31925: AND
31926: IFFALSE 32165
31928: GO 31930
31930: DISABLE
31931: LD_INT 0
31933: PPUSH
31934: PPUSH
31935: PPUSH
// begin tmp := [ ] ;
31936: LD_ADDR_VAR 0 3
31940: PUSH
31941: EMPTY
31942: ST_TO_ADDR
// for i := 1 to 6 do
31943: LD_ADDR_VAR 0 1
31947: PUSH
31948: DOUBLE
31949: LD_INT 1
31951: DEC
31952: ST_TO_ADDR
31953: LD_INT 6
31955: PUSH
31956: FOR_TO
31957: IFFALSE 32062
// begin uc_nation := nation_nature ;
31959: LD_ADDR_OWVAR 21
31963: PUSH
31964: LD_INT 0
31966: ST_TO_ADDR
// uc_side := 0 ;
31967: LD_ADDR_OWVAR 20
31971: PUSH
31972: LD_INT 0
31974: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31975: LD_ADDR_OWVAR 29
31979: PUSH
31980: LD_INT 12
31982: PUSH
31983: LD_INT 12
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: ST_TO_ADDR
// hc_agressivity := 20 ;
31990: LD_ADDR_OWVAR 35
31994: PUSH
31995: LD_INT 20
31997: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
31998: LD_ADDR_OWVAR 28
32002: PUSH
32003: LD_INT 17
32005: ST_TO_ADDR
// hc_gallery :=  ;
32006: LD_ADDR_OWVAR 33
32010: PUSH
32011: LD_STRING 
32013: ST_TO_ADDR
// hc_name :=  ;
32014: LD_ADDR_OWVAR 26
32018: PUSH
32019: LD_STRING 
32021: ST_TO_ADDR
// un := CreateHuman ;
32022: LD_ADDR_VAR 0 2
32026: PUSH
32027: CALL_OW 44
32031: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
32032: LD_VAR 0 2
32036: PPUSH
32037: LD_INT 1
32039: PPUSH
32040: CALL_OW 51
// tmp := tmp ^ un ;
32044: LD_ADDR_VAR 0 3
32048: PUSH
32049: LD_VAR 0 3
32053: PUSH
32054: LD_VAR 0 2
32058: ADD
32059: ST_TO_ADDR
// end ;
32060: GO 31956
32062: POP
32063: POP
// repeat wait ( 0 0$1 ) ;
32064: LD_INT 35
32066: PPUSH
32067: CALL_OW 67
// for un in tmp do
32071: LD_ADDR_VAR 0 2
32075: PUSH
32076: LD_VAR 0 3
32080: PUSH
32081: FOR_IN
32082: IFFALSE 32156
// begin if IsDead ( un ) then
32084: LD_VAR 0 2
32088: PPUSH
32089: CALL_OW 301
32093: IFFALSE 32113
// begin tmp := tmp diff un ;
32095: LD_ADDR_VAR 0 3
32099: PUSH
32100: LD_VAR 0 3
32104: PUSH
32105: LD_VAR 0 2
32109: DIFF
32110: ST_TO_ADDR
// continue ;
32111: GO 32081
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
32113: LD_VAR 0 2
32117: PPUSH
32118: LD_INT 3
32120: PUSH
32121: LD_INT 22
32123: PUSH
32124: LD_INT 0
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PPUSH
32135: CALL_OW 69
32139: PPUSH
32140: LD_VAR 0 2
32144: PPUSH
32145: CALL_OW 74
32149: PPUSH
32150: CALL_OW 115
// end ;
32154: GO 32081
32156: POP
32157: POP
// until not tmp ;
32158: LD_VAR 0 3
32162: NOT
32163: IFFALSE 32064
// end ;
32165: PPOPN 3
32167: END
// every 0 0$1 trigger StreamModeActive and sTroll do
32168: LD_EXP 66
32172: PUSH
32173: LD_EXP 91
32177: AND
32178: IFFALSE 32232
32180: GO 32182
32182: DISABLE
// begin ToLua ( displayTroll(); ) ;
32183: LD_STRING displayTroll();
32185: PPUSH
32186: CALL_OW 559
// wait ( 3 3$00 ) ;
32190: LD_INT 6300
32192: PPUSH
32193: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32197: LD_STRING hideTroll();
32199: PPUSH
32200: CALL_OW 559
// wait ( 1 1$00 ) ;
32204: LD_INT 2100
32206: PPUSH
32207: CALL_OW 67
// ToLua ( displayTroll(); ) ;
32211: LD_STRING displayTroll();
32213: PPUSH
32214: CALL_OW 559
// wait ( 1 1$00 ) ;
32218: LD_INT 2100
32220: PPUSH
32221: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32225: LD_STRING hideTroll();
32227: PPUSH
32228: CALL_OW 559
// end ;
32232: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
32233: LD_EXP 66
32237: PUSH
32238: LD_EXP 92
32242: AND
32243: IFFALSE 32306
32245: GO 32247
32247: DISABLE
32248: LD_INT 0
32250: PPUSH
// begin p := 0 ;
32251: LD_ADDR_VAR 0 1
32255: PUSH
32256: LD_INT 0
32258: ST_TO_ADDR
// repeat game_speed := 1 ;
32259: LD_ADDR_OWVAR 65
32263: PUSH
32264: LD_INT 1
32266: ST_TO_ADDR
// wait ( 0 0$1 ) ;
32267: LD_INT 35
32269: PPUSH
32270: CALL_OW 67
// p := p + 1 ;
32274: LD_ADDR_VAR 0 1
32278: PUSH
32279: LD_VAR 0 1
32283: PUSH
32284: LD_INT 1
32286: PLUS
32287: ST_TO_ADDR
// until p >= 60 ;
32288: LD_VAR 0 1
32292: PUSH
32293: LD_INT 60
32295: GREATEREQUAL
32296: IFFALSE 32259
// game_speed := 4 ;
32298: LD_ADDR_OWVAR 65
32302: PUSH
32303: LD_INT 4
32305: ST_TO_ADDR
// end ;
32306: PPOPN 1
32308: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
32309: LD_EXP 66
32313: PUSH
32314: LD_EXP 93
32318: AND
32319: IFFALSE 32465
32321: GO 32323
32323: DISABLE
32324: LD_INT 0
32326: PPUSH
32327: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32328: LD_ADDR_VAR 0 1
32332: PUSH
32333: LD_INT 22
32335: PUSH
32336: LD_OWVAR 2
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 2
32347: PUSH
32348: LD_INT 30
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 30
32360: PUSH
32361: LD_INT 1
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PPUSH
32377: CALL_OW 69
32381: ST_TO_ADDR
// if not depot then
32382: LD_VAR 0 1
32386: NOT
32387: IFFALSE 32391
// exit ;
32389: GO 32465
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
32391: LD_ADDR_VAR 0 2
32395: PUSH
32396: LD_VAR 0 1
32400: PUSH
32401: LD_INT 1
32403: PPUSH
32404: LD_VAR 0 1
32408: PPUSH
32409: CALL_OW 12
32413: ARRAY
32414: PPUSH
32415: CALL_OW 274
32419: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
32420: LD_VAR 0 2
32424: PPUSH
32425: LD_INT 1
32427: PPUSH
32428: LD_INT 0
32430: PPUSH
32431: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
32435: LD_VAR 0 2
32439: PPUSH
32440: LD_INT 2
32442: PPUSH
32443: LD_INT 0
32445: PPUSH
32446: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
32450: LD_VAR 0 2
32454: PPUSH
32455: LD_INT 3
32457: PPUSH
32458: LD_INT 0
32460: PPUSH
32461: CALL_OW 277
// end ;
32465: PPOPN 2
32467: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
32468: LD_EXP 66
32472: PUSH
32473: LD_EXP 94
32477: AND
32478: IFFALSE 32575
32480: GO 32482
32482: DISABLE
32483: LD_INT 0
32485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32486: LD_ADDR_VAR 0 1
32490: PUSH
32491: LD_INT 22
32493: PUSH
32494: LD_OWVAR 2
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 21
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 3
32515: PUSH
32516: LD_INT 23
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: LIST
32534: PPUSH
32535: CALL_OW 69
32539: ST_TO_ADDR
// if not tmp then
32540: LD_VAR 0 1
32544: NOT
32545: IFFALSE 32549
// exit ;
32547: GO 32575
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
32549: LD_VAR 0 1
32553: PUSH
32554: LD_INT 1
32556: PPUSH
32557: LD_VAR 0 1
32561: PPUSH
32562: CALL_OW 12
32566: ARRAY
32567: PPUSH
32568: LD_INT 200
32570: PPUSH
32571: CALL_OW 234
// end ;
32575: PPOPN 1
32577: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
32578: LD_EXP 66
32582: PUSH
32583: LD_EXP 95
32587: AND
32588: IFFALSE 32667
32590: GO 32592
32592: DISABLE
32593: LD_INT 0
32595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32596: LD_ADDR_VAR 0 1
32600: PUSH
32601: LD_INT 22
32603: PUSH
32604: LD_OWVAR 2
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 21
32615: PUSH
32616: LD_INT 2
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PPUSH
32627: CALL_OW 69
32631: ST_TO_ADDR
// if not tmp then
32632: LD_VAR 0 1
32636: NOT
32637: IFFALSE 32641
// exit ;
32639: GO 32667
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32641: LD_VAR 0 1
32645: PUSH
32646: LD_INT 1
32648: PPUSH
32649: LD_VAR 0 1
32653: PPUSH
32654: CALL_OW 12
32658: ARRAY
32659: PPUSH
32660: LD_INT 60
32662: PPUSH
32663: CALL_OW 234
// end ;
32667: PPOPN 1
32669: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32670: LD_EXP 66
32674: PUSH
32675: LD_EXP 96
32679: AND
32680: IFFALSE 32779
32682: GO 32684
32684: DISABLE
32685: LD_INT 0
32687: PPUSH
32688: PPUSH
// begin enable ;
32689: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
32690: LD_ADDR_VAR 0 1
32694: PUSH
32695: LD_INT 22
32697: PUSH
32698: LD_OWVAR 2
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 61
32709: PUSH
32710: EMPTY
32711: LIST
32712: PUSH
32713: LD_INT 33
32715: PUSH
32716: LD_INT 2
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: LIST
32727: PPUSH
32728: CALL_OW 69
32732: ST_TO_ADDR
// if not tmp then
32733: LD_VAR 0 1
32737: NOT
32738: IFFALSE 32742
// exit ;
32740: GO 32779
// for i in tmp do
32742: LD_ADDR_VAR 0 2
32746: PUSH
32747: LD_VAR 0 1
32751: PUSH
32752: FOR_IN
32753: IFFALSE 32777
// if IsControledBy ( i ) then
32755: LD_VAR 0 2
32759: PPUSH
32760: CALL_OW 312
32764: IFFALSE 32775
// ComUnlink ( i ) ;
32766: LD_VAR 0 2
32770: PPUSH
32771: CALL_OW 136
32775: GO 32752
32777: POP
32778: POP
// end ;
32779: PPOPN 2
32781: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
32782: LD_EXP 66
32786: PUSH
32787: LD_EXP 97
32791: AND
32792: IFFALSE 32932
32794: GO 32796
32796: DISABLE
32797: LD_INT 0
32799: PPUSH
32800: PPUSH
// begin ToLua ( displayPowell(); ) ;
32801: LD_STRING displayPowell();
32803: PPUSH
32804: CALL_OW 559
// uc_side := 0 ;
32808: LD_ADDR_OWVAR 20
32812: PUSH
32813: LD_INT 0
32815: ST_TO_ADDR
// uc_nation := 2 ;
32816: LD_ADDR_OWVAR 21
32820: PUSH
32821: LD_INT 2
32823: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
32824: LD_ADDR_OWVAR 37
32828: PUSH
32829: LD_INT 14
32831: ST_TO_ADDR
// vc_engine := engine_siberite ;
32832: LD_ADDR_OWVAR 39
32836: PUSH
32837: LD_INT 3
32839: ST_TO_ADDR
// vc_control := control_apeman ;
32840: LD_ADDR_OWVAR 38
32844: PUSH
32845: LD_INT 5
32847: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
32848: LD_ADDR_OWVAR 40
32852: PUSH
32853: LD_INT 29
32855: ST_TO_ADDR
// un := CreateVehicle ;
32856: LD_ADDR_VAR 0 2
32860: PUSH
32861: CALL_OW 45
32865: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32866: LD_VAR 0 2
32870: PPUSH
32871: LD_INT 1
32873: PPUSH
32874: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32878: LD_INT 35
32880: PPUSH
32881: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32885: LD_VAR 0 2
32889: PPUSH
32890: LD_INT 22
32892: PUSH
32893: LD_OWVAR 2
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PPUSH
32902: CALL_OW 69
32906: PPUSH
32907: LD_VAR 0 2
32911: PPUSH
32912: CALL_OW 74
32916: PPUSH
32917: CALL_OW 115
// until IsDead ( un ) ;
32921: LD_VAR 0 2
32925: PPUSH
32926: CALL_OW 301
32930: IFFALSE 32878
// end ;
32932: PPOPN 2
32934: END
// every 0 0$1 trigger StreamModeActive and sStu do
32935: LD_EXP 66
32939: PUSH
32940: LD_EXP 105
32944: AND
32945: IFFALSE 32961
32947: GO 32949
32949: DISABLE
// begin ToLua ( displayStucuk(); ) ;
32950: LD_STRING displayStucuk();
32952: PPUSH
32953: CALL_OW 559
// ResetFog ;
32957: CALL_OW 335
// end ;
32961: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
32962: LD_EXP 66
32966: PUSH
32967: LD_EXP 98
32971: AND
32972: IFFALSE 33113
32974: GO 32976
32976: DISABLE
32977: LD_INT 0
32979: PPUSH
32980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32981: LD_ADDR_VAR 0 2
32985: PUSH
32986: LD_INT 22
32988: PUSH
32989: LD_OWVAR 2
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 21
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PPUSH
33012: CALL_OW 69
33016: ST_TO_ADDR
// if not tmp then
33017: LD_VAR 0 2
33021: NOT
33022: IFFALSE 33026
// exit ;
33024: GO 33113
// un := tmp [ rand ( 1 , tmp ) ] ;
33026: LD_ADDR_VAR 0 1
33030: PUSH
33031: LD_VAR 0 2
33035: PUSH
33036: LD_INT 1
33038: PPUSH
33039: LD_VAR 0 2
33043: PPUSH
33044: CALL_OW 12
33048: ARRAY
33049: ST_TO_ADDR
// SetSide ( un , 0 ) ;
33050: LD_VAR 0 1
33054: PPUSH
33055: LD_INT 0
33057: PPUSH
33058: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
33062: LD_VAR 0 1
33066: PPUSH
33067: LD_OWVAR 3
33071: PUSH
33072: LD_VAR 0 1
33076: DIFF
33077: PPUSH
33078: LD_VAR 0 1
33082: PPUSH
33083: CALL_OW 74
33087: PPUSH
33088: CALL_OW 115
// wait ( 0 0$20 ) ;
33092: LD_INT 700
33094: PPUSH
33095: CALL_OW 67
// SetSide ( un , your_side ) ;
33099: LD_VAR 0 1
33103: PPUSH
33104: LD_OWVAR 2
33108: PPUSH
33109: CALL_OW 235
// end ;
33113: PPOPN 2
33115: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
33116: LD_EXP 66
33120: PUSH
33121: LD_EXP 99
33125: AND
33126: IFFALSE 33232
33128: GO 33130
33130: DISABLE
33131: LD_INT 0
33133: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33134: LD_ADDR_VAR 0 1
33138: PUSH
33139: LD_INT 22
33141: PUSH
33142: LD_OWVAR 2
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 2
33153: PUSH
33154: LD_INT 30
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 30
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: LIST
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PPUSH
33183: CALL_OW 69
33187: ST_TO_ADDR
// if not depot then
33188: LD_VAR 0 1
33192: NOT
33193: IFFALSE 33197
// exit ;
33195: GO 33232
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
33197: LD_VAR 0 1
33201: PUSH
33202: LD_INT 1
33204: ARRAY
33205: PPUSH
33206: CALL_OW 250
33210: PPUSH
33211: LD_VAR 0 1
33215: PUSH
33216: LD_INT 1
33218: ARRAY
33219: PPUSH
33220: CALL_OW 251
33224: PPUSH
33225: LD_INT 70
33227: PPUSH
33228: CALL_OW 495
// end ;
33232: PPOPN 1
33234: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
33235: LD_EXP 66
33239: PUSH
33240: LD_EXP 100
33244: AND
33245: IFFALSE 33456
33247: GO 33249
33249: DISABLE
33250: LD_INT 0
33252: PPUSH
33253: PPUSH
33254: PPUSH
33255: PPUSH
33256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33257: LD_ADDR_VAR 0 5
33261: PUSH
33262: LD_INT 22
33264: PUSH
33265: LD_OWVAR 2
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 21
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PPUSH
33288: CALL_OW 69
33292: ST_TO_ADDR
// if not tmp then
33293: LD_VAR 0 5
33297: NOT
33298: IFFALSE 33302
// exit ;
33300: GO 33456
// for i in tmp do
33302: LD_ADDR_VAR 0 1
33306: PUSH
33307: LD_VAR 0 5
33311: PUSH
33312: FOR_IN
33313: IFFALSE 33454
// begin d := rand ( 0 , 5 ) ;
33315: LD_ADDR_VAR 0 4
33319: PUSH
33320: LD_INT 0
33322: PPUSH
33323: LD_INT 5
33325: PPUSH
33326: CALL_OW 12
33330: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
33331: LD_ADDR_VAR 0 2
33335: PUSH
33336: LD_VAR 0 1
33340: PPUSH
33341: CALL_OW 250
33345: PPUSH
33346: LD_VAR 0 4
33350: PPUSH
33351: LD_INT 3
33353: PPUSH
33354: LD_INT 12
33356: PPUSH
33357: CALL_OW 12
33361: PPUSH
33362: CALL_OW 272
33366: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
33367: LD_ADDR_VAR 0 3
33371: PUSH
33372: LD_VAR 0 1
33376: PPUSH
33377: CALL_OW 251
33381: PPUSH
33382: LD_VAR 0 4
33386: PPUSH
33387: LD_INT 3
33389: PPUSH
33390: LD_INT 12
33392: PPUSH
33393: CALL_OW 12
33397: PPUSH
33398: CALL_OW 273
33402: ST_TO_ADDR
// if ValidHex ( x , y ) then
33403: LD_VAR 0 2
33407: PPUSH
33408: LD_VAR 0 3
33412: PPUSH
33413: CALL_OW 488
33417: IFFALSE 33452
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
33419: LD_VAR 0 1
33423: PPUSH
33424: LD_VAR 0 2
33428: PPUSH
33429: LD_VAR 0 3
33433: PPUSH
33434: LD_INT 3
33436: PPUSH
33437: LD_INT 6
33439: PPUSH
33440: CALL_OW 12
33444: PPUSH
33445: LD_INT 1
33447: PPUSH
33448: CALL_OW 483
// end ;
33452: GO 33312
33454: POP
33455: POP
// end ;
33456: PPOPN 5
33458: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
33459: LD_EXP 66
33463: PUSH
33464: LD_EXP 101
33468: AND
33469: IFFALSE 33563
33471: GO 33473
33473: DISABLE
33474: LD_INT 0
33476: PPUSH
33477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
33478: LD_ADDR_VAR 0 2
33482: PUSH
33483: LD_INT 22
33485: PUSH
33486: LD_OWVAR 2
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 32
33497: PUSH
33498: LD_INT 1
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 21
33507: PUSH
33508: LD_INT 2
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: PPUSH
33520: CALL_OW 69
33524: ST_TO_ADDR
// if not tmp then
33525: LD_VAR 0 2
33529: NOT
33530: IFFALSE 33534
// exit ;
33532: GO 33563
// for i in tmp do
33534: LD_ADDR_VAR 0 1
33538: PUSH
33539: LD_VAR 0 2
33543: PUSH
33544: FOR_IN
33545: IFFALSE 33561
// SetFuel ( i , 0 ) ;
33547: LD_VAR 0 1
33551: PPUSH
33552: LD_INT 0
33554: PPUSH
33555: CALL_OW 240
33559: GO 33544
33561: POP
33562: POP
// end ;
33563: PPOPN 2
33565: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
33566: LD_EXP 66
33570: PUSH
33571: LD_EXP 102
33575: AND
33576: IFFALSE 33642
33578: GO 33580
33580: DISABLE
33581: LD_INT 0
33583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33584: LD_ADDR_VAR 0 1
33588: PUSH
33589: LD_INT 22
33591: PUSH
33592: LD_OWVAR 2
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 30
33603: PUSH
33604: LD_INT 29
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PPUSH
33615: CALL_OW 69
33619: ST_TO_ADDR
// if not tmp then
33620: LD_VAR 0 1
33624: NOT
33625: IFFALSE 33629
// exit ;
33627: GO 33642
// DestroyUnit ( tmp [ 1 ] ) ;
33629: LD_VAR 0 1
33633: PUSH
33634: LD_INT 1
33636: ARRAY
33637: PPUSH
33638: CALL_OW 65
// end ;
33642: PPOPN 1
33644: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33645: LD_EXP 66
33649: PUSH
33650: LD_EXP 104
33654: AND
33655: IFFALSE 33784
33657: GO 33659
33659: DISABLE
33660: LD_INT 0
33662: PPUSH
// begin uc_side := 0 ;
33663: LD_ADDR_OWVAR 20
33667: PUSH
33668: LD_INT 0
33670: ST_TO_ADDR
// uc_nation := nation_arabian ;
33671: LD_ADDR_OWVAR 21
33675: PUSH
33676: LD_INT 2
33678: ST_TO_ADDR
// hc_gallery :=  ;
33679: LD_ADDR_OWVAR 33
33683: PUSH
33684: LD_STRING 
33686: ST_TO_ADDR
// hc_name :=  ;
33687: LD_ADDR_OWVAR 26
33691: PUSH
33692: LD_STRING 
33694: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
33695: LD_INT 1
33697: PPUSH
33698: LD_INT 11
33700: PPUSH
33701: LD_INT 10
33703: PPUSH
33704: CALL_OW 380
// un := CreateHuman ;
33708: LD_ADDR_VAR 0 1
33712: PUSH
33713: CALL_OW 44
33717: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33718: LD_VAR 0 1
33722: PPUSH
33723: LD_INT 1
33725: PPUSH
33726: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33730: LD_INT 35
33732: PPUSH
33733: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33737: LD_VAR 0 1
33741: PPUSH
33742: LD_INT 22
33744: PUSH
33745: LD_OWVAR 2
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PPUSH
33754: CALL_OW 69
33758: PPUSH
33759: LD_VAR 0 1
33763: PPUSH
33764: CALL_OW 74
33768: PPUSH
33769: CALL_OW 115
// until IsDead ( un ) ;
33773: LD_VAR 0 1
33777: PPUSH
33778: CALL_OW 301
33782: IFFALSE 33730
// end ;
33784: PPOPN 1
33786: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
33787: LD_EXP 66
33791: PUSH
33792: LD_EXP 106
33796: AND
33797: IFFALSE 33809
33799: GO 33801
33801: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
33802: LD_STRING earthquake(getX(game), 0, 32)
33804: PPUSH
33805: CALL_OW 559
33809: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
33810: LD_EXP 66
33814: PUSH
33815: LD_EXP 107
33819: AND
33820: IFFALSE 33911
33822: GO 33824
33824: DISABLE
33825: LD_INT 0
33827: PPUSH
// begin enable ;
33828: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
33829: LD_ADDR_VAR 0 1
33833: PUSH
33834: LD_INT 22
33836: PUSH
33837: LD_OWVAR 2
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 21
33848: PUSH
33849: LD_INT 2
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 33
33858: PUSH
33859: LD_INT 3
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: LIST
33870: PPUSH
33871: CALL_OW 69
33875: ST_TO_ADDR
// if not tmp then
33876: LD_VAR 0 1
33880: NOT
33881: IFFALSE 33885
// exit ;
33883: GO 33911
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33885: LD_VAR 0 1
33889: PUSH
33890: LD_INT 1
33892: PPUSH
33893: LD_VAR 0 1
33897: PPUSH
33898: CALL_OW 12
33902: ARRAY
33903: PPUSH
33904: LD_INT 1
33906: PPUSH
33907: CALL_OW 234
// end ;
33911: PPOPN 1
33913: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
33914: LD_EXP 66
33918: PUSH
33919: LD_EXP 108
33923: AND
33924: IFFALSE 34065
33926: GO 33928
33928: DISABLE
33929: LD_INT 0
33931: PPUSH
33932: PPUSH
33933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33934: LD_ADDR_VAR 0 3
33938: PUSH
33939: LD_INT 22
33941: PUSH
33942: LD_OWVAR 2
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 25
33953: PUSH
33954: LD_INT 1
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PPUSH
33965: CALL_OW 69
33969: ST_TO_ADDR
// if not tmp then
33970: LD_VAR 0 3
33974: NOT
33975: IFFALSE 33979
// exit ;
33977: GO 34065
// un := tmp [ rand ( 1 , tmp ) ] ;
33979: LD_ADDR_VAR 0 2
33983: PUSH
33984: LD_VAR 0 3
33988: PUSH
33989: LD_INT 1
33991: PPUSH
33992: LD_VAR 0 3
33996: PPUSH
33997: CALL_OW 12
34001: ARRAY
34002: ST_TO_ADDR
// if Crawls ( un ) then
34003: LD_VAR 0 2
34007: PPUSH
34008: CALL_OW 318
34012: IFFALSE 34023
// ComWalk ( un ) ;
34014: LD_VAR 0 2
34018: PPUSH
34019: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
34023: LD_VAR 0 2
34027: PPUSH
34028: LD_INT 9
34030: PPUSH
34031: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
34035: LD_INT 28
34037: PPUSH
34038: LD_OWVAR 2
34042: PPUSH
34043: LD_INT 2
34045: PPUSH
34046: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
34050: LD_INT 29
34052: PPUSH
34053: LD_OWVAR 2
34057: PPUSH
34058: LD_INT 2
34060: PPUSH
34061: CALL_OW 322
// end ;
34065: PPOPN 3
34067: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
34068: LD_EXP 66
34072: PUSH
34073: LD_EXP 109
34077: AND
34078: IFFALSE 34189
34080: GO 34082
34082: DISABLE
34083: LD_INT 0
34085: PPUSH
34086: PPUSH
34087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34088: LD_ADDR_VAR 0 3
34092: PUSH
34093: LD_INT 22
34095: PUSH
34096: LD_OWVAR 2
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 25
34107: PUSH
34108: LD_INT 1
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PPUSH
34119: CALL_OW 69
34123: ST_TO_ADDR
// if not tmp then
34124: LD_VAR 0 3
34128: NOT
34129: IFFALSE 34133
// exit ;
34131: GO 34189
// un := tmp [ rand ( 1 , tmp ) ] ;
34133: LD_ADDR_VAR 0 2
34137: PUSH
34138: LD_VAR 0 3
34142: PUSH
34143: LD_INT 1
34145: PPUSH
34146: LD_VAR 0 3
34150: PPUSH
34151: CALL_OW 12
34155: ARRAY
34156: ST_TO_ADDR
// if Crawls ( un ) then
34157: LD_VAR 0 2
34161: PPUSH
34162: CALL_OW 318
34166: IFFALSE 34177
// ComWalk ( un ) ;
34168: LD_VAR 0 2
34172: PPUSH
34173: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34177: LD_VAR 0 2
34181: PPUSH
34182: LD_INT 8
34184: PPUSH
34185: CALL_OW 336
// end ;
34189: PPOPN 3
34191: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
34192: LD_EXP 66
34196: PUSH
34197: LD_EXP 110
34201: AND
34202: IFFALSE 34346
34204: GO 34206
34206: DISABLE
34207: LD_INT 0
34209: PPUSH
34210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
34211: LD_ADDR_VAR 0 2
34215: PUSH
34216: LD_INT 22
34218: PUSH
34219: LD_OWVAR 2
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 21
34230: PUSH
34231: LD_INT 2
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 2
34240: PUSH
34241: LD_INT 34
34243: PUSH
34244: LD_INT 12
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 34
34253: PUSH
34254: LD_INT 51
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 34
34263: PUSH
34264: LD_INT 32
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: PPUSH
34282: CALL_OW 69
34286: ST_TO_ADDR
// if not tmp then
34287: LD_VAR 0 2
34291: NOT
34292: IFFALSE 34296
// exit ;
34294: GO 34346
// for i in tmp do
34296: LD_ADDR_VAR 0 1
34300: PUSH
34301: LD_VAR 0 2
34305: PUSH
34306: FOR_IN
34307: IFFALSE 34344
// if GetCargo ( i , mat_artifact ) = 0 then
34309: LD_VAR 0 1
34313: PPUSH
34314: LD_INT 4
34316: PPUSH
34317: CALL_OW 289
34321: PUSH
34322: LD_INT 0
34324: EQUAL
34325: IFFALSE 34342
// SetCargo ( i , mat_siberit , 100 ) ;
34327: LD_VAR 0 1
34331: PPUSH
34332: LD_INT 3
34334: PPUSH
34335: LD_INT 100
34337: PPUSH
34338: CALL_OW 290
34342: GO 34306
34344: POP
34345: POP
// end ;
34346: PPOPN 2
34348: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
34349: LD_EXP 66
34353: PUSH
34354: LD_EXP 111
34358: AND
34359: IFFALSE 34542
34361: GO 34363
34363: DISABLE
34364: LD_INT 0
34366: PPUSH
34367: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34368: LD_ADDR_VAR 0 2
34372: PUSH
34373: LD_INT 22
34375: PUSH
34376: LD_OWVAR 2
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PPUSH
34385: CALL_OW 69
34389: ST_TO_ADDR
// if not tmp then
34390: LD_VAR 0 2
34394: NOT
34395: IFFALSE 34399
// exit ;
34397: GO 34542
// for i := 1 to 2 do
34399: LD_ADDR_VAR 0 1
34403: PUSH
34404: DOUBLE
34405: LD_INT 1
34407: DEC
34408: ST_TO_ADDR
34409: LD_INT 2
34411: PUSH
34412: FOR_TO
34413: IFFALSE 34540
// begin uc_side := your_side ;
34415: LD_ADDR_OWVAR 20
34419: PUSH
34420: LD_OWVAR 2
34424: ST_TO_ADDR
// uc_nation := nation_american ;
34425: LD_ADDR_OWVAR 21
34429: PUSH
34430: LD_INT 1
34432: ST_TO_ADDR
// vc_chassis := us_morphling ;
34433: LD_ADDR_OWVAR 37
34437: PUSH
34438: LD_INT 5
34440: ST_TO_ADDR
// vc_engine := engine_siberite ;
34441: LD_ADDR_OWVAR 39
34445: PUSH
34446: LD_INT 3
34448: ST_TO_ADDR
// vc_control := control_computer ;
34449: LD_ADDR_OWVAR 38
34453: PUSH
34454: LD_INT 3
34456: ST_TO_ADDR
// vc_weapon := us_double_laser ;
34457: LD_ADDR_OWVAR 40
34461: PUSH
34462: LD_INT 10
34464: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
34465: LD_VAR 0 2
34469: PUSH
34470: LD_INT 1
34472: ARRAY
34473: PPUSH
34474: CALL_OW 310
34478: NOT
34479: IFFALSE 34526
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
34481: CALL_OW 45
34485: PPUSH
34486: LD_VAR 0 2
34490: PUSH
34491: LD_INT 1
34493: ARRAY
34494: PPUSH
34495: CALL_OW 250
34499: PPUSH
34500: LD_VAR 0 2
34504: PUSH
34505: LD_INT 1
34507: ARRAY
34508: PPUSH
34509: CALL_OW 251
34513: PPUSH
34514: LD_INT 12
34516: PPUSH
34517: LD_INT 1
34519: PPUSH
34520: CALL_OW 50
34524: GO 34538
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
34526: CALL_OW 45
34530: PPUSH
34531: LD_INT 1
34533: PPUSH
34534: CALL_OW 51
// end ;
34538: GO 34412
34540: POP
34541: POP
// end ;
34542: PPOPN 2
34544: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
34545: LD_EXP 66
34549: PUSH
34550: LD_EXP 112
34554: AND
34555: IFFALSE 34777
34557: GO 34559
34559: DISABLE
34560: LD_INT 0
34562: PPUSH
34563: PPUSH
34564: PPUSH
34565: PPUSH
34566: PPUSH
34567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34568: LD_ADDR_VAR 0 6
34572: PUSH
34573: LD_INT 22
34575: PUSH
34576: LD_OWVAR 2
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 21
34587: PUSH
34588: LD_INT 1
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 3
34597: PUSH
34598: LD_INT 23
34600: PUSH
34601: LD_INT 0
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: PPUSH
34617: CALL_OW 69
34621: ST_TO_ADDR
// if not tmp then
34622: LD_VAR 0 6
34626: NOT
34627: IFFALSE 34631
// exit ;
34629: GO 34777
// s1 := rand ( 1 , 4 ) ;
34631: LD_ADDR_VAR 0 2
34635: PUSH
34636: LD_INT 1
34638: PPUSH
34639: LD_INT 4
34641: PPUSH
34642: CALL_OW 12
34646: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34647: LD_ADDR_VAR 0 4
34651: PUSH
34652: LD_VAR 0 6
34656: PUSH
34657: LD_INT 1
34659: ARRAY
34660: PPUSH
34661: LD_VAR 0 2
34665: PPUSH
34666: CALL_OW 259
34670: ST_TO_ADDR
// if s1 = 1 then
34671: LD_VAR 0 2
34675: PUSH
34676: LD_INT 1
34678: EQUAL
34679: IFFALSE 34699
// s2 := rand ( 2 , 4 ) else
34681: LD_ADDR_VAR 0 3
34685: PUSH
34686: LD_INT 2
34688: PPUSH
34689: LD_INT 4
34691: PPUSH
34692: CALL_OW 12
34696: ST_TO_ADDR
34697: GO 34707
// s2 := 1 ;
34699: LD_ADDR_VAR 0 3
34703: PUSH
34704: LD_INT 1
34706: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
34707: LD_ADDR_VAR 0 5
34711: PUSH
34712: LD_VAR 0 6
34716: PUSH
34717: LD_INT 1
34719: ARRAY
34720: PPUSH
34721: LD_VAR 0 3
34725: PPUSH
34726: CALL_OW 259
34730: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
34731: LD_VAR 0 6
34735: PUSH
34736: LD_INT 1
34738: ARRAY
34739: PPUSH
34740: LD_VAR 0 2
34744: PPUSH
34745: LD_VAR 0 5
34749: PPUSH
34750: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
34754: LD_VAR 0 6
34758: PUSH
34759: LD_INT 1
34761: ARRAY
34762: PPUSH
34763: LD_VAR 0 3
34767: PPUSH
34768: LD_VAR 0 4
34772: PPUSH
34773: CALL_OW 237
// end ;
34777: PPOPN 6
34779: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
34780: LD_EXP 66
34784: PUSH
34785: LD_EXP 113
34789: AND
34790: IFFALSE 34869
34792: GO 34794
34794: DISABLE
34795: LD_INT 0
34797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
34798: LD_ADDR_VAR 0 1
34802: PUSH
34803: LD_INT 22
34805: PUSH
34806: LD_OWVAR 2
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 30
34817: PUSH
34818: LD_INT 3
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PPUSH
34829: CALL_OW 69
34833: ST_TO_ADDR
// if not tmp then
34834: LD_VAR 0 1
34838: NOT
34839: IFFALSE 34843
// exit ;
34841: GO 34869
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34843: LD_VAR 0 1
34847: PUSH
34848: LD_INT 1
34850: PPUSH
34851: LD_VAR 0 1
34855: PPUSH
34856: CALL_OW 12
34860: ARRAY
34861: PPUSH
34862: LD_INT 1
34864: PPUSH
34865: CALL_OW 234
// end ;
34869: PPOPN 1
34871: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
34872: LD_EXP 66
34876: PUSH
34877: LD_EXP 114
34881: AND
34882: IFFALSE 34994
34884: GO 34886
34886: DISABLE
34887: LD_INT 0
34889: PPUSH
34890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
34891: LD_ADDR_VAR 0 2
34895: PUSH
34896: LD_INT 22
34898: PUSH
34899: LD_OWVAR 2
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 2
34910: PUSH
34911: LD_INT 30
34913: PUSH
34914: LD_INT 27
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 30
34923: PUSH
34924: LD_INT 26
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 30
34933: PUSH
34934: LD_INT 28
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PPUSH
34951: CALL_OW 69
34955: ST_TO_ADDR
// if not tmp then
34956: LD_VAR 0 2
34960: NOT
34961: IFFALSE 34965
// exit ;
34963: GO 34994
// for i in tmp do
34965: LD_ADDR_VAR 0 1
34969: PUSH
34970: LD_VAR 0 2
34974: PUSH
34975: FOR_IN
34976: IFFALSE 34992
// SetLives ( i , 1 ) ;
34978: LD_VAR 0 1
34982: PPUSH
34983: LD_INT 1
34985: PPUSH
34986: CALL_OW 234
34990: GO 34975
34992: POP
34993: POP
// end ;
34994: PPOPN 2
34996: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
34997: LD_EXP 66
35001: PUSH
35002: LD_EXP 115
35006: AND
35007: IFFALSE 35281
35009: GO 35011
35011: DISABLE
35012: LD_INT 0
35014: PPUSH
35015: PPUSH
35016: PPUSH
// begin i := rand ( 1 , 7 ) ;
35017: LD_ADDR_VAR 0 1
35021: PUSH
35022: LD_INT 1
35024: PPUSH
35025: LD_INT 7
35027: PPUSH
35028: CALL_OW 12
35032: ST_TO_ADDR
// case i of 1 :
35033: LD_VAR 0 1
35037: PUSH
35038: LD_INT 1
35040: DOUBLE
35041: EQUAL
35042: IFTRUE 35046
35044: GO 35056
35046: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
35047: LD_STRING earthquake(getX(game), 0, 32)
35049: PPUSH
35050: CALL_OW 559
35054: GO 35281
35056: LD_INT 2
35058: DOUBLE
35059: EQUAL
35060: IFTRUE 35064
35062: GO 35078
35064: POP
// begin ToLua ( displayStucuk(); ) ;
35065: LD_STRING displayStucuk();
35067: PPUSH
35068: CALL_OW 559
// ResetFog ;
35072: CALL_OW 335
// end ; 3 :
35076: GO 35281
35078: LD_INT 3
35080: DOUBLE
35081: EQUAL
35082: IFTRUE 35086
35084: GO 35190
35086: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
35087: LD_ADDR_VAR 0 2
35091: PUSH
35092: LD_INT 22
35094: PUSH
35095: LD_OWVAR 2
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 25
35106: PUSH
35107: LD_INT 1
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PPUSH
35118: CALL_OW 69
35122: ST_TO_ADDR
// if not tmp then
35123: LD_VAR 0 2
35127: NOT
35128: IFFALSE 35132
// exit ;
35130: GO 35281
// un := tmp [ rand ( 1 , tmp ) ] ;
35132: LD_ADDR_VAR 0 3
35136: PUSH
35137: LD_VAR 0 2
35141: PUSH
35142: LD_INT 1
35144: PPUSH
35145: LD_VAR 0 2
35149: PPUSH
35150: CALL_OW 12
35154: ARRAY
35155: ST_TO_ADDR
// if Crawls ( un ) then
35156: LD_VAR 0 3
35160: PPUSH
35161: CALL_OW 318
35165: IFFALSE 35176
// ComWalk ( un ) ;
35167: LD_VAR 0 3
35171: PPUSH
35172: CALL_OW 138
// SetClass ( un , class_mortar ) ;
35176: LD_VAR 0 3
35180: PPUSH
35181: LD_INT 8
35183: PPUSH
35184: CALL_OW 336
// end ; 4 :
35188: GO 35281
35190: LD_INT 4
35192: DOUBLE
35193: EQUAL
35194: IFTRUE 35198
35196: GO 35259
35198: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
35199: LD_ADDR_VAR 0 2
35203: PUSH
35204: LD_INT 22
35206: PUSH
35207: LD_OWVAR 2
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 30
35218: PUSH
35219: LD_INT 29
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PPUSH
35230: CALL_OW 69
35234: ST_TO_ADDR
// if not tmp then
35235: LD_VAR 0 2
35239: NOT
35240: IFFALSE 35244
// exit ;
35242: GO 35281
// DestroyUnit ( tmp [ 1 ] ) ;
35244: LD_VAR 0 2
35248: PUSH
35249: LD_INT 1
35251: ARRAY
35252: PPUSH
35253: CALL_OW 65
// end ; 5 .. 7 :
35257: GO 35281
35259: LD_INT 5
35261: DOUBLE
35262: GREATEREQUAL
35263: IFFALSE 35271
35265: LD_INT 7
35267: DOUBLE
35268: LESSEQUAL
35269: IFTRUE 35273
35271: GO 35280
35273: POP
// StreamSibBomb ; end ;
35274: CALL 31531 0 0
35278: GO 35281
35280: POP
// end ;
35281: PPOPN 3
35283: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
35284: LD_EXP 66
35288: PUSH
35289: LD_EXP 116
35293: AND
35294: IFFALSE 35450
35296: GO 35298
35298: DISABLE
35299: LD_INT 0
35301: PPUSH
35302: PPUSH
35303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
35304: LD_ADDR_VAR 0 2
35308: PUSH
35309: LD_INT 81
35311: PUSH
35312: LD_OWVAR 2
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 2
35323: PUSH
35324: LD_INT 21
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 21
35336: PUSH
35337: LD_INT 2
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: LIST
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PPUSH
35353: CALL_OW 69
35357: ST_TO_ADDR
// if not tmp then
35358: LD_VAR 0 2
35362: NOT
35363: IFFALSE 35367
// exit ;
35365: GO 35450
// p := 0 ;
35367: LD_ADDR_VAR 0 3
35371: PUSH
35372: LD_INT 0
35374: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35375: LD_INT 35
35377: PPUSH
35378: CALL_OW 67
// p := p + 1 ;
35382: LD_ADDR_VAR 0 3
35386: PUSH
35387: LD_VAR 0 3
35391: PUSH
35392: LD_INT 1
35394: PLUS
35395: ST_TO_ADDR
// for i in tmp do
35396: LD_ADDR_VAR 0 1
35400: PUSH
35401: LD_VAR 0 2
35405: PUSH
35406: FOR_IN
35407: IFFALSE 35438
// if GetLives ( i ) < 1000 then
35409: LD_VAR 0 1
35413: PPUSH
35414: CALL_OW 256
35418: PUSH
35419: LD_INT 1000
35421: LESS
35422: IFFALSE 35436
// SetLives ( i , 1000 ) ;
35424: LD_VAR 0 1
35428: PPUSH
35429: LD_INT 1000
35431: PPUSH
35432: CALL_OW 234
35436: GO 35406
35438: POP
35439: POP
// until p > 20 ;
35440: LD_VAR 0 3
35444: PUSH
35445: LD_INT 20
35447: GREATER
35448: IFFALSE 35375
// end ;
35450: PPOPN 3
35452: END
// every 0 0$1 trigger StreamModeActive and sTime do
35453: LD_EXP 66
35457: PUSH
35458: LD_EXP 117
35462: AND
35463: IFFALSE 35498
35465: GO 35467
35467: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
35468: LD_INT 28
35470: PPUSH
35471: LD_OWVAR 2
35475: PPUSH
35476: LD_INT 2
35478: PPUSH
35479: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
35483: LD_INT 30
35485: PPUSH
35486: LD_OWVAR 2
35490: PPUSH
35491: LD_INT 2
35493: PPUSH
35494: CALL_OW 322
// end ;
35498: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
35499: LD_EXP 66
35503: PUSH
35504: LD_EXP 118
35508: AND
35509: IFFALSE 35630
35511: GO 35513
35513: DISABLE
35514: LD_INT 0
35516: PPUSH
35517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35518: LD_ADDR_VAR 0 2
35522: PUSH
35523: LD_INT 22
35525: PUSH
35526: LD_OWVAR 2
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 21
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 3
35547: PUSH
35548: LD_INT 23
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: PPUSH
35567: CALL_OW 69
35571: ST_TO_ADDR
// if not tmp then
35572: LD_VAR 0 2
35576: NOT
35577: IFFALSE 35581
// exit ;
35579: GO 35630
// for i in tmp do
35581: LD_ADDR_VAR 0 1
35585: PUSH
35586: LD_VAR 0 2
35590: PUSH
35591: FOR_IN
35592: IFFALSE 35628
// begin if Crawls ( i ) then
35594: LD_VAR 0 1
35598: PPUSH
35599: CALL_OW 318
35603: IFFALSE 35614
// ComWalk ( i ) ;
35605: LD_VAR 0 1
35609: PPUSH
35610: CALL_OW 138
// SetClass ( i , 2 ) ;
35614: LD_VAR 0 1
35618: PPUSH
35619: LD_INT 2
35621: PPUSH
35622: CALL_OW 336
// end ;
35626: GO 35591
35628: POP
35629: POP
// end ;
35630: PPOPN 2
35632: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35633: LD_EXP 66
35637: PUSH
35638: LD_EXP 119
35642: AND
35643: IFFALSE 35924
35645: GO 35647
35647: DISABLE
35648: LD_INT 0
35650: PPUSH
35651: PPUSH
35652: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35653: LD_OWVAR 2
35657: PPUSH
35658: LD_INT 9
35660: PPUSH
35661: LD_INT 1
35663: PPUSH
35664: LD_INT 1
35666: PPUSH
35667: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
35671: LD_INT 9
35673: PPUSH
35674: LD_OWVAR 2
35678: PPUSH
35679: CALL_OW 343
// uc_side := 9 ;
35683: LD_ADDR_OWVAR 20
35687: PUSH
35688: LD_INT 9
35690: ST_TO_ADDR
// uc_nation := 2 ;
35691: LD_ADDR_OWVAR 21
35695: PUSH
35696: LD_INT 2
35698: ST_TO_ADDR
// hc_name := Dark Warrior ;
35699: LD_ADDR_OWVAR 26
35703: PUSH
35704: LD_STRING Dark Warrior
35706: ST_TO_ADDR
// hc_gallery :=  ;
35707: LD_ADDR_OWVAR 33
35711: PUSH
35712: LD_STRING 
35714: ST_TO_ADDR
// hc_noskilllimit := true ;
35715: LD_ADDR_OWVAR 76
35719: PUSH
35720: LD_INT 1
35722: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
35723: LD_ADDR_OWVAR 31
35727: PUSH
35728: LD_INT 30
35730: PUSH
35731: LD_INT 30
35733: PUSH
35734: LD_INT 30
35736: PUSH
35737: LD_INT 30
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: ST_TO_ADDR
// un := CreateHuman ;
35746: LD_ADDR_VAR 0 3
35750: PUSH
35751: CALL_OW 44
35755: ST_TO_ADDR
// hc_noskilllimit := false ;
35756: LD_ADDR_OWVAR 76
35760: PUSH
35761: LD_INT 0
35763: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35764: LD_VAR 0 3
35768: PPUSH
35769: LD_INT 1
35771: PPUSH
35772: CALL_OW 51
// p := 0 ;
35776: LD_ADDR_VAR 0 2
35780: PUSH
35781: LD_INT 0
35783: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35784: LD_INT 35
35786: PPUSH
35787: CALL_OW 67
// p := p + 1 ;
35791: LD_ADDR_VAR 0 2
35795: PUSH
35796: LD_VAR 0 2
35800: PUSH
35801: LD_INT 1
35803: PLUS
35804: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
35805: LD_VAR 0 3
35809: PPUSH
35810: CALL_OW 256
35814: PUSH
35815: LD_INT 1000
35817: LESS
35818: IFFALSE 35832
// SetLives ( un , 1000 ) ;
35820: LD_VAR 0 3
35824: PPUSH
35825: LD_INT 1000
35827: PPUSH
35828: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
35832: LD_VAR 0 3
35836: PPUSH
35837: LD_INT 81
35839: PUSH
35840: LD_OWVAR 2
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 91
35851: PUSH
35852: LD_VAR 0 3
35856: PUSH
35857: LD_INT 30
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: LIST
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PPUSH
35869: CALL_OW 69
35873: PPUSH
35874: LD_VAR 0 3
35878: PPUSH
35879: CALL_OW 74
35883: PPUSH
35884: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
35888: LD_VAR 0 2
35892: PUSH
35893: LD_INT 60
35895: GREATER
35896: PUSH
35897: LD_VAR 0 3
35901: PPUSH
35902: CALL_OW 301
35906: OR
35907: IFFALSE 35784
// if un then
35909: LD_VAR 0 3
35913: IFFALSE 35924
// RemoveUnit ( un ) ;
35915: LD_VAR 0 3
35919: PPUSH
35920: CALL_OW 64
// end ;
35924: PPOPN 3
35926: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35927: LD_INT 0
35929: PPUSH
35930: PPUSH
35931: PPUSH
35932: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35933: LD_ADDR_VAR 0 4
35937: PUSH
35938: LD_INT 22
35940: PUSH
35941: LD_OWVAR 2
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 2
35952: PUSH
35953: LD_INT 30
35955: PUSH
35956: LD_INT 0
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 30
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: LIST
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PPUSH
35982: CALL_OW 69
35986: ST_TO_ADDR
// if not tmp then
35987: LD_VAR 0 4
35991: NOT
35992: IFFALSE 35996
// exit ;
35994: GO 36055
// for i in tmp do
35996: LD_ADDR_VAR 0 2
36000: PUSH
36001: LD_VAR 0 4
36005: PUSH
36006: FOR_IN
36007: IFFALSE 36053
// for j = 1 to 3 do
36009: LD_ADDR_VAR 0 3
36013: PUSH
36014: DOUBLE
36015: LD_INT 1
36017: DEC
36018: ST_TO_ADDR
36019: LD_INT 3
36021: PUSH
36022: FOR_TO
36023: IFFALSE 36049
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
36025: LD_VAR 0 2
36029: PPUSH
36030: CALL_OW 274
36034: PPUSH
36035: LD_VAR 0 3
36039: PPUSH
36040: LD_INT 99999
36042: PPUSH
36043: CALL_OW 277
36047: GO 36022
36049: POP
36050: POP
36051: GO 36006
36053: POP
36054: POP
// end ;
36055: LD_VAR 0 1
36059: RET
// export function hHackSetLevel10 ; var i , j ; begin
36060: LD_INT 0
36062: PPUSH
36063: PPUSH
36064: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36065: LD_ADDR_VAR 0 2
36069: PUSH
36070: LD_INT 21
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PPUSH
36080: CALL_OW 69
36084: PUSH
36085: FOR_IN
36086: IFFALSE 36138
// if IsSelected ( i ) then
36088: LD_VAR 0 2
36092: PPUSH
36093: CALL_OW 306
36097: IFFALSE 36136
// begin for j := 1 to 4 do
36099: LD_ADDR_VAR 0 3
36103: PUSH
36104: DOUBLE
36105: LD_INT 1
36107: DEC
36108: ST_TO_ADDR
36109: LD_INT 4
36111: PUSH
36112: FOR_TO
36113: IFFALSE 36134
// SetSkill ( i , j , 10 ) ;
36115: LD_VAR 0 2
36119: PPUSH
36120: LD_VAR 0 3
36124: PPUSH
36125: LD_INT 10
36127: PPUSH
36128: CALL_OW 237
36132: GO 36112
36134: POP
36135: POP
// end ;
36136: GO 36085
36138: POP
36139: POP
// end ;
36140: LD_VAR 0 1
36144: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
36145: LD_INT 0
36147: PPUSH
36148: PPUSH
36149: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
36150: LD_ADDR_VAR 0 2
36154: PUSH
36155: LD_INT 22
36157: PUSH
36158: LD_OWVAR 2
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 21
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PPUSH
36181: CALL_OW 69
36185: PUSH
36186: FOR_IN
36187: IFFALSE 36228
// begin for j := 1 to 4 do
36189: LD_ADDR_VAR 0 3
36193: PUSH
36194: DOUBLE
36195: LD_INT 1
36197: DEC
36198: ST_TO_ADDR
36199: LD_INT 4
36201: PUSH
36202: FOR_TO
36203: IFFALSE 36224
// SetSkill ( i , j , 10 ) ;
36205: LD_VAR 0 2
36209: PPUSH
36210: LD_VAR 0 3
36214: PPUSH
36215: LD_INT 10
36217: PPUSH
36218: CALL_OW 237
36222: GO 36202
36224: POP
36225: POP
// end ;
36226: GO 36186
36228: POP
36229: POP
// end ;
36230: LD_VAR 0 1
36234: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
36235: LD_INT 0
36237: PPUSH
// uc_side := your_side ;
36238: LD_ADDR_OWVAR 20
36242: PUSH
36243: LD_OWVAR 2
36247: ST_TO_ADDR
// uc_nation := nation ;
36248: LD_ADDR_OWVAR 21
36252: PUSH
36253: LD_VAR 0 1
36257: ST_TO_ADDR
// InitHc ;
36258: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
36262: LD_INT 0
36264: PPUSH
36265: LD_VAR 0 2
36269: PPUSH
36270: LD_VAR 0 3
36274: PPUSH
36275: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
36279: CALL_OW 44
36283: PPUSH
36284: LD_INT 1
36286: PPUSH
36287: CALL_OW 51
// end ;
36291: LD_VAR 0 4
36295: RET
// export function hHackSpawnVehicle ; begin
36296: LD_INT 0
36298: PPUSH
// uc_side := your_side ;
36299: LD_ADDR_OWVAR 20
36303: PUSH
36304: LD_OWVAR 2
36308: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
36309: LD_ADDR_OWVAR 21
36313: PUSH
36314: LD_INT 1
36316: PPUSH
36317: LD_INT 3
36319: PPUSH
36320: CALL_OW 12
36324: ST_TO_ADDR
// InitVc ;
36325: CALL_OW 20
// case uc_nation of 1 :
36329: LD_OWVAR 21
36333: PUSH
36334: LD_INT 1
36336: DOUBLE
36337: EQUAL
36338: IFTRUE 36342
36340: GO 36486
36342: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
36343: LD_ADDR_OWVAR 37
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: LD_INT 2
36353: PUSH
36354: LD_INT 3
36356: PUSH
36357: LD_INT 4
36359: PUSH
36360: LD_INT 5
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 1
36372: PPUSH
36373: LD_INT 5
36375: PPUSH
36376: CALL_OW 12
36380: ARRAY
36381: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
36382: LD_ADDR_OWVAR 39
36386: PUSH
36387: LD_INT 1
36389: PPUSH
36390: LD_INT 3
36392: PPUSH
36393: CALL_OW 12
36397: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
36398: LD_ADDR_OWVAR 38
36402: PUSH
36403: LD_INT 1
36405: PUSH
36406: LD_INT 2
36408: PUSH
36409: LD_INT 3
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: PPUSH
36420: LD_INT 3
36422: PPUSH
36423: CALL_OW 12
36427: ARRAY
36428: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
36429: LD_ADDR_OWVAR 40
36433: PUSH
36434: LD_INT 2
36436: PUSH
36437: LD_INT 4
36439: PUSH
36440: LD_INT 5
36442: PUSH
36443: LD_INT 3
36445: PUSH
36446: LD_INT 7
36448: PUSH
36449: LD_INT 8
36451: PUSH
36452: LD_INT 9
36454: PUSH
36455: LD_INT 10
36457: PUSH
36458: LD_INT 6
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 1
36474: PPUSH
36475: LD_INT 9
36477: PPUSH
36478: CALL_OW 12
36482: ARRAY
36483: ST_TO_ADDR
// end ; 2 :
36484: GO 36751
36486: LD_INT 2
36488: DOUBLE
36489: EQUAL
36490: IFTRUE 36494
36492: GO 36618
36494: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
36495: LD_ADDR_OWVAR 37
36499: PUSH
36500: LD_INT 11
36502: PUSH
36503: LD_INT 12
36505: PUSH
36506: LD_INT 13
36508: PUSH
36509: LD_INT 14
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: PPUSH
36521: LD_INT 4
36523: PPUSH
36524: CALL_OW 12
36528: ARRAY
36529: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
36530: LD_ADDR_OWVAR 39
36534: PUSH
36535: LD_INT 1
36537: PPUSH
36538: LD_INT 3
36540: PPUSH
36541: CALL_OW 12
36545: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
36546: LD_ADDR_OWVAR 38
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 2
36556: PUSH
36557: LD_INT 5
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: PPUSH
36568: LD_INT 3
36570: PPUSH
36571: CALL_OW 12
36575: ARRAY
36576: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
36577: LD_ADDR_OWVAR 40
36581: PUSH
36582: LD_INT 24
36584: PUSH
36585: LD_INT 26
36587: PUSH
36588: LD_INT 27
36590: PUSH
36591: LD_INT 28
36593: PUSH
36594: LD_INT 29
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: PPUSH
36607: LD_INT 5
36609: PPUSH
36610: CALL_OW 12
36614: ARRAY
36615: ST_TO_ADDR
// end ; 3 :
36616: GO 36751
36618: LD_INT 3
36620: DOUBLE
36621: EQUAL
36622: IFTRUE 36626
36624: GO 36750
36626: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
36627: LD_ADDR_OWVAR 37
36631: PUSH
36632: LD_INT 21
36634: PUSH
36635: LD_INT 23
36637: PUSH
36638: LD_INT 22
36640: PUSH
36641: LD_INT 24
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 1
36652: PPUSH
36653: LD_INT 4
36655: PPUSH
36656: CALL_OW 12
36660: ARRAY
36661: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
36662: LD_ADDR_OWVAR 39
36666: PUSH
36667: LD_INT 1
36669: PPUSH
36670: LD_INT 3
36672: PPUSH
36673: CALL_OW 12
36677: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
36678: LD_ADDR_OWVAR 38
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: LD_INT 3
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: PPUSH
36696: LD_INT 2
36698: PPUSH
36699: CALL_OW 12
36703: ARRAY
36704: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
36705: LD_ADDR_OWVAR 40
36709: PUSH
36710: LD_INT 42
36712: PUSH
36713: LD_INT 43
36715: PUSH
36716: LD_INT 44
36718: PUSH
36719: LD_INT 46
36721: PUSH
36722: LD_INT 48
36724: PUSH
36725: LD_INT 47
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 1
36738: PPUSH
36739: LD_INT 6
36741: PPUSH
36742: CALL_OW 12
36746: ARRAY
36747: ST_TO_ADDR
// end ; end ;
36748: GO 36751
36750: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
36751: CALL_OW 45
36755: PPUSH
36756: LD_INT 1
36758: PPUSH
36759: CALL_OW 51
// end ;
36763: LD_VAR 0 1
36767: RET
// export hInvincible ; every 1 do
36768: GO 36770
36770: DISABLE
// hInvincible := [ ] ;
36771: LD_ADDR_EXP 120
36775: PUSH
36776: EMPTY
36777: ST_TO_ADDR
36778: END
// every 10 do var i ;
36779: GO 36781
36781: DISABLE
36782: LD_INT 0
36784: PPUSH
// begin enable ;
36785: ENABLE
// if not hInvincible then
36786: LD_EXP 120
36790: NOT
36791: IFFALSE 36795
// exit ;
36793: GO 36839
// for i in hInvincible do
36795: LD_ADDR_VAR 0 1
36799: PUSH
36800: LD_EXP 120
36804: PUSH
36805: FOR_IN
36806: IFFALSE 36837
// if GetLives ( i ) < 1000 then
36808: LD_VAR 0 1
36812: PPUSH
36813: CALL_OW 256
36817: PUSH
36818: LD_INT 1000
36820: LESS
36821: IFFALSE 36835
// SetLives ( i , 1000 ) ;
36823: LD_VAR 0 1
36827: PPUSH
36828: LD_INT 1000
36830: PPUSH
36831: CALL_OW 234
36835: GO 36805
36837: POP
36838: POP
// end ;
36839: PPOPN 1
36841: END
// export function hHackInvincible ; var i ; begin
36842: LD_INT 0
36844: PPUSH
36845: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36846: LD_ADDR_VAR 0 2
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: LD_INT 21
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 21
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: PPUSH
36879: CALL_OW 69
36883: PUSH
36884: FOR_IN
36885: IFFALSE 36946
// if IsSelected ( i ) then
36887: LD_VAR 0 2
36891: PPUSH
36892: CALL_OW 306
36896: IFFALSE 36944
// begin if i in hInvincible then
36898: LD_VAR 0 2
36902: PUSH
36903: LD_EXP 120
36907: IN
36908: IFFALSE 36928
// hInvincible := hInvincible diff i else
36910: LD_ADDR_EXP 120
36914: PUSH
36915: LD_EXP 120
36919: PUSH
36920: LD_VAR 0 2
36924: DIFF
36925: ST_TO_ADDR
36926: GO 36944
// hInvincible := hInvincible union i ;
36928: LD_ADDR_EXP 120
36932: PUSH
36933: LD_EXP 120
36937: PUSH
36938: LD_VAR 0 2
36942: UNION
36943: ST_TO_ADDR
// end ;
36944: GO 36884
36946: POP
36947: POP
// end ;
36948: LD_VAR 0 1
36952: RET
// export function hHackInvisible ; var i , j ; begin
36953: LD_INT 0
36955: PPUSH
36956: PPUSH
36957: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36958: LD_ADDR_VAR 0 2
36962: PUSH
36963: LD_INT 21
36965: PUSH
36966: LD_INT 1
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PPUSH
36973: CALL_OW 69
36977: PUSH
36978: FOR_IN
36979: IFFALSE 37003
// if IsSelected ( i ) then
36981: LD_VAR 0 2
36985: PPUSH
36986: CALL_OW 306
36990: IFFALSE 37001
// ComForceInvisible ( i ) ;
36992: LD_VAR 0 2
36996: PPUSH
36997: CALL_OW 496
37001: GO 36978
37003: POP
37004: POP
// end ;
37005: LD_VAR 0 1
37009: RET
// export function hHackChangeYourSide ; begin
37010: LD_INT 0
37012: PPUSH
// if your_side = 8 then
37013: LD_OWVAR 2
37017: PUSH
37018: LD_INT 8
37020: EQUAL
37021: IFFALSE 37033
// your_side := 0 else
37023: LD_ADDR_OWVAR 2
37027: PUSH
37028: LD_INT 0
37030: ST_TO_ADDR
37031: GO 37047
// your_side := your_side + 1 ;
37033: LD_ADDR_OWVAR 2
37037: PUSH
37038: LD_OWVAR 2
37042: PUSH
37043: LD_INT 1
37045: PLUS
37046: ST_TO_ADDR
// end ;
37047: LD_VAR 0 1
37051: RET
// export function hHackChangeUnitSide ; var i , j ; begin
37052: LD_INT 0
37054: PPUSH
37055: PPUSH
37056: PPUSH
// for i in all_units do
37057: LD_ADDR_VAR 0 2
37061: PUSH
37062: LD_OWVAR 3
37066: PUSH
37067: FOR_IN
37068: IFFALSE 37146
// if IsSelected ( i ) then
37070: LD_VAR 0 2
37074: PPUSH
37075: CALL_OW 306
37079: IFFALSE 37144
// begin j := GetSide ( i ) ;
37081: LD_ADDR_VAR 0 3
37085: PUSH
37086: LD_VAR 0 2
37090: PPUSH
37091: CALL_OW 255
37095: ST_TO_ADDR
// if j = 8 then
37096: LD_VAR 0 3
37100: PUSH
37101: LD_INT 8
37103: EQUAL
37104: IFFALSE 37116
// j := 0 else
37106: LD_ADDR_VAR 0 3
37110: PUSH
37111: LD_INT 0
37113: ST_TO_ADDR
37114: GO 37130
// j := j + 1 ;
37116: LD_ADDR_VAR 0 3
37120: PUSH
37121: LD_VAR 0 3
37125: PUSH
37126: LD_INT 1
37128: PLUS
37129: ST_TO_ADDR
// SetSide ( i , j ) ;
37130: LD_VAR 0 2
37134: PPUSH
37135: LD_VAR 0 3
37139: PPUSH
37140: CALL_OW 235
// end ;
37144: GO 37067
37146: POP
37147: POP
// end ;
37148: LD_VAR 0 1
37152: RET
// export function hHackFog ; begin
37153: LD_INT 0
37155: PPUSH
// FogOff ( true ) ;
37156: LD_INT 1
37158: PPUSH
37159: CALL_OW 344
// end ;
37163: LD_VAR 0 1
37167: RET
// export function hHackApeman ; begin
37168: LD_INT 0
37170: PPUSH
// uc_side := your_side ;
37171: LD_ADDR_OWVAR 20
37175: PUSH
37176: LD_OWVAR 2
37180: ST_TO_ADDR
// uc_nation := 0 ;
37181: LD_ADDR_OWVAR 21
37185: PUSH
37186: LD_INT 0
37188: ST_TO_ADDR
// hc_name :=  ;
37189: LD_ADDR_OWVAR 26
37193: PUSH
37194: LD_STRING 
37196: ST_TO_ADDR
// hc_gallery :=  ;
37197: LD_ADDR_OWVAR 33
37201: PUSH
37202: LD_STRING 
37204: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
37205: LD_ADDR_OWVAR 31
37209: PUSH
37210: LD_INT 0
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: LD_INT 0
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: ST_TO_ADDR
// hc_class := class_apeman ;
37228: LD_ADDR_OWVAR 28
37232: PUSH
37233: LD_INT 12
37235: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
37236: CALL_OW 44
37240: PPUSH
37241: LD_INT 1
37243: PPUSH
37244: CALL_OW 51
// end ;
37248: LD_VAR 0 1
37252: RET
// export function hHackBoom ; begin
37253: LD_INT 0
37255: PPUSH
// uc_side := your_side ;
37256: LD_ADDR_OWVAR 20
37260: PUSH
37261: LD_OWVAR 2
37265: ST_TO_ADDR
// uc_nation := 1 ;
37266: LD_ADDR_OWVAR 21
37270: PUSH
37271: LD_INT 1
37273: ST_TO_ADDR
// vc_chassis := us_morphling ;
37274: LD_ADDR_OWVAR 37
37278: PUSH
37279: LD_INT 5
37281: ST_TO_ADDR
// vc_engine := engine_siberite ;
37282: LD_ADDR_OWVAR 39
37286: PUSH
37287: LD_INT 3
37289: ST_TO_ADDR
// vc_control := control_computer ;
37290: LD_ADDR_OWVAR 38
37294: PUSH
37295: LD_INT 3
37297: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
37298: LD_ADDR_OWVAR 40
37302: PUSH
37303: LD_INT 8
37305: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
37306: CALL_OW 45
37310: PPUSH
37311: LD_INT 1
37313: PPUSH
37314: CALL_OW 51
// end ; end_of_file
37318: LD_VAR 0 1
37322: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37323: LD_INT 0
37325: PPUSH
37326: PPUSH
37327: PPUSH
37328: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37329: LD_VAR 0 1
37333: PPUSH
37334: CALL_OW 264
37338: PUSH
37339: LD_EXP 55
37343: EQUAL
37344: IFFALSE 37416
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37346: LD_INT 68
37348: PPUSH
37349: LD_VAR 0 1
37353: PPUSH
37354: CALL_OW 255
37358: PPUSH
37359: CALL_OW 321
37363: PUSH
37364: LD_INT 2
37366: EQUAL
37367: IFFALSE 37379
// eff := 70 else
37369: LD_ADDR_VAR 0 4
37373: PUSH
37374: LD_INT 70
37376: ST_TO_ADDR
37377: GO 37387
// eff := 30 ;
37379: LD_ADDR_VAR 0 4
37383: PUSH
37384: LD_INT 30
37386: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37387: LD_VAR 0 1
37391: PPUSH
37392: CALL_OW 250
37396: PPUSH
37397: LD_VAR 0 1
37401: PPUSH
37402: CALL_OW 251
37406: PPUSH
37407: LD_VAR 0 4
37411: PPUSH
37412: CALL_OW 495
// end ; end ;
37416: LD_VAR 0 2
37420: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37421: LD_INT 0
37423: PPUSH
// end ;
37424: LD_VAR 0 4
37428: RET
// export function SOS_Command ( cmd ) ; begin
37429: LD_INT 0
37431: PPUSH
// end ;
37432: LD_VAR 0 2
37436: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37437: LD_INT 0
37439: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37440: LD_VAR 0 1
37444: PUSH
37445: LD_INT 254
37447: EQUAL
37448: PUSH
37449: LD_VAR 0 2
37453: PPUSH
37454: CALL_OW 264
37458: PUSH
37459: LD_EXP 53
37463: EQUAL
37464: AND
37465: PUSH
37466: LD_VAR 0 3
37470: PPUSH
37471: CALL_OW 263
37475: PUSH
37476: LD_INT 3
37478: EQUAL
37479: AND
37480: IFFALSE 37496
// HackDestroyVehicle ( unit , selectedUnit ) ;
37482: LD_VAR 0 2
37486: PPUSH
37487: LD_VAR 0 3
37491: PPUSH
37492: CALL 39005 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37496: LD_VAR 0 1
37500: PUSH
37501: LD_INT 255
37503: EQUAL
37504: PUSH
37505: LD_VAR 0 2
37509: PPUSH
37510: CALL_OW 264
37514: PUSH
37515: LD_INT 14
37517: PUSH
37518: LD_INT 53
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: IN
37525: AND
37526: PUSH
37527: LD_VAR 0 4
37531: PPUSH
37532: LD_VAR 0 5
37536: PPUSH
37537: CALL_OW 488
37541: AND
37542: IFFALSE 37566
// CutTreeXYR ( unit , x , y , 12 ) ;
37544: LD_VAR 0 2
37548: PPUSH
37549: LD_VAR 0 4
37553: PPUSH
37554: LD_VAR 0 5
37558: PPUSH
37559: LD_INT 12
37561: PPUSH
37562: CALL 37571 0 4
// end ;
37566: LD_VAR 0 6
37570: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37571: LD_INT 0
37573: PPUSH
37574: PPUSH
37575: PPUSH
37576: PPUSH
37577: PPUSH
37578: PPUSH
37579: PPUSH
37580: PPUSH
37581: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
37582: LD_VAR 0 1
37586: NOT
37587: PUSH
37588: LD_VAR 0 2
37592: PPUSH
37593: LD_VAR 0 3
37597: PPUSH
37598: CALL_OW 488
37602: NOT
37603: OR
37604: PUSH
37605: LD_VAR 0 4
37609: NOT
37610: OR
37611: IFFALSE 37615
// exit ;
37613: GO 37955
// list := [ ] ;
37615: LD_ADDR_VAR 0 13
37619: PUSH
37620: EMPTY
37621: ST_TO_ADDR
// if x - r < 0 then
37622: LD_VAR 0 2
37626: PUSH
37627: LD_VAR 0 4
37631: MINUS
37632: PUSH
37633: LD_INT 0
37635: LESS
37636: IFFALSE 37648
// min_x := 0 else
37638: LD_ADDR_VAR 0 7
37642: PUSH
37643: LD_INT 0
37645: ST_TO_ADDR
37646: GO 37664
// min_x := x - r ;
37648: LD_ADDR_VAR 0 7
37652: PUSH
37653: LD_VAR 0 2
37657: PUSH
37658: LD_VAR 0 4
37662: MINUS
37663: ST_TO_ADDR
// if y - r < 0 then
37664: LD_VAR 0 3
37668: PUSH
37669: LD_VAR 0 4
37673: MINUS
37674: PUSH
37675: LD_INT 0
37677: LESS
37678: IFFALSE 37690
// min_y := 0 else
37680: LD_ADDR_VAR 0 8
37684: PUSH
37685: LD_INT 0
37687: ST_TO_ADDR
37688: GO 37706
// min_y := y - r ;
37690: LD_ADDR_VAR 0 8
37694: PUSH
37695: LD_VAR 0 3
37699: PUSH
37700: LD_VAR 0 4
37704: MINUS
37705: ST_TO_ADDR
// max_x := x + r ;
37706: LD_ADDR_VAR 0 9
37710: PUSH
37711: LD_VAR 0 2
37715: PUSH
37716: LD_VAR 0 4
37720: PLUS
37721: ST_TO_ADDR
// max_y := y + r ;
37722: LD_ADDR_VAR 0 10
37726: PUSH
37727: LD_VAR 0 3
37731: PUSH
37732: LD_VAR 0 4
37736: PLUS
37737: ST_TO_ADDR
// for _x = min_x to max_x do
37738: LD_ADDR_VAR 0 11
37742: PUSH
37743: DOUBLE
37744: LD_VAR 0 7
37748: DEC
37749: ST_TO_ADDR
37750: LD_VAR 0 9
37754: PUSH
37755: FOR_TO
37756: IFFALSE 37873
// for _y = min_y to max_y do
37758: LD_ADDR_VAR 0 12
37762: PUSH
37763: DOUBLE
37764: LD_VAR 0 8
37768: DEC
37769: ST_TO_ADDR
37770: LD_VAR 0 10
37774: PUSH
37775: FOR_TO
37776: IFFALSE 37869
// begin if not ValidHex ( _x , _y ) then
37778: LD_VAR 0 11
37782: PPUSH
37783: LD_VAR 0 12
37787: PPUSH
37788: CALL_OW 488
37792: NOT
37793: IFFALSE 37797
// continue ;
37795: GO 37775
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37797: LD_VAR 0 11
37801: PPUSH
37802: LD_VAR 0 12
37806: PPUSH
37807: CALL_OW 351
37811: PUSH
37812: LD_VAR 0 11
37816: PPUSH
37817: LD_VAR 0 12
37821: PPUSH
37822: CALL_OW 554
37826: AND
37827: IFFALSE 37867
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37829: LD_ADDR_VAR 0 13
37833: PUSH
37834: LD_VAR 0 13
37838: PPUSH
37839: LD_VAR 0 13
37843: PUSH
37844: LD_INT 1
37846: PLUS
37847: PPUSH
37848: LD_VAR 0 11
37852: PUSH
37853: LD_VAR 0 12
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PPUSH
37862: CALL_OW 2
37866: ST_TO_ADDR
// end ;
37867: GO 37775
37869: POP
37870: POP
37871: GO 37755
37873: POP
37874: POP
// if not list then
37875: LD_VAR 0 13
37879: NOT
37880: IFFALSE 37884
// exit ;
37882: GO 37955
// for i in list do
37884: LD_ADDR_VAR 0 6
37888: PUSH
37889: LD_VAR 0 13
37893: PUSH
37894: FOR_IN
37895: IFFALSE 37953
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37897: LD_VAR 0 1
37901: PPUSH
37902: LD_STRING M
37904: PUSH
37905: LD_VAR 0 6
37909: PUSH
37910: LD_INT 1
37912: ARRAY
37913: PUSH
37914: LD_VAR 0 6
37918: PUSH
37919: LD_INT 2
37921: ARRAY
37922: PUSH
37923: LD_INT 0
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: PUSH
37944: EMPTY
37945: LIST
37946: PPUSH
37947: CALL_OW 447
37951: GO 37894
37953: POP
37954: POP
// end ;
37955: LD_VAR 0 5
37959: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37960: LD_EXP 121
37964: NOT
37965: IFFALSE 38015
37967: GO 37969
37969: DISABLE
// begin initHack := true ;
37970: LD_ADDR_EXP 121
37974: PUSH
37975: LD_INT 1
37977: ST_TO_ADDR
// hackTanks := [ ] ;
37978: LD_ADDR_EXP 122
37982: PUSH
37983: EMPTY
37984: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37985: LD_ADDR_EXP 123
37989: PUSH
37990: EMPTY
37991: ST_TO_ADDR
// hackLimit := 3 ;
37992: LD_ADDR_EXP 124
37996: PUSH
37997: LD_INT 3
37999: ST_TO_ADDR
// hackDist := 12 ;
38000: LD_ADDR_EXP 125
38004: PUSH
38005: LD_INT 12
38007: ST_TO_ADDR
// hackCounter := [ ] ;
38008: LD_ADDR_EXP 126
38012: PUSH
38013: EMPTY
38014: ST_TO_ADDR
// end ;
38015: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38016: LD_EXP 121
38020: PUSH
38021: LD_INT 34
38023: PUSH
38024: LD_EXP 53
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PPUSH
38033: CALL_OW 69
38037: AND
38038: IFFALSE 38293
38040: GO 38042
38042: DISABLE
38043: LD_INT 0
38045: PPUSH
38046: PPUSH
// begin enable ;
38047: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38048: LD_ADDR_VAR 0 1
38052: PUSH
38053: LD_INT 34
38055: PUSH
38056: LD_EXP 53
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PPUSH
38065: CALL_OW 69
38069: PUSH
38070: FOR_IN
38071: IFFALSE 38291
// begin if not i in hackTanks then
38073: LD_VAR 0 1
38077: PUSH
38078: LD_EXP 122
38082: IN
38083: NOT
38084: IFFALSE 38167
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38086: LD_ADDR_EXP 122
38090: PUSH
38091: LD_EXP 122
38095: PPUSH
38096: LD_EXP 122
38100: PUSH
38101: LD_INT 1
38103: PLUS
38104: PPUSH
38105: LD_VAR 0 1
38109: PPUSH
38110: CALL_OW 1
38114: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38115: LD_ADDR_EXP 123
38119: PUSH
38120: LD_EXP 123
38124: PPUSH
38125: LD_EXP 123
38129: PUSH
38130: LD_INT 1
38132: PLUS
38133: PPUSH
38134: EMPTY
38135: PPUSH
38136: CALL_OW 1
38140: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38141: LD_ADDR_EXP 126
38145: PUSH
38146: LD_EXP 126
38150: PPUSH
38151: LD_EXP 126
38155: PUSH
38156: LD_INT 1
38158: PLUS
38159: PPUSH
38160: EMPTY
38161: PPUSH
38162: CALL_OW 1
38166: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38167: LD_VAR 0 1
38171: PPUSH
38172: CALL_OW 302
38176: NOT
38177: IFFALSE 38190
// begin HackUnlinkAll ( i ) ;
38179: LD_VAR 0 1
38183: PPUSH
38184: CALL 38296 0 1
// continue ;
38188: GO 38070
// end ; HackCheckCapturedStatus ( i ) ;
38190: LD_VAR 0 1
38194: PPUSH
38195: CALL 38739 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38199: LD_ADDR_VAR 0 2
38203: PUSH
38204: LD_INT 81
38206: PUSH
38207: LD_VAR 0 1
38211: PPUSH
38212: CALL_OW 255
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 33
38223: PUSH
38224: LD_INT 3
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 91
38233: PUSH
38234: LD_VAR 0 1
38238: PUSH
38239: LD_EXP 125
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 50
38251: PUSH
38252: EMPTY
38253: LIST
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: PPUSH
38261: CALL_OW 69
38265: ST_TO_ADDR
// if not tmp then
38266: LD_VAR 0 2
38270: NOT
38271: IFFALSE 38275
// continue ;
38273: GO 38070
// HackLink ( i , tmp ) ;
38275: LD_VAR 0 1
38279: PPUSH
38280: LD_VAR 0 2
38284: PPUSH
38285: CALL 38432 0 2
// end ;
38289: GO 38070
38291: POP
38292: POP
// end ;
38293: PPOPN 2
38295: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38296: LD_INT 0
38298: PPUSH
38299: PPUSH
38300: PPUSH
// if not hack in hackTanks then
38301: LD_VAR 0 1
38305: PUSH
38306: LD_EXP 122
38310: IN
38311: NOT
38312: IFFALSE 38316
// exit ;
38314: GO 38427
// index := GetElementIndex ( hackTanks , hack ) ;
38316: LD_ADDR_VAR 0 4
38320: PUSH
38321: LD_EXP 122
38325: PPUSH
38326: LD_VAR 0 1
38330: PPUSH
38331: CALL 43847 0 2
38335: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38336: LD_EXP 123
38340: PUSH
38341: LD_VAR 0 4
38345: ARRAY
38346: IFFALSE 38427
// begin for i in hackTanksCaptured [ index ] do
38348: LD_ADDR_VAR 0 3
38352: PUSH
38353: LD_EXP 123
38357: PUSH
38358: LD_VAR 0 4
38362: ARRAY
38363: PUSH
38364: FOR_IN
38365: IFFALSE 38391
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38367: LD_VAR 0 3
38371: PUSH
38372: LD_INT 1
38374: ARRAY
38375: PPUSH
38376: LD_VAR 0 3
38380: PUSH
38381: LD_INT 2
38383: ARRAY
38384: PPUSH
38385: CALL_OW 235
38389: GO 38364
38391: POP
38392: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38393: LD_ADDR_EXP 123
38397: PUSH
38398: LD_EXP 123
38402: PPUSH
38403: LD_VAR 0 4
38407: PPUSH
38408: EMPTY
38409: PPUSH
38410: CALL_OW 1
38414: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38415: LD_VAR 0 1
38419: PPUSH
38420: LD_INT 0
38422: PPUSH
38423: CALL_OW 505
// end ; end ;
38427: LD_VAR 0 2
38431: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38432: LD_INT 0
38434: PPUSH
38435: PPUSH
38436: PPUSH
// if not hack in hackTanks or not vehicles then
38437: LD_VAR 0 1
38441: PUSH
38442: LD_EXP 122
38446: IN
38447: NOT
38448: PUSH
38449: LD_VAR 0 2
38453: NOT
38454: OR
38455: IFFALSE 38459
// exit ;
38457: GO 38734
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38459: LD_ADDR_VAR 0 2
38463: PUSH
38464: LD_VAR 0 1
38468: PPUSH
38469: LD_VAR 0 2
38473: PPUSH
38474: LD_INT 1
38476: PPUSH
38477: LD_INT 1
38479: PPUSH
38480: CALL 44497 0 4
38484: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38485: LD_ADDR_VAR 0 5
38489: PUSH
38490: LD_EXP 122
38494: PPUSH
38495: LD_VAR 0 1
38499: PPUSH
38500: CALL 43847 0 2
38504: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38505: LD_EXP 123
38509: PUSH
38510: LD_VAR 0 5
38514: ARRAY
38515: PUSH
38516: LD_EXP 124
38520: LESS
38521: IFFALSE 38710
// begin for i := 1 to vehicles do
38523: LD_ADDR_VAR 0 4
38527: PUSH
38528: DOUBLE
38529: LD_INT 1
38531: DEC
38532: ST_TO_ADDR
38533: LD_VAR 0 2
38537: PUSH
38538: FOR_TO
38539: IFFALSE 38708
// begin if hackTanksCaptured [ index ] = hackLimit then
38541: LD_EXP 123
38545: PUSH
38546: LD_VAR 0 5
38550: ARRAY
38551: PUSH
38552: LD_EXP 124
38556: EQUAL
38557: IFFALSE 38561
// break ;
38559: GO 38708
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38561: LD_ADDR_EXP 126
38565: PUSH
38566: LD_EXP 126
38570: PPUSH
38571: LD_VAR 0 5
38575: PPUSH
38576: LD_EXP 126
38580: PUSH
38581: LD_VAR 0 5
38585: ARRAY
38586: PUSH
38587: LD_INT 1
38589: PLUS
38590: PPUSH
38591: CALL_OW 1
38595: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38596: LD_ADDR_EXP 123
38600: PUSH
38601: LD_EXP 123
38605: PPUSH
38606: LD_VAR 0 5
38610: PUSH
38611: LD_EXP 123
38615: PUSH
38616: LD_VAR 0 5
38620: ARRAY
38621: PUSH
38622: LD_INT 1
38624: PLUS
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PPUSH
38630: LD_VAR 0 2
38634: PUSH
38635: LD_VAR 0 4
38639: ARRAY
38640: PUSH
38641: LD_VAR 0 2
38645: PUSH
38646: LD_VAR 0 4
38650: ARRAY
38651: PPUSH
38652: CALL_OW 255
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PPUSH
38661: CALL 44062 0 3
38665: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38666: LD_VAR 0 2
38670: PUSH
38671: LD_VAR 0 4
38675: ARRAY
38676: PPUSH
38677: LD_VAR 0 1
38681: PPUSH
38682: CALL_OW 255
38686: PPUSH
38687: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38691: LD_VAR 0 2
38695: PUSH
38696: LD_VAR 0 4
38700: ARRAY
38701: PPUSH
38702: CALL_OW 141
// end ;
38706: GO 38538
38708: POP
38709: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38710: LD_VAR 0 1
38714: PPUSH
38715: LD_EXP 123
38719: PUSH
38720: LD_VAR 0 5
38724: ARRAY
38725: PUSH
38726: LD_INT 0
38728: PLUS
38729: PPUSH
38730: CALL_OW 505
// end ;
38734: LD_VAR 0 3
38738: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38739: LD_INT 0
38741: PPUSH
38742: PPUSH
38743: PPUSH
38744: PPUSH
// if not hack in hackTanks then
38745: LD_VAR 0 1
38749: PUSH
38750: LD_EXP 122
38754: IN
38755: NOT
38756: IFFALSE 38760
// exit ;
38758: GO 39000
// index := GetElementIndex ( hackTanks , hack ) ;
38760: LD_ADDR_VAR 0 4
38764: PUSH
38765: LD_EXP 122
38769: PPUSH
38770: LD_VAR 0 1
38774: PPUSH
38775: CALL 43847 0 2
38779: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38780: LD_ADDR_VAR 0 3
38784: PUSH
38785: DOUBLE
38786: LD_EXP 123
38790: PUSH
38791: LD_VAR 0 4
38795: ARRAY
38796: INC
38797: ST_TO_ADDR
38798: LD_INT 1
38800: PUSH
38801: FOR_DOWNTO
38802: IFFALSE 38974
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38804: LD_ADDR_VAR 0 5
38808: PUSH
38809: LD_EXP 123
38813: PUSH
38814: LD_VAR 0 4
38818: ARRAY
38819: PUSH
38820: LD_VAR 0 3
38824: ARRAY
38825: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38826: LD_VAR 0 5
38830: PUSH
38831: LD_INT 1
38833: ARRAY
38834: PPUSH
38835: CALL_OW 302
38839: NOT
38840: PUSH
38841: LD_VAR 0 5
38845: PUSH
38846: LD_INT 1
38848: ARRAY
38849: PPUSH
38850: CALL_OW 255
38854: PUSH
38855: LD_VAR 0 1
38859: PPUSH
38860: CALL_OW 255
38864: NONEQUAL
38865: OR
38866: IFFALSE 38972
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38868: LD_VAR 0 5
38872: PUSH
38873: LD_INT 1
38875: ARRAY
38876: PPUSH
38877: CALL_OW 305
38881: PUSH
38882: LD_VAR 0 5
38886: PUSH
38887: LD_INT 1
38889: ARRAY
38890: PPUSH
38891: CALL_OW 255
38895: PUSH
38896: LD_VAR 0 1
38900: PPUSH
38901: CALL_OW 255
38905: EQUAL
38906: AND
38907: IFFALSE 38931
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38909: LD_VAR 0 5
38913: PUSH
38914: LD_INT 1
38916: ARRAY
38917: PPUSH
38918: LD_VAR 0 5
38922: PUSH
38923: LD_INT 2
38925: ARRAY
38926: PPUSH
38927: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38931: LD_ADDR_EXP 123
38935: PUSH
38936: LD_EXP 123
38940: PPUSH
38941: LD_VAR 0 4
38945: PPUSH
38946: LD_EXP 123
38950: PUSH
38951: LD_VAR 0 4
38955: ARRAY
38956: PPUSH
38957: LD_VAR 0 3
38961: PPUSH
38962: CALL_OW 3
38966: PPUSH
38967: CALL_OW 1
38971: ST_TO_ADDR
// end ; end ;
38972: GO 38801
38974: POP
38975: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38976: LD_VAR 0 1
38980: PPUSH
38981: LD_EXP 123
38985: PUSH
38986: LD_VAR 0 4
38990: ARRAY
38991: PUSH
38992: LD_INT 0
38994: PLUS
38995: PPUSH
38996: CALL_OW 505
// end ;
39000: LD_VAR 0 2
39004: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39005: LD_INT 0
39007: PPUSH
39008: PPUSH
39009: PPUSH
39010: PPUSH
// if not hack in hackTanks then
39011: LD_VAR 0 1
39015: PUSH
39016: LD_EXP 122
39020: IN
39021: NOT
39022: IFFALSE 39026
// exit ;
39024: GO 39111
// index := GetElementIndex ( hackTanks , hack ) ;
39026: LD_ADDR_VAR 0 5
39030: PUSH
39031: LD_EXP 122
39035: PPUSH
39036: LD_VAR 0 1
39040: PPUSH
39041: CALL 43847 0 2
39045: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39046: LD_ADDR_VAR 0 4
39050: PUSH
39051: DOUBLE
39052: LD_INT 1
39054: DEC
39055: ST_TO_ADDR
39056: LD_EXP 123
39060: PUSH
39061: LD_VAR 0 5
39065: ARRAY
39066: PUSH
39067: FOR_TO
39068: IFFALSE 39109
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39070: LD_EXP 123
39074: PUSH
39075: LD_VAR 0 5
39079: ARRAY
39080: PUSH
39081: LD_VAR 0 4
39085: ARRAY
39086: PUSH
39087: LD_INT 1
39089: ARRAY
39090: PUSH
39091: LD_VAR 0 2
39095: EQUAL
39096: IFFALSE 39107
// KillUnit ( vehicle ) ;
39098: LD_VAR 0 2
39102: PPUSH
39103: CALL_OW 66
39107: GO 39067
39109: POP
39110: POP
// end ; end_of_file
39111: LD_VAR 0 3
39115: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39116: LD_INT 0
39118: PPUSH
39119: PPUSH
// if exist_mode then
39120: LD_VAR 0 2
39124: IFFALSE 39149
// unit := CreateCharacter ( prefix & ident ) else
39126: LD_ADDR_VAR 0 5
39130: PUSH
39131: LD_VAR 0 3
39135: PUSH
39136: LD_VAR 0 1
39140: STR
39141: PPUSH
39142: CALL_OW 34
39146: ST_TO_ADDR
39147: GO 39164
// unit := NewCharacter ( ident ) ;
39149: LD_ADDR_VAR 0 5
39153: PUSH
39154: LD_VAR 0 1
39158: PPUSH
39159: CALL_OW 25
39163: ST_TO_ADDR
// result := unit ;
39164: LD_ADDR_VAR 0 4
39168: PUSH
39169: LD_VAR 0 5
39173: ST_TO_ADDR
// end ;
39174: LD_VAR 0 4
39178: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39179: LD_INT 0
39181: PPUSH
39182: PPUSH
// if not side or not nation then
39183: LD_VAR 0 1
39187: NOT
39188: PUSH
39189: LD_VAR 0 2
39193: NOT
39194: OR
39195: IFFALSE 39199
// exit ;
39197: GO 39963
// case nation of nation_american :
39199: LD_VAR 0 2
39203: PUSH
39204: LD_INT 1
39206: DOUBLE
39207: EQUAL
39208: IFTRUE 39212
39210: GO 39426
39212: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39213: LD_ADDR_VAR 0 4
39217: PUSH
39218: LD_INT 35
39220: PUSH
39221: LD_INT 45
39223: PUSH
39224: LD_INT 46
39226: PUSH
39227: LD_INT 47
39229: PUSH
39230: LD_INT 82
39232: PUSH
39233: LD_INT 83
39235: PUSH
39236: LD_INT 84
39238: PUSH
39239: LD_INT 85
39241: PUSH
39242: LD_INT 86
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: LD_INT 2
39250: PUSH
39251: LD_INT 6
39253: PUSH
39254: LD_INT 15
39256: PUSH
39257: LD_INT 16
39259: PUSH
39260: LD_INT 7
39262: PUSH
39263: LD_INT 12
39265: PUSH
39266: LD_INT 13
39268: PUSH
39269: LD_INT 10
39271: PUSH
39272: LD_INT 14
39274: PUSH
39275: LD_INT 20
39277: PUSH
39278: LD_INT 21
39280: PUSH
39281: LD_INT 22
39283: PUSH
39284: LD_INT 25
39286: PUSH
39287: LD_INT 32
39289: PUSH
39290: LD_INT 27
39292: PUSH
39293: LD_INT 36
39295: PUSH
39296: LD_INT 69
39298: PUSH
39299: LD_INT 39
39301: PUSH
39302: LD_INT 34
39304: PUSH
39305: LD_INT 40
39307: PUSH
39308: LD_INT 48
39310: PUSH
39311: LD_INT 49
39313: PUSH
39314: LD_INT 50
39316: PUSH
39317: LD_INT 51
39319: PUSH
39320: LD_INT 52
39322: PUSH
39323: LD_INT 53
39325: PUSH
39326: LD_INT 54
39328: PUSH
39329: LD_INT 55
39331: PUSH
39332: LD_INT 56
39334: PUSH
39335: LD_INT 57
39337: PUSH
39338: LD_INT 58
39340: PUSH
39341: LD_INT 59
39343: PUSH
39344: LD_INT 60
39346: PUSH
39347: LD_INT 61
39349: PUSH
39350: LD_INT 62
39352: PUSH
39353: LD_INT 80
39355: PUSH
39356: LD_INT 82
39358: PUSH
39359: LD_INT 83
39361: PUSH
39362: LD_INT 84
39364: PUSH
39365: LD_INT 85
39367: PUSH
39368: LD_INT 86
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: ST_TO_ADDR
39424: GO 39887
39426: LD_INT 2
39428: DOUBLE
39429: EQUAL
39430: IFTRUE 39434
39432: GO 39656
39434: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
39435: LD_ADDR_VAR 0 4
39439: PUSH
39440: LD_INT 35
39442: PUSH
39443: LD_INT 45
39445: PUSH
39446: LD_INT 46
39448: PUSH
39449: LD_INT 47
39451: PUSH
39452: LD_INT 82
39454: PUSH
39455: LD_INT 83
39457: PUSH
39458: LD_INT 84
39460: PUSH
39461: LD_INT 85
39463: PUSH
39464: LD_INT 87
39466: PUSH
39467: LD_INT 70
39469: PUSH
39470: LD_INT 1
39472: PUSH
39473: LD_INT 11
39475: PUSH
39476: LD_INT 3
39478: PUSH
39479: LD_INT 4
39481: PUSH
39482: LD_INT 5
39484: PUSH
39485: LD_INT 6
39487: PUSH
39488: LD_INT 15
39490: PUSH
39491: LD_INT 18
39493: PUSH
39494: LD_INT 7
39496: PUSH
39497: LD_INT 17
39499: PUSH
39500: LD_INT 8
39502: PUSH
39503: LD_INT 20
39505: PUSH
39506: LD_INT 21
39508: PUSH
39509: LD_INT 22
39511: PUSH
39512: LD_INT 72
39514: PUSH
39515: LD_INT 26
39517: PUSH
39518: LD_INT 69
39520: PUSH
39521: LD_INT 39
39523: PUSH
39524: LD_INT 40
39526: PUSH
39527: LD_INT 41
39529: PUSH
39530: LD_INT 42
39532: PUSH
39533: LD_INT 43
39535: PUSH
39536: LD_INT 48
39538: PUSH
39539: LD_INT 49
39541: PUSH
39542: LD_INT 50
39544: PUSH
39545: LD_INT 51
39547: PUSH
39548: LD_INT 52
39550: PUSH
39551: LD_INT 53
39553: PUSH
39554: LD_INT 54
39556: PUSH
39557: LD_INT 55
39559: PUSH
39560: LD_INT 56
39562: PUSH
39563: LD_INT 60
39565: PUSH
39566: LD_INT 61
39568: PUSH
39569: LD_INT 62
39571: PUSH
39572: LD_INT 66
39574: PUSH
39575: LD_INT 67
39577: PUSH
39578: LD_INT 68
39580: PUSH
39581: LD_INT 81
39583: PUSH
39584: LD_INT 82
39586: PUSH
39587: LD_INT 83
39589: PUSH
39590: LD_INT 84
39592: PUSH
39593: LD_INT 85
39595: PUSH
39596: LD_INT 87
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: ST_TO_ADDR
39654: GO 39887
39656: LD_INT 3
39658: DOUBLE
39659: EQUAL
39660: IFTRUE 39664
39662: GO 39886
39664: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39665: LD_ADDR_VAR 0 4
39669: PUSH
39670: LD_INT 46
39672: PUSH
39673: LD_INT 47
39675: PUSH
39676: LD_INT 1
39678: PUSH
39679: LD_INT 2
39681: PUSH
39682: LD_INT 82
39684: PUSH
39685: LD_INT 83
39687: PUSH
39688: LD_INT 84
39690: PUSH
39691: LD_INT 85
39693: PUSH
39694: LD_INT 86
39696: PUSH
39697: LD_INT 11
39699: PUSH
39700: LD_INT 9
39702: PUSH
39703: LD_INT 20
39705: PUSH
39706: LD_INT 19
39708: PUSH
39709: LD_INT 21
39711: PUSH
39712: LD_INT 24
39714: PUSH
39715: LD_INT 22
39717: PUSH
39718: LD_INT 25
39720: PUSH
39721: LD_INT 28
39723: PUSH
39724: LD_INT 29
39726: PUSH
39727: LD_INT 30
39729: PUSH
39730: LD_INT 31
39732: PUSH
39733: LD_INT 37
39735: PUSH
39736: LD_INT 38
39738: PUSH
39739: LD_INT 32
39741: PUSH
39742: LD_INT 27
39744: PUSH
39745: LD_INT 33
39747: PUSH
39748: LD_INT 69
39750: PUSH
39751: LD_INT 39
39753: PUSH
39754: LD_INT 34
39756: PUSH
39757: LD_INT 40
39759: PUSH
39760: LD_INT 71
39762: PUSH
39763: LD_INT 23
39765: PUSH
39766: LD_INT 44
39768: PUSH
39769: LD_INT 48
39771: PUSH
39772: LD_INT 49
39774: PUSH
39775: LD_INT 50
39777: PUSH
39778: LD_INT 51
39780: PUSH
39781: LD_INT 52
39783: PUSH
39784: LD_INT 53
39786: PUSH
39787: LD_INT 54
39789: PUSH
39790: LD_INT 55
39792: PUSH
39793: LD_INT 56
39795: PUSH
39796: LD_INT 57
39798: PUSH
39799: LD_INT 58
39801: PUSH
39802: LD_INT 59
39804: PUSH
39805: LD_INT 63
39807: PUSH
39808: LD_INT 64
39810: PUSH
39811: LD_INT 65
39813: PUSH
39814: LD_INT 82
39816: PUSH
39817: LD_INT 83
39819: PUSH
39820: LD_INT 84
39822: PUSH
39823: LD_INT 85
39825: PUSH
39826: LD_INT 86
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: ST_TO_ADDR
39884: GO 39887
39886: POP
// if state > - 1 and state < 3 then
39887: LD_VAR 0 3
39891: PUSH
39892: LD_INT 1
39894: NEG
39895: GREATER
39896: PUSH
39897: LD_VAR 0 3
39901: PUSH
39902: LD_INT 3
39904: LESS
39905: AND
39906: IFFALSE 39963
// for i in result do
39908: LD_ADDR_VAR 0 5
39912: PUSH
39913: LD_VAR 0 4
39917: PUSH
39918: FOR_IN
39919: IFFALSE 39961
// if GetTech ( i , side ) <> state then
39921: LD_VAR 0 5
39925: PPUSH
39926: LD_VAR 0 1
39930: PPUSH
39931: CALL_OW 321
39935: PUSH
39936: LD_VAR 0 3
39940: NONEQUAL
39941: IFFALSE 39959
// result := result diff i ;
39943: LD_ADDR_VAR 0 4
39947: PUSH
39948: LD_VAR 0 4
39952: PUSH
39953: LD_VAR 0 5
39957: DIFF
39958: ST_TO_ADDR
39959: GO 39918
39961: POP
39962: POP
// end ;
39963: LD_VAR 0 4
39967: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39968: LD_INT 0
39970: PPUSH
39971: PPUSH
39972: PPUSH
// result := true ;
39973: LD_ADDR_VAR 0 3
39977: PUSH
39978: LD_INT 1
39980: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39981: LD_ADDR_VAR 0 5
39985: PUSH
39986: LD_VAR 0 2
39990: PPUSH
39991: CALL_OW 480
39995: ST_TO_ADDR
// if not tmp then
39996: LD_VAR 0 5
40000: NOT
40001: IFFALSE 40005
// exit ;
40003: GO 40054
// for i in tmp do
40005: LD_ADDR_VAR 0 4
40009: PUSH
40010: LD_VAR 0 5
40014: PUSH
40015: FOR_IN
40016: IFFALSE 40052
// if GetTech ( i , side ) <> state_researched then
40018: LD_VAR 0 4
40022: PPUSH
40023: LD_VAR 0 1
40027: PPUSH
40028: CALL_OW 321
40032: PUSH
40033: LD_INT 2
40035: NONEQUAL
40036: IFFALSE 40050
// begin result := false ;
40038: LD_ADDR_VAR 0 3
40042: PUSH
40043: LD_INT 0
40045: ST_TO_ADDR
// exit ;
40046: POP
40047: POP
40048: GO 40054
// end ;
40050: GO 40015
40052: POP
40053: POP
// end ;
40054: LD_VAR 0 3
40058: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40059: LD_INT 0
40061: PPUSH
40062: PPUSH
40063: PPUSH
40064: PPUSH
40065: PPUSH
40066: PPUSH
40067: PPUSH
40068: PPUSH
40069: PPUSH
40070: PPUSH
40071: PPUSH
40072: PPUSH
40073: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40074: LD_VAR 0 1
40078: NOT
40079: PUSH
40080: LD_VAR 0 1
40084: PPUSH
40085: CALL_OW 257
40089: PUSH
40090: LD_INT 9
40092: NONEQUAL
40093: OR
40094: IFFALSE 40098
// exit ;
40096: GO 40671
// side := GetSide ( unit ) ;
40098: LD_ADDR_VAR 0 9
40102: PUSH
40103: LD_VAR 0 1
40107: PPUSH
40108: CALL_OW 255
40112: ST_TO_ADDR
// tech_space := tech_spacanom ;
40113: LD_ADDR_VAR 0 12
40117: PUSH
40118: LD_INT 29
40120: ST_TO_ADDR
// tech_time := tech_taurad ;
40121: LD_ADDR_VAR 0 13
40125: PUSH
40126: LD_INT 28
40128: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40129: LD_ADDR_VAR 0 11
40133: PUSH
40134: LD_VAR 0 1
40138: PPUSH
40139: CALL_OW 310
40143: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40144: LD_VAR 0 11
40148: PPUSH
40149: CALL_OW 247
40153: PUSH
40154: LD_INT 2
40156: EQUAL
40157: IFFALSE 40161
// exit ;
40159: GO 40671
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40161: LD_ADDR_VAR 0 8
40165: PUSH
40166: LD_INT 81
40168: PUSH
40169: LD_VAR 0 9
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 3
40180: PUSH
40181: LD_INT 21
40183: PUSH
40184: LD_INT 3
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PPUSH
40199: CALL_OW 69
40203: ST_TO_ADDR
// if not tmp then
40204: LD_VAR 0 8
40208: NOT
40209: IFFALSE 40213
// exit ;
40211: GO 40671
// if in_unit then
40213: LD_VAR 0 11
40217: IFFALSE 40241
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40219: LD_ADDR_VAR 0 10
40223: PUSH
40224: LD_VAR 0 8
40228: PPUSH
40229: LD_VAR 0 11
40233: PPUSH
40234: CALL_OW 74
40238: ST_TO_ADDR
40239: GO 40261
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40241: LD_ADDR_VAR 0 10
40245: PUSH
40246: LD_VAR 0 8
40250: PPUSH
40251: LD_VAR 0 1
40255: PPUSH
40256: CALL_OW 74
40260: ST_TO_ADDR
// if not enemy then
40261: LD_VAR 0 10
40265: NOT
40266: IFFALSE 40270
// exit ;
40268: GO 40671
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40270: LD_VAR 0 11
40274: PUSH
40275: LD_VAR 0 11
40279: PPUSH
40280: LD_VAR 0 10
40284: PPUSH
40285: CALL_OW 296
40289: PUSH
40290: LD_INT 13
40292: GREATER
40293: AND
40294: PUSH
40295: LD_VAR 0 1
40299: PPUSH
40300: LD_VAR 0 10
40304: PPUSH
40305: CALL_OW 296
40309: PUSH
40310: LD_INT 12
40312: GREATER
40313: OR
40314: IFFALSE 40318
// exit ;
40316: GO 40671
// missile := [ 1 ] ;
40318: LD_ADDR_VAR 0 14
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: EMPTY
40327: LIST
40328: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40329: LD_VAR 0 9
40333: PPUSH
40334: LD_VAR 0 12
40338: PPUSH
40339: CALL_OW 325
40343: IFFALSE 40372
// missile := Insert ( missile , missile + 1 , 2 ) ;
40345: LD_ADDR_VAR 0 14
40349: PUSH
40350: LD_VAR 0 14
40354: PPUSH
40355: LD_VAR 0 14
40359: PUSH
40360: LD_INT 1
40362: PLUS
40363: PPUSH
40364: LD_INT 2
40366: PPUSH
40367: CALL_OW 2
40371: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40372: LD_VAR 0 9
40376: PPUSH
40377: LD_VAR 0 13
40381: PPUSH
40382: CALL_OW 325
40386: PUSH
40387: LD_VAR 0 10
40391: PPUSH
40392: CALL_OW 255
40396: PPUSH
40397: LD_VAR 0 13
40401: PPUSH
40402: CALL_OW 325
40406: NOT
40407: AND
40408: IFFALSE 40437
// missile := Insert ( missile , missile + 1 , 3 ) ;
40410: LD_ADDR_VAR 0 14
40414: PUSH
40415: LD_VAR 0 14
40419: PPUSH
40420: LD_VAR 0 14
40424: PUSH
40425: LD_INT 1
40427: PLUS
40428: PPUSH
40429: LD_INT 3
40431: PPUSH
40432: CALL_OW 2
40436: ST_TO_ADDR
// if missile < 2 then
40437: LD_VAR 0 14
40441: PUSH
40442: LD_INT 2
40444: LESS
40445: IFFALSE 40449
// exit ;
40447: GO 40671
// x := GetX ( enemy ) ;
40449: LD_ADDR_VAR 0 4
40453: PUSH
40454: LD_VAR 0 10
40458: PPUSH
40459: CALL_OW 250
40463: ST_TO_ADDR
// y := GetY ( enemy ) ;
40464: LD_ADDR_VAR 0 5
40468: PUSH
40469: LD_VAR 0 10
40473: PPUSH
40474: CALL_OW 251
40478: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40479: LD_ADDR_VAR 0 6
40483: PUSH
40484: LD_VAR 0 4
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PPUSH
40493: LD_INT 1
40495: PPUSH
40496: CALL_OW 12
40500: PLUS
40501: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40502: LD_ADDR_VAR 0 7
40506: PUSH
40507: LD_VAR 0 5
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PPUSH
40516: LD_INT 1
40518: PPUSH
40519: CALL_OW 12
40523: PLUS
40524: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40525: LD_VAR 0 6
40529: PPUSH
40530: LD_VAR 0 7
40534: PPUSH
40535: CALL_OW 488
40539: NOT
40540: IFFALSE 40562
// begin _x := x ;
40542: LD_ADDR_VAR 0 6
40546: PUSH
40547: LD_VAR 0 4
40551: ST_TO_ADDR
// _y := y ;
40552: LD_ADDR_VAR 0 7
40556: PUSH
40557: LD_VAR 0 5
40561: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40562: LD_ADDR_VAR 0 3
40566: PUSH
40567: LD_INT 1
40569: PPUSH
40570: LD_VAR 0 14
40574: PPUSH
40575: CALL_OW 12
40579: ST_TO_ADDR
// case i of 1 :
40580: LD_VAR 0 3
40584: PUSH
40585: LD_INT 1
40587: DOUBLE
40588: EQUAL
40589: IFTRUE 40593
40591: GO 40610
40593: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40594: LD_VAR 0 1
40598: PPUSH
40599: LD_VAR 0 10
40603: PPUSH
40604: CALL_OW 115
40608: GO 40671
40610: LD_INT 2
40612: DOUBLE
40613: EQUAL
40614: IFTRUE 40618
40616: GO 40640
40618: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40619: LD_VAR 0 1
40623: PPUSH
40624: LD_VAR 0 6
40628: PPUSH
40629: LD_VAR 0 7
40633: PPUSH
40634: CALL_OW 153
40638: GO 40671
40640: LD_INT 3
40642: DOUBLE
40643: EQUAL
40644: IFTRUE 40648
40646: GO 40670
40648: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40649: LD_VAR 0 1
40653: PPUSH
40654: LD_VAR 0 6
40658: PPUSH
40659: LD_VAR 0 7
40663: PPUSH
40664: CALL_OW 154
40668: GO 40671
40670: POP
// end ;
40671: LD_VAR 0 2
40675: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40676: LD_INT 0
40678: PPUSH
40679: PPUSH
40680: PPUSH
40681: PPUSH
40682: PPUSH
40683: PPUSH
// if not unit or not building then
40684: LD_VAR 0 1
40688: NOT
40689: PUSH
40690: LD_VAR 0 2
40694: NOT
40695: OR
40696: IFFALSE 40700
// exit ;
40698: GO 40858
// x := GetX ( building ) ;
40700: LD_ADDR_VAR 0 5
40704: PUSH
40705: LD_VAR 0 2
40709: PPUSH
40710: CALL_OW 250
40714: ST_TO_ADDR
// y := GetY ( building ) ;
40715: LD_ADDR_VAR 0 6
40719: PUSH
40720: LD_VAR 0 2
40724: PPUSH
40725: CALL_OW 251
40729: ST_TO_ADDR
// for i = 0 to 5 do
40730: LD_ADDR_VAR 0 4
40734: PUSH
40735: DOUBLE
40736: LD_INT 0
40738: DEC
40739: ST_TO_ADDR
40740: LD_INT 5
40742: PUSH
40743: FOR_TO
40744: IFFALSE 40856
// begin _x := ShiftX ( x , i , 3 ) ;
40746: LD_ADDR_VAR 0 7
40750: PUSH
40751: LD_VAR 0 5
40755: PPUSH
40756: LD_VAR 0 4
40760: PPUSH
40761: LD_INT 3
40763: PPUSH
40764: CALL_OW 272
40768: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40769: LD_ADDR_VAR 0 8
40773: PUSH
40774: LD_VAR 0 6
40778: PPUSH
40779: LD_VAR 0 4
40783: PPUSH
40784: LD_INT 3
40786: PPUSH
40787: CALL_OW 273
40791: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40792: LD_VAR 0 7
40796: PPUSH
40797: LD_VAR 0 8
40801: PPUSH
40802: CALL_OW 488
40806: NOT
40807: IFFALSE 40811
// continue ;
40809: GO 40743
// if HexInfo ( _x , _y ) = 0 then
40811: LD_VAR 0 7
40815: PPUSH
40816: LD_VAR 0 8
40820: PPUSH
40821: CALL_OW 428
40825: PUSH
40826: LD_INT 0
40828: EQUAL
40829: IFFALSE 40854
// begin ComMoveXY ( unit , _x , _y ) ;
40831: LD_VAR 0 1
40835: PPUSH
40836: LD_VAR 0 7
40840: PPUSH
40841: LD_VAR 0 8
40845: PPUSH
40846: CALL_OW 111
// exit ;
40850: POP
40851: POP
40852: GO 40858
// end ; end ;
40854: GO 40743
40856: POP
40857: POP
// end ;
40858: LD_VAR 0 3
40862: RET
// export function ScanBase ( side , base_area ) ; begin
40863: LD_INT 0
40865: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40866: LD_ADDR_VAR 0 3
40870: PUSH
40871: LD_VAR 0 2
40875: PPUSH
40876: LD_INT 81
40878: PUSH
40879: LD_VAR 0 1
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PPUSH
40888: CALL_OW 70
40892: ST_TO_ADDR
// end ;
40893: LD_VAR 0 3
40897: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40898: LD_INT 0
40900: PPUSH
40901: PPUSH
40902: PPUSH
40903: PPUSH
// result := false ;
40904: LD_ADDR_VAR 0 2
40908: PUSH
40909: LD_INT 0
40911: ST_TO_ADDR
// side := GetSide ( unit ) ;
40912: LD_ADDR_VAR 0 3
40916: PUSH
40917: LD_VAR 0 1
40921: PPUSH
40922: CALL_OW 255
40926: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40927: LD_ADDR_VAR 0 4
40931: PUSH
40932: LD_VAR 0 1
40936: PPUSH
40937: CALL_OW 248
40941: ST_TO_ADDR
// case nat of 1 :
40942: LD_VAR 0 4
40946: PUSH
40947: LD_INT 1
40949: DOUBLE
40950: EQUAL
40951: IFTRUE 40955
40953: GO 40966
40955: POP
// tech := tech_lassight ; 2 :
40956: LD_ADDR_VAR 0 5
40960: PUSH
40961: LD_INT 12
40963: ST_TO_ADDR
40964: GO 41005
40966: LD_INT 2
40968: DOUBLE
40969: EQUAL
40970: IFTRUE 40974
40972: GO 40985
40974: POP
// tech := tech_mortar ; 3 :
40975: LD_ADDR_VAR 0 5
40979: PUSH
40980: LD_INT 41
40982: ST_TO_ADDR
40983: GO 41005
40985: LD_INT 3
40987: DOUBLE
40988: EQUAL
40989: IFTRUE 40993
40991: GO 41004
40993: POP
// tech := tech_bazooka ; end ;
40994: LD_ADDR_VAR 0 5
40998: PUSH
40999: LD_INT 44
41001: ST_TO_ADDR
41002: GO 41005
41004: POP
// if Researched ( side , tech ) then
41005: LD_VAR 0 3
41009: PPUSH
41010: LD_VAR 0 5
41014: PPUSH
41015: CALL_OW 325
41019: IFFALSE 41046
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41021: LD_ADDR_VAR 0 2
41025: PUSH
41026: LD_INT 5
41028: PUSH
41029: LD_INT 8
41031: PUSH
41032: LD_INT 9
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: LIST
41039: PUSH
41040: LD_VAR 0 4
41044: ARRAY
41045: ST_TO_ADDR
// end ;
41046: LD_VAR 0 2
41050: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41051: LD_INT 0
41053: PPUSH
41054: PPUSH
41055: PPUSH
// if not mines then
41056: LD_VAR 0 2
41060: NOT
41061: IFFALSE 41065
// exit ;
41063: GO 41209
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41065: LD_ADDR_VAR 0 5
41069: PUSH
41070: LD_INT 81
41072: PUSH
41073: LD_VAR 0 1
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 3
41084: PUSH
41085: LD_INT 21
41087: PUSH
41088: LD_INT 3
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PPUSH
41103: CALL_OW 69
41107: ST_TO_ADDR
// for i in mines do
41108: LD_ADDR_VAR 0 4
41112: PUSH
41113: LD_VAR 0 2
41117: PUSH
41118: FOR_IN
41119: IFFALSE 41207
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41121: LD_VAR 0 4
41125: PUSH
41126: LD_INT 1
41128: ARRAY
41129: PPUSH
41130: LD_VAR 0 4
41134: PUSH
41135: LD_INT 2
41137: ARRAY
41138: PPUSH
41139: CALL_OW 458
41143: NOT
41144: IFFALSE 41148
// continue ;
41146: GO 41118
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41148: LD_VAR 0 4
41152: PUSH
41153: LD_INT 1
41155: ARRAY
41156: PPUSH
41157: LD_VAR 0 4
41161: PUSH
41162: LD_INT 2
41164: ARRAY
41165: PPUSH
41166: CALL_OW 428
41170: PUSH
41171: LD_VAR 0 5
41175: IN
41176: IFFALSE 41205
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41178: LD_VAR 0 4
41182: PUSH
41183: LD_INT 1
41185: ARRAY
41186: PPUSH
41187: LD_VAR 0 4
41191: PUSH
41192: LD_INT 2
41194: ARRAY
41195: PPUSH
41196: LD_VAR 0 1
41200: PPUSH
41201: CALL_OW 456
// end ;
41205: GO 41118
41207: POP
41208: POP
// end ;
41209: LD_VAR 0 3
41213: RET
// export function Count ( array ) ; var i ; begin
41214: LD_INT 0
41216: PPUSH
41217: PPUSH
// result := 0 ;
41218: LD_ADDR_VAR 0 2
41222: PUSH
41223: LD_INT 0
41225: ST_TO_ADDR
// for i in array do
41226: LD_ADDR_VAR 0 3
41230: PUSH
41231: LD_VAR 0 1
41235: PUSH
41236: FOR_IN
41237: IFFALSE 41261
// if i then
41239: LD_VAR 0 3
41243: IFFALSE 41259
// result := result + 1 ;
41245: LD_ADDR_VAR 0 2
41249: PUSH
41250: LD_VAR 0 2
41254: PUSH
41255: LD_INT 1
41257: PLUS
41258: ST_TO_ADDR
41259: GO 41236
41261: POP
41262: POP
// end ;
41263: LD_VAR 0 2
41267: RET
// export function IsEmpty ( building ) ; begin
41268: LD_INT 0
41270: PPUSH
// if not building then
41271: LD_VAR 0 1
41275: NOT
41276: IFFALSE 41280
// exit ;
41278: GO 41323
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41280: LD_ADDR_VAR 0 2
41284: PUSH
41285: LD_VAR 0 1
41289: PUSH
41290: LD_INT 22
41292: PUSH
41293: LD_VAR 0 1
41297: PPUSH
41298: CALL_OW 255
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 58
41309: PUSH
41310: EMPTY
41311: LIST
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PPUSH
41317: CALL_OW 69
41321: IN
41322: ST_TO_ADDR
// end ;
41323: LD_VAR 0 2
41327: RET
// export function IsNotFull ( building ) ; begin
41328: LD_INT 0
41330: PPUSH
// if not building then
41331: LD_VAR 0 1
41335: NOT
41336: IFFALSE 41340
// exit ;
41338: GO 41359
// result := UnitsInside ( building ) < 6 ;
41340: LD_ADDR_VAR 0 2
41344: PUSH
41345: LD_VAR 0 1
41349: PPUSH
41350: CALL_OW 313
41354: PUSH
41355: LD_INT 6
41357: LESS
41358: ST_TO_ADDR
// end ;
41359: LD_VAR 0 2
41363: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41364: LD_INT 0
41366: PPUSH
41367: PPUSH
41368: PPUSH
41369: PPUSH
// tmp := [ ] ;
41370: LD_ADDR_VAR 0 3
41374: PUSH
41375: EMPTY
41376: ST_TO_ADDR
// list := [ ] ;
41377: LD_ADDR_VAR 0 5
41381: PUSH
41382: EMPTY
41383: ST_TO_ADDR
// for i = 16 to 25 do
41384: LD_ADDR_VAR 0 4
41388: PUSH
41389: DOUBLE
41390: LD_INT 16
41392: DEC
41393: ST_TO_ADDR
41394: LD_INT 25
41396: PUSH
41397: FOR_TO
41398: IFFALSE 41471
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41400: LD_ADDR_VAR 0 3
41404: PUSH
41405: LD_VAR 0 3
41409: PUSH
41410: LD_INT 22
41412: PUSH
41413: LD_VAR 0 1
41417: PPUSH
41418: CALL_OW 255
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 91
41429: PUSH
41430: LD_VAR 0 1
41434: PUSH
41435: LD_INT 6
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 30
41445: PUSH
41446: LD_VAR 0 4
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: LIST
41459: PUSH
41460: EMPTY
41461: LIST
41462: PPUSH
41463: CALL_OW 69
41467: ADD
41468: ST_TO_ADDR
41469: GO 41397
41471: POP
41472: POP
// for i = 1 to tmp do
41473: LD_ADDR_VAR 0 4
41477: PUSH
41478: DOUBLE
41479: LD_INT 1
41481: DEC
41482: ST_TO_ADDR
41483: LD_VAR 0 3
41487: PUSH
41488: FOR_TO
41489: IFFALSE 41577
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41491: LD_ADDR_VAR 0 5
41495: PUSH
41496: LD_VAR 0 5
41500: PUSH
41501: LD_VAR 0 3
41505: PUSH
41506: LD_VAR 0 4
41510: ARRAY
41511: PPUSH
41512: CALL_OW 266
41516: PUSH
41517: LD_VAR 0 3
41521: PUSH
41522: LD_VAR 0 4
41526: ARRAY
41527: PPUSH
41528: CALL_OW 250
41532: PUSH
41533: LD_VAR 0 3
41537: PUSH
41538: LD_VAR 0 4
41542: ARRAY
41543: PPUSH
41544: CALL_OW 251
41548: PUSH
41549: LD_VAR 0 3
41553: PUSH
41554: LD_VAR 0 4
41558: ARRAY
41559: PPUSH
41560: CALL_OW 254
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: PUSH
41571: EMPTY
41572: LIST
41573: ADD
41574: ST_TO_ADDR
41575: GO 41488
41577: POP
41578: POP
// result := list ;
41579: LD_ADDR_VAR 0 2
41583: PUSH
41584: LD_VAR 0 5
41588: ST_TO_ADDR
// end ;
41589: LD_VAR 0 2
41593: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41594: LD_INT 0
41596: PPUSH
41597: PPUSH
41598: PPUSH
41599: PPUSH
41600: PPUSH
41601: PPUSH
41602: PPUSH
// if not factory then
41603: LD_VAR 0 1
41607: NOT
41608: IFFALSE 41612
// exit ;
41610: GO 42205
// if control = control_apeman then
41612: LD_VAR 0 4
41616: PUSH
41617: LD_INT 5
41619: EQUAL
41620: IFFALSE 41729
// begin tmp := UnitsInside ( factory ) ;
41622: LD_ADDR_VAR 0 8
41626: PUSH
41627: LD_VAR 0 1
41631: PPUSH
41632: CALL_OW 313
41636: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41637: LD_VAR 0 8
41641: PPUSH
41642: LD_INT 25
41644: PUSH
41645: LD_INT 12
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PPUSH
41652: CALL_OW 72
41656: NOT
41657: IFFALSE 41667
// control := control_manual ;
41659: LD_ADDR_VAR 0 4
41663: PUSH
41664: LD_INT 1
41666: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41667: LD_ADDR_VAR 0 8
41671: PUSH
41672: LD_VAR 0 1
41676: PPUSH
41677: CALL 41364 0 1
41681: ST_TO_ADDR
// if tmp then
41682: LD_VAR 0 8
41686: IFFALSE 41729
// begin for i in tmp do
41688: LD_ADDR_VAR 0 7
41692: PUSH
41693: LD_VAR 0 8
41697: PUSH
41698: FOR_IN
41699: IFFALSE 41727
// if i [ 1 ] = b_ext_radio then
41701: LD_VAR 0 7
41705: PUSH
41706: LD_INT 1
41708: ARRAY
41709: PUSH
41710: LD_INT 22
41712: EQUAL
41713: IFFALSE 41725
// begin control := control_remote ;
41715: LD_ADDR_VAR 0 4
41719: PUSH
41720: LD_INT 2
41722: ST_TO_ADDR
// break ;
41723: GO 41727
// end ;
41725: GO 41698
41727: POP
41728: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41729: LD_VAR 0 1
41733: PPUSH
41734: LD_VAR 0 2
41738: PPUSH
41739: LD_VAR 0 3
41743: PPUSH
41744: LD_VAR 0 4
41748: PPUSH
41749: LD_VAR 0 5
41753: PPUSH
41754: CALL_OW 448
41758: IFFALSE 41793
// begin result := [ chassis , engine , control , weapon ] ;
41760: LD_ADDR_VAR 0 6
41764: PUSH
41765: LD_VAR 0 2
41769: PUSH
41770: LD_VAR 0 3
41774: PUSH
41775: LD_VAR 0 4
41779: PUSH
41780: LD_VAR 0 5
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: ST_TO_ADDR
// exit ;
41791: GO 42205
// end ; _chassis := AvailableChassisList ( factory ) ;
41793: LD_ADDR_VAR 0 9
41797: PUSH
41798: LD_VAR 0 1
41802: PPUSH
41803: CALL_OW 475
41807: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41808: LD_ADDR_VAR 0 11
41812: PUSH
41813: LD_VAR 0 1
41817: PPUSH
41818: CALL_OW 476
41822: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41823: LD_ADDR_VAR 0 12
41827: PUSH
41828: LD_VAR 0 1
41832: PPUSH
41833: CALL_OW 477
41837: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41838: LD_ADDR_VAR 0 10
41842: PUSH
41843: LD_VAR 0 1
41847: PPUSH
41848: CALL_OW 478
41852: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41853: LD_VAR 0 9
41857: NOT
41858: PUSH
41859: LD_VAR 0 11
41863: NOT
41864: OR
41865: PUSH
41866: LD_VAR 0 12
41870: NOT
41871: OR
41872: PUSH
41873: LD_VAR 0 10
41877: NOT
41878: OR
41879: IFFALSE 41914
// begin result := [ chassis , engine , control , weapon ] ;
41881: LD_ADDR_VAR 0 6
41885: PUSH
41886: LD_VAR 0 2
41890: PUSH
41891: LD_VAR 0 3
41895: PUSH
41896: LD_VAR 0 4
41900: PUSH
41901: LD_VAR 0 5
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: ST_TO_ADDR
// exit ;
41912: GO 42205
// end ; if not chassis in _chassis then
41914: LD_VAR 0 2
41918: PUSH
41919: LD_VAR 0 9
41923: IN
41924: NOT
41925: IFFALSE 41951
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41927: LD_ADDR_VAR 0 2
41931: PUSH
41932: LD_VAR 0 9
41936: PUSH
41937: LD_INT 1
41939: PPUSH
41940: LD_VAR 0 9
41944: PPUSH
41945: CALL_OW 12
41949: ARRAY
41950: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41951: LD_VAR 0 2
41955: PPUSH
41956: LD_VAR 0 3
41960: PPUSH
41961: CALL 42210 0 2
41965: NOT
41966: IFFALSE 42025
// repeat engine := _engine [ 1 ] ;
41968: LD_ADDR_VAR 0 3
41972: PUSH
41973: LD_VAR 0 11
41977: PUSH
41978: LD_INT 1
41980: ARRAY
41981: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41982: LD_ADDR_VAR 0 11
41986: PUSH
41987: LD_VAR 0 11
41991: PPUSH
41992: LD_INT 1
41994: PPUSH
41995: CALL_OW 3
41999: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42000: LD_VAR 0 2
42004: PPUSH
42005: LD_VAR 0 3
42009: PPUSH
42010: CALL 42210 0 2
42014: PUSH
42015: LD_VAR 0 11
42019: PUSH
42020: EMPTY
42021: EQUAL
42022: OR
42023: IFFALSE 41968
// if not control in _control then
42025: LD_VAR 0 4
42029: PUSH
42030: LD_VAR 0 12
42034: IN
42035: NOT
42036: IFFALSE 42062
// control := _control [ rand ( 1 , _control ) ] ;
42038: LD_ADDR_VAR 0 4
42042: PUSH
42043: LD_VAR 0 12
42047: PUSH
42048: LD_INT 1
42050: PPUSH
42051: LD_VAR 0 12
42055: PPUSH
42056: CALL_OW 12
42060: ARRAY
42061: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42062: LD_VAR 0 2
42066: PPUSH
42067: LD_VAR 0 5
42071: PPUSH
42072: CALL 42430 0 2
42076: NOT
42077: IFFALSE 42136
// repeat weapon := _weapon [ 1 ] ;
42079: LD_ADDR_VAR 0 5
42083: PUSH
42084: LD_VAR 0 10
42088: PUSH
42089: LD_INT 1
42091: ARRAY
42092: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42093: LD_ADDR_VAR 0 10
42097: PUSH
42098: LD_VAR 0 10
42102: PPUSH
42103: LD_INT 1
42105: PPUSH
42106: CALL_OW 3
42110: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42111: LD_VAR 0 2
42115: PPUSH
42116: LD_VAR 0 5
42120: PPUSH
42121: CALL 42430 0 2
42125: PUSH
42126: LD_VAR 0 10
42130: PUSH
42131: EMPTY
42132: EQUAL
42133: OR
42134: IFFALSE 42079
// result := [ ] ;
42136: LD_ADDR_VAR 0 6
42140: PUSH
42141: EMPTY
42142: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42143: LD_VAR 0 1
42147: PPUSH
42148: LD_VAR 0 2
42152: PPUSH
42153: LD_VAR 0 3
42157: PPUSH
42158: LD_VAR 0 4
42162: PPUSH
42163: LD_VAR 0 5
42167: PPUSH
42168: CALL_OW 448
42172: IFFALSE 42205
// result := [ chassis , engine , control , weapon ] ;
42174: LD_ADDR_VAR 0 6
42178: PUSH
42179: LD_VAR 0 2
42183: PUSH
42184: LD_VAR 0 3
42188: PUSH
42189: LD_VAR 0 4
42193: PUSH
42194: LD_VAR 0 5
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: ST_TO_ADDR
// end ;
42205: LD_VAR 0 6
42209: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42210: LD_INT 0
42212: PPUSH
// if not chassis or not engine then
42213: LD_VAR 0 1
42217: NOT
42218: PUSH
42219: LD_VAR 0 2
42223: NOT
42224: OR
42225: IFFALSE 42229
// exit ;
42227: GO 42425
// case engine of engine_solar :
42229: LD_VAR 0 2
42233: PUSH
42234: LD_INT 2
42236: DOUBLE
42237: EQUAL
42238: IFTRUE 42242
42240: GO 42280
42242: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42243: LD_ADDR_VAR 0 3
42247: PUSH
42248: LD_INT 11
42250: PUSH
42251: LD_INT 12
42253: PUSH
42254: LD_INT 13
42256: PUSH
42257: LD_INT 14
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: LD_INT 3
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: ST_TO_ADDR
42278: GO 42409
42280: LD_INT 1
42282: DOUBLE
42283: EQUAL
42284: IFTRUE 42288
42286: GO 42350
42288: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42289: LD_ADDR_VAR 0 3
42293: PUSH
42294: LD_INT 11
42296: PUSH
42297: LD_INT 12
42299: PUSH
42300: LD_INT 13
42302: PUSH
42303: LD_INT 14
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: LD_INT 3
42314: PUSH
42315: LD_INT 4
42317: PUSH
42318: LD_INT 5
42320: PUSH
42321: LD_INT 21
42323: PUSH
42324: LD_INT 23
42326: PUSH
42327: LD_INT 22
42329: PUSH
42330: LD_INT 24
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: ST_TO_ADDR
42348: GO 42409
42350: LD_INT 3
42352: DOUBLE
42353: EQUAL
42354: IFTRUE 42358
42356: GO 42408
42358: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42359: LD_ADDR_VAR 0 3
42363: PUSH
42364: LD_INT 13
42366: PUSH
42367: LD_INT 14
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: LD_INT 3
42375: PUSH
42376: LD_INT 4
42378: PUSH
42379: LD_INT 5
42381: PUSH
42382: LD_INT 21
42384: PUSH
42385: LD_INT 22
42387: PUSH
42388: LD_INT 23
42390: PUSH
42391: LD_INT 24
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: ST_TO_ADDR
42406: GO 42409
42408: POP
// result := ( chassis in result ) ;
42409: LD_ADDR_VAR 0 3
42413: PUSH
42414: LD_VAR 0 1
42418: PUSH
42419: LD_VAR 0 3
42423: IN
42424: ST_TO_ADDR
// end ;
42425: LD_VAR 0 3
42429: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42430: LD_INT 0
42432: PPUSH
// if not chassis or not weapon then
42433: LD_VAR 0 1
42437: NOT
42438: PUSH
42439: LD_VAR 0 2
42443: NOT
42444: OR
42445: IFFALSE 42449
// exit ;
42447: GO 43475
// case weapon of us_machine_gun :
42449: LD_VAR 0 2
42453: PUSH
42454: LD_INT 2
42456: DOUBLE
42457: EQUAL
42458: IFTRUE 42462
42460: GO 42492
42462: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42463: LD_ADDR_VAR 0 3
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: LD_INT 3
42476: PUSH
42477: LD_INT 4
42479: PUSH
42480: LD_INT 5
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: ST_TO_ADDR
42490: GO 43459
42492: LD_INT 3
42494: DOUBLE
42495: EQUAL
42496: IFTRUE 42500
42498: GO 42530
42500: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42501: LD_ADDR_VAR 0 3
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: LD_INT 2
42511: PUSH
42512: LD_INT 3
42514: PUSH
42515: LD_INT 4
42517: PUSH
42518: LD_INT 5
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: ST_TO_ADDR
42528: GO 43459
42530: LD_INT 11
42532: DOUBLE
42533: EQUAL
42534: IFTRUE 42538
42536: GO 42568
42538: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42539: LD_ADDR_VAR 0 3
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: LD_INT 2
42549: PUSH
42550: LD_INT 3
42552: PUSH
42553: LD_INT 4
42555: PUSH
42556: LD_INT 5
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: ST_TO_ADDR
42566: GO 43459
42568: LD_INT 4
42570: DOUBLE
42571: EQUAL
42572: IFTRUE 42576
42574: GO 42602
42576: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42577: LD_ADDR_VAR 0 3
42581: PUSH
42582: LD_INT 2
42584: PUSH
42585: LD_INT 3
42587: PUSH
42588: LD_INT 4
42590: PUSH
42591: LD_INT 5
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: ST_TO_ADDR
42600: GO 43459
42602: LD_INT 5
42604: DOUBLE
42605: EQUAL
42606: IFTRUE 42610
42608: GO 42636
42610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: LD_INT 3
42621: PUSH
42622: LD_INT 4
42624: PUSH
42625: LD_INT 5
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: ST_TO_ADDR
42634: GO 43459
42636: LD_INT 9
42638: DOUBLE
42639: EQUAL
42640: IFTRUE 42644
42642: GO 42670
42644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42645: LD_ADDR_VAR 0 3
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: LD_INT 4
42658: PUSH
42659: LD_INT 5
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: ST_TO_ADDR
42668: GO 43459
42670: LD_INT 7
42672: DOUBLE
42673: EQUAL
42674: IFTRUE 42678
42676: GO 42704
42678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42679: LD_ADDR_VAR 0 3
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: LD_INT 3
42689: PUSH
42690: LD_INT 4
42692: PUSH
42693: LD_INT 5
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: ST_TO_ADDR
42702: GO 43459
42704: LD_INT 12
42706: DOUBLE
42707: EQUAL
42708: IFTRUE 42712
42710: GO 42738
42712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42713: LD_ADDR_VAR 0 3
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: LD_INT 3
42723: PUSH
42724: LD_INT 4
42726: PUSH
42727: LD_INT 5
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: ST_TO_ADDR
42736: GO 43459
42738: LD_INT 13
42740: DOUBLE
42741: EQUAL
42742: IFTRUE 42746
42744: GO 42772
42746: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42747: LD_ADDR_VAR 0 3
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: LD_INT 3
42757: PUSH
42758: LD_INT 4
42760: PUSH
42761: LD_INT 5
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: ST_TO_ADDR
42770: GO 43459
42772: LD_INT 14
42774: DOUBLE
42775: EQUAL
42776: IFTRUE 42780
42778: GO 42798
42780: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42781: LD_ADDR_VAR 0 3
42785: PUSH
42786: LD_INT 4
42788: PUSH
42789: LD_INT 5
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: ST_TO_ADDR
42796: GO 43459
42798: LD_INT 6
42800: DOUBLE
42801: EQUAL
42802: IFTRUE 42806
42804: GO 42824
42806: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42807: LD_ADDR_VAR 0 3
42811: PUSH
42812: LD_INT 4
42814: PUSH
42815: LD_INT 5
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: ST_TO_ADDR
42822: GO 43459
42824: LD_INT 10
42826: DOUBLE
42827: EQUAL
42828: IFTRUE 42832
42830: GO 42850
42832: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42833: LD_ADDR_VAR 0 3
42837: PUSH
42838: LD_INT 4
42840: PUSH
42841: LD_INT 5
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: ST_TO_ADDR
42848: GO 43459
42850: LD_INT 22
42852: DOUBLE
42853: EQUAL
42854: IFTRUE 42858
42856: GO 42884
42858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42859: LD_ADDR_VAR 0 3
42863: PUSH
42864: LD_INT 11
42866: PUSH
42867: LD_INT 12
42869: PUSH
42870: LD_INT 13
42872: PUSH
42873: LD_INT 14
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: ST_TO_ADDR
42882: GO 43459
42884: LD_INT 23
42886: DOUBLE
42887: EQUAL
42888: IFTRUE 42892
42890: GO 42918
42892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42893: LD_ADDR_VAR 0 3
42897: PUSH
42898: LD_INT 11
42900: PUSH
42901: LD_INT 12
42903: PUSH
42904: LD_INT 13
42906: PUSH
42907: LD_INT 14
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: ST_TO_ADDR
42916: GO 43459
42918: LD_INT 24
42920: DOUBLE
42921: EQUAL
42922: IFTRUE 42926
42924: GO 42952
42926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42927: LD_ADDR_VAR 0 3
42931: PUSH
42932: LD_INT 11
42934: PUSH
42935: LD_INT 12
42937: PUSH
42938: LD_INT 13
42940: PUSH
42941: LD_INT 14
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: ST_TO_ADDR
42950: GO 43459
42952: LD_INT 30
42954: DOUBLE
42955: EQUAL
42956: IFTRUE 42960
42958: GO 42986
42960: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42961: LD_ADDR_VAR 0 3
42965: PUSH
42966: LD_INT 11
42968: PUSH
42969: LD_INT 12
42971: PUSH
42972: LD_INT 13
42974: PUSH
42975: LD_INT 14
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: ST_TO_ADDR
42984: GO 43459
42986: LD_INT 25
42988: DOUBLE
42989: EQUAL
42990: IFTRUE 42994
42992: GO 43012
42994: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42995: LD_ADDR_VAR 0 3
42999: PUSH
43000: LD_INT 13
43002: PUSH
43003: LD_INT 14
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: ST_TO_ADDR
43010: GO 43459
43012: LD_INT 27
43014: DOUBLE
43015: EQUAL
43016: IFTRUE 43020
43018: GO 43038
43020: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43021: LD_ADDR_VAR 0 3
43025: PUSH
43026: LD_INT 13
43028: PUSH
43029: LD_INT 14
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: ST_TO_ADDR
43036: GO 43459
43038: LD_INT 28
43040: DOUBLE
43041: EQUAL
43042: IFTRUE 43046
43044: GO 43064
43046: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43047: LD_ADDR_VAR 0 3
43051: PUSH
43052: LD_INT 13
43054: PUSH
43055: LD_INT 14
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: ST_TO_ADDR
43062: GO 43459
43064: LD_INT 29
43066: DOUBLE
43067: EQUAL
43068: IFTRUE 43072
43070: GO 43090
43072: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43073: LD_ADDR_VAR 0 3
43077: PUSH
43078: LD_INT 13
43080: PUSH
43081: LD_INT 14
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: ST_TO_ADDR
43088: GO 43459
43090: LD_INT 31
43092: DOUBLE
43093: EQUAL
43094: IFTRUE 43098
43096: GO 43116
43098: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43099: LD_ADDR_VAR 0 3
43103: PUSH
43104: LD_INT 13
43106: PUSH
43107: LD_INT 14
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: ST_TO_ADDR
43114: GO 43459
43116: LD_INT 26
43118: DOUBLE
43119: EQUAL
43120: IFTRUE 43124
43122: GO 43142
43124: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43125: LD_ADDR_VAR 0 3
43129: PUSH
43130: LD_INT 13
43132: PUSH
43133: LD_INT 14
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: ST_TO_ADDR
43140: GO 43459
43142: LD_INT 42
43144: DOUBLE
43145: EQUAL
43146: IFTRUE 43150
43148: GO 43176
43150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43151: LD_ADDR_VAR 0 3
43155: PUSH
43156: LD_INT 21
43158: PUSH
43159: LD_INT 22
43161: PUSH
43162: LD_INT 23
43164: PUSH
43165: LD_INT 24
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: ST_TO_ADDR
43174: GO 43459
43176: LD_INT 43
43178: DOUBLE
43179: EQUAL
43180: IFTRUE 43184
43182: GO 43210
43184: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43185: LD_ADDR_VAR 0 3
43189: PUSH
43190: LD_INT 21
43192: PUSH
43193: LD_INT 22
43195: PUSH
43196: LD_INT 23
43198: PUSH
43199: LD_INT 24
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: ST_TO_ADDR
43208: GO 43459
43210: LD_INT 44
43212: DOUBLE
43213: EQUAL
43214: IFTRUE 43218
43216: GO 43244
43218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43219: LD_ADDR_VAR 0 3
43223: PUSH
43224: LD_INT 21
43226: PUSH
43227: LD_INT 22
43229: PUSH
43230: LD_INT 23
43232: PUSH
43233: LD_INT 24
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: ST_TO_ADDR
43242: GO 43459
43244: LD_INT 45
43246: DOUBLE
43247: EQUAL
43248: IFTRUE 43252
43250: GO 43278
43252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43253: LD_ADDR_VAR 0 3
43257: PUSH
43258: LD_INT 21
43260: PUSH
43261: LD_INT 22
43263: PUSH
43264: LD_INT 23
43266: PUSH
43267: LD_INT 24
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: ST_TO_ADDR
43276: GO 43459
43278: LD_INT 49
43280: DOUBLE
43281: EQUAL
43282: IFTRUE 43286
43284: GO 43312
43286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43287: LD_ADDR_VAR 0 3
43291: PUSH
43292: LD_INT 21
43294: PUSH
43295: LD_INT 22
43297: PUSH
43298: LD_INT 23
43300: PUSH
43301: LD_INT 24
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: ST_TO_ADDR
43310: GO 43459
43312: LD_INT 51
43314: DOUBLE
43315: EQUAL
43316: IFTRUE 43320
43318: GO 43346
43320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43321: LD_ADDR_VAR 0 3
43325: PUSH
43326: LD_INT 21
43328: PUSH
43329: LD_INT 22
43331: PUSH
43332: LD_INT 23
43334: PUSH
43335: LD_INT 24
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: ST_TO_ADDR
43344: GO 43459
43346: LD_INT 52
43348: DOUBLE
43349: EQUAL
43350: IFTRUE 43354
43352: GO 43380
43354: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43355: LD_ADDR_VAR 0 3
43359: PUSH
43360: LD_INT 21
43362: PUSH
43363: LD_INT 22
43365: PUSH
43366: LD_INT 23
43368: PUSH
43369: LD_INT 24
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: ST_TO_ADDR
43378: GO 43459
43380: LD_INT 53
43382: DOUBLE
43383: EQUAL
43384: IFTRUE 43388
43386: GO 43406
43388: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43389: LD_ADDR_VAR 0 3
43393: PUSH
43394: LD_INT 23
43396: PUSH
43397: LD_INT 24
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: ST_TO_ADDR
43404: GO 43459
43406: LD_INT 46
43408: DOUBLE
43409: EQUAL
43410: IFTRUE 43414
43412: GO 43432
43414: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43415: LD_ADDR_VAR 0 3
43419: PUSH
43420: LD_INT 23
43422: PUSH
43423: LD_INT 24
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: ST_TO_ADDR
43430: GO 43459
43432: LD_INT 47
43434: DOUBLE
43435: EQUAL
43436: IFTRUE 43440
43438: GO 43458
43440: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43441: LD_ADDR_VAR 0 3
43445: PUSH
43446: LD_INT 23
43448: PUSH
43449: LD_INT 24
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: ST_TO_ADDR
43456: GO 43459
43458: POP
// result := ( chassis in result ) ;
43459: LD_ADDR_VAR 0 3
43463: PUSH
43464: LD_VAR 0 1
43468: PUSH
43469: LD_VAR 0 3
43473: IN
43474: ST_TO_ADDR
// end ;
43475: LD_VAR 0 3
43479: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43480: LD_INT 0
43482: PPUSH
43483: PPUSH
43484: PPUSH
43485: PPUSH
43486: PPUSH
43487: PPUSH
43488: PPUSH
// result := array ;
43489: LD_ADDR_VAR 0 5
43493: PUSH
43494: LD_VAR 0 1
43498: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43499: LD_VAR 0 1
43503: NOT
43504: PUSH
43505: LD_VAR 0 2
43509: NOT
43510: OR
43511: PUSH
43512: LD_VAR 0 3
43516: NOT
43517: OR
43518: PUSH
43519: LD_VAR 0 2
43523: PUSH
43524: LD_VAR 0 1
43528: GREATER
43529: OR
43530: PUSH
43531: LD_VAR 0 3
43535: PUSH
43536: LD_VAR 0 1
43540: GREATER
43541: OR
43542: IFFALSE 43546
// exit ;
43544: GO 43842
// if direction then
43546: LD_VAR 0 4
43550: IFFALSE 43614
// begin d := 1 ;
43552: LD_ADDR_VAR 0 9
43556: PUSH
43557: LD_INT 1
43559: ST_TO_ADDR
// if i_from > i_to then
43560: LD_VAR 0 2
43564: PUSH
43565: LD_VAR 0 3
43569: GREATER
43570: IFFALSE 43596
// length := ( array - i_from ) + i_to else
43572: LD_ADDR_VAR 0 11
43576: PUSH
43577: LD_VAR 0 1
43581: PUSH
43582: LD_VAR 0 2
43586: MINUS
43587: PUSH
43588: LD_VAR 0 3
43592: PLUS
43593: ST_TO_ADDR
43594: GO 43612
// length := i_to - i_from ;
43596: LD_ADDR_VAR 0 11
43600: PUSH
43601: LD_VAR 0 3
43605: PUSH
43606: LD_VAR 0 2
43610: MINUS
43611: ST_TO_ADDR
// end else
43612: GO 43675
// begin d := - 1 ;
43614: LD_ADDR_VAR 0 9
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: ST_TO_ADDR
// if i_from > i_to then
43623: LD_VAR 0 2
43627: PUSH
43628: LD_VAR 0 3
43632: GREATER
43633: IFFALSE 43653
// length := i_from - i_to else
43635: LD_ADDR_VAR 0 11
43639: PUSH
43640: LD_VAR 0 2
43644: PUSH
43645: LD_VAR 0 3
43649: MINUS
43650: ST_TO_ADDR
43651: GO 43675
// length := ( array - i_to ) + i_from ;
43653: LD_ADDR_VAR 0 11
43657: PUSH
43658: LD_VAR 0 1
43662: PUSH
43663: LD_VAR 0 3
43667: MINUS
43668: PUSH
43669: LD_VAR 0 2
43673: PLUS
43674: ST_TO_ADDR
// end ; if not length then
43675: LD_VAR 0 11
43679: NOT
43680: IFFALSE 43684
// exit ;
43682: GO 43842
// tmp := array ;
43684: LD_ADDR_VAR 0 10
43688: PUSH
43689: LD_VAR 0 1
43693: ST_TO_ADDR
// for i = 1 to length do
43694: LD_ADDR_VAR 0 6
43698: PUSH
43699: DOUBLE
43700: LD_INT 1
43702: DEC
43703: ST_TO_ADDR
43704: LD_VAR 0 11
43708: PUSH
43709: FOR_TO
43710: IFFALSE 43830
// begin for j = 1 to array do
43712: LD_ADDR_VAR 0 7
43716: PUSH
43717: DOUBLE
43718: LD_INT 1
43720: DEC
43721: ST_TO_ADDR
43722: LD_VAR 0 1
43726: PUSH
43727: FOR_TO
43728: IFFALSE 43816
// begin k := j + d ;
43730: LD_ADDR_VAR 0 8
43734: PUSH
43735: LD_VAR 0 7
43739: PUSH
43740: LD_VAR 0 9
43744: PLUS
43745: ST_TO_ADDR
// if k > array then
43746: LD_VAR 0 8
43750: PUSH
43751: LD_VAR 0 1
43755: GREATER
43756: IFFALSE 43766
// k := 1 ;
43758: LD_ADDR_VAR 0 8
43762: PUSH
43763: LD_INT 1
43765: ST_TO_ADDR
// if not k then
43766: LD_VAR 0 8
43770: NOT
43771: IFFALSE 43783
// k := array ;
43773: LD_ADDR_VAR 0 8
43777: PUSH
43778: LD_VAR 0 1
43782: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43783: LD_ADDR_VAR 0 10
43787: PUSH
43788: LD_VAR 0 10
43792: PPUSH
43793: LD_VAR 0 8
43797: PPUSH
43798: LD_VAR 0 1
43802: PUSH
43803: LD_VAR 0 7
43807: ARRAY
43808: PPUSH
43809: CALL_OW 1
43813: ST_TO_ADDR
// end ;
43814: GO 43727
43816: POP
43817: POP
// array := tmp ;
43818: LD_ADDR_VAR 0 1
43822: PUSH
43823: LD_VAR 0 10
43827: ST_TO_ADDR
// end ;
43828: GO 43709
43830: POP
43831: POP
// result := array ;
43832: LD_ADDR_VAR 0 5
43836: PUSH
43837: LD_VAR 0 1
43841: ST_TO_ADDR
// end ;
43842: LD_VAR 0 5
43846: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43847: LD_INT 0
43849: PPUSH
43850: PPUSH
// result := 0 ;
43851: LD_ADDR_VAR 0 3
43855: PUSH
43856: LD_INT 0
43858: ST_TO_ADDR
// if not array or not value in array then
43859: LD_VAR 0 1
43863: NOT
43864: PUSH
43865: LD_VAR 0 2
43869: PUSH
43870: LD_VAR 0 1
43874: IN
43875: NOT
43876: OR
43877: IFFALSE 43881
// exit ;
43879: GO 43935
// for i = 1 to array do
43881: LD_ADDR_VAR 0 4
43885: PUSH
43886: DOUBLE
43887: LD_INT 1
43889: DEC
43890: ST_TO_ADDR
43891: LD_VAR 0 1
43895: PUSH
43896: FOR_TO
43897: IFFALSE 43933
// if value = array [ i ] then
43899: LD_VAR 0 2
43903: PUSH
43904: LD_VAR 0 1
43908: PUSH
43909: LD_VAR 0 4
43913: ARRAY
43914: EQUAL
43915: IFFALSE 43931
// begin result := i ;
43917: LD_ADDR_VAR 0 3
43921: PUSH
43922: LD_VAR 0 4
43926: ST_TO_ADDR
// exit ;
43927: POP
43928: POP
43929: GO 43935
// end ;
43931: GO 43896
43933: POP
43934: POP
// end ;
43935: LD_VAR 0 3
43939: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43940: LD_INT 0
43942: PPUSH
// vc_chassis := chassis ;
43943: LD_ADDR_OWVAR 37
43947: PUSH
43948: LD_VAR 0 1
43952: ST_TO_ADDR
// vc_engine := engine ;
43953: LD_ADDR_OWVAR 39
43957: PUSH
43958: LD_VAR 0 2
43962: ST_TO_ADDR
// vc_control := control ;
43963: LD_ADDR_OWVAR 38
43967: PUSH
43968: LD_VAR 0 3
43972: ST_TO_ADDR
// vc_weapon := weapon ;
43973: LD_ADDR_OWVAR 40
43977: PUSH
43978: LD_VAR 0 4
43982: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43983: LD_ADDR_OWVAR 41
43987: PUSH
43988: LD_VAR 0 5
43992: ST_TO_ADDR
// end ;
43993: LD_VAR 0 6
43997: RET
// export function WantPlant ( unit ) ; var task ; begin
43998: LD_INT 0
44000: PPUSH
44001: PPUSH
// result := false ;
44002: LD_ADDR_VAR 0 2
44006: PUSH
44007: LD_INT 0
44009: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44010: LD_ADDR_VAR 0 3
44014: PUSH
44015: LD_VAR 0 1
44019: PPUSH
44020: CALL_OW 437
44024: ST_TO_ADDR
// if task then
44025: LD_VAR 0 3
44029: IFFALSE 44057
// if task [ 1 ] [ 1 ] = p then
44031: LD_VAR 0 3
44035: PUSH
44036: LD_INT 1
44038: ARRAY
44039: PUSH
44040: LD_INT 1
44042: ARRAY
44043: PUSH
44044: LD_STRING p
44046: EQUAL
44047: IFFALSE 44057
// result := true ;
44049: LD_ADDR_VAR 0 2
44053: PUSH
44054: LD_INT 1
44056: ST_TO_ADDR
// end ;
44057: LD_VAR 0 2
44061: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44062: LD_INT 0
44064: PPUSH
44065: PPUSH
44066: PPUSH
44067: PPUSH
// if pos < 1 then
44068: LD_VAR 0 2
44072: PUSH
44073: LD_INT 1
44075: LESS
44076: IFFALSE 44080
// exit ;
44078: GO 44383
// if pos = 1 then
44080: LD_VAR 0 2
44084: PUSH
44085: LD_INT 1
44087: EQUAL
44088: IFFALSE 44121
// result := Replace ( arr , pos [ 1 ] , value ) else
44090: LD_ADDR_VAR 0 4
44094: PUSH
44095: LD_VAR 0 1
44099: PPUSH
44100: LD_VAR 0 2
44104: PUSH
44105: LD_INT 1
44107: ARRAY
44108: PPUSH
44109: LD_VAR 0 3
44113: PPUSH
44114: CALL_OW 1
44118: ST_TO_ADDR
44119: GO 44383
// begin tmp := arr ;
44121: LD_ADDR_VAR 0 6
44125: PUSH
44126: LD_VAR 0 1
44130: ST_TO_ADDR
// s_arr := [ tmp ] ;
44131: LD_ADDR_VAR 0 7
44135: PUSH
44136: LD_VAR 0 6
44140: PUSH
44141: EMPTY
44142: LIST
44143: ST_TO_ADDR
// for i = 1 to pos - 1 do
44144: LD_ADDR_VAR 0 5
44148: PUSH
44149: DOUBLE
44150: LD_INT 1
44152: DEC
44153: ST_TO_ADDR
44154: LD_VAR 0 2
44158: PUSH
44159: LD_INT 1
44161: MINUS
44162: PUSH
44163: FOR_TO
44164: IFFALSE 44209
// begin tmp := tmp [ pos [ i ] ] ;
44166: LD_ADDR_VAR 0 6
44170: PUSH
44171: LD_VAR 0 6
44175: PUSH
44176: LD_VAR 0 2
44180: PUSH
44181: LD_VAR 0 5
44185: ARRAY
44186: ARRAY
44187: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44188: LD_ADDR_VAR 0 7
44192: PUSH
44193: LD_VAR 0 7
44197: PUSH
44198: LD_VAR 0 6
44202: PUSH
44203: EMPTY
44204: LIST
44205: ADD
44206: ST_TO_ADDR
// end ;
44207: GO 44163
44209: POP
44210: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44211: LD_ADDR_VAR 0 6
44215: PUSH
44216: LD_VAR 0 6
44220: PPUSH
44221: LD_VAR 0 2
44225: PUSH
44226: LD_VAR 0 2
44230: ARRAY
44231: PPUSH
44232: LD_VAR 0 3
44236: PPUSH
44237: CALL_OW 1
44241: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44242: LD_ADDR_VAR 0 7
44246: PUSH
44247: LD_VAR 0 7
44251: PPUSH
44252: LD_VAR 0 7
44256: PPUSH
44257: LD_VAR 0 6
44261: PPUSH
44262: CALL_OW 1
44266: ST_TO_ADDR
// for i = s_arr downto 2 do
44267: LD_ADDR_VAR 0 5
44271: PUSH
44272: DOUBLE
44273: LD_VAR 0 7
44277: INC
44278: ST_TO_ADDR
44279: LD_INT 2
44281: PUSH
44282: FOR_DOWNTO
44283: IFFALSE 44367
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44285: LD_ADDR_VAR 0 6
44289: PUSH
44290: LD_VAR 0 7
44294: PUSH
44295: LD_VAR 0 5
44299: PUSH
44300: LD_INT 1
44302: MINUS
44303: ARRAY
44304: PPUSH
44305: LD_VAR 0 2
44309: PUSH
44310: LD_VAR 0 5
44314: PUSH
44315: LD_INT 1
44317: MINUS
44318: ARRAY
44319: PPUSH
44320: LD_VAR 0 7
44324: PUSH
44325: LD_VAR 0 5
44329: ARRAY
44330: PPUSH
44331: CALL_OW 1
44335: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44336: LD_ADDR_VAR 0 7
44340: PUSH
44341: LD_VAR 0 7
44345: PPUSH
44346: LD_VAR 0 5
44350: PUSH
44351: LD_INT 1
44353: MINUS
44354: PPUSH
44355: LD_VAR 0 6
44359: PPUSH
44360: CALL_OW 1
44364: ST_TO_ADDR
// end ;
44365: GO 44282
44367: POP
44368: POP
// result := s_arr [ 1 ] ;
44369: LD_ADDR_VAR 0 4
44373: PUSH
44374: LD_VAR 0 7
44378: PUSH
44379: LD_INT 1
44381: ARRAY
44382: ST_TO_ADDR
// end ; end ;
44383: LD_VAR 0 4
44387: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44388: LD_INT 0
44390: PPUSH
44391: PPUSH
// if not list then
44392: LD_VAR 0 1
44396: NOT
44397: IFFALSE 44401
// exit ;
44399: GO 44492
// i := list [ pos1 ] ;
44401: LD_ADDR_VAR 0 5
44405: PUSH
44406: LD_VAR 0 1
44410: PUSH
44411: LD_VAR 0 2
44415: ARRAY
44416: ST_TO_ADDR
// if not i then
44417: LD_VAR 0 5
44421: NOT
44422: IFFALSE 44426
// exit ;
44424: GO 44492
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44426: LD_ADDR_VAR 0 1
44430: PUSH
44431: LD_VAR 0 1
44435: PPUSH
44436: LD_VAR 0 2
44440: PPUSH
44441: LD_VAR 0 1
44445: PUSH
44446: LD_VAR 0 3
44450: ARRAY
44451: PPUSH
44452: CALL_OW 1
44456: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44457: LD_ADDR_VAR 0 1
44461: PUSH
44462: LD_VAR 0 1
44466: PPUSH
44467: LD_VAR 0 3
44471: PPUSH
44472: LD_VAR 0 5
44476: PPUSH
44477: CALL_OW 1
44481: ST_TO_ADDR
// result := list ;
44482: LD_ADDR_VAR 0 4
44486: PUSH
44487: LD_VAR 0 1
44491: ST_TO_ADDR
// end ;
44492: LD_VAR 0 4
44496: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44497: LD_INT 0
44499: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44500: LD_ADDR_VAR 0 5
44504: PUSH
44505: LD_VAR 0 1
44509: PPUSH
44510: CALL_OW 250
44514: PPUSH
44515: LD_VAR 0 1
44519: PPUSH
44520: CALL_OW 251
44524: PPUSH
44525: LD_VAR 0 2
44529: PPUSH
44530: LD_VAR 0 3
44534: PPUSH
44535: LD_VAR 0 4
44539: PPUSH
44540: CALL 44550 0 5
44544: ST_TO_ADDR
// end ;
44545: LD_VAR 0 5
44549: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44550: LD_INT 0
44552: PPUSH
44553: PPUSH
44554: PPUSH
44555: PPUSH
// if not list then
44556: LD_VAR 0 3
44560: NOT
44561: IFFALSE 44565
// exit ;
44563: GO 44953
// result := [ ] ;
44565: LD_ADDR_VAR 0 6
44569: PUSH
44570: EMPTY
44571: ST_TO_ADDR
// for i in list do
44572: LD_ADDR_VAR 0 7
44576: PUSH
44577: LD_VAR 0 3
44581: PUSH
44582: FOR_IN
44583: IFFALSE 44785
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44585: LD_ADDR_VAR 0 9
44589: PUSH
44590: LD_VAR 0 7
44594: PPUSH
44595: LD_VAR 0 1
44599: PPUSH
44600: LD_VAR 0 2
44604: PPUSH
44605: CALL_OW 297
44609: ST_TO_ADDR
// if not result then
44610: LD_VAR 0 6
44614: NOT
44615: IFFALSE 44641
// result := [ [ i , tmp ] ] else
44617: LD_ADDR_VAR 0 6
44621: PUSH
44622: LD_VAR 0 7
44626: PUSH
44627: LD_VAR 0 9
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: EMPTY
44637: LIST
44638: ST_TO_ADDR
44639: GO 44783
// begin if result [ result ] [ 2 ] < tmp then
44641: LD_VAR 0 6
44645: PUSH
44646: LD_VAR 0 6
44650: ARRAY
44651: PUSH
44652: LD_INT 2
44654: ARRAY
44655: PUSH
44656: LD_VAR 0 9
44660: LESS
44661: IFFALSE 44703
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44663: LD_ADDR_VAR 0 6
44667: PUSH
44668: LD_VAR 0 6
44672: PPUSH
44673: LD_VAR 0 6
44677: PUSH
44678: LD_INT 1
44680: PLUS
44681: PPUSH
44682: LD_VAR 0 7
44686: PUSH
44687: LD_VAR 0 9
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PPUSH
44696: CALL_OW 2
44700: ST_TO_ADDR
44701: GO 44783
// for j = 1 to result do
44703: LD_ADDR_VAR 0 8
44707: PUSH
44708: DOUBLE
44709: LD_INT 1
44711: DEC
44712: ST_TO_ADDR
44713: LD_VAR 0 6
44717: PUSH
44718: FOR_TO
44719: IFFALSE 44781
// begin if tmp < result [ j ] [ 2 ] then
44721: LD_VAR 0 9
44725: PUSH
44726: LD_VAR 0 6
44730: PUSH
44731: LD_VAR 0 8
44735: ARRAY
44736: PUSH
44737: LD_INT 2
44739: ARRAY
44740: LESS
44741: IFFALSE 44779
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44743: LD_ADDR_VAR 0 6
44747: PUSH
44748: LD_VAR 0 6
44752: PPUSH
44753: LD_VAR 0 8
44757: PPUSH
44758: LD_VAR 0 7
44762: PUSH
44763: LD_VAR 0 9
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PPUSH
44772: CALL_OW 2
44776: ST_TO_ADDR
// break ;
44777: GO 44781
// end ; end ;
44779: GO 44718
44781: POP
44782: POP
// end ; end ;
44783: GO 44582
44785: POP
44786: POP
// if result and not asc then
44787: LD_VAR 0 6
44791: PUSH
44792: LD_VAR 0 4
44796: NOT
44797: AND
44798: IFFALSE 44873
// begin tmp := result ;
44800: LD_ADDR_VAR 0 9
44804: PUSH
44805: LD_VAR 0 6
44809: ST_TO_ADDR
// for i = tmp downto 1 do
44810: LD_ADDR_VAR 0 7
44814: PUSH
44815: DOUBLE
44816: LD_VAR 0 9
44820: INC
44821: ST_TO_ADDR
44822: LD_INT 1
44824: PUSH
44825: FOR_DOWNTO
44826: IFFALSE 44871
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44828: LD_ADDR_VAR 0 6
44832: PUSH
44833: LD_VAR 0 6
44837: PPUSH
44838: LD_VAR 0 9
44842: PUSH
44843: LD_VAR 0 7
44847: MINUS
44848: PUSH
44849: LD_INT 1
44851: PLUS
44852: PPUSH
44853: LD_VAR 0 9
44857: PUSH
44858: LD_VAR 0 7
44862: ARRAY
44863: PPUSH
44864: CALL_OW 1
44868: ST_TO_ADDR
44869: GO 44825
44871: POP
44872: POP
// end ; tmp := [ ] ;
44873: LD_ADDR_VAR 0 9
44877: PUSH
44878: EMPTY
44879: ST_TO_ADDR
// if mode then
44880: LD_VAR 0 5
44884: IFFALSE 44953
// begin for i = 1 to result do
44886: LD_ADDR_VAR 0 7
44890: PUSH
44891: DOUBLE
44892: LD_INT 1
44894: DEC
44895: ST_TO_ADDR
44896: LD_VAR 0 6
44900: PUSH
44901: FOR_TO
44902: IFFALSE 44941
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44904: LD_ADDR_VAR 0 9
44908: PUSH
44909: LD_VAR 0 9
44913: PPUSH
44914: LD_VAR 0 7
44918: PPUSH
44919: LD_VAR 0 6
44923: PUSH
44924: LD_VAR 0 7
44928: ARRAY
44929: PUSH
44930: LD_INT 1
44932: ARRAY
44933: PPUSH
44934: CALL_OW 1
44938: ST_TO_ADDR
44939: GO 44901
44941: POP
44942: POP
// result := tmp ;
44943: LD_ADDR_VAR 0 6
44947: PUSH
44948: LD_VAR 0 9
44952: ST_TO_ADDR
// end ; end ;
44953: LD_VAR 0 6
44957: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44958: LD_INT 0
44960: PPUSH
44961: PPUSH
44962: PPUSH
44963: PPUSH
44964: PPUSH
44965: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44966: LD_ADDR_VAR 0 5
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: EMPTY
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: ST_TO_ADDR
// if not x or not y then
44988: LD_VAR 0 2
44992: NOT
44993: PUSH
44994: LD_VAR 0 3
44998: NOT
44999: OR
45000: IFFALSE 45004
// exit ;
45002: GO 46650
// if not range then
45004: LD_VAR 0 4
45008: NOT
45009: IFFALSE 45019
// range := 10 ;
45011: LD_ADDR_VAR 0 4
45015: PUSH
45016: LD_INT 10
45018: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45019: LD_ADDR_VAR 0 8
45023: PUSH
45024: LD_INT 81
45026: PUSH
45027: LD_VAR 0 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 92
45038: PUSH
45039: LD_VAR 0 2
45043: PUSH
45044: LD_VAR 0 3
45048: PUSH
45049: LD_VAR 0 4
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 3
45062: PUSH
45063: LD_INT 21
45065: PUSH
45066: LD_INT 3
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: LIST
45081: PPUSH
45082: CALL_OW 69
45086: ST_TO_ADDR
// if not tmp then
45087: LD_VAR 0 8
45091: NOT
45092: IFFALSE 45096
// exit ;
45094: GO 46650
// for i in tmp do
45096: LD_ADDR_VAR 0 6
45100: PUSH
45101: LD_VAR 0 8
45105: PUSH
45106: FOR_IN
45107: IFFALSE 46625
// begin points := [ 0 , 0 , 0 ] ;
45109: LD_ADDR_VAR 0 9
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: LIST
45127: ST_TO_ADDR
// bpoints := 1 ;
45128: LD_ADDR_VAR 0 10
45132: PUSH
45133: LD_INT 1
45135: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45136: LD_VAR 0 6
45140: PPUSH
45141: CALL_OW 247
45145: PUSH
45146: LD_INT 1
45148: DOUBLE
45149: EQUAL
45150: IFTRUE 45154
45152: GO 45732
45154: POP
// begin if GetClass ( i ) = 1 then
45155: LD_VAR 0 6
45159: PPUSH
45160: CALL_OW 257
45164: PUSH
45165: LD_INT 1
45167: EQUAL
45168: IFFALSE 45189
// points := [ 10 , 5 , 3 ] ;
45170: LD_ADDR_VAR 0 9
45174: PUSH
45175: LD_INT 10
45177: PUSH
45178: LD_INT 5
45180: PUSH
45181: LD_INT 3
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: LIST
45188: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45189: LD_VAR 0 6
45193: PPUSH
45194: CALL_OW 257
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: LD_INT 3
45204: PUSH
45205: LD_INT 4
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: LIST
45212: IN
45213: IFFALSE 45234
// points := [ 3 , 2 , 1 ] ;
45215: LD_ADDR_VAR 0 9
45219: PUSH
45220: LD_INT 3
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: LIST
45233: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45234: LD_VAR 0 6
45238: PPUSH
45239: CALL_OW 257
45243: PUSH
45244: LD_INT 5
45246: EQUAL
45247: IFFALSE 45268
// points := [ 130 , 5 , 2 ] ;
45249: LD_ADDR_VAR 0 9
45253: PUSH
45254: LD_INT 130
45256: PUSH
45257: LD_INT 5
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: LIST
45267: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45268: LD_VAR 0 6
45272: PPUSH
45273: CALL_OW 257
45277: PUSH
45278: LD_INT 8
45280: EQUAL
45281: IFFALSE 45302
// points := [ 35 , 35 , 30 ] ;
45283: LD_ADDR_VAR 0 9
45287: PUSH
45288: LD_INT 35
45290: PUSH
45291: LD_INT 35
45293: PUSH
45294: LD_INT 30
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: LIST
45301: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45302: LD_VAR 0 6
45306: PPUSH
45307: CALL_OW 257
45311: PUSH
45312: LD_INT 9
45314: EQUAL
45315: IFFALSE 45336
// points := [ 20 , 55 , 40 ] ;
45317: LD_ADDR_VAR 0 9
45321: PUSH
45322: LD_INT 20
45324: PUSH
45325: LD_INT 55
45327: PUSH
45328: LD_INT 40
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: LIST
45335: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45336: LD_VAR 0 6
45340: PPUSH
45341: CALL_OW 257
45345: PUSH
45346: LD_INT 12
45348: PUSH
45349: LD_INT 16
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: IN
45356: IFFALSE 45377
// points := [ 5 , 3 , 2 ] ;
45358: LD_ADDR_VAR 0 9
45362: PUSH
45363: LD_INT 5
45365: PUSH
45366: LD_INT 3
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45377: LD_VAR 0 6
45381: PPUSH
45382: CALL_OW 257
45386: PUSH
45387: LD_INT 17
45389: EQUAL
45390: IFFALSE 45411
// points := [ 100 , 50 , 75 ] ;
45392: LD_ADDR_VAR 0 9
45396: PUSH
45397: LD_INT 100
45399: PUSH
45400: LD_INT 50
45402: PUSH
45403: LD_INT 75
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: LIST
45410: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45411: LD_VAR 0 6
45415: PPUSH
45416: CALL_OW 257
45420: PUSH
45421: LD_INT 15
45423: EQUAL
45424: IFFALSE 45445
// points := [ 10 , 5 , 3 ] ;
45426: LD_ADDR_VAR 0 9
45430: PUSH
45431: LD_INT 10
45433: PUSH
45434: LD_INT 5
45436: PUSH
45437: LD_INT 3
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45445: LD_VAR 0 6
45449: PPUSH
45450: CALL_OW 257
45454: PUSH
45455: LD_INT 14
45457: EQUAL
45458: IFFALSE 45479
// points := [ 10 , 0 , 0 ] ;
45460: LD_ADDR_VAR 0 9
45464: PUSH
45465: LD_INT 10
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: LIST
45478: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45479: LD_VAR 0 6
45483: PPUSH
45484: CALL_OW 257
45488: PUSH
45489: LD_INT 11
45491: EQUAL
45492: IFFALSE 45513
// points := [ 30 , 10 , 5 ] ;
45494: LD_ADDR_VAR 0 9
45498: PUSH
45499: LD_INT 30
45501: PUSH
45502: LD_INT 10
45504: PUSH
45505: LD_INT 5
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: LIST
45512: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45513: LD_VAR 0 1
45517: PPUSH
45518: LD_INT 5
45520: PPUSH
45521: CALL_OW 321
45525: PUSH
45526: LD_INT 2
45528: EQUAL
45529: IFFALSE 45546
// bpoints := bpoints * 1.8 ;
45531: LD_ADDR_VAR 0 10
45535: PUSH
45536: LD_VAR 0 10
45540: PUSH
45541: LD_REAL  1.80000000000000E+0000
45544: MUL
45545: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45546: LD_VAR 0 6
45550: PPUSH
45551: CALL_OW 257
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 3
45564: PUSH
45565: LD_INT 4
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: IN
45574: PUSH
45575: LD_VAR 0 1
45579: PPUSH
45580: LD_INT 51
45582: PPUSH
45583: CALL_OW 321
45587: PUSH
45588: LD_INT 2
45590: EQUAL
45591: AND
45592: IFFALSE 45609
// bpoints := bpoints * 1.2 ;
45594: LD_ADDR_VAR 0 10
45598: PUSH
45599: LD_VAR 0 10
45603: PUSH
45604: LD_REAL  1.20000000000000E+0000
45607: MUL
45608: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45609: LD_VAR 0 6
45613: PPUSH
45614: CALL_OW 257
45618: PUSH
45619: LD_INT 5
45621: PUSH
45622: LD_INT 7
45624: PUSH
45625: LD_INT 9
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: IN
45633: PUSH
45634: LD_VAR 0 1
45638: PPUSH
45639: LD_INT 52
45641: PPUSH
45642: CALL_OW 321
45646: PUSH
45647: LD_INT 2
45649: EQUAL
45650: AND
45651: IFFALSE 45668
// bpoints := bpoints * 1.5 ;
45653: LD_ADDR_VAR 0 10
45657: PUSH
45658: LD_VAR 0 10
45662: PUSH
45663: LD_REAL  1.50000000000000E+0000
45666: MUL
45667: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45668: LD_VAR 0 1
45672: PPUSH
45673: LD_INT 66
45675: PPUSH
45676: CALL_OW 321
45680: PUSH
45681: LD_INT 2
45683: EQUAL
45684: IFFALSE 45701
// bpoints := bpoints * 1.1 ;
45686: LD_ADDR_VAR 0 10
45690: PUSH
45691: LD_VAR 0 10
45695: PUSH
45696: LD_REAL  1.10000000000000E+0000
45699: MUL
45700: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45701: LD_ADDR_VAR 0 10
45705: PUSH
45706: LD_VAR 0 10
45710: PUSH
45711: LD_VAR 0 6
45715: PPUSH
45716: LD_INT 1
45718: PPUSH
45719: CALL_OW 259
45723: PUSH
45724: LD_REAL  1.15000000000000E+0000
45727: MUL
45728: MUL
45729: ST_TO_ADDR
// end ; unit_vehicle :
45730: GO 46554
45732: LD_INT 2
45734: DOUBLE
45735: EQUAL
45736: IFTRUE 45740
45738: GO 46542
45740: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45741: LD_VAR 0 6
45745: PPUSH
45746: CALL_OW 264
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 42
45756: PUSH
45757: LD_INT 24
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: LIST
45764: IN
45765: IFFALSE 45786
// points := [ 25 , 5 , 3 ] ;
45767: LD_ADDR_VAR 0 9
45771: PUSH
45772: LD_INT 25
45774: PUSH
45775: LD_INT 5
45777: PUSH
45778: LD_INT 3
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: LIST
45785: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45786: LD_VAR 0 6
45790: PPUSH
45791: CALL_OW 264
45795: PUSH
45796: LD_INT 4
45798: PUSH
45799: LD_INT 43
45801: PUSH
45802: LD_INT 25
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: LIST
45809: IN
45810: IFFALSE 45831
// points := [ 40 , 15 , 5 ] ;
45812: LD_ADDR_VAR 0 9
45816: PUSH
45817: LD_INT 40
45819: PUSH
45820: LD_INT 15
45822: PUSH
45823: LD_INT 5
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: LIST
45830: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45831: LD_VAR 0 6
45835: PPUSH
45836: CALL_OW 264
45840: PUSH
45841: LD_INT 3
45843: PUSH
45844: LD_INT 23
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: IN
45851: IFFALSE 45872
// points := [ 7 , 25 , 8 ] ;
45853: LD_ADDR_VAR 0 9
45857: PUSH
45858: LD_INT 7
45860: PUSH
45861: LD_INT 25
45863: PUSH
45864: LD_INT 8
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: LIST
45871: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45872: LD_VAR 0 6
45876: PPUSH
45877: CALL_OW 264
45881: PUSH
45882: LD_INT 5
45884: PUSH
45885: LD_INT 27
45887: PUSH
45888: LD_INT 44
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: LIST
45895: IN
45896: IFFALSE 45917
// points := [ 14 , 50 , 16 ] ;
45898: LD_ADDR_VAR 0 9
45902: PUSH
45903: LD_INT 14
45905: PUSH
45906: LD_INT 50
45908: PUSH
45909: LD_INT 16
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45917: LD_VAR 0 6
45921: PPUSH
45922: CALL_OW 264
45926: PUSH
45927: LD_INT 6
45929: PUSH
45930: LD_INT 46
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: IN
45937: IFFALSE 45958
// points := [ 32 , 120 , 70 ] ;
45939: LD_ADDR_VAR 0 9
45943: PUSH
45944: LD_INT 32
45946: PUSH
45947: LD_INT 120
45949: PUSH
45950: LD_INT 70
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
45958: LD_VAR 0 6
45962: PPUSH
45963: CALL_OW 264
45967: PUSH
45968: LD_INT 7
45970: PUSH
45971: LD_INT 28
45973: PUSH
45974: LD_INT 45
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: LIST
45981: IN
45982: IFFALSE 46003
// points := [ 35 , 20 , 45 ] ;
45984: LD_ADDR_VAR 0 9
45988: PUSH
45989: LD_INT 35
45991: PUSH
45992: LD_INT 20
45994: PUSH
45995: LD_INT 45
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: LIST
46002: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46003: LD_VAR 0 6
46007: PPUSH
46008: CALL_OW 264
46012: PUSH
46013: LD_INT 47
46015: PUSH
46016: EMPTY
46017: LIST
46018: IN
46019: IFFALSE 46040
// points := [ 67 , 45 , 75 ] ;
46021: LD_ADDR_VAR 0 9
46025: PUSH
46026: LD_INT 67
46028: PUSH
46029: LD_INT 45
46031: PUSH
46032: LD_INT 75
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: LIST
46039: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46040: LD_VAR 0 6
46044: PPUSH
46045: CALL_OW 264
46049: PUSH
46050: LD_INT 26
46052: PUSH
46053: EMPTY
46054: LIST
46055: IN
46056: IFFALSE 46077
// points := [ 120 , 30 , 80 ] ;
46058: LD_ADDR_VAR 0 9
46062: PUSH
46063: LD_INT 120
46065: PUSH
46066: LD_INT 30
46068: PUSH
46069: LD_INT 80
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: LIST
46076: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46077: LD_VAR 0 6
46081: PPUSH
46082: CALL_OW 264
46086: PUSH
46087: LD_INT 22
46089: PUSH
46090: EMPTY
46091: LIST
46092: IN
46093: IFFALSE 46114
// points := [ 40 , 1 , 1 ] ;
46095: LD_ADDR_VAR 0 9
46099: PUSH
46100: LD_INT 40
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: LIST
46113: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46114: LD_VAR 0 6
46118: PPUSH
46119: CALL_OW 264
46123: PUSH
46124: LD_INT 29
46126: PUSH
46127: EMPTY
46128: LIST
46129: IN
46130: IFFALSE 46151
// points := [ 70 , 200 , 400 ] ;
46132: LD_ADDR_VAR 0 9
46136: PUSH
46137: LD_INT 70
46139: PUSH
46140: LD_INT 200
46142: PUSH
46143: LD_INT 400
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: LIST
46150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46151: LD_VAR 0 6
46155: PPUSH
46156: CALL_OW 264
46160: PUSH
46161: LD_INT 14
46163: PUSH
46164: LD_INT 53
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: IN
46171: IFFALSE 46192
// points := [ 40 , 10 , 20 ] ;
46173: LD_ADDR_VAR 0 9
46177: PUSH
46178: LD_INT 40
46180: PUSH
46181: LD_INT 10
46183: PUSH
46184: LD_INT 20
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: LIST
46191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46192: LD_VAR 0 6
46196: PPUSH
46197: CALL_OW 264
46201: PUSH
46202: LD_INT 9
46204: PUSH
46205: EMPTY
46206: LIST
46207: IN
46208: IFFALSE 46229
// points := [ 5 , 70 , 20 ] ;
46210: LD_ADDR_VAR 0 9
46214: PUSH
46215: LD_INT 5
46217: PUSH
46218: LD_INT 70
46220: PUSH
46221: LD_INT 20
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: LIST
46228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46229: LD_VAR 0 6
46233: PPUSH
46234: CALL_OW 264
46238: PUSH
46239: LD_INT 10
46241: PUSH
46242: EMPTY
46243: LIST
46244: IN
46245: IFFALSE 46266
// points := [ 35 , 110 , 70 ] ;
46247: LD_ADDR_VAR 0 9
46251: PUSH
46252: LD_INT 35
46254: PUSH
46255: LD_INT 110
46257: PUSH
46258: LD_INT 70
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: LIST
46265: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46266: LD_VAR 0 6
46270: PPUSH
46271: CALL_OW 265
46275: PUSH
46276: LD_INT 25
46278: EQUAL
46279: IFFALSE 46300
// points := [ 80 , 65 , 100 ] ;
46281: LD_ADDR_VAR 0 9
46285: PUSH
46286: LD_INT 80
46288: PUSH
46289: LD_INT 65
46291: PUSH
46292: LD_INT 100
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: LIST
46299: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46300: LD_VAR 0 6
46304: PPUSH
46305: CALL_OW 263
46309: PUSH
46310: LD_INT 1
46312: EQUAL
46313: IFFALSE 46348
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46315: LD_ADDR_VAR 0 10
46319: PUSH
46320: LD_VAR 0 10
46324: PUSH
46325: LD_VAR 0 6
46329: PPUSH
46330: CALL_OW 311
46334: PPUSH
46335: LD_INT 3
46337: PPUSH
46338: CALL_OW 259
46342: PUSH
46343: LD_INT 4
46345: MUL
46346: MUL
46347: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46348: LD_VAR 0 6
46352: PPUSH
46353: CALL_OW 263
46357: PUSH
46358: LD_INT 2
46360: EQUAL
46361: IFFALSE 46412
// begin j := IsControledBy ( i ) ;
46363: LD_ADDR_VAR 0 7
46367: PUSH
46368: LD_VAR 0 6
46372: PPUSH
46373: CALL_OW 312
46377: ST_TO_ADDR
// if j then
46378: LD_VAR 0 7
46382: IFFALSE 46412
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46384: LD_ADDR_VAR 0 10
46388: PUSH
46389: LD_VAR 0 10
46393: PUSH
46394: LD_VAR 0 7
46398: PPUSH
46399: LD_INT 3
46401: PPUSH
46402: CALL_OW 259
46406: PUSH
46407: LD_INT 3
46409: MUL
46410: MUL
46411: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46412: LD_VAR 0 6
46416: PPUSH
46417: CALL_OW 264
46421: PUSH
46422: LD_INT 5
46424: PUSH
46425: LD_INT 6
46427: PUSH
46428: LD_INT 46
46430: PUSH
46431: LD_INT 44
46433: PUSH
46434: LD_INT 47
46436: PUSH
46437: LD_INT 45
46439: PUSH
46440: LD_INT 28
46442: PUSH
46443: LD_INT 7
46445: PUSH
46446: LD_INT 27
46448: PUSH
46449: LD_INT 29
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: IN
46464: PUSH
46465: LD_VAR 0 1
46469: PPUSH
46470: LD_INT 52
46472: PPUSH
46473: CALL_OW 321
46477: PUSH
46478: LD_INT 2
46480: EQUAL
46481: AND
46482: IFFALSE 46499
// bpoints := bpoints * 1.2 ;
46484: LD_ADDR_VAR 0 10
46488: PUSH
46489: LD_VAR 0 10
46493: PUSH
46494: LD_REAL  1.20000000000000E+0000
46497: MUL
46498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46499: LD_VAR 0 6
46503: PPUSH
46504: CALL_OW 264
46508: PUSH
46509: LD_INT 6
46511: PUSH
46512: LD_INT 46
46514: PUSH
46515: LD_INT 47
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: LIST
46522: IN
46523: IFFALSE 46540
// bpoints := bpoints * 1.2 ;
46525: LD_ADDR_VAR 0 10
46529: PUSH
46530: LD_VAR 0 10
46534: PUSH
46535: LD_REAL  1.20000000000000E+0000
46538: MUL
46539: ST_TO_ADDR
// end ; unit_building :
46540: GO 46554
46542: LD_INT 3
46544: DOUBLE
46545: EQUAL
46546: IFTRUE 46550
46548: GO 46553
46550: POP
// ; end ;
46551: GO 46554
46553: POP
// for j = 1 to 3 do
46554: LD_ADDR_VAR 0 7
46558: PUSH
46559: DOUBLE
46560: LD_INT 1
46562: DEC
46563: ST_TO_ADDR
46564: LD_INT 3
46566: PUSH
46567: FOR_TO
46568: IFFALSE 46621
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46570: LD_ADDR_VAR 0 5
46574: PUSH
46575: LD_VAR 0 5
46579: PPUSH
46580: LD_VAR 0 7
46584: PPUSH
46585: LD_VAR 0 5
46589: PUSH
46590: LD_VAR 0 7
46594: ARRAY
46595: PUSH
46596: LD_VAR 0 9
46600: PUSH
46601: LD_VAR 0 7
46605: ARRAY
46606: PUSH
46607: LD_VAR 0 10
46611: MUL
46612: PLUS
46613: PPUSH
46614: CALL_OW 1
46618: ST_TO_ADDR
46619: GO 46567
46621: POP
46622: POP
// end ;
46623: GO 45106
46625: POP
46626: POP
// result := Replace ( result , 4 , tmp ) ;
46627: LD_ADDR_VAR 0 5
46631: PUSH
46632: LD_VAR 0 5
46636: PPUSH
46637: LD_INT 4
46639: PPUSH
46640: LD_VAR 0 8
46644: PPUSH
46645: CALL_OW 1
46649: ST_TO_ADDR
// end ;
46650: LD_VAR 0 5
46654: RET
// export function DangerAtRange ( unit , range ) ; begin
46655: LD_INT 0
46657: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46658: LD_ADDR_VAR 0 3
46662: PUSH
46663: LD_VAR 0 1
46667: PPUSH
46668: CALL_OW 255
46672: PPUSH
46673: LD_VAR 0 1
46677: PPUSH
46678: CALL_OW 250
46682: PPUSH
46683: LD_VAR 0 1
46687: PPUSH
46688: CALL_OW 251
46692: PPUSH
46693: LD_VAR 0 2
46697: PPUSH
46698: CALL 44958 0 4
46702: ST_TO_ADDR
// end ;
46703: LD_VAR 0 3
46707: RET
// export function DangerInArea ( side , area ) ; begin
46708: LD_INT 0
46710: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46711: LD_ADDR_VAR 0 3
46715: PUSH
46716: LD_VAR 0 2
46720: PPUSH
46721: LD_INT 81
46723: PUSH
46724: LD_VAR 0 1
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PPUSH
46733: CALL_OW 70
46737: ST_TO_ADDR
// end ;
46738: LD_VAR 0 3
46742: RET
// export function IsExtension ( b ) ; begin
46743: LD_INT 0
46745: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46746: LD_ADDR_VAR 0 2
46750: PUSH
46751: LD_VAR 0 1
46755: PUSH
46756: LD_INT 23
46758: PUSH
46759: LD_INT 20
46761: PUSH
46762: LD_INT 22
46764: PUSH
46765: LD_INT 17
46767: PUSH
46768: LD_INT 24
46770: PUSH
46771: LD_INT 21
46773: PUSH
46774: LD_INT 19
46776: PUSH
46777: LD_INT 16
46779: PUSH
46780: LD_INT 25
46782: PUSH
46783: LD_INT 18
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: IN
46798: ST_TO_ADDR
// end ;
46799: LD_VAR 0 2
46803: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
46804: LD_INT 0
46806: PPUSH
46807: PPUSH
46808: PPUSH
// result := [ ] ;
46809: LD_ADDR_VAR 0 3
46813: PUSH
46814: EMPTY
46815: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46816: LD_ADDR_VAR 0 4
46820: PUSH
46821: LD_VAR 0 2
46825: PPUSH
46826: LD_INT 21
46828: PUSH
46829: LD_INT 3
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PPUSH
46836: CALL_OW 70
46840: ST_TO_ADDR
// if not tmp then
46841: LD_VAR 0 4
46845: NOT
46846: IFFALSE 46850
// exit ;
46848: GO 46908
// for i in tmp do
46850: LD_ADDR_VAR 0 5
46854: PUSH
46855: LD_VAR 0 4
46859: PUSH
46860: FOR_IN
46861: IFFALSE 46896
// if GetBase ( i ) <> base then
46863: LD_VAR 0 5
46867: PPUSH
46868: CALL_OW 274
46872: PUSH
46873: LD_VAR 0 1
46877: NONEQUAL
46878: IFFALSE 46894
// ComLinkToBase ( base , i ) ;
46880: LD_VAR 0 1
46884: PPUSH
46885: LD_VAR 0 5
46889: PPUSH
46890: CALL_OW 169
46894: GO 46860
46896: POP
46897: POP
// result := tmp ;
46898: LD_ADDR_VAR 0 3
46902: PUSH
46903: LD_VAR 0 4
46907: ST_TO_ADDR
// end ;
46908: LD_VAR 0 3
46912: RET
// export function ComComplete ( unit , b ) ; var i ; begin
46913: LD_INT 0
46915: PPUSH
46916: PPUSH
// if BuildingStatus ( b ) = bs_build then
46917: LD_VAR 0 2
46921: PPUSH
46922: CALL_OW 461
46926: PUSH
46927: LD_INT 1
46929: EQUAL
46930: IFFALSE 46990
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46932: LD_VAR 0 1
46936: PPUSH
46937: LD_STRING h
46939: PUSH
46940: LD_VAR 0 2
46944: PPUSH
46945: CALL_OW 250
46949: PUSH
46950: LD_VAR 0 2
46954: PPUSH
46955: CALL_OW 251
46959: PUSH
46960: LD_VAR 0 2
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: PUSH
46983: EMPTY
46984: LIST
46985: PPUSH
46986: CALL_OW 446
// end ;
46990: LD_VAR 0 3
46994: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46995: LD_INT 0
46997: PPUSH
46998: PPUSH
46999: PPUSH
47000: PPUSH
47001: PPUSH
47002: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
47003: LD_VAR 0 1
47007: NOT
47008: PUSH
47009: LD_VAR 0 1
47013: PPUSH
47014: CALL_OW 263
47018: PUSH
47019: LD_INT 2
47021: EQUAL
47022: NOT
47023: OR
47024: IFFALSE 47028
// exit ;
47026: GO 47344
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47028: LD_ADDR_VAR 0 6
47032: PUSH
47033: LD_INT 22
47035: PUSH
47036: LD_VAR 0 1
47040: PPUSH
47041: CALL_OW 255
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: LD_INT 30
47055: PUSH
47056: LD_INT 36
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 34
47065: PUSH
47066: LD_INT 31
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: LIST
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PPUSH
47082: CALL_OW 69
47086: ST_TO_ADDR
// if not tmp then
47087: LD_VAR 0 6
47091: NOT
47092: IFFALSE 47096
// exit ;
47094: GO 47344
// result := [ ] ;
47096: LD_ADDR_VAR 0 2
47100: PUSH
47101: EMPTY
47102: ST_TO_ADDR
// for i in tmp do
47103: LD_ADDR_VAR 0 3
47107: PUSH
47108: LD_VAR 0 6
47112: PUSH
47113: FOR_IN
47114: IFFALSE 47185
// begin t := UnitsInside ( i ) ;
47116: LD_ADDR_VAR 0 4
47120: PUSH
47121: LD_VAR 0 3
47125: PPUSH
47126: CALL_OW 313
47130: ST_TO_ADDR
// if t then
47131: LD_VAR 0 4
47135: IFFALSE 47183
// for j in t do
47137: LD_ADDR_VAR 0 7
47141: PUSH
47142: LD_VAR 0 4
47146: PUSH
47147: FOR_IN
47148: IFFALSE 47181
// result := Insert ( result , result + 1 , j ) ;
47150: LD_ADDR_VAR 0 2
47154: PUSH
47155: LD_VAR 0 2
47159: PPUSH
47160: LD_VAR 0 2
47164: PUSH
47165: LD_INT 1
47167: PLUS
47168: PPUSH
47169: LD_VAR 0 7
47173: PPUSH
47174: CALL_OW 2
47178: ST_TO_ADDR
47179: GO 47147
47181: POP
47182: POP
// end ;
47183: GO 47113
47185: POP
47186: POP
// if not result then
47187: LD_VAR 0 2
47191: NOT
47192: IFFALSE 47196
// exit ;
47194: GO 47344
// mech := result [ 1 ] ;
47196: LD_ADDR_VAR 0 5
47200: PUSH
47201: LD_VAR 0 2
47205: PUSH
47206: LD_INT 1
47208: ARRAY
47209: ST_TO_ADDR
// if result > 1 then
47210: LD_VAR 0 2
47214: PUSH
47215: LD_INT 1
47217: GREATER
47218: IFFALSE 47330
// for i = 2 to result do
47220: LD_ADDR_VAR 0 3
47224: PUSH
47225: DOUBLE
47226: LD_INT 2
47228: DEC
47229: ST_TO_ADDR
47230: LD_VAR 0 2
47234: PUSH
47235: FOR_TO
47236: IFFALSE 47328
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47238: LD_ADDR_VAR 0 4
47242: PUSH
47243: LD_VAR 0 2
47247: PUSH
47248: LD_VAR 0 3
47252: ARRAY
47253: PPUSH
47254: LD_INT 3
47256: PPUSH
47257: CALL_OW 259
47261: PUSH
47262: LD_VAR 0 2
47266: PUSH
47267: LD_VAR 0 3
47271: ARRAY
47272: PPUSH
47273: CALL_OW 432
47277: MINUS
47278: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47279: LD_VAR 0 4
47283: PUSH
47284: LD_VAR 0 5
47288: PPUSH
47289: LD_INT 3
47291: PPUSH
47292: CALL_OW 259
47296: PUSH
47297: LD_VAR 0 5
47301: PPUSH
47302: CALL_OW 432
47306: MINUS
47307: GREATEREQUAL
47308: IFFALSE 47326
// mech := result [ i ] ;
47310: LD_ADDR_VAR 0 5
47314: PUSH
47315: LD_VAR 0 2
47319: PUSH
47320: LD_VAR 0 3
47324: ARRAY
47325: ST_TO_ADDR
// end ;
47326: GO 47235
47328: POP
47329: POP
// ComLinkTo ( vehicle , mech ) ;
47330: LD_VAR 0 1
47334: PPUSH
47335: LD_VAR 0 5
47339: PPUSH
47340: CALL_OW 135
// end ;
47344: LD_VAR 0 2
47348: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47349: LD_INT 0
47351: PPUSH
47352: PPUSH
47353: PPUSH
47354: PPUSH
47355: PPUSH
47356: PPUSH
47357: PPUSH
47358: PPUSH
47359: PPUSH
47360: PPUSH
47361: PPUSH
47362: PPUSH
47363: PPUSH
// result := [ ] ;
47364: LD_ADDR_VAR 0 7
47368: PUSH
47369: EMPTY
47370: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47371: LD_VAR 0 1
47375: PPUSH
47376: CALL_OW 266
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: IN
47391: NOT
47392: IFFALSE 47396
// exit ;
47394: GO 49027
// if name then
47396: LD_VAR 0 3
47400: IFFALSE 47416
// SetBName ( base_dep , name ) ;
47402: LD_VAR 0 1
47406: PPUSH
47407: LD_VAR 0 3
47411: PPUSH
47412: CALL_OW 500
// base := GetBase ( base_dep ) ;
47416: LD_ADDR_VAR 0 15
47420: PUSH
47421: LD_VAR 0 1
47425: PPUSH
47426: CALL_OW 274
47430: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47431: LD_ADDR_VAR 0 16
47435: PUSH
47436: LD_VAR 0 1
47440: PPUSH
47441: CALL_OW 255
47445: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47446: LD_ADDR_VAR 0 17
47450: PUSH
47451: LD_VAR 0 1
47455: PPUSH
47456: CALL_OW 248
47460: ST_TO_ADDR
// if sources then
47461: LD_VAR 0 5
47465: IFFALSE 47512
// for i = 1 to 3 do
47467: LD_ADDR_VAR 0 8
47471: PUSH
47472: DOUBLE
47473: LD_INT 1
47475: DEC
47476: ST_TO_ADDR
47477: LD_INT 3
47479: PUSH
47480: FOR_TO
47481: IFFALSE 47510
// AddResourceType ( base , i , sources [ i ] ) ;
47483: LD_VAR 0 15
47487: PPUSH
47488: LD_VAR 0 8
47492: PPUSH
47493: LD_VAR 0 5
47497: PUSH
47498: LD_VAR 0 8
47502: ARRAY
47503: PPUSH
47504: CALL_OW 276
47508: GO 47480
47510: POP
47511: POP
// buildings := GetBaseBuildings ( base , area ) ;
47512: LD_ADDR_VAR 0 18
47516: PUSH
47517: LD_VAR 0 15
47521: PPUSH
47522: LD_VAR 0 2
47526: PPUSH
47527: CALL 46804 0 2
47531: ST_TO_ADDR
// InitHc ;
47532: CALL_OW 19
// InitUc ;
47536: CALL_OW 18
// uc_side := side ;
47540: LD_ADDR_OWVAR 20
47544: PUSH
47545: LD_VAR 0 16
47549: ST_TO_ADDR
// uc_nation := nation ;
47550: LD_ADDR_OWVAR 21
47554: PUSH
47555: LD_VAR 0 17
47559: ST_TO_ADDR
// if buildings then
47560: LD_VAR 0 18
47564: IFFALSE 48886
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47566: LD_ADDR_VAR 0 19
47570: PUSH
47571: LD_VAR 0 18
47575: PPUSH
47576: LD_INT 2
47578: PUSH
47579: LD_INT 30
47581: PUSH
47582: LD_INT 29
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 30
47591: PUSH
47592: LD_INT 30
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: LIST
47603: PPUSH
47604: CALL_OW 72
47608: ST_TO_ADDR
// if tmp then
47609: LD_VAR 0 19
47613: IFFALSE 47661
// for i in tmp do
47615: LD_ADDR_VAR 0 8
47619: PUSH
47620: LD_VAR 0 19
47624: PUSH
47625: FOR_IN
47626: IFFALSE 47659
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47628: LD_VAR 0 8
47632: PPUSH
47633: CALL_OW 250
47637: PPUSH
47638: LD_VAR 0 8
47642: PPUSH
47643: CALL_OW 251
47647: PPUSH
47648: LD_VAR 0 16
47652: PPUSH
47653: CALL_OW 441
47657: GO 47625
47659: POP
47660: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47661: LD_VAR 0 18
47665: PPUSH
47666: LD_INT 2
47668: PUSH
47669: LD_INT 30
47671: PUSH
47672: LD_INT 32
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 30
47681: PUSH
47682: LD_INT 33
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: LIST
47693: PPUSH
47694: CALL_OW 72
47698: IFFALSE 47786
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47700: LD_ADDR_VAR 0 8
47704: PUSH
47705: LD_VAR 0 18
47709: PPUSH
47710: LD_INT 2
47712: PUSH
47713: LD_INT 30
47715: PUSH
47716: LD_INT 32
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 30
47725: PUSH
47726: LD_INT 33
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: LIST
47737: PPUSH
47738: CALL_OW 72
47742: PUSH
47743: FOR_IN
47744: IFFALSE 47784
// begin if not GetBWeapon ( i ) then
47746: LD_VAR 0 8
47750: PPUSH
47751: CALL_OW 269
47755: NOT
47756: IFFALSE 47782
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47758: LD_VAR 0 8
47762: PPUSH
47763: LD_VAR 0 8
47767: PPUSH
47768: LD_VAR 0 2
47772: PPUSH
47773: CALL 49032 0 2
47777: PPUSH
47778: CALL_OW 431
// end ;
47782: GO 47743
47784: POP
47785: POP
// end ; for i = 1 to personel do
47786: LD_ADDR_VAR 0 8
47790: PUSH
47791: DOUBLE
47792: LD_INT 1
47794: DEC
47795: ST_TO_ADDR
47796: LD_VAR 0 6
47800: PUSH
47801: FOR_TO
47802: IFFALSE 48866
// begin if i > 4 then
47804: LD_VAR 0 8
47808: PUSH
47809: LD_INT 4
47811: GREATER
47812: IFFALSE 47816
// break ;
47814: GO 48866
// case i of 1 :
47816: LD_VAR 0 8
47820: PUSH
47821: LD_INT 1
47823: DOUBLE
47824: EQUAL
47825: IFTRUE 47829
47827: GO 47909
47829: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47830: LD_ADDR_VAR 0 12
47834: PUSH
47835: LD_VAR 0 18
47839: PPUSH
47840: LD_INT 22
47842: PUSH
47843: LD_VAR 0 16
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 58
47854: PUSH
47855: EMPTY
47856: LIST
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: LD_INT 30
47863: PUSH
47864: LD_INT 32
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 30
47873: PUSH
47874: LD_INT 4
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 30
47883: PUSH
47884: LD_INT 5
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: LIST
47901: PPUSH
47902: CALL_OW 72
47906: ST_TO_ADDR
47907: GO 48131
47909: LD_INT 2
47911: DOUBLE
47912: EQUAL
47913: IFTRUE 47917
47915: GO 47979
47917: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47918: LD_ADDR_VAR 0 12
47922: PUSH
47923: LD_VAR 0 18
47927: PPUSH
47928: LD_INT 22
47930: PUSH
47931: LD_VAR 0 16
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: LD_INT 30
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 30
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PPUSH
47972: CALL_OW 72
47976: ST_TO_ADDR
47977: GO 48131
47979: LD_INT 3
47981: DOUBLE
47982: EQUAL
47983: IFTRUE 47987
47985: GO 48049
47987: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47988: LD_ADDR_VAR 0 12
47992: PUSH
47993: LD_VAR 0 18
47997: PPUSH
47998: LD_INT 22
48000: PUSH
48001: LD_VAR 0 16
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: LD_INT 30
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 30
48025: PUSH
48026: LD_INT 3
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: LIST
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PPUSH
48042: CALL_OW 72
48046: ST_TO_ADDR
48047: GO 48131
48049: LD_INT 4
48051: DOUBLE
48052: EQUAL
48053: IFTRUE 48057
48055: GO 48130
48057: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48058: LD_ADDR_VAR 0 12
48062: PUSH
48063: LD_VAR 0 18
48067: PPUSH
48068: LD_INT 22
48070: PUSH
48071: LD_VAR 0 16
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 2
48082: PUSH
48083: LD_INT 30
48085: PUSH
48086: LD_INT 6
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 30
48095: PUSH
48096: LD_INT 7
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 30
48105: PUSH
48106: LD_INT 8
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PPUSH
48123: CALL_OW 72
48127: ST_TO_ADDR
48128: GO 48131
48130: POP
// if i = 1 then
48131: LD_VAR 0 8
48135: PUSH
48136: LD_INT 1
48138: EQUAL
48139: IFFALSE 48250
// begin tmp := [ ] ;
48141: LD_ADDR_VAR 0 19
48145: PUSH
48146: EMPTY
48147: ST_TO_ADDR
// for j in f do
48148: LD_ADDR_VAR 0 9
48152: PUSH
48153: LD_VAR 0 12
48157: PUSH
48158: FOR_IN
48159: IFFALSE 48232
// if GetBType ( j ) = b_bunker then
48161: LD_VAR 0 9
48165: PPUSH
48166: CALL_OW 266
48170: PUSH
48171: LD_INT 32
48173: EQUAL
48174: IFFALSE 48201
// tmp := Insert ( tmp , 1 , j ) else
48176: LD_ADDR_VAR 0 19
48180: PUSH
48181: LD_VAR 0 19
48185: PPUSH
48186: LD_INT 1
48188: PPUSH
48189: LD_VAR 0 9
48193: PPUSH
48194: CALL_OW 2
48198: ST_TO_ADDR
48199: GO 48230
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48201: LD_ADDR_VAR 0 19
48205: PUSH
48206: LD_VAR 0 19
48210: PPUSH
48211: LD_VAR 0 19
48215: PUSH
48216: LD_INT 1
48218: PLUS
48219: PPUSH
48220: LD_VAR 0 9
48224: PPUSH
48225: CALL_OW 2
48229: ST_TO_ADDR
48230: GO 48158
48232: POP
48233: POP
// if tmp then
48234: LD_VAR 0 19
48238: IFFALSE 48250
// f := tmp ;
48240: LD_ADDR_VAR 0 12
48244: PUSH
48245: LD_VAR 0 19
48249: ST_TO_ADDR
// end ; x := personel [ i ] ;
48250: LD_ADDR_VAR 0 13
48254: PUSH
48255: LD_VAR 0 6
48259: PUSH
48260: LD_VAR 0 8
48264: ARRAY
48265: ST_TO_ADDR
// if x = - 1 then
48266: LD_VAR 0 13
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: EQUAL
48275: IFFALSE 48484
// begin for j in f do
48277: LD_ADDR_VAR 0 9
48281: PUSH
48282: LD_VAR 0 12
48286: PUSH
48287: FOR_IN
48288: IFFALSE 48480
// repeat InitHc ;
48290: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48294: LD_VAR 0 9
48298: PPUSH
48299: CALL_OW 266
48303: PUSH
48304: LD_INT 5
48306: EQUAL
48307: IFFALSE 48377
// begin if UnitsInside ( j ) < 3 then
48309: LD_VAR 0 9
48313: PPUSH
48314: CALL_OW 313
48318: PUSH
48319: LD_INT 3
48321: LESS
48322: IFFALSE 48358
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48324: LD_INT 0
48326: PPUSH
48327: LD_INT 5
48329: PUSH
48330: LD_INT 8
48332: PUSH
48333: LD_INT 9
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: LIST
48340: PUSH
48341: LD_VAR 0 17
48345: ARRAY
48346: PPUSH
48347: LD_VAR 0 4
48351: PPUSH
48352: CALL_OW 380
48356: GO 48375
// PrepareHuman ( false , i , skill ) ;
48358: LD_INT 0
48360: PPUSH
48361: LD_VAR 0 8
48365: PPUSH
48366: LD_VAR 0 4
48370: PPUSH
48371: CALL_OW 380
// end else
48375: GO 48394
// PrepareHuman ( false , i , skill ) ;
48377: LD_INT 0
48379: PPUSH
48380: LD_VAR 0 8
48384: PPUSH
48385: LD_VAR 0 4
48389: PPUSH
48390: CALL_OW 380
// un := CreateHuman ;
48394: LD_ADDR_VAR 0 14
48398: PUSH
48399: CALL_OW 44
48403: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48404: LD_ADDR_VAR 0 7
48408: PUSH
48409: LD_VAR 0 7
48413: PPUSH
48414: LD_INT 1
48416: PPUSH
48417: LD_VAR 0 14
48421: PPUSH
48422: CALL_OW 2
48426: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48427: LD_VAR 0 14
48431: PPUSH
48432: LD_VAR 0 9
48436: PPUSH
48437: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48441: LD_VAR 0 9
48445: PPUSH
48446: CALL_OW 313
48450: PUSH
48451: LD_INT 6
48453: EQUAL
48454: PUSH
48455: LD_VAR 0 9
48459: PPUSH
48460: CALL_OW 266
48464: PUSH
48465: LD_INT 32
48467: PUSH
48468: LD_INT 31
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: IN
48475: OR
48476: IFFALSE 48290
48478: GO 48287
48480: POP
48481: POP
// end else
48482: GO 48864
// for j = 1 to x do
48484: LD_ADDR_VAR 0 9
48488: PUSH
48489: DOUBLE
48490: LD_INT 1
48492: DEC
48493: ST_TO_ADDR
48494: LD_VAR 0 13
48498: PUSH
48499: FOR_TO
48500: IFFALSE 48862
// begin InitHc ;
48502: CALL_OW 19
// if not f then
48506: LD_VAR 0 12
48510: NOT
48511: IFFALSE 48600
// begin PrepareHuman ( false , i , skill ) ;
48513: LD_INT 0
48515: PPUSH
48516: LD_VAR 0 8
48520: PPUSH
48521: LD_VAR 0 4
48525: PPUSH
48526: CALL_OW 380
// un := CreateHuman ;
48530: LD_ADDR_VAR 0 14
48534: PUSH
48535: CALL_OW 44
48539: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48540: LD_ADDR_VAR 0 7
48544: PUSH
48545: LD_VAR 0 7
48549: PPUSH
48550: LD_INT 1
48552: PPUSH
48553: LD_VAR 0 14
48557: PPUSH
48558: CALL_OW 2
48562: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48563: LD_VAR 0 14
48567: PPUSH
48568: LD_VAR 0 1
48572: PPUSH
48573: CALL_OW 250
48577: PPUSH
48578: LD_VAR 0 1
48582: PPUSH
48583: CALL_OW 251
48587: PPUSH
48588: LD_INT 10
48590: PPUSH
48591: LD_INT 0
48593: PPUSH
48594: CALL_OW 50
// continue ;
48598: GO 48499
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48600: LD_VAR 0 12
48604: PUSH
48605: LD_INT 1
48607: ARRAY
48608: PPUSH
48609: CALL_OW 313
48613: PUSH
48614: LD_VAR 0 12
48618: PUSH
48619: LD_INT 1
48621: ARRAY
48622: PPUSH
48623: CALL_OW 266
48627: PUSH
48628: LD_INT 32
48630: PUSH
48631: LD_INT 31
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: IN
48638: AND
48639: PUSH
48640: LD_VAR 0 12
48644: PUSH
48645: LD_INT 1
48647: ARRAY
48648: PPUSH
48649: CALL_OW 313
48653: PUSH
48654: LD_INT 6
48656: EQUAL
48657: OR
48658: IFFALSE 48678
// f := Delete ( f , 1 ) ;
48660: LD_ADDR_VAR 0 12
48664: PUSH
48665: LD_VAR 0 12
48669: PPUSH
48670: LD_INT 1
48672: PPUSH
48673: CALL_OW 3
48677: ST_TO_ADDR
// if not f then
48678: LD_VAR 0 12
48682: NOT
48683: IFFALSE 48701
// begin x := x + 2 ;
48685: LD_ADDR_VAR 0 13
48689: PUSH
48690: LD_VAR 0 13
48694: PUSH
48695: LD_INT 2
48697: PLUS
48698: ST_TO_ADDR
// continue ;
48699: GO 48499
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48701: LD_VAR 0 12
48705: PUSH
48706: LD_INT 1
48708: ARRAY
48709: PPUSH
48710: CALL_OW 266
48714: PUSH
48715: LD_INT 5
48717: EQUAL
48718: IFFALSE 48792
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48720: LD_VAR 0 12
48724: PUSH
48725: LD_INT 1
48727: ARRAY
48728: PPUSH
48729: CALL_OW 313
48733: PUSH
48734: LD_INT 3
48736: LESS
48737: IFFALSE 48773
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48739: LD_INT 0
48741: PPUSH
48742: LD_INT 5
48744: PUSH
48745: LD_INT 8
48747: PUSH
48748: LD_INT 9
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: LIST
48755: PUSH
48756: LD_VAR 0 17
48760: ARRAY
48761: PPUSH
48762: LD_VAR 0 4
48766: PPUSH
48767: CALL_OW 380
48771: GO 48790
// PrepareHuman ( false , i , skill ) ;
48773: LD_INT 0
48775: PPUSH
48776: LD_VAR 0 8
48780: PPUSH
48781: LD_VAR 0 4
48785: PPUSH
48786: CALL_OW 380
// end else
48790: GO 48809
// PrepareHuman ( false , i , skill ) ;
48792: LD_INT 0
48794: PPUSH
48795: LD_VAR 0 8
48799: PPUSH
48800: LD_VAR 0 4
48804: PPUSH
48805: CALL_OW 380
// un := CreateHuman ;
48809: LD_ADDR_VAR 0 14
48813: PUSH
48814: CALL_OW 44
48818: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48819: LD_ADDR_VAR 0 7
48823: PUSH
48824: LD_VAR 0 7
48828: PPUSH
48829: LD_INT 1
48831: PPUSH
48832: LD_VAR 0 14
48836: PPUSH
48837: CALL_OW 2
48841: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48842: LD_VAR 0 14
48846: PPUSH
48847: LD_VAR 0 12
48851: PUSH
48852: LD_INT 1
48854: ARRAY
48855: PPUSH
48856: CALL_OW 52
// end ;
48860: GO 48499
48862: POP
48863: POP
// end ;
48864: GO 47801
48866: POP
48867: POP
// result := result ^ buildings ;
48868: LD_ADDR_VAR 0 7
48872: PUSH
48873: LD_VAR 0 7
48877: PUSH
48878: LD_VAR 0 18
48882: ADD
48883: ST_TO_ADDR
// end else
48884: GO 49027
// begin for i = 1 to personel do
48886: LD_ADDR_VAR 0 8
48890: PUSH
48891: DOUBLE
48892: LD_INT 1
48894: DEC
48895: ST_TO_ADDR
48896: LD_VAR 0 6
48900: PUSH
48901: FOR_TO
48902: IFFALSE 49025
// begin if i > 4 then
48904: LD_VAR 0 8
48908: PUSH
48909: LD_INT 4
48911: GREATER
48912: IFFALSE 48916
// break ;
48914: GO 49025
// x := personel [ i ] ;
48916: LD_ADDR_VAR 0 13
48920: PUSH
48921: LD_VAR 0 6
48925: PUSH
48926: LD_VAR 0 8
48930: ARRAY
48931: ST_TO_ADDR
// if x = - 1 then
48932: LD_VAR 0 13
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: EQUAL
48941: IFFALSE 48945
// continue ;
48943: GO 48901
// PrepareHuman ( false , i , skill ) ;
48945: LD_INT 0
48947: PPUSH
48948: LD_VAR 0 8
48952: PPUSH
48953: LD_VAR 0 4
48957: PPUSH
48958: CALL_OW 380
// un := CreateHuman ;
48962: LD_ADDR_VAR 0 14
48966: PUSH
48967: CALL_OW 44
48971: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48972: LD_VAR 0 14
48976: PPUSH
48977: LD_VAR 0 1
48981: PPUSH
48982: CALL_OW 250
48986: PPUSH
48987: LD_VAR 0 1
48991: PPUSH
48992: CALL_OW 251
48996: PPUSH
48997: LD_INT 10
48999: PPUSH
49000: LD_INT 0
49002: PPUSH
49003: CALL_OW 50
// result := result ^ un ;
49007: LD_ADDR_VAR 0 7
49011: PUSH
49012: LD_VAR 0 7
49016: PUSH
49017: LD_VAR 0 14
49021: ADD
49022: ST_TO_ADDR
// end ;
49023: GO 48901
49025: POP
49026: POP
// end ; end ;
49027: LD_VAR 0 7
49031: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49032: LD_INT 0
49034: PPUSH
49035: PPUSH
49036: PPUSH
49037: PPUSH
49038: PPUSH
49039: PPUSH
49040: PPUSH
49041: PPUSH
49042: PPUSH
49043: PPUSH
49044: PPUSH
49045: PPUSH
49046: PPUSH
49047: PPUSH
49048: PPUSH
49049: PPUSH
// result := false ;
49050: LD_ADDR_VAR 0 3
49054: PUSH
49055: LD_INT 0
49057: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49058: LD_VAR 0 1
49062: NOT
49063: PUSH
49064: LD_VAR 0 1
49068: PPUSH
49069: CALL_OW 266
49073: PUSH
49074: LD_INT 32
49076: PUSH
49077: LD_INT 33
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: IN
49084: NOT
49085: OR
49086: IFFALSE 49090
// exit ;
49088: GO 50226
// nat := GetNation ( tower ) ;
49090: LD_ADDR_VAR 0 12
49094: PUSH
49095: LD_VAR 0 1
49099: PPUSH
49100: CALL_OW 248
49104: ST_TO_ADDR
// side := GetSide ( tower ) ;
49105: LD_ADDR_VAR 0 16
49109: PUSH
49110: LD_VAR 0 1
49114: PPUSH
49115: CALL_OW 255
49119: ST_TO_ADDR
// x := GetX ( tower ) ;
49120: LD_ADDR_VAR 0 10
49124: PUSH
49125: LD_VAR 0 1
49129: PPUSH
49130: CALL_OW 250
49134: ST_TO_ADDR
// y := GetY ( tower ) ;
49135: LD_ADDR_VAR 0 11
49139: PUSH
49140: LD_VAR 0 1
49144: PPUSH
49145: CALL_OW 251
49149: ST_TO_ADDR
// if not x or not y then
49150: LD_VAR 0 10
49154: NOT
49155: PUSH
49156: LD_VAR 0 11
49160: NOT
49161: OR
49162: IFFALSE 49166
// exit ;
49164: GO 50226
// weapon := 0 ;
49166: LD_ADDR_VAR 0 18
49170: PUSH
49171: LD_INT 0
49173: ST_TO_ADDR
// fac_list := [ ] ;
49174: LD_ADDR_VAR 0 17
49178: PUSH
49179: EMPTY
49180: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
49181: LD_ADDR_VAR 0 6
49185: PUSH
49186: LD_VAR 0 1
49190: PPUSH
49191: CALL_OW 274
49195: PPUSH
49196: LD_VAR 0 2
49200: PPUSH
49201: CALL 46804 0 2
49205: PPUSH
49206: LD_INT 30
49208: PUSH
49209: LD_INT 3
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PPUSH
49216: CALL_OW 72
49220: ST_TO_ADDR
// if not factories then
49221: LD_VAR 0 6
49225: NOT
49226: IFFALSE 49230
// exit ;
49228: GO 50226
// for i in factories do
49230: LD_ADDR_VAR 0 8
49234: PUSH
49235: LD_VAR 0 6
49239: PUSH
49240: FOR_IN
49241: IFFALSE 49266
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49243: LD_ADDR_VAR 0 17
49247: PUSH
49248: LD_VAR 0 17
49252: PUSH
49253: LD_VAR 0 8
49257: PPUSH
49258: CALL_OW 478
49262: UNION
49263: ST_TO_ADDR
49264: GO 49240
49266: POP
49267: POP
// if not fac_list then
49268: LD_VAR 0 17
49272: NOT
49273: IFFALSE 49277
// exit ;
49275: GO 50226
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49277: LD_ADDR_VAR 0 5
49281: PUSH
49282: LD_INT 4
49284: PUSH
49285: LD_INT 5
49287: PUSH
49288: LD_INT 9
49290: PUSH
49291: LD_INT 10
49293: PUSH
49294: LD_INT 6
49296: PUSH
49297: LD_INT 7
49299: PUSH
49300: LD_INT 11
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 27
49314: PUSH
49315: LD_INT 28
49317: PUSH
49318: LD_INT 26
49320: PUSH
49321: LD_INT 30
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 43
49332: PUSH
49333: LD_INT 44
49335: PUSH
49336: LD_INT 46
49338: PUSH
49339: LD_INT 45
49341: PUSH
49342: LD_INT 47
49344: PUSH
49345: LD_INT 49
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: LIST
49360: PUSH
49361: LD_VAR 0 12
49365: ARRAY
49366: ST_TO_ADDR
// for i in list do
49367: LD_ADDR_VAR 0 8
49371: PUSH
49372: LD_VAR 0 5
49376: PUSH
49377: FOR_IN
49378: IFFALSE 49411
// if not i in fac_list then
49380: LD_VAR 0 8
49384: PUSH
49385: LD_VAR 0 17
49389: IN
49390: NOT
49391: IFFALSE 49409
// list := list diff i ;
49393: LD_ADDR_VAR 0 5
49397: PUSH
49398: LD_VAR 0 5
49402: PUSH
49403: LD_VAR 0 8
49407: DIFF
49408: ST_TO_ADDR
49409: GO 49377
49411: POP
49412: POP
// if not list then
49413: LD_VAR 0 5
49417: NOT
49418: IFFALSE 49422
// exit ;
49420: GO 50226
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49422: LD_VAR 0 12
49426: PUSH
49427: LD_INT 3
49429: EQUAL
49430: PUSH
49431: LD_INT 49
49433: PUSH
49434: LD_VAR 0 5
49438: IN
49439: AND
49440: PUSH
49441: LD_INT 31
49443: PPUSH
49444: LD_VAR 0 16
49448: PPUSH
49449: CALL_OW 321
49453: PUSH
49454: LD_INT 2
49456: EQUAL
49457: AND
49458: IFFALSE 49518
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49460: LD_INT 22
49462: PUSH
49463: LD_VAR 0 16
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 35
49474: PUSH
49475: LD_INT 49
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 91
49484: PUSH
49485: LD_VAR 0 1
49489: PUSH
49490: LD_INT 10
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: LIST
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: LIST
49502: PPUSH
49503: CALL_OW 69
49507: NOT
49508: IFFALSE 49518
// weapon := ru_time_lapser ;
49510: LD_ADDR_VAR 0 18
49514: PUSH
49515: LD_INT 49
49517: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49518: LD_VAR 0 12
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: IN
49533: PUSH
49534: LD_INT 11
49536: PUSH
49537: LD_VAR 0 5
49541: IN
49542: PUSH
49543: LD_INT 30
49545: PUSH
49546: LD_VAR 0 5
49550: IN
49551: OR
49552: AND
49553: PUSH
49554: LD_INT 6
49556: PPUSH
49557: LD_VAR 0 16
49561: PPUSH
49562: CALL_OW 321
49566: PUSH
49567: LD_INT 2
49569: EQUAL
49570: AND
49571: IFFALSE 49736
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49573: LD_INT 22
49575: PUSH
49576: LD_VAR 0 16
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: LD_INT 35
49590: PUSH
49591: LD_INT 11
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 35
49600: PUSH
49601: LD_INT 30
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 91
49615: PUSH
49616: LD_VAR 0 1
49620: PUSH
49621: LD_INT 18
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: LIST
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: LIST
49633: PPUSH
49634: CALL_OW 69
49638: NOT
49639: PUSH
49640: LD_INT 22
49642: PUSH
49643: LD_VAR 0 16
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: LD_INT 30
49657: PUSH
49658: LD_INT 32
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 30
49667: PUSH
49668: LD_INT 33
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 91
49682: PUSH
49683: LD_VAR 0 1
49687: PUSH
49688: LD_INT 12
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: LIST
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: LIST
49700: PUSH
49701: EMPTY
49702: LIST
49703: PPUSH
49704: CALL_OW 69
49708: PUSH
49709: LD_INT 2
49711: GREATER
49712: AND
49713: IFFALSE 49736
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49715: LD_ADDR_VAR 0 18
49719: PUSH
49720: LD_INT 11
49722: PUSH
49723: LD_INT 30
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_VAR 0 12
49734: ARRAY
49735: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49736: LD_VAR 0 18
49740: NOT
49741: PUSH
49742: LD_INT 40
49744: PPUSH
49745: LD_VAR 0 16
49749: PPUSH
49750: CALL_OW 321
49754: PUSH
49755: LD_INT 2
49757: EQUAL
49758: AND
49759: PUSH
49760: LD_INT 7
49762: PUSH
49763: LD_VAR 0 5
49767: IN
49768: PUSH
49769: LD_INT 28
49771: PUSH
49772: LD_VAR 0 5
49776: IN
49777: OR
49778: PUSH
49779: LD_INT 45
49781: PUSH
49782: LD_VAR 0 5
49786: IN
49787: OR
49788: AND
49789: IFFALSE 50043
// begin hex := GetHexInfo ( x , y ) ;
49791: LD_ADDR_VAR 0 4
49795: PUSH
49796: LD_VAR 0 10
49800: PPUSH
49801: LD_VAR 0 11
49805: PPUSH
49806: CALL_OW 546
49810: ST_TO_ADDR
// if hex [ 1 ] then
49811: LD_VAR 0 4
49815: PUSH
49816: LD_INT 1
49818: ARRAY
49819: IFFALSE 49823
// exit ;
49821: GO 50226
// height := hex [ 2 ] ;
49823: LD_ADDR_VAR 0 15
49827: PUSH
49828: LD_VAR 0 4
49832: PUSH
49833: LD_INT 2
49835: ARRAY
49836: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49837: LD_ADDR_VAR 0 14
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: LD_INT 3
49850: PUSH
49851: LD_INT 5
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: ST_TO_ADDR
// for i in tmp do
49860: LD_ADDR_VAR 0 8
49864: PUSH
49865: LD_VAR 0 14
49869: PUSH
49870: FOR_IN
49871: IFFALSE 50041
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49873: LD_ADDR_VAR 0 9
49877: PUSH
49878: LD_VAR 0 10
49882: PPUSH
49883: LD_VAR 0 8
49887: PPUSH
49888: LD_INT 5
49890: PPUSH
49891: CALL_OW 272
49895: PUSH
49896: LD_VAR 0 11
49900: PPUSH
49901: LD_VAR 0 8
49905: PPUSH
49906: LD_INT 5
49908: PPUSH
49909: CALL_OW 273
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49918: LD_VAR 0 9
49922: PUSH
49923: LD_INT 1
49925: ARRAY
49926: PPUSH
49927: LD_VAR 0 9
49931: PUSH
49932: LD_INT 2
49934: ARRAY
49935: PPUSH
49936: CALL_OW 488
49940: IFFALSE 50039
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49942: LD_ADDR_VAR 0 4
49946: PUSH
49947: LD_VAR 0 9
49951: PUSH
49952: LD_INT 1
49954: ARRAY
49955: PPUSH
49956: LD_VAR 0 9
49960: PUSH
49961: LD_INT 2
49963: ARRAY
49964: PPUSH
49965: CALL_OW 546
49969: ST_TO_ADDR
// if hex [ 1 ] then
49970: LD_VAR 0 4
49974: PUSH
49975: LD_INT 1
49977: ARRAY
49978: IFFALSE 49982
// continue ;
49980: GO 49870
// h := hex [ 2 ] ;
49982: LD_ADDR_VAR 0 13
49986: PUSH
49987: LD_VAR 0 4
49991: PUSH
49992: LD_INT 2
49994: ARRAY
49995: ST_TO_ADDR
// if h + 7 < height then
49996: LD_VAR 0 13
50000: PUSH
50001: LD_INT 7
50003: PLUS
50004: PUSH
50005: LD_VAR 0 15
50009: LESS
50010: IFFALSE 50039
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50012: LD_ADDR_VAR 0 18
50016: PUSH
50017: LD_INT 7
50019: PUSH
50020: LD_INT 28
50022: PUSH
50023: LD_INT 45
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: PUSH
50031: LD_VAR 0 12
50035: ARRAY
50036: ST_TO_ADDR
// break ;
50037: GO 50041
// end ; end ; end ;
50039: GO 49870
50041: POP
50042: POP
// end ; if not weapon then
50043: LD_VAR 0 18
50047: NOT
50048: IFFALSE 50108
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50050: LD_ADDR_VAR 0 5
50054: PUSH
50055: LD_VAR 0 5
50059: PUSH
50060: LD_INT 11
50062: PUSH
50063: LD_INT 30
50065: PUSH
50066: LD_INT 49
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: LIST
50073: DIFF
50074: ST_TO_ADDR
// if not list then
50075: LD_VAR 0 5
50079: NOT
50080: IFFALSE 50084
// exit ;
50082: GO 50226
// weapon := list [ rand ( 1 , list ) ] ;
50084: LD_ADDR_VAR 0 18
50088: PUSH
50089: LD_VAR 0 5
50093: PUSH
50094: LD_INT 1
50096: PPUSH
50097: LD_VAR 0 5
50101: PPUSH
50102: CALL_OW 12
50106: ARRAY
50107: ST_TO_ADDR
// end ; if weapon then
50108: LD_VAR 0 18
50112: IFFALSE 50226
// begin tmp := CostOfWeapon ( weapon ) ;
50114: LD_ADDR_VAR 0 14
50118: PUSH
50119: LD_VAR 0 18
50123: PPUSH
50124: CALL_OW 451
50128: ST_TO_ADDR
// j := GetBase ( tower ) ;
50129: LD_ADDR_VAR 0 9
50133: PUSH
50134: LD_VAR 0 1
50138: PPUSH
50139: CALL_OW 274
50143: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50144: LD_VAR 0 9
50148: PPUSH
50149: LD_INT 1
50151: PPUSH
50152: CALL_OW 275
50156: PUSH
50157: LD_VAR 0 14
50161: PUSH
50162: LD_INT 1
50164: ARRAY
50165: GREATEREQUAL
50166: PUSH
50167: LD_VAR 0 9
50171: PPUSH
50172: LD_INT 2
50174: PPUSH
50175: CALL_OW 275
50179: PUSH
50180: LD_VAR 0 14
50184: PUSH
50185: LD_INT 2
50187: ARRAY
50188: GREATEREQUAL
50189: AND
50190: PUSH
50191: LD_VAR 0 9
50195: PPUSH
50196: LD_INT 3
50198: PPUSH
50199: CALL_OW 275
50203: PUSH
50204: LD_VAR 0 14
50208: PUSH
50209: LD_INT 3
50211: ARRAY
50212: GREATEREQUAL
50213: AND
50214: IFFALSE 50226
// result := weapon ;
50216: LD_ADDR_VAR 0 3
50220: PUSH
50221: LD_VAR 0 18
50225: ST_TO_ADDR
// end ; end ;
50226: LD_VAR 0 3
50230: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50231: LD_INT 0
50233: PPUSH
50234: PPUSH
// result := true ;
50235: LD_ADDR_VAR 0 3
50239: PUSH
50240: LD_INT 1
50242: ST_TO_ADDR
// if array1 = array2 then
50243: LD_VAR 0 1
50247: PUSH
50248: LD_VAR 0 2
50252: EQUAL
50253: IFFALSE 50313
// begin for i = 1 to array1 do
50255: LD_ADDR_VAR 0 4
50259: PUSH
50260: DOUBLE
50261: LD_INT 1
50263: DEC
50264: ST_TO_ADDR
50265: LD_VAR 0 1
50269: PUSH
50270: FOR_TO
50271: IFFALSE 50309
// if array1 [ i ] <> array2 [ i ] then
50273: LD_VAR 0 1
50277: PUSH
50278: LD_VAR 0 4
50282: ARRAY
50283: PUSH
50284: LD_VAR 0 2
50288: PUSH
50289: LD_VAR 0 4
50293: ARRAY
50294: NONEQUAL
50295: IFFALSE 50307
// begin result := false ;
50297: LD_ADDR_VAR 0 3
50301: PUSH
50302: LD_INT 0
50304: ST_TO_ADDR
// break ;
50305: GO 50309
// end ;
50307: GO 50270
50309: POP
50310: POP
// end else
50311: GO 50321
// result := false ;
50313: LD_ADDR_VAR 0 3
50317: PUSH
50318: LD_INT 0
50320: ST_TO_ADDR
// end ;
50321: LD_VAR 0 3
50325: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50326: LD_INT 0
50328: PPUSH
50329: PPUSH
50330: PPUSH
// pom := GetBase ( fac ) ;
50331: LD_ADDR_VAR 0 5
50335: PUSH
50336: LD_VAR 0 1
50340: PPUSH
50341: CALL_OW 274
50345: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50346: LD_ADDR_VAR 0 4
50350: PUSH
50351: LD_VAR 0 2
50355: PUSH
50356: LD_INT 1
50358: ARRAY
50359: PPUSH
50360: LD_VAR 0 2
50364: PUSH
50365: LD_INT 2
50367: ARRAY
50368: PPUSH
50369: LD_VAR 0 2
50373: PUSH
50374: LD_INT 3
50376: ARRAY
50377: PPUSH
50378: LD_VAR 0 2
50382: PUSH
50383: LD_INT 4
50385: ARRAY
50386: PPUSH
50387: CALL_OW 449
50391: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50392: LD_ADDR_VAR 0 3
50396: PUSH
50397: LD_VAR 0 5
50401: PPUSH
50402: LD_INT 1
50404: PPUSH
50405: CALL_OW 275
50409: PUSH
50410: LD_VAR 0 4
50414: PUSH
50415: LD_INT 1
50417: ARRAY
50418: GREATEREQUAL
50419: PUSH
50420: LD_VAR 0 5
50424: PPUSH
50425: LD_INT 2
50427: PPUSH
50428: CALL_OW 275
50432: PUSH
50433: LD_VAR 0 4
50437: PUSH
50438: LD_INT 2
50440: ARRAY
50441: GREATEREQUAL
50442: AND
50443: PUSH
50444: LD_VAR 0 5
50448: PPUSH
50449: LD_INT 3
50451: PPUSH
50452: CALL_OW 275
50456: PUSH
50457: LD_VAR 0 4
50461: PUSH
50462: LD_INT 3
50464: ARRAY
50465: GREATEREQUAL
50466: AND
50467: ST_TO_ADDR
// end ;
50468: LD_VAR 0 3
50472: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50473: LD_INT 0
50475: PPUSH
50476: PPUSH
50477: PPUSH
50478: PPUSH
// pom := GetBase ( building ) ;
50479: LD_ADDR_VAR 0 3
50483: PUSH
50484: LD_VAR 0 1
50488: PPUSH
50489: CALL_OW 274
50493: ST_TO_ADDR
// if not pom then
50494: LD_VAR 0 3
50498: NOT
50499: IFFALSE 50503
// exit ;
50501: GO 50673
// btype := GetBType ( building ) ;
50503: LD_ADDR_VAR 0 5
50507: PUSH
50508: LD_VAR 0 1
50512: PPUSH
50513: CALL_OW 266
50517: ST_TO_ADDR
// if btype = b_armoury then
50518: LD_VAR 0 5
50522: PUSH
50523: LD_INT 4
50525: EQUAL
50526: IFFALSE 50536
// btype := b_barracks ;
50528: LD_ADDR_VAR 0 5
50532: PUSH
50533: LD_INT 5
50535: ST_TO_ADDR
// if btype = b_depot then
50536: LD_VAR 0 5
50540: PUSH
50541: LD_INT 0
50543: EQUAL
50544: IFFALSE 50554
// btype := b_warehouse ;
50546: LD_ADDR_VAR 0 5
50550: PUSH
50551: LD_INT 1
50553: ST_TO_ADDR
// if btype = b_workshop then
50554: LD_VAR 0 5
50558: PUSH
50559: LD_INT 2
50561: EQUAL
50562: IFFALSE 50572
// btype := b_factory ;
50564: LD_ADDR_VAR 0 5
50568: PUSH
50569: LD_INT 3
50571: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50572: LD_ADDR_VAR 0 4
50576: PUSH
50577: LD_VAR 0 5
50581: PPUSH
50582: LD_VAR 0 1
50586: PPUSH
50587: CALL_OW 248
50591: PPUSH
50592: CALL_OW 450
50596: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50597: LD_ADDR_VAR 0 2
50601: PUSH
50602: LD_VAR 0 3
50606: PPUSH
50607: LD_INT 1
50609: PPUSH
50610: CALL_OW 275
50614: PUSH
50615: LD_VAR 0 4
50619: PUSH
50620: LD_INT 1
50622: ARRAY
50623: GREATEREQUAL
50624: PUSH
50625: LD_VAR 0 3
50629: PPUSH
50630: LD_INT 2
50632: PPUSH
50633: CALL_OW 275
50637: PUSH
50638: LD_VAR 0 4
50642: PUSH
50643: LD_INT 2
50645: ARRAY
50646: GREATEREQUAL
50647: AND
50648: PUSH
50649: LD_VAR 0 3
50653: PPUSH
50654: LD_INT 3
50656: PPUSH
50657: CALL_OW 275
50661: PUSH
50662: LD_VAR 0 4
50666: PUSH
50667: LD_INT 3
50669: ARRAY
50670: GREATEREQUAL
50671: AND
50672: ST_TO_ADDR
// end ;
50673: LD_VAR 0 2
50677: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50678: LD_INT 0
50680: PPUSH
50681: PPUSH
50682: PPUSH
// pom := GetBase ( building ) ;
50683: LD_ADDR_VAR 0 4
50687: PUSH
50688: LD_VAR 0 1
50692: PPUSH
50693: CALL_OW 274
50697: ST_TO_ADDR
// if not pom then
50698: LD_VAR 0 4
50702: NOT
50703: IFFALSE 50707
// exit ;
50705: GO 50808
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50707: LD_ADDR_VAR 0 5
50711: PUSH
50712: LD_VAR 0 2
50716: PPUSH
50717: LD_VAR 0 1
50721: PPUSH
50722: CALL_OW 248
50726: PPUSH
50727: CALL_OW 450
50731: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50732: LD_ADDR_VAR 0 3
50736: PUSH
50737: LD_VAR 0 4
50741: PPUSH
50742: LD_INT 1
50744: PPUSH
50745: CALL_OW 275
50749: PUSH
50750: LD_VAR 0 5
50754: PUSH
50755: LD_INT 1
50757: ARRAY
50758: GREATEREQUAL
50759: PUSH
50760: LD_VAR 0 4
50764: PPUSH
50765: LD_INT 2
50767: PPUSH
50768: CALL_OW 275
50772: PUSH
50773: LD_VAR 0 5
50777: PUSH
50778: LD_INT 2
50780: ARRAY
50781: GREATEREQUAL
50782: AND
50783: PUSH
50784: LD_VAR 0 4
50788: PPUSH
50789: LD_INT 3
50791: PPUSH
50792: CALL_OW 275
50796: PUSH
50797: LD_VAR 0 5
50801: PUSH
50802: LD_INT 3
50804: ARRAY
50805: GREATEREQUAL
50806: AND
50807: ST_TO_ADDR
// end ;
50808: LD_VAR 0 3
50812: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
50813: LD_INT 0
50815: PPUSH
50816: PPUSH
50817: PPUSH
50818: PPUSH
50819: PPUSH
50820: PPUSH
50821: PPUSH
50822: PPUSH
50823: PPUSH
50824: PPUSH
// result := false ;
50825: LD_ADDR_VAR 0 6
50829: PUSH
50830: LD_INT 0
50832: ST_TO_ADDR
// if not base or not btype or not x or not y then
50833: LD_VAR 0 1
50837: NOT
50838: PUSH
50839: LD_VAR 0 2
50843: NOT
50844: OR
50845: PUSH
50846: LD_VAR 0 3
50850: NOT
50851: OR
50852: PUSH
50853: LD_VAR 0 4
50857: NOT
50858: OR
50859: IFFALSE 50863
// exit ;
50861: GO 51472
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
50863: LD_ADDR_VAR 0 12
50867: PUSH
50868: LD_VAR 0 2
50872: PPUSH
50873: LD_VAR 0 3
50877: PPUSH
50878: LD_VAR 0 4
50882: PPUSH
50883: LD_VAR 0 5
50887: PPUSH
50888: LD_VAR 0 1
50892: PUSH
50893: LD_INT 1
50895: ARRAY
50896: PPUSH
50897: CALL_OW 248
50901: PPUSH
50902: LD_INT 0
50904: PPUSH
50905: CALL 52309 0 6
50909: ST_TO_ADDR
// if not hexes then
50910: LD_VAR 0 12
50914: NOT
50915: IFFALSE 50919
// exit ;
50917: GO 51472
// for i = 1 to hexes do
50919: LD_ADDR_VAR 0 7
50923: PUSH
50924: DOUBLE
50925: LD_INT 1
50927: DEC
50928: ST_TO_ADDR
50929: LD_VAR 0 12
50933: PUSH
50934: FOR_TO
50935: IFFALSE 51470
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50937: LD_ADDR_VAR 0 11
50941: PUSH
50942: LD_VAR 0 12
50946: PUSH
50947: LD_VAR 0 7
50951: ARRAY
50952: PUSH
50953: LD_INT 1
50955: ARRAY
50956: PPUSH
50957: LD_VAR 0 12
50961: PUSH
50962: LD_VAR 0 7
50966: ARRAY
50967: PUSH
50968: LD_INT 2
50970: ARRAY
50971: PPUSH
50972: CALL_OW 428
50976: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50977: LD_VAR 0 12
50981: PUSH
50982: LD_VAR 0 7
50986: ARRAY
50987: PUSH
50988: LD_INT 1
50990: ARRAY
50991: PPUSH
50992: LD_VAR 0 12
50996: PUSH
50997: LD_VAR 0 7
51001: ARRAY
51002: PUSH
51003: LD_INT 2
51005: ARRAY
51006: PPUSH
51007: CALL_OW 351
51011: PUSH
51012: LD_VAR 0 12
51016: PUSH
51017: LD_VAR 0 7
51021: ARRAY
51022: PUSH
51023: LD_INT 1
51025: ARRAY
51026: PPUSH
51027: LD_VAR 0 12
51031: PUSH
51032: LD_VAR 0 7
51036: ARRAY
51037: PUSH
51038: LD_INT 2
51040: ARRAY
51041: PPUSH
51042: CALL_OW 488
51046: NOT
51047: OR
51048: PUSH
51049: LD_VAR 0 11
51053: PPUSH
51054: CALL_OW 247
51058: PUSH
51059: LD_INT 3
51061: EQUAL
51062: OR
51063: IFFALSE 51069
// exit ;
51065: POP
51066: POP
51067: GO 51472
// if not tmp or not tmp in base then
51069: LD_VAR 0 11
51073: NOT
51074: PUSH
51075: LD_VAR 0 11
51079: PUSH
51080: LD_VAR 0 1
51084: IN
51085: NOT
51086: OR
51087: IFFALSE 51091
// continue ;
51089: GO 50934
// result := true ;
51091: LD_ADDR_VAR 0 6
51095: PUSH
51096: LD_INT 1
51098: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51099: LD_ADDR_VAR 0 15
51103: PUSH
51104: LD_VAR 0 1
51108: PPUSH
51109: LD_INT 22
51111: PUSH
51112: LD_VAR 0 11
51116: PPUSH
51117: CALL_OW 255
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 2
51128: PUSH
51129: LD_INT 30
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 30
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: LIST
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PPUSH
51158: CALL_OW 72
51162: ST_TO_ADDR
// if dep then
51163: LD_VAR 0 15
51167: IFFALSE 51303
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51169: LD_ADDR_VAR 0 14
51173: PUSH
51174: LD_VAR 0 15
51178: PUSH
51179: LD_INT 1
51181: ARRAY
51182: PPUSH
51183: CALL_OW 250
51187: PPUSH
51188: LD_VAR 0 15
51192: PUSH
51193: LD_INT 1
51195: ARRAY
51196: PPUSH
51197: CALL_OW 254
51201: PPUSH
51202: LD_INT 5
51204: PPUSH
51205: CALL_OW 272
51209: PUSH
51210: LD_VAR 0 15
51214: PUSH
51215: LD_INT 1
51217: ARRAY
51218: PPUSH
51219: CALL_OW 251
51223: PPUSH
51224: LD_VAR 0 15
51228: PUSH
51229: LD_INT 1
51231: ARRAY
51232: PPUSH
51233: CALL_OW 254
51237: PPUSH
51238: LD_INT 5
51240: PPUSH
51241: CALL_OW 273
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51250: LD_VAR 0 14
51254: PUSH
51255: LD_INT 1
51257: ARRAY
51258: PPUSH
51259: LD_VAR 0 14
51263: PUSH
51264: LD_INT 2
51266: ARRAY
51267: PPUSH
51268: CALL_OW 488
51272: IFFALSE 51303
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51274: LD_VAR 0 11
51278: PPUSH
51279: LD_VAR 0 14
51283: PUSH
51284: LD_INT 1
51286: ARRAY
51287: PPUSH
51288: LD_VAR 0 14
51292: PUSH
51293: LD_INT 2
51295: ARRAY
51296: PPUSH
51297: CALL_OW 111
// continue ;
51301: GO 50934
// end ; end ; r := GetDir ( tmp ) ;
51303: LD_ADDR_VAR 0 13
51307: PUSH
51308: LD_VAR 0 11
51312: PPUSH
51313: CALL_OW 254
51317: ST_TO_ADDR
// if r = 5 then
51318: LD_VAR 0 13
51322: PUSH
51323: LD_INT 5
51325: EQUAL
51326: IFFALSE 51336
// r := 0 ;
51328: LD_ADDR_VAR 0 13
51332: PUSH
51333: LD_INT 0
51335: ST_TO_ADDR
// for j = r to 5 do
51336: LD_ADDR_VAR 0 8
51340: PUSH
51341: DOUBLE
51342: LD_VAR 0 13
51346: DEC
51347: ST_TO_ADDR
51348: LD_INT 5
51350: PUSH
51351: FOR_TO
51352: IFFALSE 51466
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51354: LD_ADDR_VAR 0 9
51358: PUSH
51359: LD_VAR 0 11
51363: PPUSH
51364: CALL_OW 250
51368: PPUSH
51369: LD_VAR 0 8
51373: PPUSH
51374: LD_INT 2
51376: PPUSH
51377: CALL_OW 272
51381: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51382: LD_ADDR_VAR 0 10
51386: PUSH
51387: LD_VAR 0 11
51391: PPUSH
51392: CALL_OW 251
51396: PPUSH
51397: LD_VAR 0 8
51401: PPUSH
51402: LD_INT 2
51404: PPUSH
51405: CALL_OW 273
51409: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51410: LD_VAR 0 9
51414: PPUSH
51415: LD_VAR 0 10
51419: PPUSH
51420: CALL_OW 488
51424: PUSH
51425: LD_VAR 0 9
51429: PPUSH
51430: LD_VAR 0 10
51434: PPUSH
51435: CALL_OW 428
51439: NOT
51440: AND
51441: IFFALSE 51464
// begin ComMoveXY ( tmp , _x , _y ) ;
51443: LD_VAR 0 11
51447: PPUSH
51448: LD_VAR 0 9
51452: PPUSH
51453: LD_VAR 0 10
51457: PPUSH
51458: CALL_OW 111
// break ;
51462: GO 51466
// end ; end ;
51464: GO 51351
51466: POP
51467: POP
// end ;
51468: GO 50934
51470: POP
51471: POP
// end ;
51472: LD_VAR 0 6
51476: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
51477: LD_INT 0
51479: PPUSH
51480: PPUSH
51481: PPUSH
51482: PPUSH
51483: PPUSH
51484: PPUSH
51485: PPUSH
51486: PPUSH
51487: PPUSH
51488: PPUSH
// result := false ;
51489: LD_ADDR_VAR 0 6
51493: PUSH
51494: LD_INT 0
51496: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51497: LD_VAR 0 1
51501: NOT
51502: PUSH
51503: LD_VAR 0 1
51507: PPUSH
51508: CALL_OW 266
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: IN
51523: NOT
51524: OR
51525: PUSH
51526: LD_VAR 0 2
51530: NOT
51531: OR
51532: PUSH
51533: LD_VAR 0 5
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: LD_INT 3
51549: PUSH
51550: LD_INT 4
51552: PUSH
51553: LD_INT 5
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: IN
51564: NOT
51565: OR
51566: PUSH
51567: LD_VAR 0 3
51571: PPUSH
51572: LD_VAR 0 4
51576: PPUSH
51577: CALL_OW 488
51581: NOT
51582: OR
51583: IFFALSE 51587
// exit ;
51585: GO 52304
// pom := GetBase ( depot ) ;
51587: LD_ADDR_VAR 0 10
51591: PUSH
51592: LD_VAR 0 1
51596: PPUSH
51597: CALL_OW 274
51601: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51602: LD_ADDR_VAR 0 11
51606: PUSH
51607: LD_VAR 0 2
51611: PPUSH
51612: LD_VAR 0 1
51616: PPUSH
51617: CALL_OW 248
51621: PPUSH
51622: CALL_OW 450
51626: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51627: LD_VAR 0 10
51631: PPUSH
51632: LD_INT 1
51634: PPUSH
51635: CALL_OW 275
51639: PUSH
51640: LD_VAR 0 11
51644: PUSH
51645: LD_INT 1
51647: ARRAY
51648: GREATEREQUAL
51649: PUSH
51650: LD_VAR 0 10
51654: PPUSH
51655: LD_INT 2
51657: PPUSH
51658: CALL_OW 275
51662: PUSH
51663: LD_VAR 0 11
51667: PUSH
51668: LD_INT 2
51670: ARRAY
51671: GREATEREQUAL
51672: AND
51673: PUSH
51674: LD_VAR 0 10
51678: PPUSH
51679: LD_INT 3
51681: PPUSH
51682: CALL_OW 275
51686: PUSH
51687: LD_VAR 0 11
51691: PUSH
51692: LD_INT 3
51694: ARRAY
51695: GREATEREQUAL
51696: AND
51697: NOT
51698: IFFALSE 51702
// exit ;
51700: GO 52304
// if GetBType ( depot ) = b_depot then
51702: LD_VAR 0 1
51706: PPUSH
51707: CALL_OW 266
51711: PUSH
51712: LD_INT 0
51714: EQUAL
51715: IFFALSE 51727
// dist := 28 else
51717: LD_ADDR_VAR 0 14
51721: PUSH
51722: LD_INT 28
51724: ST_TO_ADDR
51725: GO 51735
// dist := 36 ;
51727: LD_ADDR_VAR 0 14
51731: PUSH
51732: LD_INT 36
51734: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51735: LD_VAR 0 1
51739: PPUSH
51740: LD_VAR 0 3
51744: PPUSH
51745: LD_VAR 0 4
51749: PPUSH
51750: CALL_OW 297
51754: PUSH
51755: LD_VAR 0 14
51759: GREATER
51760: IFFALSE 51764
// exit ;
51762: GO 52304
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51764: LD_ADDR_VAR 0 12
51768: PUSH
51769: LD_VAR 0 2
51773: PPUSH
51774: LD_VAR 0 3
51778: PPUSH
51779: LD_VAR 0 4
51783: PPUSH
51784: LD_VAR 0 5
51788: PPUSH
51789: LD_VAR 0 1
51793: PPUSH
51794: CALL_OW 248
51798: PPUSH
51799: LD_INT 0
51801: PPUSH
51802: CALL 52309 0 6
51806: ST_TO_ADDR
// if not hexes then
51807: LD_VAR 0 12
51811: NOT
51812: IFFALSE 51816
// exit ;
51814: GO 52304
// hex := GetHexInfo ( x , y ) ;
51816: LD_ADDR_VAR 0 15
51820: PUSH
51821: LD_VAR 0 3
51825: PPUSH
51826: LD_VAR 0 4
51830: PPUSH
51831: CALL_OW 546
51835: ST_TO_ADDR
// if hex [ 1 ] then
51836: LD_VAR 0 15
51840: PUSH
51841: LD_INT 1
51843: ARRAY
51844: IFFALSE 51848
// exit ;
51846: GO 52304
// height := hex [ 2 ] ;
51848: LD_ADDR_VAR 0 13
51852: PUSH
51853: LD_VAR 0 15
51857: PUSH
51858: LD_INT 2
51860: ARRAY
51861: ST_TO_ADDR
// for i = 1 to hexes do
51862: LD_ADDR_VAR 0 7
51866: PUSH
51867: DOUBLE
51868: LD_INT 1
51870: DEC
51871: ST_TO_ADDR
51872: LD_VAR 0 12
51876: PUSH
51877: FOR_TO
51878: IFFALSE 52208
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51880: LD_VAR 0 12
51884: PUSH
51885: LD_VAR 0 7
51889: ARRAY
51890: PUSH
51891: LD_INT 1
51893: ARRAY
51894: PPUSH
51895: LD_VAR 0 12
51899: PUSH
51900: LD_VAR 0 7
51904: ARRAY
51905: PUSH
51906: LD_INT 2
51908: ARRAY
51909: PPUSH
51910: CALL_OW 488
51914: NOT
51915: PUSH
51916: LD_VAR 0 12
51920: PUSH
51921: LD_VAR 0 7
51925: ARRAY
51926: PUSH
51927: LD_INT 1
51929: ARRAY
51930: PPUSH
51931: LD_VAR 0 12
51935: PUSH
51936: LD_VAR 0 7
51940: ARRAY
51941: PUSH
51942: LD_INT 2
51944: ARRAY
51945: PPUSH
51946: CALL_OW 428
51950: PUSH
51951: LD_INT 0
51953: GREATER
51954: OR
51955: PUSH
51956: LD_VAR 0 12
51960: PUSH
51961: LD_VAR 0 7
51965: ARRAY
51966: PUSH
51967: LD_INT 1
51969: ARRAY
51970: PPUSH
51971: LD_VAR 0 12
51975: PUSH
51976: LD_VAR 0 7
51980: ARRAY
51981: PUSH
51982: LD_INT 2
51984: ARRAY
51985: PPUSH
51986: CALL_OW 351
51990: OR
51991: IFFALSE 51997
// exit ;
51993: POP
51994: POP
51995: GO 52304
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51997: LD_ADDR_VAR 0 8
52001: PUSH
52002: LD_VAR 0 12
52006: PUSH
52007: LD_VAR 0 7
52011: ARRAY
52012: PUSH
52013: LD_INT 1
52015: ARRAY
52016: PPUSH
52017: LD_VAR 0 12
52021: PUSH
52022: LD_VAR 0 7
52026: ARRAY
52027: PUSH
52028: LD_INT 2
52030: ARRAY
52031: PPUSH
52032: CALL_OW 546
52036: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52037: LD_VAR 0 8
52041: PUSH
52042: LD_INT 1
52044: ARRAY
52045: PUSH
52046: LD_VAR 0 8
52050: PUSH
52051: LD_INT 2
52053: ARRAY
52054: PUSH
52055: LD_VAR 0 13
52059: PUSH
52060: LD_INT 2
52062: PLUS
52063: GREATER
52064: OR
52065: PUSH
52066: LD_VAR 0 8
52070: PUSH
52071: LD_INT 2
52073: ARRAY
52074: PUSH
52075: LD_VAR 0 13
52079: PUSH
52080: LD_INT 2
52082: MINUS
52083: LESS
52084: OR
52085: PUSH
52086: LD_VAR 0 8
52090: PUSH
52091: LD_INT 3
52093: ARRAY
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: LD_INT 8
52100: PUSH
52101: LD_INT 9
52103: PUSH
52104: LD_INT 10
52106: PUSH
52107: LD_INT 11
52109: PUSH
52110: LD_INT 12
52112: PUSH
52113: LD_INT 13
52115: PUSH
52116: LD_INT 16
52118: PUSH
52119: LD_INT 17
52121: PUSH
52122: LD_INT 18
52124: PUSH
52125: LD_INT 19
52127: PUSH
52128: LD_INT 20
52130: PUSH
52131: LD_INT 21
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: IN
52149: NOT
52150: OR
52151: PUSH
52152: LD_VAR 0 8
52156: PUSH
52157: LD_INT 5
52159: ARRAY
52160: NOT
52161: OR
52162: PUSH
52163: LD_VAR 0 8
52167: PUSH
52168: LD_INT 6
52170: ARRAY
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: LD_INT 7
52180: PUSH
52181: LD_INT 9
52183: PUSH
52184: LD_INT 10
52186: PUSH
52187: LD_INT 11
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: IN
52198: NOT
52199: OR
52200: IFFALSE 52206
// exit ;
52202: POP
52203: POP
52204: GO 52304
// end ;
52206: GO 51877
52208: POP
52209: POP
// side := GetSide ( depot ) ;
52210: LD_ADDR_VAR 0 9
52214: PUSH
52215: LD_VAR 0 1
52219: PPUSH
52220: CALL_OW 255
52224: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52225: LD_VAR 0 9
52229: PPUSH
52230: LD_VAR 0 3
52234: PPUSH
52235: LD_VAR 0 4
52239: PPUSH
52240: LD_INT 20
52242: PPUSH
52243: CALL 44958 0 4
52247: PUSH
52248: LD_INT 4
52250: ARRAY
52251: IFFALSE 52255
// exit ;
52253: GO 52304
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52255: LD_VAR 0 2
52259: PUSH
52260: LD_INT 29
52262: PUSH
52263: LD_INT 30
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: IN
52270: PUSH
52271: LD_VAR 0 3
52275: PPUSH
52276: LD_VAR 0 4
52280: PPUSH
52281: LD_VAR 0 9
52285: PPUSH
52286: CALL_OW 440
52290: NOT
52291: AND
52292: IFFALSE 52296
// exit ;
52294: GO 52304
// result := true ;
52296: LD_ADDR_VAR 0 6
52300: PUSH
52301: LD_INT 1
52303: ST_TO_ADDR
// end ;
52304: LD_VAR 0 6
52308: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
52309: LD_INT 0
52311: PPUSH
52312: PPUSH
52313: PPUSH
52314: PPUSH
52315: PPUSH
52316: PPUSH
52317: PPUSH
52318: PPUSH
52319: PPUSH
52320: PPUSH
52321: PPUSH
52322: PPUSH
52323: PPUSH
52324: PPUSH
52325: PPUSH
52326: PPUSH
52327: PPUSH
52328: PPUSH
52329: PPUSH
52330: PPUSH
52331: PPUSH
52332: PPUSH
52333: PPUSH
52334: PPUSH
52335: PPUSH
52336: PPUSH
52337: PPUSH
52338: PPUSH
52339: PPUSH
52340: PPUSH
52341: PPUSH
52342: PPUSH
52343: PPUSH
52344: PPUSH
52345: PPUSH
52346: PPUSH
52347: PPUSH
52348: PPUSH
52349: PPUSH
52350: PPUSH
52351: PPUSH
52352: PPUSH
52353: PPUSH
52354: PPUSH
52355: PPUSH
52356: PPUSH
52357: PPUSH
52358: PPUSH
52359: PPUSH
52360: PPUSH
52361: PPUSH
52362: PPUSH
52363: PPUSH
52364: PPUSH
52365: PPUSH
52366: PPUSH
52367: PPUSH
52368: PPUSH
// result = [ ] ;
52369: LD_ADDR_VAR 0 7
52373: PUSH
52374: EMPTY
52375: ST_TO_ADDR
// temp_list = [ ] ;
52376: LD_ADDR_VAR 0 9
52380: PUSH
52381: EMPTY
52382: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52383: LD_VAR 0 4
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 2
52396: PUSH
52397: LD_INT 3
52399: PUSH
52400: LD_INT 4
52402: PUSH
52403: LD_INT 5
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: IN
52414: NOT
52415: PUSH
52416: LD_VAR 0 1
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: IN
52431: PUSH
52432: LD_VAR 0 5
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: LD_INT 2
52442: PUSH
52443: LD_INT 3
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: LIST
52450: IN
52451: NOT
52452: AND
52453: OR
52454: IFFALSE 52458
// exit ;
52456: GO 70849
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52458: LD_VAR 0 1
52462: PUSH
52463: LD_INT 6
52465: PUSH
52466: LD_INT 7
52468: PUSH
52469: LD_INT 8
52471: PUSH
52472: LD_INT 13
52474: PUSH
52475: LD_INT 12
52477: PUSH
52478: LD_INT 15
52480: PUSH
52481: LD_INT 11
52483: PUSH
52484: LD_INT 14
52486: PUSH
52487: LD_INT 10
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: IN
52501: IFFALSE 52511
// btype = b_lab ;
52503: LD_ADDR_VAR 0 1
52507: PUSH
52508: LD_INT 6
52510: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52511: LD_VAR 0 6
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: LIST
52529: IN
52530: NOT
52531: PUSH
52532: LD_VAR 0 1
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: LD_INT 3
52548: PUSH
52549: LD_INT 6
52551: PUSH
52552: LD_INT 36
52554: PUSH
52555: LD_INT 4
52557: PUSH
52558: LD_INT 5
52560: PUSH
52561: LD_INT 31
52563: PUSH
52564: LD_INT 32
52566: PUSH
52567: LD_INT 33
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: IN
52583: NOT
52584: PUSH
52585: LD_VAR 0 6
52589: PUSH
52590: LD_INT 1
52592: EQUAL
52593: AND
52594: OR
52595: PUSH
52596: LD_VAR 0 1
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: LD_INT 3
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: IN
52611: NOT
52612: PUSH
52613: LD_VAR 0 6
52617: PUSH
52618: LD_INT 2
52620: EQUAL
52621: AND
52622: OR
52623: IFFALSE 52633
// mode = 0 ;
52625: LD_ADDR_VAR 0 6
52629: PUSH
52630: LD_INT 0
52632: ST_TO_ADDR
// case mode of 0 :
52633: LD_VAR 0 6
52637: PUSH
52638: LD_INT 0
52640: DOUBLE
52641: EQUAL
52642: IFTRUE 52646
52644: GO 64099
52646: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52647: LD_ADDR_VAR 0 11
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: LD_INT 2
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 2
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: LD_INT 3
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 3
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52840: LD_ADDR_VAR 0 12
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 2
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 2
52963: NEG
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 2
52974: NEG
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 2
52986: NEG
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 3
52997: NEG
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 3
53008: NEG
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53036: LD_ADDR_VAR 0 13
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: LD_INT 2
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 2
53139: PUSH
53140: LD_INT 2
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 2
53159: NEG
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: NEG
53172: PUSH
53173: LD_INT 2
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 2
53183: NEG
53184: PUSH
53185: LD_INT 3
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 3
53195: NEG
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 3
53207: NEG
53208: PUSH
53209: LD_INT 3
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53235: LD_ADDR_VAR 0 14
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 2
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 3
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: LD_INT 3
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53431: LD_ADDR_VAR 0 15
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 2
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 3
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 3
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53624: LD_ADDR_VAR 0 16
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 2
53747: NEG
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 2
53759: NEG
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 3
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 3
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: LD_INT 3
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53817: LD_ADDR_VAR 0 17
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 2
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 2
54016: NEG
54017: PUSH
54018: LD_INT 2
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54047: LD_ADDR_VAR 0 18
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: LD_INT 2
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: LD_INT 2
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 2
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 2
54223: NEG
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: NEG
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54277: LD_ADDR_VAR 0 19
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 2
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: PUSH
54413: LD_INT 2
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 2
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: LD_INT 2
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54507: LD_ADDR_VAR 0 20
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 2
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54737: LD_ADDR_VAR 0 21
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: LD_INT 2
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 2
54913: NEG
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54967: LD_ADDR_VAR 0 22
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 2
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55197: LD_ADDR_VAR 0 23
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 2
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: LD_INT 2
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: NEG
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: LD_INT 3
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: LD_INT 3
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: LD_INT 2
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55477: LD_ADDR_VAR 0 24
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: LD_INT 2
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 2
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: NEG
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: NEG
55677: PUSH
55678: LD_INT 2
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 2
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 3
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 3
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55753: LD_ADDR_VAR 0 25
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 2
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: LD_INT 2
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 2
55929: NEG
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 2
55952: NEG
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 3
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 3
55974: PUSH
55975: LD_INT 2
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 2
55984: PUSH
55985: LD_INT 3
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 3
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56027: LD_ADDR_VAR 0 26
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: LD_INT 2
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: LD_INT 2
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: LD_INT 2
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: NEG
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 2
56214: NEG
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: LD_INT 2
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: LD_INT 3
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: LD_INT 3
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: NEG
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56303: LD_ADDR_VAR 0 27
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: LD_INT 2
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: LD_INT 2
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 2
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 2
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 2
56438: PUSH
56439: LD_INT 2
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: LD_INT 2
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 2
56490: NEG
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 2
56502: NEG
56503: PUSH
56504: LD_INT 2
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 3
56536: NEG
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 3
56548: NEG
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56583: LD_ADDR_VAR 0 28
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 2
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 2
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: LD_INT 2
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 2
56759: NEG
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: LD_INT 2
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: LD_INT 3
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: LD_INT 3
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 3
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 3
56830: NEG
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56865: LD_ADDR_VAR 0 29
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: LD_INT 2
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 2
57031: NEG
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: LD_INT 2
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: LD_INT 3
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 2
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 3
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: LD_INT 3
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: LD_INT 2
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 3
57109: NEG
57110: PUSH
57111: LD_INT 2
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57144: LD_ADDR_VAR 0 30
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: LD_INT 2
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 2
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 2
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 2
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: LD_INT 1
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 2
57321: NEG
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: LD_INT 3
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 3
57356: PUSH
57357: LD_INT 2
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 2
57366: PUSH
57367: LD_INT 3
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 3
57387: NEG
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57422: LD_ADDR_VAR 0 31
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 2
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 2
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 2
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: NEG
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 2
57599: NEG
57600: PUSH
57601: LD_INT 2
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 2
57611: NEG
57612: PUSH
57613: LD_INT 3
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 3
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: LD_INT 3
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: LD_INT 2
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 3
57665: NEG
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57700: LD_ADDR_VAR 0 32
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 2
57825: PUSH
57826: LD_INT 2
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: LD_INT 2
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 2
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 2
57866: NEG
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: LD_INT 3
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: LD_INT 2
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 3
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: LD_INT 3
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 2
57932: NEG
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 3
57943: NEG
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57978: LD_ADDR_VAR 0 33
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 2
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: LD_INT 2
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: LD_INT 2
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 2
58144: NEG
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 2
58168: NEG
58169: PUSH
58170: LD_INT 3
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 3
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: LD_INT 3
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 3
58222: NEG
58223: PUSH
58224: LD_INT 2
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58257: LD_ADDR_VAR 0 34
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: LD_INT 2
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 2
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: PUSH
58383: LD_INT 2
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 2
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 1
58402: NEG
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 2
58413: NEG
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 2
58436: NEG
58437: PUSH
58438: LD_INT 2
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: LD_INT 3
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 3
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 3
58502: NEG
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58537: LD_ADDR_VAR 0 35
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 2
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: NEG
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58649: LD_ADDR_VAR 0 36
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: LD_INT 2
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58761: LD_ADDR_VAR 0 37
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58873: LD_ADDR_VAR 0 38
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 2
58964: NEG
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58985: LD_ADDR_VAR 0 39
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: NEG
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: LD_INT 2
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: LD_INT 2
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59097: LD_ADDR_VAR 0 40
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: NEG
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59209: LD_ADDR_VAR 0 41
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: LD_INT 1
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: LD_INT 2
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: LD_INT 1
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 2
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 2
59333: PUSH
59334: LD_INT 2
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 1
59343: PUSH
59344: LD_INT 2
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: NEG
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 2
59364: NEG
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 2
59387: NEG
59388: PUSH
59389: LD_INT 2
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 2
59399: NEG
59400: PUSH
59401: LD_INT 3
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 3
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 3
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 3
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 3
59452: PUSH
59453: LD_INT 3
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: PUSH
59463: LD_INT 3
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 2
59472: NEG
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 3
59483: NEG
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 3
59494: NEG
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 3
59506: NEG
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 3
59518: NEG
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59559: LD_ADDR_VAR 0 42
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: LD_INT 1
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: LD_INT 1
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: LD_INT 2
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 2
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 2
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: LD_INT 2
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: LD_INT 3
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: LD_INT 3
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: LD_INT 3
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: LD_INT 2
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 3
59795: PUSH
59796: LD_INT 2
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 3
59805: PUSH
59806: LD_INT 3
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 2
59815: PUSH
59816: LD_INT 3
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: LD_INT 3
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: LD_INT 2
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 3
59856: NEG
59857: PUSH
59858: LD_INT 2
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 3
59868: NEG
59869: PUSH
59870: LD_INT 3
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59909: LD_ADDR_VAR 0 43
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: LD_INT 1
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: LD_INT 2
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 2
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: NEG
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 3
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 3
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 3
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: LD_INT 3
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: LD_INT 3
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 1
60183: NEG
60184: PUSH
60185: LD_INT 2
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 2
60194: NEG
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 3
60205: NEG
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 3
60216: NEG
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60257: LD_ADDR_VAR 0 44
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 0
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 1
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: LD_INT 1
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 1
60326: NEG
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 1
60338: NEG
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 2
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 2
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 2
60412: NEG
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: LD_INT 2
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 2
60447: NEG
60448: PUSH
60449: LD_INT 3
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 2
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 3
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: LD_INT 1
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 3
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 3
60500: PUSH
60501: LD_INT 3
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 2
60510: PUSH
60511: LD_INT 3
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 2
60520: NEG
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 3
60531: NEG
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 3
60542: NEG
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 3
60554: NEG
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 3
60566: NEG
60567: PUSH
60568: LD_INT 3
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60607: LD_ADDR_VAR 0 45
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: LD_INT 2
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: LD_INT 2
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: LD_INT 1
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 2
60722: PUSH
60723: LD_INT 1
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 2
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: LD_INT 2
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: LD_INT 2
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 2
60785: NEG
60786: PUSH
60787: LD_INT 2
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: LD_INT 3
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: LD_INT 3
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: LD_INT 3
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: LD_INT 2
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 3
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 3
60853: PUSH
60854: LD_INT 3
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 2
60863: PUSH
60864: LD_INT 3
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: LD_INT 3
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: LD_INT 3
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: LD_INT 2
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 3
60904: NEG
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 3
60916: NEG
60917: PUSH
60918: LD_INT 3
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60957: LD_ADDR_VAR 0 46
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: LD_INT 1
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 1
61015: NEG
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: LD_INT 2
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: LD_INT 1
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: LD_INT 2
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: LD_INT 2
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: NEG
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: LD_INT 1
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: LD_INT 3
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: LD_INT 3
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 3
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 3
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: LD_INT 3
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: LD_INT 3
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 3
61253: NEG
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 3
61264: NEG
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61305: LD_ADDR_VAR 0 47
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: LD_INT 1
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: LD_INT 1
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 1
61386: NEG
61387: PUSH
61388: LD_INT 2
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: LD_INT 2
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 1
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 2
61420: NEG
61421: PUSH
61422: LD_INT 1
61424: NEG
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: LD_INT 2
61436: NEG
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61456: LD_ADDR_VAR 0 48
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 1
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: LD_INT 1
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 0
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 1
61514: NEG
61515: PUSH
61516: LD_INT 0
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: NEG
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: LD_INT 2
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: LD_INT 2
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: PUSH
61561: LD_INT 1
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 2
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61603: LD_ADDR_VAR 0 49
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 1
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: LD_INT 1
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 1
61661: NEG
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: LD_INT 1
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 1
61684: PUSH
61685: LD_INT 1
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 2
61705: PUSH
61706: LD_INT 1
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 2
61715: PUSH
61716: LD_INT 2
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 1
61725: PUSH
61726: LD_INT 2
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61747: LD_ADDR_VAR 0 50
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: LD_INT 0
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: LD_INT 1
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: PUSH
61786: LD_INT 1
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 1
61816: NEG
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 2
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 2
61838: PUSH
61839: LD_INT 2
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: PUSH
61849: LD_INT 2
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: LD_INT 2
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61891: LD_ADDR_VAR 0 51
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: NEG
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 1
61960: NEG
61961: PUSH
61962: LD_INT 1
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: LD_INT 2
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: LD_INT 2
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: LD_INT 1
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 2
62003: NEG
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 2
62014: NEG
62015: PUSH
62016: LD_INT 1
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62038: LD_ADDR_VAR 0 52
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 1
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 1
62096: NEG
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: NEG
62120: PUSH
62121: LD_INT 2
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 1
62131: NEG
62132: PUSH
62133: LD_INT 1
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 2
62142: NEG
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 2
62153: NEG
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 2
62165: NEG
62166: PUSH
62167: LD_INT 2
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62189: LD_ADDR_VAR 0 53
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 0
62237: PUSH
62238: LD_INT 1
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 1
62247: NEG
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 1
62258: NEG
62259: PUSH
62260: LD_INT 1
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: LD_INT 2
62274: NEG
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: LD_INT 2
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: LD_INT 1
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 2
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 2
62314: PUSH
62315: LD_INT 1
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 2
62324: PUSH
62325: LD_INT 2
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 1
62334: PUSH
62335: LD_INT 2
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: LD_INT 2
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 1
62354: NEG
62355: PUSH
62356: LD_INT 1
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 2
62365: NEG
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 2
62376: NEG
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 2
62388: NEG
62389: PUSH
62390: LD_INT 2
62392: NEG
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62419: LD_ADDR_VAR 0 54
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 0
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 1
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 1
62457: PUSH
62458: LD_INT 1
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 0
62467: PUSH
62468: LD_INT 1
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 1
62477: NEG
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 1
62488: NEG
62489: PUSH
62490: LD_INT 1
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 1
62500: NEG
62501: PUSH
62502: LD_INT 2
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: LD_INT 2
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 1
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 2
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 2
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 2
62554: PUSH
62555: LD_INT 2
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: LD_INT 2
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 2
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 1
62584: NEG
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 2
62595: NEG
62596: PUSH
62597: LD_INT 0
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 2
62606: NEG
62607: PUSH
62608: LD_INT 1
62610: NEG
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 2
62618: NEG
62619: PUSH
62620: LD_INT 2
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62649: LD_ADDR_VAR 0 55
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: NEG
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 2
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: LD_INT 2
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 2
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: LD_INT 1
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 2
62784: PUSH
62785: LD_INT 2
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: LD_INT 2
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: LD_INT 2
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: LD_INT 1
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 2
62825: NEG
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 2
62836: NEG
62837: PUSH
62838: LD_INT 1
62840: NEG
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 2
62848: NEG
62849: PUSH
62850: LD_INT 2
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62879: LD_ADDR_VAR 0 56
62883: PUSH
62884: LD_INT 0
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 1
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 1
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: LD_INT 1
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 1
62937: NEG
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: LD_INT 1
62952: NEG
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: NEG
62961: PUSH
62962: LD_INT 2
62964: NEG
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: LD_INT 2
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: LD_INT 1
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 2
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 2
63004: PUSH
63005: LD_INT 1
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 2
63014: PUSH
63015: LD_INT 2
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: PUSH
63025: LD_INT 2
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: LD_INT 2
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: LD_INT 1
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 2
63055: NEG
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 2
63066: NEG
63067: PUSH
63068: LD_INT 1
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 2
63078: NEG
63079: PUSH
63080: LD_INT 2
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63109: LD_ADDR_VAR 0 57
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: LD_INT 0
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 0
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 1
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 0
63157: PUSH
63158: LD_INT 1
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: NEG
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: LD_INT 1
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: NEG
63191: PUSH
63192: LD_INT 2
63194: NEG
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: LD_INT 2
63205: NEG
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: LD_INT 1
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 2
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 2
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 2
63244: PUSH
63245: LD_INT 2
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: PUSH
63255: LD_INT 2
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 2
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 2
63285: NEG
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 2
63296: NEG
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 2
63308: NEG
63309: PUSH
63310: LD_INT 2
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63339: LD_ADDR_VAR 0 58
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: NEG
63421: PUSH
63422: LD_INT 2
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: LD_INT 2
63435: NEG
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: LD_INT 1
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 2
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 2
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 2
63474: PUSH
63475: LD_INT 2
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: LD_INT 2
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 1
63504: NEG
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 2
63515: NEG
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 2
63526: NEG
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 2
63538: NEG
63539: PUSH
63540: LD_INT 2
63542: NEG
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63569: LD_ADDR_VAR 0 59
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: LD_INT 1
63589: NEG
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 1
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: LD_INT 1
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: LD_INT 1
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 1
63627: NEG
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 1
63638: NEG
63639: PUSH
63640: LD_INT 1
63642: NEG
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63657: LD_ADDR_VAR 0 60
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 1
63685: PUSH
63686: LD_INT 0
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 1
63695: PUSH
63696: LD_INT 1
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: LD_INT 1
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 1
63715: NEG
63716: PUSH
63717: LD_INT 0
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63745: LD_ADDR_VAR 0 61
63749: PUSH
63750: LD_INT 0
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 1
63783: PUSH
63784: LD_INT 1
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 1
63803: NEG
63804: PUSH
63805: LD_INT 0
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: LD_INT 1
63818: NEG
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63833: LD_ADDR_VAR 0 62
63837: PUSH
63838: LD_INT 0
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 0
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 1
63861: PUSH
63862: LD_INT 0
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 1
63871: PUSH
63872: LD_INT 1
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: LD_INT 1
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 1
63891: NEG
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 1
63902: NEG
63903: PUSH
63904: LD_INT 1
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63921: LD_ADDR_VAR 0 63
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: LD_INT 1
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 1
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: LD_INT 1
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 1
63979: NEG
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: LD_INT 1
63994: NEG
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64009: LD_ADDR_VAR 0 64
64013: PUSH
64014: LD_INT 0
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: LD_INT 1
64029: NEG
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 1
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: LD_INT 1
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: LD_INT 1
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 1
64067: NEG
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: NEG
64079: PUSH
64080: LD_INT 1
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: ST_TO_ADDR
// end ; 1 :
64097: GO 69994
64099: LD_INT 1
64101: DOUBLE
64102: EQUAL
64103: IFTRUE 64107
64105: GO 66730
64107: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64108: LD_ADDR_VAR 0 11
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: PUSH
64117: LD_INT 3
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: LD_INT 3
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: PUSH
64139: LD_INT 2
64141: NEG
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: LIST
64151: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64152: LD_ADDR_VAR 0 12
64156: PUSH
64157: LD_INT 2
64159: PUSH
64160: LD_INT 1
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 3
64170: PUSH
64171: LD_INT 0
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 3
64180: PUSH
64181: LD_INT 1
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: LIST
64192: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64193: LD_ADDR_VAR 0 13
64197: PUSH
64198: LD_INT 3
64200: PUSH
64201: LD_INT 2
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 3
64210: PUSH
64211: LD_INT 3
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 2
64220: PUSH
64221: LD_INT 3
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: LIST
64232: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64233: LD_ADDR_VAR 0 14
64237: PUSH
64238: LD_INT 1
64240: PUSH
64241: LD_INT 3
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: LD_INT 3
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 1
64260: NEG
64261: PUSH
64262: LD_INT 2
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: LIST
64273: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64274: LD_ADDR_VAR 0 15
64278: PUSH
64279: LD_INT 2
64281: NEG
64282: PUSH
64283: LD_INT 1
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 3
64292: NEG
64293: PUSH
64294: LD_INT 0
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 3
64303: NEG
64304: PUSH
64305: LD_INT 1
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: LIST
64317: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64318: LD_ADDR_VAR 0 16
64322: PUSH
64323: LD_INT 2
64325: NEG
64326: PUSH
64327: LD_INT 3
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 3
64337: NEG
64338: PUSH
64339: LD_INT 2
64341: NEG
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 3
64349: NEG
64350: PUSH
64351: LD_INT 3
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: LIST
64363: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64364: LD_ADDR_VAR 0 17
64368: PUSH
64369: LD_INT 1
64371: NEG
64372: PUSH
64373: LD_INT 3
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: LD_INT 3
64386: NEG
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: LD_INT 2
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: LIST
64407: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64408: LD_ADDR_VAR 0 18
64412: PUSH
64413: LD_INT 2
64415: PUSH
64416: LD_INT 1
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 3
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 3
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: LIST
64448: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64449: LD_ADDR_VAR 0 19
64453: PUSH
64454: LD_INT 3
64456: PUSH
64457: LD_INT 2
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 3
64466: PUSH
64467: LD_INT 3
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 2
64476: PUSH
64477: LD_INT 3
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: LIST
64488: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64489: LD_ADDR_VAR 0 20
64493: PUSH
64494: LD_INT 1
64496: PUSH
64497: LD_INT 3
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: LD_INT 3
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 1
64516: NEG
64517: PUSH
64518: LD_INT 2
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: LIST
64529: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64530: LD_ADDR_VAR 0 21
64534: PUSH
64535: LD_INT 2
64537: NEG
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 3
64548: NEG
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 3
64559: NEG
64560: PUSH
64561: LD_INT 1
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: LIST
64573: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64574: LD_ADDR_VAR 0 22
64578: PUSH
64579: LD_INT 2
64581: NEG
64582: PUSH
64583: LD_INT 3
64585: NEG
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 3
64593: NEG
64594: PUSH
64595: LD_INT 2
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 3
64605: NEG
64606: PUSH
64607: LD_INT 3
64609: NEG
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: LIST
64619: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64620: LD_ADDR_VAR 0 23
64624: PUSH
64625: LD_INT 0
64627: PUSH
64628: LD_INT 3
64630: NEG
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 1
64638: NEG
64639: PUSH
64640: LD_INT 4
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: LD_INT 3
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: LIST
64663: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64664: LD_ADDR_VAR 0 24
64668: PUSH
64669: LD_INT 3
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 3
64681: PUSH
64682: LD_INT 1
64684: NEG
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 4
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: LIST
64704: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64705: LD_ADDR_VAR 0 25
64709: PUSH
64710: LD_INT 3
64712: PUSH
64713: LD_INT 3
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 4
64722: PUSH
64723: LD_INT 3
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 3
64732: PUSH
64733: LD_INT 4
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: LIST
64744: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64745: LD_ADDR_VAR 0 26
64749: PUSH
64750: LD_INT 0
64752: PUSH
64753: LD_INT 3
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 1
64762: PUSH
64763: LD_INT 4
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: NEG
64773: PUSH
64774: LD_INT 3
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: LIST
64785: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64786: LD_ADDR_VAR 0 27
64790: PUSH
64791: LD_INT 3
64793: NEG
64794: PUSH
64795: LD_INT 0
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 3
64804: NEG
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 4
64815: NEG
64816: PUSH
64817: LD_INT 1
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: LIST
64829: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64830: LD_ADDR_VAR 0 28
64834: PUSH
64835: LD_INT 3
64837: NEG
64838: PUSH
64839: LD_INT 3
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 3
64849: NEG
64850: PUSH
64851: LD_INT 4
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 4
64861: NEG
64862: PUSH
64863: LD_INT 3
64865: NEG
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: LIST
64875: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64876: LD_ADDR_VAR 0 29
64880: PUSH
64881: LD_INT 1
64883: NEG
64884: PUSH
64885: LD_INT 3
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 0
64895: PUSH
64896: LD_INT 3
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: LD_INT 2
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 1
64917: NEG
64918: PUSH
64919: LD_INT 4
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: LD_INT 4
64932: NEG
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 1
64940: PUSH
64941: LD_INT 3
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 1
64951: NEG
64952: PUSH
64953: LD_INT 5
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: LD_INT 5
64966: NEG
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: LD_INT 4
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 1
64985: NEG
64986: PUSH
64987: LD_INT 6
64989: NEG
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 0
64997: PUSH
64998: LD_INT 6
65000: NEG
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: LD_INT 5
65011: NEG
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65031: LD_ADDR_VAR 0 30
65035: PUSH
65036: LD_INT 2
65038: PUSH
65039: LD_INT 1
65041: NEG
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 3
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 3
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 3
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 4
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 4
65090: PUSH
65091: LD_INT 1
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 4
65100: PUSH
65101: LD_INT 1
65103: NEG
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 5
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 5
65121: PUSH
65122: LD_INT 1
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 5
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 6
65142: PUSH
65143: LD_INT 0
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 6
65152: PUSH
65153: LD_INT 1
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65174: LD_ADDR_VAR 0 31
65178: PUSH
65179: LD_INT 3
65181: PUSH
65182: LD_INT 2
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 3
65191: PUSH
65192: LD_INT 3
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 2
65201: PUSH
65202: LD_INT 3
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 4
65211: PUSH
65212: LD_INT 3
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 4
65221: PUSH
65222: LD_INT 4
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 3
65231: PUSH
65232: LD_INT 4
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 5
65241: PUSH
65242: LD_INT 4
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 5
65251: PUSH
65252: LD_INT 5
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 4
65261: PUSH
65262: LD_INT 5
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 6
65271: PUSH
65272: LD_INT 5
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 6
65281: PUSH
65282: LD_INT 6
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 5
65291: PUSH
65292: LD_INT 6
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65313: LD_ADDR_VAR 0 32
65317: PUSH
65318: LD_INT 1
65320: PUSH
65321: LD_INT 3
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 0
65330: PUSH
65331: LD_INT 3
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 1
65340: NEG
65341: PUSH
65342: LD_INT 2
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 1
65351: PUSH
65352: LD_INT 4
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: LD_INT 4
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: PUSH
65373: LD_INT 3
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: LD_INT 5
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: LD_INT 5
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: LD_INT 4
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 1
65413: PUSH
65414: LD_INT 6
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 0
65423: PUSH
65424: LD_INT 6
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 1
65433: NEG
65434: PUSH
65435: LD_INT 5
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65456: LD_ADDR_VAR 0 33
65460: PUSH
65461: LD_INT 2
65463: NEG
65464: PUSH
65465: LD_INT 1
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 3
65474: NEG
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 3
65485: NEG
65486: PUSH
65487: LD_INT 1
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 3
65497: NEG
65498: PUSH
65499: LD_INT 1
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 4
65508: NEG
65509: PUSH
65510: LD_INT 0
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 4
65519: NEG
65520: PUSH
65521: LD_INT 1
65523: NEG
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 4
65531: NEG
65532: PUSH
65533: LD_INT 1
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 5
65542: NEG
65543: PUSH
65544: LD_INT 0
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 5
65553: NEG
65554: PUSH
65555: LD_INT 1
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 5
65565: NEG
65566: PUSH
65567: LD_INT 1
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 6
65576: NEG
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 6
65587: NEG
65588: PUSH
65589: LD_INT 1
65591: NEG
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65611: LD_ADDR_VAR 0 34
65615: PUSH
65616: LD_INT 2
65618: NEG
65619: PUSH
65620: LD_INT 3
65622: NEG
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 3
65630: NEG
65631: PUSH
65632: LD_INT 2
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 3
65642: NEG
65643: PUSH
65644: LD_INT 3
65646: NEG
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 3
65654: NEG
65655: PUSH
65656: LD_INT 4
65658: NEG
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 4
65666: NEG
65667: PUSH
65668: LD_INT 3
65670: NEG
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 4
65678: NEG
65679: PUSH
65680: LD_INT 4
65682: NEG
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 4
65690: NEG
65691: PUSH
65692: LD_INT 5
65694: NEG
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 5
65702: NEG
65703: PUSH
65704: LD_INT 4
65706: NEG
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 5
65714: NEG
65715: PUSH
65716: LD_INT 5
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 5
65726: NEG
65727: PUSH
65728: LD_INT 6
65730: NEG
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 6
65738: NEG
65739: PUSH
65740: LD_INT 5
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 6
65750: NEG
65751: PUSH
65752: LD_INT 6
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65774: LD_ADDR_VAR 0 41
65778: PUSH
65779: LD_INT 0
65781: PUSH
65782: LD_INT 2
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 1
65792: NEG
65793: PUSH
65794: LD_INT 3
65796: NEG
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 1
65804: PUSH
65805: LD_INT 2
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: LIST
65817: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65818: LD_ADDR_VAR 0 42
65822: PUSH
65823: LD_INT 2
65825: PUSH
65826: LD_INT 0
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 2
65835: PUSH
65836: LD_INT 1
65838: NEG
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 3
65846: PUSH
65847: LD_INT 1
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: LIST
65858: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65859: LD_ADDR_VAR 0 43
65863: PUSH
65864: LD_INT 2
65866: PUSH
65867: LD_INT 2
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 3
65876: PUSH
65877: LD_INT 2
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 2
65886: PUSH
65887: LD_INT 3
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: LIST
65898: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65899: LD_ADDR_VAR 0 44
65903: PUSH
65904: LD_INT 0
65906: PUSH
65907: LD_INT 2
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 1
65916: PUSH
65917: LD_INT 3
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 1
65926: NEG
65927: PUSH
65928: LD_INT 2
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: LIST
65939: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65940: LD_ADDR_VAR 0 45
65944: PUSH
65945: LD_INT 2
65947: NEG
65948: PUSH
65949: LD_INT 0
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 2
65958: NEG
65959: PUSH
65960: LD_INT 1
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 3
65969: NEG
65970: PUSH
65971: LD_INT 1
65973: NEG
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: LIST
65983: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65984: LD_ADDR_VAR 0 46
65988: PUSH
65989: LD_INT 2
65991: NEG
65992: PUSH
65993: LD_INT 2
65995: NEG
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 2
66003: NEG
66004: PUSH
66005: LD_INT 3
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 3
66015: NEG
66016: PUSH
66017: LD_INT 2
66019: NEG
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: LIST
66029: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66030: LD_ADDR_VAR 0 47
66034: PUSH
66035: LD_INT 2
66037: NEG
66038: PUSH
66039: LD_INT 3
66041: NEG
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 1
66049: NEG
66050: PUSH
66051: LD_INT 3
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66063: LD_ADDR_VAR 0 48
66067: PUSH
66068: LD_INT 1
66070: PUSH
66071: LD_INT 2
66073: NEG
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 2
66081: PUSH
66082: LD_INT 1
66084: NEG
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66094: LD_ADDR_VAR 0 49
66098: PUSH
66099: LD_INT 3
66101: PUSH
66102: LD_INT 1
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 3
66111: PUSH
66112: LD_INT 2
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66123: LD_ADDR_VAR 0 50
66127: PUSH
66128: LD_INT 2
66130: PUSH
66131: LD_INT 3
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 1
66140: PUSH
66141: LD_INT 3
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66152: LD_ADDR_VAR 0 51
66156: PUSH
66157: LD_INT 1
66159: NEG
66160: PUSH
66161: LD_INT 2
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 2
66170: NEG
66171: PUSH
66172: LD_INT 1
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66183: LD_ADDR_VAR 0 52
66187: PUSH
66188: LD_INT 3
66190: NEG
66191: PUSH
66192: LD_INT 1
66194: NEG
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 3
66202: NEG
66203: PUSH
66204: LD_INT 2
66206: NEG
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66216: LD_ADDR_VAR 0 53
66220: PUSH
66221: LD_INT 1
66223: NEG
66224: PUSH
66225: LD_INT 3
66227: NEG
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: LD_INT 3
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 1
66246: PUSH
66247: LD_INT 2
66249: NEG
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: LIST
66259: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66260: LD_ADDR_VAR 0 54
66264: PUSH
66265: LD_INT 2
66267: PUSH
66268: LD_INT 1
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 3
66278: PUSH
66279: LD_INT 0
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 3
66288: PUSH
66289: LD_INT 1
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: LIST
66300: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66301: LD_ADDR_VAR 0 55
66305: PUSH
66306: LD_INT 3
66308: PUSH
66309: LD_INT 2
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 3
66318: PUSH
66319: LD_INT 3
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 2
66328: PUSH
66329: LD_INT 3
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: LIST
66340: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66341: LD_ADDR_VAR 0 56
66345: PUSH
66346: LD_INT 1
66348: PUSH
66349: LD_INT 3
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: LD_INT 3
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 1
66368: NEG
66369: PUSH
66370: LD_INT 2
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: LIST
66381: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66382: LD_ADDR_VAR 0 57
66386: PUSH
66387: LD_INT 2
66389: NEG
66390: PUSH
66391: LD_INT 1
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 3
66400: NEG
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 3
66411: NEG
66412: PUSH
66413: LD_INT 1
66415: NEG
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: LIST
66425: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66426: LD_ADDR_VAR 0 58
66430: PUSH
66431: LD_INT 2
66433: NEG
66434: PUSH
66435: LD_INT 3
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 3
66445: NEG
66446: PUSH
66447: LD_INT 2
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 3
66457: NEG
66458: PUSH
66459: LD_INT 3
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: LIST
66471: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66472: LD_ADDR_VAR 0 59
66476: PUSH
66477: LD_INT 1
66479: NEG
66480: PUSH
66481: LD_INT 2
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 0
66491: PUSH
66492: LD_INT 2
66494: NEG
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 1
66502: PUSH
66503: LD_INT 1
66505: NEG
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: LIST
66515: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66516: LD_ADDR_VAR 0 60
66520: PUSH
66521: LD_INT 1
66523: PUSH
66524: LD_INT 1
66526: NEG
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 2
66534: PUSH
66535: LD_INT 0
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 2
66544: PUSH
66545: LD_INT 1
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: LIST
66556: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66557: LD_ADDR_VAR 0 61
66561: PUSH
66562: LD_INT 2
66564: PUSH
66565: LD_INT 1
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 2
66574: PUSH
66575: LD_INT 2
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 1
66584: PUSH
66585: LD_INT 2
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: LIST
66596: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66597: LD_ADDR_VAR 0 62
66601: PUSH
66602: LD_INT 1
66604: PUSH
66605: LD_INT 2
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 0
66614: PUSH
66615: LD_INT 2
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 1
66624: NEG
66625: PUSH
66626: LD_INT 1
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: LIST
66637: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66638: LD_ADDR_VAR 0 63
66642: PUSH
66643: LD_INT 1
66645: NEG
66646: PUSH
66647: LD_INT 1
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 2
66656: NEG
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 2
66667: NEG
66668: PUSH
66669: LD_INT 1
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: LIST
66681: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66682: LD_ADDR_VAR 0 64
66686: PUSH
66687: LD_INT 1
66689: NEG
66690: PUSH
66691: LD_INT 2
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 2
66701: NEG
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 2
66713: NEG
66714: PUSH
66715: LD_INT 2
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: LIST
66727: ST_TO_ADDR
// end ; 2 :
66728: GO 69994
66730: LD_INT 2
66732: DOUBLE
66733: EQUAL
66734: IFTRUE 66738
66736: GO 69993
66738: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66739: LD_ADDR_VAR 0 29
66743: PUSH
66744: LD_INT 4
66746: PUSH
66747: LD_INT 0
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 4
66756: PUSH
66757: LD_INT 1
66759: NEG
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 5
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 5
66777: PUSH
66778: LD_INT 1
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 4
66787: PUSH
66788: LD_INT 1
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 3
66797: PUSH
66798: LD_INT 0
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 3
66807: PUSH
66808: LD_INT 1
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 3
66818: PUSH
66819: LD_INT 2
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 5
66829: PUSH
66830: LD_INT 2
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 3
66839: PUSH
66840: LD_INT 3
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 3
66849: PUSH
66850: LD_INT 2
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 4
66859: PUSH
66860: LD_INT 3
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 4
66869: PUSH
66870: LD_INT 4
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 3
66879: PUSH
66880: LD_INT 4
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 2
66889: PUSH
66890: LD_INT 3
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 2
66899: PUSH
66900: LD_INT 2
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 4
66909: PUSH
66910: LD_INT 2
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 2
66919: PUSH
66920: LD_INT 4
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 0
66929: PUSH
66930: LD_INT 4
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 0
66939: PUSH
66940: LD_INT 3
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 1
66949: PUSH
66950: LD_INT 4
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 1
66959: PUSH
66960: LD_INT 5
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 0
66969: PUSH
66970: LD_INT 5
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 1
66979: NEG
66980: PUSH
66981: LD_INT 4
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 1
66990: NEG
66991: PUSH
66992: LD_INT 3
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 2
67001: PUSH
67002: LD_INT 5
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 2
67011: NEG
67012: PUSH
67013: LD_INT 3
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 3
67022: NEG
67023: PUSH
67024: LD_INT 0
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 3
67033: NEG
67034: PUSH
67035: LD_INT 1
67037: NEG
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 2
67045: NEG
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 2
67056: NEG
67057: PUSH
67058: LD_INT 1
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 3
67067: NEG
67068: PUSH
67069: LD_INT 1
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 4
67078: NEG
67079: PUSH
67080: LD_INT 0
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 4
67089: NEG
67090: PUSH
67091: LD_INT 1
67093: NEG
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 4
67101: NEG
67102: PUSH
67103: LD_INT 2
67105: NEG
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 2
67113: NEG
67114: PUSH
67115: LD_INT 2
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 4
67124: NEG
67125: PUSH
67126: LD_INT 4
67128: NEG
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 4
67136: NEG
67137: PUSH
67138: LD_INT 5
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 3
67148: NEG
67149: PUSH
67150: LD_INT 4
67152: NEG
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 3
67160: NEG
67161: PUSH
67162: LD_INT 3
67164: NEG
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 4
67172: NEG
67173: PUSH
67174: LD_INT 3
67176: NEG
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 5
67184: NEG
67185: PUSH
67186: LD_INT 4
67188: NEG
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 5
67196: NEG
67197: PUSH
67198: LD_INT 5
67200: NEG
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 3
67208: NEG
67209: PUSH
67210: LD_INT 5
67212: NEG
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 5
67220: NEG
67221: PUSH
67222: LD_INT 3
67224: NEG
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67277: LD_ADDR_VAR 0 30
67281: PUSH
67282: LD_INT 4
67284: PUSH
67285: LD_INT 4
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 4
67294: PUSH
67295: LD_INT 3
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 5
67304: PUSH
67305: LD_INT 4
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 5
67314: PUSH
67315: LD_INT 5
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 4
67324: PUSH
67325: LD_INT 5
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 3
67334: PUSH
67335: LD_INT 4
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 3
67344: PUSH
67345: LD_INT 3
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 5
67354: PUSH
67355: LD_INT 3
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 3
67364: PUSH
67365: LD_INT 5
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 0
67374: PUSH
67375: LD_INT 3
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: LD_INT 2
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 1
67394: PUSH
67395: LD_INT 3
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 1
67404: PUSH
67405: LD_INT 4
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 0
67414: PUSH
67415: LD_INT 4
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 1
67424: NEG
67425: PUSH
67426: LD_INT 3
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 1
67435: NEG
67436: PUSH
67437: LD_INT 2
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 2
67446: PUSH
67447: LD_INT 4
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 2
67456: NEG
67457: PUSH
67458: LD_INT 2
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 4
67467: NEG
67468: PUSH
67469: LD_INT 0
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 4
67478: NEG
67479: PUSH
67480: LD_INT 1
67482: NEG
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 3
67490: NEG
67491: PUSH
67492: LD_INT 0
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 3
67501: NEG
67502: PUSH
67503: LD_INT 1
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 4
67512: NEG
67513: PUSH
67514: LD_INT 1
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 5
67523: NEG
67524: PUSH
67525: LD_INT 0
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 5
67534: NEG
67535: PUSH
67536: LD_INT 1
67538: NEG
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 5
67546: NEG
67547: PUSH
67548: LD_INT 2
67550: NEG
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 3
67558: NEG
67559: PUSH
67560: LD_INT 2
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 3
67569: NEG
67570: PUSH
67571: LD_INT 3
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 3
67581: NEG
67582: PUSH
67583: LD_INT 4
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 2
67593: NEG
67594: PUSH
67595: LD_INT 3
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 2
67605: NEG
67606: PUSH
67607: LD_INT 2
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 3
67617: NEG
67618: PUSH
67619: LD_INT 2
67621: NEG
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 4
67629: NEG
67630: PUSH
67631: LD_INT 3
67633: NEG
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 4
67641: NEG
67642: PUSH
67643: LD_INT 4
67645: NEG
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 2
67653: NEG
67654: PUSH
67655: LD_INT 4
67657: NEG
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 4
67665: NEG
67666: PUSH
67667: LD_INT 2
67669: NEG
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 0
67677: PUSH
67678: LD_INT 4
67680: NEG
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 0
67688: PUSH
67689: LD_INT 5
67691: NEG
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 1
67699: PUSH
67700: LD_INT 4
67702: NEG
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 1
67710: PUSH
67711: LD_INT 3
67713: NEG
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 0
67721: PUSH
67722: LD_INT 3
67724: NEG
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 1
67732: NEG
67733: PUSH
67734: LD_INT 4
67736: NEG
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 1
67744: NEG
67745: PUSH
67746: LD_INT 5
67748: NEG
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 2
67756: PUSH
67757: LD_INT 3
67759: NEG
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 2
67767: NEG
67768: PUSH
67769: LD_INT 5
67771: NEG
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67824: LD_ADDR_VAR 0 31
67828: PUSH
67829: LD_INT 0
67831: PUSH
67832: LD_INT 4
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 0
67841: PUSH
67842: LD_INT 3
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 1
67851: PUSH
67852: LD_INT 4
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 1
67861: PUSH
67862: LD_INT 5
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 0
67871: PUSH
67872: LD_INT 5
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 1
67881: NEG
67882: PUSH
67883: LD_INT 4
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 1
67892: NEG
67893: PUSH
67894: LD_INT 3
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 2
67903: PUSH
67904: LD_INT 5
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 2
67913: NEG
67914: PUSH
67915: LD_INT 3
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 3
67924: NEG
67925: PUSH
67926: LD_INT 0
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 3
67935: NEG
67936: PUSH
67937: LD_INT 1
67939: NEG
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 2
67947: NEG
67948: PUSH
67949: LD_INT 0
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 2
67958: NEG
67959: PUSH
67960: LD_INT 1
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 3
67969: NEG
67970: PUSH
67971: LD_INT 1
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 4
67980: NEG
67981: PUSH
67982: LD_INT 0
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 4
67991: NEG
67992: PUSH
67993: LD_INT 1
67995: NEG
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 4
68003: NEG
68004: PUSH
68005: LD_INT 2
68007: NEG
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 2
68015: NEG
68016: PUSH
68017: LD_INT 2
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 4
68026: NEG
68027: PUSH
68028: LD_INT 4
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 4
68038: NEG
68039: PUSH
68040: LD_INT 5
68042: NEG
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 3
68050: NEG
68051: PUSH
68052: LD_INT 4
68054: NEG
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 3
68062: NEG
68063: PUSH
68064: LD_INT 3
68066: NEG
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 4
68074: NEG
68075: PUSH
68076: LD_INT 3
68078: NEG
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 5
68086: NEG
68087: PUSH
68088: LD_INT 4
68090: NEG
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 5
68098: NEG
68099: PUSH
68100: LD_INT 5
68102: NEG
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 3
68110: NEG
68111: PUSH
68112: LD_INT 5
68114: NEG
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 5
68122: NEG
68123: PUSH
68124: LD_INT 3
68126: NEG
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 0
68134: PUSH
68135: LD_INT 3
68137: NEG
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 0
68145: PUSH
68146: LD_INT 4
68148: NEG
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 1
68156: PUSH
68157: LD_INT 3
68159: NEG
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 1
68167: PUSH
68168: LD_INT 2
68170: NEG
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 0
68178: PUSH
68179: LD_INT 2
68181: NEG
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 1
68189: NEG
68190: PUSH
68191: LD_INT 3
68193: NEG
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 1
68201: NEG
68202: PUSH
68203: LD_INT 4
68205: NEG
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 2
68213: PUSH
68214: LD_INT 2
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 2
68224: NEG
68225: PUSH
68226: LD_INT 4
68228: NEG
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 4
68236: PUSH
68237: LD_INT 0
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 4
68246: PUSH
68247: LD_INT 1
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 5
68257: PUSH
68258: LD_INT 0
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 5
68267: PUSH
68268: LD_INT 1
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 4
68277: PUSH
68278: LD_INT 1
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 3
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 3
68297: PUSH
68298: LD_INT 1
68300: NEG
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 3
68308: PUSH
68309: LD_INT 2
68311: NEG
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 5
68319: PUSH
68320: LD_INT 2
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68374: LD_ADDR_VAR 0 32
68378: PUSH
68379: LD_INT 4
68381: NEG
68382: PUSH
68383: LD_INT 0
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 4
68392: NEG
68393: PUSH
68394: LD_INT 1
68396: NEG
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 3
68404: NEG
68405: PUSH
68406: LD_INT 0
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 3
68415: NEG
68416: PUSH
68417: LD_INT 1
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 4
68426: NEG
68427: PUSH
68428: LD_INT 1
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 5
68437: NEG
68438: PUSH
68439: LD_INT 0
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 5
68448: NEG
68449: PUSH
68450: LD_INT 1
68452: NEG
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 5
68460: NEG
68461: PUSH
68462: LD_INT 2
68464: NEG
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: LD_INT 3
68472: NEG
68473: PUSH
68474: LD_INT 2
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 3
68483: NEG
68484: PUSH
68485: LD_INT 3
68487: NEG
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 3
68495: NEG
68496: PUSH
68497: LD_INT 4
68499: NEG
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 2
68507: NEG
68508: PUSH
68509: LD_INT 3
68511: NEG
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 2
68519: NEG
68520: PUSH
68521: LD_INT 2
68523: NEG
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 3
68531: NEG
68532: PUSH
68533: LD_INT 2
68535: NEG
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 4
68543: NEG
68544: PUSH
68545: LD_INT 3
68547: NEG
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 4
68555: NEG
68556: PUSH
68557: LD_INT 4
68559: NEG
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 2
68567: NEG
68568: PUSH
68569: LD_INT 4
68571: NEG
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 4
68579: NEG
68580: PUSH
68581: LD_INT 2
68583: NEG
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 0
68591: PUSH
68592: LD_INT 4
68594: NEG
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 0
68602: PUSH
68603: LD_INT 5
68605: NEG
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 1
68613: PUSH
68614: LD_INT 4
68616: NEG
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 1
68624: PUSH
68625: LD_INT 3
68627: NEG
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 0
68635: PUSH
68636: LD_INT 3
68638: NEG
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 1
68646: NEG
68647: PUSH
68648: LD_INT 4
68650: NEG
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 1
68658: NEG
68659: PUSH
68660: LD_INT 5
68662: NEG
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 2
68670: PUSH
68671: LD_INT 3
68673: NEG
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 2
68681: NEG
68682: PUSH
68683: LD_INT 5
68685: NEG
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 3
68693: PUSH
68694: LD_INT 0
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 3
68703: PUSH
68704: LD_INT 1
68706: NEG
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 4
68714: PUSH
68715: LD_INT 0
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 4
68724: PUSH
68725: LD_INT 1
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 3
68734: PUSH
68735: LD_INT 1
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 2
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 2
68754: PUSH
68755: LD_INT 1
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 2
68765: PUSH
68766: LD_INT 2
68768: NEG
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 4
68776: PUSH
68777: LD_INT 2
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 4
68786: PUSH
68787: LD_INT 4
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 4
68796: PUSH
68797: LD_INT 3
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 5
68806: PUSH
68807: LD_INT 4
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 5
68816: PUSH
68817: LD_INT 5
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 4
68826: PUSH
68827: LD_INT 5
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 3
68836: PUSH
68837: LD_INT 4
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 3
68846: PUSH
68847: LD_INT 3
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 5
68856: PUSH
68857: LD_INT 3
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 3
68866: PUSH
68867: LD_INT 5
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68921: LD_ADDR_VAR 0 33
68925: PUSH
68926: LD_INT 4
68928: NEG
68929: PUSH
68930: LD_INT 4
68932: NEG
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 4
68940: NEG
68941: PUSH
68942: LD_INT 5
68944: NEG
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 3
68952: NEG
68953: PUSH
68954: LD_INT 4
68956: NEG
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 3
68964: NEG
68965: PUSH
68966: LD_INT 3
68968: NEG
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 4
68976: NEG
68977: PUSH
68978: LD_INT 3
68980: NEG
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 5
68988: NEG
68989: PUSH
68990: LD_INT 4
68992: NEG
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 5
69000: NEG
69001: PUSH
69002: LD_INT 5
69004: NEG
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 3
69012: NEG
69013: PUSH
69014: LD_INT 5
69016: NEG
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 5
69024: NEG
69025: PUSH
69026: LD_INT 3
69028: NEG
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 0
69036: PUSH
69037: LD_INT 3
69039: NEG
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 0
69047: PUSH
69048: LD_INT 4
69050: NEG
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 1
69058: PUSH
69059: LD_INT 3
69061: NEG
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 1
69069: PUSH
69070: LD_INT 2
69072: NEG
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 0
69080: PUSH
69081: LD_INT 2
69083: NEG
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 1
69091: NEG
69092: PUSH
69093: LD_INT 3
69095: NEG
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 1
69103: NEG
69104: PUSH
69105: LD_INT 4
69107: NEG
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 2
69115: PUSH
69116: LD_INT 2
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 2
69126: NEG
69127: PUSH
69128: LD_INT 4
69130: NEG
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 4
69138: PUSH
69139: LD_INT 0
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 4
69148: PUSH
69149: LD_INT 1
69151: NEG
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 5
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 5
69169: PUSH
69170: LD_INT 1
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 4
69179: PUSH
69180: LD_INT 1
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 3
69189: PUSH
69190: LD_INT 0
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 3
69199: PUSH
69200: LD_INT 1
69202: NEG
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 3
69210: PUSH
69211: LD_INT 2
69213: NEG
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 5
69221: PUSH
69222: LD_INT 2
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 3
69231: PUSH
69232: LD_INT 3
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 3
69241: PUSH
69242: LD_INT 2
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 4
69251: PUSH
69252: LD_INT 3
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 4
69261: PUSH
69262: LD_INT 4
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 3
69271: PUSH
69272: LD_INT 4
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 2
69281: PUSH
69282: LD_INT 3
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 2
69291: PUSH
69292: LD_INT 2
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 4
69301: PUSH
69302: LD_INT 2
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 2
69311: PUSH
69312: LD_INT 4
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 0
69321: PUSH
69322: LD_INT 4
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 0
69331: PUSH
69332: LD_INT 3
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 1
69341: PUSH
69342: LD_INT 4
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 1
69351: PUSH
69352: LD_INT 5
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 0
69361: PUSH
69362: LD_INT 5
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 1
69371: NEG
69372: PUSH
69373: LD_INT 4
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 1
69382: NEG
69383: PUSH
69384: LD_INT 3
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 2
69393: PUSH
69394: LD_INT 5
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 2
69403: NEG
69404: PUSH
69405: LD_INT 3
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69459: LD_ADDR_VAR 0 34
69463: PUSH
69464: LD_INT 0
69466: PUSH
69467: LD_INT 4
69469: NEG
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 0
69477: PUSH
69478: LD_INT 5
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 1
69488: PUSH
69489: LD_INT 4
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 1
69499: PUSH
69500: LD_INT 3
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 0
69510: PUSH
69511: LD_INT 3
69513: NEG
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 1
69521: NEG
69522: PUSH
69523: LD_INT 4
69525: NEG
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 1
69533: NEG
69534: PUSH
69535: LD_INT 5
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 2
69545: PUSH
69546: LD_INT 3
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 2
69556: NEG
69557: PUSH
69558: LD_INT 5
69560: NEG
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 3
69568: PUSH
69569: LD_INT 0
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 3
69578: PUSH
69579: LD_INT 1
69581: NEG
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 4
69589: PUSH
69590: LD_INT 0
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 4
69599: PUSH
69600: LD_INT 1
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 3
69609: PUSH
69610: LD_INT 1
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 2
69619: PUSH
69620: LD_INT 0
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 2
69629: PUSH
69630: LD_INT 1
69632: NEG
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 2
69640: PUSH
69641: LD_INT 2
69643: NEG
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 4
69651: PUSH
69652: LD_INT 2
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 4
69661: PUSH
69662: LD_INT 4
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 4
69671: PUSH
69672: LD_INT 3
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 5
69681: PUSH
69682: LD_INT 4
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 5
69691: PUSH
69692: LD_INT 5
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 4
69701: PUSH
69702: LD_INT 5
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 3
69711: PUSH
69712: LD_INT 4
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 3
69721: PUSH
69722: LD_INT 3
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 5
69731: PUSH
69732: LD_INT 3
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 3
69741: PUSH
69742: LD_INT 5
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 0
69751: PUSH
69752: LD_INT 3
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 0
69761: PUSH
69762: LD_INT 2
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 1
69771: PUSH
69772: LD_INT 3
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 1
69781: PUSH
69782: LD_INT 4
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 0
69791: PUSH
69792: LD_INT 4
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 1
69801: NEG
69802: PUSH
69803: LD_INT 3
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 1
69812: NEG
69813: PUSH
69814: LD_INT 2
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 2
69823: PUSH
69824: LD_INT 4
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 2
69833: NEG
69834: PUSH
69835: LD_INT 2
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 4
69844: NEG
69845: PUSH
69846: LD_INT 0
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 4
69855: NEG
69856: PUSH
69857: LD_INT 1
69859: NEG
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 3
69867: NEG
69868: PUSH
69869: LD_INT 0
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 3
69878: NEG
69879: PUSH
69880: LD_INT 1
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 4
69889: NEG
69890: PUSH
69891: LD_INT 1
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 5
69900: NEG
69901: PUSH
69902: LD_INT 0
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 5
69911: NEG
69912: PUSH
69913: LD_INT 1
69915: NEG
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 5
69923: NEG
69924: PUSH
69925: LD_INT 2
69927: NEG
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 3
69935: NEG
69936: PUSH
69937: LD_INT 2
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: ST_TO_ADDR
// end ; end ;
69991: GO 69994
69993: POP
// case btype of b_depot , b_warehouse :
69994: LD_VAR 0 1
69998: PUSH
69999: LD_INT 0
70001: DOUBLE
70002: EQUAL
70003: IFTRUE 70013
70005: LD_INT 1
70007: DOUBLE
70008: EQUAL
70009: IFTRUE 70013
70011: GO 70214
70013: POP
// case nation of nation_american :
70014: LD_VAR 0 5
70018: PUSH
70019: LD_INT 1
70021: DOUBLE
70022: EQUAL
70023: IFTRUE 70027
70025: GO 70083
70027: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
70028: LD_ADDR_VAR 0 9
70032: PUSH
70033: LD_VAR 0 11
70037: PUSH
70038: LD_VAR 0 12
70042: PUSH
70043: LD_VAR 0 13
70047: PUSH
70048: LD_VAR 0 14
70052: PUSH
70053: LD_VAR 0 15
70057: PUSH
70058: LD_VAR 0 16
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: PUSH
70071: LD_VAR 0 4
70075: PUSH
70076: LD_INT 1
70078: PLUS
70079: ARRAY
70080: ST_TO_ADDR
70081: GO 70212
70083: LD_INT 2
70085: DOUBLE
70086: EQUAL
70087: IFTRUE 70091
70089: GO 70147
70091: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
70092: LD_ADDR_VAR 0 9
70096: PUSH
70097: LD_VAR 0 17
70101: PUSH
70102: LD_VAR 0 18
70106: PUSH
70107: LD_VAR 0 19
70111: PUSH
70112: LD_VAR 0 20
70116: PUSH
70117: LD_VAR 0 21
70121: PUSH
70122: LD_VAR 0 22
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: PUSH
70135: LD_VAR 0 4
70139: PUSH
70140: LD_INT 1
70142: PLUS
70143: ARRAY
70144: ST_TO_ADDR
70145: GO 70212
70147: LD_INT 3
70149: DOUBLE
70150: EQUAL
70151: IFTRUE 70155
70153: GO 70211
70155: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70156: LD_ADDR_VAR 0 9
70160: PUSH
70161: LD_VAR 0 23
70165: PUSH
70166: LD_VAR 0 24
70170: PUSH
70171: LD_VAR 0 25
70175: PUSH
70176: LD_VAR 0 26
70180: PUSH
70181: LD_VAR 0 27
70185: PUSH
70186: LD_VAR 0 28
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: PUSH
70199: LD_VAR 0 4
70203: PUSH
70204: LD_INT 1
70206: PLUS
70207: ARRAY
70208: ST_TO_ADDR
70209: GO 70212
70211: POP
70212: GO 70767
70214: LD_INT 2
70216: DOUBLE
70217: EQUAL
70218: IFTRUE 70228
70220: LD_INT 3
70222: DOUBLE
70223: EQUAL
70224: IFTRUE 70228
70226: GO 70284
70228: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70229: LD_ADDR_VAR 0 9
70233: PUSH
70234: LD_VAR 0 29
70238: PUSH
70239: LD_VAR 0 30
70243: PUSH
70244: LD_VAR 0 31
70248: PUSH
70249: LD_VAR 0 32
70253: PUSH
70254: LD_VAR 0 33
70258: PUSH
70259: LD_VAR 0 34
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: PUSH
70272: LD_VAR 0 4
70276: PUSH
70277: LD_INT 1
70279: PLUS
70280: ARRAY
70281: ST_TO_ADDR
70282: GO 70767
70284: LD_INT 16
70286: DOUBLE
70287: EQUAL
70288: IFTRUE 70346
70290: LD_INT 17
70292: DOUBLE
70293: EQUAL
70294: IFTRUE 70346
70296: LD_INT 18
70298: DOUBLE
70299: EQUAL
70300: IFTRUE 70346
70302: LD_INT 19
70304: DOUBLE
70305: EQUAL
70306: IFTRUE 70346
70308: LD_INT 22
70310: DOUBLE
70311: EQUAL
70312: IFTRUE 70346
70314: LD_INT 20
70316: DOUBLE
70317: EQUAL
70318: IFTRUE 70346
70320: LD_INT 21
70322: DOUBLE
70323: EQUAL
70324: IFTRUE 70346
70326: LD_INT 23
70328: DOUBLE
70329: EQUAL
70330: IFTRUE 70346
70332: LD_INT 24
70334: DOUBLE
70335: EQUAL
70336: IFTRUE 70346
70338: LD_INT 25
70340: DOUBLE
70341: EQUAL
70342: IFTRUE 70346
70344: GO 70402
70346: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70347: LD_ADDR_VAR 0 9
70351: PUSH
70352: LD_VAR 0 35
70356: PUSH
70357: LD_VAR 0 36
70361: PUSH
70362: LD_VAR 0 37
70366: PUSH
70367: LD_VAR 0 38
70371: PUSH
70372: LD_VAR 0 39
70376: PUSH
70377: LD_VAR 0 40
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: PUSH
70390: LD_VAR 0 4
70394: PUSH
70395: LD_INT 1
70397: PLUS
70398: ARRAY
70399: ST_TO_ADDR
70400: GO 70767
70402: LD_INT 6
70404: DOUBLE
70405: EQUAL
70406: IFTRUE 70458
70408: LD_INT 7
70410: DOUBLE
70411: EQUAL
70412: IFTRUE 70458
70414: LD_INT 8
70416: DOUBLE
70417: EQUAL
70418: IFTRUE 70458
70420: LD_INT 13
70422: DOUBLE
70423: EQUAL
70424: IFTRUE 70458
70426: LD_INT 12
70428: DOUBLE
70429: EQUAL
70430: IFTRUE 70458
70432: LD_INT 15
70434: DOUBLE
70435: EQUAL
70436: IFTRUE 70458
70438: LD_INT 11
70440: DOUBLE
70441: EQUAL
70442: IFTRUE 70458
70444: LD_INT 14
70446: DOUBLE
70447: EQUAL
70448: IFTRUE 70458
70450: LD_INT 10
70452: DOUBLE
70453: EQUAL
70454: IFTRUE 70458
70456: GO 70514
70458: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
70459: LD_ADDR_VAR 0 9
70463: PUSH
70464: LD_VAR 0 41
70468: PUSH
70469: LD_VAR 0 42
70473: PUSH
70474: LD_VAR 0 43
70478: PUSH
70479: LD_VAR 0 44
70483: PUSH
70484: LD_VAR 0 45
70488: PUSH
70489: LD_VAR 0 46
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: PUSH
70502: LD_VAR 0 4
70506: PUSH
70507: LD_INT 1
70509: PLUS
70510: ARRAY
70511: ST_TO_ADDR
70512: GO 70767
70514: LD_INT 36
70516: DOUBLE
70517: EQUAL
70518: IFTRUE 70522
70520: GO 70578
70522: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70523: LD_ADDR_VAR 0 9
70527: PUSH
70528: LD_VAR 0 47
70532: PUSH
70533: LD_VAR 0 48
70537: PUSH
70538: LD_VAR 0 49
70542: PUSH
70543: LD_VAR 0 50
70547: PUSH
70548: LD_VAR 0 51
70552: PUSH
70553: LD_VAR 0 52
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: PUSH
70566: LD_VAR 0 4
70570: PUSH
70571: LD_INT 1
70573: PLUS
70574: ARRAY
70575: ST_TO_ADDR
70576: GO 70767
70578: LD_INT 4
70580: DOUBLE
70581: EQUAL
70582: IFTRUE 70604
70584: LD_INT 5
70586: DOUBLE
70587: EQUAL
70588: IFTRUE 70604
70590: LD_INT 34
70592: DOUBLE
70593: EQUAL
70594: IFTRUE 70604
70596: LD_INT 37
70598: DOUBLE
70599: EQUAL
70600: IFTRUE 70604
70602: GO 70660
70604: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70605: LD_ADDR_VAR 0 9
70609: PUSH
70610: LD_VAR 0 53
70614: PUSH
70615: LD_VAR 0 54
70619: PUSH
70620: LD_VAR 0 55
70624: PUSH
70625: LD_VAR 0 56
70629: PUSH
70630: LD_VAR 0 57
70634: PUSH
70635: LD_VAR 0 58
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: PUSH
70648: LD_VAR 0 4
70652: PUSH
70653: LD_INT 1
70655: PLUS
70656: ARRAY
70657: ST_TO_ADDR
70658: GO 70767
70660: LD_INT 31
70662: DOUBLE
70663: EQUAL
70664: IFTRUE 70710
70666: LD_INT 32
70668: DOUBLE
70669: EQUAL
70670: IFTRUE 70710
70672: LD_INT 33
70674: DOUBLE
70675: EQUAL
70676: IFTRUE 70710
70678: LD_INT 27
70680: DOUBLE
70681: EQUAL
70682: IFTRUE 70710
70684: LD_INT 26
70686: DOUBLE
70687: EQUAL
70688: IFTRUE 70710
70690: LD_INT 28
70692: DOUBLE
70693: EQUAL
70694: IFTRUE 70710
70696: LD_INT 29
70698: DOUBLE
70699: EQUAL
70700: IFTRUE 70710
70702: LD_INT 30
70704: DOUBLE
70705: EQUAL
70706: IFTRUE 70710
70708: GO 70766
70710: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
70711: LD_ADDR_VAR 0 9
70715: PUSH
70716: LD_VAR 0 59
70720: PUSH
70721: LD_VAR 0 60
70725: PUSH
70726: LD_VAR 0 61
70730: PUSH
70731: LD_VAR 0 62
70735: PUSH
70736: LD_VAR 0 63
70740: PUSH
70741: LD_VAR 0 64
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: PUSH
70754: LD_VAR 0 4
70758: PUSH
70759: LD_INT 1
70761: PLUS
70762: ARRAY
70763: ST_TO_ADDR
70764: GO 70767
70766: POP
// temp_list2 = [ ] ;
70767: LD_ADDR_VAR 0 10
70771: PUSH
70772: EMPTY
70773: ST_TO_ADDR
// for i in temp_list do
70774: LD_ADDR_VAR 0 8
70778: PUSH
70779: LD_VAR 0 9
70783: PUSH
70784: FOR_IN
70785: IFFALSE 70837
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70787: LD_ADDR_VAR 0 10
70791: PUSH
70792: LD_VAR 0 10
70796: PUSH
70797: LD_VAR 0 8
70801: PUSH
70802: LD_INT 1
70804: ARRAY
70805: PUSH
70806: LD_VAR 0 2
70810: PLUS
70811: PUSH
70812: LD_VAR 0 8
70816: PUSH
70817: LD_INT 2
70819: ARRAY
70820: PUSH
70821: LD_VAR 0 3
70825: PLUS
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: EMPTY
70832: LIST
70833: ADD
70834: ST_TO_ADDR
70835: GO 70784
70837: POP
70838: POP
// result = temp_list2 ;
70839: LD_ADDR_VAR 0 7
70843: PUSH
70844: LD_VAR 0 10
70848: ST_TO_ADDR
// end ;
70849: LD_VAR 0 7
70853: RET
// export function EnemyInRange ( unit , dist ) ; begin
70854: LD_INT 0
70856: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70857: LD_ADDR_VAR 0 3
70861: PUSH
70862: LD_VAR 0 1
70866: PPUSH
70867: CALL_OW 255
70871: PPUSH
70872: LD_VAR 0 1
70876: PPUSH
70877: CALL_OW 250
70881: PPUSH
70882: LD_VAR 0 1
70886: PPUSH
70887: CALL_OW 251
70891: PPUSH
70892: LD_VAR 0 2
70896: PPUSH
70897: CALL 44958 0 4
70901: PUSH
70902: LD_INT 4
70904: ARRAY
70905: ST_TO_ADDR
// end ;
70906: LD_VAR 0 3
70910: RET
// export function PlayerSeeMe ( unit ) ; begin
70911: LD_INT 0
70913: PPUSH
// result := See ( your_side , unit ) ;
70914: LD_ADDR_VAR 0 2
70918: PUSH
70919: LD_OWVAR 2
70923: PPUSH
70924: LD_VAR 0 1
70928: PPUSH
70929: CALL_OW 292
70933: ST_TO_ADDR
// end ;
70934: LD_VAR 0 2
70938: RET
// export function ReverseDir ( unit ) ; begin
70939: LD_INT 0
70941: PPUSH
// if not unit then
70942: LD_VAR 0 1
70946: NOT
70947: IFFALSE 70951
// exit ;
70949: GO 70974
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70951: LD_ADDR_VAR 0 2
70955: PUSH
70956: LD_VAR 0 1
70960: PPUSH
70961: CALL_OW 254
70965: PUSH
70966: LD_INT 3
70968: PLUS
70969: PUSH
70970: LD_INT 6
70972: MOD
70973: ST_TO_ADDR
// end ;
70974: LD_VAR 0 2
70978: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70979: LD_INT 0
70981: PPUSH
70982: PPUSH
70983: PPUSH
70984: PPUSH
70985: PPUSH
// if not hexes then
70986: LD_VAR 0 2
70990: NOT
70991: IFFALSE 70995
// exit ;
70993: GO 71143
// dist := 9999 ;
70995: LD_ADDR_VAR 0 5
70999: PUSH
71000: LD_INT 9999
71002: ST_TO_ADDR
// for i = 1 to hexes do
71003: LD_ADDR_VAR 0 4
71007: PUSH
71008: DOUBLE
71009: LD_INT 1
71011: DEC
71012: ST_TO_ADDR
71013: LD_VAR 0 2
71017: PUSH
71018: FOR_TO
71019: IFFALSE 71131
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71021: LD_VAR 0 1
71025: PPUSH
71026: LD_VAR 0 2
71030: PUSH
71031: LD_VAR 0 4
71035: ARRAY
71036: PUSH
71037: LD_INT 1
71039: ARRAY
71040: PPUSH
71041: LD_VAR 0 2
71045: PUSH
71046: LD_VAR 0 4
71050: ARRAY
71051: PUSH
71052: LD_INT 2
71054: ARRAY
71055: PPUSH
71056: CALL_OW 297
71060: PUSH
71061: LD_VAR 0 5
71065: LESS
71066: IFFALSE 71129
// begin hex := hexes [ i ] ;
71068: LD_ADDR_VAR 0 7
71072: PUSH
71073: LD_VAR 0 2
71077: PUSH
71078: LD_VAR 0 4
71082: ARRAY
71083: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71084: LD_ADDR_VAR 0 5
71088: PUSH
71089: LD_VAR 0 1
71093: PPUSH
71094: LD_VAR 0 2
71098: PUSH
71099: LD_VAR 0 4
71103: ARRAY
71104: PUSH
71105: LD_INT 1
71107: ARRAY
71108: PPUSH
71109: LD_VAR 0 2
71113: PUSH
71114: LD_VAR 0 4
71118: ARRAY
71119: PUSH
71120: LD_INT 2
71122: ARRAY
71123: PPUSH
71124: CALL_OW 297
71128: ST_TO_ADDR
// end ; end ;
71129: GO 71018
71131: POP
71132: POP
// result := hex ;
71133: LD_ADDR_VAR 0 3
71137: PUSH
71138: LD_VAR 0 7
71142: ST_TO_ADDR
// end ;
71143: LD_VAR 0 3
71147: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71148: LD_INT 0
71150: PPUSH
71151: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71152: LD_VAR 0 1
71156: NOT
71157: PUSH
71158: LD_VAR 0 1
71162: PUSH
71163: LD_INT 21
71165: PUSH
71166: LD_INT 2
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PUSH
71173: LD_INT 23
71175: PUSH
71176: LD_INT 2
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PPUSH
71187: CALL_OW 69
71191: IN
71192: NOT
71193: OR
71194: IFFALSE 71198
// exit ;
71196: GO 71245
// for i = 1 to 3 do
71198: LD_ADDR_VAR 0 3
71202: PUSH
71203: DOUBLE
71204: LD_INT 1
71206: DEC
71207: ST_TO_ADDR
71208: LD_INT 3
71210: PUSH
71211: FOR_TO
71212: IFFALSE 71243
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71214: LD_VAR 0 1
71218: PPUSH
71219: CALL_OW 250
71223: PPUSH
71224: LD_VAR 0 1
71228: PPUSH
71229: CALL_OW 251
71233: PPUSH
71234: LD_INT 1
71236: PPUSH
71237: CALL_OW 453
71241: GO 71211
71243: POP
71244: POP
// end ;
71245: LD_VAR 0 2
71249: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71250: LD_INT 0
71252: PPUSH
71253: PPUSH
71254: PPUSH
71255: PPUSH
71256: PPUSH
71257: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71258: LD_VAR 0 1
71262: NOT
71263: PUSH
71264: LD_VAR 0 2
71268: NOT
71269: OR
71270: PUSH
71271: LD_VAR 0 1
71275: PPUSH
71276: CALL_OW 314
71280: OR
71281: IFFALSE 71285
// exit ;
71283: GO 71726
// x := GetX ( enemy_unit ) ;
71285: LD_ADDR_VAR 0 7
71289: PUSH
71290: LD_VAR 0 2
71294: PPUSH
71295: CALL_OW 250
71299: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71300: LD_ADDR_VAR 0 8
71304: PUSH
71305: LD_VAR 0 2
71309: PPUSH
71310: CALL_OW 251
71314: ST_TO_ADDR
// if not x or not y then
71315: LD_VAR 0 7
71319: NOT
71320: PUSH
71321: LD_VAR 0 8
71325: NOT
71326: OR
71327: IFFALSE 71331
// exit ;
71329: GO 71726
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71331: LD_ADDR_VAR 0 6
71335: PUSH
71336: LD_VAR 0 7
71340: PPUSH
71341: LD_INT 0
71343: PPUSH
71344: LD_INT 4
71346: PPUSH
71347: CALL_OW 272
71351: PUSH
71352: LD_VAR 0 8
71356: PPUSH
71357: LD_INT 0
71359: PPUSH
71360: LD_INT 4
71362: PPUSH
71363: CALL_OW 273
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: LD_VAR 0 7
71376: PPUSH
71377: LD_INT 1
71379: PPUSH
71380: LD_INT 4
71382: PPUSH
71383: CALL_OW 272
71387: PUSH
71388: LD_VAR 0 8
71392: PPUSH
71393: LD_INT 1
71395: PPUSH
71396: LD_INT 4
71398: PPUSH
71399: CALL_OW 273
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_VAR 0 7
71412: PPUSH
71413: LD_INT 2
71415: PPUSH
71416: LD_INT 4
71418: PPUSH
71419: CALL_OW 272
71423: PUSH
71424: LD_VAR 0 8
71428: PPUSH
71429: LD_INT 2
71431: PPUSH
71432: LD_INT 4
71434: PPUSH
71435: CALL_OW 273
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_VAR 0 7
71448: PPUSH
71449: LD_INT 3
71451: PPUSH
71452: LD_INT 4
71454: PPUSH
71455: CALL_OW 272
71459: PUSH
71460: LD_VAR 0 8
71464: PPUSH
71465: LD_INT 3
71467: PPUSH
71468: LD_INT 4
71470: PPUSH
71471: CALL_OW 273
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_VAR 0 7
71484: PPUSH
71485: LD_INT 4
71487: PPUSH
71488: LD_INT 4
71490: PPUSH
71491: CALL_OW 272
71495: PUSH
71496: LD_VAR 0 8
71500: PPUSH
71501: LD_INT 4
71503: PPUSH
71504: LD_INT 4
71506: PPUSH
71507: CALL_OW 273
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_VAR 0 7
71520: PPUSH
71521: LD_INT 5
71523: PPUSH
71524: LD_INT 4
71526: PPUSH
71527: CALL_OW 272
71531: PUSH
71532: LD_VAR 0 8
71536: PPUSH
71537: LD_INT 5
71539: PPUSH
71540: LD_INT 4
71542: PPUSH
71543: CALL_OW 273
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: ST_TO_ADDR
// for i = tmp downto 1 do
71560: LD_ADDR_VAR 0 4
71564: PUSH
71565: DOUBLE
71566: LD_VAR 0 6
71570: INC
71571: ST_TO_ADDR
71572: LD_INT 1
71574: PUSH
71575: FOR_DOWNTO
71576: IFFALSE 71677
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71578: LD_VAR 0 6
71582: PUSH
71583: LD_VAR 0 4
71587: ARRAY
71588: PUSH
71589: LD_INT 1
71591: ARRAY
71592: PPUSH
71593: LD_VAR 0 6
71597: PUSH
71598: LD_VAR 0 4
71602: ARRAY
71603: PUSH
71604: LD_INT 2
71606: ARRAY
71607: PPUSH
71608: CALL_OW 488
71612: NOT
71613: PUSH
71614: LD_VAR 0 6
71618: PUSH
71619: LD_VAR 0 4
71623: ARRAY
71624: PUSH
71625: LD_INT 1
71627: ARRAY
71628: PPUSH
71629: LD_VAR 0 6
71633: PUSH
71634: LD_VAR 0 4
71638: ARRAY
71639: PUSH
71640: LD_INT 2
71642: ARRAY
71643: PPUSH
71644: CALL_OW 428
71648: PUSH
71649: LD_INT 0
71651: NONEQUAL
71652: OR
71653: IFFALSE 71675
// tmp := Delete ( tmp , i ) ;
71655: LD_ADDR_VAR 0 6
71659: PUSH
71660: LD_VAR 0 6
71664: PPUSH
71665: LD_VAR 0 4
71669: PPUSH
71670: CALL_OW 3
71674: ST_TO_ADDR
71675: GO 71575
71677: POP
71678: POP
// j := GetClosestHex ( unit , tmp ) ;
71679: LD_ADDR_VAR 0 5
71683: PUSH
71684: LD_VAR 0 1
71688: PPUSH
71689: LD_VAR 0 6
71693: PPUSH
71694: CALL 70979 0 2
71698: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71699: LD_VAR 0 1
71703: PPUSH
71704: LD_VAR 0 5
71708: PUSH
71709: LD_INT 1
71711: ARRAY
71712: PPUSH
71713: LD_VAR 0 5
71717: PUSH
71718: LD_INT 2
71720: ARRAY
71721: PPUSH
71722: CALL_OW 111
// end ;
71726: LD_VAR 0 3
71730: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71731: LD_INT 0
71733: PPUSH
71734: PPUSH
71735: PPUSH
// uc_side = 0 ;
71736: LD_ADDR_OWVAR 20
71740: PUSH
71741: LD_INT 0
71743: ST_TO_ADDR
// uc_nation = 0 ;
71744: LD_ADDR_OWVAR 21
71748: PUSH
71749: LD_INT 0
71751: ST_TO_ADDR
// InitHc ;
71752: CALL_OW 19
// InitVc ;
71756: CALL_OW 20
// if mastodonts then
71760: LD_VAR 0 6
71764: IFFALSE 71831
// for i = 1 to mastodonts do
71766: LD_ADDR_VAR 0 11
71770: PUSH
71771: DOUBLE
71772: LD_INT 1
71774: DEC
71775: ST_TO_ADDR
71776: LD_VAR 0 6
71780: PUSH
71781: FOR_TO
71782: IFFALSE 71829
// begin vc_chassis := 31 ;
71784: LD_ADDR_OWVAR 37
71788: PUSH
71789: LD_INT 31
71791: ST_TO_ADDR
// vc_control := control_rider ;
71792: LD_ADDR_OWVAR 38
71796: PUSH
71797: LD_INT 4
71799: ST_TO_ADDR
// animal := CreateVehicle ;
71800: LD_ADDR_VAR 0 12
71804: PUSH
71805: CALL_OW 45
71809: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71810: LD_VAR 0 12
71814: PPUSH
71815: LD_VAR 0 8
71819: PPUSH
71820: LD_INT 0
71822: PPUSH
71823: CALL 73900 0 3
// end ;
71827: GO 71781
71829: POP
71830: POP
// if horses then
71831: LD_VAR 0 5
71835: IFFALSE 71902
// for i = 1 to horses do
71837: LD_ADDR_VAR 0 11
71841: PUSH
71842: DOUBLE
71843: LD_INT 1
71845: DEC
71846: ST_TO_ADDR
71847: LD_VAR 0 5
71851: PUSH
71852: FOR_TO
71853: IFFALSE 71900
// begin hc_class := 21 ;
71855: LD_ADDR_OWVAR 28
71859: PUSH
71860: LD_INT 21
71862: ST_TO_ADDR
// hc_gallery :=  ;
71863: LD_ADDR_OWVAR 33
71867: PUSH
71868: LD_STRING 
71870: ST_TO_ADDR
// animal := CreateHuman ;
71871: LD_ADDR_VAR 0 12
71875: PUSH
71876: CALL_OW 44
71880: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71881: LD_VAR 0 12
71885: PPUSH
71886: LD_VAR 0 8
71890: PPUSH
71891: LD_INT 0
71893: PPUSH
71894: CALL 73900 0 3
// end ;
71898: GO 71852
71900: POP
71901: POP
// if birds then
71902: LD_VAR 0 1
71906: IFFALSE 71973
// for i = 1 to birds do
71908: LD_ADDR_VAR 0 11
71912: PUSH
71913: DOUBLE
71914: LD_INT 1
71916: DEC
71917: ST_TO_ADDR
71918: LD_VAR 0 1
71922: PUSH
71923: FOR_TO
71924: IFFALSE 71971
// begin hc_class = 18 ;
71926: LD_ADDR_OWVAR 28
71930: PUSH
71931: LD_INT 18
71933: ST_TO_ADDR
// hc_gallery =  ;
71934: LD_ADDR_OWVAR 33
71938: PUSH
71939: LD_STRING 
71941: ST_TO_ADDR
// animal := CreateHuman ;
71942: LD_ADDR_VAR 0 12
71946: PUSH
71947: CALL_OW 44
71951: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71952: LD_VAR 0 12
71956: PPUSH
71957: LD_VAR 0 8
71961: PPUSH
71962: LD_INT 0
71964: PPUSH
71965: CALL 73900 0 3
// end ;
71969: GO 71923
71971: POP
71972: POP
// if tigers then
71973: LD_VAR 0 2
71977: IFFALSE 72061
// for i = 1 to tigers do
71979: LD_ADDR_VAR 0 11
71983: PUSH
71984: DOUBLE
71985: LD_INT 1
71987: DEC
71988: ST_TO_ADDR
71989: LD_VAR 0 2
71993: PUSH
71994: FOR_TO
71995: IFFALSE 72059
// begin hc_class = class_tiger ;
71997: LD_ADDR_OWVAR 28
72001: PUSH
72002: LD_INT 14
72004: ST_TO_ADDR
// hc_gallery =  ;
72005: LD_ADDR_OWVAR 33
72009: PUSH
72010: LD_STRING 
72012: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72013: LD_ADDR_OWVAR 35
72017: PUSH
72018: LD_INT 7
72020: NEG
72021: PPUSH
72022: LD_INT 7
72024: PPUSH
72025: CALL_OW 12
72029: ST_TO_ADDR
// animal := CreateHuman ;
72030: LD_ADDR_VAR 0 12
72034: PUSH
72035: CALL_OW 44
72039: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72040: LD_VAR 0 12
72044: PPUSH
72045: LD_VAR 0 8
72049: PPUSH
72050: LD_INT 0
72052: PPUSH
72053: CALL 73900 0 3
// end ;
72057: GO 71994
72059: POP
72060: POP
// if apemans then
72061: LD_VAR 0 3
72065: IFFALSE 72188
// for i = 1 to apemans do
72067: LD_ADDR_VAR 0 11
72071: PUSH
72072: DOUBLE
72073: LD_INT 1
72075: DEC
72076: ST_TO_ADDR
72077: LD_VAR 0 3
72081: PUSH
72082: FOR_TO
72083: IFFALSE 72186
// begin hc_class = class_apeman ;
72085: LD_ADDR_OWVAR 28
72089: PUSH
72090: LD_INT 12
72092: ST_TO_ADDR
// hc_gallery =  ;
72093: LD_ADDR_OWVAR 33
72097: PUSH
72098: LD_STRING 
72100: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
72101: LD_ADDR_OWVAR 35
72105: PUSH
72106: LD_INT 5
72108: NEG
72109: PPUSH
72110: LD_INT 5
72112: PPUSH
72113: CALL_OW 12
72117: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72118: LD_ADDR_OWVAR 31
72122: PUSH
72123: LD_INT 1
72125: PPUSH
72126: LD_INT 3
72128: PPUSH
72129: CALL_OW 12
72133: PUSH
72134: LD_INT 1
72136: PPUSH
72137: LD_INT 3
72139: PPUSH
72140: CALL_OW 12
72144: PUSH
72145: LD_INT 0
72147: PUSH
72148: LD_INT 0
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: ST_TO_ADDR
// animal := CreateHuman ;
72157: LD_ADDR_VAR 0 12
72161: PUSH
72162: CALL_OW 44
72166: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72167: LD_VAR 0 12
72171: PPUSH
72172: LD_VAR 0 8
72176: PPUSH
72177: LD_INT 0
72179: PPUSH
72180: CALL 73900 0 3
// end ;
72184: GO 72082
72186: POP
72187: POP
// if enchidnas then
72188: LD_VAR 0 4
72192: IFFALSE 72259
// for i = 1 to enchidnas do
72194: LD_ADDR_VAR 0 11
72198: PUSH
72199: DOUBLE
72200: LD_INT 1
72202: DEC
72203: ST_TO_ADDR
72204: LD_VAR 0 4
72208: PUSH
72209: FOR_TO
72210: IFFALSE 72257
// begin hc_class = 13 ;
72212: LD_ADDR_OWVAR 28
72216: PUSH
72217: LD_INT 13
72219: ST_TO_ADDR
// hc_gallery =  ;
72220: LD_ADDR_OWVAR 33
72224: PUSH
72225: LD_STRING 
72227: ST_TO_ADDR
// animal := CreateHuman ;
72228: LD_ADDR_VAR 0 12
72232: PUSH
72233: CALL_OW 44
72237: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72238: LD_VAR 0 12
72242: PPUSH
72243: LD_VAR 0 8
72247: PPUSH
72248: LD_INT 0
72250: PPUSH
72251: CALL 73900 0 3
// end ;
72255: GO 72209
72257: POP
72258: POP
// if fishes then
72259: LD_VAR 0 7
72263: IFFALSE 72330
// for i = 1 to fishes do
72265: LD_ADDR_VAR 0 11
72269: PUSH
72270: DOUBLE
72271: LD_INT 1
72273: DEC
72274: ST_TO_ADDR
72275: LD_VAR 0 7
72279: PUSH
72280: FOR_TO
72281: IFFALSE 72328
// begin hc_class = 20 ;
72283: LD_ADDR_OWVAR 28
72287: PUSH
72288: LD_INT 20
72290: ST_TO_ADDR
// hc_gallery =  ;
72291: LD_ADDR_OWVAR 33
72295: PUSH
72296: LD_STRING 
72298: ST_TO_ADDR
// animal := CreateHuman ;
72299: LD_ADDR_VAR 0 12
72303: PUSH
72304: CALL_OW 44
72308: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72309: LD_VAR 0 12
72313: PPUSH
72314: LD_VAR 0 9
72318: PPUSH
72319: LD_INT 0
72321: PPUSH
72322: CALL 73900 0 3
// end ;
72326: GO 72280
72328: POP
72329: POP
// end ;
72330: LD_VAR 0 10
72334: RET
// export function WantHeal ( sci , unit ) ; begin
72335: LD_INT 0
72337: PPUSH
// if GetTaskList ( sci ) > 0 then
72338: LD_VAR 0 1
72342: PPUSH
72343: CALL_OW 437
72347: PUSH
72348: LD_INT 0
72350: GREATER
72351: IFFALSE 72421
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72353: LD_VAR 0 1
72357: PPUSH
72358: CALL_OW 437
72362: PUSH
72363: LD_INT 1
72365: ARRAY
72366: PUSH
72367: LD_INT 1
72369: ARRAY
72370: PUSH
72371: LD_STRING l
72373: EQUAL
72374: PUSH
72375: LD_VAR 0 1
72379: PPUSH
72380: CALL_OW 437
72384: PUSH
72385: LD_INT 1
72387: ARRAY
72388: PUSH
72389: LD_INT 4
72391: ARRAY
72392: PUSH
72393: LD_VAR 0 2
72397: EQUAL
72398: AND
72399: IFFALSE 72411
// result := true else
72401: LD_ADDR_VAR 0 3
72405: PUSH
72406: LD_INT 1
72408: ST_TO_ADDR
72409: GO 72419
// result := false ;
72411: LD_ADDR_VAR 0 3
72415: PUSH
72416: LD_INT 0
72418: ST_TO_ADDR
// end else
72419: GO 72429
// result := false ;
72421: LD_ADDR_VAR 0 3
72425: PUSH
72426: LD_INT 0
72428: ST_TO_ADDR
// end ;
72429: LD_VAR 0 3
72433: RET
// export function HealTarget ( sci ) ; begin
72434: LD_INT 0
72436: PPUSH
// if not sci then
72437: LD_VAR 0 1
72441: NOT
72442: IFFALSE 72446
// exit ;
72444: GO 72511
// result := 0 ;
72446: LD_ADDR_VAR 0 2
72450: PUSH
72451: LD_INT 0
72453: ST_TO_ADDR
// if GetTaskList ( sci ) then
72454: LD_VAR 0 1
72458: PPUSH
72459: CALL_OW 437
72463: IFFALSE 72511
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72465: LD_VAR 0 1
72469: PPUSH
72470: CALL_OW 437
72474: PUSH
72475: LD_INT 1
72477: ARRAY
72478: PUSH
72479: LD_INT 1
72481: ARRAY
72482: PUSH
72483: LD_STRING l
72485: EQUAL
72486: IFFALSE 72511
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72488: LD_ADDR_VAR 0 2
72492: PUSH
72493: LD_VAR 0 1
72497: PPUSH
72498: CALL_OW 437
72502: PUSH
72503: LD_INT 1
72505: ARRAY
72506: PUSH
72507: LD_INT 4
72509: ARRAY
72510: ST_TO_ADDR
// end ;
72511: LD_VAR 0 2
72515: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72516: LD_INT 0
72518: PPUSH
72519: PPUSH
72520: PPUSH
72521: PPUSH
// if not base_units then
72522: LD_VAR 0 1
72526: NOT
72527: IFFALSE 72531
// exit ;
72529: GO 72618
// result := false ;
72531: LD_ADDR_VAR 0 2
72535: PUSH
72536: LD_INT 0
72538: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72539: LD_ADDR_VAR 0 5
72543: PUSH
72544: LD_VAR 0 1
72548: PPUSH
72549: LD_INT 21
72551: PUSH
72552: LD_INT 3
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PPUSH
72559: CALL_OW 72
72563: ST_TO_ADDR
// if not tmp then
72564: LD_VAR 0 5
72568: NOT
72569: IFFALSE 72573
// exit ;
72571: GO 72618
// for i in tmp do
72573: LD_ADDR_VAR 0 3
72577: PUSH
72578: LD_VAR 0 5
72582: PUSH
72583: FOR_IN
72584: IFFALSE 72616
// begin result := EnemyInRange ( i , 22 ) ;
72586: LD_ADDR_VAR 0 2
72590: PUSH
72591: LD_VAR 0 3
72595: PPUSH
72596: LD_INT 22
72598: PPUSH
72599: CALL 70854 0 2
72603: ST_TO_ADDR
// if result then
72604: LD_VAR 0 2
72608: IFFALSE 72614
// exit ;
72610: POP
72611: POP
72612: GO 72618
// end ;
72614: GO 72583
72616: POP
72617: POP
// end ;
72618: LD_VAR 0 2
72622: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
72623: LD_INT 0
72625: PPUSH
72626: PPUSH
// if not units then
72627: LD_VAR 0 1
72631: NOT
72632: IFFALSE 72636
// exit ;
72634: GO 72706
// result := [ ] ;
72636: LD_ADDR_VAR 0 3
72640: PUSH
72641: EMPTY
72642: ST_TO_ADDR
// for i in units do
72643: LD_ADDR_VAR 0 4
72647: PUSH
72648: LD_VAR 0 1
72652: PUSH
72653: FOR_IN
72654: IFFALSE 72704
// if GetTag ( i ) = tag then
72656: LD_VAR 0 4
72660: PPUSH
72661: CALL_OW 110
72665: PUSH
72666: LD_VAR 0 2
72670: EQUAL
72671: IFFALSE 72702
// result := Insert ( result , result + 1 , i ) ;
72673: LD_ADDR_VAR 0 3
72677: PUSH
72678: LD_VAR 0 3
72682: PPUSH
72683: LD_VAR 0 3
72687: PUSH
72688: LD_INT 1
72690: PLUS
72691: PPUSH
72692: LD_VAR 0 4
72696: PPUSH
72697: CALL_OW 2
72701: ST_TO_ADDR
72702: GO 72653
72704: POP
72705: POP
// end ;
72706: LD_VAR 0 3
72710: RET
// export function IsDriver ( un ) ; begin
72711: LD_INT 0
72713: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72714: LD_ADDR_VAR 0 2
72718: PUSH
72719: LD_VAR 0 1
72723: PUSH
72724: LD_INT 55
72726: PUSH
72727: EMPTY
72728: LIST
72729: PPUSH
72730: CALL_OW 69
72734: IN
72735: ST_TO_ADDR
// end ;
72736: LD_VAR 0 2
72740: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72741: LD_INT 0
72743: PPUSH
72744: PPUSH
// list := [ ] ;
72745: LD_ADDR_VAR 0 5
72749: PUSH
72750: EMPTY
72751: ST_TO_ADDR
// case d of 0 :
72752: LD_VAR 0 3
72756: PUSH
72757: LD_INT 0
72759: DOUBLE
72760: EQUAL
72761: IFTRUE 72765
72763: GO 72898
72765: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72766: LD_ADDR_VAR 0 5
72770: PUSH
72771: LD_VAR 0 1
72775: PUSH
72776: LD_INT 4
72778: MINUS
72779: PUSH
72780: LD_VAR 0 2
72784: PUSH
72785: LD_INT 4
72787: MINUS
72788: PUSH
72789: LD_INT 2
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: LIST
72796: PUSH
72797: LD_VAR 0 1
72801: PUSH
72802: LD_INT 3
72804: MINUS
72805: PUSH
72806: LD_VAR 0 2
72810: PUSH
72811: LD_INT 1
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: LIST
72818: PUSH
72819: LD_VAR 0 1
72823: PUSH
72824: LD_INT 4
72826: PLUS
72827: PUSH
72828: LD_VAR 0 2
72832: PUSH
72833: LD_INT 4
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: LIST
72840: PUSH
72841: LD_VAR 0 1
72845: PUSH
72846: LD_INT 3
72848: PLUS
72849: PUSH
72850: LD_VAR 0 2
72854: PUSH
72855: LD_INT 3
72857: PLUS
72858: PUSH
72859: LD_INT 5
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: LIST
72866: PUSH
72867: LD_VAR 0 1
72871: PUSH
72872: LD_VAR 0 2
72876: PUSH
72877: LD_INT 4
72879: PLUS
72880: PUSH
72881: LD_INT 0
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: LIST
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: ST_TO_ADDR
// end ; 1 :
72896: GO 73596
72898: LD_INT 1
72900: DOUBLE
72901: EQUAL
72902: IFTRUE 72906
72904: GO 73039
72906: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72907: LD_ADDR_VAR 0 5
72911: PUSH
72912: LD_VAR 0 1
72916: PUSH
72917: LD_VAR 0 2
72921: PUSH
72922: LD_INT 4
72924: MINUS
72925: PUSH
72926: LD_INT 3
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: LIST
72933: PUSH
72934: LD_VAR 0 1
72938: PUSH
72939: LD_INT 3
72941: MINUS
72942: PUSH
72943: LD_VAR 0 2
72947: PUSH
72948: LD_INT 3
72950: MINUS
72951: PUSH
72952: LD_INT 2
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: LIST
72959: PUSH
72960: LD_VAR 0 1
72964: PUSH
72965: LD_INT 4
72967: MINUS
72968: PUSH
72969: LD_VAR 0 2
72973: PUSH
72974: LD_INT 1
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: LIST
72981: PUSH
72982: LD_VAR 0 1
72986: PUSH
72987: LD_VAR 0 2
72991: PUSH
72992: LD_INT 3
72994: PLUS
72995: PUSH
72996: LD_INT 0
72998: PUSH
72999: EMPTY
73000: LIST
73001: LIST
73002: LIST
73003: PUSH
73004: LD_VAR 0 1
73008: PUSH
73009: LD_INT 4
73011: PLUS
73012: PUSH
73013: LD_VAR 0 2
73017: PUSH
73018: LD_INT 4
73020: PLUS
73021: PUSH
73022: LD_INT 5
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: LIST
73029: PUSH
73030: EMPTY
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: ST_TO_ADDR
// end ; 2 :
73037: GO 73596
73039: LD_INT 2
73041: DOUBLE
73042: EQUAL
73043: IFTRUE 73047
73045: GO 73176
73047: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73048: LD_ADDR_VAR 0 5
73052: PUSH
73053: LD_VAR 0 1
73057: PUSH
73058: LD_VAR 0 2
73062: PUSH
73063: LD_INT 3
73065: MINUS
73066: PUSH
73067: LD_INT 3
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: LIST
73074: PUSH
73075: LD_VAR 0 1
73079: PUSH
73080: LD_INT 4
73082: PLUS
73083: PUSH
73084: LD_VAR 0 2
73088: PUSH
73089: LD_INT 4
73091: PUSH
73092: EMPTY
73093: LIST
73094: LIST
73095: LIST
73096: PUSH
73097: LD_VAR 0 1
73101: PUSH
73102: LD_VAR 0 2
73106: PUSH
73107: LD_INT 4
73109: PLUS
73110: PUSH
73111: LD_INT 0
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: LIST
73118: PUSH
73119: LD_VAR 0 1
73123: PUSH
73124: LD_INT 3
73126: MINUS
73127: PUSH
73128: LD_VAR 0 2
73132: PUSH
73133: LD_INT 1
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: LIST
73140: PUSH
73141: LD_VAR 0 1
73145: PUSH
73146: LD_INT 4
73148: MINUS
73149: PUSH
73150: LD_VAR 0 2
73154: PUSH
73155: LD_INT 4
73157: MINUS
73158: PUSH
73159: LD_INT 2
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: LIST
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: ST_TO_ADDR
// end ; 3 :
73174: GO 73596
73176: LD_INT 3
73178: DOUBLE
73179: EQUAL
73180: IFTRUE 73184
73182: GO 73317
73184: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73185: LD_ADDR_VAR 0 5
73189: PUSH
73190: LD_VAR 0 1
73194: PUSH
73195: LD_INT 3
73197: PLUS
73198: PUSH
73199: LD_VAR 0 2
73203: PUSH
73204: LD_INT 4
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: LIST
73211: PUSH
73212: LD_VAR 0 1
73216: PUSH
73217: LD_INT 4
73219: PLUS
73220: PUSH
73221: LD_VAR 0 2
73225: PUSH
73226: LD_INT 4
73228: PLUS
73229: PUSH
73230: LD_INT 5
73232: PUSH
73233: EMPTY
73234: LIST
73235: LIST
73236: LIST
73237: PUSH
73238: LD_VAR 0 1
73242: PUSH
73243: LD_INT 4
73245: MINUS
73246: PUSH
73247: LD_VAR 0 2
73251: PUSH
73252: LD_INT 1
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: LIST
73259: PUSH
73260: LD_VAR 0 1
73264: PUSH
73265: LD_VAR 0 2
73269: PUSH
73270: LD_INT 4
73272: MINUS
73273: PUSH
73274: LD_INT 3
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: LIST
73281: PUSH
73282: LD_VAR 0 1
73286: PUSH
73287: LD_INT 3
73289: MINUS
73290: PUSH
73291: LD_VAR 0 2
73295: PUSH
73296: LD_INT 3
73298: MINUS
73299: PUSH
73300: LD_INT 2
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: LIST
73307: PUSH
73308: EMPTY
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: ST_TO_ADDR
// end ; 4 :
73315: GO 73596
73317: LD_INT 4
73319: DOUBLE
73320: EQUAL
73321: IFTRUE 73325
73323: GO 73458
73325: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73326: LD_ADDR_VAR 0 5
73330: PUSH
73331: LD_VAR 0 1
73335: PUSH
73336: LD_VAR 0 2
73340: PUSH
73341: LD_INT 4
73343: PLUS
73344: PUSH
73345: LD_INT 0
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: LIST
73352: PUSH
73353: LD_VAR 0 1
73357: PUSH
73358: LD_INT 3
73360: PLUS
73361: PUSH
73362: LD_VAR 0 2
73366: PUSH
73367: LD_INT 3
73369: PLUS
73370: PUSH
73371: LD_INT 5
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: LIST
73378: PUSH
73379: LD_VAR 0 1
73383: PUSH
73384: LD_INT 4
73386: PLUS
73387: PUSH
73388: LD_VAR 0 2
73392: PUSH
73393: LD_INT 4
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: LIST
73400: PUSH
73401: LD_VAR 0 1
73405: PUSH
73406: LD_VAR 0 2
73410: PUSH
73411: LD_INT 3
73413: MINUS
73414: PUSH
73415: LD_INT 3
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: LIST
73422: PUSH
73423: LD_VAR 0 1
73427: PUSH
73428: LD_INT 4
73430: MINUS
73431: PUSH
73432: LD_VAR 0 2
73436: PUSH
73437: LD_INT 4
73439: MINUS
73440: PUSH
73441: LD_INT 2
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: LIST
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: ST_TO_ADDR
// end ; 5 :
73456: GO 73596
73458: LD_INT 5
73460: DOUBLE
73461: EQUAL
73462: IFTRUE 73466
73464: GO 73595
73466: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73467: LD_ADDR_VAR 0 5
73471: PUSH
73472: LD_VAR 0 1
73476: PUSH
73477: LD_INT 4
73479: MINUS
73480: PUSH
73481: LD_VAR 0 2
73485: PUSH
73486: LD_INT 1
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: LIST
73493: PUSH
73494: LD_VAR 0 1
73498: PUSH
73499: LD_VAR 0 2
73503: PUSH
73504: LD_INT 4
73506: MINUS
73507: PUSH
73508: LD_INT 3
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: LIST
73515: PUSH
73516: LD_VAR 0 1
73520: PUSH
73521: LD_INT 4
73523: PLUS
73524: PUSH
73525: LD_VAR 0 2
73529: PUSH
73530: LD_INT 4
73532: PLUS
73533: PUSH
73534: LD_INT 5
73536: PUSH
73537: EMPTY
73538: LIST
73539: LIST
73540: LIST
73541: PUSH
73542: LD_VAR 0 1
73546: PUSH
73547: LD_INT 3
73549: PLUS
73550: PUSH
73551: LD_VAR 0 2
73555: PUSH
73556: LD_INT 4
73558: PUSH
73559: EMPTY
73560: LIST
73561: LIST
73562: LIST
73563: PUSH
73564: LD_VAR 0 1
73568: PUSH
73569: LD_VAR 0 2
73573: PUSH
73574: LD_INT 3
73576: PLUS
73577: PUSH
73578: LD_INT 0
73580: PUSH
73581: EMPTY
73582: LIST
73583: LIST
73584: LIST
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: ST_TO_ADDR
// end ; end ;
73593: GO 73596
73595: POP
// result := list ;
73596: LD_ADDR_VAR 0 4
73600: PUSH
73601: LD_VAR 0 5
73605: ST_TO_ADDR
// end ;
73606: LD_VAR 0 4
73610: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73611: LD_INT 0
73613: PPUSH
73614: PPUSH
73615: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73616: LD_VAR 0 1
73620: NOT
73621: PUSH
73622: LD_VAR 0 2
73626: PUSH
73627: LD_INT 1
73629: PUSH
73630: LD_INT 2
73632: PUSH
73633: LD_INT 3
73635: PUSH
73636: LD_INT 4
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: IN
73645: NOT
73646: OR
73647: IFFALSE 73651
// exit ;
73649: GO 73743
// tmp := [ ] ;
73651: LD_ADDR_VAR 0 5
73655: PUSH
73656: EMPTY
73657: ST_TO_ADDR
// for i in units do
73658: LD_ADDR_VAR 0 4
73662: PUSH
73663: LD_VAR 0 1
73667: PUSH
73668: FOR_IN
73669: IFFALSE 73712
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73671: LD_ADDR_VAR 0 5
73675: PUSH
73676: LD_VAR 0 5
73680: PPUSH
73681: LD_VAR 0 5
73685: PUSH
73686: LD_INT 1
73688: PLUS
73689: PPUSH
73690: LD_VAR 0 4
73694: PPUSH
73695: LD_VAR 0 2
73699: PPUSH
73700: CALL_OW 259
73704: PPUSH
73705: CALL_OW 2
73709: ST_TO_ADDR
73710: GO 73668
73712: POP
73713: POP
// if not tmp then
73714: LD_VAR 0 5
73718: NOT
73719: IFFALSE 73723
// exit ;
73721: GO 73743
// result := SortListByListDesc ( units , tmp ) ;
73723: LD_ADDR_VAR 0 3
73727: PUSH
73728: LD_VAR 0 1
73732: PPUSH
73733: LD_VAR 0 5
73737: PPUSH
73738: CALL_OW 77
73742: ST_TO_ADDR
// end ;
73743: LD_VAR 0 3
73747: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73748: LD_INT 0
73750: PPUSH
73751: PPUSH
73752: PPUSH
// x := GetX ( building ) ;
73753: LD_ADDR_VAR 0 4
73757: PUSH
73758: LD_VAR 0 2
73762: PPUSH
73763: CALL_OW 250
73767: ST_TO_ADDR
// y := GetY ( building ) ;
73768: LD_ADDR_VAR 0 5
73772: PUSH
73773: LD_VAR 0 2
73777: PPUSH
73778: CALL_OW 251
73782: ST_TO_ADDR
// if GetTaskList ( unit ) then
73783: LD_VAR 0 1
73787: PPUSH
73788: CALL_OW 437
73792: IFFALSE 73887
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73794: LD_STRING e
73796: PUSH
73797: LD_VAR 0 1
73801: PPUSH
73802: CALL_OW 437
73806: PUSH
73807: LD_INT 1
73809: ARRAY
73810: PUSH
73811: LD_INT 1
73813: ARRAY
73814: EQUAL
73815: PUSH
73816: LD_VAR 0 4
73820: PUSH
73821: LD_VAR 0 1
73825: PPUSH
73826: CALL_OW 437
73830: PUSH
73831: LD_INT 1
73833: ARRAY
73834: PUSH
73835: LD_INT 2
73837: ARRAY
73838: EQUAL
73839: AND
73840: PUSH
73841: LD_VAR 0 5
73845: PUSH
73846: LD_VAR 0 1
73850: PPUSH
73851: CALL_OW 437
73855: PUSH
73856: LD_INT 1
73858: ARRAY
73859: PUSH
73860: LD_INT 3
73862: ARRAY
73863: EQUAL
73864: AND
73865: IFFALSE 73877
// result := true else
73867: LD_ADDR_VAR 0 3
73871: PUSH
73872: LD_INT 1
73874: ST_TO_ADDR
73875: GO 73885
// result := false ;
73877: LD_ADDR_VAR 0 3
73881: PUSH
73882: LD_INT 0
73884: ST_TO_ADDR
// end else
73885: GO 73895
// result := false ;
73887: LD_ADDR_VAR 0 3
73891: PUSH
73892: LD_INT 0
73894: ST_TO_ADDR
// end ;
73895: LD_VAR 0 3
73899: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73900: LD_INT 0
73902: PPUSH
73903: PPUSH
73904: PPUSH
73905: PPUSH
// if not unit or not area then
73906: LD_VAR 0 1
73910: NOT
73911: PUSH
73912: LD_VAR 0 2
73916: NOT
73917: OR
73918: IFFALSE 73922
// exit ;
73920: GO 74086
// tmp := AreaToList ( area , i ) ;
73922: LD_ADDR_VAR 0 6
73926: PUSH
73927: LD_VAR 0 2
73931: PPUSH
73932: LD_VAR 0 5
73936: PPUSH
73937: CALL_OW 517
73941: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73942: LD_ADDR_VAR 0 5
73946: PUSH
73947: DOUBLE
73948: LD_INT 1
73950: DEC
73951: ST_TO_ADDR
73952: LD_VAR 0 6
73956: PUSH
73957: LD_INT 1
73959: ARRAY
73960: PUSH
73961: FOR_TO
73962: IFFALSE 74084
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73964: LD_ADDR_VAR 0 7
73968: PUSH
73969: LD_VAR 0 6
73973: PUSH
73974: LD_INT 1
73976: ARRAY
73977: PUSH
73978: LD_VAR 0 5
73982: ARRAY
73983: PUSH
73984: LD_VAR 0 6
73988: PUSH
73989: LD_INT 2
73991: ARRAY
73992: PUSH
73993: LD_VAR 0 5
73997: ARRAY
73998: PUSH
73999: EMPTY
74000: LIST
74001: LIST
74002: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74003: LD_VAR 0 7
74007: PUSH
74008: LD_INT 1
74010: ARRAY
74011: PPUSH
74012: LD_VAR 0 7
74016: PUSH
74017: LD_INT 2
74019: ARRAY
74020: PPUSH
74021: CALL_OW 428
74025: PUSH
74026: LD_INT 0
74028: EQUAL
74029: IFFALSE 74082
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74031: LD_VAR 0 1
74035: PPUSH
74036: LD_VAR 0 7
74040: PUSH
74041: LD_INT 1
74043: ARRAY
74044: PPUSH
74045: LD_VAR 0 7
74049: PUSH
74050: LD_INT 2
74052: ARRAY
74053: PPUSH
74054: LD_VAR 0 3
74058: PPUSH
74059: CALL_OW 48
// result := IsPlaced ( unit ) ;
74063: LD_ADDR_VAR 0 4
74067: PUSH
74068: LD_VAR 0 1
74072: PPUSH
74073: CALL_OW 305
74077: ST_TO_ADDR
// exit ;
74078: POP
74079: POP
74080: GO 74086
// end ; end ;
74082: GO 73961
74084: POP
74085: POP
// end ;
74086: LD_VAR 0 4
74090: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74091: LD_INT 0
74093: PPUSH
74094: PPUSH
74095: PPUSH
// if not side or side > 8 then
74096: LD_VAR 0 1
74100: NOT
74101: PUSH
74102: LD_VAR 0 1
74106: PUSH
74107: LD_INT 8
74109: GREATER
74110: OR
74111: IFFALSE 74115
// exit ;
74113: GO 74302
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74115: LD_ADDR_VAR 0 4
74119: PUSH
74120: LD_INT 22
74122: PUSH
74123: LD_VAR 0 1
74127: PUSH
74128: EMPTY
74129: LIST
74130: LIST
74131: PUSH
74132: LD_INT 21
74134: PUSH
74135: LD_INT 3
74137: PUSH
74138: EMPTY
74139: LIST
74140: LIST
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PPUSH
74146: CALL_OW 69
74150: ST_TO_ADDR
// if not tmp then
74151: LD_VAR 0 4
74155: NOT
74156: IFFALSE 74160
// exit ;
74158: GO 74302
// enable_addtolog := true ;
74160: LD_ADDR_OWVAR 81
74164: PUSH
74165: LD_INT 1
74167: ST_TO_ADDR
// AddToLog ( [ ) ;
74168: LD_STRING [
74170: PPUSH
74171: CALL_OW 561
// for i in tmp do
74175: LD_ADDR_VAR 0 3
74179: PUSH
74180: LD_VAR 0 4
74184: PUSH
74185: FOR_IN
74186: IFFALSE 74293
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74188: LD_STRING [
74190: PUSH
74191: LD_VAR 0 3
74195: PPUSH
74196: CALL_OW 266
74200: STR
74201: PUSH
74202: LD_STRING , 
74204: STR
74205: PUSH
74206: LD_VAR 0 3
74210: PPUSH
74211: CALL_OW 250
74215: STR
74216: PUSH
74217: LD_STRING , 
74219: STR
74220: PUSH
74221: LD_VAR 0 3
74225: PPUSH
74226: CALL_OW 251
74230: STR
74231: PUSH
74232: LD_STRING , 
74234: STR
74235: PUSH
74236: LD_VAR 0 3
74240: PPUSH
74241: CALL_OW 254
74245: STR
74246: PUSH
74247: LD_STRING , 
74249: STR
74250: PUSH
74251: LD_VAR 0 3
74255: PPUSH
74256: LD_INT 1
74258: PPUSH
74259: CALL_OW 268
74263: STR
74264: PUSH
74265: LD_STRING , 
74267: STR
74268: PUSH
74269: LD_VAR 0 3
74273: PPUSH
74274: LD_INT 2
74276: PPUSH
74277: CALL_OW 268
74281: STR
74282: PUSH
74283: LD_STRING ],
74285: STR
74286: PPUSH
74287: CALL_OW 561
// end ;
74291: GO 74185
74293: POP
74294: POP
// AddToLog ( ]; ) ;
74295: LD_STRING ];
74297: PPUSH
74298: CALL_OW 561
// end ;
74302: LD_VAR 0 2
74306: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74307: LD_INT 0
74309: PPUSH
74310: PPUSH
74311: PPUSH
74312: PPUSH
74313: PPUSH
// if not area or not rate or not max then
74314: LD_VAR 0 1
74318: NOT
74319: PUSH
74320: LD_VAR 0 2
74324: NOT
74325: OR
74326: PUSH
74327: LD_VAR 0 4
74331: NOT
74332: OR
74333: IFFALSE 74337
// exit ;
74335: GO 74529
// while 1 do
74337: LD_INT 1
74339: IFFALSE 74529
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74341: LD_ADDR_VAR 0 9
74345: PUSH
74346: LD_VAR 0 1
74350: PPUSH
74351: LD_INT 1
74353: PPUSH
74354: CALL_OW 287
74358: PUSH
74359: LD_INT 10
74361: MUL
74362: ST_TO_ADDR
// r := rate / 10 ;
74363: LD_ADDR_VAR 0 7
74367: PUSH
74368: LD_VAR 0 2
74372: PUSH
74373: LD_INT 10
74375: DIVREAL
74376: ST_TO_ADDR
// time := 1 1$00 ;
74377: LD_ADDR_VAR 0 8
74381: PUSH
74382: LD_INT 2100
74384: ST_TO_ADDR
// if amount < min then
74385: LD_VAR 0 9
74389: PUSH
74390: LD_VAR 0 3
74394: LESS
74395: IFFALSE 74413
// r := r * 2 else
74397: LD_ADDR_VAR 0 7
74401: PUSH
74402: LD_VAR 0 7
74406: PUSH
74407: LD_INT 2
74409: MUL
74410: ST_TO_ADDR
74411: GO 74439
// if amount > max then
74413: LD_VAR 0 9
74417: PUSH
74418: LD_VAR 0 4
74422: GREATER
74423: IFFALSE 74439
// r := r / 2 ;
74425: LD_ADDR_VAR 0 7
74429: PUSH
74430: LD_VAR 0 7
74434: PUSH
74435: LD_INT 2
74437: DIVREAL
74438: ST_TO_ADDR
// time := time / r ;
74439: LD_ADDR_VAR 0 8
74443: PUSH
74444: LD_VAR 0 8
74448: PUSH
74449: LD_VAR 0 7
74453: DIVREAL
74454: ST_TO_ADDR
// if time < 0 then
74455: LD_VAR 0 8
74459: PUSH
74460: LD_INT 0
74462: LESS
74463: IFFALSE 74480
// time := time * - 1 ;
74465: LD_ADDR_VAR 0 8
74469: PUSH
74470: LD_VAR 0 8
74474: PUSH
74475: LD_INT 1
74477: NEG
74478: MUL
74479: ST_TO_ADDR
// wait ( time ) ;
74480: LD_VAR 0 8
74484: PPUSH
74485: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
74489: LD_INT 35
74491: PPUSH
74492: LD_INT 875
74494: PPUSH
74495: CALL_OW 12
74499: PPUSH
74500: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74504: LD_INT 1
74506: PPUSH
74507: LD_INT 5
74509: PPUSH
74510: CALL_OW 12
74514: PPUSH
74515: LD_VAR 0 1
74519: PPUSH
74520: LD_INT 1
74522: PPUSH
74523: CALL_OW 55
// end ;
74527: GO 74337
// end ;
74529: LD_VAR 0 5
74533: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74534: LD_INT 0
74536: PPUSH
74537: PPUSH
74538: PPUSH
74539: PPUSH
74540: PPUSH
74541: PPUSH
74542: PPUSH
74543: PPUSH
// if not turrets or not factories then
74544: LD_VAR 0 1
74548: NOT
74549: PUSH
74550: LD_VAR 0 2
74554: NOT
74555: OR
74556: IFFALSE 74560
// exit ;
74558: GO 74867
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74560: LD_ADDR_VAR 0 10
74564: PUSH
74565: LD_INT 5
74567: PUSH
74568: LD_INT 6
74570: PUSH
74571: EMPTY
74572: LIST
74573: LIST
74574: PUSH
74575: LD_INT 2
74577: PUSH
74578: LD_INT 4
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: PUSH
74585: LD_INT 3
74587: PUSH
74588: LD_INT 5
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: LIST
74599: PUSH
74600: LD_INT 24
74602: PUSH
74603: LD_INT 25
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: PUSH
74610: LD_INT 23
74612: PUSH
74613: LD_INT 27
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: PUSH
74620: EMPTY
74621: LIST
74622: LIST
74623: PUSH
74624: LD_INT 42
74626: PUSH
74627: LD_INT 43
74629: PUSH
74630: EMPTY
74631: LIST
74632: LIST
74633: PUSH
74634: LD_INT 44
74636: PUSH
74637: LD_INT 46
74639: PUSH
74640: EMPTY
74641: LIST
74642: LIST
74643: PUSH
74644: LD_INT 45
74646: PUSH
74647: LD_INT 47
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: PUSH
74654: EMPTY
74655: LIST
74656: LIST
74657: LIST
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: LIST
74663: ST_TO_ADDR
// result := [ ] ;
74664: LD_ADDR_VAR 0 3
74668: PUSH
74669: EMPTY
74670: ST_TO_ADDR
// for i in turrets do
74671: LD_ADDR_VAR 0 4
74675: PUSH
74676: LD_VAR 0 1
74680: PUSH
74681: FOR_IN
74682: IFFALSE 74865
// begin nat := GetNation ( i ) ;
74684: LD_ADDR_VAR 0 7
74688: PUSH
74689: LD_VAR 0 4
74693: PPUSH
74694: CALL_OW 248
74698: ST_TO_ADDR
// weapon := 0 ;
74699: LD_ADDR_VAR 0 8
74703: PUSH
74704: LD_INT 0
74706: ST_TO_ADDR
// if not nat then
74707: LD_VAR 0 7
74711: NOT
74712: IFFALSE 74716
// continue ;
74714: GO 74681
// for j in list [ nat ] do
74716: LD_ADDR_VAR 0 5
74720: PUSH
74721: LD_VAR 0 10
74725: PUSH
74726: LD_VAR 0 7
74730: ARRAY
74731: PUSH
74732: FOR_IN
74733: IFFALSE 74774
// if GetBWeapon ( i ) = j [ 1 ] then
74735: LD_VAR 0 4
74739: PPUSH
74740: CALL_OW 269
74744: PUSH
74745: LD_VAR 0 5
74749: PUSH
74750: LD_INT 1
74752: ARRAY
74753: EQUAL
74754: IFFALSE 74772
// begin weapon := j [ 2 ] ;
74756: LD_ADDR_VAR 0 8
74760: PUSH
74761: LD_VAR 0 5
74765: PUSH
74766: LD_INT 2
74768: ARRAY
74769: ST_TO_ADDR
// break ;
74770: GO 74774
// end ;
74772: GO 74732
74774: POP
74775: POP
// if not weapon then
74776: LD_VAR 0 8
74780: NOT
74781: IFFALSE 74785
// continue ;
74783: GO 74681
// for k in factories do
74785: LD_ADDR_VAR 0 6
74789: PUSH
74790: LD_VAR 0 2
74794: PUSH
74795: FOR_IN
74796: IFFALSE 74861
// begin weapons := AvailableWeaponList ( k ) ;
74798: LD_ADDR_VAR 0 9
74802: PUSH
74803: LD_VAR 0 6
74807: PPUSH
74808: CALL_OW 478
74812: ST_TO_ADDR
// if not weapons then
74813: LD_VAR 0 9
74817: NOT
74818: IFFALSE 74822
// continue ;
74820: GO 74795
// if weapon in weapons then
74822: LD_VAR 0 8
74826: PUSH
74827: LD_VAR 0 9
74831: IN
74832: IFFALSE 74859
// begin result := [ i , weapon ] ;
74834: LD_ADDR_VAR 0 3
74838: PUSH
74839: LD_VAR 0 4
74843: PUSH
74844: LD_VAR 0 8
74848: PUSH
74849: EMPTY
74850: LIST
74851: LIST
74852: ST_TO_ADDR
// exit ;
74853: POP
74854: POP
74855: POP
74856: POP
74857: GO 74867
// end ; end ;
74859: GO 74795
74861: POP
74862: POP
// end ;
74863: GO 74681
74865: POP
74866: POP
// end ;
74867: LD_VAR 0 3
74871: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74872: LD_INT 0
74874: PPUSH
// if not side or side > 8 then
74875: LD_VAR 0 3
74879: NOT
74880: PUSH
74881: LD_VAR 0 3
74885: PUSH
74886: LD_INT 8
74888: GREATER
74889: OR
74890: IFFALSE 74894
// exit ;
74892: GO 74953
// if not range then
74894: LD_VAR 0 4
74898: NOT
74899: IFFALSE 74910
// range := - 12 ;
74901: LD_ADDR_VAR 0 4
74905: PUSH
74906: LD_INT 12
74908: NEG
74909: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74910: LD_VAR 0 1
74914: PPUSH
74915: LD_VAR 0 2
74919: PPUSH
74920: LD_VAR 0 3
74924: PPUSH
74925: LD_VAR 0 4
74929: PPUSH
74930: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74934: LD_VAR 0 1
74938: PPUSH
74939: LD_VAR 0 2
74943: PPUSH
74944: LD_VAR 0 3
74948: PPUSH
74949: CALL_OW 331
// end ;
74953: LD_VAR 0 5
74957: RET
// export function Video ( mode ) ; begin
74958: LD_INT 0
74960: PPUSH
// ingame_video = mode ;
74961: LD_ADDR_OWVAR 52
74965: PUSH
74966: LD_VAR 0 1
74970: ST_TO_ADDR
// interface_hidden = mode ;
74971: LD_ADDR_OWVAR 54
74975: PUSH
74976: LD_VAR 0 1
74980: ST_TO_ADDR
// end ;
74981: LD_VAR 0 2
74985: RET
// export function Join ( array , element ) ; begin
74986: LD_INT 0
74988: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74989: LD_ADDR_VAR 0 3
74993: PUSH
74994: LD_VAR 0 1
74998: PPUSH
74999: LD_VAR 0 1
75003: PUSH
75004: LD_INT 1
75006: PLUS
75007: PPUSH
75008: LD_VAR 0 2
75012: PPUSH
75013: CALL_OW 1
75017: ST_TO_ADDR
// end ;
75018: LD_VAR 0 3
75022: RET
// export function JoinUnion ( array , element ) ; begin
75023: LD_INT 0
75025: PPUSH
// result := array union element ;
75026: LD_ADDR_VAR 0 3
75030: PUSH
75031: LD_VAR 0 1
75035: PUSH
75036: LD_VAR 0 2
75040: UNION
75041: ST_TO_ADDR
// end ;
75042: LD_VAR 0 3
75046: RET
// export function GetBehemoths ( side ) ; begin
75047: LD_INT 0
75049: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
75050: LD_ADDR_VAR 0 2
75054: PUSH
75055: LD_INT 22
75057: PUSH
75058: LD_VAR 0 1
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: PUSH
75067: LD_INT 31
75069: PUSH
75070: LD_INT 25
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PPUSH
75081: CALL_OW 69
75085: ST_TO_ADDR
// end ;
75086: LD_VAR 0 2
75090: RET
// export function Shuffle ( array ) ; var i , index ; begin
75091: LD_INT 0
75093: PPUSH
75094: PPUSH
75095: PPUSH
// result := [ ] ;
75096: LD_ADDR_VAR 0 2
75100: PUSH
75101: EMPTY
75102: ST_TO_ADDR
// if not array then
75103: LD_VAR 0 1
75107: NOT
75108: IFFALSE 75112
// exit ;
75110: GO 75211
// Randomize ;
75112: CALL_OW 10
// for i = array downto 1 do
75116: LD_ADDR_VAR 0 3
75120: PUSH
75121: DOUBLE
75122: LD_VAR 0 1
75126: INC
75127: ST_TO_ADDR
75128: LD_INT 1
75130: PUSH
75131: FOR_DOWNTO
75132: IFFALSE 75209
// begin index := rand ( 1 , array ) ;
75134: LD_ADDR_VAR 0 4
75138: PUSH
75139: LD_INT 1
75141: PPUSH
75142: LD_VAR 0 1
75146: PPUSH
75147: CALL_OW 12
75151: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75152: LD_ADDR_VAR 0 2
75156: PUSH
75157: LD_VAR 0 2
75161: PPUSH
75162: LD_VAR 0 2
75166: PUSH
75167: LD_INT 1
75169: PLUS
75170: PPUSH
75171: LD_VAR 0 1
75175: PUSH
75176: LD_VAR 0 4
75180: ARRAY
75181: PPUSH
75182: CALL_OW 2
75186: ST_TO_ADDR
// array := Delete ( array , index ) ;
75187: LD_ADDR_VAR 0 1
75191: PUSH
75192: LD_VAR 0 1
75196: PPUSH
75197: LD_VAR 0 4
75201: PPUSH
75202: CALL_OW 3
75206: ST_TO_ADDR
// end ;
75207: GO 75131
75209: POP
75210: POP
// end ;
75211: LD_VAR 0 2
75215: RET
// export function GetBaseMaterials ( base ) ; begin
75216: LD_INT 0
75218: PPUSH
// result := [ 0 , 0 , 0 ] ;
75219: LD_ADDR_VAR 0 2
75223: PUSH
75224: LD_INT 0
75226: PUSH
75227: LD_INT 0
75229: PUSH
75230: LD_INT 0
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: LIST
75237: ST_TO_ADDR
// if not base then
75238: LD_VAR 0 1
75242: NOT
75243: IFFALSE 75247
// exit ;
75245: GO 75296
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75247: LD_ADDR_VAR 0 2
75251: PUSH
75252: LD_VAR 0 1
75256: PPUSH
75257: LD_INT 1
75259: PPUSH
75260: CALL_OW 275
75264: PUSH
75265: LD_VAR 0 1
75269: PPUSH
75270: LD_INT 2
75272: PPUSH
75273: CALL_OW 275
75277: PUSH
75278: LD_VAR 0 1
75282: PPUSH
75283: LD_INT 3
75285: PPUSH
75286: CALL_OW 275
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: LIST
75295: ST_TO_ADDR
// end ;
75296: LD_VAR 0 2
75300: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75301: LD_INT 0
75303: PPUSH
75304: PPUSH
// result := array ;
75305: LD_ADDR_VAR 0 3
75309: PUSH
75310: LD_VAR 0 1
75314: ST_TO_ADDR
// if size > 0 then
75315: LD_VAR 0 2
75319: PUSH
75320: LD_INT 0
75322: GREATER
75323: IFFALSE 75369
// for i := array downto size do
75325: LD_ADDR_VAR 0 4
75329: PUSH
75330: DOUBLE
75331: LD_VAR 0 1
75335: INC
75336: ST_TO_ADDR
75337: LD_VAR 0 2
75341: PUSH
75342: FOR_DOWNTO
75343: IFFALSE 75367
// result := Delete ( result , result ) ;
75345: LD_ADDR_VAR 0 3
75349: PUSH
75350: LD_VAR 0 3
75354: PPUSH
75355: LD_VAR 0 3
75359: PPUSH
75360: CALL_OW 3
75364: ST_TO_ADDR
75365: GO 75342
75367: POP
75368: POP
// end ;
75369: LD_VAR 0 3
75373: RET
// export function ComExit ( unit ) ; var tmp ; begin
75374: LD_INT 0
75376: PPUSH
75377: PPUSH
// if not IsInUnit ( unit ) then
75378: LD_VAR 0 1
75382: PPUSH
75383: CALL_OW 310
75387: NOT
75388: IFFALSE 75392
// exit ;
75390: GO 75452
// tmp := IsInUnit ( unit ) ;
75392: LD_ADDR_VAR 0 3
75396: PUSH
75397: LD_VAR 0 1
75401: PPUSH
75402: CALL_OW 310
75406: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75407: LD_VAR 0 3
75411: PPUSH
75412: CALL_OW 247
75416: PUSH
75417: LD_INT 2
75419: EQUAL
75420: IFFALSE 75433
// ComExitVehicle ( unit ) else
75422: LD_VAR 0 1
75426: PPUSH
75427: CALL_OW 121
75431: GO 75442
// ComExitBuilding ( unit ) ;
75433: LD_VAR 0 1
75437: PPUSH
75438: CALL_OW 122
// result := tmp ;
75442: LD_ADDR_VAR 0 2
75446: PUSH
75447: LD_VAR 0 3
75451: ST_TO_ADDR
// end ;
75452: LD_VAR 0 2
75456: RET
// export function ResetHc ; begin
75457: LD_INT 0
75459: PPUSH
// InitHc ;
75460: CALL_OW 19
// hc_importance := 0 ;
75464: LD_ADDR_OWVAR 32
75468: PUSH
75469: LD_INT 0
75471: ST_TO_ADDR
// end ;
75472: LD_VAR 0 1
75476: RET
