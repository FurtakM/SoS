// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7932 0 0
// CreateNature ;
  57: CALL 21445 0 0
// PrepareRussian ;
  61: CALL 5816 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 11251 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 43219 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 43219 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 43219 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 43219 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 43219 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 43219 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 43219 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 43219 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 43219 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 43219 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 43219 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: PUSH
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 21
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 70
2583: OR
2584: IFFALSE 2602
// begin area := HarrisonSupportArea2 ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 31
2593: ST_TO_ADDR
// dir := 1 ;
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// end ; uc_side := 1 ;
2602: LD_ADDR_OWVAR 20
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// uc_nation := 1 ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// hc_class := class_engineer ;
2618: LD_ADDR_OWVAR 28
2622: PUSH
2623: LD_INT 2
2625: ST_TO_ADDR
// hc_sex := sex_male ;
2626: LD_ADDR_OWVAR 27
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2634: LD_ADDR_OWVAR 33
2638: PUSH
2639: LD_STRING SecondCharsGal
2641: ST_TO_ADDR
// hc_face_number := 52 ;
2642: LD_ADDR_OWVAR 34
2646: PUSH
2647: LD_INT 52
2649: ST_TO_ADDR
// hc_name := Craig Brown ;
2650: LD_ADDR_OWVAR 26
2654: PUSH
2655: LD_STRING Craig Brown
2657: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2658: LD_ADDR_OWVAR 29
2662: PUSH
2663: LD_INT 10
2665: PUSH
2666: LD_INT 10
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2673: LD_ADDR_OWVAR 30
2677: PUSH
2678: LD_INT 0
2680: PUSH
2681: LD_INT 2
2683: PUSH
2684: LD_INT 0
2686: PUSH
2687: LD_INT 0
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2696: LD_ADDR_OWVAR 31
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: LD_INT 3
2706: PUSH
2707: LD_INT 0
2709: PUSH
2710: LD_INT 0
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2719: LD_ADDR_EXP 18
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// hc_class := class_soldier ;
2729: LD_ADDR_OWVAR 28
2733: PUSH
2734: LD_INT 1
2736: ST_TO_ADDR
// hc_sex := sex_female ;
2737: LD_ADDR_OWVAR 27
2741: PUSH
2742: LD_INT 2
2744: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2745: LD_ADDR_OWVAR 33
2749: PUSH
2750: LD_STRING SecondCharsGal
2752: ST_TO_ADDR
// hc_face_number := 42 ;
2753: LD_ADDR_OWVAR 34
2757: PUSH
2758: LD_INT 42
2760: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2761: LD_ADDR_OWVAR 29
2765: PUSH
2766: LD_INT 11
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2776: LD_ADDR_OWVAR 26
2780: PUSH
2781: LD_STRING Ingrid Jonsson
2783: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2784: LD_ADDR_OWVAR 30
2788: PUSH
2789: LD_INT 1
2791: PUSH
2792: LD_INT 1
2794: PUSH
2795: LD_INT 0
2797: PUSH
2798: LD_INT 0
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2807: LD_ADDR_OWVAR 31
2811: PUSH
2812: LD_INT 3
2814: PUSH
2815: LD_INT 1
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: LD_INT 0
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: LIST
2828: LIST
2829: ST_TO_ADDR
// HarrSupp2 := CreateHuman ;
2830: LD_ADDR_EXP 19
2834: PUSH
2835: CALL_OW 44
2839: ST_TO_ADDR
// vc_engine := engine_combustion ;
2840: LD_ADDR_OWVAR 39
2844: PUSH
2845: LD_INT 1
2847: ST_TO_ADDR
// vc_control := control_manual ;
2848: LD_ADDR_OWVAR 38
2852: PUSH
2853: LD_INT 1
2855: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2856: LD_ADDR_OWVAR 40
2860: PUSH
2861: LD_INT 5
2863: PUSH
2864: LD_INT 5
2866: PUSH
2867: LD_INT 3
2869: PUSH
2870: LD_INT 3
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: LIST
2877: LIST
2878: PUSH
2879: LD_OWVAR 67
2883: ARRAY
2884: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2885: LD_ADDR_OWVAR 37
2889: PUSH
2890: LD_INT 2
2892: ST_TO_ADDR
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 3
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2903: LD_VAR 0 3
2907: PPUSH
2908: LD_VAR 0 5
2912: PPUSH
2913: CALL_OW 233
// repeat wait ( 10 ) ;
2917: LD_INT 10
2919: PPUSH
2920: CALL_OW 67
// until PlaceUnitArea ( veh , area , false ) ;
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PPUSH
2934: LD_INT 0
2936: PPUSH
2937: CALL_OW 49
2941: IFFALSE 2917
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2943: LD_EXP 18
2947: PPUSH
2948: LD_VAR 0 3
2952: PPUSH
2953: CALL_OW 52
// SetFuel ( veh , 50 ) ;
2957: LD_VAR 0 3
2961: PPUSH
2962: LD_INT 50
2964: PPUSH
2965: CALL_OW 240
// uc_side := 1 ;
2969: LD_ADDR_OWVAR 20
2973: PUSH
2974: LD_INT 1
2976: ST_TO_ADDR
// uc_nation := 1 ;
2977: LD_ADDR_OWVAR 21
2981: PUSH
2982: LD_INT 1
2984: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2985: LD_ADDR_OWVAR 40
2989: PUSH
2990: LD_INT 4
2992: PUSH
2993: LD_INT 4
2995: PUSH
2996: LD_INT 2
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: PUSH
3008: LD_OWVAR 67
3012: ARRAY
3013: ST_TO_ADDR
// veh := CreateVehicle ;
3014: LD_ADDR_VAR 0 3
3018: PUSH
3019: CALL_OW 45
3023: ST_TO_ADDR
// SetDir ( veh , dir ) ;
3024: LD_VAR 0 3
3028: PPUSH
3029: LD_VAR 0 5
3033: PPUSH
3034: CALL_OW 233
// repeat wait ( 10 ) ;
3038: LD_INT 10
3040: PPUSH
3041: CALL_OW 67
// until PlaceUnitArea ( veh , area , false ) ;
3045: LD_VAR 0 3
3049: PPUSH
3050: LD_VAR 0 4
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: CALL_OW 49
3062: IFFALSE 3038
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3064: LD_EXP 19
3068: PPUSH
3069: LD_VAR 0 3
3073: PPUSH
3074: CALL_OW 52
// SetFuel ( veh , 50 ) ;
3078: LD_VAR 0 3
3082: PPUSH
3083: LD_INT 50
3085: PPUSH
3086: CALL_OW 240
// end ;
3090: LD_VAR 0 1
3094: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3095: LD_INT 0
3097: PPUSH
3098: PPUSH
3099: PPUSH
3100: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3101: LD_ADDR_VAR 0 4
3105: PUSH
3106: LD_INT 22
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 23
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 26
3128: PUSH
3129: LD_INT 1
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: LIST
3140: PPUSH
3141: CALL_OW 69
3145: PUSH
3146: LD_EXP 3
3150: PUSH
3151: LD_EXP 4
3155: PUSH
3156: LD_EXP 8
3160: PUSH
3161: LD_EXP 9
3165: PUSH
3166: LD_EXP 5
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: DIFF
3178: ST_TO_ADDR
// for i in _tmp do
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: LD_VAR 0 4
3188: PUSH
3189: FOR_IN
3190: IFFALSE 3231
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3192: LD_VAR 0 2
3196: PPUSH
3197: LD_INT 32
3199: PPUSH
3200: CALL_OW 308
3204: PUSH
3205: LD_VAR 0 2
3209: PPUSH
3210: CALL_OW 302
3214: AND
3215: IFFALSE 3229
// begin tmp := i ;
3217: LD_ADDR_VAR 0 3
3221: PUSH
3222: LD_VAR 0 2
3226: ST_TO_ADDR
// break ;
3227: GO 3231
// end ;
3229: GO 3189
3231: POP
3232: POP
// if not tmp then
3233: LD_VAR 0 3
3237: NOT
3238: IFFALSE 3250
// tmp := JMM ;
3240: LD_ADDR_VAR 0 3
3244: PUSH
3245: LD_EXP 1
3249: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3250: LD_INT 35
3252: PPUSH
3253: CALL_OW 67
// if IsDead ( tmp ) then
3257: LD_VAR 0 3
3261: PPUSH
3262: CALL_OW 301
3266: IFFALSE 3278
// tmp := JMM ;
3268: LD_ADDR_VAR 0 3
3272: PUSH
3273: LD_EXP 1
3277: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3278: LD_INT 81
3280: PUSH
3281: LD_INT 1
3283: PUSH
3284: EMPTY
3285: LIST
3286: LIST
3287: PUSH
3288: LD_INT 91
3290: PUSH
3291: LD_VAR 0 3
3295: PUSH
3296: LD_INT 15
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PPUSH
3308: CALL_OW 69
3312: NOT
3313: PUSH
3314: LD_EXP 27
3318: PUSH
3319: LD_INT 6300
3321: LESS
3322: OR
3323: IFFALSE 3250
// blockSpawn := 1 ;
3325: LD_ADDR_EXP 30
3329: PUSH
3330: LD_INT 1
3332: ST_TO_ADDR
// uc_side := 4 ;
3333: LD_ADDR_OWVAR 20
3337: PUSH
3338: LD_INT 4
3340: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3341: LD_ADDR_EXP 16
3345: PUSH
3346: LD_STRING Joan
3348: PPUSH
3349: LD_INT 0
3351: PPUSH
3352: LD_EXP 44
3356: PPUSH
3357: CALL 43219 0 3
3361: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3362: LD_EXP 16
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL_OW 250
3376: PPUSH
3377: LD_VAR 0 3
3381: PPUSH
3382: CALL_OW 251
3386: PPUSH
3387: LD_INT 5
3389: PPUSH
3390: LD_INT 1
3392: PPUSH
3393: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3397: LD_EXP 16
3401: PPUSH
3402: LD_INT 250
3404: PPUSH
3405: CALL_OW 234
// InGameOn ;
3409: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3413: LD_EXP 16
3417: PPUSH
3418: CALL_OW 87
// wait ( 0 0$2 ) ;
3422: LD_INT 70
3424: PPUSH
3425: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3429: LD_VAR 0 3
3433: PPUSH
3434: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3438: LD_VAR 0 3
3442: PPUSH
3443: CALL_OW 122
// wait ( 0 0$1 ) ;
3447: LD_INT 35
3449: PPUSH
3450: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_EXP 16
3463: PPUSH
3464: CALL_OW 112
// wait ( 0 0$2 ) ;
3468: LD_INT 70
3470: PPUSH
3471: CALL_OW 67
// DialogueOn ;
3475: CALL_OW 6
// if tmp = JMM then
3479: LD_VAR 0 3
3483: PUSH
3484: LD_EXP 1
3488: EQUAL
3489: IFFALSE 3638
// begin ComTurnUnit ( JMM , Joan ) ;
3491: LD_EXP 1
3495: PPUSH
3496: LD_EXP 16
3500: PPUSH
3501: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3505: LD_EXP 1
3509: PPUSH
3510: LD_STRING D5b-JMM-1
3512: PPUSH
3513: CALL_OW 88
// DialogueOff ;
3517: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3521: LD_EXP 16
3525: PPUSH
3526: LD_INT 500
3528: PPUSH
3529: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3533: LD_EXP 16
3537: PPUSH
3538: LD_EXP 1
3542: PPUSH
3543: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3547: LD_EXP 1
3551: PPUSH
3552: LD_EXP 16
3556: PPUSH
3557: CALL_OW 119
// wait ( 0 0$1 ) ;
3561: LD_INT 35
3563: PPUSH
3564: CALL_OW 67
// DialogueOn ;
3568: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3572: LD_EXP 16
3576: PPUSH
3577: LD_STRING D5b-Joan-1
3579: PPUSH
3580: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3584: LD_EXP 1
3588: PPUSH
3589: LD_STRING D5b-JMM-2
3591: PPUSH
3592: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3596: LD_EXP 16
3600: PPUSH
3601: LD_STRING D5b-Joan-2
3603: PPUSH
3604: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING D5b-JMM-3
3615: PPUSH
3616: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3620: LD_EXP 16
3624: PPUSH
3625: LD_STRING D5b-Joan-3
3627: PPUSH
3628: CALL_OW 88
// DialogueOff ;
3632: CALL_OW 7
// end else
3636: GO 4104
// begin ComTurnUnit ( tmp , Joan ) ;
3638: LD_VAR 0 3
3642: PPUSH
3643: LD_EXP 16
3647: PPUSH
3648: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3652: LD_VAR 0 3
3656: PPUSH
3657: LD_STRING D5a-Sol1-1
3659: PPUSH
3660: CALL_OW 88
// DialogueOff ;
3664: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3668: LD_EXP 16
3672: PPUSH
3673: LD_INT 500
3675: PPUSH
3676: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3680: LD_EXP 16
3684: PPUSH
3685: LD_VAR 0 3
3689: PPUSH
3690: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3694: LD_VAR 0 3
3698: PPUSH
3699: LD_EXP 16
3703: PPUSH
3704: CALL_OW 119
// wait ( 0 0$1 ) ;
3708: LD_INT 35
3710: PPUSH
3711: CALL_OW 67
// DialogueOn ;
3715: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3719: LD_EXP 16
3723: PPUSH
3724: LD_STRING D5a-Joan-1
3726: PPUSH
3727: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3731: LD_VAR 0 3
3735: PPUSH
3736: LD_STRING D5a-Sol1-2
3738: PPUSH
3739: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3743: LD_EXP 16
3747: PPUSH
3748: LD_STRING D5a-Joan-2
3750: PPUSH
3751: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3755: LD_VAR 0 3
3759: PPUSH
3760: LD_STRING D5a-Sol1-3
3762: PPUSH
3763: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3767: LD_EXP 16
3771: PPUSH
3772: LD_STRING D5a-Joan-3
3774: PPUSH
3775: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3779: LD_VAR 0 3
3783: PPUSH
3784: LD_STRING D5a-Sol1-4
3786: PPUSH
3787: CALL_OW 88
// DialogueOff ;
3791: CALL_OW 7
// if GetDistUnits ( JMM , Joan ) > 10 then
3795: LD_EXP 1
3799: PPUSH
3800: LD_EXP 16
3804: PPUSH
3805: CALL_OW 296
3809: PUSH
3810: LD_INT 10
3812: GREATER
3813: IFFALSE 3896
// begin InGameOff ;
3815: CALL_OW 9
// ComMoveUnit ( Joan , tmp ) ;
3819: LD_EXP 16
3823: PPUSH
3824: LD_VAR 0 3
3828: PPUSH
3829: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// until GetDistUnits ( JMM , Joan ) < 8 or IsDead ( Joan ) ;
3840: LD_EXP 1
3844: PPUSH
3845: LD_EXP 16
3849: PPUSH
3850: CALL_OW 296
3854: PUSH
3855: LD_INT 8
3857: LESS
3858: PUSH
3859: LD_EXP 16
3863: PPUSH
3864: CALL_OW 301
3868: OR
3869: IFFALSE 3833
// if IsDead ( Joan ) then
3871: LD_EXP 16
3875: PPUSH
3876: CALL_OW 301
3880: IFFALSE 3892
// begin blockSpawn := false ;
3882: LD_ADDR_EXP 30
3886: PUSH
3887: LD_INT 0
3889: ST_TO_ADDR
// exit ;
3890: GO 4235
// end ; InGameOn ;
3892: CALL_OW 8
// end ; if JMM in FilterAllUnits ( [ f_driving ] ) then
3896: LD_EXP 1
3900: PUSH
3901: LD_INT 55
3903: PUSH
3904: EMPTY
3905: LIST
3906: PPUSH
3907: CALL_OW 69
3911: IN
3912: IFFALSE 3935
// begin ComMoveUnit ( JMM , Joan ) ;
3914: LD_EXP 1
3918: PPUSH
3919: LD_EXP 16
3923: PPUSH
3924: CALL_OW 112
// wait ( 0 0$05 ) ;
3928: LD_INT 175
3930: PPUSH
3931: CALL_OW 67
// end ; ComExit ( JMM ) ;
3935: LD_EXP 1
3939: PPUSH
3940: CALL 81349 0 1
// wait ( 0 0$1 ) ;
3944: LD_INT 35
3946: PPUSH
3947: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3951: LD_INT 35
3953: PPUSH
3954: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3958: LD_EXP 16
3962: PUSH
3963: LD_VAR 0 3
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PPUSH
3972: LD_EXP 1
3976: PPUSH
3977: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3981: LD_EXP 16
3985: PPUSH
3986: LD_EXP 1
3990: PPUSH
3991: CALL_OW 296
3995: PUSH
3996: LD_INT 5
3998: LESS
3999: IFFALSE 3951
// ComTurnUnit ( Joan , JMM ) ;
4001: LD_EXP 16
4005: PPUSH
4006: LD_EXP 1
4010: PPUSH
4011: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
4015: LD_EXP 1
4019: PPUSH
4020: LD_EXP 16
4024: PPUSH
4025: CALL_OW 119
// wait ( 0 0$1 ) ;
4029: LD_INT 35
4031: PPUSH
4032: CALL_OW 67
// DialogueOn ;
4036: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
4040: LD_EXP 16
4044: PPUSH
4045: LD_STRING D5a-Joan-4
4047: PPUSH
4048: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
4052: LD_EXP 1
4056: PPUSH
4057: LD_STRING D5a-JMM-4
4059: PPUSH
4060: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
4064: LD_EXP 16
4068: PPUSH
4069: LD_STRING D5a-Joan-5
4071: PPUSH
4072: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
4076: LD_EXP 1
4080: PPUSH
4081: LD_STRING D5a-JMM-5
4083: PPUSH
4084: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
4088: LD_EXP 16
4092: PPUSH
4093: LD_STRING D5a-Joan-6
4095: PPUSH
4096: CALL_OW 88
// DialogueOff ;
4100: CALL_OW 7
// end ; DialogueOn ;
4104: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4108: LD_EXP 1
4112: PPUSH
4113: LD_STRING D6-JMM-1
4115: PPUSH
4116: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4120: LD_EXP 16
4124: PPUSH
4125: LD_STRING D6-Joan-1
4127: PPUSH
4128: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4132: LD_EXP 1
4136: PPUSH
4137: LD_STRING D6-JMM-2
4139: PPUSH
4140: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4144: LD_EXP 16
4148: PPUSH
4149: LD_STRING D6-Joan-2
4151: PPUSH
4152: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4156: LD_EXP 1
4160: PPUSH
4161: LD_STRING D6-JMM-3
4163: PPUSH
4164: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4168: LD_EXP 16
4172: PPUSH
4173: LD_STRING D6-Joan-3
4175: PPUSH
4176: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4180: LD_EXP 1
4184: PPUSH
4185: LD_STRING D6-JMM-4
4187: PPUSH
4188: CALL_OW 88
// DialogueOff ;
4192: CALL_OW 7
// InGameOff ;
4196: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4200: LD_EXP 16
4204: PPUSH
4205: LD_INT 1
4207: PPUSH
4208: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4212: LD_STRING MJ
4214: PPUSH
4215: CALL_OW 337
// joanStatus = 1 ;
4219: LD_ADDR_EXP 17
4223: PUSH
4224: LD_INT 1
4226: ST_TO_ADDR
// blockSpawn = 0 ;
4227: LD_ADDR_EXP 30
4231: PUSH
4232: LD_INT 0
4234: ST_TO_ADDR
// end ;
4235: LD_VAR 0 1
4239: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4240: LD_INT 0
4242: PPUSH
4243: PPUSH
// if not number or number > 8 then
4244: LD_VAR 0 1
4248: NOT
4249: PUSH
4250: LD_VAR 0 1
4254: PUSH
4255: LD_INT 8
4257: GREATER
4258: OR
4259: IFFALSE 4263
// exit ;
4261: GO 5811
// repeat wait ( 0 0$7 ) ;
4263: LD_INT 245
4265: PPUSH
4266: CALL_OW 67
// until blockSpawn = 0 ;
4270: LD_EXP 30
4274: PUSH
4275: LD_INT 0
4277: EQUAL
4278: IFFALSE 4263
// uc_side := 1 ;
4280: LD_ADDR_OWVAR 20
4284: PUSH
4285: LD_INT 1
4287: ST_TO_ADDR
// uc_nation := 1 ;
4288: LD_ADDR_OWVAR 21
4292: PUSH
4293: LD_INT 1
4295: ST_TO_ADDR
// InitHc ;
4296: CALL_OW 19
// if number = 1 then
4300: LD_VAR 0 1
4304: PUSH
4305: LD_INT 1
4307: EQUAL
4308: IFFALSE 4484
// begin hc_class := 3 ;
4310: LD_ADDR_OWVAR 28
4314: PUSH
4315: LD_INT 3
4317: ST_TO_ADDR
// hc_sex := sex_male ;
4318: LD_ADDR_OWVAR 27
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4326: LD_ADDR_OWVAR 33
4330: PUSH
4331: LD_STRING SecondCharsGal
4333: ST_TO_ADDR
// hc_face_number := 55 ;
4334: LD_ADDR_OWVAR 34
4338: PUSH
4339: LD_INT 55
4341: ST_TO_ADDR
// hc_name := George McCarthy ;
4342: LD_ADDR_OWVAR 26
4346: PUSH
4347: LD_STRING George McCarthy
4349: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4350: LD_ADDR_OWVAR 29
4354: PUSH
4355: LD_INT 11
4357: PUSH
4358: LD_INT 10
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 3 , 0 ] ;
4365: LD_ADDR_OWVAR 30
4369: PUSH
4370: LD_INT 0
4372: PUSH
4373: LD_INT 0
4375: PUSH
4376: LD_INT 3
4378: PUSH
4379: LD_INT 0
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
4388: LD_ADDR_OWVAR 31
4392: PUSH
4393: LD_INT 0
4395: PUSH
4396: LD_INT 2
4398: PUSH
4399: LD_INT 3
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: ST_TO_ADDR
// un = CreateHuman ;
4411: LD_ADDR_VAR 0 3
4415: PUSH
4416: CALL_OW 44
4420: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4421: LD_VAR 0 3
4425: PPUSH
4426: LD_INT 23
4428: PPUSH
4429: LD_INT 1
4431: PPUSH
4432: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4436: LD_VAR 0 3
4440: PPUSH
4441: CALL_OW 87
// wait ( 0 0$1 ) ;
4445: LD_INT 35
4447: PPUSH
4448: CALL_OW 67
// DialogueOn ;
4452: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4456: LD_VAR 0 3
4460: PPUSH
4461: LD_STRING D11d-Sol4-1
4463: PPUSH
4464: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4468: LD_EXP 1
4472: PPUSH
4473: LD_STRING D11d-JMM-1
4475: PPUSH
4476: CALL_OW 88
// DialogueOff ;
4480: CALL_OW 7
// end ; if number = 2 then
4484: LD_VAR 0 1
4488: PUSH
4489: LD_INT 2
4491: EQUAL
4492: IFFALSE 4668
// begin hc_class := 1 ;
4494: LD_ADDR_OWVAR 28
4498: PUSH
4499: LD_INT 1
4501: ST_TO_ADDR
// hc_sex := sex_male ;
4502: LD_ADDR_OWVAR 27
4506: PUSH
4507: LD_INT 1
4509: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4510: LD_ADDR_OWVAR 33
4514: PUSH
4515: LD_STRING AmGalRemake
4517: ST_TO_ADDR
// hc_face_number := 7 ;
4518: LD_ADDR_OWVAR 34
4522: PUSH
4523: LD_INT 7
4525: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4526: LD_ADDR_OWVAR 26
4530: PUSH
4531: LD_STRING Bobby Jordan
4533: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4534: LD_ADDR_OWVAR 29
4538: PUSH
4539: LD_INT 9
4541: PUSH
4542: LD_INT 11
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 2 ] ;
4549: LD_ADDR_OWVAR 30
4553: PUSH
4554: LD_INT 1
4556: PUSH
4557: LD_INT 0
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: LD_INT 2
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 2 ] ;
4572: LD_ADDR_OWVAR 31
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: LD_INT 0
4582: PUSH
4583: LD_INT 1
4585: PUSH
4586: LD_INT 2
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: ST_TO_ADDR
// un = CreateHuman ;
4595: LD_ADDR_VAR 0 3
4599: PUSH
4600: CALL_OW 44
4604: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4605: LD_VAR 0 3
4609: PPUSH
4610: LD_INT 24
4612: PPUSH
4613: LD_INT 1
4615: PPUSH
4616: CALL_OW 49
// wait ( 0 0$1 ) ;
4620: LD_INT 35
4622: PPUSH
4623: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4627: LD_VAR 0 3
4631: PPUSH
4632: CALL_OW 87
// DialogueOn ;
4636: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4640: LD_VAR 0 3
4644: PPUSH
4645: LD_STRING D11b-Sol3-1
4647: PPUSH
4648: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4652: LD_EXP 1
4656: PPUSH
4657: LD_STRING D11b-JMM-1
4659: PPUSH
4660: CALL_OW 88
// DialogueOff ;
4664: CALL_OW 7
// end ; if number = 3 then
4668: LD_VAR 0 1
4672: PUSH
4673: LD_INT 3
4675: EQUAL
4676: IFFALSE 4840
// begin hc_class := 1 ;
4678: LD_ADDR_OWVAR 28
4682: PUSH
4683: LD_INT 1
4685: ST_TO_ADDR
// hc_sex := sex_male ;
4686: LD_ADDR_OWVAR 27
4690: PUSH
4691: LD_INT 1
4693: ST_TO_ADDR
// hc_gallery := DJ ;
4694: LD_ADDR_OWVAR 33
4698: PUSH
4699: LD_STRING DJ
4701: ST_TO_ADDR
// hc_face_number := 1 ;
4702: LD_ADDR_OWVAR 34
4706: PUSH
4707: LD_INT 1
4709: ST_TO_ADDR
// hc_name := Darius Dajay ;
4710: LD_ADDR_OWVAR 26
4714: PUSH
4715: LD_STRING Darius Dajay
4717: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4718: LD_ADDR_OWVAR 29
4722: PUSH
4723: LD_INT 11
4725: PUSH
4726: LD_INT 11
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 1 , 0 ] ;
4733: LD_ADDR_OWVAR 30
4737: PUSH
4738: LD_INT 2
4740: PUSH
4741: LD_INT 0
4743: PUSH
4744: LD_INT 1
4746: PUSH
4747: LD_INT 0
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 1 , 0 ] ;
4756: LD_ADDR_OWVAR 31
4760: PUSH
4761: LD_INT 5
4763: PUSH
4764: LD_INT 0
4766: PUSH
4767: LD_INT 1
4769: PUSH
4770: LD_INT 0
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: ST_TO_ADDR
// un = CreateHuman ;
4779: LD_ADDR_VAR 0 3
4783: PUSH
4784: CALL_OW 44
4788: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4789: LD_VAR 0 3
4793: PPUSH
4794: LD_INT 25
4796: PPUSH
4797: LD_INT 1
4799: PPUSH
4800: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4804: LD_VAR 0 3
4808: PPUSH
4809: CALL_OW 87
// wait ( 0 0$1 ) ;
4813: LD_INT 35
4815: PPUSH
4816: CALL_OW 67
// DialogueOn ;
4820: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4824: LD_VAR 0 3
4828: PPUSH
4829: LD_STRING D11f-Sol5-1
4831: PPUSH
4832: CALL_OW 88
// DialogueOff ;
4836: CALL_OW 7
// end ; if number = 4 then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 4
4847: EQUAL
4848: IFFALSE 4985
// begin hc_class := 2 ;
4850: LD_ADDR_OWVAR 28
4854: PUSH
4855: LD_INT 2
4857: ST_TO_ADDR
// hc_sex := sex_female ;
4858: LD_ADDR_OWVAR 27
4862: PUSH
4863: LD_INT 2
4865: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4866: LD_ADDR_OWVAR 33
4870: PUSH
4871: LD_STRING SecondCharsGal
4873: ST_TO_ADDR
// hc_face_number := 46 ;
4874: LD_ADDR_OWVAR 34
4878: PUSH
4879: LD_INT 46
4881: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4882: LD_ADDR_OWVAR 26
4886: PUSH
4887: LD_STRING Sylvia Creak
4889: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4890: LD_ADDR_OWVAR 29
4894: PUSH
4895: LD_INT 10
4897: PUSH
4898: LD_INT 9
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4905: LD_ADDR_OWVAR 30
4909: PUSH
4910: LD_INT 0
4912: PUSH
4913: LD_INT 1
4915: PUSH
4916: LD_INT 1
4918: PUSH
4919: LD_INT 1
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4928: LD_ADDR_OWVAR 31
4932: PUSH
4933: LD_INT 1
4935: PUSH
4936: LD_INT 3
4938: PUSH
4939: LD_INT 1
4941: PUSH
4942: LD_INT 1
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: ST_TO_ADDR
// un = CreateHuman ;
4951: LD_ADDR_VAR 0 3
4955: PUSH
4956: CALL_OW 44
4960: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4961: LD_VAR 0 3
4965: PPUSH
4966: LD_INT 26
4968: PPUSH
4969: LD_INT 1
4971: PPUSH
4972: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4976: LD_VAR 0 3
4980: PPUSH
4981: CALL_OW 87
// end ; if number = 5 then
4985: LD_VAR 0 1
4989: PUSH
4990: LD_INT 5
4992: EQUAL
4993: IFFALSE 5169
// begin hc_class := 1 ;
4995: LD_ADDR_OWVAR 28
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// hc_sex := sex_female ;
5003: LD_ADDR_OWVAR 27
5007: PUSH
5008: LD_INT 2
5010: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5011: LD_ADDR_OWVAR 33
5015: PUSH
5016: LD_STRING SecondCharsGal
5018: ST_TO_ADDR
// hc_face_number := 37 ;
5019: LD_ADDR_OWVAR 34
5023: PUSH
5024: LD_INT 37
5026: ST_TO_ADDR
// hc_name := Malena Johnson ;
5027: LD_ADDR_OWVAR 26
5031: PUSH
5032: LD_STRING Malena Johnson
5034: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
5035: LD_ADDR_OWVAR 29
5039: PUSH
5040: LD_INT 11
5042: PUSH
5043: LD_INT 10
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5050: LD_ADDR_OWVAR 30
5054: PUSH
5055: LD_INT 1
5057: PUSH
5058: LD_INT 2
5060: PUSH
5061: LD_INT 0
5063: PUSH
5064: LD_INT 0
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: ST_TO_ADDR
// hc_skills := [ 3 , 2 , 1 , 0 ] ;
5073: LD_ADDR_OWVAR 31
5077: PUSH
5078: LD_INT 3
5080: PUSH
5081: LD_INT 2
5083: PUSH
5084: LD_INT 1
5086: PUSH
5087: LD_INT 0
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: ST_TO_ADDR
// un = CreateHuman ;
5096: LD_ADDR_VAR 0 3
5100: PUSH
5101: CALL_OW 44
5105: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
5106: LD_VAR 0 3
5110: PPUSH
5111: LD_INT 27
5113: PPUSH
5114: LD_INT 1
5116: PPUSH
5117: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5121: LD_VAR 0 3
5125: PPUSH
5126: CALL_OW 87
// wait ( 0 0$1 ) ;
5130: LD_INT 35
5132: PPUSH
5133: CALL_OW 67
// DialogueOn ;
5137: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5141: LD_VAR 0 3
5145: PPUSH
5146: LD_STRING D11c-FSol3-1
5148: PPUSH
5149: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5153: LD_EXP 1
5157: PPUSH
5158: LD_STRING D11c-JMM-1
5160: PPUSH
5161: CALL_OW 88
// DialogueOff ;
5165: CALL_OW 7
// end ; if number = 6 then
5169: LD_VAR 0 1
5173: PUSH
5174: LD_INT 6
5176: EQUAL
5177: IFFALSE 5351
// begin hc_class := 1 ;
5179: LD_ADDR_OWVAR 28
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// hc_sex := sex_male ;
5187: LD_ADDR_OWVAR 27
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5195: LD_ADDR_OWVAR 33
5199: PUSH
5200: LD_STRING AmGalRemake
5202: ST_TO_ADDR
// hc_face_number := 1 ;
5203: LD_ADDR_OWVAR 34
5207: PUSH
5208: LD_INT 1
5210: ST_TO_ADDR
// hc_name := Charles Brown ;
5211: LD_ADDR_OWVAR 26
5215: PUSH
5216: LD_STRING Charles Brown
5218: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5219: LD_ADDR_OWVAR 29
5223: PUSH
5224: LD_INT 12
5226: PUSH
5227: LD_INT 11
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
5234: LD_ADDR_OWVAR 30
5238: PUSH
5239: LD_INT 3
5241: PUSH
5242: LD_INT 0
5244: PUSH
5245: LD_INT 0
5247: PUSH
5248: LD_INT 0
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
5257: LD_ADDR_OWVAR 31
5261: PUSH
5262: LD_INT 3
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 1
5270: PUSH
5271: LD_INT 1
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: ST_TO_ADDR
// un = CreateHuman ;
5280: LD_ADDR_VAR 0 3
5284: PUSH
5285: CALL_OW 44
5289: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5290: LD_VAR 0 3
5294: PPUSH
5295: LD_INT 28
5297: PPUSH
5298: LD_INT 1
5300: PPUSH
5301: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5305: LD_VAR 0 3
5309: PPUSH
5310: CALL_OW 87
// wait ( 0 0$1 ) ;
5314: LD_INT 35
5316: PPUSH
5317: CALL_OW 67
// DialogueOn ;
5321: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5325: LD_VAR 0 3
5329: PPUSH
5330: LD_STRING D4-Sol1-5
5332: PPUSH
5333: CALL_OW 88
// DialogueOff ;
5337: CALL_OW 7
// tempCharles = un ;
5341: LD_ADDR_EXP 14
5345: PUSH
5346: LD_VAR 0 3
5350: ST_TO_ADDR
// end ; if number = 7 then
5351: LD_VAR 0 1
5355: PUSH
5356: LD_INT 7
5358: EQUAL
5359: IFFALSE 5631
// begin hc_class := 1 ;
5361: LD_ADDR_OWVAR 28
5365: PUSH
5366: LD_INT 1
5368: ST_TO_ADDR
// hc_sex := sex_female ;
5369: LD_ADDR_OWVAR 27
5373: PUSH
5374: LD_INT 2
5376: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5377: LD_ADDR_OWVAR 33
5381: PUSH
5382: LD_STRING AmGalRemake
5384: ST_TO_ADDR
// hc_face_number := 2 ;
5385: LD_ADDR_OWVAR 34
5389: PUSH
5390: LD_INT 2
5392: ST_TO_ADDR
// hc_name := Johanna Holland ;
5393: LD_ADDR_OWVAR 26
5397: PUSH
5398: LD_STRING Johanna Holland
5400: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5401: LD_ADDR_OWVAR 29
5405: PUSH
5406: LD_INT 10
5408: PUSH
5409: LD_INT 10
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 1 ] ;
5416: LD_ADDR_OWVAR 30
5420: PUSH
5421: LD_INT 2
5423: PUSH
5424: LD_INT 0
5426: PUSH
5427: LD_INT 0
5429: PUSH
5430: LD_INT 1
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 2 ] ;
5439: LD_ADDR_OWVAR 31
5443: PUSH
5444: LD_INT 3
5446: PUSH
5447: LD_INT 0
5449: PUSH
5450: LD_INT 1
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: ST_TO_ADDR
// un = CreateHuman ;
5462: LD_ADDR_VAR 0 3
5466: PUSH
5467: CALL_OW 44
5471: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5472: LD_VAR 0 3
5476: PPUSH
5477: LD_INT 29
5479: PPUSH
5480: LD_INT 1
5482: PPUSH
5483: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5487: LD_VAR 0 3
5491: PPUSH
5492: CALL_OW 87
// wait ( 0 0$1 ) ;
5496: LD_INT 35
5498: PPUSH
5499: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5503: LD_INT 30
5505: PPUSH
5506: LD_INT 22
5508: PUSH
5509: LD_INT 3
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PPUSH
5516: CALL_OW 70
5520: IFFALSE 5631
// begin DialogueOn ;
5522: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5526: LD_VAR 0 3
5530: PPUSH
5531: CALL_OW 250
5535: PPUSH
5536: LD_VAR 0 3
5540: PPUSH
5541: CALL_OW 251
5545: PPUSH
5546: LD_INT 1
5548: PPUSH
5549: LD_INT 15
5551: NEG
5552: PPUSH
5553: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5557: LD_VAR 0 3
5561: PPUSH
5562: CALL_OW 250
5566: PPUSH
5567: LD_VAR 0 3
5571: PPUSH
5572: CALL_OW 251
5576: PPUSH
5577: LD_INT 1
5579: PPUSH
5580: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5584: LD_VAR 0 3
5588: PPUSH
5589: LD_STRING D11a-FSol2-1
5591: PPUSH
5592: CALL_OW 88
// DialogueOff ;
5596: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5600: LD_INT 3
5602: PPUSH
5603: LD_VAR 0 3
5607: PPUSH
5608: CALL_OW 471
// wait ( 0 0$2 ) ;
5612: LD_INT 70
5614: PPUSH
5615: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5619: LD_INT 3
5621: PPUSH
5622: LD_VAR 0 3
5626: PPUSH
5627: CALL_OW 472
// end ; end ; if number = 8 then
5631: LD_VAR 0 1
5635: PUSH
5636: LD_INT 8
5638: EQUAL
5639: IFFALSE 5795
// begin hc_class := 1 ;
5641: LD_ADDR_OWVAR 28
5645: PUSH
5646: LD_INT 1
5648: ST_TO_ADDR
// hc_sex := sex_female ;
5649: LD_ADDR_OWVAR 27
5653: PUSH
5654: LD_INT 2
5656: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5657: LD_ADDR_OWVAR 33
5661: PUSH
5662: LD_STRING SecondCharsGal
5664: ST_TO_ADDR
// hc_face_number := 45 ;
5665: LD_ADDR_OWVAR 34
5669: PUSH
5670: LD_INT 45
5672: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5673: LD_ADDR_OWVAR 26
5677: PUSH
5678: LD_STRING Margherite Simpson
5680: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5681: LD_ADDR_OWVAR 29
5685: PUSH
5686: LD_INT 12
5688: PUSH
5689: LD_INT 10
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5696: LD_ADDR_OWVAR 30
5700: PUSH
5701: LD_INT 1
5703: PUSH
5704: LD_INT 2
5706: PUSH
5707: LD_INT 0
5709: PUSH
5710: LD_INT 0
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 1 ] ;
5719: LD_ADDR_OWVAR 31
5723: PUSH
5724: LD_INT 2
5726: PUSH
5727: LD_INT 3
5729: PUSH
5730: LD_INT 0
5732: PUSH
5733: LD_INT 1
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: ST_TO_ADDR
// un = CreateHuman ;
5742: LD_ADDR_VAR 0 3
5746: PUSH
5747: CALL_OW 44
5751: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5752: LD_VAR 0 3
5756: PPUSH
5757: LD_INT 33
5759: PPUSH
5760: LD_INT 1
5762: PPUSH
5763: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5767: LD_VAR 0 3
5771: PPUSH
5772: CALL_OW 87
// wait ( 0 0$1 ) ;
5776: LD_INT 35
5778: PPUSH
5779: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5783: LD_VAR 0 3
5787: PPUSH
5788: LD_STRING D11e-FSol4-1
5790: PPUSH
5791: CALL_OW 88
// end ; arrivals := arrivals union un ;
5795: LD_ADDR_EXP 45
5799: PUSH
5800: LD_EXP 45
5804: PUSH
5805: LD_VAR 0 3
5809: UNION
5810: ST_TO_ADDR
// end ; end_of_file
5811: LD_VAR 0 2
5815: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5816: LD_INT 0
5818: PPUSH
5819: PPUSH
// ruAttackers := [ ] ;
5820: LD_ADDR_EXP 48
5824: PUSH
5825: EMPTY
5826: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5827: LD_ADDR_EXP 49
5831: PUSH
5832: EMPTY
5833: ST_TO_ADDR
// if Difficulty < 3 then
5834: LD_OWVAR 67
5838: PUSH
5839: LD_INT 3
5841: LESS
5842: IFFALSE 5859
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5844: LD_INT 130
5846: PPUSH
5847: LD_INT 81
5849: PPUSH
5850: CALL_OW 428
5854: PPUSH
5855: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5859: LD_INT 3
5861: PPUSH
5862: LD_INT 3
5864: PPUSH
5865: LD_INT 2
5867: PPUSH
5868: LD_EXP 35
5872: PPUSH
5873: LD_EXP 36
5877: PPUSH
5878: CALL_OW 12
5882: PPUSH
5883: LD_INT 2
5885: PPUSH
5886: LD_INT 4
5888: PPUSH
5889: CALL 7686 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5893: LD_INT 3
5895: PPUSH
5896: LD_INT 3
5898: PPUSH
5899: LD_INT 8
5901: PPUSH
5902: LD_EXP 35
5906: PPUSH
5907: LD_EXP 36
5911: PPUSH
5912: CALL_OW 12
5916: PPUSH
5917: LD_INT 1
5919: PPUSH
5920: LD_INT 4
5922: PPUSH
5923: CALL 7686 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5927: LD_INT 3
5929: PPUSH
5930: LD_INT 3
5932: PPUSH
5933: LD_INT 67
5935: PPUSH
5936: LD_EXP 35
5940: PPUSH
5941: LD_EXP 36
5945: PPUSH
5946: CALL_OW 12
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: LD_INT 2
5956: PPUSH
5957: CALL 7686 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5961: LD_INT 3
5963: PPUSH
5964: LD_INT 3
5966: PPUSH
5967: LD_INT 21
5969: PPUSH
5970: LD_EXP 35
5974: PPUSH
5975: LD_EXP 36
5979: PPUSH
5980: CALL_OW 12
5984: PPUSH
5985: LD_INT 3
5987: PPUSH
5988: LD_INT 6
5990: PPUSH
5991: CALL 7686 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5995: LD_INT 3
5997: PPUSH
5998: LD_INT 3
6000: PPUSH
6001: LD_INT 17
6003: PPUSH
6004: LD_EXP 35
6008: PPUSH
6009: LD_EXP 36
6013: PPUSH
6014: CALL_OW 12
6018: PPUSH
6019: LD_INT 3
6021: PPUSH
6022: LD_INT 6
6024: PPUSH
6025: CALL 7686 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
6029: LD_INT 3
6031: PPUSH
6032: LD_INT 3
6034: PPUSH
6035: LD_INT 32
6037: PPUSH
6038: LD_EXP 35
6042: PPUSH
6043: LD_EXP 36
6047: PPUSH
6048: CALL_OW 12
6052: PPUSH
6053: LD_INT 4
6055: PPUSH
6056: LD_INT 2
6058: PPUSH
6059: CALL 7686 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6063: LD_ADDR_VAR 0 2
6067: PUSH
6068: LD_INT 22
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 21
6080: PUSH
6081: LD_INT 3
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 30
6090: PUSH
6091: LD_INT 32
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: PPUSH
6103: CALL_OW 69
6107: PUSH
6108: FOR_IN
6109: IFFALSE 6149
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6111: LD_INT 3
6113: PPUSH
6114: LD_INT 3
6116: PPUSH
6117: LD_VAR 0 2
6121: PPUSH
6122: LD_EXP 35
6126: PPUSH
6127: LD_EXP 36
6131: PPUSH
6132: CALL_OW 12
6136: PPUSH
6137: LD_INT 1
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: CALL 7686 0 6
6147: GO 6108
6149: POP
6150: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6151: LD_ADDR_VAR 0 2
6155: PUSH
6156: LD_INT 22
6158: PUSH
6159: LD_INT 3
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: LD_INT 21
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 30
6178: PUSH
6179: LD_INT 31
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: PPUSH
6191: CALL_OW 69
6195: PUSH
6196: FOR_IN
6197: IFFALSE 6225
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6199: LD_EXP 35
6203: PPUSH
6204: LD_EXP 36
6208: PPUSH
6209: CALL_OW 12
6213: PPUSH
6214: LD_VAR 0 2
6218: PPUSH
6219: CALL 7796 0 2
6223: GO 6196
6225: POP
6226: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6227: LD_INT 3
6229: PPUSH
6230: LD_INT 32
6232: PPUSH
6233: LD_INT 3
6235: PPUSH
6236: CALL 8075 0 3
// end ;
6240: LD_VAR 0 1
6244: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6245: LD_INT 22
6247: PUSH
6248: LD_INT 3
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 32
6257: PUSH
6258: LD_INT 1
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PPUSH
6269: CALL_OW 69
6273: IFFALSE 6350
6275: GO 6277
6277: DISABLE
6278: LD_INT 0
6280: PPUSH
// begin enable ;
6281: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6282: LD_ADDR_VAR 0 1
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 3
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 32
6299: PUSH
6300: LD_INT 1
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: PUSH
6316: FOR_IN
6317: IFFALSE 6348
// if GetFuel ( i ) < 3 then
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 261
6328: PUSH
6329: LD_INT 3
6331: LESS
6332: IFFALSE 6346
// SetFuel ( i , 3 ) ;
6334: LD_VAR 0 1
6338: PPUSH
6339: LD_INT 3
6341: PPUSH
6342: CALL_OW 240
6346: GO 6316
6348: POP
6349: POP
// end ;
6350: PPOPN 1
6352: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6353: LD_OWVAR 67
6357: PUSH
6358: LD_INT 1
6360: GREATER
6361: IFFALSE 6930
6363: GO 6365
6365: DISABLE
6366: LD_INT 0
6368: PPUSH
6369: PPUSH
6370: PPUSH
6371: PPUSH
// begin uc_side := 3 ;
6372: LD_ADDR_OWVAR 20
6376: PUSH
6377: LD_INT 3
6379: ST_TO_ADDR
// uc_nation := 3 ;
6380: LD_ADDR_OWVAR 21
6384: PUSH
6385: LD_INT 3
6387: ST_TO_ADDR
// for i := 1 to 2 do
6388: LD_ADDR_VAR 0 1
6392: PUSH
6393: DOUBLE
6394: LD_INT 1
6396: DEC
6397: ST_TO_ADDR
6398: LD_INT 2
6400: PUSH
6401: FOR_TO
6402: IFFALSE 6516
// begin InitHC_All ( ) ;
6404: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6408: LD_INT 0
6410: PPUSH
6411: LD_INT 4
6413: PUSH
6414: LD_INT 5
6416: PUSH
6417: LD_INT 6
6419: PUSH
6420: LD_INT 6
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: PUSH
6429: LD_OWVAR 67
6433: ARRAY
6434: PPUSH
6435: CALL_OW 381
// un := CreateHuman ;
6439: LD_ADDR_VAR 0 2
6443: PUSH
6444: CALL_OW 44
6448: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6449: LD_VAR 0 2
6453: PPUSH
6454: LD_INT 91
6456: PPUSH
6457: LD_INT 87
6459: PPUSH
6460: LD_INT 3
6462: PPUSH
6463: LD_INT 0
6465: PPUSH
6466: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6470: LD_ADDR_EXP 49
6474: PUSH
6475: LD_EXP 49
6479: PPUSH
6480: LD_EXP 49
6484: PUSH
6485: LD_INT 1
6487: PLUS
6488: PPUSH
6489: LD_VAR 0 2
6493: PPUSH
6494: CALL_OW 1
6498: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6499: LD_VAR 0 2
6503: PPUSH
6504: LD_INT 46
6506: PPUSH
6507: LD_INT 78
6509: PPUSH
6510: CALL_OW 114
// end ;
6514: GO 6401
6516: POP
6517: POP
// if Difficulty > 2 then
6518: LD_OWVAR 67
6522: PUSH
6523: LD_INT 2
6525: GREATER
6526: IFFALSE 6658
// begin for i := 1 to 3 do
6528: LD_ADDR_VAR 0 1
6532: PUSH
6533: DOUBLE
6534: LD_INT 1
6536: DEC
6537: ST_TO_ADDR
6538: LD_INT 3
6540: PUSH
6541: FOR_TO
6542: IFFALSE 6656
// begin InitHC_All ( ) ;
6544: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6548: LD_INT 0
6550: PPUSH
6551: LD_INT 4
6553: PUSH
6554: LD_INT 5
6556: PUSH
6557: LD_INT 6
6559: PUSH
6560: LD_INT 6
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: PUSH
6569: LD_OWVAR 67
6573: ARRAY
6574: PPUSH
6575: CALL_OW 381
// un := CreateHuman ;
6579: LD_ADDR_VAR 0 2
6583: PUSH
6584: CALL_OW 44
6588: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6589: LD_VAR 0 2
6593: PPUSH
6594: LD_INT 91
6596: PPUSH
6597: LD_INT 87
6599: PPUSH
6600: LD_INT 3
6602: PPUSH
6603: LD_INT 0
6605: PPUSH
6606: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6610: LD_ADDR_EXP 49
6614: PUSH
6615: LD_EXP 49
6619: PPUSH
6620: LD_EXP 49
6624: PUSH
6625: LD_INT 1
6627: PLUS
6628: PPUSH
6629: LD_VAR 0 2
6633: PPUSH
6634: CALL_OW 1
6638: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6639: LD_VAR 0 2
6643: PPUSH
6644: LD_INT 89
6646: PPUSH
6647: LD_INT 148
6649: PPUSH
6650: CALL_OW 114
// end ;
6654: GO 6541
6656: POP
6657: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6658: LD_ADDR_VAR 0 3
6662: PUSH
6663: LD_INT 33
6665: PUSH
6666: LD_INT 61
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: LD_INT 49
6675: PUSH
6676: LD_INT 85
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 76
6685: PUSH
6686: LD_INT 99
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 81
6695: PUSH
6696: LD_INT 135
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 111
6705: PUSH
6706: LD_INT 155
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: LD_INT 147
6715: PUSH
6716: LD_INT 158
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6731: LD_INT 1050
6733: PPUSH
6734: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6738: LD_ADDR_VAR 0 1
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_EXP 49
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6921
// begin un := ruAttackersInForest [ i ] ;
6756: LD_ADDR_VAR 0 2
6760: PUSH
6761: LD_EXP 49
6765: PUSH
6766: LD_VAR 0 1
6770: ARRAY
6771: ST_TO_ADDR
// tag := GetTag ( un ) ;
6772: LD_ADDR_VAR 0 4
6776: PUSH
6777: LD_VAR 0 2
6781: PPUSH
6782: CALL_OW 110
6786: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6787: LD_VAR 0 2
6791: PPUSH
6792: CALL_OW 302
6796: PUSH
6797: LD_VAR 0 2
6801: PPUSH
6802: CALL_OW 314
6806: NOT
6807: AND
6808: IFFALSE 6919
// begin if tag <> i then
6810: LD_VAR 0 4
6814: PUSH
6815: LD_VAR 0 1
6819: NONEQUAL
6820: IFFALSE 6848
// begin SetTag ( un , i ) ;
6822: LD_VAR 0 2
6826: PPUSH
6827: LD_VAR 0 1
6831: PPUSH
6832: CALL_OW 109
// tag := i ;
6836: LD_ADDR_VAR 0 4
6840: PUSH
6841: LD_VAR 0 1
6845: ST_TO_ADDR
// end else
6846: GO 6880
// begin SetTag ( un , i + 1 ) ;
6848: LD_VAR 0 2
6852: PPUSH
6853: LD_VAR 0 1
6857: PUSH
6858: LD_INT 1
6860: PLUS
6861: PPUSH
6862: CALL_OW 109
// tag := i + 1 ;
6866: LD_ADDR_VAR 0 4
6870: PUSH
6871: LD_VAR 0 1
6875: PUSH
6876: LD_INT 1
6878: PLUS
6879: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6880: LD_VAR 0 2
6884: PPUSH
6885: LD_VAR 0 3
6889: PUSH
6890: LD_VAR 0 4
6894: ARRAY
6895: PUSH
6896: LD_INT 1
6898: ARRAY
6899: PPUSH
6900: LD_VAR 0 3
6904: PUSH
6905: LD_VAR 0 4
6909: ARRAY
6910: PUSH
6911: LD_INT 2
6913: ARRAY
6914: PPUSH
6915: CALL_OW 114
// end ; end ;
6919: GO 6753
6921: POP
6922: POP
// until not ruAttackersInForest ;
6923: LD_EXP 49
6927: NOT
6928: IFFALSE 6731
// end ;
6930: PPOPN 4
6932: END
// every 0 0$2 trigger FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) do var i , tmp , bar , e ;
6933: LD_INT 10
6935: PPUSH
6936: LD_INT 22
6938: PUSH
6939: LD_INT 1
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PPUSH
6946: CALL_OW 70
6950: IFFALSE 7299
6952: GO 6954
6954: DISABLE
6955: LD_INT 0
6957: PPUSH
6958: PPUSH
6959: PPUSH
6960: PPUSH
// begin enable ;
6961: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] , [ f_tag , 111 ] ] ) ;
6962: LD_ADDR_VAR 0 2
6966: PUSH
6967: LD_INT 22
6969: PUSH
6970: LD_INT 3
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 25
6979: PUSH
6980: LD_INT 1
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 120
6989: PUSH
6990: LD_INT 111
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: LIST
7001: PPUSH
7002: CALL_OW 69
7006: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
7007: LD_ADDR_VAR 0 3
7011: PUSH
7012: LD_INT 22
7014: PUSH
7015: LD_INT 3
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 50
7024: PUSH
7025: EMPTY
7026: LIST
7027: PUSH
7028: LD_INT 2
7030: PUSH
7031: LD_INT 30
7033: PUSH
7034: LD_INT 4
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 30
7043: PUSH
7044: LD_INT 5
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: LIST
7060: PPUSH
7061: CALL_OW 69
7065: ST_TO_ADDR
// if not tmp then
7066: LD_VAR 0 2
7070: NOT
7071: IFFALSE 7169
// begin if not bar then
7073: LD_VAR 0 3
7077: NOT
7078: IFFALSE 7083
// begin disable ;
7080: DISABLE
// exit ;
7081: GO 7299
// end ; tmp := [ ] ;
7083: LD_ADDR_VAR 0 2
7087: PUSH
7088: EMPTY
7089: ST_TO_ADDR
// for i in bar do
7090: LD_ADDR_VAR 0 1
7094: PUSH
7095: LD_VAR 0 3
7099: PUSH
7100: FOR_IN
7101: IFFALSE 7126
// tmp := tmp union UnitsInside ( i ) ;
7103: LD_ADDR_VAR 0 2
7107: PUSH
7108: LD_VAR 0 2
7112: PUSH
7113: LD_VAR 0 1
7117: PPUSH
7118: CALL_OW 313
7122: UNION
7123: ST_TO_ADDR
7124: GO 7100
7126: POP
7127: POP
// if not tmp then
7128: LD_VAR 0 2
7132: NOT
7133: IFFALSE 7138
// begin disable ;
7135: DISABLE
// exit ;
7136: GO 7299
// end ; for i in tmp do
7138: LD_ADDR_VAR 0 1
7142: PUSH
7143: LD_VAR 0 2
7147: PUSH
7148: FOR_IN
7149: IFFALSE 7165
// SetTag ( i , 111 ) ;
7151: LD_VAR 0 1
7155: PPUSH
7156: LD_INT 111
7158: PPUSH
7159: CALL_OW 109
7163: GO 7148
7165: POP
7166: POP
// end else
7167: GO 7299
// begin e := FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) ;
7169: LD_ADDR_VAR 0 4
7173: PUSH
7174: LD_INT 10
7176: PPUSH
7177: LD_INT 22
7179: PUSH
7180: LD_INT 1
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PPUSH
7187: CALL_OW 70
7191: ST_TO_ADDR
// for i in tmp do
7192: LD_ADDR_VAR 0 1
7196: PUSH
7197: LD_VAR 0 2
7201: PUSH
7202: FOR_IN
7203: IFFALSE 7297
// if IsOk ( i ) then
7205: LD_VAR 0 1
7209: PPUSH
7210: CALL_OW 302
7214: IFFALSE 7295
// begin if IsInUnit ( i ) then
7216: LD_VAR 0 1
7220: PPUSH
7221: CALL_OW 310
7225: IFFALSE 7236
// ComExitBuilding ( i ) ;
7227: LD_VAR 0 1
7231: PPUSH
7232: CALL_OW 122
// wait ( 3 ) ;
7236: LD_INT 3
7238: PPUSH
7239: CALL_OW 67
// ComAttackUnit ( i , NearestUnitToUnit ( e , i ) ) ;
7243: LD_VAR 0 1
7247: PPUSH
7248: LD_VAR 0 4
7252: PPUSH
7253: LD_VAR 0 1
7257: PPUSH
7258: CALL_OW 74
7262: PPUSH
7263: CALL_OW 115
// AddComEnterUnit ( i , bar [ rand ( 1 , bar ) ] ) ;
7267: LD_VAR 0 1
7271: PPUSH
7272: LD_VAR 0 3
7276: PUSH
7277: LD_INT 1
7279: PPUSH
7280: LD_VAR 0 3
7284: PPUSH
7285: CALL_OW 12
7289: ARRAY
7290: PPUSH
7291: CALL_OW 180
// end ;
7295: GO 7202
7297: POP
7298: POP
// end ; end ;
7299: PPOPN 4
7301: END
// every 3 3$00 trigger tick > 2 2$00 and Prob ( 50 ) do var un ;
7302: LD_OWVAR 1
7306: PUSH
7307: LD_INT 4200
7309: GREATER
7310: PUSH
7311: LD_INT 50
7313: PPUSH
7314: CALL_OW 13
7318: AND
7319: IFFALSE 7410
7321: GO 7323
7323: DISABLE
7324: LD_INT 0
7326: PPUSH
// begin uc_side := 3 ;
7327: LD_ADDR_OWVAR 20
7331: PUSH
7332: LD_INT 3
7334: ST_TO_ADDR
// uc_nation := nation_russian ;
7335: LD_ADDR_OWVAR 21
7339: PUSH
7340: LD_INT 3
7342: ST_TO_ADDR
// InitHC_All ( ) ;
7343: CALL_OW 584
// PrepareEngineer ( false , 2 ) ;
7347: LD_INT 0
7349: PPUSH
7350: LD_INT 2
7352: PPUSH
7353: CALL_OW 382
// un := CreateHuman ;
7357: LD_ADDR_VAR 0 1
7361: PUSH
7362: CALL_OW 44
7366: ST_TO_ADDR
// PlaceUnitXYR ( un , 51 , 7 , 12 , true ) ;
7367: LD_VAR 0 1
7371: PPUSH
7372: LD_INT 51
7374: PPUSH
7375: LD_INT 7
7377: PPUSH
7378: LD_INT 12
7380: PPUSH
7381: LD_INT 1
7383: PPUSH
7384: CALL_OW 50
// wait ( 0 0$1 ) ;
7388: LD_INT 35
7390: PPUSH
7391: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7395: LD_VAR 0 1
7399: PPUSH
7400: LD_INT 106
7402: PPUSH
7403: LD_INT 83
7405: PPUSH
7406: CALL_OW 111
// end ;
7410: PPOPN 1
7412: END
// every 3 3$30 trigger tick > 10 10$00 and Prob ( 45 ) do var un ;
7413: LD_OWVAR 1
7417: PUSH
7418: LD_INT 21000
7420: GREATER
7421: PUSH
7422: LD_INT 45
7424: PPUSH
7425: CALL_OW 13
7429: AND
7430: IFFALSE 7545
7432: GO 7434
7434: DISABLE
7435: LD_INT 0
7437: PPUSH
// begin uc_side := 3 ;
7438: LD_ADDR_OWVAR 20
7442: PUSH
7443: LD_INT 3
7445: ST_TO_ADDR
// uc_nation := nation_russian ;
7446: LD_ADDR_OWVAR 21
7450: PUSH
7451: LD_INT 3
7453: ST_TO_ADDR
// InitHC_All ( ) ;
7454: CALL_OW 584
// PrepareScientist ( false , 2 ) ;
7458: LD_INT 0
7460: PPUSH
7461: LD_INT 2
7463: PPUSH
7464: CALL_OW 384
// un := CreateHuman ;
7468: LD_ADDR_VAR 0 1
7472: PUSH
7473: CALL_OW 44
7477: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 18 , 15 , true ) ;
7478: LD_VAR 0 1
7482: PPUSH
7483: LD_INT 91
7485: PPUSH
7486: LD_INT 18
7488: PPUSH
7489: LD_INT 15
7491: PPUSH
7492: LD_INT 1
7494: PPUSH
7495: CALL_OW 50
// wait ( 0 0$1 ) ;
7499: LD_INT 35
7501: PPUSH
7502: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7506: LD_VAR 0 1
7510: PPUSH
7511: LD_INT 106
7513: PPUSH
7514: LD_INT 83
7516: PPUSH
7517: CALL_OW 111
// AddComEnterUnit ( un , ruarm2 ) ;
7521: LD_VAR 0 1
7525: PPUSH
7526: LD_INT 67
7528: PPUSH
7529: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
7533: LD_VAR 0 1
7537: PPUSH
7538: LD_INT 1
7540: PPUSH
7541: CALL_OW 183
// end ; end_of_file
7545: PPOPN 1
7547: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7548: LD_INT 0
7550: PPUSH
7551: PPUSH
7552: PPUSH
// if not characters then
7553: LD_VAR 0 1
7557: NOT
7558: IFFALSE 7562
// exit ;
7560: GO 7641
// speaker := characters [ rand ( 1 , characters ) ] ;
7562: LD_ADDR_VAR 0 6
7566: PUSH
7567: LD_VAR 0 1
7571: PUSH
7572: LD_INT 1
7574: PPUSH
7575: LD_VAR 0 1
7579: PPUSH
7580: CALL_OW 12
7584: ARRAY
7585: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7586: LD_VAR 0 6
7590: PPUSH
7591: CALL_OW 258
7595: PUSH
7596: LD_INT 1
7598: EQUAL
7599: IFFALSE 7617
// Say ( speaker , dialogMID ) else
7601: LD_VAR 0 6
7605: PPUSH
7606: LD_VAR 0 2
7610: PPUSH
7611: CALL_OW 88
7615: GO 7631
// Say ( speaker , dialogFID ) ;
7617: LD_VAR 0 6
7621: PPUSH
7622: LD_VAR 0 3
7626: PPUSH
7627: CALL_OW 88
// result := speaker ;
7631: LD_ADDR_VAR 0 4
7635: PUSH
7636: LD_VAR 0 6
7640: ST_TO_ADDR
// end ;
7641: LD_VAR 0 4
7645: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7646: LD_INT 0
7648: PPUSH
7649: PPUSH
// for i in charactersList do
7650: LD_ADDR_VAR 0 4
7654: PUSH
7655: LD_VAR 0 1
7659: PUSH
7660: FOR_IN
7661: IFFALSE 7679
// SaveCharacters ( i , ident ) ;
7663: LD_VAR 0 4
7667: PPUSH
7668: LD_VAR 0 2
7672: PPUSH
7673: CALL_OW 38
7677: GO 7660
7679: POP
7680: POP
// end ;
7681: LD_VAR 0 3
7685: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7686: LD_INT 0
7688: PPUSH
7689: PPUSH
7690: PPUSH
7691: PPUSH
// for i := 1 to count do
7692: LD_ADDR_VAR 0 8
7696: PUSH
7697: DOUBLE
7698: LD_INT 1
7700: DEC
7701: ST_TO_ADDR
7702: LD_VAR 0 6
7706: PUSH
7707: FOR_TO
7708: IFFALSE 7789
// begin uc_side = side ;
7710: LD_ADDR_OWVAR 20
7714: PUSH
7715: LD_VAR 0 1
7719: ST_TO_ADDR
// uc_nation = nation ;
7720: LD_ADDR_OWVAR 21
7724: PUSH
7725: LD_VAR 0 2
7729: ST_TO_ADDR
// hc_gallery =  ;
7730: LD_ADDR_OWVAR 33
7734: PUSH
7735: LD_STRING 
7737: ST_TO_ADDR
// hc_name =  ;
7738: LD_ADDR_OWVAR 26
7742: PUSH
7743: LD_STRING 
7745: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7746: LD_INT 0
7748: PPUSH
7749: LD_VAR 0 5
7753: PPUSH
7754: LD_VAR 0 4
7758: PPUSH
7759: CALL_OW 380
// un = CreateHuman ;
7763: LD_ADDR_VAR 0 10
7767: PUSH
7768: CALL_OW 44
7772: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7773: LD_VAR 0 10
7777: PPUSH
7778: LD_VAR 0 3
7782: PPUSH
7783: CALL_OW 52
// end ;
7787: GO 7707
7789: POP
7790: POP
// end ;
7791: LD_VAR 0 7
7795: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7796: LD_INT 0
7798: PPUSH
7799: PPUSH
7800: PPUSH
// uc_side := GetSide ( b ) ;
7801: LD_ADDR_OWVAR 20
7805: PUSH
7806: LD_VAR 0 2
7810: PPUSH
7811: CALL_OW 255
7815: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7816: LD_ADDR_OWVAR 21
7820: PUSH
7821: LD_VAR 0 2
7825: PPUSH
7826: CALL_OW 248
7830: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7831: LD_INT 0
7833: PPUSH
7834: LD_INT 1
7836: PPUSH
7837: LD_VAR 0 1
7841: PPUSH
7842: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7846: LD_ADDR_VAR 0 5
7850: PUSH
7851: LD_VAR 0 2
7855: PPUSH
7856: CALL_OW 254
7860: PUSH
7861: LD_INT 3
7863: MINUS
7864: ST_TO_ADDR
// if dir < 0 then
7865: LD_VAR 0 5
7869: PUSH
7870: LD_INT 0
7872: LESS
7873: IFFALSE 7889
// dir := 6 + dir ;
7875: LD_ADDR_VAR 0 5
7879: PUSH
7880: LD_INT 6
7882: PUSH
7883: LD_VAR 0 5
7887: PLUS
7888: ST_TO_ADDR
// un := CreateHuman ;
7889: LD_ADDR_VAR 0 4
7893: PUSH
7894: CALL_OW 44
7898: ST_TO_ADDR
// SetDir ( un , dir ) ;
7899: LD_VAR 0 4
7903: PPUSH
7904: LD_VAR 0 5
7908: PPUSH
7909: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7913: LD_VAR 0 4
7917: PPUSH
7918: LD_VAR 0 2
7922: PPUSH
7923: CALL_OW 52
// end ;
7927: LD_VAR 0 3
7931: RET
// export function PrepareDifficulty ; begin
7932: LD_INT 0
7934: PPUSH
// case Difficulty of 1 :
7935: LD_OWVAR 67
7939: PUSH
7940: LD_INT 1
7942: DOUBLE
7943: EQUAL
7944: IFTRUE 7948
7946: GO 7967
7948: POP
// begin RuSolMinLevel = 2 ;
7949: LD_ADDR_EXP 35
7953: PUSH
7954: LD_INT 2
7956: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7957: LD_ADDR_EXP 36
7961: PUSH
7962: LD_INT 3
7964: ST_TO_ADDR
// end ; 2 :
7965: GO 8028
7967: LD_INT 2
7969: DOUBLE
7970: EQUAL
7971: IFTRUE 7975
7973: GO 7994
7975: POP
// begin RuSolMinLevel = 3 ;
7976: LD_ADDR_EXP 35
7980: PUSH
7981: LD_INT 3
7983: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7984: LD_ADDR_EXP 36
7988: PUSH
7989: LD_INT 5
7991: ST_TO_ADDR
// end ; 3 .. 4 :
7992: GO 8028
7994: LD_INT 3
7996: DOUBLE
7997: GREATEREQUAL
7998: IFFALSE 8006
8000: LD_INT 4
8002: DOUBLE
8003: LESSEQUAL
8004: IFTRUE 8008
8006: GO 8027
8008: POP
// begin RuSolMinLevel = 4 ;
8009: LD_ADDR_EXP 35
8013: PUSH
8014: LD_INT 4
8016: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
8017: LD_ADDR_EXP 36
8021: PUSH
8022: LD_INT 6
8024: ST_TO_ADDR
// end ; end ;
8025: GO 8028
8027: POP
// end ;
8028: LD_VAR 0 1
8032: RET
// export function ShowQuery1 ; begin
8033: LD_INT 0
8035: PPUSH
// result := Query ( QKill ) ;
8036: LD_ADDR_VAR 0 1
8040: PUSH
8041: LD_STRING QKill
8043: PPUSH
8044: CALL_OW 97
8048: ST_TO_ADDR
// end ;
8049: LD_VAR 0 1
8053: RET
// export function ShowQuery2 ; begin
8054: LD_INT 0
8056: PPUSH
// result := Query ( QKill2 ) ;
8057: LD_ADDR_VAR 0 1
8061: PUSH
8062: LD_STRING QKill2
8064: PPUSH
8065: CALL_OW 97
8069: ST_TO_ADDR
// end ;
8070: LD_VAR 0 1
8074: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
8075: LD_INT 0
8077: PPUSH
8078: PPUSH
8079: PPUSH
8080: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
8081: LD_ADDR_VAR 0 7
8085: PUSH
8086: LD_INT 48
8088: PUSH
8089: LD_INT 49
8091: PUSH
8092: LD_INT 50
8094: PUSH
8095: LD_INT 20
8097: PUSH
8098: LD_INT 1
8100: PUSH
8101: LD_INT 51
8103: PUSH
8104: LD_INT 52
8106: PUSH
8107: LD_INT 69
8109: PUSH
8110: LD_INT 39
8112: PUSH
8113: LD_INT 34
8115: PUSH
8116: LD_INT 40
8118: PUSH
8119: LD_INT 53
8121: PUSH
8122: LD_INT 71
8124: PUSH
8125: LD_INT 57
8127: PUSH
8128: LD_INT 58
8130: PUSH
8131: LD_INT 44
8133: PUSH
8134: LD_INT 32
8136: PUSH
8137: LD_INT 27
8139: PUSH
8140: LD_INT 23
8142: PUSH
8143: LD_INT 33
8145: PUSH
8146: LD_INT 59
8148: PUSH
8149: LD_INT 54
8151: PUSH
8152: LD_INT 55
8154: PUSH
8155: LD_INT 56
8157: PUSH
8158: LD_INT 63
8160: PUSH
8161: LD_INT 64
8163: PUSH
8164: LD_INT 65
8166: PUSH
8167: LD_INT 30
8169: PUSH
8170: LD_INT 31
8172: PUSH
8173: LD_INT 21
8175: PUSH
8176: LD_INT 22
8178: PUSH
8179: LD_INT 25
8181: PUSH
8182: LD_INT 82
8184: PUSH
8185: LD_INT 83
8187: PUSH
8188: LD_INT 84
8190: PUSH
8191: LD_INT 85
8193: PUSH
8194: LD_INT 86
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: ST_TO_ADDR
// for i = 1 to list do
8236: LD_ADDR_VAR 0 5
8240: PUSH
8241: DOUBLE
8242: LD_INT 1
8244: DEC
8245: ST_TO_ADDR
8246: LD_VAR 0 7
8250: PUSH
8251: FOR_TO
8252: IFFALSE 8324
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
8254: LD_VAR 0 7
8258: PUSH
8259: LD_VAR 0 5
8263: ARRAY
8264: PPUSH
8265: LD_VAR 0 1
8269: PPUSH
8270: CALL_OW 321
8274: PUSH
8275: LD_INT 1
8277: EQUAL
8278: PUSH
8279: LD_VAR 0 7
8283: PUSH
8284: LD_VAR 0 5
8288: ARRAY
8289: PPUSH
8290: LD_VAR 0 3
8294: PPUSH
8295: CALL_OW 482
8299: AND
8300: IFFALSE 8322
// AddComResearch ( lab , list [ i ] ) ;
8302: LD_VAR 0 2
8306: PPUSH
8307: LD_VAR 0 7
8311: PUSH
8312: LD_VAR 0 5
8316: ARRAY
8317: PPUSH
8318: CALL_OW 184
8322: GO 8251
8324: POP
8325: POP
// end ;
8326: LD_VAR 0 4
8330: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8331: LD_INT 0
8333: PPUSH
8334: PPUSH
8335: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8336: LD_INT 22
8338: PUSH
8339: LD_VAR 0 1
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: LD_INT 21
8350: PUSH
8351: LD_INT 2
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 69
8366: PUSH
8367: LD_VAR 0 3
8371: LESSEQUAL
8372: IFFALSE 8480
// begin for i = 1 to vehCount do
8374: LD_ADDR_VAR 0 9
8378: PUSH
8379: DOUBLE
8380: LD_INT 1
8382: DEC
8383: ST_TO_ADDR
8384: LD_VAR 0 3
8388: PUSH
8389: FOR_TO
8390: IFFALSE 8478
// begin weapon := weaponTab [ i ] ;
8392: LD_ADDR_VAR 0 10
8396: PUSH
8397: LD_VAR 0 4
8401: PUSH
8402: LD_VAR 0 9
8406: ARRAY
8407: ST_TO_ADDR
// if weapon = ru_heavy_gun then
8408: LD_VAR 0 10
8412: PUSH
8413: LD_INT 46
8415: EQUAL
8416: IFFALSE 8447
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
8418: LD_VAR 0 2
8422: PPUSH
8423: LD_INT 24
8425: PPUSH
8426: LD_VAR 0 5
8430: PPUSH
8431: LD_VAR 0 6
8435: PPUSH
8436: LD_VAR 0 10
8440: PPUSH
8441: CALL_OW 185
8445: GO 8476
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8447: LD_VAR 0 2
8451: PPUSH
8452: LD_VAR 0 7
8456: PPUSH
8457: LD_VAR 0 5
8461: PPUSH
8462: LD_VAR 0 6
8466: PPUSH
8467: LD_VAR 0 10
8471: PPUSH
8472: CALL_OW 185
// end ;
8476: GO 8389
8478: POP
8479: POP
// end ; end ;
8480: LD_VAR 0 8
8484: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
8485: LD_INT 0
8487: PPUSH
8488: PPUSH
8489: PPUSH
8490: PPUSH
8491: PPUSH
8492: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
8493: LD_ADDR_VAR 0 8
8497: PUSH
8498: LD_VAR 0 2
8502: PPUSH
8503: CALL_OW 313
8507: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8508: LD_ADDR_VAR 0 9
8512: PUSH
8513: LD_VAR 0 3
8517: PPUSH
8518: LD_INT 22
8520: PUSH
8521: LD_VAR 0 1
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: LD_INT 25
8532: PUSH
8533: LD_INT 2
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PUSH
8540: LD_INT 24
8542: PUSH
8543: LD_INT 750
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PUSH
8550: LD_INT 3
8552: PUSH
8553: LD_INT 54
8555: PUSH
8556: EMPTY
8557: LIST
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: PPUSH
8569: CALL_OW 70
8573: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8574: LD_ADDR_VAR 0 6
8578: PUSH
8579: LD_VAR 0 3
8583: PPUSH
8584: LD_INT 22
8586: PUSH
8587: LD_VAR 0 1
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 21
8598: PUSH
8599: LD_INT 3
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: LD_INT 3
8608: PUSH
8609: LD_INT 24
8611: PUSH
8612: LD_INT 1000
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: LIST
8627: PUSH
8628: EMPTY
8629: LIST
8630: PPUSH
8631: CALL_OW 70
8635: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8636: LD_VAR 0 6
8640: NOT
8641: PUSH
8642: LD_INT 22
8644: PUSH
8645: LD_VAR 0 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 25
8656: PUSH
8657: LD_INT 2
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 24
8666: PUSH
8667: LD_INT 250
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: LIST
8678: PPUSH
8679: CALL_OW 69
8683: NOT
8684: AND
8685: IFFALSE 8689
// exit ;
8687: GO 8847
// if buildingsList and engineerOkInside then
8689: LD_VAR 0 6
8693: PUSH
8694: LD_VAR 0 8
8698: AND
8699: IFFALSE 8710
// ComExitBuilding ( engineerOkInside ) ;
8701: LD_VAR 0 8
8705: PPUSH
8706: CALL_OW 122
// if buildingsList and engineerOkOutside then
8710: LD_VAR 0 6
8714: PUSH
8715: LD_VAR 0 9
8719: AND
8720: IFFALSE 8740
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
8722: LD_VAR 0 9
8726: PPUSH
8727: LD_VAR 0 6
8731: PUSH
8732: LD_INT 1
8734: ARRAY
8735: PPUSH
8736: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8740: LD_VAR 0 6
8744: PUSH
8745: LD_INT 0
8747: EQUAL
8748: PUSH
8749: LD_VAR 0 4
8753: PUSH
8754: LD_INT 0
8756: EQUAL
8757: AND
8758: PUSH
8759: LD_VAR 0 9
8763: AND
8764: IFFALSE 8780
// ComEnterUnit ( engineerOkOutside , depot ) ;
8766: LD_VAR 0 9
8770: PPUSH
8771: LD_VAR 0 2
8775: PPUSH
8776: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8780: LD_VAR 0 9
8784: PUSH
8785: LD_VAR 0 6
8789: PUSH
8790: LD_INT 0
8792: EQUAL
8793: AND
8794: PUSH
8795: LD_VAR 0 4
8799: AND
8800: IFFALSE 8847
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8802: LD_VAR 0 9
8806: PPUSH
8807: LD_VAR 0 4
8811: PUSH
8812: LD_INT 1
8814: ARRAY
8815: PPUSH
8816: LD_VAR 0 4
8820: PUSH
8821: LD_INT 2
8823: ARRAY
8824: PPUSH
8825: LD_VAR 0 4
8829: PUSH
8830: LD_INT 3
8832: ARRAY
8833: PPUSH
8834: LD_VAR 0 4
8838: PUSH
8839: LD_INT 4
8841: ARRAY
8842: PPUSH
8843: CALL_OW 145
// end ;
8847: LD_VAR 0 5
8851: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8852: LD_INT 0
8854: PPUSH
8855: PPUSH
8856: PPUSH
8857: PPUSH
8858: PPUSH
8859: PPUSH
8860: PPUSH
8861: PPUSH
8862: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8863: LD_ADDR_VAR 0 6
8867: PUSH
8868: LD_INT 22
8870: PUSH
8871: LD_VAR 0 1
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 25
8882: PUSH
8883: LD_INT 4
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 23
8892: PUSH
8893: LD_INT 2
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 24
8902: PUSH
8903: LD_INT 251
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: PPUSH
8916: CALL_OW 69
8920: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8921: LD_ADDR_VAR 0 7
8925: PUSH
8926: LD_VAR 0 3
8930: PPUSH
8931: LD_INT 22
8933: PUSH
8934: LD_VAR 0 1
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 23
8945: PUSH
8946: LD_INT 2
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 25
8955: PUSH
8956: LD_INT 4
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: LD_INT 50
8965: PUSH
8966: EMPTY
8967: LIST
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: PPUSH
8975: CALL_OW 70
8979: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8980: LD_ADDR_VAR 0 10
8984: PUSH
8985: LD_VAR 0 3
8989: PPUSH
8990: LD_INT 22
8992: PUSH
8993: LD_VAR 0 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 21
9004: PUSH
9005: LD_INT 1
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: LD_INT 3
9014: PUSH
9015: LD_INT 25
9017: PUSH
9018: LD_INT 3
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 3
9031: PUSH
9032: LD_INT 24
9034: PUSH
9035: LD_INT 750
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: PPUSH
9052: CALL_OW 70
9056: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9057: LD_ADDR_VAR 0 11
9061: PUSH
9062: LD_VAR 0 2
9066: PPUSH
9067: LD_INT 22
9069: PUSH
9070: LD_VAR 0 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 21
9081: PUSH
9082: LD_INT 1
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: LD_INT 3
9091: PUSH
9092: LD_INT 25
9094: PUSH
9095: LD_INT 3
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 3
9108: PUSH
9109: LD_INT 24
9111: PUSH
9112: LD_INT 1000
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: PPUSH
9129: CALL_OW 70
9133: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
9134: LD_VAR 0 10
9138: NOT
9139: PUSH
9140: LD_VAR 0 11
9144: NOT
9145: AND
9146: PUSH
9147: LD_VAR 0 6
9151: NOT
9152: AND
9153: IFFALSE 9157
// exit ;
9155: GO 9363
// if damageUnits and sci_list then
9157: LD_VAR 0 10
9161: PUSH
9162: LD_VAR 0 6
9166: AND
9167: IFFALSE 9183
// ComMoveToArea ( damageUnits , healArea ) ;
9169: LD_VAR 0 10
9173: PPUSH
9174: LD_VAR 0 2
9178: PPUSH
9179: CALL_OW 113
// if unitsToHeal and sci_list then
9183: LD_VAR 0 11
9187: PUSH
9188: LD_VAR 0 6
9192: AND
9193: IFFALSE 9204
// ComExitBuilding ( sci_list ) ;
9195: LD_VAR 0 6
9199: PPUSH
9200: CALL_OW 122
// if unitsToHeal and sci_listOutside then
9204: LD_VAR 0 11
9208: PUSH
9209: LD_VAR 0 7
9213: AND
9214: IFFALSE 9234
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9216: LD_VAR 0 7
9220: PPUSH
9221: LD_VAR 0 11
9225: PUSH
9226: LD_INT 1
9228: ARRAY
9229: PPUSH
9230: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
9234: LD_VAR 0 10
9238: PUSH
9239: LD_INT 0
9241: EQUAL
9242: PUSH
9243: LD_VAR 0 11
9247: PUSH
9248: LD_INT 0
9250: EQUAL
9251: AND
9252: PUSH
9253: LD_VAR 0 7
9257: AND
9258: IFFALSE 9363
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9260: LD_ADDR_VAR 0 12
9264: PUSH
9265: LD_INT 22
9267: PUSH
9268: LD_VAR 0 1
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: LD_INT 21
9279: PUSH
9280: LD_INT 3
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 30
9289: PUSH
9290: LD_INT 8
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: PPUSH
9302: CALL_OW 69
9306: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
9307: LD_ADDR_VAR 0 13
9311: PUSH
9312: LD_INT 1
9314: PPUSH
9315: LD_VAR 0 12
9319: PPUSH
9320: CALL_OW 12
9324: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9325: LD_VAR 0 7
9329: PPUSH
9330: LD_INT 3
9332: PUSH
9333: LD_INT 60
9335: PUSH
9336: EMPTY
9337: LIST
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PPUSH
9343: CALL_OW 72
9347: PPUSH
9348: LD_VAR 0 12
9352: PUSH
9353: LD_VAR 0 13
9357: ARRAY
9358: PPUSH
9359: CALL_OW 120
// end ; end ;
9363: LD_VAR 0 5
9367: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
9368: LD_INT 0
9370: PPUSH
9371: PPUSH
9372: PPUSH
9373: PPUSH
9374: PPUSH
// tmp := [ ] ;
9375: LD_ADDR_VAR 0 6
9379: PUSH
9380: EMPTY
9381: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
9382: LD_ADDR_VAR 0 7
9386: PUSH
9387: LD_INT 22
9389: PUSH
9390: LD_VAR 0 1
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: LD_INT 30
9401: PUSH
9402: LD_INT 32
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 69
9417: ST_TO_ADDR
// if bunkers then
9418: LD_VAR 0 7
9422: IFFALSE 9492
// for i in bunkers do
9424: LD_ADDR_VAR 0 4
9428: PUSH
9429: LD_VAR 0 7
9433: PUSH
9434: FOR_IN
9435: IFFALSE 9490
// for j in UnitsInside ( i ) do
9437: LD_ADDR_VAR 0 5
9441: PUSH
9442: LD_VAR 0 4
9446: PPUSH
9447: CALL_OW 313
9451: PUSH
9452: FOR_IN
9453: IFFALSE 9486
// tmp := Replace ( tmp , tmp + 1 , j ) ;
9455: LD_ADDR_VAR 0 6
9459: PUSH
9460: LD_VAR 0 6
9464: PPUSH
9465: LD_VAR 0 6
9469: PUSH
9470: LD_INT 1
9472: PLUS
9473: PPUSH
9474: LD_VAR 0 5
9478: PPUSH
9479: CALL_OW 1
9483: ST_TO_ADDR
9484: GO 9452
9486: POP
9487: POP
9488: GO 9434
9490: POP
9491: POP
// if tmp then
9492: LD_VAR 0 6
9496: IFFALSE 9536
// begin ComExitBuilding ( tmp ) ;
9498: LD_VAR 0 6
9502: PPUSH
9503: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
9507: LD_VAR 0 6
9511: PPUSH
9512: LD_VAR 0 2
9516: PPUSH
9517: CALL_OW 250
9521: PPUSH
9522: LD_VAR 0 2
9526: PPUSH
9527: CALL_OW 251
9531: PPUSH
9532: CALL_OW 174
// end ; end ;
9536: LD_VAR 0 3
9540: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
9545: PPUSH
// enable ;
9546: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
9547: LD_ADDR_VAR 0 6
9551: PUSH
9552: LD_VAR 0 3
9556: PPUSH
9557: CALL_OW 435
9561: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9562: LD_ADDR_VAR 0 5
9566: PUSH
9567: LD_INT 22
9569: PUSH
9570: LD_VAR 0 1
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: LD_INT 34
9581: PUSH
9582: LD_VAR 0 2
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PPUSH
9595: CALL_OW 69
9599: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
9600: LD_VAR 0 5
9604: PUSH
9605: LD_VAR 0 3
9609: PPUSH
9610: CALL_OW 435
9614: AND
9615: PUSH
9616: LD_VAR 0 6
9620: AND
9621: IFFALSE 9654
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
9623: LD_VAR 0 5
9627: PUSH
9628: LD_INT 1
9630: ARRAY
9631: PPUSH
9632: LD_VAR 0 6
9636: PUSH
9637: LD_INT 1
9639: ARRAY
9640: PPUSH
9641: LD_VAR 0 6
9645: PUSH
9646: LD_INT 2
9648: ARRAY
9649: PPUSH
9650: CALL_OW 177
// end ;
9654: LD_VAR 0 4
9658: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
9659: LD_INT 0
9661: PPUSH
9662: PPUSH
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
9667: PPUSH
9668: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
9669: LD_ADDR_VAR 0 6
9673: PUSH
9674: LD_VAR 0 2
9678: PPUSH
9679: LD_INT 22
9681: PUSH
9682: LD_VAR 0 1
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 56
9693: PUSH
9694: EMPTY
9695: LIST
9696: PUSH
9697: LD_INT 24
9699: PUSH
9700: LD_INT 700
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 3
9709: PUSH
9710: LD_INT 60
9712: PUSH
9713: EMPTY
9714: LIST
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: LD_INT 2
9722: PUSH
9723: LD_INT 25
9725: PUSH
9726: LD_INT 1
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 25
9735: PUSH
9736: LD_INT 5
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 25
9745: PUSH
9746: LD_INT 8
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 25
9755: PUSH
9756: LD_INT 9
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: PPUSH
9777: CALL_OW 70
9781: PUSH
9782: LD_EXP 48
9786: PUSH
9787: LD_EXP 49
9791: UNION
9792: DIFF
9793: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9794: LD_ADDR_VAR 0 7
9798: PUSH
9799: LD_VAR 0 2
9803: PPUSH
9804: LD_INT 22
9806: PUSH
9807: LD_VAR 0 1
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 30
9818: PUSH
9819: LD_INT 32
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 58
9828: PUSH
9829: EMPTY
9830: LIST
9831: PUSH
9832: LD_INT 24
9834: PUSH
9835: LD_INT 251
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: PPUSH
9848: CALL_OW 70
9852: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9853: LD_ADDR_VAR 0 9
9857: PUSH
9858: LD_VAR 0 2
9862: PPUSH
9863: LD_INT 22
9865: PUSH
9866: LD_VAR 0 1
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 2
9877: PUSH
9878: LD_INT 30
9880: PUSH
9881: LD_INT 4
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: LD_INT 30
9890: PUSH
9891: LD_INT 5
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: PUSH
9903: LD_INT 24
9905: PUSH
9906: LD_INT 251
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: PPUSH
9918: CALL_OW 70
9922: ST_TO_ADDR
// if barrackList then
9923: LD_VAR 0 9
9927: IFFALSE 10083
// begin if turretList = 0 then
9929: LD_VAR 0 7
9933: PUSH
9934: LD_INT 0
9936: EQUAL
9937: IFFALSE 9975
// begin if soldiersList then
9939: LD_VAR 0 6
9943: IFFALSE 9973
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9945: LD_VAR 0 6
9949: PPUSH
9950: LD_VAR 0 9
9954: PUSH
9955: LD_INT 1
9957: PPUSH
9958: LD_VAR 0 9
9962: PPUSH
9963: CALL_OW 12
9967: ARRAY
9968: PPUSH
9969: CALL_OW 120
// end else
9973: GO 10083
// begin for i in barrackList do
9975: LD_ADDR_VAR 0 4
9979: PUSH
9980: LD_VAR 0 9
9984: PUSH
9985: FOR_IN
9986: IFFALSE 10081
// begin if not turretList then
9988: LD_VAR 0 7
9992: NOT
9993: IFFALSE 9999
// exit ;
9995: POP
9996: POP
9997: GO 10083
// insideUnits = UnitsInside ( i ) ;
9999: LD_ADDR_VAR 0 10
10003: PUSH
10004: LD_VAR 0 4
10008: PPUSH
10009: CALL_OW 313
10013: ST_TO_ADDR
// if insideUnits then
10014: LD_VAR 0 10
10018: IFFALSE 10079
// begin tmp := insideUnits [ 1 ] ;
10020: LD_ADDR_VAR 0 8
10024: PUSH
10025: LD_VAR 0 10
10029: PUSH
10030: LD_INT 1
10032: ARRAY
10033: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
10034: LD_VAR 0 8
10038: PPUSH
10039: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
10043: LD_VAR 0 8
10047: PPUSH
10048: LD_VAR 0 7
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
10061: LD_ADDR_VAR 0 7
10065: PUSH
10066: LD_VAR 0 7
10070: PPUSH
10071: LD_INT 1
10073: PPUSH
10074: CALL_OW 3
10078: ST_TO_ADDR
// end ; end ;
10079: GO 9985
10081: POP
10082: POP
// end ; end ; end ;
10083: LD_VAR 0 3
10087: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
10088: LD_INT 0
10090: PPUSH
10091: PPUSH
10092: PPUSH
10093: PPUSH
10094: PPUSH
10095: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10096: LD_ADDR_VAR 0 8
10100: PUSH
10101: LD_INT 22
10103: PUSH
10104: LD_VAR 0 1
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PUSH
10113: LD_INT 21
10115: PUSH
10116: LD_INT 2
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 34
10125: PUSH
10126: LD_INT 52
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: PPUSH
10138: CALL_OW 69
10142: ST_TO_ADDR
// if not craneList then
10143: LD_VAR 0 8
10147: NOT
10148: IFFALSE 10152
// exit ;
10150: GO 10586
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10152: LD_ADDR_VAR 0 9
10156: PUSH
10157: LD_INT 22
10159: PUSH
10160: LD_VAR 0 1
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: LD_INT 21
10171: PUSH
10172: LD_INT 3
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 3
10181: PUSH
10182: LD_INT 24
10184: PUSH
10185: LD_INT 1000
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: LIST
10200: PUSH
10201: EMPTY
10202: LIST
10203: PPUSH
10204: CALL_OW 69
10208: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
10209: LD_VAR 0 9
10213: PUSH
10214: LD_VAR 0 8
10218: PPUSH
10219: LD_INT 24
10221: PUSH
10222: LD_INT 750
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PPUSH
10229: CALL_OW 72
10233: AND
10234: IFFALSE 10269
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
10236: LD_VAR 0 8
10240: PPUSH
10241: LD_INT 24
10243: PUSH
10244: LD_INT 750
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PPUSH
10251: CALL_OW 72
10255: PPUSH
10256: LD_VAR 0 9
10260: PUSH
10261: LD_INT 1
10263: ARRAY
10264: PPUSH
10265: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
10269: LD_VAR 0 8
10273: PPUSH
10274: LD_INT 3
10276: PUSH
10277: LD_INT 24
10279: PUSH
10280: LD_INT 750
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 72
10295: IFFALSE 10333
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10297: LD_VAR 0 8
10301: PPUSH
10302: LD_INT 3
10304: PUSH
10305: LD_INT 24
10307: PUSH
10308: LD_INT 750
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PPUSH
10319: CALL_OW 72
10323: PPUSH
10324: LD_VAR 0 2
10328: PPUSH
10329: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
10333: LD_VAR 0 8
10337: PUSH
10338: LD_VAR 0 9
10342: PUSH
10343: LD_INT 0
10345: EQUAL
10346: AND
10347: PUSH
10348: LD_VAR 0 3
10352: AND
10353: IFFALSE 10400
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10355: LD_VAR 0 8
10359: PPUSH
10360: LD_VAR 0 3
10364: PUSH
10365: LD_INT 1
10367: ARRAY
10368: PPUSH
10369: LD_VAR 0 3
10373: PUSH
10374: LD_INT 2
10376: ARRAY
10377: PPUSH
10378: LD_VAR 0 3
10382: PUSH
10383: LD_INT 3
10385: ARRAY
10386: PPUSH
10387: LD_VAR 0 3
10391: PUSH
10392: LD_INT 4
10394: ARRAY
10395: PPUSH
10396: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10400: LD_ADDR_VAR 0 7
10404: PUSH
10405: LD_VAR 0 2
10409: PPUSH
10410: LD_INT 22
10412: PUSH
10413: LD_VAR 0 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 21
10424: PUSH
10425: LD_INT 2
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 34
10434: PUSH
10435: LD_INT 52
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 3
10444: PUSH
10445: LD_INT 24
10447: PUSH
10448: LD_INT 750
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 70
10469: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: LD_INT 22
10482: PUSH
10483: LD_VAR 0 1
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 2
10494: PUSH
10495: LD_INT 30
10497: PUSH
10498: LD_INT 0
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 30
10507: PUSH
10508: LD_INT 1
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PPUSH
10524: CALL_OW 70
10528: ST_TO_ADDR
// if crane then
10529: LD_VAR 0 7
10533: IFFALSE 10586
// for i in crane do
10535: LD_ADDR_VAR 0 5
10539: PUSH
10540: LD_VAR 0 7
10544: PUSH
10545: FOR_IN
10546: IFFALSE 10584
// begin if dep then
10548: LD_VAR 0 6
10552: IFFALSE 10568
// ComMoveUnit ( i , dep ) ;
10554: LD_VAR 0 5
10558: PPUSH
10559: LD_VAR 0 6
10563: PPUSH
10564: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10568: LD_VAR 0 5
10572: PPUSH
10573: CALL_OW 311
10577: PPUSH
10578: CALL 82771 0 1
// end ;
10582: GO 10545
10584: POP
10585: POP
// end ;
10586: LD_VAR 0 4
10590: RET
// export function BuildBulldozer ; begin
10591: LD_INT 0
10593: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
10594: LD_INT 17
10596: PPUSH
10597: CALL_OW 302
10601: NOT
10602: PUSH
10603: LD_INT 17
10605: PPUSH
10606: CALL_OW 255
10610: PUSH
10611: LD_INT 3
10613: NONEQUAL
10614: OR
10615: IFFALSE 10619
// exit ;
10617: GO 10638
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
10619: LD_INT 17
10621: PPUSH
10622: LD_INT 24
10624: PPUSH
10625: LD_INT 1
10627: PPUSH
10628: LD_INT 1
10630: PPUSH
10631: LD_INT 53
10633: PPUSH
10634: CALL_OW 185
// end ;
10638: LD_VAR 0 1
10642: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
10643: LD_INT 0
10645: PPUSH
10646: PPUSH
10647: PPUSH
10648: PPUSH
10649: PPUSH
// if not bulldozer then
10650: LD_VAR 0 1
10654: NOT
10655: IFFALSE 10659
// exit ;
10657: GO 10941
// list := ListEnvironmentArea ( area ) ;
10659: LD_ADDR_VAR 0 5
10663: PUSH
10664: LD_VAR 0 2
10668: PPUSH
10669: CALL_OW 353
10673: ST_TO_ADDR
// tmp := [ ] ;
10674: LD_ADDR_VAR 0 6
10678: PUSH
10679: EMPTY
10680: ST_TO_ADDR
// for i = 1 to list do
10681: LD_ADDR_VAR 0 4
10685: PUSH
10686: DOUBLE
10687: LD_INT 1
10689: DEC
10690: ST_TO_ADDR
10691: LD_VAR 0 5
10695: PUSH
10696: FOR_TO
10697: IFFALSE 10795
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
10699: LD_VAR 0 5
10703: PUSH
10704: LD_VAR 0 4
10708: ARRAY
10709: PUSH
10710: LD_INT 1
10712: ARRAY
10713: PPUSH
10714: LD_VAR 0 5
10718: PUSH
10719: LD_VAR 0 4
10723: ARRAY
10724: PUSH
10725: LD_INT 2
10727: ARRAY
10728: PPUSH
10729: CALL_OW 554
10733: IFFALSE 10793
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10735: LD_ADDR_VAR 0 6
10739: PUSH
10740: LD_VAR 0 6
10744: PPUSH
10745: LD_VAR 0 6
10749: PUSH
10750: LD_INT 1
10752: PLUS
10753: PPUSH
10754: LD_VAR 0 5
10758: PUSH
10759: LD_VAR 0 4
10763: ARRAY
10764: PUSH
10765: LD_INT 1
10767: ARRAY
10768: PUSH
10769: LD_VAR 0 5
10773: PUSH
10774: LD_VAR 0 4
10778: ARRAY
10779: PUSH
10780: LD_INT 2
10782: ARRAY
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PPUSH
10788: CALL_OW 1
10792: ST_TO_ADDR
// end ;
10793: GO 10696
10795: POP
10796: POP
// ComStop ( bulldozer ) ;
10797: LD_VAR 0 1
10801: PPUSH
10802: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10806: LD_ADDR_VAR 0 7
10810: PUSH
10811: LD_VAR 0 1
10815: PPUSH
10816: CALL_OW 250
10820: PUSH
10821: LD_VAR 0 1
10825: PPUSH
10826: CALL_OW 251
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: ST_TO_ADDR
// for i = tmp downto 1 do
10835: LD_ADDR_VAR 0 4
10839: PUSH
10840: DOUBLE
10841: LD_VAR 0 6
10845: INC
10846: ST_TO_ADDR
10847: LD_INT 1
10849: PUSH
10850: FOR_DOWNTO
10851: IFFALSE 10939
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10853: LD_ADDR_VAR 0 7
10857: PUSH
10858: LD_VAR 0 7
10862: PUSH
10863: LD_INT 1
10865: ARRAY
10866: PPUSH
10867: LD_VAR 0 7
10871: PUSH
10872: LD_INT 2
10874: ARRAY
10875: PPUSH
10876: LD_VAR 0 6
10880: PPUSH
10881: CALL 11042 0 3
10885: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10886: LD_VAR 0 1
10890: PPUSH
10891: LD_VAR 0 7
10895: PUSH
10896: LD_INT 1
10898: ARRAY
10899: PPUSH
10900: LD_VAR 0 7
10904: PUSH
10905: LD_INT 2
10907: ARRAY
10908: PPUSH
10909: CALL 10946 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10913: LD_ADDR_VAR 0 6
10917: PUSH
10918: LD_VAR 0 6
10922: PPUSH
10923: LD_VAR 0 7
10927: PUSH
10928: LD_INT 3
10930: ARRAY
10931: PPUSH
10932: CALL_OW 3
10936: ST_TO_ADDR
// end ;
10937: GO 10850
10939: POP
10940: POP
// end ;
10941: LD_VAR 0 3
10945: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10946: LD_INT 0
10948: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10949: LD_VAR 0 2
10953: PPUSH
10954: LD_VAR 0 3
10958: PPUSH
10959: CALL_OW 351
10963: PUSH
10964: LD_VAR 0 2
10968: PPUSH
10969: LD_VAR 0 3
10973: PPUSH
10974: CALL_OW 554
10978: AND
10979: PUSH
10980: LD_VAR 0 2
10984: PPUSH
10985: LD_VAR 0 3
10989: PPUSH
10990: CALL_OW 488
10994: AND
10995: PUSH
10996: LD_VAR 0 2
11000: PPUSH
11001: LD_VAR 0 3
11005: PPUSH
11006: CALL_OW 428
11010: PUSH
11011: LD_INT 1
11013: NEG
11014: EQUAL
11015: AND
11016: IFFALSE 11037
// AddComMoveXY ( bulldozer , x , y ) ;
11018: LD_VAR 0 1
11022: PPUSH
11023: LD_VAR 0 2
11027: PPUSH
11028: LD_VAR 0 3
11032: PPUSH
11033: CALL_OW 171
// end ;
11037: LD_VAR 0 4
11041: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
11042: LD_INT 0
11044: PPUSH
11045: PPUSH
11046: PPUSH
11047: PPUSH
11048: PPUSH
11049: PPUSH
11050: PPUSH
// dist := 99999 ;
11051: LD_ADDR_VAR 0 6
11055: PUSH
11056: LD_INT 99999
11058: ST_TO_ADDR
// for i = 1 to list do
11059: LD_ADDR_VAR 0 5
11063: PUSH
11064: DOUBLE
11065: LD_INT 1
11067: DEC
11068: ST_TO_ADDR
11069: LD_VAR 0 3
11073: PUSH
11074: FOR_TO
11075: IFFALSE 11213
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
11077: LD_ADDR_VAR 0 7
11081: PUSH
11082: LD_VAR 0 1
11086: PPUSH
11087: LD_VAR 0 2
11091: PPUSH
11092: LD_VAR 0 3
11096: PUSH
11097: LD_VAR 0 5
11101: ARRAY
11102: PUSH
11103: LD_INT 1
11105: ARRAY
11106: PPUSH
11107: LD_VAR 0 3
11111: PUSH
11112: LD_VAR 0 5
11116: ARRAY
11117: PUSH
11118: LD_INT 2
11120: ARRAY
11121: PPUSH
11122: CALL_OW 298
11126: ST_TO_ADDR
// if d = 0 then
11127: LD_VAR 0 7
11131: PUSH
11132: LD_INT 0
11134: EQUAL
11135: IFFALSE 11139
// continue ;
11137: GO 11074
// if d < dist then
11139: LD_VAR 0 7
11143: PUSH
11144: LD_VAR 0 6
11148: LESS
11149: IFFALSE 11211
// begin _x := list [ i ] [ 1 ] ;
11151: LD_ADDR_VAR 0 8
11155: PUSH
11156: LD_VAR 0 3
11160: PUSH
11161: LD_VAR 0 5
11165: ARRAY
11166: PUSH
11167: LD_INT 1
11169: ARRAY
11170: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
11171: LD_ADDR_VAR 0 9
11175: PUSH
11176: LD_VAR 0 3
11180: PUSH
11181: LD_VAR 0 5
11185: ARRAY
11186: PUSH
11187: LD_INT 2
11189: ARRAY
11190: ST_TO_ADDR
// _i := i ;
11191: LD_ADDR_VAR 0 10
11195: PUSH
11196: LD_VAR 0 5
11200: ST_TO_ADDR
// dist := d ;
11201: LD_ADDR_VAR 0 6
11205: PUSH
11206: LD_VAR 0 7
11210: ST_TO_ADDR
// end ; end ;
11211: GO 11074
11213: POP
11214: POP
// result := [ _x , _y , _i , dist ] ;
11215: LD_ADDR_VAR 0 4
11219: PUSH
11220: LD_VAR 0 8
11224: PUSH
11225: LD_VAR 0 9
11229: PUSH
11230: LD_VAR 0 10
11234: PUSH
11235: LD_VAR 0 6
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: ST_TO_ADDR
// end ; end_of_file
11246: LD_VAR 0 4
11250: RET
// export function Action ; begin
11251: LD_INT 0
11253: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
11254: LD_INT 66
11256: PPUSH
11257: LD_INT 4
11259: PPUSH
11260: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11264: LD_INT 22
11266: PUSH
11267: LD_INT 1
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: LD_INT 25
11276: PUSH
11277: LD_INT 2
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PPUSH
11288: CALL_OW 69
11292: PUSH
11293: LD_INT 0
11295: EQUAL
11296: IFFALSE 11310
// SetClass ( JMM , 2 ) ;
11298: LD_EXP 1
11302: PPUSH
11303: LD_INT 2
11305: PPUSH
11306: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11310: LD_STRING M1
11312: PPUSH
11313: CALL_OW 337
// case Difficulty of 1 :
11317: LD_OWVAR 67
11321: PUSH
11322: LD_INT 1
11324: DOUBLE
11325: EQUAL
11326: IFTRUE 11330
11328: GO 11340
11330: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11331: LD_STRING M1-1
11333: PPUSH
11334: CALL_OW 337
11338: GO 11395
11340: LD_INT 2
11342: DOUBLE
11343: EQUAL
11344: IFTRUE 11348
11346: GO 11358
11348: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11349: LD_STRING M1-2
11351: PPUSH
11352: CALL_OW 337
11356: GO 11395
11358: LD_INT 3
11360: DOUBLE
11361: EQUAL
11362: IFTRUE 11366
11364: GO 11376
11366: POP
// ChangeMissionObjectives ( M1-3 ) ; 4 :
11367: LD_STRING M1-3
11369: PPUSH
11370: CALL_OW 337
11374: GO 11395
11376: LD_INT 4
11378: DOUBLE
11379: EQUAL
11380: IFTRUE 11384
11382: GO 11394
11384: POP
// ChangeMissionObjectives ( M1-4 ) ; end ;
11385: LD_STRING M1-4
11387: PPUSH
11388: CALL_OW 337
11392: GO 11395
11394: POP
// ChangeMissionObjectives ( M1cont ) ;
11395: LD_STRING M1cont
11397: PPUSH
11398: CALL_OW 337
// SaveForQuickRestart ;
11402: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
11406: LD_INT 525
11408: PPUSH
11409: LD_INT 700
11411: PPUSH
11412: CALL_OW 12
11416: PPUSH
11417: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
11421: LD_INT 5
11423: PPUSH
11424: LD_INT 82
11426: PPUSH
11427: LD_INT 38
11429: PPUSH
11430: LD_INT 10
11432: PPUSH
11433: LD_INT 1
11435: PPUSH
11436: CALL_OW 56
// wait ( 0 0$14 ) ;
11440: LD_INT 490
11442: PPUSH
11443: CALL_OW 67
// firstCrateSpawn := true ;
11447: LD_ADDR_EXP 41
11451: PUSH
11452: LD_INT 1
11454: ST_TO_ADDR
// end ;
11455: LD_VAR 0 1
11459: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
11460: LD_EXP 41
11464: IFFALSE 11853
11466: GO 11468
11468: DISABLE
11469: LD_INT 0
11471: PPUSH
// begin if IsOk ( Lisa ) then
11472: LD_EXP 2
11476: PPUSH
11477: CALL_OW 302
11481: IFFALSE 11497
// Say ( Lisa , DR0-Lisa-1 ) else
11483: LD_EXP 2
11487: PPUSH
11488: LD_STRING DR0-Lisa-1
11490: PPUSH
11491: CALL_OW 88
11495: GO 11643
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11497: LD_INT 22
11499: PUSH
11500: LD_INT 1
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 21
11509: PUSH
11510: LD_INT 1
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: LD_INT 26
11519: PUSH
11520: LD_INT 1
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: PUSH
11527: LD_INT 2
11529: PUSH
11530: LD_INT 25
11532: PUSH
11533: LD_INT 1
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 25
11542: PUSH
11543: LD_INT 2
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 25
11552: PUSH
11553: LD_INT 3
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: LD_INT 25
11562: PUSH
11563: LD_INT 4
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: PPUSH
11583: CALL_OW 69
11587: PUSH
11588: LD_EXP 1
11592: PUSH
11593: LD_EXP 8
11597: PUSH
11598: LD_EXP 5
11602: PUSH
11603: LD_EXP 6
11607: PUSH
11608: LD_EXP 7
11612: PUSH
11613: LD_EXP 4
11617: PUSH
11618: LD_EXP 3
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: DIFF
11632: PPUSH
11633: LD_STRING DR0-Sol1-1
11635: PPUSH
11636: LD_STRING DR0-Sol1-1
11638: PPUSH
11639: CALL 7548 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11643: LD_ADDR_VAR 0 1
11647: PUSH
11648: LD_INT 22
11650: PUSH
11651: LD_INT 1
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 21
11660: PUSH
11661: LD_INT 1
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: LD_INT 26
11670: PUSH
11671: LD_INT 1
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: LD_INT 2
11680: PUSH
11681: LD_INT 25
11683: PUSH
11684: LD_INT 1
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 25
11693: PUSH
11694: LD_INT 2
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 25
11703: PUSH
11704: LD_INT 3
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 25
11713: PUSH
11714: LD_INT 4
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 69
11738: PUSH
11739: LD_EXP 1
11743: PUSH
11744: LD_EXP 8
11748: PUSH
11749: LD_EXP 5
11753: PUSH
11754: LD_EXP 2
11758: PUSH
11759: LD_EXP 6
11763: PUSH
11764: LD_EXP 7
11768: PUSH
11769: LD_EXP 4
11773: PUSH
11774: LD_EXP 3
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: DIFF
11789: PPUSH
11790: LD_STRING DR0-Sol2-1
11792: PPUSH
11793: LD_STRING DR0-Sol2-1
11795: PPUSH
11796: CALL 7548 0 3
11800: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11801: LD_EXP 4
11805: PPUSH
11806: CALL_OW 302
11810: IFFALSE 11824
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11812: LD_EXP 4
11816: PPUSH
11817: LD_STRING DR0-Cyrus-1
11819: PPUSH
11820: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11824: LD_EXP 2
11828: PPUSH
11829: CALL_OW 302
11833: PUSH
11834: LD_VAR 0 1
11838: OR
11839: IFFALSE 11853
// Say ( JMM , DR0-JMM-1 ) ;
11841: LD_EXP 1
11845: PPUSH
11846: LD_STRING DR0-JMM-1
11848: PPUSH
11849: CALL_OW 88
// end ;
11853: PPOPN 1
11855: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11856: LD_EXP 5
11860: PPUSH
11861: CALL_OW 302
11865: PUSH
11866: LD_INT 22
11868: PUSH
11869: LD_INT 1
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 25
11878: PUSH
11879: LD_INT 16
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PPUSH
11890: CALL_OW 69
11894: PUSH
11895: LD_INT 0
11897: GREATER
11898: AND
11899: PUSH
11900: LD_INT 1
11902: PPUSH
11903: CALL_OW 463
11907: NOT
11908: AND
11909: IFFALSE 12187
11911: GO 11913
11913: DISABLE
// begin DialogueOn ;
11914: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11918: LD_EXP 5
11922: PPUSH
11923: LD_STRING D10-Frank-1
11925: PPUSH
11926: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11930: LD_INT 22
11932: PUSH
11933: LD_INT 1
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 21
11942: PUSH
11943: LD_INT 1
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 2
11952: PUSH
11953: LD_INT 25
11955: PUSH
11956: LD_INT 1
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 25
11965: PUSH
11966: LD_INT 2
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 25
11975: PUSH
11976: LD_INT 3
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: LD_INT 25
11985: PUSH
11986: LD_INT 4
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: LIST
12004: PPUSH
12005: CALL_OW 69
12009: PUSH
12010: LD_EXP 1
12014: PUSH
12015: LD_EXP 5
12019: PUSH
12020: LD_EXP 2
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: LIST
12029: DIFF
12030: PPUSH
12031: LD_STRING D10-Sol1-1
12033: PPUSH
12034: LD_STRING D10-FSol1-1
12036: PPUSH
12037: CALL 7548 0 3
// Say ( Frank , D10-Frank-2 ) ;
12041: LD_EXP 5
12045: PPUSH
12046: LD_STRING D10-Frank-2
12048: PPUSH
12049: CALL_OW 88
// if IsOk ( Lisa ) then
12053: LD_EXP 2
12057: PPUSH
12058: CALL_OW 302
12062: IFFALSE 12078
// Say ( Lisa , D10-Lisa-2 ) else
12064: LD_EXP 2
12068: PPUSH
12069: LD_STRING D10-Lisa-2
12071: PPUSH
12072: CALL_OW 88
12076: GO 12183
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
12078: LD_INT 22
12080: PUSH
12081: LD_INT 1
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 21
12090: PUSH
12091: LD_INT 1
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 2
12100: PUSH
12101: LD_INT 25
12103: PUSH
12104: LD_INT 1
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 25
12113: PUSH
12114: LD_INT 2
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 25
12123: PUSH
12124: LD_INT 3
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 25
12133: PUSH
12134: LD_INT 4
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 69
12157: PUSH
12158: LD_EXP 1
12162: PUSH
12163: LD_EXP 5
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: DIFF
12172: PPUSH
12173: LD_STRING D10-Sol1-2
12175: PPUSH
12176: LD_STRING D10-FSol1-2
12178: PPUSH
12179: CALL 7548 0 3
// DialogueOff ;
12183: CALL_OW 7
// end ;
12187: END
// every 10 10$30 trigger not InBattle ( 1 ) do
12188: LD_INT 1
12190: PPUSH
12191: CALL_OW 463
12195: NOT
12196: IFFALSE 12479
12198: GO 12200
12200: DISABLE
// begin HarrisonSupport ;
12201: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
12205: LD_EXP 18
12209: PPUSH
12210: CALL_OW 310
12214: PPUSH
12215: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
12219: LD_EXP 18
12223: PPUSH
12224: LD_STRING DEng-Eng1-1
12226: PPUSH
12227: CALL_OW 88
// wait ( 1 1$0 ) ;
12231: LD_INT 2100
12233: PPUSH
12234: CALL_OW 67
// DialogueOn ;
12238: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12242: LD_EXP 15
12246: PPUSH
12247: LD_STRING DRem-Har-1
12249: PPUSH
12250: CALL_OW 94
// if contactWithRussian then
12254: LD_EXP 23
12258: IFFALSE 12274
// Say ( JMM , DRem-JMM-1 ) else
12260: LD_EXP 1
12264: PPUSH
12265: LD_STRING DRem-JMM-1
12267: PPUSH
12268: CALL_OW 88
12272: GO 12286
// Say ( JMM , DRem-JMM-1a ) ;
12274: LD_EXP 1
12278: PPUSH
12279: LD_STRING DRem-JMM-1a
12281: PPUSH
12282: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
12286: LD_EXP 15
12290: PPUSH
12291: LD_STRING DRem-Har-2
12293: PPUSH
12294: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12298: LD_STRING DenisInDelta
12300: PPUSH
12301: LD_INT 0
12303: PPUSH
12304: CALL_OW 30
12308: IFFALSE 12324
// Say ( JMM , DRem-JMM-2 ) else
12310: LD_EXP 1
12314: PPUSH
12315: LD_STRING DRem-JMM-2
12317: PPUSH
12318: CALL_OW 88
12322: GO 12336
// Say ( JMM , DRem-JMM-2a ) ;
12324: LD_EXP 1
12328: PPUSH
12329: LD_STRING DRem-JMM-2a
12331: PPUSH
12332: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
12336: LD_EXP 15
12340: PPUSH
12341: LD_STRING DRem-Har-3
12343: PPUSH
12344: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12348: LD_EXP 1
12352: PPUSH
12353: LD_STRING DRem-JMM-3
12355: PPUSH
12356: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12360: LD_EXP 15
12364: PPUSH
12365: LD_STRING DRem-Har-4
12367: PPUSH
12368: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12372: LD_STRING DenisInDelta
12374: PPUSH
12375: LD_INT 0
12377: PPUSH
12378: CALL_OW 30
12382: IFFALSE 12442
// begin Say ( JMM , DRem-JMM-4 ) ;
12384: LD_EXP 1
12388: PPUSH
12389: LD_STRING DRem-JMM-4
12391: PPUSH
12392: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12396: LD_EXP 15
12400: PPUSH
12401: LD_STRING DRem-Har-5
12403: PPUSH
12404: CALL_OW 94
// DialogueOff ;
12408: CALL_OW 7
// wait ( 4 4$00 ) ;
12412: LD_INT 8400
12414: PPUSH
12415: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
12419: LD_INT 35
12421: PPUSH
12422: CALL_OW 67
// until not InBattle ( 1 ) ;
12426: LD_INT 1
12428: PPUSH
12429: CALL_OW 463
12433: NOT
12434: IFFALSE 12419
// SpawnDenis ;
12436: CALL 12480 0 0
// end else
12440: GO 12479
// begin DialogueOff ;
12442: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12446: LD_INT 36
12448: PPUSH
12449: LD_INT 1
12451: PPUSH
12452: LD_INT 1
12454: PPUSH
12455: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12459: LD_INT 15
12461: PPUSH
12462: LD_INT 1
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12472: LD_STRING MR
12474: PPUSH
12475: CALL_OW 337
// end ; end ;
12479: END
// export function SpawnDenis ; var tmp ; begin
12480: LD_INT 0
12482: PPUSH
12483: PPUSH
// PrepareDenis ;
12484: CALL 2244 0 0
// if not Denis then
12488: LD_EXP 9
12492: NOT
12493: IFFALSE 12497
// exit ;
12495: GO 12718
// CenterNowOnUnits ( Denis ) ;
12497: LD_EXP 9
12501: PPUSH
12502: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
12506: LD_ADDR_VAR 0 2
12510: PUSH
12511: LD_INT 22
12513: PUSH
12514: LD_INT 1
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PPUSH
12521: CALL_OW 69
12525: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
12526: LD_EXP 9
12530: PPUSH
12531: LD_VAR 0 2
12535: PPUSH
12536: LD_EXP 9
12540: PPUSH
12541: CALL_OW 74
12545: PPUSH
12546: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
12550: LD_INT 35
12552: PPUSH
12553: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
12557: LD_INT 22
12559: PUSH
12560: LD_INT 1
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PUSH
12567: LD_INT 91
12569: PUSH
12570: LD_EXP 9
12574: PUSH
12575: LD_INT 10
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PPUSH
12587: CALL_OW 69
12591: IFFALSE 12550
// SetSide ( Denis , 1 ) ;
12593: LD_EXP 9
12597: PPUSH
12598: LD_INT 1
12600: PPUSH
12601: CALL_OW 235
// DialogueOn ;
12605: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12609: LD_EXP 9
12613: PPUSH
12614: LD_STRING DDen-Den-1
12616: PPUSH
12617: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12621: LD_EXP 1
12625: PPUSH
12626: LD_STRING DDen-JMM-1
12628: PPUSH
12629: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12633: LD_EXP 9
12637: PPUSH
12638: LD_STRING DDen-Den-2
12640: PPUSH
12641: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12645: LD_EXP 1
12649: PPUSH
12650: LD_STRING DDen-JMM-2
12652: PPUSH
12653: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12657: LD_EXP 9
12661: PPUSH
12662: LD_STRING DDen-Den-3
12664: PPUSH
12665: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12669: LD_EXP 1
12673: PPUSH
12674: LD_STRING DDen-JMM-3
12676: PPUSH
12677: CALL_OW 88
// DialogueOff ;
12681: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12685: LD_INT 36
12687: PPUSH
12688: LD_INT 1
12690: PPUSH
12691: LD_INT 1
12693: PPUSH
12694: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12698: LD_INT 15
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: LD_INT 1
12706: PPUSH
12707: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12711: LD_STRING MR
12713: PPUSH
12714: CALL_OW 337
// end ;
12718: LD_VAR 0 1
12722: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
12723: LD_INT 22
12725: PUSH
12726: LD_INT 1
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: LD_INT 30
12735: PUSH
12736: LD_INT 15
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PPUSH
12747: CALL_OW 69
12751: PUSH
12752: LD_EXP 9
12756: PPUSH
12757: CALL_OW 302
12761: AND
12762: PUSH
12763: LD_INT 1
12765: PPUSH
12766: CALL_OW 463
12770: NOT
12771: AND
12772: IFFALSE 12801
12774: GO 12776
12776: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12777: LD_EXP 9
12781: PPUSH
12782: LD_STRING DR1-Den-1
12784: PPUSH
12785: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12789: LD_EXP 1
12793: PPUSH
12794: LD_STRING DR1-JMM-1
12796: PPUSH
12797: CALL_OW 88
// end ;
12801: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12802: LD_INT 15
12804: PPUSH
12805: LD_INT 1
12807: PPUSH
12808: CALL_OW 321
12812: PUSH
12813: LD_INT 2
12815: EQUAL
12816: PUSH
12817: LD_EXP 9
12821: PPUSH
12822: CALL_OW 302
12826: AND
12827: PUSH
12828: LD_INT 1
12830: PPUSH
12831: CALL_OW 463
12835: NOT
12836: AND
12837: IFFALSE 13046
12839: GO 12841
12841: DISABLE
// begin DialogueOn ;
12842: CALL_OW 6
// if IsOK ( Denis ) then
12846: LD_EXP 9
12850: PPUSH
12851: CALL_OW 302
12855: IFFALSE 12871
// Say ( Denis , DR2-Den-1 ) else
12857: LD_EXP 9
12861: PPUSH
12862: LD_STRING DR2-Den-1
12864: PPUSH
12865: CALL_OW 88
12869: GO 12930
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12871: LD_INT 22
12873: PUSH
12874: LD_INT 1
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 21
12883: PUSH
12884: LD_INT 1
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: LD_INT 25
12893: PUSH
12894: LD_INT 4
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: LIST
12905: PPUSH
12906: CALL_OW 69
12910: PUSH
12911: LD_EXP 1
12915: PUSH
12916: EMPTY
12917: LIST
12918: DIFF
12919: PPUSH
12920: LD_STRING DR2-Sci1-1
12922: PPUSH
12923: LD_STRING DR2-FSci1-1
12925: PPUSH
12926: CALL 7548 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12930: LD_EXP 1
12934: PPUSH
12935: LD_STRING DR2-JMM-1
12937: PPUSH
12938: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12942: LD_INT 22
12944: PUSH
12945: LD_INT 1
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 21
12954: PUSH
12955: LD_INT 1
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 26
12964: PUSH
12965: LD_INT 1
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 23
12974: PUSH
12975: LD_INT 1
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: PPUSH
12988: CALL_OW 69
12992: PUSH
12993: LD_EXP 1
12997: PUSH
12998: LD_EXP 9
13002: PUSH
13003: LD_EXP 8
13007: PUSH
13008: LD_EXP 5
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: DIFF
13019: PPUSH
13020: LD_STRING DR2-Sol1-1
13022: PPUSH
13023: LD_STRING 
13025: PPUSH
13026: CALL 7548 0 3
// Say ( JMM , DR2-JMM-2 ) ;
13030: LD_EXP 1
13034: PPUSH
13035: LD_STRING DR2-JMM-2
13037: PPUSH
13038: CALL_OW 88
// DialogueOff ;
13042: CALL_OW 7
// end ;
13046: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
13047: LD_INT 22
13049: PUSH
13050: LD_INT 1
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 30
13059: PUSH
13060: LD_INT 36
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 69
13075: PUSH
13076: LD_INT 0
13078: EQUAL
13079: PUSH
13080: LD_INT 22
13082: PUSH
13083: LD_INT 1
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 21
13092: PUSH
13093: LD_INT 2
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: LD_INT 33
13102: PUSH
13103: LD_INT 2
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: LIST
13114: PPUSH
13115: CALL_OW 69
13119: PUSH
13120: LD_INT 0
13122: GREATER
13123: AND
13124: PUSH
13125: LD_EXP 24
13129: PUSH
13130: LD_INT 0
13132: EQUAL
13133: AND
13134: PUSH
13135: LD_INT 1
13137: PPUSH
13138: CALL_OW 463
13142: NOT
13143: AND
13144: IFFALSE 13281
13146: GO 13148
13148: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
13149: LD_INT 22
13151: PUSH
13152: LD_INT 1
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 21
13161: PUSH
13162: LD_INT 1
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 25
13171: PUSH
13172: LD_INT 3
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 26
13181: PUSH
13182: LD_INT 1
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: PPUSH
13195: CALL_OW 69
13199: PUSH
13200: LD_EXP 1
13204: PUSH
13205: LD_EXP 6
13209: PUSH
13210: LD_EXP 7
13214: PUSH
13215: LD_EXP 9
13219: PUSH
13220: LD_EXP 16
13224: PUSH
13225: LD_EXP 3
13229: PUSH
13230: LD_EXP 4
13234: PUSH
13235: LD_EXP 2
13239: PUSH
13240: LD_EXP 5
13244: PUSH
13245: LD_EXP 8
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: DIFF
13262: PPUSH
13263: LD_STRING D3a-Mech1-1
13265: PPUSH
13266: LD_STRING 
13268: PPUSH
13269: CALL 7548 0 3
// firstTower = 2 ;
13273: LD_ADDR_EXP 24
13277: PUSH
13278: LD_INT 2
13280: ST_TO_ADDR
// end ;
13281: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13282: LD_INT 22
13284: PUSH
13285: LD_INT 3
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 21
13294: PUSH
13295: LD_INT 3
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PPUSH
13306: CALL_OW 69
13310: PUSH
13311: LD_INT 0
13313: EQUAL
13314: IFFALSE 13445
13316: GO 13318
13318: DISABLE
13319: LD_INT 0
13321: PPUSH
// begin stop_talking := true ;
13322: LD_ADDR_OWVAR 56
13326: PUSH
13327: LD_INT 1
13329: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13330: LD_ADDR_VAR 0 1
13334: PUSH
13335: LD_INT 22
13337: PUSH
13338: LD_INT 1
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: PUSH
13345: LD_INT 21
13347: PUSH
13348: LD_INT 1
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 2
13357: PUSH
13358: LD_INT 25
13360: PUSH
13361: LD_INT 1
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: LD_INT 25
13370: PUSH
13371: LD_INT 2
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 25
13380: PUSH
13381: LD_INT 3
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 25
13390: PUSH
13391: LD_INT 4
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 69
13414: PUSH
13415: FOR_IN
13416: IFFALSE 13435
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
13418: LD_VAR 0 1
13422: PPUSH
13423: LD_INT 1
13425: PPUSH
13426: LD_INT 7500
13428: PPUSH
13429: CALL_OW 591
13433: GO 13415
13435: POP
13436: POP
// stop_talking := false ;
13437: LD_ADDR_OWVAR 56
13441: PUSH
13442: LD_INT 0
13444: ST_TO_ADDR
// end ;
13445: PPOPN 1
13447: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13448: LD_INT 22
13450: PUSH
13451: LD_INT 1
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 30
13460: PUSH
13461: LD_INT 36
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PPUSH
13472: CALL_OW 69
13476: PUSH
13477: LD_INT 22
13479: PUSH
13480: LD_INT 1
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 21
13489: PUSH
13490: LD_INT 2
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 33
13499: PUSH
13500: LD_INT 2
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: PPUSH
13512: CALL_OW 69
13516: AND
13517: PUSH
13518: CALL 14070 0 0
13522: AND
13523: PUSH
13524: LD_INT 1
13526: PPUSH
13527: CALL_OW 463
13531: NOT
13532: AND
13533: IFFALSE 14067
13535: GO 13537
13537: DISABLE
13538: LD_INT 0
13540: PPUSH
13541: PPUSH
13542: PPUSH
13543: PPUSH
13544: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: LD_INT 22
13552: PUSH
13553: LD_INT 1
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 30
13562: PUSH
13563: LD_INT 36
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PPUSH
13574: CALL_OW 69
13578: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13579: LD_ADDR_VAR 0 4
13583: PUSH
13584: LD_INT 22
13586: PUSH
13587: LD_INT 1
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 21
13596: PUSH
13597: LD_INT 2
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 33
13606: PUSH
13607: LD_INT 2
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: LIST
13618: PPUSH
13619: CALL_OW 69
13623: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13624: LD_ADDR_VAR 0 5
13628: PUSH
13629: EMPTY
13630: ST_TO_ADDR
// for i in tmpControlTowers do
13631: LD_ADDR_VAR 0 1
13635: PUSH
13636: LD_VAR 0 3
13640: PUSH
13641: FOR_IN
13642: IFFALSE 14065
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
13644: LD_EXP 1
13648: PPUSH
13649: CALL_OW 310
13653: PUSH
13654: LD_VAR 0 1
13658: EQUAL
13659: PUSH
13660: LD_EXP 1
13664: PPUSH
13665: CALL_OW 257
13669: PUSH
13670: LD_INT 3
13672: EQUAL
13673: AND
13674: IFFALSE 13808
// begin InGameOn ;
13676: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13680: LD_VAR 0 4
13684: PUSH
13685: LD_INT 1
13687: ARRAY
13688: PPUSH
13689: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13693: LD_EXP 1
13697: PPUSH
13698: LD_STRING D4a-JMM-1
13700: PPUSH
13701: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13705: LD_VAR 0 4
13709: PUSH
13710: LD_INT 1
13712: ARRAY
13713: PPUSH
13714: LD_EXP 1
13718: PPUSH
13719: CALL_OW 53
// wait ( 0 0$1 ) ;
13723: LD_INT 35
13725: PPUSH
13726: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13730: LD_VAR 0 4
13734: PUSH
13735: LD_INT 1
13737: ARRAY
13738: PPUSH
13739: LD_VAR 0 4
13743: PUSH
13744: LD_INT 1
13746: ARRAY
13747: PPUSH
13748: CALL_OW 250
13752: PUSH
13753: LD_INT 3
13755: PLUS
13756: PPUSH
13757: LD_VAR 0 4
13761: PUSH
13762: LD_INT 1
13764: ARRAY
13765: PPUSH
13766: CALL_OW 251
13770: PUSH
13771: LD_INT 2
13773: MINUS
13774: PPUSH
13775: CALL_OW 111
// wait ( 0 0$2 ) ;
13779: LD_INT 70
13781: PPUSH
13782: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13786: LD_EXP 1
13790: PPUSH
13791: LD_STRING D4b-JMM-1
13793: PPUSH
13794: CALL_OW 88
// InGameOff ;
13798: CALL_OW 9
// exit ;
13802: POP
13803: POP
13804: GO 14067
// end else
13806: GO 14063
// begin InGameOn ;
13808: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13812: LD_ADDR_VAR 0 5
13816: PUSH
13817: LD_VAR 0 1
13821: PPUSH
13822: CALL_OW 313
13826: PPUSH
13827: LD_INT 25
13829: PUSH
13830: LD_INT 3
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PPUSH
13837: CALL_OW 72
13841: ST_TO_ADDR
// if not tmpMechanicInside then
13842: LD_VAR 0 5
13846: NOT
13847: IFFALSE 13851
// continue ;
13849: GO 13641
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13851: LD_VAR 0 5
13855: PUSH
13856: LD_INT 1
13858: ARRAY
13859: PPUSH
13860: CALL_OW 258
13864: PUSH
13865: LD_INT 1
13867: EQUAL
13868: IFFALSE 13888
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13870: LD_VAR 0 5
13874: PUSH
13875: LD_INT 1
13877: ARRAY
13878: PPUSH
13879: LD_STRING D4a-Mech1-1
13881: PPUSH
13882: CALL_OW 88
13886: GO 13904
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13888: LD_VAR 0 5
13892: PUSH
13893: LD_INT 1
13895: ARRAY
13896: PPUSH
13897: LD_STRING D4a-FMech1-1
13899: PPUSH
13900: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13904: LD_VAR 0 4
13908: PUSH
13909: LD_INT 1
13911: ARRAY
13912: PPUSH
13913: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13917: LD_VAR 0 4
13921: PUSH
13922: LD_INT 1
13924: ARRAY
13925: PPUSH
13926: LD_VAR 0 5
13930: PUSH
13931: LD_INT 1
13933: ARRAY
13934: PPUSH
13935: CALL_OW 53
// wait ( 0 0$1 ) ;
13939: LD_INT 35
13941: PPUSH
13942: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13946: LD_VAR 0 4
13950: PUSH
13951: LD_INT 1
13953: ARRAY
13954: PPUSH
13955: LD_VAR 0 4
13959: PUSH
13960: LD_INT 1
13962: ARRAY
13963: PPUSH
13964: CALL_OW 250
13968: PUSH
13969: LD_INT 3
13971: PLUS
13972: PPUSH
13973: LD_VAR 0 4
13977: PUSH
13978: LD_INT 1
13980: ARRAY
13981: PPUSH
13982: CALL_OW 251
13986: PUSH
13987: LD_INT 2
13989: MINUS
13990: PPUSH
13991: CALL_OW 111
// wait ( 0 0$2 ) ;
13995: LD_INT 70
13997: PPUSH
13998: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
14002: LD_VAR 0 5
14006: PUSH
14007: LD_INT 1
14009: ARRAY
14010: PPUSH
14011: CALL_OW 258
14015: PUSH
14016: LD_INT 1
14018: EQUAL
14019: IFFALSE 14039
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
14021: LD_VAR 0 5
14025: PUSH
14026: LD_INT 1
14028: ARRAY
14029: PPUSH
14030: LD_STRING D4b-Mech1-1
14032: PPUSH
14033: CALL_OW 88
14037: GO 14055
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
14039: LD_VAR 0 5
14043: PUSH
14044: LD_INT 1
14046: ARRAY
14047: PPUSH
14048: LD_STRING D4b-FMech1-1
14050: PPUSH
14051: CALL_OW 88
// InGameOff ;
14055: CALL_OW 9
// exit ;
14059: POP
14060: POP
14061: GO 14067
// end ; end ;
14063: GO 13641
14065: POP
14066: POP
// end ;
14067: PPOPN 5
14069: END
// function CheckMehInside ; var i , j , tmp ; begin
14070: LD_INT 0
14072: PPUSH
14073: PPUSH
14074: PPUSH
14075: PPUSH
// result := false ;
14076: LD_ADDR_VAR 0 1
14080: PUSH
14081: LD_INT 0
14083: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
14084: LD_ADDR_VAR 0 4
14088: PUSH
14089: LD_INT 22
14091: PUSH
14092: LD_INT 1
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 30
14101: PUSH
14102: LD_INT 36
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PPUSH
14113: CALL_OW 69
14117: ST_TO_ADDR
// if not tmp then
14118: LD_VAR 0 4
14122: NOT
14123: IFFALSE 14127
// exit ;
14125: GO 14191
// for i in tmp do
14127: LD_ADDR_VAR 0 2
14131: PUSH
14132: LD_VAR 0 4
14136: PUSH
14137: FOR_IN
14138: IFFALSE 14189
// for j in UnitsInside ( i ) do
14140: LD_ADDR_VAR 0 3
14144: PUSH
14145: LD_VAR 0 2
14149: PPUSH
14150: CALL_OW 313
14154: PUSH
14155: FOR_IN
14156: IFFALSE 14185
// if GetClass ( j ) = class_mechanic then
14158: LD_VAR 0 3
14162: PPUSH
14163: CALL_OW 257
14167: PUSH
14168: LD_INT 3
14170: EQUAL
14171: IFFALSE 14183
// begin result := true ;
14173: LD_ADDR_VAR 0 1
14177: PUSH
14178: LD_INT 1
14180: ST_TO_ADDR
// break ;
14181: GO 14185
// end ;
14183: GO 14155
14185: POP
14186: POP
14187: GO 14137
14189: POP
14190: POP
// end ;
14191: LD_VAR 0 1
14195: RET
// every 12 12$0 do
14196: GO 14198
14198: DISABLE
// begin repeat wait ( 0 0$1 ) ;
14199: LD_INT 35
14201: PPUSH
14202: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 5 5$00 ;
14206: LD_INT 1
14208: PPUSH
14209: CALL_OW 463
14213: NOT
14214: PUSH
14215: LD_INT 32
14217: PPUSH
14218: LD_INT 81
14220: PUSH
14221: LD_INT 1
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PPUSH
14228: CALL_OW 70
14232: NOT
14233: AND
14234: PUSH
14235: LD_EXP 27
14239: PUSH
14240: LD_INT 10500
14242: LESS
14243: OR
14244: IFFALSE 14199
// PrepareKurt ;
14246: CALL 16879 0 0
// end ;
14250: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
14251: LD_EXP 16
14255: PPUSH
14256: CALL_OW 302
14260: PUSH
14261: LD_EXP 16
14265: PPUSH
14266: CALL_OW 255
14270: PUSH
14271: LD_INT 1
14273: EQUAL
14274: AND
14275: PUSH
14276: LD_EXP 2
14280: AND
14281: IFFALSE 14446
14283: GO 14285
14285: DISABLE
// begin wait ( 0 0$50 ) ;
14286: LD_INT 1750
14288: PPUSH
14289: CALL_OW 67
// if not IsOk ( Joan ) then
14293: LD_EXP 16
14297: PPUSH
14298: CALL_OW 302
14302: NOT
14303: IFFALSE 14307
// exit ;
14305: GO 14446
// if IsOK ( Lisa ) then
14307: LD_EXP 2
14311: PPUSH
14312: CALL_OW 302
14316: IFFALSE 14446
// begin DialogueOn ;
14318: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14322: LD_EXP 2
14326: PPUSH
14327: LD_STRING D7-Lisa-1
14329: PPUSH
14330: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14334: LD_EXP 1
14338: PPUSH
14339: LD_STRING D7-JMM-1
14341: PPUSH
14342: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14346: LD_EXP 2
14350: PPUSH
14351: LD_STRING D7-Lisa-2
14353: PPUSH
14354: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14358: LD_EXP 1
14362: PPUSH
14363: LD_STRING D7-JMM-2
14365: PPUSH
14366: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14370: LD_EXP 2
14374: PPUSH
14375: LD_STRING D7-Lisa-3
14377: PPUSH
14378: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14382: LD_EXP 1
14386: PPUSH
14387: LD_STRING D7-JMM-3
14389: PPUSH
14390: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14394: LD_EXP 2
14398: PPUSH
14399: LD_STRING D7-Lisa-4
14401: PPUSH
14402: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14406: LD_EXP 1
14410: PPUSH
14411: LD_STRING D7-JMM-4
14413: PPUSH
14414: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14418: LD_EXP 1
14422: PPUSH
14423: LD_STRING D7-JMM-4a
14425: PPUSH
14426: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14430: LD_EXP 2
14434: PPUSH
14435: LD_STRING D7-Lisa-5
14437: PPUSH
14438: CALL_OW 88
// DialogueOff ;
14442: CALL_OW 7
// end ; end ;
14446: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
14447: LD_EXP 14
14451: PUSH
14452: LD_INT 22
14454: PUSH
14455: LD_INT 1
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: LD_INT 91
14464: PUSH
14465: LD_EXP 14
14469: PUSH
14470: LD_INT 10
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: LIST
14477: PUSH
14478: LD_INT 2
14480: PUSH
14481: LD_INT 25
14483: PUSH
14484: LD_INT 1
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 25
14493: PUSH
14494: LD_INT 2
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 25
14503: PUSH
14504: LD_INT 3
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: LD_INT 25
14513: PUSH
14514: LD_INT 4
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: PPUSH
14533: CALL_OW 69
14537: PUSH
14538: LD_INT 1
14540: GREATER
14541: AND
14542: IFFALSE 14559
14544: GO 14546
14546: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14547: LD_EXP 14
14551: PPUSH
14552: LD_STRING D5-Sol1-1
14554: PPUSH
14555: CALL_OW 88
14559: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14560: LD_INT 22
14562: PUSH
14563: LD_INT 1
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: LD_INT 33
14572: PUSH
14573: LD_INT 2
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PPUSH
14584: CALL_OW 69
14588: PUSH
14589: LD_INT 2
14591: GREATEREQUAL
14592: IFFALSE 14612
14594: GO 14596
14596: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14597: LD_STRING MRa
14599: PPUSH
14600: CALL_OW 337
// remoteVehiclesBuild := 1 ;
14604: LD_ADDR_EXP 29
14608: PUSH
14609: LD_INT 1
14611: ST_TO_ADDR
// end ;
14612: END
// every 2 2$00 do var i , last ;
14613: GO 14615
14615: DISABLE
14616: LD_INT 0
14618: PPUSH
14619: PPUSH
// begin last := 8 ;
14620: LD_ADDR_VAR 0 2
14624: PUSH
14625: LD_INT 8
14627: ST_TO_ADDR
// for i := 1 to last do
14628: LD_ADDR_VAR 0 1
14632: PUSH
14633: DOUBLE
14634: LD_INT 1
14636: DEC
14637: ST_TO_ADDR
14638: LD_VAR 0 2
14642: PUSH
14643: FOR_TO
14644: IFFALSE 14672
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
14646: LD_INT 6300
14648: PPUSH
14649: LD_INT 12600
14651: PPUSH
14652: CALL_OW 12
14656: PPUSH
14657: CALL_OW 67
// PrepareRandoms ( i ) ;
14661: LD_VAR 0 1
14665: PPUSH
14666: CALL 4240 0 1
// end ;
14670: GO 14643
14672: POP
14673: POP
// end ;
14674: PPOPN 2
14676: END
// every 5 5$20 do
14677: GO 14679
14679: DISABLE
// begin DialogueOn ;
14680: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14684: LD_EXP 10
14688: PPUSH
14689: LD_STRING D12a-Sci-1
14691: PPUSH
14692: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14696: LD_EXP 1
14700: PPUSH
14701: LD_STRING D12a-JMM-1
14703: PPUSH
14704: CALL_OW 88
// DialogueOff ;
14708: CALL_OW 7
// cratesStatus := 1 ;
14712: LD_ADDR_EXP 39
14716: PUSH
14717: LD_INT 1
14719: ST_TO_ADDR
// end ;
14720: END
// every 13 13$0 do
14721: GO 14723
14723: DISABLE
// begin DialogueOn ;
14724: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14728: LD_EXP 10
14732: PPUSH
14733: LD_STRING D12b-Sci-1
14735: PPUSH
14736: CALL_OW 94
// DialogueOff ;
14740: CALL_OW 7
// cratesStatus := 2 ;
14744: LD_ADDR_EXP 39
14748: PUSH
14749: LD_INT 2
14751: ST_TO_ADDR
// BuildBulldozer ;
14752: CALL 10591 0 0
// end ;
14756: END
// every 32 32$0 do
14757: GO 14759
14759: DISABLE
// begin DialogueOn ;
14760: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14764: LD_EXP 10
14768: PPUSH
14769: LD_STRING D12c-Sci-1
14771: PPUSH
14772: CALL_OW 94
// DialogueOff ;
14776: CALL_OW 7
// wait ( 3 3$0 ) ;
14780: LD_INT 6300
14782: PPUSH
14783: CALL_OW 67
// DialogueOn ;
14787: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14791: LD_EXP 10
14795: PPUSH
14796: LD_STRING D12d-Sci-1
14798: PPUSH
14799: CALL_OW 94
// DialogueOff ;
14803: CALL_OW 7
// cratesStatus = 1 ;
14807: LD_ADDR_EXP 39
14811: PUSH
14812: LD_INT 1
14814: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14815: CALL 21223 0 0
// wait ( 2 2$30 ) ;
14819: LD_INT 5250
14821: PPUSH
14822: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14826: LD_INT 35
14828: PPUSH
14829: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14833: LD_INT 1
14835: PPUSH
14836: CALL_OW 463
14840: NOT
14841: PUSH
14842: LD_INT 32
14844: PPUSH
14845: LD_INT 81
14847: PUSH
14848: LD_INT 1
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PPUSH
14855: CALL_OW 70
14859: NOT
14860: AND
14861: PUSH
14862: LD_EXP 27
14866: PUSH
14867: LD_INT 6300
14869: LESS
14870: OR
14871: IFFALSE 14826
// PrepareJoan ;
14873: CALL 3095 0 0
// end ;
14877: END
// every 42 42$0 do
14878: GO 14880
14880: DISABLE
// begin DialogueOn ;
14881: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14885: LD_EXP 10
14889: PPUSH
14890: LD_STRING D12e-Sci-1
14892: PPUSH
14893: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14897: LD_EXP 1
14901: PPUSH
14902: LD_STRING D12e-JMM-1
14904: PPUSH
14905: CALL_OW 88
// DialogueOff ;
14909: CALL_OW 7
// cratesStatus := 2 ;
14913: LD_ADDR_EXP 39
14917: PUSH
14918: LD_INT 2
14920: ST_TO_ADDR
// end ; end_of_file
14921: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14922: LD_VAR 0 1
14926: PUSH
14927: LD_INT 1
14929: EQUAL
14930: PUSH
14931: LD_VAR 0 2
14935: PUSH
14936: LD_INT 3
14938: EQUAL
14939: AND
14940: IFFALSE 14950
// contactWithRussian := 1 ;
14942: LD_ADDR_EXP 23
14946: PUSH
14947: LD_INT 1
14949: ST_TO_ADDR
// end ;
14950: PPOPN 2
14952: END
// on BuildingComplete ( building ) do var i ;
14953: LD_INT 0
14955: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14956: LD_VAR 0 1
14960: PPUSH
14961: CALL_OW 266
14965: PUSH
14966: LD_INT 36
14968: EQUAL
14969: PUSH
14970: LD_VAR 0 1
14974: PPUSH
14975: CALL_OW 255
14979: PUSH
14980: LD_INT 1
14982: EQUAL
14983: AND
14984: PUSH
14985: LD_EXP 24
14989: PUSH
14990: LD_INT 0
14992: EQUAL
14993: AND
14994: IFFALSE 15074
// begin firstTower = 1 ;
14996: LD_ADDR_EXP 24
15000: PUSH
15001: LD_INT 1
15003: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
15004: LD_INT 22
15006: PUSH
15007: LD_INT 1
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 21
15016: PUSH
15017: LD_INT 1
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 25
15026: PUSH
15027: LD_INT 3
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 26
15036: PUSH
15037: LD_INT 1
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: PPUSH
15050: CALL_OW 69
15054: PUSH
15055: LD_EXP 1
15059: PUSH
15060: EMPTY
15061: LIST
15062: DIFF
15063: PPUSH
15064: LD_STRING D3b-Mech1-1
15066: PPUSH
15067: LD_STRING D3b-Mech1-1
15069: PPUSH
15070: CALL 7548 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15074: LD_VAR 0 1
15078: PPUSH
15079: CALL_OW 266
15083: PUSH
15084: LD_INT 0
15086: EQUAL
15087: PUSH
15088: LD_VAR 0 1
15092: PPUSH
15093: CALL_OW 255
15097: PUSH
15098: LD_INT 1
15100: EQUAL
15101: AND
15102: IFFALSE 15116
// SetBName ( building , theta ) ;
15104: LD_VAR 0 1
15108: PPUSH
15109: LD_STRING theta
15111: PPUSH
15112: CALL_OW 500
// if GetSide ( building ) = 3 then
15116: LD_VAR 0 1
15120: PPUSH
15121: CALL_OW 255
15125: PUSH
15126: LD_INT 3
15128: EQUAL
15129: IFFALSE 15169
// begin for i := 1 to 4 do
15131: LD_ADDR_VAR 0 2
15135: PUSH
15136: DOUBLE
15137: LD_INT 1
15139: DEC
15140: ST_TO_ADDR
15141: LD_INT 4
15143: PUSH
15144: FOR_TO
15145: IFFALSE 15167
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15147: LD_ADDR_EXP 32
15151: PUSH
15152: LD_EXP 32
15156: PPUSH
15157: LD_INT 1
15159: PPUSH
15160: CALL_OW 3
15164: ST_TO_ADDR
15165: GO 15144
15167: POP
15168: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15169: LD_VAR 0 1
15173: PPUSH
15174: CALL_OW 255
15178: PUSH
15179: LD_INT 3
15181: EQUAL
15182: PUSH
15183: LD_VAR 0 1
15187: PPUSH
15188: CALL_OW 266
15192: PUSH
15193: LD_INT 0
15195: EQUAL
15196: PUSH
15197: LD_VAR 0 1
15201: PPUSH
15202: CALL_OW 266
15206: PUSH
15207: LD_INT 2
15209: EQUAL
15210: OR
15211: PUSH
15212: LD_VAR 0 1
15216: PPUSH
15217: CALL_OW 266
15221: PUSH
15222: LD_INT 4
15224: EQUAL
15225: OR
15226: PUSH
15227: EMPTY
15228: LIST
15229: AND
15230: IFFALSE 15241
// ComUpgrade ( building ) ;
15232: LD_VAR 0 1
15236: PPUSH
15237: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15241: LD_VAR 0 1
15245: PPUSH
15246: CALL_OW 255
15250: PUSH
15251: LD_INT 3
15253: EQUAL
15254: PUSH
15255: LD_VAR 0 1
15259: PPUSH
15260: CALL_OW 266
15264: PUSH
15265: LD_INT 32
15267: EQUAL
15268: AND
15269: IFFALSE 15310
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15271: LD_VAR 0 1
15275: PPUSH
15276: LD_INT 42
15278: PUSH
15279: LD_INT 43
15281: PUSH
15282: LD_INT 44
15284: PUSH
15285: LD_INT 46
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 1
15296: PPUSH
15297: LD_INT 4
15299: PPUSH
15300: CALL_OW 12
15304: ARRAY
15305: PPUSH
15306: CALL_OW 208
// end ;
15310: PPOPN 2
15312: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
15313: LD_VAR 0 1
15317: PPUSH
15318: CALL 37935 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
15322: LD_VAR 0 1
15326: PUSH
15327: LD_INT 22
15329: PUSH
15330: LD_INT 1
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 21
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 23
15349: PUSH
15350: LD_INT 1
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: LIST
15361: PPUSH
15362: CALL_OW 69
15366: IN
15367: IFFALSE 15383
// killCounter := killCounter + 1 ;
15369: LD_ADDR_EXP 46
15373: PUSH
15374: LD_EXP 46
15378: PUSH
15379: LD_INT 1
15381: PLUS
15382: ST_TO_ADDR
// if unit in ruAttackersInForest then
15383: LD_VAR 0 1
15387: PUSH
15388: LD_EXP 49
15392: IN
15393: IFFALSE 15411
// ruAttackersInForest := ruAttackersInForest diff unit ;
15395: LD_ADDR_EXP 49
15399: PUSH
15400: LD_EXP 49
15404: PUSH
15405: LD_VAR 0 1
15409: DIFF
15410: ST_TO_ADDR
// if unit in ruAttackers then
15411: LD_VAR 0 1
15415: PUSH
15416: LD_EXP 48
15420: IN
15421: IFFALSE 15439
// ruAttackers := ruAttackers diff unit ;
15423: LD_ADDR_EXP 48
15427: PUSH
15428: LD_EXP 48
15432: PUSH
15433: LD_VAR 0 1
15437: DIFF
15438: ST_TO_ADDR
// if unit = JMM then
15439: LD_VAR 0 1
15443: PUSH
15444: LD_EXP 1
15448: EQUAL
15449: IFFALSE 15458
// YouLost ( JMM ) ;
15451: LD_STRING JMM
15453: PPUSH
15454: CALL_OW 104
// if unit = Joan then
15458: LD_VAR 0 1
15462: PUSH
15463: LD_EXP 16
15467: EQUAL
15468: IFFALSE 15478
// JoanStatus := 0 ;
15470: LD_ADDR_EXP 17
15474: PUSH
15475: LD_INT 0
15477: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
15478: LD_VAR 0 1
15482: PPUSH
15483: CALL_OW 255
15487: PUSH
15488: LD_INT 1
15490: EQUAL
15491: PUSH
15492: LD_VAR 0 1
15496: PPUSH
15497: CALL_OW 247
15501: PUSH
15502: LD_INT 1
15504: EQUAL
15505: AND
15506: PUSH
15507: LD_VAR 0 1
15511: PPUSH
15512: CALL_OW 248
15516: PUSH
15517: LD_INT 1
15519: EQUAL
15520: AND
15521: IFFALSE 15537
// unitLost = unitLost + 1 ;
15523: LD_ADDR_EXP 31
15527: PUSH
15528: LD_EXP 31
15532: PUSH
15533: LD_INT 1
15535: PLUS
15536: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
15537: LD_VAR 0 1
15541: PPUSH
15542: CALL_OW 255
15546: PUSH
15547: LD_INT 3
15549: EQUAL
15550: PUSH
15551: LD_VAR 0 1
15555: PPUSH
15556: CALL_OW 247
15560: PUSH
15561: LD_INT 3
15563: EQUAL
15564: AND
15565: PUSH
15566: LD_VAR 0 1
15570: PPUSH
15571: CALL_OW 266
15575: PUSH
15576: LD_INT 4
15578: PUSH
15579: LD_INT 5
15581: PUSH
15582: LD_INT 32
15584: PUSH
15585: LD_INT 31
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: IN
15594: AND
15595: IFFALSE 15681
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15597: LD_ADDR_EXP 32
15601: PUSH
15602: LD_EXP 32
15606: PUSH
15607: LD_VAR 0 1
15611: PPUSH
15612: CALL_OW 266
15616: ADD
15617: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15618: LD_ADDR_EXP 32
15622: PUSH
15623: LD_EXP 32
15627: PUSH
15628: LD_VAR 0 1
15632: PPUSH
15633: CALL_OW 250
15637: ADD
15638: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15639: LD_ADDR_EXP 32
15643: PUSH
15644: LD_EXP 32
15648: PUSH
15649: LD_VAR 0 1
15653: PPUSH
15654: CALL_OW 251
15658: ADD
15659: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15660: LD_ADDR_EXP 32
15664: PUSH
15665: LD_EXP 32
15669: PUSH
15670: LD_VAR 0 1
15674: PPUSH
15675: CALL_OW 254
15679: ADD
15680: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15681: LD_EXP 47
15685: PUSH
15686: LD_VAR 0 1
15690: PPUSH
15691: CALL_OW 257
15695: PUSH
15696: LD_INT 3
15698: EQUAL
15699: AND
15700: PUSH
15701: LD_VAR 0 1
15705: PPUSH
15706: CALL_OW 255
15710: PUSH
15711: LD_INT 3
15713: EQUAL
15714: AND
15715: PUSH
15716: LD_INT 21
15718: PPUSH
15719: CALL_OW 302
15723: AND
15724: PUSH
15725: LD_INT 21
15727: PPUSH
15728: CALL_OW 255
15732: PUSH
15733: LD_INT 3
15735: EQUAL
15736: AND
15737: IFFALSE 15819
// begin ruMechCounter := ruMechCounter - 1 ;
15739: LD_ADDR_EXP 47
15743: PUSH
15744: LD_EXP 47
15748: PUSH
15749: LD_INT 1
15751: MINUS
15752: ST_TO_ADDR
// uc_side := 3 ;
15753: LD_ADDR_OWVAR 20
15757: PUSH
15758: LD_INT 3
15760: ST_TO_ADDR
// uc_nation := 3 ;
15761: LD_ADDR_OWVAR 21
15765: PUSH
15766: LD_INT 3
15768: ST_TO_ADDR
// hc_gallery :=  ;
15769: LD_ADDR_OWVAR 33
15773: PUSH
15774: LD_STRING 
15776: ST_TO_ADDR
// hc_name :=  ;
15777: LD_ADDR_OWVAR 26
15781: PUSH
15782: LD_STRING 
15784: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15785: LD_INT 0
15787: PPUSH
15788: LD_EXP 35
15792: PPUSH
15793: LD_EXP 36
15797: PPUSH
15798: CALL_OW 12
15802: PPUSH
15803: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15807: CALL_OW 44
15811: PPUSH
15812: LD_INT 21
15814: PPUSH
15815: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15819: LD_VAR 0 1
15823: PPUSH
15824: CALL_OW 255
15828: PUSH
15829: LD_INT 3
15831: EQUAL
15832: PUSH
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 264
15842: PUSH
15843: LD_INT 52
15845: EQUAL
15846: AND
15847: PUSH
15848: LD_INT 21
15850: PPUSH
15851: CALL_OW 302
15855: AND
15856: PUSH
15857: LD_INT 21
15859: PPUSH
15860: CALL_OW 255
15864: PUSH
15865: LD_INT 3
15867: EQUAL
15868: AND
15869: IFFALSE 15890
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15871: LD_INT 21
15873: PPUSH
15874: LD_INT 22
15876: PPUSH
15877: LD_INT 1
15879: PPUSH
15880: LD_INT 1
15882: PPUSH
15883: LD_INT 52
15885: PPUSH
15886: CALL_OW 125
// end ;
15890: PPOPN 1
15892: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15893: LD_INT 0
15895: PPUSH
15896: PPUSH
15897: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15898: LD_VAR 0 1
15902: PPUSH
15903: LD_VAR 0 2
15907: PPUSH
15908: CALL 37993 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15912: LD_VAR 0 1
15916: PPUSH
15917: CALL_OW 255
15921: PUSH
15922: LD_INT 3
15924: EQUAL
15925: PUSH
15926: LD_VAR 0 1
15930: PPUSH
15931: CALL_OW 264
15935: PUSH
15936: LD_INT 51
15938: PUSH
15939: LD_INT 52
15941: PUSH
15942: LD_INT 53
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: LIST
15949: IN
15950: NOT
15951: AND
15952: IFFALSE 15983
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15954: LD_ADDR_EXP 48
15958: PUSH
15959: LD_EXP 48
15963: PPUSH
15964: LD_EXP 48
15968: PUSH
15969: LD_INT 1
15971: PLUS
15972: PPUSH
15973: LD_VAR 0 1
15977: PPUSH
15978: CALL_OW 1
15982: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15983: LD_VAR 0 1
15987: PPUSH
15988: CALL_OW 264
15992: PUSH
15993: LD_INT 53
15995: EQUAL
15996: IFFALSE 16151
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15998: LD_VAR 0 1
16002: PPUSH
16003: LD_INT 60
16005: PPUSH
16006: LD_INT 85
16008: PPUSH
16009: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
16013: LD_VAR 0 1
16017: PPUSH
16018: LD_INT 43
16020: PPUSH
16021: LD_INT 69
16023: PPUSH
16024: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
16028: LD_VAR 0 1
16032: PPUSH
16033: LD_INT 37
16035: PPUSH
16036: LD_INT 46
16038: PPUSH
16039: CALL_OW 171
// wait ( 0 0$1 ) ;
16043: LD_INT 35
16045: PPUSH
16046: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16050: LD_INT 35
16052: PPUSH
16053: CALL_OW 67
// until not HasTask ( vehicle ) ;
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 314
16066: NOT
16067: IFFALSE 16050
// CutTreeInArea ( vehicle , cutTreeArea ) ;
16069: LD_VAR 0 1
16073: PPUSH
16074: LD_INT 34
16076: PPUSH
16077: CALL 10643 0 2
// repeat wait ( 0 0$1 ) ;
16081: LD_INT 35
16083: PPUSH
16084: CALL_OW 67
// until not HasTask ( vehicle ) ;
16088: LD_VAR 0 1
16092: PPUSH
16093: CALL_OW 314
16097: NOT
16098: IFFALSE 16081
// un := IsDrivenBy ( vehicle ) ;
16100: LD_ADDR_VAR 0 4
16104: PUSH
16105: LD_VAR 0 1
16109: PPUSH
16110: CALL_OW 311
16114: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
16115: LD_VAR 0 4
16119: PPUSH
16120: LD_INT 96
16122: PPUSH
16123: LD_INT 77
16125: PPUSH
16126: CALL_OW 171
// AddComExitVehicle ( un ) ;
16130: LD_VAR 0 4
16134: PPUSH
16135: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
16139: LD_VAR 0 4
16143: PPUSH
16144: LD_INT 17
16146: PPUSH
16147: CALL_OW 180
// end ; end ;
16151: PPOPN 5
16153: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16154: LD_VAR 0 1
16158: PPUSH
16159: CALL_OW 255
16163: PUSH
16164: LD_INT 3
16166: EQUAL
16167: IFFALSE 16198
// begin tamedApemans = tamedApemans + 1 ;
16169: LD_ADDR_EXP 33
16173: PUSH
16174: LD_EXP 33
16178: PUSH
16179: LD_INT 1
16181: PLUS
16182: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
16183: LD_VAR 0 1
16187: PPUSH
16188: LD_INT 106
16190: PPUSH
16191: LD_INT 85
16193: PPUSH
16194: CALL_OW 111
// end ; end ;
16198: PPOPN 2
16200: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
16201: LD_VAR 0 2
16205: PPUSH
16206: CALL_OW 255
16210: PUSH
16211: LD_INT 3
16213: EQUAL
16214: PUSH
16215: LD_VAR 0 1
16219: PPUSH
16220: CALL_OW 255
16224: PUSH
16225: LD_INT 3
16227: EQUAL
16228: AND
16229: PUSH
16230: LD_INT 21
16232: PPUSH
16233: CALL_OW 302
16237: AND
16238: IFFALSE 16252
// ComEnterUnit ( human , rufab ) ;
16240: LD_VAR 0 1
16244: PPUSH
16245: LD_INT 21
16247: PPUSH
16248: CALL_OW 120
// end ;
16252: PPOPN 4
16254: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
16255: LD_VAR 0 1
16259: PUSH
16260: LD_INT 21
16262: EQUAL
16263: PUSH
16264: LD_VAR 0 2
16268: PPUSH
16269: CALL_OW 255
16273: PUSH
16274: LD_INT 3
16276: EQUAL
16277: AND
16278: IFFALSE 16292
// SetLives ( human , 1000 ) ;
16280: LD_VAR 0 2
16284: PPUSH
16285: LD_INT 1000
16287: PPUSH
16288: CALL_OW 234
// end ;
16292: PPOPN 2
16294: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16295: LD_VAR 0 1
16299: PPUSH
16300: CALL 37977 0 1
// end ; end_of_file
16304: PPOPN 1
16306: END
// every 0 0$30 trigger cratesStatus = 1 do
16307: LD_EXP 39
16311: PUSH
16312: LD_INT 1
16314: EQUAL
16315: IFFALSE 16368
16317: GO 16319
16319: DISABLE
// begin enable ;
16320: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
16321: LD_INT 350
16323: PUSH
16324: LD_INT 875
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: LD_INT 1
16333: PPUSH
16334: LD_INT 2
16336: PPUSH
16337: CALL_OW 12
16341: ARRAY
16342: PPUSH
16343: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
16347: LD_INT 1
16349: PPUSH
16350: LD_INT 5
16352: PPUSH
16353: CALL_OW 12
16357: PPUSH
16358: LD_INT 7
16360: PPUSH
16361: LD_INT 1
16363: PPUSH
16364: CALL_OW 55
// end ;
16368: END
// every 1 1$0 trigger cratesStatus = 2 do
16369: LD_EXP 39
16373: PUSH
16374: LD_INT 2
16376: EQUAL
16377: IFFALSE 16460
16379: GO 16381
16381: DISABLE
// begin enable ;
16382: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16383: LD_INT 3150
16385: PUSH
16386: LD_INT 4550
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PUSH
16393: LD_INT 1
16395: PPUSH
16396: LD_INT 2
16398: PPUSH
16399: CALL_OW 12
16403: ARRAY
16404: PPUSH
16405: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
16409: LD_INT 2
16411: PUSH
16412: LD_INT 5
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 1
16421: PPUSH
16422: LD_INT 2
16424: PPUSH
16425: CALL_OW 12
16429: ARRAY
16430: PPUSH
16431: LD_INT 6
16433: PUSH
16434: LD_INT 7
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 1
16443: PPUSH
16444: LD_INT 2
16446: PPUSH
16447: CALL_OW 12
16451: ARRAY
16452: PPUSH
16453: LD_INT 1
16455: PPUSH
16456: CALL_OW 55
// end ;
16460: END
// every 0 0$30 + 0 0$10 do
16461: GO 16463
16463: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16464: LD_INT 4
16466: PUSH
16467: LD_INT 5
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 1
16476: PPUSH
16477: LD_INT 2
16479: PPUSH
16480: CALL_OW 12
16484: ARRAY
16485: PPUSH
16486: LD_INT 7
16488: PPUSH
16489: LD_INT 1
16491: PPUSH
16492: CALL_OW 55
// Wait ( 0 0$15 ) ;
16496: LD_INT 525
16498: PPUSH
16499: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16503: LD_INT 4
16505: PUSH
16506: LD_INT 5
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 1
16515: PPUSH
16516: LD_INT 2
16518: PPUSH
16519: CALL_OW 12
16523: ARRAY
16524: PPUSH
16525: LD_INT 7
16527: PPUSH
16528: LD_INT 1
16530: PPUSH
16531: CALL_OW 55
// Wait ( 0 0$20 ) ;
16535: LD_INT 700
16537: PPUSH
16538: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16542: LD_INT 4
16544: PUSH
16545: LD_INT 5
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 1
16554: PPUSH
16555: LD_INT 2
16557: PPUSH
16558: CALL_OW 12
16562: ARRAY
16563: PPUSH
16564: LD_INT 7
16566: PPUSH
16567: LD_INT 1
16569: PPUSH
16570: CALL_OW 55
// end ; end_of_file
16574: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16575: LD_EXP 25
16579: PUSH
16580: LD_INT 1
16582: EQUAL
16583: IFFALSE 16876
16585: GO 16587
16587: DISABLE
16588: LD_INT 0
16590: PPUSH
16591: PPUSH
16592: PPUSH
// begin enable ;
16593: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16594: LD_ADDR_VAR 0 2
16598: PUSH
16599: LD_INT 22
16601: PUSH
16602: LD_INT 1
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 21
16611: PUSH
16612: LD_INT 3
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 2
16621: PUSH
16622: LD_INT 30
16624: PUSH
16625: LD_INT 0
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 30
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: LIST
16651: PPUSH
16652: CALL_OW 69
16656: ST_TO_ADDR
// for i in tmp do
16657: LD_ADDR_VAR 0 1
16661: PUSH
16662: LD_VAR 0 2
16666: PUSH
16667: FOR_IN
16668: IFFALSE 16701
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16670: LD_ADDR_VAR 0 3
16674: PUSH
16675: LD_VAR 0 3
16679: PUSH
16680: LD_VAR 0 1
16684: PPUSH
16685: CALL_OW 274
16689: PPUSH
16690: LD_INT 1
16692: PPUSH
16693: CALL_OW 275
16697: PLUS
16698: ST_TO_ADDR
16699: GO 16667
16701: POP
16702: POP
// strings = [ ] ;
16703: LD_ADDR_EXP 28
16707: PUSH
16708: EMPTY
16709: ST_TO_ADDR
// if tmp = 0 then
16710: LD_VAR 0 2
16714: PUSH
16715: LD_INT 0
16717: EQUAL
16718: IFFALSE 16743
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16720: LD_ADDR_EXP 28
16724: PUSH
16725: LD_EXP 28
16729: PUSH
16730: LD_STRING #Am06-1
16732: PUSH
16733: LD_EXP 26
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: ADD
16742: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16743: LD_VAR 0 2
16747: PUSH
16748: LD_EXP 26
16752: PUSH
16753: LD_VAR 0 3
16757: GREATER
16758: AND
16759: IFFALSE 16790
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16761: LD_ADDR_EXP 28
16765: PUSH
16766: LD_EXP 28
16770: PUSH
16771: LD_STRING #Am06-1
16773: PUSH
16774: LD_EXP 26
16778: PUSH
16779: LD_VAR 0 3
16783: MINUS
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: ADD
16789: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16790: LD_VAR 0 2
16794: PUSH
16795: LD_EXP 26
16799: PUSH
16800: LD_VAR 0 3
16804: LESSEQUAL
16805: AND
16806: IFFALSE 16829
// strings = strings ^ [ #Am06-1 , 0 ] ;
16808: LD_ADDR_EXP 28
16812: PUSH
16813: LD_EXP 28
16817: PUSH
16818: LD_STRING #Am06-1
16820: PUSH
16821: LD_INT 0
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: ADD
16828: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16829: LD_ADDR_EXP 27
16833: PUSH
16834: LD_EXP 27
16838: PUSH
16839: LD_INT 35
16841: MINUS
16842: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16843: LD_ADDR_EXP 28
16847: PUSH
16848: LD_EXP 28
16852: PUSH
16853: LD_STRING #Am06-2
16855: PUSH
16856: LD_EXP 27
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: ADD
16865: ST_TO_ADDR
// display_strings = strings ;
16866: LD_ADDR_OWVAR 47
16870: PUSH
16871: LD_EXP 28
16875: ST_TO_ADDR
// end ; end_of_file
16876: PPOPN 3
16878: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 , forceJMM ; begin
16879: LD_INT 0
16881: PPUSH
16882: PPUSH
16883: PPUSH
16884: PPUSH
16885: PPUSH
16886: PPUSH
16887: PPUSH
16888: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16889: LD_ADDR_VAR 0 3
16893: PUSH
16894: LD_INT 22
16896: PUSH
16897: LD_INT 1
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: LD_INT 2
16906: PUSH
16907: LD_INT 30
16909: PUSH
16910: LD_INT 0
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 30
16919: PUSH
16920: LD_INT 1
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: LIST
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PPUSH
16936: CALL_OW 69
16940: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16941: LD_INT 35
16943: PPUSH
16944: CALL_OW 67
// until depot ;
16948: LD_VAR 0 3
16952: IFFALSE 16889
// forceJMM := false ;
16954: LD_ADDR_VAR 0 8
16958: PUSH
16959: LD_INT 0
16961: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16962: LD_INT 35
16964: PPUSH
16965: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ) ;
16969: LD_ADDR_VAR 0 4
16973: PUSH
16974: LD_INT 22
16976: PUSH
16977: LD_INT 1
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 91
16986: PUSH
16987: LD_VAR 0 3
16991: PUSH
16992: LD_INT 1
16994: ARRAY
16995: PUSH
16996: LD_INT 15
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 21
17006: PUSH
17007: LD_INT 1
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 2
17016: PUSH
17017: LD_INT 25
17019: PUSH
17020: LD_INT 1
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 25
17029: PUSH
17030: LD_INT 2
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 25
17039: PUSH
17040: LD_INT 3
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 25
17049: PUSH
17050: LD_INT 4
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 3
17066: PUSH
17067: LD_INT 54
17069: PUSH
17070: EMPTY
17071: LIST
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 3
17079: PUSH
17080: LD_INT 55
17082: PUSH
17083: EMPTY
17084: LIST
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: PPUSH
17098: CALL_OW 69
17102: PUSH
17103: LD_EXP 2
17107: PUSH
17108: LD_EXP 3
17112: PUSH
17113: LD_EXP 4
17117: PUSH
17118: LD_EXP 5
17122: PUSH
17123: LD_EXP 7
17127: PUSH
17128: LD_EXP 8
17132: PUSH
17133: LD_EXP 9
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: DIFF
17147: ST_TO_ADDR
// if timeToEnd < 10 10$00 then
17148: LD_EXP 27
17152: PUSH
17153: LD_INT 21000
17155: LESS
17156: IFFALSE 17168
// begin forceJMM := true ;
17158: LD_ADDR_VAR 0 8
17162: PUSH
17163: LD_INT 1
17165: ST_TO_ADDR
// break ;
17166: GO 17184
// end ; until tmp and not InBattle ( 1 ) ;
17168: LD_VAR 0 4
17172: PUSH
17173: LD_INT 1
17175: PPUSH
17176: CALL_OW 463
17180: NOT
17181: AND
17182: IFFALSE 16962
// if not forceJMM then
17184: LD_VAR 0 8
17188: NOT
17189: IFFALSE 17217
// tmp := tmp [ rand ( 1 , tmp ) ] else
17191: LD_ADDR_VAR 0 4
17195: PUSH
17196: LD_VAR 0 4
17200: PUSH
17201: LD_INT 1
17203: PPUSH
17204: LD_VAR 0 4
17208: PPUSH
17209: CALL_OW 12
17213: ARRAY
17214: ST_TO_ADDR
17215: GO 17227
// tmp := JMM ;
17217: LD_ADDR_VAR 0 4
17221: PUSH
17222: LD_EXP 1
17226: ST_TO_ADDR
// blockSpawn := 1 ;
17227: LD_ADDR_EXP 30
17231: PUSH
17232: LD_INT 1
17234: ST_TO_ADDR
// uc_side := 2 ;
17235: LD_ADDR_OWVAR 20
17239: PUSH
17240: LD_INT 2
17242: ST_TO_ADDR
// uc_nation := 2 ;
17243: LD_ADDR_OWVAR 21
17247: PUSH
17248: LD_INT 2
17250: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
17251: LD_ADDR_EXP 20
17255: PUSH
17256: LD_STRING Kurt
17258: PPUSH
17259: LD_INT 0
17261: PPUSH
17262: LD_STRING 
17264: PPUSH
17265: CALL 43219 0 3
17269: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17270: LD_EXP 20
17274: PPUSH
17275: LD_VAR 0 4
17279: PPUSH
17280: CALL_OW 250
17284: PPUSH
17285: LD_VAR 0 4
17289: PPUSH
17290: CALL_OW 251
17294: PPUSH
17295: LD_INT 5
17297: PPUSH
17298: LD_INT 1
17300: PPUSH
17301: CALL_OW 50
// InGameOn ;
17305: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17309: LD_EXP 20
17313: PPUSH
17314: CALL_OW 87
// wait ( 0 0$2 ) ;
17318: LD_INT 70
17320: PPUSH
17321: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17325: LD_EXP 20
17329: PPUSH
17330: LD_VAR 0 4
17334: PPUSH
17335: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
17339: LD_VAR 0 4
17343: PPUSH
17344: LD_EXP 20
17348: PPUSH
17349: CALL_OW 112
// wait ( 0 0$1 ) ;
17353: LD_INT 35
17355: PPUSH
17356: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
17360: LD_VAR 0 4
17364: PPUSH
17365: LD_EXP 20
17369: PPUSH
17370: CALL_OW 119
// DialogueOn ;
17374: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17378: LD_EXP 20
17382: PPUSH
17383: LD_STRING D2-Kurt-1
17385: PPUSH
17386: CALL_OW 88
// if tmp = JMM then
17390: LD_VAR 0 4
17394: PUSH
17395: LD_EXP 1
17399: EQUAL
17400: IFFALSE 17492
// begin Say ( JMM , D2-JMM-1 ) ;
17402: LD_EXP 1
17406: PPUSH
17407: LD_STRING D2-JMM-1
17409: PPUSH
17410: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17414: LD_EXP 20
17418: PPUSH
17419: LD_STRING D2-Kurt-2
17421: PPUSH
17422: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17426: LD_EXP 1
17430: PPUSH
17431: LD_STRING D2-JMM-2
17433: PPUSH
17434: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17438: LD_EXP 20
17442: PPUSH
17443: LD_STRING D2-Kurt-3
17445: PPUSH
17446: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17450: LD_EXP 1
17454: PPUSH
17455: LD_STRING D2-JMM-3
17457: PPUSH
17458: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17462: LD_EXP 20
17466: PPUSH
17467: LD_STRING D2-Kurt-4
17469: PPUSH
17470: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17474: LD_EXP 1
17478: PPUSH
17479: LD_STRING D2-JMM-4
17481: PPUSH
17482: CALL_OW 88
// DialogueOff ;
17486: CALL_OW 7
// end else
17490: GO 17720
// begin if GetSex ( tmp ) = 1 then
17492: LD_VAR 0 4
17496: PPUSH
17497: CALL_OW 258
17501: PUSH
17502: LD_INT 1
17504: EQUAL
17505: IFFALSE 17521
// Say ( tmp , D2-Sol1-1 ) else
17507: LD_VAR 0 4
17511: PPUSH
17512: LD_STRING D2-Sol1-1
17514: PPUSH
17515: CALL_OW 88
17519: GO 17533
// Say ( tmp , D2-FSol1-1 ) ;
17521: LD_VAR 0 4
17525: PPUSH
17526: LD_STRING D2-FSol1-1
17528: PPUSH
17529: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17533: LD_EXP 20
17537: PPUSH
17538: LD_STRING D2-Kurt-2
17540: PPUSH
17541: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17545: LD_VAR 0 4
17549: PPUSH
17550: CALL_OW 258
17554: PUSH
17555: LD_INT 1
17557: EQUAL
17558: IFFALSE 17574
// Say ( tmp , D2-Sol1-2 ) else
17560: LD_VAR 0 4
17564: PPUSH
17565: LD_STRING D2-Sol1-2
17567: PPUSH
17568: CALL_OW 88
17572: GO 17586
// Say ( tmp , D2-FSol1-2 ) ;
17574: LD_VAR 0 4
17578: PPUSH
17579: LD_STRING D2-FSol1-2
17581: PPUSH
17582: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17586: LD_EXP 20
17590: PPUSH
17591: LD_STRING D2-Kurt-3
17593: PPUSH
17594: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17598: LD_VAR 0 4
17602: PPUSH
17603: CALL_OW 258
17607: PUSH
17608: LD_INT 1
17610: EQUAL
17611: IFFALSE 17627
// Say ( tmp , D2-Sol1-3 ) else
17613: LD_VAR 0 4
17617: PPUSH
17618: LD_STRING D2-Sol1-3
17620: PPUSH
17621: CALL_OW 88
17625: GO 17639
// Say ( tmp , D2-FSol1-3 ) ;
17627: LD_VAR 0 4
17631: PPUSH
17632: LD_STRING D2-FSol1-3
17634: PPUSH
17635: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17639: LD_EXP 20
17643: PPUSH
17644: LD_STRING D2-Kurt-4
17646: PPUSH
17647: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17651: LD_VAR 0 4
17655: PPUSH
17656: CALL_OW 258
17660: PUSH
17661: LD_INT 1
17663: EQUAL
17664: IFFALSE 17692
// begin Say ( tmp , D2-Sol1-4 ) ;
17666: LD_VAR 0 4
17670: PPUSH
17671: LD_STRING D2-Sol1-4
17673: PPUSH
17674: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
17678: LD_VAR 0 4
17682: PPUSH
17683: LD_STRING D2-Sol1-5
17685: PPUSH
17686: CALL_OW 88
// end else
17690: GO 17716
// begin Say ( tmp , D2-FSol1-4 ) ;
17692: LD_VAR 0 4
17696: PPUSH
17697: LD_STRING D2-FSol1-4
17699: PPUSH
17700: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
17704: LD_VAR 0 4
17708: PPUSH
17709: LD_STRING D2-FSol1-5
17711: PPUSH
17712: CALL_OW 88
// end ; DialogueOff ;
17716: CALL_OW 7
// end ; dec := ShowQuery1 ;
17720: LD_ADDR_VAR 0 6
17724: PUSH
17725: CALL 8033 0 0
17729: ST_TO_ADDR
// if dec = 1 then
17730: LD_VAR 0 6
17734: PUSH
17735: LD_INT 1
17737: EQUAL
17738: IFFALSE 17800
// begin DialogueOn ;
17740: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17744: LD_EXP 20
17748: PPUSH
17749: LD_STRING D2a-Kurt-1
17751: PPUSH
17752: CALL_OW 88
// DialogueOff ;
17756: CALL_OW 7
// InGameOff ;
17760: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17764: LD_INT 1
17766: PPUSH
17767: LD_INT 2
17769: PPUSH
17770: LD_INT 2
17772: PPUSH
17773: LD_INT 1
17775: PPUSH
17776: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17780: LD_EXP 20
17784: PPUSH
17785: LD_INT 8
17787: PPUSH
17788: CALL_OW 113
// readyToEscape := 1 ;
17792: LD_ADDR_EXP 22
17796: PUSH
17797: LD_INT 1
17799: ST_TO_ADDR
// end ; if dec = 2 then
17800: LD_VAR 0 6
17804: PUSH
17805: LD_INT 2
17807: EQUAL
17808: IFFALSE 18276
// begin DialogueOn ;
17810: CALL_OW 6
// if tmp = JMM then
17814: LD_VAR 0 4
17818: PUSH
17819: LD_EXP 1
17823: EQUAL
17824: IFFALSE 17880
// begin Say ( JMM , D2b-JMM-1 ) ;
17826: LD_EXP 1
17830: PPUSH
17831: LD_STRING D2b-JMM-1
17833: PPUSH
17834: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17838: LD_EXP 20
17842: PPUSH
17843: LD_STRING D2b-Kurt-1
17845: PPUSH
17846: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17850: LD_EXP 1
17854: PPUSH
17855: LD_STRING D2b-JMM-2
17857: PPUSH
17858: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17862: LD_EXP 20
17866: PPUSH
17867: LD_STRING D2b-Kurt-2
17869: PPUSH
17870: CALL_OW 88
// DialogueOff ;
17874: CALL_OW 7
// end else
17878: GO 18031
// begin if GetSex ( tmp ) = 1 then
17880: LD_VAR 0 4
17884: PPUSH
17885: CALL_OW 258
17889: PUSH
17890: LD_INT 1
17892: EQUAL
17893: IFFALSE 17909
// Say ( tmp , D2b-Sol1-1 ) else
17895: LD_VAR 0 4
17899: PPUSH
17900: LD_STRING D2b-Sol1-1
17902: PPUSH
17903: CALL_OW 88
17907: GO 17921
// Say ( tmp , D2b-FSol1-1 ) ;
17909: LD_VAR 0 4
17913: PPUSH
17914: LD_STRING D2b-FSol1-1
17916: PPUSH
17917: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17921: LD_EXP 20
17925: PPUSH
17926: LD_STRING D2b-Kurt-1
17928: PPUSH
17929: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17933: LD_VAR 0 4
17937: PPUSH
17938: CALL_OW 258
17942: PUSH
17943: LD_INT 1
17945: EQUAL
17946: IFFALSE 17962
// Say ( tmp , D2b-Sol1-2 ) else
17948: LD_VAR 0 4
17952: PPUSH
17953: LD_STRING D2b-Sol1-2
17955: PPUSH
17956: CALL_OW 88
17960: GO 17974
// Say ( tmp , D2b-FSol1-2 ) ;
17962: LD_VAR 0 4
17966: PPUSH
17967: LD_STRING D2b-FSol1-2
17969: PPUSH
17970: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17974: LD_EXP 20
17978: PPUSH
17979: LD_STRING D2b-Kurt-2
17981: PPUSH
17982: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17986: LD_VAR 0 4
17990: PPUSH
17991: CALL_OW 258
17995: PUSH
17996: LD_INT 1
17998: EQUAL
17999: IFFALSE 18015
// Say ( tmp , D2c-Sol1-2 ) else
18001: LD_VAR 0 4
18005: PPUSH
18006: LD_STRING D2c-Sol1-2
18008: PPUSH
18009: CALL_OW 88
18013: GO 18027
// Say ( tmp , D2c-FSol1-2 ) ;
18015: LD_VAR 0 4
18019: PPUSH
18020: LD_STRING D2c-FSol1-2
18022: PPUSH
18023: CALL_OW 88
// DialogueOff ;
18027: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
18031: LD_ADDR_VAR 0 7
18035: PUSH
18036: CALL 8054 0 0
18040: ST_TO_ADDR
// if dec2 = 1 then
18041: LD_VAR 0 7
18045: PUSH
18046: LD_INT 1
18048: EQUAL
18049: IFFALSE 18111
// begin DialogueOn ;
18051: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18055: LD_EXP 20
18059: PPUSH
18060: LD_STRING D2a-Kurt-1
18062: PPUSH
18063: CALL_OW 88
// DialogueOff ;
18067: CALL_OW 7
// InGameOff ;
18071: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18075: LD_INT 1
18077: PPUSH
18078: LD_INT 2
18080: PPUSH
18081: LD_INT 2
18083: PPUSH
18084: LD_INT 1
18086: PPUSH
18087: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
18091: LD_EXP 20
18095: PPUSH
18096: LD_INT 8
18098: PPUSH
18099: CALL_OW 113
// readyToEscape := 1 ;
18103: LD_ADDR_EXP 22
18107: PUSH
18108: LD_INT 1
18110: ST_TO_ADDR
// end ; if dec2 = 2 then
18111: LD_VAR 0 7
18115: PUSH
18116: LD_INT 2
18118: EQUAL
18119: IFFALSE 18276
// begin if tmp = JMM then
18121: LD_VAR 0 4
18125: PUSH
18126: LD_EXP 1
18130: EQUAL
18131: IFFALSE 18191
// begin DialogueOn ;
18133: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18137: LD_EXP 1
18141: PPUSH
18142: LD_STRING D2c-JMM-1
18144: PPUSH
18145: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18149: LD_EXP 20
18153: PPUSH
18154: LD_STRING D2c-Kurt-1
18156: PPUSH
18157: CALL_OW 88
// DialogueOff ;
18161: CALL_OW 7
// InGameOff ;
18165: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18169: LD_EXP 20
18173: PPUSH
18174: LD_INT 8
18176: PPUSH
18177: CALL_OW 113
// readyToEscape := 1 ;
18181: LD_ADDR_EXP 22
18185: PUSH
18186: LD_INT 1
18188: ST_TO_ADDR
// end else
18189: GO 18276
// begin DialogueOn ;
18191: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18195: LD_VAR 0 4
18199: PPUSH
18200: CALL_OW 258
18204: PUSH
18205: LD_INT 1
18207: EQUAL
18208: IFFALSE 18224
// Say ( tmp , D2c-Sol1-1 ) else
18210: LD_VAR 0 4
18214: PPUSH
18215: LD_STRING D2c-Sol1-1
18217: PPUSH
18218: CALL_OW 88
18222: GO 18236
// Say ( tmp , D2c-FSol1-1 ) ;
18224: LD_VAR 0 4
18228: PPUSH
18229: LD_STRING D2c-FSol1-1
18231: PPUSH
18232: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18236: LD_EXP 20
18240: PPUSH
18241: LD_STRING D2c-Kurt-1
18243: PPUSH
18244: CALL_OW 88
// DialogueOff ;
18248: CALL_OW 7
// InGameOff ;
18252: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18256: LD_EXP 20
18260: PPUSH
18261: LD_INT 8
18263: PPUSH
18264: CALL_OW 113
// readyToEscape := 1 ;
18268: LD_ADDR_EXP 22
18272: PUSH
18273: LD_INT 1
18275: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18276: LD_VAR 0 6
18280: PUSH
18281: LD_INT 3
18283: EQUAL
18284: IFFALSE 18445
// begin DialogueOn ;
18286: CALL_OW 6
// if tmp = JMM then
18290: LD_VAR 0 4
18294: PUSH
18295: LD_EXP 1
18299: EQUAL
18300: IFFALSE 18360
// begin DialogueOn ;
18302: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18306: LD_EXP 1
18310: PPUSH
18311: LD_STRING D2c-JMM-1
18313: PPUSH
18314: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18318: LD_EXP 20
18322: PPUSH
18323: LD_STRING D2c-Kurt-1
18325: PPUSH
18326: CALL_OW 88
// DialogueOff ;
18330: CALL_OW 7
// InGameOff ;
18334: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18338: LD_EXP 20
18342: PPUSH
18343: LD_INT 8
18345: PPUSH
18346: CALL_OW 113
// readyToEscape := 1 ;
18350: LD_ADDR_EXP 22
18354: PUSH
18355: LD_INT 1
18357: ST_TO_ADDR
// end else
18358: GO 18445
// begin DialogueOn ;
18360: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18364: LD_VAR 0 4
18368: PPUSH
18369: CALL_OW 258
18373: PUSH
18374: LD_INT 1
18376: EQUAL
18377: IFFALSE 18393
// Say ( tmp , D2c-Sol1-1 ) else
18379: LD_VAR 0 4
18383: PPUSH
18384: LD_STRING D2c-Sol1-1
18386: PPUSH
18387: CALL_OW 88
18391: GO 18405
// Say ( tmp , D2c-FSol1-1 ) ;
18393: LD_VAR 0 4
18397: PPUSH
18398: LD_STRING D2c-FSol1-1
18400: PPUSH
18401: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18405: LD_EXP 20
18409: PPUSH
18410: LD_STRING D2c-Kurt-1
18412: PPUSH
18413: CALL_OW 88
// DialogueOff ;
18417: CALL_OW 7
// InGameOff ;
18421: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18425: LD_EXP 20
18429: PPUSH
18430: LD_INT 8
18432: PPUSH
18433: CALL_OW 113
// readyToEscape := 1 ;
18437: LD_ADDR_EXP 22
18441: PUSH
18442: LD_INT 1
18444: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
18445: LD_ADDR_EXP 30
18449: PUSH
18450: LD_INT 0
18452: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18453: LD_INT 35
18455: PPUSH
18456: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
18460: LD_EXP 20
18464: PPUSH
18465: LD_INT 8
18467: PPUSH
18468: CALL_OW 308
18472: PUSH
18473: LD_EXP 22
18477: AND
18478: PUSH
18479: LD_EXP 20
18483: PPUSH
18484: CALL_OW 301
18488: OR
18489: IFFALSE 18453
// if IsDead ( Kurt ) then
18491: LD_EXP 20
18495: PPUSH
18496: CALL_OW 301
18500: IFFALSE 18504
// exit ;
18502: GO 18559
// RemoveUnit ( Kurt ) ;
18504: LD_EXP 20
18508: PPUSH
18509: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
18513: LD_EXP 20
18517: PPUSH
18518: LD_STRING Kurt
18520: PPUSH
18521: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
18525: LD_INT 1
18527: PPUSH
18528: LD_INT 2
18530: PPUSH
18531: CALL_OW 81
18535: PUSH
18536: LD_INT 0
18538: EQUAL
18539: IFFALSE 18551
// kurtStatus = 1 else
18541: LD_ADDR_EXP 21
18545: PUSH
18546: LD_INT 1
18548: ST_TO_ADDR
18549: GO 18559
// kurtStatus = 2 ;
18551: LD_ADDR_EXP 21
18555: PUSH
18556: LD_INT 2
18558: ST_TO_ADDR
// end ; end_of_file
18559: LD_VAR 0 1
18563: RET
// every 0 0$2 do
18564: GO 18566
18566: DISABLE
// begin enable ;
18567: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
18568: LD_INT 3
18570: PPUSH
18571: LD_INT 2
18573: PPUSH
18574: LD_INT 10
18576: PPUSH
18577: LD_EXP 32
18581: PPUSH
18582: CALL 8485 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
18586: LD_INT 3
18588: PPUSH
18589: LD_INT 12
18591: PPUSH
18592: LD_EXP 32
18596: PPUSH
18597: CALL 10088 0 3
// if disableHealAI = 0 then
18601: LD_EXP 34
18605: PUSH
18606: LD_INT 0
18608: EQUAL
18609: IFFALSE 18630
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
18611: LD_INT 3
18613: PPUSH
18614: LD_INT 9
18616: PPUSH
18617: LD_INT 10
18619: PPUSH
18620: LD_INT 32
18622: PUSH
18623: EMPTY
18624: LIST
18625: PPUSH
18626: CALL 8852 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18630: LD_INT 3
18632: PPUSH
18633: LD_INT 51
18635: PPUSH
18636: LD_INT 6
18638: PPUSH
18639: CALL 9541 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
18643: LD_INT 2
18645: PPUSH
18646: CALL_OW 303
18650: PUSH
18651: LD_INT 2
18653: PPUSH
18654: CALL_OW 255
18658: PUSH
18659: LD_INT 1
18661: EQUAL
18662: OR
18663: IFFALSE 18677
// DefendDepot ( 3 , rudepo ) else
18665: LD_INT 3
18667: PPUSH
18668: LD_INT 2
18670: PPUSH
18671: CALL 9368 0 2
18675: GO 18687
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18677: LD_INT 3
18679: PPUSH
18680: LD_INT 10
18682: PPUSH
18683: CALL 9659 0 2
// end ;
18687: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
18688: LD_INT 22
18690: PUSH
18691: LD_INT 3
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 21
18700: PUSH
18701: LD_INT 2
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 55
18710: PUSH
18711: EMPTY
18712: LIST
18713: PUSH
18714: LD_INT 3
18716: PUSH
18717: LD_INT 34
18719: PUSH
18720: LD_INT 51
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: PPUSH
18737: CALL_OW 69
18741: PUSH
18742: LD_INT 0
18744: EQUAL
18745: PUSH
18746: LD_INT 21
18748: PPUSH
18749: CALL_OW 255
18753: PUSH
18754: LD_INT 3
18756: EQUAL
18757: AND
18758: PUSH
18759: LD_INT 21
18761: PPUSH
18762: CALL_OW 302
18766: AND
18767: PUSH
18768: LD_INT 2
18770: PPUSH
18771: CALL_OW 255
18775: PUSH
18776: LD_INT 3
18778: EQUAL
18779: AND
18780: PUSH
18781: LD_INT 2
18783: PPUSH
18784: CALL_OW 302
18788: AND
18789: PUSH
18790: LD_INT 21
18792: PPUSH
18793: CALL_OW 313
18797: AND
18798: PUSH
18799: LD_EXP 48
18803: PUSH
18804: LD_INT 4
18806: PUSH
18807: LD_INT 5
18809: PUSH
18810: LD_INT 6
18812: PUSH
18813: LD_INT 6
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: PUSH
18822: LD_OWVAR 67
18826: ARRAY
18827: LESS
18828: AND
18829: IFFALSE 19050
18831: GO 18833
18833: DISABLE
// begin enable ;
18834: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18835: LD_INT 2
18837: PPUSH
18838: CALL_OW 274
18842: PPUSH
18843: LD_INT 1
18845: PPUSH
18846: LD_INT 2000
18848: PPUSH
18849: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18853: LD_INT 3
18855: PPUSH
18856: LD_INT 21
18858: PPUSH
18859: LD_INT 4
18861: PUSH
18862: LD_INT 5
18864: PUSH
18865: LD_INT 6
18867: PUSH
18868: LD_INT 6
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: PUSH
18877: LD_OWVAR 67
18881: ARRAY
18882: PUSH
18883: LD_EXP 48
18887: MINUS
18888: PPUSH
18889: LD_INT 43
18891: PUSH
18892: LD_INT 43
18894: PUSH
18895: LD_INT 44
18897: PUSH
18898: LD_INT 44
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 43
18909: PUSH
18910: LD_INT 43
18912: PUSH
18913: LD_INT 43
18915: PUSH
18916: LD_INT 44
18918: PUSH
18919: LD_INT 44
18921: PUSH
18922: LD_INT 46
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 43
18935: PUSH
18936: LD_INT 43
18938: PUSH
18939: LD_INT 43
18941: PUSH
18942: LD_INT 44
18944: PUSH
18945: LD_INT 44
18947: PUSH
18948: LD_INT 46
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 43
18961: PUSH
18962: LD_INT 43
18964: PUSH
18965: LD_INT 44
18967: PUSH
18968: LD_INT 46
18970: PUSH
18971: LD_INT 46
18973: PUSH
18974: LD_INT 46
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: PUSH
18991: LD_OWVAR 67
18995: ARRAY
18996: PPUSH
18997: LD_INT 1
18999: PPUSH
19000: LD_INT 1
19002: PPUSH
19003: LD_INT 22
19005: PUSH
19006: LD_INT 22
19008: PUSH
19009: LD_INT 24
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 1
19018: PPUSH
19019: LD_INT 2
19021: PPUSH
19022: CALL_OW 12
19026: ARRAY
19027: PUSH
19028: LD_INT 24
19030: PUSH
19031: LD_INT 24
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: PUSH
19040: LD_OWVAR 67
19044: ARRAY
19045: PPUSH
19046: CALL 8331 0 7
// end ;
19050: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
19051: LD_INT 17
19053: PPUSH
19054: CALL_OW 255
19058: PUSH
19059: LD_INT 3
19061: EQUAL
19062: PUSH
19063: LD_INT 17
19065: PPUSH
19066: CALL_OW 302
19070: AND
19071: PUSH
19072: LD_INT 2
19074: PPUSH
19075: CALL_OW 255
19079: PUSH
19080: LD_INT 3
19082: EQUAL
19083: AND
19084: PUSH
19085: LD_INT 2
19087: PPUSH
19088: CALL_OW 302
19092: AND
19093: PUSH
19094: LD_EXP 48
19098: PUSH
19099: LD_INT 4
19101: PUSH
19102: LD_INT 5
19104: PUSH
19105: LD_INT 6
19107: PUSH
19108: LD_INT 7
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: PUSH
19117: LD_OWVAR 67
19121: ARRAY
19122: LESS
19123: AND
19124: IFFALSE 19172
19126: GO 19128
19128: DISABLE
// begin enable ;
19129: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19130: LD_INT 17
19132: PPUSH
19133: LD_INT 22
19135: PPUSH
19136: LD_INT 1
19138: PPUSH
19139: LD_INT 1
19141: PPUSH
19142: LD_INT 42
19144: PUSH
19145: LD_INT 43
19147: PUSH
19148: LD_INT 44
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 1
19158: PPUSH
19159: LD_INT 3
19161: PPUSH
19162: CALL_OW 12
19166: ARRAY
19167: PPUSH
19168: CALL_OW 185
// end ;
19172: END
// every 2 2$0 do var i , j ;
19173: GO 19175
19175: DISABLE
19176: LD_INT 0
19178: PPUSH
19179: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19180: LD_INT 14700
19182: PUSH
19183: LD_INT 33600
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 1
19192: PPUSH
19193: LD_INT 2
19195: PPUSH
19196: CALL_OW 12
19200: ARRAY
19201: PPUSH
19202: CALL_OW 67
// disableHealAI = 1 ;
19206: LD_ADDR_EXP 34
19210: PUSH
19211: LD_INT 1
19213: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19214: LD_ADDR_VAR 0 1
19218: PUSH
19219: LD_INT 22
19221: PUSH
19222: LD_INT 3
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 25
19231: PUSH
19232: LD_INT 4
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PPUSH
19243: CALL_OW 69
19247: PUSH
19248: FOR_IN
19249: IFFALSE 19262
// ComExitBuilding ( i ) ;
19251: LD_VAR 0 1
19255: PPUSH
19256: CALL_OW 122
19260: GO 19248
19262: POP
19263: POP
// wait ( 0 0$1 ) ;
19264: LD_INT 35
19266: PPUSH
19267: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19271: LD_INT 35
19273: PPUSH
19274: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19278: LD_ADDR_VAR 0 1
19282: PUSH
19283: LD_INT 22
19285: PUSH
19286: LD_INT 3
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 25
19295: PUSH
19296: LD_INT 4
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PPUSH
19307: CALL_OW 69
19311: PUSH
19312: FOR_IN
19313: IFFALSE 19390
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19315: LD_ADDR_VAR 0 2
19319: PUSH
19320: LD_INT 17
19322: PPUSH
19323: LD_INT 22
19325: PUSH
19326: LD_INT 0
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 25
19335: PUSH
19336: LD_INT 12
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PPUSH
19347: CALL_OW 70
19351: PUSH
19352: FOR_IN
19353: IFFALSE 19386
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19355: LD_VAR 0 1
19359: PPUSH
19360: LD_VAR 0 2
19364: PPUSH
19365: CALL_OW 250
19369: PPUSH
19370: LD_VAR 0 2
19374: PPUSH
19375: CALL_OW 251
19379: PPUSH
19380: CALL_OW 191
19384: GO 19352
19386: POP
19387: POP
19388: GO 19312
19390: POP
19391: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19392: LD_INT 22
19394: PUSH
19395: LD_INT 3
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 25
19404: PUSH
19405: LD_INT 4
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PPUSH
19416: CALL_OW 69
19420: PUSH
19421: LD_INT 0
19423: EQUAL
19424: PUSH
19425: LD_EXP 33
19429: PUSH
19430: LD_INT 6
19432: PUSH
19433: LD_INT 7
19435: PUSH
19436: LD_INT 8
19438: PUSH
19439: LD_INT 8
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: PUSH
19448: LD_OWVAR 67
19452: ARRAY
19453: GREATEREQUAL
19454: OR
19455: PUSH
19456: LD_INT 17
19458: PPUSH
19459: LD_INT 22
19461: PUSH
19462: LD_INT 0
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 25
19471: PUSH
19472: LD_INT 12
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PPUSH
19483: CALL_OW 70
19487: PUSH
19488: LD_INT 0
19490: EQUAL
19491: OR
19492: IFFALSE 19271
// disableHealAI = 0 ;
19494: LD_ADDR_EXP 34
19498: PUSH
19499: LD_INT 0
19501: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19502: LD_ADDR_VAR 0 1
19506: PUSH
19507: LD_INT 22
19509: PUSH
19510: LD_INT 3
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 25
19519: PUSH
19520: LD_INT 12
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PPUSH
19531: CALL_OW 69
19535: PUSH
19536: FOR_IN
19537: IFFALSE 19553
// SetClass ( i , 16 ) ;
19539: LD_VAR 0 1
19543: PPUSH
19544: LD_INT 16
19546: PPUSH
19547: CALL_OW 336
19551: GO 19536
19553: POP
19554: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19555: LD_ADDR_VAR 0 1
19559: PUSH
19560: LD_INT 22
19562: PUSH
19563: LD_INT 3
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 25
19572: PUSH
19573: LD_INT 4
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PPUSH
19584: CALL_OW 69
19588: PUSH
19589: FOR_IN
19590: IFFALSE 19606
// ComEnterUnit ( i , rulab ) ;
19592: LD_VAR 0 1
19596: PPUSH
19597: LD_INT 32
19599: PPUSH
19600: CALL_OW 120
19604: GO 19589
19606: POP
19607: POP
// end ; end_of_file
19608: PPOPN 2
19610: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19611: LD_EXP 27
19615: PUSH
19616: LD_INT 0
19618: LESSEQUAL
19619: IFFALSE 19773
19621: GO 19623
19623: DISABLE
19624: LD_INT 0
19626: PPUSH
19627: PPUSH
19628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19629: LD_ADDR_VAR 0 2
19633: PUSH
19634: LD_INT 22
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 21
19646: PUSH
19647: LD_INT 3
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 2
19656: PUSH
19657: LD_INT 30
19659: PUSH
19660: LD_INT 0
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 30
19669: PUSH
19670: LD_INT 1
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: LIST
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: LIST
19686: PPUSH
19687: CALL_OW 69
19691: ST_TO_ADDR
// for i in tmp do
19692: LD_ADDR_VAR 0 1
19696: PUSH
19697: LD_VAR 0 2
19701: PUSH
19702: FOR_IN
19703: IFFALSE 19736
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19705: LD_ADDR_VAR 0 3
19709: PUSH
19710: LD_VAR 0 3
19714: PUSH
19715: LD_VAR 0 1
19719: PPUSH
19720: CALL_OW 274
19724: PPUSH
19725: LD_INT 1
19727: PPUSH
19728: CALL_OW 275
19732: PLUS
19733: ST_TO_ADDR
19734: GO 19702
19736: POP
19737: POP
// if yourCrates >= needCrates then
19738: LD_VAR 0 3
19742: PUSH
19743: LD_EXP 26
19747: GREATEREQUAL
19748: IFFALSE 19766
// FinishMission ( yourCrates , needCrates ) else
19750: LD_VAR 0 3
19754: PPUSH
19755: LD_EXP 26
19759: PPUSH
19760: CALL 19776 0 2
19764: GO 19773
// YouLost ( matmin ) ;
19766: LD_STRING matmin
19768: PPUSH
19769: CALL_OW 104
// end ;
19773: PPOPN 3
19775: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
19776: LD_INT 0
19778: PPUSH
19779: PPUSH
19780: PPUSH
19781: PPUSH
// if killCounter >= 8 or killCounter >= UnitFilter ( arrivals , [ f_ok ] ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] , [ f_ok ] ] ) < 5 then
19782: LD_EXP 46
19786: PUSH
19787: LD_INT 8
19789: GREATEREQUAL
19790: PUSH
19791: LD_EXP 46
19795: PUSH
19796: LD_EXP 45
19800: PPUSH
19801: LD_INT 50
19803: PUSH
19804: EMPTY
19805: LIST
19806: PPUSH
19807: CALL_OW 72
19811: GREATEREQUAL
19812: OR
19813: PUSH
19814: LD_INT 22
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 21
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 23
19836: PUSH
19837: LD_INT 1
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 50
19846: PUSH
19847: EMPTY
19848: LIST
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: PPUSH
19856: CALL_OW 69
19860: PUSH
19861: LD_INT 5
19863: LESS
19864: OR
19865: IFFALSE 19876
// begin YouLost ( Troops ) ;
19867: LD_STRING Troops
19869: PPUSH
19870: CALL_OW 104
// exit ;
19874: GO 20833
// end ; if killCounter = 0 then
19876: LD_EXP 46
19880: PUSH
19881: LD_INT 0
19883: EQUAL
19884: IFFALSE 19893
// SetAchievement ( ACH_SURV ) ;
19886: LD_STRING ACH_SURV
19888: PPUSH
19889: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19893: LD_INT 22
19895: PUSH
19896: LD_INT 3
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 21
19905: PUSH
19906: LD_INT 3
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PPUSH
19917: CALL_OW 69
19921: PUSH
19922: LD_INT 0
19924: EQUAL
19925: IFFALSE 19941
// begin wait ( 3 ) ;
19927: LD_INT 3
19929: PPUSH
19930: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19934: LD_STRING ACH_BASEDESTROYER
19936: PPUSH
19937: CALL_OW 543
// end ; m1 := false ;
19941: LD_ADDR_VAR 0 4
19945: PUSH
19946: LD_INT 0
19948: ST_TO_ADDR
// m2 := false ;
19949: LD_ADDR_VAR 0 5
19953: PUSH
19954: LD_INT 0
19956: ST_TO_ADDR
// m3 := false ;
19957: LD_ADDR_VAR 0 6
19961: PUSH
19962: LD_INT 0
19964: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19965: LD_VAR 0 1
19969: PUSH
19970: LD_INT 100
19972: PUSH
19973: LD_INT 140
19975: PUSH
19976: LD_INT 180
19978: PUSH
19979: LD_INT 220
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: PUSH
19988: LD_OWVAR 67
19992: ARRAY
19993: PLUS
19994: PUSH
19995: LD_VAR 0 2
19999: GREATER
20000: IFFALSE 20032
// begin AddMedal ( cans , 1 ) ;
20002: LD_STRING cans
20004: PPUSH
20005: LD_INT 1
20007: PPUSH
20008: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
20012: LD_INT 1
20014: PPUSH
20015: LD_STRING 06_crates_1
20017: PPUSH
20018: CALL_OW 39
// m1 := true ;
20022: LD_ADDR_VAR 0 4
20026: PUSH
20027: LD_INT 1
20029: ST_TO_ADDR
// end else
20030: GO 20053
// begin AddMedal ( cans , - 1 ) ;
20032: LD_STRING cans
20034: PPUSH
20035: LD_INT 1
20037: NEG
20038: PPUSH
20039: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
20043: LD_INT 0
20045: PPUSH
20046: LD_STRING 06_crates_1
20048: PPUSH
20049: CALL_OW 39
// end ; if unitLost < 3 then
20053: LD_EXP 31
20057: PUSH
20058: LD_INT 3
20060: LESS
20061: IFFALSE 20083
// begin AddMedal ( people , 1 ) ;
20063: LD_STRING people
20065: PPUSH
20066: LD_INT 1
20068: PPUSH
20069: CALL_OW 101
// m2 := true ;
20073: LD_ADDR_VAR 0 5
20077: PUSH
20078: LD_INT 1
20080: ST_TO_ADDR
// end else
20081: GO 20094
// AddMedal ( people , - 1 ) ;
20083: LD_STRING people
20085: PPUSH
20086: LD_INT 1
20088: NEG
20089: PPUSH
20090: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
20094: LD_EXP 29
20098: PPUSH
20099: LD_STRING 06_remoteVehs_1
20101: PPUSH
20102: CALL_OW 39
// if remoteVehiclesBuild = 1 then
20106: LD_EXP 29
20110: PUSH
20111: LD_INT 1
20113: EQUAL
20114: IFFALSE 20136
// begin AddMedal ( remote , 1 ) ;
20116: LD_STRING remote
20118: PPUSH
20119: LD_INT 1
20121: PPUSH
20122: CALL_OW 101
// m3 := true ;
20126: LD_ADDR_VAR 0 6
20130: PUSH
20131: LD_INT 1
20133: ST_TO_ADDR
// end else
20134: GO 20176
// begin if GetTech ( 18 , 1 ) = state_enabled then
20136: LD_INT 18
20138: PPUSH
20139: LD_INT 1
20141: PPUSH
20142: CALL_OW 321
20146: PUSH
20147: LD_INT 1
20149: EQUAL
20150: IFFALSE 20165
// AddMedal ( remote , - 1 ) else
20152: LD_STRING remote
20154: PPUSH
20155: LD_INT 1
20157: NEG
20158: PPUSH
20159: CALL_OW 101
20163: GO 20176
// AddMedal ( remote , - 2 ) ;
20165: LD_STRING remote
20167: PPUSH
20168: LD_INT 2
20170: NEG
20171: PPUSH
20172: CALL_OW 101
// end ; if m1 and m2 and m3 then
20176: LD_VAR 0 4
20180: PUSH
20181: LD_VAR 0 5
20185: AND
20186: PUSH
20187: LD_VAR 0 6
20191: AND
20192: IFFALSE 20208
// begin wait ( 3 ) ;
20194: LD_INT 3
20196: PPUSH
20197: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
20201: LD_STRING ACH_ASPEED_6
20203: PPUSH
20204: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
20208: LD_OWVAR 67
20212: PUSH
20213: LD_INT 3
20215: GREATEREQUAL
20216: PUSH
20217: LD_VAR 0 4
20221: AND
20222: PUSH
20223: LD_VAR 0 5
20227: AND
20228: PUSH
20229: LD_VAR 0 6
20233: AND
20234: IFFALSE 20246
// SetAchievementEX ( ACH_AMER , 6 ) ;
20236: LD_STRING ACH_AMER
20238: PPUSH
20239: LD_INT 6
20241: PPUSH
20242: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
20246: LD_EXP 21
20250: PPUSH
20251: LD_STRING 06_KurtStatus_1
20253: PPUSH
20254: CALL_OW 39
// GiveMedals ( Main ) ;
20258: LD_STRING Main
20260: PPUSH
20261: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20265: LD_INT 22
20267: PUSH
20268: LD_INT 1
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 21
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 50
20287: PUSH
20288: EMPTY
20289: LIST
20290: PUSH
20291: LD_INT 2
20293: PUSH
20294: LD_INT 25
20296: PUSH
20297: LD_INT 1
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 25
20306: PUSH
20307: LD_INT 2
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 25
20316: PUSH
20317: LD_INT 3
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 25
20326: PUSH
20327: LD_INT 4
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: PPUSH
20347: CALL_OW 69
20351: PPUSH
20352: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20356: LD_EXP 1
20360: PPUSH
20361: LD_EXP 43
20365: PUSH
20366: LD_STRING JMM
20368: STR
20369: PPUSH
20370: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20374: LD_EXP 2
20378: PPUSH
20379: LD_EXP 43
20383: PUSH
20384: LD_STRING Lisa
20386: STR
20387: PPUSH
20388: CALL 7646 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20392: LD_EXP 3
20396: PPUSH
20397: LD_EXP 43
20401: PUSH
20402: LD_STRING Bobby
20404: STR
20405: PPUSH
20406: CALL 7646 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20410: LD_EXP 4
20414: PPUSH
20415: LD_EXP 43
20419: PUSH
20420: LD_STRING Cyrus
20422: STR
20423: PPUSH
20424: CALL 7646 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20428: LD_EXP 5
20432: PPUSH
20433: LD_EXP 43
20437: PUSH
20438: LD_STRING Frank
20440: STR
20441: PPUSH
20442: CALL 7646 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20446: LD_EXP 6
20450: PPUSH
20451: LD_EXP 43
20455: PUSH
20456: LD_STRING Brown
20458: STR
20459: PPUSH
20460: CALL 7646 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20464: LD_EXP 7
20468: PPUSH
20469: LD_EXP 43
20473: PUSH
20474: LD_STRING Donaldson
20476: STR
20477: PPUSH
20478: CALL 7646 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20482: LD_EXP 8
20486: PPUSH
20487: LD_EXP 43
20491: PUSH
20492: LD_STRING Gladstone
20494: STR
20495: PPUSH
20496: CALL 7646 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20500: LD_EXP 9
20504: PPUSH
20505: LD_EXP 43
20509: PUSH
20510: LD_STRING Denis
20512: STR
20513: PPUSH
20514: CALL 7646 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20518: LD_EXP 16
20522: PPUSH
20523: LD_EXP 43
20527: PUSH
20528: LD_STRING Joan
20530: STR
20531: PPUSH
20532: CALL 7646 0 2
// if IsLive ( Mike ) then
20536: LD_EXP 11
20540: PPUSH
20541: CALL_OW 300
20545: IFFALSE 20565
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
20547: LD_EXP 11
20551: PPUSH
20552: LD_EXP 43
20556: PUSH
20557: LD_STRING Mike
20559: STR
20560: PPUSH
20561: CALL_OW 38
// if IsLive ( Joan ) then
20565: LD_EXP 16
20569: PPUSH
20570: CALL_OW 300
20574: IFFALSE 20588
// SaveCharacters ( Joan , Joan ) ;
20576: LD_EXP 16
20580: PPUSH
20581: LD_STRING Joan
20583: PPUSH
20584: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
20588: LD_EXP 17
20592: PPUSH
20593: LD_STRING 06_JoanStatus_1
20595: PPUSH
20596: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20600: LD_INT 50
20602: PUSH
20603: EMPTY
20604: LIST
20605: PUSH
20606: LD_INT 22
20608: PUSH
20609: LD_INT 1
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 21
20618: PUSH
20619: LD_INT 1
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 2
20628: PUSH
20629: LD_INT 25
20631: PUSH
20632: LD_INT 1
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 25
20641: PUSH
20642: LD_INT 2
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 25
20651: PUSH
20652: LD_INT 3
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 25
20661: PUSH
20662: LD_INT 4
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: PPUSH
20682: CALL_OW 69
20686: PUSH
20687: LD_EXP 1
20691: PUSH
20692: LD_EXP 2
20696: PUSH
20697: LD_EXP 3
20701: PUSH
20702: LD_EXP 4
20706: PUSH
20707: LD_EXP 5
20711: PUSH
20712: LD_EXP 6
20716: PUSH
20717: LD_EXP 7
20721: PUSH
20722: LD_EXP 8
20726: PUSH
20727: LD_EXP 9
20731: PUSH
20732: LD_EXP 16
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: DIFF
20749: PPUSH
20750: LD_STRING 06_other_survivors
20752: PPUSH
20753: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20757: LD_INT 50
20759: PUSH
20760: EMPTY
20761: LIST
20762: PUSH
20763: LD_INT 22
20765: PUSH
20766: LD_INT 1
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 21
20775: PUSH
20776: LD_INT 1
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 2
20785: PUSH
20786: LD_INT 25
20788: PUSH
20789: LD_INT 12
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 25
20798: PUSH
20799: LD_INT 16
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: LIST
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: PPUSH
20817: CALL_OW 69
20821: PPUSH
20822: LD_STRING 06_other_apemans
20824: PPUSH
20825: CALL_OW 38
// YouWin ;
20829: CALL_OW 103
// end ; end_of_file
20833: LD_VAR 0 3
20837: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
20838: LD_EXP 48
20842: PUSH
20843: LD_OWVAR 1
20847: PUSH
20848: LD_INT 23100
20850: PUSH
20851: LD_INT 21000
20853: PUSH
20854: LD_INT 18900
20856: PUSH
20857: LD_INT 16800
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: PUSH
20866: LD_OWVAR 67
20870: ARRAY
20871: GREATER
20872: AND
20873: IFFALSE 21220
20875: GO 20877
20877: DISABLE
20878: LD_INT 0
20880: PPUSH
20881: PPUSH
20882: PPUSH
20883: PPUSH
// begin enable ;
20884: ENABLE
// for i in ruAttackers do
20885: LD_ADDR_VAR 0 1
20889: PUSH
20890: LD_EXP 48
20894: PUSH
20895: FOR_IN
20896: IFFALSE 21218
// begin if not IsDrivenBy ( i ) then
20898: LD_VAR 0 1
20902: PPUSH
20903: CALL_OW 311
20907: NOT
20908: IFFALSE 20912
// continue ;
20910: GO 20895
// if i mod 2 = 0 then
20912: LD_VAR 0 1
20916: PUSH
20917: LD_INT 2
20919: MOD
20920: PUSH
20921: LD_INT 0
20923: EQUAL
20924: IFFALSE 20979
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] ] else
20926: LD_ADDR_VAR 0 3
20930: PUSH
20931: LD_INT 91
20933: PUSH
20934: LD_INT 52
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 82
20943: PUSH
20944: LD_INT 34
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 90
20953: PUSH
20954: LD_INT 26
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 86
20963: PUSH
20964: LD_INT 16
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: ST_TO_ADDR
20977: GO 21074
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 44 , 42 ] , [ 33 , 34 ] , [ 29 , 23 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20979: LD_ADDR_VAR 0 3
20983: PUSH
20984: LD_INT 91
20986: PUSH
20987: LD_INT 52
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 68
20996: PUSH
20997: LD_INT 46
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 48
21006: PUSH
21007: LD_INT 43
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 44
21016: PUSH
21017: LD_INT 42
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 33
21026: PUSH
21027: LD_INT 34
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 29
21036: PUSH
21037: LD_INT 23
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 30
21046: PUSH
21047: LD_INT 19
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 38
21056: PUSH
21057: LD_INT 16
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
21074: LD_VAR 0 1
21078: PPUSH
21079: CALL_OW 256
21083: PUSH
21084: LD_INT 1000
21086: EQUAL
21087: IFFALSE 21105
// AgressiveMove ( i , path ) else
21089: LD_VAR 0 1
21093: PPUSH
21094: LD_VAR 0 3
21098: PPUSH
21099: CALL 83555 0 2
21103: GO 21216
// if GetLives ( i ) < 650 then
21105: LD_VAR 0 1
21109: PPUSH
21110: CALL_OW 256
21114: PUSH
21115: LD_INT 650
21117: LESS
21118: IFFALSE 21216
// begin if not IsInArea ( i , russianRepairArea ) then
21120: LD_VAR 0 1
21124: PPUSH
21125: LD_INT 12
21127: PPUSH
21128: CALL_OW 308
21132: NOT
21133: IFFALSE 21202
// begin SetTag ( i , 0 ) ;
21135: LD_VAR 0 1
21139: PPUSH
21140: LD_INT 0
21142: PPUSH
21143: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
21147: LD_VAR 0 1
21151: PPUSH
21152: CALL_OW 261
21156: PUSH
21157: LD_INT 50
21159: LESS
21160: PUSH
21161: LD_INT 21
21163: PPUSH
21164: CALL_OW 302
21168: AND
21169: IFFALSE 21185
// ComMoveUnit ( i , rufab ) else
21171: LD_VAR 0 1
21175: PPUSH
21176: LD_INT 21
21178: PPUSH
21179: CALL_OW 112
21183: GO 21200
// ComMoveXY ( i , 121 , 99 ) ;
21185: LD_VAR 0 1
21189: PPUSH
21190: LD_INT 121
21192: PPUSH
21193: LD_INT 99
21195: PPUSH
21196: CALL_OW 111
// end else
21200: GO 21216
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
21202: LD_VAR 0 1
21206: PPUSH
21207: CALL_OW 311
21211: PPUSH
21212: CALL 82651 0 1
// end ; end ;
21216: GO 20895
21218: POP
21219: POP
// end ;
21220: PPOPN 4
21222: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
21223: LD_INT 0
21225: PPUSH
21226: PPUSH
21227: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
21228: LD_ADDR_VAR 0 2
21232: PUSH
21233: DOUBLE
21234: LD_INT 1
21236: DEC
21237: ST_TO_ADDR
21238: LD_INT 4
21240: PUSH
21241: LD_INT 5
21243: PUSH
21244: LD_INT 6
21246: PUSH
21247: LD_INT 6
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: PUSH
21256: LD_OWVAR 67
21260: ARRAY
21261: PUSH
21262: FOR_TO
21263: IFFALSE 21438
// begin uc_side := 3 ;
21265: LD_ADDR_OWVAR 20
21269: PUSH
21270: LD_INT 3
21272: ST_TO_ADDR
// uc_nation := 3 ;
21273: LD_ADDR_OWVAR 21
21277: PUSH
21278: LD_INT 3
21280: ST_TO_ADDR
// InitHC_All ( ) ;
21281: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
21285: LD_INT 0
21287: PPUSH
21288: LD_INT 4
21290: PUSH
21291: LD_INT 5
21293: PUSH
21294: LD_INT 6
21296: PUSH
21297: LD_INT 6
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: PUSH
21306: LD_OWVAR 67
21310: ARRAY
21311: PPUSH
21312: CALL_OW 381
// un := CreateHuman ;
21316: LD_ADDR_VAR 0 3
21320: PUSH
21321: CALL_OW 44
21325: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
21326: LD_VAR 0 3
21330: PPUSH
21331: LD_INT 127
21333: PPUSH
21334: LD_INT 62
21336: PPUSH
21337: LD_INT 3
21339: PPUSH
21340: LD_INT 0
21342: PPUSH
21343: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
21347: LD_ADDR_EXP 49
21351: PUSH
21352: LD_EXP 49
21356: PPUSH
21357: LD_EXP 49
21361: PUSH
21362: LD_INT 1
21364: PLUS
21365: PPUSH
21366: LD_VAR 0 3
21370: PPUSH
21371: CALL_OW 1
21375: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
21376: LD_VAR 0 3
21380: PPUSH
21381: LD_INT 83
21383: PPUSH
21384: LD_INT 49
21386: PPUSH
21387: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
21391: LD_VAR 0 3
21395: PPUSH
21396: LD_INT 49
21398: PPUSH
21399: LD_INT 43
21401: PPUSH
21402: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
21406: LD_VAR 0 3
21410: PPUSH
21411: LD_INT 31
21413: PPUSH
21414: LD_INT 15
21416: PPUSH
21417: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
21421: LD_VAR 0 3
21425: PPUSH
21426: LD_INT 63
21428: PPUSH
21429: LD_INT 9
21431: PPUSH
21432: CALL_OW 174
// end ;
21436: GO 21262
21438: POP
21439: POP
// end ; end_of_file
21440: LD_VAR 0 1
21444: RET
// export function CreateNature ; var i , un ; begin
21445: LD_INT 0
21447: PPUSH
21448: PPUSH
21449: PPUSH
// for i := 1 to Difficulty + 2 do
21450: LD_ADDR_VAR 0 2
21454: PUSH
21455: DOUBLE
21456: LD_INT 1
21458: DEC
21459: ST_TO_ADDR
21460: LD_OWVAR 67
21464: PUSH
21465: LD_INT 2
21467: PLUS
21468: PUSH
21469: FOR_TO
21470: IFFALSE 21579
// begin hc_sex := sex_male ;
21472: LD_ADDR_OWVAR 27
21476: PUSH
21477: LD_INT 1
21479: ST_TO_ADDR
// uc_side := 0 ;
21480: LD_ADDR_OWVAR 20
21484: PUSH
21485: LD_INT 0
21487: ST_TO_ADDR
// uc_nation := nation_nature ;
21488: LD_ADDR_OWVAR 21
21492: PUSH
21493: LD_INT 0
21495: ST_TO_ADDR
// hc_class := class_tiger ;
21496: LD_ADDR_OWVAR 28
21500: PUSH
21501: LD_INT 14
21503: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21504: LD_ADDR_OWVAR 31
21508: PUSH
21509: LD_EXP 36
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: LD_INT 0
21519: PUSH
21520: LD_INT 0
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
21529: LD_ADDR_OWVAR 35
21533: PUSH
21534: LD_INT 5
21536: NEG
21537: PPUSH
21538: LD_INT 5
21540: PPUSH
21541: CALL_OW 12
21545: PUSH
21546: LD_OWVAR 67
21550: MUL
21551: ST_TO_ADDR
// un := CreateHuman ;
21552: LD_ADDR_VAR 0 3
21556: PUSH
21557: CALL_OW 44
21561: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21562: LD_VAR 0 3
21566: PPUSH
21567: LD_INT 18
21569: PPUSH
21570: LD_INT 0
21572: PPUSH
21573: CALL_OW 49
// end ;
21577: GO 21469
21579: POP
21580: POP
// for i = 1 to rand ( 3 , 4 ) do
21581: LD_ADDR_VAR 0 2
21585: PUSH
21586: DOUBLE
21587: LD_INT 1
21589: DEC
21590: ST_TO_ADDR
21591: LD_INT 3
21593: PPUSH
21594: LD_INT 4
21596: PPUSH
21597: CALL_OW 12
21601: PUSH
21602: FOR_TO
21603: IFFALSE 21673
// begin hc_class := class_phororhacos ;
21605: LD_ADDR_OWVAR 28
21609: PUSH
21610: LD_INT 18
21612: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21613: LD_ADDR_OWVAR 31
21617: PUSH
21618: LD_EXP 36
21622: PUSH
21623: LD_INT 0
21625: PUSH
21626: LD_INT 0
21628: PUSH
21629: LD_INT 0
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: ST_TO_ADDR
// hc_agressivity := 0 ;
21638: LD_ADDR_OWVAR 35
21642: PUSH
21643: LD_INT 0
21645: ST_TO_ADDR
// un = CreateHuman ;
21646: LD_ADDR_VAR 0 3
21650: PUSH
21651: CALL_OW 44
21655: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21656: LD_VAR 0 3
21660: PPUSH
21661: LD_INT 18
21663: PPUSH
21664: LD_INT 0
21666: PPUSH
21667: CALL_OW 49
// end ;
21671: GO 21602
21673: POP
21674: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
21675: LD_ADDR_VAR 0 2
21679: PUSH
21680: DOUBLE
21681: LD_INT 1
21683: DEC
21684: ST_TO_ADDR
21685: LD_INT 3
21687: PUSH
21688: LD_INT 3
21690: PUSH
21691: LD_INT 4
21693: PUSH
21694: LD_INT 5
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: PUSH
21703: LD_OWVAR 67
21707: ARRAY
21708: PUSH
21709: FOR_TO
21710: IFFALSE 21851
// begin hc_class := class_apeman ;
21712: LD_ADDR_OWVAR 28
21716: PUSH
21717: LD_INT 12
21719: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21720: LD_ADDR_OWVAR 31
21724: PUSH
21725: LD_INT 2
21727: PPUSH
21728: LD_INT 5
21730: PPUSH
21731: CALL_OW 12
21735: PUSH
21736: LD_INT 0
21738: PPUSH
21739: LD_INT 2
21741: PPUSH
21742: CALL_OW 12
21746: PUSH
21747: LD_INT 0
21749: PUSH
21750: LD_INT 0
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: ST_TO_ADDR
// hc_agressivity := [ rand ( - 5 , 10 ) , rand ( - 10 , 20 ) , rand ( - 20 , 25 ) , rand ( - 30 , 30 ) ] [ Difficulty ] ;
21759: LD_ADDR_OWVAR 35
21763: PUSH
21764: LD_INT 5
21766: NEG
21767: PPUSH
21768: LD_INT 10
21770: PPUSH
21771: CALL_OW 12
21775: PUSH
21776: LD_INT 10
21778: NEG
21779: PPUSH
21780: LD_INT 20
21782: PPUSH
21783: CALL_OW 12
21787: PUSH
21788: LD_INT 20
21790: NEG
21791: PPUSH
21792: LD_INT 25
21794: PPUSH
21795: CALL_OW 12
21799: PUSH
21800: LD_INT 30
21802: NEG
21803: PPUSH
21804: LD_INT 30
21806: PPUSH
21807: CALL_OW 12
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: PUSH
21818: LD_OWVAR 67
21822: ARRAY
21823: ST_TO_ADDR
// un := CreateHuman ;
21824: LD_ADDR_VAR 0 3
21828: PUSH
21829: CALL_OW 44
21833: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21834: LD_VAR 0 3
21838: PPUSH
21839: LD_INT 19
21841: PPUSH
21842: LD_INT 0
21844: PPUSH
21845: CALL_OW 49
// end ;
21849: GO 21709
21851: POP
21852: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
21853: LD_ADDR_VAR 0 2
21857: PUSH
21858: DOUBLE
21859: LD_INT 1
21861: DEC
21862: ST_TO_ADDR
21863: LD_INT 3
21865: PUSH
21866: LD_INT 4
21868: PUSH
21869: LD_INT 5
21871: PUSH
21872: LD_INT 6
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: PUSH
21881: LD_OWVAR 67
21885: ARRAY
21886: PUSH
21887: FOR_TO
21888: IFFALSE 21981
// begin hc_class := class_apeman ;
21890: LD_ADDR_OWVAR 28
21894: PUSH
21895: LD_INT 12
21897: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21898: LD_ADDR_OWVAR 31
21902: PUSH
21903: LD_INT 2
21905: PPUSH
21906: LD_INT 5
21908: PPUSH
21909: CALL_OW 12
21913: PUSH
21914: LD_INT 0
21916: PPUSH
21917: LD_INT 2
21919: PPUSH
21920: CALL_OW 12
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: ST_TO_ADDR
// hc_agressivity := rand ( - 15 , 15 ) ;
21937: LD_ADDR_OWVAR 35
21941: PUSH
21942: LD_INT 15
21944: NEG
21945: PPUSH
21946: LD_INT 15
21948: PPUSH
21949: CALL_OW 12
21953: ST_TO_ADDR
// un = CreateHuman ;
21954: LD_ADDR_VAR 0 3
21958: PUSH
21959: CALL_OW 44
21963: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21964: LD_VAR 0 3
21968: PPUSH
21969: LD_INT 20
21971: PPUSH
21972: LD_INT 0
21974: PPUSH
21975: CALL_OW 49
// end ;
21979: GO 21887
21981: POP
21982: POP
// end ; end_of_file end_of_file
21983: LD_VAR 0 1
21987: RET
// export globalGameSaveCounter ; every 0 0$1 do
21988: GO 21990
21990: DISABLE
// begin enable ;
21991: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21992: LD_STRING updateTimer(
21994: PUSH
21995: LD_OWVAR 1
21999: STR
22000: PUSH
22001: LD_STRING );
22003: STR
22004: PPUSH
22005: CALL_OW 559
// end ;
22009: END
// every 0 0$1 do
22010: GO 22012
22012: DISABLE
// begin globalGameSaveCounter := 0 ;
22013: LD_ADDR_EXP 50
22017: PUSH
22018: LD_INT 0
22020: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
22021: LD_STRING setGameSaveCounter(0)
22023: PPUSH
22024: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
22028: LD_STRING initStreamRollete();
22030: PPUSH
22031: CALL_OW 559
// InitStreamMode ;
22035: CALL 23378 0 0
// DefineStreamItems ( false ) ;
22039: LD_INT 0
22041: PPUSH
22042: CALL 23842 0 1
// end ;
22046: END
// export function SOS_MapStart ( ) ; begin
22047: LD_INT 0
22049: PPUSH
// if streamModeActive then
22050: LD_EXP 51
22054: IFFALSE 22063
// DefineStreamItems ( true ) ;
22056: LD_INT 1
22058: PPUSH
22059: CALL 23842 0 1
// UpdateLuaVariables ( ) ;
22063: CALL 22080 0 0
// UpdateFactoryWaypoints ( ) ;
22067: CALL 36844 0 0
// UpdateWarehouseGatheringPoints ( ) ;
22071: CALL 37096 0 0
// end ;
22075: LD_VAR 0 1
22079: RET
// function UpdateLuaVariables ( ) ; begin
22080: LD_INT 0
22082: PPUSH
// if globalGameSaveCounter then
22083: LD_EXP 50
22087: IFFALSE 22121
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
22089: LD_ADDR_EXP 50
22093: PUSH
22094: LD_EXP 50
22098: PPUSH
22099: CALL 82312 0 1
22103: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22104: LD_STRING setGameSaveCounter(
22106: PUSH
22107: LD_EXP 50
22111: STR
22112: PUSH
22113: LD_STRING )
22115: STR
22116: PPUSH
22117: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
22121: LD_STRING setGameDifficulty(
22123: PUSH
22124: LD_OWVAR 67
22128: STR
22129: PUSH
22130: LD_STRING )
22132: STR
22133: PPUSH
22134: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
22138: LD_STRING displayDifficulty(
22140: PUSH
22141: LD_OWVAR 67
22145: STR
22146: PUSH
22147: LD_STRING )
22149: STR
22150: PPUSH
22151: CALL_OW 559
// end ;
22155: LD_VAR 0 1
22159: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22160: LD_INT 0
22162: PPUSH
// if p2 = stream_mode then
22163: LD_VAR 0 2
22167: PUSH
22168: LD_INT 100
22170: EQUAL
22171: IFFALSE 23174
// begin if not StreamModeActive then
22173: LD_EXP 51
22177: NOT
22178: IFFALSE 22188
// StreamModeActive := true ;
22180: LD_ADDR_EXP 51
22184: PUSH
22185: LD_INT 1
22187: ST_TO_ADDR
// if p3 = 0 then
22188: LD_VAR 0 3
22192: PUSH
22193: LD_INT 0
22195: EQUAL
22196: IFFALSE 22202
// InitStreamMode ;
22198: CALL 23378 0 0
// if p3 = 1 then
22202: LD_VAR 0 3
22206: PUSH
22207: LD_INT 1
22209: EQUAL
22210: IFFALSE 22220
// sRocket := true ;
22212: LD_ADDR_EXP 56
22216: PUSH
22217: LD_INT 1
22219: ST_TO_ADDR
// if p3 = 2 then
22220: LD_VAR 0 3
22224: PUSH
22225: LD_INT 2
22227: EQUAL
22228: IFFALSE 22238
// sSpeed := true ;
22230: LD_ADDR_EXP 55
22234: PUSH
22235: LD_INT 1
22237: ST_TO_ADDR
// if p3 = 3 then
22238: LD_VAR 0 3
22242: PUSH
22243: LD_INT 3
22245: EQUAL
22246: IFFALSE 22256
// sEngine := true ;
22248: LD_ADDR_EXP 57
22252: PUSH
22253: LD_INT 1
22255: ST_TO_ADDR
// if p3 = 4 then
22256: LD_VAR 0 3
22260: PUSH
22261: LD_INT 4
22263: EQUAL
22264: IFFALSE 22274
// sSpec := true ;
22266: LD_ADDR_EXP 54
22270: PUSH
22271: LD_INT 1
22273: ST_TO_ADDR
// if p3 = 5 then
22274: LD_VAR 0 3
22278: PUSH
22279: LD_INT 5
22281: EQUAL
22282: IFFALSE 22292
// sLevel := true ;
22284: LD_ADDR_EXP 58
22288: PUSH
22289: LD_INT 1
22291: ST_TO_ADDR
// if p3 = 6 then
22292: LD_VAR 0 3
22296: PUSH
22297: LD_INT 6
22299: EQUAL
22300: IFFALSE 22310
// sArmoury := true ;
22302: LD_ADDR_EXP 59
22306: PUSH
22307: LD_INT 1
22309: ST_TO_ADDR
// if p3 = 7 then
22310: LD_VAR 0 3
22314: PUSH
22315: LD_INT 7
22317: EQUAL
22318: IFFALSE 22328
// sRadar := true ;
22320: LD_ADDR_EXP 60
22324: PUSH
22325: LD_INT 1
22327: ST_TO_ADDR
// if p3 = 8 then
22328: LD_VAR 0 3
22332: PUSH
22333: LD_INT 8
22335: EQUAL
22336: IFFALSE 22346
// sBunker := true ;
22338: LD_ADDR_EXP 61
22342: PUSH
22343: LD_INT 1
22345: ST_TO_ADDR
// if p3 = 9 then
22346: LD_VAR 0 3
22350: PUSH
22351: LD_INT 9
22353: EQUAL
22354: IFFALSE 22364
// sHack := true ;
22356: LD_ADDR_EXP 62
22360: PUSH
22361: LD_INT 1
22363: ST_TO_ADDR
// if p3 = 10 then
22364: LD_VAR 0 3
22368: PUSH
22369: LD_INT 10
22371: EQUAL
22372: IFFALSE 22382
// sFire := true ;
22374: LD_ADDR_EXP 63
22378: PUSH
22379: LD_INT 1
22381: ST_TO_ADDR
// if p3 = 11 then
22382: LD_VAR 0 3
22386: PUSH
22387: LD_INT 11
22389: EQUAL
22390: IFFALSE 22400
// sRefresh := true ;
22392: LD_ADDR_EXP 64
22396: PUSH
22397: LD_INT 1
22399: ST_TO_ADDR
// if p3 = 12 then
22400: LD_VAR 0 3
22404: PUSH
22405: LD_INT 12
22407: EQUAL
22408: IFFALSE 22418
// sExp := true ;
22410: LD_ADDR_EXP 65
22414: PUSH
22415: LD_INT 1
22417: ST_TO_ADDR
// if p3 = 13 then
22418: LD_VAR 0 3
22422: PUSH
22423: LD_INT 13
22425: EQUAL
22426: IFFALSE 22436
// sDepot := true ;
22428: LD_ADDR_EXP 66
22432: PUSH
22433: LD_INT 1
22435: ST_TO_ADDR
// if p3 = 14 then
22436: LD_VAR 0 3
22440: PUSH
22441: LD_INT 14
22443: EQUAL
22444: IFFALSE 22454
// sFlag := true ;
22446: LD_ADDR_EXP 67
22450: PUSH
22451: LD_INT 1
22453: ST_TO_ADDR
// if p3 = 15 then
22454: LD_VAR 0 3
22458: PUSH
22459: LD_INT 15
22461: EQUAL
22462: IFFALSE 22472
// sKamikadze := true ;
22464: LD_ADDR_EXP 75
22468: PUSH
22469: LD_INT 1
22471: ST_TO_ADDR
// if p3 = 16 then
22472: LD_VAR 0 3
22476: PUSH
22477: LD_INT 16
22479: EQUAL
22480: IFFALSE 22490
// sTroll := true ;
22482: LD_ADDR_EXP 76
22486: PUSH
22487: LD_INT 1
22489: ST_TO_ADDR
// if p3 = 17 then
22490: LD_VAR 0 3
22494: PUSH
22495: LD_INT 17
22497: EQUAL
22498: IFFALSE 22508
// sSlow := true ;
22500: LD_ADDR_EXP 77
22504: PUSH
22505: LD_INT 1
22507: ST_TO_ADDR
// if p3 = 18 then
22508: LD_VAR 0 3
22512: PUSH
22513: LD_INT 18
22515: EQUAL
22516: IFFALSE 22526
// sLack := true ;
22518: LD_ADDR_EXP 78
22522: PUSH
22523: LD_INT 1
22525: ST_TO_ADDR
// if p3 = 19 then
22526: LD_VAR 0 3
22530: PUSH
22531: LD_INT 19
22533: EQUAL
22534: IFFALSE 22544
// sTank := true ;
22536: LD_ADDR_EXP 80
22540: PUSH
22541: LD_INT 1
22543: ST_TO_ADDR
// if p3 = 20 then
22544: LD_VAR 0 3
22548: PUSH
22549: LD_INT 20
22551: EQUAL
22552: IFFALSE 22562
// sRemote := true ;
22554: LD_ADDR_EXP 81
22558: PUSH
22559: LD_INT 1
22561: ST_TO_ADDR
// if p3 = 21 then
22562: LD_VAR 0 3
22566: PUSH
22567: LD_INT 21
22569: EQUAL
22570: IFFALSE 22580
// sPowell := true ;
22572: LD_ADDR_EXP 82
22576: PUSH
22577: LD_INT 1
22579: ST_TO_ADDR
// if p3 = 22 then
22580: LD_VAR 0 3
22584: PUSH
22585: LD_INT 22
22587: EQUAL
22588: IFFALSE 22598
// sTeleport := true ;
22590: LD_ADDR_EXP 85
22594: PUSH
22595: LD_INT 1
22597: ST_TO_ADDR
// if p3 = 23 then
22598: LD_VAR 0 3
22602: PUSH
22603: LD_INT 23
22605: EQUAL
22606: IFFALSE 22616
// sOilTower := true ;
22608: LD_ADDR_EXP 87
22612: PUSH
22613: LD_INT 1
22615: ST_TO_ADDR
// if p3 = 24 then
22616: LD_VAR 0 3
22620: PUSH
22621: LD_INT 24
22623: EQUAL
22624: IFFALSE 22634
// sShovel := true ;
22626: LD_ADDR_EXP 88
22630: PUSH
22631: LD_INT 1
22633: ST_TO_ADDR
// if p3 = 25 then
22634: LD_VAR 0 3
22638: PUSH
22639: LD_INT 25
22641: EQUAL
22642: IFFALSE 22652
// sSheik := true ;
22644: LD_ADDR_EXP 89
22648: PUSH
22649: LD_INT 1
22651: ST_TO_ADDR
// if p3 = 26 then
22652: LD_VAR 0 3
22656: PUSH
22657: LD_INT 26
22659: EQUAL
22660: IFFALSE 22670
// sEarthquake := true ;
22662: LD_ADDR_EXP 91
22666: PUSH
22667: LD_INT 1
22669: ST_TO_ADDR
// if p3 = 27 then
22670: LD_VAR 0 3
22674: PUSH
22675: LD_INT 27
22677: EQUAL
22678: IFFALSE 22688
// sAI := true ;
22680: LD_ADDR_EXP 92
22684: PUSH
22685: LD_INT 1
22687: ST_TO_ADDR
// if p3 = 28 then
22688: LD_VAR 0 3
22692: PUSH
22693: LD_INT 28
22695: EQUAL
22696: IFFALSE 22706
// sCargo := true ;
22698: LD_ADDR_EXP 95
22702: PUSH
22703: LD_INT 1
22705: ST_TO_ADDR
// if p3 = 29 then
22706: LD_VAR 0 3
22710: PUSH
22711: LD_INT 29
22713: EQUAL
22714: IFFALSE 22724
// sDLaser := true ;
22716: LD_ADDR_EXP 96
22720: PUSH
22721: LD_INT 1
22723: ST_TO_ADDR
// if p3 = 30 then
22724: LD_VAR 0 3
22728: PUSH
22729: LD_INT 30
22731: EQUAL
22732: IFFALSE 22742
// sExchange := true ;
22734: LD_ADDR_EXP 97
22738: PUSH
22739: LD_INT 1
22741: ST_TO_ADDR
// if p3 = 31 then
22742: LD_VAR 0 3
22746: PUSH
22747: LD_INT 31
22749: EQUAL
22750: IFFALSE 22760
// sFac := true ;
22752: LD_ADDR_EXP 98
22756: PUSH
22757: LD_INT 1
22759: ST_TO_ADDR
// if p3 = 32 then
22760: LD_VAR 0 3
22764: PUSH
22765: LD_INT 32
22767: EQUAL
22768: IFFALSE 22778
// sPower := true ;
22770: LD_ADDR_EXP 99
22774: PUSH
22775: LD_INT 1
22777: ST_TO_ADDR
// if p3 = 33 then
22778: LD_VAR 0 3
22782: PUSH
22783: LD_INT 33
22785: EQUAL
22786: IFFALSE 22796
// sRandom := true ;
22788: LD_ADDR_EXP 100
22792: PUSH
22793: LD_INT 1
22795: ST_TO_ADDR
// if p3 = 34 then
22796: LD_VAR 0 3
22800: PUSH
22801: LD_INT 34
22803: EQUAL
22804: IFFALSE 22814
// sShield := true ;
22806: LD_ADDR_EXP 101
22810: PUSH
22811: LD_INT 1
22813: ST_TO_ADDR
// if p3 = 35 then
22814: LD_VAR 0 3
22818: PUSH
22819: LD_INT 35
22821: EQUAL
22822: IFFALSE 22832
// sTime := true ;
22824: LD_ADDR_EXP 102
22828: PUSH
22829: LD_INT 1
22831: ST_TO_ADDR
// if p3 = 36 then
22832: LD_VAR 0 3
22836: PUSH
22837: LD_INT 36
22839: EQUAL
22840: IFFALSE 22850
// sTools := true ;
22842: LD_ADDR_EXP 103
22846: PUSH
22847: LD_INT 1
22849: ST_TO_ADDR
// if p3 = 101 then
22850: LD_VAR 0 3
22854: PUSH
22855: LD_INT 101
22857: EQUAL
22858: IFFALSE 22868
// sSold := true ;
22860: LD_ADDR_EXP 68
22864: PUSH
22865: LD_INT 1
22867: ST_TO_ADDR
// if p3 = 102 then
22868: LD_VAR 0 3
22872: PUSH
22873: LD_INT 102
22875: EQUAL
22876: IFFALSE 22886
// sDiff := true ;
22878: LD_ADDR_EXP 69
22882: PUSH
22883: LD_INT 1
22885: ST_TO_ADDR
// if p3 = 103 then
22886: LD_VAR 0 3
22890: PUSH
22891: LD_INT 103
22893: EQUAL
22894: IFFALSE 22904
// sFog := true ;
22896: LD_ADDR_EXP 72
22900: PUSH
22901: LD_INT 1
22903: ST_TO_ADDR
// if p3 = 104 then
22904: LD_VAR 0 3
22908: PUSH
22909: LD_INT 104
22911: EQUAL
22912: IFFALSE 22922
// sReset := true ;
22914: LD_ADDR_EXP 73
22918: PUSH
22919: LD_INT 1
22921: ST_TO_ADDR
// if p3 = 105 then
22922: LD_VAR 0 3
22926: PUSH
22927: LD_INT 105
22929: EQUAL
22930: IFFALSE 22940
// sSun := true ;
22932: LD_ADDR_EXP 74
22936: PUSH
22937: LD_INT 1
22939: ST_TO_ADDR
// if p3 = 106 then
22940: LD_VAR 0 3
22944: PUSH
22945: LD_INT 106
22947: EQUAL
22948: IFFALSE 22958
// sTiger := true ;
22950: LD_ADDR_EXP 70
22954: PUSH
22955: LD_INT 1
22957: ST_TO_ADDR
// if p3 = 107 then
22958: LD_VAR 0 3
22962: PUSH
22963: LD_INT 107
22965: EQUAL
22966: IFFALSE 22976
// sBomb := true ;
22968: LD_ADDR_EXP 71
22972: PUSH
22973: LD_INT 1
22975: ST_TO_ADDR
// if p3 = 108 then
22976: LD_VAR 0 3
22980: PUSH
22981: LD_INT 108
22983: EQUAL
22984: IFFALSE 22994
// sWound := true ;
22986: LD_ADDR_EXP 79
22990: PUSH
22991: LD_INT 1
22993: ST_TO_ADDR
// if p3 = 109 then
22994: LD_VAR 0 3
22998: PUSH
22999: LD_INT 109
23001: EQUAL
23002: IFFALSE 23012
// sBetray := true ;
23004: LD_ADDR_EXP 83
23008: PUSH
23009: LD_INT 1
23011: ST_TO_ADDR
// if p3 = 110 then
23012: LD_VAR 0 3
23016: PUSH
23017: LD_INT 110
23019: EQUAL
23020: IFFALSE 23030
// sContamin := true ;
23022: LD_ADDR_EXP 84
23026: PUSH
23027: LD_INT 1
23029: ST_TO_ADDR
// if p3 = 111 then
23030: LD_VAR 0 3
23034: PUSH
23035: LD_INT 111
23037: EQUAL
23038: IFFALSE 23048
// sOil := true ;
23040: LD_ADDR_EXP 86
23044: PUSH
23045: LD_INT 1
23047: ST_TO_ADDR
// if p3 = 112 then
23048: LD_VAR 0 3
23052: PUSH
23053: LD_INT 112
23055: EQUAL
23056: IFFALSE 23066
// sStu := true ;
23058: LD_ADDR_EXP 90
23062: PUSH
23063: LD_INT 1
23065: ST_TO_ADDR
// if p3 = 113 then
23066: LD_VAR 0 3
23070: PUSH
23071: LD_INT 113
23073: EQUAL
23074: IFFALSE 23084
// sBazooka := true ;
23076: LD_ADDR_EXP 93
23080: PUSH
23081: LD_INT 1
23083: ST_TO_ADDR
// if p3 = 114 then
23084: LD_VAR 0 3
23088: PUSH
23089: LD_INT 114
23091: EQUAL
23092: IFFALSE 23102
// sMortar := true ;
23094: LD_ADDR_EXP 94
23098: PUSH
23099: LD_INT 1
23101: ST_TO_ADDR
// if p3 = 115 then
23102: LD_VAR 0 3
23106: PUSH
23107: LD_INT 115
23109: EQUAL
23110: IFFALSE 23120
// sRanger := true ;
23112: LD_ADDR_EXP 104
23116: PUSH
23117: LD_INT 1
23119: ST_TO_ADDR
// if p3 = 116 then
23120: LD_VAR 0 3
23124: PUSH
23125: LD_INT 116
23127: EQUAL
23128: IFFALSE 23138
// sComputer := true ;
23130: LD_ADDR_EXP 105
23134: PUSH
23135: LD_INT 1
23137: ST_TO_ADDR
// if p3 = 117 then
23138: LD_VAR 0 3
23142: PUSH
23143: LD_INT 117
23145: EQUAL
23146: IFFALSE 23156
// s30 := true ;
23148: LD_ADDR_EXP 106
23152: PUSH
23153: LD_INT 1
23155: ST_TO_ADDR
// if p3 = 118 then
23156: LD_VAR 0 3
23160: PUSH
23161: LD_INT 118
23163: EQUAL
23164: IFFALSE 23174
// s60 := true ;
23166: LD_ADDR_EXP 107
23170: PUSH
23171: LD_INT 1
23173: ST_TO_ADDR
// end ; if p2 = hack_mode then
23174: LD_VAR 0 2
23178: PUSH
23179: LD_INT 101
23181: EQUAL
23182: IFFALSE 23310
// begin case p3 of 1 :
23184: LD_VAR 0 3
23188: PUSH
23189: LD_INT 1
23191: DOUBLE
23192: EQUAL
23193: IFTRUE 23197
23195: GO 23204
23197: POP
// hHackUnlimitedResources ; 2 :
23198: CALL 35457 0 0
23202: GO 23310
23204: LD_INT 2
23206: DOUBLE
23207: EQUAL
23208: IFTRUE 23212
23210: GO 23219
23212: POP
// hHackSetLevel10 ; 3 :
23213: CALL 35590 0 0
23217: GO 23310
23219: LD_INT 3
23221: DOUBLE
23222: EQUAL
23223: IFTRUE 23227
23225: GO 23234
23227: POP
// hHackSetLevel10YourUnits ; 4 :
23228: CALL 35675 0 0
23232: GO 23310
23234: LD_INT 4
23236: DOUBLE
23237: EQUAL
23238: IFTRUE 23242
23240: GO 23249
23242: POP
// hHackInvincible ; 5 :
23243: CALL 36123 0 0
23247: GO 23310
23249: LD_INT 5
23251: DOUBLE
23252: EQUAL
23253: IFTRUE 23257
23255: GO 23264
23257: POP
// hHackInvisible ; 6 :
23258: CALL 36234 0 0
23262: GO 23310
23264: LD_INT 6
23266: DOUBLE
23267: EQUAL
23268: IFTRUE 23272
23270: GO 23279
23272: POP
// hHackChangeYourSide ; 7 :
23273: CALL 36291 0 0
23277: GO 23310
23279: LD_INT 7
23281: DOUBLE
23282: EQUAL
23283: IFTRUE 23287
23285: GO 23294
23287: POP
// hHackChangeUnitSide ; 8 :
23288: CALL 36333 0 0
23292: GO 23310
23294: LD_INT 8
23296: DOUBLE
23297: EQUAL
23298: IFTRUE 23302
23300: GO 23309
23302: POP
// hHackFog ; end ;
23303: CALL 36434 0 0
23307: GO 23310
23309: POP
// end ; if p2 = game_save_mode then
23310: LD_VAR 0 2
23314: PUSH
23315: LD_INT 102
23317: EQUAL
23318: IFFALSE 23373
// begin if p3 = 1 then
23320: LD_VAR 0 3
23324: PUSH
23325: LD_INT 1
23327: EQUAL
23328: IFFALSE 23340
// globalGameSaveCounter := p4 ;
23330: LD_ADDR_EXP 50
23334: PUSH
23335: LD_VAR 0 4
23339: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
23340: LD_VAR 0 3
23344: PUSH
23345: LD_INT 2
23347: EQUAL
23348: PUSH
23349: LD_EXP 50
23353: AND
23354: IFFALSE 23373
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
23356: LD_STRING setGameSaveCounter(
23358: PUSH
23359: LD_EXP 50
23363: STR
23364: PUSH
23365: LD_STRING )
23367: STR
23368: PPUSH
23369: CALL_OW 559
// end ; end ;
23373: LD_VAR 0 7
23377: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
23378: LD_INT 0
23380: PPUSH
// streamModeActive := false ;
23381: LD_ADDR_EXP 51
23385: PUSH
23386: LD_INT 0
23388: ST_TO_ADDR
// normalCounter := 36 ;
23389: LD_ADDR_EXP 52
23393: PUSH
23394: LD_INT 36
23396: ST_TO_ADDR
// hardcoreCounter := 18 ;
23397: LD_ADDR_EXP 53
23401: PUSH
23402: LD_INT 18
23404: ST_TO_ADDR
// sRocket := false ;
23405: LD_ADDR_EXP 56
23409: PUSH
23410: LD_INT 0
23412: ST_TO_ADDR
// sSpeed := false ;
23413: LD_ADDR_EXP 55
23417: PUSH
23418: LD_INT 0
23420: ST_TO_ADDR
// sEngine := false ;
23421: LD_ADDR_EXP 57
23425: PUSH
23426: LD_INT 0
23428: ST_TO_ADDR
// sSpec := false ;
23429: LD_ADDR_EXP 54
23433: PUSH
23434: LD_INT 0
23436: ST_TO_ADDR
// sLevel := false ;
23437: LD_ADDR_EXP 58
23441: PUSH
23442: LD_INT 0
23444: ST_TO_ADDR
// sArmoury := false ;
23445: LD_ADDR_EXP 59
23449: PUSH
23450: LD_INT 0
23452: ST_TO_ADDR
// sRadar := false ;
23453: LD_ADDR_EXP 60
23457: PUSH
23458: LD_INT 0
23460: ST_TO_ADDR
// sBunker := false ;
23461: LD_ADDR_EXP 61
23465: PUSH
23466: LD_INT 0
23468: ST_TO_ADDR
// sHack := false ;
23469: LD_ADDR_EXP 62
23473: PUSH
23474: LD_INT 0
23476: ST_TO_ADDR
// sFire := false ;
23477: LD_ADDR_EXP 63
23481: PUSH
23482: LD_INT 0
23484: ST_TO_ADDR
// sRefresh := false ;
23485: LD_ADDR_EXP 64
23489: PUSH
23490: LD_INT 0
23492: ST_TO_ADDR
// sExp := false ;
23493: LD_ADDR_EXP 65
23497: PUSH
23498: LD_INT 0
23500: ST_TO_ADDR
// sDepot := false ;
23501: LD_ADDR_EXP 66
23505: PUSH
23506: LD_INT 0
23508: ST_TO_ADDR
// sFlag := false ;
23509: LD_ADDR_EXP 67
23513: PUSH
23514: LD_INT 0
23516: ST_TO_ADDR
// sKamikadze := false ;
23517: LD_ADDR_EXP 75
23521: PUSH
23522: LD_INT 0
23524: ST_TO_ADDR
// sTroll := false ;
23525: LD_ADDR_EXP 76
23529: PUSH
23530: LD_INT 0
23532: ST_TO_ADDR
// sSlow := false ;
23533: LD_ADDR_EXP 77
23537: PUSH
23538: LD_INT 0
23540: ST_TO_ADDR
// sLack := false ;
23541: LD_ADDR_EXP 78
23545: PUSH
23546: LD_INT 0
23548: ST_TO_ADDR
// sTank := false ;
23549: LD_ADDR_EXP 80
23553: PUSH
23554: LD_INT 0
23556: ST_TO_ADDR
// sRemote := false ;
23557: LD_ADDR_EXP 81
23561: PUSH
23562: LD_INT 0
23564: ST_TO_ADDR
// sPowell := false ;
23565: LD_ADDR_EXP 82
23569: PUSH
23570: LD_INT 0
23572: ST_TO_ADDR
// sTeleport := false ;
23573: LD_ADDR_EXP 85
23577: PUSH
23578: LD_INT 0
23580: ST_TO_ADDR
// sOilTower := false ;
23581: LD_ADDR_EXP 87
23585: PUSH
23586: LD_INT 0
23588: ST_TO_ADDR
// sShovel := false ;
23589: LD_ADDR_EXP 88
23593: PUSH
23594: LD_INT 0
23596: ST_TO_ADDR
// sSheik := false ;
23597: LD_ADDR_EXP 89
23601: PUSH
23602: LD_INT 0
23604: ST_TO_ADDR
// sEarthquake := false ;
23605: LD_ADDR_EXP 91
23609: PUSH
23610: LD_INT 0
23612: ST_TO_ADDR
// sAI := false ;
23613: LD_ADDR_EXP 92
23617: PUSH
23618: LD_INT 0
23620: ST_TO_ADDR
// sCargo := false ;
23621: LD_ADDR_EXP 95
23625: PUSH
23626: LD_INT 0
23628: ST_TO_ADDR
// sDLaser := false ;
23629: LD_ADDR_EXP 96
23633: PUSH
23634: LD_INT 0
23636: ST_TO_ADDR
// sExchange := false ;
23637: LD_ADDR_EXP 97
23641: PUSH
23642: LD_INT 0
23644: ST_TO_ADDR
// sFac := false ;
23645: LD_ADDR_EXP 98
23649: PUSH
23650: LD_INT 0
23652: ST_TO_ADDR
// sPower := false ;
23653: LD_ADDR_EXP 99
23657: PUSH
23658: LD_INT 0
23660: ST_TO_ADDR
// sRandom := false ;
23661: LD_ADDR_EXP 100
23665: PUSH
23666: LD_INT 0
23668: ST_TO_ADDR
// sShield := false ;
23669: LD_ADDR_EXP 101
23673: PUSH
23674: LD_INT 0
23676: ST_TO_ADDR
// sTime := false ;
23677: LD_ADDR_EXP 102
23681: PUSH
23682: LD_INT 0
23684: ST_TO_ADDR
// sTools := false ;
23685: LD_ADDR_EXP 103
23689: PUSH
23690: LD_INT 0
23692: ST_TO_ADDR
// sSold := false ;
23693: LD_ADDR_EXP 68
23697: PUSH
23698: LD_INT 0
23700: ST_TO_ADDR
// sDiff := false ;
23701: LD_ADDR_EXP 69
23705: PUSH
23706: LD_INT 0
23708: ST_TO_ADDR
// sFog := false ;
23709: LD_ADDR_EXP 72
23713: PUSH
23714: LD_INT 0
23716: ST_TO_ADDR
// sReset := false ;
23717: LD_ADDR_EXP 73
23721: PUSH
23722: LD_INT 0
23724: ST_TO_ADDR
// sSun := false ;
23725: LD_ADDR_EXP 74
23729: PUSH
23730: LD_INT 0
23732: ST_TO_ADDR
// sTiger := false ;
23733: LD_ADDR_EXP 70
23737: PUSH
23738: LD_INT 0
23740: ST_TO_ADDR
// sBomb := false ;
23741: LD_ADDR_EXP 71
23745: PUSH
23746: LD_INT 0
23748: ST_TO_ADDR
// sWound := false ;
23749: LD_ADDR_EXP 79
23753: PUSH
23754: LD_INT 0
23756: ST_TO_ADDR
// sBetray := false ;
23757: LD_ADDR_EXP 83
23761: PUSH
23762: LD_INT 0
23764: ST_TO_ADDR
// sContamin := false ;
23765: LD_ADDR_EXP 84
23769: PUSH
23770: LD_INT 0
23772: ST_TO_ADDR
// sOil := false ;
23773: LD_ADDR_EXP 86
23777: PUSH
23778: LD_INT 0
23780: ST_TO_ADDR
// sStu := false ;
23781: LD_ADDR_EXP 90
23785: PUSH
23786: LD_INT 0
23788: ST_TO_ADDR
// sBazooka := false ;
23789: LD_ADDR_EXP 93
23793: PUSH
23794: LD_INT 0
23796: ST_TO_ADDR
// sMortar := false ;
23797: LD_ADDR_EXP 94
23801: PUSH
23802: LD_INT 0
23804: ST_TO_ADDR
// sRanger := false ;
23805: LD_ADDR_EXP 104
23809: PUSH
23810: LD_INT 0
23812: ST_TO_ADDR
// sComputer := false ;
23813: LD_ADDR_EXP 105
23817: PUSH
23818: LD_INT 0
23820: ST_TO_ADDR
// s30 := false ;
23821: LD_ADDR_EXP 106
23825: PUSH
23826: LD_INT 0
23828: ST_TO_ADDR
// s60 := false ;
23829: LD_ADDR_EXP 107
23833: PUSH
23834: LD_INT 0
23836: ST_TO_ADDR
// end ;
23837: LD_VAR 0 1
23841: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
23842: LD_INT 0
23844: PPUSH
23845: PPUSH
23846: PPUSH
23847: PPUSH
23848: PPUSH
23849: PPUSH
23850: PPUSH
// result := [ ] ;
23851: LD_ADDR_VAR 0 2
23855: PUSH
23856: EMPTY
23857: ST_TO_ADDR
// if campaign_id = 1 then
23858: LD_OWVAR 69
23862: PUSH
23863: LD_INT 1
23865: EQUAL
23866: IFFALSE 27032
// begin case mission_number of 1 :
23868: LD_OWVAR 70
23872: PUSH
23873: LD_INT 1
23875: DOUBLE
23876: EQUAL
23877: IFTRUE 23881
23879: GO 23957
23881: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23882: LD_ADDR_VAR 0 2
23886: PUSH
23887: LD_INT 2
23889: PUSH
23890: LD_INT 4
23892: PUSH
23893: LD_INT 11
23895: PUSH
23896: LD_INT 12
23898: PUSH
23899: LD_INT 15
23901: PUSH
23902: LD_INT 16
23904: PUSH
23905: LD_INT 22
23907: PUSH
23908: LD_INT 23
23910: PUSH
23911: LD_INT 26
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 101
23927: PUSH
23928: LD_INT 102
23930: PUSH
23931: LD_INT 106
23933: PUSH
23934: LD_INT 116
23936: PUSH
23937: LD_INT 117
23939: PUSH
23940: LD_INT 118
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: ST_TO_ADDR
23955: GO 27030
23957: LD_INT 2
23959: DOUBLE
23960: EQUAL
23961: IFTRUE 23965
23963: GO 24049
23965: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23966: LD_ADDR_VAR 0 2
23970: PUSH
23971: LD_INT 2
23973: PUSH
23974: LD_INT 4
23976: PUSH
23977: LD_INT 11
23979: PUSH
23980: LD_INT 12
23982: PUSH
23983: LD_INT 15
23985: PUSH
23986: LD_INT 16
23988: PUSH
23989: LD_INT 22
23991: PUSH
23992: LD_INT 23
23994: PUSH
23995: LD_INT 26
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 101
24011: PUSH
24012: LD_INT 102
24014: PUSH
24015: LD_INT 105
24017: PUSH
24018: LD_INT 106
24020: PUSH
24021: LD_INT 108
24023: PUSH
24024: LD_INT 116
24026: PUSH
24027: LD_INT 117
24029: PUSH
24030: LD_INT 118
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: ST_TO_ADDR
24047: GO 27030
24049: LD_INT 3
24051: DOUBLE
24052: EQUAL
24053: IFTRUE 24057
24055: GO 24145
24057: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
24058: LD_ADDR_VAR 0 2
24062: PUSH
24063: LD_INT 2
24065: PUSH
24066: LD_INT 4
24068: PUSH
24069: LD_INT 5
24071: PUSH
24072: LD_INT 11
24074: PUSH
24075: LD_INT 12
24077: PUSH
24078: LD_INT 15
24080: PUSH
24081: LD_INT 16
24083: PUSH
24084: LD_INT 22
24086: PUSH
24087: LD_INT 26
24089: PUSH
24090: LD_INT 36
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 101
24107: PUSH
24108: LD_INT 102
24110: PUSH
24111: LD_INT 105
24113: PUSH
24114: LD_INT 106
24116: PUSH
24117: LD_INT 108
24119: PUSH
24120: LD_INT 116
24122: PUSH
24123: LD_INT 117
24125: PUSH
24126: LD_INT 118
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: ST_TO_ADDR
24143: GO 27030
24145: LD_INT 4
24147: DOUBLE
24148: EQUAL
24149: IFTRUE 24153
24151: GO 24249
24153: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
24154: LD_ADDR_VAR 0 2
24158: PUSH
24159: LD_INT 2
24161: PUSH
24162: LD_INT 4
24164: PUSH
24165: LD_INT 5
24167: PUSH
24168: LD_INT 8
24170: PUSH
24171: LD_INT 11
24173: PUSH
24174: LD_INT 12
24176: PUSH
24177: LD_INT 15
24179: PUSH
24180: LD_INT 16
24182: PUSH
24183: LD_INT 22
24185: PUSH
24186: LD_INT 23
24188: PUSH
24189: LD_INT 26
24191: PUSH
24192: LD_INT 36
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 101
24211: PUSH
24212: LD_INT 102
24214: PUSH
24215: LD_INT 105
24217: PUSH
24218: LD_INT 106
24220: PUSH
24221: LD_INT 108
24223: PUSH
24224: LD_INT 116
24226: PUSH
24227: LD_INT 117
24229: PUSH
24230: LD_INT 118
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: ST_TO_ADDR
24247: GO 27030
24249: LD_INT 5
24251: DOUBLE
24252: EQUAL
24253: IFTRUE 24257
24255: GO 24369
24257: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
24258: LD_ADDR_VAR 0 2
24262: PUSH
24263: LD_INT 2
24265: PUSH
24266: LD_INT 4
24268: PUSH
24269: LD_INT 5
24271: PUSH
24272: LD_INT 6
24274: PUSH
24275: LD_INT 8
24277: PUSH
24278: LD_INT 11
24280: PUSH
24281: LD_INT 12
24283: PUSH
24284: LD_INT 15
24286: PUSH
24287: LD_INT 16
24289: PUSH
24290: LD_INT 22
24292: PUSH
24293: LD_INT 23
24295: PUSH
24296: LD_INT 25
24298: PUSH
24299: LD_INT 26
24301: PUSH
24302: LD_INT 36
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 101
24323: PUSH
24324: LD_INT 102
24326: PUSH
24327: LD_INT 105
24329: PUSH
24330: LD_INT 106
24332: PUSH
24333: LD_INT 108
24335: PUSH
24336: LD_INT 109
24338: PUSH
24339: LD_INT 112
24341: PUSH
24342: LD_INT 116
24344: PUSH
24345: LD_INT 117
24347: PUSH
24348: LD_INT 118
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: ST_TO_ADDR
24367: GO 27030
24369: LD_INT 6
24371: DOUBLE
24372: EQUAL
24373: IFTRUE 24377
24375: GO 24509
24377: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
24378: LD_ADDR_VAR 0 2
24382: PUSH
24383: LD_INT 2
24385: PUSH
24386: LD_INT 4
24388: PUSH
24389: LD_INT 5
24391: PUSH
24392: LD_INT 6
24394: PUSH
24395: LD_INT 8
24397: PUSH
24398: LD_INT 11
24400: PUSH
24401: LD_INT 12
24403: PUSH
24404: LD_INT 15
24406: PUSH
24407: LD_INT 16
24409: PUSH
24410: LD_INT 20
24412: PUSH
24413: LD_INT 21
24415: PUSH
24416: LD_INT 22
24418: PUSH
24419: LD_INT 23
24421: PUSH
24422: LD_INT 25
24424: PUSH
24425: LD_INT 26
24427: PUSH
24428: LD_INT 30
24430: PUSH
24431: LD_INT 31
24433: PUSH
24434: LD_INT 32
24436: PUSH
24437: LD_INT 36
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 101
24463: PUSH
24464: LD_INT 102
24466: PUSH
24467: LD_INT 105
24469: PUSH
24470: LD_INT 106
24472: PUSH
24473: LD_INT 108
24475: PUSH
24476: LD_INT 109
24478: PUSH
24479: LD_INT 112
24481: PUSH
24482: LD_INT 116
24484: PUSH
24485: LD_INT 117
24487: PUSH
24488: LD_INT 118
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: ST_TO_ADDR
24507: GO 27030
24509: LD_INT 7
24511: DOUBLE
24512: EQUAL
24513: IFTRUE 24517
24515: GO 24629
24517: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
24518: LD_ADDR_VAR 0 2
24522: PUSH
24523: LD_INT 2
24525: PUSH
24526: LD_INT 4
24528: PUSH
24529: LD_INT 5
24531: PUSH
24532: LD_INT 7
24534: PUSH
24535: LD_INT 11
24537: PUSH
24538: LD_INT 12
24540: PUSH
24541: LD_INT 15
24543: PUSH
24544: LD_INT 16
24546: PUSH
24547: LD_INT 20
24549: PUSH
24550: LD_INT 21
24552: PUSH
24553: LD_INT 22
24555: PUSH
24556: LD_INT 23
24558: PUSH
24559: LD_INT 25
24561: PUSH
24562: LD_INT 26
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 101
24583: PUSH
24584: LD_INT 102
24586: PUSH
24587: LD_INT 103
24589: PUSH
24590: LD_INT 105
24592: PUSH
24593: LD_INT 106
24595: PUSH
24596: LD_INT 108
24598: PUSH
24599: LD_INT 112
24601: PUSH
24602: LD_INT 116
24604: PUSH
24605: LD_INT 117
24607: PUSH
24608: LD_INT 118
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: ST_TO_ADDR
24627: GO 27030
24629: LD_INT 8
24631: DOUBLE
24632: EQUAL
24633: IFTRUE 24637
24635: GO 24777
24637: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
24638: LD_ADDR_VAR 0 2
24642: PUSH
24643: LD_INT 2
24645: PUSH
24646: LD_INT 4
24648: PUSH
24649: LD_INT 5
24651: PUSH
24652: LD_INT 6
24654: PUSH
24655: LD_INT 7
24657: PUSH
24658: LD_INT 8
24660: PUSH
24661: LD_INT 11
24663: PUSH
24664: LD_INT 12
24666: PUSH
24667: LD_INT 15
24669: PUSH
24670: LD_INT 16
24672: PUSH
24673: LD_INT 20
24675: PUSH
24676: LD_INT 21
24678: PUSH
24679: LD_INT 22
24681: PUSH
24682: LD_INT 23
24684: PUSH
24685: LD_INT 25
24687: PUSH
24688: LD_INT 26
24690: PUSH
24691: LD_INT 30
24693: PUSH
24694: LD_INT 31
24696: PUSH
24697: LD_INT 32
24699: PUSH
24700: LD_INT 36
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 101
24727: PUSH
24728: LD_INT 102
24730: PUSH
24731: LD_INT 103
24733: PUSH
24734: LD_INT 105
24736: PUSH
24737: LD_INT 106
24739: PUSH
24740: LD_INT 108
24742: PUSH
24743: LD_INT 109
24745: PUSH
24746: LD_INT 112
24748: PUSH
24749: LD_INT 116
24751: PUSH
24752: LD_INT 117
24754: PUSH
24755: LD_INT 118
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: ST_TO_ADDR
24775: GO 27030
24777: LD_INT 9
24779: DOUBLE
24780: EQUAL
24781: IFTRUE 24785
24783: GO 24933
24785: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
24786: LD_ADDR_VAR 0 2
24790: PUSH
24791: LD_INT 2
24793: PUSH
24794: LD_INT 4
24796: PUSH
24797: LD_INT 5
24799: PUSH
24800: LD_INT 6
24802: PUSH
24803: LD_INT 7
24805: PUSH
24806: LD_INT 8
24808: PUSH
24809: LD_INT 11
24811: PUSH
24812: LD_INT 12
24814: PUSH
24815: LD_INT 15
24817: PUSH
24818: LD_INT 16
24820: PUSH
24821: LD_INT 20
24823: PUSH
24824: LD_INT 21
24826: PUSH
24827: LD_INT 22
24829: PUSH
24830: LD_INT 23
24832: PUSH
24833: LD_INT 25
24835: PUSH
24836: LD_INT 26
24838: PUSH
24839: LD_INT 28
24841: PUSH
24842: LD_INT 30
24844: PUSH
24845: LD_INT 31
24847: PUSH
24848: LD_INT 32
24850: PUSH
24851: LD_INT 36
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 101
24879: PUSH
24880: LD_INT 102
24882: PUSH
24883: LD_INT 103
24885: PUSH
24886: LD_INT 105
24888: PUSH
24889: LD_INT 106
24891: PUSH
24892: LD_INT 108
24894: PUSH
24895: LD_INT 109
24897: PUSH
24898: LD_INT 112
24900: PUSH
24901: LD_INT 114
24903: PUSH
24904: LD_INT 116
24906: PUSH
24907: LD_INT 117
24909: PUSH
24910: LD_INT 118
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: ST_TO_ADDR
24931: GO 27030
24933: LD_INT 10
24935: DOUBLE
24936: EQUAL
24937: IFTRUE 24941
24939: GO 25137
24941: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24942: LD_ADDR_VAR 0 2
24946: PUSH
24947: LD_INT 2
24949: PUSH
24950: LD_INT 4
24952: PUSH
24953: LD_INT 5
24955: PUSH
24956: LD_INT 6
24958: PUSH
24959: LD_INT 7
24961: PUSH
24962: LD_INT 8
24964: PUSH
24965: LD_INT 9
24967: PUSH
24968: LD_INT 10
24970: PUSH
24971: LD_INT 11
24973: PUSH
24974: LD_INT 12
24976: PUSH
24977: LD_INT 13
24979: PUSH
24980: LD_INT 14
24982: PUSH
24983: LD_INT 15
24985: PUSH
24986: LD_INT 16
24988: PUSH
24989: LD_INT 17
24991: PUSH
24992: LD_INT 18
24994: PUSH
24995: LD_INT 19
24997: PUSH
24998: LD_INT 20
25000: PUSH
25001: LD_INT 21
25003: PUSH
25004: LD_INT 22
25006: PUSH
25007: LD_INT 23
25009: PUSH
25010: LD_INT 24
25012: PUSH
25013: LD_INT 25
25015: PUSH
25016: LD_INT 26
25018: PUSH
25019: LD_INT 28
25021: PUSH
25022: LD_INT 30
25024: PUSH
25025: LD_INT 31
25027: PUSH
25028: LD_INT 32
25030: PUSH
25031: LD_INT 36
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 101
25067: PUSH
25068: LD_INT 102
25070: PUSH
25071: LD_INT 103
25073: PUSH
25074: LD_INT 104
25076: PUSH
25077: LD_INT 105
25079: PUSH
25080: LD_INT 106
25082: PUSH
25083: LD_INT 107
25085: PUSH
25086: LD_INT 108
25088: PUSH
25089: LD_INT 109
25091: PUSH
25092: LD_INT 110
25094: PUSH
25095: LD_INT 111
25097: PUSH
25098: LD_INT 112
25100: PUSH
25101: LD_INT 114
25103: PUSH
25104: LD_INT 116
25106: PUSH
25107: LD_INT 117
25109: PUSH
25110: LD_INT 118
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: ST_TO_ADDR
25135: GO 27030
25137: LD_INT 11
25139: DOUBLE
25140: EQUAL
25141: IFTRUE 25145
25143: GO 25349
25145: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
25146: LD_ADDR_VAR 0 2
25150: PUSH
25151: LD_INT 2
25153: PUSH
25154: LD_INT 3
25156: PUSH
25157: LD_INT 4
25159: PUSH
25160: LD_INT 5
25162: PUSH
25163: LD_INT 6
25165: PUSH
25166: LD_INT 7
25168: PUSH
25169: LD_INT 8
25171: PUSH
25172: LD_INT 9
25174: PUSH
25175: LD_INT 10
25177: PUSH
25178: LD_INT 11
25180: PUSH
25181: LD_INT 12
25183: PUSH
25184: LD_INT 13
25186: PUSH
25187: LD_INT 14
25189: PUSH
25190: LD_INT 15
25192: PUSH
25193: LD_INT 16
25195: PUSH
25196: LD_INT 17
25198: PUSH
25199: LD_INT 18
25201: PUSH
25202: LD_INT 19
25204: PUSH
25205: LD_INT 20
25207: PUSH
25208: LD_INT 21
25210: PUSH
25211: LD_INT 22
25213: PUSH
25214: LD_INT 23
25216: PUSH
25217: LD_INT 24
25219: PUSH
25220: LD_INT 25
25222: PUSH
25223: LD_INT 26
25225: PUSH
25226: LD_INT 28
25228: PUSH
25229: LD_INT 30
25231: PUSH
25232: LD_INT 31
25234: PUSH
25235: LD_INT 32
25237: PUSH
25238: LD_INT 34
25240: PUSH
25241: LD_INT 36
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 101
25279: PUSH
25280: LD_INT 102
25282: PUSH
25283: LD_INT 103
25285: PUSH
25286: LD_INT 104
25288: PUSH
25289: LD_INT 105
25291: PUSH
25292: LD_INT 106
25294: PUSH
25295: LD_INT 107
25297: PUSH
25298: LD_INT 108
25300: PUSH
25301: LD_INT 109
25303: PUSH
25304: LD_INT 110
25306: PUSH
25307: LD_INT 111
25309: PUSH
25310: LD_INT 112
25312: PUSH
25313: LD_INT 114
25315: PUSH
25316: LD_INT 116
25318: PUSH
25319: LD_INT 117
25321: PUSH
25322: LD_INT 118
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: ST_TO_ADDR
25347: GO 27030
25349: LD_INT 12
25351: DOUBLE
25352: EQUAL
25353: IFTRUE 25357
25355: GO 25577
25357: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
25358: LD_ADDR_VAR 0 2
25362: PUSH
25363: LD_INT 1
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: LD_INT 3
25371: PUSH
25372: LD_INT 4
25374: PUSH
25375: LD_INT 5
25377: PUSH
25378: LD_INT 6
25380: PUSH
25381: LD_INT 7
25383: PUSH
25384: LD_INT 8
25386: PUSH
25387: LD_INT 9
25389: PUSH
25390: LD_INT 10
25392: PUSH
25393: LD_INT 11
25395: PUSH
25396: LD_INT 12
25398: PUSH
25399: LD_INT 13
25401: PUSH
25402: LD_INT 14
25404: PUSH
25405: LD_INT 15
25407: PUSH
25408: LD_INT 16
25410: PUSH
25411: LD_INT 17
25413: PUSH
25414: LD_INT 18
25416: PUSH
25417: LD_INT 19
25419: PUSH
25420: LD_INT 20
25422: PUSH
25423: LD_INT 21
25425: PUSH
25426: LD_INT 22
25428: PUSH
25429: LD_INT 23
25431: PUSH
25432: LD_INT 24
25434: PUSH
25435: LD_INT 25
25437: PUSH
25438: LD_INT 26
25440: PUSH
25441: LD_INT 27
25443: PUSH
25444: LD_INT 28
25446: PUSH
25447: LD_INT 30
25449: PUSH
25450: LD_INT 31
25452: PUSH
25453: LD_INT 32
25455: PUSH
25456: LD_INT 33
25458: PUSH
25459: LD_INT 34
25461: PUSH
25462: LD_INT 36
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 101
25503: PUSH
25504: LD_INT 102
25506: PUSH
25507: LD_INT 103
25509: PUSH
25510: LD_INT 104
25512: PUSH
25513: LD_INT 105
25515: PUSH
25516: LD_INT 106
25518: PUSH
25519: LD_INT 107
25521: PUSH
25522: LD_INT 108
25524: PUSH
25525: LD_INT 109
25527: PUSH
25528: LD_INT 110
25530: PUSH
25531: LD_INT 111
25533: PUSH
25534: LD_INT 112
25536: PUSH
25537: LD_INT 113
25539: PUSH
25540: LD_INT 114
25542: PUSH
25543: LD_INT 116
25545: PUSH
25546: LD_INT 117
25548: PUSH
25549: LD_INT 118
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: ST_TO_ADDR
25575: GO 27030
25577: LD_INT 13
25579: DOUBLE
25580: EQUAL
25581: IFTRUE 25585
25583: GO 25793
25585: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
25586: LD_ADDR_VAR 0 2
25590: PUSH
25591: LD_INT 1
25593: PUSH
25594: LD_INT 2
25596: PUSH
25597: LD_INT 3
25599: PUSH
25600: LD_INT 4
25602: PUSH
25603: LD_INT 5
25605: PUSH
25606: LD_INT 8
25608: PUSH
25609: LD_INT 9
25611: PUSH
25612: LD_INT 10
25614: PUSH
25615: LD_INT 11
25617: PUSH
25618: LD_INT 12
25620: PUSH
25621: LD_INT 14
25623: PUSH
25624: LD_INT 15
25626: PUSH
25627: LD_INT 16
25629: PUSH
25630: LD_INT 17
25632: PUSH
25633: LD_INT 18
25635: PUSH
25636: LD_INT 19
25638: PUSH
25639: LD_INT 20
25641: PUSH
25642: LD_INT 21
25644: PUSH
25645: LD_INT 22
25647: PUSH
25648: LD_INT 23
25650: PUSH
25651: LD_INT 24
25653: PUSH
25654: LD_INT 25
25656: PUSH
25657: LD_INT 26
25659: PUSH
25660: LD_INT 27
25662: PUSH
25663: LD_INT 28
25665: PUSH
25666: LD_INT 30
25668: PUSH
25669: LD_INT 31
25671: PUSH
25672: LD_INT 32
25674: PUSH
25675: LD_INT 33
25677: PUSH
25678: LD_INT 34
25680: PUSH
25681: LD_INT 36
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 101
25719: PUSH
25720: LD_INT 102
25722: PUSH
25723: LD_INT 103
25725: PUSH
25726: LD_INT 104
25728: PUSH
25729: LD_INT 105
25731: PUSH
25732: LD_INT 106
25734: PUSH
25735: LD_INT 107
25737: PUSH
25738: LD_INT 108
25740: PUSH
25741: LD_INT 109
25743: PUSH
25744: LD_INT 110
25746: PUSH
25747: LD_INT 111
25749: PUSH
25750: LD_INT 112
25752: PUSH
25753: LD_INT 113
25755: PUSH
25756: LD_INT 114
25758: PUSH
25759: LD_INT 116
25761: PUSH
25762: LD_INT 117
25764: PUSH
25765: LD_INT 118
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: ST_TO_ADDR
25791: GO 27030
25793: LD_INT 14
25795: DOUBLE
25796: EQUAL
25797: IFTRUE 25801
25799: GO 26025
25801: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
25802: LD_ADDR_VAR 0 2
25806: PUSH
25807: LD_INT 1
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: LD_INT 3
25815: PUSH
25816: LD_INT 4
25818: PUSH
25819: LD_INT 5
25821: PUSH
25822: LD_INT 6
25824: PUSH
25825: LD_INT 7
25827: PUSH
25828: LD_INT 8
25830: PUSH
25831: LD_INT 9
25833: PUSH
25834: LD_INT 10
25836: PUSH
25837: LD_INT 11
25839: PUSH
25840: LD_INT 12
25842: PUSH
25843: LD_INT 13
25845: PUSH
25846: LD_INT 14
25848: PUSH
25849: LD_INT 15
25851: PUSH
25852: LD_INT 16
25854: PUSH
25855: LD_INT 17
25857: PUSH
25858: LD_INT 18
25860: PUSH
25861: LD_INT 19
25863: PUSH
25864: LD_INT 20
25866: PUSH
25867: LD_INT 21
25869: PUSH
25870: LD_INT 22
25872: PUSH
25873: LD_INT 23
25875: PUSH
25876: LD_INT 24
25878: PUSH
25879: LD_INT 25
25881: PUSH
25882: LD_INT 26
25884: PUSH
25885: LD_INT 27
25887: PUSH
25888: LD_INT 28
25890: PUSH
25891: LD_INT 29
25893: PUSH
25894: LD_INT 30
25896: PUSH
25897: LD_INT 31
25899: PUSH
25900: LD_INT 32
25902: PUSH
25903: LD_INT 33
25905: PUSH
25906: LD_INT 34
25908: PUSH
25909: LD_INT 36
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 101
25951: PUSH
25952: LD_INT 102
25954: PUSH
25955: LD_INT 103
25957: PUSH
25958: LD_INT 104
25960: PUSH
25961: LD_INT 105
25963: PUSH
25964: LD_INT 106
25966: PUSH
25967: LD_INT 107
25969: PUSH
25970: LD_INT 108
25972: PUSH
25973: LD_INT 109
25975: PUSH
25976: LD_INT 110
25978: PUSH
25979: LD_INT 111
25981: PUSH
25982: LD_INT 112
25984: PUSH
25985: LD_INT 113
25987: PUSH
25988: LD_INT 114
25990: PUSH
25991: LD_INT 116
25993: PUSH
25994: LD_INT 117
25996: PUSH
25997: LD_INT 118
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: ST_TO_ADDR
26023: GO 27030
26025: LD_INT 15
26027: DOUBLE
26028: EQUAL
26029: IFTRUE 26033
26031: GO 26257
26033: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
26034: LD_ADDR_VAR 0 2
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: LD_INT 2
26044: PUSH
26045: LD_INT 3
26047: PUSH
26048: LD_INT 4
26050: PUSH
26051: LD_INT 5
26053: PUSH
26054: LD_INT 6
26056: PUSH
26057: LD_INT 7
26059: PUSH
26060: LD_INT 8
26062: PUSH
26063: LD_INT 9
26065: PUSH
26066: LD_INT 10
26068: PUSH
26069: LD_INT 11
26071: PUSH
26072: LD_INT 12
26074: PUSH
26075: LD_INT 13
26077: PUSH
26078: LD_INT 14
26080: PUSH
26081: LD_INT 15
26083: PUSH
26084: LD_INT 16
26086: PUSH
26087: LD_INT 17
26089: PUSH
26090: LD_INT 18
26092: PUSH
26093: LD_INT 19
26095: PUSH
26096: LD_INT 20
26098: PUSH
26099: LD_INT 21
26101: PUSH
26102: LD_INT 22
26104: PUSH
26105: LD_INT 23
26107: PUSH
26108: LD_INT 24
26110: PUSH
26111: LD_INT 25
26113: PUSH
26114: LD_INT 26
26116: PUSH
26117: LD_INT 27
26119: PUSH
26120: LD_INT 28
26122: PUSH
26123: LD_INT 29
26125: PUSH
26126: LD_INT 30
26128: PUSH
26129: LD_INT 31
26131: PUSH
26132: LD_INT 32
26134: PUSH
26135: LD_INT 33
26137: PUSH
26138: LD_INT 34
26140: PUSH
26141: LD_INT 36
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 101
26183: PUSH
26184: LD_INT 102
26186: PUSH
26187: LD_INT 103
26189: PUSH
26190: LD_INT 104
26192: PUSH
26193: LD_INT 105
26195: PUSH
26196: LD_INT 106
26198: PUSH
26199: LD_INT 107
26201: PUSH
26202: LD_INT 108
26204: PUSH
26205: LD_INT 109
26207: PUSH
26208: LD_INT 110
26210: PUSH
26211: LD_INT 111
26213: PUSH
26214: LD_INT 112
26216: PUSH
26217: LD_INT 113
26219: PUSH
26220: LD_INT 114
26222: PUSH
26223: LD_INT 116
26225: PUSH
26226: LD_INT 117
26228: PUSH
26229: LD_INT 118
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: ST_TO_ADDR
26255: GO 27030
26257: LD_INT 16
26259: DOUBLE
26260: EQUAL
26261: IFTRUE 26265
26263: GO 26401
26265: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
26266: LD_ADDR_VAR 0 2
26270: PUSH
26271: LD_INT 2
26273: PUSH
26274: LD_INT 4
26276: PUSH
26277: LD_INT 5
26279: PUSH
26280: LD_INT 7
26282: PUSH
26283: LD_INT 11
26285: PUSH
26286: LD_INT 12
26288: PUSH
26289: LD_INT 15
26291: PUSH
26292: LD_INT 16
26294: PUSH
26295: LD_INT 20
26297: PUSH
26298: LD_INT 21
26300: PUSH
26301: LD_INT 22
26303: PUSH
26304: LD_INT 23
26306: PUSH
26307: LD_INT 25
26309: PUSH
26310: LD_INT 26
26312: PUSH
26313: LD_INT 30
26315: PUSH
26316: LD_INT 31
26318: PUSH
26319: LD_INT 32
26321: PUSH
26322: LD_INT 33
26324: PUSH
26325: LD_INT 34
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 101
26351: PUSH
26352: LD_INT 102
26354: PUSH
26355: LD_INT 103
26357: PUSH
26358: LD_INT 106
26360: PUSH
26361: LD_INT 108
26363: PUSH
26364: LD_INT 112
26366: PUSH
26367: LD_INT 113
26369: PUSH
26370: LD_INT 114
26372: PUSH
26373: LD_INT 116
26375: PUSH
26376: LD_INT 117
26378: PUSH
26379: LD_INT 118
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: ST_TO_ADDR
26399: GO 27030
26401: LD_INT 17
26403: DOUBLE
26404: EQUAL
26405: IFTRUE 26409
26407: GO 26633
26409: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
26410: LD_ADDR_VAR 0 2
26414: PUSH
26415: LD_INT 1
26417: PUSH
26418: LD_INT 2
26420: PUSH
26421: LD_INT 3
26423: PUSH
26424: LD_INT 4
26426: PUSH
26427: LD_INT 5
26429: PUSH
26430: LD_INT 6
26432: PUSH
26433: LD_INT 7
26435: PUSH
26436: LD_INT 8
26438: PUSH
26439: LD_INT 9
26441: PUSH
26442: LD_INT 10
26444: PUSH
26445: LD_INT 11
26447: PUSH
26448: LD_INT 12
26450: PUSH
26451: LD_INT 13
26453: PUSH
26454: LD_INT 14
26456: PUSH
26457: LD_INT 15
26459: PUSH
26460: LD_INT 16
26462: PUSH
26463: LD_INT 17
26465: PUSH
26466: LD_INT 18
26468: PUSH
26469: LD_INT 19
26471: PUSH
26472: LD_INT 20
26474: PUSH
26475: LD_INT 21
26477: PUSH
26478: LD_INT 22
26480: PUSH
26481: LD_INT 23
26483: PUSH
26484: LD_INT 24
26486: PUSH
26487: LD_INT 25
26489: PUSH
26490: LD_INT 26
26492: PUSH
26493: LD_INT 27
26495: PUSH
26496: LD_INT 28
26498: PUSH
26499: LD_INT 29
26501: PUSH
26502: LD_INT 30
26504: PUSH
26505: LD_INT 31
26507: PUSH
26508: LD_INT 32
26510: PUSH
26511: LD_INT 33
26513: PUSH
26514: LD_INT 34
26516: PUSH
26517: LD_INT 36
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 101
26559: PUSH
26560: LD_INT 102
26562: PUSH
26563: LD_INT 103
26565: PUSH
26566: LD_INT 104
26568: PUSH
26569: LD_INT 105
26571: PUSH
26572: LD_INT 106
26574: PUSH
26575: LD_INT 107
26577: PUSH
26578: LD_INT 108
26580: PUSH
26581: LD_INT 109
26583: PUSH
26584: LD_INT 110
26586: PUSH
26587: LD_INT 111
26589: PUSH
26590: LD_INT 112
26592: PUSH
26593: LD_INT 113
26595: PUSH
26596: LD_INT 114
26598: PUSH
26599: LD_INT 116
26601: PUSH
26602: LD_INT 117
26604: PUSH
26605: LD_INT 118
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: ST_TO_ADDR
26631: GO 27030
26633: LD_INT 18
26635: DOUBLE
26636: EQUAL
26637: IFTRUE 26641
26639: GO 26789
26641: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
26642: LD_ADDR_VAR 0 2
26646: PUSH
26647: LD_INT 2
26649: PUSH
26650: LD_INT 4
26652: PUSH
26653: LD_INT 5
26655: PUSH
26656: LD_INT 7
26658: PUSH
26659: LD_INT 11
26661: PUSH
26662: LD_INT 12
26664: PUSH
26665: LD_INT 15
26667: PUSH
26668: LD_INT 16
26670: PUSH
26671: LD_INT 20
26673: PUSH
26674: LD_INT 21
26676: PUSH
26677: LD_INT 22
26679: PUSH
26680: LD_INT 23
26682: PUSH
26683: LD_INT 25
26685: PUSH
26686: LD_INT 26
26688: PUSH
26689: LD_INT 30
26691: PUSH
26692: LD_INT 31
26694: PUSH
26695: LD_INT 32
26697: PUSH
26698: LD_INT 33
26700: PUSH
26701: LD_INT 34
26703: PUSH
26704: LD_INT 35
26706: PUSH
26707: LD_INT 36
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 101
26735: PUSH
26736: LD_INT 102
26738: PUSH
26739: LD_INT 103
26741: PUSH
26742: LD_INT 106
26744: PUSH
26745: LD_INT 108
26747: PUSH
26748: LD_INT 112
26750: PUSH
26751: LD_INT 113
26753: PUSH
26754: LD_INT 114
26756: PUSH
26757: LD_INT 115
26759: PUSH
26760: LD_INT 116
26762: PUSH
26763: LD_INT 117
26765: PUSH
26766: LD_INT 118
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: ST_TO_ADDR
26787: GO 27030
26789: LD_INT 19
26791: DOUBLE
26792: EQUAL
26793: IFTRUE 26797
26795: GO 27029
26797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
26798: LD_ADDR_VAR 0 2
26802: PUSH
26803: LD_INT 1
26805: PUSH
26806: LD_INT 2
26808: PUSH
26809: LD_INT 3
26811: PUSH
26812: LD_INT 4
26814: PUSH
26815: LD_INT 5
26817: PUSH
26818: LD_INT 6
26820: PUSH
26821: LD_INT 7
26823: PUSH
26824: LD_INT 8
26826: PUSH
26827: LD_INT 9
26829: PUSH
26830: LD_INT 10
26832: PUSH
26833: LD_INT 11
26835: PUSH
26836: LD_INT 12
26838: PUSH
26839: LD_INT 13
26841: PUSH
26842: LD_INT 14
26844: PUSH
26845: LD_INT 15
26847: PUSH
26848: LD_INT 16
26850: PUSH
26851: LD_INT 17
26853: PUSH
26854: LD_INT 18
26856: PUSH
26857: LD_INT 19
26859: PUSH
26860: LD_INT 20
26862: PUSH
26863: LD_INT 21
26865: PUSH
26866: LD_INT 22
26868: PUSH
26869: LD_INT 23
26871: PUSH
26872: LD_INT 24
26874: PUSH
26875: LD_INT 25
26877: PUSH
26878: LD_INT 26
26880: PUSH
26881: LD_INT 27
26883: PUSH
26884: LD_INT 28
26886: PUSH
26887: LD_INT 29
26889: PUSH
26890: LD_INT 30
26892: PUSH
26893: LD_INT 31
26895: PUSH
26896: LD_INT 32
26898: PUSH
26899: LD_INT 33
26901: PUSH
26902: LD_INT 34
26904: PUSH
26905: LD_INT 35
26907: PUSH
26908: LD_INT 36
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 101
26951: PUSH
26952: LD_INT 102
26954: PUSH
26955: LD_INT 103
26957: PUSH
26958: LD_INT 104
26960: PUSH
26961: LD_INT 105
26963: PUSH
26964: LD_INT 106
26966: PUSH
26967: LD_INT 107
26969: PUSH
26970: LD_INT 108
26972: PUSH
26973: LD_INT 109
26975: PUSH
26976: LD_INT 110
26978: PUSH
26979: LD_INT 111
26981: PUSH
26982: LD_INT 112
26984: PUSH
26985: LD_INT 113
26987: PUSH
26988: LD_INT 114
26990: PUSH
26991: LD_INT 115
26993: PUSH
26994: LD_INT 116
26996: PUSH
26997: LD_INT 117
26999: PUSH
27000: LD_INT 118
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: ST_TO_ADDR
27027: GO 27030
27029: POP
// end else
27030: GO 27261
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
27032: LD_ADDR_VAR 0 2
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: LD_INT 2
27042: PUSH
27043: LD_INT 3
27045: PUSH
27046: LD_INT 4
27048: PUSH
27049: LD_INT 5
27051: PUSH
27052: LD_INT 6
27054: PUSH
27055: LD_INT 7
27057: PUSH
27058: LD_INT 8
27060: PUSH
27061: LD_INT 9
27063: PUSH
27064: LD_INT 10
27066: PUSH
27067: LD_INT 11
27069: PUSH
27070: LD_INT 12
27072: PUSH
27073: LD_INT 13
27075: PUSH
27076: LD_INT 14
27078: PUSH
27079: LD_INT 15
27081: PUSH
27082: LD_INT 16
27084: PUSH
27085: LD_INT 17
27087: PUSH
27088: LD_INT 18
27090: PUSH
27091: LD_INT 19
27093: PUSH
27094: LD_INT 20
27096: PUSH
27097: LD_INT 21
27099: PUSH
27100: LD_INT 22
27102: PUSH
27103: LD_INT 23
27105: PUSH
27106: LD_INT 24
27108: PUSH
27109: LD_INT 25
27111: PUSH
27112: LD_INT 26
27114: PUSH
27115: LD_INT 27
27117: PUSH
27118: LD_INT 28
27120: PUSH
27121: LD_INT 29
27123: PUSH
27124: LD_INT 30
27126: PUSH
27127: LD_INT 31
27129: PUSH
27130: LD_INT 32
27132: PUSH
27133: LD_INT 33
27135: PUSH
27136: LD_INT 34
27138: PUSH
27139: LD_INT 35
27141: PUSH
27142: LD_INT 36
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 101
27185: PUSH
27186: LD_INT 102
27188: PUSH
27189: LD_INT 103
27191: PUSH
27192: LD_INT 104
27194: PUSH
27195: LD_INT 105
27197: PUSH
27198: LD_INT 106
27200: PUSH
27201: LD_INT 107
27203: PUSH
27204: LD_INT 108
27206: PUSH
27207: LD_INT 109
27209: PUSH
27210: LD_INT 110
27212: PUSH
27213: LD_INT 111
27215: PUSH
27216: LD_INT 112
27218: PUSH
27219: LD_INT 113
27221: PUSH
27222: LD_INT 114
27224: PUSH
27225: LD_INT 115
27227: PUSH
27228: LD_INT 116
27230: PUSH
27231: LD_INT 117
27233: PUSH
27234: LD_INT 118
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: ST_TO_ADDR
// if result then
27261: LD_VAR 0 2
27265: IFFALSE 28051
// begin normal :=  ;
27267: LD_ADDR_VAR 0 5
27271: PUSH
27272: LD_STRING 
27274: ST_TO_ADDR
// hardcore :=  ;
27275: LD_ADDR_VAR 0 6
27279: PUSH
27280: LD_STRING 
27282: ST_TO_ADDR
// active :=  ;
27283: LD_ADDR_VAR 0 7
27287: PUSH
27288: LD_STRING 
27290: ST_TO_ADDR
// for i = 1 to normalCounter do
27291: LD_ADDR_VAR 0 8
27295: PUSH
27296: DOUBLE
27297: LD_INT 1
27299: DEC
27300: ST_TO_ADDR
27301: LD_EXP 52
27305: PUSH
27306: FOR_TO
27307: IFFALSE 27408
// begin tmp := 0 ;
27309: LD_ADDR_VAR 0 3
27313: PUSH
27314: LD_STRING 0
27316: ST_TO_ADDR
// if result [ 1 ] then
27317: LD_VAR 0 2
27321: PUSH
27322: LD_INT 1
27324: ARRAY
27325: IFFALSE 27390
// if result [ 1 ] [ 1 ] = i then
27327: LD_VAR 0 2
27331: PUSH
27332: LD_INT 1
27334: ARRAY
27335: PUSH
27336: LD_INT 1
27338: ARRAY
27339: PUSH
27340: LD_VAR 0 8
27344: EQUAL
27345: IFFALSE 27390
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27347: LD_ADDR_VAR 0 2
27351: PUSH
27352: LD_VAR 0 2
27356: PPUSH
27357: LD_INT 1
27359: PPUSH
27360: LD_VAR 0 2
27364: PUSH
27365: LD_INT 1
27367: ARRAY
27368: PPUSH
27369: LD_INT 1
27371: PPUSH
27372: CALL_OW 3
27376: PPUSH
27377: CALL_OW 1
27381: ST_TO_ADDR
// tmp := 1 ;
27382: LD_ADDR_VAR 0 3
27386: PUSH
27387: LD_STRING 1
27389: ST_TO_ADDR
// end ; normal := normal & tmp ;
27390: LD_ADDR_VAR 0 5
27394: PUSH
27395: LD_VAR 0 5
27399: PUSH
27400: LD_VAR 0 3
27404: STR
27405: ST_TO_ADDR
// end ;
27406: GO 27306
27408: POP
27409: POP
// for i = 1 to hardcoreCounter do
27410: LD_ADDR_VAR 0 8
27414: PUSH
27415: DOUBLE
27416: LD_INT 1
27418: DEC
27419: ST_TO_ADDR
27420: LD_EXP 53
27424: PUSH
27425: FOR_TO
27426: IFFALSE 27531
// begin tmp := 0 ;
27428: LD_ADDR_VAR 0 3
27432: PUSH
27433: LD_STRING 0
27435: ST_TO_ADDR
// if result [ 2 ] then
27436: LD_VAR 0 2
27440: PUSH
27441: LD_INT 2
27443: ARRAY
27444: IFFALSE 27513
// if result [ 2 ] [ 1 ] = 100 + i then
27446: LD_VAR 0 2
27450: PUSH
27451: LD_INT 2
27453: ARRAY
27454: PUSH
27455: LD_INT 1
27457: ARRAY
27458: PUSH
27459: LD_INT 100
27461: PUSH
27462: LD_VAR 0 8
27466: PLUS
27467: EQUAL
27468: IFFALSE 27513
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27470: LD_ADDR_VAR 0 2
27474: PUSH
27475: LD_VAR 0 2
27479: PPUSH
27480: LD_INT 2
27482: PPUSH
27483: LD_VAR 0 2
27487: PUSH
27488: LD_INT 2
27490: ARRAY
27491: PPUSH
27492: LD_INT 1
27494: PPUSH
27495: CALL_OW 3
27499: PPUSH
27500: CALL_OW 1
27504: ST_TO_ADDR
// tmp := 1 ;
27505: LD_ADDR_VAR 0 3
27509: PUSH
27510: LD_STRING 1
27512: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27513: LD_ADDR_VAR 0 6
27517: PUSH
27518: LD_VAR 0 6
27522: PUSH
27523: LD_VAR 0 3
27527: STR
27528: ST_TO_ADDR
// end ;
27529: GO 27425
27531: POP
27532: POP
// if isGameLoad then
27533: LD_VAR 0 1
27537: IFFALSE 28012
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
27539: LD_ADDR_VAR 0 4
27543: PUSH
27544: LD_EXP 56
27548: PUSH
27549: LD_EXP 55
27553: PUSH
27554: LD_EXP 57
27558: PUSH
27559: LD_EXP 54
27563: PUSH
27564: LD_EXP 58
27568: PUSH
27569: LD_EXP 59
27573: PUSH
27574: LD_EXP 60
27578: PUSH
27579: LD_EXP 61
27583: PUSH
27584: LD_EXP 62
27588: PUSH
27589: LD_EXP 63
27593: PUSH
27594: LD_EXP 64
27598: PUSH
27599: LD_EXP 65
27603: PUSH
27604: LD_EXP 66
27608: PUSH
27609: LD_EXP 67
27613: PUSH
27614: LD_EXP 75
27618: PUSH
27619: LD_EXP 76
27623: PUSH
27624: LD_EXP 77
27628: PUSH
27629: LD_EXP 78
27633: PUSH
27634: LD_EXP 80
27638: PUSH
27639: LD_EXP 81
27643: PUSH
27644: LD_EXP 82
27648: PUSH
27649: LD_EXP 85
27653: PUSH
27654: LD_EXP 87
27658: PUSH
27659: LD_EXP 88
27663: PUSH
27664: LD_EXP 89
27668: PUSH
27669: LD_EXP 91
27673: PUSH
27674: LD_EXP 92
27678: PUSH
27679: LD_EXP 95
27683: PUSH
27684: LD_EXP 96
27688: PUSH
27689: LD_EXP 97
27693: PUSH
27694: LD_EXP 98
27698: PUSH
27699: LD_EXP 99
27703: PUSH
27704: LD_EXP 100
27708: PUSH
27709: LD_EXP 101
27713: PUSH
27714: LD_EXP 102
27718: PUSH
27719: LD_EXP 103
27723: PUSH
27724: LD_EXP 68
27728: PUSH
27729: LD_EXP 69
27733: PUSH
27734: LD_EXP 72
27738: PUSH
27739: LD_EXP 73
27743: PUSH
27744: LD_EXP 74
27748: PUSH
27749: LD_EXP 70
27753: PUSH
27754: LD_EXP 71
27758: PUSH
27759: LD_EXP 79
27763: PUSH
27764: LD_EXP 83
27768: PUSH
27769: LD_EXP 84
27773: PUSH
27774: LD_EXP 86
27778: PUSH
27779: LD_EXP 90
27783: PUSH
27784: LD_EXP 93
27788: PUSH
27789: LD_EXP 94
27793: PUSH
27794: LD_EXP 104
27798: PUSH
27799: LD_EXP 105
27803: PUSH
27804: LD_EXP 106
27808: PUSH
27809: LD_EXP 107
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: ST_TO_ADDR
// tmp :=  ;
27870: LD_ADDR_VAR 0 3
27874: PUSH
27875: LD_STRING 
27877: ST_TO_ADDR
// for i = 1 to normalCounter do
27878: LD_ADDR_VAR 0 8
27882: PUSH
27883: DOUBLE
27884: LD_INT 1
27886: DEC
27887: ST_TO_ADDR
27888: LD_EXP 52
27892: PUSH
27893: FOR_TO
27894: IFFALSE 27930
// begin if flags [ i ] then
27896: LD_VAR 0 4
27900: PUSH
27901: LD_VAR 0 8
27905: ARRAY
27906: IFFALSE 27928
// tmp := tmp & i & ; ;
27908: LD_ADDR_VAR 0 3
27912: PUSH
27913: LD_VAR 0 3
27917: PUSH
27918: LD_VAR 0 8
27922: STR
27923: PUSH
27924: LD_STRING ;
27926: STR
27927: ST_TO_ADDR
// end ;
27928: GO 27893
27930: POP
27931: POP
// for i = 1 to hardcoreCounter do
27932: LD_ADDR_VAR 0 8
27936: PUSH
27937: DOUBLE
27938: LD_INT 1
27940: DEC
27941: ST_TO_ADDR
27942: LD_EXP 53
27946: PUSH
27947: FOR_TO
27948: IFFALSE 27994
// begin if flags [ normalCounter + i ] then
27950: LD_VAR 0 4
27954: PUSH
27955: LD_EXP 52
27959: PUSH
27960: LD_VAR 0 8
27964: PLUS
27965: ARRAY
27966: IFFALSE 27992
// tmp := tmp & ( 100 + i ) & ; ;
27968: LD_ADDR_VAR 0 3
27972: PUSH
27973: LD_VAR 0 3
27977: PUSH
27978: LD_INT 100
27980: PUSH
27981: LD_VAR 0 8
27985: PLUS
27986: STR
27987: PUSH
27988: LD_STRING ;
27990: STR
27991: ST_TO_ADDR
// end ;
27992: GO 27947
27994: POP
27995: POP
// if tmp then
27996: LD_VAR 0 3
28000: IFFALSE 28012
// active := tmp ;
28002: LD_ADDR_VAR 0 7
28006: PUSH
28007: LD_VAR 0 3
28011: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
28012: LD_STRING getStreamItemsFromMission("
28014: PUSH
28015: LD_VAR 0 5
28019: STR
28020: PUSH
28021: LD_STRING ","
28023: STR
28024: PUSH
28025: LD_VAR 0 6
28029: STR
28030: PUSH
28031: LD_STRING ","
28033: STR
28034: PUSH
28035: LD_VAR 0 7
28039: STR
28040: PUSH
28041: LD_STRING ")
28043: STR
28044: PPUSH
28045: CALL_OW 559
// end else
28049: GO 28058
// ToLua ( getStreamItemsFromMission("","","") ) ;
28051: LD_STRING getStreamItemsFromMission("","","")
28053: PPUSH
28054: CALL_OW 559
// end ;
28058: LD_VAR 0 2
28062: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
28063: LD_EXP 51
28067: PUSH
28068: LD_EXP 56
28072: AND
28073: IFFALSE 28197
28075: GO 28077
28077: DISABLE
28078: LD_INT 0
28080: PPUSH
28081: PPUSH
// begin enable ;
28082: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
28083: LD_ADDR_VAR 0 2
28087: PUSH
28088: LD_INT 22
28090: PUSH
28091: LD_OWVAR 2
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 2
28102: PUSH
28103: LD_INT 34
28105: PUSH
28106: LD_INT 7
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 34
28115: PUSH
28116: LD_INT 45
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 34
28125: PUSH
28126: LD_INT 28
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 34
28135: PUSH
28136: LD_INT 47
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PPUSH
28154: CALL_OW 69
28158: ST_TO_ADDR
// if not tmp then
28159: LD_VAR 0 2
28163: NOT
28164: IFFALSE 28168
// exit ;
28166: GO 28197
// for i in tmp do
28168: LD_ADDR_VAR 0 1
28172: PUSH
28173: LD_VAR 0 2
28177: PUSH
28178: FOR_IN
28179: IFFALSE 28195
// begin SetLives ( i , 0 ) ;
28181: LD_VAR 0 1
28185: PPUSH
28186: LD_INT 0
28188: PPUSH
28189: CALL_OW 234
// end ;
28193: GO 28178
28195: POP
28196: POP
// end ;
28197: PPOPN 2
28199: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
28200: LD_EXP 51
28204: PUSH
28205: LD_EXP 57
28209: AND
28210: IFFALSE 28294
28212: GO 28214
28214: DISABLE
28215: LD_INT 0
28217: PPUSH
28218: PPUSH
// begin enable ;
28219: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
28220: LD_ADDR_VAR 0 2
28224: PUSH
28225: LD_INT 22
28227: PUSH
28228: LD_OWVAR 2
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 32
28239: PUSH
28240: LD_INT 3
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PPUSH
28251: CALL_OW 69
28255: ST_TO_ADDR
// if not tmp then
28256: LD_VAR 0 2
28260: NOT
28261: IFFALSE 28265
// exit ;
28263: GO 28294
// for i in tmp do
28265: LD_ADDR_VAR 0 1
28269: PUSH
28270: LD_VAR 0 2
28274: PUSH
28275: FOR_IN
28276: IFFALSE 28292
// begin SetLives ( i , 0 ) ;
28278: LD_VAR 0 1
28282: PPUSH
28283: LD_INT 0
28285: PPUSH
28286: CALL_OW 234
// end ;
28290: GO 28275
28292: POP
28293: POP
// end ;
28294: PPOPN 2
28296: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28297: LD_EXP 51
28301: PUSH
28302: LD_EXP 54
28306: AND
28307: IFFALSE 28400
28309: GO 28311
28311: DISABLE
28312: LD_INT 0
28314: PPUSH
// begin enable ;
28315: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28316: LD_ADDR_VAR 0 1
28320: PUSH
28321: LD_INT 22
28323: PUSH
28324: LD_OWVAR 2
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 2
28335: PUSH
28336: LD_INT 25
28338: PUSH
28339: LD_INT 5
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 25
28348: PUSH
28349: LD_INT 9
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 25
28358: PUSH
28359: LD_INT 8
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PPUSH
28376: CALL_OW 69
28380: PUSH
28381: FOR_IN
28382: IFFALSE 28398
// begin SetClass ( i , 1 ) ;
28384: LD_VAR 0 1
28388: PPUSH
28389: LD_INT 1
28391: PPUSH
28392: CALL_OW 336
// end ;
28396: GO 28381
28398: POP
28399: POP
// end ;
28400: PPOPN 1
28402: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28403: LD_EXP 51
28407: PUSH
28408: LD_EXP 55
28412: AND
28413: PUSH
28414: LD_OWVAR 65
28418: PUSH
28419: LD_INT 7
28421: LESS
28422: AND
28423: IFFALSE 28437
28425: GO 28427
28427: DISABLE
// begin enable ;
28428: ENABLE
// game_speed := 7 ;
28429: LD_ADDR_OWVAR 65
28433: PUSH
28434: LD_INT 7
28436: ST_TO_ADDR
// end ;
28437: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28438: LD_EXP 51
28442: PUSH
28443: LD_EXP 58
28447: AND
28448: IFFALSE 28650
28450: GO 28452
28452: DISABLE
28453: LD_INT 0
28455: PPUSH
28456: PPUSH
28457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28458: LD_ADDR_VAR 0 3
28462: PUSH
28463: LD_INT 81
28465: PUSH
28466: LD_OWVAR 2
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 21
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PPUSH
28489: CALL_OW 69
28493: ST_TO_ADDR
// if not tmp then
28494: LD_VAR 0 3
28498: NOT
28499: IFFALSE 28503
// exit ;
28501: GO 28650
// if tmp > 5 then
28503: LD_VAR 0 3
28507: PUSH
28508: LD_INT 5
28510: GREATER
28511: IFFALSE 28523
// k := 5 else
28513: LD_ADDR_VAR 0 2
28517: PUSH
28518: LD_INT 5
28520: ST_TO_ADDR
28521: GO 28533
// k := tmp ;
28523: LD_ADDR_VAR 0 2
28527: PUSH
28528: LD_VAR 0 3
28532: ST_TO_ADDR
// for i := 1 to k do
28533: LD_ADDR_VAR 0 1
28537: PUSH
28538: DOUBLE
28539: LD_INT 1
28541: DEC
28542: ST_TO_ADDR
28543: LD_VAR 0 2
28547: PUSH
28548: FOR_TO
28549: IFFALSE 28648
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28551: LD_VAR 0 3
28555: PUSH
28556: LD_VAR 0 1
28560: ARRAY
28561: PPUSH
28562: LD_VAR 0 1
28566: PUSH
28567: LD_INT 4
28569: MOD
28570: PUSH
28571: LD_INT 1
28573: PLUS
28574: PPUSH
28575: CALL_OW 259
28579: PUSH
28580: LD_INT 10
28582: LESS
28583: IFFALSE 28646
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28585: LD_VAR 0 3
28589: PUSH
28590: LD_VAR 0 1
28594: ARRAY
28595: PPUSH
28596: LD_VAR 0 1
28600: PUSH
28601: LD_INT 4
28603: MOD
28604: PUSH
28605: LD_INT 1
28607: PLUS
28608: PPUSH
28609: LD_VAR 0 3
28613: PUSH
28614: LD_VAR 0 1
28618: ARRAY
28619: PPUSH
28620: LD_VAR 0 1
28624: PUSH
28625: LD_INT 4
28627: MOD
28628: PUSH
28629: LD_INT 1
28631: PLUS
28632: PPUSH
28633: CALL_OW 259
28637: PUSH
28638: LD_INT 1
28640: PLUS
28641: PPUSH
28642: CALL_OW 237
28646: GO 28548
28648: POP
28649: POP
// end ;
28650: PPOPN 3
28652: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28653: LD_EXP 51
28657: PUSH
28658: LD_EXP 59
28662: AND
28663: IFFALSE 28683
28665: GO 28667
28667: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28668: LD_INT 4
28670: PPUSH
28671: LD_OWVAR 2
28675: PPUSH
28676: LD_INT 0
28678: PPUSH
28679: CALL_OW 324
28683: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28684: LD_EXP 51
28688: PUSH
28689: LD_EXP 88
28693: AND
28694: IFFALSE 28714
28696: GO 28698
28698: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28699: LD_INT 19
28701: PPUSH
28702: LD_OWVAR 2
28706: PPUSH
28707: LD_INT 0
28709: PPUSH
28710: CALL_OW 324
28714: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28715: LD_EXP 51
28719: PUSH
28720: LD_EXP 60
28724: AND
28725: IFFALSE 28827
28727: GO 28729
28729: DISABLE
28730: LD_INT 0
28732: PPUSH
28733: PPUSH
// begin enable ;
28734: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28735: LD_ADDR_VAR 0 2
28739: PUSH
28740: LD_INT 22
28742: PUSH
28743: LD_OWVAR 2
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 2
28754: PUSH
28755: LD_INT 34
28757: PUSH
28758: LD_INT 11
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 34
28767: PUSH
28768: LD_INT 30
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: LIST
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PPUSH
28784: CALL_OW 69
28788: ST_TO_ADDR
// if not tmp then
28789: LD_VAR 0 2
28793: NOT
28794: IFFALSE 28798
// exit ;
28796: GO 28827
// for i in tmp do
28798: LD_ADDR_VAR 0 1
28802: PUSH
28803: LD_VAR 0 2
28807: PUSH
28808: FOR_IN
28809: IFFALSE 28825
// begin SetLives ( i , 0 ) ;
28811: LD_VAR 0 1
28815: PPUSH
28816: LD_INT 0
28818: PPUSH
28819: CALL_OW 234
// end ;
28823: GO 28808
28825: POP
28826: POP
// end ;
28827: PPOPN 2
28829: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28830: LD_EXP 51
28834: PUSH
28835: LD_EXP 61
28839: AND
28840: IFFALSE 28860
28842: GO 28844
28844: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28845: LD_INT 32
28847: PPUSH
28848: LD_OWVAR 2
28852: PPUSH
28853: LD_INT 0
28855: PPUSH
28856: CALL_OW 324
28860: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28861: LD_EXP 51
28865: PUSH
28866: LD_EXP 62
28870: AND
28871: IFFALSE 29052
28873: GO 28875
28875: DISABLE
28876: LD_INT 0
28878: PPUSH
28879: PPUSH
28880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28881: LD_ADDR_VAR 0 2
28885: PUSH
28886: LD_INT 22
28888: PUSH
28889: LD_OWVAR 2
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 33
28900: PUSH
28901: LD_INT 3
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PPUSH
28912: CALL_OW 69
28916: ST_TO_ADDR
// if not tmp then
28917: LD_VAR 0 2
28921: NOT
28922: IFFALSE 28926
// exit ;
28924: GO 29052
// side := 0 ;
28926: LD_ADDR_VAR 0 3
28930: PUSH
28931: LD_INT 0
28933: ST_TO_ADDR
// for i := 1 to 8 do
28934: LD_ADDR_VAR 0 1
28938: PUSH
28939: DOUBLE
28940: LD_INT 1
28942: DEC
28943: ST_TO_ADDR
28944: LD_INT 8
28946: PUSH
28947: FOR_TO
28948: IFFALSE 28996
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28950: LD_OWVAR 2
28954: PUSH
28955: LD_VAR 0 1
28959: NONEQUAL
28960: PUSH
28961: LD_OWVAR 2
28965: PPUSH
28966: LD_VAR 0 1
28970: PPUSH
28971: CALL_OW 81
28975: PUSH
28976: LD_INT 2
28978: EQUAL
28979: AND
28980: IFFALSE 28994
// begin side := i ;
28982: LD_ADDR_VAR 0 3
28986: PUSH
28987: LD_VAR 0 1
28991: ST_TO_ADDR
// break ;
28992: GO 28996
// end ;
28994: GO 28947
28996: POP
28997: POP
// if not side then
28998: LD_VAR 0 3
29002: NOT
29003: IFFALSE 29007
// exit ;
29005: GO 29052
// for i := 1 to tmp do
29007: LD_ADDR_VAR 0 1
29011: PUSH
29012: DOUBLE
29013: LD_INT 1
29015: DEC
29016: ST_TO_ADDR
29017: LD_VAR 0 2
29021: PUSH
29022: FOR_TO
29023: IFFALSE 29050
// if Prob ( 60 ) then
29025: LD_INT 60
29027: PPUSH
29028: CALL_OW 13
29032: IFFALSE 29048
// SetSide ( i , side ) ;
29034: LD_VAR 0 1
29038: PPUSH
29039: LD_VAR 0 3
29043: PPUSH
29044: CALL_OW 235
29048: GO 29022
29050: POP
29051: POP
// end ;
29052: PPOPN 3
29054: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
29055: LD_EXP 51
29059: PUSH
29060: LD_EXP 64
29064: AND
29065: IFFALSE 29184
29067: GO 29069
29069: DISABLE
29070: LD_INT 0
29072: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
29073: LD_ADDR_VAR 0 1
29077: PUSH
29078: LD_INT 22
29080: PUSH
29081: LD_OWVAR 2
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 21
29092: PUSH
29093: LD_INT 1
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 3
29102: PUSH
29103: LD_INT 23
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: LIST
29121: PPUSH
29122: CALL_OW 69
29126: PUSH
29127: FOR_IN
29128: IFFALSE 29182
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
29130: LD_VAR 0 1
29134: PPUSH
29135: CALL_OW 257
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: LD_INT 2
29145: PUSH
29146: LD_INT 3
29148: PUSH
29149: LD_INT 4
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: IN
29158: IFFALSE 29180
// SetClass ( un , rand ( 1 , 4 ) ) ;
29160: LD_VAR 0 1
29164: PPUSH
29165: LD_INT 1
29167: PPUSH
29168: LD_INT 4
29170: PPUSH
29171: CALL_OW 12
29175: PPUSH
29176: CALL_OW 336
29180: GO 29127
29182: POP
29183: POP
// end ;
29184: PPOPN 1
29186: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
29187: LD_EXP 51
29191: PUSH
29192: LD_EXP 63
29196: AND
29197: IFFALSE 29276
29199: GO 29201
29201: DISABLE
29202: LD_INT 0
29204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29205: LD_ADDR_VAR 0 1
29209: PUSH
29210: LD_INT 22
29212: PUSH
29213: LD_OWVAR 2
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 21
29224: PUSH
29225: LD_INT 3
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PPUSH
29236: CALL_OW 69
29240: ST_TO_ADDR
// if not tmp then
29241: LD_VAR 0 1
29245: NOT
29246: IFFALSE 29250
// exit ;
29248: GO 29276
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
29250: LD_VAR 0 1
29254: PUSH
29255: LD_INT 1
29257: PPUSH
29258: LD_VAR 0 1
29262: PPUSH
29263: CALL_OW 12
29267: ARRAY
29268: PPUSH
29269: LD_INT 100
29271: PPUSH
29272: CALL_OW 234
// end ;
29276: PPOPN 1
29278: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29279: LD_EXP 51
29283: PUSH
29284: LD_EXP 65
29288: AND
29289: IFFALSE 29387
29291: GO 29293
29293: DISABLE
29294: LD_INT 0
29296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29297: LD_ADDR_VAR 0 1
29301: PUSH
29302: LD_INT 22
29304: PUSH
29305: LD_OWVAR 2
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 21
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PPUSH
29328: CALL_OW 69
29332: ST_TO_ADDR
// if not tmp then
29333: LD_VAR 0 1
29337: NOT
29338: IFFALSE 29342
// exit ;
29340: GO 29387
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29342: LD_VAR 0 1
29346: PUSH
29347: LD_INT 1
29349: PPUSH
29350: LD_VAR 0 1
29354: PPUSH
29355: CALL_OW 12
29359: ARRAY
29360: PPUSH
29361: LD_INT 1
29363: PPUSH
29364: LD_INT 4
29366: PPUSH
29367: CALL_OW 12
29371: PPUSH
29372: LD_INT 3000
29374: PPUSH
29375: LD_INT 9000
29377: PPUSH
29378: CALL_OW 12
29382: PPUSH
29383: CALL_OW 492
// end ;
29387: PPOPN 1
29389: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29390: LD_EXP 51
29394: PUSH
29395: LD_EXP 66
29399: AND
29400: IFFALSE 29420
29402: GO 29404
29404: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29405: LD_INT 1
29407: PPUSH
29408: LD_OWVAR 2
29412: PPUSH
29413: LD_INT 0
29415: PPUSH
29416: CALL_OW 324
29420: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29421: LD_EXP 51
29425: PUSH
29426: LD_EXP 67
29430: AND
29431: IFFALSE 29514
29433: GO 29435
29435: DISABLE
29436: LD_INT 0
29438: PPUSH
29439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29440: LD_ADDR_VAR 0 2
29444: PUSH
29445: LD_INT 22
29447: PUSH
29448: LD_OWVAR 2
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 21
29459: PUSH
29460: LD_INT 3
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PPUSH
29471: CALL_OW 69
29475: ST_TO_ADDR
// if not tmp then
29476: LD_VAR 0 2
29480: NOT
29481: IFFALSE 29485
// exit ;
29483: GO 29514
// for i in tmp do
29485: LD_ADDR_VAR 0 1
29489: PUSH
29490: LD_VAR 0 2
29494: PUSH
29495: FOR_IN
29496: IFFALSE 29512
// SetBLevel ( i , 10 ) ;
29498: LD_VAR 0 1
29502: PPUSH
29503: LD_INT 10
29505: PPUSH
29506: CALL_OW 241
29510: GO 29495
29512: POP
29513: POP
// end ;
29514: PPOPN 2
29516: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29517: LD_EXP 51
29521: PUSH
29522: LD_EXP 68
29526: AND
29527: IFFALSE 29638
29529: GO 29531
29531: DISABLE
29532: LD_INT 0
29534: PPUSH
29535: PPUSH
29536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29537: LD_ADDR_VAR 0 3
29541: PUSH
29542: LD_INT 22
29544: PUSH
29545: LD_OWVAR 2
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 25
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PPUSH
29568: CALL_OW 69
29572: ST_TO_ADDR
// if not tmp then
29573: LD_VAR 0 3
29577: NOT
29578: IFFALSE 29582
// exit ;
29580: GO 29638
// un := tmp [ rand ( 1 , tmp ) ] ;
29582: LD_ADDR_VAR 0 2
29586: PUSH
29587: LD_VAR 0 3
29591: PUSH
29592: LD_INT 1
29594: PPUSH
29595: LD_VAR 0 3
29599: PPUSH
29600: CALL_OW 12
29604: ARRAY
29605: ST_TO_ADDR
// if Crawls ( un ) then
29606: LD_VAR 0 2
29610: PPUSH
29611: CALL_OW 318
29615: IFFALSE 29626
// ComWalk ( un ) ;
29617: LD_VAR 0 2
29621: PPUSH
29622: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29626: LD_VAR 0 2
29630: PPUSH
29631: LD_INT 5
29633: PPUSH
29634: CALL_OW 336
// end ;
29638: PPOPN 3
29640: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29641: LD_EXP 51
29645: PUSH
29646: LD_EXP 69
29650: AND
29651: PUSH
29652: LD_OWVAR 67
29656: PUSH
29657: LD_INT 4
29659: LESS
29660: AND
29661: IFFALSE 29680
29663: GO 29665
29665: DISABLE
// begin Difficulty := Difficulty + 1 ;
29666: LD_ADDR_OWVAR 67
29670: PUSH
29671: LD_OWVAR 67
29675: PUSH
29676: LD_INT 1
29678: PLUS
29679: ST_TO_ADDR
// end ;
29680: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29681: LD_EXP 51
29685: PUSH
29686: LD_EXP 70
29690: AND
29691: IFFALSE 29794
29693: GO 29695
29695: DISABLE
29696: LD_INT 0
29698: PPUSH
// begin for i := 1 to 5 do
29699: LD_ADDR_VAR 0 1
29703: PUSH
29704: DOUBLE
29705: LD_INT 1
29707: DEC
29708: ST_TO_ADDR
29709: LD_INT 5
29711: PUSH
29712: FOR_TO
29713: IFFALSE 29792
// begin uc_nation := nation_nature ;
29715: LD_ADDR_OWVAR 21
29719: PUSH
29720: LD_INT 0
29722: ST_TO_ADDR
// uc_side := 0 ;
29723: LD_ADDR_OWVAR 20
29727: PUSH
29728: LD_INT 0
29730: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29731: LD_ADDR_OWVAR 29
29735: PUSH
29736: LD_INT 12
29738: PUSH
29739: LD_INT 12
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: ST_TO_ADDR
// hc_agressivity := 20 ;
29746: LD_ADDR_OWVAR 35
29750: PUSH
29751: LD_INT 20
29753: ST_TO_ADDR
// hc_class := class_tiger ;
29754: LD_ADDR_OWVAR 28
29758: PUSH
29759: LD_INT 14
29761: ST_TO_ADDR
// hc_gallery :=  ;
29762: LD_ADDR_OWVAR 33
29766: PUSH
29767: LD_STRING 
29769: ST_TO_ADDR
// hc_name :=  ;
29770: LD_ADDR_OWVAR 26
29774: PUSH
29775: LD_STRING 
29777: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29778: CALL_OW 44
29782: PPUSH
29783: LD_INT 0
29785: PPUSH
29786: CALL_OW 51
// end ;
29790: GO 29712
29792: POP
29793: POP
// end ;
29794: PPOPN 1
29796: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29797: LD_EXP 51
29801: PUSH
29802: LD_EXP 71
29806: AND
29807: IFFALSE 29816
29809: GO 29811
29811: DISABLE
// StreamSibBomb ;
29812: CALL 29817 0 0
29816: END
// export function StreamSibBomb ; var i , x , y ; begin
29817: LD_INT 0
29819: PPUSH
29820: PPUSH
29821: PPUSH
29822: PPUSH
// result := false ;
29823: LD_ADDR_VAR 0 1
29827: PUSH
29828: LD_INT 0
29830: ST_TO_ADDR
// for i := 1 to 16 do
29831: LD_ADDR_VAR 0 2
29835: PUSH
29836: DOUBLE
29837: LD_INT 1
29839: DEC
29840: ST_TO_ADDR
29841: LD_INT 16
29843: PUSH
29844: FOR_TO
29845: IFFALSE 30044
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29847: LD_ADDR_VAR 0 3
29851: PUSH
29852: LD_INT 10
29854: PUSH
29855: LD_INT 20
29857: PUSH
29858: LD_INT 30
29860: PUSH
29861: LD_INT 40
29863: PUSH
29864: LD_INT 50
29866: PUSH
29867: LD_INT 60
29869: PUSH
29870: LD_INT 70
29872: PUSH
29873: LD_INT 80
29875: PUSH
29876: LD_INT 90
29878: PUSH
29879: LD_INT 100
29881: PUSH
29882: LD_INT 110
29884: PUSH
29885: LD_INT 120
29887: PUSH
29888: LD_INT 130
29890: PUSH
29891: LD_INT 140
29893: PUSH
29894: LD_INT 150
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 1
29916: PPUSH
29917: LD_INT 15
29919: PPUSH
29920: CALL_OW 12
29924: ARRAY
29925: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29926: LD_ADDR_VAR 0 4
29930: PUSH
29931: LD_INT 10
29933: PUSH
29934: LD_INT 20
29936: PUSH
29937: LD_INT 30
29939: PUSH
29940: LD_INT 40
29942: PUSH
29943: LD_INT 50
29945: PUSH
29946: LD_INT 60
29948: PUSH
29949: LD_INT 70
29951: PUSH
29952: LD_INT 80
29954: PUSH
29955: LD_INT 90
29957: PUSH
29958: LD_INT 100
29960: PUSH
29961: LD_INT 110
29963: PUSH
29964: LD_INT 120
29966: PUSH
29967: LD_INT 130
29969: PUSH
29970: LD_INT 140
29972: PUSH
29973: LD_INT 150
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 1
29995: PPUSH
29996: LD_INT 15
29998: PPUSH
29999: CALL_OW 12
30003: ARRAY
30004: ST_TO_ADDR
// if ValidHex ( x , y ) then
30005: LD_VAR 0 3
30009: PPUSH
30010: LD_VAR 0 4
30014: PPUSH
30015: CALL_OW 488
30019: IFFALSE 30042
// begin result := [ x , y ] ;
30021: LD_ADDR_VAR 0 1
30025: PUSH
30026: LD_VAR 0 3
30030: PUSH
30031: LD_VAR 0 4
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: ST_TO_ADDR
// break ;
30040: GO 30044
// end ; end ;
30042: GO 29844
30044: POP
30045: POP
// if result then
30046: LD_VAR 0 1
30050: IFFALSE 30110
// begin ToLua ( playSibBomb() ) ;
30052: LD_STRING playSibBomb()
30054: PPUSH
30055: CALL_OW 559
// wait ( 0 0$14 ) ;
30059: LD_INT 490
30061: PPUSH
30062: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
30066: LD_VAR 0 1
30070: PUSH
30071: LD_INT 1
30073: ARRAY
30074: PPUSH
30075: LD_VAR 0 1
30079: PUSH
30080: LD_INT 2
30082: ARRAY
30083: PPUSH
30084: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
30088: LD_VAR 0 1
30092: PUSH
30093: LD_INT 1
30095: ARRAY
30096: PPUSH
30097: LD_VAR 0 1
30101: PUSH
30102: LD_INT 2
30104: ARRAY
30105: PPUSH
30106: CALL_OW 429
// end ; end ;
30110: LD_VAR 0 1
30114: RET
// every 0 0$1 trigger StreamModeActive and sReset do
30115: LD_EXP 51
30119: PUSH
30120: LD_EXP 73
30124: AND
30125: IFFALSE 30137
30127: GO 30129
30129: DISABLE
// YouLost (  ) ;
30130: LD_STRING 
30132: PPUSH
30133: CALL_OW 104
30137: END
// every 0 0$1 trigger StreamModeActive and sFog do
30138: LD_EXP 51
30142: PUSH
30143: LD_EXP 72
30147: AND
30148: IFFALSE 30162
30150: GO 30152
30152: DISABLE
// FogOff ( your_side ) ;
30153: LD_OWVAR 2
30157: PPUSH
30158: CALL_OW 344
30162: END
// every 0 0$1 trigger StreamModeActive and sSun do
30163: LD_EXP 51
30167: PUSH
30168: LD_EXP 74
30172: AND
30173: IFFALSE 30201
30175: GO 30177
30177: DISABLE
// begin solar_recharge_percent := 0 ;
30178: LD_ADDR_OWVAR 79
30182: PUSH
30183: LD_INT 0
30185: ST_TO_ADDR
// wait ( 5 5$00 ) ;
30186: LD_INT 10500
30188: PPUSH
30189: CALL_OW 67
// solar_recharge_percent := 100 ;
30193: LD_ADDR_OWVAR 79
30197: PUSH
30198: LD_INT 100
30200: ST_TO_ADDR
// end ;
30201: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
30202: LD_EXP 51
30206: PUSH
30207: LD_EXP 75
30211: AND
30212: IFFALSE 30451
30214: GO 30216
30216: DISABLE
30217: LD_INT 0
30219: PPUSH
30220: PPUSH
30221: PPUSH
// begin tmp := [ ] ;
30222: LD_ADDR_VAR 0 3
30226: PUSH
30227: EMPTY
30228: ST_TO_ADDR
// for i := 1 to 6 do
30229: LD_ADDR_VAR 0 1
30233: PUSH
30234: DOUBLE
30235: LD_INT 1
30237: DEC
30238: ST_TO_ADDR
30239: LD_INT 6
30241: PUSH
30242: FOR_TO
30243: IFFALSE 30348
// begin uc_nation := nation_nature ;
30245: LD_ADDR_OWVAR 21
30249: PUSH
30250: LD_INT 0
30252: ST_TO_ADDR
// uc_side := 0 ;
30253: LD_ADDR_OWVAR 20
30257: PUSH
30258: LD_INT 0
30260: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30261: LD_ADDR_OWVAR 29
30265: PUSH
30266: LD_INT 12
30268: PUSH
30269: LD_INT 12
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: ST_TO_ADDR
// hc_agressivity := 20 ;
30276: LD_ADDR_OWVAR 35
30280: PUSH
30281: LD_INT 20
30283: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30284: LD_ADDR_OWVAR 28
30288: PUSH
30289: LD_INT 17
30291: ST_TO_ADDR
// hc_gallery :=  ;
30292: LD_ADDR_OWVAR 33
30296: PUSH
30297: LD_STRING 
30299: ST_TO_ADDR
// hc_name :=  ;
30300: LD_ADDR_OWVAR 26
30304: PUSH
30305: LD_STRING 
30307: ST_TO_ADDR
// un := CreateHuman ;
30308: LD_ADDR_VAR 0 2
30312: PUSH
30313: CALL_OW 44
30317: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30318: LD_VAR 0 2
30322: PPUSH
30323: LD_INT 1
30325: PPUSH
30326: CALL_OW 51
// tmp := tmp ^ un ;
30330: LD_ADDR_VAR 0 3
30334: PUSH
30335: LD_VAR 0 3
30339: PUSH
30340: LD_VAR 0 2
30344: ADD
30345: ST_TO_ADDR
// end ;
30346: GO 30242
30348: POP
30349: POP
// repeat wait ( 0 0$1 ) ;
30350: LD_INT 35
30352: PPUSH
30353: CALL_OW 67
// for un in tmp do
30357: LD_ADDR_VAR 0 2
30361: PUSH
30362: LD_VAR 0 3
30366: PUSH
30367: FOR_IN
30368: IFFALSE 30442
// begin if IsDead ( un ) then
30370: LD_VAR 0 2
30374: PPUSH
30375: CALL_OW 301
30379: IFFALSE 30399
// begin tmp := tmp diff un ;
30381: LD_ADDR_VAR 0 3
30385: PUSH
30386: LD_VAR 0 3
30390: PUSH
30391: LD_VAR 0 2
30395: DIFF
30396: ST_TO_ADDR
// continue ;
30397: GO 30367
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30399: LD_VAR 0 2
30403: PPUSH
30404: LD_INT 3
30406: PUSH
30407: LD_INT 22
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PPUSH
30421: CALL_OW 69
30425: PPUSH
30426: LD_VAR 0 2
30430: PPUSH
30431: CALL_OW 74
30435: PPUSH
30436: CALL_OW 115
// end ;
30440: GO 30367
30442: POP
30443: POP
// until not tmp ;
30444: LD_VAR 0 3
30448: NOT
30449: IFFALSE 30350
// end ;
30451: PPOPN 3
30453: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30454: LD_EXP 51
30458: PUSH
30459: LD_EXP 76
30463: AND
30464: IFFALSE 30518
30466: GO 30468
30468: DISABLE
// begin ToLua ( displayTroll(); ) ;
30469: LD_STRING displayTroll();
30471: PPUSH
30472: CALL_OW 559
// wait ( 3 3$00 ) ;
30476: LD_INT 6300
30478: PPUSH
30479: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30483: LD_STRING hideTroll();
30485: PPUSH
30486: CALL_OW 559
// wait ( 1 1$00 ) ;
30490: LD_INT 2100
30492: PPUSH
30493: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30497: LD_STRING displayTroll();
30499: PPUSH
30500: CALL_OW 559
// wait ( 1 1$00 ) ;
30504: LD_INT 2100
30506: PPUSH
30507: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30511: LD_STRING hideTroll();
30513: PPUSH
30514: CALL_OW 559
// end ;
30518: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30519: LD_EXP 51
30523: PUSH
30524: LD_EXP 77
30528: AND
30529: IFFALSE 30592
30531: GO 30533
30533: DISABLE
30534: LD_INT 0
30536: PPUSH
// begin p := 0 ;
30537: LD_ADDR_VAR 0 1
30541: PUSH
30542: LD_INT 0
30544: ST_TO_ADDR
// repeat game_speed := 1 ;
30545: LD_ADDR_OWVAR 65
30549: PUSH
30550: LD_INT 1
30552: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30553: LD_INT 35
30555: PPUSH
30556: CALL_OW 67
// p := p + 1 ;
30560: LD_ADDR_VAR 0 1
30564: PUSH
30565: LD_VAR 0 1
30569: PUSH
30570: LD_INT 1
30572: PLUS
30573: ST_TO_ADDR
// until p >= 60 ;
30574: LD_VAR 0 1
30578: PUSH
30579: LD_INT 60
30581: GREATEREQUAL
30582: IFFALSE 30545
// game_speed := 4 ;
30584: LD_ADDR_OWVAR 65
30588: PUSH
30589: LD_INT 4
30591: ST_TO_ADDR
// end ;
30592: PPOPN 1
30594: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30595: LD_EXP 51
30599: PUSH
30600: LD_EXP 78
30604: AND
30605: IFFALSE 30751
30607: GO 30609
30609: DISABLE
30610: LD_INT 0
30612: PPUSH
30613: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30614: LD_ADDR_VAR 0 1
30618: PUSH
30619: LD_INT 22
30621: PUSH
30622: LD_OWVAR 2
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 2
30633: PUSH
30634: LD_INT 30
30636: PUSH
30637: LD_INT 0
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 30
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: LIST
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PPUSH
30663: CALL_OW 69
30667: ST_TO_ADDR
// if not depot then
30668: LD_VAR 0 1
30672: NOT
30673: IFFALSE 30677
// exit ;
30675: GO 30751
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30677: LD_ADDR_VAR 0 2
30681: PUSH
30682: LD_VAR 0 1
30686: PUSH
30687: LD_INT 1
30689: PPUSH
30690: LD_VAR 0 1
30694: PPUSH
30695: CALL_OW 12
30699: ARRAY
30700: PPUSH
30701: CALL_OW 274
30705: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30706: LD_VAR 0 2
30710: PPUSH
30711: LD_INT 1
30713: PPUSH
30714: LD_INT 0
30716: PPUSH
30717: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30721: LD_VAR 0 2
30725: PPUSH
30726: LD_INT 2
30728: PPUSH
30729: LD_INT 0
30731: PPUSH
30732: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30736: LD_VAR 0 2
30740: PPUSH
30741: LD_INT 3
30743: PPUSH
30744: LD_INT 0
30746: PPUSH
30747: CALL_OW 277
// end ;
30751: PPOPN 2
30753: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30754: LD_EXP 51
30758: PUSH
30759: LD_EXP 79
30763: AND
30764: IFFALSE 30861
30766: GO 30768
30768: DISABLE
30769: LD_INT 0
30771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30772: LD_ADDR_VAR 0 1
30776: PUSH
30777: LD_INT 22
30779: PUSH
30780: LD_OWVAR 2
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 21
30791: PUSH
30792: LD_INT 1
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 3
30801: PUSH
30802: LD_INT 23
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: PPUSH
30821: CALL_OW 69
30825: ST_TO_ADDR
// if not tmp then
30826: LD_VAR 0 1
30830: NOT
30831: IFFALSE 30835
// exit ;
30833: GO 30861
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30835: LD_VAR 0 1
30839: PUSH
30840: LD_INT 1
30842: PPUSH
30843: LD_VAR 0 1
30847: PPUSH
30848: CALL_OW 12
30852: ARRAY
30853: PPUSH
30854: LD_INT 200
30856: PPUSH
30857: CALL_OW 234
// end ;
30861: PPOPN 1
30863: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30864: LD_EXP 51
30868: PUSH
30869: LD_EXP 80
30873: AND
30874: IFFALSE 30953
30876: GO 30878
30878: DISABLE
30879: LD_INT 0
30881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30882: LD_ADDR_VAR 0 1
30886: PUSH
30887: LD_INT 22
30889: PUSH
30890: LD_OWVAR 2
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 21
30901: PUSH
30902: LD_INT 2
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PPUSH
30913: CALL_OW 69
30917: ST_TO_ADDR
// if not tmp then
30918: LD_VAR 0 1
30922: NOT
30923: IFFALSE 30927
// exit ;
30925: GO 30953
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30927: LD_VAR 0 1
30931: PUSH
30932: LD_INT 1
30934: PPUSH
30935: LD_VAR 0 1
30939: PPUSH
30940: CALL_OW 12
30944: ARRAY
30945: PPUSH
30946: LD_INT 60
30948: PPUSH
30949: CALL_OW 234
// end ;
30953: PPOPN 1
30955: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30956: LD_EXP 51
30960: PUSH
30961: LD_EXP 81
30965: AND
30966: IFFALSE 31065
30968: GO 30970
30970: DISABLE
30971: LD_INT 0
30973: PPUSH
30974: PPUSH
// begin enable ;
30975: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30976: LD_ADDR_VAR 0 1
30980: PUSH
30981: LD_INT 22
30983: PUSH
30984: LD_OWVAR 2
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 61
30995: PUSH
30996: EMPTY
30997: LIST
30998: PUSH
30999: LD_INT 33
31001: PUSH
31002: LD_INT 2
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: LIST
31013: PPUSH
31014: CALL_OW 69
31018: ST_TO_ADDR
// if not tmp then
31019: LD_VAR 0 1
31023: NOT
31024: IFFALSE 31028
// exit ;
31026: GO 31065
// for i in tmp do
31028: LD_ADDR_VAR 0 2
31032: PUSH
31033: LD_VAR 0 1
31037: PUSH
31038: FOR_IN
31039: IFFALSE 31063
// if IsControledBy ( i ) then
31041: LD_VAR 0 2
31045: PPUSH
31046: CALL_OW 312
31050: IFFALSE 31061
// ComUnlink ( i ) ;
31052: LD_VAR 0 2
31056: PPUSH
31057: CALL_OW 136
31061: GO 31038
31063: POP
31064: POP
// end ;
31065: PPOPN 2
31067: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
31068: LD_EXP 51
31072: PUSH
31073: LD_EXP 82
31077: AND
31078: IFFALSE 31218
31080: GO 31082
31082: DISABLE
31083: LD_INT 0
31085: PPUSH
31086: PPUSH
// begin ToLua ( displayPowell(); ) ;
31087: LD_STRING displayPowell();
31089: PPUSH
31090: CALL_OW 559
// uc_side := 0 ;
31094: LD_ADDR_OWVAR 20
31098: PUSH
31099: LD_INT 0
31101: ST_TO_ADDR
// uc_nation := 2 ;
31102: LD_ADDR_OWVAR 21
31106: PUSH
31107: LD_INT 2
31109: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
31110: LD_ADDR_OWVAR 37
31114: PUSH
31115: LD_INT 14
31117: ST_TO_ADDR
// vc_engine := engine_siberite ;
31118: LD_ADDR_OWVAR 39
31122: PUSH
31123: LD_INT 3
31125: ST_TO_ADDR
// vc_control := control_apeman ;
31126: LD_ADDR_OWVAR 38
31130: PUSH
31131: LD_INT 5
31133: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
31134: LD_ADDR_OWVAR 40
31138: PUSH
31139: LD_INT 29
31141: ST_TO_ADDR
// un := CreateVehicle ;
31142: LD_ADDR_VAR 0 2
31146: PUSH
31147: CALL_OW 45
31151: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31152: LD_VAR 0 2
31156: PPUSH
31157: LD_INT 1
31159: PPUSH
31160: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31164: LD_INT 35
31166: PPUSH
31167: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31171: LD_VAR 0 2
31175: PPUSH
31176: LD_INT 22
31178: PUSH
31179: LD_OWVAR 2
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PPUSH
31188: CALL_OW 69
31192: PPUSH
31193: LD_VAR 0 2
31197: PPUSH
31198: CALL_OW 74
31202: PPUSH
31203: CALL_OW 115
// until IsDead ( un ) ;
31207: LD_VAR 0 2
31211: PPUSH
31212: CALL_OW 301
31216: IFFALSE 31164
// end ;
31218: PPOPN 2
31220: END
// every 0 0$1 trigger StreamModeActive and sStu do
31221: LD_EXP 51
31225: PUSH
31226: LD_EXP 90
31230: AND
31231: IFFALSE 31247
31233: GO 31235
31235: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31236: LD_STRING displayStucuk();
31238: PPUSH
31239: CALL_OW 559
// ResetFog ;
31243: CALL_OW 335
// end ;
31247: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31248: LD_EXP 51
31252: PUSH
31253: LD_EXP 83
31257: AND
31258: IFFALSE 31399
31260: GO 31262
31262: DISABLE
31263: LD_INT 0
31265: PPUSH
31266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31267: LD_ADDR_VAR 0 2
31271: PUSH
31272: LD_INT 22
31274: PUSH
31275: LD_OWVAR 2
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 21
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PPUSH
31298: CALL_OW 69
31302: ST_TO_ADDR
// if not tmp then
31303: LD_VAR 0 2
31307: NOT
31308: IFFALSE 31312
// exit ;
31310: GO 31399
// un := tmp [ rand ( 1 , tmp ) ] ;
31312: LD_ADDR_VAR 0 1
31316: PUSH
31317: LD_VAR 0 2
31321: PUSH
31322: LD_INT 1
31324: PPUSH
31325: LD_VAR 0 2
31329: PPUSH
31330: CALL_OW 12
31334: ARRAY
31335: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31336: LD_VAR 0 1
31340: PPUSH
31341: LD_INT 0
31343: PPUSH
31344: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31348: LD_VAR 0 1
31352: PPUSH
31353: LD_OWVAR 3
31357: PUSH
31358: LD_VAR 0 1
31362: DIFF
31363: PPUSH
31364: LD_VAR 0 1
31368: PPUSH
31369: CALL_OW 74
31373: PPUSH
31374: CALL_OW 115
// wait ( 0 0$20 ) ;
31378: LD_INT 700
31380: PPUSH
31381: CALL_OW 67
// SetSide ( un , your_side ) ;
31385: LD_VAR 0 1
31389: PPUSH
31390: LD_OWVAR 2
31394: PPUSH
31395: CALL_OW 235
// end ;
31399: PPOPN 2
31401: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31402: LD_EXP 51
31406: PUSH
31407: LD_EXP 84
31411: AND
31412: IFFALSE 31518
31414: GO 31416
31416: DISABLE
31417: LD_INT 0
31419: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31420: LD_ADDR_VAR 0 1
31424: PUSH
31425: LD_INT 22
31427: PUSH
31428: LD_OWVAR 2
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 2
31439: PUSH
31440: LD_INT 30
31442: PUSH
31443: LD_INT 0
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 30
31452: PUSH
31453: LD_INT 1
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: LIST
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PPUSH
31469: CALL_OW 69
31473: ST_TO_ADDR
// if not depot then
31474: LD_VAR 0 1
31478: NOT
31479: IFFALSE 31483
// exit ;
31481: GO 31518
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31483: LD_VAR 0 1
31487: PUSH
31488: LD_INT 1
31490: ARRAY
31491: PPUSH
31492: CALL_OW 250
31496: PPUSH
31497: LD_VAR 0 1
31501: PUSH
31502: LD_INT 1
31504: ARRAY
31505: PPUSH
31506: CALL_OW 251
31510: PPUSH
31511: LD_INT 70
31513: PPUSH
31514: CALL_OW 495
// end ;
31518: PPOPN 1
31520: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31521: LD_EXP 51
31525: PUSH
31526: LD_EXP 85
31530: AND
31531: IFFALSE 31742
31533: GO 31535
31535: DISABLE
31536: LD_INT 0
31538: PPUSH
31539: PPUSH
31540: PPUSH
31541: PPUSH
31542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31543: LD_ADDR_VAR 0 5
31547: PUSH
31548: LD_INT 22
31550: PUSH
31551: LD_OWVAR 2
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 21
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PPUSH
31574: CALL_OW 69
31578: ST_TO_ADDR
// if not tmp then
31579: LD_VAR 0 5
31583: NOT
31584: IFFALSE 31588
// exit ;
31586: GO 31742
// for i in tmp do
31588: LD_ADDR_VAR 0 1
31592: PUSH
31593: LD_VAR 0 5
31597: PUSH
31598: FOR_IN
31599: IFFALSE 31740
// begin d := rand ( 0 , 5 ) ;
31601: LD_ADDR_VAR 0 4
31605: PUSH
31606: LD_INT 0
31608: PPUSH
31609: LD_INT 5
31611: PPUSH
31612: CALL_OW 12
31616: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31617: LD_ADDR_VAR 0 2
31621: PUSH
31622: LD_VAR 0 1
31626: PPUSH
31627: CALL_OW 250
31631: PPUSH
31632: LD_VAR 0 4
31636: PPUSH
31637: LD_INT 3
31639: PPUSH
31640: LD_INT 12
31642: PPUSH
31643: CALL_OW 12
31647: PPUSH
31648: CALL_OW 272
31652: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31653: LD_ADDR_VAR 0 3
31657: PUSH
31658: LD_VAR 0 1
31662: PPUSH
31663: CALL_OW 251
31667: PPUSH
31668: LD_VAR 0 4
31672: PPUSH
31673: LD_INT 3
31675: PPUSH
31676: LD_INT 12
31678: PPUSH
31679: CALL_OW 12
31683: PPUSH
31684: CALL_OW 273
31688: ST_TO_ADDR
// if ValidHex ( x , y ) then
31689: LD_VAR 0 2
31693: PPUSH
31694: LD_VAR 0 3
31698: PPUSH
31699: CALL_OW 488
31703: IFFALSE 31738
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31705: LD_VAR 0 1
31709: PPUSH
31710: LD_VAR 0 2
31714: PPUSH
31715: LD_VAR 0 3
31719: PPUSH
31720: LD_INT 3
31722: PPUSH
31723: LD_INT 6
31725: PPUSH
31726: CALL_OW 12
31730: PPUSH
31731: LD_INT 1
31733: PPUSH
31734: CALL_OW 483
// end ;
31738: GO 31598
31740: POP
31741: POP
// end ;
31742: PPOPN 5
31744: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31745: LD_EXP 51
31749: PUSH
31750: LD_EXP 86
31754: AND
31755: IFFALSE 31849
31757: GO 31759
31759: DISABLE
31760: LD_INT 0
31762: PPUSH
31763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31764: LD_ADDR_VAR 0 2
31768: PUSH
31769: LD_INT 22
31771: PUSH
31772: LD_OWVAR 2
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 32
31783: PUSH
31784: LD_INT 1
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 21
31793: PUSH
31794: LD_INT 2
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: PPUSH
31806: CALL_OW 69
31810: ST_TO_ADDR
// if not tmp then
31811: LD_VAR 0 2
31815: NOT
31816: IFFALSE 31820
// exit ;
31818: GO 31849
// for i in tmp do
31820: LD_ADDR_VAR 0 1
31824: PUSH
31825: LD_VAR 0 2
31829: PUSH
31830: FOR_IN
31831: IFFALSE 31847
// SetFuel ( i , 0 ) ;
31833: LD_VAR 0 1
31837: PPUSH
31838: LD_INT 0
31840: PPUSH
31841: CALL_OW 240
31845: GO 31830
31847: POP
31848: POP
// end ;
31849: PPOPN 2
31851: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31852: LD_EXP 51
31856: PUSH
31857: LD_EXP 87
31861: AND
31862: IFFALSE 31928
31864: GO 31866
31866: DISABLE
31867: LD_INT 0
31869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31870: LD_ADDR_VAR 0 1
31874: PUSH
31875: LD_INT 22
31877: PUSH
31878: LD_OWVAR 2
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 30
31889: PUSH
31890: LD_INT 29
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PPUSH
31901: CALL_OW 69
31905: ST_TO_ADDR
// if not tmp then
31906: LD_VAR 0 1
31910: NOT
31911: IFFALSE 31915
// exit ;
31913: GO 31928
// DestroyUnit ( tmp [ 1 ] ) ;
31915: LD_VAR 0 1
31919: PUSH
31920: LD_INT 1
31922: ARRAY
31923: PPUSH
31924: CALL_OW 65
// end ;
31928: PPOPN 1
31930: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31931: LD_EXP 51
31935: PUSH
31936: LD_EXP 89
31940: AND
31941: IFFALSE 32070
31943: GO 31945
31945: DISABLE
31946: LD_INT 0
31948: PPUSH
// begin uc_side := 0 ;
31949: LD_ADDR_OWVAR 20
31953: PUSH
31954: LD_INT 0
31956: ST_TO_ADDR
// uc_nation := nation_arabian ;
31957: LD_ADDR_OWVAR 21
31961: PUSH
31962: LD_INT 2
31964: ST_TO_ADDR
// hc_gallery :=  ;
31965: LD_ADDR_OWVAR 33
31969: PUSH
31970: LD_STRING 
31972: ST_TO_ADDR
// hc_name :=  ;
31973: LD_ADDR_OWVAR 26
31977: PUSH
31978: LD_STRING 
31980: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31981: LD_INT 1
31983: PPUSH
31984: LD_INT 11
31986: PPUSH
31987: LD_INT 10
31989: PPUSH
31990: CALL_OW 380
// un := CreateHuman ;
31994: LD_ADDR_VAR 0 1
31998: PUSH
31999: CALL_OW 44
32003: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32004: LD_VAR 0 1
32008: PPUSH
32009: LD_INT 1
32011: PPUSH
32012: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32016: LD_INT 35
32018: PPUSH
32019: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32023: LD_VAR 0 1
32027: PPUSH
32028: LD_INT 22
32030: PUSH
32031: LD_OWVAR 2
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PPUSH
32040: CALL_OW 69
32044: PPUSH
32045: LD_VAR 0 1
32049: PPUSH
32050: CALL_OW 74
32054: PPUSH
32055: CALL_OW 115
// until IsDead ( un ) ;
32059: LD_VAR 0 1
32063: PPUSH
32064: CALL_OW 301
32068: IFFALSE 32016
// end ;
32070: PPOPN 1
32072: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
32073: LD_EXP 51
32077: PUSH
32078: LD_EXP 91
32082: AND
32083: IFFALSE 32095
32085: GO 32087
32087: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
32088: LD_STRING earthquake(getX(game), 0, 32)
32090: PPUSH
32091: CALL_OW 559
32095: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
32096: LD_EXP 51
32100: PUSH
32101: LD_EXP 92
32105: AND
32106: IFFALSE 32197
32108: GO 32110
32110: DISABLE
32111: LD_INT 0
32113: PPUSH
// begin enable ;
32114: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
32115: LD_ADDR_VAR 0 1
32119: PUSH
32120: LD_INT 22
32122: PUSH
32123: LD_OWVAR 2
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 21
32134: PUSH
32135: LD_INT 2
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 33
32144: PUSH
32145: LD_INT 3
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: LIST
32156: PPUSH
32157: CALL_OW 69
32161: ST_TO_ADDR
// if not tmp then
32162: LD_VAR 0 1
32166: NOT
32167: IFFALSE 32171
// exit ;
32169: GO 32197
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32171: LD_VAR 0 1
32175: PUSH
32176: LD_INT 1
32178: PPUSH
32179: LD_VAR 0 1
32183: PPUSH
32184: CALL_OW 12
32188: ARRAY
32189: PPUSH
32190: LD_INT 1
32192: PPUSH
32193: CALL_OW 234
// end ;
32197: PPOPN 1
32199: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
32200: LD_EXP 51
32204: PUSH
32205: LD_EXP 93
32209: AND
32210: IFFALSE 32351
32212: GO 32214
32214: DISABLE
32215: LD_INT 0
32217: PPUSH
32218: PPUSH
32219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32220: LD_ADDR_VAR 0 3
32224: PUSH
32225: LD_INT 22
32227: PUSH
32228: LD_OWVAR 2
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 25
32239: PUSH
32240: LD_INT 1
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PPUSH
32251: CALL_OW 69
32255: ST_TO_ADDR
// if not tmp then
32256: LD_VAR 0 3
32260: NOT
32261: IFFALSE 32265
// exit ;
32263: GO 32351
// un := tmp [ rand ( 1 , tmp ) ] ;
32265: LD_ADDR_VAR 0 2
32269: PUSH
32270: LD_VAR 0 3
32274: PUSH
32275: LD_INT 1
32277: PPUSH
32278: LD_VAR 0 3
32282: PPUSH
32283: CALL_OW 12
32287: ARRAY
32288: ST_TO_ADDR
// if Crawls ( un ) then
32289: LD_VAR 0 2
32293: PPUSH
32294: CALL_OW 318
32298: IFFALSE 32309
// ComWalk ( un ) ;
32300: LD_VAR 0 2
32304: PPUSH
32305: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32309: LD_VAR 0 2
32313: PPUSH
32314: LD_INT 9
32316: PPUSH
32317: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32321: LD_INT 28
32323: PPUSH
32324: LD_OWVAR 2
32328: PPUSH
32329: LD_INT 2
32331: PPUSH
32332: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32336: LD_INT 29
32338: PPUSH
32339: LD_OWVAR 2
32343: PPUSH
32344: LD_INT 2
32346: PPUSH
32347: CALL_OW 322
// end ;
32351: PPOPN 3
32353: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32354: LD_EXP 51
32358: PUSH
32359: LD_EXP 94
32363: AND
32364: IFFALSE 32475
32366: GO 32368
32368: DISABLE
32369: LD_INT 0
32371: PPUSH
32372: PPUSH
32373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32374: LD_ADDR_VAR 0 3
32378: PUSH
32379: LD_INT 22
32381: PUSH
32382: LD_OWVAR 2
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 25
32393: PUSH
32394: LD_INT 1
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PPUSH
32405: CALL_OW 69
32409: ST_TO_ADDR
// if not tmp then
32410: LD_VAR 0 3
32414: NOT
32415: IFFALSE 32419
// exit ;
32417: GO 32475
// un := tmp [ rand ( 1 , tmp ) ] ;
32419: LD_ADDR_VAR 0 2
32423: PUSH
32424: LD_VAR 0 3
32428: PUSH
32429: LD_INT 1
32431: PPUSH
32432: LD_VAR 0 3
32436: PPUSH
32437: CALL_OW 12
32441: ARRAY
32442: ST_TO_ADDR
// if Crawls ( un ) then
32443: LD_VAR 0 2
32447: PPUSH
32448: CALL_OW 318
32452: IFFALSE 32463
// ComWalk ( un ) ;
32454: LD_VAR 0 2
32458: PPUSH
32459: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32463: LD_VAR 0 2
32467: PPUSH
32468: LD_INT 8
32470: PPUSH
32471: CALL_OW 336
// end ;
32475: PPOPN 3
32477: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32478: LD_EXP 51
32482: PUSH
32483: LD_EXP 95
32487: AND
32488: IFFALSE 32632
32490: GO 32492
32492: DISABLE
32493: LD_INT 0
32495: PPUSH
32496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32497: LD_ADDR_VAR 0 2
32501: PUSH
32502: LD_INT 22
32504: PUSH
32505: LD_OWVAR 2
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 21
32516: PUSH
32517: LD_INT 2
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 2
32526: PUSH
32527: LD_INT 34
32529: PUSH
32530: LD_INT 12
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 34
32539: PUSH
32540: LD_INT 51
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 34
32549: PUSH
32550: LD_INT 32
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: LIST
32567: PPUSH
32568: CALL_OW 69
32572: ST_TO_ADDR
// if not tmp then
32573: LD_VAR 0 2
32577: NOT
32578: IFFALSE 32582
// exit ;
32580: GO 32632
// for i in tmp do
32582: LD_ADDR_VAR 0 1
32586: PUSH
32587: LD_VAR 0 2
32591: PUSH
32592: FOR_IN
32593: IFFALSE 32630
// if GetCargo ( i , mat_artifact ) = 0 then
32595: LD_VAR 0 1
32599: PPUSH
32600: LD_INT 4
32602: PPUSH
32603: CALL_OW 289
32607: PUSH
32608: LD_INT 0
32610: EQUAL
32611: IFFALSE 32628
// SetCargo ( i , mat_siberit , 100 ) ;
32613: LD_VAR 0 1
32617: PPUSH
32618: LD_INT 3
32620: PPUSH
32621: LD_INT 100
32623: PPUSH
32624: CALL_OW 290
32628: GO 32592
32630: POP
32631: POP
// end ;
32632: PPOPN 2
32634: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32635: LD_EXP 51
32639: PUSH
32640: LD_EXP 96
32644: AND
32645: IFFALSE 32828
32647: GO 32649
32649: DISABLE
32650: LD_INT 0
32652: PPUSH
32653: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32654: LD_ADDR_VAR 0 2
32658: PUSH
32659: LD_INT 22
32661: PUSH
32662: LD_OWVAR 2
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PPUSH
32671: CALL_OW 69
32675: ST_TO_ADDR
// if not tmp then
32676: LD_VAR 0 2
32680: NOT
32681: IFFALSE 32685
// exit ;
32683: GO 32828
// for i := 1 to 2 do
32685: LD_ADDR_VAR 0 1
32689: PUSH
32690: DOUBLE
32691: LD_INT 1
32693: DEC
32694: ST_TO_ADDR
32695: LD_INT 2
32697: PUSH
32698: FOR_TO
32699: IFFALSE 32826
// begin uc_side := your_side ;
32701: LD_ADDR_OWVAR 20
32705: PUSH
32706: LD_OWVAR 2
32710: ST_TO_ADDR
// uc_nation := nation_american ;
32711: LD_ADDR_OWVAR 21
32715: PUSH
32716: LD_INT 1
32718: ST_TO_ADDR
// vc_chassis := us_morphling ;
32719: LD_ADDR_OWVAR 37
32723: PUSH
32724: LD_INT 5
32726: ST_TO_ADDR
// vc_engine := engine_siberite ;
32727: LD_ADDR_OWVAR 39
32731: PUSH
32732: LD_INT 3
32734: ST_TO_ADDR
// vc_control := control_computer ;
32735: LD_ADDR_OWVAR 38
32739: PUSH
32740: LD_INT 3
32742: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32743: LD_ADDR_OWVAR 40
32747: PUSH
32748: LD_INT 10
32750: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32751: LD_VAR 0 2
32755: PUSH
32756: LD_INT 1
32758: ARRAY
32759: PPUSH
32760: CALL_OW 310
32764: NOT
32765: IFFALSE 32812
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32767: CALL_OW 45
32771: PPUSH
32772: LD_VAR 0 2
32776: PUSH
32777: LD_INT 1
32779: ARRAY
32780: PPUSH
32781: CALL_OW 250
32785: PPUSH
32786: LD_VAR 0 2
32790: PUSH
32791: LD_INT 1
32793: ARRAY
32794: PPUSH
32795: CALL_OW 251
32799: PPUSH
32800: LD_INT 12
32802: PPUSH
32803: LD_INT 1
32805: PPUSH
32806: CALL_OW 50
32810: GO 32824
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32812: CALL_OW 45
32816: PPUSH
32817: LD_INT 1
32819: PPUSH
32820: CALL_OW 51
// end ;
32824: GO 32698
32826: POP
32827: POP
// end ;
32828: PPOPN 2
32830: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32831: LD_EXP 51
32835: PUSH
32836: LD_EXP 97
32840: AND
32841: IFFALSE 33063
32843: GO 32845
32845: DISABLE
32846: LD_INT 0
32848: PPUSH
32849: PPUSH
32850: PPUSH
32851: PPUSH
32852: PPUSH
32853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32854: LD_ADDR_VAR 0 6
32858: PUSH
32859: LD_INT 22
32861: PUSH
32862: LD_OWVAR 2
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 21
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 3
32883: PUSH
32884: LD_INT 23
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: LIST
32902: PPUSH
32903: CALL_OW 69
32907: ST_TO_ADDR
// if not tmp then
32908: LD_VAR 0 6
32912: NOT
32913: IFFALSE 32917
// exit ;
32915: GO 33063
// s1 := rand ( 1 , 4 ) ;
32917: LD_ADDR_VAR 0 2
32921: PUSH
32922: LD_INT 1
32924: PPUSH
32925: LD_INT 4
32927: PPUSH
32928: CALL_OW 12
32932: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32933: LD_ADDR_VAR 0 4
32937: PUSH
32938: LD_VAR 0 6
32942: PUSH
32943: LD_INT 1
32945: ARRAY
32946: PPUSH
32947: LD_VAR 0 2
32951: PPUSH
32952: CALL_OW 259
32956: ST_TO_ADDR
// if s1 = 1 then
32957: LD_VAR 0 2
32961: PUSH
32962: LD_INT 1
32964: EQUAL
32965: IFFALSE 32985
// s2 := rand ( 2 , 4 ) else
32967: LD_ADDR_VAR 0 3
32971: PUSH
32972: LD_INT 2
32974: PPUSH
32975: LD_INT 4
32977: PPUSH
32978: CALL_OW 12
32982: ST_TO_ADDR
32983: GO 32993
// s2 := 1 ;
32985: LD_ADDR_VAR 0 3
32989: PUSH
32990: LD_INT 1
32992: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32993: LD_ADDR_VAR 0 5
32997: PUSH
32998: LD_VAR 0 6
33002: PUSH
33003: LD_INT 1
33005: ARRAY
33006: PPUSH
33007: LD_VAR 0 3
33011: PPUSH
33012: CALL_OW 259
33016: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
33017: LD_VAR 0 6
33021: PUSH
33022: LD_INT 1
33024: ARRAY
33025: PPUSH
33026: LD_VAR 0 2
33030: PPUSH
33031: LD_VAR 0 5
33035: PPUSH
33036: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
33040: LD_VAR 0 6
33044: PUSH
33045: LD_INT 1
33047: ARRAY
33048: PPUSH
33049: LD_VAR 0 3
33053: PPUSH
33054: LD_VAR 0 4
33058: PPUSH
33059: CALL_OW 237
// end ;
33063: PPOPN 6
33065: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
33066: LD_EXP 51
33070: PUSH
33071: LD_EXP 98
33075: AND
33076: IFFALSE 33155
33078: GO 33080
33080: DISABLE
33081: LD_INT 0
33083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
33084: LD_ADDR_VAR 0 1
33088: PUSH
33089: LD_INT 22
33091: PUSH
33092: LD_OWVAR 2
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 30
33103: PUSH
33104: LD_INT 3
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PPUSH
33115: CALL_OW 69
33119: ST_TO_ADDR
// if not tmp then
33120: LD_VAR 0 1
33124: NOT
33125: IFFALSE 33129
// exit ;
33127: GO 33155
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33129: LD_VAR 0 1
33133: PUSH
33134: LD_INT 1
33136: PPUSH
33137: LD_VAR 0 1
33141: PPUSH
33142: CALL_OW 12
33146: ARRAY
33147: PPUSH
33148: LD_INT 1
33150: PPUSH
33151: CALL_OW 234
// end ;
33155: PPOPN 1
33157: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
33158: LD_EXP 51
33162: PUSH
33163: LD_EXP 99
33167: AND
33168: IFFALSE 33280
33170: GO 33172
33172: DISABLE
33173: LD_INT 0
33175: PPUSH
33176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
33177: LD_ADDR_VAR 0 2
33181: PUSH
33182: LD_INT 22
33184: PUSH
33185: LD_OWVAR 2
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 2
33196: PUSH
33197: LD_INT 30
33199: PUSH
33200: LD_INT 27
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 30
33209: PUSH
33210: LD_INT 26
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 30
33219: PUSH
33220: LD_INT 28
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PPUSH
33237: CALL_OW 69
33241: ST_TO_ADDR
// if not tmp then
33242: LD_VAR 0 2
33246: NOT
33247: IFFALSE 33251
// exit ;
33249: GO 33280
// for i in tmp do
33251: LD_ADDR_VAR 0 1
33255: PUSH
33256: LD_VAR 0 2
33260: PUSH
33261: FOR_IN
33262: IFFALSE 33278
// SetLives ( i , 1 ) ;
33264: LD_VAR 0 1
33268: PPUSH
33269: LD_INT 1
33271: PPUSH
33272: CALL_OW 234
33276: GO 33261
33278: POP
33279: POP
// end ;
33280: PPOPN 2
33282: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33283: LD_EXP 51
33287: PUSH
33288: LD_EXP 100
33292: AND
33293: IFFALSE 33580
33295: GO 33297
33297: DISABLE
33298: LD_INT 0
33300: PPUSH
33301: PPUSH
33302: PPUSH
// begin i := rand ( 1 , 7 ) ;
33303: LD_ADDR_VAR 0 1
33307: PUSH
33308: LD_INT 1
33310: PPUSH
33311: LD_INT 7
33313: PPUSH
33314: CALL_OW 12
33318: ST_TO_ADDR
// case i of 1 :
33319: LD_VAR 0 1
33323: PUSH
33324: LD_INT 1
33326: DOUBLE
33327: EQUAL
33328: IFTRUE 33332
33330: GO 33342
33332: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33333: LD_STRING earthquake(getX(game), 0, 32)
33335: PPUSH
33336: CALL_OW 559
33340: GO 33580
33342: LD_INT 2
33344: DOUBLE
33345: EQUAL
33346: IFTRUE 33350
33348: GO 33364
33350: POP
// begin ToLua ( displayStucuk(); ) ;
33351: LD_STRING displayStucuk();
33353: PPUSH
33354: CALL_OW 559
// ResetFog ;
33358: CALL_OW 335
// end ; 3 :
33362: GO 33580
33364: LD_INT 3
33366: DOUBLE
33367: EQUAL
33368: IFTRUE 33372
33370: GO 33476
33372: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33373: LD_ADDR_VAR 0 2
33377: PUSH
33378: LD_INT 22
33380: PUSH
33381: LD_OWVAR 2
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 25
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PPUSH
33404: CALL_OW 69
33408: ST_TO_ADDR
// if not tmp then
33409: LD_VAR 0 2
33413: NOT
33414: IFFALSE 33418
// exit ;
33416: GO 33580
// un := tmp [ rand ( 1 , tmp ) ] ;
33418: LD_ADDR_VAR 0 3
33422: PUSH
33423: LD_VAR 0 2
33427: PUSH
33428: LD_INT 1
33430: PPUSH
33431: LD_VAR 0 2
33435: PPUSH
33436: CALL_OW 12
33440: ARRAY
33441: ST_TO_ADDR
// if Crawls ( un ) then
33442: LD_VAR 0 3
33446: PPUSH
33447: CALL_OW 318
33451: IFFALSE 33462
// ComWalk ( un ) ;
33453: LD_VAR 0 3
33457: PPUSH
33458: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33462: LD_VAR 0 3
33466: PPUSH
33467: LD_INT 8
33469: PPUSH
33470: CALL_OW 336
// end ; 4 :
33474: GO 33580
33476: LD_INT 4
33478: DOUBLE
33479: EQUAL
33480: IFTRUE 33484
33482: GO 33558
33484: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33485: LD_ADDR_VAR 0 2
33489: PUSH
33490: LD_INT 22
33492: PUSH
33493: LD_OWVAR 2
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 30
33504: PUSH
33505: LD_INT 29
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PPUSH
33516: CALL_OW 69
33520: ST_TO_ADDR
// if not tmp then
33521: LD_VAR 0 2
33525: NOT
33526: IFFALSE 33530
// exit ;
33528: GO 33580
// CenterNowOnUnits ( tmp [ 1 ] ) ;
33530: LD_VAR 0 2
33534: PUSH
33535: LD_INT 1
33537: ARRAY
33538: PPUSH
33539: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
33543: LD_VAR 0 2
33547: PUSH
33548: LD_INT 1
33550: ARRAY
33551: PPUSH
33552: CALL_OW 65
// end ; 5 .. 7 :
33556: GO 33580
33558: LD_INT 5
33560: DOUBLE
33561: GREATEREQUAL
33562: IFFALSE 33570
33564: LD_INT 7
33566: DOUBLE
33567: LESSEQUAL
33568: IFTRUE 33572
33570: GO 33579
33572: POP
// StreamSibBomb ; end ;
33573: CALL 29817 0 0
33577: GO 33580
33579: POP
// end ;
33580: PPOPN 3
33582: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33583: LD_EXP 51
33587: PUSH
33588: LD_EXP 101
33592: AND
33593: IFFALSE 33749
33595: GO 33597
33597: DISABLE
33598: LD_INT 0
33600: PPUSH
33601: PPUSH
33602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33603: LD_ADDR_VAR 0 2
33607: PUSH
33608: LD_INT 81
33610: PUSH
33611: LD_OWVAR 2
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 2
33622: PUSH
33623: LD_INT 21
33625: PUSH
33626: LD_INT 1
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 21
33635: PUSH
33636: LD_INT 2
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: LIST
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PPUSH
33652: CALL_OW 69
33656: ST_TO_ADDR
// if not tmp then
33657: LD_VAR 0 2
33661: NOT
33662: IFFALSE 33666
// exit ;
33664: GO 33749
// p := 0 ;
33666: LD_ADDR_VAR 0 3
33670: PUSH
33671: LD_INT 0
33673: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33674: LD_INT 35
33676: PPUSH
33677: CALL_OW 67
// p := p + 1 ;
33681: LD_ADDR_VAR 0 3
33685: PUSH
33686: LD_VAR 0 3
33690: PUSH
33691: LD_INT 1
33693: PLUS
33694: ST_TO_ADDR
// for i in tmp do
33695: LD_ADDR_VAR 0 1
33699: PUSH
33700: LD_VAR 0 2
33704: PUSH
33705: FOR_IN
33706: IFFALSE 33737
// if GetLives ( i ) < 1000 then
33708: LD_VAR 0 1
33712: PPUSH
33713: CALL_OW 256
33717: PUSH
33718: LD_INT 1000
33720: LESS
33721: IFFALSE 33735
// SetLives ( i , 1000 ) ;
33723: LD_VAR 0 1
33727: PPUSH
33728: LD_INT 1000
33730: PPUSH
33731: CALL_OW 234
33735: GO 33705
33737: POP
33738: POP
// until p > 20 ;
33739: LD_VAR 0 3
33743: PUSH
33744: LD_INT 20
33746: GREATER
33747: IFFALSE 33674
// end ;
33749: PPOPN 3
33751: END
// every 0 0$1 trigger StreamModeActive and sTime do
33752: LD_EXP 51
33756: PUSH
33757: LD_EXP 102
33761: AND
33762: IFFALSE 33797
33764: GO 33766
33766: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33767: LD_INT 28
33769: PPUSH
33770: LD_OWVAR 2
33774: PPUSH
33775: LD_INT 2
33777: PPUSH
33778: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33782: LD_INT 30
33784: PPUSH
33785: LD_OWVAR 2
33789: PPUSH
33790: LD_INT 2
33792: PPUSH
33793: CALL_OW 322
// end ;
33797: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33798: LD_EXP 51
33802: PUSH
33803: LD_EXP 103
33807: AND
33808: IFFALSE 33929
33810: GO 33812
33812: DISABLE
33813: LD_INT 0
33815: PPUSH
33816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33817: LD_ADDR_VAR 0 2
33821: PUSH
33822: LD_INT 22
33824: PUSH
33825: LD_OWVAR 2
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 21
33836: PUSH
33837: LD_INT 1
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 3
33846: PUSH
33847: LD_INT 23
33849: PUSH
33850: LD_INT 0
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: LIST
33865: PPUSH
33866: CALL_OW 69
33870: ST_TO_ADDR
// if not tmp then
33871: LD_VAR 0 2
33875: NOT
33876: IFFALSE 33880
// exit ;
33878: GO 33929
// for i in tmp do
33880: LD_ADDR_VAR 0 1
33884: PUSH
33885: LD_VAR 0 2
33889: PUSH
33890: FOR_IN
33891: IFFALSE 33927
// begin if Crawls ( i ) then
33893: LD_VAR 0 1
33897: PPUSH
33898: CALL_OW 318
33902: IFFALSE 33913
// ComWalk ( i ) ;
33904: LD_VAR 0 1
33908: PPUSH
33909: CALL_OW 138
// SetClass ( i , 2 ) ;
33913: LD_VAR 0 1
33917: PPUSH
33918: LD_INT 2
33920: PPUSH
33921: CALL_OW 336
// end ;
33925: GO 33890
33927: POP
33928: POP
// end ;
33929: PPOPN 2
33931: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33932: LD_EXP 51
33936: PUSH
33937: LD_EXP 104
33941: AND
33942: IFFALSE 34230
33944: GO 33946
33946: DISABLE
33947: LD_INT 0
33949: PPUSH
33950: PPUSH
33951: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33952: LD_OWVAR 2
33956: PPUSH
33957: LD_INT 9
33959: PPUSH
33960: LD_INT 1
33962: PPUSH
33963: LD_INT 1
33965: PPUSH
33966: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33970: LD_INT 9
33972: PPUSH
33973: LD_OWVAR 2
33977: PPUSH
33978: CALL_OW 343
// uc_side := 9 ;
33982: LD_ADDR_OWVAR 20
33986: PUSH
33987: LD_INT 9
33989: ST_TO_ADDR
// uc_nation := 2 ;
33990: LD_ADDR_OWVAR 21
33994: PUSH
33995: LD_INT 2
33997: ST_TO_ADDR
// hc_name := Dark Warrior ;
33998: LD_ADDR_OWVAR 26
34002: PUSH
34003: LD_STRING Dark Warrior
34005: ST_TO_ADDR
// hc_gallery :=  ;
34006: LD_ADDR_OWVAR 33
34010: PUSH
34011: LD_STRING 
34013: ST_TO_ADDR
// hc_noskilllimit := true ;
34014: LD_ADDR_OWVAR 76
34018: PUSH
34019: LD_INT 1
34021: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
34022: LD_ADDR_OWVAR 31
34026: PUSH
34027: LD_INT 30
34029: PUSH
34030: LD_INT 30
34032: PUSH
34033: LD_INT 30
34035: PUSH
34036: LD_INT 30
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: ST_TO_ADDR
// un := CreateHuman ;
34045: LD_ADDR_VAR 0 3
34049: PUSH
34050: CALL_OW 44
34054: ST_TO_ADDR
// hc_noskilllimit := false ;
34055: LD_ADDR_OWVAR 76
34059: PUSH
34060: LD_INT 0
34062: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34063: LD_VAR 0 3
34067: PPUSH
34068: LD_INT 1
34070: PPUSH
34071: CALL_OW 51
// ToLua ( playRanger() ) ;
34075: LD_STRING playRanger()
34077: PPUSH
34078: CALL_OW 559
// p := 0 ;
34082: LD_ADDR_VAR 0 2
34086: PUSH
34087: LD_INT 0
34089: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34090: LD_INT 35
34092: PPUSH
34093: CALL_OW 67
// p := p + 1 ;
34097: LD_ADDR_VAR 0 2
34101: PUSH
34102: LD_VAR 0 2
34106: PUSH
34107: LD_INT 1
34109: PLUS
34110: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
34111: LD_VAR 0 3
34115: PPUSH
34116: CALL_OW 256
34120: PUSH
34121: LD_INT 1000
34123: LESS
34124: IFFALSE 34138
// SetLives ( un , 1000 ) ;
34126: LD_VAR 0 3
34130: PPUSH
34131: LD_INT 1000
34133: PPUSH
34134: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
34138: LD_VAR 0 3
34142: PPUSH
34143: LD_INT 81
34145: PUSH
34146: LD_OWVAR 2
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 91
34157: PUSH
34158: LD_VAR 0 3
34162: PUSH
34163: LD_INT 30
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: LIST
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PPUSH
34175: CALL_OW 69
34179: PPUSH
34180: LD_VAR 0 3
34184: PPUSH
34185: CALL_OW 74
34189: PPUSH
34190: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
34194: LD_VAR 0 2
34198: PUSH
34199: LD_INT 80
34201: GREATER
34202: PUSH
34203: LD_VAR 0 3
34207: PPUSH
34208: CALL_OW 301
34212: OR
34213: IFFALSE 34090
// if un then
34215: LD_VAR 0 3
34219: IFFALSE 34230
// RemoveUnit ( un ) ;
34221: LD_VAR 0 3
34225: PPUSH
34226: CALL_OW 64
// end ;
34230: PPOPN 3
34232: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
34233: LD_EXP 105
34237: IFFALSE 34353
34239: GO 34241
34241: DISABLE
34242: LD_INT 0
34244: PPUSH
34245: PPUSH
34246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34247: LD_ADDR_VAR 0 2
34251: PUSH
34252: LD_INT 81
34254: PUSH
34255: LD_OWVAR 2
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 21
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PPUSH
34278: CALL_OW 69
34282: ST_TO_ADDR
// ToLua ( playComputer() ) ;
34283: LD_STRING playComputer()
34285: PPUSH
34286: CALL_OW 559
// if not tmp then
34290: LD_VAR 0 2
34294: NOT
34295: IFFALSE 34299
// exit ;
34297: GO 34353
// for i in tmp do
34299: LD_ADDR_VAR 0 1
34303: PUSH
34304: LD_VAR 0 2
34308: PUSH
34309: FOR_IN
34310: IFFALSE 34351
// for j := 1 to 4 do
34312: LD_ADDR_VAR 0 3
34316: PUSH
34317: DOUBLE
34318: LD_INT 1
34320: DEC
34321: ST_TO_ADDR
34322: LD_INT 4
34324: PUSH
34325: FOR_TO
34326: IFFALSE 34347
// SetSkill ( i , j , 10 ) ;
34328: LD_VAR 0 1
34332: PPUSH
34333: LD_VAR 0 3
34337: PPUSH
34338: LD_INT 10
34340: PPUSH
34341: CALL_OW 237
34345: GO 34325
34347: POP
34348: POP
34349: GO 34309
34351: POP
34352: POP
// end ;
34353: PPOPN 3
34355: END
// every 0 0$1 trigger s30 do var i , tmp ;
34356: LD_EXP 106
34360: IFFALSE 34429
34362: GO 34364
34364: DISABLE
34365: LD_INT 0
34367: PPUSH
34368: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34369: LD_ADDR_VAR 0 2
34373: PUSH
34374: LD_INT 22
34376: PUSH
34377: LD_OWVAR 2
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PPUSH
34386: CALL_OW 69
34390: ST_TO_ADDR
// if not tmp then
34391: LD_VAR 0 2
34395: NOT
34396: IFFALSE 34400
// exit ;
34398: GO 34429
// for i in tmp do
34400: LD_ADDR_VAR 0 1
34404: PUSH
34405: LD_VAR 0 2
34409: PUSH
34410: FOR_IN
34411: IFFALSE 34427
// SetLives ( i , 300 ) ;
34413: LD_VAR 0 1
34417: PPUSH
34418: LD_INT 300
34420: PPUSH
34421: CALL_OW 234
34425: GO 34410
34427: POP
34428: POP
// end ;
34429: PPOPN 2
34431: END
// every 0 0$1 trigger s60 do var i , tmp ;
34432: LD_EXP 107
34436: IFFALSE 34505
34438: GO 34440
34440: DISABLE
34441: LD_INT 0
34443: PPUSH
34444: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34445: LD_ADDR_VAR 0 2
34449: PUSH
34450: LD_INT 22
34452: PUSH
34453: LD_OWVAR 2
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PPUSH
34462: CALL_OW 69
34466: ST_TO_ADDR
// if not tmp then
34467: LD_VAR 0 2
34471: NOT
34472: IFFALSE 34476
// exit ;
34474: GO 34505
// for i in tmp do
34476: LD_ADDR_VAR 0 1
34480: PUSH
34481: LD_VAR 0 2
34485: PUSH
34486: FOR_IN
34487: IFFALSE 34503
// SetLives ( i , 600 ) ;
34489: LD_VAR 0 1
34493: PPUSH
34494: LD_INT 600
34496: PPUSH
34497: CALL_OW 234
34501: GO 34486
34503: POP
34504: POP
// end ;
34505: PPOPN 2
34507: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34508: LD_INT 0
34510: PPUSH
// case cmd of 301 :
34511: LD_VAR 0 1
34515: PUSH
34516: LD_INT 301
34518: DOUBLE
34519: EQUAL
34520: IFTRUE 34524
34522: GO 34556
34524: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34525: LD_VAR 0 6
34529: PPUSH
34530: LD_VAR 0 7
34534: PPUSH
34535: LD_VAR 0 8
34539: PPUSH
34540: LD_VAR 0 4
34544: PPUSH
34545: LD_VAR 0 5
34549: PPUSH
34550: CALL 35765 0 5
34554: GO 34677
34556: LD_INT 302
34558: DOUBLE
34559: EQUAL
34560: IFTRUE 34564
34562: GO 34601
34564: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34565: LD_VAR 0 6
34569: PPUSH
34570: LD_VAR 0 7
34574: PPUSH
34575: LD_VAR 0 8
34579: PPUSH
34580: LD_VAR 0 9
34584: PPUSH
34585: LD_VAR 0 4
34589: PPUSH
34590: LD_VAR 0 5
34594: PPUSH
34595: CALL 35856 0 6
34599: GO 34677
34601: LD_INT 303
34603: DOUBLE
34604: EQUAL
34605: IFTRUE 34609
34607: GO 34646
34609: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34610: LD_VAR 0 6
34614: PPUSH
34615: LD_VAR 0 7
34619: PPUSH
34620: LD_VAR 0 8
34624: PPUSH
34625: LD_VAR 0 9
34629: PPUSH
34630: LD_VAR 0 4
34634: PPUSH
34635: LD_VAR 0 5
34639: PPUSH
34640: CALL 34682 0 6
34644: GO 34677
34646: LD_INT 304
34648: DOUBLE
34649: EQUAL
34650: IFTRUE 34654
34652: GO 34676
34654: POP
// hHackTeleport ( unit , x , y ) ; end ;
34655: LD_VAR 0 2
34659: PPUSH
34660: LD_VAR 0 4
34664: PPUSH
34665: LD_VAR 0 5
34669: PPUSH
34670: CALL 36449 0 3
34674: GO 34677
34676: POP
// end ;
34677: LD_VAR 0 12
34681: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34682: LD_INT 0
34684: PPUSH
34685: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34686: LD_VAR 0 1
34690: PUSH
34691: LD_INT 1
34693: LESS
34694: PUSH
34695: LD_VAR 0 1
34699: PUSH
34700: LD_INT 3
34702: GREATER
34703: OR
34704: PUSH
34705: LD_VAR 0 5
34709: PPUSH
34710: LD_VAR 0 6
34714: PPUSH
34715: CALL_OW 428
34719: OR
34720: IFFALSE 34724
// exit ;
34722: GO 35452
// uc_side := your_side ;
34724: LD_ADDR_OWVAR 20
34728: PUSH
34729: LD_OWVAR 2
34733: ST_TO_ADDR
// uc_nation := nation ;
34734: LD_ADDR_OWVAR 21
34738: PUSH
34739: LD_VAR 0 1
34743: ST_TO_ADDR
// bc_level = 1 ;
34744: LD_ADDR_OWVAR 43
34748: PUSH
34749: LD_INT 1
34751: ST_TO_ADDR
// case btype of 1 :
34752: LD_VAR 0 2
34756: PUSH
34757: LD_INT 1
34759: DOUBLE
34760: EQUAL
34761: IFTRUE 34765
34763: GO 34776
34765: POP
// bc_type := b_depot ; 2 :
34766: LD_ADDR_OWVAR 42
34770: PUSH
34771: LD_INT 0
34773: ST_TO_ADDR
34774: GO 35396
34776: LD_INT 2
34778: DOUBLE
34779: EQUAL
34780: IFTRUE 34784
34782: GO 34795
34784: POP
// bc_type := b_warehouse ; 3 :
34785: LD_ADDR_OWVAR 42
34789: PUSH
34790: LD_INT 1
34792: ST_TO_ADDR
34793: GO 35396
34795: LD_INT 3
34797: DOUBLE
34798: EQUAL
34799: IFTRUE 34803
34801: GO 34814
34803: POP
// bc_type := b_lab ; 4 .. 9 :
34804: LD_ADDR_OWVAR 42
34808: PUSH
34809: LD_INT 6
34811: ST_TO_ADDR
34812: GO 35396
34814: LD_INT 4
34816: DOUBLE
34817: GREATEREQUAL
34818: IFFALSE 34826
34820: LD_INT 9
34822: DOUBLE
34823: LESSEQUAL
34824: IFTRUE 34828
34826: GO 34888
34828: POP
// begin bc_type := b_lab_half ;
34829: LD_ADDR_OWVAR 42
34833: PUSH
34834: LD_INT 7
34836: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34837: LD_ADDR_OWVAR 44
34841: PUSH
34842: LD_INT 10
34844: PUSH
34845: LD_INT 11
34847: PUSH
34848: LD_INT 12
34850: PUSH
34851: LD_INT 15
34853: PUSH
34854: LD_INT 14
34856: PUSH
34857: LD_INT 13
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: PUSH
34868: LD_VAR 0 2
34872: PUSH
34873: LD_INT 3
34875: MINUS
34876: ARRAY
34877: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
34878: LD_ADDR_OWVAR 45
34882: PUSH
34883: LD_INT 9
34885: ST_TO_ADDR
// end ; 10 .. 13 :
34886: GO 35396
34888: LD_INT 10
34890: DOUBLE
34891: GREATEREQUAL
34892: IFFALSE 34900
34894: LD_INT 13
34896: DOUBLE
34897: LESSEQUAL
34898: IFTRUE 34902
34900: GO 34979
34902: POP
// begin bc_type := b_lab_full ;
34903: LD_ADDR_OWVAR 42
34907: PUSH
34908: LD_INT 8
34910: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34911: LD_ADDR_OWVAR 44
34915: PUSH
34916: LD_INT 10
34918: PUSH
34919: LD_INT 12
34921: PUSH
34922: LD_INT 14
34924: PUSH
34925: LD_INT 13
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: PUSH
34934: LD_VAR 0 2
34938: PUSH
34939: LD_INT 9
34941: MINUS
34942: ARRAY
34943: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34944: LD_ADDR_OWVAR 45
34948: PUSH
34949: LD_INT 11
34951: PUSH
34952: LD_INT 15
34954: PUSH
34955: LD_INT 12
34957: PUSH
34958: LD_INT 15
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: PUSH
34967: LD_VAR 0 2
34971: PUSH
34972: LD_INT 9
34974: MINUS
34975: ARRAY
34976: ST_TO_ADDR
// end ; 14 :
34977: GO 35396
34979: LD_INT 14
34981: DOUBLE
34982: EQUAL
34983: IFTRUE 34987
34985: GO 34998
34987: POP
// bc_type := b_workshop ; 15 :
34988: LD_ADDR_OWVAR 42
34992: PUSH
34993: LD_INT 2
34995: ST_TO_ADDR
34996: GO 35396
34998: LD_INT 15
35000: DOUBLE
35001: EQUAL
35002: IFTRUE 35006
35004: GO 35017
35006: POP
// bc_type := b_factory ; 16 :
35007: LD_ADDR_OWVAR 42
35011: PUSH
35012: LD_INT 3
35014: ST_TO_ADDR
35015: GO 35396
35017: LD_INT 16
35019: DOUBLE
35020: EQUAL
35021: IFTRUE 35025
35023: GO 35036
35025: POP
// bc_type := b_ext_gun ; 17 :
35026: LD_ADDR_OWVAR 42
35030: PUSH
35031: LD_INT 17
35033: ST_TO_ADDR
35034: GO 35396
35036: LD_INT 17
35038: DOUBLE
35039: EQUAL
35040: IFTRUE 35044
35042: GO 35072
35044: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
35045: LD_ADDR_OWVAR 42
35049: PUSH
35050: LD_INT 19
35052: PUSH
35053: LD_INT 23
35055: PUSH
35056: LD_INT 19
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: LIST
35063: PUSH
35064: LD_VAR 0 1
35068: ARRAY
35069: ST_TO_ADDR
35070: GO 35396
35072: LD_INT 18
35074: DOUBLE
35075: EQUAL
35076: IFTRUE 35080
35078: GO 35091
35080: POP
// bc_type := b_ext_radar ; 19 :
35081: LD_ADDR_OWVAR 42
35085: PUSH
35086: LD_INT 20
35088: ST_TO_ADDR
35089: GO 35396
35091: LD_INT 19
35093: DOUBLE
35094: EQUAL
35095: IFTRUE 35099
35097: GO 35110
35099: POP
// bc_type := b_ext_radio ; 20 :
35100: LD_ADDR_OWVAR 42
35104: PUSH
35105: LD_INT 22
35107: ST_TO_ADDR
35108: GO 35396
35110: LD_INT 20
35112: DOUBLE
35113: EQUAL
35114: IFTRUE 35118
35116: GO 35129
35118: POP
// bc_type := b_ext_siberium ; 21 :
35119: LD_ADDR_OWVAR 42
35123: PUSH
35124: LD_INT 21
35126: ST_TO_ADDR
35127: GO 35396
35129: LD_INT 21
35131: DOUBLE
35132: EQUAL
35133: IFTRUE 35137
35135: GO 35148
35137: POP
// bc_type := b_ext_computer ; 22 :
35138: LD_ADDR_OWVAR 42
35142: PUSH
35143: LD_INT 24
35145: ST_TO_ADDR
35146: GO 35396
35148: LD_INT 22
35150: DOUBLE
35151: EQUAL
35152: IFTRUE 35156
35154: GO 35167
35156: POP
// bc_type := b_ext_track ; 23 :
35157: LD_ADDR_OWVAR 42
35161: PUSH
35162: LD_INT 16
35164: ST_TO_ADDR
35165: GO 35396
35167: LD_INT 23
35169: DOUBLE
35170: EQUAL
35171: IFTRUE 35175
35173: GO 35186
35175: POP
// bc_type := b_ext_laser ; 24 :
35176: LD_ADDR_OWVAR 42
35180: PUSH
35181: LD_INT 25
35183: ST_TO_ADDR
35184: GO 35396
35186: LD_INT 24
35188: DOUBLE
35189: EQUAL
35190: IFTRUE 35194
35192: GO 35205
35194: POP
// bc_type := b_control_tower ; 25 :
35195: LD_ADDR_OWVAR 42
35199: PUSH
35200: LD_INT 36
35202: ST_TO_ADDR
35203: GO 35396
35205: LD_INT 25
35207: DOUBLE
35208: EQUAL
35209: IFTRUE 35213
35211: GO 35224
35213: POP
// bc_type := b_breastwork ; 26 :
35214: LD_ADDR_OWVAR 42
35218: PUSH
35219: LD_INT 31
35221: ST_TO_ADDR
35222: GO 35396
35224: LD_INT 26
35226: DOUBLE
35227: EQUAL
35228: IFTRUE 35232
35230: GO 35243
35232: POP
// bc_type := b_bunker ; 27 :
35233: LD_ADDR_OWVAR 42
35237: PUSH
35238: LD_INT 32
35240: ST_TO_ADDR
35241: GO 35396
35243: LD_INT 27
35245: DOUBLE
35246: EQUAL
35247: IFTRUE 35251
35249: GO 35262
35251: POP
// bc_type := b_turret ; 28 :
35252: LD_ADDR_OWVAR 42
35256: PUSH
35257: LD_INT 33
35259: ST_TO_ADDR
35260: GO 35396
35262: LD_INT 28
35264: DOUBLE
35265: EQUAL
35266: IFTRUE 35270
35268: GO 35281
35270: POP
// bc_type := b_armoury ; 29 :
35271: LD_ADDR_OWVAR 42
35275: PUSH
35276: LD_INT 4
35278: ST_TO_ADDR
35279: GO 35396
35281: LD_INT 29
35283: DOUBLE
35284: EQUAL
35285: IFTRUE 35289
35287: GO 35300
35289: POP
// bc_type := b_barracks ; 30 :
35290: LD_ADDR_OWVAR 42
35294: PUSH
35295: LD_INT 5
35297: ST_TO_ADDR
35298: GO 35396
35300: LD_INT 30
35302: DOUBLE
35303: EQUAL
35304: IFTRUE 35308
35306: GO 35319
35308: POP
// bc_type := b_solar_power ; 31 :
35309: LD_ADDR_OWVAR 42
35313: PUSH
35314: LD_INT 27
35316: ST_TO_ADDR
35317: GO 35396
35319: LD_INT 31
35321: DOUBLE
35322: EQUAL
35323: IFTRUE 35327
35325: GO 35338
35327: POP
// bc_type := b_oil_power ; 32 :
35328: LD_ADDR_OWVAR 42
35332: PUSH
35333: LD_INT 26
35335: ST_TO_ADDR
35336: GO 35396
35338: LD_INT 32
35340: DOUBLE
35341: EQUAL
35342: IFTRUE 35346
35344: GO 35357
35346: POP
// bc_type := b_siberite_power ; 33 :
35347: LD_ADDR_OWVAR 42
35351: PUSH
35352: LD_INT 28
35354: ST_TO_ADDR
35355: GO 35396
35357: LD_INT 33
35359: DOUBLE
35360: EQUAL
35361: IFTRUE 35365
35363: GO 35376
35365: POP
// bc_type := b_oil_mine ; 34 :
35366: LD_ADDR_OWVAR 42
35370: PUSH
35371: LD_INT 29
35373: ST_TO_ADDR
35374: GO 35396
35376: LD_INT 34
35378: DOUBLE
35379: EQUAL
35380: IFTRUE 35384
35382: GO 35395
35384: POP
// bc_type := b_siberite_mine ; end ;
35385: LD_ADDR_OWVAR 42
35389: PUSH
35390: LD_INT 30
35392: ST_TO_ADDR
35393: GO 35396
35395: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
35396: LD_ADDR_VAR 0 8
35400: PUSH
35401: LD_VAR 0 5
35405: PPUSH
35406: LD_VAR 0 6
35410: PPUSH
35411: LD_VAR 0 3
35415: PPUSH
35416: CALL_OW 47
35420: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
35421: LD_OWVAR 42
35425: PUSH
35426: LD_INT 32
35428: PUSH
35429: LD_INT 33
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: IN
35436: IFFALSE 35452
// PlaceWeaponTurret ( b , weapon ) ;
35438: LD_VAR 0 8
35442: PPUSH
35443: LD_VAR 0 4
35447: PPUSH
35448: CALL_OW 431
// end ;
35452: LD_VAR 0 7
35456: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35457: LD_INT 0
35459: PPUSH
35460: PPUSH
35461: PPUSH
35462: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35463: LD_ADDR_VAR 0 4
35467: PUSH
35468: LD_INT 22
35470: PUSH
35471: LD_OWVAR 2
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 30
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 30
35495: PUSH
35496: LD_INT 1
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: LIST
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PPUSH
35512: CALL_OW 69
35516: ST_TO_ADDR
// if not tmp then
35517: LD_VAR 0 4
35521: NOT
35522: IFFALSE 35526
// exit ;
35524: GO 35585
// for i in tmp do
35526: LD_ADDR_VAR 0 2
35530: PUSH
35531: LD_VAR 0 4
35535: PUSH
35536: FOR_IN
35537: IFFALSE 35583
// for j = 1 to 3 do
35539: LD_ADDR_VAR 0 3
35543: PUSH
35544: DOUBLE
35545: LD_INT 1
35547: DEC
35548: ST_TO_ADDR
35549: LD_INT 3
35551: PUSH
35552: FOR_TO
35553: IFFALSE 35579
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35555: LD_VAR 0 2
35559: PPUSH
35560: CALL_OW 274
35564: PPUSH
35565: LD_VAR 0 3
35569: PPUSH
35570: LD_INT 99999
35572: PPUSH
35573: CALL_OW 277
35577: GO 35552
35579: POP
35580: POP
35581: GO 35536
35583: POP
35584: POP
// end ;
35585: LD_VAR 0 1
35589: RET
// export function hHackSetLevel10 ; var i , j ; begin
35590: LD_INT 0
35592: PPUSH
35593: PPUSH
35594: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35595: LD_ADDR_VAR 0 2
35599: PUSH
35600: LD_INT 21
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PPUSH
35610: CALL_OW 69
35614: PUSH
35615: FOR_IN
35616: IFFALSE 35668
// if IsSelected ( i ) then
35618: LD_VAR 0 2
35622: PPUSH
35623: CALL_OW 306
35627: IFFALSE 35666
// begin for j := 1 to 4 do
35629: LD_ADDR_VAR 0 3
35633: PUSH
35634: DOUBLE
35635: LD_INT 1
35637: DEC
35638: ST_TO_ADDR
35639: LD_INT 4
35641: PUSH
35642: FOR_TO
35643: IFFALSE 35664
// SetSkill ( i , j , 10 ) ;
35645: LD_VAR 0 2
35649: PPUSH
35650: LD_VAR 0 3
35654: PPUSH
35655: LD_INT 10
35657: PPUSH
35658: CALL_OW 237
35662: GO 35642
35664: POP
35665: POP
// end ;
35666: GO 35615
35668: POP
35669: POP
// end ;
35670: LD_VAR 0 1
35674: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35675: LD_INT 0
35677: PPUSH
35678: PPUSH
35679: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35680: LD_ADDR_VAR 0 2
35684: PUSH
35685: LD_INT 22
35687: PUSH
35688: LD_OWVAR 2
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 21
35699: PUSH
35700: LD_INT 1
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PPUSH
35711: CALL_OW 69
35715: PUSH
35716: FOR_IN
35717: IFFALSE 35758
// begin for j := 1 to 4 do
35719: LD_ADDR_VAR 0 3
35723: PUSH
35724: DOUBLE
35725: LD_INT 1
35727: DEC
35728: ST_TO_ADDR
35729: LD_INT 4
35731: PUSH
35732: FOR_TO
35733: IFFALSE 35754
// SetSkill ( i , j , 10 ) ;
35735: LD_VAR 0 2
35739: PPUSH
35740: LD_VAR 0 3
35744: PPUSH
35745: LD_INT 10
35747: PPUSH
35748: CALL_OW 237
35752: GO 35732
35754: POP
35755: POP
// end ;
35756: GO 35716
35758: POP
35759: POP
// end ;
35760: LD_VAR 0 1
35764: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35765: LD_INT 0
35767: PPUSH
// uc_side := your_side ;
35768: LD_ADDR_OWVAR 20
35772: PUSH
35773: LD_OWVAR 2
35777: ST_TO_ADDR
// uc_nation := nation ;
35778: LD_ADDR_OWVAR 21
35782: PUSH
35783: LD_VAR 0 1
35787: ST_TO_ADDR
// InitHc ;
35788: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35792: LD_INT 0
35794: PPUSH
35795: LD_VAR 0 2
35799: PPUSH
35800: LD_VAR 0 3
35804: PPUSH
35805: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35809: LD_VAR 0 4
35813: PPUSH
35814: LD_VAR 0 5
35818: PPUSH
35819: CALL_OW 428
35823: PUSH
35824: LD_INT 0
35826: EQUAL
35827: IFFALSE 35851
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35829: CALL_OW 44
35833: PPUSH
35834: LD_VAR 0 4
35838: PPUSH
35839: LD_VAR 0 5
35843: PPUSH
35844: LD_INT 1
35846: PPUSH
35847: CALL_OW 48
// end ;
35851: LD_VAR 0 6
35855: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35856: LD_INT 0
35858: PPUSH
35859: PPUSH
// uc_side := your_side ;
35860: LD_ADDR_OWVAR 20
35864: PUSH
35865: LD_OWVAR 2
35869: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35870: LD_VAR 0 1
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: LD_INT 3
35883: PUSH
35884: LD_INT 4
35886: PUSH
35887: LD_INT 5
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: IN
35897: IFFALSE 35909
// uc_nation := nation_american else
35899: LD_ADDR_OWVAR 21
35903: PUSH
35904: LD_INT 1
35906: ST_TO_ADDR
35907: GO 35952
// if chassis in [ 11 , 12 , 13 , 14 ] then
35909: LD_VAR 0 1
35913: PUSH
35914: LD_INT 11
35916: PUSH
35917: LD_INT 12
35919: PUSH
35920: LD_INT 13
35922: PUSH
35923: LD_INT 14
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: IN
35932: IFFALSE 35944
// uc_nation := nation_arabian else
35934: LD_ADDR_OWVAR 21
35938: PUSH
35939: LD_INT 2
35941: ST_TO_ADDR
35942: GO 35952
// uc_nation := nation_russian ;
35944: LD_ADDR_OWVAR 21
35948: PUSH
35949: LD_INT 3
35951: ST_TO_ADDR
// vc_chassis := chassis ;
35952: LD_ADDR_OWVAR 37
35956: PUSH
35957: LD_VAR 0 1
35961: ST_TO_ADDR
// vc_engine := engine ;
35962: LD_ADDR_OWVAR 39
35966: PUSH
35967: LD_VAR 0 2
35971: ST_TO_ADDR
// vc_control := control ;
35972: LD_ADDR_OWVAR 38
35976: PUSH
35977: LD_VAR 0 3
35981: ST_TO_ADDR
// vc_weapon := weapon ;
35982: LD_ADDR_OWVAR 40
35986: PUSH
35987: LD_VAR 0 4
35991: ST_TO_ADDR
// un := CreateVehicle ;
35992: LD_ADDR_VAR 0 8
35996: PUSH
35997: CALL_OW 45
36001: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
36002: LD_VAR 0 8
36006: PPUSH
36007: LD_INT 0
36009: PPUSH
36010: LD_INT 5
36012: PPUSH
36013: CALL_OW 12
36017: PPUSH
36018: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
36022: LD_VAR 0 8
36026: PPUSH
36027: LD_VAR 0 5
36031: PPUSH
36032: LD_VAR 0 6
36036: PPUSH
36037: LD_INT 1
36039: PPUSH
36040: CALL_OW 48
// end ;
36044: LD_VAR 0 7
36048: RET
// export hInvincible ; every 1 do
36049: GO 36051
36051: DISABLE
// hInvincible := [ ] ;
36052: LD_ADDR_EXP 108
36056: PUSH
36057: EMPTY
36058: ST_TO_ADDR
36059: END
// every 10 do var i ;
36060: GO 36062
36062: DISABLE
36063: LD_INT 0
36065: PPUSH
// begin enable ;
36066: ENABLE
// if not hInvincible then
36067: LD_EXP 108
36071: NOT
36072: IFFALSE 36076
// exit ;
36074: GO 36120
// for i in hInvincible do
36076: LD_ADDR_VAR 0 1
36080: PUSH
36081: LD_EXP 108
36085: PUSH
36086: FOR_IN
36087: IFFALSE 36118
// if GetLives ( i ) < 1000 then
36089: LD_VAR 0 1
36093: PPUSH
36094: CALL_OW 256
36098: PUSH
36099: LD_INT 1000
36101: LESS
36102: IFFALSE 36116
// SetLives ( i , 1000 ) ;
36104: LD_VAR 0 1
36108: PPUSH
36109: LD_INT 1000
36111: PPUSH
36112: CALL_OW 234
36116: GO 36086
36118: POP
36119: POP
// end ;
36120: PPOPN 1
36122: END
// export function hHackInvincible ; var i ; begin
36123: LD_INT 0
36125: PPUSH
36126: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36127: LD_ADDR_VAR 0 2
36131: PUSH
36132: LD_INT 2
36134: PUSH
36135: LD_INT 21
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 21
36147: PUSH
36148: LD_INT 2
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: LIST
36159: PPUSH
36160: CALL_OW 69
36164: PUSH
36165: FOR_IN
36166: IFFALSE 36227
// if IsSelected ( i ) then
36168: LD_VAR 0 2
36172: PPUSH
36173: CALL_OW 306
36177: IFFALSE 36225
// begin if i in hInvincible then
36179: LD_VAR 0 2
36183: PUSH
36184: LD_EXP 108
36188: IN
36189: IFFALSE 36209
// hInvincible := hInvincible diff i else
36191: LD_ADDR_EXP 108
36195: PUSH
36196: LD_EXP 108
36200: PUSH
36201: LD_VAR 0 2
36205: DIFF
36206: ST_TO_ADDR
36207: GO 36225
// hInvincible := hInvincible union i ;
36209: LD_ADDR_EXP 108
36213: PUSH
36214: LD_EXP 108
36218: PUSH
36219: LD_VAR 0 2
36223: UNION
36224: ST_TO_ADDR
// end ;
36225: GO 36165
36227: POP
36228: POP
// end ;
36229: LD_VAR 0 1
36233: RET
// export function hHackInvisible ; var i , j ; begin
36234: LD_INT 0
36236: PPUSH
36237: PPUSH
36238: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36239: LD_ADDR_VAR 0 2
36243: PUSH
36244: LD_INT 21
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PPUSH
36254: CALL_OW 69
36258: PUSH
36259: FOR_IN
36260: IFFALSE 36284
// if IsSelected ( i ) then
36262: LD_VAR 0 2
36266: PPUSH
36267: CALL_OW 306
36271: IFFALSE 36282
// ComForceInvisible ( i ) ;
36273: LD_VAR 0 2
36277: PPUSH
36278: CALL_OW 496
36282: GO 36259
36284: POP
36285: POP
// end ;
36286: LD_VAR 0 1
36290: RET
// export function hHackChangeYourSide ; begin
36291: LD_INT 0
36293: PPUSH
// if your_side = 8 then
36294: LD_OWVAR 2
36298: PUSH
36299: LD_INT 8
36301: EQUAL
36302: IFFALSE 36314
// your_side := 0 else
36304: LD_ADDR_OWVAR 2
36308: PUSH
36309: LD_INT 0
36311: ST_TO_ADDR
36312: GO 36328
// your_side := your_side + 1 ;
36314: LD_ADDR_OWVAR 2
36318: PUSH
36319: LD_OWVAR 2
36323: PUSH
36324: LD_INT 1
36326: PLUS
36327: ST_TO_ADDR
// end ;
36328: LD_VAR 0 1
36332: RET
// export function hHackChangeUnitSide ; var i , j ; begin
36333: LD_INT 0
36335: PPUSH
36336: PPUSH
36337: PPUSH
// for i in all_units do
36338: LD_ADDR_VAR 0 2
36342: PUSH
36343: LD_OWVAR 3
36347: PUSH
36348: FOR_IN
36349: IFFALSE 36427
// if IsSelected ( i ) then
36351: LD_VAR 0 2
36355: PPUSH
36356: CALL_OW 306
36360: IFFALSE 36425
// begin j := GetSide ( i ) ;
36362: LD_ADDR_VAR 0 3
36366: PUSH
36367: LD_VAR 0 2
36371: PPUSH
36372: CALL_OW 255
36376: ST_TO_ADDR
// if j = 8 then
36377: LD_VAR 0 3
36381: PUSH
36382: LD_INT 8
36384: EQUAL
36385: IFFALSE 36397
// j := 0 else
36387: LD_ADDR_VAR 0 3
36391: PUSH
36392: LD_INT 0
36394: ST_TO_ADDR
36395: GO 36411
// j := j + 1 ;
36397: LD_ADDR_VAR 0 3
36401: PUSH
36402: LD_VAR 0 3
36406: PUSH
36407: LD_INT 1
36409: PLUS
36410: ST_TO_ADDR
// SetSide ( i , j ) ;
36411: LD_VAR 0 2
36415: PPUSH
36416: LD_VAR 0 3
36420: PPUSH
36421: CALL_OW 235
// end ;
36425: GO 36348
36427: POP
36428: POP
// end ;
36429: LD_VAR 0 1
36433: RET
// export function hHackFog ; begin
36434: LD_INT 0
36436: PPUSH
// FogOff ( true ) ;
36437: LD_INT 1
36439: PPUSH
36440: CALL_OW 344
// end ;
36444: LD_VAR 0 1
36448: RET
// export function hHackTeleport ( unit , x , y ) ; begin
36449: LD_INT 0
36451: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
36452: LD_VAR 0 1
36456: PPUSH
36457: LD_VAR 0 2
36461: PPUSH
36462: LD_VAR 0 3
36466: PPUSH
36467: LD_INT 1
36469: PPUSH
36470: LD_INT 1
36472: PPUSH
36473: CALL_OW 483
// CenterOnXY ( x , y ) ;
36477: LD_VAR 0 2
36481: PPUSH
36482: LD_VAR 0 3
36486: PPUSH
36487: CALL_OW 84
// end ;
36491: LD_VAR 0 4
36495: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36496: LD_INT 0
36498: PPUSH
36499: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36500: LD_VAR 0 1
36504: NOT
36505: PUSH
36506: LD_VAR 0 2
36510: PPUSH
36511: LD_VAR 0 3
36515: PPUSH
36516: CALL_OW 488
36520: NOT
36521: OR
36522: PUSH
36523: LD_VAR 0 1
36527: PPUSH
36528: CALL_OW 266
36532: PUSH
36533: LD_INT 3
36535: NONEQUAL
36536: PUSH
36537: LD_VAR 0 1
36541: PPUSH
36542: CALL_OW 247
36546: PUSH
36547: LD_INT 1
36549: EQUAL
36550: NOT
36551: AND
36552: OR
36553: IFFALSE 36557
// exit ;
36555: GO 36839
// if GetType ( factory ) = unit_human then
36557: LD_VAR 0 1
36561: PPUSH
36562: CALL_OW 247
36566: PUSH
36567: LD_INT 1
36569: EQUAL
36570: IFFALSE 36587
// factory := IsInUnit ( factory ) ;
36572: LD_ADDR_VAR 0 1
36576: PUSH
36577: LD_VAR 0 1
36581: PPUSH
36582: CALL_OW 310
36586: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36587: LD_VAR 0 1
36591: PPUSH
36592: CALL_OW 266
36596: PUSH
36597: LD_INT 3
36599: NONEQUAL
36600: IFFALSE 36604
// exit ;
36602: GO 36839
// for i := 1 to Count ( factoryWaypoints ) do
36604: LD_ADDR_VAR 0 5
36608: PUSH
36609: DOUBLE
36610: LD_INT 1
36612: DEC
36613: ST_TO_ADDR
36614: LD_EXP 109
36618: PPUSH
36619: CALL 45342 0 1
36623: PUSH
36624: FOR_TO
36625: IFFALSE 36787
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
36627: LD_VAR 0 2
36631: PPUSH
36632: LD_VAR 0 3
36636: PPUSH
36637: CALL_OW 428
36641: PUSH
36642: LD_EXP 109
36646: PUSH
36647: LD_VAR 0 5
36651: ARRAY
36652: PUSH
36653: LD_INT 2
36655: ARRAY
36656: EQUAL
36657: IFFALSE 36689
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
36659: LD_ADDR_EXP 109
36663: PUSH
36664: LD_EXP 109
36668: PPUSH
36669: LD_VAR 0 5
36673: PPUSH
36674: CALL_OW 3
36678: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36679: CALL 36844 0 0
// exit ;
36683: POP
36684: POP
36685: GO 36839
// end else
36687: GO 36785
// if factory = factoryWaypoints [ i ] [ 2 ] then
36689: LD_VAR 0 1
36693: PUSH
36694: LD_EXP 109
36698: PUSH
36699: LD_VAR 0 5
36703: ARRAY
36704: PUSH
36705: LD_INT 2
36707: ARRAY
36708: EQUAL
36709: IFFALSE 36785
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
36711: LD_ADDR_EXP 109
36715: PUSH
36716: LD_EXP 109
36720: PPUSH
36721: LD_VAR 0 5
36725: PPUSH
36726: CALL_OW 3
36730: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
36731: LD_ADDR_EXP 109
36735: PUSH
36736: LD_EXP 109
36740: PPUSH
36741: LD_VAR 0 1
36745: PPUSH
36746: CALL_OW 255
36750: PUSH
36751: LD_VAR 0 1
36755: PUSH
36756: LD_VAR 0 2
36760: PUSH
36761: LD_VAR 0 3
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: PPUSH
36772: CALL 80951 0 2
36776: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36777: CALL 36844 0 0
// exit ;
36781: POP
36782: POP
36783: GO 36839
// end ; end ;
36785: GO 36624
36787: POP
36788: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
36789: LD_ADDR_EXP 109
36793: PUSH
36794: LD_EXP 109
36798: PPUSH
36799: LD_VAR 0 1
36803: PPUSH
36804: CALL_OW 255
36808: PUSH
36809: LD_VAR 0 1
36813: PUSH
36814: LD_VAR 0 2
36818: PUSH
36819: LD_VAR 0 3
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: PPUSH
36830: CALL 80951 0 2
36834: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36835: CALL 36844 0 0
// end ;
36839: LD_VAR 0 4
36843: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
36844: LD_INT 0
36846: PPUSH
36847: PPUSH
36848: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
36849: LD_STRING resetFactoryWaypoint();
36851: PPUSH
36852: CALL_OW 559
// if factoryWaypoints then
36856: LD_EXP 109
36860: IFFALSE 36981
// begin list := factoryWaypoints ;
36862: LD_ADDR_VAR 0 3
36866: PUSH
36867: LD_EXP 109
36871: ST_TO_ADDR
// for i := 1 to list do
36872: LD_ADDR_VAR 0 2
36876: PUSH
36877: DOUBLE
36878: LD_INT 1
36880: DEC
36881: ST_TO_ADDR
36882: LD_VAR 0 3
36886: PUSH
36887: FOR_TO
36888: IFFALSE 36979
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36890: LD_STRING setFactoryWaypointXY(
36892: PUSH
36893: LD_VAR 0 3
36897: PUSH
36898: LD_VAR 0 2
36902: ARRAY
36903: PUSH
36904: LD_INT 1
36906: ARRAY
36907: STR
36908: PUSH
36909: LD_STRING ,
36911: STR
36912: PUSH
36913: LD_VAR 0 3
36917: PUSH
36918: LD_VAR 0 2
36922: ARRAY
36923: PUSH
36924: LD_INT 2
36926: ARRAY
36927: STR
36928: PUSH
36929: LD_STRING ,
36931: STR
36932: PUSH
36933: LD_VAR 0 3
36937: PUSH
36938: LD_VAR 0 2
36942: ARRAY
36943: PUSH
36944: LD_INT 3
36946: ARRAY
36947: STR
36948: PUSH
36949: LD_STRING ,
36951: STR
36952: PUSH
36953: LD_VAR 0 3
36957: PUSH
36958: LD_VAR 0 2
36962: ARRAY
36963: PUSH
36964: LD_INT 4
36966: ARRAY
36967: STR
36968: PUSH
36969: LD_STRING )
36971: STR
36972: PPUSH
36973: CALL_OW 559
36977: GO 36887
36979: POP
36980: POP
// end ; end ;
36981: LD_VAR 0 1
36985: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
36986: LD_INT 0
36988: PPUSH
// if HexInfo ( x , y ) = warehouse then
36989: LD_VAR 0 2
36993: PPUSH
36994: LD_VAR 0 3
36998: PPUSH
36999: CALL_OW 428
37003: PUSH
37004: LD_VAR 0 1
37008: EQUAL
37009: IFFALSE 37036
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
37011: LD_ADDR_EXP 110
37015: PUSH
37016: LD_EXP 110
37020: PPUSH
37021: LD_VAR 0 1
37025: PPUSH
37026: LD_INT 0
37028: PPUSH
37029: CALL_OW 1
37033: ST_TO_ADDR
37034: GO 37087
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
37036: LD_ADDR_EXP 110
37040: PUSH
37041: LD_EXP 110
37045: PPUSH
37046: LD_VAR 0 1
37050: PPUSH
37051: LD_VAR 0 1
37055: PPUSH
37056: CALL_OW 255
37060: PUSH
37061: LD_VAR 0 1
37065: PUSH
37066: LD_VAR 0 2
37070: PUSH
37071: LD_VAR 0 3
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: PPUSH
37082: CALL_OW 1
37086: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
37087: CALL 37096 0 0
// end ;
37091: LD_VAR 0 4
37095: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
37096: LD_INT 0
37098: PPUSH
37099: PPUSH
37100: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
37101: LD_STRING resetWarehouseGatheringPoints();
37103: PPUSH
37104: CALL_OW 559
// if warehouseGatheringPoints then
37108: LD_EXP 110
37112: IFFALSE 37238
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
37114: LD_ADDR_VAR 0 3
37118: PUSH
37119: LD_EXP 110
37123: PPUSH
37124: CALL 84713 0 1
37128: ST_TO_ADDR
// for i := 1 to list do
37129: LD_ADDR_VAR 0 2
37133: PUSH
37134: DOUBLE
37135: LD_INT 1
37137: DEC
37138: ST_TO_ADDR
37139: LD_VAR 0 3
37143: PUSH
37144: FOR_TO
37145: IFFALSE 37236
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
37147: LD_STRING setWarehouseGatheringPointXY(
37149: PUSH
37150: LD_VAR 0 3
37154: PUSH
37155: LD_VAR 0 2
37159: ARRAY
37160: PUSH
37161: LD_INT 1
37163: ARRAY
37164: STR
37165: PUSH
37166: LD_STRING ,
37168: STR
37169: PUSH
37170: LD_VAR 0 3
37174: PUSH
37175: LD_VAR 0 2
37179: ARRAY
37180: PUSH
37181: LD_INT 2
37183: ARRAY
37184: STR
37185: PUSH
37186: LD_STRING ,
37188: STR
37189: PUSH
37190: LD_VAR 0 3
37194: PUSH
37195: LD_VAR 0 2
37199: ARRAY
37200: PUSH
37201: LD_INT 3
37203: ARRAY
37204: STR
37205: PUSH
37206: LD_STRING ,
37208: STR
37209: PUSH
37210: LD_VAR 0 3
37214: PUSH
37215: LD_VAR 0 2
37219: ARRAY
37220: PUSH
37221: LD_INT 4
37223: ARRAY
37224: STR
37225: PUSH
37226: LD_STRING )
37228: STR
37229: PPUSH
37230: CALL_OW 559
37234: GO 37144
37236: POP
37237: POP
// end ; end ;
37238: LD_VAR 0 1
37242: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
37243: LD_EXP 110
37247: IFFALSE 37932
37249: GO 37251
37251: DISABLE
37252: LD_INT 0
37254: PPUSH
37255: PPUSH
37256: PPUSH
37257: PPUSH
37258: PPUSH
37259: PPUSH
37260: PPUSH
37261: PPUSH
37262: PPUSH
// begin enable ;
37263: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
37264: LD_ADDR_VAR 0 3
37268: PUSH
37269: LD_EXP 110
37273: PPUSH
37274: CALL 84713 0 1
37278: ST_TO_ADDR
// if not list then
37279: LD_VAR 0 3
37283: NOT
37284: IFFALSE 37288
// exit ;
37286: GO 37932
// for i := 1 to list do
37288: LD_ADDR_VAR 0 1
37292: PUSH
37293: DOUBLE
37294: LD_INT 1
37296: DEC
37297: ST_TO_ADDR
37298: LD_VAR 0 3
37302: PUSH
37303: FOR_TO
37304: IFFALSE 37930
// begin depot := list [ i ] [ 2 ] ;
37306: LD_ADDR_VAR 0 8
37310: PUSH
37311: LD_VAR 0 3
37315: PUSH
37316: LD_VAR 0 1
37320: ARRAY
37321: PUSH
37322: LD_INT 2
37324: ARRAY
37325: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
37326: LD_ADDR_VAR 0 5
37330: PUSH
37331: LD_VAR 0 3
37335: PUSH
37336: LD_VAR 0 1
37340: ARRAY
37341: PUSH
37342: LD_INT 1
37344: ARRAY
37345: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
37346: LD_VAR 0 8
37350: PPUSH
37351: CALL_OW 301
37355: PUSH
37356: LD_VAR 0 5
37360: PUSH
37361: LD_VAR 0 8
37365: PPUSH
37366: CALL_OW 255
37370: NONEQUAL
37371: OR
37372: IFFALSE 37401
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
37374: LD_ADDR_EXP 110
37378: PUSH
37379: LD_EXP 110
37383: PPUSH
37384: LD_VAR 0 8
37388: PPUSH
37389: LD_INT 0
37391: PPUSH
37392: CALL_OW 1
37396: ST_TO_ADDR
// exit ;
37397: POP
37398: POP
37399: GO 37932
// end ; x := list [ i ] [ 3 ] ;
37401: LD_ADDR_VAR 0 6
37405: PUSH
37406: LD_VAR 0 3
37410: PUSH
37411: LD_VAR 0 1
37415: ARRAY
37416: PUSH
37417: LD_INT 3
37419: ARRAY
37420: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
37421: LD_ADDR_VAR 0 7
37425: PUSH
37426: LD_VAR 0 3
37430: PUSH
37431: LD_VAR 0 1
37435: ARRAY
37436: PUSH
37437: LD_INT 4
37439: ARRAY
37440: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
37441: LD_ADDR_VAR 0 9
37445: PUSH
37446: LD_VAR 0 6
37450: PPUSH
37451: LD_VAR 0 7
37455: PPUSH
37456: LD_INT 16
37458: PPUSH
37459: CALL 83297 0 3
37463: ST_TO_ADDR
// if not cratesNearbyPoint then
37464: LD_VAR 0 9
37468: NOT
37469: IFFALSE 37475
// exit ;
37471: POP
37472: POP
37473: GO 37932
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
37475: LD_ADDR_VAR 0 4
37479: PUSH
37480: LD_INT 22
37482: PUSH
37483: LD_VAR 0 5
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 3
37494: PUSH
37495: LD_INT 60
37497: PUSH
37498: EMPTY
37499: LIST
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 91
37507: PUSH
37508: LD_VAR 0 8
37512: PUSH
37513: LD_INT 6
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 2
37523: PUSH
37524: LD_INT 25
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 25
37536: PUSH
37537: LD_INT 16
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: LIST
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: PPUSH
37555: CALL_OW 69
37559: PUSH
37560: LD_VAR 0 8
37564: PPUSH
37565: CALL_OW 313
37569: PPUSH
37570: LD_INT 3
37572: PUSH
37573: LD_INT 60
37575: PUSH
37576: EMPTY
37577: LIST
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 2
37585: PUSH
37586: LD_INT 25
37588: PUSH
37589: LD_INT 2
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 25
37598: PUSH
37599: LD_INT 16
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PPUSH
37615: CALL_OW 72
37619: UNION
37620: ST_TO_ADDR
// if tmp then
37621: LD_VAR 0 4
37625: IFFALSE 37705
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37627: LD_ADDR_VAR 0 4
37631: PUSH
37632: LD_VAR 0 4
37636: PPUSH
37637: LD_INT 3
37639: PPUSH
37640: CALL 81266 0 2
37644: ST_TO_ADDR
// for j in tmp do
37645: LD_ADDR_VAR 0 2
37649: PUSH
37650: LD_VAR 0 4
37654: PUSH
37655: FOR_IN
37656: IFFALSE 37699
// begin if IsInUnit ( j ) then
37658: LD_VAR 0 2
37662: PPUSH
37663: CALL_OW 310
37667: IFFALSE 37678
// ComExit ( j ) ;
37669: LD_VAR 0 2
37673: PPUSH
37674: CALL 81349 0 1
// AddComCollect ( j , x , y ) ;
37678: LD_VAR 0 2
37682: PPUSH
37683: LD_VAR 0 6
37687: PPUSH
37688: LD_VAR 0 7
37692: PPUSH
37693: CALL_OW 177
// end ;
37697: GO 37655
37699: POP
37700: POP
// exit ;
37701: POP
37702: POP
37703: GO 37932
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
37705: LD_ADDR_VAR 0 4
37709: PUSH
37710: LD_INT 22
37712: PUSH
37713: LD_VAR 0 5
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 91
37724: PUSH
37725: LD_VAR 0 8
37729: PUSH
37730: LD_INT 8
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 2
37740: PUSH
37741: LD_INT 34
37743: PUSH
37744: LD_INT 12
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 34
37753: PUSH
37754: LD_INT 51
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 34
37763: PUSH
37764: LD_INT 32
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 34
37773: PUSH
37774: LD_INT 89
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: LIST
37792: PPUSH
37793: CALL_OW 69
37797: ST_TO_ADDR
// if tmp then
37798: LD_VAR 0 4
37802: IFFALSE 37928
// begin for j in tmp do
37804: LD_ADDR_VAR 0 2
37808: PUSH
37809: LD_VAR 0 4
37813: PUSH
37814: FOR_IN
37815: IFFALSE 37926
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
37817: LD_VAR 0 2
37821: PPUSH
37822: CALL_OW 262
37826: PUSH
37827: LD_INT 3
37829: EQUAL
37830: PUSH
37831: LD_VAR 0 2
37835: PPUSH
37836: CALL_OW 261
37840: PUSH
37841: LD_INT 20
37843: GREATER
37844: OR
37845: PUSH
37846: LD_VAR 0 2
37850: PPUSH
37851: CALL_OW 314
37855: NOT
37856: AND
37857: PUSH
37858: LD_VAR 0 2
37862: PPUSH
37863: CALL_OW 263
37867: PUSH
37868: LD_INT 1
37870: NONEQUAL
37871: PUSH
37872: LD_VAR 0 2
37876: PPUSH
37877: CALL_OW 311
37881: OR
37882: AND
37883: IFFALSE 37924
// begin ComCollect ( j , x , y ) ;
37885: LD_VAR 0 2
37889: PPUSH
37890: LD_VAR 0 6
37894: PPUSH
37895: LD_VAR 0 7
37899: PPUSH
37900: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
37904: LD_VAR 0 2
37908: PPUSH
37909: LD_VAR 0 8
37913: PPUSH
37914: CALL_OW 172
// exit ;
37918: POP
37919: POP
37920: POP
37921: POP
37922: GO 37932
// end ;
37924: GO 37814
37926: POP
37927: POP
// end ; end ;
37928: GO 37303
37930: POP
37931: POP
// end ; end_of_file
37932: PPOPN 9
37934: END
// export function SOS_UnitDestroyed ( un ) ; begin
37935: LD_INT 0
37937: PPUSH
// ComRadiation ( un ) ;
37938: LD_VAR 0 1
37942: PPUSH
37943: CALL 38924 0 1
// end ;
37947: LD_VAR 0 2
37951: RET
// export function SOS_UnitKamikazed ( un ) ; begin
37952: LD_INT 0
37954: PPUSH
// ComRadiation ( un ) ;
37955: LD_VAR 0 1
37959: PPUSH
37960: CALL 38924 0 1
// end ;
37964: LD_VAR 0 2
37968: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37969: LD_INT 0
37971: PPUSH
// end ;
37972: LD_VAR 0 4
37976: RET
// export function SOS_Command ( cmd ) ; begin
37977: LD_INT 0
37979: PPUSH
// end ;
37980: LD_VAR 0 2
37984: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37985: LD_INT 0
37987: PPUSH
// end ;
37988: LD_VAR 0 6
37992: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
37993: LD_INT 0
37995: PPUSH
37996: PPUSH
37997: PPUSH
37998: PPUSH
37999: PPUSH
// if not vehicle or not factory then
38000: LD_VAR 0 1
38004: NOT
38005: PUSH
38006: LD_VAR 0 2
38010: NOT
38011: OR
38012: IFFALSE 38016
// exit ;
38014: GO 38515
// if not factoryWaypoints then
38016: LD_EXP 109
38020: NOT
38021: IFFALSE 38025
// exit ;
38023: GO 38515
// for i := 1 to Count ( factoryWaypoints ) do
38025: LD_ADDR_VAR 0 4
38029: PUSH
38030: DOUBLE
38031: LD_INT 1
38033: DEC
38034: ST_TO_ADDR
38035: LD_EXP 109
38039: PPUSH
38040: CALL 45342 0 1
38044: PUSH
38045: FOR_TO
38046: IFFALSE 38513
// if factoryWaypoints [ i ] [ 2 ] = factory then
38048: LD_EXP 109
38052: PUSH
38053: LD_VAR 0 4
38057: ARRAY
38058: PUSH
38059: LD_INT 2
38061: ARRAY
38062: PUSH
38063: LD_VAR 0 2
38067: EQUAL
38068: IFFALSE 38511
// begin if GetControl ( vehicle ) = control_manual then
38070: LD_VAR 0 1
38074: PPUSH
38075: CALL_OW 263
38079: PUSH
38080: LD_INT 1
38082: EQUAL
38083: IFFALSE 38394
// begin driver := IsDrivenBy ( vehicle ) ;
38085: LD_ADDR_VAR 0 6
38089: PUSH
38090: LD_VAR 0 1
38094: PPUSH
38095: CALL_OW 311
38099: ST_TO_ADDR
// tag := GetTag ( driver ) ;
38100: LD_ADDR_VAR 0 5
38104: PUSH
38105: LD_VAR 0 6
38109: PPUSH
38110: CALL_OW 110
38114: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
38115: LD_VAR 0 5
38119: PUSH
38120: LD_INT 501
38122: EQUAL
38123: PUSH
38124: LD_VAR 0 1
38128: PPUSH
38129: CALL_OW 110
38133: PUSH
38134: LD_INT 501
38136: EQUAL
38137: OR
38138: IFFALSE 38144
// exit ;
38140: POP
38141: POP
38142: GO 38515
// if not HasTask ( driver ) then
38144: LD_VAR 0 6
38148: PPUSH
38149: CALL_OW 314
38153: NOT
38154: IFFALSE 38392
// begin SetTag ( driver , tDriver ) ;
38156: LD_VAR 0 6
38160: PPUSH
38161: LD_INT 501
38163: PPUSH
38164: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
38168: LD_VAR 0 1
38172: PPUSH
38173: LD_INT 501
38175: PPUSH
38176: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38180: LD_ADDR_VAR 0 7
38184: PUSH
38185: LD_EXP 109
38189: PUSH
38190: LD_VAR 0 4
38194: ARRAY
38195: PUSH
38196: LD_INT 3
38198: ARRAY
38199: PPUSH
38200: LD_EXP 109
38204: PUSH
38205: LD_VAR 0 4
38209: ARRAY
38210: PUSH
38211: LD_INT 4
38213: ARRAY
38214: PPUSH
38215: CALL_OW 428
38219: ST_TO_ADDR
// if hex then
38220: LD_VAR 0 7
38224: IFFALSE 38242
// ComMoveUnit ( driver , hex ) else
38226: LD_VAR 0 6
38230: PPUSH
38231: LD_VAR 0 7
38235: PPUSH
38236: CALL_OW 112
38240: GO 38281
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38242: LD_VAR 0 6
38246: PPUSH
38247: LD_EXP 109
38251: PUSH
38252: LD_VAR 0 4
38256: ARRAY
38257: PUSH
38258: LD_INT 3
38260: ARRAY
38261: PPUSH
38262: LD_EXP 109
38266: PUSH
38267: LD_VAR 0 4
38271: ARRAY
38272: PUSH
38273: LD_INT 4
38275: ARRAY
38276: PPUSH
38277: CALL_OW 111
// AddComExitVehicle ( driver ) ;
38281: LD_VAR 0 6
38285: PPUSH
38286: CALL_OW 181
// if Multiplayer then
38290: LD_OWVAR 4
38294: IFFALSE 38343
// begin repeat wait ( 10 ) ;
38296: LD_INT 10
38298: PPUSH
38299: CALL_OW 67
// until not IsInUnit ( driver ) ;
38303: LD_VAR 0 6
38307: PPUSH
38308: CALL_OW 310
38312: NOT
38313: IFFALSE 38296
// if not HasTask ( driver ) then
38315: LD_VAR 0 6
38319: PPUSH
38320: CALL_OW 314
38324: NOT
38325: IFFALSE 38341
// ComEnterUnit ( driver , factory ) ;
38327: LD_VAR 0 6
38331: PPUSH
38332: LD_VAR 0 2
38336: PPUSH
38337: CALL_OW 120
// end else
38341: GO 38357
// AddComEnterUnit ( driver , factory ) ;
38343: LD_VAR 0 6
38347: PPUSH
38348: LD_VAR 0 2
38352: PPUSH
38353: CALL_OW 180
// wait ( 0 0$1 ) ;
38357: LD_INT 35
38359: PPUSH
38360: CALL_OW 67
// SetTag ( driver , tag ) ;
38364: LD_VAR 0 6
38368: PPUSH
38369: LD_VAR 0 5
38373: PPUSH
38374: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
38378: LD_VAR 0 1
38382: PPUSH
38383: LD_INT 0
38385: PPUSH
38386: CALL_OW 109
// break ;
38390: GO 38513
// end ; end else
38392: GO 38511
// if GetControl ( vehicle ) = control_remote then
38394: LD_VAR 0 1
38398: PPUSH
38399: CALL_OW 263
38403: PUSH
38404: LD_INT 2
38406: EQUAL
38407: IFFALSE 38470
// begin wait ( 0 0$2 ) ;
38409: LD_INT 70
38411: PPUSH
38412: CALL_OW 67
// if Connect ( vehicle ) then
38416: LD_VAR 0 1
38420: PPUSH
38421: CALL 51548 0 1
38425: IFFALSE 38466
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38427: LD_VAR 0 1
38431: PPUSH
38432: LD_EXP 109
38436: PUSH
38437: LD_VAR 0 4
38441: ARRAY
38442: PUSH
38443: LD_INT 3
38445: ARRAY
38446: PPUSH
38447: LD_EXP 109
38451: PUSH
38452: LD_VAR 0 4
38456: ARRAY
38457: PUSH
38458: LD_INT 4
38460: ARRAY
38461: PPUSH
38462: CALL_OW 171
// break ;
38466: GO 38513
// end else
38468: GO 38511
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38470: LD_VAR 0 1
38474: PPUSH
38475: LD_EXP 109
38479: PUSH
38480: LD_VAR 0 4
38484: ARRAY
38485: PUSH
38486: LD_INT 3
38488: ARRAY
38489: PPUSH
38490: LD_EXP 109
38494: PUSH
38495: LD_VAR 0 4
38499: ARRAY
38500: PUSH
38501: LD_INT 4
38503: ARRAY
38504: PPUSH
38505: CALL_OW 171
// break ;
38509: GO 38513
// end ; end ;
38511: GO 38045
38513: POP
38514: POP
// end ;
38515: LD_VAR 0 3
38519: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
38520: LD_INT 0
38522: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
38523: LD_VAR 0 1
38527: PUSH
38528: LD_INT 250
38530: EQUAL
38531: PUSH
38532: LD_VAR 0 2
38536: PPUSH
38537: CALL_OW 264
38541: PUSH
38542: LD_INT 81
38544: EQUAL
38545: AND
38546: IFFALSE 38567
// MinerPlaceMine ( unit , x , y ) ;
38548: LD_VAR 0 2
38552: PPUSH
38553: LD_VAR 0 4
38557: PPUSH
38558: LD_VAR 0 5
38562: PPUSH
38563: CALL 41659 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
38567: LD_VAR 0 1
38571: PUSH
38572: LD_INT 251
38574: EQUAL
38575: PUSH
38576: LD_VAR 0 2
38580: PPUSH
38581: CALL_OW 264
38585: PUSH
38586: LD_INT 81
38588: EQUAL
38589: AND
38590: IFFALSE 38611
// MinerDetonateMine ( unit , x , y ) ;
38592: LD_VAR 0 2
38596: PPUSH
38597: LD_VAR 0 4
38601: PPUSH
38602: LD_VAR 0 5
38606: PPUSH
38607: CALL 41934 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
38611: LD_VAR 0 1
38615: PUSH
38616: LD_INT 252
38618: EQUAL
38619: PUSH
38620: LD_VAR 0 2
38624: PPUSH
38625: CALL_OW 264
38629: PUSH
38630: LD_INT 81
38632: EQUAL
38633: AND
38634: IFFALSE 38655
// MinerCreateMinefield ( unit , x , y ) ;
38636: LD_VAR 0 2
38640: PPUSH
38641: LD_VAR 0 4
38645: PPUSH
38646: LD_VAR 0 5
38650: PPUSH
38651: CALL 42351 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
38655: LD_VAR 0 1
38659: PUSH
38660: LD_INT 253
38662: EQUAL
38663: PUSH
38664: LD_VAR 0 2
38668: PPUSH
38669: CALL_OW 257
38673: PUSH
38674: LD_INT 5
38676: EQUAL
38677: AND
38678: IFFALSE 38699
// ComBinocular ( unit , x , y ) ;
38680: LD_VAR 0 2
38684: PPUSH
38685: LD_VAR 0 4
38689: PPUSH
38690: LD_VAR 0 5
38694: PPUSH
38695: CALL 42720 0 3
// if selectedUnit then
38699: LD_VAR 0 3
38703: IFFALSE 38759
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
38705: LD_VAR 0 1
38709: PUSH
38710: LD_INT 254
38712: EQUAL
38713: PUSH
38714: LD_VAR 0 2
38718: PPUSH
38719: CALL_OW 264
38723: PUSH
38724: LD_INT 99
38726: EQUAL
38727: AND
38728: PUSH
38729: LD_VAR 0 3
38733: PPUSH
38734: CALL_OW 263
38738: PUSH
38739: LD_INT 3
38741: EQUAL
38742: AND
38743: IFFALSE 38759
// HackDestroyVehicle ( unit , selectedUnit ) ;
38745: LD_VAR 0 2
38749: PPUSH
38750: LD_VAR 0 3
38754: PPUSH
38755: CALL 41023 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
38759: LD_VAR 0 1
38763: PUSH
38764: LD_INT 255
38766: EQUAL
38767: PUSH
38768: LD_VAR 0 2
38772: PPUSH
38773: CALL_OW 264
38777: PUSH
38778: LD_INT 14
38780: PUSH
38781: LD_INT 53
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: IN
38788: AND
38789: PUSH
38790: LD_VAR 0 4
38794: PPUSH
38795: LD_VAR 0 5
38799: PPUSH
38800: CALL_OW 488
38804: AND
38805: IFFALSE 38829
// CutTreeXYR ( unit , x , y , 12 ) ;
38807: LD_VAR 0 2
38811: PPUSH
38812: LD_VAR 0 4
38816: PPUSH
38817: LD_VAR 0 5
38821: PPUSH
38822: LD_INT 12
38824: PPUSH
38825: CALL 39020 0 4
// if cmd = 256 then
38829: LD_VAR 0 1
38833: PUSH
38834: LD_INT 256
38836: EQUAL
38837: IFFALSE 38858
// SetFactoryWaypoint ( unit , x , y ) ;
38839: LD_VAR 0 2
38843: PPUSH
38844: LD_VAR 0 4
38848: PPUSH
38849: LD_VAR 0 5
38853: PPUSH
38854: CALL 36496 0 3
// if cmd = 257 then
38858: LD_VAR 0 1
38862: PUSH
38863: LD_INT 257
38865: EQUAL
38866: IFFALSE 38887
// SetWarehouseGatheringPoint ( unit , x , y ) ;
38868: LD_VAR 0 2
38872: PPUSH
38873: LD_VAR 0 4
38877: PPUSH
38878: LD_VAR 0 5
38882: PPUSH
38883: CALL 36986 0 3
// if cmd = 258 then
38887: LD_VAR 0 1
38891: PUSH
38892: LD_INT 258
38894: EQUAL
38895: IFFALSE 38919
// BurnTreeXYR ( unit , x , y , 8 ) ;
38897: LD_VAR 0 2
38901: PPUSH
38902: LD_VAR 0 4
38906: PPUSH
38907: LD_VAR 0 5
38911: PPUSH
38912: LD_INT 8
38914: PPUSH
38915: CALL 39414 0 4
// end ;
38919: LD_VAR 0 6
38923: RET
// export function ComRadiation ( un ) ; var eff ; begin
38924: LD_INT 0
38926: PPUSH
38927: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
38928: LD_VAR 0 1
38932: PPUSH
38933: CALL_OW 264
38937: PUSH
38938: LD_INT 91
38940: NONEQUAL
38941: IFFALSE 38945
// exit ;
38943: GO 39015
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
38945: LD_INT 68
38947: PPUSH
38948: LD_VAR 0 1
38952: PPUSH
38953: CALL_OW 255
38957: PPUSH
38958: CALL_OW 321
38962: PUSH
38963: LD_INT 2
38965: EQUAL
38966: IFFALSE 38978
// eff := 70 else
38968: LD_ADDR_VAR 0 3
38972: PUSH
38973: LD_INT 70
38975: ST_TO_ADDR
38976: GO 38986
// eff := 30 ;
38978: LD_ADDR_VAR 0 3
38982: PUSH
38983: LD_INT 30
38985: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
38986: LD_VAR 0 1
38990: PPUSH
38991: CALL_OW 250
38995: PPUSH
38996: LD_VAR 0 1
39000: PPUSH
39001: CALL_OW 251
39005: PPUSH
39006: LD_VAR 0 3
39010: PPUSH
39011: CALL_OW 495
// end ;
39015: LD_VAR 0 2
39019: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
39020: LD_INT 0
39022: PPUSH
39023: PPUSH
39024: PPUSH
39025: PPUSH
39026: PPUSH
39027: PPUSH
39028: PPUSH
39029: PPUSH
39030: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
39031: LD_VAR 0 1
39035: PPUSH
39036: CALL_OW 302
39040: NOT
39041: PUSH
39042: LD_VAR 0 2
39046: PPUSH
39047: LD_VAR 0 3
39051: PPUSH
39052: CALL_OW 488
39056: NOT
39057: OR
39058: PUSH
39059: LD_VAR 0 4
39063: NOT
39064: OR
39065: IFFALSE 39069
// exit ;
39067: GO 39409
// list := [ ] ;
39069: LD_ADDR_VAR 0 13
39073: PUSH
39074: EMPTY
39075: ST_TO_ADDR
// if x - r < 0 then
39076: LD_VAR 0 2
39080: PUSH
39081: LD_VAR 0 4
39085: MINUS
39086: PUSH
39087: LD_INT 0
39089: LESS
39090: IFFALSE 39102
// min_x := 0 else
39092: LD_ADDR_VAR 0 7
39096: PUSH
39097: LD_INT 0
39099: ST_TO_ADDR
39100: GO 39118
// min_x := x - r ;
39102: LD_ADDR_VAR 0 7
39106: PUSH
39107: LD_VAR 0 2
39111: PUSH
39112: LD_VAR 0 4
39116: MINUS
39117: ST_TO_ADDR
// if y - r < 0 then
39118: LD_VAR 0 3
39122: PUSH
39123: LD_VAR 0 4
39127: MINUS
39128: PUSH
39129: LD_INT 0
39131: LESS
39132: IFFALSE 39144
// min_y := 0 else
39134: LD_ADDR_VAR 0 8
39138: PUSH
39139: LD_INT 0
39141: ST_TO_ADDR
39142: GO 39160
// min_y := y - r ;
39144: LD_ADDR_VAR 0 8
39148: PUSH
39149: LD_VAR 0 3
39153: PUSH
39154: LD_VAR 0 4
39158: MINUS
39159: ST_TO_ADDR
// max_x := x + r ;
39160: LD_ADDR_VAR 0 9
39164: PUSH
39165: LD_VAR 0 2
39169: PUSH
39170: LD_VAR 0 4
39174: PLUS
39175: ST_TO_ADDR
// max_y := y + r ;
39176: LD_ADDR_VAR 0 10
39180: PUSH
39181: LD_VAR 0 3
39185: PUSH
39186: LD_VAR 0 4
39190: PLUS
39191: ST_TO_ADDR
// for _x = min_x to max_x do
39192: LD_ADDR_VAR 0 11
39196: PUSH
39197: DOUBLE
39198: LD_VAR 0 7
39202: DEC
39203: ST_TO_ADDR
39204: LD_VAR 0 9
39208: PUSH
39209: FOR_TO
39210: IFFALSE 39327
// for _y = min_y to max_y do
39212: LD_ADDR_VAR 0 12
39216: PUSH
39217: DOUBLE
39218: LD_VAR 0 8
39222: DEC
39223: ST_TO_ADDR
39224: LD_VAR 0 10
39228: PUSH
39229: FOR_TO
39230: IFFALSE 39323
// begin if not ValidHex ( _x , _y ) then
39232: LD_VAR 0 11
39236: PPUSH
39237: LD_VAR 0 12
39241: PPUSH
39242: CALL_OW 488
39246: NOT
39247: IFFALSE 39251
// continue ;
39249: GO 39229
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
39251: LD_VAR 0 11
39255: PPUSH
39256: LD_VAR 0 12
39260: PPUSH
39261: CALL_OW 351
39265: PUSH
39266: LD_VAR 0 11
39270: PPUSH
39271: LD_VAR 0 12
39275: PPUSH
39276: CALL_OW 554
39280: AND
39281: IFFALSE 39321
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
39283: LD_ADDR_VAR 0 13
39287: PUSH
39288: LD_VAR 0 13
39292: PPUSH
39293: LD_VAR 0 13
39297: PUSH
39298: LD_INT 1
39300: PLUS
39301: PPUSH
39302: LD_VAR 0 11
39306: PUSH
39307: LD_VAR 0 12
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PPUSH
39316: CALL_OW 2
39320: ST_TO_ADDR
// end ;
39321: GO 39229
39323: POP
39324: POP
39325: GO 39209
39327: POP
39328: POP
// if not list then
39329: LD_VAR 0 13
39333: NOT
39334: IFFALSE 39338
// exit ;
39336: GO 39409
// for i in list do
39338: LD_ADDR_VAR 0 6
39342: PUSH
39343: LD_VAR 0 13
39347: PUSH
39348: FOR_IN
39349: IFFALSE 39407
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
39351: LD_VAR 0 1
39355: PPUSH
39356: LD_STRING M
39358: PUSH
39359: LD_VAR 0 6
39363: PUSH
39364: LD_INT 1
39366: ARRAY
39367: PUSH
39368: LD_VAR 0 6
39372: PUSH
39373: LD_INT 2
39375: ARRAY
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: PUSH
39398: EMPTY
39399: LIST
39400: PPUSH
39401: CALL_OW 447
39405: GO 39348
39407: POP
39408: POP
// end ;
39409: LD_VAR 0 5
39413: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
39414: LD_INT 0
39416: PPUSH
39417: PPUSH
39418: PPUSH
39419: PPUSH
39420: PPUSH
39421: PPUSH
39422: PPUSH
39423: PPUSH
39424: PPUSH
39425: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
39426: LD_VAR 0 1
39430: PPUSH
39431: CALL_OW 302
39435: NOT
39436: PUSH
39437: LD_VAR 0 2
39441: PPUSH
39442: LD_VAR 0 3
39446: PPUSH
39447: CALL_OW 488
39451: NOT
39452: OR
39453: PUSH
39454: LD_VAR 0 4
39458: NOT
39459: OR
39460: IFFALSE 39464
// exit ;
39462: GO 39977
// list := [ ] ;
39464: LD_ADDR_VAR 0 13
39468: PUSH
39469: EMPTY
39470: ST_TO_ADDR
// if x - r < 0 then
39471: LD_VAR 0 2
39475: PUSH
39476: LD_VAR 0 4
39480: MINUS
39481: PUSH
39482: LD_INT 0
39484: LESS
39485: IFFALSE 39497
// min_x := 0 else
39487: LD_ADDR_VAR 0 7
39491: PUSH
39492: LD_INT 0
39494: ST_TO_ADDR
39495: GO 39513
// min_x := x - r ;
39497: LD_ADDR_VAR 0 7
39501: PUSH
39502: LD_VAR 0 2
39506: PUSH
39507: LD_VAR 0 4
39511: MINUS
39512: ST_TO_ADDR
// if y - r < 0 then
39513: LD_VAR 0 3
39517: PUSH
39518: LD_VAR 0 4
39522: MINUS
39523: PUSH
39524: LD_INT 0
39526: LESS
39527: IFFALSE 39539
// min_y := 0 else
39529: LD_ADDR_VAR 0 8
39533: PUSH
39534: LD_INT 0
39536: ST_TO_ADDR
39537: GO 39555
// min_y := y - r ;
39539: LD_ADDR_VAR 0 8
39543: PUSH
39544: LD_VAR 0 3
39548: PUSH
39549: LD_VAR 0 4
39553: MINUS
39554: ST_TO_ADDR
// max_x := x + r ;
39555: LD_ADDR_VAR 0 9
39559: PUSH
39560: LD_VAR 0 2
39564: PUSH
39565: LD_VAR 0 4
39569: PLUS
39570: ST_TO_ADDR
// max_y := y + r ;
39571: LD_ADDR_VAR 0 10
39575: PUSH
39576: LD_VAR 0 3
39580: PUSH
39581: LD_VAR 0 4
39585: PLUS
39586: ST_TO_ADDR
// for _x = min_x to max_x do
39587: LD_ADDR_VAR 0 11
39591: PUSH
39592: DOUBLE
39593: LD_VAR 0 7
39597: DEC
39598: ST_TO_ADDR
39599: LD_VAR 0 9
39603: PUSH
39604: FOR_TO
39605: IFFALSE 39722
// for _y = min_y to max_y do
39607: LD_ADDR_VAR 0 12
39611: PUSH
39612: DOUBLE
39613: LD_VAR 0 8
39617: DEC
39618: ST_TO_ADDR
39619: LD_VAR 0 10
39623: PUSH
39624: FOR_TO
39625: IFFALSE 39718
// begin if not ValidHex ( _x , _y ) then
39627: LD_VAR 0 11
39631: PPUSH
39632: LD_VAR 0 12
39636: PPUSH
39637: CALL_OW 488
39641: NOT
39642: IFFALSE 39646
// continue ;
39644: GO 39624
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
39646: LD_VAR 0 11
39650: PPUSH
39651: LD_VAR 0 12
39655: PPUSH
39656: CALL_OW 351
39660: PUSH
39661: LD_VAR 0 11
39665: PPUSH
39666: LD_VAR 0 12
39670: PPUSH
39671: CALL_OW 554
39675: AND
39676: IFFALSE 39716
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
39678: LD_ADDR_VAR 0 13
39682: PUSH
39683: LD_VAR 0 13
39687: PPUSH
39688: LD_VAR 0 13
39692: PUSH
39693: LD_INT 1
39695: PLUS
39696: PPUSH
39697: LD_VAR 0 11
39701: PUSH
39702: LD_VAR 0 12
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PPUSH
39711: CALL_OW 2
39715: ST_TO_ADDR
// end ;
39716: GO 39624
39718: POP
39719: POP
39720: GO 39604
39722: POP
39723: POP
// if not list then
39724: LD_VAR 0 13
39728: NOT
39729: IFFALSE 39733
// exit ;
39731: GO 39977
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
39733: LD_ADDR_VAR 0 13
39737: PUSH
39738: LD_VAR 0 1
39742: PPUSH
39743: LD_VAR 0 13
39747: PPUSH
39748: LD_INT 1
39750: PPUSH
39751: LD_INT 1
39753: PPUSH
39754: CALL 48690 0 4
39758: ST_TO_ADDR
// ComStop ( flame ) ;
39759: LD_VAR 0 1
39763: PPUSH
39764: CALL_OW 141
// for i in list do
39768: LD_ADDR_VAR 0 6
39772: PUSH
39773: LD_VAR 0 13
39777: PUSH
39778: FOR_IN
39779: IFFALSE 39810
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
39781: LD_VAR 0 1
39785: PPUSH
39786: LD_VAR 0 6
39790: PUSH
39791: LD_INT 1
39793: ARRAY
39794: PPUSH
39795: LD_VAR 0 6
39799: PUSH
39800: LD_INT 2
39802: ARRAY
39803: PPUSH
39804: CALL_OW 176
39808: GO 39778
39810: POP
39811: POP
// repeat wait ( 0 0$1 ) ;
39812: LD_INT 35
39814: PPUSH
39815: CALL_OW 67
// task := GetTaskList ( flame ) ;
39819: LD_ADDR_VAR 0 14
39823: PUSH
39824: LD_VAR 0 1
39828: PPUSH
39829: CALL_OW 437
39833: ST_TO_ADDR
// if not task then
39834: LD_VAR 0 14
39838: NOT
39839: IFFALSE 39843
// exit ;
39841: GO 39977
// if task [ 1 ] [ 1 ] <> | then
39843: LD_VAR 0 14
39847: PUSH
39848: LD_INT 1
39850: ARRAY
39851: PUSH
39852: LD_INT 1
39854: ARRAY
39855: PUSH
39856: LD_STRING |
39858: NONEQUAL
39859: IFFALSE 39863
// exit ;
39861: GO 39977
// _x := task [ 1 ] [ 2 ] ;
39863: LD_ADDR_VAR 0 11
39867: PUSH
39868: LD_VAR 0 14
39872: PUSH
39873: LD_INT 1
39875: ARRAY
39876: PUSH
39877: LD_INT 2
39879: ARRAY
39880: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
39881: LD_ADDR_VAR 0 12
39885: PUSH
39886: LD_VAR 0 14
39890: PUSH
39891: LD_INT 1
39893: ARRAY
39894: PUSH
39895: LD_INT 3
39897: ARRAY
39898: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
39899: LD_VAR 0 11
39903: PPUSH
39904: LD_VAR 0 12
39908: PPUSH
39909: CALL_OW 351
39913: NOT
39914: PUSH
39915: LD_VAR 0 11
39919: PPUSH
39920: LD_VAR 0 12
39924: PPUSH
39925: CALL_OW 554
39929: NOT
39930: OR
39931: IFFALSE 39965
// begin task := Delete ( task , 1 ) ;
39933: LD_ADDR_VAR 0 14
39937: PUSH
39938: LD_VAR 0 14
39942: PPUSH
39943: LD_INT 1
39945: PPUSH
39946: CALL_OW 3
39950: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
39951: LD_VAR 0 1
39955: PPUSH
39956: LD_VAR 0 14
39960: PPUSH
39961: CALL_OW 446
// end ; until not HasTask ( flame ) ;
39965: LD_VAR 0 1
39969: PPUSH
39970: CALL_OW 314
39974: NOT
39975: IFFALSE 39812
// end ;
39977: LD_VAR 0 5
39981: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
39982: LD_EXP 112
39986: NOT
39987: IFFALSE 40037
39989: GO 39991
39991: DISABLE
// begin initHack := true ;
39992: LD_ADDR_EXP 112
39996: PUSH
39997: LD_INT 1
39999: ST_TO_ADDR
// hackTanks := [ ] ;
40000: LD_ADDR_EXP 113
40004: PUSH
40005: EMPTY
40006: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
40007: LD_ADDR_EXP 114
40011: PUSH
40012: EMPTY
40013: ST_TO_ADDR
// hackLimit := 3 ;
40014: LD_ADDR_EXP 115
40018: PUSH
40019: LD_INT 3
40021: ST_TO_ADDR
// hackDist := 12 ;
40022: LD_ADDR_EXP 116
40026: PUSH
40027: LD_INT 12
40029: ST_TO_ADDR
// hackCounter := [ ] ;
40030: LD_ADDR_EXP 117
40034: PUSH
40035: EMPTY
40036: ST_TO_ADDR
// end ;
40037: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
40038: LD_EXP 112
40042: PUSH
40043: LD_INT 34
40045: PUSH
40046: LD_INT 99
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PPUSH
40053: CALL_OW 69
40057: AND
40058: IFFALSE 40311
40060: GO 40062
40062: DISABLE
40063: LD_INT 0
40065: PPUSH
40066: PPUSH
// begin enable ;
40067: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
40068: LD_ADDR_VAR 0 1
40072: PUSH
40073: LD_INT 34
40075: PUSH
40076: LD_INT 99
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PPUSH
40083: CALL_OW 69
40087: PUSH
40088: FOR_IN
40089: IFFALSE 40309
// begin if not i in hackTanks then
40091: LD_VAR 0 1
40095: PUSH
40096: LD_EXP 113
40100: IN
40101: NOT
40102: IFFALSE 40185
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
40104: LD_ADDR_EXP 113
40108: PUSH
40109: LD_EXP 113
40113: PPUSH
40114: LD_EXP 113
40118: PUSH
40119: LD_INT 1
40121: PLUS
40122: PPUSH
40123: LD_VAR 0 1
40127: PPUSH
40128: CALL_OW 1
40132: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
40133: LD_ADDR_EXP 114
40137: PUSH
40138: LD_EXP 114
40142: PPUSH
40143: LD_EXP 114
40147: PUSH
40148: LD_INT 1
40150: PLUS
40151: PPUSH
40152: EMPTY
40153: PPUSH
40154: CALL_OW 1
40158: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
40159: LD_ADDR_EXP 117
40163: PUSH
40164: LD_EXP 117
40168: PPUSH
40169: LD_EXP 117
40173: PUSH
40174: LD_INT 1
40176: PLUS
40177: PPUSH
40178: EMPTY
40179: PPUSH
40180: CALL_OW 1
40184: ST_TO_ADDR
// end ; if not IsOk ( i ) then
40185: LD_VAR 0 1
40189: PPUSH
40190: CALL_OW 302
40194: NOT
40195: IFFALSE 40208
// begin HackUnlinkAll ( i ) ;
40197: LD_VAR 0 1
40201: PPUSH
40202: CALL 40314 0 1
// continue ;
40206: GO 40088
// end ; HackCheckCapturedStatus ( i ) ;
40208: LD_VAR 0 1
40212: PPUSH
40213: CALL 40757 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
40217: LD_ADDR_VAR 0 2
40221: PUSH
40222: LD_INT 81
40224: PUSH
40225: LD_VAR 0 1
40229: PPUSH
40230: CALL_OW 255
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 33
40241: PUSH
40242: LD_INT 3
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 91
40251: PUSH
40252: LD_VAR 0 1
40256: PUSH
40257: LD_EXP 116
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 50
40269: PUSH
40270: EMPTY
40271: LIST
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: PPUSH
40279: CALL_OW 69
40283: ST_TO_ADDR
// if not tmp then
40284: LD_VAR 0 2
40288: NOT
40289: IFFALSE 40293
// continue ;
40291: GO 40088
// HackLink ( i , tmp ) ;
40293: LD_VAR 0 1
40297: PPUSH
40298: LD_VAR 0 2
40302: PPUSH
40303: CALL 40450 0 2
// end ;
40307: GO 40088
40309: POP
40310: POP
// end ;
40311: PPOPN 2
40313: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
40314: LD_INT 0
40316: PPUSH
40317: PPUSH
40318: PPUSH
// if not hack in hackTanks then
40319: LD_VAR 0 1
40323: PUSH
40324: LD_EXP 113
40328: IN
40329: NOT
40330: IFFALSE 40334
// exit ;
40332: GO 40445
// index := GetElementIndex ( hackTanks , hack ) ;
40334: LD_ADDR_VAR 0 4
40338: PUSH
40339: LD_EXP 113
40343: PPUSH
40344: LD_VAR 0 1
40348: PPUSH
40349: CALL 47987 0 2
40353: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
40354: LD_EXP 114
40358: PUSH
40359: LD_VAR 0 4
40363: ARRAY
40364: IFFALSE 40445
// begin for i in hackTanksCaptured [ index ] do
40366: LD_ADDR_VAR 0 3
40370: PUSH
40371: LD_EXP 114
40375: PUSH
40376: LD_VAR 0 4
40380: ARRAY
40381: PUSH
40382: FOR_IN
40383: IFFALSE 40409
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
40385: LD_VAR 0 3
40389: PUSH
40390: LD_INT 1
40392: ARRAY
40393: PPUSH
40394: LD_VAR 0 3
40398: PUSH
40399: LD_INT 2
40401: ARRAY
40402: PPUSH
40403: CALL_OW 235
40407: GO 40382
40409: POP
40410: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
40411: LD_ADDR_EXP 114
40415: PUSH
40416: LD_EXP 114
40420: PPUSH
40421: LD_VAR 0 4
40425: PPUSH
40426: EMPTY
40427: PPUSH
40428: CALL_OW 1
40432: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
40433: LD_VAR 0 1
40437: PPUSH
40438: LD_INT 0
40440: PPUSH
40441: CALL_OW 505
// end ; end ;
40445: LD_VAR 0 2
40449: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
40450: LD_INT 0
40452: PPUSH
40453: PPUSH
40454: PPUSH
// if not hack in hackTanks or not vehicles then
40455: LD_VAR 0 1
40459: PUSH
40460: LD_EXP 113
40464: IN
40465: NOT
40466: PUSH
40467: LD_VAR 0 2
40471: NOT
40472: OR
40473: IFFALSE 40477
// exit ;
40475: GO 40752
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
40477: LD_ADDR_VAR 0 2
40481: PUSH
40482: LD_VAR 0 1
40486: PPUSH
40487: LD_VAR 0 2
40491: PPUSH
40492: LD_INT 1
40494: PPUSH
40495: LD_INT 1
40497: PPUSH
40498: CALL 48637 0 4
40502: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
40503: LD_ADDR_VAR 0 5
40507: PUSH
40508: LD_EXP 113
40512: PPUSH
40513: LD_VAR 0 1
40517: PPUSH
40518: CALL 47987 0 2
40522: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
40523: LD_EXP 114
40527: PUSH
40528: LD_VAR 0 5
40532: ARRAY
40533: PUSH
40534: LD_EXP 115
40538: LESS
40539: IFFALSE 40728
// begin for i := 1 to vehicles do
40541: LD_ADDR_VAR 0 4
40545: PUSH
40546: DOUBLE
40547: LD_INT 1
40549: DEC
40550: ST_TO_ADDR
40551: LD_VAR 0 2
40555: PUSH
40556: FOR_TO
40557: IFFALSE 40726
// begin if hackTanksCaptured [ index ] = hackLimit then
40559: LD_EXP 114
40563: PUSH
40564: LD_VAR 0 5
40568: ARRAY
40569: PUSH
40570: LD_EXP 115
40574: EQUAL
40575: IFFALSE 40579
// break ;
40577: GO 40726
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
40579: LD_ADDR_EXP 117
40583: PUSH
40584: LD_EXP 117
40588: PPUSH
40589: LD_VAR 0 5
40593: PPUSH
40594: LD_EXP 117
40598: PUSH
40599: LD_VAR 0 5
40603: ARRAY
40604: PUSH
40605: LD_INT 1
40607: PLUS
40608: PPUSH
40609: CALL_OW 1
40613: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
40614: LD_ADDR_EXP 114
40618: PUSH
40619: LD_EXP 114
40623: PPUSH
40624: LD_VAR 0 5
40628: PUSH
40629: LD_EXP 114
40633: PUSH
40634: LD_VAR 0 5
40638: ARRAY
40639: PUSH
40640: LD_INT 1
40642: PLUS
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PPUSH
40648: LD_VAR 0 2
40652: PUSH
40653: LD_VAR 0 4
40657: ARRAY
40658: PUSH
40659: LD_VAR 0 2
40663: PUSH
40664: LD_VAR 0 4
40668: ARRAY
40669: PPUSH
40670: CALL_OW 255
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PPUSH
40679: CALL 48202 0 3
40683: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
40684: LD_VAR 0 2
40688: PUSH
40689: LD_VAR 0 4
40693: ARRAY
40694: PPUSH
40695: LD_VAR 0 1
40699: PPUSH
40700: CALL_OW 255
40704: PPUSH
40705: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
40709: LD_VAR 0 2
40713: PUSH
40714: LD_VAR 0 4
40718: ARRAY
40719: PPUSH
40720: CALL_OW 141
// end ;
40724: GO 40556
40726: POP
40727: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40728: LD_VAR 0 1
40732: PPUSH
40733: LD_EXP 114
40737: PUSH
40738: LD_VAR 0 5
40742: ARRAY
40743: PUSH
40744: LD_INT 0
40746: PLUS
40747: PPUSH
40748: CALL_OW 505
// end ;
40752: LD_VAR 0 3
40756: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
40757: LD_INT 0
40759: PPUSH
40760: PPUSH
40761: PPUSH
40762: PPUSH
// if not hack in hackTanks then
40763: LD_VAR 0 1
40767: PUSH
40768: LD_EXP 113
40772: IN
40773: NOT
40774: IFFALSE 40778
// exit ;
40776: GO 41018
// index := GetElementIndex ( hackTanks , hack ) ;
40778: LD_ADDR_VAR 0 4
40782: PUSH
40783: LD_EXP 113
40787: PPUSH
40788: LD_VAR 0 1
40792: PPUSH
40793: CALL 47987 0 2
40797: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
40798: LD_ADDR_VAR 0 3
40802: PUSH
40803: DOUBLE
40804: LD_EXP 114
40808: PUSH
40809: LD_VAR 0 4
40813: ARRAY
40814: INC
40815: ST_TO_ADDR
40816: LD_INT 1
40818: PUSH
40819: FOR_DOWNTO
40820: IFFALSE 40992
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
40822: LD_ADDR_VAR 0 5
40826: PUSH
40827: LD_EXP 114
40831: PUSH
40832: LD_VAR 0 4
40836: ARRAY
40837: PUSH
40838: LD_VAR 0 3
40842: ARRAY
40843: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
40844: LD_VAR 0 5
40848: PUSH
40849: LD_INT 1
40851: ARRAY
40852: PPUSH
40853: CALL_OW 302
40857: NOT
40858: PUSH
40859: LD_VAR 0 5
40863: PUSH
40864: LD_INT 1
40866: ARRAY
40867: PPUSH
40868: CALL_OW 255
40872: PUSH
40873: LD_VAR 0 1
40877: PPUSH
40878: CALL_OW 255
40882: NONEQUAL
40883: OR
40884: IFFALSE 40990
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
40886: LD_VAR 0 5
40890: PUSH
40891: LD_INT 1
40893: ARRAY
40894: PPUSH
40895: CALL_OW 305
40899: PUSH
40900: LD_VAR 0 5
40904: PUSH
40905: LD_INT 1
40907: ARRAY
40908: PPUSH
40909: CALL_OW 255
40913: PUSH
40914: LD_VAR 0 1
40918: PPUSH
40919: CALL_OW 255
40923: EQUAL
40924: AND
40925: IFFALSE 40949
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
40927: LD_VAR 0 5
40931: PUSH
40932: LD_INT 1
40934: ARRAY
40935: PPUSH
40936: LD_VAR 0 5
40940: PUSH
40941: LD_INT 2
40943: ARRAY
40944: PPUSH
40945: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
40949: LD_ADDR_EXP 114
40953: PUSH
40954: LD_EXP 114
40958: PPUSH
40959: LD_VAR 0 4
40963: PPUSH
40964: LD_EXP 114
40968: PUSH
40969: LD_VAR 0 4
40973: ARRAY
40974: PPUSH
40975: LD_VAR 0 3
40979: PPUSH
40980: CALL_OW 3
40984: PPUSH
40985: CALL_OW 1
40989: ST_TO_ADDR
// end ; end ;
40990: GO 40819
40992: POP
40993: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40994: LD_VAR 0 1
40998: PPUSH
40999: LD_EXP 114
41003: PUSH
41004: LD_VAR 0 4
41008: ARRAY
41009: PUSH
41010: LD_INT 0
41012: PLUS
41013: PPUSH
41014: CALL_OW 505
// end ;
41018: LD_VAR 0 2
41022: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
41023: LD_INT 0
41025: PPUSH
41026: PPUSH
41027: PPUSH
41028: PPUSH
// if not hack in hackTanks then
41029: LD_VAR 0 1
41033: PUSH
41034: LD_EXP 113
41038: IN
41039: NOT
41040: IFFALSE 41044
// exit ;
41042: GO 41129
// index := GetElementIndex ( hackTanks , hack ) ;
41044: LD_ADDR_VAR 0 5
41048: PUSH
41049: LD_EXP 113
41053: PPUSH
41054: LD_VAR 0 1
41058: PPUSH
41059: CALL 47987 0 2
41063: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
41064: LD_ADDR_VAR 0 4
41068: PUSH
41069: DOUBLE
41070: LD_INT 1
41072: DEC
41073: ST_TO_ADDR
41074: LD_EXP 114
41078: PUSH
41079: LD_VAR 0 5
41083: ARRAY
41084: PUSH
41085: FOR_TO
41086: IFFALSE 41127
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
41088: LD_EXP 114
41092: PUSH
41093: LD_VAR 0 5
41097: ARRAY
41098: PUSH
41099: LD_VAR 0 4
41103: ARRAY
41104: PUSH
41105: LD_INT 1
41107: ARRAY
41108: PUSH
41109: LD_VAR 0 2
41113: EQUAL
41114: IFFALSE 41125
// KillUnit ( vehicle ) ;
41116: LD_VAR 0 2
41120: PPUSH
41121: CALL_OW 66
41125: GO 41085
41127: POP
41128: POP
// end ;
41129: LD_VAR 0 3
41133: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
41134: LD_EXP 118
41138: NOT
41139: IFFALSE 41174
41141: GO 41143
41143: DISABLE
// begin initMiner := true ;
41144: LD_ADDR_EXP 118
41148: PUSH
41149: LD_INT 1
41151: ST_TO_ADDR
// minersList := [ ] ;
41152: LD_ADDR_EXP 119
41156: PUSH
41157: EMPTY
41158: ST_TO_ADDR
// minerMinesList := [ ] ;
41159: LD_ADDR_EXP 120
41163: PUSH
41164: EMPTY
41165: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
41166: LD_ADDR_EXP 121
41170: PUSH
41171: LD_INT 5
41173: ST_TO_ADDR
// end ;
41174: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
41175: LD_EXP 118
41179: PUSH
41180: LD_INT 34
41182: PUSH
41183: LD_INT 81
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PPUSH
41190: CALL_OW 69
41194: AND
41195: IFFALSE 41656
41197: GO 41199
41199: DISABLE
41200: LD_INT 0
41202: PPUSH
41203: PPUSH
41204: PPUSH
41205: PPUSH
// begin enable ;
41206: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
41207: LD_ADDR_VAR 0 1
41211: PUSH
41212: LD_INT 34
41214: PUSH
41215: LD_INT 81
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PPUSH
41222: CALL_OW 69
41226: PUSH
41227: FOR_IN
41228: IFFALSE 41300
// begin if not i in minersList then
41230: LD_VAR 0 1
41234: PUSH
41235: LD_EXP 119
41239: IN
41240: NOT
41241: IFFALSE 41298
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
41243: LD_ADDR_EXP 119
41247: PUSH
41248: LD_EXP 119
41252: PPUSH
41253: LD_EXP 119
41257: PUSH
41258: LD_INT 1
41260: PLUS
41261: PPUSH
41262: LD_VAR 0 1
41266: PPUSH
41267: CALL_OW 1
41271: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
41272: LD_ADDR_EXP 120
41276: PUSH
41277: LD_EXP 120
41281: PPUSH
41282: LD_EXP 120
41286: PUSH
41287: LD_INT 1
41289: PLUS
41290: PPUSH
41291: EMPTY
41292: PPUSH
41293: CALL_OW 1
41297: ST_TO_ADDR
// end end ;
41298: GO 41227
41300: POP
41301: POP
// for i := minerMinesList downto 1 do
41302: LD_ADDR_VAR 0 1
41306: PUSH
41307: DOUBLE
41308: LD_EXP 120
41312: INC
41313: ST_TO_ADDR
41314: LD_INT 1
41316: PUSH
41317: FOR_DOWNTO
41318: IFFALSE 41654
// begin if IsLive ( minersList [ i ] ) then
41320: LD_EXP 119
41324: PUSH
41325: LD_VAR 0 1
41329: ARRAY
41330: PPUSH
41331: CALL_OW 300
41335: IFFALSE 41363
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
41337: LD_EXP 119
41341: PUSH
41342: LD_VAR 0 1
41346: ARRAY
41347: PPUSH
41348: LD_EXP 120
41352: PUSH
41353: LD_VAR 0 1
41357: ARRAY
41358: PPUSH
41359: CALL_OW 505
// if not minerMinesList [ i ] then
41363: LD_EXP 120
41367: PUSH
41368: LD_VAR 0 1
41372: ARRAY
41373: NOT
41374: IFFALSE 41378
// continue ;
41376: GO 41317
// for j := minerMinesList [ i ] downto 1 do
41378: LD_ADDR_VAR 0 2
41382: PUSH
41383: DOUBLE
41384: LD_EXP 120
41388: PUSH
41389: LD_VAR 0 1
41393: ARRAY
41394: INC
41395: ST_TO_ADDR
41396: LD_INT 1
41398: PUSH
41399: FOR_DOWNTO
41400: IFFALSE 41650
// begin side := GetSide ( minersList [ i ] ) ;
41402: LD_ADDR_VAR 0 3
41406: PUSH
41407: LD_EXP 119
41411: PUSH
41412: LD_VAR 0 1
41416: ARRAY
41417: PPUSH
41418: CALL_OW 255
41422: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
41423: LD_ADDR_VAR 0 4
41427: PUSH
41428: LD_EXP 120
41432: PUSH
41433: LD_VAR 0 1
41437: ARRAY
41438: PUSH
41439: LD_VAR 0 2
41443: ARRAY
41444: PUSH
41445: LD_INT 1
41447: ARRAY
41448: PPUSH
41449: LD_EXP 120
41453: PUSH
41454: LD_VAR 0 1
41458: ARRAY
41459: PUSH
41460: LD_VAR 0 2
41464: ARRAY
41465: PUSH
41466: LD_INT 2
41468: ARRAY
41469: PPUSH
41470: CALL_OW 428
41474: ST_TO_ADDR
// if not tmp then
41475: LD_VAR 0 4
41479: NOT
41480: IFFALSE 41484
// continue ;
41482: GO 41399
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
41484: LD_VAR 0 4
41488: PUSH
41489: LD_INT 81
41491: PUSH
41492: LD_VAR 0 3
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PPUSH
41501: CALL_OW 69
41505: IN
41506: PUSH
41507: LD_EXP 120
41511: PUSH
41512: LD_VAR 0 1
41516: ARRAY
41517: PUSH
41518: LD_VAR 0 2
41522: ARRAY
41523: PUSH
41524: LD_INT 1
41526: ARRAY
41527: PPUSH
41528: LD_EXP 120
41532: PUSH
41533: LD_VAR 0 1
41537: ARRAY
41538: PUSH
41539: LD_VAR 0 2
41543: ARRAY
41544: PUSH
41545: LD_INT 2
41547: ARRAY
41548: PPUSH
41549: CALL_OW 458
41553: AND
41554: IFFALSE 41648
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
41556: LD_EXP 120
41560: PUSH
41561: LD_VAR 0 1
41565: ARRAY
41566: PUSH
41567: LD_VAR 0 2
41571: ARRAY
41572: PUSH
41573: LD_INT 1
41575: ARRAY
41576: PPUSH
41577: LD_EXP 120
41581: PUSH
41582: LD_VAR 0 1
41586: ARRAY
41587: PUSH
41588: LD_VAR 0 2
41592: ARRAY
41593: PUSH
41594: LD_INT 2
41596: ARRAY
41597: PPUSH
41598: LD_VAR 0 3
41602: PPUSH
41603: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
41607: LD_ADDR_EXP 120
41611: PUSH
41612: LD_EXP 120
41616: PPUSH
41617: LD_VAR 0 1
41621: PPUSH
41622: LD_EXP 120
41626: PUSH
41627: LD_VAR 0 1
41631: ARRAY
41632: PPUSH
41633: LD_VAR 0 2
41637: PPUSH
41638: CALL_OW 3
41642: PPUSH
41643: CALL_OW 1
41647: ST_TO_ADDR
// end ; end ;
41648: GO 41399
41650: POP
41651: POP
// end ;
41652: GO 41317
41654: POP
41655: POP
// end ;
41656: PPOPN 4
41658: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
41659: LD_INT 0
41661: PPUSH
41662: PPUSH
// result := false ;
41663: LD_ADDR_VAR 0 4
41667: PUSH
41668: LD_INT 0
41670: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
41671: LD_VAR 0 1
41675: PPUSH
41676: CALL_OW 264
41680: PUSH
41681: LD_INT 81
41683: EQUAL
41684: NOT
41685: IFFALSE 41689
// exit ;
41687: GO 41929
// index := GetElementIndex ( minersList , unit ) ;
41689: LD_ADDR_VAR 0 5
41693: PUSH
41694: LD_EXP 119
41698: PPUSH
41699: LD_VAR 0 1
41703: PPUSH
41704: CALL 47987 0 2
41708: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
41709: LD_EXP 120
41713: PUSH
41714: LD_VAR 0 5
41718: ARRAY
41719: PUSH
41720: LD_EXP 121
41724: GREATEREQUAL
41725: IFFALSE 41729
// exit ;
41727: GO 41929
// ComMoveXY ( unit , x , y ) ;
41729: LD_VAR 0 1
41733: PPUSH
41734: LD_VAR 0 2
41738: PPUSH
41739: LD_VAR 0 3
41743: PPUSH
41744: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41748: LD_INT 35
41750: PPUSH
41751: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
41755: LD_VAR 0 1
41759: PPUSH
41760: LD_VAR 0 2
41764: PPUSH
41765: LD_VAR 0 3
41769: PPUSH
41770: CALL 79748 0 3
41774: NOT
41775: PUSH
41776: LD_VAR 0 1
41780: PPUSH
41781: CALL_OW 314
41785: AND
41786: IFFALSE 41790
// exit ;
41788: GO 41929
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
41790: LD_VAR 0 2
41794: PPUSH
41795: LD_VAR 0 3
41799: PPUSH
41800: CALL_OW 428
41804: PUSH
41805: LD_VAR 0 1
41809: EQUAL
41810: PUSH
41811: LD_VAR 0 1
41815: PPUSH
41816: CALL_OW 314
41820: NOT
41821: AND
41822: IFFALSE 41748
// PlaySoundXY ( x , y , PlantMine ) ;
41824: LD_VAR 0 2
41828: PPUSH
41829: LD_VAR 0 3
41833: PPUSH
41834: LD_STRING PlantMine
41836: PPUSH
41837: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
41841: LD_VAR 0 2
41845: PPUSH
41846: LD_VAR 0 3
41850: PPUSH
41851: LD_VAR 0 1
41855: PPUSH
41856: CALL_OW 255
41860: PPUSH
41861: LD_INT 0
41863: PPUSH
41864: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
41868: LD_ADDR_EXP 120
41872: PUSH
41873: LD_EXP 120
41877: PPUSH
41878: LD_VAR 0 5
41882: PUSH
41883: LD_EXP 120
41887: PUSH
41888: LD_VAR 0 5
41892: ARRAY
41893: PUSH
41894: LD_INT 1
41896: PLUS
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PPUSH
41902: LD_VAR 0 2
41906: PUSH
41907: LD_VAR 0 3
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PPUSH
41916: CALL 48202 0 3
41920: ST_TO_ADDR
// result := true ;
41921: LD_ADDR_VAR 0 4
41925: PUSH
41926: LD_INT 1
41928: ST_TO_ADDR
// end ;
41929: LD_VAR 0 4
41933: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
41934: LD_INT 0
41936: PPUSH
41937: PPUSH
41938: PPUSH
// if not unit in minersList then
41939: LD_VAR 0 1
41943: PUSH
41944: LD_EXP 119
41948: IN
41949: NOT
41950: IFFALSE 41954
// exit ;
41952: GO 42346
// index := GetElementIndex ( minersList , unit ) ;
41954: LD_ADDR_VAR 0 6
41958: PUSH
41959: LD_EXP 119
41963: PPUSH
41964: LD_VAR 0 1
41968: PPUSH
41969: CALL 47987 0 2
41973: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
41974: LD_ADDR_VAR 0 5
41978: PUSH
41979: DOUBLE
41980: LD_EXP 120
41984: PUSH
41985: LD_VAR 0 6
41989: ARRAY
41990: INC
41991: ST_TO_ADDR
41992: LD_INT 1
41994: PUSH
41995: FOR_DOWNTO
41996: IFFALSE 42157
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
41998: LD_EXP 120
42002: PUSH
42003: LD_VAR 0 6
42007: ARRAY
42008: PUSH
42009: LD_VAR 0 5
42013: ARRAY
42014: PUSH
42015: LD_INT 1
42017: ARRAY
42018: PUSH
42019: LD_VAR 0 2
42023: EQUAL
42024: PUSH
42025: LD_EXP 120
42029: PUSH
42030: LD_VAR 0 6
42034: ARRAY
42035: PUSH
42036: LD_VAR 0 5
42040: ARRAY
42041: PUSH
42042: LD_INT 2
42044: ARRAY
42045: PUSH
42046: LD_VAR 0 3
42050: EQUAL
42051: AND
42052: IFFALSE 42155
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
42054: LD_EXP 120
42058: PUSH
42059: LD_VAR 0 6
42063: ARRAY
42064: PUSH
42065: LD_VAR 0 5
42069: ARRAY
42070: PUSH
42071: LD_INT 1
42073: ARRAY
42074: PPUSH
42075: LD_EXP 120
42079: PUSH
42080: LD_VAR 0 6
42084: ARRAY
42085: PUSH
42086: LD_VAR 0 5
42090: ARRAY
42091: PUSH
42092: LD_INT 2
42094: ARRAY
42095: PPUSH
42096: LD_VAR 0 1
42100: PPUSH
42101: CALL_OW 255
42105: PPUSH
42106: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
42110: LD_ADDR_EXP 120
42114: PUSH
42115: LD_EXP 120
42119: PPUSH
42120: LD_VAR 0 6
42124: PPUSH
42125: LD_EXP 120
42129: PUSH
42130: LD_VAR 0 6
42134: ARRAY
42135: PPUSH
42136: LD_VAR 0 5
42140: PPUSH
42141: CALL_OW 3
42145: PPUSH
42146: CALL_OW 1
42150: ST_TO_ADDR
// exit ;
42151: POP
42152: POP
42153: GO 42346
// end ; end ;
42155: GO 41995
42157: POP
42158: POP
// for i := minerMinesList [ index ] downto 1 do
42159: LD_ADDR_VAR 0 5
42163: PUSH
42164: DOUBLE
42165: LD_EXP 120
42169: PUSH
42170: LD_VAR 0 6
42174: ARRAY
42175: INC
42176: ST_TO_ADDR
42177: LD_INT 1
42179: PUSH
42180: FOR_DOWNTO
42181: IFFALSE 42344
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
42183: LD_EXP 120
42187: PUSH
42188: LD_VAR 0 6
42192: ARRAY
42193: PUSH
42194: LD_VAR 0 5
42198: ARRAY
42199: PUSH
42200: LD_INT 1
42202: ARRAY
42203: PPUSH
42204: LD_EXP 120
42208: PUSH
42209: LD_VAR 0 6
42213: ARRAY
42214: PUSH
42215: LD_VAR 0 5
42219: ARRAY
42220: PUSH
42221: LD_INT 2
42223: ARRAY
42224: PPUSH
42225: LD_VAR 0 2
42229: PPUSH
42230: LD_VAR 0 3
42234: PPUSH
42235: CALL_OW 298
42239: PUSH
42240: LD_INT 6
42242: LESS
42243: IFFALSE 42342
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
42245: LD_EXP 120
42249: PUSH
42250: LD_VAR 0 6
42254: ARRAY
42255: PUSH
42256: LD_VAR 0 5
42260: ARRAY
42261: PUSH
42262: LD_INT 1
42264: ARRAY
42265: PPUSH
42266: LD_EXP 120
42270: PUSH
42271: LD_VAR 0 6
42275: ARRAY
42276: PUSH
42277: LD_VAR 0 5
42281: ARRAY
42282: PUSH
42283: LD_INT 2
42285: ARRAY
42286: PPUSH
42287: LD_VAR 0 1
42291: PPUSH
42292: CALL_OW 255
42296: PPUSH
42297: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
42301: LD_ADDR_EXP 120
42305: PUSH
42306: LD_EXP 120
42310: PPUSH
42311: LD_VAR 0 6
42315: PPUSH
42316: LD_EXP 120
42320: PUSH
42321: LD_VAR 0 6
42325: ARRAY
42326: PPUSH
42327: LD_VAR 0 5
42331: PPUSH
42332: CALL_OW 3
42336: PPUSH
42337: CALL_OW 1
42341: ST_TO_ADDR
// end ; end ;
42342: GO 42180
42344: POP
42345: POP
// end ;
42346: LD_VAR 0 4
42350: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
42351: LD_INT 0
42353: PPUSH
42354: PPUSH
42355: PPUSH
42356: PPUSH
42357: PPUSH
42358: PPUSH
42359: PPUSH
42360: PPUSH
42361: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
42362: LD_VAR 0 1
42366: PPUSH
42367: CALL_OW 264
42371: PUSH
42372: LD_INT 81
42374: EQUAL
42375: NOT
42376: PUSH
42377: LD_VAR 0 1
42381: PUSH
42382: LD_EXP 119
42386: IN
42387: NOT
42388: OR
42389: IFFALSE 42393
// exit ;
42391: GO 42715
// index := GetElementIndex ( minersList , unit ) ;
42393: LD_ADDR_VAR 0 6
42397: PUSH
42398: LD_EXP 119
42402: PPUSH
42403: LD_VAR 0 1
42407: PPUSH
42408: CALL 47987 0 2
42412: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
42413: LD_ADDR_VAR 0 8
42417: PUSH
42418: LD_EXP 121
42422: PUSH
42423: LD_EXP 120
42427: PUSH
42428: LD_VAR 0 6
42432: ARRAY
42433: MINUS
42434: ST_TO_ADDR
// if not minesFreeAmount then
42435: LD_VAR 0 8
42439: NOT
42440: IFFALSE 42444
// exit ;
42442: GO 42715
// tmp := [ ] ;
42444: LD_ADDR_VAR 0 7
42448: PUSH
42449: EMPTY
42450: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
42451: LD_ADDR_VAR 0 5
42455: PUSH
42456: DOUBLE
42457: LD_INT 1
42459: DEC
42460: ST_TO_ADDR
42461: LD_VAR 0 8
42465: PUSH
42466: FOR_TO
42467: IFFALSE 42662
// begin _d := rand ( 0 , 5 ) ;
42469: LD_ADDR_VAR 0 11
42473: PUSH
42474: LD_INT 0
42476: PPUSH
42477: LD_INT 5
42479: PPUSH
42480: CALL_OW 12
42484: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
42485: LD_ADDR_VAR 0 12
42489: PUSH
42490: LD_INT 2
42492: PPUSH
42493: LD_INT 6
42495: PPUSH
42496: CALL_OW 12
42500: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
42501: LD_ADDR_VAR 0 9
42505: PUSH
42506: LD_VAR 0 2
42510: PPUSH
42511: LD_VAR 0 11
42515: PPUSH
42516: LD_VAR 0 12
42520: PPUSH
42521: CALL_OW 272
42525: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
42526: LD_ADDR_VAR 0 10
42530: PUSH
42531: LD_VAR 0 3
42535: PPUSH
42536: LD_VAR 0 11
42540: PPUSH
42541: LD_VAR 0 12
42545: PPUSH
42546: CALL_OW 273
42550: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
42551: LD_VAR 0 9
42555: PPUSH
42556: LD_VAR 0 10
42560: PPUSH
42561: CALL_OW 488
42565: PUSH
42566: LD_VAR 0 9
42570: PUSH
42571: LD_VAR 0 10
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_VAR 0 7
42584: IN
42585: NOT
42586: AND
42587: PUSH
42588: LD_VAR 0 9
42592: PPUSH
42593: LD_VAR 0 10
42597: PPUSH
42598: CALL_OW 458
42602: NOT
42603: AND
42604: IFFALSE 42646
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
42606: LD_ADDR_VAR 0 7
42610: PUSH
42611: LD_VAR 0 7
42615: PPUSH
42616: LD_VAR 0 7
42620: PUSH
42621: LD_INT 1
42623: PLUS
42624: PPUSH
42625: LD_VAR 0 9
42629: PUSH
42630: LD_VAR 0 10
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PPUSH
42639: CALL_OW 1
42643: ST_TO_ADDR
42644: GO 42660
// i := i - 1 ;
42646: LD_ADDR_VAR 0 5
42650: PUSH
42651: LD_VAR 0 5
42655: PUSH
42656: LD_INT 1
42658: MINUS
42659: ST_TO_ADDR
// end ;
42660: GO 42466
42662: POP
42663: POP
// for i in tmp do
42664: LD_ADDR_VAR 0 5
42668: PUSH
42669: LD_VAR 0 7
42673: PUSH
42674: FOR_IN
42675: IFFALSE 42713
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
42677: LD_VAR 0 1
42681: PPUSH
42682: LD_VAR 0 5
42686: PUSH
42687: LD_INT 1
42689: ARRAY
42690: PPUSH
42691: LD_VAR 0 5
42695: PUSH
42696: LD_INT 2
42698: ARRAY
42699: PPUSH
42700: CALL 41659 0 3
42704: NOT
42705: IFFALSE 42711
// exit ;
42707: POP
42708: POP
42709: GO 42715
42711: GO 42674
42713: POP
42714: POP
// end ;
42715: LD_VAR 0 4
42719: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
42720: LD_INT 0
42722: PPUSH
42723: PPUSH
42724: PPUSH
42725: PPUSH
42726: PPUSH
42727: PPUSH
42728: PPUSH
42729: PPUSH
42730: PPUSH
// if GetClass ( unit ) <> class_sniper then
42731: LD_VAR 0 1
42735: PPUSH
42736: CALL_OW 257
42740: PUSH
42741: LD_INT 5
42743: NONEQUAL
42744: IFFALSE 42748
// exit ;
42746: GO 43214
// dist := 8 ;
42748: LD_ADDR_VAR 0 5
42752: PUSH
42753: LD_INT 8
42755: ST_TO_ADDR
// viewRange := 12 ;
42756: LD_ADDR_VAR 0 8
42760: PUSH
42761: LD_INT 12
42763: ST_TO_ADDR
// side := GetSide ( unit ) ;
42764: LD_ADDR_VAR 0 6
42768: PUSH
42769: LD_VAR 0 1
42773: PPUSH
42774: CALL_OW 255
42778: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
42779: LD_INT 61
42781: PPUSH
42782: LD_VAR 0 6
42786: PPUSH
42787: CALL_OW 321
42791: PUSH
42792: LD_INT 2
42794: EQUAL
42795: IFFALSE 42805
// viewRange := 16 ;
42797: LD_ADDR_VAR 0 8
42801: PUSH
42802: LD_INT 16
42804: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
42805: LD_VAR 0 1
42809: PPUSH
42810: LD_VAR 0 2
42814: PPUSH
42815: LD_VAR 0 3
42819: PPUSH
42820: CALL_OW 297
42824: PUSH
42825: LD_VAR 0 5
42829: GREATER
42830: IFFALSE 42909
// begin ComMoveXY ( unit , x , y ) ;
42832: LD_VAR 0 1
42836: PPUSH
42837: LD_VAR 0 2
42841: PPUSH
42842: LD_VAR 0 3
42846: PPUSH
42847: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42851: LD_INT 35
42853: PPUSH
42854: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
42858: LD_VAR 0 1
42862: PPUSH
42863: LD_VAR 0 2
42867: PPUSH
42868: LD_VAR 0 3
42872: PPUSH
42873: CALL 79748 0 3
42877: NOT
42878: IFFALSE 42882
// exit ;
42880: GO 43214
// until GetDistUnitXY ( unit , x , y ) < dist ;
42882: LD_VAR 0 1
42886: PPUSH
42887: LD_VAR 0 2
42891: PPUSH
42892: LD_VAR 0 3
42896: PPUSH
42897: CALL_OW 297
42901: PUSH
42902: LD_VAR 0 5
42906: LESS
42907: IFFALSE 42851
// end ; ComTurnXY ( unit , x , y ) ;
42909: LD_VAR 0 1
42913: PPUSH
42914: LD_VAR 0 2
42918: PPUSH
42919: LD_VAR 0 3
42923: PPUSH
42924: CALL_OW 118
// repeat if Multiplayer then
42928: LD_OWVAR 4
42932: IFFALSE 42943
// wait ( 35 ) else
42934: LD_INT 35
42936: PPUSH
42937: CALL_OW 67
42941: GO 42950
// wait ( 5 ) ;
42943: LD_INT 5
42945: PPUSH
42946: CALL_OW 67
// _d := GetDir ( unit ) ;
42950: LD_ADDR_VAR 0 11
42954: PUSH
42955: LD_VAR 0 1
42959: PPUSH
42960: CALL_OW 254
42964: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
42965: LD_ADDR_VAR 0 7
42969: PUSH
42970: LD_VAR 0 1
42974: PPUSH
42975: CALL_OW 250
42979: PPUSH
42980: LD_VAR 0 1
42984: PPUSH
42985: CALL_OW 251
42989: PPUSH
42990: LD_VAR 0 2
42994: PPUSH
42995: LD_VAR 0 3
42999: PPUSH
43000: CALL 82356 0 4
43004: ST_TO_ADDR
// until dir = _d ;
43005: LD_VAR 0 7
43009: PUSH
43010: LD_VAR 0 11
43014: EQUAL
43015: IFFALSE 42928
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
43017: LD_ADDR_VAR 0 9
43021: PUSH
43022: LD_VAR 0 1
43026: PPUSH
43027: CALL_OW 250
43031: PPUSH
43032: LD_VAR 0 7
43036: PPUSH
43037: LD_VAR 0 5
43041: PPUSH
43042: CALL_OW 272
43046: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
43047: LD_ADDR_VAR 0 10
43051: PUSH
43052: LD_VAR 0 1
43056: PPUSH
43057: CALL_OW 251
43061: PPUSH
43062: LD_VAR 0 7
43066: PPUSH
43067: LD_VAR 0 5
43071: PPUSH
43072: CALL_OW 273
43076: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43077: LD_VAR 0 9
43081: PPUSH
43082: LD_VAR 0 10
43086: PPUSH
43087: CALL_OW 488
43091: NOT
43092: IFFALSE 43096
// exit ;
43094: GO 43214
// ComAnimCustom ( unit , 1 ) ;
43096: LD_VAR 0 1
43100: PPUSH
43101: LD_INT 1
43103: PPUSH
43104: CALL_OW 592
// p := 0 ;
43108: LD_ADDR_VAR 0 12
43112: PUSH
43113: LD_INT 0
43115: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
43116: LD_VAR 0 9
43120: PPUSH
43121: LD_VAR 0 10
43125: PPUSH
43126: LD_VAR 0 6
43130: PPUSH
43131: LD_VAR 0 8
43135: PPUSH
43136: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
43140: LD_INT 35
43142: PPUSH
43143: CALL_OW 67
// p := Inc ( p ) ;
43147: LD_ADDR_VAR 0 12
43151: PUSH
43152: LD_VAR 0 12
43156: PPUSH
43157: CALL 82312 0 1
43161: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
43162: LD_VAR 0 12
43166: PUSH
43167: LD_INT 3
43169: EQUAL
43170: PUSH
43171: LD_VAR 0 1
43175: PPUSH
43176: CALL_OW 302
43180: NOT
43181: OR
43182: PUSH
43183: LD_VAR 0 1
43187: PPUSH
43188: CALL_OW 301
43192: OR
43193: IFFALSE 43140
// RemoveSeeing ( _x , _y , side ) ;
43195: LD_VAR 0 9
43199: PPUSH
43200: LD_VAR 0 10
43204: PPUSH
43205: LD_VAR 0 6
43209: PPUSH
43210: CALL_OW 331
// end ; end_of_file
43214: LD_VAR 0 4
43218: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
43219: LD_INT 0
43221: PPUSH
43222: PPUSH
// if exist_mode then
43223: LD_VAR 0 2
43227: IFFALSE 43273
// begin unit := CreateCharacter ( prefix & ident ) ;
43229: LD_ADDR_VAR 0 5
43233: PUSH
43234: LD_VAR 0 3
43238: PUSH
43239: LD_VAR 0 1
43243: STR
43244: PPUSH
43245: CALL_OW 34
43249: ST_TO_ADDR
// if unit then
43250: LD_VAR 0 5
43254: IFFALSE 43271
// DeleteCharacters ( prefix & ident ) ;
43256: LD_VAR 0 3
43260: PUSH
43261: LD_VAR 0 1
43265: STR
43266: PPUSH
43267: CALL_OW 40
// end else
43271: GO 43288
// unit := NewCharacter ( ident ) ;
43273: LD_ADDR_VAR 0 5
43277: PUSH
43278: LD_VAR 0 1
43282: PPUSH
43283: CALL_OW 25
43287: ST_TO_ADDR
// result := unit ;
43288: LD_ADDR_VAR 0 4
43292: PUSH
43293: LD_VAR 0 5
43297: ST_TO_ADDR
// end ;
43298: LD_VAR 0 4
43302: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
43303: LD_INT 0
43305: PPUSH
43306: PPUSH
// if not side or not nation then
43307: LD_VAR 0 1
43311: NOT
43312: PUSH
43313: LD_VAR 0 2
43317: NOT
43318: OR
43319: IFFALSE 43323
// exit ;
43321: GO 44091
// case nation of nation_american :
43323: LD_VAR 0 2
43327: PUSH
43328: LD_INT 1
43330: DOUBLE
43331: EQUAL
43332: IFTRUE 43336
43334: GO 43550
43336: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
43337: LD_ADDR_VAR 0 4
43341: PUSH
43342: LD_INT 35
43344: PUSH
43345: LD_INT 45
43347: PUSH
43348: LD_INT 46
43350: PUSH
43351: LD_INT 47
43353: PUSH
43354: LD_INT 82
43356: PUSH
43357: LD_INT 83
43359: PUSH
43360: LD_INT 84
43362: PUSH
43363: LD_INT 85
43365: PUSH
43366: LD_INT 86
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: LD_INT 6
43377: PUSH
43378: LD_INT 15
43380: PUSH
43381: LD_INT 16
43383: PUSH
43384: LD_INT 7
43386: PUSH
43387: LD_INT 12
43389: PUSH
43390: LD_INT 13
43392: PUSH
43393: LD_INT 10
43395: PUSH
43396: LD_INT 14
43398: PUSH
43399: LD_INT 20
43401: PUSH
43402: LD_INT 21
43404: PUSH
43405: LD_INT 22
43407: PUSH
43408: LD_INT 25
43410: PUSH
43411: LD_INT 32
43413: PUSH
43414: LD_INT 27
43416: PUSH
43417: LD_INT 36
43419: PUSH
43420: LD_INT 69
43422: PUSH
43423: LD_INT 39
43425: PUSH
43426: LD_INT 34
43428: PUSH
43429: LD_INT 40
43431: PUSH
43432: LD_INT 48
43434: PUSH
43435: LD_INT 49
43437: PUSH
43438: LD_INT 50
43440: PUSH
43441: LD_INT 51
43443: PUSH
43444: LD_INT 52
43446: PUSH
43447: LD_INT 53
43449: PUSH
43450: LD_INT 54
43452: PUSH
43453: LD_INT 55
43455: PUSH
43456: LD_INT 56
43458: PUSH
43459: LD_INT 57
43461: PUSH
43462: LD_INT 58
43464: PUSH
43465: LD_INT 59
43467: PUSH
43468: LD_INT 60
43470: PUSH
43471: LD_INT 61
43473: PUSH
43474: LD_INT 62
43476: PUSH
43477: LD_INT 80
43479: PUSH
43480: LD_INT 82
43482: PUSH
43483: LD_INT 83
43485: PUSH
43486: LD_INT 84
43488: PUSH
43489: LD_INT 85
43491: PUSH
43492: LD_INT 86
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: ST_TO_ADDR
43548: GO 44015
43550: LD_INT 2
43552: DOUBLE
43553: EQUAL
43554: IFTRUE 43558
43556: GO 43784
43558: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
43559: LD_ADDR_VAR 0 4
43563: PUSH
43564: LD_INT 35
43566: PUSH
43567: LD_INT 45
43569: PUSH
43570: LD_INT 46
43572: PUSH
43573: LD_INT 47
43575: PUSH
43576: LD_INT 82
43578: PUSH
43579: LD_INT 83
43581: PUSH
43582: LD_INT 84
43584: PUSH
43585: LD_INT 85
43587: PUSH
43588: LD_INT 87
43590: PUSH
43591: LD_INT 70
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: LD_INT 11
43599: PUSH
43600: LD_INT 3
43602: PUSH
43603: LD_INT 4
43605: PUSH
43606: LD_INT 5
43608: PUSH
43609: LD_INT 6
43611: PUSH
43612: LD_INT 15
43614: PUSH
43615: LD_INT 18
43617: PUSH
43618: LD_INT 7
43620: PUSH
43621: LD_INT 17
43623: PUSH
43624: LD_INT 8
43626: PUSH
43627: LD_INT 20
43629: PUSH
43630: LD_INT 21
43632: PUSH
43633: LD_INT 22
43635: PUSH
43636: LD_INT 72
43638: PUSH
43639: LD_INT 26
43641: PUSH
43642: LD_INT 69
43644: PUSH
43645: LD_INT 39
43647: PUSH
43648: LD_INT 40
43650: PUSH
43651: LD_INT 41
43653: PUSH
43654: LD_INT 42
43656: PUSH
43657: LD_INT 43
43659: PUSH
43660: LD_INT 48
43662: PUSH
43663: LD_INT 49
43665: PUSH
43666: LD_INT 50
43668: PUSH
43669: LD_INT 51
43671: PUSH
43672: LD_INT 52
43674: PUSH
43675: LD_INT 53
43677: PUSH
43678: LD_INT 54
43680: PUSH
43681: LD_INT 55
43683: PUSH
43684: LD_INT 56
43686: PUSH
43687: LD_INT 60
43689: PUSH
43690: LD_INT 61
43692: PUSH
43693: LD_INT 62
43695: PUSH
43696: LD_INT 66
43698: PUSH
43699: LD_INT 67
43701: PUSH
43702: LD_INT 68
43704: PUSH
43705: LD_INT 81
43707: PUSH
43708: LD_INT 82
43710: PUSH
43711: LD_INT 83
43713: PUSH
43714: LD_INT 84
43716: PUSH
43717: LD_INT 85
43719: PUSH
43720: LD_INT 87
43722: PUSH
43723: LD_INT 88
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: ST_TO_ADDR
43782: GO 44015
43784: LD_INT 3
43786: DOUBLE
43787: EQUAL
43788: IFTRUE 43792
43790: GO 44014
43792: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
43793: LD_ADDR_VAR 0 4
43797: PUSH
43798: LD_INT 46
43800: PUSH
43801: LD_INT 47
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: LD_INT 82
43812: PUSH
43813: LD_INT 83
43815: PUSH
43816: LD_INT 84
43818: PUSH
43819: LD_INT 85
43821: PUSH
43822: LD_INT 86
43824: PUSH
43825: LD_INT 11
43827: PUSH
43828: LD_INT 9
43830: PUSH
43831: LD_INT 20
43833: PUSH
43834: LD_INT 19
43836: PUSH
43837: LD_INT 21
43839: PUSH
43840: LD_INT 24
43842: PUSH
43843: LD_INT 22
43845: PUSH
43846: LD_INT 25
43848: PUSH
43849: LD_INT 28
43851: PUSH
43852: LD_INT 29
43854: PUSH
43855: LD_INT 30
43857: PUSH
43858: LD_INT 31
43860: PUSH
43861: LD_INT 37
43863: PUSH
43864: LD_INT 38
43866: PUSH
43867: LD_INT 32
43869: PUSH
43870: LD_INT 27
43872: PUSH
43873: LD_INT 33
43875: PUSH
43876: LD_INT 69
43878: PUSH
43879: LD_INT 39
43881: PUSH
43882: LD_INT 34
43884: PUSH
43885: LD_INT 40
43887: PUSH
43888: LD_INT 71
43890: PUSH
43891: LD_INT 23
43893: PUSH
43894: LD_INT 44
43896: PUSH
43897: LD_INT 48
43899: PUSH
43900: LD_INT 49
43902: PUSH
43903: LD_INT 50
43905: PUSH
43906: LD_INT 51
43908: PUSH
43909: LD_INT 52
43911: PUSH
43912: LD_INT 53
43914: PUSH
43915: LD_INT 54
43917: PUSH
43918: LD_INT 55
43920: PUSH
43921: LD_INT 56
43923: PUSH
43924: LD_INT 57
43926: PUSH
43927: LD_INT 58
43929: PUSH
43930: LD_INT 59
43932: PUSH
43933: LD_INT 63
43935: PUSH
43936: LD_INT 64
43938: PUSH
43939: LD_INT 65
43941: PUSH
43942: LD_INT 82
43944: PUSH
43945: LD_INT 83
43947: PUSH
43948: LD_INT 84
43950: PUSH
43951: LD_INT 85
43953: PUSH
43954: LD_INT 86
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: ST_TO_ADDR
44012: GO 44015
44014: POP
// if state > - 1 and state < 3 then
44015: LD_VAR 0 3
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: GREATER
44024: PUSH
44025: LD_VAR 0 3
44029: PUSH
44030: LD_INT 3
44032: LESS
44033: AND
44034: IFFALSE 44091
// for i in result do
44036: LD_ADDR_VAR 0 5
44040: PUSH
44041: LD_VAR 0 4
44045: PUSH
44046: FOR_IN
44047: IFFALSE 44089
// if GetTech ( i , side ) <> state then
44049: LD_VAR 0 5
44053: PPUSH
44054: LD_VAR 0 1
44058: PPUSH
44059: CALL_OW 321
44063: PUSH
44064: LD_VAR 0 3
44068: NONEQUAL
44069: IFFALSE 44087
// result := result diff i ;
44071: LD_ADDR_VAR 0 4
44075: PUSH
44076: LD_VAR 0 4
44080: PUSH
44081: LD_VAR 0 5
44085: DIFF
44086: ST_TO_ADDR
44087: GO 44046
44089: POP
44090: POP
// end ;
44091: LD_VAR 0 4
44095: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44096: LD_INT 0
44098: PPUSH
44099: PPUSH
44100: PPUSH
// result := true ;
44101: LD_ADDR_VAR 0 3
44105: PUSH
44106: LD_INT 1
44108: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44109: LD_ADDR_VAR 0 5
44113: PUSH
44114: LD_VAR 0 2
44118: PPUSH
44119: CALL_OW 480
44123: ST_TO_ADDR
// if not tmp then
44124: LD_VAR 0 5
44128: NOT
44129: IFFALSE 44133
// exit ;
44131: GO 44182
// for i in tmp do
44133: LD_ADDR_VAR 0 4
44137: PUSH
44138: LD_VAR 0 5
44142: PUSH
44143: FOR_IN
44144: IFFALSE 44180
// if GetTech ( i , side ) <> state_researched then
44146: LD_VAR 0 4
44150: PPUSH
44151: LD_VAR 0 1
44155: PPUSH
44156: CALL_OW 321
44160: PUSH
44161: LD_INT 2
44163: NONEQUAL
44164: IFFALSE 44178
// begin result := false ;
44166: LD_ADDR_VAR 0 3
44170: PUSH
44171: LD_INT 0
44173: ST_TO_ADDR
// exit ;
44174: POP
44175: POP
44176: GO 44182
// end ;
44178: GO 44143
44180: POP
44181: POP
// end ;
44182: LD_VAR 0 3
44186: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
44187: LD_INT 0
44189: PPUSH
44190: PPUSH
44191: PPUSH
44192: PPUSH
44193: PPUSH
44194: PPUSH
44195: PPUSH
44196: PPUSH
44197: PPUSH
44198: PPUSH
44199: PPUSH
44200: PPUSH
44201: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
44202: LD_VAR 0 1
44206: NOT
44207: PUSH
44208: LD_VAR 0 1
44212: PPUSH
44213: CALL_OW 257
44217: PUSH
44218: LD_INT 9
44220: NONEQUAL
44221: OR
44222: IFFALSE 44226
// exit ;
44224: GO 44799
// side := GetSide ( unit ) ;
44226: LD_ADDR_VAR 0 9
44230: PUSH
44231: LD_VAR 0 1
44235: PPUSH
44236: CALL_OW 255
44240: ST_TO_ADDR
// tech_space := tech_spacanom ;
44241: LD_ADDR_VAR 0 12
44245: PUSH
44246: LD_INT 29
44248: ST_TO_ADDR
// tech_time := tech_taurad ;
44249: LD_ADDR_VAR 0 13
44253: PUSH
44254: LD_INT 28
44256: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
44257: LD_ADDR_VAR 0 11
44261: PUSH
44262: LD_VAR 0 1
44266: PPUSH
44267: CALL_OW 310
44271: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
44272: LD_VAR 0 11
44276: PPUSH
44277: CALL_OW 247
44281: PUSH
44282: LD_INT 2
44284: EQUAL
44285: IFFALSE 44289
// exit ;
44287: GO 44799
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44289: LD_ADDR_VAR 0 8
44293: PUSH
44294: LD_INT 81
44296: PUSH
44297: LD_VAR 0 9
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: LD_INT 21
44311: PUSH
44312: LD_INT 3
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PPUSH
44327: CALL_OW 69
44331: ST_TO_ADDR
// if not tmp then
44332: LD_VAR 0 8
44336: NOT
44337: IFFALSE 44341
// exit ;
44339: GO 44799
// if in_unit then
44341: LD_VAR 0 11
44345: IFFALSE 44369
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
44347: LD_ADDR_VAR 0 10
44351: PUSH
44352: LD_VAR 0 8
44356: PPUSH
44357: LD_VAR 0 11
44361: PPUSH
44362: CALL_OW 74
44366: ST_TO_ADDR
44367: GO 44389
// enemy := NearestUnitToUnit ( tmp , unit ) ;
44369: LD_ADDR_VAR 0 10
44373: PUSH
44374: LD_VAR 0 8
44378: PPUSH
44379: LD_VAR 0 1
44383: PPUSH
44384: CALL_OW 74
44388: ST_TO_ADDR
// if not enemy then
44389: LD_VAR 0 10
44393: NOT
44394: IFFALSE 44398
// exit ;
44396: GO 44799
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
44398: LD_VAR 0 11
44402: PUSH
44403: LD_VAR 0 11
44407: PPUSH
44408: LD_VAR 0 10
44412: PPUSH
44413: CALL_OW 296
44417: PUSH
44418: LD_INT 13
44420: GREATER
44421: AND
44422: PUSH
44423: LD_VAR 0 1
44427: PPUSH
44428: LD_VAR 0 10
44432: PPUSH
44433: CALL_OW 296
44437: PUSH
44438: LD_INT 12
44440: GREATER
44441: OR
44442: IFFALSE 44446
// exit ;
44444: GO 44799
// missile := [ 1 ] ;
44446: LD_ADDR_VAR 0 14
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: ST_TO_ADDR
// if Researched ( side , tech_space ) then
44457: LD_VAR 0 9
44461: PPUSH
44462: LD_VAR 0 12
44466: PPUSH
44467: CALL_OW 325
44471: IFFALSE 44500
// missile := Replace ( missile , missile + 1 , 2 ) ;
44473: LD_ADDR_VAR 0 14
44477: PUSH
44478: LD_VAR 0 14
44482: PPUSH
44483: LD_VAR 0 14
44487: PUSH
44488: LD_INT 1
44490: PLUS
44491: PPUSH
44492: LD_INT 2
44494: PPUSH
44495: CALL_OW 1
44499: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
44500: LD_VAR 0 9
44504: PPUSH
44505: LD_VAR 0 13
44509: PPUSH
44510: CALL_OW 325
44514: PUSH
44515: LD_VAR 0 10
44519: PPUSH
44520: CALL_OW 255
44524: PPUSH
44525: LD_VAR 0 13
44529: PPUSH
44530: CALL_OW 325
44534: NOT
44535: AND
44536: IFFALSE 44565
// missile := Replace ( missile , missile + 1 , 3 ) ;
44538: LD_ADDR_VAR 0 14
44542: PUSH
44543: LD_VAR 0 14
44547: PPUSH
44548: LD_VAR 0 14
44552: PUSH
44553: LD_INT 1
44555: PLUS
44556: PPUSH
44557: LD_INT 3
44559: PPUSH
44560: CALL_OW 1
44564: ST_TO_ADDR
// if missile < 2 then
44565: LD_VAR 0 14
44569: PUSH
44570: LD_INT 2
44572: LESS
44573: IFFALSE 44577
// exit ;
44575: GO 44799
// x := GetX ( enemy ) ;
44577: LD_ADDR_VAR 0 4
44581: PUSH
44582: LD_VAR 0 10
44586: PPUSH
44587: CALL_OW 250
44591: ST_TO_ADDR
// y := GetY ( enemy ) ;
44592: LD_ADDR_VAR 0 5
44596: PUSH
44597: LD_VAR 0 10
44601: PPUSH
44602: CALL_OW 251
44606: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
44607: LD_ADDR_VAR 0 6
44611: PUSH
44612: LD_VAR 0 4
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PPUSH
44621: LD_INT 1
44623: PPUSH
44624: CALL_OW 12
44628: PLUS
44629: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
44630: LD_ADDR_VAR 0 7
44634: PUSH
44635: LD_VAR 0 5
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PPUSH
44644: LD_INT 1
44646: PPUSH
44647: CALL_OW 12
44651: PLUS
44652: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44653: LD_VAR 0 6
44657: PPUSH
44658: LD_VAR 0 7
44662: PPUSH
44663: CALL_OW 488
44667: NOT
44668: IFFALSE 44690
// begin _x := x ;
44670: LD_ADDR_VAR 0 6
44674: PUSH
44675: LD_VAR 0 4
44679: ST_TO_ADDR
// _y := y ;
44680: LD_ADDR_VAR 0 7
44684: PUSH
44685: LD_VAR 0 5
44689: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
44690: LD_ADDR_VAR 0 3
44694: PUSH
44695: LD_INT 1
44697: PPUSH
44698: LD_VAR 0 14
44702: PPUSH
44703: CALL_OW 12
44707: ST_TO_ADDR
// case i of 1 :
44708: LD_VAR 0 3
44712: PUSH
44713: LD_INT 1
44715: DOUBLE
44716: EQUAL
44717: IFTRUE 44721
44719: GO 44738
44721: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
44722: LD_VAR 0 1
44726: PPUSH
44727: LD_VAR 0 10
44731: PPUSH
44732: CALL_OW 115
44736: GO 44799
44738: LD_INT 2
44740: DOUBLE
44741: EQUAL
44742: IFTRUE 44746
44744: GO 44768
44746: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
44747: LD_VAR 0 1
44751: PPUSH
44752: LD_VAR 0 6
44756: PPUSH
44757: LD_VAR 0 7
44761: PPUSH
44762: CALL_OW 153
44766: GO 44799
44768: LD_INT 3
44770: DOUBLE
44771: EQUAL
44772: IFTRUE 44776
44774: GO 44798
44776: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
44777: LD_VAR 0 1
44781: PPUSH
44782: LD_VAR 0 6
44786: PPUSH
44787: LD_VAR 0 7
44791: PPUSH
44792: CALL_OW 154
44796: GO 44799
44798: POP
// end ;
44799: LD_VAR 0 2
44803: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
44804: LD_INT 0
44806: PPUSH
44807: PPUSH
44808: PPUSH
44809: PPUSH
44810: PPUSH
44811: PPUSH
// if not unit or not building then
44812: LD_VAR 0 1
44816: NOT
44817: PUSH
44818: LD_VAR 0 2
44822: NOT
44823: OR
44824: IFFALSE 44828
// exit ;
44826: GO 44986
// x := GetX ( building ) ;
44828: LD_ADDR_VAR 0 5
44832: PUSH
44833: LD_VAR 0 2
44837: PPUSH
44838: CALL_OW 250
44842: ST_TO_ADDR
// y := GetY ( building ) ;
44843: LD_ADDR_VAR 0 6
44847: PUSH
44848: LD_VAR 0 2
44852: PPUSH
44853: CALL_OW 251
44857: ST_TO_ADDR
// for i = 0 to 5 do
44858: LD_ADDR_VAR 0 4
44862: PUSH
44863: DOUBLE
44864: LD_INT 0
44866: DEC
44867: ST_TO_ADDR
44868: LD_INT 5
44870: PUSH
44871: FOR_TO
44872: IFFALSE 44984
// begin _x := ShiftX ( x , i , 3 ) ;
44874: LD_ADDR_VAR 0 7
44878: PUSH
44879: LD_VAR 0 5
44883: PPUSH
44884: LD_VAR 0 4
44888: PPUSH
44889: LD_INT 3
44891: PPUSH
44892: CALL_OW 272
44896: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
44897: LD_ADDR_VAR 0 8
44901: PUSH
44902: LD_VAR 0 6
44906: PPUSH
44907: LD_VAR 0 4
44911: PPUSH
44912: LD_INT 3
44914: PPUSH
44915: CALL_OW 273
44919: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44920: LD_VAR 0 7
44924: PPUSH
44925: LD_VAR 0 8
44929: PPUSH
44930: CALL_OW 488
44934: NOT
44935: IFFALSE 44939
// continue ;
44937: GO 44871
// if HexInfo ( _x , _y ) = 0 then
44939: LD_VAR 0 7
44943: PPUSH
44944: LD_VAR 0 8
44948: PPUSH
44949: CALL_OW 428
44953: PUSH
44954: LD_INT 0
44956: EQUAL
44957: IFFALSE 44982
// begin ComMoveXY ( unit , _x , _y ) ;
44959: LD_VAR 0 1
44963: PPUSH
44964: LD_VAR 0 7
44968: PPUSH
44969: LD_VAR 0 8
44973: PPUSH
44974: CALL_OW 111
// exit ;
44978: POP
44979: POP
44980: GO 44986
// end ; end ;
44982: GO 44871
44984: POP
44985: POP
// end ;
44986: LD_VAR 0 3
44990: RET
// export function ScanBase ( side , base_area ) ; begin
44991: LD_INT 0
44993: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44994: LD_ADDR_VAR 0 3
44998: PUSH
44999: LD_VAR 0 2
45003: PPUSH
45004: LD_INT 81
45006: PUSH
45007: LD_VAR 0 1
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PPUSH
45016: CALL_OW 70
45020: ST_TO_ADDR
// end ;
45021: LD_VAR 0 3
45025: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
45026: LD_INT 0
45028: PPUSH
45029: PPUSH
45030: PPUSH
45031: PPUSH
// result := false ;
45032: LD_ADDR_VAR 0 2
45036: PUSH
45037: LD_INT 0
45039: ST_TO_ADDR
// side := GetSide ( unit ) ;
45040: LD_ADDR_VAR 0 3
45044: PUSH
45045: LD_VAR 0 1
45049: PPUSH
45050: CALL_OW 255
45054: ST_TO_ADDR
// nat := GetNation ( unit ) ;
45055: LD_ADDR_VAR 0 4
45059: PUSH
45060: LD_VAR 0 1
45064: PPUSH
45065: CALL_OW 248
45069: ST_TO_ADDR
// case nat of 1 :
45070: LD_VAR 0 4
45074: PUSH
45075: LD_INT 1
45077: DOUBLE
45078: EQUAL
45079: IFTRUE 45083
45081: GO 45094
45083: POP
// tech := tech_lassight ; 2 :
45084: LD_ADDR_VAR 0 5
45088: PUSH
45089: LD_INT 12
45091: ST_TO_ADDR
45092: GO 45133
45094: LD_INT 2
45096: DOUBLE
45097: EQUAL
45098: IFTRUE 45102
45100: GO 45113
45102: POP
// tech := tech_mortar ; 3 :
45103: LD_ADDR_VAR 0 5
45107: PUSH
45108: LD_INT 41
45110: ST_TO_ADDR
45111: GO 45133
45113: LD_INT 3
45115: DOUBLE
45116: EQUAL
45117: IFTRUE 45121
45119: GO 45132
45121: POP
// tech := tech_bazooka ; end ;
45122: LD_ADDR_VAR 0 5
45126: PUSH
45127: LD_INT 44
45129: ST_TO_ADDR
45130: GO 45133
45132: POP
// if Researched ( side , tech ) then
45133: LD_VAR 0 3
45137: PPUSH
45138: LD_VAR 0 5
45142: PPUSH
45143: CALL_OW 325
45147: IFFALSE 45174
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
45149: LD_ADDR_VAR 0 2
45153: PUSH
45154: LD_INT 5
45156: PUSH
45157: LD_INT 8
45159: PUSH
45160: LD_INT 9
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: LIST
45167: PUSH
45168: LD_VAR 0 4
45172: ARRAY
45173: ST_TO_ADDR
// end ;
45174: LD_VAR 0 2
45178: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
45179: LD_INT 0
45181: PPUSH
45182: PPUSH
45183: PPUSH
// if not mines then
45184: LD_VAR 0 2
45188: NOT
45189: IFFALSE 45193
// exit ;
45191: GO 45337
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45193: LD_ADDR_VAR 0 5
45197: PUSH
45198: LD_INT 81
45200: PUSH
45201: LD_VAR 0 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 3
45212: PUSH
45213: LD_INT 21
45215: PUSH
45216: LD_INT 3
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PPUSH
45231: CALL_OW 69
45235: ST_TO_ADDR
// for i in mines do
45236: LD_ADDR_VAR 0 4
45240: PUSH
45241: LD_VAR 0 2
45245: PUSH
45246: FOR_IN
45247: IFFALSE 45335
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
45249: LD_VAR 0 4
45253: PUSH
45254: LD_INT 1
45256: ARRAY
45257: PPUSH
45258: LD_VAR 0 4
45262: PUSH
45263: LD_INT 2
45265: ARRAY
45266: PPUSH
45267: CALL_OW 458
45271: NOT
45272: IFFALSE 45276
// continue ;
45274: GO 45246
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
45276: LD_VAR 0 4
45280: PUSH
45281: LD_INT 1
45283: ARRAY
45284: PPUSH
45285: LD_VAR 0 4
45289: PUSH
45290: LD_INT 2
45292: ARRAY
45293: PPUSH
45294: CALL_OW 428
45298: PUSH
45299: LD_VAR 0 5
45303: IN
45304: IFFALSE 45333
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
45306: LD_VAR 0 4
45310: PUSH
45311: LD_INT 1
45313: ARRAY
45314: PPUSH
45315: LD_VAR 0 4
45319: PUSH
45320: LD_INT 2
45322: ARRAY
45323: PPUSH
45324: LD_VAR 0 1
45328: PPUSH
45329: CALL_OW 456
// end ;
45333: GO 45246
45335: POP
45336: POP
// end ;
45337: LD_VAR 0 3
45341: RET
// export function Count ( array ) ; begin
45342: LD_INT 0
45344: PPUSH
// result := array + 0 ;
45345: LD_ADDR_VAR 0 2
45349: PUSH
45350: LD_VAR 0 1
45354: PUSH
45355: LD_INT 0
45357: PLUS
45358: ST_TO_ADDR
// end ;
45359: LD_VAR 0 2
45363: RET
// export function IsEmpty ( building ) ; begin
45364: LD_INT 0
45366: PPUSH
// if not building then
45367: LD_VAR 0 1
45371: NOT
45372: IFFALSE 45376
// exit ;
45374: GO 45419
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
45376: LD_ADDR_VAR 0 2
45380: PUSH
45381: LD_VAR 0 1
45385: PUSH
45386: LD_INT 22
45388: PUSH
45389: LD_VAR 0 1
45393: PPUSH
45394: CALL_OW 255
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 58
45405: PUSH
45406: EMPTY
45407: LIST
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PPUSH
45413: CALL_OW 69
45417: IN
45418: ST_TO_ADDR
// end ;
45419: LD_VAR 0 2
45423: RET
// export function IsNotFull ( building ) ; var places ; begin
45424: LD_INT 0
45426: PPUSH
45427: PPUSH
// if not building then
45428: LD_VAR 0 1
45432: NOT
45433: IFFALSE 45437
// exit ;
45435: GO 45465
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
45437: LD_ADDR_VAR 0 2
45441: PUSH
45442: LD_VAR 0 1
45446: PPUSH
45447: LD_INT 3
45449: PUSH
45450: LD_INT 62
45452: PUSH
45453: EMPTY
45454: LIST
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PPUSH
45460: CALL_OW 72
45464: ST_TO_ADDR
// end ;
45465: LD_VAR 0 2
45469: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
45470: LD_INT 0
45472: PPUSH
45473: PPUSH
45474: PPUSH
45475: PPUSH
// tmp := [ ] ;
45476: LD_ADDR_VAR 0 3
45480: PUSH
45481: EMPTY
45482: ST_TO_ADDR
// list := [ ] ;
45483: LD_ADDR_VAR 0 5
45487: PUSH
45488: EMPTY
45489: ST_TO_ADDR
// for i = 16 to 25 do
45490: LD_ADDR_VAR 0 4
45494: PUSH
45495: DOUBLE
45496: LD_INT 16
45498: DEC
45499: ST_TO_ADDR
45500: LD_INT 25
45502: PUSH
45503: FOR_TO
45504: IFFALSE 45577
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
45506: LD_ADDR_VAR 0 3
45510: PUSH
45511: LD_VAR 0 3
45515: PUSH
45516: LD_INT 22
45518: PUSH
45519: LD_VAR 0 1
45523: PPUSH
45524: CALL_OW 255
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 91
45535: PUSH
45536: LD_VAR 0 1
45540: PUSH
45541: LD_INT 6
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 30
45551: PUSH
45552: LD_VAR 0 4
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: LIST
45565: PUSH
45566: EMPTY
45567: LIST
45568: PPUSH
45569: CALL_OW 69
45573: ADD
45574: ST_TO_ADDR
45575: GO 45503
45577: POP
45578: POP
// for i = 1 to tmp do
45579: LD_ADDR_VAR 0 4
45583: PUSH
45584: DOUBLE
45585: LD_INT 1
45587: DEC
45588: ST_TO_ADDR
45589: LD_VAR 0 3
45593: PUSH
45594: FOR_TO
45595: IFFALSE 45683
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
45597: LD_ADDR_VAR 0 5
45601: PUSH
45602: LD_VAR 0 5
45606: PUSH
45607: LD_VAR 0 3
45611: PUSH
45612: LD_VAR 0 4
45616: ARRAY
45617: PPUSH
45618: CALL_OW 266
45622: PUSH
45623: LD_VAR 0 3
45627: PUSH
45628: LD_VAR 0 4
45632: ARRAY
45633: PPUSH
45634: CALL_OW 250
45638: PUSH
45639: LD_VAR 0 3
45643: PUSH
45644: LD_VAR 0 4
45648: ARRAY
45649: PPUSH
45650: CALL_OW 251
45654: PUSH
45655: LD_VAR 0 3
45659: PUSH
45660: LD_VAR 0 4
45664: ARRAY
45665: PPUSH
45666: CALL_OW 254
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: PUSH
45677: EMPTY
45678: LIST
45679: ADD
45680: ST_TO_ADDR
45681: GO 45594
45683: POP
45684: POP
// result := list ;
45685: LD_ADDR_VAR 0 2
45689: PUSH
45690: LD_VAR 0 5
45694: ST_TO_ADDR
// end ;
45695: LD_VAR 0 2
45699: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
45700: LD_INT 0
45702: PPUSH
45703: PPUSH
45704: PPUSH
45705: PPUSH
45706: PPUSH
45707: PPUSH
45708: PPUSH
// if not factory then
45709: LD_VAR 0 1
45713: NOT
45714: IFFALSE 45718
// exit ;
45716: GO 46311
// if control = control_apeman then
45718: LD_VAR 0 4
45722: PUSH
45723: LD_INT 5
45725: EQUAL
45726: IFFALSE 45835
// begin tmp := UnitsInside ( factory ) ;
45728: LD_ADDR_VAR 0 8
45732: PUSH
45733: LD_VAR 0 1
45737: PPUSH
45738: CALL_OW 313
45742: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
45743: LD_VAR 0 8
45747: PPUSH
45748: LD_INT 25
45750: PUSH
45751: LD_INT 12
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PPUSH
45758: CALL_OW 72
45762: NOT
45763: IFFALSE 45773
// control := control_manual ;
45765: LD_ADDR_VAR 0 4
45769: PUSH
45770: LD_INT 1
45772: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
45773: LD_ADDR_VAR 0 8
45777: PUSH
45778: LD_VAR 0 1
45782: PPUSH
45783: CALL 45470 0 1
45787: ST_TO_ADDR
// if tmp then
45788: LD_VAR 0 8
45792: IFFALSE 45835
// begin for i in tmp do
45794: LD_ADDR_VAR 0 7
45798: PUSH
45799: LD_VAR 0 8
45803: PUSH
45804: FOR_IN
45805: IFFALSE 45833
// if i [ 1 ] = b_ext_radio then
45807: LD_VAR 0 7
45811: PUSH
45812: LD_INT 1
45814: ARRAY
45815: PUSH
45816: LD_INT 22
45818: EQUAL
45819: IFFALSE 45831
// begin control := control_remote ;
45821: LD_ADDR_VAR 0 4
45825: PUSH
45826: LD_INT 2
45828: ST_TO_ADDR
// break ;
45829: GO 45833
// end ;
45831: GO 45804
45833: POP
45834: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45835: LD_VAR 0 1
45839: PPUSH
45840: LD_VAR 0 2
45844: PPUSH
45845: LD_VAR 0 3
45849: PPUSH
45850: LD_VAR 0 4
45854: PPUSH
45855: LD_VAR 0 5
45859: PPUSH
45860: CALL_OW 448
45864: IFFALSE 45899
// begin result := [ chassis , engine , control , weapon ] ;
45866: LD_ADDR_VAR 0 6
45870: PUSH
45871: LD_VAR 0 2
45875: PUSH
45876: LD_VAR 0 3
45880: PUSH
45881: LD_VAR 0 4
45885: PUSH
45886: LD_VAR 0 5
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: ST_TO_ADDR
// exit ;
45897: GO 46311
// end ; _chassis := AvailableChassisList ( factory ) ;
45899: LD_ADDR_VAR 0 9
45903: PUSH
45904: LD_VAR 0 1
45908: PPUSH
45909: CALL_OW 475
45913: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
45914: LD_ADDR_VAR 0 11
45918: PUSH
45919: LD_VAR 0 1
45923: PPUSH
45924: CALL_OW 476
45928: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
45929: LD_ADDR_VAR 0 12
45933: PUSH
45934: LD_VAR 0 1
45938: PPUSH
45939: CALL_OW 477
45943: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45944: LD_ADDR_VAR 0 10
45948: PUSH
45949: LD_VAR 0 1
45953: PPUSH
45954: CALL_OW 478
45958: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
45959: LD_VAR 0 9
45963: NOT
45964: PUSH
45965: LD_VAR 0 11
45969: NOT
45970: OR
45971: PUSH
45972: LD_VAR 0 12
45976: NOT
45977: OR
45978: PUSH
45979: LD_VAR 0 10
45983: NOT
45984: OR
45985: IFFALSE 46020
// begin result := [ chassis , engine , control , weapon ] ;
45987: LD_ADDR_VAR 0 6
45991: PUSH
45992: LD_VAR 0 2
45996: PUSH
45997: LD_VAR 0 3
46001: PUSH
46002: LD_VAR 0 4
46006: PUSH
46007: LD_VAR 0 5
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: ST_TO_ADDR
// exit ;
46018: GO 46311
// end ; if not chassis in _chassis then
46020: LD_VAR 0 2
46024: PUSH
46025: LD_VAR 0 9
46029: IN
46030: NOT
46031: IFFALSE 46057
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
46033: LD_ADDR_VAR 0 2
46037: PUSH
46038: LD_VAR 0 9
46042: PUSH
46043: LD_INT 1
46045: PPUSH
46046: LD_VAR 0 9
46050: PPUSH
46051: CALL_OW 12
46055: ARRAY
46056: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
46057: LD_VAR 0 2
46061: PPUSH
46062: LD_VAR 0 3
46066: PPUSH
46067: CALL 46316 0 2
46071: NOT
46072: IFFALSE 46131
// repeat engine := _engine [ 1 ] ;
46074: LD_ADDR_VAR 0 3
46078: PUSH
46079: LD_VAR 0 11
46083: PUSH
46084: LD_INT 1
46086: ARRAY
46087: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
46088: LD_ADDR_VAR 0 11
46092: PUSH
46093: LD_VAR 0 11
46097: PPUSH
46098: LD_INT 1
46100: PPUSH
46101: CALL_OW 3
46105: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
46106: LD_VAR 0 2
46110: PPUSH
46111: LD_VAR 0 3
46115: PPUSH
46116: CALL 46316 0 2
46120: PUSH
46121: LD_VAR 0 11
46125: PUSH
46126: EMPTY
46127: EQUAL
46128: OR
46129: IFFALSE 46074
// if not control in _control then
46131: LD_VAR 0 4
46135: PUSH
46136: LD_VAR 0 12
46140: IN
46141: NOT
46142: IFFALSE 46168
// control := _control [ rand ( 1 , _control ) ] ;
46144: LD_ADDR_VAR 0 4
46148: PUSH
46149: LD_VAR 0 12
46153: PUSH
46154: LD_INT 1
46156: PPUSH
46157: LD_VAR 0 12
46161: PPUSH
46162: CALL_OW 12
46166: ARRAY
46167: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
46168: LD_VAR 0 2
46172: PPUSH
46173: LD_VAR 0 5
46177: PPUSH
46178: CALL 46536 0 2
46182: NOT
46183: IFFALSE 46242
// repeat weapon := _weapon [ 1 ] ;
46185: LD_ADDR_VAR 0 5
46189: PUSH
46190: LD_VAR 0 10
46194: PUSH
46195: LD_INT 1
46197: ARRAY
46198: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
46199: LD_ADDR_VAR 0 10
46203: PUSH
46204: LD_VAR 0 10
46208: PPUSH
46209: LD_INT 1
46211: PPUSH
46212: CALL_OW 3
46216: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
46217: LD_VAR 0 2
46221: PPUSH
46222: LD_VAR 0 5
46226: PPUSH
46227: CALL 46536 0 2
46231: PUSH
46232: LD_VAR 0 10
46236: PUSH
46237: EMPTY
46238: EQUAL
46239: OR
46240: IFFALSE 46185
// result := [ ] ;
46242: LD_ADDR_VAR 0 6
46246: PUSH
46247: EMPTY
46248: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46249: LD_VAR 0 1
46253: PPUSH
46254: LD_VAR 0 2
46258: PPUSH
46259: LD_VAR 0 3
46263: PPUSH
46264: LD_VAR 0 4
46268: PPUSH
46269: LD_VAR 0 5
46273: PPUSH
46274: CALL_OW 448
46278: IFFALSE 46311
// result := [ chassis , engine , control , weapon ] ;
46280: LD_ADDR_VAR 0 6
46284: PUSH
46285: LD_VAR 0 2
46289: PUSH
46290: LD_VAR 0 3
46294: PUSH
46295: LD_VAR 0 4
46299: PUSH
46300: LD_VAR 0 5
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: ST_TO_ADDR
// end ;
46311: LD_VAR 0 6
46315: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
46316: LD_INT 0
46318: PPUSH
// if not chassis or not engine then
46319: LD_VAR 0 1
46323: NOT
46324: PUSH
46325: LD_VAR 0 2
46329: NOT
46330: OR
46331: IFFALSE 46335
// exit ;
46333: GO 46531
// case engine of engine_solar :
46335: LD_VAR 0 2
46339: PUSH
46340: LD_INT 2
46342: DOUBLE
46343: EQUAL
46344: IFTRUE 46348
46346: GO 46386
46348: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
46349: LD_ADDR_VAR 0 3
46353: PUSH
46354: LD_INT 11
46356: PUSH
46357: LD_INT 12
46359: PUSH
46360: LD_INT 13
46362: PUSH
46363: LD_INT 14
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: LD_INT 2
46371: PUSH
46372: LD_INT 3
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: ST_TO_ADDR
46384: GO 46515
46386: LD_INT 1
46388: DOUBLE
46389: EQUAL
46390: IFTRUE 46394
46392: GO 46456
46394: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
46395: LD_ADDR_VAR 0 3
46399: PUSH
46400: LD_INT 11
46402: PUSH
46403: LD_INT 12
46405: PUSH
46406: LD_INT 13
46408: PUSH
46409: LD_INT 14
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 2
46417: PUSH
46418: LD_INT 3
46420: PUSH
46421: LD_INT 4
46423: PUSH
46424: LD_INT 5
46426: PUSH
46427: LD_INT 21
46429: PUSH
46430: LD_INT 23
46432: PUSH
46433: LD_INT 22
46435: PUSH
46436: LD_INT 24
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: ST_TO_ADDR
46454: GO 46515
46456: LD_INT 3
46458: DOUBLE
46459: EQUAL
46460: IFTRUE 46464
46462: GO 46514
46464: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46465: LD_ADDR_VAR 0 3
46469: PUSH
46470: LD_INT 13
46472: PUSH
46473: LD_INT 14
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: LD_INT 3
46481: PUSH
46482: LD_INT 4
46484: PUSH
46485: LD_INT 5
46487: PUSH
46488: LD_INT 21
46490: PUSH
46491: LD_INT 22
46493: PUSH
46494: LD_INT 23
46496: PUSH
46497: LD_INT 24
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: ST_TO_ADDR
46512: GO 46515
46514: POP
// result := ( chassis in result ) ;
46515: LD_ADDR_VAR 0 3
46519: PUSH
46520: LD_VAR 0 1
46524: PUSH
46525: LD_VAR 0 3
46529: IN
46530: ST_TO_ADDR
// end ;
46531: LD_VAR 0 3
46535: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
46536: LD_INT 0
46538: PPUSH
// if not chassis or not weapon then
46539: LD_VAR 0 1
46543: NOT
46544: PUSH
46545: LD_VAR 0 2
46549: NOT
46550: OR
46551: IFFALSE 46555
// exit ;
46553: GO 47615
// case weapon of us_machine_gun :
46555: LD_VAR 0 2
46559: PUSH
46560: LD_INT 2
46562: DOUBLE
46563: EQUAL
46564: IFTRUE 46568
46566: GO 46598
46568: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
46569: LD_ADDR_VAR 0 3
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 3
46582: PUSH
46583: LD_INT 4
46585: PUSH
46586: LD_INT 5
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: ST_TO_ADDR
46596: GO 47599
46598: LD_INT 3
46600: DOUBLE
46601: EQUAL
46602: IFTRUE 46606
46604: GO 46636
46606: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
46607: LD_ADDR_VAR 0 3
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: LD_INT 3
46620: PUSH
46621: LD_INT 4
46623: PUSH
46624: LD_INT 5
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: ST_TO_ADDR
46634: GO 47599
46636: LD_INT 11
46638: DOUBLE
46639: EQUAL
46640: IFTRUE 46644
46642: GO 46674
46644: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
46645: LD_ADDR_VAR 0 3
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: LD_INT 3
46658: PUSH
46659: LD_INT 4
46661: PUSH
46662: LD_INT 5
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: ST_TO_ADDR
46672: GO 47599
46674: LD_INT 4
46676: DOUBLE
46677: EQUAL
46678: IFTRUE 46682
46680: GO 46708
46682: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
46683: LD_ADDR_VAR 0 3
46687: PUSH
46688: LD_INT 2
46690: PUSH
46691: LD_INT 3
46693: PUSH
46694: LD_INT 4
46696: PUSH
46697: LD_INT 5
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: ST_TO_ADDR
46706: GO 47599
46708: LD_INT 5
46710: DOUBLE
46711: EQUAL
46712: IFTRUE 46716
46714: GO 46742
46716: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
46717: LD_ADDR_VAR 0 3
46721: PUSH
46722: LD_INT 2
46724: PUSH
46725: LD_INT 3
46727: PUSH
46728: LD_INT 4
46730: PUSH
46731: LD_INT 5
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: ST_TO_ADDR
46740: GO 47599
46742: LD_INT 9
46744: DOUBLE
46745: EQUAL
46746: IFTRUE 46750
46748: GO 46776
46750: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
46751: LD_ADDR_VAR 0 3
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: LD_INT 3
46761: PUSH
46762: LD_INT 4
46764: PUSH
46765: LD_INT 5
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: ST_TO_ADDR
46774: GO 47599
46776: LD_INT 7
46778: DOUBLE
46779: EQUAL
46780: IFTRUE 46784
46782: GO 46810
46784: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
46785: LD_ADDR_VAR 0 3
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: LD_INT 3
46795: PUSH
46796: LD_INT 4
46798: PUSH
46799: LD_INT 5
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: ST_TO_ADDR
46808: GO 47599
46810: LD_INT 12
46812: DOUBLE
46813: EQUAL
46814: IFTRUE 46818
46816: GO 46844
46818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
46819: LD_ADDR_VAR 0 3
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: LD_INT 3
46829: PUSH
46830: LD_INT 4
46832: PUSH
46833: LD_INT 5
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: ST_TO_ADDR
46842: GO 47599
46844: LD_INT 13
46846: DOUBLE
46847: EQUAL
46848: IFTRUE 46852
46850: GO 46878
46852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
46853: LD_ADDR_VAR 0 3
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: LD_INT 3
46863: PUSH
46864: LD_INT 4
46866: PUSH
46867: LD_INT 5
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: ST_TO_ADDR
46876: GO 47599
46878: LD_INT 14
46880: DOUBLE
46881: EQUAL
46882: IFTRUE 46886
46884: GO 46904
46886: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
46887: LD_ADDR_VAR 0 3
46891: PUSH
46892: LD_INT 4
46894: PUSH
46895: LD_INT 5
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: ST_TO_ADDR
46902: GO 47599
46904: LD_INT 6
46906: DOUBLE
46907: EQUAL
46908: IFTRUE 46912
46910: GO 46930
46912: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
46913: LD_ADDR_VAR 0 3
46917: PUSH
46918: LD_INT 4
46920: PUSH
46921: LD_INT 5
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: ST_TO_ADDR
46928: GO 47599
46930: LD_INT 10
46932: DOUBLE
46933: EQUAL
46934: IFTRUE 46938
46936: GO 46956
46938: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
46939: LD_ADDR_VAR 0 3
46943: PUSH
46944: LD_INT 4
46946: PUSH
46947: LD_INT 5
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: ST_TO_ADDR
46954: GO 47599
46956: LD_INT 22
46958: DOUBLE
46959: EQUAL
46960: IFTRUE 46964
46962: GO 46990
46964: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46965: LD_ADDR_VAR 0 3
46969: PUSH
46970: LD_INT 11
46972: PUSH
46973: LD_INT 12
46975: PUSH
46976: LD_INT 13
46978: PUSH
46979: LD_INT 14
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: ST_TO_ADDR
46988: GO 47599
46990: LD_INT 23
46992: DOUBLE
46993: EQUAL
46994: IFTRUE 46998
46996: GO 47024
46998: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46999: LD_ADDR_VAR 0 3
47003: PUSH
47004: LD_INT 11
47006: PUSH
47007: LD_INT 12
47009: PUSH
47010: LD_INT 13
47012: PUSH
47013: LD_INT 14
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: ST_TO_ADDR
47022: GO 47599
47024: LD_INT 24
47026: DOUBLE
47027: EQUAL
47028: IFTRUE 47032
47030: GO 47058
47032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
47033: LD_ADDR_VAR 0 3
47037: PUSH
47038: LD_INT 11
47040: PUSH
47041: LD_INT 12
47043: PUSH
47044: LD_INT 13
47046: PUSH
47047: LD_INT 14
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: ST_TO_ADDR
47056: GO 47599
47058: LD_INT 30
47060: DOUBLE
47061: EQUAL
47062: IFTRUE 47066
47064: GO 47092
47066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
47067: LD_ADDR_VAR 0 3
47071: PUSH
47072: LD_INT 11
47074: PUSH
47075: LD_INT 12
47077: PUSH
47078: LD_INT 13
47080: PUSH
47081: LD_INT 14
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: ST_TO_ADDR
47090: GO 47599
47092: LD_INT 25
47094: DOUBLE
47095: EQUAL
47096: IFTRUE 47100
47098: GO 47118
47100: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
47101: LD_ADDR_VAR 0 3
47105: PUSH
47106: LD_INT 13
47108: PUSH
47109: LD_INT 14
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: ST_TO_ADDR
47116: GO 47599
47118: LD_INT 27
47120: DOUBLE
47121: EQUAL
47122: IFTRUE 47126
47124: GO 47144
47126: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
47127: LD_ADDR_VAR 0 3
47131: PUSH
47132: LD_INT 13
47134: PUSH
47135: LD_INT 14
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: ST_TO_ADDR
47142: GO 47599
47144: LD_INT 92
47146: DOUBLE
47147: EQUAL
47148: IFTRUE 47152
47150: GO 47178
47152: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
47153: LD_ADDR_VAR 0 3
47157: PUSH
47158: LD_INT 11
47160: PUSH
47161: LD_INT 12
47163: PUSH
47164: LD_INT 13
47166: PUSH
47167: LD_INT 14
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: ST_TO_ADDR
47176: GO 47599
47178: LD_INT 28
47180: DOUBLE
47181: EQUAL
47182: IFTRUE 47186
47184: GO 47204
47186: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
47187: LD_ADDR_VAR 0 3
47191: PUSH
47192: LD_INT 13
47194: PUSH
47195: LD_INT 14
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: ST_TO_ADDR
47202: GO 47599
47204: LD_INT 29
47206: DOUBLE
47207: EQUAL
47208: IFTRUE 47212
47210: GO 47230
47212: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
47213: LD_ADDR_VAR 0 3
47217: PUSH
47218: LD_INT 13
47220: PUSH
47221: LD_INT 14
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: ST_TO_ADDR
47228: GO 47599
47230: LD_INT 31
47232: DOUBLE
47233: EQUAL
47234: IFTRUE 47238
47236: GO 47256
47238: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
47239: LD_ADDR_VAR 0 3
47243: PUSH
47244: LD_INT 13
47246: PUSH
47247: LD_INT 14
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: ST_TO_ADDR
47254: GO 47599
47256: LD_INT 26
47258: DOUBLE
47259: EQUAL
47260: IFTRUE 47264
47262: GO 47282
47264: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
47265: LD_ADDR_VAR 0 3
47269: PUSH
47270: LD_INT 13
47272: PUSH
47273: LD_INT 14
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: ST_TO_ADDR
47280: GO 47599
47282: LD_INT 42
47284: DOUBLE
47285: EQUAL
47286: IFTRUE 47290
47288: GO 47316
47290: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
47291: LD_ADDR_VAR 0 3
47295: PUSH
47296: LD_INT 21
47298: PUSH
47299: LD_INT 22
47301: PUSH
47302: LD_INT 23
47304: PUSH
47305: LD_INT 24
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: ST_TO_ADDR
47314: GO 47599
47316: LD_INT 43
47318: DOUBLE
47319: EQUAL
47320: IFTRUE 47324
47322: GO 47350
47324: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
47325: LD_ADDR_VAR 0 3
47329: PUSH
47330: LD_INT 21
47332: PUSH
47333: LD_INT 22
47335: PUSH
47336: LD_INT 23
47338: PUSH
47339: LD_INT 24
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: ST_TO_ADDR
47348: GO 47599
47350: LD_INT 44
47352: DOUBLE
47353: EQUAL
47354: IFTRUE 47358
47356: GO 47384
47358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
47359: LD_ADDR_VAR 0 3
47363: PUSH
47364: LD_INT 21
47366: PUSH
47367: LD_INT 22
47369: PUSH
47370: LD_INT 23
47372: PUSH
47373: LD_INT 24
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: ST_TO_ADDR
47382: GO 47599
47384: LD_INT 45
47386: DOUBLE
47387: EQUAL
47388: IFTRUE 47392
47390: GO 47418
47392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
47393: LD_ADDR_VAR 0 3
47397: PUSH
47398: LD_INT 21
47400: PUSH
47401: LD_INT 22
47403: PUSH
47404: LD_INT 23
47406: PUSH
47407: LD_INT 24
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: ST_TO_ADDR
47416: GO 47599
47418: LD_INT 49
47420: DOUBLE
47421: EQUAL
47422: IFTRUE 47426
47424: GO 47452
47426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
47427: LD_ADDR_VAR 0 3
47431: PUSH
47432: LD_INT 21
47434: PUSH
47435: LD_INT 22
47437: PUSH
47438: LD_INT 23
47440: PUSH
47441: LD_INT 24
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: ST_TO_ADDR
47450: GO 47599
47452: LD_INT 51
47454: DOUBLE
47455: EQUAL
47456: IFTRUE 47460
47458: GO 47486
47460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
47461: LD_ADDR_VAR 0 3
47465: PUSH
47466: LD_INT 21
47468: PUSH
47469: LD_INT 22
47471: PUSH
47472: LD_INT 23
47474: PUSH
47475: LD_INT 24
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: ST_TO_ADDR
47484: GO 47599
47486: LD_INT 52
47488: DOUBLE
47489: EQUAL
47490: IFTRUE 47494
47492: GO 47520
47494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
47495: LD_ADDR_VAR 0 3
47499: PUSH
47500: LD_INT 21
47502: PUSH
47503: LD_INT 22
47505: PUSH
47506: LD_INT 23
47508: PUSH
47509: LD_INT 24
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: ST_TO_ADDR
47518: GO 47599
47520: LD_INT 53
47522: DOUBLE
47523: EQUAL
47524: IFTRUE 47528
47526: GO 47546
47528: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
47529: LD_ADDR_VAR 0 3
47533: PUSH
47534: LD_INT 23
47536: PUSH
47537: LD_INT 24
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: ST_TO_ADDR
47544: GO 47599
47546: LD_INT 46
47548: DOUBLE
47549: EQUAL
47550: IFTRUE 47554
47552: GO 47572
47554: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
47555: LD_ADDR_VAR 0 3
47559: PUSH
47560: LD_INT 23
47562: PUSH
47563: LD_INT 24
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: ST_TO_ADDR
47570: GO 47599
47572: LD_INT 47
47574: DOUBLE
47575: EQUAL
47576: IFTRUE 47580
47578: GO 47598
47580: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47581: LD_ADDR_VAR 0 3
47585: PUSH
47586: LD_INT 23
47588: PUSH
47589: LD_INT 24
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: ST_TO_ADDR
47596: GO 47599
47598: POP
// result := ( chassis in result ) ;
47599: LD_ADDR_VAR 0 3
47603: PUSH
47604: LD_VAR 0 1
47608: PUSH
47609: LD_VAR 0 3
47613: IN
47614: ST_TO_ADDR
// end ;
47615: LD_VAR 0 3
47619: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
47620: LD_INT 0
47622: PPUSH
47623: PPUSH
47624: PPUSH
47625: PPUSH
47626: PPUSH
47627: PPUSH
47628: PPUSH
// result := array ;
47629: LD_ADDR_VAR 0 5
47633: PUSH
47634: LD_VAR 0 1
47638: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
47639: LD_VAR 0 1
47643: NOT
47644: PUSH
47645: LD_VAR 0 2
47649: NOT
47650: OR
47651: PUSH
47652: LD_VAR 0 3
47656: NOT
47657: OR
47658: PUSH
47659: LD_VAR 0 2
47663: PUSH
47664: LD_VAR 0 1
47668: GREATER
47669: OR
47670: PUSH
47671: LD_VAR 0 3
47675: PUSH
47676: LD_VAR 0 1
47680: GREATER
47681: OR
47682: IFFALSE 47686
// exit ;
47684: GO 47982
// if direction then
47686: LD_VAR 0 4
47690: IFFALSE 47754
// begin d := 1 ;
47692: LD_ADDR_VAR 0 9
47696: PUSH
47697: LD_INT 1
47699: ST_TO_ADDR
// if i_from > i_to then
47700: LD_VAR 0 2
47704: PUSH
47705: LD_VAR 0 3
47709: GREATER
47710: IFFALSE 47736
// length := ( array - i_from ) + i_to else
47712: LD_ADDR_VAR 0 11
47716: PUSH
47717: LD_VAR 0 1
47721: PUSH
47722: LD_VAR 0 2
47726: MINUS
47727: PUSH
47728: LD_VAR 0 3
47732: PLUS
47733: ST_TO_ADDR
47734: GO 47752
// length := i_to - i_from ;
47736: LD_ADDR_VAR 0 11
47740: PUSH
47741: LD_VAR 0 3
47745: PUSH
47746: LD_VAR 0 2
47750: MINUS
47751: ST_TO_ADDR
// end else
47752: GO 47815
// begin d := - 1 ;
47754: LD_ADDR_VAR 0 9
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: ST_TO_ADDR
// if i_from > i_to then
47763: LD_VAR 0 2
47767: PUSH
47768: LD_VAR 0 3
47772: GREATER
47773: IFFALSE 47793
// length := i_from - i_to else
47775: LD_ADDR_VAR 0 11
47779: PUSH
47780: LD_VAR 0 2
47784: PUSH
47785: LD_VAR 0 3
47789: MINUS
47790: ST_TO_ADDR
47791: GO 47815
// length := ( array - i_to ) + i_from ;
47793: LD_ADDR_VAR 0 11
47797: PUSH
47798: LD_VAR 0 1
47802: PUSH
47803: LD_VAR 0 3
47807: MINUS
47808: PUSH
47809: LD_VAR 0 2
47813: PLUS
47814: ST_TO_ADDR
// end ; if not length then
47815: LD_VAR 0 11
47819: NOT
47820: IFFALSE 47824
// exit ;
47822: GO 47982
// tmp := array ;
47824: LD_ADDR_VAR 0 10
47828: PUSH
47829: LD_VAR 0 1
47833: ST_TO_ADDR
// for i = 1 to length do
47834: LD_ADDR_VAR 0 6
47838: PUSH
47839: DOUBLE
47840: LD_INT 1
47842: DEC
47843: ST_TO_ADDR
47844: LD_VAR 0 11
47848: PUSH
47849: FOR_TO
47850: IFFALSE 47970
// begin for j = 1 to array do
47852: LD_ADDR_VAR 0 7
47856: PUSH
47857: DOUBLE
47858: LD_INT 1
47860: DEC
47861: ST_TO_ADDR
47862: LD_VAR 0 1
47866: PUSH
47867: FOR_TO
47868: IFFALSE 47956
// begin k := j + d ;
47870: LD_ADDR_VAR 0 8
47874: PUSH
47875: LD_VAR 0 7
47879: PUSH
47880: LD_VAR 0 9
47884: PLUS
47885: ST_TO_ADDR
// if k > array then
47886: LD_VAR 0 8
47890: PUSH
47891: LD_VAR 0 1
47895: GREATER
47896: IFFALSE 47906
// k := 1 ;
47898: LD_ADDR_VAR 0 8
47902: PUSH
47903: LD_INT 1
47905: ST_TO_ADDR
// if not k then
47906: LD_VAR 0 8
47910: NOT
47911: IFFALSE 47923
// k := array ;
47913: LD_ADDR_VAR 0 8
47917: PUSH
47918: LD_VAR 0 1
47922: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
47923: LD_ADDR_VAR 0 10
47927: PUSH
47928: LD_VAR 0 10
47932: PPUSH
47933: LD_VAR 0 8
47937: PPUSH
47938: LD_VAR 0 1
47942: PUSH
47943: LD_VAR 0 7
47947: ARRAY
47948: PPUSH
47949: CALL_OW 1
47953: ST_TO_ADDR
// end ;
47954: GO 47867
47956: POP
47957: POP
// array := tmp ;
47958: LD_ADDR_VAR 0 1
47962: PUSH
47963: LD_VAR 0 10
47967: ST_TO_ADDR
// end ;
47968: GO 47849
47970: POP
47971: POP
// result := array ;
47972: LD_ADDR_VAR 0 5
47976: PUSH
47977: LD_VAR 0 1
47981: ST_TO_ADDR
// end ;
47982: LD_VAR 0 5
47986: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
47987: LD_INT 0
47989: PPUSH
47990: PPUSH
// result := 0 ;
47991: LD_ADDR_VAR 0 3
47995: PUSH
47996: LD_INT 0
47998: ST_TO_ADDR
// if not array or not value in array then
47999: LD_VAR 0 1
48003: NOT
48004: PUSH
48005: LD_VAR 0 2
48009: PUSH
48010: LD_VAR 0 1
48014: IN
48015: NOT
48016: OR
48017: IFFALSE 48021
// exit ;
48019: GO 48075
// for i = 1 to array do
48021: LD_ADDR_VAR 0 4
48025: PUSH
48026: DOUBLE
48027: LD_INT 1
48029: DEC
48030: ST_TO_ADDR
48031: LD_VAR 0 1
48035: PUSH
48036: FOR_TO
48037: IFFALSE 48073
// if value = array [ i ] then
48039: LD_VAR 0 2
48043: PUSH
48044: LD_VAR 0 1
48048: PUSH
48049: LD_VAR 0 4
48053: ARRAY
48054: EQUAL
48055: IFFALSE 48071
// begin result := i ;
48057: LD_ADDR_VAR 0 3
48061: PUSH
48062: LD_VAR 0 4
48066: ST_TO_ADDR
// exit ;
48067: POP
48068: POP
48069: GO 48075
// end ;
48071: GO 48036
48073: POP
48074: POP
// end ;
48075: LD_VAR 0 3
48079: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
48080: LD_INT 0
48082: PPUSH
// vc_chassis := chassis ;
48083: LD_ADDR_OWVAR 37
48087: PUSH
48088: LD_VAR 0 1
48092: ST_TO_ADDR
// vc_engine := engine ;
48093: LD_ADDR_OWVAR 39
48097: PUSH
48098: LD_VAR 0 2
48102: ST_TO_ADDR
// vc_control := control ;
48103: LD_ADDR_OWVAR 38
48107: PUSH
48108: LD_VAR 0 3
48112: ST_TO_ADDR
// vc_weapon := weapon ;
48113: LD_ADDR_OWVAR 40
48117: PUSH
48118: LD_VAR 0 4
48122: ST_TO_ADDR
// vc_fuel_battery := fuel ;
48123: LD_ADDR_OWVAR 41
48127: PUSH
48128: LD_VAR 0 5
48132: ST_TO_ADDR
// end ;
48133: LD_VAR 0 6
48137: RET
// export function WantPlant ( unit ) ; var task ; begin
48138: LD_INT 0
48140: PPUSH
48141: PPUSH
// result := false ;
48142: LD_ADDR_VAR 0 2
48146: PUSH
48147: LD_INT 0
48149: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
48150: LD_ADDR_VAR 0 3
48154: PUSH
48155: LD_VAR 0 1
48159: PPUSH
48160: CALL_OW 437
48164: ST_TO_ADDR
// if task then
48165: LD_VAR 0 3
48169: IFFALSE 48197
// if task [ 1 ] [ 1 ] = p then
48171: LD_VAR 0 3
48175: PUSH
48176: LD_INT 1
48178: ARRAY
48179: PUSH
48180: LD_INT 1
48182: ARRAY
48183: PUSH
48184: LD_STRING p
48186: EQUAL
48187: IFFALSE 48197
// result := true ;
48189: LD_ADDR_VAR 0 2
48193: PUSH
48194: LD_INT 1
48196: ST_TO_ADDR
// end ;
48197: LD_VAR 0 2
48201: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
48202: LD_INT 0
48204: PPUSH
48205: PPUSH
48206: PPUSH
48207: PPUSH
// if pos < 1 then
48208: LD_VAR 0 2
48212: PUSH
48213: LD_INT 1
48215: LESS
48216: IFFALSE 48220
// exit ;
48218: GO 48523
// if pos = 1 then
48220: LD_VAR 0 2
48224: PUSH
48225: LD_INT 1
48227: EQUAL
48228: IFFALSE 48261
// result := Replace ( arr , pos [ 1 ] , value ) else
48230: LD_ADDR_VAR 0 4
48234: PUSH
48235: LD_VAR 0 1
48239: PPUSH
48240: LD_VAR 0 2
48244: PUSH
48245: LD_INT 1
48247: ARRAY
48248: PPUSH
48249: LD_VAR 0 3
48253: PPUSH
48254: CALL_OW 1
48258: ST_TO_ADDR
48259: GO 48523
// begin tmp := arr ;
48261: LD_ADDR_VAR 0 6
48265: PUSH
48266: LD_VAR 0 1
48270: ST_TO_ADDR
// s_arr := [ tmp ] ;
48271: LD_ADDR_VAR 0 7
48275: PUSH
48276: LD_VAR 0 6
48280: PUSH
48281: EMPTY
48282: LIST
48283: ST_TO_ADDR
// for i = 1 to pos - 1 do
48284: LD_ADDR_VAR 0 5
48288: PUSH
48289: DOUBLE
48290: LD_INT 1
48292: DEC
48293: ST_TO_ADDR
48294: LD_VAR 0 2
48298: PUSH
48299: LD_INT 1
48301: MINUS
48302: PUSH
48303: FOR_TO
48304: IFFALSE 48349
// begin tmp := tmp [ pos [ i ] ] ;
48306: LD_ADDR_VAR 0 6
48310: PUSH
48311: LD_VAR 0 6
48315: PUSH
48316: LD_VAR 0 2
48320: PUSH
48321: LD_VAR 0 5
48325: ARRAY
48326: ARRAY
48327: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
48328: LD_ADDR_VAR 0 7
48332: PUSH
48333: LD_VAR 0 7
48337: PUSH
48338: LD_VAR 0 6
48342: PUSH
48343: EMPTY
48344: LIST
48345: ADD
48346: ST_TO_ADDR
// end ;
48347: GO 48303
48349: POP
48350: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
48351: LD_ADDR_VAR 0 6
48355: PUSH
48356: LD_VAR 0 6
48360: PPUSH
48361: LD_VAR 0 2
48365: PUSH
48366: LD_VAR 0 2
48370: ARRAY
48371: PPUSH
48372: LD_VAR 0 3
48376: PPUSH
48377: CALL_OW 1
48381: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
48382: LD_ADDR_VAR 0 7
48386: PUSH
48387: LD_VAR 0 7
48391: PPUSH
48392: LD_VAR 0 7
48396: PPUSH
48397: LD_VAR 0 6
48401: PPUSH
48402: CALL_OW 1
48406: ST_TO_ADDR
// for i = s_arr downto 2 do
48407: LD_ADDR_VAR 0 5
48411: PUSH
48412: DOUBLE
48413: LD_VAR 0 7
48417: INC
48418: ST_TO_ADDR
48419: LD_INT 2
48421: PUSH
48422: FOR_DOWNTO
48423: IFFALSE 48507
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
48425: LD_ADDR_VAR 0 6
48429: PUSH
48430: LD_VAR 0 7
48434: PUSH
48435: LD_VAR 0 5
48439: PUSH
48440: LD_INT 1
48442: MINUS
48443: ARRAY
48444: PPUSH
48445: LD_VAR 0 2
48449: PUSH
48450: LD_VAR 0 5
48454: PUSH
48455: LD_INT 1
48457: MINUS
48458: ARRAY
48459: PPUSH
48460: LD_VAR 0 7
48464: PUSH
48465: LD_VAR 0 5
48469: ARRAY
48470: PPUSH
48471: CALL_OW 1
48475: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
48476: LD_ADDR_VAR 0 7
48480: PUSH
48481: LD_VAR 0 7
48485: PPUSH
48486: LD_VAR 0 5
48490: PUSH
48491: LD_INT 1
48493: MINUS
48494: PPUSH
48495: LD_VAR 0 6
48499: PPUSH
48500: CALL_OW 1
48504: ST_TO_ADDR
// end ;
48505: GO 48422
48507: POP
48508: POP
// result := s_arr [ 1 ] ;
48509: LD_ADDR_VAR 0 4
48513: PUSH
48514: LD_VAR 0 7
48518: PUSH
48519: LD_INT 1
48521: ARRAY
48522: ST_TO_ADDR
// end ; end ;
48523: LD_VAR 0 4
48527: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
48528: LD_INT 0
48530: PPUSH
48531: PPUSH
// if not list then
48532: LD_VAR 0 1
48536: NOT
48537: IFFALSE 48541
// exit ;
48539: GO 48632
// i := list [ pos1 ] ;
48541: LD_ADDR_VAR 0 5
48545: PUSH
48546: LD_VAR 0 1
48550: PUSH
48551: LD_VAR 0 2
48555: ARRAY
48556: ST_TO_ADDR
// if not i then
48557: LD_VAR 0 5
48561: NOT
48562: IFFALSE 48566
// exit ;
48564: GO 48632
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
48566: LD_ADDR_VAR 0 1
48570: PUSH
48571: LD_VAR 0 1
48575: PPUSH
48576: LD_VAR 0 2
48580: PPUSH
48581: LD_VAR 0 1
48585: PUSH
48586: LD_VAR 0 3
48590: ARRAY
48591: PPUSH
48592: CALL_OW 1
48596: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
48597: LD_ADDR_VAR 0 1
48601: PUSH
48602: LD_VAR 0 1
48606: PPUSH
48607: LD_VAR 0 3
48611: PPUSH
48612: LD_VAR 0 5
48616: PPUSH
48617: CALL_OW 1
48621: ST_TO_ADDR
// result := list ;
48622: LD_ADDR_VAR 0 4
48626: PUSH
48627: LD_VAR 0 1
48631: ST_TO_ADDR
// end ;
48632: LD_VAR 0 4
48636: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
48637: LD_INT 0
48639: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
48640: LD_ADDR_VAR 0 5
48644: PUSH
48645: LD_VAR 0 1
48649: PPUSH
48650: CALL_OW 250
48654: PPUSH
48655: LD_VAR 0 1
48659: PPUSH
48660: CALL_OW 251
48664: PPUSH
48665: LD_VAR 0 2
48669: PPUSH
48670: LD_VAR 0 3
48674: PPUSH
48675: LD_VAR 0 4
48679: PPUSH
48680: CALL 49058 0 5
48684: ST_TO_ADDR
// end ;
48685: LD_VAR 0 5
48689: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
48690: LD_INT 0
48692: PPUSH
48693: PPUSH
48694: PPUSH
48695: PPUSH
// if not list or not unit then
48696: LD_VAR 0 2
48700: NOT
48701: PUSH
48702: LD_VAR 0 1
48706: NOT
48707: OR
48708: IFFALSE 48712
// exit ;
48710: GO 49053
// result := [ ] ;
48712: LD_ADDR_VAR 0 5
48716: PUSH
48717: EMPTY
48718: ST_TO_ADDR
// for i in list do
48719: LD_ADDR_VAR 0 6
48723: PUSH
48724: LD_VAR 0 2
48728: PUSH
48729: FOR_IN
48730: IFFALSE 48948
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48732: LD_ADDR_VAR 0 8
48736: PUSH
48737: LD_VAR 0 1
48741: PPUSH
48742: LD_VAR 0 6
48746: PUSH
48747: LD_INT 1
48749: ARRAY
48750: PPUSH
48751: LD_VAR 0 6
48755: PUSH
48756: LD_INT 2
48758: ARRAY
48759: PPUSH
48760: CALL_OW 297
48764: ST_TO_ADDR
// if not Count ( result ) then
48765: LD_VAR 0 5
48769: PPUSH
48770: CALL 45342 0 1
48774: NOT
48775: IFFALSE 48808
// begin result := Join ( result , [ i , tmp ] ) ;
48777: LD_ADDR_VAR 0 5
48781: PUSH
48782: LD_VAR 0 5
48786: PPUSH
48787: LD_VAR 0 6
48791: PUSH
48792: LD_VAR 0 8
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PPUSH
48801: CALL 80951 0 2
48805: ST_TO_ADDR
// continue ;
48806: GO 48729
// end ; if result [ result ] [ 2 ] <= tmp then
48808: LD_VAR 0 5
48812: PUSH
48813: LD_VAR 0 5
48817: ARRAY
48818: PUSH
48819: LD_INT 2
48821: ARRAY
48822: PUSH
48823: LD_VAR 0 8
48827: LESSEQUAL
48828: IFFALSE 48861
// result := Join ( result , [ i , tmp ] ) else
48830: LD_ADDR_VAR 0 5
48834: PUSH
48835: LD_VAR 0 5
48839: PPUSH
48840: LD_VAR 0 6
48844: PUSH
48845: LD_VAR 0 8
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PPUSH
48854: CALL 80951 0 2
48858: ST_TO_ADDR
48859: GO 48946
// begin for j := 1 to Count ( result ) do
48861: LD_ADDR_VAR 0 7
48865: PUSH
48866: DOUBLE
48867: LD_INT 1
48869: DEC
48870: ST_TO_ADDR
48871: LD_VAR 0 5
48875: PPUSH
48876: CALL 45342 0 1
48880: PUSH
48881: FOR_TO
48882: IFFALSE 48944
// begin if tmp < result [ j ] [ 2 ] then
48884: LD_VAR 0 8
48888: PUSH
48889: LD_VAR 0 5
48893: PUSH
48894: LD_VAR 0 7
48898: ARRAY
48899: PUSH
48900: LD_INT 2
48902: ARRAY
48903: LESS
48904: IFFALSE 48942
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48906: LD_ADDR_VAR 0 5
48910: PUSH
48911: LD_VAR 0 5
48915: PPUSH
48916: LD_VAR 0 7
48920: PPUSH
48921: LD_VAR 0 6
48925: PUSH
48926: LD_VAR 0 8
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PPUSH
48935: CALL_OW 2
48939: ST_TO_ADDR
// break ;
48940: GO 48944
// end ; end ;
48942: GO 48881
48944: POP
48945: POP
// end ; end ;
48946: GO 48729
48948: POP
48949: POP
// if result and not asc then
48950: LD_VAR 0 5
48954: PUSH
48955: LD_VAR 0 3
48959: NOT
48960: AND
48961: IFFALSE 48978
// result := ReverseArray ( result ) ;
48963: LD_ADDR_VAR 0 5
48967: PUSH
48968: LD_VAR 0 5
48972: PPUSH
48973: CALL 76218 0 1
48977: ST_TO_ADDR
// tmp := [ ] ;
48978: LD_ADDR_VAR 0 8
48982: PUSH
48983: EMPTY
48984: ST_TO_ADDR
// if mode then
48985: LD_VAR 0 4
48989: IFFALSE 49053
// begin for i := 1 to result do
48991: LD_ADDR_VAR 0 6
48995: PUSH
48996: DOUBLE
48997: LD_INT 1
48999: DEC
49000: ST_TO_ADDR
49001: LD_VAR 0 5
49005: PUSH
49006: FOR_TO
49007: IFFALSE 49041
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
49009: LD_ADDR_VAR 0 8
49013: PUSH
49014: LD_VAR 0 8
49018: PPUSH
49019: LD_VAR 0 5
49023: PUSH
49024: LD_VAR 0 6
49028: ARRAY
49029: PUSH
49030: LD_INT 1
49032: ARRAY
49033: PPUSH
49034: CALL 80951 0 2
49038: ST_TO_ADDR
49039: GO 49006
49041: POP
49042: POP
// result := tmp ;
49043: LD_ADDR_VAR 0 5
49047: PUSH
49048: LD_VAR 0 8
49052: ST_TO_ADDR
// end ; end ;
49053: LD_VAR 0 5
49057: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49058: LD_INT 0
49060: PPUSH
49061: PPUSH
49062: PPUSH
49063: PPUSH
// if not list then
49064: LD_VAR 0 3
49068: NOT
49069: IFFALSE 49073
// exit ;
49071: GO 49461
// result := [ ] ;
49073: LD_ADDR_VAR 0 6
49077: PUSH
49078: EMPTY
49079: ST_TO_ADDR
// for i in list do
49080: LD_ADDR_VAR 0 7
49084: PUSH
49085: LD_VAR 0 3
49089: PUSH
49090: FOR_IN
49091: IFFALSE 49293
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49093: LD_ADDR_VAR 0 9
49097: PUSH
49098: LD_VAR 0 7
49102: PPUSH
49103: LD_VAR 0 1
49107: PPUSH
49108: LD_VAR 0 2
49112: PPUSH
49113: CALL_OW 297
49117: ST_TO_ADDR
// if not result then
49118: LD_VAR 0 6
49122: NOT
49123: IFFALSE 49149
// result := [ [ i , tmp ] ] else
49125: LD_ADDR_VAR 0 6
49129: PUSH
49130: LD_VAR 0 7
49134: PUSH
49135: LD_VAR 0 9
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: EMPTY
49145: LIST
49146: ST_TO_ADDR
49147: GO 49291
// begin if result [ result ] [ 2 ] <= tmp then
49149: LD_VAR 0 6
49153: PUSH
49154: LD_VAR 0 6
49158: ARRAY
49159: PUSH
49160: LD_INT 2
49162: ARRAY
49163: PUSH
49164: LD_VAR 0 9
49168: LESSEQUAL
49169: IFFALSE 49211
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49171: LD_ADDR_VAR 0 6
49175: PUSH
49176: LD_VAR 0 6
49180: PPUSH
49181: LD_VAR 0 6
49185: PUSH
49186: LD_INT 1
49188: PLUS
49189: PPUSH
49190: LD_VAR 0 7
49194: PUSH
49195: LD_VAR 0 9
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PPUSH
49204: CALL_OW 2
49208: ST_TO_ADDR
49209: GO 49291
// for j := 1 to result do
49211: LD_ADDR_VAR 0 8
49215: PUSH
49216: DOUBLE
49217: LD_INT 1
49219: DEC
49220: ST_TO_ADDR
49221: LD_VAR 0 6
49225: PUSH
49226: FOR_TO
49227: IFFALSE 49289
// begin if tmp < result [ j ] [ 2 ] then
49229: LD_VAR 0 9
49233: PUSH
49234: LD_VAR 0 6
49238: PUSH
49239: LD_VAR 0 8
49243: ARRAY
49244: PUSH
49245: LD_INT 2
49247: ARRAY
49248: LESS
49249: IFFALSE 49287
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49251: LD_ADDR_VAR 0 6
49255: PUSH
49256: LD_VAR 0 6
49260: PPUSH
49261: LD_VAR 0 8
49265: PPUSH
49266: LD_VAR 0 7
49270: PUSH
49271: LD_VAR 0 9
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PPUSH
49280: CALL_OW 2
49284: ST_TO_ADDR
// break ;
49285: GO 49289
// end ; end ;
49287: GO 49226
49289: POP
49290: POP
// end ; end ;
49291: GO 49090
49293: POP
49294: POP
// if result and not asc then
49295: LD_VAR 0 6
49299: PUSH
49300: LD_VAR 0 4
49304: NOT
49305: AND
49306: IFFALSE 49381
// begin tmp := result ;
49308: LD_ADDR_VAR 0 9
49312: PUSH
49313: LD_VAR 0 6
49317: ST_TO_ADDR
// for i = tmp downto 1 do
49318: LD_ADDR_VAR 0 7
49322: PUSH
49323: DOUBLE
49324: LD_VAR 0 9
49328: INC
49329: ST_TO_ADDR
49330: LD_INT 1
49332: PUSH
49333: FOR_DOWNTO
49334: IFFALSE 49379
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
49336: LD_ADDR_VAR 0 6
49340: PUSH
49341: LD_VAR 0 6
49345: PPUSH
49346: LD_VAR 0 9
49350: PUSH
49351: LD_VAR 0 7
49355: MINUS
49356: PUSH
49357: LD_INT 1
49359: PLUS
49360: PPUSH
49361: LD_VAR 0 9
49365: PUSH
49366: LD_VAR 0 7
49370: ARRAY
49371: PPUSH
49372: CALL_OW 1
49376: ST_TO_ADDR
49377: GO 49333
49379: POP
49380: POP
// end ; tmp := [ ] ;
49381: LD_ADDR_VAR 0 9
49385: PUSH
49386: EMPTY
49387: ST_TO_ADDR
// if mode then
49388: LD_VAR 0 5
49392: IFFALSE 49461
// begin for i = 1 to result do
49394: LD_ADDR_VAR 0 7
49398: PUSH
49399: DOUBLE
49400: LD_INT 1
49402: DEC
49403: ST_TO_ADDR
49404: LD_VAR 0 6
49408: PUSH
49409: FOR_TO
49410: IFFALSE 49449
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
49412: LD_ADDR_VAR 0 9
49416: PUSH
49417: LD_VAR 0 9
49421: PPUSH
49422: LD_VAR 0 7
49426: PPUSH
49427: LD_VAR 0 6
49431: PUSH
49432: LD_VAR 0 7
49436: ARRAY
49437: PUSH
49438: LD_INT 1
49440: ARRAY
49441: PPUSH
49442: CALL_OW 1
49446: ST_TO_ADDR
49447: GO 49409
49449: POP
49450: POP
// result := tmp ;
49451: LD_ADDR_VAR 0 6
49455: PUSH
49456: LD_VAR 0 9
49460: ST_TO_ADDR
// end ; end ;
49461: LD_VAR 0 6
49465: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
49466: LD_INT 0
49468: PPUSH
49469: PPUSH
49470: PPUSH
49471: PPUSH
49472: PPUSH
49473: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
49474: LD_ADDR_VAR 0 5
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: ST_TO_ADDR
// if not x or not y then
49496: LD_VAR 0 2
49500: NOT
49501: PUSH
49502: LD_VAR 0 3
49506: NOT
49507: OR
49508: IFFALSE 49512
// exit ;
49510: GO 51162
// if not range then
49512: LD_VAR 0 4
49516: NOT
49517: IFFALSE 49527
// range := 10 ;
49519: LD_ADDR_VAR 0 4
49523: PUSH
49524: LD_INT 10
49526: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49527: LD_ADDR_VAR 0 8
49531: PUSH
49532: LD_INT 81
49534: PUSH
49535: LD_VAR 0 1
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 92
49546: PUSH
49547: LD_VAR 0 2
49551: PUSH
49552: LD_VAR 0 3
49556: PUSH
49557: LD_VAR 0 4
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 3
49570: PUSH
49571: LD_INT 21
49573: PUSH
49574: LD_INT 3
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: LIST
49589: PPUSH
49590: CALL_OW 69
49594: ST_TO_ADDR
// if not tmp then
49595: LD_VAR 0 8
49599: NOT
49600: IFFALSE 49604
// exit ;
49602: GO 51162
// for i in tmp do
49604: LD_ADDR_VAR 0 6
49608: PUSH
49609: LD_VAR 0 8
49613: PUSH
49614: FOR_IN
49615: IFFALSE 51137
// begin points := [ 0 , 0 , 0 ] ;
49617: LD_ADDR_VAR 0 9
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: LIST
49635: ST_TO_ADDR
// bpoints := 1 ;
49636: LD_ADDR_VAR 0 10
49640: PUSH
49641: LD_INT 1
49643: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49644: LD_VAR 0 6
49648: PPUSH
49649: CALL_OW 247
49653: PUSH
49654: LD_INT 1
49656: DOUBLE
49657: EQUAL
49658: IFTRUE 49662
49660: GO 50240
49662: POP
// begin if GetClass ( i ) = 1 then
49663: LD_VAR 0 6
49667: PPUSH
49668: CALL_OW 257
49672: PUSH
49673: LD_INT 1
49675: EQUAL
49676: IFFALSE 49697
// points := [ 10 , 5 , 3 ] ;
49678: LD_ADDR_VAR 0 9
49682: PUSH
49683: LD_INT 10
49685: PUSH
49686: LD_INT 5
49688: PUSH
49689: LD_INT 3
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: LIST
49696: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49697: LD_VAR 0 6
49701: PPUSH
49702: CALL_OW 257
49706: PUSH
49707: LD_INT 2
49709: PUSH
49710: LD_INT 3
49712: PUSH
49713: LD_INT 4
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: LIST
49720: IN
49721: IFFALSE 49742
// points := [ 3 , 2 , 1 ] ;
49723: LD_ADDR_VAR 0 9
49727: PUSH
49728: LD_INT 3
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: LIST
49741: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49742: LD_VAR 0 6
49746: PPUSH
49747: CALL_OW 257
49751: PUSH
49752: LD_INT 5
49754: EQUAL
49755: IFFALSE 49776
// points := [ 130 , 5 , 2 ] ;
49757: LD_ADDR_VAR 0 9
49761: PUSH
49762: LD_INT 130
49764: PUSH
49765: LD_INT 5
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: LIST
49775: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49776: LD_VAR 0 6
49780: PPUSH
49781: CALL_OW 257
49785: PUSH
49786: LD_INT 8
49788: EQUAL
49789: IFFALSE 49810
// points := [ 35 , 35 , 30 ] ;
49791: LD_ADDR_VAR 0 9
49795: PUSH
49796: LD_INT 35
49798: PUSH
49799: LD_INT 35
49801: PUSH
49802: LD_INT 30
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: LIST
49809: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49810: LD_VAR 0 6
49814: PPUSH
49815: CALL_OW 257
49819: PUSH
49820: LD_INT 9
49822: EQUAL
49823: IFFALSE 49844
// points := [ 20 , 55 , 40 ] ;
49825: LD_ADDR_VAR 0 9
49829: PUSH
49830: LD_INT 20
49832: PUSH
49833: LD_INT 55
49835: PUSH
49836: LD_INT 40
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: LIST
49843: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49844: LD_VAR 0 6
49848: PPUSH
49849: CALL_OW 257
49853: PUSH
49854: LD_INT 12
49856: PUSH
49857: LD_INT 16
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: IN
49864: IFFALSE 49885
// points := [ 5 , 3 , 2 ] ;
49866: LD_ADDR_VAR 0 9
49870: PUSH
49871: LD_INT 5
49873: PUSH
49874: LD_INT 3
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: LIST
49884: ST_TO_ADDR
// if GetClass ( i ) = 17 then
49885: LD_VAR 0 6
49889: PPUSH
49890: CALL_OW 257
49894: PUSH
49895: LD_INT 17
49897: EQUAL
49898: IFFALSE 49919
// points := [ 100 , 50 , 75 ] ;
49900: LD_ADDR_VAR 0 9
49904: PUSH
49905: LD_INT 100
49907: PUSH
49908: LD_INT 50
49910: PUSH
49911: LD_INT 75
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: LIST
49918: ST_TO_ADDR
// if GetClass ( i ) = 15 then
49919: LD_VAR 0 6
49923: PPUSH
49924: CALL_OW 257
49928: PUSH
49929: LD_INT 15
49931: EQUAL
49932: IFFALSE 49953
// points := [ 10 , 5 , 3 ] ;
49934: LD_ADDR_VAR 0 9
49938: PUSH
49939: LD_INT 10
49941: PUSH
49942: LD_INT 5
49944: PUSH
49945: LD_INT 3
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: LIST
49952: ST_TO_ADDR
// if GetClass ( i ) = 14 then
49953: LD_VAR 0 6
49957: PPUSH
49958: CALL_OW 257
49962: PUSH
49963: LD_INT 14
49965: EQUAL
49966: IFFALSE 49987
// points := [ 10 , 0 , 0 ] ;
49968: LD_ADDR_VAR 0 9
49972: PUSH
49973: LD_INT 10
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: LIST
49986: ST_TO_ADDR
// if GetClass ( i ) = 11 then
49987: LD_VAR 0 6
49991: PPUSH
49992: CALL_OW 257
49996: PUSH
49997: LD_INT 11
49999: EQUAL
50000: IFFALSE 50021
// points := [ 30 , 10 , 5 ] ;
50002: LD_ADDR_VAR 0 9
50006: PUSH
50007: LD_INT 30
50009: PUSH
50010: LD_INT 10
50012: PUSH
50013: LD_INT 5
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: LIST
50020: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50021: LD_VAR 0 1
50025: PPUSH
50026: LD_INT 5
50028: PPUSH
50029: CALL_OW 321
50033: PUSH
50034: LD_INT 2
50036: EQUAL
50037: IFFALSE 50054
// bpoints := bpoints * 1.8 ;
50039: LD_ADDR_VAR 0 10
50043: PUSH
50044: LD_VAR 0 10
50048: PUSH
50049: LD_REAL  1.80000000000000E+0000
50052: MUL
50053: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50054: LD_VAR 0 6
50058: PPUSH
50059: CALL_OW 257
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: LD_INT 3
50072: PUSH
50073: LD_INT 4
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: IN
50082: PUSH
50083: LD_VAR 0 1
50087: PPUSH
50088: LD_INT 51
50090: PPUSH
50091: CALL_OW 321
50095: PUSH
50096: LD_INT 2
50098: EQUAL
50099: AND
50100: IFFALSE 50117
// bpoints := bpoints * 1.2 ;
50102: LD_ADDR_VAR 0 10
50106: PUSH
50107: LD_VAR 0 10
50111: PUSH
50112: LD_REAL  1.20000000000000E+0000
50115: MUL
50116: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50117: LD_VAR 0 6
50121: PPUSH
50122: CALL_OW 257
50126: PUSH
50127: LD_INT 5
50129: PUSH
50130: LD_INT 7
50132: PUSH
50133: LD_INT 9
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: LIST
50140: IN
50141: PUSH
50142: LD_VAR 0 1
50146: PPUSH
50147: LD_INT 52
50149: PPUSH
50150: CALL_OW 321
50154: PUSH
50155: LD_INT 2
50157: EQUAL
50158: AND
50159: IFFALSE 50176
// bpoints := bpoints * 1.5 ;
50161: LD_ADDR_VAR 0 10
50165: PUSH
50166: LD_VAR 0 10
50170: PUSH
50171: LD_REAL  1.50000000000000E+0000
50174: MUL
50175: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50176: LD_VAR 0 1
50180: PPUSH
50181: LD_INT 66
50183: PPUSH
50184: CALL_OW 321
50188: PUSH
50189: LD_INT 2
50191: EQUAL
50192: IFFALSE 50209
// bpoints := bpoints * 1.1 ;
50194: LD_ADDR_VAR 0 10
50198: PUSH
50199: LD_VAR 0 10
50203: PUSH
50204: LD_REAL  1.10000000000000E+0000
50207: MUL
50208: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50209: LD_ADDR_VAR 0 10
50213: PUSH
50214: LD_VAR 0 10
50218: PUSH
50219: LD_VAR 0 6
50223: PPUSH
50224: LD_INT 1
50226: PPUSH
50227: CALL_OW 259
50231: PUSH
50232: LD_REAL  1.15000000000000E+0000
50235: MUL
50236: MUL
50237: ST_TO_ADDR
// end ; unit_vehicle :
50238: GO 51066
50240: LD_INT 2
50242: DOUBLE
50243: EQUAL
50244: IFTRUE 50248
50246: GO 51054
50248: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50249: LD_VAR 0 6
50253: PPUSH
50254: CALL_OW 264
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: LD_INT 42
50264: PUSH
50265: LD_INT 24
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: LIST
50272: IN
50273: IFFALSE 50294
// points := [ 25 , 5 , 3 ] ;
50275: LD_ADDR_VAR 0 9
50279: PUSH
50280: LD_INT 25
50282: PUSH
50283: LD_INT 5
50285: PUSH
50286: LD_INT 3
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: LIST
50293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50294: LD_VAR 0 6
50298: PPUSH
50299: CALL_OW 264
50303: PUSH
50304: LD_INT 4
50306: PUSH
50307: LD_INT 43
50309: PUSH
50310: LD_INT 25
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: LIST
50317: IN
50318: IFFALSE 50339
// points := [ 40 , 15 , 5 ] ;
50320: LD_ADDR_VAR 0 9
50324: PUSH
50325: LD_INT 40
50327: PUSH
50328: LD_INT 15
50330: PUSH
50331: LD_INT 5
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: LIST
50338: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
50339: LD_VAR 0 6
50343: PPUSH
50344: CALL_OW 264
50348: PUSH
50349: LD_INT 3
50351: PUSH
50352: LD_INT 23
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: IN
50359: IFFALSE 50380
// points := [ 7 , 25 , 8 ] ;
50361: LD_ADDR_VAR 0 9
50365: PUSH
50366: LD_INT 7
50368: PUSH
50369: LD_INT 25
50371: PUSH
50372: LD_INT 8
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: LIST
50379: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
50380: LD_VAR 0 6
50384: PPUSH
50385: CALL_OW 264
50389: PUSH
50390: LD_INT 5
50392: PUSH
50393: LD_INT 27
50395: PUSH
50396: LD_INT 44
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: LIST
50403: IN
50404: IFFALSE 50425
// points := [ 14 , 50 , 16 ] ;
50406: LD_ADDR_VAR 0 9
50410: PUSH
50411: LD_INT 14
50413: PUSH
50414: LD_INT 50
50416: PUSH
50417: LD_INT 16
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: LIST
50424: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
50425: LD_VAR 0 6
50429: PPUSH
50430: CALL_OW 264
50434: PUSH
50435: LD_INT 6
50437: PUSH
50438: LD_INT 46
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: IN
50445: IFFALSE 50466
// points := [ 32 , 120 , 70 ] ;
50447: LD_ADDR_VAR 0 9
50451: PUSH
50452: LD_INT 32
50454: PUSH
50455: LD_INT 120
50457: PUSH
50458: LD_INT 70
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: LIST
50465: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
50466: LD_VAR 0 6
50470: PPUSH
50471: CALL_OW 264
50475: PUSH
50476: LD_INT 7
50478: PUSH
50479: LD_INT 28
50481: PUSH
50482: LD_INT 45
50484: PUSH
50485: LD_INT 92
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: IN
50494: IFFALSE 50515
// points := [ 35 , 20 , 45 ] ;
50496: LD_ADDR_VAR 0 9
50500: PUSH
50501: LD_INT 35
50503: PUSH
50504: LD_INT 20
50506: PUSH
50507: LD_INT 45
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
50515: LD_VAR 0 6
50519: PPUSH
50520: CALL_OW 264
50524: PUSH
50525: LD_INT 47
50527: PUSH
50528: EMPTY
50529: LIST
50530: IN
50531: IFFALSE 50552
// points := [ 67 , 45 , 75 ] ;
50533: LD_ADDR_VAR 0 9
50537: PUSH
50538: LD_INT 67
50540: PUSH
50541: LD_INT 45
50543: PUSH
50544: LD_INT 75
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50552: LD_VAR 0 6
50556: PPUSH
50557: CALL_OW 264
50561: PUSH
50562: LD_INT 26
50564: PUSH
50565: EMPTY
50566: LIST
50567: IN
50568: IFFALSE 50589
// points := [ 120 , 30 , 80 ] ;
50570: LD_ADDR_VAR 0 9
50574: PUSH
50575: LD_INT 120
50577: PUSH
50578: LD_INT 30
50580: PUSH
50581: LD_INT 80
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: LIST
50588: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50589: LD_VAR 0 6
50593: PPUSH
50594: CALL_OW 264
50598: PUSH
50599: LD_INT 22
50601: PUSH
50602: EMPTY
50603: LIST
50604: IN
50605: IFFALSE 50626
// points := [ 40 , 1 , 1 ] ;
50607: LD_ADDR_VAR 0 9
50611: PUSH
50612: LD_INT 40
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: LIST
50625: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50626: LD_VAR 0 6
50630: PPUSH
50631: CALL_OW 264
50635: PUSH
50636: LD_INT 29
50638: PUSH
50639: EMPTY
50640: LIST
50641: IN
50642: IFFALSE 50663
// points := [ 70 , 200 , 400 ] ;
50644: LD_ADDR_VAR 0 9
50648: PUSH
50649: LD_INT 70
50651: PUSH
50652: LD_INT 200
50654: PUSH
50655: LD_INT 400
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: LIST
50662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50663: LD_VAR 0 6
50667: PPUSH
50668: CALL_OW 264
50672: PUSH
50673: LD_INT 14
50675: PUSH
50676: LD_INT 53
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: IN
50683: IFFALSE 50704
// points := [ 40 , 10 , 20 ] ;
50685: LD_ADDR_VAR 0 9
50689: PUSH
50690: LD_INT 40
50692: PUSH
50693: LD_INT 10
50695: PUSH
50696: LD_INT 20
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: LIST
50703: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50704: LD_VAR 0 6
50708: PPUSH
50709: CALL_OW 264
50713: PUSH
50714: LD_INT 9
50716: PUSH
50717: EMPTY
50718: LIST
50719: IN
50720: IFFALSE 50741
// points := [ 5 , 70 , 20 ] ;
50722: LD_ADDR_VAR 0 9
50726: PUSH
50727: LD_INT 5
50729: PUSH
50730: LD_INT 70
50732: PUSH
50733: LD_INT 20
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: LIST
50740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50741: LD_VAR 0 6
50745: PPUSH
50746: CALL_OW 264
50750: PUSH
50751: LD_INT 10
50753: PUSH
50754: EMPTY
50755: LIST
50756: IN
50757: IFFALSE 50778
// points := [ 35 , 110 , 70 ] ;
50759: LD_ADDR_VAR 0 9
50763: PUSH
50764: LD_INT 35
50766: PUSH
50767: LD_INT 110
50769: PUSH
50770: LD_INT 70
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: LIST
50777: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50778: LD_VAR 0 6
50782: PPUSH
50783: CALL_OW 265
50787: PUSH
50788: LD_INT 25
50790: EQUAL
50791: IFFALSE 50812
// points := [ 80 , 65 , 100 ] ;
50793: LD_ADDR_VAR 0 9
50797: PUSH
50798: LD_INT 80
50800: PUSH
50801: LD_INT 65
50803: PUSH
50804: LD_INT 100
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: LIST
50811: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50812: LD_VAR 0 6
50816: PPUSH
50817: CALL_OW 263
50821: PUSH
50822: LD_INT 1
50824: EQUAL
50825: IFFALSE 50860
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50827: LD_ADDR_VAR 0 10
50831: PUSH
50832: LD_VAR 0 10
50836: PUSH
50837: LD_VAR 0 6
50841: PPUSH
50842: CALL_OW 311
50846: PPUSH
50847: LD_INT 3
50849: PPUSH
50850: CALL_OW 259
50854: PUSH
50855: LD_INT 4
50857: MUL
50858: MUL
50859: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50860: LD_VAR 0 6
50864: PPUSH
50865: CALL_OW 263
50869: PUSH
50870: LD_INT 2
50872: EQUAL
50873: IFFALSE 50924
// begin j := IsControledBy ( i ) ;
50875: LD_ADDR_VAR 0 7
50879: PUSH
50880: LD_VAR 0 6
50884: PPUSH
50885: CALL_OW 312
50889: ST_TO_ADDR
// if j then
50890: LD_VAR 0 7
50894: IFFALSE 50924
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
50896: LD_ADDR_VAR 0 10
50900: PUSH
50901: LD_VAR 0 10
50905: PUSH
50906: LD_VAR 0 7
50910: PPUSH
50911: LD_INT 3
50913: PPUSH
50914: CALL_OW 259
50918: PUSH
50919: LD_INT 3
50921: MUL
50922: MUL
50923: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
50924: LD_VAR 0 6
50928: PPUSH
50929: CALL_OW 264
50933: PUSH
50934: LD_INT 5
50936: PUSH
50937: LD_INT 6
50939: PUSH
50940: LD_INT 46
50942: PUSH
50943: LD_INT 44
50945: PUSH
50946: LD_INT 47
50948: PUSH
50949: LD_INT 45
50951: PUSH
50952: LD_INT 28
50954: PUSH
50955: LD_INT 7
50957: PUSH
50958: LD_INT 27
50960: PUSH
50961: LD_INT 29
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: IN
50976: PUSH
50977: LD_VAR 0 1
50981: PPUSH
50982: LD_INT 52
50984: PPUSH
50985: CALL_OW 321
50989: PUSH
50990: LD_INT 2
50992: EQUAL
50993: AND
50994: IFFALSE 51011
// bpoints := bpoints * 1.2 ;
50996: LD_ADDR_VAR 0 10
51000: PUSH
51001: LD_VAR 0 10
51005: PUSH
51006: LD_REAL  1.20000000000000E+0000
51009: MUL
51010: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51011: LD_VAR 0 6
51015: PPUSH
51016: CALL_OW 264
51020: PUSH
51021: LD_INT 6
51023: PUSH
51024: LD_INT 46
51026: PUSH
51027: LD_INT 47
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: LIST
51034: IN
51035: IFFALSE 51052
// bpoints := bpoints * 1.2 ;
51037: LD_ADDR_VAR 0 10
51041: PUSH
51042: LD_VAR 0 10
51046: PUSH
51047: LD_REAL  1.20000000000000E+0000
51050: MUL
51051: ST_TO_ADDR
// end ; unit_building :
51052: GO 51066
51054: LD_INT 3
51056: DOUBLE
51057: EQUAL
51058: IFTRUE 51062
51060: GO 51065
51062: POP
// ; end ;
51063: GO 51066
51065: POP
// for j = 1 to 3 do
51066: LD_ADDR_VAR 0 7
51070: PUSH
51071: DOUBLE
51072: LD_INT 1
51074: DEC
51075: ST_TO_ADDR
51076: LD_INT 3
51078: PUSH
51079: FOR_TO
51080: IFFALSE 51133
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51082: LD_ADDR_VAR 0 5
51086: PUSH
51087: LD_VAR 0 5
51091: PPUSH
51092: LD_VAR 0 7
51096: PPUSH
51097: LD_VAR 0 5
51101: PUSH
51102: LD_VAR 0 7
51106: ARRAY
51107: PUSH
51108: LD_VAR 0 9
51112: PUSH
51113: LD_VAR 0 7
51117: ARRAY
51118: PUSH
51119: LD_VAR 0 10
51123: MUL
51124: PLUS
51125: PPUSH
51126: CALL_OW 1
51130: ST_TO_ADDR
51131: GO 51079
51133: POP
51134: POP
// end ;
51135: GO 49614
51137: POP
51138: POP
// result := Replace ( result , 4 , tmp ) ;
51139: LD_ADDR_VAR 0 5
51143: PUSH
51144: LD_VAR 0 5
51148: PPUSH
51149: LD_INT 4
51151: PPUSH
51152: LD_VAR 0 8
51156: PPUSH
51157: CALL_OW 1
51161: ST_TO_ADDR
// end ;
51162: LD_VAR 0 5
51166: RET
// export function DangerAtRange ( unit , range ) ; begin
51167: LD_INT 0
51169: PPUSH
// if not unit then
51170: LD_VAR 0 1
51174: NOT
51175: IFFALSE 51179
// exit ;
51177: GO 51224
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51179: LD_ADDR_VAR 0 3
51183: PUSH
51184: LD_VAR 0 1
51188: PPUSH
51189: CALL_OW 255
51193: PPUSH
51194: LD_VAR 0 1
51198: PPUSH
51199: CALL_OW 250
51203: PPUSH
51204: LD_VAR 0 1
51208: PPUSH
51209: CALL_OW 251
51213: PPUSH
51214: LD_VAR 0 2
51218: PPUSH
51219: CALL 49466 0 4
51223: ST_TO_ADDR
// end ;
51224: LD_VAR 0 3
51228: RET
// export function DangerInArea ( side , area ) ; begin
51229: LD_INT 0
51231: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51232: LD_ADDR_VAR 0 3
51236: PUSH
51237: LD_VAR 0 2
51241: PPUSH
51242: LD_INT 81
51244: PUSH
51245: LD_VAR 0 1
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PPUSH
51254: CALL_OW 70
51258: ST_TO_ADDR
// end ;
51259: LD_VAR 0 3
51263: RET
// export function IsExtension ( b ) ; begin
51264: LD_INT 0
51266: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51267: LD_ADDR_VAR 0 2
51271: PUSH
51272: LD_VAR 0 1
51276: PUSH
51277: LD_INT 23
51279: PUSH
51280: LD_INT 20
51282: PUSH
51283: LD_INT 22
51285: PUSH
51286: LD_INT 17
51288: PUSH
51289: LD_INT 24
51291: PUSH
51292: LD_INT 21
51294: PUSH
51295: LD_INT 19
51297: PUSH
51298: LD_INT 16
51300: PUSH
51301: LD_INT 25
51303: PUSH
51304: LD_INT 18
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: IN
51319: ST_TO_ADDR
// end ;
51320: LD_VAR 0 2
51324: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
51325: LD_INT 0
51327: PPUSH
51328: PPUSH
51329: PPUSH
// result := [ ] ;
51330: LD_ADDR_VAR 0 4
51334: PUSH
51335: EMPTY
51336: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
51337: LD_ADDR_VAR 0 5
51341: PUSH
51342: LD_VAR 0 2
51346: PPUSH
51347: LD_INT 21
51349: PUSH
51350: LD_INT 3
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PPUSH
51357: CALL_OW 70
51361: ST_TO_ADDR
// if not tmp then
51362: LD_VAR 0 5
51366: NOT
51367: IFFALSE 51371
// exit ;
51369: GO 51435
// if checkLink then
51371: LD_VAR 0 3
51375: IFFALSE 51425
// begin for i in tmp do
51377: LD_ADDR_VAR 0 6
51381: PUSH
51382: LD_VAR 0 5
51386: PUSH
51387: FOR_IN
51388: IFFALSE 51423
// if GetBase ( i ) <> base then
51390: LD_VAR 0 6
51394: PPUSH
51395: CALL_OW 274
51399: PUSH
51400: LD_VAR 0 1
51404: NONEQUAL
51405: IFFALSE 51421
// ComLinkToBase ( base , i ) ;
51407: LD_VAR 0 1
51411: PPUSH
51412: LD_VAR 0 6
51416: PPUSH
51417: CALL_OW 169
51421: GO 51387
51423: POP
51424: POP
// end ; result := tmp ;
51425: LD_ADDR_VAR 0 4
51429: PUSH
51430: LD_VAR 0 5
51434: ST_TO_ADDR
// end ;
51435: LD_VAR 0 4
51439: RET
// export function ComComplete ( units , b ) ; var i ; begin
51440: LD_INT 0
51442: PPUSH
51443: PPUSH
// if not units then
51444: LD_VAR 0 1
51448: NOT
51449: IFFALSE 51453
// exit ;
51451: GO 51543
// for i in units do
51453: LD_ADDR_VAR 0 4
51457: PUSH
51458: LD_VAR 0 1
51462: PUSH
51463: FOR_IN
51464: IFFALSE 51541
// if BuildingStatus ( b ) = bs_build then
51466: LD_VAR 0 2
51470: PPUSH
51471: CALL_OW 461
51475: PUSH
51476: LD_INT 1
51478: EQUAL
51479: IFFALSE 51539
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
51481: LD_VAR 0 4
51485: PPUSH
51486: LD_STRING h
51488: PUSH
51489: LD_VAR 0 2
51493: PPUSH
51494: CALL_OW 250
51498: PUSH
51499: LD_VAR 0 2
51503: PPUSH
51504: CALL_OW 251
51508: PUSH
51509: LD_VAR 0 2
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: PUSH
51532: EMPTY
51533: LIST
51534: PPUSH
51535: CALL_OW 446
51539: GO 51463
51541: POP
51542: POP
// end ;
51543: LD_VAR 0 3
51547: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
51548: LD_INT 0
51550: PPUSH
51551: PPUSH
51552: PPUSH
51553: PPUSH
51554: PPUSH
51555: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
51556: LD_VAR 0 1
51560: NOT
51561: PUSH
51562: LD_VAR 0 1
51566: PPUSH
51567: CALL_OW 263
51571: PUSH
51572: LD_INT 2
51574: NONEQUAL
51575: OR
51576: IFFALSE 51580
// exit ;
51578: GO 51896
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51580: LD_ADDR_VAR 0 6
51584: PUSH
51585: LD_INT 22
51587: PUSH
51588: LD_VAR 0 1
51592: PPUSH
51593: CALL_OW 255
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 2
51604: PUSH
51605: LD_INT 30
51607: PUSH
51608: LD_INT 36
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 34
51617: PUSH
51618: LD_INT 31
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: LIST
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PPUSH
51634: CALL_OW 69
51638: ST_TO_ADDR
// if not tmp then
51639: LD_VAR 0 6
51643: NOT
51644: IFFALSE 51648
// exit ;
51646: GO 51896
// result := [ ] ;
51648: LD_ADDR_VAR 0 2
51652: PUSH
51653: EMPTY
51654: ST_TO_ADDR
// for i in tmp do
51655: LD_ADDR_VAR 0 3
51659: PUSH
51660: LD_VAR 0 6
51664: PUSH
51665: FOR_IN
51666: IFFALSE 51737
// begin t := UnitsInside ( i ) ;
51668: LD_ADDR_VAR 0 4
51672: PUSH
51673: LD_VAR 0 3
51677: PPUSH
51678: CALL_OW 313
51682: ST_TO_ADDR
// if t then
51683: LD_VAR 0 4
51687: IFFALSE 51735
// for j in t do
51689: LD_ADDR_VAR 0 7
51693: PUSH
51694: LD_VAR 0 4
51698: PUSH
51699: FOR_IN
51700: IFFALSE 51733
// result := Replace ( result , result + 1 , j ) ;
51702: LD_ADDR_VAR 0 2
51706: PUSH
51707: LD_VAR 0 2
51711: PPUSH
51712: LD_VAR 0 2
51716: PUSH
51717: LD_INT 1
51719: PLUS
51720: PPUSH
51721: LD_VAR 0 7
51725: PPUSH
51726: CALL_OW 1
51730: ST_TO_ADDR
51731: GO 51699
51733: POP
51734: POP
// end ;
51735: GO 51665
51737: POP
51738: POP
// if not result then
51739: LD_VAR 0 2
51743: NOT
51744: IFFALSE 51748
// exit ;
51746: GO 51896
// mech := result [ 1 ] ;
51748: LD_ADDR_VAR 0 5
51752: PUSH
51753: LD_VAR 0 2
51757: PUSH
51758: LD_INT 1
51760: ARRAY
51761: ST_TO_ADDR
// if result > 1 then
51762: LD_VAR 0 2
51766: PUSH
51767: LD_INT 1
51769: GREATER
51770: IFFALSE 51882
// begin for i = 2 to result do
51772: LD_ADDR_VAR 0 3
51776: PUSH
51777: DOUBLE
51778: LD_INT 2
51780: DEC
51781: ST_TO_ADDR
51782: LD_VAR 0 2
51786: PUSH
51787: FOR_TO
51788: IFFALSE 51880
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51790: LD_ADDR_VAR 0 4
51794: PUSH
51795: LD_VAR 0 2
51799: PUSH
51800: LD_VAR 0 3
51804: ARRAY
51805: PPUSH
51806: LD_INT 3
51808: PPUSH
51809: CALL_OW 259
51813: PUSH
51814: LD_VAR 0 2
51818: PUSH
51819: LD_VAR 0 3
51823: ARRAY
51824: PPUSH
51825: CALL_OW 432
51829: MINUS
51830: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51831: LD_VAR 0 4
51835: PUSH
51836: LD_VAR 0 5
51840: PPUSH
51841: LD_INT 3
51843: PPUSH
51844: CALL_OW 259
51848: PUSH
51849: LD_VAR 0 5
51853: PPUSH
51854: CALL_OW 432
51858: MINUS
51859: GREATEREQUAL
51860: IFFALSE 51878
// mech := result [ i ] ;
51862: LD_ADDR_VAR 0 5
51866: PUSH
51867: LD_VAR 0 2
51871: PUSH
51872: LD_VAR 0 3
51876: ARRAY
51877: ST_TO_ADDR
// end ;
51878: GO 51787
51880: POP
51881: POP
// end ; ComLinkTo ( vehicle , mech ) ;
51882: LD_VAR 0 1
51886: PPUSH
51887: LD_VAR 0 5
51891: PPUSH
51892: CALL_OW 135
// end ;
51896: LD_VAR 0 2
51900: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
51901: LD_INT 0
51903: PPUSH
51904: PPUSH
51905: PPUSH
51906: PPUSH
51907: PPUSH
51908: PPUSH
51909: PPUSH
51910: PPUSH
51911: PPUSH
51912: PPUSH
51913: PPUSH
51914: PPUSH
51915: PPUSH
// result := [ ] ;
51916: LD_ADDR_VAR 0 7
51920: PUSH
51921: EMPTY
51922: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
51923: LD_VAR 0 1
51927: PPUSH
51928: CALL_OW 266
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: IN
51943: NOT
51944: IFFALSE 51948
// exit ;
51946: GO 53582
// if name then
51948: LD_VAR 0 3
51952: IFFALSE 51968
// SetBName ( base_dep , name ) ;
51954: LD_VAR 0 1
51958: PPUSH
51959: LD_VAR 0 3
51963: PPUSH
51964: CALL_OW 500
// base := GetBase ( base_dep ) ;
51968: LD_ADDR_VAR 0 15
51972: PUSH
51973: LD_VAR 0 1
51977: PPUSH
51978: CALL_OW 274
51982: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
51983: LD_ADDR_VAR 0 16
51987: PUSH
51988: LD_VAR 0 1
51992: PPUSH
51993: CALL_OW 255
51997: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
51998: LD_ADDR_VAR 0 17
52002: PUSH
52003: LD_VAR 0 1
52007: PPUSH
52008: CALL_OW 248
52012: ST_TO_ADDR
// if sources then
52013: LD_VAR 0 5
52017: IFFALSE 52064
// for i = 1 to 3 do
52019: LD_ADDR_VAR 0 8
52023: PUSH
52024: DOUBLE
52025: LD_INT 1
52027: DEC
52028: ST_TO_ADDR
52029: LD_INT 3
52031: PUSH
52032: FOR_TO
52033: IFFALSE 52062
// AddResourceType ( base , i , sources [ i ] ) ;
52035: LD_VAR 0 15
52039: PPUSH
52040: LD_VAR 0 8
52044: PPUSH
52045: LD_VAR 0 5
52049: PUSH
52050: LD_VAR 0 8
52054: ARRAY
52055: PPUSH
52056: CALL_OW 276
52060: GO 52032
52062: POP
52063: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52064: LD_ADDR_VAR 0 18
52068: PUSH
52069: LD_VAR 0 15
52073: PPUSH
52074: LD_VAR 0 2
52078: PPUSH
52079: LD_INT 1
52081: PPUSH
52082: CALL 51325 0 3
52086: ST_TO_ADDR
// InitHc ;
52087: CALL_OW 19
// InitUc ;
52091: CALL_OW 18
// uc_side := side ;
52095: LD_ADDR_OWVAR 20
52099: PUSH
52100: LD_VAR 0 16
52104: ST_TO_ADDR
// uc_nation := nation ;
52105: LD_ADDR_OWVAR 21
52109: PUSH
52110: LD_VAR 0 17
52114: ST_TO_ADDR
// if buildings then
52115: LD_VAR 0 18
52119: IFFALSE 53441
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52121: LD_ADDR_VAR 0 19
52125: PUSH
52126: LD_VAR 0 18
52130: PPUSH
52131: LD_INT 2
52133: PUSH
52134: LD_INT 30
52136: PUSH
52137: LD_INT 29
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 30
52146: PUSH
52147: LD_INT 30
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: LIST
52158: PPUSH
52159: CALL_OW 72
52163: ST_TO_ADDR
// if tmp then
52164: LD_VAR 0 19
52168: IFFALSE 52216
// for i in tmp do
52170: LD_ADDR_VAR 0 8
52174: PUSH
52175: LD_VAR 0 19
52179: PUSH
52180: FOR_IN
52181: IFFALSE 52214
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52183: LD_VAR 0 8
52187: PPUSH
52188: CALL_OW 250
52192: PPUSH
52193: LD_VAR 0 8
52197: PPUSH
52198: CALL_OW 251
52202: PPUSH
52203: LD_VAR 0 16
52207: PPUSH
52208: CALL_OW 441
52212: GO 52180
52214: POP
52215: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52216: LD_VAR 0 18
52220: PPUSH
52221: LD_INT 2
52223: PUSH
52224: LD_INT 30
52226: PUSH
52227: LD_INT 32
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 30
52236: PUSH
52237: LD_INT 33
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: LIST
52248: PPUSH
52249: CALL_OW 72
52253: IFFALSE 52341
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52255: LD_ADDR_VAR 0 8
52259: PUSH
52260: LD_VAR 0 18
52264: PPUSH
52265: LD_INT 2
52267: PUSH
52268: LD_INT 30
52270: PUSH
52271: LD_INT 32
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 30
52280: PUSH
52281: LD_INT 33
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: LIST
52292: PPUSH
52293: CALL_OW 72
52297: PUSH
52298: FOR_IN
52299: IFFALSE 52339
// begin if not GetBWeapon ( i ) then
52301: LD_VAR 0 8
52305: PPUSH
52306: CALL_OW 269
52310: NOT
52311: IFFALSE 52337
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
52313: LD_VAR 0 8
52317: PPUSH
52318: LD_VAR 0 8
52322: PPUSH
52323: LD_VAR 0 2
52327: PPUSH
52328: CALL 53587 0 2
52332: PPUSH
52333: CALL_OW 431
// end ;
52337: GO 52298
52339: POP
52340: POP
// end ; for i = 1 to personel do
52341: LD_ADDR_VAR 0 8
52345: PUSH
52346: DOUBLE
52347: LD_INT 1
52349: DEC
52350: ST_TO_ADDR
52351: LD_VAR 0 6
52355: PUSH
52356: FOR_TO
52357: IFFALSE 53421
// begin if i > 4 then
52359: LD_VAR 0 8
52363: PUSH
52364: LD_INT 4
52366: GREATER
52367: IFFALSE 52371
// break ;
52369: GO 53421
// case i of 1 :
52371: LD_VAR 0 8
52375: PUSH
52376: LD_INT 1
52378: DOUBLE
52379: EQUAL
52380: IFTRUE 52384
52382: GO 52464
52384: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
52385: LD_ADDR_VAR 0 12
52389: PUSH
52390: LD_VAR 0 18
52394: PPUSH
52395: LD_INT 22
52397: PUSH
52398: LD_VAR 0 16
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 58
52409: PUSH
52410: EMPTY
52411: LIST
52412: PUSH
52413: LD_INT 2
52415: PUSH
52416: LD_INT 30
52418: PUSH
52419: LD_INT 32
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 30
52428: PUSH
52429: LD_INT 4
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 30
52438: PUSH
52439: LD_INT 5
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: LIST
52456: PPUSH
52457: CALL_OW 72
52461: ST_TO_ADDR
52462: GO 52686
52464: LD_INT 2
52466: DOUBLE
52467: EQUAL
52468: IFTRUE 52472
52470: GO 52534
52472: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
52473: LD_ADDR_VAR 0 12
52477: PUSH
52478: LD_VAR 0 18
52482: PPUSH
52483: LD_INT 22
52485: PUSH
52486: LD_VAR 0 16
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: LD_INT 30
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 30
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: LIST
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PPUSH
52527: CALL_OW 72
52531: ST_TO_ADDR
52532: GO 52686
52534: LD_INT 3
52536: DOUBLE
52537: EQUAL
52538: IFTRUE 52542
52540: GO 52604
52542: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
52543: LD_ADDR_VAR 0 12
52547: PUSH
52548: LD_VAR 0 18
52552: PPUSH
52553: LD_INT 22
52555: PUSH
52556: LD_VAR 0 16
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: LD_INT 30
52570: PUSH
52571: LD_INT 2
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 30
52580: PUSH
52581: LD_INT 3
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: LIST
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PPUSH
52597: CALL_OW 72
52601: ST_TO_ADDR
52602: GO 52686
52604: LD_INT 4
52606: DOUBLE
52607: EQUAL
52608: IFTRUE 52612
52610: GO 52685
52612: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52613: LD_ADDR_VAR 0 12
52617: PUSH
52618: LD_VAR 0 18
52622: PPUSH
52623: LD_INT 22
52625: PUSH
52626: LD_VAR 0 16
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: LD_INT 30
52640: PUSH
52641: LD_INT 6
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 30
52650: PUSH
52651: LD_INT 7
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 30
52660: PUSH
52661: LD_INT 8
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PPUSH
52678: CALL_OW 72
52682: ST_TO_ADDR
52683: GO 52686
52685: POP
// if i = 1 then
52686: LD_VAR 0 8
52690: PUSH
52691: LD_INT 1
52693: EQUAL
52694: IFFALSE 52805
// begin tmp := [ ] ;
52696: LD_ADDR_VAR 0 19
52700: PUSH
52701: EMPTY
52702: ST_TO_ADDR
// for j in f do
52703: LD_ADDR_VAR 0 9
52707: PUSH
52708: LD_VAR 0 12
52712: PUSH
52713: FOR_IN
52714: IFFALSE 52787
// if GetBType ( j ) = b_bunker then
52716: LD_VAR 0 9
52720: PPUSH
52721: CALL_OW 266
52725: PUSH
52726: LD_INT 32
52728: EQUAL
52729: IFFALSE 52756
// tmp := Insert ( tmp , 1 , j ) else
52731: LD_ADDR_VAR 0 19
52735: PUSH
52736: LD_VAR 0 19
52740: PPUSH
52741: LD_INT 1
52743: PPUSH
52744: LD_VAR 0 9
52748: PPUSH
52749: CALL_OW 2
52753: ST_TO_ADDR
52754: GO 52785
// tmp := Insert ( tmp , tmp + 1 , j ) ;
52756: LD_ADDR_VAR 0 19
52760: PUSH
52761: LD_VAR 0 19
52765: PPUSH
52766: LD_VAR 0 19
52770: PUSH
52771: LD_INT 1
52773: PLUS
52774: PPUSH
52775: LD_VAR 0 9
52779: PPUSH
52780: CALL_OW 2
52784: ST_TO_ADDR
52785: GO 52713
52787: POP
52788: POP
// if tmp then
52789: LD_VAR 0 19
52793: IFFALSE 52805
// f := tmp ;
52795: LD_ADDR_VAR 0 12
52799: PUSH
52800: LD_VAR 0 19
52804: ST_TO_ADDR
// end ; x := personel [ i ] ;
52805: LD_ADDR_VAR 0 13
52809: PUSH
52810: LD_VAR 0 6
52814: PUSH
52815: LD_VAR 0 8
52819: ARRAY
52820: ST_TO_ADDR
// if x = - 1 then
52821: LD_VAR 0 13
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: EQUAL
52830: IFFALSE 53039
// begin for j in f do
52832: LD_ADDR_VAR 0 9
52836: PUSH
52837: LD_VAR 0 12
52841: PUSH
52842: FOR_IN
52843: IFFALSE 53035
// repeat InitHc ;
52845: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52849: LD_VAR 0 9
52853: PPUSH
52854: CALL_OW 266
52858: PUSH
52859: LD_INT 5
52861: EQUAL
52862: IFFALSE 52932
// begin if UnitsInside ( j ) < 3 then
52864: LD_VAR 0 9
52868: PPUSH
52869: CALL_OW 313
52873: PUSH
52874: LD_INT 3
52876: LESS
52877: IFFALSE 52913
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52879: LD_INT 0
52881: PPUSH
52882: LD_INT 5
52884: PUSH
52885: LD_INT 8
52887: PUSH
52888: LD_INT 9
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: LIST
52895: PUSH
52896: LD_VAR 0 17
52900: ARRAY
52901: PPUSH
52902: LD_VAR 0 4
52906: PPUSH
52907: CALL_OW 380
52911: GO 52930
// PrepareHuman ( false , i , skill ) ;
52913: LD_INT 0
52915: PPUSH
52916: LD_VAR 0 8
52920: PPUSH
52921: LD_VAR 0 4
52925: PPUSH
52926: CALL_OW 380
// end else
52930: GO 52949
// PrepareHuman ( false , i , skill ) ;
52932: LD_INT 0
52934: PPUSH
52935: LD_VAR 0 8
52939: PPUSH
52940: LD_VAR 0 4
52944: PPUSH
52945: CALL_OW 380
// un := CreateHuman ;
52949: LD_ADDR_VAR 0 14
52953: PUSH
52954: CALL_OW 44
52958: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52959: LD_ADDR_VAR 0 7
52963: PUSH
52964: LD_VAR 0 7
52968: PPUSH
52969: LD_INT 1
52971: PPUSH
52972: LD_VAR 0 14
52976: PPUSH
52977: CALL_OW 2
52981: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
52982: LD_VAR 0 14
52986: PPUSH
52987: LD_VAR 0 9
52991: PPUSH
52992: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
52996: LD_VAR 0 9
53000: PPUSH
53001: CALL_OW 313
53005: PUSH
53006: LD_INT 6
53008: EQUAL
53009: PUSH
53010: LD_VAR 0 9
53014: PPUSH
53015: CALL_OW 266
53019: PUSH
53020: LD_INT 32
53022: PUSH
53023: LD_INT 31
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: IN
53030: OR
53031: IFFALSE 52845
53033: GO 52842
53035: POP
53036: POP
// end else
53037: GO 53419
// for j = 1 to x do
53039: LD_ADDR_VAR 0 9
53043: PUSH
53044: DOUBLE
53045: LD_INT 1
53047: DEC
53048: ST_TO_ADDR
53049: LD_VAR 0 13
53053: PUSH
53054: FOR_TO
53055: IFFALSE 53417
// begin InitHc ;
53057: CALL_OW 19
// if not f then
53061: LD_VAR 0 12
53065: NOT
53066: IFFALSE 53155
// begin PrepareHuman ( false , i , skill ) ;
53068: LD_INT 0
53070: PPUSH
53071: LD_VAR 0 8
53075: PPUSH
53076: LD_VAR 0 4
53080: PPUSH
53081: CALL_OW 380
// un := CreateHuman ;
53085: LD_ADDR_VAR 0 14
53089: PUSH
53090: CALL_OW 44
53094: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53095: LD_ADDR_VAR 0 7
53099: PUSH
53100: LD_VAR 0 7
53104: PPUSH
53105: LD_INT 1
53107: PPUSH
53108: LD_VAR 0 14
53112: PPUSH
53113: CALL_OW 2
53117: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53118: LD_VAR 0 14
53122: PPUSH
53123: LD_VAR 0 1
53127: PPUSH
53128: CALL_OW 250
53132: PPUSH
53133: LD_VAR 0 1
53137: PPUSH
53138: CALL_OW 251
53142: PPUSH
53143: LD_INT 10
53145: PPUSH
53146: LD_INT 0
53148: PPUSH
53149: CALL_OW 50
// continue ;
53153: GO 53054
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53155: LD_VAR 0 12
53159: PUSH
53160: LD_INT 1
53162: ARRAY
53163: PPUSH
53164: CALL_OW 313
53168: PUSH
53169: LD_VAR 0 12
53173: PUSH
53174: LD_INT 1
53176: ARRAY
53177: PPUSH
53178: CALL_OW 266
53182: PUSH
53183: LD_INT 32
53185: PUSH
53186: LD_INT 31
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: IN
53193: AND
53194: PUSH
53195: LD_VAR 0 12
53199: PUSH
53200: LD_INT 1
53202: ARRAY
53203: PPUSH
53204: CALL_OW 313
53208: PUSH
53209: LD_INT 6
53211: EQUAL
53212: OR
53213: IFFALSE 53233
// f := Delete ( f , 1 ) ;
53215: LD_ADDR_VAR 0 12
53219: PUSH
53220: LD_VAR 0 12
53224: PPUSH
53225: LD_INT 1
53227: PPUSH
53228: CALL_OW 3
53232: ST_TO_ADDR
// if not f then
53233: LD_VAR 0 12
53237: NOT
53238: IFFALSE 53256
// begin x := x + 2 ;
53240: LD_ADDR_VAR 0 13
53244: PUSH
53245: LD_VAR 0 13
53249: PUSH
53250: LD_INT 2
53252: PLUS
53253: ST_TO_ADDR
// continue ;
53254: GO 53054
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53256: LD_VAR 0 12
53260: PUSH
53261: LD_INT 1
53263: ARRAY
53264: PPUSH
53265: CALL_OW 266
53269: PUSH
53270: LD_INT 5
53272: EQUAL
53273: IFFALSE 53347
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53275: LD_VAR 0 12
53279: PUSH
53280: LD_INT 1
53282: ARRAY
53283: PPUSH
53284: CALL_OW 313
53288: PUSH
53289: LD_INT 3
53291: LESS
53292: IFFALSE 53328
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53294: LD_INT 0
53296: PPUSH
53297: LD_INT 5
53299: PUSH
53300: LD_INT 8
53302: PUSH
53303: LD_INT 9
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: LIST
53310: PUSH
53311: LD_VAR 0 17
53315: ARRAY
53316: PPUSH
53317: LD_VAR 0 4
53321: PPUSH
53322: CALL_OW 380
53326: GO 53345
// PrepareHuman ( false , i , skill ) ;
53328: LD_INT 0
53330: PPUSH
53331: LD_VAR 0 8
53335: PPUSH
53336: LD_VAR 0 4
53340: PPUSH
53341: CALL_OW 380
// end else
53345: GO 53364
// PrepareHuman ( false , i , skill ) ;
53347: LD_INT 0
53349: PPUSH
53350: LD_VAR 0 8
53354: PPUSH
53355: LD_VAR 0 4
53359: PPUSH
53360: CALL_OW 380
// un := CreateHuman ;
53364: LD_ADDR_VAR 0 14
53368: PUSH
53369: CALL_OW 44
53373: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53374: LD_ADDR_VAR 0 7
53378: PUSH
53379: LD_VAR 0 7
53383: PPUSH
53384: LD_INT 1
53386: PPUSH
53387: LD_VAR 0 14
53391: PPUSH
53392: CALL_OW 2
53396: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
53397: LD_VAR 0 14
53401: PPUSH
53402: LD_VAR 0 12
53406: PUSH
53407: LD_INT 1
53409: ARRAY
53410: PPUSH
53411: CALL_OW 52
// end ;
53415: GO 53054
53417: POP
53418: POP
// end ;
53419: GO 52356
53421: POP
53422: POP
// result := result ^ buildings ;
53423: LD_ADDR_VAR 0 7
53427: PUSH
53428: LD_VAR 0 7
53432: PUSH
53433: LD_VAR 0 18
53437: ADD
53438: ST_TO_ADDR
// end else
53439: GO 53582
// begin for i = 1 to personel do
53441: LD_ADDR_VAR 0 8
53445: PUSH
53446: DOUBLE
53447: LD_INT 1
53449: DEC
53450: ST_TO_ADDR
53451: LD_VAR 0 6
53455: PUSH
53456: FOR_TO
53457: IFFALSE 53580
// begin if i > 4 then
53459: LD_VAR 0 8
53463: PUSH
53464: LD_INT 4
53466: GREATER
53467: IFFALSE 53471
// break ;
53469: GO 53580
// x := personel [ i ] ;
53471: LD_ADDR_VAR 0 13
53475: PUSH
53476: LD_VAR 0 6
53480: PUSH
53481: LD_VAR 0 8
53485: ARRAY
53486: ST_TO_ADDR
// if x = - 1 then
53487: LD_VAR 0 13
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: EQUAL
53496: IFFALSE 53500
// continue ;
53498: GO 53456
// PrepareHuman ( false , i , skill ) ;
53500: LD_INT 0
53502: PPUSH
53503: LD_VAR 0 8
53507: PPUSH
53508: LD_VAR 0 4
53512: PPUSH
53513: CALL_OW 380
// un := CreateHuman ;
53517: LD_ADDR_VAR 0 14
53521: PUSH
53522: CALL_OW 44
53526: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53527: LD_VAR 0 14
53531: PPUSH
53532: LD_VAR 0 1
53536: PPUSH
53537: CALL_OW 250
53541: PPUSH
53542: LD_VAR 0 1
53546: PPUSH
53547: CALL_OW 251
53551: PPUSH
53552: LD_INT 10
53554: PPUSH
53555: LD_INT 0
53557: PPUSH
53558: CALL_OW 50
// result := result ^ un ;
53562: LD_ADDR_VAR 0 7
53566: PUSH
53567: LD_VAR 0 7
53571: PUSH
53572: LD_VAR 0 14
53576: ADD
53577: ST_TO_ADDR
// end ;
53578: GO 53456
53580: POP
53581: POP
// end ; end ;
53582: LD_VAR 0 7
53586: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53587: LD_INT 0
53589: PPUSH
53590: PPUSH
53591: PPUSH
53592: PPUSH
53593: PPUSH
53594: PPUSH
53595: PPUSH
53596: PPUSH
53597: PPUSH
53598: PPUSH
53599: PPUSH
53600: PPUSH
53601: PPUSH
53602: PPUSH
53603: PPUSH
53604: PPUSH
// result := false ;
53605: LD_ADDR_VAR 0 3
53609: PUSH
53610: LD_INT 0
53612: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53613: LD_VAR 0 1
53617: NOT
53618: PUSH
53619: LD_VAR 0 1
53623: PPUSH
53624: CALL_OW 266
53628: PUSH
53629: LD_INT 32
53631: PUSH
53632: LD_INT 33
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: IN
53639: NOT
53640: OR
53641: IFFALSE 53645
// exit ;
53643: GO 54754
// nat := GetNation ( tower ) ;
53645: LD_ADDR_VAR 0 12
53649: PUSH
53650: LD_VAR 0 1
53654: PPUSH
53655: CALL_OW 248
53659: ST_TO_ADDR
// side := GetSide ( tower ) ;
53660: LD_ADDR_VAR 0 16
53664: PUSH
53665: LD_VAR 0 1
53669: PPUSH
53670: CALL_OW 255
53674: ST_TO_ADDR
// x := GetX ( tower ) ;
53675: LD_ADDR_VAR 0 10
53679: PUSH
53680: LD_VAR 0 1
53684: PPUSH
53685: CALL_OW 250
53689: ST_TO_ADDR
// y := GetY ( tower ) ;
53690: LD_ADDR_VAR 0 11
53694: PUSH
53695: LD_VAR 0 1
53699: PPUSH
53700: CALL_OW 251
53704: ST_TO_ADDR
// if not x or not y then
53705: LD_VAR 0 10
53709: NOT
53710: PUSH
53711: LD_VAR 0 11
53715: NOT
53716: OR
53717: IFFALSE 53721
// exit ;
53719: GO 54754
// weapon := 0 ;
53721: LD_ADDR_VAR 0 18
53725: PUSH
53726: LD_INT 0
53728: ST_TO_ADDR
// fac_list := [ ] ;
53729: LD_ADDR_VAR 0 17
53733: PUSH
53734: EMPTY
53735: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
53736: LD_ADDR_VAR 0 6
53740: PUSH
53741: LD_VAR 0 1
53745: PPUSH
53746: CALL_OW 274
53750: PPUSH
53751: LD_VAR 0 2
53755: PPUSH
53756: LD_INT 0
53758: PPUSH
53759: CALL 51325 0 3
53763: PPUSH
53764: LD_INT 30
53766: PUSH
53767: LD_INT 3
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PPUSH
53774: CALL_OW 72
53778: ST_TO_ADDR
// if not factories then
53779: LD_VAR 0 6
53783: NOT
53784: IFFALSE 53788
// exit ;
53786: GO 54754
// for i in factories do
53788: LD_ADDR_VAR 0 8
53792: PUSH
53793: LD_VAR 0 6
53797: PUSH
53798: FOR_IN
53799: IFFALSE 53824
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53801: LD_ADDR_VAR 0 17
53805: PUSH
53806: LD_VAR 0 17
53810: PUSH
53811: LD_VAR 0 8
53815: PPUSH
53816: CALL_OW 478
53820: UNION
53821: ST_TO_ADDR
53822: GO 53798
53824: POP
53825: POP
// if not fac_list then
53826: LD_VAR 0 17
53830: NOT
53831: IFFALSE 53835
// exit ;
53833: GO 54754
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53835: LD_ADDR_VAR 0 5
53839: PUSH
53840: LD_INT 4
53842: PUSH
53843: LD_INT 5
53845: PUSH
53846: LD_INT 9
53848: PUSH
53849: LD_INT 10
53851: PUSH
53852: LD_INT 6
53854: PUSH
53855: LD_INT 7
53857: PUSH
53858: LD_INT 11
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 27
53872: PUSH
53873: LD_INT 28
53875: PUSH
53876: LD_INT 26
53878: PUSH
53879: LD_INT 30
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 43
53890: PUSH
53891: LD_INT 44
53893: PUSH
53894: LD_INT 46
53896: PUSH
53897: LD_INT 45
53899: PUSH
53900: LD_INT 47
53902: PUSH
53903: LD_INT 49
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: LIST
53918: PUSH
53919: LD_VAR 0 12
53923: ARRAY
53924: ST_TO_ADDR
// list := list isect fac_list ;
53925: LD_ADDR_VAR 0 5
53929: PUSH
53930: LD_VAR 0 5
53934: PUSH
53935: LD_VAR 0 17
53939: ISECT
53940: ST_TO_ADDR
// if not list then
53941: LD_VAR 0 5
53945: NOT
53946: IFFALSE 53950
// exit ;
53948: GO 54754
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
53950: LD_VAR 0 12
53954: PUSH
53955: LD_INT 3
53957: EQUAL
53958: PUSH
53959: LD_INT 49
53961: PUSH
53962: LD_VAR 0 5
53966: IN
53967: AND
53968: PUSH
53969: LD_INT 31
53971: PPUSH
53972: LD_VAR 0 16
53976: PPUSH
53977: CALL_OW 321
53981: PUSH
53982: LD_INT 2
53984: EQUAL
53985: AND
53986: IFFALSE 54046
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
53988: LD_INT 22
53990: PUSH
53991: LD_VAR 0 16
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 35
54002: PUSH
54003: LD_INT 49
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 91
54012: PUSH
54013: LD_VAR 0 1
54017: PUSH
54018: LD_INT 10
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: LIST
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: LIST
54030: PPUSH
54031: CALL_OW 69
54035: NOT
54036: IFFALSE 54046
// weapon := ru_time_lapser ;
54038: LD_ADDR_VAR 0 18
54042: PUSH
54043: LD_INT 49
54045: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54046: LD_VAR 0 12
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 2
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: IN
54061: PUSH
54062: LD_INT 11
54064: PUSH
54065: LD_VAR 0 5
54069: IN
54070: PUSH
54071: LD_INT 30
54073: PUSH
54074: LD_VAR 0 5
54078: IN
54079: OR
54080: AND
54081: PUSH
54082: LD_INT 6
54084: PPUSH
54085: LD_VAR 0 16
54089: PPUSH
54090: CALL_OW 321
54094: PUSH
54095: LD_INT 2
54097: EQUAL
54098: AND
54099: IFFALSE 54264
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54101: LD_INT 22
54103: PUSH
54104: LD_VAR 0 16
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: LD_INT 35
54118: PUSH
54119: LD_INT 11
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 35
54128: PUSH
54129: LD_INT 30
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 91
54143: PUSH
54144: LD_VAR 0 1
54148: PUSH
54149: LD_INT 18
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: LIST
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: LIST
54161: PPUSH
54162: CALL_OW 69
54166: NOT
54167: PUSH
54168: LD_INT 22
54170: PUSH
54171: LD_VAR 0 16
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: LD_INT 30
54185: PUSH
54186: LD_INT 32
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 30
54195: PUSH
54196: LD_INT 33
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 91
54210: PUSH
54211: LD_VAR 0 1
54215: PUSH
54216: LD_INT 12
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: LIST
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: LIST
54228: PUSH
54229: EMPTY
54230: LIST
54231: PPUSH
54232: CALL_OW 69
54236: PUSH
54237: LD_INT 2
54239: GREATER
54240: AND
54241: IFFALSE 54264
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54243: LD_ADDR_VAR 0 18
54247: PUSH
54248: LD_INT 11
54250: PUSH
54251: LD_INT 30
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_VAR 0 12
54262: ARRAY
54263: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54264: LD_VAR 0 18
54268: NOT
54269: PUSH
54270: LD_INT 40
54272: PPUSH
54273: LD_VAR 0 16
54277: PPUSH
54278: CALL_OW 321
54282: PUSH
54283: LD_INT 2
54285: EQUAL
54286: AND
54287: PUSH
54288: LD_INT 7
54290: PUSH
54291: LD_VAR 0 5
54295: IN
54296: PUSH
54297: LD_INT 28
54299: PUSH
54300: LD_VAR 0 5
54304: IN
54305: OR
54306: PUSH
54307: LD_INT 45
54309: PUSH
54310: LD_VAR 0 5
54314: IN
54315: OR
54316: AND
54317: IFFALSE 54571
// begin hex := GetHexInfo ( x , y ) ;
54319: LD_ADDR_VAR 0 4
54323: PUSH
54324: LD_VAR 0 10
54328: PPUSH
54329: LD_VAR 0 11
54333: PPUSH
54334: CALL_OW 546
54338: ST_TO_ADDR
// if hex [ 1 ] then
54339: LD_VAR 0 4
54343: PUSH
54344: LD_INT 1
54346: ARRAY
54347: IFFALSE 54351
// exit ;
54349: GO 54754
// height := hex [ 2 ] ;
54351: LD_ADDR_VAR 0 15
54355: PUSH
54356: LD_VAR 0 4
54360: PUSH
54361: LD_INT 2
54363: ARRAY
54364: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
54365: LD_ADDR_VAR 0 14
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: LD_INT 3
54378: PUSH
54379: LD_INT 5
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: ST_TO_ADDR
// for i in tmp do
54388: LD_ADDR_VAR 0 8
54392: PUSH
54393: LD_VAR 0 14
54397: PUSH
54398: FOR_IN
54399: IFFALSE 54569
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
54401: LD_ADDR_VAR 0 9
54405: PUSH
54406: LD_VAR 0 10
54410: PPUSH
54411: LD_VAR 0 8
54415: PPUSH
54416: LD_INT 5
54418: PPUSH
54419: CALL_OW 272
54423: PUSH
54424: LD_VAR 0 11
54428: PPUSH
54429: LD_VAR 0 8
54433: PPUSH
54434: LD_INT 5
54436: PPUSH
54437: CALL_OW 273
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
54446: LD_VAR 0 9
54450: PUSH
54451: LD_INT 1
54453: ARRAY
54454: PPUSH
54455: LD_VAR 0 9
54459: PUSH
54460: LD_INT 2
54462: ARRAY
54463: PPUSH
54464: CALL_OW 488
54468: IFFALSE 54567
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54470: LD_ADDR_VAR 0 4
54474: PUSH
54475: LD_VAR 0 9
54479: PUSH
54480: LD_INT 1
54482: ARRAY
54483: PPUSH
54484: LD_VAR 0 9
54488: PUSH
54489: LD_INT 2
54491: ARRAY
54492: PPUSH
54493: CALL_OW 546
54497: ST_TO_ADDR
// if hex [ 1 ] then
54498: LD_VAR 0 4
54502: PUSH
54503: LD_INT 1
54505: ARRAY
54506: IFFALSE 54510
// continue ;
54508: GO 54398
// h := hex [ 2 ] ;
54510: LD_ADDR_VAR 0 13
54514: PUSH
54515: LD_VAR 0 4
54519: PUSH
54520: LD_INT 2
54522: ARRAY
54523: ST_TO_ADDR
// if h + 7 < height then
54524: LD_VAR 0 13
54528: PUSH
54529: LD_INT 7
54531: PLUS
54532: PUSH
54533: LD_VAR 0 15
54537: LESS
54538: IFFALSE 54567
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
54540: LD_ADDR_VAR 0 18
54544: PUSH
54545: LD_INT 7
54547: PUSH
54548: LD_INT 28
54550: PUSH
54551: LD_INT 45
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: LIST
54558: PUSH
54559: LD_VAR 0 12
54563: ARRAY
54564: ST_TO_ADDR
// break ;
54565: GO 54569
// end ; end ; end ;
54567: GO 54398
54569: POP
54570: POP
// end ; if not weapon then
54571: LD_VAR 0 18
54575: NOT
54576: IFFALSE 54636
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54578: LD_ADDR_VAR 0 5
54582: PUSH
54583: LD_VAR 0 5
54587: PUSH
54588: LD_INT 11
54590: PUSH
54591: LD_INT 30
54593: PUSH
54594: LD_INT 49
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: LIST
54601: DIFF
54602: ST_TO_ADDR
// if not list then
54603: LD_VAR 0 5
54607: NOT
54608: IFFALSE 54612
// exit ;
54610: GO 54754
// weapon := list [ rand ( 1 , list ) ] ;
54612: LD_ADDR_VAR 0 18
54616: PUSH
54617: LD_VAR 0 5
54621: PUSH
54622: LD_INT 1
54624: PPUSH
54625: LD_VAR 0 5
54629: PPUSH
54630: CALL_OW 12
54634: ARRAY
54635: ST_TO_ADDR
// end ; if weapon then
54636: LD_VAR 0 18
54640: IFFALSE 54754
// begin tmp := CostOfWeapon ( weapon ) ;
54642: LD_ADDR_VAR 0 14
54646: PUSH
54647: LD_VAR 0 18
54651: PPUSH
54652: CALL_OW 451
54656: ST_TO_ADDR
// j := GetBase ( tower ) ;
54657: LD_ADDR_VAR 0 9
54661: PUSH
54662: LD_VAR 0 1
54666: PPUSH
54667: CALL_OW 274
54671: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54672: LD_VAR 0 9
54676: PPUSH
54677: LD_INT 1
54679: PPUSH
54680: CALL_OW 275
54684: PUSH
54685: LD_VAR 0 14
54689: PUSH
54690: LD_INT 1
54692: ARRAY
54693: GREATEREQUAL
54694: PUSH
54695: LD_VAR 0 9
54699: PPUSH
54700: LD_INT 2
54702: PPUSH
54703: CALL_OW 275
54707: PUSH
54708: LD_VAR 0 14
54712: PUSH
54713: LD_INT 2
54715: ARRAY
54716: GREATEREQUAL
54717: AND
54718: PUSH
54719: LD_VAR 0 9
54723: PPUSH
54724: LD_INT 3
54726: PPUSH
54727: CALL_OW 275
54731: PUSH
54732: LD_VAR 0 14
54736: PUSH
54737: LD_INT 3
54739: ARRAY
54740: GREATEREQUAL
54741: AND
54742: IFFALSE 54754
// result := weapon ;
54744: LD_ADDR_VAR 0 3
54748: PUSH
54749: LD_VAR 0 18
54753: ST_TO_ADDR
// end ; end ;
54754: LD_VAR 0 3
54758: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54759: LD_INT 0
54761: PPUSH
54762: PPUSH
// result := true ;
54763: LD_ADDR_VAR 0 3
54767: PUSH
54768: LD_INT 1
54770: ST_TO_ADDR
// if array1 = array2 then
54771: LD_VAR 0 1
54775: PUSH
54776: LD_VAR 0 2
54780: EQUAL
54781: IFFALSE 54841
// begin for i = 1 to array1 do
54783: LD_ADDR_VAR 0 4
54787: PUSH
54788: DOUBLE
54789: LD_INT 1
54791: DEC
54792: ST_TO_ADDR
54793: LD_VAR 0 1
54797: PUSH
54798: FOR_TO
54799: IFFALSE 54837
// if array1 [ i ] <> array2 [ i ] then
54801: LD_VAR 0 1
54805: PUSH
54806: LD_VAR 0 4
54810: ARRAY
54811: PUSH
54812: LD_VAR 0 2
54816: PUSH
54817: LD_VAR 0 4
54821: ARRAY
54822: NONEQUAL
54823: IFFALSE 54835
// begin result := false ;
54825: LD_ADDR_VAR 0 3
54829: PUSH
54830: LD_INT 0
54832: ST_TO_ADDR
// break ;
54833: GO 54837
// end ;
54835: GO 54798
54837: POP
54838: POP
// end else
54839: GO 54849
// result := false ;
54841: LD_ADDR_VAR 0 3
54845: PUSH
54846: LD_INT 0
54848: ST_TO_ADDR
// end ;
54849: LD_VAR 0 3
54853: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54854: LD_INT 0
54856: PPUSH
54857: PPUSH
// if not array1 or not array2 then
54858: LD_VAR 0 1
54862: NOT
54863: PUSH
54864: LD_VAR 0 2
54868: NOT
54869: OR
54870: IFFALSE 54874
// exit ;
54872: GO 54938
// result := true ;
54874: LD_ADDR_VAR 0 3
54878: PUSH
54879: LD_INT 1
54881: ST_TO_ADDR
// for i = 1 to array1 do
54882: LD_ADDR_VAR 0 4
54886: PUSH
54887: DOUBLE
54888: LD_INT 1
54890: DEC
54891: ST_TO_ADDR
54892: LD_VAR 0 1
54896: PUSH
54897: FOR_TO
54898: IFFALSE 54936
// if array1 [ i ] <> array2 [ i ] then
54900: LD_VAR 0 1
54904: PUSH
54905: LD_VAR 0 4
54909: ARRAY
54910: PUSH
54911: LD_VAR 0 2
54915: PUSH
54916: LD_VAR 0 4
54920: ARRAY
54921: NONEQUAL
54922: IFFALSE 54934
// begin result := false ;
54924: LD_ADDR_VAR 0 3
54928: PUSH
54929: LD_INT 0
54931: ST_TO_ADDR
// break ;
54932: GO 54936
// end ;
54934: GO 54897
54936: POP
54937: POP
// end ;
54938: LD_VAR 0 3
54942: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
54943: LD_INT 0
54945: PPUSH
54946: PPUSH
54947: PPUSH
// pom := GetBase ( fac ) ;
54948: LD_ADDR_VAR 0 5
54952: PUSH
54953: LD_VAR 0 1
54957: PPUSH
54958: CALL_OW 274
54962: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
54963: LD_ADDR_VAR 0 4
54967: PUSH
54968: LD_VAR 0 2
54972: PUSH
54973: LD_INT 1
54975: ARRAY
54976: PPUSH
54977: LD_VAR 0 2
54981: PUSH
54982: LD_INT 2
54984: ARRAY
54985: PPUSH
54986: LD_VAR 0 2
54990: PUSH
54991: LD_INT 3
54993: ARRAY
54994: PPUSH
54995: LD_VAR 0 2
54999: PUSH
55000: LD_INT 4
55002: ARRAY
55003: PPUSH
55004: CALL_OW 449
55008: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55009: LD_ADDR_VAR 0 3
55013: PUSH
55014: LD_VAR 0 5
55018: PPUSH
55019: LD_INT 1
55021: PPUSH
55022: CALL_OW 275
55026: PUSH
55027: LD_VAR 0 4
55031: PUSH
55032: LD_INT 1
55034: ARRAY
55035: GREATEREQUAL
55036: PUSH
55037: LD_VAR 0 5
55041: PPUSH
55042: LD_INT 2
55044: PPUSH
55045: CALL_OW 275
55049: PUSH
55050: LD_VAR 0 4
55054: PUSH
55055: LD_INT 2
55057: ARRAY
55058: GREATEREQUAL
55059: AND
55060: PUSH
55061: LD_VAR 0 5
55065: PPUSH
55066: LD_INT 3
55068: PPUSH
55069: CALL_OW 275
55073: PUSH
55074: LD_VAR 0 4
55078: PUSH
55079: LD_INT 3
55081: ARRAY
55082: GREATEREQUAL
55083: AND
55084: ST_TO_ADDR
// end ;
55085: LD_VAR 0 3
55089: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55090: LD_INT 0
55092: PPUSH
55093: PPUSH
55094: PPUSH
55095: PPUSH
// pom := GetBase ( building ) ;
55096: LD_ADDR_VAR 0 3
55100: PUSH
55101: LD_VAR 0 1
55105: PPUSH
55106: CALL_OW 274
55110: ST_TO_ADDR
// if not pom then
55111: LD_VAR 0 3
55115: NOT
55116: IFFALSE 55120
// exit ;
55118: GO 55290
// btype := GetBType ( building ) ;
55120: LD_ADDR_VAR 0 5
55124: PUSH
55125: LD_VAR 0 1
55129: PPUSH
55130: CALL_OW 266
55134: ST_TO_ADDR
// if btype = b_armoury then
55135: LD_VAR 0 5
55139: PUSH
55140: LD_INT 4
55142: EQUAL
55143: IFFALSE 55153
// btype := b_barracks ;
55145: LD_ADDR_VAR 0 5
55149: PUSH
55150: LD_INT 5
55152: ST_TO_ADDR
// if btype = b_depot then
55153: LD_VAR 0 5
55157: PUSH
55158: LD_INT 0
55160: EQUAL
55161: IFFALSE 55171
// btype := b_warehouse ;
55163: LD_ADDR_VAR 0 5
55167: PUSH
55168: LD_INT 1
55170: ST_TO_ADDR
// if btype = b_workshop then
55171: LD_VAR 0 5
55175: PUSH
55176: LD_INT 2
55178: EQUAL
55179: IFFALSE 55189
// btype := b_factory ;
55181: LD_ADDR_VAR 0 5
55185: PUSH
55186: LD_INT 3
55188: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55189: LD_ADDR_VAR 0 4
55193: PUSH
55194: LD_VAR 0 5
55198: PPUSH
55199: LD_VAR 0 1
55203: PPUSH
55204: CALL_OW 248
55208: PPUSH
55209: CALL_OW 450
55213: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55214: LD_ADDR_VAR 0 2
55218: PUSH
55219: LD_VAR 0 3
55223: PPUSH
55224: LD_INT 1
55226: PPUSH
55227: CALL_OW 275
55231: PUSH
55232: LD_VAR 0 4
55236: PUSH
55237: LD_INT 1
55239: ARRAY
55240: GREATEREQUAL
55241: PUSH
55242: LD_VAR 0 3
55246: PPUSH
55247: LD_INT 2
55249: PPUSH
55250: CALL_OW 275
55254: PUSH
55255: LD_VAR 0 4
55259: PUSH
55260: LD_INT 2
55262: ARRAY
55263: GREATEREQUAL
55264: AND
55265: PUSH
55266: LD_VAR 0 3
55270: PPUSH
55271: LD_INT 3
55273: PPUSH
55274: CALL_OW 275
55278: PUSH
55279: LD_VAR 0 4
55283: PUSH
55284: LD_INT 3
55286: ARRAY
55287: GREATEREQUAL
55288: AND
55289: ST_TO_ADDR
// end ;
55290: LD_VAR 0 2
55294: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55295: LD_INT 0
55297: PPUSH
55298: PPUSH
55299: PPUSH
// pom := GetBase ( building ) ;
55300: LD_ADDR_VAR 0 4
55304: PUSH
55305: LD_VAR 0 1
55309: PPUSH
55310: CALL_OW 274
55314: ST_TO_ADDR
// if not pom then
55315: LD_VAR 0 4
55319: NOT
55320: IFFALSE 55324
// exit ;
55322: GO 55425
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55324: LD_ADDR_VAR 0 5
55328: PUSH
55329: LD_VAR 0 2
55333: PPUSH
55334: LD_VAR 0 1
55338: PPUSH
55339: CALL_OW 248
55343: PPUSH
55344: CALL_OW 450
55348: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55349: LD_ADDR_VAR 0 3
55353: PUSH
55354: LD_VAR 0 4
55358: PPUSH
55359: LD_INT 1
55361: PPUSH
55362: CALL_OW 275
55366: PUSH
55367: LD_VAR 0 5
55371: PUSH
55372: LD_INT 1
55374: ARRAY
55375: GREATEREQUAL
55376: PUSH
55377: LD_VAR 0 4
55381: PPUSH
55382: LD_INT 2
55384: PPUSH
55385: CALL_OW 275
55389: PUSH
55390: LD_VAR 0 5
55394: PUSH
55395: LD_INT 2
55397: ARRAY
55398: GREATEREQUAL
55399: AND
55400: PUSH
55401: LD_VAR 0 4
55405: PPUSH
55406: LD_INT 3
55408: PPUSH
55409: CALL_OW 275
55413: PUSH
55414: LD_VAR 0 5
55418: PUSH
55419: LD_INT 3
55421: ARRAY
55422: GREATEREQUAL
55423: AND
55424: ST_TO_ADDR
// end ;
55425: LD_VAR 0 3
55429: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
55430: LD_INT 0
55432: PPUSH
55433: PPUSH
55434: PPUSH
55435: PPUSH
55436: PPUSH
55437: PPUSH
55438: PPUSH
55439: PPUSH
55440: PPUSH
55441: PPUSH
55442: PPUSH
// result := false ;
55443: LD_ADDR_VAR 0 8
55447: PUSH
55448: LD_INT 0
55450: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
55451: LD_VAR 0 5
55455: NOT
55456: PUSH
55457: LD_VAR 0 1
55461: NOT
55462: OR
55463: PUSH
55464: LD_VAR 0 2
55468: NOT
55469: OR
55470: PUSH
55471: LD_VAR 0 3
55475: NOT
55476: OR
55477: IFFALSE 55481
// exit ;
55479: GO 56295
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
55481: LD_ADDR_VAR 0 14
55485: PUSH
55486: LD_VAR 0 1
55490: PPUSH
55491: LD_VAR 0 2
55495: PPUSH
55496: LD_VAR 0 3
55500: PPUSH
55501: LD_VAR 0 4
55505: PPUSH
55506: LD_VAR 0 5
55510: PUSH
55511: LD_INT 1
55513: ARRAY
55514: PPUSH
55515: CALL_OW 248
55519: PPUSH
55520: LD_INT 0
55522: PPUSH
55523: CALL 57548 0 6
55527: ST_TO_ADDR
// if not hexes then
55528: LD_VAR 0 14
55532: NOT
55533: IFFALSE 55537
// exit ;
55535: GO 56295
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55537: LD_ADDR_VAR 0 17
55541: PUSH
55542: LD_VAR 0 5
55546: PPUSH
55547: LD_INT 22
55549: PUSH
55550: LD_VAR 0 13
55554: PPUSH
55555: CALL_OW 255
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: LD_INT 30
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 30
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: LIST
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PPUSH
55596: CALL_OW 72
55600: ST_TO_ADDR
// for i = 1 to hexes do
55601: LD_ADDR_VAR 0 9
55605: PUSH
55606: DOUBLE
55607: LD_INT 1
55609: DEC
55610: ST_TO_ADDR
55611: LD_VAR 0 14
55615: PUSH
55616: FOR_TO
55617: IFFALSE 56293
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55619: LD_ADDR_VAR 0 13
55623: PUSH
55624: LD_VAR 0 14
55628: PUSH
55629: LD_VAR 0 9
55633: ARRAY
55634: PUSH
55635: LD_INT 1
55637: ARRAY
55638: PPUSH
55639: LD_VAR 0 14
55643: PUSH
55644: LD_VAR 0 9
55648: ARRAY
55649: PUSH
55650: LD_INT 2
55652: ARRAY
55653: PPUSH
55654: CALL_OW 428
55658: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55659: LD_VAR 0 14
55663: PUSH
55664: LD_VAR 0 9
55668: ARRAY
55669: PUSH
55670: LD_INT 1
55672: ARRAY
55673: PPUSH
55674: LD_VAR 0 14
55678: PUSH
55679: LD_VAR 0 9
55683: ARRAY
55684: PUSH
55685: LD_INT 2
55687: ARRAY
55688: PPUSH
55689: CALL_OW 351
55693: PUSH
55694: LD_VAR 0 14
55698: PUSH
55699: LD_VAR 0 9
55703: ARRAY
55704: PUSH
55705: LD_INT 1
55707: ARRAY
55708: PPUSH
55709: LD_VAR 0 14
55713: PUSH
55714: LD_VAR 0 9
55718: ARRAY
55719: PUSH
55720: LD_INT 2
55722: ARRAY
55723: PPUSH
55724: CALL_OW 488
55728: NOT
55729: OR
55730: PUSH
55731: LD_VAR 0 13
55735: PPUSH
55736: CALL_OW 247
55740: PUSH
55741: LD_INT 3
55743: EQUAL
55744: OR
55745: IFFALSE 55751
// exit ;
55747: POP
55748: POP
55749: GO 56295
// if not tmp then
55751: LD_VAR 0 13
55755: NOT
55756: IFFALSE 55760
// continue ;
55758: GO 55616
// result := true ;
55760: LD_ADDR_VAR 0 8
55764: PUSH
55765: LD_INT 1
55767: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55768: LD_VAR 0 6
55772: PUSH
55773: LD_VAR 0 13
55777: PPUSH
55778: CALL_OW 247
55782: PUSH
55783: LD_INT 2
55785: EQUAL
55786: AND
55787: PUSH
55788: LD_VAR 0 13
55792: PPUSH
55793: CALL_OW 263
55797: PUSH
55798: LD_INT 1
55800: EQUAL
55801: AND
55802: IFFALSE 55966
// begin if IsDrivenBy ( tmp ) then
55804: LD_VAR 0 13
55808: PPUSH
55809: CALL_OW 311
55813: IFFALSE 55817
// continue ;
55815: GO 55616
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55817: LD_VAR 0 6
55821: PPUSH
55822: LD_INT 3
55824: PUSH
55825: LD_INT 60
55827: PUSH
55828: EMPTY
55829: LIST
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 3
55837: PUSH
55838: LD_INT 55
55840: PUSH
55841: EMPTY
55842: LIST
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PPUSH
55852: CALL_OW 72
55856: IFFALSE 55964
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55858: LD_ADDR_VAR 0 18
55862: PUSH
55863: LD_VAR 0 6
55867: PPUSH
55868: LD_INT 3
55870: PUSH
55871: LD_INT 60
55873: PUSH
55874: EMPTY
55875: LIST
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 3
55883: PUSH
55884: LD_INT 55
55886: PUSH
55887: EMPTY
55888: LIST
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PPUSH
55898: CALL_OW 72
55902: PUSH
55903: LD_INT 1
55905: ARRAY
55906: ST_TO_ADDR
// if IsInUnit ( driver ) then
55907: LD_VAR 0 18
55911: PPUSH
55912: CALL_OW 310
55916: IFFALSE 55927
// ComExit ( driver ) ;
55918: LD_VAR 0 18
55922: PPUSH
55923: CALL 81349 0 1
// AddComEnterUnit ( driver , tmp ) ;
55927: LD_VAR 0 18
55931: PPUSH
55932: LD_VAR 0 13
55936: PPUSH
55937: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
55941: LD_VAR 0 18
55945: PPUSH
55946: LD_VAR 0 7
55950: PPUSH
55951: CALL_OW 173
// AddComExitVehicle ( driver ) ;
55955: LD_VAR 0 18
55959: PPUSH
55960: CALL_OW 181
// end ; continue ;
55964: GO 55616
// end ; if not cleaners or not tmp in cleaners then
55966: LD_VAR 0 6
55970: NOT
55971: PUSH
55972: LD_VAR 0 13
55976: PUSH
55977: LD_VAR 0 6
55981: IN
55982: NOT
55983: OR
55984: IFFALSE 56291
// begin if dep then
55986: LD_VAR 0 17
55990: IFFALSE 56126
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55992: LD_ADDR_VAR 0 16
55996: PUSH
55997: LD_VAR 0 17
56001: PUSH
56002: LD_INT 1
56004: ARRAY
56005: PPUSH
56006: CALL_OW 250
56010: PPUSH
56011: LD_VAR 0 17
56015: PUSH
56016: LD_INT 1
56018: ARRAY
56019: PPUSH
56020: CALL_OW 254
56024: PPUSH
56025: LD_INT 5
56027: PPUSH
56028: CALL_OW 272
56032: PUSH
56033: LD_VAR 0 17
56037: PUSH
56038: LD_INT 1
56040: ARRAY
56041: PPUSH
56042: CALL_OW 251
56046: PPUSH
56047: LD_VAR 0 17
56051: PUSH
56052: LD_INT 1
56054: ARRAY
56055: PPUSH
56056: CALL_OW 254
56060: PPUSH
56061: LD_INT 5
56063: PPUSH
56064: CALL_OW 273
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56073: LD_VAR 0 16
56077: PUSH
56078: LD_INT 1
56080: ARRAY
56081: PPUSH
56082: LD_VAR 0 16
56086: PUSH
56087: LD_INT 2
56089: ARRAY
56090: PPUSH
56091: CALL_OW 488
56095: IFFALSE 56126
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56097: LD_VAR 0 13
56101: PPUSH
56102: LD_VAR 0 16
56106: PUSH
56107: LD_INT 1
56109: ARRAY
56110: PPUSH
56111: LD_VAR 0 16
56115: PUSH
56116: LD_INT 2
56118: ARRAY
56119: PPUSH
56120: CALL_OW 111
// continue ;
56124: GO 55616
// end ; end ; r := GetDir ( tmp ) ;
56126: LD_ADDR_VAR 0 15
56130: PUSH
56131: LD_VAR 0 13
56135: PPUSH
56136: CALL_OW 254
56140: ST_TO_ADDR
// if r = 5 then
56141: LD_VAR 0 15
56145: PUSH
56146: LD_INT 5
56148: EQUAL
56149: IFFALSE 56159
// r := 0 ;
56151: LD_ADDR_VAR 0 15
56155: PUSH
56156: LD_INT 0
56158: ST_TO_ADDR
// for j = r to 5 do
56159: LD_ADDR_VAR 0 10
56163: PUSH
56164: DOUBLE
56165: LD_VAR 0 15
56169: DEC
56170: ST_TO_ADDR
56171: LD_INT 5
56173: PUSH
56174: FOR_TO
56175: IFFALSE 56289
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56177: LD_ADDR_VAR 0 11
56181: PUSH
56182: LD_VAR 0 13
56186: PPUSH
56187: CALL_OW 250
56191: PPUSH
56192: LD_VAR 0 10
56196: PPUSH
56197: LD_INT 2
56199: PPUSH
56200: CALL_OW 272
56204: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56205: LD_ADDR_VAR 0 12
56209: PUSH
56210: LD_VAR 0 13
56214: PPUSH
56215: CALL_OW 251
56219: PPUSH
56220: LD_VAR 0 10
56224: PPUSH
56225: LD_INT 2
56227: PPUSH
56228: CALL_OW 273
56232: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56233: LD_VAR 0 11
56237: PPUSH
56238: LD_VAR 0 12
56242: PPUSH
56243: CALL_OW 488
56247: PUSH
56248: LD_VAR 0 11
56252: PPUSH
56253: LD_VAR 0 12
56257: PPUSH
56258: CALL_OW 428
56262: NOT
56263: AND
56264: IFFALSE 56287
// begin ComMoveXY ( tmp , _x , _y ) ;
56266: LD_VAR 0 13
56270: PPUSH
56271: LD_VAR 0 11
56275: PPUSH
56276: LD_VAR 0 12
56280: PPUSH
56281: CALL_OW 111
// break ;
56285: GO 56289
// end ; end ;
56287: GO 56174
56289: POP
56290: POP
// end ; end ;
56291: GO 55616
56293: POP
56294: POP
// end ;
56295: LD_VAR 0 8
56299: RET
// export function BuildingTechInvented ( side , btype ) ; begin
56300: LD_INT 0
56302: PPUSH
// result := true ;
56303: LD_ADDR_VAR 0 3
56307: PUSH
56308: LD_INT 1
56310: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
56311: LD_VAR 0 2
56315: PUSH
56316: LD_INT 24
56318: DOUBLE
56319: EQUAL
56320: IFTRUE 56330
56322: LD_INT 33
56324: DOUBLE
56325: EQUAL
56326: IFTRUE 56330
56328: GO 56355
56330: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
56331: LD_ADDR_VAR 0 3
56335: PUSH
56336: LD_INT 32
56338: PPUSH
56339: LD_VAR 0 1
56343: PPUSH
56344: CALL_OW 321
56348: PUSH
56349: LD_INT 2
56351: EQUAL
56352: ST_TO_ADDR
56353: GO 56671
56355: LD_INT 20
56357: DOUBLE
56358: EQUAL
56359: IFTRUE 56363
56361: GO 56388
56363: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
56364: LD_ADDR_VAR 0 3
56368: PUSH
56369: LD_INT 6
56371: PPUSH
56372: LD_VAR 0 1
56376: PPUSH
56377: CALL_OW 321
56381: PUSH
56382: LD_INT 2
56384: EQUAL
56385: ST_TO_ADDR
56386: GO 56671
56388: LD_INT 22
56390: DOUBLE
56391: EQUAL
56392: IFTRUE 56402
56394: LD_INT 36
56396: DOUBLE
56397: EQUAL
56398: IFTRUE 56402
56400: GO 56427
56402: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
56403: LD_ADDR_VAR 0 3
56407: PUSH
56408: LD_INT 15
56410: PPUSH
56411: LD_VAR 0 1
56415: PPUSH
56416: CALL_OW 321
56420: PUSH
56421: LD_INT 2
56423: EQUAL
56424: ST_TO_ADDR
56425: GO 56671
56427: LD_INT 30
56429: DOUBLE
56430: EQUAL
56431: IFTRUE 56435
56433: GO 56460
56435: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
56436: LD_ADDR_VAR 0 3
56440: PUSH
56441: LD_INT 20
56443: PPUSH
56444: LD_VAR 0 1
56448: PPUSH
56449: CALL_OW 321
56453: PUSH
56454: LD_INT 2
56456: EQUAL
56457: ST_TO_ADDR
56458: GO 56671
56460: LD_INT 28
56462: DOUBLE
56463: EQUAL
56464: IFTRUE 56474
56466: LD_INT 21
56468: DOUBLE
56469: EQUAL
56470: IFTRUE 56474
56472: GO 56499
56474: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
56475: LD_ADDR_VAR 0 3
56479: PUSH
56480: LD_INT 21
56482: PPUSH
56483: LD_VAR 0 1
56487: PPUSH
56488: CALL_OW 321
56492: PUSH
56493: LD_INT 2
56495: EQUAL
56496: ST_TO_ADDR
56497: GO 56671
56499: LD_INT 16
56501: DOUBLE
56502: EQUAL
56503: IFTRUE 56507
56505: GO 56532
56507: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
56508: LD_ADDR_VAR 0 3
56512: PUSH
56513: LD_INT 84
56515: PPUSH
56516: LD_VAR 0 1
56520: PPUSH
56521: CALL_OW 321
56525: PUSH
56526: LD_INT 2
56528: EQUAL
56529: ST_TO_ADDR
56530: GO 56671
56532: LD_INT 19
56534: DOUBLE
56535: EQUAL
56536: IFTRUE 56546
56538: LD_INT 23
56540: DOUBLE
56541: EQUAL
56542: IFTRUE 56546
56544: GO 56571
56546: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
56547: LD_ADDR_VAR 0 3
56551: PUSH
56552: LD_INT 83
56554: PPUSH
56555: LD_VAR 0 1
56559: PPUSH
56560: CALL_OW 321
56564: PUSH
56565: LD_INT 2
56567: EQUAL
56568: ST_TO_ADDR
56569: GO 56671
56571: LD_INT 17
56573: DOUBLE
56574: EQUAL
56575: IFTRUE 56579
56577: GO 56604
56579: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
56580: LD_ADDR_VAR 0 3
56584: PUSH
56585: LD_INT 39
56587: PPUSH
56588: LD_VAR 0 1
56592: PPUSH
56593: CALL_OW 321
56597: PUSH
56598: LD_INT 2
56600: EQUAL
56601: ST_TO_ADDR
56602: GO 56671
56604: LD_INT 18
56606: DOUBLE
56607: EQUAL
56608: IFTRUE 56612
56610: GO 56637
56612: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56613: LD_ADDR_VAR 0 3
56617: PUSH
56618: LD_INT 40
56620: PPUSH
56621: LD_VAR 0 1
56625: PPUSH
56626: CALL_OW 321
56630: PUSH
56631: LD_INT 2
56633: EQUAL
56634: ST_TO_ADDR
56635: GO 56671
56637: LD_INT 27
56639: DOUBLE
56640: EQUAL
56641: IFTRUE 56645
56643: GO 56670
56645: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56646: LD_ADDR_VAR 0 3
56650: PUSH
56651: LD_INT 35
56653: PPUSH
56654: LD_VAR 0 1
56658: PPUSH
56659: CALL_OW 321
56663: PUSH
56664: LD_INT 2
56666: EQUAL
56667: ST_TO_ADDR
56668: GO 56671
56670: POP
// end ;
56671: LD_VAR 0 3
56675: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56676: LD_INT 0
56678: PPUSH
56679: PPUSH
56680: PPUSH
56681: PPUSH
56682: PPUSH
56683: PPUSH
56684: PPUSH
56685: PPUSH
56686: PPUSH
56687: PPUSH
56688: PPUSH
// result := false ;
56689: LD_ADDR_VAR 0 6
56693: PUSH
56694: LD_INT 0
56696: ST_TO_ADDR
// if btype = b_depot then
56697: LD_VAR 0 2
56701: PUSH
56702: LD_INT 0
56704: EQUAL
56705: IFFALSE 56717
// begin result := true ;
56707: LD_ADDR_VAR 0 6
56711: PUSH
56712: LD_INT 1
56714: ST_TO_ADDR
// exit ;
56715: GO 57543
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56717: LD_VAR 0 1
56721: NOT
56722: PUSH
56723: LD_VAR 0 1
56727: PPUSH
56728: CALL_OW 266
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: IN
56743: NOT
56744: OR
56745: PUSH
56746: LD_VAR 0 2
56750: NOT
56751: OR
56752: PUSH
56753: LD_VAR 0 5
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: LD_INT 3
56769: PUSH
56770: LD_INT 4
56772: PUSH
56773: LD_INT 5
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: IN
56784: NOT
56785: OR
56786: PUSH
56787: LD_VAR 0 3
56791: PPUSH
56792: LD_VAR 0 4
56796: PPUSH
56797: CALL_OW 488
56801: NOT
56802: OR
56803: IFFALSE 56807
// exit ;
56805: GO 57543
// side := GetSide ( depot ) ;
56807: LD_ADDR_VAR 0 9
56811: PUSH
56812: LD_VAR 0 1
56816: PPUSH
56817: CALL_OW 255
56821: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56822: LD_VAR 0 9
56826: PPUSH
56827: LD_VAR 0 2
56831: PPUSH
56832: CALL 56300 0 2
56836: NOT
56837: IFFALSE 56841
// exit ;
56839: GO 57543
// pom := GetBase ( depot ) ;
56841: LD_ADDR_VAR 0 10
56845: PUSH
56846: LD_VAR 0 1
56850: PPUSH
56851: CALL_OW 274
56855: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56856: LD_ADDR_VAR 0 11
56860: PUSH
56861: LD_VAR 0 2
56865: PPUSH
56866: LD_VAR 0 1
56870: PPUSH
56871: CALL_OW 248
56875: PPUSH
56876: CALL_OW 450
56880: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56881: LD_VAR 0 10
56885: PPUSH
56886: LD_INT 1
56888: PPUSH
56889: CALL_OW 275
56893: PUSH
56894: LD_VAR 0 11
56898: PUSH
56899: LD_INT 1
56901: ARRAY
56902: GREATEREQUAL
56903: PUSH
56904: LD_VAR 0 10
56908: PPUSH
56909: LD_INT 2
56911: PPUSH
56912: CALL_OW 275
56916: PUSH
56917: LD_VAR 0 11
56921: PUSH
56922: LD_INT 2
56924: ARRAY
56925: GREATEREQUAL
56926: AND
56927: PUSH
56928: LD_VAR 0 10
56932: PPUSH
56933: LD_INT 3
56935: PPUSH
56936: CALL_OW 275
56940: PUSH
56941: LD_VAR 0 11
56945: PUSH
56946: LD_INT 3
56948: ARRAY
56949: GREATEREQUAL
56950: AND
56951: NOT
56952: IFFALSE 56956
// exit ;
56954: GO 57543
// if GetBType ( depot ) = b_depot then
56956: LD_VAR 0 1
56960: PPUSH
56961: CALL_OW 266
56965: PUSH
56966: LD_INT 0
56968: EQUAL
56969: IFFALSE 56981
// dist := 28 else
56971: LD_ADDR_VAR 0 14
56975: PUSH
56976: LD_INT 28
56978: ST_TO_ADDR
56979: GO 56989
// dist := 36 ;
56981: LD_ADDR_VAR 0 14
56985: PUSH
56986: LD_INT 36
56988: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56989: LD_VAR 0 1
56993: PPUSH
56994: LD_VAR 0 3
56998: PPUSH
56999: LD_VAR 0 4
57003: PPUSH
57004: CALL_OW 297
57008: PUSH
57009: LD_VAR 0 14
57013: GREATER
57014: IFFALSE 57018
// exit ;
57016: GO 57543
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57018: LD_ADDR_VAR 0 12
57022: PUSH
57023: LD_VAR 0 2
57027: PPUSH
57028: LD_VAR 0 3
57032: PPUSH
57033: LD_VAR 0 4
57037: PPUSH
57038: LD_VAR 0 5
57042: PPUSH
57043: LD_VAR 0 1
57047: PPUSH
57048: CALL_OW 248
57052: PPUSH
57053: LD_INT 0
57055: PPUSH
57056: CALL 57548 0 6
57060: ST_TO_ADDR
// if not hexes then
57061: LD_VAR 0 12
57065: NOT
57066: IFFALSE 57070
// exit ;
57068: GO 57543
// hex := GetHexInfo ( x , y ) ;
57070: LD_ADDR_VAR 0 15
57074: PUSH
57075: LD_VAR 0 3
57079: PPUSH
57080: LD_VAR 0 4
57084: PPUSH
57085: CALL_OW 546
57089: ST_TO_ADDR
// if hex [ 1 ] then
57090: LD_VAR 0 15
57094: PUSH
57095: LD_INT 1
57097: ARRAY
57098: IFFALSE 57102
// exit ;
57100: GO 57543
// height := hex [ 2 ] ;
57102: LD_ADDR_VAR 0 13
57106: PUSH
57107: LD_VAR 0 15
57111: PUSH
57112: LD_INT 2
57114: ARRAY
57115: ST_TO_ADDR
// for i = 1 to hexes do
57116: LD_ADDR_VAR 0 7
57120: PUSH
57121: DOUBLE
57122: LD_INT 1
57124: DEC
57125: ST_TO_ADDR
57126: LD_VAR 0 12
57130: PUSH
57131: FOR_TO
57132: IFFALSE 57462
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57134: LD_VAR 0 12
57138: PUSH
57139: LD_VAR 0 7
57143: ARRAY
57144: PUSH
57145: LD_INT 1
57147: ARRAY
57148: PPUSH
57149: LD_VAR 0 12
57153: PUSH
57154: LD_VAR 0 7
57158: ARRAY
57159: PUSH
57160: LD_INT 2
57162: ARRAY
57163: PPUSH
57164: CALL_OW 488
57168: NOT
57169: PUSH
57170: LD_VAR 0 12
57174: PUSH
57175: LD_VAR 0 7
57179: ARRAY
57180: PUSH
57181: LD_INT 1
57183: ARRAY
57184: PPUSH
57185: LD_VAR 0 12
57189: PUSH
57190: LD_VAR 0 7
57194: ARRAY
57195: PUSH
57196: LD_INT 2
57198: ARRAY
57199: PPUSH
57200: CALL_OW 428
57204: PUSH
57205: LD_INT 0
57207: GREATER
57208: OR
57209: PUSH
57210: LD_VAR 0 12
57214: PUSH
57215: LD_VAR 0 7
57219: ARRAY
57220: PUSH
57221: LD_INT 1
57223: ARRAY
57224: PPUSH
57225: LD_VAR 0 12
57229: PUSH
57230: LD_VAR 0 7
57234: ARRAY
57235: PUSH
57236: LD_INT 2
57238: ARRAY
57239: PPUSH
57240: CALL_OW 351
57244: OR
57245: IFFALSE 57251
// exit ;
57247: POP
57248: POP
57249: GO 57543
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57251: LD_ADDR_VAR 0 8
57255: PUSH
57256: LD_VAR 0 12
57260: PUSH
57261: LD_VAR 0 7
57265: ARRAY
57266: PUSH
57267: LD_INT 1
57269: ARRAY
57270: PPUSH
57271: LD_VAR 0 12
57275: PUSH
57276: LD_VAR 0 7
57280: ARRAY
57281: PUSH
57282: LD_INT 2
57284: ARRAY
57285: PPUSH
57286: CALL_OW 546
57290: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
57291: LD_VAR 0 8
57295: PUSH
57296: LD_INT 1
57298: ARRAY
57299: PUSH
57300: LD_VAR 0 8
57304: PUSH
57305: LD_INT 2
57307: ARRAY
57308: PUSH
57309: LD_VAR 0 13
57313: PUSH
57314: LD_INT 2
57316: PLUS
57317: GREATER
57318: OR
57319: PUSH
57320: LD_VAR 0 8
57324: PUSH
57325: LD_INT 2
57327: ARRAY
57328: PUSH
57329: LD_VAR 0 13
57333: PUSH
57334: LD_INT 2
57336: MINUS
57337: LESS
57338: OR
57339: PUSH
57340: LD_VAR 0 8
57344: PUSH
57345: LD_INT 3
57347: ARRAY
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 8
57354: PUSH
57355: LD_INT 9
57357: PUSH
57358: LD_INT 10
57360: PUSH
57361: LD_INT 11
57363: PUSH
57364: LD_INT 12
57366: PUSH
57367: LD_INT 13
57369: PUSH
57370: LD_INT 16
57372: PUSH
57373: LD_INT 17
57375: PUSH
57376: LD_INT 18
57378: PUSH
57379: LD_INT 19
57381: PUSH
57382: LD_INT 20
57384: PUSH
57385: LD_INT 21
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: IN
57403: NOT
57404: OR
57405: PUSH
57406: LD_VAR 0 8
57410: PUSH
57411: LD_INT 5
57413: ARRAY
57414: NOT
57415: OR
57416: PUSH
57417: LD_VAR 0 8
57421: PUSH
57422: LD_INT 6
57424: ARRAY
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 7
57434: PUSH
57435: LD_INT 9
57437: PUSH
57438: LD_INT 10
57440: PUSH
57441: LD_INT 11
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: IN
57452: NOT
57453: OR
57454: IFFALSE 57460
// exit ;
57456: POP
57457: POP
57458: GO 57543
// end ;
57460: GO 57131
57462: POP
57463: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57464: LD_VAR 0 9
57468: PPUSH
57469: LD_VAR 0 3
57473: PPUSH
57474: LD_VAR 0 4
57478: PPUSH
57479: LD_INT 20
57481: PPUSH
57482: CALL 49466 0 4
57486: PUSH
57487: LD_INT 4
57489: ARRAY
57490: IFFALSE 57494
// exit ;
57492: GO 57543
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57494: LD_VAR 0 2
57498: PUSH
57499: LD_INT 29
57501: PUSH
57502: LD_INT 30
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: IN
57509: PUSH
57510: LD_VAR 0 3
57514: PPUSH
57515: LD_VAR 0 4
57519: PPUSH
57520: LD_VAR 0 9
57524: PPUSH
57525: CALL_OW 440
57529: NOT
57530: AND
57531: IFFALSE 57535
// exit ;
57533: GO 57543
// result := true ;
57535: LD_ADDR_VAR 0 6
57539: PUSH
57540: LD_INT 1
57542: ST_TO_ADDR
// end ;
57543: LD_VAR 0 6
57547: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
57548: LD_INT 0
57550: PPUSH
57551: PPUSH
57552: PPUSH
57553: PPUSH
57554: PPUSH
57555: PPUSH
57556: PPUSH
57557: PPUSH
57558: PPUSH
57559: PPUSH
57560: PPUSH
57561: PPUSH
57562: PPUSH
57563: PPUSH
57564: PPUSH
57565: PPUSH
57566: PPUSH
57567: PPUSH
57568: PPUSH
57569: PPUSH
57570: PPUSH
57571: PPUSH
57572: PPUSH
57573: PPUSH
57574: PPUSH
57575: PPUSH
57576: PPUSH
57577: PPUSH
57578: PPUSH
57579: PPUSH
57580: PPUSH
57581: PPUSH
57582: PPUSH
57583: PPUSH
57584: PPUSH
57585: PPUSH
57586: PPUSH
57587: PPUSH
57588: PPUSH
57589: PPUSH
57590: PPUSH
57591: PPUSH
57592: PPUSH
57593: PPUSH
57594: PPUSH
57595: PPUSH
57596: PPUSH
57597: PPUSH
57598: PPUSH
57599: PPUSH
57600: PPUSH
57601: PPUSH
57602: PPUSH
57603: PPUSH
57604: PPUSH
57605: PPUSH
57606: PPUSH
57607: PPUSH
// result = [ ] ;
57608: LD_ADDR_VAR 0 7
57612: PUSH
57613: EMPTY
57614: ST_TO_ADDR
// temp_list = [ ] ;
57615: LD_ADDR_VAR 0 9
57619: PUSH
57620: EMPTY
57621: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57622: LD_VAR 0 4
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: LD_INT 2
57635: PUSH
57636: LD_INT 3
57638: PUSH
57639: LD_INT 4
57641: PUSH
57642: LD_INT 5
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: IN
57653: NOT
57654: PUSH
57655: LD_VAR 0 1
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: IN
57670: PUSH
57671: LD_VAR 0 5
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: LD_INT 3
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: LIST
57689: IN
57690: NOT
57691: AND
57692: OR
57693: IFFALSE 57697
// exit ;
57695: GO 76088
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57697: LD_VAR 0 1
57701: PUSH
57702: LD_INT 6
57704: PUSH
57705: LD_INT 7
57707: PUSH
57708: LD_INT 8
57710: PUSH
57711: LD_INT 13
57713: PUSH
57714: LD_INT 12
57716: PUSH
57717: LD_INT 15
57719: PUSH
57720: LD_INT 11
57722: PUSH
57723: LD_INT 14
57725: PUSH
57726: LD_INT 10
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: IN
57740: IFFALSE 57750
// btype = b_lab ;
57742: LD_ADDR_VAR 0 1
57746: PUSH
57747: LD_INT 6
57749: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57750: LD_VAR 0 6
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: LIST
57768: IN
57769: NOT
57770: PUSH
57771: LD_VAR 0 1
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: LD_INT 3
57787: PUSH
57788: LD_INT 6
57790: PUSH
57791: LD_INT 36
57793: PUSH
57794: LD_INT 4
57796: PUSH
57797: LD_INT 5
57799: PUSH
57800: LD_INT 31
57802: PUSH
57803: LD_INT 32
57805: PUSH
57806: LD_INT 33
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: IN
57822: NOT
57823: PUSH
57824: LD_VAR 0 6
57828: PUSH
57829: LD_INT 1
57831: EQUAL
57832: AND
57833: OR
57834: PUSH
57835: LD_VAR 0 1
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: LD_INT 3
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: IN
57850: NOT
57851: PUSH
57852: LD_VAR 0 6
57856: PUSH
57857: LD_INT 2
57859: EQUAL
57860: AND
57861: OR
57862: IFFALSE 57872
// mode = 0 ;
57864: LD_ADDR_VAR 0 6
57868: PUSH
57869: LD_INT 0
57871: ST_TO_ADDR
// case mode of 0 :
57872: LD_VAR 0 6
57876: PUSH
57877: LD_INT 0
57879: DOUBLE
57880: EQUAL
57881: IFTRUE 57885
57883: GO 69338
57885: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57886: LD_ADDR_VAR 0 11
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: LD_INT 2
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 3
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: LD_INT 3
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58079: LD_ADDR_VAR 0 12
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 1
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 2
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 2
58213: NEG
58214: PUSH
58215: LD_INT 1
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 2
58225: NEG
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 3
58236: NEG
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 3
58247: NEG
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58275: LD_ADDR_VAR 0 13
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: LD_INT 2
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 2
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: LD_INT 2
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: LD_INT 2
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 2
58398: NEG
58399: PUSH
58400: LD_INT 1
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: LD_INT 2
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 2
58422: NEG
58423: PUSH
58424: LD_INT 3
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 3
58434: NEG
58435: PUSH
58436: LD_INT 2
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 3
58446: NEG
58447: PUSH
58448: LD_INT 3
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58474: LD_ADDR_VAR 0 14
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: LD_INT 2
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: LD_INT 2
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: LD_INT 3
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: LD_INT 3
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58670: LD_ADDR_VAR 0 15
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 2
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 2
58793: NEG
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: NEG
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 2
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 3
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 3
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58863: LD_ADDR_VAR 0 16
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: LD_INT 2
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: LD_INT 2
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 3
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 3
59020: PUSH
59021: LD_INT 3
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 2
59030: PUSH
59031: LD_INT 3
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59056: LD_ADDR_VAR 0 17
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: LD_INT 2
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: LD_INT 2
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 2
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 2
59191: PUSH
59192: LD_INT 2
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 0
59211: PUSH
59212: LD_INT 2
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: NEG
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 2
59232: NEG
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 2
59255: NEG
59256: PUSH
59257: LD_INT 2
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59286: LD_ADDR_VAR 0 18
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: LD_INT 2
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 2
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 2
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 2
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: LD_INT 1
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59516: LD_ADDR_VAR 0 19
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 2
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 2
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 2
59651: PUSH
59652: LD_INT 2
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: LD_INT 2
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: LD_INT 2
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 2
59692: NEG
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 2
59703: NEG
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 2
59715: NEG
59716: PUSH
59717: LD_INT 2
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59746: LD_ADDR_VAR 0 20
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: NEG
59828: PUSH
59829: LD_INT 2
59831: NEG
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: LD_INT 2
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 2
59881: PUSH
59882: LD_INT 2
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: LD_INT 2
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: LD_INT 2
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 2
59922: NEG
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 2
59933: NEG
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 2
59945: NEG
59946: PUSH
59947: LD_INT 2
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59976: LD_ADDR_VAR 0 21
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: LD_INT 1
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 2
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: LD_INT 2
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 2
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 2
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 1
60141: NEG
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 2
60152: NEG
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 2
60163: NEG
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 2
60175: NEG
60176: PUSH
60177: LD_INT 2
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60206: LD_ADDR_VAR 0 22
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: LD_INT 1
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: LD_INT 1
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: LD_INT 2
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: LD_INT 2
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: LD_INT 1
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 2
60382: NEG
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 2
60393: NEG
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: LD_INT 2
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60436: LD_ADDR_VAR 0 23
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: LD_INT 1
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: LD_INT 1
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: LD_INT 2
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: LD_INT 2
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 2
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: LD_INT 2
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 2
60612: NEG
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 2
60623: NEG
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: LD_INT 2
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 2
60647: NEG
60648: PUSH
60649: LD_INT 3
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 1
60659: NEG
60660: PUSH
60661: LD_INT 3
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 2
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60716: LD_ADDR_VAR 0 24
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: LD_INT 1
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 1
60774: NEG
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: LD_INT 2
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: LD_INT 2
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 1
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: LD_INT 2
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: LD_INT 2
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: LD_INT 2
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: NEG
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 2
60903: NEG
60904: PUSH
60905: LD_INT 1
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 2
60915: NEG
60916: PUSH
60917: LD_INT 2
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: LD_INT 2
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 2
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 3
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 3
60959: PUSH
60960: LD_INT 2
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60992: LD_ADDR_VAR 0 25
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: LD_INT 1
61065: NEG
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: LD_INT 2
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: LD_INT 2
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: LD_INT 2
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 0
61147: PUSH
61148: LD_INT 2
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: NEG
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 2
61168: NEG
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 2
61179: NEG
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 2
61191: NEG
61192: PUSH
61193: LD_INT 2
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 3
61203: PUSH
61204: LD_INT 1
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 3
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 2
61223: PUSH
61224: LD_INT 3
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: LD_INT 3
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61266: LD_ADDR_VAR 0 26
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: LD_INT 1
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 1
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: NEG
61336: PUSH
61337: LD_INT 1
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: LD_INT 2
61351: NEG
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 2
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: LD_INT 1
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 2
61401: PUSH
61402: LD_INT 2
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: LD_INT 2
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: LD_INT 2
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: NEG
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 2
61442: NEG
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 2
61453: NEG
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 2
61465: NEG
61466: PUSH
61467: LD_INT 2
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 2
61477: PUSH
61478: LD_INT 3
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 1
61487: PUSH
61488: LD_INT 3
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: LD_INT 2
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61542: LD_ADDR_VAR 0 27
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 1
61570: PUSH
61571: LD_INT 0
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: LD_INT 2
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: LD_INT 2
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 2
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 2
61667: PUSH
61668: LD_INT 1
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 2
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 1
61687: PUSH
61688: LD_INT 2
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 0
61697: PUSH
61698: LD_INT 2
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 2
61718: NEG
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 2
61729: NEG
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 2
61741: NEG
61742: PUSH
61743: LD_INT 2
61745: NEG
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 2
61764: NEG
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 3
61775: NEG
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 3
61787: NEG
61788: PUSH
61789: LD_INT 2
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61822: LD_ADDR_VAR 0 28
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: LD_INT 1
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: LD_INT 2
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 0
61915: PUSH
61916: LD_INT 2
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: PUSH
61927: LD_INT 1
61929: NEG
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: LD_INT 2
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: LD_INT 2
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 0
61977: PUSH
61978: LD_INT 2
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: LD_INT 1
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 2
61998: NEG
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 2
62009: NEG
62010: PUSH
62011: LD_INT 1
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 2
62021: NEG
62022: PUSH
62023: LD_INT 2
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 2
62033: NEG
62034: PUSH
62035: LD_INT 3
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: LD_INT 3
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 3
62057: NEG
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 3
62069: NEG
62070: PUSH
62071: LD_INT 2
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62104: LD_ADDR_VAR 0 29
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: NEG
62163: PUSH
62164: LD_INT 0
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 1
62185: NEG
62186: PUSH
62187: LD_INT 2
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 2
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: LD_INT 1
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 2
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 2
62229: PUSH
62230: LD_INT 1
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: LD_INT 2
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: LD_INT 2
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 2
62270: NEG
62271: PUSH
62272: LD_INT 1
62274: NEG
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 2
62282: NEG
62283: PUSH
62284: LD_INT 2
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: NEG
62295: PUSH
62296: LD_INT 3
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 2
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 3
62317: PUSH
62318: LD_INT 1
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: LD_INT 3
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: NEG
62338: PUSH
62339: LD_INT 2
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 3
62348: NEG
62349: PUSH
62350: LD_INT 2
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62383: LD_ADDR_VAR 0 30
62387: PUSH
62388: LD_INT 0
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 1
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 1
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: LD_INT 1
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: LD_INT 0
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 1
62452: NEG
62453: PUSH
62454: LD_INT 1
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 1
62464: NEG
62465: PUSH
62466: LD_INT 2
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: LD_INT 2
62479: NEG
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: LD_INT 1
62490: NEG
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 2
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 2
62508: PUSH
62509: LD_INT 1
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 2
62518: PUSH
62519: LD_INT 2
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: LD_INT 2
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: LD_INT 1
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 2
62549: NEG
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: LD_INT 1
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 1
62572: NEG
62573: PUSH
62574: LD_INT 3
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 1
62584: PUSH
62585: LD_INT 2
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 3
62595: PUSH
62596: LD_INT 2
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 2
62605: PUSH
62606: LD_INT 3
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 2
62615: NEG
62616: PUSH
62617: LD_INT 1
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 3
62626: NEG
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62661: LD_ADDR_VAR 0 31
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: LD_INT 1
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: LD_INT 0
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 0
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: LD_INT 2
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 1
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 2
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 2
62775: PUSH
62776: LD_INT 1
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: PUSH
62786: LD_INT 2
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: LD_INT 2
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: LD_INT 2
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 1
62815: NEG
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 2
62826: NEG
62827: PUSH
62828: LD_INT 1
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 2
62838: NEG
62839: PUSH
62840: LD_INT 2
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 2
62850: NEG
62851: PUSH
62852: LD_INT 3
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 2
62862: PUSH
62863: LD_INT 1
62865: NEG
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 3
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 1
62883: PUSH
62884: LD_INT 3
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: NEG
62894: PUSH
62895: LD_INT 2
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 3
62904: NEG
62905: PUSH
62906: LD_INT 2
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62939: LD_ADDR_VAR 0 32
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: LD_INT 1
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 0
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 1
63020: NEG
63021: PUSH
63022: LD_INT 2
63024: NEG
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: LD_INT 2
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 1
63043: PUSH
63044: LD_INT 1
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 2
63054: PUSH
63055: LD_INT 1
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 2
63064: PUSH
63065: LD_INT 2
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: PUSH
63075: LD_INT 2
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: LD_INT 2
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: LD_INT 1
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 2
63105: NEG
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 2
63116: NEG
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: LD_INT 3
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 1
63140: PUSH
63141: LD_INT 2
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 3
63151: PUSH
63152: LD_INT 2
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 2
63161: PUSH
63162: LD_INT 3
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 2
63171: NEG
63172: PUSH
63173: LD_INT 1
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 3
63182: NEG
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63217: LD_ADDR_VAR 0 33
63221: PUSH
63222: LD_INT 0
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 1
63245: PUSH
63246: LD_INT 0
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 1
63255: PUSH
63256: LD_INT 1
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 1
63275: NEG
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: LD_INT 1
63290: NEG
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 1
63298: NEG
63299: PUSH
63300: LD_INT 2
63302: NEG
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: LD_INT 1
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 2
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 2
63331: PUSH
63332: LD_INT 1
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: LD_INT 2
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: LD_INT 2
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: NEG
63362: PUSH
63363: LD_INT 1
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 2
63372: NEG
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 2
63383: NEG
63384: PUSH
63385: LD_INT 1
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 2
63395: NEG
63396: PUSH
63397: LD_INT 2
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 2
63407: NEG
63408: PUSH
63409: LD_INT 3
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 2
63419: PUSH
63420: LD_INT 1
63422: NEG
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 3
63430: PUSH
63431: LD_INT 1
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: LD_INT 3
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: LD_INT 2
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 3
63461: NEG
63462: PUSH
63463: LD_INT 2
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63496: LD_ADDR_VAR 0 34
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 1
63534: PUSH
63535: LD_INT 1
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 1
63554: NEG
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: NEG
63578: PUSH
63579: LD_INT 2
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: LD_INT 2
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 1
63600: PUSH
63601: LD_INT 1
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 2
63621: PUSH
63622: LD_INT 2
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: PUSH
63632: LD_INT 2
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 1
63641: NEG
63642: PUSH
63643: LD_INT 1
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 2
63652: NEG
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 2
63663: NEG
63664: PUSH
63665: LD_INT 1
63667: NEG
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 2
63675: NEG
63676: PUSH
63677: LD_INT 2
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 1
63687: NEG
63688: PUSH
63689: LD_INT 3
63691: NEG
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: LD_INT 2
63702: NEG
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 3
63710: PUSH
63711: LD_INT 2
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 2
63720: PUSH
63721: LD_INT 3
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 2
63730: NEG
63731: PUSH
63732: LD_INT 1
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 3
63741: NEG
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63776: LD_ADDR_VAR 0 35
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: LD_INT 1
63796: NEG
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 1
63804: PUSH
63805: LD_INT 0
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 1
63814: PUSH
63815: LD_INT 1
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 0
63824: PUSH
63825: LD_INT 1
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 1
63834: NEG
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 2
63857: PUSH
63858: LD_INT 1
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 2
63867: NEG
63868: PUSH
63869: LD_INT 1
63871: NEG
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63888: LD_ADDR_VAR 0 36
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 1
63916: PUSH
63917: LD_INT 0
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 1
63926: PUSH
63927: LD_INT 1
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: LD_INT 1
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 1
63946: NEG
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: LD_INT 2
63973: NEG
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 1
63981: PUSH
63982: LD_INT 2
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64000: LD_ADDR_VAR 0 37
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 1
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 1
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: LD_INT 0
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 1
64069: NEG
64070: PUSH
64071: LD_INT 1
64073: NEG
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: NEG
64093: PUSH
64094: LD_INT 1
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64112: LD_ADDR_VAR 0 38
64116: PUSH
64117: LD_INT 0
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: LD_INT 1
64132: NEG
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 1
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: LD_INT 1
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: LD_INT 1
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 1
64170: NEG
64171: PUSH
64172: LD_INT 0
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 1
64181: NEG
64182: PUSH
64183: LD_INT 1
64185: NEG
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 2
64193: PUSH
64194: LD_INT 1
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 2
64203: NEG
64204: PUSH
64205: LD_INT 1
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64224: LD_ADDR_VAR 0 39
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: LD_INT 1
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: LD_INT 1
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: LD_INT 1
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 1
64282: NEG
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 1
64293: NEG
64294: PUSH
64295: LD_INT 1
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 1
64305: NEG
64306: PUSH
64307: LD_INT 2
64309: NEG
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64336: LD_ADDR_VAR 0 40
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 1
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: LD_INT 1
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 0
64384: PUSH
64385: LD_INT 1
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 1
64394: NEG
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 1
64405: NEG
64406: PUSH
64407: LD_INT 1
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 1
64417: PUSH
64418: LD_INT 1
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 1
64428: NEG
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64448: LD_ADDR_VAR 0 41
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: LD_INT 0
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 0
64465: PUSH
64466: LD_INT 1
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 1
64486: PUSH
64487: LD_INT 1
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 1
64506: NEG
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: NEG
64518: PUSH
64519: LD_INT 1
64521: NEG
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 1
64529: NEG
64530: PUSH
64531: LD_INT 2
64533: NEG
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 2
64552: PUSH
64553: LD_INT 0
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 2
64562: PUSH
64563: LD_INT 1
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 2
64572: PUSH
64573: LD_INT 2
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 1
64582: PUSH
64583: LD_INT 2
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 1
64592: NEG
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 2
64603: NEG
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 2
64614: NEG
64615: PUSH
64616: LD_INT 1
64618: NEG
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 2
64626: NEG
64627: PUSH
64628: LD_INT 2
64630: NEG
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 2
64638: NEG
64639: PUSH
64640: LD_INT 3
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 2
64650: PUSH
64651: LD_INT 1
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 3
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 3
64671: PUSH
64672: LD_INT 1
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 3
64681: PUSH
64682: LD_INT 2
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 3
64691: PUSH
64692: LD_INT 3
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 2
64701: PUSH
64702: LD_INT 3
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 2
64711: NEG
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 3
64722: NEG
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 3
64733: NEG
64734: PUSH
64735: LD_INT 1
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 3
64745: NEG
64746: PUSH
64747: LD_INT 2
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 3
64757: NEG
64758: PUSH
64759: LD_INT 3
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64798: LD_ADDR_VAR 0 42
64802: PUSH
64803: LD_INT 0
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: LD_INT 1
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 1
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 1
64836: PUSH
64837: LD_INT 1
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 0
64846: PUSH
64847: LD_INT 1
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 1
64856: NEG
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 1
64867: NEG
64868: PUSH
64869: LD_INT 1
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 1
64879: NEG
64880: PUSH
64881: LD_INT 2
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: LD_INT 2
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: LD_INT 1
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 2
64913: PUSH
64914: LD_INT 1
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 2
64923: PUSH
64924: LD_INT 2
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 1
64933: PUSH
64934: LD_INT 2
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: LD_INT 2
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 1
64953: NEG
64954: PUSH
64955: LD_INT 1
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 2
64964: NEG
64965: PUSH
64966: LD_INT 1
64968: NEG
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 2
64976: NEG
64977: PUSH
64978: LD_INT 2
64980: NEG
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 2
64988: NEG
64989: PUSH
64990: LD_INT 3
64992: NEG
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 1
65000: NEG
65001: PUSH
65002: LD_INT 3
65004: NEG
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 0
65012: PUSH
65013: LD_INT 3
65015: NEG
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 1
65023: PUSH
65024: LD_INT 2
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 3
65034: PUSH
65035: LD_INT 2
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 3
65044: PUSH
65045: LD_INT 3
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 2
65054: PUSH
65055: LD_INT 3
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 1
65064: PUSH
65065: LD_INT 3
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 0
65074: PUSH
65075: LD_INT 3
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 1
65084: NEG
65085: PUSH
65086: LD_INT 2
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 3
65095: NEG
65096: PUSH
65097: LD_INT 2
65099: NEG
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 3
65107: NEG
65108: PUSH
65109: LD_INT 3
65111: NEG
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65148: LD_ADDR_VAR 0 43
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 1
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: LD_INT 1
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: LD_INT 0
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 1
65217: NEG
65218: PUSH
65219: LD_INT 1
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 1
65229: NEG
65230: PUSH
65231: LD_INT 2
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 0
65241: PUSH
65242: LD_INT 2
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 1
65252: PUSH
65253: LD_INT 1
65255: NEG
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 2
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 2
65273: PUSH
65274: LD_INT 1
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 1
65283: PUSH
65284: LD_INT 2
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: LD_INT 2
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 1
65303: NEG
65304: PUSH
65305: LD_INT 1
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 2
65314: NEG
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 2
65325: NEG
65326: PUSH
65327: LD_INT 1
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 1
65337: NEG
65338: PUSH
65339: LD_INT 3
65341: NEG
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: LD_INT 3
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 1
65360: PUSH
65361: LD_INT 2
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 2
65371: PUSH
65372: LD_INT 1
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 3
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 3
65392: PUSH
65393: LD_INT 1
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: LD_INT 3
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 0
65412: PUSH
65413: LD_INT 3
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 1
65422: NEG
65423: PUSH
65424: LD_INT 2
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 2
65433: NEG
65434: PUSH
65435: LD_INT 1
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 3
65444: NEG
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 3
65455: NEG
65456: PUSH
65457: LD_INT 1
65459: NEG
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65496: LD_ADDR_VAR 0 44
65500: PUSH
65501: LD_INT 0
65503: PUSH
65504: LD_INT 0
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: LD_INT 1
65516: NEG
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 1
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 1
65534: PUSH
65535: LD_INT 1
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 0
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 1
65554: NEG
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 1
65565: NEG
65566: PUSH
65567: LD_INT 1
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: PUSH
65579: LD_INT 2
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: LD_INT 1
65592: NEG
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 2
65600: PUSH
65601: LD_INT 0
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 2
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 2
65620: PUSH
65621: LD_INT 2
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: LD_INT 2
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 1
65640: NEG
65641: PUSH
65642: LD_INT 1
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 2
65651: NEG
65652: PUSH
65653: LD_INT 0
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 2
65662: NEG
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 2
65674: NEG
65675: PUSH
65676: LD_INT 2
65678: NEG
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 2
65686: NEG
65687: PUSH
65688: LD_INT 3
65690: NEG
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 2
65698: PUSH
65699: LD_INT 1
65701: NEG
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 3
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 3
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 3
65729: PUSH
65730: LD_INT 2
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 3
65739: PUSH
65740: LD_INT 3
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 2
65749: PUSH
65750: LD_INT 3
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 2
65759: NEG
65760: PUSH
65761: LD_INT 1
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 3
65770: NEG
65771: PUSH
65772: LD_INT 0
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 3
65781: NEG
65782: PUSH
65783: LD_INT 1
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 3
65793: NEG
65794: PUSH
65795: LD_INT 2
65797: NEG
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 3
65805: NEG
65806: PUSH
65807: LD_INT 3
65809: NEG
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65846: LD_ADDR_VAR 0 45
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: LD_INT 1
65866: NEG
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 1
65874: PUSH
65875: LD_INT 0
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: LD_INT 1
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 1
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 1
65904: NEG
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 1
65927: NEG
65928: PUSH
65929: LD_INT 2
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 0
65939: PUSH
65940: LD_INT 2
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: PUSH
65951: LD_INT 1
65953: NEG
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 2
65961: PUSH
65962: LD_INT 1
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 2
65971: PUSH
65972: LD_INT 2
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 1
65981: PUSH
65982: LD_INT 2
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 0
65991: PUSH
65992: LD_INT 2
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 1
66001: NEG
66002: PUSH
66003: LD_INT 1
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 2
66012: NEG
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 2
66024: NEG
66025: PUSH
66026: LD_INT 2
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 2
66036: NEG
66037: PUSH
66038: LD_INT 3
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 1
66048: NEG
66049: PUSH
66050: LD_INT 3
66052: NEG
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 0
66060: PUSH
66061: LD_INT 3
66063: NEG
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 1
66071: PUSH
66072: LD_INT 2
66074: NEG
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 3
66082: PUSH
66083: LD_INT 2
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 3
66092: PUSH
66093: LD_INT 3
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 2
66102: PUSH
66103: LD_INT 3
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 1
66112: PUSH
66113: LD_INT 3
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: LD_INT 3
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 1
66132: NEG
66133: PUSH
66134: LD_INT 2
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 3
66143: NEG
66144: PUSH
66145: LD_INT 2
66147: NEG
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 3
66155: NEG
66156: PUSH
66157: LD_INT 3
66159: NEG
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66196: LD_ADDR_VAR 0 46
66200: PUSH
66201: LD_INT 0
66203: PUSH
66204: LD_INT 0
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 0
66213: PUSH
66214: LD_INT 1
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 1
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 1
66234: PUSH
66235: LD_INT 1
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 0
66244: PUSH
66245: LD_INT 1
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 1
66254: NEG
66255: PUSH
66256: LD_INT 0
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 1
66265: NEG
66266: PUSH
66267: LD_INT 1
66269: NEG
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 1
66277: NEG
66278: PUSH
66279: LD_INT 2
66281: NEG
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 0
66289: PUSH
66290: LD_INT 2
66292: NEG
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 1
66300: PUSH
66301: LD_INT 1
66303: NEG
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 2
66311: PUSH
66312: LD_INT 0
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 2
66321: PUSH
66322: LD_INT 1
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 1
66331: PUSH
66332: LD_INT 2
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 0
66341: PUSH
66342: LD_INT 2
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 1
66351: NEG
66352: PUSH
66353: LD_INT 1
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 2
66362: NEG
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 2
66373: NEG
66374: PUSH
66375: LD_INT 1
66377: NEG
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 1
66385: NEG
66386: PUSH
66387: LD_INT 3
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 0
66397: PUSH
66398: LD_INT 3
66400: NEG
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 1
66408: PUSH
66409: LD_INT 2
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 2
66419: PUSH
66420: LD_INT 1
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 3
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 3
66440: PUSH
66441: LD_INT 1
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 1
66450: PUSH
66451: LD_INT 3
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 0
66460: PUSH
66461: LD_INT 3
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 1
66470: NEG
66471: PUSH
66472: LD_INT 2
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 2
66481: NEG
66482: PUSH
66483: LD_INT 1
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 3
66492: NEG
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 3
66503: NEG
66504: PUSH
66505: LD_INT 1
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66544: LD_ADDR_VAR 0 47
66548: PUSH
66549: LD_INT 0
66551: PUSH
66552: LD_INT 0
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: LD_INT 1
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 1
66572: PUSH
66573: LD_INT 0
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 1
66582: PUSH
66583: LD_INT 1
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 0
66592: PUSH
66593: LD_INT 1
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 1
66602: NEG
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 1
66613: NEG
66614: PUSH
66615: LD_INT 1
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 1
66625: NEG
66626: PUSH
66627: LD_INT 2
66629: NEG
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 0
66637: PUSH
66638: LD_INT 2
66640: NEG
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 1
66648: PUSH
66649: LD_INT 1
66651: NEG
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 2
66659: NEG
66660: PUSH
66661: LD_INT 1
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 2
66671: NEG
66672: PUSH
66673: LD_INT 2
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66695: LD_ADDR_VAR 0 48
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: LD_INT 0
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 0
66712: PUSH
66713: LD_INT 1
66715: NEG
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 1
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 1
66733: PUSH
66734: LD_INT 1
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 0
66743: PUSH
66744: LD_INT 1
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 1
66753: NEG
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 1
66764: NEG
66765: PUSH
66766: LD_INT 1
66768: NEG
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 1
66776: NEG
66777: PUSH
66778: LD_INT 2
66780: NEG
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 0
66788: PUSH
66789: LD_INT 2
66791: NEG
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 1
66799: PUSH
66800: LD_INT 1
66802: NEG
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 2
66810: PUSH
66811: LD_INT 0
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 2
66820: PUSH
66821: LD_INT 1
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66842: LD_ADDR_VAR 0 49
66846: PUSH
66847: LD_INT 0
66849: PUSH
66850: LD_INT 0
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 0
66859: PUSH
66860: LD_INT 1
66862: NEG
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 1
66870: PUSH
66871: LD_INT 0
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 1
66880: PUSH
66881: LD_INT 1
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 0
66890: PUSH
66891: LD_INT 1
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 1
66900: NEG
66901: PUSH
66902: LD_INT 0
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 1
66911: NEG
66912: PUSH
66913: LD_INT 1
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 1
66923: PUSH
66924: LD_INT 1
66926: NEG
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 2
66934: PUSH
66935: LD_INT 0
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 2
66944: PUSH
66945: LD_INT 1
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 2
66954: PUSH
66955: LD_INT 2
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 1
66964: PUSH
66965: LD_INT 2
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66986: LD_ADDR_VAR 0 50
66990: PUSH
66991: LD_INT 0
66993: PUSH
66994: LD_INT 0
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 0
67003: PUSH
67004: LD_INT 1
67006: NEG
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: LD_INT 0
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 1
67024: PUSH
67025: LD_INT 1
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: LD_INT 1
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 1
67044: NEG
67045: PUSH
67046: LD_INT 0
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 1
67055: NEG
67056: PUSH
67057: LD_INT 1
67059: NEG
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 2
67067: PUSH
67068: LD_INT 1
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 2
67077: PUSH
67078: LD_INT 2
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 1
67087: PUSH
67088: LD_INT 2
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 0
67097: PUSH
67098: LD_INT 2
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 1
67107: NEG
67108: PUSH
67109: LD_INT 1
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67130: LD_ADDR_VAR 0 51
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: LD_INT 0
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 0
67147: PUSH
67148: LD_INT 1
67150: NEG
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 1
67158: PUSH
67159: LD_INT 0
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 1
67168: PUSH
67169: LD_INT 1
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 0
67178: PUSH
67179: LD_INT 1
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 1
67188: NEG
67189: PUSH
67190: LD_INT 0
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 1
67199: NEG
67200: PUSH
67201: LD_INT 1
67203: NEG
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 1
67211: PUSH
67212: LD_INT 2
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 0
67221: PUSH
67222: LD_INT 2
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 1
67231: NEG
67232: PUSH
67233: LD_INT 1
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 2
67242: NEG
67243: PUSH
67244: LD_INT 0
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 2
67253: NEG
67254: PUSH
67255: LD_INT 1
67257: NEG
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67277: LD_ADDR_VAR 0 52
67281: PUSH
67282: LD_INT 0
67284: PUSH
67285: LD_INT 0
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 0
67294: PUSH
67295: LD_INT 1
67297: NEG
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 1
67305: PUSH
67306: LD_INT 0
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 1
67315: PUSH
67316: LD_INT 1
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 0
67325: PUSH
67326: LD_INT 1
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 1
67335: NEG
67336: PUSH
67337: LD_INT 0
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 1
67346: NEG
67347: PUSH
67348: LD_INT 1
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 1
67358: NEG
67359: PUSH
67360: LD_INT 2
67362: NEG
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 1
67370: NEG
67371: PUSH
67372: LD_INT 1
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 2
67381: NEG
67382: PUSH
67383: LD_INT 0
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 2
67392: NEG
67393: PUSH
67394: LD_INT 1
67396: NEG
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 2
67404: NEG
67405: PUSH
67406: LD_INT 2
67408: NEG
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67428: LD_ADDR_VAR 0 53
67432: PUSH
67433: LD_INT 0
67435: PUSH
67436: LD_INT 0
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 0
67445: PUSH
67446: LD_INT 1
67448: NEG
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 1
67456: PUSH
67457: LD_INT 0
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 1
67466: PUSH
67467: LD_INT 1
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 0
67476: PUSH
67477: LD_INT 1
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 1
67486: NEG
67487: PUSH
67488: LD_INT 0
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 1
67497: NEG
67498: PUSH
67499: LD_INT 1
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 1
67509: NEG
67510: PUSH
67511: LD_INT 2
67513: NEG
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 0
67521: PUSH
67522: LD_INT 2
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 1
67532: PUSH
67533: LD_INT 1
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 2
67543: PUSH
67544: LD_INT 0
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 2
67553: PUSH
67554: LD_INT 1
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 2
67563: PUSH
67564: LD_INT 2
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 1
67573: PUSH
67574: LD_INT 2
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 0
67583: PUSH
67584: LD_INT 2
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 1
67593: NEG
67594: PUSH
67595: LD_INT 1
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 2
67604: NEG
67605: PUSH
67606: LD_INT 0
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 2
67615: NEG
67616: PUSH
67617: LD_INT 1
67619: NEG
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 2
67627: NEG
67628: PUSH
67629: LD_INT 2
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67658: LD_ADDR_VAR 0 54
67662: PUSH
67663: LD_INT 0
67665: PUSH
67666: LD_INT 0
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 0
67675: PUSH
67676: LD_INT 1
67678: NEG
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 1
67686: PUSH
67687: LD_INT 0
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 1
67696: PUSH
67697: LD_INT 1
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 0
67706: PUSH
67707: LD_INT 1
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 1
67716: NEG
67717: PUSH
67718: LD_INT 0
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 1
67727: NEG
67728: PUSH
67729: LD_INT 1
67731: NEG
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 1
67739: NEG
67740: PUSH
67741: LD_INT 2
67743: NEG
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 0
67751: PUSH
67752: LD_INT 2
67754: NEG
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 1
67762: PUSH
67763: LD_INT 1
67765: NEG
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 2
67773: PUSH
67774: LD_INT 0
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 2
67783: PUSH
67784: LD_INT 1
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 2
67793: PUSH
67794: LD_INT 2
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 1
67803: PUSH
67804: LD_INT 2
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 0
67813: PUSH
67814: LD_INT 2
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 1
67823: NEG
67824: PUSH
67825: LD_INT 1
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 2
67834: NEG
67835: PUSH
67836: LD_INT 0
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 2
67845: NEG
67846: PUSH
67847: LD_INT 1
67849: NEG
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 2
67857: NEG
67858: PUSH
67859: LD_INT 2
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67888: LD_ADDR_VAR 0 55
67892: PUSH
67893: LD_INT 0
67895: PUSH
67896: LD_INT 0
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: LD_INT 1
67908: NEG
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 1
67916: PUSH
67917: LD_INT 0
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 1
67926: PUSH
67927: LD_INT 1
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 0
67936: PUSH
67937: LD_INT 1
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 1
67946: NEG
67947: PUSH
67948: LD_INT 0
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 1
67957: NEG
67958: PUSH
67959: LD_INT 1
67961: NEG
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 1
67969: NEG
67970: PUSH
67971: LD_INT 2
67973: NEG
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 0
67981: PUSH
67982: LD_INT 2
67984: NEG
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 1
67992: PUSH
67993: LD_INT 1
67995: NEG
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 2
68003: PUSH
68004: LD_INT 0
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 2
68013: PUSH
68014: LD_INT 1
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 2
68023: PUSH
68024: LD_INT 2
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 1
68033: PUSH
68034: LD_INT 2
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 0
68043: PUSH
68044: LD_INT 2
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 1
68053: NEG
68054: PUSH
68055: LD_INT 1
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 2
68064: NEG
68065: PUSH
68066: LD_INT 0
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 2
68075: NEG
68076: PUSH
68077: LD_INT 1
68079: NEG
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 2
68087: NEG
68088: PUSH
68089: LD_INT 2
68091: NEG
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68118: LD_ADDR_VAR 0 56
68122: PUSH
68123: LD_INT 0
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 0
68135: PUSH
68136: LD_INT 1
68138: NEG
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 1
68146: PUSH
68147: LD_INT 0
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 1
68156: PUSH
68157: LD_INT 1
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 0
68166: PUSH
68167: LD_INT 1
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 1
68176: NEG
68177: PUSH
68178: LD_INT 0
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 1
68187: NEG
68188: PUSH
68189: LD_INT 1
68191: NEG
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 1
68199: NEG
68200: PUSH
68201: LD_INT 2
68203: NEG
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 0
68211: PUSH
68212: LD_INT 2
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 1
68222: PUSH
68223: LD_INT 1
68225: NEG
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 2
68233: PUSH
68234: LD_INT 0
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 2
68243: PUSH
68244: LD_INT 1
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 2
68253: PUSH
68254: LD_INT 2
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 1
68263: PUSH
68264: LD_INT 2
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 0
68273: PUSH
68274: LD_INT 2
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 1
68283: NEG
68284: PUSH
68285: LD_INT 1
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 2
68294: NEG
68295: PUSH
68296: LD_INT 0
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 2
68305: NEG
68306: PUSH
68307: LD_INT 1
68309: NEG
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 2
68317: NEG
68318: PUSH
68319: LD_INT 2
68321: NEG
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68348: LD_ADDR_VAR 0 57
68352: PUSH
68353: LD_INT 0
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 0
68365: PUSH
68366: LD_INT 1
68368: NEG
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 1
68376: PUSH
68377: LD_INT 0
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 1
68386: PUSH
68387: LD_INT 1
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 0
68396: PUSH
68397: LD_INT 1
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 1
68406: NEG
68407: PUSH
68408: LD_INT 0
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 1
68417: NEG
68418: PUSH
68419: LD_INT 1
68421: NEG
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 1
68429: NEG
68430: PUSH
68431: LD_INT 2
68433: NEG
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 0
68441: PUSH
68442: LD_INT 2
68444: NEG
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 1
68452: PUSH
68453: LD_INT 1
68455: NEG
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 2
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 2
68473: PUSH
68474: LD_INT 1
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 2
68483: PUSH
68484: LD_INT 2
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 1
68493: PUSH
68494: LD_INT 2
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 0
68503: PUSH
68504: LD_INT 2
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 1
68513: NEG
68514: PUSH
68515: LD_INT 1
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 2
68524: NEG
68525: PUSH
68526: LD_INT 0
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 2
68535: NEG
68536: PUSH
68537: LD_INT 1
68539: NEG
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 2
68547: NEG
68548: PUSH
68549: LD_INT 2
68551: NEG
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68578: LD_ADDR_VAR 0 58
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: LD_INT 0
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 0
68595: PUSH
68596: LD_INT 1
68598: NEG
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 1
68606: PUSH
68607: LD_INT 0
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 1
68616: PUSH
68617: LD_INT 1
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 0
68626: PUSH
68627: LD_INT 1
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 1
68636: NEG
68637: PUSH
68638: LD_INT 0
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 1
68647: NEG
68648: PUSH
68649: LD_INT 1
68651: NEG
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 1
68659: NEG
68660: PUSH
68661: LD_INT 2
68663: NEG
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 0
68671: PUSH
68672: LD_INT 2
68674: NEG
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 1
68682: PUSH
68683: LD_INT 1
68685: NEG
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 2
68693: PUSH
68694: LD_INT 0
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 2
68703: PUSH
68704: LD_INT 1
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 2
68713: PUSH
68714: LD_INT 2
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 1
68723: PUSH
68724: LD_INT 2
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 0
68733: PUSH
68734: LD_INT 2
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 1
68743: NEG
68744: PUSH
68745: LD_INT 1
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 2
68754: NEG
68755: PUSH
68756: LD_INT 0
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 2
68765: NEG
68766: PUSH
68767: LD_INT 1
68769: NEG
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 2
68777: NEG
68778: PUSH
68779: LD_INT 2
68781: NEG
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68808: LD_ADDR_VAR 0 59
68812: PUSH
68813: LD_INT 0
68815: PUSH
68816: LD_INT 0
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: LD_INT 0
68825: PUSH
68826: LD_INT 1
68828: NEG
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 1
68836: PUSH
68837: LD_INT 0
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 1
68846: PUSH
68847: LD_INT 1
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 0
68856: PUSH
68857: LD_INT 1
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 1
68866: NEG
68867: PUSH
68868: LD_INT 0
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 1
68877: NEG
68878: PUSH
68879: LD_INT 1
68881: NEG
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68896: LD_ADDR_VAR 0 60
68900: PUSH
68901: LD_INT 0
68903: PUSH
68904: LD_INT 0
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 0
68913: PUSH
68914: LD_INT 1
68916: NEG
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 1
68924: PUSH
68925: LD_INT 0
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 1
68934: PUSH
68935: LD_INT 1
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 0
68944: PUSH
68945: LD_INT 1
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 1
68954: NEG
68955: PUSH
68956: LD_INT 0
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 1
68965: NEG
68966: PUSH
68967: LD_INT 1
68969: NEG
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68984: LD_ADDR_VAR 0 61
68988: PUSH
68989: LD_INT 0
68991: PUSH
68992: LD_INT 0
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 0
69001: PUSH
69002: LD_INT 1
69004: NEG
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 1
69012: PUSH
69013: LD_INT 0
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 1
69022: PUSH
69023: LD_INT 1
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 0
69032: PUSH
69033: LD_INT 1
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 1
69042: NEG
69043: PUSH
69044: LD_INT 0
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 1
69053: NEG
69054: PUSH
69055: LD_INT 1
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69072: LD_ADDR_VAR 0 62
69076: PUSH
69077: LD_INT 0
69079: PUSH
69080: LD_INT 0
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 0
69089: PUSH
69090: LD_INT 1
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 1
69100: PUSH
69101: LD_INT 0
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 1
69110: PUSH
69111: LD_INT 1
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 0
69120: PUSH
69121: LD_INT 1
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 1
69130: NEG
69131: PUSH
69132: LD_INT 0
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 1
69141: NEG
69142: PUSH
69143: LD_INT 1
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69160: LD_ADDR_VAR 0 63
69164: PUSH
69165: LD_INT 0
69167: PUSH
69168: LD_INT 0
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 0
69177: PUSH
69178: LD_INT 1
69180: NEG
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 1
69188: PUSH
69189: LD_INT 0
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 1
69198: PUSH
69199: LD_INT 1
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 0
69208: PUSH
69209: LD_INT 1
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 1
69218: NEG
69219: PUSH
69220: LD_INT 0
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 1
69229: NEG
69230: PUSH
69231: LD_INT 1
69233: NEG
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69248: LD_ADDR_VAR 0 64
69252: PUSH
69253: LD_INT 0
69255: PUSH
69256: LD_INT 0
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 0
69265: PUSH
69266: LD_INT 1
69268: NEG
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 1
69276: PUSH
69277: LD_INT 0
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 1
69286: PUSH
69287: LD_INT 1
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 0
69296: PUSH
69297: LD_INT 1
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 1
69306: NEG
69307: PUSH
69308: LD_INT 0
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 1
69317: NEG
69318: PUSH
69319: LD_INT 1
69321: NEG
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: ST_TO_ADDR
// end ; 1 :
69336: GO 75233
69338: LD_INT 1
69340: DOUBLE
69341: EQUAL
69342: IFTRUE 69346
69344: GO 71969
69346: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69347: LD_ADDR_VAR 0 11
69351: PUSH
69352: LD_INT 1
69354: NEG
69355: PUSH
69356: LD_INT 3
69358: NEG
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 0
69366: PUSH
69367: LD_INT 3
69369: NEG
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 1
69377: PUSH
69378: LD_INT 2
69380: NEG
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: LIST
69390: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69391: LD_ADDR_VAR 0 12
69395: PUSH
69396: LD_INT 2
69398: PUSH
69399: LD_INT 1
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 3
69409: PUSH
69410: LD_INT 0
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 3
69419: PUSH
69420: LD_INT 1
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: LIST
69431: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69432: LD_ADDR_VAR 0 13
69436: PUSH
69437: LD_INT 3
69439: PUSH
69440: LD_INT 2
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 3
69449: PUSH
69450: LD_INT 3
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 2
69459: PUSH
69460: LD_INT 3
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: LIST
69471: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69472: LD_ADDR_VAR 0 14
69476: PUSH
69477: LD_INT 1
69479: PUSH
69480: LD_INT 3
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 0
69489: PUSH
69490: LD_INT 3
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 1
69499: NEG
69500: PUSH
69501: LD_INT 2
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: LIST
69512: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69513: LD_ADDR_VAR 0 15
69517: PUSH
69518: LD_INT 2
69520: NEG
69521: PUSH
69522: LD_INT 1
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 3
69531: NEG
69532: PUSH
69533: LD_INT 0
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 3
69542: NEG
69543: PUSH
69544: LD_INT 1
69546: NEG
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: LIST
69556: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69557: LD_ADDR_VAR 0 16
69561: PUSH
69562: LD_INT 2
69564: NEG
69565: PUSH
69566: LD_INT 3
69568: NEG
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 3
69576: NEG
69577: PUSH
69578: LD_INT 2
69580: NEG
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 3
69588: NEG
69589: PUSH
69590: LD_INT 3
69592: NEG
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: LIST
69602: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69603: LD_ADDR_VAR 0 17
69607: PUSH
69608: LD_INT 1
69610: NEG
69611: PUSH
69612: LD_INT 3
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 0
69622: PUSH
69623: LD_INT 3
69625: NEG
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 1
69633: PUSH
69634: LD_INT 2
69636: NEG
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: LIST
69646: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69647: LD_ADDR_VAR 0 18
69651: PUSH
69652: LD_INT 2
69654: PUSH
69655: LD_INT 1
69657: NEG
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 3
69665: PUSH
69666: LD_INT 0
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 3
69675: PUSH
69676: LD_INT 1
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: LIST
69687: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69688: LD_ADDR_VAR 0 19
69692: PUSH
69693: LD_INT 3
69695: PUSH
69696: LD_INT 2
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 3
69705: PUSH
69706: LD_INT 3
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: LD_INT 2
69715: PUSH
69716: LD_INT 3
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: LIST
69727: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69728: LD_ADDR_VAR 0 20
69732: PUSH
69733: LD_INT 1
69735: PUSH
69736: LD_INT 3
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 0
69745: PUSH
69746: LD_INT 3
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 1
69755: NEG
69756: PUSH
69757: LD_INT 2
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: LIST
69768: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69769: LD_ADDR_VAR 0 21
69773: PUSH
69774: LD_INT 2
69776: NEG
69777: PUSH
69778: LD_INT 1
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: LD_INT 3
69787: NEG
69788: PUSH
69789: LD_INT 0
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 3
69798: NEG
69799: PUSH
69800: LD_INT 1
69802: NEG
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: LIST
69812: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69813: LD_ADDR_VAR 0 22
69817: PUSH
69818: LD_INT 2
69820: NEG
69821: PUSH
69822: LD_INT 3
69824: NEG
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 3
69832: NEG
69833: PUSH
69834: LD_INT 2
69836: NEG
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 3
69844: NEG
69845: PUSH
69846: LD_INT 3
69848: NEG
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: LIST
69858: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69859: LD_ADDR_VAR 0 23
69863: PUSH
69864: LD_INT 0
69866: PUSH
69867: LD_INT 3
69869: NEG
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 1
69877: NEG
69878: PUSH
69879: LD_INT 4
69881: NEG
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 1
69889: PUSH
69890: LD_INT 3
69892: NEG
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: LIST
69902: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69903: LD_ADDR_VAR 0 24
69907: PUSH
69908: LD_INT 3
69910: PUSH
69911: LD_INT 0
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 3
69920: PUSH
69921: LD_INT 1
69923: NEG
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 4
69931: PUSH
69932: LD_INT 1
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: LIST
69943: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69944: LD_ADDR_VAR 0 25
69948: PUSH
69949: LD_INT 3
69951: PUSH
69952: LD_INT 3
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 4
69961: PUSH
69962: LD_INT 3
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 3
69971: PUSH
69972: LD_INT 4
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: LIST
69983: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69984: LD_ADDR_VAR 0 26
69988: PUSH
69989: LD_INT 0
69991: PUSH
69992: LD_INT 3
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 1
70001: PUSH
70002: LD_INT 4
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 1
70011: NEG
70012: PUSH
70013: LD_INT 3
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: LIST
70024: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70025: LD_ADDR_VAR 0 27
70029: PUSH
70030: LD_INT 3
70032: NEG
70033: PUSH
70034: LD_INT 0
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 3
70043: NEG
70044: PUSH
70045: LD_INT 1
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 4
70054: NEG
70055: PUSH
70056: LD_INT 1
70058: NEG
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: LIST
70068: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70069: LD_ADDR_VAR 0 28
70073: PUSH
70074: LD_INT 3
70076: NEG
70077: PUSH
70078: LD_INT 3
70080: NEG
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 3
70088: NEG
70089: PUSH
70090: LD_INT 4
70092: NEG
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 4
70100: NEG
70101: PUSH
70102: LD_INT 3
70104: NEG
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: LIST
70114: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70115: LD_ADDR_VAR 0 29
70119: PUSH
70120: LD_INT 1
70122: NEG
70123: PUSH
70124: LD_INT 3
70126: NEG
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 0
70134: PUSH
70135: LD_INT 3
70137: NEG
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 1
70145: PUSH
70146: LD_INT 2
70148: NEG
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 1
70156: NEG
70157: PUSH
70158: LD_INT 4
70160: NEG
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 0
70168: PUSH
70169: LD_INT 4
70171: NEG
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 1
70179: PUSH
70180: LD_INT 3
70182: NEG
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 1
70190: NEG
70191: PUSH
70192: LD_INT 5
70194: NEG
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 0
70202: PUSH
70203: LD_INT 5
70205: NEG
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 1
70213: PUSH
70214: LD_INT 4
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 1
70224: NEG
70225: PUSH
70226: LD_INT 6
70228: NEG
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 0
70236: PUSH
70237: LD_INT 6
70239: NEG
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 1
70247: PUSH
70248: LD_INT 5
70250: NEG
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70270: LD_ADDR_VAR 0 30
70274: PUSH
70275: LD_INT 2
70277: PUSH
70278: LD_INT 1
70280: NEG
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: LD_INT 3
70288: PUSH
70289: LD_INT 0
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 3
70298: PUSH
70299: LD_INT 1
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 3
70308: PUSH
70309: LD_INT 1
70311: NEG
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 4
70319: PUSH
70320: LD_INT 0
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 4
70329: PUSH
70330: LD_INT 1
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 4
70339: PUSH
70340: LD_INT 1
70342: NEG
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 5
70350: PUSH
70351: LD_INT 0
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 5
70360: PUSH
70361: LD_INT 1
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 5
70370: PUSH
70371: LD_INT 1
70373: NEG
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 6
70381: PUSH
70382: LD_INT 0
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PUSH
70389: LD_INT 6
70391: PUSH
70392: LD_INT 1
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70413: LD_ADDR_VAR 0 31
70417: PUSH
70418: LD_INT 3
70420: PUSH
70421: LD_INT 2
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 3
70430: PUSH
70431: LD_INT 3
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 2
70440: PUSH
70441: LD_INT 3
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 4
70450: PUSH
70451: LD_INT 3
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 4
70460: PUSH
70461: LD_INT 4
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 3
70470: PUSH
70471: LD_INT 4
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 5
70480: PUSH
70481: LD_INT 4
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 5
70490: PUSH
70491: LD_INT 5
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 4
70500: PUSH
70501: LD_INT 5
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 6
70510: PUSH
70511: LD_INT 5
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 6
70520: PUSH
70521: LD_INT 6
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 5
70530: PUSH
70531: LD_INT 6
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70552: LD_ADDR_VAR 0 32
70556: PUSH
70557: LD_INT 1
70559: PUSH
70560: LD_INT 3
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 0
70569: PUSH
70570: LD_INT 3
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 1
70579: NEG
70580: PUSH
70581: LD_INT 2
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 1
70590: PUSH
70591: LD_INT 4
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 0
70600: PUSH
70601: LD_INT 4
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 1
70610: NEG
70611: PUSH
70612: LD_INT 3
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 1
70621: PUSH
70622: LD_INT 5
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: PUSH
70629: LD_INT 0
70631: PUSH
70632: LD_INT 5
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 1
70641: NEG
70642: PUSH
70643: LD_INT 4
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 1
70652: PUSH
70653: LD_INT 6
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: PUSH
70660: LD_INT 0
70662: PUSH
70663: LD_INT 6
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 1
70672: NEG
70673: PUSH
70674: LD_INT 5
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70695: LD_ADDR_VAR 0 33
70699: PUSH
70700: LD_INT 2
70702: NEG
70703: PUSH
70704: LD_INT 1
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 3
70713: NEG
70714: PUSH
70715: LD_INT 0
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 3
70724: NEG
70725: PUSH
70726: LD_INT 1
70728: NEG
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 3
70736: NEG
70737: PUSH
70738: LD_INT 1
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PUSH
70745: LD_INT 4
70747: NEG
70748: PUSH
70749: LD_INT 0
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 4
70758: NEG
70759: PUSH
70760: LD_INT 1
70762: NEG
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 4
70770: NEG
70771: PUSH
70772: LD_INT 1
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 5
70781: NEG
70782: PUSH
70783: LD_INT 0
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 5
70792: NEG
70793: PUSH
70794: LD_INT 1
70796: NEG
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 5
70804: NEG
70805: PUSH
70806: LD_INT 1
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 6
70815: NEG
70816: PUSH
70817: LD_INT 0
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 6
70826: NEG
70827: PUSH
70828: LD_INT 1
70830: NEG
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70850: LD_ADDR_VAR 0 34
70854: PUSH
70855: LD_INT 2
70857: NEG
70858: PUSH
70859: LD_INT 3
70861: NEG
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 3
70869: NEG
70870: PUSH
70871: LD_INT 2
70873: NEG
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 3
70881: NEG
70882: PUSH
70883: LD_INT 3
70885: NEG
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 3
70893: NEG
70894: PUSH
70895: LD_INT 4
70897: NEG
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 4
70905: NEG
70906: PUSH
70907: LD_INT 3
70909: NEG
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 4
70917: NEG
70918: PUSH
70919: LD_INT 4
70921: NEG
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 4
70929: NEG
70930: PUSH
70931: LD_INT 5
70933: NEG
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 5
70941: NEG
70942: PUSH
70943: LD_INT 4
70945: NEG
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: LD_INT 5
70953: NEG
70954: PUSH
70955: LD_INT 5
70957: NEG
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 5
70965: NEG
70966: PUSH
70967: LD_INT 6
70969: NEG
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 6
70977: NEG
70978: PUSH
70979: LD_INT 5
70981: NEG
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 6
70989: NEG
70990: PUSH
70991: LD_INT 6
70993: NEG
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71013: LD_ADDR_VAR 0 41
71017: PUSH
71018: LD_INT 0
71020: PUSH
71021: LD_INT 2
71023: NEG
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 1
71031: NEG
71032: PUSH
71033: LD_INT 3
71035: NEG
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 1
71043: PUSH
71044: LD_INT 2
71046: NEG
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: LIST
71056: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71057: LD_ADDR_VAR 0 42
71061: PUSH
71062: LD_INT 2
71064: PUSH
71065: LD_INT 0
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 2
71074: PUSH
71075: LD_INT 1
71077: NEG
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 3
71085: PUSH
71086: LD_INT 1
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: LIST
71097: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71098: LD_ADDR_VAR 0 43
71102: PUSH
71103: LD_INT 2
71105: PUSH
71106: LD_INT 2
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 3
71115: PUSH
71116: LD_INT 2
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: PUSH
71123: LD_INT 2
71125: PUSH
71126: LD_INT 3
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: LIST
71137: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71138: LD_ADDR_VAR 0 44
71142: PUSH
71143: LD_INT 0
71145: PUSH
71146: LD_INT 2
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 1
71155: PUSH
71156: LD_INT 3
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: LD_INT 1
71165: NEG
71166: PUSH
71167: LD_INT 2
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: LIST
71178: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71179: LD_ADDR_VAR 0 45
71183: PUSH
71184: LD_INT 2
71186: NEG
71187: PUSH
71188: LD_INT 0
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: PUSH
71195: LD_INT 2
71197: NEG
71198: PUSH
71199: LD_INT 1
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: LD_INT 3
71208: NEG
71209: PUSH
71210: LD_INT 1
71212: NEG
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: LIST
71222: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71223: LD_ADDR_VAR 0 46
71227: PUSH
71228: LD_INT 2
71230: NEG
71231: PUSH
71232: LD_INT 2
71234: NEG
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: LD_INT 2
71242: NEG
71243: PUSH
71244: LD_INT 3
71246: NEG
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 3
71254: NEG
71255: PUSH
71256: LD_INT 2
71258: NEG
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: LIST
71268: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71269: LD_ADDR_VAR 0 47
71273: PUSH
71274: LD_INT 2
71276: NEG
71277: PUSH
71278: LD_INT 3
71280: NEG
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 1
71288: NEG
71289: PUSH
71290: LD_INT 3
71292: NEG
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71302: LD_ADDR_VAR 0 48
71306: PUSH
71307: LD_INT 1
71309: PUSH
71310: LD_INT 2
71312: NEG
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 2
71320: PUSH
71321: LD_INT 1
71323: NEG
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
71333: LD_ADDR_VAR 0 49
71337: PUSH
71338: LD_INT 3
71340: PUSH
71341: LD_INT 1
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 3
71350: PUSH
71351: LD_INT 2
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
71362: LD_ADDR_VAR 0 50
71366: PUSH
71367: LD_INT 2
71369: PUSH
71370: LD_INT 3
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 1
71379: PUSH
71380: LD_INT 3
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71391: LD_ADDR_VAR 0 51
71395: PUSH
71396: LD_INT 1
71398: NEG
71399: PUSH
71400: LD_INT 2
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 2
71409: NEG
71410: PUSH
71411: LD_INT 1
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71422: LD_ADDR_VAR 0 52
71426: PUSH
71427: LD_INT 3
71429: NEG
71430: PUSH
71431: LD_INT 1
71433: NEG
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 3
71441: NEG
71442: PUSH
71443: LD_INT 2
71445: NEG
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71455: LD_ADDR_VAR 0 53
71459: PUSH
71460: LD_INT 1
71462: NEG
71463: PUSH
71464: LD_INT 3
71466: NEG
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 0
71474: PUSH
71475: LD_INT 3
71477: NEG
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: PUSH
71483: LD_INT 1
71485: PUSH
71486: LD_INT 2
71488: NEG
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: LIST
71498: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71499: LD_ADDR_VAR 0 54
71503: PUSH
71504: LD_INT 2
71506: PUSH
71507: LD_INT 1
71509: NEG
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 3
71517: PUSH
71518: LD_INT 0
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 3
71527: PUSH
71528: LD_INT 1
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: LIST
71539: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71540: LD_ADDR_VAR 0 55
71544: PUSH
71545: LD_INT 3
71547: PUSH
71548: LD_INT 2
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: LD_INT 3
71557: PUSH
71558: LD_INT 3
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 2
71567: PUSH
71568: LD_INT 3
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: LIST
71579: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71580: LD_ADDR_VAR 0 56
71584: PUSH
71585: LD_INT 1
71587: PUSH
71588: LD_INT 3
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: LD_INT 0
71597: PUSH
71598: LD_INT 3
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 1
71607: NEG
71608: PUSH
71609: LD_INT 2
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: LIST
71620: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71621: LD_ADDR_VAR 0 57
71625: PUSH
71626: LD_INT 2
71628: NEG
71629: PUSH
71630: LD_INT 1
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 3
71639: NEG
71640: PUSH
71641: LD_INT 0
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: LD_INT 3
71650: NEG
71651: PUSH
71652: LD_INT 1
71654: NEG
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: LIST
71664: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71665: LD_ADDR_VAR 0 58
71669: PUSH
71670: LD_INT 2
71672: NEG
71673: PUSH
71674: LD_INT 3
71676: NEG
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: PUSH
71682: LD_INT 3
71684: NEG
71685: PUSH
71686: LD_INT 2
71688: NEG
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 3
71696: NEG
71697: PUSH
71698: LD_INT 3
71700: NEG
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: LIST
71710: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71711: LD_ADDR_VAR 0 59
71715: PUSH
71716: LD_INT 1
71718: NEG
71719: PUSH
71720: LD_INT 2
71722: NEG
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 0
71730: PUSH
71731: LD_INT 2
71733: NEG
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 1
71741: PUSH
71742: LD_INT 1
71744: NEG
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: LIST
71754: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71755: LD_ADDR_VAR 0 60
71759: PUSH
71760: LD_INT 1
71762: PUSH
71763: LD_INT 1
71765: NEG
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: LD_INT 2
71773: PUSH
71774: LD_INT 0
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 2
71783: PUSH
71784: LD_INT 1
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: LIST
71795: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71796: LD_ADDR_VAR 0 61
71800: PUSH
71801: LD_INT 2
71803: PUSH
71804: LD_INT 1
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: LD_INT 2
71813: PUSH
71814: LD_INT 2
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 1
71823: PUSH
71824: LD_INT 2
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: LIST
71835: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71836: LD_ADDR_VAR 0 62
71840: PUSH
71841: LD_INT 1
71843: PUSH
71844: LD_INT 2
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: PUSH
71851: LD_INT 0
71853: PUSH
71854: LD_INT 2
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: PUSH
71861: LD_INT 1
71863: NEG
71864: PUSH
71865: LD_INT 1
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: LIST
71876: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71877: LD_ADDR_VAR 0 63
71881: PUSH
71882: LD_INT 1
71884: NEG
71885: PUSH
71886: LD_INT 1
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: PUSH
71893: LD_INT 2
71895: NEG
71896: PUSH
71897: LD_INT 0
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: LD_INT 2
71906: NEG
71907: PUSH
71908: LD_INT 1
71910: NEG
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: LIST
71920: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71921: LD_ADDR_VAR 0 64
71925: PUSH
71926: LD_INT 1
71928: NEG
71929: PUSH
71930: LD_INT 2
71932: NEG
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 2
71940: NEG
71941: PUSH
71942: LD_INT 1
71944: NEG
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 2
71952: NEG
71953: PUSH
71954: LD_INT 2
71956: NEG
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: LIST
71966: ST_TO_ADDR
// end ; 2 :
71967: GO 75233
71969: LD_INT 2
71971: DOUBLE
71972: EQUAL
71973: IFTRUE 71977
71975: GO 75232
71977: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71978: LD_ADDR_VAR 0 29
71982: PUSH
71983: LD_INT 4
71985: PUSH
71986: LD_INT 0
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: PUSH
71993: LD_INT 4
71995: PUSH
71996: LD_INT 1
71998: NEG
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: PUSH
72004: LD_INT 5
72006: PUSH
72007: LD_INT 0
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: PUSH
72014: LD_INT 5
72016: PUSH
72017: LD_INT 1
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: PUSH
72024: LD_INT 4
72026: PUSH
72027: LD_INT 1
72029: PUSH
72030: EMPTY
72031: LIST
72032: LIST
72033: PUSH
72034: LD_INT 3
72036: PUSH
72037: LD_INT 0
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 3
72046: PUSH
72047: LD_INT 1
72049: NEG
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PUSH
72055: LD_INT 3
72057: PUSH
72058: LD_INT 2
72060: NEG
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: PUSH
72066: LD_INT 5
72068: PUSH
72069: LD_INT 2
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: PUSH
72076: LD_INT 3
72078: PUSH
72079: LD_INT 3
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 3
72088: PUSH
72089: LD_INT 2
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PUSH
72096: LD_INT 4
72098: PUSH
72099: LD_INT 3
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 4
72108: PUSH
72109: LD_INT 4
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_INT 3
72118: PUSH
72119: LD_INT 4
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: PUSH
72126: LD_INT 2
72128: PUSH
72129: LD_INT 3
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: PUSH
72136: LD_INT 2
72138: PUSH
72139: LD_INT 2
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 4
72148: PUSH
72149: LD_INT 2
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 2
72158: PUSH
72159: LD_INT 4
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: LD_INT 0
72168: PUSH
72169: LD_INT 4
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 0
72178: PUSH
72179: LD_INT 3
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 1
72188: PUSH
72189: LD_INT 4
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PUSH
72196: LD_INT 1
72198: PUSH
72199: LD_INT 5
72201: PUSH
72202: EMPTY
72203: LIST
72204: LIST
72205: PUSH
72206: LD_INT 0
72208: PUSH
72209: LD_INT 5
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: PUSH
72216: LD_INT 1
72218: NEG
72219: PUSH
72220: LD_INT 4
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: LD_INT 1
72229: NEG
72230: PUSH
72231: LD_INT 3
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 2
72240: PUSH
72241: LD_INT 5
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: PUSH
72248: LD_INT 2
72250: NEG
72251: PUSH
72252: LD_INT 3
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: PUSH
72259: LD_INT 3
72261: NEG
72262: PUSH
72263: LD_INT 0
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: PUSH
72270: LD_INT 3
72272: NEG
72273: PUSH
72274: LD_INT 1
72276: NEG
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: PUSH
72282: LD_INT 2
72284: NEG
72285: PUSH
72286: LD_INT 0
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: PUSH
72293: LD_INT 2
72295: NEG
72296: PUSH
72297: LD_INT 1
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_INT 3
72306: NEG
72307: PUSH
72308: LD_INT 1
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 4
72317: NEG
72318: PUSH
72319: LD_INT 0
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 4
72328: NEG
72329: PUSH
72330: LD_INT 1
72332: NEG
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 4
72340: NEG
72341: PUSH
72342: LD_INT 2
72344: NEG
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 2
72352: NEG
72353: PUSH
72354: LD_INT 2
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 4
72363: NEG
72364: PUSH
72365: LD_INT 4
72367: NEG
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: LD_INT 4
72375: NEG
72376: PUSH
72377: LD_INT 5
72379: NEG
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 3
72387: NEG
72388: PUSH
72389: LD_INT 4
72391: NEG
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: LD_INT 3
72399: NEG
72400: PUSH
72401: LD_INT 3
72403: NEG
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PUSH
72409: LD_INT 4
72411: NEG
72412: PUSH
72413: LD_INT 3
72415: NEG
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: PUSH
72421: LD_INT 5
72423: NEG
72424: PUSH
72425: LD_INT 4
72427: NEG
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: PUSH
72433: LD_INT 5
72435: NEG
72436: PUSH
72437: LD_INT 5
72439: NEG
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 3
72447: NEG
72448: PUSH
72449: LD_INT 5
72451: NEG
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: PUSH
72457: LD_INT 5
72459: NEG
72460: PUSH
72461: LD_INT 3
72463: NEG
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72516: LD_ADDR_VAR 0 30
72520: PUSH
72521: LD_INT 4
72523: PUSH
72524: LD_INT 4
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: PUSH
72531: LD_INT 4
72533: PUSH
72534: LD_INT 3
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: PUSH
72541: LD_INT 5
72543: PUSH
72544: LD_INT 4
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 5
72553: PUSH
72554: LD_INT 5
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 4
72563: PUSH
72564: LD_INT 5
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 3
72573: PUSH
72574: LD_INT 4
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: LD_INT 3
72583: PUSH
72584: LD_INT 3
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PUSH
72591: LD_INT 5
72593: PUSH
72594: LD_INT 3
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: PUSH
72601: LD_INT 3
72603: PUSH
72604: LD_INT 5
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: PUSH
72611: LD_INT 0
72613: PUSH
72614: LD_INT 3
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: PUSH
72621: LD_INT 0
72623: PUSH
72624: LD_INT 2
72626: PUSH
72627: EMPTY
72628: LIST
72629: LIST
72630: PUSH
72631: LD_INT 1
72633: PUSH
72634: LD_INT 3
72636: PUSH
72637: EMPTY
72638: LIST
72639: LIST
72640: PUSH
72641: LD_INT 1
72643: PUSH
72644: LD_INT 4
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: LD_INT 0
72653: PUSH
72654: LD_INT 4
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: LD_INT 1
72663: NEG
72664: PUSH
72665: LD_INT 3
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 1
72674: NEG
72675: PUSH
72676: LD_INT 2
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PUSH
72683: LD_INT 2
72685: PUSH
72686: LD_INT 4
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: PUSH
72693: LD_INT 2
72695: NEG
72696: PUSH
72697: LD_INT 2
72699: PUSH
72700: EMPTY
72701: LIST
72702: LIST
72703: PUSH
72704: LD_INT 4
72706: NEG
72707: PUSH
72708: LD_INT 0
72710: PUSH
72711: EMPTY
72712: LIST
72713: LIST
72714: PUSH
72715: LD_INT 4
72717: NEG
72718: PUSH
72719: LD_INT 1
72721: NEG
72722: PUSH
72723: EMPTY
72724: LIST
72725: LIST
72726: PUSH
72727: LD_INT 3
72729: NEG
72730: PUSH
72731: LD_INT 0
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PUSH
72738: LD_INT 3
72740: NEG
72741: PUSH
72742: LD_INT 1
72744: PUSH
72745: EMPTY
72746: LIST
72747: LIST
72748: PUSH
72749: LD_INT 4
72751: NEG
72752: PUSH
72753: LD_INT 1
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: PUSH
72760: LD_INT 5
72762: NEG
72763: PUSH
72764: LD_INT 0
72766: PUSH
72767: EMPTY
72768: LIST
72769: LIST
72770: PUSH
72771: LD_INT 5
72773: NEG
72774: PUSH
72775: LD_INT 1
72777: NEG
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PUSH
72783: LD_INT 5
72785: NEG
72786: PUSH
72787: LD_INT 2
72789: NEG
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: PUSH
72795: LD_INT 3
72797: NEG
72798: PUSH
72799: LD_INT 2
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: PUSH
72806: LD_INT 3
72808: NEG
72809: PUSH
72810: LD_INT 3
72812: NEG
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PUSH
72818: LD_INT 3
72820: NEG
72821: PUSH
72822: LD_INT 4
72824: NEG
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: PUSH
72830: LD_INT 2
72832: NEG
72833: PUSH
72834: LD_INT 3
72836: NEG
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: PUSH
72842: LD_INT 2
72844: NEG
72845: PUSH
72846: LD_INT 2
72848: NEG
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: PUSH
72854: LD_INT 3
72856: NEG
72857: PUSH
72858: LD_INT 2
72860: NEG
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 4
72868: NEG
72869: PUSH
72870: LD_INT 3
72872: NEG
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 4
72880: NEG
72881: PUSH
72882: LD_INT 4
72884: NEG
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: LD_INT 2
72892: NEG
72893: PUSH
72894: LD_INT 4
72896: NEG
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: PUSH
72902: LD_INT 4
72904: NEG
72905: PUSH
72906: LD_INT 2
72908: NEG
72909: PUSH
72910: EMPTY
72911: LIST
72912: LIST
72913: PUSH
72914: LD_INT 0
72916: PUSH
72917: LD_INT 4
72919: NEG
72920: PUSH
72921: EMPTY
72922: LIST
72923: LIST
72924: PUSH
72925: LD_INT 0
72927: PUSH
72928: LD_INT 5
72930: NEG
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 1
72938: PUSH
72939: LD_INT 4
72941: NEG
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 1
72949: PUSH
72950: LD_INT 3
72952: NEG
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 0
72960: PUSH
72961: LD_INT 3
72963: NEG
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: PUSH
72969: LD_INT 1
72971: NEG
72972: PUSH
72973: LD_INT 4
72975: NEG
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 1
72983: NEG
72984: PUSH
72985: LD_INT 5
72987: NEG
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: PUSH
72993: LD_INT 2
72995: PUSH
72996: LD_INT 3
72998: NEG
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: PUSH
73004: LD_INT 2
73006: NEG
73007: PUSH
73008: LD_INT 5
73010: NEG
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: PUSH
73016: EMPTY
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73063: LD_ADDR_VAR 0 31
73067: PUSH
73068: LD_INT 0
73070: PUSH
73071: LD_INT 4
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 0
73080: PUSH
73081: LD_INT 3
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PUSH
73088: LD_INT 1
73090: PUSH
73091: LD_INT 4
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: PUSH
73098: LD_INT 1
73100: PUSH
73101: LD_INT 5
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: PUSH
73108: LD_INT 0
73110: PUSH
73111: LD_INT 5
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: PUSH
73118: LD_INT 1
73120: NEG
73121: PUSH
73122: LD_INT 4
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_INT 1
73131: NEG
73132: PUSH
73133: LD_INT 3
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: PUSH
73140: LD_INT 2
73142: PUSH
73143: LD_INT 5
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: PUSH
73150: LD_INT 2
73152: NEG
73153: PUSH
73154: LD_INT 3
73156: PUSH
73157: EMPTY
73158: LIST
73159: LIST
73160: PUSH
73161: LD_INT 3
73163: NEG
73164: PUSH
73165: LD_INT 0
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: PUSH
73172: LD_INT 3
73174: NEG
73175: PUSH
73176: LD_INT 1
73178: NEG
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: PUSH
73184: LD_INT 2
73186: NEG
73187: PUSH
73188: LD_INT 0
73190: PUSH
73191: EMPTY
73192: LIST
73193: LIST
73194: PUSH
73195: LD_INT 2
73197: NEG
73198: PUSH
73199: LD_INT 1
73201: PUSH
73202: EMPTY
73203: LIST
73204: LIST
73205: PUSH
73206: LD_INT 3
73208: NEG
73209: PUSH
73210: LD_INT 1
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: PUSH
73217: LD_INT 4
73219: NEG
73220: PUSH
73221: LD_INT 0
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: PUSH
73228: LD_INT 4
73230: NEG
73231: PUSH
73232: LD_INT 1
73234: NEG
73235: PUSH
73236: EMPTY
73237: LIST
73238: LIST
73239: PUSH
73240: LD_INT 4
73242: NEG
73243: PUSH
73244: LD_INT 2
73246: NEG
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: PUSH
73252: LD_INT 2
73254: NEG
73255: PUSH
73256: LD_INT 2
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: LD_INT 4
73265: NEG
73266: PUSH
73267: LD_INT 4
73269: NEG
73270: PUSH
73271: EMPTY
73272: LIST
73273: LIST
73274: PUSH
73275: LD_INT 4
73277: NEG
73278: PUSH
73279: LD_INT 5
73281: NEG
73282: PUSH
73283: EMPTY
73284: LIST
73285: LIST
73286: PUSH
73287: LD_INT 3
73289: NEG
73290: PUSH
73291: LD_INT 4
73293: NEG
73294: PUSH
73295: EMPTY
73296: LIST
73297: LIST
73298: PUSH
73299: LD_INT 3
73301: NEG
73302: PUSH
73303: LD_INT 3
73305: NEG
73306: PUSH
73307: EMPTY
73308: LIST
73309: LIST
73310: PUSH
73311: LD_INT 4
73313: NEG
73314: PUSH
73315: LD_INT 3
73317: NEG
73318: PUSH
73319: EMPTY
73320: LIST
73321: LIST
73322: PUSH
73323: LD_INT 5
73325: NEG
73326: PUSH
73327: LD_INT 4
73329: NEG
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: PUSH
73335: LD_INT 5
73337: NEG
73338: PUSH
73339: LD_INT 5
73341: NEG
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: PUSH
73347: LD_INT 3
73349: NEG
73350: PUSH
73351: LD_INT 5
73353: NEG
73354: PUSH
73355: EMPTY
73356: LIST
73357: LIST
73358: PUSH
73359: LD_INT 5
73361: NEG
73362: PUSH
73363: LD_INT 3
73365: NEG
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: LD_INT 0
73373: PUSH
73374: LD_INT 3
73376: NEG
73377: PUSH
73378: EMPTY
73379: LIST
73380: LIST
73381: PUSH
73382: LD_INT 0
73384: PUSH
73385: LD_INT 4
73387: NEG
73388: PUSH
73389: EMPTY
73390: LIST
73391: LIST
73392: PUSH
73393: LD_INT 1
73395: PUSH
73396: LD_INT 3
73398: NEG
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: PUSH
73404: LD_INT 1
73406: PUSH
73407: LD_INT 2
73409: NEG
73410: PUSH
73411: EMPTY
73412: LIST
73413: LIST
73414: PUSH
73415: LD_INT 0
73417: PUSH
73418: LD_INT 2
73420: NEG
73421: PUSH
73422: EMPTY
73423: LIST
73424: LIST
73425: PUSH
73426: LD_INT 1
73428: NEG
73429: PUSH
73430: LD_INT 3
73432: NEG
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: PUSH
73438: LD_INT 1
73440: NEG
73441: PUSH
73442: LD_INT 4
73444: NEG
73445: PUSH
73446: EMPTY
73447: LIST
73448: LIST
73449: PUSH
73450: LD_INT 2
73452: PUSH
73453: LD_INT 2
73455: NEG
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: LD_INT 2
73463: NEG
73464: PUSH
73465: LD_INT 4
73467: NEG
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: PUSH
73473: LD_INT 4
73475: PUSH
73476: LD_INT 0
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: PUSH
73483: LD_INT 4
73485: PUSH
73486: LD_INT 1
73488: NEG
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 5
73496: PUSH
73497: LD_INT 0
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: LD_INT 5
73506: PUSH
73507: LD_INT 1
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: PUSH
73514: LD_INT 4
73516: PUSH
73517: LD_INT 1
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_INT 3
73526: PUSH
73527: LD_INT 0
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: PUSH
73534: LD_INT 3
73536: PUSH
73537: LD_INT 1
73539: NEG
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: PUSH
73545: LD_INT 3
73547: PUSH
73548: LD_INT 2
73550: NEG
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: PUSH
73556: LD_INT 5
73558: PUSH
73559: LD_INT 2
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: LIST
73599: LIST
73600: LIST
73601: LIST
73602: LIST
73603: LIST
73604: LIST
73605: LIST
73606: LIST
73607: LIST
73608: LIST
73609: LIST
73610: LIST
73611: LIST
73612: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73613: LD_ADDR_VAR 0 32
73617: PUSH
73618: LD_INT 4
73620: NEG
73621: PUSH
73622: LD_INT 0
73624: PUSH
73625: EMPTY
73626: LIST
73627: LIST
73628: PUSH
73629: LD_INT 4
73631: NEG
73632: PUSH
73633: LD_INT 1
73635: NEG
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: PUSH
73641: LD_INT 3
73643: NEG
73644: PUSH
73645: LD_INT 0
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: PUSH
73652: LD_INT 3
73654: NEG
73655: PUSH
73656: LD_INT 1
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: PUSH
73663: LD_INT 4
73665: NEG
73666: PUSH
73667: LD_INT 1
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PUSH
73674: LD_INT 5
73676: NEG
73677: PUSH
73678: LD_INT 0
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PUSH
73685: LD_INT 5
73687: NEG
73688: PUSH
73689: LD_INT 1
73691: NEG
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: PUSH
73697: LD_INT 5
73699: NEG
73700: PUSH
73701: LD_INT 2
73703: NEG
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: PUSH
73709: LD_INT 3
73711: NEG
73712: PUSH
73713: LD_INT 2
73715: PUSH
73716: EMPTY
73717: LIST
73718: LIST
73719: PUSH
73720: LD_INT 3
73722: NEG
73723: PUSH
73724: LD_INT 3
73726: NEG
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PUSH
73732: LD_INT 3
73734: NEG
73735: PUSH
73736: LD_INT 4
73738: NEG
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: PUSH
73744: LD_INT 2
73746: NEG
73747: PUSH
73748: LD_INT 3
73750: NEG
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: PUSH
73756: LD_INT 2
73758: NEG
73759: PUSH
73760: LD_INT 2
73762: NEG
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: PUSH
73768: LD_INT 3
73770: NEG
73771: PUSH
73772: LD_INT 2
73774: NEG
73775: PUSH
73776: EMPTY
73777: LIST
73778: LIST
73779: PUSH
73780: LD_INT 4
73782: NEG
73783: PUSH
73784: LD_INT 3
73786: NEG
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: PUSH
73792: LD_INT 4
73794: NEG
73795: PUSH
73796: LD_INT 4
73798: NEG
73799: PUSH
73800: EMPTY
73801: LIST
73802: LIST
73803: PUSH
73804: LD_INT 2
73806: NEG
73807: PUSH
73808: LD_INT 4
73810: NEG
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: PUSH
73816: LD_INT 4
73818: NEG
73819: PUSH
73820: LD_INT 2
73822: NEG
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: PUSH
73828: LD_INT 0
73830: PUSH
73831: LD_INT 4
73833: NEG
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: PUSH
73839: LD_INT 0
73841: PUSH
73842: LD_INT 5
73844: NEG
73845: PUSH
73846: EMPTY
73847: LIST
73848: LIST
73849: PUSH
73850: LD_INT 1
73852: PUSH
73853: LD_INT 4
73855: NEG
73856: PUSH
73857: EMPTY
73858: LIST
73859: LIST
73860: PUSH
73861: LD_INT 1
73863: PUSH
73864: LD_INT 3
73866: NEG
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: PUSH
73872: LD_INT 0
73874: PUSH
73875: LD_INT 3
73877: NEG
73878: PUSH
73879: EMPTY
73880: LIST
73881: LIST
73882: PUSH
73883: LD_INT 1
73885: NEG
73886: PUSH
73887: LD_INT 4
73889: NEG
73890: PUSH
73891: EMPTY
73892: LIST
73893: LIST
73894: PUSH
73895: LD_INT 1
73897: NEG
73898: PUSH
73899: LD_INT 5
73901: NEG
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: PUSH
73907: LD_INT 2
73909: PUSH
73910: LD_INT 3
73912: NEG
73913: PUSH
73914: EMPTY
73915: LIST
73916: LIST
73917: PUSH
73918: LD_INT 2
73920: NEG
73921: PUSH
73922: LD_INT 5
73924: NEG
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: PUSH
73930: LD_INT 3
73932: PUSH
73933: LD_INT 0
73935: PUSH
73936: EMPTY
73937: LIST
73938: LIST
73939: PUSH
73940: LD_INT 3
73942: PUSH
73943: LD_INT 1
73945: NEG
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: PUSH
73951: LD_INT 4
73953: PUSH
73954: LD_INT 0
73956: PUSH
73957: EMPTY
73958: LIST
73959: LIST
73960: PUSH
73961: LD_INT 4
73963: PUSH
73964: LD_INT 1
73966: PUSH
73967: EMPTY
73968: LIST
73969: LIST
73970: PUSH
73971: LD_INT 3
73973: PUSH
73974: LD_INT 1
73976: PUSH
73977: EMPTY
73978: LIST
73979: LIST
73980: PUSH
73981: LD_INT 2
73983: PUSH
73984: LD_INT 0
73986: PUSH
73987: EMPTY
73988: LIST
73989: LIST
73990: PUSH
73991: LD_INT 2
73993: PUSH
73994: LD_INT 1
73996: NEG
73997: PUSH
73998: EMPTY
73999: LIST
74000: LIST
74001: PUSH
74002: LD_INT 2
74004: PUSH
74005: LD_INT 2
74007: NEG
74008: PUSH
74009: EMPTY
74010: LIST
74011: LIST
74012: PUSH
74013: LD_INT 4
74015: PUSH
74016: LD_INT 2
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: PUSH
74023: LD_INT 4
74025: PUSH
74026: LD_INT 4
74028: PUSH
74029: EMPTY
74030: LIST
74031: LIST
74032: PUSH
74033: LD_INT 4
74035: PUSH
74036: LD_INT 3
74038: PUSH
74039: EMPTY
74040: LIST
74041: LIST
74042: PUSH
74043: LD_INT 5
74045: PUSH
74046: LD_INT 4
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: PUSH
74053: LD_INT 5
74055: PUSH
74056: LD_INT 5
74058: PUSH
74059: EMPTY
74060: LIST
74061: LIST
74062: PUSH
74063: LD_INT 4
74065: PUSH
74066: LD_INT 5
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: PUSH
74073: LD_INT 3
74075: PUSH
74076: LD_INT 4
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: PUSH
74083: LD_INT 3
74085: PUSH
74086: LD_INT 3
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: PUSH
74093: LD_INT 5
74095: PUSH
74096: LD_INT 3
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: PUSH
74103: LD_INT 3
74105: PUSH
74106: LD_INT 5
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: LIST
74142: LIST
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: LIST
74148: LIST
74149: LIST
74150: LIST
74151: LIST
74152: LIST
74153: LIST
74154: LIST
74155: LIST
74156: LIST
74157: LIST
74158: LIST
74159: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74160: LD_ADDR_VAR 0 33
74164: PUSH
74165: LD_INT 4
74167: NEG
74168: PUSH
74169: LD_INT 4
74171: NEG
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: PUSH
74177: LD_INT 4
74179: NEG
74180: PUSH
74181: LD_INT 5
74183: NEG
74184: PUSH
74185: EMPTY
74186: LIST
74187: LIST
74188: PUSH
74189: LD_INT 3
74191: NEG
74192: PUSH
74193: LD_INT 4
74195: NEG
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: LD_INT 3
74203: NEG
74204: PUSH
74205: LD_INT 3
74207: NEG
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: PUSH
74213: LD_INT 4
74215: NEG
74216: PUSH
74217: LD_INT 3
74219: NEG
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: PUSH
74225: LD_INT 5
74227: NEG
74228: PUSH
74229: LD_INT 4
74231: NEG
74232: PUSH
74233: EMPTY
74234: LIST
74235: LIST
74236: PUSH
74237: LD_INT 5
74239: NEG
74240: PUSH
74241: LD_INT 5
74243: NEG
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: PUSH
74249: LD_INT 3
74251: NEG
74252: PUSH
74253: LD_INT 5
74255: NEG
74256: PUSH
74257: EMPTY
74258: LIST
74259: LIST
74260: PUSH
74261: LD_INT 5
74263: NEG
74264: PUSH
74265: LD_INT 3
74267: NEG
74268: PUSH
74269: EMPTY
74270: LIST
74271: LIST
74272: PUSH
74273: LD_INT 0
74275: PUSH
74276: LD_INT 3
74278: NEG
74279: PUSH
74280: EMPTY
74281: LIST
74282: LIST
74283: PUSH
74284: LD_INT 0
74286: PUSH
74287: LD_INT 4
74289: NEG
74290: PUSH
74291: EMPTY
74292: LIST
74293: LIST
74294: PUSH
74295: LD_INT 1
74297: PUSH
74298: LD_INT 3
74300: NEG
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: PUSH
74306: LD_INT 1
74308: PUSH
74309: LD_INT 2
74311: NEG
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: PUSH
74317: LD_INT 0
74319: PUSH
74320: LD_INT 2
74322: NEG
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PUSH
74328: LD_INT 1
74330: NEG
74331: PUSH
74332: LD_INT 3
74334: NEG
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: PUSH
74340: LD_INT 1
74342: NEG
74343: PUSH
74344: LD_INT 4
74346: NEG
74347: PUSH
74348: EMPTY
74349: LIST
74350: LIST
74351: PUSH
74352: LD_INT 2
74354: PUSH
74355: LD_INT 2
74357: NEG
74358: PUSH
74359: EMPTY
74360: LIST
74361: LIST
74362: PUSH
74363: LD_INT 2
74365: NEG
74366: PUSH
74367: LD_INT 4
74369: NEG
74370: PUSH
74371: EMPTY
74372: LIST
74373: LIST
74374: PUSH
74375: LD_INT 4
74377: PUSH
74378: LD_INT 0
74380: PUSH
74381: EMPTY
74382: LIST
74383: LIST
74384: PUSH
74385: LD_INT 4
74387: PUSH
74388: LD_INT 1
74390: NEG
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: PUSH
74396: LD_INT 5
74398: PUSH
74399: LD_INT 0
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: PUSH
74406: LD_INT 5
74408: PUSH
74409: LD_INT 1
74411: PUSH
74412: EMPTY
74413: LIST
74414: LIST
74415: PUSH
74416: LD_INT 4
74418: PUSH
74419: LD_INT 1
74421: PUSH
74422: EMPTY
74423: LIST
74424: LIST
74425: PUSH
74426: LD_INT 3
74428: PUSH
74429: LD_INT 0
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: PUSH
74436: LD_INT 3
74438: PUSH
74439: LD_INT 1
74441: NEG
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: PUSH
74447: LD_INT 3
74449: PUSH
74450: LD_INT 2
74452: NEG
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: PUSH
74458: LD_INT 5
74460: PUSH
74461: LD_INT 2
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: PUSH
74468: LD_INT 3
74470: PUSH
74471: LD_INT 3
74473: PUSH
74474: EMPTY
74475: LIST
74476: LIST
74477: PUSH
74478: LD_INT 3
74480: PUSH
74481: LD_INT 2
74483: PUSH
74484: EMPTY
74485: LIST
74486: LIST
74487: PUSH
74488: LD_INT 4
74490: PUSH
74491: LD_INT 3
74493: PUSH
74494: EMPTY
74495: LIST
74496: LIST
74497: PUSH
74498: LD_INT 4
74500: PUSH
74501: LD_INT 4
74503: PUSH
74504: EMPTY
74505: LIST
74506: LIST
74507: PUSH
74508: LD_INT 3
74510: PUSH
74511: LD_INT 4
74513: PUSH
74514: EMPTY
74515: LIST
74516: LIST
74517: PUSH
74518: LD_INT 2
74520: PUSH
74521: LD_INT 3
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: PUSH
74528: LD_INT 2
74530: PUSH
74531: LD_INT 2
74533: PUSH
74534: EMPTY
74535: LIST
74536: LIST
74537: PUSH
74538: LD_INT 4
74540: PUSH
74541: LD_INT 2
74543: PUSH
74544: EMPTY
74545: LIST
74546: LIST
74547: PUSH
74548: LD_INT 2
74550: PUSH
74551: LD_INT 4
74553: PUSH
74554: EMPTY
74555: LIST
74556: LIST
74557: PUSH
74558: LD_INT 0
74560: PUSH
74561: LD_INT 4
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: PUSH
74568: LD_INT 0
74570: PUSH
74571: LD_INT 3
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: PUSH
74578: LD_INT 1
74580: PUSH
74581: LD_INT 4
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: PUSH
74588: LD_INT 1
74590: PUSH
74591: LD_INT 5
74593: PUSH
74594: EMPTY
74595: LIST
74596: LIST
74597: PUSH
74598: LD_INT 0
74600: PUSH
74601: LD_INT 5
74603: PUSH
74604: EMPTY
74605: LIST
74606: LIST
74607: PUSH
74608: LD_INT 1
74610: NEG
74611: PUSH
74612: LD_INT 4
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: PUSH
74619: LD_INT 1
74621: NEG
74622: PUSH
74623: LD_INT 3
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: PUSH
74630: LD_INT 2
74632: PUSH
74633: LD_INT 5
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: PUSH
74640: LD_INT 2
74642: NEG
74643: PUSH
74644: LD_INT 3
74646: PUSH
74647: EMPTY
74648: LIST
74649: LIST
74650: PUSH
74651: EMPTY
74652: LIST
74653: LIST
74654: LIST
74655: LIST
74656: LIST
74657: LIST
74658: LIST
74659: LIST
74660: LIST
74661: LIST
74662: LIST
74663: LIST
74664: LIST
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: LIST
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: LIST
74680: LIST
74681: LIST
74682: LIST
74683: LIST
74684: LIST
74685: LIST
74686: LIST
74687: LIST
74688: LIST
74689: LIST
74690: LIST
74691: LIST
74692: LIST
74693: LIST
74694: LIST
74695: LIST
74696: LIST
74697: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74698: LD_ADDR_VAR 0 34
74702: PUSH
74703: LD_INT 0
74705: PUSH
74706: LD_INT 4
74708: NEG
74709: PUSH
74710: EMPTY
74711: LIST
74712: LIST
74713: PUSH
74714: LD_INT 0
74716: PUSH
74717: LD_INT 5
74719: NEG
74720: PUSH
74721: EMPTY
74722: LIST
74723: LIST
74724: PUSH
74725: LD_INT 1
74727: PUSH
74728: LD_INT 4
74730: NEG
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: PUSH
74736: LD_INT 1
74738: PUSH
74739: LD_INT 3
74741: NEG
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: PUSH
74747: LD_INT 0
74749: PUSH
74750: LD_INT 3
74752: NEG
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: PUSH
74758: LD_INT 1
74760: NEG
74761: PUSH
74762: LD_INT 4
74764: NEG
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: PUSH
74770: LD_INT 1
74772: NEG
74773: PUSH
74774: LD_INT 5
74776: NEG
74777: PUSH
74778: EMPTY
74779: LIST
74780: LIST
74781: PUSH
74782: LD_INT 2
74784: PUSH
74785: LD_INT 3
74787: NEG
74788: PUSH
74789: EMPTY
74790: LIST
74791: LIST
74792: PUSH
74793: LD_INT 2
74795: NEG
74796: PUSH
74797: LD_INT 5
74799: NEG
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: PUSH
74805: LD_INT 3
74807: PUSH
74808: LD_INT 0
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: PUSH
74815: LD_INT 3
74817: PUSH
74818: LD_INT 1
74820: NEG
74821: PUSH
74822: EMPTY
74823: LIST
74824: LIST
74825: PUSH
74826: LD_INT 4
74828: PUSH
74829: LD_INT 0
74831: PUSH
74832: EMPTY
74833: LIST
74834: LIST
74835: PUSH
74836: LD_INT 4
74838: PUSH
74839: LD_INT 1
74841: PUSH
74842: EMPTY
74843: LIST
74844: LIST
74845: PUSH
74846: LD_INT 3
74848: PUSH
74849: LD_INT 1
74851: PUSH
74852: EMPTY
74853: LIST
74854: LIST
74855: PUSH
74856: LD_INT 2
74858: PUSH
74859: LD_INT 0
74861: PUSH
74862: EMPTY
74863: LIST
74864: LIST
74865: PUSH
74866: LD_INT 2
74868: PUSH
74869: LD_INT 1
74871: NEG
74872: PUSH
74873: EMPTY
74874: LIST
74875: LIST
74876: PUSH
74877: LD_INT 2
74879: PUSH
74880: LD_INT 2
74882: NEG
74883: PUSH
74884: EMPTY
74885: LIST
74886: LIST
74887: PUSH
74888: LD_INT 4
74890: PUSH
74891: LD_INT 2
74893: PUSH
74894: EMPTY
74895: LIST
74896: LIST
74897: PUSH
74898: LD_INT 4
74900: PUSH
74901: LD_INT 4
74903: PUSH
74904: EMPTY
74905: LIST
74906: LIST
74907: PUSH
74908: LD_INT 4
74910: PUSH
74911: LD_INT 3
74913: PUSH
74914: EMPTY
74915: LIST
74916: LIST
74917: PUSH
74918: LD_INT 5
74920: PUSH
74921: LD_INT 4
74923: PUSH
74924: EMPTY
74925: LIST
74926: LIST
74927: PUSH
74928: LD_INT 5
74930: PUSH
74931: LD_INT 5
74933: PUSH
74934: EMPTY
74935: LIST
74936: LIST
74937: PUSH
74938: LD_INT 4
74940: PUSH
74941: LD_INT 5
74943: PUSH
74944: EMPTY
74945: LIST
74946: LIST
74947: PUSH
74948: LD_INT 3
74950: PUSH
74951: LD_INT 4
74953: PUSH
74954: EMPTY
74955: LIST
74956: LIST
74957: PUSH
74958: LD_INT 3
74960: PUSH
74961: LD_INT 3
74963: PUSH
74964: EMPTY
74965: LIST
74966: LIST
74967: PUSH
74968: LD_INT 5
74970: PUSH
74971: LD_INT 3
74973: PUSH
74974: EMPTY
74975: LIST
74976: LIST
74977: PUSH
74978: LD_INT 3
74980: PUSH
74981: LD_INT 5
74983: PUSH
74984: EMPTY
74985: LIST
74986: LIST
74987: PUSH
74988: LD_INT 0
74990: PUSH
74991: LD_INT 3
74993: PUSH
74994: EMPTY
74995: LIST
74996: LIST
74997: PUSH
74998: LD_INT 0
75000: PUSH
75001: LD_INT 2
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: PUSH
75008: LD_INT 1
75010: PUSH
75011: LD_INT 3
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: PUSH
75018: LD_INT 1
75020: PUSH
75021: LD_INT 4
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PUSH
75028: LD_INT 0
75030: PUSH
75031: LD_INT 4
75033: PUSH
75034: EMPTY
75035: LIST
75036: LIST
75037: PUSH
75038: LD_INT 1
75040: NEG
75041: PUSH
75042: LD_INT 3
75044: PUSH
75045: EMPTY
75046: LIST
75047: LIST
75048: PUSH
75049: LD_INT 1
75051: NEG
75052: PUSH
75053: LD_INT 2
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: PUSH
75060: LD_INT 2
75062: PUSH
75063: LD_INT 4
75065: PUSH
75066: EMPTY
75067: LIST
75068: LIST
75069: PUSH
75070: LD_INT 2
75072: NEG
75073: PUSH
75074: LD_INT 2
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PUSH
75081: LD_INT 4
75083: NEG
75084: PUSH
75085: LD_INT 0
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: PUSH
75092: LD_INT 4
75094: NEG
75095: PUSH
75096: LD_INT 1
75098: NEG
75099: PUSH
75100: EMPTY
75101: LIST
75102: LIST
75103: PUSH
75104: LD_INT 3
75106: NEG
75107: PUSH
75108: LD_INT 0
75110: PUSH
75111: EMPTY
75112: LIST
75113: LIST
75114: PUSH
75115: LD_INT 3
75117: NEG
75118: PUSH
75119: LD_INT 1
75121: PUSH
75122: EMPTY
75123: LIST
75124: LIST
75125: PUSH
75126: LD_INT 4
75128: NEG
75129: PUSH
75130: LD_INT 1
75132: PUSH
75133: EMPTY
75134: LIST
75135: LIST
75136: PUSH
75137: LD_INT 5
75139: NEG
75140: PUSH
75141: LD_INT 0
75143: PUSH
75144: EMPTY
75145: LIST
75146: LIST
75147: PUSH
75148: LD_INT 5
75150: NEG
75151: PUSH
75152: LD_INT 1
75154: NEG
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: PUSH
75160: LD_INT 5
75162: NEG
75163: PUSH
75164: LD_INT 2
75166: NEG
75167: PUSH
75168: EMPTY
75169: LIST
75170: LIST
75171: PUSH
75172: LD_INT 3
75174: NEG
75175: PUSH
75176: LD_INT 2
75178: PUSH
75179: EMPTY
75180: LIST
75181: LIST
75182: PUSH
75183: EMPTY
75184: LIST
75185: LIST
75186: LIST
75187: LIST
75188: LIST
75189: LIST
75190: LIST
75191: LIST
75192: LIST
75193: LIST
75194: LIST
75195: LIST
75196: LIST
75197: LIST
75198: LIST
75199: LIST
75200: LIST
75201: LIST
75202: LIST
75203: LIST
75204: LIST
75205: LIST
75206: LIST
75207: LIST
75208: LIST
75209: LIST
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: LIST
75225: LIST
75226: LIST
75227: LIST
75228: LIST
75229: ST_TO_ADDR
// end ; end ;
75230: GO 75233
75232: POP
// case btype of b_depot , b_warehouse :
75233: LD_VAR 0 1
75237: PUSH
75238: LD_INT 0
75240: DOUBLE
75241: EQUAL
75242: IFTRUE 75252
75244: LD_INT 1
75246: DOUBLE
75247: EQUAL
75248: IFTRUE 75252
75250: GO 75453
75252: POP
// case nation of nation_american :
75253: LD_VAR 0 5
75257: PUSH
75258: LD_INT 1
75260: DOUBLE
75261: EQUAL
75262: IFTRUE 75266
75264: GO 75322
75266: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75267: LD_ADDR_VAR 0 9
75271: PUSH
75272: LD_VAR 0 11
75276: PUSH
75277: LD_VAR 0 12
75281: PUSH
75282: LD_VAR 0 13
75286: PUSH
75287: LD_VAR 0 14
75291: PUSH
75292: LD_VAR 0 15
75296: PUSH
75297: LD_VAR 0 16
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: LIST
75306: LIST
75307: LIST
75308: LIST
75309: PUSH
75310: LD_VAR 0 4
75314: PUSH
75315: LD_INT 1
75317: PLUS
75318: ARRAY
75319: ST_TO_ADDR
75320: GO 75451
75322: LD_INT 2
75324: DOUBLE
75325: EQUAL
75326: IFTRUE 75330
75328: GO 75386
75330: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
75331: LD_ADDR_VAR 0 9
75335: PUSH
75336: LD_VAR 0 17
75340: PUSH
75341: LD_VAR 0 18
75345: PUSH
75346: LD_VAR 0 19
75350: PUSH
75351: LD_VAR 0 20
75355: PUSH
75356: LD_VAR 0 21
75360: PUSH
75361: LD_VAR 0 22
75365: PUSH
75366: EMPTY
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: PUSH
75374: LD_VAR 0 4
75378: PUSH
75379: LD_INT 1
75381: PLUS
75382: ARRAY
75383: ST_TO_ADDR
75384: GO 75451
75386: LD_INT 3
75388: DOUBLE
75389: EQUAL
75390: IFTRUE 75394
75392: GO 75450
75394: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75395: LD_ADDR_VAR 0 9
75399: PUSH
75400: LD_VAR 0 23
75404: PUSH
75405: LD_VAR 0 24
75409: PUSH
75410: LD_VAR 0 25
75414: PUSH
75415: LD_VAR 0 26
75419: PUSH
75420: LD_VAR 0 27
75424: PUSH
75425: LD_VAR 0 28
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: LIST
75434: LIST
75435: LIST
75436: LIST
75437: PUSH
75438: LD_VAR 0 4
75442: PUSH
75443: LD_INT 1
75445: PLUS
75446: ARRAY
75447: ST_TO_ADDR
75448: GO 75451
75450: POP
75451: GO 76006
75453: LD_INT 2
75455: DOUBLE
75456: EQUAL
75457: IFTRUE 75467
75459: LD_INT 3
75461: DOUBLE
75462: EQUAL
75463: IFTRUE 75467
75465: GO 75523
75467: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75468: LD_ADDR_VAR 0 9
75472: PUSH
75473: LD_VAR 0 29
75477: PUSH
75478: LD_VAR 0 30
75482: PUSH
75483: LD_VAR 0 31
75487: PUSH
75488: LD_VAR 0 32
75492: PUSH
75493: LD_VAR 0 33
75497: PUSH
75498: LD_VAR 0 34
75502: PUSH
75503: EMPTY
75504: LIST
75505: LIST
75506: LIST
75507: LIST
75508: LIST
75509: LIST
75510: PUSH
75511: LD_VAR 0 4
75515: PUSH
75516: LD_INT 1
75518: PLUS
75519: ARRAY
75520: ST_TO_ADDR
75521: GO 76006
75523: LD_INT 16
75525: DOUBLE
75526: EQUAL
75527: IFTRUE 75585
75529: LD_INT 17
75531: DOUBLE
75532: EQUAL
75533: IFTRUE 75585
75535: LD_INT 18
75537: DOUBLE
75538: EQUAL
75539: IFTRUE 75585
75541: LD_INT 19
75543: DOUBLE
75544: EQUAL
75545: IFTRUE 75585
75547: LD_INT 22
75549: DOUBLE
75550: EQUAL
75551: IFTRUE 75585
75553: LD_INT 20
75555: DOUBLE
75556: EQUAL
75557: IFTRUE 75585
75559: LD_INT 21
75561: DOUBLE
75562: EQUAL
75563: IFTRUE 75585
75565: LD_INT 23
75567: DOUBLE
75568: EQUAL
75569: IFTRUE 75585
75571: LD_INT 24
75573: DOUBLE
75574: EQUAL
75575: IFTRUE 75585
75577: LD_INT 25
75579: DOUBLE
75580: EQUAL
75581: IFTRUE 75585
75583: GO 75641
75585: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75586: LD_ADDR_VAR 0 9
75590: PUSH
75591: LD_VAR 0 35
75595: PUSH
75596: LD_VAR 0 36
75600: PUSH
75601: LD_VAR 0 37
75605: PUSH
75606: LD_VAR 0 38
75610: PUSH
75611: LD_VAR 0 39
75615: PUSH
75616: LD_VAR 0 40
75620: PUSH
75621: EMPTY
75622: LIST
75623: LIST
75624: LIST
75625: LIST
75626: LIST
75627: LIST
75628: PUSH
75629: LD_VAR 0 4
75633: PUSH
75634: LD_INT 1
75636: PLUS
75637: ARRAY
75638: ST_TO_ADDR
75639: GO 76006
75641: LD_INT 6
75643: DOUBLE
75644: EQUAL
75645: IFTRUE 75697
75647: LD_INT 7
75649: DOUBLE
75650: EQUAL
75651: IFTRUE 75697
75653: LD_INT 8
75655: DOUBLE
75656: EQUAL
75657: IFTRUE 75697
75659: LD_INT 13
75661: DOUBLE
75662: EQUAL
75663: IFTRUE 75697
75665: LD_INT 12
75667: DOUBLE
75668: EQUAL
75669: IFTRUE 75697
75671: LD_INT 15
75673: DOUBLE
75674: EQUAL
75675: IFTRUE 75697
75677: LD_INT 11
75679: DOUBLE
75680: EQUAL
75681: IFTRUE 75697
75683: LD_INT 14
75685: DOUBLE
75686: EQUAL
75687: IFTRUE 75697
75689: LD_INT 10
75691: DOUBLE
75692: EQUAL
75693: IFTRUE 75697
75695: GO 75753
75697: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75698: LD_ADDR_VAR 0 9
75702: PUSH
75703: LD_VAR 0 41
75707: PUSH
75708: LD_VAR 0 42
75712: PUSH
75713: LD_VAR 0 43
75717: PUSH
75718: LD_VAR 0 44
75722: PUSH
75723: LD_VAR 0 45
75727: PUSH
75728: LD_VAR 0 46
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: LIST
75737: LIST
75738: LIST
75739: LIST
75740: PUSH
75741: LD_VAR 0 4
75745: PUSH
75746: LD_INT 1
75748: PLUS
75749: ARRAY
75750: ST_TO_ADDR
75751: GO 76006
75753: LD_INT 36
75755: DOUBLE
75756: EQUAL
75757: IFTRUE 75761
75759: GO 75817
75761: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75762: LD_ADDR_VAR 0 9
75766: PUSH
75767: LD_VAR 0 47
75771: PUSH
75772: LD_VAR 0 48
75776: PUSH
75777: LD_VAR 0 49
75781: PUSH
75782: LD_VAR 0 50
75786: PUSH
75787: LD_VAR 0 51
75791: PUSH
75792: LD_VAR 0 52
75796: PUSH
75797: EMPTY
75798: LIST
75799: LIST
75800: LIST
75801: LIST
75802: LIST
75803: LIST
75804: PUSH
75805: LD_VAR 0 4
75809: PUSH
75810: LD_INT 1
75812: PLUS
75813: ARRAY
75814: ST_TO_ADDR
75815: GO 76006
75817: LD_INT 4
75819: DOUBLE
75820: EQUAL
75821: IFTRUE 75843
75823: LD_INT 5
75825: DOUBLE
75826: EQUAL
75827: IFTRUE 75843
75829: LD_INT 34
75831: DOUBLE
75832: EQUAL
75833: IFTRUE 75843
75835: LD_INT 37
75837: DOUBLE
75838: EQUAL
75839: IFTRUE 75843
75841: GO 75899
75843: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75844: LD_ADDR_VAR 0 9
75848: PUSH
75849: LD_VAR 0 53
75853: PUSH
75854: LD_VAR 0 54
75858: PUSH
75859: LD_VAR 0 55
75863: PUSH
75864: LD_VAR 0 56
75868: PUSH
75869: LD_VAR 0 57
75873: PUSH
75874: LD_VAR 0 58
75878: PUSH
75879: EMPTY
75880: LIST
75881: LIST
75882: LIST
75883: LIST
75884: LIST
75885: LIST
75886: PUSH
75887: LD_VAR 0 4
75891: PUSH
75892: LD_INT 1
75894: PLUS
75895: ARRAY
75896: ST_TO_ADDR
75897: GO 76006
75899: LD_INT 31
75901: DOUBLE
75902: EQUAL
75903: IFTRUE 75949
75905: LD_INT 32
75907: DOUBLE
75908: EQUAL
75909: IFTRUE 75949
75911: LD_INT 33
75913: DOUBLE
75914: EQUAL
75915: IFTRUE 75949
75917: LD_INT 27
75919: DOUBLE
75920: EQUAL
75921: IFTRUE 75949
75923: LD_INT 26
75925: DOUBLE
75926: EQUAL
75927: IFTRUE 75949
75929: LD_INT 28
75931: DOUBLE
75932: EQUAL
75933: IFTRUE 75949
75935: LD_INT 29
75937: DOUBLE
75938: EQUAL
75939: IFTRUE 75949
75941: LD_INT 30
75943: DOUBLE
75944: EQUAL
75945: IFTRUE 75949
75947: GO 76005
75949: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75950: LD_ADDR_VAR 0 9
75954: PUSH
75955: LD_VAR 0 59
75959: PUSH
75960: LD_VAR 0 60
75964: PUSH
75965: LD_VAR 0 61
75969: PUSH
75970: LD_VAR 0 62
75974: PUSH
75975: LD_VAR 0 63
75979: PUSH
75980: LD_VAR 0 64
75984: PUSH
75985: EMPTY
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: PUSH
75993: LD_VAR 0 4
75997: PUSH
75998: LD_INT 1
76000: PLUS
76001: ARRAY
76002: ST_TO_ADDR
76003: GO 76006
76005: POP
// temp_list2 = [ ] ;
76006: LD_ADDR_VAR 0 10
76010: PUSH
76011: EMPTY
76012: ST_TO_ADDR
// for i in temp_list do
76013: LD_ADDR_VAR 0 8
76017: PUSH
76018: LD_VAR 0 9
76022: PUSH
76023: FOR_IN
76024: IFFALSE 76076
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76026: LD_ADDR_VAR 0 10
76030: PUSH
76031: LD_VAR 0 10
76035: PUSH
76036: LD_VAR 0 8
76040: PUSH
76041: LD_INT 1
76043: ARRAY
76044: PUSH
76045: LD_VAR 0 2
76049: PLUS
76050: PUSH
76051: LD_VAR 0 8
76055: PUSH
76056: LD_INT 2
76058: ARRAY
76059: PUSH
76060: LD_VAR 0 3
76064: PLUS
76065: PUSH
76066: EMPTY
76067: LIST
76068: LIST
76069: PUSH
76070: EMPTY
76071: LIST
76072: ADD
76073: ST_TO_ADDR
76074: GO 76023
76076: POP
76077: POP
// result = temp_list2 ;
76078: LD_ADDR_VAR 0 7
76082: PUSH
76083: LD_VAR 0 10
76087: ST_TO_ADDR
// end ;
76088: LD_VAR 0 7
76092: RET
// export function EnemyInRange ( unit , dist ) ; begin
76093: LD_INT 0
76095: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76096: LD_ADDR_VAR 0 3
76100: PUSH
76101: LD_VAR 0 1
76105: PPUSH
76106: CALL_OW 255
76110: PPUSH
76111: LD_VAR 0 1
76115: PPUSH
76116: CALL_OW 250
76120: PPUSH
76121: LD_VAR 0 1
76125: PPUSH
76126: CALL_OW 251
76130: PPUSH
76131: LD_VAR 0 2
76135: PPUSH
76136: CALL 49466 0 4
76140: PUSH
76141: LD_INT 4
76143: ARRAY
76144: ST_TO_ADDR
// end ;
76145: LD_VAR 0 3
76149: RET
// export function PlayerSeeMe ( unit ) ; begin
76150: LD_INT 0
76152: PPUSH
// result := See ( your_side , unit ) ;
76153: LD_ADDR_VAR 0 2
76157: PUSH
76158: LD_OWVAR 2
76162: PPUSH
76163: LD_VAR 0 1
76167: PPUSH
76168: CALL_OW 292
76172: ST_TO_ADDR
// end ;
76173: LD_VAR 0 2
76177: RET
// export function ReverseDir ( unit ) ; begin
76178: LD_INT 0
76180: PPUSH
// if not unit then
76181: LD_VAR 0 1
76185: NOT
76186: IFFALSE 76190
// exit ;
76188: GO 76213
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76190: LD_ADDR_VAR 0 2
76194: PUSH
76195: LD_VAR 0 1
76199: PPUSH
76200: CALL_OW 254
76204: PUSH
76205: LD_INT 3
76207: PLUS
76208: PUSH
76209: LD_INT 6
76211: MOD
76212: ST_TO_ADDR
// end ;
76213: LD_VAR 0 2
76217: RET
// export function ReverseArray ( array ) ; var i ; begin
76218: LD_INT 0
76220: PPUSH
76221: PPUSH
// if not array then
76222: LD_VAR 0 1
76226: NOT
76227: IFFALSE 76231
// exit ;
76229: GO 76286
// result := [ ] ;
76231: LD_ADDR_VAR 0 2
76235: PUSH
76236: EMPTY
76237: ST_TO_ADDR
// for i := array downto 1 do
76238: LD_ADDR_VAR 0 3
76242: PUSH
76243: DOUBLE
76244: LD_VAR 0 1
76248: INC
76249: ST_TO_ADDR
76250: LD_INT 1
76252: PUSH
76253: FOR_DOWNTO
76254: IFFALSE 76284
// result := Join ( result , array [ i ] ) ;
76256: LD_ADDR_VAR 0 2
76260: PUSH
76261: LD_VAR 0 2
76265: PPUSH
76266: LD_VAR 0 1
76270: PUSH
76271: LD_VAR 0 3
76275: ARRAY
76276: PPUSH
76277: CALL 80951 0 2
76281: ST_TO_ADDR
76282: GO 76253
76284: POP
76285: POP
// end ;
76286: LD_VAR 0 2
76290: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
76291: LD_INT 0
76293: PPUSH
76294: PPUSH
76295: PPUSH
76296: PPUSH
76297: PPUSH
76298: PPUSH
// if not unit or not hexes then
76299: LD_VAR 0 1
76303: NOT
76304: PUSH
76305: LD_VAR 0 2
76309: NOT
76310: OR
76311: IFFALSE 76315
// exit ;
76313: GO 76438
// dist := 9999 ;
76315: LD_ADDR_VAR 0 5
76319: PUSH
76320: LD_INT 9999
76322: ST_TO_ADDR
// for i = 1 to hexes do
76323: LD_ADDR_VAR 0 4
76327: PUSH
76328: DOUBLE
76329: LD_INT 1
76331: DEC
76332: ST_TO_ADDR
76333: LD_VAR 0 2
76337: PUSH
76338: FOR_TO
76339: IFFALSE 76426
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
76341: LD_ADDR_VAR 0 6
76345: PUSH
76346: LD_VAR 0 1
76350: PPUSH
76351: LD_VAR 0 2
76355: PUSH
76356: LD_VAR 0 4
76360: ARRAY
76361: PUSH
76362: LD_INT 1
76364: ARRAY
76365: PPUSH
76366: LD_VAR 0 2
76370: PUSH
76371: LD_VAR 0 4
76375: ARRAY
76376: PUSH
76377: LD_INT 2
76379: ARRAY
76380: PPUSH
76381: CALL_OW 297
76385: ST_TO_ADDR
// if tdist < dist then
76386: LD_VAR 0 6
76390: PUSH
76391: LD_VAR 0 5
76395: LESS
76396: IFFALSE 76424
// begin hex := hexes [ i ] ;
76398: LD_ADDR_VAR 0 8
76402: PUSH
76403: LD_VAR 0 2
76407: PUSH
76408: LD_VAR 0 4
76412: ARRAY
76413: ST_TO_ADDR
// dist := tdist ;
76414: LD_ADDR_VAR 0 5
76418: PUSH
76419: LD_VAR 0 6
76423: ST_TO_ADDR
// end ; end ;
76424: GO 76338
76426: POP
76427: POP
// result := hex ;
76428: LD_ADDR_VAR 0 3
76432: PUSH
76433: LD_VAR 0 8
76437: ST_TO_ADDR
// end ;
76438: LD_VAR 0 3
76442: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76443: LD_INT 0
76445: PPUSH
76446: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76447: LD_VAR 0 1
76451: NOT
76452: PUSH
76453: LD_VAR 0 1
76457: PUSH
76458: LD_INT 21
76460: PUSH
76461: LD_INT 2
76463: PUSH
76464: EMPTY
76465: LIST
76466: LIST
76467: PUSH
76468: LD_INT 23
76470: PUSH
76471: LD_INT 2
76473: PUSH
76474: EMPTY
76475: LIST
76476: LIST
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: PPUSH
76482: CALL_OW 69
76486: IN
76487: NOT
76488: OR
76489: IFFALSE 76493
// exit ;
76491: GO 76540
// for i = 1 to 3 do
76493: LD_ADDR_VAR 0 3
76497: PUSH
76498: DOUBLE
76499: LD_INT 1
76501: DEC
76502: ST_TO_ADDR
76503: LD_INT 3
76505: PUSH
76506: FOR_TO
76507: IFFALSE 76538
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76509: LD_VAR 0 1
76513: PPUSH
76514: CALL_OW 250
76518: PPUSH
76519: LD_VAR 0 1
76523: PPUSH
76524: CALL_OW 251
76528: PPUSH
76529: LD_INT 1
76531: PPUSH
76532: CALL_OW 453
76536: GO 76506
76538: POP
76539: POP
// end ;
76540: LD_VAR 0 2
76544: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76545: LD_INT 0
76547: PPUSH
76548: PPUSH
76549: PPUSH
76550: PPUSH
76551: PPUSH
76552: PPUSH
// if not unit or not enemy_unit then
76553: LD_VAR 0 1
76557: NOT
76558: PUSH
76559: LD_VAR 0 2
76563: NOT
76564: OR
76565: IFFALSE 76569
// exit ;
76567: GO 77036
// if GetLives ( i ) < 250 then
76569: LD_VAR 0 4
76573: PPUSH
76574: CALL_OW 256
76578: PUSH
76579: LD_INT 250
76581: LESS
76582: IFFALSE 76595
// begin ComAutodestruct ( i ) ;
76584: LD_VAR 0 4
76588: PPUSH
76589: CALL 76443 0 1
// exit ;
76593: GO 77036
// end ; x := GetX ( enemy_unit ) ;
76595: LD_ADDR_VAR 0 7
76599: PUSH
76600: LD_VAR 0 2
76604: PPUSH
76605: CALL_OW 250
76609: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76610: LD_ADDR_VAR 0 8
76614: PUSH
76615: LD_VAR 0 2
76619: PPUSH
76620: CALL_OW 251
76624: ST_TO_ADDR
// if not x or not y then
76625: LD_VAR 0 7
76629: NOT
76630: PUSH
76631: LD_VAR 0 8
76635: NOT
76636: OR
76637: IFFALSE 76641
// exit ;
76639: GO 77036
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76641: LD_ADDR_VAR 0 6
76645: PUSH
76646: LD_VAR 0 7
76650: PPUSH
76651: LD_INT 0
76653: PPUSH
76654: LD_INT 4
76656: PPUSH
76657: CALL_OW 272
76661: PUSH
76662: LD_VAR 0 8
76666: PPUSH
76667: LD_INT 0
76669: PPUSH
76670: LD_INT 4
76672: PPUSH
76673: CALL_OW 273
76677: PUSH
76678: EMPTY
76679: LIST
76680: LIST
76681: PUSH
76682: LD_VAR 0 7
76686: PPUSH
76687: LD_INT 1
76689: PPUSH
76690: LD_INT 4
76692: PPUSH
76693: CALL_OW 272
76697: PUSH
76698: LD_VAR 0 8
76702: PPUSH
76703: LD_INT 1
76705: PPUSH
76706: LD_INT 4
76708: PPUSH
76709: CALL_OW 273
76713: PUSH
76714: EMPTY
76715: LIST
76716: LIST
76717: PUSH
76718: LD_VAR 0 7
76722: PPUSH
76723: LD_INT 2
76725: PPUSH
76726: LD_INT 4
76728: PPUSH
76729: CALL_OW 272
76733: PUSH
76734: LD_VAR 0 8
76738: PPUSH
76739: LD_INT 2
76741: PPUSH
76742: LD_INT 4
76744: PPUSH
76745: CALL_OW 273
76749: PUSH
76750: EMPTY
76751: LIST
76752: LIST
76753: PUSH
76754: LD_VAR 0 7
76758: PPUSH
76759: LD_INT 3
76761: PPUSH
76762: LD_INT 4
76764: PPUSH
76765: CALL_OW 272
76769: PUSH
76770: LD_VAR 0 8
76774: PPUSH
76775: LD_INT 3
76777: PPUSH
76778: LD_INT 4
76780: PPUSH
76781: CALL_OW 273
76785: PUSH
76786: EMPTY
76787: LIST
76788: LIST
76789: PUSH
76790: LD_VAR 0 7
76794: PPUSH
76795: LD_INT 4
76797: PPUSH
76798: LD_INT 4
76800: PPUSH
76801: CALL_OW 272
76805: PUSH
76806: LD_VAR 0 8
76810: PPUSH
76811: LD_INT 4
76813: PPUSH
76814: LD_INT 4
76816: PPUSH
76817: CALL_OW 273
76821: PUSH
76822: EMPTY
76823: LIST
76824: LIST
76825: PUSH
76826: LD_VAR 0 7
76830: PPUSH
76831: LD_INT 5
76833: PPUSH
76834: LD_INT 4
76836: PPUSH
76837: CALL_OW 272
76841: PUSH
76842: LD_VAR 0 8
76846: PPUSH
76847: LD_INT 5
76849: PPUSH
76850: LD_INT 4
76852: PPUSH
76853: CALL_OW 273
76857: PUSH
76858: EMPTY
76859: LIST
76860: LIST
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: LIST
76866: LIST
76867: LIST
76868: LIST
76869: ST_TO_ADDR
// for i = tmp downto 1 do
76870: LD_ADDR_VAR 0 4
76874: PUSH
76875: DOUBLE
76876: LD_VAR 0 6
76880: INC
76881: ST_TO_ADDR
76882: LD_INT 1
76884: PUSH
76885: FOR_DOWNTO
76886: IFFALSE 76987
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76888: LD_VAR 0 6
76892: PUSH
76893: LD_VAR 0 4
76897: ARRAY
76898: PUSH
76899: LD_INT 1
76901: ARRAY
76902: PPUSH
76903: LD_VAR 0 6
76907: PUSH
76908: LD_VAR 0 4
76912: ARRAY
76913: PUSH
76914: LD_INT 2
76916: ARRAY
76917: PPUSH
76918: CALL_OW 488
76922: NOT
76923: PUSH
76924: LD_VAR 0 6
76928: PUSH
76929: LD_VAR 0 4
76933: ARRAY
76934: PUSH
76935: LD_INT 1
76937: ARRAY
76938: PPUSH
76939: LD_VAR 0 6
76943: PUSH
76944: LD_VAR 0 4
76948: ARRAY
76949: PUSH
76950: LD_INT 2
76952: ARRAY
76953: PPUSH
76954: CALL_OW 428
76958: PUSH
76959: LD_INT 0
76961: NONEQUAL
76962: OR
76963: IFFALSE 76985
// tmp := Delete ( tmp , i ) ;
76965: LD_ADDR_VAR 0 6
76969: PUSH
76970: LD_VAR 0 6
76974: PPUSH
76975: LD_VAR 0 4
76979: PPUSH
76980: CALL_OW 3
76984: ST_TO_ADDR
76985: GO 76885
76987: POP
76988: POP
// j := GetClosestHex ( unit , tmp ) ;
76989: LD_ADDR_VAR 0 5
76993: PUSH
76994: LD_VAR 0 1
76998: PPUSH
76999: LD_VAR 0 6
77003: PPUSH
77004: CALL 76291 0 2
77008: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77009: LD_VAR 0 1
77013: PPUSH
77014: LD_VAR 0 5
77018: PUSH
77019: LD_INT 1
77021: ARRAY
77022: PPUSH
77023: LD_VAR 0 5
77027: PUSH
77028: LD_INT 2
77030: ARRAY
77031: PPUSH
77032: CALL_OW 111
// end ;
77036: LD_VAR 0 3
77040: RET
// export function PrepareApemanSoldier ( ) ; begin
77041: LD_INT 0
77043: PPUSH
// uc_nation := 0 ;
77044: LD_ADDR_OWVAR 21
77048: PUSH
77049: LD_INT 0
77051: ST_TO_ADDR
// hc_sex := sex_male ;
77052: LD_ADDR_OWVAR 27
77056: PUSH
77057: LD_INT 1
77059: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
77060: LD_ADDR_OWVAR 28
77064: PUSH
77065: LD_INT 15
77067: ST_TO_ADDR
// hc_gallery :=  ;
77068: LD_ADDR_OWVAR 33
77072: PUSH
77073: LD_STRING 
77075: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77076: LD_ADDR_OWVAR 31
77080: PUSH
77081: LD_INT 0
77083: PPUSH
77084: LD_INT 3
77086: PPUSH
77087: CALL_OW 12
77091: PUSH
77092: LD_INT 0
77094: PPUSH
77095: LD_INT 3
77097: PPUSH
77098: CALL_OW 12
77102: PUSH
77103: LD_INT 0
77105: PUSH
77106: LD_INT 0
77108: PUSH
77109: EMPTY
77110: LIST
77111: LIST
77112: LIST
77113: LIST
77114: ST_TO_ADDR
// end ;
77115: LD_VAR 0 1
77119: RET
// export function PrepareApemanEngineer ( ) ; begin
77120: LD_INT 0
77122: PPUSH
// uc_nation := 0 ;
77123: LD_ADDR_OWVAR 21
77127: PUSH
77128: LD_INT 0
77130: ST_TO_ADDR
// hc_sex := sex_male ;
77131: LD_ADDR_OWVAR 27
77135: PUSH
77136: LD_INT 1
77138: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
77139: LD_ADDR_OWVAR 28
77143: PUSH
77144: LD_INT 16
77146: ST_TO_ADDR
// hc_gallery :=  ;
77147: LD_ADDR_OWVAR 33
77151: PUSH
77152: LD_STRING 
77154: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77155: LD_ADDR_OWVAR 31
77159: PUSH
77160: LD_INT 0
77162: PPUSH
77163: LD_INT 3
77165: PPUSH
77166: CALL_OW 12
77170: PUSH
77171: LD_INT 0
77173: PPUSH
77174: LD_INT 3
77176: PPUSH
77177: CALL_OW 12
77181: PUSH
77182: LD_INT 0
77184: PUSH
77185: LD_INT 0
77187: PUSH
77188: EMPTY
77189: LIST
77190: LIST
77191: LIST
77192: LIST
77193: ST_TO_ADDR
// end ;
77194: LD_VAR 0 1
77198: RET
// export function PrepareApeman ( agressivity ) ; begin
77199: LD_INT 0
77201: PPUSH
// uc_side := 0 ;
77202: LD_ADDR_OWVAR 20
77206: PUSH
77207: LD_INT 0
77209: ST_TO_ADDR
// uc_nation := 0 ;
77210: LD_ADDR_OWVAR 21
77214: PUSH
77215: LD_INT 0
77217: ST_TO_ADDR
// hc_sex := sex_male ;
77218: LD_ADDR_OWVAR 27
77222: PUSH
77223: LD_INT 1
77225: ST_TO_ADDR
// hc_class := class_apeman ;
77226: LD_ADDR_OWVAR 28
77230: PUSH
77231: LD_INT 12
77233: ST_TO_ADDR
// hc_gallery :=  ;
77234: LD_ADDR_OWVAR 33
77238: PUSH
77239: LD_STRING 
77241: ST_TO_ADDR
// if agressivity = 0 then
77242: LD_VAR 0 1
77246: PUSH
77247: LD_INT 0
77249: EQUAL
77250: IFFALSE 77262
// hc_agressivity := 0 else
77252: LD_ADDR_OWVAR 35
77256: PUSH
77257: LD_INT 0
77259: ST_TO_ADDR
77260: GO 77283
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77262: LD_ADDR_OWVAR 35
77266: PUSH
77267: LD_VAR 0 1
77271: NEG
77272: PPUSH
77273: LD_VAR 0 1
77277: PPUSH
77278: CALL_OW 12
77282: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77283: LD_ADDR_OWVAR 31
77287: PUSH
77288: LD_INT 0
77290: PPUSH
77291: LD_INT 3
77293: PPUSH
77294: CALL_OW 12
77298: PUSH
77299: LD_INT 0
77301: PPUSH
77302: LD_INT 3
77304: PPUSH
77305: CALL_OW 12
77309: PUSH
77310: LD_INT 0
77312: PUSH
77313: LD_INT 0
77315: PUSH
77316: EMPTY
77317: LIST
77318: LIST
77319: LIST
77320: LIST
77321: ST_TO_ADDR
// end ;
77322: LD_VAR 0 2
77326: RET
// export function PrepareTiger ( agressivity ) ; begin
77327: LD_INT 0
77329: PPUSH
// uc_side := 0 ;
77330: LD_ADDR_OWVAR 20
77334: PUSH
77335: LD_INT 0
77337: ST_TO_ADDR
// uc_nation := 0 ;
77338: LD_ADDR_OWVAR 21
77342: PUSH
77343: LD_INT 0
77345: ST_TO_ADDR
// hc_class := class_tiger ;
77346: LD_ADDR_OWVAR 28
77350: PUSH
77351: LD_INT 14
77353: ST_TO_ADDR
// hc_gallery :=  ;
77354: LD_ADDR_OWVAR 33
77358: PUSH
77359: LD_STRING 
77361: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77362: LD_ADDR_OWVAR 35
77366: PUSH
77367: LD_VAR 0 1
77371: NEG
77372: PPUSH
77373: LD_VAR 0 1
77377: PPUSH
77378: CALL_OW 12
77382: ST_TO_ADDR
// end ;
77383: LD_VAR 0 2
77387: RET
// export function PrepareEnchidna ( ) ; begin
77388: LD_INT 0
77390: PPUSH
// uc_side := 0 ;
77391: LD_ADDR_OWVAR 20
77395: PUSH
77396: LD_INT 0
77398: ST_TO_ADDR
// uc_nation := 0 ;
77399: LD_ADDR_OWVAR 21
77403: PUSH
77404: LD_INT 0
77406: ST_TO_ADDR
// hc_class := class_baggie ;
77407: LD_ADDR_OWVAR 28
77411: PUSH
77412: LD_INT 13
77414: ST_TO_ADDR
// hc_gallery :=  ;
77415: LD_ADDR_OWVAR 33
77419: PUSH
77420: LD_STRING 
77422: ST_TO_ADDR
// end ;
77423: LD_VAR 0 1
77427: RET
// export function PrepareFrog ( ) ; begin
77428: LD_INT 0
77430: PPUSH
// uc_side := 0 ;
77431: LD_ADDR_OWVAR 20
77435: PUSH
77436: LD_INT 0
77438: ST_TO_ADDR
// uc_nation := 0 ;
77439: LD_ADDR_OWVAR 21
77443: PUSH
77444: LD_INT 0
77446: ST_TO_ADDR
// hc_class := class_frog ;
77447: LD_ADDR_OWVAR 28
77451: PUSH
77452: LD_INT 19
77454: ST_TO_ADDR
// hc_gallery :=  ;
77455: LD_ADDR_OWVAR 33
77459: PUSH
77460: LD_STRING 
77462: ST_TO_ADDR
// end ;
77463: LD_VAR 0 1
77467: RET
// export function PrepareFish ( ) ; begin
77468: LD_INT 0
77470: PPUSH
// uc_side := 0 ;
77471: LD_ADDR_OWVAR 20
77475: PUSH
77476: LD_INT 0
77478: ST_TO_ADDR
// uc_nation := 0 ;
77479: LD_ADDR_OWVAR 21
77483: PUSH
77484: LD_INT 0
77486: ST_TO_ADDR
// hc_class := class_fish ;
77487: LD_ADDR_OWVAR 28
77491: PUSH
77492: LD_INT 20
77494: ST_TO_ADDR
// hc_gallery :=  ;
77495: LD_ADDR_OWVAR 33
77499: PUSH
77500: LD_STRING 
77502: ST_TO_ADDR
// end ;
77503: LD_VAR 0 1
77507: RET
// export function PrepareBird ( ) ; begin
77508: LD_INT 0
77510: PPUSH
// uc_side := 0 ;
77511: LD_ADDR_OWVAR 20
77515: PUSH
77516: LD_INT 0
77518: ST_TO_ADDR
// uc_nation := 0 ;
77519: LD_ADDR_OWVAR 21
77523: PUSH
77524: LD_INT 0
77526: ST_TO_ADDR
// hc_class := class_phororhacos ;
77527: LD_ADDR_OWVAR 28
77531: PUSH
77532: LD_INT 18
77534: ST_TO_ADDR
// hc_gallery :=  ;
77535: LD_ADDR_OWVAR 33
77539: PUSH
77540: LD_STRING 
77542: ST_TO_ADDR
// end ;
77543: LD_VAR 0 1
77547: RET
// export function PrepareHorse ( ) ; begin
77548: LD_INT 0
77550: PPUSH
// uc_side := 0 ;
77551: LD_ADDR_OWVAR 20
77555: PUSH
77556: LD_INT 0
77558: ST_TO_ADDR
// uc_nation := 0 ;
77559: LD_ADDR_OWVAR 21
77563: PUSH
77564: LD_INT 0
77566: ST_TO_ADDR
// hc_class := class_horse ;
77567: LD_ADDR_OWVAR 28
77571: PUSH
77572: LD_INT 21
77574: ST_TO_ADDR
// hc_gallery :=  ;
77575: LD_ADDR_OWVAR 33
77579: PUSH
77580: LD_STRING 
77582: ST_TO_ADDR
// end ;
77583: LD_VAR 0 1
77587: RET
// export function PrepareMastodont ( ) ; begin
77588: LD_INT 0
77590: PPUSH
// uc_side := 0 ;
77591: LD_ADDR_OWVAR 20
77595: PUSH
77596: LD_INT 0
77598: ST_TO_ADDR
// uc_nation := 0 ;
77599: LD_ADDR_OWVAR 21
77603: PUSH
77604: LD_INT 0
77606: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77607: LD_ADDR_OWVAR 37
77611: PUSH
77612: LD_INT 31
77614: ST_TO_ADDR
// vc_control := control_rider ;
77615: LD_ADDR_OWVAR 38
77619: PUSH
77620: LD_INT 4
77622: ST_TO_ADDR
// end ;
77623: LD_VAR 0 1
77627: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77628: LD_INT 0
77630: PPUSH
77631: PPUSH
77632: PPUSH
// uc_side = 0 ;
77633: LD_ADDR_OWVAR 20
77637: PUSH
77638: LD_INT 0
77640: ST_TO_ADDR
// uc_nation = 0 ;
77641: LD_ADDR_OWVAR 21
77645: PUSH
77646: LD_INT 0
77648: ST_TO_ADDR
// InitHc_All ( ) ;
77649: CALL_OW 584
// InitVc ;
77653: CALL_OW 20
// if mastodonts then
77657: LD_VAR 0 6
77661: IFFALSE 77728
// for i = 1 to mastodonts do
77663: LD_ADDR_VAR 0 11
77667: PUSH
77668: DOUBLE
77669: LD_INT 1
77671: DEC
77672: ST_TO_ADDR
77673: LD_VAR 0 6
77677: PUSH
77678: FOR_TO
77679: IFFALSE 77726
// begin vc_chassis := 31 ;
77681: LD_ADDR_OWVAR 37
77685: PUSH
77686: LD_INT 31
77688: ST_TO_ADDR
// vc_control := control_rider ;
77689: LD_ADDR_OWVAR 38
77693: PUSH
77694: LD_INT 4
77696: ST_TO_ADDR
// animal := CreateVehicle ;
77697: LD_ADDR_VAR 0 12
77701: PUSH
77702: CALL_OW 45
77706: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77707: LD_VAR 0 12
77711: PPUSH
77712: LD_VAR 0 8
77716: PPUSH
77717: LD_INT 0
77719: PPUSH
77720: CALL 79856 0 3
// end ;
77724: GO 77678
77726: POP
77727: POP
// if horses then
77728: LD_VAR 0 5
77732: IFFALSE 77799
// for i = 1 to horses do
77734: LD_ADDR_VAR 0 11
77738: PUSH
77739: DOUBLE
77740: LD_INT 1
77742: DEC
77743: ST_TO_ADDR
77744: LD_VAR 0 5
77748: PUSH
77749: FOR_TO
77750: IFFALSE 77797
// begin hc_class := 21 ;
77752: LD_ADDR_OWVAR 28
77756: PUSH
77757: LD_INT 21
77759: ST_TO_ADDR
// hc_gallery :=  ;
77760: LD_ADDR_OWVAR 33
77764: PUSH
77765: LD_STRING 
77767: ST_TO_ADDR
// animal := CreateHuman ;
77768: LD_ADDR_VAR 0 12
77772: PUSH
77773: CALL_OW 44
77777: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77778: LD_VAR 0 12
77782: PPUSH
77783: LD_VAR 0 8
77787: PPUSH
77788: LD_INT 0
77790: PPUSH
77791: CALL 79856 0 3
// end ;
77795: GO 77749
77797: POP
77798: POP
// if birds then
77799: LD_VAR 0 1
77803: IFFALSE 77870
// for i = 1 to birds do
77805: LD_ADDR_VAR 0 11
77809: PUSH
77810: DOUBLE
77811: LD_INT 1
77813: DEC
77814: ST_TO_ADDR
77815: LD_VAR 0 1
77819: PUSH
77820: FOR_TO
77821: IFFALSE 77868
// begin hc_class := 18 ;
77823: LD_ADDR_OWVAR 28
77827: PUSH
77828: LD_INT 18
77830: ST_TO_ADDR
// hc_gallery =  ;
77831: LD_ADDR_OWVAR 33
77835: PUSH
77836: LD_STRING 
77838: ST_TO_ADDR
// animal := CreateHuman ;
77839: LD_ADDR_VAR 0 12
77843: PUSH
77844: CALL_OW 44
77848: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77849: LD_VAR 0 12
77853: PPUSH
77854: LD_VAR 0 8
77858: PPUSH
77859: LD_INT 0
77861: PPUSH
77862: CALL 79856 0 3
// end ;
77866: GO 77820
77868: POP
77869: POP
// if tigers then
77870: LD_VAR 0 2
77874: IFFALSE 77958
// for i = 1 to tigers do
77876: LD_ADDR_VAR 0 11
77880: PUSH
77881: DOUBLE
77882: LD_INT 1
77884: DEC
77885: ST_TO_ADDR
77886: LD_VAR 0 2
77890: PUSH
77891: FOR_TO
77892: IFFALSE 77956
// begin hc_class = class_tiger ;
77894: LD_ADDR_OWVAR 28
77898: PUSH
77899: LD_INT 14
77901: ST_TO_ADDR
// hc_gallery =  ;
77902: LD_ADDR_OWVAR 33
77906: PUSH
77907: LD_STRING 
77909: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77910: LD_ADDR_OWVAR 35
77914: PUSH
77915: LD_INT 7
77917: NEG
77918: PPUSH
77919: LD_INT 7
77921: PPUSH
77922: CALL_OW 12
77926: ST_TO_ADDR
// animal := CreateHuman ;
77927: LD_ADDR_VAR 0 12
77931: PUSH
77932: CALL_OW 44
77936: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77937: LD_VAR 0 12
77941: PPUSH
77942: LD_VAR 0 8
77946: PPUSH
77947: LD_INT 0
77949: PPUSH
77950: CALL 79856 0 3
// end ;
77954: GO 77891
77956: POP
77957: POP
// if apemans then
77958: LD_VAR 0 3
77962: IFFALSE 78085
// for i = 1 to apemans do
77964: LD_ADDR_VAR 0 11
77968: PUSH
77969: DOUBLE
77970: LD_INT 1
77972: DEC
77973: ST_TO_ADDR
77974: LD_VAR 0 3
77978: PUSH
77979: FOR_TO
77980: IFFALSE 78083
// begin hc_class = class_apeman ;
77982: LD_ADDR_OWVAR 28
77986: PUSH
77987: LD_INT 12
77989: ST_TO_ADDR
// hc_gallery =  ;
77990: LD_ADDR_OWVAR 33
77994: PUSH
77995: LD_STRING 
77997: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
77998: LD_ADDR_OWVAR 35
78002: PUSH
78003: LD_INT 2
78005: NEG
78006: PPUSH
78007: LD_INT 2
78009: PPUSH
78010: CALL_OW 12
78014: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78015: LD_ADDR_OWVAR 31
78019: PUSH
78020: LD_INT 1
78022: PPUSH
78023: LD_INT 3
78025: PPUSH
78026: CALL_OW 12
78030: PUSH
78031: LD_INT 1
78033: PPUSH
78034: LD_INT 3
78036: PPUSH
78037: CALL_OW 12
78041: PUSH
78042: LD_INT 0
78044: PUSH
78045: LD_INT 0
78047: PUSH
78048: EMPTY
78049: LIST
78050: LIST
78051: LIST
78052: LIST
78053: ST_TO_ADDR
// animal := CreateHuman ;
78054: LD_ADDR_VAR 0 12
78058: PUSH
78059: CALL_OW 44
78063: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78064: LD_VAR 0 12
78068: PPUSH
78069: LD_VAR 0 8
78073: PPUSH
78074: LD_INT 0
78076: PPUSH
78077: CALL 79856 0 3
// end ;
78081: GO 77979
78083: POP
78084: POP
// if enchidnas then
78085: LD_VAR 0 4
78089: IFFALSE 78156
// for i = 1 to enchidnas do
78091: LD_ADDR_VAR 0 11
78095: PUSH
78096: DOUBLE
78097: LD_INT 1
78099: DEC
78100: ST_TO_ADDR
78101: LD_VAR 0 4
78105: PUSH
78106: FOR_TO
78107: IFFALSE 78154
// begin hc_class = 13 ;
78109: LD_ADDR_OWVAR 28
78113: PUSH
78114: LD_INT 13
78116: ST_TO_ADDR
// hc_gallery =  ;
78117: LD_ADDR_OWVAR 33
78121: PUSH
78122: LD_STRING 
78124: ST_TO_ADDR
// animal := CreateHuman ;
78125: LD_ADDR_VAR 0 12
78129: PUSH
78130: CALL_OW 44
78134: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78135: LD_VAR 0 12
78139: PPUSH
78140: LD_VAR 0 8
78144: PPUSH
78145: LD_INT 0
78147: PPUSH
78148: CALL 79856 0 3
// end ;
78152: GO 78106
78154: POP
78155: POP
// if fishes then
78156: LD_VAR 0 7
78160: IFFALSE 78227
// for i = 1 to fishes do
78162: LD_ADDR_VAR 0 11
78166: PUSH
78167: DOUBLE
78168: LD_INT 1
78170: DEC
78171: ST_TO_ADDR
78172: LD_VAR 0 7
78176: PUSH
78177: FOR_TO
78178: IFFALSE 78225
// begin hc_class = 20 ;
78180: LD_ADDR_OWVAR 28
78184: PUSH
78185: LD_INT 20
78187: ST_TO_ADDR
// hc_gallery =  ;
78188: LD_ADDR_OWVAR 33
78192: PUSH
78193: LD_STRING 
78195: ST_TO_ADDR
// animal := CreateHuman ;
78196: LD_ADDR_VAR 0 12
78200: PUSH
78201: CALL_OW 44
78205: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78206: LD_VAR 0 12
78210: PPUSH
78211: LD_VAR 0 9
78215: PPUSH
78216: LD_INT 0
78218: PPUSH
78219: CALL 79856 0 3
// end ;
78223: GO 78177
78225: POP
78226: POP
// end ;
78227: LD_VAR 0 10
78231: RET
// export function WantHeal ( sci , unit ) ; begin
78232: LD_INT 0
78234: PPUSH
// if GetTaskList ( sci ) > 0 then
78235: LD_VAR 0 1
78239: PPUSH
78240: CALL_OW 437
78244: PUSH
78245: LD_INT 0
78247: GREATER
78248: IFFALSE 78318
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78250: LD_VAR 0 1
78254: PPUSH
78255: CALL_OW 437
78259: PUSH
78260: LD_INT 1
78262: ARRAY
78263: PUSH
78264: LD_INT 1
78266: ARRAY
78267: PUSH
78268: LD_STRING l
78270: EQUAL
78271: PUSH
78272: LD_VAR 0 1
78276: PPUSH
78277: CALL_OW 437
78281: PUSH
78282: LD_INT 1
78284: ARRAY
78285: PUSH
78286: LD_INT 4
78288: ARRAY
78289: PUSH
78290: LD_VAR 0 2
78294: EQUAL
78295: AND
78296: IFFALSE 78308
// result := true else
78298: LD_ADDR_VAR 0 3
78302: PUSH
78303: LD_INT 1
78305: ST_TO_ADDR
78306: GO 78316
// result := false ;
78308: LD_ADDR_VAR 0 3
78312: PUSH
78313: LD_INT 0
78315: ST_TO_ADDR
// end else
78316: GO 78326
// result := false ;
78318: LD_ADDR_VAR 0 3
78322: PUSH
78323: LD_INT 0
78325: ST_TO_ADDR
// end ;
78326: LD_VAR 0 3
78330: RET
// export function HealTarget ( sci ) ; begin
78331: LD_INT 0
78333: PPUSH
// if not sci then
78334: LD_VAR 0 1
78338: NOT
78339: IFFALSE 78343
// exit ;
78341: GO 78408
// result := 0 ;
78343: LD_ADDR_VAR 0 2
78347: PUSH
78348: LD_INT 0
78350: ST_TO_ADDR
// if GetTaskList ( sci ) then
78351: LD_VAR 0 1
78355: PPUSH
78356: CALL_OW 437
78360: IFFALSE 78408
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78362: LD_VAR 0 1
78366: PPUSH
78367: CALL_OW 437
78371: PUSH
78372: LD_INT 1
78374: ARRAY
78375: PUSH
78376: LD_INT 1
78378: ARRAY
78379: PUSH
78380: LD_STRING l
78382: EQUAL
78383: IFFALSE 78408
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78385: LD_ADDR_VAR 0 2
78389: PUSH
78390: LD_VAR 0 1
78394: PPUSH
78395: CALL_OW 437
78399: PUSH
78400: LD_INT 1
78402: ARRAY
78403: PUSH
78404: LD_INT 4
78406: ARRAY
78407: ST_TO_ADDR
// end ;
78408: LD_VAR 0 2
78412: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78413: LD_INT 0
78415: PPUSH
78416: PPUSH
78417: PPUSH
78418: PPUSH
// if not base_units then
78419: LD_VAR 0 1
78423: NOT
78424: IFFALSE 78428
// exit ;
78426: GO 78515
// result := false ;
78428: LD_ADDR_VAR 0 2
78432: PUSH
78433: LD_INT 0
78435: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78436: LD_ADDR_VAR 0 5
78440: PUSH
78441: LD_VAR 0 1
78445: PPUSH
78446: LD_INT 21
78448: PUSH
78449: LD_INT 3
78451: PUSH
78452: EMPTY
78453: LIST
78454: LIST
78455: PPUSH
78456: CALL_OW 72
78460: ST_TO_ADDR
// if not tmp then
78461: LD_VAR 0 5
78465: NOT
78466: IFFALSE 78470
// exit ;
78468: GO 78515
// for i in tmp do
78470: LD_ADDR_VAR 0 3
78474: PUSH
78475: LD_VAR 0 5
78479: PUSH
78480: FOR_IN
78481: IFFALSE 78513
// begin result := EnemyInRange ( i , 22 ) ;
78483: LD_ADDR_VAR 0 2
78487: PUSH
78488: LD_VAR 0 3
78492: PPUSH
78493: LD_INT 22
78495: PPUSH
78496: CALL 76093 0 2
78500: ST_TO_ADDR
// if result then
78501: LD_VAR 0 2
78505: IFFALSE 78511
// exit ;
78507: POP
78508: POP
78509: GO 78515
// end ;
78511: GO 78480
78513: POP
78514: POP
// end ;
78515: LD_VAR 0 2
78519: RET
// export function FilterByTag ( units , tag ) ; begin
78520: LD_INT 0
78522: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
78523: LD_ADDR_VAR 0 3
78527: PUSH
78528: LD_VAR 0 1
78532: PPUSH
78533: LD_INT 120
78535: PUSH
78536: LD_VAR 0 2
78540: PUSH
78541: EMPTY
78542: LIST
78543: LIST
78544: PPUSH
78545: CALL_OW 72
78549: ST_TO_ADDR
// end ;
78550: LD_VAR 0 3
78554: RET
// export function IsDriver ( un ) ; begin
78555: LD_INT 0
78557: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78558: LD_ADDR_VAR 0 2
78562: PUSH
78563: LD_VAR 0 1
78567: PUSH
78568: LD_INT 55
78570: PUSH
78571: EMPTY
78572: LIST
78573: PPUSH
78574: CALL_OW 69
78578: IN
78579: ST_TO_ADDR
// end ;
78580: LD_VAR 0 2
78584: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78585: LD_INT 0
78587: PPUSH
78588: PPUSH
// list := [ ] ;
78589: LD_ADDR_VAR 0 5
78593: PUSH
78594: EMPTY
78595: ST_TO_ADDR
// case d of 0 :
78596: LD_VAR 0 3
78600: PUSH
78601: LD_INT 0
78603: DOUBLE
78604: EQUAL
78605: IFTRUE 78609
78607: GO 78742
78609: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78610: LD_ADDR_VAR 0 5
78614: PUSH
78615: LD_VAR 0 1
78619: PUSH
78620: LD_INT 4
78622: MINUS
78623: PUSH
78624: LD_VAR 0 2
78628: PUSH
78629: LD_INT 4
78631: MINUS
78632: PUSH
78633: LD_INT 2
78635: PUSH
78636: EMPTY
78637: LIST
78638: LIST
78639: LIST
78640: PUSH
78641: LD_VAR 0 1
78645: PUSH
78646: LD_INT 3
78648: MINUS
78649: PUSH
78650: LD_VAR 0 2
78654: PUSH
78655: LD_INT 1
78657: PUSH
78658: EMPTY
78659: LIST
78660: LIST
78661: LIST
78662: PUSH
78663: LD_VAR 0 1
78667: PUSH
78668: LD_INT 4
78670: PLUS
78671: PUSH
78672: LD_VAR 0 2
78676: PUSH
78677: LD_INT 4
78679: PUSH
78680: EMPTY
78681: LIST
78682: LIST
78683: LIST
78684: PUSH
78685: LD_VAR 0 1
78689: PUSH
78690: LD_INT 3
78692: PLUS
78693: PUSH
78694: LD_VAR 0 2
78698: PUSH
78699: LD_INT 3
78701: PLUS
78702: PUSH
78703: LD_INT 5
78705: PUSH
78706: EMPTY
78707: LIST
78708: LIST
78709: LIST
78710: PUSH
78711: LD_VAR 0 1
78715: PUSH
78716: LD_VAR 0 2
78720: PUSH
78721: LD_INT 4
78723: PLUS
78724: PUSH
78725: LD_INT 0
78727: PUSH
78728: EMPTY
78729: LIST
78730: LIST
78731: LIST
78732: PUSH
78733: EMPTY
78734: LIST
78735: LIST
78736: LIST
78737: LIST
78738: LIST
78739: ST_TO_ADDR
// end ; 1 :
78740: GO 79440
78742: LD_INT 1
78744: DOUBLE
78745: EQUAL
78746: IFTRUE 78750
78748: GO 78883
78750: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78751: LD_ADDR_VAR 0 5
78755: PUSH
78756: LD_VAR 0 1
78760: PUSH
78761: LD_VAR 0 2
78765: PUSH
78766: LD_INT 4
78768: MINUS
78769: PUSH
78770: LD_INT 3
78772: PUSH
78773: EMPTY
78774: LIST
78775: LIST
78776: LIST
78777: PUSH
78778: LD_VAR 0 1
78782: PUSH
78783: LD_INT 3
78785: MINUS
78786: PUSH
78787: LD_VAR 0 2
78791: PUSH
78792: LD_INT 3
78794: MINUS
78795: PUSH
78796: LD_INT 2
78798: PUSH
78799: EMPTY
78800: LIST
78801: LIST
78802: LIST
78803: PUSH
78804: LD_VAR 0 1
78808: PUSH
78809: LD_INT 4
78811: MINUS
78812: PUSH
78813: LD_VAR 0 2
78817: PUSH
78818: LD_INT 1
78820: PUSH
78821: EMPTY
78822: LIST
78823: LIST
78824: LIST
78825: PUSH
78826: LD_VAR 0 1
78830: PUSH
78831: LD_VAR 0 2
78835: PUSH
78836: LD_INT 3
78838: PLUS
78839: PUSH
78840: LD_INT 0
78842: PUSH
78843: EMPTY
78844: LIST
78845: LIST
78846: LIST
78847: PUSH
78848: LD_VAR 0 1
78852: PUSH
78853: LD_INT 4
78855: PLUS
78856: PUSH
78857: LD_VAR 0 2
78861: PUSH
78862: LD_INT 4
78864: PLUS
78865: PUSH
78866: LD_INT 5
78868: PUSH
78869: EMPTY
78870: LIST
78871: LIST
78872: LIST
78873: PUSH
78874: EMPTY
78875: LIST
78876: LIST
78877: LIST
78878: LIST
78879: LIST
78880: ST_TO_ADDR
// end ; 2 :
78881: GO 79440
78883: LD_INT 2
78885: DOUBLE
78886: EQUAL
78887: IFTRUE 78891
78889: GO 79020
78891: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78892: LD_ADDR_VAR 0 5
78896: PUSH
78897: LD_VAR 0 1
78901: PUSH
78902: LD_VAR 0 2
78906: PUSH
78907: LD_INT 3
78909: MINUS
78910: PUSH
78911: LD_INT 3
78913: PUSH
78914: EMPTY
78915: LIST
78916: LIST
78917: LIST
78918: PUSH
78919: LD_VAR 0 1
78923: PUSH
78924: LD_INT 4
78926: PLUS
78927: PUSH
78928: LD_VAR 0 2
78932: PUSH
78933: LD_INT 4
78935: PUSH
78936: EMPTY
78937: LIST
78938: LIST
78939: LIST
78940: PUSH
78941: LD_VAR 0 1
78945: PUSH
78946: LD_VAR 0 2
78950: PUSH
78951: LD_INT 4
78953: PLUS
78954: PUSH
78955: LD_INT 0
78957: PUSH
78958: EMPTY
78959: LIST
78960: LIST
78961: LIST
78962: PUSH
78963: LD_VAR 0 1
78967: PUSH
78968: LD_INT 3
78970: MINUS
78971: PUSH
78972: LD_VAR 0 2
78976: PUSH
78977: LD_INT 1
78979: PUSH
78980: EMPTY
78981: LIST
78982: LIST
78983: LIST
78984: PUSH
78985: LD_VAR 0 1
78989: PUSH
78990: LD_INT 4
78992: MINUS
78993: PUSH
78994: LD_VAR 0 2
78998: PUSH
78999: LD_INT 4
79001: MINUS
79002: PUSH
79003: LD_INT 2
79005: PUSH
79006: EMPTY
79007: LIST
79008: LIST
79009: LIST
79010: PUSH
79011: EMPTY
79012: LIST
79013: LIST
79014: LIST
79015: LIST
79016: LIST
79017: ST_TO_ADDR
// end ; 3 :
79018: GO 79440
79020: LD_INT 3
79022: DOUBLE
79023: EQUAL
79024: IFTRUE 79028
79026: GO 79161
79028: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79029: LD_ADDR_VAR 0 5
79033: PUSH
79034: LD_VAR 0 1
79038: PUSH
79039: LD_INT 3
79041: PLUS
79042: PUSH
79043: LD_VAR 0 2
79047: PUSH
79048: LD_INT 4
79050: PUSH
79051: EMPTY
79052: LIST
79053: LIST
79054: LIST
79055: PUSH
79056: LD_VAR 0 1
79060: PUSH
79061: LD_INT 4
79063: PLUS
79064: PUSH
79065: LD_VAR 0 2
79069: PUSH
79070: LD_INT 4
79072: PLUS
79073: PUSH
79074: LD_INT 5
79076: PUSH
79077: EMPTY
79078: LIST
79079: LIST
79080: LIST
79081: PUSH
79082: LD_VAR 0 1
79086: PUSH
79087: LD_INT 4
79089: MINUS
79090: PUSH
79091: LD_VAR 0 2
79095: PUSH
79096: LD_INT 1
79098: PUSH
79099: EMPTY
79100: LIST
79101: LIST
79102: LIST
79103: PUSH
79104: LD_VAR 0 1
79108: PUSH
79109: LD_VAR 0 2
79113: PUSH
79114: LD_INT 4
79116: MINUS
79117: PUSH
79118: LD_INT 3
79120: PUSH
79121: EMPTY
79122: LIST
79123: LIST
79124: LIST
79125: PUSH
79126: LD_VAR 0 1
79130: PUSH
79131: LD_INT 3
79133: MINUS
79134: PUSH
79135: LD_VAR 0 2
79139: PUSH
79140: LD_INT 3
79142: MINUS
79143: PUSH
79144: LD_INT 2
79146: PUSH
79147: EMPTY
79148: LIST
79149: LIST
79150: LIST
79151: PUSH
79152: EMPTY
79153: LIST
79154: LIST
79155: LIST
79156: LIST
79157: LIST
79158: ST_TO_ADDR
// end ; 4 :
79159: GO 79440
79161: LD_INT 4
79163: DOUBLE
79164: EQUAL
79165: IFTRUE 79169
79167: GO 79302
79169: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79170: LD_ADDR_VAR 0 5
79174: PUSH
79175: LD_VAR 0 1
79179: PUSH
79180: LD_VAR 0 2
79184: PUSH
79185: LD_INT 4
79187: PLUS
79188: PUSH
79189: LD_INT 0
79191: PUSH
79192: EMPTY
79193: LIST
79194: LIST
79195: LIST
79196: PUSH
79197: LD_VAR 0 1
79201: PUSH
79202: LD_INT 3
79204: PLUS
79205: PUSH
79206: LD_VAR 0 2
79210: PUSH
79211: LD_INT 3
79213: PLUS
79214: PUSH
79215: LD_INT 5
79217: PUSH
79218: EMPTY
79219: LIST
79220: LIST
79221: LIST
79222: PUSH
79223: LD_VAR 0 1
79227: PUSH
79228: LD_INT 4
79230: PLUS
79231: PUSH
79232: LD_VAR 0 2
79236: PUSH
79237: LD_INT 4
79239: PUSH
79240: EMPTY
79241: LIST
79242: LIST
79243: LIST
79244: PUSH
79245: LD_VAR 0 1
79249: PUSH
79250: LD_VAR 0 2
79254: PUSH
79255: LD_INT 3
79257: MINUS
79258: PUSH
79259: LD_INT 3
79261: PUSH
79262: EMPTY
79263: LIST
79264: LIST
79265: LIST
79266: PUSH
79267: LD_VAR 0 1
79271: PUSH
79272: LD_INT 4
79274: MINUS
79275: PUSH
79276: LD_VAR 0 2
79280: PUSH
79281: LD_INT 4
79283: MINUS
79284: PUSH
79285: LD_INT 2
79287: PUSH
79288: EMPTY
79289: LIST
79290: LIST
79291: LIST
79292: PUSH
79293: EMPTY
79294: LIST
79295: LIST
79296: LIST
79297: LIST
79298: LIST
79299: ST_TO_ADDR
// end ; 5 :
79300: GO 79440
79302: LD_INT 5
79304: DOUBLE
79305: EQUAL
79306: IFTRUE 79310
79308: GO 79439
79310: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79311: LD_ADDR_VAR 0 5
79315: PUSH
79316: LD_VAR 0 1
79320: PUSH
79321: LD_INT 4
79323: MINUS
79324: PUSH
79325: LD_VAR 0 2
79329: PUSH
79330: LD_INT 1
79332: PUSH
79333: EMPTY
79334: LIST
79335: LIST
79336: LIST
79337: PUSH
79338: LD_VAR 0 1
79342: PUSH
79343: LD_VAR 0 2
79347: PUSH
79348: LD_INT 4
79350: MINUS
79351: PUSH
79352: LD_INT 3
79354: PUSH
79355: EMPTY
79356: LIST
79357: LIST
79358: LIST
79359: PUSH
79360: LD_VAR 0 1
79364: PUSH
79365: LD_INT 4
79367: PLUS
79368: PUSH
79369: LD_VAR 0 2
79373: PUSH
79374: LD_INT 4
79376: PLUS
79377: PUSH
79378: LD_INT 5
79380: PUSH
79381: EMPTY
79382: LIST
79383: LIST
79384: LIST
79385: PUSH
79386: LD_VAR 0 1
79390: PUSH
79391: LD_INT 3
79393: PLUS
79394: PUSH
79395: LD_VAR 0 2
79399: PUSH
79400: LD_INT 4
79402: PUSH
79403: EMPTY
79404: LIST
79405: LIST
79406: LIST
79407: PUSH
79408: LD_VAR 0 1
79412: PUSH
79413: LD_VAR 0 2
79417: PUSH
79418: LD_INT 3
79420: PLUS
79421: PUSH
79422: LD_INT 0
79424: PUSH
79425: EMPTY
79426: LIST
79427: LIST
79428: LIST
79429: PUSH
79430: EMPTY
79431: LIST
79432: LIST
79433: LIST
79434: LIST
79435: LIST
79436: ST_TO_ADDR
// end ; end ;
79437: GO 79440
79439: POP
// result := list ;
79440: LD_ADDR_VAR 0 4
79444: PUSH
79445: LD_VAR 0 5
79449: ST_TO_ADDR
// end ;
79450: LD_VAR 0 4
79454: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79455: LD_INT 0
79457: PPUSH
79458: PPUSH
79459: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79460: LD_VAR 0 1
79464: NOT
79465: PUSH
79466: LD_VAR 0 2
79470: PUSH
79471: LD_INT 1
79473: PUSH
79474: LD_INT 2
79476: PUSH
79477: LD_INT 3
79479: PUSH
79480: LD_INT 4
79482: PUSH
79483: EMPTY
79484: LIST
79485: LIST
79486: LIST
79487: LIST
79488: IN
79489: NOT
79490: OR
79491: IFFALSE 79495
// exit ;
79493: GO 79578
// tmp := [ ] ;
79495: LD_ADDR_VAR 0 5
79499: PUSH
79500: EMPTY
79501: ST_TO_ADDR
// for i in units do
79502: LD_ADDR_VAR 0 4
79506: PUSH
79507: LD_VAR 0 1
79511: PUSH
79512: FOR_IN
79513: IFFALSE 79547
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
79515: LD_ADDR_VAR 0 5
79519: PUSH
79520: LD_VAR 0 5
79524: PPUSH
79525: LD_VAR 0 4
79529: PPUSH
79530: LD_VAR 0 2
79534: PPUSH
79535: CALL_OW 259
79539: PPUSH
79540: CALL 80951 0 2
79544: ST_TO_ADDR
79545: GO 79512
79547: POP
79548: POP
// if not tmp then
79549: LD_VAR 0 5
79553: NOT
79554: IFFALSE 79558
// exit ;
79556: GO 79578
// result := SortListByListDesc ( units , tmp ) ;
79558: LD_ADDR_VAR 0 3
79562: PUSH
79563: LD_VAR 0 1
79567: PPUSH
79568: LD_VAR 0 5
79572: PPUSH
79573: CALL_OW 77
79577: ST_TO_ADDR
// end ;
79578: LD_VAR 0 3
79582: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79583: LD_INT 0
79585: PPUSH
79586: PPUSH
79587: PPUSH
// result := false ;
79588: LD_ADDR_VAR 0 3
79592: PUSH
79593: LD_INT 0
79595: ST_TO_ADDR
// if not building then
79596: LD_VAR 0 2
79600: NOT
79601: IFFALSE 79605
// exit ;
79603: GO 79743
// x := GetX ( building ) ;
79605: LD_ADDR_VAR 0 4
79609: PUSH
79610: LD_VAR 0 2
79614: PPUSH
79615: CALL_OW 250
79619: ST_TO_ADDR
// y := GetY ( building ) ;
79620: LD_ADDR_VAR 0 5
79624: PUSH
79625: LD_VAR 0 2
79629: PPUSH
79630: CALL_OW 251
79634: ST_TO_ADDR
// if not x or not y then
79635: LD_VAR 0 4
79639: NOT
79640: PUSH
79641: LD_VAR 0 5
79645: NOT
79646: OR
79647: IFFALSE 79651
// exit ;
79649: GO 79743
// if GetTaskList ( unit ) then
79651: LD_VAR 0 1
79655: PPUSH
79656: CALL_OW 437
79660: IFFALSE 79743
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79662: LD_STRING e
79664: PUSH
79665: LD_VAR 0 1
79669: PPUSH
79670: CALL_OW 437
79674: PUSH
79675: LD_INT 1
79677: ARRAY
79678: PUSH
79679: LD_INT 1
79681: ARRAY
79682: EQUAL
79683: PUSH
79684: LD_VAR 0 4
79688: PUSH
79689: LD_VAR 0 1
79693: PPUSH
79694: CALL_OW 437
79698: PUSH
79699: LD_INT 1
79701: ARRAY
79702: PUSH
79703: LD_INT 2
79705: ARRAY
79706: EQUAL
79707: AND
79708: PUSH
79709: LD_VAR 0 5
79713: PUSH
79714: LD_VAR 0 1
79718: PPUSH
79719: CALL_OW 437
79723: PUSH
79724: LD_INT 1
79726: ARRAY
79727: PUSH
79728: LD_INT 3
79730: ARRAY
79731: EQUAL
79732: AND
79733: IFFALSE 79743
// result := true end ;
79735: LD_ADDR_VAR 0 3
79739: PUSH
79740: LD_INT 1
79742: ST_TO_ADDR
// end ;
79743: LD_VAR 0 3
79747: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79748: LD_INT 0
79750: PPUSH
// result := false ;
79751: LD_ADDR_VAR 0 4
79755: PUSH
79756: LD_INT 0
79758: ST_TO_ADDR
// if GetTaskList ( unit ) then
79759: LD_VAR 0 1
79763: PPUSH
79764: CALL_OW 437
79768: IFFALSE 79851
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79770: LD_STRING M
79772: PUSH
79773: LD_VAR 0 1
79777: PPUSH
79778: CALL_OW 437
79782: PUSH
79783: LD_INT 1
79785: ARRAY
79786: PUSH
79787: LD_INT 1
79789: ARRAY
79790: EQUAL
79791: PUSH
79792: LD_VAR 0 2
79796: PUSH
79797: LD_VAR 0 1
79801: PPUSH
79802: CALL_OW 437
79806: PUSH
79807: LD_INT 1
79809: ARRAY
79810: PUSH
79811: LD_INT 2
79813: ARRAY
79814: EQUAL
79815: AND
79816: PUSH
79817: LD_VAR 0 3
79821: PUSH
79822: LD_VAR 0 1
79826: PPUSH
79827: CALL_OW 437
79831: PUSH
79832: LD_INT 1
79834: ARRAY
79835: PUSH
79836: LD_INT 3
79838: ARRAY
79839: EQUAL
79840: AND
79841: IFFALSE 79851
// result := true ;
79843: LD_ADDR_VAR 0 4
79847: PUSH
79848: LD_INT 1
79850: ST_TO_ADDR
// end ; end ;
79851: LD_VAR 0 4
79855: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79856: LD_INT 0
79858: PPUSH
79859: PPUSH
79860: PPUSH
79861: PPUSH
// if not unit or not area then
79862: LD_VAR 0 1
79866: NOT
79867: PUSH
79868: LD_VAR 0 2
79872: NOT
79873: OR
79874: IFFALSE 79878
// exit ;
79876: GO 80054
// tmp := AreaToList ( area , i ) ;
79878: LD_ADDR_VAR 0 6
79882: PUSH
79883: LD_VAR 0 2
79887: PPUSH
79888: LD_VAR 0 5
79892: PPUSH
79893: CALL_OW 517
79897: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79898: LD_ADDR_VAR 0 5
79902: PUSH
79903: DOUBLE
79904: LD_INT 1
79906: DEC
79907: ST_TO_ADDR
79908: LD_VAR 0 6
79912: PUSH
79913: LD_INT 1
79915: ARRAY
79916: PUSH
79917: FOR_TO
79918: IFFALSE 80052
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79920: LD_ADDR_VAR 0 7
79924: PUSH
79925: LD_VAR 0 6
79929: PUSH
79930: LD_INT 1
79932: ARRAY
79933: PUSH
79934: LD_VAR 0 5
79938: ARRAY
79939: PUSH
79940: LD_VAR 0 6
79944: PUSH
79945: LD_INT 2
79947: ARRAY
79948: PUSH
79949: LD_VAR 0 5
79953: ARRAY
79954: PUSH
79955: EMPTY
79956: LIST
79957: LIST
79958: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
79959: LD_INT 92
79961: PUSH
79962: LD_VAR 0 7
79966: PUSH
79967: LD_INT 1
79969: ARRAY
79970: PUSH
79971: LD_VAR 0 7
79975: PUSH
79976: LD_INT 2
79978: ARRAY
79979: PUSH
79980: LD_INT 2
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: LIST
79987: LIST
79988: PPUSH
79989: CALL_OW 69
79993: PUSH
79994: LD_INT 0
79996: EQUAL
79997: IFFALSE 80050
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79999: LD_VAR 0 1
80003: PPUSH
80004: LD_VAR 0 7
80008: PUSH
80009: LD_INT 1
80011: ARRAY
80012: PPUSH
80013: LD_VAR 0 7
80017: PUSH
80018: LD_INT 2
80020: ARRAY
80021: PPUSH
80022: LD_VAR 0 3
80026: PPUSH
80027: CALL_OW 48
// result := IsPlaced ( unit ) ;
80031: LD_ADDR_VAR 0 4
80035: PUSH
80036: LD_VAR 0 1
80040: PPUSH
80041: CALL_OW 305
80045: ST_TO_ADDR
// exit ;
80046: POP
80047: POP
80048: GO 80054
// end ; end ;
80050: GO 79917
80052: POP
80053: POP
// end ;
80054: LD_VAR 0 4
80058: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80059: LD_INT 0
80061: PPUSH
80062: PPUSH
80063: PPUSH
// if not side or side > 8 then
80064: LD_VAR 0 1
80068: NOT
80069: PUSH
80070: LD_VAR 0 1
80074: PUSH
80075: LD_INT 8
80077: GREATER
80078: OR
80079: IFFALSE 80083
// exit ;
80081: GO 80270
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80083: LD_ADDR_VAR 0 4
80087: PUSH
80088: LD_INT 22
80090: PUSH
80091: LD_VAR 0 1
80095: PUSH
80096: EMPTY
80097: LIST
80098: LIST
80099: PUSH
80100: LD_INT 21
80102: PUSH
80103: LD_INT 3
80105: PUSH
80106: EMPTY
80107: LIST
80108: LIST
80109: PUSH
80110: EMPTY
80111: LIST
80112: LIST
80113: PPUSH
80114: CALL_OW 69
80118: ST_TO_ADDR
// if not tmp then
80119: LD_VAR 0 4
80123: NOT
80124: IFFALSE 80128
// exit ;
80126: GO 80270
// enable_addtolog := true ;
80128: LD_ADDR_OWVAR 81
80132: PUSH
80133: LD_INT 1
80135: ST_TO_ADDR
// AddToLog ( [ ) ;
80136: LD_STRING [
80138: PPUSH
80139: CALL_OW 561
// for i in tmp do
80143: LD_ADDR_VAR 0 3
80147: PUSH
80148: LD_VAR 0 4
80152: PUSH
80153: FOR_IN
80154: IFFALSE 80261
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80156: LD_STRING [
80158: PUSH
80159: LD_VAR 0 3
80163: PPUSH
80164: CALL_OW 266
80168: STR
80169: PUSH
80170: LD_STRING , 
80172: STR
80173: PUSH
80174: LD_VAR 0 3
80178: PPUSH
80179: CALL_OW 250
80183: STR
80184: PUSH
80185: LD_STRING , 
80187: STR
80188: PUSH
80189: LD_VAR 0 3
80193: PPUSH
80194: CALL_OW 251
80198: STR
80199: PUSH
80200: LD_STRING , 
80202: STR
80203: PUSH
80204: LD_VAR 0 3
80208: PPUSH
80209: CALL_OW 254
80213: STR
80214: PUSH
80215: LD_STRING , 
80217: STR
80218: PUSH
80219: LD_VAR 0 3
80223: PPUSH
80224: LD_INT 1
80226: PPUSH
80227: CALL_OW 268
80231: STR
80232: PUSH
80233: LD_STRING , 
80235: STR
80236: PUSH
80237: LD_VAR 0 3
80241: PPUSH
80242: LD_INT 2
80244: PPUSH
80245: CALL_OW 268
80249: STR
80250: PUSH
80251: LD_STRING ],
80253: STR
80254: PPUSH
80255: CALL_OW 561
// end ;
80259: GO 80153
80261: POP
80262: POP
// AddToLog ( ]; ) ;
80263: LD_STRING ];
80265: PPUSH
80266: CALL_OW 561
// end ;
80270: LD_VAR 0 2
80274: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80275: LD_INT 0
80277: PPUSH
80278: PPUSH
80279: PPUSH
80280: PPUSH
80281: PPUSH
// if not area or not rate or not max then
80282: LD_VAR 0 1
80286: NOT
80287: PUSH
80288: LD_VAR 0 2
80292: NOT
80293: OR
80294: PUSH
80295: LD_VAR 0 4
80299: NOT
80300: OR
80301: IFFALSE 80305
// exit ;
80303: GO 80494
// while 1 do
80305: LD_INT 1
80307: IFFALSE 80494
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80309: LD_ADDR_VAR 0 9
80313: PUSH
80314: LD_VAR 0 1
80318: PPUSH
80319: LD_INT 1
80321: PPUSH
80322: CALL_OW 287
80326: PUSH
80327: LD_INT 10
80329: MUL
80330: ST_TO_ADDR
// r := rate / 10 ;
80331: LD_ADDR_VAR 0 7
80335: PUSH
80336: LD_VAR 0 2
80340: PUSH
80341: LD_INT 10
80343: DIVREAL
80344: ST_TO_ADDR
// time := 1 1$00 ;
80345: LD_ADDR_VAR 0 8
80349: PUSH
80350: LD_INT 2100
80352: ST_TO_ADDR
// if amount < min then
80353: LD_VAR 0 9
80357: PUSH
80358: LD_VAR 0 3
80362: LESS
80363: IFFALSE 80381
// r := r * 2 else
80365: LD_ADDR_VAR 0 7
80369: PUSH
80370: LD_VAR 0 7
80374: PUSH
80375: LD_INT 2
80377: MUL
80378: ST_TO_ADDR
80379: GO 80407
// if amount > max then
80381: LD_VAR 0 9
80385: PUSH
80386: LD_VAR 0 4
80390: GREATER
80391: IFFALSE 80407
// r := r / 2 ;
80393: LD_ADDR_VAR 0 7
80397: PUSH
80398: LD_VAR 0 7
80402: PUSH
80403: LD_INT 2
80405: DIVREAL
80406: ST_TO_ADDR
// time := time / r ;
80407: LD_ADDR_VAR 0 8
80411: PUSH
80412: LD_VAR 0 8
80416: PUSH
80417: LD_VAR 0 7
80421: DIVREAL
80422: ST_TO_ADDR
// if time < 0 then
80423: LD_VAR 0 8
80427: PUSH
80428: LD_INT 0
80430: LESS
80431: IFFALSE 80448
// time := time * - 1 ;
80433: LD_ADDR_VAR 0 8
80437: PUSH
80438: LD_VAR 0 8
80442: PUSH
80443: LD_INT 1
80445: NEG
80446: MUL
80447: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
80448: LD_VAR 0 8
80452: PUSH
80453: LD_INT 35
80455: PPUSH
80456: LD_INT 875
80458: PPUSH
80459: CALL_OW 12
80463: PLUS
80464: PPUSH
80465: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80469: LD_INT 1
80471: PPUSH
80472: LD_INT 5
80474: PPUSH
80475: CALL_OW 12
80479: PPUSH
80480: LD_VAR 0 1
80484: PPUSH
80485: LD_INT 1
80487: PPUSH
80488: CALL_OW 55
// end ;
80492: GO 80305
// end ;
80494: LD_VAR 0 5
80498: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80499: LD_INT 0
80501: PPUSH
80502: PPUSH
80503: PPUSH
80504: PPUSH
80505: PPUSH
80506: PPUSH
80507: PPUSH
80508: PPUSH
// if not turrets or not factories then
80509: LD_VAR 0 1
80513: NOT
80514: PUSH
80515: LD_VAR 0 2
80519: NOT
80520: OR
80521: IFFALSE 80525
// exit ;
80523: GO 80832
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80525: LD_ADDR_VAR 0 10
80529: PUSH
80530: LD_INT 5
80532: PUSH
80533: LD_INT 6
80535: PUSH
80536: EMPTY
80537: LIST
80538: LIST
80539: PUSH
80540: LD_INT 2
80542: PUSH
80543: LD_INT 4
80545: PUSH
80546: EMPTY
80547: LIST
80548: LIST
80549: PUSH
80550: LD_INT 3
80552: PUSH
80553: LD_INT 5
80555: PUSH
80556: EMPTY
80557: LIST
80558: LIST
80559: PUSH
80560: EMPTY
80561: LIST
80562: LIST
80563: LIST
80564: PUSH
80565: LD_INT 24
80567: PUSH
80568: LD_INT 25
80570: PUSH
80571: EMPTY
80572: LIST
80573: LIST
80574: PUSH
80575: LD_INT 23
80577: PUSH
80578: LD_INT 27
80580: PUSH
80581: EMPTY
80582: LIST
80583: LIST
80584: PUSH
80585: EMPTY
80586: LIST
80587: LIST
80588: PUSH
80589: LD_INT 42
80591: PUSH
80592: LD_INT 43
80594: PUSH
80595: EMPTY
80596: LIST
80597: LIST
80598: PUSH
80599: LD_INT 44
80601: PUSH
80602: LD_INT 46
80604: PUSH
80605: EMPTY
80606: LIST
80607: LIST
80608: PUSH
80609: LD_INT 45
80611: PUSH
80612: LD_INT 47
80614: PUSH
80615: EMPTY
80616: LIST
80617: LIST
80618: PUSH
80619: EMPTY
80620: LIST
80621: LIST
80622: LIST
80623: PUSH
80624: EMPTY
80625: LIST
80626: LIST
80627: LIST
80628: ST_TO_ADDR
// result := [ ] ;
80629: LD_ADDR_VAR 0 3
80633: PUSH
80634: EMPTY
80635: ST_TO_ADDR
// for i in turrets do
80636: LD_ADDR_VAR 0 4
80640: PUSH
80641: LD_VAR 0 1
80645: PUSH
80646: FOR_IN
80647: IFFALSE 80830
// begin nat := GetNation ( i ) ;
80649: LD_ADDR_VAR 0 7
80653: PUSH
80654: LD_VAR 0 4
80658: PPUSH
80659: CALL_OW 248
80663: ST_TO_ADDR
// weapon := 0 ;
80664: LD_ADDR_VAR 0 8
80668: PUSH
80669: LD_INT 0
80671: ST_TO_ADDR
// if not nat then
80672: LD_VAR 0 7
80676: NOT
80677: IFFALSE 80681
// continue ;
80679: GO 80646
// for j in list [ nat ] do
80681: LD_ADDR_VAR 0 5
80685: PUSH
80686: LD_VAR 0 10
80690: PUSH
80691: LD_VAR 0 7
80695: ARRAY
80696: PUSH
80697: FOR_IN
80698: IFFALSE 80739
// if GetBWeapon ( i ) = j [ 1 ] then
80700: LD_VAR 0 4
80704: PPUSH
80705: CALL_OW 269
80709: PUSH
80710: LD_VAR 0 5
80714: PUSH
80715: LD_INT 1
80717: ARRAY
80718: EQUAL
80719: IFFALSE 80737
// begin weapon := j [ 2 ] ;
80721: LD_ADDR_VAR 0 8
80725: PUSH
80726: LD_VAR 0 5
80730: PUSH
80731: LD_INT 2
80733: ARRAY
80734: ST_TO_ADDR
// break ;
80735: GO 80739
// end ;
80737: GO 80697
80739: POP
80740: POP
// if not weapon then
80741: LD_VAR 0 8
80745: NOT
80746: IFFALSE 80750
// continue ;
80748: GO 80646
// for k in factories do
80750: LD_ADDR_VAR 0 6
80754: PUSH
80755: LD_VAR 0 2
80759: PUSH
80760: FOR_IN
80761: IFFALSE 80826
// begin weapons := AvailableWeaponList ( k ) ;
80763: LD_ADDR_VAR 0 9
80767: PUSH
80768: LD_VAR 0 6
80772: PPUSH
80773: CALL_OW 478
80777: ST_TO_ADDR
// if not weapons then
80778: LD_VAR 0 9
80782: NOT
80783: IFFALSE 80787
// continue ;
80785: GO 80760
// if weapon in weapons then
80787: LD_VAR 0 8
80791: PUSH
80792: LD_VAR 0 9
80796: IN
80797: IFFALSE 80824
// begin result := [ i , weapon ] ;
80799: LD_ADDR_VAR 0 3
80803: PUSH
80804: LD_VAR 0 4
80808: PUSH
80809: LD_VAR 0 8
80813: PUSH
80814: EMPTY
80815: LIST
80816: LIST
80817: ST_TO_ADDR
// exit ;
80818: POP
80819: POP
80820: POP
80821: POP
80822: GO 80832
// end ; end ;
80824: GO 80760
80826: POP
80827: POP
// end ;
80828: GO 80646
80830: POP
80831: POP
// end ;
80832: LD_VAR 0 3
80836: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80837: LD_INT 0
80839: PPUSH
// if not side or side > 8 then
80840: LD_VAR 0 3
80844: NOT
80845: PUSH
80846: LD_VAR 0 3
80850: PUSH
80851: LD_INT 8
80853: GREATER
80854: OR
80855: IFFALSE 80859
// exit ;
80857: GO 80918
// if not range then
80859: LD_VAR 0 4
80863: NOT
80864: IFFALSE 80875
// range := - 12 ;
80866: LD_ADDR_VAR 0 4
80870: PUSH
80871: LD_INT 12
80873: NEG
80874: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80875: LD_VAR 0 1
80879: PPUSH
80880: LD_VAR 0 2
80884: PPUSH
80885: LD_VAR 0 3
80889: PPUSH
80890: LD_VAR 0 4
80894: PPUSH
80895: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80899: LD_VAR 0 1
80903: PPUSH
80904: LD_VAR 0 2
80908: PPUSH
80909: LD_VAR 0 3
80913: PPUSH
80914: CALL_OW 331
// end ;
80918: LD_VAR 0 5
80922: RET
// export function Video ( mode ) ; begin
80923: LD_INT 0
80925: PPUSH
// ingame_video = mode ;
80926: LD_ADDR_OWVAR 52
80930: PUSH
80931: LD_VAR 0 1
80935: ST_TO_ADDR
// interface_hidden = mode ;
80936: LD_ADDR_OWVAR 54
80940: PUSH
80941: LD_VAR 0 1
80945: ST_TO_ADDR
// end ;
80946: LD_VAR 0 2
80950: RET
// export function Join ( array , element ) ; begin
80951: LD_INT 0
80953: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80954: LD_ADDR_VAR 0 3
80958: PUSH
80959: LD_VAR 0 1
80963: PPUSH
80964: LD_VAR 0 1
80968: PUSH
80969: LD_INT 1
80971: PLUS
80972: PPUSH
80973: LD_VAR 0 2
80977: PPUSH
80978: CALL_OW 1
80982: ST_TO_ADDR
// end ;
80983: LD_VAR 0 3
80987: RET
// export function JoinUnion ( array , element ) ; begin
80988: LD_INT 0
80990: PPUSH
// result := array union element ;
80991: LD_ADDR_VAR 0 3
80995: PUSH
80996: LD_VAR 0 1
81000: PUSH
81001: LD_VAR 0 2
81005: UNION
81006: ST_TO_ADDR
// end ;
81007: LD_VAR 0 3
81011: RET
// export function GetBehemoths ( side ) ; begin
81012: LD_INT 0
81014: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
81015: LD_ADDR_VAR 0 2
81019: PUSH
81020: LD_INT 22
81022: PUSH
81023: LD_VAR 0 1
81027: PUSH
81028: EMPTY
81029: LIST
81030: LIST
81031: PUSH
81032: LD_INT 31
81034: PUSH
81035: LD_INT 25
81037: PUSH
81038: EMPTY
81039: LIST
81040: LIST
81041: PUSH
81042: EMPTY
81043: LIST
81044: LIST
81045: PPUSH
81046: CALL_OW 69
81050: ST_TO_ADDR
// end ;
81051: LD_VAR 0 2
81055: RET
// export function Shuffle ( array ) ; var i , index ; begin
81056: LD_INT 0
81058: PPUSH
81059: PPUSH
81060: PPUSH
// result := [ ] ;
81061: LD_ADDR_VAR 0 2
81065: PUSH
81066: EMPTY
81067: ST_TO_ADDR
// if not array then
81068: LD_VAR 0 1
81072: NOT
81073: IFFALSE 81077
// exit ;
81075: GO 81176
// Randomize ;
81077: CALL_OW 10
// for i = array downto 1 do
81081: LD_ADDR_VAR 0 3
81085: PUSH
81086: DOUBLE
81087: LD_VAR 0 1
81091: INC
81092: ST_TO_ADDR
81093: LD_INT 1
81095: PUSH
81096: FOR_DOWNTO
81097: IFFALSE 81174
// begin index := rand ( 1 , array ) ;
81099: LD_ADDR_VAR 0 4
81103: PUSH
81104: LD_INT 1
81106: PPUSH
81107: LD_VAR 0 1
81111: PPUSH
81112: CALL_OW 12
81116: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81117: LD_ADDR_VAR 0 2
81121: PUSH
81122: LD_VAR 0 2
81126: PPUSH
81127: LD_VAR 0 2
81131: PUSH
81132: LD_INT 1
81134: PLUS
81135: PPUSH
81136: LD_VAR 0 1
81140: PUSH
81141: LD_VAR 0 4
81145: ARRAY
81146: PPUSH
81147: CALL_OW 2
81151: ST_TO_ADDR
// array := Delete ( array , index ) ;
81152: LD_ADDR_VAR 0 1
81156: PUSH
81157: LD_VAR 0 1
81161: PPUSH
81162: LD_VAR 0 4
81166: PPUSH
81167: CALL_OW 3
81171: ST_TO_ADDR
// end ;
81172: GO 81096
81174: POP
81175: POP
// end ;
81176: LD_VAR 0 2
81180: RET
// export function GetBaseMaterials ( base ) ; begin
81181: LD_INT 0
81183: PPUSH
// result := [ 0 , 0 , 0 ] ;
81184: LD_ADDR_VAR 0 2
81188: PUSH
81189: LD_INT 0
81191: PUSH
81192: LD_INT 0
81194: PUSH
81195: LD_INT 0
81197: PUSH
81198: EMPTY
81199: LIST
81200: LIST
81201: LIST
81202: ST_TO_ADDR
// if not base then
81203: LD_VAR 0 1
81207: NOT
81208: IFFALSE 81212
// exit ;
81210: GO 81261
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81212: LD_ADDR_VAR 0 2
81216: PUSH
81217: LD_VAR 0 1
81221: PPUSH
81222: LD_INT 1
81224: PPUSH
81225: CALL_OW 275
81229: PUSH
81230: LD_VAR 0 1
81234: PPUSH
81235: LD_INT 2
81237: PPUSH
81238: CALL_OW 275
81242: PUSH
81243: LD_VAR 0 1
81247: PPUSH
81248: LD_INT 3
81250: PPUSH
81251: CALL_OW 275
81255: PUSH
81256: EMPTY
81257: LIST
81258: LIST
81259: LIST
81260: ST_TO_ADDR
// end ;
81261: LD_VAR 0 2
81265: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81266: LD_INT 0
81268: PPUSH
81269: PPUSH
// result := array ;
81270: LD_ADDR_VAR 0 3
81274: PUSH
81275: LD_VAR 0 1
81279: ST_TO_ADDR
// if size >= result then
81280: LD_VAR 0 2
81284: PUSH
81285: LD_VAR 0 3
81289: GREATEREQUAL
81290: IFFALSE 81294
// exit ;
81292: GO 81344
// if size then
81294: LD_VAR 0 2
81298: IFFALSE 81344
// for i := array downto size do
81300: LD_ADDR_VAR 0 4
81304: PUSH
81305: DOUBLE
81306: LD_VAR 0 1
81310: INC
81311: ST_TO_ADDR
81312: LD_VAR 0 2
81316: PUSH
81317: FOR_DOWNTO
81318: IFFALSE 81342
// result := Delete ( result , result ) ;
81320: LD_ADDR_VAR 0 3
81324: PUSH
81325: LD_VAR 0 3
81329: PPUSH
81330: LD_VAR 0 3
81334: PPUSH
81335: CALL_OW 3
81339: ST_TO_ADDR
81340: GO 81317
81342: POP
81343: POP
// end ;
81344: LD_VAR 0 3
81348: RET
// export function ComExit ( unit ) ; var tmp ; begin
81349: LD_INT 0
81351: PPUSH
81352: PPUSH
// if not IsInUnit ( unit ) then
81353: LD_VAR 0 1
81357: PPUSH
81358: CALL_OW 310
81362: NOT
81363: IFFALSE 81367
// exit ;
81365: GO 81427
// tmp := IsInUnit ( unit ) ;
81367: LD_ADDR_VAR 0 3
81371: PUSH
81372: LD_VAR 0 1
81376: PPUSH
81377: CALL_OW 310
81381: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81382: LD_VAR 0 3
81386: PPUSH
81387: CALL_OW 247
81391: PUSH
81392: LD_INT 2
81394: EQUAL
81395: IFFALSE 81408
// ComExitVehicle ( unit ) else
81397: LD_VAR 0 1
81401: PPUSH
81402: CALL_OW 121
81406: GO 81417
// ComExitBuilding ( unit ) ;
81408: LD_VAR 0 1
81412: PPUSH
81413: CALL_OW 122
// result := tmp ;
81417: LD_ADDR_VAR 0 2
81421: PUSH
81422: LD_VAR 0 3
81426: ST_TO_ADDR
// end ;
81427: LD_VAR 0 2
81431: RET
// export function ComExitAll ( units ) ; var i ; begin
81432: LD_INT 0
81434: PPUSH
81435: PPUSH
// if not units then
81436: LD_VAR 0 1
81440: NOT
81441: IFFALSE 81445
// exit ;
81443: GO 81471
// for i in units do
81445: LD_ADDR_VAR 0 3
81449: PUSH
81450: LD_VAR 0 1
81454: PUSH
81455: FOR_IN
81456: IFFALSE 81469
// ComExit ( i ) ;
81458: LD_VAR 0 3
81462: PPUSH
81463: CALL 81349 0 1
81467: GO 81455
81469: POP
81470: POP
// end ;
81471: LD_VAR 0 2
81475: RET
// export function ResetHc ; begin
81476: LD_INT 0
81478: PPUSH
// InitHc ;
81479: CALL_OW 19
// hc_importance := 0 ;
81483: LD_ADDR_OWVAR 32
81487: PUSH
81488: LD_INT 0
81490: ST_TO_ADDR
// end ;
81491: LD_VAR 0 1
81495: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81496: LD_INT 0
81498: PPUSH
81499: PPUSH
81500: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81501: LD_ADDR_VAR 0 6
81505: PUSH
81506: LD_VAR 0 1
81510: PUSH
81511: LD_VAR 0 3
81515: PLUS
81516: PUSH
81517: LD_INT 2
81519: DIV
81520: ST_TO_ADDR
// if _x < 0 then
81521: LD_VAR 0 6
81525: PUSH
81526: LD_INT 0
81528: LESS
81529: IFFALSE 81546
// _x := _x * - 1 ;
81531: LD_ADDR_VAR 0 6
81535: PUSH
81536: LD_VAR 0 6
81540: PUSH
81541: LD_INT 1
81543: NEG
81544: MUL
81545: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81546: LD_ADDR_VAR 0 7
81550: PUSH
81551: LD_VAR 0 2
81555: PUSH
81556: LD_VAR 0 4
81560: PLUS
81561: PUSH
81562: LD_INT 2
81564: DIV
81565: ST_TO_ADDR
// if _y < 0 then
81566: LD_VAR 0 7
81570: PUSH
81571: LD_INT 0
81573: LESS
81574: IFFALSE 81591
// _y := _y * - 1 ;
81576: LD_ADDR_VAR 0 7
81580: PUSH
81581: LD_VAR 0 7
81585: PUSH
81586: LD_INT 1
81588: NEG
81589: MUL
81590: ST_TO_ADDR
// result := [ _x , _y ] ;
81591: LD_ADDR_VAR 0 5
81595: PUSH
81596: LD_VAR 0 6
81600: PUSH
81601: LD_VAR 0 7
81605: PUSH
81606: EMPTY
81607: LIST
81608: LIST
81609: ST_TO_ADDR
// end ;
81610: LD_VAR 0 5
81614: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81615: LD_INT 0
81617: PPUSH
81618: PPUSH
81619: PPUSH
81620: PPUSH
// task := GetTaskList ( unit ) ;
81621: LD_ADDR_VAR 0 7
81625: PUSH
81626: LD_VAR 0 1
81630: PPUSH
81631: CALL_OW 437
81635: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81636: LD_VAR 0 7
81640: NOT
81641: PUSH
81642: LD_VAR 0 1
81646: PPUSH
81647: LD_VAR 0 2
81651: PPUSH
81652: CALL_OW 308
81656: NOT
81657: AND
81658: IFFALSE 81662
// exit ;
81660: GO 81780
// if IsInArea ( unit , area ) then
81662: LD_VAR 0 1
81666: PPUSH
81667: LD_VAR 0 2
81671: PPUSH
81672: CALL_OW 308
81676: IFFALSE 81694
// begin ComMoveToArea ( unit , goAway ) ;
81678: LD_VAR 0 1
81682: PPUSH
81683: LD_VAR 0 3
81687: PPUSH
81688: CALL_OW 113
// exit ;
81692: GO 81780
// end ; if task [ 1 ] [ 1 ] <> M then
81694: LD_VAR 0 7
81698: PUSH
81699: LD_INT 1
81701: ARRAY
81702: PUSH
81703: LD_INT 1
81705: ARRAY
81706: PUSH
81707: LD_STRING M
81709: NONEQUAL
81710: IFFALSE 81714
// exit ;
81712: GO 81780
// x := task [ 1 ] [ 2 ] ;
81714: LD_ADDR_VAR 0 5
81718: PUSH
81719: LD_VAR 0 7
81723: PUSH
81724: LD_INT 1
81726: ARRAY
81727: PUSH
81728: LD_INT 2
81730: ARRAY
81731: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81732: LD_ADDR_VAR 0 6
81736: PUSH
81737: LD_VAR 0 7
81741: PUSH
81742: LD_INT 1
81744: ARRAY
81745: PUSH
81746: LD_INT 3
81748: ARRAY
81749: ST_TO_ADDR
// if InArea ( x , y , area ) then
81750: LD_VAR 0 5
81754: PPUSH
81755: LD_VAR 0 6
81759: PPUSH
81760: LD_VAR 0 2
81764: PPUSH
81765: CALL_OW 309
81769: IFFALSE 81780
// ComStop ( unit ) ;
81771: LD_VAR 0 1
81775: PPUSH
81776: CALL_OW 141
// end ;
81780: LD_VAR 0 4
81784: RET
// export function Abs ( value ) ; begin
81785: LD_INT 0
81787: PPUSH
// result := value ;
81788: LD_ADDR_VAR 0 2
81792: PUSH
81793: LD_VAR 0 1
81797: ST_TO_ADDR
// if value < 0 then
81798: LD_VAR 0 1
81802: PUSH
81803: LD_INT 0
81805: LESS
81806: IFFALSE 81823
// result := value * - 1 ;
81808: LD_ADDR_VAR 0 2
81812: PUSH
81813: LD_VAR 0 1
81817: PUSH
81818: LD_INT 1
81820: NEG
81821: MUL
81822: ST_TO_ADDR
// end ;
81823: LD_VAR 0 2
81827: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81828: LD_INT 0
81830: PPUSH
81831: PPUSH
81832: PPUSH
81833: PPUSH
81834: PPUSH
81835: PPUSH
81836: PPUSH
81837: PPUSH
// if not unit or not building then
81838: LD_VAR 0 1
81842: NOT
81843: PUSH
81844: LD_VAR 0 2
81848: NOT
81849: OR
81850: IFFALSE 81854
// exit ;
81852: GO 82080
// x := GetX ( building ) ;
81854: LD_ADDR_VAR 0 4
81858: PUSH
81859: LD_VAR 0 2
81863: PPUSH
81864: CALL_OW 250
81868: ST_TO_ADDR
// y := GetY ( building ) ;
81869: LD_ADDR_VAR 0 6
81873: PUSH
81874: LD_VAR 0 2
81878: PPUSH
81879: CALL_OW 251
81883: ST_TO_ADDR
// d := GetDir ( building ) ;
81884: LD_ADDR_VAR 0 8
81888: PUSH
81889: LD_VAR 0 2
81893: PPUSH
81894: CALL_OW 254
81898: ST_TO_ADDR
// r := 4 ;
81899: LD_ADDR_VAR 0 9
81903: PUSH
81904: LD_INT 4
81906: ST_TO_ADDR
// for i := 1 to 5 do
81907: LD_ADDR_VAR 0 10
81911: PUSH
81912: DOUBLE
81913: LD_INT 1
81915: DEC
81916: ST_TO_ADDR
81917: LD_INT 5
81919: PUSH
81920: FOR_TO
81921: IFFALSE 82078
// begin _x := ShiftX ( x , d , r + i ) ;
81923: LD_ADDR_VAR 0 5
81927: PUSH
81928: LD_VAR 0 4
81932: PPUSH
81933: LD_VAR 0 8
81937: PPUSH
81938: LD_VAR 0 9
81942: PUSH
81943: LD_VAR 0 10
81947: PLUS
81948: PPUSH
81949: CALL_OW 272
81953: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81954: LD_ADDR_VAR 0 7
81958: PUSH
81959: LD_VAR 0 6
81963: PPUSH
81964: LD_VAR 0 8
81968: PPUSH
81969: LD_VAR 0 9
81973: PUSH
81974: LD_VAR 0 10
81978: PLUS
81979: PPUSH
81980: CALL_OW 273
81984: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81985: LD_VAR 0 5
81989: PPUSH
81990: LD_VAR 0 7
81994: PPUSH
81995: CALL_OW 488
81999: PUSH
82000: LD_VAR 0 5
82004: PPUSH
82005: LD_VAR 0 7
82009: PPUSH
82010: CALL_OW 428
82014: PPUSH
82015: CALL_OW 247
82019: PUSH
82020: LD_INT 3
82022: PUSH
82023: LD_INT 2
82025: PUSH
82026: EMPTY
82027: LIST
82028: LIST
82029: IN
82030: NOT
82031: AND
82032: IFFALSE 82076
// begin ComMoveXY ( unit , _x , _y ) ;
82034: LD_VAR 0 1
82038: PPUSH
82039: LD_VAR 0 5
82043: PPUSH
82044: LD_VAR 0 7
82048: PPUSH
82049: CALL_OW 111
// result := [ _x , _y ] ;
82053: LD_ADDR_VAR 0 3
82057: PUSH
82058: LD_VAR 0 5
82062: PUSH
82063: LD_VAR 0 7
82067: PUSH
82068: EMPTY
82069: LIST
82070: LIST
82071: ST_TO_ADDR
// exit ;
82072: POP
82073: POP
82074: GO 82080
// end ; end ;
82076: GO 81920
82078: POP
82079: POP
// end ;
82080: LD_VAR 0 3
82084: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82085: LD_INT 0
82087: PPUSH
82088: PPUSH
82089: PPUSH
// result := 0 ;
82090: LD_ADDR_VAR 0 3
82094: PUSH
82095: LD_INT 0
82097: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82098: LD_VAR 0 1
82102: PUSH
82103: LD_INT 0
82105: LESS
82106: PUSH
82107: LD_VAR 0 1
82111: PUSH
82112: LD_INT 8
82114: GREATER
82115: OR
82116: PUSH
82117: LD_VAR 0 2
82121: PUSH
82122: LD_INT 0
82124: LESS
82125: OR
82126: PUSH
82127: LD_VAR 0 2
82131: PUSH
82132: LD_INT 8
82134: GREATER
82135: OR
82136: IFFALSE 82140
// exit ;
82138: GO 82215
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82140: LD_ADDR_VAR 0 4
82144: PUSH
82145: LD_INT 22
82147: PUSH
82148: LD_VAR 0 2
82152: PUSH
82153: EMPTY
82154: LIST
82155: LIST
82156: PPUSH
82157: CALL_OW 69
82161: PUSH
82162: FOR_IN
82163: IFFALSE 82213
// begin un := UnitShoot ( i ) ;
82165: LD_ADDR_VAR 0 5
82169: PUSH
82170: LD_VAR 0 4
82174: PPUSH
82175: CALL_OW 504
82179: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82180: LD_VAR 0 5
82184: PPUSH
82185: CALL_OW 255
82189: PUSH
82190: LD_VAR 0 1
82194: EQUAL
82195: IFFALSE 82211
// begin result := un ;
82197: LD_ADDR_VAR 0 3
82201: PUSH
82202: LD_VAR 0 5
82206: ST_TO_ADDR
// exit ;
82207: POP
82208: POP
82209: GO 82215
// end ; end ;
82211: GO 82162
82213: POP
82214: POP
// end ;
82215: LD_VAR 0 3
82219: RET
// export function GetCargoBay ( units ) ; begin
82220: LD_INT 0
82222: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82223: LD_ADDR_VAR 0 2
82227: PUSH
82228: LD_VAR 0 1
82232: PPUSH
82233: LD_INT 2
82235: PUSH
82236: LD_INT 34
82238: PUSH
82239: LD_INT 12
82241: PUSH
82242: EMPTY
82243: LIST
82244: LIST
82245: PUSH
82246: LD_INT 34
82248: PUSH
82249: LD_INT 51
82251: PUSH
82252: EMPTY
82253: LIST
82254: LIST
82255: PUSH
82256: LD_INT 34
82258: PUSH
82259: LD_INT 32
82261: PUSH
82262: EMPTY
82263: LIST
82264: LIST
82265: PUSH
82266: LD_INT 34
82268: PUSH
82269: LD_INT 89
82271: PUSH
82272: EMPTY
82273: LIST
82274: LIST
82275: PUSH
82276: EMPTY
82277: LIST
82278: LIST
82279: LIST
82280: LIST
82281: LIST
82282: PPUSH
82283: CALL_OW 72
82287: ST_TO_ADDR
// end ;
82288: LD_VAR 0 2
82292: RET
// export function Negate ( value ) ; begin
82293: LD_INT 0
82295: PPUSH
// result := not value ;
82296: LD_ADDR_VAR 0 2
82300: PUSH
82301: LD_VAR 0 1
82305: NOT
82306: ST_TO_ADDR
// end ;
82307: LD_VAR 0 2
82311: RET
// export function Inc ( value ) ; begin
82312: LD_INT 0
82314: PPUSH
// result := value + 1 ;
82315: LD_ADDR_VAR 0 2
82319: PUSH
82320: LD_VAR 0 1
82324: PUSH
82325: LD_INT 1
82327: PLUS
82328: ST_TO_ADDR
// end ;
82329: LD_VAR 0 2
82333: RET
// export function Dec ( value ) ; begin
82334: LD_INT 0
82336: PPUSH
// result := value - 1 ;
82337: LD_ADDR_VAR 0 2
82341: PUSH
82342: LD_VAR 0 1
82346: PUSH
82347: LD_INT 1
82349: MINUS
82350: ST_TO_ADDR
// end ;
82351: LD_VAR 0 2
82355: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
82356: LD_INT 0
82358: PPUSH
82359: PPUSH
82360: PPUSH
82361: PPUSH
82362: PPUSH
82363: PPUSH
82364: PPUSH
82365: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
82366: LD_VAR 0 1
82370: PPUSH
82371: LD_VAR 0 2
82375: PPUSH
82376: CALL_OW 488
82380: NOT
82381: PUSH
82382: LD_VAR 0 3
82386: PPUSH
82387: LD_VAR 0 4
82391: PPUSH
82392: CALL_OW 488
82396: NOT
82397: OR
82398: IFFALSE 82411
// begin result := - 1 ;
82400: LD_ADDR_VAR 0 5
82404: PUSH
82405: LD_INT 1
82407: NEG
82408: ST_TO_ADDR
// exit ;
82409: GO 82646
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
82411: LD_ADDR_VAR 0 12
82415: PUSH
82416: LD_VAR 0 1
82420: PPUSH
82421: LD_VAR 0 2
82425: PPUSH
82426: LD_VAR 0 3
82430: PPUSH
82431: LD_VAR 0 4
82435: PPUSH
82436: CALL 81496 0 4
82440: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
82441: LD_ADDR_VAR 0 11
82445: PUSH
82446: LD_VAR 0 1
82450: PPUSH
82451: LD_VAR 0 2
82455: PPUSH
82456: LD_VAR 0 12
82460: PUSH
82461: LD_INT 1
82463: ARRAY
82464: PPUSH
82465: LD_VAR 0 12
82469: PUSH
82470: LD_INT 2
82472: ARRAY
82473: PPUSH
82474: CALL_OW 298
82478: ST_TO_ADDR
// distance := 9999 ;
82479: LD_ADDR_VAR 0 10
82483: PUSH
82484: LD_INT 9999
82486: ST_TO_ADDR
// for i := 0 to 5 do
82487: LD_ADDR_VAR 0 6
82491: PUSH
82492: DOUBLE
82493: LD_INT 0
82495: DEC
82496: ST_TO_ADDR
82497: LD_INT 5
82499: PUSH
82500: FOR_TO
82501: IFFALSE 82644
// begin _x := ShiftX ( x1 , i , centerDist ) ;
82503: LD_ADDR_VAR 0 7
82507: PUSH
82508: LD_VAR 0 1
82512: PPUSH
82513: LD_VAR 0 6
82517: PPUSH
82518: LD_VAR 0 11
82522: PPUSH
82523: CALL_OW 272
82527: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
82528: LD_ADDR_VAR 0 8
82532: PUSH
82533: LD_VAR 0 2
82537: PPUSH
82538: LD_VAR 0 6
82542: PPUSH
82543: LD_VAR 0 11
82547: PPUSH
82548: CALL_OW 273
82552: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82553: LD_VAR 0 7
82557: PPUSH
82558: LD_VAR 0 8
82562: PPUSH
82563: CALL_OW 488
82567: NOT
82568: IFFALSE 82572
// continue ;
82570: GO 82500
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
82572: LD_ADDR_VAR 0 9
82576: PUSH
82577: LD_VAR 0 12
82581: PUSH
82582: LD_INT 1
82584: ARRAY
82585: PPUSH
82586: LD_VAR 0 12
82590: PUSH
82591: LD_INT 2
82593: ARRAY
82594: PPUSH
82595: LD_VAR 0 7
82599: PPUSH
82600: LD_VAR 0 8
82604: PPUSH
82605: CALL_OW 298
82609: ST_TO_ADDR
// if tmp < distance then
82610: LD_VAR 0 9
82614: PUSH
82615: LD_VAR 0 10
82619: LESS
82620: IFFALSE 82642
// begin result := i ;
82622: LD_ADDR_VAR 0 5
82626: PUSH
82627: LD_VAR 0 6
82631: ST_TO_ADDR
// distance := tmp ;
82632: LD_ADDR_VAR 0 10
82636: PUSH
82637: LD_VAR 0 9
82641: ST_TO_ADDR
// end ; end ;
82642: GO 82500
82644: POP
82645: POP
// end ;
82646: LD_VAR 0 5
82650: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82651: LD_INT 0
82653: PPUSH
82654: PPUSH
// if not driver or not IsInUnit ( driver ) then
82655: LD_VAR 0 1
82659: NOT
82660: PUSH
82661: LD_VAR 0 1
82665: PPUSH
82666: CALL_OW 310
82670: NOT
82671: OR
82672: IFFALSE 82676
// exit ;
82674: GO 82766
// vehicle := IsInUnit ( driver ) ;
82676: LD_ADDR_VAR 0 3
82680: PUSH
82681: LD_VAR 0 1
82685: PPUSH
82686: CALL_OW 310
82690: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82691: LD_VAR 0 1
82695: PPUSH
82696: LD_STRING \
82698: PUSH
82699: LD_INT 0
82701: PUSH
82702: LD_INT 0
82704: PUSH
82705: LD_INT 0
82707: PUSH
82708: LD_INT 0
82710: PUSH
82711: LD_INT 0
82713: PUSH
82714: LD_INT 0
82716: PUSH
82717: EMPTY
82718: LIST
82719: LIST
82720: LIST
82721: LIST
82722: LIST
82723: LIST
82724: LIST
82725: PUSH
82726: LD_STRING E
82728: PUSH
82729: LD_INT 0
82731: PUSH
82732: LD_INT 0
82734: PUSH
82735: LD_VAR 0 3
82739: PUSH
82740: LD_INT 0
82742: PUSH
82743: LD_INT 0
82745: PUSH
82746: LD_INT 0
82748: PUSH
82749: EMPTY
82750: LIST
82751: LIST
82752: LIST
82753: LIST
82754: LIST
82755: LIST
82756: LIST
82757: PUSH
82758: EMPTY
82759: LIST
82760: LIST
82761: PPUSH
82762: CALL_OW 446
// end ;
82766: LD_VAR 0 2
82770: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82771: LD_INT 0
82773: PPUSH
82774: PPUSH
// if not driver or not IsInUnit ( driver ) then
82775: LD_VAR 0 1
82779: NOT
82780: PUSH
82781: LD_VAR 0 1
82785: PPUSH
82786: CALL_OW 310
82790: NOT
82791: OR
82792: IFFALSE 82796
// exit ;
82794: GO 82886
// vehicle := IsInUnit ( driver ) ;
82796: LD_ADDR_VAR 0 3
82800: PUSH
82801: LD_VAR 0 1
82805: PPUSH
82806: CALL_OW 310
82810: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82811: LD_VAR 0 1
82815: PPUSH
82816: LD_STRING \
82818: PUSH
82819: LD_INT 0
82821: PUSH
82822: LD_INT 0
82824: PUSH
82825: LD_INT 0
82827: PUSH
82828: LD_INT 0
82830: PUSH
82831: LD_INT 0
82833: PUSH
82834: LD_INT 0
82836: PUSH
82837: EMPTY
82838: LIST
82839: LIST
82840: LIST
82841: LIST
82842: LIST
82843: LIST
82844: LIST
82845: PUSH
82846: LD_STRING E
82848: PUSH
82849: LD_INT 0
82851: PUSH
82852: LD_INT 0
82854: PUSH
82855: LD_VAR 0 3
82859: PUSH
82860: LD_INT 0
82862: PUSH
82863: LD_INT 0
82865: PUSH
82866: LD_INT 0
82868: PUSH
82869: EMPTY
82870: LIST
82871: LIST
82872: LIST
82873: LIST
82874: LIST
82875: LIST
82876: LIST
82877: PUSH
82878: EMPTY
82879: LIST
82880: LIST
82881: PPUSH
82882: CALL_OW 447
// end ;
82886: LD_VAR 0 2
82890: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82891: LD_INT 0
82893: PPUSH
82894: PPUSH
82895: PPUSH
// tmp := [ ] ;
82896: LD_ADDR_VAR 0 5
82900: PUSH
82901: EMPTY
82902: ST_TO_ADDR
// for i in units do
82903: LD_ADDR_VAR 0 4
82907: PUSH
82908: LD_VAR 0 1
82912: PUSH
82913: FOR_IN
82914: IFFALSE 82952
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82916: LD_ADDR_VAR 0 5
82920: PUSH
82921: LD_VAR 0 5
82925: PPUSH
82926: LD_VAR 0 5
82930: PUSH
82931: LD_INT 1
82933: PLUS
82934: PPUSH
82935: LD_VAR 0 4
82939: PPUSH
82940: CALL_OW 256
82944: PPUSH
82945: CALL_OW 2
82949: ST_TO_ADDR
82950: GO 82913
82952: POP
82953: POP
// if not tmp then
82954: LD_VAR 0 5
82958: NOT
82959: IFFALSE 82963
// exit ;
82961: GO 83011
// if asc then
82963: LD_VAR 0 2
82967: IFFALSE 82991
// result := SortListByListAsc ( units , tmp ) else
82969: LD_ADDR_VAR 0 3
82973: PUSH
82974: LD_VAR 0 1
82978: PPUSH
82979: LD_VAR 0 5
82983: PPUSH
82984: CALL_OW 76
82988: ST_TO_ADDR
82989: GO 83011
// result := SortListByListDesc ( units , tmp ) ;
82991: LD_ADDR_VAR 0 3
82995: PUSH
82996: LD_VAR 0 1
83000: PPUSH
83001: LD_VAR 0 5
83005: PPUSH
83006: CALL_OW 77
83010: ST_TO_ADDR
// end ;
83011: LD_VAR 0 3
83015: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
83016: LD_INT 0
83018: PPUSH
83019: PPUSH
// task := GetTaskList ( mech ) ;
83020: LD_ADDR_VAR 0 4
83024: PUSH
83025: LD_VAR 0 1
83029: PPUSH
83030: CALL_OW 437
83034: ST_TO_ADDR
// if not task then
83035: LD_VAR 0 4
83039: NOT
83040: IFFALSE 83044
// exit ;
83042: GO 83086
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
83044: LD_ADDR_VAR 0 3
83048: PUSH
83049: LD_VAR 0 4
83053: PUSH
83054: LD_INT 1
83056: ARRAY
83057: PUSH
83058: LD_INT 1
83060: ARRAY
83061: PUSH
83062: LD_STRING r
83064: EQUAL
83065: PUSH
83066: LD_VAR 0 4
83070: PUSH
83071: LD_INT 1
83073: ARRAY
83074: PUSH
83075: LD_INT 4
83077: ARRAY
83078: PUSH
83079: LD_VAR 0 2
83083: EQUAL
83084: AND
83085: ST_TO_ADDR
// end ;
83086: LD_VAR 0 3
83090: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83091: LD_INT 0
83093: PPUSH
// SetDir ( unit , d ) ;
83094: LD_VAR 0 1
83098: PPUSH
83099: LD_VAR 0 4
83103: PPUSH
83104: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
83108: LD_VAR 0 1
83112: PPUSH
83113: LD_VAR 0 2
83117: PPUSH
83118: LD_VAR 0 3
83122: PPUSH
83123: LD_VAR 0 5
83127: PPUSH
83128: CALL_OW 48
// end ;
83132: LD_VAR 0 6
83136: RET
// export function ToNaturalNumber ( number ) ; begin
83137: LD_INT 0
83139: PPUSH
// result := number div 1 ;
83140: LD_ADDR_VAR 0 2
83144: PUSH
83145: LD_VAR 0 1
83149: PUSH
83150: LD_INT 1
83152: DIV
83153: ST_TO_ADDR
// if number < 0 then
83154: LD_VAR 0 1
83158: PUSH
83159: LD_INT 0
83161: LESS
83162: IFFALSE 83172
// result := 0 ;
83164: LD_ADDR_VAR 0 2
83168: PUSH
83169: LD_INT 0
83171: ST_TO_ADDR
// end ;
83172: LD_VAR 0 2
83176: RET
// export function SortByClass ( units , class ) ; var un ; begin
83177: LD_INT 0
83179: PPUSH
83180: PPUSH
// if not units or not class then
83181: LD_VAR 0 1
83185: NOT
83186: PUSH
83187: LD_VAR 0 2
83191: NOT
83192: OR
83193: IFFALSE 83197
// exit ;
83195: GO 83292
// result := [ ] ;
83197: LD_ADDR_VAR 0 3
83201: PUSH
83202: EMPTY
83203: ST_TO_ADDR
// for un in units do
83204: LD_ADDR_VAR 0 4
83208: PUSH
83209: LD_VAR 0 1
83213: PUSH
83214: FOR_IN
83215: IFFALSE 83290
// if GetClass ( un ) = class then
83217: LD_VAR 0 4
83221: PPUSH
83222: CALL_OW 257
83226: PUSH
83227: LD_VAR 0 2
83231: EQUAL
83232: IFFALSE 83259
// result := Insert ( result , 1 , un ) else
83234: LD_ADDR_VAR 0 3
83238: PUSH
83239: LD_VAR 0 3
83243: PPUSH
83244: LD_INT 1
83246: PPUSH
83247: LD_VAR 0 4
83251: PPUSH
83252: CALL_OW 2
83256: ST_TO_ADDR
83257: GO 83288
// result := Replace ( result , result + 1 , un ) ;
83259: LD_ADDR_VAR 0 3
83263: PUSH
83264: LD_VAR 0 3
83268: PPUSH
83269: LD_VAR 0 3
83273: PUSH
83274: LD_INT 1
83276: PLUS
83277: PPUSH
83278: LD_VAR 0 4
83282: PPUSH
83283: CALL_OW 1
83287: ST_TO_ADDR
83288: GO 83214
83290: POP
83291: POP
// end ;
83292: LD_VAR 0 3
83296: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83297: LD_INT 0
83299: PPUSH
83300: PPUSH
83301: PPUSH
83302: PPUSH
83303: PPUSH
83304: PPUSH
83305: PPUSH
// result := [ ] ;
83306: LD_ADDR_VAR 0 4
83310: PUSH
83311: EMPTY
83312: ST_TO_ADDR
// if x - r < 0 then
83313: LD_VAR 0 1
83317: PUSH
83318: LD_VAR 0 3
83322: MINUS
83323: PUSH
83324: LD_INT 0
83326: LESS
83327: IFFALSE 83339
// min_x := 0 else
83329: LD_ADDR_VAR 0 8
83333: PUSH
83334: LD_INT 0
83336: ST_TO_ADDR
83337: GO 83355
// min_x := x - r ;
83339: LD_ADDR_VAR 0 8
83343: PUSH
83344: LD_VAR 0 1
83348: PUSH
83349: LD_VAR 0 3
83353: MINUS
83354: ST_TO_ADDR
// if y - r < 0 then
83355: LD_VAR 0 2
83359: PUSH
83360: LD_VAR 0 3
83364: MINUS
83365: PUSH
83366: LD_INT 0
83368: LESS
83369: IFFALSE 83381
// min_y := 0 else
83371: LD_ADDR_VAR 0 7
83375: PUSH
83376: LD_INT 0
83378: ST_TO_ADDR
83379: GO 83397
// min_y := y - r ;
83381: LD_ADDR_VAR 0 7
83385: PUSH
83386: LD_VAR 0 2
83390: PUSH
83391: LD_VAR 0 3
83395: MINUS
83396: ST_TO_ADDR
// max_x := x + r ;
83397: LD_ADDR_VAR 0 9
83401: PUSH
83402: LD_VAR 0 1
83406: PUSH
83407: LD_VAR 0 3
83411: PLUS
83412: ST_TO_ADDR
// max_y := y + r ;
83413: LD_ADDR_VAR 0 10
83417: PUSH
83418: LD_VAR 0 2
83422: PUSH
83423: LD_VAR 0 3
83427: PLUS
83428: ST_TO_ADDR
// for _x = min_x to max_x do
83429: LD_ADDR_VAR 0 5
83433: PUSH
83434: DOUBLE
83435: LD_VAR 0 8
83439: DEC
83440: ST_TO_ADDR
83441: LD_VAR 0 9
83445: PUSH
83446: FOR_TO
83447: IFFALSE 83548
// for _y = min_y to max_y do
83449: LD_ADDR_VAR 0 6
83453: PUSH
83454: DOUBLE
83455: LD_VAR 0 7
83459: DEC
83460: ST_TO_ADDR
83461: LD_VAR 0 10
83465: PUSH
83466: FOR_TO
83467: IFFALSE 83544
// begin if not ValidHex ( _x , _y ) then
83469: LD_VAR 0 5
83473: PPUSH
83474: LD_VAR 0 6
83478: PPUSH
83479: CALL_OW 488
83483: NOT
83484: IFFALSE 83488
// continue ;
83486: GO 83466
// if GetResourceTypeXY ( _x , _y ) then
83488: LD_VAR 0 5
83492: PPUSH
83493: LD_VAR 0 6
83497: PPUSH
83498: CALL_OW 283
83502: IFFALSE 83542
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
83504: LD_ADDR_VAR 0 4
83508: PUSH
83509: LD_VAR 0 4
83513: PPUSH
83514: LD_VAR 0 4
83518: PUSH
83519: LD_INT 1
83521: PLUS
83522: PPUSH
83523: LD_VAR 0 5
83527: PUSH
83528: LD_VAR 0 6
83532: PUSH
83533: EMPTY
83534: LIST
83535: LIST
83536: PPUSH
83537: CALL_OW 1
83541: ST_TO_ADDR
// end ;
83542: GO 83466
83544: POP
83545: POP
83546: GO 83446
83548: POP
83549: POP
// end ;
83550: LD_VAR 0 4
83554: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
83555: LD_INT 0
83557: PPUSH
83558: PPUSH
83559: PPUSH
83560: PPUSH
83561: PPUSH
83562: PPUSH
83563: PPUSH
83564: PPUSH
// if not units then
83565: LD_VAR 0 1
83569: NOT
83570: IFFALSE 83574
// exit ;
83572: GO 84102
// result := UnitFilter ( units , [ f_ok ] ) ;
83574: LD_ADDR_VAR 0 3
83578: PUSH
83579: LD_VAR 0 1
83583: PPUSH
83584: LD_INT 50
83586: PUSH
83587: EMPTY
83588: LIST
83589: PPUSH
83590: CALL_OW 72
83594: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83595: LD_ADDR_VAR 0 8
83599: PUSH
83600: LD_VAR 0 1
83604: PUSH
83605: LD_INT 1
83607: ARRAY
83608: PPUSH
83609: CALL_OW 255
83613: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83614: LD_ADDR_VAR 0 10
83618: PUSH
83619: LD_INT 29
83621: PUSH
83622: LD_INT 91
83624: PUSH
83625: LD_INT 49
83627: PUSH
83628: EMPTY
83629: LIST
83630: LIST
83631: LIST
83632: ST_TO_ADDR
// if not result then
83633: LD_VAR 0 3
83637: NOT
83638: IFFALSE 83642
// exit ;
83640: GO 84102
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83642: LD_ADDR_VAR 0 5
83646: PUSH
83647: LD_INT 81
83649: PUSH
83650: LD_VAR 0 8
83654: PUSH
83655: EMPTY
83656: LIST
83657: LIST
83658: PPUSH
83659: CALL_OW 69
83663: ST_TO_ADDR
// for i in result do
83664: LD_ADDR_VAR 0 4
83668: PUSH
83669: LD_VAR 0 3
83673: PUSH
83674: FOR_IN
83675: IFFALSE 84100
// begin tag := GetTag ( i ) + 1 ;
83677: LD_ADDR_VAR 0 9
83681: PUSH
83682: LD_VAR 0 4
83686: PPUSH
83687: CALL_OW 110
83691: PUSH
83692: LD_INT 1
83694: PLUS
83695: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
83696: LD_ADDR_VAR 0 7
83700: PUSH
83701: LD_VAR 0 4
83705: PPUSH
83706: CALL_OW 250
83710: PPUSH
83711: LD_VAR 0 4
83715: PPUSH
83716: CALL_OW 251
83720: PPUSH
83721: LD_INT 4
83723: PPUSH
83724: CALL 83297 0 3
83728: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
83729: LD_VAR 0 4
83733: PPUSH
83734: CALL_OW 247
83738: PUSH
83739: LD_INT 2
83741: EQUAL
83742: PUSH
83743: LD_VAR 0 7
83747: PUSH
83748: LD_INT 2
83750: GREATER
83751: AND
83752: PUSH
83753: LD_VAR 0 4
83757: PPUSH
83758: CALL_OW 264
83762: PUSH
83763: LD_VAR 0 10
83767: IN
83768: NOT
83769: AND
83770: IFFALSE 83809
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83772: LD_VAR 0 4
83776: PPUSH
83777: LD_VAR 0 7
83781: PUSH
83782: LD_INT 1
83784: ARRAY
83785: PUSH
83786: LD_INT 1
83788: ARRAY
83789: PPUSH
83790: LD_VAR 0 7
83794: PUSH
83795: LD_INT 1
83797: ARRAY
83798: PUSH
83799: LD_INT 2
83801: ARRAY
83802: PPUSH
83803: CALL_OW 116
83807: GO 84098
// if path > tag then
83809: LD_VAR 0 2
83813: PUSH
83814: LD_VAR 0 9
83818: GREATER
83819: IFFALSE 84027
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83821: LD_ADDR_VAR 0 6
83825: PUSH
83826: LD_VAR 0 5
83830: PPUSH
83831: LD_INT 91
83833: PUSH
83834: LD_VAR 0 4
83838: PUSH
83839: LD_INT 8
83841: PUSH
83842: EMPTY
83843: LIST
83844: LIST
83845: LIST
83846: PPUSH
83847: CALL_OW 72
83851: ST_TO_ADDR
// if nearEnemy then
83852: LD_VAR 0 6
83856: IFFALSE 83925
// begin if GetWeapon ( i ) = ru_time_lapser then
83858: LD_VAR 0 4
83862: PPUSH
83863: CALL_OW 264
83867: PUSH
83868: LD_INT 49
83870: EQUAL
83871: IFFALSE 83899
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83873: LD_VAR 0 4
83877: PPUSH
83878: LD_VAR 0 6
83882: PPUSH
83883: LD_VAR 0 4
83887: PPUSH
83888: CALL_OW 74
83892: PPUSH
83893: CALL_OW 112
83897: GO 83923
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83899: LD_VAR 0 4
83903: PPUSH
83904: LD_VAR 0 6
83908: PPUSH
83909: LD_VAR 0 4
83913: PPUSH
83914: CALL_OW 74
83918: PPUSH
83919: CALL 85173 0 2
// end else
83923: GO 84025
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83925: LD_VAR 0 4
83929: PPUSH
83930: LD_VAR 0 2
83934: PUSH
83935: LD_VAR 0 9
83939: ARRAY
83940: PUSH
83941: LD_INT 1
83943: ARRAY
83944: PPUSH
83945: LD_VAR 0 2
83949: PUSH
83950: LD_VAR 0 9
83954: ARRAY
83955: PUSH
83956: LD_INT 2
83958: ARRAY
83959: PPUSH
83960: CALL_OW 297
83964: PUSH
83965: LD_INT 6
83967: GREATER
83968: IFFALSE 84011
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83970: LD_VAR 0 4
83974: PPUSH
83975: LD_VAR 0 2
83979: PUSH
83980: LD_VAR 0 9
83984: ARRAY
83985: PUSH
83986: LD_INT 1
83988: ARRAY
83989: PPUSH
83990: LD_VAR 0 2
83994: PUSH
83995: LD_VAR 0 9
83999: ARRAY
84000: PUSH
84001: LD_INT 2
84003: ARRAY
84004: PPUSH
84005: CALL_OW 114
84009: GO 84025
// SetTag ( i , tag ) ;
84011: LD_VAR 0 4
84015: PPUSH
84016: LD_VAR 0 9
84020: PPUSH
84021: CALL_OW 109
// end else
84025: GO 84098
// if enemy then
84027: LD_VAR 0 5
84031: IFFALSE 84098
// begin if GetWeapon ( i ) = ru_time_lapser then
84033: LD_VAR 0 4
84037: PPUSH
84038: CALL_OW 264
84042: PUSH
84043: LD_INT 49
84045: EQUAL
84046: IFFALSE 84074
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
84048: LD_VAR 0 4
84052: PPUSH
84053: LD_VAR 0 5
84057: PPUSH
84058: LD_VAR 0 4
84062: PPUSH
84063: CALL_OW 74
84067: PPUSH
84068: CALL_OW 112
84072: GO 84098
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84074: LD_VAR 0 4
84078: PPUSH
84079: LD_VAR 0 5
84083: PPUSH
84084: LD_VAR 0 4
84088: PPUSH
84089: CALL_OW 74
84093: PPUSH
84094: CALL 85173 0 2
// end ; end ;
84098: GO 83674
84100: POP
84101: POP
// end ;
84102: LD_VAR 0 3
84106: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
84107: LD_INT 0
84109: PPUSH
84110: PPUSH
84111: PPUSH
// if not unit or IsInUnit ( unit ) then
84112: LD_VAR 0 1
84116: NOT
84117: PUSH
84118: LD_VAR 0 1
84122: PPUSH
84123: CALL_OW 310
84127: OR
84128: IFFALSE 84132
// exit ;
84130: GO 84223
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
84132: LD_ADDR_VAR 0 4
84136: PUSH
84137: LD_VAR 0 1
84141: PPUSH
84142: CALL_OW 250
84146: PPUSH
84147: LD_VAR 0 2
84151: PPUSH
84152: LD_INT 1
84154: PPUSH
84155: CALL_OW 272
84159: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
84160: LD_ADDR_VAR 0 5
84164: PUSH
84165: LD_VAR 0 1
84169: PPUSH
84170: CALL_OW 251
84174: PPUSH
84175: LD_VAR 0 2
84179: PPUSH
84180: LD_INT 1
84182: PPUSH
84183: CALL_OW 273
84187: ST_TO_ADDR
// if ValidHex ( x , y ) then
84188: LD_VAR 0 4
84192: PPUSH
84193: LD_VAR 0 5
84197: PPUSH
84198: CALL_OW 488
84202: IFFALSE 84223
// ComTurnXY ( unit , x , y ) ;
84204: LD_VAR 0 1
84208: PPUSH
84209: LD_VAR 0 4
84213: PPUSH
84214: LD_VAR 0 5
84218: PPUSH
84219: CALL_OW 118
// end ;
84223: LD_VAR 0 3
84227: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84228: LD_INT 0
84230: PPUSH
84231: PPUSH
// result := false ;
84232: LD_ADDR_VAR 0 3
84236: PUSH
84237: LD_INT 0
84239: ST_TO_ADDR
// if not units then
84240: LD_VAR 0 2
84244: NOT
84245: IFFALSE 84249
// exit ;
84247: GO 84294
// for i in units do
84249: LD_ADDR_VAR 0 4
84253: PUSH
84254: LD_VAR 0 2
84258: PUSH
84259: FOR_IN
84260: IFFALSE 84292
// if See ( side , i ) then
84262: LD_VAR 0 1
84266: PPUSH
84267: LD_VAR 0 4
84271: PPUSH
84272: CALL_OW 292
84276: IFFALSE 84290
// begin result := true ;
84278: LD_ADDR_VAR 0 3
84282: PUSH
84283: LD_INT 1
84285: ST_TO_ADDR
// exit ;
84286: POP
84287: POP
84288: GO 84294
// end ;
84290: GO 84259
84292: POP
84293: POP
// end ;
84294: LD_VAR 0 3
84298: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
84299: LD_INT 0
84301: PPUSH
84302: PPUSH
84303: PPUSH
84304: PPUSH
// if not unit or not points then
84305: LD_VAR 0 1
84309: NOT
84310: PUSH
84311: LD_VAR 0 2
84315: NOT
84316: OR
84317: IFFALSE 84321
// exit ;
84319: GO 84411
// dist := 99999 ;
84321: LD_ADDR_VAR 0 5
84325: PUSH
84326: LD_INT 99999
84328: ST_TO_ADDR
// for i in points do
84329: LD_ADDR_VAR 0 4
84333: PUSH
84334: LD_VAR 0 2
84338: PUSH
84339: FOR_IN
84340: IFFALSE 84409
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
84342: LD_ADDR_VAR 0 6
84346: PUSH
84347: LD_VAR 0 1
84351: PPUSH
84352: LD_VAR 0 4
84356: PUSH
84357: LD_INT 1
84359: ARRAY
84360: PPUSH
84361: LD_VAR 0 4
84365: PUSH
84366: LD_INT 2
84368: ARRAY
84369: PPUSH
84370: CALL_OW 297
84374: ST_TO_ADDR
// if tmpDist < dist then
84375: LD_VAR 0 6
84379: PUSH
84380: LD_VAR 0 5
84384: LESS
84385: IFFALSE 84407
// begin result := i ;
84387: LD_ADDR_VAR 0 3
84391: PUSH
84392: LD_VAR 0 4
84396: ST_TO_ADDR
// dist := tmpDist ;
84397: LD_ADDR_VAR 0 5
84401: PUSH
84402: LD_VAR 0 6
84406: ST_TO_ADDR
// end ; end ;
84407: GO 84339
84409: POP
84410: POP
// end ;
84411: LD_VAR 0 3
84415: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
84416: LD_INT 0
84418: PPUSH
// uc_side := side ;
84419: LD_ADDR_OWVAR 20
84423: PUSH
84424: LD_VAR 0 1
84428: ST_TO_ADDR
// uc_nation := 3 ;
84429: LD_ADDR_OWVAR 21
84433: PUSH
84434: LD_INT 3
84436: ST_TO_ADDR
// vc_chassis := 25 ;
84437: LD_ADDR_OWVAR 37
84441: PUSH
84442: LD_INT 25
84444: ST_TO_ADDR
// vc_engine := engine_siberite ;
84445: LD_ADDR_OWVAR 39
84449: PUSH
84450: LD_INT 3
84452: ST_TO_ADDR
// vc_control := control_computer ;
84453: LD_ADDR_OWVAR 38
84457: PUSH
84458: LD_INT 3
84460: ST_TO_ADDR
// vc_weapon := 59 ;
84461: LD_ADDR_OWVAR 40
84465: PUSH
84466: LD_INT 59
84468: ST_TO_ADDR
// result := CreateVehicle ;
84469: LD_ADDR_VAR 0 5
84473: PUSH
84474: CALL_OW 45
84478: ST_TO_ADDR
// SetDir ( result , d ) ;
84479: LD_VAR 0 5
84483: PPUSH
84484: LD_VAR 0 4
84488: PPUSH
84489: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
84493: LD_VAR 0 5
84497: PPUSH
84498: LD_VAR 0 2
84502: PPUSH
84503: LD_VAR 0 3
84507: PPUSH
84508: LD_INT 0
84510: PPUSH
84511: CALL_OW 48
// end ;
84515: LD_VAR 0 5
84519: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
84520: LD_INT 0
84522: PPUSH
84523: PPUSH
84524: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
84525: LD_ADDR_VAR 0 2
84529: PUSH
84530: LD_INT 0
84532: PUSH
84533: LD_INT 0
84535: PUSH
84536: LD_INT 0
84538: PUSH
84539: LD_INT 0
84541: PUSH
84542: EMPTY
84543: LIST
84544: LIST
84545: LIST
84546: LIST
84547: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
84548: LD_VAR 0 1
84552: NOT
84553: PUSH
84554: LD_VAR 0 1
84558: PPUSH
84559: CALL_OW 264
84563: PUSH
84564: LD_INT 12
84566: PUSH
84567: LD_INT 51
84569: PUSH
84570: LD_INT 32
84572: PUSH
84573: LD_INT 89
84575: PUSH
84576: EMPTY
84577: LIST
84578: LIST
84579: LIST
84580: LIST
84581: IN
84582: NOT
84583: OR
84584: IFFALSE 84588
// exit ;
84586: GO 84686
// for i := 1 to 3 do
84588: LD_ADDR_VAR 0 3
84592: PUSH
84593: DOUBLE
84594: LD_INT 1
84596: DEC
84597: ST_TO_ADDR
84598: LD_INT 3
84600: PUSH
84601: FOR_TO
84602: IFFALSE 84684
// begin tmp := GetCargo ( cargo , i ) ;
84604: LD_ADDR_VAR 0 4
84608: PUSH
84609: LD_VAR 0 1
84613: PPUSH
84614: LD_VAR 0 3
84618: PPUSH
84619: CALL_OW 289
84623: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
84624: LD_ADDR_VAR 0 2
84628: PUSH
84629: LD_VAR 0 2
84633: PPUSH
84634: LD_VAR 0 3
84638: PPUSH
84639: LD_VAR 0 4
84643: PPUSH
84644: CALL_OW 1
84648: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
84649: LD_ADDR_VAR 0 2
84653: PUSH
84654: LD_VAR 0 2
84658: PPUSH
84659: LD_INT 4
84661: PPUSH
84662: LD_VAR 0 2
84666: PUSH
84667: LD_INT 4
84669: ARRAY
84670: PUSH
84671: LD_VAR 0 4
84675: PLUS
84676: PPUSH
84677: CALL_OW 1
84681: ST_TO_ADDR
// end ;
84682: GO 84601
84684: POP
84685: POP
// end ;
84686: LD_VAR 0 2
84690: RET
// export function Length ( array ) ; begin
84691: LD_INT 0
84693: PPUSH
// result := array + 0 ;
84694: LD_ADDR_VAR 0 2
84698: PUSH
84699: LD_VAR 0 1
84703: PUSH
84704: LD_INT 0
84706: PLUS
84707: ST_TO_ADDR
// end ;
84708: LD_VAR 0 2
84712: RET
// export function PrepareArray ( array ) ; begin
84713: LD_INT 0
84715: PPUSH
// result := array diff 0 ;
84716: LD_ADDR_VAR 0 2
84720: PUSH
84721: LD_VAR 0 1
84725: PUSH
84726: LD_INT 0
84728: DIFF
84729: ST_TO_ADDR
// if not result [ 1 ] then
84730: LD_VAR 0 2
84734: PUSH
84735: LD_INT 1
84737: ARRAY
84738: NOT
84739: IFFALSE 84759
// result := Delete ( result , 1 ) ;
84741: LD_ADDR_VAR 0 2
84745: PUSH
84746: LD_VAR 0 2
84750: PPUSH
84751: LD_INT 1
84753: PPUSH
84754: CALL_OW 3
84758: ST_TO_ADDR
// end ;
84759: LD_VAR 0 2
84763: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84764: LD_INT 0
84766: PPUSH
84767: PPUSH
84768: PPUSH
84769: PPUSH
// sibRocketRange := 25 ;
84770: LD_ADDR_VAR 0 6
84774: PUSH
84775: LD_INT 25
84777: ST_TO_ADDR
// result := false ;
84778: LD_ADDR_VAR 0 4
84782: PUSH
84783: LD_INT 0
84785: ST_TO_ADDR
// for i := 0 to 5 do
84786: LD_ADDR_VAR 0 5
84790: PUSH
84791: DOUBLE
84792: LD_INT 0
84794: DEC
84795: ST_TO_ADDR
84796: LD_INT 5
84798: PUSH
84799: FOR_TO
84800: IFFALSE 84867
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84802: LD_VAR 0 1
84806: PPUSH
84807: LD_VAR 0 5
84811: PPUSH
84812: LD_VAR 0 6
84816: PPUSH
84817: CALL_OW 272
84821: PPUSH
84822: LD_VAR 0 2
84826: PPUSH
84827: LD_VAR 0 5
84831: PPUSH
84832: LD_VAR 0 6
84836: PPUSH
84837: CALL_OW 273
84841: PPUSH
84842: LD_VAR 0 3
84846: PPUSH
84847: CALL_OW 309
84851: IFFALSE 84865
// begin result := true ;
84853: LD_ADDR_VAR 0 4
84857: PUSH
84858: LD_INT 1
84860: ST_TO_ADDR
// exit ;
84861: POP
84862: POP
84863: GO 84869
// end ;
84865: GO 84799
84867: POP
84868: POP
// end ;
84869: LD_VAR 0 4
84873: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
84874: LD_INT 0
84876: PPUSH
84877: PPUSH
84878: PPUSH
// if btype = b_depot then
84879: LD_VAR 0 2
84883: PUSH
84884: LD_INT 0
84886: EQUAL
84887: IFFALSE 84899
// begin result := true ;
84889: LD_ADDR_VAR 0 3
84893: PUSH
84894: LD_INT 1
84896: ST_TO_ADDR
// exit ;
84897: GO 85015
// end ; pom := GetBase ( depot ) ;
84899: LD_ADDR_VAR 0 4
84903: PUSH
84904: LD_VAR 0 1
84908: PPUSH
84909: CALL_OW 274
84913: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
84914: LD_ADDR_VAR 0 5
84918: PUSH
84919: LD_VAR 0 2
84923: PPUSH
84924: LD_VAR 0 1
84928: PPUSH
84929: CALL_OW 248
84933: PPUSH
84934: CALL_OW 450
84938: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
84939: LD_ADDR_VAR 0 3
84943: PUSH
84944: LD_VAR 0 4
84948: PPUSH
84949: LD_INT 1
84951: PPUSH
84952: CALL_OW 275
84956: PUSH
84957: LD_VAR 0 5
84961: PUSH
84962: LD_INT 1
84964: ARRAY
84965: GREATEREQUAL
84966: PUSH
84967: LD_VAR 0 4
84971: PPUSH
84972: LD_INT 2
84974: PPUSH
84975: CALL_OW 275
84979: PUSH
84980: LD_VAR 0 5
84984: PUSH
84985: LD_INT 2
84987: ARRAY
84988: GREATEREQUAL
84989: AND
84990: PUSH
84991: LD_VAR 0 4
84995: PPUSH
84996: LD_INT 3
84998: PPUSH
84999: CALL_OW 275
85003: PUSH
85004: LD_VAR 0 5
85008: PUSH
85009: LD_INT 3
85011: ARRAY
85012: GREATEREQUAL
85013: AND
85014: ST_TO_ADDR
// end ;
85015: LD_VAR 0 3
85019: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
85020: LD_INT 0
85022: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
85023: LD_VAR 0 1
85027: PPUSH
85028: LD_VAR 0 2
85032: PPUSH
85033: LD_INT 0
85035: PPUSH
85036: LD_INT 0
85038: PPUSH
85039: LD_INT 1
85041: PPUSH
85042: LD_INT 0
85044: PPUSH
85045: CALL_OW 587
// end ;
85049: LD_VAR 0 3
85053: RET
// export function CenterOnNow ( unit ) ; begin
85054: LD_INT 0
85056: PPUSH
// result := IsInUnit ( unit ) ;
85057: LD_ADDR_VAR 0 2
85061: PUSH
85062: LD_VAR 0 1
85066: PPUSH
85067: CALL_OW 310
85071: ST_TO_ADDR
// if not result then
85072: LD_VAR 0 2
85076: NOT
85077: IFFALSE 85089
// result := unit ;
85079: LD_ADDR_VAR 0 2
85083: PUSH
85084: LD_VAR 0 1
85088: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
85089: LD_VAR 0 1
85093: PPUSH
85094: CALL_OW 87
// end ;
85098: LD_VAR 0 2
85102: RET
// export function ComMoveHex ( unit , hex ) ; begin
85103: LD_INT 0
85105: PPUSH
// if not hex then
85106: LD_VAR 0 2
85110: NOT
85111: IFFALSE 85115
// exit ;
85113: GO 85168
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
85115: LD_VAR 0 2
85119: PUSH
85120: LD_INT 1
85122: ARRAY
85123: PPUSH
85124: LD_VAR 0 2
85128: PUSH
85129: LD_INT 2
85131: ARRAY
85132: PPUSH
85133: CALL_OW 428
85137: IFFALSE 85141
// exit ;
85139: GO 85168
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
85141: LD_VAR 0 1
85145: PPUSH
85146: LD_VAR 0 2
85150: PUSH
85151: LD_INT 1
85153: ARRAY
85154: PPUSH
85155: LD_VAR 0 2
85159: PUSH
85160: LD_INT 2
85162: ARRAY
85163: PPUSH
85164: CALL_OW 111
// end ;
85168: LD_VAR 0 3
85172: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
85173: LD_INT 0
85175: PPUSH
85176: PPUSH
85177: PPUSH
// if not unit or not enemy then
85178: LD_VAR 0 1
85182: NOT
85183: PUSH
85184: LD_VAR 0 2
85188: NOT
85189: OR
85190: IFFALSE 85194
// exit ;
85192: GO 85318
// x := GetX ( enemy ) ;
85194: LD_ADDR_VAR 0 4
85198: PUSH
85199: LD_VAR 0 2
85203: PPUSH
85204: CALL_OW 250
85208: ST_TO_ADDR
// y := GetY ( enemy ) ;
85209: LD_ADDR_VAR 0 5
85213: PUSH
85214: LD_VAR 0 2
85218: PPUSH
85219: CALL_OW 251
85223: ST_TO_ADDR
// if ValidHex ( x , y ) then
85224: LD_VAR 0 4
85228: PPUSH
85229: LD_VAR 0 5
85233: PPUSH
85234: CALL_OW 488
85238: IFFALSE 85318
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
85240: LD_VAR 0 2
85244: PPUSH
85245: CALL_OW 247
85249: PUSH
85250: LD_INT 3
85252: PUSH
85253: LD_INT 2
85255: PUSH
85256: EMPTY
85257: LIST
85258: LIST
85259: IN
85260: PUSH
85261: LD_VAR 0 1
85265: PPUSH
85266: CALL_OW 255
85270: PPUSH
85271: LD_VAR 0 2
85275: PPUSH
85276: CALL_OW 292
85280: OR
85281: IFFALSE 85299
// ComAttackUnit ( unit , enemy ) else
85283: LD_VAR 0 1
85287: PPUSH
85288: LD_VAR 0 2
85292: PPUSH
85293: CALL_OW 115
85297: GO 85318
// ComAgressiveMove ( unit , x , y ) ;
85299: LD_VAR 0 1
85303: PPUSH
85304: LD_VAR 0 4
85308: PPUSH
85309: LD_VAR 0 5
85313: PPUSH
85314: CALL_OW 114
// end ;
85318: LD_VAR 0 3
85322: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
85323: LD_INT 0
85325: PPUSH
85326: PPUSH
85327: PPUSH
// list := AreaToList ( area , 0 ) ;
85328: LD_ADDR_VAR 0 5
85332: PUSH
85333: LD_VAR 0 1
85337: PPUSH
85338: LD_INT 0
85340: PPUSH
85341: CALL_OW 517
85345: ST_TO_ADDR
// if not list then
85346: LD_VAR 0 5
85350: NOT
85351: IFFALSE 85355
// exit ;
85353: GO 85485
// if all then
85355: LD_VAR 0 2
85359: IFFALSE 85447
// begin for i := 1 to list [ 1 ] do
85361: LD_ADDR_VAR 0 4
85365: PUSH
85366: DOUBLE
85367: LD_INT 1
85369: DEC
85370: ST_TO_ADDR
85371: LD_VAR 0 5
85375: PUSH
85376: LD_INT 1
85378: ARRAY
85379: PUSH
85380: FOR_TO
85381: IFFALSE 85443
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
85383: LD_ADDR_VAR 0 3
85387: PUSH
85388: LD_VAR 0 3
85392: PPUSH
85393: LD_VAR 0 3
85397: PUSH
85398: LD_INT 1
85400: PLUS
85401: PPUSH
85402: LD_VAR 0 5
85406: PUSH
85407: LD_INT 1
85409: ARRAY
85410: PUSH
85411: LD_VAR 0 4
85415: ARRAY
85416: PUSH
85417: LD_VAR 0 5
85421: PUSH
85422: LD_INT 2
85424: ARRAY
85425: PUSH
85426: LD_VAR 0 4
85430: ARRAY
85431: PUSH
85432: EMPTY
85433: LIST
85434: LIST
85435: PPUSH
85436: CALL_OW 1
85440: ST_TO_ADDR
85441: GO 85380
85443: POP
85444: POP
// exit ;
85445: GO 85485
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
85447: LD_ADDR_VAR 0 3
85451: PUSH
85452: LD_VAR 0 5
85456: PUSH
85457: LD_INT 1
85459: ARRAY
85460: PUSH
85461: LD_INT 1
85463: ARRAY
85464: PUSH
85465: LD_VAR 0 5
85469: PUSH
85470: LD_INT 2
85472: ARRAY
85473: PUSH
85474: LD_INT 1
85476: ARRAY
85477: PUSH
85478: EMPTY
85479: LIST
85480: LIST
85481: PUSH
85482: EMPTY
85483: LIST
85484: ST_TO_ADDR
// end ;
85485: LD_VAR 0 3
85489: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
85490: LD_INT 0
85492: PPUSH
85493: PPUSH
// list := AreaToList ( area , 0 ) ;
85494: LD_ADDR_VAR 0 4
85498: PUSH
85499: LD_VAR 0 1
85503: PPUSH
85504: LD_INT 0
85506: PPUSH
85507: CALL_OW 517
85511: ST_TO_ADDR
// if not list then
85512: LD_VAR 0 4
85516: NOT
85517: IFFALSE 85521
// exit ;
85519: GO 85562
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
85521: LD_ADDR_VAR 0 3
85525: PUSH
85526: LD_VAR 0 4
85530: PUSH
85531: LD_INT 1
85533: ARRAY
85534: PUSH
85535: LD_INT 1
85537: ARRAY
85538: PUSH
85539: LD_VAR 0 4
85543: PUSH
85544: LD_INT 2
85546: ARRAY
85547: PUSH
85548: LD_INT 1
85550: ARRAY
85551: PUSH
85552: LD_VAR 0 2
85556: PUSH
85557: EMPTY
85558: LIST
85559: LIST
85560: LIST
85561: ST_TO_ADDR
// end ;
85562: LD_VAR 0 3
85566: RET
// export function First ( array ) ; begin
85567: LD_INT 0
85569: PPUSH
// if not array then
85570: LD_VAR 0 1
85574: NOT
85575: IFFALSE 85579
// exit ;
85577: GO 85593
// result := array [ 1 ] ;
85579: LD_ADDR_VAR 0 2
85583: PUSH
85584: LD_VAR 0 1
85588: PUSH
85589: LD_INT 1
85591: ARRAY
85592: ST_TO_ADDR
// end ;
85593: LD_VAR 0 2
85597: RET
// export function Last ( array ) ; begin
85598: LD_INT 0
85600: PPUSH
// if not array then
85601: LD_VAR 0 1
85605: NOT
85606: IFFALSE 85610
// exit ;
85608: GO 85626
// result := array [ array ] ;
85610: LD_ADDR_VAR 0 2
85614: PUSH
85615: LD_VAR 0 1
85619: PUSH
85620: LD_VAR 0 1
85624: ARRAY
85625: ST_TO_ADDR
// end ;
85626: LD_VAR 0 2
85630: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
85631: LD_INT 0
85633: PPUSH
85634: PPUSH
// result := [ ] ;
85635: LD_ADDR_VAR 0 5
85639: PUSH
85640: EMPTY
85641: ST_TO_ADDR
// if not array then
85642: LD_VAR 0 1
85646: NOT
85647: IFFALSE 85651
// exit ;
85649: GO 85763
// for i := 1 to array do
85651: LD_ADDR_VAR 0 6
85655: PUSH
85656: DOUBLE
85657: LD_INT 1
85659: DEC
85660: ST_TO_ADDR
85661: LD_VAR 0 1
85665: PUSH
85666: FOR_TO
85667: IFFALSE 85761
// if array [ i ] [ index ] = value then
85669: LD_VAR 0 1
85673: PUSH
85674: LD_VAR 0 6
85678: ARRAY
85679: PUSH
85680: LD_VAR 0 2
85684: ARRAY
85685: PUSH
85686: LD_VAR 0 3
85690: EQUAL
85691: IFFALSE 85759
// begin if indexColumn then
85693: LD_VAR 0 4
85697: IFFALSE 85733
// result := Join ( result , array [ i ] [ indexColumn ] ) else
85699: LD_ADDR_VAR 0 5
85703: PUSH
85704: LD_VAR 0 5
85708: PPUSH
85709: LD_VAR 0 1
85713: PUSH
85714: LD_VAR 0 6
85718: ARRAY
85719: PUSH
85720: LD_VAR 0 4
85724: ARRAY
85725: PPUSH
85726: CALL 80951 0 2
85730: ST_TO_ADDR
85731: GO 85759
// result := Join ( result , array [ i ] ) ;
85733: LD_ADDR_VAR 0 5
85737: PUSH
85738: LD_VAR 0 5
85742: PPUSH
85743: LD_VAR 0 1
85747: PUSH
85748: LD_VAR 0 6
85752: ARRAY
85753: PPUSH
85754: CALL 80951 0 2
85758: ST_TO_ADDR
// end ;
85759: GO 85666
85761: POP
85762: POP
// end ;
85763: LD_VAR 0 5
85767: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
85768: LD_INT 0
85770: PPUSH
// if not vehicles or not parkingPoint then
85771: LD_VAR 0 1
85775: NOT
85776: PUSH
85777: LD_VAR 0 2
85781: NOT
85782: OR
85783: IFFALSE 85787
// exit ;
85785: GO 85885
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
85787: LD_ADDR_VAR 0 1
85791: PUSH
85792: LD_VAR 0 1
85796: PPUSH
85797: LD_INT 50
85799: PUSH
85800: EMPTY
85801: LIST
85802: PUSH
85803: LD_INT 3
85805: PUSH
85806: LD_INT 92
85808: PUSH
85809: LD_VAR 0 2
85813: PUSH
85814: LD_INT 1
85816: ARRAY
85817: PUSH
85818: LD_VAR 0 2
85822: PUSH
85823: LD_INT 2
85825: ARRAY
85826: PUSH
85827: LD_INT 8
85829: PUSH
85830: EMPTY
85831: LIST
85832: LIST
85833: LIST
85834: LIST
85835: PUSH
85836: EMPTY
85837: LIST
85838: LIST
85839: PUSH
85840: EMPTY
85841: LIST
85842: LIST
85843: PPUSH
85844: CALL_OW 72
85848: ST_TO_ADDR
// if not vehicles then
85849: LD_VAR 0 1
85853: NOT
85854: IFFALSE 85858
// exit ;
85856: GO 85885
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85858: LD_VAR 0 1
85862: PPUSH
85863: LD_VAR 0 2
85867: PUSH
85868: LD_INT 1
85870: ARRAY
85871: PPUSH
85872: LD_VAR 0 2
85876: PUSH
85877: LD_INT 2
85879: ARRAY
85880: PPUSH
85881: CALL_OW 111
// end ;
85885: LD_VAR 0 3
85889: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
85890: LD_INT 0
85892: PPUSH
85893: PPUSH
85894: PPUSH
// if not side or not area then
85895: LD_VAR 0 1
85899: NOT
85900: PUSH
85901: LD_VAR 0 2
85905: NOT
85906: OR
85907: IFFALSE 85911
// exit ;
85909: GO 86030
// tmp := AreaToList ( area , 0 ) ;
85911: LD_ADDR_VAR 0 5
85915: PUSH
85916: LD_VAR 0 2
85920: PPUSH
85921: LD_INT 0
85923: PPUSH
85924: CALL_OW 517
85928: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
85929: LD_ADDR_VAR 0 4
85933: PUSH
85934: DOUBLE
85935: LD_INT 1
85937: DEC
85938: ST_TO_ADDR
85939: LD_VAR 0 5
85943: PUSH
85944: LD_INT 1
85946: ARRAY
85947: PUSH
85948: FOR_TO
85949: IFFALSE 86028
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
85951: LD_VAR 0 5
85955: PUSH
85956: LD_INT 1
85958: ARRAY
85959: PUSH
85960: LD_VAR 0 4
85964: ARRAY
85965: PPUSH
85966: LD_VAR 0 5
85970: PUSH
85971: LD_INT 2
85973: ARRAY
85974: PUSH
85975: LD_VAR 0 4
85979: ARRAY
85980: PPUSH
85981: CALL_OW 351
85985: IFFALSE 86026
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
85987: LD_VAR 0 5
85991: PUSH
85992: LD_INT 1
85994: ARRAY
85995: PUSH
85996: LD_VAR 0 4
86000: ARRAY
86001: PPUSH
86002: LD_VAR 0 5
86006: PUSH
86007: LD_INT 2
86009: ARRAY
86010: PUSH
86011: LD_VAR 0 4
86015: ARRAY
86016: PPUSH
86017: LD_VAR 0 1
86021: PPUSH
86022: CALL_OW 244
// end ;
86026: GO 85948
86028: POP
86029: POP
// end ; end_of_file
86030: LD_VAR 0 3
86034: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86035: LD_VAR 0 1
86039: PUSH
86040: LD_INT 200
86042: DOUBLE
86043: GREATEREQUAL
86044: IFFALSE 86052
86046: LD_INT 299
86048: DOUBLE
86049: LESSEQUAL
86050: IFTRUE 86054
86052: GO 86086
86054: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86055: LD_VAR 0 1
86059: PPUSH
86060: LD_VAR 0 2
86064: PPUSH
86065: LD_VAR 0 3
86069: PPUSH
86070: LD_VAR 0 4
86074: PPUSH
86075: LD_VAR 0 5
86079: PPUSH
86080: CALL 38520 0 5
86084: GO 86163
86086: LD_INT 300
86088: DOUBLE
86089: GREATEREQUAL
86090: IFFALSE 86098
86092: LD_INT 399
86094: DOUBLE
86095: LESSEQUAL
86096: IFTRUE 86100
86098: GO 86162
86100: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86101: LD_VAR 0 1
86105: PPUSH
86106: LD_VAR 0 2
86110: PPUSH
86111: LD_VAR 0 3
86115: PPUSH
86116: LD_VAR 0 4
86120: PPUSH
86121: LD_VAR 0 5
86125: PPUSH
86126: LD_VAR 0 6
86130: PPUSH
86131: LD_VAR 0 7
86135: PPUSH
86136: LD_VAR 0 8
86140: PPUSH
86141: LD_VAR 0 9
86145: PPUSH
86146: LD_VAR 0 10
86150: PPUSH
86151: LD_VAR 0 11
86155: PPUSH
86156: CALL 34508 0 11
86160: GO 86163
86162: POP
// end ;
86163: PPOPN 11
86165: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86166: LD_VAR 0 1
86170: PPUSH
86171: LD_VAR 0 2
86175: PPUSH
86176: LD_VAR 0 3
86180: PPUSH
86181: LD_VAR 0 4
86185: PPUSH
86186: LD_VAR 0 5
86190: PPUSH
86191: CALL 37985 0 5
// end ; end_of_file
86195: PPOPN 5
86197: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86198: LD_VAR 0 1
86202: PPUSH
86203: LD_VAR 0 2
86207: PPUSH
86208: LD_VAR 0 3
86212: PPUSH
86213: LD_VAR 0 4
86217: PPUSH
86218: LD_VAR 0 5
86222: PPUSH
86223: LD_VAR 0 6
86227: PPUSH
86228: CALL 22160 0 6
// end ;
86232: PPOPN 6
86234: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
86235: LD_INT 0
86237: PPUSH
// begin if not units then
86238: LD_VAR 0 1
86242: NOT
86243: IFFALSE 86247
// exit ;
86245: GO 86247
// end ;
86247: PPOPN 7
86249: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86250: CALL 22047 0 0
// end ;
86254: PPOPN 1
86256: END
