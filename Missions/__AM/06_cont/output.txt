// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 ] [ Difficulty ] ;
 177: LD_ADDR_EXP 48
 181: PUSH
 182: LD_INT 3
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: LD_INT 6
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: LIST
 195: PUSH
 196: LD_OWVAR 67
 200: ARRAY
 201: ST_TO_ADDR
// sendedConvoys = 0 ;
 202: LD_ADDR_EXP 39
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// tamedApemans = 0 ;
 210: LD_ADDR_EXP 32
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ignoreTarget := [ ] ;
 218: LD_ADDR_EXP 45
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// arrivals := [ ] ;
 225: LD_ADDR_EXP 46
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// unitLost = 0 ;
 232: LD_ADDR_EXP 30
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 240: LD_ADDR_EXP 31
 244: PUSH
 245: EMPTY
 246: ST_TO_ADDR
// russianTanks = [ ] ;
 247: LD_ADDR_EXP 36
 251: PUSH
 252: EMPTY
 253: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 254: LD_ADDR_EXP 37
 258: PUSH
 259: EMPTY
 260: ST_TO_ADDR
// disableHealAI = 0 ;
 261: LD_ADDR_EXP 33
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// strings = [ ] ;
 269: LD_ADDR_EXP 27
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 276: LD_INT 4
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: CALL_OW 343
// PrepareDifficulty ;
 286: CALL 6589 0 0
// PrepareNature ;
 290: CALL 23894 0 0
// PrepareRussian ;
 294: CALL 5749 0 0
// PrepareVehicles ;
 298: CALL 1586 0 0
// PrepareHeroes ;
 302: CALL 594 0 0
// PrepareOthers ;
 306: CALL 2007 0 0
// PreparePlayerApemans ;
 310: CALL 2149 0 0
// end ;
 314: END
// every 0 0$1 trigger debugMode do var i ;
 315: LD_EXP 42
 319: IFFALSE 546
 321: GO 323
 323: DISABLE
 324: LD_INT 0
 326: PPUSH
// begin enable ;
 327: ENABLE
// fogoff ( true ) ;
 328: LD_INT 1
 330: PPUSH
 331: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 21
 352: PUSH
 353: LD_INT 1
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 386
// SetLives ( i , 1000 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: LD_INT 1000
 379: PPUSH
 380: CALL_OW 234
 384: GO 369
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 30
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: PUSH
 422: FOR_IN
 423: IFFALSE 447
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 425: LD_VAR 0 1
 429: PPUSH
 430: CALL_OW 274
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_INT 9999
 440: PPUSH
 441: CALL_OW 277
 445: GO 422
 447: POP
 448: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 449: LD_ADDR_VAR 0 1
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// if IsSelected ( rudepo ) then
 510: LD_INT 2
 512: PPUSH
 513: CALL_OW 306
 517: IFFALSE 527
// your_side = 3 ;
 519: LD_ADDR_OWVAR 2
 523: PUSH
 524: LD_INT 3
 526: ST_TO_ADDR
// if IsSelected ( JMM ) then
 527: LD_EXP 1
 531: PPUSH
 532: CALL_OW 306
 536: IFFALSE 546
// your_side = 1 ;
 538: LD_ADDR_OWVAR 2
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// end ;
 546: PPOPN 1
 548: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 34
 561: PUSH
 562: LD_INT 12
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: LD_INT 3
 580: GREATEREQUAL
 581: IFFALSE 593
 583: GO 585
 585: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 586: LD_STRING ACH_FULLCARGO
 588: PPUSH
 589: CALL_OW 543
 593: END
// export function PrepareHeroes ; var veh ; begin
 594: LD_INT 0
 596: PPUSH
 597: PPUSH
// uc_side = 1 ;
 598: LD_ADDR_OWVAR 20
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// uc_nation = 1 ;
 606: LD_ADDR_OWVAR 21
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 614: LD_ADDR_EXP 1
 618: PUSH
 619: LD_STRING JMM
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: CALL 6151 0 2
 629: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 630: LD_ADDR_EXP 14
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL 6151 0 2
 645: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 646: LD_ADDR_EXP 10
 650: PUSH
 651: LD_STRING DeltaDoctor
 653: PPUSH
 654: CALL_OW 34
 658: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 659: LD_ADDR_VAR 0 2
 663: PUSH
 664: LD_INT 22
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 21
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 58
 686: PUSH
 687: EMPTY
 688: LIST
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: PPUSH
 695: CALL_OW 69
 699: ST_TO_ADDR
// if veh > 0 then
 700: LD_VAR 0 2
 704: PUSH
 705: LD_INT 0
 707: GREATER
 708: IFFALSE 730
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 710: LD_EXP 1
 714: PPUSH
 715: LD_VAR 0 2
 719: PUSH
 720: LD_INT 1
 722: ARRAY
 723: PPUSH
 724: CALL_OW 52
// end else
 728: GO 745
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 730: LD_EXP 1
 734: PPUSH
 735: LD_INT 2
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 745: LD_STRING LisaIn06
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 30
 755: PUSH
 756: LD_INT 1
 758: EQUAL
 759: IFFALSE 863
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 761: LD_ADDR_VAR 0 2
 765: PUSH
 766: LD_INT 22
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 21
 778: PUSH
 779: LD_INT 2
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: PUSH
 786: LD_INT 58
 788: PUSH
 789: EMPTY
 790: LIST
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: PPUSH
 797: CALL_OW 69
 801: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 802: LD_ADDR_EXP 2
 806: PUSH
 807: LD_STRING Lisa
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL 6151 0 2
 817: ST_TO_ADDR
// if veh > 0 then
 818: LD_VAR 0 2
 822: PUSH
 823: LD_INT 0
 825: GREATER
 826: IFFALSE 848
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_VAR 0 2
 837: PUSH
 838: LD_INT 1
 840: ARRAY
 841: PPUSH
 842: CALL_OW 52
// end else
 846: GO 863
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 848: LD_EXP 2
 852: PPUSH
 853: LD_INT 2
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 863: LD_STRING BobbyIn06
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 30
 873: PUSH
 874: LD_INT 1
 876: EQUAL
 877: IFFALSE 981
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 879: LD_ADDR_VAR 0 2
 883: PUSH
 884: LD_INT 22
 886: PUSH
 887: LD_INT 1
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 21
 896: PUSH
 897: LD_INT 2
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 58
 906: PUSH
 907: EMPTY
 908: LIST
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 920: LD_ADDR_EXP 3
 924: PUSH
 925: LD_STRING Bobby
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: CALL 6151 0 2
 935: ST_TO_ADDR
// if veh > 0 then
 936: LD_VAR 0 2
 940: PUSH
 941: LD_INT 0
 943: GREATER
 944: IFFALSE 966
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 946: LD_EXP 3
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 1
 958: ARRAY
 959: PPUSH
 960: CALL_OW 52
// end else
 964: GO 981
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 966: LD_EXP 3
 970: PPUSH
 971: LD_INT 2
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 981: LD_STRING CyrusIn06
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 30
 991: PUSH
 992: LD_INT 1
 994: EQUAL
 995: IFFALSE 1099
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 997: LD_ADDR_VAR 0 2
1001: PUSH
1002: LD_INT 22
1004: PUSH
1005: LD_INT 1
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 21
1014: PUSH
1015: LD_INT 2
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: LD_INT 58
1024: PUSH
1025: EMPTY
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 69
1037: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
1038: LD_ADDR_EXP 4
1042: PUSH
1043: LD_STRING Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6151 0 2
1053: ST_TO_ADDR
// if veh > 0 then
1054: LD_VAR 0 2
1058: PUSH
1059: LD_INT 0
1061: GREATER
1062: IFFALSE 1084
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1064: LD_EXP 4
1068: PPUSH
1069: LD_VAR 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: CALL_OW 52
// end else
1082: GO 1099
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1084: LD_EXP 4
1088: PPUSH
1089: LD_INT 2
1091: PPUSH
1092: LD_INT 0
1094: PPUSH
1095: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1099: LD_STRING FrankIn06
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL_OW 30
1109: PUSH
1110: LD_INT 1
1112: EQUAL
1113: IFFALSE 1217
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1115: LD_ADDR_VAR 0 2
1119: PUSH
1120: LD_INT 22
1122: PUSH
1123: LD_INT 1
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 21
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 58
1142: PUSH
1143: EMPTY
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PPUSH
1151: CALL_OW 69
1155: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1156: LD_ADDR_EXP 5
1160: PUSH
1161: LD_STRING Frank
1163: PPUSH
1164: LD_INT 1
1166: PPUSH
1167: CALL 6151 0 2
1171: ST_TO_ADDR
// if veh > 0 then
1172: LD_VAR 0 2
1176: PUSH
1177: LD_INT 0
1179: GREATER
1180: IFFALSE 1202
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1182: LD_EXP 5
1186: PPUSH
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: CALL_OW 52
// end else
1200: GO 1217
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1202: LD_EXP 5
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1217: LD_STRING BrownIn06
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 30
1227: PUSH
1228: LD_INT 1
1230: EQUAL
1231: IFFALSE 1335
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 2
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 58
1260: PUSH
1261: EMPTY
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PPUSH
1269: CALL_OW 69
1273: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1274: LD_ADDR_EXP 6
1278: PUSH
1279: LD_STRING Brown
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: CALL 6151 0 2
1289: ST_TO_ADDR
// if veh > 0 then
1290: LD_VAR 0 2
1294: PUSH
1295: LD_INT 0
1297: GREATER
1298: IFFALSE 1320
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1300: LD_EXP 6
1304: PPUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 52
// end else
1318: GO 1335
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1320: LD_EXP 6
1324: PPUSH
1325: LD_INT 2
1327: PPUSH
1328: LD_INT 0
1330: PPUSH
1331: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1335: LD_STRING DonaldsonIn06
1337: PPUSH
1338: LD_INT 0
1340: PPUSH
1341: CALL_OW 30
1345: PUSH
1346: LD_INT 1
1348: EQUAL
1349: IFFALSE 1453
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1351: LD_ADDR_VAR 0 2
1355: PUSH
1356: LD_INT 22
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 21
1368: PUSH
1369: LD_INT 2
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 58
1378: PUSH
1379: EMPTY
1380: LIST
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: PPUSH
1387: CALL_OW 69
1391: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1392: LD_ADDR_EXP 7
1396: PUSH
1397: LD_STRING Donaldson
1399: PPUSH
1400: LD_INT 1
1402: PPUSH
1403: CALL 6151 0 2
1407: ST_TO_ADDR
// if veh > 0 then
1408: LD_VAR 0 2
1412: PUSH
1413: LD_INT 0
1415: GREATER
1416: IFFALSE 1438
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1418: LD_EXP 7
1422: PPUSH
1423: LD_VAR 0 2
1427: PUSH
1428: LD_INT 1
1430: ARRAY
1431: PPUSH
1432: CALL_OW 52
// end else
1436: GO 1453
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1438: LD_EXP 7
1442: PPUSH
1443: LD_INT 2
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1453: LD_STRING GladstoneIn06
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 30
1463: PUSH
1464: LD_INT 1
1466: EQUAL
1467: IFFALSE 1571
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1469: LD_ADDR_VAR 0 2
1473: PUSH
1474: LD_INT 22
1476: PUSH
1477: LD_INT 1
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 21
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 58
1496: PUSH
1497: EMPTY
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: PPUSH
1505: CALL_OW 69
1509: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1510: LD_ADDR_EXP 8
1514: PUSH
1515: LD_STRING Gladstone
1517: PPUSH
1518: LD_INT 1
1520: PPUSH
1521: CALL 6151 0 2
1525: ST_TO_ADDR
// if veh > 0 then
1526: LD_VAR 0 2
1530: PUSH
1531: LD_INT 0
1533: GREATER
1534: IFFALSE 1556
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1536: LD_EXP 8
1540: PPUSH
1541: LD_VAR 0 2
1545: PUSH
1546: LD_INT 1
1548: ARRAY
1549: PPUSH
1550: CALL_OW 52
// end else
1554: GO 1571
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1556: LD_EXP 8
1560: PPUSH
1561: LD_INT 2
1563: PPUSH
1564: LD_INT 0
1566: PPUSH
1567: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1571: LD_INT 66
1573: PPUSH
1574: LD_INT 4
1576: PPUSH
1577: CALL_OW 86
// end ;
1581: LD_VAR 0 1
1585: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1586: LD_INT 0
1588: PPUSH
1589: PPUSH
1590: PPUSH
1591: PPUSH
1592: PPUSH
1593: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1594: LD_ADDR_VAR 0 5
1598: PUSH
1599: LD_STRING 06_VehiclesIn06_1
1601: PPUSH
1602: EMPTY
1603: PPUSH
1604: CALL_OW 30
1608: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1609: LD_ADDR_EXP 40
1613: PUSH
1614: LD_STRING 06_ResourcesInCargo06_1
1616: PPUSH
1617: EMPTY
1618: PPUSH
1619: CALL_OW 30
1623: ST_TO_ADDR
// cargoList = [ ] ;
1624: LD_ADDR_VAR 0 6
1628: PUSH
1629: EMPTY
1630: ST_TO_ADDR
// uc_side = 1 ;
1631: LD_ADDR_OWVAR 20
1635: PUSH
1636: LD_INT 1
1638: ST_TO_ADDR
// if vehicles > 0 then
1639: LD_VAR 0 5
1643: PUSH
1644: LD_INT 0
1646: GREATER
1647: IFFALSE 2002
// begin for i := 1 to vehicles do
1649: LD_ADDR_VAR 0 2
1653: PUSH
1654: DOUBLE
1655: LD_INT 1
1657: DEC
1658: ST_TO_ADDR
1659: LD_VAR 0 5
1663: PUSH
1664: FOR_TO
1665: IFFALSE 1814
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1667: LD_ADDR_OWVAR 21
1671: PUSH
1672: LD_VAR 0 5
1676: PUSH
1677: LD_VAR 0 2
1681: ARRAY
1682: PUSH
1683: LD_INT 1
1685: ARRAY
1686: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1687: LD_ADDR_OWVAR 37
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_VAR 0 2
1701: ARRAY
1702: PUSH
1703: LD_INT 2
1705: ARRAY
1706: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1707: LD_ADDR_OWVAR 39
1711: PUSH
1712: LD_VAR 0 5
1716: PUSH
1717: LD_VAR 0 2
1721: ARRAY
1722: PUSH
1723: LD_INT 3
1725: ARRAY
1726: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1727: LD_ADDR_OWVAR 38
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_VAR 0 2
1741: ARRAY
1742: PUSH
1743: LD_INT 4
1745: ARRAY
1746: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1747: LD_ADDR_OWVAR 40
1751: PUSH
1752: LD_VAR 0 5
1756: PUSH
1757: LD_VAR 0 2
1761: ARRAY
1762: PUSH
1763: LD_INT 5
1765: ARRAY
1766: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1767: LD_ADDR_OWVAR 41
1771: PUSH
1772: LD_INT 40
1774: ST_TO_ADDR
// veh = CreateVehicle ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: CALL_OW 45
1784: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1785: LD_VAR 0 4
1789: PPUSH
1790: LD_INT 3
1792: PPUSH
1793: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1797: LD_VAR 0 4
1801: PPUSH
1802: LD_INT 2
1804: PPUSH
1805: LD_INT 0
1807: PPUSH
1808: CALL_OW 49
// end ;
1812: GO 1664
1814: POP
1815: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1816: LD_ADDR_VAR 0 6
1820: PUSH
1821: LD_INT 22
1823: PUSH
1824: LD_INT 1
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 21
1833: PUSH
1834: LD_INT 2
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 34
1843: PUSH
1844: LD_INT 12
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL_OW 69
1860: ST_TO_ADDR
// if cargoList > 0 then
1861: LD_VAR 0 6
1865: PUSH
1866: LD_INT 0
1868: GREATER
1869: IFFALSE 2002
// for i = 1 to cargoList do
1871: LD_ADDR_VAR 0 2
1875: PUSH
1876: DOUBLE
1877: LD_INT 1
1879: DEC
1880: ST_TO_ADDR
1881: LD_VAR 0 6
1885: PUSH
1886: FOR_TO
1887: IFFALSE 2000
// begin if resources > 0 then
1889: LD_EXP 40
1893: PUSH
1894: LD_INT 0
1896: GREATER
1897: IFFALSE 1998
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1899: LD_VAR 0 6
1903: PUSH
1904: LD_VAR 0 2
1908: ARRAY
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: LD_EXP 40
1917: PUSH
1918: LD_VAR 0 2
1922: ARRAY
1923: PUSH
1924: LD_INT 1
1926: ARRAY
1927: PPUSH
1928: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1932: LD_VAR 0 6
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PPUSH
1943: LD_INT 2
1945: PPUSH
1946: LD_EXP 40
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 2
1959: ARRAY
1960: PPUSH
1961: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1965: LD_VAR 0 6
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: LD_EXP 40
1983: PUSH
1984: LD_VAR 0 2
1988: ARRAY
1989: PUSH
1990: LD_INT 3
1992: ARRAY
1993: PPUSH
1994: CALL_OW 291
// end ; end ;
1998: GO 1886
2000: POP
2001: POP
// end ; end ;
2002: LD_VAR 0 1
2006: RET
// export function PrepareOthers ; var i , veh ; begin
2007: LD_INT 0
2009: PPUSH
2010: PPUSH
2011: PPUSH
// uc_side = 1 ;
2012: LD_ADDR_OWVAR 20
2016: PUSH
2017: LD_INT 1
2019: ST_TO_ADDR
// uc_nation = 1 ;
2020: LD_ADDR_OWVAR 21
2024: PUSH
2025: LD_INT 1
2027: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2028: LD_ADDR_EXP 11
2032: PUSH
2033: LD_STRING OthersIn06
2035: PPUSH
2036: CALL_OW 31
2040: ST_TO_ADDR
// for i in others do
2041: LD_ADDR_VAR 0 2
2045: PUSH
2046: LD_EXP 11
2050: PUSH
2051: FOR_IN
2052: IFFALSE 2142
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2054: LD_ADDR_VAR 0 3
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 58
2081: PUSH
2082: EMPTY
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: ST_TO_ADDR
// if veh > 0 then
2095: LD_VAR 0 3
2099: PUSH
2100: LD_INT 0
2102: GREATER
2103: IFFALSE 2125
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: LD_VAR 0 3
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PPUSH
2119: CALL_OW 52
// end else
2123: GO 2140
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2125: LD_VAR 0 2
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 0
2135: PPUSH
2136: CALL_OW 49
// end ; end ;
2140: GO 2051
2142: POP
2143: POP
// end ;
2144: LD_VAR 0 1
2148: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2149: LD_INT 0
2151: PPUSH
2152: PPUSH
2153: PPUSH
// uc_side = 1 ;
2154: LD_ADDR_OWVAR 20
2158: PUSH
2159: LD_INT 1
2161: ST_TO_ADDR
// uc_nation = 0 ;
2162: LD_ADDR_OWVAR 21
2166: PUSH
2167: LD_INT 0
2169: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2170: LD_ADDR_EXP 12
2174: PUSH
2175: LD_STRING ApeIn06
2177: PPUSH
2178: CALL_OW 31
2182: ST_TO_ADDR
// for i in ape do
2183: LD_ADDR_VAR 0 2
2187: PUSH
2188: LD_EXP 12
2192: PUSH
2193: FOR_IN
2194: IFFALSE 2213
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2196: LD_VAR 0 2
2200: PPUSH
2201: LD_INT 2
2203: PPUSH
2204: LD_INT 0
2206: PPUSH
2207: CALL_OW 49
2211: GO 2193
2213: POP
2214: POP
// end ;
2215: LD_VAR 0 1
2219: RET
// export function PrepareDenis ; var xy , i ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// uc_side = 4 ;
2225: LD_ADDR_OWVAR 20
2229: PUSH
2230: LD_INT 4
2232: ST_TO_ADDR
// uc_nation = 1 ;
2233: LD_ADDR_OWVAR 21
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2241: LD_ADDR_VAR 0 2
2245: PUSH
2246: LD_INT 63
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 70
2258: PUSH
2259: LD_INT 1
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PUSH
2266: LD_INT 83
2268: PUSH
2269: LD_INT 1
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 16
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 27
2288: PUSH
2289: LD_INT 1
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 38
2298: PUSH
2299: LD_INT 1
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 5
2308: PUSH
2309: LD_INT 1
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 54
2318: PUSH
2319: LD_INT 1
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2336: LD_ADDR_EXP 9
2340: PUSH
2341: LD_STRING Denis
2343: PPUSH
2344: LD_INT 1
2346: PPUSH
2347: CALL 6151 0 2
2351: ST_TO_ADDR
// for i = 1 to xy do
2352: LD_ADDR_VAR 0 3
2356: PUSH
2357: DOUBLE
2358: LD_INT 1
2360: DEC
2361: ST_TO_ADDR
2362: LD_VAR 0 2
2366: PUSH
2367: FOR_TO
2368: IFFALSE 2467
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2370: LD_VAR 0 2
2374: PUSH
2375: LD_VAR 0 3
2379: ARRAY
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 2
2389: PUSH
2390: LD_VAR 0 3
2394: ARRAY
2395: PUSH
2396: LD_INT 2
2398: ARRAY
2399: PPUSH
2400: CALL_OW 428
2404: PUSH
2405: LD_INT 0
2407: EQUAL
2408: IFFALSE 2465
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2410: LD_EXP 9
2414: PPUSH
2415: LD_VAR 0 2
2419: PUSH
2420: LD_VAR 0 3
2424: ARRAY
2425: PUSH
2426: LD_INT 1
2428: ARRAY
2429: PPUSH
2430: LD_VAR 0 2
2434: PUSH
2435: LD_VAR 0 3
2439: ARRAY
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 0
2447: PPUSH
2448: CALL_OW 48
// if IsPlaced ( Denis ) then
2452: LD_EXP 9
2456: PPUSH
2457: CALL_OW 305
2461: IFFALSE 2465
// break ;
2463: GO 2467
// end ;
2465: GO 2367
2467: POP
2468: POP
// SetClass ( Denis , 4 ) ;
2469: LD_EXP 9
2473: PPUSH
2474: LD_INT 4
2476: PPUSH
2477: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2481: LD_EXP 9
2485: PPUSH
2486: LD_INT 750
2488: PPUSH
2489: CALL_OW 234
// end ;
2493: LD_VAR 0 1
2497: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2498: LD_INT 0
2500: PPUSH
2501: PPUSH
2502: PPUSH
2503: PPUSH
2504: PPUSH
// area := HarrisonSupportArea ;
2505: LD_ADDR_VAR 0 4
2509: PUSH
2510: LD_INT 3
2512: ST_TO_ADDR
// dir := 2 ;
2513: LD_ADDR_VAR 0 5
2517: PUSH
2518: LD_INT 2
2520: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2521: LD_VAR 0 4
2525: PPUSH
2526: LD_INT 21
2528: PUSH
2529: LD_INT 3
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PPUSH
2536: CALL_OW 70
2540: IFFALSE 2558
// begin area := HarrisonSupportArea2 ;
2542: LD_ADDR_VAR 0 4
2546: PUSH
2547: LD_INT 31
2549: ST_TO_ADDR
// dir := 1 ;
2550: LD_ADDR_VAR 0 5
2554: PUSH
2555: LD_INT 1
2557: ST_TO_ADDR
// end ; uc_side = 1 ;
2558: LD_ADDR_OWVAR 20
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// uc_nation = 1 ;
2566: LD_ADDR_OWVAR 21
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// vc_engine = 1 ;
2574: LD_ADDR_OWVAR 39
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// vc_control = 1 ;
2582: LD_ADDR_OWVAR 38
2586: PUSH
2587: LD_INT 1
2589: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2590: LD_ADDR_OWVAR 40
2594: PUSH
2595: LD_INT 4
2597: PUSH
2598: LD_INT 4
2600: PUSH
2601: LD_INT 2
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: PUSH
2609: LD_OWVAR 67
2613: ARRAY
2614: ST_TO_ADDR
// vc_chassis = 2 ;
2615: LD_ADDR_OWVAR 37
2619: PUSH
2620: LD_INT 2
2622: ST_TO_ADDR
// veh = CreateVehicle ;
2623: LD_ADDR_VAR 0 3
2627: PUSH
2628: CALL_OW 45
2632: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2633: LD_VAR 0 3
2637: PPUSH
2638: LD_VAR 0 5
2642: PPUSH
2643: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2647: LD_VAR 0 3
2651: PPUSH
2652: LD_VAR 0 4
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2664: LD_VAR 0 3
2668: PPUSH
2669: LD_INT 50
2671: PPUSH
2672: CALL_OW 240
// hc_class := 2 ;
2676: LD_ADDR_OWVAR 28
2680: PUSH
2681: LD_INT 2
2683: ST_TO_ADDR
// hc_sex := sex_male ;
2684: LD_ADDR_OWVAR 27
2688: PUSH
2689: LD_INT 1
2691: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2692: LD_ADDR_OWVAR 33
2696: PUSH
2697: LD_STRING SecondCharsGal
2699: ST_TO_ADDR
// hc_face_number := 52 ;
2700: LD_ADDR_OWVAR 34
2704: PUSH
2705: LD_INT 52
2707: ST_TO_ADDR
// hc_name := Craig Brown ;
2708: LD_ADDR_OWVAR 26
2712: PUSH
2713: LD_STRING Craig Brown
2715: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2716: LD_ADDR_OWVAR 29
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: LD_INT 10
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2731: LD_ADDR_OWVAR 30
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: LD_INT 2
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2754: LD_ADDR_OWVAR 31
2758: PUSH
2759: LD_INT 2
2761: PUSH
2762: LD_INT 3
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: LD_INT 0
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2777: LD_ADDR_EXP 17
2781: PUSH
2782: CALL_OW 44
2786: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2787: LD_EXP 17
2791: PPUSH
2792: LD_VAR 0 3
2796: PPUSH
2797: CALL_OW 52
// vc_engine = 1 ;
2801: LD_ADDR_OWVAR 39
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// vc_control = 1 ;
2809: LD_ADDR_OWVAR 38
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2817: LD_ADDR_OWVAR 40
2821: PUSH
2822: LD_INT 3
2824: ST_TO_ADDR
// vc_chassis = 2 ;
2825: LD_ADDR_OWVAR 37
2829: PUSH
2830: LD_INT 2
2832: ST_TO_ADDR
// veh = CreateVehicle ;
2833: LD_ADDR_VAR 0 3
2837: PUSH
2838: CALL_OW 45
2842: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_VAR 0 5
2852: PPUSH
2853: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2857: LD_VAR 0 3
2861: PPUSH
2862: LD_VAR 0 4
2866: PPUSH
2867: LD_INT 0
2869: PPUSH
2870: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2874: LD_VAR 0 3
2878: PPUSH
2879: LD_INT 50
2881: PPUSH
2882: CALL_OW 240
// hc_class := 1 ;
2886: LD_ADDR_OWVAR 28
2890: PUSH
2891: LD_INT 1
2893: ST_TO_ADDR
// hc_sex := sex_female ;
2894: LD_ADDR_OWVAR 27
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2902: LD_ADDR_OWVAR 33
2906: PUSH
2907: LD_STRING SecondCharsGal
2909: ST_TO_ADDR
// hc_face_number := 45 ;
2910: LD_ADDR_OWVAR 34
2914: PUSH
2915: LD_INT 45
2917: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2918: LD_ADDR_OWVAR 29
2922: PUSH
2923: LD_INT 11
2925: PUSH
2926: LD_INT 10
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2933: LD_ADDR_OWVAR 26
2937: PUSH
2938: LD_STRING Ingrid Jonsson
2940: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2941: LD_ADDR_OWVAR 30
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: LD_INT 1
2951: PUSH
2952: LD_INT 0
2954: PUSH
2955: LD_INT 0
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2964: LD_ADDR_OWVAR 31
2968: PUSH
2969: LD_INT 3
2971: PUSH
2972: LD_INT 1
2974: PUSH
2975: LD_INT 1
2977: PUSH
2978: LD_INT 0
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2987: LD_ADDR_EXP 18
2991: PUSH
2992: CALL_OW 44
2996: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2997: LD_EXP 18
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: CALL_OW 52
// end ;
3011: LD_VAR 0 1
3015: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
3016: LD_INT 0
3018: PPUSH
3019: PPUSH
3020: PPUSH
3021: PPUSH
3022: PPUSH
// j = 0 ;
3023: LD_ADDR_VAR 0 3
3027: PUSH
3028: LD_INT 0
3030: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3031: LD_INT 35
3033: PPUSH
3034: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
3038: LD_ADDR_VAR 0 2
3042: PUSH
3043: LD_INT 22
3045: PUSH
3046: LD_INT 1
3048: PUSH
3049: EMPTY
3050: LIST
3051: LIST
3052: PUSH
3053: LD_INT 21
3055: PUSH
3056: LD_INT 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 26
3065: PUSH
3066: LD_INT 1
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PUSH
3073: LD_INT 2
3075: PUSH
3076: LD_INT 25
3078: PUSH
3079: LD_INT 1
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: PUSH
3086: LD_INT 25
3088: PUSH
3089: LD_INT 2
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PUSH
3096: LD_INT 25
3098: PUSH
3099: LD_INT 3
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 25
3108: PUSH
3109: LD_INT 4
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: PPUSH
3129: CALL_OW 69
3133: PUSH
3134: FOR_IN
3135: IFFALSE 3261
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 3
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 2
3149: PUSH
3150: LD_INT 21
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 21
3162: PUSH
3163: LD_INT 2
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 21
3172: PUSH
3173: LD_INT 3
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: LD_INT 59
3182: PUSH
3183: EMPTY
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 91
3195: PUSH
3196: LD_VAR 0 2
3200: PUSH
3201: LD_INT 25
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: NOT
3219: PUSH
3220: LD_VAR 0 2
3224: PPUSH
3225: LD_EXP 1
3229: PPUSH
3230: CALL_OW 296
3234: PUSH
3235: LD_INT 15
3237: LESS
3238: AND
3239: IFFALSE 3259
// begin tmp = i ;
3241: LD_ADDR_VAR 0 4
3245: PUSH
3246: LD_VAR 0 2
3250: ST_TO_ADDR
// j = 1 ;
3251: LD_ADDR_VAR 0 3
3255: PUSH
3256: LD_INT 1
3258: ST_TO_ADDR
// end ; end ;
3259: GO 3134
3261: POP
3262: POP
// until j = 1 ;
3263: LD_VAR 0 3
3267: PUSH
3268: LD_INT 1
3270: EQUAL
3271: IFFALSE 3031
// blockSpawn = 1 ;
3273: LD_ADDR_EXP 29
3277: PUSH
3278: LD_INT 1
3280: ST_TO_ADDR
// uc_side = 4 ;
3281: LD_ADDR_OWVAR 20
3285: PUSH
3286: LD_INT 4
3288: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3289: LD_ADDR_EXP 15
3293: PUSH
3294: LD_STRING Joan
3296: PPUSH
3297: LD_INT 0
3299: PPUSH
3300: CALL 6151 0 2
3304: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3305: LD_EXP 15
3309: PPUSH
3310: LD_VAR 0 4
3314: PPUSH
3315: CALL_OW 250
3319: PPUSH
3320: LD_VAR 0 4
3324: PPUSH
3325: CALL_OW 251
3329: PPUSH
3330: LD_INT 5
3332: PPUSH
3333: LD_INT 1
3335: PPUSH
3336: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3340: LD_EXP 15
3344: PPUSH
3345: LD_INT 250
3347: PPUSH
3348: CALL_OW 234
// InGameOn ;
3352: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3356: LD_EXP 15
3360: PPUSH
3361: CALL_OW 87
// wait ( 0 0$2 ) ;
3365: LD_INT 70
3367: PPUSH
3368: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3372: LD_VAR 0 4
3376: PPUSH
3377: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3381: LD_VAR 0 4
3385: PPUSH
3386: CALL_OW 122
// wait ( 0 0$1 ) ;
3390: LD_INT 35
3392: PPUSH
3393: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3397: LD_VAR 0 4
3401: PPUSH
3402: LD_EXP 15
3406: PPUSH
3407: CALL_OW 112
// wait ( 0 0$2 ) ;
3411: LD_INT 70
3413: PPUSH
3414: CALL_OW 67
// DialogueOn ;
3418: CALL_OW 6
// if tmp = JMM then
3422: LD_VAR 0 4
3426: PUSH
3427: LD_EXP 1
3431: EQUAL
3432: IFFALSE 3581
// begin ComTurnUnit ( JMM , Joan ) ;
3434: LD_EXP 1
3438: PPUSH
3439: LD_EXP 15
3443: PPUSH
3444: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3448: LD_EXP 1
3452: PPUSH
3453: LD_STRING D5b-JMM-1
3455: PPUSH
3456: CALL_OW 88
// DialogueOff ;
3460: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3464: LD_EXP 15
3468: PPUSH
3469: LD_INT 500
3471: PPUSH
3472: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3476: LD_EXP 15
3480: PPUSH
3481: LD_EXP 1
3485: PPUSH
3486: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3490: LD_EXP 1
3494: PPUSH
3495: LD_EXP 15
3499: PPUSH
3500: CALL_OW 119
// wait ( 0 0$1 ) ;
3504: LD_INT 35
3506: PPUSH
3507: CALL_OW 67
// DialogueOn ;
3511: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3515: LD_EXP 15
3519: PPUSH
3520: LD_STRING D5b-Joan-1
3522: PPUSH
3523: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3527: LD_EXP 1
3531: PPUSH
3532: LD_STRING D5b-JMM-2
3534: PPUSH
3535: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3539: LD_EXP 15
3543: PPUSH
3544: LD_STRING D5b-Joan-2
3546: PPUSH
3547: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D5b-JMM-3
3558: PPUSH
3559: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D5b-Joan-3
3570: PPUSH
3571: CALL_OW 88
// DialogueOff ;
3575: CALL_OW 7
// end else
3579: GO 3916
// begin ComTurnUnit ( tmp , Joan ) ;
3581: LD_VAR 0 4
3585: PPUSH
3586: LD_EXP 15
3590: PPUSH
3591: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3595: LD_VAR 0 4
3599: PPUSH
3600: LD_STRING D5a-Sol1-1
3602: PPUSH
3603: CALL_OW 88
// DialogueOff ;
3607: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3611: LD_EXP 15
3615: PPUSH
3616: LD_INT 500
3618: PPUSH
3619: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3623: LD_EXP 15
3627: PPUSH
3628: LD_VAR 0 4
3632: PPUSH
3633: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3637: LD_VAR 0 4
3641: PPUSH
3642: LD_EXP 15
3646: PPUSH
3647: CALL_OW 119
// wait ( 0 0$1 ) ;
3651: LD_INT 35
3653: PPUSH
3654: CALL_OW 67
// DialogueOn ;
3658: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3662: LD_EXP 15
3666: PPUSH
3667: LD_STRING D5a-Joan-1
3669: PPUSH
3670: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_STRING D5a-Sol1-2
3681: PPUSH
3682: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3686: LD_EXP 15
3690: PPUSH
3691: LD_STRING D5a-Joan-2
3693: PPUSH
3694: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3698: LD_VAR 0 4
3702: PPUSH
3703: LD_STRING D5a-Sol1-3
3705: PPUSH
3706: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3710: LD_EXP 15
3714: PPUSH
3715: LD_STRING D5a-Joan-3
3717: PPUSH
3718: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3722: LD_VAR 0 4
3726: PPUSH
3727: LD_STRING D5a-Sol1-4
3729: PPUSH
3730: CALL_OW 88
// DialogueOff ;
3734: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3738: LD_EXP 1
3742: PPUSH
3743: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3747: LD_EXP 1
3751: PPUSH
3752: CALL_OW 122
// wait ( 0 0$1 ) ;
3756: LD_INT 35
3758: PPUSH
3759: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3763: LD_INT 35
3765: PPUSH
3766: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3770: LD_EXP 15
3774: PUSH
3775: LD_VAR 0 4
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PPUSH
3784: LD_EXP 1
3788: PPUSH
3789: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3793: LD_EXP 15
3797: PPUSH
3798: LD_EXP 1
3802: PPUSH
3803: CALL_OW 296
3807: PUSH
3808: LD_INT 5
3810: LESS
3811: IFFALSE 3763
// ComTurnUnit ( Joan , JMM ) ;
3813: LD_EXP 15
3817: PPUSH
3818: LD_EXP 1
3822: PPUSH
3823: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3827: LD_EXP 1
3831: PPUSH
3832: LD_EXP 15
3836: PPUSH
3837: CALL_OW 119
// wait ( 0 0$1 ) ;
3841: LD_INT 35
3843: PPUSH
3844: CALL_OW 67
// DialogueOn ;
3848: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3852: LD_EXP 15
3856: PPUSH
3857: LD_STRING D5a-Joan-4
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D5a-JMM-4
3871: PPUSH
3872: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3876: LD_EXP 15
3880: PPUSH
3881: LD_STRING D5a-Joan-5
3883: PPUSH
3884: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D5a-JMM-5
3895: PPUSH
3896: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3900: LD_EXP 15
3904: PPUSH
3905: LD_STRING D5a-Joan-6
3907: PPUSH
3908: CALL_OW 88
// DialogueOff ;
3912: CALL_OW 7
// end ; DialogueOn ;
3916: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3920: LD_EXP 1
3924: PPUSH
3925: LD_STRING D6-JMM-1
3927: PPUSH
3928: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3932: LD_EXP 15
3936: PPUSH
3937: LD_STRING D6-Joan-1
3939: PPUSH
3940: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3944: LD_EXP 1
3948: PPUSH
3949: LD_STRING D6-JMM-2
3951: PPUSH
3952: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3956: LD_EXP 15
3960: PPUSH
3961: LD_STRING D6-Joan-2
3963: PPUSH
3964: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3968: LD_EXP 1
3972: PPUSH
3973: LD_STRING D6-JMM-3
3975: PPUSH
3976: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3980: LD_EXP 15
3984: PPUSH
3985: LD_STRING D6-Joan-3
3987: PPUSH
3988: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3992: LD_EXP 1
3996: PPUSH
3997: LD_STRING D6-JMM-4
3999: PPUSH
4000: CALL_OW 88
// DialogueOff ;
4004: CALL_OW 7
// InGameOff ;
4008: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4012: LD_EXP 15
4016: PPUSH
4017: LD_INT 1
4019: PPUSH
4020: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4024: LD_STRING MJ
4026: PPUSH
4027: CALL_OW 337
// JoanStatus = 1 ;
4031: LD_ADDR_EXP 16
4035: PUSH
4036: LD_INT 1
4038: ST_TO_ADDR
// blockSpawn = 0 ;
4039: LD_ADDR_EXP 29
4043: PUSH
4044: LD_INT 0
4046: ST_TO_ADDR
// end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
// if not number or number > 8 then
4056: LD_VAR 0 1
4060: NOT
4061: PUSH
4062: LD_VAR 0 1
4066: PUSH
4067: LD_INT 8
4069: GREATER
4070: OR
4071: IFFALSE 4075
// exit ;
4073: GO 5644
// repeat wait ( 0 0$7 ) ;
4075: LD_INT 245
4077: PPUSH
4078: CALL_OW 67
// until blockSpawn = 0 ;
4082: LD_EXP 29
4086: PUSH
4087: LD_INT 0
4089: EQUAL
4090: IFFALSE 4075
// uc_side = 1 ;
4092: LD_ADDR_OWVAR 20
4096: PUSH
4097: LD_INT 1
4099: ST_TO_ADDR
// uc_nation = 1 ;
4100: LD_ADDR_OWVAR 21
4104: PUSH
4105: LD_INT 1
4107: ST_TO_ADDR
// InitHc ;
4108: CALL_OW 19
// if number = 1 then
4112: LD_VAR 0 1
4116: PUSH
4117: LD_INT 1
4119: EQUAL
4120: IFFALSE 4296
// begin hc_class := 3 ;
4122: LD_ADDR_OWVAR 28
4126: PUSH
4127: LD_INT 3
4129: ST_TO_ADDR
// hc_sex := sex_male ;
4130: LD_ADDR_OWVAR 27
4134: PUSH
4135: LD_INT 1
4137: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4138: LD_ADDR_OWVAR 33
4142: PUSH
4143: LD_STRING SecondCharsGal
4145: ST_TO_ADDR
// hc_face_number := 55 ;
4146: LD_ADDR_OWVAR 34
4150: PUSH
4151: LD_INT 55
4153: ST_TO_ADDR
// hc_name := George McCarthy ;
4154: LD_ADDR_OWVAR 26
4158: PUSH
4159: LD_STRING George McCarthy
4161: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4162: LD_ADDR_OWVAR 29
4166: PUSH
4167: LD_INT 11
4169: PUSH
4170: LD_INT 10
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4177: LD_ADDR_OWVAR 30
4181: PUSH
4182: LD_INT 0
4184: PUSH
4185: LD_INT 0
4187: PUSH
4188: LD_INT 2
4190: PUSH
4191: LD_INT 0
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4200: LD_ADDR_OWVAR 31
4204: PUSH
4205: LD_INT 1
4207: PUSH
4208: LD_INT 2
4210: PUSH
4211: LD_INT 3
4213: PUSH
4214: LD_INT 1
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: ST_TO_ADDR
// un = CreateHuman ;
4223: LD_ADDR_VAR 0 3
4227: PUSH
4228: CALL_OW 44
4232: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4233: LD_VAR 0 3
4237: PPUSH
4238: LD_INT 23
4240: PPUSH
4241: LD_INT 1
4243: PPUSH
4244: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4248: LD_VAR 0 3
4252: PPUSH
4253: CALL_OW 87
// wait ( 0 0$1 ) ;
4257: LD_INT 35
4259: PPUSH
4260: CALL_OW 67
// DialogueOn ;
4264: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: LD_STRING D11d-Sol4-1
4275: PPUSH
4276: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4280: LD_EXP 1
4284: PPUSH
4285: LD_STRING D11d-JMM-1
4287: PPUSH
4288: CALL_OW 88
// DialogueOff ;
4292: CALL_OW 7
// end ; if number = 2 then
4296: LD_VAR 0 1
4300: PUSH
4301: LD_INT 2
4303: EQUAL
4304: IFFALSE 4480
// begin hc_class := 1 ;
4306: LD_ADDR_OWVAR 28
4310: PUSH
4311: LD_INT 1
4313: ST_TO_ADDR
// hc_sex := sex_male ;
4314: LD_ADDR_OWVAR 27
4318: PUSH
4319: LD_INT 1
4321: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4322: LD_ADDR_OWVAR 33
4326: PUSH
4327: LD_STRING AmGalRemake
4329: ST_TO_ADDR
// hc_face_number := 7 ;
4330: LD_ADDR_OWVAR 34
4334: PUSH
4335: LD_INT 7
4337: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4338: LD_ADDR_OWVAR 26
4342: PUSH
4343: LD_STRING Bobby Jordan
4345: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4346: LD_ADDR_OWVAR 29
4350: PUSH
4351: LD_INT 9
4353: PUSH
4354: LD_INT 11
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4361: LD_ADDR_OWVAR 30
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: LD_INT 0
4371: PUSH
4372: LD_INT 0
4374: PUSH
4375: LD_INT 1
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4384: LD_ADDR_OWVAR 31
4388: PUSH
4389: LD_INT 2
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: LD_INT 1
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: ST_TO_ADDR
// un = CreateHuman ;
4407: LD_ADDR_VAR 0 3
4411: PUSH
4412: CALL_OW 44
4416: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4417: LD_VAR 0 3
4421: PPUSH
4422: LD_INT 24
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: CALL_OW 49
// wait ( 0 0$1 ) ;
4432: LD_INT 35
4434: PPUSH
4435: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4439: LD_VAR 0 3
4443: PPUSH
4444: CALL_OW 87
// DialogueOn ;
4448: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4452: LD_VAR 0 3
4456: PPUSH
4457: LD_STRING D11b-Sol3-1
4459: PPUSH
4460: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4464: LD_EXP 1
4468: PPUSH
4469: LD_STRING D11b-JMM-1
4471: PPUSH
4472: CALL_OW 88
// DialogueOff ;
4476: CALL_OW 7
// end ; if number = 3 then
4480: LD_VAR 0 1
4484: PUSH
4485: LD_INT 3
4487: EQUAL
4488: IFFALSE 4652
// begin hc_class := 1 ;
4490: LD_ADDR_OWVAR 28
4494: PUSH
4495: LD_INT 1
4497: ST_TO_ADDR
// hc_sex := sex_male ;
4498: LD_ADDR_OWVAR 27
4502: PUSH
4503: LD_INT 1
4505: ST_TO_ADDR
// hc_gallery := DJ ;
4506: LD_ADDR_OWVAR 33
4510: PUSH
4511: LD_STRING DJ
4513: ST_TO_ADDR
// hc_face_number := 1 ;
4514: LD_ADDR_OWVAR 34
4518: PUSH
4519: LD_INT 1
4521: ST_TO_ADDR
// hc_name := Darius Dajay ;
4522: LD_ADDR_OWVAR 26
4526: PUSH
4527: LD_STRING Darius Dajay
4529: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4530: LD_ADDR_OWVAR 29
4534: PUSH
4535: LD_INT 11
4537: PUSH
4538: LD_INT 11
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4545: LD_ADDR_OWVAR 30
4549: PUSH
4550: LD_INT 2
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: LD_INT 0
4558: PUSH
4559: LD_INT 0
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4568: LD_ADDR_OWVAR 31
4572: PUSH
4573: LD_INT 4
4575: PUSH
4576: LD_INT 0
4578: PUSH
4579: LD_INT 1
4581: PUSH
4582: LD_INT 0
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: ST_TO_ADDR
// un = CreateHuman ;
4591: LD_ADDR_VAR 0 3
4595: PUSH
4596: CALL_OW 44
4600: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4601: LD_VAR 0 3
4605: PPUSH
4606: LD_INT 25
4608: PPUSH
4609: LD_INT 1
4611: PPUSH
4612: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4616: LD_VAR 0 3
4620: PPUSH
4621: CALL_OW 87
// wait ( 0 0$1 ) ;
4625: LD_INT 35
4627: PPUSH
4628: CALL_OW 67
// DialogueOn ;
4632: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4636: LD_VAR 0 3
4640: PPUSH
4641: LD_STRING D11f-Sol5-1
4643: PPUSH
4644: CALL_OW 88
// DialogueOff ;
4648: CALL_OW 7
// end ; if number = 4 then
4652: LD_VAR 0 1
4656: PUSH
4657: LD_INT 4
4659: EQUAL
4660: IFFALSE 4824
// begin hc_class := 3 ;
4662: LD_ADDR_OWVAR 28
4666: PUSH
4667: LD_INT 3
4669: ST_TO_ADDR
// hc_sex := sex_female ;
4670: LD_ADDR_OWVAR 27
4674: PUSH
4675: LD_INT 2
4677: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4678: LD_ADDR_OWVAR 33
4682: PUSH
4683: LD_STRING SecondCharsGal
4685: ST_TO_ADDR
// hc_face_number := 46 ;
4686: LD_ADDR_OWVAR 34
4690: PUSH
4691: LD_INT 46
4693: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4694: LD_ADDR_OWVAR 26
4698: PUSH
4699: LD_STRING Sylvia Creak
4701: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4702: LD_ADDR_OWVAR 29
4706: PUSH
4707: LD_INT 10
4709: PUSH
4710: LD_INT 9
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4717: LD_ADDR_OWVAR 30
4721: PUSH
4722: LD_INT 0
4724: PUSH
4725: LD_INT 1
4727: PUSH
4728: LD_INT 1
4730: PUSH
4731: LD_INT 1
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4740: LD_ADDR_OWVAR 31
4744: PUSH
4745: LD_INT 1
4747: PUSH
4748: LD_INT 3
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: LD_INT 1
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: ST_TO_ADDR
// un = CreateHuman ;
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: CALL_OW 44
4772: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4773: LD_VAR 0 3
4777: PPUSH
4778: LD_INT 26
4780: PPUSH
4781: LD_INT 1
4783: PPUSH
4784: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4788: LD_VAR 0 3
4792: PPUSH
4793: CALL_OW 87
// wait ( 0 0$1 ) ;
4797: LD_INT 35
4799: PPUSH
4800: CALL_OW 67
// DialogueOn ;
4804: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4808: LD_VAR 0 3
4812: PPUSH
4813: LD_STRING D11e-FSol4-1
4815: PPUSH
4816: CALL_OW 88
// DialogueOff ;
4820: CALL_OW 7
// end ; if number = 5 then
4824: LD_VAR 0 1
4828: PUSH
4829: LD_INT 5
4831: EQUAL
4832: IFFALSE 5008
// begin hc_class := 1 ;
4834: LD_ADDR_OWVAR 28
4838: PUSH
4839: LD_INT 1
4841: ST_TO_ADDR
// hc_sex := sex_female ;
4842: LD_ADDR_OWVAR 27
4846: PUSH
4847: LD_INT 2
4849: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4850: LD_ADDR_OWVAR 33
4854: PUSH
4855: LD_STRING SecondCharsGal
4857: ST_TO_ADDR
// hc_face_number := 37 ;
4858: LD_ADDR_OWVAR 34
4862: PUSH
4863: LD_INT 37
4865: ST_TO_ADDR
// hc_name := Malena Johnson ;
4866: LD_ADDR_OWVAR 26
4870: PUSH
4871: LD_STRING Malena Johnson
4873: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4874: LD_ADDR_OWVAR 29
4878: PUSH
4879: LD_INT 11
4881: PUSH
4882: LD_INT 10
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4889: LD_ADDR_OWVAR 30
4893: PUSH
4894: LD_INT 1
4896: PUSH
4897: LD_INT 1
4899: PUSH
4900: LD_INT 0
4902: PUSH
4903: LD_INT 0
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4912: LD_ADDR_OWVAR 31
4916: PUSH
4917: LD_INT 1
4919: PUSH
4920: LD_INT 1
4922: PUSH
4923: LD_INT 1
4925: PUSH
4926: LD_INT 1
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: ST_TO_ADDR
// un = CreateHuman ;
4935: LD_ADDR_VAR 0 3
4939: PUSH
4940: CALL_OW 44
4944: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4945: LD_VAR 0 3
4949: PPUSH
4950: LD_INT 27
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4960: LD_VAR 0 3
4964: PPUSH
4965: CALL_OW 87
// wait ( 0 0$1 ) ;
4969: LD_INT 35
4971: PPUSH
4972: CALL_OW 67
// DialogueOn ;
4976: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4980: LD_VAR 0 3
4984: PPUSH
4985: LD_STRING D11c-FSol3-1
4987: PPUSH
4988: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4992: LD_EXP 1
4996: PPUSH
4997: LD_STRING D11c-JMM-1
4999: PPUSH
5000: CALL_OW 88
// DialogueOff ;
5004: CALL_OW 7
// end ; if number = 6 then
5008: LD_VAR 0 1
5012: PUSH
5013: LD_INT 6
5015: EQUAL
5016: IFFALSE 5190
// begin hc_class := 1 ;
5018: LD_ADDR_OWVAR 28
5022: PUSH
5023: LD_INT 1
5025: ST_TO_ADDR
// hc_sex := sex_male ;
5026: LD_ADDR_OWVAR 27
5030: PUSH
5031: LD_INT 1
5033: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5034: LD_ADDR_OWVAR 33
5038: PUSH
5039: LD_STRING AmGalRemake
5041: ST_TO_ADDR
// hc_face_number := 1 ;
5042: LD_ADDR_OWVAR 34
5046: PUSH
5047: LD_INT 1
5049: ST_TO_ADDR
// hc_name := Charles Brown ;
5050: LD_ADDR_OWVAR 26
5054: PUSH
5055: LD_STRING Charles Brown
5057: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5058: LD_ADDR_OWVAR 29
5062: PUSH
5063: LD_INT 12
5065: PUSH
5066: LD_INT 11
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5073: LD_ADDR_OWVAR 30
5077: PUSH
5078: LD_INT 2
5080: PUSH
5081: LD_INT 0
5083: PUSH
5084: LD_INT 0
5086: PUSH
5087: LD_INT 0
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5096: LD_ADDR_OWVAR 31
5100: PUSH
5101: LD_INT 3
5103: PUSH
5104: LD_INT 0
5106: PUSH
5107: LD_INT 1
5109: PUSH
5110: LD_INT 1
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: ST_TO_ADDR
// un = CreateHuman ;
5119: LD_ADDR_VAR 0 3
5123: PUSH
5124: CALL_OW 44
5128: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5129: LD_VAR 0 3
5133: PPUSH
5134: LD_INT 28
5136: PPUSH
5137: LD_INT 1
5139: PPUSH
5140: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5144: LD_VAR 0 3
5148: PPUSH
5149: CALL_OW 87
// wait ( 0 0$1 ) ;
5153: LD_INT 35
5155: PPUSH
5156: CALL_OW 67
// DialogueOn ;
5160: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5164: LD_VAR 0 3
5168: PPUSH
5169: LD_STRING D4-Sol1-5
5171: PPUSH
5172: CALL_OW 88
// DialogueOff ;
5176: CALL_OW 7
// tempCharles = un ;
5180: LD_ADDR_EXP 13
5184: PUSH
5185: LD_VAR 0 3
5189: ST_TO_ADDR
// end ; if number = 7 then
5190: LD_VAR 0 1
5194: PUSH
5195: LD_INT 7
5197: EQUAL
5198: IFFALSE 5448
// begin hc_class := 1 ;
5200: LD_ADDR_OWVAR 28
5204: PUSH
5205: LD_INT 1
5207: ST_TO_ADDR
// hc_sex := sex_female ;
5208: LD_ADDR_OWVAR 27
5212: PUSH
5213: LD_INT 2
5215: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5216: LD_ADDR_OWVAR 33
5220: PUSH
5221: LD_STRING AmGalRemake
5223: ST_TO_ADDR
// hc_face_number := 2 ;
5224: LD_ADDR_OWVAR 34
5228: PUSH
5229: LD_INT 2
5231: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5232: LD_ADDR_OWVAR 26
5236: PUSH
5237: LD_STRING Rebecca Macdonald
5239: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5240: LD_ADDR_OWVAR 29
5244: PUSH
5245: LD_INT 10
5247: PUSH
5248: LD_INT 10
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5255: LD_ADDR_OWVAR 30
5259: PUSH
5260: LD_INT 1
5262: PUSH
5263: LD_INT 0
5265: PUSH
5266: LD_INT 0
5268: PUSH
5269: LD_INT 1
5271: PUSH
5272: EMPTY
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5278: LD_ADDR_OWVAR 31
5282: PUSH
5283: LD_INT 1
5285: PUSH
5286: LD_INT 0
5288: PUSH
5289: LD_INT 0
5291: PUSH
5292: LD_INT 1
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: ST_TO_ADDR
// un = CreateHuman ;
5301: LD_ADDR_VAR 0 3
5305: PUSH
5306: CALL_OW 44
5310: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5311: LD_VAR 0 3
5315: PPUSH
5316: LD_INT 29
5318: PPUSH
5319: LD_INT 1
5321: PPUSH
5322: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5326: LD_VAR 0 3
5330: PPUSH
5331: CALL_OW 87
// wait ( 0 0$1 ) ;
5335: LD_INT 35
5337: PPUSH
5338: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5342: LD_INT 30
5344: PPUSH
5345: LD_INT 22
5347: PUSH
5348: LD_INT 3
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: PPUSH
5355: CALL_OW 70
5359: IFFALSE 5448
// begin DialogueOn ;
5361: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5365: LD_VAR 0 3
5369: PPUSH
5370: CALL_OW 250
5374: PPUSH
5375: LD_VAR 0 3
5379: PPUSH
5380: CALL_OW 251
5384: PPUSH
5385: LD_INT 1
5387: PPUSH
5388: LD_INT 15
5390: NEG
5391: PPUSH
5392: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5396: LD_VAR 0 3
5400: PPUSH
5401: CALL_OW 250
5405: PPUSH
5406: LD_VAR 0 3
5410: PPUSH
5411: CALL_OW 251
5415: PPUSH
5416: LD_INT 1
5418: PPUSH
5419: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5423: LD_VAR 0 3
5427: PPUSH
5428: LD_STRING D11a-FSol2-1
5430: PPUSH
5431: CALL_OW 88
// ComCrawl ( un ) ;
5435: LD_VAR 0 3
5439: PPUSH
5440: CALL_OW 137
// DialogueOff ;
5444: CALL_OW 7
// end ; end ; if number = 8 then
5448: LD_VAR 0 1
5452: PUSH
5453: LD_INT 8
5455: EQUAL
5456: IFFALSE 5612
// begin hc_class := 1 ;
5458: LD_ADDR_OWVAR 28
5462: PUSH
5463: LD_INT 1
5465: ST_TO_ADDR
// hc_sex := sex_female ;
5466: LD_ADDR_OWVAR 27
5470: PUSH
5471: LD_INT 2
5473: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5474: LD_ADDR_OWVAR 33
5478: PUSH
5479: LD_STRING SecondCharsGal
5481: ST_TO_ADDR
// hc_face_number := 42 ;
5482: LD_ADDR_OWVAR 34
5486: PUSH
5487: LD_INT 42
5489: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5490: LD_ADDR_OWVAR 26
5494: PUSH
5495: LD_STRING Margherite Simpson
5497: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5498: LD_ADDR_OWVAR 29
5502: PUSH
5503: LD_INT 12
5505: PUSH
5506: LD_INT 10
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5513: LD_ADDR_OWVAR 30
5517: PUSH
5518: LD_INT 1
5520: PUSH
5521: LD_INT 2
5523: PUSH
5524: LD_INT 0
5526: PUSH
5527: LD_INT 0
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5536: LD_ADDR_OWVAR 31
5540: PUSH
5541: LD_INT 1
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: LD_INT 0
5549: PUSH
5550: LD_INT 1
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: ST_TO_ADDR
// un = CreateHuman ;
5559: LD_ADDR_VAR 0 3
5563: PUSH
5564: CALL_OW 44
5568: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5569: LD_VAR 0 3
5573: PPUSH
5574: LD_INT 33
5576: PPUSH
5577: LD_INT 1
5579: PPUSH
5580: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5584: LD_VAR 0 3
5588: PPUSH
5589: CALL_OW 87
// wait ( 0 0$1 ) ;
5593: LD_INT 35
5595: PPUSH
5596: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5600: LD_VAR 0 3
5604: PPUSH
5605: LD_STRING D11e-FSol4-1
5607: PPUSH
5608: CALL_OW 88
// end ; ignoreTarget := ignoreTarget union un ;
5612: LD_ADDR_EXP 45
5616: PUSH
5617: LD_EXP 45
5621: PUSH
5622: LD_VAR 0 3
5626: UNION
5627: ST_TO_ADDR
// arrivals := arrivals union un ;
5628: LD_ADDR_EXP 46
5632: PUSH
5633: LD_EXP 46
5637: PUSH
5638: LD_VAR 0 3
5642: UNION
5643: ST_TO_ADDR
// end ;
5644: LD_VAR 0 2
5648: RET
// every 0 0$1 do var i ;
5649: GO 5651
5651: DISABLE
5652: LD_INT 0
5654: PPUSH
// begin enable ;
5655: ENABLE
// if not ignoreTarget then
5656: LD_EXP 45
5660: NOT
5661: IFFALSE 5665
// exit ;
5663: GO 5746
// for i in ignoreTarget do
5665: LD_ADDR_VAR 0 1
5669: PUSH
5670: LD_EXP 45
5674: PUSH
5675: FOR_IN
5676: IFFALSE 5744
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5678: LD_INT 22
5680: PUSH
5681: LD_INT 1
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: PUSH
5688: LD_INT 91
5690: PUSH
5691: LD_VAR 0 1
5695: PUSH
5696: LD_INT 10
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: PUSH
5704: EMPTY
5705: LIST
5706: LIST
5707: PPUSH
5708: CALL_OW 69
5712: PUSH
5713: LD_EXP 45
5717: DIFF
5718: PUSH
5719: LD_INT 1
5721: GREATER
5722: IFFALSE 5742
// begin ignoreTarget := ignoreTarget diff i ;
5724: LD_ADDR_EXP 45
5728: PUSH
5729: LD_EXP 45
5733: PUSH
5734: LD_VAR 0 1
5738: DIFF
5739: ST_TO_ADDR
// break ;
5740: GO 5744
// end ;
5742: GO 5675
5744: POP
5745: POP
// end ; end_of_file
5746: PPOPN 1
5748: END
// export function PrepareRussian ; var i ; begin
5749: LD_INT 0
5751: PPUSH
5752: PPUSH
// if Difficulty < 3 then
5753: LD_OWVAR 67
5757: PUSH
5758: LD_INT 3
5760: LESS
5761: IFFALSE 5778
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5763: LD_INT 130
5765: PPUSH
5766: LD_INT 81
5768: PPUSH
5769: CALL_OW 428
5773: PPUSH
5774: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5778: LD_INT 3
5780: PPUSH
5781: LD_INT 3
5783: PPUSH
5784: LD_INT 2
5786: PPUSH
5787: LD_EXP 34
5791: PPUSH
5792: LD_EXP 35
5796: PPUSH
5797: CALL_OW 12
5801: PPUSH
5802: LD_INT 2
5804: PPUSH
5805: LD_INT 4
5807: PPUSH
5808: CALL 6343 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5812: LD_INT 3
5814: PPUSH
5815: LD_INT 3
5817: PPUSH
5818: LD_INT 8
5820: PPUSH
5821: LD_EXP 34
5825: PPUSH
5826: LD_EXP 35
5830: PPUSH
5831: CALL_OW 12
5835: PPUSH
5836: LD_INT 1
5838: PPUSH
5839: LD_INT 4
5841: PPUSH
5842: CALL 6343 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5846: LD_INT 3
5848: PPUSH
5849: LD_INT 3
5851: PPUSH
5852: LD_INT 67
5854: PPUSH
5855: LD_EXP 34
5859: PPUSH
5860: LD_EXP 35
5864: PPUSH
5865: CALL_OW 12
5869: PPUSH
5870: LD_INT 1
5872: PPUSH
5873: LD_INT 2
5875: PPUSH
5876: CALL 6343 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5880: LD_INT 3
5882: PPUSH
5883: LD_INT 3
5885: PPUSH
5886: LD_INT 21
5888: PPUSH
5889: LD_EXP 34
5893: PPUSH
5894: LD_EXP 35
5898: PPUSH
5899: CALL_OW 12
5903: PPUSH
5904: LD_INT 3
5906: PPUSH
5907: LD_INT 6
5909: PPUSH
5910: CALL 6343 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5914: LD_INT 3
5916: PPUSH
5917: LD_INT 3
5919: PPUSH
5920: LD_INT 17
5922: PPUSH
5923: LD_EXP 34
5927: PPUSH
5928: LD_EXP 35
5932: PPUSH
5933: CALL_OW 12
5937: PPUSH
5938: LD_INT 3
5940: PPUSH
5941: LD_INT 6
5943: PPUSH
5944: CALL 6343 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5948: LD_INT 3
5950: PPUSH
5951: LD_INT 3
5953: PPUSH
5954: LD_INT 32
5956: PPUSH
5957: LD_EXP 34
5961: PPUSH
5962: LD_EXP 35
5966: PPUSH
5967: CALL_OW 12
5971: PPUSH
5972: LD_INT 4
5974: PPUSH
5975: LD_INT 2
5977: PPUSH
5978: CALL 6343 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5982: LD_ADDR_VAR 0 2
5986: PUSH
5987: LD_INT 22
5989: PUSH
5990: LD_INT 3
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 21
5999: PUSH
6000: LD_INT 3
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: LD_INT 30
6009: PUSH
6010: LD_INT 32
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: LIST
6021: PPUSH
6022: CALL_OW 69
6026: PUSH
6027: FOR_IN
6028: IFFALSE 6068
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6030: LD_INT 3
6032: PPUSH
6033: LD_INT 3
6035: PPUSH
6036: LD_VAR 0 2
6040: PPUSH
6041: LD_EXP 34
6045: PPUSH
6046: LD_EXP 35
6050: PPUSH
6051: CALL_OW 12
6055: PPUSH
6056: LD_INT 1
6058: PPUSH
6059: LD_INT 1
6061: PPUSH
6062: CALL 6343 0 6
6066: GO 6027
6068: POP
6069: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
6070: LD_ADDR_VAR 0 2
6074: PUSH
6075: LD_INT 22
6077: PUSH
6078: LD_INT 3
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 21
6087: PUSH
6088: LD_INT 3
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: LD_INT 30
6097: PUSH
6098: LD_INT 31
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: PPUSH
6110: CALL_OW 69
6114: PUSH
6115: FOR_IN
6116: IFFALSE 6144
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6118: LD_EXP 34
6122: PPUSH
6123: LD_EXP 35
6127: PPUSH
6128: CALL_OW 12
6132: PPUSH
6133: LD_VAR 0 2
6137: PPUSH
6138: CALL 6453 0 2
6142: GO 6115
6144: POP
6145: POP
// end ; end_of_file
6146: LD_VAR 0 1
6150: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6151: LD_INT 0
6153: PPUSH
6154: PPUSH
// if exist_mode then
6155: LD_VAR 0 2
6159: IFFALSE 6184
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
6161: LD_ADDR_VAR 0 4
6165: PUSH
6166: LD_EXP 44
6170: PUSH
6171: LD_VAR 0 1
6175: STR
6176: PPUSH
6177: CALL_OW 34
6181: ST_TO_ADDR
// end else
6182: GO 6199
// begin unit := NewCharacter ( ident ) ;
6184: LD_ADDR_VAR 0 4
6188: PUSH
6189: LD_VAR 0 1
6193: PPUSH
6194: CALL_OW 25
6198: ST_TO_ADDR
// end ; result := unit ;
6199: LD_ADDR_VAR 0 3
6203: PUSH
6204: LD_VAR 0 4
6208: ST_TO_ADDR
// end ;
6209: LD_VAR 0 3
6213: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6214: LD_INT 0
6216: PPUSH
6217: PPUSH
6218: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6219: LD_ADDR_VAR 0 6
6223: PUSH
6224: LD_VAR 0 1
6228: PUSH
6229: LD_INT 1
6231: PPUSH
6232: LD_VAR 0 1
6236: PPUSH
6237: CALL_OW 12
6241: ARRAY
6242: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6243: LD_VAR 0 6
6247: PPUSH
6248: CALL_OW 258
6252: PUSH
6253: LD_INT 1
6255: EQUAL
6256: IFFALSE 6274
// Say ( speaker , dialogMID ) else
6258: LD_VAR 0 6
6262: PPUSH
6263: LD_VAR 0 2
6267: PPUSH
6268: CALL_OW 88
6272: GO 6288
// Say ( speaker , dialogFID ) ;
6274: LD_VAR 0 6
6278: PPUSH
6279: LD_VAR 0 3
6283: PPUSH
6284: CALL_OW 88
// result := speaker ;
6288: LD_ADDR_VAR 0 4
6292: PUSH
6293: LD_VAR 0 6
6297: ST_TO_ADDR
// end ;
6298: LD_VAR 0 4
6302: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6303: LD_INT 0
6305: PPUSH
6306: PPUSH
// for i in charactersList do
6307: LD_ADDR_VAR 0 4
6311: PUSH
6312: LD_VAR 0 1
6316: PUSH
6317: FOR_IN
6318: IFFALSE 6336
// SaveCharacters ( i , ident ) ;
6320: LD_VAR 0 4
6324: PPUSH
6325: LD_VAR 0 2
6329: PPUSH
6330: CALL_OW 38
6334: GO 6317
6336: POP
6337: POP
// end ;
6338: LD_VAR 0 3
6342: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6343: LD_INT 0
6345: PPUSH
6346: PPUSH
6347: PPUSH
6348: PPUSH
// for i = 1 to count do
6349: LD_ADDR_VAR 0 8
6353: PUSH
6354: DOUBLE
6355: LD_INT 1
6357: DEC
6358: ST_TO_ADDR
6359: LD_VAR 0 6
6363: PUSH
6364: FOR_TO
6365: IFFALSE 6446
// begin uc_side = side ;
6367: LD_ADDR_OWVAR 20
6371: PUSH
6372: LD_VAR 0 1
6376: ST_TO_ADDR
// uc_nation = nation ;
6377: LD_ADDR_OWVAR 21
6381: PUSH
6382: LD_VAR 0 2
6386: ST_TO_ADDR
// hc_gallery =  ;
6387: LD_ADDR_OWVAR 33
6391: PUSH
6392: LD_STRING 
6394: ST_TO_ADDR
// hc_name =  ;
6395: LD_ADDR_OWVAR 26
6399: PUSH
6400: LD_STRING 
6402: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6403: LD_INT 0
6405: PPUSH
6406: LD_VAR 0 5
6410: PPUSH
6411: LD_VAR 0 4
6415: PPUSH
6416: CALL_OW 380
// un = CreateHuman ;
6420: LD_ADDR_VAR 0 10
6424: PUSH
6425: CALL_OW 44
6429: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6430: LD_VAR 0 10
6434: PPUSH
6435: LD_VAR 0 3
6439: PPUSH
6440: CALL_OW 52
// end ;
6444: GO 6364
6446: POP
6447: POP
// end ;
6448: LD_VAR 0 7
6452: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6453: LD_INT 0
6455: PPUSH
6456: PPUSH
6457: PPUSH
// uc_side := GetSide ( b ) ;
6458: LD_ADDR_OWVAR 20
6462: PUSH
6463: LD_VAR 0 2
6467: PPUSH
6468: CALL_OW 255
6472: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6473: LD_ADDR_OWVAR 21
6477: PUSH
6478: LD_VAR 0 2
6482: PPUSH
6483: CALL_OW 248
6487: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6488: LD_INT 0
6490: PPUSH
6491: LD_INT 1
6493: PPUSH
6494: LD_VAR 0 1
6498: PPUSH
6499: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6503: LD_ADDR_VAR 0 5
6507: PUSH
6508: LD_VAR 0 2
6512: PPUSH
6513: CALL_OW 254
6517: PUSH
6518: LD_INT 3
6520: MINUS
6521: ST_TO_ADDR
// if dir < 0 then
6522: LD_VAR 0 5
6526: PUSH
6527: LD_INT 0
6529: LESS
6530: IFFALSE 6546
// dir := 6 + dir ;
6532: LD_ADDR_VAR 0 5
6536: PUSH
6537: LD_INT 6
6539: PUSH
6540: LD_VAR 0 5
6544: PLUS
6545: ST_TO_ADDR
// un := CreateHuman ;
6546: LD_ADDR_VAR 0 4
6550: PUSH
6551: CALL_OW 44
6555: ST_TO_ADDR
// SetDir ( un , dir ) ;
6556: LD_VAR 0 4
6560: PPUSH
6561: LD_VAR 0 5
6565: PPUSH
6566: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6570: LD_VAR 0 4
6574: PPUSH
6575: LD_VAR 0 2
6579: PPUSH
6580: CALL_OW 52
// end ;
6584: LD_VAR 0 3
6588: RET
// export function PrepareDifficulty ; begin
6589: LD_INT 0
6591: PPUSH
// if Difficulty = 1 then
6592: LD_OWVAR 67
6596: PUSH
6597: LD_INT 1
6599: EQUAL
6600: IFFALSE 6618
// begin RuSolMinLevel = 2 ;
6602: LD_ADDR_EXP 34
6606: PUSH
6607: LD_INT 2
6609: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6610: LD_ADDR_EXP 35
6614: PUSH
6615: LD_INT 3
6617: ST_TO_ADDR
// end ; if Difficulty = 2 then
6618: LD_OWVAR 67
6622: PUSH
6623: LD_INT 2
6625: EQUAL
6626: IFFALSE 6644
// begin RuSolMinLevel = 3 ;
6628: LD_ADDR_EXP 34
6632: PUSH
6633: LD_INT 3
6635: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6636: LD_ADDR_EXP 35
6640: PUSH
6641: LD_INT 5
6643: ST_TO_ADDR
// end ; if Difficulty = 3 then
6644: LD_OWVAR 67
6648: PUSH
6649: LD_INT 3
6651: EQUAL
6652: IFFALSE 6670
// begin RuSolMinLevel = 4 ;
6654: LD_ADDR_EXP 34
6658: PUSH
6659: LD_INT 4
6661: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6662: LD_ADDR_EXP 35
6666: PUSH
6667: LD_INT 6
6669: ST_TO_ADDR
// end ; end ;
6670: LD_VAR 0 1
6674: RET
// export function ShowQuery1 ; begin
6675: LD_INT 0
6677: PPUSH
// case query ( QKill ) of 1 :
6678: LD_STRING QKill
6680: PPUSH
6681: CALL_OW 97
6685: PUSH
6686: LD_INT 1
6688: DOUBLE
6689: EQUAL
6690: IFTRUE 6694
6692: GO 6705
6694: POP
// begin result = 1 ;
6695: LD_ADDR_VAR 0 1
6699: PUSH
6700: LD_INT 1
6702: ST_TO_ADDR
// end ; 2 :
6703: GO 6744
6705: LD_INT 2
6707: DOUBLE
6708: EQUAL
6709: IFTRUE 6713
6711: GO 6724
6713: POP
// begin result = 2 ;
6714: LD_ADDR_VAR 0 1
6718: PUSH
6719: LD_INT 2
6721: ST_TO_ADDR
// end ; 3 :
6722: GO 6744
6724: LD_INT 3
6726: DOUBLE
6727: EQUAL
6728: IFTRUE 6732
6730: GO 6743
6732: POP
// begin result = 3 ;
6733: LD_ADDR_VAR 0 1
6737: PUSH
6738: LD_INT 3
6740: ST_TO_ADDR
// end ; end ;
6741: GO 6744
6743: POP
// end ;
6744: LD_VAR 0 1
6748: RET
// export function ShowQuery2 ; begin
6749: LD_INT 0
6751: PPUSH
// case query ( QKill2 ) of 1 :
6752: LD_STRING QKill2
6754: PPUSH
6755: CALL_OW 97
6759: PUSH
6760: LD_INT 1
6762: DOUBLE
6763: EQUAL
6764: IFTRUE 6768
6766: GO 6779
6768: POP
// begin result = 1 ;
6769: LD_ADDR_VAR 0 1
6773: PUSH
6774: LD_INT 1
6776: ST_TO_ADDR
// end ; 2 :
6777: GO 6799
6779: LD_INT 2
6781: DOUBLE
6782: EQUAL
6783: IFTRUE 6787
6785: GO 6798
6787: POP
// begin result = 2 ;
6788: LD_ADDR_VAR 0 1
6792: PUSH
6793: LD_INT 2
6795: ST_TO_ADDR
// end ; end ;
6796: GO 6799
6798: POP
// end ;
6799: LD_VAR 0 1
6803: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6804: LD_INT 0
6806: PPUSH
6807: PPUSH
6808: PPUSH
6809: PPUSH
6810: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6811: LD_ADDR_VAR 0 8
6815: PUSH
6816: LD_INT 48
6818: PUSH
6819: LD_INT 49
6821: PUSH
6822: LD_INT 50
6824: PUSH
6825: LD_INT 20
6827: PUSH
6828: LD_INT 1
6830: PUSH
6831: LD_INT 51
6833: PUSH
6834: LD_INT 52
6836: PUSH
6837: LD_INT 69
6839: PUSH
6840: LD_INT 39
6842: PUSH
6843: LD_INT 34
6845: PUSH
6846: LD_INT 40
6848: PUSH
6849: LD_INT 53
6851: PUSH
6852: LD_INT 71
6854: PUSH
6855: LD_INT 57
6857: PUSH
6858: LD_INT 58
6860: PUSH
6861: LD_INT 44
6863: PUSH
6864: LD_INT 32
6866: PUSH
6867: LD_INT 27
6869: PUSH
6870: LD_INT 23
6872: PUSH
6873: LD_INT 33
6875: PUSH
6876: LD_INT 59
6878: PUSH
6879: LD_INT 54
6881: PUSH
6882: LD_INT 55
6884: PUSH
6885: LD_INT 56
6887: PUSH
6888: LD_INT 63
6890: PUSH
6891: LD_INT 64
6893: PUSH
6894: LD_INT 65
6896: PUSH
6897: LD_INT 30
6899: PUSH
6900: LD_INT 31
6902: PUSH
6903: LD_INT 21
6905: PUSH
6906: LD_INT 22
6908: PUSH
6909: LD_INT 25
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6946: LD_ADDR_VAR 0 5
6950: PUSH
6951: DOUBLE
6952: LD_INT 1
6954: DEC
6955: ST_TO_ADDR
6956: LD_VAR 0 8
6960: PUSH
6961: FOR_TO
6962: IFFALSE 7038
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6964: LD_VAR 0 8
6968: PUSH
6969: LD_VAR 0 5
6973: ARRAY
6974: PPUSH
6975: LD_VAR 0 1
6979: PPUSH
6980: CALL_OW 321
6984: PUSH
6985: LD_INT 1
6987: EQUAL
6988: PUSH
6989: LD_VAR 0 8
6993: PUSH
6994: LD_VAR 0 5
6998: ARRAY
6999: PPUSH
7000: LD_VAR 0 3
7004: PPUSH
7005: CALL_OW 482
7009: PUSH
7010: LD_INT 1
7012: EQUAL
7013: AND
7014: IFFALSE 7036
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
7016: LD_VAR 0 2
7020: PPUSH
7021: LD_VAR 0 8
7025: PUSH
7026: LD_VAR 0 5
7030: ARRAY
7031: PPUSH
7032: CALL_OW 184
7036: GO 6961
7038: POP
7039: POP
// end ;
7040: LD_VAR 0 4
7044: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7045: LD_INT 0
7047: PPUSH
7048: PPUSH
7049: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7050: LD_INT 22
7052: PUSH
7053: LD_VAR 0 1
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 21
7064: PUSH
7065: LD_INT 2
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PPUSH
7076: CALL_OW 69
7080: PUSH
7081: LD_VAR 0 3
7085: LESSEQUAL
7086: IFFALSE 7194
// begin for i = 1 to vehCount do
7088: LD_ADDR_VAR 0 9
7092: PUSH
7093: DOUBLE
7094: LD_INT 1
7096: DEC
7097: ST_TO_ADDR
7098: LD_VAR 0 3
7102: PUSH
7103: FOR_TO
7104: IFFALSE 7192
// begin weapon = weaponTab [ i ] ;
7106: LD_ADDR_VAR 0 10
7110: PUSH
7111: LD_VAR 0 4
7115: PUSH
7116: LD_VAR 0 9
7120: ARRAY
7121: ST_TO_ADDR
// if weapon = 46 then
7122: LD_VAR 0 10
7126: PUSH
7127: LD_INT 46
7129: EQUAL
7130: IFFALSE 7161
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
7132: LD_VAR 0 2
7136: PPUSH
7137: LD_INT 24
7139: PPUSH
7140: LD_VAR 0 5
7144: PPUSH
7145: LD_VAR 0 6
7149: PPUSH
7150: LD_VAR 0 10
7154: PPUSH
7155: CALL_OW 185
// end else
7159: GO 7190
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7161: LD_VAR 0 2
7165: PPUSH
7166: LD_VAR 0 7
7170: PPUSH
7171: LD_VAR 0 5
7175: PPUSH
7176: LD_VAR 0 6
7180: PPUSH
7181: LD_VAR 0 10
7185: PPUSH
7186: CALL_OW 185
// end ; end ;
7190: GO 7103
7192: POP
7193: POP
// end ; end ;
7194: LD_VAR 0 8
7198: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7199: LD_INT 0
7201: PPUSH
7202: PPUSH
7203: PPUSH
7204: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7205: LD_ADDR_VAR 0 8
7209: PUSH
7210: LD_INT 22
7212: PUSH
7213: LD_VAR 0 1
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 21
7224: PUSH
7225: LD_INT 2
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: LD_INT 3
7234: PUSH
7235: LD_INT 24
7237: PUSH
7238: LD_INT 650
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: LIST
7253: PPUSH
7254: CALL_OW 69
7258: ST_TO_ADDR
// if damageVehicles > 0 then
7259: LD_VAR 0 8
7263: PUSH
7264: LD_INT 0
7266: GREATER
7267: IFFALSE 7288
// ComMoveXY ( damageVehicles , repX , repY ) ;
7269: LD_VAR 0 8
7273: PPUSH
7274: LD_VAR 0 3
7278: PPUSH
7279: LD_VAR 0 4
7283: PPUSH
7284: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7288: LD_VAR 0 8
7292: PPUSH
7293: LD_INT 95
7295: PUSH
7296: LD_VAR 0 2
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: LD_INT 3
7307: PUSH
7308: LD_INT 58
7310: PUSH
7311: EMPTY
7312: LIST
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PPUSH
7322: CALL_OW 72
7326: PUSH
7327: LD_INT 0
7329: GREATER
7330: IFFALSE 7397
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7332: LD_ADDR_VAR 0 6
7336: PUSH
7337: LD_VAR 0 8
7341: PPUSH
7342: LD_INT 95
7344: PUSH
7345: LD_VAR 0 2
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 3
7356: PUSH
7357: LD_INT 58
7359: PUSH
7360: EMPTY
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 72
7375: PUSH
7376: FOR_IN
7377: IFFALSE 7395
// ComExitVehicle ( UnitsInside ( i ) ) ;
7379: LD_VAR 0 6
7383: PPUSH
7384: CALL_OW 313
7388: PPUSH
7389: CALL_OW 121
7393: GO 7376
7395: POP
7396: POP
// end ;
7397: LD_VAR 0 5
7401: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7402: LD_INT 0
7404: PPUSH
7405: PPUSH
7406: PPUSH
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7411: LD_ADDR_VAR 0 8
7415: PUSH
7416: LD_INT 22
7418: PUSH
7419: LD_VAR 0 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 21
7430: PUSH
7431: LD_INT 2
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: LD_INT 24
7440: PUSH
7441: LD_INT 660
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 3
7450: PUSH
7451: LD_INT 58
7453: PUSH
7454: EMPTY
7455: LIST
7456: PUSH
7457: LD_INT 2
7459: PUSH
7460: LD_INT 34
7462: PUSH
7463: LD_INT 43
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: PUSH
7470: LD_INT 34
7472: PUSH
7473: LD_INT 44
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 34
7482: PUSH
7483: LD_INT 46
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: LIST
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: PPUSH
7507: CALL_OW 69
7511: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7512: LD_INT 22
7514: PUSH
7515: LD_VAR 0 1
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PUSH
7524: LD_INT 21
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 24
7536: PUSH
7537: LD_INT 1000
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: LD_INT 3
7546: PUSH
7547: LD_INT 58
7549: PUSH
7550: EMPTY
7551: LIST
7552: PUSH
7553: LD_INT 2
7555: PUSH
7556: LD_INT 34
7558: PUSH
7559: LD_INT 43
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 34
7568: PUSH
7569: LD_INT 44
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: LD_INT 34
7578: PUSH
7579: LD_INT 46
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: PPUSH
7603: CALL_OW 69
7607: PUSH
7608: LD_INT 5
7610: PUSH
7611: LD_INT 6
7613: PUSH
7614: LD_INT 6
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: LIST
7621: PUSH
7622: LD_OWVAR 67
7626: ARRAY
7627: EQUAL
7628: IFFALSE 7884
// if seeEnemy = 0 then
7630: LD_VAR 0 11
7634: PUSH
7635: LD_INT 0
7637: EQUAL
7638: IFFALSE 7884
// repeat wait ( 0 0$1 ) ;
7640: LD_INT 35
7642: PPUSH
7643: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7647: LD_ADDR_VAR 0 8
7651: PUSH
7652: LD_INT 22
7654: PUSH
7655: LD_VAR 0 1
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 21
7666: PUSH
7667: LD_INT 2
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 24
7676: PUSH
7677: LD_INT 660
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: LD_INT 3
7686: PUSH
7687: LD_INT 58
7689: PUSH
7690: EMPTY
7691: LIST
7692: PUSH
7693: LD_INT 2
7695: PUSH
7696: LD_INT 34
7698: PUSH
7699: LD_INT 43
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PUSH
7706: LD_INT 34
7708: PUSH
7709: LD_INT 44
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PUSH
7716: LD_INT 34
7718: PUSH
7719: LD_INT 46
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: PPUSH
7743: CALL_OW 69
7747: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7748: LD_INT 22
7750: PUSH
7751: LD_VAR 0 1
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 95
7762: PUSH
7763: LD_VAR 0 2
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: NOT
7781: PUSH
7782: LD_VAR 0 11
7786: PUSH
7787: LD_INT 0
7789: EQUAL
7790: AND
7791: IFFALSE 7846
// for i := 1 to wayX do
7793: LD_ADDR_VAR 0 6
7797: PUSH
7798: DOUBLE
7799: LD_INT 1
7801: DEC
7802: ST_TO_ADDR
7803: LD_VAR 0 3
7807: PUSH
7808: FOR_TO
7809: IFFALSE 7844
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7811: LD_VAR 0 8
7815: PPUSH
7816: LD_VAR 0 3
7820: PUSH
7821: LD_VAR 0 6
7825: ARRAY
7826: PPUSH
7827: LD_VAR 0 4
7831: PUSH
7832: LD_VAR 0 6
7836: ARRAY
7837: PPUSH
7838: CALL_OW 114
7842: GO 7808
7844: POP
7845: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7846: LD_INT 22
7848: PUSH
7849: LD_VAR 0 1
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: LD_INT 95
7860: PUSH
7861: LD_VAR 0 2
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PPUSH
7874: CALL_OW 69
7878: PUSH
7879: LD_INT 0
7881: GREATER
7882: IFFALSE 7640
// seeEnemy = 1 ;
7884: LD_ADDR_VAR 0 11
7888: PUSH
7889: LD_INT 1
7891: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7892: LD_INT 35
7894: PPUSH
7895: CALL_OW 67
// for j in vehiclesOK do
7899: LD_ADDR_VAR 0 7
7903: PUSH
7904: LD_VAR 0 8
7908: PUSH
7909: FOR_IN
7910: IFFALSE 8123
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7912: LD_ADDR_VAR 0 9
7916: PUSH
7917: LD_INT 81
7919: PUSH
7920: LD_VAR 0 1
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: LD_INT 101
7931: PUSH
7932: LD_INT 1
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PPUSH
7943: CALL_OW 69
7947: PUSH
7948: LD_EXP 45
7952: DIFF
7953: PPUSH
7954: LD_VAR 0 7
7958: PPUSH
7959: CALL_OW 74
7963: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7964: LD_ADDR_VAR 0 10
7968: PUSH
7969: LD_INT 81
7971: PUSH
7972: LD_VAR 0 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 101
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 2
7993: PUSH
7994: LD_INT 59
7996: PUSH
7997: EMPTY
7998: LIST
7999: PUSH
8000: LD_INT 21
8002: PUSH
8003: LD_INT 1
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: PUSH
8010: LD_INT 21
8012: PUSH
8013: LD_INT 2
8015: PUSH
8016: EMPTY
8017: LIST
8018: LIST
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: LIST
8030: PUSH
8031: EMPTY
8032: LIST
8033: PPUSH
8034: CALL_OW 69
8038: PUSH
8039: LD_EXP 45
8043: DIFF
8044: PPUSH
8045: LD_VAR 0 7
8049: PPUSH
8050: CALL_OW 74
8054: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
8055: LD_VAR 0 7
8059: PPUSH
8060: LD_VAR 0 9
8064: PPUSH
8065: CALL_OW 296
8069: PUSH
8070: LD_INT 8
8072: PLUS
8073: PUSH
8074: LD_VAR 0 7
8078: PPUSH
8079: LD_VAR 0 10
8083: PPUSH
8084: CALL_OW 296
8088: LESS
8089: IFFALSE 8107
// ComAttackUnit ( j , target1 ) else
8091: LD_VAR 0 7
8095: PPUSH
8096: LD_VAR 0 9
8100: PPUSH
8101: CALL_OW 115
8105: GO 8121
// ComAttackUnit ( j , target2 ) ;
8107: LD_VAR 0 7
8111: PPUSH
8112: LD_VAR 0 10
8116: PPUSH
8117: CALL_OW 115
// end ;
8121: GO 7909
8123: POP
8124: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
8125: LD_INT 22
8127: PUSH
8128: LD_VAR 0 1
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 21
8139: PUSH
8140: LD_INT 2
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PUSH
8147: LD_INT 24
8149: PUSH
8150: LD_INT 1000
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: LD_INT 3
8159: PUSH
8160: LD_INT 58
8162: PUSH
8163: EMPTY
8164: LIST
8165: PUSH
8166: LD_INT 2
8168: PUSH
8169: LD_INT 34
8171: PUSH
8172: LD_INT 43
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: PUSH
8179: LD_INT 34
8181: PUSH
8182: LD_INT 44
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PUSH
8189: LD_INT 34
8191: PUSH
8192: LD_INT 46
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: PPUSH
8216: CALL_OW 69
8220: PUSH
8221: LD_INT 0
8223: EQUAL
8224: IFFALSE 7892
// seeEnemy = 0 ;
8226: LD_ADDR_VAR 0 11
8230: PUSH
8231: LD_INT 0
8233: ST_TO_ADDR
// end ;
8234: LD_VAR 0 5
8238: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8239: LD_INT 0
8241: PPUSH
8242: PPUSH
8243: PPUSH
8244: PPUSH
8245: PPUSH
8246: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8247: LD_ADDR_VAR 0 8
8251: PUSH
8252: LD_VAR 0 2
8256: PPUSH
8257: CALL_OW 313
8261: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8262: LD_ADDR_VAR 0 9
8266: PUSH
8267: LD_VAR 0 3
8271: PPUSH
8272: LD_INT 22
8274: PUSH
8275: LD_VAR 0 1
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 25
8286: PUSH
8287: LD_INT 2
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: LD_INT 24
8296: PUSH
8297: LD_INT 750
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: PUSH
8304: LD_INT 3
8306: PUSH
8307: LD_INT 54
8309: PUSH
8310: EMPTY
8311: LIST
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: PPUSH
8323: CALL_OW 70
8327: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8328: LD_ADDR_VAR 0 6
8332: PUSH
8333: LD_VAR 0 3
8337: PPUSH
8338: LD_INT 22
8340: PUSH
8341: LD_VAR 0 1
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PUSH
8350: LD_INT 21
8352: PUSH
8353: LD_INT 3
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: LD_INT 24
8365: PUSH
8366: LD_INT 1000
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: PUSH
8382: EMPTY
8383: LIST
8384: PPUSH
8385: CALL_OW 70
8389: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8390: LD_VAR 0 6
8394: NOT
8395: PUSH
8396: LD_INT 22
8398: PUSH
8399: LD_VAR 0 1
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: LD_INT 25
8410: PUSH
8411: LD_INT 2
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: LD_INT 24
8420: PUSH
8421: LD_INT 250
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: LIST
8432: PPUSH
8433: CALL_OW 69
8437: NOT
8438: AND
8439: IFFALSE 8443
// exit ;
8441: GO 8625
// if buildings_list > 0 and engineerOkInside then
8443: LD_VAR 0 6
8447: PUSH
8448: LD_INT 0
8450: GREATER
8451: PUSH
8452: LD_VAR 0 8
8456: AND
8457: IFFALSE 8468
// ComExitBuilding ( engineerOkInside ) ;
8459: LD_VAR 0 8
8463: PPUSH
8464: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8468: LD_VAR 0 6
8472: PUSH
8473: LD_INT 0
8475: GREATER
8476: PUSH
8477: LD_VAR 0 9
8481: PUSH
8482: LD_INT 0
8484: GREATER
8485: AND
8486: IFFALSE 8506
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8488: LD_VAR 0 9
8492: PPUSH
8493: LD_VAR 0 6
8497: PUSH
8498: LD_INT 1
8500: ARRAY
8501: PPUSH
8502: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8506: LD_VAR 0 6
8510: PUSH
8511: LD_INT 0
8513: EQUAL
8514: PUSH
8515: LD_VAR 0 4
8519: PUSH
8520: LD_INT 0
8522: EQUAL
8523: AND
8524: PUSH
8525: LD_VAR 0 9
8529: PUSH
8530: LD_INT 0
8532: GREATER
8533: AND
8534: IFFALSE 8550
// ComEnterUnit ( engineerOkOutside , building ) ;
8536: LD_VAR 0 9
8540: PPUSH
8541: LD_VAR 0 2
8545: PPUSH
8546: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8550: LD_VAR 0 9
8554: PUSH
8555: LD_INT 0
8557: GREATER
8558: PUSH
8559: LD_VAR 0 6
8563: PUSH
8564: LD_INT 0
8566: EQUAL
8567: AND
8568: PUSH
8569: LD_VAR 0 4
8573: PUSH
8574: LD_INT 0
8576: GREATER
8577: AND
8578: IFFALSE 8625
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8580: LD_VAR 0 9
8584: PPUSH
8585: LD_VAR 0 4
8589: PUSH
8590: LD_INT 1
8592: ARRAY
8593: PPUSH
8594: LD_VAR 0 4
8598: PUSH
8599: LD_INT 2
8601: ARRAY
8602: PPUSH
8603: LD_VAR 0 4
8607: PUSH
8608: LD_INT 3
8610: ARRAY
8611: PPUSH
8612: LD_VAR 0 4
8616: PUSH
8617: LD_INT 4
8619: ARRAY
8620: PPUSH
8621: CALL_OW 145
// end ;
8625: LD_VAR 0 5
8629: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8630: LD_INT 0
8632: PPUSH
8633: PPUSH
8634: PPUSH
8635: PPUSH
8636: PPUSH
8637: PPUSH
8638: PPUSH
8639: PPUSH
8640: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8641: LD_ADDR_VAR 0 6
8645: PUSH
8646: LD_INT 22
8648: PUSH
8649: LD_VAR 0 1
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: LD_INT 25
8660: PUSH
8661: LD_INT 4
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 23
8670: PUSH
8671: LD_INT 2
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 24
8680: PUSH
8681: LD_INT 251
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: PPUSH
8694: CALL_OW 69
8698: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8699: LD_ADDR_VAR 0 7
8703: PUSH
8704: LD_VAR 0 3
8708: PPUSH
8709: LD_INT 22
8711: PUSH
8712: LD_VAR 0 1
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PUSH
8721: LD_INT 23
8723: PUSH
8724: LD_INT 2
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 25
8733: PUSH
8734: LD_INT 4
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: LD_INT 50
8743: PUSH
8744: EMPTY
8745: LIST
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: PPUSH
8753: CALL_OW 70
8757: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8758: LD_ADDR_VAR 0 10
8762: PUSH
8763: LD_VAR 0 3
8767: PPUSH
8768: LD_INT 22
8770: PUSH
8771: LD_VAR 0 1
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PUSH
8780: LD_INT 21
8782: PUSH
8783: LD_INT 1
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: PUSH
8790: LD_INT 3
8792: PUSH
8793: LD_INT 25
8795: PUSH
8796: LD_INT 3
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PUSH
8807: LD_INT 3
8809: PUSH
8810: LD_INT 24
8812: PUSH
8813: LD_INT 750
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 70
8834: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8835: LD_ADDR_VAR 0 11
8839: PUSH
8840: LD_VAR 0 2
8844: PPUSH
8845: LD_INT 22
8847: PUSH
8848: LD_VAR 0 1
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: PUSH
8857: LD_INT 21
8859: PUSH
8860: LD_INT 1
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 3
8869: PUSH
8870: LD_INT 25
8872: PUSH
8873: LD_INT 3
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: PUSH
8884: LD_INT 3
8886: PUSH
8887: LD_INT 24
8889: PUSH
8890: LD_INT 1000
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PPUSH
8907: CALL_OW 70
8911: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8912: LD_VAR 0 10
8916: NOT
8917: PUSH
8918: LD_VAR 0 11
8922: NOT
8923: AND
8924: PUSH
8925: LD_VAR 0 6
8929: NOT
8930: AND
8931: IFFALSE 8935
// exit ;
8933: GO 9169
// if damageUnits > 0 and sci_list > 0 then
8935: LD_VAR 0 10
8939: PUSH
8940: LD_INT 0
8942: GREATER
8943: PUSH
8944: LD_VAR 0 6
8948: PUSH
8949: LD_INT 0
8951: GREATER
8952: AND
8953: IFFALSE 8969
// ComMoveToArea ( damageUnits , healArea ) ;
8955: LD_VAR 0 10
8959: PPUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8969: LD_VAR 0 11
8973: PUSH
8974: LD_INT 0
8976: GREATER
8977: PUSH
8978: LD_VAR 0 6
8982: PUSH
8983: LD_INT 0
8985: GREATER
8986: AND
8987: IFFALSE 8998
// ComExitBuilding ( sci_list ) ;
8989: LD_VAR 0 6
8993: PPUSH
8994: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8998: LD_VAR 0 11
9002: PUSH
9003: LD_INT 0
9005: GREATER
9006: PUSH
9007: LD_VAR 0 7
9011: PUSH
9012: LD_INT 0
9014: GREATER
9015: AND
9016: IFFALSE 9036
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9018: LD_VAR 0 7
9022: PPUSH
9023: LD_VAR 0 11
9027: PUSH
9028: LD_INT 1
9030: ARRAY
9031: PPUSH
9032: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
9036: LD_VAR 0 10
9040: PUSH
9041: LD_INT 0
9043: EQUAL
9044: PUSH
9045: LD_VAR 0 11
9049: PUSH
9050: LD_INT 0
9052: EQUAL
9053: AND
9054: PUSH
9055: LD_VAR 0 7
9059: PUSH
9060: LD_INT 0
9062: GREATER
9063: AND
9064: IFFALSE 9169
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9066: LD_ADDR_VAR 0 12
9070: PUSH
9071: LD_INT 22
9073: PUSH
9074: LD_VAR 0 1
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: LD_INT 21
9085: PUSH
9086: LD_INT 3
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: LD_INT 30
9095: PUSH
9096: LD_INT 8
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: LIST
9107: PPUSH
9108: CALL_OW 69
9112: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
9113: LD_ADDR_VAR 0 13
9117: PUSH
9118: LD_INT 1
9120: PPUSH
9121: LD_VAR 0 12
9125: PPUSH
9126: CALL_OW 12
9130: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9131: LD_VAR 0 7
9135: PPUSH
9136: LD_INT 3
9138: PUSH
9139: LD_INT 60
9141: PUSH
9142: EMPTY
9143: LIST
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PPUSH
9149: CALL_OW 72
9153: PPUSH
9154: LD_VAR 0 12
9158: PUSH
9159: LD_VAR 0 13
9163: ARRAY
9164: PPUSH
9165: CALL_OW 120
// end ; end ;
9169: LD_VAR 0 5
9173: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
9174: LD_INT 0
9176: PPUSH
9177: PPUSH
9178: PPUSH
9179: PPUSH
// tmpTab = [ ] ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: EMPTY
9186: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9187: LD_INT 22
9189: PUSH
9190: LD_VAR 0 1
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: LD_INT 30
9201: PUSH
9202: LD_INT 32
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: PPUSH
9213: CALL_OW 69
9217: PUSH
9218: LD_INT 0
9220: GREATER
9221: IFFALSE 9304
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9223: LD_ADDR_VAR 0 4
9227: PUSH
9228: LD_INT 22
9230: PUSH
9231: LD_VAR 0 1
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 30
9242: PUSH
9243: LD_INT 32
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: PPUSH
9254: CALL_OW 69
9258: PUSH
9259: FOR_IN
9260: IFFALSE 9302
// begin for j in UnitsInside ( i ) do
9262: LD_ADDR_VAR 0 5
9266: PUSH
9267: LD_VAR 0 4
9271: PPUSH
9272: CALL_OW 313
9276: PUSH
9277: FOR_IN
9278: IFFALSE 9298
// tmpTab = tmpTab ^ j ;
9280: LD_ADDR_VAR 0 6
9284: PUSH
9285: LD_VAR 0 6
9289: PUSH
9290: LD_VAR 0 5
9294: ADD
9295: ST_TO_ADDR
9296: GO 9277
9298: POP
9299: POP
// end ;
9300: GO 9259
9302: POP
9303: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9304: LD_VAR 0 6
9308: PPUSH
9309: LD_VAR 0 2
9313: PPUSH
9314: CALL_OW 250
9318: PPUSH
9319: LD_VAR 0 2
9323: PPUSH
9324: CALL_OW 251
9328: PPUSH
9329: CALL_OW 114
// end ;
9333: LD_VAR 0 3
9337: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9338: LD_INT 0
9340: PPUSH
9341: PPUSH
9342: PPUSH
9343: PPUSH
// enable ;
9344: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9345: LD_ADDR_VAR 0 7
9349: PUSH
9350: LD_VAR 0 3
9354: PPUSH
9355: CALL_OW 435
9359: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9360: LD_ADDR_VAR 0 6
9364: PUSH
9365: LD_INT 22
9367: PUSH
9368: LD_VAR 0 1
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: LD_INT 34
9379: PUSH
9380: LD_VAR 0 2
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: PPUSH
9393: CALL_OW 69
9397: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9398: LD_VAR 0 6
9402: PUSH
9403: LD_INT 0
9405: GREATER
9406: PUSH
9407: LD_VAR 0 3
9411: PPUSH
9412: CALL_OW 435
9416: AND
9417: PUSH
9418: LD_VAR 0 7
9422: PUSH
9423: LD_INT 0
9425: GREATER
9426: AND
9427: IFFALSE 9476
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9429: LD_VAR 0 6
9433: PUSH
9434: LD_INT 1
9436: ARRAY
9437: PPUSH
9438: LD_VAR 0 7
9442: PUSH
9443: LD_INT 1
9445: ARRAY
9446: PPUSH
9447: LD_VAR 0 7
9451: PUSH
9452: LD_INT 2
9454: ARRAY
9455: PPUSH
9456: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9460: LD_VAR 0 6
9464: PUSH
9465: LD_INT 1
9467: ARRAY
9468: PPUSH
9469: LD_INT 100
9471: PPUSH
9472: CALL_OW 240
// end ; end ;
9476: LD_VAR 0 4
9480: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9481: LD_INT 0
9483: PPUSH
9484: PPUSH
9485: PPUSH
9486: PPUSH
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9491: LD_ADDR_VAR 0 6
9495: PUSH
9496: LD_VAR 0 2
9500: PPUSH
9501: LD_INT 22
9503: PUSH
9504: LD_VAR 0 1
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: PUSH
9513: LD_INT 56
9515: PUSH
9516: EMPTY
9517: LIST
9518: PUSH
9519: LD_INT 24
9521: PUSH
9522: LD_INT 700
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 3
9531: PUSH
9532: LD_INT 60
9534: PUSH
9535: EMPTY
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 2
9544: PUSH
9545: LD_INT 25
9547: PUSH
9548: LD_INT 1
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: LD_INT 25
9557: PUSH
9558: LD_INT 5
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: LD_INT 25
9567: PUSH
9568: LD_INT 8
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: LD_INT 25
9577: PUSH
9578: LD_INT 9
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: PPUSH
9599: CALL_OW 70
9603: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9604: LD_ADDR_VAR 0 7
9608: PUSH
9609: LD_VAR 0 2
9613: PPUSH
9614: LD_INT 22
9616: PUSH
9617: LD_VAR 0 1
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 30
9628: PUSH
9629: LD_INT 32
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: LD_INT 58
9638: PUSH
9639: EMPTY
9640: LIST
9641: PUSH
9642: LD_INT 24
9644: PUSH
9645: LD_INT 251
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: PPUSH
9658: CALL_OW 70
9662: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9663: LD_ADDR_VAR 0 9
9667: PUSH
9668: LD_VAR 0 2
9672: PPUSH
9673: LD_INT 22
9675: PUSH
9676: LD_VAR 0 1
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: PUSH
9685: LD_INT 2
9687: PUSH
9688: LD_INT 30
9690: PUSH
9691: LD_INT 4
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 30
9700: PUSH
9701: LD_INT 5
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 24
9715: PUSH
9716: LD_INT 251
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: LIST
9727: PPUSH
9728: CALL_OW 70
9732: ST_TO_ADDR
// if barrackList > 0 then
9733: LD_VAR 0 9
9737: PUSH
9738: LD_INT 0
9740: GREATER
9741: IFFALSE 9889
// begin if turretList = 0 then
9743: LD_VAR 0 7
9747: PUSH
9748: LD_INT 0
9750: EQUAL
9751: IFFALSE 9793
// begin if soldiers_list > 0 then
9753: LD_VAR 0 6
9757: PUSH
9758: LD_INT 0
9760: GREATER
9761: IFFALSE 9791
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9763: LD_VAR 0 6
9767: PPUSH
9768: LD_VAR 0 9
9772: PUSH
9773: LD_INT 1
9775: PPUSH
9776: LD_VAR 0 9
9780: PPUSH
9781: CALL_OW 12
9785: ARRAY
9786: PPUSH
9787: CALL_OW 120
// end else
9791: GO 9889
// begin for i in barrackList do
9793: LD_ADDR_VAR 0 4
9797: PUSH
9798: LD_VAR 0 9
9802: PUSH
9803: FOR_IN
9804: IFFALSE 9887
// begin insideUnits = UnitsInside ( i ) ;
9806: LD_ADDR_VAR 0 10
9810: PUSH
9811: LD_VAR 0 4
9815: PPUSH
9816: CALL_OW 313
9820: ST_TO_ADDR
// if insideUnits > 0 then
9821: LD_VAR 0 10
9825: PUSH
9826: LD_INT 0
9828: GREATER
9829: IFFALSE 9853
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9831: LD_VAR 0 10
9835: PUSH
9836: LD_INT 1
9838: ARRAY
9839: PPUSH
9840: LD_VAR 0 7
9844: PUSH
9845: LD_INT 1
9847: ARRAY
9848: PPUSH
9849: CALL_OW 120
// if soldiers_list > 0 then
9853: LD_VAR 0 6
9857: PUSH
9858: LD_INT 0
9860: GREATER
9861: IFFALSE 9885
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9863: LD_VAR 0 6
9867: PUSH
9868: LD_INT 1
9870: ARRAY
9871: PPUSH
9872: LD_VAR 0 7
9876: PUSH
9877: LD_INT 1
9879: ARRAY
9880: PPUSH
9881: CALL_OW 120
// end ;
9885: GO 9803
9887: POP
9888: POP
// end ; end ; end ;
9889: LD_VAR 0 3
9893: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9894: LD_INT 0
9896: PPUSH
9897: PPUSH
9898: PPUSH
9899: PPUSH
9900: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9901: LD_ADDR_VAR 0 6
9905: PUSH
9906: LD_INT 22
9908: PUSH
9909: LD_VAR 0 1
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: LD_INT 2
9920: PUSH
9921: LD_INT 30
9923: PUSH
9924: LD_INT 31
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PUSH
9931: LD_INT 30
9933: PUSH
9934: LD_INT 32
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: LD_INT 30
9943: PUSH
9944: LD_INT 33
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: LD_INT 30
9953: PUSH
9954: LD_INT 4
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: LD_INT 30
9963: PUSH
9964: LD_INT 5
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PPUSH
9983: CALL_OW 69
9987: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9988: LD_ADDR_VAR 0 7
9992: PUSH
9993: LD_INT 22
9995: PUSH
9996: LD_VAR 0 2
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 21
10007: PUSH
10008: LD_INT 3
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 58
10017: PUSH
10018: EMPTY
10019: LIST
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: LIST
10025: PPUSH
10026: CALL_OW 69
10030: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
10031: LD_VAR 0 6
10035: PUSH
10036: LD_INT 0
10038: GREATER
10039: PUSH
10040: LD_VAR 0 7
10044: PUSH
10045: LD_INT 0
10047: GREATER
10048: AND
10049: IFFALSE 10119
// begin for i in turretsList do
10051: LD_ADDR_VAR 0 4
10055: PUSH
10056: LD_VAR 0 6
10060: PUSH
10061: FOR_IN
10062: IFFALSE 10117
// begin for j in enemyBuildings do
10064: LD_ADDR_VAR 0 5
10068: PUSH
10069: LD_VAR 0 7
10073: PUSH
10074: FOR_IN
10075: IFFALSE 10113
// begin if GetDistUnits ( i , j ) < 20 then
10077: LD_VAR 0 4
10081: PPUSH
10082: LD_VAR 0 5
10086: PPUSH
10087: CALL_OW 296
10091: PUSH
10092: LD_INT 20
10094: LESS
10095: IFFALSE 10111
// begin ComAttackUnit ( i , j ) ;
10097: LD_VAR 0 4
10101: PPUSH
10102: LD_VAR 0 5
10106: PPUSH
10107: CALL_OW 115
// end ; end ;
10111: GO 10074
10113: POP
10114: POP
// end ;
10115: GO 10061
10117: POP
10118: POP
// end ; end ;
10119: LD_VAR 0 3
10123: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10124: LD_INT 0
10126: PPUSH
10127: PPUSH
10128: PPUSH
10129: PPUSH
10130: PPUSH
10131: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10132: LD_ADDR_VAR 0 8
10136: PUSH
10137: LD_INT 22
10139: PUSH
10140: LD_VAR 0 1
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 21
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 34
10161: PUSH
10162: LD_INT 52
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: LIST
10173: PPUSH
10174: CALL_OW 69
10178: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10179: LD_ADDR_VAR 0 9
10183: PUSH
10184: LD_INT 22
10186: PUSH
10187: LD_VAR 0 1
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: LD_INT 21
10198: PUSH
10199: LD_INT 3
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 3
10208: PUSH
10209: LD_INT 24
10211: PUSH
10212: LD_INT 1000
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: LIST
10227: PUSH
10228: EMPTY
10229: LIST
10230: PPUSH
10231: CALL_OW 69
10235: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10236: LD_VAR 0 9
10240: PUSH
10241: LD_INT 0
10243: GREATER
10244: PUSH
10245: LD_VAR 0 8
10249: PPUSH
10250: LD_INT 24
10252: PUSH
10253: LD_INT 750
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PPUSH
10260: CALL_OW 72
10264: PUSH
10265: LD_INT 0
10267: GREATER
10268: AND
10269: IFFALSE 10304
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10271: LD_VAR 0 8
10275: PPUSH
10276: LD_INT 24
10278: PUSH
10279: LD_INT 750
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PPUSH
10286: CALL_OW 72
10290: PPUSH
10291: LD_VAR 0 9
10295: PUSH
10296: LD_INT 1
10298: ARRAY
10299: PPUSH
10300: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10304: LD_VAR 0 8
10308: PPUSH
10309: LD_INT 3
10311: PUSH
10312: LD_INT 24
10314: PUSH
10315: LD_INT 750
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PPUSH
10326: CALL_OW 72
10330: PUSH
10331: LD_INT 0
10333: GREATER
10334: IFFALSE 10372
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10336: LD_VAR 0 8
10340: PPUSH
10341: LD_INT 3
10343: PUSH
10344: LD_INT 24
10346: PUSH
10347: LD_INT 750
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PPUSH
10358: CALL_OW 72
10362: PPUSH
10363: LD_VAR 0 2
10367: PPUSH
10368: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10372: LD_VAR 0 8
10376: PUSH
10377: LD_INT 0
10379: GREATER
10380: PUSH
10381: LD_VAR 0 9
10385: PUSH
10386: LD_INT 0
10388: EQUAL
10389: AND
10390: PUSH
10391: LD_VAR 0 3
10395: PUSH
10396: LD_INT 0
10398: GREATER
10399: AND
10400: IFFALSE 10447
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10402: LD_VAR 0 8
10406: PPUSH
10407: LD_VAR 0 3
10411: PUSH
10412: LD_INT 1
10414: ARRAY
10415: PPUSH
10416: LD_VAR 0 3
10420: PUSH
10421: LD_INT 2
10423: ARRAY
10424: PPUSH
10425: LD_VAR 0 3
10429: PUSH
10430: LD_INT 3
10432: ARRAY
10433: PPUSH
10434: LD_VAR 0 3
10438: PUSH
10439: LD_INT 4
10441: ARRAY
10442: PPUSH
10443: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10447: LD_VAR 0 2
10451: PPUSH
10452: LD_INT 22
10454: PUSH
10455: LD_VAR 0 1
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 21
10466: PUSH
10467: LD_INT 2
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 34
10476: PUSH
10477: LD_INT 52
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 3
10486: PUSH
10487: LD_INT 24
10489: PUSH
10490: LD_INT 750
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: PPUSH
10507: CALL_OW 70
10511: PUSH
10512: LD_INT 0
10514: GREATER
10515: IFFALSE 10717
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10517: LD_ADDR_VAR 0 5
10521: PUSH
10522: LD_VAR 0 2
10526: PPUSH
10527: LD_INT 22
10529: PUSH
10530: LD_VAR 0 1
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 21
10541: PUSH
10542: LD_INT 2
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 34
10551: PUSH
10552: LD_INT 52
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: LD_INT 3
10561: PUSH
10562: LD_INT 24
10564: PUSH
10565: LD_INT 750
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: PPUSH
10582: CALL_OW 70
10586: PUSH
10587: FOR_IN
10588: IFFALSE 10715
// begin mechTmp = UnitsInside ( i ) ;
10590: LD_ADDR_VAR 0 6
10594: PUSH
10595: LD_VAR 0 5
10599: PPUSH
10600: CALL_OW 313
10604: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10605: LD_VAR 0 6
10609: PPUSH
10610: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10614: LD_VAR 0 6
10618: PPUSH
10619: LD_VAR 0 7
10623: PPUSH
10624: CALL_OW 189
// wait ( 0 0$2 ) ;
10628: LD_INT 70
10630: PPUSH
10631: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10635: LD_VAR 0 6
10639: PPUSH
10640: LD_VAR 0 2
10644: PPUSH
10645: LD_INT 22
10647: PUSH
10648: LD_VAR 0 1
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: LD_INT 21
10659: PUSH
10660: LD_INT 2
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: LD_INT 34
10669: PUSH
10670: LD_INT 52
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PUSH
10677: LD_INT 24
10679: PUSH
10680: LD_INT 1000
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 58
10689: PUSH
10690: EMPTY
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: PPUSH
10700: CALL_OW 70
10704: PUSH
10705: LD_INT 1
10707: ARRAY
10708: PPUSH
10709: CALL_OW 180
// end ;
10713: GO 10587
10715: POP
10716: POP
// end ; end ;
10717: LD_VAR 0 4
10721: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10722: LD_INT 0
10724: PPUSH
10725: PPUSH
10726: PPUSH
10727: PPUSH
10728: PPUSH
10729: PPUSH
10730: PPUSH
10731: PPUSH
10732: PPUSH
10733: PPUSH
10734: PPUSH
// for i = 1 to medicCount do
10735: LD_ADDR_VAR 0 14
10739: PUSH
10740: DOUBLE
10741: LD_INT 1
10743: DEC
10744: ST_TO_ADDR
10745: LD_VAR 0 7
10749: PUSH
10750: FOR_TO
10751: IFFALSE 10833
// begin uc_side = side ;
10753: LD_ADDR_OWVAR 20
10757: PUSH
10758: LD_VAR 0 1
10762: ST_TO_ADDR
// uc_nation = nation ;
10763: LD_ADDR_OWVAR 21
10767: PUSH
10768: LD_VAR 0 2
10772: ST_TO_ADDR
// hc_name =  ;
10773: LD_ADDR_OWVAR 26
10777: PUSH
10778: LD_STRING 
10780: ST_TO_ADDR
// hc_gallery =  ;
10781: LD_ADDR_OWVAR 33
10785: PUSH
10786: LD_STRING 
10788: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10789: LD_INT 0
10791: PPUSH
10792: LD_INT 4
10794: PPUSH
10795: LD_VAR 0 8
10799: PPUSH
10800: CALL_OW 380
// un = CreateHuman ;
10804: LD_ADDR_VAR 0 16
10808: PUSH
10809: CALL_OW 44
10813: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10814: LD_VAR 0 16
10818: PPUSH
10819: LD_VAR 0 9
10823: PPUSH
10824: LD_INT 0
10826: PPUSH
10827: CALL_OW 49
// end ;
10831: GO 10750
10833: POP
10834: POP
// for i = 1 to soldierCount do
10835: LD_ADDR_VAR 0 14
10839: PUSH
10840: DOUBLE
10841: LD_INT 1
10843: DEC
10844: ST_TO_ADDR
10845: LD_VAR 0 3
10849: PUSH
10850: FOR_TO
10851: IFFALSE 10933
// begin uc_side = side ;
10853: LD_ADDR_OWVAR 20
10857: PUSH
10858: LD_VAR 0 1
10862: ST_TO_ADDR
// uc_nation = nation ;
10863: LD_ADDR_OWVAR 21
10867: PUSH
10868: LD_VAR 0 2
10872: ST_TO_ADDR
// hc_name =  ;
10873: LD_ADDR_OWVAR 26
10877: PUSH
10878: LD_STRING 
10880: ST_TO_ADDR
// hc_gallery =  ;
10881: LD_ADDR_OWVAR 33
10885: PUSH
10886: LD_STRING 
10888: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10889: LD_INT 0
10891: PPUSH
10892: LD_INT 1
10894: PPUSH
10895: LD_VAR 0 8
10899: PPUSH
10900: CALL_OW 380
// un = CreateHuman ;
10904: LD_ADDR_VAR 0 16
10908: PUSH
10909: CALL_OW 44
10913: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10914: LD_VAR 0 16
10918: PPUSH
10919: LD_VAR 0 9
10923: PPUSH
10924: LD_INT 0
10926: PPUSH
10927: CALL_OW 49
// end ;
10931: GO 10850
10933: POP
10934: POP
// for i = 1 to sniperCount do
10935: LD_ADDR_VAR 0 14
10939: PUSH
10940: DOUBLE
10941: LD_INT 1
10943: DEC
10944: ST_TO_ADDR
10945: LD_VAR 0 4
10949: PUSH
10950: FOR_TO
10951: IFFALSE 11033
// begin uc_side = side ;
10953: LD_ADDR_OWVAR 20
10957: PUSH
10958: LD_VAR 0 1
10962: ST_TO_ADDR
// uc_nation = nation ;
10963: LD_ADDR_OWVAR 21
10967: PUSH
10968: LD_VAR 0 2
10972: ST_TO_ADDR
// hc_name =  ;
10973: LD_ADDR_OWVAR 26
10977: PUSH
10978: LD_STRING 
10980: ST_TO_ADDR
// hc_gallery =  ;
10981: LD_ADDR_OWVAR 33
10985: PUSH
10986: LD_STRING 
10988: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10989: LD_INT 0
10991: PPUSH
10992: LD_INT 5
10994: PPUSH
10995: LD_VAR 0 8
10999: PPUSH
11000: CALL_OW 380
// un = CreateHuman ;
11004: LD_ADDR_VAR 0 16
11008: PUSH
11009: CALL_OW 44
11013: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11014: LD_VAR 0 16
11018: PPUSH
11019: LD_VAR 0 9
11023: PPUSH
11024: LD_INT 0
11026: PPUSH
11027: CALL_OW 49
// end ;
11031: GO 10950
11033: POP
11034: POP
// for i = 1 to bazookCount do
11035: LD_ADDR_VAR 0 14
11039: PUSH
11040: DOUBLE
11041: LD_INT 1
11043: DEC
11044: ST_TO_ADDR
11045: LD_VAR 0 5
11049: PUSH
11050: FOR_TO
11051: IFFALSE 11133
// begin uc_side = side ;
11053: LD_ADDR_OWVAR 20
11057: PUSH
11058: LD_VAR 0 1
11062: ST_TO_ADDR
// uc_nation = nation ;
11063: LD_ADDR_OWVAR 21
11067: PUSH
11068: LD_VAR 0 2
11072: ST_TO_ADDR
// hc_name =  ;
11073: LD_ADDR_OWVAR 26
11077: PUSH
11078: LD_STRING 
11080: ST_TO_ADDR
// hc_gallery =  ;
11081: LD_ADDR_OWVAR 33
11085: PUSH
11086: LD_STRING 
11088: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11089: LD_INT 0
11091: PPUSH
11092: LD_INT 9
11094: PPUSH
11095: LD_VAR 0 8
11099: PPUSH
11100: CALL_OW 380
// un = CreateHuman ;
11104: LD_ADDR_VAR 0 16
11108: PUSH
11109: CALL_OW 44
11113: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11114: LD_VAR 0 16
11118: PPUSH
11119: LD_VAR 0 9
11123: PPUSH
11124: LD_INT 0
11126: PPUSH
11127: CALL_OW 49
// end ;
11131: GO 11050
11133: POP
11134: POP
// for i = 1 to mortalCount do
11135: LD_ADDR_VAR 0 14
11139: PUSH
11140: DOUBLE
11141: LD_INT 1
11143: DEC
11144: ST_TO_ADDR
11145: LD_VAR 0 6
11149: PUSH
11150: FOR_TO
11151: IFFALSE 11233
// begin uc_side = side ;
11153: LD_ADDR_OWVAR 20
11157: PUSH
11158: LD_VAR 0 1
11162: ST_TO_ADDR
// uc_nation = nation ;
11163: LD_ADDR_OWVAR 21
11167: PUSH
11168: LD_VAR 0 2
11172: ST_TO_ADDR
// hc_name =  ;
11173: LD_ADDR_OWVAR 26
11177: PUSH
11178: LD_STRING 
11180: ST_TO_ADDR
// hc_gallery =  ;
11181: LD_ADDR_OWVAR 33
11185: PUSH
11186: LD_STRING 
11188: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11189: LD_INT 0
11191: PPUSH
11192: LD_INT 8
11194: PPUSH
11195: LD_VAR 0 8
11199: PPUSH
11200: CALL_OW 380
// un = CreateHuman ;
11204: LD_ADDR_VAR 0 16
11208: PUSH
11209: CALL_OW 44
11213: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11214: LD_VAR 0 16
11218: PPUSH
11219: LD_VAR 0 9
11223: PPUSH
11224: LD_INT 0
11226: PPUSH
11227: CALL_OW 49
// end ;
11231: GO 11150
11233: POP
11234: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11235: LD_ADDR_VAR 0 19
11239: PUSH
11240: LD_INT 22
11242: PUSH
11243: LD_VAR 0 1
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: LD_INT 2
11254: PUSH
11255: LD_INT 25
11257: PUSH
11258: LD_INT 1
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 25
11267: PUSH
11268: LD_INT 5
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 25
11277: PUSH
11278: LD_INT 8
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 25
11287: PUSH
11288: LD_INT 9
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PPUSH
11306: CALL_OW 69
11310: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11311: LD_ADDR_VAR 0 18
11315: PUSH
11316: LD_INT 22
11318: PUSH
11319: LD_VAR 0 1
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 25
11330: PUSH
11331: LD_INT 4
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PPUSH
11342: CALL_OW 69
11346: ST_TO_ADDR
// for i in medic_list do
11347: LD_ADDR_VAR 0 14
11351: PUSH
11352: LD_VAR 0 18
11356: PUSH
11357: FOR_IN
11358: IFFALSE 11376
// ComMoveToArea ( i , healArea ) ;
11360: LD_VAR 0 14
11364: PPUSH
11365: LD_VAR 0 10
11369: PPUSH
11370: CALL_OW 113
11374: GO 11357
11376: POP
11377: POP
// if strategy = 1 then
11378: LD_VAR 0 12
11382: PUSH
11383: LD_INT 1
11385: EQUAL
11386: IFFALSE 12103
// begin repeat wait ( 0 0$3 ) ;
11388: LD_INT 105
11390: PPUSH
11391: CALL_OW 67
// for i in soldiersOK_list do
11395: LD_ADDR_VAR 0 14
11399: PUSH
11400: LD_VAR 0 19
11404: PUSH
11405: FOR_IN
11406: IFFALSE 11440
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11408: LD_VAR 0 14
11412: PPUSH
11413: LD_INT 80
11415: PPUSH
11416: LD_INT 109
11418: PPUSH
11419: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11423: LD_VAR 0 14
11427: PPUSH
11428: LD_INT 39
11430: PPUSH
11431: LD_INT 49
11433: PPUSH
11434: CALL_OW 174
// end ;
11438: GO 11405
11440: POP
11441: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11442: LD_INT 13
11444: PPUSH
11445: LD_INT 22
11447: PUSH
11448: LD_VAR 0 1
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PPUSH
11457: CALL_OW 70
11461: PUSH
11462: LD_INT 0
11464: GREATER
11465: IFFALSE 11388
// repeat wait ( 0 0$1 ) ;
11467: LD_INT 35
11469: PPUSH
11470: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11474: LD_ADDR_VAR 0 17
11478: PUSH
11479: LD_INT 22
11481: PUSH
11482: LD_VAR 0 1
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: LD_INT 1
11493: PUSH
11494: LD_INT 3
11496: PUSH
11497: LD_INT 24
11499: PUSH
11500: LD_INT 550
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: LD_INT 24
11513: PUSH
11514: LD_INT 250
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PPUSH
11530: CALL_OW 69
11534: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11535: LD_ADDR_VAR 0 19
11539: PUSH
11540: LD_INT 22
11542: PUSH
11543: LD_VAR 0 1
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 2
11554: PUSH
11555: LD_INT 25
11557: PUSH
11558: LD_INT 1
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 25
11567: PUSH
11568: LD_INT 5
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: LD_INT 25
11577: PUSH
11578: LD_INT 8
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 25
11587: PUSH
11588: LD_INT 9
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 24
11604: PUSH
11605: LD_INT 1000
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: PPUSH
11617: CALL_OW 69
11621: ST_TO_ADDR
// if medicCount > 0 then
11622: LD_VAR 0 7
11626: PUSH
11627: LD_INT 0
11629: GREATER
11630: IFFALSE 11704
// begin if damageUnit_list > 0 then
11632: LD_VAR 0 17
11636: PUSH
11637: LD_INT 0
11639: GREATER
11640: IFFALSE 11704
// begin for i in damageUnit_list do
11642: LD_ADDR_VAR 0 14
11646: PUSH
11647: LD_VAR 0 17
11651: PUSH
11652: FOR_IN
11653: IFFALSE 11702
// begin ComMoveToArea ( i , healArea ) ;
11655: LD_VAR 0 14
11659: PPUSH
11660: LD_VAR 0 10
11664: PPUSH
11665: CALL_OW 113
// for j in medic_list do
11669: LD_ADDR_VAR 0 15
11673: PUSH
11674: LD_VAR 0 18
11678: PUSH
11679: FOR_IN
11680: IFFALSE 11698
// AddComHeal ( j , i ) ;
11682: LD_VAR 0 15
11686: PPUSH
11687: LD_VAR 0 14
11691: PPUSH
11692: CALL_OW 188
11696: GO 11679
11698: POP
11699: POP
// end ;
11700: GO 11652
11702: POP
11703: POP
// end ; end ; for i in soldiersOK_list do
11704: LD_ADDR_VAR 0 14
11708: PUSH
11709: LD_VAR 0 19
11713: PUSH
11714: FOR_IN
11715: IFFALSE 11897
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11717: LD_ADDR_VAR 0 22
11721: PUSH
11722: LD_INT 22
11724: PUSH
11725: LD_VAR 0 11
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 69
11738: PUSH
11739: LD_EXP 45
11743: DIFF
11744: PPUSH
11745: LD_VAR 0 14
11749: PPUSH
11750: CALL_OW 74
11754: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11755: LD_ADDR_VAR 0 23
11759: PUSH
11760: LD_INT 22
11762: PUSH
11763: LD_VAR 0 11
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 2
11774: PUSH
11775: LD_INT 59
11777: PUSH
11778: EMPTY
11779: LIST
11780: PUSH
11781: LD_INT 21
11783: PUSH
11784: LD_INT 1
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 21
11793: PUSH
11794: LD_INT 2
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: PPUSH
11814: CALL_OW 69
11818: PPUSH
11819: LD_VAR 0 14
11823: PPUSH
11824: CALL_OW 74
11828: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11829: LD_VAR 0 14
11833: PPUSH
11834: LD_VAR 0 22
11838: PPUSH
11839: CALL_OW 296
11843: PUSH
11844: LD_INT 8
11846: PLUS
11847: PUSH
11848: LD_VAR 0 14
11852: PPUSH
11853: LD_VAR 0 23
11857: PPUSH
11858: CALL_OW 296
11862: LESS
11863: IFFALSE 11881
// begin ComAttackUnit ( i , target1 ) ;
11865: LD_VAR 0 14
11869: PPUSH
11870: LD_VAR 0 22
11874: PPUSH
11875: CALL_OW 115
// end else
11879: GO 11895
// begin ComAttackUnit ( i , target2 ) ;
11881: LD_VAR 0 14
11885: PPUSH
11886: LD_VAR 0 23
11890: PPUSH
11891: CALL_OW 115
// end ; end ;
11895: GO 11714
11897: POP
11898: POP
// for i in soldiersOK_list do
11899: LD_ADDR_VAR 0 14
11903: PUSH
11904: LD_VAR 0 19
11908: PUSH
11909: FOR_IN
11910: IFFALSE 12092
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11912: LD_ADDR_VAR 0 22
11916: PUSH
11917: LD_INT 22
11919: PUSH
11920: LD_VAR 0 11
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PPUSH
11929: CALL_OW 69
11933: PUSH
11934: LD_EXP 45
11938: DIFF
11939: PPUSH
11940: LD_VAR 0 14
11944: PPUSH
11945: CALL_OW 74
11949: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11950: LD_ADDR_VAR 0 23
11954: PUSH
11955: LD_INT 22
11957: PUSH
11958: LD_VAR 0 11
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 2
11969: PUSH
11970: LD_INT 59
11972: PUSH
11973: EMPTY
11974: LIST
11975: PUSH
11976: LD_INT 21
11978: PUSH
11979: LD_INT 1
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PUSH
11986: LD_INT 21
11988: PUSH
11989: LD_INT 2
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: EMPTY
12007: LIST
12008: PPUSH
12009: CALL_OW 69
12013: PPUSH
12014: LD_VAR 0 14
12018: PPUSH
12019: CALL_OW 74
12023: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12024: LD_VAR 0 14
12028: PPUSH
12029: LD_VAR 0 22
12033: PPUSH
12034: CALL_OW 296
12038: PUSH
12039: LD_INT 8
12041: PLUS
12042: PUSH
12043: LD_VAR 0 14
12047: PPUSH
12048: LD_VAR 0 23
12052: PPUSH
12053: CALL_OW 296
12057: LESS
12058: IFFALSE 12076
// begin ComAttackUnit ( i , target1 ) ;
12060: LD_VAR 0 14
12064: PPUSH
12065: LD_VAR 0 22
12069: PPUSH
12070: CALL_OW 115
// end else
12074: GO 12090
// begin ComAttackUnit ( i , target2 ) ;
12076: LD_VAR 0 14
12080: PPUSH
12081: LD_VAR 0 23
12085: PPUSH
12086: CALL_OW 115
// end ; end ;
12090: GO 11909
12092: POP
12093: POP
// until soldiersOK_list = [ ] ;
12094: LD_VAR 0 19
12098: PUSH
12099: EMPTY
12100: EQUAL
12101: IFFALSE 11467
// end ; if strategy = 2 then
12103: LD_VAR 0 12
12107: PUSH
12108: LD_INT 2
12110: EQUAL
12111: IFFALSE 12816
// begin repeat wait ( 0 0$1 ) ;
12113: LD_INT 35
12115: PPUSH
12116: CALL_OW 67
// for i in soldiersOK_list do
12120: LD_ADDR_VAR 0 14
12124: PUSH
12125: LD_VAR 0 19
12129: PUSH
12130: FOR_IN
12131: IFFALSE 12165
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
12133: LD_VAR 0 14
12137: PPUSH
12138: LD_INT 117
12140: PPUSH
12141: LD_INT 97
12143: PPUSH
12144: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
12148: LD_VAR 0 14
12152: PPUSH
12153: LD_INT 94
12155: PPUSH
12156: LD_INT 50
12158: PPUSH
12159: CALL_OW 174
// end ;
12163: GO 12130
12165: POP
12166: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
12167: LD_INT 14
12169: PPUSH
12170: LD_INT 22
12172: PUSH
12173: LD_VAR 0 1
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PPUSH
12182: CALL_OW 70
12186: PUSH
12187: LD_INT 0
12189: GREATER
12190: IFFALSE 12113
// repeat wait ( 0 0$3 ) ;
12192: LD_INT 105
12194: PPUSH
12195: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12199: LD_ADDR_VAR 0 17
12203: PUSH
12204: LD_INT 22
12206: PUSH
12207: LD_VAR 0 1
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: LD_INT 1
12218: PUSH
12219: LD_INT 3
12221: PUSH
12222: LD_INT 24
12224: PUSH
12225: LD_INT 550
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 24
12238: PUSH
12239: LD_INT 250
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12260: LD_ADDR_VAR 0 19
12264: PUSH
12265: LD_INT 22
12267: PUSH
12268: LD_VAR 0 1
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 2
12279: PUSH
12280: LD_INT 25
12282: PUSH
12283: LD_INT 1
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 25
12292: PUSH
12293: LD_INT 5
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 25
12302: PUSH
12303: LD_INT 8
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 25
12312: PUSH
12313: LD_INT 9
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 24
12329: PUSH
12330: LD_INT 1000
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: LIST
12341: PPUSH
12342: CALL_OW 69
12346: ST_TO_ADDR
// if medicCount > 0 then
12347: LD_VAR 0 7
12351: PUSH
12352: LD_INT 0
12354: GREATER
12355: IFFALSE 12429
// begin if damageUnit_list > 0 then
12357: LD_VAR 0 17
12361: PUSH
12362: LD_INT 0
12364: GREATER
12365: IFFALSE 12429
// begin for i in damageUnit_list do
12367: LD_ADDR_VAR 0 14
12371: PUSH
12372: LD_VAR 0 17
12376: PUSH
12377: FOR_IN
12378: IFFALSE 12427
// begin ComMoveToArea ( i , healArea ) ;
12380: LD_VAR 0 14
12384: PPUSH
12385: LD_VAR 0 10
12389: PPUSH
12390: CALL_OW 113
// for j in medic_list do
12394: LD_ADDR_VAR 0 15
12398: PUSH
12399: LD_VAR 0 18
12403: PUSH
12404: FOR_IN
12405: IFFALSE 12423
// AddComHeal ( j , i ) ;
12407: LD_VAR 0 15
12411: PPUSH
12412: LD_VAR 0 14
12416: PPUSH
12417: CALL_OW 188
12421: GO 12404
12423: POP
12424: POP
// end ;
12425: GO 12377
12427: POP
12428: POP
// end ; end ; for i in soldiersOK_list do
12429: LD_ADDR_VAR 0 14
12433: PUSH
12434: LD_VAR 0 19
12438: PUSH
12439: FOR_IN
12440: IFFALSE 12616
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12442: LD_ADDR_VAR 0 22
12446: PUSH
12447: LD_INT 22
12449: PUSH
12450: LD_VAR 0 11
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PPUSH
12459: CALL_OW 69
12463: PPUSH
12464: LD_VAR 0 14
12468: PPUSH
12469: CALL_OW 74
12473: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12474: LD_ADDR_VAR 0 23
12478: PUSH
12479: LD_INT 22
12481: PUSH
12482: LD_VAR 0 11
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 2
12493: PUSH
12494: LD_INT 59
12496: PUSH
12497: EMPTY
12498: LIST
12499: PUSH
12500: LD_INT 21
12502: PUSH
12503: LD_INT 1
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PUSH
12510: LD_INT 21
12512: PUSH
12513: LD_INT 2
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: EMPTY
12531: LIST
12532: PPUSH
12533: CALL_OW 69
12537: PPUSH
12538: LD_VAR 0 14
12542: PPUSH
12543: CALL_OW 74
12547: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12548: LD_VAR 0 14
12552: PPUSH
12553: LD_VAR 0 22
12557: PPUSH
12558: CALL_OW 296
12562: PUSH
12563: LD_INT 8
12565: PLUS
12566: PUSH
12567: LD_VAR 0 14
12571: PPUSH
12572: LD_VAR 0 23
12576: PPUSH
12577: CALL_OW 296
12581: LESS
12582: IFFALSE 12600
// begin ComAttackUnit ( i , target1 ) ;
12584: LD_VAR 0 14
12588: PPUSH
12589: LD_VAR 0 22
12593: PPUSH
12594: CALL_OW 115
// end else
12598: GO 12614
// begin ComAttackUnit ( i , target2 ) ;
12600: LD_VAR 0 14
12604: PPUSH
12605: LD_VAR 0 23
12609: PPUSH
12610: CALL_OW 115
// end ; end ;
12614: GO 12439
12616: POP
12617: POP
// for i in soldiersOK_list do
12618: LD_ADDR_VAR 0 14
12622: PUSH
12623: LD_VAR 0 19
12627: PUSH
12628: FOR_IN
12629: IFFALSE 12805
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12631: LD_ADDR_VAR 0 22
12635: PUSH
12636: LD_INT 22
12638: PUSH
12639: LD_VAR 0 11
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PPUSH
12648: CALL_OW 69
12652: PPUSH
12653: LD_VAR 0 14
12657: PPUSH
12658: CALL_OW 74
12662: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12663: LD_ADDR_VAR 0 23
12667: PUSH
12668: LD_INT 22
12670: PUSH
12671: LD_VAR 0 11
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: LD_INT 2
12682: PUSH
12683: LD_INT 59
12685: PUSH
12686: EMPTY
12687: LIST
12688: PUSH
12689: LD_INT 21
12691: PUSH
12692: LD_INT 1
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PUSH
12699: LD_INT 21
12701: PUSH
12702: LD_INT 2
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: EMPTY
12720: LIST
12721: PPUSH
12722: CALL_OW 69
12726: PPUSH
12727: LD_VAR 0 14
12731: PPUSH
12732: CALL_OW 74
12736: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12737: LD_VAR 0 14
12741: PPUSH
12742: LD_VAR 0 22
12746: PPUSH
12747: CALL_OW 296
12751: PUSH
12752: LD_INT 8
12754: PLUS
12755: PUSH
12756: LD_VAR 0 14
12760: PPUSH
12761: LD_VAR 0 23
12765: PPUSH
12766: CALL_OW 296
12770: LESS
12771: IFFALSE 12789
// begin ComAttackUnit ( i , target1 ) ;
12773: LD_VAR 0 14
12777: PPUSH
12778: LD_VAR 0 22
12782: PPUSH
12783: CALL_OW 115
// end else
12787: GO 12803
// begin ComAttackUnit ( i , target2 ) ;
12789: LD_VAR 0 14
12793: PPUSH
12794: LD_VAR 0 23
12798: PPUSH
12799: CALL_OW 115
// end ; end ;
12803: GO 12628
12805: POP
12806: POP
// until soldiersOK_list = [ ] ;
12807: LD_VAR 0 19
12811: PUSH
12812: EMPTY
12813: EQUAL
12814: IFFALSE 12192
// end ; end ; end_of_file
12816: LD_VAR 0 13
12820: RET
// every 0 0$01 do
12821: GO 12823
12823: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12824: LD_INT 22
12826: PUSH
12827: LD_INT 1
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 25
12836: PUSH
12837: LD_INT 2
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PPUSH
12848: CALL_OW 69
12852: PUSH
12853: LD_INT 0
12855: EQUAL
12856: IFFALSE 12870
// SetClass ( JMM , 2 ) ;
12858: LD_EXP 1
12862: PPUSH
12863: LD_INT 2
12865: PPUSH
12866: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12870: LD_STRING M1
12872: PPUSH
12873: CALL_OW 337
// case difficulty of 1 :
12877: LD_OWVAR 67
12881: PUSH
12882: LD_INT 1
12884: DOUBLE
12885: EQUAL
12886: IFTRUE 12890
12888: GO 12900
12890: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12891: LD_STRING M1-1
12893: PPUSH
12894: CALL_OW 337
12898: GO 12937
12900: LD_INT 2
12902: DOUBLE
12903: EQUAL
12904: IFTRUE 12908
12906: GO 12918
12908: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12909: LD_STRING M1-2
12911: PPUSH
12912: CALL_OW 337
12916: GO 12937
12918: LD_INT 3
12920: DOUBLE
12921: EQUAL
12922: IFTRUE 12926
12924: GO 12936
12926: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12927: LD_STRING M1-3
12929: PPUSH
12930: CALL_OW 337
12934: GO 12937
12936: POP
// ChangeMissionObjectives ( M1cont ) ;
12937: LD_STRING M1cont
12939: PPUSH
12940: CALL_OW 337
// SaveForQuickRestart ;
12944: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12948: LD_INT 525
12950: PPUSH
12951: LD_INT 700
12953: PPUSH
12954: CALL_OW 12
12958: PPUSH
12959: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12963: LD_INT 5
12965: PPUSH
12966: LD_INT 82
12968: PPUSH
12969: LD_INT 38
12971: PPUSH
12972: LD_INT 10
12974: PPUSH
12975: LD_INT 1
12977: PPUSH
12978: CALL_OW 56
// wait ( 0 0$14 ) ;
12982: LD_INT 490
12984: PPUSH
12985: CALL_OW 67
// firstCrateSpawn := true ;
12989: LD_ADDR_EXP 41
12993: PUSH
12994: LD_INT 1
12996: ST_TO_ADDR
// end ;
12997: END
// every 0 0$02 trigger firstCrateSpawn do
12998: LD_EXP 41
13002: IFFALSE 13365
13004: GO 13006
13006: DISABLE
// begin if IsOk ( Lisa ) then
13007: LD_EXP 2
13011: PPUSH
13012: CALL_OW 302
13016: IFFALSE 13032
// Say ( Lisa , DR0-Lisa-1 ) else
13018: LD_EXP 2
13022: PPUSH
13023: LD_STRING DR0-Lisa-1
13025: PPUSH
13026: CALL_OW 88
13030: GO 13178
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
13032: LD_INT 22
13034: PUSH
13035: LD_INT 1
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 21
13044: PUSH
13045: LD_INT 1
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 26
13054: PUSH
13055: LD_INT 1
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 2
13064: PUSH
13065: LD_INT 25
13067: PUSH
13068: LD_INT 1
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: LD_INT 25
13077: PUSH
13078: LD_INT 2
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 25
13087: PUSH
13088: LD_INT 3
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 25
13097: PUSH
13098: LD_INT 4
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: PPUSH
13118: CALL_OW 69
13122: PUSH
13123: LD_EXP 1
13127: PUSH
13128: LD_EXP 8
13132: PUSH
13133: LD_EXP 5
13137: PUSH
13138: LD_EXP 6
13142: PUSH
13143: LD_EXP 7
13147: PUSH
13148: LD_EXP 4
13152: PUSH
13153: LD_EXP 3
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: DIFF
13167: PPUSH
13168: LD_STRING DR0-Sol1-1
13170: PPUSH
13171: LD_STRING DR0-Sol1-1
13173: PPUSH
13174: CALL 6214 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
13178: LD_INT 22
13180: PUSH
13181: LD_INT 1
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 21
13190: PUSH
13191: LD_INT 1
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 26
13200: PUSH
13201: LD_INT 1
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 2
13210: PUSH
13211: LD_INT 25
13213: PUSH
13214: LD_INT 1
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 25
13223: PUSH
13224: LD_INT 2
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 25
13233: PUSH
13234: LD_INT 3
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 25
13243: PUSH
13244: LD_INT 4
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: PPUSH
13264: CALL_OW 69
13268: PUSH
13269: LD_EXP 1
13273: PUSH
13274: LD_EXP 8
13278: PUSH
13279: LD_EXP 5
13283: PUSH
13284: LD_EXP 2
13288: PUSH
13289: LD_EXP 6
13293: PUSH
13294: LD_EXP 7
13298: PUSH
13299: LD_EXP 4
13303: PUSH
13304: LD_EXP 3
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: DIFF
13319: PPUSH
13320: LD_STRING DR0-Sol2-1
13322: PPUSH
13323: LD_STRING DR0-Sol2-1
13325: PPUSH
13326: CALL 6214 0 3
// if IsOk ( Cyrus ) then
13330: LD_EXP 4
13334: PPUSH
13335: CALL_OW 302
13339: IFFALSE 13353
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13341: LD_EXP 4
13345: PPUSH
13346: LD_STRING DR0-Cyrus-1
13348: PPUSH
13349: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13353: LD_EXP 1
13357: PPUSH
13358: LD_STRING DR0-JMM-1
13360: PPUSH
13361: CALL_OW 88
// end ;
13365: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13366: LD_EXP 5
13370: PPUSH
13371: CALL_OW 302
13375: PUSH
13376: LD_INT 22
13378: PUSH
13379: LD_INT 1
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: LD_INT 25
13388: PUSH
13389: LD_INT 16
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PPUSH
13400: CALL_OW 69
13404: PUSH
13405: LD_INT 0
13407: GREATER
13408: AND
13409: PUSH
13410: LD_INT 1
13412: PPUSH
13413: CALL_OW 463
13417: NOT
13418: AND
13419: IFFALSE 13697
13421: GO 13423
13423: DISABLE
// begin DialogueOn ;
13424: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13428: LD_EXP 5
13432: PPUSH
13433: LD_STRING D10-Frank-1
13435: PPUSH
13436: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13440: LD_INT 22
13442: PUSH
13443: LD_INT 1
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 21
13452: PUSH
13453: LD_INT 1
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: LD_INT 2
13462: PUSH
13463: LD_INT 25
13465: PUSH
13466: LD_INT 1
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: LD_INT 25
13475: PUSH
13476: LD_INT 2
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 25
13485: PUSH
13486: LD_INT 3
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 25
13495: PUSH
13496: LD_INT 4
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: PPUSH
13515: CALL_OW 69
13519: PUSH
13520: LD_EXP 1
13524: PUSH
13525: LD_EXP 5
13529: PUSH
13530: LD_EXP 2
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: LIST
13539: DIFF
13540: PPUSH
13541: LD_STRING D10-Sol1-1
13543: PPUSH
13544: LD_STRING D10-FSol1-1
13546: PPUSH
13547: CALL 6214 0 3
// Say ( Frank , D10-Frank-2 ) ;
13551: LD_EXP 5
13555: PPUSH
13556: LD_STRING D10-Frank-2
13558: PPUSH
13559: CALL_OW 88
// if IsOK ( Lisa ) then
13563: LD_EXP 2
13567: PPUSH
13568: CALL_OW 302
13572: IFFALSE 13588
// begin Say ( Lisa , D10-Lisa-2 ) ;
13574: LD_EXP 2
13578: PPUSH
13579: LD_STRING D10-Lisa-2
13581: PPUSH
13582: CALL_OW 88
// end else
13586: GO 13693
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13588: LD_INT 22
13590: PUSH
13591: LD_INT 1
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 21
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 2
13610: PUSH
13611: LD_INT 25
13613: PUSH
13614: LD_INT 1
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 25
13623: PUSH
13624: LD_INT 2
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: LD_INT 25
13633: PUSH
13634: LD_INT 3
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: LD_INT 25
13643: PUSH
13644: LD_INT 4
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: LIST
13662: PPUSH
13663: CALL_OW 69
13667: PUSH
13668: LD_EXP 1
13672: PUSH
13673: LD_EXP 5
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: DIFF
13682: PPUSH
13683: LD_STRING D10-Sol1-2
13685: PPUSH
13686: LD_STRING D10-FSol1-2
13688: PPUSH
13689: CALL 6214 0 3
// end ; DialogueOff ;
13693: CALL_OW 7
// end ;
13697: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13698: LD_INT 1
13700: PPUSH
13701: CALL_OW 463
13705: NOT
13706: IFFALSE 14001
13708: GO 13710
13710: DISABLE
// begin HarrisonSupport ;
13711: CALL 2498 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13715: LD_EXP 17
13719: PPUSH
13720: CALL_OW 310
13724: PPUSH
13725: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13729: LD_EXP 17
13733: PPUSH
13734: LD_STRING DEng-Eng1-1
13736: PPUSH
13737: CALL_OW 88
// wait ( 1 1$0 ) ;
13741: LD_INT 2100
13743: PPUSH
13744: CALL_OW 67
// DialogueOn ;
13748: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13752: LD_EXP 14
13756: PPUSH
13757: LD_STRING DRem-Har-1
13759: PPUSH
13760: CALL_OW 94
// if contactWithRussian = 1 then
13764: LD_EXP 22
13768: PUSH
13769: LD_INT 1
13771: EQUAL
13772: IFFALSE 13788
// begin Say ( JMM , DRem-JMM-1 ) ;
13774: LD_EXP 1
13778: PPUSH
13779: LD_STRING DRem-JMM-1
13781: PPUSH
13782: CALL_OW 88
// end else
13786: GO 13800
// begin Say ( JMM , DRem-JMM-1a ) ;
13788: LD_EXP 1
13792: PPUSH
13793: LD_STRING DRem-JMM-1a
13795: PPUSH
13796: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13800: LD_EXP 14
13804: PPUSH
13805: LD_STRING DRem-Har-2
13807: PPUSH
13808: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13812: LD_STRING DenisInDelta
13814: PPUSH
13815: LD_INT 0
13817: PPUSH
13818: CALL_OW 30
13822: PUSH
13823: LD_INT 1
13825: EQUAL
13826: IFFALSE 13842
// begin Say ( JMM , DRem-JMM-2 ) ;
13828: LD_EXP 1
13832: PPUSH
13833: LD_STRING DRem-JMM-2
13835: PPUSH
13836: CALL_OW 88
// end else
13840: GO 13854
// begin Say ( JMM , DRem-JMM-2a ) ;
13842: LD_EXP 1
13846: PPUSH
13847: LD_STRING DRem-JMM-2a
13849: PPUSH
13850: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13854: LD_EXP 14
13858: PPUSH
13859: LD_STRING DRem-Har-3
13861: PPUSH
13862: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13866: LD_EXP 1
13870: PPUSH
13871: LD_STRING DRem-JMM-3
13873: PPUSH
13874: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13878: LD_EXP 14
13882: PPUSH
13883: LD_STRING DRem-Har-4
13885: PPUSH
13886: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13890: LD_STRING DenisInDelta
13892: PPUSH
13893: LD_INT 0
13895: PPUSH
13896: CALL_OW 30
13900: PUSH
13901: LD_INT 1
13903: EQUAL
13904: IFFALSE 13964
// begin Say ( JMM , DRem-JMM-4 ) ;
13906: LD_EXP 1
13910: PPUSH
13911: LD_STRING DRem-JMM-4
13913: PPUSH
13914: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13918: LD_EXP 14
13922: PPUSH
13923: LD_STRING DRem-Har-5
13925: PPUSH
13926: CALL_OW 94
// DialogueOff ;
13930: CALL_OW 7
// wait ( 4 4$00 ) ;
13934: LD_INT 8400
13936: PPUSH
13937: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13941: LD_INT 35
13943: PPUSH
13944: CALL_OW 67
// until not InBattle ( 1 ) ;
13948: LD_INT 1
13950: PPUSH
13951: CALL_OW 463
13955: NOT
13956: IFFALSE 13941
// SpawnDenis ;
13958: CALL 14002 0 0
// end else
13962: GO 14001
// begin DialogueOff ;
13964: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13968: LD_INT 36
13970: PPUSH
13971: LD_INT 1
13973: PPUSH
13974: LD_INT 1
13976: PPUSH
13977: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13981: LD_INT 15
13983: PPUSH
13984: LD_INT 1
13986: PPUSH
13987: LD_INT 1
13989: PPUSH
13990: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13994: LD_STRING MR
13996: PPUSH
13997: CALL_OW 337
// end ; end ;
14001: END
// export function SpawnDenis ; var tmp ; begin
14002: LD_INT 0
14004: PPUSH
14005: PPUSH
// PrepareDenis ;
14006: CALL 2220 0 0
// CenterNowOnUnits ( Denis ) ;
14010: LD_EXP 9
14014: PPUSH
14015: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
14019: LD_ADDR_VAR 0 2
14023: PUSH
14024: LD_INT 22
14026: PUSH
14027: LD_INT 1
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
14039: LD_EXP 9
14043: PPUSH
14044: LD_VAR 0 2
14048: PPUSH
14049: LD_EXP 9
14053: PPUSH
14054: CALL_OW 74
14058: PPUSH
14059: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14063: LD_INT 35
14065: PPUSH
14066: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
14070: LD_INT 22
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 91
14082: PUSH
14083: LD_EXP 9
14087: PUSH
14088: LD_INT 10
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: LIST
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PPUSH
14100: CALL_OW 69
14104: IFFALSE 14063
// SetSide ( Denis , 1 ) ;
14106: LD_EXP 9
14110: PPUSH
14111: LD_INT 1
14113: PPUSH
14114: CALL_OW 235
// DialogueOn ;
14118: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
14122: LD_EXP 9
14126: PPUSH
14127: LD_STRING DDen-Den-1
14129: PPUSH
14130: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
14134: LD_EXP 1
14138: PPUSH
14139: LD_STRING DDen-JMM-1
14141: PPUSH
14142: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
14146: LD_EXP 9
14150: PPUSH
14151: LD_STRING DDen-Den-2
14153: PPUSH
14154: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
14158: LD_EXP 1
14162: PPUSH
14163: LD_STRING DDen-JMM-2
14165: PPUSH
14166: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
14170: LD_EXP 9
14174: PPUSH
14175: LD_STRING DDen-Den-3
14177: PPUSH
14178: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
14182: LD_EXP 1
14186: PPUSH
14187: LD_STRING DDen-JMM-3
14189: PPUSH
14190: CALL_OW 88
// DialogueOff ;
14194: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14198: LD_INT 36
14200: PPUSH
14201: LD_INT 1
14203: PPUSH
14204: LD_INT 1
14206: PPUSH
14207: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14211: LD_INT 15
14213: PPUSH
14214: LD_INT 1
14216: PPUSH
14217: LD_INT 1
14219: PPUSH
14220: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14224: LD_STRING MR
14226: PPUSH
14227: CALL_OW 337
// end ;
14231: LD_VAR 0 1
14235: RET
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14236: CALL 14291 0 0
14240: PUSH
14241: LD_EXP 9
14245: PPUSH
14246: CALL_OW 302
14250: AND
14251: PUSH
14252: LD_INT 1
14254: PPUSH
14255: CALL_OW 463
14259: NOT
14260: AND
14261: IFFALSE 14290
14263: GO 14265
14265: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14266: LD_EXP 9
14270: PPUSH
14271: LD_STRING DR1-Den-1
14273: PPUSH
14274: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14278: LD_EXP 1
14282: PPUSH
14283: LD_STRING DR1-JMM-1
14285: PPUSH
14286: CALL_OW 88
// end ;
14290: END
// function CheckOptoLab ; var i ; begin
14291: LD_INT 0
14293: PPUSH
14294: PPUSH
// result = false ;
14295: LD_ADDR_VAR 0 1
14299: PUSH
14300: LD_INT 0
14302: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14303: LD_ADDR_VAR 0 2
14307: PUSH
14308: LD_INT 22
14310: PUSH
14311: LD_INT 1
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: LD_INT 2
14320: PUSH
14321: LD_INT 30
14323: PUSH
14324: LD_INT 7
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 30
14333: PUSH
14334: LD_INT 8
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: LIST
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PPUSH
14350: CALL_OW 69
14354: PUSH
14355: FOR_IN
14356: IFFALSE 14408
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14358: LD_VAR 0 2
14362: PPUSH
14363: LD_INT 1
14365: PPUSH
14366: CALL_OW 268
14370: PUSH
14371: LD_INT 15
14373: EQUAL
14374: PUSH
14375: LD_VAR 0 2
14379: PPUSH
14380: LD_INT 2
14382: PPUSH
14383: CALL_OW 268
14387: PUSH
14388: LD_INT 15
14390: EQUAL
14391: OR
14392: IFFALSE 14404
// begin result = true ;
14394: LD_ADDR_VAR 0 1
14398: PUSH
14399: LD_INT 1
14401: ST_TO_ADDR
// break ;
14402: GO 14408
// end ; break ;
14404: GO 14408
// end ;
14406: GO 14355
14408: POP
14409: POP
// end ;
14410: LD_VAR 0 1
14414: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14415: LD_INT 15
14417: PPUSH
14418: LD_INT 1
14420: PPUSH
14421: CALL_OW 321
14425: PUSH
14426: LD_INT 2
14428: EQUAL
14429: PUSH
14430: LD_EXP 9
14434: PPUSH
14435: CALL_OW 302
14439: AND
14440: PUSH
14441: LD_INT 1
14443: PPUSH
14444: CALL_OW 463
14448: NOT
14449: AND
14450: IFFALSE 14682
14452: GO 14454
14454: DISABLE
// begin DialogueOn ;
14455: CALL_OW 6
// if IsOK ( Denis ) then
14459: LD_EXP 9
14463: PPUSH
14464: CALL_OW 302
14468: IFFALSE 14484
// begin Say ( Denis , DR2-Den-1 ) ;
14470: LD_EXP 9
14474: PPUSH
14475: LD_STRING DR2-Den-1
14477: PPUSH
14478: CALL_OW 88
// end else
14482: GO 14543
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14484: LD_INT 22
14486: PUSH
14487: LD_INT 1
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: LD_INT 21
14496: PUSH
14497: LD_INT 1
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 25
14506: PUSH
14507: LD_INT 4
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: LIST
14518: PPUSH
14519: CALL_OW 69
14523: PUSH
14524: LD_EXP 1
14528: PUSH
14529: EMPTY
14530: LIST
14531: DIFF
14532: PPUSH
14533: LD_STRING DR2-Sci1-1
14535: PPUSH
14536: LD_STRING DR2-FSci1-1
14538: PPUSH
14539: CALL 6214 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14543: LD_EXP 1
14547: PPUSH
14548: LD_STRING DR2-JMM-1
14550: PPUSH
14551: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14555: LD_INT 22
14557: PUSH
14558: LD_INT 1
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: LD_INT 21
14567: PUSH
14568: LD_INT 1
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 2
14577: PUSH
14578: LD_INT 25
14580: PUSH
14581: LD_INT 1
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: LD_INT 25
14590: PUSH
14591: LD_INT 2
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: LD_INT 25
14600: PUSH
14601: LD_INT 3
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 25
14610: PUSH
14611: LD_INT 4
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: LIST
14629: PPUSH
14630: CALL_OW 69
14634: PUSH
14635: LD_EXP 1
14639: PUSH
14640: LD_EXP 9
14644: PUSH
14645: LD_EXP 8
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: LIST
14654: DIFF
14655: PPUSH
14656: LD_STRING DR2-Sol1-1
14658: PPUSH
14659: LD_STRING DR2-Sol1-11
14661: PPUSH
14662: CALL 6214 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14666: LD_EXP 1
14670: PPUSH
14671: LD_STRING DR2-JMM-2
14673: PPUSH
14674: CALL_OW 88
// DialogueOff ;
14678: CALL_OW 7
// end ;
14682: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14683: LD_INT 22
14685: PUSH
14686: LD_INT 1
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PUSH
14693: LD_INT 30
14695: PUSH
14696: LD_INT 36
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PPUSH
14707: CALL_OW 69
14711: PUSH
14712: LD_INT 0
14714: EQUAL
14715: PUSH
14716: LD_INT 22
14718: PUSH
14719: LD_INT 1
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: PUSH
14726: LD_INT 21
14728: PUSH
14729: LD_INT 2
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PUSH
14736: LD_INT 33
14738: PUSH
14739: LD_INT 2
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: LIST
14750: PPUSH
14751: CALL_OW 69
14755: PUSH
14756: LD_INT 0
14758: GREATER
14759: AND
14760: PUSH
14761: LD_EXP 23
14765: PUSH
14766: LD_INT 0
14768: EQUAL
14769: AND
14770: PUSH
14771: LD_INT 1
14773: PPUSH
14774: CALL_OW 463
14778: NOT
14779: AND
14780: IFFALSE 14917
14782: GO 14784
14784: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14785: LD_INT 22
14787: PUSH
14788: LD_INT 1
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 21
14797: PUSH
14798: LD_INT 1
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 25
14807: PUSH
14808: LD_INT 3
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: LD_INT 26
14817: PUSH
14818: LD_INT 1
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: PPUSH
14831: CALL_OW 69
14835: PUSH
14836: LD_EXP 1
14840: PUSH
14841: LD_EXP 6
14845: PUSH
14846: LD_EXP 7
14850: PUSH
14851: LD_EXP 9
14855: PUSH
14856: LD_EXP 15
14860: PUSH
14861: LD_EXP 3
14865: PUSH
14866: LD_EXP 4
14870: PUSH
14871: LD_EXP 2
14875: PUSH
14876: LD_EXP 5
14880: PUSH
14881: LD_EXP 8
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: DIFF
14898: PPUSH
14899: LD_STRING D3a-Mech1-1
14901: PPUSH
14902: LD_STRING D3a-Mech1-1
14904: PPUSH
14905: CALL 6214 0 3
// firstTower = 2 ;
14909: LD_ADDR_EXP 23
14913: PUSH
14914: LD_INT 2
14916: ST_TO_ADDR
// end ;
14917: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14918: LD_INT 22
14920: PUSH
14921: LD_INT 3
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 21
14930: PUSH
14931: LD_INT 3
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PPUSH
14942: CALL_OW 69
14946: PUSH
14947: LD_INT 0
14949: EQUAL
14950: IFFALSE 15065
14952: GO 14954
14954: DISABLE
14955: LD_INT 0
14957: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14958: LD_ADDR_VAR 0 1
14962: PUSH
14963: LD_INT 22
14965: PUSH
14966: LD_INT 1
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: LD_INT 21
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: LD_INT 2
14985: PUSH
14986: LD_INT 25
14988: PUSH
14989: LD_INT 1
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: LD_INT 25
14998: PUSH
14999: LD_INT 2
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 25
15008: PUSH
15009: LD_INT 3
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 25
15018: PUSH
15019: LD_INT 4
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: LIST
15037: PPUSH
15038: CALL_OW 69
15042: PUSH
15043: FOR_IN
15044: IFFALSE 15063
// AddExperience ( i , 1 , 10000 ) ;
15046: LD_VAR 0 1
15050: PPUSH
15051: LD_INT 1
15053: PPUSH
15054: LD_INT 10000
15056: PPUSH
15057: CALL_OW 492
15061: GO 15043
15063: POP
15064: POP
// end ;
15065: PPOPN 1
15067: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
15068: LD_INT 22
15070: PUSH
15071: LD_INT 1
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: LD_INT 30
15080: PUSH
15081: LD_INT 36
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PPUSH
15092: CALL_OW 69
15096: PUSH
15097: LD_INT 0
15099: GREATER
15100: PUSH
15101: LD_INT 22
15103: PUSH
15104: LD_INT 1
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 21
15113: PUSH
15114: LD_INT 2
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 33
15123: PUSH
15124: LD_INT 2
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: PPUSH
15136: CALL_OW 69
15140: PUSH
15141: LD_INT 0
15143: GREATER
15144: AND
15145: PUSH
15146: CALL 15738 0 0
15150: AND
15151: PUSH
15152: LD_INT 1
15154: PPUSH
15155: CALL_OW 463
15159: NOT
15160: AND
15161: IFFALSE 15735
15163: GO 15165
15165: DISABLE
15166: LD_INT 0
15168: PPUSH
15169: PPUSH
15170: PPUSH
15171: PPUSH
15172: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_INT 22
15180: PUSH
15181: LD_INT 1
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: LD_INT 30
15190: PUSH
15191: LD_INT 36
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PPUSH
15202: CALL_OW 69
15206: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
15207: LD_ADDR_VAR 0 4
15211: PUSH
15212: LD_INT 22
15214: PUSH
15215: LD_INT 1
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: LD_INT 21
15224: PUSH
15225: LD_INT 2
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 33
15234: PUSH
15235: LD_INT 2
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: LIST
15246: PPUSH
15247: CALL_OW 69
15251: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15252: LD_ADDR_VAR 0 5
15256: PUSH
15257: EMPTY
15258: ST_TO_ADDR
// for i in tmpControlTowers do
15259: LD_ADDR_VAR 0 1
15263: PUSH
15264: LD_VAR 0 3
15268: PUSH
15269: FOR_IN
15270: IFFALSE 15733
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15272: LD_EXP 1
15276: PPUSH
15277: CALL_OW 310
15281: PUSH
15282: LD_VAR 0 1
15286: EQUAL
15287: PUSH
15288: LD_EXP 1
15292: PPUSH
15293: CALL_OW 257
15297: PUSH
15298: LD_INT 3
15300: EQUAL
15301: AND
15302: IFFALSE 15432
// begin InGameOn ;
15304: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15308: LD_VAR 0 4
15312: PUSH
15313: LD_INT 1
15315: ARRAY
15316: PPUSH
15317: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15321: LD_EXP 1
15325: PPUSH
15326: LD_STRING D4a-JMM-1
15328: PPUSH
15329: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15333: LD_VAR 0 4
15337: PUSH
15338: LD_INT 1
15340: ARRAY
15341: PPUSH
15342: LD_EXP 1
15346: PPUSH
15347: CALL_OW 53
// wait ( 0 0$1 ) ;
15351: LD_INT 35
15353: PPUSH
15354: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15358: LD_VAR 0 4
15362: PUSH
15363: LD_INT 1
15365: ARRAY
15366: PPUSH
15367: LD_VAR 0 4
15371: PUSH
15372: LD_INT 1
15374: ARRAY
15375: PPUSH
15376: CALL_OW 250
15380: PUSH
15381: LD_INT 3
15383: PLUS
15384: PPUSH
15385: LD_VAR 0 4
15389: PUSH
15390: LD_INT 1
15392: ARRAY
15393: PPUSH
15394: CALL_OW 251
15398: PUSH
15399: LD_INT 2
15401: MINUS
15402: PPUSH
15403: CALL_OW 111
// wait ( 0 0$2 ) ;
15407: LD_INT 70
15409: PPUSH
15410: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15414: LD_EXP 1
15418: PPUSH
15419: LD_STRING D4b-JMM-1
15421: PPUSH
15422: CALL_OW 88
// InGameOff ;
15426: CALL_OW 9
// end else
15430: GO 15731
// begin InGameOn ;
15432: CALL_OW 8
// for j in UnitsInside ( i ) do
15436: LD_ADDR_VAR 0 2
15440: PUSH
15441: LD_VAR 0 1
15445: PPUSH
15446: CALL_OW 313
15450: PUSH
15451: FOR_IN
15452: IFFALSE 15487
// if GetClass ( j ) = 3 then
15454: LD_VAR 0 2
15458: PPUSH
15459: CALL_OW 257
15463: PUSH
15464: LD_INT 3
15466: EQUAL
15467: IFFALSE 15485
// tmpMechanicInside = tmpMechanicInside ^ j ;
15469: LD_ADDR_VAR 0 5
15473: PUSH
15474: LD_VAR 0 5
15478: PUSH
15479: LD_VAR 0 2
15483: ADD
15484: ST_TO_ADDR
15485: GO 15451
15487: POP
15488: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15489: LD_VAR 0 5
15493: PUSH
15494: LD_INT 1
15496: ARRAY
15497: PPUSH
15498: CALL_OW 258
15502: PUSH
15503: LD_INT 1
15505: EQUAL
15506: IFFALSE 15524
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15508: LD_VAR 0 5
15512: PUSH
15513: LD_INT 1
15515: ARRAY
15516: PPUSH
15517: LD_STRING D4a-Mech1-1
15519: PPUSH
15520: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15524: LD_VAR 0 5
15528: PUSH
15529: LD_INT 1
15531: ARRAY
15532: PPUSH
15533: CALL_OW 258
15537: PUSH
15538: LD_INT 2
15540: EQUAL
15541: IFFALSE 15559
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15543: LD_VAR 0 5
15547: PUSH
15548: LD_INT 1
15550: ARRAY
15551: PPUSH
15552: LD_STRING D4a-FMech1-1
15554: PPUSH
15555: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15559: LD_VAR 0 4
15563: PUSH
15564: LD_INT 1
15566: ARRAY
15567: PPUSH
15568: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15572: LD_VAR 0 4
15576: PUSH
15577: LD_INT 1
15579: ARRAY
15580: PPUSH
15581: LD_VAR 0 5
15585: PUSH
15586: LD_INT 1
15588: ARRAY
15589: PPUSH
15590: CALL_OW 53
// wait ( 0 0$1 ) ;
15594: LD_INT 35
15596: PPUSH
15597: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15601: LD_VAR 0 4
15605: PUSH
15606: LD_INT 1
15608: ARRAY
15609: PPUSH
15610: LD_VAR 0 4
15614: PUSH
15615: LD_INT 1
15617: ARRAY
15618: PPUSH
15619: CALL_OW 250
15623: PUSH
15624: LD_INT 3
15626: PLUS
15627: PPUSH
15628: LD_VAR 0 4
15632: PUSH
15633: LD_INT 1
15635: ARRAY
15636: PPUSH
15637: CALL_OW 251
15641: PUSH
15642: LD_INT 2
15644: MINUS
15645: PPUSH
15646: CALL_OW 111
// wait ( 0 0$2 ) ;
15650: LD_INT 70
15652: PPUSH
15653: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15657: LD_VAR 0 5
15661: PUSH
15662: LD_INT 1
15664: ARRAY
15665: PPUSH
15666: CALL_OW 258
15670: PUSH
15671: LD_INT 1
15673: EQUAL
15674: IFFALSE 15692
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15676: LD_VAR 0 5
15680: PUSH
15681: LD_INT 1
15683: ARRAY
15684: PPUSH
15685: LD_STRING D4b-Mech1-1
15687: PPUSH
15688: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15692: LD_VAR 0 5
15696: PUSH
15697: LD_INT 1
15699: ARRAY
15700: PPUSH
15701: CALL_OW 258
15705: PUSH
15706: LD_INT 2
15708: EQUAL
15709: IFFALSE 15727
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15711: LD_VAR 0 5
15715: PUSH
15716: LD_INT 1
15718: ARRAY
15719: PPUSH
15720: LD_STRING D4b-FMech1-1
15722: PPUSH
15723: CALL_OW 88
// InGameOff ;
15727: CALL_OW 9
// end ; end ;
15731: GO 15269
15733: POP
15734: POP
// end ;
15735: PPOPN 5
15737: END
// function CheckMehInside ; var i , j ; begin
15738: LD_INT 0
15740: PPUSH
15741: PPUSH
15742: PPUSH
// result = false ;
15743: LD_ADDR_VAR 0 1
15747: PUSH
15748: LD_INT 0
15750: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15751: LD_ADDR_VAR 0 2
15755: PUSH
15756: LD_INT 22
15758: PUSH
15759: LD_INT 1
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: PUSH
15766: LD_INT 30
15768: PUSH
15769: LD_INT 36
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PPUSH
15780: CALL_OW 69
15784: PUSH
15785: FOR_IN
15786: IFFALSE 15837
// begin for j in UnitsInside ( i ) do
15788: LD_ADDR_VAR 0 3
15792: PUSH
15793: LD_VAR 0 2
15797: PPUSH
15798: CALL_OW 313
15802: PUSH
15803: FOR_IN
15804: IFFALSE 15833
// begin if GetClass ( j ) = 3 then
15806: LD_VAR 0 3
15810: PPUSH
15811: CALL_OW 257
15815: PUSH
15816: LD_INT 3
15818: EQUAL
15819: IFFALSE 15831
// begin result = true ;
15821: LD_ADDR_VAR 0 1
15825: PUSH
15826: LD_INT 1
15828: ST_TO_ADDR
// break ;
15829: GO 15833
// end ; end ;
15831: GO 15803
15833: POP
15834: POP
// end ;
15835: GO 15785
15837: POP
15838: POP
// end ;
15839: LD_VAR 0 1
15843: RET
// every 25 25$0 do
15844: GO 15846
15846: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15847: LD_INT 35
15849: PPUSH
15850: CALL_OW 67
// until not InBattle ( 1 ) ;
15854: LD_INT 1
15856: PPUSH
15857: CALL_OW 463
15861: NOT
15862: IFFALSE 15847
// PrepareKurt ;
15864: CALL 19489 0 0
// end ;
15868: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 do
15869: LD_EXP 15
15873: PPUSH
15874: CALL_OW 302
15878: PUSH
15879: LD_EXP 15
15883: PPUSH
15884: CALL_OW 255
15888: PUSH
15889: LD_INT 1
15891: EQUAL
15892: AND
15893: IFFALSE 16058
15895: GO 15897
15897: DISABLE
// begin wait ( 0 0$20 ) ;
15898: LD_INT 700
15900: PPUSH
15901: CALL_OW 67
// if not IsOk ( Joan ) then
15905: LD_EXP 15
15909: PPUSH
15910: CALL_OW 302
15914: NOT
15915: IFFALSE 15919
// exit ;
15917: GO 16058
// if IsOK ( Lisa ) then
15919: LD_EXP 2
15923: PPUSH
15924: CALL_OW 302
15928: IFFALSE 16058
// begin DialogueOn ;
15930: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15934: LD_EXP 2
15938: PPUSH
15939: LD_STRING D7-Lisa-1
15941: PPUSH
15942: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15946: LD_EXP 1
15950: PPUSH
15951: LD_STRING D7-JMM-1
15953: PPUSH
15954: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15958: LD_EXP 2
15962: PPUSH
15963: LD_STRING D7-Lisa-2
15965: PPUSH
15966: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15970: LD_EXP 1
15974: PPUSH
15975: LD_STRING D7-JMM-2
15977: PPUSH
15978: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15982: LD_EXP 2
15986: PPUSH
15987: LD_STRING D7-Lisa-3
15989: PPUSH
15990: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15994: LD_EXP 1
15998: PPUSH
15999: LD_STRING D7-JMM-3
16001: PPUSH
16002: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
16006: LD_EXP 2
16010: PPUSH
16011: LD_STRING D7-Lisa-4
16013: PPUSH
16014: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
16018: LD_EXP 1
16022: PPUSH
16023: LD_STRING D7-JMM-4
16025: PPUSH
16026: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
16030: LD_EXP 1
16034: PPUSH
16035: LD_STRING D7-JMM-4a
16037: PPUSH
16038: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
16042: LD_EXP 2
16046: PPUSH
16047: LD_STRING D7-Lisa-5
16049: PPUSH
16050: CALL_OW 88
// DialogueOff ;
16054: CALL_OW 7
// end ; end ;
16058: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
16059: LD_EXP 13
16063: PUSH
16064: LD_INT 22
16066: PUSH
16067: LD_INT 1
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 91
16076: PUSH
16077: LD_EXP 13
16081: PUSH
16082: LD_INT 10
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 2
16092: PUSH
16093: LD_INT 25
16095: PUSH
16096: LD_INT 1
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 25
16105: PUSH
16106: LD_INT 2
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: LD_INT 25
16115: PUSH
16116: LD_INT 3
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PUSH
16123: LD_INT 25
16125: PUSH
16126: LD_INT 4
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: LIST
16144: PPUSH
16145: CALL_OW 69
16149: PUSH
16150: LD_INT 1
16152: GREATER
16153: AND
16154: IFFALSE 16171
16156: GO 16158
16158: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
16159: LD_EXP 13
16163: PPUSH
16164: LD_STRING D5-Sol1-1
16166: PPUSH
16167: CALL_OW 88
// end ;
16171: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
16172: LD_INT 22
16174: PUSH
16175: LD_INT 1
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 33
16184: PUSH
16185: LD_INT 2
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PPUSH
16196: CALL_OW 69
16200: PUSH
16201: LD_INT 2
16203: GREATEREQUAL
16204: IFFALSE 16224
16206: GO 16208
16208: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
16209: LD_STRING MRa
16211: PPUSH
16212: CALL_OW 337
// remoteVehiclesBuild = 1 ;
16216: LD_ADDR_EXP 28
16220: PUSH
16221: LD_INT 1
16223: ST_TO_ADDR
// end ;
16224: END
// every 2 2$00 do var i , last ;
16225: GO 16227
16227: DISABLE
16228: LD_INT 0
16230: PPUSH
16231: PPUSH
// begin last := 8 ;
16232: LD_ADDR_VAR 0 2
16236: PUSH
16237: LD_INT 8
16239: ST_TO_ADDR
// for i = 1 to last do
16240: LD_ADDR_VAR 0 1
16244: PUSH
16245: DOUBLE
16246: LD_INT 1
16248: DEC
16249: ST_TO_ADDR
16250: LD_VAR 0 2
16254: PUSH
16255: FOR_TO
16256: IFFALSE 16284
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
16258: LD_INT 6300
16260: PPUSH
16261: LD_INT 12600
16263: PPUSH
16264: CALL_OW 12
16268: PPUSH
16269: CALL_OW 67
// PrepareRandoms ( i ) ;
16273: LD_VAR 0 1
16277: PPUSH
16278: CALL 4052 0 1
// end ;
16282: GO 16255
16284: POP
16285: POP
// end ;
16286: PPOPN 2
16288: END
// every 5 5$20 do
16289: GO 16291
16291: DISABLE
// begin DialogueOn ;
16292: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16296: LD_EXP 10
16300: PPUSH
16301: LD_STRING D12a-Sci-1
16303: PPUSH
16304: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16308: LD_EXP 1
16312: PPUSH
16313: LD_STRING D12a-JMM-1
16315: PPUSH
16316: CALL_OW 88
// DialogueOff ;
16320: CALL_OW 7
// cratesStatus = 1 ;
16324: LD_ADDR_EXP 38
16328: PUSH
16329: LD_INT 1
16331: ST_TO_ADDR
// end ;
16332: END
// every 13 13$0 do
16333: GO 16335
16335: DISABLE
// begin DialogueOn ;
16336: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16340: LD_EXP 10
16344: PPUSH
16345: LD_STRING D12b-Sci-1
16347: PPUSH
16348: CALL_OW 94
// DialogueOff ;
16352: CALL_OW 7
// cratesStatus = 2 ;
16356: LD_ADDR_EXP 38
16360: PUSH
16361: LD_INT 2
16363: ST_TO_ADDR
// end ;
16364: END
// every 32 32$0 do
16365: GO 16367
16367: DISABLE
// begin DialogueOn ;
16368: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16372: LD_EXP 10
16376: PPUSH
16377: LD_STRING D12c-Sci-1
16379: PPUSH
16380: CALL_OW 94
// DialogueOff ;
16384: CALL_OW 7
// wait ( 3 3$0 ) ;
16388: LD_INT 6300
16390: PPUSH
16391: CALL_OW 67
// DialogueOn ;
16395: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16399: LD_EXP 10
16403: PPUSH
16404: LD_STRING D12d-Sci-1
16406: PPUSH
16407: CALL_OW 94
// DialogueOff ;
16411: CALL_OW 7
// cratesStatus = 1 ;
16415: LD_ADDR_EXP 38
16419: PUSH
16420: LD_INT 1
16422: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16423: LD_INT 1400
16425: PPUSH
16426: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16430: LD_INT 35
16432: PPUSH
16433: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
16437: LD_INT 1
16439: PPUSH
16440: CALL_OW 463
16444: NOT
16445: PUSH
16446: LD_INT 32
16448: PPUSH
16449: LD_INT 81
16451: PUSH
16452: LD_INT 1
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PPUSH
16459: CALL_OW 70
16463: NOT
16464: AND
16465: IFFALSE 16430
// PrepareJoan ;
16467: CALL 3016 0 0
// end ;
16471: END
// every 42 42$0 do
16472: GO 16474
16474: DISABLE
// begin DialogueOn ;
16475: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16479: LD_EXP 10
16483: PPUSH
16484: LD_STRING D12e-Sci-1
16486: PPUSH
16487: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16491: LD_EXP 1
16495: PPUSH
16496: LD_STRING D12e-JMM-1
16498: PPUSH
16499: CALL_OW 88
// DialogueOff ;
16503: CALL_OW 7
// cratesStatus = 2 ;
16507: LD_ADDR_EXP 38
16511: PUSH
16512: LD_INT 2
16514: ST_TO_ADDR
// end ;
16515: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16516: LD_INT 22
16518: PUSH
16519: LD_INT 6
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 21
16528: PUSH
16529: LD_INT 2
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: LD_INT 34
16538: PUSH
16539: LD_INT 51
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: PPUSH
16551: CALL_OW 69
16555: PUSH
16556: LD_INT 0
16558: GREATER
16559: IFFALSE 16642
16561: GO 16563
16563: DISABLE
16564: LD_INT 0
16566: PPUSH
// begin enable ;
16567: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16568: LD_ADDR_VAR 0 1
16572: PUSH
16573: LD_INT 22
16575: PUSH
16576: LD_INT 6
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 2
16585: PUSH
16586: LD_INT 21
16588: PUSH
16589: LD_INT 1
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 21
16598: PUSH
16599: LD_INT 2
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: LIST
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PPUSH
16615: CALL_OW 69
16619: PUSH
16620: FOR_IN
16621: IFFALSE 16640
// ComAgressiveMove ( i , 138 , 168 ) ;
16623: LD_VAR 0 1
16627: PPUSH
16628: LD_INT 138
16630: PPUSH
16631: LD_INT 168
16633: PPUSH
16634: CALL_OW 114
16638: GO 16620
16640: POP
16641: POP
// end ;
16642: PPOPN 1
16644: END
// every 0 0$1 do var i ;
16645: GO 16647
16647: DISABLE
16648: LD_INT 0
16650: PPUSH
// begin enable ;
16651: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16652: LD_ADDR_VAR 0 1
16656: PUSH
16657: LD_INT 4
16659: PPUSH
16660: LD_INT 2
16662: PUSH
16663: LD_INT 22
16665: PUSH
16666: LD_INT 3
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 22
16675: PUSH
16676: LD_INT 6
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: LIST
16687: PUSH
16688: EMPTY
16689: LIST
16690: PPUSH
16691: CALL_OW 70
16695: PUSH
16696: FOR_IN
16697: IFFALSE 16761
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16699: LD_INT 4
16701: PPUSH
16702: LD_INT 22
16704: PUSH
16705: LD_INT 6
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 34
16714: PUSH
16715: LD_INT 51
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PPUSH
16726: CALL_OW 70
16730: PUSH
16731: LD_INT 0
16733: GREATER
16734: IFFALSE 16750
// sendedConvoys = sendedConvoys + 1 ;
16736: LD_ADDR_EXP 39
16740: PUSH
16741: LD_EXP 39
16745: PUSH
16746: LD_INT 1
16748: PLUS
16749: ST_TO_ADDR
// RemoveUnit ( i ) ;
16750: LD_VAR 0 1
16754: PPUSH
16755: CALL_OW 64
// end ;
16759: GO 16696
16761: POP
16762: POP
// end ; end_of_file
16763: PPOPN 1
16765: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16766: LD_VAR 0 1
16770: PUSH
16771: LD_INT 1
16773: EQUAL
16774: PUSH
16775: LD_VAR 0 2
16779: PUSH
16780: LD_INT 3
16782: EQUAL
16783: AND
16784: IFFALSE 16794
// contactWithRussian = 1 ;
16786: LD_ADDR_EXP 22
16790: PUSH
16791: LD_INT 1
16793: ST_TO_ADDR
// end ;
16794: PPOPN 2
16796: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16797: LD_VAR 0 1
16801: PPUSH
16802: CALL_OW 266
16806: PUSH
16807: LD_INT 36
16809: EQUAL
16810: PUSH
16811: LD_VAR 0 1
16815: PPUSH
16816: CALL_OW 255
16820: PUSH
16821: LD_INT 1
16823: EQUAL
16824: AND
16825: PUSH
16826: LD_INT 22
16828: PUSH
16829: LD_INT 1
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 21
16838: PUSH
16839: LD_INT 2
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 33
16848: PUSH
16849: LD_INT 2
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: LIST
16860: PPUSH
16861: CALL_OW 69
16865: PUSH
16866: LD_INT 0
16868: EQUAL
16869: AND
16870: PUSH
16871: LD_EXP 23
16875: PUSH
16876: LD_INT 0
16878: EQUAL
16879: AND
16880: IFFALSE 16960
// begin firstTower = 1 ;
16882: LD_ADDR_EXP 23
16886: PUSH
16887: LD_INT 1
16889: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16890: LD_INT 22
16892: PUSH
16893: LD_INT 1
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 21
16902: PUSH
16903: LD_INT 1
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 25
16912: PUSH
16913: LD_INT 3
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 26
16922: PUSH
16923: LD_INT 1
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: PPUSH
16936: CALL_OW 69
16940: PUSH
16941: LD_EXP 1
16945: PUSH
16946: EMPTY
16947: LIST
16948: DIFF
16949: PPUSH
16950: LD_STRING D3b-Mech1-1
16952: PPUSH
16953: LD_STRING D3b-Mech1-1
16955: PPUSH
16956: CALL 6214 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16960: LD_VAR 0 1
16964: PPUSH
16965: CALL_OW 266
16969: PUSH
16970: LD_INT 0
16972: EQUAL
16973: PUSH
16974: LD_VAR 0 1
16978: PPUSH
16979: CALL_OW 255
16983: PUSH
16984: LD_INT 1
16986: EQUAL
16987: AND
16988: IFFALSE 17002
// SetBName ( building , theta ) ;
16990: LD_VAR 0 1
16994: PPUSH
16995: LD_STRING theta
16997: PPUSH
16998: CALL_OW 500
// if GetSide ( building ) = 3 then
17002: LD_VAR 0 1
17006: PPUSH
17007: CALL_OW 255
17011: PUSH
17012: LD_INT 3
17014: EQUAL
17015: IFFALSE 17089
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17017: LD_ADDR_EXP 31
17021: PUSH
17022: LD_EXP 31
17026: PPUSH
17027: LD_INT 1
17029: PPUSH
17030: CALL_OW 3
17034: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17035: LD_ADDR_EXP 31
17039: PUSH
17040: LD_EXP 31
17044: PPUSH
17045: LD_INT 1
17047: PPUSH
17048: CALL_OW 3
17052: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17053: LD_ADDR_EXP 31
17057: PUSH
17058: LD_EXP 31
17062: PPUSH
17063: LD_INT 1
17065: PPUSH
17066: CALL_OW 3
17070: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17071: LD_ADDR_EXP 31
17075: PUSH
17076: LD_EXP 31
17080: PPUSH
17081: LD_INT 1
17083: PPUSH
17084: CALL_OW 3
17088: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
17089: LD_VAR 0 1
17093: PPUSH
17094: CALL_OW 255
17098: PUSH
17099: LD_INT 3
17101: EQUAL
17102: PUSH
17103: LD_VAR 0 1
17107: PPUSH
17108: CALL_OW 266
17112: PUSH
17113: LD_INT 0
17115: EQUAL
17116: PUSH
17117: LD_VAR 0 1
17121: PPUSH
17122: CALL_OW 266
17126: PUSH
17127: LD_INT 2
17129: EQUAL
17130: OR
17131: PUSH
17132: LD_VAR 0 1
17136: PPUSH
17137: CALL_OW 266
17141: PUSH
17142: LD_INT 4
17144: EQUAL
17145: OR
17146: PUSH
17147: EMPTY
17148: LIST
17149: AND
17150: IFFALSE 17161
// ComUpgrade ( building ) ;
17152: LD_VAR 0 1
17156: PPUSH
17157: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
17161: LD_VAR 0 1
17165: PPUSH
17166: CALL_OW 255
17170: PUSH
17171: LD_INT 3
17173: EQUAL
17174: PUSH
17175: LD_VAR 0 1
17179: PPUSH
17180: CALL_OW 266
17184: PUSH
17185: LD_INT 32
17187: EQUAL
17188: AND
17189: IFFALSE 17230
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
17191: LD_VAR 0 1
17195: PPUSH
17196: LD_INT 42
17198: PUSH
17199: LD_INT 43
17201: PUSH
17202: LD_INT 44
17204: PUSH
17205: LD_INT 46
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 1
17216: PPUSH
17217: LD_INT 4
17219: PPUSH
17220: CALL_OW 12
17224: ARRAY
17225: PPUSH
17226: CALL_OW 208
// end ; end ;
17230: PPOPN 1
17232: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
17233: LD_VAR 0 1
17237: PUSH
17238: LD_INT 22
17240: PUSH
17241: LD_INT 1
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 21
17250: PUSH
17251: LD_INT 1
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 23
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: PPUSH
17273: CALL_OW 69
17277: IN
17278: IFFALSE 17294
// killCounter := killCounter + 1 ;
17280: LD_ADDR_EXP 47
17284: PUSH
17285: LD_EXP 47
17289: PUSH
17290: LD_INT 1
17292: PLUS
17293: ST_TO_ADDR
// if unit = JMM then
17294: LD_VAR 0 1
17298: PUSH
17299: LD_EXP 1
17303: EQUAL
17304: IFFALSE 17313
// YouLost ( JMM ) ;
17306: LD_STRING JMM
17308: PPUSH
17309: CALL_OW 104
// if unit = Joan then
17313: LD_VAR 0 1
17317: PUSH
17318: LD_EXP 15
17322: EQUAL
17323: IFFALSE 17333
// JoanStatus = 0 ;
17325: LD_ADDR_EXP 16
17329: PUSH
17330: LD_INT 0
17332: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17333: LD_VAR 0 1
17337: PPUSH
17338: CALL_OW 255
17342: PUSH
17343: LD_INT 1
17345: EQUAL
17346: PUSH
17347: LD_VAR 0 1
17351: PPUSH
17352: CALL_OW 247
17356: PUSH
17357: LD_INT 1
17359: EQUAL
17360: AND
17361: IFFALSE 17437
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17363: LD_VAR 0 1
17367: PPUSH
17368: CALL_OW 257
17372: PUSH
17373: LD_INT 1
17375: EQUAL
17376: PUSH
17377: LD_VAR 0 1
17381: PPUSH
17382: CALL_OW 257
17386: PUSH
17387: LD_INT 2
17389: EQUAL
17390: OR
17391: PUSH
17392: LD_VAR 0 1
17396: PPUSH
17397: CALL_OW 257
17401: PUSH
17402: LD_INT 3
17404: EQUAL
17405: OR
17406: PUSH
17407: LD_VAR 0 1
17411: PPUSH
17412: CALL_OW 257
17416: PUSH
17417: LD_INT 4
17419: EQUAL
17420: OR
17421: IFFALSE 17437
// unitLost = unitLost + 1 ;
17423: LD_ADDR_EXP 30
17427: PUSH
17428: LD_EXP 30
17432: PUSH
17433: LD_INT 1
17435: PLUS
17436: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17437: LD_VAR 0 1
17441: PPUSH
17442: CALL_OW 255
17446: PUSH
17447: LD_INT 3
17449: EQUAL
17450: PUSH
17451: LD_VAR 0 1
17455: PPUSH
17456: CALL_OW 247
17460: PUSH
17461: LD_INT 3
17463: EQUAL
17464: AND
17465: IFFALSE 18157
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17467: LD_VAR 0 1
17471: PPUSH
17472: CALL_OW 266
17476: PUSH
17477: LD_INT 31
17479: EQUAL
17480: PUSH
17481: LD_VAR 0 1
17485: PPUSH
17486: CALL_OW 266
17490: PUSH
17491: LD_INT 32
17493: EQUAL
17494: OR
17495: PUSH
17496: LD_VAR 0 1
17500: PPUSH
17501: CALL_OW 266
17505: PUSH
17506: LD_INT 36
17508: EQUAL
17509: OR
17510: PUSH
17511: LD_VAR 0 1
17515: PPUSH
17516: CALL_OW 266
17520: PUSH
17521: LD_INT 0
17523: EQUAL
17524: OR
17525: PUSH
17526: LD_VAR 0 1
17530: PPUSH
17531: CALL_OW 266
17535: PUSH
17536: LD_INT 24
17538: EQUAL
17539: OR
17540: PUSH
17541: LD_VAR 0 1
17545: PPUSH
17546: CALL_OW 266
17550: PUSH
17551: LD_INT 17
17553: EQUAL
17554: OR
17555: PUSH
17556: LD_VAR 0 1
17560: PPUSH
17561: CALL_OW 266
17565: PUSH
17566: LD_INT 25
17568: EQUAL
17569: OR
17570: PUSH
17571: LD_VAR 0 1
17575: PPUSH
17576: CALL_OW 266
17580: PUSH
17581: LD_INT 19
17583: EQUAL
17584: OR
17585: PUSH
17586: LD_VAR 0 1
17590: PPUSH
17591: CALL_OW 266
17595: PUSH
17596: LD_INT 20
17598: EQUAL
17599: OR
17600: PUSH
17601: LD_VAR 0 1
17605: PPUSH
17606: CALL_OW 266
17610: PUSH
17611: LD_INT 18
17613: EQUAL
17614: OR
17615: PUSH
17616: LD_VAR 0 1
17620: PPUSH
17621: CALL_OW 266
17625: PUSH
17626: LD_INT 21
17628: EQUAL
17629: OR
17630: PUSH
17631: LD_VAR 0 1
17635: PPUSH
17636: CALL_OW 266
17640: PUSH
17641: LD_INT 23
17643: EQUAL
17644: OR
17645: PUSH
17646: LD_VAR 0 1
17650: PPUSH
17651: CALL_OW 266
17655: PUSH
17656: LD_INT 16
17658: EQUAL
17659: OR
17660: PUSH
17661: LD_VAR 0 1
17665: PPUSH
17666: CALL_OW 266
17670: PUSH
17671: LD_INT 6
17673: EQUAL
17674: OR
17675: PUSH
17676: LD_VAR 0 1
17680: PPUSH
17681: CALL_OW 266
17685: PUSH
17686: LD_INT 29
17688: EQUAL
17689: OR
17690: PUSH
17691: LD_VAR 0 1
17695: PPUSH
17696: CALL_OW 266
17700: PUSH
17701: LD_INT 26
17703: EQUAL
17704: OR
17705: PUSH
17706: LD_VAR 0 1
17710: PPUSH
17711: CALL_OW 266
17715: PUSH
17716: LD_INT 30
17718: EQUAL
17719: OR
17720: PUSH
17721: LD_VAR 0 1
17725: PPUSH
17726: CALL_OW 266
17730: PUSH
17731: LD_INT 28
17733: EQUAL
17734: OR
17735: PUSH
17736: LD_VAR 0 1
17740: PPUSH
17741: CALL_OW 266
17745: PUSH
17746: LD_INT 27
17748: EQUAL
17749: OR
17750: PUSH
17751: LD_VAR 0 1
17755: PPUSH
17756: CALL_OW 266
17760: PUSH
17761: LD_INT 33
17763: EQUAL
17764: OR
17765: PUSH
17766: LD_VAR 0 1
17770: PPUSH
17771: CALL_OW 266
17775: PUSH
17776: LD_INT 2
17778: EQUAL
17779: OR
17780: PUSH
17781: LD_VAR 0 1
17785: PPUSH
17786: CALL_OW 266
17790: PUSH
17791: LD_INT 4
17793: EQUAL
17794: OR
17795: IFFALSE 17881
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17797: LD_ADDR_EXP 31
17801: PUSH
17802: LD_EXP 31
17806: PUSH
17807: LD_VAR 0 1
17811: PPUSH
17812: CALL_OW 266
17816: ADD
17817: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17818: LD_ADDR_EXP 31
17822: PUSH
17823: LD_EXP 31
17827: PUSH
17828: LD_VAR 0 1
17832: PPUSH
17833: CALL_OW 250
17837: ADD
17838: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17839: LD_ADDR_EXP 31
17843: PUSH
17844: LD_EXP 31
17848: PUSH
17849: LD_VAR 0 1
17853: PPUSH
17854: CALL_OW 251
17858: ADD
17859: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17860: LD_ADDR_EXP 31
17864: PUSH
17865: LD_EXP 31
17869: PUSH
17870: LD_VAR 0 1
17874: PPUSH
17875: CALL_OW 254
17879: ADD
17880: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17881: LD_VAR 0 1
17885: PPUSH
17886: CALL_OW 266
17890: PUSH
17891: LD_INT 1
17893: EQUAL
17894: IFFALSE 17973
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17896: LD_ADDR_EXP 31
17900: PUSH
17901: LD_EXP 31
17905: PUSH
17906: LD_INT 0
17908: ADD
17909: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17910: LD_ADDR_EXP 31
17914: PUSH
17915: LD_EXP 31
17919: PUSH
17920: LD_VAR 0 1
17924: PPUSH
17925: CALL_OW 250
17929: ADD
17930: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17931: LD_ADDR_EXP 31
17935: PUSH
17936: LD_EXP 31
17940: PUSH
17941: LD_VAR 0 1
17945: PPUSH
17946: CALL_OW 251
17950: ADD
17951: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17952: LD_ADDR_EXP 31
17956: PUSH
17957: LD_EXP 31
17961: PUSH
17962: LD_VAR 0 1
17966: PPUSH
17967: CALL_OW 254
17971: ADD
17972: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17973: LD_VAR 0 1
17977: PPUSH
17978: CALL_OW 266
17982: PUSH
17983: LD_INT 3
17985: EQUAL
17986: IFFALSE 18065
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17988: LD_ADDR_EXP 31
17992: PUSH
17993: LD_EXP 31
17997: PUSH
17998: LD_INT 2
18000: ADD
18001: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18002: LD_ADDR_EXP 31
18006: PUSH
18007: LD_EXP 31
18011: PUSH
18012: LD_VAR 0 1
18016: PPUSH
18017: CALL_OW 250
18021: ADD
18022: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18023: LD_ADDR_EXP 31
18027: PUSH
18028: LD_EXP 31
18032: PUSH
18033: LD_VAR 0 1
18037: PPUSH
18038: CALL_OW 251
18042: ADD
18043: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18044: LD_ADDR_EXP 31
18048: PUSH
18049: LD_EXP 31
18053: PUSH
18054: LD_VAR 0 1
18058: PPUSH
18059: CALL_OW 254
18063: ADD
18064: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18065: LD_VAR 0 1
18069: PPUSH
18070: CALL_OW 266
18074: PUSH
18075: LD_INT 5
18077: EQUAL
18078: IFFALSE 18157
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
18080: LD_ADDR_EXP 31
18084: PUSH
18085: LD_EXP 31
18089: PUSH
18090: LD_INT 4
18092: ADD
18093: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18094: LD_ADDR_EXP 31
18098: PUSH
18099: LD_EXP 31
18103: PUSH
18104: LD_VAR 0 1
18108: PPUSH
18109: CALL_OW 250
18113: ADD
18114: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18115: LD_ADDR_EXP 31
18119: PUSH
18120: LD_EXP 31
18124: PUSH
18125: LD_VAR 0 1
18129: PPUSH
18130: CALL_OW 251
18134: ADD
18135: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18136: LD_ADDR_EXP 31
18140: PUSH
18141: LD_EXP 31
18145: PUSH
18146: LD_VAR 0 1
18150: PPUSH
18151: CALL_OW 254
18155: ADD
18156: ST_TO_ADDR
// end ; end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18157: LD_EXP 48
18161: PUSH
18162: LD_VAR 0 1
18166: PPUSH
18167: CALL_OW 257
18171: PUSH
18172: LD_INT 3
18174: EQUAL
18175: AND
18176: PUSH
18177: LD_VAR 0 1
18181: PPUSH
18182: CALL_OW 255
18186: PUSH
18187: LD_INT 3
18189: EQUAL
18190: AND
18191: PUSH
18192: LD_INT 21
18194: PPUSH
18195: CALL_OW 302
18199: AND
18200: PUSH
18201: LD_INT 21
18203: PPUSH
18204: CALL_OW 255
18208: PUSH
18209: LD_INT 3
18211: EQUAL
18212: AND
18213: IFFALSE 18295
// begin ruMechCounter := ruMechCounter - 1 ;
18215: LD_ADDR_EXP 48
18219: PUSH
18220: LD_EXP 48
18224: PUSH
18225: LD_INT 1
18227: MINUS
18228: ST_TO_ADDR
// uc_side = 3 ;
18229: LD_ADDR_OWVAR 20
18233: PUSH
18234: LD_INT 3
18236: ST_TO_ADDR
// uc_nation = 3 ;
18237: LD_ADDR_OWVAR 21
18241: PUSH
18242: LD_INT 3
18244: ST_TO_ADDR
// hc_gallery :=  ;
18245: LD_ADDR_OWVAR 33
18249: PUSH
18250: LD_STRING 
18252: ST_TO_ADDR
// hc_name :=  ;
18253: LD_ADDR_OWVAR 26
18257: PUSH
18258: LD_STRING 
18260: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18261: LD_INT 0
18263: PPUSH
18264: LD_EXP 34
18268: PPUSH
18269: LD_EXP 35
18273: PPUSH
18274: CALL_OW 12
18278: PPUSH
18279: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
18283: CALL_OW 44
18287: PPUSH
18288: LD_INT 21
18290: PPUSH
18291: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18295: LD_VAR 0 1
18299: PPUSH
18300: CALL_OW 255
18304: PUSH
18305: LD_INT 3
18307: EQUAL
18308: PUSH
18309: LD_VAR 0 1
18313: PPUSH
18314: CALL_OW 264
18318: PUSH
18319: LD_INT 52
18321: EQUAL
18322: AND
18323: PUSH
18324: LD_INT 21
18326: PPUSH
18327: CALL_OW 302
18331: AND
18332: PUSH
18333: LD_INT 21
18335: PPUSH
18336: CALL_OW 255
18340: PUSH
18341: LD_INT 3
18343: EQUAL
18344: AND
18345: IFFALSE 18366
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18347: LD_INT 21
18349: PPUSH
18350: LD_INT 22
18352: PPUSH
18353: LD_INT 1
18355: PPUSH
18356: LD_INT 1
18358: PPUSH
18359: LD_INT 52
18361: PPUSH
18362: CALL_OW 125
// end ;
18366: PPOPN 1
18368: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18369: LD_INT 0
18371: PPUSH
18372: PPUSH
18373: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18374: LD_VAR 0 1
18378: PPUSH
18379: CALL_OW 264
18383: PUSH
18384: LD_INT 51
18386: EQUAL
18387: PUSH
18388: LD_VAR 0 1
18392: PPUSH
18393: CALL_OW 255
18397: PUSH
18398: LD_INT 3
18400: EQUAL
18401: AND
18402: IFFALSE 18464
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18404: LD_ADDR_VAR 0 5
18408: PUSH
18409: LD_INT 2
18411: PPUSH
18412: CALL_OW 274
18416: PPUSH
18417: LD_INT 1
18419: PPUSH
18420: CALL_OW 275
18424: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18425: LD_INT 2
18427: PPUSH
18428: CALL_OW 274
18432: PPUSH
18433: LD_INT 1
18435: PPUSH
18436: LD_VAR 0 5
18440: PUSH
18441: LD_INT 100
18443: MINUS
18444: PPUSH
18445: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18449: LD_VAR 0 1
18453: PPUSH
18454: LD_INT 1
18456: PPUSH
18457: LD_INT 100
18459: PPUSH
18460: CALL_OW 291
// end ; if building = rufabsupp then
18464: LD_VAR 0 2
18468: PUSH
18469: LD_INT 17
18471: EQUAL
18472: IFFALSE 18486
// SetSide ( vehicle , 6 ) ;
18474: LD_VAR 0 1
18478: PPUSH
18479: LD_INT 6
18481: PPUSH
18482: CALL_OW 235
// end ;
18486: PPOPN 5
18488: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18489: LD_VAR 0 1
18493: PPUSH
18494: CALL_OW 255
18498: PUSH
18499: LD_INT 3
18501: EQUAL
18502: IFFALSE 18533
// begin tamedApemans = tamedApemans + 1 ;
18504: LD_ADDR_EXP 32
18508: PUSH
18509: LD_EXP 32
18513: PUSH
18514: LD_INT 1
18516: PLUS
18517: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18518: LD_VAR 0 1
18522: PPUSH
18523: LD_INT 106
18525: PPUSH
18526: LD_INT 85
18528: PPUSH
18529: CALL_OW 111
// end ; end ;
18533: PPOPN 2
18535: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18536: LD_INT 0
18538: PPUSH
18539: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18540: LD_VAR 0 1
18544: PPUSH
18545: CALL_OW 255
18549: PUSH
18550: LD_INT 3
18552: EQUAL
18553: PUSH
18554: LD_VAR 0 1
18558: PPUSH
18559: CALL_OW 247
18563: PUSH
18564: LD_INT 2
18566: EQUAL
18567: AND
18568: IFFALSE 18677
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18570: LD_VAR 0 1
18574: PPUSH
18575: CALL_OW 264
18579: PUSH
18580: LD_INT 42
18582: EQUAL
18583: PUSH
18584: LD_VAR 0 1
18588: PPUSH
18589: CALL_OW 264
18593: PUSH
18594: LD_INT 43
18596: EQUAL
18597: OR
18598: PUSH
18599: LD_VAR 0 1
18603: PPUSH
18604: CALL_OW 264
18608: PUSH
18609: LD_INT 44
18611: EQUAL
18612: OR
18613: PUSH
18614: LD_VAR 0 1
18618: PPUSH
18619: CALL_OW 264
18623: PUSH
18624: LD_INT 46
18626: EQUAL
18627: OR
18628: IFFALSE 18677
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18630: LD_INT 21
18632: PPUSH
18633: LD_VAR 0 1
18637: PPUSH
18638: CALL_OW 265
18642: PPUSH
18643: LD_VAR 0 1
18647: PPUSH
18648: CALL_OW 262
18652: PPUSH
18653: LD_VAR 0 1
18657: PPUSH
18658: CALL_OW 263
18662: PPUSH
18663: LD_VAR 0 1
18667: PPUSH
18668: CALL_OW 264
18672: PPUSH
18673: CALL_OW 185
// end ;
18677: PPOPN 3
18679: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18680: LD_VAR 0 1
18684: PPUSH
18685: CALL_OW 255
18689: PUSH
18690: LD_INT 3
18692: EQUAL
18693: PUSH
18694: LD_VAR 0 2
18698: PPUSH
18699: CALL_OW 255
18703: PUSH
18704: LD_INT 3
18706: EQUAL
18707: AND
18708: PUSH
18709: LD_VAR 0 1
18713: PPUSH
18714: CALL_OW 302
18718: AND
18719: IFFALSE 18761
// begin ComRepairVehicle ( human , vehicle ) ;
18721: LD_VAR 0 2
18725: PPUSH
18726: LD_VAR 0 1
18730: PPUSH
18731: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18735: LD_VAR 0 2
18739: PPUSH
18740: LD_VAR 0 1
18744: PPUSH
18745: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18749: LD_VAR 0 1
18753: PPUSH
18754: LD_INT 100
18756: PPUSH
18757: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18761: LD_VAR 0 1
18765: PPUSH
18766: CALL_OW 255
18770: PUSH
18771: LD_INT 3
18773: EQUAL
18774: PUSH
18775: LD_VAR 0 2
18779: PPUSH
18780: CALL_OW 255
18784: PUSH
18785: LD_INT 3
18787: EQUAL
18788: AND
18789: PUSH
18790: LD_INT 21
18792: PPUSH
18793: CALL_OW 302
18797: AND
18798: PUSH
18799: LD_VAR 0 1
18803: PPUSH
18804: CALL_OW 302
18808: NOT
18809: AND
18810: IFFALSE 18824
// ComEnterUnit ( human , rufab ) ;
18812: LD_VAR 0 2
18816: PPUSH
18817: LD_INT 21
18819: PPUSH
18820: CALL_OW 120
// end ;
18824: PPOPN 2
18826: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18827: LD_VAR 0 1
18831: PUSH
18832: LD_INT 21
18834: EQUAL
18835: PUSH
18836: LD_VAR 0 2
18840: PPUSH
18841: CALL_OW 255
18845: PUSH
18846: LD_INT 3
18848: EQUAL
18849: AND
18850: IFFALSE 18864
// SetLives ( human , 1000 ) ;
18852: LD_VAR 0 2
18856: PPUSH
18857: LD_INT 1000
18859: PPUSH
18860: CALL_OW 234
// end ;
18864: PPOPN 2
18866: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18867: LD_VAR 0 1
18871: PPUSH
18872: CALL 35336 0 1
// end ; end_of_file
18876: PPOPN 1
18878: END
// every 0 0$30 trigger cratesStatus = 1 do
18879: LD_EXP 38
18883: PUSH
18884: LD_INT 1
18886: EQUAL
18887: IFFALSE 18970
18889: GO 18891
18891: DISABLE
// begin enable ;
18892: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18893: LD_INT 350
18895: PUSH
18896: LD_INT 1050
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 1
18905: PPUSH
18906: LD_INT 2
18908: PPUSH
18909: CALL_OW 12
18913: ARRAY
18914: PPUSH
18915: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18919: LD_INT 4
18921: PUSH
18922: LD_INT 5
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 1
18931: PPUSH
18932: LD_INT 2
18934: PPUSH
18935: CALL_OW 12
18939: ARRAY
18940: PPUSH
18941: LD_INT 6
18943: PUSH
18944: LD_INT 7
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: PPUSH
18954: LD_INT 2
18956: PPUSH
18957: CALL_OW 12
18961: ARRAY
18962: PPUSH
18963: LD_INT 1
18965: PPUSH
18966: CALL_OW 55
// end ;
18970: END
// every 1 1$0 trigger cratesStatus = 2 do
18971: LD_EXP 38
18975: PUSH
18976: LD_INT 2
18978: EQUAL
18979: IFFALSE 19062
18981: GO 18983
18983: DISABLE
// begin enable ;
18984: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18985: LD_INT 3150
18987: PUSH
18988: LD_INT 4550
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 1
18997: PPUSH
18998: LD_INT 2
19000: PPUSH
19001: CALL_OW 12
19005: ARRAY
19006: PPUSH
19007: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
19011: LD_INT 2
19013: PUSH
19014: LD_INT 5
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 1
19023: PPUSH
19024: LD_INT 2
19026: PPUSH
19027: CALL_OW 12
19031: ARRAY
19032: PPUSH
19033: LD_INT 6
19035: PUSH
19036: LD_INT 7
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 1
19045: PPUSH
19046: LD_INT 2
19048: PPUSH
19049: CALL_OW 12
19053: ARRAY
19054: PPUSH
19055: LD_INT 1
19057: PPUSH
19058: CALL_OW 55
// end ;
19062: END
// every 0 0$30 + 0 0$10 do
19063: GO 19065
19065: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19066: LD_INT 4
19068: PUSH
19069: LD_INT 5
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 1
19078: PPUSH
19079: LD_INT 2
19081: PPUSH
19082: CALL_OW 12
19086: ARRAY
19087: PPUSH
19088: LD_INT 7
19090: PPUSH
19091: LD_INT 1
19093: PPUSH
19094: CALL_OW 55
// Wait ( 0 0$15 ) ;
19098: LD_INT 525
19100: PPUSH
19101: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19105: LD_INT 4
19107: PUSH
19108: LD_INT 5
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 1
19117: PPUSH
19118: LD_INT 2
19120: PPUSH
19121: CALL_OW 12
19125: ARRAY
19126: PPUSH
19127: LD_INT 7
19129: PPUSH
19130: LD_INT 1
19132: PPUSH
19133: CALL_OW 55
// Wait ( 0 0$20 ) ;
19137: LD_INT 700
19139: PPUSH
19140: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19144: LD_INT 4
19146: PUSH
19147: LD_INT 5
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 1
19156: PPUSH
19157: LD_INT 2
19159: PPUSH
19160: CALL_OW 12
19164: ARRAY
19165: PPUSH
19166: LD_INT 7
19168: PPUSH
19169: LD_INT 1
19171: PPUSH
19172: CALL_OW 55
// end ; end_of_file
19176: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
19177: LD_EXP 24
19181: PUSH
19182: LD_INT 1
19184: EQUAL
19185: IFFALSE 19486
19187: GO 19189
19189: DISABLE
19190: LD_INT 0
19192: PPUSH
19193: PPUSH
19194: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19195: LD_ADDR_VAR 0 2
19199: PUSH
19200: LD_INT 22
19202: PUSH
19203: LD_INT 1
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 21
19212: PUSH
19213: LD_INT 3
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 2
19222: PUSH
19223: LD_INT 30
19225: PUSH
19226: LD_INT 0
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 30
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: LIST
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: LIST
19252: PPUSH
19253: CALL_OW 69
19257: ST_TO_ADDR
// for i in tmp do
19258: LD_ADDR_VAR 0 1
19262: PUSH
19263: LD_VAR 0 2
19267: PUSH
19268: FOR_IN
19269: IFFALSE 19302
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19271: LD_ADDR_VAR 0 3
19275: PUSH
19276: LD_VAR 0 3
19280: PUSH
19281: LD_VAR 0 1
19285: PPUSH
19286: CALL_OW 274
19290: PPUSH
19291: LD_INT 1
19293: PPUSH
19294: CALL_OW 275
19298: PLUS
19299: ST_TO_ADDR
19300: GO 19268
19302: POP
19303: POP
// strings = [ ] ;
19304: LD_ADDR_EXP 27
19308: PUSH
19309: EMPTY
19310: ST_TO_ADDR
// if tmp = 0 then
19311: LD_VAR 0 2
19315: PUSH
19316: LD_INT 0
19318: EQUAL
19319: IFFALSE 19344
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19321: LD_ADDR_EXP 27
19325: PUSH
19326: LD_EXP 27
19330: PUSH
19331: LD_STRING #Am06-1
19333: PUSH
19334: LD_EXP 25
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: ADD
19343: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19344: LD_VAR 0 2
19348: PUSH
19349: LD_INT 0
19351: GREATER
19352: PUSH
19353: LD_EXP 25
19357: PUSH
19358: LD_VAR 0 3
19362: GREATER
19363: AND
19364: IFFALSE 19395
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19366: LD_ADDR_EXP 27
19370: PUSH
19371: LD_EXP 27
19375: PUSH
19376: LD_STRING #Am06-1
19378: PUSH
19379: LD_EXP 25
19383: PUSH
19384: LD_VAR 0 3
19388: MINUS
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: ADD
19394: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19395: LD_VAR 0 2
19399: PUSH
19400: LD_INT 0
19402: GREATER
19403: PUSH
19404: LD_EXP 25
19408: PUSH
19409: LD_VAR 0 3
19413: LESSEQUAL
19414: AND
19415: IFFALSE 19438
// strings = strings ^ [ #Am06-1 , 0 ] ;
19417: LD_ADDR_EXP 27
19421: PUSH
19422: LD_EXP 27
19426: PUSH
19427: LD_STRING #Am06-1
19429: PUSH
19430: LD_INT 0
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: ADD
19437: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19438: LD_ADDR_EXP 26
19442: PUSH
19443: LD_EXP 26
19447: PUSH
19448: LD_INT 35
19450: MINUS
19451: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19452: LD_ADDR_EXP 27
19456: PUSH
19457: LD_EXP 27
19461: PUSH
19462: LD_STRING #Am06-2
19464: PUSH
19465: LD_EXP 26
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: ADD
19474: ST_TO_ADDR
// display_strings = strings ;
19475: LD_ADDR_OWVAR 47
19479: PUSH
19480: LD_EXP 27
19484: ST_TO_ADDR
// enable ;
19485: ENABLE
// end ; end_of_file
19486: PPOPN 3
19488: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19489: LD_INT 0
19491: PPUSH
19492: PPUSH
19493: PPUSH
19494: PPUSH
19495: PPUSH
19496: PPUSH
19497: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19498: LD_ADDR_VAR 0 3
19502: PUSH
19503: LD_INT 22
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 2
19515: PUSH
19516: LD_INT 30
19518: PUSH
19519: LD_INT 0
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 30
19528: PUSH
19529: LD_INT 1
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: LIST
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PPUSH
19545: CALL_OW 69
19549: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19550: LD_INT 35
19552: PPUSH
19553: CALL_OW 67
// until depot ;
19557: LD_VAR 0 3
19561: IFFALSE 19498
// repeat wait ( 0 0$1 ) ;
19563: LD_INT 35
19565: PPUSH
19566: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19570: LD_ADDR_VAR 0 4
19574: PUSH
19575: LD_INT 22
19577: PUSH
19578: LD_INT 1
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 91
19587: PUSH
19588: LD_VAR 0 3
19592: PUSH
19593: LD_INT 1
19595: ARRAY
19596: PUSH
19597: LD_INT 15
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 21
19607: PUSH
19608: LD_INT 1
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: LD_INT 25
19620: PUSH
19621: LD_INT 1
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 25
19630: PUSH
19631: LD_INT 2
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 25
19640: PUSH
19641: LD_INT 3
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 25
19650: PUSH
19651: LD_INT 4
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 3
19667: PUSH
19668: LD_INT 54
19670: PUSH
19671: EMPTY
19672: LIST
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 3
19680: PUSH
19681: LD_INT 55
19683: PUSH
19684: EMPTY
19685: LIST
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: PPUSH
19699: CALL_OW 69
19703: PUSH
19704: LD_EXP 2
19708: PUSH
19709: LD_EXP 3
19713: PUSH
19714: LD_EXP 4
19718: PUSH
19719: LD_EXP 5
19723: PUSH
19724: LD_EXP 7
19728: PUSH
19729: LD_EXP 8
19733: PUSH
19734: LD_EXP 9
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: PUSH
19748: LD_EXP 46
19752: ADD
19753: DIFF
19754: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19755: LD_VAR 0 4
19759: PUSH
19760: LD_INT 1
19762: PPUSH
19763: CALL_OW 463
19767: NOT
19768: AND
19769: IFFALSE 19563
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19771: LD_ADDR_VAR 0 4
19775: PUSH
19776: LD_VAR 0 4
19780: PUSH
19781: LD_INT 1
19783: PPUSH
19784: LD_VAR 0 4
19788: PPUSH
19789: CALL_OW 12
19793: ARRAY
19794: ST_TO_ADDR
// blockSpawn = 1 ;
19795: LD_ADDR_EXP 29
19799: PUSH
19800: LD_INT 1
19802: ST_TO_ADDR
// uc_side = 2 ;
19803: LD_ADDR_OWVAR 20
19807: PUSH
19808: LD_INT 2
19810: ST_TO_ADDR
// uc_nation = 2 ;
19811: LD_ADDR_OWVAR 21
19815: PUSH
19816: LD_INT 2
19818: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19819: LD_ADDR_EXP 19
19823: PUSH
19824: LD_STRING Kurt
19826: PPUSH
19827: LD_INT 0
19829: PPUSH
19830: CALL 6151 0 2
19834: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19835: LD_EXP 19
19839: PPUSH
19840: LD_VAR 0 4
19844: PPUSH
19845: CALL_OW 250
19849: PPUSH
19850: LD_VAR 0 4
19854: PPUSH
19855: CALL_OW 251
19859: PPUSH
19860: LD_INT 5
19862: PPUSH
19863: LD_INT 1
19865: PPUSH
19866: CALL_OW 50
// InGameOn ;
19870: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19874: LD_EXP 19
19878: PPUSH
19879: CALL_OW 87
// wait ( 0 0$2 ) ;
19883: LD_INT 70
19885: PPUSH
19886: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19890: LD_EXP 19
19894: PPUSH
19895: LD_VAR 0 4
19899: PPUSH
19900: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19904: LD_VAR 0 4
19908: PPUSH
19909: LD_EXP 19
19913: PPUSH
19914: CALL_OW 112
// wait ( 0 0$1 ) ;
19918: LD_INT 35
19920: PPUSH
19921: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19925: LD_VAR 0 4
19929: PPUSH
19930: LD_EXP 19
19934: PPUSH
19935: CALL_OW 119
// DialogueOn ;
19939: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19943: LD_EXP 19
19947: PPUSH
19948: LD_STRING D2-Kurt-1
19950: PPUSH
19951: CALL_OW 88
// if tmp = JMM then
19955: LD_VAR 0 4
19959: PUSH
19960: LD_EXP 1
19964: EQUAL
19965: IFFALSE 20057
// begin Say ( JMM , D2-JMM-1 ) ;
19967: LD_EXP 1
19971: PPUSH
19972: LD_STRING D2-JMM-1
19974: PPUSH
19975: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19979: LD_EXP 19
19983: PPUSH
19984: LD_STRING D2-Kurt-2
19986: PPUSH
19987: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19991: LD_EXP 1
19995: PPUSH
19996: LD_STRING D2-JMM-2
19998: PPUSH
19999: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20003: LD_EXP 19
20007: PPUSH
20008: LD_STRING D2-Kurt-3
20010: PPUSH
20011: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
20015: LD_EXP 1
20019: PPUSH
20020: LD_STRING D2-JMM-3
20022: PPUSH
20023: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20027: LD_EXP 19
20031: PPUSH
20032: LD_STRING D2-Kurt-4
20034: PPUSH
20035: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
20039: LD_EXP 1
20043: PPUSH
20044: LD_STRING D2-JMM-4
20046: PPUSH
20047: CALL_OW 88
// DialogueOff ;
20051: CALL_OW 7
// end else
20055: GO 20367
// begin if GetSex ( tmp ) = 1 then
20057: LD_VAR 0 4
20061: PPUSH
20062: CALL_OW 258
20066: PUSH
20067: LD_INT 1
20069: EQUAL
20070: IFFALSE 20084
// Say ( tmp , D2-Sol1-1 ) ;
20072: LD_VAR 0 4
20076: PPUSH
20077: LD_STRING D2-Sol1-1
20079: PPUSH
20080: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20084: LD_VAR 0 4
20088: PPUSH
20089: CALL_OW 258
20093: PUSH
20094: LD_INT 2
20096: EQUAL
20097: IFFALSE 20111
// Say ( tmp , D2-FSol1-1 ) ;
20099: LD_VAR 0 4
20103: PPUSH
20104: LD_STRING D2-FSol1-1
20106: PPUSH
20107: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
20111: LD_EXP 19
20115: PPUSH
20116: LD_STRING D2-Kurt-2
20118: PPUSH
20119: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20123: LD_VAR 0 4
20127: PPUSH
20128: CALL_OW 258
20132: PUSH
20133: LD_INT 1
20135: EQUAL
20136: IFFALSE 20150
// Say ( tmp , D2-Sol1-2 ) ;
20138: LD_VAR 0 4
20142: PPUSH
20143: LD_STRING D2-Sol1-2
20145: PPUSH
20146: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20150: LD_VAR 0 4
20154: PPUSH
20155: CALL_OW 258
20159: PUSH
20160: LD_INT 2
20162: EQUAL
20163: IFFALSE 20177
// Say ( tmp , D2-FSol1-2 ) ;
20165: LD_VAR 0 4
20169: PPUSH
20170: LD_STRING D2-FSol1-2
20172: PPUSH
20173: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20177: LD_EXP 19
20181: PPUSH
20182: LD_STRING D2-Kurt-3
20184: PPUSH
20185: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20189: LD_VAR 0 4
20193: PPUSH
20194: CALL_OW 258
20198: PUSH
20199: LD_INT 1
20201: EQUAL
20202: IFFALSE 20216
// Say ( tmp , D2-Sol1-3 ) ;
20204: LD_VAR 0 4
20208: PPUSH
20209: LD_STRING D2-Sol1-3
20211: PPUSH
20212: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20216: LD_VAR 0 4
20220: PPUSH
20221: CALL_OW 258
20225: PUSH
20226: LD_INT 2
20228: EQUAL
20229: IFFALSE 20243
// Say ( tmp , D2-FSol1-3 ) ;
20231: LD_VAR 0 4
20235: PPUSH
20236: LD_STRING D2-FSol1-3
20238: PPUSH
20239: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20243: LD_EXP 19
20247: PPUSH
20248: LD_STRING D2-Kurt-4
20250: PPUSH
20251: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20255: LD_VAR 0 4
20259: PPUSH
20260: CALL_OW 258
20264: PUSH
20265: LD_INT 1
20267: EQUAL
20268: IFFALSE 20282
// Say ( tmp , D2-Sol1-4 ) ;
20270: LD_VAR 0 4
20274: PPUSH
20275: LD_STRING D2-Sol1-4
20277: PPUSH
20278: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20282: LD_VAR 0 4
20286: PPUSH
20287: CALL_OW 258
20291: PUSH
20292: LD_INT 2
20294: EQUAL
20295: IFFALSE 20309
// Say ( tmp , D2-FSol1-4 ) ;
20297: LD_VAR 0 4
20301: PPUSH
20302: LD_STRING D2-FSol1-4
20304: PPUSH
20305: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20309: LD_VAR 0 4
20313: PPUSH
20314: CALL_OW 258
20318: PUSH
20319: LD_INT 1
20321: EQUAL
20322: IFFALSE 20336
// Say ( tmp , D2-Sol1-5 ) ;
20324: LD_VAR 0 4
20328: PPUSH
20329: LD_STRING D2-Sol1-5
20331: PPUSH
20332: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20336: LD_VAR 0 4
20340: PPUSH
20341: CALL_OW 258
20345: PUSH
20346: LD_INT 2
20348: EQUAL
20349: IFFALSE 20363
// Say ( tmp , D2-FSol1-5 ) ;
20351: LD_VAR 0 4
20355: PPUSH
20356: LD_STRING D2-FSol1-5
20358: PPUSH
20359: CALL_OW 88
// DialogueOff ;
20363: CALL_OW 7
// end ; dec = ShowQuery1 ;
20367: LD_ADDR_VAR 0 6
20371: PUSH
20372: CALL 6675 0 0
20376: ST_TO_ADDR
// if dec = 1 then
20377: LD_VAR 0 6
20381: PUSH
20382: LD_INT 1
20384: EQUAL
20385: IFFALSE 20447
// begin DialogueOn ;
20387: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20391: LD_EXP 19
20395: PPUSH
20396: LD_STRING D2a-Kurt-1
20398: PPUSH
20399: CALL_OW 88
// DialogueOff ;
20403: CALL_OW 7
// InGameOff ;
20407: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20411: LD_INT 1
20413: PPUSH
20414: LD_INT 2
20416: PPUSH
20417: LD_INT 2
20419: PPUSH
20420: LD_INT 1
20422: PPUSH
20423: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20427: LD_EXP 19
20431: PPUSH
20432: LD_INT 8
20434: PPUSH
20435: CALL_OW 113
// readyToEscape = 1 ;
20439: LD_ADDR_EXP 21
20443: PUSH
20444: LD_INT 1
20446: ST_TO_ADDR
// end ; if dec = 2 then
20447: LD_VAR 0 6
20451: PUSH
20452: LD_INT 2
20454: EQUAL
20455: IFFALSE 20975
// begin DialogueOn ;
20457: CALL_OW 6
// if tmp = JMM then
20461: LD_VAR 0 4
20465: PUSH
20466: LD_EXP 1
20470: EQUAL
20471: IFFALSE 20527
// begin Say ( JMM , D2b-JMM-1 ) ;
20473: LD_EXP 1
20477: PPUSH
20478: LD_STRING D2b-JMM-1
20480: PPUSH
20481: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20485: LD_EXP 19
20489: PPUSH
20490: LD_STRING D2b-Kurt-1
20492: PPUSH
20493: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20497: LD_EXP 1
20501: PPUSH
20502: LD_STRING D2b-JMM-2
20504: PPUSH
20505: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20509: LD_EXP 19
20513: PPUSH
20514: LD_STRING D2b-Kurt-2
20516: PPUSH
20517: CALL_OW 88
// DialogueOff ;
20521: CALL_OW 7
// end else
20525: GO 20717
// begin if GetSex ( tmp ) = 1 then
20527: LD_VAR 0 4
20531: PPUSH
20532: CALL_OW 258
20536: PUSH
20537: LD_INT 1
20539: EQUAL
20540: IFFALSE 20554
// Say ( tmp , D2b-Sol1-1 ) ;
20542: LD_VAR 0 4
20546: PPUSH
20547: LD_STRING D2b-Sol1-1
20549: PPUSH
20550: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20554: LD_VAR 0 4
20558: PPUSH
20559: CALL_OW 258
20563: PUSH
20564: LD_INT 2
20566: EQUAL
20567: IFFALSE 20581
// Say ( tmp , D2b-FSol1-1 ) ;
20569: LD_VAR 0 4
20573: PPUSH
20574: LD_STRING D2b-FSol1-1
20576: PPUSH
20577: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20581: LD_EXP 19
20585: PPUSH
20586: LD_STRING D2b-Kurt-1
20588: PPUSH
20589: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20593: LD_VAR 0 4
20597: PPUSH
20598: CALL_OW 258
20602: PUSH
20603: LD_INT 1
20605: EQUAL
20606: IFFALSE 20620
// Say ( tmp , D2b-Sol1-2 ) ;
20608: LD_VAR 0 4
20612: PPUSH
20613: LD_STRING D2b-Sol1-2
20615: PPUSH
20616: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20620: LD_VAR 0 4
20624: PPUSH
20625: CALL_OW 258
20629: PUSH
20630: LD_INT 2
20632: EQUAL
20633: IFFALSE 20647
// Say ( tmp , D2b-FSol1-2 ) ;
20635: LD_VAR 0 4
20639: PPUSH
20640: LD_STRING D2b-FSol1-2
20642: PPUSH
20643: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20647: LD_EXP 19
20651: PPUSH
20652: LD_STRING D2b-Kurt-2
20654: PPUSH
20655: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20659: LD_VAR 0 4
20663: PPUSH
20664: CALL_OW 258
20668: PUSH
20669: LD_INT 1
20671: EQUAL
20672: IFFALSE 20686
// Say ( tmp , D2c-Sol1-2 ) ;
20674: LD_VAR 0 4
20678: PPUSH
20679: LD_STRING D2c-Sol1-2
20681: PPUSH
20682: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20686: LD_VAR 0 4
20690: PPUSH
20691: CALL_OW 258
20695: PUSH
20696: LD_INT 2
20698: EQUAL
20699: IFFALSE 20713
// Say ( tmp , D2c-FSol1-2 ) ;
20701: LD_VAR 0 4
20705: PPUSH
20706: LD_STRING D2c-FSol1-2
20708: PPUSH
20709: CALL_OW 88
// DialogueOff ;
20713: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20717: LD_ADDR_VAR 0 7
20721: PUSH
20722: CALL 6749 0 0
20726: ST_TO_ADDR
// if dec2 = 1 then
20727: LD_VAR 0 7
20731: PUSH
20732: LD_INT 1
20734: EQUAL
20735: IFFALSE 20797
// begin DialogueOn ;
20737: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20741: LD_EXP 19
20745: PPUSH
20746: LD_STRING D2a-Kurt-1
20748: PPUSH
20749: CALL_OW 88
// DialogueOff ;
20753: CALL_OW 7
// InGameOff ;
20757: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20761: LD_INT 1
20763: PPUSH
20764: LD_INT 2
20766: PPUSH
20767: LD_INT 2
20769: PPUSH
20770: LD_INT 1
20772: PPUSH
20773: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20777: LD_EXP 19
20781: PPUSH
20782: LD_INT 8
20784: PPUSH
20785: CALL_OW 113
// readyToEscape = 1 ;
20789: LD_ADDR_EXP 21
20793: PUSH
20794: LD_INT 1
20796: ST_TO_ADDR
// end ; if dec2 = 2 then
20797: LD_VAR 0 7
20801: PUSH
20802: LD_INT 2
20804: EQUAL
20805: IFFALSE 20975
// begin if tmp = JMM then
20807: LD_VAR 0 4
20811: PUSH
20812: LD_EXP 1
20816: EQUAL
20817: IFFALSE 20877
// begin DialogueOn ;
20819: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20823: LD_EXP 1
20827: PPUSH
20828: LD_STRING D2c-JMM-1
20830: PPUSH
20831: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20835: LD_EXP 19
20839: PPUSH
20840: LD_STRING D2c-Kurt-1
20842: PPUSH
20843: CALL_OW 88
// DialogueOff ;
20847: CALL_OW 7
// InGameOff ;
20851: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20855: LD_EXP 19
20859: PPUSH
20860: LD_INT 8
20862: PPUSH
20863: CALL_OW 113
// readyToEscape = 1 ;
20867: LD_ADDR_EXP 21
20871: PUSH
20872: LD_INT 1
20874: ST_TO_ADDR
// end else
20875: GO 20975
// begin DialogueOn ;
20877: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20881: LD_VAR 0 4
20885: PPUSH
20886: CALL_OW 258
20890: PUSH
20891: LD_INT 1
20893: EQUAL
20894: IFFALSE 20908
// Say ( tmp , D2c-Sol1-1 ) ;
20896: LD_VAR 0 4
20900: PPUSH
20901: LD_STRING D2c-Sol1-1
20903: PPUSH
20904: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20908: LD_VAR 0 4
20912: PPUSH
20913: CALL_OW 258
20917: PUSH
20918: LD_INT 2
20920: EQUAL
20921: IFFALSE 20935
// Say ( tmp , D2c-FSol1-1 ) ;
20923: LD_VAR 0 4
20927: PPUSH
20928: LD_STRING D2c-FSol1-1
20930: PPUSH
20931: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20935: LD_EXP 19
20939: PPUSH
20940: LD_STRING D2c-Kurt-1
20942: PPUSH
20943: CALL_OW 88
// DialogueOff ;
20947: CALL_OW 7
// InGameOff ;
20951: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20955: LD_EXP 19
20959: PPUSH
20960: LD_INT 8
20962: PPUSH
20963: CALL_OW 113
// readyToEscape = 1 ;
20967: LD_ADDR_EXP 21
20971: PUSH
20972: LD_INT 1
20974: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20975: LD_VAR 0 6
20979: PUSH
20980: LD_INT 3
20982: EQUAL
20983: IFFALSE 21157
// begin DialogueOn ;
20985: CALL_OW 6
// if tmp = JMM then
20989: LD_VAR 0 4
20993: PUSH
20994: LD_EXP 1
20998: EQUAL
20999: IFFALSE 21059
// begin DialogueOn ;
21001: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
21005: LD_EXP 1
21009: PPUSH
21010: LD_STRING D2c-JMM-1
21012: PPUSH
21013: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21017: LD_EXP 19
21021: PPUSH
21022: LD_STRING D2c-Kurt-1
21024: PPUSH
21025: CALL_OW 88
// DialogueOff ;
21029: CALL_OW 7
// InGameOff ;
21033: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21037: LD_EXP 19
21041: PPUSH
21042: LD_INT 8
21044: PPUSH
21045: CALL_OW 113
// readyToEscape = 1 ;
21049: LD_ADDR_EXP 21
21053: PUSH
21054: LD_INT 1
21056: ST_TO_ADDR
// end else
21057: GO 21157
// begin DialogueOn ;
21059: CALL_OW 6
// if GetSex ( tmp ) = 1 then
21063: LD_VAR 0 4
21067: PPUSH
21068: CALL_OW 258
21072: PUSH
21073: LD_INT 1
21075: EQUAL
21076: IFFALSE 21090
// Say ( tmp , D2c-Sol1-1 ) ;
21078: LD_VAR 0 4
21082: PPUSH
21083: LD_STRING D2c-Sol1-1
21085: PPUSH
21086: CALL_OW 88
// if GetSex ( tmp ) = 2 then
21090: LD_VAR 0 4
21094: PPUSH
21095: CALL_OW 258
21099: PUSH
21100: LD_INT 2
21102: EQUAL
21103: IFFALSE 21117
// Say ( tmp , D2c-FSol1-1 ) ;
21105: LD_VAR 0 4
21109: PPUSH
21110: LD_STRING D2c-FSol1-1
21112: PPUSH
21113: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21117: LD_EXP 19
21121: PPUSH
21122: LD_STRING D2c-Kurt-1
21124: PPUSH
21125: CALL_OW 88
// DialogueOff ;
21129: CALL_OW 7
// InGameOff ;
21133: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21137: LD_EXP 19
21141: PPUSH
21142: LD_INT 8
21144: PPUSH
21145: CALL_OW 113
// readyToEscape = 1 ;
21149: LD_ADDR_EXP 21
21153: PUSH
21154: LD_INT 1
21156: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
21157: LD_ADDR_EXP 29
21161: PUSH
21162: LD_INT 0
21164: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21165: LD_INT 35
21167: PPUSH
21168: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
21172: LD_EXP 19
21176: PPUSH
21177: LD_INT 8
21179: PPUSH
21180: CALL_OW 308
21184: PUSH
21185: LD_EXP 21
21189: AND
21190: PUSH
21191: LD_EXP 19
21195: PPUSH
21196: CALL_OW 301
21200: OR
21201: IFFALSE 21165
// if IsDead ( Kurt ) then
21203: LD_EXP 19
21207: PPUSH
21208: CALL_OW 301
21212: IFFALSE 21216
// exit ;
21214: GO 21285
// RemoveUnit ( Kurt ) ;
21216: LD_EXP 19
21220: PPUSH
21221: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
21225: LD_EXP 19
21229: PPUSH
21230: LD_STRING Kurt
21232: PPUSH
21233: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
21237: LD_INT 1
21239: PPUSH
21240: LD_INT 2
21242: PPUSH
21243: CALL_OW 81
21247: PUSH
21248: LD_INT 0
21250: EQUAL
21251: IFFALSE 21261
// KurtStatus = 1 ;
21253: LD_ADDR_EXP 20
21257: PUSH
21258: LD_INT 1
21260: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
21261: LD_INT 1
21263: PPUSH
21264: LD_INT 2
21266: PPUSH
21267: CALL_OW 81
21271: PUSH
21272: LD_INT 2
21274: EQUAL
21275: IFFALSE 21285
// KurtStatus = 2 ;
21277: LD_ADDR_EXP 20
21281: PUSH
21282: LD_INT 2
21284: ST_TO_ADDR
// end ; end_of_file
21285: LD_VAR 0 1
21289: RET
// every 0 0$1 do
21290: GO 21292
21292: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
21293: LD_INT 3
21295: PPUSH
21296: LD_INT 32
21298: PPUSH
21299: LD_INT 3
21301: PPUSH
21302: CALL 6804 0 3
21306: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21307: GO 21309
21309: DISABLE
21310: LD_INT 0
21312: PPUSH
// begin enemyWayX = [ ] ;
21313: LD_ADDR_EXP 49
21317: PUSH
21318: EMPTY
21319: ST_TO_ADDR
// enemyWayY = [ ] ;
21320: LD_ADDR_EXP 50
21324: PUSH
21325: EMPTY
21326: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
21327: LD_ADDR_VAR 0 1
21331: PUSH
21332: LD_INT 1
21334: PPUSH
21335: LD_INT 2
21337: PPUSH
21338: CALL_OW 12
21342: ST_TO_ADDR
// if rnd = 1 then
21343: LD_VAR 0 1
21347: PUSH
21348: LD_INT 1
21350: EQUAL
21351: IFFALSE 21391
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21353: LD_ADDR_EXP 49
21357: PUSH
21358: LD_INT 93
21360: PUSH
21361: LD_INT 84
21363: PUSH
21364: LD_INT 104
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: LIST
21371: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21372: LD_ADDR_EXP 50
21376: PUSH
21377: LD_INT 51
21379: PUSH
21380: LD_INT 35
21382: PUSH
21383: LD_INT 28
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: LIST
21390: ST_TO_ADDR
// end ; if rnd = 2 then
21391: LD_VAR 0 1
21395: PUSH
21396: LD_INT 2
21398: EQUAL
21399: IFFALSE 21455
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21401: LD_ADDR_EXP 49
21405: PUSH
21406: LD_INT 93
21408: PUSH
21409: LD_INT 52
21411: PUSH
21412: LD_INT 34
21414: PUSH
21415: LD_INT 28
21417: PUSH
21418: LD_INT 30
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21428: LD_ADDR_EXP 50
21432: PUSH
21433: LD_INT 51
21435: PUSH
21436: LD_INT 45
21438: PUSH
21439: LD_INT 35
21441: PUSH
21442: LD_INT 26
21444: PUSH
21445: LD_INT 20
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: ST_TO_ADDR
// end ; enable ;
21455: ENABLE
// end ;
21456: PPOPN 1
21458: END
// every 0 0$1 do
21459: GO 21461
21461: DISABLE
// begin enable ;
21462: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21463: LD_INT 3
21465: PPUSH
21466: LD_INT 2
21468: PPUSH
21469: LD_INT 10
21471: PPUSH
21472: LD_EXP 31
21476: PPUSH
21477: CALL 8239 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21481: LD_INT 3
21483: PPUSH
21484: LD_INT 12
21486: PPUSH
21487: LD_EXP 31
21491: PPUSH
21492: CALL 10124 0 3
// if disableHealAI = 0 then
21496: LD_EXP 33
21500: PUSH
21501: LD_INT 0
21503: EQUAL
21504: IFFALSE 21525
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21506: LD_INT 3
21508: PPUSH
21509: LD_INT 9
21511: PPUSH
21512: LD_INT 10
21514: PPUSH
21515: LD_INT 32
21517: PUSH
21518: EMPTY
21519: LIST
21520: PPUSH
21521: CALL 8630 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21525: LD_INT 3
21527: PPUSH
21528: LD_INT 51
21530: PPUSH
21531: LD_INT 6
21533: PPUSH
21534: CALL 9338 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21538: LD_INT 3
21540: PPUSH
21541: LD_INT 12
21543: PPUSH
21544: LD_INT 121
21546: PPUSH
21547: LD_INT 100
21549: PPUSH
21550: CALL 7199 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21554: LD_INT 3
21556: PPUSH
21557: LD_INT 22
21559: PPUSH
21560: LD_EXP 49
21564: PPUSH
21565: LD_EXP 50
21569: PPUSH
21570: CALL 7402 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21574: LD_INT 3
21576: PPUSH
21577: LD_INT 10
21579: PPUSH
21580: CALL 9481 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21584: LD_INT 3
21586: PPUSH
21587: LD_INT 1
21589: PPUSH
21590: CALL 9894 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21594: LD_INT 2
21596: PPUSH
21597: CALL_OW 303
21601: PUSH
21602: LD_INT 2
21604: PPUSH
21605: CALL_OW 255
21609: PUSH
21610: LD_INT 1
21612: EQUAL
21613: OR
21614: IFFALSE 21626
// DefendDepot ( 3 , rudepo ) ;
21616: LD_INT 3
21618: PPUSH
21619: LD_INT 2
21621: PPUSH
21622: CALL 9174 0 2
// end ;
21626: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21627: LD_INT 22
21629: PUSH
21630: LD_INT 3
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 21
21639: PUSH
21640: LD_INT 2
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 55
21649: PUSH
21650: EMPTY
21651: LIST
21652: PUSH
21653: LD_INT 3
21655: PUSH
21656: LD_INT 34
21658: PUSH
21659: LD_INT 51
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: PPUSH
21676: CALL_OW 69
21680: PUSH
21681: LD_INT 0
21683: EQUAL
21684: PUSH
21685: LD_INT 21
21687: PPUSH
21688: CALL_OW 255
21692: PUSH
21693: LD_INT 3
21695: EQUAL
21696: AND
21697: PUSH
21698: LD_INT 21
21700: PPUSH
21701: CALL_OW 302
21705: AND
21706: PUSH
21707: LD_INT 2
21709: PPUSH
21710: CALL_OW 255
21714: PUSH
21715: LD_INT 3
21717: EQUAL
21718: AND
21719: PUSH
21720: LD_INT 2
21722: PPUSH
21723: CALL_OW 302
21727: AND
21728: IFFALSE 21908
21730: GO 21732
21732: DISABLE
// begin enable ;
21733: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21734: LD_INT 2
21736: PPUSH
21737: CALL_OW 274
21741: PPUSH
21742: LD_INT 1
21744: PPUSH
21745: LD_INT 1000
21747: PPUSH
21748: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21752: LD_INT 3
21754: PPUSH
21755: LD_INT 21
21757: PPUSH
21758: LD_INT 4
21760: PUSH
21761: LD_INT 5
21763: PUSH
21764: LD_INT 6
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: LIST
21771: PUSH
21772: LD_OWVAR 67
21776: ARRAY
21777: PPUSH
21778: LD_INT 43
21780: PUSH
21781: LD_INT 43
21783: PUSH
21784: LD_INT 44
21786: PUSH
21787: LD_INT 44
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 43
21798: PUSH
21799: LD_INT 43
21801: PUSH
21802: LD_INT 43
21804: PUSH
21805: LD_INT 44
21807: PUSH
21808: LD_INT 44
21810: PUSH
21811: LD_INT 46
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 43
21824: PUSH
21825: LD_INT 43
21827: PUSH
21828: LD_INT 43
21830: PUSH
21831: LD_INT 44
21833: PUSH
21834: LD_INT 44
21836: PUSH
21837: LD_INT 46
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: LIST
21852: PUSH
21853: LD_OWVAR 67
21857: ARRAY
21858: PPUSH
21859: LD_INT 1
21861: PPUSH
21862: LD_INT 1
21864: PPUSH
21865: LD_INT 22
21867: PUSH
21868: LD_INT 22
21870: PUSH
21871: LD_INT 24
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 1
21880: PPUSH
21881: LD_INT 2
21883: PPUSH
21884: CALL_OW 12
21888: ARRAY
21889: PUSH
21890: LD_INT 24
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: LIST
21897: PUSH
21898: LD_OWVAR 67
21902: ARRAY
21903: PPUSH
21904: CALL 7045 0 7
// end ;
21908: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21909: LD_INT 17
21911: PPUSH
21912: CALL_OW 255
21916: PUSH
21917: LD_INT 3
21919: EQUAL
21920: PUSH
21921: LD_INT 17
21923: PPUSH
21924: CALL_OW 302
21928: AND
21929: PUSH
21930: LD_INT 2
21932: PPUSH
21933: CALL_OW 255
21937: PUSH
21938: LD_INT 3
21940: EQUAL
21941: AND
21942: PUSH
21943: LD_INT 2
21945: PPUSH
21946: CALL_OW 302
21950: AND
21951: IFFALSE 22018
21953: GO 21955
21955: DISABLE
// begin enable ;
21956: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21957: LD_INT 17
21959: PPUSH
21960: LD_INT 22
21962: PPUSH
21963: LD_INT 1
21965: PPUSH
21966: LD_INT 1
21968: PPUSH
21969: LD_INT 42
21971: PUSH
21972: LD_INT 43
21974: PUSH
21975: LD_INT 44
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 1
21985: PPUSH
21986: LD_INT 3
21988: PPUSH
21989: CALL_OW 12
21993: ARRAY
21994: PPUSH
21995: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21999: LD_INT 17
22001: PPUSH
22002: LD_INT 22
22004: PPUSH
22005: LD_INT 1
22007: PPUSH
22008: LD_INT 1
22010: PPUSH
22011: LD_INT 51
22013: PPUSH
22014: CALL_OW 185
// end ;
22018: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
22019: LD_INT 17
22021: PPUSH
22022: CALL_OW 302
22026: PUSH
22027: LD_INT 17
22029: PPUSH
22030: CALL_OW 255
22034: PUSH
22035: LD_INT 3
22037: EQUAL
22038: AND
22039: PUSH
22040: LD_INT 2
22042: PPUSH
22043: CALL_OW 302
22047: AND
22048: PUSH
22049: LD_INT 2
22051: PPUSH
22052: CALL_OW 255
22056: PUSH
22057: LD_INT 3
22059: EQUAL
22060: AND
22061: PUSH
22062: LD_INT 17
22064: PPUSH
22065: CALL_OW 313
22069: NOT
22070: AND
22071: IFFALSE 22165
22073: GO 22075
22075: DISABLE
22076: LD_INT 0
22078: PPUSH
// begin for i = 1 to 6 do
22079: LD_ADDR_VAR 0 1
22083: PUSH
22084: DOUBLE
22085: LD_INT 1
22087: DEC
22088: ST_TO_ADDR
22089: LD_INT 6
22091: PUSH
22092: FOR_TO
22093: IFFALSE 22163
// begin uc_side = 3 ;
22095: LD_ADDR_OWVAR 20
22099: PUSH
22100: LD_INT 3
22102: ST_TO_ADDR
// uc_nation = 3 ;
22103: LD_ADDR_OWVAR 21
22107: PUSH
22108: LD_INT 3
22110: ST_TO_ADDR
// hc_gallery :=  ;
22111: LD_ADDR_OWVAR 33
22115: PUSH
22116: LD_STRING 
22118: ST_TO_ADDR
// hc_name :=  ;
22119: LD_ADDR_OWVAR 26
22123: PUSH
22124: LD_STRING 
22126: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
22127: LD_INT 0
22129: PPUSH
22130: LD_EXP 34
22134: PPUSH
22135: LD_EXP 35
22139: PPUSH
22140: CALL_OW 12
22144: PPUSH
22145: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
22149: CALL_OW 44
22153: PPUSH
22154: LD_INT 17
22156: PPUSH
22157: CALL_OW 52
// end ;
22161: GO 22092
22163: POP
22164: POP
// end ;
22165: PPOPN 1
22167: END
// every 2 2$0 do var i , j ;
22168: GO 22170
22170: DISABLE
22171: LD_INT 0
22173: PPUSH
22174: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
22175: LD_INT 14700
22177: PUSH
22178: LD_INT 33600
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 1
22187: PPUSH
22188: LD_INT 2
22190: PPUSH
22191: CALL_OW 12
22195: ARRAY
22196: PPUSH
22197: CALL_OW 67
// disableHealAI = 1 ;
22201: LD_ADDR_EXP 33
22205: PUSH
22206: LD_INT 1
22208: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22209: LD_ADDR_VAR 0 1
22213: PUSH
22214: LD_INT 22
22216: PUSH
22217: LD_INT 3
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 25
22226: PUSH
22227: LD_INT 4
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PPUSH
22238: CALL_OW 69
22242: PUSH
22243: FOR_IN
22244: IFFALSE 22257
// ComExitBuilding ( i ) ;
22246: LD_VAR 0 1
22250: PPUSH
22251: CALL_OW 122
22255: GO 22243
22257: POP
22258: POP
// wait ( 0 0$1 ) ;
22259: LD_INT 35
22261: PPUSH
22262: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22266: LD_INT 35
22268: PPUSH
22269: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22273: LD_ADDR_VAR 0 1
22277: PUSH
22278: LD_INT 22
22280: PUSH
22281: LD_INT 3
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 25
22290: PUSH
22291: LD_INT 4
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PPUSH
22302: CALL_OW 69
22306: PUSH
22307: FOR_IN
22308: IFFALSE 22385
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
22310: LD_ADDR_VAR 0 2
22314: PUSH
22315: LD_INT 17
22317: PPUSH
22318: LD_INT 22
22320: PUSH
22321: LD_INT 0
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 25
22330: PUSH
22331: LD_INT 12
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PPUSH
22342: CALL_OW 70
22346: PUSH
22347: FOR_IN
22348: IFFALSE 22381
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22350: LD_VAR 0 1
22354: PPUSH
22355: LD_VAR 0 2
22359: PPUSH
22360: CALL_OW 250
22364: PPUSH
22365: LD_VAR 0 2
22369: PPUSH
22370: CALL_OW 251
22374: PPUSH
22375: CALL_OW 191
// end ;
22379: GO 22347
22381: POP
22382: POP
// end ;
22383: GO 22307
22385: POP
22386: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22387: LD_INT 22
22389: PUSH
22390: LD_INT 3
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 25
22399: PUSH
22400: LD_INT 4
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PPUSH
22411: CALL_OW 69
22415: PUSH
22416: LD_INT 0
22418: EQUAL
22419: PUSH
22420: LD_EXP 32
22424: PUSH
22425: LD_INT 6
22427: PUSH
22428: LD_INT 7
22430: PUSH
22431: LD_INT 8
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: PUSH
22439: LD_OWVAR 67
22443: ARRAY
22444: GREATEREQUAL
22445: OR
22446: PUSH
22447: LD_INT 17
22449: PPUSH
22450: LD_INT 22
22452: PUSH
22453: LD_INT 0
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 25
22462: PUSH
22463: LD_INT 12
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PPUSH
22474: CALL_OW 70
22478: PUSH
22479: LD_INT 0
22481: EQUAL
22482: OR
22483: IFFALSE 22266
// disableHealAI = 0 ;
22485: LD_ADDR_EXP 33
22489: PUSH
22490: LD_INT 0
22492: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22493: LD_ADDR_VAR 0 1
22497: PUSH
22498: LD_INT 22
22500: PUSH
22501: LD_INT 3
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 25
22510: PUSH
22511: LD_INT 12
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PPUSH
22522: CALL_OW 69
22526: PUSH
22527: FOR_IN
22528: IFFALSE 22544
// SetClass ( i , 16 ) ;
22530: LD_VAR 0 1
22534: PPUSH
22535: LD_INT 16
22537: PPUSH
22538: CALL_OW 336
22542: GO 22527
22544: POP
22545: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22546: LD_ADDR_VAR 0 1
22550: PUSH
22551: LD_INT 22
22553: PUSH
22554: LD_INT 3
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 25
22563: PUSH
22564: LD_INT 4
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PPUSH
22575: CALL_OW 69
22579: PUSH
22580: FOR_IN
22581: IFFALSE 22600
// ComMoveXY ( i , 113 , 94 ) ;
22583: LD_VAR 0 1
22587: PPUSH
22588: LD_INT 113
22590: PPUSH
22591: LD_INT 94
22593: PPUSH
22594: CALL_OW 111
22598: GO 22580
22600: POP
22601: POP
// end ;
22602: PPOPN 2
22604: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22605: LD_INT 21
22607: PPUSH
22608: CALL_OW 255
22612: PUSH
22613: LD_INT 3
22615: EQUAL
22616: PUSH
22617: LD_INT 21
22619: PPUSH
22620: CALL_OW 302
22624: AND
22625: PUSH
22626: LD_INT 22
22628: PUSH
22629: LD_INT 3
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 34
22638: PUSH
22639: LD_INT 51
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PPUSH
22650: CALL_OW 69
22654: PUSH
22655: LD_INT 0
22657: EQUAL
22658: AND
22659: IFFALSE 22691
22661: GO 22663
22663: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22664: LD_INT 21
22666: PPUSH
22667: LD_INT 23
22669: PPUSH
22670: LD_INT 1
22672: PPUSH
22673: LD_INT 1
22675: PPUSH
22676: LD_INT 51
22678: PPUSH
22679: CALL_OW 185
// wait ( 5 5$0 ) ;
22683: LD_INT 10500
22685: PPUSH
22686: CALL_OW 67
// enable ;
22690: ENABLE
// end ; end_of_file
22691: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22692: LD_EXP 26
22696: PUSH
22697: LD_INT 0
22699: LESSEQUAL
22700: IFFALSE 22849
22702: GO 22704
22704: DISABLE
22705: LD_INT 0
22707: PPUSH
22708: PPUSH
22709: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22710: LD_ADDR_VAR 0 2
22714: PUSH
22715: LD_INT 22
22717: PUSH
22718: LD_INT 1
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 21
22727: PUSH
22728: LD_INT 3
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 30
22740: PUSH
22741: LD_INT 0
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 30
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: LIST
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: PPUSH
22768: CALL_OW 69
22772: ST_TO_ADDR
// for i in tmp do
22773: LD_ADDR_VAR 0 1
22777: PUSH
22778: LD_VAR 0 2
22782: PUSH
22783: FOR_IN
22784: IFFALSE 22817
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22786: LD_ADDR_VAR 0 3
22790: PUSH
22791: LD_VAR 0 3
22795: PUSH
22796: LD_VAR 0 1
22800: PPUSH
22801: CALL_OW 274
22805: PPUSH
22806: LD_INT 1
22808: PPUSH
22809: CALL_OW 275
22813: PLUS
22814: ST_TO_ADDR
22815: GO 22783
22817: POP
22818: POP
// if yourCrates >= needCrates then
22819: LD_VAR 0 3
22823: PUSH
22824: LD_EXP 25
22828: GREATEREQUAL
22829: IFFALSE 22842
// begin FinishMission ( yourCrates ) ;
22831: LD_VAR 0 3
22835: PPUSH
22836: CALL 22852 0 1
// end else
22840: GO 22849
// begin YouLost ( matmin ) ;
22842: LD_STRING matmin
22844: PPUSH
22845: CALL_OW 104
// end ; end ;
22849: PPOPN 3
22851: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22852: LD_INT 0
22854: PPUSH
22855: PPUSH
22856: PPUSH
22857: PPUSH
// if killCounter = 0 then
22858: LD_EXP 47
22862: PUSH
22863: LD_INT 0
22865: EQUAL
22866: IFFALSE 22875
// SetAchievement ( ACH_SURV ) ;
22868: LD_STRING ACH_SURV
22870: PPUSH
22871: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22875: LD_INT 22
22877: PUSH
22878: LD_INT 3
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 21
22887: PUSH
22888: LD_INT 3
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PPUSH
22899: CALL_OW 69
22903: PUSH
22904: LD_INT 0
22906: EQUAL
22907: IFFALSE 22923
// begin wait ( 3 ) ;
22909: LD_INT 3
22911: PPUSH
22912: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22916: LD_STRING ACH_BASEDESTROYER
22918: PPUSH
22919: CALL_OW 543
// end ; m1 := false ;
22923: LD_ADDR_VAR 0 3
22927: PUSH
22928: LD_INT 0
22930: ST_TO_ADDR
// m2 := false ;
22931: LD_ADDR_VAR 0 4
22935: PUSH
22936: LD_INT 0
22938: ST_TO_ADDR
// m3 := false ;
22939: LD_ADDR_VAR 0 5
22943: PUSH
22944: LD_INT 0
22946: ST_TO_ADDR
// if crates + 100 > crates then
22947: LD_VAR 0 1
22951: PUSH
22952: LD_INT 100
22954: PLUS
22955: PUSH
22956: LD_VAR 0 1
22960: GREATER
22961: IFFALSE 22993
// begin AddMedal ( cans , 1 ) ;
22963: LD_STRING cans
22965: PPUSH
22966: LD_INT 1
22968: PPUSH
22969: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22973: LD_INT 1
22975: PPUSH
22976: LD_STRING 06_crates_1
22978: PPUSH
22979: CALL_OW 39
// m1 := true ;
22983: LD_ADDR_VAR 0 3
22987: PUSH
22988: LD_INT 1
22990: ST_TO_ADDR
// end else
22991: GO 23014
// begin AddMedal ( cans , - 1 ) ;
22993: LD_STRING cans
22995: PPUSH
22996: LD_INT 1
22998: NEG
22999: PPUSH
23000: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
23004: LD_INT 0
23006: PPUSH
23007: LD_STRING 06_crates_1
23009: PPUSH
23010: CALL_OW 39
// end ; if unitLost < 3 then
23014: LD_EXP 30
23018: PUSH
23019: LD_INT 3
23021: LESS
23022: IFFALSE 23044
// begin AddMedal ( people , 1 ) ;
23024: LD_STRING people
23026: PPUSH
23027: LD_INT 1
23029: PPUSH
23030: CALL_OW 101
// m2 := true ;
23034: LD_ADDR_VAR 0 4
23038: PUSH
23039: LD_INT 1
23041: ST_TO_ADDR
// end else
23042: GO 23055
// begin AddMedal ( people , - 1 ) ;
23044: LD_STRING people
23046: PPUSH
23047: LD_INT 1
23049: NEG
23050: PPUSH
23051: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
23055: LD_EXP 28
23059: PPUSH
23060: LD_STRING 06_remoteVehs_1
23062: PPUSH
23063: CALL_OW 39
// if remoteVehiclesBuild = 1 then
23067: LD_EXP 28
23071: PUSH
23072: LD_INT 1
23074: EQUAL
23075: IFFALSE 23097
// begin AddMedal ( remote , 1 ) ;
23077: LD_STRING remote
23079: PPUSH
23080: LD_INT 1
23082: PPUSH
23083: CALL_OW 101
// m3 := true ;
23087: LD_ADDR_VAR 0 5
23091: PUSH
23092: LD_INT 1
23094: ST_TO_ADDR
// end else
23095: GO 23137
// begin if GetTech ( 18 , 1 ) = state_enabled then
23097: LD_INT 18
23099: PPUSH
23100: LD_INT 1
23102: PPUSH
23103: CALL_OW 321
23107: PUSH
23108: LD_INT 1
23110: EQUAL
23111: IFFALSE 23126
// begin AddMedal ( remote , - 1 ) ;
23113: LD_STRING remote
23115: PPUSH
23116: LD_INT 1
23118: NEG
23119: PPUSH
23120: CALL_OW 101
// end else
23124: GO 23137
// begin AddMedal ( remote , - 2 ) ;
23126: LD_STRING remote
23128: PPUSH
23129: LD_INT 2
23131: NEG
23132: PPUSH
23133: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
23137: LD_VAR 0 3
23141: PUSH
23142: LD_VAR 0 4
23146: AND
23147: PUSH
23148: LD_VAR 0 5
23152: AND
23153: IFFALSE 23169
// begin wait ( 3 ) ;
23155: LD_INT 3
23157: PPUSH
23158: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
23162: LD_STRING ACH_ASPEED_6
23164: PPUSH
23165: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
23169: LD_OWVAR 67
23173: PUSH
23174: LD_INT 3
23176: EQUAL
23177: PUSH
23178: LD_VAR 0 3
23182: AND
23183: PUSH
23184: LD_VAR 0 4
23188: AND
23189: PUSH
23190: LD_VAR 0 5
23194: AND
23195: IFFALSE 23207
// SetAchievementEX ( ACH_AMER , 6 ) ;
23197: LD_STRING ACH_AMER
23199: PPUSH
23200: LD_INT 6
23202: PPUSH
23203: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
23207: LD_EXP 20
23211: PPUSH
23212: LD_STRING 06_KurtStatus_1
23214: PPUSH
23215: CALL_OW 39
// GiveMedals ( Main ) ;
23219: LD_STRING Main
23221: PPUSH
23222: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
23226: LD_INT 22
23228: PUSH
23229: LD_INT 1
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 21
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 50
23248: PUSH
23249: EMPTY
23250: LIST
23251: PUSH
23252: LD_INT 2
23254: PUSH
23255: LD_INT 25
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 25
23267: PUSH
23268: LD_INT 2
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 25
23277: PUSH
23278: LD_INT 3
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 25
23287: PUSH
23288: LD_INT 4
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: PPUSH
23308: CALL_OW 69
23312: PPUSH
23313: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23317: LD_EXP 1
23321: PPUSH
23322: LD_EXP 43
23326: PUSH
23327: LD_STRING JMM
23329: STR
23330: PPUSH
23331: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23335: LD_EXP 2
23339: PPUSH
23340: LD_EXP 43
23344: PUSH
23345: LD_STRING Lisa
23347: STR
23348: PPUSH
23349: CALL 6303 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23353: LD_EXP 3
23357: PPUSH
23358: LD_EXP 43
23362: PUSH
23363: LD_STRING Bobby
23365: STR
23366: PPUSH
23367: CALL 6303 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23371: LD_EXP 4
23375: PPUSH
23376: LD_EXP 43
23380: PUSH
23381: LD_STRING Cyrus
23383: STR
23384: PPUSH
23385: CALL 6303 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23389: LD_EXP 5
23393: PPUSH
23394: LD_EXP 43
23398: PUSH
23399: LD_STRING Frank
23401: STR
23402: PPUSH
23403: CALL 6303 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23407: LD_EXP 6
23411: PPUSH
23412: LD_EXP 43
23416: PUSH
23417: LD_STRING Brown
23419: STR
23420: PPUSH
23421: CALL 6303 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23425: LD_EXP 7
23429: PPUSH
23430: LD_EXP 43
23434: PUSH
23435: LD_STRING Donaldson
23437: STR
23438: PPUSH
23439: CALL 6303 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23443: LD_EXP 8
23447: PPUSH
23448: LD_EXP 43
23452: PUSH
23453: LD_STRING Gladstone
23455: STR
23456: PPUSH
23457: CALL 6303 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23461: LD_EXP 9
23465: PPUSH
23466: LD_EXP 43
23470: PUSH
23471: LD_STRING Denis
23473: STR
23474: PPUSH
23475: CALL 6303 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23479: LD_EXP 15
23483: PPUSH
23484: LD_EXP 43
23488: PUSH
23489: LD_STRING Joan
23491: STR
23492: PPUSH
23493: CALL 6303 0 2
// if IsLive ( Joan ) then
23497: LD_EXP 15
23501: PPUSH
23502: CALL_OW 300
23506: IFFALSE 23520
// SaveCharacters ( Joan , Joan ) ;
23508: LD_EXP 15
23512: PPUSH
23513: LD_STRING Joan
23515: PPUSH
23516: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23520: LD_EXP 16
23524: PPUSH
23525: LD_STRING 06_JoanStatus_1
23527: PPUSH
23528: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23532: LD_INT 50
23534: PUSH
23535: EMPTY
23536: LIST
23537: PUSH
23538: LD_INT 22
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 21
23550: PUSH
23551: LD_INT 1
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 2
23560: PUSH
23561: LD_INT 25
23563: PUSH
23564: LD_INT 1
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 25
23573: PUSH
23574: LD_INT 2
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 25
23583: PUSH
23584: LD_INT 3
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 25
23593: PUSH
23594: LD_INT 4
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: PPUSH
23614: CALL_OW 69
23618: PUSH
23619: LD_EXP 1
23623: PUSH
23624: LD_EXP 2
23628: PUSH
23629: LD_EXP 3
23633: PUSH
23634: LD_EXP 4
23638: PUSH
23639: LD_EXP 5
23643: PUSH
23644: LD_EXP 6
23648: PUSH
23649: LD_EXP 7
23653: PUSH
23654: LD_EXP 8
23658: PUSH
23659: LD_EXP 9
23663: PUSH
23664: LD_EXP 15
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: DIFF
23681: PPUSH
23682: LD_STRING 06_other_survivors
23684: PPUSH
23685: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23689: LD_INT 50
23691: PUSH
23692: EMPTY
23693: LIST
23694: PUSH
23695: LD_INT 22
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 21
23707: PUSH
23708: LD_INT 1
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 2
23717: PUSH
23718: LD_INT 25
23720: PUSH
23721: LD_INT 12
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 25
23730: PUSH
23731: LD_INT 16
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: LIST
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: PPUSH
23749: CALL_OW 69
23753: PPUSH
23754: LD_STRING 06_other_apemans
23756: PPUSH
23757: CALL_OW 38
// YouWin ;
23761: CALL_OW 103
// end ; end_of_file
23765: LD_VAR 0 2
23769: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23770: LD_EXP 39
23774: PUSH
23775: LD_INT 3
23777: EQUAL
23778: IFFALSE 23893
23780: GO 23782
23782: DISABLE
// begin enable ;
23783: ENABLE
// sendedConvoys = 0 ;
23784: LD_ADDR_EXP 39
23788: PUSH
23789: LD_INT 0
23791: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23792: LD_INT 6
23794: PPUSH
23795: LD_INT 3
23797: PPUSH
23798: LD_INT 5
23800: PPUSH
23801: LD_INT 10
23803: PPUSH
23804: CALL_OW 12
23808: PUSH
23809: LD_INT 5
23811: PPUSH
23812: LD_INT 11
23814: PPUSH
23815: CALL_OW 12
23819: PUSH
23820: LD_INT 8
23822: PPUSH
23823: LD_INT 12
23825: PPUSH
23826: CALL_OW 12
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: LIST
23835: PUSH
23836: LD_OWVAR 67
23840: ARRAY
23841: PPUSH
23842: LD_INT 0
23844: PPUSH
23845: LD_INT 0
23847: PPUSH
23848: LD_INT 0
23850: PPUSH
23851: LD_INT 0
23853: PPUSH
23854: LD_EXP 34
23858: PPUSH
23859: LD_EXP 35
23863: PPUSH
23864: CALL_OW 12
23868: PPUSH
23869: LD_INT 16
23871: PPUSH
23872: LD_INT 15
23874: PPUSH
23875: LD_INT 1
23877: PPUSH
23878: LD_INT 1
23880: PPUSH
23881: LD_INT 2
23883: PPUSH
23884: CALL_OW 12
23888: PPUSH
23889: CALL 10722 0 12
// end ; end_of_file
23893: END
// export function PrepareNature ; var i , un ; begin
23894: LD_INT 0
23896: PPUSH
23897: PPUSH
23898: PPUSH
// for i = 1 to Difficulty + 2 do
23899: LD_ADDR_VAR 0 2
23903: PUSH
23904: DOUBLE
23905: LD_INT 1
23907: DEC
23908: ST_TO_ADDR
23909: LD_OWVAR 67
23913: PUSH
23914: LD_INT 2
23916: PLUS
23917: PUSH
23918: FOR_TO
23919: IFFALSE 24028
// begin hc_sex = sex_male ;
23921: LD_ADDR_OWVAR 27
23925: PUSH
23926: LD_INT 1
23928: ST_TO_ADDR
// uc_side = 0 ;
23929: LD_ADDR_OWVAR 20
23933: PUSH
23934: LD_INT 0
23936: ST_TO_ADDR
// uc_nation = nation_nature ;
23937: LD_ADDR_OWVAR 21
23941: PUSH
23942: LD_INT 0
23944: ST_TO_ADDR
// hc_class = class_tiger ;
23945: LD_ADDR_OWVAR 28
23949: PUSH
23950: LD_INT 14
23952: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23953: LD_ADDR_OWVAR 31
23957: PUSH
23958: LD_EXP 35
23962: PUSH
23963: LD_INT 0
23965: PUSH
23966: LD_INT 0
23968: PUSH
23969: LD_INT 0
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23978: LD_ADDR_OWVAR 35
23982: PUSH
23983: LD_INT 5
23985: NEG
23986: PPUSH
23987: LD_INT 5
23989: PPUSH
23990: CALL_OW 12
23994: PUSH
23995: LD_OWVAR 67
23999: MUL
24000: ST_TO_ADDR
// un = CreateHuman ;
24001: LD_ADDR_VAR 0 3
24005: PUSH
24006: CALL_OW 44
24010: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24011: LD_VAR 0 3
24015: PPUSH
24016: LD_INT 18
24018: PPUSH
24019: LD_INT 0
24021: PPUSH
24022: CALL_OW 49
// end ;
24026: GO 23918
24028: POP
24029: POP
// for i = 1 to rand ( 3 , 4 ) do
24030: LD_ADDR_VAR 0 2
24034: PUSH
24035: DOUBLE
24036: LD_INT 1
24038: DEC
24039: ST_TO_ADDR
24040: LD_INT 3
24042: PPUSH
24043: LD_INT 4
24045: PPUSH
24046: CALL_OW 12
24050: PUSH
24051: FOR_TO
24052: IFFALSE 24146
// begin hc_sex = sex_male ;
24054: LD_ADDR_OWVAR 27
24058: PUSH
24059: LD_INT 1
24061: ST_TO_ADDR
// uc_side = 0 ;
24062: LD_ADDR_OWVAR 20
24066: PUSH
24067: LD_INT 0
24069: ST_TO_ADDR
// uc_nation = nation_nature ;
24070: LD_ADDR_OWVAR 21
24074: PUSH
24075: LD_INT 0
24077: ST_TO_ADDR
// hc_class = 18 ;
24078: LD_ADDR_OWVAR 28
24082: PUSH
24083: LD_INT 18
24085: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24086: LD_ADDR_OWVAR 31
24090: PUSH
24091: LD_EXP 35
24095: PUSH
24096: LD_INT 0
24098: PUSH
24099: LD_INT 0
24101: PUSH
24102: LD_INT 0
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: ST_TO_ADDR
// hc_agressivity = 0 ;
24111: LD_ADDR_OWVAR 35
24115: PUSH
24116: LD_INT 0
24118: ST_TO_ADDR
// un = CreateHuman ;
24119: LD_ADDR_VAR 0 3
24123: PUSH
24124: CALL_OW 44
24128: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24129: LD_VAR 0 3
24133: PPUSH
24134: LD_INT 18
24136: PPUSH
24137: LD_INT 0
24139: PPUSH
24140: CALL_OW 49
// end ;
24144: GO 24051
24146: POP
24147: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
24148: LD_ADDR_VAR 0 2
24152: PUSH
24153: DOUBLE
24154: LD_INT 1
24156: DEC
24157: ST_TO_ADDR
24158: LD_INT 1
24160: PPUSH
24161: LD_INT 3
24163: PPUSH
24164: CALL_OW 12
24168: PUSH
24169: LD_OWVAR 67
24173: PLUS
24174: PUSH
24175: FOR_TO
24176: IFFALSE 24325
// begin hc_sex = sex_male ;
24178: LD_ADDR_OWVAR 27
24182: PUSH
24183: LD_INT 1
24185: ST_TO_ADDR
// uc_side = 0 ;
24186: LD_ADDR_OWVAR 20
24190: PUSH
24191: LD_INT 0
24193: ST_TO_ADDR
// uc_nation = nation_nature ;
24194: LD_ADDR_OWVAR 21
24198: PUSH
24199: LD_INT 0
24201: ST_TO_ADDR
// hc_class = class_apeman ;
24202: LD_ADDR_OWVAR 28
24206: PUSH
24207: LD_INT 12
24209: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24210: LD_ADDR_OWVAR 31
24214: PUSH
24215: LD_INT 2
24217: PPUSH
24218: LD_INT 5
24220: PPUSH
24221: CALL_OW 12
24225: PUSH
24226: LD_INT 0
24228: PPUSH
24229: LD_INT 2
24231: PPUSH
24232: CALL_OW 12
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: LD_INT 0
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
24249: LD_ADDR_OWVAR 35
24253: PUSH
24254: LD_INT 20
24256: PPUSH
24257: LD_INT 30
24259: PPUSH
24260: CALL_OW 12
24264: PUSH
24265: LD_INT 30
24267: PPUSH
24268: LD_INT 40
24270: PPUSH
24271: CALL_OW 12
24275: PUSH
24276: LD_INT 40
24278: PPUSH
24279: LD_INT 50
24281: PPUSH
24282: CALL_OW 12
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: LIST
24291: PUSH
24292: LD_OWVAR 67
24296: ARRAY
24297: ST_TO_ADDR
// un = CreateHuman ;
24298: LD_ADDR_VAR 0 3
24302: PUSH
24303: CALL_OW 44
24307: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
24308: LD_VAR 0 3
24312: PPUSH
24313: LD_INT 19
24315: PPUSH
24316: LD_INT 0
24318: PPUSH
24319: CALL_OW 49
// end ;
24323: GO 24175
24325: POP
24326: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
24327: LD_ADDR_VAR 0 2
24331: PUSH
24332: DOUBLE
24333: LD_INT 1
24335: DEC
24336: ST_TO_ADDR
24337: LD_INT 5
24339: PPUSH
24340: LD_INT 6
24342: PPUSH
24343: CALL_OW 12
24347: PUSH
24348: LD_OWVAR 67
24352: PLUS
24353: PUSH
24354: FOR_TO
24355: IFFALSE 24463
// begin hc_sex = sex_male ;
24357: LD_ADDR_OWVAR 27
24361: PUSH
24362: LD_INT 1
24364: ST_TO_ADDR
// uc_side = 0 ;
24365: LD_ADDR_OWVAR 20
24369: PUSH
24370: LD_INT 0
24372: ST_TO_ADDR
// uc_nation = nation_nature ;
24373: LD_ADDR_OWVAR 21
24377: PUSH
24378: LD_INT 0
24380: ST_TO_ADDR
// hc_class = class_apeman ;
24381: LD_ADDR_OWVAR 28
24385: PUSH
24386: LD_INT 12
24388: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24389: LD_ADDR_OWVAR 31
24393: PUSH
24394: LD_INT 2
24396: PPUSH
24397: LD_INT 5
24399: PPUSH
24400: CALL_OW 12
24404: PUSH
24405: LD_INT 0
24407: PPUSH
24408: LD_INT 2
24410: PPUSH
24411: CALL_OW 12
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: ST_TO_ADDR
// hc_agressivity = 0 ;
24428: LD_ADDR_OWVAR 35
24432: PUSH
24433: LD_INT 0
24435: ST_TO_ADDR
// un = CreateHuman ;
24436: LD_ADDR_VAR 0 3
24440: PUSH
24441: CALL_OW 44
24445: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24446: LD_VAR 0 3
24450: PPUSH
24451: LD_INT 20
24453: PPUSH
24454: LD_INT 0
24456: PPUSH
24457: CALL_OW 49
// end ;
24461: GO 24354
24463: POP
24464: POP
// end ; end_of_file end_of_file
24465: LD_VAR 0 1
24469: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
24470: GO 24472
24472: DISABLE
// begin ru_radar := 98 ;
24473: LD_ADDR_EXP 51
24477: PUSH
24478: LD_INT 98
24480: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24481: LD_ADDR_EXP 52
24485: PUSH
24486: LD_INT 89
24488: ST_TO_ADDR
// us_hack := 99 ;
24489: LD_ADDR_EXP 53
24493: PUSH
24494: LD_INT 99
24496: ST_TO_ADDR
// us_artillery := 97 ;
24497: LD_ADDR_EXP 54
24501: PUSH
24502: LD_INT 97
24504: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24505: LD_ADDR_EXP 55
24509: PUSH
24510: LD_INT 91
24512: ST_TO_ADDR
// end ; end_of_file end_of_file
24513: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
24514: GO 24516
24516: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
24517: LD_STRING initStreamRollete();
24519: PPUSH
24520: CALL_OW 559
// InitStreamMode ;
24524: CALL 24533 0 0
// DefineStreamItems ( ) ;
24528: CALL 24973 0 0
// end ;
24532: END
// function InitStreamMode ; begin
24533: LD_INT 0
24535: PPUSH
// streamModeActive := false ;
24536: LD_ADDR_EXP 56
24540: PUSH
24541: LD_INT 0
24543: ST_TO_ADDR
// normalCounter := 26 ;
24544: LD_ADDR_EXP 57
24548: PUSH
24549: LD_INT 26
24551: ST_TO_ADDR
// hardcoreCounter := 12 ;
24552: LD_ADDR_EXP 58
24556: PUSH
24557: LD_INT 12
24559: ST_TO_ADDR
// sRocket := false ;
24560: LD_ADDR_EXP 61
24564: PUSH
24565: LD_INT 0
24567: ST_TO_ADDR
// sSpeed := false ;
24568: LD_ADDR_EXP 60
24572: PUSH
24573: LD_INT 0
24575: ST_TO_ADDR
// sEngine := false ;
24576: LD_ADDR_EXP 62
24580: PUSH
24581: LD_INT 0
24583: ST_TO_ADDR
// sSpec := false ;
24584: LD_ADDR_EXP 59
24588: PUSH
24589: LD_INT 0
24591: ST_TO_ADDR
// sLevel := false ;
24592: LD_ADDR_EXP 63
24596: PUSH
24597: LD_INT 0
24599: ST_TO_ADDR
// sArmoury := false ;
24600: LD_ADDR_EXP 64
24604: PUSH
24605: LD_INT 0
24607: ST_TO_ADDR
// sRadar := false ;
24608: LD_ADDR_EXP 65
24612: PUSH
24613: LD_INT 0
24615: ST_TO_ADDR
// sBunker := false ;
24616: LD_ADDR_EXP 66
24620: PUSH
24621: LD_INT 0
24623: ST_TO_ADDR
// sHack := false ;
24624: LD_ADDR_EXP 67
24628: PUSH
24629: LD_INT 0
24631: ST_TO_ADDR
// sFire := false ;
24632: LD_ADDR_EXP 68
24636: PUSH
24637: LD_INT 0
24639: ST_TO_ADDR
// sRefresh := false ;
24640: LD_ADDR_EXP 69
24644: PUSH
24645: LD_INT 0
24647: ST_TO_ADDR
// sExp := false ;
24648: LD_ADDR_EXP 70
24652: PUSH
24653: LD_INT 0
24655: ST_TO_ADDR
// sDepot := false ;
24656: LD_ADDR_EXP 71
24660: PUSH
24661: LD_INT 0
24663: ST_TO_ADDR
// sFlag := false ;
24664: LD_ADDR_EXP 72
24668: PUSH
24669: LD_INT 0
24671: ST_TO_ADDR
// sKamikadze := false ;
24672: LD_ADDR_EXP 80
24676: PUSH
24677: LD_INT 0
24679: ST_TO_ADDR
// sTroll := false ;
24680: LD_ADDR_EXP 81
24684: PUSH
24685: LD_INT 0
24687: ST_TO_ADDR
// sSlow := false ;
24688: LD_ADDR_EXP 82
24692: PUSH
24693: LD_INT 0
24695: ST_TO_ADDR
// sLack := false ;
24696: LD_ADDR_EXP 83
24700: PUSH
24701: LD_INT 0
24703: ST_TO_ADDR
// sTank := false ;
24704: LD_ADDR_EXP 85
24708: PUSH
24709: LD_INT 0
24711: ST_TO_ADDR
// sRemote := false ;
24712: LD_ADDR_EXP 86
24716: PUSH
24717: LD_INT 0
24719: ST_TO_ADDR
// sPowell := false ;
24720: LD_ADDR_EXP 87
24724: PUSH
24725: LD_INT 0
24727: ST_TO_ADDR
// sTeleport := false ;
24728: LD_ADDR_EXP 90
24732: PUSH
24733: LD_INT 0
24735: ST_TO_ADDR
// sOilTower := false ;
24736: LD_ADDR_EXP 92
24740: PUSH
24741: LD_INT 0
24743: ST_TO_ADDR
// sShovel := false ;
24744: LD_ADDR_EXP 93
24748: PUSH
24749: LD_INT 0
24751: ST_TO_ADDR
// sSheik := false ;
24752: LD_ADDR_EXP 94
24756: PUSH
24757: LD_INT 0
24759: ST_TO_ADDR
// sEarthquake := false ;
24760: LD_ADDR_EXP 96
24764: PUSH
24765: LD_INT 0
24767: ST_TO_ADDR
// sAI := false ;
24768: LD_ADDR_EXP 97
24772: PUSH
24773: LD_INT 0
24775: ST_TO_ADDR
// sCargo := false ;
24776: LD_ADDR_EXP 100
24780: PUSH
24781: LD_INT 0
24783: ST_TO_ADDR
// sDLaser := false ;
24784: LD_ADDR_EXP 101
24788: PUSH
24789: LD_INT 0
24791: ST_TO_ADDR
// sExchange := false ;
24792: LD_ADDR_EXP 102
24796: PUSH
24797: LD_INT 0
24799: ST_TO_ADDR
// sFac := false ;
24800: LD_ADDR_EXP 103
24804: PUSH
24805: LD_INT 0
24807: ST_TO_ADDR
// sPower := false ;
24808: LD_ADDR_EXP 104
24812: PUSH
24813: LD_INT 0
24815: ST_TO_ADDR
// sRandom := false ;
24816: LD_ADDR_EXP 105
24820: PUSH
24821: LD_INT 0
24823: ST_TO_ADDR
// sShield := false ;
24824: LD_ADDR_EXP 106
24828: PUSH
24829: LD_INT 0
24831: ST_TO_ADDR
// sTime := false ;
24832: LD_ADDR_EXP 107
24836: PUSH
24837: LD_INT 0
24839: ST_TO_ADDR
// sTools := false ;
24840: LD_ADDR_EXP 108
24844: PUSH
24845: LD_INT 0
24847: ST_TO_ADDR
// sSold := false ;
24848: LD_ADDR_EXP 73
24852: PUSH
24853: LD_INT 0
24855: ST_TO_ADDR
// sDiff := false ;
24856: LD_ADDR_EXP 74
24860: PUSH
24861: LD_INT 0
24863: ST_TO_ADDR
// sFog := false ;
24864: LD_ADDR_EXP 77
24868: PUSH
24869: LD_INT 0
24871: ST_TO_ADDR
// sReset := false ;
24872: LD_ADDR_EXP 78
24876: PUSH
24877: LD_INT 0
24879: ST_TO_ADDR
// sSun := false ;
24880: LD_ADDR_EXP 79
24884: PUSH
24885: LD_INT 0
24887: ST_TO_ADDR
// sTiger := false ;
24888: LD_ADDR_EXP 75
24892: PUSH
24893: LD_INT 0
24895: ST_TO_ADDR
// sBomb := false ;
24896: LD_ADDR_EXP 76
24900: PUSH
24901: LD_INT 0
24903: ST_TO_ADDR
// sWound := false ;
24904: LD_ADDR_EXP 84
24908: PUSH
24909: LD_INT 0
24911: ST_TO_ADDR
// sBetray := false ;
24912: LD_ADDR_EXP 88
24916: PUSH
24917: LD_INT 0
24919: ST_TO_ADDR
// sContamin := false ;
24920: LD_ADDR_EXP 89
24924: PUSH
24925: LD_INT 0
24927: ST_TO_ADDR
// sOil := false ;
24928: LD_ADDR_EXP 91
24932: PUSH
24933: LD_INT 0
24935: ST_TO_ADDR
// sStu := false ;
24936: LD_ADDR_EXP 95
24940: PUSH
24941: LD_INT 0
24943: ST_TO_ADDR
// sBazooka := false ;
24944: LD_ADDR_EXP 98
24948: PUSH
24949: LD_INT 0
24951: ST_TO_ADDR
// sMortar := false ;
24952: LD_ADDR_EXP 99
24956: PUSH
24957: LD_INT 0
24959: ST_TO_ADDR
// sRanger := false ;
24960: LD_ADDR_EXP 109
24964: PUSH
24965: LD_INT 0
24967: ST_TO_ADDR
// end ;
24968: LD_VAR 0 1
24972: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
24973: LD_INT 0
24975: PPUSH
24976: PPUSH
24977: PPUSH
24978: PPUSH
24979: PPUSH
// result := [ ] ;
24980: LD_ADDR_VAR 0 1
24984: PUSH
24985: EMPTY
24986: ST_TO_ADDR
// if campaign_id = 1 then
24987: LD_OWVAR 69
24991: PUSH
24992: LD_INT 1
24994: EQUAL
24995: IFFALSE 27943
// begin case mission_number of 1 :
24997: LD_OWVAR 70
25001: PUSH
25002: LD_INT 1
25004: DOUBLE
25005: EQUAL
25006: IFTRUE 25010
25008: GO 25074
25010: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
25011: LD_ADDR_VAR 0 1
25015: PUSH
25016: LD_INT 2
25018: PUSH
25019: LD_INT 4
25021: PUSH
25022: LD_INT 11
25024: PUSH
25025: LD_INT 12
25027: PUSH
25028: LD_INT 15
25030: PUSH
25031: LD_INT 16
25033: PUSH
25034: LD_INT 22
25036: PUSH
25037: LD_INT 23
25039: PUSH
25040: LD_INT 26
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 101
25056: PUSH
25057: LD_INT 102
25059: PUSH
25060: LD_INT 106
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: LIST
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: ST_TO_ADDR
25072: GO 27943
25074: LD_INT 2
25076: DOUBLE
25077: EQUAL
25078: IFTRUE 25082
25080: GO 25154
25082: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
25083: LD_ADDR_VAR 0 1
25087: PUSH
25088: LD_INT 2
25090: PUSH
25091: LD_INT 4
25093: PUSH
25094: LD_INT 11
25096: PUSH
25097: LD_INT 12
25099: PUSH
25100: LD_INT 15
25102: PUSH
25103: LD_INT 16
25105: PUSH
25106: LD_INT 22
25108: PUSH
25109: LD_INT 23
25111: PUSH
25112: LD_INT 26
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 101
25128: PUSH
25129: LD_INT 102
25131: PUSH
25132: LD_INT 105
25134: PUSH
25135: LD_INT 106
25137: PUSH
25138: LD_INT 108
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: ST_TO_ADDR
25152: GO 27943
25154: LD_INT 3
25156: DOUBLE
25157: EQUAL
25158: IFTRUE 25162
25160: GO 25238
25162: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
25163: LD_ADDR_VAR 0 1
25167: PUSH
25168: LD_INT 2
25170: PUSH
25171: LD_INT 4
25173: PUSH
25174: LD_INT 5
25176: PUSH
25177: LD_INT 11
25179: PUSH
25180: LD_INT 12
25182: PUSH
25183: LD_INT 15
25185: PUSH
25186: LD_INT 16
25188: PUSH
25189: LD_INT 22
25191: PUSH
25192: LD_INT 26
25194: PUSH
25195: LD_INT 36
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 101
25212: PUSH
25213: LD_INT 102
25215: PUSH
25216: LD_INT 105
25218: PUSH
25219: LD_INT 106
25221: PUSH
25222: LD_INT 108
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: ST_TO_ADDR
25236: GO 27943
25238: LD_INT 4
25240: DOUBLE
25241: EQUAL
25242: IFTRUE 25246
25244: GO 25330
25246: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
25247: LD_ADDR_VAR 0 1
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: LD_INT 4
25257: PUSH
25258: LD_INT 5
25260: PUSH
25261: LD_INT 8
25263: PUSH
25264: LD_INT 11
25266: PUSH
25267: LD_INT 12
25269: PUSH
25270: LD_INT 15
25272: PUSH
25273: LD_INT 16
25275: PUSH
25276: LD_INT 22
25278: PUSH
25279: LD_INT 23
25281: PUSH
25282: LD_INT 26
25284: PUSH
25285: LD_INT 36
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 101
25304: PUSH
25305: LD_INT 102
25307: PUSH
25308: LD_INT 105
25310: PUSH
25311: LD_INT 106
25313: PUSH
25314: LD_INT 108
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: ST_TO_ADDR
25328: GO 27943
25330: LD_INT 5
25332: DOUBLE
25333: EQUAL
25334: IFTRUE 25338
25336: GO 25438
25338: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
25339: LD_ADDR_VAR 0 1
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: LD_INT 4
25349: PUSH
25350: LD_INT 5
25352: PUSH
25353: LD_INT 6
25355: PUSH
25356: LD_INT 8
25358: PUSH
25359: LD_INT 11
25361: PUSH
25362: LD_INT 12
25364: PUSH
25365: LD_INT 15
25367: PUSH
25368: LD_INT 16
25370: PUSH
25371: LD_INT 22
25373: PUSH
25374: LD_INT 23
25376: PUSH
25377: LD_INT 25
25379: PUSH
25380: LD_INT 26
25382: PUSH
25383: LD_INT 36
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 101
25404: PUSH
25405: LD_INT 102
25407: PUSH
25408: LD_INT 105
25410: PUSH
25411: LD_INT 106
25413: PUSH
25414: LD_INT 108
25416: PUSH
25417: LD_INT 109
25419: PUSH
25420: LD_INT 112
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: ST_TO_ADDR
25436: GO 27943
25438: LD_INT 6
25440: DOUBLE
25441: EQUAL
25442: IFTRUE 25446
25444: GO 25566
25446: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
25447: LD_ADDR_VAR 0 1
25451: PUSH
25452: LD_INT 2
25454: PUSH
25455: LD_INT 4
25457: PUSH
25458: LD_INT 5
25460: PUSH
25461: LD_INT 6
25463: PUSH
25464: LD_INT 8
25466: PUSH
25467: LD_INT 11
25469: PUSH
25470: LD_INT 12
25472: PUSH
25473: LD_INT 15
25475: PUSH
25476: LD_INT 16
25478: PUSH
25479: LD_INT 20
25481: PUSH
25482: LD_INT 21
25484: PUSH
25485: LD_INT 22
25487: PUSH
25488: LD_INT 23
25490: PUSH
25491: LD_INT 25
25493: PUSH
25494: LD_INT 26
25496: PUSH
25497: LD_INT 30
25499: PUSH
25500: LD_INT 31
25502: PUSH
25503: LD_INT 32
25505: PUSH
25506: LD_INT 36
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 101
25532: PUSH
25533: LD_INT 102
25535: PUSH
25536: LD_INT 105
25538: PUSH
25539: LD_INT 106
25541: PUSH
25542: LD_INT 108
25544: PUSH
25545: LD_INT 109
25547: PUSH
25548: LD_INT 112
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: ST_TO_ADDR
25564: GO 27943
25566: LD_INT 7
25568: DOUBLE
25569: EQUAL
25570: IFTRUE 25574
25572: GO 25674
25574: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
25575: LD_ADDR_VAR 0 1
25579: PUSH
25580: LD_INT 2
25582: PUSH
25583: LD_INT 4
25585: PUSH
25586: LD_INT 5
25588: PUSH
25589: LD_INT 7
25591: PUSH
25592: LD_INT 11
25594: PUSH
25595: LD_INT 12
25597: PUSH
25598: LD_INT 15
25600: PUSH
25601: LD_INT 16
25603: PUSH
25604: LD_INT 20
25606: PUSH
25607: LD_INT 21
25609: PUSH
25610: LD_INT 22
25612: PUSH
25613: LD_INT 23
25615: PUSH
25616: LD_INT 25
25618: PUSH
25619: LD_INT 26
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 101
25640: PUSH
25641: LD_INT 102
25643: PUSH
25644: LD_INT 103
25646: PUSH
25647: LD_INT 105
25649: PUSH
25650: LD_INT 106
25652: PUSH
25653: LD_INT 108
25655: PUSH
25656: LD_INT 112
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: ST_TO_ADDR
25672: GO 27943
25674: LD_INT 8
25676: DOUBLE
25677: EQUAL
25678: IFTRUE 25682
25680: GO 25810
25682: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
25683: LD_ADDR_VAR 0 1
25687: PUSH
25688: LD_INT 2
25690: PUSH
25691: LD_INT 4
25693: PUSH
25694: LD_INT 5
25696: PUSH
25697: LD_INT 6
25699: PUSH
25700: LD_INT 7
25702: PUSH
25703: LD_INT 8
25705: PUSH
25706: LD_INT 11
25708: PUSH
25709: LD_INT 12
25711: PUSH
25712: LD_INT 15
25714: PUSH
25715: LD_INT 16
25717: PUSH
25718: LD_INT 20
25720: PUSH
25721: LD_INT 21
25723: PUSH
25724: LD_INT 22
25726: PUSH
25727: LD_INT 23
25729: PUSH
25730: LD_INT 25
25732: PUSH
25733: LD_INT 26
25735: PUSH
25736: LD_INT 30
25738: PUSH
25739: LD_INT 31
25741: PUSH
25742: LD_INT 32
25744: PUSH
25745: LD_INT 36
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 101
25772: PUSH
25773: LD_INT 102
25775: PUSH
25776: LD_INT 103
25778: PUSH
25779: LD_INT 105
25781: PUSH
25782: LD_INT 106
25784: PUSH
25785: LD_INT 108
25787: PUSH
25788: LD_INT 109
25790: PUSH
25791: LD_INT 112
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: ST_TO_ADDR
25808: GO 27943
25810: LD_INT 9
25812: DOUBLE
25813: EQUAL
25814: IFTRUE 25818
25816: GO 25954
25818: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
25819: LD_ADDR_VAR 0 1
25823: PUSH
25824: LD_INT 2
25826: PUSH
25827: LD_INT 4
25829: PUSH
25830: LD_INT 5
25832: PUSH
25833: LD_INT 6
25835: PUSH
25836: LD_INT 7
25838: PUSH
25839: LD_INT 8
25841: PUSH
25842: LD_INT 11
25844: PUSH
25845: LD_INT 12
25847: PUSH
25848: LD_INT 15
25850: PUSH
25851: LD_INT 16
25853: PUSH
25854: LD_INT 20
25856: PUSH
25857: LD_INT 21
25859: PUSH
25860: LD_INT 22
25862: PUSH
25863: LD_INT 23
25865: PUSH
25866: LD_INT 25
25868: PUSH
25869: LD_INT 26
25871: PUSH
25872: LD_INT 28
25874: PUSH
25875: LD_INT 30
25877: PUSH
25878: LD_INT 31
25880: PUSH
25881: LD_INT 32
25883: PUSH
25884: LD_INT 36
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 101
25912: PUSH
25913: LD_INT 102
25915: PUSH
25916: LD_INT 103
25918: PUSH
25919: LD_INT 105
25921: PUSH
25922: LD_INT 106
25924: PUSH
25925: LD_INT 108
25927: PUSH
25928: LD_INT 109
25930: PUSH
25931: LD_INT 112
25933: PUSH
25934: LD_INT 114
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: ST_TO_ADDR
25952: GO 27943
25954: LD_INT 10
25956: DOUBLE
25957: EQUAL
25958: IFTRUE 25962
25960: GO 26146
25962: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
25963: LD_ADDR_VAR 0 1
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 4
25973: PUSH
25974: LD_INT 5
25976: PUSH
25977: LD_INT 6
25979: PUSH
25980: LD_INT 7
25982: PUSH
25983: LD_INT 8
25985: PUSH
25986: LD_INT 9
25988: PUSH
25989: LD_INT 10
25991: PUSH
25992: LD_INT 11
25994: PUSH
25995: LD_INT 12
25997: PUSH
25998: LD_INT 13
26000: PUSH
26001: LD_INT 14
26003: PUSH
26004: LD_INT 15
26006: PUSH
26007: LD_INT 16
26009: PUSH
26010: LD_INT 17
26012: PUSH
26013: LD_INT 18
26015: PUSH
26016: LD_INT 19
26018: PUSH
26019: LD_INT 20
26021: PUSH
26022: LD_INT 21
26024: PUSH
26025: LD_INT 22
26027: PUSH
26028: LD_INT 23
26030: PUSH
26031: LD_INT 24
26033: PUSH
26034: LD_INT 25
26036: PUSH
26037: LD_INT 26
26039: PUSH
26040: LD_INT 28
26042: PUSH
26043: LD_INT 30
26045: PUSH
26046: LD_INT 31
26048: PUSH
26049: LD_INT 32
26051: PUSH
26052: LD_INT 36
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 101
26088: PUSH
26089: LD_INT 102
26091: PUSH
26092: LD_INT 103
26094: PUSH
26095: LD_INT 104
26097: PUSH
26098: LD_INT 105
26100: PUSH
26101: LD_INT 106
26103: PUSH
26104: LD_INT 107
26106: PUSH
26107: LD_INT 108
26109: PUSH
26110: LD_INT 109
26112: PUSH
26113: LD_INT 110
26115: PUSH
26116: LD_INT 111
26118: PUSH
26119: LD_INT 112
26121: PUSH
26122: LD_INT 114
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: ST_TO_ADDR
26144: GO 27943
26146: LD_INT 11
26148: DOUBLE
26149: EQUAL
26150: IFTRUE 26154
26152: GO 26346
26154: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
26155: LD_ADDR_VAR 0 1
26159: PUSH
26160: LD_INT 2
26162: PUSH
26163: LD_INT 3
26165: PUSH
26166: LD_INT 4
26168: PUSH
26169: LD_INT 5
26171: PUSH
26172: LD_INT 6
26174: PUSH
26175: LD_INT 7
26177: PUSH
26178: LD_INT 8
26180: PUSH
26181: LD_INT 9
26183: PUSH
26184: LD_INT 10
26186: PUSH
26187: LD_INT 11
26189: PUSH
26190: LD_INT 12
26192: PUSH
26193: LD_INT 13
26195: PUSH
26196: LD_INT 14
26198: PUSH
26199: LD_INT 15
26201: PUSH
26202: LD_INT 16
26204: PUSH
26205: LD_INT 17
26207: PUSH
26208: LD_INT 18
26210: PUSH
26211: LD_INT 19
26213: PUSH
26214: LD_INT 20
26216: PUSH
26217: LD_INT 21
26219: PUSH
26220: LD_INT 22
26222: PUSH
26223: LD_INT 23
26225: PUSH
26226: LD_INT 24
26228: PUSH
26229: LD_INT 25
26231: PUSH
26232: LD_INT 26
26234: PUSH
26235: LD_INT 28
26237: PUSH
26238: LD_INT 30
26240: PUSH
26241: LD_INT 31
26243: PUSH
26244: LD_INT 32
26246: PUSH
26247: LD_INT 34
26249: PUSH
26250: LD_INT 36
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 101
26288: PUSH
26289: LD_INT 102
26291: PUSH
26292: LD_INT 103
26294: PUSH
26295: LD_INT 104
26297: PUSH
26298: LD_INT 105
26300: PUSH
26301: LD_INT 106
26303: PUSH
26304: LD_INT 107
26306: PUSH
26307: LD_INT 108
26309: PUSH
26310: LD_INT 109
26312: PUSH
26313: LD_INT 110
26315: PUSH
26316: LD_INT 111
26318: PUSH
26319: LD_INT 112
26321: PUSH
26322: LD_INT 114
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: ST_TO_ADDR
26344: GO 27943
26346: LD_INT 12
26348: DOUBLE
26349: EQUAL
26350: IFTRUE 26354
26352: GO 26562
26354: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
26355: LD_ADDR_VAR 0 1
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: LD_INT 2
26365: PUSH
26366: LD_INT 3
26368: PUSH
26369: LD_INT 4
26371: PUSH
26372: LD_INT 5
26374: PUSH
26375: LD_INT 6
26377: PUSH
26378: LD_INT 7
26380: PUSH
26381: LD_INT 8
26383: PUSH
26384: LD_INT 9
26386: PUSH
26387: LD_INT 10
26389: PUSH
26390: LD_INT 11
26392: PUSH
26393: LD_INT 12
26395: PUSH
26396: LD_INT 13
26398: PUSH
26399: LD_INT 14
26401: PUSH
26402: LD_INT 15
26404: PUSH
26405: LD_INT 16
26407: PUSH
26408: LD_INT 17
26410: PUSH
26411: LD_INT 18
26413: PUSH
26414: LD_INT 19
26416: PUSH
26417: LD_INT 20
26419: PUSH
26420: LD_INT 21
26422: PUSH
26423: LD_INT 22
26425: PUSH
26426: LD_INT 23
26428: PUSH
26429: LD_INT 24
26431: PUSH
26432: LD_INT 25
26434: PUSH
26435: LD_INT 26
26437: PUSH
26438: LD_INT 27
26440: PUSH
26441: LD_INT 28
26443: PUSH
26444: LD_INT 30
26446: PUSH
26447: LD_INT 31
26449: PUSH
26450: LD_INT 32
26452: PUSH
26453: LD_INT 33
26455: PUSH
26456: LD_INT 34
26458: PUSH
26459: LD_INT 36
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 101
26500: PUSH
26501: LD_INT 102
26503: PUSH
26504: LD_INT 103
26506: PUSH
26507: LD_INT 104
26509: PUSH
26510: LD_INT 105
26512: PUSH
26513: LD_INT 106
26515: PUSH
26516: LD_INT 107
26518: PUSH
26519: LD_INT 108
26521: PUSH
26522: LD_INT 109
26524: PUSH
26525: LD_INT 110
26527: PUSH
26528: LD_INT 111
26530: PUSH
26531: LD_INT 112
26533: PUSH
26534: LD_INT 113
26536: PUSH
26537: LD_INT 114
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: ST_TO_ADDR
26560: GO 27943
26562: LD_INT 13
26564: DOUBLE
26565: EQUAL
26566: IFTRUE 26570
26568: GO 26778
26570: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
26571: LD_ADDR_VAR 0 1
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: LD_INT 2
26581: PUSH
26582: LD_INT 3
26584: PUSH
26585: LD_INT 4
26587: PUSH
26588: LD_INT 5
26590: PUSH
26591: LD_INT 6
26593: PUSH
26594: LD_INT 7
26596: PUSH
26597: LD_INT 8
26599: PUSH
26600: LD_INT 9
26602: PUSH
26603: LD_INT 10
26605: PUSH
26606: LD_INT 11
26608: PUSH
26609: LD_INT 12
26611: PUSH
26612: LD_INT 13
26614: PUSH
26615: LD_INT 14
26617: PUSH
26618: LD_INT 15
26620: PUSH
26621: LD_INT 16
26623: PUSH
26624: LD_INT 17
26626: PUSH
26627: LD_INT 18
26629: PUSH
26630: LD_INT 19
26632: PUSH
26633: LD_INT 20
26635: PUSH
26636: LD_INT 21
26638: PUSH
26639: LD_INT 22
26641: PUSH
26642: LD_INT 23
26644: PUSH
26645: LD_INT 24
26647: PUSH
26648: LD_INT 25
26650: PUSH
26651: LD_INT 26
26653: PUSH
26654: LD_INT 27
26656: PUSH
26657: LD_INT 28
26659: PUSH
26660: LD_INT 30
26662: PUSH
26663: LD_INT 31
26665: PUSH
26666: LD_INT 32
26668: PUSH
26669: LD_INT 33
26671: PUSH
26672: LD_INT 34
26674: PUSH
26675: LD_INT 36
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 101
26716: PUSH
26717: LD_INT 102
26719: PUSH
26720: LD_INT 103
26722: PUSH
26723: LD_INT 104
26725: PUSH
26726: LD_INT 105
26728: PUSH
26729: LD_INT 106
26731: PUSH
26732: LD_INT 107
26734: PUSH
26735: LD_INT 108
26737: PUSH
26738: LD_INT 109
26740: PUSH
26741: LD_INT 110
26743: PUSH
26744: LD_INT 111
26746: PUSH
26747: LD_INT 112
26749: PUSH
26750: LD_INT 113
26752: PUSH
26753: LD_INT 114
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: ST_TO_ADDR
26776: GO 27943
26778: LD_INT 14
26780: DOUBLE
26781: EQUAL
26782: IFTRUE 26786
26784: GO 26998
26786: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
26787: LD_ADDR_VAR 0 1
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: LD_INT 2
26797: PUSH
26798: LD_INT 3
26800: PUSH
26801: LD_INT 4
26803: PUSH
26804: LD_INT 5
26806: PUSH
26807: LD_INT 6
26809: PUSH
26810: LD_INT 7
26812: PUSH
26813: LD_INT 8
26815: PUSH
26816: LD_INT 9
26818: PUSH
26819: LD_INT 10
26821: PUSH
26822: LD_INT 11
26824: PUSH
26825: LD_INT 12
26827: PUSH
26828: LD_INT 13
26830: PUSH
26831: LD_INT 14
26833: PUSH
26834: LD_INT 15
26836: PUSH
26837: LD_INT 16
26839: PUSH
26840: LD_INT 17
26842: PUSH
26843: LD_INT 18
26845: PUSH
26846: LD_INT 19
26848: PUSH
26849: LD_INT 20
26851: PUSH
26852: LD_INT 21
26854: PUSH
26855: LD_INT 22
26857: PUSH
26858: LD_INT 23
26860: PUSH
26861: LD_INT 24
26863: PUSH
26864: LD_INT 25
26866: PUSH
26867: LD_INT 26
26869: PUSH
26870: LD_INT 27
26872: PUSH
26873: LD_INT 28
26875: PUSH
26876: LD_INT 29
26878: PUSH
26879: LD_INT 30
26881: PUSH
26882: LD_INT 31
26884: PUSH
26885: LD_INT 32
26887: PUSH
26888: LD_INT 33
26890: PUSH
26891: LD_INT 34
26893: PUSH
26894: LD_INT 36
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 101
26936: PUSH
26937: LD_INT 102
26939: PUSH
26940: LD_INT 103
26942: PUSH
26943: LD_INT 104
26945: PUSH
26946: LD_INT 105
26948: PUSH
26949: LD_INT 106
26951: PUSH
26952: LD_INT 107
26954: PUSH
26955: LD_INT 108
26957: PUSH
26958: LD_INT 109
26960: PUSH
26961: LD_INT 110
26963: PUSH
26964: LD_INT 111
26966: PUSH
26967: LD_INT 112
26969: PUSH
26970: LD_INT 113
26972: PUSH
26973: LD_INT 114
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: ST_TO_ADDR
26996: GO 27943
26998: LD_INT 15
27000: DOUBLE
27001: EQUAL
27002: IFTRUE 27006
27004: GO 27218
27006: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
27007: LD_ADDR_VAR 0 1
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: LD_INT 2
27017: PUSH
27018: LD_INT 3
27020: PUSH
27021: LD_INT 4
27023: PUSH
27024: LD_INT 5
27026: PUSH
27027: LD_INT 6
27029: PUSH
27030: LD_INT 7
27032: PUSH
27033: LD_INT 8
27035: PUSH
27036: LD_INT 9
27038: PUSH
27039: LD_INT 10
27041: PUSH
27042: LD_INT 11
27044: PUSH
27045: LD_INT 12
27047: PUSH
27048: LD_INT 13
27050: PUSH
27051: LD_INT 14
27053: PUSH
27054: LD_INT 15
27056: PUSH
27057: LD_INT 16
27059: PUSH
27060: LD_INT 17
27062: PUSH
27063: LD_INT 18
27065: PUSH
27066: LD_INT 19
27068: PUSH
27069: LD_INT 20
27071: PUSH
27072: LD_INT 21
27074: PUSH
27075: LD_INT 22
27077: PUSH
27078: LD_INT 23
27080: PUSH
27081: LD_INT 24
27083: PUSH
27084: LD_INT 25
27086: PUSH
27087: LD_INT 26
27089: PUSH
27090: LD_INT 27
27092: PUSH
27093: LD_INT 28
27095: PUSH
27096: LD_INT 29
27098: PUSH
27099: LD_INT 30
27101: PUSH
27102: LD_INT 31
27104: PUSH
27105: LD_INT 32
27107: PUSH
27108: LD_INT 33
27110: PUSH
27111: LD_INT 34
27113: PUSH
27114: LD_INT 36
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 101
27156: PUSH
27157: LD_INT 102
27159: PUSH
27160: LD_INT 103
27162: PUSH
27163: LD_INT 104
27165: PUSH
27166: LD_INT 105
27168: PUSH
27169: LD_INT 106
27171: PUSH
27172: LD_INT 107
27174: PUSH
27175: LD_INT 108
27177: PUSH
27178: LD_INT 109
27180: PUSH
27181: LD_INT 110
27183: PUSH
27184: LD_INT 111
27186: PUSH
27187: LD_INT 112
27189: PUSH
27190: LD_INT 113
27192: PUSH
27193: LD_INT 114
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: ST_TO_ADDR
27216: GO 27943
27218: LD_INT 16
27220: DOUBLE
27221: EQUAL
27222: IFTRUE 27226
27224: GO 27350
27226: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
27227: LD_ADDR_VAR 0 1
27231: PUSH
27232: LD_INT 2
27234: PUSH
27235: LD_INT 4
27237: PUSH
27238: LD_INT 5
27240: PUSH
27241: LD_INT 7
27243: PUSH
27244: LD_INT 11
27246: PUSH
27247: LD_INT 12
27249: PUSH
27250: LD_INT 15
27252: PUSH
27253: LD_INT 16
27255: PUSH
27256: LD_INT 20
27258: PUSH
27259: LD_INT 21
27261: PUSH
27262: LD_INT 22
27264: PUSH
27265: LD_INT 23
27267: PUSH
27268: LD_INT 25
27270: PUSH
27271: LD_INT 26
27273: PUSH
27274: LD_INT 30
27276: PUSH
27277: LD_INT 31
27279: PUSH
27280: LD_INT 32
27282: PUSH
27283: LD_INT 33
27285: PUSH
27286: LD_INT 34
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 101
27312: PUSH
27313: LD_INT 102
27315: PUSH
27316: LD_INT 103
27318: PUSH
27319: LD_INT 106
27321: PUSH
27322: LD_INT 108
27324: PUSH
27325: LD_INT 112
27327: PUSH
27328: LD_INT 113
27330: PUSH
27331: LD_INT 114
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: ST_TO_ADDR
27348: GO 27943
27350: LD_INT 17
27352: DOUBLE
27353: EQUAL
27354: IFTRUE 27358
27356: GO 27570
27358: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
27359: LD_ADDR_VAR 0 1
27363: PUSH
27364: LD_INT 1
27366: PUSH
27367: LD_INT 2
27369: PUSH
27370: LD_INT 3
27372: PUSH
27373: LD_INT 4
27375: PUSH
27376: LD_INT 5
27378: PUSH
27379: LD_INT 6
27381: PUSH
27382: LD_INT 7
27384: PUSH
27385: LD_INT 8
27387: PUSH
27388: LD_INT 9
27390: PUSH
27391: LD_INT 10
27393: PUSH
27394: LD_INT 11
27396: PUSH
27397: LD_INT 12
27399: PUSH
27400: LD_INT 13
27402: PUSH
27403: LD_INT 14
27405: PUSH
27406: LD_INT 15
27408: PUSH
27409: LD_INT 16
27411: PUSH
27412: LD_INT 17
27414: PUSH
27415: LD_INT 18
27417: PUSH
27418: LD_INT 19
27420: PUSH
27421: LD_INT 20
27423: PUSH
27424: LD_INT 21
27426: PUSH
27427: LD_INT 22
27429: PUSH
27430: LD_INT 23
27432: PUSH
27433: LD_INT 24
27435: PUSH
27436: LD_INT 25
27438: PUSH
27439: LD_INT 26
27441: PUSH
27442: LD_INT 27
27444: PUSH
27445: LD_INT 28
27447: PUSH
27448: LD_INT 29
27450: PUSH
27451: LD_INT 30
27453: PUSH
27454: LD_INT 31
27456: PUSH
27457: LD_INT 32
27459: PUSH
27460: LD_INT 33
27462: PUSH
27463: LD_INT 34
27465: PUSH
27466: LD_INT 36
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 101
27508: PUSH
27509: LD_INT 102
27511: PUSH
27512: LD_INT 103
27514: PUSH
27515: LD_INT 104
27517: PUSH
27518: LD_INT 105
27520: PUSH
27521: LD_INT 106
27523: PUSH
27524: LD_INT 107
27526: PUSH
27527: LD_INT 108
27529: PUSH
27530: LD_INT 109
27532: PUSH
27533: LD_INT 110
27535: PUSH
27536: LD_INT 111
27538: PUSH
27539: LD_INT 112
27541: PUSH
27542: LD_INT 113
27544: PUSH
27545: LD_INT 114
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: ST_TO_ADDR
27568: GO 27943
27570: LD_INT 18
27572: DOUBLE
27573: EQUAL
27574: IFTRUE 27578
27576: GO 27714
27578: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
27579: LD_ADDR_VAR 0 1
27583: PUSH
27584: LD_INT 2
27586: PUSH
27587: LD_INT 4
27589: PUSH
27590: LD_INT 5
27592: PUSH
27593: LD_INT 7
27595: PUSH
27596: LD_INT 11
27598: PUSH
27599: LD_INT 12
27601: PUSH
27602: LD_INT 15
27604: PUSH
27605: LD_INT 16
27607: PUSH
27608: LD_INT 20
27610: PUSH
27611: LD_INT 21
27613: PUSH
27614: LD_INT 22
27616: PUSH
27617: LD_INT 23
27619: PUSH
27620: LD_INT 25
27622: PUSH
27623: LD_INT 26
27625: PUSH
27626: LD_INT 30
27628: PUSH
27629: LD_INT 31
27631: PUSH
27632: LD_INT 32
27634: PUSH
27635: LD_INT 33
27637: PUSH
27638: LD_INT 34
27640: PUSH
27641: LD_INT 35
27643: PUSH
27644: LD_INT 36
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 101
27672: PUSH
27673: LD_INT 102
27675: PUSH
27676: LD_INT 103
27678: PUSH
27679: LD_INT 106
27681: PUSH
27682: LD_INT 108
27684: PUSH
27685: LD_INT 112
27687: PUSH
27688: LD_INT 113
27690: PUSH
27691: LD_INT 114
27693: PUSH
27694: LD_INT 115
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: ST_TO_ADDR
27712: GO 27943
27714: LD_INT 19
27716: DOUBLE
27717: EQUAL
27718: IFTRUE 27722
27720: GO 27942
27722: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
27723: LD_ADDR_VAR 0 1
27727: PUSH
27728: LD_INT 1
27730: PUSH
27731: LD_INT 2
27733: PUSH
27734: LD_INT 3
27736: PUSH
27737: LD_INT 4
27739: PUSH
27740: LD_INT 5
27742: PUSH
27743: LD_INT 6
27745: PUSH
27746: LD_INT 7
27748: PUSH
27749: LD_INT 8
27751: PUSH
27752: LD_INT 9
27754: PUSH
27755: LD_INT 10
27757: PUSH
27758: LD_INT 11
27760: PUSH
27761: LD_INT 12
27763: PUSH
27764: LD_INT 13
27766: PUSH
27767: LD_INT 14
27769: PUSH
27770: LD_INT 15
27772: PUSH
27773: LD_INT 16
27775: PUSH
27776: LD_INT 17
27778: PUSH
27779: LD_INT 18
27781: PUSH
27782: LD_INT 19
27784: PUSH
27785: LD_INT 20
27787: PUSH
27788: LD_INT 21
27790: PUSH
27791: LD_INT 22
27793: PUSH
27794: LD_INT 23
27796: PUSH
27797: LD_INT 24
27799: PUSH
27800: LD_INT 25
27802: PUSH
27803: LD_INT 26
27805: PUSH
27806: LD_INT 27
27808: PUSH
27809: LD_INT 28
27811: PUSH
27812: LD_INT 29
27814: PUSH
27815: LD_INT 30
27817: PUSH
27818: LD_INT 31
27820: PUSH
27821: LD_INT 32
27823: PUSH
27824: LD_INT 33
27826: PUSH
27827: LD_INT 34
27829: PUSH
27830: LD_INT 35
27832: PUSH
27833: LD_INT 36
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 101
27876: PUSH
27877: LD_INT 102
27879: PUSH
27880: LD_INT 103
27882: PUSH
27883: LD_INT 104
27885: PUSH
27886: LD_INT 105
27888: PUSH
27889: LD_INT 106
27891: PUSH
27892: LD_INT 107
27894: PUSH
27895: LD_INT 108
27897: PUSH
27898: LD_INT 109
27900: PUSH
27901: LD_INT 110
27903: PUSH
27904: LD_INT 111
27906: PUSH
27907: LD_INT 112
27909: PUSH
27910: LD_INT 113
27912: PUSH
27913: LD_INT 114
27915: PUSH
27916: LD_INT 115
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: ST_TO_ADDR
27940: GO 27943
27942: POP
// end ; if result then
27943: LD_VAR 0 1
27947: IFFALSE 28236
// begin normal :=  ;
27949: LD_ADDR_VAR 0 3
27953: PUSH
27954: LD_STRING 
27956: ST_TO_ADDR
// hardcore :=  ;
27957: LD_ADDR_VAR 0 4
27961: PUSH
27962: LD_STRING 
27964: ST_TO_ADDR
// for i = 1 to normalCounter do
27965: LD_ADDR_VAR 0 5
27969: PUSH
27970: DOUBLE
27971: LD_INT 1
27973: DEC
27974: ST_TO_ADDR
27975: LD_EXP 57
27979: PUSH
27980: FOR_TO
27981: IFFALSE 28082
// begin tmp := 0 ;
27983: LD_ADDR_VAR 0 2
27987: PUSH
27988: LD_STRING 0
27990: ST_TO_ADDR
// if result [ 1 ] then
27991: LD_VAR 0 1
27995: PUSH
27996: LD_INT 1
27998: ARRAY
27999: IFFALSE 28064
// if result [ 1 ] [ 1 ] = i then
28001: LD_VAR 0 1
28005: PUSH
28006: LD_INT 1
28008: ARRAY
28009: PUSH
28010: LD_INT 1
28012: ARRAY
28013: PUSH
28014: LD_VAR 0 5
28018: EQUAL
28019: IFFALSE 28064
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
28021: LD_ADDR_VAR 0 1
28025: PUSH
28026: LD_VAR 0 1
28030: PPUSH
28031: LD_INT 1
28033: PPUSH
28034: LD_VAR 0 1
28038: PUSH
28039: LD_INT 1
28041: ARRAY
28042: PPUSH
28043: LD_INT 1
28045: PPUSH
28046: CALL_OW 3
28050: PPUSH
28051: CALL_OW 1
28055: ST_TO_ADDR
// tmp := 1 ;
28056: LD_ADDR_VAR 0 2
28060: PUSH
28061: LD_STRING 1
28063: ST_TO_ADDR
// end ; normal := normal & tmp ;
28064: LD_ADDR_VAR 0 3
28068: PUSH
28069: LD_VAR 0 3
28073: PUSH
28074: LD_VAR 0 2
28078: STR
28079: ST_TO_ADDR
// end ;
28080: GO 27980
28082: POP
28083: POP
// for i = 1 to hardcoreCounter do
28084: LD_ADDR_VAR 0 5
28088: PUSH
28089: DOUBLE
28090: LD_INT 1
28092: DEC
28093: ST_TO_ADDR
28094: LD_EXP 58
28098: PUSH
28099: FOR_TO
28100: IFFALSE 28205
// begin tmp := 0 ;
28102: LD_ADDR_VAR 0 2
28106: PUSH
28107: LD_STRING 0
28109: ST_TO_ADDR
// if result [ 2 ] then
28110: LD_VAR 0 1
28114: PUSH
28115: LD_INT 2
28117: ARRAY
28118: IFFALSE 28187
// if result [ 2 ] [ 1 ] = 100 + i then
28120: LD_VAR 0 1
28124: PUSH
28125: LD_INT 2
28127: ARRAY
28128: PUSH
28129: LD_INT 1
28131: ARRAY
28132: PUSH
28133: LD_INT 100
28135: PUSH
28136: LD_VAR 0 5
28140: PLUS
28141: EQUAL
28142: IFFALSE 28187
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
28144: LD_ADDR_VAR 0 1
28148: PUSH
28149: LD_VAR 0 1
28153: PPUSH
28154: LD_INT 2
28156: PPUSH
28157: LD_VAR 0 1
28161: PUSH
28162: LD_INT 2
28164: ARRAY
28165: PPUSH
28166: LD_INT 1
28168: PPUSH
28169: CALL_OW 3
28173: PPUSH
28174: CALL_OW 1
28178: ST_TO_ADDR
// tmp := 1 ;
28179: LD_ADDR_VAR 0 2
28183: PUSH
28184: LD_STRING 1
28186: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
28187: LD_ADDR_VAR 0 4
28191: PUSH
28192: LD_VAR 0 4
28196: PUSH
28197: LD_VAR 0 2
28201: STR
28202: ST_TO_ADDR
// end ;
28203: GO 28099
28205: POP
28206: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
28207: LD_STRING getStreamItemsFromMission("
28209: PUSH
28210: LD_VAR 0 3
28214: STR
28215: PUSH
28216: LD_STRING ","
28218: STR
28219: PUSH
28220: LD_VAR 0 4
28224: STR
28225: PUSH
28226: LD_STRING ")
28228: STR
28229: PPUSH
28230: CALL_OW 559
// end else
28234: GO 28243
// ToLua ( getStreamItemsFromMission("","") ) ;
28236: LD_STRING getStreamItemsFromMission("","")
28238: PPUSH
28239: CALL_OW 559
// end ;
28243: LD_VAR 0 1
28247: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
28248: LD_VAR 0 2
28252: PUSH
28253: LD_INT 100
28255: EQUAL
28256: IFFALSE 29205
// begin if not StreamModeActive then
28258: LD_EXP 56
28262: NOT
28263: IFFALSE 28273
// StreamModeActive := true ;
28265: LD_ADDR_EXP 56
28269: PUSH
28270: LD_INT 1
28272: ST_TO_ADDR
// if p3 = 0 then
28273: LD_VAR 0 3
28277: PUSH
28278: LD_INT 0
28280: EQUAL
28281: IFFALSE 28287
// InitStreamMode ;
28283: CALL 24533 0 0
// if p3 = 1 then
28287: LD_VAR 0 3
28291: PUSH
28292: LD_INT 1
28294: EQUAL
28295: IFFALSE 28305
// sRocket := true ;
28297: LD_ADDR_EXP 61
28301: PUSH
28302: LD_INT 1
28304: ST_TO_ADDR
// if p3 = 2 then
28305: LD_VAR 0 3
28309: PUSH
28310: LD_INT 2
28312: EQUAL
28313: IFFALSE 28323
// sSpeed := true ;
28315: LD_ADDR_EXP 60
28319: PUSH
28320: LD_INT 1
28322: ST_TO_ADDR
// if p3 = 3 then
28323: LD_VAR 0 3
28327: PUSH
28328: LD_INT 3
28330: EQUAL
28331: IFFALSE 28341
// sEngine := true ;
28333: LD_ADDR_EXP 62
28337: PUSH
28338: LD_INT 1
28340: ST_TO_ADDR
// if p3 = 4 then
28341: LD_VAR 0 3
28345: PUSH
28346: LD_INT 4
28348: EQUAL
28349: IFFALSE 28359
// sSpec := true ;
28351: LD_ADDR_EXP 59
28355: PUSH
28356: LD_INT 1
28358: ST_TO_ADDR
// if p3 = 5 then
28359: LD_VAR 0 3
28363: PUSH
28364: LD_INT 5
28366: EQUAL
28367: IFFALSE 28377
// sLevel := true ;
28369: LD_ADDR_EXP 63
28373: PUSH
28374: LD_INT 1
28376: ST_TO_ADDR
// if p3 = 6 then
28377: LD_VAR 0 3
28381: PUSH
28382: LD_INT 6
28384: EQUAL
28385: IFFALSE 28395
// sArmoury := true ;
28387: LD_ADDR_EXP 64
28391: PUSH
28392: LD_INT 1
28394: ST_TO_ADDR
// if p3 = 7 then
28395: LD_VAR 0 3
28399: PUSH
28400: LD_INT 7
28402: EQUAL
28403: IFFALSE 28413
// sRadar := true ;
28405: LD_ADDR_EXP 65
28409: PUSH
28410: LD_INT 1
28412: ST_TO_ADDR
// if p3 = 8 then
28413: LD_VAR 0 3
28417: PUSH
28418: LD_INT 8
28420: EQUAL
28421: IFFALSE 28431
// sBunker := true ;
28423: LD_ADDR_EXP 66
28427: PUSH
28428: LD_INT 1
28430: ST_TO_ADDR
// if p3 = 9 then
28431: LD_VAR 0 3
28435: PUSH
28436: LD_INT 9
28438: EQUAL
28439: IFFALSE 28449
// sHack := true ;
28441: LD_ADDR_EXP 67
28445: PUSH
28446: LD_INT 1
28448: ST_TO_ADDR
// if p3 = 10 then
28449: LD_VAR 0 3
28453: PUSH
28454: LD_INT 10
28456: EQUAL
28457: IFFALSE 28467
// sFire := true ;
28459: LD_ADDR_EXP 68
28463: PUSH
28464: LD_INT 1
28466: ST_TO_ADDR
// if p3 = 11 then
28467: LD_VAR 0 3
28471: PUSH
28472: LD_INT 11
28474: EQUAL
28475: IFFALSE 28485
// sRefresh := true ;
28477: LD_ADDR_EXP 69
28481: PUSH
28482: LD_INT 1
28484: ST_TO_ADDR
// if p3 = 12 then
28485: LD_VAR 0 3
28489: PUSH
28490: LD_INT 12
28492: EQUAL
28493: IFFALSE 28503
// sExp := true ;
28495: LD_ADDR_EXP 70
28499: PUSH
28500: LD_INT 1
28502: ST_TO_ADDR
// if p3 = 13 then
28503: LD_VAR 0 3
28507: PUSH
28508: LD_INT 13
28510: EQUAL
28511: IFFALSE 28521
// sDepot := true ;
28513: LD_ADDR_EXP 71
28517: PUSH
28518: LD_INT 1
28520: ST_TO_ADDR
// if p3 = 14 then
28521: LD_VAR 0 3
28525: PUSH
28526: LD_INT 14
28528: EQUAL
28529: IFFALSE 28539
// sFlag := true ;
28531: LD_ADDR_EXP 72
28535: PUSH
28536: LD_INT 1
28538: ST_TO_ADDR
// if p3 = 15 then
28539: LD_VAR 0 3
28543: PUSH
28544: LD_INT 15
28546: EQUAL
28547: IFFALSE 28557
// sKamikadze := true ;
28549: LD_ADDR_EXP 80
28553: PUSH
28554: LD_INT 1
28556: ST_TO_ADDR
// if p3 = 16 then
28557: LD_VAR 0 3
28561: PUSH
28562: LD_INT 16
28564: EQUAL
28565: IFFALSE 28575
// sTroll := true ;
28567: LD_ADDR_EXP 81
28571: PUSH
28572: LD_INT 1
28574: ST_TO_ADDR
// if p3 = 17 then
28575: LD_VAR 0 3
28579: PUSH
28580: LD_INT 17
28582: EQUAL
28583: IFFALSE 28593
// sSlow := true ;
28585: LD_ADDR_EXP 82
28589: PUSH
28590: LD_INT 1
28592: ST_TO_ADDR
// if p3 = 18 then
28593: LD_VAR 0 3
28597: PUSH
28598: LD_INT 18
28600: EQUAL
28601: IFFALSE 28611
// sLack := true ;
28603: LD_ADDR_EXP 83
28607: PUSH
28608: LD_INT 1
28610: ST_TO_ADDR
// if p3 = 19 then
28611: LD_VAR 0 3
28615: PUSH
28616: LD_INT 19
28618: EQUAL
28619: IFFALSE 28629
// sTank := true ;
28621: LD_ADDR_EXP 85
28625: PUSH
28626: LD_INT 1
28628: ST_TO_ADDR
// if p3 = 20 then
28629: LD_VAR 0 3
28633: PUSH
28634: LD_INT 20
28636: EQUAL
28637: IFFALSE 28647
// sRemote := true ;
28639: LD_ADDR_EXP 86
28643: PUSH
28644: LD_INT 1
28646: ST_TO_ADDR
// if p3 = 21 then
28647: LD_VAR 0 3
28651: PUSH
28652: LD_INT 21
28654: EQUAL
28655: IFFALSE 28665
// sPowell := true ;
28657: LD_ADDR_EXP 87
28661: PUSH
28662: LD_INT 1
28664: ST_TO_ADDR
// if p3 = 22 then
28665: LD_VAR 0 3
28669: PUSH
28670: LD_INT 22
28672: EQUAL
28673: IFFALSE 28683
// sTeleport := true ;
28675: LD_ADDR_EXP 90
28679: PUSH
28680: LD_INT 1
28682: ST_TO_ADDR
// if p3 = 23 then
28683: LD_VAR 0 3
28687: PUSH
28688: LD_INT 23
28690: EQUAL
28691: IFFALSE 28701
// sOilTower := true ;
28693: LD_ADDR_EXP 92
28697: PUSH
28698: LD_INT 1
28700: ST_TO_ADDR
// if p3 = 24 then
28701: LD_VAR 0 3
28705: PUSH
28706: LD_INT 24
28708: EQUAL
28709: IFFALSE 28719
// sShovel := true ;
28711: LD_ADDR_EXP 93
28715: PUSH
28716: LD_INT 1
28718: ST_TO_ADDR
// if p3 = 25 then
28719: LD_VAR 0 3
28723: PUSH
28724: LD_INT 25
28726: EQUAL
28727: IFFALSE 28737
// sSheik := true ;
28729: LD_ADDR_EXP 94
28733: PUSH
28734: LD_INT 1
28736: ST_TO_ADDR
// if p3 = 26 then
28737: LD_VAR 0 3
28741: PUSH
28742: LD_INT 26
28744: EQUAL
28745: IFFALSE 28755
// sEarthquake := true ;
28747: LD_ADDR_EXP 96
28751: PUSH
28752: LD_INT 1
28754: ST_TO_ADDR
// if p3 = 27 then
28755: LD_VAR 0 3
28759: PUSH
28760: LD_INT 27
28762: EQUAL
28763: IFFALSE 28773
// sAI := true ;
28765: LD_ADDR_EXP 97
28769: PUSH
28770: LD_INT 1
28772: ST_TO_ADDR
// if p3 = 28 then
28773: LD_VAR 0 3
28777: PUSH
28778: LD_INT 28
28780: EQUAL
28781: IFFALSE 28791
// sCargo := true ;
28783: LD_ADDR_EXP 100
28787: PUSH
28788: LD_INT 1
28790: ST_TO_ADDR
// if p3 = 29 then
28791: LD_VAR 0 3
28795: PUSH
28796: LD_INT 29
28798: EQUAL
28799: IFFALSE 28809
// sDLaser := true ;
28801: LD_ADDR_EXP 101
28805: PUSH
28806: LD_INT 1
28808: ST_TO_ADDR
// if p3 = 30 then
28809: LD_VAR 0 3
28813: PUSH
28814: LD_INT 30
28816: EQUAL
28817: IFFALSE 28827
// sExchange := true ;
28819: LD_ADDR_EXP 102
28823: PUSH
28824: LD_INT 1
28826: ST_TO_ADDR
// if p3 = 31 then
28827: LD_VAR 0 3
28831: PUSH
28832: LD_INT 31
28834: EQUAL
28835: IFFALSE 28845
// sFac := true ;
28837: LD_ADDR_EXP 103
28841: PUSH
28842: LD_INT 1
28844: ST_TO_ADDR
// if p3 = 32 then
28845: LD_VAR 0 3
28849: PUSH
28850: LD_INT 32
28852: EQUAL
28853: IFFALSE 28863
// sPower := true ;
28855: LD_ADDR_EXP 104
28859: PUSH
28860: LD_INT 1
28862: ST_TO_ADDR
// if p3 = 33 then
28863: LD_VAR 0 3
28867: PUSH
28868: LD_INT 33
28870: EQUAL
28871: IFFALSE 28881
// sRandom := true ;
28873: LD_ADDR_EXP 105
28877: PUSH
28878: LD_INT 1
28880: ST_TO_ADDR
// if p3 = 34 then
28881: LD_VAR 0 3
28885: PUSH
28886: LD_INT 34
28888: EQUAL
28889: IFFALSE 28899
// sShield := true ;
28891: LD_ADDR_EXP 106
28895: PUSH
28896: LD_INT 1
28898: ST_TO_ADDR
// if p3 = 35 then
28899: LD_VAR 0 3
28903: PUSH
28904: LD_INT 35
28906: EQUAL
28907: IFFALSE 28917
// sTime := true ;
28909: LD_ADDR_EXP 107
28913: PUSH
28914: LD_INT 1
28916: ST_TO_ADDR
// if p3 = 36 then
28917: LD_VAR 0 3
28921: PUSH
28922: LD_INT 36
28924: EQUAL
28925: IFFALSE 28935
// sTools := true ;
28927: LD_ADDR_EXP 108
28931: PUSH
28932: LD_INT 1
28934: ST_TO_ADDR
// if p3 = 101 then
28935: LD_VAR 0 3
28939: PUSH
28940: LD_INT 101
28942: EQUAL
28943: IFFALSE 28953
// sSold := true ;
28945: LD_ADDR_EXP 73
28949: PUSH
28950: LD_INT 1
28952: ST_TO_ADDR
// if p3 = 102 then
28953: LD_VAR 0 3
28957: PUSH
28958: LD_INT 102
28960: EQUAL
28961: IFFALSE 28971
// sDiff := true ;
28963: LD_ADDR_EXP 74
28967: PUSH
28968: LD_INT 1
28970: ST_TO_ADDR
// if p3 = 103 then
28971: LD_VAR 0 3
28975: PUSH
28976: LD_INT 103
28978: EQUAL
28979: IFFALSE 28989
// sFog := true ;
28981: LD_ADDR_EXP 77
28985: PUSH
28986: LD_INT 1
28988: ST_TO_ADDR
// if p3 = 104 then
28989: LD_VAR 0 3
28993: PUSH
28994: LD_INT 104
28996: EQUAL
28997: IFFALSE 29007
// sReset := true ;
28999: LD_ADDR_EXP 78
29003: PUSH
29004: LD_INT 1
29006: ST_TO_ADDR
// if p3 = 105 then
29007: LD_VAR 0 3
29011: PUSH
29012: LD_INT 105
29014: EQUAL
29015: IFFALSE 29025
// sSun := true ;
29017: LD_ADDR_EXP 79
29021: PUSH
29022: LD_INT 1
29024: ST_TO_ADDR
// if p3 = 106 then
29025: LD_VAR 0 3
29029: PUSH
29030: LD_INT 106
29032: EQUAL
29033: IFFALSE 29043
// sTiger := true ;
29035: LD_ADDR_EXP 75
29039: PUSH
29040: LD_INT 1
29042: ST_TO_ADDR
// if p3 = 107 then
29043: LD_VAR 0 3
29047: PUSH
29048: LD_INT 107
29050: EQUAL
29051: IFFALSE 29061
// sBomb := true ;
29053: LD_ADDR_EXP 76
29057: PUSH
29058: LD_INT 1
29060: ST_TO_ADDR
// if p3 = 108 then
29061: LD_VAR 0 3
29065: PUSH
29066: LD_INT 108
29068: EQUAL
29069: IFFALSE 29079
// sWound := true ;
29071: LD_ADDR_EXP 84
29075: PUSH
29076: LD_INT 1
29078: ST_TO_ADDR
// if p3 = 109 then
29079: LD_VAR 0 3
29083: PUSH
29084: LD_INT 109
29086: EQUAL
29087: IFFALSE 29097
// sBetray := true ;
29089: LD_ADDR_EXP 88
29093: PUSH
29094: LD_INT 1
29096: ST_TO_ADDR
// if p3 = 110 then
29097: LD_VAR 0 3
29101: PUSH
29102: LD_INT 110
29104: EQUAL
29105: IFFALSE 29115
// sContamin := true ;
29107: LD_ADDR_EXP 89
29111: PUSH
29112: LD_INT 1
29114: ST_TO_ADDR
// if p3 = 111 then
29115: LD_VAR 0 3
29119: PUSH
29120: LD_INT 111
29122: EQUAL
29123: IFFALSE 29133
// sOil := true ;
29125: LD_ADDR_EXP 91
29129: PUSH
29130: LD_INT 1
29132: ST_TO_ADDR
// if p3 = 112 then
29133: LD_VAR 0 3
29137: PUSH
29138: LD_INT 112
29140: EQUAL
29141: IFFALSE 29151
// sStu := true ;
29143: LD_ADDR_EXP 95
29147: PUSH
29148: LD_INT 1
29150: ST_TO_ADDR
// if p3 = 113 then
29151: LD_VAR 0 3
29155: PUSH
29156: LD_INT 113
29158: EQUAL
29159: IFFALSE 29169
// sBazooka := true ;
29161: LD_ADDR_EXP 98
29165: PUSH
29166: LD_INT 1
29168: ST_TO_ADDR
// if p3 = 114 then
29169: LD_VAR 0 3
29173: PUSH
29174: LD_INT 114
29176: EQUAL
29177: IFFALSE 29187
// sMortar := true ;
29179: LD_ADDR_EXP 99
29183: PUSH
29184: LD_INT 1
29186: ST_TO_ADDR
// if p3 = 115 then
29187: LD_VAR 0 3
29191: PUSH
29192: LD_INT 115
29194: EQUAL
29195: IFFALSE 29205
// sRanger := true ;
29197: LD_ADDR_EXP 109
29201: PUSH
29202: LD_INT 1
29204: ST_TO_ADDR
// end ; end ;
29205: PPOPN 6
29207: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
29208: LD_EXP 56
29212: PUSH
29213: LD_EXP 61
29217: AND
29218: IFFALSE 29342
29220: GO 29222
29222: DISABLE
29223: LD_INT 0
29225: PPUSH
29226: PPUSH
// begin enable ;
29227: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
29228: LD_ADDR_VAR 0 2
29232: PUSH
29233: LD_INT 22
29235: PUSH
29236: LD_OWVAR 2
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 2
29247: PUSH
29248: LD_INT 34
29250: PUSH
29251: LD_INT 7
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 34
29260: PUSH
29261: LD_INT 45
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 34
29270: PUSH
29271: LD_INT 28
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 34
29280: PUSH
29281: LD_INT 47
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PPUSH
29299: CALL_OW 69
29303: ST_TO_ADDR
// if not tmp then
29304: LD_VAR 0 2
29308: NOT
29309: IFFALSE 29313
// exit ;
29311: GO 29342
// for i in tmp do
29313: LD_ADDR_VAR 0 1
29317: PUSH
29318: LD_VAR 0 2
29322: PUSH
29323: FOR_IN
29324: IFFALSE 29340
// begin SetLives ( i , 0 ) ;
29326: LD_VAR 0 1
29330: PPUSH
29331: LD_INT 0
29333: PPUSH
29334: CALL_OW 234
// end ;
29338: GO 29323
29340: POP
29341: POP
// end ;
29342: PPOPN 2
29344: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
29345: LD_EXP 56
29349: PUSH
29350: LD_EXP 62
29354: AND
29355: IFFALSE 29439
29357: GO 29359
29359: DISABLE
29360: LD_INT 0
29362: PPUSH
29363: PPUSH
// begin enable ;
29364: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
29365: LD_ADDR_VAR 0 2
29369: PUSH
29370: LD_INT 22
29372: PUSH
29373: LD_OWVAR 2
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 32
29384: PUSH
29385: LD_INT 3
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PPUSH
29396: CALL_OW 69
29400: ST_TO_ADDR
// if not tmp then
29401: LD_VAR 0 2
29405: NOT
29406: IFFALSE 29410
// exit ;
29408: GO 29439
// for i in tmp do
29410: LD_ADDR_VAR 0 1
29414: PUSH
29415: LD_VAR 0 2
29419: PUSH
29420: FOR_IN
29421: IFFALSE 29437
// begin SetLives ( i , 0 ) ;
29423: LD_VAR 0 1
29427: PPUSH
29428: LD_INT 0
29430: PPUSH
29431: CALL_OW 234
// end ;
29435: GO 29420
29437: POP
29438: POP
// end ;
29439: PPOPN 2
29441: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
29442: LD_EXP 56
29446: PUSH
29447: LD_EXP 59
29451: AND
29452: IFFALSE 29545
29454: GO 29456
29456: DISABLE
29457: LD_INT 0
29459: PPUSH
// begin enable ;
29460: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
29461: LD_ADDR_VAR 0 1
29465: PUSH
29466: LD_INT 22
29468: PUSH
29469: LD_OWVAR 2
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 2
29480: PUSH
29481: LD_INT 25
29483: PUSH
29484: LD_INT 5
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 25
29493: PUSH
29494: LD_INT 9
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 25
29503: PUSH
29504: LD_INT 8
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PPUSH
29521: CALL_OW 69
29525: PUSH
29526: FOR_IN
29527: IFFALSE 29543
// begin SetClass ( i , 1 ) ;
29529: LD_VAR 0 1
29533: PPUSH
29534: LD_INT 1
29536: PPUSH
29537: CALL_OW 336
// end ;
29541: GO 29526
29543: POP
29544: POP
// end ;
29545: PPOPN 1
29547: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
29548: LD_EXP 56
29552: PUSH
29553: LD_EXP 60
29557: AND
29558: PUSH
29559: LD_OWVAR 65
29563: PUSH
29564: LD_INT 7
29566: LESS
29567: AND
29568: IFFALSE 29582
29570: GO 29572
29572: DISABLE
// begin enable ;
29573: ENABLE
// game_speed := 7 ;
29574: LD_ADDR_OWVAR 65
29578: PUSH
29579: LD_INT 7
29581: ST_TO_ADDR
// end ;
29582: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
29583: LD_EXP 56
29587: PUSH
29588: LD_EXP 63
29592: AND
29593: IFFALSE 29795
29595: GO 29597
29597: DISABLE
29598: LD_INT 0
29600: PPUSH
29601: PPUSH
29602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29603: LD_ADDR_VAR 0 3
29607: PUSH
29608: LD_INT 81
29610: PUSH
29611: LD_OWVAR 2
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 21
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PPUSH
29634: CALL_OW 69
29638: ST_TO_ADDR
// if not tmp then
29639: LD_VAR 0 3
29643: NOT
29644: IFFALSE 29648
// exit ;
29646: GO 29795
// if tmp > 5 then
29648: LD_VAR 0 3
29652: PUSH
29653: LD_INT 5
29655: GREATER
29656: IFFALSE 29668
// k := 5 else
29658: LD_ADDR_VAR 0 2
29662: PUSH
29663: LD_INT 5
29665: ST_TO_ADDR
29666: GO 29678
// k := tmp ;
29668: LD_ADDR_VAR 0 2
29672: PUSH
29673: LD_VAR 0 3
29677: ST_TO_ADDR
// for i := 1 to k do
29678: LD_ADDR_VAR 0 1
29682: PUSH
29683: DOUBLE
29684: LD_INT 1
29686: DEC
29687: ST_TO_ADDR
29688: LD_VAR 0 2
29692: PUSH
29693: FOR_TO
29694: IFFALSE 29793
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
29696: LD_VAR 0 3
29700: PUSH
29701: LD_VAR 0 1
29705: ARRAY
29706: PPUSH
29707: LD_VAR 0 1
29711: PUSH
29712: LD_INT 4
29714: MOD
29715: PUSH
29716: LD_INT 1
29718: PLUS
29719: PPUSH
29720: CALL_OW 259
29724: PUSH
29725: LD_INT 10
29727: LESS
29728: IFFALSE 29791
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
29730: LD_VAR 0 3
29734: PUSH
29735: LD_VAR 0 1
29739: ARRAY
29740: PPUSH
29741: LD_VAR 0 1
29745: PUSH
29746: LD_INT 4
29748: MOD
29749: PUSH
29750: LD_INT 1
29752: PLUS
29753: PPUSH
29754: LD_VAR 0 3
29758: PUSH
29759: LD_VAR 0 1
29763: ARRAY
29764: PPUSH
29765: LD_VAR 0 1
29769: PUSH
29770: LD_INT 4
29772: MOD
29773: PUSH
29774: LD_INT 1
29776: PLUS
29777: PPUSH
29778: CALL_OW 259
29782: PUSH
29783: LD_INT 1
29785: PLUS
29786: PPUSH
29787: CALL_OW 237
29791: GO 29693
29793: POP
29794: POP
// end ;
29795: PPOPN 3
29797: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
29798: LD_EXP 56
29802: PUSH
29803: LD_EXP 64
29807: AND
29808: IFFALSE 29828
29810: GO 29812
29812: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
29813: LD_INT 4
29815: PPUSH
29816: LD_OWVAR 2
29820: PPUSH
29821: LD_INT 0
29823: PPUSH
29824: CALL_OW 324
29828: END
// every 0 0$1 trigger StreamModeActive and sShovel do
29829: LD_EXP 56
29833: PUSH
29834: LD_EXP 93
29838: AND
29839: IFFALSE 29859
29841: GO 29843
29843: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
29844: LD_INT 19
29846: PPUSH
29847: LD_OWVAR 2
29851: PPUSH
29852: LD_INT 0
29854: PPUSH
29855: CALL_OW 324
29859: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
29860: LD_EXP 56
29864: PUSH
29865: LD_EXP 65
29869: AND
29870: IFFALSE 29972
29872: GO 29874
29874: DISABLE
29875: LD_INT 0
29877: PPUSH
29878: PPUSH
// begin enable ;
29879: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
29880: LD_ADDR_VAR 0 2
29884: PUSH
29885: LD_INT 22
29887: PUSH
29888: LD_OWVAR 2
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 2
29899: PUSH
29900: LD_INT 34
29902: PUSH
29903: LD_INT 11
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 34
29912: PUSH
29913: LD_INT 30
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: LIST
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PPUSH
29929: CALL_OW 69
29933: ST_TO_ADDR
// if not tmp then
29934: LD_VAR 0 2
29938: NOT
29939: IFFALSE 29943
// exit ;
29941: GO 29972
// for i in tmp do
29943: LD_ADDR_VAR 0 1
29947: PUSH
29948: LD_VAR 0 2
29952: PUSH
29953: FOR_IN
29954: IFFALSE 29970
// begin SetLives ( i , 0 ) ;
29956: LD_VAR 0 1
29960: PPUSH
29961: LD_INT 0
29963: PPUSH
29964: CALL_OW 234
// end ;
29968: GO 29953
29970: POP
29971: POP
// end ;
29972: PPOPN 2
29974: END
// every 0 0$1 trigger StreamModeActive and sBunker do
29975: LD_EXP 56
29979: PUSH
29980: LD_EXP 66
29984: AND
29985: IFFALSE 30005
29987: GO 29989
29989: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
29990: LD_INT 32
29992: PPUSH
29993: LD_OWVAR 2
29997: PPUSH
29998: LD_INT 0
30000: PPUSH
30001: CALL_OW 324
30005: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
30006: LD_EXP 56
30010: PUSH
30011: LD_EXP 67
30015: AND
30016: IFFALSE 30197
30018: GO 30020
30020: DISABLE
30021: LD_INT 0
30023: PPUSH
30024: PPUSH
30025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30026: LD_ADDR_VAR 0 2
30030: PUSH
30031: LD_INT 22
30033: PUSH
30034: LD_OWVAR 2
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 33
30045: PUSH
30046: LD_INT 3
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PPUSH
30057: CALL_OW 69
30061: ST_TO_ADDR
// if not tmp then
30062: LD_VAR 0 2
30066: NOT
30067: IFFALSE 30071
// exit ;
30069: GO 30197
// side := 0 ;
30071: LD_ADDR_VAR 0 3
30075: PUSH
30076: LD_INT 0
30078: ST_TO_ADDR
// for i := 1 to 8 do
30079: LD_ADDR_VAR 0 1
30083: PUSH
30084: DOUBLE
30085: LD_INT 1
30087: DEC
30088: ST_TO_ADDR
30089: LD_INT 8
30091: PUSH
30092: FOR_TO
30093: IFFALSE 30141
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30095: LD_OWVAR 2
30099: PUSH
30100: LD_VAR 0 1
30104: NONEQUAL
30105: PUSH
30106: LD_OWVAR 2
30110: PPUSH
30111: LD_VAR 0 1
30115: PPUSH
30116: CALL_OW 81
30120: PUSH
30121: LD_INT 2
30123: EQUAL
30124: AND
30125: IFFALSE 30139
// begin side := i ;
30127: LD_ADDR_VAR 0 3
30131: PUSH
30132: LD_VAR 0 1
30136: ST_TO_ADDR
// break ;
30137: GO 30141
// end ;
30139: GO 30092
30141: POP
30142: POP
// if not side then
30143: LD_VAR 0 3
30147: NOT
30148: IFFALSE 30152
// exit ;
30150: GO 30197
// for i := 1 to tmp do
30152: LD_ADDR_VAR 0 1
30156: PUSH
30157: DOUBLE
30158: LD_INT 1
30160: DEC
30161: ST_TO_ADDR
30162: LD_VAR 0 2
30166: PUSH
30167: FOR_TO
30168: IFFALSE 30195
// if Prob ( 30 ) then
30170: LD_INT 30
30172: PPUSH
30173: CALL_OW 13
30177: IFFALSE 30193
// SetSide ( i , side ) ;
30179: LD_VAR 0 1
30183: PPUSH
30184: LD_VAR 0 3
30188: PPUSH
30189: CALL_OW 235
30193: GO 30167
30195: POP
30196: POP
// end ;
30197: PPOPN 3
30199: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
30200: LD_EXP 56
30204: PUSH
30205: LD_EXP 69
30209: AND
30210: IFFALSE 30329
30212: GO 30214
30214: DISABLE
30215: LD_INT 0
30217: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
30218: LD_ADDR_VAR 0 1
30222: PUSH
30223: LD_INT 22
30225: PUSH
30226: LD_OWVAR 2
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 21
30237: PUSH
30238: LD_INT 1
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 3
30247: PUSH
30248: LD_INT 23
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: LIST
30266: PPUSH
30267: CALL_OW 69
30271: PUSH
30272: FOR_IN
30273: IFFALSE 30327
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
30275: LD_VAR 0 1
30279: PPUSH
30280: CALL_OW 257
30284: PUSH
30285: LD_INT 1
30287: PUSH
30288: LD_INT 2
30290: PUSH
30291: LD_INT 3
30293: PUSH
30294: LD_INT 4
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: IN
30303: IFFALSE 30325
// SetClass ( un , rand ( 1 , 4 ) ) ;
30305: LD_VAR 0 1
30309: PPUSH
30310: LD_INT 1
30312: PPUSH
30313: LD_INT 4
30315: PPUSH
30316: CALL_OW 12
30320: PPUSH
30321: CALL_OW 336
30325: GO 30272
30327: POP
30328: POP
// end ;
30329: PPOPN 1
30331: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
30332: LD_EXP 56
30336: PUSH
30337: LD_EXP 68
30341: AND
30342: IFFALSE 30421
30344: GO 30346
30346: DISABLE
30347: LD_INT 0
30349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30350: LD_ADDR_VAR 0 1
30354: PUSH
30355: LD_INT 22
30357: PUSH
30358: LD_OWVAR 2
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 21
30369: PUSH
30370: LD_INT 3
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PPUSH
30381: CALL_OW 69
30385: ST_TO_ADDR
// if not tmp then
30386: LD_VAR 0 1
30390: NOT
30391: IFFALSE 30395
// exit ;
30393: GO 30421
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
30395: LD_VAR 0 1
30399: PUSH
30400: LD_INT 1
30402: PPUSH
30403: LD_VAR 0 1
30407: PPUSH
30408: CALL_OW 12
30412: ARRAY
30413: PPUSH
30414: LD_INT 100
30416: PPUSH
30417: CALL_OW 234
// end ;
30421: PPOPN 1
30423: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
30424: LD_EXP 56
30428: PUSH
30429: LD_EXP 70
30433: AND
30434: IFFALSE 30532
30436: GO 30438
30438: DISABLE
30439: LD_INT 0
30441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30442: LD_ADDR_VAR 0 1
30446: PUSH
30447: LD_INT 22
30449: PUSH
30450: LD_OWVAR 2
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 21
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PPUSH
30473: CALL_OW 69
30477: ST_TO_ADDR
// if not tmp then
30478: LD_VAR 0 1
30482: NOT
30483: IFFALSE 30487
// exit ;
30485: GO 30532
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
30487: LD_VAR 0 1
30491: PUSH
30492: LD_INT 1
30494: PPUSH
30495: LD_VAR 0 1
30499: PPUSH
30500: CALL_OW 12
30504: ARRAY
30505: PPUSH
30506: LD_INT 1
30508: PPUSH
30509: LD_INT 4
30511: PPUSH
30512: CALL_OW 12
30516: PPUSH
30517: LD_INT 3000
30519: PPUSH
30520: LD_INT 9000
30522: PPUSH
30523: CALL_OW 12
30527: PPUSH
30528: CALL_OW 492
// end ;
30532: PPOPN 1
30534: END
// every 0 0$1 trigger StreamModeActive and sDepot do
30535: LD_EXP 56
30539: PUSH
30540: LD_EXP 71
30544: AND
30545: IFFALSE 30565
30547: GO 30549
30549: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
30550: LD_INT 1
30552: PPUSH
30553: LD_OWVAR 2
30557: PPUSH
30558: LD_INT 0
30560: PPUSH
30561: CALL_OW 324
30565: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
30566: LD_EXP 56
30570: PUSH
30571: LD_EXP 72
30575: AND
30576: IFFALSE 30659
30578: GO 30580
30580: DISABLE
30581: LD_INT 0
30583: PPUSH
30584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30585: LD_ADDR_VAR 0 2
30589: PUSH
30590: LD_INT 22
30592: PUSH
30593: LD_OWVAR 2
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 21
30604: PUSH
30605: LD_INT 3
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PPUSH
30616: CALL_OW 69
30620: ST_TO_ADDR
// if not tmp then
30621: LD_VAR 0 2
30625: NOT
30626: IFFALSE 30630
// exit ;
30628: GO 30659
// for i in tmp do
30630: LD_ADDR_VAR 0 1
30634: PUSH
30635: LD_VAR 0 2
30639: PUSH
30640: FOR_IN
30641: IFFALSE 30657
// SetBLevel ( i , 10 ) ;
30643: LD_VAR 0 1
30647: PPUSH
30648: LD_INT 10
30650: PPUSH
30651: CALL_OW 241
30655: GO 30640
30657: POP
30658: POP
// end ;
30659: PPOPN 2
30661: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
30662: LD_EXP 56
30666: PUSH
30667: LD_EXP 73
30671: AND
30672: IFFALSE 30783
30674: GO 30676
30676: DISABLE
30677: LD_INT 0
30679: PPUSH
30680: PPUSH
30681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30682: LD_ADDR_VAR 0 3
30686: PUSH
30687: LD_INT 22
30689: PUSH
30690: LD_OWVAR 2
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 25
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PPUSH
30713: CALL_OW 69
30717: ST_TO_ADDR
// if not tmp then
30718: LD_VAR 0 3
30722: NOT
30723: IFFALSE 30727
// exit ;
30725: GO 30783
// un := tmp [ rand ( 1 , tmp ) ] ;
30727: LD_ADDR_VAR 0 2
30731: PUSH
30732: LD_VAR 0 3
30736: PUSH
30737: LD_INT 1
30739: PPUSH
30740: LD_VAR 0 3
30744: PPUSH
30745: CALL_OW 12
30749: ARRAY
30750: ST_TO_ADDR
// if Crawls ( un ) then
30751: LD_VAR 0 2
30755: PPUSH
30756: CALL_OW 318
30760: IFFALSE 30771
// ComWalk ( un ) ;
30762: LD_VAR 0 2
30766: PPUSH
30767: CALL_OW 138
// SetClass ( un , class_sniper ) ;
30771: LD_VAR 0 2
30775: PPUSH
30776: LD_INT 5
30778: PPUSH
30779: CALL_OW 336
// end ;
30783: PPOPN 3
30785: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
30786: LD_EXP 56
30790: PUSH
30791: LD_EXP 74
30795: AND
30796: PUSH
30797: LD_OWVAR 67
30801: PUSH
30802: LD_INT 3
30804: LESS
30805: AND
30806: IFFALSE 30825
30808: GO 30810
30810: DISABLE
// Difficulty := Difficulty + 1 ;
30811: LD_ADDR_OWVAR 67
30815: PUSH
30816: LD_OWVAR 67
30820: PUSH
30821: LD_INT 1
30823: PLUS
30824: ST_TO_ADDR
30825: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
30826: LD_EXP 56
30830: PUSH
30831: LD_EXP 75
30835: AND
30836: IFFALSE 30939
30838: GO 30840
30840: DISABLE
30841: LD_INT 0
30843: PPUSH
// begin for i := 1 to 5 do
30844: LD_ADDR_VAR 0 1
30848: PUSH
30849: DOUBLE
30850: LD_INT 1
30852: DEC
30853: ST_TO_ADDR
30854: LD_INT 5
30856: PUSH
30857: FOR_TO
30858: IFFALSE 30937
// begin uc_nation := nation_nature ;
30860: LD_ADDR_OWVAR 21
30864: PUSH
30865: LD_INT 0
30867: ST_TO_ADDR
// uc_side := 0 ;
30868: LD_ADDR_OWVAR 20
30872: PUSH
30873: LD_INT 0
30875: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30876: LD_ADDR_OWVAR 29
30880: PUSH
30881: LD_INT 12
30883: PUSH
30884: LD_INT 12
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: ST_TO_ADDR
// hc_agressivity := 20 ;
30891: LD_ADDR_OWVAR 35
30895: PUSH
30896: LD_INT 20
30898: ST_TO_ADDR
// hc_class := class_tiger ;
30899: LD_ADDR_OWVAR 28
30903: PUSH
30904: LD_INT 14
30906: ST_TO_ADDR
// hc_gallery :=  ;
30907: LD_ADDR_OWVAR 33
30911: PUSH
30912: LD_STRING 
30914: ST_TO_ADDR
// hc_name :=  ;
30915: LD_ADDR_OWVAR 26
30919: PUSH
30920: LD_STRING 
30922: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
30923: CALL_OW 44
30927: PPUSH
30928: LD_INT 0
30930: PPUSH
30931: CALL_OW 51
// end ;
30935: GO 30857
30937: POP
30938: POP
// end ;
30939: PPOPN 1
30941: END
// every 0 0$1 trigger StreamModeActive and sBomb do
30942: LD_EXP 56
30946: PUSH
30947: LD_EXP 76
30951: AND
30952: IFFALSE 30961
30954: GO 30956
30956: DISABLE
// StreamSibBomb ;
30957: CALL 30962 0 0
30961: END
// export function StreamSibBomb ; var i , x , y ; begin
30962: LD_INT 0
30964: PPUSH
30965: PPUSH
30966: PPUSH
30967: PPUSH
// result := false ;
30968: LD_ADDR_VAR 0 1
30972: PUSH
30973: LD_INT 0
30975: ST_TO_ADDR
// for i := 1 to 16 do
30976: LD_ADDR_VAR 0 2
30980: PUSH
30981: DOUBLE
30982: LD_INT 1
30984: DEC
30985: ST_TO_ADDR
30986: LD_INT 16
30988: PUSH
30989: FOR_TO
30990: IFFALSE 31189
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
30992: LD_ADDR_VAR 0 3
30996: PUSH
30997: LD_INT 10
30999: PUSH
31000: LD_INT 20
31002: PUSH
31003: LD_INT 30
31005: PUSH
31006: LD_INT 40
31008: PUSH
31009: LD_INT 50
31011: PUSH
31012: LD_INT 60
31014: PUSH
31015: LD_INT 70
31017: PUSH
31018: LD_INT 80
31020: PUSH
31021: LD_INT 90
31023: PUSH
31024: LD_INT 100
31026: PUSH
31027: LD_INT 110
31029: PUSH
31030: LD_INT 120
31032: PUSH
31033: LD_INT 130
31035: PUSH
31036: LD_INT 140
31038: PUSH
31039: LD_INT 150
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 1
31061: PPUSH
31062: LD_INT 15
31064: PPUSH
31065: CALL_OW 12
31069: ARRAY
31070: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31071: LD_ADDR_VAR 0 4
31075: PUSH
31076: LD_INT 10
31078: PUSH
31079: LD_INT 20
31081: PUSH
31082: LD_INT 30
31084: PUSH
31085: LD_INT 40
31087: PUSH
31088: LD_INT 50
31090: PUSH
31091: LD_INT 60
31093: PUSH
31094: LD_INT 70
31096: PUSH
31097: LD_INT 80
31099: PUSH
31100: LD_INT 90
31102: PUSH
31103: LD_INT 100
31105: PUSH
31106: LD_INT 110
31108: PUSH
31109: LD_INT 120
31111: PUSH
31112: LD_INT 130
31114: PUSH
31115: LD_INT 140
31117: PUSH
31118: LD_INT 150
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 1
31140: PPUSH
31141: LD_INT 15
31143: PPUSH
31144: CALL_OW 12
31148: ARRAY
31149: ST_TO_ADDR
// if ValidHex ( x , y ) then
31150: LD_VAR 0 3
31154: PPUSH
31155: LD_VAR 0 4
31159: PPUSH
31160: CALL_OW 488
31164: IFFALSE 31187
// begin result := [ x , y ] ;
31166: LD_ADDR_VAR 0 1
31170: PUSH
31171: LD_VAR 0 3
31175: PUSH
31176: LD_VAR 0 4
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: ST_TO_ADDR
// break ;
31185: GO 31189
// end ; end ;
31187: GO 30989
31189: POP
31190: POP
// if result then
31191: LD_VAR 0 1
31195: IFFALSE 31255
// begin ToLua ( playSibBomb() ) ;
31197: LD_STRING playSibBomb()
31199: PPUSH
31200: CALL_OW 559
// wait ( 0 0$14 ) ;
31204: LD_INT 490
31206: PPUSH
31207: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
31211: LD_VAR 0 1
31215: PUSH
31216: LD_INT 1
31218: ARRAY
31219: PPUSH
31220: LD_VAR 0 1
31224: PUSH
31225: LD_INT 2
31227: ARRAY
31228: PPUSH
31229: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
31233: LD_VAR 0 1
31237: PUSH
31238: LD_INT 1
31240: ARRAY
31241: PPUSH
31242: LD_VAR 0 1
31246: PUSH
31247: LD_INT 2
31249: ARRAY
31250: PPUSH
31251: CALL_OW 429
// end ; end ;
31255: LD_VAR 0 1
31259: RET
// every 0 0$1 trigger StreamModeActive and sReset do
31260: LD_EXP 56
31264: PUSH
31265: LD_EXP 78
31269: AND
31270: IFFALSE 31282
31272: GO 31274
31274: DISABLE
// YouLost (  ) ;
31275: LD_STRING 
31277: PPUSH
31278: CALL_OW 104
31282: END
// every 0 0$1 trigger StreamModeActive and sFog do
31283: LD_EXP 56
31287: PUSH
31288: LD_EXP 77
31292: AND
31293: IFFALSE 31307
31295: GO 31297
31297: DISABLE
// FogOff ( your_side ) ;
31298: LD_OWVAR 2
31302: PPUSH
31303: CALL_OW 344
31307: END
// every 0 0$1 trigger StreamModeActive and sSun do
31308: LD_EXP 56
31312: PUSH
31313: LD_EXP 79
31317: AND
31318: IFFALSE 31346
31320: GO 31322
31322: DISABLE
// begin solar_recharge_percent := 0 ;
31323: LD_ADDR_OWVAR 79
31327: PUSH
31328: LD_INT 0
31330: ST_TO_ADDR
// wait ( 5 5$00 ) ;
31331: LD_INT 10500
31333: PPUSH
31334: CALL_OW 67
// solar_recharge_percent := 100 ;
31338: LD_ADDR_OWVAR 79
31342: PUSH
31343: LD_INT 100
31345: ST_TO_ADDR
// end ;
31346: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
31347: LD_EXP 56
31351: PUSH
31352: LD_EXP 80
31356: AND
31357: IFFALSE 31596
31359: GO 31361
31361: DISABLE
31362: LD_INT 0
31364: PPUSH
31365: PPUSH
31366: PPUSH
// begin tmp := [ ] ;
31367: LD_ADDR_VAR 0 3
31371: PUSH
31372: EMPTY
31373: ST_TO_ADDR
// for i := 1 to 6 do
31374: LD_ADDR_VAR 0 1
31378: PUSH
31379: DOUBLE
31380: LD_INT 1
31382: DEC
31383: ST_TO_ADDR
31384: LD_INT 6
31386: PUSH
31387: FOR_TO
31388: IFFALSE 31493
// begin uc_nation := nation_nature ;
31390: LD_ADDR_OWVAR 21
31394: PUSH
31395: LD_INT 0
31397: ST_TO_ADDR
// uc_side := 0 ;
31398: LD_ADDR_OWVAR 20
31402: PUSH
31403: LD_INT 0
31405: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31406: LD_ADDR_OWVAR 29
31410: PUSH
31411: LD_INT 12
31413: PUSH
31414: LD_INT 12
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: ST_TO_ADDR
// hc_agressivity := 20 ;
31421: LD_ADDR_OWVAR 35
31425: PUSH
31426: LD_INT 20
31428: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
31429: LD_ADDR_OWVAR 28
31433: PUSH
31434: LD_INT 17
31436: ST_TO_ADDR
// hc_gallery :=  ;
31437: LD_ADDR_OWVAR 33
31441: PUSH
31442: LD_STRING 
31444: ST_TO_ADDR
// hc_name :=  ;
31445: LD_ADDR_OWVAR 26
31449: PUSH
31450: LD_STRING 
31452: ST_TO_ADDR
// un := CreateHuman ;
31453: LD_ADDR_VAR 0 2
31457: PUSH
31458: CALL_OW 44
31462: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
31463: LD_VAR 0 2
31467: PPUSH
31468: LD_INT 1
31470: PPUSH
31471: CALL_OW 51
// tmp := tmp ^ un ;
31475: LD_ADDR_VAR 0 3
31479: PUSH
31480: LD_VAR 0 3
31484: PUSH
31485: LD_VAR 0 2
31489: ADD
31490: ST_TO_ADDR
// end ;
31491: GO 31387
31493: POP
31494: POP
// repeat wait ( 0 0$1 ) ;
31495: LD_INT 35
31497: PPUSH
31498: CALL_OW 67
// for un in tmp do
31502: LD_ADDR_VAR 0 2
31506: PUSH
31507: LD_VAR 0 3
31511: PUSH
31512: FOR_IN
31513: IFFALSE 31587
// begin if IsDead ( un ) then
31515: LD_VAR 0 2
31519: PPUSH
31520: CALL_OW 301
31524: IFFALSE 31544
// begin tmp := tmp diff un ;
31526: LD_ADDR_VAR 0 3
31530: PUSH
31531: LD_VAR 0 3
31535: PUSH
31536: LD_VAR 0 2
31540: DIFF
31541: ST_TO_ADDR
// continue ;
31542: GO 31512
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
31544: LD_VAR 0 2
31548: PPUSH
31549: LD_INT 3
31551: PUSH
31552: LD_INT 22
31554: PUSH
31555: LD_INT 0
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PPUSH
31566: CALL_OW 69
31570: PPUSH
31571: LD_VAR 0 2
31575: PPUSH
31576: CALL_OW 74
31580: PPUSH
31581: CALL_OW 115
// end ;
31585: GO 31512
31587: POP
31588: POP
// until not tmp ;
31589: LD_VAR 0 3
31593: NOT
31594: IFFALSE 31495
// end ;
31596: PPOPN 3
31598: END
// every 0 0$1 trigger StreamModeActive and sTroll do
31599: LD_EXP 56
31603: PUSH
31604: LD_EXP 81
31608: AND
31609: IFFALSE 31663
31611: GO 31613
31613: DISABLE
// begin ToLua ( displayTroll(); ) ;
31614: LD_STRING displayTroll();
31616: PPUSH
31617: CALL_OW 559
// wait ( 3 3$00 ) ;
31621: LD_INT 6300
31623: PPUSH
31624: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31628: LD_STRING hideTroll();
31630: PPUSH
31631: CALL_OW 559
// wait ( 1 1$00 ) ;
31635: LD_INT 2100
31637: PPUSH
31638: CALL_OW 67
// ToLua ( displayTroll(); ) ;
31642: LD_STRING displayTroll();
31644: PPUSH
31645: CALL_OW 559
// wait ( 1 1$00 ) ;
31649: LD_INT 2100
31651: PPUSH
31652: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31656: LD_STRING hideTroll();
31658: PPUSH
31659: CALL_OW 559
// end ;
31663: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
31664: LD_EXP 56
31668: PUSH
31669: LD_EXP 82
31673: AND
31674: IFFALSE 31737
31676: GO 31678
31678: DISABLE
31679: LD_INT 0
31681: PPUSH
// begin p := 0 ;
31682: LD_ADDR_VAR 0 1
31686: PUSH
31687: LD_INT 0
31689: ST_TO_ADDR
// repeat game_speed := 1 ;
31690: LD_ADDR_OWVAR 65
31694: PUSH
31695: LD_INT 1
31697: ST_TO_ADDR
// wait ( 0 0$1 ) ;
31698: LD_INT 35
31700: PPUSH
31701: CALL_OW 67
// p := p + 1 ;
31705: LD_ADDR_VAR 0 1
31709: PUSH
31710: LD_VAR 0 1
31714: PUSH
31715: LD_INT 1
31717: PLUS
31718: ST_TO_ADDR
// until p >= 60 ;
31719: LD_VAR 0 1
31723: PUSH
31724: LD_INT 60
31726: GREATEREQUAL
31727: IFFALSE 31690
// game_speed := 4 ;
31729: LD_ADDR_OWVAR 65
31733: PUSH
31734: LD_INT 4
31736: ST_TO_ADDR
// end ;
31737: PPOPN 1
31739: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
31740: LD_EXP 56
31744: PUSH
31745: LD_EXP 83
31749: AND
31750: IFFALSE 31896
31752: GO 31754
31754: DISABLE
31755: LD_INT 0
31757: PPUSH
31758: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31759: LD_ADDR_VAR 0 1
31763: PUSH
31764: LD_INT 22
31766: PUSH
31767: LD_OWVAR 2
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 2
31778: PUSH
31779: LD_INT 30
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 30
31791: PUSH
31792: LD_INT 1
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: LIST
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PPUSH
31808: CALL_OW 69
31812: ST_TO_ADDR
// if not depot then
31813: LD_VAR 0 1
31817: NOT
31818: IFFALSE 31822
// exit ;
31820: GO 31896
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
31822: LD_ADDR_VAR 0 2
31826: PUSH
31827: LD_VAR 0 1
31831: PUSH
31832: LD_INT 1
31834: PPUSH
31835: LD_VAR 0 1
31839: PPUSH
31840: CALL_OW 12
31844: ARRAY
31845: PPUSH
31846: CALL_OW 274
31850: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
31851: LD_VAR 0 2
31855: PPUSH
31856: LD_INT 1
31858: PPUSH
31859: LD_INT 0
31861: PPUSH
31862: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
31866: LD_VAR 0 2
31870: PPUSH
31871: LD_INT 2
31873: PPUSH
31874: LD_INT 0
31876: PPUSH
31877: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
31881: LD_VAR 0 2
31885: PPUSH
31886: LD_INT 3
31888: PPUSH
31889: LD_INT 0
31891: PPUSH
31892: CALL_OW 277
// end ;
31896: PPOPN 2
31898: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
31899: LD_EXP 56
31903: PUSH
31904: LD_EXP 84
31908: AND
31909: IFFALSE 32006
31911: GO 31913
31913: DISABLE
31914: LD_INT 0
31916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31917: LD_ADDR_VAR 0 1
31921: PUSH
31922: LD_INT 22
31924: PUSH
31925: LD_OWVAR 2
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 21
31936: PUSH
31937: LD_INT 1
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 3
31946: PUSH
31947: LD_INT 23
31949: PUSH
31950: LD_INT 0
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: LIST
31965: PPUSH
31966: CALL_OW 69
31970: ST_TO_ADDR
// if not tmp then
31971: LD_VAR 0 1
31975: NOT
31976: IFFALSE 31980
// exit ;
31978: GO 32006
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
31980: LD_VAR 0 1
31984: PUSH
31985: LD_INT 1
31987: PPUSH
31988: LD_VAR 0 1
31992: PPUSH
31993: CALL_OW 12
31997: ARRAY
31998: PPUSH
31999: LD_INT 200
32001: PPUSH
32002: CALL_OW 234
// end ;
32006: PPOPN 1
32008: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
32009: LD_EXP 56
32013: PUSH
32014: LD_EXP 85
32018: AND
32019: IFFALSE 32098
32021: GO 32023
32023: DISABLE
32024: LD_INT 0
32026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32027: LD_ADDR_VAR 0 1
32031: PUSH
32032: LD_INT 22
32034: PUSH
32035: LD_OWVAR 2
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 21
32046: PUSH
32047: LD_INT 2
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PPUSH
32058: CALL_OW 69
32062: ST_TO_ADDR
// if not tmp then
32063: LD_VAR 0 1
32067: NOT
32068: IFFALSE 32072
// exit ;
32070: GO 32098
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32072: LD_VAR 0 1
32076: PUSH
32077: LD_INT 1
32079: PPUSH
32080: LD_VAR 0 1
32084: PPUSH
32085: CALL_OW 12
32089: ARRAY
32090: PPUSH
32091: LD_INT 60
32093: PPUSH
32094: CALL_OW 234
// end ;
32098: PPOPN 1
32100: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32101: LD_EXP 56
32105: PUSH
32106: LD_EXP 86
32110: AND
32111: IFFALSE 32210
32113: GO 32115
32115: DISABLE
32116: LD_INT 0
32118: PPUSH
32119: PPUSH
// begin enable ;
32120: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
32121: LD_ADDR_VAR 0 1
32125: PUSH
32126: LD_INT 22
32128: PUSH
32129: LD_OWVAR 2
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 61
32140: PUSH
32141: EMPTY
32142: LIST
32143: PUSH
32144: LD_INT 33
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: LIST
32158: PPUSH
32159: CALL_OW 69
32163: ST_TO_ADDR
// if not tmp then
32164: LD_VAR 0 1
32168: NOT
32169: IFFALSE 32173
// exit ;
32171: GO 32210
// for i in tmp do
32173: LD_ADDR_VAR 0 2
32177: PUSH
32178: LD_VAR 0 1
32182: PUSH
32183: FOR_IN
32184: IFFALSE 32208
// if IsControledBy ( i ) then
32186: LD_VAR 0 2
32190: PPUSH
32191: CALL_OW 312
32195: IFFALSE 32206
// ComUnlink ( i ) ;
32197: LD_VAR 0 2
32201: PPUSH
32202: CALL_OW 136
32206: GO 32183
32208: POP
32209: POP
// end ;
32210: PPOPN 2
32212: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
32213: LD_EXP 56
32217: PUSH
32218: LD_EXP 87
32222: AND
32223: IFFALSE 32357
32225: GO 32227
32227: DISABLE
32228: LD_INT 0
32230: PPUSH
32231: PPUSH
// begin ToLua ( displayPowell(); ) ;
32232: LD_STRING displayPowell();
32234: PPUSH
32235: CALL_OW 559
// uc_side := 0 ;
32239: LD_ADDR_OWVAR 20
32243: PUSH
32244: LD_INT 0
32246: ST_TO_ADDR
// uc_nation := 2 ;
32247: LD_ADDR_OWVAR 21
32251: PUSH
32252: LD_INT 2
32254: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
32255: LD_ADDR_OWVAR 37
32259: PUSH
32260: LD_INT 14
32262: ST_TO_ADDR
// vc_engine := engine_siberite ;
32263: LD_ADDR_OWVAR 39
32267: PUSH
32268: LD_INT 3
32270: ST_TO_ADDR
// vc_control := control_apeman ;
32271: LD_ADDR_OWVAR 38
32275: PUSH
32276: LD_INT 5
32278: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
32279: LD_ADDR_OWVAR 40
32283: PUSH
32284: LD_INT 29
32286: ST_TO_ADDR
// un := CreateVehicle ;
32287: LD_ADDR_VAR 0 2
32291: PUSH
32292: CALL_OW 45
32296: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32297: LD_VAR 0 2
32301: PPUSH
32302: LD_INT 1
32304: PPUSH
32305: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32309: LD_INT 35
32311: PPUSH
32312: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
32316: LD_VAR 0 2
32320: PPUSH
32321: LD_OWVAR 3
32325: PUSH
32326: LD_VAR 0 2
32330: DIFF
32331: PPUSH
32332: LD_VAR 0 2
32336: PPUSH
32337: CALL_OW 74
32341: PPUSH
32342: CALL_OW 115
// until IsOk ( un ) ;
32346: LD_VAR 0 2
32350: PPUSH
32351: CALL_OW 302
32355: IFFALSE 32309
// end ;
32357: PPOPN 2
32359: END
// every 0 0$1 trigger StreamModeActive and sStu do
32360: LD_EXP 56
32364: PUSH
32365: LD_EXP 95
32369: AND
32370: IFFALSE 32382
32372: GO 32374
32374: DISABLE
// begin ToLua ( displayStucuk(); ) ;
32375: LD_STRING displayStucuk();
32377: PPUSH
32378: CALL_OW 559
// end ;
32382: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
32383: LD_EXP 56
32387: PUSH
32388: LD_EXP 88
32392: AND
32393: IFFALSE 32534
32395: GO 32397
32397: DISABLE
32398: LD_INT 0
32400: PPUSH
32401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32402: LD_ADDR_VAR 0 2
32406: PUSH
32407: LD_INT 22
32409: PUSH
32410: LD_OWVAR 2
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 21
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PPUSH
32433: CALL_OW 69
32437: ST_TO_ADDR
// if not tmp then
32438: LD_VAR 0 2
32442: NOT
32443: IFFALSE 32447
// exit ;
32445: GO 32534
// un := tmp [ rand ( 1 , tmp ) ] ;
32447: LD_ADDR_VAR 0 1
32451: PUSH
32452: LD_VAR 0 2
32456: PUSH
32457: LD_INT 1
32459: PPUSH
32460: LD_VAR 0 2
32464: PPUSH
32465: CALL_OW 12
32469: ARRAY
32470: ST_TO_ADDR
// SetSide ( un , 0 ) ;
32471: LD_VAR 0 1
32475: PPUSH
32476: LD_INT 0
32478: PPUSH
32479: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
32483: LD_VAR 0 1
32487: PPUSH
32488: LD_OWVAR 3
32492: PUSH
32493: LD_VAR 0 1
32497: DIFF
32498: PPUSH
32499: LD_VAR 0 1
32503: PPUSH
32504: CALL_OW 74
32508: PPUSH
32509: CALL_OW 115
// wait ( 0 0$20 ) ;
32513: LD_INT 700
32515: PPUSH
32516: CALL_OW 67
// SetSide ( un , your_side ) ;
32520: LD_VAR 0 1
32524: PPUSH
32525: LD_OWVAR 2
32529: PPUSH
32530: CALL_OW 235
// end ;
32534: PPOPN 2
32536: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
32537: LD_EXP 56
32541: PUSH
32542: LD_EXP 89
32546: AND
32547: IFFALSE 32653
32549: GO 32551
32551: DISABLE
32552: LD_INT 0
32554: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32555: LD_ADDR_VAR 0 1
32559: PUSH
32560: LD_INT 22
32562: PUSH
32563: LD_OWVAR 2
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: LD_INT 30
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 30
32587: PUSH
32588: LD_INT 1
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: LIST
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PPUSH
32604: CALL_OW 69
32608: ST_TO_ADDR
// if not depot then
32609: LD_VAR 0 1
32613: NOT
32614: IFFALSE 32618
// exit ;
32616: GO 32653
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
32618: LD_VAR 0 1
32622: PUSH
32623: LD_INT 1
32625: ARRAY
32626: PPUSH
32627: CALL_OW 250
32631: PPUSH
32632: LD_VAR 0 1
32636: PUSH
32637: LD_INT 1
32639: ARRAY
32640: PPUSH
32641: CALL_OW 251
32645: PPUSH
32646: LD_INT 70
32648: PPUSH
32649: CALL_OW 495
// end ;
32653: PPOPN 1
32655: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
32656: LD_EXP 56
32660: PUSH
32661: LD_EXP 90
32665: AND
32666: IFFALSE 32877
32668: GO 32670
32670: DISABLE
32671: LD_INT 0
32673: PPUSH
32674: PPUSH
32675: PPUSH
32676: PPUSH
32677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32678: LD_ADDR_VAR 0 5
32682: PUSH
32683: LD_INT 22
32685: PUSH
32686: LD_OWVAR 2
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 21
32697: PUSH
32698: LD_INT 1
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PPUSH
32709: CALL_OW 69
32713: ST_TO_ADDR
// if not tmp then
32714: LD_VAR 0 5
32718: NOT
32719: IFFALSE 32723
// exit ;
32721: GO 32877
// for i in tmp do
32723: LD_ADDR_VAR 0 1
32727: PUSH
32728: LD_VAR 0 5
32732: PUSH
32733: FOR_IN
32734: IFFALSE 32875
// begin d := rand ( 0 , 5 ) ;
32736: LD_ADDR_VAR 0 4
32740: PUSH
32741: LD_INT 0
32743: PPUSH
32744: LD_INT 5
32746: PPUSH
32747: CALL_OW 12
32751: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
32752: LD_ADDR_VAR 0 2
32756: PUSH
32757: LD_VAR 0 1
32761: PPUSH
32762: CALL_OW 250
32766: PPUSH
32767: LD_VAR 0 4
32771: PPUSH
32772: LD_INT 3
32774: PPUSH
32775: LD_INT 12
32777: PPUSH
32778: CALL_OW 12
32782: PPUSH
32783: CALL_OW 272
32787: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
32788: LD_ADDR_VAR 0 3
32792: PUSH
32793: LD_VAR 0 1
32797: PPUSH
32798: CALL_OW 251
32802: PPUSH
32803: LD_VAR 0 4
32807: PPUSH
32808: LD_INT 3
32810: PPUSH
32811: LD_INT 12
32813: PPUSH
32814: CALL_OW 12
32818: PPUSH
32819: CALL_OW 273
32823: ST_TO_ADDR
// if ValidHex ( x , y ) then
32824: LD_VAR 0 2
32828: PPUSH
32829: LD_VAR 0 3
32833: PPUSH
32834: CALL_OW 488
32838: IFFALSE 32873
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
32840: LD_VAR 0 1
32844: PPUSH
32845: LD_VAR 0 2
32849: PPUSH
32850: LD_VAR 0 3
32854: PPUSH
32855: LD_INT 3
32857: PPUSH
32858: LD_INT 6
32860: PPUSH
32861: CALL_OW 12
32865: PPUSH
32866: LD_INT 1
32868: PPUSH
32869: CALL_OW 483
// end ;
32873: GO 32733
32875: POP
32876: POP
// end ;
32877: PPOPN 5
32879: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
32880: LD_EXP 56
32884: PUSH
32885: LD_EXP 91
32889: AND
32890: IFFALSE 32984
32892: GO 32894
32894: DISABLE
32895: LD_INT 0
32897: PPUSH
32898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
32899: LD_ADDR_VAR 0 2
32903: PUSH
32904: LD_INT 22
32906: PUSH
32907: LD_OWVAR 2
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 32
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 21
32928: PUSH
32929: LD_INT 2
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: LIST
32940: PPUSH
32941: CALL_OW 69
32945: ST_TO_ADDR
// if not tmp then
32946: LD_VAR 0 2
32950: NOT
32951: IFFALSE 32955
// exit ;
32953: GO 32984
// for i in tmp do
32955: LD_ADDR_VAR 0 1
32959: PUSH
32960: LD_VAR 0 2
32964: PUSH
32965: FOR_IN
32966: IFFALSE 32982
// SetFuel ( i , 0 ) ;
32968: LD_VAR 0 1
32972: PPUSH
32973: LD_INT 0
32975: PPUSH
32976: CALL_OW 240
32980: GO 32965
32982: POP
32983: POP
// end ;
32984: PPOPN 2
32986: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
32987: LD_EXP 56
32991: PUSH
32992: LD_EXP 92
32996: AND
32997: IFFALSE 33063
32999: GO 33001
33001: DISABLE
33002: LD_INT 0
33004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33005: LD_ADDR_VAR 0 1
33009: PUSH
33010: LD_INT 22
33012: PUSH
33013: LD_OWVAR 2
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 30
33024: PUSH
33025: LD_INT 29
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PPUSH
33036: CALL_OW 69
33040: ST_TO_ADDR
// if not tmp then
33041: LD_VAR 0 1
33045: NOT
33046: IFFALSE 33050
// exit ;
33048: GO 33063
// DestroyUnit ( tmp [ 1 ] ) ;
33050: LD_VAR 0 1
33054: PUSH
33055: LD_INT 1
33057: ARRAY
33058: PPUSH
33059: CALL_OW 65
// end ;
33063: PPOPN 1
33065: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33066: LD_EXP 56
33070: PUSH
33071: LD_EXP 94
33075: AND
33076: IFFALSE 33205
33078: GO 33080
33080: DISABLE
33081: LD_INT 0
33083: PPUSH
// begin uc_side := 0 ;
33084: LD_ADDR_OWVAR 20
33088: PUSH
33089: LD_INT 0
33091: ST_TO_ADDR
// uc_nation := nation_arabian ;
33092: LD_ADDR_OWVAR 21
33096: PUSH
33097: LD_INT 2
33099: ST_TO_ADDR
// hc_gallery :=  ;
33100: LD_ADDR_OWVAR 33
33104: PUSH
33105: LD_STRING 
33107: ST_TO_ADDR
// hc_name :=  ;
33108: LD_ADDR_OWVAR 26
33112: PUSH
33113: LD_STRING 
33115: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
33116: LD_INT 1
33118: PPUSH
33119: LD_INT 11
33121: PPUSH
33122: LD_INT 10
33124: PPUSH
33125: CALL_OW 380
// un := CreateHuman ;
33129: LD_ADDR_VAR 0 1
33133: PUSH
33134: CALL_OW 44
33138: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33139: LD_VAR 0 1
33143: PPUSH
33144: LD_INT 1
33146: PPUSH
33147: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33151: LD_INT 35
33153: PPUSH
33154: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33158: LD_VAR 0 1
33162: PPUSH
33163: LD_INT 22
33165: PUSH
33166: LD_OWVAR 2
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PPUSH
33175: CALL_OW 69
33179: PPUSH
33180: LD_VAR 0 1
33184: PPUSH
33185: CALL_OW 74
33189: PPUSH
33190: CALL_OW 115
// until IsDead ( un ) ;
33194: LD_VAR 0 1
33198: PPUSH
33199: CALL_OW 301
33203: IFFALSE 33151
// end ;
33205: PPOPN 1
33207: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
33208: LD_EXP 56
33212: PUSH
33213: LD_EXP 96
33217: AND
33218: IFFALSE 33230
33220: GO 33222
33222: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
33223: LD_STRING earthquake(getX(game), 0, 32)
33225: PPUSH
33226: CALL_OW 559
33230: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
33231: LD_EXP 56
33235: PUSH
33236: LD_EXP 97
33240: AND
33241: IFFALSE 33332
33243: GO 33245
33245: DISABLE
33246: LD_INT 0
33248: PPUSH
// begin enable ;
33249: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
33250: LD_ADDR_VAR 0 1
33254: PUSH
33255: LD_INT 22
33257: PUSH
33258: LD_OWVAR 2
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 21
33269: PUSH
33270: LD_INT 2
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 33
33279: PUSH
33280: LD_INT 3
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: LIST
33291: PPUSH
33292: CALL_OW 69
33296: ST_TO_ADDR
// if not tmp then
33297: LD_VAR 0 1
33301: NOT
33302: IFFALSE 33306
// exit ;
33304: GO 33332
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33306: LD_VAR 0 1
33310: PUSH
33311: LD_INT 1
33313: PPUSH
33314: LD_VAR 0 1
33318: PPUSH
33319: CALL_OW 12
33323: ARRAY
33324: PPUSH
33325: LD_INT 1
33327: PPUSH
33328: CALL_OW 234
// end ;
33332: PPOPN 1
33334: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
33335: LD_EXP 56
33339: PUSH
33340: LD_EXP 98
33344: AND
33345: IFFALSE 33486
33347: GO 33349
33349: DISABLE
33350: LD_INT 0
33352: PPUSH
33353: PPUSH
33354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33355: LD_ADDR_VAR 0 3
33359: PUSH
33360: LD_INT 22
33362: PUSH
33363: LD_OWVAR 2
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 25
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PPUSH
33386: CALL_OW 69
33390: ST_TO_ADDR
// if not tmp then
33391: LD_VAR 0 3
33395: NOT
33396: IFFALSE 33400
// exit ;
33398: GO 33486
// un := tmp [ rand ( 1 , tmp ) ] ;
33400: LD_ADDR_VAR 0 2
33404: PUSH
33405: LD_VAR 0 3
33409: PUSH
33410: LD_INT 1
33412: PPUSH
33413: LD_VAR 0 3
33417: PPUSH
33418: CALL_OW 12
33422: ARRAY
33423: ST_TO_ADDR
// if Crawls ( un ) then
33424: LD_VAR 0 2
33428: PPUSH
33429: CALL_OW 318
33433: IFFALSE 33444
// ComWalk ( un ) ;
33435: LD_VAR 0 2
33439: PPUSH
33440: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
33444: LD_VAR 0 2
33448: PPUSH
33449: LD_INT 9
33451: PPUSH
33452: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
33456: LD_INT 28
33458: PPUSH
33459: LD_OWVAR 2
33463: PPUSH
33464: LD_INT 2
33466: PPUSH
33467: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
33471: LD_INT 29
33473: PPUSH
33474: LD_OWVAR 2
33478: PPUSH
33479: LD_INT 2
33481: PPUSH
33482: CALL_OW 322
// end ;
33486: PPOPN 3
33488: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
33489: LD_EXP 56
33493: PUSH
33494: LD_EXP 99
33498: AND
33499: IFFALSE 33610
33501: GO 33503
33503: DISABLE
33504: LD_INT 0
33506: PPUSH
33507: PPUSH
33508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33509: LD_ADDR_VAR 0 3
33513: PUSH
33514: LD_INT 22
33516: PUSH
33517: LD_OWVAR 2
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 25
33528: PUSH
33529: LD_INT 1
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PPUSH
33540: CALL_OW 69
33544: ST_TO_ADDR
// if not tmp then
33545: LD_VAR 0 3
33549: NOT
33550: IFFALSE 33554
// exit ;
33552: GO 33610
// un := tmp [ rand ( 1 , tmp ) ] ;
33554: LD_ADDR_VAR 0 2
33558: PUSH
33559: LD_VAR 0 3
33563: PUSH
33564: LD_INT 1
33566: PPUSH
33567: LD_VAR 0 3
33571: PPUSH
33572: CALL_OW 12
33576: ARRAY
33577: ST_TO_ADDR
// if Crawls ( un ) then
33578: LD_VAR 0 2
33582: PPUSH
33583: CALL_OW 318
33587: IFFALSE 33598
// ComWalk ( un ) ;
33589: LD_VAR 0 2
33593: PPUSH
33594: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33598: LD_VAR 0 2
33602: PPUSH
33603: LD_INT 8
33605: PPUSH
33606: CALL_OW 336
// end ;
33610: PPOPN 3
33612: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
33613: LD_EXP 56
33617: PUSH
33618: LD_EXP 100
33622: AND
33623: IFFALSE 33767
33625: GO 33627
33627: DISABLE
33628: LD_INT 0
33630: PPUSH
33631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
33632: LD_ADDR_VAR 0 2
33636: PUSH
33637: LD_INT 22
33639: PUSH
33640: LD_OWVAR 2
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 21
33651: PUSH
33652: LD_INT 2
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 2
33661: PUSH
33662: LD_INT 34
33664: PUSH
33665: LD_INT 12
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 34
33674: PUSH
33675: LD_INT 51
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 34
33684: PUSH
33685: LD_INT 32
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: LIST
33702: PPUSH
33703: CALL_OW 69
33707: ST_TO_ADDR
// if not tmp then
33708: LD_VAR 0 2
33712: NOT
33713: IFFALSE 33717
// exit ;
33715: GO 33767
// for i in tmp do
33717: LD_ADDR_VAR 0 1
33721: PUSH
33722: LD_VAR 0 2
33726: PUSH
33727: FOR_IN
33728: IFFALSE 33765
// if GetCargo ( i , mat_artifact ) = 0 then
33730: LD_VAR 0 1
33734: PPUSH
33735: LD_INT 4
33737: PPUSH
33738: CALL_OW 289
33742: PUSH
33743: LD_INT 0
33745: EQUAL
33746: IFFALSE 33763
// SetCargo ( i , mat_siberit , 100 ) ;
33748: LD_VAR 0 1
33752: PPUSH
33753: LD_INT 3
33755: PPUSH
33756: LD_INT 100
33758: PPUSH
33759: CALL_OW 290
33763: GO 33727
33765: POP
33766: POP
// end ;
33767: PPOPN 2
33769: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
33770: LD_EXP 56
33774: PUSH
33775: LD_EXP 101
33779: AND
33780: IFFALSE 33933
33782: GO 33784
33784: DISABLE
33785: LD_INT 0
33787: PPUSH
33788: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33789: LD_ADDR_VAR 0 2
33793: PUSH
33794: LD_INT 22
33796: PUSH
33797: LD_OWVAR 2
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PPUSH
33806: CALL_OW 69
33810: ST_TO_ADDR
// if not tmp then
33811: LD_VAR 0 2
33815: NOT
33816: IFFALSE 33820
// exit ;
33818: GO 33933
// for i := 1 to 2 do
33820: LD_ADDR_VAR 0 1
33824: PUSH
33825: DOUBLE
33826: LD_INT 1
33828: DEC
33829: ST_TO_ADDR
33830: LD_INT 2
33832: PUSH
33833: FOR_TO
33834: IFFALSE 33931
// begin uc_side := your_side ;
33836: LD_ADDR_OWVAR 20
33840: PUSH
33841: LD_OWVAR 2
33845: ST_TO_ADDR
// uc_nation := nation_american ;
33846: LD_ADDR_OWVAR 21
33850: PUSH
33851: LD_INT 1
33853: ST_TO_ADDR
// vc_chassis := us_morphling ;
33854: LD_ADDR_OWVAR 37
33858: PUSH
33859: LD_INT 5
33861: ST_TO_ADDR
// vc_engine := engine_siberite ;
33862: LD_ADDR_OWVAR 39
33866: PUSH
33867: LD_INT 3
33869: ST_TO_ADDR
// vc_control := control_computer ;
33870: LD_ADDR_OWVAR 38
33874: PUSH
33875: LD_INT 3
33877: ST_TO_ADDR
// vc_weapon := us_double_laser ;
33878: LD_ADDR_OWVAR 40
33882: PUSH
33883: LD_INT 10
33885: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
33886: CALL_OW 45
33890: PPUSH
33891: LD_VAR 0 2
33895: PUSH
33896: LD_INT 1
33898: ARRAY
33899: PPUSH
33900: CALL_OW 250
33904: PPUSH
33905: LD_VAR 0 2
33909: PUSH
33910: LD_INT 1
33912: ARRAY
33913: PPUSH
33914: CALL_OW 251
33918: PPUSH
33919: LD_INT 12
33921: PPUSH
33922: LD_INT 1
33924: PPUSH
33925: CALL_OW 50
// end ;
33929: GO 33833
33931: POP
33932: POP
// end ;
33933: PPOPN 2
33935: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
33936: LD_EXP 56
33940: PUSH
33941: LD_EXP 102
33945: AND
33946: IFFALSE 34168
33948: GO 33950
33950: DISABLE
33951: LD_INT 0
33953: PPUSH
33954: PPUSH
33955: PPUSH
33956: PPUSH
33957: PPUSH
33958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33959: LD_ADDR_VAR 0 6
33963: PUSH
33964: LD_INT 22
33966: PUSH
33967: LD_OWVAR 2
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 21
33978: PUSH
33979: LD_INT 1
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 3
33988: PUSH
33989: LD_INT 23
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: LIST
34007: PPUSH
34008: CALL_OW 69
34012: ST_TO_ADDR
// if not tmp then
34013: LD_VAR 0 6
34017: NOT
34018: IFFALSE 34022
// exit ;
34020: GO 34168
// s1 := rand ( 1 , 4 ) ;
34022: LD_ADDR_VAR 0 2
34026: PUSH
34027: LD_INT 1
34029: PPUSH
34030: LD_INT 4
34032: PPUSH
34033: CALL_OW 12
34037: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34038: LD_ADDR_VAR 0 4
34042: PUSH
34043: LD_VAR 0 6
34047: PUSH
34048: LD_INT 1
34050: ARRAY
34051: PPUSH
34052: LD_VAR 0 2
34056: PPUSH
34057: CALL_OW 259
34061: ST_TO_ADDR
// if s1 = 1 then
34062: LD_VAR 0 2
34066: PUSH
34067: LD_INT 1
34069: EQUAL
34070: IFFALSE 34090
// s2 := rand ( 2 , 4 ) else
34072: LD_ADDR_VAR 0 3
34076: PUSH
34077: LD_INT 2
34079: PPUSH
34080: LD_INT 4
34082: PPUSH
34083: CALL_OW 12
34087: ST_TO_ADDR
34088: GO 34098
// s2 := 1 ;
34090: LD_ADDR_VAR 0 3
34094: PUSH
34095: LD_INT 1
34097: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
34098: LD_ADDR_VAR 0 5
34102: PUSH
34103: LD_VAR 0 6
34107: PUSH
34108: LD_INT 1
34110: ARRAY
34111: PPUSH
34112: LD_VAR 0 3
34116: PPUSH
34117: CALL_OW 259
34121: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
34122: LD_VAR 0 6
34126: PUSH
34127: LD_INT 1
34129: ARRAY
34130: PPUSH
34131: LD_VAR 0 2
34135: PPUSH
34136: LD_VAR 0 5
34140: PPUSH
34141: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
34145: LD_VAR 0 6
34149: PUSH
34150: LD_INT 1
34152: ARRAY
34153: PPUSH
34154: LD_VAR 0 3
34158: PPUSH
34159: LD_VAR 0 4
34163: PPUSH
34164: CALL_OW 237
// end ;
34168: PPOPN 6
34170: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
34171: LD_EXP 56
34175: PUSH
34176: LD_EXP 103
34180: AND
34181: IFFALSE 34260
34183: GO 34185
34185: DISABLE
34186: LD_INT 0
34188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
34189: LD_ADDR_VAR 0 1
34193: PUSH
34194: LD_INT 22
34196: PUSH
34197: LD_OWVAR 2
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 30
34208: PUSH
34209: LD_INT 3
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PPUSH
34220: CALL_OW 69
34224: ST_TO_ADDR
// if not tmp then
34225: LD_VAR 0 1
34229: NOT
34230: IFFALSE 34234
// exit ;
34232: GO 34260
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34234: LD_VAR 0 1
34238: PUSH
34239: LD_INT 1
34241: PPUSH
34242: LD_VAR 0 1
34246: PPUSH
34247: CALL_OW 12
34251: ARRAY
34252: PPUSH
34253: LD_INT 1
34255: PPUSH
34256: CALL_OW 234
// end ;
34260: PPOPN 1
34262: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
34263: LD_EXP 56
34267: PUSH
34268: LD_EXP 104
34272: AND
34273: IFFALSE 34385
34275: GO 34277
34277: DISABLE
34278: LD_INT 0
34280: PPUSH
34281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
34282: LD_ADDR_VAR 0 2
34286: PUSH
34287: LD_INT 22
34289: PUSH
34290: LD_OWVAR 2
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 2
34301: PUSH
34302: LD_INT 30
34304: PUSH
34305: LD_INT 27
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 30
34314: PUSH
34315: LD_INT 26
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 30
34324: PUSH
34325: LD_INT 28
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PPUSH
34342: CALL_OW 69
34346: ST_TO_ADDR
// if not tmp then
34347: LD_VAR 0 2
34351: NOT
34352: IFFALSE 34356
// exit ;
34354: GO 34385
// for i in tmp do
34356: LD_ADDR_VAR 0 1
34360: PUSH
34361: LD_VAR 0 2
34365: PUSH
34366: FOR_IN
34367: IFFALSE 34383
// SetLives ( i , 1 ) ;
34369: LD_VAR 0 1
34373: PPUSH
34374: LD_INT 1
34376: PPUSH
34377: CALL_OW 234
34381: GO 34366
34383: POP
34384: POP
// end ;
34385: PPOPN 2
34387: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
34388: LD_EXP 56
34392: PUSH
34393: LD_EXP 105
34397: AND
34398: IFFALSE 34668
34400: GO 34402
34402: DISABLE
34403: LD_INT 0
34405: PPUSH
34406: PPUSH
34407: PPUSH
// begin i := rand ( 1 , 7 ) ;
34408: LD_ADDR_VAR 0 1
34412: PUSH
34413: LD_INT 1
34415: PPUSH
34416: LD_INT 7
34418: PPUSH
34419: CALL_OW 12
34423: ST_TO_ADDR
// case i of 1 :
34424: LD_VAR 0 1
34428: PUSH
34429: LD_INT 1
34431: DOUBLE
34432: EQUAL
34433: IFTRUE 34437
34435: GO 34447
34437: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
34438: LD_STRING earthquake(getX(game), 0, 32)
34440: PPUSH
34441: CALL_OW 559
34445: GO 34668
34447: LD_INT 2
34449: DOUBLE
34450: EQUAL
34451: IFTRUE 34455
34453: GO 34465
34455: POP
// ToLua ( displayStucuk(); ) ; 3 :
34456: LD_STRING displayStucuk();
34458: PPUSH
34459: CALL_OW 559
34463: GO 34668
34465: LD_INT 3
34467: DOUBLE
34468: EQUAL
34469: IFTRUE 34473
34471: GO 34577
34473: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34474: LD_ADDR_VAR 0 2
34478: PUSH
34479: LD_INT 22
34481: PUSH
34482: LD_OWVAR 2
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 25
34493: PUSH
34494: LD_INT 1
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PPUSH
34505: CALL_OW 69
34509: ST_TO_ADDR
// if not tmp then
34510: LD_VAR 0 2
34514: NOT
34515: IFFALSE 34519
// exit ;
34517: GO 34668
// un := tmp [ rand ( 1 , tmp ) ] ;
34519: LD_ADDR_VAR 0 3
34523: PUSH
34524: LD_VAR 0 2
34528: PUSH
34529: LD_INT 1
34531: PPUSH
34532: LD_VAR 0 2
34536: PPUSH
34537: CALL_OW 12
34541: ARRAY
34542: ST_TO_ADDR
// if Crawls ( un ) then
34543: LD_VAR 0 3
34547: PPUSH
34548: CALL_OW 318
34552: IFFALSE 34563
// ComWalk ( un ) ;
34554: LD_VAR 0 3
34558: PPUSH
34559: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34563: LD_VAR 0 3
34567: PPUSH
34568: LD_INT 8
34570: PPUSH
34571: CALL_OW 336
// end ; 4 :
34575: GO 34668
34577: LD_INT 4
34579: DOUBLE
34580: EQUAL
34581: IFTRUE 34585
34583: GO 34646
34585: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
34586: LD_ADDR_VAR 0 2
34590: PUSH
34591: LD_INT 22
34593: PUSH
34594: LD_OWVAR 2
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 30
34605: PUSH
34606: LD_INT 29
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PPUSH
34617: CALL_OW 69
34621: ST_TO_ADDR
// if not tmp then
34622: LD_VAR 0 2
34626: NOT
34627: IFFALSE 34631
// exit ;
34629: GO 34668
// DestroyUnit ( tmp [ 1 ] ) ;
34631: LD_VAR 0 2
34635: PUSH
34636: LD_INT 1
34638: ARRAY
34639: PPUSH
34640: CALL_OW 65
// end ; 5 .. 7 :
34644: GO 34668
34646: LD_INT 5
34648: DOUBLE
34649: GREATEREQUAL
34650: IFFALSE 34658
34652: LD_INT 7
34654: DOUBLE
34655: LESSEQUAL
34656: IFTRUE 34660
34658: GO 34667
34660: POP
// StreamSibBomb ; end ;
34661: CALL 30962 0 0
34665: GO 34668
34667: POP
// end ;
34668: PPOPN 3
34670: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
34671: LD_EXP 56
34675: PUSH
34676: LD_EXP 106
34680: AND
34681: IFFALSE 34837
34683: GO 34685
34685: DISABLE
34686: LD_INT 0
34688: PPUSH
34689: PPUSH
34690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
34691: LD_ADDR_VAR 0 2
34695: PUSH
34696: LD_INT 81
34698: PUSH
34699: LD_OWVAR 2
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 2
34710: PUSH
34711: LD_INT 21
34713: PUSH
34714: LD_INT 1
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 21
34723: PUSH
34724: LD_INT 2
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: LIST
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PPUSH
34740: CALL_OW 69
34744: ST_TO_ADDR
// if not tmp then
34745: LD_VAR 0 2
34749: NOT
34750: IFFALSE 34754
// exit ;
34752: GO 34837
// p := 0 ;
34754: LD_ADDR_VAR 0 3
34758: PUSH
34759: LD_INT 0
34761: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34762: LD_INT 35
34764: PPUSH
34765: CALL_OW 67
// p := p + 1 ;
34769: LD_ADDR_VAR 0 3
34773: PUSH
34774: LD_VAR 0 3
34778: PUSH
34779: LD_INT 1
34781: PLUS
34782: ST_TO_ADDR
// for i in tmp do
34783: LD_ADDR_VAR 0 1
34787: PUSH
34788: LD_VAR 0 2
34792: PUSH
34793: FOR_IN
34794: IFFALSE 34825
// if GetLives ( i ) < 1000 then
34796: LD_VAR 0 1
34800: PPUSH
34801: CALL_OW 256
34805: PUSH
34806: LD_INT 1000
34808: LESS
34809: IFFALSE 34823
// SetLives ( i , 1000 ) ;
34811: LD_VAR 0 1
34815: PPUSH
34816: LD_INT 1000
34818: PPUSH
34819: CALL_OW 234
34823: GO 34793
34825: POP
34826: POP
// until p > 20 ;
34827: LD_VAR 0 3
34831: PUSH
34832: LD_INT 20
34834: GREATER
34835: IFFALSE 34762
// end ;
34837: PPOPN 3
34839: END
// every 0 0$1 trigger StreamModeActive and sTime do
34840: LD_EXP 56
34844: PUSH
34845: LD_EXP 107
34849: AND
34850: IFFALSE 34885
34852: GO 34854
34854: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
34855: LD_INT 28
34857: PPUSH
34858: LD_OWVAR 2
34862: PPUSH
34863: LD_INT 2
34865: PPUSH
34866: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
34870: LD_INT 30
34872: PPUSH
34873: LD_OWVAR 2
34877: PPUSH
34878: LD_INT 2
34880: PPUSH
34881: CALL_OW 322
// end ;
34885: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
34886: LD_EXP 56
34890: PUSH
34891: LD_EXP 108
34895: AND
34896: IFFALSE 35017
34898: GO 34900
34900: DISABLE
34901: LD_INT 0
34903: PPUSH
34904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34905: LD_ADDR_VAR 0 2
34909: PUSH
34910: LD_INT 22
34912: PUSH
34913: LD_OWVAR 2
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 21
34924: PUSH
34925: LD_INT 1
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 3
34934: PUSH
34935: LD_INT 23
34937: PUSH
34938: LD_INT 0
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: LIST
34953: PPUSH
34954: CALL_OW 69
34958: ST_TO_ADDR
// if not tmp then
34959: LD_VAR 0 2
34963: NOT
34964: IFFALSE 34968
// exit ;
34966: GO 35017
// for i in tmp do
34968: LD_ADDR_VAR 0 1
34972: PUSH
34973: LD_VAR 0 2
34977: PUSH
34978: FOR_IN
34979: IFFALSE 35015
// begin if Crawls ( i ) then
34981: LD_VAR 0 1
34985: PPUSH
34986: CALL_OW 318
34990: IFFALSE 35001
// ComWalk ( i ) ;
34992: LD_VAR 0 1
34996: PPUSH
34997: CALL_OW 138
// SetClass ( i , 2 ) ;
35001: LD_VAR 0 1
35005: PPUSH
35006: LD_INT 2
35008: PPUSH
35009: CALL_OW 336
// end ;
35013: GO 34978
35015: POP
35016: POP
// end ;
35017: PPOPN 2
35019: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35020: LD_EXP 56
35024: PUSH
35025: LD_EXP 109
35029: AND
35030: IFFALSE 35235
35032: GO 35034
35034: DISABLE
35035: LD_INT 0
35037: PPUSH
35038: PPUSH
35039: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35040: LD_OWVAR 2
35044: PPUSH
35045: LD_INT 9
35047: PPUSH
35048: LD_INT 1
35050: PPUSH
35051: LD_INT 1
35053: PPUSH
35054: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
35058: LD_INT 9
35060: PPUSH
35061: LD_OWVAR 2
35065: PPUSH
35066: CALL_OW 343
// hc_name := Dark Warrior ;
35070: LD_ADDR_OWVAR 26
35074: PUSH
35075: LD_STRING Dark Warrior
35077: ST_TO_ADDR
// hc_gallery :=  ;
35078: LD_ADDR_OWVAR 33
35082: PUSH
35083: LD_STRING 
35085: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
35086: LD_INT 1
35088: PPUSH
35089: LD_INT 1
35091: PPUSH
35092: LD_INT 10
35094: PPUSH
35095: CALL_OW 380
// un := CreateHuman ;
35099: LD_ADDR_VAR 0 3
35103: PUSH
35104: CALL_OW 44
35108: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35109: LD_VAR 0 3
35113: PPUSH
35114: LD_INT 1
35116: PPUSH
35117: CALL_OW 51
// p := 0 ;
35121: LD_ADDR_VAR 0 2
35125: PUSH
35126: LD_INT 0
35128: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35129: LD_INT 35
35131: PPUSH
35132: CALL_OW 67
// if GetLives ( un ) < 1000 then
35136: LD_VAR 0 3
35140: PPUSH
35141: CALL_OW 256
35145: PUSH
35146: LD_INT 1000
35148: LESS
35149: IFFALSE 35163
// SetLives ( un , 1000 ) ;
35151: LD_VAR 0 3
35155: PPUSH
35156: LD_INT 1000
35158: PPUSH
35159: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
35163: LD_VAR 0 3
35167: PPUSH
35168: LD_INT 81
35170: PUSH
35171: LD_OWVAR 2
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PPUSH
35180: CALL_OW 69
35184: PPUSH
35185: LD_VAR 0 3
35189: PPUSH
35190: CALL_OW 74
35194: PPUSH
35195: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
35199: LD_VAR 0 2
35203: PUSH
35204: LD_INT 60
35206: GREATER
35207: PUSH
35208: LD_VAR 0 3
35212: PPUSH
35213: CALL_OW 301
35217: OR
35218: IFFALSE 35129
// if un then
35220: LD_VAR 0 3
35224: IFFALSE 35235
// RemoveUnit ( un ) ;
35226: LD_VAR 0 3
35230: PPUSH
35231: CALL_OW 64
// end ; end_of_file
35235: PPOPN 3
35237: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
35238: LD_INT 0
35240: PPUSH
35241: PPUSH
35242: PPUSH
35243: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35244: LD_VAR 0 1
35248: PPUSH
35249: CALL_OW 264
35253: PUSH
35254: LD_EXP 55
35258: EQUAL
35259: IFFALSE 35331
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35261: LD_INT 68
35263: PPUSH
35264: LD_VAR 0 1
35268: PPUSH
35269: CALL_OW 255
35273: PPUSH
35274: CALL_OW 321
35278: PUSH
35279: LD_INT 2
35281: EQUAL
35282: IFFALSE 35294
// eff := 70 else
35284: LD_ADDR_VAR 0 6
35288: PUSH
35289: LD_INT 70
35291: ST_TO_ADDR
35292: GO 35302
// eff := 30 ;
35294: LD_ADDR_VAR 0 6
35298: PUSH
35299: LD_INT 30
35301: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35302: LD_VAR 0 1
35306: PPUSH
35307: CALL_OW 250
35311: PPUSH
35312: LD_VAR 0 1
35316: PPUSH
35317: CALL_OW 251
35321: PPUSH
35322: LD_VAR 0 6
35326: PPUSH
35327: CALL_OW 495
// end ; end ;
35331: LD_VAR 0 4
35335: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
35336: LD_INT 0
35338: PPUSH
35339: PPUSH
35340: PPUSH
35341: PPUSH
35342: PPUSH
35343: PPUSH
// if cmd = 124 then
35344: LD_VAR 0 1
35348: PUSH
35349: LD_INT 124
35351: EQUAL
35352: IFFALSE 35558
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
35354: LD_ADDR_VAR 0 5
35358: PUSH
35359: LD_INT 2
35361: PUSH
35362: LD_INT 34
35364: PUSH
35365: LD_INT 53
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 34
35374: PUSH
35375: LD_INT 14
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: PPUSH
35387: CALL_OW 69
35391: ST_TO_ADDR
// if not tmp then
35392: LD_VAR 0 5
35396: NOT
35397: IFFALSE 35401
// exit ;
35399: GO 35558
// for i in tmp do
35401: LD_ADDR_VAR 0 3
35405: PUSH
35406: LD_VAR 0 5
35410: PUSH
35411: FOR_IN
35412: IFFALSE 35556
// begin taskList := GetTaskList ( i ) ;
35414: LD_ADDR_VAR 0 6
35418: PUSH
35419: LD_VAR 0 3
35423: PPUSH
35424: CALL_OW 437
35428: ST_TO_ADDR
// if not taskList then
35429: LD_VAR 0 6
35433: NOT
35434: IFFALSE 35438
// continue ;
35436: GO 35411
// for j = 1 to taskList do
35438: LD_ADDR_VAR 0 4
35442: PUSH
35443: DOUBLE
35444: LD_INT 1
35446: DEC
35447: ST_TO_ADDR
35448: LD_VAR 0 6
35452: PUSH
35453: FOR_TO
35454: IFFALSE 35552
// if taskList [ j ] [ 1 ] = | then
35456: LD_VAR 0 6
35460: PUSH
35461: LD_VAR 0 4
35465: ARRAY
35466: PUSH
35467: LD_INT 1
35469: ARRAY
35470: PUSH
35471: LD_STRING |
35473: EQUAL
35474: IFFALSE 35550
// begin _taskList := Delete ( taskList , 1 ) ;
35476: LD_ADDR_VAR 0 7
35480: PUSH
35481: LD_VAR 0 6
35485: PPUSH
35486: LD_INT 1
35488: PPUSH
35489: CALL_OW 3
35493: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
35494: LD_VAR 0 3
35498: PPUSH
35499: LD_VAR 0 7
35503: PPUSH
35504: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
35508: LD_VAR 0 3
35512: PPUSH
35513: LD_VAR 0 6
35517: PUSH
35518: LD_VAR 0 4
35522: ARRAY
35523: PUSH
35524: LD_INT 2
35526: ARRAY
35527: PPUSH
35528: LD_VAR 0 6
35532: PUSH
35533: LD_VAR 0 4
35537: ARRAY
35538: PUSH
35539: LD_INT 3
35541: ARRAY
35542: PPUSH
35543: LD_INT 8
35545: PPUSH
35546: CALL 35563 0 4
// end ;
35550: GO 35453
35552: POP
35553: POP
// end ;
35554: GO 35411
35556: POP
35557: POP
// end ; end ;
35558: LD_VAR 0 2
35562: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35563: LD_INT 0
35565: PPUSH
35566: PPUSH
35567: PPUSH
35568: PPUSH
35569: PPUSH
35570: PPUSH
35571: PPUSH
35572: PPUSH
35573: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35574: LD_VAR 0 1
35578: NOT
35579: PUSH
35580: LD_VAR 0 2
35584: PPUSH
35585: LD_VAR 0 3
35589: PPUSH
35590: CALL_OW 488
35594: NOT
35595: OR
35596: PUSH
35597: LD_VAR 0 4
35601: NOT
35602: OR
35603: IFFALSE 35607
// exit ;
35605: GO 35947
// list := [ ] ;
35607: LD_ADDR_VAR 0 13
35611: PUSH
35612: EMPTY
35613: ST_TO_ADDR
// if x - r < 0 then
35614: LD_VAR 0 2
35618: PUSH
35619: LD_VAR 0 4
35623: MINUS
35624: PUSH
35625: LD_INT 0
35627: LESS
35628: IFFALSE 35640
// min_x := 0 else
35630: LD_ADDR_VAR 0 7
35634: PUSH
35635: LD_INT 0
35637: ST_TO_ADDR
35638: GO 35656
// min_x := x - r ;
35640: LD_ADDR_VAR 0 7
35644: PUSH
35645: LD_VAR 0 2
35649: PUSH
35650: LD_VAR 0 4
35654: MINUS
35655: ST_TO_ADDR
// if y - r < 0 then
35656: LD_VAR 0 3
35660: PUSH
35661: LD_VAR 0 4
35665: MINUS
35666: PUSH
35667: LD_INT 0
35669: LESS
35670: IFFALSE 35682
// min_y := 0 else
35672: LD_ADDR_VAR 0 8
35676: PUSH
35677: LD_INT 0
35679: ST_TO_ADDR
35680: GO 35698
// min_y := y - r ;
35682: LD_ADDR_VAR 0 8
35686: PUSH
35687: LD_VAR 0 3
35691: PUSH
35692: LD_VAR 0 4
35696: MINUS
35697: ST_TO_ADDR
// max_x := x + r ;
35698: LD_ADDR_VAR 0 9
35702: PUSH
35703: LD_VAR 0 2
35707: PUSH
35708: LD_VAR 0 4
35712: PLUS
35713: ST_TO_ADDR
// max_y := y + r ;
35714: LD_ADDR_VAR 0 10
35718: PUSH
35719: LD_VAR 0 3
35723: PUSH
35724: LD_VAR 0 4
35728: PLUS
35729: ST_TO_ADDR
// for _x = min_x to max_x do
35730: LD_ADDR_VAR 0 11
35734: PUSH
35735: DOUBLE
35736: LD_VAR 0 7
35740: DEC
35741: ST_TO_ADDR
35742: LD_VAR 0 9
35746: PUSH
35747: FOR_TO
35748: IFFALSE 35865
// for _y = min_y to max_y do
35750: LD_ADDR_VAR 0 12
35754: PUSH
35755: DOUBLE
35756: LD_VAR 0 8
35760: DEC
35761: ST_TO_ADDR
35762: LD_VAR 0 10
35766: PUSH
35767: FOR_TO
35768: IFFALSE 35861
// begin if not ValidHex ( _x , _y ) then
35770: LD_VAR 0 11
35774: PPUSH
35775: LD_VAR 0 12
35779: PPUSH
35780: CALL_OW 488
35784: NOT
35785: IFFALSE 35789
// continue ;
35787: GO 35767
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35789: LD_VAR 0 11
35793: PPUSH
35794: LD_VAR 0 12
35798: PPUSH
35799: CALL_OW 351
35803: PUSH
35804: LD_VAR 0 11
35808: PPUSH
35809: LD_VAR 0 12
35813: PPUSH
35814: CALL_OW 554
35818: AND
35819: IFFALSE 35859
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35821: LD_ADDR_VAR 0 13
35825: PUSH
35826: LD_VAR 0 13
35830: PPUSH
35831: LD_VAR 0 13
35835: PUSH
35836: LD_INT 1
35838: PLUS
35839: PPUSH
35840: LD_VAR 0 11
35844: PUSH
35845: LD_VAR 0 12
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PPUSH
35854: CALL_OW 2
35858: ST_TO_ADDR
// end ;
35859: GO 35767
35861: POP
35862: POP
35863: GO 35747
35865: POP
35866: POP
// if not list then
35867: LD_VAR 0 13
35871: NOT
35872: IFFALSE 35876
// exit ;
35874: GO 35947
// for i in list do
35876: LD_ADDR_VAR 0 6
35880: PUSH
35881: LD_VAR 0 13
35885: PUSH
35886: FOR_IN
35887: IFFALSE 35945
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35889: LD_VAR 0 1
35893: PPUSH
35894: LD_STRING M
35896: PUSH
35897: LD_VAR 0 6
35901: PUSH
35902: LD_INT 1
35904: ARRAY
35905: PUSH
35906: LD_VAR 0 6
35910: PUSH
35911: LD_INT 2
35913: ARRAY
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: LD_INT 0
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: LD_INT 0
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: PUSH
35936: EMPTY
35937: LIST
35938: PPUSH
35939: CALL_OW 447
35943: GO 35886
35945: POP
35946: POP
// end ;
35947: LD_VAR 0 5
35951: RET
