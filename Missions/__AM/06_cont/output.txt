// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 ] [ Difficulty ] ;
 177: LD_ADDR_EXP 48
 181: PUSH
 182: LD_INT 3
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: LD_INT 6
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: LIST
 195: PUSH
 196: LD_OWVAR 67
 200: ARRAY
 201: ST_TO_ADDR
// sendedConvoys = 0 ;
 202: LD_ADDR_EXP 39
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// tamedApemans = 0 ;
 210: LD_ADDR_EXP 32
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ignoreTarget := [ ] ;
 218: LD_ADDR_EXP 45
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// arrivals := [ ] ;
 225: LD_ADDR_EXP 46
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// unitLost = 0 ;
 232: LD_ADDR_EXP 30
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 240: LD_ADDR_EXP 31
 244: PUSH
 245: EMPTY
 246: ST_TO_ADDR
// russianTanks = [ ] ;
 247: LD_ADDR_EXP 36
 251: PUSH
 252: EMPTY
 253: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 254: LD_ADDR_EXP 37
 258: PUSH
 259: EMPTY
 260: ST_TO_ADDR
// disableHealAI = 0 ;
 261: LD_ADDR_EXP 33
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// strings = [ ] ;
 269: LD_ADDR_EXP 27
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 276: LD_INT 4
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: CALL_OW 343
// PrepareDifficulty ;
 286: CALL 6499 0 0
// PrepareNature ;
 290: CALL 23803 0 0
// PrepareRussian ;
 294: CALL 5659 0 0
// PrepareVehicles ;
 298: CALL 1586 0 0
// PrepareHeroes ;
 302: CALL 594 0 0
// PrepareOthers ;
 306: CALL 2007 0 0
// PreparePlayerApemans ;
 310: CALL 2149 0 0
// end ;
 314: END
// every 0 0$1 trigger debugMode do var i ;
 315: LD_EXP 42
 319: IFFALSE 546
 321: GO 323
 323: DISABLE
 324: LD_INT 0
 326: PPUSH
// begin enable ;
 327: ENABLE
// fogoff ( true ) ;
 328: LD_INT 1
 330: PPUSH
 331: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 21
 352: PUSH
 353: LD_INT 1
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 386
// SetLives ( i , 1000 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: LD_INT 1000
 379: PPUSH
 380: CALL_OW 234
 384: GO 369
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 30
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: PUSH
 422: FOR_IN
 423: IFFALSE 447
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 425: LD_VAR 0 1
 429: PPUSH
 430: CALL_OW 274
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_INT 9999
 440: PPUSH
 441: CALL_OW 277
 445: GO 422
 447: POP
 448: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 449: LD_ADDR_VAR 0 1
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// if IsSelected ( rudepo ) then
 510: LD_INT 2
 512: PPUSH
 513: CALL_OW 306
 517: IFFALSE 527
// your_side = 3 ;
 519: LD_ADDR_OWVAR 2
 523: PUSH
 524: LD_INT 3
 526: ST_TO_ADDR
// if IsSelected ( JMM ) then
 527: LD_EXP 1
 531: PPUSH
 532: CALL_OW 306
 536: IFFALSE 546
// your_side = 1 ;
 538: LD_ADDR_OWVAR 2
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// end ;
 546: PPOPN 1
 548: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 34
 561: PUSH
 562: LD_INT 12
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: LD_INT 3
 580: GREATEREQUAL
 581: IFFALSE 593
 583: GO 585
 585: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 586: LD_STRING ACH_FULLCARGO
 588: PPUSH
 589: CALL_OW 543
 593: END
// export function PrepareHeroes ; var veh ; begin
 594: LD_INT 0
 596: PPUSH
 597: PPUSH
// uc_side = 1 ;
 598: LD_ADDR_OWVAR 20
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// uc_nation = 1 ;
 606: LD_ADDR_OWVAR 21
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 614: LD_ADDR_EXP 1
 618: PUSH
 619: LD_STRING JMM
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: CALL 6061 0 2
 629: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 630: LD_ADDR_EXP 14
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL 6061 0 2
 645: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 646: LD_ADDR_EXP 10
 650: PUSH
 651: LD_STRING DeltaDoctor
 653: PPUSH
 654: CALL_OW 34
 658: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 659: LD_ADDR_VAR 0 2
 663: PUSH
 664: LD_INT 22
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 21
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 58
 686: PUSH
 687: EMPTY
 688: LIST
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: PPUSH
 695: CALL_OW 69
 699: ST_TO_ADDR
// if veh > 0 then
 700: LD_VAR 0 2
 704: PUSH
 705: LD_INT 0
 707: GREATER
 708: IFFALSE 730
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 710: LD_EXP 1
 714: PPUSH
 715: LD_VAR 0 2
 719: PUSH
 720: LD_INT 1
 722: ARRAY
 723: PPUSH
 724: CALL_OW 52
// end else
 728: GO 745
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 730: LD_EXP 1
 734: PPUSH
 735: LD_INT 2
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 745: LD_STRING LisaIn06
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 30
 755: PUSH
 756: LD_INT 1
 758: EQUAL
 759: IFFALSE 863
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 761: LD_ADDR_VAR 0 2
 765: PUSH
 766: LD_INT 22
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 21
 778: PUSH
 779: LD_INT 2
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: PUSH
 786: LD_INT 58
 788: PUSH
 789: EMPTY
 790: LIST
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: PPUSH
 797: CALL_OW 69
 801: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 802: LD_ADDR_EXP 2
 806: PUSH
 807: LD_STRING Lisa
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL 6061 0 2
 817: ST_TO_ADDR
// if veh > 0 then
 818: LD_VAR 0 2
 822: PUSH
 823: LD_INT 0
 825: GREATER
 826: IFFALSE 848
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_VAR 0 2
 837: PUSH
 838: LD_INT 1
 840: ARRAY
 841: PPUSH
 842: CALL_OW 52
// end else
 846: GO 863
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 848: LD_EXP 2
 852: PPUSH
 853: LD_INT 2
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 863: LD_STRING BobbyIn06
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 30
 873: PUSH
 874: LD_INT 1
 876: EQUAL
 877: IFFALSE 981
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 879: LD_ADDR_VAR 0 2
 883: PUSH
 884: LD_INT 22
 886: PUSH
 887: LD_INT 1
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 21
 896: PUSH
 897: LD_INT 2
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 58
 906: PUSH
 907: EMPTY
 908: LIST
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 920: LD_ADDR_EXP 3
 924: PUSH
 925: LD_STRING Bobby
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: CALL 6061 0 2
 935: ST_TO_ADDR
// if veh > 0 then
 936: LD_VAR 0 2
 940: PUSH
 941: LD_INT 0
 943: GREATER
 944: IFFALSE 966
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 946: LD_EXP 3
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 1
 958: ARRAY
 959: PPUSH
 960: CALL_OW 52
// end else
 964: GO 981
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 966: LD_EXP 3
 970: PPUSH
 971: LD_INT 2
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 981: LD_STRING CyrusIn06
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 30
 991: PUSH
 992: LD_INT 1
 994: EQUAL
 995: IFFALSE 1099
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 997: LD_ADDR_VAR 0 2
1001: PUSH
1002: LD_INT 22
1004: PUSH
1005: LD_INT 1
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 21
1014: PUSH
1015: LD_INT 2
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: LD_INT 58
1024: PUSH
1025: EMPTY
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 69
1037: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
1038: LD_ADDR_EXP 4
1042: PUSH
1043: LD_STRING Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6061 0 2
1053: ST_TO_ADDR
// if veh > 0 then
1054: LD_VAR 0 2
1058: PUSH
1059: LD_INT 0
1061: GREATER
1062: IFFALSE 1084
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1064: LD_EXP 4
1068: PPUSH
1069: LD_VAR 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: CALL_OW 52
// end else
1082: GO 1099
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1084: LD_EXP 4
1088: PPUSH
1089: LD_INT 2
1091: PPUSH
1092: LD_INT 0
1094: PPUSH
1095: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1099: LD_STRING FrankIn06
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL_OW 30
1109: PUSH
1110: LD_INT 1
1112: EQUAL
1113: IFFALSE 1217
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1115: LD_ADDR_VAR 0 2
1119: PUSH
1120: LD_INT 22
1122: PUSH
1123: LD_INT 1
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 21
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 58
1142: PUSH
1143: EMPTY
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PPUSH
1151: CALL_OW 69
1155: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1156: LD_ADDR_EXP 5
1160: PUSH
1161: LD_STRING Frank
1163: PPUSH
1164: LD_INT 1
1166: PPUSH
1167: CALL 6061 0 2
1171: ST_TO_ADDR
// if veh > 0 then
1172: LD_VAR 0 2
1176: PUSH
1177: LD_INT 0
1179: GREATER
1180: IFFALSE 1202
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1182: LD_EXP 5
1186: PPUSH
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: CALL_OW 52
// end else
1200: GO 1217
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1202: LD_EXP 5
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1217: LD_STRING BrownIn06
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 30
1227: PUSH
1228: LD_INT 1
1230: EQUAL
1231: IFFALSE 1335
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 2
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 58
1260: PUSH
1261: EMPTY
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PPUSH
1269: CALL_OW 69
1273: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1274: LD_ADDR_EXP 6
1278: PUSH
1279: LD_STRING Brown
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: CALL 6061 0 2
1289: ST_TO_ADDR
// if veh > 0 then
1290: LD_VAR 0 2
1294: PUSH
1295: LD_INT 0
1297: GREATER
1298: IFFALSE 1320
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1300: LD_EXP 6
1304: PPUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 52
// end else
1318: GO 1335
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1320: LD_EXP 6
1324: PPUSH
1325: LD_INT 2
1327: PPUSH
1328: LD_INT 0
1330: PPUSH
1331: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1335: LD_STRING DonaldsonIn06
1337: PPUSH
1338: LD_INT 0
1340: PPUSH
1341: CALL_OW 30
1345: PUSH
1346: LD_INT 1
1348: EQUAL
1349: IFFALSE 1453
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1351: LD_ADDR_VAR 0 2
1355: PUSH
1356: LD_INT 22
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 21
1368: PUSH
1369: LD_INT 2
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 58
1378: PUSH
1379: EMPTY
1380: LIST
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: PPUSH
1387: CALL_OW 69
1391: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1392: LD_ADDR_EXP 7
1396: PUSH
1397: LD_STRING Donaldson
1399: PPUSH
1400: LD_INT 1
1402: PPUSH
1403: CALL 6061 0 2
1407: ST_TO_ADDR
// if veh > 0 then
1408: LD_VAR 0 2
1412: PUSH
1413: LD_INT 0
1415: GREATER
1416: IFFALSE 1438
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1418: LD_EXP 7
1422: PPUSH
1423: LD_VAR 0 2
1427: PUSH
1428: LD_INT 1
1430: ARRAY
1431: PPUSH
1432: CALL_OW 52
// end else
1436: GO 1453
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1438: LD_EXP 7
1442: PPUSH
1443: LD_INT 2
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1453: LD_STRING GladstoneIn06
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 30
1463: PUSH
1464: LD_INT 1
1466: EQUAL
1467: IFFALSE 1571
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1469: LD_ADDR_VAR 0 2
1473: PUSH
1474: LD_INT 22
1476: PUSH
1477: LD_INT 1
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 21
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 58
1496: PUSH
1497: EMPTY
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: PPUSH
1505: CALL_OW 69
1509: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1510: LD_ADDR_EXP 8
1514: PUSH
1515: LD_STRING Gladstone
1517: PPUSH
1518: LD_INT 1
1520: PPUSH
1521: CALL 6061 0 2
1525: ST_TO_ADDR
// if veh > 0 then
1526: LD_VAR 0 2
1530: PUSH
1531: LD_INT 0
1533: GREATER
1534: IFFALSE 1556
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1536: LD_EXP 8
1540: PPUSH
1541: LD_VAR 0 2
1545: PUSH
1546: LD_INT 1
1548: ARRAY
1549: PPUSH
1550: CALL_OW 52
// end else
1554: GO 1571
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1556: LD_EXP 8
1560: PPUSH
1561: LD_INT 2
1563: PPUSH
1564: LD_INT 0
1566: PPUSH
1567: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1571: LD_INT 66
1573: PPUSH
1574: LD_INT 4
1576: PPUSH
1577: CALL_OW 86
// end ;
1581: LD_VAR 0 1
1585: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1586: LD_INT 0
1588: PPUSH
1589: PPUSH
1590: PPUSH
1591: PPUSH
1592: PPUSH
1593: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1594: LD_ADDR_VAR 0 5
1598: PUSH
1599: LD_STRING 06_VehiclesIn06_1
1601: PPUSH
1602: EMPTY
1603: PPUSH
1604: CALL_OW 30
1608: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1609: LD_ADDR_EXP 40
1613: PUSH
1614: LD_STRING 06_ResourcesInCargo06_1
1616: PPUSH
1617: EMPTY
1618: PPUSH
1619: CALL_OW 30
1623: ST_TO_ADDR
// cargoList = [ ] ;
1624: LD_ADDR_VAR 0 6
1628: PUSH
1629: EMPTY
1630: ST_TO_ADDR
// uc_side = 1 ;
1631: LD_ADDR_OWVAR 20
1635: PUSH
1636: LD_INT 1
1638: ST_TO_ADDR
// if vehicles > 0 then
1639: LD_VAR 0 5
1643: PUSH
1644: LD_INT 0
1646: GREATER
1647: IFFALSE 2002
// begin for i := 1 to vehicles do
1649: LD_ADDR_VAR 0 2
1653: PUSH
1654: DOUBLE
1655: LD_INT 1
1657: DEC
1658: ST_TO_ADDR
1659: LD_VAR 0 5
1663: PUSH
1664: FOR_TO
1665: IFFALSE 1814
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1667: LD_ADDR_OWVAR 21
1671: PUSH
1672: LD_VAR 0 5
1676: PUSH
1677: LD_VAR 0 2
1681: ARRAY
1682: PUSH
1683: LD_INT 1
1685: ARRAY
1686: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1687: LD_ADDR_OWVAR 37
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_VAR 0 2
1701: ARRAY
1702: PUSH
1703: LD_INT 2
1705: ARRAY
1706: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1707: LD_ADDR_OWVAR 39
1711: PUSH
1712: LD_VAR 0 5
1716: PUSH
1717: LD_VAR 0 2
1721: ARRAY
1722: PUSH
1723: LD_INT 3
1725: ARRAY
1726: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1727: LD_ADDR_OWVAR 38
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_VAR 0 2
1741: ARRAY
1742: PUSH
1743: LD_INT 4
1745: ARRAY
1746: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1747: LD_ADDR_OWVAR 40
1751: PUSH
1752: LD_VAR 0 5
1756: PUSH
1757: LD_VAR 0 2
1761: ARRAY
1762: PUSH
1763: LD_INT 5
1765: ARRAY
1766: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1767: LD_ADDR_OWVAR 41
1771: PUSH
1772: LD_INT 40
1774: ST_TO_ADDR
// veh = CreateVehicle ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: CALL_OW 45
1784: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1785: LD_VAR 0 4
1789: PPUSH
1790: LD_INT 3
1792: PPUSH
1793: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1797: LD_VAR 0 4
1801: PPUSH
1802: LD_INT 2
1804: PPUSH
1805: LD_INT 0
1807: PPUSH
1808: CALL_OW 49
// end ;
1812: GO 1664
1814: POP
1815: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1816: LD_ADDR_VAR 0 6
1820: PUSH
1821: LD_INT 22
1823: PUSH
1824: LD_INT 1
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 21
1833: PUSH
1834: LD_INT 2
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 34
1843: PUSH
1844: LD_INT 12
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL_OW 69
1860: ST_TO_ADDR
// if cargoList > 0 then
1861: LD_VAR 0 6
1865: PUSH
1866: LD_INT 0
1868: GREATER
1869: IFFALSE 2002
// for i = 1 to cargoList do
1871: LD_ADDR_VAR 0 2
1875: PUSH
1876: DOUBLE
1877: LD_INT 1
1879: DEC
1880: ST_TO_ADDR
1881: LD_VAR 0 6
1885: PUSH
1886: FOR_TO
1887: IFFALSE 2000
// begin if resources > 0 then
1889: LD_EXP 40
1893: PUSH
1894: LD_INT 0
1896: GREATER
1897: IFFALSE 1998
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1899: LD_VAR 0 6
1903: PUSH
1904: LD_VAR 0 2
1908: ARRAY
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: LD_EXP 40
1917: PUSH
1918: LD_VAR 0 2
1922: ARRAY
1923: PUSH
1924: LD_INT 1
1926: ARRAY
1927: PPUSH
1928: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1932: LD_VAR 0 6
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PPUSH
1943: LD_INT 2
1945: PPUSH
1946: LD_EXP 40
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 2
1959: ARRAY
1960: PPUSH
1961: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1965: LD_VAR 0 6
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: LD_EXP 40
1983: PUSH
1984: LD_VAR 0 2
1988: ARRAY
1989: PUSH
1990: LD_INT 3
1992: ARRAY
1993: PPUSH
1994: CALL_OW 291
// end ; end ;
1998: GO 1886
2000: POP
2001: POP
// end ; end ;
2002: LD_VAR 0 1
2006: RET
// export function PrepareOthers ; var i , veh ; begin
2007: LD_INT 0
2009: PPUSH
2010: PPUSH
2011: PPUSH
// uc_side = 1 ;
2012: LD_ADDR_OWVAR 20
2016: PUSH
2017: LD_INT 1
2019: ST_TO_ADDR
// uc_nation = 1 ;
2020: LD_ADDR_OWVAR 21
2024: PUSH
2025: LD_INT 1
2027: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2028: LD_ADDR_EXP 11
2032: PUSH
2033: LD_STRING OthersIn06
2035: PPUSH
2036: CALL_OW 31
2040: ST_TO_ADDR
// for i in others do
2041: LD_ADDR_VAR 0 2
2045: PUSH
2046: LD_EXP 11
2050: PUSH
2051: FOR_IN
2052: IFFALSE 2142
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2054: LD_ADDR_VAR 0 3
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 58
2081: PUSH
2082: EMPTY
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: ST_TO_ADDR
// if veh > 0 then
2095: LD_VAR 0 3
2099: PUSH
2100: LD_INT 0
2102: GREATER
2103: IFFALSE 2125
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: LD_VAR 0 3
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PPUSH
2119: CALL_OW 52
// end else
2123: GO 2140
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2125: LD_VAR 0 2
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 0
2135: PPUSH
2136: CALL_OW 49
// end ; end ;
2140: GO 2051
2142: POP
2143: POP
// end ;
2144: LD_VAR 0 1
2148: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2149: LD_INT 0
2151: PPUSH
2152: PPUSH
2153: PPUSH
// uc_side = 1 ;
2154: LD_ADDR_OWVAR 20
2158: PUSH
2159: LD_INT 1
2161: ST_TO_ADDR
// uc_nation = 0 ;
2162: LD_ADDR_OWVAR 21
2166: PUSH
2167: LD_INT 0
2169: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2170: LD_ADDR_EXP 12
2174: PUSH
2175: LD_STRING ApeIn06
2177: PPUSH
2178: CALL_OW 31
2182: ST_TO_ADDR
// for i in ape do
2183: LD_ADDR_VAR 0 2
2187: PUSH
2188: LD_EXP 12
2192: PUSH
2193: FOR_IN
2194: IFFALSE 2213
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2196: LD_VAR 0 2
2200: PPUSH
2201: LD_INT 2
2203: PPUSH
2204: LD_INT 0
2206: PPUSH
2207: CALL_OW 49
2211: GO 2193
2213: POP
2214: POP
// end ;
2215: LD_VAR 0 1
2219: RET
// export function PrepareDenis ; var xy , i ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// uc_side = 4 ;
2225: LD_ADDR_OWVAR 20
2229: PUSH
2230: LD_INT 4
2232: ST_TO_ADDR
// uc_nation = 1 ;
2233: LD_ADDR_OWVAR 21
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2241: LD_ADDR_VAR 0 2
2245: PUSH
2246: LD_INT 63
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 70
2258: PUSH
2259: LD_INT 1
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PUSH
2266: LD_INT 83
2268: PUSH
2269: LD_INT 1
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 16
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 27
2288: PUSH
2289: LD_INT 1
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 38
2298: PUSH
2299: LD_INT 1
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 5
2308: PUSH
2309: LD_INT 1
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 54
2318: PUSH
2319: LD_INT 1
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2336: LD_ADDR_EXP 9
2340: PUSH
2341: LD_STRING Denis
2343: PPUSH
2344: LD_INT 1
2346: PPUSH
2347: CALL 6061 0 2
2351: ST_TO_ADDR
// for i = 1 to xy do
2352: LD_ADDR_VAR 0 3
2356: PUSH
2357: DOUBLE
2358: LD_INT 1
2360: DEC
2361: ST_TO_ADDR
2362: LD_VAR 0 2
2366: PUSH
2367: FOR_TO
2368: IFFALSE 2467
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2370: LD_VAR 0 2
2374: PUSH
2375: LD_VAR 0 3
2379: ARRAY
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 2
2389: PUSH
2390: LD_VAR 0 3
2394: ARRAY
2395: PUSH
2396: LD_INT 2
2398: ARRAY
2399: PPUSH
2400: CALL_OW 428
2404: PUSH
2405: LD_INT 0
2407: EQUAL
2408: IFFALSE 2465
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2410: LD_EXP 9
2414: PPUSH
2415: LD_VAR 0 2
2419: PUSH
2420: LD_VAR 0 3
2424: ARRAY
2425: PUSH
2426: LD_INT 1
2428: ARRAY
2429: PPUSH
2430: LD_VAR 0 2
2434: PUSH
2435: LD_VAR 0 3
2439: ARRAY
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 0
2447: PPUSH
2448: CALL_OW 48
// if IsPlaced ( Denis ) then
2452: LD_EXP 9
2456: PPUSH
2457: CALL_OW 305
2461: IFFALSE 2465
// break ;
2463: GO 2467
// end ;
2465: GO 2367
2467: POP
2468: POP
// SetClass ( Denis , 4 ) ;
2469: LD_EXP 9
2473: PPUSH
2474: LD_INT 4
2476: PPUSH
2477: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2481: LD_EXP 9
2485: PPUSH
2486: LD_INT 750
2488: PPUSH
2489: CALL_OW 234
// end ;
2493: LD_VAR 0 1
2497: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2498: LD_INT 0
2500: PPUSH
2501: PPUSH
2502: PPUSH
2503: PPUSH
2504: PPUSH
// area := HarrisonSupportArea ;
2505: LD_ADDR_VAR 0 4
2509: PUSH
2510: LD_INT 3
2512: ST_TO_ADDR
// dir := 2 ;
2513: LD_ADDR_VAR 0 5
2517: PUSH
2518: LD_INT 2
2520: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2521: LD_VAR 0 4
2525: PPUSH
2526: LD_INT 21
2528: PUSH
2529: LD_INT 3
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PPUSH
2536: CALL_OW 70
2540: IFFALSE 2558
// begin area := HarrisonSupportArea2 ;
2542: LD_ADDR_VAR 0 4
2546: PUSH
2547: LD_INT 31
2549: ST_TO_ADDR
// dir := 1 ;
2550: LD_ADDR_VAR 0 5
2554: PUSH
2555: LD_INT 1
2557: ST_TO_ADDR
// end ; uc_side = 1 ;
2558: LD_ADDR_OWVAR 20
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// uc_nation = 1 ;
2566: LD_ADDR_OWVAR 21
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// vc_engine = 1 ;
2574: LD_ADDR_OWVAR 39
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// vc_control = 1 ;
2582: LD_ADDR_OWVAR 38
2586: PUSH
2587: LD_INT 1
2589: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2590: LD_ADDR_OWVAR 40
2594: PUSH
2595: LD_INT 4
2597: PUSH
2598: LD_INT 4
2600: PUSH
2601: LD_INT 2
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: PUSH
2609: LD_OWVAR 67
2613: ARRAY
2614: ST_TO_ADDR
// vc_chassis = 2 ;
2615: LD_ADDR_OWVAR 37
2619: PUSH
2620: LD_INT 2
2622: ST_TO_ADDR
// veh = CreateVehicle ;
2623: LD_ADDR_VAR 0 3
2627: PUSH
2628: CALL_OW 45
2632: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2633: LD_VAR 0 3
2637: PPUSH
2638: LD_VAR 0 5
2642: PPUSH
2643: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2647: LD_VAR 0 3
2651: PPUSH
2652: LD_VAR 0 4
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2664: LD_VAR 0 3
2668: PPUSH
2669: LD_INT 50
2671: PPUSH
2672: CALL_OW 240
// hc_class := 2 ;
2676: LD_ADDR_OWVAR 28
2680: PUSH
2681: LD_INT 2
2683: ST_TO_ADDR
// hc_sex := sex_male ;
2684: LD_ADDR_OWVAR 27
2688: PUSH
2689: LD_INT 1
2691: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2692: LD_ADDR_OWVAR 33
2696: PUSH
2697: LD_STRING SecondCharsGal
2699: ST_TO_ADDR
// hc_face_number := 52 ;
2700: LD_ADDR_OWVAR 34
2704: PUSH
2705: LD_INT 52
2707: ST_TO_ADDR
// hc_name := Craig Brown ;
2708: LD_ADDR_OWVAR 26
2712: PUSH
2713: LD_STRING Craig Brown
2715: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2716: LD_ADDR_OWVAR 29
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: LD_INT 10
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2731: LD_ADDR_OWVAR 30
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: LD_INT 2
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2754: LD_ADDR_OWVAR 31
2758: PUSH
2759: LD_INT 2
2761: PUSH
2762: LD_INT 3
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: LD_INT 0
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2777: LD_ADDR_EXP 17
2781: PUSH
2782: CALL_OW 44
2786: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2787: LD_EXP 17
2791: PPUSH
2792: LD_VAR 0 3
2796: PPUSH
2797: CALL_OW 52
// vc_engine = 1 ;
2801: LD_ADDR_OWVAR 39
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// vc_control = 1 ;
2809: LD_ADDR_OWVAR 38
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2817: LD_ADDR_OWVAR 40
2821: PUSH
2822: LD_INT 3
2824: ST_TO_ADDR
// vc_chassis = 2 ;
2825: LD_ADDR_OWVAR 37
2829: PUSH
2830: LD_INT 2
2832: ST_TO_ADDR
// veh = CreateVehicle ;
2833: LD_ADDR_VAR 0 3
2837: PUSH
2838: CALL_OW 45
2842: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_VAR 0 5
2852: PPUSH
2853: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2857: LD_VAR 0 3
2861: PPUSH
2862: LD_VAR 0 4
2866: PPUSH
2867: LD_INT 0
2869: PPUSH
2870: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2874: LD_VAR 0 3
2878: PPUSH
2879: LD_INT 50
2881: PPUSH
2882: CALL_OW 240
// hc_class := 1 ;
2886: LD_ADDR_OWVAR 28
2890: PUSH
2891: LD_INT 1
2893: ST_TO_ADDR
// hc_sex := sex_female ;
2894: LD_ADDR_OWVAR 27
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2902: LD_ADDR_OWVAR 33
2906: PUSH
2907: LD_STRING SecondCharsGal
2909: ST_TO_ADDR
// hc_face_number := 45 ;
2910: LD_ADDR_OWVAR 34
2914: PUSH
2915: LD_INT 45
2917: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2918: LD_ADDR_OWVAR 29
2922: PUSH
2923: LD_INT 11
2925: PUSH
2926: LD_INT 10
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2933: LD_ADDR_OWVAR 26
2937: PUSH
2938: LD_STRING Ingrid Jonsson
2940: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2941: LD_ADDR_OWVAR 30
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: LD_INT 1
2951: PUSH
2952: LD_INT 0
2954: PUSH
2955: LD_INT 0
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2964: LD_ADDR_OWVAR 31
2968: PUSH
2969: LD_INT 3
2971: PUSH
2972: LD_INT 1
2974: PUSH
2975: LD_INT 1
2977: PUSH
2978: LD_INT 0
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2987: LD_ADDR_EXP 18
2991: PUSH
2992: CALL_OW 44
2996: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2997: LD_EXP 18
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: CALL_OW 52
// end ;
3011: LD_VAR 0 1
3015: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3016: LD_INT 0
3018: PPUSH
3019: PPUSH
3020: PPUSH
3021: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3022: LD_ADDR_VAR 0 3
3026: PUSH
3027: LD_INT 22
3029: PUSH
3030: LD_INT 1
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 23
3039: PUSH
3040: LD_INT 1
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 26
3049: PUSH
3050: LD_INT 1
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: LIST
3061: PPUSH
3062: CALL_OW 69
3066: PUSH
3067: LD_EXP 3
3071: PUSH
3072: LD_EXP 4
3076: PUSH
3077: LD_EXP 8
3081: PUSH
3082: LD_EXP 9
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: DIFF
3099: ST_TO_ADDR
// for i in _tmp do
3100: LD_ADDR_VAR 0 2
3104: PUSH
3105: LD_VAR 0 4
3109: PUSH
3110: FOR_IN
3111: IFFALSE 3152
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3113: LD_VAR 0 2
3117: PPUSH
3118: LD_INT 32
3120: PPUSH
3121: CALL_OW 308
3125: PUSH
3126: LD_VAR 0 2
3130: PPUSH
3131: CALL_OW 302
3135: AND
3136: IFFALSE 3150
// begin tmp := i ;
3138: LD_ADDR_VAR 0 3
3142: PUSH
3143: LD_VAR 0 2
3147: ST_TO_ADDR
// break ;
3148: GO 3152
// end ;
3150: GO 3110
3152: POP
3153: POP
// if not tmp then
3154: LD_VAR 0 3
3158: NOT
3159: IFFALSE 3171
// tmp := JMM ;
3161: LD_ADDR_VAR 0 3
3165: PUSH
3166: LD_EXP 1
3170: ST_TO_ADDR
// blockSpawn = 1 ;
3171: LD_ADDR_EXP 29
3175: PUSH
3176: LD_INT 1
3178: ST_TO_ADDR
// uc_side = 4 ;
3179: LD_ADDR_OWVAR 20
3183: PUSH
3184: LD_INT 4
3186: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3187: LD_ADDR_EXP 15
3191: PUSH
3192: LD_STRING Joan
3194: PPUSH
3195: LD_INT 0
3197: PPUSH
3198: CALL 6061 0 2
3202: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3203: LD_EXP 15
3207: PPUSH
3208: LD_VAR 0 3
3212: PPUSH
3213: CALL_OW 250
3217: PPUSH
3218: LD_VAR 0 3
3222: PPUSH
3223: CALL_OW 251
3227: PPUSH
3228: LD_INT 5
3230: PPUSH
3231: LD_INT 1
3233: PPUSH
3234: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3238: LD_EXP 15
3242: PPUSH
3243: LD_INT 250
3245: PPUSH
3246: CALL_OW 234
// InGameOn ;
3250: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3254: LD_EXP 15
3258: PPUSH
3259: CALL_OW 87
// wait ( 0 0$2 ) ;
3263: LD_INT 70
3265: PPUSH
3266: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3270: LD_VAR 0 3
3274: PPUSH
3275: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3279: LD_VAR 0 3
3283: PPUSH
3284: CALL_OW 122
// wait ( 0 0$1 ) ;
3288: LD_INT 35
3290: PPUSH
3291: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3295: LD_VAR 0 3
3299: PPUSH
3300: LD_EXP 15
3304: PPUSH
3305: CALL_OW 112
// wait ( 0 0$2 ) ;
3309: LD_INT 70
3311: PPUSH
3312: CALL_OW 67
// DialogueOn ;
3316: CALL_OW 6
// if tmp = JMM then
3320: LD_VAR 0 3
3324: PUSH
3325: LD_EXP 1
3329: EQUAL
3330: IFFALSE 3479
// begin ComTurnUnit ( JMM , Joan ) ;
3332: LD_EXP 1
3336: PPUSH
3337: LD_EXP 15
3341: PPUSH
3342: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3346: LD_EXP 1
3350: PPUSH
3351: LD_STRING D5b-JMM-1
3353: PPUSH
3354: CALL_OW 88
// DialogueOff ;
3358: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3362: LD_EXP 15
3366: PPUSH
3367: LD_INT 500
3369: PPUSH
3370: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3374: LD_EXP 15
3378: PPUSH
3379: LD_EXP 1
3383: PPUSH
3384: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3388: LD_EXP 1
3392: PPUSH
3393: LD_EXP 15
3397: PPUSH
3398: CALL_OW 119
// wait ( 0 0$1 ) ;
3402: LD_INT 35
3404: PPUSH
3405: CALL_OW 67
// DialogueOn ;
3409: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3413: LD_EXP 15
3417: PPUSH
3418: LD_STRING D5b-Joan-1
3420: PPUSH
3421: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3425: LD_EXP 1
3429: PPUSH
3430: LD_STRING D5b-JMM-2
3432: PPUSH
3433: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3437: LD_EXP 15
3441: PPUSH
3442: LD_STRING D5b-Joan-2
3444: PPUSH
3445: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3449: LD_EXP 1
3453: PPUSH
3454: LD_STRING D5b-JMM-3
3456: PPUSH
3457: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3461: LD_EXP 15
3465: PPUSH
3466: LD_STRING D5b-Joan-3
3468: PPUSH
3469: CALL_OW 88
// DialogueOff ;
3473: CALL_OW 7
// end else
3477: GO 3853
// begin ComTurnUnit ( tmp , Joan ) ;
3479: LD_VAR 0 3
3483: PPUSH
3484: LD_EXP 15
3488: PPUSH
3489: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3493: LD_VAR 0 3
3497: PPUSH
3498: LD_STRING D5a-Sol1-1
3500: PPUSH
3501: CALL_OW 88
// DialogueOff ;
3505: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3509: LD_EXP 15
3513: PPUSH
3514: LD_INT 500
3516: PPUSH
3517: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3521: LD_EXP 15
3525: PPUSH
3526: LD_VAR 0 3
3530: PPUSH
3531: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3535: LD_VAR 0 3
3539: PPUSH
3540: LD_EXP 15
3544: PPUSH
3545: CALL_OW 119
// wait ( 0 0$1 ) ;
3549: LD_INT 35
3551: PPUSH
3552: CALL_OW 67
// DialogueOn ;
3556: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3560: LD_EXP 15
3564: PPUSH
3565: LD_STRING D5a-Joan-1
3567: PPUSH
3568: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3572: LD_VAR 0 3
3576: PPUSH
3577: LD_STRING D5a-Sol1-2
3579: PPUSH
3580: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3584: LD_EXP 15
3588: PPUSH
3589: LD_STRING D5a-Joan-2
3591: PPUSH
3592: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3596: LD_VAR 0 3
3600: PPUSH
3601: LD_STRING D5a-Sol1-3
3603: PPUSH
3604: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3608: LD_EXP 15
3612: PPUSH
3613: LD_STRING D5a-Joan-3
3615: PPUSH
3616: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3620: LD_VAR 0 3
3624: PPUSH
3625: LD_STRING D5a-Sol1-4
3627: PPUSH
3628: CALL_OW 88
// DialogueOff ;
3632: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3636: LD_EXP 1
3640: PUSH
3641: LD_INT 55
3643: PUSH
3644: EMPTY
3645: LIST
3646: PPUSH
3647: CALL_OW 69
3651: IN
3652: IFFALSE 3675
// begin ComMoveUnit ( JMM , Joan ) ;
3654: LD_EXP 1
3658: PPUSH
3659: LD_EXP 15
3663: PPUSH
3664: CALL_OW 112
// wait ( 0 0$05 ) ;
3668: LD_INT 175
3670: PPUSH
3671: CALL_OW 67
// end ; ComExitVehicle ( JMM ) ;
3675: LD_EXP 1
3679: PPUSH
3680: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3684: LD_EXP 1
3688: PPUSH
3689: CALL_OW 122
// wait ( 0 0$1 ) ;
3693: LD_INT 35
3695: PPUSH
3696: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3700: LD_INT 35
3702: PPUSH
3703: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3707: LD_EXP 15
3711: PUSH
3712: LD_VAR 0 3
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PPUSH
3721: LD_EXP 1
3725: PPUSH
3726: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3730: LD_EXP 15
3734: PPUSH
3735: LD_EXP 1
3739: PPUSH
3740: CALL_OW 296
3744: PUSH
3745: LD_INT 5
3747: LESS
3748: IFFALSE 3700
// ComTurnUnit ( Joan , JMM ) ;
3750: LD_EXP 15
3754: PPUSH
3755: LD_EXP 1
3759: PPUSH
3760: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3764: LD_EXP 1
3768: PPUSH
3769: LD_EXP 15
3773: PPUSH
3774: CALL_OW 119
// wait ( 0 0$1 ) ;
3778: LD_INT 35
3780: PPUSH
3781: CALL_OW 67
// DialogueOn ;
3785: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3789: LD_EXP 15
3793: PPUSH
3794: LD_STRING D5a-Joan-4
3796: PPUSH
3797: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3801: LD_EXP 1
3805: PPUSH
3806: LD_STRING D5a-JMM-4
3808: PPUSH
3809: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3813: LD_EXP 15
3817: PPUSH
3818: LD_STRING D5a-Joan-5
3820: PPUSH
3821: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3825: LD_EXP 1
3829: PPUSH
3830: LD_STRING D5a-JMM-5
3832: PPUSH
3833: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3837: LD_EXP 15
3841: PPUSH
3842: LD_STRING D5a-Joan-6
3844: PPUSH
3845: CALL_OW 88
// DialogueOff ;
3849: CALL_OW 7
// end ; DialogueOn ;
3853: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3857: LD_EXP 1
3861: PPUSH
3862: LD_STRING D6-JMM-1
3864: PPUSH
3865: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3869: LD_EXP 15
3873: PPUSH
3874: LD_STRING D6-Joan-1
3876: PPUSH
3877: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3881: LD_EXP 1
3885: PPUSH
3886: LD_STRING D6-JMM-2
3888: PPUSH
3889: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3893: LD_EXP 15
3897: PPUSH
3898: LD_STRING D6-Joan-2
3900: PPUSH
3901: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3905: LD_EXP 1
3909: PPUSH
3910: LD_STRING D6-JMM-3
3912: PPUSH
3913: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3917: LD_EXP 15
3921: PPUSH
3922: LD_STRING D6-Joan-3
3924: PPUSH
3925: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3929: LD_EXP 1
3933: PPUSH
3934: LD_STRING D6-JMM-4
3936: PPUSH
3937: CALL_OW 88
// DialogueOff ;
3941: CALL_OW 7
// InGameOff ;
3945: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3949: LD_EXP 15
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3961: LD_STRING MJ
3963: PPUSH
3964: CALL_OW 337
// JoanStatus = 1 ;
3968: LD_ADDR_EXP 16
3972: PUSH
3973: LD_INT 1
3975: ST_TO_ADDR
// blockSpawn = 0 ;
3976: LD_ADDR_EXP 29
3980: PUSH
3981: LD_INT 0
3983: ST_TO_ADDR
// end ;
3984: LD_VAR 0 1
3988: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3989: LD_INT 0
3991: PPUSH
3992: PPUSH
// if not number or number > 8 then
3993: LD_VAR 0 1
3997: NOT
3998: PUSH
3999: LD_VAR 0 1
4003: PUSH
4004: LD_INT 8
4006: GREATER
4007: OR
4008: IFFALSE 4012
// exit ;
4010: GO 5554
// repeat wait ( 0 0$7 ) ;
4012: LD_INT 245
4014: PPUSH
4015: CALL_OW 67
// until blockSpawn = 0 ;
4019: LD_EXP 29
4023: PUSH
4024: LD_INT 0
4026: EQUAL
4027: IFFALSE 4012
// uc_side = 1 ;
4029: LD_ADDR_OWVAR 20
4033: PUSH
4034: LD_INT 1
4036: ST_TO_ADDR
// uc_nation = 1 ;
4037: LD_ADDR_OWVAR 21
4041: PUSH
4042: LD_INT 1
4044: ST_TO_ADDR
// InitHc ;
4045: CALL_OW 19
// if number = 1 then
4049: LD_VAR 0 1
4053: PUSH
4054: LD_INT 1
4056: EQUAL
4057: IFFALSE 4233
// begin hc_class := 3 ;
4059: LD_ADDR_OWVAR 28
4063: PUSH
4064: LD_INT 3
4066: ST_TO_ADDR
// hc_sex := sex_male ;
4067: LD_ADDR_OWVAR 27
4071: PUSH
4072: LD_INT 1
4074: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4075: LD_ADDR_OWVAR 33
4079: PUSH
4080: LD_STRING SecondCharsGal
4082: ST_TO_ADDR
// hc_face_number := 55 ;
4083: LD_ADDR_OWVAR 34
4087: PUSH
4088: LD_INT 55
4090: ST_TO_ADDR
// hc_name := George McCarthy ;
4091: LD_ADDR_OWVAR 26
4095: PUSH
4096: LD_STRING George McCarthy
4098: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4099: LD_ADDR_OWVAR 29
4103: PUSH
4104: LD_INT 11
4106: PUSH
4107: LD_INT 10
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4114: LD_ADDR_OWVAR 30
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: LD_INT 0
4124: PUSH
4125: LD_INT 2
4127: PUSH
4128: LD_INT 0
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4137: LD_ADDR_OWVAR 31
4141: PUSH
4142: LD_INT 1
4144: PUSH
4145: LD_INT 2
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 1
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: ST_TO_ADDR
// un = CreateHuman ;
4160: LD_ADDR_VAR 0 3
4164: PUSH
4165: CALL_OW 44
4169: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4170: LD_VAR 0 3
4174: PPUSH
4175: LD_INT 23
4177: PPUSH
4178: LD_INT 1
4180: PPUSH
4181: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4185: LD_VAR 0 3
4189: PPUSH
4190: CALL_OW 87
// wait ( 0 0$1 ) ;
4194: LD_INT 35
4196: PPUSH
4197: CALL_OW 67
// DialogueOn ;
4201: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4205: LD_VAR 0 3
4209: PPUSH
4210: LD_STRING D11d-Sol4-1
4212: PPUSH
4213: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4217: LD_EXP 1
4221: PPUSH
4222: LD_STRING D11d-JMM-1
4224: PPUSH
4225: CALL_OW 88
// DialogueOff ;
4229: CALL_OW 7
// end ; if number = 2 then
4233: LD_VAR 0 1
4237: PUSH
4238: LD_INT 2
4240: EQUAL
4241: IFFALSE 4417
// begin hc_class := 1 ;
4243: LD_ADDR_OWVAR 28
4247: PUSH
4248: LD_INT 1
4250: ST_TO_ADDR
// hc_sex := sex_male ;
4251: LD_ADDR_OWVAR 27
4255: PUSH
4256: LD_INT 1
4258: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4259: LD_ADDR_OWVAR 33
4263: PUSH
4264: LD_STRING AmGalRemake
4266: ST_TO_ADDR
// hc_face_number := 7 ;
4267: LD_ADDR_OWVAR 34
4271: PUSH
4272: LD_INT 7
4274: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4275: LD_ADDR_OWVAR 26
4279: PUSH
4280: LD_STRING Bobby Jordan
4282: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4283: LD_ADDR_OWVAR 29
4287: PUSH
4288: LD_INT 9
4290: PUSH
4291: LD_INT 11
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4298: LD_ADDR_OWVAR 30
4302: PUSH
4303: LD_INT 1
4305: PUSH
4306: LD_INT 0
4308: PUSH
4309: LD_INT 0
4311: PUSH
4312: LD_INT 1
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4321: LD_ADDR_OWVAR 31
4325: PUSH
4326: LD_INT 2
4328: PUSH
4329: LD_INT 1
4331: PUSH
4332: LD_INT 1
4334: PUSH
4335: LD_INT 1
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: ST_TO_ADDR
// un = CreateHuman ;
4344: LD_ADDR_VAR 0 3
4348: PUSH
4349: CALL_OW 44
4353: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4354: LD_VAR 0 3
4358: PPUSH
4359: LD_INT 24
4361: PPUSH
4362: LD_INT 1
4364: PPUSH
4365: CALL_OW 49
// wait ( 0 0$1 ) ;
4369: LD_INT 35
4371: PPUSH
4372: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4376: LD_VAR 0 3
4380: PPUSH
4381: CALL_OW 87
// DialogueOn ;
4385: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4389: LD_VAR 0 3
4393: PPUSH
4394: LD_STRING D11b-Sol3-1
4396: PPUSH
4397: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4401: LD_EXP 1
4405: PPUSH
4406: LD_STRING D11b-JMM-1
4408: PPUSH
4409: CALL_OW 88
// DialogueOff ;
4413: CALL_OW 7
// end ; if number = 3 then
4417: LD_VAR 0 1
4421: PUSH
4422: LD_INT 3
4424: EQUAL
4425: IFFALSE 4589
// begin hc_class := 1 ;
4427: LD_ADDR_OWVAR 28
4431: PUSH
4432: LD_INT 1
4434: ST_TO_ADDR
// hc_sex := sex_male ;
4435: LD_ADDR_OWVAR 27
4439: PUSH
4440: LD_INT 1
4442: ST_TO_ADDR
// hc_gallery := DJ ;
4443: LD_ADDR_OWVAR 33
4447: PUSH
4448: LD_STRING DJ
4450: ST_TO_ADDR
// hc_face_number := 1 ;
4451: LD_ADDR_OWVAR 34
4455: PUSH
4456: LD_INT 1
4458: ST_TO_ADDR
// hc_name := Darius Dajay ;
4459: LD_ADDR_OWVAR 26
4463: PUSH
4464: LD_STRING Darius Dajay
4466: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4467: LD_ADDR_OWVAR 29
4471: PUSH
4472: LD_INT 11
4474: PUSH
4475: LD_INT 11
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4482: LD_ADDR_OWVAR 30
4486: PUSH
4487: LD_INT 2
4489: PUSH
4490: LD_INT 0
4492: PUSH
4493: LD_INT 0
4495: PUSH
4496: LD_INT 0
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4505: LD_ADDR_OWVAR 31
4509: PUSH
4510: LD_INT 4
4512: PUSH
4513: LD_INT 0
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: LD_INT 0
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: ST_TO_ADDR
// un = CreateHuman ;
4528: LD_ADDR_VAR 0 3
4532: PUSH
4533: CALL_OW 44
4537: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4538: LD_VAR 0 3
4542: PPUSH
4543: LD_INT 25
4545: PPUSH
4546: LD_INT 1
4548: PPUSH
4549: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4553: LD_VAR 0 3
4557: PPUSH
4558: CALL_OW 87
// wait ( 0 0$1 ) ;
4562: LD_INT 35
4564: PPUSH
4565: CALL_OW 67
// DialogueOn ;
4569: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4573: LD_VAR 0 3
4577: PPUSH
4578: LD_STRING D11f-Sol5-1
4580: PPUSH
4581: CALL_OW 88
// DialogueOff ;
4585: CALL_OW 7
// end ; if number = 4 then
4589: LD_VAR 0 1
4593: PUSH
4594: LD_INT 4
4596: EQUAL
4597: IFFALSE 4734
// begin hc_class := 2 ;
4599: LD_ADDR_OWVAR 28
4603: PUSH
4604: LD_INT 2
4606: ST_TO_ADDR
// hc_sex := sex_female ;
4607: LD_ADDR_OWVAR 27
4611: PUSH
4612: LD_INT 2
4614: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4615: LD_ADDR_OWVAR 33
4619: PUSH
4620: LD_STRING SecondCharsGal
4622: ST_TO_ADDR
// hc_face_number := 46 ;
4623: LD_ADDR_OWVAR 34
4627: PUSH
4628: LD_INT 46
4630: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4631: LD_ADDR_OWVAR 26
4635: PUSH
4636: LD_STRING Sylvia Creak
4638: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4639: LD_ADDR_OWVAR 29
4643: PUSH
4644: LD_INT 10
4646: PUSH
4647: LD_INT 9
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4654: LD_ADDR_OWVAR 30
4658: PUSH
4659: LD_INT 0
4661: PUSH
4662: LD_INT 1
4664: PUSH
4665: LD_INT 1
4667: PUSH
4668: LD_INT 1
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4677: LD_ADDR_OWVAR 31
4681: PUSH
4682: LD_INT 1
4684: PUSH
4685: LD_INT 3
4687: PUSH
4688: LD_INT 1
4690: PUSH
4691: LD_INT 1
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: ST_TO_ADDR
// un = CreateHuman ;
4700: LD_ADDR_VAR 0 3
4704: PUSH
4705: CALL_OW 44
4709: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4710: LD_VAR 0 3
4714: PPUSH
4715: LD_INT 26
4717: PPUSH
4718: LD_INT 1
4720: PPUSH
4721: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4725: LD_VAR 0 3
4729: PPUSH
4730: CALL_OW 87
// end ; if number = 5 then
4734: LD_VAR 0 1
4738: PUSH
4739: LD_INT 5
4741: EQUAL
4742: IFFALSE 4918
// begin hc_class := 1 ;
4744: LD_ADDR_OWVAR 28
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// hc_sex := sex_female ;
4752: LD_ADDR_OWVAR 27
4756: PUSH
4757: LD_INT 2
4759: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4760: LD_ADDR_OWVAR 33
4764: PUSH
4765: LD_STRING SecondCharsGal
4767: ST_TO_ADDR
// hc_face_number := 37 ;
4768: LD_ADDR_OWVAR 34
4772: PUSH
4773: LD_INT 37
4775: ST_TO_ADDR
// hc_name := Malena Johnson ;
4776: LD_ADDR_OWVAR 26
4780: PUSH
4781: LD_STRING Malena Johnson
4783: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4784: LD_ADDR_OWVAR 29
4788: PUSH
4789: LD_INT 11
4791: PUSH
4792: LD_INT 10
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4799: LD_ADDR_OWVAR 30
4803: PUSH
4804: LD_INT 1
4806: PUSH
4807: LD_INT 1
4809: PUSH
4810: LD_INT 0
4812: PUSH
4813: LD_INT 0
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4822: LD_ADDR_OWVAR 31
4826: PUSH
4827: LD_INT 1
4829: PUSH
4830: LD_INT 1
4832: PUSH
4833: LD_INT 1
4835: PUSH
4836: LD_INT 1
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: ST_TO_ADDR
// un = CreateHuman ;
4845: LD_ADDR_VAR 0 3
4849: PUSH
4850: CALL_OW 44
4854: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4855: LD_VAR 0 3
4859: PPUSH
4860: LD_INT 27
4862: PPUSH
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4870: LD_VAR 0 3
4874: PPUSH
4875: CALL_OW 87
// wait ( 0 0$1 ) ;
4879: LD_INT 35
4881: PPUSH
4882: CALL_OW 67
// DialogueOn ;
4886: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4890: LD_VAR 0 3
4894: PPUSH
4895: LD_STRING D11c-FSol3-1
4897: PPUSH
4898: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4902: LD_EXP 1
4906: PPUSH
4907: LD_STRING D11c-JMM-1
4909: PPUSH
4910: CALL_OW 88
// DialogueOff ;
4914: CALL_OW 7
// end ; if number = 6 then
4918: LD_VAR 0 1
4922: PUSH
4923: LD_INT 6
4925: EQUAL
4926: IFFALSE 5100
// begin hc_class := 1 ;
4928: LD_ADDR_OWVAR 28
4932: PUSH
4933: LD_INT 1
4935: ST_TO_ADDR
// hc_sex := sex_male ;
4936: LD_ADDR_OWVAR 27
4940: PUSH
4941: LD_INT 1
4943: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4944: LD_ADDR_OWVAR 33
4948: PUSH
4949: LD_STRING AmGalRemake
4951: ST_TO_ADDR
// hc_face_number := 1 ;
4952: LD_ADDR_OWVAR 34
4956: PUSH
4957: LD_INT 1
4959: ST_TO_ADDR
// hc_name := Charles Brown ;
4960: LD_ADDR_OWVAR 26
4964: PUSH
4965: LD_STRING Charles Brown
4967: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4968: LD_ADDR_OWVAR 29
4972: PUSH
4973: LD_INT 12
4975: PUSH
4976: LD_INT 11
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4983: LD_ADDR_OWVAR 30
4987: PUSH
4988: LD_INT 2
4990: PUSH
4991: LD_INT 0
4993: PUSH
4994: LD_INT 0
4996: PUSH
4997: LD_INT 0
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5006: LD_ADDR_OWVAR 31
5010: PUSH
5011: LD_INT 3
5013: PUSH
5014: LD_INT 0
5016: PUSH
5017: LD_INT 1
5019: PUSH
5020: LD_INT 1
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: ST_TO_ADDR
// un = CreateHuman ;
5029: LD_ADDR_VAR 0 3
5033: PUSH
5034: CALL_OW 44
5038: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5039: LD_VAR 0 3
5043: PPUSH
5044: LD_INT 28
5046: PPUSH
5047: LD_INT 1
5049: PPUSH
5050: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5054: LD_VAR 0 3
5058: PPUSH
5059: CALL_OW 87
// wait ( 0 0$1 ) ;
5063: LD_INT 35
5065: PPUSH
5066: CALL_OW 67
// DialogueOn ;
5070: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5074: LD_VAR 0 3
5078: PPUSH
5079: LD_STRING D4-Sol1-5
5081: PPUSH
5082: CALL_OW 88
// DialogueOff ;
5086: CALL_OW 7
// tempCharles = un ;
5090: LD_ADDR_EXP 13
5094: PUSH
5095: LD_VAR 0 3
5099: ST_TO_ADDR
// end ; if number = 7 then
5100: LD_VAR 0 1
5104: PUSH
5105: LD_INT 7
5107: EQUAL
5108: IFFALSE 5358
// begin hc_class := 1 ;
5110: LD_ADDR_OWVAR 28
5114: PUSH
5115: LD_INT 1
5117: ST_TO_ADDR
// hc_sex := sex_female ;
5118: LD_ADDR_OWVAR 27
5122: PUSH
5123: LD_INT 2
5125: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5126: LD_ADDR_OWVAR 33
5130: PUSH
5131: LD_STRING AmGalRemake
5133: ST_TO_ADDR
// hc_face_number := 2 ;
5134: LD_ADDR_OWVAR 34
5138: PUSH
5139: LD_INT 2
5141: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5142: LD_ADDR_OWVAR 26
5146: PUSH
5147: LD_STRING Rebecca Macdonald
5149: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5150: LD_ADDR_OWVAR 29
5154: PUSH
5155: LD_INT 10
5157: PUSH
5158: LD_INT 10
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5165: LD_ADDR_OWVAR 30
5169: PUSH
5170: LD_INT 1
5172: PUSH
5173: LD_INT 0
5175: PUSH
5176: LD_INT 0
5178: PUSH
5179: LD_INT 1
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5188: LD_ADDR_OWVAR 31
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: LD_INT 0
5198: PUSH
5199: LD_INT 0
5201: PUSH
5202: LD_INT 1
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: ST_TO_ADDR
// un = CreateHuman ;
5211: LD_ADDR_VAR 0 3
5215: PUSH
5216: CALL_OW 44
5220: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5221: LD_VAR 0 3
5225: PPUSH
5226: LD_INT 29
5228: PPUSH
5229: LD_INT 1
5231: PPUSH
5232: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5236: LD_VAR 0 3
5240: PPUSH
5241: CALL_OW 87
// wait ( 0 0$1 ) ;
5245: LD_INT 35
5247: PPUSH
5248: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5252: LD_INT 30
5254: PPUSH
5255: LD_INT 22
5257: PUSH
5258: LD_INT 3
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 70
5269: IFFALSE 5358
// begin DialogueOn ;
5271: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5275: LD_VAR 0 3
5279: PPUSH
5280: CALL_OW 250
5284: PPUSH
5285: LD_VAR 0 3
5289: PPUSH
5290: CALL_OW 251
5294: PPUSH
5295: LD_INT 1
5297: PPUSH
5298: LD_INT 15
5300: NEG
5301: PPUSH
5302: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5306: LD_VAR 0 3
5310: PPUSH
5311: CALL_OW 250
5315: PPUSH
5316: LD_VAR 0 3
5320: PPUSH
5321: CALL_OW 251
5325: PPUSH
5326: LD_INT 1
5328: PPUSH
5329: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5333: LD_VAR 0 3
5337: PPUSH
5338: LD_STRING D11a-FSol2-1
5340: PPUSH
5341: CALL_OW 88
// ComCrawl ( un ) ;
5345: LD_VAR 0 3
5349: PPUSH
5350: CALL_OW 137
// DialogueOff ;
5354: CALL_OW 7
// end ; end ; if number = 8 then
5358: LD_VAR 0 1
5362: PUSH
5363: LD_INT 8
5365: EQUAL
5366: IFFALSE 5522
// begin hc_class := 1 ;
5368: LD_ADDR_OWVAR 28
5372: PUSH
5373: LD_INT 1
5375: ST_TO_ADDR
// hc_sex := sex_female ;
5376: LD_ADDR_OWVAR 27
5380: PUSH
5381: LD_INT 2
5383: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5384: LD_ADDR_OWVAR 33
5388: PUSH
5389: LD_STRING SecondCharsGal
5391: ST_TO_ADDR
// hc_face_number := 42 ;
5392: LD_ADDR_OWVAR 34
5396: PUSH
5397: LD_INT 42
5399: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5400: LD_ADDR_OWVAR 26
5404: PUSH
5405: LD_STRING Margherite Simpson
5407: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5408: LD_ADDR_OWVAR 29
5412: PUSH
5413: LD_INT 12
5415: PUSH
5416: LD_INT 10
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5423: LD_ADDR_OWVAR 30
5427: PUSH
5428: LD_INT 1
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: LD_INT 0
5436: PUSH
5437: LD_INT 0
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5446: LD_ADDR_OWVAR 31
5450: PUSH
5451: LD_INT 1
5453: PUSH
5454: LD_INT 2
5456: PUSH
5457: LD_INT 0
5459: PUSH
5460: LD_INT 1
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: ST_TO_ADDR
// un = CreateHuman ;
5469: LD_ADDR_VAR 0 3
5473: PUSH
5474: CALL_OW 44
5478: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5479: LD_VAR 0 3
5483: PPUSH
5484: LD_INT 33
5486: PPUSH
5487: LD_INT 1
5489: PPUSH
5490: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5494: LD_VAR 0 3
5498: PPUSH
5499: CALL_OW 87
// wait ( 0 0$1 ) ;
5503: LD_INT 35
5505: PPUSH
5506: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5510: LD_VAR 0 3
5514: PPUSH
5515: LD_STRING D11e-FSol4-1
5517: PPUSH
5518: CALL_OW 88
// end ; ignoreTarget := ignoreTarget union un ;
5522: LD_ADDR_EXP 45
5526: PUSH
5527: LD_EXP 45
5531: PUSH
5532: LD_VAR 0 3
5536: UNION
5537: ST_TO_ADDR
// arrivals := arrivals union un ;
5538: LD_ADDR_EXP 46
5542: PUSH
5543: LD_EXP 46
5547: PUSH
5548: LD_VAR 0 3
5552: UNION
5553: ST_TO_ADDR
// end ;
5554: LD_VAR 0 2
5558: RET
// every 0 0$1 do var i ;
5559: GO 5561
5561: DISABLE
5562: LD_INT 0
5564: PPUSH
// begin enable ;
5565: ENABLE
// if not ignoreTarget then
5566: LD_EXP 45
5570: NOT
5571: IFFALSE 5575
// exit ;
5573: GO 5656
// for i in ignoreTarget do
5575: LD_ADDR_VAR 0 1
5579: PUSH
5580: LD_EXP 45
5584: PUSH
5585: FOR_IN
5586: IFFALSE 5654
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5588: LD_INT 22
5590: PUSH
5591: LD_INT 1
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: PUSH
5598: LD_INT 91
5600: PUSH
5601: LD_VAR 0 1
5605: PUSH
5606: LD_INT 10
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: LIST
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PPUSH
5618: CALL_OW 69
5622: PUSH
5623: LD_EXP 45
5627: DIFF
5628: PUSH
5629: LD_INT 1
5631: GREATER
5632: IFFALSE 5652
// begin ignoreTarget := ignoreTarget diff i ;
5634: LD_ADDR_EXP 45
5638: PUSH
5639: LD_EXP 45
5643: PUSH
5644: LD_VAR 0 1
5648: DIFF
5649: ST_TO_ADDR
// break ;
5650: GO 5654
// end ;
5652: GO 5585
5654: POP
5655: POP
// end ; end_of_file
5656: PPOPN 1
5658: END
// export function PrepareRussian ; var i ; begin
5659: LD_INT 0
5661: PPUSH
5662: PPUSH
// if Difficulty < 3 then
5663: LD_OWVAR 67
5667: PUSH
5668: LD_INT 3
5670: LESS
5671: IFFALSE 5688
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5673: LD_INT 130
5675: PPUSH
5676: LD_INT 81
5678: PPUSH
5679: CALL_OW 428
5683: PPUSH
5684: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5688: LD_INT 3
5690: PPUSH
5691: LD_INT 3
5693: PPUSH
5694: LD_INT 2
5696: PPUSH
5697: LD_EXP 34
5701: PPUSH
5702: LD_EXP 35
5706: PPUSH
5707: CALL_OW 12
5711: PPUSH
5712: LD_INT 2
5714: PPUSH
5715: LD_INT 4
5717: PPUSH
5718: CALL 6253 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5722: LD_INT 3
5724: PPUSH
5725: LD_INT 3
5727: PPUSH
5728: LD_INT 8
5730: PPUSH
5731: LD_EXP 34
5735: PPUSH
5736: LD_EXP 35
5740: PPUSH
5741: CALL_OW 12
5745: PPUSH
5746: LD_INT 1
5748: PPUSH
5749: LD_INT 4
5751: PPUSH
5752: CALL 6253 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5756: LD_INT 3
5758: PPUSH
5759: LD_INT 3
5761: PPUSH
5762: LD_INT 67
5764: PPUSH
5765: LD_EXP 34
5769: PPUSH
5770: LD_EXP 35
5774: PPUSH
5775: CALL_OW 12
5779: PPUSH
5780: LD_INT 1
5782: PPUSH
5783: LD_INT 2
5785: PPUSH
5786: CALL 6253 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5790: LD_INT 3
5792: PPUSH
5793: LD_INT 3
5795: PPUSH
5796: LD_INT 21
5798: PPUSH
5799: LD_EXP 34
5803: PPUSH
5804: LD_EXP 35
5808: PPUSH
5809: CALL_OW 12
5813: PPUSH
5814: LD_INT 3
5816: PPUSH
5817: LD_INT 6
5819: PPUSH
5820: CALL 6253 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5824: LD_INT 3
5826: PPUSH
5827: LD_INT 3
5829: PPUSH
5830: LD_INT 17
5832: PPUSH
5833: LD_EXP 34
5837: PPUSH
5838: LD_EXP 35
5842: PPUSH
5843: CALL_OW 12
5847: PPUSH
5848: LD_INT 3
5850: PPUSH
5851: LD_INT 6
5853: PPUSH
5854: CALL 6253 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5858: LD_INT 3
5860: PPUSH
5861: LD_INT 3
5863: PPUSH
5864: LD_INT 32
5866: PPUSH
5867: LD_EXP 34
5871: PPUSH
5872: LD_EXP 35
5876: PPUSH
5877: CALL_OW 12
5881: PPUSH
5882: LD_INT 4
5884: PPUSH
5885: LD_INT 2
5887: PPUSH
5888: CALL 6253 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5892: LD_ADDR_VAR 0 2
5896: PUSH
5897: LD_INT 22
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: LD_INT 21
5909: PUSH
5910: LD_INT 3
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PUSH
5917: LD_INT 30
5919: PUSH
5920: LD_INT 32
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: LIST
5931: PPUSH
5932: CALL_OW 69
5936: PUSH
5937: FOR_IN
5938: IFFALSE 5978
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5940: LD_INT 3
5942: PPUSH
5943: LD_INT 3
5945: PPUSH
5946: LD_VAR 0 2
5950: PPUSH
5951: LD_EXP 34
5955: PPUSH
5956: LD_EXP 35
5960: PPUSH
5961: CALL_OW 12
5965: PPUSH
5966: LD_INT 1
5968: PPUSH
5969: LD_INT 1
5971: PPUSH
5972: CALL 6253 0 6
5976: GO 5937
5978: POP
5979: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5980: LD_ADDR_VAR 0 2
5984: PUSH
5985: LD_INT 22
5987: PUSH
5988: LD_INT 3
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: LD_INT 21
5997: PUSH
5998: LD_INT 3
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PUSH
6005: LD_INT 30
6007: PUSH
6008: LD_INT 31
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: LIST
6019: PPUSH
6020: CALL_OW 69
6024: PUSH
6025: FOR_IN
6026: IFFALSE 6054
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6028: LD_EXP 34
6032: PPUSH
6033: LD_EXP 35
6037: PPUSH
6038: CALL_OW 12
6042: PPUSH
6043: LD_VAR 0 2
6047: PPUSH
6048: CALL 6363 0 2
6052: GO 6025
6054: POP
6055: POP
// end ; end_of_file
6056: LD_VAR 0 1
6060: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6061: LD_INT 0
6063: PPUSH
6064: PPUSH
// if exist_mode then
6065: LD_VAR 0 2
6069: IFFALSE 6094
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
6071: LD_ADDR_VAR 0 4
6075: PUSH
6076: LD_EXP 44
6080: PUSH
6081: LD_VAR 0 1
6085: STR
6086: PPUSH
6087: CALL_OW 34
6091: ST_TO_ADDR
// end else
6092: GO 6109
// begin unit := NewCharacter ( ident ) ;
6094: LD_ADDR_VAR 0 4
6098: PUSH
6099: LD_VAR 0 1
6103: PPUSH
6104: CALL_OW 25
6108: ST_TO_ADDR
// end ; result := unit ;
6109: LD_ADDR_VAR 0 3
6113: PUSH
6114: LD_VAR 0 4
6118: ST_TO_ADDR
// end ;
6119: LD_VAR 0 3
6123: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6124: LD_INT 0
6126: PPUSH
6127: PPUSH
6128: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6129: LD_ADDR_VAR 0 6
6133: PUSH
6134: LD_VAR 0 1
6138: PUSH
6139: LD_INT 1
6141: PPUSH
6142: LD_VAR 0 1
6146: PPUSH
6147: CALL_OW 12
6151: ARRAY
6152: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6153: LD_VAR 0 6
6157: PPUSH
6158: CALL_OW 258
6162: PUSH
6163: LD_INT 1
6165: EQUAL
6166: IFFALSE 6184
// Say ( speaker , dialogMID ) else
6168: LD_VAR 0 6
6172: PPUSH
6173: LD_VAR 0 2
6177: PPUSH
6178: CALL_OW 88
6182: GO 6198
// Say ( speaker , dialogFID ) ;
6184: LD_VAR 0 6
6188: PPUSH
6189: LD_VAR 0 3
6193: PPUSH
6194: CALL_OW 88
// result := speaker ;
6198: LD_ADDR_VAR 0 4
6202: PUSH
6203: LD_VAR 0 6
6207: ST_TO_ADDR
// end ;
6208: LD_VAR 0 4
6212: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6213: LD_INT 0
6215: PPUSH
6216: PPUSH
// for i in charactersList do
6217: LD_ADDR_VAR 0 4
6221: PUSH
6222: LD_VAR 0 1
6226: PUSH
6227: FOR_IN
6228: IFFALSE 6246
// SaveCharacters ( i , ident ) ;
6230: LD_VAR 0 4
6234: PPUSH
6235: LD_VAR 0 2
6239: PPUSH
6240: CALL_OW 38
6244: GO 6227
6246: POP
6247: POP
// end ;
6248: LD_VAR 0 3
6252: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6253: LD_INT 0
6255: PPUSH
6256: PPUSH
6257: PPUSH
6258: PPUSH
// for i = 1 to count do
6259: LD_ADDR_VAR 0 8
6263: PUSH
6264: DOUBLE
6265: LD_INT 1
6267: DEC
6268: ST_TO_ADDR
6269: LD_VAR 0 6
6273: PUSH
6274: FOR_TO
6275: IFFALSE 6356
// begin uc_side = side ;
6277: LD_ADDR_OWVAR 20
6281: PUSH
6282: LD_VAR 0 1
6286: ST_TO_ADDR
// uc_nation = nation ;
6287: LD_ADDR_OWVAR 21
6291: PUSH
6292: LD_VAR 0 2
6296: ST_TO_ADDR
// hc_gallery =  ;
6297: LD_ADDR_OWVAR 33
6301: PUSH
6302: LD_STRING 
6304: ST_TO_ADDR
// hc_name =  ;
6305: LD_ADDR_OWVAR 26
6309: PUSH
6310: LD_STRING 
6312: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6313: LD_INT 0
6315: PPUSH
6316: LD_VAR 0 5
6320: PPUSH
6321: LD_VAR 0 4
6325: PPUSH
6326: CALL_OW 380
// un = CreateHuman ;
6330: LD_ADDR_VAR 0 10
6334: PUSH
6335: CALL_OW 44
6339: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6340: LD_VAR 0 10
6344: PPUSH
6345: LD_VAR 0 3
6349: PPUSH
6350: CALL_OW 52
// end ;
6354: GO 6274
6356: POP
6357: POP
// end ;
6358: LD_VAR 0 7
6362: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6363: LD_INT 0
6365: PPUSH
6366: PPUSH
6367: PPUSH
// uc_side := GetSide ( b ) ;
6368: LD_ADDR_OWVAR 20
6372: PUSH
6373: LD_VAR 0 2
6377: PPUSH
6378: CALL_OW 255
6382: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6383: LD_ADDR_OWVAR 21
6387: PUSH
6388: LD_VAR 0 2
6392: PPUSH
6393: CALL_OW 248
6397: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6398: LD_INT 0
6400: PPUSH
6401: LD_INT 1
6403: PPUSH
6404: LD_VAR 0 1
6408: PPUSH
6409: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6413: LD_ADDR_VAR 0 5
6417: PUSH
6418: LD_VAR 0 2
6422: PPUSH
6423: CALL_OW 254
6427: PUSH
6428: LD_INT 3
6430: MINUS
6431: ST_TO_ADDR
// if dir < 0 then
6432: LD_VAR 0 5
6436: PUSH
6437: LD_INT 0
6439: LESS
6440: IFFALSE 6456
// dir := 6 + dir ;
6442: LD_ADDR_VAR 0 5
6446: PUSH
6447: LD_INT 6
6449: PUSH
6450: LD_VAR 0 5
6454: PLUS
6455: ST_TO_ADDR
// un := CreateHuman ;
6456: LD_ADDR_VAR 0 4
6460: PUSH
6461: CALL_OW 44
6465: ST_TO_ADDR
// SetDir ( un , dir ) ;
6466: LD_VAR 0 4
6470: PPUSH
6471: LD_VAR 0 5
6475: PPUSH
6476: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6480: LD_VAR 0 4
6484: PPUSH
6485: LD_VAR 0 2
6489: PPUSH
6490: CALL_OW 52
// end ;
6494: LD_VAR 0 3
6498: RET
// export function PrepareDifficulty ; begin
6499: LD_INT 0
6501: PPUSH
// if Difficulty = 1 then
6502: LD_OWVAR 67
6506: PUSH
6507: LD_INT 1
6509: EQUAL
6510: IFFALSE 6528
// begin RuSolMinLevel = 2 ;
6512: LD_ADDR_EXP 34
6516: PUSH
6517: LD_INT 2
6519: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6520: LD_ADDR_EXP 35
6524: PUSH
6525: LD_INT 3
6527: ST_TO_ADDR
// end ; if Difficulty = 2 then
6528: LD_OWVAR 67
6532: PUSH
6533: LD_INT 2
6535: EQUAL
6536: IFFALSE 6554
// begin RuSolMinLevel = 3 ;
6538: LD_ADDR_EXP 34
6542: PUSH
6543: LD_INT 3
6545: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6546: LD_ADDR_EXP 35
6550: PUSH
6551: LD_INT 5
6553: ST_TO_ADDR
// end ; if Difficulty = 3 then
6554: LD_OWVAR 67
6558: PUSH
6559: LD_INT 3
6561: EQUAL
6562: IFFALSE 6580
// begin RuSolMinLevel = 4 ;
6564: LD_ADDR_EXP 34
6568: PUSH
6569: LD_INT 4
6571: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6572: LD_ADDR_EXP 35
6576: PUSH
6577: LD_INT 6
6579: ST_TO_ADDR
// end ; end ;
6580: LD_VAR 0 1
6584: RET
// export function ShowQuery1 ; begin
6585: LD_INT 0
6587: PPUSH
// case query ( QKill ) of 1 :
6588: LD_STRING QKill
6590: PPUSH
6591: CALL_OW 97
6595: PUSH
6596: LD_INT 1
6598: DOUBLE
6599: EQUAL
6600: IFTRUE 6604
6602: GO 6615
6604: POP
// begin result = 1 ;
6605: LD_ADDR_VAR 0 1
6609: PUSH
6610: LD_INT 1
6612: ST_TO_ADDR
// end ; 2 :
6613: GO 6654
6615: LD_INT 2
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6634
6623: POP
// begin result = 2 ;
6624: LD_ADDR_VAR 0 1
6628: PUSH
6629: LD_INT 2
6631: ST_TO_ADDR
// end ; 3 :
6632: GO 6654
6634: LD_INT 3
6636: DOUBLE
6637: EQUAL
6638: IFTRUE 6642
6640: GO 6653
6642: POP
// begin result = 3 ;
6643: LD_ADDR_VAR 0 1
6647: PUSH
6648: LD_INT 3
6650: ST_TO_ADDR
// end ; end ;
6651: GO 6654
6653: POP
// end ;
6654: LD_VAR 0 1
6658: RET
// export function ShowQuery2 ; begin
6659: LD_INT 0
6661: PPUSH
// case query ( QKill2 ) of 1 :
6662: LD_STRING QKill2
6664: PPUSH
6665: CALL_OW 97
6669: PUSH
6670: LD_INT 1
6672: DOUBLE
6673: EQUAL
6674: IFTRUE 6678
6676: GO 6689
6678: POP
// begin result = 1 ;
6679: LD_ADDR_VAR 0 1
6683: PUSH
6684: LD_INT 1
6686: ST_TO_ADDR
// end ; 2 :
6687: GO 6709
6689: LD_INT 2
6691: DOUBLE
6692: EQUAL
6693: IFTRUE 6697
6695: GO 6708
6697: POP
// begin result = 2 ;
6698: LD_ADDR_VAR 0 1
6702: PUSH
6703: LD_INT 2
6705: ST_TO_ADDR
// end ; end ;
6706: GO 6709
6708: POP
// end ;
6709: LD_VAR 0 1
6713: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6714: LD_INT 0
6716: PPUSH
6717: PPUSH
6718: PPUSH
6719: PPUSH
6720: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6721: LD_ADDR_VAR 0 8
6725: PUSH
6726: LD_INT 48
6728: PUSH
6729: LD_INT 49
6731: PUSH
6732: LD_INT 50
6734: PUSH
6735: LD_INT 20
6737: PUSH
6738: LD_INT 1
6740: PUSH
6741: LD_INT 51
6743: PUSH
6744: LD_INT 52
6746: PUSH
6747: LD_INT 69
6749: PUSH
6750: LD_INT 39
6752: PUSH
6753: LD_INT 34
6755: PUSH
6756: LD_INT 40
6758: PUSH
6759: LD_INT 53
6761: PUSH
6762: LD_INT 71
6764: PUSH
6765: LD_INT 57
6767: PUSH
6768: LD_INT 58
6770: PUSH
6771: LD_INT 44
6773: PUSH
6774: LD_INT 32
6776: PUSH
6777: LD_INT 27
6779: PUSH
6780: LD_INT 23
6782: PUSH
6783: LD_INT 33
6785: PUSH
6786: LD_INT 59
6788: PUSH
6789: LD_INT 54
6791: PUSH
6792: LD_INT 55
6794: PUSH
6795: LD_INT 56
6797: PUSH
6798: LD_INT 63
6800: PUSH
6801: LD_INT 64
6803: PUSH
6804: LD_INT 65
6806: PUSH
6807: LD_INT 30
6809: PUSH
6810: LD_INT 31
6812: PUSH
6813: LD_INT 21
6815: PUSH
6816: LD_INT 22
6818: PUSH
6819: LD_INT 25
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6856: LD_ADDR_VAR 0 5
6860: PUSH
6861: DOUBLE
6862: LD_INT 1
6864: DEC
6865: ST_TO_ADDR
6866: LD_VAR 0 8
6870: PUSH
6871: FOR_TO
6872: IFFALSE 6948
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6874: LD_VAR 0 8
6878: PUSH
6879: LD_VAR 0 5
6883: ARRAY
6884: PPUSH
6885: LD_VAR 0 1
6889: PPUSH
6890: CALL_OW 321
6894: PUSH
6895: LD_INT 1
6897: EQUAL
6898: PUSH
6899: LD_VAR 0 8
6903: PUSH
6904: LD_VAR 0 5
6908: ARRAY
6909: PPUSH
6910: LD_VAR 0 3
6914: PPUSH
6915: CALL_OW 482
6919: PUSH
6920: LD_INT 1
6922: EQUAL
6923: AND
6924: IFFALSE 6946
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6926: LD_VAR 0 2
6930: PPUSH
6931: LD_VAR 0 8
6935: PUSH
6936: LD_VAR 0 5
6940: ARRAY
6941: PPUSH
6942: CALL_OW 184
6946: GO 6871
6948: POP
6949: POP
// end ;
6950: LD_VAR 0 4
6954: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6955: LD_INT 0
6957: PPUSH
6958: PPUSH
6959: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6960: LD_INT 22
6962: PUSH
6963: LD_VAR 0 1
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 21
6974: PUSH
6975: LD_INT 2
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 69
6990: PUSH
6991: LD_VAR 0 3
6995: LESSEQUAL
6996: IFFALSE 7104
// begin for i = 1 to vehCount do
6998: LD_ADDR_VAR 0 9
7002: PUSH
7003: DOUBLE
7004: LD_INT 1
7006: DEC
7007: ST_TO_ADDR
7008: LD_VAR 0 3
7012: PUSH
7013: FOR_TO
7014: IFFALSE 7102
// begin weapon = weaponTab [ i ] ;
7016: LD_ADDR_VAR 0 10
7020: PUSH
7021: LD_VAR 0 4
7025: PUSH
7026: LD_VAR 0 9
7030: ARRAY
7031: ST_TO_ADDR
// if weapon = 46 then
7032: LD_VAR 0 10
7036: PUSH
7037: LD_INT 46
7039: EQUAL
7040: IFFALSE 7071
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
7042: LD_VAR 0 2
7046: PPUSH
7047: LD_INT 24
7049: PPUSH
7050: LD_VAR 0 5
7054: PPUSH
7055: LD_VAR 0 6
7059: PPUSH
7060: LD_VAR 0 10
7064: PPUSH
7065: CALL_OW 185
// end else
7069: GO 7100
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7071: LD_VAR 0 2
7075: PPUSH
7076: LD_VAR 0 7
7080: PPUSH
7081: LD_VAR 0 5
7085: PPUSH
7086: LD_VAR 0 6
7090: PPUSH
7091: LD_VAR 0 10
7095: PPUSH
7096: CALL_OW 185
// end ; end ;
7100: GO 7013
7102: POP
7103: POP
// end ; end ;
7104: LD_VAR 0 8
7108: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7109: LD_INT 0
7111: PPUSH
7112: PPUSH
7113: PPUSH
7114: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7115: LD_ADDR_VAR 0 8
7119: PUSH
7120: LD_INT 22
7122: PUSH
7123: LD_VAR 0 1
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 21
7134: PUSH
7135: LD_INT 2
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: LD_INT 3
7144: PUSH
7145: LD_INT 24
7147: PUSH
7148: LD_INT 650
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: LIST
7163: PPUSH
7164: CALL_OW 69
7168: ST_TO_ADDR
// if damageVehicles > 0 then
7169: LD_VAR 0 8
7173: PUSH
7174: LD_INT 0
7176: GREATER
7177: IFFALSE 7198
// ComMoveXY ( damageVehicles , repX , repY ) ;
7179: LD_VAR 0 8
7183: PPUSH
7184: LD_VAR 0 3
7188: PPUSH
7189: LD_VAR 0 4
7193: PPUSH
7194: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7198: LD_VAR 0 8
7202: PPUSH
7203: LD_INT 95
7205: PUSH
7206: LD_VAR 0 2
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 3
7217: PUSH
7218: LD_INT 58
7220: PUSH
7221: EMPTY
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PPUSH
7232: CALL_OW 72
7236: PUSH
7237: LD_INT 0
7239: GREATER
7240: IFFALSE 7307
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7242: LD_ADDR_VAR 0 6
7246: PUSH
7247: LD_VAR 0 8
7251: PPUSH
7252: LD_INT 95
7254: PUSH
7255: LD_VAR 0 2
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 3
7266: PUSH
7267: LD_INT 58
7269: PUSH
7270: EMPTY
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PPUSH
7281: CALL_OW 72
7285: PUSH
7286: FOR_IN
7287: IFFALSE 7305
// ComExitVehicle ( UnitsInside ( i ) ) ;
7289: LD_VAR 0 6
7293: PPUSH
7294: CALL_OW 313
7298: PPUSH
7299: CALL_OW 121
7303: GO 7286
7305: POP
7306: POP
// end ;
7307: LD_VAR 0 5
7311: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7312: LD_INT 0
7314: PPUSH
7315: PPUSH
7316: PPUSH
7317: PPUSH
7318: PPUSH
7319: PPUSH
7320: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7321: LD_ADDR_VAR 0 8
7325: PUSH
7326: LD_INT 22
7328: PUSH
7329: LD_VAR 0 1
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: PUSH
7338: LD_INT 21
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 24
7350: PUSH
7351: LD_INT 660
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 3
7360: PUSH
7361: LD_INT 58
7363: PUSH
7364: EMPTY
7365: LIST
7366: PUSH
7367: LD_INT 2
7369: PUSH
7370: LD_INT 34
7372: PUSH
7373: LD_INT 43
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: LD_INT 34
7382: PUSH
7383: LD_INT 44
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: PUSH
7390: LD_INT 34
7392: PUSH
7393: LD_INT 46
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: LIST
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: PPUSH
7417: CALL_OW 69
7421: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7422: LD_INT 22
7424: PUSH
7425: LD_VAR 0 1
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PUSH
7434: LD_INT 21
7436: PUSH
7437: LD_INT 2
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PUSH
7444: LD_INT 24
7446: PUSH
7447: LD_INT 1000
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 3
7456: PUSH
7457: LD_INT 58
7459: PUSH
7460: EMPTY
7461: LIST
7462: PUSH
7463: LD_INT 2
7465: PUSH
7466: LD_INT 34
7468: PUSH
7469: LD_INT 43
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PUSH
7476: LD_INT 34
7478: PUSH
7479: LD_INT 44
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 34
7488: PUSH
7489: LD_INT 46
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: LIST
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 69
7517: PUSH
7518: LD_INT 5
7520: PUSH
7521: LD_INT 6
7523: PUSH
7524: LD_INT 6
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: PUSH
7532: LD_OWVAR 67
7536: ARRAY
7537: EQUAL
7538: IFFALSE 7794
// if seeEnemy = 0 then
7540: LD_VAR 0 11
7544: PUSH
7545: LD_INT 0
7547: EQUAL
7548: IFFALSE 7794
// repeat wait ( 0 0$1 ) ;
7550: LD_INT 35
7552: PPUSH
7553: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7557: LD_ADDR_VAR 0 8
7561: PUSH
7562: LD_INT 22
7564: PUSH
7565: LD_VAR 0 1
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 21
7576: PUSH
7577: LD_INT 2
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 24
7586: PUSH
7587: LD_INT 660
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 3
7596: PUSH
7597: LD_INT 58
7599: PUSH
7600: EMPTY
7601: LIST
7602: PUSH
7603: LD_INT 2
7605: PUSH
7606: LD_INT 34
7608: PUSH
7609: LD_INT 43
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 34
7618: PUSH
7619: LD_INT 44
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 34
7628: PUSH
7629: LD_INT 46
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: PPUSH
7653: CALL_OW 69
7657: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7658: LD_INT 22
7660: PUSH
7661: LD_VAR 0 1
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PUSH
7670: LD_INT 95
7672: PUSH
7673: LD_VAR 0 2
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PPUSH
7686: CALL_OW 69
7690: NOT
7691: PUSH
7692: LD_VAR 0 11
7696: PUSH
7697: LD_INT 0
7699: EQUAL
7700: AND
7701: IFFALSE 7756
// for i := 1 to wayX do
7703: LD_ADDR_VAR 0 6
7707: PUSH
7708: DOUBLE
7709: LD_INT 1
7711: DEC
7712: ST_TO_ADDR
7713: LD_VAR 0 3
7717: PUSH
7718: FOR_TO
7719: IFFALSE 7754
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7721: LD_VAR 0 8
7725: PPUSH
7726: LD_VAR 0 3
7730: PUSH
7731: LD_VAR 0 6
7735: ARRAY
7736: PPUSH
7737: LD_VAR 0 4
7741: PUSH
7742: LD_VAR 0 6
7746: ARRAY
7747: PPUSH
7748: CALL_OW 114
7752: GO 7718
7754: POP
7755: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7756: LD_INT 22
7758: PUSH
7759: LD_VAR 0 1
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: LD_INT 95
7770: PUSH
7771: LD_VAR 0 2
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PPUSH
7784: CALL_OW 69
7788: PUSH
7789: LD_INT 0
7791: GREATER
7792: IFFALSE 7550
// seeEnemy = 1 ;
7794: LD_ADDR_VAR 0 11
7798: PUSH
7799: LD_INT 1
7801: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7802: LD_INT 35
7804: PPUSH
7805: CALL_OW 67
// for j in vehiclesOK do
7809: LD_ADDR_VAR 0 7
7813: PUSH
7814: LD_VAR 0 8
7818: PUSH
7819: FOR_IN
7820: IFFALSE 8033
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7822: LD_ADDR_VAR 0 9
7826: PUSH
7827: LD_INT 81
7829: PUSH
7830: LD_VAR 0 1
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 101
7841: PUSH
7842: LD_INT 1
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PPUSH
7853: CALL_OW 69
7857: PUSH
7858: LD_EXP 45
7862: DIFF
7863: PPUSH
7864: LD_VAR 0 7
7868: PPUSH
7869: CALL_OW 74
7873: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7874: LD_ADDR_VAR 0 10
7878: PUSH
7879: LD_INT 81
7881: PUSH
7882: LD_VAR 0 1
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: LD_INT 101
7893: PUSH
7894: LD_INT 1
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: LD_INT 2
7903: PUSH
7904: LD_INT 59
7906: PUSH
7907: EMPTY
7908: LIST
7909: PUSH
7910: LD_INT 21
7912: PUSH
7913: LD_INT 1
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 21
7922: PUSH
7923: LD_INT 2
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: LIST
7940: PUSH
7941: EMPTY
7942: LIST
7943: PPUSH
7944: CALL_OW 69
7948: PUSH
7949: LD_EXP 45
7953: DIFF
7954: PPUSH
7955: LD_VAR 0 7
7959: PPUSH
7960: CALL_OW 74
7964: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7965: LD_VAR 0 7
7969: PPUSH
7970: LD_VAR 0 9
7974: PPUSH
7975: CALL_OW 296
7979: PUSH
7980: LD_INT 8
7982: PLUS
7983: PUSH
7984: LD_VAR 0 7
7988: PPUSH
7989: LD_VAR 0 10
7993: PPUSH
7994: CALL_OW 296
7998: LESS
7999: IFFALSE 8017
// ComAttackUnit ( j , target1 ) else
8001: LD_VAR 0 7
8005: PPUSH
8006: LD_VAR 0 9
8010: PPUSH
8011: CALL_OW 115
8015: GO 8031
// ComAttackUnit ( j , target2 ) ;
8017: LD_VAR 0 7
8021: PPUSH
8022: LD_VAR 0 10
8026: PPUSH
8027: CALL_OW 115
// end ;
8031: GO 7819
8033: POP
8034: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
8035: LD_INT 22
8037: PUSH
8038: LD_VAR 0 1
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 21
8049: PUSH
8050: LD_INT 2
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: PUSH
8057: LD_INT 24
8059: PUSH
8060: LD_INT 1000
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 3
8069: PUSH
8070: LD_INT 58
8072: PUSH
8073: EMPTY
8074: LIST
8075: PUSH
8076: LD_INT 2
8078: PUSH
8079: LD_INT 34
8081: PUSH
8082: LD_INT 43
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: PUSH
8089: LD_INT 34
8091: PUSH
8092: LD_INT 44
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PUSH
8099: LD_INT 34
8101: PUSH
8102: LD_INT 46
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: LIST
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: PPUSH
8126: CALL_OW 69
8130: PUSH
8131: LD_INT 0
8133: EQUAL
8134: IFFALSE 7802
// seeEnemy = 0 ;
8136: LD_ADDR_VAR 0 11
8140: PUSH
8141: LD_INT 0
8143: ST_TO_ADDR
// end ;
8144: LD_VAR 0 5
8148: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8149: LD_INT 0
8151: PPUSH
8152: PPUSH
8153: PPUSH
8154: PPUSH
8155: PPUSH
8156: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8157: LD_ADDR_VAR 0 8
8161: PUSH
8162: LD_VAR 0 2
8166: PPUSH
8167: CALL_OW 313
8171: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: LD_VAR 0 3
8181: PPUSH
8182: LD_INT 22
8184: PUSH
8185: LD_VAR 0 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 25
8196: PUSH
8197: LD_INT 2
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PUSH
8204: LD_INT 24
8206: PUSH
8207: LD_INT 750
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 3
8216: PUSH
8217: LD_INT 54
8219: PUSH
8220: EMPTY
8221: LIST
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: PPUSH
8233: CALL_OW 70
8237: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8238: LD_ADDR_VAR 0 6
8242: PUSH
8243: LD_VAR 0 3
8247: PPUSH
8248: LD_INT 22
8250: PUSH
8251: LD_VAR 0 1
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 21
8262: PUSH
8263: LD_INT 3
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: LD_INT 3
8272: PUSH
8273: LD_INT 24
8275: PUSH
8276: LD_INT 1000
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: LIST
8291: PUSH
8292: EMPTY
8293: LIST
8294: PPUSH
8295: CALL_OW 70
8299: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8300: LD_VAR 0 6
8304: NOT
8305: PUSH
8306: LD_INT 22
8308: PUSH
8309: LD_VAR 0 1
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 25
8320: PUSH
8321: LD_INT 2
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PUSH
8328: LD_INT 24
8330: PUSH
8331: LD_INT 250
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 69
8347: NOT
8348: AND
8349: IFFALSE 8353
// exit ;
8351: GO 8535
// if buildings_list > 0 and engineerOkInside then
8353: LD_VAR 0 6
8357: PUSH
8358: LD_INT 0
8360: GREATER
8361: PUSH
8362: LD_VAR 0 8
8366: AND
8367: IFFALSE 8378
// ComExitBuilding ( engineerOkInside ) ;
8369: LD_VAR 0 8
8373: PPUSH
8374: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8378: LD_VAR 0 6
8382: PUSH
8383: LD_INT 0
8385: GREATER
8386: PUSH
8387: LD_VAR 0 9
8391: PUSH
8392: LD_INT 0
8394: GREATER
8395: AND
8396: IFFALSE 8416
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8398: LD_VAR 0 9
8402: PPUSH
8403: LD_VAR 0 6
8407: PUSH
8408: LD_INT 1
8410: ARRAY
8411: PPUSH
8412: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8416: LD_VAR 0 6
8420: PUSH
8421: LD_INT 0
8423: EQUAL
8424: PUSH
8425: LD_VAR 0 4
8429: PUSH
8430: LD_INT 0
8432: EQUAL
8433: AND
8434: PUSH
8435: LD_VAR 0 9
8439: PUSH
8440: LD_INT 0
8442: GREATER
8443: AND
8444: IFFALSE 8460
// ComEnterUnit ( engineerOkOutside , building ) ;
8446: LD_VAR 0 9
8450: PPUSH
8451: LD_VAR 0 2
8455: PPUSH
8456: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8460: LD_VAR 0 9
8464: PUSH
8465: LD_INT 0
8467: GREATER
8468: PUSH
8469: LD_VAR 0 6
8473: PUSH
8474: LD_INT 0
8476: EQUAL
8477: AND
8478: PUSH
8479: LD_VAR 0 4
8483: PUSH
8484: LD_INT 0
8486: GREATER
8487: AND
8488: IFFALSE 8535
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8490: LD_VAR 0 9
8494: PPUSH
8495: LD_VAR 0 4
8499: PUSH
8500: LD_INT 1
8502: ARRAY
8503: PPUSH
8504: LD_VAR 0 4
8508: PUSH
8509: LD_INT 2
8511: ARRAY
8512: PPUSH
8513: LD_VAR 0 4
8517: PUSH
8518: LD_INT 3
8520: ARRAY
8521: PPUSH
8522: LD_VAR 0 4
8526: PUSH
8527: LD_INT 4
8529: ARRAY
8530: PPUSH
8531: CALL_OW 145
// end ;
8535: LD_VAR 0 5
8539: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8540: LD_INT 0
8542: PPUSH
8543: PPUSH
8544: PPUSH
8545: PPUSH
8546: PPUSH
8547: PPUSH
8548: PPUSH
8549: PPUSH
8550: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8551: LD_ADDR_VAR 0 6
8555: PUSH
8556: LD_INT 22
8558: PUSH
8559: LD_VAR 0 1
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_INT 25
8570: PUSH
8571: LD_INT 4
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: PUSH
8578: LD_INT 23
8580: PUSH
8581: LD_INT 2
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 24
8590: PUSH
8591: LD_INT 251
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: PPUSH
8604: CALL_OW 69
8608: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8609: LD_ADDR_VAR 0 7
8613: PUSH
8614: LD_VAR 0 3
8618: PPUSH
8619: LD_INT 22
8621: PUSH
8622: LD_VAR 0 1
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PUSH
8631: LD_INT 23
8633: PUSH
8634: LD_INT 2
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 25
8643: PUSH
8644: LD_INT 4
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: LD_INT 50
8653: PUSH
8654: EMPTY
8655: LIST
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: PPUSH
8663: CALL_OW 70
8667: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8668: LD_ADDR_VAR 0 10
8672: PUSH
8673: LD_VAR 0 3
8677: PPUSH
8678: LD_INT 22
8680: PUSH
8681: LD_VAR 0 1
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PUSH
8690: LD_INT 21
8692: PUSH
8693: LD_INT 1
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: LD_INT 3
8702: PUSH
8703: LD_INT 25
8705: PUSH
8706: LD_INT 3
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 3
8719: PUSH
8720: LD_INT 24
8722: PUSH
8723: LD_INT 750
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: PPUSH
8740: CALL_OW 70
8744: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8745: LD_ADDR_VAR 0 11
8749: PUSH
8750: LD_VAR 0 2
8754: PPUSH
8755: LD_INT 22
8757: PUSH
8758: LD_VAR 0 1
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: LD_INT 21
8769: PUSH
8770: LD_INT 1
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: LD_INT 3
8779: PUSH
8780: LD_INT 25
8782: PUSH
8783: LD_INT 3
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 3
8796: PUSH
8797: LD_INT 24
8799: PUSH
8800: LD_INT 1000
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: PPUSH
8817: CALL_OW 70
8821: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8822: LD_VAR 0 10
8826: NOT
8827: PUSH
8828: LD_VAR 0 11
8832: NOT
8833: AND
8834: PUSH
8835: LD_VAR 0 6
8839: NOT
8840: AND
8841: IFFALSE 8845
// exit ;
8843: GO 9079
// if damageUnits > 0 and sci_list > 0 then
8845: LD_VAR 0 10
8849: PUSH
8850: LD_INT 0
8852: GREATER
8853: PUSH
8854: LD_VAR 0 6
8858: PUSH
8859: LD_INT 0
8861: GREATER
8862: AND
8863: IFFALSE 8879
// ComMoveToArea ( damageUnits , healArea ) ;
8865: LD_VAR 0 10
8869: PPUSH
8870: LD_VAR 0 2
8874: PPUSH
8875: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8879: LD_VAR 0 11
8883: PUSH
8884: LD_INT 0
8886: GREATER
8887: PUSH
8888: LD_VAR 0 6
8892: PUSH
8893: LD_INT 0
8895: GREATER
8896: AND
8897: IFFALSE 8908
// ComExitBuilding ( sci_list ) ;
8899: LD_VAR 0 6
8903: PPUSH
8904: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8908: LD_VAR 0 11
8912: PUSH
8913: LD_INT 0
8915: GREATER
8916: PUSH
8917: LD_VAR 0 7
8921: PUSH
8922: LD_INT 0
8924: GREATER
8925: AND
8926: IFFALSE 8946
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8928: LD_VAR 0 7
8932: PPUSH
8933: LD_VAR 0 11
8937: PUSH
8938: LD_INT 1
8940: ARRAY
8941: PPUSH
8942: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8946: LD_VAR 0 10
8950: PUSH
8951: LD_INT 0
8953: EQUAL
8954: PUSH
8955: LD_VAR 0 11
8959: PUSH
8960: LD_INT 0
8962: EQUAL
8963: AND
8964: PUSH
8965: LD_VAR 0 7
8969: PUSH
8970: LD_INT 0
8972: GREATER
8973: AND
8974: IFFALSE 9079
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8976: LD_ADDR_VAR 0 12
8980: PUSH
8981: LD_INT 22
8983: PUSH
8984: LD_VAR 0 1
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: LD_INT 21
8995: PUSH
8996: LD_INT 3
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: PUSH
9003: LD_INT 30
9005: PUSH
9006: LD_INT 8
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: PPUSH
9018: CALL_OW 69
9022: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
9023: LD_ADDR_VAR 0 13
9027: PUSH
9028: LD_INT 1
9030: PPUSH
9031: LD_VAR 0 12
9035: PPUSH
9036: CALL_OW 12
9040: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9041: LD_VAR 0 7
9045: PPUSH
9046: LD_INT 3
9048: PUSH
9049: LD_INT 60
9051: PUSH
9052: EMPTY
9053: LIST
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PPUSH
9059: CALL_OW 72
9063: PPUSH
9064: LD_VAR 0 12
9068: PUSH
9069: LD_VAR 0 13
9073: ARRAY
9074: PPUSH
9075: CALL_OW 120
// end ; end ;
9079: LD_VAR 0 5
9083: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
9084: LD_INT 0
9086: PPUSH
9087: PPUSH
9088: PPUSH
9089: PPUSH
// tmpTab = [ ] ;
9090: LD_ADDR_VAR 0 6
9094: PUSH
9095: EMPTY
9096: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9097: LD_INT 22
9099: PUSH
9100: LD_VAR 0 1
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: LD_INT 30
9111: PUSH
9112: LD_INT 32
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PPUSH
9123: CALL_OW 69
9127: PUSH
9128: LD_INT 0
9130: GREATER
9131: IFFALSE 9214
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9133: LD_ADDR_VAR 0 4
9137: PUSH
9138: LD_INT 22
9140: PUSH
9141: LD_VAR 0 1
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 30
9152: PUSH
9153: LD_INT 32
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: PUSH
9169: FOR_IN
9170: IFFALSE 9212
// begin for j in UnitsInside ( i ) do
9172: LD_ADDR_VAR 0 5
9176: PUSH
9177: LD_VAR 0 4
9181: PPUSH
9182: CALL_OW 313
9186: PUSH
9187: FOR_IN
9188: IFFALSE 9208
// tmpTab = tmpTab ^ j ;
9190: LD_ADDR_VAR 0 6
9194: PUSH
9195: LD_VAR 0 6
9199: PUSH
9200: LD_VAR 0 5
9204: ADD
9205: ST_TO_ADDR
9206: GO 9187
9208: POP
9209: POP
// end ;
9210: GO 9169
9212: POP
9213: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9214: LD_VAR 0 6
9218: PPUSH
9219: LD_VAR 0 2
9223: PPUSH
9224: CALL_OW 250
9228: PPUSH
9229: LD_VAR 0 2
9233: PPUSH
9234: CALL_OW 251
9238: PPUSH
9239: CALL_OW 114
// end ;
9243: LD_VAR 0 3
9247: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9248: LD_INT 0
9250: PPUSH
9251: PPUSH
9252: PPUSH
9253: PPUSH
// enable ;
9254: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9255: LD_ADDR_VAR 0 7
9259: PUSH
9260: LD_VAR 0 3
9264: PPUSH
9265: CALL_OW 435
9269: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9270: LD_ADDR_VAR 0 6
9274: PUSH
9275: LD_INT 22
9277: PUSH
9278: LD_VAR 0 1
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 34
9289: PUSH
9290: LD_VAR 0 2
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PPUSH
9303: CALL_OW 69
9307: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9308: LD_VAR 0 6
9312: PUSH
9313: LD_INT 0
9315: GREATER
9316: PUSH
9317: LD_VAR 0 3
9321: PPUSH
9322: CALL_OW 435
9326: AND
9327: PUSH
9328: LD_VAR 0 7
9332: PUSH
9333: LD_INT 0
9335: GREATER
9336: AND
9337: IFFALSE 9386
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9339: LD_VAR 0 6
9343: PUSH
9344: LD_INT 1
9346: ARRAY
9347: PPUSH
9348: LD_VAR 0 7
9352: PUSH
9353: LD_INT 1
9355: ARRAY
9356: PPUSH
9357: LD_VAR 0 7
9361: PUSH
9362: LD_INT 2
9364: ARRAY
9365: PPUSH
9366: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9370: LD_VAR 0 6
9374: PUSH
9375: LD_INT 1
9377: ARRAY
9378: PPUSH
9379: LD_INT 100
9381: PPUSH
9382: CALL_OW 240
// end ; end ;
9386: LD_VAR 0 4
9390: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9391: LD_INT 0
9393: PPUSH
9394: PPUSH
9395: PPUSH
9396: PPUSH
9397: PPUSH
9398: PPUSH
9399: PPUSH
9400: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9401: LD_ADDR_VAR 0 6
9405: PUSH
9406: LD_VAR 0 2
9410: PPUSH
9411: LD_INT 22
9413: PUSH
9414: LD_VAR 0 1
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: LD_INT 56
9425: PUSH
9426: EMPTY
9427: LIST
9428: PUSH
9429: LD_INT 24
9431: PUSH
9432: LD_INT 700
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PUSH
9439: LD_INT 3
9441: PUSH
9442: LD_INT 60
9444: PUSH
9445: EMPTY
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 2
9454: PUSH
9455: LD_INT 25
9457: PUSH
9458: LD_INT 1
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 25
9467: PUSH
9468: LD_INT 5
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: LD_INT 25
9477: PUSH
9478: LD_INT 8
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: LD_INT 25
9487: PUSH
9488: LD_INT 9
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 70
9513: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9514: LD_ADDR_VAR 0 7
9518: PUSH
9519: LD_VAR 0 2
9523: PPUSH
9524: LD_INT 22
9526: PUSH
9527: LD_VAR 0 1
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PUSH
9536: LD_INT 30
9538: PUSH
9539: LD_INT 32
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 58
9548: PUSH
9549: EMPTY
9550: LIST
9551: PUSH
9552: LD_INT 24
9554: PUSH
9555: LD_INT 251
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: PPUSH
9568: CALL_OW 70
9572: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9573: LD_ADDR_VAR 0 9
9577: PUSH
9578: LD_VAR 0 2
9582: PPUSH
9583: LD_INT 22
9585: PUSH
9586: LD_VAR 0 1
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 2
9597: PUSH
9598: LD_INT 30
9600: PUSH
9601: LD_INT 4
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 30
9610: PUSH
9611: LD_INT 5
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: LIST
9622: PUSH
9623: LD_INT 24
9625: PUSH
9626: LD_INT 251
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: PPUSH
9638: CALL_OW 70
9642: ST_TO_ADDR
// if barrackList > 0 then
9643: LD_VAR 0 9
9647: PUSH
9648: LD_INT 0
9650: GREATER
9651: IFFALSE 9799
// begin if turretList = 0 then
9653: LD_VAR 0 7
9657: PUSH
9658: LD_INT 0
9660: EQUAL
9661: IFFALSE 9703
// begin if soldiers_list > 0 then
9663: LD_VAR 0 6
9667: PUSH
9668: LD_INT 0
9670: GREATER
9671: IFFALSE 9701
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9673: LD_VAR 0 6
9677: PPUSH
9678: LD_VAR 0 9
9682: PUSH
9683: LD_INT 1
9685: PPUSH
9686: LD_VAR 0 9
9690: PPUSH
9691: CALL_OW 12
9695: ARRAY
9696: PPUSH
9697: CALL_OW 120
// end else
9701: GO 9799
// begin for i in barrackList do
9703: LD_ADDR_VAR 0 4
9707: PUSH
9708: LD_VAR 0 9
9712: PUSH
9713: FOR_IN
9714: IFFALSE 9797
// begin insideUnits = UnitsInside ( i ) ;
9716: LD_ADDR_VAR 0 10
9720: PUSH
9721: LD_VAR 0 4
9725: PPUSH
9726: CALL_OW 313
9730: ST_TO_ADDR
// if insideUnits > 0 then
9731: LD_VAR 0 10
9735: PUSH
9736: LD_INT 0
9738: GREATER
9739: IFFALSE 9763
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9741: LD_VAR 0 10
9745: PUSH
9746: LD_INT 1
9748: ARRAY
9749: PPUSH
9750: LD_VAR 0 7
9754: PUSH
9755: LD_INT 1
9757: ARRAY
9758: PPUSH
9759: CALL_OW 120
// if soldiers_list > 0 then
9763: LD_VAR 0 6
9767: PUSH
9768: LD_INT 0
9770: GREATER
9771: IFFALSE 9795
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9773: LD_VAR 0 6
9777: PUSH
9778: LD_INT 1
9780: ARRAY
9781: PPUSH
9782: LD_VAR 0 7
9786: PUSH
9787: LD_INT 1
9789: ARRAY
9790: PPUSH
9791: CALL_OW 120
// end ;
9795: GO 9713
9797: POP
9798: POP
// end ; end ; end ;
9799: LD_VAR 0 3
9803: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
9808: PPUSH
9809: PPUSH
9810: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9811: LD_ADDR_VAR 0 6
9815: PUSH
9816: LD_INT 22
9818: PUSH
9819: LD_VAR 0 1
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 2
9830: PUSH
9831: LD_INT 30
9833: PUSH
9834: LD_INT 31
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 30
9843: PUSH
9844: LD_INT 32
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 33
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 30
9863: PUSH
9864: LD_INT 4
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 30
9873: PUSH
9874: LD_INT 5
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PPUSH
9893: CALL_OW 69
9897: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9898: LD_ADDR_VAR 0 7
9902: PUSH
9903: LD_INT 22
9905: PUSH
9906: LD_VAR 0 2
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PUSH
9915: LD_INT 21
9917: PUSH
9918: LD_INT 3
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 58
9927: PUSH
9928: EMPTY
9929: LIST
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: LIST
9935: PPUSH
9936: CALL_OW 69
9940: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9941: LD_VAR 0 6
9945: PUSH
9946: LD_INT 0
9948: GREATER
9949: PUSH
9950: LD_VAR 0 7
9954: PUSH
9955: LD_INT 0
9957: GREATER
9958: AND
9959: IFFALSE 10029
// begin for i in turretsList do
9961: LD_ADDR_VAR 0 4
9965: PUSH
9966: LD_VAR 0 6
9970: PUSH
9971: FOR_IN
9972: IFFALSE 10027
// begin for j in enemyBuildings do
9974: LD_ADDR_VAR 0 5
9978: PUSH
9979: LD_VAR 0 7
9983: PUSH
9984: FOR_IN
9985: IFFALSE 10023
// begin if GetDistUnits ( i , j ) < 20 then
9987: LD_VAR 0 4
9991: PPUSH
9992: LD_VAR 0 5
9996: PPUSH
9997: CALL_OW 296
10001: PUSH
10002: LD_INT 20
10004: LESS
10005: IFFALSE 10021
// begin ComAttackUnit ( i , j ) ;
10007: LD_VAR 0 4
10011: PPUSH
10012: LD_VAR 0 5
10016: PPUSH
10017: CALL_OW 115
// end ; end ;
10021: GO 9984
10023: POP
10024: POP
// end ;
10025: GO 9971
10027: POP
10028: POP
// end ; end ;
10029: LD_VAR 0 3
10033: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10034: LD_INT 0
10036: PPUSH
10037: PPUSH
10038: PPUSH
10039: PPUSH
10040: PPUSH
10041: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10042: LD_ADDR_VAR 0 8
10046: PUSH
10047: LD_INT 22
10049: PUSH
10050: LD_VAR 0 1
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: LD_INT 21
10061: PUSH
10062: LD_INT 2
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: LD_INT 34
10071: PUSH
10072: LD_INT 52
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: LIST
10083: PPUSH
10084: CALL_OW 69
10088: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10089: LD_ADDR_VAR 0 9
10093: PUSH
10094: LD_INT 22
10096: PUSH
10097: LD_VAR 0 1
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 3
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: LD_INT 3
10118: PUSH
10119: LD_INT 24
10121: PUSH
10122: LD_INT 1000
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: PPUSH
10141: CALL_OW 69
10145: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10146: LD_VAR 0 9
10150: PUSH
10151: LD_INT 0
10153: GREATER
10154: PUSH
10155: LD_VAR 0 8
10159: PPUSH
10160: LD_INT 24
10162: PUSH
10163: LD_INT 750
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PPUSH
10170: CALL_OW 72
10174: PUSH
10175: LD_INT 0
10177: GREATER
10178: AND
10179: IFFALSE 10214
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10181: LD_VAR 0 8
10185: PPUSH
10186: LD_INT 24
10188: PUSH
10189: LD_INT 750
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: PPUSH
10201: LD_VAR 0 9
10205: PUSH
10206: LD_INT 1
10208: ARRAY
10209: PPUSH
10210: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10214: LD_VAR 0 8
10218: PPUSH
10219: LD_INT 3
10221: PUSH
10222: LD_INT 24
10224: PUSH
10225: LD_INT 750
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PPUSH
10236: CALL_OW 72
10240: PUSH
10241: LD_INT 0
10243: GREATER
10244: IFFALSE 10282
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10246: LD_VAR 0 8
10250: PPUSH
10251: LD_INT 3
10253: PUSH
10254: LD_INT 24
10256: PUSH
10257: LD_INT 750
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PPUSH
10268: CALL_OW 72
10272: PPUSH
10273: LD_VAR 0 2
10277: PPUSH
10278: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10282: LD_VAR 0 8
10286: PUSH
10287: LD_INT 0
10289: GREATER
10290: PUSH
10291: LD_VAR 0 9
10295: PUSH
10296: LD_INT 0
10298: EQUAL
10299: AND
10300: PUSH
10301: LD_VAR 0 3
10305: PUSH
10306: LD_INT 0
10308: GREATER
10309: AND
10310: IFFALSE 10357
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10312: LD_VAR 0 8
10316: PPUSH
10317: LD_VAR 0 3
10321: PUSH
10322: LD_INT 1
10324: ARRAY
10325: PPUSH
10326: LD_VAR 0 3
10330: PUSH
10331: LD_INT 2
10333: ARRAY
10334: PPUSH
10335: LD_VAR 0 3
10339: PUSH
10340: LD_INT 3
10342: ARRAY
10343: PPUSH
10344: LD_VAR 0 3
10348: PUSH
10349: LD_INT 4
10351: ARRAY
10352: PPUSH
10353: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10357: LD_VAR 0 2
10361: PPUSH
10362: LD_INT 22
10364: PUSH
10365: LD_VAR 0 1
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 21
10376: PUSH
10377: LD_INT 2
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 34
10386: PUSH
10387: LD_INT 52
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 3
10396: PUSH
10397: LD_INT 24
10399: PUSH
10400: LD_INT 750
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: PPUSH
10417: CALL_OW 70
10421: PUSH
10422: LD_INT 0
10424: GREATER
10425: IFFALSE 10627
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10427: LD_ADDR_VAR 0 5
10431: PUSH
10432: LD_VAR 0 2
10436: PPUSH
10437: LD_INT 22
10439: PUSH
10440: LD_VAR 0 1
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 21
10451: PUSH
10452: LD_INT 2
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 34
10461: PUSH
10462: LD_INT 52
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: LD_INT 3
10471: PUSH
10472: LD_INT 24
10474: PUSH
10475: LD_INT 750
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: PPUSH
10492: CALL_OW 70
10496: PUSH
10497: FOR_IN
10498: IFFALSE 10625
// begin mechTmp = UnitsInside ( i ) ;
10500: LD_ADDR_VAR 0 6
10504: PUSH
10505: LD_VAR 0 5
10509: PPUSH
10510: CALL_OW 313
10514: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10515: LD_VAR 0 6
10519: PPUSH
10520: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10524: LD_VAR 0 6
10528: PPUSH
10529: LD_VAR 0 7
10533: PPUSH
10534: CALL_OW 189
// wait ( 0 0$2 ) ;
10538: LD_INT 70
10540: PPUSH
10541: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10545: LD_VAR 0 6
10549: PPUSH
10550: LD_VAR 0 2
10554: PPUSH
10555: LD_INT 22
10557: PUSH
10558: LD_VAR 0 1
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 21
10569: PUSH
10570: LD_INT 2
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PUSH
10577: LD_INT 34
10579: PUSH
10580: LD_INT 52
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: PUSH
10587: LD_INT 24
10589: PUSH
10590: LD_INT 1000
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: LD_INT 58
10599: PUSH
10600: EMPTY
10601: LIST
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: PPUSH
10610: CALL_OW 70
10614: PUSH
10615: LD_INT 1
10617: ARRAY
10618: PPUSH
10619: CALL_OW 180
// end ;
10623: GO 10497
10625: POP
10626: POP
// end ; end ;
10627: LD_VAR 0 4
10631: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10632: LD_INT 0
10634: PPUSH
10635: PPUSH
10636: PPUSH
10637: PPUSH
10638: PPUSH
10639: PPUSH
10640: PPUSH
10641: PPUSH
10642: PPUSH
10643: PPUSH
10644: PPUSH
// for i = 1 to medicCount do
10645: LD_ADDR_VAR 0 14
10649: PUSH
10650: DOUBLE
10651: LD_INT 1
10653: DEC
10654: ST_TO_ADDR
10655: LD_VAR 0 7
10659: PUSH
10660: FOR_TO
10661: IFFALSE 10743
// begin uc_side = side ;
10663: LD_ADDR_OWVAR 20
10667: PUSH
10668: LD_VAR 0 1
10672: ST_TO_ADDR
// uc_nation = nation ;
10673: LD_ADDR_OWVAR 21
10677: PUSH
10678: LD_VAR 0 2
10682: ST_TO_ADDR
// hc_name =  ;
10683: LD_ADDR_OWVAR 26
10687: PUSH
10688: LD_STRING 
10690: ST_TO_ADDR
// hc_gallery =  ;
10691: LD_ADDR_OWVAR 33
10695: PUSH
10696: LD_STRING 
10698: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10699: LD_INT 0
10701: PPUSH
10702: LD_INT 4
10704: PPUSH
10705: LD_VAR 0 8
10709: PPUSH
10710: CALL_OW 380
// un = CreateHuman ;
10714: LD_ADDR_VAR 0 16
10718: PUSH
10719: CALL_OW 44
10723: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10724: LD_VAR 0 16
10728: PPUSH
10729: LD_VAR 0 9
10733: PPUSH
10734: LD_INT 0
10736: PPUSH
10737: CALL_OW 49
// end ;
10741: GO 10660
10743: POP
10744: POP
// for i = 1 to soldierCount do
10745: LD_ADDR_VAR 0 14
10749: PUSH
10750: DOUBLE
10751: LD_INT 1
10753: DEC
10754: ST_TO_ADDR
10755: LD_VAR 0 3
10759: PUSH
10760: FOR_TO
10761: IFFALSE 10843
// begin uc_side = side ;
10763: LD_ADDR_OWVAR 20
10767: PUSH
10768: LD_VAR 0 1
10772: ST_TO_ADDR
// uc_nation = nation ;
10773: LD_ADDR_OWVAR 21
10777: PUSH
10778: LD_VAR 0 2
10782: ST_TO_ADDR
// hc_name =  ;
10783: LD_ADDR_OWVAR 26
10787: PUSH
10788: LD_STRING 
10790: ST_TO_ADDR
// hc_gallery =  ;
10791: LD_ADDR_OWVAR 33
10795: PUSH
10796: LD_STRING 
10798: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10799: LD_INT 0
10801: PPUSH
10802: LD_INT 1
10804: PPUSH
10805: LD_VAR 0 8
10809: PPUSH
10810: CALL_OW 380
// un = CreateHuman ;
10814: LD_ADDR_VAR 0 16
10818: PUSH
10819: CALL_OW 44
10823: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10824: LD_VAR 0 16
10828: PPUSH
10829: LD_VAR 0 9
10833: PPUSH
10834: LD_INT 0
10836: PPUSH
10837: CALL_OW 49
// end ;
10841: GO 10760
10843: POP
10844: POP
// for i = 1 to sniperCount do
10845: LD_ADDR_VAR 0 14
10849: PUSH
10850: DOUBLE
10851: LD_INT 1
10853: DEC
10854: ST_TO_ADDR
10855: LD_VAR 0 4
10859: PUSH
10860: FOR_TO
10861: IFFALSE 10943
// begin uc_side = side ;
10863: LD_ADDR_OWVAR 20
10867: PUSH
10868: LD_VAR 0 1
10872: ST_TO_ADDR
// uc_nation = nation ;
10873: LD_ADDR_OWVAR 21
10877: PUSH
10878: LD_VAR 0 2
10882: ST_TO_ADDR
// hc_name =  ;
10883: LD_ADDR_OWVAR 26
10887: PUSH
10888: LD_STRING 
10890: ST_TO_ADDR
// hc_gallery =  ;
10891: LD_ADDR_OWVAR 33
10895: PUSH
10896: LD_STRING 
10898: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10899: LD_INT 0
10901: PPUSH
10902: LD_INT 5
10904: PPUSH
10905: LD_VAR 0 8
10909: PPUSH
10910: CALL_OW 380
// un = CreateHuman ;
10914: LD_ADDR_VAR 0 16
10918: PUSH
10919: CALL_OW 44
10923: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10924: LD_VAR 0 16
10928: PPUSH
10929: LD_VAR 0 9
10933: PPUSH
10934: LD_INT 0
10936: PPUSH
10937: CALL_OW 49
// end ;
10941: GO 10860
10943: POP
10944: POP
// for i = 1 to bazookCount do
10945: LD_ADDR_VAR 0 14
10949: PUSH
10950: DOUBLE
10951: LD_INT 1
10953: DEC
10954: ST_TO_ADDR
10955: LD_VAR 0 5
10959: PUSH
10960: FOR_TO
10961: IFFALSE 11043
// begin uc_side = side ;
10963: LD_ADDR_OWVAR 20
10967: PUSH
10968: LD_VAR 0 1
10972: ST_TO_ADDR
// uc_nation = nation ;
10973: LD_ADDR_OWVAR 21
10977: PUSH
10978: LD_VAR 0 2
10982: ST_TO_ADDR
// hc_name =  ;
10983: LD_ADDR_OWVAR 26
10987: PUSH
10988: LD_STRING 
10990: ST_TO_ADDR
// hc_gallery =  ;
10991: LD_ADDR_OWVAR 33
10995: PUSH
10996: LD_STRING 
10998: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10999: LD_INT 0
11001: PPUSH
11002: LD_INT 9
11004: PPUSH
11005: LD_VAR 0 8
11009: PPUSH
11010: CALL_OW 380
// un = CreateHuman ;
11014: LD_ADDR_VAR 0 16
11018: PUSH
11019: CALL_OW 44
11023: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11024: LD_VAR 0 16
11028: PPUSH
11029: LD_VAR 0 9
11033: PPUSH
11034: LD_INT 0
11036: PPUSH
11037: CALL_OW 49
// end ;
11041: GO 10960
11043: POP
11044: POP
// for i = 1 to mortalCount do
11045: LD_ADDR_VAR 0 14
11049: PUSH
11050: DOUBLE
11051: LD_INT 1
11053: DEC
11054: ST_TO_ADDR
11055: LD_VAR 0 6
11059: PUSH
11060: FOR_TO
11061: IFFALSE 11143
// begin uc_side = side ;
11063: LD_ADDR_OWVAR 20
11067: PUSH
11068: LD_VAR 0 1
11072: ST_TO_ADDR
// uc_nation = nation ;
11073: LD_ADDR_OWVAR 21
11077: PUSH
11078: LD_VAR 0 2
11082: ST_TO_ADDR
// hc_name =  ;
11083: LD_ADDR_OWVAR 26
11087: PUSH
11088: LD_STRING 
11090: ST_TO_ADDR
// hc_gallery =  ;
11091: LD_ADDR_OWVAR 33
11095: PUSH
11096: LD_STRING 
11098: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11099: LD_INT 0
11101: PPUSH
11102: LD_INT 8
11104: PPUSH
11105: LD_VAR 0 8
11109: PPUSH
11110: CALL_OW 380
// un = CreateHuman ;
11114: LD_ADDR_VAR 0 16
11118: PUSH
11119: CALL_OW 44
11123: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11124: LD_VAR 0 16
11128: PPUSH
11129: LD_VAR 0 9
11133: PPUSH
11134: LD_INT 0
11136: PPUSH
11137: CALL_OW 49
// end ;
11141: GO 11060
11143: POP
11144: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11145: LD_ADDR_VAR 0 19
11149: PUSH
11150: LD_INT 22
11152: PUSH
11153: LD_VAR 0 1
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: LD_INT 2
11164: PUSH
11165: LD_INT 25
11167: PUSH
11168: LD_INT 1
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: LD_INT 25
11177: PUSH
11178: LD_INT 5
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: LD_INT 25
11187: PUSH
11188: LD_INT 8
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 25
11197: PUSH
11198: LD_INT 9
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PPUSH
11216: CALL_OW 69
11220: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11221: LD_ADDR_VAR 0 18
11225: PUSH
11226: LD_INT 22
11228: PUSH
11229: LD_VAR 0 1
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 25
11240: PUSH
11241: LD_INT 4
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PPUSH
11252: CALL_OW 69
11256: ST_TO_ADDR
// for i in medic_list do
11257: LD_ADDR_VAR 0 14
11261: PUSH
11262: LD_VAR 0 18
11266: PUSH
11267: FOR_IN
11268: IFFALSE 11286
// ComMoveToArea ( i , healArea ) ;
11270: LD_VAR 0 14
11274: PPUSH
11275: LD_VAR 0 10
11279: PPUSH
11280: CALL_OW 113
11284: GO 11267
11286: POP
11287: POP
// if strategy = 1 then
11288: LD_VAR 0 12
11292: PUSH
11293: LD_INT 1
11295: EQUAL
11296: IFFALSE 12013
// begin repeat wait ( 0 0$3 ) ;
11298: LD_INT 105
11300: PPUSH
11301: CALL_OW 67
// for i in soldiersOK_list do
11305: LD_ADDR_VAR 0 14
11309: PUSH
11310: LD_VAR 0 19
11314: PUSH
11315: FOR_IN
11316: IFFALSE 11350
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11318: LD_VAR 0 14
11322: PPUSH
11323: LD_INT 80
11325: PPUSH
11326: LD_INT 109
11328: PPUSH
11329: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11333: LD_VAR 0 14
11337: PPUSH
11338: LD_INT 39
11340: PPUSH
11341: LD_INT 49
11343: PPUSH
11344: CALL_OW 174
// end ;
11348: GO 11315
11350: POP
11351: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11352: LD_INT 13
11354: PPUSH
11355: LD_INT 22
11357: PUSH
11358: LD_VAR 0 1
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PPUSH
11367: CALL_OW 70
11371: PUSH
11372: LD_INT 0
11374: GREATER
11375: IFFALSE 11298
// repeat wait ( 0 0$1 ) ;
11377: LD_INT 35
11379: PPUSH
11380: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11384: LD_ADDR_VAR 0 17
11388: PUSH
11389: LD_INT 22
11391: PUSH
11392: LD_VAR 0 1
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: LD_INT 1
11403: PUSH
11404: LD_INT 3
11406: PUSH
11407: LD_INT 24
11409: PUSH
11410: LD_INT 550
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PUSH
11421: LD_INT 24
11423: PUSH
11424: LD_INT 250
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PPUSH
11440: CALL_OW 69
11444: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11445: LD_ADDR_VAR 0 19
11449: PUSH
11450: LD_INT 22
11452: PUSH
11453: LD_VAR 0 1
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 2
11464: PUSH
11465: LD_INT 25
11467: PUSH
11468: LD_INT 1
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 25
11477: PUSH
11478: LD_INT 5
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 25
11487: PUSH
11488: LD_INT 8
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: PUSH
11495: LD_INT 25
11497: PUSH
11498: LD_INT 9
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 24
11514: PUSH
11515: LD_INT 1000
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: PPUSH
11527: CALL_OW 69
11531: ST_TO_ADDR
// if medicCount > 0 then
11532: LD_VAR 0 7
11536: PUSH
11537: LD_INT 0
11539: GREATER
11540: IFFALSE 11614
// begin if damageUnit_list > 0 then
11542: LD_VAR 0 17
11546: PUSH
11547: LD_INT 0
11549: GREATER
11550: IFFALSE 11614
// begin for i in damageUnit_list do
11552: LD_ADDR_VAR 0 14
11556: PUSH
11557: LD_VAR 0 17
11561: PUSH
11562: FOR_IN
11563: IFFALSE 11612
// begin ComMoveToArea ( i , healArea ) ;
11565: LD_VAR 0 14
11569: PPUSH
11570: LD_VAR 0 10
11574: PPUSH
11575: CALL_OW 113
// for j in medic_list do
11579: LD_ADDR_VAR 0 15
11583: PUSH
11584: LD_VAR 0 18
11588: PUSH
11589: FOR_IN
11590: IFFALSE 11608
// AddComHeal ( j , i ) ;
11592: LD_VAR 0 15
11596: PPUSH
11597: LD_VAR 0 14
11601: PPUSH
11602: CALL_OW 188
11606: GO 11589
11608: POP
11609: POP
// end ;
11610: GO 11562
11612: POP
11613: POP
// end ; end ; for i in soldiersOK_list do
11614: LD_ADDR_VAR 0 14
11618: PUSH
11619: LD_VAR 0 19
11623: PUSH
11624: FOR_IN
11625: IFFALSE 11807
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11627: LD_ADDR_VAR 0 22
11631: PUSH
11632: LD_INT 22
11634: PUSH
11635: LD_VAR 0 11
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PPUSH
11644: CALL_OW 69
11648: PUSH
11649: LD_EXP 45
11653: DIFF
11654: PPUSH
11655: LD_VAR 0 14
11659: PPUSH
11660: CALL_OW 74
11664: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11665: LD_ADDR_VAR 0 23
11669: PUSH
11670: LD_INT 22
11672: PUSH
11673: LD_VAR 0 11
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: LD_INT 2
11684: PUSH
11685: LD_INT 59
11687: PUSH
11688: EMPTY
11689: LIST
11690: PUSH
11691: LD_INT 21
11693: PUSH
11694: LD_INT 1
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 21
11703: PUSH
11704: LD_INT 2
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: PPUSH
11724: CALL_OW 69
11728: PPUSH
11729: LD_VAR 0 14
11733: PPUSH
11734: CALL_OW 74
11738: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11739: LD_VAR 0 14
11743: PPUSH
11744: LD_VAR 0 22
11748: PPUSH
11749: CALL_OW 296
11753: PUSH
11754: LD_INT 8
11756: PLUS
11757: PUSH
11758: LD_VAR 0 14
11762: PPUSH
11763: LD_VAR 0 23
11767: PPUSH
11768: CALL_OW 296
11772: LESS
11773: IFFALSE 11791
// begin ComAttackUnit ( i , target1 ) ;
11775: LD_VAR 0 14
11779: PPUSH
11780: LD_VAR 0 22
11784: PPUSH
11785: CALL_OW 115
// end else
11789: GO 11805
// begin ComAttackUnit ( i , target2 ) ;
11791: LD_VAR 0 14
11795: PPUSH
11796: LD_VAR 0 23
11800: PPUSH
11801: CALL_OW 115
// end ; end ;
11805: GO 11624
11807: POP
11808: POP
// for i in soldiersOK_list do
11809: LD_ADDR_VAR 0 14
11813: PUSH
11814: LD_VAR 0 19
11818: PUSH
11819: FOR_IN
11820: IFFALSE 12002
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11822: LD_ADDR_VAR 0 22
11826: PUSH
11827: LD_INT 22
11829: PUSH
11830: LD_VAR 0 11
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PPUSH
11839: CALL_OW 69
11843: PUSH
11844: LD_EXP 45
11848: DIFF
11849: PPUSH
11850: LD_VAR 0 14
11854: PPUSH
11855: CALL_OW 74
11859: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11860: LD_ADDR_VAR 0 23
11864: PUSH
11865: LD_INT 22
11867: PUSH
11868: LD_VAR 0 11
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 2
11879: PUSH
11880: LD_INT 59
11882: PUSH
11883: EMPTY
11884: LIST
11885: PUSH
11886: LD_INT 21
11888: PUSH
11889: LD_INT 1
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 21
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: EMPTY
11917: LIST
11918: PPUSH
11919: CALL_OW 69
11923: PPUSH
11924: LD_VAR 0 14
11928: PPUSH
11929: CALL_OW 74
11933: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11934: LD_VAR 0 14
11938: PPUSH
11939: LD_VAR 0 22
11943: PPUSH
11944: CALL_OW 296
11948: PUSH
11949: LD_INT 8
11951: PLUS
11952: PUSH
11953: LD_VAR 0 14
11957: PPUSH
11958: LD_VAR 0 23
11962: PPUSH
11963: CALL_OW 296
11967: LESS
11968: IFFALSE 11986
// begin ComAttackUnit ( i , target1 ) ;
11970: LD_VAR 0 14
11974: PPUSH
11975: LD_VAR 0 22
11979: PPUSH
11980: CALL_OW 115
// end else
11984: GO 12000
// begin ComAttackUnit ( i , target2 ) ;
11986: LD_VAR 0 14
11990: PPUSH
11991: LD_VAR 0 23
11995: PPUSH
11996: CALL_OW 115
// end ; end ;
12000: GO 11819
12002: POP
12003: POP
// until soldiersOK_list = [ ] ;
12004: LD_VAR 0 19
12008: PUSH
12009: EMPTY
12010: EQUAL
12011: IFFALSE 11377
// end ; if strategy = 2 then
12013: LD_VAR 0 12
12017: PUSH
12018: LD_INT 2
12020: EQUAL
12021: IFFALSE 12726
// begin repeat wait ( 0 0$1 ) ;
12023: LD_INT 35
12025: PPUSH
12026: CALL_OW 67
// for i in soldiersOK_list do
12030: LD_ADDR_VAR 0 14
12034: PUSH
12035: LD_VAR 0 19
12039: PUSH
12040: FOR_IN
12041: IFFALSE 12075
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
12043: LD_VAR 0 14
12047: PPUSH
12048: LD_INT 117
12050: PPUSH
12051: LD_INT 97
12053: PPUSH
12054: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
12058: LD_VAR 0 14
12062: PPUSH
12063: LD_INT 94
12065: PPUSH
12066: LD_INT 50
12068: PPUSH
12069: CALL_OW 174
// end ;
12073: GO 12040
12075: POP
12076: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
12077: LD_INT 14
12079: PPUSH
12080: LD_INT 22
12082: PUSH
12083: LD_VAR 0 1
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PPUSH
12092: CALL_OW 70
12096: PUSH
12097: LD_INT 0
12099: GREATER
12100: IFFALSE 12023
// repeat wait ( 0 0$3 ) ;
12102: LD_INT 105
12104: PPUSH
12105: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12109: LD_ADDR_VAR 0 17
12113: PUSH
12114: LD_INT 22
12116: PUSH
12117: LD_VAR 0 1
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 1
12128: PUSH
12129: LD_INT 3
12131: PUSH
12132: LD_INT 24
12134: PUSH
12135: LD_INT 550
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 24
12148: PUSH
12149: LD_INT 250
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: LIST
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PPUSH
12165: CALL_OW 69
12169: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12170: LD_ADDR_VAR 0 19
12174: PUSH
12175: LD_INT 22
12177: PUSH
12178: LD_VAR 0 1
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 2
12189: PUSH
12190: LD_INT 25
12192: PUSH
12193: LD_INT 1
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 25
12202: PUSH
12203: LD_INT 5
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 25
12212: PUSH
12213: LD_INT 8
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 25
12222: PUSH
12223: LD_INT 9
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: PUSH
12237: LD_INT 24
12239: PUSH
12240: LD_INT 1000
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: LIST
12251: PPUSH
12252: CALL_OW 69
12256: ST_TO_ADDR
// if medicCount > 0 then
12257: LD_VAR 0 7
12261: PUSH
12262: LD_INT 0
12264: GREATER
12265: IFFALSE 12339
// begin if damageUnit_list > 0 then
12267: LD_VAR 0 17
12271: PUSH
12272: LD_INT 0
12274: GREATER
12275: IFFALSE 12339
// begin for i in damageUnit_list do
12277: LD_ADDR_VAR 0 14
12281: PUSH
12282: LD_VAR 0 17
12286: PUSH
12287: FOR_IN
12288: IFFALSE 12337
// begin ComMoveToArea ( i , healArea ) ;
12290: LD_VAR 0 14
12294: PPUSH
12295: LD_VAR 0 10
12299: PPUSH
12300: CALL_OW 113
// for j in medic_list do
12304: LD_ADDR_VAR 0 15
12308: PUSH
12309: LD_VAR 0 18
12313: PUSH
12314: FOR_IN
12315: IFFALSE 12333
// AddComHeal ( j , i ) ;
12317: LD_VAR 0 15
12321: PPUSH
12322: LD_VAR 0 14
12326: PPUSH
12327: CALL_OW 188
12331: GO 12314
12333: POP
12334: POP
// end ;
12335: GO 12287
12337: POP
12338: POP
// end ; end ; for i in soldiersOK_list do
12339: LD_ADDR_VAR 0 14
12343: PUSH
12344: LD_VAR 0 19
12348: PUSH
12349: FOR_IN
12350: IFFALSE 12526
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12352: LD_ADDR_VAR 0 22
12356: PUSH
12357: LD_INT 22
12359: PUSH
12360: LD_VAR 0 11
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PPUSH
12369: CALL_OW 69
12373: PPUSH
12374: LD_VAR 0 14
12378: PPUSH
12379: CALL_OW 74
12383: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12384: LD_ADDR_VAR 0 23
12388: PUSH
12389: LD_INT 22
12391: PUSH
12392: LD_VAR 0 11
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 2
12403: PUSH
12404: LD_INT 59
12406: PUSH
12407: EMPTY
12408: LIST
12409: PUSH
12410: LD_INT 21
12412: PUSH
12413: LD_INT 1
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 21
12422: PUSH
12423: LD_INT 2
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: PPUSH
12443: CALL_OW 69
12447: PPUSH
12448: LD_VAR 0 14
12452: PPUSH
12453: CALL_OW 74
12457: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12458: LD_VAR 0 14
12462: PPUSH
12463: LD_VAR 0 22
12467: PPUSH
12468: CALL_OW 296
12472: PUSH
12473: LD_INT 8
12475: PLUS
12476: PUSH
12477: LD_VAR 0 14
12481: PPUSH
12482: LD_VAR 0 23
12486: PPUSH
12487: CALL_OW 296
12491: LESS
12492: IFFALSE 12510
// begin ComAttackUnit ( i , target1 ) ;
12494: LD_VAR 0 14
12498: PPUSH
12499: LD_VAR 0 22
12503: PPUSH
12504: CALL_OW 115
// end else
12508: GO 12524
// begin ComAttackUnit ( i , target2 ) ;
12510: LD_VAR 0 14
12514: PPUSH
12515: LD_VAR 0 23
12519: PPUSH
12520: CALL_OW 115
// end ; end ;
12524: GO 12349
12526: POP
12527: POP
// for i in soldiersOK_list do
12528: LD_ADDR_VAR 0 14
12532: PUSH
12533: LD_VAR 0 19
12537: PUSH
12538: FOR_IN
12539: IFFALSE 12715
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12541: LD_ADDR_VAR 0 22
12545: PUSH
12546: LD_INT 22
12548: PUSH
12549: LD_VAR 0 11
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PPUSH
12558: CALL_OW 69
12562: PPUSH
12563: LD_VAR 0 14
12567: PPUSH
12568: CALL_OW 74
12572: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12573: LD_ADDR_VAR 0 23
12577: PUSH
12578: LD_INT 22
12580: PUSH
12581: LD_VAR 0 11
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 2
12592: PUSH
12593: LD_INT 59
12595: PUSH
12596: EMPTY
12597: LIST
12598: PUSH
12599: LD_INT 21
12601: PUSH
12602: LD_INT 1
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 21
12611: PUSH
12612: LD_INT 2
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: EMPTY
12630: LIST
12631: PPUSH
12632: CALL_OW 69
12636: PPUSH
12637: LD_VAR 0 14
12641: PPUSH
12642: CALL_OW 74
12646: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12647: LD_VAR 0 14
12651: PPUSH
12652: LD_VAR 0 22
12656: PPUSH
12657: CALL_OW 296
12661: PUSH
12662: LD_INT 8
12664: PLUS
12665: PUSH
12666: LD_VAR 0 14
12670: PPUSH
12671: LD_VAR 0 23
12675: PPUSH
12676: CALL_OW 296
12680: LESS
12681: IFFALSE 12699
// begin ComAttackUnit ( i , target1 ) ;
12683: LD_VAR 0 14
12687: PPUSH
12688: LD_VAR 0 22
12692: PPUSH
12693: CALL_OW 115
// end else
12697: GO 12713
// begin ComAttackUnit ( i , target2 ) ;
12699: LD_VAR 0 14
12703: PPUSH
12704: LD_VAR 0 23
12708: PPUSH
12709: CALL_OW 115
// end ; end ;
12713: GO 12538
12715: POP
12716: POP
// until soldiersOK_list = [ ] ;
12717: LD_VAR 0 19
12721: PUSH
12722: EMPTY
12723: EQUAL
12724: IFFALSE 12102
// end ; end ; end_of_file
12726: LD_VAR 0 13
12730: RET
// every 0 0$01 do
12731: GO 12733
12733: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12734: LD_INT 22
12736: PUSH
12737: LD_INT 1
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 25
12746: PUSH
12747: LD_INT 2
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: PUSH
12763: LD_INT 0
12765: EQUAL
12766: IFFALSE 12780
// SetClass ( JMM , 2 ) ;
12768: LD_EXP 1
12772: PPUSH
12773: LD_INT 2
12775: PPUSH
12776: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12780: LD_STRING M1
12782: PPUSH
12783: CALL_OW 337
// case difficulty of 1 :
12787: LD_OWVAR 67
12791: PUSH
12792: LD_INT 1
12794: DOUBLE
12795: EQUAL
12796: IFTRUE 12800
12798: GO 12810
12800: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12801: LD_STRING M1-1
12803: PPUSH
12804: CALL_OW 337
12808: GO 12847
12810: LD_INT 2
12812: DOUBLE
12813: EQUAL
12814: IFTRUE 12818
12816: GO 12828
12818: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12819: LD_STRING M1-2
12821: PPUSH
12822: CALL_OW 337
12826: GO 12847
12828: LD_INT 3
12830: DOUBLE
12831: EQUAL
12832: IFTRUE 12836
12834: GO 12846
12836: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12837: LD_STRING M1-3
12839: PPUSH
12840: CALL_OW 337
12844: GO 12847
12846: POP
// ChangeMissionObjectives ( M1cont ) ;
12847: LD_STRING M1cont
12849: PPUSH
12850: CALL_OW 337
// wait ( 0 0$2 ) ;
12854: LD_INT 70
12856: PPUSH
12857: CALL_OW 67
// SaveForQuickRestart ;
12861: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12865: LD_INT 525
12867: PPUSH
12868: LD_INT 700
12870: PPUSH
12871: CALL_OW 12
12875: PPUSH
12876: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12880: LD_INT 5
12882: PPUSH
12883: LD_INT 82
12885: PPUSH
12886: LD_INT 38
12888: PPUSH
12889: LD_INT 10
12891: PPUSH
12892: LD_INT 1
12894: PPUSH
12895: CALL_OW 56
// wait ( 0 0$14 ) ;
12899: LD_INT 490
12901: PPUSH
12902: CALL_OW 67
// firstCrateSpawn := true ;
12906: LD_ADDR_EXP 41
12910: PUSH
12911: LD_INT 1
12913: ST_TO_ADDR
// end ;
12914: END
// every 0 0$02 trigger firstCrateSpawn do
12915: LD_EXP 41
12919: IFFALSE 13282
12921: GO 12923
12923: DISABLE
// begin if IsOk ( Lisa ) then
12924: LD_EXP 2
12928: PPUSH
12929: CALL_OW 302
12933: IFFALSE 12949
// Say ( Lisa , DR0-Lisa-1 ) else
12935: LD_EXP 2
12939: PPUSH
12940: LD_STRING DR0-Lisa-1
12942: PPUSH
12943: CALL_OW 88
12947: GO 13095
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12949: LD_INT 22
12951: PUSH
12952: LD_INT 1
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 21
12961: PUSH
12962: LD_INT 1
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: LD_INT 26
12971: PUSH
12972: LD_INT 1
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: PUSH
12979: LD_INT 2
12981: PUSH
12982: LD_INT 25
12984: PUSH
12985: LD_INT 1
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 25
12994: PUSH
12995: LD_INT 2
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: LD_INT 25
13004: PUSH
13005: LD_INT 3
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: LD_INT 25
13014: PUSH
13015: LD_INT 4
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: PPUSH
13035: CALL_OW 69
13039: PUSH
13040: LD_EXP 1
13044: PUSH
13045: LD_EXP 8
13049: PUSH
13050: LD_EXP 5
13054: PUSH
13055: LD_EXP 6
13059: PUSH
13060: LD_EXP 7
13064: PUSH
13065: LD_EXP 4
13069: PUSH
13070: LD_EXP 3
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: DIFF
13084: PPUSH
13085: LD_STRING DR0-Sol1-1
13087: PPUSH
13088: LD_STRING DR0-Sol1-1
13090: PPUSH
13091: CALL 6124 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
13095: LD_INT 22
13097: PUSH
13098: LD_INT 1
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 21
13107: PUSH
13108: LD_INT 1
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 26
13117: PUSH
13118: LD_INT 1
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 2
13127: PUSH
13128: LD_INT 25
13130: PUSH
13131: LD_INT 1
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 25
13140: PUSH
13141: LD_INT 2
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 25
13150: PUSH
13151: LD_INT 3
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 25
13160: PUSH
13161: LD_INT 4
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: PPUSH
13181: CALL_OW 69
13185: PUSH
13186: LD_EXP 1
13190: PUSH
13191: LD_EXP 8
13195: PUSH
13196: LD_EXP 5
13200: PUSH
13201: LD_EXP 2
13205: PUSH
13206: LD_EXP 6
13210: PUSH
13211: LD_EXP 7
13215: PUSH
13216: LD_EXP 4
13220: PUSH
13221: LD_EXP 3
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: DIFF
13236: PPUSH
13237: LD_STRING DR0-Sol2-1
13239: PPUSH
13240: LD_STRING DR0-Sol2-1
13242: PPUSH
13243: CALL 6124 0 3
// if IsOk ( Cyrus ) then
13247: LD_EXP 4
13251: PPUSH
13252: CALL_OW 302
13256: IFFALSE 13270
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13258: LD_EXP 4
13262: PPUSH
13263: LD_STRING DR0-Cyrus-1
13265: PPUSH
13266: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13270: LD_EXP 1
13274: PPUSH
13275: LD_STRING DR0-JMM-1
13277: PPUSH
13278: CALL_OW 88
// end ;
13282: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13283: LD_EXP 5
13287: PPUSH
13288: CALL_OW 302
13292: PUSH
13293: LD_INT 22
13295: PUSH
13296: LD_INT 1
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PUSH
13303: LD_INT 25
13305: PUSH
13306: LD_INT 16
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PPUSH
13317: CALL_OW 69
13321: PUSH
13322: LD_INT 0
13324: GREATER
13325: AND
13326: PUSH
13327: LD_INT 1
13329: PPUSH
13330: CALL_OW 463
13334: NOT
13335: AND
13336: IFFALSE 13614
13338: GO 13340
13340: DISABLE
// begin DialogueOn ;
13341: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13345: LD_EXP 5
13349: PPUSH
13350: LD_STRING D10-Frank-1
13352: PPUSH
13353: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13357: LD_INT 22
13359: PUSH
13360: LD_INT 1
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 21
13369: PUSH
13370: LD_INT 1
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PUSH
13377: LD_INT 2
13379: PUSH
13380: LD_INT 25
13382: PUSH
13383: LD_INT 1
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 25
13392: PUSH
13393: LD_INT 2
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 25
13402: PUSH
13403: LD_INT 3
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 25
13412: PUSH
13413: LD_INT 4
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: PPUSH
13432: CALL_OW 69
13436: PUSH
13437: LD_EXP 1
13441: PUSH
13442: LD_EXP 5
13446: PUSH
13447: LD_EXP 2
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: LIST
13456: DIFF
13457: PPUSH
13458: LD_STRING D10-Sol1-1
13460: PPUSH
13461: LD_STRING D10-FSol1-1
13463: PPUSH
13464: CALL 6124 0 3
// Say ( Frank , D10-Frank-2 ) ;
13468: LD_EXP 5
13472: PPUSH
13473: LD_STRING D10-Frank-2
13475: PPUSH
13476: CALL_OW 88
// if IsOK ( Lisa ) then
13480: LD_EXP 2
13484: PPUSH
13485: CALL_OW 302
13489: IFFALSE 13505
// begin Say ( Lisa , D10-Lisa-2 ) ;
13491: LD_EXP 2
13495: PPUSH
13496: LD_STRING D10-Lisa-2
13498: PPUSH
13499: CALL_OW 88
// end else
13503: GO 13610
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13505: LD_INT 22
13507: PUSH
13508: LD_INT 1
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: LD_INT 21
13517: PUSH
13518: LD_INT 1
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: LD_INT 2
13527: PUSH
13528: LD_INT 25
13530: PUSH
13531: LD_INT 1
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 25
13540: PUSH
13541: LD_INT 2
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 25
13550: PUSH
13551: LD_INT 3
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 25
13560: PUSH
13561: LD_INT 4
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: LIST
13579: PPUSH
13580: CALL_OW 69
13584: PUSH
13585: LD_EXP 1
13589: PUSH
13590: LD_EXP 5
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: DIFF
13599: PPUSH
13600: LD_STRING D10-Sol1-2
13602: PPUSH
13603: LD_STRING D10-FSol1-2
13605: PPUSH
13606: CALL 6124 0 3
// end ; DialogueOff ;
13610: CALL_OW 7
// end ;
13614: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13615: LD_INT 1
13617: PPUSH
13618: CALL_OW 463
13622: NOT
13623: IFFALSE 13918
13625: GO 13627
13627: DISABLE
// begin HarrisonSupport ;
13628: CALL 2498 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13632: LD_EXP 17
13636: PPUSH
13637: CALL_OW 310
13641: PPUSH
13642: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13646: LD_EXP 17
13650: PPUSH
13651: LD_STRING DEng-Eng1-1
13653: PPUSH
13654: CALL_OW 88
// wait ( 1 1$0 ) ;
13658: LD_INT 2100
13660: PPUSH
13661: CALL_OW 67
// DialogueOn ;
13665: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13669: LD_EXP 14
13673: PPUSH
13674: LD_STRING DRem-Har-1
13676: PPUSH
13677: CALL_OW 94
// if contactWithRussian = 1 then
13681: LD_EXP 22
13685: PUSH
13686: LD_INT 1
13688: EQUAL
13689: IFFALSE 13705
// begin Say ( JMM , DRem-JMM-1 ) ;
13691: LD_EXP 1
13695: PPUSH
13696: LD_STRING DRem-JMM-1
13698: PPUSH
13699: CALL_OW 88
// end else
13703: GO 13717
// begin Say ( JMM , DRem-JMM-1a ) ;
13705: LD_EXP 1
13709: PPUSH
13710: LD_STRING DRem-JMM-1a
13712: PPUSH
13713: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13717: LD_EXP 14
13721: PPUSH
13722: LD_STRING DRem-Har-2
13724: PPUSH
13725: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13729: LD_STRING DenisInDelta
13731: PPUSH
13732: LD_INT 0
13734: PPUSH
13735: CALL_OW 30
13739: PUSH
13740: LD_INT 1
13742: EQUAL
13743: IFFALSE 13759
// begin Say ( JMM , DRem-JMM-2 ) ;
13745: LD_EXP 1
13749: PPUSH
13750: LD_STRING DRem-JMM-2
13752: PPUSH
13753: CALL_OW 88
// end else
13757: GO 13771
// begin Say ( JMM , DRem-JMM-2a ) ;
13759: LD_EXP 1
13763: PPUSH
13764: LD_STRING DRem-JMM-2a
13766: PPUSH
13767: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13771: LD_EXP 14
13775: PPUSH
13776: LD_STRING DRem-Har-3
13778: PPUSH
13779: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13783: LD_EXP 1
13787: PPUSH
13788: LD_STRING DRem-JMM-3
13790: PPUSH
13791: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13795: LD_EXP 14
13799: PPUSH
13800: LD_STRING DRem-Har-4
13802: PPUSH
13803: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13807: LD_STRING DenisInDelta
13809: PPUSH
13810: LD_INT 0
13812: PPUSH
13813: CALL_OW 30
13817: PUSH
13818: LD_INT 1
13820: EQUAL
13821: IFFALSE 13881
// begin Say ( JMM , DRem-JMM-4 ) ;
13823: LD_EXP 1
13827: PPUSH
13828: LD_STRING DRem-JMM-4
13830: PPUSH
13831: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13835: LD_EXP 14
13839: PPUSH
13840: LD_STRING DRem-Har-5
13842: PPUSH
13843: CALL_OW 94
// DialogueOff ;
13847: CALL_OW 7
// wait ( 4 4$00 ) ;
13851: LD_INT 8400
13853: PPUSH
13854: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13858: LD_INT 35
13860: PPUSH
13861: CALL_OW 67
// until not InBattle ( 1 ) ;
13865: LD_INT 1
13867: PPUSH
13868: CALL_OW 463
13872: NOT
13873: IFFALSE 13858
// SpawnDenis ;
13875: CALL 13919 0 0
// end else
13879: GO 13918
// begin DialogueOff ;
13881: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13885: LD_INT 36
13887: PPUSH
13888: LD_INT 1
13890: PPUSH
13891: LD_INT 1
13893: PPUSH
13894: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13898: LD_INT 15
13900: PPUSH
13901: LD_INT 1
13903: PPUSH
13904: LD_INT 1
13906: PPUSH
13907: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13911: LD_STRING MR
13913: PPUSH
13914: CALL_OW 337
// end ; end ;
13918: END
// export function SpawnDenis ; var tmp ; begin
13919: LD_INT 0
13921: PPUSH
13922: PPUSH
// PrepareDenis ;
13923: CALL 2220 0 0
// CenterNowOnUnits ( Denis ) ;
13927: LD_EXP 9
13931: PPUSH
13932: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
13936: LD_ADDR_VAR 0 2
13940: PUSH
13941: LD_INT 22
13943: PUSH
13944: LD_INT 1
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PPUSH
13951: CALL_OW 69
13955: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
13956: LD_EXP 9
13960: PPUSH
13961: LD_VAR 0 2
13965: PPUSH
13966: LD_EXP 9
13970: PPUSH
13971: CALL_OW 74
13975: PPUSH
13976: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13980: LD_INT 35
13982: PPUSH
13983: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
13987: LD_INT 22
13989: PUSH
13990: LD_INT 1
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 91
13999: PUSH
14000: LD_EXP 9
14004: PUSH
14005: LD_INT 10
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: LIST
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PPUSH
14017: CALL_OW 69
14021: IFFALSE 13980
// SetSide ( Denis , 1 ) ;
14023: LD_EXP 9
14027: PPUSH
14028: LD_INT 1
14030: PPUSH
14031: CALL_OW 235
// DialogueOn ;
14035: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
14039: LD_EXP 9
14043: PPUSH
14044: LD_STRING DDen-Den-1
14046: PPUSH
14047: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
14051: LD_EXP 1
14055: PPUSH
14056: LD_STRING DDen-JMM-1
14058: PPUSH
14059: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
14063: LD_EXP 9
14067: PPUSH
14068: LD_STRING DDen-Den-2
14070: PPUSH
14071: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
14075: LD_EXP 1
14079: PPUSH
14080: LD_STRING DDen-JMM-2
14082: PPUSH
14083: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
14087: LD_EXP 9
14091: PPUSH
14092: LD_STRING DDen-Den-3
14094: PPUSH
14095: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
14099: LD_EXP 1
14103: PPUSH
14104: LD_STRING DDen-JMM-3
14106: PPUSH
14107: CALL_OW 88
// DialogueOff ;
14111: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14115: LD_INT 36
14117: PPUSH
14118: LD_INT 1
14120: PPUSH
14121: LD_INT 1
14123: PPUSH
14124: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14128: LD_INT 15
14130: PPUSH
14131: LD_INT 1
14133: PPUSH
14134: LD_INT 1
14136: PPUSH
14137: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14141: LD_STRING MR
14143: PPUSH
14144: CALL_OW 337
// end ;
14148: LD_VAR 0 1
14152: RET
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14153: CALL 14208 0 0
14157: PUSH
14158: LD_EXP 9
14162: PPUSH
14163: CALL_OW 302
14167: AND
14168: PUSH
14169: LD_INT 1
14171: PPUSH
14172: CALL_OW 463
14176: NOT
14177: AND
14178: IFFALSE 14207
14180: GO 14182
14182: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14183: LD_EXP 9
14187: PPUSH
14188: LD_STRING DR1-Den-1
14190: PPUSH
14191: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14195: LD_EXP 1
14199: PPUSH
14200: LD_STRING DR1-JMM-1
14202: PPUSH
14203: CALL_OW 88
// end ;
14207: END
// function CheckOptoLab ; var i ; begin
14208: LD_INT 0
14210: PPUSH
14211: PPUSH
// result = false ;
14212: LD_ADDR_VAR 0 1
14216: PUSH
14217: LD_INT 0
14219: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14220: LD_ADDR_VAR 0 2
14224: PUSH
14225: LD_INT 22
14227: PUSH
14228: LD_INT 1
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 2
14237: PUSH
14238: LD_INT 30
14240: PUSH
14241: LD_INT 7
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 30
14250: PUSH
14251: LD_INT 8
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PPUSH
14267: CALL_OW 69
14271: PUSH
14272: FOR_IN
14273: IFFALSE 14325
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14275: LD_VAR 0 2
14279: PPUSH
14280: LD_INT 1
14282: PPUSH
14283: CALL_OW 268
14287: PUSH
14288: LD_INT 15
14290: EQUAL
14291: PUSH
14292: LD_VAR 0 2
14296: PPUSH
14297: LD_INT 2
14299: PPUSH
14300: CALL_OW 268
14304: PUSH
14305: LD_INT 15
14307: EQUAL
14308: OR
14309: IFFALSE 14321
// begin result = true ;
14311: LD_ADDR_VAR 0 1
14315: PUSH
14316: LD_INT 1
14318: ST_TO_ADDR
// break ;
14319: GO 14325
// end ; break ;
14321: GO 14325
// end ;
14323: GO 14272
14325: POP
14326: POP
// end ;
14327: LD_VAR 0 1
14331: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14332: LD_INT 15
14334: PPUSH
14335: LD_INT 1
14337: PPUSH
14338: CALL_OW 321
14342: PUSH
14343: LD_INT 2
14345: EQUAL
14346: PUSH
14347: LD_EXP 9
14351: PPUSH
14352: CALL_OW 302
14356: AND
14357: PUSH
14358: LD_INT 1
14360: PPUSH
14361: CALL_OW 463
14365: NOT
14366: AND
14367: IFFALSE 14599
14369: GO 14371
14371: DISABLE
// begin DialogueOn ;
14372: CALL_OW 6
// if IsOK ( Denis ) then
14376: LD_EXP 9
14380: PPUSH
14381: CALL_OW 302
14385: IFFALSE 14401
// begin Say ( Denis , DR2-Den-1 ) ;
14387: LD_EXP 9
14391: PPUSH
14392: LD_STRING DR2-Den-1
14394: PPUSH
14395: CALL_OW 88
// end else
14399: GO 14460
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14401: LD_INT 22
14403: PUSH
14404: LD_INT 1
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PUSH
14411: LD_INT 21
14413: PUSH
14414: LD_INT 1
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_INT 25
14423: PUSH
14424: LD_INT 4
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: PPUSH
14436: CALL_OW 69
14440: PUSH
14441: LD_EXP 1
14445: PUSH
14446: EMPTY
14447: LIST
14448: DIFF
14449: PPUSH
14450: LD_STRING DR2-Sci1-1
14452: PPUSH
14453: LD_STRING DR2-FSci1-1
14455: PPUSH
14456: CALL 6124 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14460: LD_EXP 1
14464: PPUSH
14465: LD_STRING DR2-JMM-1
14467: PPUSH
14468: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14472: LD_INT 22
14474: PUSH
14475: LD_INT 1
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PUSH
14482: LD_INT 21
14484: PUSH
14485: LD_INT 1
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: PUSH
14492: LD_INT 2
14494: PUSH
14495: LD_INT 25
14497: PUSH
14498: LD_INT 1
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: PUSH
14505: LD_INT 25
14507: PUSH
14508: LD_INT 2
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: PUSH
14515: LD_INT 25
14517: PUSH
14518: LD_INT 3
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: PUSH
14525: LD_INT 25
14527: PUSH
14528: LD_INT 4
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: LIST
14546: PPUSH
14547: CALL_OW 69
14551: PUSH
14552: LD_EXP 1
14556: PUSH
14557: LD_EXP 9
14561: PUSH
14562: LD_EXP 8
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: LIST
14571: DIFF
14572: PPUSH
14573: LD_STRING DR2-Sol1-1
14575: PPUSH
14576: LD_STRING DR2-Sol1-11
14578: PPUSH
14579: CALL 6124 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14583: LD_EXP 1
14587: PPUSH
14588: LD_STRING DR2-JMM-2
14590: PPUSH
14591: CALL_OW 88
// DialogueOff ;
14595: CALL_OW 7
// end ;
14599: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14600: LD_INT 22
14602: PUSH
14603: LD_INT 1
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PUSH
14610: LD_INT 30
14612: PUSH
14613: LD_INT 36
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PPUSH
14624: CALL_OW 69
14628: PUSH
14629: LD_INT 0
14631: EQUAL
14632: PUSH
14633: LD_INT 22
14635: PUSH
14636: LD_INT 1
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: LD_INT 21
14645: PUSH
14646: LD_INT 2
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 33
14655: PUSH
14656: LD_INT 2
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: LIST
14667: PPUSH
14668: CALL_OW 69
14672: PUSH
14673: LD_INT 0
14675: GREATER
14676: AND
14677: PUSH
14678: LD_EXP 23
14682: PUSH
14683: LD_INT 0
14685: EQUAL
14686: AND
14687: PUSH
14688: LD_INT 1
14690: PPUSH
14691: CALL_OW 463
14695: NOT
14696: AND
14697: IFFALSE 14834
14699: GO 14701
14701: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14702: LD_INT 22
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: LD_INT 21
14714: PUSH
14715: LD_INT 1
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: LD_INT 25
14724: PUSH
14725: LD_INT 3
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: LD_INT 26
14734: PUSH
14735: LD_INT 1
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: PPUSH
14748: CALL_OW 69
14752: PUSH
14753: LD_EXP 1
14757: PUSH
14758: LD_EXP 6
14762: PUSH
14763: LD_EXP 7
14767: PUSH
14768: LD_EXP 9
14772: PUSH
14773: LD_EXP 15
14777: PUSH
14778: LD_EXP 3
14782: PUSH
14783: LD_EXP 4
14787: PUSH
14788: LD_EXP 2
14792: PUSH
14793: LD_EXP 5
14797: PUSH
14798: LD_EXP 8
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: DIFF
14815: PPUSH
14816: LD_STRING D3a-Mech1-1
14818: PPUSH
14819: LD_STRING D3a-Mech1-1
14821: PPUSH
14822: CALL 6124 0 3
// firstTower = 2 ;
14826: LD_ADDR_EXP 23
14830: PUSH
14831: LD_INT 2
14833: ST_TO_ADDR
// end ;
14834: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14835: LD_INT 22
14837: PUSH
14838: LD_INT 3
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 21
14847: PUSH
14848: LD_INT 3
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PPUSH
14859: CALL_OW 69
14863: PUSH
14864: LD_INT 0
14866: EQUAL
14867: IFFALSE 14982
14869: GO 14871
14871: DISABLE
14872: LD_INT 0
14874: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14875: LD_ADDR_VAR 0 1
14879: PUSH
14880: LD_INT 22
14882: PUSH
14883: LD_INT 1
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 21
14892: PUSH
14893: LD_INT 1
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: LD_INT 2
14902: PUSH
14903: LD_INT 25
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: LD_INT 25
14915: PUSH
14916: LD_INT 2
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 25
14925: PUSH
14926: LD_INT 3
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 25
14935: PUSH
14936: LD_INT 4
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: LIST
14954: PPUSH
14955: CALL_OW 69
14959: PUSH
14960: FOR_IN
14961: IFFALSE 14980
// AddExperience ( i , 1 , 10000 ) ;
14963: LD_VAR 0 1
14967: PPUSH
14968: LD_INT 1
14970: PPUSH
14971: LD_INT 10000
14973: PPUSH
14974: CALL_OW 492
14978: GO 14960
14980: POP
14981: POP
// end ;
14982: PPOPN 1
14984: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14985: LD_INT 22
14987: PUSH
14988: LD_INT 1
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 30
14997: PUSH
14998: LD_INT 36
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PPUSH
15009: CALL_OW 69
15013: PUSH
15014: LD_INT 0
15016: GREATER
15017: PUSH
15018: LD_INT 22
15020: PUSH
15021: LD_INT 1
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: LD_INT 21
15030: PUSH
15031: LD_INT 2
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 33
15040: PUSH
15041: LD_INT 2
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: LIST
15052: PPUSH
15053: CALL_OW 69
15057: PUSH
15058: LD_INT 0
15060: GREATER
15061: AND
15062: PUSH
15063: CALL 15655 0 0
15067: AND
15068: PUSH
15069: LD_INT 1
15071: PPUSH
15072: CALL_OW 463
15076: NOT
15077: AND
15078: IFFALSE 15652
15080: GO 15082
15082: DISABLE
15083: LD_INT 0
15085: PPUSH
15086: PPUSH
15087: PPUSH
15088: PPUSH
15089: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
15090: LD_ADDR_VAR 0 3
15094: PUSH
15095: LD_INT 22
15097: PUSH
15098: LD_INT 1
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PUSH
15105: LD_INT 30
15107: PUSH
15108: LD_INT 36
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PPUSH
15119: CALL_OW 69
15123: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
15124: LD_ADDR_VAR 0 4
15128: PUSH
15129: LD_INT 22
15131: PUSH
15132: LD_INT 1
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 21
15141: PUSH
15142: LD_INT 2
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 33
15151: PUSH
15152: LD_INT 2
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: LIST
15163: PPUSH
15164: CALL_OW 69
15168: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15169: LD_ADDR_VAR 0 5
15173: PUSH
15174: EMPTY
15175: ST_TO_ADDR
// for i in tmpControlTowers do
15176: LD_ADDR_VAR 0 1
15180: PUSH
15181: LD_VAR 0 3
15185: PUSH
15186: FOR_IN
15187: IFFALSE 15650
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15189: LD_EXP 1
15193: PPUSH
15194: CALL_OW 310
15198: PUSH
15199: LD_VAR 0 1
15203: EQUAL
15204: PUSH
15205: LD_EXP 1
15209: PPUSH
15210: CALL_OW 257
15214: PUSH
15215: LD_INT 3
15217: EQUAL
15218: AND
15219: IFFALSE 15349
// begin InGameOn ;
15221: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15225: LD_VAR 0 4
15229: PUSH
15230: LD_INT 1
15232: ARRAY
15233: PPUSH
15234: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15238: LD_EXP 1
15242: PPUSH
15243: LD_STRING D4a-JMM-1
15245: PPUSH
15246: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15250: LD_VAR 0 4
15254: PUSH
15255: LD_INT 1
15257: ARRAY
15258: PPUSH
15259: LD_EXP 1
15263: PPUSH
15264: CALL_OW 53
// wait ( 0 0$1 ) ;
15268: LD_INT 35
15270: PPUSH
15271: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15275: LD_VAR 0 4
15279: PUSH
15280: LD_INT 1
15282: ARRAY
15283: PPUSH
15284: LD_VAR 0 4
15288: PUSH
15289: LD_INT 1
15291: ARRAY
15292: PPUSH
15293: CALL_OW 250
15297: PUSH
15298: LD_INT 3
15300: PLUS
15301: PPUSH
15302: LD_VAR 0 4
15306: PUSH
15307: LD_INT 1
15309: ARRAY
15310: PPUSH
15311: CALL_OW 251
15315: PUSH
15316: LD_INT 2
15318: MINUS
15319: PPUSH
15320: CALL_OW 111
// wait ( 0 0$2 ) ;
15324: LD_INT 70
15326: PPUSH
15327: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15331: LD_EXP 1
15335: PPUSH
15336: LD_STRING D4b-JMM-1
15338: PPUSH
15339: CALL_OW 88
// InGameOff ;
15343: CALL_OW 9
// end else
15347: GO 15648
// begin InGameOn ;
15349: CALL_OW 8
// for j in UnitsInside ( i ) do
15353: LD_ADDR_VAR 0 2
15357: PUSH
15358: LD_VAR 0 1
15362: PPUSH
15363: CALL_OW 313
15367: PUSH
15368: FOR_IN
15369: IFFALSE 15404
// if GetClass ( j ) = 3 then
15371: LD_VAR 0 2
15375: PPUSH
15376: CALL_OW 257
15380: PUSH
15381: LD_INT 3
15383: EQUAL
15384: IFFALSE 15402
// tmpMechanicInside = tmpMechanicInside ^ j ;
15386: LD_ADDR_VAR 0 5
15390: PUSH
15391: LD_VAR 0 5
15395: PUSH
15396: LD_VAR 0 2
15400: ADD
15401: ST_TO_ADDR
15402: GO 15368
15404: POP
15405: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15406: LD_VAR 0 5
15410: PUSH
15411: LD_INT 1
15413: ARRAY
15414: PPUSH
15415: CALL_OW 258
15419: PUSH
15420: LD_INT 1
15422: EQUAL
15423: IFFALSE 15441
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15425: LD_VAR 0 5
15429: PUSH
15430: LD_INT 1
15432: ARRAY
15433: PPUSH
15434: LD_STRING D4a-Mech1-1
15436: PPUSH
15437: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15441: LD_VAR 0 5
15445: PUSH
15446: LD_INT 1
15448: ARRAY
15449: PPUSH
15450: CALL_OW 258
15454: PUSH
15455: LD_INT 2
15457: EQUAL
15458: IFFALSE 15476
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15460: LD_VAR 0 5
15464: PUSH
15465: LD_INT 1
15467: ARRAY
15468: PPUSH
15469: LD_STRING D4a-FMech1-1
15471: PPUSH
15472: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15476: LD_VAR 0 4
15480: PUSH
15481: LD_INT 1
15483: ARRAY
15484: PPUSH
15485: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15489: LD_VAR 0 4
15493: PUSH
15494: LD_INT 1
15496: ARRAY
15497: PPUSH
15498: LD_VAR 0 5
15502: PUSH
15503: LD_INT 1
15505: ARRAY
15506: PPUSH
15507: CALL_OW 53
// wait ( 0 0$1 ) ;
15511: LD_INT 35
15513: PPUSH
15514: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15518: LD_VAR 0 4
15522: PUSH
15523: LD_INT 1
15525: ARRAY
15526: PPUSH
15527: LD_VAR 0 4
15531: PUSH
15532: LD_INT 1
15534: ARRAY
15535: PPUSH
15536: CALL_OW 250
15540: PUSH
15541: LD_INT 3
15543: PLUS
15544: PPUSH
15545: LD_VAR 0 4
15549: PUSH
15550: LD_INT 1
15552: ARRAY
15553: PPUSH
15554: CALL_OW 251
15558: PUSH
15559: LD_INT 2
15561: MINUS
15562: PPUSH
15563: CALL_OW 111
// wait ( 0 0$2 ) ;
15567: LD_INT 70
15569: PPUSH
15570: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15574: LD_VAR 0 5
15578: PUSH
15579: LD_INT 1
15581: ARRAY
15582: PPUSH
15583: CALL_OW 258
15587: PUSH
15588: LD_INT 1
15590: EQUAL
15591: IFFALSE 15609
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15593: LD_VAR 0 5
15597: PUSH
15598: LD_INT 1
15600: ARRAY
15601: PPUSH
15602: LD_STRING D4b-Mech1-1
15604: PPUSH
15605: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15609: LD_VAR 0 5
15613: PUSH
15614: LD_INT 1
15616: ARRAY
15617: PPUSH
15618: CALL_OW 258
15622: PUSH
15623: LD_INT 2
15625: EQUAL
15626: IFFALSE 15644
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15628: LD_VAR 0 5
15632: PUSH
15633: LD_INT 1
15635: ARRAY
15636: PPUSH
15637: LD_STRING D4b-FMech1-1
15639: PPUSH
15640: CALL_OW 88
// InGameOff ;
15644: CALL_OW 9
// end ; end ;
15648: GO 15186
15650: POP
15651: POP
// end ;
15652: PPOPN 5
15654: END
// function CheckMehInside ; var i , j ; begin
15655: LD_INT 0
15657: PPUSH
15658: PPUSH
15659: PPUSH
// result = false ;
15660: LD_ADDR_VAR 0 1
15664: PUSH
15665: LD_INT 0
15667: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15668: LD_ADDR_VAR 0 2
15672: PUSH
15673: LD_INT 22
15675: PUSH
15676: LD_INT 1
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: LD_INT 30
15685: PUSH
15686: LD_INT 36
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PPUSH
15697: CALL_OW 69
15701: PUSH
15702: FOR_IN
15703: IFFALSE 15754
// begin for j in UnitsInside ( i ) do
15705: LD_ADDR_VAR 0 3
15709: PUSH
15710: LD_VAR 0 2
15714: PPUSH
15715: CALL_OW 313
15719: PUSH
15720: FOR_IN
15721: IFFALSE 15750
// begin if GetClass ( j ) = 3 then
15723: LD_VAR 0 3
15727: PPUSH
15728: CALL_OW 257
15732: PUSH
15733: LD_INT 3
15735: EQUAL
15736: IFFALSE 15748
// begin result = true ;
15738: LD_ADDR_VAR 0 1
15742: PUSH
15743: LD_INT 1
15745: ST_TO_ADDR
// break ;
15746: GO 15750
// end ; end ;
15748: GO 15720
15750: POP
15751: POP
// end ;
15752: GO 15702
15754: POP
15755: POP
// end ;
15756: LD_VAR 0 1
15760: RET
// every 25 25$0 do
15761: GO 15763
15763: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15764: LD_INT 35
15766: PPUSH
15767: CALL_OW 67
// until not InBattle ( 1 ) and GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , JMM ) , JMM ) > 30 ;
15771: LD_INT 1
15773: PPUSH
15774: CALL_OW 463
15778: NOT
15779: PUSH
15780: LD_INT 81
15782: PUSH
15783: LD_INT 1
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PPUSH
15790: CALL_OW 69
15794: PPUSH
15795: LD_EXP 1
15799: PPUSH
15800: CALL_OW 74
15804: PPUSH
15805: LD_EXP 1
15809: PPUSH
15810: CALL_OW 296
15814: PUSH
15815: LD_INT 30
15817: GREATER
15818: AND
15819: IFFALSE 15764
// PrepareKurt ;
15821: CALL 19422 0 0
// end ;
15825: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
15826: LD_EXP 15
15830: PPUSH
15831: CALL_OW 302
15835: PUSH
15836: LD_EXP 15
15840: PPUSH
15841: CALL_OW 255
15845: PUSH
15846: LD_INT 1
15848: EQUAL
15849: AND
15850: PUSH
15851: LD_EXP 2
15855: AND
15856: IFFALSE 16021
15858: GO 15860
15860: DISABLE
// begin wait ( 0 0$50 ) ;
15861: LD_INT 1750
15863: PPUSH
15864: CALL_OW 67
// if not IsOk ( Joan ) then
15868: LD_EXP 15
15872: PPUSH
15873: CALL_OW 302
15877: NOT
15878: IFFALSE 15882
// exit ;
15880: GO 16021
// if IsOK ( Lisa ) then
15882: LD_EXP 2
15886: PPUSH
15887: CALL_OW 302
15891: IFFALSE 16021
// begin DialogueOn ;
15893: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15897: LD_EXP 2
15901: PPUSH
15902: LD_STRING D7-Lisa-1
15904: PPUSH
15905: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15909: LD_EXP 1
15913: PPUSH
15914: LD_STRING D7-JMM-1
15916: PPUSH
15917: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15921: LD_EXP 2
15925: PPUSH
15926: LD_STRING D7-Lisa-2
15928: PPUSH
15929: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15933: LD_EXP 1
15937: PPUSH
15938: LD_STRING D7-JMM-2
15940: PPUSH
15941: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15945: LD_EXP 2
15949: PPUSH
15950: LD_STRING D7-Lisa-3
15952: PPUSH
15953: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15957: LD_EXP 1
15961: PPUSH
15962: LD_STRING D7-JMM-3
15964: PPUSH
15965: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15969: LD_EXP 2
15973: PPUSH
15974: LD_STRING D7-Lisa-4
15976: PPUSH
15977: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15981: LD_EXP 1
15985: PPUSH
15986: LD_STRING D7-JMM-4
15988: PPUSH
15989: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15993: LD_EXP 1
15997: PPUSH
15998: LD_STRING D7-JMM-4a
16000: PPUSH
16001: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
16005: LD_EXP 2
16009: PPUSH
16010: LD_STRING D7-Lisa-5
16012: PPUSH
16013: CALL_OW 88
// DialogueOff ;
16017: CALL_OW 7
// end ; end ;
16021: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
16022: LD_EXP 13
16026: PUSH
16027: LD_INT 22
16029: PUSH
16030: LD_INT 1
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 91
16039: PUSH
16040: LD_EXP 13
16044: PUSH
16045: LD_INT 10
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 2
16055: PUSH
16056: LD_INT 25
16058: PUSH
16059: LD_INT 1
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 25
16068: PUSH
16069: LD_INT 2
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 25
16078: PUSH
16079: LD_INT 3
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: LD_INT 25
16088: PUSH
16089: LD_INT 4
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: LIST
16107: PPUSH
16108: CALL_OW 69
16112: PUSH
16113: LD_INT 1
16115: GREATER
16116: AND
16117: IFFALSE 16134
16119: GO 16121
16121: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
16122: LD_EXP 13
16126: PPUSH
16127: LD_STRING D5-Sol1-1
16129: PPUSH
16130: CALL_OW 88
// end ;
16134: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
16135: LD_INT 22
16137: PUSH
16138: LD_INT 1
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 33
16147: PUSH
16148: LD_INT 2
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PPUSH
16159: CALL_OW 69
16163: PUSH
16164: LD_INT 2
16166: GREATEREQUAL
16167: IFFALSE 16187
16169: GO 16171
16171: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
16172: LD_STRING MRa
16174: PPUSH
16175: CALL_OW 337
// remoteVehiclesBuild = 1 ;
16179: LD_ADDR_EXP 28
16183: PUSH
16184: LD_INT 1
16186: ST_TO_ADDR
// end ;
16187: END
// every 2 2$00 do var i , last ;
16188: GO 16190
16190: DISABLE
16191: LD_INT 0
16193: PPUSH
16194: PPUSH
// begin last := 8 ;
16195: LD_ADDR_VAR 0 2
16199: PUSH
16200: LD_INT 8
16202: ST_TO_ADDR
// for i = 1 to last do
16203: LD_ADDR_VAR 0 1
16207: PUSH
16208: DOUBLE
16209: LD_INT 1
16211: DEC
16212: ST_TO_ADDR
16213: LD_VAR 0 2
16217: PUSH
16218: FOR_TO
16219: IFFALSE 16247
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
16221: LD_INT 6300
16223: PPUSH
16224: LD_INT 12600
16226: PPUSH
16227: CALL_OW 12
16231: PPUSH
16232: CALL_OW 67
// PrepareRandoms ( i ) ;
16236: LD_VAR 0 1
16240: PPUSH
16241: CALL 3989 0 1
// end ;
16245: GO 16218
16247: POP
16248: POP
// end ;
16249: PPOPN 2
16251: END
// every 5 5$20 do
16252: GO 16254
16254: DISABLE
// begin DialogueOn ;
16255: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16259: LD_EXP 10
16263: PPUSH
16264: LD_STRING D12a-Sci-1
16266: PPUSH
16267: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16271: LD_EXP 1
16275: PPUSH
16276: LD_STRING D12a-JMM-1
16278: PPUSH
16279: CALL_OW 88
// DialogueOff ;
16283: CALL_OW 7
// cratesStatus = 1 ;
16287: LD_ADDR_EXP 38
16291: PUSH
16292: LD_INT 1
16294: ST_TO_ADDR
// end ;
16295: END
// every 13 13$0 do
16296: GO 16298
16298: DISABLE
// begin DialogueOn ;
16299: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16303: LD_EXP 10
16307: PPUSH
16308: LD_STRING D12b-Sci-1
16310: PPUSH
16311: CALL_OW 94
// DialogueOff ;
16315: CALL_OW 7
// cratesStatus = 2 ;
16319: LD_ADDR_EXP 38
16323: PUSH
16324: LD_INT 2
16326: ST_TO_ADDR
// end ;
16327: END
// every 32 32$0 do
16328: GO 16330
16330: DISABLE
// begin DialogueOn ;
16331: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16335: LD_EXP 10
16339: PPUSH
16340: LD_STRING D12c-Sci-1
16342: PPUSH
16343: CALL_OW 94
// DialogueOff ;
16347: CALL_OW 7
// wait ( 3 3$0 ) ;
16351: LD_INT 6300
16353: PPUSH
16354: CALL_OW 67
// DialogueOn ;
16358: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16362: LD_EXP 10
16366: PPUSH
16367: LD_STRING D12d-Sci-1
16369: PPUSH
16370: CALL_OW 94
// DialogueOff ;
16374: CALL_OW 7
// cratesStatus = 1 ;
16378: LD_ADDR_EXP 38
16382: PUSH
16383: LD_INT 1
16385: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16386: LD_INT 1400
16388: PPUSH
16389: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16393: LD_INT 35
16395: PPUSH
16396: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
16400: LD_INT 1
16402: PPUSH
16403: CALL_OW 463
16407: NOT
16408: PUSH
16409: LD_INT 32
16411: PPUSH
16412: LD_INT 81
16414: PUSH
16415: LD_INT 1
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PPUSH
16422: CALL_OW 70
16426: NOT
16427: AND
16428: IFFALSE 16393
// PrepareJoan ;
16430: CALL 3016 0 0
// end ;
16434: END
// every 42 42$0 do
16435: GO 16437
16437: DISABLE
// begin DialogueOn ;
16438: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16442: LD_EXP 10
16446: PPUSH
16447: LD_STRING D12e-Sci-1
16449: PPUSH
16450: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16454: LD_EXP 1
16458: PPUSH
16459: LD_STRING D12e-JMM-1
16461: PPUSH
16462: CALL_OW 88
// DialogueOff ;
16466: CALL_OW 7
// cratesStatus = 2 ;
16470: LD_ADDR_EXP 38
16474: PUSH
16475: LD_INT 2
16477: ST_TO_ADDR
// end ;
16478: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16479: LD_INT 22
16481: PUSH
16482: LD_INT 6
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 21
16491: PUSH
16492: LD_INT 2
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 34
16501: PUSH
16502: LD_INT 51
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: LIST
16513: PPUSH
16514: CALL_OW 69
16518: PUSH
16519: LD_INT 0
16521: GREATER
16522: IFFALSE 16605
16524: GO 16526
16526: DISABLE
16527: LD_INT 0
16529: PPUSH
// begin enable ;
16530: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16531: LD_ADDR_VAR 0 1
16535: PUSH
16536: LD_INT 22
16538: PUSH
16539: LD_INT 6
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: LD_INT 2
16548: PUSH
16549: LD_INT 21
16551: PUSH
16552: LD_INT 1
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 21
16561: PUSH
16562: LD_INT 2
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: LIST
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PPUSH
16578: CALL_OW 69
16582: PUSH
16583: FOR_IN
16584: IFFALSE 16603
// ComAgressiveMove ( i , 138 , 168 ) ;
16586: LD_VAR 0 1
16590: PPUSH
16591: LD_INT 138
16593: PPUSH
16594: LD_INT 168
16596: PPUSH
16597: CALL_OW 114
16601: GO 16583
16603: POP
16604: POP
// end ;
16605: PPOPN 1
16607: END
// every 0 0$1 do var i ;
16608: GO 16610
16610: DISABLE
16611: LD_INT 0
16613: PPUSH
// begin enable ;
16614: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16615: LD_ADDR_VAR 0 1
16619: PUSH
16620: LD_INT 4
16622: PPUSH
16623: LD_INT 2
16625: PUSH
16626: LD_INT 22
16628: PUSH
16629: LD_INT 3
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 22
16638: PUSH
16639: LD_INT 6
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: LIST
16650: PUSH
16651: EMPTY
16652: LIST
16653: PPUSH
16654: CALL_OW 70
16658: PUSH
16659: FOR_IN
16660: IFFALSE 16724
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16662: LD_INT 4
16664: PPUSH
16665: LD_INT 22
16667: PUSH
16668: LD_INT 6
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 34
16677: PUSH
16678: LD_INT 51
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PPUSH
16689: CALL_OW 70
16693: PUSH
16694: LD_INT 0
16696: GREATER
16697: IFFALSE 16713
// sendedConvoys = sendedConvoys + 1 ;
16699: LD_ADDR_EXP 39
16703: PUSH
16704: LD_EXP 39
16708: PUSH
16709: LD_INT 1
16711: PLUS
16712: ST_TO_ADDR
// RemoveUnit ( i ) ;
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 64
// end ;
16722: GO 16659
16724: POP
16725: POP
// end ; end_of_file
16726: PPOPN 1
16728: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16729: LD_VAR 0 1
16733: PUSH
16734: LD_INT 1
16736: EQUAL
16737: PUSH
16738: LD_VAR 0 2
16742: PUSH
16743: LD_INT 3
16745: EQUAL
16746: AND
16747: IFFALSE 16757
// contactWithRussian = 1 ;
16749: LD_ADDR_EXP 22
16753: PUSH
16754: LD_INT 1
16756: ST_TO_ADDR
// end ;
16757: PPOPN 2
16759: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16760: LD_VAR 0 1
16764: PPUSH
16765: CALL_OW 266
16769: PUSH
16770: LD_INT 36
16772: EQUAL
16773: PUSH
16774: LD_VAR 0 1
16778: PPUSH
16779: CALL_OW 255
16783: PUSH
16784: LD_INT 1
16786: EQUAL
16787: AND
16788: PUSH
16789: LD_INT 22
16791: PUSH
16792: LD_INT 1
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: LD_INT 21
16801: PUSH
16802: LD_INT 2
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 33
16811: PUSH
16812: LD_INT 2
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: PPUSH
16824: CALL_OW 69
16828: PUSH
16829: LD_INT 0
16831: EQUAL
16832: AND
16833: PUSH
16834: LD_EXP 23
16838: PUSH
16839: LD_INT 0
16841: EQUAL
16842: AND
16843: IFFALSE 16923
// begin firstTower = 1 ;
16845: LD_ADDR_EXP 23
16849: PUSH
16850: LD_INT 1
16852: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16853: LD_INT 22
16855: PUSH
16856: LD_INT 1
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: LD_INT 21
16865: PUSH
16866: LD_INT 1
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 25
16875: PUSH
16876: LD_INT 3
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 26
16885: PUSH
16886: LD_INT 1
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: PPUSH
16899: CALL_OW 69
16903: PUSH
16904: LD_EXP 1
16908: PUSH
16909: EMPTY
16910: LIST
16911: DIFF
16912: PPUSH
16913: LD_STRING D3b-Mech1-1
16915: PPUSH
16916: LD_STRING D3b-Mech1-1
16918: PPUSH
16919: CALL 6124 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16923: LD_VAR 0 1
16927: PPUSH
16928: CALL_OW 266
16932: PUSH
16933: LD_INT 0
16935: EQUAL
16936: PUSH
16937: LD_VAR 0 1
16941: PPUSH
16942: CALL_OW 255
16946: PUSH
16947: LD_INT 1
16949: EQUAL
16950: AND
16951: IFFALSE 16965
// SetBName ( building , theta ) ;
16953: LD_VAR 0 1
16957: PPUSH
16958: LD_STRING theta
16960: PPUSH
16961: CALL_OW 500
// if GetSide ( building ) = 3 then
16965: LD_VAR 0 1
16969: PPUSH
16970: CALL_OW 255
16974: PUSH
16975: LD_INT 3
16977: EQUAL
16978: IFFALSE 17052
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16980: LD_ADDR_EXP 31
16984: PUSH
16985: LD_EXP 31
16989: PPUSH
16990: LD_INT 1
16992: PPUSH
16993: CALL_OW 3
16997: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16998: LD_ADDR_EXP 31
17002: PUSH
17003: LD_EXP 31
17007: PPUSH
17008: LD_INT 1
17010: PPUSH
17011: CALL_OW 3
17015: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17016: LD_ADDR_EXP 31
17020: PUSH
17021: LD_EXP 31
17025: PPUSH
17026: LD_INT 1
17028: PPUSH
17029: CALL_OW 3
17033: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17034: LD_ADDR_EXP 31
17038: PUSH
17039: LD_EXP 31
17043: PPUSH
17044: LD_INT 1
17046: PPUSH
17047: CALL_OW 3
17051: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
17052: LD_VAR 0 1
17056: PPUSH
17057: CALL_OW 255
17061: PUSH
17062: LD_INT 3
17064: EQUAL
17065: PUSH
17066: LD_VAR 0 1
17070: PPUSH
17071: CALL_OW 266
17075: PUSH
17076: LD_INT 0
17078: EQUAL
17079: PUSH
17080: LD_VAR 0 1
17084: PPUSH
17085: CALL_OW 266
17089: PUSH
17090: LD_INT 2
17092: EQUAL
17093: OR
17094: PUSH
17095: LD_VAR 0 1
17099: PPUSH
17100: CALL_OW 266
17104: PUSH
17105: LD_INT 4
17107: EQUAL
17108: OR
17109: PUSH
17110: EMPTY
17111: LIST
17112: AND
17113: IFFALSE 17124
// ComUpgrade ( building ) ;
17115: LD_VAR 0 1
17119: PPUSH
17120: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
17124: LD_VAR 0 1
17128: PPUSH
17129: CALL_OW 255
17133: PUSH
17134: LD_INT 3
17136: EQUAL
17137: PUSH
17138: LD_VAR 0 1
17142: PPUSH
17143: CALL_OW 266
17147: PUSH
17148: LD_INT 32
17150: EQUAL
17151: AND
17152: IFFALSE 17193
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
17154: LD_VAR 0 1
17158: PPUSH
17159: LD_INT 42
17161: PUSH
17162: LD_INT 43
17164: PUSH
17165: LD_INT 44
17167: PUSH
17168: LD_INT 46
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 1
17179: PPUSH
17180: LD_INT 4
17182: PPUSH
17183: CALL_OW 12
17187: ARRAY
17188: PPUSH
17189: CALL_OW 208
// end ; end ;
17193: PPOPN 1
17195: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
17196: LD_VAR 0 1
17200: PUSH
17201: LD_INT 22
17203: PUSH
17204: LD_INT 1
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 21
17213: PUSH
17214: LD_INT 1
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 23
17223: PUSH
17224: LD_INT 1
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: PPUSH
17236: CALL_OW 69
17240: IN
17241: IFFALSE 17257
// killCounter := killCounter + 1 ;
17243: LD_ADDR_EXP 47
17247: PUSH
17248: LD_EXP 47
17252: PUSH
17253: LD_INT 1
17255: PLUS
17256: ST_TO_ADDR
// if unit = JMM then
17257: LD_VAR 0 1
17261: PUSH
17262: LD_EXP 1
17266: EQUAL
17267: IFFALSE 17276
// YouLost ( JMM ) ;
17269: LD_STRING JMM
17271: PPUSH
17272: CALL_OW 104
// if unit = Joan then
17276: LD_VAR 0 1
17280: PUSH
17281: LD_EXP 15
17285: EQUAL
17286: IFFALSE 17296
// JoanStatus = 0 ;
17288: LD_ADDR_EXP 16
17292: PUSH
17293: LD_INT 0
17295: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL_OW 255
17305: PUSH
17306: LD_INT 1
17308: EQUAL
17309: PUSH
17310: LD_VAR 0 1
17314: PPUSH
17315: CALL_OW 247
17319: PUSH
17320: LD_INT 1
17322: EQUAL
17323: AND
17324: IFFALSE 17400
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17326: LD_VAR 0 1
17330: PPUSH
17331: CALL_OW 257
17335: PUSH
17336: LD_INT 1
17338: EQUAL
17339: PUSH
17340: LD_VAR 0 1
17344: PPUSH
17345: CALL_OW 257
17349: PUSH
17350: LD_INT 2
17352: EQUAL
17353: OR
17354: PUSH
17355: LD_VAR 0 1
17359: PPUSH
17360: CALL_OW 257
17364: PUSH
17365: LD_INT 3
17367: EQUAL
17368: OR
17369: PUSH
17370: LD_VAR 0 1
17374: PPUSH
17375: CALL_OW 257
17379: PUSH
17380: LD_INT 4
17382: EQUAL
17383: OR
17384: IFFALSE 17400
// unitLost = unitLost + 1 ;
17386: LD_ADDR_EXP 30
17390: PUSH
17391: LD_EXP 30
17395: PUSH
17396: LD_INT 1
17398: PLUS
17399: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17400: LD_VAR 0 1
17404: PPUSH
17405: CALL_OW 255
17409: PUSH
17410: LD_INT 3
17412: EQUAL
17413: PUSH
17414: LD_VAR 0 1
17418: PPUSH
17419: CALL_OW 247
17423: PUSH
17424: LD_INT 3
17426: EQUAL
17427: AND
17428: IFFALSE 18120
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17430: LD_VAR 0 1
17434: PPUSH
17435: CALL_OW 266
17439: PUSH
17440: LD_INT 31
17442: EQUAL
17443: PUSH
17444: LD_VAR 0 1
17448: PPUSH
17449: CALL_OW 266
17453: PUSH
17454: LD_INT 32
17456: EQUAL
17457: OR
17458: PUSH
17459: LD_VAR 0 1
17463: PPUSH
17464: CALL_OW 266
17468: PUSH
17469: LD_INT 36
17471: EQUAL
17472: OR
17473: PUSH
17474: LD_VAR 0 1
17478: PPUSH
17479: CALL_OW 266
17483: PUSH
17484: LD_INT 0
17486: EQUAL
17487: OR
17488: PUSH
17489: LD_VAR 0 1
17493: PPUSH
17494: CALL_OW 266
17498: PUSH
17499: LD_INT 24
17501: EQUAL
17502: OR
17503: PUSH
17504: LD_VAR 0 1
17508: PPUSH
17509: CALL_OW 266
17513: PUSH
17514: LD_INT 17
17516: EQUAL
17517: OR
17518: PUSH
17519: LD_VAR 0 1
17523: PPUSH
17524: CALL_OW 266
17528: PUSH
17529: LD_INT 25
17531: EQUAL
17532: OR
17533: PUSH
17534: LD_VAR 0 1
17538: PPUSH
17539: CALL_OW 266
17543: PUSH
17544: LD_INT 19
17546: EQUAL
17547: OR
17548: PUSH
17549: LD_VAR 0 1
17553: PPUSH
17554: CALL_OW 266
17558: PUSH
17559: LD_INT 20
17561: EQUAL
17562: OR
17563: PUSH
17564: LD_VAR 0 1
17568: PPUSH
17569: CALL_OW 266
17573: PUSH
17574: LD_INT 18
17576: EQUAL
17577: OR
17578: PUSH
17579: LD_VAR 0 1
17583: PPUSH
17584: CALL_OW 266
17588: PUSH
17589: LD_INT 21
17591: EQUAL
17592: OR
17593: PUSH
17594: LD_VAR 0 1
17598: PPUSH
17599: CALL_OW 266
17603: PUSH
17604: LD_INT 23
17606: EQUAL
17607: OR
17608: PUSH
17609: LD_VAR 0 1
17613: PPUSH
17614: CALL_OW 266
17618: PUSH
17619: LD_INT 16
17621: EQUAL
17622: OR
17623: PUSH
17624: LD_VAR 0 1
17628: PPUSH
17629: CALL_OW 266
17633: PUSH
17634: LD_INT 6
17636: EQUAL
17637: OR
17638: PUSH
17639: LD_VAR 0 1
17643: PPUSH
17644: CALL_OW 266
17648: PUSH
17649: LD_INT 29
17651: EQUAL
17652: OR
17653: PUSH
17654: LD_VAR 0 1
17658: PPUSH
17659: CALL_OW 266
17663: PUSH
17664: LD_INT 26
17666: EQUAL
17667: OR
17668: PUSH
17669: LD_VAR 0 1
17673: PPUSH
17674: CALL_OW 266
17678: PUSH
17679: LD_INT 30
17681: EQUAL
17682: OR
17683: PUSH
17684: LD_VAR 0 1
17688: PPUSH
17689: CALL_OW 266
17693: PUSH
17694: LD_INT 28
17696: EQUAL
17697: OR
17698: PUSH
17699: LD_VAR 0 1
17703: PPUSH
17704: CALL_OW 266
17708: PUSH
17709: LD_INT 27
17711: EQUAL
17712: OR
17713: PUSH
17714: LD_VAR 0 1
17718: PPUSH
17719: CALL_OW 266
17723: PUSH
17724: LD_INT 33
17726: EQUAL
17727: OR
17728: PUSH
17729: LD_VAR 0 1
17733: PPUSH
17734: CALL_OW 266
17738: PUSH
17739: LD_INT 2
17741: EQUAL
17742: OR
17743: PUSH
17744: LD_VAR 0 1
17748: PPUSH
17749: CALL_OW 266
17753: PUSH
17754: LD_INT 4
17756: EQUAL
17757: OR
17758: IFFALSE 17844
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17760: LD_ADDR_EXP 31
17764: PUSH
17765: LD_EXP 31
17769: PUSH
17770: LD_VAR 0 1
17774: PPUSH
17775: CALL_OW 266
17779: ADD
17780: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17781: LD_ADDR_EXP 31
17785: PUSH
17786: LD_EXP 31
17790: PUSH
17791: LD_VAR 0 1
17795: PPUSH
17796: CALL_OW 250
17800: ADD
17801: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17802: LD_ADDR_EXP 31
17806: PUSH
17807: LD_EXP 31
17811: PUSH
17812: LD_VAR 0 1
17816: PPUSH
17817: CALL_OW 251
17821: ADD
17822: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17823: LD_ADDR_EXP 31
17827: PUSH
17828: LD_EXP 31
17832: PUSH
17833: LD_VAR 0 1
17837: PPUSH
17838: CALL_OW 254
17842: ADD
17843: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17844: LD_VAR 0 1
17848: PPUSH
17849: CALL_OW 266
17853: PUSH
17854: LD_INT 1
17856: EQUAL
17857: IFFALSE 17936
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17859: LD_ADDR_EXP 31
17863: PUSH
17864: LD_EXP 31
17868: PUSH
17869: LD_INT 0
17871: ADD
17872: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17873: LD_ADDR_EXP 31
17877: PUSH
17878: LD_EXP 31
17882: PUSH
17883: LD_VAR 0 1
17887: PPUSH
17888: CALL_OW 250
17892: ADD
17893: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17894: LD_ADDR_EXP 31
17898: PUSH
17899: LD_EXP 31
17903: PUSH
17904: LD_VAR 0 1
17908: PPUSH
17909: CALL_OW 251
17913: ADD
17914: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17915: LD_ADDR_EXP 31
17919: PUSH
17920: LD_EXP 31
17924: PUSH
17925: LD_VAR 0 1
17929: PPUSH
17930: CALL_OW 254
17934: ADD
17935: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17936: LD_VAR 0 1
17940: PPUSH
17941: CALL_OW 266
17945: PUSH
17946: LD_INT 3
17948: EQUAL
17949: IFFALSE 18028
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17951: LD_ADDR_EXP 31
17955: PUSH
17956: LD_EXP 31
17960: PUSH
17961: LD_INT 2
17963: ADD
17964: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17965: LD_ADDR_EXP 31
17969: PUSH
17970: LD_EXP 31
17974: PUSH
17975: LD_VAR 0 1
17979: PPUSH
17980: CALL_OW 250
17984: ADD
17985: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17986: LD_ADDR_EXP 31
17990: PUSH
17991: LD_EXP 31
17995: PUSH
17996: LD_VAR 0 1
18000: PPUSH
18001: CALL_OW 251
18005: ADD
18006: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18007: LD_ADDR_EXP 31
18011: PUSH
18012: LD_EXP 31
18016: PUSH
18017: LD_VAR 0 1
18021: PPUSH
18022: CALL_OW 254
18026: ADD
18027: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18028: LD_VAR 0 1
18032: PPUSH
18033: CALL_OW 266
18037: PUSH
18038: LD_INT 5
18040: EQUAL
18041: IFFALSE 18120
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
18043: LD_ADDR_EXP 31
18047: PUSH
18048: LD_EXP 31
18052: PUSH
18053: LD_INT 4
18055: ADD
18056: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18057: LD_ADDR_EXP 31
18061: PUSH
18062: LD_EXP 31
18066: PUSH
18067: LD_VAR 0 1
18071: PPUSH
18072: CALL_OW 250
18076: ADD
18077: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18078: LD_ADDR_EXP 31
18082: PUSH
18083: LD_EXP 31
18087: PUSH
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 251
18097: ADD
18098: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18099: LD_ADDR_EXP 31
18103: PUSH
18104: LD_EXP 31
18108: PUSH
18109: LD_VAR 0 1
18113: PPUSH
18114: CALL_OW 254
18118: ADD
18119: ST_TO_ADDR
// end ; end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18120: LD_EXP 48
18124: PUSH
18125: LD_VAR 0 1
18129: PPUSH
18130: CALL_OW 257
18134: PUSH
18135: LD_INT 3
18137: EQUAL
18138: AND
18139: PUSH
18140: LD_VAR 0 1
18144: PPUSH
18145: CALL_OW 255
18149: PUSH
18150: LD_INT 3
18152: EQUAL
18153: AND
18154: PUSH
18155: LD_INT 21
18157: PPUSH
18158: CALL_OW 302
18162: AND
18163: PUSH
18164: LD_INT 21
18166: PPUSH
18167: CALL_OW 255
18171: PUSH
18172: LD_INT 3
18174: EQUAL
18175: AND
18176: IFFALSE 18258
// begin ruMechCounter := ruMechCounter - 1 ;
18178: LD_ADDR_EXP 48
18182: PUSH
18183: LD_EXP 48
18187: PUSH
18188: LD_INT 1
18190: MINUS
18191: ST_TO_ADDR
// uc_side = 3 ;
18192: LD_ADDR_OWVAR 20
18196: PUSH
18197: LD_INT 3
18199: ST_TO_ADDR
// uc_nation = 3 ;
18200: LD_ADDR_OWVAR 21
18204: PUSH
18205: LD_INT 3
18207: ST_TO_ADDR
// hc_gallery :=  ;
18208: LD_ADDR_OWVAR 33
18212: PUSH
18213: LD_STRING 
18215: ST_TO_ADDR
// hc_name :=  ;
18216: LD_ADDR_OWVAR 26
18220: PUSH
18221: LD_STRING 
18223: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18224: LD_INT 0
18226: PPUSH
18227: LD_EXP 34
18231: PPUSH
18232: LD_EXP 35
18236: PPUSH
18237: CALL_OW 12
18241: PPUSH
18242: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
18246: CALL_OW 44
18250: PPUSH
18251: LD_INT 21
18253: PPUSH
18254: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18258: LD_VAR 0 1
18262: PPUSH
18263: CALL_OW 255
18267: PUSH
18268: LD_INT 3
18270: EQUAL
18271: PUSH
18272: LD_VAR 0 1
18276: PPUSH
18277: CALL_OW 264
18281: PUSH
18282: LD_INT 52
18284: EQUAL
18285: AND
18286: PUSH
18287: LD_INT 21
18289: PPUSH
18290: CALL_OW 302
18294: AND
18295: PUSH
18296: LD_INT 21
18298: PPUSH
18299: CALL_OW 255
18303: PUSH
18304: LD_INT 3
18306: EQUAL
18307: AND
18308: IFFALSE 18329
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18310: LD_INT 21
18312: PPUSH
18313: LD_INT 22
18315: PPUSH
18316: LD_INT 1
18318: PPUSH
18319: LD_INT 1
18321: PPUSH
18322: LD_INT 52
18324: PPUSH
18325: CALL_OW 125
// end ;
18329: PPOPN 1
18331: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18332: LD_INT 0
18334: PPUSH
18335: PPUSH
18336: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18337: LD_VAR 0 1
18341: PPUSH
18342: CALL_OW 264
18346: PUSH
18347: LD_INT 51
18349: EQUAL
18350: PUSH
18351: LD_VAR 0 1
18355: PPUSH
18356: CALL_OW 255
18360: PUSH
18361: LD_INT 3
18363: EQUAL
18364: AND
18365: IFFALSE 18427
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18367: LD_ADDR_VAR 0 5
18371: PUSH
18372: LD_INT 2
18374: PPUSH
18375: CALL_OW 274
18379: PPUSH
18380: LD_INT 1
18382: PPUSH
18383: CALL_OW 275
18387: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18388: LD_INT 2
18390: PPUSH
18391: CALL_OW 274
18395: PPUSH
18396: LD_INT 1
18398: PPUSH
18399: LD_VAR 0 5
18403: PUSH
18404: LD_INT 100
18406: MINUS
18407: PPUSH
18408: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18412: LD_VAR 0 1
18416: PPUSH
18417: LD_INT 1
18419: PPUSH
18420: LD_INT 100
18422: PPUSH
18423: CALL_OW 291
// end ; if building = rufabsupp then
18427: LD_VAR 0 2
18431: PUSH
18432: LD_INT 17
18434: EQUAL
18435: IFFALSE 18449
// SetSide ( vehicle , 6 ) ;
18437: LD_VAR 0 1
18441: PPUSH
18442: LD_INT 6
18444: PPUSH
18445: CALL_OW 235
// end ;
18449: PPOPN 5
18451: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 255
18461: PUSH
18462: LD_INT 3
18464: EQUAL
18465: IFFALSE 18496
// begin tamedApemans = tamedApemans + 1 ;
18467: LD_ADDR_EXP 32
18471: PUSH
18472: LD_EXP 32
18476: PUSH
18477: LD_INT 1
18479: PLUS
18480: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18481: LD_VAR 0 1
18485: PPUSH
18486: LD_INT 106
18488: PPUSH
18489: LD_INT 85
18491: PPUSH
18492: CALL_OW 111
// end ; end ;
18496: PPOPN 2
18498: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18499: LD_INT 0
18501: PPUSH
18502: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18503: LD_VAR 0 1
18507: PPUSH
18508: CALL_OW 255
18512: PUSH
18513: LD_INT 3
18515: EQUAL
18516: PUSH
18517: LD_VAR 0 1
18521: PPUSH
18522: CALL_OW 247
18526: PUSH
18527: LD_INT 2
18529: EQUAL
18530: AND
18531: IFFALSE 18640
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18533: LD_VAR 0 1
18537: PPUSH
18538: CALL_OW 264
18542: PUSH
18543: LD_INT 42
18545: EQUAL
18546: PUSH
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 264
18556: PUSH
18557: LD_INT 43
18559: EQUAL
18560: OR
18561: PUSH
18562: LD_VAR 0 1
18566: PPUSH
18567: CALL_OW 264
18571: PUSH
18572: LD_INT 44
18574: EQUAL
18575: OR
18576: PUSH
18577: LD_VAR 0 1
18581: PPUSH
18582: CALL_OW 264
18586: PUSH
18587: LD_INT 46
18589: EQUAL
18590: OR
18591: IFFALSE 18640
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18593: LD_INT 21
18595: PPUSH
18596: LD_VAR 0 1
18600: PPUSH
18601: CALL_OW 265
18605: PPUSH
18606: LD_VAR 0 1
18610: PPUSH
18611: CALL_OW 262
18615: PPUSH
18616: LD_VAR 0 1
18620: PPUSH
18621: CALL_OW 263
18625: PPUSH
18626: LD_VAR 0 1
18630: PPUSH
18631: CALL_OW 264
18635: PPUSH
18636: CALL_OW 185
// end ;
18640: PPOPN 3
18642: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18643: LD_VAR 0 1
18647: PPUSH
18648: CALL_OW 255
18652: PUSH
18653: LD_INT 3
18655: EQUAL
18656: PUSH
18657: LD_VAR 0 2
18661: PPUSH
18662: CALL_OW 255
18666: PUSH
18667: LD_INT 3
18669: EQUAL
18670: AND
18671: PUSH
18672: LD_VAR 0 1
18676: PPUSH
18677: CALL_OW 302
18681: AND
18682: IFFALSE 18724
// begin ComRepairVehicle ( human , vehicle ) ;
18684: LD_VAR 0 2
18688: PPUSH
18689: LD_VAR 0 1
18693: PPUSH
18694: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18698: LD_VAR 0 2
18702: PPUSH
18703: LD_VAR 0 1
18707: PPUSH
18708: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18712: LD_VAR 0 1
18716: PPUSH
18717: LD_INT 100
18719: PPUSH
18720: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18724: LD_VAR 0 1
18728: PPUSH
18729: CALL_OW 255
18733: PUSH
18734: LD_INT 3
18736: EQUAL
18737: PUSH
18738: LD_VAR 0 2
18742: PPUSH
18743: CALL_OW 255
18747: PUSH
18748: LD_INT 3
18750: EQUAL
18751: AND
18752: PUSH
18753: LD_INT 21
18755: PPUSH
18756: CALL_OW 302
18760: AND
18761: PUSH
18762: LD_VAR 0 1
18766: PPUSH
18767: CALL_OW 302
18771: NOT
18772: AND
18773: IFFALSE 18787
// ComEnterUnit ( human , rufab ) ;
18775: LD_VAR 0 2
18779: PPUSH
18780: LD_INT 21
18782: PPUSH
18783: CALL_OW 120
// end ;
18787: PPOPN 2
18789: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18790: LD_VAR 0 1
18794: PUSH
18795: LD_INT 21
18797: EQUAL
18798: PUSH
18799: LD_VAR 0 2
18803: PPUSH
18804: CALL_OW 255
18808: PUSH
18809: LD_INT 3
18811: EQUAL
18812: AND
18813: IFFALSE 18827
// SetLives ( human , 1000 ) ;
18815: LD_VAR 0 2
18819: PPUSH
18820: LD_INT 1000
18822: PPUSH
18823: CALL_OW 234
// end ;
18827: PPOPN 2
18829: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18830: LD_VAR 0 1
18834: PPUSH
18835: CALL 35368 0 1
// end ; end_of_file
18839: PPOPN 1
18841: END
// every 0 0$30 trigger cratesStatus = 1 do
18842: LD_EXP 38
18846: PUSH
18847: LD_INT 1
18849: EQUAL
18850: IFFALSE 18903
18852: GO 18854
18854: DISABLE
// begin enable ;
18855: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
18856: LD_INT 350
18858: PUSH
18859: LD_INT 875
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 1
18868: PPUSH
18869: LD_INT 2
18871: PPUSH
18872: CALL_OW 12
18876: ARRAY
18877: PPUSH
18878: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
18882: LD_INT 1
18884: PPUSH
18885: LD_INT 5
18887: PPUSH
18888: CALL_OW 12
18892: PPUSH
18893: LD_INT 7
18895: PPUSH
18896: LD_INT 1
18898: PPUSH
18899: CALL_OW 55
// end ;
18903: END
// every 1 1$0 trigger cratesStatus = 2 do
18904: LD_EXP 38
18908: PUSH
18909: LD_INT 2
18911: EQUAL
18912: IFFALSE 18995
18914: GO 18916
18916: DISABLE
// begin enable ;
18917: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18918: LD_INT 3150
18920: PUSH
18921: LD_INT 4550
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 1
18930: PPUSH
18931: LD_INT 2
18933: PPUSH
18934: CALL_OW 12
18938: ARRAY
18939: PPUSH
18940: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18944: LD_INT 2
18946: PUSH
18947: LD_INT 5
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 1
18956: PPUSH
18957: LD_INT 2
18959: PPUSH
18960: CALL_OW 12
18964: ARRAY
18965: PPUSH
18966: LD_INT 6
18968: PUSH
18969: LD_INT 7
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: LD_INT 1
18978: PPUSH
18979: LD_INT 2
18981: PPUSH
18982: CALL_OW 12
18986: ARRAY
18987: PPUSH
18988: LD_INT 1
18990: PPUSH
18991: CALL_OW 55
// end ;
18995: END
// every 0 0$30 + 0 0$10 do
18996: GO 18998
18998: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18999: LD_INT 4
19001: PUSH
19002: LD_INT 5
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 1
19011: PPUSH
19012: LD_INT 2
19014: PPUSH
19015: CALL_OW 12
19019: ARRAY
19020: PPUSH
19021: LD_INT 7
19023: PPUSH
19024: LD_INT 1
19026: PPUSH
19027: CALL_OW 55
// Wait ( 0 0$15 ) ;
19031: LD_INT 525
19033: PPUSH
19034: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19038: LD_INT 4
19040: PUSH
19041: LD_INT 5
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 1
19050: PPUSH
19051: LD_INT 2
19053: PPUSH
19054: CALL_OW 12
19058: ARRAY
19059: PPUSH
19060: LD_INT 7
19062: PPUSH
19063: LD_INT 1
19065: PPUSH
19066: CALL_OW 55
// Wait ( 0 0$20 ) ;
19070: LD_INT 700
19072: PPUSH
19073: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19077: LD_INT 4
19079: PUSH
19080: LD_INT 5
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 1
19089: PPUSH
19090: LD_INT 2
19092: PPUSH
19093: CALL_OW 12
19097: ARRAY
19098: PPUSH
19099: LD_INT 7
19101: PPUSH
19102: LD_INT 1
19104: PPUSH
19105: CALL_OW 55
// end ; end_of_file
19109: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
19110: LD_EXP 24
19114: PUSH
19115: LD_INT 1
19117: EQUAL
19118: IFFALSE 19419
19120: GO 19122
19122: DISABLE
19123: LD_INT 0
19125: PPUSH
19126: PPUSH
19127: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19128: LD_ADDR_VAR 0 2
19132: PUSH
19133: LD_INT 22
19135: PUSH
19136: LD_INT 1
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 21
19145: PUSH
19146: LD_INT 3
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 2
19155: PUSH
19156: LD_INT 30
19158: PUSH
19159: LD_INT 0
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 30
19168: PUSH
19169: LD_INT 1
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: LIST
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: LIST
19185: PPUSH
19186: CALL_OW 69
19190: ST_TO_ADDR
// for i in tmp do
19191: LD_ADDR_VAR 0 1
19195: PUSH
19196: LD_VAR 0 2
19200: PUSH
19201: FOR_IN
19202: IFFALSE 19235
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19204: LD_ADDR_VAR 0 3
19208: PUSH
19209: LD_VAR 0 3
19213: PUSH
19214: LD_VAR 0 1
19218: PPUSH
19219: CALL_OW 274
19223: PPUSH
19224: LD_INT 1
19226: PPUSH
19227: CALL_OW 275
19231: PLUS
19232: ST_TO_ADDR
19233: GO 19201
19235: POP
19236: POP
// strings = [ ] ;
19237: LD_ADDR_EXP 27
19241: PUSH
19242: EMPTY
19243: ST_TO_ADDR
// if tmp = 0 then
19244: LD_VAR 0 2
19248: PUSH
19249: LD_INT 0
19251: EQUAL
19252: IFFALSE 19277
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19254: LD_ADDR_EXP 27
19258: PUSH
19259: LD_EXP 27
19263: PUSH
19264: LD_STRING #Am06-1
19266: PUSH
19267: LD_EXP 25
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: ADD
19276: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19277: LD_VAR 0 2
19281: PUSH
19282: LD_INT 0
19284: GREATER
19285: PUSH
19286: LD_EXP 25
19290: PUSH
19291: LD_VAR 0 3
19295: GREATER
19296: AND
19297: IFFALSE 19328
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19299: LD_ADDR_EXP 27
19303: PUSH
19304: LD_EXP 27
19308: PUSH
19309: LD_STRING #Am06-1
19311: PUSH
19312: LD_EXP 25
19316: PUSH
19317: LD_VAR 0 3
19321: MINUS
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: ADD
19327: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19328: LD_VAR 0 2
19332: PUSH
19333: LD_INT 0
19335: GREATER
19336: PUSH
19337: LD_EXP 25
19341: PUSH
19342: LD_VAR 0 3
19346: LESSEQUAL
19347: AND
19348: IFFALSE 19371
// strings = strings ^ [ #Am06-1 , 0 ] ;
19350: LD_ADDR_EXP 27
19354: PUSH
19355: LD_EXP 27
19359: PUSH
19360: LD_STRING #Am06-1
19362: PUSH
19363: LD_INT 0
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: ADD
19370: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19371: LD_ADDR_EXP 26
19375: PUSH
19376: LD_EXP 26
19380: PUSH
19381: LD_INT 35
19383: MINUS
19384: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19385: LD_ADDR_EXP 27
19389: PUSH
19390: LD_EXP 27
19394: PUSH
19395: LD_STRING #Am06-2
19397: PUSH
19398: LD_EXP 26
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: ADD
19407: ST_TO_ADDR
// display_strings = strings ;
19408: LD_ADDR_OWVAR 47
19412: PUSH
19413: LD_EXP 27
19417: ST_TO_ADDR
// enable ;
19418: ENABLE
// end ; end_of_file
19419: PPOPN 3
19421: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19422: LD_INT 0
19424: PPUSH
19425: PPUSH
19426: PPUSH
19427: PPUSH
19428: PPUSH
19429: PPUSH
19430: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19431: LD_ADDR_VAR 0 3
19435: PUSH
19436: LD_INT 22
19438: PUSH
19439: LD_INT 1
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 2
19448: PUSH
19449: LD_INT 30
19451: PUSH
19452: LD_INT 0
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 30
19461: PUSH
19462: LD_INT 1
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: LIST
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PPUSH
19478: CALL_OW 69
19482: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19483: LD_INT 35
19485: PPUSH
19486: CALL_OW 67
// until depot ;
19490: LD_VAR 0 3
19494: IFFALSE 19431
// repeat wait ( 0 0$1 ) ;
19496: LD_INT 35
19498: PPUSH
19499: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19503: LD_ADDR_VAR 0 4
19507: PUSH
19508: LD_INT 22
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 91
19520: PUSH
19521: LD_VAR 0 3
19525: PUSH
19526: LD_INT 1
19528: ARRAY
19529: PUSH
19530: LD_INT 15
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 21
19540: PUSH
19541: LD_INT 1
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 2
19550: PUSH
19551: LD_INT 25
19553: PUSH
19554: LD_INT 1
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 25
19563: PUSH
19564: LD_INT 2
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 25
19573: PUSH
19574: LD_INT 3
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 25
19583: PUSH
19584: LD_INT 4
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 3
19600: PUSH
19601: LD_INT 54
19603: PUSH
19604: EMPTY
19605: LIST
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 3
19613: PUSH
19614: LD_INT 55
19616: PUSH
19617: EMPTY
19618: LIST
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: PPUSH
19632: CALL_OW 69
19636: PUSH
19637: LD_EXP 2
19641: PUSH
19642: LD_EXP 3
19646: PUSH
19647: LD_EXP 4
19651: PUSH
19652: LD_EXP 5
19656: PUSH
19657: LD_EXP 7
19661: PUSH
19662: LD_EXP 8
19666: PUSH
19667: LD_EXP 9
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: PUSH
19681: LD_EXP 46
19685: ADD
19686: DIFF
19687: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19688: LD_VAR 0 4
19692: PUSH
19693: LD_INT 1
19695: PPUSH
19696: CALL_OW 463
19700: NOT
19701: AND
19702: IFFALSE 19496
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19704: LD_ADDR_VAR 0 4
19708: PUSH
19709: LD_VAR 0 4
19713: PUSH
19714: LD_INT 1
19716: PPUSH
19717: LD_VAR 0 4
19721: PPUSH
19722: CALL_OW 12
19726: ARRAY
19727: ST_TO_ADDR
// blockSpawn = 1 ;
19728: LD_ADDR_EXP 29
19732: PUSH
19733: LD_INT 1
19735: ST_TO_ADDR
// uc_side = 2 ;
19736: LD_ADDR_OWVAR 20
19740: PUSH
19741: LD_INT 2
19743: ST_TO_ADDR
// uc_nation = 2 ;
19744: LD_ADDR_OWVAR 21
19748: PUSH
19749: LD_INT 2
19751: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19752: LD_ADDR_EXP 19
19756: PUSH
19757: LD_STRING Kurt
19759: PPUSH
19760: LD_INT 0
19762: PPUSH
19763: CALL 6061 0 2
19767: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19768: LD_EXP 19
19772: PPUSH
19773: LD_VAR 0 4
19777: PPUSH
19778: CALL_OW 250
19782: PPUSH
19783: LD_VAR 0 4
19787: PPUSH
19788: CALL_OW 251
19792: PPUSH
19793: LD_INT 5
19795: PPUSH
19796: LD_INT 1
19798: PPUSH
19799: CALL_OW 50
// InGameOn ;
19803: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19807: LD_EXP 19
19811: PPUSH
19812: CALL_OW 87
// wait ( 0 0$2 ) ;
19816: LD_INT 70
19818: PPUSH
19819: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19823: LD_EXP 19
19827: PPUSH
19828: LD_VAR 0 4
19832: PPUSH
19833: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19837: LD_VAR 0 4
19841: PPUSH
19842: LD_EXP 19
19846: PPUSH
19847: CALL_OW 112
// wait ( 0 0$1 ) ;
19851: LD_INT 35
19853: PPUSH
19854: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19858: LD_VAR 0 4
19862: PPUSH
19863: LD_EXP 19
19867: PPUSH
19868: CALL_OW 119
// DialogueOn ;
19872: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19876: LD_EXP 19
19880: PPUSH
19881: LD_STRING D2-Kurt-1
19883: PPUSH
19884: CALL_OW 88
// if tmp = JMM then
19888: LD_VAR 0 4
19892: PUSH
19893: LD_EXP 1
19897: EQUAL
19898: IFFALSE 19990
// begin Say ( JMM , D2-JMM-1 ) ;
19900: LD_EXP 1
19904: PPUSH
19905: LD_STRING D2-JMM-1
19907: PPUSH
19908: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19912: LD_EXP 19
19916: PPUSH
19917: LD_STRING D2-Kurt-2
19919: PPUSH
19920: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19924: LD_EXP 1
19928: PPUSH
19929: LD_STRING D2-JMM-2
19931: PPUSH
19932: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19936: LD_EXP 19
19940: PPUSH
19941: LD_STRING D2-Kurt-3
19943: PPUSH
19944: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19948: LD_EXP 1
19952: PPUSH
19953: LD_STRING D2-JMM-3
19955: PPUSH
19956: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19960: LD_EXP 19
19964: PPUSH
19965: LD_STRING D2-Kurt-4
19967: PPUSH
19968: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19972: LD_EXP 1
19976: PPUSH
19977: LD_STRING D2-JMM-4
19979: PPUSH
19980: CALL_OW 88
// DialogueOff ;
19984: CALL_OW 7
// end else
19988: GO 20300
// begin if GetSex ( tmp ) = 1 then
19990: LD_VAR 0 4
19994: PPUSH
19995: CALL_OW 258
19999: PUSH
20000: LD_INT 1
20002: EQUAL
20003: IFFALSE 20017
// Say ( tmp , D2-Sol1-1 ) ;
20005: LD_VAR 0 4
20009: PPUSH
20010: LD_STRING D2-Sol1-1
20012: PPUSH
20013: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20017: LD_VAR 0 4
20021: PPUSH
20022: CALL_OW 258
20026: PUSH
20027: LD_INT 2
20029: EQUAL
20030: IFFALSE 20044
// Say ( tmp , D2-FSol1-1 ) ;
20032: LD_VAR 0 4
20036: PPUSH
20037: LD_STRING D2-FSol1-1
20039: PPUSH
20040: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
20044: LD_EXP 19
20048: PPUSH
20049: LD_STRING D2-Kurt-2
20051: PPUSH
20052: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20056: LD_VAR 0 4
20060: PPUSH
20061: CALL_OW 258
20065: PUSH
20066: LD_INT 1
20068: EQUAL
20069: IFFALSE 20083
// Say ( tmp , D2-Sol1-2 ) ;
20071: LD_VAR 0 4
20075: PPUSH
20076: LD_STRING D2-Sol1-2
20078: PPUSH
20079: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20083: LD_VAR 0 4
20087: PPUSH
20088: CALL_OW 258
20092: PUSH
20093: LD_INT 2
20095: EQUAL
20096: IFFALSE 20110
// Say ( tmp , D2-FSol1-2 ) ;
20098: LD_VAR 0 4
20102: PPUSH
20103: LD_STRING D2-FSol1-2
20105: PPUSH
20106: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20110: LD_EXP 19
20114: PPUSH
20115: LD_STRING D2-Kurt-3
20117: PPUSH
20118: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20122: LD_VAR 0 4
20126: PPUSH
20127: CALL_OW 258
20131: PUSH
20132: LD_INT 1
20134: EQUAL
20135: IFFALSE 20149
// Say ( tmp , D2-Sol1-3 ) ;
20137: LD_VAR 0 4
20141: PPUSH
20142: LD_STRING D2-Sol1-3
20144: PPUSH
20145: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20149: LD_VAR 0 4
20153: PPUSH
20154: CALL_OW 258
20158: PUSH
20159: LD_INT 2
20161: EQUAL
20162: IFFALSE 20176
// Say ( tmp , D2-FSol1-3 ) ;
20164: LD_VAR 0 4
20168: PPUSH
20169: LD_STRING D2-FSol1-3
20171: PPUSH
20172: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20176: LD_EXP 19
20180: PPUSH
20181: LD_STRING D2-Kurt-4
20183: PPUSH
20184: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20188: LD_VAR 0 4
20192: PPUSH
20193: CALL_OW 258
20197: PUSH
20198: LD_INT 1
20200: EQUAL
20201: IFFALSE 20215
// Say ( tmp , D2-Sol1-4 ) ;
20203: LD_VAR 0 4
20207: PPUSH
20208: LD_STRING D2-Sol1-4
20210: PPUSH
20211: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20215: LD_VAR 0 4
20219: PPUSH
20220: CALL_OW 258
20224: PUSH
20225: LD_INT 2
20227: EQUAL
20228: IFFALSE 20242
// Say ( tmp , D2-FSol1-4 ) ;
20230: LD_VAR 0 4
20234: PPUSH
20235: LD_STRING D2-FSol1-4
20237: PPUSH
20238: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20242: LD_VAR 0 4
20246: PPUSH
20247: CALL_OW 258
20251: PUSH
20252: LD_INT 1
20254: EQUAL
20255: IFFALSE 20269
// Say ( tmp , D2-Sol1-5 ) ;
20257: LD_VAR 0 4
20261: PPUSH
20262: LD_STRING D2-Sol1-5
20264: PPUSH
20265: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20269: LD_VAR 0 4
20273: PPUSH
20274: CALL_OW 258
20278: PUSH
20279: LD_INT 2
20281: EQUAL
20282: IFFALSE 20296
// Say ( tmp , D2-FSol1-5 ) ;
20284: LD_VAR 0 4
20288: PPUSH
20289: LD_STRING D2-FSol1-5
20291: PPUSH
20292: CALL_OW 88
// DialogueOff ;
20296: CALL_OW 7
// end ; dec = ShowQuery1 ;
20300: LD_ADDR_VAR 0 6
20304: PUSH
20305: CALL 6585 0 0
20309: ST_TO_ADDR
// if dec = 1 then
20310: LD_VAR 0 6
20314: PUSH
20315: LD_INT 1
20317: EQUAL
20318: IFFALSE 20380
// begin DialogueOn ;
20320: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20324: LD_EXP 19
20328: PPUSH
20329: LD_STRING D2a-Kurt-1
20331: PPUSH
20332: CALL_OW 88
// DialogueOff ;
20336: CALL_OW 7
// InGameOff ;
20340: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20344: LD_INT 1
20346: PPUSH
20347: LD_INT 2
20349: PPUSH
20350: LD_INT 2
20352: PPUSH
20353: LD_INT 1
20355: PPUSH
20356: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20360: LD_EXP 19
20364: PPUSH
20365: LD_INT 8
20367: PPUSH
20368: CALL_OW 113
// readyToEscape = 1 ;
20372: LD_ADDR_EXP 21
20376: PUSH
20377: LD_INT 1
20379: ST_TO_ADDR
// end ; if dec = 2 then
20380: LD_VAR 0 6
20384: PUSH
20385: LD_INT 2
20387: EQUAL
20388: IFFALSE 20908
// begin DialogueOn ;
20390: CALL_OW 6
// if tmp = JMM then
20394: LD_VAR 0 4
20398: PUSH
20399: LD_EXP 1
20403: EQUAL
20404: IFFALSE 20460
// begin Say ( JMM , D2b-JMM-1 ) ;
20406: LD_EXP 1
20410: PPUSH
20411: LD_STRING D2b-JMM-1
20413: PPUSH
20414: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20418: LD_EXP 19
20422: PPUSH
20423: LD_STRING D2b-Kurt-1
20425: PPUSH
20426: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20430: LD_EXP 1
20434: PPUSH
20435: LD_STRING D2b-JMM-2
20437: PPUSH
20438: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20442: LD_EXP 19
20446: PPUSH
20447: LD_STRING D2b-Kurt-2
20449: PPUSH
20450: CALL_OW 88
// DialogueOff ;
20454: CALL_OW 7
// end else
20458: GO 20650
// begin if GetSex ( tmp ) = 1 then
20460: LD_VAR 0 4
20464: PPUSH
20465: CALL_OW 258
20469: PUSH
20470: LD_INT 1
20472: EQUAL
20473: IFFALSE 20487
// Say ( tmp , D2b-Sol1-1 ) ;
20475: LD_VAR 0 4
20479: PPUSH
20480: LD_STRING D2b-Sol1-1
20482: PPUSH
20483: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20487: LD_VAR 0 4
20491: PPUSH
20492: CALL_OW 258
20496: PUSH
20497: LD_INT 2
20499: EQUAL
20500: IFFALSE 20514
// Say ( tmp , D2b-FSol1-1 ) ;
20502: LD_VAR 0 4
20506: PPUSH
20507: LD_STRING D2b-FSol1-1
20509: PPUSH
20510: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20514: LD_EXP 19
20518: PPUSH
20519: LD_STRING D2b-Kurt-1
20521: PPUSH
20522: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20526: LD_VAR 0 4
20530: PPUSH
20531: CALL_OW 258
20535: PUSH
20536: LD_INT 1
20538: EQUAL
20539: IFFALSE 20553
// Say ( tmp , D2b-Sol1-2 ) ;
20541: LD_VAR 0 4
20545: PPUSH
20546: LD_STRING D2b-Sol1-2
20548: PPUSH
20549: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20553: LD_VAR 0 4
20557: PPUSH
20558: CALL_OW 258
20562: PUSH
20563: LD_INT 2
20565: EQUAL
20566: IFFALSE 20580
// Say ( tmp , D2b-FSol1-2 ) ;
20568: LD_VAR 0 4
20572: PPUSH
20573: LD_STRING D2b-FSol1-2
20575: PPUSH
20576: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20580: LD_EXP 19
20584: PPUSH
20585: LD_STRING D2b-Kurt-2
20587: PPUSH
20588: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20592: LD_VAR 0 4
20596: PPUSH
20597: CALL_OW 258
20601: PUSH
20602: LD_INT 1
20604: EQUAL
20605: IFFALSE 20619
// Say ( tmp , D2c-Sol1-2 ) ;
20607: LD_VAR 0 4
20611: PPUSH
20612: LD_STRING D2c-Sol1-2
20614: PPUSH
20615: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20619: LD_VAR 0 4
20623: PPUSH
20624: CALL_OW 258
20628: PUSH
20629: LD_INT 2
20631: EQUAL
20632: IFFALSE 20646
// Say ( tmp , D2c-FSol1-2 ) ;
20634: LD_VAR 0 4
20638: PPUSH
20639: LD_STRING D2c-FSol1-2
20641: PPUSH
20642: CALL_OW 88
// DialogueOff ;
20646: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20650: LD_ADDR_VAR 0 7
20654: PUSH
20655: CALL 6659 0 0
20659: ST_TO_ADDR
// if dec2 = 1 then
20660: LD_VAR 0 7
20664: PUSH
20665: LD_INT 1
20667: EQUAL
20668: IFFALSE 20730
// begin DialogueOn ;
20670: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20674: LD_EXP 19
20678: PPUSH
20679: LD_STRING D2a-Kurt-1
20681: PPUSH
20682: CALL_OW 88
// DialogueOff ;
20686: CALL_OW 7
// InGameOff ;
20690: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20694: LD_INT 1
20696: PPUSH
20697: LD_INT 2
20699: PPUSH
20700: LD_INT 2
20702: PPUSH
20703: LD_INT 1
20705: PPUSH
20706: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20710: LD_EXP 19
20714: PPUSH
20715: LD_INT 8
20717: PPUSH
20718: CALL_OW 113
// readyToEscape = 1 ;
20722: LD_ADDR_EXP 21
20726: PUSH
20727: LD_INT 1
20729: ST_TO_ADDR
// end ; if dec2 = 2 then
20730: LD_VAR 0 7
20734: PUSH
20735: LD_INT 2
20737: EQUAL
20738: IFFALSE 20908
// begin if tmp = JMM then
20740: LD_VAR 0 4
20744: PUSH
20745: LD_EXP 1
20749: EQUAL
20750: IFFALSE 20810
// begin DialogueOn ;
20752: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20756: LD_EXP 1
20760: PPUSH
20761: LD_STRING D2c-JMM-1
20763: PPUSH
20764: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20768: LD_EXP 19
20772: PPUSH
20773: LD_STRING D2c-Kurt-1
20775: PPUSH
20776: CALL_OW 88
// DialogueOff ;
20780: CALL_OW 7
// InGameOff ;
20784: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20788: LD_EXP 19
20792: PPUSH
20793: LD_INT 8
20795: PPUSH
20796: CALL_OW 113
// readyToEscape = 1 ;
20800: LD_ADDR_EXP 21
20804: PUSH
20805: LD_INT 1
20807: ST_TO_ADDR
// end else
20808: GO 20908
// begin DialogueOn ;
20810: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20814: LD_VAR 0 4
20818: PPUSH
20819: CALL_OW 258
20823: PUSH
20824: LD_INT 1
20826: EQUAL
20827: IFFALSE 20841
// Say ( tmp , D2c-Sol1-1 ) ;
20829: LD_VAR 0 4
20833: PPUSH
20834: LD_STRING D2c-Sol1-1
20836: PPUSH
20837: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20841: LD_VAR 0 4
20845: PPUSH
20846: CALL_OW 258
20850: PUSH
20851: LD_INT 2
20853: EQUAL
20854: IFFALSE 20868
// Say ( tmp , D2c-FSol1-1 ) ;
20856: LD_VAR 0 4
20860: PPUSH
20861: LD_STRING D2c-FSol1-1
20863: PPUSH
20864: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20868: LD_EXP 19
20872: PPUSH
20873: LD_STRING D2c-Kurt-1
20875: PPUSH
20876: CALL_OW 88
// DialogueOff ;
20880: CALL_OW 7
// InGameOff ;
20884: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20888: LD_EXP 19
20892: PPUSH
20893: LD_INT 8
20895: PPUSH
20896: CALL_OW 113
// readyToEscape = 1 ;
20900: LD_ADDR_EXP 21
20904: PUSH
20905: LD_INT 1
20907: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20908: LD_VAR 0 6
20912: PUSH
20913: LD_INT 3
20915: EQUAL
20916: IFFALSE 21090
// begin DialogueOn ;
20918: CALL_OW 6
// if tmp = JMM then
20922: LD_VAR 0 4
20926: PUSH
20927: LD_EXP 1
20931: EQUAL
20932: IFFALSE 20992
// begin DialogueOn ;
20934: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20938: LD_EXP 1
20942: PPUSH
20943: LD_STRING D2c-JMM-1
20945: PPUSH
20946: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20950: LD_EXP 19
20954: PPUSH
20955: LD_STRING D2c-Kurt-1
20957: PPUSH
20958: CALL_OW 88
// DialogueOff ;
20962: CALL_OW 7
// InGameOff ;
20966: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20970: LD_EXP 19
20974: PPUSH
20975: LD_INT 8
20977: PPUSH
20978: CALL_OW 113
// readyToEscape = 1 ;
20982: LD_ADDR_EXP 21
20986: PUSH
20987: LD_INT 1
20989: ST_TO_ADDR
// end else
20990: GO 21090
// begin DialogueOn ;
20992: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20996: LD_VAR 0 4
21000: PPUSH
21001: CALL_OW 258
21005: PUSH
21006: LD_INT 1
21008: EQUAL
21009: IFFALSE 21023
// Say ( tmp , D2c-Sol1-1 ) ;
21011: LD_VAR 0 4
21015: PPUSH
21016: LD_STRING D2c-Sol1-1
21018: PPUSH
21019: CALL_OW 88
// if GetSex ( tmp ) = 2 then
21023: LD_VAR 0 4
21027: PPUSH
21028: CALL_OW 258
21032: PUSH
21033: LD_INT 2
21035: EQUAL
21036: IFFALSE 21050
// Say ( tmp , D2c-FSol1-1 ) ;
21038: LD_VAR 0 4
21042: PPUSH
21043: LD_STRING D2c-FSol1-1
21045: PPUSH
21046: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21050: LD_EXP 19
21054: PPUSH
21055: LD_STRING D2c-Kurt-1
21057: PPUSH
21058: CALL_OW 88
// DialogueOff ;
21062: CALL_OW 7
// InGameOff ;
21066: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21070: LD_EXP 19
21074: PPUSH
21075: LD_INT 8
21077: PPUSH
21078: CALL_OW 113
// readyToEscape = 1 ;
21082: LD_ADDR_EXP 21
21086: PUSH
21087: LD_INT 1
21089: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
21090: LD_ADDR_EXP 29
21094: PUSH
21095: LD_INT 0
21097: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21098: LD_INT 35
21100: PPUSH
21101: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
21105: LD_EXP 19
21109: PPUSH
21110: LD_INT 8
21112: PPUSH
21113: CALL_OW 308
21117: PUSH
21118: LD_EXP 21
21122: AND
21123: PUSH
21124: LD_EXP 19
21128: PPUSH
21129: CALL_OW 301
21133: OR
21134: IFFALSE 21098
// if IsDead ( Kurt ) then
21136: LD_EXP 19
21140: PPUSH
21141: CALL_OW 301
21145: IFFALSE 21149
// exit ;
21147: GO 21218
// RemoveUnit ( Kurt ) ;
21149: LD_EXP 19
21153: PPUSH
21154: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
21158: LD_EXP 19
21162: PPUSH
21163: LD_STRING Kurt
21165: PPUSH
21166: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
21170: LD_INT 1
21172: PPUSH
21173: LD_INT 2
21175: PPUSH
21176: CALL_OW 81
21180: PUSH
21181: LD_INT 0
21183: EQUAL
21184: IFFALSE 21194
// KurtStatus = 1 ;
21186: LD_ADDR_EXP 20
21190: PUSH
21191: LD_INT 1
21193: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
21194: LD_INT 1
21196: PPUSH
21197: LD_INT 2
21199: PPUSH
21200: CALL_OW 81
21204: PUSH
21205: LD_INT 2
21207: EQUAL
21208: IFFALSE 21218
// KurtStatus = 2 ;
21210: LD_ADDR_EXP 20
21214: PUSH
21215: LD_INT 2
21217: ST_TO_ADDR
// end ; end_of_file
21218: LD_VAR 0 1
21222: RET
// every 0 0$1 do
21223: GO 21225
21225: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
21226: LD_INT 3
21228: PPUSH
21229: LD_INT 32
21231: PPUSH
21232: LD_INT 3
21234: PPUSH
21235: CALL 6714 0 3
21239: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21240: GO 21242
21242: DISABLE
21243: LD_INT 0
21245: PPUSH
// begin enemyWayX = [ ] ;
21246: LD_ADDR_EXP 49
21250: PUSH
21251: EMPTY
21252: ST_TO_ADDR
// enemyWayY = [ ] ;
21253: LD_ADDR_EXP 50
21257: PUSH
21258: EMPTY
21259: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
21260: LD_ADDR_VAR 0 1
21264: PUSH
21265: LD_INT 1
21267: PPUSH
21268: LD_INT 2
21270: PPUSH
21271: CALL_OW 12
21275: ST_TO_ADDR
// if rnd = 1 then
21276: LD_VAR 0 1
21280: PUSH
21281: LD_INT 1
21283: EQUAL
21284: IFFALSE 21324
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21286: LD_ADDR_EXP 49
21290: PUSH
21291: LD_INT 93
21293: PUSH
21294: LD_INT 84
21296: PUSH
21297: LD_INT 104
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: LIST
21304: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21305: LD_ADDR_EXP 50
21309: PUSH
21310: LD_INT 51
21312: PUSH
21313: LD_INT 35
21315: PUSH
21316: LD_INT 28
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: LIST
21323: ST_TO_ADDR
// end ; if rnd = 2 then
21324: LD_VAR 0 1
21328: PUSH
21329: LD_INT 2
21331: EQUAL
21332: IFFALSE 21388
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21334: LD_ADDR_EXP 49
21338: PUSH
21339: LD_INT 93
21341: PUSH
21342: LD_INT 52
21344: PUSH
21345: LD_INT 34
21347: PUSH
21348: LD_INT 28
21350: PUSH
21351: LD_INT 30
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21361: LD_ADDR_EXP 50
21365: PUSH
21366: LD_INT 51
21368: PUSH
21369: LD_INT 45
21371: PUSH
21372: LD_INT 35
21374: PUSH
21375: LD_INT 26
21377: PUSH
21378: LD_INT 20
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: ST_TO_ADDR
// end ; enable ;
21388: ENABLE
// end ;
21389: PPOPN 1
21391: END
// every 0 0$1 do
21392: GO 21394
21394: DISABLE
// begin enable ;
21395: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21396: LD_INT 3
21398: PPUSH
21399: LD_INT 2
21401: PPUSH
21402: LD_INT 10
21404: PPUSH
21405: LD_EXP 31
21409: PPUSH
21410: CALL 8149 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21414: LD_INT 3
21416: PPUSH
21417: LD_INT 12
21419: PPUSH
21420: LD_EXP 31
21424: PPUSH
21425: CALL 10034 0 3
// if disableHealAI = 0 then
21429: LD_EXP 33
21433: PUSH
21434: LD_INT 0
21436: EQUAL
21437: IFFALSE 21458
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21439: LD_INT 3
21441: PPUSH
21442: LD_INT 9
21444: PPUSH
21445: LD_INT 10
21447: PPUSH
21448: LD_INT 32
21450: PUSH
21451: EMPTY
21452: LIST
21453: PPUSH
21454: CALL 8540 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21458: LD_INT 3
21460: PPUSH
21461: LD_INT 51
21463: PPUSH
21464: LD_INT 6
21466: PPUSH
21467: CALL 9248 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21471: LD_INT 3
21473: PPUSH
21474: LD_INT 12
21476: PPUSH
21477: LD_INT 121
21479: PPUSH
21480: LD_INT 100
21482: PPUSH
21483: CALL 7109 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21487: LD_INT 3
21489: PPUSH
21490: LD_INT 22
21492: PPUSH
21493: LD_EXP 49
21497: PPUSH
21498: LD_EXP 50
21502: PPUSH
21503: CALL 7312 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21507: LD_INT 3
21509: PPUSH
21510: LD_INT 10
21512: PPUSH
21513: CALL 9391 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21517: LD_INT 3
21519: PPUSH
21520: LD_INT 1
21522: PPUSH
21523: CALL 9804 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21527: LD_INT 2
21529: PPUSH
21530: CALL_OW 303
21534: PUSH
21535: LD_INT 2
21537: PPUSH
21538: CALL_OW 255
21542: PUSH
21543: LD_INT 1
21545: EQUAL
21546: OR
21547: IFFALSE 21559
// DefendDepot ( 3 , rudepo ) ;
21549: LD_INT 3
21551: PPUSH
21552: LD_INT 2
21554: PPUSH
21555: CALL 9084 0 2
// end ;
21559: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21560: LD_INT 22
21562: PUSH
21563: LD_INT 3
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 21
21572: PUSH
21573: LD_INT 2
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 55
21582: PUSH
21583: EMPTY
21584: LIST
21585: PUSH
21586: LD_INT 3
21588: PUSH
21589: LD_INT 34
21591: PUSH
21592: LD_INT 51
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: PPUSH
21609: CALL_OW 69
21613: PUSH
21614: LD_INT 0
21616: EQUAL
21617: PUSH
21618: LD_INT 21
21620: PPUSH
21621: CALL_OW 255
21625: PUSH
21626: LD_INT 3
21628: EQUAL
21629: AND
21630: PUSH
21631: LD_INT 21
21633: PPUSH
21634: CALL_OW 302
21638: AND
21639: PUSH
21640: LD_INT 2
21642: PPUSH
21643: CALL_OW 255
21647: PUSH
21648: LD_INT 3
21650: EQUAL
21651: AND
21652: PUSH
21653: LD_INT 2
21655: PPUSH
21656: CALL_OW 302
21660: AND
21661: IFFALSE 21841
21663: GO 21665
21665: DISABLE
// begin enable ;
21666: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21667: LD_INT 2
21669: PPUSH
21670: CALL_OW 274
21674: PPUSH
21675: LD_INT 1
21677: PPUSH
21678: LD_INT 1000
21680: PPUSH
21681: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21685: LD_INT 3
21687: PPUSH
21688: LD_INT 21
21690: PPUSH
21691: LD_INT 4
21693: PUSH
21694: LD_INT 5
21696: PUSH
21697: LD_INT 6
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: LIST
21704: PUSH
21705: LD_OWVAR 67
21709: ARRAY
21710: PPUSH
21711: LD_INT 43
21713: PUSH
21714: LD_INT 43
21716: PUSH
21717: LD_INT 44
21719: PUSH
21720: LD_INT 44
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 43
21731: PUSH
21732: LD_INT 43
21734: PUSH
21735: LD_INT 43
21737: PUSH
21738: LD_INT 44
21740: PUSH
21741: LD_INT 44
21743: PUSH
21744: LD_INT 46
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 43
21757: PUSH
21758: LD_INT 43
21760: PUSH
21761: LD_INT 43
21763: PUSH
21764: LD_INT 44
21766: PUSH
21767: LD_INT 44
21769: PUSH
21770: LD_INT 46
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: LIST
21785: PUSH
21786: LD_OWVAR 67
21790: ARRAY
21791: PPUSH
21792: LD_INT 1
21794: PPUSH
21795: LD_INT 1
21797: PPUSH
21798: LD_INT 22
21800: PUSH
21801: LD_INT 22
21803: PUSH
21804: LD_INT 24
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 1
21813: PPUSH
21814: LD_INT 2
21816: PPUSH
21817: CALL_OW 12
21821: ARRAY
21822: PUSH
21823: LD_INT 24
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: LIST
21830: PUSH
21831: LD_OWVAR 67
21835: ARRAY
21836: PPUSH
21837: CALL 6955 0 7
// end ;
21841: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21842: LD_INT 17
21844: PPUSH
21845: CALL_OW 255
21849: PUSH
21850: LD_INT 3
21852: EQUAL
21853: PUSH
21854: LD_INT 17
21856: PPUSH
21857: CALL_OW 302
21861: AND
21862: PUSH
21863: LD_INT 2
21865: PPUSH
21866: CALL_OW 255
21870: PUSH
21871: LD_INT 3
21873: EQUAL
21874: AND
21875: PUSH
21876: LD_INT 2
21878: PPUSH
21879: CALL_OW 302
21883: AND
21884: IFFALSE 21951
21886: GO 21888
21888: DISABLE
// begin enable ;
21889: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21890: LD_INT 17
21892: PPUSH
21893: LD_INT 22
21895: PPUSH
21896: LD_INT 1
21898: PPUSH
21899: LD_INT 1
21901: PPUSH
21902: LD_INT 42
21904: PUSH
21905: LD_INT 43
21907: PUSH
21908: LD_INT 44
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 1
21918: PPUSH
21919: LD_INT 3
21921: PPUSH
21922: CALL_OW 12
21926: ARRAY
21927: PPUSH
21928: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21932: LD_INT 17
21934: PPUSH
21935: LD_INT 22
21937: PPUSH
21938: LD_INT 1
21940: PPUSH
21941: LD_INT 1
21943: PPUSH
21944: LD_INT 51
21946: PPUSH
21947: CALL_OW 185
// end ;
21951: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21952: LD_INT 17
21954: PPUSH
21955: CALL_OW 302
21959: PUSH
21960: LD_INT 17
21962: PPUSH
21963: CALL_OW 255
21967: PUSH
21968: LD_INT 3
21970: EQUAL
21971: AND
21972: PUSH
21973: LD_INT 2
21975: PPUSH
21976: CALL_OW 302
21980: AND
21981: PUSH
21982: LD_INT 2
21984: PPUSH
21985: CALL_OW 255
21989: PUSH
21990: LD_INT 3
21992: EQUAL
21993: AND
21994: PUSH
21995: LD_INT 17
21997: PPUSH
21998: CALL_OW 313
22002: NOT
22003: AND
22004: IFFALSE 22098
22006: GO 22008
22008: DISABLE
22009: LD_INT 0
22011: PPUSH
// begin for i = 1 to 6 do
22012: LD_ADDR_VAR 0 1
22016: PUSH
22017: DOUBLE
22018: LD_INT 1
22020: DEC
22021: ST_TO_ADDR
22022: LD_INT 6
22024: PUSH
22025: FOR_TO
22026: IFFALSE 22096
// begin uc_side = 3 ;
22028: LD_ADDR_OWVAR 20
22032: PUSH
22033: LD_INT 3
22035: ST_TO_ADDR
// uc_nation = 3 ;
22036: LD_ADDR_OWVAR 21
22040: PUSH
22041: LD_INT 3
22043: ST_TO_ADDR
// hc_gallery :=  ;
22044: LD_ADDR_OWVAR 33
22048: PUSH
22049: LD_STRING 
22051: ST_TO_ADDR
// hc_name :=  ;
22052: LD_ADDR_OWVAR 26
22056: PUSH
22057: LD_STRING 
22059: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
22060: LD_INT 0
22062: PPUSH
22063: LD_EXP 34
22067: PPUSH
22068: LD_EXP 35
22072: PPUSH
22073: CALL_OW 12
22077: PPUSH
22078: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
22082: CALL_OW 44
22086: PPUSH
22087: LD_INT 17
22089: PPUSH
22090: CALL_OW 52
// end ;
22094: GO 22025
22096: POP
22097: POP
// end ;
22098: PPOPN 1
22100: END
// every 2 2$0 do var i , j ;
22101: GO 22103
22103: DISABLE
22104: LD_INT 0
22106: PPUSH
22107: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
22108: LD_INT 14700
22110: PUSH
22111: LD_INT 33600
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 1
22120: PPUSH
22121: LD_INT 2
22123: PPUSH
22124: CALL_OW 12
22128: ARRAY
22129: PPUSH
22130: CALL_OW 67
// disableHealAI = 1 ;
22134: LD_ADDR_EXP 33
22138: PUSH
22139: LD_INT 1
22141: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22142: LD_ADDR_VAR 0 1
22146: PUSH
22147: LD_INT 22
22149: PUSH
22150: LD_INT 3
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 25
22159: PUSH
22160: LD_INT 4
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PPUSH
22171: CALL_OW 69
22175: PUSH
22176: FOR_IN
22177: IFFALSE 22190
// ComExitBuilding ( i ) ;
22179: LD_VAR 0 1
22183: PPUSH
22184: CALL_OW 122
22188: GO 22176
22190: POP
22191: POP
// wait ( 0 0$1 ) ;
22192: LD_INT 35
22194: PPUSH
22195: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22199: LD_INT 35
22201: PPUSH
22202: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22206: LD_ADDR_VAR 0 1
22210: PUSH
22211: LD_INT 22
22213: PUSH
22214: LD_INT 3
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 25
22223: PUSH
22224: LD_INT 4
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PPUSH
22235: CALL_OW 69
22239: PUSH
22240: FOR_IN
22241: IFFALSE 22318
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
22243: LD_ADDR_VAR 0 2
22247: PUSH
22248: LD_INT 17
22250: PPUSH
22251: LD_INT 22
22253: PUSH
22254: LD_INT 0
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 25
22263: PUSH
22264: LD_INT 12
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PPUSH
22275: CALL_OW 70
22279: PUSH
22280: FOR_IN
22281: IFFALSE 22314
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22283: LD_VAR 0 1
22287: PPUSH
22288: LD_VAR 0 2
22292: PPUSH
22293: CALL_OW 250
22297: PPUSH
22298: LD_VAR 0 2
22302: PPUSH
22303: CALL_OW 251
22307: PPUSH
22308: CALL_OW 191
// end ;
22312: GO 22280
22314: POP
22315: POP
// end ;
22316: GO 22240
22318: POP
22319: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22320: LD_INT 22
22322: PUSH
22323: LD_INT 3
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 25
22332: PUSH
22333: LD_INT 4
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PPUSH
22344: CALL_OW 69
22348: PUSH
22349: LD_INT 0
22351: EQUAL
22352: PUSH
22353: LD_EXP 32
22357: PUSH
22358: LD_INT 6
22360: PUSH
22361: LD_INT 7
22363: PUSH
22364: LD_INT 8
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: LIST
22371: PUSH
22372: LD_OWVAR 67
22376: ARRAY
22377: GREATEREQUAL
22378: OR
22379: PUSH
22380: LD_INT 17
22382: PPUSH
22383: LD_INT 22
22385: PUSH
22386: LD_INT 0
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 25
22395: PUSH
22396: LD_INT 12
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PPUSH
22407: CALL_OW 70
22411: PUSH
22412: LD_INT 0
22414: EQUAL
22415: OR
22416: IFFALSE 22199
// disableHealAI = 0 ;
22418: LD_ADDR_EXP 33
22422: PUSH
22423: LD_INT 0
22425: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22426: LD_ADDR_VAR 0 1
22430: PUSH
22431: LD_INT 22
22433: PUSH
22434: LD_INT 3
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PUSH
22441: LD_INT 25
22443: PUSH
22444: LD_INT 12
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PPUSH
22455: CALL_OW 69
22459: PUSH
22460: FOR_IN
22461: IFFALSE 22477
// SetClass ( i , 16 ) ;
22463: LD_VAR 0 1
22467: PPUSH
22468: LD_INT 16
22470: PPUSH
22471: CALL_OW 336
22475: GO 22460
22477: POP
22478: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22479: LD_ADDR_VAR 0 1
22483: PUSH
22484: LD_INT 22
22486: PUSH
22487: LD_INT 3
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 25
22496: PUSH
22497: LD_INT 4
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PPUSH
22508: CALL_OW 69
22512: PUSH
22513: FOR_IN
22514: IFFALSE 22533
// ComMoveXY ( i , 113 , 94 ) ;
22516: LD_VAR 0 1
22520: PPUSH
22521: LD_INT 113
22523: PPUSH
22524: LD_INT 94
22526: PPUSH
22527: CALL_OW 111
22531: GO 22513
22533: POP
22534: POP
// end ;
22535: PPOPN 2
22537: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22538: LD_INT 21
22540: PPUSH
22541: CALL_OW 255
22545: PUSH
22546: LD_INT 3
22548: EQUAL
22549: PUSH
22550: LD_INT 21
22552: PPUSH
22553: CALL_OW 302
22557: AND
22558: PUSH
22559: LD_INT 22
22561: PUSH
22562: LD_INT 3
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 34
22571: PUSH
22572: LD_INT 51
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PPUSH
22583: CALL_OW 69
22587: PUSH
22588: LD_INT 0
22590: EQUAL
22591: AND
22592: IFFALSE 22624
22594: GO 22596
22596: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22597: LD_INT 21
22599: PPUSH
22600: LD_INT 23
22602: PPUSH
22603: LD_INT 1
22605: PPUSH
22606: LD_INT 1
22608: PPUSH
22609: LD_INT 51
22611: PPUSH
22612: CALL_OW 185
// wait ( 5 5$0 ) ;
22616: LD_INT 10500
22618: PPUSH
22619: CALL_OW 67
// enable ;
22623: ENABLE
// end ; end_of_file
22624: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22625: LD_EXP 26
22629: PUSH
22630: LD_INT 0
22632: LESSEQUAL
22633: IFFALSE 22782
22635: GO 22637
22637: DISABLE
22638: LD_INT 0
22640: PPUSH
22641: PPUSH
22642: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22643: LD_ADDR_VAR 0 2
22647: PUSH
22648: LD_INT 22
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 21
22660: PUSH
22661: LD_INT 3
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 2
22670: PUSH
22671: LD_INT 30
22673: PUSH
22674: LD_INT 0
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 30
22683: PUSH
22684: LD_INT 1
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: LIST
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: LIST
22700: PPUSH
22701: CALL_OW 69
22705: ST_TO_ADDR
// for i in tmp do
22706: LD_ADDR_VAR 0 1
22710: PUSH
22711: LD_VAR 0 2
22715: PUSH
22716: FOR_IN
22717: IFFALSE 22750
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22719: LD_ADDR_VAR 0 3
22723: PUSH
22724: LD_VAR 0 3
22728: PUSH
22729: LD_VAR 0 1
22733: PPUSH
22734: CALL_OW 274
22738: PPUSH
22739: LD_INT 1
22741: PPUSH
22742: CALL_OW 275
22746: PLUS
22747: ST_TO_ADDR
22748: GO 22716
22750: POP
22751: POP
// if yourCrates >= needCrates then
22752: LD_VAR 0 3
22756: PUSH
22757: LD_EXP 25
22761: GREATEREQUAL
22762: IFFALSE 22775
// begin FinishMission ( yourCrates ) ;
22764: LD_VAR 0 3
22768: PPUSH
22769: CALL 22785 0 1
// end else
22773: GO 22782
// begin YouLost ( matmin ) ;
22775: LD_STRING matmin
22777: PPUSH
22778: CALL_OW 104
// end ; end ;
22782: PPOPN 3
22784: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22785: LD_INT 0
22787: PPUSH
22788: PPUSH
22789: PPUSH
22790: PPUSH
// if killCounter = 0 then
22791: LD_EXP 47
22795: PUSH
22796: LD_INT 0
22798: EQUAL
22799: IFFALSE 22808
// SetAchievement ( ACH_SURV ) ;
22801: LD_STRING ACH_SURV
22803: PPUSH
22804: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22808: LD_INT 22
22810: PUSH
22811: LD_INT 3
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 21
22820: PUSH
22821: LD_INT 3
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PPUSH
22832: CALL_OW 69
22836: PUSH
22837: LD_INT 0
22839: EQUAL
22840: IFFALSE 22856
// begin wait ( 3 ) ;
22842: LD_INT 3
22844: PPUSH
22845: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22849: LD_STRING ACH_BASEDESTROYER
22851: PPUSH
22852: CALL_OW 543
// end ; m1 := false ;
22856: LD_ADDR_VAR 0 3
22860: PUSH
22861: LD_INT 0
22863: ST_TO_ADDR
// m2 := false ;
22864: LD_ADDR_VAR 0 4
22868: PUSH
22869: LD_INT 0
22871: ST_TO_ADDR
// m3 := false ;
22872: LD_ADDR_VAR 0 5
22876: PUSH
22877: LD_INT 0
22879: ST_TO_ADDR
// if crates + 100 > crates then
22880: LD_VAR 0 1
22884: PUSH
22885: LD_INT 100
22887: PLUS
22888: PUSH
22889: LD_VAR 0 1
22893: GREATER
22894: IFFALSE 22926
// begin AddMedal ( cans , 1 ) ;
22896: LD_STRING cans
22898: PPUSH
22899: LD_INT 1
22901: PPUSH
22902: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22906: LD_INT 1
22908: PPUSH
22909: LD_STRING 06_crates_1
22911: PPUSH
22912: CALL_OW 39
// m1 := true ;
22916: LD_ADDR_VAR 0 3
22920: PUSH
22921: LD_INT 1
22923: ST_TO_ADDR
// end else
22924: GO 22947
// begin AddMedal ( cans , - 1 ) ;
22926: LD_STRING cans
22928: PPUSH
22929: LD_INT 1
22931: NEG
22932: PPUSH
22933: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22937: LD_INT 0
22939: PPUSH
22940: LD_STRING 06_crates_1
22942: PPUSH
22943: CALL_OW 39
// end ; if unitLost < 3 then
22947: LD_EXP 30
22951: PUSH
22952: LD_INT 3
22954: LESS
22955: IFFALSE 22977
// begin AddMedal ( people , 1 ) ;
22957: LD_STRING people
22959: PPUSH
22960: LD_INT 1
22962: PPUSH
22963: CALL_OW 101
// m2 := true ;
22967: LD_ADDR_VAR 0 4
22971: PUSH
22972: LD_INT 1
22974: ST_TO_ADDR
// end else
22975: GO 22988
// begin AddMedal ( people , - 1 ) ;
22977: LD_STRING people
22979: PPUSH
22980: LD_INT 1
22982: NEG
22983: PPUSH
22984: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22988: LD_EXP 28
22992: PPUSH
22993: LD_STRING 06_remoteVehs_1
22995: PPUSH
22996: CALL_OW 39
// if remoteVehiclesBuild = 1 then
23000: LD_EXP 28
23004: PUSH
23005: LD_INT 1
23007: EQUAL
23008: IFFALSE 23030
// begin AddMedal ( remote , 1 ) ;
23010: LD_STRING remote
23012: PPUSH
23013: LD_INT 1
23015: PPUSH
23016: CALL_OW 101
// m3 := true ;
23020: LD_ADDR_VAR 0 5
23024: PUSH
23025: LD_INT 1
23027: ST_TO_ADDR
// end else
23028: GO 23070
// begin if GetTech ( 18 , 1 ) = state_enabled then
23030: LD_INT 18
23032: PPUSH
23033: LD_INT 1
23035: PPUSH
23036: CALL_OW 321
23040: PUSH
23041: LD_INT 1
23043: EQUAL
23044: IFFALSE 23059
// begin AddMedal ( remote , - 1 ) ;
23046: LD_STRING remote
23048: PPUSH
23049: LD_INT 1
23051: NEG
23052: PPUSH
23053: CALL_OW 101
// end else
23057: GO 23070
// begin AddMedal ( remote , - 2 ) ;
23059: LD_STRING remote
23061: PPUSH
23062: LD_INT 2
23064: NEG
23065: PPUSH
23066: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
23070: LD_VAR 0 3
23074: PUSH
23075: LD_VAR 0 4
23079: AND
23080: PUSH
23081: LD_VAR 0 5
23085: AND
23086: IFFALSE 23102
// begin wait ( 3 ) ;
23088: LD_INT 3
23090: PPUSH
23091: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
23095: LD_STRING ACH_ASPEED_6
23097: PPUSH
23098: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
23102: LD_OWVAR 67
23106: PUSH
23107: LD_INT 3
23109: EQUAL
23110: PUSH
23111: LD_VAR 0 3
23115: AND
23116: PUSH
23117: LD_VAR 0 4
23121: AND
23122: PUSH
23123: LD_VAR 0 5
23127: AND
23128: IFFALSE 23140
// SetAchievementEX ( ACH_AMER , 6 ) ;
23130: LD_STRING ACH_AMER
23132: PPUSH
23133: LD_INT 6
23135: PPUSH
23136: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
23140: LD_EXP 20
23144: PPUSH
23145: LD_STRING 06_KurtStatus_1
23147: PPUSH
23148: CALL_OW 39
// GiveMedals ( Main ) ;
23152: LD_STRING Main
23154: PPUSH
23155: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
23159: LD_INT 22
23161: PUSH
23162: LD_INT 1
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 21
23171: PUSH
23172: LD_INT 1
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 50
23181: PUSH
23182: EMPTY
23183: LIST
23184: PUSH
23185: LD_INT 2
23187: PUSH
23188: LD_INT 25
23190: PUSH
23191: LD_INT 1
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 25
23200: PUSH
23201: LD_INT 2
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 25
23210: PUSH
23211: LD_INT 3
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 25
23220: PUSH
23221: LD_INT 4
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: PPUSH
23241: CALL_OW 69
23245: PPUSH
23246: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23250: LD_EXP 1
23254: PPUSH
23255: LD_EXP 43
23259: PUSH
23260: LD_STRING JMM
23262: STR
23263: PPUSH
23264: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23268: LD_EXP 2
23272: PPUSH
23273: LD_EXP 43
23277: PUSH
23278: LD_STRING Lisa
23280: STR
23281: PPUSH
23282: CALL 6213 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23286: LD_EXP 3
23290: PPUSH
23291: LD_EXP 43
23295: PUSH
23296: LD_STRING Bobby
23298: STR
23299: PPUSH
23300: CALL 6213 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23304: LD_EXP 4
23308: PPUSH
23309: LD_EXP 43
23313: PUSH
23314: LD_STRING Cyrus
23316: STR
23317: PPUSH
23318: CALL 6213 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23322: LD_EXP 5
23326: PPUSH
23327: LD_EXP 43
23331: PUSH
23332: LD_STRING Frank
23334: STR
23335: PPUSH
23336: CALL 6213 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23340: LD_EXP 6
23344: PPUSH
23345: LD_EXP 43
23349: PUSH
23350: LD_STRING Brown
23352: STR
23353: PPUSH
23354: CALL 6213 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23358: LD_EXP 7
23362: PPUSH
23363: LD_EXP 43
23367: PUSH
23368: LD_STRING Donaldson
23370: STR
23371: PPUSH
23372: CALL 6213 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23376: LD_EXP 8
23380: PPUSH
23381: LD_EXP 43
23385: PUSH
23386: LD_STRING Gladstone
23388: STR
23389: PPUSH
23390: CALL 6213 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23394: LD_EXP 9
23398: PPUSH
23399: LD_EXP 43
23403: PUSH
23404: LD_STRING Denis
23406: STR
23407: PPUSH
23408: CALL 6213 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23412: LD_EXP 15
23416: PPUSH
23417: LD_EXP 43
23421: PUSH
23422: LD_STRING Joan
23424: STR
23425: PPUSH
23426: CALL 6213 0 2
// if IsLive ( Joan ) then
23430: LD_EXP 15
23434: PPUSH
23435: CALL_OW 300
23439: IFFALSE 23453
// SaveCharacters ( Joan , Joan ) ;
23441: LD_EXP 15
23445: PPUSH
23446: LD_STRING Joan
23448: PPUSH
23449: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23453: LD_EXP 16
23457: PPUSH
23458: LD_STRING 06_JoanStatus_1
23460: PPUSH
23461: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23465: LD_INT 50
23467: PUSH
23468: EMPTY
23469: LIST
23470: PUSH
23471: LD_INT 22
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 21
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 2
23493: PUSH
23494: LD_INT 25
23496: PUSH
23497: LD_INT 1
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 25
23506: PUSH
23507: LD_INT 2
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 25
23516: PUSH
23517: LD_INT 3
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 25
23526: PUSH
23527: LD_INT 4
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: PPUSH
23547: CALL_OW 69
23551: PUSH
23552: LD_EXP 1
23556: PUSH
23557: LD_EXP 2
23561: PUSH
23562: LD_EXP 3
23566: PUSH
23567: LD_EXP 4
23571: PUSH
23572: LD_EXP 5
23576: PUSH
23577: LD_EXP 6
23581: PUSH
23582: LD_EXP 7
23586: PUSH
23587: LD_EXP 8
23591: PUSH
23592: LD_EXP 9
23596: PUSH
23597: LD_EXP 15
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: DIFF
23614: PPUSH
23615: LD_STRING 06_other_survivors
23617: PPUSH
23618: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23622: LD_INT 50
23624: PUSH
23625: EMPTY
23626: LIST
23627: PUSH
23628: LD_INT 22
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 21
23640: PUSH
23641: LD_INT 1
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 2
23650: PUSH
23651: LD_INT 25
23653: PUSH
23654: LD_INT 12
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 25
23663: PUSH
23664: LD_INT 16
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: LIST
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: PPUSH
23682: CALL_OW 69
23686: PPUSH
23687: LD_STRING 06_other_apemans
23689: PPUSH
23690: CALL_OW 38
// YouWin ;
23694: CALL_OW 103
// end ; end_of_file
23698: LD_VAR 0 2
23702: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23703: LD_EXP 39
23707: PUSH
23708: LD_INT 3
23710: EQUAL
23711: IFFALSE 23802
23713: GO 23715
23715: DISABLE
// begin enable ;
23716: ENABLE
// sendedConvoys = 0 ;
23717: LD_ADDR_EXP 39
23721: PUSH
23722: LD_INT 0
23724: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23725: LD_INT 6
23727: PPUSH
23728: LD_INT 3
23730: PPUSH
23731: LD_INT 3
23733: PUSH
23734: LD_INT 4
23736: PUSH
23737: LD_INT 6
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: LIST
23744: PUSH
23745: LD_OWVAR 67
23749: ARRAY
23750: PPUSH
23751: LD_INT 0
23753: PPUSH
23754: LD_INT 0
23756: PPUSH
23757: LD_INT 0
23759: PPUSH
23760: LD_INT 0
23762: PPUSH
23763: LD_EXP 34
23767: PPUSH
23768: LD_EXP 35
23772: PPUSH
23773: CALL_OW 12
23777: PPUSH
23778: LD_INT 16
23780: PPUSH
23781: LD_INT 15
23783: PPUSH
23784: LD_INT 1
23786: PPUSH
23787: LD_INT 1
23789: PPUSH
23790: LD_INT 2
23792: PPUSH
23793: CALL_OW 12
23797: PPUSH
23798: CALL 10632 0 12
// end ; end_of_file
23802: END
// export function PrepareNature ; var i , un ; begin
23803: LD_INT 0
23805: PPUSH
23806: PPUSH
23807: PPUSH
// for i = 1 to Difficulty + 2 do
23808: LD_ADDR_VAR 0 2
23812: PUSH
23813: DOUBLE
23814: LD_INT 1
23816: DEC
23817: ST_TO_ADDR
23818: LD_OWVAR 67
23822: PUSH
23823: LD_INT 2
23825: PLUS
23826: PUSH
23827: FOR_TO
23828: IFFALSE 23937
// begin hc_sex = sex_male ;
23830: LD_ADDR_OWVAR 27
23834: PUSH
23835: LD_INT 1
23837: ST_TO_ADDR
// uc_side = 0 ;
23838: LD_ADDR_OWVAR 20
23842: PUSH
23843: LD_INT 0
23845: ST_TO_ADDR
// uc_nation = nation_nature ;
23846: LD_ADDR_OWVAR 21
23850: PUSH
23851: LD_INT 0
23853: ST_TO_ADDR
// hc_class = class_tiger ;
23854: LD_ADDR_OWVAR 28
23858: PUSH
23859: LD_INT 14
23861: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23862: LD_ADDR_OWVAR 31
23866: PUSH
23867: LD_EXP 35
23871: PUSH
23872: LD_INT 0
23874: PUSH
23875: LD_INT 0
23877: PUSH
23878: LD_INT 0
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23887: LD_ADDR_OWVAR 35
23891: PUSH
23892: LD_INT 5
23894: NEG
23895: PPUSH
23896: LD_INT 5
23898: PPUSH
23899: CALL_OW 12
23903: PUSH
23904: LD_OWVAR 67
23908: MUL
23909: ST_TO_ADDR
// un = CreateHuman ;
23910: LD_ADDR_VAR 0 3
23914: PUSH
23915: CALL_OW 44
23919: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23920: LD_VAR 0 3
23924: PPUSH
23925: LD_INT 18
23927: PPUSH
23928: LD_INT 0
23930: PPUSH
23931: CALL_OW 49
// end ;
23935: GO 23827
23937: POP
23938: POP
// for i = 1 to rand ( 3 , 4 ) do
23939: LD_ADDR_VAR 0 2
23943: PUSH
23944: DOUBLE
23945: LD_INT 1
23947: DEC
23948: ST_TO_ADDR
23949: LD_INT 3
23951: PPUSH
23952: LD_INT 4
23954: PPUSH
23955: CALL_OW 12
23959: PUSH
23960: FOR_TO
23961: IFFALSE 24055
// begin hc_sex = sex_male ;
23963: LD_ADDR_OWVAR 27
23967: PUSH
23968: LD_INT 1
23970: ST_TO_ADDR
// uc_side = 0 ;
23971: LD_ADDR_OWVAR 20
23975: PUSH
23976: LD_INT 0
23978: ST_TO_ADDR
// uc_nation = nation_nature ;
23979: LD_ADDR_OWVAR 21
23983: PUSH
23984: LD_INT 0
23986: ST_TO_ADDR
// hc_class = 18 ;
23987: LD_ADDR_OWVAR 28
23991: PUSH
23992: LD_INT 18
23994: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23995: LD_ADDR_OWVAR 31
23999: PUSH
24000: LD_EXP 35
24004: PUSH
24005: LD_INT 0
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: ST_TO_ADDR
// hc_agressivity = 0 ;
24020: LD_ADDR_OWVAR 35
24024: PUSH
24025: LD_INT 0
24027: ST_TO_ADDR
// un = CreateHuman ;
24028: LD_ADDR_VAR 0 3
24032: PUSH
24033: CALL_OW 44
24037: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24038: LD_VAR 0 3
24042: PPUSH
24043: LD_INT 18
24045: PPUSH
24046: LD_INT 0
24048: PPUSH
24049: CALL_OW 49
// end ;
24053: GO 23960
24055: POP
24056: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
24057: LD_ADDR_VAR 0 2
24061: PUSH
24062: DOUBLE
24063: LD_INT 1
24065: DEC
24066: ST_TO_ADDR
24067: LD_INT 1
24069: PPUSH
24070: LD_INT 3
24072: PPUSH
24073: CALL_OW 12
24077: PUSH
24078: LD_OWVAR 67
24082: PLUS
24083: PUSH
24084: FOR_TO
24085: IFFALSE 24234
// begin hc_sex = sex_male ;
24087: LD_ADDR_OWVAR 27
24091: PUSH
24092: LD_INT 1
24094: ST_TO_ADDR
// uc_side = 0 ;
24095: LD_ADDR_OWVAR 20
24099: PUSH
24100: LD_INT 0
24102: ST_TO_ADDR
// uc_nation = nation_nature ;
24103: LD_ADDR_OWVAR 21
24107: PUSH
24108: LD_INT 0
24110: ST_TO_ADDR
// hc_class = class_apeman ;
24111: LD_ADDR_OWVAR 28
24115: PUSH
24116: LD_INT 12
24118: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24119: LD_ADDR_OWVAR 31
24123: PUSH
24124: LD_INT 2
24126: PPUSH
24127: LD_INT 5
24129: PPUSH
24130: CALL_OW 12
24134: PUSH
24135: LD_INT 0
24137: PPUSH
24138: LD_INT 2
24140: PPUSH
24141: CALL_OW 12
24145: PUSH
24146: LD_INT 0
24148: PUSH
24149: LD_INT 0
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
24158: LD_ADDR_OWVAR 35
24162: PUSH
24163: LD_INT 20
24165: PPUSH
24166: LD_INT 30
24168: PPUSH
24169: CALL_OW 12
24173: PUSH
24174: LD_INT 30
24176: PPUSH
24177: LD_INT 40
24179: PPUSH
24180: CALL_OW 12
24184: PUSH
24185: LD_INT 40
24187: PPUSH
24188: LD_INT 50
24190: PPUSH
24191: CALL_OW 12
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: LIST
24200: PUSH
24201: LD_OWVAR 67
24205: ARRAY
24206: ST_TO_ADDR
// un = CreateHuman ;
24207: LD_ADDR_VAR 0 3
24211: PUSH
24212: CALL_OW 44
24216: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
24217: LD_VAR 0 3
24221: PPUSH
24222: LD_INT 19
24224: PPUSH
24225: LD_INT 0
24227: PPUSH
24228: CALL_OW 49
// end ;
24232: GO 24084
24234: POP
24235: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
24236: LD_ADDR_VAR 0 2
24240: PUSH
24241: DOUBLE
24242: LD_INT 1
24244: DEC
24245: ST_TO_ADDR
24246: LD_INT 5
24248: PPUSH
24249: LD_INT 6
24251: PPUSH
24252: CALL_OW 12
24256: PUSH
24257: LD_OWVAR 67
24261: PLUS
24262: PUSH
24263: FOR_TO
24264: IFFALSE 24372
// begin hc_sex = sex_male ;
24266: LD_ADDR_OWVAR 27
24270: PUSH
24271: LD_INT 1
24273: ST_TO_ADDR
// uc_side = 0 ;
24274: LD_ADDR_OWVAR 20
24278: PUSH
24279: LD_INT 0
24281: ST_TO_ADDR
// uc_nation = nation_nature ;
24282: LD_ADDR_OWVAR 21
24286: PUSH
24287: LD_INT 0
24289: ST_TO_ADDR
// hc_class = class_apeman ;
24290: LD_ADDR_OWVAR 28
24294: PUSH
24295: LD_INT 12
24297: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24298: LD_ADDR_OWVAR 31
24302: PUSH
24303: LD_INT 2
24305: PPUSH
24306: LD_INT 5
24308: PPUSH
24309: CALL_OW 12
24313: PUSH
24314: LD_INT 0
24316: PPUSH
24317: LD_INT 2
24319: PPUSH
24320: CALL_OW 12
24324: PUSH
24325: LD_INT 0
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: ST_TO_ADDR
// hc_agressivity = 0 ;
24337: LD_ADDR_OWVAR 35
24341: PUSH
24342: LD_INT 0
24344: ST_TO_ADDR
// un = CreateHuman ;
24345: LD_ADDR_VAR 0 3
24349: PUSH
24350: CALL_OW 44
24354: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24355: LD_VAR 0 3
24359: PPUSH
24360: LD_INT 20
24362: PPUSH
24363: LD_INT 0
24365: PPUSH
24366: CALL_OW 49
// end ;
24370: GO 24263
24372: POP
24373: POP
// end ; end_of_file end_of_file
24374: LD_VAR 0 1
24378: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
24379: GO 24381
24381: DISABLE
// begin ru_radar := 98 ;
24382: LD_ADDR_EXP 51
24386: PUSH
24387: LD_INT 98
24389: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24390: LD_ADDR_EXP 52
24394: PUSH
24395: LD_INT 89
24397: ST_TO_ADDR
// us_hack := 99 ;
24398: LD_ADDR_EXP 53
24402: PUSH
24403: LD_INT 99
24405: ST_TO_ADDR
// us_artillery := 97 ;
24406: LD_ADDR_EXP 54
24410: PUSH
24411: LD_INT 97
24413: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24414: LD_ADDR_EXP 55
24418: PUSH
24419: LD_INT 91
24421: ST_TO_ADDR
// end ; end_of_file end_of_file
24422: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
24423: GO 24425
24425: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
24426: LD_STRING initStreamRollete();
24428: PPUSH
24429: CALL_OW 559
// InitStreamMode ;
24433: CALL 24442 0 0
// DefineStreamItems ( ) ;
24437: CALL 24882 0 0
// end ;
24441: END
// function InitStreamMode ; begin
24442: LD_INT 0
24444: PPUSH
// streamModeActive := false ;
24445: LD_ADDR_EXP 56
24449: PUSH
24450: LD_INT 0
24452: ST_TO_ADDR
// normalCounter := 36 ;
24453: LD_ADDR_EXP 57
24457: PUSH
24458: LD_INT 36
24460: ST_TO_ADDR
// hardcoreCounter := 16 ;
24461: LD_ADDR_EXP 58
24465: PUSH
24466: LD_INT 16
24468: ST_TO_ADDR
// sRocket := false ;
24469: LD_ADDR_EXP 61
24473: PUSH
24474: LD_INT 0
24476: ST_TO_ADDR
// sSpeed := false ;
24477: LD_ADDR_EXP 60
24481: PUSH
24482: LD_INT 0
24484: ST_TO_ADDR
// sEngine := false ;
24485: LD_ADDR_EXP 62
24489: PUSH
24490: LD_INT 0
24492: ST_TO_ADDR
// sSpec := false ;
24493: LD_ADDR_EXP 59
24497: PUSH
24498: LD_INT 0
24500: ST_TO_ADDR
// sLevel := false ;
24501: LD_ADDR_EXP 63
24505: PUSH
24506: LD_INT 0
24508: ST_TO_ADDR
// sArmoury := false ;
24509: LD_ADDR_EXP 64
24513: PUSH
24514: LD_INT 0
24516: ST_TO_ADDR
// sRadar := false ;
24517: LD_ADDR_EXP 65
24521: PUSH
24522: LD_INT 0
24524: ST_TO_ADDR
// sBunker := false ;
24525: LD_ADDR_EXP 66
24529: PUSH
24530: LD_INT 0
24532: ST_TO_ADDR
// sHack := false ;
24533: LD_ADDR_EXP 67
24537: PUSH
24538: LD_INT 0
24540: ST_TO_ADDR
// sFire := false ;
24541: LD_ADDR_EXP 68
24545: PUSH
24546: LD_INT 0
24548: ST_TO_ADDR
// sRefresh := false ;
24549: LD_ADDR_EXP 69
24553: PUSH
24554: LD_INT 0
24556: ST_TO_ADDR
// sExp := false ;
24557: LD_ADDR_EXP 70
24561: PUSH
24562: LD_INT 0
24564: ST_TO_ADDR
// sDepot := false ;
24565: LD_ADDR_EXP 71
24569: PUSH
24570: LD_INT 0
24572: ST_TO_ADDR
// sFlag := false ;
24573: LD_ADDR_EXP 72
24577: PUSH
24578: LD_INT 0
24580: ST_TO_ADDR
// sKamikadze := false ;
24581: LD_ADDR_EXP 80
24585: PUSH
24586: LD_INT 0
24588: ST_TO_ADDR
// sTroll := false ;
24589: LD_ADDR_EXP 81
24593: PUSH
24594: LD_INT 0
24596: ST_TO_ADDR
// sSlow := false ;
24597: LD_ADDR_EXP 82
24601: PUSH
24602: LD_INT 0
24604: ST_TO_ADDR
// sLack := false ;
24605: LD_ADDR_EXP 83
24609: PUSH
24610: LD_INT 0
24612: ST_TO_ADDR
// sTank := false ;
24613: LD_ADDR_EXP 85
24617: PUSH
24618: LD_INT 0
24620: ST_TO_ADDR
// sRemote := false ;
24621: LD_ADDR_EXP 86
24625: PUSH
24626: LD_INT 0
24628: ST_TO_ADDR
// sPowell := false ;
24629: LD_ADDR_EXP 87
24633: PUSH
24634: LD_INT 0
24636: ST_TO_ADDR
// sTeleport := false ;
24637: LD_ADDR_EXP 90
24641: PUSH
24642: LD_INT 0
24644: ST_TO_ADDR
// sOilTower := false ;
24645: LD_ADDR_EXP 92
24649: PUSH
24650: LD_INT 0
24652: ST_TO_ADDR
// sShovel := false ;
24653: LD_ADDR_EXP 93
24657: PUSH
24658: LD_INT 0
24660: ST_TO_ADDR
// sSheik := false ;
24661: LD_ADDR_EXP 94
24665: PUSH
24666: LD_INT 0
24668: ST_TO_ADDR
// sEarthquake := false ;
24669: LD_ADDR_EXP 96
24673: PUSH
24674: LD_INT 0
24676: ST_TO_ADDR
// sAI := false ;
24677: LD_ADDR_EXP 97
24681: PUSH
24682: LD_INT 0
24684: ST_TO_ADDR
// sCargo := false ;
24685: LD_ADDR_EXP 100
24689: PUSH
24690: LD_INT 0
24692: ST_TO_ADDR
// sDLaser := false ;
24693: LD_ADDR_EXP 101
24697: PUSH
24698: LD_INT 0
24700: ST_TO_ADDR
// sExchange := false ;
24701: LD_ADDR_EXP 102
24705: PUSH
24706: LD_INT 0
24708: ST_TO_ADDR
// sFac := false ;
24709: LD_ADDR_EXP 103
24713: PUSH
24714: LD_INT 0
24716: ST_TO_ADDR
// sPower := false ;
24717: LD_ADDR_EXP 104
24721: PUSH
24722: LD_INT 0
24724: ST_TO_ADDR
// sRandom := false ;
24725: LD_ADDR_EXP 105
24729: PUSH
24730: LD_INT 0
24732: ST_TO_ADDR
// sShield := false ;
24733: LD_ADDR_EXP 106
24737: PUSH
24738: LD_INT 0
24740: ST_TO_ADDR
// sTime := false ;
24741: LD_ADDR_EXP 107
24745: PUSH
24746: LD_INT 0
24748: ST_TO_ADDR
// sTools := false ;
24749: LD_ADDR_EXP 108
24753: PUSH
24754: LD_INT 0
24756: ST_TO_ADDR
// sSold := false ;
24757: LD_ADDR_EXP 73
24761: PUSH
24762: LD_INT 0
24764: ST_TO_ADDR
// sDiff := false ;
24765: LD_ADDR_EXP 74
24769: PUSH
24770: LD_INT 0
24772: ST_TO_ADDR
// sFog := false ;
24773: LD_ADDR_EXP 77
24777: PUSH
24778: LD_INT 0
24780: ST_TO_ADDR
// sReset := false ;
24781: LD_ADDR_EXP 78
24785: PUSH
24786: LD_INT 0
24788: ST_TO_ADDR
// sSun := false ;
24789: LD_ADDR_EXP 79
24793: PUSH
24794: LD_INT 0
24796: ST_TO_ADDR
// sTiger := false ;
24797: LD_ADDR_EXP 75
24801: PUSH
24802: LD_INT 0
24804: ST_TO_ADDR
// sBomb := false ;
24805: LD_ADDR_EXP 76
24809: PUSH
24810: LD_INT 0
24812: ST_TO_ADDR
// sWound := false ;
24813: LD_ADDR_EXP 84
24817: PUSH
24818: LD_INT 0
24820: ST_TO_ADDR
// sBetray := false ;
24821: LD_ADDR_EXP 88
24825: PUSH
24826: LD_INT 0
24828: ST_TO_ADDR
// sContamin := false ;
24829: LD_ADDR_EXP 89
24833: PUSH
24834: LD_INT 0
24836: ST_TO_ADDR
// sOil := false ;
24837: LD_ADDR_EXP 91
24841: PUSH
24842: LD_INT 0
24844: ST_TO_ADDR
// sStu := false ;
24845: LD_ADDR_EXP 95
24849: PUSH
24850: LD_INT 0
24852: ST_TO_ADDR
// sBazooka := false ;
24853: LD_ADDR_EXP 98
24857: PUSH
24858: LD_INT 0
24860: ST_TO_ADDR
// sMortar := false ;
24861: LD_ADDR_EXP 99
24865: PUSH
24866: LD_INT 0
24868: ST_TO_ADDR
// sRanger := false ;
24869: LD_ADDR_EXP 109
24873: PUSH
24874: LD_INT 0
24876: ST_TO_ADDR
// end ;
24877: LD_VAR 0 1
24881: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
24882: LD_INT 0
24884: PPUSH
24885: PPUSH
24886: PPUSH
24887: PPUSH
24888: PPUSH
// result := [ ] ;
24889: LD_ADDR_VAR 0 1
24893: PUSH
24894: EMPTY
24895: ST_TO_ADDR
// if campaign_id = 1 then
24896: LD_OWVAR 69
24900: PUSH
24901: LD_INT 1
24903: EQUAL
24904: IFFALSE 27842
// begin case mission_number of 1 :
24906: LD_OWVAR 70
24910: PUSH
24911: LD_INT 1
24913: DOUBLE
24914: EQUAL
24915: IFTRUE 24919
24917: GO 24983
24919: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
24920: LD_ADDR_VAR 0 1
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: LD_INT 4
24930: PUSH
24931: LD_INT 11
24933: PUSH
24934: LD_INT 12
24936: PUSH
24937: LD_INT 15
24939: PUSH
24940: LD_INT 16
24942: PUSH
24943: LD_INT 22
24945: PUSH
24946: LD_INT 23
24948: PUSH
24949: LD_INT 26
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 101
24965: PUSH
24966: LD_INT 102
24968: PUSH
24969: LD_INT 106
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: LIST
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: ST_TO_ADDR
24981: GO 27840
24983: LD_INT 2
24985: DOUBLE
24986: EQUAL
24987: IFTRUE 24991
24989: GO 25063
24991: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
24992: LD_ADDR_VAR 0 1
24996: PUSH
24997: LD_INT 2
24999: PUSH
25000: LD_INT 4
25002: PUSH
25003: LD_INT 11
25005: PUSH
25006: LD_INT 12
25008: PUSH
25009: LD_INT 15
25011: PUSH
25012: LD_INT 16
25014: PUSH
25015: LD_INT 22
25017: PUSH
25018: LD_INT 23
25020: PUSH
25021: LD_INT 26
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 101
25037: PUSH
25038: LD_INT 102
25040: PUSH
25041: LD_INT 105
25043: PUSH
25044: LD_INT 106
25046: PUSH
25047: LD_INT 108
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: ST_TO_ADDR
25061: GO 27840
25063: LD_INT 3
25065: DOUBLE
25066: EQUAL
25067: IFTRUE 25071
25069: GO 25147
25071: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
25072: LD_ADDR_VAR 0 1
25076: PUSH
25077: LD_INT 2
25079: PUSH
25080: LD_INT 4
25082: PUSH
25083: LD_INT 5
25085: PUSH
25086: LD_INT 11
25088: PUSH
25089: LD_INT 12
25091: PUSH
25092: LD_INT 15
25094: PUSH
25095: LD_INT 16
25097: PUSH
25098: LD_INT 22
25100: PUSH
25101: LD_INT 26
25103: PUSH
25104: LD_INT 36
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 101
25121: PUSH
25122: LD_INT 102
25124: PUSH
25125: LD_INT 105
25127: PUSH
25128: LD_INT 106
25130: PUSH
25131: LD_INT 108
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: ST_TO_ADDR
25145: GO 27840
25147: LD_INT 4
25149: DOUBLE
25150: EQUAL
25151: IFTRUE 25155
25153: GO 25239
25155: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
25156: LD_ADDR_VAR 0 1
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: LD_INT 4
25166: PUSH
25167: LD_INT 5
25169: PUSH
25170: LD_INT 8
25172: PUSH
25173: LD_INT 11
25175: PUSH
25176: LD_INT 12
25178: PUSH
25179: LD_INT 15
25181: PUSH
25182: LD_INT 16
25184: PUSH
25185: LD_INT 22
25187: PUSH
25188: LD_INT 23
25190: PUSH
25191: LD_INT 26
25193: PUSH
25194: LD_INT 36
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 101
25213: PUSH
25214: LD_INT 102
25216: PUSH
25217: LD_INT 105
25219: PUSH
25220: LD_INT 106
25222: PUSH
25223: LD_INT 108
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: ST_TO_ADDR
25237: GO 27840
25239: LD_INT 5
25241: DOUBLE
25242: EQUAL
25243: IFTRUE 25247
25245: GO 25347
25247: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
25248: LD_ADDR_VAR 0 1
25252: PUSH
25253: LD_INT 2
25255: PUSH
25256: LD_INT 4
25258: PUSH
25259: LD_INT 5
25261: PUSH
25262: LD_INT 6
25264: PUSH
25265: LD_INT 8
25267: PUSH
25268: LD_INT 11
25270: PUSH
25271: LD_INT 12
25273: PUSH
25274: LD_INT 15
25276: PUSH
25277: LD_INT 16
25279: PUSH
25280: LD_INT 22
25282: PUSH
25283: LD_INT 23
25285: PUSH
25286: LD_INT 25
25288: PUSH
25289: LD_INT 26
25291: PUSH
25292: LD_INT 36
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 101
25313: PUSH
25314: LD_INT 102
25316: PUSH
25317: LD_INT 105
25319: PUSH
25320: LD_INT 106
25322: PUSH
25323: LD_INT 108
25325: PUSH
25326: LD_INT 109
25328: PUSH
25329: LD_INT 112
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: ST_TO_ADDR
25345: GO 27840
25347: LD_INT 6
25349: DOUBLE
25350: EQUAL
25351: IFTRUE 25355
25353: GO 25475
25355: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
25356: LD_ADDR_VAR 0 1
25360: PUSH
25361: LD_INT 2
25363: PUSH
25364: LD_INT 4
25366: PUSH
25367: LD_INT 5
25369: PUSH
25370: LD_INT 6
25372: PUSH
25373: LD_INT 8
25375: PUSH
25376: LD_INT 11
25378: PUSH
25379: LD_INT 12
25381: PUSH
25382: LD_INT 15
25384: PUSH
25385: LD_INT 16
25387: PUSH
25388: LD_INT 20
25390: PUSH
25391: LD_INT 21
25393: PUSH
25394: LD_INT 22
25396: PUSH
25397: LD_INT 23
25399: PUSH
25400: LD_INT 25
25402: PUSH
25403: LD_INT 26
25405: PUSH
25406: LD_INT 30
25408: PUSH
25409: LD_INT 31
25411: PUSH
25412: LD_INT 32
25414: PUSH
25415: LD_INT 36
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 101
25441: PUSH
25442: LD_INT 102
25444: PUSH
25445: LD_INT 105
25447: PUSH
25448: LD_INT 106
25450: PUSH
25451: LD_INT 108
25453: PUSH
25454: LD_INT 109
25456: PUSH
25457: LD_INT 112
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: ST_TO_ADDR
25473: GO 27840
25475: LD_INT 7
25477: DOUBLE
25478: EQUAL
25479: IFTRUE 25483
25481: GO 25583
25483: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
25484: LD_ADDR_VAR 0 1
25488: PUSH
25489: LD_INT 2
25491: PUSH
25492: LD_INT 4
25494: PUSH
25495: LD_INT 5
25497: PUSH
25498: LD_INT 7
25500: PUSH
25501: LD_INT 11
25503: PUSH
25504: LD_INT 12
25506: PUSH
25507: LD_INT 15
25509: PUSH
25510: LD_INT 16
25512: PUSH
25513: LD_INT 20
25515: PUSH
25516: LD_INT 21
25518: PUSH
25519: LD_INT 22
25521: PUSH
25522: LD_INT 23
25524: PUSH
25525: LD_INT 25
25527: PUSH
25528: LD_INT 26
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 101
25549: PUSH
25550: LD_INT 102
25552: PUSH
25553: LD_INT 103
25555: PUSH
25556: LD_INT 105
25558: PUSH
25559: LD_INT 106
25561: PUSH
25562: LD_INT 108
25564: PUSH
25565: LD_INT 112
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: ST_TO_ADDR
25581: GO 27840
25583: LD_INT 8
25585: DOUBLE
25586: EQUAL
25587: IFTRUE 25591
25589: GO 25719
25591: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
25592: LD_ADDR_VAR 0 1
25596: PUSH
25597: LD_INT 2
25599: PUSH
25600: LD_INT 4
25602: PUSH
25603: LD_INT 5
25605: PUSH
25606: LD_INT 6
25608: PUSH
25609: LD_INT 7
25611: PUSH
25612: LD_INT 8
25614: PUSH
25615: LD_INT 11
25617: PUSH
25618: LD_INT 12
25620: PUSH
25621: LD_INT 15
25623: PUSH
25624: LD_INT 16
25626: PUSH
25627: LD_INT 20
25629: PUSH
25630: LD_INT 21
25632: PUSH
25633: LD_INT 22
25635: PUSH
25636: LD_INT 23
25638: PUSH
25639: LD_INT 25
25641: PUSH
25642: LD_INT 26
25644: PUSH
25645: LD_INT 30
25647: PUSH
25648: LD_INT 31
25650: PUSH
25651: LD_INT 32
25653: PUSH
25654: LD_INT 36
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 101
25681: PUSH
25682: LD_INT 102
25684: PUSH
25685: LD_INT 103
25687: PUSH
25688: LD_INT 105
25690: PUSH
25691: LD_INT 106
25693: PUSH
25694: LD_INT 108
25696: PUSH
25697: LD_INT 109
25699: PUSH
25700: LD_INT 112
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: ST_TO_ADDR
25717: GO 27840
25719: LD_INT 9
25721: DOUBLE
25722: EQUAL
25723: IFTRUE 25727
25725: GO 25863
25727: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
25728: LD_ADDR_VAR 0 1
25732: PUSH
25733: LD_INT 2
25735: PUSH
25736: LD_INT 4
25738: PUSH
25739: LD_INT 5
25741: PUSH
25742: LD_INT 6
25744: PUSH
25745: LD_INT 7
25747: PUSH
25748: LD_INT 8
25750: PUSH
25751: LD_INT 11
25753: PUSH
25754: LD_INT 12
25756: PUSH
25757: LD_INT 15
25759: PUSH
25760: LD_INT 16
25762: PUSH
25763: LD_INT 20
25765: PUSH
25766: LD_INT 21
25768: PUSH
25769: LD_INT 22
25771: PUSH
25772: LD_INT 23
25774: PUSH
25775: LD_INT 25
25777: PUSH
25778: LD_INT 26
25780: PUSH
25781: LD_INT 28
25783: PUSH
25784: LD_INT 30
25786: PUSH
25787: LD_INT 31
25789: PUSH
25790: LD_INT 32
25792: PUSH
25793: LD_INT 36
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 101
25821: PUSH
25822: LD_INT 102
25824: PUSH
25825: LD_INT 103
25827: PUSH
25828: LD_INT 105
25830: PUSH
25831: LD_INT 106
25833: PUSH
25834: LD_INT 108
25836: PUSH
25837: LD_INT 109
25839: PUSH
25840: LD_INT 112
25842: PUSH
25843: LD_INT 114
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: ST_TO_ADDR
25861: GO 27840
25863: LD_INT 10
25865: DOUBLE
25866: EQUAL
25867: IFTRUE 25871
25869: GO 26055
25871: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
25872: LD_ADDR_VAR 0 1
25876: PUSH
25877: LD_INT 2
25879: PUSH
25880: LD_INT 4
25882: PUSH
25883: LD_INT 5
25885: PUSH
25886: LD_INT 6
25888: PUSH
25889: LD_INT 7
25891: PUSH
25892: LD_INT 8
25894: PUSH
25895: LD_INT 9
25897: PUSH
25898: LD_INT 10
25900: PUSH
25901: LD_INT 11
25903: PUSH
25904: LD_INT 12
25906: PUSH
25907: LD_INT 13
25909: PUSH
25910: LD_INT 14
25912: PUSH
25913: LD_INT 15
25915: PUSH
25916: LD_INT 16
25918: PUSH
25919: LD_INT 17
25921: PUSH
25922: LD_INT 18
25924: PUSH
25925: LD_INT 19
25927: PUSH
25928: LD_INT 20
25930: PUSH
25931: LD_INT 21
25933: PUSH
25934: LD_INT 22
25936: PUSH
25937: LD_INT 23
25939: PUSH
25940: LD_INT 24
25942: PUSH
25943: LD_INT 25
25945: PUSH
25946: LD_INT 26
25948: PUSH
25949: LD_INT 28
25951: PUSH
25952: LD_INT 30
25954: PUSH
25955: LD_INT 31
25957: PUSH
25958: LD_INT 32
25960: PUSH
25961: LD_INT 36
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 101
25997: PUSH
25998: LD_INT 102
26000: PUSH
26001: LD_INT 103
26003: PUSH
26004: LD_INT 104
26006: PUSH
26007: LD_INT 105
26009: PUSH
26010: LD_INT 106
26012: PUSH
26013: LD_INT 107
26015: PUSH
26016: LD_INT 108
26018: PUSH
26019: LD_INT 109
26021: PUSH
26022: LD_INT 110
26024: PUSH
26025: LD_INT 111
26027: PUSH
26028: LD_INT 112
26030: PUSH
26031: LD_INT 114
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: ST_TO_ADDR
26053: GO 27840
26055: LD_INT 11
26057: DOUBLE
26058: EQUAL
26059: IFTRUE 26063
26061: GO 26255
26063: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
26064: LD_ADDR_VAR 0 1
26068: PUSH
26069: LD_INT 2
26071: PUSH
26072: LD_INT 3
26074: PUSH
26075: LD_INT 4
26077: PUSH
26078: LD_INT 5
26080: PUSH
26081: LD_INT 6
26083: PUSH
26084: LD_INT 7
26086: PUSH
26087: LD_INT 8
26089: PUSH
26090: LD_INT 9
26092: PUSH
26093: LD_INT 10
26095: PUSH
26096: LD_INT 11
26098: PUSH
26099: LD_INT 12
26101: PUSH
26102: LD_INT 13
26104: PUSH
26105: LD_INT 14
26107: PUSH
26108: LD_INT 15
26110: PUSH
26111: LD_INT 16
26113: PUSH
26114: LD_INT 17
26116: PUSH
26117: LD_INT 18
26119: PUSH
26120: LD_INT 19
26122: PUSH
26123: LD_INT 20
26125: PUSH
26126: LD_INT 21
26128: PUSH
26129: LD_INT 22
26131: PUSH
26132: LD_INT 23
26134: PUSH
26135: LD_INT 24
26137: PUSH
26138: LD_INT 25
26140: PUSH
26141: LD_INT 26
26143: PUSH
26144: LD_INT 28
26146: PUSH
26147: LD_INT 30
26149: PUSH
26150: LD_INT 31
26152: PUSH
26153: LD_INT 32
26155: PUSH
26156: LD_INT 34
26158: PUSH
26159: LD_INT 36
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 101
26197: PUSH
26198: LD_INT 102
26200: PUSH
26201: LD_INT 103
26203: PUSH
26204: LD_INT 104
26206: PUSH
26207: LD_INT 105
26209: PUSH
26210: LD_INT 106
26212: PUSH
26213: LD_INT 107
26215: PUSH
26216: LD_INT 108
26218: PUSH
26219: LD_INT 109
26221: PUSH
26222: LD_INT 110
26224: PUSH
26225: LD_INT 111
26227: PUSH
26228: LD_INT 112
26230: PUSH
26231: LD_INT 114
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: ST_TO_ADDR
26253: GO 27840
26255: LD_INT 12
26257: DOUBLE
26258: EQUAL
26259: IFTRUE 26263
26261: GO 26471
26263: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
26264: LD_ADDR_VAR 0 1
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: LD_INT 2
26274: PUSH
26275: LD_INT 3
26277: PUSH
26278: LD_INT 4
26280: PUSH
26281: LD_INT 5
26283: PUSH
26284: LD_INT 6
26286: PUSH
26287: LD_INT 7
26289: PUSH
26290: LD_INT 8
26292: PUSH
26293: LD_INT 9
26295: PUSH
26296: LD_INT 10
26298: PUSH
26299: LD_INT 11
26301: PUSH
26302: LD_INT 12
26304: PUSH
26305: LD_INT 13
26307: PUSH
26308: LD_INT 14
26310: PUSH
26311: LD_INT 15
26313: PUSH
26314: LD_INT 16
26316: PUSH
26317: LD_INT 17
26319: PUSH
26320: LD_INT 18
26322: PUSH
26323: LD_INT 19
26325: PUSH
26326: LD_INT 20
26328: PUSH
26329: LD_INT 21
26331: PUSH
26332: LD_INT 22
26334: PUSH
26335: LD_INT 23
26337: PUSH
26338: LD_INT 24
26340: PUSH
26341: LD_INT 25
26343: PUSH
26344: LD_INT 26
26346: PUSH
26347: LD_INT 27
26349: PUSH
26350: LD_INT 28
26352: PUSH
26353: LD_INT 30
26355: PUSH
26356: LD_INT 31
26358: PUSH
26359: LD_INT 32
26361: PUSH
26362: LD_INT 33
26364: PUSH
26365: LD_INT 34
26367: PUSH
26368: LD_INT 36
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 101
26409: PUSH
26410: LD_INT 102
26412: PUSH
26413: LD_INT 103
26415: PUSH
26416: LD_INT 104
26418: PUSH
26419: LD_INT 105
26421: PUSH
26422: LD_INT 106
26424: PUSH
26425: LD_INT 107
26427: PUSH
26428: LD_INT 108
26430: PUSH
26431: LD_INT 109
26433: PUSH
26434: LD_INT 110
26436: PUSH
26437: LD_INT 111
26439: PUSH
26440: LD_INT 112
26442: PUSH
26443: LD_INT 113
26445: PUSH
26446: LD_INT 114
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: ST_TO_ADDR
26469: GO 27840
26471: LD_INT 13
26473: DOUBLE
26474: EQUAL
26475: IFTRUE 26479
26477: GO 26675
26479: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
26480: LD_ADDR_VAR 0 1
26484: PUSH
26485: LD_INT 1
26487: PUSH
26488: LD_INT 2
26490: PUSH
26491: LD_INT 3
26493: PUSH
26494: LD_INT 4
26496: PUSH
26497: LD_INT 5
26499: PUSH
26500: LD_INT 8
26502: PUSH
26503: LD_INT 9
26505: PUSH
26506: LD_INT 10
26508: PUSH
26509: LD_INT 11
26511: PUSH
26512: LD_INT 12
26514: PUSH
26515: LD_INT 14
26517: PUSH
26518: LD_INT 15
26520: PUSH
26521: LD_INT 16
26523: PUSH
26524: LD_INT 17
26526: PUSH
26527: LD_INT 18
26529: PUSH
26530: LD_INT 19
26532: PUSH
26533: LD_INT 20
26535: PUSH
26536: LD_INT 21
26538: PUSH
26539: LD_INT 22
26541: PUSH
26542: LD_INT 23
26544: PUSH
26545: LD_INT 24
26547: PUSH
26548: LD_INT 25
26550: PUSH
26551: LD_INT 26
26553: PUSH
26554: LD_INT 27
26556: PUSH
26557: LD_INT 28
26559: PUSH
26560: LD_INT 30
26562: PUSH
26563: LD_INT 31
26565: PUSH
26566: LD_INT 32
26568: PUSH
26569: LD_INT 33
26571: PUSH
26572: LD_INT 34
26574: PUSH
26575: LD_INT 36
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 101
26613: PUSH
26614: LD_INT 102
26616: PUSH
26617: LD_INT 103
26619: PUSH
26620: LD_INT 104
26622: PUSH
26623: LD_INT 105
26625: PUSH
26626: LD_INT 106
26628: PUSH
26629: LD_INT 107
26631: PUSH
26632: LD_INT 108
26634: PUSH
26635: LD_INT 109
26637: PUSH
26638: LD_INT 110
26640: PUSH
26641: LD_INT 111
26643: PUSH
26644: LD_INT 112
26646: PUSH
26647: LD_INT 113
26649: PUSH
26650: LD_INT 114
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: ST_TO_ADDR
26673: GO 27840
26675: LD_INT 14
26677: DOUBLE
26678: EQUAL
26679: IFTRUE 26683
26681: GO 26895
26683: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
26684: LD_ADDR_VAR 0 1
26688: PUSH
26689: LD_INT 1
26691: PUSH
26692: LD_INT 2
26694: PUSH
26695: LD_INT 3
26697: PUSH
26698: LD_INT 4
26700: PUSH
26701: LD_INT 5
26703: PUSH
26704: LD_INT 6
26706: PUSH
26707: LD_INT 7
26709: PUSH
26710: LD_INT 8
26712: PUSH
26713: LD_INT 9
26715: PUSH
26716: LD_INT 10
26718: PUSH
26719: LD_INT 11
26721: PUSH
26722: LD_INT 12
26724: PUSH
26725: LD_INT 13
26727: PUSH
26728: LD_INT 14
26730: PUSH
26731: LD_INT 15
26733: PUSH
26734: LD_INT 16
26736: PUSH
26737: LD_INT 17
26739: PUSH
26740: LD_INT 18
26742: PUSH
26743: LD_INT 19
26745: PUSH
26746: LD_INT 20
26748: PUSH
26749: LD_INT 21
26751: PUSH
26752: LD_INT 22
26754: PUSH
26755: LD_INT 23
26757: PUSH
26758: LD_INT 24
26760: PUSH
26761: LD_INT 25
26763: PUSH
26764: LD_INT 26
26766: PUSH
26767: LD_INT 27
26769: PUSH
26770: LD_INT 28
26772: PUSH
26773: LD_INT 29
26775: PUSH
26776: LD_INT 30
26778: PUSH
26779: LD_INT 31
26781: PUSH
26782: LD_INT 32
26784: PUSH
26785: LD_INT 33
26787: PUSH
26788: LD_INT 34
26790: PUSH
26791: LD_INT 36
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 101
26833: PUSH
26834: LD_INT 102
26836: PUSH
26837: LD_INT 103
26839: PUSH
26840: LD_INT 104
26842: PUSH
26843: LD_INT 105
26845: PUSH
26846: LD_INT 106
26848: PUSH
26849: LD_INT 107
26851: PUSH
26852: LD_INT 108
26854: PUSH
26855: LD_INT 109
26857: PUSH
26858: LD_INT 110
26860: PUSH
26861: LD_INT 111
26863: PUSH
26864: LD_INT 112
26866: PUSH
26867: LD_INT 113
26869: PUSH
26870: LD_INT 114
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: ST_TO_ADDR
26893: GO 27840
26895: LD_INT 15
26897: DOUBLE
26898: EQUAL
26899: IFTRUE 26903
26901: GO 27115
26903: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
26904: LD_ADDR_VAR 0 1
26908: PUSH
26909: LD_INT 1
26911: PUSH
26912: LD_INT 2
26914: PUSH
26915: LD_INT 3
26917: PUSH
26918: LD_INT 4
26920: PUSH
26921: LD_INT 5
26923: PUSH
26924: LD_INT 6
26926: PUSH
26927: LD_INT 7
26929: PUSH
26930: LD_INT 8
26932: PUSH
26933: LD_INT 9
26935: PUSH
26936: LD_INT 10
26938: PUSH
26939: LD_INT 11
26941: PUSH
26942: LD_INT 12
26944: PUSH
26945: LD_INT 13
26947: PUSH
26948: LD_INT 14
26950: PUSH
26951: LD_INT 15
26953: PUSH
26954: LD_INT 16
26956: PUSH
26957: LD_INT 17
26959: PUSH
26960: LD_INT 18
26962: PUSH
26963: LD_INT 19
26965: PUSH
26966: LD_INT 20
26968: PUSH
26969: LD_INT 21
26971: PUSH
26972: LD_INT 22
26974: PUSH
26975: LD_INT 23
26977: PUSH
26978: LD_INT 24
26980: PUSH
26981: LD_INT 25
26983: PUSH
26984: LD_INT 26
26986: PUSH
26987: LD_INT 27
26989: PUSH
26990: LD_INT 28
26992: PUSH
26993: LD_INT 29
26995: PUSH
26996: LD_INT 30
26998: PUSH
26999: LD_INT 31
27001: PUSH
27002: LD_INT 32
27004: PUSH
27005: LD_INT 33
27007: PUSH
27008: LD_INT 34
27010: PUSH
27011: LD_INT 36
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 101
27053: PUSH
27054: LD_INT 102
27056: PUSH
27057: LD_INT 103
27059: PUSH
27060: LD_INT 104
27062: PUSH
27063: LD_INT 105
27065: PUSH
27066: LD_INT 106
27068: PUSH
27069: LD_INT 107
27071: PUSH
27072: LD_INT 108
27074: PUSH
27075: LD_INT 109
27077: PUSH
27078: LD_INT 110
27080: PUSH
27081: LD_INT 111
27083: PUSH
27084: LD_INT 112
27086: PUSH
27087: LD_INT 113
27089: PUSH
27090: LD_INT 114
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: ST_TO_ADDR
27113: GO 27840
27115: LD_INT 16
27117: DOUBLE
27118: EQUAL
27119: IFTRUE 27123
27121: GO 27247
27123: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
27124: LD_ADDR_VAR 0 1
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: LD_INT 4
27134: PUSH
27135: LD_INT 5
27137: PUSH
27138: LD_INT 7
27140: PUSH
27141: LD_INT 11
27143: PUSH
27144: LD_INT 12
27146: PUSH
27147: LD_INT 15
27149: PUSH
27150: LD_INT 16
27152: PUSH
27153: LD_INT 20
27155: PUSH
27156: LD_INT 21
27158: PUSH
27159: LD_INT 22
27161: PUSH
27162: LD_INT 23
27164: PUSH
27165: LD_INT 25
27167: PUSH
27168: LD_INT 26
27170: PUSH
27171: LD_INT 30
27173: PUSH
27174: LD_INT 31
27176: PUSH
27177: LD_INT 32
27179: PUSH
27180: LD_INT 33
27182: PUSH
27183: LD_INT 34
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 101
27209: PUSH
27210: LD_INT 102
27212: PUSH
27213: LD_INT 103
27215: PUSH
27216: LD_INT 106
27218: PUSH
27219: LD_INT 108
27221: PUSH
27222: LD_INT 112
27224: PUSH
27225: LD_INT 113
27227: PUSH
27228: LD_INT 114
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: ST_TO_ADDR
27245: GO 27840
27247: LD_INT 17
27249: DOUBLE
27250: EQUAL
27251: IFTRUE 27255
27253: GO 27467
27255: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
27256: LD_ADDR_VAR 0 1
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: LD_INT 2
27266: PUSH
27267: LD_INT 3
27269: PUSH
27270: LD_INT 4
27272: PUSH
27273: LD_INT 5
27275: PUSH
27276: LD_INT 6
27278: PUSH
27279: LD_INT 7
27281: PUSH
27282: LD_INT 8
27284: PUSH
27285: LD_INT 9
27287: PUSH
27288: LD_INT 10
27290: PUSH
27291: LD_INT 11
27293: PUSH
27294: LD_INT 12
27296: PUSH
27297: LD_INT 13
27299: PUSH
27300: LD_INT 14
27302: PUSH
27303: LD_INT 15
27305: PUSH
27306: LD_INT 16
27308: PUSH
27309: LD_INT 17
27311: PUSH
27312: LD_INT 18
27314: PUSH
27315: LD_INT 19
27317: PUSH
27318: LD_INT 20
27320: PUSH
27321: LD_INT 21
27323: PUSH
27324: LD_INT 22
27326: PUSH
27327: LD_INT 23
27329: PUSH
27330: LD_INT 24
27332: PUSH
27333: LD_INT 25
27335: PUSH
27336: LD_INT 26
27338: PUSH
27339: LD_INT 27
27341: PUSH
27342: LD_INT 28
27344: PUSH
27345: LD_INT 29
27347: PUSH
27348: LD_INT 30
27350: PUSH
27351: LD_INT 31
27353: PUSH
27354: LD_INT 32
27356: PUSH
27357: LD_INT 33
27359: PUSH
27360: LD_INT 34
27362: PUSH
27363: LD_INT 36
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 101
27405: PUSH
27406: LD_INT 102
27408: PUSH
27409: LD_INT 103
27411: PUSH
27412: LD_INT 104
27414: PUSH
27415: LD_INT 105
27417: PUSH
27418: LD_INT 106
27420: PUSH
27421: LD_INT 107
27423: PUSH
27424: LD_INT 108
27426: PUSH
27427: LD_INT 109
27429: PUSH
27430: LD_INT 110
27432: PUSH
27433: LD_INT 111
27435: PUSH
27436: LD_INT 112
27438: PUSH
27439: LD_INT 113
27441: PUSH
27442: LD_INT 114
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: ST_TO_ADDR
27465: GO 27840
27467: LD_INT 18
27469: DOUBLE
27470: EQUAL
27471: IFTRUE 27475
27473: GO 27611
27475: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
27476: LD_ADDR_VAR 0 1
27480: PUSH
27481: LD_INT 2
27483: PUSH
27484: LD_INT 4
27486: PUSH
27487: LD_INT 5
27489: PUSH
27490: LD_INT 7
27492: PUSH
27493: LD_INT 11
27495: PUSH
27496: LD_INT 12
27498: PUSH
27499: LD_INT 15
27501: PUSH
27502: LD_INT 16
27504: PUSH
27505: LD_INT 20
27507: PUSH
27508: LD_INT 21
27510: PUSH
27511: LD_INT 22
27513: PUSH
27514: LD_INT 23
27516: PUSH
27517: LD_INT 25
27519: PUSH
27520: LD_INT 26
27522: PUSH
27523: LD_INT 30
27525: PUSH
27526: LD_INT 31
27528: PUSH
27529: LD_INT 32
27531: PUSH
27532: LD_INT 33
27534: PUSH
27535: LD_INT 34
27537: PUSH
27538: LD_INT 35
27540: PUSH
27541: LD_INT 36
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 101
27569: PUSH
27570: LD_INT 102
27572: PUSH
27573: LD_INT 103
27575: PUSH
27576: LD_INT 106
27578: PUSH
27579: LD_INT 108
27581: PUSH
27582: LD_INT 112
27584: PUSH
27585: LD_INT 113
27587: PUSH
27588: LD_INT 114
27590: PUSH
27591: LD_INT 115
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: ST_TO_ADDR
27609: GO 27840
27611: LD_INT 19
27613: DOUBLE
27614: EQUAL
27615: IFTRUE 27619
27617: GO 27839
27619: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
27620: LD_ADDR_VAR 0 1
27624: PUSH
27625: LD_INT 1
27627: PUSH
27628: LD_INT 2
27630: PUSH
27631: LD_INT 3
27633: PUSH
27634: LD_INT 4
27636: PUSH
27637: LD_INT 5
27639: PUSH
27640: LD_INT 6
27642: PUSH
27643: LD_INT 7
27645: PUSH
27646: LD_INT 8
27648: PUSH
27649: LD_INT 9
27651: PUSH
27652: LD_INT 10
27654: PUSH
27655: LD_INT 11
27657: PUSH
27658: LD_INT 12
27660: PUSH
27661: LD_INT 13
27663: PUSH
27664: LD_INT 14
27666: PUSH
27667: LD_INT 15
27669: PUSH
27670: LD_INT 16
27672: PUSH
27673: LD_INT 17
27675: PUSH
27676: LD_INT 18
27678: PUSH
27679: LD_INT 19
27681: PUSH
27682: LD_INT 20
27684: PUSH
27685: LD_INT 21
27687: PUSH
27688: LD_INT 22
27690: PUSH
27691: LD_INT 23
27693: PUSH
27694: LD_INT 24
27696: PUSH
27697: LD_INT 25
27699: PUSH
27700: LD_INT 26
27702: PUSH
27703: LD_INT 27
27705: PUSH
27706: LD_INT 28
27708: PUSH
27709: LD_INT 29
27711: PUSH
27712: LD_INT 30
27714: PUSH
27715: LD_INT 31
27717: PUSH
27718: LD_INT 32
27720: PUSH
27721: LD_INT 33
27723: PUSH
27724: LD_INT 34
27726: PUSH
27727: LD_INT 35
27729: PUSH
27730: LD_INT 36
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 101
27773: PUSH
27774: LD_INT 102
27776: PUSH
27777: LD_INT 103
27779: PUSH
27780: LD_INT 104
27782: PUSH
27783: LD_INT 105
27785: PUSH
27786: LD_INT 106
27788: PUSH
27789: LD_INT 107
27791: PUSH
27792: LD_INT 108
27794: PUSH
27795: LD_INT 109
27797: PUSH
27798: LD_INT 110
27800: PUSH
27801: LD_INT 111
27803: PUSH
27804: LD_INT 112
27806: PUSH
27807: LD_INT 113
27809: PUSH
27810: LD_INT 114
27812: PUSH
27813: LD_INT 115
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: ST_TO_ADDR
27837: GO 27840
27839: POP
// end else
27840: GO 27877
// if campaign_id = 5 then
27842: LD_OWVAR 69
27846: PUSH
27847: LD_INT 5
27849: EQUAL
27850: IFFALSE 27877
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
27852: LD_ADDR_VAR 0 1
27856: PUSH
27857: LD_INT 1
27859: PUSH
27860: LD_INT 2
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 100
27869: PUSH
27870: EMPTY
27871: LIST
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: ST_TO_ADDR
// end ; if result then
27877: LD_VAR 0 1
27881: IFFALSE 28170
// begin normal :=  ;
27883: LD_ADDR_VAR 0 3
27887: PUSH
27888: LD_STRING 
27890: ST_TO_ADDR
// hardcore :=  ;
27891: LD_ADDR_VAR 0 4
27895: PUSH
27896: LD_STRING 
27898: ST_TO_ADDR
// for i = 1 to normalCounter do
27899: LD_ADDR_VAR 0 5
27903: PUSH
27904: DOUBLE
27905: LD_INT 1
27907: DEC
27908: ST_TO_ADDR
27909: LD_EXP 57
27913: PUSH
27914: FOR_TO
27915: IFFALSE 28016
// begin tmp := 0 ;
27917: LD_ADDR_VAR 0 2
27921: PUSH
27922: LD_STRING 0
27924: ST_TO_ADDR
// if result [ 1 ] then
27925: LD_VAR 0 1
27929: PUSH
27930: LD_INT 1
27932: ARRAY
27933: IFFALSE 27998
// if result [ 1 ] [ 1 ] = i then
27935: LD_VAR 0 1
27939: PUSH
27940: LD_INT 1
27942: ARRAY
27943: PUSH
27944: LD_INT 1
27946: ARRAY
27947: PUSH
27948: LD_VAR 0 5
27952: EQUAL
27953: IFFALSE 27998
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27955: LD_ADDR_VAR 0 1
27959: PUSH
27960: LD_VAR 0 1
27964: PPUSH
27965: LD_INT 1
27967: PPUSH
27968: LD_VAR 0 1
27972: PUSH
27973: LD_INT 1
27975: ARRAY
27976: PPUSH
27977: LD_INT 1
27979: PPUSH
27980: CALL_OW 3
27984: PPUSH
27985: CALL_OW 1
27989: ST_TO_ADDR
// tmp := 1 ;
27990: LD_ADDR_VAR 0 2
27994: PUSH
27995: LD_STRING 1
27997: ST_TO_ADDR
// end ; normal := normal & tmp ;
27998: LD_ADDR_VAR 0 3
28002: PUSH
28003: LD_VAR 0 3
28007: PUSH
28008: LD_VAR 0 2
28012: STR
28013: ST_TO_ADDR
// end ;
28014: GO 27914
28016: POP
28017: POP
// for i = 1 to hardcoreCounter do
28018: LD_ADDR_VAR 0 5
28022: PUSH
28023: DOUBLE
28024: LD_INT 1
28026: DEC
28027: ST_TO_ADDR
28028: LD_EXP 58
28032: PUSH
28033: FOR_TO
28034: IFFALSE 28139
// begin tmp := 0 ;
28036: LD_ADDR_VAR 0 2
28040: PUSH
28041: LD_STRING 0
28043: ST_TO_ADDR
// if result [ 2 ] then
28044: LD_VAR 0 1
28048: PUSH
28049: LD_INT 2
28051: ARRAY
28052: IFFALSE 28121
// if result [ 2 ] [ 1 ] = 100 + i then
28054: LD_VAR 0 1
28058: PUSH
28059: LD_INT 2
28061: ARRAY
28062: PUSH
28063: LD_INT 1
28065: ARRAY
28066: PUSH
28067: LD_INT 100
28069: PUSH
28070: LD_VAR 0 5
28074: PLUS
28075: EQUAL
28076: IFFALSE 28121
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
28078: LD_ADDR_VAR 0 1
28082: PUSH
28083: LD_VAR 0 1
28087: PPUSH
28088: LD_INT 2
28090: PPUSH
28091: LD_VAR 0 1
28095: PUSH
28096: LD_INT 2
28098: ARRAY
28099: PPUSH
28100: LD_INT 1
28102: PPUSH
28103: CALL_OW 3
28107: PPUSH
28108: CALL_OW 1
28112: ST_TO_ADDR
// tmp := 1 ;
28113: LD_ADDR_VAR 0 2
28117: PUSH
28118: LD_STRING 1
28120: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
28121: LD_ADDR_VAR 0 4
28125: PUSH
28126: LD_VAR 0 4
28130: PUSH
28131: LD_VAR 0 2
28135: STR
28136: ST_TO_ADDR
// end ;
28137: GO 28033
28139: POP
28140: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
28141: LD_STRING getStreamItemsFromMission("
28143: PUSH
28144: LD_VAR 0 3
28148: STR
28149: PUSH
28150: LD_STRING ","
28152: STR
28153: PUSH
28154: LD_VAR 0 4
28158: STR
28159: PUSH
28160: LD_STRING ")
28162: STR
28163: PPUSH
28164: CALL_OW 559
// end else
28168: GO 28177
// ToLua ( getStreamItemsFromMission("","") ) ;
28170: LD_STRING getStreamItemsFromMission("","")
28172: PPUSH
28173: CALL_OW 559
// end ;
28177: LD_VAR 0 1
28181: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
28182: LD_VAR 0 2
28186: PUSH
28187: LD_INT 100
28189: EQUAL
28190: IFFALSE 29139
// begin if not StreamModeActive then
28192: LD_EXP 56
28196: NOT
28197: IFFALSE 28207
// StreamModeActive := true ;
28199: LD_ADDR_EXP 56
28203: PUSH
28204: LD_INT 1
28206: ST_TO_ADDR
// if p3 = 0 then
28207: LD_VAR 0 3
28211: PUSH
28212: LD_INT 0
28214: EQUAL
28215: IFFALSE 28221
// InitStreamMode ;
28217: CALL 24442 0 0
// if p3 = 1 then
28221: LD_VAR 0 3
28225: PUSH
28226: LD_INT 1
28228: EQUAL
28229: IFFALSE 28239
// sRocket := true ;
28231: LD_ADDR_EXP 61
28235: PUSH
28236: LD_INT 1
28238: ST_TO_ADDR
// if p3 = 2 then
28239: LD_VAR 0 3
28243: PUSH
28244: LD_INT 2
28246: EQUAL
28247: IFFALSE 28257
// sSpeed := true ;
28249: LD_ADDR_EXP 60
28253: PUSH
28254: LD_INT 1
28256: ST_TO_ADDR
// if p3 = 3 then
28257: LD_VAR 0 3
28261: PUSH
28262: LD_INT 3
28264: EQUAL
28265: IFFALSE 28275
// sEngine := true ;
28267: LD_ADDR_EXP 62
28271: PUSH
28272: LD_INT 1
28274: ST_TO_ADDR
// if p3 = 4 then
28275: LD_VAR 0 3
28279: PUSH
28280: LD_INT 4
28282: EQUAL
28283: IFFALSE 28293
// sSpec := true ;
28285: LD_ADDR_EXP 59
28289: PUSH
28290: LD_INT 1
28292: ST_TO_ADDR
// if p3 = 5 then
28293: LD_VAR 0 3
28297: PUSH
28298: LD_INT 5
28300: EQUAL
28301: IFFALSE 28311
// sLevel := true ;
28303: LD_ADDR_EXP 63
28307: PUSH
28308: LD_INT 1
28310: ST_TO_ADDR
// if p3 = 6 then
28311: LD_VAR 0 3
28315: PUSH
28316: LD_INT 6
28318: EQUAL
28319: IFFALSE 28329
// sArmoury := true ;
28321: LD_ADDR_EXP 64
28325: PUSH
28326: LD_INT 1
28328: ST_TO_ADDR
// if p3 = 7 then
28329: LD_VAR 0 3
28333: PUSH
28334: LD_INT 7
28336: EQUAL
28337: IFFALSE 28347
// sRadar := true ;
28339: LD_ADDR_EXP 65
28343: PUSH
28344: LD_INT 1
28346: ST_TO_ADDR
// if p3 = 8 then
28347: LD_VAR 0 3
28351: PUSH
28352: LD_INT 8
28354: EQUAL
28355: IFFALSE 28365
// sBunker := true ;
28357: LD_ADDR_EXP 66
28361: PUSH
28362: LD_INT 1
28364: ST_TO_ADDR
// if p3 = 9 then
28365: LD_VAR 0 3
28369: PUSH
28370: LD_INT 9
28372: EQUAL
28373: IFFALSE 28383
// sHack := true ;
28375: LD_ADDR_EXP 67
28379: PUSH
28380: LD_INT 1
28382: ST_TO_ADDR
// if p3 = 10 then
28383: LD_VAR 0 3
28387: PUSH
28388: LD_INT 10
28390: EQUAL
28391: IFFALSE 28401
// sFire := true ;
28393: LD_ADDR_EXP 68
28397: PUSH
28398: LD_INT 1
28400: ST_TO_ADDR
// if p3 = 11 then
28401: LD_VAR 0 3
28405: PUSH
28406: LD_INT 11
28408: EQUAL
28409: IFFALSE 28419
// sRefresh := true ;
28411: LD_ADDR_EXP 69
28415: PUSH
28416: LD_INT 1
28418: ST_TO_ADDR
// if p3 = 12 then
28419: LD_VAR 0 3
28423: PUSH
28424: LD_INT 12
28426: EQUAL
28427: IFFALSE 28437
// sExp := true ;
28429: LD_ADDR_EXP 70
28433: PUSH
28434: LD_INT 1
28436: ST_TO_ADDR
// if p3 = 13 then
28437: LD_VAR 0 3
28441: PUSH
28442: LD_INT 13
28444: EQUAL
28445: IFFALSE 28455
// sDepot := true ;
28447: LD_ADDR_EXP 71
28451: PUSH
28452: LD_INT 1
28454: ST_TO_ADDR
// if p3 = 14 then
28455: LD_VAR 0 3
28459: PUSH
28460: LD_INT 14
28462: EQUAL
28463: IFFALSE 28473
// sFlag := true ;
28465: LD_ADDR_EXP 72
28469: PUSH
28470: LD_INT 1
28472: ST_TO_ADDR
// if p3 = 15 then
28473: LD_VAR 0 3
28477: PUSH
28478: LD_INT 15
28480: EQUAL
28481: IFFALSE 28491
// sKamikadze := true ;
28483: LD_ADDR_EXP 80
28487: PUSH
28488: LD_INT 1
28490: ST_TO_ADDR
// if p3 = 16 then
28491: LD_VAR 0 3
28495: PUSH
28496: LD_INT 16
28498: EQUAL
28499: IFFALSE 28509
// sTroll := true ;
28501: LD_ADDR_EXP 81
28505: PUSH
28506: LD_INT 1
28508: ST_TO_ADDR
// if p3 = 17 then
28509: LD_VAR 0 3
28513: PUSH
28514: LD_INT 17
28516: EQUAL
28517: IFFALSE 28527
// sSlow := true ;
28519: LD_ADDR_EXP 82
28523: PUSH
28524: LD_INT 1
28526: ST_TO_ADDR
// if p3 = 18 then
28527: LD_VAR 0 3
28531: PUSH
28532: LD_INT 18
28534: EQUAL
28535: IFFALSE 28545
// sLack := true ;
28537: LD_ADDR_EXP 83
28541: PUSH
28542: LD_INT 1
28544: ST_TO_ADDR
// if p3 = 19 then
28545: LD_VAR 0 3
28549: PUSH
28550: LD_INT 19
28552: EQUAL
28553: IFFALSE 28563
// sTank := true ;
28555: LD_ADDR_EXP 85
28559: PUSH
28560: LD_INT 1
28562: ST_TO_ADDR
// if p3 = 20 then
28563: LD_VAR 0 3
28567: PUSH
28568: LD_INT 20
28570: EQUAL
28571: IFFALSE 28581
// sRemote := true ;
28573: LD_ADDR_EXP 86
28577: PUSH
28578: LD_INT 1
28580: ST_TO_ADDR
// if p3 = 21 then
28581: LD_VAR 0 3
28585: PUSH
28586: LD_INT 21
28588: EQUAL
28589: IFFALSE 28599
// sPowell := true ;
28591: LD_ADDR_EXP 87
28595: PUSH
28596: LD_INT 1
28598: ST_TO_ADDR
// if p3 = 22 then
28599: LD_VAR 0 3
28603: PUSH
28604: LD_INT 22
28606: EQUAL
28607: IFFALSE 28617
// sTeleport := true ;
28609: LD_ADDR_EXP 90
28613: PUSH
28614: LD_INT 1
28616: ST_TO_ADDR
// if p3 = 23 then
28617: LD_VAR 0 3
28621: PUSH
28622: LD_INT 23
28624: EQUAL
28625: IFFALSE 28635
// sOilTower := true ;
28627: LD_ADDR_EXP 92
28631: PUSH
28632: LD_INT 1
28634: ST_TO_ADDR
// if p3 = 24 then
28635: LD_VAR 0 3
28639: PUSH
28640: LD_INT 24
28642: EQUAL
28643: IFFALSE 28653
// sShovel := true ;
28645: LD_ADDR_EXP 93
28649: PUSH
28650: LD_INT 1
28652: ST_TO_ADDR
// if p3 = 25 then
28653: LD_VAR 0 3
28657: PUSH
28658: LD_INT 25
28660: EQUAL
28661: IFFALSE 28671
// sSheik := true ;
28663: LD_ADDR_EXP 94
28667: PUSH
28668: LD_INT 1
28670: ST_TO_ADDR
// if p3 = 26 then
28671: LD_VAR 0 3
28675: PUSH
28676: LD_INT 26
28678: EQUAL
28679: IFFALSE 28689
// sEarthquake := true ;
28681: LD_ADDR_EXP 96
28685: PUSH
28686: LD_INT 1
28688: ST_TO_ADDR
// if p3 = 27 then
28689: LD_VAR 0 3
28693: PUSH
28694: LD_INT 27
28696: EQUAL
28697: IFFALSE 28707
// sAI := true ;
28699: LD_ADDR_EXP 97
28703: PUSH
28704: LD_INT 1
28706: ST_TO_ADDR
// if p3 = 28 then
28707: LD_VAR 0 3
28711: PUSH
28712: LD_INT 28
28714: EQUAL
28715: IFFALSE 28725
// sCargo := true ;
28717: LD_ADDR_EXP 100
28721: PUSH
28722: LD_INT 1
28724: ST_TO_ADDR
// if p3 = 29 then
28725: LD_VAR 0 3
28729: PUSH
28730: LD_INT 29
28732: EQUAL
28733: IFFALSE 28743
// sDLaser := true ;
28735: LD_ADDR_EXP 101
28739: PUSH
28740: LD_INT 1
28742: ST_TO_ADDR
// if p3 = 30 then
28743: LD_VAR 0 3
28747: PUSH
28748: LD_INT 30
28750: EQUAL
28751: IFFALSE 28761
// sExchange := true ;
28753: LD_ADDR_EXP 102
28757: PUSH
28758: LD_INT 1
28760: ST_TO_ADDR
// if p3 = 31 then
28761: LD_VAR 0 3
28765: PUSH
28766: LD_INT 31
28768: EQUAL
28769: IFFALSE 28779
// sFac := true ;
28771: LD_ADDR_EXP 103
28775: PUSH
28776: LD_INT 1
28778: ST_TO_ADDR
// if p3 = 32 then
28779: LD_VAR 0 3
28783: PUSH
28784: LD_INT 32
28786: EQUAL
28787: IFFALSE 28797
// sPower := true ;
28789: LD_ADDR_EXP 104
28793: PUSH
28794: LD_INT 1
28796: ST_TO_ADDR
// if p3 = 33 then
28797: LD_VAR 0 3
28801: PUSH
28802: LD_INT 33
28804: EQUAL
28805: IFFALSE 28815
// sRandom := true ;
28807: LD_ADDR_EXP 105
28811: PUSH
28812: LD_INT 1
28814: ST_TO_ADDR
// if p3 = 34 then
28815: LD_VAR 0 3
28819: PUSH
28820: LD_INT 34
28822: EQUAL
28823: IFFALSE 28833
// sShield := true ;
28825: LD_ADDR_EXP 106
28829: PUSH
28830: LD_INT 1
28832: ST_TO_ADDR
// if p3 = 35 then
28833: LD_VAR 0 3
28837: PUSH
28838: LD_INT 35
28840: EQUAL
28841: IFFALSE 28851
// sTime := true ;
28843: LD_ADDR_EXP 107
28847: PUSH
28848: LD_INT 1
28850: ST_TO_ADDR
// if p3 = 36 then
28851: LD_VAR 0 3
28855: PUSH
28856: LD_INT 36
28858: EQUAL
28859: IFFALSE 28869
// sTools := true ;
28861: LD_ADDR_EXP 108
28865: PUSH
28866: LD_INT 1
28868: ST_TO_ADDR
// if p3 = 101 then
28869: LD_VAR 0 3
28873: PUSH
28874: LD_INT 101
28876: EQUAL
28877: IFFALSE 28887
// sSold := true ;
28879: LD_ADDR_EXP 73
28883: PUSH
28884: LD_INT 1
28886: ST_TO_ADDR
// if p3 = 102 then
28887: LD_VAR 0 3
28891: PUSH
28892: LD_INT 102
28894: EQUAL
28895: IFFALSE 28905
// sDiff := true ;
28897: LD_ADDR_EXP 74
28901: PUSH
28902: LD_INT 1
28904: ST_TO_ADDR
// if p3 = 103 then
28905: LD_VAR 0 3
28909: PUSH
28910: LD_INT 103
28912: EQUAL
28913: IFFALSE 28923
// sFog := true ;
28915: LD_ADDR_EXP 77
28919: PUSH
28920: LD_INT 1
28922: ST_TO_ADDR
// if p3 = 104 then
28923: LD_VAR 0 3
28927: PUSH
28928: LD_INT 104
28930: EQUAL
28931: IFFALSE 28941
// sReset := true ;
28933: LD_ADDR_EXP 78
28937: PUSH
28938: LD_INT 1
28940: ST_TO_ADDR
// if p3 = 105 then
28941: LD_VAR 0 3
28945: PUSH
28946: LD_INT 105
28948: EQUAL
28949: IFFALSE 28959
// sSun := true ;
28951: LD_ADDR_EXP 79
28955: PUSH
28956: LD_INT 1
28958: ST_TO_ADDR
// if p3 = 106 then
28959: LD_VAR 0 3
28963: PUSH
28964: LD_INT 106
28966: EQUAL
28967: IFFALSE 28977
// sTiger := true ;
28969: LD_ADDR_EXP 75
28973: PUSH
28974: LD_INT 1
28976: ST_TO_ADDR
// if p3 = 107 then
28977: LD_VAR 0 3
28981: PUSH
28982: LD_INT 107
28984: EQUAL
28985: IFFALSE 28995
// sBomb := true ;
28987: LD_ADDR_EXP 76
28991: PUSH
28992: LD_INT 1
28994: ST_TO_ADDR
// if p3 = 108 then
28995: LD_VAR 0 3
28999: PUSH
29000: LD_INT 108
29002: EQUAL
29003: IFFALSE 29013
// sWound := true ;
29005: LD_ADDR_EXP 84
29009: PUSH
29010: LD_INT 1
29012: ST_TO_ADDR
// if p3 = 109 then
29013: LD_VAR 0 3
29017: PUSH
29018: LD_INT 109
29020: EQUAL
29021: IFFALSE 29031
// sBetray := true ;
29023: LD_ADDR_EXP 88
29027: PUSH
29028: LD_INT 1
29030: ST_TO_ADDR
// if p3 = 110 then
29031: LD_VAR 0 3
29035: PUSH
29036: LD_INT 110
29038: EQUAL
29039: IFFALSE 29049
// sContamin := true ;
29041: LD_ADDR_EXP 89
29045: PUSH
29046: LD_INT 1
29048: ST_TO_ADDR
// if p3 = 111 then
29049: LD_VAR 0 3
29053: PUSH
29054: LD_INT 111
29056: EQUAL
29057: IFFALSE 29067
// sOil := true ;
29059: LD_ADDR_EXP 91
29063: PUSH
29064: LD_INT 1
29066: ST_TO_ADDR
// if p3 = 112 then
29067: LD_VAR 0 3
29071: PUSH
29072: LD_INT 112
29074: EQUAL
29075: IFFALSE 29085
// sStu := true ;
29077: LD_ADDR_EXP 95
29081: PUSH
29082: LD_INT 1
29084: ST_TO_ADDR
// if p3 = 113 then
29085: LD_VAR 0 3
29089: PUSH
29090: LD_INT 113
29092: EQUAL
29093: IFFALSE 29103
// sBazooka := true ;
29095: LD_ADDR_EXP 98
29099: PUSH
29100: LD_INT 1
29102: ST_TO_ADDR
// if p3 = 114 then
29103: LD_VAR 0 3
29107: PUSH
29108: LD_INT 114
29110: EQUAL
29111: IFFALSE 29121
// sMortar := true ;
29113: LD_ADDR_EXP 99
29117: PUSH
29118: LD_INT 1
29120: ST_TO_ADDR
// if p3 = 115 then
29121: LD_VAR 0 3
29125: PUSH
29126: LD_INT 115
29128: EQUAL
29129: IFFALSE 29139
// sRanger := true ;
29131: LD_ADDR_EXP 109
29135: PUSH
29136: LD_INT 1
29138: ST_TO_ADDR
// end ; end ;
29139: PPOPN 6
29141: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
29142: LD_EXP 56
29146: PUSH
29147: LD_EXP 61
29151: AND
29152: IFFALSE 29276
29154: GO 29156
29156: DISABLE
29157: LD_INT 0
29159: PPUSH
29160: PPUSH
// begin enable ;
29161: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
29162: LD_ADDR_VAR 0 2
29166: PUSH
29167: LD_INT 22
29169: PUSH
29170: LD_OWVAR 2
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 2
29181: PUSH
29182: LD_INT 34
29184: PUSH
29185: LD_INT 7
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 34
29194: PUSH
29195: LD_INT 45
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 34
29204: PUSH
29205: LD_INT 28
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 34
29214: PUSH
29215: LD_INT 47
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PPUSH
29233: CALL_OW 69
29237: ST_TO_ADDR
// if not tmp then
29238: LD_VAR 0 2
29242: NOT
29243: IFFALSE 29247
// exit ;
29245: GO 29276
// for i in tmp do
29247: LD_ADDR_VAR 0 1
29251: PUSH
29252: LD_VAR 0 2
29256: PUSH
29257: FOR_IN
29258: IFFALSE 29274
// begin SetLives ( i , 0 ) ;
29260: LD_VAR 0 1
29264: PPUSH
29265: LD_INT 0
29267: PPUSH
29268: CALL_OW 234
// end ;
29272: GO 29257
29274: POP
29275: POP
// end ;
29276: PPOPN 2
29278: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
29279: LD_EXP 56
29283: PUSH
29284: LD_EXP 62
29288: AND
29289: IFFALSE 29373
29291: GO 29293
29293: DISABLE
29294: LD_INT 0
29296: PPUSH
29297: PPUSH
// begin enable ;
29298: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
29299: LD_ADDR_VAR 0 2
29303: PUSH
29304: LD_INT 22
29306: PUSH
29307: LD_OWVAR 2
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 32
29318: PUSH
29319: LD_INT 3
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PPUSH
29330: CALL_OW 69
29334: ST_TO_ADDR
// if not tmp then
29335: LD_VAR 0 2
29339: NOT
29340: IFFALSE 29344
// exit ;
29342: GO 29373
// for i in tmp do
29344: LD_ADDR_VAR 0 1
29348: PUSH
29349: LD_VAR 0 2
29353: PUSH
29354: FOR_IN
29355: IFFALSE 29371
// begin SetLives ( i , 0 ) ;
29357: LD_VAR 0 1
29361: PPUSH
29362: LD_INT 0
29364: PPUSH
29365: CALL_OW 234
// end ;
29369: GO 29354
29371: POP
29372: POP
// end ;
29373: PPOPN 2
29375: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
29376: LD_EXP 56
29380: PUSH
29381: LD_EXP 59
29385: AND
29386: IFFALSE 29479
29388: GO 29390
29390: DISABLE
29391: LD_INT 0
29393: PPUSH
// begin enable ;
29394: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
29395: LD_ADDR_VAR 0 1
29399: PUSH
29400: LD_INT 22
29402: PUSH
29403: LD_OWVAR 2
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: LD_INT 25
29417: PUSH
29418: LD_INT 5
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 25
29427: PUSH
29428: LD_INT 9
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 25
29437: PUSH
29438: LD_INT 8
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PPUSH
29455: CALL_OW 69
29459: PUSH
29460: FOR_IN
29461: IFFALSE 29477
// begin SetClass ( i , 1 ) ;
29463: LD_VAR 0 1
29467: PPUSH
29468: LD_INT 1
29470: PPUSH
29471: CALL_OW 336
// end ;
29475: GO 29460
29477: POP
29478: POP
// end ;
29479: PPOPN 1
29481: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
29482: LD_EXP 56
29486: PUSH
29487: LD_EXP 60
29491: AND
29492: PUSH
29493: LD_OWVAR 65
29497: PUSH
29498: LD_INT 7
29500: LESS
29501: AND
29502: IFFALSE 29516
29504: GO 29506
29506: DISABLE
// begin enable ;
29507: ENABLE
// game_speed := 7 ;
29508: LD_ADDR_OWVAR 65
29512: PUSH
29513: LD_INT 7
29515: ST_TO_ADDR
// end ;
29516: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
29517: LD_EXP 56
29521: PUSH
29522: LD_EXP 63
29526: AND
29527: IFFALSE 29729
29529: GO 29531
29531: DISABLE
29532: LD_INT 0
29534: PPUSH
29535: PPUSH
29536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29537: LD_ADDR_VAR 0 3
29541: PUSH
29542: LD_INT 81
29544: PUSH
29545: LD_OWVAR 2
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 21
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PPUSH
29568: CALL_OW 69
29572: ST_TO_ADDR
// if not tmp then
29573: LD_VAR 0 3
29577: NOT
29578: IFFALSE 29582
// exit ;
29580: GO 29729
// if tmp > 5 then
29582: LD_VAR 0 3
29586: PUSH
29587: LD_INT 5
29589: GREATER
29590: IFFALSE 29602
// k := 5 else
29592: LD_ADDR_VAR 0 2
29596: PUSH
29597: LD_INT 5
29599: ST_TO_ADDR
29600: GO 29612
// k := tmp ;
29602: LD_ADDR_VAR 0 2
29606: PUSH
29607: LD_VAR 0 3
29611: ST_TO_ADDR
// for i := 1 to k do
29612: LD_ADDR_VAR 0 1
29616: PUSH
29617: DOUBLE
29618: LD_INT 1
29620: DEC
29621: ST_TO_ADDR
29622: LD_VAR 0 2
29626: PUSH
29627: FOR_TO
29628: IFFALSE 29727
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
29630: LD_VAR 0 3
29634: PUSH
29635: LD_VAR 0 1
29639: ARRAY
29640: PPUSH
29641: LD_VAR 0 1
29645: PUSH
29646: LD_INT 4
29648: MOD
29649: PUSH
29650: LD_INT 1
29652: PLUS
29653: PPUSH
29654: CALL_OW 259
29658: PUSH
29659: LD_INT 10
29661: LESS
29662: IFFALSE 29725
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
29664: LD_VAR 0 3
29668: PUSH
29669: LD_VAR 0 1
29673: ARRAY
29674: PPUSH
29675: LD_VAR 0 1
29679: PUSH
29680: LD_INT 4
29682: MOD
29683: PUSH
29684: LD_INT 1
29686: PLUS
29687: PPUSH
29688: LD_VAR 0 3
29692: PUSH
29693: LD_VAR 0 1
29697: ARRAY
29698: PPUSH
29699: LD_VAR 0 1
29703: PUSH
29704: LD_INT 4
29706: MOD
29707: PUSH
29708: LD_INT 1
29710: PLUS
29711: PPUSH
29712: CALL_OW 259
29716: PUSH
29717: LD_INT 1
29719: PLUS
29720: PPUSH
29721: CALL_OW 237
29725: GO 29627
29727: POP
29728: POP
// end ;
29729: PPOPN 3
29731: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
29732: LD_EXP 56
29736: PUSH
29737: LD_EXP 64
29741: AND
29742: IFFALSE 29762
29744: GO 29746
29746: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
29747: LD_INT 4
29749: PPUSH
29750: LD_OWVAR 2
29754: PPUSH
29755: LD_INT 0
29757: PPUSH
29758: CALL_OW 324
29762: END
// every 0 0$1 trigger StreamModeActive and sShovel do
29763: LD_EXP 56
29767: PUSH
29768: LD_EXP 93
29772: AND
29773: IFFALSE 29793
29775: GO 29777
29777: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
29778: LD_INT 19
29780: PPUSH
29781: LD_OWVAR 2
29785: PPUSH
29786: LD_INT 0
29788: PPUSH
29789: CALL_OW 324
29793: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
29794: LD_EXP 56
29798: PUSH
29799: LD_EXP 65
29803: AND
29804: IFFALSE 29906
29806: GO 29808
29808: DISABLE
29809: LD_INT 0
29811: PPUSH
29812: PPUSH
// begin enable ;
29813: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
29814: LD_ADDR_VAR 0 2
29818: PUSH
29819: LD_INT 22
29821: PUSH
29822: LD_OWVAR 2
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 2
29833: PUSH
29834: LD_INT 34
29836: PUSH
29837: LD_INT 11
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 34
29846: PUSH
29847: LD_INT 30
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: LIST
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PPUSH
29863: CALL_OW 69
29867: ST_TO_ADDR
// if not tmp then
29868: LD_VAR 0 2
29872: NOT
29873: IFFALSE 29877
// exit ;
29875: GO 29906
// for i in tmp do
29877: LD_ADDR_VAR 0 1
29881: PUSH
29882: LD_VAR 0 2
29886: PUSH
29887: FOR_IN
29888: IFFALSE 29904
// begin SetLives ( i , 0 ) ;
29890: LD_VAR 0 1
29894: PPUSH
29895: LD_INT 0
29897: PPUSH
29898: CALL_OW 234
// end ;
29902: GO 29887
29904: POP
29905: POP
// end ;
29906: PPOPN 2
29908: END
// every 0 0$1 trigger StreamModeActive and sBunker do
29909: LD_EXP 56
29913: PUSH
29914: LD_EXP 66
29918: AND
29919: IFFALSE 29939
29921: GO 29923
29923: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
29924: LD_INT 32
29926: PPUSH
29927: LD_OWVAR 2
29931: PPUSH
29932: LD_INT 0
29934: PPUSH
29935: CALL_OW 324
29939: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
29940: LD_EXP 56
29944: PUSH
29945: LD_EXP 67
29949: AND
29950: IFFALSE 30131
29952: GO 29954
29954: DISABLE
29955: LD_INT 0
29957: PPUSH
29958: PPUSH
29959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
29960: LD_ADDR_VAR 0 2
29964: PUSH
29965: LD_INT 22
29967: PUSH
29968: LD_OWVAR 2
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 33
29979: PUSH
29980: LD_INT 3
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PPUSH
29991: CALL_OW 69
29995: ST_TO_ADDR
// if not tmp then
29996: LD_VAR 0 2
30000: NOT
30001: IFFALSE 30005
// exit ;
30003: GO 30131
// side := 0 ;
30005: LD_ADDR_VAR 0 3
30009: PUSH
30010: LD_INT 0
30012: ST_TO_ADDR
// for i := 1 to 8 do
30013: LD_ADDR_VAR 0 1
30017: PUSH
30018: DOUBLE
30019: LD_INT 1
30021: DEC
30022: ST_TO_ADDR
30023: LD_INT 8
30025: PUSH
30026: FOR_TO
30027: IFFALSE 30075
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30029: LD_OWVAR 2
30033: PUSH
30034: LD_VAR 0 1
30038: NONEQUAL
30039: PUSH
30040: LD_OWVAR 2
30044: PPUSH
30045: LD_VAR 0 1
30049: PPUSH
30050: CALL_OW 81
30054: PUSH
30055: LD_INT 2
30057: EQUAL
30058: AND
30059: IFFALSE 30073
// begin side := i ;
30061: LD_ADDR_VAR 0 3
30065: PUSH
30066: LD_VAR 0 1
30070: ST_TO_ADDR
// break ;
30071: GO 30075
// end ;
30073: GO 30026
30075: POP
30076: POP
// if not side then
30077: LD_VAR 0 3
30081: NOT
30082: IFFALSE 30086
// exit ;
30084: GO 30131
// for i := 1 to tmp do
30086: LD_ADDR_VAR 0 1
30090: PUSH
30091: DOUBLE
30092: LD_INT 1
30094: DEC
30095: ST_TO_ADDR
30096: LD_VAR 0 2
30100: PUSH
30101: FOR_TO
30102: IFFALSE 30129
// if Prob ( 60 ) then
30104: LD_INT 60
30106: PPUSH
30107: CALL_OW 13
30111: IFFALSE 30127
// SetSide ( i , side ) ;
30113: LD_VAR 0 1
30117: PPUSH
30118: LD_VAR 0 3
30122: PPUSH
30123: CALL_OW 235
30127: GO 30101
30129: POP
30130: POP
// end ;
30131: PPOPN 3
30133: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
30134: LD_EXP 56
30138: PUSH
30139: LD_EXP 69
30143: AND
30144: IFFALSE 30263
30146: GO 30148
30148: DISABLE
30149: LD_INT 0
30151: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
30152: LD_ADDR_VAR 0 1
30156: PUSH
30157: LD_INT 22
30159: PUSH
30160: LD_OWVAR 2
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 21
30171: PUSH
30172: LD_INT 1
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 3
30181: PUSH
30182: LD_INT 23
30184: PUSH
30185: LD_INT 0
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: LIST
30200: PPUSH
30201: CALL_OW 69
30205: PUSH
30206: FOR_IN
30207: IFFALSE 30261
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
30209: LD_VAR 0 1
30213: PPUSH
30214: CALL_OW 257
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: LD_INT 3
30227: PUSH
30228: LD_INT 4
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: IN
30237: IFFALSE 30259
// SetClass ( un , rand ( 1 , 4 ) ) ;
30239: LD_VAR 0 1
30243: PPUSH
30244: LD_INT 1
30246: PPUSH
30247: LD_INT 4
30249: PPUSH
30250: CALL_OW 12
30254: PPUSH
30255: CALL_OW 336
30259: GO 30206
30261: POP
30262: POP
// end ;
30263: PPOPN 1
30265: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
30266: LD_EXP 56
30270: PUSH
30271: LD_EXP 68
30275: AND
30276: IFFALSE 30355
30278: GO 30280
30280: DISABLE
30281: LD_INT 0
30283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30284: LD_ADDR_VAR 0 1
30288: PUSH
30289: LD_INT 22
30291: PUSH
30292: LD_OWVAR 2
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 21
30303: PUSH
30304: LD_INT 3
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PPUSH
30315: CALL_OW 69
30319: ST_TO_ADDR
// if not tmp then
30320: LD_VAR 0 1
30324: NOT
30325: IFFALSE 30329
// exit ;
30327: GO 30355
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
30329: LD_VAR 0 1
30333: PUSH
30334: LD_INT 1
30336: PPUSH
30337: LD_VAR 0 1
30341: PPUSH
30342: CALL_OW 12
30346: ARRAY
30347: PPUSH
30348: LD_INT 100
30350: PPUSH
30351: CALL_OW 234
// end ;
30355: PPOPN 1
30357: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
30358: LD_EXP 56
30362: PUSH
30363: LD_EXP 70
30367: AND
30368: IFFALSE 30466
30370: GO 30372
30372: DISABLE
30373: LD_INT 0
30375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30376: LD_ADDR_VAR 0 1
30380: PUSH
30381: LD_INT 22
30383: PUSH
30384: LD_OWVAR 2
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 21
30395: PUSH
30396: LD_INT 1
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PPUSH
30407: CALL_OW 69
30411: ST_TO_ADDR
// if not tmp then
30412: LD_VAR 0 1
30416: NOT
30417: IFFALSE 30421
// exit ;
30419: GO 30466
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
30421: LD_VAR 0 1
30425: PUSH
30426: LD_INT 1
30428: PPUSH
30429: LD_VAR 0 1
30433: PPUSH
30434: CALL_OW 12
30438: ARRAY
30439: PPUSH
30440: LD_INT 1
30442: PPUSH
30443: LD_INT 4
30445: PPUSH
30446: CALL_OW 12
30450: PPUSH
30451: LD_INT 3000
30453: PPUSH
30454: LD_INT 9000
30456: PPUSH
30457: CALL_OW 12
30461: PPUSH
30462: CALL_OW 492
// end ;
30466: PPOPN 1
30468: END
// every 0 0$1 trigger StreamModeActive and sDepot do
30469: LD_EXP 56
30473: PUSH
30474: LD_EXP 71
30478: AND
30479: IFFALSE 30499
30481: GO 30483
30483: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
30484: LD_INT 1
30486: PPUSH
30487: LD_OWVAR 2
30491: PPUSH
30492: LD_INT 0
30494: PPUSH
30495: CALL_OW 324
30499: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
30500: LD_EXP 56
30504: PUSH
30505: LD_EXP 72
30509: AND
30510: IFFALSE 30593
30512: GO 30514
30514: DISABLE
30515: LD_INT 0
30517: PPUSH
30518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30519: LD_ADDR_VAR 0 2
30523: PUSH
30524: LD_INT 22
30526: PUSH
30527: LD_OWVAR 2
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 21
30538: PUSH
30539: LD_INT 3
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PPUSH
30550: CALL_OW 69
30554: ST_TO_ADDR
// if not tmp then
30555: LD_VAR 0 2
30559: NOT
30560: IFFALSE 30564
// exit ;
30562: GO 30593
// for i in tmp do
30564: LD_ADDR_VAR 0 1
30568: PUSH
30569: LD_VAR 0 2
30573: PUSH
30574: FOR_IN
30575: IFFALSE 30591
// SetBLevel ( i , 10 ) ;
30577: LD_VAR 0 1
30581: PPUSH
30582: LD_INT 10
30584: PPUSH
30585: CALL_OW 241
30589: GO 30574
30591: POP
30592: POP
// end ;
30593: PPOPN 2
30595: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
30596: LD_EXP 56
30600: PUSH
30601: LD_EXP 73
30605: AND
30606: IFFALSE 30717
30608: GO 30610
30610: DISABLE
30611: LD_INT 0
30613: PPUSH
30614: PPUSH
30615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30616: LD_ADDR_VAR 0 3
30620: PUSH
30621: LD_INT 22
30623: PUSH
30624: LD_OWVAR 2
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 25
30635: PUSH
30636: LD_INT 1
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PPUSH
30647: CALL_OW 69
30651: ST_TO_ADDR
// if not tmp then
30652: LD_VAR 0 3
30656: NOT
30657: IFFALSE 30661
// exit ;
30659: GO 30717
// un := tmp [ rand ( 1 , tmp ) ] ;
30661: LD_ADDR_VAR 0 2
30665: PUSH
30666: LD_VAR 0 3
30670: PUSH
30671: LD_INT 1
30673: PPUSH
30674: LD_VAR 0 3
30678: PPUSH
30679: CALL_OW 12
30683: ARRAY
30684: ST_TO_ADDR
// if Crawls ( un ) then
30685: LD_VAR 0 2
30689: PPUSH
30690: CALL_OW 318
30694: IFFALSE 30705
// ComWalk ( un ) ;
30696: LD_VAR 0 2
30700: PPUSH
30701: CALL_OW 138
// SetClass ( un , class_sniper ) ;
30705: LD_VAR 0 2
30709: PPUSH
30710: LD_INT 5
30712: PPUSH
30713: CALL_OW 336
// end ;
30717: PPOPN 3
30719: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
30720: LD_EXP 56
30724: PUSH
30725: LD_EXP 74
30729: AND
30730: PUSH
30731: LD_OWVAR 67
30735: PUSH
30736: LD_INT 3
30738: LESS
30739: AND
30740: IFFALSE 30759
30742: GO 30744
30744: DISABLE
// Difficulty := Difficulty + 1 ;
30745: LD_ADDR_OWVAR 67
30749: PUSH
30750: LD_OWVAR 67
30754: PUSH
30755: LD_INT 1
30757: PLUS
30758: ST_TO_ADDR
30759: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
30760: LD_EXP 56
30764: PUSH
30765: LD_EXP 75
30769: AND
30770: IFFALSE 30873
30772: GO 30774
30774: DISABLE
30775: LD_INT 0
30777: PPUSH
// begin for i := 1 to 5 do
30778: LD_ADDR_VAR 0 1
30782: PUSH
30783: DOUBLE
30784: LD_INT 1
30786: DEC
30787: ST_TO_ADDR
30788: LD_INT 5
30790: PUSH
30791: FOR_TO
30792: IFFALSE 30871
// begin uc_nation := nation_nature ;
30794: LD_ADDR_OWVAR 21
30798: PUSH
30799: LD_INT 0
30801: ST_TO_ADDR
// uc_side := 0 ;
30802: LD_ADDR_OWVAR 20
30806: PUSH
30807: LD_INT 0
30809: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30810: LD_ADDR_OWVAR 29
30814: PUSH
30815: LD_INT 12
30817: PUSH
30818: LD_INT 12
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: ST_TO_ADDR
// hc_agressivity := 20 ;
30825: LD_ADDR_OWVAR 35
30829: PUSH
30830: LD_INT 20
30832: ST_TO_ADDR
// hc_class := class_tiger ;
30833: LD_ADDR_OWVAR 28
30837: PUSH
30838: LD_INT 14
30840: ST_TO_ADDR
// hc_gallery :=  ;
30841: LD_ADDR_OWVAR 33
30845: PUSH
30846: LD_STRING 
30848: ST_TO_ADDR
// hc_name :=  ;
30849: LD_ADDR_OWVAR 26
30853: PUSH
30854: LD_STRING 
30856: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
30857: CALL_OW 44
30861: PPUSH
30862: LD_INT 0
30864: PPUSH
30865: CALL_OW 51
// end ;
30869: GO 30791
30871: POP
30872: POP
// end ;
30873: PPOPN 1
30875: END
// every 0 0$1 trigger StreamModeActive and sBomb do
30876: LD_EXP 56
30880: PUSH
30881: LD_EXP 76
30885: AND
30886: IFFALSE 30895
30888: GO 30890
30890: DISABLE
// StreamSibBomb ;
30891: CALL 30896 0 0
30895: END
// export function StreamSibBomb ; var i , x , y ; begin
30896: LD_INT 0
30898: PPUSH
30899: PPUSH
30900: PPUSH
30901: PPUSH
// result := false ;
30902: LD_ADDR_VAR 0 1
30906: PUSH
30907: LD_INT 0
30909: ST_TO_ADDR
// for i := 1 to 16 do
30910: LD_ADDR_VAR 0 2
30914: PUSH
30915: DOUBLE
30916: LD_INT 1
30918: DEC
30919: ST_TO_ADDR
30920: LD_INT 16
30922: PUSH
30923: FOR_TO
30924: IFFALSE 31123
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
30926: LD_ADDR_VAR 0 3
30930: PUSH
30931: LD_INT 10
30933: PUSH
30934: LD_INT 20
30936: PUSH
30937: LD_INT 30
30939: PUSH
30940: LD_INT 40
30942: PUSH
30943: LD_INT 50
30945: PUSH
30946: LD_INT 60
30948: PUSH
30949: LD_INT 70
30951: PUSH
30952: LD_INT 80
30954: PUSH
30955: LD_INT 90
30957: PUSH
30958: LD_INT 100
30960: PUSH
30961: LD_INT 110
30963: PUSH
30964: LD_INT 120
30966: PUSH
30967: LD_INT 130
30969: PUSH
30970: LD_INT 140
30972: PUSH
30973: LD_INT 150
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 1
30995: PPUSH
30996: LD_INT 15
30998: PPUSH
30999: CALL_OW 12
31003: ARRAY
31004: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31005: LD_ADDR_VAR 0 4
31009: PUSH
31010: LD_INT 10
31012: PUSH
31013: LD_INT 20
31015: PUSH
31016: LD_INT 30
31018: PUSH
31019: LD_INT 40
31021: PUSH
31022: LD_INT 50
31024: PUSH
31025: LD_INT 60
31027: PUSH
31028: LD_INT 70
31030: PUSH
31031: LD_INT 80
31033: PUSH
31034: LD_INT 90
31036: PUSH
31037: LD_INT 100
31039: PUSH
31040: LD_INT 110
31042: PUSH
31043: LD_INT 120
31045: PUSH
31046: LD_INT 130
31048: PUSH
31049: LD_INT 140
31051: PUSH
31052: LD_INT 150
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 1
31074: PPUSH
31075: LD_INT 15
31077: PPUSH
31078: CALL_OW 12
31082: ARRAY
31083: ST_TO_ADDR
// if ValidHex ( x , y ) then
31084: LD_VAR 0 3
31088: PPUSH
31089: LD_VAR 0 4
31093: PPUSH
31094: CALL_OW 488
31098: IFFALSE 31121
// begin result := [ x , y ] ;
31100: LD_ADDR_VAR 0 1
31104: PUSH
31105: LD_VAR 0 3
31109: PUSH
31110: LD_VAR 0 4
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: ST_TO_ADDR
// break ;
31119: GO 31123
// end ; end ;
31121: GO 30923
31123: POP
31124: POP
// if result then
31125: LD_VAR 0 1
31129: IFFALSE 31189
// begin ToLua ( playSibBomb() ) ;
31131: LD_STRING playSibBomb()
31133: PPUSH
31134: CALL_OW 559
// wait ( 0 0$14 ) ;
31138: LD_INT 490
31140: PPUSH
31141: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
31145: LD_VAR 0 1
31149: PUSH
31150: LD_INT 1
31152: ARRAY
31153: PPUSH
31154: LD_VAR 0 1
31158: PUSH
31159: LD_INT 2
31161: ARRAY
31162: PPUSH
31163: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
31167: LD_VAR 0 1
31171: PUSH
31172: LD_INT 1
31174: ARRAY
31175: PPUSH
31176: LD_VAR 0 1
31180: PUSH
31181: LD_INT 2
31183: ARRAY
31184: PPUSH
31185: CALL_OW 429
// end ; end ;
31189: LD_VAR 0 1
31193: RET
// every 0 0$1 trigger StreamModeActive and sReset do
31194: LD_EXP 56
31198: PUSH
31199: LD_EXP 78
31203: AND
31204: IFFALSE 31216
31206: GO 31208
31208: DISABLE
// YouLost (  ) ;
31209: LD_STRING 
31211: PPUSH
31212: CALL_OW 104
31216: END
// every 0 0$1 trigger StreamModeActive and sFog do
31217: LD_EXP 56
31221: PUSH
31222: LD_EXP 77
31226: AND
31227: IFFALSE 31241
31229: GO 31231
31231: DISABLE
// FogOff ( your_side ) ;
31232: LD_OWVAR 2
31236: PPUSH
31237: CALL_OW 344
31241: END
// every 0 0$1 trigger StreamModeActive and sSun do
31242: LD_EXP 56
31246: PUSH
31247: LD_EXP 79
31251: AND
31252: IFFALSE 31280
31254: GO 31256
31256: DISABLE
// begin solar_recharge_percent := 0 ;
31257: LD_ADDR_OWVAR 79
31261: PUSH
31262: LD_INT 0
31264: ST_TO_ADDR
// wait ( 5 5$00 ) ;
31265: LD_INT 10500
31267: PPUSH
31268: CALL_OW 67
// solar_recharge_percent := 100 ;
31272: LD_ADDR_OWVAR 79
31276: PUSH
31277: LD_INT 100
31279: ST_TO_ADDR
// end ;
31280: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
31281: LD_EXP 56
31285: PUSH
31286: LD_EXP 80
31290: AND
31291: IFFALSE 31530
31293: GO 31295
31295: DISABLE
31296: LD_INT 0
31298: PPUSH
31299: PPUSH
31300: PPUSH
// begin tmp := [ ] ;
31301: LD_ADDR_VAR 0 3
31305: PUSH
31306: EMPTY
31307: ST_TO_ADDR
// for i := 1 to 6 do
31308: LD_ADDR_VAR 0 1
31312: PUSH
31313: DOUBLE
31314: LD_INT 1
31316: DEC
31317: ST_TO_ADDR
31318: LD_INT 6
31320: PUSH
31321: FOR_TO
31322: IFFALSE 31427
// begin uc_nation := nation_nature ;
31324: LD_ADDR_OWVAR 21
31328: PUSH
31329: LD_INT 0
31331: ST_TO_ADDR
// uc_side := 0 ;
31332: LD_ADDR_OWVAR 20
31336: PUSH
31337: LD_INT 0
31339: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31340: LD_ADDR_OWVAR 29
31344: PUSH
31345: LD_INT 12
31347: PUSH
31348: LD_INT 12
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: ST_TO_ADDR
// hc_agressivity := 20 ;
31355: LD_ADDR_OWVAR 35
31359: PUSH
31360: LD_INT 20
31362: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
31363: LD_ADDR_OWVAR 28
31367: PUSH
31368: LD_INT 17
31370: ST_TO_ADDR
// hc_gallery :=  ;
31371: LD_ADDR_OWVAR 33
31375: PUSH
31376: LD_STRING 
31378: ST_TO_ADDR
// hc_name :=  ;
31379: LD_ADDR_OWVAR 26
31383: PUSH
31384: LD_STRING 
31386: ST_TO_ADDR
// un := CreateHuman ;
31387: LD_ADDR_VAR 0 2
31391: PUSH
31392: CALL_OW 44
31396: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
31397: LD_VAR 0 2
31401: PPUSH
31402: LD_INT 1
31404: PPUSH
31405: CALL_OW 51
// tmp := tmp ^ un ;
31409: LD_ADDR_VAR 0 3
31413: PUSH
31414: LD_VAR 0 3
31418: PUSH
31419: LD_VAR 0 2
31423: ADD
31424: ST_TO_ADDR
// end ;
31425: GO 31321
31427: POP
31428: POP
// repeat wait ( 0 0$1 ) ;
31429: LD_INT 35
31431: PPUSH
31432: CALL_OW 67
// for un in tmp do
31436: LD_ADDR_VAR 0 2
31440: PUSH
31441: LD_VAR 0 3
31445: PUSH
31446: FOR_IN
31447: IFFALSE 31521
// begin if IsDead ( un ) then
31449: LD_VAR 0 2
31453: PPUSH
31454: CALL_OW 301
31458: IFFALSE 31478
// begin tmp := tmp diff un ;
31460: LD_ADDR_VAR 0 3
31464: PUSH
31465: LD_VAR 0 3
31469: PUSH
31470: LD_VAR 0 2
31474: DIFF
31475: ST_TO_ADDR
// continue ;
31476: GO 31446
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
31478: LD_VAR 0 2
31482: PPUSH
31483: LD_INT 3
31485: PUSH
31486: LD_INT 22
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PPUSH
31500: CALL_OW 69
31504: PPUSH
31505: LD_VAR 0 2
31509: PPUSH
31510: CALL_OW 74
31514: PPUSH
31515: CALL_OW 115
// end ;
31519: GO 31446
31521: POP
31522: POP
// until not tmp ;
31523: LD_VAR 0 3
31527: NOT
31528: IFFALSE 31429
// end ;
31530: PPOPN 3
31532: END
// every 0 0$1 trigger StreamModeActive and sTroll do
31533: LD_EXP 56
31537: PUSH
31538: LD_EXP 81
31542: AND
31543: IFFALSE 31597
31545: GO 31547
31547: DISABLE
// begin ToLua ( displayTroll(); ) ;
31548: LD_STRING displayTroll();
31550: PPUSH
31551: CALL_OW 559
// wait ( 3 3$00 ) ;
31555: LD_INT 6300
31557: PPUSH
31558: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31562: LD_STRING hideTroll();
31564: PPUSH
31565: CALL_OW 559
// wait ( 1 1$00 ) ;
31569: LD_INT 2100
31571: PPUSH
31572: CALL_OW 67
// ToLua ( displayTroll(); ) ;
31576: LD_STRING displayTroll();
31578: PPUSH
31579: CALL_OW 559
// wait ( 1 1$00 ) ;
31583: LD_INT 2100
31585: PPUSH
31586: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31590: LD_STRING hideTroll();
31592: PPUSH
31593: CALL_OW 559
// end ;
31597: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
31598: LD_EXP 56
31602: PUSH
31603: LD_EXP 82
31607: AND
31608: IFFALSE 31671
31610: GO 31612
31612: DISABLE
31613: LD_INT 0
31615: PPUSH
// begin p := 0 ;
31616: LD_ADDR_VAR 0 1
31620: PUSH
31621: LD_INT 0
31623: ST_TO_ADDR
// repeat game_speed := 1 ;
31624: LD_ADDR_OWVAR 65
31628: PUSH
31629: LD_INT 1
31631: ST_TO_ADDR
// wait ( 0 0$1 ) ;
31632: LD_INT 35
31634: PPUSH
31635: CALL_OW 67
// p := p + 1 ;
31639: LD_ADDR_VAR 0 1
31643: PUSH
31644: LD_VAR 0 1
31648: PUSH
31649: LD_INT 1
31651: PLUS
31652: ST_TO_ADDR
// until p >= 60 ;
31653: LD_VAR 0 1
31657: PUSH
31658: LD_INT 60
31660: GREATEREQUAL
31661: IFFALSE 31624
// game_speed := 4 ;
31663: LD_ADDR_OWVAR 65
31667: PUSH
31668: LD_INT 4
31670: ST_TO_ADDR
// end ;
31671: PPOPN 1
31673: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
31674: LD_EXP 56
31678: PUSH
31679: LD_EXP 83
31683: AND
31684: IFFALSE 31830
31686: GO 31688
31688: DISABLE
31689: LD_INT 0
31691: PPUSH
31692: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31693: LD_ADDR_VAR 0 1
31697: PUSH
31698: LD_INT 22
31700: PUSH
31701: LD_OWVAR 2
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: LD_INT 30
31715: PUSH
31716: LD_INT 0
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 30
31725: PUSH
31726: LD_INT 1
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: LIST
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PPUSH
31742: CALL_OW 69
31746: ST_TO_ADDR
// if not depot then
31747: LD_VAR 0 1
31751: NOT
31752: IFFALSE 31756
// exit ;
31754: GO 31830
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
31756: LD_ADDR_VAR 0 2
31760: PUSH
31761: LD_VAR 0 1
31765: PUSH
31766: LD_INT 1
31768: PPUSH
31769: LD_VAR 0 1
31773: PPUSH
31774: CALL_OW 12
31778: ARRAY
31779: PPUSH
31780: CALL_OW 274
31784: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
31785: LD_VAR 0 2
31789: PPUSH
31790: LD_INT 1
31792: PPUSH
31793: LD_INT 0
31795: PPUSH
31796: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
31800: LD_VAR 0 2
31804: PPUSH
31805: LD_INT 2
31807: PPUSH
31808: LD_INT 0
31810: PPUSH
31811: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
31815: LD_VAR 0 2
31819: PPUSH
31820: LD_INT 3
31822: PPUSH
31823: LD_INT 0
31825: PPUSH
31826: CALL_OW 277
// end ;
31830: PPOPN 2
31832: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
31833: LD_EXP 56
31837: PUSH
31838: LD_EXP 84
31842: AND
31843: IFFALSE 31940
31845: GO 31847
31847: DISABLE
31848: LD_INT 0
31850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31851: LD_ADDR_VAR 0 1
31855: PUSH
31856: LD_INT 22
31858: PUSH
31859: LD_OWVAR 2
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 21
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 3
31880: PUSH
31881: LD_INT 23
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: LIST
31899: PPUSH
31900: CALL_OW 69
31904: ST_TO_ADDR
// if not tmp then
31905: LD_VAR 0 1
31909: NOT
31910: IFFALSE 31914
// exit ;
31912: GO 31940
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
31914: LD_VAR 0 1
31918: PUSH
31919: LD_INT 1
31921: PPUSH
31922: LD_VAR 0 1
31926: PPUSH
31927: CALL_OW 12
31931: ARRAY
31932: PPUSH
31933: LD_INT 200
31935: PPUSH
31936: CALL_OW 234
// end ;
31940: PPOPN 1
31942: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
31943: LD_EXP 56
31947: PUSH
31948: LD_EXP 85
31952: AND
31953: IFFALSE 32032
31955: GO 31957
31957: DISABLE
31958: LD_INT 0
31960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
31961: LD_ADDR_VAR 0 1
31965: PUSH
31966: LD_INT 22
31968: PUSH
31969: LD_OWVAR 2
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 21
31980: PUSH
31981: LD_INT 2
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PPUSH
31992: CALL_OW 69
31996: ST_TO_ADDR
// if not tmp then
31997: LD_VAR 0 1
32001: NOT
32002: IFFALSE 32006
// exit ;
32004: GO 32032
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32006: LD_VAR 0 1
32010: PUSH
32011: LD_INT 1
32013: PPUSH
32014: LD_VAR 0 1
32018: PPUSH
32019: CALL_OW 12
32023: ARRAY
32024: PPUSH
32025: LD_INT 60
32027: PPUSH
32028: CALL_OW 234
// end ;
32032: PPOPN 1
32034: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32035: LD_EXP 56
32039: PUSH
32040: LD_EXP 86
32044: AND
32045: IFFALSE 32144
32047: GO 32049
32049: DISABLE
32050: LD_INT 0
32052: PPUSH
32053: PPUSH
// begin enable ;
32054: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
32055: LD_ADDR_VAR 0 1
32059: PUSH
32060: LD_INT 22
32062: PUSH
32063: LD_OWVAR 2
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 61
32074: PUSH
32075: EMPTY
32076: LIST
32077: PUSH
32078: LD_INT 33
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: LIST
32092: PPUSH
32093: CALL_OW 69
32097: ST_TO_ADDR
// if not tmp then
32098: LD_VAR 0 1
32102: NOT
32103: IFFALSE 32107
// exit ;
32105: GO 32144
// for i in tmp do
32107: LD_ADDR_VAR 0 2
32111: PUSH
32112: LD_VAR 0 1
32116: PUSH
32117: FOR_IN
32118: IFFALSE 32142
// if IsControledBy ( i ) then
32120: LD_VAR 0 2
32124: PPUSH
32125: CALL_OW 312
32129: IFFALSE 32140
// ComUnlink ( i ) ;
32131: LD_VAR 0 2
32135: PPUSH
32136: CALL_OW 136
32140: GO 32117
32142: POP
32143: POP
// end ;
32144: PPOPN 2
32146: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
32147: LD_EXP 56
32151: PUSH
32152: LD_EXP 87
32156: AND
32157: IFFALSE 32297
32159: GO 32161
32161: DISABLE
32162: LD_INT 0
32164: PPUSH
32165: PPUSH
// begin ToLua ( displayPowell(); ) ;
32166: LD_STRING displayPowell();
32168: PPUSH
32169: CALL_OW 559
// uc_side := 0 ;
32173: LD_ADDR_OWVAR 20
32177: PUSH
32178: LD_INT 0
32180: ST_TO_ADDR
// uc_nation := 2 ;
32181: LD_ADDR_OWVAR 21
32185: PUSH
32186: LD_INT 2
32188: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
32189: LD_ADDR_OWVAR 37
32193: PUSH
32194: LD_INT 14
32196: ST_TO_ADDR
// vc_engine := engine_siberite ;
32197: LD_ADDR_OWVAR 39
32201: PUSH
32202: LD_INT 3
32204: ST_TO_ADDR
// vc_control := control_apeman ;
32205: LD_ADDR_OWVAR 38
32209: PUSH
32210: LD_INT 5
32212: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
32213: LD_ADDR_OWVAR 40
32217: PUSH
32218: LD_INT 29
32220: ST_TO_ADDR
// un := CreateVehicle ;
32221: LD_ADDR_VAR 0 2
32225: PUSH
32226: CALL_OW 45
32230: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32231: LD_VAR 0 2
32235: PPUSH
32236: LD_INT 1
32238: PPUSH
32239: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32243: LD_INT 35
32245: PPUSH
32246: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32250: LD_VAR 0 2
32254: PPUSH
32255: LD_INT 22
32257: PUSH
32258: LD_OWVAR 2
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PPUSH
32267: CALL_OW 69
32271: PPUSH
32272: LD_VAR 0 2
32276: PPUSH
32277: CALL_OW 74
32281: PPUSH
32282: CALL_OW 115
// until IsDead ( un ) ;
32286: LD_VAR 0 2
32290: PPUSH
32291: CALL_OW 301
32295: IFFALSE 32243
// end ;
32297: PPOPN 2
32299: END
// every 0 0$1 trigger StreamModeActive and sStu do
32300: LD_EXP 56
32304: PUSH
32305: LD_EXP 95
32309: AND
32310: IFFALSE 32326
32312: GO 32314
32314: DISABLE
// begin ToLua ( displayStucuk(); ) ;
32315: LD_STRING displayStucuk();
32317: PPUSH
32318: CALL_OW 559
// ResetFog ;
32322: CALL_OW 335
// end ;
32326: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
32327: LD_EXP 56
32331: PUSH
32332: LD_EXP 88
32336: AND
32337: IFFALSE 32478
32339: GO 32341
32341: DISABLE
32342: LD_INT 0
32344: PPUSH
32345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32346: LD_ADDR_VAR 0 2
32350: PUSH
32351: LD_INT 22
32353: PUSH
32354: LD_OWVAR 2
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 21
32365: PUSH
32366: LD_INT 1
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PPUSH
32377: CALL_OW 69
32381: ST_TO_ADDR
// if not tmp then
32382: LD_VAR 0 2
32386: NOT
32387: IFFALSE 32391
// exit ;
32389: GO 32478
// un := tmp [ rand ( 1 , tmp ) ] ;
32391: LD_ADDR_VAR 0 1
32395: PUSH
32396: LD_VAR 0 2
32400: PUSH
32401: LD_INT 1
32403: PPUSH
32404: LD_VAR 0 2
32408: PPUSH
32409: CALL_OW 12
32413: ARRAY
32414: ST_TO_ADDR
// SetSide ( un , 0 ) ;
32415: LD_VAR 0 1
32419: PPUSH
32420: LD_INT 0
32422: PPUSH
32423: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
32427: LD_VAR 0 1
32431: PPUSH
32432: LD_OWVAR 3
32436: PUSH
32437: LD_VAR 0 1
32441: DIFF
32442: PPUSH
32443: LD_VAR 0 1
32447: PPUSH
32448: CALL_OW 74
32452: PPUSH
32453: CALL_OW 115
// wait ( 0 0$20 ) ;
32457: LD_INT 700
32459: PPUSH
32460: CALL_OW 67
// SetSide ( un , your_side ) ;
32464: LD_VAR 0 1
32468: PPUSH
32469: LD_OWVAR 2
32473: PPUSH
32474: CALL_OW 235
// end ;
32478: PPOPN 2
32480: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
32481: LD_EXP 56
32485: PUSH
32486: LD_EXP 89
32490: AND
32491: IFFALSE 32597
32493: GO 32495
32495: DISABLE
32496: LD_INT 0
32498: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32499: LD_ADDR_VAR 0 1
32503: PUSH
32504: LD_INT 22
32506: PUSH
32507: LD_OWVAR 2
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 2
32518: PUSH
32519: LD_INT 30
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 30
32531: PUSH
32532: LD_INT 1
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: LIST
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PPUSH
32548: CALL_OW 69
32552: ST_TO_ADDR
// if not depot then
32553: LD_VAR 0 1
32557: NOT
32558: IFFALSE 32562
// exit ;
32560: GO 32597
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
32562: LD_VAR 0 1
32566: PUSH
32567: LD_INT 1
32569: ARRAY
32570: PPUSH
32571: CALL_OW 250
32575: PPUSH
32576: LD_VAR 0 1
32580: PUSH
32581: LD_INT 1
32583: ARRAY
32584: PPUSH
32585: CALL_OW 251
32589: PPUSH
32590: LD_INT 70
32592: PPUSH
32593: CALL_OW 495
// end ;
32597: PPOPN 1
32599: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
32600: LD_EXP 56
32604: PUSH
32605: LD_EXP 90
32609: AND
32610: IFFALSE 32821
32612: GO 32614
32614: DISABLE
32615: LD_INT 0
32617: PPUSH
32618: PPUSH
32619: PPUSH
32620: PPUSH
32621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32622: LD_ADDR_VAR 0 5
32626: PUSH
32627: LD_INT 22
32629: PUSH
32630: LD_OWVAR 2
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 21
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PPUSH
32653: CALL_OW 69
32657: ST_TO_ADDR
// if not tmp then
32658: LD_VAR 0 5
32662: NOT
32663: IFFALSE 32667
// exit ;
32665: GO 32821
// for i in tmp do
32667: LD_ADDR_VAR 0 1
32671: PUSH
32672: LD_VAR 0 5
32676: PUSH
32677: FOR_IN
32678: IFFALSE 32819
// begin d := rand ( 0 , 5 ) ;
32680: LD_ADDR_VAR 0 4
32684: PUSH
32685: LD_INT 0
32687: PPUSH
32688: LD_INT 5
32690: PPUSH
32691: CALL_OW 12
32695: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
32696: LD_ADDR_VAR 0 2
32700: PUSH
32701: LD_VAR 0 1
32705: PPUSH
32706: CALL_OW 250
32710: PPUSH
32711: LD_VAR 0 4
32715: PPUSH
32716: LD_INT 3
32718: PPUSH
32719: LD_INT 12
32721: PPUSH
32722: CALL_OW 12
32726: PPUSH
32727: CALL_OW 272
32731: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
32732: LD_ADDR_VAR 0 3
32736: PUSH
32737: LD_VAR 0 1
32741: PPUSH
32742: CALL_OW 251
32746: PPUSH
32747: LD_VAR 0 4
32751: PPUSH
32752: LD_INT 3
32754: PPUSH
32755: LD_INT 12
32757: PPUSH
32758: CALL_OW 12
32762: PPUSH
32763: CALL_OW 273
32767: ST_TO_ADDR
// if ValidHex ( x , y ) then
32768: LD_VAR 0 2
32772: PPUSH
32773: LD_VAR 0 3
32777: PPUSH
32778: CALL_OW 488
32782: IFFALSE 32817
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
32784: LD_VAR 0 1
32788: PPUSH
32789: LD_VAR 0 2
32793: PPUSH
32794: LD_VAR 0 3
32798: PPUSH
32799: LD_INT 3
32801: PPUSH
32802: LD_INT 6
32804: PPUSH
32805: CALL_OW 12
32809: PPUSH
32810: LD_INT 1
32812: PPUSH
32813: CALL_OW 483
// end ;
32817: GO 32677
32819: POP
32820: POP
// end ;
32821: PPOPN 5
32823: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
32824: LD_EXP 56
32828: PUSH
32829: LD_EXP 91
32833: AND
32834: IFFALSE 32928
32836: GO 32838
32838: DISABLE
32839: LD_INT 0
32841: PPUSH
32842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
32843: LD_ADDR_VAR 0 2
32847: PUSH
32848: LD_INT 22
32850: PUSH
32851: LD_OWVAR 2
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 32
32862: PUSH
32863: LD_INT 1
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 21
32872: PUSH
32873: LD_INT 2
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: PPUSH
32885: CALL_OW 69
32889: ST_TO_ADDR
// if not tmp then
32890: LD_VAR 0 2
32894: NOT
32895: IFFALSE 32899
// exit ;
32897: GO 32928
// for i in tmp do
32899: LD_ADDR_VAR 0 1
32903: PUSH
32904: LD_VAR 0 2
32908: PUSH
32909: FOR_IN
32910: IFFALSE 32926
// SetFuel ( i , 0 ) ;
32912: LD_VAR 0 1
32916: PPUSH
32917: LD_INT 0
32919: PPUSH
32920: CALL_OW 240
32924: GO 32909
32926: POP
32927: POP
// end ;
32928: PPOPN 2
32930: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
32931: LD_EXP 56
32935: PUSH
32936: LD_EXP 92
32940: AND
32941: IFFALSE 33007
32943: GO 32945
32945: DISABLE
32946: LD_INT 0
32948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32949: LD_ADDR_VAR 0 1
32953: PUSH
32954: LD_INT 22
32956: PUSH
32957: LD_OWVAR 2
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 30
32968: PUSH
32969: LD_INT 29
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PPUSH
32980: CALL_OW 69
32984: ST_TO_ADDR
// if not tmp then
32985: LD_VAR 0 1
32989: NOT
32990: IFFALSE 32994
// exit ;
32992: GO 33007
// DestroyUnit ( tmp [ 1 ] ) ;
32994: LD_VAR 0 1
32998: PUSH
32999: LD_INT 1
33001: ARRAY
33002: PPUSH
33003: CALL_OW 65
// end ;
33007: PPOPN 1
33009: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33010: LD_EXP 56
33014: PUSH
33015: LD_EXP 94
33019: AND
33020: IFFALSE 33149
33022: GO 33024
33024: DISABLE
33025: LD_INT 0
33027: PPUSH
// begin uc_side := 0 ;
33028: LD_ADDR_OWVAR 20
33032: PUSH
33033: LD_INT 0
33035: ST_TO_ADDR
// uc_nation := nation_arabian ;
33036: LD_ADDR_OWVAR 21
33040: PUSH
33041: LD_INT 2
33043: ST_TO_ADDR
// hc_gallery :=  ;
33044: LD_ADDR_OWVAR 33
33048: PUSH
33049: LD_STRING 
33051: ST_TO_ADDR
// hc_name :=  ;
33052: LD_ADDR_OWVAR 26
33056: PUSH
33057: LD_STRING 
33059: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
33060: LD_INT 1
33062: PPUSH
33063: LD_INT 11
33065: PPUSH
33066: LD_INT 10
33068: PPUSH
33069: CALL_OW 380
// un := CreateHuman ;
33073: LD_ADDR_VAR 0 1
33077: PUSH
33078: CALL_OW 44
33082: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33083: LD_VAR 0 1
33087: PPUSH
33088: LD_INT 1
33090: PPUSH
33091: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33095: LD_INT 35
33097: PPUSH
33098: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33102: LD_VAR 0 1
33106: PPUSH
33107: LD_INT 22
33109: PUSH
33110: LD_OWVAR 2
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PPUSH
33119: CALL_OW 69
33123: PPUSH
33124: LD_VAR 0 1
33128: PPUSH
33129: CALL_OW 74
33133: PPUSH
33134: CALL_OW 115
// until IsDead ( un ) ;
33138: LD_VAR 0 1
33142: PPUSH
33143: CALL_OW 301
33147: IFFALSE 33095
// end ;
33149: PPOPN 1
33151: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
33152: LD_EXP 56
33156: PUSH
33157: LD_EXP 96
33161: AND
33162: IFFALSE 33174
33164: GO 33166
33166: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
33167: LD_STRING earthquake(getX(game), 0, 32)
33169: PPUSH
33170: CALL_OW 559
33174: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
33175: LD_EXP 56
33179: PUSH
33180: LD_EXP 97
33184: AND
33185: IFFALSE 33276
33187: GO 33189
33189: DISABLE
33190: LD_INT 0
33192: PPUSH
// begin enable ;
33193: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
33194: LD_ADDR_VAR 0 1
33198: PUSH
33199: LD_INT 22
33201: PUSH
33202: LD_OWVAR 2
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 21
33213: PUSH
33214: LD_INT 2
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 33
33223: PUSH
33224: LD_INT 3
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: LIST
33235: PPUSH
33236: CALL_OW 69
33240: ST_TO_ADDR
// if not tmp then
33241: LD_VAR 0 1
33245: NOT
33246: IFFALSE 33250
// exit ;
33248: GO 33276
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33250: LD_VAR 0 1
33254: PUSH
33255: LD_INT 1
33257: PPUSH
33258: LD_VAR 0 1
33262: PPUSH
33263: CALL_OW 12
33267: ARRAY
33268: PPUSH
33269: LD_INT 1
33271: PPUSH
33272: CALL_OW 234
// end ;
33276: PPOPN 1
33278: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
33279: LD_EXP 56
33283: PUSH
33284: LD_EXP 98
33288: AND
33289: IFFALSE 33430
33291: GO 33293
33293: DISABLE
33294: LD_INT 0
33296: PPUSH
33297: PPUSH
33298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33299: LD_ADDR_VAR 0 3
33303: PUSH
33304: LD_INT 22
33306: PUSH
33307: LD_OWVAR 2
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 25
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PPUSH
33330: CALL_OW 69
33334: ST_TO_ADDR
// if not tmp then
33335: LD_VAR 0 3
33339: NOT
33340: IFFALSE 33344
// exit ;
33342: GO 33430
// un := tmp [ rand ( 1 , tmp ) ] ;
33344: LD_ADDR_VAR 0 2
33348: PUSH
33349: LD_VAR 0 3
33353: PUSH
33354: LD_INT 1
33356: PPUSH
33357: LD_VAR 0 3
33361: PPUSH
33362: CALL_OW 12
33366: ARRAY
33367: ST_TO_ADDR
// if Crawls ( un ) then
33368: LD_VAR 0 2
33372: PPUSH
33373: CALL_OW 318
33377: IFFALSE 33388
// ComWalk ( un ) ;
33379: LD_VAR 0 2
33383: PPUSH
33384: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
33388: LD_VAR 0 2
33392: PPUSH
33393: LD_INT 9
33395: PPUSH
33396: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
33400: LD_INT 28
33402: PPUSH
33403: LD_OWVAR 2
33407: PPUSH
33408: LD_INT 2
33410: PPUSH
33411: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
33415: LD_INT 29
33417: PPUSH
33418: LD_OWVAR 2
33422: PPUSH
33423: LD_INT 2
33425: PPUSH
33426: CALL_OW 322
// end ;
33430: PPOPN 3
33432: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
33433: LD_EXP 56
33437: PUSH
33438: LD_EXP 99
33442: AND
33443: IFFALSE 33554
33445: GO 33447
33447: DISABLE
33448: LD_INT 0
33450: PPUSH
33451: PPUSH
33452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33453: LD_ADDR_VAR 0 3
33457: PUSH
33458: LD_INT 22
33460: PUSH
33461: LD_OWVAR 2
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 25
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PPUSH
33484: CALL_OW 69
33488: ST_TO_ADDR
// if not tmp then
33489: LD_VAR 0 3
33493: NOT
33494: IFFALSE 33498
// exit ;
33496: GO 33554
// un := tmp [ rand ( 1 , tmp ) ] ;
33498: LD_ADDR_VAR 0 2
33502: PUSH
33503: LD_VAR 0 3
33507: PUSH
33508: LD_INT 1
33510: PPUSH
33511: LD_VAR 0 3
33515: PPUSH
33516: CALL_OW 12
33520: ARRAY
33521: ST_TO_ADDR
// if Crawls ( un ) then
33522: LD_VAR 0 2
33526: PPUSH
33527: CALL_OW 318
33531: IFFALSE 33542
// ComWalk ( un ) ;
33533: LD_VAR 0 2
33537: PPUSH
33538: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33542: LD_VAR 0 2
33546: PPUSH
33547: LD_INT 8
33549: PPUSH
33550: CALL_OW 336
// end ;
33554: PPOPN 3
33556: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
33557: LD_EXP 56
33561: PUSH
33562: LD_EXP 100
33566: AND
33567: IFFALSE 33711
33569: GO 33571
33571: DISABLE
33572: LD_INT 0
33574: PPUSH
33575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
33576: LD_ADDR_VAR 0 2
33580: PUSH
33581: LD_INT 22
33583: PUSH
33584: LD_OWVAR 2
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 21
33595: PUSH
33596: LD_INT 2
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 2
33605: PUSH
33606: LD_INT 34
33608: PUSH
33609: LD_INT 12
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 34
33618: PUSH
33619: LD_INT 51
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 34
33628: PUSH
33629: LD_INT 32
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: PPUSH
33647: CALL_OW 69
33651: ST_TO_ADDR
// if not tmp then
33652: LD_VAR 0 2
33656: NOT
33657: IFFALSE 33661
// exit ;
33659: GO 33711
// for i in tmp do
33661: LD_ADDR_VAR 0 1
33665: PUSH
33666: LD_VAR 0 2
33670: PUSH
33671: FOR_IN
33672: IFFALSE 33709
// if GetCargo ( i , mat_artifact ) = 0 then
33674: LD_VAR 0 1
33678: PPUSH
33679: LD_INT 4
33681: PPUSH
33682: CALL_OW 289
33686: PUSH
33687: LD_INT 0
33689: EQUAL
33690: IFFALSE 33707
// SetCargo ( i , mat_siberit , 100 ) ;
33692: LD_VAR 0 1
33696: PPUSH
33697: LD_INT 3
33699: PPUSH
33700: LD_INT 100
33702: PPUSH
33703: CALL_OW 290
33707: GO 33671
33709: POP
33710: POP
// end ;
33711: PPOPN 2
33713: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
33714: LD_EXP 56
33718: PUSH
33719: LD_EXP 101
33723: AND
33724: IFFALSE 33877
33726: GO 33728
33728: DISABLE
33729: LD_INT 0
33731: PPUSH
33732: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33733: LD_ADDR_VAR 0 2
33737: PUSH
33738: LD_INT 22
33740: PUSH
33741: LD_OWVAR 2
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PPUSH
33750: CALL_OW 69
33754: ST_TO_ADDR
// if not tmp then
33755: LD_VAR 0 2
33759: NOT
33760: IFFALSE 33764
// exit ;
33762: GO 33877
// for i := 1 to 2 do
33764: LD_ADDR_VAR 0 1
33768: PUSH
33769: DOUBLE
33770: LD_INT 1
33772: DEC
33773: ST_TO_ADDR
33774: LD_INT 2
33776: PUSH
33777: FOR_TO
33778: IFFALSE 33875
// begin uc_side := your_side ;
33780: LD_ADDR_OWVAR 20
33784: PUSH
33785: LD_OWVAR 2
33789: ST_TO_ADDR
// uc_nation := nation_american ;
33790: LD_ADDR_OWVAR 21
33794: PUSH
33795: LD_INT 1
33797: ST_TO_ADDR
// vc_chassis := us_morphling ;
33798: LD_ADDR_OWVAR 37
33802: PUSH
33803: LD_INT 5
33805: ST_TO_ADDR
// vc_engine := engine_siberite ;
33806: LD_ADDR_OWVAR 39
33810: PUSH
33811: LD_INT 3
33813: ST_TO_ADDR
// vc_control := control_computer ;
33814: LD_ADDR_OWVAR 38
33818: PUSH
33819: LD_INT 3
33821: ST_TO_ADDR
// vc_weapon := us_double_laser ;
33822: LD_ADDR_OWVAR 40
33826: PUSH
33827: LD_INT 10
33829: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
33830: CALL_OW 45
33834: PPUSH
33835: LD_VAR 0 2
33839: PUSH
33840: LD_INT 1
33842: ARRAY
33843: PPUSH
33844: CALL_OW 250
33848: PPUSH
33849: LD_VAR 0 2
33853: PUSH
33854: LD_INT 1
33856: ARRAY
33857: PPUSH
33858: CALL_OW 251
33862: PPUSH
33863: LD_INT 12
33865: PPUSH
33866: LD_INT 1
33868: PPUSH
33869: CALL_OW 50
// end ;
33873: GO 33777
33875: POP
33876: POP
// end ;
33877: PPOPN 2
33879: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
33880: LD_EXP 56
33884: PUSH
33885: LD_EXP 102
33889: AND
33890: IFFALSE 34112
33892: GO 33894
33894: DISABLE
33895: LD_INT 0
33897: PPUSH
33898: PPUSH
33899: PPUSH
33900: PPUSH
33901: PPUSH
33902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33903: LD_ADDR_VAR 0 6
33907: PUSH
33908: LD_INT 22
33910: PUSH
33911: LD_OWVAR 2
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 21
33922: PUSH
33923: LD_INT 1
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 3
33932: PUSH
33933: LD_INT 23
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: LIST
33951: PPUSH
33952: CALL_OW 69
33956: ST_TO_ADDR
// if not tmp then
33957: LD_VAR 0 6
33961: NOT
33962: IFFALSE 33966
// exit ;
33964: GO 34112
// s1 := rand ( 1 , 4 ) ;
33966: LD_ADDR_VAR 0 2
33970: PUSH
33971: LD_INT 1
33973: PPUSH
33974: LD_INT 4
33976: PPUSH
33977: CALL_OW 12
33981: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
33982: LD_ADDR_VAR 0 4
33986: PUSH
33987: LD_VAR 0 6
33991: PUSH
33992: LD_INT 1
33994: ARRAY
33995: PPUSH
33996: LD_VAR 0 2
34000: PPUSH
34001: CALL_OW 259
34005: ST_TO_ADDR
// if s1 = 1 then
34006: LD_VAR 0 2
34010: PUSH
34011: LD_INT 1
34013: EQUAL
34014: IFFALSE 34034
// s2 := rand ( 2 , 4 ) else
34016: LD_ADDR_VAR 0 3
34020: PUSH
34021: LD_INT 2
34023: PPUSH
34024: LD_INT 4
34026: PPUSH
34027: CALL_OW 12
34031: ST_TO_ADDR
34032: GO 34042
// s2 := 1 ;
34034: LD_ADDR_VAR 0 3
34038: PUSH
34039: LD_INT 1
34041: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
34042: LD_ADDR_VAR 0 5
34046: PUSH
34047: LD_VAR 0 6
34051: PUSH
34052: LD_INT 1
34054: ARRAY
34055: PPUSH
34056: LD_VAR 0 3
34060: PPUSH
34061: CALL_OW 259
34065: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
34066: LD_VAR 0 6
34070: PUSH
34071: LD_INT 1
34073: ARRAY
34074: PPUSH
34075: LD_VAR 0 2
34079: PPUSH
34080: LD_VAR 0 5
34084: PPUSH
34085: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
34089: LD_VAR 0 6
34093: PUSH
34094: LD_INT 1
34096: ARRAY
34097: PPUSH
34098: LD_VAR 0 3
34102: PPUSH
34103: LD_VAR 0 4
34107: PPUSH
34108: CALL_OW 237
// end ;
34112: PPOPN 6
34114: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
34115: LD_EXP 56
34119: PUSH
34120: LD_EXP 103
34124: AND
34125: IFFALSE 34204
34127: GO 34129
34129: DISABLE
34130: LD_INT 0
34132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
34133: LD_ADDR_VAR 0 1
34137: PUSH
34138: LD_INT 22
34140: PUSH
34141: LD_OWVAR 2
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 30
34152: PUSH
34153: LD_INT 3
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PPUSH
34164: CALL_OW 69
34168: ST_TO_ADDR
// if not tmp then
34169: LD_VAR 0 1
34173: NOT
34174: IFFALSE 34178
// exit ;
34176: GO 34204
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34178: LD_VAR 0 1
34182: PUSH
34183: LD_INT 1
34185: PPUSH
34186: LD_VAR 0 1
34190: PPUSH
34191: CALL_OW 12
34195: ARRAY
34196: PPUSH
34197: LD_INT 1
34199: PPUSH
34200: CALL_OW 234
// end ;
34204: PPOPN 1
34206: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
34207: LD_EXP 56
34211: PUSH
34212: LD_EXP 104
34216: AND
34217: IFFALSE 34329
34219: GO 34221
34221: DISABLE
34222: LD_INT 0
34224: PPUSH
34225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
34226: LD_ADDR_VAR 0 2
34230: PUSH
34231: LD_INT 22
34233: PUSH
34234: LD_OWVAR 2
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 2
34245: PUSH
34246: LD_INT 30
34248: PUSH
34249: LD_INT 27
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 30
34258: PUSH
34259: LD_INT 26
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 30
34268: PUSH
34269: LD_INT 28
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PPUSH
34286: CALL_OW 69
34290: ST_TO_ADDR
// if not tmp then
34291: LD_VAR 0 2
34295: NOT
34296: IFFALSE 34300
// exit ;
34298: GO 34329
// for i in tmp do
34300: LD_ADDR_VAR 0 1
34304: PUSH
34305: LD_VAR 0 2
34309: PUSH
34310: FOR_IN
34311: IFFALSE 34327
// SetLives ( i , 1 ) ;
34313: LD_VAR 0 1
34317: PPUSH
34318: LD_INT 1
34320: PPUSH
34321: CALL_OW 234
34325: GO 34310
34327: POP
34328: POP
// end ;
34329: PPOPN 2
34331: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
34332: LD_EXP 56
34336: PUSH
34337: LD_EXP 105
34341: AND
34342: IFFALSE 34616
34344: GO 34346
34346: DISABLE
34347: LD_INT 0
34349: PPUSH
34350: PPUSH
34351: PPUSH
// begin i := rand ( 1 , 7 ) ;
34352: LD_ADDR_VAR 0 1
34356: PUSH
34357: LD_INT 1
34359: PPUSH
34360: LD_INT 7
34362: PPUSH
34363: CALL_OW 12
34367: ST_TO_ADDR
// case i of 1 :
34368: LD_VAR 0 1
34372: PUSH
34373: LD_INT 1
34375: DOUBLE
34376: EQUAL
34377: IFTRUE 34381
34379: GO 34391
34381: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
34382: LD_STRING earthquake(getX(game), 0, 32)
34384: PPUSH
34385: CALL_OW 559
34389: GO 34616
34391: LD_INT 2
34393: DOUBLE
34394: EQUAL
34395: IFTRUE 34399
34397: GO 34413
34399: POP
// begin ToLua ( displayStucuk(); ) ;
34400: LD_STRING displayStucuk();
34402: PPUSH
34403: CALL_OW 559
// ResetFog ;
34407: CALL_OW 335
// end ; 3 :
34411: GO 34616
34413: LD_INT 3
34415: DOUBLE
34416: EQUAL
34417: IFTRUE 34421
34419: GO 34525
34421: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34422: LD_ADDR_VAR 0 2
34426: PUSH
34427: LD_INT 22
34429: PUSH
34430: LD_OWVAR 2
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 25
34441: PUSH
34442: LD_INT 1
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PPUSH
34453: CALL_OW 69
34457: ST_TO_ADDR
// if not tmp then
34458: LD_VAR 0 2
34462: NOT
34463: IFFALSE 34467
// exit ;
34465: GO 34616
// un := tmp [ rand ( 1 , tmp ) ] ;
34467: LD_ADDR_VAR 0 3
34471: PUSH
34472: LD_VAR 0 2
34476: PUSH
34477: LD_INT 1
34479: PPUSH
34480: LD_VAR 0 2
34484: PPUSH
34485: CALL_OW 12
34489: ARRAY
34490: ST_TO_ADDR
// if Crawls ( un ) then
34491: LD_VAR 0 3
34495: PPUSH
34496: CALL_OW 318
34500: IFFALSE 34511
// ComWalk ( un ) ;
34502: LD_VAR 0 3
34506: PPUSH
34507: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34511: LD_VAR 0 3
34515: PPUSH
34516: LD_INT 8
34518: PPUSH
34519: CALL_OW 336
// end ; 4 :
34523: GO 34616
34525: LD_INT 4
34527: DOUBLE
34528: EQUAL
34529: IFTRUE 34533
34531: GO 34594
34533: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
34534: LD_ADDR_VAR 0 2
34538: PUSH
34539: LD_INT 22
34541: PUSH
34542: LD_OWVAR 2
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 30
34553: PUSH
34554: LD_INT 29
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PPUSH
34565: CALL_OW 69
34569: ST_TO_ADDR
// if not tmp then
34570: LD_VAR 0 2
34574: NOT
34575: IFFALSE 34579
// exit ;
34577: GO 34616
// DestroyUnit ( tmp [ 1 ] ) ;
34579: LD_VAR 0 2
34583: PUSH
34584: LD_INT 1
34586: ARRAY
34587: PPUSH
34588: CALL_OW 65
// end ; 5 .. 7 :
34592: GO 34616
34594: LD_INT 5
34596: DOUBLE
34597: GREATEREQUAL
34598: IFFALSE 34606
34600: LD_INT 7
34602: DOUBLE
34603: LESSEQUAL
34604: IFTRUE 34608
34606: GO 34615
34608: POP
// StreamSibBomb ; end ;
34609: CALL 30896 0 0
34613: GO 34616
34615: POP
// end ;
34616: PPOPN 3
34618: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
34619: LD_EXP 56
34623: PUSH
34624: LD_EXP 106
34628: AND
34629: IFFALSE 34785
34631: GO 34633
34633: DISABLE
34634: LD_INT 0
34636: PPUSH
34637: PPUSH
34638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
34639: LD_ADDR_VAR 0 2
34643: PUSH
34644: LD_INT 81
34646: PUSH
34647: LD_OWVAR 2
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 2
34658: PUSH
34659: LD_INT 21
34661: PUSH
34662: LD_INT 1
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 21
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: LIST
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PPUSH
34688: CALL_OW 69
34692: ST_TO_ADDR
// if not tmp then
34693: LD_VAR 0 2
34697: NOT
34698: IFFALSE 34702
// exit ;
34700: GO 34785
// p := 0 ;
34702: LD_ADDR_VAR 0 3
34706: PUSH
34707: LD_INT 0
34709: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34710: LD_INT 35
34712: PPUSH
34713: CALL_OW 67
// p := p + 1 ;
34717: LD_ADDR_VAR 0 3
34721: PUSH
34722: LD_VAR 0 3
34726: PUSH
34727: LD_INT 1
34729: PLUS
34730: ST_TO_ADDR
// for i in tmp do
34731: LD_ADDR_VAR 0 1
34735: PUSH
34736: LD_VAR 0 2
34740: PUSH
34741: FOR_IN
34742: IFFALSE 34773
// if GetLives ( i ) < 1000 then
34744: LD_VAR 0 1
34748: PPUSH
34749: CALL_OW 256
34753: PUSH
34754: LD_INT 1000
34756: LESS
34757: IFFALSE 34771
// SetLives ( i , 1000 ) ;
34759: LD_VAR 0 1
34763: PPUSH
34764: LD_INT 1000
34766: PPUSH
34767: CALL_OW 234
34771: GO 34741
34773: POP
34774: POP
// until p > 20 ;
34775: LD_VAR 0 3
34779: PUSH
34780: LD_INT 20
34782: GREATER
34783: IFFALSE 34710
// end ;
34785: PPOPN 3
34787: END
// every 0 0$1 trigger StreamModeActive and sTime do
34788: LD_EXP 56
34792: PUSH
34793: LD_EXP 107
34797: AND
34798: IFFALSE 34833
34800: GO 34802
34802: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
34803: LD_INT 28
34805: PPUSH
34806: LD_OWVAR 2
34810: PPUSH
34811: LD_INT 2
34813: PPUSH
34814: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
34818: LD_INT 30
34820: PPUSH
34821: LD_OWVAR 2
34825: PPUSH
34826: LD_INT 2
34828: PPUSH
34829: CALL_OW 322
// end ;
34833: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
34834: LD_EXP 56
34838: PUSH
34839: LD_EXP 108
34843: AND
34844: IFFALSE 34965
34846: GO 34848
34848: DISABLE
34849: LD_INT 0
34851: PPUSH
34852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34853: LD_ADDR_VAR 0 2
34857: PUSH
34858: LD_INT 22
34860: PUSH
34861: LD_OWVAR 2
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 21
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 3
34882: PUSH
34883: LD_INT 23
34885: PUSH
34886: LD_INT 0
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: LIST
34901: PPUSH
34902: CALL_OW 69
34906: ST_TO_ADDR
// if not tmp then
34907: LD_VAR 0 2
34911: NOT
34912: IFFALSE 34916
// exit ;
34914: GO 34965
// for i in tmp do
34916: LD_ADDR_VAR 0 1
34920: PUSH
34921: LD_VAR 0 2
34925: PUSH
34926: FOR_IN
34927: IFFALSE 34963
// begin if Crawls ( i ) then
34929: LD_VAR 0 1
34933: PPUSH
34934: CALL_OW 318
34938: IFFALSE 34949
// ComWalk ( i ) ;
34940: LD_VAR 0 1
34944: PPUSH
34945: CALL_OW 138
// SetClass ( i , 2 ) ;
34949: LD_VAR 0 1
34953: PPUSH
34954: LD_INT 2
34956: PPUSH
34957: CALL_OW 336
// end ;
34961: GO 34926
34963: POP
34964: POP
// end ;
34965: PPOPN 2
34967: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
34968: LD_EXP 56
34972: PUSH
34973: LD_EXP 109
34977: AND
34978: IFFALSE 35259
34980: GO 34982
34982: DISABLE
34983: LD_INT 0
34985: PPUSH
34986: PPUSH
34987: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
34988: LD_OWVAR 2
34992: PPUSH
34993: LD_INT 9
34995: PPUSH
34996: LD_INT 1
34998: PPUSH
34999: LD_INT 1
35001: PPUSH
35002: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
35006: LD_INT 9
35008: PPUSH
35009: LD_OWVAR 2
35013: PPUSH
35014: CALL_OW 343
// uc_side := 9 ;
35018: LD_ADDR_OWVAR 20
35022: PUSH
35023: LD_INT 9
35025: ST_TO_ADDR
// uc_nation := 2 ;
35026: LD_ADDR_OWVAR 21
35030: PUSH
35031: LD_INT 2
35033: ST_TO_ADDR
// hc_name := Dark Warrior ;
35034: LD_ADDR_OWVAR 26
35038: PUSH
35039: LD_STRING Dark Warrior
35041: ST_TO_ADDR
// hc_gallery :=  ;
35042: LD_ADDR_OWVAR 33
35046: PUSH
35047: LD_STRING 
35049: ST_TO_ADDR
// hc_noskilllimit := true ;
35050: LD_ADDR_OWVAR 76
35054: PUSH
35055: LD_INT 1
35057: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
35058: LD_ADDR_OWVAR 31
35062: PUSH
35063: LD_INT 30
35065: PUSH
35066: LD_INT 30
35068: PUSH
35069: LD_INT 30
35071: PUSH
35072: LD_INT 30
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: ST_TO_ADDR
// un := CreateHuman ;
35081: LD_ADDR_VAR 0 3
35085: PUSH
35086: CALL_OW 44
35090: ST_TO_ADDR
// hc_noskilllimit := false ;
35091: LD_ADDR_OWVAR 76
35095: PUSH
35096: LD_INT 0
35098: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35099: LD_VAR 0 3
35103: PPUSH
35104: LD_INT 1
35106: PPUSH
35107: CALL_OW 51
// p := 0 ;
35111: LD_ADDR_VAR 0 2
35115: PUSH
35116: LD_INT 0
35118: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35119: LD_INT 35
35121: PPUSH
35122: CALL_OW 67
// p := p + 1 ;
35126: LD_ADDR_VAR 0 2
35130: PUSH
35131: LD_VAR 0 2
35135: PUSH
35136: LD_INT 1
35138: PLUS
35139: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
35140: LD_VAR 0 3
35144: PPUSH
35145: CALL_OW 256
35149: PUSH
35150: LD_INT 1000
35152: LESS
35153: IFFALSE 35167
// SetLives ( un , 1000 ) ;
35155: LD_VAR 0 3
35159: PPUSH
35160: LD_INT 1000
35162: PPUSH
35163: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
35167: LD_VAR 0 3
35171: PPUSH
35172: LD_INT 81
35174: PUSH
35175: LD_OWVAR 2
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 91
35186: PUSH
35187: LD_VAR 0 3
35191: PUSH
35192: LD_INT 30
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: LIST
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PPUSH
35204: CALL_OW 69
35208: PPUSH
35209: LD_VAR 0 3
35213: PPUSH
35214: CALL_OW 74
35218: PPUSH
35219: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
35223: LD_VAR 0 2
35227: PUSH
35228: LD_INT 60
35230: GREATER
35231: PUSH
35232: LD_VAR 0 3
35236: PPUSH
35237: CALL_OW 301
35241: OR
35242: IFFALSE 35119
// if un then
35244: LD_VAR 0 3
35248: IFFALSE 35259
// RemoveUnit ( un ) ;
35250: LD_VAR 0 3
35254: PPUSH
35255: CALL_OW 64
// end ; end_of_file
35259: PPOPN 3
35261: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35262: LD_INT 0
35264: PPUSH
35265: PPUSH
35266: PPUSH
35267: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35268: LD_VAR 0 1
35272: PPUSH
35273: CALL_OW 264
35277: PUSH
35278: LD_EXP 55
35282: EQUAL
35283: IFFALSE 35355
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35285: LD_INT 68
35287: PPUSH
35288: LD_VAR 0 1
35292: PPUSH
35293: CALL_OW 255
35297: PPUSH
35298: CALL_OW 321
35302: PUSH
35303: LD_INT 2
35305: EQUAL
35306: IFFALSE 35318
// eff := 70 else
35308: LD_ADDR_VAR 0 4
35312: PUSH
35313: LD_INT 70
35315: ST_TO_ADDR
35316: GO 35326
// eff := 30 ;
35318: LD_ADDR_VAR 0 4
35322: PUSH
35323: LD_INT 30
35325: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35326: LD_VAR 0 1
35330: PPUSH
35331: CALL_OW 250
35335: PPUSH
35336: LD_VAR 0 1
35340: PPUSH
35341: CALL_OW 251
35345: PPUSH
35346: LD_VAR 0 4
35350: PPUSH
35351: CALL_OW 495
// end ; end ;
35355: LD_VAR 0 2
35359: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35360: LD_INT 0
35362: PPUSH
// end ;
35363: LD_VAR 0 4
35367: RET
// export function SOS_Command ( cmd ) ; begin
35368: LD_INT 0
35370: PPUSH
// end ;
35371: LD_VAR 0 2
35375: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35376: LD_VAR 0 1
35380: PUSH
35381: LD_INT 255
35383: EQUAL
35384: PUSH
35385: LD_VAR 0 2
35389: PPUSH
35390: CALL_OW 264
35394: PUSH
35395: LD_INT 14
35397: PUSH
35398: LD_INT 53
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: IN
35405: AND
35406: PUSH
35407: LD_VAR 0 4
35411: PPUSH
35412: LD_VAR 0 5
35416: PPUSH
35417: CALL_OW 488
35421: AND
35422: IFFALSE 35446
// CutTreeXYR ( unit , x , y , 12 ) ;
35424: LD_VAR 0 2
35428: PPUSH
35429: LD_VAR 0 4
35433: PPUSH
35434: LD_VAR 0 5
35438: PPUSH
35439: LD_INT 12
35441: PPUSH
35442: CALL 35449 0 4
// end ;
35446: PPOPN 5
35448: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35449: LD_INT 0
35451: PPUSH
35452: PPUSH
35453: PPUSH
35454: PPUSH
35455: PPUSH
35456: PPUSH
35457: PPUSH
35458: PPUSH
35459: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35460: LD_VAR 0 1
35464: NOT
35465: PUSH
35466: LD_VAR 0 2
35470: PPUSH
35471: LD_VAR 0 3
35475: PPUSH
35476: CALL_OW 488
35480: NOT
35481: OR
35482: PUSH
35483: LD_VAR 0 4
35487: NOT
35488: OR
35489: IFFALSE 35493
// exit ;
35491: GO 35833
// list := [ ] ;
35493: LD_ADDR_VAR 0 13
35497: PUSH
35498: EMPTY
35499: ST_TO_ADDR
// if x - r < 0 then
35500: LD_VAR 0 2
35504: PUSH
35505: LD_VAR 0 4
35509: MINUS
35510: PUSH
35511: LD_INT 0
35513: LESS
35514: IFFALSE 35526
// min_x := 0 else
35516: LD_ADDR_VAR 0 7
35520: PUSH
35521: LD_INT 0
35523: ST_TO_ADDR
35524: GO 35542
// min_x := x - r ;
35526: LD_ADDR_VAR 0 7
35530: PUSH
35531: LD_VAR 0 2
35535: PUSH
35536: LD_VAR 0 4
35540: MINUS
35541: ST_TO_ADDR
// if y - r < 0 then
35542: LD_VAR 0 3
35546: PUSH
35547: LD_VAR 0 4
35551: MINUS
35552: PUSH
35553: LD_INT 0
35555: LESS
35556: IFFALSE 35568
// min_y := 0 else
35558: LD_ADDR_VAR 0 8
35562: PUSH
35563: LD_INT 0
35565: ST_TO_ADDR
35566: GO 35584
// min_y := y - r ;
35568: LD_ADDR_VAR 0 8
35572: PUSH
35573: LD_VAR 0 3
35577: PUSH
35578: LD_VAR 0 4
35582: MINUS
35583: ST_TO_ADDR
// max_x := x + r ;
35584: LD_ADDR_VAR 0 9
35588: PUSH
35589: LD_VAR 0 2
35593: PUSH
35594: LD_VAR 0 4
35598: PLUS
35599: ST_TO_ADDR
// max_y := y + r ;
35600: LD_ADDR_VAR 0 10
35604: PUSH
35605: LD_VAR 0 3
35609: PUSH
35610: LD_VAR 0 4
35614: PLUS
35615: ST_TO_ADDR
// for _x = min_x to max_x do
35616: LD_ADDR_VAR 0 11
35620: PUSH
35621: DOUBLE
35622: LD_VAR 0 7
35626: DEC
35627: ST_TO_ADDR
35628: LD_VAR 0 9
35632: PUSH
35633: FOR_TO
35634: IFFALSE 35751
// for _y = min_y to max_y do
35636: LD_ADDR_VAR 0 12
35640: PUSH
35641: DOUBLE
35642: LD_VAR 0 8
35646: DEC
35647: ST_TO_ADDR
35648: LD_VAR 0 10
35652: PUSH
35653: FOR_TO
35654: IFFALSE 35747
// begin if not ValidHex ( _x , _y ) then
35656: LD_VAR 0 11
35660: PPUSH
35661: LD_VAR 0 12
35665: PPUSH
35666: CALL_OW 488
35670: NOT
35671: IFFALSE 35675
// continue ;
35673: GO 35653
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35675: LD_VAR 0 11
35679: PPUSH
35680: LD_VAR 0 12
35684: PPUSH
35685: CALL_OW 351
35689: PUSH
35690: LD_VAR 0 11
35694: PPUSH
35695: LD_VAR 0 12
35699: PPUSH
35700: CALL_OW 554
35704: AND
35705: IFFALSE 35745
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35707: LD_ADDR_VAR 0 13
35711: PUSH
35712: LD_VAR 0 13
35716: PPUSH
35717: LD_VAR 0 13
35721: PUSH
35722: LD_INT 1
35724: PLUS
35725: PPUSH
35726: LD_VAR 0 11
35730: PUSH
35731: LD_VAR 0 12
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PPUSH
35740: CALL_OW 2
35744: ST_TO_ADDR
// end ;
35745: GO 35653
35747: POP
35748: POP
35749: GO 35633
35751: POP
35752: POP
// if not list then
35753: LD_VAR 0 13
35757: NOT
35758: IFFALSE 35762
// exit ;
35760: GO 35833
// for i in list do
35762: LD_ADDR_VAR 0 6
35766: PUSH
35767: LD_VAR 0 13
35771: PUSH
35772: FOR_IN
35773: IFFALSE 35831
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35775: LD_VAR 0 1
35779: PPUSH
35780: LD_STRING M
35782: PUSH
35783: LD_VAR 0 6
35787: PUSH
35788: LD_INT 1
35790: ARRAY
35791: PUSH
35792: LD_VAR 0 6
35796: PUSH
35797: LD_INT 2
35799: ARRAY
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: PUSH
35822: EMPTY
35823: LIST
35824: PPUSH
35825: CALL_OW 447
35829: GO 35772
35831: POP
35832: POP
// end ;
35833: LD_VAR 0 5
35837: RET
